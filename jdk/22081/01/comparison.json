{"files":[{"patch":"@@ -181,1 +181,0 @@\n-  MAN_FILES_TROFF := $(wildcard $(addsuffix \/*.1, $(call FindModuleManDirs, $(MODULE))))\n@@ -184,1 +183,0 @@\n-    # If we got markdown files, ignore the troff files\n@@ -229,8 +227,0 @@\n-  else\n-    # No markdown man pages present\n-    $(eval $(call SetupCopyFiles, COPY_MAN_PAGES, \\\n-        DEST := $(SUPPORT_OUTPUTDIR)\/modules_man\/$(MODULE)\/man1, \\\n-        FILES := $(MAN_FILES_TROFF), \\\n-    ))\n-\n-    TARGETS += $(COPY_MAN_PAGES)\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,5409 +0,0 @@\n-.\\\" Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-'\\\" t\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JAVA\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-java - launch a Java application\n-.SH SYNOPSIS\n-.PP\n-To launch a class file:\n-.PP\n-\\f[V]java\\f[R] [\\f[I]options\\f[R]] \\f[I]mainclass\\f[R] [\\f[I]args\\f[R]\n-\\&...]\n-.PP\n-To launch the main class in a JAR file:\n-.PP\n-\\f[V]java\\f[R] [\\f[I]options\\f[R]] \\f[V]-jar\\f[R] \\f[I]jarfile\\f[R]\n-[\\f[I]args\\f[R] ...]\n-.PP\n-To launch the main class in a module:\n-.PP\n-\\f[V]java\\f[R] [\\f[I]options\\f[R]] \\f[V]-m\\f[R]\n-\\f[I]module\\f[R][\\f[V]\/\\f[R]\\f[I]mainclass\\f[R]] [\\f[I]args\\f[R] ...]\n-.PP\n-or\n-.PP\n-\\f[V]java\\f[R] [\\f[I]options\\f[R]] \\f[V]--module\\f[R]\n-\\f[I]module\\f[R][\\f[V]\/\\f[R]\\f[I]mainclass\\f[R]] [\\f[I]args\\f[R] ...]\n-.PP\n-To launch a source-file program:\n-.PP\n-\\f[V]java\\f[R] [\\f[I]options\\f[R]] \\f[I]source-file\\f[R] [\\f[I]args\\f[R]\n-\\&...]\n-.TP\n-\\f[I]options\\f[R]\n-Optional: Specifies command-line options separated by spaces.\n-See \\f[B]Overview of Java Options\\f[R] for a description of available\n-options.\n-.TP\n-\\f[I]mainclass\\f[R]\n-Specifies the name of the class to be launched.\n-Command-line entries following \\f[V]classname\\f[R] are the arguments for\n-the main method.\n-.TP\n-\\f[V]-jar\\f[R] \\f[I]jarfile\\f[R]\n-Executes a program encapsulated in a JAR file.\n-The \\f[I]jarfile\\f[R] argument is the name of a JAR file with a manifest\n-that contains a line in the form\n-\\f[V]Main-Class:\\f[R]\\f[I]classname\\f[R] that defines the class with the\n-\\f[V]public static void main(String[] args)\\f[R] method that serves as\n-your application\\[aq]s starting point.\n-When you use \\f[V]-jar\\f[R], the specified JAR file is the source of all\n-user classes, and other class path settings are ignored.\n-If you\\[aq]re using JAR files, then see \\f[B]jar\\f[R].\n-.TP\n-\\f[V]-m\\f[R] or \\f[V]--module\\f[R] \\f[I]module\\f[R][\\f[V]\/\\f[R]\\f[I]mainclass\\f[R]]\n-Executes the main class in a module specified by \\f[I]mainclass\\f[R] if\n-it is given, or, if it is not given, the value in the \\f[I]module\\f[R].\n-In other words, \\f[I]mainclass\\f[R] can be used when it is not specified\n-by the module, or to override the value when it is specified.\n-.RS\n-.PP\n-See \\f[B]Standard Options for Java\\f[R].\n-.RE\n-.TP\n-\\f[I]source-file\\f[R]\n-Only used to launch a source-file program.\n-Specifies the source file that contains the main class when using\n-source-file mode.\n-See \\f[B]Using Source-File Mode to Launch Source-Code Programs\\f[R]\n-.TP\n-\\f[I]args\\f[R] ...\n-Optional: Arguments following \\f[I]mainclass\\f[R],\n-\\f[I]source-file\\f[R], \\f[V]-jar\\f[R] \\f[I]jarfile\\f[R], and\n-\\f[V]-m\\f[R] or \\f[V]--module\\f[R]\n-\\f[I]module\\f[R]\\f[V]\/\\f[R]\\f[I]mainclass\\f[R] are passed as arguments\n-to the main class.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]java\\f[R] command starts a Java application.\n-It does this by starting the Java Virtual Machine (JVM), loading the\n-specified class, and calling that class\\[aq]s \\f[V]main()\\f[R] method.\n-The method must be declared \\f[V]public\\f[R] and \\f[V]static\\f[R], it\n-must not return any value, and it must accept a \\f[V]String\\f[R] array\n-as a parameter.\n-The method declaration has the following form:\n-.RS\n-.PP\n-\\f[V]public static void main(String[] args)\\f[R]\n-.RE\n-.PP\n-In source-file mode, the \\f[V]java\\f[R] command can launch a class\n-declared in a source file.\n-See \\f[B]Using Source-File Mode to Launch Source-Code Programs\\f[R] for\n-a description of using the source-file mode.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] You can use the \\f[V]JDK_JAVA_OPTIONS\\f[R] launcher\n-environment variable to prepend its content to the actual command line\n-of the \\f[V]java\\f[R] launcher.\n-See \\f[B]Using the JDK_JAVA_OPTIONS Launcher Environment Variable\\f[R].\n-.RE\n-.PP\n-By default, the first argument that isn\\[aq]t an option of the\n-\\f[V]java\\f[R] command is the fully qualified name of the class to be\n-called.\n-If \\f[V]-jar\\f[R] is specified, then its argument is the name of the JAR\n-file containing class and resource files for the application.\n-The startup class must be indicated by the \\f[V]Main-Class\\f[R] manifest\n-header in its manifest file.\n-.PP\n-Arguments after the class file name or the JAR file name are passed to\n-the \\f[V]main()\\f[R] method.\n-.SS \\f[V]javaw\\f[R]\n-.PP\n-\\f[B]Windows:\\f[R] The \\f[V]javaw\\f[R] command is identical to\n-\\f[V]java\\f[R], except that with \\f[V]javaw\\f[R] there\\[aq]s no\n-associated console window.\n-Use \\f[V]javaw\\f[R] when you don\\[aq]t want a command prompt window to\n-appear.\n-The \\f[V]javaw\\f[R] launcher will, however, display a dialog box with\n-error information if a launch fails.\n-.SH USING SOURCE-FILE MODE TO LAUNCH SOURCE-CODE PROGRAMS\n-.PP\n-To launch a class declared in a source file, run the \\f[V]java\\f[R]\n-launcher in source-file mode.\n-Entering source-file mode is determined by two items on the\n-\\f[V]java\\f[R] command line:\n-.IP \\[bu] 2\n-The first item on the command line that is not an option or part of an\n-option.\n-In other words, the item in the command line that would otherwise be the\n-main class name.\n-.IP \\[bu] 2\n-The \\f[V]--source\\f[R] \\f[I]version\\f[R] option, if present.\n-.PP\n-If the class identifies an existing file that has a \\f[V].java\\f[R]\n-extension, or if the \\f[V]--source\\f[R] option is specified, then\n-source-file mode is selected.\n-The source file is then compiled and run.\n-The \\f[V]--source\\f[R] option can be used to specify the source\n-\\f[I]version\\f[R] or \\f[I]N\\f[R] of the source code.\n-This determines the API that can be used.\n-When you set \\f[V]--source\\f[R] \\f[I]N\\f[R], you can only use the public\n-API that was defined in JDK \\f[I]N\\f[R].\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] The valid values of \\f[I]N\\f[R] change for each release,\n-with new values added and old values removed.\n-You\\[aq]ll get an error message if you use a value of \\f[I]N\\f[R] that\n-is no longer supported.\n-The supported values of \\f[I]N\\f[R] are the current Java SE release\n-(\\f[V]24\\f[R]) and a limited number of previous releases, detailed in\n-the command-line help for \\f[V]javac\\f[R], under the \\f[V]--source\\f[R]\n-and \\f[V]--release\\f[R] options.\n-.RE\n-.PP\n-If the file does not have the \\f[V].java\\f[R] extension, the\n-\\f[V]--source\\f[R] option must be used to tell the \\f[V]java\\f[R]\n-command to use the source-file mode.\n-The \\f[V]--source\\f[R] option is used for cases when the source file is\n-a \\[dq]script\\[dq] to be executed and the name of the source file does\n-not follow the normal naming conventions for Java source files.\n-.PP\n-In source-file mode, the effect is as though the source file is compiled\n-into memory, and the first class found in the source file is executed.\n-Any arguments placed after the name of the source file in the original\n-command line are passed to the compiled class when it is executed.\n-.PP\n-For example, if a file were named \\f[V]HelloWorld.java\\f[R] and\n-contained a class named \\f[V]HelloWorld\\f[R], then the source-file mode\n-command to launch the class would be:\n-.RS\n-.PP\n-\\f[V]java HelloWorld.java\\f[R]\n-.RE\n-.PP\n-This use of source-file mode is informally equivalent to using the\n-following two commands:\n-.IP\n-.nf\n-\\f[CB]\n-javac -d <memory> --source-path <source-root> HelloWorld.java\n-java --class-path <memory> HelloWorld\n-\\f[R]\n-.fi\n-.PP\n-where \\f[V]<source-root>\\f[R] is computed\n-.PP\n-\\f[B]In source-file mode, any additional command-line options are\n-processed as follows:\\f[R]\n-.IP \\[bu] 2\n-The launcher scans the options specified before the source file for any\n-that are relevant in order to compile the source file.\n-.RS 2\n-.PP\n-This includes: \\f[V]--class-path\\f[R], \\f[V]--module-path\\f[R],\n-\\f[V]--add-exports\\f[R], \\f[V]--add-modules\\f[R],\n-\\f[V]--limit-modules\\f[R], \\f[V]--patch-module\\f[R],\n-\\f[V]--upgrade-module-path\\f[R], and any variant forms of those options.\n-It also includes the new \\f[V]--enable-preview\\f[R] option, described in\n-JEP 12.\n-.RE\n-.IP \\[bu] 2\n-No provision is made to pass any additional options to the compiler,\n-such as \\f[V]-processor\\f[R] or \\f[V]-Werror\\f[R].\n-.IP \\[bu] 2\n-Command-line argument files (\\f[V]\\[at]\\f[R]-files) may be used in the\n-standard way.\n-Long lists of arguments for either the VM or the program being invoked\n-may be placed in files specified on the command-line by prefixing the\n-filename with an \\f[V]\\[at]\\f[R] character.\n-.PP\n-\\f[B]In source-file mode, compilation proceeds as follows:\\f[R]\n-.IP \\[bu] 2\n-Any command-line options that are relevant to the compilation\n-environment are taken into account.\n-These include:\n-\\f[V]--class-path\\f[R]\/\\f[V]-classpath\\f[R]\/\\f[V]-cp\\f[R],\n-\\f[V]--module-path\\f[R]\/\\f[V]-p\\f[R], \\f[V]--add-exports\\f[R],\n-\\f[V]--add-modules\\f[R], \\f[V]--limit-modules\\f[R],\n-\\f[V]--patch-module\\f[R], \\f[V]--upgrade-module-path\\f[R],\n-\\f[V]--enable-preview\\f[R].\n-.IP \\[bu] 2\n-The root of the source tree, \\f[V]<source-root>\\f[R] is computed from\n-the package of the class being launched.\n-For example, if \\f[V]HelloWorld.java\\f[R] declared its classes to be in\n-the \\f[V]hello\\f[R] package, then the file \\f[V]HelloWorld.java\\f[R] is\n-expected to reside in the directory \\f[V]somedir\/hello\/\\f[R].\n-In this case, \\f[V]somedir\\f[R] is computed to be the root of the source\n-tree.\n-.IP \\[bu] 2\n-The root of the source tree serves as the source-path for compilation,\n-so that other source files found in that tree and are needed by\n-\\f[V]HelloWorld\\f[R] could be compiled.\n-.IP \\[bu] 2\n-Annotation processing is disabled, as if \\f[V]-proc:none\\f[R] is in\n-effect.\n-.IP \\[bu] 2\n-If a version is specified, via the \\f[V]--source\\f[R] option, the value\n-is used as the argument for an implicit \\f[V]--release\\f[R] option for\n-the compilation.\n-This sets both the source version accepted by compiler and the system\n-API that may be used by the code in the source file.\n-.IP \\[bu] 2\n-If \\f[V]--enable-preview\\f[R] is specified, the \\f[V]--source N\\f[R]\n-arguments can be omitted.\n-If the Java runtime version is \\f[V]N\\f[R], then \\f[V]--release N\\f[R]\n-is implied when compiling source files.\n-.IP \\[bu] 2\n-If a \\f[V]module-info.java\\f[R] file exists in the\n-\\f[V]<source-root>\\f[R] directory, its module declaration is used to\n-define a named module that will contain all the classes compiled from\n-\\f[V].java\\f[R] files in the source tree.\n-If \\f[V]module-info.java\\f[R] does not exist, all the classes compiled\n-from source files will be compiled in the context of the unnamed module.\n-.IP \\[bu] 2\n-The source file that is launched should contain one or more top-level\n-classes, the first of which is taken as the class to be executed.\n-.IP \\[bu] 2\n-For the source file that is launched, the compiler does not enforce the\n-optional restriction defined at the end of JLS 7.6, that a type in a\n-named package should exist in a file whose name is composed from the\n-type name followed by the \\f[V].java\\f[R] extension.\n-.IP \\[bu] 2\n-If a source file contains errors, appropriate error messages are written\n-to the standard error stream, and the launcher exits with a non-zero\n-exit code.\n-.PP\n-\\f[B]In source-file mode, execution proceeds as follows:\\f[R]\n-.IP \\[bu] 2\n-The class to be executed is the first top-level class found in the\n-source file.\n-It must contain a declaration of an entry \\f[V]main\\f[R] method.\n-.IP \\[bu] 2\n-The compiled classes are loaded by a custom class loader, that delegates\n-to the application class loader.\n-This implies that classes appearing on the application class path cannot\n-refer to any classes declared in source files.\n-.IP \\[bu] 2\n-If a \\f[V]module-info.java\\f[R] file exists in the\n-\\f[V]<source-root>\\f[R] directory, then all the classes compiled from\n-\\f[V].java\\f[R] files in the source tree will be in that module, which\n-will serve as the root module for the execution of the program.\n-If \\f[V]module-info.java\\f[R] does not exist, the compiled classes are\n-executed in the context of an unnamed module, as though\n-\\f[V]--add-modules=ALL-DEFAULT\\f[R] is in effect.\n-This is in addition to any other \\f[V]--add-module\\f[R] options that may\n-be have been specified on the command line.\n-.IP \\[bu] 2\n-Any arguments appearing after the name of the file on the command line\n-are passed to the main method in the obvious way.\n-.IP \\[bu] 2\n-It is an error if there is a class on the application class path whose\n-name is the same as that of the class to be executed.\n-.PP\n-See \\f[B]JEP 458: Launch Multi-File Source-Code Programs\\f[R]\n-[https:\/\/openjdk.org\/jeps\/458] for complete details.\n-.SH USING THE JDK_JAVA_OPTIONS LAUNCHER ENVIRONMENT VARIABLE\n-.PP\n-\\f[V]JDK_JAVA_OPTIONS\\f[R] prepends its content to the options parsed\n-from the command line.\n-The content of the \\f[V]JDK_JAVA_OPTIONS\\f[R] environment variable is a\n-list of arguments separated by white-space characters (as determined by\n-\\f[V]isspace()\\f[R]).\n-These are prepended to the command line arguments passed to\n-\\f[V]java\\f[R] launcher.\n-The encoding requirement for the environment variable is the same as the\n-\\f[V]java\\f[R] command line on the system.\n-\\f[V]JDK_JAVA_OPTIONS\\f[R] environment variable content is treated in\n-the same manner as that specified in the command line.\n-.PP\n-Single (\\f[V]\\[aq]\\f[R]) or double (\\f[V]\\[dq]\\f[R]) quotes can be used\n-to enclose arguments that contain whitespace characters.\n-All content between the open quote and the first matching close quote\n-are preserved by simply removing the pair of quotes.\n-In case a matching quote is not found, the launcher will abort with an\n-error message.\n-\\f[V]\\[at]\\f[R]-files are supported as they are specified in the command\n-line.\n-However, as in \\f[V]\\[at]\\f[R]-files, use of a wildcard is not\n-supported.\n-In order to mitigate potential misuse of \\f[V]JDK_JAVA_OPTIONS\\f[R]\n-behavior, options that specify the main class (such as \\f[V]-jar\\f[R])\n-or cause the \\f[V]java\\f[R] launcher to exit without executing the main\n-class (such as \\f[V]-h\\f[R]) are disallowed in the environment variable.\n-If any of these options appear in the environment variable, the launcher\n-will abort with an error message.\n-When \\f[V]JDK_JAVA_OPTIONS\\f[R] is set, the launcher prints a message to\n-stderr as a reminder.\n-.PP\n-\\f[B]Example:\\f[R]\n-.IP\n-.nf\n-\\f[CB]\n-$ export JDK_JAVA_OPTIONS=\\[aq]-g \\[at]file1 -Dprop=value \\[at]file2 -Dws.prop=\\[dq]white spaces\\[dq]\\[aq]\n-$ java -Xint \\[at]file3\n-\\f[R]\n-.fi\n-.PP\n-is equivalent to the command line:\n-.IP\n-.nf\n-\\f[CB]\n-java -g \\[at]file1 -Dprop=value \\[at]file2 -Dws.prop=\\[dq]white spaces\\[dq] -Xint \\[at]file3\n-\\f[R]\n-.fi\n-.SH OVERVIEW OF JAVA OPTIONS\n-.PP\n-The \\f[V]java\\f[R] command supports a wide range of options in the\n-following categories:\n-.IP \\[bu] 2\n-\\f[B]Standard Options for Java\\f[R]: Options guaranteed to be supported\n-by all implementations of the Java Virtual Machine (JVM).\n-They\\[aq]re used for common actions, such as checking the version of the\n-JRE, setting the class path, enabling verbose output, and so on.\n-.IP \\[bu] 2\n-\\f[B]Extra Options for Java\\f[R]: General purpose options that are\n-specific to the Java HotSpot Virtual Machine.\n-They aren\\[aq]t guaranteed to be supported by all JVM implementations,\n-and are subject to change.\n-These options start with \\f[V]-X\\f[R].\n-.PP\n-The advanced options aren\\[aq]t recommended for casual use.\n-These are developer options used for tuning specific areas of the Java\n-HotSpot Virtual Machine operation that often have specific system\n-requirements and may require privileged access to system configuration\n-parameters.\n-Several examples of performance tuning are provided in \\f[B]Performance\n-Tuning Examples\\f[R].\n-These options aren\\[aq]t guaranteed to be supported by all JVM\n-implementations and are subject to change.\n-Advanced options start with \\f[V]-XX\\f[R].\n-.IP \\[bu] 2\n-\\f[B]Advanced Runtime Options for Java\\f[R]: Control the runtime\n-behavior of the Java HotSpot VM.\n-.IP \\[bu] 2\n-\\f[B]Advanced JIT Compiler Options for java\\f[R]: Control the dynamic\n-just-in-time (JIT) compilation performed by the Java HotSpot VM.\n-.IP \\[bu] 2\n-\\f[B]Advanced Serviceability Options for Java\\f[R]: Enable gathering\n-system information and performing extensive debugging.\n-.IP \\[bu] 2\n-\\f[B]Advanced Garbage Collection Options for Java\\f[R]: Control how\n-garbage collection (GC) is performed by the Java HotSpot\n-.PP\n-Boolean options are used to either enable a feature that\\[aq]s disabled\n-by default or disable a feature that\\[aq]s enabled by default.\n-Such options don\\[aq]t require a parameter.\n-Boolean \\f[V]-XX\\f[R] options are enabled using the plus sign\n-(\\f[V]-XX:+\\f[R]\\f[I]OptionName\\f[R]) and disabled using the minus sign\n-(\\f[V]-XX:-\\f[R]\\f[I]OptionName\\f[R]).\n-.PP\n-For options that require an argument, the argument may be separated from\n-the option name by a space, a colon (:), or an equal sign (=), or the\n-argument may directly follow the option (the exact syntax differs for\n-each option).\n-If you\\[aq]re expected to specify the size in bytes, then you can use no\n-suffix, or use the suffix \\f[V]k\\f[R] or \\f[V]K\\f[R] for kilobytes (KB),\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] for megabytes (MB), or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] for gigabytes (GB).\n-For example, to set the size to 8 GB, you can specify either\n-\\f[V]8g\\f[R], \\f[V]8192m\\f[R], \\f[V]8388608k\\f[R], or\n-\\f[V]8589934592\\f[R] as the argument.\n-If you are expected to specify the percentage, then use a number from 0\n-to 1.\n-For example, specify \\f[V]0.25\\f[R] for 25%.\n-.PP\n-The following sections describe the options that are deprecated,\n-obsolete, and removed:\n-.IP \\[bu] 2\n-\\f[B]Deprecated Java Options\\f[R]: Accepted and acted upon --- a warning\n-is issued when they\\[aq]re used.\n-.IP \\[bu] 2\n-\\f[B]Obsolete Java Options\\f[R]: Accepted but ignored --- a warning is\n-issued when they\\[aq]re used.\n-.IP \\[bu] 2\n-\\f[B]Removed Java Options\\f[R]: Removed --- using them results in an\n-error.\n-.SH STANDARD OPTIONS FOR JAVA\n-.PP\n-These are the most commonly used options supported by all\n-implementations of the JVM.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] To specify an argument for a long option, you can use\n-either \\f[V]--\\f[R]\\f[I]name\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] or\n-\\f[V]--\\f[R]\\f[I]name\\f[R] \\f[I]value\\f[R].\n-.RE\n-.TP\n-\\f[V]-agentlib:\\f[R]\\f[I]libname\\f[R][\\f[V]=\\f[R]\\f[I]options\\f[R]]\n-Loads the specified native agent library.\n-After the library name, a comma-separated list of options specific to\n-the library can be used.\n-If the option \\f[V]-agentlib:foo\\f[R] is specified, then the JVM\n-attempts to load the library named \\f[V]foo\\f[R] using the platform\n-specific naming conventions and locations:\n-.RS\n-.IP \\[bu] 2\n-\\f[B]Linux and other POSIX-like platforms:\\f[R] The JVM attempts to load\n-the library named \\f[V]libfoo.so\\f[R] in the location specified by the\n-\\f[V]LD_LIBRARY_PATH\\f[R] system variable.\n-.IP \\[bu] 2\n-\\f[B]macOS:\\f[R] The JVM attempts to load the library named\n-\\f[V]libfoo.dylib\\f[R] in the location specified by the\n-\\f[V]DYLD_LIBRARY_PATH\\f[R] system variable.\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] The JVM attempts to load the library named\n-\\f[V]foo.dll\\f[R] in the location specified by the \\f[V]PATH\\f[R] system\n-variable.\n-.RS 2\n-.PP\n-The following example shows how to load the Java Debug Wire Protocol\n-(JDWP) library and listen for the socket connection on port 8000,\n-suspending the JVM before the main class loads:\n-.RS\n-.PP\n-\\f[V]-agentlib:jdwp=transport=dt_socket,server=y,address=8000\\f[R]\n-.RE\n-.RE\n-.RE\n-.TP\n-\\f[V]-agentpath:\\f[R]\\f[I]pathname\\f[R][\\f[V]=\\f[R]\\f[I]options\\f[R]]\n-Loads the native agent library specified by the absolute path name.\n-This option is equivalent to \\f[V]-agentlib\\f[R] but uses the full path\n-and file name of the library.\n-.TP\n-\\f[V]--class-path\\f[R] \\f[I]classpath\\f[R], \\f[V]-classpath\\f[R] \\f[I]classpath\\f[R], or \\f[V]-cp\\f[R] \\f[I]classpath\\f[R]\n-Specifies a list of directories, JAR files, and ZIP archives to search\n-for class files.\n-.RS\n-.PP\n-On Windows, semicolons (\\f[V];\\f[R]) separate entities in this list; on\n-other platforms it is a colon (\\f[V]:\\f[R]).\n-.PP\n-Specifying \\f[I]classpath\\f[R] overrides any setting of the\n-\\f[V]CLASSPATH\\f[R] environment variable.\n-If the class path option isn\\[aq]t used and \\f[I]classpath\\f[R]\n-isn\\[aq]t set, then the user class path consists of the current\n-directory (.).\n-.PP\n-As a special convenience, a class path element that contains a base name\n-of an asterisk (*) is considered equivalent to specifying a list of all\n-the files in the directory with the extension \\f[V].jar\\f[R] or\n-\\f[V].JAR\\f[R] .\n-A Java program can\\[aq]t tell the difference between the two\n-invocations.\n-For example, if the directory mydir contains \\f[V]a.jar\\f[R] and\n-\\f[V]b.JAR\\f[R], then the class path element mydir\/* is expanded to\n-\\f[V]A.jar:b.JAR\\f[R], except that the order of JAR files is\n-unspecified.\n-All \\f[V].jar\\f[R] files in the specified directory, even hidden ones,\n-are included in the list.\n-A class path entry consisting of an asterisk (*) expands to a list of\n-all the jar files in the current directory.\n-The \\f[V]CLASSPATH\\f[R] environment variable, where defined, is\n-similarly expanded.\n-Any class path wildcard expansion that occurs before the Java VM is\n-started.\n-Java programs never see wildcards that aren\\[aq]t expanded except by\n-querying the environment, such as by calling\n-\\f[V]System.getenv(\\[dq]CLASSPATH\\[dq])\\f[R].\n-.RE\n-.TP\n-\\f[V]--disable-\\[at]files\\f[R]\n-Can be used anywhere on the command line, including in an argument file,\n-to prevent further \\f[V]\\[at]filename\\f[R] expansion.\n-This option stops expanding \\f[V]\\[at]\\f[R]-argfiles after the option.\n-.TP\n-\\f[V]--enable-preview\\f[R]\n-Allows classes to depend on \\f[B]preview features\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/12\/language\/index.html#JSLAN-GUID-5A82FE0E-0CA4-4F1F-B075-564874FE2823]\n-of the release.\n-.TP\n-\\f[V]--enable-native-access\\f[R] \\f[I]module\\f[R][\\f[V],\\f[R]\\f[I]module\\f[R]...]\n-Native access involves access to code or data outside the Java runtime.\n-This is generally unsafe and, if done incorrectly, might crash the JVM\n-or result in memory corruption.\n-Native access can occur as a result of calling a method that is either\n-\\f[B]restricted\\f[R] [https:\/\/openjdk.org\/jeps\/454#Safety], or\n-\\f[V]native\\f[R].\n-This option allows code in the specified modules to perform native\n-access.\n-Native access occurring in a module that has not been explicitly enabled\n-is deemed \\f[I]illegal\\f[R].\n-.RS\n-.PP\n-\\f[I]module\\f[R] can be a module name, or \\f[V]ALL-UNNAMED\\f[R] to\n-indicate code on the class path.\n-.RE\n-.TP\n--\\f[V]--illegal-native-access=\\f[R]\\f[I]parameter\\f[R]\n-This option specifies a mode for how illegal native access is handled:\n-.RS\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] This option will be removed in a future release.\n-.RE\n-.IP \\[bu] 2\n-\\f[V]allow\\f[R]: This mode allows illegal native access in all modules,\n-without any warings.\n-.IP \\[bu] 2\n-\\f[V]warn\\f[R]: This mode is identical to \\f[V]allow\\f[R] except that a\n-warning message is issued for the first illegal native access found in a\n-module.\n-This mode is the default for the current JDK but will change in a future\n-release.\n-.IP \\[bu] 2\n-\\f[V]deny\\f[R]: This mode disables illegal native access.\n-That is, any illegal native access causes an\n-\\f[V]IllegalCallerException\\f[R].\n-This mode will become the default in a future release.\n-.PP\n-To verify that your application is ready for a future version of the\n-JDK, run it with \\f[V]--illegal-native-access=deny\\f[R] along with any\n-necessary \\f[V]--enable-native-access\\f[R] options.\n-.RE\n-.TP\n-\\f[V]--finalization=\\f[R]\\f[I]value\\f[R]\n-Controls whether the JVM performs finalization of objects.\n-Valid values are \\[dq]enabled\\[dq] and \\[dq]disabled\\[dq].\n-Finalization is enabled by default, so the value \\[dq]enabled\\[dq] does\n-nothing.\n-The value \\[dq]disabled\\[dq] disables finalization, so that no\n-finalizers are invoked.\n-.TP\n-\\f[V]--module-path\\f[R] \\f[I]modulepath\\f[R]... or \\f[V]-p\\f[R] \\f[I]modulepath\\f[R]\n-Specifies where to find application modules with a list of path\n-elements.\n-The elements of a module path can be a file path to a module or a\n-directory containing modules.\n-Each module is either a modular JAR or an exploded-module directory.\n-.RS\n-.PP\n-On Windows, semicolons (\\f[V];\\f[R]) separate path elements in this\n-list; on other platforms it is a colon (\\f[V]:\\f[R]).\n-.RE\n-.TP\n-\\f[V]--upgrade-module-path\\f[R] \\f[I]modulepath\\f[R]...\n-Specifies where to find module replacements of upgradeable modules in\n-the runtime image with a list of path elements.\n-The elements of a module path can be a file path to a module or a\n-directory containing modules.\n-Each module is either a modular JAR or an exploded-module directory.\n-.RS\n-.PP\n-On Windows, semicolons (\\f[V];\\f[R]) separate path elements in this\n-list; on other platforms it is a colon (\\f[V]:\\f[R]).\n-.RE\n-.TP\n-\\f[V]--add-modules\\f[R] \\f[I]module\\f[R][\\f[V],\\f[R]\\f[I]module\\f[R]...]\n-Specifies the root modules to resolve in addition to the initial module.\n-\\f[I]module\\f[R] can also be \\f[V]ALL-DEFAULT\\f[R],\n-\\f[V]ALL-SYSTEM\\f[R], and \\f[V]ALL-MODULE-PATH\\f[R].\n-.TP\n-\\f[V]--list-modules\\f[R]\n-Lists the observable modules and then exits.\n-.TP\n-\\f[V]-d\\f[R] \\f[I]module_name\\f[R] or \\f[V]--describe-module\\f[R] \\f[I]module_name\\f[R]\n-Describes a specified module and then exits.\n-.TP\n-\\f[V]--dry-run\\f[R]\n-Creates the VM but doesn\\[aq]t execute the main method.\n-This \\f[V]--dry-run\\f[R] option might be useful for validating the\n-command-line options such as the module system configuration.\n-.TP\n-\\f[V]--validate-modules\\f[R]\n-Validates all modules and exit.\n-This option is helpful for finding conflicts and other errors with\n-modules on the module path.\n-.TP\n-\\f[V]-D\\f[R]\\f[I]property\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R]\n-Sets a system property value.\n-The \\f[I]property\\f[R] variable is a string with no spaces that\n-represents the name of the property.\n-The \\f[I]value\\f[R] variable is a string that represents the value of\n-the property.\n-If \\f[I]value\\f[R] is a string with spaces, then enclose it in quotation\n-marks (for example \\f[V]-Dfoo=\\[dq]foo bar\\[dq]\\f[R]).\n-.TP\n-\\f[V]-disableassertions\\f[R][\\f[V]:\\f[R][\\f[I]packagename\\f[R]]...|\\f[V]:\\f[R]\\f[I]classname\\f[R]] or \\f[V]-da\\f[R][\\f[V]:\\f[R][\\f[I]packagename\\f[R]]...|\\f[V]:\\f[R]\\f[I]classname\\f[R]]\n-Disables assertions.\n-By default, assertions are disabled in all packages and classes.\n-With no arguments, \\f[V]-disableassertions\\f[R] (\\f[V]-da\\f[R]) disables\n-assertions in all packages and classes.\n-With the \\f[I]packagename\\f[R] argument ending in \\f[V]...\\f[R], the\n-switch disables assertions in the specified package and any subpackages.\n-If the argument is simply \\f[V]...\\f[R], then the switch disables\n-assertions in the unnamed package in the current working directory.\n-With the \\f[I]classname\\f[R] argument, the switch disables assertions in\n-the specified class.\n-.RS\n-.PP\n-The \\f[V]-disableassertions\\f[R] (\\f[V]-da\\f[R]) option applies to all\n-class loaders and to system classes (which don\\[aq]t have a class\n-loader).\n-There\\[aq]s one exception to this rule: If the option is provided with\n-no arguments, then it doesn\\[aq]t apply to system classes.\n-This makes it easy to disable assertions in all classes except for\n-system classes.\n-The \\f[V]-disablesystemassertions\\f[R] option enables you to disable\n-assertions in all system classes.\n-To explicitly enable assertions in specific packages or classes, use the\n-\\f[V]-enableassertions\\f[R] (\\f[V]-ea\\f[R]) option.\n-Both options can be used at the same time.\n-For example, to run the \\f[V]MyClass\\f[R] application with assertions\n-enabled in the package \\f[V]com.wombat.fruitbat\\f[R] (and any\n-subpackages) but disabled in the class\n-\\f[V]com.wombat.fruitbat.Brickbat\\f[R], use the following command:\n-.RS\n-.PP\n-\\f[V]java -ea:com.wombat.fruitbat... -da:com.wombat.fruitbat.Brickbat MyClass\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-disablesystemassertions\\f[R] or \\f[V]-dsa\\f[R]\n-Disables assertions in all system classes.\n-.TP\n-\\f[V]-enableassertions\\f[R][\\f[V]:\\f[R][\\f[I]packagename\\f[R]]...|\\f[V]:\\f[R]\\f[I]classname\\f[R]] or \\f[V]-ea\\f[R][\\f[V]:\\f[R][\\f[I]packagename\\f[R]]...|\\f[V]:\\f[R]\\f[I]classname\\f[R]]\n-Enables assertions.\n-By default, assertions are disabled in all packages and classes.\n-With no arguments, \\f[V]-enableassertions\\f[R] (\\f[V]-ea\\f[R]) enables\n-assertions in all packages and classes.\n-With the \\f[I]packagename\\f[R] argument ending in \\f[V]...\\f[R], the\n-switch enables assertions in the specified package and any subpackages.\n-If the argument is simply \\f[V]...\\f[R], then the switch enables\n-assertions in the unnamed package in the current working directory.\n-With the \\f[I]classname\\f[R] argument, the switch enables assertions in\n-the specified class.\n-.RS\n-.PP\n-The \\f[V]-enableassertions\\f[R] (\\f[V]-ea\\f[R]) option applies to all\n-class loaders and to system classes (which don\\[aq]t have a class\n-loader).\n-There\\[aq]s one exception to this rule: If the option is provided with\n-no arguments, then it doesn\\[aq]t apply to system classes.\n-This makes it easy to enable assertions in all classes except for system\n-classes.\n-The \\f[V]-enablesystemassertions\\f[R] option provides a separate switch\n-to enable assertions in all system classes.\n-To explicitly disable assertions in specific packages or classes, use\n-the \\f[V]-disableassertions\\f[R] (\\f[V]-da\\f[R]) option.\n-If a single command contains multiple instances of these switches, then\n-they\\[aq]re processed in order, before loading any classes.\n-For example, to run the \\f[V]MyClass\\f[R] application with assertions\n-enabled only in the package \\f[V]com.wombat.fruitbat\\f[R] (and any\n-subpackages) but disabled in the class\n-\\f[V]com.wombat.fruitbat.Brickbat\\f[R], use the following command:\n-.RS\n-.PP\n-\\f[V]java -ea:com.wombat.fruitbat... -da:com.wombat.fruitbat.Brickbat MyClass\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-enablesystemassertions\\f[R] or \\f[V]-esa\\f[R]\n-Enables assertions in all system classes.\n-.TP\n-\\f[V]-help\\f[R], \\f[V]-h\\f[R], or \\f[V]-?\\f[R]\n-Prints the help message to the error stream.\n-.TP\n-\\f[V]--help\\f[R]\n-Prints the help message to the output stream.\n-.TP\n-\\f[V]-javaagent:\\f[R]\\f[I]jarpath\\f[R][\\f[V]=\\f[R]\\f[I]options\\f[R]]\n-Loads the specified Java programming language agent.\n-See \\f[V]java.lang.instrument\\f[R].\n-.TP\n-\\f[V]--show-version\\f[R]\n-Prints the product version to the output stream and continues.\n-.TP\n-\\f[V]-showversion\\f[R]\n-Prints the product version to the error stream and continues.\n-.TP\n-\\f[V]--show-module-resolution\\f[R]\n-Shows module resolution output during startup.\n-.TP\n-\\f[V]-splash:\\f[R]\\f[I]imagepath\\f[R]\n-Shows the splash screen with the image specified by \\f[I]imagepath\\f[R].\n-HiDPI scaled images are automatically supported and used if available.\n-The unscaled image file name, such as \\f[V]image.ext\\f[R], should always\n-be passed as the argument to the \\f[V]-splash\\f[R] option.\n-The most appropriate scaled image provided is picked up automatically.\n-.RS\n-.PP\n-For example, to show the \\f[V]splash.gif\\f[R] file from the\n-\\f[V]images\\f[R] directory when starting your application, use the\n-following option:\n-.RS\n-.PP\n-\\f[V]-splash:images\/splash.gif\\f[R]\n-.RE\n-.PP\n-See the SplashScreen API documentation for more information.\n-.RE\n-.TP\n-\\f[V]-verbose:class\\f[R]\n-Displays information about each loaded class.\n-.TP\n-\\f[V]-verbose:gc\\f[R]\n-Displays information about each garbage collection (GC) event.\n-.TP\n-\\f[V]-verbose:jni\\f[R]\n-Displays information about the use of native methods and other Java\n-Native Interface (JNI) activity.\n-.TP\n-\\f[V]-verbose:module\\f[R]\n-Displays information about the modules in use.\n-.TP\n-\\f[V]--version\\f[R]\n-Prints product version to the output stream and exits.\n-.TP\n-\\f[V]-version\\f[R]\n-Prints product version to the error stream and exits.\n-.TP\n-\\f[V]-X\\f[R]\n-Prints the help on extra options to the error stream.\n-.TP\n-\\f[V]--help-extra\\f[R]\n-Prints the help on extra options to the output stream.\n-.TP\n-\\f[V]\\[at]\\f[R]\\f[I]argfile\\f[R]\n-Specifies one or more argument files prefixed by \\f[V]\\[at]\\f[R] used by\n-the \\f[V]java\\f[R] command.\n-It isn\\[aq]t uncommon for the \\f[V]java\\f[R] command line to be very\n-long because of the \\f[V].jar\\f[R] files needed in the classpath.\n-The \\f[V]\\[at]\\f[R]\\f[I]argfile\\f[R] option overcomes command-line\n-length limitations by enabling the launcher to expand the contents of\n-argument files after shell expansion, but before argument processing.\n-Contents in the argument files are expanded because otherwise, they\n-would be specified on the command line until the\n-\\f[V]--disable-\\[at]files\\f[R] option was encountered.\n-.RS\n-.PP\n-The argument files can also contain the main class name and all options.\n-If an argument file contains all of the options required by the\n-\\f[V]java\\f[R] command, then the command line could simply be:\n-.RS\n-.PP\n-\\f[V]java \\[at]\\f[R]\\f[I]argfile\\f[R]\n-.RE\n-.PP\n-See \\f[B]java Command-Line Argument Files\\f[R] for a description and\n-examples of using \\f[V]\\[at]\\f[R]-argfiles.\n-.RE\n-.SH EXTRA OPTIONS FOR JAVA\n-.PP\n-The following \\f[V]java\\f[R] options are general purpose options that\n-are specific to the Java HotSpot Virtual Machine.\n-.TP\n-\\f[V]-Xbatch\\f[R]\n-Disables background compilation.\n-By default, the JVM compiles the method as a background task, running\n-the method in interpreter mode until the background compilation is\n-finished.\n-The \\f[V]-Xbatch\\f[R] flag disables background compilation so that\n-compilation of all methods proceeds as a foreground task until\n-completed.\n-This option is equivalent to \\f[V]-XX:-BackgroundCompilation\\f[R].\n-.TP\n-\\f[V]-Xbootclasspath\/a:\\f[R]\\f[I]directories\\f[R]|\\f[I]zip\\f[R]|\\f[I]JAR-files\\f[R]\n-Specifies a list of directories, JAR files, and ZIP archives to append\n-to the end of the default bootstrap class path.\n-.RS\n-.PP\n-On Windows, semicolons (\\f[V];\\f[R]) separate entities in this list; on\n-other platforms it is a colon (\\f[V]:\\f[R]).\n-.RE\n-.TP\n-\\f[V]-Xcheck:jni\\f[R]\n-Performs additional checks for Java Native Interface (JNI) functions.\n-.RS\n-.PP\n-The following checks are considered indicative of significant problems\n-with the native code, and the JVM terminates with an irrecoverable error\n-in such cases:\n-.IP \\[bu] 2\n-The thread doing the call is not attached to the JVM.\n-.IP \\[bu] 2\n-The thread doing the call is using the \\f[V]JNIEnv\\f[R] belonging to\n-another thread.\n-.IP \\[bu] 2\n-A parameter validation check fails:\n-.RS 2\n-.IP \\[bu] 2\n-A \\f[V]jfieldID\\f[R], or \\f[V]jmethodID\\f[R], is detected as being\n-invalid.\n-For example:\n-.RS 2\n-.IP \\[bu] 2\n-Of the wrong type\n-.IP \\[bu] 2\n-Associated with the wrong class\n-.RE\n-.IP \\[bu] 2\n-A parameter of the wrong type is detected.\n-.IP \\[bu] 2\n-An invalid parameter value is detected.\n-For example:\n-.RS 2\n-.IP \\[bu] 2\n-NULL where not permitted\n-.IP \\[bu] 2\n-An out-of-bounds array index, or frame capacity\n-.IP \\[bu] 2\n-A non-UTF-8 string\n-.IP \\[bu] 2\n-An invalid JNI reference\n-.IP \\[bu] 2\n-An attempt to use a \\f[V]ReleaseXXX\\f[R] function on a parameter not\n-produced by the corresponding \\f[V]GetXXX\\f[R] function\n-.RE\n-.RE\n-.PP\n-The following checks only result in warnings being printed:\n-.IP \\[bu] 2\n-A JNI call was made without checking for a pending exception from a\n-previous JNI call, and the current call is not safe when an exception\n-may be pending.\n-.IP \\[bu] 2\n-A class descriptor is in decorated format (\\f[V]Lname;\\f[R]) when it\n-should not be.\n-.IP \\[bu] 2\n-A \\f[V]NULL\\f[R] parameter is allowed, but its use is questionable.\n-.IP \\[bu] 2\n-Calling other JNI functions in the scope of\n-\\f[V]Get\/ReleasePrimitiveArrayCritical\\f[R] or\n-\\f[V]Get\/ReleaseStringCritical\\f[R]\n-.PP\n-Expect a performance degradation when this option is used.\n-.RE\n-.TP\n-\\f[V]-Xcomp\\f[R]\n-Testing mode to exercise JIT compilers.\n-This option should not be used in production environments.\n-.TP\n-\\f[V]-Xdebug\\f[R]\n-Does nothing; deprecated for removal in a future release.\n-.TP\n-\\f[V]-Xdiag\\f[R]\n-Shows additional diagnostic messages.\n-.TP\n-\\f[V]-Xint\\f[R]\n-Runs the application in interpreted-only mode.\n-Compilation to native code is disabled, and all bytecode is executed by\n-the interpreter.\n-The performance benefits offered by the just-in-time (JIT) compiler\n-aren\\[aq]t present in this mode.\n-.TP\n-\\f[V]-Xinternalversion\\f[R]\n-Displays more detailed JVM version information than the\n-\\f[V]-version\\f[R] option, and then exits.\n-.TP\n-\\f[V]-Xlog:\\f[R]\\f[I]option\\f[R]\n-Configure or enable logging with the Java Virtual Machine (JVM) unified\n-logging framework.\n-See \\f[B]Enable Logging with the JVM Unified Logging Framework\\f[R].\n-.TP\n-\\f[V]-Xmixed\\f[R]\n-Executes all bytecode by the interpreter except for hot methods, which\n-are compiled to native code.\n-On by default.\n-Use \\f[V]-Xint\\f[R] to switch off.\n-.TP\n-\\f[V]-Xmn\\f[R] \\f[I]size\\f[R]\n-Sets the initial and maximum size (in bytes) of the heap for the young\n-generation (nursery) in the generational collectors.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-The young generation region of the heap is used for new objects.\n-GC is performed in this region more often than in other regions.\n-If the size for the young generation is too small, then a lot of minor\n-garbage collections are performed.\n-If the size is too large, then only full garbage collections are\n-performed, which can take a long time to complete.\n-It is recommended that you do not set the size for the young generation\n-for the G1 collector, and keep the size for the young generation greater\n-than 25% and less than 50% of the overall heap size for other\n-collectors.\n-The following examples show how to set the initial and maximum size of\n-young generation to 256 MB using various units:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n--Xmn256m\n--Xmn262144k\n--Xmn268435456\n-\\f[R]\n-.fi\n-.PP\n-Instead of the \\f[V]-Xmn\\f[R] option to set both the initial and maximum\n-size of the heap for the young generation, you can use\n-\\f[V]-XX:NewSize\\f[R] to set the initial size and\n-\\f[V]-XX:MaxNewSize\\f[R] to set the maximum size.\n-.RE\n-.TP\n-\\f[V]-Xms\\f[R] \\f[I]size\\f[R]\n-Sets the minimum and the initial size (in bytes) of the heap.\n-This value must be a multiple of 1024 and greater than 1 MB.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-The following examples show how to set the size of allocated memory to 6\n-MB using various units:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n--Xms6291456\n--Xms6144k\n--Xms6m\n-\\f[R]\n-.fi\n-.PP\n-If you do not set this option, then the initial size will be set as the\n-sum of the sizes allocated for the old generation and the young\n-generation.\n-The initial size of the heap for the young generation can be set using\n-the \\f[V]-Xmn\\f[R] option or the \\f[V]-XX:NewSize\\f[R] option.\n-.PP\n-Note that the \\f[V]-XX:InitialHeapSize\\f[R] option can also be used to\n-set the initial heap size.\n-If it appears after \\f[V]-Xms\\f[R] on the command line, then the initial\n-heap size gets set to the value specified with\n-\\f[V]-XX:InitialHeapSize\\f[R].\n-.RE\n-.TP\n-\\f[V]-Xmx\\f[R] \\f[I]size\\f[R]\n-Specifies the maximum size (in bytes) of the heap.\n-This value must be a multiple of 1024 and greater than 2 MB.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-The default value is chosen at runtime based on system configuration.\n-For server deployments, \\f[V]-Xms\\f[R] and \\f[V]-Xmx\\f[R] are often set\n-to the same value.\n-The following examples show how to set the maximum allowed size of\n-allocated memory to 80 MB using various units:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n--Xmx83886080\n--Xmx81920k\n--Xmx80m\n-\\f[R]\n-.fi\n-.PP\n-The \\f[V]-Xmx\\f[R] option is equivalent to \\f[V]-XX:MaxHeapSize\\f[R].\n-.RE\n-.TP\n-\\f[V]-Xnoclassgc\\f[R]\n-Disables garbage collection (GC) of classes.\n-This can save some GC time, which shortens interruptions during the\n-application run.\n-When you specify \\f[V]-Xnoclassgc\\f[R] at startup, the class objects in\n-the application are left untouched during GC and are always be\n-considered live.\n-This can result in more memory being permanently occupied which, if not\n-used carefully, throws an out-of-memory exception.\n-.TP\n-\\f[V]-Xrs\\f[R]\n-Reduces the use of operating system signals by the JVM.\n-Shutdown hooks enable the orderly shutdown of a Java application by\n-running user cleanup code (such as closing database connections) at\n-shutdown, even if the JVM terminates abruptly.\n-.RS\n-.IP \\[bu] 2\n-\\f[B]Non-Windows:\\f[R]\n-.RS 2\n-.IP \\[bu] 2\n-The JVM catches signals to implement shutdown hooks for unexpected\n-termination.\n-The JVM uses \\f[V]SIGHUP\\f[R], \\f[V]SIGINT\\f[R], and \\f[V]SIGTERM\\f[R]\n-to initiate the running of shutdown hooks.\n-.IP \\[bu] 2\n-Applications embedding the JVM frequently need to trap signals such as\n-\\f[V]SIGINT\\f[R] or \\f[V]SIGTERM\\f[R], which can lead to interference\n-with the JVM signal handlers.\n-The \\f[V]-Xrs\\f[R] option is available to address this issue.\n-When \\f[V]-Xrs\\f[R] is used, the signal masks for \\f[V]SIGINT\\f[R],\n-\\f[V]SIGTERM\\f[R], \\f[V]SIGHUP\\f[R], and \\f[V]SIGQUIT\\f[R] aren\\[aq]t\n-changed by the JVM, and signal handlers for these signals aren\\[aq]t\n-installed.\n-.RE\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R]\n-.RS 2\n-.IP \\[bu] 2\n-The JVM watches for console control events to implement shutdown hooks\n-for unexpected termination.\n-Specifically, the JVM registers a console control handler that begins\n-shutdown-hook processing and returns \\f[V]TRUE\\f[R] for\n-\\f[V]CTRL_C_EVENT\\f[R], \\f[V]CTRL_CLOSE_EVENT\\f[R],\n-\\f[V]CTRL_LOGOFF_EVENT\\f[R], and \\f[V]CTRL_SHUTDOWN_EVENT\\f[R].\n-.IP \\[bu] 2\n-The JVM uses a similar mechanism to implement the feature of dumping\n-thread stacks for debugging purposes.\n-The JVM uses \\f[V]CTRL_BREAK_EVENT\\f[R] to perform thread dumps.\n-.IP \\[bu] 2\n-If the JVM is run as a service (for example, as a servlet engine for a\n-web server), then it can receive \\f[V]CTRL_LOGOFF_EVENT\\f[R] but\n-shouldn\\[aq]t initiate shutdown because the operating system doesn\\[aq]t\n-actually terminate the process.\n-To avoid possible interference such as this, the \\f[V]-Xrs\\f[R] option\n-can be used.\n-When the \\f[V]-Xrs\\f[R] option is used, the JVM doesn\\[aq]t install a\n-console control handler, implying that it doesn\\[aq]t watch for or\n-process \\f[V]CTRL_C_EVENT\\f[R], \\f[V]CTRL_CLOSE_EVENT\\f[R],\n-\\f[V]CTRL_LOGOFF_EVENT\\f[R], or \\f[V]CTRL_SHUTDOWN_EVENT\\f[R].\n-.RE\n-.PP\n-There are two consequences of specifying \\f[V]-Xrs\\f[R]:\n-.IP \\[bu] 2\n-\\f[B]Non-Windows:\\f[R] \\f[V]SIGQUIT\\f[R] thread dumps aren\\[aq]t\n-available.\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] Ctrl + Break thread dumps aren\\[aq]t available.\n-.PP\n-User code is responsible for causing shutdown hooks to run, for example,\n-by calling \\f[V]System.exit()\\f[R] when the JVM is to be terminated.\n-.RE\n-.TP\n-\\f[V]-Xshare:\\f[R]\\f[I]mode\\f[R]\n-Sets the class data sharing (CDS) mode.\n-.RS\n-.PP\n-Possible \\f[I]mode\\f[R] arguments for this option include the following:\n-.TP\n-\\f[V]auto\\f[R]\n-Use shared class data if possible (default).\n-.TP\n-\\f[V]on\\f[R]\n-Require using shared class data, otherwise fail.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] The \\f[V]-Xshare:on\\f[R] option is used for testing\n-purposes only.\n-It may cause the VM to unexpectedly exit during start-up when the CDS\n-archive cannot be used (for example, when certain VM parameters are\n-changed, or when a different JDK is used).\n-This option should not be used in production environments.\n-.RE\n-.TP\n-\\f[V]off\\f[R]\n-Do not attempt to use shared class data.\n-.RE\n-.TP\n-\\f[V]-XshowSettings\\f[R]\n-Shows all settings and then continues.\n-.TP\n-\\f[V]-XshowSettings:\\f[R]\\f[I]category\\f[R]\n-Shows settings and continues.\n-Possible \\f[I]category\\f[R] arguments for this option include the\n-following:\n-.RS\n-.TP\n-\\f[V]all\\f[R]\n-Shows all categories of settings in \\f[B]verbose\\f[R] detail.\n-.TP\n-\\f[V]locale\\f[R]\n-Shows settings related to locale.\n-.TP\n-\\f[V]properties\\f[R]\n-Shows settings related to system properties.\n-.TP\n-\\f[V]security\\f[R]\n-Shows all settings related to security.\n-.RS\n-.PP\n-sub-category arguments for \\f[V]security\\f[R] include the following:\n-.IP \\[bu] 2\n-\\f[V]security:all\\f[R] : shows all security settings\n-.IP \\[bu] 2\n-\\f[V]security:properties\\f[R] : shows security properties\n-.IP \\[bu] 2\n-\\f[V]security:providers\\f[R] : shows static security provider settings\n-.IP \\[bu] 2\n-\\f[V]security:tls\\f[R] : shows TLS related security settings\n-.RE\n-.TP\n-\\f[V]vm\\f[R]\n-Shows the settings of the JVM.\n-.TP\n-\\f[V]system\\f[R]\n-\\f[B]Linux only:\\f[R] Shows host system or container configuration and\n-continues.\n-.RE\n-.TP\n-\\f[V]-Xss\\f[R] \\f[I]size\\f[R]\n-Sets the thread stack size (in bytes).\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate KB, \\f[V]m\\f[R]\n-or \\f[V]M\\f[R] to indicate MB, or \\f[V]g\\f[R] or \\f[V]G\\f[R] to indicate\n-GB.\n-The actual size may be rounded up to a multiple of the system page size\n-as required by the operating system.\n-The default value depends on the platform.\n-For example:\n-.RS\n-.IP \\[bu] 2\n-Linux\/x64: 1024 KB\n-.IP \\[bu] 2\n-Linux\/Aarch64: 2048 KB\n-.IP \\[bu] 2\n-macOS\/x64: 1024 KB\n-.IP \\[bu] 2\n-macOS\/Aarch64: 2048 KB\n-.IP \\[bu] 2\n-Windows: The default value depends on virtual memory\n-.PP\n-The following examples set the thread stack size to 1024 KB in different\n-units:\n-.IP\n-.nf\n-\\f[CB]\n--Xss1m\n--Xss1024k\n--Xss1048576\n-\\f[R]\n-.fi\n-.PP\n-This option is similar to \\f[V]-XX:ThreadStackSize\\f[R].\n-.RE\n-.TP\n-\\f[V]--add-reads\\f[R] \\f[I]module\\f[R]\\f[V]=\\f[R]\\f[I]target-module\\f[R](\\f[V],\\f[R]\\f[I]target-module\\f[R])*\n-Updates \\f[I]module\\f[R] to read the \\f[I]target-module\\f[R], regardless\n-of the module declaration.\n-\\f[I]target-module\\f[R] can be \\f[V]ALL-UNNAMED\\f[R] to read all unnamed\n-modules.\n-.TP\n-\\f[V]--add-exports\\f[R] \\f[I]module\\f[R]\\f[V]\/\\f[R]\\f[I]package\\f[R]\\f[V]=\\f[R]\\f[I]target-module\\f[R](\\f[V],\\f[R]\\f[I]target-module\\f[R])*\n-Updates \\f[I]module\\f[R] to export \\f[I]package\\f[R] to\n-\\f[I]target-module\\f[R], regardless of module declaration.\n-\\f[I]target-module\\f[R] can be \\f[V]ALL-UNNAMED\\f[R] to export to all\n-unnamed modules.\n-.TP\n-\\f[V]--add-opens\\f[R] \\f[I]module\\f[R]\\f[V]\/\\f[R]\\f[I]package\\f[R]\\f[V]=\\f[R]\\f[I]target-module\\f[R](\\f[V],\\f[R]\\f[I]target-module\\f[R])*\n-Updates \\f[I]module\\f[R] to open \\f[I]package\\f[R] to\n-\\f[I]target-module\\f[R], regardless of module declaration.\n-.TP\n-\\f[V]--limit-modules\\f[R] \\f[I]module\\f[R][\\f[V],\\f[R]\\f[I]module\\f[R]...]\n-Specifies the limit of the universe of observable modules.\n-.TP\n-\\f[V]--patch-module\\f[R] \\f[I]module\\f[R]\\f[V]=\\f[R]\\f[I]file\\f[R](\\f[V];\\f[R]\\f[I]file\\f[R])*\n-Overrides or augments a module with classes and resources in JAR files\n-or directories.\n-.TP\n-\\f[V]--source\\f[R] \\f[I]version\\f[R]\n-Sets the version of the source in source-file mode.\n-.TP\n-\\f[V]--sun-misc-unsafe-memory-access=\\f[R] \\f[I]value\\f[R]\n-Allow or deny usage of unsupported API \\f[V]sun.misc.Unsafe\\f[R].\n-\\f[I]value\\f[R] is one of:\n-.RS\n-.TP\n-\\f[V]allow\\f[R]\n-Allow use of the memory-access methods with no warnings at run time.\n-.TP\n-\\f[V]warn\\f[R]\n-Allow use of the memory-access methods, but issues a warning on the\n-first occasion that any memory-access method is used.\n-At most one warning is issued.\n-.TP\n-\\f[V]debug\\f[R]\n-Allow use of the memory-access methods, but issue a one-line warning and\n-a stack trace when any memory-access method is used.\n-.TP\n-\\f[V]deny\\f[R]\n-Disallow use of the memory-access methods by throwing an\n-\\f[V]UnsupportedOperationException\\f[R] on every usage.\n-.PP\n-The default value when the option is not specified is \\f[V]allow\\f[R].\n-.RE\n-.SH EXTRA OPTIONS FOR MACOS\n-.PP\n-The following extra options are macOS specific.\n-.TP\n-\\f[V]-XstartOnFirstThread\\f[R]\n-Runs the \\f[V]main()\\f[R] method on the first (AppKit) thread.\n-.TP\n-\\f[V]-Xdock:name=\\f[R]\\f[I]application_name\\f[R]\n-Overrides the default application name displayed in dock.\n-.TP\n-\\f[V]-Xdock:icon=\\f[R]\\f[I]path_to_icon_file\\f[R]\n-Overrides the default icon displayed in dock.\n-.SH ADVANCED OPTIONS FOR JAVA\n-.PP\n-These \\f[V]java\\f[R] options can be used to enable other advanced\n-options.\n-.TP\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R]\n-Unlocks the options intended for diagnosing the JVM.\n-By default, this option is disabled and diagnostic options aren\\[aq]t\n-available.\n-.RS\n-.PP\n-Command line options that are enabled with the use of this option are\n-not supported.\n-If you encounter issues while using any of these options, it is very\n-likely that you will be required to reproduce the problem without using\n-any of these unsupported options before Oracle Support can assist with\n-an investigation.\n-It is also possible that any of these options may be removed or their\n-behavior changed without any warning.\n-.RE\n-.TP\n-\\f[V]-XX:+UnlockExperimentalVMOptions\\f[R]\n-Unlocks the options that provide experimental features in the JVM.\n-By default, this option is disabled and experimental features aren\\[aq]t\n-available.\n-.SH ADVANCED RUNTIME OPTIONS FOR JAVA\n-.PP\n-These \\f[V]java\\f[R] options control the runtime behavior of the Java\n-HotSpot VM.\n-.TP\n-\\f[V]-XX:ActiveProcessorCount=\\f[R]\\f[I]x\\f[R]\n-Overrides the number of CPUs that the VM will use to calculate the size\n-of thread pools it will use for various operations such as Garbage\n-Collection and ForkJoinPool.\n-.RS\n-.PP\n-The VM normally determines the number of available processors from the\n-operating system.\n-This flag can be useful for partitioning CPU resources when running\n-multiple Java processes in docker containers.\n-This flag is honored even if \\f[V]UseContainerSupport\\f[R] is not\n-enabled.\n-See \\f[V]-XX:-UseContainerSupport\\f[R] for a description of enabling and\n-disabling container support.\n-.RE\n-.TP\n-\\f[V]-XX:AllocateHeapAt=\\f[R]\\f[I]path\\f[R]\n-Takes a path to the file system and uses memory mapping to allocate the\n-object heap on the memory device.\n-Using this option enables the HotSpot VM to allocate the Java object\n-heap on an alternative memory device, such as an NV-DIMM, specified by\n-the user.\n-.RS\n-.PP\n-Alternative memory devices that have the same semantics as DRAM,\n-including the semantics of atomic operations, can be used instead of\n-DRAM for the object heap without changing the existing application code.\n-All other memory structures (such as the code heap, metaspace, and\n-thread stacks) continue to reside in DRAM.\n-.PP\n-Some operating systems expose non-DRAM memory through the file system.\n-Memory-mapped files in these file systems bypass the page cache and\n-provide a direct mapping of virtual memory to the physical memory on the\n-device.\n-The existing heap related flags (such as \\f[V]-Xmx\\f[R] and\n-\\f[V]-Xms\\f[R]) and garbage-collection related flags continue to work as\n-before.\n-.RE\n-.TP\n-\\f[V]-XX:-CompactStrings\\f[R]\n-Disables the Compact Strings feature.\n-By default, this option is enabled.\n-When this option is enabled, Java Strings containing only single-byte\n-characters are internally represented and stored as\n-single-byte-per-character Strings using ISO-8859-1 \/ Latin-1 encoding.\n-This reduces, by 50%, the amount of space required for Strings\n-containing only single-byte characters.\n-For Java Strings containing at least one multibyte character: these are\n-represented and stored as 2 bytes per character using UTF-16 encoding.\n-Disabling the Compact Strings feature forces the use of UTF-16 encoding\n-as the internal representation for all Java Strings.\n-.RS\n-.PP\n-Cases where it may be beneficial to disable Compact Strings include the\n-following:\n-.IP \\[bu] 2\n-When it\\[aq]s known that an application overwhelmingly will be\n-allocating multibyte character Strings\n-.IP \\[bu] 2\n-In the unexpected event where a performance regression is observed in\n-migrating from Java SE 8 to Java SE 9 and an analysis shows that Compact\n-Strings introduces the regression\n-.PP\n-In both of these scenarios, disabling Compact Strings makes sense.\n-.RE\n-.TP\n-\\f[V]-XX:ErrorFile=\\f[R]\\f[I]filename\\f[R]\n-Specifies the path and file name to which error data is written when an\n-irrecoverable error occurs.\n-By default, this file is created in the current working directory and\n-named \\f[V]hs_err_pid\\f[R]\\f[I]pid\\f[R]\\f[V].log\\f[R] where\n-\\f[I]pid\\f[R] is the identifier of the process that encountered the\n-error.\n-.RS\n-.PP\n-The following example shows how to set the default log file (note that\n-the identifier of the process is specified as \\f[V]%p\\f[R]):\n-.RS\n-.PP\n-\\f[V]-XX:ErrorFile=.\/hs_err_pid%p.log\\f[R]\n-.RE\n-.IP \\[bu] 2\n-\\f[B]Non-Windows:\\f[R] The following example shows how to set the error\n-log to \\f[V]\/var\/log\/java\/java_error.log\\f[R]:\n-.RS 2\n-.RS\n-.PP\n-\\f[V]-XX:ErrorFile=\/var\/log\/java\/java_error.log\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] The following example shows how to set the error log\n-file to \\f[V]C:\/log\/java\/java_error.log\\f[R]:\n-.RS 2\n-.RS\n-.PP\n-\\f[V]-XX:ErrorFile=C:\/log\/java\/java_error.log\\f[R]\n-.RE\n-.RE\n-.PP\n-If the file exists, and is writeable, then it will be overwritten.\n-Otherwise, if the file can\\[aq]t be created in the specified directory\n-(due to insufficient space, permission problem, or another issue), then\n-the file is created in the temporary directory for the operating system:\n-.IP \\[bu] 2\n-\\f[B]Non-Windows:\\f[R] The temporary directory is \\f[V]\/tmp\\f[R].\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] The temporary directory is specified by the value of\n-the \\f[V]TMP\\f[R] environment variable; if that environment variable\n-isn\\[aq]t defined, then the value of the \\f[V]TEMP\\f[R] environment\n-variable is used.\n-.RE\n-.TP\n-\\f[V]-XX:+ExtensiveErrorReports\\f[R]\n-Enables the reporting of more extensive error information in the\n-\\f[V]ErrorFile\\f[R].\n-This option can be turned on in environments where maximal information\n-is desired - even if the resulting logs may be quite large and\/or\n-contain information that might be considered sensitive.\n-The information can vary from release to release, and across different\n-platforms.\n-By default this option is disabled.\n-.TP\n-\\f[V]-XX:FlightRecorderOptions=\\f[R]\\f[I]parameter\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] (or) \\f[V]-XX:FlightRecorderOptions:\\f[R]\\f[I]parameter\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R]\n-Sets the parameters that control the behavior of JFR.\n-Multiple parameters can be specified by separating them with a comma.\n-.RS\n-.PP\n-The following list contains the available JFR\n-\\f[I]parameter\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] entries:\n-.TP\n-\\f[V]globalbuffersize=\\f[R]\\f[I]size\\f[R]\n-Specifies the total amount of primary memory used for data retention.\n-The default value is based on the value specified for\n-\\f[V]memorysize\\f[R].\n-Change the \\f[V]memorysize\\f[R] parameter to alter the size of global\n-buffers.\n-.TP\n-\\f[V]maxchunksize=\\f[R]\\f[I]size\\f[R]\n-Specifies the maximum size (in bytes) of the data chunks in a recording.\n-Append \\f[V]m\\f[R] or \\f[V]M\\f[R] to specify the size in megabytes (MB),\n-or \\f[V]g\\f[R] or \\f[V]G\\f[R] to specify the size in gigabytes (GB).\n-By default, the maximum size of data chunks is set to 12 MB.\n-The minimum allowed is 1 MB.\n-.TP\n-\\f[V]memorysize=\\f[R]\\f[I]size\\f[R]\n-Determines how much buffer memory should be used, and sets the\n-\\f[V]globalbuffersize\\f[R] and \\f[V]numglobalbuffers\\f[R] parameters\n-based on the size specified.\n-Append \\f[V]m\\f[R] or \\f[V]M\\f[R] to specify the size in megabytes (MB),\n-or \\f[V]g\\f[R] or \\f[V]G\\f[R] to specify the size in gigabytes (GB).\n-By default, the memory size is set to 10 MB.\n-.TP\n-\\f[V]numglobalbuffers\\f[R]\n-Specifies the number of global buffers used.\n-The default value is based on the memory size specified.\n-Change the \\f[V]memorysize\\f[R] parameter to alter the number of global\n-buffers.\n-.TP\n-\\f[V]old-object-queue-size=number-of-objects\\f[R]\n-Maximum number of old objects to track.\n-By default, the number of objects is set to 256.\n-.TP\n-\\f[V]preserve-repository=\\f[R]{\\f[V]true\\f[R]|\\f[V]false\\f[R]}\n-Specifies whether files stored in the disk repository should be kept\n-after the JVM has exited.\n-If false, files are deleted.\n-By default, this parameter is disabled.\n-.TP\n-\\f[V]repository=\\f[R]\\f[I]path\\f[R]\n-Specifies the repository (a directory) for temporary disk storage.\n-By default, the system\\[aq]s temporary directory is used.\n-.TP\n-\\f[V]retransform=\\f[R]{\\f[V]true\\f[R]|\\f[V]false\\f[R]}\n-Specifies whether event classes should be retransformed using JVMTI.\n-If false, instrumentation is added when event classes are loaded.\n-By default, this parameter is enabled.\n-.TP\n-\\f[V]stackdepth=\\f[R]\\f[I]depth\\f[R]\n-Stack depth for stack traces.\n-By default, the depth is set to 64 method calls.\n-The maximum is 2048.\n-Values greater than 64 could create significant overhead and reduce\n-performance.\n-.TP\n-\\f[V]threadbuffersize=\\f[R]\\f[I]size\\f[R]\n-Specifies the per-thread local buffer size (in bytes).\n-By default, the local buffer size is set to 8 kilobytes, with a minimum\n-value of 4 kilobytes.\n-Overriding this parameter could reduce performance and is not\n-recommended.\n-.RE\n-.TP\n-\\f[V]-XX:LargePageSizeInBytes=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum large page size (in bytes) used by the JVM.\n-The \\f[I]size\\f[R] argument must be a valid page size supported by the\n-environment to have any effect.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-By default, the size is set to 0, meaning that the JVM will use the\n-default large page size for the environment as the maximum size for\n-large pages.\n-See \\f[B]Large Pages\\f[R].\n-.RS\n-.PP\n-The following example describes how to set the large page size to 1\n-gigabyte (GB):\n-.RS\n-.PP\n-\\f[V]-XX:LargePageSizeInBytes=1g\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:MaxDirectMemorySize=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum total size (in bytes) of the \\f[V]java.nio\\f[R]\n-package, direct-buffer allocations.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-If not set, the flag is ignored and the JVM chooses the size for NIO\n-direct-buffer allocations automatically.\n-.RS\n-.PP\n-The following examples illustrate how to set the NIO size to 1024 KB in\n-different units:\n-.IP\n-.nf\n-\\f[CB]\n--XX:MaxDirectMemorySize=1m\n--XX:MaxDirectMemorySize=1024k\n--XX:MaxDirectMemorySize=1048576\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]-XX:-MaxFDLimit\\f[R]\n-Disables the attempt to set the soft limit for the number of open file\n-descriptors to the hard limit.\n-By default, this option is enabled on all platforms, but is ignored on\n-Windows.\n-The only time that you may need to disable this is on macOS, where its\n-use imposes a maximum of 10240, which is lower than the actual system\n-maximum.\n-.TP\n-\\f[V]-XX:NativeMemoryTracking=\\f[R]\\f[I]mode\\f[R]\n-Specifies the mode for tracking JVM native memory usage.\n-Possible \\f[I]mode\\f[R] arguments for this option include the following:\n-.RS\n-.TP\n-\\f[V]off\\f[R]\n-Instructs not to track JVM native memory usage.\n-This is the default behavior if you don\\[aq]t specify the\n-\\f[V]-XX:NativeMemoryTracking\\f[R] option.\n-.TP\n-\\f[V]summary\\f[R]\n-Tracks memory usage only by JVM subsystems, such as Java heap, class,\n-code, and thread.\n-.TP\n-\\f[V]detail\\f[R]\n-In addition to tracking memory usage by JVM subsystems, track memory\n-usage by individual \\f[V]CallSite\\f[R], individual virtual memory region\n-and its committed regions.\n-.RE\n-.TP\n-\\f[V]-XX:TrimNativeHeapInterval=\\f[R]\\f[I]millis\\f[R]\n-Interval, in ms, at which the JVM will trim the native heap.\n-Lower values will reclaim memory more eagerly at the cost of higher\n-overhead.\n-A value of 0 (default) disables native heap trimming.\n-Native heap trimming is performed in a dedicated thread.\n-.RS\n-.PP\n-This option is only supported on Linux with GNU C Library (glibc).\n-.RE\n-.TP\n-\\f[V]-XX:+NeverActAsServerClassMachine\\f[R]\n-Enable the \\[dq]Client VM emulation\\[dq] mode which only uses the C1 JIT\n-compiler, a 32Mb CodeCache and the Serial GC.\n-The maximum amount of memory that the JVM may use (controlled by the\n-\\f[V]-XX:MaxRAM=n\\f[R] flag) is set to 1GB by default.\n-The string \\[dq]emulated-client\\[dq] is added to the JVM version string.\n-.RS\n-.PP\n-By default the flag is set to \\f[V]true\\f[R] only on Windows in 32-bit\n-mode and \\f[V]false\\f[R] in all other cases.\n-.PP\n-The \\[dq]Client VM emulation\\[dq] mode will not be enabled if any of the\n-following flags are used on the command line:\n-.IP\n-.nf\n-\\f[CB]\n--XX:{+|-}TieredCompilation\n--XX:CompilationMode=mode\n--XX:TieredStopAtLevel=n\n--XX:{+|-}EnableJVMCI\n--XX:{+|-}UseJVMCICompiler\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]-XX:ObjectAlignmentInBytes=\\f[R]\\f[I]alignment\\f[R]\n-Sets the memory alignment of Java objects (in bytes).\n-By default, the value is set to 8 bytes.\n-The specified value should be a power of 2, and must be within the range\n-of 8 and 256 (inclusive).\n-This option makes it possible to use compressed pointers with large Java\n-heap sizes.\n-.RS\n-.PP\n-The heap size limit in bytes is calculated as:\n-.RS\n-.PP\n-\\f[V]4GB * ObjectAlignmentInBytes\\f[R]\n-.RE\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] As the alignment value increases, the unused space\n-between objects also increases.\n-As a result, you may not realize any benefits from using compressed\n-pointers with large Java heap sizes.\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:OnError=\\f[R]\\f[I]string\\f[R]\n-Sets a custom command or a series of semicolon-separated commands to run\n-when an irrecoverable error occurs.\n-If the string contains spaces, then it must be enclosed in quotation\n-marks.\n-.RS\n-.IP \\[bu] 2\n-\\f[B]Non-Windows:\\f[R] The following example shows how the\n-\\f[V]-XX:OnError\\f[R] option can be used to run the \\f[V]gcore\\f[R]\n-command to create a core image, and start the \\f[V]gdb\\f[R] debugger to\n-attach to the process in case of an irrecoverable error (the\n-\\f[V]%p\\f[R] designates the current process identifier):\n-.RS 2\n-.RS\n-.PP\n-\\f[V]-XX:OnError=\\[dq]gcore %p;gdb -p %p\\[dq]\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] The following example shows how the\n-\\f[V]-XX:OnError\\f[R] option can be used to run the\n-\\f[V]userdump.exe\\f[R] utility to obtain a crash dump in case of an\n-irrecoverable error (the \\f[V]%p\\f[R] designates the current process\n-identifier).\n-This example assumes that the path to the \\f[V]userdump.exe\\f[R] utility\n-is specified in the \\f[V]PATH\\f[R] environment variable:\n-.RS 2\n-.RS\n-.PP\n-\\f[V]-XX:OnError=\\[dq]userdump.exe %p\\[dq]\\f[R]\n-.RE\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:OnOutOfMemoryError=\\f[R]\\f[I]string\\f[R]\n-Sets a custom command or a series of semicolon-separated commands to run\n-when an \\f[V]OutOfMemoryError\\f[R] exception is first thrown.\n-If the string contains spaces, then it must be enclosed in quotation\n-marks.\n-For an example of a command string, see the description of the\n-\\f[V]-XX:OnError\\f[R] option.\n-.TP\n-\\f[V]-XX:+PrintCommandLineFlags\\f[R]\n-Enables printing of ergonomically selected JVM flags that appeared on\n-the command line.\n-It can be useful to know the ergonomic values set by the JVM, such as\n-the heap space size and the selected garbage collector.\n-By default, this option is disabled and flags aren\\[aq]t printed.\n-.TP\n-\\f[V]-XX:+PreserveFramePointer\\f[R]\n-Selects between using the RBP register as a general purpose register\n-(\\f[V]-XX:-PreserveFramePointer\\f[R]) and using the RBP register to hold\n-the frame pointer of the currently executing method\n-(\\f[V]-XX:+PreserveFramePointer\\f[R] .\n-If the frame pointer is available, then external profiling tools (for\n-example, Linux perf) can construct more accurate stack traces.\n-.TP\n-\\f[V]-XX:+PrintNMTStatistics\\f[R]\n-Enables printing of collected native memory tracking data at JVM exit\n-when native memory tracking is enabled (see\n-\\f[V]-XX:NativeMemoryTracking\\f[R]).\n-By default, this option is disabled and native memory tracking data\n-isn\\[aq]t printed.\n-.TP\n-\\f[V]-XX:SharedArchiveFile=\\f[R]\\f[I]path\\f[R]\n-Specifies the path and name of the class data sharing (CDS) archive file\n-.RS\n-.PP\n-See \\f[B]Application Class Data Sharing\\f[R].\n-.RE\n-.TP\n-\\f[V]-XX:+VerifySharedSpaces\\f[R]\n-If this option is specified, the JVM will load a CDS archive file only\n-if it passes an integrity check based on CRC32 checksums.\n-The purpose of this flag is to check for unintentional damage to CDS\n-archive files in transmission or storage.\n-To guarantee the security and proper operation of CDS, the user must\n-ensure that the CDS archive files used by Java applications cannot be\n-modified without proper authorization.\n-.TP\n-\\f[V]-XX:SharedArchiveConfigFile=\\f[R]\\f[I]shared_config_file\\f[R]\n-Specifies additional shared data added to the archive file.\n-.TP\n-\\f[V]-XX:SharedClassListFile=\\f[R]\\f[I]file_name\\f[R]\n-Specifies the text file that contains the names of the classes to store\n-in the class data sharing (CDS) archive.\n-This file contains the full name of one class per line, except slashes\n-(\\f[V]\/\\f[R]) replace dots (\\f[V].\\f[R]).\n-For example, to specify the classes \\f[V]java.lang.Object\\f[R] and\n-\\f[V]hello.Main\\f[R], create a text file that contains the following two\n-lines:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-java\/lang\/Object\n-hello\/Main\n-\\f[R]\n-.fi\n-.PP\n-The classes that you specify in this text file should include the\n-classes that are commonly used by the application.\n-They may include any classes from the application, extension, or\n-bootstrap class paths.\n-.PP\n-See \\f[B]Application Class Data Sharing\\f[R].\n-.RE\n-.TP\n-\\f[V]-XX:+ShowCodeDetailsInExceptionMessages\\f[R]\n-Enables printing of improved \\f[V]NullPointerException\\f[R] messages.\n-When an application throws a \\f[V]NullPointerException\\f[R], the option\n-enables the JVM to analyze the program\\[aq]s bytecode instructions to\n-determine precisely which reference is \\f[V]null\\f[R], and describes the\n-source with a null-detail message.\n-The null-detail message is calculated and returned by\n-\\f[V]NullPointerException.getMessage()\\f[R], and will be printed as the\n-exception message along with the method, filename, and line number.\n-By default, this option is enabled.\n-.TP\n-\\f[V]-XX:+ShowMessageBoxOnError\\f[R]\n-Enables the display of a dialog box when the JVM experiences an\n-irrecoverable error.\n-This prevents the JVM from exiting and keeps the process active so that\n-you can attach a debugger to it to investigate the cause of the error.\n-By default, this option is disabled.\n-.TP\n-\\f[V]-XX:StartFlightRecording:\\f[R]\\f[I]parameter\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R]\n-Starts a JFR recording for the Java application.\n-This option is equivalent to the \\f[V]JFR.start\\f[R] diagnostic command\n-that starts a recording during runtime.\n-\\f[V]-XX:StartFlightRecording:help\\f[R] prints available options and\n-example command lines.\n-You can set the following \\f[I]parameter\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R]\n-entries when starting a JFR recording:\n-.RS\n-.TP\n-\\f[V]delay=\\f[R]\\f[I]time\\f[R]\n-Specifies the delay between the Java application launch time and the\n-start of the recording.\n-Append \\f[V]s\\f[R] to specify the time in seconds, \\f[V]m\\f[R] for\n-minutes, \\f[V]h\\f[R] for hours, or \\f[V]d\\f[R] for days (for example,\n-specifying \\f[V]10m\\f[R] means 10 minutes).\n-By default, there\\[aq]s no delay, and this parameter is set to 0.\n-.TP\n-\\f[V]disk=\\f[R]{\\f[V]true\\f[R]|\\f[V]false\\f[R]}\n-Specifies whether to write data to disk while recording.\n-By default, this parameter is enabled.\n-.TP\n-\\f[V]dumponexit=\\f[R]{\\f[V]true\\f[R]|\\f[V]false\\f[R]}\n-Specifies if the running recording is dumped when the JVM shuts down.\n-If enabled and a \\f[V]filename\\f[R] is not entered, the recording is\n-written to a file in the directory where the process was started.\n-The file name is a system-generated name that contains the process ID,\n-recording ID, and current timestamp, similar to\n-\\f[V]hotspot-pid-47496-id-1-2018_01_25_19_10_41.jfr\\f[R].\n-By default, this parameter is disabled.\n-.TP\n-\\f[V]duration=\\f[R]\\f[I]time\\f[R]\n-Specifies the duration of the recording.\n-Append \\f[V]s\\f[R] to specify the time in seconds, \\f[V]m\\f[R] for\n-minutes, \\f[V]h\\f[R] for hours, or \\f[V]d\\f[R] for days (for example,\n-specifying \\f[V]5h\\f[R] means 5 hours).\n-By default, the duration isn\\[aq]t limited, and this parameter is set to\n-0.\n-.TP\n-\\f[V]filename=\\f[R]\\f[I]path\\f[R]\n-Specifies the path and name of the file to which the recording is\n-written when the recording is stopped, for example:\n-.RS\n-.IP \\[bu] 2\n-\\f[V]recording.jfr\\f[R]\n-.IP \\[bu] 2\n-\\f[V]\/home\/user\/recordings\/recording.jfr\\f[R]\n-.IP \\[bu] 2\n-\\f[V]c:\\[rs]recordings\\[rs]recording.jfr\\f[R]\n-.PP\n-If %p and\/or %t is specified in the filename, it expands to the\n-JVM\\[aq]s PID and the current timestamp, respectively.\n-The filename may also be a directory in which case, the filename is\n-generated from the PID and the current date in the specified directory.\n-.RE\n-.TP\n-\\f[V]name=\\f[R]\\f[I]identifier\\f[R]\n-Takes both the name and the identifier of a recording.\n-.TP\n-\\f[V]maxage=\\f[R]\\f[I]time\\f[R]\n-Specifies the maximum age of disk data to keep for the recording.\n-This parameter is valid only when the \\f[V]disk\\f[R] parameter is set to\n-\\f[V]true\\f[R].\n-Append \\f[V]s\\f[R] to specify the time in seconds, \\f[V]m\\f[R] for\n-minutes, \\f[V]h\\f[R] for hours, or \\f[V]d\\f[R] for days (for example,\n-specifying \\f[V]30s\\f[R] means 30 seconds).\n-By default, the maximum age isn\\[aq]t limited, and this parameter is set\n-to \\f[V]0s\\f[R].\n-.TP\n-\\f[V]maxsize=\\f[R]\\f[I]size\\f[R]\n-Specifies the maximum size (in bytes) of disk data to keep for the\n-recording.\n-This parameter is valid only when the \\f[V]disk\\f[R] parameter is set to\n-\\f[V]true\\f[R].\n-The value must not be less than the value for the \\f[V]maxchunksize\\f[R]\n-parameter set with \\f[V]-XX:FlightRecorderOptions\\f[R].\n-Append \\f[V]m\\f[R] or \\f[V]M\\f[R] to specify the size in megabytes, or\n-\\f[V]g\\f[R] or \\f[V]G\\f[R] to specify the size in gigabytes.\n-By default, the maximum size of disk data isn\\[aq]t limited, and this\n-parameter is set to \\f[V]0\\f[R].\n-.TP\n-\\f[V]path-to-gc-roots=\\f[R]{\\f[V]true\\f[R]|\\f[V]false\\f[R]}\n-Specifies whether to collect the path to garbage collection (GC) roots\n-at the end of a recording.\n-By default, this parameter is disabled.\n-.RS\n-.PP\n-The path to GC roots is useful for finding memory leaks, but collecting\n-it is time-consuming.\n-Enable this option only when you start a recording for an application\n-that you suspect has a memory leak.\n-If the \\f[V]settings\\f[R] parameter is set to \\f[V]profile\\f[R], the\n-stack trace from where the potential leaking object was allocated is\n-included in the information collected.\n-.RE\n-.TP\n-\\f[V]settings=\\f[R]\\f[I]path\\f[R]\n-Specifies the path and name of the event settings file (of type JFC).\n-By default, the \\f[V]default.jfc\\f[R] file is used, which is located in\n-\\f[V]JAVA_HOME\/lib\/jfr\\f[R].\n-This default settings file collects a predefined set of information with\n-low overhead, so it has minimal impact on performance and can be used\n-with recordings that run continuously.\n-.RS\n-.PP\n-A second settings file is also provided, profile.jfc, which provides\n-more data than the default configuration, but can have more overhead and\n-impact performance.\n-Use this configuration for short periods of time when more information\n-is needed.\n-.RE\n-.PP\n-You can specify values for multiple parameters by separating them with a\n-comma.\n-Event settings and .jfc options can be specified using the following\n-syntax:\n-.TP\n-\\f[V]option=\\f[R]\\f[I]value\\f[R]\n-Specifies the option value to modify.\n-To list available options, use the \\f[V]JAVA_HOME\\f[R]\/bin\/jfr tool.\n-.TP\n-\\f[V]event-setting=\\f[R]\\f[I]value\\f[R]\n-Specifies the event setting value to modify.\n-Use the form: \\f[V]<event-name>#<setting-name>=<value>\\f[R].\n-To add a new event setting, prefix the event name with \\[aq]+\\[aq].\n-.PP\n-You can specify values for multiple event settings and .jfc options by\n-separating them with a comma.\n-In case of a conflict between a parameter and a .jfc option, the\n-parameter will take precedence.\n-The whitespace delimiter can be omitted for timespan values, i.e.\n-20ms.\n-For more information about the settings syntax, see Javadoc of the\n-jdk.jfr package.\n-.PP\n-To only see warnings and errors from JFR during startup set\n--Xlog:jfr+startup=warning.\n-.RE\n-.TP\n-\\f[V]-XX:ThreadStackSize=\\f[R]\\f[I]size\\f[R]\n-Sets the Java thread stack size (in kilobytes).\n-Use of a scaling suffix, such as \\f[V]k\\f[R], results in the scaling of\n-the kilobytes value so that \\f[V]-XX:ThreadStackSize=1k\\f[R] sets the\n-Java thread stack size to 1024*1024 bytes or 1 megabyte.\n-The default value depends on the platform.\n-For example:\n-.RS\n-.IP \\[bu] 2\n-Linux\/x64: 1024 KB\n-.IP \\[bu] 2\n-Linux\/Aarch64: 2048 KB\n-.IP \\[bu] 2\n-macOS\/x64: 1024 KB\n-.IP \\[bu] 2\n-macOS\/Aarch64: 2048 KB\n-.IP \\[bu] 2\n-Windows: The default value depends on virtual memory\n-.PP\n-The following examples show how to set the thread stack size to 1\n-megabyte in different units:\n-.IP\n-.nf\n-\\f[CB]\n--XX:ThreadStackSize=1k\n--XX:ThreadStackSize=1024\n-\\f[R]\n-.fi\n-.PP\n-This option is similar to \\f[V]-Xss\\f[R].\n-.RE\n-.TP\n-\\f[V]-XX:-UseCompressedOops\\f[R]\n-Disables the use of compressed pointers.\n-By default, this option is enabled, and compressed pointers are used.\n-This will automatically limit the maximum ergonomically determined Java\n-heap size to the maximum amount of memory that can be covered by\n-compressed pointers.\n-By default this range is 32 GB.\n-.RS\n-.PP\n-With compressed oops enabled, object references are represented as\n-32-bit offsets instead of 64-bit pointers, which typically increases\n-performance when running the application with Java heap sizes smaller\n-than the compressed oops pointer range.\n-This option works only for 64-bit JVMs.\n-.PP\n-It\\[aq]s possible to use compressed pointers with Java heap sizes\n-greater than 32 GB.\n-See the \\f[V]-XX:ObjectAlignmentInBytes\\f[R] option.\n-.RE\n-.TP\n-\\f[V]-XX:-UseContainerSupport\\f[R]\n-\\f[B]Linux only:\\f[R] The VM now provides automatic container detection\n-support, which allows the VM to determine the amount of memory and\n-number of processors that are available to a Java process running in\n-docker containers.\n-It uses this information to allocate system resources.\n-The default for this flag is \\f[V]true\\f[R], and container support is\n-enabled by default.\n-It can be disabled with \\f[V]-XX:-UseContainerSupport\\f[R].\n-.RS\n-.PP\n-Unified Logging is available to help to diagnose issues related to this\n-support.\n-.PP\n-Use \\f[V]-Xlog:os+container=trace\\f[R] for maximum logging of container\n-information.\n-See \\f[B]Enable Logging with the JVM Unified Logging Framework\\f[R] for\n-a description of using Unified Logging.\n-.RE\n-.TP\n-\\f[V]-XX:+UseLargePages\\f[R]\n-Enables the use of large page memory.\n-By default, this option is disabled and large page memory isn\\[aq]t\n-used.\n-.RS\n-.PP\n-See \\f[B]Large Pages\\f[R].\n-.RE\n-.TP\n-\\f[V]-XX:+UseTransparentHugePages\\f[R]\n-\\f[B]Linux only:\\f[R] Enables the use of large pages that can\n-dynamically grow or shrink.\n-This option is disabled by default.\n-You may encounter performance problems with transparent huge pages as\n-the OS moves other pages around to create huge pages; this option is\n-made available for experimentation.\n-.TP\n-\\f[V]-XX:+AllowUserSignalHandlers\\f[R]\n-\\f[B]Non-Windows:\\f[R] Enables installation of signal handlers by the\n-application.\n-By default, this option is disabled and the application isn\\[aq]t\n-allowed to install signal handlers.\n-.TP\n-\\f[V]-XX:VMOptionsFile=\\f[R]\\f[I]filename\\f[R]\n-Allows user to specify VM options in a file, for example,\n-\\f[V]java -XX:VMOptionsFile=\/var\/my_vm_options HelloWorld\\f[R].\n-.TP\n-\\f[V]-XX:UseBranchProtection=\\f[R]\\f[I]mode\\f[R]\n-\\f[B]Linux AArch64 only:\\f[R] Specifies the branch protection mode.\n-All options other than \\f[V]none\\f[R] require the VM to have been built\n-with branch protection enabled.\n-In addition, for full protection, any native libraries provided by\n-applications should be compiled with the same level of protection.\n-.RS\n-.PP\n-Possible \\f[I]mode\\f[R] arguments for this option include the following:\n-.TP\n-\\f[V]none\\f[R]\n-Do not use branch protection.\n-This is the default value.\n-.TP\n-\\f[V]standard\\f[R]\n-Enables all branch protection modes available on the current platform.\n-.TP\n-\\f[V]pac-ret\\f[R]\n-Enables protection against ROP based attacks.\n-(AArch64 8.3+ only)\n-.RE\n-.SH ADVANCED JIT COMPILER OPTIONS FOR JAVA\n-.PP\n-These \\f[V]java\\f[R] options control the dynamic just-in-time (JIT)\n-compilation performed by the Java HotSpot VM.\n-.TP\n-\\f[V]-XX:AllocateInstancePrefetchLines=\\f[R]\\f[I]lines\\f[R]\n-Sets the number of lines to prefetch ahead of the instance allocation\n-pointer.\n-By default, the number of lines to prefetch is set to 1:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:AllocateInstancePrefetchLines=1\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:AllocatePrefetchDistance=\\f[R]\\f[I]size\\f[R]\n-Sets the size (in bytes) of the prefetch distance for object allocation.\n-Memory about to be written with the value of new objects is prefetched\n-up to this distance starting from the address of the last allocated\n-object.\n-Each Java thread has its own allocation point.\n-.RS\n-.PP\n-Negative values denote that prefetch distance is chosen based on the\n-platform.\n-Positive values are bytes to prefetch.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-The default value is set to -1.\n-.PP\n-The following example shows how to set the prefetch distance to 1024\n-bytes:\n-.RS\n-.PP\n-\\f[V]-XX:AllocatePrefetchDistance=1024\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:AllocatePrefetchInstr=\\f[R]\\f[I]instruction\\f[R]\n-Sets the prefetch instruction to prefetch ahead of the allocation\n-pointer.\n-Possible values are from 0 to 3.\n-The actual instructions behind the values depend on the platform.\n-By default, the prefetch instruction is set to 0:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:AllocatePrefetchInstr=0\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:AllocatePrefetchLines=\\f[R]\\f[I]lines\\f[R]\n-Sets the number of cache lines to load after the last object allocation\n-by using the prefetch instructions generated in compiled code.\n-The default value is 1 if the last allocated object was an instance, and\n-3 if it was an array.\n-.RS\n-.PP\n-The following example shows how to set the number of loaded cache lines\n-to 5:\n-.RS\n-.PP\n-\\f[V]-XX:AllocatePrefetchLines=5\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:AllocatePrefetchStepSize=\\f[R]\\f[I]size\\f[R]\n-Sets the step size (in bytes) for sequential prefetch instructions.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-By default, the step size is set to 16 bytes:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:AllocatePrefetchStepSize=16\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:AllocatePrefetchStyle=\\f[R]\\f[I]style\\f[R]\n-Sets the generated code style for prefetch instructions.\n-The \\f[I]style\\f[R] argument is an integer from 0 to 3:\n-.RS\n-.TP\n-\\f[V]0\\f[R]\n-Don\\[aq]t generate prefetch instructions.\n-.TP\n-\\f[V]1\\f[R]\n-Execute prefetch instructions after each allocation.\n-This is the default setting.\n-.TP\n-\\f[V]2\\f[R]\n-Use the thread-local allocation block (TLAB) watermark pointer to\n-determine when prefetch instructions are executed.\n-.TP\n-\\f[V]3\\f[R]\n-Generate one prefetch instruction per cache line.\n-.RE\n-.TP\n-\\f[V]-XX:+BackgroundCompilation\\f[R]\n-Enables background compilation.\n-This option is enabled by default.\n-To disable background compilation, specify\n-\\f[V]-XX:-BackgroundCompilation\\f[R] (this is equivalent to specifying\n-\\f[V]-Xbatch\\f[R]).\n-.TP\n-\\f[V]-XX:CICompilerCount=\\f[R]\\f[I]threads\\f[R]\n-Sets the number of compiler threads to use for compilation.\n-By default, the number of compiler threads is selected automatically\n-depending on the number of CPUs and memory available for compiled code.\n-The following example shows how to set the number of threads to 2:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:CICompilerCount=2\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:+UseDynamicNumberOfCompilerThreads\\f[R]\n-Dynamically create compiler thread up to the limit specified by\n-\\f[V]-XX:CICompilerCount\\f[R].\n-This option is enabled by default.\n-.TP\n-\\f[V]-XX:CompileCommand=\\f[R]\\f[I]command\\f[R]\\f[V],\\f[R]\\f[I]method\\f[R][\\f[V],\\f[R]\\f[I]option\\f[R]]\n-Specifies a \\f[I]command\\f[R] to perform on a \\f[I]method\\f[R].\n-For example, to exclude the \\f[V]indexOf()\\f[R] method of the\n-\\f[V]String\\f[R] class from being compiled, use the following:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:CompileCommand=exclude,java\/lang\/String.indexOf\\f[R]\n-.RE\n-.PP\n-Note that the full class name is specified, including all packages and\n-subpackages separated by a slash (\\f[V]\/\\f[R]).\n-For easier cut-and-paste operations, it\\[aq]s also possible to use the\n-method name format produced by the \\f[V]-XX:+PrintCompilation\\f[R] and\n-\\f[V]-XX:+LogCompilation\\f[R] options:\n-.RS\n-.PP\n-\\f[V]-XX:CompileCommand=exclude,java.lang.String::indexOf\\f[R]\n-.RE\n-.PP\n-If the method is specified without the signature, then the command is\n-applied to all methods with the specified name.\n-However, you can also specify the signature of the method in the class\n-file format.\n-In this case, you should enclose the arguments in quotation marks,\n-because otherwise the shell treats the semicolon as a command end.\n-For example, if you want to exclude only the \\f[V]indexOf(String)\\f[R]\n-method of the \\f[V]String\\f[R] class from being compiled, use the\n-following:\n-.RS\n-.PP\n-\\f[V]-XX:CompileCommand=\\[dq]exclude,java\/lang\/String.indexOf,(Ljava\/lang\/String;)I\\[dq]\\f[R]\n-.RE\n-.PP\n-You can also use the asterisk (*) as a wildcard for class and method\n-names.\n-For example, to exclude all \\f[V]indexOf()\\f[R] methods in all classes\n-from being compiled, use the following:\n-.RS\n-.PP\n-\\f[V]-XX:CompileCommand=exclude,*.indexOf\\f[R]\n-.RE\n-.PP\n-The commas and periods are aliases for spaces, making it easier to pass\n-compiler commands through a shell.\n-You can pass arguments to \\f[V]-XX:CompileCommand\\f[R] using spaces as\n-separators by enclosing the argument in quotation marks:\n-.RS\n-.PP\n-\\f[V]-XX:CompileCommand=\\[dq]exclude java\/lang\/String indexOf\\[dq]\\f[R]\n-.RE\n-.PP\n-Note that after parsing the commands passed on the command line using\n-the \\f[V]-XX:CompileCommand\\f[R] options, the JIT compiler then reads\n-commands from the \\f[V].hotspot_compiler\\f[R] file.\n-You can add commands to this file or specify a different file using the\n-\\f[V]-XX:CompileCommandFile\\f[R] option.\n-.PP\n-To add several commands, either specify the \\f[V]-XX:CompileCommand\\f[R]\n-option multiple times, or separate each argument with the new line\n-separator (\\f[V]\\[rs]n\\f[R]).\n-The following commands are available:\n-.TP\n-\\f[V]break\\f[R]\n-Sets a breakpoint when debugging the JVM to stop at the beginning of\n-compilation of the specified method.\n-.TP\n-\\f[V]compileonly\\f[R]\n-Excludes all methods from compilation except for the specified method.\n-As an alternative, you can use the \\f[V]-XX:CompileOnly\\f[R] option,\n-which lets you specify several methods.\n-.TP\n-\\f[V]dontinline\\f[R]\n-Prevents inlining of the specified method.\n-.TP\n-\\f[V]exclude\\f[R]\n-Excludes the specified method from compilation.\n-.TP\n-\\f[V]help\\f[R]\n-Prints a help message for the \\f[V]-XX:CompileCommand\\f[R] option.\n-.TP\n-\\f[V]inline\\f[R]\n-Attempts to inline the specified method.\n-.TP\n-\\f[V]log\\f[R]\n-Excludes compilation logging (with the \\f[V]-XX:+LogCompilation\\f[R]\n-option) for all methods except for the specified method.\n-By default, logging is performed for all compiled methods.\n-.TP\n-\\f[V]option\\f[R]\n-Passes a JIT compilation option to the specified method in place of the\n-last argument (\\f[V]option\\f[R]).\n-The compilation option is set at the end, after the method name.\n-For example, to enable the \\f[V]BlockLayoutByFrequency\\f[R] option for\n-the \\f[V]append()\\f[R] method of the \\f[V]StringBuffer\\f[R] class, use\n-the following:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:CompileCommand=option,java\/lang\/StringBuffer.append,BlockLayoutByFrequency\\f[R]\n-.RE\n-.PP\n-You can specify multiple compilation options, separated by commas or\n-spaces.\n-.RE\n-.TP\n-\\f[V]print\\f[R]\n-Prints generated assembler code after compilation of the specified\n-method.\n-.TP\n-\\f[V]quiet\\f[R]\n-Instructs not to print the compile commands.\n-By default, the commands that you specify with the\n-\\f[V]-XX:CompileCommand\\f[R] option are printed; for example, if you\n-exclude from compilation the \\f[V]indexOf()\\f[R] method of the\n-\\f[V]String\\f[R] class, then the following is printed to standard\n-output:\n-.RS\n-.RS\n-.PP\n-\\f[V]CompilerOracle: exclude java\/lang\/String.indexOf\\f[R]\n-.RE\n-.PP\n-You can suppress this by specifying the\n-\\f[V]-XX:CompileCommand=quiet\\f[R] option before other\n-\\f[V]-XX:CompileCommand\\f[R] options.\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:CompileCommandFile=\\f[R]\\f[I]filename\\f[R]\n-Sets the file from which JIT compiler commands are read.\n-By default, the \\f[V].hotspot_compiler\\f[R] file is used to store\n-commands performed by the JIT compiler.\n-.RS\n-.PP\n-Each line in the command file represents a command, a class name, and a\n-method name for which the command is used.\n-For example, this line prints assembly code for the \\f[V]toString()\\f[R]\n-method of the \\f[V]String\\f[R] class:\n-.RS\n-.PP\n-\\f[V]print java\/lang\/String toString\\f[R]\n-.RE\n-.PP\n-If you\\[aq]re using commands for the JIT compiler to perform on methods,\n-then see the \\f[V]-XX:CompileCommand\\f[R] option.\n-.RE\n-.TP\n-\\f[V]-XX:CompilerDirectivesFile=\\f[R]\\f[I]file\\f[R]\n-Adds directives from a file to the directives stack when a program\n-starts.\n-See \\f[B]Compiler Control\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/12\/vm\/compiler-control1.html#GUID-94AD8194-786A-4F19-BFFF-278F8E237F3A].\n-.RS\n-.PP\n-The \\f[V]-XX:CompilerDirectivesFile\\f[R] option has to be used together\n-with the \\f[V]-XX:UnlockDiagnosticVMOptions\\f[R] option that unlocks\n-diagnostic JVM options.\n-.RE\n-.TP\n-\\f[V]-XX:+CompilerDirectivesPrint\\f[R]\n-Prints the directives stack when the program starts or when a new\n-directive is added.\n-.RS\n-.PP\n-The \\f[V]-XX:+CompilerDirectivesPrint\\f[R] option has to be used\n-together with the \\f[V]-XX:UnlockDiagnosticVMOptions\\f[R] option that\n-unlocks diagnostic JVM options.\n-.RE\n-.TP\n-\\f[V]-XX:CompileOnly=\\f[R]\\f[I]methods\\f[R]\n-Sets the list of methods (separated by commas) to which compilation\n-should be restricted.\n-Only the specified methods are compiled.\n-.RS\n-.PP\n-\\f[V]-XX:CompileOnly=method1,method2,...,methodN\\f[R] is an alias for:\n-.IP\n-.nf\n-\\f[CB]\n--XX:CompileCommand=compileonly,method1\n--XX:CompileCommand=compileonly,method2\n-\\&...\n--XX:CompileCommand=compileonly,methodN\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]-XX:CompileThresholdScaling=\\f[R]\\f[I]scale\\f[R]\n-Provides unified control of first compilation.\n-This option controls when methods are first compiled for both the tiered\n-and the nontiered modes of operation.\n-The \\f[V]CompileThresholdScaling\\f[R] option has a floating point value\n-between 0 and +Inf and scales the thresholds corresponding to the\n-current mode of operation (both tiered and nontiered).\n-Setting \\f[V]CompileThresholdScaling\\f[R] to a value less than 1.0\n-results in earlier compilation while values greater than 1.0 delay\n-compilation.\n-Setting \\f[V]CompileThresholdScaling\\f[R] to 0 is equivalent to\n-disabling compilation.\n-.TP\n-\\f[V]-XX:+DoEscapeAnalysis\\f[R]\n-Enables the use of escape analysis.\n-This option is enabled by default.\n-To disable the use of escape analysis, specify\n-\\f[V]-XX:-DoEscapeAnalysis\\f[R].\n-.TP\n-\\f[V]-XX:InitialCodeCacheSize=\\f[R]\\f[I]size\\f[R]\n-Sets the initial code cache size (in bytes).\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-The default value depends on the platform.\n-The initial code cache size shouldn\\[aq]t be less than the system\\[aq]s\n-minimal memory page size.\n-The following example shows how to set the initial code cache size to 32\n-KB:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:InitialCodeCacheSize=32k\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:+Inline\\f[R]\n-Enables method inlining.\n-This option is enabled by default to increase performance.\n-To disable method inlining, specify \\f[V]-XX:-Inline\\f[R].\n-.TP\n-\\f[V]-XX:InlineSmallCode=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum code size (in bytes) for already compiled methods that\n-may be inlined.\n-This flag only applies to the C2 compiler.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-The default value depends on the platform and on whether tiered\n-compilation is enabled.\n-In the following example it is set to 1000 bytes:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:InlineSmallCode=1000\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:+LogCompilation\\f[R]\n-Enables logging of compilation activity to a file named\n-\\f[V]hotspot.log\\f[R] in the current working directory.\n-You can specify a different log file path and name using the\n-\\f[V]-XX:LogFile\\f[R] option.\n-.RS\n-.PP\n-By default, this option is disabled and compilation activity isn\\[aq]t\n-logged.\n-The \\f[V]-XX:+LogCompilation\\f[R] option has to be used together with\n-the \\f[V]-XX:UnlockDiagnosticVMOptions\\f[R] option that unlocks\n-diagnostic JVM options.\n-.PP\n-You can enable verbose diagnostic output with a message printed to the\n-console every time a method is compiled by using the\n-\\f[V]-XX:+PrintCompilation\\f[R] option.\n-.RE\n-.TP\n-\\f[V]-XX:FreqInlineSize=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum bytecode size (in bytes) of a hot method to be inlined.\n-This flag only applies to the C2 compiler.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-The default value depends on the platform.\n-In the following example it is set to 325 bytes:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:FreqInlineSize=325\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:MaxInlineSize=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum bytecode size (in bytes) of a cold method to be\n-inlined.\n-This flag only applies to the C2 compiler.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-By default, the maximum bytecode size is set to 35 bytes:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:MaxInlineSize=35\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:C1MaxInlineSize=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum bytecode size (in bytes) of a cold method to be\n-inlined.\n-This flag only applies to the C1 compiler.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-By default, the maximum bytecode size is set to 35 bytes:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:MaxInlineSize=35\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:MaxTrivialSize=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum bytecode size (in bytes) of a trivial method to be\n-inlined.\n-This flag only applies to the C2 compiler.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-By default, the maximum bytecode size of a trivial method is set to 6\n-bytes:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:MaxTrivialSize=6\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:C1MaxTrivialSize=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum bytecode size (in bytes) of a trivial method to be\n-inlined.\n-This flag only applies to the C1 compiler.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-By default, the maximum bytecode size of a trivial method is set to 6\n-bytes:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:MaxTrivialSize=6\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:MaxNodeLimit=\\f[R]\\f[I]nodes\\f[R]\n-Sets the maximum number of nodes to be used during single method\n-compilation.\n-By default the value depends on the features enabled.\n-In the following example the maximum number of nodes is set to 100,000:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:MaxNodeLimit=100000\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:NonNMethodCodeHeapSize=\\f[R]\\f[I]size\\f[R]\n-Sets the size in bytes of the code segment containing nonmethod code.\n-.RS\n-.PP\n-A nonmethod code segment containing nonmethod code, such as compiler\n-buffers and the bytecode interpreter.\n-This code type stays in the code cache forever.\n-This flag is used only if \\f[V]-XX:SegmentedCodeCache\\f[R] is enabled.\n-.RE\n-.TP\n-\\f[V]-XX:NonProfiledCodeHeapSize=\\f[R]\\f[I]size\\f[R]\n-Sets the size in bytes of the code segment containing nonprofiled\n-methods.\n-This flag is used only if \\f[V]-XX:SegmentedCodeCache\\f[R] is enabled.\n-.TP\n-\\f[V]-XX:+OptimizeStringConcat\\f[R]\n-Enables the optimization of \\f[V]String\\f[R] concatenation operations.\n-This option is enabled by default.\n-To disable the optimization of \\f[V]String\\f[R] concatenation\n-operations, specify \\f[V]-XX:-OptimizeStringConcat\\f[R].\n-.TP\n-\\f[V]-XX:+PrintAssembly\\f[R]\n-Enables printing of assembly code for bytecoded and native methods by\n-using the external \\f[V]hsdis-<arch>.so\\f[R] or \\f[V].dll\\f[R] library.\n-For 64-bit VM on Windows, it\\[aq]s \\f[V]hsdis-amd64.dll\\f[R].\n-This lets you to see the generated code, which may help you to diagnose\n-performance issues.\n-.RS\n-.PP\n-By default, this option is disabled and assembly code isn\\[aq]t printed.\n-The \\f[V]-XX:+PrintAssembly\\f[R] option has to be used together with the\n-\\f[V]-XX:UnlockDiagnosticVMOptions\\f[R] option that unlocks diagnostic\n-JVM options.\n-.RE\n-.TP\n-\\f[V]-XX:ProfiledCodeHeapSize=\\f[R]\\f[I]size\\f[R]\n-Sets the size in bytes of the code segment containing profiled methods.\n-This flag is used only if \\f[V]-XX:SegmentedCodeCache\\f[R] is enabled.\n-.TP\n-\\f[V]-XX:+PrintCompilation\\f[R]\n-Enables verbose diagnostic output from the JVM by printing a message to\n-the console every time a method is compiled.\n-This lets you to see which methods actually get compiled.\n-By default, this option is disabled and diagnostic output isn\\[aq]t\n-printed.\n-.RS\n-.PP\n-You can also log compilation activity to a file by using the\n-\\f[V]-XX:+LogCompilation\\f[R] option.\n-.RE\n-.TP\n-\\f[V]-XX:+PrintInlining\\f[R]\n-Enables printing of inlining decisions.\n-This let\\[aq]s you see which methods are getting inlined.\n-.RS\n-.PP\n-By default, this option is disabled and inlining information isn\\[aq]t\n-printed.\n-The \\f[V]-XX:+PrintInlining\\f[R] option has to be used together with the\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R] option that unlocks diagnostic\n-JVM options.\n-.RE\n-.TP\n-\\f[V]-XX:ReservedCodeCacheSize=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum code cache size (in bytes) for JIT-compiled code.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-The default maximum code cache size is 240 MB; if you disable tiered\n-compilation with the option \\f[V]-XX:-TieredCompilation\\f[R], then the\n-default size is 48 MB.\n-This option has a limit of 2 GB; otherwise, an error is generated.\n-The maximum code cache size shouldn\\[aq]t be less than the initial code\n-cache size; see the option \\f[V]-XX:InitialCodeCacheSize\\f[R].\n-.TP\n-\\f[V]-XX:+SegmentedCodeCache\\f[R]\n-Enables segmentation of the code cache, without which the code cache\n-consists of one large segment.\n-With \\f[V]-XX:+SegmentedCodeCache\\f[R], separate segments will be used\n-for non-method, profiled method, and non-profiled method code.\n-The segments are not resized at runtime.\n-The advantages are better control of the memory footprint, reduced code\n-fragmentation, and better CPU iTLB (instruction translation lookaside\n-buffer) and instruction cache behavior due to improved locality.\n-.RS\n-.PP\n-The feature is enabled by default if tiered compilation is enabled\n-(\\f[V]-XX:+TieredCompilation\\f[R] ) and the reserved code cache size\n-(\\f[V]-XX:ReservedCodeCacheSize\\f[R]) is at least 240 MB.\n-.RE\n-.TP\n-\\f[V]-XX:StartAggressiveSweepingAt=\\f[R]\\f[I]percent\\f[R]\n-Forces stack scanning of active methods to aggressively remove unused\n-code when only the given percentage of the code cache is free.\n-The default value is 10%.\n-.TP\n-\\f[V]-XX:-TieredCompilation\\f[R]\n-Disables the use of tiered compilation.\n-By default, this option is enabled.\n-.TP\n-\\f[V]-XX:UseSSE=\\f[R]\\f[I]version\\f[R]\n-Enables the use of SSE instruction set of a specified version.\n-Is set by default to the highest supported version available (x86 only).\n-.TP\n-\\f[V]-XX:UseAVX=\\f[R]\\f[I]version\\f[R]\n-Enables the use of AVX instruction set of a specified version.\n-Is set by default to the highest supported version available (x86 only).\n-.TP\n-\\f[V]-XX:+UseAES\\f[R]\n-Enables hardware-based AES intrinsics for hardware that supports it.\n-This option is on by default on hardware that has the necessary\n-instructions.\n-The \\f[V]-XX:+UseAES\\f[R] is used in conjunction with\n-\\f[V]UseAESIntrinsics\\f[R].\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseAESIntrinsics\\f[R]\n-Enables AES intrinsics.\n-Specifying \\f[V]-XX:+UseAESIntrinsics\\f[R] is equivalent to also\n-enabling \\f[V]-XX:+UseAES\\f[R].\n-To disable hardware-based AES intrinsics, specify\n-\\f[V]-XX:-UseAES -XX:-UseAESIntrinsics\\f[R].\n-For example, to enable hardware AES, use the following flags:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:+UseAES -XX:+UseAESIntrinsics\\f[R]\n-.RE\n-.PP\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.RE\n-.TP\n-\\f[V]-XX:+UseAESCTRIntrinsics\\f[R]\n-Analogous to \\f[V]-XX:+UseAESIntrinsics\\f[R] enables AES\/CTR intrinsics.\n-.TP\n-\\f[V]-XX:+UseGHASHIntrinsics\\f[R]\n-Controls the use of GHASH intrinsics.\n-Enabled by default on platforms that support the corresponding\n-instructions.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseChaCha20Intrinsics\\f[R]\n-Enable ChaCha20 intrinsics.\n-This option is on by default for supported platforms.\n-To disable ChaCha20 intrinsics, specify\n-\\f[V]-XX:-UseChaCha20Intrinsics\\f[R].\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UsePoly1305Intrinsics\\f[R]\n-Enable Poly1305 intrinsics.\n-This option is on by default for supported platforms.\n-To disable Poly1305 intrinsics, specify\n-\\f[V]-XX:-UsePoly1305Intrinsics\\f[R].\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseBASE64Intrinsics\\f[R]\n-Controls the use of accelerated BASE64 encoding routines for\n-\\f[V]java.util.Base64\\f[R].\n-Enabled by default on platforms that support it.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseAdler32Intrinsics\\f[R]\n-Controls the use of Adler32 checksum algorithm intrinsic for\n-\\f[V]java.util.zip.Adler32\\f[R].\n-Enabled by default on platforms that support it.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseCRC32Intrinsics\\f[R]\n-Controls the use of CRC32 intrinsics for \\f[V]java.util.zip.CRC32\\f[R].\n-Enabled by default on platforms that support it.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseCRC32CIntrinsics\\f[R]\n-Controls the use of CRC32C intrinsics for\n-\\f[V]java.util.zip.CRC32C\\f[R].\n-Enabled by default on platforms that support it.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseSHA\\f[R]\n-Enables hardware-based intrinsics for SHA crypto hash functions for some\n-hardware.\n-The \\f[V]UseSHA\\f[R] option is used in conjunction with the\n-\\f[V]UseSHA1Intrinsics\\f[R], \\f[V]UseSHA256Intrinsics\\f[R], and\n-\\f[V]UseSHA512Intrinsics\\f[R] options.\n-.RS\n-.PP\n-The \\f[V]UseSHA\\f[R] and \\f[V]UseSHA*Intrinsics\\f[R] flags are enabled\n-by default on machines that support the corresponding instructions.\n-.PP\n-This feature is applicable only when using the\n-\\f[V]sun.security.provider.Sun\\f[R] provider for SHA operations.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.PP\n-To disable all hardware-based SHA intrinsics, specify the\n-\\f[V]-XX:-UseSHA\\f[R].\n-To disable only a particular SHA intrinsic, use the appropriate\n-corresponding option.\n-For example: \\f[V]-XX:-UseSHA256Intrinsics\\f[R].\n-.RE\n-.TP\n-\\f[V]-XX:+UseSHA1Intrinsics\\f[R]\n-Enables intrinsics for SHA-1 crypto hash function.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseSHA256Intrinsics\\f[R]\n-Enables intrinsics for SHA-224 and SHA-256 crypto hash functions.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseSHA512Intrinsics\\f[R]\n-Enables intrinsics for SHA-384 and SHA-512 crypto hash functions.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseMathExactIntrinsics\\f[R]\n-Enables intrinsification of various \\f[V]java.lang.Math.*Exact()\\f[R]\n-functions.\n-Enabled by default.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseMultiplyToLenIntrinsic\\f[R]\n-Enables intrinsification of \\f[V]BigInteger.multiplyToLen()\\f[R].\n-Enabled by default on platforms that support it.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n--XX:+UseSquareToLenIntrinsic\n-Enables intrinsification of \\f[V]BigInteger.squareToLen()\\f[R].\n-Enabled by default on platforms that support it.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n--XX:+UseMulAddIntrinsic\n-Enables intrinsification of \\f[V]BigInteger.mulAdd()\\f[R].\n-Enabled by default on platforms that support it.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n--XX:+UseMontgomeryMultiplyIntrinsic\n-Enables intrinsification of \\f[V]BigInteger.montgomeryMultiply()\\f[R].\n-Enabled by default on platforms that support it.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n--XX:+UseMontgomerySquareIntrinsic\n-Enables intrinsification of \\f[V]BigInteger.montgomerySquare()\\f[R].\n-Enabled by default on platforms that support it.\n-Flags that control intrinsics now require the option\n-\\f[V]-XX:+UnlockDiagnosticVMOptions\\f[R].\n-.TP\n-\\f[V]-XX:+UseCMoveUnconditionally\\f[R]\n-Generates CMove (scalar and vector) instructions regardless of\n-profitability analysis.\n-.TP\n-\\f[V]-XX:+UseCodeCacheFlushing\\f[R]\n-Enables flushing of the code cache before shutting down the compiler.\n-This option is enabled by default.\n-To disable flushing of the code cache before shutting down the compiler,\n-specify \\f[V]-XX:-UseCodeCacheFlushing\\f[R].\n-.TP\n-\\f[V]-XX:+UseCondCardMark\\f[R]\n-Enables checking if the card is already marked before updating the card\n-table.\n-This option is disabled by default.\n-It should be used only on machines with multiple sockets, where it\n-increases the performance of Java applications that rely on concurrent\n-operations.\n-.TP\n-\\f[V]-XX:+UseCountedLoopSafepoints\\f[R]\n-Keeps safepoints in counted loops.\n-Its default value depends on whether the selected garbage collector\n-requires low latency safepoints.\n-.TP\n-\\f[V]-XX:LoopStripMiningIter=\\f[R]\\f[I]number_of_iterations\\f[R]\n-Controls the number of iterations in the inner strip mined loop.\n-Strip mining transforms counted loops into two level nested loops.\n-Safepoints are kept in the outer loop while the inner loop can execute\n-at full speed.\n-This option controls the maximum number of iterations in the inner loop.\n-The default value is 1,000.\n-.TP\n-\\f[V]-XX:LoopStripMiningIterShortLoop=\\f[R]\\f[I]number_of_iterations\\f[R]\n-Controls loop strip mining optimization.\n-Loops with the number of iterations less than specified will not have\n-safepoints in them.\n-Default value is 1\/10th of \\f[V]-XX:LoopStripMiningIter\\f[R].\n-.TP\n-\\f[V]-XX:+UseFMA\\f[R]\n-Enables hardware-based FMA intrinsics for hardware where FMA\n-instructions are available (such as, Intel and ARM64).\n-FMA intrinsics are generated for the\n-\\f[V]java.lang.Math.fma(\\f[R]\\f[I]a\\f[R]\\f[V],\\f[R]\n-\\f[I]b\\f[R]\\f[V],\\f[R] \\f[I]c\\f[R]\\f[V])\\f[R] methods that calculate the\n-value of \\f[V](\\f[R] \\f[I]a\\f[R] \\f[V]*\\f[R] \\f[I]b\\f[R] \\f[V]+\\f[R]\n-\\f[I]c\\f[R] \\f[V])\\f[R] expressions.\n-.TP\n-\\f[V]-XX:+UseSuperWord\\f[R]\n-Enables the transformation of scalar operations into superword\n-operations.\n-Superword is a vectorization optimization.\n-This option is enabled by default.\n-To disable the transformation of scalar operations into superword\n-operations, specify \\f[V]-XX:-UseSuperWord\\f[R].\n-.SH ADVANCED SERVICEABILITY OPTIONS FOR JAVA\n-.PP\n-These \\f[V]java\\f[R] options provide the ability to gather system\n-information and perform extensive debugging.\n-.TP\n-\\f[V]-XX:+DisableAttachMechanism\\f[R]\n-Disables the mechanism that lets tools attach to the JVM.\n-By default, this option is disabled, meaning that the attach mechanism\n-is enabled and you can use diagnostics and troubleshooting tools such as\n-\\f[V]jcmd\\f[R], \\f[V]jstack\\f[R], \\f[V]jmap\\f[R], and \\f[V]jinfo\\f[R].\n-.RS\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] The tools such as \\f[B]jcmd\\f[R], \\f[B]jinfo\\f[R],\n-\\f[B]jmap\\f[R], and \\f[B]jstack\\f[R] shipped with the JDK aren\\[aq]t\n-supported when using the tools from one JDK version to troubleshoot a\n-different JDK version.\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:+DTraceAllocProbes\\f[R]\n-\\f[B]Linux and macOS:\\f[R] Enable \\f[V]dtrace\\f[R] tool probes for\n-object allocation.\n-.TP\n-\\f[V]-XX:+DTraceMethodProbes\\f[R]\n-\\f[B]Linux and macOS:\\f[R] Enable \\f[V]dtrace\\f[R] tool probes for\n-method-entry and method-exit.\n-.TP\n-\\f[V]-XX:+DTraceMonitorProbes\\f[R]\n-\\f[B]Linux and macOS:\\f[R] Enable \\f[V]dtrace\\f[R] tool probes for\n-monitor events.\n-.TP\n-\\f[V]-XX:+HeapDumpOnOutOfMemoryError\\f[R]\n-Enables the dumping of the Java heap to a file in the current directory\n-by using the heap profiler (HPROF) when a\n-\\f[V]java.lang.OutOfMemoryError\\f[R] exception is thrown.\n-You can explicitly set the heap dump file path and name using the\n-\\f[V]-XX:HeapDumpPath\\f[R] option.\n-By default, this option is disabled and the heap isn\\[aq]t dumped when\n-an \\f[V]OutOfMemoryError\\f[R] exception is thrown.\n-.TP\n-\\f[V]-XX:HeapDumpPath=\\f[R]\\f[I]path\\f[R]\n-Sets the path and file name for writing the heap dump provided by the\n-heap profiler (HPROF) when the \\f[V]-XX:+HeapDumpOnOutOfMemoryError\\f[R]\n-option is set.\n-By default, the file is created in the current working directory, and\n-it\\[aq]s named \\f[V]java_pid<pid>.hprof\\f[R] where \\f[V]<pid>\\f[R] is\n-the identifier of the process that caused the error.\n-The following example shows how to set the default file explicitly\n-(\\f[V]%p\\f[R] represents the current process identifier):\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:HeapDumpPath=.\/java_pid%p.hprof\\f[R]\n-.RE\n-.IP \\[bu] 2\n-\\f[B]Non-Windows:\\f[R] The following example shows how to set the heap\n-dump file to \\f[V]\/var\/log\/java\/java_heapdump.hprof\\f[R]:\n-.RS 2\n-.RS\n-.PP\n-\\f[V]-XX:HeapDumpPath=\/var\/log\/java\/java_heapdump.hprof\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] The following example shows how to set the heap dump\n-file to \\f[V]C:\/log\/java\/java_heapdump.log\\f[R]:\n-.RS 2\n-.RS\n-.PP\n-\\f[V]-XX:HeapDumpPath=C:\/log\/java\/java_heapdump.log\\f[R]\n-.RE\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:LogFile=\\f[R]\\f[I]path\\f[R]\n-Sets the path and file name to where log data is written.\n-By default, the file is created in the current working directory, and\n-it\\[aq]s named \\f[V]hotspot.log\\f[R].\n-.RS\n-.IP \\[bu] 2\n-\\f[B]Non-Windows:\\f[R] The following example shows how to set the log\n-file to \\f[V]\/var\/log\/java\/hotspot.log\\f[R]:\n-.RS 2\n-.RS\n-.PP\n-\\f[V]-XX:LogFile=\/var\/log\/java\/hotspot.log\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] The following example shows how to set the log file\n-to \\f[V]C:\/log\/java\/hotspot.log\\f[R]:\n-.RS 2\n-.RS\n-.PP\n-\\f[V]-XX:LogFile=C:\/log\/java\/hotspot.log\\f[R]\n-.RE\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:+PrintClassHistogram\\f[R]\n-Enables printing of a class instance histogram after one of the\n-following events:\n-.RS\n-.IP \\[bu] 2\n-\\f[B]Non-Windows:\\f[R] \\f[V]Control+\\[rs]\\f[R] (\\f[V]SIGQUIT\\f[R])\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] \\f[V]Control+C\\f[R] (\\f[V]SIGTERM\\f[R])\n-.PP\n-By default, this option is disabled.\n-.PP\n-Setting this option is equivalent to running the \\f[V]jmap -histo\\f[R]\n-command, or the \\f[V]jcmd\\f[R] \\f[I]pid\\f[R]\n-\\f[V]GC.class_histogram\\f[R] command, where \\f[I]pid\\f[R] is the current\n-Java process identifier.\n-.RE\n-.TP\n-\\f[V]-XX:+PrintConcurrentLocks\\f[R]\n-Enables printing of \\f[V]java.util.concurrent\\f[R] locks after one of\n-the following events:\n-.RS\n-.IP \\[bu] 2\n-\\f[B]Non-Windows:\\f[R] \\f[V]Control+\\[rs]\\f[R] (\\f[V]SIGQUIT\\f[R])\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] \\f[V]Control+C\\f[R] (\\f[V]SIGTERM\\f[R])\n-.PP\n-By default, this option is disabled.\n-.PP\n-Setting this option is equivalent to running the \\f[V]jstack -l\\f[R]\n-command or the \\f[V]jcmd\\f[R] \\f[I]pid\\f[R] \\f[V]Thread.print -l\\f[R]\n-command, where \\f[I]pid\\f[R] is the current Java process identifier.\n-.RE\n-.TP\n-\\f[V]-XX:+PrintFlagsRanges\\f[R]\n-Prints the range specified and allows automatic testing of the values.\n-See \\f[B]Validate Java Virtual Machine Flag Arguments\\f[R].\n-.TP\n-\\f[V]-XX:+PerfDataSaveToFile\\f[R]\n-If enabled, saves \\f[B]jstat\\f[R] binary data when the Java application\n-exits.\n-This binary data is saved in a file named\n-\\f[V]hsperfdata_\\f[R]\\f[I]pid\\f[R], where \\f[I]pid\\f[R] is the process\n-identifier of the Java application that you ran.\n-Use the \\f[V]jstat\\f[R] command to display the performance data\n-contained in this file as follows:\n-.RS\n-.RS\n-.PP\n-\\f[V]jstat -class file:\/\/\/\\f[R]\\f[I]path\\f[R]\\f[V]\/hsperfdata_\\f[R]\\f[I]pid\\f[R]\n-.RE\n-.RS\n-.PP\n-\\f[V]jstat -gc file:\/\/\/\\f[R]\\f[I]path\\f[R]\\f[V]\/hsperfdata_\\f[R]\\f[I]pid\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:+UsePerfData\\f[R]\n-Enables the \\f[V]perfdata\\f[R] feature.\n-This option is enabled by default to allow JVM monitoring and\n-performance testing.\n-Disabling it suppresses the creation of the \\f[V]hsperfdata_userid\\f[R]\n-directories.\n-To disable the \\f[V]perfdata\\f[R] feature, specify\n-\\f[V]-XX:-UsePerfData\\f[R].\n-.SH ADVANCED GARBAGE COLLECTION OPTIONS FOR JAVA\n-.PP\n-These \\f[V]java\\f[R] options control how garbage collection (GC) is\n-performed by the Java HotSpot VM.\n-.TP\n-\\f[V]-XX:+AggressiveHeap\\f[R]\n-Enables Java heap optimization.\n-This sets various parameters to be optimal for long-running jobs with\n-intensive memory allocation, based on the configuration of the computer\n-(RAM and CPU).\n-By default, the option is disabled and the heap sizes are configured\n-less aggressively.\n-.TP\n-\\f[V]-XX:+AlwaysPreTouch\\f[R]\n-Requests the VM to touch every page on the Java heap after requesting it\n-from the operating system and before handing memory out to the\n-application.\n-By default, this option is disabled and all pages are committed as the\n-application uses the heap space.\n-.TP\n-\\f[V]-XX:ConcGCThreads=\\f[R]\\f[I]threads\\f[R]\n-Sets the number of threads used for concurrent GC.\n-Sets \\f[I]\\f[VI]threads\\f[I]\\f[R] to approximately 1\/4 of the number of\n-parallel garbage collection threads.\n-The default value depends on the number of CPUs available to the JVM.\n-.RS\n-.PP\n-For example, to set the number of threads for concurrent GC to 2,\n-specify the following option:\n-.RS\n-.PP\n-\\f[V]-XX:ConcGCThreads=2\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:+DisableExplicitGC\\f[R]\n-Enables the option that disables processing of calls to the\n-\\f[V]System.gc()\\f[R] method.\n-This option is disabled by default, meaning that calls to\n-\\f[V]System.gc()\\f[R] are processed.\n-If processing of calls to \\f[V]System.gc()\\f[R] is disabled, then the\n-JVM still performs GC when necessary.\n-.TP\n-\\f[V]-XX:+ExplicitGCInvokesConcurrent\\f[R]\n-Enables invoking of concurrent GC by using the \\f[V]System.gc()\\f[R]\n-request.\n-This option is disabled by default and can be enabled only with the\n-\\f[V]-XX:+UseG1GC\\f[R] option.\n-.TP\n-\\f[V]-XX:G1AdaptiveIHOPNumInitialSamples=\\f[R]\\f[I]number\\f[R]\n-When \\f[V]-XX:UseAdaptiveIHOP\\f[R] is enabled, this option sets the\n-number of completed marking cycles used to gather samples until G1\n-adaptively determines the optimum value of\n-\\f[V]-XX:InitiatingHeapOccupancyPercent\\f[R].\n-Before, G1 uses the value of\n-\\f[V]-XX:InitiatingHeapOccupancyPercent\\f[R] directly for this purpose.\n-The default value is 3.\n-.TP\n-\\f[V]-XX:G1HeapRegionSize=\\f[R]\\f[I]size\\f[R]\n-Sets the size of the regions into which the Java heap is subdivided when\n-using the garbage-first (G1) collector.\n-The value is a power of 2 and can range from 1 MB to 32 MB.\n-The default region size is determined ergonomically based on the heap\n-size with a goal of approximately 2048 regions.\n-.RS\n-.PP\n-The following example sets the size of the subdivisions to 16 MB:\n-.RS\n-.PP\n-\\f[V]-XX:G1HeapRegionSize=16m\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:G1HeapWastePercent=\\f[R]\\f[I]percent\\f[R]\n-Sets the percentage of heap that you\\[aq]re willing to waste.\n-The Java HotSpot VM doesn\\[aq]t initiate the mixed garbage collection\n-cycle when the reclaimable percentage is less than the heap waste\n-percentage.\n-The default is 5 percent.\n-.TP\n-\\f[V]-XX:G1MaxNewSizePercent=\\f[R]\\f[I]percent\\f[R]\n-Sets the percentage of the heap size to use as the maximum for the young\n-generation size.\n-The default value is 60 percent of your Java heap.\n-.RS\n-.PP\n-This is an experimental flag.\n-This setting replaces the \\f[V]-XX:DefaultMaxNewGenPercent\\f[R] setting.\n-.RE\n-.TP\n-\\f[V]-XX:G1MixedGCCountTarget=\\f[R]\\f[I]number\\f[R]\n-Sets the target number of mixed garbage collections after a marking\n-cycle to collect old regions with at most\n-\\f[V]G1MixedGCLIveThresholdPercent\\f[R] live data.\n-The default is 8 mixed garbage collections.\n-The goal for mixed collections is to be within this target number.\n-.TP\n-\\f[V]-XX:G1MixedGCLiveThresholdPercent=\\f[R]\\f[I]percent\\f[R]\n-Sets the occupancy threshold for an old region to be included in a mixed\n-garbage collection cycle.\n-The default occupancy is 85 percent.\n-.RS\n-.PP\n-This is an experimental flag.\n-This setting replaces the\n-\\f[V]-XX:G1OldCSetRegionLiveThresholdPercent\\f[R] setting.\n-.RE\n-.TP\n-\\f[V]-XX:G1NewSizePercent=\\f[R]\\f[I]percent\\f[R]\n-Sets the percentage of the heap to use as the minimum for the young\n-generation size.\n-The default value is 5 percent of your Java heap.\n-.RS\n-.PP\n-This is an experimental flag.\n-This setting replaces the \\f[V]-XX:DefaultMinNewGenPercent\\f[R] setting.\n-.RE\n-.TP\n-\\f[V]-XX:G1OldCSetRegionThresholdPercent=\\f[R]\\f[I]percent\\f[R]\n-Sets an upper limit on the number of old regions to be collected during\n-a mixed garbage collection cycle.\n-The default is 10 percent of the Java heap.\n-.TP\n-\\f[V]-XX:G1ReservePercent=\\f[R]\\f[I]percent\\f[R]\n-Sets the percentage of the heap (0 to 50) that\\[aq]s reserved as a false\n-ceiling to reduce the possibility of promotion failure for the G1\n-collector.\n-When you increase or decrease the percentage, ensure that you adjust the\n-total Java heap by the same amount.\n-By default, this option is set to 10%.\n-.RS\n-.PP\n-The following example sets the reserved heap to 20%:\n-.RS\n-.PP\n-\\f[V]-XX:G1ReservePercent=20\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:+G1UseAdaptiveIHOP\\f[R]\n-Controls adaptive calculation of the old generation occupancy to start\n-background work preparing for an old generation collection.\n-If enabled, G1 uses \\f[V]-XX:InitiatingHeapOccupancyPercent\\f[R] for the\n-first few times as specified by the value of\n-\\f[V]-XX:G1AdaptiveIHOPNumInitialSamples\\f[R], and after that adaptively\n-calculates a new optimum value for the initiating occupancy\n-automatically.\n-Otherwise, the old generation collection process always starts at the\n-old generation occupancy determined by\n-\\f[V]-XX:InitiatingHeapOccupancyPercent\\f[R].\n-.RS\n-.PP\n-The default is enabled.\n-.RE\n-.TP\n-\\f[V]-XX:InitialHeapSize=\\f[R]\\f[I]size\\f[R]\n-Sets the initial size (in bytes) of the memory allocation pool.\n-This value must be either 0, or a multiple of 1024 and greater than 1\n-MB.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-The default value is selected at run time based on the system\n-configuration.\n-.RS\n-.PP\n-The following examples show how to set the size of allocated memory to 6\n-MB using various units:\n-.IP\n-.nf\n-\\f[CB]\n--XX:InitialHeapSize=6291456\n--XX:InitialHeapSize=6144k\n--XX:InitialHeapSize=6m\n-\\f[R]\n-.fi\n-.PP\n-If you set this option to 0, then the initial size is set as the sum of\n-the sizes allocated for the old generation and the young generation.\n-The size of the heap for the young generation can be set using the\n-\\f[V]-XX:NewSize\\f[R] option.\n-Note that the \\f[V]-Xms\\f[R] option sets both the minimum and the\n-initial heap size of the heap.\n-If \\f[V]-Xms\\f[R] appears after \\f[V]-XX:InitialHeapSize\\f[R] on the\n-command line, then the initial heap size gets set to the value specified\n-with \\f[V]-Xms\\f[R].\n-.RE\n-.TP\n-\\f[V]-XX:InitialRAMPercentage=\\f[R]\\f[I]percent\\f[R]\n-Sets the initial amount of memory that the JVM will use for the Java\n-heap before applying ergonomics heuristics as a percentage of the\n-maximum amount determined as described in the \\f[V]-XX:MaxRAM\\f[R]\n-option.\n-The default value is 1.5625 percent.\n-.RS\n-.PP\n-The following example shows how to set the percentage of the initial\n-amount of memory used for the Java heap:\n-.RS\n-.PP\n-\\f[V]-XX:InitialRAMPercentage=5\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:InitialSurvivorRatio=\\f[R]\\f[I]ratio\\f[R]\n-Sets the initial survivor space ratio used by the throughput garbage\n-collector (which is enabled by the \\f[V]-XX:+UseParallelGC\\f[R] option).\n-Adaptive sizing is enabled by default with the throughput garbage\n-collector by using the \\f[V]-XX:+UseParallelGC\\f[R] option, and the\n-survivor space is resized according to the application behavior,\n-starting with the initial value.\n-If adaptive sizing is disabled (using the\n-\\f[V]-XX:-UseAdaptiveSizePolicy\\f[R] option), then the\n-\\f[V]-XX:SurvivorRatio\\f[R] option should be used to set the size of the\n-survivor space for the entire execution of the application.\n-.RS\n-.PP\n-The following formula can be used to calculate the initial size of\n-survivor space (S) based on the size of the young generation (Y), and\n-the initial survivor space ratio (R):\n-.RS\n-.PP\n-\\f[V]S=Y\/(R+2)\\f[R]\n-.RE\n-.PP\n-The 2 in the equation denotes two survivor spaces.\n-The larger the value specified as the initial survivor space ratio, the\n-smaller the initial survivor space size.\n-.PP\n-By default, the initial survivor space ratio is set to 8.\n-If the default value for the young generation space size is used (2 MB),\n-then the initial size of the survivor space is 0.2 MB.\n-.PP\n-The following example shows how to set the initial survivor space ratio\n-to 4:\n-.RS\n-.PP\n-\\f[V]-XX:InitialSurvivorRatio=4\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:InitiatingHeapOccupancyPercent=\\f[R]\\f[I]percent\\f[R]\n-Sets the percentage of the old generation occupancy (0 to 100) at which\n-to start the first few concurrent marking cycles for the G1 garbage\n-collector.\n-.RS\n-.PP\n-By default, the initiating value is set to 45%.\n-A value of 0 implies nonstop concurrent GC cycles from the beginning\n-until G1 adaptively sets this value.\n-.PP\n-See also the \\f[V]-XX:G1UseAdaptiveIHOP\\f[R] and\n-\\f[V]-XX:G1AdaptiveIHOPNumInitialSamples\\f[R] options.\n-.PP\n-The following example shows how to set the initiating heap occupancy to\n-75%:\n-.RS\n-.PP\n-\\f[V]-XX:InitiatingHeapOccupancyPercent=75\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:MaxGCPauseMillis=\\f[R]\\f[I]time\\f[R]\n-Sets a target for the maximum GC pause time (in milliseconds).\n-This is a soft goal, and the JVM will make its best effort to achieve\n-it.\n-The specified value doesn\\[aq]t adapt to your heap size.\n-By default, for G1 the maximum pause time target is 200 milliseconds.\n-The other generational collectors do not use a pause time goal by\n-default.\n-.RS\n-.PP\n-The following example shows how to set the maximum target pause time to\n-500 ms:\n-.RS\n-.PP\n-\\f[V]-XX:MaxGCPauseMillis=500\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:MaxHeapSize=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum size (in byes) of the memory allocation pool.\n-This value must be a multiple of 1024 and greater than 2 MB.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-The default value is selected at run time based on the system\n-configuration.\n-For server deployments, the options \\f[V]-XX:InitialHeapSize\\f[R] and\n-\\f[V]-XX:MaxHeapSize\\f[R] are often set to the same value.\n-.RS\n-.PP\n-The following examples show how to set the maximum allowed size of\n-allocated memory to 80 MB using various units:\n-.IP\n-.nf\n-\\f[CB]\n--XX:MaxHeapSize=83886080\n--XX:MaxHeapSize=81920k\n--XX:MaxHeapSize=80m\n-\\f[R]\n-.fi\n-.PP\n-The \\f[V]-XX:MaxHeapSize\\f[R] option is equivalent to \\f[V]-Xmx\\f[R].\n-.RE\n-.TP\n-\\f[V]-XX:MaxHeapFreeRatio=\\f[R]\\f[I]percent\\f[R]\n-Sets the maximum allowed percentage of free heap space (0 to 100) after\n-a GC event.\n-If free heap space expands above this value, then the heap is shrunk.\n-By default, this value is set to 70%.\n-.RS\n-.PP\n-Minimize the Java heap size by lowering the values of the parameters\n-\\f[V]MaxHeapFreeRatio\\f[R] (default value is 70%) and\n-\\f[V]MinHeapFreeRatio\\f[R] (default value is 40%) with the command-line\n-options \\f[V]-XX:MaxHeapFreeRatio\\f[R] and\n-\\f[V]-XX:MinHeapFreeRatio\\f[R].\n-Lowering \\f[V]MaxHeapFreeRatio\\f[R] to as low as 10% and\n-\\f[V]MinHeapFreeRatio\\f[R] to 5% has successfully reduced the heap size\n-without too much performance regression; however, results may vary\n-greatly depending on your application.\n-Try different values for these parameters until they\\[aq]re as low as\n-possible yet still retain acceptable performance.\n-.RS\n-.PP\n-\\f[V]-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5\\f[R]\n-.RE\n-.PP\n-Customers trying to keep the heap small should also add the option\n-\\f[V]-XX:-ShrinkHeapInSteps\\f[R].\n-See \\f[B]Performance Tuning Examples\\f[R] for a description of using\n-this option to keep the Java heap small by reducing the dynamic\n-footprint for embedded applications.\n-.RE\n-.TP\n-\\f[V]-XX:MaxMetaspaceSize=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum amount of native memory that can be allocated for class\n-metadata.\n-By default, the size isn\\[aq]t limited.\n-The amount of metadata for an application depends on the application\n-itself, other running applications, and the amount of memory available\n-on the system.\n-.RS\n-.PP\n-The following example shows how to set the maximum class metadata size\n-to 256 MB:\n-.RS\n-.PP\n-\\f[V]-XX:MaxMetaspaceSize=256m\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:MaxNewSize=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum size (in bytes) of the heap for the young generation\n-(nursery).\n-The default value is set ergonomically.\n-.TP\n-\\f[V]-XX:MaxRAM=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum amount of memory that the JVM may use for the Java heap\n-before applying ergonomics heuristics.\n-The default value is the maximum amount of available memory to the JVM\n-process or 128 GB, whichever is lower.\n-.RS\n-.PP\n-The maximum amount of available memory to the JVM process is the minimum\n-of the machine\\[aq]s physical memory and any constraints set by the\n-environment (e.g.\n-container).\n-.PP\n-Specifying this option disables automatic use of compressed oops if the\n-combined result of this and other options influencing the maximum amount\n-of memory is larger than the range of memory addressable by compressed\n-oops.\n-See \\f[V]-XX:UseCompressedOops\\f[R] for further information about\n-compressed oops.\n-.PP\n-The following example shows how to set the maximum amount of available\n-memory for sizing the Java heap to 2 GB:\n-.RS\n-.PP\n-\\f[V]-XX:MaxRAM=2G\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:MaxRAMPercentage=\\f[R]\\f[I]percent\\f[R]\n-Sets the maximum amount of memory that the JVM may use for the Java heap\n-before applying ergonomics heuristics as a percentage of the maximum\n-amount determined as described in the \\f[V]-XX:MaxRAM\\f[R] option.\n-The default value is 25 percent.\n-.RS\n-.PP\n-Specifying this option disables automatic use of compressed oops if the\n-combined result of this and other options influencing the maximum amount\n-of memory is larger than the range of memory addressable by compressed\n-oops.\n-See \\f[V]-XX:UseCompressedOops\\f[R] for further information about\n-compressed oops.\n-.PP\n-The following example shows how to set the percentage of the maximum\n-amount of memory used for the Java heap:\n-.RS\n-.PP\n-\\f[V]-XX:MaxRAMPercentage=75\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:MinRAMPercentage=\\f[R]\\f[I]percent\\f[R]\n-Sets the maximum amount of memory that the JVM may use for the Java heap\n-before applying ergonomics heuristics as a percentage of the maximum\n-amount determined as described in the \\f[V]-XX:MaxRAM\\f[R] option for\n-small heaps.\n-A small heap is a heap of approximately 125 MB.\n-The default value is 50 percent.\n-.RS\n-.PP\n-The following example shows how to set the percentage of the maximum\n-amount of memory used for the Java heap for small heaps:\n-.RS\n-.PP\n-\\f[V]-XX:MinRAMPercentage=75\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:MaxTenuringThreshold=\\f[R]\\f[I]threshold\\f[R]\n-Sets the maximum tenuring threshold for use in adaptive GC sizing.\n-The largest value is 15.\n-The default value is 15 for the parallel (throughput) collector.\n-.RS\n-.PP\n-The following example shows how to set the maximum tenuring threshold to\n-10:\n-.RS\n-.PP\n-\\f[V]-XX:MaxTenuringThreshold=10\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:MetaspaceSize=\\f[R]\\f[I]size\\f[R]\n-Sets the size of the allocated class metadata space that triggers a\n-garbage collection the first time it\\[aq]s exceeded.\n-This threshold for a garbage collection is increased or decreased\n-depending on the amount of metadata used.\n-The default size depends on the platform.\n-.TP\n-\\f[V]-XX:MinHeapFreeRatio=\\f[R]\\f[I]percent\\f[R]\n-Sets the minimum allowed percentage of free heap space (0 to 100) after\n-a GC event.\n-If free heap space falls below this value, then the heap is expanded.\n-By default, this value is set to 40%.\n-.RS\n-.PP\n-Minimize Java heap size by lowering the values of the parameters\n-\\f[V]MaxHeapFreeRatio\\f[R] (default value is 70%) and\n-\\f[V]MinHeapFreeRatio\\f[R] (default value is 40%) with the command-line\n-options \\f[V]-XX:MaxHeapFreeRatio\\f[R] and\n-\\f[V]-XX:MinHeapFreeRatio\\f[R].\n-Lowering \\f[V]MaxHeapFreeRatio\\f[R] to as low as 10% and\n-\\f[V]MinHeapFreeRatio\\f[R] to 5% has successfully reduced the heap size\n-without too much performance regression; however, results may vary\n-greatly depending on your application.\n-Try different values for these parameters until they\\[aq]re as low as\n-possible, yet still retain acceptable performance.\n-.RS\n-.PP\n-\\f[V]-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5\\f[R]\n-.RE\n-.PP\n-Customers trying to keep the heap small should also add the option\n-\\f[V]-XX:-ShrinkHeapInSteps\\f[R].\n-See \\f[B]Performance Tuning Examples\\f[R] for a description of using\n-this option to keep the Java heap small by reducing the dynamic\n-footprint for embedded applications.\n-.RE\n-.TP\n-\\f[V]-XX:MinHeapSize=\\f[R]\\f[I]size\\f[R]\n-Sets the minimum size (in bytes) of the memory allocation pool.\n-This value must be either 0, or a multiple of 1024 and greater than 1\n-MB.\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-The default value is selected at run time based on the system\n-configuration.\n-.RS\n-.PP\n-The following examples show how to set the minimum size of allocated\n-memory to 6 MB using various units:\n-.IP\n-.nf\n-\\f[CB]\n--XX:MinHeapSize=6291456\n--XX:MinHeapSize=6144k\n--XX:MinHeapSize=6m\n-\\f[R]\n-.fi\n-.PP\n-If you set this option to 0, then the minimum size is set to the same\n-value as the initial size.\n-.RE\n-.TP\n-\\f[V]-XX:NewRatio=\\f[R]\\f[I]ratio\\f[R]\n-Sets the ratio between young and old generation sizes.\n-By default, this option is set to 2.\n-The following example shows how to set the young-to-old ratio to 1:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:NewRatio=1\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:NewSize=\\f[R]\\f[I]size\\f[R]\n-Sets the initial size (in bytes) of the heap for the young generation\n-(nursery).\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-.RS\n-.PP\n-The young generation region of the heap is used for new objects.\n-GC is performed in this region more often than in other regions.\n-If the size for the young generation is too low, then a large number of\n-minor GCs are performed.\n-If the size is too high, then only full GCs are performed, which can\n-take a long time to complete.\n-It is recommended that you keep the size for the young generation\n-greater than 25% and less than 50% of the overall heap size.\n-.PP\n-The following examples show how to set the initial size of the young\n-generation to 256 MB using various units:\n-.IP\n-.nf\n-\\f[CB]\n--XX:NewSize=256m\n--XX:NewSize=262144k\n--XX:NewSize=268435456\n-\\f[R]\n-.fi\n-.PP\n-The \\f[V]-XX:NewSize\\f[R] option is equivalent to \\f[V]-Xmn\\f[R].\n-.RE\n-.TP\n-\\f[V]-XX:ParallelGCThreads=\\f[R]\\f[I]threads\\f[R]\n-Sets the number of the stop-the-world (STW) worker threads.\n-The default value depends on the number of CPUs available to the JVM and\n-the garbage collector selected.\n-.RS\n-.PP\n-For example, to set the number of threads for G1 GC to 2, specify the\n-following option:\n-.RS\n-.PP\n-\\f[V]-XX:ParallelGCThreads=2\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:+ParallelRefProcEnabled\\f[R]\n-Enables parallel reference processing.\n-By default, this option is disabled.\n-.TP\n-\\f[V]-XX:+PrintAdaptiveSizePolicy\\f[R]\n-Enables printing of information about adaptive-generation sizing.\n-By default, this option is disabled.\n-.TP\n-\\f[V]-XX:SoftRefLRUPolicyMSPerMB=\\f[R]\\f[I]time\\f[R]\n-Sets the amount of time (in milliseconds) a softly reachable object is\n-kept active on the heap after the last time it was referenced.\n-The default value is one second of lifetime per free megabyte in the\n-heap.\n-The \\f[V]-XX:SoftRefLRUPolicyMSPerMB\\f[R] option accepts integer values\n-representing milliseconds per one megabyte of the current heap size (for\n-Java HotSpot Client VM) or the maximum possible heap size (for Java\n-HotSpot Server VM).\n-This difference means that the Client VM tends to flush soft references\n-rather than grow the heap, whereas the Server VM tends to grow the heap\n-rather than flush soft references.\n-In the latter case, the value of the \\f[V]-Xmx\\f[R] option has a\n-significant effect on how quickly soft references are garbage collected.\n-.RS\n-.PP\n-The following example shows how to set the value to 2.5 seconds:\n-.PP\n-\\f[V]-XX:SoftRefLRUPolicyMSPerMB=2500\\f[R]\n-.RE\n-.TP\n-\\f[V]-XX:-ShrinkHeapInSteps\\f[R]\n-Incrementally reduces the Java heap to the target size, specified by the\n-option \\f[V]-XX:MaxHeapFreeRatio\\f[R].\n-This option is enabled by default.\n-If disabled, then it immediately reduces the Java heap to the target\n-size instead of requiring multiple garbage collection cycles.\n-Disable this option if you want to minimize the Java heap size.\n-You will likely encounter performance degradation when this option is\n-disabled.\n-.RS\n-.PP\n-See \\f[B]Performance Tuning Examples\\f[R] for a description of using the\n-\\f[V]MaxHeapFreeRatio\\f[R] option to keep the Java heap small by\n-reducing the dynamic footprint for embedded applications.\n-.RE\n-.TP\n-\\f[V]-XX:StringDeduplicationAgeThreshold=\\f[R]\\f[I]threshold\\f[R]\n-Identifies \\f[V]String\\f[R] objects reaching the specified age that are\n-considered candidates for deduplication.\n-An object\\[aq]s age is a measure of how many times it has survived\n-garbage collection.\n-This is sometimes referred to as tenuring.\n-.RS\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] \\f[V]String\\f[R] objects that are promoted to an old\n-heap region before this age has been reached are always considered\n-candidates for deduplication.\n-The default value for this option is \\f[V]3\\f[R].\n-See the \\f[V]-XX:+UseStringDeduplication\\f[R] option.\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:SurvivorRatio=\\f[R]\\f[I]ratio\\f[R]\n-Sets the ratio between eden space size and survivor space size.\n-By default, this option is set to 8.\n-The following example shows how to set the eden\/survivor space ratio to\n-4:\n-.RS\n-.RS\n-.PP\n-\\f[V]-XX:SurvivorRatio=4\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:TargetSurvivorRatio=\\f[R]\\f[I]percent\\f[R]\n-Sets the desired percentage of survivor space (0 to 100) used after\n-young garbage collection.\n-By default, this option is set to 50%.\n-.RS\n-.PP\n-The following example shows how to set the target survivor space ratio\n-to 30%:\n-.RS\n-.PP\n-\\f[V]-XX:TargetSurvivorRatio=30\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:TLABSize=\\f[R]\\f[I]size\\f[R]\n-Sets the initial size (in bytes) of a thread-local allocation buffer\n-(TLAB).\n-Append the letter \\f[V]k\\f[R] or \\f[V]K\\f[R] to indicate kilobytes,\n-\\f[V]m\\f[R] or \\f[V]M\\f[R] to indicate megabytes, or \\f[V]g\\f[R] or\n-\\f[V]G\\f[R] to indicate gigabytes.\n-If this option is set to 0, then the JVM selects the initial size\n-automatically.\n-.RS\n-.PP\n-The following example shows how to set the initial TLAB size to 512 KB:\n-.RS\n-.PP\n-\\f[V]-XX:TLABSize=512k\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-XX:+UseAdaptiveSizePolicy\\f[R]\n-Enables the use of adaptive generation sizing.\n-This option is enabled by default.\n-To disable adaptive generation sizing, specify\n-\\f[V]-XX:-UseAdaptiveSizePolicy\\f[R] and set the size of the memory\n-allocation pool explicitly.\n-See the \\f[V]-XX:SurvivorRatio\\f[R] option.\n-.TP\n-\\f[V]-XX:+UseG1GC\\f[R]\n-Enables the use of the garbage-first (G1) garbage collector.\n-It\\[aq]s a server-style garbage collector, targeted for multiprocessor\n-machines with a large amount of RAM.\n-This option meets GC pause time goals with high probability, while\n-maintaining good throughput.\n-The G1 collector is recommended for applications requiring large heaps\n-(sizes of around 6 GB or larger) with limited GC latency requirements (a\n-stable and predictable pause time below 0.5 seconds).\n-By default, this option is enabled and G1 is used as the default garbage\n-collector.\n-.TP\n-\\f[V]-XX:+UseGCOverheadLimit\\f[R]\n-Enables the use of a policy that limits the proportion of time spent by\n-the JVM on GC before an \\f[V]OutOfMemoryError\\f[R] exception is thrown.\n-This option is enabled, by default, and the parallel GC will throw an\n-\\f[V]OutOfMemoryError\\f[R] if more than 98% of the total time is spent\n-on garbage collection and less than 2% of the heap is recovered.\n-When the heap is small, this feature can be used to prevent applications\n-from running for long periods of time with little or no progress.\n-To disable this option, specify the option\n-\\f[V]-XX:-UseGCOverheadLimit\\f[R].\n-.TP\n-\\f[V]-XX:+UseNUMA\\f[R]\n-Enables performance optimization of an application on a machine with\n-nonuniform memory architecture (NUMA) by increasing the\n-application\\[aq]s use of lower latency memory.\n-By default, this option is disabled and no optimization for NUMA is\n-made.\n-The option is available only when the parallel garbage collector is used\n-(\\f[V]-XX:+UseParallelGC\\f[R]).\n-.TP\n-\\f[V]-XX:+UseParallelGC\\f[R]\n-Enables the use of the parallel scavenge garbage collector (also known\n-as the throughput collector) to improve the performance of your\n-application by leveraging multiple processors.\n-.RS\n-.PP\n-By default, this option is disabled and the default collector is used.\n-.RE\n-.TP\n-\\f[V]-XX:+UseSerialGC\\f[R]\n-Enables the use of the serial garbage collector.\n-This is generally the best choice for small and simple applications that\n-don\\[aq]t require any special functionality from garbage collection.\n-By default, this option is disabled and the default collector is used.\n-.TP\n-\\f[V]-XX:+UseStringDeduplication\\f[R]\n-Enables string deduplication.\n-By default, this option is disabled.\n-To use this option, you must enable the garbage-first (G1) garbage\n-collector.\n-.RS\n-.PP\n-String deduplication reduces the memory footprint of \\f[V]String\\f[R]\n-objects on the Java heap by taking advantage of the fact that many\n-\\f[V]String\\f[R] objects are identical.\n-Instead of each \\f[V]String\\f[R] object pointing to its own character\n-array, identical \\f[V]String\\f[R] objects can point to and share the\n-same character array.\n-.RE\n-.TP\n-\\f[V]-XX:+UseTLAB\\f[R]\n-Enables the use of thread-local allocation blocks (TLABs) in the young\n-generation space.\n-This option is enabled by default.\n-To disable the use of TLABs, specify the option \\f[V]-XX:-UseTLAB\\f[R].\n-.TP\n-\\f[V]-XX:+UseZGC\\f[R]\n-Enables the use of the Z garbage collector (ZGC).\n-This is a low latency garbage collector, providing max pause times of a\n-few milliseconds, at some throughput cost.\n-Pause times are independent of what heap size is used.\n-Supports heap sizes from 8MB to 16TB.\n-.TP\n-\\f[V]-XX:ZAllocationSpikeTolerance=\\f[R]\\f[I]factor\\f[R]\n-Sets the allocation spike tolerance for ZGC.\n-By default, this option is set to 2.0.\n-This factor describes the level of allocation spikes to expect.\n-For example, using a factor of 3.0 means the current allocation rate can\n-be expected to triple at any time.\n-.TP\n-\\f[V]-XX:ZCollectionInterval=\\f[R]\\f[I]seconds\\f[R]\n-Sets the maximum interval (in seconds) between two GC cycles when using\n-ZGC.\n-By default, this option is set to 0 (disabled).\n-.TP\n-\\f[V]-XX:ZFragmentationLimit=\\f[R]\\f[I]percent\\f[R]\n-Sets the maximum acceptable heap fragmentation (in percent) for ZGC.\n-By default, this option is set to 25.\n-Using a lower value will cause the heap to be compacted more\n-aggressively, to reclaim more memory at the cost of using more CPU time.\n-.TP\n-\\f[V]-XX:+ZProactive\\f[R]\n-Enables proactive GC cycles when using ZGC.\n-By default, this option is enabled.\n-ZGC will start a proactive GC cycle if doing so is expected to have\n-minimal impact on the running application.\n-This is useful if the application is mostly idle or allocates very few\n-objects, but you still want to keep the heap size down and allow\n-reference processing to happen even when there are a lot of free space\n-on the heap.\n-.TP\n-\\f[V]-XX:+ZUncommit\\f[R]\n-Enables uncommitting of unused heap memory when using ZGC.\n-By default, this option is enabled.\n-Uncommitting unused heap memory will lower the memory footprint of the\n-JVM, and make that memory available for other processes to use.\n-.TP\n-\\f[V]-XX:ZUncommitDelay=\\f[R]\\f[I]seconds\\f[R]\n-Sets the amount of time (in seconds) that heap memory must have been\n-unused before being uncommitted.\n-By default, this option is set to 300 (5 minutes).\n-Committing and uncommitting memory are relatively expensive operations.\n-Using a lower value will cause heap memory to be uncommitted earlier, at\n-the risk of soon having to commit it again.\n-.SH DEPRECATED JAVA OPTIONS\n-.PP\n-These \\f[V]java\\f[R] options are deprecated and might be removed in a\n-future JDK release.\n-They\\[aq]re still accepted and acted upon, but a warning is issued when\n-they\\[aq]re used.\n-.TP\n-\\f[V]-Xloggc:\\f[R]\\f[I]filename\\f[R]\n-Sets the file to which verbose GC events information should be\n-redirected for logging.\n-The \\f[V]-Xloggc\\f[R] option overrides \\f[V]-verbose:gc\\f[R] if both are\n-given with the same java command.\n-\\f[V]-Xloggc:\\f[R]\\f[I]filename\\f[R] is replaced by\n-\\f[V]-Xlog:gc:\\f[R]\\f[I]filename\\f[R].\n-See Enable Logging with the JVM Unified Logging Framework.\n-.RS\n-.PP\n-Example:\n-.PP\n-\\f[V]-Xlog:gc:garbage-collection.log\\f[R]\n-.RE\n-.TP\n-\\f[V]-XX:+FlightRecorder\\f[R]\n-Enables the use of Java Flight Recorder (JFR) during the runtime of the\n-application.\n-Since JDK 8u40 this option has not been required to use JFR.\n-.SH OBSOLETE JAVA OPTIONS\n-.PP\n-These \\f[V]java\\f[R] options are still accepted but ignored, and a\n-warning is issued when they\\[aq]re used.\n-.TP\n-\\f[V]--illegal-access=\\f[R]\\f[I]parameter\\f[R]\n-Controlled \\f[I]relaxed strong encapsulation\\f[R], as defined in\n-\\f[B]JEP 261\\f[R]\n-[https:\/\/openjdk.org\/jeps\/261#Relaxed-strong-encapsulation].\n-This option was deprecated in JDK 16 by \\f[B]JEP 396\\f[R]\n-[https:\/\/openjdk.org\/jeps\/396] and made obsolete in JDK 17 by \\f[B]JEP\n-403\\f[R] [https:\/\/openjdk.org\/jeps\/403].\n-.TP\n-\\f[V]-XX:RTMAbortRatio=\\f[R]\\f[I]abort_ratio\\f[R]\n-Specifies the RTM abort ratio is specified as a percentage (%) of all\n-executed RTM transactions.\n-If a number of aborted transactions becomes greater than this ratio,\n-then the compiled code is deoptimized.\n-This ratio is used when the \\f[V]-XX:+UseRTMDeopt\\f[R] option is\n-enabled.\n-The default value of this option is 50.\n-This means that the compiled code is deoptimized if 50% of all\n-transactions are aborted.\n-.TP\n-\\f[V]-XX:RTMRetryCount=\\f[R]\\f[I]number_of_retries\\f[R]\n-Specifies the number of times that the RTM locking code is retried, when\n-it is aborted or busy, before falling back to the normal locking\n-mechanism.\n-The default value for this option is 5.\n-The \\f[V]-XX:UseRTMLocking\\f[R] option must be enabled.\n-.TP\n-\\f[V]-XX:+UseRTMDeopt\\f[R]\n-Autotunes RTM locking depending on the abort ratio.\n-This ratio is specified by the \\f[V]-XX:RTMAbortRatio\\f[R] option.\n-If the number of aborted transactions exceeds the abort ratio, then the\n-method containing the lock is deoptimized and recompiled with all locks\n-as normal locks.\n-This option is disabled by default.\n-The \\f[V]-XX:+UseRTMLocking\\f[R] option must be enabled.\n-.TP\n-\\f[V]-XX:+UseRTMLocking\\f[R]\n-Generates Restricted Transactional Memory (RTM) locking code for all\n-inflated locks, with the normal locking mechanism as the fallback\n-handler.\n-This option is disabled by default.\n-Options related to RTM are available only on x86 CPUs that support\n-Transactional Synchronization Extensions (TSX).\n-.RS\n-.PP\n-RTM is part of Intel\\[aq]s TSX, which is an x86 instruction set\n-extension and facilitates the creation of multithreaded applications.\n-RTM introduces the new instructions \\f[V]XBEGIN\\f[R], \\f[V]XABORT\\f[R],\n-\\f[V]XEND\\f[R], and \\f[V]XTEST\\f[R].\n-The \\f[V]XBEGIN\\f[R] and \\f[V]XEND\\f[R] instructions enclose a set of\n-instructions to run as a transaction.\n-If no conflict is found when running the transaction, then the memory\n-and register modifications are committed together at the \\f[V]XEND\\f[R]\n-instruction.\n-The \\f[V]XABORT\\f[R] instruction can be used to explicitly abort a\n-transaction and the \\f[V]XTEST\\f[R] instruction checks if a set of\n-instructions is being run in a transaction.\n-.PP\n-A lock on a transaction is inflated when another thread tries to access\n-the same transaction, thereby blocking the thread that didn\\[aq]t\n-originally request access to the transaction.\n-RTM requires that a fallback set of operations be specified in case a\n-transaction aborts or fails.\n-An RTM lock is a lock that has been delegated to the TSX\\[aq]s system.\n-.PP\n-RTM improves performance for highly contended locks with low conflict in\n-a critical region (which is code that must not be accessed by more than\n-one thread concurrently).\n-RTM also improves the performance of coarse-grain locking, which\n-typically doesn\\[aq]t perform well in multithreaded applications.\n-(Coarse-grain locking is the strategy of holding locks for long periods\n-to minimize the overhead of taking and releasing locks, while\n-fine-grained locking is the strategy of trying to achieve maximum\n-parallelism by locking only when necessary and unlocking as soon as\n-possible.)\n-Also, for lightly contended locks that are used by different threads,\n-RTM can reduce false cache line sharing, also known as cache line\n-ping-pong.\n-This occurs when multiple threads from different processors are\n-accessing different resources, but the resources share the same cache\n-line.\n-As a result, the processors repeatedly invalidate the cache lines of\n-other processors, which forces them to read from main memory instead of\n-their cache.\n-.RE\n-.SH REMOVED JAVA OPTIONS\n-.PP\n-These \\f[V]java\\f[R] options have been removed in JDK 24 and using them\n-results in an error of:\n-.RS\n-.PP\n-\\f[V]Unrecognized VM option\\f[R] \\f[I]option-name\\f[R]\n-.RE\n-.TP\n-\\f[V]-XX:InitialRAMFraction=\\f[R]\\f[I]ratio\\f[R]\n-Sets the initial amount of memory that the JVM may use for the Java heap\n-before applying ergonomics heuristics as a ratio of the maximum amount\n-determined as described in the \\f[V]-XX:MaxRAM\\f[R] option.\n-The default value is 64.\n-.RS\n-.PP\n-Use the option \\f[V]-XX:InitialRAMPercentage\\f[R] instead.\n-.RE\n-.TP\n-\\f[V]-XX:MaxRAMFraction=\\f[R]\\f[I]ratio\\f[R]\n-Sets the maximum amount of memory that the JVM may use for the Java heap\n-before applying ergonomics heuristics as a fraction of the maximum\n-amount determined as described in the \\f[V]-XX:MaxRAM\\f[R] option.\n-The default value is 4.\n-.RS\n-.PP\n-Specifying this option disables automatic use of compressed oops if the\n-combined result of this and other options influencing the maximum amount\n-of memory is larger than the range of memory addressable by compressed\n-oops.\n-See \\f[V]-XX:UseCompressedOops\\f[R] for further information about\n-compressed oops.\n-.PP\n-Use the option \\f[V]-XX:MaxRAMPercentage\\f[R] instead.\n-.RE\n-.TP\n-\\f[V]-XX:MinRAMFraction=\\f[R]\\f[I]ratio\\f[R]\n-Sets the maximum amount of memory that the JVM may use for the Java heap\n-before applying ergonomics heuristics as a fraction of the maximum\n-amount determined as described in the \\f[V]-XX:MaxRAM\\f[R] option for\n-small heaps.\n-A small heap is a heap of approximately 125 MB.\n-The default value is 2.\n-.RS\n-.PP\n-Use the option \\f[V]-XX:MinRAMPercentage\\f[R] instead.\n-.RE\n-.TP\n-\\f[V]-XX:+ScavengeBeforeFullGC\\f[R]\n-Enables GC of the young generation before each full GC.\n-This option is enabled by default.\n-It is recommended that you \\f[I]don\\[aq]t\\f[R] disable it, because\n-scavenging the young generation before a full GC can reduce the number\n-of objects reachable from the old generation space into the young\n-generation space.\n-To disable GC of the young generation before each full GC, specify the\n-option \\f[V]-XX:-ScavengeBeforeFullGC\\f[R].\n-.TP\n-\\f[V]-Xfuture\\f[R]\n-Enables strict class-file format checks that enforce close conformance\n-to the class-file format specification.\n-Developers should use this flag when developing new code.\n-Stricter checks may become the default in future releases.\n-.RS\n-.PP\n-Use the option \\f[V]-Xverify:all\\f[R] instead.\n-.RE\n-.PP\n-For the lists and descriptions of options removed in previous releases\n-see the \\f[I]Removed Java Options\\f[R] section in:\n-.IP \\[bu] 2\n-\\f[B]The \\f[VB]java\\f[B] Command, Release 23\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/23\/docs\/specs\/man\/java.html]\n-.IP \\[bu] 2\n-\\f[B]The \\f[VB]java\\f[B] Command, Release 22\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/specs\/man\/java.html]\n-.IP \\[bu] 2\n-\\f[B]The \\f[VB]java\\f[B] Command, Release 21\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/21\/docs\/specs\/man\/java.html]\n-.IP \\[bu] 2\n-\\f[B]The \\f[VB]java\\f[B] Command, Release 20\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/20\/docs\/specs\/man\/java.html]\n-.IP \\[bu] 2\n-\\f[B]The \\f[VB]java\\f[B] Command, Release 19\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/19\/docs\/specs\/man\/java.html]\n-.IP \\[bu] 2\n-\\f[B]The \\f[VB]java\\f[B] Command, Release 18\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/18\/docs\/specs\/man\/java.html]\n-.IP \\[bu] 2\n-\\f[B]The \\f[VB]java\\f[B] Command, Release 17\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/specs\/man\/java.html]\n-.IP \\[bu] 2\n-\\f[B]The \\f[VB]java\\f[B] Command, Release 16\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/16\/docs\/specs\/man\/java.html]\n-.IP \\[bu] 2\n-\\f[B]The \\f[VB]java\\f[B] Command, Release 15\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/15\/docs\/specs\/man\/java.html]\n-.IP \\[bu] 2\n-\\f[B]The \\f[VB]java\\f[B] Command, Release 14\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/14\/docs\/specs\/man\/java.html]\n-.IP \\[bu] 2\n-\\f[B]The \\f[VB]java\\f[B] Command, Release 13\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/13\/docs\/specs\/man\/java.html]\n-.IP \\[bu] 2\n-\\f[B]Java Platform, Standard Edition Tools Reference, Release 12\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/12\/tools\/java.html#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE]\n-.IP \\[bu] 2\n-\\f[B]Java Platform, Standard Edition Tools Reference, Release 11\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/11\/tools\/java.html#GUID-741FC470-AA3E-494A-8D2B-1B1FE4A990D1]\n-.IP \\[bu] 2\n-\\f[B]Java Platform, Standard Edition Tools Reference, Release 10\\f[R]\n-[https:\/\/docs.oracle.com\/javase\/10\/tools\/java.htm#JSWOR624]\n-.IP \\[bu] 2\n-\\f[B]Java Platform, Standard Edition Tools Reference, Release 9\\f[R]\n-[https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624]\n-.IP \\[bu] 2\n-\\f[B]Java Platform, Standard Edition Tools Reference, Release 8 for\n-Oracle JDK on Windows\\f[R]\n-[https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/windows\/java.html#BGBCIEFC]\n-.IP \\[bu] 2\n-\\f[B]Java Platform, Standard Edition Tools Reference, Release 8 for\n-Oracle JDK on Solaris, Linux, and macOS\\f[R]\n-[https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html#BGBCIEFC]\n-.SH JAVA COMMAND-LINE ARGUMENT FILES\n-.PP\n-You can shorten or simplify the \\f[V]java\\f[R] command by using\n-\\f[V]\\[at]\\f[R] argument files to specify one or more text files that\n-contain arguments, such as options and class names, which are passed to\n-the \\f[V]java\\f[R] command.\n-This let\\[aq]s you to create \\f[V]java\\f[R] commands of any length on\n-any operating system.\n-.PP\n-In the command line, use the at sign (\\f[V]\\[at]\\f[R]) prefix to\n-identify an argument file that contains \\f[V]java\\f[R] options and class\n-names.\n-When the \\f[V]java\\f[R] command encounters a file beginning with the at\n-sign (\\f[V]\\[at]\\f[R]), it expands the contents of that file into an\n-argument list just as they would be specified on the command line.\n-.PP\n-The \\f[V]java\\f[R] launcher expands the argument file contents until it\n-encounters the \\f[V]--disable-\\[at]files\\f[R] option.\n-You can use the \\f[V]--disable-\\[at]files\\f[R] option anywhere on the\n-command line, including in an argument file, to stop \\f[V]\\[at]\\f[R]\n-argument files expansion.\n-.PP\n-The following items describe the syntax of \\f[V]java\\f[R] argument\n-files:\n-.IP \\[bu] 2\n-The argument file must contain only ASCII characters or characters in\n-system default encoding that\\[aq]s ASCII friendly, such as UTF-8.\n-.IP \\[bu] 2\n-The argument file size must not exceed MAXINT (2,147,483,647) bytes.\n-.IP \\[bu] 2\n-The launcher doesn\\[aq]t expand wildcards that are present within an\n-argument file.\n-.IP \\[bu] 2\n-Use white space or new line characters to separate arguments included in\n-the file.\n-.IP \\[bu] 2\n-White space includes a white space character, \\f[V]\\[rs]t\\f[R],\n-\\f[V]\\[rs]n\\f[R], \\f[V]\\[rs]r\\f[R], and \\f[V]\\[rs]f\\f[R].\n-.RS 2\n-.PP\n-For example, it is possible to have a path with a space, such as\n-\\f[V]c:\\[rs]Program Files\\f[R] that can be specified as either\n-\\f[V]\\[dq]c:\\[rs]\\[rs]Program Files\\[dq]\\f[R] or, to avoid an escape,\n-\\f[V]c:\\[rs]Program\\[dq] \\[dq]Files\\f[R].\n-.RE\n-.IP \\[bu] 2\n-Any option that contains spaces, such as a path component, must be\n-within quotation marks using quotation (\\[aq]\\[dq]\\[aq]) characters in\n-its entirety.\n-.IP \\[bu] 2\n-A string within quotation marks may contain the characters\n-\\f[V]\\[rs]n\\f[R], \\f[V]\\[rs]r\\f[R], \\f[V]\\[rs]t\\f[R], and\n-\\f[V]\\[rs]f\\f[R].\n-They are converted to their respective ASCII codes.\n-.IP \\[bu] 2\n-If a file name contains embedded spaces, then put the whole file name in\n-double quotation marks.\n-.IP \\[bu] 2\n-File names in an argument file are relative to the current directory,\n-not to the location of the argument file.\n-.IP \\[bu] 2\n-Use the number sign \\f[V]#\\f[R] in the argument file to identify\n-comments.\n-All characters following the \\f[V]#\\f[R] are ignored until the end of\n-line.\n-.IP \\[bu] 2\n-Additional at sign \\f[V]\\[at]\\f[R] prefixes to \\f[V]\\[at]\\f[R] prefixed\n-options act as an escape, (the first \\f[V]\\[at]\\f[R] is removed and the\n-rest of the arguments are presented to the launcher literally).\n-.IP \\[bu] 2\n-Lines may be continued using the continuation character\n-(\\f[V]\\[rs]\\f[R]) at the end-of-line.\n-The two lines are concatenated with the leading white spaces trimmed.\n-To prevent trimming the leading white spaces, a continuation character\n-(\\f[V]\\[rs]\\f[R]) may be placed at the first column.\n-.IP \\[bu] 2\n-Because backslash (\\[rs]) is an escape character, a backslash character\n-must be escaped with another backslash character.\n-.IP \\[bu] 2\n-Partial quote is allowed and is closed by an end-of-file.\n-.IP \\[bu] 2\n-An open quote stops at end-of-line unless \\f[V]\\[rs]\\f[R] is the last\n-character, which then joins the next line by removing all leading white\n-space characters.\n-.IP \\[bu] 2\n-Wildcards (*) aren\\[aq]t allowed in these lists (such as specifying\n-\\f[V]*.java\\f[R]).\n-.IP \\[bu] 2\n-Use of the at sign (\\f[V]\\[at]\\f[R]) to recursively interpret files\n-isn\\[aq]t supported.\n-.SS Example of Open or Partial Quotes in an Argument File\n-.PP\n-In the argument file,\n-.IP\n-.nf\n-\\f[CB]\n--cp \\[dq]lib\/\n-cool\/\n-app\/\n-jars\n-\\f[R]\n-.fi\n-.PP\n-this is interpreted as:\n-.RS\n-.PP\n-\\f[V]-cp lib\/cool\/app\/jars\\f[R]\n-.RE\n-.SS Example of a Backslash Character Escaped with Another Backslash Character in an Argument File\n-.PP\n-To output the following:\n-.RS\n-.PP\n-\\f[V]-cp c:\\[rs]Program Files (x86)\\[rs]Java\\[rs]jre\\[rs]lib\\[rs]ext;c:\\[rs]Program Files\\[rs]Java\\[rs]jre9\\[rs]lib\\[rs]ext\\f[R]\n-.RE\n-.PP\n-The backslash character must be specified in the argument file as:\n-.RS\n-.PP\n-\\f[V]-cp \\[dq]c:\\[rs]\\[rs]Program Files (x86)\\[rs]\\[rs]Java\\[rs]\\[rs]jre\\[rs]\\[rs]lib\\[rs]\\[rs]ext;c:\\[rs]\\[rs]Program Files\\[rs]\\[rs]Java\\[rs]\\[rs]jre9\\[rs]\\[rs]lib\\[rs]\\[rs]ext\\[dq]\\f[R]\n-.RE\n-.SS Example of an EOL Escape Used to Force Concatenation of Lines in an Argument File\n-.PP\n-In the argument file,\n-.IP\n-.nf\n-\\f[CB]\n--cp \\[dq]\/lib\/cool app\/jars:\\[rs]\n-    \/lib\/another app\/jars\\[dq]\n-\\f[R]\n-.fi\n-.PP\n-This is interpreted as:\n-.RS\n-.PP\n-\\f[V]-cp \/lib\/cool app\/jars:\/lib\/another app\/jars\\f[R]\n-.RE\n-.SS Example of Line Continuation with Leading Spaces in an Argument File\n-.PP\n-In the argument file,\n-.IP\n-.nf\n-\\f[CB]\n--cp \\[dq]\/lib\/cool\\[rs]\n-\\[rs]app\/jars\\[dq]\n-\\f[R]\n-.fi\n-.PP\n-This is interpreted as:\n-.PP\n-\\f[V]-cp \/lib\/cool app\/jars\\f[R]\n-.SS Examples of Using Single Argument File\n-.PP\n-You can use a single argument file, such as \\f[V]myargumentfile\\f[R] in\n-the following example, to hold all required \\f[V]java\\f[R] arguments:\n-.RS\n-.PP\n-\\f[V]java \\[at]myargumentfile\\f[R]\n-.RE\n-.SS Examples of Using Argument Files with Paths\n-.PP\n-You can include relative paths in argument files; however, they\\[aq]re\n-relative to the current working directory and not to the paths of the\n-argument files themselves.\n-In the following example, \\f[V]path1\/options\\f[R] and\n-\\f[V]path2\/options\\f[R] represent argument files with different paths.\n-Any relative paths that they contain are relative to the current working\n-directory and not to the argument files:\n-.RS\n-.PP\n-\\f[V]java \\[at]path1\/options \\[at]path2\/classes\\f[R]\n-.RE\n-.SH CODE HEAP STATE ANALYTICS\n-.SS Overview\n-.PP\n-There are occasions when having insight into the current state of the\n-JVM code heap would be helpful to answer questions such as:\n-.IP \\[bu] 2\n-Why was the JIT turned off and then on again and again?\n-.IP \\[bu] 2\n-Where has all the code heap space gone?\n-.IP \\[bu] 2\n-Why is the method sweeper not working effectively?\n-.PP\n-To provide this insight, a code heap state analytics feature has been\n-implemented that enables on-the-fly analysis of the code heap.\n-The analytics process is divided into two parts.\n-The first part examines the entire code heap and aggregates all\n-information that is believed to be useful or important.\n-The second part consists of several independent steps that print the\n-collected information with an emphasis on different aspects of the data.\n-Data collection and printing are done on an \\[dq]on request\\[dq] basis.\n-.SS Syntax\n-.PP\n-Requests for real-time, on-the-fly analysis can be issued with the\n-following command:\n-.RS\n-.PP\n-\\f[V]jcmd\\f[R] \\f[I]pid\\f[R] \\f[V]Compiler.CodeHeap_Analytics\\f[R]\n-[\\f[I]function\\f[R]] [\\f[I]granularity\\f[R]]\n-.RE\n-.PP\n-If you are only interested in how the code heap looks like after running\n-a sample workload, you can use the command line option:\n-.RS\n-.PP\n-\\f[V]-Xlog:codecache=Trace\\f[R]\n-.RE\n-.PP\n-To see the code heap state when a \\[dq]CodeCache full\\[dq] condition\n-exists, start the VM with the command line option:\n-.RS\n-.PP\n-\\f[V]-Xlog:codecache=Debug\\f[R]\n-.RE\n-.PP\n-See \\f[B]CodeHeap State Analytics (OpenJDK)\\f[R]\n-[https:\/\/bugs.openjdk.org\/secure\/attachment\/75649\/JVM_CodeHeap_StateAnalytics_V2.pdf]\n-for a detailed description of the code heap state analytics feature, the\n-supported functions, and the granularity options.\n-.SH ENABLE LOGGING WITH THE JVM UNIFIED LOGGING FRAMEWORK\n-.PP\n-You use the \\f[V]-Xlog\\f[R] option to configure or enable logging with\n-the Java Virtual Machine (JVM) unified logging framework.\n-.SS Synopsis\n-.RS\n-.PP\n-\\f[V]-Xlog\\f[R][\\f[V]:\\f[R][\\f[I]what\\f[R]][\\f[V]:\\f[R][\\f[I]output\\f[R]][\\f[V]:\\f[R][\\f[I]decorators\\f[R]][\\f[V]:\\f[R]\\f[I]output-options\\f[R][\\f[V],\\f[R]...]]]]]\n-.PP\n-\\f[V]-Xlog:\\f[R]\\f[I]directive\\f[R]\n-.RE\n-.TP\n-\\f[I]what\\f[R]\n-Specifies a combination of tags and levels of the form\n-\\f[I]tag1\\f[R][\\f[V]+\\f[R]\\f[I]tag2\\f[R]...][\\f[V]*\\f[R]][\\f[V]=\\f[R]\\f[I]level\\f[R]][\\f[V],\\f[R]...].\n-Unless the wildcard (\\f[V]*\\f[R]) is specified, only log messages tagged\n-with exactly the tags specified are matched.\n-See \\f[B]-Xlog Tags and Levels\\f[R].\n-.TP\n-\\f[I]output\\f[R]\n-Sets the type of output.\n-Omitting the \\f[I]output\\f[R] type defaults to \\f[V]stdout\\f[R].\n-See \\f[B]-Xlog Output\\f[R].\n-.TP\n-\\f[I]decorators\\f[R]\n-Configures the output to use a custom set of decorators.\n-Omitting \\f[I]decorators\\f[R] defaults to \\f[V]uptime\\f[R],\n-\\f[V]level\\f[R], and \\f[V]tags\\f[R].\n-See \\f[B]Decorations\\f[R].\n-.TP\n-\\f[I]output-options\\f[R]\n-Sets the \\f[V]-Xlog\\f[R] logging output options.\n-.TP\n-\\f[I]directive\\f[R]\n-A global option or subcommand: help, disable, async\n-.SS Description\n-.PP\n-The Java Virtual Machine (JVM) unified logging framework provides a\n-common logging system for all components of the JVM.\n-GC logging for the JVM has been changed to use the new logging\n-framework.\n-The mapping of old GC flags to the corresponding new Xlog configuration\n-is described in \\f[B]Convert GC Logging Flags to Xlog\\f[R].\n-In addition, runtime logging has also been changed to use the JVM\n-unified logging framework.\n-The mapping of legacy runtime logging flags to the corresponding new\n-Xlog configuration is described in \\f[B]Convert Runtime Logging Flags to\n-Xlog\\f[R].\n-.PP\n-The following provides quick reference to the \\f[V]-Xlog\\f[R] command\n-and syntax for options:\n-.TP\n-\\f[V]-Xlog\\f[R]\n-Enables JVM logging on an \\f[V]info\\f[R] level.\n-.TP\n-\\f[V]-Xlog:help\\f[R]\n-Prints \\f[V]-Xlog\\f[R] usage syntax and available tags, levels, and\n-decorators along with example command lines with explanations.\n-.TP\n-\\f[V]-Xlog:disable\\f[R]\n-Turns off all logging and clears all configuration of the logging\n-framework including the default configuration for warnings and errors.\n-.TP\n-\\f[V]-Xlog\\f[R][\\f[V]:\\f[R]\\f[I]option\\f[R]]\n-Applies multiple arguments in the order that they appear on the command\n-line.\n-Multiple \\f[V]-Xlog\\f[R] arguments for the same output override each\n-other in their given order.\n-.RS\n-.PP\n-The \\f[I]option\\f[R] is set as:\n-.RS\n-.PP\n-[\\f[I]tag-selection\\f[R]][\\f[V]:\\f[R][\\f[I]output\\f[R]][\\f[V]:\\f[R][\\f[I]decorators\\f[R]][\\f[V]:\\f[R]\\f[I]output-options\\f[R]]]]\n-.RE\n-.PP\n-Omitting the \\f[I]tag-selection\\f[R] defaults to a tag-set of\n-\\f[V]all\\f[R] and a level of \\f[V]info\\f[R].\n-.RS\n-.PP\n-\\f[I]tag\\f[R][\\f[V]+\\f[R]...]\n-\\f[V]all\\f[R]\n-.RE\n-.PP\n-The \\f[V]all\\f[R] tag is a meta tag consisting of all tag-sets\n-available.\n-The asterisk \\f[V]*\\f[R] in a tag set definition denotes a wildcard tag\n-match.\n-Matching with a wildcard selects all tag sets that contain \\f[I]at\n-least\\f[R] the specified tags.\n-Without the wildcard, only exact matches of the specified tag sets are\n-selected.\n-.PP\n-\\f[I]output-options\\f[R] is\n-.RS\n-.PP\n-\\f[V]filecount=\\f[R]\\f[I]file-count\\f[R] \\f[V]filesize=\\f[R]\\f[I]file\n-size with optional K, M or G suffix\\f[R]\n-\\f[V]foldmultilines=\\f[R]\\f[I]<true|false>\\f[R]\n-.RE\n-.PP\n-When \\f[V]foldmultilines\\f[R] is true, a log event that consists of\n-multiple lines will be folded into a single line by replacing newline\n-characters with the sequence \\f[V]\\[aq]\\[rs]\\[aq]\\f[R] and\n-\\f[V]\\[aq]n\\[aq]\\f[R] in the output.\n-Existing single backslash characters will also be replaced with a\n-sequence of two backslashes so that the conversion can be reversed.\n-This option is safe to use with UTF-8 character encodings, but other\n-encodings may not work.\n-For example, it may incorrectly convert multi-byte sequences in Shift\n-JIS and BIG5.\n-.RE\n-.SS Default Configuration\n-.PP\n-When the \\f[V]-Xlog\\f[R] option and nothing else is specified on the\n-command line, the default configuration is used.\n-The default configuration logs all messages with a level that matches\n-either warning or error regardless of what tags the message is\n-associated with.\n-The default configuration is equivalent to entering the following on the\n-command line:\n-.RS\n-.PP\n-\\f[V]-Xlog:all=warning:stdout:uptime,level,tags\\f[R]\n-.RE\n-.SS Controlling Logging at Runtime\n-.PP\n-Logging can also be controlled at run time through Diagnostic Commands\n-(with the \\f[B]jcmd\\f[R] utility).\n-Everything that can be specified on the command line can also be\n-specified dynamically with the \\f[V]VM.log\\f[R] command.\n-As the diagnostic commands are automatically exposed as MBeans, you can\n-use JMX to change logging configuration at run time.\n-.SS -Xlog Tags and Levels\n-.PP\n-Each log message has a level and a tag set associated with it.\n-The level of the message corresponds to its details, and the tag set\n-corresponds to what the message contains or which JVM component it\n-involves (such as, \\f[V]gc\\f[R], \\f[V]jit\\f[R], or \\f[V]os\\f[R]).\n-Mapping GC flags to the Xlog configuration is described in \\f[B]Convert\n-GC Logging Flags to Xlog\\f[R].\n-Mapping legacy runtime logging flags to the corresponding Xlog\n-configuration is described in \\f[B]Convert Runtime Logging Flags to\n-Xlog\\f[R].\n-.PP\n-\\f[B]Available log levels:\\f[R]\n-.IP \\[bu] 2\n-\\f[V]off\\f[R]\n-.IP \\[bu] 2\n-\\f[V]trace\\f[R]\n-.IP \\[bu] 2\n-\\f[V]debug\\f[R]\n-.IP \\[bu] 2\n-\\f[V]info\\f[R]\n-.IP \\[bu] 2\n-\\f[V]warning\\f[R]\n-.IP \\[bu] 2\n-\\f[V]error\\f[R]\n-.PP\n-\\f[B]Available log tags:\\f[R]\n-.PP\n-There are literally dozens of log tags, which in the right combinations,\n-will enable a range of logging output.\n-The full set of available log tags can be seen using\n-\\f[V]-Xlog:help\\f[R].\n-Specifying \\f[V]all\\f[R] instead of a tag combination matches all tag\n-combinations.\n-.SS -Xlog Output\n-.PP\n-The \\f[V]-Xlog\\f[R] option supports the following types of outputs:\n-.IP \\[bu] 2\n-\\f[V]stdout\\f[R] --- Sends output to stdout\n-.IP \\[bu] 2\n-\\f[V]stderr\\f[R] --- Sends output to stderr\n-.IP \\[bu] 2\n-\\f[V]file=\\f[R]\\f[I]filename\\f[R] --- Sends output to text file(s).\n-.PP\n-When using \\f[V]file=\\f[R]\\f[I]filename\\f[R], specifying \\f[V]%p\\f[R],\n-\\f[V]%t\\f[R] and\/or \\f[V]%hn\\f[R] in the file name expands to the\n-JVM\\[aq]s PID, startup timestamp and host name, respectively.\n-You can also configure text files to handle file rotation based on file\n-size and a number of files to rotate.\n-For example, to rotate the log file every 10 MB and keep 5 files in\n-rotation, specify the options \\f[V]filesize=10M, filecount=5\\f[R].\n-The target size of the files isn\\[aq]t guaranteed to be exact, it\\[aq]s\n-just an approximate value.\n-Files are rotated by default with up to 5 rotated files of target size\n-20 MB, unless configured otherwise.\n-Specifying \\f[V]filecount=0\\f[R] means that the log file shouldn\\[aq]t\n-be rotated.\n-There\\[aq]s a possibility of the pre-existing log file getting\n-overwritten.\n-.SS -Xlog Output Mode\n-.PP\n-By default logging messages are output synchronously - each log message\n-is written to the designated output when the logging call is made.\n-But you can instead use asynchronous logging mode by specifying:\n-.TP\n-\\f[V]-Xlog:async\\f[R]\n-Write all logging asynchronously.\n-.PP\n-In asynchronous logging mode, log sites enqueue all logging messages to\n-an intermediate buffer and a standalone thread is responsible for\n-flushing them to the corresponding outputs.\n-The intermediate buffer is bounded and on buffer exhaustion the\n-enqueuing message is discarded.\n-Log entry write operations are guaranteed non-blocking.\n-.PP\n-The option \\f[V]-XX:AsyncLogBufferSize=N\\f[R] specifies the memory\n-budget in bytes for the intermediate buffer.\n-The default value should be big enough to cater for most cases.\n-Users can provide a custom value to trade memory overhead for log\n-accuracy if they need to.\n-.SS Decorations\n-.PP\n-Logging messages are decorated with information about the message.\n-You can configure each output to use a custom set of decorators.\n-The order of the output is always the same as listed in the table.\n-You can configure the decorations to be used at run time.\n-Decorations are prepended to the log message.\n-For example:\n-.IP\n-.nf\n-\\f[CB]\n-[6.567s][info][gc,old] Old collection complete\n-\\f[R]\n-.fi\n-.PP\n-Omitting \\f[V]decorators\\f[R] defaults to \\f[V]uptime\\f[R],\n-\\f[V]level\\f[R], and \\f[V]tags\\f[R].\n-The \\f[V]none\\f[R] decorator is special and is used to turn off all\n-decorations.\n-.PP\n-\\f[V]time\\f[R] (\\f[V]t\\f[R]), \\f[V]utctime\\f[R] (\\f[V]utc\\f[R]),\n-\\f[V]uptime\\f[R] (\\f[V]u\\f[R]), \\f[V]timemillis\\f[R] (\\f[V]tm\\f[R]),\n-\\f[V]uptimemillis\\f[R] (\\f[V]um\\f[R]), \\f[V]timenanos\\f[R]\n-(\\f[V]tn\\f[R]), \\f[V]uptimenanos\\f[R] (\\f[V]un\\f[R]), \\f[V]hostname\\f[R]\n-(\\f[V]hn\\f[R]), \\f[V]pid\\f[R] (\\f[V]p\\f[R]), \\f[V]tid\\f[R]\n-(\\f[V]ti\\f[R]), \\f[V]level\\f[R] (\\f[V]l\\f[R]), \\f[V]tags\\f[R]\n-(\\f[V]tg\\f[R]) decorators can also be specified as \\f[V]none\\f[R] for no\n-decoration.\n-.PP\n-Logging Messages Decorations\n-.TS\n-tab(@);\n-lw(14.9n) lw(55.1n).\n-T{\n-Decorations\n-T}@T{\n-Description\n-T}\n-_\n-T{\n-\\f[V]time\\f[R] or \\f[V]t\\f[R]\n-T}@T{\n-Current time and date in ISO-8601 format.\n-T}\n-T{\n-\\f[V]utctime\\f[R] or \\f[V]utc\\f[R]\n-T}@T{\n-Universal Time Coordinated or Coordinated Universal Time.\n-T}\n-T{\n-\\f[V]uptime\\f[R] or \\f[V]u\\f[R]\n-T}@T{\n-Time since the start of the JVM in seconds and milliseconds.\n-For example, 6.567s.\n-T}\n-T{\n-\\f[V]timemillis\\f[R] or \\f[V]tm\\f[R]\n-T}@T{\n-The same value as generated by \\f[V]System.currentTimeMillis()\\f[R]\n-T}\n-T{\n-\\f[V]uptimemillis\\f[R] or \\f[V]um\\f[R]\n-T}@T{\n-Milliseconds since the JVM started.\n-T}\n-T{\n-\\f[V]timenanos\\f[R] or \\f[V]tn\\f[R]\n-T}@T{\n-The same value generated by \\f[V]System.nanoTime()\\f[R].\n-T}\n-T{\n-\\f[V]uptimenanos\\f[R] or \\f[V]un\\f[R]\n-T}@T{\n-Nanoseconds since the JVM started.\n-T}\n-T{\n-\\f[V]hostname\\f[R] or \\f[V]hn\\f[R]\n-T}@T{\n-The host name.\n-T}\n-T{\n-\\f[V]pid\\f[R] or \\f[V]p\\f[R]\n-T}@T{\n-The process identifier.\n-T}\n-T{\n-\\f[V]tid\\f[R] or \\f[V]ti\\f[R]\n-T}@T{\n-The thread identifier.\n-T}\n-T{\n-\\f[V]level\\f[R] or \\f[V]l\\f[R]\n-T}@T{\n-The level associated with the log message.\n-T}\n-T{\n-\\f[V]tags\\f[R] or \\f[V]tg\\f[R]\n-T}@T{\n-The tag-set associated with the log message.\n-T}\n-.TE\n-.SS Convert GC Logging Flags to Xlog\n-.PP\n-Legacy GC Logging Flags to Xlog Configuration Mapping\n-.TS\n-tab(@);\n-lw(22.4n) lw(16.5n) lw(31.2n).\n-T{\n-Legacy Garbage Collection (GC) Flag\n-T}@T{\n-Xlog Configuration\n-T}@T{\n-Comment\n-T}\n-_\n-T{\n-\\f[V]G1PrintHeapRegions\\f[R]\n-T}@T{\n-\\f[V]-Xlog:gc+region=trace\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]GCLogFileSize\\f[R]\n-T}@T{\n-No configuration available\n-T}@T{\n-Log rotation is handled by the framework.\n-T}\n-T{\n-\\f[V]NumberOfGCLogFiles\\f[R]\n-T}@T{\n-Not Applicable\n-T}@T{\n-Log rotation is handled by the framework.\n-T}\n-T{\n-\\f[V]PrintAdaptiveSizePolicy\\f[R]\n-T}@T{\n-\\f[V]-Xlog:gc+ergo*=\\f[R]\\f[I]level\\f[R]\n-T}@T{\n-Use a \\f[I]level\\f[R] of \\f[V]debug\\f[R] for most of the information, or\n-a \\f[I]level\\f[R] of \\f[V]trace\\f[R] for all of what was logged for\n-\\f[V]PrintAdaptiveSizePolicy\\f[R].\n-T}\n-T{\n-\\f[V]PrintGC\\f[R]\n-T}@T{\n-\\f[V]-Xlog:gc\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]PrintGCApplicationConcurrentTime\\f[R]\n-T}@T{\n-\\f[V]-Xlog:safepoint\\f[R]\n-T}@T{\n-Note that \\f[V]PrintGCApplicationConcurrentTime\\f[R] and\n-\\f[V]PrintGCApplicationStoppedTime\\f[R] are logged on the same tag and\n-aren\\[aq]t separated in the new logging.\n-T}\n-T{\n-\\f[V]PrintGCApplicationStoppedTime\\f[R]\n-T}@T{\n-\\f[V]-Xlog:safepoint\\f[R]\n-T}@T{\n-Note that \\f[V]PrintGCApplicationConcurrentTime\\f[R] and\n-\\f[V]PrintGCApplicationStoppedTime\\f[R] are logged on the same tag and\n-not separated in the new logging.\n-T}\n-T{\n-\\f[V]PrintGCCause\\f[R]\n-T}@T{\n-Not Applicable\n-T}@T{\n-GC cause is now always logged.\n-T}\n-T{\n-\\f[V]PrintGCDateStamps\\f[R]\n-T}@T{\n-Not Applicable\n-T}@T{\n-Date stamps are logged by the framework.\n-T}\n-T{\n-\\f[V]PrintGCDetails\\f[R]\n-T}@T{\n-\\f[V]-Xlog:gc*\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]PrintGCID\\f[R]\n-T}@T{\n-Not Applicable\n-T}@T{\n-GC ID is now always logged.\n-T}\n-T{\n-\\f[V]PrintGCTaskTimeStamps\\f[R]\n-T}@T{\n-\\f[V]-Xlog:gc+task*=debug\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]PrintGCTimeStamps\\f[R]\n-T}@T{\n-Not Applicable\n-T}@T{\n-Time stamps are logged by the framework.\n-T}\n-T{\n-\\f[V]PrintHeapAtGC\\f[R]\n-T}@T{\n-\\f[V]-Xlog:gc+heap=trace\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]PrintReferenceGC\\f[R]\n-T}@T{\n-\\f[V]-Xlog:gc+ref*=debug\\f[R]\n-T}@T{\n-Note that in the old logging, \\f[V]PrintReferenceGC\\f[R] had an effect\n-only if \\f[V]PrintGCDetails\\f[R] was also enabled.\n-T}\n-T{\n-\\f[V]PrintStringDeduplicationStatistics\\f[R]\n-T}@T{\n-\\[ga]-Xlog:gc+stringdedup*=debug\n-T}@T{\n-\\[ga] Not Applicable\n-T}\n-T{\n-\\f[V]PrintTenuringDistribution\\f[R]\n-T}@T{\n-\\f[V]-Xlog:gc+age*=\\f[R]\\f[I]level\\f[R]\n-T}@T{\n-Use a \\f[I]level\\f[R] of \\f[V]debug\\f[R] for the most relevant\n-information, or a \\f[I]level\\f[R] of \\f[V]trace\\f[R] for all of what was\n-logged for \\f[V]PrintTenuringDistribution\\f[R].\n-T}\n-T{\n-\\f[V]UseGCLogFileRotation\\f[R]\n-T}@T{\n-Not Applicable\n-T}@T{\n-What was logged for \\f[V]PrintTenuringDistribution\\f[R].\n-T}\n-.TE\n-.SS Convert Runtime Logging Flags to Xlog\n-.PP\n-These legacy flags are no longer recognized and will cause an error if\n-used directly.\n-Use their unified logging equivalent instead.\n-.PP\n-Runtime Logging Flags to Xlog Configuration Mapping\n-.TS\n-tab(@);\n-lw(15.0n) lw(20.2n) lw(34.7n).\n-T{\n-Legacy Runtime Flag\n-T}@T{\n-Xlog Configuration\n-T}@T{\n-Comment\n-T}\n-_\n-T{\n-\\f[V]TraceExceptions\\f[R]\n-T}@T{\n-\\f[V]-Xlog:exceptions=info\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]TraceClassLoading\\f[R]\n-T}@T{\n-\\f[V]-Xlog:class+load=\\f[R]\\f[I]level\\f[R]\n-T}@T{\n-Use \\f[I]level\\f[R]=\\f[V]info\\f[R] for regular information, or\n-\\f[I]level\\f[R]=\\f[V]debug\\f[R] for additional information.\n-In Unified Logging syntax, \\f[V]-verbose:class\\f[R] equals\n-\\f[V]-Xlog:class+load=info,class+unload=info\\f[R].\n-T}\n-T{\n-\\f[V]TraceClassLoadingPreorder\\f[R]\n-T}@T{\n-\\f[V]-Xlog:class+preorder=debug\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]TraceClassUnloading\\f[R]\n-T}@T{\n-\\f[V]-Xlog:class+unload=\\f[R]\\f[I]level\\f[R]\n-T}@T{\n-Use \\f[I]level\\f[R]=\\f[V]info\\f[R] for regular information, or\n-\\f[I]level\\f[R]=\\f[V]trace\\f[R] for additional information.\n-In Unified Logging syntax, \\f[V]-verbose:class\\f[R] equals\n-\\f[V]-Xlog:class+load=info,class+unload=info\\f[R].\n-T}\n-T{\n-\\f[V]VerboseVerification\\f[R]\n-T}@T{\n-\\f[V]-Xlog:verification=info\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]TraceClassPaths\\f[R]\n-T}@T{\n-\\f[V]-Xlog:class+path=info\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]TraceClassResolution\\f[R]\n-T}@T{\n-\\f[V]-Xlog:class+resolve=debug\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]TraceClassInitialization\\f[R]\n-T}@T{\n-\\f[V]-Xlog:class+init=info\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]TraceLoaderConstraints\\f[R]\n-T}@T{\n-\\f[V]-Xlog:class+loader+constraints=info\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]TraceClassLoaderData\\f[R]\n-T}@T{\n-\\f[V]-Xlog:class+loader+data=\\f[R]\\f[I]level\\f[R]\n-T}@T{\n-Use \\f[I]level\\f[R]=\\f[V]debug\\f[R] for regular information or\n-\\f[I]level\\f[R]=\\f[V]trace\\f[R] for additional information.\n-T}\n-T{\n-\\f[V]TraceSafepointCleanupTime\\f[R]\n-T}@T{\n-\\f[V]-Xlog:safepoint+cleanup=info\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]TraceSafepoint\\f[R]\n-T}@T{\n-\\f[V]-Xlog:safepoint=debug\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]TraceMonitorInflation\\f[R]\n-T}@T{\n-\\f[V]-Xlog:monitorinflation=debug\\f[R]\n-T}@T{\n-Not Applicable\n-T}\n-T{\n-\\f[V]TraceRedefineClasses\\f[R]\n-T}@T{\n-\\f[V]-Xlog:redefine+class*=\\f[R]\\f[I]level\\f[R]\n-T}@T{\n-\\f[I]level\\f[R]=\\f[V]info\\f[R], \\f[V]debug\\f[R], and \\f[V]trace\\f[R]\n-provide increasing amounts of information.\n-T}\n-.TE\n-.SS -Xlog Usage Examples\n-.PP\n-The following are \\f[V]-Xlog\\f[R] examples.\n-.TP\n-\\f[V]-Xlog\\f[R]\n-Logs all messages by using the \\f[V]info\\f[R] level to \\f[V]stdout\\f[R]\n-with \\f[V]uptime\\f[R], \\f[V]levels\\f[R], and \\f[V]tags\\f[R] decorations.\n-This is equivalent to using:\n-.RS\n-.RS\n-.PP\n-\\f[V]-Xlog:all=info:stdout:uptime,levels,tags\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-Xlog:gc\\f[R]\n-Logs messages tagged with the \\f[V]gc\\f[R] tag using \\f[V]info\\f[R]\n-level to \\f[V]stdout\\f[R].\n-The default configuration for all other messages at level\n-\\f[V]warning\\f[R] is in effect.\n-.TP\n-\\f[V]-Xlog:gc,safepoint\\f[R]\n-Logs messages tagged either with the \\f[V]gc\\f[R] or \\f[V]safepoint\\f[R]\n-tags, both using the \\f[V]info\\f[R] level, to \\f[V]stdout\\f[R], with\n-default decorations.\n-Messages tagged with both \\f[V]gc\\f[R] and \\f[V]safepoint\\f[R] won\\[aq]t\n-be logged.\n-.TP\n-\\f[V]-Xlog:gc+ref=debug\\f[R]\n-Logs messages tagged with both \\f[V]gc\\f[R] and \\f[V]ref\\f[R] tags,\n-using the \\f[V]debug\\f[R] level to \\f[V]stdout\\f[R], with default\n-decorations.\n-Messages tagged only with one of the two tags won\\[aq]t be logged.\n-.TP\n-\\f[V]-Xlog:gc=debug:file=gc.txt:none\\f[R]\n-Logs messages tagged with the \\f[V]gc\\f[R] tag using the \\f[V]debug\\f[R]\n-level to a file called \\f[V]gc.txt\\f[R] with no decorations.\n-The default configuration for all other messages at level\n-\\f[V]warning\\f[R] is still in effect.\n-.TP\n-\\f[V]-Xlog:gc=trace:file=gctrace.txt:uptimemillis,pid:filecount=5,filesize=1024\\f[R]\n-Logs messages tagged with the \\f[V]gc\\f[R] tag using the \\f[V]trace\\f[R]\n-level to a rotating file set with 5 files with size 1 MB with the base\n-name \\f[V]gctrace.txt\\f[R] and uses decorations \\f[V]uptimemillis\\f[R]\n-and \\f[V]pid\\f[R].\n-.RS\n-.PP\n-The default configuration for all other messages at level\n-\\f[V]warning\\f[R] is still in effect.\n-.RE\n-.TP\n-\\f[V]-Xlog:gc::uptime,tid\\f[R]\n-Logs messages tagged with the \\f[V]gc\\f[R] tag using the default\n-\\[aq]info\\[aq] level to default the output \\f[V]stdout\\f[R] and uses\n-decorations \\f[V]uptime\\f[R] and \\f[V]tid\\f[R].\n-The default configuration for all other messages at level\n-\\f[V]warning\\f[R] is still in effect.\n-.TP\n-\\f[V]-Xlog:gc*=info,safepoint*=off\\f[R]\n-Logs messages tagged with at least \\f[V]gc\\f[R] using the \\f[V]info\\f[R]\n-level, but turns off logging of messages tagged with\n-\\f[V]safepoint\\f[R].\n-Messages tagged with both \\f[V]gc\\f[R] and \\f[V]safepoint\\f[R] won\\[aq]t\n-be logged.\n-.TP\n-\\f[V]-Xlog:disable -Xlog:safepoint=trace:safepointtrace.txt\\f[R]\n-Turns off all logging, including warnings and errors, and then enables\n-messages tagged with \\f[V]safepoint\\f[R]using \\f[V]trace\\f[R]level to\n-the file \\f[V]safepointtrace.txt\\f[R].\n-The default configuration doesn\\[aq]t apply, because the command line\n-started with \\f[V]-Xlog:disable\\f[R].\n-.SS Complex -Xlog Usage Examples\n-.PP\n-The following describes a few complex examples of using the\n-\\f[V]-Xlog\\f[R] option.\n-.TP\n-\\f[V]-Xlog:gc+class*=debug\\f[R]\n-Logs messages tagged with at least \\f[V]gc\\f[R] and \\f[V]class\\f[R] tags\n-using the \\f[V]debug\\f[R] level to \\f[V]stdout\\f[R].\n-The default configuration for all other messages at the level\n-\\f[V]warning\\f[R] is still in effect\n-.TP\n-\\f[V]-Xlog:gc+meta*=trace,class*=off:file=gcmetatrace.txt\\f[R]\n-Logs messages tagged with at least the \\f[V]gc\\f[R] and \\f[V]meta\\f[R]\n-tags using the \\f[V]trace\\f[R] level to the file \\f[V]metatrace.txt\\f[R]\n-but turns off all messages tagged with \\f[V]class\\f[R].\n-Messages tagged with \\f[V]gc\\f[R], \\f[V]meta\\f[R], and \\f[V]class\\f[R]\n-aren\\[aq]t be logged as \\f[V]class*\\f[R] is set to off.\n-The default configuration for all other messages at level\n-\\f[V]warning\\f[R] is in effect except for those that include\n-\\f[V]class\\f[R].\n-.TP\n-\\f[V]-Xlog:gc+meta=trace\\f[R]\n-Logs messages tagged with exactly the \\f[V]gc\\f[R] and \\f[V]meta\\f[R]\n-tags using the \\f[V]trace\\f[R] level to \\f[V]stdout\\f[R].\n-The default configuration for all other messages at level\n-\\f[V]warning\\f[R] is still be in effect.\n-.TP\n-\\f[V]-Xlog:gc+class+heap*=debug,meta*=warning,threads*=off\\f[R]\n-Logs messages tagged with at least \\f[V]gc\\f[R], \\f[V]class\\f[R], and\n-\\f[V]heap\\f[R] tags using the \\f[V]trace\\f[R] level to \\f[V]stdout\\f[R]\n-but only log messages tagged with \\f[V]meta\\f[R] with level.\n-The default configuration for all other messages at the level\n-\\f[V]warning\\f[R] is in effect except for those that include\n-\\f[V]threads\\f[R].\n-.SH VALIDATE JAVA VIRTUAL MACHINE FLAG ARGUMENTS\n-.PP\n-You use values provided to all Java Virtual Machine (JVM) command-line\n-flags for validation and, if the input value is invalid or out-of-range,\n-then an appropriate error message is displayed.\n-.PP\n-Whether they\\[aq]re set ergonomically, in a command line, by an input\n-tool, or through the APIs (for example, classes contained in the package\n-\\f[V]java.lang.management\\f[R]) the values provided to all Java Virtual\n-Machine (JVM) command-line flags are validated.\n-Ergonomics are described in Java Platform, Standard Edition HotSpot\n-Virtual Machine Garbage Collection Tuning Guide.\n-.PP\n-Range and constraints are validated either when all flags have their\n-values set during JVM initialization or a flag\\[aq]s value is changed\n-during runtime (for example using the \\f[V]jcmd\\f[R] tool).\n-The JVM is terminated if a value violates either the range or constraint\n-check and an appropriate error message is printed on the error stream.\n-.PP\n-For example, if a flag violates a range or a constraint check, then the\n-JVM exits with an error:\n-.IP\n-.nf\n-\\f[CB]\n-java -XX:AllocatePrefetchStyle=5 -version\n-intx AllocatePrefetchStyle=5 is outside the allowed range [ 0 ... 3 ]\n-Improperly specified VM option \\[aq]AllocatePrefetchStyle=5\\[aq]\n-Error: Could not create the Java Virtual Machine.\n-Error: A fatal exception has occurred. Program will exit.\n-\\f[R]\n-.fi\n-.PP\n-The flag \\f[V]-XX:+PrintFlagsRanges\\f[R] prints the range of all the\n-flags.\n-This flag allows automatic testing of the flags by the values provided\n-by the ranges.\n-For the flags that have the ranges specified, the type, name, and the\n-actual range is printed in the output.\n-.PP\n-For example,\n-.IP\n-.nf\n-\\f[CB]\n-intx   ThreadStackSize [ 0 ... 9007199254740987 ] {pd product}\n-\\f[R]\n-.fi\n-.PP\n-For the flags that don\\[aq]t have the range specified, the values\n-aren\\[aq]t displayed in the print out.\n-For example:\n-.IP\n-.nf\n-\\f[CB]\n-size_t NewSize         [   ...                  ] {product}\n-\\f[R]\n-.fi\n-.PP\n-This helps to identify the flags that need to be implemented.\n-The automatic testing framework can skip those flags that don\\[aq]t have\n-values and aren\\[aq]t implemented.\n-.SH LARGE PAGES\n-.PP\n-You use large pages, also known as huge pages, as memory pages that are\n-significantly larger than the standard memory page size (which varies\n-depending on the processor and operating system).\n-Large pages optimize processor Translation-Lookaside Buffers.\n-.PP\n-A Translation-Lookaside Buffer (TLB) is a page translation cache that\n-holds the most-recently used virtual-to-physical address translations.\n-A TLB is a scarce system resource.\n-A TLB miss can be costly because the processor must then read from the\n-hierarchical page table, which may require multiple memory accesses.\n-By using a larger memory page size, a single TLB entry can represent a\n-larger memory range.\n-This results in less pressure on a TLB, and memory-intensive\n-applications may have better performance.\n-.PP\n-However, using large pages can negatively affect system performance.\n-For example, when a large amount of memory is pinned by an application,\n-it may create a shortage of regular memory and cause excessive paging in\n-other applications and slow down the entire system.\n-Also, a system that has been up for a long time could produce excessive\n-fragmentation, which could make it impossible to reserve enough large\n-page memory.\n-When this happens, either the OS or JVM reverts to using regular pages.\n-.PP\n-Linux and Windows support large pages.\n-.SS Large Pages Support for Linux\n-.PP\n-Linux supports large pages since version 2.6.\n-To check if your environment supports large pages, try the following:\n-.IP\n-.nf\n-\\f[CB]\n-# cat \/proc\/meminfo | grep Huge\n-HugePages_Total: 0\n-HugePages_Free: 0\n-\\&...\n-Hugepagesize: 2048 kB\n-\\f[R]\n-.fi\n-.PP\n-If the output contains items prefixed with \\[dq]Huge\\[dq], then your\n-system supports large pages.\n-The values may vary depending on environment.\n-The \\f[V]Hugepagesize\\f[R] field shows the default large page size in\n-your environment, and the other fields show details for large pages of\n-this size.\n-Newer kernels have support for multiple large page sizes.\n-To list the supported page sizes, run this:\n-.IP\n-.nf\n-\\f[CB]\n-# ls \/sys\/kernel\/mm\/hugepages\/\n-hugepages-1048576kB  hugepages-2048kB\n-\\f[R]\n-.fi\n-.PP\n-The above environment supports 2 MB and 1 GB large pages, but they need\n-to be configured so that the JVM can use them.\n-When using large pages and not enabling transparent huge pages (option\n-\\f[V]-XX:+UseTransparentHugePages\\f[R]), the number of large pages must\n-be pre-allocated.\n-For example, to enable 8 GB of memory to be backed by 2 MB large pages,\n-login as \\f[V]root\\f[R] and run:\n-.RS\n-.PP\n-\\f[V]# echo 4096 > \/sys\/kernel\/mm\/hugepages\/hugepages-2048kB\/nr_hugepages\\f[R]\n-.RE\n-.PP\n-It is always recommended to check the value of \\f[V]nr_hugepages\\f[R]\n-after the request to make sure the kernel was able to allocate the\n-requested number of large pages.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] The values contained in \\f[V]\/proc\\f[R] and\n-\\f[V]\/sys\\f[R] reset after you reboot your system, so may want to set\n-them in an initialization script (for example, \\f[V]rc.local\\f[R] or\n-\\f[V]sysctl.conf\\f[R]).\n-.RE\n-.PP\n-If you configure the OS kernel parameters to enable use of large pages,\n-the Java processes may allocate large pages for the Java heap as well as\n-other internal areas, for example:\n-.IP \\[bu] 2\n-Code cache\n-.IP \\[bu] 2\n-Marking bitmaps\n-.PP\n-Consequently, if you configure the \\f[V]nr_hugepages\\f[R] parameter to\n-the size of the Java heap, then the JVM can still fail to allocate the\n-heap using large pages because other areas such as the code cache might\n-already have used some of the configured large pages.\n-.SS Large Pages Support for Windows\n-.PP\n-To use large pages support on Windows, the administrator must first\n-assign additional privileges to the user who is running the application:\n-.IP \"1.\" 3\n-Select \\f[B]Control Panel\\f[R], \\f[B]Administrative Tools\\f[R], and then\n-\\f[B]Local Security Policy\\f[R].\n-.IP \"2.\" 3\n-Select \\f[B]Local Policies\\f[R] and then \\f[B]User Rights\n-Assignment\\f[R].\n-.IP \"3.\" 3\n-Double-click \\f[B]Lock pages in memory\\f[R], then add users and\/or\n-groups.\n-.IP \"4.\" 3\n-Reboot your system.\n-.PP\n-Note that these steps are required even if it\\[aq]s the administrator\n-who\\[aq]s running the application, because administrators by default\n-don\\[aq]t have the privilege to lock pages in memory.\n-.SH APPLICATION CLASS DATA SHARING\n-.PP\n-Application Class Data Sharing (AppCDS) stores classes used by your\n-applications in an archive file.\n-Since these classes are stored in a format that can be loaded very\n-quickly (compared to classes stored in a JAR file), AppCDS can improve\n-the start-up time of your applications.\n-In addition, AppCDS can reduce the runtime memory footprint by sharing\n-parts of these classes across multiple processes.\n-.PP\n-Classes in the CDS archive are stored in an optimized format that\\[aq]s\n-about 2 to 5 times larger than classes stored in JAR files or the JDK\n-runtime image.\n-Therefore, it\\[aq]s a good idea to archive only those classes that are\n-actually used by your application.\n-These usually are just a small portion of all available classes.\n-For example, your application may use only a few APIs provided by a\n-large library.\n-.SS Using CDS Archives\n-.PP\n-By default, in most JDK distributions, unless \\f[V]-Xshare:off\\f[R] is\n-specified, the JVM starts up with a default CDS archive, which is\n-usually located in \\f[V]JAVA_HOME\/lib\/server\/classes.jsa\\f[R] (or\n-\\f[V]JAVA_HOME\\[rs]bin\\[rs]server\\[rs]classes.jsa\\f[R] on Windows).\n-This archive contains about 1300 core library classes that are used by\n-most applications.\n-.PP\n-To use CDS for the exact set of classes used by your application, you\n-can use the \\f[V]-XX:SharedArchiveFile\\f[R] option, which has the\n-general form:\n-.RS\n-.PP\n-\\f[V]-XX:SharedArchiveFile=<static_archive>:<dynamic_archive>\\f[R]\n-.RE\n-.IP \\[bu] 2\n-The \\f[V]<static_archive>\\f[R] overrides the default CDS archive.\n-.IP \\[bu] 2\n-The \\f[V]<dynamic_archive>\\f[R] provides additional classes that can be\n-loaded on top of those in the \\f[V]<static_archive>\\f[R].\n-.IP \\[bu] 2\n-On Windows, the above path delimiter \\f[V]:\\f[R] should be replaced with\n-\\f[V];\\f[R]\n-.PP\n-(The names \\[dq]static\\[dq] and \\[dq]dynamic\\[dq] are used for\n-historical reasons.\n-The only significance is that the \\[dq]static\\[dq] archive is loaded\n-first and the \\[dq]dynamic\\[dq] archive is loaded second).\n-.PP\n-The JVM can use up to two archives.\n-To use only a single \\f[V]<static_archive>\\f[R], you can omit the\n-\\f[V]<dynamic_archive>\\f[R] portion:\n-.RS\n-.PP\n-\\f[V]-XX:SharedArchiveFile=<static_archive>\\f[R]\n-.RE\n-.PP\n-For convenience, the \\f[V]<dynamic_archive>\\f[R] records the location of\n-the \\f[V]<static_archive>\\f[R].\n-Therefore, you can omit the \\f[V]<static_archive>\\f[R] by saying only:\n-.RS\n-.PP\n-\\f[V]-XX:SharedArchiveFile=<dynamic_archive>\\f[R]\n-.RE\n-.SS Manually Creating CDS Archives\n-.PP\n-CDS archives can be created manually using several methods:\n-.IP \\[bu] 2\n-\\f[V]-Xshare:dump\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-XX:ArchiveClassesAtExit\\f[R]\n-.IP \\[bu] 2\n-\\f[V]jcmd VM.cds\\f[R]\n-.PP\n-One common operation in all these methods is a \\[dq]trial run\\[dq],\n-where you run the application once to determine the classes that should\n-be stored in the archive.\n-.SS Creating a Static CDS Archive File with -Xshare:dump\n-.PP\n-The following steps create a static CDS archive file that contains all\n-the classes used by the \\f[V]test.Hello\\f[R] application.\n-.IP \"1.\" 3\n-Create a list of all classes used by the \\f[V]test.Hello\\f[R]\n-application.\n-The following command creates a file named \\f[V]hello.classlist\\f[R]\n-that contains a list of all classes used by this application:\n-.RS 4\n-.RS\n-.PP\n-\\f[V]java -Xshare:off -XX:DumpLoadedClassList=hello.classlist -cp hello.jar test.Hello\\f[R]\n-.RE\n-.PP\n-The classpath specified by the \\f[V]-cp\\f[R] parameter must contain only\n-JAR files.\n-.RE\n-.IP \"2.\" 3\n-Create a static archive, named \\f[V]hello.jsa\\f[R], that contains all\n-the classes in \\f[V]hello.classlist\\f[R]:\n-.RS 4\n-.RS\n-.PP\n-\\f[V]java -Xshare:dump -XX:SharedArchiveFile=hello.jsa -XX:SharedClassListFile=hello.classlist -cp hello.jar\\f[R]\n-.RE\n-.RE\n-.IP \"3.\" 3\n-Run the application \\f[V]test.Hello\\f[R] with the archive\n-\\f[V]hello.jsa\\f[R]:\n-.RS 4\n-.RS\n-.PP\n-\\f[V]java -XX:SharedArchiveFile=hello.jsa -cp hello.jar test.Hello\\f[R]\n-.RE\n-.RE\n-.IP \"4.\" 3\n-\\f[B]Optional\\f[R] Verify that the \\f[V]test.Hello\\f[R] application is\n-using the class contained in the \\f[V]hello.jsa\\f[R] shared archive:\n-.RS 4\n-.RS\n-.PP\n-\\f[V]java -XX:SharedArchiveFile=hello.jsa -cp hello.jar -Xlog:class+load test.Hello\\f[R]\n-.RE\n-.PP\n-The output of this command should contain the following text:\n-.RS\n-.PP\n-\\f[V][info][class,load] test.Hello source: shared objects file\\f[R]\n-.RE\n-.RE\n-.PP\n-By default, when the \\f[V]-Xshare:dump\\f[R] option is used, the JVM runs\n-in interpreter-only mode (as if the \\f[V]-Xint\\f[R] option were\n-specified).\n-This is required for generating deterministic output in the shared\n-archive file.\n-I.e., the exact same archive will be generated, bit-for-bit, every time\n-you dump it.\n-However, if deterministic output is not needed, and you have a large\n-classlist, you can explicitly add \\f[V]-Xmixed\\f[R] to the command-line\n-to enable the JIT compiler.\n-This will speed up the archive creation.\n-.SS Creating a Dynamic CDS Archive File with -XX:ArchiveClassesAtExit\n-.PP\n-Advantages of dynamic CDS archives are:\n-.IP \\[bu] 2\n-They usually use less disk space, since they don\\[aq]t need to store the\n-classes that are already in the static archive.\n-.IP \\[bu] 2\n-They are created with one fewer step than the comparable static archive.\n-.PP\n-The following steps create a dynamic CDS archive file that contains the\n-classes that are used by the \\f[V]test.Hello\\f[R] application, excluding\n-those that are already in the default CDS archive.\n-.IP \"1.\" 3\n-Create a dynamic CDS archive, named \\f[V]hello.jsa\\f[R], that contains\n-all the classes in \\f[V]hello.jar\\f[R] loaded by the application\n-\\f[V]test.Hello\\f[R]:\n-.RS 4\n-.RS\n-.PP\n-\\f[V]java -XX:ArchiveClassesAtExit=hello.jsa -cp hello.jar Hello\\f[R]\n-.RE\n-.RE\n-.IP \"2.\" 3\n-Run the application \\f[V]test.Hello\\f[R] with the shared archive\n-\\f[V]hello.jsa\\f[R]:\n-.RS 4\n-.RS\n-.PP\n-\\f[V]java -XX:SharedArchiveFile=hello.jsa -cp hello.jar test.Hello\\f[R]\n-.RE\n-.RE\n-.IP \"3.\" 3\n-\\f[B]Optional\\f[R] Repeat step 4 of the previous section to verify that\n-the \\f[V]test.Hello\\f[R] application is using the class contained in the\n-\\f[V]hello.jsa\\f[R] shared archive.\n-.PP\n-It\\[aq]s also possible to create a dynamic CDS archive with a\n-non-default static CDS archive.\n-E.g.,\n-.RS\n-.PP\n-\\f[V]java -XX:SharedArchiveFile=base.jsa -XX:ArchiveClassesAtExit=hello.jsa -cp hello.jar Hello\\f[R]\n-.RE\n-.PP\n-To run the application using this dynamic CDS archive:\n-.RS\n-.PP\n-\\f[V]java -XX:SharedArchiveFile=base.jsa:hello.jsa -cp hello.jar Hello\\f[R]\n-.RE\n-.PP\n-(On Windows, the above path delimiter \\f[V]:\\f[R] should be replaced\n-with \\f[V];\\f[R])\n-.PP\n-As mention above, the name of the static archive can be skipped:\n-.RS\n-.PP\n-\\f[V]java -XX:SharedArchiveFile=hello.jsa -cp hello.jar Hello\\f[R]\n-.RE\n-.SS Creating CDS Archive Files with jcmd\n-.PP\n-The previous two sections require you to modify the application\\[aq]s\n-start-up script in order to create a CDS archive.\n-Sometimes this could be difficult, for example, if the application\\[aq]s\n-class path is set up by complex routines.\n-.PP\n-The \\f[V]jcmd VM.cds\\f[R] command provides a less intrusive way for\n-creating a CDS archive by connecting to a running JVM process.\n-You can create either a static:\n-.RS\n-.PP\n-\\f[V]jcmd <pid> VM.cds static_dump my_static_archive.jsa\\f[R]\n-.RE\n-.PP\n-or a dynamic archive:\n-.RS\n-.PP\n-\\f[V]jcmd <pid> VM.cds dynamic_dump my_dynamic_archive.jsa\\f[R]\n-.RE\n-.PP\n-To use the resulting archive file in a subsequent run of the application\n-without modifying the application\\[aq]s start-up script, you can use the\n-following technique:\n-.RS\n-.PP\n-\\f[V]env JAVA_TOOL_OPTIONS=-XX:SharedArchiveFile=my_static_archive.jsa bash app_start.sh\\f[R]\n-.RE\n-.PP\n-Note: to use \\f[V]jcmd <pid> VM.cds dynamic_dump\\f[R], the JVM process\n-identified by \\f[V]<pid>\\f[R] must be started with\n-\\f[V]-XX:+RecordDynamicDumpInfo\\f[R], which can also be passed to the\n-application start-up script with the same technique:\n-.RS\n-.PP\n-\\f[V]env JAVA_TOOL_OPTIONS=-XX:+RecordDynamicDumpInfo bash app_start.sh\\f[R]\n-.RE\n-.SS Creating Dynamic CDS Archive File with -XX:+AutoCreateSharedArchive\n-.PP\n-\\f[V]-XX:+AutoCreateSharedArchive\\f[R] is a more convenient way of\n-creating\/using CDS archives.\n-Unlike the methods of manual CDS archive creation described in the\n-previous section, with \\f[V]-XX:+AutoCreateSharedArchive\\f[R], it\\[aq]s\n-no longer necessary to have a separate trial run.\n-Instead, you can always run the application with the same command-line\n-and enjoy the benefits of CDS automatically.\n-.RS\n-.PP\n-\\f[V]java -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=hello.jsa -cp hello.jar Hello\\f[R]\n-.RE\n-.PP\n-If the specified archive file exists and was created by the same version\n-of the JDK, then it will be loaded as a dynamic archive; otherwise it is\n-ignored at VM startup.\n-.PP\n-At VM exit, if the specified archive file does not exist, it will be\n-created.\n-If it exists but was created with a different (but post JDK 19) version\n-of the JDK, then it will be replaced.\n-In both cases the archive will be ready to be loaded the next time the\n-JVM is launched with the same command line.\n-.PP\n-If the specified archive file exists but was created by a JDK version\n-prior to JDK 19, then it will be ignored: neither loaded at startup, nor\n-replaced at exit.\n-.PP\n-Developers should note that the contents of the CDS archive file are\n-specific to each build of the JDK.\n-Therefore, if you switch to a different JDK build,\n-\\f[V]-XX:+AutoCreateSharedArchive\\f[R] will automatically recreate the\n-archive to match the JDK.\n-If you intend to use this feature with an existing archive, you should\n-make sure that the archive is created by at least version 19 of the JDK.\n-.SS Restrictions on Class Path and Module Path\n-.IP \\[bu] 2\n-Neither the class path (\\f[V]-classpath\\f[R] and\n-\\f[V]-Xbootclasspath\/a\\f[R]) nor the module path\n-(\\f[V]--module-path\\f[R]) can contain non-empty directories.\n-.IP \\[bu] 2\n-Only modular JAR files are supported in \\f[V]--module-path\\f[R].\n-Exploded modules are not supported.\n-.IP \\[bu] 2\n-The class path used at archive creation time must be the same as (or a\n-prefix of) the class path used at run time.\n-(There\\[aq]s no such requirement for the module path.)\n-.IP \\[bu] 2\n-The CDS archive cannot be loaded if any JAR files in the class path or\n-module path are modified after the archive is generated.\n-.IP \\[bu] 2\n-If any of the VM options \\f[V]--upgrade-module-path\\f[R],\n-\\f[V]--patch-module\\f[R] or \\f[V]--limit-modules\\f[R] are specified, CDS\n-is disabled.\n-This means that the JVM will execute without loading any CDS archives.\n-In addition, if you try to create a CDS archive with any of these 3\n-options specified, the JVM will report an error.\n-.SH PERFORMANCE TUNING EXAMPLES\n-.PP\n-You can use the Java advanced runtime options to optimize the\n-performance of your applications.\n-.SS Tuning for Higher Throughput\n-.PP\n-Use the following commands and advanced options to achieve higher\n-throughput performance for your application:\n-.RS\n-.PP\n-\\f[V]java -server -XX:+UseParallelGC -XX:+UseLargePages -Xmn10g  -Xms26g -Xmx26g\\f[R]\n-.RE\n-.SS Tuning for Lower Response Time\n-.PP\n-Use the following commands and advanced options to achieve lower\n-response times for your application:\n-.RS\n-.PP\n-\\f[V]java -XX:+UseG1GC -XX:MaxGCPauseMillis=100\\f[R]\n-.RE\n-.SS Keeping the Java Heap Small and Reducing the Dynamic Footprint of Embedded Applications\n-.PP\n-Use the following advanced runtime options to keep the Java heap small\n-and reduce the dynamic footprint of embedded applications:\n-.RS\n-.PP\n-\\f[V]-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5\\f[R]\n-.RE\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] The defaults for these two options are 70% and 40%\n-respectively.\n-Because performance sacrifices can occur when using these small\n-settings, you should optimize for a small footprint by reducing these\n-settings as much as possible without introducing unacceptable\n-performance degradation.\n-.RE\n-.SH EXIT STATUS\n-.PP\n-The following exit values are typically returned by the launcher when\n-the launcher is called with the wrong arguments, serious errors, or\n-exceptions thrown by the JVM.\n-However, a Java application may choose to return any value by using the\n-API call \\f[V]System.exit(exitValue)\\f[R].\n-The values are:\n-.IP \\[bu] 2\n-\\f[V]0\\f[R]: Successful completion\n-.IP \\[bu] 2\n-\\f[V]>0\\f[R]: An error occurred\n","filename":"src\/java.base\/share\/man\/java.1","additions":0,"deletions":5409,"binary":false,"changes":5409,"status":"deleted"},{"patch":"@@ -0,0 +1,4050 @@\n+---\n+# Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JAVA(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+java - launch a Java application\n+\n+## Synopsis\n+\n+To launch a class file:\n+\n+`java` \\[*options*\\] *mainclass* \\[*args* ...\\]\n+\n+To launch the main class in a JAR file:\n+\n+`java` \\[*options*\\] `-jar` *jarfile* \\[*args* ...\\]\n+\n+To launch the main class in a module:\n+\n+`java` \\[*options*\\] `-m` *module*\\[`\/`*mainclass*\\] \\[*args* ...\\]\n+\n+or\n+\n+`java` \\[*options*\\] `--module` *module*\\[`\/`*mainclass*\\] \\[*args* ...\\]\n+\n+To launch a source-file program:\n+\n+`java` \\[*options*\\] *source-file* \\[*args* ...\\]\n+\n+*options*\n+:   Optional: Specifies command-line options separated by spaces. See [Overview\n+    of Java Options] for a description of available\n+    options.\n+\n+*mainclass*\n+:   Specifies the name of the class to be launched. Command-line entries\n+    following `classname` are the arguments for the main method.\n+\n+`-jar` *jarfile*\n+:   Executes a program encapsulated in a JAR file. The *jarfile* argument is\n+    the name of a JAR file with a manifest that contains a line in the form\n+    `Main-Class:`*classname* that defines the class with the\n+    `public static void main(String[] args)` method that serves as your\n+    application's starting point. When you use `-jar`, the specified JAR file\n+    is the source of all user classes, and other class path settings are\n+    ignored. If you're using JAR files, then see [jar](jar.html).\n+\n+`-m` or `--module` *module*\\[`\/`*mainclass*\\]\n+:   Executes the main class in a module specified by *mainclass* if it is\n+    given, or, if it is not given, the value in the *module*. In other words,\n+    *mainclass* can be used when it is not specified by the module, or to\n+    override the value when it is specified.\n+\n+    See [Standard Options for Java].\n+\n+*source-file*\n+:   Only used to launch a source-file program. Specifies the source file\n+    that contains the main class when using source-file mode. See [Using\n+    Source-File Mode to Launch Source-Code Programs]\n+\n+*args* ...\n+:   Optional: Arguments following *mainclass*, *source-file*, `-jar` *jarfile*,\n+    and `-m` or `--module` *module*`\/`*mainclass* are passed as arguments to\n+    the main class.\n+\n+## Description\n+\n+The `java` command starts a Java application. It does this by starting the Java\n+Virtual Machine (JVM), loading the specified class, and calling that\n+class's `main()` method. The method must be declared `public` and `static`, it\n+must not return any value, and it must accept a `String` array as a parameter.\n+The method declaration has the following form:\n+\n+>   `public static void main(String[] args)`\n+\n+In source-file mode, the `java` command can launch a class declared in a source\n+file. See [Using Source-File Mode to Launch Source-Code Programs]\n+for a description of using the source-file mode.\n+\n+> **Note:** You can use the `JDK_JAVA_OPTIONS` launcher environment variable to prepend its\n+content to the actual command line of the `java` launcher. See [Using the\n+JDK\\_JAVA\\_OPTIONS Launcher Environment Variable].\n+\n+By default, the first argument that isn't an option of the `java` command is\n+the fully qualified name of the class to be called. If `-jar` is specified,\n+then its argument is the name of the JAR file containing class and resource\n+files for the application. The startup class must be indicated by the\n+`Main-Class` manifest header in its manifest file.\n+\n+Arguments after the class file name or the JAR file name are passed to the\n+`main()` method.\n+\n+### `javaw`\n+\n+**Windows:** The `javaw` command is identical to `java`, except that with\n+`javaw` there's no associated console window. Use `javaw` when you don't want a\n+command prompt window to appear. The `javaw` launcher will, however, display a\n+dialog box with error information if a launch fails.\n+\n+## Using Source-File Mode to Launch Source-Code Programs\n+\n+To launch a class declared in a source file, run the `java` launcher in\n+source-file mode. Entering source-file mode is determined by two items on the\n+`java` command line:\n+\n+-   The first item on the command line that is not an option or part of an\n+    option. In other words, the item in the command line that would otherwise\n+    be the main class name.\n+\n+-   The `--source` *version* option, if present.\n+\n+If the class identifies an existing file that has a `.java` extension, or if\n+the `--source` option is specified, then source-file mode is selected. The\n+source file is then compiled and run. The `--source` option can be used to\n+specify the source *version* or *N* of the source code. This determines the API\n+that can be used. When you set `--source` *N*, you can only use the public API\n+that was defined in JDK *N*.\n+\n+> **Note:** The valid values of *N* change for each release, with new values added and old\n+values removed. You'll get an error message if you use a value of *N* that is\n+no longer supported.\n+The supported values of *N* are the current Java SE release (`@@VERSION_SPECIFICATION@@`)\n+and a limited number of previous releases, detailed in the command-line help\n+for `javac`, under the `--source` and `--release` options.\n+\n+If the file does not have the `.java` extension, the `--source` option must be\n+used to tell the `java` command to use the source-file mode. The `--source`\n+option is used for cases when the source file is a \"script\" to be executed and\n+the name of the source file does not follow the normal naming conventions for\n+Java source files.\n+\n+In source-file mode, the effect is as though the source file is compiled into\n+memory, and the first class found in the source file is executed. Any arguments\n+placed after the name of the source file in the original command line are\n+passed to the compiled class when it is executed.\n+\n+For example, if a file were named `HelloWorld.java` and contained a class named\n+`HelloWorld`, then the source-file mode command to launch the class would be:\n+\n+>   `java HelloWorld.java`\n+\n+This use of source-file mode is informally equivalent to using the following two\n+commands:\n+\n+```\n+javac -d <memory> --source-path <source-root> HelloWorld.java\n+java --class-path <memory> HelloWorld\n+```\n+\n+where `<source-root>` is computed\n+\n+**In source-file mode, any additional command-line options are processed as\n+follows:**\n+\n+-   The launcher scans the options specified before the source file for any\n+    that are relevant in order to compile the source file.\n+\n+    This includes: `--class-path`, `--module-path`, `--add-exports`,\n+    `--add-modules`, `--limit-modules`, `--patch-module`,\n+    `--upgrade-module-path`, and any variant forms of those options. It also\n+    includes the new `--enable-preview` option, described in JEP 12.\n+\n+-   No provision is made to pass any additional options to the compiler, such\n+    as `-processor` or `-Werror`.\n+\n+-   Command-line argument files (`@`-files) may be used in the standard way.\n+    Long lists of arguments for either the VM or the program being invoked may\n+    be placed in files specified on the command-line by prefixing the filename\n+    with an `@` character.\n+\n+**In source-file mode, compilation proceeds as follows:**\n+\n+-   Any command-line options that are relevant to the compilation environment\n+    are taken into account. These include: `--class-path`\/`-classpath`\/`-cp`,\n+    `--module-path`\/`-p`, `--add-exports`, `--add-modules`, `--limit-modules`,\n+    `--patch-module`, `--upgrade-module-path`, `--enable-preview`.\n+\n+-   The root of the source tree, `<source-root>` is computed from the package\n+    of the class being launched. For example, if `HelloWorld.java` declared its classes\n+    to be in the `hello` package, then the file `HelloWorld.java` is expected\n+    to reside in the directory `somedir\/hello\/`. In this case, `somedir` is\n+    computed to be the root of the source tree.\n+\n+-   The root of the source tree serves as the source-path for compilation, so that\n+    other source files found in that tree and are needed by `HelloWorld` could be\n+    compiled.\n+\n+-   Annotation processing is disabled, as if `-proc:none` is in effect.\n+\n+-   If a version is specified, via the `--source` option, the value is used as\n+    the argument for an implicit `--release` option for the compilation. This\n+    sets both the source version accepted by compiler and the system API that\n+    may be used by the code in the source file.\n+\n+-   If `--enable-preview` is specified, the `--source N` arguments can be omitted.\n+    If the Java runtime version is `N`, then `--release N` is implied when\n+    compiling source files.\n+\n+-   If a `module-info.java` file exists in the `<source-root>` directory, its\n+    module declaration is used to define a named module that will contain all\n+    the classes compiled from `.java` files in the source tree. If\n+    `module-info.java` does not exist, all the classes compiled from source files\n+    will be compiled in the context of the unnamed module.\n+\n+-   The source file that is launched should contain one or more top-level classes, the first of\n+    which is taken as the class to be executed.\n+\n+-   For the source file that is launched, the compiler does not enforce the optional restriction defined at the end\n+    of JLS 7.6, that a type in a named package should exist in a file whose\n+    name is composed from the type name followed by the `.java` extension.\n+\n+-   If a source file contains errors, appropriate error messages are written\n+    to the standard error stream, and the launcher exits with a non-zero exit\n+    code.\n+\n+**In source-file mode, execution proceeds as follows:**\n+\n+-   The class to be executed is the first top-level class found in the source\n+    file. It must contain a declaration of an entry `main` method.\n+\n+-   The compiled classes are loaded by a custom class loader, that delegates to\n+    the application class loader. This implies that classes appearing on the\n+    application class path cannot refer to any classes declared in source files.\n+\n+-   If a `module-info.java` file exists in the `<source-root>` directory, then all\n+    the classes compiled from `.java` files in the source tree will be in that\n+    module, which will serve as the root module for the execution of the program.\n+    If `module-info.java` does not exist, the compiled classes are executed in the\n+    context of an unnamed module, as though `--add-modules=ALL-DEFAULT` is in effect.\n+    This is in addition to any other `--add-module` options that may be have been\n+    specified on the command line.\n+\n+-   Any arguments appearing after the name of the file on the command line are\n+    passed to the main method in the obvious way.\n+\n+-   It is an error if there is a class on the application class path whose name\n+    is the same as that of the class to be executed.\n+\n+See [JEP 458: Launch Multi-File Source-Code Programs](\n+https:\/\/openjdk.org\/jeps\/458) for complete details.\n+\n+## Using the JDK\\_JAVA\\_OPTIONS Launcher Environment Variable\n+\n+`JDK_JAVA_OPTIONS` prepends its content to the options parsed from the command\n+line. The content of the `JDK_JAVA_OPTIONS` environment variable is a list of\n+arguments separated by white-space characters (as determined by `isspace()`).\n+These are prepended to the command line arguments passed to `java` launcher.\n+The encoding requirement for the environment variable is the same as the `java`\n+command line on the system. `JDK_JAVA_OPTIONS` environment variable content is\n+treated in the same manner as that specified in the command line.\n+\n+Single (`'`) or double (`\"`) quotes can be used to enclose arguments that\n+contain whitespace characters. All content between the open quote and the\n+first matching close quote are preserved by simply removing the pair of quotes.\n+In case a matching quote is not found, the launcher will abort with an error\n+message. `@`-files are supported as they are specified in the command line.\n+However, as in `@`-files, use of a wildcard is not supported. In order to\n+mitigate potential misuse of `JDK_JAVA_OPTIONS` behavior, options that specify\n+the main class (such as `-jar`) or cause the `java` launcher to exit without\n+executing the main class (such as `-h`) are disallowed in the environment\n+variable. If any of these options appear in the environment variable, the\n+launcher will abort with an error message. When `JDK_JAVA_OPTIONS` is set, the\n+launcher prints a message to stderr as a reminder.\n+\n+**Example:**\n+\n+```\n+$ export JDK_JAVA_OPTIONS='-g @file1 -Dprop=value @file2 -Dws.prop=\"white spaces\"'\n+$ java -Xint @file3\n+```\n+\n+is equivalent to the command line:\n+\n+```\n+java -g @file1 -Dprop=value @file2 -Dws.prop=\"white spaces\" -Xint @file3\n+```\n+\n+## Overview of Java Options\n+\n+The `java` command supports a wide range of options in the following\n+categories:\n+\n+-   [Standard Options for Java]\\: Options guaranteed to be supported by all\n+    implementations of the Java Virtual Machine (JVM). They're used for common\n+    actions, such as checking the version of the JRE, setting the class path,\n+    enabling verbose output, and so on.\n+\n+-   [Extra Options for Java]\\: General purpose options that are specific to the\n+    Java HotSpot Virtual Machine. They aren't guaranteed to be supported by\n+    all JVM implementations, and are subject to change. These options start\n+    with `-X`.\n+\n+The advanced options aren't recommended for casual use. These are developer\n+options used for tuning specific areas of the Java HotSpot Virtual Machine\n+operation that often have specific system requirements and may require\n+privileged access to system configuration parameters. Several examples of\n+performance tuning are provided in [Performance Tuning Examples]. These\n+options aren't guaranteed to be supported by all JVM implementations and are\n+subject to change. Advanced options start with `-XX`.\n+\n+-   [Advanced Runtime Options for Java]\\: Control the runtime behavior of the\n+    Java HotSpot VM.\n+\n+-   [Advanced JIT Compiler Options for java]\\: Control the dynamic just-in-time\n+    (JIT) compilation performed by the Java HotSpot VM.\n+\n+-   [Advanced Serviceability Options for Java]\\: Enable gathering system\n+    information and performing extensive debugging.\n+\n+-   [Advanced Garbage Collection Options for Java]\\: Control how garbage\n+    collection (GC) is performed by the Java HotSpot\n+\n+Boolean options are used to either enable a feature that's disabled by default\n+or disable a feature that's enabled by default. Such options don't require a\n+parameter. Boolean `-XX` options are enabled using the plus sign\n+(`-XX:+`*OptionName*) and disabled using the minus sign (`-XX:-`*OptionName*).\n+\n+For options that require an argument, the argument may be separated from the\n+option name by a space, a colon (:), or an equal sign (=), or the argument may\n+directly follow the option (the exact syntax differs for each option). If\n+you're expected to specify the size in bytes, then you can use no suffix, or\n+use the suffix `k` or `K` for kilobytes (KB), `m` or `M` for megabytes (MB), or\n+`g` or `G` for gigabytes (GB). For example, to set the size to 8 GB, you can\n+specify either `8g`, `8192m`, `8388608k`, or `8589934592` as the argument. If\n+you are expected to specify the percentage, then use a number from 0 to 1. For\n+example, specify `0.25` for 25%.\n+\n+The following sections describe the options that are deprecated, obsolete, and\n+removed:\n+\n+-   [Deprecated Java Options]\\: Accepted and acted upon --- a warning is issued\n+    when they're used.\n+\n+-   [Obsolete Java Options]\\: Accepted but ignored --- a warning is issued when\n+    they're used.\n+\n+-   [Removed Java Options]\\: Removed --- using them results in an error.\n+\n+## Standard Options for Java\n+\n+These are the most commonly used options supported by all implementations of\n+the JVM.\n+\n+> **Note:** To specify an argument for a long option, you can use either\n+`--`*name*`=`*value* or `--`*name* *value*.\n+\n+`-agentlib:`*libname*\\[`=`*options*\\]\n+:   Loads the specified native agent library. After the library name, a\n+    comma-separated list of options specific to the library can be used.\n+    If the option `-agentlib:foo` is specified, then the JVM attempts to\n+    load the library named `foo` using the platform specific naming\n+    conventions and locations:\n+\n+    -   **Linux and other POSIX-like platforms:** The JVM attempts to load\n+         the library named `libfoo.so` in the location specified by the\n+         `LD_LIBRARY_PATH` system variable.\n+\n+    -   **macOS:** The JVM attempts to load the library named `libfoo.dylib`\n+        in the location specified by the `DYLD_LIBRARY_PATH` system variable.\n+\n+    -   **Windows:** The JVM attempts to load the library named `foo.dll` in\n+        the location specified by the `PATH` system variable.\n+\n+        The following example shows how to load the Java Debug Wire Protocol\n+        (JDWP) library and listen for the socket connection on port 8000,\n+        suspending the JVM before the main class loads:\n+\n+        >   `-agentlib:jdwp=transport=dt_socket,server=y,address=8000`\n+\n+`-agentpath:`*pathname*\\[`=`*options*\\]\n+:   Loads the native agent library specified by the absolute path name. This\n+    option is equivalent to `-agentlib` but uses the full path and file name of\n+    the library.\n+\n+`--class-path` *classpath*, `-classpath` *classpath*, or `-cp` *classpath*\n+:   Specifies a list of directories, JAR files, and ZIP archives to search\n+    for class files.\n+\n+    On Windows, semicolons (`;`) separate entities in this list;\n+    on other platforms it is a colon (`:`).\n+\n+    Specifying *classpath* overrides any setting of the `CLASSPATH` environment\n+    variable. If the class path option isn't used and *classpath* isn't set,\n+    then the user class path consists of the current directory (.).\n+\n+    As a special convenience, a class path element that contains a base name of\n+    an asterisk (\\*) is considered equivalent to specifying a list of all the\n+    files in the directory with the extension `.jar` or `.JAR` . A Java program\n+    can't tell the difference between the two invocations. For example, if the\n+    directory mydir contains `a.jar` and `b.JAR`, then the class path element\n+    mydir\/\\* is expanded to `A.jar:b.JAR`, except that the order of JAR files\n+    is unspecified. All `.jar` files in the specified directory, even hidden\n+    ones, are included in the list. A class path entry consisting of an\n+    asterisk (\\*) expands to a list of all the jar files in the current\n+    directory. The `CLASSPATH` environment variable, where defined, is\n+    similarly expanded. Any class path wildcard expansion that occurs before\n+    the Java VM is started. Java programs never see wildcards that aren't\n+    expanded except by querying the environment, such as by calling\n+    `System.getenv(\"CLASSPATH\")`.\n+\n+`--disable-@files`\n+:   Can be used anywhere on the command line, including in an argument file, to\n+    prevent further `@filename` expansion. This option stops expanding\n+    `@`-argfiles after the option.\n+\n+`--enable-preview`\n+:   Allows classes to depend on [preview features](https:\/\/docs.oracle.com\/en\/java\/javase\/12\/language\/index.html#JSLAN-GUID-5A82FE0E-0CA4-4F1F-B075-564874FE2823) of the release.\n+\n+`--enable-native-access` *module*\\[`,`*module*...\\]\n+:   Native access involves access to code or data outside the Java runtime.\n+    This is generally unsafe and, if done incorrectly, might crash the JVM or result\n+    in memory corruption. Native access can occur as a result of calling a method that\n+    is either [restricted](https:\/\/openjdk.org\/jeps\/454#Safety), or `native`.\n+    This option allows code in the specified modules to perform native access.\n+    Native access occurring in a module that has not been explicitly enabled\n+    is deemed *illegal*.\n+\n+    *module* can be a module name, or `ALL-UNNAMED` to indicate code on the class path.\n+\n+\n+-`--illegal-native-access=`*parameter*\n+:   This option specifies a mode for how illegal native access is handled:\n+\n+    > **Note:** This option will be removed in a future release.\n+\n+    -   `allow`: This mode allows illegal native access in all modules,\n+        without any warings.\n+\n+    -   `warn`: This mode is identical to `allow` except that a warning\n+        message is issued for the first illegal native access found in a module.\n+        This mode is the default for the current JDK but will change in a future\n+        release.\n+\n+    -   `deny`: This mode disables illegal native access. That is, any illegal native\n+        access causes an `IllegalCallerException`. This mode will become the default\n+        in a future release.\n+\n+    To verify that your application is ready for a future version of the JDK,\n+    run it with `--illegal-native-access=deny` along with any necessary `--enable-native-access`\n+    options.\n+\n+`--finalization=`*value*\n+:   Controls whether the JVM performs finalization of objects. Valid values\n+    are \"enabled\" and \"disabled\". Finalization is enabled by default, so the\n+    value \"enabled\" does nothing. The value \"disabled\" disables finalization,\n+    so that no finalizers are invoked.\n+\n+`--module-path` *modulepath*... or `-p` *modulepath*\n+:   Specifies where to find application modules with a list of path elements.\n+    The elements of a module path can be a file path to a module or a directory\n+    containing modules. Each module is either a modular JAR or an\n+    exploded-module directory.\n+\n+    On Windows, semicolons (`;`) separate path elements in this list;\n+    on other platforms it is a colon (`:`).\n+\n+`--upgrade-module-path` *modulepath*...\n+:   Specifies where to find module replacements of upgradeable modules in the\n+    runtime image with a list of path elements.\n+    The elements of a module path can be a file path to a module or a directory\n+    containing modules. Each module is either a modular JAR or an\n+    exploded-module directory.\n+\n+    On Windows, semicolons (`;`) separate path elements in this list;\n+    on other platforms it is a colon (`:`).\n+\n+`--add-modules` *module*\\[`,`*module*...\\]\n+:   Specifies the root modules to resolve in addition to the initial module.\n+    *module* can also be `ALL-DEFAULT`, `ALL-SYSTEM`, and `ALL-MODULE-PATH`.\n+\n+`--list-modules`\n+:   Lists the observable modules and then exits.\n+\n+`-d` *module\\_name* or `--describe-module` *module\\_name*\n+:   Describes a specified module and then exits.\n+\n+`--dry-run`\n+:   Creates the VM but doesn't execute the main method. This `--dry-run` option\n+    might be useful for validating the command-line options such as the module\n+    system configuration.\n+\n+`--validate-modules`\n+:   Validates all modules and exit. This option is helpful for finding\n+    conflicts and other errors with modules on the module path.\n+\n+`-D`*property*`=`*value*\n+:   Sets a system property value. The *property* variable is a string with no\n+    spaces that represents the name of the property. The *value* variable is a\n+    string that represents the value of the property. If *value* is a string\n+    with spaces, then enclose it in quotation marks (for example\n+    `-Dfoo=\"foo bar\"`).\n+\n+`-disableassertions`\\[`:`\\[*packagename*\\]...\\|`:`*classname*\\] or `-da`\\[`:`\\[*packagename*\\]...\\|`:`*classname*\\]\n+:   Disables assertions. By default, assertions are disabled in all packages\n+    and classes. With no arguments, `-disableassertions` (`-da`) disables\n+    assertions in all packages and classes. With the *packagename* argument\n+    ending in `...`, the switch disables assertions in the specified package\n+    and any subpackages. If the argument is simply `...`, then the switch\n+    disables assertions in the unnamed package in the current working\n+    directory. With the *classname* argument, the switch disables assertions in\n+    the specified class.\n+\n+    The `-disableassertions` (`-da`) option applies to all class loaders and to\n+    system classes (which don't have a class loader). There's one exception to\n+    this rule: If the option is provided with no arguments, then it doesn't\n+    apply to system classes. This makes it easy to disable assertions in all\n+    classes except for system classes. The `-disablesystemassertions` option\n+    enables you to disable assertions in all system classes. To explicitly\n+    enable assertions in specific packages or classes, use the\n+    `-enableassertions` (`-ea`) option. Both options can be used at the same\n+    time. For example, to run the `MyClass` application with assertions enabled\n+    in the package `com.wombat.fruitbat` (and any subpackages) but disabled in\n+    the class `com.wombat.fruitbat.Brickbat`, use the following command:\n+\n+    >   `java -ea:com.wombat.fruitbat... -da:com.wombat.fruitbat.Brickbat\n+        MyClass`\n+\n+`-disablesystemassertions` or `-dsa`\n+:   Disables assertions in all system classes.\n+\n+`-enableassertions`\\[`:`\\[*packagename*\\]...\\|`:`*classname*\\] or `-ea`\\[`:`\\[*packagename*\\]...\\|`:`*classname*\\]\n+:   Enables assertions. By default, assertions are disabled in all packages and\n+    classes. With no arguments, `-enableassertions` (`-ea`) enables assertions\n+    in all packages and classes. With the *packagename* argument ending in\n+    `...`, the switch enables assertions in the specified package and any\n+    subpackages. If the argument is simply `...`, then the switch enables\n+    assertions in the unnamed package in the current working directory. With\n+    the *classname* argument, the switch enables assertions in the specified\n+    class.\n+\n+    The `-enableassertions` (`-ea`) option applies to all class loaders and to\n+    system classes (which don't have a class loader). There's one exception to\n+    this rule: If the option is provided with no arguments, then it doesn't\n+    apply to system classes. This makes it easy to enable assertions in all\n+    classes except for system classes. The `-enablesystemassertions` option\n+    provides a separate switch to enable assertions in all system classes. To\n+    explicitly disable assertions in specific packages or classes, use the\n+    `-disableassertions` (`-da`) option. If a single command contains multiple\n+    instances of these switches, then they're processed in order, before\n+    loading any classes. For example, to run the `MyClass` application with\n+    assertions enabled only in the package `com.wombat.fruitbat` (and any\n+    subpackages) but disabled in the class `com.wombat.fruitbat.Brickbat`, use\n+    the following command:\n+\n+    >   `java -ea:com.wombat.fruitbat... -da:com.wombat.fruitbat.Brickbat\n+        MyClass`\n+\n+`-enablesystemassertions` or `-esa`\n+:   Enables assertions in all system classes.\n+\n+`-help`, `-h`, or `-?`\n+:   Prints the help message to the error stream.\n+\n+`--help`\n+:   Prints the help message to the output stream.\n+\n+`-javaagent:`*jarpath*\\[`=`*options*\\]\n+:   Loads the specified Java programming language agent. See `java.lang.instrument`.\n+\n+`--show-version`\n+:   Prints the product version to the output stream and continues.\n+\n+`-showversion`\n+:   Prints the product version to the error stream and continues.\n+\n+`--show-module-resolution`\n+:   Shows module resolution output during startup.\n+\n+`-splash:`*imagepath*\n+:   Shows the splash screen with the image specified by *imagepath*. HiDPI\n+    scaled images are automatically supported and used if available. The\n+    unscaled image file name, such as `image.ext`, should always be passed as\n+    the argument to the `-splash` option. The most appropriate scaled image\n+    provided is picked up automatically.\n+\n+    For example, to show the `splash.gif` file from the `images` directory when\n+    starting your application, use the following option:\n+\n+    >   `-splash:images\/splash.gif`\n+\n+    See the SplashScreen API documentation for more information.\n+\n+`-verbose:class`\n+:   Displays information about each loaded class.\n+\n+`-verbose:gc`\n+:   Displays information about each garbage collection (GC) event.\n+\n+`-verbose:jni`\n+:   Displays information about the use of native methods and other Java Native\n+    Interface (JNI) activity.\n+\n+`-verbose:module`\n+:   Displays information about the modules in use.\n+\n+`--version`\n+:   Prints product version to the output stream and exits.\n+\n+`-version`\n+:   Prints product version to the error stream and exits.\n+\n+`-X`\n+:   Prints the help on extra options to the error stream.\n+\n+`--help-extra`\n+:   Prints the help on extra options to the output stream.\n+\n+`@`*argfile*\n+:   Specifies one or more argument files prefixed by `@` used by the `java`\n+    command. It isn't uncommon for the `java` command line to be very long\n+    because of the `.jar` files needed in the classpath. The `@`*argfile*\n+    option overcomes command-line length limitations by enabling the launcher\n+    to expand the contents of argument files after shell expansion, but before\n+    argument processing. Contents in the argument files are expanded because\n+    otherwise, they would be specified on the command line until the\n+    `--disable-@files` option was encountered.\n+\n+    The argument files can also contain the main class name and all options. If\n+    an argument file contains all of the options required by the `java`\n+    command, then the command line could simply be:\n+\n+    >   `java @`*argfile*\n+\n+    See [java Command-Line Argument Files] for a description and examples of\n+    using `@`-argfiles.\n+\n+## Extra Options for Java\n+\n+The following `java` options are general purpose options that are specific to\n+the Java HotSpot Virtual Machine.\n+\n+`-Xbatch`\n+:   Disables background compilation. By default, the JVM compiles the method as\n+    a background task, running the method in interpreter mode until the\n+    background compilation is finished. The `-Xbatch` flag disables background\n+    compilation so that compilation of all methods proceeds as a foreground\n+    task until completed. This option is equivalent to\n+    `-XX:-BackgroundCompilation`.\n+\n+`-Xbootclasspath\/a:`*directories*\\|*zip*\\|*JAR-files*\n+:   Specifies a list of directories, JAR files, and ZIP archives to append to\n+    the end of the default bootstrap class path.\n+\n+    On Windows, semicolons (`;`) separate entities in this list;\n+    on other platforms it is a colon (`:`).\n+\n+`-Xcheck:jni`\n+:   Performs additional checks for Java Native Interface (JNI) functions.\n+\n+    The following checks are considered indicative of significant problems\n+    with the native code, and the JVM terminates with an irrecoverable\n+    error in such cases:\n+\n+    - The thread doing the call is not attached to the JVM.\n+    - The thread doing the call is using the `JNIEnv` belonging to another\n+      thread.\n+    - A parameter validation check fails:\n+      - A `jfieldID`, or `jmethodID`, is detected as being invalid. For example:\n+        - Of the wrong type\n+        - Associated with the wrong class\n+      - A parameter of the wrong type is detected.\n+      - An invalid parameter value is detected. For example:\n+        - NULL where not permitted\n+        - An out-of-bounds array index, or frame capacity\n+        - A non-UTF-8 string\n+        - An invalid JNI reference\n+        - An attempt to use a `ReleaseXXX` function on a parameter not\n+          produced by the corresponding `GetXXX` function\n+\n+    The following checks only result in warnings being printed:\n+\n+    - A JNI call was made without checking for a pending exception from a\n+      previous JNI call, and the current call is not safe when an exception\n+      may be pending.\n+    - A class descriptor is in decorated format (`Lname;`) when it should not be.\n+    - A `NULL` parameter is allowed, but its use is questionable.\n+    - Calling other JNI functions in the scope of `Get\/ReleasePrimitiveArrayCritical`\n+      or `Get\/ReleaseStringCritical`\n+\n+    Expect a performance degradation when this option is used.\n+\n+`-Xcomp`\n+:   Testing mode to exercise JIT compilers. This option should not be used in production environments.\n+\n+`-Xdebug`\n+:   Does nothing; deprecated for removal in a future release.\n+\n+`-Xdiag`\n+:   Shows additional diagnostic messages.\n+\n+`-Xint`\n+:   Runs the application in interpreted-only mode. Compilation to native code\n+    is disabled, and all bytecode is executed by the interpreter. The\n+    performance benefits offered by the just-in-time (JIT) compiler aren't\n+    present in this mode.\n+\n+`-Xinternalversion`\n+:   Displays more detailed JVM version information than the `-version` option,\n+    and then exits.\n+\n+`-Xlog:`*option*\n+:   Configure or enable logging with the Java Virtual Machine (JVM) unified\n+    logging framework. See [Enable Logging with the JVM Unified Logging\n+    Framework].\n+\n+`-Xmixed`\n+:   Executes all bytecode by the interpreter except for hot methods, which are\n+    compiled to native code. On by default. Use `-Xint` to switch off.\n+\n+`-Xmn` *size*\n+:   Sets the initial and maximum size (in bytes) of the heap for the young\n+    generation (nursery) in the generational collectors. Append the letter\n+    `k` or `K` to indicate kilobytes, `m` or `M` to indicate megabytes, or\n+    `g` or `G` to indicate gigabytes. The young generation region of the heap\n+    is used for new objects. GC is performed in this region more often than\n+    in other regions. If the size for the young generation is too small, then\n+    a lot of minor garbage collections are performed. If the size is too large,\n+    then only full garbage collections are performed, which can take a long\n+    time to complete. It is recommended that you do not set the size for the\n+    young generation for the G1 collector, and keep the size for the young\n+    generation greater than 25% and less than 50% of the overall heap size for\n+    other collectors.\n+    The following examples show how to set the initial and maximum size of\n+    young generation to 256 MB using various units:\n+\n+    ```\n+    -Xmn256m\n+    -Xmn262144k\n+    -Xmn268435456\n+    ```\n+\n+    Instead of the `-Xmn` option to set both the initial and maximum size of\n+    the heap for the young generation, you can use `-XX:NewSize` to set the\n+    initial size and `-XX:MaxNewSize` to set the maximum size.\n+\n+`-Xms` *size*\n+:   Sets the minimum and the initial size (in bytes) of the heap. This value\n+    must be a multiple of 1024 and greater than 1 MB. Append the letter `k` or\n+    `K` to indicate kilobytes, `m` or `M` to indicate megabytes, or `g` or `G`\n+    to indicate gigabytes. The following examples show how to set the size of\n+    allocated memory to 6 MB using various units:\n+\n+    ```\n+    -Xms6291456\n+    -Xms6144k\n+    -Xms6m\n+    ```\n+\n+    If you do not set this option, then the initial size will be set as the sum\n+    of the sizes allocated for the old generation and the young generation. The\n+    initial size of the heap for the young generation can be set using the\n+    `-Xmn` option or the `-XX:NewSize` option.\n+\n+    Note that the `-XX:InitialHeapSize` option can also be used to set the\n+    initial heap size. If it appears after `-Xms` on the command line, then the\n+    initial heap size gets set to the value specified with `-XX:InitialHeapSize`.\n+\n+`-Xmx` *size*\n+:   Specifies the maximum size (in bytes) of the heap. This value\n+    must be a multiple of 1024 and greater than 2 MB. Append the letter `k` or\n+    `K` to indicate kilobytes, `m` or `M` to indicate megabytes, or `g` or `G`\n+    to indicate gigabytes. The default value is chosen at runtime based on system\n+    configuration. For server deployments, `-Xms` and `-Xmx` are often set to\n+    the same value. The following examples show how to set the maximum allowed\n+    size of allocated memory to 80 MB using various units:\n+\n+    ```\n+    -Xmx83886080\n+    -Xmx81920k\n+    -Xmx80m\n+    ```\n+\n+    The `-Xmx` option is equivalent to `-XX:MaxHeapSize`.\n+\n+`-Xnoclassgc`\n+:   Disables garbage collection (GC) of classes. This can save some GC time,\n+    which shortens interruptions during the application run. When you specify\n+    `-Xnoclassgc` at startup, the class objects in the application are left\n+    untouched during GC and are always be considered live. This can result in\n+    more memory being permanently occupied which, if not used carefully, throws\n+    an out-of-memory exception.\n+\n+`-Xrs`\n+:   Reduces the use of operating system signals by the JVM. Shutdown hooks\n+    enable the orderly shutdown of a Java application by running user cleanup\n+    code (such as closing database connections) at shutdown, even if the JVM\n+    terminates abruptly.\n+\n+    -   **Non-Windows:**\n+\n+        -   The JVM catches signals to implement shutdown hooks for unexpected\n+            termination. The JVM uses `SIGHUP`, `SIGINT`, and `SIGTERM` to\n+            initiate the running of shutdown hooks.\n+\n+        -   Applications embedding the JVM frequently need to trap signals such\n+            as `SIGINT` or `SIGTERM`, which can lead to interference with the\n+            JVM signal handlers. The `-Xrs` option is available to address this\n+            issue. When `-Xrs` is used, the signal masks for `SIGINT`,\n+            `SIGTERM`, `SIGHUP`, and `SIGQUIT` aren't changed by the JVM, and\n+            signal handlers for these signals aren't installed.\n+\n+    -   **Windows:**\n+\n+        -   The JVM watches for console control events to implement shutdown\n+            hooks for unexpected termination. Specifically, the JVM registers a\n+            console control handler that begins shutdown-hook processing and\n+            returns `TRUE` for `CTRL_C_EVENT`, `CTRL_CLOSE_EVENT`,\n+            `CTRL_LOGOFF_EVENT`, and `CTRL_SHUTDOWN_EVENT`.\n+\n+        -   The JVM uses a similar mechanism to implement the feature of\n+            dumping thread stacks for debugging purposes. The JVM uses\n+            `CTRL_BREAK_EVENT` to perform thread dumps.\n+\n+        -   If the JVM is run as a service (for example, as a servlet engine\n+            for a web server), then it can receive `CTRL_LOGOFF_EVENT` but\n+            shouldn't initiate shutdown because the operating system doesn't\n+            actually terminate the process. To avoid possible interference such\n+            as this, the `-Xrs` option can be used. When the `-Xrs` option is\n+            used, the JVM doesn't install a console control handler, implying\n+            that it doesn't watch for or process `CTRL_C_EVENT`,\n+            `CTRL_CLOSE_EVENT`, `CTRL_LOGOFF_EVENT`, or `CTRL_SHUTDOWN_EVENT`.\n+\n+    There are two consequences of specifying `-Xrs`:\n+\n+    -   **Non-Windows:** `SIGQUIT` thread dumps aren't\n+        available.\n+\n+    -   **Windows:** Ctrl + Break thread dumps aren't available.\n+\n+    User code is responsible for causing shutdown hooks to run, for example, by\n+    calling `System.exit()` when the JVM is to be terminated.\n+\n+`-Xshare:`*mode*\n+:   Sets the class data sharing (CDS) mode.\n+\n+    Possible *mode* arguments for this option include the following:\n+\n+    `auto`\n+    :   Use shared class data if possible (default).\n+\n+    `on`\n+    :   Require using shared class data, otherwise fail.\n+\n+    > **Note:** The `-Xshare:on` option is used for testing purposes only.\n+    It may cause the VM to unexpectedly exit during start-up when the CDS\n+    archive cannot be used (for example, when certain VM parameters are changed,\n+    or when a different JDK is used). This option should not be used\n+    in production environments.\n+\n+    `off`\n+    :   Do not attempt to use shared class data.\n+\n+`-XshowSettings`\n+:   Shows all settings and then continues.\n+\n+`-XshowSettings:`*category*\n+:   Shows settings and continues. Possible *category* arguments for this option\n+    include the following:\n+\n+    `all`\n+    :   Shows all categories of settings in **verbose** detail.\n+\n+    `locale`\n+    :   Shows settings related to locale.\n+\n+    `properties`\n+    :   Shows settings related to system properties.\n+\n+    `security`\n+    :   Shows all settings related to security.\n+\n+        sub-category arguments for `security` include the following:\n+\n+        *   `security:all` : shows all security settings\n+        *   `security:properties` : shows security properties\n+        *   `security:providers` : shows static security provider settings\n+        *   `security:tls` : shows TLS related security settings\n+\n+    `vm`\n+    :   Shows the settings of the JVM.\n+\n+    `system`\n+    :   **Linux only:** Shows host system or container configuration and continues.\n+\n+`-Xss` *size*\n+:   Sets the thread stack size (in bytes). Append the letter `k` or `K` to\n+    indicate KB, `m` or `M` to indicate MB, or `g` or `G` to indicate GB. The\n+    actual size may be rounded up to a multiple of the system page size as\n+    required by the operating system. The default value depends on the\n+    platform. For example:\n+\n+    -   Linux\/x64: 1024 KB\n+\n+    -   Linux\/Aarch64: 2048 KB\n+\n+    -   macOS\/x64: 1024 KB\n+\n+    -   macOS\/Aarch64: 2048 KB\n+\n+    -   Windows: The default value depends on virtual memory\n+\n+    The following examples set the thread stack size to 1024 KB in different\n+    units:\n+\n+    ```\n+    -Xss1m\n+    -Xss1024k\n+    -Xss1048576\n+    ```\n+\n+    This option is similar to `-XX:ThreadStackSize`.\n+\n+`--add-reads` *module*`=`*target-module*(`,`*target-module*)\\*\n+:   Updates *module* to read the *target-module*, regardless of the module\n+    declaration. *target-module* can be `ALL-UNNAMED` to read all unnamed\n+    modules.\n+\n+`--add-exports` *module*`\/`*package*`=`*target-module*(`,`*target-module*)\\*\n+:   Updates *module* to export *package* to *target-module*, regardless of\n+    module declaration. *target-module* can be `ALL-UNNAMED` to export to all\n+    unnamed modules.\n+\n+`--add-opens` *module*`\/`*package*`=`*target-module*(`,`*target-module*)\\*\n+:   Updates *module* to open *package* to *target-module*, regardless of module\n+    declaration.\n+\n+`--limit-modules` *module*\\[`,`*module*...\\]\n+:   Specifies the limit of the universe of observable modules.\n+\n+`--patch-module` *module*`=`*file*(`;`*file*)\\*\n+:   Overrides or augments a module with classes and resources in JAR files or\n+    directories.\n+\n+`--source` *version*\n+:   Sets the version of the source in source-file mode.\n+\n+\n+`--sun-misc-unsafe-memory-access=` *value*\n+:   Allow or deny usage of unsupported API `sun.misc.Unsafe`. *value* is one of:\n+\n+    `allow`\n+    : Allow use of the memory-access methods with no warnings at run time.\n+\n+    `warn`\n+    : Allow use of the memory-access methods, but issues a warning on the first\n+      occasion that any memory-access method is used. At most one warning is\n+      issued.\n+\n+    `debug`\n+    : Allow use of the memory-access methods, but issue a one-line warning and\n+      a stack trace when any memory-access method is used.\n+\n+    `deny`\n+    : Disallow use of the memory-access methods by throwing an\n+      `UnsupportedOperationException` on every usage.\n+\n+    The default value when the option is not specified is `allow`.\n+\n+\n+## Extra Options for macOS\n+\n+The following extra options are macOS specific.\n+\n+`-XstartOnFirstThread`\n+:   Runs the `main()` method on the first (AppKit) thread.\n+\n+`-Xdock:name=`*application\\_name*\n+:   Overrides the default application name displayed in dock.\n+\n+`-Xdock:icon=`*path\\_to\\_icon\\_file*\n+:   Overrides the default icon displayed in dock.\n+\n+## Advanced Options for Java\n+\n+These `java` options can be used to enable other advanced options.\n+\n+`-XX:+UnlockDiagnosticVMOptions`\n+:   Unlocks the options intended for diagnosing the JVM. By default, this\n+    option is disabled and diagnostic options aren't available.\n+\n+    Command line options that are enabled with the use of this option are\n+    not supported. If you encounter issues while using any of these\n+    options, it is very likely that you will be required to reproduce the\n+    problem without using any of these unsupported options before Oracle\n+    Support can assist with an investigation. It is also possible that any\n+    of these options may be removed or their behavior changed without any\n+    warning.\n+\n+`-XX:+UnlockExperimentalVMOptions`\n+:   Unlocks the options that provide experimental features in the JVM.\n+    By default, this option is disabled and experimental features aren't available.\n+\n+## Advanced Runtime Options for Java\n+\n+These `java` options control the runtime behavior of the Java HotSpot VM.\n+\n+`-XX:ActiveProcessorCount=`*x*\n+:   Overrides the number of CPUs that the VM will use to calculate the size of\n+    thread pools it will use for various operations such as Garbage Collection\n+    and ForkJoinPool.\n+\n+    The VM normally determines the number of available processors from the\n+    operating system. This flag can be useful for partitioning CPU resources\n+    when running multiple Java processes in docker containers. This flag is\n+    honored even if `UseContainerSupport` is not enabled. See\n+    `-XX:-UseContainerSupport` for a description of enabling and disabling\n+    container support.\n+\n+`-XX:AllocateHeapAt=`*path*\n+:   Takes a path to the file system and uses memory mapping to allocate the\n+    object heap on the memory device. Using this option enables the HotSpot VM\n+    to allocate the Java object heap on an alternative memory device, such as\n+    an NV-DIMM, specified by the user.\n+\n+    Alternative memory devices that have the same semantics as DRAM, including\n+    the semantics of atomic operations, can be used instead of DRAM for the\n+    object heap without changing the existing application code. All other\n+    memory structures (such as the code heap, metaspace, and thread stacks)\n+    continue to reside in DRAM.\n+\n+    Some operating systems expose non-DRAM memory through the file system.\n+    Memory-mapped files in these file systems bypass the page cache and provide\n+    a direct mapping of virtual memory to the physical memory on the device.\n+    The existing heap related flags (such as `-Xmx` and `-Xms`) and\n+    garbage-collection related flags continue to work as before.\n+\n+`-XX:-CompactStrings`\n+:   Disables the Compact Strings feature. By default, this option is enabled.\n+    When this option is enabled, Java Strings containing only single-byte\n+    characters are internally represented and stored as\n+    single-byte-per-character Strings using ISO-8859-1 \/ Latin-1 encoding. This\n+    reduces, by 50%, the amount of space required for Strings containing only\n+    single-byte characters. For Java Strings containing at least one multibyte\n+    character: these are represented and stored as 2 bytes per character using\n+    UTF-16 encoding. Disabling the Compact Strings feature forces the use of\n+    UTF-16 encoding as the internal representation for all Java Strings.\n+\n+    Cases where it may be beneficial to disable Compact Strings include the\n+    following:\n+\n+    -   When it's known that an application overwhelmingly will be allocating\n+        multibyte character Strings\n+\n+    -   In the unexpected event where a performance regression is observed in\n+        migrating from Java SE 8 to Java SE 9 and an analysis shows that\n+        Compact Strings introduces the regression\n+\n+    In both of these scenarios, disabling Compact Strings makes sense.\n+\n+`-XX:ErrorFile=`*filename*\n+:   Specifies the path and file name to which error data is written when an\n+    irrecoverable error occurs. By default, this file is created in the current\n+    working directory and named `hs_err_pid`*pid*`.log` where *pid* is the\n+    identifier of the process that encountered the error.\n+\n+    The following example shows how to set the default log file (note that the\n+    identifier of the process is specified as `%p`):\n+\n+    >   `-XX:ErrorFile=.\/hs_err_pid%p.log`\n+\n+    -   **Non-Windows:** The following example shows how to\n+        set the error log to `\/var\/log\/java\/java_error.log`:\n+\n+        >   `-XX:ErrorFile=\/var\/log\/java\/java_error.log`\n+\n+    -   **Windows:** The following example shows how to set the error log file\n+        to `C:\/log\/java\/java_error.log`:\n+\n+        >   `-XX:ErrorFile=C:\/log\/java\/java_error.log`\n+\n+    If the file exists, and is writeable, then it will be overwritten.\n+    Otherwise, if the file can't be created in the specified directory (due to\n+    insufficient space, permission problem, or another issue), then the file is\n+    created in the temporary directory for the operating system:\n+\n+    -   **Non-Windows:** The temporary directory is `\/tmp`.\n+\n+    -   **Windows:** The temporary directory is specified by the value of the\n+        `TMP` environment variable; if that environment variable isn't defined,\n+        then the value of the `TEMP` environment variable is used.\n+\n+`-XX:+ExtensiveErrorReports`\n+:   Enables the reporting of more extensive error information in the `ErrorFile`.\n+    This option can be turned on in environments where maximal information is\n+    desired - even if the resulting logs may be quite large and\/or contain\n+    information that might be considered sensitive. The information can vary\n+    from release to release, and across different platforms. By default this\n+    option is disabled.\n+\n+`-XX:FlightRecorderOptions=`*parameter*`=`*value* (or) `-XX:FlightRecorderOptions:`*parameter*`=`*value*\n+:   Sets the parameters that control the behavior of JFR. Multiple parameters can be specified\n+    by separating them with a comma.\n+\n+    The following list contains the available JFR *parameter*`=`*value*\n+    entries:\n+\n+    `globalbuffersize=`*size*\n+    :   Specifies the total amount of primary memory used for data retention.\n+        The default value is based on the value specified for `memorysize`.\n+        Change the `memorysize` parameter to alter the size of global buffers.\n+\n+    `maxchunksize=`*size*\n+    :   Specifies the maximum size (in bytes) of the data chunks in a\n+        recording. Append `m` or `M` to specify the size in megabytes (MB), or\n+        `g` or `G` to specify the size in gigabytes (GB). By default, the\n+        maximum size of data chunks is set to 12 MB. The minimum allowed is 1\n+        MB.\n+\n+    `memorysize=`*size*\n+    :   Determines how much buffer memory should be used, and sets the\n+        `globalbuffersize` and `numglobalbuffers` parameters based on the size\n+        specified. Append `m` or `M` to specify the size in megabytes (MB), or\n+        `g` or `G` to specify the size in gigabytes (GB). By default, the\n+        memory size is set to 10 MB.\n+\n+    `numglobalbuffers`\n+    :   Specifies the number of global buffers used. The default value is based\n+        on the memory size specified. Change the `memorysize` parameter to\n+        alter the number of global buffers.\n+\n+    `old-object-queue-size=number-of-objects`\n+    :   Maximum number of old objects to track. By default, the number of\n+        objects is set to 256.\n+\n+    `preserve-repository=`{`true`\\|`false`}\n+    :   Specifies whether files stored in the disk repository should be kept\n+        after the JVM has exited. If false, files are deleted. By default,\n+        this parameter is disabled.\n+\n+    `repository=`*path*\n+    :   Specifies the repository (a directory) for temporary disk storage. By\n+        default, the system's temporary directory is used.\n+\n+    `retransform=`{`true`\\|`false`}\n+    :   Specifies whether event classes should be retransformed using JVMTI. If\n+        false, instrumentation is added when event classes are loaded. By\n+        default, this parameter is enabled.\n+\n+    `stackdepth=`*depth*\n+    :   Stack depth for stack traces. By default, the depth is set to 64 method\n+        calls. The maximum is 2048. Values greater than 64 could create\n+        significant overhead and reduce performance.\n+\n+    `threadbuffersize=`*size*\n+    :   Specifies the per-thread local buffer size (in bytes). By default, the\n+        local buffer size is set to 8 kilobytes, with a minimum value of\n+        4 kilobytes. Overriding this parameter\n+        could reduce performance and is not recommended.\n+\n+`-XX:LargePageSizeInBytes=`*size*\n+:   Sets the maximum large page size (in bytes) used by the JVM. The\n+    *size* argument must be a valid page size supported by the environment\n+    to have any effect. Append the letter `k` or `K` to indicate kilobytes,\n+    `m` or `M` to indicate megabytes, or `g` or `G` to indicate gigabytes.\n+    By default, the size is set to 0, meaning that the JVM will use the\n+    default large page size for the environment as the maximum size for\n+    large pages. See [Large Pages].\n+\n+    The following example describes how to set the large page size to 1\n+    gigabyte (GB):\n+\n+    >   `-XX:LargePageSizeInBytes=1g`\n+\n+`-XX:MaxDirectMemorySize=`*size*\n+:   Sets the maximum total size (in bytes) of the `java.nio` package,\n+    direct-buffer allocations. Append the letter `k` or `K` to indicate\n+    kilobytes, `m` or `M` to indicate megabytes, or `g` or `G` to indicate\n+    gigabytes. If not set, the flag is ignored and the JVM chooses the size\n+    for NIO direct-buffer allocations automatically.\n+\n+    The following examples illustrate how to set the NIO size to 1024 KB in\n+    different units:\n+\n+    ```\n+    -XX:MaxDirectMemorySize=1m\n+    -XX:MaxDirectMemorySize=1024k\n+    -XX:MaxDirectMemorySize=1048576\n+    ```\n+\n+`-XX:-MaxFDLimit`\n+:   Disables the attempt to set the soft limit for the number of open file\n+    descriptors to the hard limit. By default, this option is enabled on all\n+    platforms, but is ignored on Windows. The only time that you may need to\n+    disable this is on macOS, where its use imposes a maximum of 10240, which\n+    is lower than the actual system maximum.\n+\n+`-XX:NativeMemoryTracking=`*mode*\n+:   Specifies the mode for tracking JVM native memory usage. Possible *mode*\n+    arguments for this option include the following:\n+\n+    `off`\n+    :   Instructs not to track JVM native memory usage. This is the default\n+        behavior if you don't specify the `-XX:NativeMemoryTracking` option.\n+\n+    `summary`\n+    :   Tracks memory usage only by JVM subsystems, such as Java heap, class,\n+        code, and thread.\n+\n+    `detail`\n+    :   In addition to tracking memory usage by JVM subsystems, track memory\n+        usage by individual `CallSite`, individual virtual memory region and\n+        its committed regions.\n+\n+`-XX:TrimNativeHeapInterval=`*millis*\n+:   Interval, in ms, at which the JVM will trim the native heap. Lower values\n+    will reclaim memory more eagerly at the cost of higher overhead. A value\n+    of 0 (default) disables native heap trimming.\n+    Native heap trimming is performed in a dedicated thread.\n+\n+    This option is only supported on Linux with GNU C Library (glibc).\n+\n+`-XX:+NeverActAsServerClassMachine`\n+:   Enable the \"Client VM emulation\" mode which only uses the C1 JIT compiler,\n+    a 32Mb CodeCache and the Serial GC. The maximum amount of memory that the\n+    JVM may use (controlled by the `-XX:MaxRAM=n` flag) is set to 1GB by default.\n+    The string \"emulated-client\" is added to the JVM version string.\n+\n+    By default the flag is set to `true` only on Windows in 32-bit mode and\n+    `false` in all other cases.\n+\n+    The \"Client VM emulation\" mode will not be enabled if any of the following\n+    flags are used on the command line:\n+\n+    ```\n+    -XX:{+|-}TieredCompilation\n+    -XX:CompilationMode=mode\n+    -XX:TieredStopAtLevel=n\n+    -XX:{+|-}EnableJVMCI\n+    -XX:{+|-}UseJVMCICompiler\n+    ```\n+\n+`-XX:ObjectAlignmentInBytes=`*alignment*\n+:   Sets the memory alignment of Java objects (in bytes). By default, the value\n+    is set to 8 bytes. The specified value should be a power of 2, and must be\n+    within the range of 8 and 256 (inclusive). This option makes it possible to\n+    use compressed pointers with large Java heap sizes.\n+\n+    The heap size limit in bytes is calculated as:\n+\n+    >   `4GB * ObjectAlignmentInBytes`\n+\n+    > **Note:** As the alignment value increases, the unused space between objects also\n+    increases. As a result, you may not realize any benefits from using\n+    compressed pointers with large Java heap sizes.\n+\n+`-XX:OnError=`*string*\n+:   Sets a custom command or a series of semicolon-separated commands to run\n+    when an irrecoverable error occurs. If the string contains spaces, then it\n+    must be enclosed in quotation marks.\n+\n+    -   **Non-Windows:** The following example shows how\n+        the `-XX:OnError` option can be used to run the `gcore` command to\n+        create a core image, and start the `gdb` debugger to attach to the\n+        process in case of an irrecoverable error (the `%p` designates the\n+        current process identifier):\n+\n+        >   `-XX:OnError=\"gcore %p;gdb -p %p\"`\n+\n+    -   **Windows:** The following example shows how the `-XX:OnError` option\n+        can be used to run the `userdump.exe` utility to obtain a crash dump in\n+        case of an irrecoverable error (the `%p` designates the current\n+        process identifier). This example assumes that the path to the `userdump.exe`\n+        utility is specified in the `PATH` environment variable:\n+\n+        >   `-XX:OnError=\"userdump.exe %p\"`\n+\n+`-XX:OnOutOfMemoryError=`*string*\n+:   Sets a custom command or a series of semicolon-separated commands to run\n+    when an `OutOfMemoryError` exception is first thrown. If the string\n+    contains spaces, then it must be enclosed in quotation marks. For an\n+    example of a command string, see the description of the `-XX:OnError`\n+    option.\n+\n+`-XX:+PrintCommandLineFlags`\n+:   Enables printing of ergonomically selected JVM flags that appeared on the\n+    command line. It can be useful to know the ergonomic values set by the JVM,\n+    such as the heap space size and the selected garbage collector. By default,\n+    this option is disabled and flags aren't printed.\n+\n+`-XX:+PreserveFramePointer`\n+:   Selects between using the RBP register as a general purpose register\n+    (`-XX:-PreserveFramePointer`) and using the RBP register to hold the frame\n+    pointer of the currently executing method (`-XX:+PreserveFramePointer` . If\n+    the frame pointer is available, then external profiling tools (for example,\n+    Linux perf) can construct more accurate stack traces.\n+\n+`-XX:+PrintNMTStatistics`\n+:   Enables printing of collected native memory tracking data at JVM exit when\n+    native memory tracking is enabled (see `-XX:NativeMemoryTracking`). By\n+    default, this option is disabled and native memory tracking data isn't\n+    printed.\n+\n+`-XX:SharedArchiveFile=`*path*\n+:   Specifies the path and name of the class data sharing (CDS) archive file\n+\n+    See [Application Class Data Sharing].\n+\n+`-XX:+VerifySharedSpaces`\n+:   If this option is specified, the JVM will load a CDS archive file only if it\n+    passes an integrity check based on CRC32 checksums. The purpose of this flag is\n+    to check for unintentional damage to CDS archive files in transmission or storage.\n+    To guarantee the security and proper operation of CDS, the user must\n+    ensure that the CDS archive files used by Java applications cannot be modified without\n+    proper authorization.\n+\n+`-XX:SharedArchiveConfigFile=`*shared\\_config\\_file*\n+:   Specifies additional shared data added to the archive file.\n+\n+`-XX:SharedClassListFile=`*file\\_name*\n+:   Specifies the text file that contains the names of the classes to store in\n+    the class data sharing (CDS) archive. This file contains the full name of\n+    one class per line, except slashes (`\/`) replace dots (`.`). For example,\n+    to specify the classes `java.lang.Object` and `hello.Main`, create a text\n+    file that contains the following two lines:\n+\n+    ```\n+    java\/lang\/Object\n+    hello\/Main\n+    ```\n+\n+    The classes that you specify in this text file should include the classes\n+    that are commonly used by the application. They may include any classes\n+    from the application, extension, or bootstrap class paths.\n+\n+    See [Application Class Data Sharing].\n+\n+`-XX:+ShowCodeDetailsInExceptionMessages`\n+:   Enables printing of improved `NullPointerException` messages. When an application throws a\n+    `NullPointerException`, the option enables the JVM to analyze the program's bytecode\n+    instructions to determine precisely which reference is `null`,\n+    and describes the source with a null-detail message.\n+    The null-detail message is calculated and returned by `NullPointerException.getMessage()`,\n+    and will be printed as the exception message along with\n+    the method, filename, and line number. By default, this option is enabled.\n+\n+`-XX:+ShowMessageBoxOnError`\n+:   Enables the display of a dialog box when the JVM experiences an\n+    irrecoverable error. This prevents the JVM from exiting and keeps the\n+    process active so that you can attach a debugger to it to investigate the\n+    cause of the error. By default, this option is disabled.\n+\n+`-XX:StartFlightRecording:`*parameter*`=`*value*\n+:   Starts a JFR recording for the Java application. This option is equivalent\n+    to the `JFR.start` diagnostic command that starts a recording during\n+    runtime. `-XX:StartFlightRecording:help` prints available options and\n+    example command lines. You can set the following *parameter*`=`*value*\n+    entries when starting a JFR recording:\n+\n+    `delay=`*time*\n+    :   Specifies the delay between the Java application launch time and the\n+        start of the recording. Append `s` to specify the time in seconds, `m`\n+        for minutes, `h` for hours, or `d` for days (for example, specifying\n+        `10m` means 10 minutes). By default, there's no delay, and this\n+        parameter is set to 0.\n+\n+    `disk=`{`true`\\|`false`}\n+    :   Specifies whether to write data to disk while recording. By default,\n+        this parameter is enabled.\n+\n+    `dumponexit=`{`true`\\|`false`}\n+    :   Specifies if the running recording is dumped when the JVM shuts down.\n+        If enabled and a `filename` is not entered, the recording is written to\n+        a file in the directory where the process was started. The file name is\n+        a system-generated name that contains the process ID, recording ID, and\n+        current timestamp, similar to\n+        `hotspot-pid-47496-id-1-2018_01_25_19_10_41.jfr`. By default, this\n+        parameter is disabled.\n+\n+    `duration=`*time*\n+    :   Specifies the duration of the recording. Append `s` to specify the time\n+        in seconds, `m` for minutes, `h` for hours, or `d` for days (for\n+        example, specifying `5h` means 5 hours). By default, the duration isn't\n+        limited, and this parameter is set to 0.\n+\n+    `filename=`*path*\n+    :   Specifies the path and name of the file to which the recording is\n+        written when the recording is stopped, for example:\n+\n+        -   `recording.jfr`\n+        -   `\/home\/user\/recordings\/recording.jfr`\n+        -   `c:\\recordings\\recording.jfr`\n+\n+        If %p and\/or %t is specified in the filename, it expands to the JVM's\n+        PID and the current timestamp, respectively. The filename may also be\n+        a directory in which case, the filename is generated from the PID\n+        and the current date in the specified directory.\n+\n+    `name=`*identifier*\n+    :   Takes both the name and the identifier of a recording.\n+\n+    `maxage=`*time*\n+    :   Specifies the maximum age of disk data to keep for the recording. This\n+        parameter is valid only when the `disk` parameter is set to `true`.\n+        Append `s` to specify the time in seconds, `m` for minutes, `h` for\n+        hours, or `d` for days (for example, specifying `30s` means 30\n+        seconds). By default, the maximum age isn't limited, and this parameter\n+        is set to `0s`.\n+\n+    `maxsize=`*size*\n+    :   Specifies the maximum size (in bytes) of disk data to keep for the\n+        recording. This parameter is valid only when the `disk` parameter is\n+        set to `true`. The value must not be less than the value for the\n+        `maxchunksize` parameter set with `-XX:FlightRecorderOptions`. Append\n+        `m` or `M` to specify the size in megabytes, or `g` or `G` to specify\n+        the size in gigabytes. By default, the maximum size of disk data isn't\n+        limited, and this parameter is set to `0`.\n+\n+    `path-to-gc-roots=`{`true`\\|`false`}\n+    :   Specifies whether to collect the path to garbage collection (GC) roots\n+        at the end of a recording. By default, this parameter is disabled.\n+\n+        The path to GC roots is useful for finding memory leaks, but collecting\n+        it is time-consuming. Enable this option only when you start a\n+        recording for an application that you suspect has a memory leak. If the\n+        `settings` parameter is set to `profile`, the stack trace from where\n+        the potential leaking object was allocated is included in the\n+        information collected.\n+\n+    `settings=`*path*\n+    :   Specifies the path and name of the event settings file (of type JFC).\n+        By default, the `default.jfc` file is used, which is located in\n+        `JAVA_HOME\/lib\/jfr`. This default settings file collects a predefined\n+        set of information with low overhead, so it has minimal impact on\n+        performance and can be used with recordings that run continuously.\n+\n+        A second settings file is also provided, profile.jfc, which provides\n+        more data than the default configuration, but can have more overhead\n+        and impact performance. Use this configuration for short periods of\n+        time when more information is needed.\n+\n+    You can specify values for multiple parameters by separating them with a\n+    comma. Event settings and .jfc options can be specified using the\n+    following syntax:\n+\n+    `option=`*value*\n+    :   Specifies the option value to modify. To list available options, use\n+        the `JAVA_HOME`\/bin\/jfr tool.\n+\n+    `event-setting=`*value*\n+    :   Specifies the event setting value to modify. Use the form:\n+        `<event-name>#<setting-name>=<value>`.\n+        To add a new event setting, prefix the event name with '+'.\n+\n+    You can specify values for multiple event settings and .jfc options by\n+    separating them with a comma. In case of a conflict between a parameter\n+    and a .jfc option, the parameter will take precedence. The whitespace\n+    delimiter can be omitted for timespan values, i.e. 20ms. For more\n+    information about the settings syntax, see Javadoc of the jdk.jfr\n+    package.\n+\n+    To only see warnings and errors from JFR during startup set\n+    -Xlog:jfr+startup=warning.\n+\n+`-XX:ThreadStackSize=`*size*\n+:   Sets the Java thread stack size (in kilobytes). Use of a scaling suffix,\n+    such as `k`, results in the scaling of the kilobytes value so that\n+    `-XX:ThreadStackSize=1k` sets the Java thread stack size to 1024\\*1024\n+    bytes or 1 megabyte. The default value depends on the platform. For example:\n+\n+    -   Linux\/x64: 1024 KB\n+\n+    -   Linux\/Aarch64: 2048 KB\n+\n+    -   macOS\/x64: 1024 KB\n+\n+    -   macOS\/Aarch64: 2048 KB\n+\n+    -   Windows: The default value depends on virtual memory\n+\n+    The following examples show how to set the thread stack size to 1 megabyte\n+    in different units:\n+\n+    ```\n+    -XX:ThreadStackSize=1k\n+    -XX:ThreadStackSize=1024\n+    ```\n+\n+    This option is similar to `-Xss`.\n+\n+`-XX:-UseCompressedOops`\n+:   Disables the use of compressed pointers. By default, this option is\n+    enabled, and compressed pointers are used. This will automatically limit\n+    the maximum ergonomically determined Java heap size to the maximum amount\n+    of memory that can be covered by compressed pointers. By default this range\n+    is 32 GB.\n+\n+    With compressed oops enabled, object references are represented\n+    as 32-bit offsets instead of 64-bit pointers, which typically increases\n+    performance when running the application with Java heap sizes smaller than\n+    the compressed oops pointer range. This option works only for 64-bit JVMs.\n+\n+    It's possible to use compressed pointers with Java heap sizes greater than\n+    32 GB. See the `-XX:ObjectAlignmentInBytes` option.\n+\n+`-XX:-UseContainerSupport`\n+:   **Linux only:** The VM now provides automatic container detection support, which allows the\n+    VM to determine the amount of memory and number of processors that are\n+    available to a Java process running in docker containers. It uses this\n+    information to allocate system resources. The default for this flag is `true`,\n+    and container support is enabled by default. It can be disabled\n+    with `-XX:-UseContainerSupport`.\n+\n+    Unified Logging is available to help to diagnose issues related to this\n+    support.\n+\n+    Use `-Xlog:os+container=trace` for maximum logging of container\n+    information. See [Enable Logging with the JVM Unified Logging Framework]\n+    for a description of using Unified Logging.\n+\n+`-XX:+UseLargePages`\n+:   Enables the use of large page memory. By default, this option is disabled\n+    and large page memory isn't used.\n+\n+    See [Large Pages].\n+\n+`-XX:+UseTransparentHugePages`\n+:   **Linux only:** Enables the use of large pages that can dynamically grow or\n+    shrink. This option is disabled by default. You may encounter performance\n+    problems with transparent huge pages as the OS moves other pages around to\n+    create huge pages; this option is made available for experimentation.\n+\n+`-XX:+AllowUserSignalHandlers`\n+:   **Non-Windows:** Enables installation of signal handlers by the application. By default,\n+    this option is disabled and the application isn't allowed to install signal\n+    handlers.\n+\n+`-XX:VMOptionsFile=`*filename*\n+:   Allows user to specify VM options in a file, for example,\n+    `java -XX:VMOptionsFile=\/var\/my_vm_options HelloWorld`.\n+\n+`-XX:UseBranchProtection=`*mode*\n+:   **Linux AArch64 only:** Specifies the branch protection mode.\n+    All options other than\n+    `none` require the VM to have been built with branch protection\n+    enabled. In addition, for full protection, any native libraries\n+    provided by applications should be compiled with the same level\n+    of protection.\n+\n+    Possible *mode* arguments for this option include the following:\n+\n+    `none`\n+    : Do not use branch protection. This is the default value.\n+\n+    `standard`\n+    : Enables all branch protection modes available on the current platform.\n+\n+    `pac-ret`\n+    : Enables protection against ROP based attacks. (AArch64 8.3+ only)\n+\n+## Advanced JIT Compiler Options for java\n+\n+These `java` options control the dynamic just-in-time (JIT) compilation\n+performed by the Java HotSpot VM.\n+\n+`-XX:AllocateInstancePrefetchLines=`*lines*\n+:   Sets the number of lines to prefetch ahead of the instance allocation\n+    pointer. By default, the number of lines to prefetch is set to 1:\n+\n+    >   `-XX:AllocateInstancePrefetchLines=1`\n+\n+\n+`-XX:AllocatePrefetchDistance=`*size*\n+:   Sets the size (in bytes) of the prefetch distance for object allocation.\n+    Memory about to be written with the value of new objects is prefetched up\n+    to this distance starting from the address of the last allocated object.\n+    Each Java thread has its own allocation point.\n+\n+    Negative values denote that prefetch distance is chosen based on the\n+    platform. Positive values are bytes to prefetch. Append the letter `k` or\n+    `K` to indicate kilobytes, `m` or `M` to indicate megabytes, or `g` or `G`\n+    to indicate gigabytes. The default value is set to -1.\n+\n+    The following example shows how to set the prefetch distance to 1024 bytes:\n+\n+    >   `-XX:AllocatePrefetchDistance=1024`\n+\n+\n+`-XX:AllocatePrefetchInstr=`*instruction*\n+:   Sets the prefetch instruction to prefetch ahead of the allocation pointer.\n+    Possible values are from 0 to 3. The actual instructions behind the values\n+    depend on the platform. By default, the prefetch instruction is set to 0:\n+\n+    >   `-XX:AllocatePrefetchInstr=0`\n+\n+\n+`-XX:AllocatePrefetchLines=`*lines*\n+:   Sets the number of cache lines to load after the last object allocation by\n+    using the prefetch instructions generated in compiled code. The default\n+    value is 1 if the last allocated object was an instance, and 3 if it was an\n+    array.\n+\n+    The following example shows how to set the number of loaded cache lines to\n+    5:\n+\n+    >   `-XX:AllocatePrefetchLines=5`\n+\n+\n+`-XX:AllocatePrefetchStepSize=`*size*\n+:   Sets the step size (in bytes) for sequential prefetch instructions. Append\n+    the letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate\n+    megabytes, `g` or `G` to indicate gigabytes. By default, the step size is\n+    set to 16 bytes:\n+\n+    >   `-XX:AllocatePrefetchStepSize=16`\n+\n+\n+`-XX:AllocatePrefetchStyle=`*style*\n+:   Sets the generated code style for prefetch instructions. The *style*\n+    argument is an integer from 0 to 3:\n+\n+    `0`\n+    :   Don't generate prefetch instructions.\n+\n+    `1`\n+    :   Execute prefetch instructions after each allocation. This is the\n+        default setting.\n+\n+    `2`\n+    :   Use the thread-local allocation block (TLAB) watermark pointer to\n+        determine when prefetch instructions are executed.\n+\n+    `3`\n+    :   Generate one prefetch instruction per cache line.\n+\n+\n+`-XX:+BackgroundCompilation`\n+:   Enables background compilation. This option is enabled by default. To\n+    disable background compilation, specify `-XX:-BackgroundCompilation` (this\n+    is equivalent to specifying `-Xbatch`).\n+\n+`-XX:CICompilerCount=`*threads*\n+:   Sets the number of compiler threads to use for compilation.\n+    By default, the number of compiler threads is selected automatically\n+    depending on the number of CPUs and memory available for compiled code.\n+    The following example shows how to set the number of threads to 2:\n+\n+    >   `-XX:CICompilerCount=2`\n+\n+`-XX:+UseDynamicNumberOfCompilerThreads`\n+:   Dynamically create compiler thread up to the limit specified by `-XX:CICompilerCount`.\n+    This option is enabled by default.\n+\n+`-XX:CompileCommand=`*command*`,`*method*\\[`,`*option*\\]\n+:   Specifies a *command* to perform on a *method*. For example, to exclude the\n+    `indexOf()` method of the `String` class from being compiled, use the\n+    following:\n+\n+    >   `-XX:CompileCommand=exclude,java\/lang\/String.indexOf`\n+\n+    Note that the full class name is specified, including all packages and\n+    subpackages separated by a slash (`\/`). For easier cut-and-paste\n+    operations, it's also possible to use the method name format produced by\n+    the `-XX:+PrintCompilation` and `-XX:+LogCompilation` options:\n+\n+    >   `-XX:CompileCommand=exclude,java.lang.String::indexOf`\n+\n+    If the method is specified without the signature, then the command is\n+    applied to all methods with the specified name. However, you can also\n+    specify the signature of the method in the class file format. In this case,\n+    you should enclose the arguments in quotation marks, because otherwise the\n+    shell treats the semicolon as a command end. For example, if you want to\n+    exclude only the `indexOf(String)` method of the `String` class from being\n+    compiled, use the following:\n+\n+    >   `-XX:CompileCommand=\"exclude,java\/lang\/String.indexOf,(Ljava\/lang\/String;)I\"`\n+\n+    You can also use the asterisk (\\*) as a wildcard for class and method\n+    names. For example, to exclude all `indexOf()` methods in all classes from\n+    being compiled, use the following:\n+\n+    >   `-XX:CompileCommand=exclude,*.indexOf`\n+\n+    The commas and periods are aliases for spaces, making it easier to pass\n+    compiler commands through a shell. You can pass arguments to\n+    `-XX:CompileCommand` using spaces as separators by enclosing the argument\n+    in quotation marks:\n+\n+    >   `-XX:CompileCommand=\"exclude java\/lang\/String indexOf\"`\n+\n+    Note that after parsing the commands passed on the command line using the\n+    `-XX:CompileCommand` options, the JIT compiler then reads commands from the\n+    `.hotspot_compiler` file. You can add commands to this file or specify a\n+    different file using the `-XX:CompileCommandFile` option.\n+\n+    To add several commands, either specify the `-XX:CompileCommand` option\n+    multiple times, or separate each argument with the new line separator\n+    (`\\n`). The following commands are available:\n+\n+    `break`\n+    :   Sets a breakpoint when debugging the JVM to stop at the beginning of\n+        compilation of the specified method.\n+\n+    `compileonly`\n+    :   Excludes all methods from compilation except for the specified method.\n+        As an alternative, you can use the `-XX:CompileOnly` option, which lets\n+        you specify several methods.\n+\n+    `dontinline`\n+    :   Prevents inlining of the specified method.\n+\n+    `exclude`\n+    :   Excludes the specified method from compilation.\n+\n+    `help`\n+    :   Prints a help message for the `-XX:CompileCommand` option.\n+\n+    `inline`\n+    :   Attempts to inline the specified method.\n+\n+    `log`\n+    :   Excludes compilation logging (with the `-XX:+LogCompilation` option)\n+        for all methods except for the specified method. By default, logging is\n+        performed for all compiled methods.\n+\n+    `option`\n+    :   Passes a JIT compilation option to the specified method in place of the\n+        last argument (`option`). The compilation option is set at the end,\n+        after the method name. For example, to enable the\n+        `BlockLayoutByFrequency` option for the `append()` method of the\n+        `StringBuffer` class, use the following:\n+\n+        >   `-XX:CompileCommand=option,java\/lang\/StringBuffer.append,BlockLayoutByFrequency`\n+\n+        You can specify multiple compilation options, separated by commas or\n+        spaces.\n+\n+    `print`\n+    :   Prints generated assembler code after compilation of the specified\n+        method.\n+\n+    `quiet`\n+    :   Instructs not to print the compile commands. By default, the commands\n+        that you specify with the `-XX:CompileCommand` option are printed; for\n+        example, if you exclude from compilation the `indexOf()` method of the\n+        `String` class, then the following is printed to standard output:\n+\n+        >   `CompilerOracle: exclude java\/lang\/String.indexOf`\n+\n+        You can suppress this by specifying the `-XX:CompileCommand=quiet`\n+        option before other `-XX:CompileCommand` options.\n+\n+`-XX:CompileCommandFile=`*filename*\n+:   Sets the file from which JIT compiler commands are read. By default, the\n+    `.hotspot_compiler` file is used to store commands performed by the JIT\n+    compiler.\n+\n+    Each line in the command file represents a command, a class name, and a\n+    method name for which the command is used. For example, this line prints\n+    assembly code for the `toString()` method of the `String` class:\n+\n+    >   `print java\/lang\/String toString`\n+\n+    If you're using commands for the JIT compiler to perform on methods, then\n+    see the `-XX:CompileCommand` option.\n+\n+`-XX:CompilerDirectivesFile=`*file*\n+:   Adds directives from a file to the directives stack when a program starts.\n+    See [Compiler Control](https:\/\/docs.oracle.com\/en\/java\/javase\/12\/vm\/compiler-control1.html#GUID-94AD8194-786A-4F19-BFFF-278F8E237F3A).\n+\n+    The `-XX:CompilerDirectivesFile` option has to be used together with the\n+    `-XX:UnlockDiagnosticVMOptions` option that unlocks diagnostic JVM options.\n+\n+\n+`-XX:+CompilerDirectivesPrint`\n+:   Prints the directives stack when the program starts or when a new directive\n+    is added.\n+\n+    The `-XX:+CompilerDirectivesPrint` option has to be used together with the\n+    `-XX:UnlockDiagnosticVMOptions` option that unlocks diagnostic JVM options.\n+\n+`-XX:CompileOnly=`*methods*\n+:   Sets the list of methods (separated by commas) to which compilation should\n+    be restricted. Only the specified methods are compiled.\n+\n+    `-XX:CompileOnly=method1,method2,...,methodN` is an alias for:\n+    ```\n+    -XX:CompileCommand=compileonly,method1\n+    -XX:CompileCommand=compileonly,method2\n+    ...\n+    -XX:CompileCommand=compileonly,methodN\n+    ```\n+\n+`-XX:CompileThresholdScaling=`*scale*\n+:   Provides unified control of first compilation. This option controls when\n+    methods are first compiled for both the tiered and the nontiered modes of\n+    operation. The `CompileThresholdScaling` option has a floating point value\n+    between 0 and +Inf and scales the thresholds corresponding to the current\n+    mode of operation (both tiered and nontiered). Setting\n+    `CompileThresholdScaling` to a value less than 1.0 results in earlier\n+    compilation while values greater than 1.0 delay compilation. Setting\n+    `CompileThresholdScaling` to 0 is equivalent to disabling compilation.\n+\n+`-XX:+DoEscapeAnalysis`\n+:   Enables the use of escape analysis. This option is enabled by default. To\n+    disable the use of escape analysis, specify `-XX:-DoEscapeAnalysis`.\n+\n+`-XX:InitialCodeCacheSize=`*size*\n+:   Sets the initial code cache size (in bytes). Append the letter `k` or `K`\n+    to indicate kilobytes, `m` or `M` to indicate megabytes, or `g` or `G` to\n+    indicate gigabytes. The default value depends on the platform. The initial code\n+    cache size shouldn't be less than the system's minimal memory page size.\n+    The following example shows how to set the initial code cache size to 32\n+    KB:\n+\n+    >   `-XX:InitialCodeCacheSize=32k`\n+\n+`-XX:+Inline`\n+:   Enables method inlining. This option is enabled by default to increase\n+    performance. To disable method inlining, specify `-XX:-Inline`.\n+\n+`-XX:InlineSmallCode=`*size*\n+:   Sets the maximum code size (in bytes) for already compiled methods\n+    that may be inlined. This flag only applies to the C2 compiler.\n+    Append the letter `k` or `K` to indicate kilobytes,\n+    `m` or `M` to indicate megabytes, or `g` or `G` to indicate gigabytes.\n+    The default value depends on the platform and on whether tiered compilation\n+    is enabled. In the following example it is set to 1000 bytes:\n+\n+    >   `-XX:InlineSmallCode=1000`\n+\n+`-XX:+LogCompilation`\n+:   Enables logging of compilation activity to a file named `hotspot.log` in\n+    the current working directory. You can specify a different log file path\n+    and name using the `-XX:LogFile` option.\n+\n+    By default, this option is disabled and compilation activity isn't logged.\n+    The `-XX:+LogCompilation` option has to be used together with the\n+    `-XX:UnlockDiagnosticVMOptions` option that unlocks diagnostic JVM options.\n+\n+    You can enable verbose diagnostic output with a message printed to the\n+    console every time a method is compiled by using the\n+    `-XX:+PrintCompilation` option.\n+\n+\n+`-XX:FreqInlineSize=`*size*\n+:   Sets the maximum bytecode size (in bytes) of a hot method to be inlined.\n+    This flag only applies to the C2 compiler. Append\n+    the letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate\n+    megabytes, or `g` or `G` to indicate gigabytes. The default value depends\n+    on the platform. In the following example it is set to 325 bytes:\n+\n+    >   `-XX:FreqInlineSize=325`\n+\n+\n+`-XX:MaxInlineSize=`*size*\n+:   Sets the maximum bytecode size (in bytes) of a cold method to be inlined.\n+    This flag only applies to the C2 compiler.\n+    Append the letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate\n+    megabytes, or `g` or `G` to indicate gigabytes. By default, the maximum\n+    bytecode size is set to 35 bytes:\n+\n+    >   `-XX:MaxInlineSize=35`\n+\n+`-XX:C1MaxInlineSize=`*size*\n+:   Sets the maximum bytecode size (in bytes) of a cold method to be inlined.\n+    This flag only applies to the C1 compiler.\n+    Append the letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate\n+    megabytes, or `g` or `G` to indicate gigabytes. By default, the maximum\n+    bytecode size is set to 35 bytes:\n+\n+    >   `-XX:MaxInlineSize=35`\n+\n+`-XX:MaxTrivialSize=`*size*\n+:   Sets the maximum bytecode size (in bytes) of a trivial method to be\n+    inlined. This flag only applies to the C2 compiler.\n+    Append the letter `k` or `K` to indicate kilobytes, `m` or `M` to\n+    indicate megabytes, or `g` or `G` to indicate gigabytes. By default, the\n+    maximum bytecode size of a trivial method is set to 6 bytes:\n+\n+    >   `-XX:MaxTrivialSize=6`\n+\n+`-XX:C1MaxTrivialSize=`*size*\n+:   Sets the maximum bytecode size (in bytes) of a trivial method to be\n+    inlined. This flag only applies to the C1 compiler.\n+    Append the letter `k` or `K` to indicate kilobytes, `m` or `M` to\n+    indicate megabytes, or `g` or `G` to indicate gigabytes. By default, the\n+    maximum bytecode size of a trivial method is set to 6 bytes:\n+\n+    >   `-XX:MaxTrivialSize=6`\n+\n+`-XX:MaxNodeLimit=`*nodes*\n+:   Sets the maximum number of nodes to be used during single method\n+    compilation. By default the value depends on the features enabled.\n+    In the following example the maximum number of nodes is set to 100,000:\n+\n+    >   `-XX:MaxNodeLimit=100000`\n+\n+`-XX:NonNMethodCodeHeapSize=`*size*\n+:   Sets the size in bytes of the code segment containing nonmethod code.\n+\n+    A nonmethod code segment containing nonmethod code, such as compiler\n+    buffers and the bytecode interpreter. This code type stays in the code\n+    cache forever. This flag is used only if `-XX:SegmentedCodeCache` is\n+    enabled.\n+\n+`-XX:NonProfiledCodeHeapSize=`*size*\n+:   Sets the size in bytes of the code segment containing nonprofiled methods.\n+    This flag is used only if `-XX:SegmentedCodeCache` is enabled.\n+\n+`-XX:+OptimizeStringConcat`\n+:   Enables the optimization of `String` concatenation operations. This option\n+    is enabled by default. To disable the optimization of `String`\n+    concatenation operations, specify `-XX:-OptimizeStringConcat`.\n+\n+`-XX:+PrintAssembly`\n+:   Enables printing of assembly code for bytecoded and native methods by using\n+    the external `hsdis-<arch>.so` or `.dll` library. For 64-bit VM on Windows,\n+    it's `hsdis-amd64.dll`. This lets you to see the generated code, which may\n+    help you to diagnose performance issues.\n+\n+    By default, this option is disabled and assembly code isn't printed. The\n+    `-XX:+PrintAssembly` option has to be used together with the\n+    `-XX:UnlockDiagnosticVMOptions` option that unlocks diagnostic JVM options.\n+\n+`-XX:ProfiledCodeHeapSize=`*size*\n+:   Sets the size in bytes of the code segment containing profiled methods.\n+    This flag is used only if `-XX:SegmentedCodeCache` is enabled.\n+\n+`-XX:+PrintCompilation`\n+:   Enables verbose diagnostic output from the JVM by printing a message to the\n+    console every time a method is compiled. This lets you to see which methods\n+    actually get compiled. By default, this option is disabled and diagnostic\n+    output isn't printed.\n+\n+    You can also log compilation activity to a file by using the\n+    `-XX:+LogCompilation` option.\n+\n+`-XX:+PrintInlining`\n+:   Enables printing of inlining decisions. This let's you see which methods\n+    are getting inlined.\n+\n+    By default, this option is disabled and inlining information isn't printed.\n+    The `-XX:+PrintInlining` option has to be used together with the\n+    `-XX:+UnlockDiagnosticVMOptions` option that unlocks diagnostic JVM\n+    options.\n+\n+`-XX:ReservedCodeCacheSize=`*size*\n+:   Sets the maximum code cache size (in bytes) for JIT-compiled code. Append\n+    the letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate\n+    megabytes, or `g` or `G` to indicate gigabytes. The default maximum code\n+    cache size is 240 MB; if you disable tiered compilation with the option\n+    `-XX:-TieredCompilation`, then the default size is 48 MB. This option has a\n+    limit of 2 GB; otherwise, an error is generated. The maximum code cache\n+    size shouldn't be less than the initial code cache size; see the option\n+    `-XX:InitialCodeCacheSize`.\n+\n+`-XX:+SegmentedCodeCache`\n+:   Enables segmentation of the code cache, without which the code cache\n+    consists of one large segment. With `-XX:+SegmentedCodeCache`, separate\n+    segments will be used for non-method, profiled method, and non-profiled\n+    method code. The segments are not resized at runtime. The advantages are\n+    better control of the memory footprint, reduced code fragmentation, and\n+    better CPU iTLB (instruction translation lookaside buffer) and instruction\n+    cache behavior due to improved locality.\n+\n+    The feature is enabled by default if tiered compilation is enabled\n+    (`-XX:+TieredCompilation` ) and the reserved code cache size\n+    (`-XX:ReservedCodeCacheSize`) is at least 240 MB.\n+\n+`-XX:StartAggressiveSweepingAt=`*percent*\n+:   Forces stack scanning of active methods to aggressively remove unused code\n+    when only the given percentage of the code cache is free. The default value\n+    is 10%.\n+\n+`-XX:-TieredCompilation`\n+:   Disables the use of tiered compilation. By default, this option is enabled.\n+\n+`-XX:UseSSE=`*version*\n+:   Enables the use of SSE instruction set of a specified version.\n+    Is set by default to the highest supported version available (x86 only).\n+\n+`-XX:UseAVX=`*version*\n+:   Enables the use of AVX instruction set of a specified version.\n+    Is set by default to the highest supported version available (x86 only).\n+\n+`-XX:+UseAES`\n+:   Enables hardware-based AES intrinsics for hardware that supports it.\n+    This option is on by default on hardware that has the necessary instructions.\n+    The `-XX:+UseAES` is used in conjunction with `UseAESIntrinsics`. Flags\n+    that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseAESIntrinsics`\n+:   Enables AES intrinsics. Specifying `-XX:+UseAESIntrinsics` is equivalent to\n+    also enabling `-XX:+UseAES`. To disable hardware-based AES intrinsics,\n+    specify `-XX:-UseAES -XX:-UseAESIntrinsics`. For example, to enable hardware\n+    AES, use the following flags:\n+\n+    >   `-XX:+UseAES -XX:+UseAESIntrinsics`\n+\n+    Flags that control intrinsics now require the option\n+    `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseAESCTRIntrinsics`\n+:   Analogous to `-XX:+UseAESIntrinsics` enables AES\/CTR intrinsics.\n+\n+`-XX:+UseGHASHIntrinsics`\n+:   Controls the use of GHASH intrinsics. Enabled by default on platforms that\n+    support the corresponding instructions.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseChaCha20Intrinsics`\n+:   Enable ChaCha20 intrinsics. This option is on by default for supported\n+    platforms.  To disable ChaCha20 intrinsics, specify\n+    `-XX:-UseChaCha20Intrinsics`. Flags that control intrinsics now require\n+    the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UsePoly1305Intrinsics`\n+:   Enable Poly1305 intrinsics. This option is on by default for supported\n+    platforms.  To disable Poly1305 intrinsics, specify\n+    `-XX:-UsePoly1305Intrinsics`. Flags that control intrinsics now require\n+    the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseBASE64Intrinsics`\n+:   Controls the use of accelerated BASE64 encoding routines for `java.util.Base64`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseAdler32Intrinsics`\n+:   Controls the use of Adler32 checksum algorithm intrinsic for `java.util.zip.Adler32`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseCRC32Intrinsics`\n+:   Controls the use of CRC32 intrinsics for `java.util.zip.CRC32`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseCRC32CIntrinsics`\n+:   Controls the use of CRC32C intrinsics for `java.util.zip.CRC32C`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseSHA`\n+:   Enables hardware-based intrinsics for SHA crypto hash functions for some\n+    hardware. The `UseSHA` option is used in conjunction with the\n+    `UseSHA1Intrinsics`, `UseSHA256Intrinsics`, and `UseSHA512Intrinsics`\n+    options.\n+\n+    The `UseSHA` and `UseSHA*Intrinsics` flags are enabled by default on\n+    machines that support the corresponding instructions.\n+\n+    This feature is applicable only when using the `sun.security.provider.Sun`\n+    provider for SHA operations. Flags that control intrinsics now require the\n+    option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+    To disable all hardware-based SHA intrinsics, specify the `-XX:-UseSHA`. To\n+    disable only a particular SHA intrinsic, use the appropriate corresponding\n+    option. For example: `-XX:-UseSHA256Intrinsics`.\n+\n+`-XX:+UseSHA1Intrinsics`\n+:   Enables intrinsics for SHA-1 crypto hash function. Flags that control\n+    intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseSHA256Intrinsics`\n+:   Enables intrinsics for SHA-224 and SHA-256 crypto hash functions. Flags\n+    that control intrinsics now require the option\n+    `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseSHA512Intrinsics`\n+:   Enables intrinsics for SHA-384 and SHA-512 crypto hash functions. Flags\n+    that control intrinsics now require the option\n+    `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseMathExactIntrinsics`\n+:   Enables intrinsification of various `java.lang.Math.*Exact()` functions.\n+    Enabled by default.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseMultiplyToLenIntrinsic`\n+:   Enables intrinsification of `BigInteger.multiplyToLen()`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+-XX:+UseSquareToLenIntrinsic\n+:   Enables intrinsification of `BigInteger.squareToLen()`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+-XX:+UseMulAddIntrinsic\n+:   Enables intrinsification of `BigInteger.mulAdd()`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+-XX:+UseMontgomeryMultiplyIntrinsic\n+:   Enables intrinsification of `BigInteger.montgomeryMultiply()`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+-XX:+UseMontgomerySquareIntrinsic\n+:   Enables intrinsification of `BigInteger.montgomerySquare()`.\n+    Enabled by default on platforms that support it.\n+    Flags that control intrinsics now require the option `-XX:+UnlockDiagnosticVMOptions`.\n+\n+`-XX:+UseCMoveUnconditionally`\n+:   Generates CMove (scalar and vector) instructions regardless of\n+    profitability analysis.\n+\n+`-XX:+UseCodeCacheFlushing`\n+:   Enables flushing of the code cache before shutting down the compiler. This\n+    option is enabled by default. To disable flushing of the code cache before\n+    shutting down the compiler, specify `-XX:-UseCodeCacheFlushing`.\n+\n+`-XX:+UseCondCardMark`\n+:   Enables checking if the card is already marked before updating the card\n+    table. This option is disabled by default. It should be used only on\n+    machines with multiple sockets, where it increases the performance of Java\n+    applications that rely on concurrent operations.\n+\n+`-XX:+UseCountedLoopSafepoints`\n+:   Keeps safepoints in counted loops. Its default value depends on whether the\n+    selected garbage collector requires low latency safepoints.\n+\n+`-XX:LoopStripMiningIter=`*number_of_iterations*\n+:   Controls the number of iterations in the inner strip mined loop. Strip mining\n+    transforms counted loops into two level nested loops. Safepoints are kept\n+    in the outer loop while the inner loop can execute at full speed. This option\n+    controls the maximum number of iterations in the inner loop. The default value\n+    is 1,000.\n+\n+`-XX:LoopStripMiningIterShortLoop=`*number_of_iterations*\n+:   Controls loop strip mining optimization. Loops with the number of iterations\n+    less than specified will not have safepoints in them. Default value is\n+    1\/10th of `-XX:LoopStripMiningIter`.\n+\n+`-XX:+UseFMA`\n+:   Enables hardware-based FMA intrinsics for hardware where FMA instructions\n+    are available (such as, Intel and ARM64). FMA intrinsics are\n+    generated for the `java.lang.Math.fma(`*a*`,` *b*`,` *c*`)` methods that\n+    calculate the value of `(` *a* `*` *b* `+` *c* `)` expressions.\n+\n+`-XX:+UseSuperWord`\n+:   Enables the transformation of scalar operations into superword operations.\n+    Superword is a vectorization optimization. This option is enabled by\n+    default. To disable the transformation of scalar operations into superword\n+    operations, specify `-XX:-UseSuperWord`.\n+\n+## Advanced Serviceability Options for Java\n+\n+These `java` options provide the ability to gather system information and\n+perform extensive debugging.\n+\n+`-XX:+DisableAttachMechanism`\n+:   Disables the mechanism that lets tools attach to the JVM. By default, this\n+    option is disabled, meaning that the attach mechanism is enabled and you\n+    can use diagnostics and troubleshooting tools such as `jcmd`, `jstack`,\n+    `jmap`, and `jinfo`.\n+\n+    > **Note:** The tools such as [jcmd](jcmd.html), [jinfo](jinfo.html),\n+    [jmap](jmap.html), and [jstack](jstack.html) shipped with the JDK aren't\n+    supported when using the tools from one JDK version to troubleshoot a\n+    different JDK version.\n+\n+`-XX:+DTraceAllocProbes`\n+:   **Linux and macOS:** Enable `dtrace` tool probes for object allocation.\n+\n+`-XX:+DTraceMethodProbes`\n+:   **Linux and macOS:** Enable `dtrace` tool probes for method-entry\n+    and method-exit.\n+\n+`-XX:+DTraceMonitorProbes`\n+:   **Linux and macOS:** Enable `dtrace` tool probes for monitor events.\n+\n+`-XX:+HeapDumpOnOutOfMemoryError`\n+:   Enables the dumping of the Java heap to a file in the current directory by\n+    using the heap profiler (HPROF) when a `java.lang.OutOfMemoryError`\n+    exception is thrown. You can explicitly set the heap dump file path and\n+    name using the `-XX:HeapDumpPath` option. By default, this option is\n+    disabled and the heap isn't dumped when an `OutOfMemoryError` exception is\n+    thrown.\n+\n+`-XX:HeapDumpPath=`*path*\n+:   Sets the path and file name for writing the heap dump provided by the heap\n+    profiler (HPROF) when the `-XX:+HeapDumpOnOutOfMemoryError` option is set.\n+    By default, the file is created in the current working directory, and it's\n+    named `java_pid<pid>.hprof` where `<pid>` is the identifier of the process\n+    that caused the error. The following example shows how to set the default\n+    file explicitly (`%p` represents the current process identifier):\n+\n+    >   `-XX:HeapDumpPath=.\/java_pid%p.hprof`\n+\n+    -   **Non-Windows:** The following example shows how to\n+        set the heap dump file to `\/var\/log\/java\/java_heapdump.hprof`:\n+\n+        >   `-XX:HeapDumpPath=\/var\/log\/java\/java_heapdump.hprof`\n+\n+    -   **Windows:** The following example shows how to set the heap dump file\n+        to `C:\/log\/java\/java_heapdump.log`:\n+\n+        >   `-XX:HeapDumpPath=C:\/log\/java\/java_heapdump.log`\n+\n+`-XX:LogFile=`*path*\n+:   Sets the path and file name to where log data is written. By default, the\n+    file is created in the current working directory, and it's named\n+    `hotspot.log`.\n+\n+    -   **Non-Windows:** The following example shows how to\n+        set the log file to `\/var\/log\/java\/hotspot.log`:\n+\n+        >   `-XX:LogFile=\/var\/log\/java\/hotspot.log`\n+\n+    -   **Windows:** The following example shows how to set the log file to\n+        `C:\/log\/java\/hotspot.log`:\n+\n+        >   `-XX:LogFile=C:\/log\/java\/hotspot.log`\n+\n+`-XX:+PrintClassHistogram`\n+:   Enables printing of a class instance histogram after one of the following\n+    events:\n+\n+    -   **Non-Windows:** `Control+\\` (`SIGQUIT`)\n+\n+    -   **Windows:** `Control+C` (`SIGTERM`)\n+\n+    By default, this option is disabled.\n+\n+    Setting this option is equivalent to running the `jmap -histo` command, or\n+    the `jcmd` *pid* `GC.class_histogram` command, where *pid* is the current\n+    Java process identifier.\n+\n+`-XX:+PrintConcurrentLocks`\n+:   Enables printing of `java.util.concurrent` locks after one of the following\n+    events:\n+\n+    -   **Non-Windows:** `Control+\\` (`SIGQUIT`)\n+\n+    -   **Windows:** `Control+C` (`SIGTERM`)\n+\n+    By default, this option is disabled.\n+\n+    Setting this option is equivalent to running the `jstack -l` command or the\n+    `jcmd` *pid* `Thread.print -l` command, where *pid* is the current Java\n+    process identifier.\n+\n+`-XX:+PrintFlagsRanges`\n+:   Prints the range specified and allows automatic testing of the values. See\n+    [Validate Java Virtual Machine Flag\n+    Arguments].\n+\n+`-XX:+PerfDataSaveToFile`\n+:   If enabled, saves [jstat](jstat.html) binary data when the Java application\n+    exits. This binary data is saved in a file named `hsperfdata_`*pid*, where\n+    *pid* is the process identifier of the Java application that you ran. Use\n+    the `jstat` command to display the performance data contained in this file\n+    as follows:\n+\n+    >   `jstat -class file:\/\/\/`*path*`\/hsperfdata_`*pid*\n+\n+    >   `jstat -gc file:\/\/\/`*path*`\/hsperfdata_`*pid*\n+\n+`-XX:+UsePerfData`\n+:   Enables the `perfdata` feature. This option is enabled by default to allow\n+    JVM monitoring and performance testing. Disabling it suppresses the\n+    creation of the `hsperfdata_userid` directories. To disable the `perfdata`\n+    feature, specify `-XX:-UsePerfData`.\n+\n+## Advanced Garbage Collection Options for Java\n+\n+These `java` options control how garbage collection (GC) is performed by the\n+Java HotSpot VM.\n+\n+`-XX:+AggressiveHeap`\n+:   Enables Java heap optimization. This sets various parameters to be\n+    optimal for long-running jobs with intensive memory allocation, based on\n+    the configuration of the computer (RAM and CPU). By default, the option\n+    is disabled and the heap sizes are configured less aggressively.\n+\n+`-XX:+AlwaysPreTouch`\n+:   Requests the VM to touch every page on the Java heap after requesting it from\n+    the operating system and before handing memory out to the application.\n+    By default, this option is disabled and all pages are committed as the\n+    application uses the heap space.\n+\n+`-XX:ConcGCThreads=`*threads*\n+:   Sets the number of threads used for concurrent GC. Sets *`threads`* to\n+    approximately 1\/4 of the number of parallel garbage collection threads. The\n+    default value depends on the number of CPUs available to the JVM.\n+\n+    For example, to set the number of threads for concurrent GC to 2, specify\n+    the following option:\n+\n+    >   `-XX:ConcGCThreads=2`\n+\n+`-XX:+DisableExplicitGC`\n+:   Enables the option that disables processing of calls to the `System.gc()`\n+    method. This option is disabled by default, meaning that calls to\n+    `System.gc()` are processed. If processing of calls to `System.gc()` is\n+    disabled, then the JVM still performs GC when necessary.\n+\n+`-XX:+ExplicitGCInvokesConcurrent`\n+:   Enables invoking of concurrent GC by using the `System.gc()` request. This\n+    option is disabled by default and can be enabled only with the `-XX:+UseG1GC` option.\n+\n+`-XX:G1AdaptiveIHOPNumInitialSamples=`*number*\n+:   When `-XX:UseAdaptiveIHOP` is enabled, this option sets the number of\n+    completed marking cycles used to gather samples until G1 adaptively\n+    determines the optimum value of `-XX:InitiatingHeapOccupancyPercent`. Before,\n+    G1 uses the value of `-XX:InitiatingHeapOccupancyPercent` directly for\n+    this purpose. The default value is 3.\n+\n+`-XX:G1HeapRegionSize=`*size*\n+:   Sets the size of the regions into which the Java heap is subdivided when\n+    using the garbage-first (G1) collector. The value is a power of 2 and can\n+    range from 1 MB to 32 MB. The default region size is determined\n+    ergonomically based on the heap size with a goal of approximately 2048\n+    regions.\n+\n+    The following example sets the size of the subdivisions to 16 MB:\n+\n+    >   `-XX:G1HeapRegionSize=16m`\n+\n+`-XX:G1HeapWastePercent=`*percent*\n+:   Sets the percentage of heap that you're willing to waste. The Java HotSpot\n+    VM doesn't initiate the mixed garbage collection cycle when the reclaimable\n+    percentage is less than the heap waste percentage. The default is 5\n+    percent.\n+\n+`-XX:G1MaxNewSizePercent=`*percent*\n+:   Sets the percentage of the heap size to use as the maximum for the young\n+    generation size. The default value is 60 percent of your Java heap.\n+\n+    This is an experimental flag. This setting replaces the\n+    `-XX:DefaultMaxNewGenPercent` setting.\n+\n+`-XX:G1MixedGCCountTarget=`*number*\n+:   Sets the target number of mixed garbage collections after a marking cycle\n+    to collect old regions with at most `G1MixedGCLIveThresholdPercent` live\n+    data. The default is 8 mixed garbage collections. The goal for mixed\n+    collections is to be within this target number.\n+\n+`-XX:G1MixedGCLiveThresholdPercent=`*percent*\n+:   Sets the occupancy threshold for an old region to be included in a mixed\n+    garbage collection cycle. The default occupancy is 85 percent.\n+\n+    This is an experimental flag. This setting replaces the\n+    `-XX:G1OldCSetRegionLiveThresholdPercent` setting.\n+\n+`-XX:G1NewSizePercent=`*percent*\n+:   Sets the percentage of the heap to use as the minimum for the young\n+    generation size. The default value is 5 percent of your Java heap.\n+\n+    This is an experimental flag. This setting replaces the\n+    `-XX:DefaultMinNewGenPercent` setting.\n+\n+`-XX:G1OldCSetRegionThresholdPercent=`*percent*\n+:   Sets an upper limit on the number of old regions to be collected during a\n+    mixed garbage collection cycle. The default is 10 percent of the Java heap.\n+\n+`-XX:G1ReservePercent=`*percent*\n+:   Sets the percentage of the heap (0 to 50) that's reserved as a false\n+    ceiling to reduce the possibility of promotion failure for the G1\n+    collector. When you increase or decrease the percentage, ensure that you\n+    adjust the total Java heap by the same amount. By default, this option is\n+    set to 10%.\n+\n+    The following example sets the reserved heap to 20%:\n+\n+    >   `-XX:G1ReservePercent=20`\n+\n+`-XX:+G1UseAdaptiveIHOP`\n+:   Controls adaptive calculation of the old generation occupancy to start\n+    background work preparing for an old generation collection. If enabled,\n+    G1 uses `-XX:InitiatingHeapOccupancyPercent` for the first few times as\n+    specified by the value of `-XX:G1AdaptiveIHOPNumInitialSamples`, and after\n+    that adaptively calculates a new optimum value for the initiating\n+    occupancy automatically.\n+    Otherwise, the old generation collection process always starts at the\n+    old generation occupancy determined by\n+    `-XX:InitiatingHeapOccupancyPercent`.\n+\n+    The default is enabled.\n+\n+`-XX:InitialHeapSize=`*size*\n+:   Sets the initial size (in bytes) of the memory allocation pool. This value\n+    must be either 0, or a multiple of 1024 and greater than 1 MB. Append the\n+    letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate megabytes,\n+    or `g` or `G` to indicate gigabytes. The default value is selected at run\n+    time based on the system configuration.\n+\n+    The following examples show how to set the size of allocated memory to 6 MB\n+    using various units:\n+\n+    ```\n+    -XX:InitialHeapSize=6291456\n+    -XX:InitialHeapSize=6144k\n+    -XX:InitialHeapSize=6m\n+    ```\n+\n+    If you set this option to 0, then the initial size is set as the sum of the\n+    sizes allocated for the old generation and the young generation. The size\n+    of the heap for the young generation can be set using the `-XX:NewSize`\n+    option. Note that the `-Xms` option sets both the minimum and the initial\n+    heap size of the heap. If `-Xms` appears after `-XX:InitialHeapSize` on the\n+    command line, then the initial heap size gets set to the value specified\n+    with `-Xms`.\n+\n+`-XX:InitialRAMPercentage=`*percent*\n+:   Sets the initial amount of memory that the JVM will use for the Java heap\n+    before applying ergonomics heuristics as a percentage of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option. The default value is\n+    1.5625 percent.\n+\n+    The following example shows how to set the percentage of the initial\n+    amount of memory used for the Java heap:\n+\n+    >   `-XX:InitialRAMPercentage=5`\n+\n+`-XX:InitialSurvivorRatio=`*ratio*\n+:   Sets the initial survivor space ratio used by the throughput garbage\n+    collector (which is enabled by the `-XX:+UseParallelGC` option). Adaptive\n+    sizing is enabled by default with the throughput garbage collector by\n+    using the `-XX:+UseParallelGC` option, and the survivor space is resized\n+    according to the application behavior, starting with the initial value. If\n+    adaptive sizing is disabled (using the `-XX:-UseAdaptiveSizePolicy`\n+    option), then the `-XX:SurvivorRatio` option should be used to set the size\n+    of the survivor space for the entire execution of the application.\n+\n+    The following formula can be used to calculate the initial size of survivor\n+    space (S) based on the size of the young generation (Y), and the initial\n+    survivor space ratio (R):\n+\n+    >   `S=Y\/(R+2)`\n+\n+    The 2 in the equation denotes two survivor spaces. The larger the value\n+    specified as the initial survivor space ratio, the smaller the initial\n+    survivor space size.\n+\n+    By default, the initial survivor space ratio is set to 8. If the default\n+    value for the young generation space size is used (2 MB), then the initial\n+    size of the survivor space is 0.2 MB.\n+\n+    The following example shows how to set the initial survivor space ratio to\n+    4:\n+\n+    >   `-XX:InitialSurvivorRatio=4`\n+\n+`-XX:InitiatingHeapOccupancyPercent=`*percent*\n+:   Sets the percentage of the old generation occupancy (0 to 100) at which to\n+    start the first few concurrent marking cycles for the G1 garbage collector.\n+\n+    By default, the initiating value is set to 45%. A value of 0 implies\n+    nonstop concurrent GC cycles from the beginning until G1 adaptively sets this\n+    value.\n+\n+    See also the `-XX:G1UseAdaptiveIHOP` and `-XX:G1AdaptiveIHOPNumInitialSamples`\n+    options.\n+\n+    The following example shows how to set the initiating heap occupancy to 75%:\n+\n+    >   `-XX:InitiatingHeapOccupancyPercent=75`\n+\n+`-XX:MaxGCPauseMillis=`*time*\n+:   Sets a target for the maximum GC pause time (in milliseconds). This is a\n+    soft goal, and the JVM will make its best effort to achieve it. The\n+    specified value doesn't adapt to your heap size. By default, for G1 the\n+    maximum pause time target is 200 milliseconds. The other generational\n+    collectors do not use a pause time goal by default.\n+\n+    The following example shows how to set the maximum target pause time to 500\n+    ms:\n+\n+    >   `-XX:MaxGCPauseMillis=500`\n+\n+`-XX:MaxHeapSize=`*size*\n+:   Sets the maximum size (in byes) of the memory allocation pool. This value\n+    must be a multiple of 1024 and greater than 2 MB. Append the letter `k` or\n+    `K` to indicate kilobytes, `m` or `M` to indicate megabytes, or `g` or `G`\n+    to indicate gigabytes. The default value is selected at run time based on\n+    the system configuration. For server deployments, the options\n+    `-XX:InitialHeapSize` and `-XX:MaxHeapSize` are often set to the same\n+    value.\n+\n+    The following examples show how to set the maximum allowed size of\n+    allocated memory to 80 MB using various units:\n+\n+    ```\n+    -XX:MaxHeapSize=83886080\n+    -XX:MaxHeapSize=81920k\n+    -XX:MaxHeapSize=80m\n+    ```\n+\n+    The `-XX:MaxHeapSize` option is equivalent to `-Xmx`.\n+\n+`-XX:MaxHeapFreeRatio=`*percent*\n+:   Sets the maximum allowed percentage of free heap space (0 to 100) after a\n+    GC event. If free heap space expands above this value, then the heap is\n+    shrunk. By default, this value is set to 70%.\n+\n+    Minimize the Java heap size by lowering the values of the parameters\n+    `MaxHeapFreeRatio` (default value is 70%) and `MinHeapFreeRatio` (default\n+    value is 40%) with the command-line options `-XX:MaxHeapFreeRatio` and\n+    `-XX:MinHeapFreeRatio`. Lowering `MaxHeapFreeRatio` to as low as 10% and\n+    `MinHeapFreeRatio` to 5% has successfully reduced the heap size without too\n+    much performance regression; however, results may vary greatly depending on\n+    your application. Try different values for these parameters until they're\n+    as low as possible yet still retain acceptable performance.\n+\n+    >   `-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5`\n+\n+    Customers trying to keep the heap small should also add the option\n+    `-XX:-ShrinkHeapInSteps`. See [Performance Tuning Examples] for a\n+    description of using this option to keep the Java heap small by reducing\n+    the dynamic footprint for embedded applications.\n+\n+`-XX:MaxMetaspaceSize=`*size*\n+:   Sets the maximum amount of native memory that can be allocated for class\n+    metadata. By default, the size isn't limited. The amount of metadata for an\n+    application depends on the application itself, other running applications,\n+    and the amount of memory available on the system.\n+\n+    The following example shows how to set the maximum class metadata size to\n+    256 MB:\n+\n+    >   `-XX:MaxMetaspaceSize=256m`\n+\n+`-XX:MaxNewSize=`*size*\n+:   Sets the maximum size (in bytes) of the heap for the young generation\n+    (nursery). The default value is set ergonomically.\n+\n+`-XX:MaxRAM=`*size*\n+:   Sets the maximum amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics. The default value is the maximum\n+    amount of available memory to the JVM process or 128 GB, whichever is lower.\n+\n+    The maximum amount of available memory to the JVM process is the minimum\n+    of the machine's physical memory and any constraints set by the environment\n+    (e.g. container).\n+\n+    Specifying this option disables automatic use of compressed oops if\n+    the combined result of this and other options influencing the maximum amount\n+    of memory is larger than the range of memory addressable by compressed oops.\n+    See `-XX:UseCompressedOops` for further information about compressed oops.\n+\n+    The following example shows how to set the maximum amount of available\n+    memory for sizing the Java heap to 2 GB:\n+\n+    >   `-XX:MaxRAM=2G`\n+\n+`-XX:MaxRAMPercentage=`*percent*\n+:   Sets the maximum amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics as a percentage of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option. The default value is 25\n+    percent.\n+\n+    Specifying this option disables automatic use of compressed oops if\n+    the combined result of this and other options influencing the maximum amount\n+    of memory is larger than the range of memory addressable by compressed oops.\n+    See `-XX:UseCompressedOops` for further information about compressed oops.\n+\n+    The following example shows how to set the percentage of the maximum amount\n+    of memory used for the Java heap:\n+\n+    >   `-XX:MaxRAMPercentage=75`\n+\n+`-XX:MinRAMPercentage=`*percent*\n+:   Sets the maximum amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics as a percentage of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option for small heaps. A small\n+    heap is a heap of approximately 125 MB. The default value is 50 percent.\n+\n+    The following example shows how to set the percentage of the maximum amount\n+    of memory used for the Java heap for small heaps:\n+\n+    >   `-XX:MinRAMPercentage=75`\n+\n+`-XX:MaxTenuringThreshold=`*threshold*\n+:   Sets the maximum tenuring threshold for use in adaptive GC sizing. The\n+    largest value is 15. The default value is 15 for the parallel (throughput)\n+    collector.\n+\n+    The following example shows how to set the maximum tenuring threshold to\n+    10:\n+\n+    >   `-XX:MaxTenuringThreshold=10`\n+\n+`-XX:MetaspaceSize=`*size*\n+:   Sets the size of the allocated class metadata space that triggers a garbage\n+    collection the first time it's exceeded. This threshold for a garbage\n+    collection is increased or decreased depending on the amount of metadata\n+    used. The default size depends on the platform.\n+\n+`-XX:MinHeapFreeRatio=`*percent*\n+:   Sets the minimum allowed percentage of free heap space (0 to 100) after a\n+    GC event. If free heap space falls below this value, then the heap is\n+    expanded. By default, this value is set to 40%.\n+\n+    Minimize Java heap size by lowering the values of the parameters\n+    `MaxHeapFreeRatio` (default value is 70%) and `MinHeapFreeRatio` (default\n+    value is 40%) with the command-line options `-XX:MaxHeapFreeRatio` and\n+    `-XX:MinHeapFreeRatio`. Lowering `MaxHeapFreeRatio` to as low as 10% and\n+    `MinHeapFreeRatio` to 5% has successfully reduced the heap size without too\n+    much performance regression; however, results may vary greatly depending on\n+    your application. Try different values for these parameters until they're\n+    as low as possible, yet still retain acceptable performance.\n+\n+    >   `-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5`\n+\n+    Customers trying to keep the heap small should also add the option\n+    `-XX:-ShrinkHeapInSteps`. See [Performance Tuning Examples] for a\n+    description of using this option to keep the Java heap small by reducing\n+    the dynamic footprint for embedded applications.\n+\n+`-XX:MinHeapSize=`*size*\n+:   Sets the minimum size (in bytes) of the memory allocation pool. This value\n+    must be either 0, or a multiple of 1024 and greater than 1 MB. Append the\n+    letter `k` or `K` to indicate kilobytes, `m` or `M` to indicate megabytes,\n+    or `g` or `G` to indicate gigabytes. The default value is selected at run\n+    time based on the system configuration.\n+\n+    The following examples show how to set the minimum size of allocated memory\n+    to 6 MB using various units:\n+\n+    ```\n+    -XX:MinHeapSize=6291456\n+    -XX:MinHeapSize=6144k\n+    -XX:MinHeapSize=6m\n+    ```\n+\n+    If you set this option to 0, then the minimum size is set to the same value\n+    as the initial size.\n+\n+`-XX:NewRatio=`*ratio*\n+:   Sets the ratio between young and old generation sizes. By default, this\n+    option is set to 2. The following example shows how to set the young-to-old\n+    ratio to 1:\n+\n+    >   `-XX:NewRatio=1`\n+\n+`-XX:NewSize=`*size*\n+:   Sets the initial size (in bytes) of the heap for the young generation\n+    (nursery). Append the letter `k` or `K` to indicate kilobytes, `m` or `M`\n+    to indicate megabytes, or `g` or `G` to indicate gigabytes.\n+\n+    The young generation region of the heap is used for new objects. GC is\n+    performed in this region more often than in other regions. If the size for\n+    the young generation is too low, then a large number of minor GCs are\n+    performed. If the size is too high, then only full GCs are performed, which\n+    can take a long time to complete. It is recommended that you keep the size\n+    for the young generation greater than 25% and less than 50% of the overall\n+    heap size.\n+\n+    The following examples show how to set the initial size of the young\n+    generation to 256 MB using various units:\n+\n+    ```\n+    -XX:NewSize=256m\n+    -XX:NewSize=262144k\n+    -XX:NewSize=268435456\n+    ```\n+\n+    The `-XX:NewSize` option is equivalent to `-Xmn`.\n+\n+`-XX:ParallelGCThreads=`*threads*\n+:   Sets the number of the stop-the-world (STW) worker threads. The default value\n+    depends on the number of CPUs available to the JVM and the garbage collector\n+    selected.\n+\n+    For example, to set the number of threads for G1 GC to 2, specify the\n+    following option:\n+\n+    >   `-XX:ParallelGCThreads=2`\n+\n+`-XX:+ParallelRefProcEnabled`\n+:   Enables parallel reference processing. By default, this option is disabled.\n+\n+`-XX:+PrintAdaptiveSizePolicy`\n+:   Enables printing of information about adaptive-generation sizing. By\n+    default, this option is disabled.\n+\n+`-XX:SoftRefLRUPolicyMSPerMB=`*time*\n+:   Sets the amount of time (in milliseconds) a softly reachable object is\n+    kept active on the heap after the last time it was referenced. The default\n+    value is one second of lifetime per free megabyte in the heap. The\n+    `-XX:SoftRefLRUPolicyMSPerMB` option accepts integer values representing\n+    milliseconds per one megabyte of the current heap size (for Java HotSpot\n+    Client VM) or the maximum possible heap size (for Java HotSpot Server VM).\n+    This difference means that the Client VM tends to flush soft references\n+    rather than grow the heap, whereas the Server VM tends to grow the heap\n+    rather than flush soft references. In the latter case, the value of the\n+    `-Xmx` option has a significant effect on how quickly soft references are\n+    garbage collected.\n+\n+    The following example shows how to set the value to 2.5 seconds:\n+\n+    `-XX:SoftRefLRUPolicyMSPerMB=2500`\n+\n+`-XX:-ShrinkHeapInSteps`\n+:   Incrementally reduces the Java heap to the target size, specified by the\n+    option `-XX:MaxHeapFreeRatio`. This option is enabled by default. If\n+    disabled, then it immediately reduces the Java heap to the target size\n+    instead of requiring multiple garbage collection cycles. Disable this\n+    option if you want to minimize the Java heap size. You will likely\n+    encounter performance degradation when this option is disabled.\n+\n+    See [Performance Tuning Examples] for a description of using the\n+    `MaxHeapFreeRatio` option to keep the Java heap small by reducing the\n+    dynamic footprint for embedded applications.\n+\n+`-XX:StringDeduplicationAgeThreshold=`*threshold*\n+:   Identifies `String` objects reaching the specified age that are considered\n+    candidates for deduplication. An object's age is a measure of how many\n+    times it has survived garbage collection. This is sometimes referred to as\n+    tenuring.\n+\n+    > **Note:** `String` objects that are promoted to an old heap region before this age\n+    has been reached are always considered candidates for deduplication. The\n+    default value for this option is `3`. See the `-XX:+UseStringDeduplication`\n+    option.\n+\n+`-XX:SurvivorRatio=`*ratio*\n+:   Sets the ratio between eden space size and survivor space size. By default,\n+    this option is set to 8. The following example shows how to set the\n+    eden\/survivor space ratio to 4:\n+\n+    >   `-XX:SurvivorRatio=4`\n+\n+`-XX:TargetSurvivorRatio=`*percent*\n+:   Sets the desired percentage of survivor space (0 to 100) used after young\n+    garbage collection. By default, this option is set to 50%.\n+\n+    The following example shows how to set the target survivor space ratio to\n+    30%:\n+\n+    >   `-XX:TargetSurvivorRatio=30`\n+\n+`-XX:TLABSize=`*size*\n+:   Sets the initial size (in bytes) of a thread-local allocation buffer\n+    (TLAB). Append the letter `k` or `K` to indicate kilobytes, `m` or `M` to\n+    indicate megabytes, or `g` or `G` to indicate gigabytes. If this option is\n+    set to 0, then the JVM selects the initial size automatically.\n+\n+    The following example shows how to set the initial TLAB size to 512 KB:\n+\n+    >   `-XX:TLABSize=512k`\n+\n+`-XX:+UseAdaptiveSizePolicy`\n+:   Enables the use of adaptive generation sizing. This option is enabled by\n+    default. To disable adaptive generation sizing, specify\n+    `-XX:-UseAdaptiveSizePolicy` and set the size of the memory allocation pool\n+    explicitly. See the `-XX:SurvivorRatio` option.\n+\n+`-XX:+UseG1GC`\n+:   Enables the use of the garbage-first (G1) garbage collector. It's a\n+    server-style garbage collector, targeted for multiprocessor machines with a\n+    large amount of RAM. This option meets GC pause time goals with high\n+    probability, while maintaining good throughput. The G1 collector is\n+    recommended for applications requiring large heaps (sizes of around 6 GB or\n+    larger) with limited GC latency requirements (a stable and predictable\n+    pause time below 0.5 seconds). By default, this option is enabled and G1 is\n+    used as the default garbage collector.\n+\n+`-XX:+UseGCOverheadLimit`\n+:   Enables the use of a policy that limits the proportion of time spent by the\n+    JVM on GC before an `OutOfMemoryError` exception is thrown. This option is\n+    enabled, by default, and the parallel GC will throw an `OutOfMemoryError`\n+    if more than 98% of the total time is spent on garbage collection and less\n+    than 2% of the heap is recovered. When the heap is small, this feature can\n+    be used to prevent applications from running for long periods of time with\n+    little or no progress. To disable this option, specify the option\n+    `-XX:-UseGCOverheadLimit`.\n+\n+`-XX:+UseNUMA`\n+:   Enables performance optimization of an application on a machine with\n+    nonuniform memory architecture (NUMA) by increasing the application's use\n+    of lower latency memory. By default, this option is disabled and no\n+    optimization for NUMA is made. The option is available only when the\n+    parallel garbage collector is used (`-XX:+UseParallelGC`).\n+\n+`-XX:+UseParallelGC`\n+:   Enables the use of the parallel scavenge garbage collector (also known as\n+    the throughput collector) to improve the performance of your application by\n+    leveraging multiple processors.\n+\n+    By default, this option is disabled and the default collector is used.\n+\n+`-XX:+UseSerialGC`\n+:   Enables the use of the serial garbage collector. This is generally the best\n+    choice for small and simple applications that don't require any special\n+    functionality from garbage collection. By default, this option is disabled\n+    and the default collector is used.\n+\n+`-XX:+UseStringDeduplication`\n+:   Enables string deduplication. By default, this option is disabled. To use\n+    this option, you must enable the garbage-first (G1) garbage collector.\n+\n+    String deduplication reduces the memory footprint of `String` objects on\n+    the Java heap by taking advantage of the fact that many `String` objects\n+    are identical. Instead of each `String` object pointing to its own\n+    character array, identical `String` objects can point to and share the same\n+    character array.\n+\n+`-XX:+UseTLAB`\n+:   Enables the use of thread-local allocation blocks (TLABs) in the young\n+    generation space. This option is enabled by default. To disable the use of\n+    TLABs, specify the option `-XX:-UseTLAB`.\n+\n+`-XX:+UseZGC`\n+:   Enables the use of the Z garbage collector (ZGC). This is a low latency\n+    garbage collector, providing max pause times of a few milliseconds, at\n+    some throughput cost. Pause times are independent of what heap size is\n+    used. Supports heap sizes from 8MB to 16TB.\n+\n+`-XX:ZAllocationSpikeTolerance=`*factor*\n+:   Sets the allocation spike tolerance for ZGC. By default, this option is\n+    set to 2.0. This factor describes the level of allocation spikes to expect.\n+    For example, using a factor of 3.0 means the current allocation rate can\n+    be expected to triple at any time.\n+\n+`-XX:ZCollectionInterval=`*seconds*\n+:   Sets the maximum interval (in seconds) between two GC cycles when using\n+    ZGC. By default, this option is set to 0 (disabled).\n+\n+`-XX:ZFragmentationLimit=`*percent*\n+:   Sets the maximum acceptable heap fragmentation (in percent) for ZGC.\n+    By default, this option is set to 25. Using a lower value will cause the\n+    heap to be compacted more aggressively, to reclaim more memory at the cost\n+    of using more CPU time.\n+\n+`-XX:+ZProactive`\n+:   Enables proactive GC cycles when using ZGC. By default, this option is\n+    enabled. ZGC will start a proactive GC cycle if doing so is expected to\n+    have minimal impact on the running application. This is useful if the\n+    application is mostly idle or allocates very few objects, but you still\n+    want to keep the heap size down and allow reference processing to happen\n+    even when there are a lot of free space on the heap.\n+\n+`-XX:+ZUncommit`\n+:   Enables uncommitting of unused heap memory when using ZGC. By default,\n+    this option is enabled. Uncommitting unused heap memory will lower the\n+    memory footprint of the JVM, and make that memory available for other\n+    processes to use.\n+\n+`-XX:ZUncommitDelay=`*seconds*\n+:   Sets the amount of time (in seconds) that heap memory must have been\n+    unused before being uncommitted. By default, this option is set to 300\n+    (5 minutes). Committing and uncommitting memory are relatively\n+    expensive operations. Using a lower value will cause heap memory to be\n+    uncommitted earlier, at the risk of soon having to commit it again.\n+\n+## Deprecated Java Options\n+\n+These `java` options are deprecated and might be removed in a future JDK\n+release. They're still accepted and acted upon, but a warning is issued when\n+they're used.\n+\n+`-Xloggc:`*filename*\n+:   Sets the file to which verbose GC events information should be redirected\n+    for logging. The `-Xloggc` option overrides `-verbose:gc` if both are given\n+    with the same java command. `-Xloggc:`*filename* is replaced by\n+    `-Xlog:gc:`*filename*. See Enable Logging with the JVM Unified Logging\n+    Framework.\n+\n+    Example:\n+\n+    `-Xlog:gc:garbage-collection.log`\n+\n+`-XX:+FlightRecorder`\n+:   Enables the use of Java Flight Recorder (JFR) during the runtime of the\n+    application. Since JDK 8u40 this option has not been required to use JFR.\n+\n+## Obsolete Java Options\n+\n+These `java` options are still accepted but ignored, and a warning is issued\n+when they're used.\n+\n+`--illegal-access=`*parameter*\n+:   Controlled _relaxed strong encapsulation_, as defined in [JEP\n+    261](https:\/\/openjdk.org\/jeps\/261#Relaxed-strong-encapsulation).\n+    This option was deprecated in JDK 16 by [JEP\n+    396](https:\/\/openjdk.org\/jeps\/396) and made obsolete in JDK 17\n+    by [JEP 403](https:\/\/openjdk.org\/jeps\/403).\n+\n+`-XX:RTMAbortRatio=`*abort\\_ratio*\n+:   Specifies the RTM abort ratio is specified as a percentage (%) of all\n+    executed RTM transactions. If a number of aborted transactions becomes\n+    greater than this ratio, then the compiled code is deoptimized. This ratio\n+    is used when the `-XX:+UseRTMDeopt` option is enabled. The default value of\n+    this option is 50. This means that the compiled code is deoptimized if 50%\n+    of all transactions are aborted.\n+\n+`-XX:RTMRetryCount=`*number\\_of\\_retries*\n+:   Specifies the number of times that the RTM locking code is retried, when it\n+    is aborted or busy, before falling back to the normal locking mechanism.\n+    The default value for this option is 5. The `-XX:UseRTMLocking` option must\n+    be enabled.\n+\n+`-XX:+UseRTMDeopt`\n+:   Autotunes RTM locking depending on the abort ratio. This ratio is specified\n+    by the `-XX:RTMAbortRatio` option. If the number of aborted transactions\n+    exceeds the abort ratio, then the method containing the lock is deoptimized\n+    and recompiled with all locks as normal locks. This option is disabled by\n+    default. The `-XX:+UseRTMLocking` option must be enabled.\n+\n+`-XX:+UseRTMLocking`\n+:   Generates Restricted Transactional Memory (RTM) locking code for all\n+    inflated locks, with the normal locking mechanism as the fallback handler.\n+    This option is disabled by default. Options related to RTM are available\n+    only on x86 CPUs that support Transactional Synchronization Extensions (TSX).\n+\n+    RTM is part of Intel's TSX, which is an x86 instruction set extension and\n+    facilitates the creation of multithreaded applications. RTM introduces the\n+    new instructions `XBEGIN`, `XABORT`, `XEND`, and `XTEST`. The `XBEGIN` and\n+    `XEND` instructions enclose a set of instructions to run as a transaction.\n+    If no conflict is found when running the transaction, then the memory and\n+    register modifications are committed together at the `XEND` instruction.\n+    The `XABORT` instruction can be used to explicitly abort a transaction and\n+    the `XTEST` instruction checks if a set of instructions is being run in a\n+    transaction.\n+\n+    A lock on a transaction is inflated when another thread tries to access the\n+    same transaction, thereby blocking the thread that didn't originally\n+    request access to the transaction. RTM requires that a fallback set of\n+    operations be specified in case a transaction aborts or fails. An RTM lock\n+    is a lock that has been delegated to the TSX's system.\n+\n+    RTM improves performance for highly contended locks with low conflict in a\n+    critical region (which is code that must not be accessed by more than one\n+    thread concurrently). RTM also improves the performance of coarse-grain\n+    locking, which typically doesn't perform well in multithreaded\n+    applications. (Coarse-grain locking is the strategy of holding locks for\n+    long periods to minimize the overhead of taking and releasing locks, while\n+    fine-grained locking is the strategy of trying to achieve maximum\n+    parallelism by locking only when necessary and unlocking as soon as\n+    possible.) Also, for lightly contended locks that are used by different\n+    threads, RTM can reduce false cache line sharing, also known as cache line\n+    ping-pong. This occurs when multiple threads from different processors are\n+    accessing different resources, but the resources share the same cache line.\n+    As a result, the processors repeatedly invalidate the cache lines of other\n+    processors, which forces them to read from main memory instead of their\n+    cache.\n+\n+## Removed Java Options\n+\n+These `java` options have been removed in JDK @@VERSION_SPECIFICATION@@ and using them results in an error of:\n+\n+>   `Unrecognized VM option` *option-name*\n+\n+`-XX:InitialRAMFraction=`*ratio*\n+:   Sets the initial amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics as a ratio of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option. The default value is\n+    64.\n+\n+    Use the option `-XX:InitialRAMPercentage` instead.\n+\n+`-XX:MaxRAMFraction=`*ratio*\n+:   Sets the maximum amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics as a fraction of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option. The default value is 4.\n+\n+    Specifying this option disables automatic use of compressed oops if\n+    the combined result of this and other options influencing the maximum amount\n+    of memory is larger than the range of memory addressable by compressed oops.\n+    See `-XX:UseCompressedOops` for further information about compressed oops.\n+\n+    Use the option `-XX:MaxRAMPercentage` instead.\n+\n+`-XX:MinRAMFraction=`*ratio*\n+:   Sets the maximum amount of memory that the JVM may use for the Java heap\n+    before applying ergonomics heuristics as a fraction of the maximum amount\n+    determined as described in the `-XX:MaxRAM` option for small heaps. A small\n+    heap is a heap of approximately 125 MB. The default value is 2.\n+\n+    Use the option `-XX:MinRAMPercentage` instead.\n+\n+`-XX:+ScavengeBeforeFullGC`\n+:   Enables GC of the young generation before each full GC. This option is\n+    enabled by default. It is recommended that you *don't* disable it, because\n+    scavenging the young generation before a full GC can reduce the number of\n+    objects reachable from the old generation space into the young generation\n+    space. To disable GC of the young generation before each full GC, specify\n+    the option `-XX:-ScavengeBeforeFullGC`.\n+\n+`-Xfuture`\n+:   Enables strict class-file format checks that enforce close conformance to\n+    the class-file format specification. Developers should use this flag when\n+    developing new code. Stricter checks may become the default in future\n+    releases.\n+\n+    Use the option `-Xverify:all` instead.\n+\n+For the lists and descriptions of options removed in previous releases see the *Removed Java Options* section in:\n+\n+-   [The `java` Command, Release 23](https:\/\/docs.oracle.com\/en\/java\/javase\/23\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 22](https:\/\/docs.oracle.com\/en\/java\/javase\/22\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 21](https:\/\/docs.oracle.com\/en\/java\/javase\/21\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 20](https:\/\/docs.oracle.com\/en\/java\/javase\/20\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 19](https:\/\/docs.oracle.com\/en\/java\/javase\/19\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 18](https:\/\/docs.oracle.com\/en\/java\/javase\/18\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 17](https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 16](https:\/\/docs.oracle.com\/en\/java\/javase\/16\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 15](https:\/\/docs.oracle.com\/en\/java\/javase\/15\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 14](https:\/\/docs.oracle.com\/en\/java\/javase\/14\/docs\/specs\/man\/java.html)\n+\n+-   [The `java` Command, Release 13](https:\/\/docs.oracle.com\/en\/java\/javase\/13\/docs\/specs\/man\/java.html)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 12](\n+    https:\/\/docs.oracle.com\/en\/java\/javase\/12\/tools\/java.html#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 11](\n+    https:\/\/docs.oracle.com\/en\/java\/javase\/11\/tools\/java.html#GUID-741FC470-AA3E-494A-8D2B-1B1FE4A990D1)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 10](\n+    https:\/\/docs.oracle.com\/javase\/10\/tools\/java.htm#JSWOR624)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 9](\n+    https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 8 for Oracle JDK\n+    on Windows](\n+    https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/windows\/java.html#BGBCIEFC)\n+\n+-   [Java Platform, Standard Edition Tools Reference, Release 8 for Oracle JDK\n+    on Solaris, Linux, and macOS](\n+    https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html#BGBCIEFC)\n+\n+## java Command-Line Argument Files\n+\n+You can shorten or simplify the `java` command by using `@` argument files to\n+specify one or more text files that contain arguments, such as options and\n+class names, which are passed to the `java` command. This let's you to create\n+`java` commands of any length on any operating system.\n+\n+In the command line, use the at sign (`@`) prefix to identify an argument file\n+that contains `java` options and class names. When the `java` command\n+encounters a file beginning with the at sign (`@`), it expands the contents of\n+that file into an argument list just as they would be specified on the command\n+line.\n+\n+The `java` launcher expands the argument file contents until it encounters the\n+`--disable-@files` option. You can use the `--disable-@files` option anywhere\n+on the command line, including in an argument file, to stop `@` argument files\n+expansion.\n+\n+The following items describe the syntax of `java` argument files:\n+\n+-   The argument file must contain only ASCII characters or characters in\n+    system default encoding that's ASCII friendly, such as UTF-8.\n+\n+-   The argument file size must not exceed MAXINT (2,147,483,647) bytes.\n+\n+-   The launcher doesn't expand wildcards that are present within an argument\n+    file.\n+\n+-   Use white space or new line characters to separate arguments included in\n+    the file.\n+\n+-   White space includes a white space character, `\\t`, `\\n`, `\\r`, and `\\f`.\n+\n+    For example, it is possible to have a path with a space, such as\n+    `c:\\Program Files` that can be specified as either `\"c:\\\\Program Files\"` or,\n+    to avoid an escape, `c:\\Program\" \"Files`.\n+\n+-   Any option that contains spaces, such as a path component, must be within\n+    quotation marks using quotation ('\\\"') characters in its entirety.\n+\n+-   A string within quotation marks may contain the characters `\\n`, `\\r`,\n+    `\\t`, and `\\f`. They are converted to their respective ASCII codes.\n+\n+-   If a file name contains embedded spaces, then put the whole file name in\n+    double quotation marks.\n+\n+-   File names in an argument file are relative to the current directory, not\n+    to the location of the argument file.\n+\n+-   Use the number sign `#` in the argument file to identify comments. All\n+    characters following the `#` are ignored until the end of line.\n+\n+-   Additional at sign `@` prefixes to `@` prefixed options act as an escape,\n+    (the first `@` is removed and the rest of the arguments are presented to\n+    the launcher literally).\n+\n+-   Lines may be continued using the continuation character (`\\`) at the\n+    end-of-line. The two lines are concatenated with the leading white spaces\n+    trimmed. To prevent trimming the leading white spaces, a continuation\n+    character (`\\`) may be placed at the first column.\n+\n+-   Because backslash (\\\\) is an escape character, a backslash character must\n+    be escaped with another backslash character.\n+\n+-   Partial quote is allowed and is closed by an end-of-file.\n+\n+-   An open quote stops at end-of-line unless `\\` is the last character, which\n+    then joins the next line by removing all leading white space characters.\n+\n+-   Wildcards (\\*) aren't allowed in these lists (such as specifying `*.java`).\n+\n+-   Use of the at sign (`@`) to recursively interpret files isn't supported.\n+\n+### Example of Open or Partial Quotes in an Argument File\n+\n+In the argument file,\n+\n+```\n+-cp \"lib\/\n+cool\/\n+app\/\n+jars\n+```\n+\n+this is interpreted as:\n+\n+>   `-cp lib\/cool\/app\/jars`\n+\n+### Example of a Backslash Character Escaped with Another Backslash Character in an Argument File\n+\n+To output the following:\n+\n+>   `-cp c:\\Program Files (x86)\\Java\\jre\\lib\\ext;c:\\Program\n+    Files\\Java\\jre9\\lib\\ext`\n+\n+The backslash character must be specified in the argument file as:\n+\n+>   `-cp \"c:\\\\Program Files (x86)\\\\Java\\\\jre\\\\lib\\\\ext;c:\\\\Program\n+    Files\\\\Java\\\\jre9\\\\lib\\\\ext\"`\n+\n+### Example of an EOL Escape Used to Force Concatenation of Lines in an Argument File\n+\n+In the argument file,\n+\n+```\n+-cp \"\/lib\/cool app\/jars:\\\n+    \/lib\/another app\/jars\"\n+```\n+\n+This is interpreted as:\n+\n+>   `-cp \/lib\/cool app\/jars:\/lib\/another app\/jars`\n+\n+### Example of Line Continuation with Leading Spaces in an Argument File\n+\n+In the argument file,\n+\n+```\n+-cp \"\/lib\/cool\\\n+\\app\/jars\"\n+```\n+\n+This is interpreted as:\n+\n+`-cp \/lib\/cool app\/jars`\n+\n+### Examples of Using Single Argument File\n+\n+You can use a single argument file, such as `myargumentfile` in the following\n+example, to hold all required `java` arguments:\n+\n+>   `java @myargumentfile`\n+\n+### Examples of Using Argument Files with Paths\n+\n+You can include relative paths in argument files; however, they're relative to\n+the current working directory and not to the paths of the argument files\n+themselves. In the following example, `path1\/options` and `path2\/options`\n+represent argument files with different paths. Any relative paths that they\n+contain are relative to the current working directory and not to the argument\n+files:\n+\n+>   `java @path1\/options @path2\/classes`\n+\n+## Code Heap State Analytics\n+\n+### Overview\n+\n+There are occasions when having insight into the current state of the JVM code\n+heap would be helpful to answer questions such as:\n+\n+-   Why was the JIT turned off and then on again and again?\n+\n+-   Where has all the code heap space gone?\n+\n+-   Why is the method sweeper not working effectively?\n+\n+To provide this insight, a code heap state analytics feature has been\n+implemented that enables on-the-fly analysis of the code heap. The analytics\n+process is divided into two parts. The first part examines the entire code heap\n+and aggregates all information that is believed to be useful or important. The\n+second part consists of several independent steps that print the collected\n+information with an emphasis on different aspects of the data. Data collection\n+and printing are done on an \"on request\" basis.\n+\n+### Syntax\n+\n+Requests for real-time, on-the-fly analysis can be issued with the following\n+command:\n+\n+>   `jcmd` *pid* `Compiler.CodeHeap_Analytics` \\[*function*\\] \\[*granularity*\\]\n+\n+If you are only interested in how the code heap looks like after running a\n+sample workload, you can use the command line option:\n+\n+>   `-Xlog:codecache=Trace`\n+\n+To see the code heap state when a \"CodeCache full\" condition exists, start the\n+VM with the command line option:\n+\n+>   `-Xlog:codecache=Debug`\n+\n+See [CodeHeap State Analytics (OpenJDK)](\n+https:\/\/bugs.openjdk.org\/secure\/attachment\/75649\/JVM_CodeHeap_StateAnalytics_V2.pdf)\n+for a detailed description of the code heap state analytics feature, the\n+supported functions, and the granularity options.\n+\n+## Enable Logging with the JVM Unified Logging Framework\n+\n+You use the `-Xlog` option to configure or enable logging with the Java Virtual\n+Machine (JVM) unified logging framework.\n+\n+### Synopsis\n+\n+>   `-Xlog`\\[`:`\\[*what*\\]\\[`:`\\[*output*\\]\\[`:`\\[*decorators*\\]\\[`:`*output-options*\\[`,`...\\]\\]\\]\\]\\]\n+>\n+>   `-Xlog:`*directive*\n+\n+*what*\n+:   Specifies a combination of tags and levels of the form\n+    *tag1*\\[`+`*tag2*...\\]\\[`*`\\]\\[`=`*level*\\]\\[`,`...\\]. Unless the wildcard\n+    (`*`) is specified, only log messages tagged with exactly the tags\n+    specified are matched. See [-Xlog Tags and Levels].\n+\n+*output*\n+:   Sets the type of output. Omitting the *output* type defaults to `stdout`.\n+    See [-Xlog Output].\n+\n+*decorators*\n+:   Configures the output to use a custom set of decorators. Omitting\n+    *decorators* defaults to `uptime`, `level`, and `tags`. See\n+    [Decorations].\n+\n+*output-options*\n+:   Sets the `-Xlog` logging output options.\n+\n+*directive*\n+:   A global option or subcommand: help, disable, async\n+\n+### Description\n+\n+The Java Virtual Machine (JVM) unified logging framework provides a common\n+logging system for all components of the JVM. GC logging for the JVM has been\n+changed to use the new logging framework. The mapping of old GC flags to the\n+corresponding new Xlog configuration is described in [Convert GC Logging Flags\n+to Xlog]. In addition, runtime logging has also been changed to use the JVM\n+unified logging framework. The mapping of legacy runtime logging flags to the\n+corresponding new Xlog configuration is described in [Convert Runtime Logging\n+Flags to Xlog].\n+\n+The following provides quick reference to the `-Xlog` command and syntax for\n+options:\n+\n+`-Xlog`\n+:   Enables JVM logging on an `info` level.\n+\n+`-Xlog:help`\n+:   Prints `-Xlog` usage syntax and available tags, levels, and decorators\n+    along with example command lines with explanations.\n+\n+`-Xlog:disable`\n+:   Turns off all logging and clears all configuration of the logging framework\n+    including the default configuration for warnings and errors.\n+\n+`-Xlog`\\[`:`*option*\\]\n+:   Applies multiple arguments in the order that they appear on the command\n+    line. Multiple `-Xlog` arguments for the same output override each other in\n+    their given order.\n+\n+    The *option* is set as:\n+\n+    >   \\[*tag-selection*\\]\\[`:`\\[*output*\\]\\[`:`\\[*decorators*\\]\\[`:`*output-options*\\]\\]\\]\n+\n+    Omitting the *tag-selection* defaults to a tag-set of `all` and a level of\n+    `info`.\n+\n+    >   *tag*\\[`+`...\\] `all`\n+\n+    The `all` tag is a meta tag consisting of all tag-sets available. The\n+    asterisk `*` in a tag set definition denotes a wildcard tag match. Matching\n+    with a wildcard selects all tag sets that contain *at least* the specified\n+    tags. Without the wildcard, only exact matches of the specified tag sets\n+    are selected.\n+\n+    *output-options* is\n+\n+    >   `filecount=`*file-count* `filesize=`*file size with optional K, M or G\n+        suffix* `foldmultilines=`*<true|false>*\n+\n+    When `foldmultilines` is true, a log event that consists of\n+    multiple lines will be folded into a single line by replacing newline characters\n+    with the sequence `'\\'` and `'n'` in the output.\n+    Existing single backslash characters will also be replaced with a sequence of\n+    two backslashes so that the conversion can be reversed.\n+    This option is safe to use with UTF-8 character encodings, but other encodings may not work.\n+    For example, it may incorrectly convert multi-byte sequences in Shift JIS and BIG5.\n+\n+### Default Configuration\n+\n+When the `-Xlog` option and nothing else is specified on the command line, the\n+default configuration is used. The default configuration logs all messages with\n+a level that matches either warning or error regardless of what tags the\n+message is associated with. The default configuration is equivalent to entering\n+the following on the command line:\n+\n+>   `-Xlog:all=warning:stdout:uptime,level,tags`\n+\n+### Controlling Logging at Runtime\n+\n+Logging can also be controlled at run time through Diagnostic Commands (with\n+the [jcmd](jcmd.html) utility). Everything that can be specified on the command line can\n+also be specified dynamically with the `VM.log` command. As the diagnostic\n+commands are automatically exposed as MBeans, you can use JMX to change logging\n+configuration at run time.\n+\n+### -Xlog Tags and Levels\n+\n+Each log message has a level and a tag set associated with it. The level of\n+the message corresponds to its details, and the tag set corresponds to what\n+the message contains or which JVM component it involves (such as, `gc`,\n+`jit`, or `os`). Mapping GC flags to the Xlog configuration is described\n+in [Convert GC Logging Flags to Xlog]. Mapping legacy runtime logging flags to\n+the corresponding Xlog configuration is described in [Convert Runtime Logging\n+Flags to Xlog].\n+\n+**Available log levels:**\n+\n+-   `off`\n+-   `trace`\n+-   `debug`\n+-   `info`\n+-   `warning`\n+-   `error`\n+\n+**Available log tags:**\n+\n+There are literally dozens of log tags, which in the right combinations, will enable\n+a range of logging output. The full set of available log tags can be seen using `-Xlog:help`.\n+Specifying `all` instead of a tag combination matches all tag combinations.\n+\n+### -Xlog Output\n+\n+The `-Xlog` option supports the following types of outputs:\n+\n+-   `stdout` --- Sends output to stdout\n+-   `stderr` --- Sends output to stderr\n+-   `file=`*filename* --- Sends output to text file(s).\n+\n+When using `file=`*filename*, specifying `%p`, `%t`  and\/or `%hn` in the file name\n+expands to the JVM's PID, startup timestamp and host name, respectively. You can also\n+configure text files to handle file rotation based on file size and a number of\n+files to rotate. For example, to rotate the log file every 10 MB and keep 5\n+files in rotation, specify the options `filesize=10M, filecount=5`. The target\n+size of the files isn't guaranteed to be exact, it's just an approximate value.\n+Files are rotated by default with up to 5 rotated files of target size 20 MB,\n+unless configured otherwise. Specifying `filecount=0` means that the log file\n+shouldn't be rotated. There's a possibility of the pre-existing log file\n+getting overwritten.\n+\n+### -Xlog Output Mode\n+\n+By default logging messages are output synchronously - each log message is written to\n+the designated output when the logging call is made. But you can instead use asynchronous\n+logging mode by specifying:\n+\n+`-Xlog:async`\n+:     Write all logging asynchronously.\n+\n+In asynchronous logging mode, log sites enqueue all logging messages to an intermediate buffer\n+and a standalone thread is responsible for flushing them to the corresponding outputs. The\n+intermediate buffer is bounded and on buffer exhaustion the enqueuing message is discarded.\n+Log entry write operations are guaranteed non-blocking.\n+\n+The option `-XX:AsyncLogBufferSize=N` specifies the memory budget in bytes for the intermediate buffer.\n+The default value should be big enough to cater for most cases. Users can provide a custom value to\n+trade memory overhead for log accuracy if they need to.\n+\n+### Decorations\n+\n+Logging messages are decorated with information about the message. You can\n+configure each output to use a custom set of decorators. The order of the\n+output is always the same as listed in the table. You can configure the\n+decorations to be used at run time. Decorations are prepended to the log\n+message. For example:\n+\n+```\n+[6.567s][info][gc,old] Old collection complete\n+```\n+\n+Omitting `decorators` defaults to `uptime`, `level`, and `tags`. The `none`\n+decorator is special and is used to turn off all decorations.\n+\n+`time` (`t`), `utctime` (`utc`), `uptime` (`u`), `timemillis` (`tm`),\n+`uptimemillis` (`um`), `timenanos` (`tn`), `uptimenanos` (`un`), `hostname`\n+(`hn`), `pid` (`p`), `tid` (`ti`), `level` (`l`), `tags` (`tg`) decorators can\n+also be specified as `none` for no decoration.\n+\n+Table: Logging Messages Decorations\n+\n+---------------  --------------------------------------------------------------\n+Decorations      Description\n+---------------  --------------------------------------------------------------\n+`time` or `t`    Current time and date in ISO-8601 format.\n+\n+`utctime`        Universal Time Coordinated or Coordinated Universal Time.\n+or `utc`\n+\n+`uptime` or `u`  Time since the start of the JVM in seconds and milliseconds.\n+                 For example, 6.567s.\n+\n+`timemillis`     The same value as generated by `System.currentTimeMillis()`\n+or `tm`\n+\n+`uptimemillis`   Milliseconds since the JVM started.\n+or `um`\n+\n+`timenanos`      The same value generated by `System.nanoTime()`.\n+or `tn`\n+\n+`uptimenanos`    Nanoseconds since the JVM started.\n+or `un`\n+\n+`hostname`       The host name.\n+or `hn`\n+\n+`pid` or `p`     The process identifier.\n+\n+`tid` or `ti`    The thread identifier.\n+\n+`level` or `l`   The level associated with the log message.\n+\n+`tags` or `tg`   The tag-set associated with the log message.\n+---------------  --------------------------------------------------------------\n+\n+### Convert GC Logging Flags to Xlog\n+\n+Table: Legacy GC Logging Flags to Xlog Configuration Mapping\n+\n+------------------------------------  --------------------------  ----------------------------------------------------\n+Legacy Garbage Collection (GC) Flag   Xlog Configuration          Comment\n+------------------------------------  --------------------------  ----------------------------------------------------\n+`G1PrintHeapRegions`                  `-Xlog:gc+region=trace`     Not Applicable\n+\n+`GCLogFileSize`                       No configuration            Log rotation is handled by the framework.\n+                                      available\n+\n+`NumberOfGCLogFiles`                  Not Applicable              Log rotation is handled by the framework.\n+\n+`PrintAdaptiveSizePolicy`             `-Xlog:gc+ergo*=`*level*       Use a *level* of `debug` for most of the information,\n+                                                                  or a *level* of `trace` for all of what was logged\n+                                                                  for `PrintAdaptiveSizePolicy`.\n+\n+`PrintGC`                             `-Xlog:gc`                  Not Applicable\n+\n+`PrintGCApplicationConcurrentTime`    `-Xlog:safepoint`           Note that `PrintGCApplicationConcurrentTime` and\n+                                                                  `PrintGCApplicationStoppedTime` are logged on the\n+                                                                  same tag and aren't separated in the new logging.\n+\n+`PrintGCApplicationStoppedTime`       `-Xlog:safepoint`           Note that `PrintGCApplicationConcurrentTime` and\n+                                                                  `PrintGCApplicationStoppedTime` are logged on the\n+                                                                  same tag and not separated in the new logging.\n+\n+`PrintGCCause`                        Not Applicable              GC cause is now always logged.\n+\n+`PrintGCDateStamps`                   Not Applicable              Date stamps are logged by the framework.\n+\n+`PrintGCDetails`                      `-Xlog:gc*`                 Not Applicable\n+\n+`PrintGCID`                           Not Applicable              GC ID is now always logged.\n+\n+`PrintGCTaskTimeStamps`               `-Xlog:gc+task*=debug`         Not Applicable\n+\n+`PrintGCTimeStamps`                   Not Applicable              Time stamps are logged by the framework.\n+\n+`PrintHeapAtGC`                       `-Xlog:gc+heap=trace`       Not Applicable\n+\n+`PrintReferenceGC`                    `-Xlog:gc+ref*=debug`          Note that in the old logging, `PrintReferenceGC` had\n+                                                                  an effect only if `PrintGCDetails` was also enabled.\n+\n+`PrintStringDeduplicationStatistics`  `-Xlog:gc+stringdedup*=debug`  Not Applicable\n+\n+`PrintTenuringDistribution`           `-Xlog:gc+age*=`*level*        Use a *level* of `debug` for the most relevant\n+                                                                  information, or a *level* of `trace` for all of what\n+                                                                  was logged for `PrintTenuringDistribution`.\n+\n+`UseGCLogFileRotation`                Not Applicable              What was logged for `PrintTenuringDistribution`.\n+------------------------------------  --------------------------  ----------------------------------------------------\n+\n+### Convert Runtime Logging Flags to Xlog\n+\n+These legacy flags are no longer recognized and will cause an error if used directly. Use their unified logging equivalent\n+instead.\n+\n+Table: Runtime Logging Flags to Xlog Configuration Mapping\n+\n+---------------------------  -------------------------------------  ------------------------------------------------------------------\n+Legacy Runtime Flag          Xlog Configuration                     Comment\n+---------------------------  -------------------------------------  ------------------------------------------------------------------\n+`TraceExceptions`            `-Xlog:exceptions=info`                Not Applicable\n+\n+`TraceClassLoading`          `-Xlog:class+load=`*level*             Use *level*=`info` for regular information, or *level*=`debug`\n+                                                                    for additional information. In Unified Logging syntax,\n+                                                                    `-verbose:class` equals `-Xlog:class+load=info,class+unload=info`.\n+\n+`TraceClassLoadingPreorder`  `-Xlog:class+preorder=debug`           Not Applicable\n+\n+`TraceClassUnloading`        `-Xlog:class+unload=`*level*           Use *level*=`info` for regular information, or *level*=`trace`\n+                                                                    for additional information. In Unified Logging syntax,\n+                                                                    `-verbose:class` equals `-Xlog:class+load=info,class+unload=info`.\n+\n+`VerboseVerification`        `-Xlog:verification=info`              Not Applicable\n+\n+`TraceClassPaths`            `-Xlog:class+path=info`                Not Applicable\n+\n+`TraceClassResolution`       `-Xlog:class+resolve=debug`            Not Applicable\n+\n+`TraceClassInitialization`   `-Xlog:class+init=info`                Not Applicable\n+\n+`TraceLoaderConstraints`     `-Xlog:class+loader+constraints=info`  Not Applicable\n+\n+\n+`TraceClassLoaderData`       `-Xlog:class+loader+data=`*level*      Use *level*=`debug` for regular information or *level*=`trace` for\n+                                                                    additional information.\n+\n+`TraceSafepointCleanupTime`  `-Xlog:safepoint+cleanup=info`         Not Applicable\n+\n+`TraceSafepoint`             `-Xlog:safepoint=debug`                Not Applicable\n+\n+`TraceMonitorInflation`      `-Xlog:monitorinflation=debug`         Not Applicable\n+\n+`TraceRedefineClasses`       `-Xlog:redefine+class*=`*level*        *level*=`info`, `debug`, and `trace` provide increasing amounts\n+                                                                    of information.\n+---------------------------  -------------------------------------  ------------------------------------------------------------------\n+\n+### -Xlog Usage Examples\n+\n+The following are `-Xlog` examples.\n+\n+`-Xlog`\n+:   Logs all messages by using the `info` level to `stdout` with `uptime`,\n+    `levels`, and `tags` decorations. This is equivalent to using:\n+\n+    >   `-Xlog:all=info:stdout:uptime,levels,tags`\n+\n+`-Xlog:gc`\n+:   Logs messages tagged with the `gc` tag using `info` level to `stdout`. The\n+    default configuration for all other messages at level `warning` is in\n+    effect.\n+\n+`-Xlog:gc,safepoint`\n+:   Logs messages tagged either with the `gc` or `safepoint` tags, both using\n+    the `info` level, to `stdout`, with default decorations. Messages tagged\n+    with both `gc` and `safepoint` won't be logged.\n+\n+`-Xlog:gc+ref=debug`\n+:   Logs messages tagged with both `gc` and `ref` tags, using the `debug` level\n+    to `stdout`, with default decorations. Messages tagged only with one of the\n+    two tags won't be logged.\n+\n+`-Xlog:gc=debug:file=gc.txt:none`\n+:   Logs messages tagged with the `gc` tag using the `debug` level to a file\n+    called `gc.txt` with no decorations. The default configuration for all\n+    other messages at level `warning` is still in effect.\n+\n+`-Xlog:gc=trace:file=gctrace.txt:uptimemillis,pid:filecount=5,filesize=1024`\n+:   Logs messages tagged with the `gc` tag using the `trace` level to a\n+    rotating file set with 5 files with size 1 MB with the base name\n+    `gctrace.txt` and uses decorations `uptimemillis` and `pid`.\n+\n+    The default configuration for all other messages at level `warning` is\n+    still in effect.\n+\n+`-Xlog:gc::uptime,tid`\n+:   Logs messages tagged with the `gc` tag using the default 'info' level to\n+    default the output `stdout` and uses decorations `uptime` and `tid`. The\n+    default configuration for all other messages at level `warning` is still in\n+    effect.\n+\n+`-Xlog:gc*=info,safepoint*=off`\n+:   Logs messages tagged with at least `gc` using the `info` level, but turns\n+    off logging of messages tagged with `safepoint`. Messages tagged with both\n+    `gc` and `safepoint` won't be logged.\n+\n+`-Xlog:disable -Xlog:safepoint=trace:safepointtrace.txt`\n+:   Turns off all logging, including warnings and errors, and then enables\n+    messages tagged with `safepoint`using `trace`level to the file\n+    `safepointtrace.txt`. The default configuration doesn't apply, because the\n+    command line started with `-Xlog:disable`.\n+\n+### Complex -Xlog Usage Examples\n+\n+The following describes a few complex examples of using the `-Xlog` option.\n+\n+`-Xlog:gc+class*=debug`\n+:   Logs messages tagged with at least `gc` and `class` tags using the `debug`\n+    level to `stdout`. The default configuration for all other messages at the\n+    level `warning` is still in effect\n+\n+`-Xlog:gc+meta*=trace,class*=off:file=gcmetatrace.txt`\n+:   Logs messages tagged with at least the `gc` and `meta` tags using the\n+    `trace` level to the file `metatrace.txt` but turns off all messages tagged\n+    with `class`. Messages tagged with `gc`, `meta`, and `class` aren't be\n+    logged as `class*` is set to off. The default configuration for all other\n+    messages at level `warning` is in effect except for those that include\n+    `class`.\n+\n+`-Xlog:gc+meta=trace`\n+:   Logs messages tagged with exactly the `gc` and `meta` tags using the\n+    `trace` level to `stdout`. The default configuration for all other messages\n+    at level `warning` is still be in effect.\n+\n+`-Xlog:gc+class+heap*=debug,meta*=warning,threads*=off`\n+:   Logs messages tagged with at least `gc`, `class`, and `heap` tags using the\n+    `trace` level to `stdout` but only log messages tagged with `meta` with\n+    level. The default configuration for all other messages at the level\n+    `warning` is in effect except for those that include `threads`.\n+\n+## Validate Java Virtual Machine Flag Arguments\n+\n+You use values provided to all Java Virtual Machine (JVM) command-line flags\n+for validation and, if the input value is invalid or out-of-range, then an\n+appropriate error message is displayed.\n+\n+Whether they're set ergonomically, in a command line, by an input tool, or\n+through the APIs (for example, classes contained in the package\n+`java.lang.management`) the values provided to all Java Virtual Machine (JVM)\n+command-line flags are validated. Ergonomics are described in Java Platform,\n+Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide.\n+\n+Range and constraints are validated either when all flags have their values set\n+during JVM initialization or a flag's value is changed during runtime (for\n+example using the `jcmd` tool). The JVM is terminated if a value violates\n+either the range or constraint check and an appropriate error message is\n+printed on the error stream.\n+\n+For example, if a flag violates a range or a constraint check, then the JVM\n+exits with an error:\n+\n+```\n+java -XX:AllocatePrefetchStyle=5 -version\n+intx AllocatePrefetchStyle=5 is outside the allowed range [ 0 ... 3 ]\n+Improperly specified VM option 'AllocatePrefetchStyle=5'\n+Error: Could not create the Java Virtual Machine.\n+Error: A fatal exception has occurred. Program will exit.\n+```\n+\n+The flag `-XX:+PrintFlagsRanges` prints the range of all the flags. This flag\n+allows automatic testing of the flags by the values provided by the ranges. For\n+the flags that have the ranges specified, the type, name, and the actual range\n+is printed in the output.\n+\n+For example,\n+\n+```\n+intx   ThreadStackSize [ 0 ... 9007199254740987 ] {pd product}\n+```\n+\n+For the flags that don't have the range specified, the values aren't displayed\n+in the print out. For example:\n+\n+```\n+size_t NewSize         [   ...                  ] {product}\n+```\n+\n+This helps to identify the flags that need to be implemented. The automatic\n+testing framework can skip those flags that don't have values and aren't\n+implemented.\n+\n+## Large Pages\n+\n+You use large pages, also known as huge pages, as memory pages that are\n+significantly larger than the standard memory page size (which varies depending\n+on the processor and operating system). Large pages optimize processor\n+Translation-Lookaside Buffers.\n+\n+A Translation-Lookaside Buffer (TLB) is a page translation cache that holds the\n+most-recently used virtual-to-physical address translations. A TLB is a scarce\n+system resource. A TLB miss can be costly because the processor must then read\n+from the hierarchical page table, which may require multiple memory accesses.\n+By using a larger memory page size, a single TLB entry can represent a larger\n+memory range. This results in less pressure on a TLB, and memory-intensive\n+applications may have better performance.\n+\n+However, using large pages can negatively affect system performance. For\n+example, when a large amount of memory is pinned by an application, it may\n+create a shortage of regular memory and cause excessive paging in other\n+applications and slow down the entire system. Also, a system that has been up\n+for a long time could produce excessive fragmentation, which could make it\n+impossible to reserve enough large page memory. When this happens, either the\n+OS or JVM reverts to using regular pages.\n+\n+Linux and Windows support large pages.\n+\n+### Large Pages Support for Linux\n+\n+Linux supports large pages since version 2.6. To check if your environment\n+supports large pages, try the following:\n+\n+```\n+# cat \/proc\/meminfo | grep Huge\n+HugePages_Total: 0\n+HugePages_Free: 0\n+...\n+Hugepagesize: 2048 kB\n+```\n+\n+If the output contains items prefixed with \"Huge\", then your system supports\n+large pages. The values may vary depending on environment. The `Hugepagesize`\n+field shows the default large page size in your environment, and the other\n+fields show details for large pages of this size. Newer kernels have support\n+for multiple large page sizes. To list the supported page sizes, run this:\n+\n+```\n+# ls \/sys\/kernel\/mm\/hugepages\/\n+hugepages-1048576kB  hugepages-2048kB\n+```\n+\n+The above environment supports 2 MB and 1 GB large pages, but they need to be\n+configured so that the JVM can use them. When using large pages and not\n+enabling transparent huge pages (option `-XX:+UseTransparentHugePages`), the\n+number of large pages must be pre-allocated. For example, to enable 8 GB of\n+memory to be backed by 2 MB large pages, login as `root` and run:\n+\n+>   `# echo 4096 > \/sys\/kernel\/mm\/hugepages\/hugepages-2048kB\/nr_hugepages`\n+\n+It is always recommended to check the value of `nr_hugepages` after the request\n+to make sure the kernel was able to allocate the requested number of large\n+pages.\n+\n+> **Note:** The values contained in `\/proc` and `\/sys` reset after you\n+  reboot your system, so may want to set them in an initialization script\n+  (for example, `rc.local` or `sysctl.conf`).\n+\n+If you configure the OS kernel parameters to enable use of large pages, the\n+Java processes may allocate large pages for the Java heap as well as other\n+internal areas, for example:\n+\n+* Code cache\n+* Marking bitmaps\n+\n+Consequently, if you configure the `nr_hugepages` parameter to the size of the\n+Java heap, then the JVM can still fail to allocate the heap using large pages\n+because other areas such as the code cache might already have used some of the\n+configured large pages.\n+\n+### Large Pages Support for Windows\n+\n+To use large pages support on Windows, the\n+administrator must first assign additional privileges to the user who is running\n+the application:\n+\n+1.  Select **Control Panel**, **Administrative Tools**, and then **Local\n+    Security Policy**.\n+2.  Select **Local Policies** and then **User Rights Assignment**.\n+3.  Double-click **Lock pages in memory**, then add users and\/or groups.\n+4.  Reboot your system.\n+\n+Note that these steps are required even if it's the administrator who's running\n+the application, because administrators by default don't have the privilege to\n+lock pages in memory.\n+\n+## Application Class Data Sharing\n+\n+Application Class Data Sharing (AppCDS) stores classes used\n+by your applications in an archive file. Since these classes are\n+stored in a format that can be loaded very quickly (compared\n+to classes stored in a JAR file), AppCDS can improve the start-up\n+time of your applications. In addition, AppCDS can reduce the runtime\n+memory footprint by sharing parts of these classes across multiple\n+processes.\n+\n+Classes in the CDS archive are stored in an optimized format that's\n+about 2 to 5 times larger than classes stored in JAR files or the JDK\n+runtime image. Therefore, it's a good idea to archive only those\n+classes that are actually used by your application. These usually\n+are just a small portion of all available classes. For example, your\n+application may use only a few APIs provided by a large library.\n+\n+### Using CDS Archives\n+\n+By default, in most JDK distributions, unless `-Xshare:off` is\n+specified, the JVM starts up with a default CDS archive, which\n+is usually located in `JAVA_HOME\/lib\/server\/classes.jsa` (or\n+`JAVA_HOME\\bin\\server\\classes.jsa` on Windows). This\n+archive contains about 1300 core library classes that are used\n+by most applications.\n+\n+To use CDS for the exact set of classes used by your application,\n+you can use the `-XX:SharedArchiveFile` option, which has the\n+general form:\n+\n+>   `-XX:SharedArchiveFile=<static_archive>:<dynamic_archive>`\n+\n+-   The `<static_archive>` overrides the default CDS archive.\n+-   The `<dynamic_archive>` provides additional classes that can\n+    be loaded on top of those in the `<static_archive>`.\n+-   On Windows, the above path delimiter `:` should be replaced with `;`\n+\n+(The names \"static\" and \"dynamic\" are used for historical reasons.\n+The only significance is that the \"static\" archive is loaded first and\n+the \"dynamic\" archive is loaded second).\n+\n+The JVM can use up to two archives. To use only a single `<static_archive>`,\n+you can omit the `<dynamic_archive>` portion:\n+\n+>   `-XX:SharedArchiveFile=<static_archive>`\n+\n+For convenience, the `<dynamic_archive>` records the location of the\n+`<static_archive>`. Therefore, you can omit the `<static_archive>` by saying only:\n+\n+>   `-XX:SharedArchiveFile=<dynamic_archive>`\n+\n+### Manually Creating CDS Archives\n+\n+CDS archives can be created manually using several methods:\n+\n+-   `-Xshare:dump`\n+-   `-XX:ArchiveClassesAtExit`\n+-   `jcmd VM.cds`\n+\n+One common operation in all these methods is a \"trial run\", where you run\n+the application once to determine the classes that should be stored\n+in the archive.\n+\n+#### Creating a Static CDS Archive File with -Xshare:dump\n+\n+The following steps create a static CDS archive file that contains all the classes\n+used by the `test.Hello` application.\n+\n+1.  Create a list of all classes used by the `test.Hello` application. The\n+    following command creates a file named `hello.classlist` that contains a\n+    list of all classes used by this application:\n+\n+    >   `java -Xshare:off -XX:DumpLoadedClassList=hello.classlist -cp hello.jar test.Hello`\n+\n+    The classpath specified by the `-cp` parameter must contain only\n+    JAR files.\n+\n+2.  Create a static archive, named `hello.jsa`, that contains all the classes\n+    in `hello.classlist`:\n+\n+    >   `java -Xshare:dump -XX:SharedArchiveFile=hello.jsa -XX:SharedClassListFile=hello.classlist -cp hello.jar`\n+\n+3.  Run the application `test.Hello` with the archive `hello.jsa`:\n+\n+    >   `java -XX:SharedArchiveFile=hello.jsa -cp hello.jar test.Hello`\n+\n+4.  **Optional** Verify that the `test.Hello` application is using the class\n+    contained in the `hello.jsa` shared archive:\n+\n+    >   `java -XX:SharedArchiveFile=hello.jsa -cp hello.jar -Xlog:class+load test.Hello`\n+\n+    The output of this command should contain the following text:\n+\n+    >   `[info][class,load] test.Hello source: shared objects file`\n+\n+By default, when the `-Xshare:dump` option is used, the JVM runs in interpreter-only mode\n+(as if the `-Xint` option were specified). This is required for generating deterministic output\n+in the shared archive file. I.e., the exact same archive will be generated, bit-for-bit, every time\n+you dump it. However, if deterministic output is not needed, and you have a large classlist, you can\n+explicitly add `-Xmixed` to the command-line to enable the JIT compiler. This will speed up\n+the archive creation.\n+\n+#### Creating a Dynamic CDS Archive File with -XX:ArchiveClassesAtExit\n+\n+Advantages of dynamic CDS archives are:\n+\n+-   They usually use less disk space, since they don't need to store the\n+    classes that are already in the static archive.\n+-   They are created with one fewer step than the comparable static archive.\n+\n+The following steps create a dynamic CDS archive file that contains the classes\n+that are used by the `test.Hello` application, excluding those that are already in\n+the default CDS archive.\n+\n+1.  Create a dynamic CDS archive, named `hello.jsa`, that contains all the classes\n+    in `hello.jar` loaded by the application `test.Hello`:\n+\n+    >   `java -XX:ArchiveClassesAtExit=hello.jsa -cp hello.jar Hello`\n+\n+2.  Run the application `test.Hello` with the shared archive `hello.jsa`:\n+\n+    >   `java -XX:SharedArchiveFile=hello.jsa -cp hello.jar test.Hello`\n+\n+3. **Optional** Repeat step 4 of the previous section to verify that the `test.Hello` application is using the class\n+    contained in the `hello.jsa` shared archive.\n+\n+It's also possible to create a dynamic CDS archive with a non-default static CDS archive. E.g.,\n+\n+>   `java -XX:SharedArchiveFile=base.jsa -XX:ArchiveClassesAtExit=hello.jsa -cp hello.jar Hello`\n+\n+To run the application using this dynamic CDS archive:\n+\n+>   `java -XX:SharedArchiveFile=base.jsa:hello.jsa -cp hello.jar Hello`\n+\n+(On Windows, the above path delimiter `:` should be replaced with `;`)\n+\n+As mention above, the name of the static archive can be skipped:\n+\n+>   `java -XX:SharedArchiveFile=hello.jsa -cp hello.jar Hello`\n+\n+#### Creating CDS Archive Files with jcmd\n+\n+The previous two sections require you to modify the application's start-up script\n+in order to create a CDS archive. Sometimes this could be difficult, for example,\n+if the application's class path is set up by complex routines.\n+\n+The `jcmd VM.cds` command provides a less intrusive way for creating a CDS\n+archive by connecting to a running JVM process. You can create either a\n+static:\n+\n+>   `jcmd <pid> VM.cds static_dump my_static_archive.jsa`\n+\n+or a dynamic archive:\n+\n+>   `jcmd <pid> VM.cds dynamic_dump my_dynamic_archive.jsa`\n+\n+To use the resulting archive file in a subsequent run of the application\n+without modifying the application's start-up script, you can use the\n+following technique:\n+\n+>   `env JAVA_TOOL_OPTIONS=-XX:SharedArchiveFile=my_static_archive.jsa bash app_start.sh`\n+\n+Note: to use `jcmd <pid> VM.cds dynamic_dump`, the JVM process identified by `<pid>`\n+must be started with `-XX:+RecordDynamicDumpInfo`, which can also be passed to the\n+application start-up script with the same technique:\n+\n+>   `env JAVA_TOOL_OPTIONS=-XX:+RecordDynamicDumpInfo bash app_start.sh`\n+\n+\n+### Creating Dynamic CDS Archive File with -XX:+AutoCreateSharedArchive\n+\n+`-XX:+AutoCreateSharedArchive` is a more convenient way of creating\/using\n+CDS archives. Unlike the methods of manual CDS archive creation described\n+in the previous section, with `-XX:+AutoCreateSharedArchive`, it's no longer\n+necessary to have a separate trial run. Instead, you can always run the\n+application with the same command-line and enjoy the benefits of CDS automatically.\n+\n+>   `java -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=hello.jsa -cp hello.jar Hello`\n+\n+If the specified archive file exists and was created by the same version of the JDK,\n+then it will be loaded as a dynamic archive; otherwise it is ignored at VM startup.\n+\n+At VM exit, if the specified archive file does not exist, it will be created.\n+If it exists but was created with a different (but post JDK 19) version of the JDK,\n+then it will be replaced. In both cases the archive will be ready to be loaded the\n+next time the JVM is launched with the same command line.\n+\n+If the specified archive file exists but was created by a JDK version prior\n+to JDK 19, then it will be ignored: neither loaded at startup, nor replaced at exit.\n+\n+Developers should note that the contents of the CDS archive file are specific\n+to each build of the JDK. Therefore, if you switch to a different JDK build,\n+`-XX:+AutoCreateSharedArchive` will automatically recreate the archive to\n+match the JDK. If you intend to use this feature with an existing\n+archive, you should make sure that the archive is created by at least version\n+19 of the JDK.\n+\n+\n+### Restrictions on Class Path and Module Path\n+\n+-   Neither the class path (`-classpath` and `-Xbootclasspath\/a`)\n+    nor the module path (`--module-path`) can contain non-empty directories.\n+\n+-   Only modular JAR files are supported in `--module-path`. Exploded\n+    modules are not supported.\n+\n+-   The class path used at archive creation time must be the same as\n+    (or a prefix of) the class path used at run time. (There's no\n+    such requirement for the module path.)\n+\n+-   The CDS archive cannot be loaded if any JAR files in the class path or\n+    module path are modified after the archive is generated.\n+\n+-   If any of the VM options `--upgrade-module-path`, `--patch-module` or\n+    `--limit-modules` are specified, CDS is disabled. This means that the\n+    JVM will execute without loading any CDS archives. In addition, if\n+    you try to create a CDS archive with any of these 3 options specified,\n+    the JVM will report an error.\n+\n+## Performance Tuning Examples\n+\n+You can use the Java advanced runtime options to optimize the performance of\n+your applications.\n+\n+### Tuning for Higher Throughput\n+\n+Use the following commands and advanced options to achieve higher\n+throughput performance for your application:\n+\n+>   `java -server -XX:+UseParallelGC -XX:+UseLargePages -Xmn10g  -Xms26g -Xmx26g`\n+\n+### Tuning for Lower Response Time\n+\n+Use the following commands and advanced options to achieve lower\n+response times for your application:\n+\n+>   `java -XX:+UseG1GC -XX:MaxGCPauseMillis=100`\n+\n+### Keeping the Java Heap Small and Reducing the Dynamic Footprint of Embedded Applications\n+\n+Use the following advanced runtime options to keep the Java heap small and\n+reduce the dynamic footprint of embedded applications:\n+\n+>   `-XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5`\n+\n+> **Note:** The defaults for these two options are 70% and 40% respectively. Because\n+performance sacrifices can occur when using these small settings, you should\n+optimize for a small footprint by reducing these settings as much as possible\n+without introducing unacceptable performance degradation.\n+\n+## Exit Status\n+\n+The following exit values are typically returned by the launcher when the\n+launcher is called with the wrong arguments, serious errors, or exceptions\n+thrown by the JVM. However, a Java application may choose to return any value\n+by using the API call `System.exit(exitValue)`. The values are:\n+\n+-   `0`: Successful completion\n+\n+-   `>0`: An error occurred\n","filename":"src\/java.base\/share\/man\/java.md","additions":4050,"deletions":0,"binary":false,"changes":4050,"status":"added"},{"patch":"@@ -1,2991 +0,0 @@\n-.\\\" Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-'\\\" t\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"KEYTOOL\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-keytool - a key and certificate management utility\n-.SH SYNOPSIS\n-.PP\n-\\f[V]keytool\\f[R] [\\f[I]commands\\f[R]]\n-.TP\n-\\f[I]commands\\f[R]\n-Commands for \\f[V]keytool\\f[R] include the following:\n-.RS\n-.IP \\[bu] 2\n-\\f[V]-certreq\\f[R]: Generates a certificate request\n-.IP \\[bu] 2\n-\\f[V]-changealias\\f[R]: Changes an entry\\[aq]s alias\n-.IP \\[bu] 2\n-\\f[V]-delete\\f[R]: Deletes an entry\n-.IP \\[bu] 2\n-\\f[V]-exportcert\\f[R]: Exports certificate\n-.IP \\[bu] 2\n-\\f[V]-genkeypair\\f[R]: Generates a key pair\n-.IP \\[bu] 2\n-\\f[V]-genseckey\\f[R]: Generates a secret key\n-.IP \\[bu] 2\n-\\f[V]-gencert\\f[R]: Generates a certificate from a certificate request\n-.IP \\[bu] 2\n-\\f[V]-importcert\\f[R]: Imports a certificate or a certificate chain\n-.IP \\[bu] 2\n-\\f[V]-importpass\\f[R]: Imports a password\n-.IP \\[bu] 2\n-\\f[V]-importkeystore\\f[R]: Imports one or all entries from another\n-keystore\n-.IP \\[bu] 2\n-\\f[V]-keypasswd\\f[R]: Changes the key password of an entry\n-.IP \\[bu] 2\n-\\f[V]-list\\f[R]: Lists entries in a keystore\n-.IP \\[bu] 2\n-\\f[V]-printcert\\f[R]: Prints the content of a certificate\n-.IP \\[bu] 2\n-\\f[V]-printcertreq\\f[R]: Prints the content of a certificate request\n-.IP \\[bu] 2\n-\\f[V]-printcrl\\f[R]: Prints the content of a Certificate Revocation List\n-(CRL) file\n-.IP \\[bu] 2\n-\\f[V]-storepasswd\\f[R]: Changes the store password of a keystore\n-.IP \\[bu] 2\n-\\f[V]-showinfo\\f[R]: Displays security-related information\n-.IP \\[bu] 2\n-\\f[V]-version\\f[R]: Prints the program version\n-.PP\n-See \\f[B]Commands and Options\\f[R] for a description of these commands\n-with their options.\n-.RE\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]keytool\\f[R] command is a key and certificate management\n-utility.\n-It enables users to administer their own public\/private key pairs and\n-associated certificates for use in self-authentication (where a user\n-authenticates themselves to other users and services) or data integrity\n-and authentication services, by using digital signatures.\n-The \\f[V]keytool\\f[R] command also enables users to cache the public\n-keys (in the form of certificates) of their communicating peers.\n-.PP\n-A certificate is a digitally signed statement from one entity (person,\n-company, and so on), which says that the public key (and some other\n-information) of some other entity has a particular value.\n-When data is digitally signed, the signature can be verified to check\n-the data integrity and authenticity.\n-Integrity means that the data hasn\\[aq]t been modified or tampered with,\n-and authenticity means that the data comes from the individual who\n-claims to have created and signed it.\n-.PP\n-The \\f[V]keytool\\f[R] command also enables users to administer secret\n-keys and passphrases used in symmetric encryption and decryption (Data\n-Encryption Standard).\n-It can also display other security-related information.\n-.PP\n-The \\f[V]keytool\\f[R] command stores the keys and certificates in a\n-keystore.\n-.PP\n-The \\f[V]keytool\\f[R] command uses the\n-\\f[V]jdk.certpath.disabledAlgorithms\\f[R] and\n-\\f[V]jdk.security.legacyAlgorithms\\f[R] security properties to determine\n-which algorithms are considered a security risk.\n-It emits warnings when disabled or legacy algorithms are being used.\n-The \\f[V]jdk.certpath.disabledAlgorithms\\f[R] and\n-\\f[V]jdk.security.legacyAlgorithms\\f[R] security properties are defined\n-in the \\f[V]java.security\\f[R] file (located in the JDK\\[aq]s\n-\\f[V]$JAVA_HOME\/conf\/security\\f[R] directory).\n-.SH COMMAND AND OPTION NOTES\n-.PP\n-The following notes apply to the descriptions in \\f[B]Commands and\n-Options\\f[R]:\n-.IP \\[bu] 2\n-All command and option names are preceded by a hyphen sign\n-(\\f[V]-\\f[R]).\n-.IP \\[bu] 2\n-Only one command can be provided.\n-.IP \\[bu] 2\n-Options for each command can be provided in any order.\n-.IP \\[bu] 2\n-There are two kinds of options, one is single-valued which should be\n-only provided once.\n-If a single-valued option is provided multiple times, the value of the\n-last one is used.\n-The other type is multi-valued, which can be provided multiple times and\n-all values are used.\n-The only multi-valued option currently supported is the \\f[V]-ext\\f[R]\n-option used to generate X.509v3 certificate extensions.\n-.IP \\[bu] 2\n-All items not italicized or in braces ({ }) or brackets ([ ]) are\n-required to appear as is.\n-.IP \\[bu] 2\n-Braces surrounding an option signify that a default value is used when\n-the option isn\\[aq]t specified on the command line.\n-Braces are also used around the \\f[V]-v\\f[R], \\f[V]-rfc\\f[R], and\n-\\f[V]-J\\f[R] options, which have meaning only when they appear on the\n-command line.\n-They don\\[aq]t have any default values.\n-.IP \\[bu] 2\n-Brackets surrounding an option signify that the user is prompted for the\n-values when the option isn\\[aq]t specified on the command line.\n-For the \\f[V]-keypass\\f[R] option, if you don\\[aq]t specify the option\n-on the command line, then the \\f[V]keytool\\f[R] command first attempts\n-to use the keystore password to recover the private\/secret key.\n-If this attempt fails, then the \\f[V]keytool\\f[R] command prompts you\n-for the private\/secret key password.\n-.IP \\[bu] 2\n-Items in italics (option values) represent the actual values that must\n-be supplied.\n-For example, here is the format of the \\f[V]-printcert\\f[R] command:\n-.RS 2\n-.RS\n-.PP\n-\\f[V]keytool -printcert\\f[R] {\\f[V]-file\\f[R] \\f[I]cert_file\\f[R]}\n-{\\f[V]-v\\f[R]}\n-.RE\n-.PP\n-When you specify a \\f[V]-printcert\\f[R] command, replace\n-\\f[I]cert_file\\f[R] with the actual file name, as follows:\n-\\f[V]keytool -printcert -file VScert.cer\\f[R]\n-.RE\n-.IP \\[bu] 2\n-Option values must be enclosed in quotation marks when they contain a\n-blank (space).\n-.SH COMMANDS AND OPTIONS\n-.PP\n-The keytool commands and their options can be grouped by the tasks that\n-they perform.\n-.PP\n-\\f[B]Commands for Creating or Adding Data to the Keystore\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-gencert\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-genkeypair\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-genseckey\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-importcert\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-importpass\\f[R]\n-.PP\n-\\f[B]Commands for Importing Contents from Another Keystore\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-importkeystore\\f[R]\n-.PP\n-\\f[B]Commands for Generating a Certificate Request\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-certreq\\f[R]\n-.PP\n-\\f[B]Commands for Exporting Data\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-exportcert\\f[R]\n-.PP\n-\\f[B]Commands for Displaying Data\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-list\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-printcert\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-printcertreq\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-printcrl\\f[R]\n-.PP\n-\\f[B]Commands for Managing the Keystore\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-storepasswd\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-keypasswd\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-delete\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-changealias\\f[R]\n-.PP\n-\\f[B]Commands for Displaying Security-related Information\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-showinfo\\f[R]\n-.PP\n-\\f[B]Commands for Displaying Program Version\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-version\\f[R]\n-.SH COMMANDS FOR CREATING OR ADDING DATA TO THE KEYSTORE\n-.TP\n-\\f[V]-gencert\\f[R]\n-The following are the available options for the \\f[V]-gencert\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-rfc\\f[R]}: Output in RFC (Request For Comment) style\n-.IP \\[bu] 2\n-{\\f[V]-infile\\f[R] \\f[I]infile\\f[R]}: Input file name\n-.IP \\[bu] 2\n-{\\f[V]-outfile\\f[R] \\f[I]outfile\\f[R]}: Output file name\n-.IP \\[bu] 2\n-{\\f[V]-alias\\f[R] \\f[I]alias\\f[R]}: Alias name of the entry to process\n-.IP \\[bu] 2\n-{\\f[V]-sigalg\\f[R] \\f[I]sigalg\\f[R]}: Signature algorithm name\n-.IP \\[bu] 2\n-{\\f[V]-dname\\f[R] \\f[I]dname\\f[R]}: Distinguished name\n-.IP \\[bu] 2\n-{\\f[V]-startdate\\f[R] \\f[I]startdate\\f[R]}: Certificate validity start\n-date and time\n-.IP \\[bu] 2\n-{\\f[V]-ext\\f[R] \\f[I]ext\\f[R]}*: X.509 extension\n-.IP \\[bu] 2\n-{\\f[V]-validity\\f[R] \\f[I]days\\f[R]}: Validity number of days\n-.IP \\[bu] 2\n-[\\f[V]-keypass\\f[R] \\f[I]arg\\f[R]]: Key password\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Adds a security provider by name (such as SunPKCS11)\n-with an optional configure argument.\n-The value of the security provider is the name of a security provider\n-that is defined in a module.\n-.RS 2\n-.PP\n-For example,\n-.RS\n-.PP\n-\\f[V]keytool -addprovider SunPKCS11 -providerarg some.cfg ...\\f[R]\n-.RE\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-For compatibility reasons, the SunPKCS11 provider can still be loaded\n-with \\f[V]-providerclass sun.security.pkcs11.SunPKCS11\\f[R] even if it\n-is now defined in a module.\n-This is the only module included in the JDK that needs a configuration,\n-and therefore the most widely used with the \\f[V]-providerclass\\f[R]\n-option.\n-For legacy security providers located on classpath and loaded by\n-reflection, \\f[V]-providerclass\\f[R] should still be used.\n-.RE\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.RS 2\n-.PP\n-For example, if \\f[V]MyProvider\\f[R] is a legacy provider loaded via\n-reflection,\n-.RS\n-.PP\n-\\f[V]keytool -providerclass com.example.MyProvider ...\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password provided through a protected mechanism\n-.PP\n-Use the \\f[V]-gencert\\f[R] command to generate a certificate as a\n-response to a certificate request file (which can be created by the\n-\\f[V]keytool -certreq\\f[R] command).\n-The command reads the request either from \\f[I]infile\\f[R] or, if\n-omitted, from the standard input, signs it by using the alias\\[aq]s\n-private key, and outputs the X.509 certificate into either\n-\\f[I]outfile\\f[R] or, if omitted, to the standard output.\n-When \\f[V]-rfc\\f[R] is specified, the output format is Base64-encoded\n-PEM; otherwise, a binary DER is created.\n-.PP\n-The \\f[V]-sigalg\\f[R] value specifies the algorithm that should be used\n-to sign the certificate.\n-The \\f[I]startdate\\f[R] argument is the start time and date that the\n-certificate is valid.\n-The \\f[I]days\\f[R] argument tells the number of days for which the\n-certificate should be considered valid.\n-.PP\n-When \\f[I]dname\\f[R] is provided, it is used as the subject of the\n-generated certificate.\n-Otherwise, the one from the certificate request is used.\n-.PP\n-The \\f[V]-ext\\f[R] value shows what X.509 extensions will be embedded in\n-the certificate.\n-Read \\f[B]Common Command Options\\f[R] for the grammar of \\f[V]-ext\\f[R].\n-.PP\n-The \\f[V]-gencert\\f[R] option enables you to create certificate chains.\n-The following example creates a certificate, \\f[V]e1\\f[R], that contains\n-three certificates in its certificate chain.\n-.PP\n-The following commands creates four key pairs named \\f[V]ca\\f[R],\n-\\f[V]ca1\\f[R], \\f[V]ca2\\f[R], and \\f[V]e1\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-keytool -alias ca -dname CN=CA -genkeypair -keyalg rsa\n-keytool -alias ca1 -dname CN=CA -genkeypair -keyalg rsa\n-keytool -alias ca2 -dname CN=CA -genkeypair -keyalg rsa\n-keytool -alias e1 -dname CN=E1 -genkeypair -keyalg rsa\n-\\f[R]\n-.fi\n-.PP\n-The following two commands create a chain of signed certificates;\n-\\f[V]ca\\f[R] signs \\f[V]ca1\\f[R] and \\f[V]ca1\\f[R] signs \\f[V]ca2\\f[R],\n-all of which are self-issued:\n-.IP\n-.nf\n-\\f[CB]\n-keytool -alias ca1 -certreq |\n-    keytool -alias ca -gencert -ext san=dns:ca1 |\n-    keytool -alias ca1 -importcert\n-\n-keytool -alias ca2 -certreq |\n-    keytool -alias ca1 -gencert -ext san=dns:ca2 |\n-    keytool -alias ca2 -importcert\n-\\f[R]\n-.fi\n-.PP\n-The following command creates the certificate \\f[V]e1\\f[R] and stores it\n-in the \\f[V]e1.cert\\f[R] file, which is signed by \\f[V]ca2\\f[R].\n-As a result, \\f[V]e1\\f[R] should contain \\f[V]ca\\f[R], \\f[V]ca1\\f[R],\n-and \\f[V]ca2\\f[R] in its certificate chain:\n-.RS\n-.PP\n-\\f[V]keytool -alias e1 -certreq | keytool -alias ca2 -gencert > e1.cert\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-genkeypair\\f[R]\n-The following are the available options for the \\f[V]-genkeypair\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-alias\\f[R] \\f[I]alias\\f[R]}: Alias name of the entry to process\n-.IP \\[bu] 2\n-\\f[V]-keyalg\\f[R] \\f[I]alg\\f[R]: Key algorithm name\n-.IP \\[bu] 2\n-{\\f[V]-keysize\\f[R] \\f[I]size\\f[R]}: Key bit size\n-.IP \\[bu] 2\n-{\\f[V]-groupname\\f[R] \\f[I]name\\f[R]}: Group name.\n-For example, an Elliptic Curve name.\n-.IP \\[bu] 2\n-{\\f[V]-sigalg\\f[R] \\f[I]alg\\f[R]}: Signature algorithm name\n-.IP \\[bu] 2\n-{\\f[V]-signer\\f[R] \\f[I]alias\\f[R]}: Signer alias\n-.IP \\[bu] 2\n-[\\f[V]-signerkeypass\\f[R] \\f[I]arg\\f[R]]: Signer key password\n-.IP \\[bu] 2\n-[\\f[V]-dname\\f[R] \\f[I]name\\f[R]]: Distinguished name\n-.IP \\[bu] 2\n-{\\f[V]-startdate\\f[R] \\f[I]date\\f[R]}: Certificate validity start date\n-and time\n-.IP \\[bu] 2\n-{\\f[V]-ext\\f[R] \\f[I]value\\f[R]}*: X.509 extension\n-.IP \\[bu] 2\n-{\\f[V]-validity\\f[R] \\f[I]days\\f[R]}: Validity number of days\n-.IP \\[bu] 2\n-[\\f[V]-keypass\\f[R] \\f[I]arg\\f[R]]: Key password\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]] }: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password provided through a protected mechanism\n-.PP\n-Use the \\f[V]-genkeypair\\f[R] command to generate a key pair (a public\n-key and associated private key).\n-When the \\f[V]-signer\\f[R] option is not specified, the public key is\n-wrapped in an X.509 v3 self-signed certificate and stored as a\n-single-element certificate chain.\n-When the \\f[V]-signer\\f[R] option is specified, a new certificate is\n-generated and signed by the designated signer and stored as a\n-multiple-element certificate chain (containing the generated certificate\n-itself, and the signer\\[aq]s certificate chain).\n-The certificate chain and private key are stored in a new keystore entry\n-that is identified by its alias.\n-.PP\n-The \\f[V]-keyalg\\f[R] value specifies the algorithm to be used to\n-generate the key pair.\n-The \\f[V]-keysize\\f[R] value specifies the size of each key to be\n-generated.\n-The \\f[V]-groupname\\f[R] value specifies the named group (for example,\n-the standard or predefined name of an Elliptic Curve) of the key to be\n-generated.\n-.PP\n-When a \\f[V]-keysize\\f[R] value is provided, it will be used to\n-initialize a \\f[V]KeyPairGenerator\\f[R] object using the\n-\\f[V]initialize(int keysize)\\f[R] method.\n-When a \\f[V]-groupname\\f[R] value is provided, it will be used to\n-initialize a \\f[V]KeyPairGenerator\\f[R] object using the\n-\\f[V]initialize(AlgorithmParameterSpec params)\\f[R] method where\n-\\f[V]params\\f[R] is \\f[V]new NamedParameterSpec(groupname)\\f[R].\n-.PP\n-Only one of \\f[V]-groupname\\f[R] and \\f[V]-keysize\\f[R] can be\n-specified.\n-If an algorithm has multiple named groups that have the same key size,\n-the \\f[V]-groupname\\f[R] option should usually be used.\n-In this case, if \\f[V]-keysize\\f[R] is specified, it\\[aq]s up to the\n-security provider to determine which named group is chosen when\n-generating a key pair.\n-.PP\n-The \\f[V]-sigalg\\f[R] value specifies the algorithm that should be used\n-to sign the certificate.\n-This algorithm must be compatible with the \\f[V]-keyalg\\f[R] value.\n-.PP\n-The \\f[V]-signer\\f[R] value specifies the alias of a\n-\\f[V]PrivateKeyEntry\\f[R] for the signer that already exists in the\n-keystore.\n-This option is used to sign the certificate with the signer\\[aq]s\n-private key.\n-This is especially useful for key agreement algorithms (i.e.\n-the \\f[V]-keyalg\\f[R] value is \\f[V]XDH\\f[R], \\f[V]X25519\\f[R],\n-\\f[V]X448\\f[R], or \\f[V]DH\\f[R]) as these keys cannot be used for\n-digital signatures, and therefore a self-signed certificate cannot be\n-created.\n-.PP\n-The \\f[V]-signerkeypass\\f[R] value specifies the password of the\n-signer\\[aq]s private key.\n-It can be specified if the private key of the signer entry is protected\n-by a password different from the store password.\n-.PP\n-The \\f[V]-dname\\f[R] value specifies the X.500 Distinguished Name to be\n-associated with the value of \\f[V]-alias\\f[R].\n-If the \\f[V]-signer\\f[R] option is not specified, the issuer and subject\n-fields of the self-signed certificate are populated with the specified\n-distinguished name.\n-If the \\f[V]-signer\\f[R] option is specified, the subject field of the\n-certificate is populated with the specified distinguished name and the\n-issuer field is populated with the subject field of the signer\\[aq]s\n-certificate.\n-If a distinguished name is not provided at the command line, then the\n-user is prompted for one.\n-.PP\n-The value of \\f[V]-keypass\\f[R] is a password used to protect the\n-private key of the generated key pair.\n-If a password is not provided, then the user is prompted for it.\n-If you press the \\f[B]Return\\f[R] key at the prompt, then the key\n-password is set to the same password as the keystore password.\n-The \\f[V]-keypass\\f[R] value must have at least six characters.\n-.PP\n-The value of \\f[V]-startdate\\f[R] specifies the issue time of the\n-certificate, also known as the \\[dq]Not Before\\[dq] value of the X.509\n-certificate\\[aq]s Validity field.\n-.PP\n-The option value can be set in one of these two forms:\n-.PP\n-([\\f[V]+-\\f[R]]\\f[I]nnn\\f[R][\\f[V]ymdHMS\\f[R]])+\n-.PP\n-[\\f[I]yyyy\\f[R]\\f[V]\/\\f[R]\\f[I]mm\\f[R]\\f[V]\/\\f[R]\\f[I]dd\\f[R]]\n-[\\f[I]HH\\f[R]\\f[V]:\\f[R]\\f[I]MM\\f[R]\\f[V]:\\f[R]\\f[I]SS\\f[R]]\n-.PP\n-With the first form, the issue time is shifted by the specified value\n-from the current time.\n-The value is a concatenation of a sequence of subvalues.\n-Inside each subvalue, the plus sign (+) means shift forward, and the\n-minus sign (-) means shift backward.\n-The time to be shifted is \\f[I]nnn\\f[R] units of years, months, days,\n-hours, minutes, or seconds (denoted by a single character of\n-\\f[V]y\\f[R], \\f[V]m\\f[R], \\f[V]d\\f[R], \\f[V]H\\f[R], \\f[V]M\\f[R], or\n-\\f[V]S\\f[R] respectively).\n-The exact value of the issue time is calculated by using the\n-\\f[V]java.util.GregorianCalendar.add(int field, int amount)\\f[R] method\n-on each subvalue, from left to right.\n-For example, the issue time can be specified by:\n-.IP\n-.nf\n-\\f[CB]\n-Calendar c = new GregorianCalendar();\n-c.add(Calendar.YEAR, -1);\n-c.add(Calendar.MONTH, 1);\n-c.add(Calendar.DATE, -1);\n-return c.getTime()\n-\\f[R]\n-.fi\n-.PP\n-With the second form, the user sets the exact issue time in two parts,\n-year\/month\/day and hour:minute:second (using the local time zone).\n-The user can provide only one part, which means the other part is the\n-same as the current date (or time).\n-The user must provide the exact number of digits shown in the format\n-definition (padding with 0 when shorter).\n-When both date and time are provided, there is one (and only one) space\n-character between the two parts.\n-The hour should always be provided in 24-hour format.\n-.PP\n-When the option isn\\[aq]t provided, the start date is the current time.\n-The option can only be provided one time.\n-.PP\n-The value of \\f[I]date\\f[R] specifies the number of days (starting at\n-the date specified by \\f[V]-startdate\\f[R], or the current date when\n-\\f[V]-startdate\\f[R] isn\\[aq]t specified) for which the certificate\n-should be considered valid.\n-.RE\n-.TP\n-\\f[V]-genseckey\\f[R]\n-The following are the available options for the \\f[V]-genseckey\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-alias\\f[R] \\f[I]alias\\f[R]}: Alias name of the entry to process\n-.IP \\[bu] 2\n-[\\f[V]-keypass\\f[R] \\f[I]arg\\f[R]]: Key password\n-.IP \\[bu] 2\n-\\f[V]-keyalg\\f[R] \\f[I]alg\\f[R]: Key algorithm name\n-.IP \\[bu] 2\n-{\\f[V]-keysize\\f[R] \\f[I]size\\f[R]}: Key bit size\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password provided through a protected mechanism\n-.PP\n-Use the \\f[V]-genseckey\\f[R] command to generate a secret key and store\n-it in a new \\f[V]KeyStore.SecretKeyEntry\\f[R] identified by\n-\\f[V]alias\\f[R].\n-.PP\n-The value of \\f[V]-keyalg\\f[R] specifies the algorithm to be used to\n-generate the secret key, and the value of \\f[V]-keysize\\f[R] specifies\n-the size of the key that is generated.\n-The \\f[V]-keypass\\f[R] value is a password that protects the secret key.\n-If a password is not provided, then the user is prompted for it.\n-If you press the \\f[B]Return\\f[R] key at the prompt, then the key\n-password is set to the same password that is used for the\n-\\f[V]-keystore\\f[R].\n-The \\f[V]-keypass\\f[R] value must contain at least six characters.\n-.RE\n-.TP\n-\\f[V]-importcert\\f[R]\n-The following are the available options for the \\f[V]-importcert\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-noprompt\\f[R]}: Do not prompt\n-.IP \\[bu] 2\n-{\\f[V]-trustcacerts\\f[R]}: Trust certificates from cacerts\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password is provided through protected mechanism\n-.IP \\[bu] 2\n-{\\f[V]-alias\\f[R] \\f[I]alias\\f[R]}: Alias name of the entry to process\n-.IP \\[bu] 2\n-{\\f[V]-file\\f[R] \\f[I]file\\f[R]}: Input file name\n-.IP \\[bu] 2\n-[\\f[V]-keypass\\f[R] \\f[I]arg\\f[R]]: Key password\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-{\\f[V]-cacerts\\f[R]}: Access the cacerts keystore\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.PP\n-Use the \\f[V]-importcert\\f[R] command to read the certificate or\n-certificate chain (where the latter is supplied in a PKCS#7 formatted\n-reply or in a sequence of X.509 certificates) from \\f[V]-file\\f[R]\n-\\f[I]file\\f[R], and store it in the \\f[V]keystore\\f[R] entry identified\n-by \\f[V]-alias\\f[R].\n-If \\f[V]-file\\f[R] \\f[I]file\\f[R] is not specified, then the certificate\n-or certificate chain is read from \\f[V]stdin\\f[R].\n-.PP\n-The \\f[V]keytool\\f[R] command can import X.509 v1, v2, and v3\n-certificates, and PKCS#7 formatted certificate chains consisting of\n-certificates of that type.\n-The data to be imported must be provided either in binary encoding\n-format or in printable encoding format (also known as Base64 encoding)\n-as defined by the Internet RFC 1421 standard.\n-In the latter case, the encoding must be bounded at the beginning by a\n-string that starts with \\f[V]-----BEGIN\\f[R], and bounded at the end by\n-a string that starts with \\f[V]-----END\\f[R].\n-.PP\n-You import a certificate for two reasons: To add it to the list of\n-trusted certificates, and to import a certificate reply received from a\n-certificate authority (CA) as the result of submitting a Certificate\n-Signing Request (CSR) to that CA.\n-See the \\f[V]-certreq\\f[R] command in \\f[B]Commands for Generating a\n-Certificate Request\\f[R].\n-.PP\n-The type of import is indicated by the value of the \\f[V]-alias\\f[R]\n-option.\n-If the alias doesn\\[aq]t point to a key entry, then the\n-\\f[V]keytool\\f[R] command assumes you are adding a trusted certificate\n-entry.\n-In this case, the alias shouldn\\[aq]t already exist in the keystore.\n-If the alias does exist, then the \\f[V]keytool\\f[R] command outputs an\n-error because a trusted certificate already exists for that alias, and\n-doesn\\[aq]t import the certificate.\n-If \\f[V]-alias\\f[R] points to a key entry, then the \\f[V]keytool\\f[R]\n-command assumes that you\\[aq]re importing a certificate reply.\n-.RE\n-.TP\n-\\f[V]-importpass\\f[R]\n-The following are the available options for the \\f[V]-importpass\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-alias\\f[R] \\f[I]alias\\f[R]}: Alias name of the entry to process\n-.IP \\[bu] 2\n-[\\f[V]-keypass\\f[R] \\f[I]arg\\f[R]]: Key password\n-.IP \\[bu] 2\n-{\\f[V]-keyalg\\f[R] \\f[I]alg\\f[R]}: Key algorithm name\n-.IP \\[bu] 2\n-{\\f[V]-keysize\\f[R] \\f[I]size\\f[R]}: Key bit size\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password provided through a protected mechanism\n-.PP\n-Use the \\f[V]-importpass\\f[R] command to imports a passphrase and store\n-it in a new \\f[V]KeyStore.SecretKeyEntry\\f[R] identified by\n-\\f[V]-alias\\f[R].\n-The passphrase may be supplied via the standard input stream; otherwise\n-the user is prompted for it.\n-The \\f[V]-keypass\\f[R] option provides a password to protect the\n-imported passphrase.\n-If a password is not provided, then the user is prompted for it.\n-If you press the \\f[B]Return\\f[R] key at the prompt, then the key\n-password is set to the same password as that used for the\n-\\f[V]keystore\\f[R].\n-The \\f[V]-keypass\\f[R] value must contain at least six characters.\n-.RE\n-.SH COMMANDS FOR IMPORTING CONTENTS FROM ANOTHER KEYSTORE\n-.TP\n-\\f[V]-importkeystore\\f[R]\n-The following are the available options for the\n-\\f[V]-importkeystore\\f[R] command:\n-.RS\n-.IP \\[bu] 2\n-\\f[V]-srckeystore\\f[R] \\f[I]keystore\\f[R]: Source keystore name\n-.IP \\[bu] 2\n-{\\f[V]-destkeystore\\f[R] \\f[I]keystore\\f[R]}: Destination keystore name\n-.IP \\[bu] 2\n-{\\f[V]-srcstoretype\\f[R] \\f[I]type\\f[R]}: Source keystore type\n-.IP \\[bu] 2\n-{\\f[V]-deststoretype\\f[R] \\f[I]type\\f[R]}: Destination keystore type\n-.IP \\[bu] 2\n-[\\f[V]-srcstorepass\\f[R] \\f[I]arg\\f[R]]: Source keystore password\n-.IP \\[bu] 2\n-[\\f[V]-deststorepass\\f[R] \\f[I]arg\\f[R]]: Destination keystore password\n-.IP \\[bu] 2\n-{\\f[V]-srcprotected\\f[R]}: Source keystore password protected\n-.IP \\[bu] 2\n-{\\f[V]-destprotected\\f[R]}: Destination keystore password protected\n-.IP \\[bu] 2\n-{\\f[V]-srcprovidername\\f[R] \\f[I]name\\f[R]}: Source keystore provider\n-name\n-.IP \\[bu] 2\n-{\\f[V]-destprovidername\\f[R] \\f[I]name\\f[R]}: Destination keystore\n-provider name\n-.IP \\[bu] 2\n-{\\f[V]-srcalias\\f[R] \\f[I]alias\\f[R]}: Source alias\n-.IP \\[bu] 2\n-{\\f[V]-destalias\\f[R] \\f[I]alias\\f[R]}: Destination alias\n-.IP \\[bu] 2\n-[\\f[V]-srckeypass\\f[R] \\f[I]arg\\f[R]]: Source key password\n-.IP \\[bu] 2\n-[\\f[V]-destkeypass\\f[R] \\f[I]arg\\f[R]]: Destination key password\n-.IP \\[bu] 2\n-{\\f[V]-noprompt\\f[R]}: Do not prompt\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-This is the first line of all options:\n-.RS\n-.PP\n-\\f[V]-srckeystore\\f[R] \\f[I]keystore\\f[R] \\f[V]-destkeystore\\f[R]\n-\\f[I]keystore\\f[R]\n-.RE\n-.PP\n-Use the \\f[V]-importkeystore\\f[R] command to import a single entry or\n-all entries from a source keystore to a destination keystore.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-If you do not specify \\f[V]-destkeystore\\f[R] when using the\n-\\f[V]keytool -importkeystore\\f[R] command, then the default keystore\n-used is \\f[V]$HOME\/.keystore\\f[R].\n-.PP\n-When the \\f[V]-srcalias\\f[R] option is provided, the command imports the\n-single entry identified by the alias to the destination keystore.\n-If a destination alias isn\\[aq]t provided with \\f[V]-destalias\\f[R],\n-then \\f[V]-srcalias\\f[R] is used as the destination alias.\n-If the source entry is protected by a password, then\n-\\f[V]-srckeypass\\f[R] is used to recover the entry.\n-If \\f[V]-srckeypass\\f[R] isn\\[aq]t provided, then the \\f[V]keytool\\f[R]\n-command attempts to use \\f[V]-srcstorepass\\f[R] to recover the entry.\n-If \\f[V]-srcstorepass\\f[R] is not provided or is incorrect, then the\n-user is prompted for a password.\n-The destination entry is protected with \\f[V]-destkeypass\\f[R].\n-If \\f[V]-destkeypass\\f[R] isn\\[aq]t provided, then the destination entry\n-is protected with the source entry password.\n-For example, most third-party tools require \\f[V]storepass\\f[R] and\n-\\f[V]keypass\\f[R] in a PKCS #12 keystore to be the same.\n-To create a PKCS#12 keystore for these tools, always specify a\n-\\f[V]-destkeypass\\f[R] that is the same as \\f[V]-deststorepass\\f[R].\n-.PP\n-If the \\f[V]-srcalias\\f[R] option isn\\[aq]t provided, then all entries\n-in the source keystore are imported into the destination keystore.\n-Each destination entry is stored under the alias from the source entry.\n-If the source entry is protected by a password, then\n-\\f[V]-srcstorepass\\f[R] is used to recover the entry.\n-If \\f[V]-srcstorepass\\f[R] is not provided or is incorrect, then the\n-user is prompted for a password.\n-If a source keystore entry type isn\\[aq]t supported in the destination\n-keystore, or if an error occurs while storing an entry into the\n-destination keystore, then the user is prompted either to skip the entry\n-and continue or to quit.\n-The destination entry is protected with the source entry password.\n-.PP\n-If the destination alias already exists in the destination keystore,\n-then the user is prompted either to overwrite the entry or to create a\n-new entry under a different alias name.\n-.PP\n-If the \\f[V]-noprompt\\f[R] option is provided, then the user isn\\[aq]t\n-prompted for a new destination alias.\n-Existing entries are overwritten with the destination alias name.\n-Entries that can\\[aq]t be imported are skipped and a warning is\n-displayed.\n-.RE\n-.SH COMMANDS FOR GENERATING A CERTIFICATE REQUEST\n-.TP\n-\\f[V]-certreq\\f[R]\n-The following are the available options for the \\f[V]-certreq\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-alias\\f[R] \\f[I]alias\\f[R]}: Alias name of the entry to process\n-.IP \\[bu] 2\n-{\\f[V]-sigalg\\f[R] \\f[I]alg\\f[R]}: Signature algorithm name\n-.IP \\[bu] 2\n-{\\f[V]-file\\f[R] \\f[I]file\\f[R]}: Output file name\n-.IP \\[bu] 2\n-[ \\f[V]-keypass\\f[R] \\f[I]arg\\f[R]]: Key password\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-{\\f[V]-dname\\f[R] \\f[I]name\\f[R]}: Distinguished name\n-.IP \\[bu] 2\n-{\\f[V]-ext\\f[R] \\f[I]value\\f[R]}: X.509 extension\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password provided through a protected mechanism\n-.PP\n-Use the \\f[V]-certreq\\f[R] command to generate a Certificate Signing\n-Request (CSR) using the PKCS #10 format.\n-.PP\n-A CSR is intended to be sent to a CA.\n-The CA authenticates the certificate requestor (usually offline) and\n-returns a certificate or certificate chain to replace the existing\n-certificate chain (initially a self-signed certificate) in the keystore.\n-.PP\n-The private key associated with \\f[I]alias\\f[R] is used to create the\n-PKCS #10 certificate request.\n-To access the private key, the correct password must be provided.\n-If \\f[V]-keypass\\f[R] isn\\[aq]t provided at the command line and is\n-different from the password used to protect the integrity of the\n-keystore, then the user is prompted for it.\n-If \\f[V]-dname\\f[R] is provided, then it is used as the subject in the\n-CSR.\n-Otherwise, the X.500 Distinguished Name associated with alias is used.\n-.PP\n-The \\f[V]-sigalg\\f[R] value specifies the algorithm that should be used\n-to sign the CSR.\n-.PP\n-The CSR is stored in the \\f[V]-file\\f[R] \\f[I]file\\f[R].\n-If a file is not specified, then the CSR is output to \\f[V]-stdout\\f[R].\n-.PP\n-Use the \\f[V]-importcert\\f[R] command to import the response from the\n-CA.\n-.RE\n-.SH COMMANDS FOR EXPORTING DATA\n-.TP\n-\\f[V]-exportcert\\f[R]\n-The following are the available options for the \\f[V]-exportcert\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-rfc\\f[R]}: Output in RFC style\n-.IP \\[bu] 2\n-{\\f[V]-alias\\f[R] \\f[I]alias\\f[R]}: Alias name of the entry to process\n-.IP \\[bu] 2\n-{\\f[V]-file\\f[R] \\f[I]file\\f[R]}: Output file name\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-{\\f[V]-cacerts\\f[R]}: Access the cacerts keystore\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]] }: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password provided through a protected mechanism\n-.PP\n-Use the \\f[V]-exportcert\\f[R] command to read a certificate from the\n-keystore that is associated with \\f[V]-alias\\f[R] \\f[I]alias\\f[R] and\n-store it in the \\f[V]-file\\f[R] \\f[I]file\\f[R].\n-When a file is not specified, the certificate is output to\n-\\f[V]stdout\\f[R].\n-.PP\n-By default, the certificate is output in binary encoding.\n-If the \\f[V]-rfc\\f[R] option is specified, then the output in the\n-printable encoding format defined by the Internet RFC 1421 Certificate\n-Encoding Standard.\n-.PP\n-If \\f[V]-alias\\f[R] refers to a trusted certificate, then that\n-certificate is output.\n-Otherwise, \\f[V]-alias\\f[R] refers to a key entry with an associated\n-certificate chain.\n-In that case, the first certificate in the chain is returned.\n-This certificate authenticates the public key of the entity addressed by\n-\\f[V]-alias\\f[R].\n-.RE\n-.SH COMMANDS FOR DISPLAYING DATA\n-.TP\n-\\f[V]-list\\f[R]\n-The following are the available options for the \\f[V]-list\\f[R] command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-rfc\\f[R]}: Output in RFC style\n-.IP \\[bu] 2\n-{\\f[V]-alias\\f[R] \\f[I]alias\\f[R]}: Alias name of the entry to process\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-{\\f[V]-cacerts\\f[R]}: Access the cacerts keystore\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]] }: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password provided through a protected mechanism\n-.PP\n-Use the \\f[V]-list\\f[R] command to print the contents of the keystore\n-entry identified by \\f[V]-alias\\f[R] to \\f[V]stdout\\f[R].\n-If \\f[V]-alias\\f[R] \\f[I]alias\\f[R] is not specified, then the contents\n-of the entire keystore are printed.\n-.PP\n-By default, this command prints the SHA-256 fingerprint of a\n-certificate.\n-If the \\f[V]-v\\f[R] option is specified, then the certificate is printed\n-in human-readable format, with additional information such as the owner,\n-issuer, serial number, and any extensions.\n-If the \\f[V]-rfc\\f[R] option is specified, then the certificate contents\n-are printed by using the printable encoding format, as defined by the\n-Internet RFC 1421 Certificate Encoding Standard.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-You can\\[aq]t specify both \\f[V]-v\\f[R] and \\f[V]-rfc\\f[R] in the same\n-command.\n-Otherwise, an error is reported.\n-.RE\n-.TP\n-\\f[V]-printcert\\f[R]\n-The following are the available options for the \\f[V]-printcert\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-rfc\\f[R]}: Output in RFC style\n-.IP \\[bu] 2\n-{\\f[V]-file\\f[R] \\f[I]cert_file\\f[R]}: Input file name\n-.IP \\[bu] 2\n-{\\f[V]-sslserver\\f[R] \\f[I]server\\f[R][\\f[V]:\\f[R]\\f[I]port\\f[R]]}::\n-Secure Sockets Layer (SSL) server host and port\n-.IP \\[bu] 2\n-{\\f[V]-jarfile\\f[R] \\f[I]JAR_file\\f[R]}: Signed \\f[V].jar\\f[R] file\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-{\\f[V]-trustcacerts\\f[R]}: Trust certificates from cacerts\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password is provided through protected mechanism\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.PP\n-Use the \\f[V]-printcert\\f[R] command to read and print the certificate\n-from \\f[V]-file\\f[R] \\f[I]cert_file\\f[R], the SSL server located at\n-\\f[V]-sslserver\\f[R] \\f[I]server\\f[R][\\f[V]:\\f[R]\\f[I]port\\f[R]], or the\n-signed JAR file specified by \\f[V]-jarfile\\f[R] \\f[I]JAR_file\\f[R].\n-It prints its contents in a human-readable format.\n-When a port is not specified, the standard HTTPS port 443 is assumed.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The \\f[V]-sslserver\\f[R] and \\f[V]-file\\f[R] options can\\[aq]t be\n-provided in the same command.\n-Otherwise, an error is reported.\n-If you don\\[aq]t specify either option, then the certificate is read\n-from \\f[V]stdin\\f[R].\n-.PP\n-When\\f[V]-rfc\\f[R] is specified, the \\f[V]keytool\\f[R] command prints\n-the certificate in PEM mode as defined by the Internet RFC 1421\n-Certificate Encoding standard.\n-.PP\n-If the certificate is read from a file or \\f[V]stdin\\f[R], then it might\n-be either binary encoded or in printable encoding format, as defined by\n-the RFC 1421 Certificate Encoding standard.\n-.PP\n-If the SSL server is behind a firewall, then the\n-\\f[V]-J-Dhttps.proxyHost=proxyhost\\f[R] and\n-\\f[V]-J-Dhttps.proxyPort=proxyport\\f[R] options can be specified on the\n-command line for proxy tunneling.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-This command can be used independently of a keystore.\n-This command does not check for the weakness of a certificate\\[aq]s\n-signature algorithm if it is a trusted certificate in the user keystore\n-(specified by \\f[V]-keystore\\f[R]) or in the \\f[V]cacerts\\f[R] keystore\n-(if \\f[V]-trustcacerts\\f[R] is specified).\n-.RE\n-.TP\n-\\f[V]-printcertreq\\f[R]\n-The following are the available options for the \\f[V]-printcertreq\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-file\\f[R] \\f[I]file\\f[R]}: Input file name\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.PP\n-Use the \\f[V]-printcertreq\\f[R] command to print the contents of a PKCS\n-#10 format certificate request, which can be generated by the\n-\\f[V]keytool -certreq\\f[R] command.\n-The command reads the request from file.\n-If there is no file, then the request is read from the standard input.\n-.RE\n-.TP\n-\\f[V]-printcrl\\f[R]\n-The following are the available options for the \\f[V]-printcrl\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-file crl\\f[R]}: Input file name\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-{\\f[V]-trustcacerts\\f[R]}: Trust certificates from cacerts\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password is provided through protected mechanism\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.PP\n-Use the \\f[V]-printcrl\\f[R] command to read the Certificate Revocation\n-List (CRL) from \\f[V]-file crl\\f[R] .\n-A CRL is a list of the digital certificates that were revoked by the CA\n-that issued them.\n-The CA generates the \\f[V]crl\\f[R] file.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-This command can be used independently of a keystore.\n-This command attempts to verify the CRL using a certificate from the\n-user keystore (specified by \\f[V]-keystore\\f[R]) or the\n-\\f[V]cacerts\\f[R] keystore (if \\f[V]-trustcacerts\\f[R] is specified),\n-and will print out a warning if it cannot be verified.\n-.RE\n-.SH COMMANDS FOR MANAGING THE KEYSTORE\n-.TP\n-\\f[V]-storepasswd\\f[R]\n-The following are the available options for the \\f[V]-storepasswd\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-[\\f[V]-new\\f[R] \\f[I]arg\\f[R]]: New password\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-{\\f[V]-cacerts\\f[R]}: Access the cacerts keystore\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.PP\n-Use the \\f[V]-storepasswd\\f[R] command to change the password used to\n-protect the integrity of the keystore contents.\n-The new password is set by \\f[V]-new\\f[R] \\f[I]arg\\f[R] and must contain\n-at least six characters.\n-.RE\n-.TP\n-\\f[V]-keypasswd\\f[R]\n-The following are the available options for the \\f[V]-keypasswd\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-alias\\f[R] \\f[I]alias\\f[R]}: Alias name of the entry to process\n-.IP \\[bu] 2\n-[\\f[V]-keypass\\f[R] \\f[I]old_keypass\\f[R]]: Key password\n-.IP \\[bu] 2\n-[\\f[V]-new\\f[R] \\f[I]new_keypass\\f[R]]: New password\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-{\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]}: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.PP\n-Use the \\f[V]-keypasswd\\f[R] command to change the password (under which\n-private\/secret keys identified by \\f[V]-alias\\f[R] are protected) from\n-\\f[V]-keypass\\f[R] \\f[I]old_keypass\\f[R] to \\f[V]-new\\f[R]\n-\\f[I]new_keypass\\f[R].\n-The password value must contain at least six characters.\n-.PP\n-If the \\f[V]-keypass\\f[R] option isn\\[aq]t provided at the command line\n-and the \\f[V]-keypass\\f[R] password is different from the keystore\n-password (\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]), then the user is prompted\n-for it.\n-.PP\n-If the \\f[V]-new\\f[R] option isn\\[aq]t provided at the command line,\n-then the user is prompted for it.\n-.RE\n-.TP\n-\\f[V]-delete\\f[R]\n-The following are the available options for the \\f[V]-delete\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-[\\f[V]-alias\\f[R] \\f[I]alias\\f[R]]: Alias name of the entry to process\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-{\\f[V]-cacerts\\f[R]}: Access the cacerts keystore\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password provided through a protected mechanism\n-.PP\n-Use the \\f[V]-delete\\f[R] command to delete the \\f[V]-alias\\f[R]\n-\\f[I]alias\\f[R] entry from the keystore.\n-When not provided at the command line, the user is prompted for the\n-\\f[V]alias\\f[R].\n-.RE\n-.TP\n-\\f[V]-changealias\\f[R]\n-The following are the available options for the \\f[V]-changealias\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-alias\\f[R] \\f[I]alias\\f[R]}: Alias name of the entry to process\n-.IP \\[bu] 2\n-[\\f[V]-destalias\\f[R] \\f[I]alias\\f[R]]: Destination alias\n-.IP \\[bu] 2\n-[\\f[V]-keypass\\f[R] \\f[I]arg\\f[R]]: Key password\n-.IP \\[bu] 2\n-{\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]}: Keystore name\n-.IP \\[bu] 2\n-{\\f[V]-cacerts\\f[R]}: Access the cacerts keystore\n-.IP \\[bu] 2\n-[\\f[V]-storepass\\f[R] \\f[I]arg\\f[R]]: Keystore password\n-.IP \\[bu] 2\n-{\\f[V]-storetype\\f[R] \\f[I]type\\f[R]}: Keystore type\n-.IP \\[bu] 2\n-{\\f[V]-providername\\f[R] \\f[I]name\\f[R]}: Provider name\n-.IP \\[bu] 2\n-{\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by name (such as SunPKCS11) with\n-an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerclass\\f[R] \\f[I]class\\f[R] [\\f[V]-providerarg\\f[R]\n-\\f[I]arg\\f[R]]}: Add security provider by fully qualified class name\n-with an optional configure argument.\n-.IP \\[bu] 2\n-{\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]}: Provider classpath\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.IP \\[bu] 2\n-{\\f[V]-protected\\f[R]}: Password provided through a protected mechanism\n-.PP\n-Use the \\f[V]-changealias\\f[R] command to move an existing keystore\n-entry from \\f[V]-alias\\f[R] \\f[I]alias\\f[R] to a new\n-\\f[V]-destalias\\f[R] \\f[I]alias\\f[R].\n-If a destination alias is not provided, then the command prompts you for\n-one.\n-If the original entry is protected with an entry password, then the\n-password can be supplied with the \\f[V]-keypass\\f[R] option.\n-If a key password is not provided, then the \\f[V]-storepass\\f[R] (if\n-provided) is attempted first.\n-If the attempt fails, then the user is prompted for a password.\n-.RE\n-.SH COMMANDS FOR DISPLAYING SECURITY-RELATED INFORMATION\n-.TP\n-\\f[V]-showinfo\\f[R]\n-The following are the available options for the \\f[V]-showinfo\\f[R]\n-command:\n-.RS\n-.IP \\[bu] 2\n-{\\f[V]-tls\\f[R]}: Displays TLS configuration information\n-.IP \\[bu] 2\n-{\\f[V]-v\\f[R]}: Verbose output\n-.PP\n-Use the \\f[V]-showinfo\\f[R] command to display various security-related\n-information.\n-The \\f[V]-tls\\f[R] option displays TLS configurations, such as the list\n-of enabled protocols and cipher suites.\n-.RE\n-.SH COMMANDS FOR DISPLAYING PROGRAM VERSION\n-.PP\n-You can use \\f[V]-version\\f[R] to print the program version of\n-\\f[V]keytool\\f[R].\n-.SH COMMANDS FOR DISPLAYING HELP INFORMATION\n-.PP\n-You can use \\f[V]--help\\f[R] to display a list of \\f[V]keytool\\f[R]\n-commands or to display help information about a specific\n-\\f[V]keytool\\f[R] command.\n-.IP \\[bu] 2\n-To display a list of \\f[V]keytool\\f[R] commands, enter:\n-.RS 2\n-.RS\n-.PP\n-\\f[V]keytool --help\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-To display help information about a specific \\f[V]keytool\\f[R] command,\n-enter:\n-.RS 2\n-.RS\n-.PP\n-\\f[V]keytool -<command> --help\\f[R]\n-.RE\n-.RE\n-.SH COMMON COMMAND OPTIONS\n-.PP\n-The \\f[V]-v\\f[R] option can appear for all commands except\n-\\f[V]--help\\f[R].\n-When the \\f[V]-v\\f[R] option appears, it signifies verbose mode, which\n-means that more information is provided in the output.\n-.PP\n-The \\f[V]-J\\f[R]\\f[I]option\\f[R] argument can appear for any command.\n-When the \\f[V]-J\\f[R]\\f[I]option\\f[R] is used, the specified\n-\\f[I]option\\f[R] string is passed directly to the Java interpreter.\n-This option doesn\\[aq]t contain any spaces.\n-It\\[aq]s useful for adjusting the execution environment or memory usage.\n-For a list of possible interpreter options, enter \\f[V]java -h\\f[R] or\n-\\f[V]java -X\\f[R] at the command line.\n-.PP\n-These options can appear for all commands operating on a keystore:\n-.TP\n-\\f[V]-storetype\\f[R] \\f[I]storetype\\f[R]\n-This qualifier specifies the type of keystore to be instantiated.\n-.TP\n-\\f[V]-keystore\\f[R] \\f[I]keystore\\f[R]\n-The keystore location.\n-.RS\n-.PP\n-If the JKS \\f[V]storetype\\f[R] is used and a keystore file doesn\\[aq]t\n-yet exist, then certain \\f[V]keytool\\f[R] commands can result in a new\n-keystore file being created.\n-For example, if \\f[V]keytool -genkeypair\\f[R] is called and the\n-\\f[V]-keystore\\f[R] option isn\\[aq]t specified, the default keystore\n-file named \\f[V].keystore\\f[R] is created in the user\\[aq]s home\n-directory if it doesn\\[aq]t already exist.\n-Similarly, if the \\f[V]-keystore ks_file\\f[R] option is specified but\n-\\f[V]ks_file\\f[R] doesn\\[aq]t exist, then it is created.\n-For more information on the JKS \\f[V]storetype\\f[R], see the\n-\\f[B]KeyStore Implementation\\f[R] section in \\f[B]KeyStore aliases\\f[R].\n-.PP\n-Note that the input stream from the \\f[V]-keystore\\f[R] option is passed\n-to the \\f[V]KeyStore.load\\f[R] method.\n-If \\f[V]NONE\\f[R] is specified as the URL, then a null stream is passed\n-to the \\f[V]KeyStore.load\\f[R] method.\n-\\f[V]NONE\\f[R] should be specified if the keystore isn\\[aq]t file-based.\n-For example, when the keystore resides on a hardware token device.\n-.RE\n-.TP\n-\\f[V]-cacerts\\f[R] \\f[I]cacerts\\f[R]\n-Operates on the \\f[I]cacerts\\f[R] keystore .\n-This option is equivalent to \\f[V]-keystore\\f[R]\n-\\f[I]path_to_cacerts\\f[R] \\f[V]-storetype\\f[R]\n-\\f[I]type_of_cacerts\\f[R].\n-An error is reported if the \\f[V]-keystore\\f[R] or \\f[V]-storetype\\f[R]\n-option is used with the \\f[V]-cacerts\\f[R] option.\n-.TP\n-\\f[V]-storepass\\f[R] [\\f[V]:env\\f[R] | \\f[V]:file\\f[R] ] \\f[I]argument\\f[R]\n-The password that is used to protect the integrity of the keystore.\n-.RS\n-.PP\n-If the modifier \\f[V]env\\f[R] or \\f[V]file\\f[R] isn\\[aq]t specified,\n-then the password has the value \\f[I]argument\\f[R], which must contain\n-at least six characters.\n-Otherwise, the password is retrieved as follows:\n-.IP \\[bu] 2\n-\\f[V]env\\f[R]: Retrieve the password from the environment variable named\n-\\f[I]argument\\f[R].\n-.IP \\[bu] 2\n-\\f[V]file\\f[R]: Retrieve the password from the file named\n-\\f[I]argument\\f[R].\n-.PP\n-\\f[B]Note:\\f[R] All other options that require passwords, such as\n-\\f[V]-keypass\\f[R], \\f[V]-srckeypass\\f[R], \\f[V]-destkeypass\\f[R],\n-\\f[V]-srcstorepass\\f[R], and \\f[V]-deststorepass\\f[R], accept the\n-\\f[V]env\\f[R] and \\f[V]file\\f[R] modifiers.\n-Remember to separate the password option and the modifier with a colon\n-(:).\n-.PP\n-The password must be provided to all commands that access the keystore\n-contents.\n-For such commands, when the \\f[V]-storepass\\f[R] option isn\\[aq]t\n-provided at the command line, the user is prompted for it.\n-.PP\n-When retrieving information from the keystore, the password is optional.\n-If a password is not specified, then the integrity of the retrieved\n-information can\\[aq]t be verified and a warning is displayed.\n-.RE\n-.TP\n-\\f[V]-providername\\f[R] \\f[I]name\\f[R]\n-Used to identify a cryptographic service provider\\[aq]s name when listed\n-in the security properties file.\n-.TP\n-\\f[V]-addprovider\\f[R] \\f[I]name\\f[R]\n-Used to add a security provider by name (such as SunPKCS11) .\n-.TP\n-\\f[V]-providerclass\\f[R] \\f[I]class\\f[R]\n-Used to specify the name of a cryptographic service provider\\[aq]s\n-master class file when the service provider isn\\[aq]t listed in the\n-security properties file.\n-.TP\n-\\f[V]-providerpath\\f[R] \\f[I]list\\f[R]\n-Used to specify the provider classpath.\n-.TP\n-\\f[V]-providerarg\\f[R] \\f[I]arg\\f[R]\n-Used with the \\f[V]-addprovider\\f[R] or \\f[V]-providerclass\\f[R] option\n-to represent an optional string input argument for the constructor of\n-\\f[I]class\\f[R] name.\n-.TP\n-\\f[V]-protected=true\\f[R]|\\f[V]false\\f[R]\n-Specify this value as \\f[V]true\\f[R] when a password must be specified\n-by way of a protected authentication path, such as a dedicated PIN\n-reader.\n-Because there are two keystores involved in the\n-\\f[V]-importkeystore\\f[R] command, the following two options,\n-\\f[V]-srcprotected\\f[R] and \\f[V]-destprotected\\f[R], are provided for\n-the source keystore and the destination keystore respectively.\n-.TP\n-\\f[V]-ext\\f[R] {\\f[I]name\\f[R]{\\f[V]:critical\\f[R]} {\\f[V]=\\f[R]\\f[I]value\\f[R]}}\n-Denotes an X.509 certificate extension.\n-The option can be used in \\f[V]-genkeypair\\f[R] and \\f[V]-gencert\\f[R]\n-to embed extensions into the generated certificate, or in\n-\\f[V]-certreq\\f[R] to show what extensions are requested in the\n-certificate request.\n-The option can appear multiple times.\n-The \\f[I]name\\f[R] argument can be a supported extension name (see\n-\\f[B]Supported Named Extensions\\f[R]) or an arbitrary OID number.\n-The \\f[I]value\\f[R] argument, when provided, denotes the argument for\n-the extension.\n-When \\f[I]value\\f[R] is omitted, the default value of the extension or\n-the extension itself requires no argument.\n-The \\f[V]:critical\\f[R] modifier, when provided, means the\n-extension\\[aq]s \\f[V]isCritical\\f[R] attribute is \\f[V]true\\f[R];\n-otherwise, it is \\f[V]false\\f[R].\n-You can use \\f[V]:c\\f[R] in place of \\f[V]:critical\\f[R].\n-.TP\n-\\f[V]-conf\\f[R] \\f[I]file\\f[R]\n-Specifies a pre-configured options file.\n-.SH PRE-CONFIGURED OPTIONS FILE\n-.PP\n-A pre-configured options file is a Java properties file that can be\n-specified with the \\f[V]-conf\\f[R] option.\n-Each property represents the default option(s) for a keytool command\n-using \\[dq]keytool.\\f[I]command_name\\f[R]\\[dq] as the property name.\n-A special property named \\[dq]keytool.all\\[dq] represents the default\n-option(s) applied to all commands.\n-A property value can include \\f[V]${prop}\\f[R] which will be expanded to\n-the system property associated with it.\n-If an option value includes white spaces inside, it should be surrounded\n-by quotation marks (\\[dq] or \\[aq]).\n-All property names must be in lower case.\n-.PP\n-When \\f[V]keytool\\f[R] is launched with a pre-configured options file,\n-the value for \\[dq]keytool.all\\[dq] (if it exists) is prepended to the\n-\\f[V]keytool\\f[R] command line first, with the value for the command\n-name (if it exists) comes next, and the existing options on the command\n-line at last.\n-For a single-valued option, this allows the property for a specific\n-command to override the \\[dq]keytool.all\\[dq] value, and the value\n-specified on the command line to override both.\n-For multiple-valued options, all of them will be used by\n-\\f[V]keytool\\f[R].\n-.PP\n-For example, given the following file named \\f[V]preconfig\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-    # A tiny pre-configured options file\n-    keytool.all = -keystore ${user.home}\/ks\n-    keytool.list = -v\n-    keytool.genkeypair = -keyalg rsa\n-\\f[R]\n-.fi\n-.PP\n-\\f[V]keytool -conf preconfig -list\\f[R] is identical to\n-.RS\n-.PP\n-\\f[V]keytool -keystore \\[ti]\/ks -v -list\\f[R]\n-.RE\n-.PP\n-\\f[V]keytool -conf preconfig -genkeypair -alias me\\f[R] is identical to\n-.RS\n-.PP\n-\\f[V]keytool -keystore \\[ti]\/ks -keyalg rsa -genkeypair -alias me\\f[R]\n-.RE\n-.PP\n-\\f[V]keytool -conf preconfig -genkeypair -alias you -keyalg ec\\f[R] is\n-identical to\n-.RS\n-.PP\n-\\f[V]keytool -keystore \\[ti]\/ks -keyalg rsa -genkeypair -alias you -keyalg ec\\f[R]\n-.RE\n-.PP\n-which is equivalent to\n-.RS\n-.PP\n-\\f[V]keytool -keystore \\[ti]\/ks -genkeypair -alias you -keyalg ec\\f[R]\n-.RE\n-.PP\n-because \\f[V]-keyalg\\f[R] is a single-valued option and the \\f[V]ec\\f[R]\n-value specified on the command line overrides the preconfigured options\n-file.\n-.SH EXAMPLES OF OPTION VALUES\n-.PP\n-The following examples show the defaults for various option values:\n-.IP\n-.nf\n-\\f[CB]\n--alias \\[dq]mykey\\[dq]\n-\n--keysize\n-    2048 (when using -genkeypair and -keyalg is \\[dq]DSA\\[dq])\n-    3072 (when using -genkeypair and -keyalg is \\[dq]RSA\\[dq], \\[dq]RSASSA-PSS\\[dq], or \\[dq]DH\\[dq])\n-    384 (when using -genkeypair and -keyalg is \\[dq]EC\\[dq])\n-    56 (when using -genseckey and -keyalg is \\[dq]DES\\[dq])\n-    168 (when using -genseckey and -keyalg is \\[dq]DESede\\[dq])\n-\n--groupname\n-    ed25519 (when using -genkeypair and -keyalg is \\[dq]EdDSA\\[dq], key size is 255)\n-    x25519 (when using -genkeypair and -keyalg is \\[dq]XDH\\[dq], key size is 255)\n-\n--validity 90\n-\n--keystore <the file named .keystore in the user\\[aq]s home directory>\n-\n--destkeystore <the file named .keystore in the user\\[aq]s home directory>\n-\n--storetype <the value of the \\[dq]keystore.type\\[dq] property in the\n-    security properties file, which is returned by the static\n-    getDefaultType method in java.security.KeyStore>\n-\n--file\n-    stdin (if reading)\n-    stdout (if writing)\n-\n--protected false\n-\\f[R]\n-.fi\n-.PP\n-When generating a certificate or a certificate request, the default\n-signature algorithm (\\f[V]-sigalg\\f[R] option) is derived from the\n-algorithm of the underlying private key to provide an appropriate level\n-of security strength as follows:\n-.PP\n-Default Signature Algorithms\n-.TS\n-tab(@);\n-l l l.\n-T{\n-keyalg\n-T}@T{\n-key size\n-T}@T{\n-default sigalg\n-T}\n-_\n-T{\n-DSA\n-T}@T{\n-any size\n-T}@T{\n-SHA256withDSA\n-T}\n-T{\n-RSA\n-T}@T{\n-< 624\n-T}@T{\n-SHA256withRSA (key size is too small for using SHA-384)\n-T}\n-T{\n-T}@T{\n-<= 7680\n-T}@T{\n-SHA384withRSA\n-T}\n-T{\n-T}@T{\n-> 7680\n-T}@T{\n-SHA512withRSA\n-T}\n-T{\n-EC\n-T}@T{\n-< 512\n-T}@T{\n-SHA384withECDSA\n-T}\n-T{\n-T}@T{\n->= 512\n-T}@T{\n-SHA512withECDSA\n-T}\n-T{\n-RSASSA-PSS\n-T}@T{\n-< 624\n-T}@T{\n-RSASSA-PSS (with SHA-256, key size is too small for\n-T}\n-T{\n-T}@T{\n-T}@T{\n-using SHA-384)\n-T}\n-T{\n-T}@T{\n-<= 7680\n-T}@T{\n-RSASSA-PSS (with SHA-384)\n-T}\n-T{\n-T}@T{\n-> 7680\n-T}@T{\n-RSASSA-PSS (with SHA-512)\n-T}\n-T{\n-EdDSA\n-T}@T{\n-255\n-T}@T{\n-Ed25519\n-T}\n-T{\n-T}@T{\n-448\n-T}@T{\n-Ed448\n-T}\n-T{\n-Ed25519\n-T}@T{\n-255\n-T}@T{\n-Ed25519\n-T}\n-T{\n-Ed448\n-T}@T{\n-448\n-T}@T{\n-Ed448\n-T}\n-.TE\n-.IP \\[bu] 2\n-The key size, measured in bits, corresponds to the size of the private\n-key.\n-This size is determined by the value of the \\f[V]-keysize\\f[R] or\n-\\f[V]-groupname\\f[R] options or the value derived from a default\n-setting.\n-.IP \\[bu] 2\n-An RSASSA-PSS signature algorithm uses a \\f[V]MessageDigest\\f[R]\n-algorithm as its hash and MGF1 algorithms.\n-.IP \\[bu] 2\n-If neither a default \\f[V]-keysize\\f[R] or \\f[V]-groupname\\f[R] is\n-defined for an algorithm, the security provider will choose a default\n-setting.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-To improve out of the box security, default keysize, groupname, and\n-signature algorithm names are periodically updated to stronger values\n-with each release of the JDK.\n-If interoperability with older releases of the JDK is important, make\n-sure that the defaults are supported by those releases.\n-Alternatively, you can use the \\f[V]-keysize\\f[R], \\f[V]-groupname\\f[R],\n-or \\f[V]-sigalg\\f[R] options to override the default values at your own\n-risk.\n-.SH SUPPORTED NAMED EXTENSIONS\n-.PP\n-The \\f[V]keytool\\f[R] command supports these named extensions.\n-The names aren\\[aq]t case-sensitive.\n-.TP\n-\\f[V]BC\\f[R] or \\f[V]BasicConstraints\\f[R]\n-Values:\n-.RS\n-.PP\n-The full form is\n-\\f[V]ca:\\f[R]{\\f[V]true\\f[R]|\\f[V]false\\f[R]}[\\f[V],pathlen:\\f[R]\\f[I]len\\f[R]]\n-or \\f[I]len\\f[R], which is short for\n-\\f[V]ca:true,pathlen:\\f[R]\\f[I]len\\f[R].\n-.PP\n-When \\f[I]len\\f[R] is omitted, the resulting value is \\f[V]ca:true\\f[R].\n-.RE\n-.TP\n-\\f[V]KU\\f[R] or \\f[V]KeyUsage\\f[R]\n-Values:\n-.RS\n-.PP\n-\\f[I]usage\\f[R](\\f[V],\\f[R] \\f[I]usage\\f[R])*\n-.PP\n-\\f[I]usage\\f[R] can be one of the following:\n-.IP \\[bu] 2\n-\\f[V]digitalSignature\\f[R]\n-.IP \\[bu] 2\n-\\f[V]nonRepudiation\\f[R] (\\f[V]contentCommitment\\f[R])\n-.IP \\[bu] 2\n-\\f[V]keyEncipherment\\f[R]\n-.IP \\[bu] 2\n-\\f[V]dataEncipherment\\f[R]\n-.IP \\[bu] 2\n-\\f[V]keyAgreement\\f[R]\n-.IP \\[bu] 2\n-\\f[V]keyCertSign\\f[R]\n-.IP \\[bu] 2\n-\\f[V]cRLSign\\f[R]\n-.IP \\[bu] 2\n-\\f[V]encipherOnly\\f[R]\n-.IP \\[bu] 2\n-\\f[V]decipherOnly\\f[R]\n-.PP\n-Provided there is no ambiguity, the \\f[I]usage\\f[R] argument can be\n-abbreviated with the first few letters (such as \\f[V]dig\\f[R] for\n-\\f[V]digitalSignature\\f[R]) or in camel-case style (such as \\f[V]dS\\f[R]\n-for \\f[V]digitalSignature\\f[R] or \\f[V]cRLS\\f[R] for \\f[V]cRLSign\\f[R]).\n-The \\f[I]usage\\f[R] values are case-sensitive.\n-.RE\n-.TP\n-\\f[V]EKU\\f[R] or \\f[V]ExtendedKeyUsage\\f[R]\n-Values:\n-.RS\n-.PP\n-\\f[I]usage\\f[R](\\f[V],\\f[R] \\f[I]usage\\f[R])*\n-.PP\n-\\f[I]usage\\f[R] can be one of the following:\n-.IP \\[bu] 2\n-\\f[V]anyExtendedKeyUsage\\f[R]\n-.IP \\[bu] 2\n-\\f[V]serverAuth\\f[R]\n-.IP \\[bu] 2\n-\\f[V]clientAuth\\f[R]\n-.IP \\[bu] 2\n-\\f[V]codeSigning\\f[R]\n-.IP \\[bu] 2\n-\\f[V]emailProtection\\f[R]\n-.IP \\[bu] 2\n-\\f[V]timeStamping\\f[R]\n-.IP \\[bu] 2\n-\\f[V]OCSPSigning\\f[R]\n-.IP \\[bu] 2\n-Any OID string\n-.PP\n-Provided there is no ambiguity, the \\f[I]usage\\f[R] argument can be\n-abbreviated with the first few letters or in camel-case style.\n-The \\f[I]usage\\f[R] values are case-sensitive.\n-.RE\n-.TP\n-\\f[V]SAN\\f[R] or \\f[V]SubjectAlternativeName\\f[R]\n-Values:\n-.RS\n-.PP\n-\\f[I]type\\f[R]\\f[V]:\\f[R]\\f[I]value\\f[R](\\f[V],\\f[R]\n-\\f[I]type\\f[R]\\f[V]:\\f[R]\\f[I]value\\f[R])*\n-.PP\n-\\f[I]type\\f[R] can be one of the following:\n-.IP \\[bu] 2\n-\\f[V]EMAIL\\f[R]\n-.IP \\[bu] 2\n-\\f[V]URI\\f[R]\n-.IP \\[bu] 2\n-\\f[V]DNS\\f[R]\n-.IP \\[bu] 2\n-\\f[V]IP\\f[R]\n-.IP \\[bu] 2\n-\\f[V]OID\\f[R]\n-.PP\n-The \\f[I]value\\f[R] argument is the string format value for the\n-\\f[I]type\\f[R].\n-.RE\n-.TP\n-\\f[V]IAN\\f[R] or \\f[V]IssuerAlternativeName\\f[R]\n-Values:\n-.RS\n-.PP\n-Same as \\f[V]SAN\\f[R] or \\f[V]SubjectAlternativeName\\f[R].\n-.RE\n-.TP\n-\\f[V]SIA\\f[R] or \\f[V]SubjectInfoAccess\\f[R]\n-Values:\n-.RS\n-.PP\n-\\f[I]method\\f[R]\\f[V]:\\f[R]\\f[I]location-type\\f[R]\\f[V]:\\f[R]\\f[I]location-value\\f[R](\\f[V],\\f[R]\n-\\f[I]method\\f[R]\\f[V]:\\f[R]\\f[I]location-type\\f[R]\\f[V]:\\f[R]\\f[I]location-value\\f[R])*\n-.PP\n-\\f[I]method\\f[R] can be one of the following:\n-.IP \\[bu] 2\n-\\f[V]timeStamping\\f[R]\n-.IP \\[bu] 2\n-\\f[V]caRepository\\f[R]\n-.IP \\[bu] 2\n-Any OID\n-.PP\n-The \\f[I]location-type\\f[R] and \\f[I]location-value\\f[R] arguments can\n-be any \\f[I]type\\f[R]\\f[V]:\\f[R]\\f[I]value\\f[R] supported by the\n-\\f[V]SubjectAlternativeName\\f[R] extension.\n-.RE\n-.TP\n-\\f[V]AIA\\f[R] or \\f[V]AuthorityInfoAccess\\f[R]\n-Values:\n-.RS\n-.PP\n-Same as \\f[V]SIA\\f[R] or \\f[V]SubjectInfoAccess\\f[R].\n-.PP\n-The \\f[I]method\\f[R] argument can be one of the following:\n-.IP \\[bu] 2\n-\\f[V]ocsp\\f[R]\n-.IP \\[bu] 2\n-\\f[V]caIssuers\\f[R]\n-.IP \\[bu] 2\n-Any OID\n-.RE\n-.PP\n-When \\f[I]name\\f[R] is OID, the value is the hexadecimal dumped Definite\n-Encoding Rules (DER) encoding of the \\f[V]extnValue\\f[R] for the\n-extension excluding the OCTET STRING type and length bytes.\n-Other than standard hexadecimal numbers (0-9, a-f, A-F), any extra\n-characters are ignored in the HEX string.\n-Therefore, both 01:02:03:04 and 01020304 are accepted as identical\n-values.\n-When there is no value, the extension has an empty value field.\n-.PP\n-A special name \\f[V]honored\\f[R], used only in \\f[V]-gencert\\f[R],\n-denotes how the extensions included in the certificate request should be\n-honored.\n-The value for this name is a comma-separated list of \\f[V]all\\f[R] (all\n-requested extensions are honored),\n-\\f[I]name\\f[R]{\\f[V]:\\f[R][\\f[V]critical\\f[R]|\\f[V]non-critical\\f[R]]}\n-(the named extension is honored, but it uses a different\n-\\f[V]isCritical\\f[R] attribute), and \\f[V]-name\\f[R] (used with\n-\\f[V]all\\f[R], denotes an exception).\n-Requested extensions aren\\[aq]t honored by default.\n-.PP\n-If, besides the\\f[V]-ext honored\\f[R] option, another named or OID\n-\\f[V]-ext\\f[R] option is provided, this extension is added to those\n-already honored.\n-However, if this name (or OID) also appears in the honored value, then\n-its value and criticality override that in the request.\n-If an extension of the same type is provided multiple times through\n-either a name or an OID, only the last extension is used.\n-.PP\n-The \\f[V]subjectKeyIdentifier\\f[R] extension is always created.\n-For non-self-signed certificates, the \\f[V]authorityKeyIdentifier\\f[R]\n-is created.\n-.PP\n-\\f[B]CAUTION:\\f[R]\n-.PP\n-Users should be aware that some combinations of extensions (and other\n-certificate fields) may not conform to the Internet standard.\n-See \\f[B]Certificate Conformance Warning\\f[R].\n-.SH EXAMPLES OF TASKS IN CREATING A KEYSTORE\n-.PP\n-The following examples describe the sequence actions in creating a\n-keystore for managing public\/private key pairs and certificates from\n-trusted entities.\n-.IP \\[bu] 2\n-\\f[B]Generating the Key Pair\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Requesting a Signed Certificate from a CA\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Importing a Certificate for the CA\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Importing the Certificate Reply from the CA\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Exporting a Certificate That Authenticates the Public Key\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Importing the Keystore\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Generating Certificates for an SSL Server\\f[R]\n-.SH GENERATING THE KEY PAIR\n-.PP\n-Create a keystore and then generate the key pair.\n-.PP\n-You can enter the command as a single line such as the following:\n-.RS\n-.PP\n-\\f[V]keytool -genkeypair -dname \\[dq]cn=myname, ou=mygroup, o=mycompany, c=mycountry\\[dq] -alias business -keyalg rsa -keypass\\f[R]\n-\\f[I]password\\f[R]\n-\\f[V]-keystore \/working\/mykeystore -storepass password -validity 180\\f[R]\n-.RE\n-.PP\n-The command creates the keystore named \\f[V]mykeystore\\f[R] in the\n-working directory (provided it doesn\\[aq]t already exist), and assigns\n-it the password specified by \\f[V]-keypass\\f[R].\n-It generates a public\/private key pair for the entity whose\n-distinguished name is \\f[V]myname\\f[R], \\f[V]mygroup\\f[R],\n-\\f[V]mycompany\\f[R], and a two-letter country code of\n-\\f[V]mycountry\\f[R].\n-It uses the RSA key generation algorithm to create the keys; both are\n-3072 bits.\n-.PP\n-The command uses the default SHA384withRSA signature algorithm to create\n-a self-signed certificate that includes the public key and the\n-distinguished name information.\n-The certificate is valid for 180 days, and is associated with the\n-private key in a keystore entry referred to by\n-\\f[V]-alias business\\f[R].\n-The private key is assigned the password specified by\n-\\f[V]-keypass\\f[R].\n-.PP\n-The command is significantly shorter when the option defaults are\n-accepted.\n-In this case, only \\f[V]-keyalg\\f[R] is required, and the defaults are\n-used for unspecified options that have default values.\n-You are prompted for any required values.\n-You could have the following:\n-.RS\n-.PP\n-\\f[V]keytool -genkeypair -keyalg rsa\\f[R]\n-.RE\n-.PP\n-In this case, a keystore entry with the alias \\f[V]mykey\\f[R] is\n-created, with a newly generated key pair and a certificate that is valid\n-for 90 days.\n-This entry is placed in your home directory in a keystore named\n-\\f[V].keystore\\f[R] .\n-\\f[V].keystore\\f[R] is created if it doesn\\[aq]t already exist.\n-You are prompted for the distinguished name information, the keystore\n-password, and the private key password.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The rest of the examples assume that you responded to the prompts with\n-values equal to those specified in the first \\f[V]-genkeypair\\f[R]\n-command.\n-For example, a distinguished name of\n-\\f[V]cn=\\f[R]\\f[I]myname\\f[R]\\f[V], ou=\\f[R]\\f[I]mygroup\\f[R]\\f[V], o=\\f[R]\\f[I]mycompany\\f[R]\\f[V], c=\\f[R]\\f[I]mycountry\\f[R]).\n-.SH REQUESTING A SIGNED CERTIFICATE FROM A CA\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-Generating the key pair created a self-signed certificate; however, a\n-certificate is more likely to be trusted by others when it is signed by\n-a CA.\n-.PP\n-To get a CA signature, complete the following process:\n-.IP \"1.\" 3\n-Generate a CSR:\n-.RS 4\n-.RS\n-.PP\n-\\f[V]keytool -certreq -file myname.csr\\f[R]\n-.RE\n-.PP\n-This creates a CSR for the entity identified by the default alias\n-\\f[V]mykey\\f[R] and puts the request in the file named\n-\\f[V]myname.csr\\f[R].\n-.RE\n-.IP \"2.\" 3\n-Submit \\f[V]myname.csr\\f[R] to a CA, such as DigiCert.\n-.PP\n-The CA authenticates you, the requestor (usually offline), and returns a\n-certificate, signed by them, authenticating your public key.\n-In some cases, the CA returns a chain of certificates, each one\n-authenticating the public key of the signer of the previous certificate\n-in the chain.\n-.SH IMPORTING A CERTIFICATE FOR THE CA\n-.PP\n-To import a certificate for the CA, complete the following process:\n-.IP \"1.\" 3\n-Before you import the certificate reply from a CA, you need one or more\n-trusted certificates either in your keystore or in the \\f[V]cacerts\\f[R]\n-keystore file.\n-See \\f[V]-importcert\\f[R] in \\f[B]Commands\\f[R].\n-.RS 4\n-.IP \\[bu] 2\n-If the certificate reply is a certificate chain, then you need the top\n-certificate of the chain.\n-The root CA certificate that authenticates the public key of the CA.\n-.IP \\[bu] 2\n-If the certificate reply is a single certificate, then you need a\n-certificate for the issuing CA (the one that signed it).\n-If that certificate isn\\[aq]t self-signed, then you need a certificate\n-for its signer, and so on, up to a self-signed root CA certificate.\n-.PP\n-The \\f[V]cacerts\\f[R] keystore ships with a set of root certificates\n-issued by the CAs of \\f[B]the Oracle Java Root Certificate program\\f[R]\n-[http:\/\/www.oracle.com\/technetwork\/java\/javase\/javasecarootcertsprogram-1876540.html].\n-If you request a signed certificate from a CA, and a certificate\n-authenticating that CA\\[aq]s public key hasn\\[aq]t been added to\n-\\f[V]cacerts\\f[R], then you must import a certificate from that CA as a\n-trusted certificate.\n-.PP\n-A certificate from a CA is usually self-signed or signed by another CA.\n-If it is signed by another CA, you need a certificate that authenticates\n-that CA\\[aq]s public key.\n-.PP\n-For example, you have obtained a \\f[I]X\\f[R]\\f[V].cer\\f[R] file from a\n-company that is a CA and the file is supposed to be a self-signed\n-certificate that authenticates that CA\\[aq]s public key.\n-Before you import it as a trusted certificate, you should ensure that\n-the certificate is valid by:\n-.IP \"1.\" 3\n-Viewing it with the \\f[V]keytool -printcert\\f[R] command or the\n-\\f[V]keytool -importcert\\f[R] command without using the\n-\\f[V]-noprompt\\f[R] option.\n-Make sure that the displayed certificate fingerprints match the expected\n-fingerprints.\n-.IP \"2.\" 3\n-Calling the person who sent the certificate, and comparing the\n-fingerprints that you see with the ones that they show or that a secure\n-public key repository shows.\n-.PP\n-Only when the fingerprints are equal is it assured that the certificate\n-wasn\\[aq]t replaced in transit with somebody else\\[aq]s certificate\n-(such as an attacker\\[aq]s certificate).\n-If such an attack takes place, and you didn\\[aq]t check the certificate\n-before you imported it, then you would be trusting anything that the\n-attacker signed.\n-.RE\n-.IP \"2.\" 3\n-Replace the self-signed certificate with a certificate chain, where each\n-certificate in the chain authenticates the public key of the signer of\n-the previous certificate in the chain, up to a root CA.\n-.RS 4\n-.PP\n-If you trust that the certificate is valid, then you can add it to your\n-keystore by entering the following command:\n-.RS\n-.PP\n-\\f[V]keytool -importcert -alias\\f[R] \\f[I]alias\\f[R]\n-\\f[V]-file *X*\\f[R].cer\\[ga]\n-.RE\n-.PP\n-This command creates a trusted certificate entry in the keystore from\n-the data in the CA certificate file and assigns the values of the\n-\\f[I]alias\\f[R] to the entry.\n-.RE\n-.SH IMPORTING THE CERTIFICATE REPLY FROM THE CA\n-.PP\n-After you import a certificate that authenticates the public key of the\n-CA that you submitted your certificate signing request to (or there is\n-already such a certificate in the \\f[V]cacerts\\f[R] file), you can\n-import the certificate reply and replace your self-signed certificate\n-with a certificate chain.\n-.PP\n-The certificate chain is one of the following:\n-.IP \\[bu] 2\n-Returned by the CA when the CA reply is a chain.\n-.IP \\[bu] 2\n-Constructed when the CA reply is a single certificate.\n-This certificate chain is constructed by using the certificate reply and\n-trusted certificates available either in the keystore where you import\n-the reply or in the \\f[V]cacerts\\f[R] keystore file.\n-.PP\n-For example, if you sent your certificate signing request to DigiCert,\n-then you can import their reply by entering the following command:\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-In this example, the returned certificate is named\n-\\f[V]DCmyname.cer\\f[R].\n-.RS\n-.PP\n-\\f[V]keytool -importcert -trustcacerts -file DCmyname.cer\\f[R]\n-.RE\n-.SH EXPORTING A CERTIFICATE THAT AUTHENTICATES THE PUBLIC KEY\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-If you used the \\f[V]jarsigner\\f[R] command to sign a Java Archive (JAR)\n-file, then clients that use the file will want to authenticate your\n-signature.\n-.PP\n-One way that clients can authenticate you is by importing your public\n-key certificate into their keystore as a trusted entry.\n-You can then export the certificate and supply it to your clients.\n-.PP\n-For example:\n-.IP \"1.\" 3\n-Copy your certificate to a file named \\f[V]myname.cer\\f[R] by entering\n-the following command:\n-.RS 4\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-In this example, the entry has an alias of \\f[V]mykey\\f[R].\n-.RS\n-.PP\n-\\f[V]keytool -exportcert -alias mykey -file myname.cer\\f[R]\n-.RE\n-.RE\n-.IP \"2.\" 3\n-With the certificate and the signed JAR file, a client can use the\n-\\f[V]jarsigner\\f[R] command to authenticate your signature.\n-.SH IMPORTING THE KEYSTORE\n-.PP\n-Use the \\f[V]importkeystore\\f[R] command to import an entire keystore\n-into another keystore.\n-This imports all entries from the source keystore, including keys and\n-certificates, to the destination keystore with a single command.\n-You can use this command to import entries from a different type of\n-keystore.\n-During the import, all new entries in the destination keystore will have\n-the same alias names and protection passwords (for secret keys and\n-private keys).\n-If the \\f[V]keytool\\f[R] command can\\[aq]t recover the private keys or\n-secret keys from the source keystore, then it prompts you for a\n-password.\n-If it detects alias duplication, then it asks you for a new alias, and\n-you can specify a new alias or simply allow the \\f[V]keytool\\f[R]\n-command to overwrite the existing one.\n-.PP\n-For example, import entries from a typical JKS type keystore\n-\\f[V]key.jks\\f[R] into a PKCS #11 type hardware-based keystore, by\n-entering the following command:\n-.RS\n-.PP\n-\\f[V]keytool -importkeystore -srckeystore key.jks -destkeystore NONE -srcstoretype JKS -deststoretype PKCS11 -srcstorepass\\f[R]\n-\\f[I]password\\f[R] \\f[V]-deststorepass\\f[R] \\f[I]password\\f[R]\n-.RE\n-.PP\n-The \\f[V]importkeystore\\f[R] command can also be used to import a single\n-entry from a source keystore to a destination keystore.\n-In this case, besides the options you used in the previous example, you\n-need to specify the alias you want to import.\n-With the \\f[V]-srcalias\\f[R] option specified, you can also specify the\n-destination alias name, protection password for a secret or private key,\n-and the destination protection password you want as follows:\n-.RS\n-.PP\n-\\f[V]keytool -importkeystore -srckeystore key.jks -destkeystore NONE -srcstoretype JKS -deststoretype PKCS11 -srcstorepass\\f[R]\n-\\f[I]password\\f[R] \\f[V]-deststorepass\\f[R] \\f[I]password\\f[R]\n-\\f[V]-srcalias myprivatekey -destalias myoldprivatekey -srckeypass\\f[R]\n-\\f[I]password\\f[R] \\f[V]-destkeypass\\f[R] \\f[I]password\\f[R]\n-\\f[V]-noprompt\\f[R]\n-.RE\n-.SH GENERATING CERTIFICATES FOR AN SSL SERVER\n-.PP\n-The following are \\f[V]keytool\\f[R] commands used to generate key pairs\n-and certificates for three entities:\n-.IP \\[bu] 2\n-Root CA (\\f[V]root\\f[R])\n-.IP \\[bu] 2\n-Intermediate CA (\\f[V]ca\\f[R])\n-.IP \\[bu] 2\n-SSL server (\\f[V]server\\f[R])\n-.PP\n-Ensure that you store all the certificates in the same keystore.\n-.IP\n-.nf\n-\\f[CB]\n-keytool -genkeypair -keystore root.jks -alias root -ext bc:c -keyalg rsa\n-keytool -genkeypair -keystore ca.jks -alias ca -ext bc:c -keyalg rsa\n-keytool -genkeypair -keystore server.jks -alias server -keyalg rsa\n-\n-keytool -keystore root.jks -alias root -exportcert -rfc > root.pem\n-\n-keytool -storepass password -keystore ca.jks -certreq -alias ca |\n-    keytool -storepass password -keystore root.jks\n-    -gencert -alias root -ext BC=0 -rfc > ca.pem\n-keytool -keystore ca.jks -importcert -alias ca -file ca.pem\n-\n-keytool -storepass password -keystore server.jks -certreq -alias server |\n-    keytool -storepass password -keystore ca.jks -gencert -alias ca\n-    -ext ku:c=dig,kE -rfc > server.pem\n-cat root.pem ca.pem server.pem |\n-    keytool -keystore server.jks -importcert -alias server\n-\\f[R]\n-.fi\n-.SH TERMS\n-.TP\n-Keystore\n-A keystore is a storage facility for cryptographic keys and\n-certificates.\n-.TP\n-Keystore entries\n-Keystores can have different types of entries.\n-The two most applicable entry types for the \\f[V]keytool\\f[R] command\n-include the following:\n-.RS\n-.PP\n-Key entries: Each entry holds very sensitive cryptographic key\n-information, which is stored in a protected format to prevent\n-unauthorized access.\n-Typically, a key stored in this type of entry is a secret key, or a\n-private key accompanied by the certificate chain for the corresponding\n-public key.\n-See \\f[B]Certificate Chains\\f[R].\n-The \\f[V]keytool\\f[R] command can handle both types of entries, while\n-the \\f[V]jarsigner\\f[R] tool only handles the latter type of entry, that\n-is private keys and their associated certificate chains.\n-.PP\n-Trusted certificate entries: Each entry contains a single public key\n-certificate that belongs to another party.\n-The entry is called a trusted certificate because the keystore owner\n-trusts that the public key in the certificate belongs to the identity\n-identified by the subject (owner) of the certificate.\n-The issuer of the certificate vouches for this, by signing the\n-certificate.\n-.RE\n-.TP\n-Keystore aliases\n-All keystore entries (key and trusted certificate entries) are accessed\n-by way of unique aliases.\n-.RS\n-.PP\n-An alias is specified when you add an entity to the keystore with the\n-\\f[V]-genseckey\\f[R] command to generate a secret key, the\n-\\f[V]-genkeypair\\f[R] command to generate a key pair (public and private\n-key), or the \\f[V]-importcert\\f[R] command to add a certificate or\n-certificate chain to the list of trusted certificates.\n-Subsequent \\f[V]keytool\\f[R] commands must use this same alias to refer\n-to the entity.\n-.PP\n-For example, you can use the alias \\f[V]duke\\f[R] to generate a new\n-public\/private key pair and wrap the public key into a self-signed\n-certificate with the following command.\n-See \\f[B]Certificate Chains\\f[R].\n-.RS\n-.PP\n-\\f[V]keytool -genkeypair -alias duke -keyalg rsa -keypass\\f[R]\n-\\f[I]passwd\\f[R]\n-.RE\n-.PP\n-This example specifies an initial \\f[I]passwd\\f[R] required by\n-subsequent commands to access the private key associated with the alias\n-\\f[V]duke\\f[R].\n-If you later want to change Duke\\[aq]s private key password, use a\n-command such as the following:\n-.RS\n-.PP\n-\\f[V]keytool -keypasswd -alias duke -keypass\\f[R] \\f[I]passwd\\f[R]\n-\\f[V]-new\\f[R] \\f[I]newpasswd\\f[R]\n-.RE\n-.PP\n-This changes the initial \\f[I]passwd\\f[R] to \\f[I]newpasswd\\f[R].\n-A password shouldn\\[aq]t be specified on a command line or in a script\n-unless it is for testing purposes, or you are on a secure system.\n-If you don\\[aq]t specify a required password option on a command line,\n-then you are prompted for it.\n-.RE\n-.TP\n-Keystore implementation\n-The \\f[V]KeyStore\\f[R] class provided in the \\f[V]java.security\\f[R]\n-package supplies well-defined interfaces to access and modify the\n-information in a keystore.\n-It is possible for there to be multiple different concrete\n-implementations, where each implementation is that for a particular type\n-of keystore.\n-.RS\n-.PP\n-Currently, two command-line tools (\\f[V]keytool\\f[R] and\n-\\f[V]jarsigner\\f[R]) make use of keystore implementations.\n-Because the \\f[V]KeyStore\\f[R] class is \\f[V]public\\f[R], users can\n-write additional security applications that use it.\n-.PP\n-In JDK 9 and later, the default keystore implementation is\n-\\f[V]PKCS12\\f[R].\n-This is a cross platform keystore based on the RSA PKCS12 Personal\n-Information Exchange Syntax Standard.\n-This standard is primarily meant for storing or transporting a\n-user\\[aq]s private keys, certificates, and miscellaneous secrets.\n-There is another built-in implementation, provided by Oracle.\n-It implements the keystore as a file with a proprietary keystore type\n-(format) named \\f[V]JKS\\f[R].\n-It protects each private key with its individual password, and also\n-protects the integrity of the entire keystore with a (possibly\n-different) password.\n-.PP\n-Keystore implementations are provider-based.\n-More specifically, the application interfaces supplied by\n-\\f[V]KeyStore\\f[R] are implemented in terms of a Service Provider\n-Interface (SPI).\n-That is, there is a corresponding abstract \\f[V]KeystoreSpi\\f[R] class,\n-also in the \\f[V]java.security package\\f[R], which defines the Service\n-Provider Interface methods that providers must implement.\n-The term \\f[I]provider\\f[R] refers to a package or a set of packages\n-that supply a concrete implementation of a subset of services that can\n-be accessed by the Java Security API.\n-To provide a keystore implementation, clients must implement a provider\n-and supply a \\f[V]KeystoreSpi\\f[R] subclass implementation, as described\n-in Steps to Implement and Integrate a Provider.\n-.PP\n-Applications can choose different types of keystore implementations from\n-different providers, using the \\f[V]getInstance\\f[R] factory method\n-supplied in the \\f[V]KeyStore\\f[R] class.\n-A keystore type defines the storage and data format of the keystore\n-information, and the algorithms used to protect private\/secret keys in\n-the keystore and the integrity of the keystore.\n-Keystore implementations of different types aren\\[aq]t compatible.\n-.PP\n-The \\f[V]keytool\\f[R] command works on any file-based keystore\n-implementation.\n-It treats the keystore location that is passed to it at the command line\n-as a file name and converts it to a \\f[V]FileInputStream\\f[R], from\n-which it loads the keystore information.)The \\f[V]jarsigner\\f[R]\n-commands can read a keystore from any location that can be specified\n-with a URL.\n-.PP\n-For \\f[V]keytool\\f[R] and \\f[V]jarsigner\\f[R], you can specify a\n-keystore type at the command line, with the \\f[V]-storetype\\f[R] option.\n-.PP\n-If you don\\[aq]t explicitly specify a keystore type, then the tools\n-choose a keystore implementation based on the value of the\n-\\f[V]keystore.type\\f[R] property specified in the security properties\n-file.\n-The security properties file is called \\f[V]java.security\\f[R], and\n-resides in the security properties directory:\n-.IP \\[bu] 2\n-\\f[B]Linux and macOS:\\f[R] \\f[V]java.home\/lib\/security\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] \\f[V]java.home\\[rs]lib\\[rs]security\\f[R]\n-.PP\n-Each tool gets the \\f[V]keystore.type\\f[R] value and then examines all\n-the currently installed providers until it finds one that implements a\n-keystores of that type.\n-It then uses the keystore implementation from that provider.The\n-\\f[V]KeyStore\\f[R] class defines a static method named\n-\\f[V]getDefaultType\\f[R] that lets applications retrieve the value of\n-the \\f[V]keystore.type\\f[R] property.\n-The following line of code creates an instance of the default keystore\n-type as specified in the \\f[V]keystore.type\\f[R] property:\n-.RS\n-.PP\n-\\f[V]KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\\f[R]\n-.RE\n-.PP\n-The default keystore type is \\f[V]pkcs12\\f[R], which is a cross-platform\n-keystore based on the RSA PKCS12 Personal Information Exchange Syntax\n-Standard.\n-This is specified by the following line in the security properties file:\n-.RS\n-.PP\n-\\f[V]keystore.type=pkcs12\\f[R]\n-.RE\n-.PP\n-To have the tools utilize a keystore implementation other than the\n-default, you can change that line to specify a different keystore type.\n-For example, if you want to use the Oracle\\[aq]s \\f[V]jks\\f[R] keystore\n-implementation, then change the line to the following:\n-.RS\n-.PP\n-\\f[V]keystore.type=jks\\f[R]\n-.RE\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-Case doesn\\[aq]t matter in keystore type designations.\n-For example, \\f[V]JKS\\f[R] would be considered the same as\n-\\f[V]jks\\f[R].\n-.RE\n-.TP\n-Certificate\n-A certificate (or public-key certificate) is a digitally signed\n-statement from one entity (the issuer), saying that the public key and\n-some other information of another entity (the subject) has some specific\n-value.\n-The following terms are related to certificates:\n-.RS\n-.IP \\[bu] 2\n-Public Keys: These are numbers associated with a particular entity, and\n-are intended to be known to everyone who needs to have trusted\n-interactions with that entity.\n-Public keys are used to verify signatures.\n-.IP \\[bu] 2\n-Digitally Signed: If some data is digitally signed, then it is stored\n-with the identity of an entity and a signature that proves that entity\n-knows about the data.\n-The data is rendered unforgeable by signing with the entity\\[aq]s\n-private key.\n-.IP \\[bu] 2\n-Identity: A known way of addressing an entity.\n-In some systems, the identity is the public key, and in others it can be\n-anything from an Oracle Solaris UID to an email address to an X.509\n-distinguished name.\n-.IP \\[bu] 2\n-Signature: A signature is computed over some data using the private key\n-of an entity.\n-The signer, which in the case of a certificate is also known as the\n-issuer.\n-.IP \\[bu] 2\n-Private Keys: These are numbers, each of which is supposed to be known\n-only to the particular entity whose private key it is (that is, it is\n-supposed to be kept secret).\n-Private and public keys exist in pairs in all public key cryptography\n-systems (also referred to as public key crypto systems).\n-In a typical public key crypto system, such as DSA, a private key\n-corresponds to exactly one public key.\n-Private keys are used to compute signatures.\n-.IP \\[bu] 2\n-Entity: An entity is a person, organization, program, computer,\n-business, bank, or something else you are trusting to some degree.\n-.PP\n-Public key cryptography requires access to users\\[aq] public keys.\n-In a large-scale networked environment, it is impossible to guarantee\n-that prior relationships between communicating entities were established\n-or that a trusted repository exists with all used public keys.\n-Certificates were invented as a solution to this public key distribution\n-problem.\n-Now a Certification Authority (CA) can act as a trusted third party.\n-CAs are entities such as businesses that are trusted to sign (issue)\n-certificates for other entities.\n-It is assumed that CAs only create valid and reliable certificates\n-because they are bound by legal agreements.\n-There are many public Certification Authorities, such as DigiCert,\n-Comodo, Entrust, and so on.\n-.PP\n-You can also run your own Certification Authority using products such as\n-Microsoft Certificate Server or the Entrust CA product for your\n-organization.\n-With the \\f[V]keytool\\f[R] command, it is possible to display, import,\n-and export certificates.\n-It is also possible to generate self-signed certificates.\n-.PP\n-The \\f[V]keytool\\f[R] command currently handles X.509 certificates.\n-.RE\n-.TP\n-X.509 Certificates\n-The X.509 standard defines what information can go into a certificate\n-and describes how to write it down (the data format).\n-All the data in a certificate is encoded with two related standards\n-called ASN.1\/DER.\n-Abstract Syntax Notation 1 describes data.\n-The Definite Encoding Rules describe a single way to store and transfer\n-that data.\n-.RS\n-.PP\n-All X.509 certificates have the following data, in addition to the\n-signature:\n-.IP \\[bu] 2\n-Version: This identifies which version of the X.509 standard applies to\n-this certificate, which affects what information can be specified in it.\n-Thus far, three versions are defined.\n-The \\f[V]keytool\\f[R] command can import and export v1, v2, and v3\n-certificates.\n-It generates v3 certificates.\n-.RS 2\n-.IP \\[bu] 2\n-X.509 Version 1 has been available since 1988, is widely deployed, and\n-is the most generic.\n-.IP \\[bu] 2\n-X.509 Version 2 introduced the concept of subject and issuer unique\n-identifiers to handle the possibility of reuse of subject or issuer\n-names over time.\n-Most certificate profile documents strongly recommend that names not be\n-reused and that certificates shouldn\\[aq]t make use of unique\n-identifiers.\n-Version 2 certificates aren\\[aq]t widely used.\n-.IP \\[bu] 2\n-X.509 Version 3 is the most recent (1996) and supports the notion of\n-extensions where anyone can define an extension and include it in the\n-certificate.\n-Some common extensions are: KeyUsage (limits the use of the keys to\n-particular purposes such as \\f[V]signing-only\\f[R]) and AlternativeNames\n-(allows other identities to also be associated with this public key, for\n-example.\n-DNS names, email addresses, IP addresses).\n-Extensions can be marked critical to indicate that the extension should\n-be checked and enforced or used.\n-For example, if a certificate has the KeyUsage extension marked critical\n-and set to \\f[V]keyCertSign\\f[R], then when this certificate is\n-presented during SSL communication, it should be rejected because the\n-certificate extension indicates that the associated private key should\n-only be used for signing certificates and not for SSL use.\n-.RE\n-.IP \\[bu] 2\n-Serial number: The entity that created the certificate is responsible\n-for assigning it a serial number to distinguish it from other\n-certificates it issues.\n-This information is used in numerous ways.\n-For example, when a certificate is revoked its serial number is placed\n-in a Certificate Revocation List (CRL).\n-.IP \\[bu] 2\n-Signature algorithm identifier: This identifies the algorithm used by\n-the CA to sign the certificate.\n-.IP \\[bu] 2\n-Issuer name: The X.500 Distinguished Name of the entity that signed the\n-certificate.\n-This is typically a CA.\n-Using this certificate implies trusting the entity that signed this\n-certificate.\n-In some cases, such as root or top-level CA certificates, the issuer\n-signs its own certificate.\n-.IP \\[bu] 2\n-Validity period: Each certificate is valid only for a limited amount of\n-time.\n-This period is described by a start date and time and an end date and\n-time, and can be as short as a few seconds or almost as long as a\n-century.\n-The validity period chosen depends on a number of factors, such as the\n-strength of the private key used to sign the certificate, or the amount\n-one is willing to pay for a certificate.\n-This is the expected period that entities can rely on the public value,\n-when the associated private key has not been compromised.\n-.IP \\[bu] 2\n-Subject name: The name of the entity whose public key the certificate\n-identifies.\n-This name uses the X.500 standard, so it is intended to be unique across\n-the Internet.\n-This is the X.500 Distinguished Name (DN) of the entity.\n-For example,\n-.RS 2\n-.RS\n-.PP\n-\\f[V]CN=Java Duke, OU=Java Software Division, O=Oracle Corporation, C=US\\f[R]\n-.RE\n-.PP\n-These refer to the subject\\[aq]s common name (CN), organizational unit\n-(OU), organization (O), and country (C).\n-.RE\n-.IP \\[bu] 2\n-Subject public key information: This is the public key of the entity\n-being named with an algorithm identifier that specifies which public key\n-crypto system this key belongs to and any associated key parameters.\n-.RE\n-.TP\n-Certificate Chains\n-The \\f[V]keytool\\f[R] command can create and manage keystore key entries\n-that each contain a private key and an associated certificate chain.\n-The first certificate in the chain contains the public key that\n-corresponds to the private key.\n-.RS\n-.PP\n-When keys are first generated, the chain usually starts off containing a\n-single element, a self-signed certificate.\n-See -genkeypair in \\f[B]Commands\\f[R].\n-A self-signed certificate is one for which the issuer (signer) is the\n-same as the subject.\n-The subject is the entity whose public key is being authenticated by the\n-certificate.\n-When the \\f[V]-genkeypair\\f[R] command is called to generate a new\n-public\/private key pair, it also wraps the public key into a self-signed\n-certificate (unless the \\f[V]-signer\\f[R] option is specified).\n-.PP\n-Later, after a Certificate Signing Request (CSR) was generated with the\n-\\f[V]-certreq\\f[R] command and sent to a Certification Authority (CA),\n-the response from the CA is imported with \\f[V]-importcert\\f[R], and the\n-self-signed certificate is replaced by a chain of certificates.\n-At the bottom of the chain is the certificate (reply) issued by the CA\n-authenticating the subject\\[aq]s public key.\n-The next certificate in the chain is one that authenticates the CA\\[aq]s\n-public key.\n-.PP\n-In many cases, this is a self-signed certificate, which is a certificate\n-from the CA authenticating its own public key, and the last certificate\n-in the chain.\n-In other cases, the CA might return a chain of certificates.\n-In this case, the bottom certificate in the chain is the same (a\n-certificate signed by the CA, authenticating the public key of the key\n-entry), but the second certificate in the chain is a certificate signed\n-by a different CA that authenticates the public key of the CA you sent\n-the CSR to.\n-The next certificate in the chain is a certificate that authenticates\n-the second CA\\[aq]s key, and so on, until a self-signed root certificate\n-is reached.\n-Each certificate in the chain (after the first) authenticates the public\n-key of the signer of the previous certificate in the chain.\n-.PP\n-Many CAs only return the issued certificate, with no supporting chain,\n-especially when there is a flat hierarchy (no intermediates CAs).\n-In this case, the certificate chain must be established from trusted\n-certificate information already stored in the keystore.\n-.PP\n-A different reply format (defined by the PKCS #7 standard) includes the\n-supporting certificate chain in addition to the issued certificate.\n-Both reply formats can be handled by the \\f[V]keytool\\f[R] command.\n-.PP\n-The top-level (root) CA certificate is self-signed.\n-However, the trust into the root\\[aq]s public key doesn\\[aq]t come from\n-the root certificate itself, but from other sources such as a newspaper.\n-This is because anybody could generate a self-signed certificate with\n-the distinguished name of, for example, the DigiCert root CA.\n-The root CA public key is widely known.\n-The only reason it is stored in a certificate is because this is the\n-format understood by most tools, so the certificate in this case is only\n-used as a vehicle to transport the root CA\\[aq]s public key.\n-Before you add the root CA certificate to your keystore, you should view\n-it with the \\f[V]-printcert\\f[R] option and compare the displayed\n-fingerprint with the well-known fingerprint obtained from a newspaper,\n-the root CA\\[aq]s Web page, and so on.\n-.RE\n-.TP\n-cacerts Certificates File\n-A certificates file named \\f[V]cacerts\\f[R] resides in the security\n-properties directory:\n-.RS\n-.IP \\[bu] 2\n-\\f[B]Linux and macOS:\\f[R] \\f[I]JAVA_HOME\\f[R]\\f[V]\/lib\/security\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] \\f[I]JAVA_HOME\\f[R]\\f[V]\\[rs]lib\\[rs]security\\f[R]\n-.PP\n-The \\f[V]cacerts\\f[R] file represents a system-wide keystore with CA\n-certificates.\n-System administrators can configure and manage that file with the\n-\\f[V]keytool\\f[R] command by specifying \\f[V]jks\\f[R] as the keystore\n-type.\n-The \\f[V]cacerts\\f[R] keystore file ships with a default set of root CA\n-certificates.\n-For Linux, macOS, and Windows, you can list the default certificates\n-with the following command:\n-.RS\n-.PP\n-\\f[V]keytool -list -cacerts\\f[R]\n-.RE\n-.PP\n-The initial password of the \\f[V]cacerts\\f[R] keystore file is\n-\\f[V]changeit\\f[R].\n-System administrators should change that password and the default access\n-permission of that file upon installing the SDK.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-It is important to verify your \\f[V]cacerts\\f[R] file.\n-Because you trust the CAs in the \\f[V]cacerts\\f[R] file as entities for\n-signing and issuing certificates to other entities, you must manage the\n-\\f[V]cacerts\\f[R] file carefully.\n-The \\f[V]cacerts\\f[R] file should contain only certificates of the CAs\n-you trust.\n-It is your responsibility to verify the trusted root CA certificates\n-bundled in the \\f[V]cacerts\\f[R] file and make your own trust decisions.\n-.PP\n-To remove an untrusted CA certificate from the \\f[V]cacerts\\f[R] file,\n-use the \\f[V]-delete\\f[R] option of the \\f[V]keytool\\f[R] command.\n-You can find the \\f[V]cacerts\\f[R] file in the JDK\\[aq]s\n-\\f[V]$JAVA_HOME\/lib\/security\\f[R] directory.\n-Contact your system administrator if you don\\[aq]t have permission to\n-edit this file.\n-.RE\n-.TP\n-Internet RFC 1421 Certificate Encoding Standard\n-Certificates are often stored using the printable encoding format\n-defined by the Internet RFC 1421 standard, instead of their binary\n-encoding.\n-This certificate format, also known as Base64 encoding, makes it easy to\n-export certificates to other applications by email or through some other\n-mechanism.\n-.RS\n-.PP\n-Certificates read by the \\f[V]-importcert\\f[R] and \\f[V]-printcert\\f[R]\n-commands can be in either this format or binary encoded.\n-The \\f[V]-exportcert\\f[R] command by default outputs a certificate in\n-binary encoding, but will instead output a certificate in the printable\n-encoding format, when the \\f[V]-rfc\\f[R] option is specified.\n-.PP\n-The \\f[V]-list\\f[R] command by default prints the SHA-256 fingerprint of\n-a certificate.\n-If the \\f[V]-v\\f[R] option is specified, then the certificate is printed\n-in human-readable format.\n-If the \\f[V]-rfc\\f[R] option is specified, then the certificate is\n-output in the printable encoding format.\n-.PP\n-In its printable encoding format, the encoded certificate is bounded at\n-the beginning and end by the following text:\n-.IP\n-.nf\n-\\f[CB]\n------BEGIN CERTIFICATE-----\n-\n-encoded certificate goes here.\n-\n------END CERTIFICATE-----\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-X.500 Distinguished Names\n-X.500 Distinguished Names are used to identify entities, such as those\n-that are named by the \\f[V]subject\\f[R] and \\f[V]issuer\\f[R] (signer)\n-fields of X.509 certificates.\n-The \\f[V]keytool\\f[R] command supports the following subparts:\n-.RS\n-.IP \\[bu] 2\n-commonName: The common name of a person such as Susan Jones.\n-.IP \\[bu] 2\n-organizationUnit: The small organization (such as department or\n-division) name.\n-For example, Purchasing.\n-.IP \\[bu] 2\n-localityName: The locality (city) name, for example, Palo Alto.\n-.IP \\[bu] 2\n-stateName: State or province name, for example, California.\n-.IP \\[bu] 2\n-country: Two-letter country code, for example, CH.\n-.PP\n-When you supply a distinguished name string as the value of a\n-\\f[V]-dname\\f[R] option, such as for the \\f[V]-genkeypair\\f[R] command,\n-the string must be in the following format:\n-.RS\n-.PP\n-\\f[V]CN=cName, OU=orgUnit, O=org, L=city, S=state, C=countryCode\\f[R]\n-.RE\n-.PP\n-All the following items represent actual values and the previous\n-keywords are abbreviations for the following:\n-.IP\n-.nf\n-\\f[CB]\n-CN=commonName\n-OU=organizationUnit\n-O=organizationName\n-L=localityName\n-S=stateName\n-C=country\n-\\f[R]\n-.fi\n-.PP\n-A sample distinguished name string is:\n-.RS\n-.PP\n-\\f[V]CN=Mark Smith, OU=Java, O=Oracle, L=Cupertino, S=California, C=US\\f[R]\n-.RE\n-.PP\n-A sample command using such a string is:\n-.RS\n-.PP\n-\\f[V]keytool -genkeypair -dname \\[dq]CN=Mark Smith, OU=Java, O=Oracle, L=Cupertino, S=California, C=US\\[dq] -alias mark -keyalg rsa\\f[R]\n-.RE\n-.PP\n-Case doesn\\[aq]t matter for the keyword abbreviations.\n-For example, CN, cn, and Cn are all treated the same.\n-.PP\n-Order matters; each subcomponent must appear in the designated order.\n-However, it isn\\[aq]t necessary to have all the subcomponents.\n-You can use a subset, for example:\n-.RS\n-.PP\n-\\f[V]CN=Smith, OU=Java, O=Oracle, C=US\\f[R]\n-.RE\n-.PP\n-If a distinguished name string value contains a comma, then the comma\n-must be escaped by a backslash (\\[rs]) character when you specify the\n-string on a command line, as in:\n-.RS\n-.PP\n-\\f[V]cn=Jack, ou=Java\\[rs], Product Development, o=Oracle, c=US\\f[R]\n-.RE\n-.PP\n-It is never necessary to specify a distinguished name string on a\n-command line.\n-When the distinguished name is needed for a command, but not supplied on\n-the command line, the user is prompted for each of the subcomponents.\n-In this case, a comma doesn\\[aq]t need to be escaped by a backslash\n-(\\[rs]).\n-.RE\n-.SH WARNINGS\n-.SH IMPORTING TRUSTED CERTIFICATES WARNING\n-.PP\n-\\f[B]Important\\f[R]: Be sure to check a certificate very carefully\n-before importing it as a trusted certificate.\n-.PP\n-\\f[B]Windows Example:\\f[R]\n-.PP\n-View the certificate first with the \\f[V]-printcert\\f[R] command or the\n-\\f[V]-importcert\\f[R] command without the \\f[V]-noprompt\\f[R] option.\n-Ensure that the displayed certificate fingerprints match the expected\n-ones.\n-For example, suppose someone sends or emails you a certificate that you\n-put it in a file named \\f[V]\\[rs]tmp\\[rs]cert\\f[R].\n-Before you consider adding the certificate to your list of trusted\n-certificates, you can execute a \\f[V]-printcert\\f[R] command to view its\n-fingerprints, as follows:\n-.IP\n-.nf\n-\\f[CB]\n-  keytool -printcert -file \\[rs]tmp\\[rs]cert\n-    Owner: CN=ll, OU=ll, O=ll, L=ll, S=ll, C=ll\n-    Issuer: CN=ll, OU=ll, O=ll, L=ll, S=ll, C=ll\n-    Serial Number: 59092b34\n-    Valid from: Thu Jun 24 18:01:13 PDT 2016 until: Wed Jun 23 17:01:13 PST 2016\n-    Certificate Fingerprints:\n-\n-                   SHA-1: 20:B6:17:FA:EF:E5:55:8A:D0:71:1F:E8:D6:9D:C0:37:13:0E:5E:FE\n-                 SHA-256: 90:7B:70:0A:EA:DC:16:79:92:99:41:FF:8A:FE:EB:90:\n-                          17:75:E0:90:B2:24:4D:3A:2A:16:A6:E4:11:0F:67:A4\n-\\f[R]\n-.fi\n-.PP\n-\\f[B]Linux Example:\\f[R]\n-.PP\n-View the certificate first with the \\f[V]-printcert\\f[R] command or the\n-\\f[V]-importcert\\f[R] command without the \\f[V]-noprompt\\f[R] option.\n-Ensure that the displayed certificate fingerprints match the expected\n-ones.\n-For example, suppose someone sends or emails you a certificate that you\n-put it in a file named \\f[V]\/tmp\/cert\\f[R].\n-Before you consider adding the certificate to your list of trusted\n-certificates, you can execute a \\f[V]-printcert\\f[R] command to view its\n-fingerprints, as follows:\n-.IP\n-.nf\n-\\f[CB]\n-  keytool -printcert -file \/tmp\/cert\n-    Owner: CN=ll, OU=ll, O=ll, L=ll, S=ll, C=ll\n-    Issuer: CN=ll, OU=ll, O=ll, L=ll, S=ll, C=ll\n-    Serial Number: 59092b34\n-    Valid from: Thu Jun 24 18:01:13 PDT 2016 until: Wed Jun 23 17:01:13 PST 2016\n-    Certificate Fingerprints:\n-\n-                   SHA-1: 20:B6:17:FA:EF:E5:55:8A:D0:71:1F:E8:D6:9D:C0:37:13:0E:5E:FE\n-                   SHA-256: 90:7B:70:0A:EA:DC:16:79:92:99:41:FF:8A:FE:EB:90:\n-                           17:75:E0:90:B2:24:4D:3A:2A:16:A6:E4:11:0F:67:A4\n-\\f[R]\n-.fi\n-.PP\n-Then call or otherwise contact the person who sent the certificate and\n-compare the fingerprints that you see with the ones that they show.\n-Only when the fingerprints are equal is it guaranteed that the\n-certificate wasn\\[aq]t replaced in transit with somebody else\\[aq]s\n-certificate such as an attacker\\[aq]s certificate.\n-If such an attack took place, and you didn\\[aq]t check the certificate\n-before you imported it, then you would be trusting anything the attacker\n-signed, for example, a JAR file with malicious class files inside.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-It isn\\[aq]t required that you execute a \\f[V]-printcert\\f[R] command\n-before importing a certificate.\n-This is because before you add a certificate to the list of trusted\n-certificates in the keystore, the \\f[V]-importcert\\f[R] command prints\n-out the certificate information and prompts you to verify it.\n-You can then stop the import operation.\n-However, you can do this only when you call the \\f[V]-importcert\\f[R]\n-command without the \\f[V]-noprompt\\f[R] option.\n-If the \\f[V]-noprompt\\f[R] option is specified, then there is no\n-interaction with the user.\n-.SH PASSWORDS WARNING\n-.PP\n-Most commands that operate on a keystore require the store password.\n-Some commands require a private\/secret key password.\n-Passwords can be specified on the command line in the\n-\\f[V]-storepass\\f[R] and \\f[V]-keypass\\f[R] options.\n-However, a password shouldn\\[aq]t be specified on a command line or in a\n-script unless it is for testing, or you are on a secure system.\n-When you don\\[aq]t specify a required password option on a command line,\n-you are prompted for it.\n-.SH CERTIFICATE CONFORMANCE WARNING\n-.PP\n-\\f[B]Internet X.509 Public Key Infrastructure Certificate and\n-Certificate Revocation List (CRL) Profile\\f[R]\n-[https:\/\/tools.ietf.org\/rfc\/rfc5280.txt] defined a profile on conforming\n-X.509 certificates, which includes what values and value combinations\n-are valid for certificate fields and extensions.\n-.PP\n-The \\f[V]keytool\\f[R] command doesn\\[aq]t enforce all of these rules so\n-it can generate certificates that don\\[aq]t conform to the standard,\n-such as self-signed certificates that would be used for internal testing\n-purposes.\n-Certificates that don\\[aq]t conform to the standard might be rejected by\n-the JDK or other applications.\n-Users should ensure that they provide the correct options for\n-\\f[V]-dname\\f[R], \\f[V]-ext\\f[R], and so on.\n-.SH IMPORT A NEW TRUSTED CERTIFICATE\n-.PP\n-Before you add the certificate to the keystore, the \\f[V]keytool\\f[R]\n-command verifies it by attempting to construct a chain of trust from\n-that certificate to a self-signed certificate (belonging to a root CA),\n-using trusted certificates that are already available in the keystore.\n-.PP\n-If the \\f[V]-trustcacerts\\f[R] option was specified, then additional\n-certificates are considered for the chain of trust, namely the\n-certificates in a file named \\f[V]cacerts\\f[R].\n-.PP\n-If the \\f[V]keytool\\f[R] command fails to establish a trust path from\n-the certificate to be imported up to a self-signed certificate (either\n-from the keystore or the \\f[V]cacerts\\f[R] file), then the certificate\n-information is printed, and the user is prompted to verify it by\n-comparing the displayed certificate fingerprints with the fingerprints\n-obtained from some other (trusted) source of information, which might be\n-the certificate owner.\n-Be very careful to ensure the certificate is valid before importing it\n-as a trusted certificate.\n-The user then has the option of stopping the import operation.\n-If the \\f[V]-noprompt\\f[R] option is specified, then there is no\n-interaction with the user.\n-.SH IMPORT A CERTIFICATE REPLY\n-.PP\n-When you import a certificate reply, the certificate reply is validated\n-with trusted certificates from the keystore, and optionally, the\n-certificates configured in the \\f[V]cacerts\\f[R] keystore file when the\n-\\f[V]-trustcacerts\\f[R] option is specified.\n-.PP\n-The methods of determining whether the certificate reply is trusted are\n-as follows:\n-.IP \\[bu] 2\n-If the reply is a single X.509 certificate, then the \\f[V]keytool\\f[R]\n-command attempts to establish a trust chain, starting at the certificate\n-reply and ending at a self-signed certificate (belonging to a root CA).\n-The certificate reply and the hierarchy of certificates is used to\n-authenticate the certificate reply from the new certificate chain of\n-aliases.\n-If a trust chain can\\[aq]t be established, then the certificate reply\n-isn\\[aq]t imported.\n-In this case, the \\f[V]keytool\\f[R] command doesn\\[aq]t print the\n-certificate and prompt the user to verify it, because it is very\n-difficult for a user to determine the authenticity of the certificate\n-reply.\n-.IP \\[bu] 2\n-If the reply is a PKCS #7 formatted certificate chain or a sequence of\n-X.509 certificates, then the chain is ordered with the user certificate\n-first followed by zero or more CA certificates.\n-If the chain ends with a self-signed root CA certificate and\n-the\\f[V]-trustcacerts\\f[R] option was specified, the \\f[V]keytool\\f[R]\n-command attempts to match it with any of the trusted certificates in the\n-keystore or the \\f[V]cacerts\\f[R] keystore file.\n-If the chain doesn\\[aq]t end with a self-signed root CA certificate and\n-the \\f[V]-trustcacerts\\f[R] option was specified, the \\f[V]keytool\\f[R]\n-command tries to find one from the trusted certificates in the keystore\n-or the \\f[V]cacerts\\f[R] keystore file and add it to the end of the\n-chain.\n-If the certificate isn\\[aq]t found and the \\f[V]-noprompt\\f[R] option\n-isn\\[aq]t specified, the information of the last certificate in the\n-chain is printed, and the user is prompted to verify it.\n-.PP\n-If the public key in the certificate reply matches the user\\[aq]s public\n-key already stored with \\f[V]alias\\f[R], then the old certificate chain\n-is replaced with the new certificate chain in the reply.\n-The old chain can only be replaced with a valid \\f[V]keypass\\f[R], and\n-so the password used to protect the private key of the entry is\n-supplied.\n-If no password is provided, and the private key password is different\n-from the keystore password, the user is prompted for it.\n-.PP\n-This command was named \\f[V]-import\\f[R] in earlier releases.\n-This old name is still supported in this release.\n-The new name, \\f[V]-importcert\\f[R], is preferred.\n","filename":"src\/java.base\/share\/man\/keytool.1","additions":0,"deletions":2991,"binary":false,"changes":2991,"status":"deleted"},{"patch":"@@ -0,0 +1,2430 @@\n+---\n+# Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'KEYTOOL(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+keytool - a key and certificate management utility\n+\n+## Synopsis\n+\n+`keytool` \\[*commands*\\]\n+\n+*commands*\n+:   Commands for `keytool` include the following:\n+\n+    -   `-certreq`: Generates a certificate request\n+\n+    -   `-changealias`: Changes an entry's alias\n+\n+    -   `-delete`: Deletes an entry\n+\n+    -   `-exportcert`: Exports certificate\n+\n+    -   `-genkeypair`: Generates a key pair\n+\n+    -   `-genseckey`: Generates a secret key\n+\n+    -   `-gencert`: Generates a certificate from a certificate request\n+\n+    -   `-importcert`: Imports a certificate or a certificate chain\n+\n+    -   `-importpass`: Imports a password\n+\n+    -   `-importkeystore`: Imports one or all entries from another keystore\n+\n+    -   `-keypasswd`: Changes the key password of an entry\n+\n+    -   `-list`: Lists entries in a keystore\n+\n+    -   `-printcert`: Prints the content of a certificate\n+\n+    -   `-printcertreq`: Prints the content of a certificate request\n+\n+    -   `-printcrl`: Prints the content of a Certificate Revocation List (CRL)\n+        file\n+\n+    -   `-storepasswd`: Changes the store password of a keystore\n+\n+    -   `-showinfo`: Displays security-related information\n+\n+    -   `-version`: Prints the program version\n+\n+    See [Commands and Options] for a description of these commands with their\n+    options.\n+\n+## Description\n+\n+The `keytool` command is a key and certificate management utility. It enables\n+users to administer their own public\/private key pairs and associated\n+certificates for use in self-authentication (where a user authenticates\n+themselves to other users and services) or data integrity and authentication\n+services, by using digital signatures. The `keytool` command also enables users\n+to cache the public keys (in the form of certificates) of their communicating\n+peers.\n+\n+A certificate is a digitally signed statement from one entity (person, company,\n+and so on), which says that the public key (and some other information) of some\n+other entity has a particular value. When data is digitally signed, the\n+signature can be verified to check the data integrity and authenticity.\n+Integrity means that the data hasn't been modified or tampered with, and\n+authenticity means that the data comes from the individual who claims to have\n+created and signed it.\n+\n+The `keytool` command also enables users to administer secret keys and\n+passphrases used in symmetric encryption and decryption (Data Encryption\n+Standard). It can also display other security-related information.\n+\n+The `keytool` command stores the keys and certificates in a keystore.\n+\n+The `keytool` command uses the `jdk.certpath.disabledAlgorithms` and\n+`jdk.security.legacyAlgorithms` security properties to determine which\n+algorithms are considered a security risk. It emits warnings when\n+disabled or legacy algorithms are being used.\n+The `jdk.certpath.disabledAlgorithms` and `jdk.security.legacyAlgorithms`\n+security properties are defined in the `java.security` file (located in\n+the JDK's `$JAVA_HOME\/conf\/security` directory).\n+\n+## Command and Option Notes\n+\n+The following notes apply to the descriptions in [Commands and Options]\\:\n+\n+-   All command and option names are preceded by a hyphen sign (`-`).\n+\n+-   Only one command can be provided.\n+\n+-   Options for each command can be provided in any order.\n+\n+-   There are two kinds of options, one is single-valued which should be\n+    only provided once. If a single-valued option is provided multiple times,\n+    the value of the last one is used. The other type is multi-valued,\n+    which can be provided multiple times and all values are used.\n+    The only multi-valued option currently supported is the `-ext` option used\n+    to generate X.509v3 certificate extensions.\n+\n+-   All items not italicized or in braces ({ }) or brackets (\\[ \\]) are\n+    required to appear as is.\n+\n+-   Braces surrounding an option signify that a default value is used when the\n+    option isn't specified on the command line. Braces are also used around the\n+    `-v`, `-rfc`, and `-J` options, which have meaning only when they appear on\n+    the command line. They don't have any default values.\n+\n+-   Brackets surrounding an option signify that the user is prompted for the\n+    values when the option isn't specified on the command line. For the\n+    `-keypass` option, if you don't specify the option on the command line,\n+    then the `keytool` command first attempts to use the keystore password to\n+    recover the private\/secret key. If this attempt fails, then the `keytool`\n+    command prompts you for the private\/secret key password.\n+\n+-   Items in italics (option values) represent the actual values that must be\n+    supplied. For example, here is the format of the `-printcert` command:\n+\n+    >   `keytool -printcert` {`-file` *cert\\_file*} {`-v`}\n+\n+    When you specify a `-printcert` command, replace *cert\\_file* with the\n+    actual file name, as follows: `keytool -printcert -file VScert.cer`\n+\n+-   Option values must be enclosed in quotation marks when they contain a blank\n+    (space).\n+\n+## Commands and Options\n+\n+The keytool commands and their options can be grouped by the tasks that they\n+perform.\n+\n+[Commands for Creating or Adding Data to the Keystore]\\:\n+\n+-   `-gencert`\n+\n+-   `-genkeypair`\n+\n+-   `-genseckey`\n+\n+-   `-importcert`\n+\n+-   `-importpass`\n+\n+[Commands for Importing Contents from Another Keystore]\\:\n+\n+-   `-importkeystore`\n+\n+[Commands for Generating a Certificate Request]\\:\n+\n+-   `-certreq`\n+\n+[Commands for Exporting Data]\\:\n+\n+-   `-exportcert`\n+\n+[Commands for Displaying Data]\\:\n+\n+-   `-list`\n+\n+-   `-printcert`\n+\n+-   `-printcertreq`\n+\n+-   `-printcrl`\n+\n+[Commands for Managing the Keystore]\\:\n+\n+-   `-storepasswd`\n+\n+-   `-keypasswd`\n+\n+-   `-delete`\n+\n+-   `-changealias`\n+\n+[Commands for Displaying Security-related Information]\\:\n+\n+-   `-showinfo`\n+\n+[Commands for Displaying Program Version]\\:\n+\n+-   `-version`\n+\n+## Commands for Creating or Adding Data to the Keystore\n+\n+`-gencert`\n+:   The following are the available options for the `-gencert` command:\n+\n+    -   {`-rfc`}: Output in RFC (Request For Comment) style\n+\n+    -   {`-infile` *infile*}: Input file name\n+\n+    -   {`-outfile` *outfile*}: Output file name\n+\n+    -   {`-alias` *alias*}: Alias name of the entry to process\n+\n+    -   {`-sigalg` *sigalg*}: Signature algorithm name\n+\n+    -   {`-dname` *dname*}: Distinguished name\n+\n+    -   {`-startdate` *startdate*}: Certificate validity start date and time\n+\n+    -   {`-ext` *ext*}\\*: X.509 extension\n+\n+    -   {`-validity` *days*}: Validity number of days\n+\n+    -   \\[`-keypass` *arg*\\]: Key password\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Adds a security\n+        provider by name (such as SunPKCS11) with an optional configure\n+        argument. The value of the security provider is the name of a security\n+        provider that is defined in a module.\n+\n+        For example,\n+\n+        >   `keytool -addprovider SunPKCS11 -providerarg some.cfg ...`\n+\n+        **Note:**\n+\n+        For compatibility reasons, the SunPKCS11 provider can still be loaded\n+        with `-providerclass sun.security.pkcs11.SunPKCS11` even if it is now\n+        defined in a module. This is the only module included in the JDK that\n+        needs a configuration, and therefore the most widely used with the\n+        `-providerclass` option. For legacy security providers located on\n+        classpath and loaded by reflection, `-providerclass` should still be\n+        used.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+        For example, if `MyProvider` is a legacy provider loaded via\n+        reflection,\n+\n+        >   `keytool -providerclass com.example.MyProvider ...`\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    -   {`-protected`}: Password provided through a protected mechanism\n+\n+    Use the `-gencert` command to generate a certificate as a response to a\n+    certificate request file (which can be created by the `keytool -certreq`\n+    command). The command reads the request either from *infile* or, if\n+    omitted, from the standard input, signs it by using the alias's private\n+    key, and outputs the X.509 certificate into either *outfile* or, if\n+    omitted, to the standard output. When `-rfc` is specified, the output\n+    format is Base64-encoded PEM; otherwise, a binary DER is created.\n+\n+    The `-sigalg` value specifies the algorithm that should be used to sign the\n+    certificate. The *startdate* argument is the start time and date that the\n+    certificate is valid. The *days* argument tells the number of days for\n+    which the certificate should be considered valid.\n+\n+    When *dname* is provided, it is used as the subject of the generated\n+    certificate. Otherwise, the one from the certificate request is used.\n+\n+    The `-ext` value shows what X.509 extensions will be embedded in the\n+    certificate. Read [Common Command Options] for the grammar of `-ext`.\n+\n+    The `-gencert` option enables you to create certificate chains. The\n+    following example creates a certificate, `e1`, that contains three\n+    certificates in its certificate chain.\n+\n+    The following commands creates four key pairs named `ca`, `ca1`, `ca2`, and\n+    `e1`:\n+\n+    ```\n+    keytool -alias ca -dname CN=CA -genkeypair -keyalg rsa\n+    keytool -alias ca1 -dname CN=CA -genkeypair -keyalg rsa\n+    keytool -alias ca2 -dname CN=CA -genkeypair -keyalg rsa\n+    keytool -alias e1 -dname CN=E1 -genkeypair -keyalg rsa\n+    ```\n+\n+    The following two commands create a chain of signed certificates; `ca`\n+    signs `ca1` and `ca1` signs `ca2`, all of which are self-issued:\n+\n+    ```\n+    keytool -alias ca1 -certreq |\n+        keytool -alias ca -gencert -ext san=dns:ca1 |\n+        keytool -alias ca1 -importcert\n+\n+    keytool -alias ca2 -certreq |\n+        keytool -alias ca1 -gencert -ext san=dns:ca2 |\n+        keytool -alias ca2 -importcert\n+    ```\n+\n+    The following command creates the certificate `e1` and stores it in the\n+    `e1.cert` file, which is signed by `ca2`. As a result, `e1` should contain\n+    `ca`, `ca1`, and `ca2` in its certificate chain:\n+\n+    >   `keytool -alias e1 -certreq | keytool -alias ca2 -gencert > e1.cert`\n+\n+`-genkeypair`\n+:   The following are the available options for the `-genkeypair` command:\n+\n+    -   {`-alias` *alias*}: Alias name of the entry to process\n+\n+    -   `-keyalg` *alg*: Key algorithm name\n+\n+    -   {`-keysize` *size*}: Key bit size\n+\n+    -   {`-groupname` *name*}: Group name. For example, an Elliptic Curve name.\n+\n+    -   {`-sigalg` *alg*}: Signature algorithm name\n+\n+    -   {`-signer` *alias*}: Signer alias\n+\n+    -   \\[`-signerkeypass` *arg*\\]: Signer key password\n+\n+    -   \\[`-dname` *name*\\]: Distinguished name\n+\n+    -   {`-startdate` *date*}: Certificate validity start date and time\n+\n+    -   {`-ext` *value*}\\*: X.509 extension\n+\n+    -   {`-validity` *days*}: Validity number of days\n+\n+    -   \\[`-keypass` *arg*\\]: Key password\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\] }: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    -   {`-protected`}: Password provided through a protected mechanism\n+\n+    Use the `-genkeypair` command to generate a key pair (a public key and\n+    associated private key). When the `-signer` option is not specified,\n+    the public key is wrapped in an X.509 v3 self-signed certificate and\n+    stored as a single-element certificate chain. When the `-signer`\n+    option is specified, a new certificate is generated and signed by\n+    the designated signer and stored as a multiple-element certificate\n+    chain (containing the generated certificate itself, and the signer's\n+    certificate chain). The certificate chain and private key are stored\n+    in a new keystore entry that is identified by its alias.\n+\n+    The `-keyalg` value specifies the algorithm to be used to generate the key\n+    pair. The `-keysize` value specifies the size of each key to be generated.\n+    The `-groupname` value specifies the named group (for example, the standard\n+    or predefined name of an Elliptic Curve) of the key to be generated.\n+\n+    When a `-keysize` value is provided, it will be used to initialize a\n+    `KeyPairGenerator` object using the `initialize(int keysize)`\n+    method. When a `-groupname` value is provided, it will be used to\n+    initialize a `KeyPairGenerator` object using the\n+    `initialize(AlgorithmParameterSpec params)` method where `params`\n+    is `new NamedParameterSpec(groupname)`.\n+\n+    Only one of `-groupname` and `-keysize` can be specified. If an algorithm\n+    has multiple named groups that have the same key size, the `-groupname`\n+    option should usually be used. In this case, if `-keysize` is specified,\n+    it's up to the security provider to determine which named group is chosen\n+    when generating a key pair.\n+\n+    The `-sigalg` value specifies the algorithm that should be used\n+    to sign the certificate. This algorithm must be compatible with\n+    the `-keyalg` value.\n+\n+    The `-signer` value specifies the alias of a `PrivateKeyEntry` for the\n+    signer that already exists in the keystore. This option is used to\n+    sign the certificate with the signer's private key. This is especially\n+    useful for key agreement algorithms (i.e. the `-keyalg` value is `XDH`,\n+    `X25519`, `X448`, or `DH`) as these keys cannot be used for digital\n+    signatures, and therefore a self-signed certificate cannot be created.\n+\n+    The `-signerkeypass` value specifies the password of the signer's private\n+    key. It can be specified if the private key of the signer entry is\n+    protected by a password different from the store password.\n+\n+    The `-dname` value specifies the X.500 Distinguished Name to be associated\n+    with the value of `-alias`. If the `-signer` option is not specified, the\n+    issuer and subject fields of the self-signed certificate are populated\n+    with the specified distinguished name. If the `-signer` option is\n+    specified, the subject field of the certificate is populated with the\n+    specified distinguished name and the issuer field is populated with the\n+    subject field of the signer's certificate. If a distinguished name is not\n+    provided at the command line, then the user is prompted for one.\n+\n+    The value of `-keypass` is a password used to protect the private key of\n+    the generated key pair. If a password is not provided, then the user is\n+    prompted for it. If you press the **Return** key at the prompt, then the\n+    key password is set to the same password as the keystore password. The\n+    `-keypass` value must have at least six characters.\n+\n+    The value of `-startdate` specifies the issue time of the certificate, also\n+    known as the \"Not Before\" value of the X.509 certificate's Validity field.\n+\n+    The option value can be set in one of these two forms:\n+\n+    (\\[`+-`\\]*nnn*\\[`ymdHMS`\\])+\n+\n+    \\[*yyyy*`\/`*mm*`\/`*dd*\\] \\[*HH*`:`*MM*`:`*SS*\\]\n+\n+    With the first form, the issue time is shifted by the specified value from\n+    the current time. The value is a concatenation of a sequence of subvalues.\n+    Inside each subvalue, the plus sign (+) means shift forward, and the minus\n+    sign (-) means shift backward. The time to be shifted is *nnn* units of\n+    years, months, days, hours, minutes, or seconds (denoted by a single\n+    character of `y`, `m`, `d`, `H`, `M`, or `S` respectively). The exact value\n+    of the issue time is calculated by using the\n+    `java.util.GregorianCalendar.add(int field, int amount)` method on each\n+    subvalue, from left to right. For example, the issue time can be specified\n+    by:\n+\n+    ```\n+    Calendar c = new GregorianCalendar();\n+    c.add(Calendar.YEAR, -1);\n+    c.add(Calendar.MONTH, 1);\n+    c.add(Calendar.DATE, -1);\n+    return c.getTime()\n+    ```\n+\n+    With the second form, the user sets the exact issue time in two parts,\n+    year\/month\/day and hour:minute:second (using the local time zone). The user\n+    can provide only one part, which means the other part is the same as the\n+    current date (or time). The user must provide the exact number of digits\n+    shown in the format definition (padding with 0 when shorter). When both\n+    date and time are provided, there is one (and only one) space character\n+    between the two parts. The hour should always be provided in 24-hour\n+    format.\n+\n+    When the option isn't provided, the start date is the current time. The\n+    option can only be provided one time.\n+\n+    The value of *date* specifies the number of days (starting at the date\n+    specified by `-startdate`, or the current date when `-startdate` isn't\n+    specified) for which the certificate should be considered valid.\n+\n+`-genseckey`\n+:   The following are the available options for the `-genseckey` command:\n+\n+    -   {`-alias` *alias*}: Alias name of the entry to process\n+\n+    -   \\[`-keypass` *arg*\\]: Key password\n+\n+    -   `-keyalg` *alg*: Key algorithm name\n+\n+    -   {`-keysize` *size*}: Key bit size\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    -   {`-protected`}: Password provided through a protected mechanism\n+\n+    Use the `-genseckey` command to generate a secret key and store it in a new\n+    `KeyStore.SecretKeyEntry` identified by `alias`.\n+\n+    The value of `-keyalg` specifies the algorithm to be used to generate the\n+    secret key, and the value of `-keysize` specifies the size of the key that\n+    is generated. The `-keypass` value is a password that protects the secret\n+    key. If a password is not provided, then the user is prompted for it. If\n+    you press the **Return** key at the prompt, then the key password is set to\n+    the same password that is used for the `-keystore`. The `-keypass` value\n+    must contain at least six characters.\n+\n+`-importcert`\n+:   The following are the available options for the `-importcert` command:\n+\n+    -   {`-noprompt`}: Do not prompt\n+\n+    -   {`-trustcacerts`}: Trust certificates from cacerts\n+\n+    -   {`-protected`}: Password is provided through protected mechanism\n+\n+    -   {`-alias` *alias*}: Alias name of the entry to process\n+\n+    -   {`-file` *file*}: Input file name\n+\n+    -   \\[`-keypass` *arg*\\]: Key password\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   {`-cacerts`}: Access the cacerts keystore\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    Use the `-importcert` command to read the certificate or certificate chain\n+    (where the latter is supplied in a PKCS\\#7 formatted reply or in a sequence\n+    of X.509 certificates) from `-file` *file*, and store it in the `keystore`\n+    entry identified by `-alias`. If `-file` *file* is not specified, then the\n+    certificate or certificate chain is read from `stdin`.\n+\n+    The `keytool` command can import X.509 v1, v2, and v3 certificates, and\n+    PKCS\\#7 formatted certificate chains consisting of certificates of that\n+    type. The data to be imported must be provided either in binary encoding\n+    format or in printable encoding format (also known as Base64 encoding) as\n+    defined by the Internet RFC 1421 standard. In the latter case, the encoding\n+    must be bounded at the beginning by a string that starts with `-----BEGIN`,\n+    and bounded at the end by a string that starts with `-----END`.\n+\n+    You import a certificate for two reasons: To add it to the list of trusted\n+    certificates, and to import a certificate reply received from a certificate\n+    authority (CA) as the result of submitting a Certificate Signing Request\n+    (CSR) to that CA. See the `-certreq` command in [Commands for Generating a\n+    Certificate Request].\n+\n+    The type of import is indicated by the value of the `-alias` option. If the\n+    alias doesn't point to a key entry, then the `keytool` command assumes you\n+    are adding a trusted certificate entry. In this case, the alias shouldn't\n+    already exist in the keystore. If the alias does exist, then the `keytool`\n+    command outputs an error because a trusted certificate already exists for\n+    that alias, and doesn't import the certificate. If `-alias` points to a key\n+    entry, then the `keytool` command assumes that you're importing a\n+    certificate reply.\n+\n+`-importpass`\n+:   The following are the available options for the `-importpass` command:\n+\n+    -   {`-alias` *alias*}: Alias name of the entry to process\n+\n+    -   \\[`-keypass` *arg*\\]: Key password\n+\n+    -   {`-keyalg` *alg*}: Key algorithm name\n+\n+    -   {`-keysize` *size*}: Key bit size\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    -   {`-protected`}: Password provided through a protected mechanism\n+\n+    Use the `-importpass` command to imports a passphrase and store it in a new\n+    `KeyStore.SecretKeyEntry` identified by `-alias`. The passphrase may be\n+    supplied via the standard input stream; otherwise the user is prompted for\n+    it. The `-keypass` option provides a password to protect the imported\n+    passphrase. If a password is not provided, then the user is prompted for\n+    it. If you press the **Return** key at the prompt, then the key password is\n+    set to the same password as that used for the `keystore`. The `-keypass`\n+    value must contain at least six characters.\n+\n+## Commands for Importing Contents from Another Keystore\n+\n+`-importkeystore`\n+:   The following are the available options for the `-importkeystore` command:\n+\n+    -   `-srckeystore` *keystore*: Source keystore name\n+\n+    -   {`-destkeystore` *keystore*}: Destination keystore name\n+\n+    -   {`-srcstoretype` *type*}: Source keystore type\n+\n+    -   {`-deststoretype` *type*}: Destination keystore type\n+\n+    -   \\[`-srcstorepass` *arg*\\]: Source keystore password\n+\n+    -   \\[`-deststorepass` *arg*\\]: Destination keystore password\n+\n+    -   {`-srcprotected`}: Source keystore password protected\n+\n+    -   {`-destprotected`}: Destination keystore password protected\n+\n+    -   {`-srcprovidername` *name*}: Source keystore provider name\n+\n+    -   {`-destprovidername` *name*}: Destination keystore provider name\n+\n+    -   {`-srcalias` *alias*}: Source alias\n+\n+    -   {`-destalias` *alias*}: Destination alias\n+\n+    -   \\[`-srckeypass` *arg*\\]: Source key password\n+\n+    -   \\[`-destkeypass` *arg*\\]: Destination key password\n+\n+    -   {`-noprompt`}: Do not prompt\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    **Note:**\n+\n+    This is the first line of all options:\n+\n+    >   `-srckeystore` *keystore* `-destkeystore` *keystore*\n+\n+    Use the `-importkeystore` command to import a single entry or all entries\n+    from a source keystore to a destination keystore.\n+\n+    **Note:**\n+\n+    If you do not specify `-destkeystore` when using the\n+    `keytool -importkeystore` command, then the default keystore used is\n+    `$HOME\/.keystore`.\n+\n+    When the `-srcalias` option is provided, the command imports the single\n+    entry identified by the alias to the destination keystore. If a destination\n+    alias isn't provided with `-destalias`, then `-srcalias` is used as the\n+    destination alias. If the source entry is protected by a password, then\n+    `-srckeypass` is used to recover the entry. If `-srckeypass` isn't\n+    provided, then the `keytool` command attempts to use `-srcstorepass` to\n+    recover the entry. If `-srcstorepass` is not provided or is incorrect, then\n+    the user is prompted for a password. The destination entry is protected\n+    with `-destkeypass`. If `-destkeypass` isn't provided, then the destination\n+    entry is protected with the source entry password. For example, most\n+    third-party tools require `storepass` and `keypass` in a PKCS \\#12 keystore\n+    to be the same. To create a PKCS\\#12 keystore for these tools, always\n+    specify a `-destkeypass` that is the same as `-deststorepass`.\n+\n+    If the `-srcalias` option isn't provided, then all entries in the source\n+    keystore are imported into the destination keystore. Each destination entry\n+    is stored under the alias from the source entry. If the source entry is\n+    protected by a password, then `-srcstorepass` is used to recover the entry.\n+    If `-srcstorepass` is not provided or is incorrect, then the user is\n+    prompted for a password. If a source keystore entry type isn't supported in\n+    the destination keystore, or if an error occurs while storing an entry into\n+    the destination keystore, then the user is prompted either to skip the\n+    entry and continue or to quit. The destination entry is protected with the\n+    source entry password.\n+\n+    If the destination alias already exists in the destination keystore, then\n+    the user is prompted either to overwrite the entry or to create a new entry\n+    under a different alias name.\n+\n+    If the `-noprompt` option is provided, then the user isn't prompted for a\n+    new destination alias. Existing entries are overwritten with the\n+    destination alias name. Entries that can't be imported are skipped and a\n+    warning is displayed.\n+\n+## Commands for Generating a Certificate Request\n+\n+`-certreq`\n+:   The following are the available options for the `-certreq` command:\n+\n+    -   {`-alias` *alias*}: Alias name of the entry to process\n+\n+    -   {`-sigalg` *alg*}: Signature algorithm name\n+\n+    -   {`-file` *file*}: Output file name\n+\n+    -   \\[ `-keypass` *arg*\\]: Key password\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   {`-dname` *name*}: Distinguished name\n+\n+    -   {`-ext` *value*}: X.509 extension\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    -   {`-protected`}: Password provided through a protected mechanism\n+\n+    Use the `-certreq` command to generate a Certificate Signing Request (CSR)\n+    using the PKCS \\#10 format.\n+\n+    A CSR is intended to be sent to a CA. The CA authenticates the certificate\n+    requestor (usually offline) and returns a certificate or certificate chain\n+    to replace the existing certificate chain (initially a self-signed\n+    certificate) in the keystore.\n+\n+    The private key associated with *alias* is used to create the PKCS \\#10\n+    certificate request. To access the private key, the correct password must\n+    be provided. If `-keypass` isn't provided at the command line and is\n+    different from the password used to protect the integrity of the keystore,\n+    then the user is prompted for it. If `-dname` is provided, then it is used\n+    as the subject in the CSR. Otherwise, the X.500 Distinguished Name\n+    associated with alias is used.\n+\n+    The `-sigalg` value specifies the algorithm that should be used to sign the\n+    CSR.\n+\n+    The CSR is stored in the `-file` *file*. If a file is not specified, then\n+    the CSR is output to `-stdout`.\n+\n+    Use the `-importcert` command to import the response from the CA.\n+\n+## Commands for Exporting Data\n+\n+`-exportcert`\n+:   The following are the available options for the `-exportcert` command:\n+\n+    -   {`-rfc`}: Output in RFC style\n+\n+    -   {`-alias` *alias*}: Alias name of the entry to process\n+\n+    -   {`-file` *file*}: Output file name\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   {`-cacerts`}: Access the cacerts keystore\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\] }: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    -   {`-protected`}: Password provided through a protected mechanism\n+\n+    Use the `-exportcert` command to read a certificate from the keystore that\n+    is associated with `-alias` *alias* and store it in the `-file` *file*.\n+    When a file is not specified, the certificate is output to `stdout`.\n+\n+    By default, the certificate is output in binary encoding. If the `-rfc`\n+    option is specified, then the output in the printable encoding format\n+    defined by the Internet RFC 1421 Certificate Encoding Standard.\n+\n+    If `-alias` refers to a trusted certificate, then that certificate is\n+    output. Otherwise, `-alias` refers to a key entry with an associated\n+    certificate chain. In that case, the first certificate in the chain is\n+    returned. This certificate authenticates the public key of the entity\n+    addressed by `-alias`.\n+\n+## Commands for Displaying Data\n+\n+`-list`\n+:   The following are the available options for the `-list` command:\n+\n+    -   {`-rfc`}: Output in RFC style\n+\n+    -   {`-alias` *alias*}: Alias name of the entry to process\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   {`-cacerts`}: Access the cacerts keystore\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\] }: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    -   {`-protected`}: Password provided through a protected mechanism\n+\n+    Use the `-list` command to print the contents of the keystore entry\n+    identified by `-alias` to `stdout`. If `-alias` *alias* is not specified,\n+    then the contents of the entire keystore are printed.\n+\n+    By default, this command prints the SHA-256 fingerprint of a certificate.\n+    If the `-v` option is specified, then the certificate is printed in\n+    human-readable format, with additional information such as the owner,\n+    issuer, serial number, and any extensions. If the `-rfc` option is\n+    specified, then the certificate contents are printed by using the printable\n+    encoding format, as defined by the Internet RFC 1421 Certificate Encoding\n+    Standard.\n+\n+    **Note:**\n+\n+    You can't specify both `-v` and `-rfc` in the same command. Otherwise, an\n+    error is reported.\n+\n+`-printcert`\n+:   The following are the available options for the `-printcert` command:\n+\n+    -   {`-rfc`}: Output in RFC style\n+\n+    -   {`-file` *cert\\_file*}: Input file name\n+\n+    -   {`-sslserver` *server*\\[`:`*port*\\]}:: Secure Sockets Layer (SSL)\n+        server host and port\n+\n+    -   {`-jarfile` *JAR\\_file*}: Signed `.jar` file\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   {`-trustcacerts`}: Trust certificates from cacerts\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-protected`}: Password is provided through protected mechanism\n+\n+    -   {`-v`}: Verbose output\n+\n+    Use the `-printcert` command to read and print the certificate from `-file`\n+    *cert\\_file*, the SSL server located at `-sslserver` *server*\\[`:`*port*\\],\n+    or the signed JAR file specified by `-jarfile` *JAR\\_file*. It prints its\n+    contents in a human-readable format. When a port is not specified, the\n+    standard HTTPS port 443 is assumed.\n+\n+    **Note:**\n+\n+    The `-sslserver` and `-file` options can't be provided in the same command.\n+    Otherwise, an error is reported. If you don't specify either option, then\n+    the certificate is read from `stdin`.\n+\n+    When`-rfc` is specified, the `keytool` command prints the certificate in\n+    PEM mode as defined by the Internet RFC 1421 Certificate Encoding standard.\n+\n+    If the certificate is read from a file or `stdin`, then it might be either\n+    binary encoded or in printable encoding format, as defined by the RFC 1421\n+    Certificate Encoding standard.\n+\n+    If the SSL server is behind a firewall, then the\n+    `-J-Dhttps.proxyHost=proxyhost` and `-J-Dhttps.proxyPort=proxyport` options\n+    can be specified on the command line for proxy tunneling.\n+\n+    **Note:**\n+\n+    This command can be used independently of a keystore. This command does not\n+    check for the weakness of a certificate's signature algorithm if it is a\n+    trusted certificate in the user keystore (specified by `-keystore`) or in\n+    the `cacerts` keystore (if `-trustcacerts` is specified).\n+\n+`-printcertreq`\n+:   The following are the available options for the `-printcertreq` command:\n+\n+    -   {`-file` *file*}: Input file name\n+\n+    -   {`-v`}: Verbose output\n+\n+    Use the `-printcertreq` command to print the contents of a PKCS \\#10 format\n+    certificate request, which can be generated by the `keytool -certreq`\n+    command. The command reads the request from file. If there is no file, then\n+    the request is read from the standard input.\n+\n+`-printcrl`\n+:   The following are the available options for the `-printcrl` command:\n+\n+    -   {`-file crl`}: Input file name\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   {`-trustcacerts`}: Trust certificates from cacerts\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-protected`}: Password is provided through protected mechanism\n+\n+    -   {`-v`}: Verbose output\n+\n+    Use the `-printcrl` command to read the Certificate Revocation List (CRL)\n+    from `-file crl` . A CRL is a list of the digital certificates that were\n+    revoked by the CA that issued them. The CA generates the `crl` file.\n+\n+    **Note:**\n+\n+    This command can be used independently of a keystore. This command attempts\n+    to verify the CRL using a certificate from the user keystore (specified by\n+    `-keystore`) or the `cacerts` keystore (if `-trustcacerts` is specified), and\n+    will print out a warning if it cannot be verified.\n+\n+## Commands for Managing the Keystore\n+\n+`-storepasswd`\n+:   The following are the available options for the `-storepasswd` command:\n+\n+    -   \\[`-new` *arg*\\]: New password\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   {`-cacerts`}: Access the cacerts keystore\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    Use the `-storepasswd` command to change the password used to protect the\n+    integrity of the keystore contents. The new password is set by `-new` *arg*\n+    and must contain at least six characters.\n+\n+`-keypasswd`\n+:   The following are the available options for the `-keypasswd` command:\n+\n+    -   {`-alias` *alias*}: Alias name of the entry to process\n+\n+    -   \\[`-keypass` *old\\_keypass*\\]: Key password\n+\n+    -   \\[`-new` *new\\_keypass*\\]: New password\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   {`-storepass` *arg*}: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    Use the `-keypasswd` command to change the password (under which\n+    private\/secret keys identified by `-alias` are protected) from `-keypass`\n+    *old\\_keypass* to `-new` *new\\_keypass*. The password value must contain at\n+    least six characters.\n+\n+    If the `-keypass` option isn't provided at the command line and the\n+    `-keypass` password is different from the keystore password (`-storepass`\n+    *arg*), then the user is prompted for it.\n+\n+    If the `-new` option isn't provided at the command line, then the user is\n+    prompted for it.\n+\n+`-delete`\n+:   The following are the available options for the `-delete` command:\n+\n+    -   \\[`-alias` *alias*\\]: Alias name of the entry to process\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   {`-cacerts`}: Access the cacerts keystore\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    -   {`-protected`}: Password provided through a protected mechanism\n+\n+    Use the `-delete` command to delete the `-alias` *alias* entry from the\n+    keystore. When not provided at the command line, the user is prompted for\n+    the `alias`.\n+\n+`-changealias`\n+:   The following are the available options for the `-changealias` command:\n+\n+    -   {`-alias` *alias*}: Alias name of the entry to process\n+\n+    -   \\[`-destalias` *alias*\\]: Destination alias\n+\n+    -   \\[`-keypass` *arg*\\]: Key password\n+\n+    -   {`-keystore` *keystore*}: Keystore name\n+\n+    -   {`-cacerts`}: Access the cacerts keystore\n+\n+    -   \\[`-storepass` *arg*\\]: Keystore password\n+\n+    -   {`-storetype` *type*}: Keystore type\n+\n+    -   {`-providername` *name*}: Provider name\n+\n+    -   {`-addprovider` *name* \\[`-providerarg` *arg*\\]}: Add security provider\n+        by name (such as SunPKCS11) with an optional configure argument.\n+\n+    -   {`-providerclass` *class* \\[`-providerarg` *arg*\\]}: Add security\n+        provider by fully qualified class name with an optional configure\n+        argument.\n+\n+    -   {`-providerpath` *list*}: Provider classpath\n+\n+    -   {`-v`}: Verbose output\n+\n+    -   {`-protected`}: Password provided through a protected mechanism\n+\n+    Use the `-changealias` command to move an existing keystore entry from\n+    `-alias` *alias* to a new `-destalias` *alias*. If a destination alias is\n+    not provided, then the command prompts you for one. If the original entry\n+    is protected with an entry password, then the password can be supplied with\n+    the `-keypass` option. If a key password is not provided, then the\n+    `-storepass` (if provided) is attempted first. If the attempt fails, then\n+    the user is prompted for a password.\n+\n+## Commands for Displaying Security-related Information\n+\n+`-showinfo`\n+:   The following are the available options for the `-showinfo` command:\n+\n+    -   {`-tls`}: Displays TLS configuration information\n+\n+    -   {`-v`}: Verbose output\n+\n+    Use the `-showinfo` command to display various security-related\n+    information. The `-tls` option displays TLS configurations, such as\n+    the list of enabled protocols and cipher suites.\n+\n+## Commands for Displaying Program Version\n+\n+You can use `-version` to print the program version of `keytool`.\n+\n+## Commands for Displaying Help Information\n+\n+You can use `--help` to display a list of `keytool` commands or to display help\n+information about a specific `keytool` command.\n+\n+-   To display a list of `keytool` commands, enter:\n+\n+    >   `keytool --help`\n+\n+-   To display help information about a specific `keytool` command, enter:\n+\n+    >   `keytool -<command> --help`\n+\n+## Common Command Options\n+\n+The `-v` option can appear for all commands except `--help`. When the `-v`\n+option appears, it signifies verbose mode, which means that more information is\n+provided in the output.\n+\n+The `-J`*option* argument can appear for any command. When the `-J`*option* is\n+used, the specified *option* string is passed directly to the Java interpreter.\n+This option doesn't contain any spaces. It's useful for adjusting the execution\n+environment or memory usage. For a list of possible interpreter options, enter\n+`java -h` or `java -X` at the command line.\n+\n+These options can appear for all commands operating on a keystore:\n+\n+`-storetype` *storetype*\n+:   This qualifier specifies the type of keystore to be instantiated.\n+\n+`-keystore` *keystore*\n+:   The keystore location.\n+\n+    If the JKS `storetype` is used and a keystore file doesn't yet exist, then\n+    certain `keytool` commands can result in a new keystore file being created.\n+    For example, if `keytool -genkeypair` is called and the `-keystore` option\n+    isn't specified, the default keystore file named `.keystore` is created in\n+    the user's home directory if it doesn't already exist. Similarly, if the\n+    `-keystore ks_file` option is specified but `ks_file` doesn't exist, then\n+    it is created. For more information on the JKS `storetype`, see the\n+    **KeyStore Implementation** section in **KeyStore aliases**.\n+\n+    Note that the input stream from the `-keystore` option is passed to the\n+    `KeyStore.load` method. If `NONE` is specified as the URL, then a null\n+    stream is passed to the `KeyStore.load` method. `NONE` should be specified\n+    if the keystore isn't file-based. For example, when the keystore resides on\n+    a hardware token device.\n+\n+`-cacerts` *cacerts*\n+:   Operates on the *cacerts* keystore . This option is equivalent to\n+    `-keystore` *path\\_to\\_cacerts* `-storetype` *type\\_of\\_cacerts*. An error\n+    is reported if the `-keystore` or `-storetype` option is used with the\n+    `-cacerts` option.\n+\n+`-storepass` \\[`:env` \\| `:file` \\] *argument*\n+:   The password that is used to protect the integrity of the keystore.\n+\n+    If the modifier `env` or `file` isn't specified, then the password has the\n+    value *argument*, which must contain at least six characters. Otherwise,\n+    the password is retrieved as follows:\n+\n+    -   `env`: Retrieve the password from the environment variable named\n+        *argument*.\n+\n+    -   `file`: Retrieve the password from the file named *argument*.\n+\n+    **Note:** All other options that require passwords, such as `-keypass`,\n+    `-srckeypass`, `-destkeypass`, `-srcstorepass`, and `-deststorepass`,\n+    accept the `env` and `file` modifiers. Remember to separate the password\n+    option and the modifier with a colon (:).\n+\n+    The password must be provided to all commands that access the keystore\n+    contents. For such commands, when the `-storepass` option isn't provided at\n+    the command line, the user is prompted for it.\n+\n+    When retrieving information from the keystore, the password is optional. If\n+    a password is not specified, then the integrity of the retrieved\n+    information can't be verified and a warning is displayed.\n+\n+`-providername` *name*\n+:   Used to identify a cryptographic service provider's name when listed in the\n+    security properties file.\n+\n+`-addprovider` *name*\n+:   Used to add a security provider by name (such as SunPKCS11) .\n+\n+`-providerclass` *class*\n+:   Used to specify the name of a cryptographic service provider's master class\n+    file when the service provider isn't listed in the security properties\n+    file.\n+\n+`-providerpath` *list*\n+:   Used to specify the provider classpath.\n+\n+`-providerarg` *arg*\n+:   Used with the `-addprovider` or `-providerclass` option to represent an\n+    optional string input argument for the constructor of *class* name.\n+\n+`-protected=true`\\|`false`\n+:   Specify this value as `true` when a password must be specified by way of a\n+    protected authentication path, such as a dedicated PIN reader. Because\n+    there are two keystores involved in the `-importkeystore` command, the\n+    following two options, `-srcprotected` and `-destprotected`, are provided\n+    for the source keystore and the destination keystore respectively.\n+\n+`-ext` {*name*{`:critical`} {`=`*value*}}\n+:   Denotes an X.509 certificate extension. The option can be used in\n+    `-genkeypair` and `-gencert` to embed extensions into the generated\n+    certificate, or in `-certreq` to show what extensions are requested in the\n+    certificate request. The option can appear multiple times. The *name*\n+    argument can be a supported extension name (see [Supported Named\n+    Extensions]) or an arbitrary OID number. The *value* argument, when\n+    provided, denotes the argument for the extension. When *value* is omitted,\n+    the default value of the extension or the extension itself requires no\n+    argument. The `:critical` modifier, when provided, means the extension's\n+    `isCritical` attribute is `true`; otherwise, it is `false`. You can use\n+    `:c` in place of `:critical`.\n+\n+`-conf` *file*\n+:   Specifies a pre-configured options file.\n+\n+## Pre-configured options file\n+\n+A pre-configured options file is a Java properties file that can be specified\n+with the `-conf` option. Each property represents the default option(s) for\n+a keytool command using \"keytool.*command_name*\" as the property name. A\n+special property named \"keytool.all\" represents the default option(s) applied\n+to all commands. A property value can include `${prop}` which will be expanded\n+to the system property associated with it. If an option value includes white\n+spaces inside, it should be surrounded by quotation marks (\" or '). All\n+property names must be in lower case.\n+\n+When `keytool` is launched with a pre-configured options file, the value for\n+\"keytool.all\" (if it exists) is prepended to the `keytool` command line first,\n+with the value for the command name (if it exists) comes next, and the existing\n+options on the command line at last. For a single-valued option, this allows\n+the property for a specific command to override the \"keytool.all\" value,\n+and the value specified on the command line to override both. For\n+multiple-valued options, all of them will be used by `keytool`.\n+\n+For example, given the following file named `preconfig`:\n+```\n+    # A tiny pre-configured options file\n+    keytool.all = -keystore ${user.home}\/ks\n+    keytool.list = -v\n+    keytool.genkeypair = -keyalg rsa\n+```\n+\n+`keytool -conf preconfig -list` is identical to\n+\n+> `keytool -keystore ~\/ks -v -list`\n+\n+`keytool -conf preconfig -genkeypair -alias me` is identical to\n+\n+> `keytool -keystore ~\/ks -keyalg rsa -genkeypair -alias me`\n+\n+`keytool -conf preconfig -genkeypair -alias you -keyalg ec` is identical to\n+\n+> `keytool -keystore ~\/ks -keyalg rsa -genkeypair -alias you -keyalg ec`\n+\n+which is equivalent to\n+\n+> `keytool -keystore ~\/ks -genkeypair -alias you -keyalg ec`\n+\n+because `-keyalg` is a single-valued option and the `ec` value specified\n+on the command line overrides the preconfigured options file.\n+\n+## Examples of Option Values\n+\n+The following examples show the defaults for various option values:\n+\n+```\n+-alias \"mykey\"\n+\n+-keysize\n+    2048 (when using -genkeypair and -keyalg is \"DSA\")\n+    3072 (when using -genkeypair and -keyalg is \"RSA\", \"RSASSA-PSS\", or \"DH\")\n+    384 (when using -genkeypair and -keyalg is \"EC\")\n+    56 (when using -genseckey and -keyalg is \"DES\")\n+    168 (when using -genseckey and -keyalg is \"DESede\")\n+\n+-groupname\n+    ed25519 (when using -genkeypair and -keyalg is \"EdDSA\", key size is 255)\n+    x25519 (when using -genkeypair and -keyalg is \"XDH\", key size is 255)\n+\n+-validity 90\n+\n+-keystore <the file named .keystore in the user's home directory>\n+\n+-destkeystore <the file named .keystore in the user's home directory>\n+\n+-storetype <the value of the \"keystore.type\" property in the\n+    security properties file, which is returned by the static\n+    getDefaultType method in java.security.KeyStore>\n+\n+-file\n+    stdin (if reading)\n+    stdout (if writing)\n+\n+-protected false\n+```\n+\n+When generating a certificate or a certificate request, the default signature\n+algorithm (`-sigalg` option) is derived from the algorithm of the underlying\n+private key to provide an appropriate level of security strength as follows:\n+\n+Table: Default Signature Algorithms\n+\n+keyalg      key size  default sigalg\n+-------     --------  --------------\n+DSA         any size  SHA256withDSA\n+RSA         \\< 624    SHA256withRSA (key size is too small for using SHA-384)\n+            \\<= 7680  SHA384withRSA\n+            \\> 7680   SHA512withRSA\n+EC          \\< 512    SHA384withECDSA\n+            \\>= 512   SHA512withECDSA\n+RSASSA-PSS  \\< 624    RSASSA-PSS (with SHA-256, key size is too small for\n+                      using SHA-384)\n+            \\<= 7680  RSASSA-PSS (with SHA-384)\n+            \\> 7680   RSASSA-PSS (with SHA-512)\n+EdDSA       255       Ed25519\n+            448       Ed448\n+Ed25519     255       Ed25519\n+Ed448       448       Ed448\n+-------     --------  --------------\n+\n+* The key size, measured in bits, corresponds to the size of the private key.\n+This size is determined by the value of the `-keysize` or `-groupname` options\n+or the value derived from a default setting.\n+\n+* An RSASSA-PSS signature algorithm uses a `MessageDigest`\n+algorithm as its hash and MGF1 algorithms.\n+\n+* If neither a default `-keysize` or `-groupname` is defined for an algorithm,\n+the security provider will choose a default setting.\n+\n+**Note:**\n+\n+To improve out of the box security, default keysize, groupname, and signature\n+algorithm names are periodically updated to stronger values with each release\n+of the JDK. If interoperability with older releases of the JDK is important,\n+make sure that the defaults are supported by those releases. Alternatively,\n+you can use the `-keysize`, `-groupname`, or `-sigalg` options to override\n+the default values at your own risk.\n+\n+## Supported Named Extensions\n+\n+The `keytool` command supports these named extensions. The names aren't\n+case-sensitive.\n+\n+`BC` or `BasicConstraints`\n+:   Values:\n+\n+    The full form is `ca:`{`true`\\|`false`}\\[`,pathlen:`*len*\\] or *len*, which\n+    is short for `ca:true,pathlen:`*len*.\n+\n+    When *len* is omitted, the resulting value is `ca:true`.\n+\n+`KU` or `KeyUsage`\n+:   Values:\n+\n+    *usage*(`,` *usage*)\\*\n+\n+    *usage* can be one of the following:\n+\n+    -   `digitalSignature`\n+\n+    -   `nonRepudiation` (`contentCommitment`)\n+\n+    -   `keyEncipherment`\n+\n+    -   `dataEncipherment`\n+\n+    -   `keyAgreement`\n+\n+    -   `keyCertSign`\n+\n+    -   `cRLSign`\n+\n+    -   `encipherOnly`\n+\n+    -   `decipherOnly`\n+\n+    Provided there is no ambiguity, the *usage* argument can be abbreviated\n+    with the first few letters (such as `dig` for `digitalSignature`) or in\n+    camel-case style (such as `dS` for `digitalSignature` or `cRLS` for\n+    `cRLSign`). The *usage* values are case-sensitive.\n+\n+`EKU` or `ExtendedKeyUsage`\n+:   Values:\n+\n+    *usage*(`,` *usage*)\\*\n+\n+    *usage* can be one of the following:\n+\n+    -   `anyExtendedKeyUsage`\n+\n+    -   `serverAuth`\n+\n+    -   `clientAuth`\n+\n+    -   `codeSigning`\n+\n+    -   `emailProtection`\n+\n+    -   `timeStamping`\n+\n+    -   `OCSPSigning`\n+\n+    -   Any OID string\n+\n+    Provided there is no ambiguity, the *usage* argument can be abbreviated\n+    with the first few letters or in camel-case style. The *usage* values are\n+    case-sensitive.\n+\n+`SAN` or `SubjectAlternativeName`\n+:   Values:\n+\n+    *type*`:`*value*(`,` *type*`:`*value*)\\*\n+\n+    *type* can be one of the following:\n+\n+    -   `EMAIL`\n+\n+    -   `URI`\n+\n+    -   `DNS`\n+\n+    -   `IP`\n+\n+    -   `OID`\n+\n+    The *value* argument is the string format value for the *type*.\n+\n+`IAN` or `IssuerAlternativeName`\n+:   Values:\n+\n+    Same as `SAN` or `SubjectAlternativeName`.\n+\n+`SIA` or `SubjectInfoAccess`\n+:   Values:\n+\n+    *method*`:`*location-type*`:`*location-value*(`,`\n+    *method*`:`*location-type*`:`*location-value*)\\*\n+\n+    *method* can be one of the following:\n+\n+    -   `timeStamping`\n+\n+    -   `caRepository`\n+\n+    -   Any OID\n+\n+    The *location-type* and *location-value* arguments can be any\n+    *type*`:`*value* supported by the `SubjectAlternativeName` extension.\n+\n+`AIA` or `AuthorityInfoAccess`\n+:   Values:\n+\n+    Same as `SIA` or `SubjectInfoAccess`.\n+\n+    The *method* argument can be one of the following:\n+\n+    -   `ocsp`\n+\n+    -   `caIssuers`\n+\n+    -   Any OID\n+\n+When *name* is OID, the value is the hexadecimal dumped Definite Encoding Rules\n+(DER) encoding of the `extnValue` for the extension excluding the OCTET STRING\n+type and length bytes. Other than standard hexadecimal numbers (0-9, a-f, A-F),\n+any extra characters are ignored in the HEX string. Therefore, both 01:02:03:04\n+and 01020304 are accepted as identical values. When there is no value, the\n+extension has an empty value field.\n+\n+A special name `honored`, used only in `-gencert`, denotes how the extensions\n+included in the certificate request should be honored. The value for this name\n+is a comma-separated list of `all` (all requested extensions are honored),\n+*name*{`:`\\[`critical`\\|`non-critical`\\]} (the named extension is honored, but\n+it uses a different `isCritical` attribute), and `-name` (used with `all`,\n+denotes an exception). Requested extensions aren't honored by default.\n+\n+If, besides the`-ext honored` option, another named or OID `-ext` option is\n+provided, this extension is added to those already honored. However, if this\n+name (or OID) also appears in the honored value, then its value and criticality\n+override that in the request. If an extension of the same type is provided\n+multiple times through either a name or an OID, only the last extension is\n+used.\n+\n+The `subjectKeyIdentifier` extension is always created. For non-self-signed\n+certificates, the `authorityKeyIdentifier` is created.\n+\n+**CAUTION:**\n+\n+Users should be aware that some combinations of extensions (and other\n+certificate fields) may not conform to the Internet standard. See [Certificate\n+Conformance Warning].\n+\n+## Examples of Tasks in Creating a keystore\n+\n+The following examples describe the sequence actions in creating a keystore for\n+managing public\/private key pairs and certificates from trusted entities.\n+\n+-   [Generating the Key Pair]\n+\n+-   [Requesting a Signed Certificate from a CA]\n+\n+-   [Importing a Certificate for the CA]\n+\n+-   [Importing the Certificate Reply from the CA]\n+\n+-   [Exporting a Certificate That Authenticates the Public Key]\n+\n+-   [Importing the Keystore]\n+\n+-   [Generating Certificates for an SSL Server]\n+\n+## Generating the Key Pair\n+\n+Create a keystore and then generate the key pair.\n+\n+You can enter the command as a single line such as the following:\n+\n+>   `keytool -genkeypair -dname \"cn=myname, ou=mygroup, o=mycompany,\n+    c=mycountry\" -alias business -keyalg rsa -keypass` *password* `-keystore\n+    \/working\/mykeystore -storepass password -validity 180`\n+\n+The command creates the keystore named `mykeystore` in the working directory\n+(provided it doesn't already exist), and assigns it the password specified by\n+`-keypass`. It generates a public\/private key pair for the entity whose\n+distinguished name is `myname`, `mygroup`, `mycompany`, and a two-letter\n+country code of `mycountry`. It uses the RSA key generation algorithm\n+to create the keys; both are 3072 bits.\n+\n+The command uses the default SHA384withRSA signature algorithm to create a\n+self-signed certificate that includes the public key and the distinguished name\n+information. The certificate is valid for 180 days, and is associated with the\n+private key in a keystore entry referred to by `-alias business`. The private\n+key is assigned the password specified by `-keypass`.\n+\n+The command is significantly shorter when the option defaults are accepted. In\n+this case, only `-keyalg` is required, and the defaults are used for unspecified\n+options that have default values. You are prompted for any required values. You\n+could have the following:\n+\n+>   `keytool -genkeypair -keyalg rsa`\n+\n+In this case, a keystore entry with the alias `mykey` is created, with a newly\n+generated key pair and a certificate that is valid for 90 days. This entry is\n+placed in your home directory in a keystore named `.keystore` . `.keystore` is\n+created if it doesn't already exist. You are prompted for the distinguished\n+name information, the keystore password, and the private key password.\n+\n+**Note:**\n+\n+The rest of the examples assume that you responded to the prompts with values\n+equal to those specified in the first `-genkeypair` command. For example, a\n+distinguished name of\n+`cn=`*myname*`, ou=`*mygroup*`, o=`*mycompany*`, c=`*mycountry*).\n+\n+## Requesting a Signed Certificate from a CA\n+\n+**Note:**\n+\n+Generating the key pair created a self-signed certificate; however, a\n+certificate is more likely to be trusted by others when it is signed by a CA.\n+\n+To get a CA signature, complete the following process:\n+\n+1.  Generate a CSR:\n+\n+    >   `keytool -certreq -file myname.csr`\n+\n+    This creates a CSR for the entity identified by the default alias `mykey`\n+    and puts the request in the file named `myname.csr`.\n+\n+2.  Submit `myname.csr` to a CA, such as DigiCert.\n+\n+The CA authenticates you, the requestor (usually offline), and returns a\n+certificate, signed by them, authenticating your public key. In some cases, the\n+CA returns a chain of certificates, each one authenticating the public key of\n+the signer of the previous certificate in the chain.\n+\n+## Importing a Certificate for the CA\n+\n+To import a certificate for the CA, complete the following process:\n+\n+1.  Before you import the certificate reply from a CA, you need one or more\n+    trusted certificates either in your keystore or in the `cacerts` keystore\n+    file. See `-importcert` in **Commands**.\n+\n+    -   If the certificate reply is a certificate chain, then you need the top\n+        certificate of the chain. The root CA certificate that authenticates\n+        the public key of the CA.\n+\n+    -   If the certificate reply is a single certificate, then you need a\n+        certificate for the issuing CA (the one that signed it). If that\n+        certificate isn't self-signed, then you need a certificate for its\n+        signer, and so on, up to a self-signed root CA certificate.\n+\n+    The `cacerts` keystore ships with a set of root certificates issued by the\n+    CAs of [the Oracle Java Root Certificate program](\n+    http:\/\/www.oracle.com\/technetwork\/java\/javase\/javasecarootcertsprogram-1876540.html).\n+    If you request a signed certificate from a CA, and a certificate\n+    authenticating that CA's public key hasn't been added to `cacerts`, then\n+    you must import a certificate from that CA as a trusted certificate.\n+\n+    A certificate from a CA is usually self-signed or signed by another CA. If\n+    it is signed by another CA, you need a certificate that authenticates that\n+    CA's public key.\n+\n+    For example, you have obtained a *X*`.cer` file from a company that is a CA\n+    and the file is supposed to be a self-signed certificate that authenticates\n+    that CA's public key. Before you import it as a trusted certificate, you\n+    should ensure that the certificate is valid by:\n+\n+    1.  Viewing it with the `keytool -printcert` command or the\n+        `keytool -importcert` command without using the `-noprompt` option.\n+        Make sure that the displayed certificate fingerprints match the\n+        expected fingerprints.\n+\n+    2.  Calling the person who sent the certificate, and comparing the\n+        fingerprints that you see with the ones that they show or that a secure\n+        public key repository shows.\n+\n+    Only when the fingerprints are equal is it assured that the certificate\n+    wasn't replaced in transit with somebody else's certificate (such as an\n+    attacker's certificate). If such an attack takes place, and you didn't\n+    check the certificate before you imported it, then you would be trusting\n+    anything that the attacker signed.\n+\n+2.  Replace the self-signed certificate with a certificate chain, where each\n+    certificate in the chain authenticates the public key of the signer of the\n+    previous certificate in the chain, up to a root CA.\n+\n+    If you trust that the certificate is valid, then you can add it to your\n+    keystore by entering the following command:\n+\n+    >   `keytool -importcert -alias` *alias* `-file *X*`.cer`\n+\n+    This command creates a trusted certificate entry in the keystore from the\n+    data in the CA certificate file and assigns the values of the *alias* to\n+    the entry.\n+\n+## Importing the Certificate Reply from the CA\n+\n+After you import a certificate that authenticates the public key of the CA that\n+you submitted your certificate signing request to (or there is already such a\n+certificate in the `cacerts` file), you can import the certificate reply and\n+replace your self-signed certificate with a certificate chain.\n+\n+The certificate chain is one of the following:\n+\n+-   Returned by the CA when the CA reply is a chain.\n+\n+-   Constructed when the CA reply is a single certificate. This certificate\n+    chain is constructed by using the certificate reply and trusted\n+    certificates available either in the keystore where you import the reply or\n+    in the `cacerts` keystore file.\n+\n+For example, if you sent your certificate signing request to DigiCert, then you\n+can import their reply by entering the following command:\n+\n+**Note:**\n+\n+In this example, the returned certificate is named `DCmyname.cer`.\n+\n+>   `keytool -importcert -trustcacerts -file DCmyname.cer`\n+\n+## Exporting a Certificate That Authenticates the Public Key\n+\n+**Note:**\n+\n+If you used the `jarsigner` command to sign a Java Archive (JAR) file, then\n+clients that use the file will want to authenticate your signature.\n+\n+One way that clients can authenticate you is by importing your public key\n+certificate into their keystore as a trusted entry. You can then export the\n+certificate and supply it to your clients.\n+\n+For example:\n+\n+1.  Copy your certificate to a file named `myname.cer` by entering the\n+    following command:\n+\n+    **Note:**\n+\n+    In this example, the entry has an alias of `mykey`.\n+\n+    >   `keytool -exportcert -alias mykey -file myname.cer`\n+\n+2.  With the certificate and the signed JAR file, a client can use the\n+    `jarsigner` command to authenticate your signature.\n+\n+## Importing the Keystore\n+\n+Use the `importkeystore` command to import an entire keystore into another\n+keystore. This imports all entries from the source keystore, including keys and\n+certificates, to the destination keystore with a single command. You can use\n+this command to import entries from a different type of keystore. During the\n+import, all new entries in the destination keystore will have the same alias\n+names and protection passwords (for secret keys and private keys). If the\n+`keytool` command can't recover the private keys or secret keys from the source\n+keystore, then it prompts you for a password. If it detects alias duplication,\n+then it asks you for a new alias, and you can specify a new alias or simply\n+allow the `keytool` command to overwrite the existing one.\n+\n+For example, import entries from a typical JKS type keystore `key.jks` into a\n+PKCS \\#11 type hardware-based keystore, by entering the following command:\n+\n+>   `keytool -importkeystore -srckeystore key.jks -destkeystore NONE\n+    -srcstoretype JKS -deststoretype PKCS11 -srcstorepass` *password*\n+    `-deststorepass` *password*\n+\n+The `importkeystore` command can also be used to import a single entry from a\n+source keystore to a destination keystore. In this case, besides the options\n+you used in the previous example, you need to specify the alias you want to\n+import. With the `-srcalias` option specified, you can also specify the\n+destination alias name, protection password for a secret or private key, and\n+the destination protection password you want as follows:\n+\n+>   `keytool -importkeystore -srckeystore key.jks -destkeystore NONE\n+    -srcstoretype JKS -deststoretype PKCS11 -srcstorepass` *password*\n+    `-deststorepass` *password* `-srcalias myprivatekey -destalias\n+    myoldprivatekey -srckeypass` *password* `-destkeypass` *password*\n+    `-noprompt`\n+\n+## Generating Certificates for an SSL Server\n+\n+The following are `keytool` commands used to generate key pairs and\n+certificates for three entities:\n+\n+-   Root CA (`root`)\n+\n+-   Intermediate CA (`ca`)\n+\n+-   SSL server (`server`)\n+\n+Ensure that you store all the certificates in the same keystore.\n+\n+```\n+keytool -genkeypair -keystore root.jks -alias root -ext bc:c -keyalg rsa\n+keytool -genkeypair -keystore ca.jks -alias ca -ext bc:c -keyalg rsa\n+keytool -genkeypair -keystore server.jks -alias server -keyalg rsa\n+\n+keytool -keystore root.jks -alias root -exportcert -rfc > root.pem\n+\n+keytool -storepass password -keystore ca.jks -certreq -alias ca |\n+    keytool -storepass password -keystore root.jks\n+    -gencert -alias root -ext BC=0 -rfc > ca.pem\n+keytool -keystore ca.jks -importcert -alias ca -file ca.pem\n+\n+keytool -storepass password -keystore server.jks -certreq -alias server |\n+    keytool -storepass password -keystore ca.jks -gencert -alias ca\n+    -ext ku:c=dig,kE -rfc > server.pem\n+cat root.pem ca.pem server.pem |\n+    keytool -keystore server.jks -importcert -alias server\n+\n+```\n+\n+## Terms\n+\n+Keystore\n+:   A keystore is a storage facility for cryptographic keys and certificates.\n+\n+Keystore entries\n+:   Keystores can have different types of entries. The two most applicable\n+    entry types for the `keytool` command include the following:\n+\n+    Key entries: Each entry holds very sensitive cryptographic key information,\n+    which is stored in a protected format to prevent unauthorized access.\n+    Typically, a key stored in this type of entry is a secret key, or a private\n+    key accompanied by the certificate chain for the corresponding public key.\n+    See **Certificate Chains**. The `keytool` command can handle both types of\n+    entries, while the `jarsigner` tool only handles the latter type of entry,\n+    that is private keys and their associated certificate chains.\n+\n+    Trusted certificate entries: Each entry contains a single public key\n+    certificate that belongs to another party. The entry is called a trusted\n+    certificate because the keystore owner trusts that the public key in the\n+    certificate belongs to the identity identified by the subject (owner) of\n+    the certificate. The issuer of the certificate vouches for this, by signing\n+    the certificate.\n+\n+Keystore aliases\n+:   All keystore entries (key and trusted certificate entries) are accessed by\n+    way of unique aliases.\n+\n+    An alias is specified when you add an entity to the keystore with the\n+    `-genseckey` command to generate a secret key, the `-genkeypair` command to\n+    generate a key pair (public and private key), or the `-importcert` command\n+    to add a certificate or certificate chain to the list of trusted\n+    certificates. Subsequent `keytool` commands must use this same alias to\n+    refer to the entity.\n+\n+    For example, you can use the alias `duke` to generate a new public\/private\n+    key pair and wrap the public key into a self-signed certificate with the\n+    following command. See **Certificate Chains**.\n+\n+    >   `keytool -genkeypair -alias duke -keyalg rsa -keypass` *passwd*\n+\n+    This example specifies an initial *passwd* required by subsequent commands\n+    to access the private key associated with the alias `duke`. If you later\n+    want to change Duke's private key password, use a command such as the\n+    following:\n+\n+    >   `keytool -keypasswd -alias duke -keypass` *passwd* `-new` *newpasswd*\n+\n+    This changes the initial *passwd* to *newpasswd*. A password shouldn't be\n+    specified on a command line or in a script unless it is for testing\n+    purposes, or you are on a secure system. If you don't specify a required\n+    password option on a command line, then you are prompted for it.\n+\n+Keystore implementation\n+:   The `KeyStore` class provided in the `java.security` package supplies\n+    well-defined interfaces to access and modify the information in a keystore.\n+    It is possible for there to be multiple different concrete implementations,\n+    where each implementation is that for a particular type of keystore.\n+\n+    Currently, two command-line tools (`keytool` and `jarsigner`) make use of\n+    keystore implementations. Because the `KeyStore` class is `public`, users\n+    can write additional security applications that use it.\n+\n+    In JDK 9 and later, the default keystore implementation is `PKCS12`. This\n+    is a cross platform keystore based on the RSA PKCS12 Personal Information\n+    Exchange Syntax Standard. This standard is primarily meant for storing or\n+    transporting a user's private keys, certificates, and miscellaneous\n+    secrets. There is another built-in implementation, provided by Oracle. It\n+    implements the keystore as a file with a proprietary keystore type (format)\n+    named `JKS`. It protects each private key with its individual password, and\n+    also protects the integrity of the entire keystore with a (possibly\n+    different) password.\n+\n+    Keystore implementations are provider-based. More specifically, the\n+    application interfaces supplied by `KeyStore` are implemented in terms of a\n+    Service Provider Interface (SPI). That is, there is a corresponding\n+    abstract `KeystoreSpi` class, also in the `java.security package`, which\n+    defines the Service Provider Interface methods that providers must\n+    implement. The term *provider* refers to a package or a set of packages\n+    that supply a concrete implementation of a subset of services that can be\n+    accessed by the Java Security API. To provide a keystore implementation,\n+    clients must implement a provider and supply a `KeystoreSpi` subclass\n+    implementation, as described in Steps to Implement and Integrate a\n+    Provider.\n+\n+    Applications can choose different types of keystore implementations from\n+    different providers, using the `getInstance` factory method supplied in the\n+    `KeyStore` class. A keystore type defines the storage and data format of\n+    the keystore information, and the algorithms used to protect private\/secret\n+    keys in the keystore and the integrity of the keystore. Keystore\n+    implementations of different types aren't compatible.\n+\n+    The `keytool` command works on any file-based keystore implementation. It\n+    treats the keystore location that is passed to it at the command line as a\n+    file name and converts it to a `FileInputStream`, from which it loads the\n+    keystore information.)The `jarsigner` commands can read a keystore from any\n+    location that can be specified with a URL.\n+\n+    For `keytool` and `jarsigner`, you can specify a keystore type at the\n+    command line, with the `-storetype` option.\n+\n+    If you don't explicitly specify a keystore type, then the tools choose a\n+    keystore implementation based on the value of the `keystore.type` property\n+    specified in the security properties file. The security properties file is\n+    called `java.security`, and resides in the security properties directory:\n+\n+    -   **Linux and macOS:** `java.home\/lib\/security`\n+\n+    -   **Windows:** `java.home\\lib\\security`\n+\n+    Each tool gets the `keystore.type` value and then examines all the\n+    currently installed providers until it finds one that implements a\n+    keystores of that type. It then uses the keystore implementation from that\n+    provider.The `KeyStore` class defines a static method named\n+    `getDefaultType` that lets applications retrieve the value of the\n+    `keystore.type` property. The following line of code creates an instance of\n+    the default keystore type as specified in the `keystore.type` property:\n+\n+    >   `KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());`\n+\n+    The default keystore type is `pkcs12`, which is a cross-platform keystore\n+    based on the RSA PKCS12 Personal Information Exchange Syntax Standard. This\n+    is specified by the following line in the security properties file:\n+\n+    >   `keystore.type=pkcs12`\n+\n+    To have the tools utilize a keystore implementation other than the default,\n+    you can change that line to specify a different keystore type. For example,\n+    if you want to use the Oracle's `jks` keystore implementation, then change\n+    the line to the following:\n+\n+    >   `keystore.type=jks`\n+\n+    **Note:**\n+\n+    Case doesn't matter in keystore type designations. For example, `JKS` would\n+    be considered the same as `jks`.\n+\n+Certificate\n+:   A certificate (or public-key certificate) is a digitally signed statement\n+    from one entity (the issuer), saying that the public key and some other\n+    information of another entity (the subject) has some specific value. The\n+    following terms are related to certificates:\n+\n+    -   Public Keys: These are numbers associated with a particular entity, and\n+        are intended to be known to everyone who needs to have trusted\n+        interactions with that entity. Public keys are used to verify\n+        signatures.\n+\n+    -   Digitally Signed: If some data is digitally signed, then it is stored\n+        with the identity of an entity and a signature that proves that entity\n+        knows about the data. The data is rendered unforgeable by signing with\n+        the entity's private key.\n+\n+    -   Identity: A known way of addressing an entity. In some systems, the\n+        identity is the public key, and in others it can be anything from an\n+        Oracle Solaris UID to an email address to an X.509 distinguished name.\n+\n+    -   Signature: A signature is computed over some data using the private key\n+        of an entity. The signer, which in the case of a certificate is also\n+        known as the issuer.\n+\n+    -   Private Keys: These are numbers, each of which is supposed to be known\n+        only to the particular entity whose private key it is (that is, it is\n+        supposed to be kept secret). Private and public keys exist in pairs in\n+        all public key cryptography systems (also referred to as public key\n+        crypto systems). In a typical public key crypto system, such as DSA, a\n+        private key corresponds to exactly one public key. Private keys are\n+        used to compute signatures.\n+\n+    -   Entity: An entity is a person, organization, program, computer,\n+        business, bank, or something else you are trusting to some degree.\n+\n+    Public key cryptography requires access to users' public keys. In a\n+    large-scale networked environment, it is impossible to guarantee that prior\n+    relationships between communicating entities were established or that a\n+    trusted repository exists with all used public keys. Certificates were\n+    invented as a solution to this public key distribution problem. Now a\n+    Certification Authority (CA) can act as a trusted third party. CAs are\n+    entities such as businesses that are trusted to sign (issue) certificates\n+    for other entities. It is assumed that CAs only create valid and reliable\n+    certificates because they are bound by legal agreements. There are many\n+    public Certification Authorities, such as DigiCert, Comodo, Entrust, and so\n+    on.\n+\n+    You can also run your own Certification Authority using products such as\n+    Microsoft Certificate Server or the Entrust CA product for your\n+    organization. With the `keytool` command, it is possible to display,\n+    import, and export certificates. It is also possible to generate\n+    self-signed certificates.\n+\n+    The `keytool` command currently handles X.509 certificates.\n+\n+X.509 Certificates\n+:   The X.509 standard defines what information can go into a certificate and\n+    describes how to write it down (the data format). All the data in a\n+    certificate is encoded with two related standards called ASN.1\/DER.\n+    Abstract Syntax Notation 1 describes data. The Definite Encoding Rules\n+    describe a single way to store and transfer that data.\n+\n+    All X.509 certificates have the following data, in addition to the\n+    signature:\n+\n+    -   Version: This identifies which version of the X.509 standard applies to\n+        this certificate, which affects what information can be specified in\n+        it. Thus far, three versions are defined. The `keytool` command can\n+        import and export v1, v2, and v3 certificates. It generates v3\n+        certificates.\n+\n+        -   X.509 Version 1 has been available since 1988, is widely deployed,\n+            and is the most generic.\n+\n+        -   X.509 Version 2 introduced the concept of subject and issuer unique\n+            identifiers to handle the possibility of reuse of subject or issuer\n+            names over time. Most certificate profile documents strongly\n+            recommend that names not be reused and that certificates shouldn't\n+            make use of unique identifiers. Version 2 certificates aren't\n+            widely used.\n+\n+        -   X.509 Version 3 is the most recent (1996) and supports the notion\n+            of extensions where anyone can define an extension and include it\n+            in the certificate. Some common extensions are: KeyUsage (limits\n+            the use of the keys to particular purposes such as `signing-only`)\n+            and AlternativeNames (allows other identities to also be associated\n+            with this public key, for example. DNS names, email addresses, IP\n+            addresses). Extensions can be marked critical to indicate that the\n+            extension should be checked and enforced or used. For example, if a\n+            certificate has the KeyUsage extension marked critical and set to\n+            `keyCertSign`, then when this certificate is presented during SSL\n+            communication, it should be rejected because the certificate\n+            extension indicates that the associated private key should only be\n+            used for signing certificates and not for SSL use.\n+\n+    -   Serial number: The entity that created the certificate is responsible\n+        for assigning it a serial number to distinguish it from other\n+        certificates it issues. This information is used in numerous ways. For\n+        example, when a certificate is revoked its serial number is placed in a\n+        Certificate Revocation List (CRL).\n+\n+    -   Signature algorithm identifier: This identifies the algorithm used by\n+        the CA to sign the certificate.\n+\n+    -   Issuer name: The X.500 Distinguished Name of the entity that signed the\n+        certificate. This is typically a CA. Using this certificate implies\n+        trusting the entity that signed this certificate. In some cases, such\n+        as root or top-level CA certificates, the issuer signs its own\n+        certificate.\n+\n+    -   Validity period: Each certificate is valid only for a limited amount of\n+        time. This period is described by a start date and time and an end date\n+        and time, and can be as short as a few seconds or almost as long as a\n+        century. The validity period chosen depends on a number of factors,\n+        such as the strength of the private key used to sign the certificate,\n+        or the amount one is willing to pay for a certificate. This is the\n+        expected period that entities can rely on the public value, when the\n+        associated private key has not been compromised.\n+\n+    -   Subject name: The name of the entity whose public key the certificate\n+        identifies. This name uses the X.500 standard, so it is intended to be\n+        unique across the Internet. This is the X.500 Distinguished Name (DN)\n+        of the entity. For example,\n+\n+        >   `CN=Java Duke, OU=Java Software Division, O=Oracle Corporation,\n+            C=US`\n+\n+        These refer to the subject's common name (CN), organizational unit\n+        (OU), organization (O), and country (C).\n+\n+    -   Subject public key information: This is the public key of the entity\n+        being named with an algorithm identifier that specifies which public\n+        key crypto system this key belongs to and any associated key\n+        parameters.\n+\n+Certificate Chains\n+:   The `keytool` command can create and manage keystore key entries that each\n+    contain a private key and an associated certificate chain. The first\n+    certificate in the chain contains the public key that corresponds to the\n+    private key.\n+\n+    When keys are first generated, the chain usually starts off containing a single\n+    element, a self-signed certificate. See -genkeypair in **Commands**. A\n+    self-signed certificate is one for which the issuer (signer) is the same as\n+    the subject. The subject is the entity whose public key is being\n+    authenticated by the certificate. When the `-genkeypair` command is called\n+    to generate a new public\/private key pair, it also wraps the public key\n+    into a self-signed certificate (unless the `-signer` option is specified).\n+\n+    Later, after a Certificate Signing Request (CSR) was generated with the\n+    `-certreq` command and sent to a Certification Authority (CA), the response\n+    from the CA is imported with `-importcert`, and the self-signed certificate\n+    is replaced by a chain of certificates. At the bottom of the chain is the\n+    certificate (reply) issued by the CA authenticating the subject's public\n+    key. The next certificate in the chain is one that authenticates the CA's\n+    public key.\n+\n+    In many cases, this is a self-signed certificate, which is a certificate\n+    from the CA authenticating its own public key, and the last certificate in\n+    the chain. In other cases, the CA might return a chain of certificates. In\n+    this case, the bottom certificate in the chain is the same (a certificate\n+    signed by the CA, authenticating the public key of the key entry), but the\n+    second certificate in the chain is a certificate signed by a different CA\n+    that authenticates the public key of the CA you sent the CSR to. The next\n+    certificate in the chain is a certificate that authenticates the second\n+    CA's key, and so on, until a self-signed root certificate is reached. Each\n+    certificate in the chain (after the first) authenticates the public key of\n+    the signer of the previous certificate in the chain.\n+\n+    Many CAs only return the issued certificate, with no supporting chain,\n+    especially when there is a flat hierarchy (no intermediates CAs). In this\n+    case, the certificate chain must be established from trusted certificate\n+    information already stored in the keystore.\n+\n+    A different reply format (defined by the PKCS \\#7 standard) includes the\n+    supporting certificate chain in addition to the issued certificate. Both\n+    reply formats can be handled by the `keytool` command.\n+\n+    The top-level (root) CA certificate is self-signed. However, the trust into\n+    the root's public key doesn't come from the root certificate itself, but\n+    from other sources such as a newspaper. This is because anybody could\n+    generate a self-signed certificate with the distinguished name of, for\n+    example, the DigiCert root CA. The root CA public key is widely known. The\n+    only reason it is stored in a certificate is because this is the format\n+    understood by most tools, so the certificate in this case is only used as a\n+    vehicle to transport the root CA's public key. Before you add the root CA\n+    certificate to your keystore, you should view it with the `-printcert`\n+    option and compare the displayed fingerprint with the well-known\n+    fingerprint obtained from a newspaper, the root CA's Web page, and so on.\n+\n+cacerts Certificates File\n+:   A certificates file named `cacerts` resides in the security properties\n+    directory:\n+\n+    -   **Linux and macOS:** *JAVA\\_HOME*`\/lib\/security`\n+\n+    -   **Windows:** *JAVA\\_HOME*`\\lib\\security`\n+\n+    The `cacerts` file represents a system-wide keystore with CA certificates.\n+    System administrators can configure and manage that file with the `keytool`\n+    command by specifying `jks` as the keystore type. The `cacerts` keystore\n+    file ships with a default set of root CA certificates. For Linux, macOS, and\n+    Windows, you can list the default certificates with the following command:\n+\n+    >   `keytool -list -cacerts`\n+\n+    The initial password of the `cacerts` keystore file is `changeit`. System\n+    administrators should change that password and the default access\n+    permission of that file upon installing the SDK.\n+\n+    **Note:**\n+\n+    It is important to verify your `cacerts` file. Because you trust the CAs in\n+    the `cacerts` file as entities for signing and issuing certificates to\n+    other entities, you must manage the `cacerts` file carefully. The `cacerts`\n+    file should contain only certificates of the CAs you trust. It is your\n+    responsibility to verify the trusted root CA certificates bundled in the\n+    `cacerts` file and make your own trust decisions.\n+\n+    To remove an untrusted CA certificate from the `cacerts` file, use the\n+    `-delete` option of the `keytool` command. You can find the `cacerts` file\n+    in the JDK's `$JAVA_HOME\/lib\/security` directory. Contact your system\n+    administrator if you don't have permission to edit this file.\n+\n+Internet RFC 1421 Certificate Encoding Standard\n+:   Certificates are often stored using the printable encoding format defined\n+    by the Internet RFC 1421 standard, instead of their binary encoding. This\n+    certificate format, also known as Base64 encoding, makes it easy to export\n+    certificates to other applications by email or through some other\n+    mechanism.\n+\n+    Certificates read by the `-importcert` and `-printcert` commands can be in\n+    either this format or binary encoded. The `-exportcert` command by default\n+    outputs a certificate in binary encoding, but will instead output a\n+    certificate in the printable encoding format, when the `-rfc` option is\n+    specified.\n+\n+    The `-list` command by default prints the SHA-256 fingerprint of a\n+    certificate. If the `-v` option is specified, then the certificate is\n+    printed in human-readable format. If the `-rfc` option is specified, then\n+    the certificate is output in the printable encoding format.\n+\n+    In its printable encoding format, the encoded certificate is bounded at the\n+    beginning and end by the following text:\n+\n+    ```\n+    -----BEGIN CERTIFICATE-----\n+\n+    encoded certificate goes here.\n+\n+    -----END CERTIFICATE-----\n+    ```\n+\n+X.500 Distinguished Names\n+:   X.500 Distinguished Names are used to identify entities, such as those that\n+    are named by the `subject` and `issuer` (signer) fields of X.509\n+    certificates. The `keytool` command supports the following subparts:\n+\n+    -   commonName: The common name of a person such as Susan Jones.\n+\n+    -   organizationUnit: The small organization (such as department or\n+        division) name. For example, Purchasing.\n+\n+    -   localityName: The locality (city) name, for example, Palo Alto.\n+\n+    -   stateName: State or province name, for example, California.\n+\n+    -   country: Two-letter country code, for example, CH.\n+\n+    When you supply a distinguished name string as the value of a `-dname`\n+    option, such as for the `-genkeypair` command, the string must be in the\n+    following format:\n+\n+    >   `CN=cName, OU=orgUnit, O=org, L=city, S=state, C=countryCode`\n+\n+    All the following items represent actual values and the previous keywords\n+    are abbreviations for the following:\n+\n+    ```\n+    CN=commonName\n+    OU=organizationUnit\n+    O=organizationName\n+    L=localityName\n+    S=stateName\n+    C=country\n+    ```\n+\n+    A sample distinguished name string is:\n+\n+    >   `CN=Mark Smith, OU=Java, O=Oracle, L=Cupertino, S=California, C=US`\n+\n+    A sample command using such a string is:\n+\n+    >   `keytool -genkeypair -dname \"CN=Mark Smith, OU=Java, O=Oracle,\n+        L=Cupertino, S=California, C=US\" -alias mark -keyalg rsa`\n+\n+    Case doesn't matter for the keyword abbreviations. For example, CN, cn, and\n+    Cn are all treated the same.\n+\n+    Order matters; each subcomponent must appear in the designated order.\n+    However, it isn't necessary to have all the subcomponents. You can use a\n+    subset, for example:\n+\n+    >   `CN=Smith, OU=Java, O=Oracle, C=US`\n+\n+    If a distinguished name string value contains a comma, then the comma must\n+    be escaped by a backslash (\\\\) character when you specify the string on a\n+    command line, as in:\n+\n+    >   `cn=Jack, ou=Java\\, Product Development, o=Oracle, c=US`\n+\n+    It is never necessary to specify a distinguished name string on a command\n+    line. When the distinguished name is needed for a command, but not supplied\n+    on the command line, the user is prompted for each of the subcomponents. In\n+    this case, a comma doesn't need to be escaped by a backslash (\\\\).\n+\n+## Warnings\n+\n+## Importing Trusted Certificates Warning\n+\n+**Important**: Be sure to check a certificate very carefully before importing\n+it as a trusted certificate.\n+\n+**Windows Example:**\n+\n+View the certificate first with the `-printcert` command or the `-importcert`\n+command without the `-noprompt` option. Ensure that the displayed certificate\n+fingerprints match the expected ones. For example, suppose someone sends or\n+emails you a certificate that you put it in a file named `\\tmp\\cert`. Before\n+you consider adding the certificate to your list of trusted certificates, you\n+can execute a `-printcert` command to view its fingerprints, as follows:\n+\n+```\n+  keytool -printcert -file \\tmp\\cert\n+    Owner: CN=ll, OU=ll, O=ll, L=ll, S=ll, C=ll\n+    Issuer: CN=ll, OU=ll, O=ll, L=ll, S=ll, C=ll\n+    Serial Number: 59092b34\n+    Valid from: Thu Jun 24 18:01:13 PDT 2016 until: Wed Jun 23 17:01:13 PST 2016\n+    Certificate Fingerprints:\n+\n+                   SHA-1: 20:B6:17:FA:EF:E5:55:8A:D0:71:1F:E8:D6:9D:C0:37:13:0E:5E:FE\n+                 SHA-256: 90:7B:70:0A:EA:DC:16:79:92:99:41:FF:8A:FE:EB:90:\n+                          17:75:E0:90:B2:24:4D:3A:2A:16:A6:E4:11:0F:67:A4\n+```\n+\n+**Linux Example:**\n+\n+View the certificate first with the `-printcert` command or the `-importcert`\n+command without the `-noprompt` option. Ensure that the displayed certificate\n+fingerprints match the expected ones. For example, suppose someone sends or\n+emails you a certificate that you put it in a file named `\/tmp\/cert`. Before\n+you consider adding the certificate to your list of trusted certificates, you\n+can execute a `-printcert` command to view its fingerprints, as follows:\n+\n+```\n+  keytool -printcert -file \/tmp\/cert\n+    Owner: CN=ll, OU=ll, O=ll, L=ll, S=ll, C=ll\n+    Issuer: CN=ll, OU=ll, O=ll, L=ll, S=ll, C=ll\n+    Serial Number: 59092b34\n+    Valid from: Thu Jun 24 18:01:13 PDT 2016 until: Wed Jun 23 17:01:13 PST 2016\n+    Certificate Fingerprints:\n+\n+                   SHA-1: 20:B6:17:FA:EF:E5:55:8A:D0:71:1F:E8:D6:9D:C0:37:13:0E:5E:FE\n+                   SHA-256: 90:7B:70:0A:EA:DC:16:79:92:99:41:FF:8A:FE:EB:90:\n+                           17:75:E0:90:B2:24:4D:3A:2A:16:A6:E4:11:0F:67:A4\n+```\n+\n+Then call or otherwise contact the person who sent the certificate and compare\n+the fingerprints that you see with the ones that they show. Only when the\n+fingerprints are equal is it guaranteed that the certificate wasn't replaced in\n+transit with somebody else's certificate such as an attacker's certificate. If\n+such an attack took place, and you didn't check the certificate before you\n+imported it, then you would be trusting anything the attacker signed, for\n+example, a JAR file with malicious class files inside.\n+\n+**Note:**\n+\n+It isn't required that you execute a `-printcert` command before importing a\n+certificate. This is because before you add a certificate to the list of\n+trusted certificates in the keystore, the `-importcert` command prints out the\n+certificate information and prompts you to verify it. You can then stop the\n+import operation. However, you can do this only when you call the `-importcert`\n+command without the `-noprompt` option. If the `-noprompt` option is specified,\n+then there is no interaction with the user.\n+\n+## Passwords Warning\n+\n+Most commands that operate on a keystore require the store password. Some\n+commands require a private\/secret key password. Passwords can be specified on\n+the command line in the `-storepass` and `-keypass` options. However, a\n+password shouldn't be specified on a command line or in a script unless it is\n+for testing, or you are on a secure system. When you don't specify a required\n+password option on a command line, you are prompted for it.\n+\n+## Certificate Conformance Warning\n+\n+[Internet X.509 Public Key Infrastructure Certificate and Certificate\n+Revocation List (CRL) Profile](https:\/\/tools.ietf.org\/rfc\/rfc5280.txt) defined\n+a profile on conforming X.509 certificates, which includes what values and\n+value combinations are valid for certificate fields and extensions.\n+\n+The `keytool` command doesn't enforce all of these rules so it can generate\n+certificates that don't conform to the standard, such as self-signed\n+certificates that would be used for internal testing purposes. Certificates\n+that don't conform to the standard might be rejected by the JDK or other\n+applications. Users should ensure that they provide the correct options for\n+`-dname`, `-ext`, and so on.\n+\n+## Import a New Trusted Certificate\n+\n+Before you add the certificate to the keystore, the `keytool` command verifies\n+it by attempting to construct a chain of trust from that certificate to a\n+self-signed certificate (belonging to a root CA), using trusted certificates\n+that are already available in the keystore.\n+\n+If the `-trustcacerts` option was specified, then additional certificates are\n+considered for the chain of trust, namely the certificates in a file named\n+`cacerts`.\n+\n+If the `keytool` command fails to establish a trust path from the certificate\n+to be imported up to a self-signed certificate (either from the keystore or the\n+`cacerts` file), then the certificate information is printed, and the user is\n+prompted to verify it by comparing the displayed certificate fingerprints with\n+the fingerprints obtained from some other (trusted) source of information,\n+which might be the certificate owner. Be very careful to ensure the certificate\n+is valid before importing it as a trusted certificate. The user then has the\n+option of stopping the import operation. If the `-noprompt` option is\n+specified, then there is no interaction with the user.\n+\n+## Import a Certificate Reply\n+\n+When you import a certificate reply, the certificate reply is validated with\n+trusted certificates from the keystore, and optionally, the certificates\n+configured in the `cacerts` keystore file when the `-trustcacerts` option is\n+specified.\n+\n+The methods of determining whether the certificate reply is trusted are as\n+follows:\n+\n+-   If the reply is a single X.509 certificate, then the `keytool` command\n+    attempts to establish a trust chain, starting at the certificate reply and\n+    ending at a self-signed certificate (belonging to a root CA). The\n+    certificate reply and the hierarchy of certificates is used to authenticate\n+    the certificate reply from the new certificate chain of aliases. If a trust\n+    chain can't be established, then the certificate reply isn't imported. In\n+    this case, the `keytool` command doesn't print the certificate and prompt\n+    the user to verify it, because it is very difficult for a user to determine\n+    the authenticity of the certificate reply.\n+\n+-   If the reply is a PKCS \\#7 formatted certificate chain or a sequence of\n+    X.509 certificates, then the chain is ordered with the user certificate\n+    first followed by zero or more CA certificates. If the chain ends with a\n+    self-signed root CA certificate and the`-trustcacerts` option was\n+    specified, the `keytool` command attempts to match it with any of the\n+    trusted certificates in the keystore or the `cacerts` keystore file. If the\n+    chain doesn't end with a self-signed root CA certificate and the\n+    `-trustcacerts` option was specified, the `keytool` command tries to find\n+    one from the trusted certificates in the keystore or the `cacerts` keystore\n+    file and add it to the end of the chain. If the certificate isn't found and\n+    the `-noprompt` option isn't specified, the information of the last\n+    certificate in the chain is printed, and the user is prompted to verify it.\n+\n+If the public key in the certificate reply matches the user's public key\n+already stored with `alias`, then the old certificate chain is replaced with\n+the new certificate chain in the reply. The old chain can only be replaced with\n+a valid `keypass`, and so the password used to protect the private key of the\n+entry is supplied. If no password is provided, and the private key password is\n+different from the keystore password, the user is prompted for it.\n+\n+This command was named `-import` in earlier releases. This old name is still\n+supported in this release. The new name, `-importcert`, is preferred.\n","filename":"src\/java.base\/share\/man\/keytool.md","additions":2430,"deletions":0,"binary":false,"changes":2430,"status":"added"},{"patch":"@@ -1,100 +0,0 @@\n-.\\\" Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"RMIREGISTRY\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-rmiregistry - create and start a remote object registry on the specified\n-port on the current host\n-.SH SYNOPSIS\n-.PP\n-\\f[V]rmiregistry\\f[R] [\\f[I]options\\f[R]] [\\f[I]port\\f[R]]\n-.TP\n-\\f[I]options\\f[R]\n-This represents the option for the \\f[V]rmiregistry\\f[R] command.\n-See \\f[B]Options\\f[R]\n-.TP\n-\\f[I]port\\f[R]\n-The number of a port on the current host at which to start the remote\n-object registry.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]rmiregistry\\f[R] command creates and starts a remote object\n-registry on the specified port on the current host.\n-If the port is omitted, then the registry is started on port 1099.\n-The \\f[V]rmiregistry\\f[R] command produces no output and is typically\n-run in the background, for example:\n-.RS\n-.PP\n-\\f[V]rmiregistry &\\f[R]\n-.RE\n-.PP\n-A remote object registry is a bootstrap naming service that\\[aq]s used\n-by RMI servers on the same host to bind remote objects to names.\n-Clients on local and remote hosts can then look up remote objects and\n-make remote method invocations.\n-.PP\n-The registry is typically used to locate the first remote object on\n-which an application needs to call methods.\n-That object then provides application-specific support for finding other\n-objects.\n-.PP\n-The methods of the \\f[V]java.rmi.registry.LocateRegistry\\f[R] class are\n-used to get a registry operating on the local host or local host and\n-port.\n-.PP\n-The URL-based methods of the \\f[V]java.rmi.Naming\\f[R] class operate on\n-a registry and can be used to:\n-.IP \\[bu] 2\n-Bind the specified name to a remote object\n-.IP \\[bu] 2\n-Return an array of the names bound in the registry\n-.IP \\[bu] 2\n-Return a reference, a stub, for the remote object associated with the\n-specified name\n-.IP \\[bu] 2\n-Rebind the specified name to a new remote object\n-.IP \\[bu] 2\n-Destroy the binding for the specified name that\\[aq]s associated with a\n-remote object\n-.SH OPTIONS\n-.TP\n-\\f[V]-J\\f[R]\\f[I]option\\f[R]\n-Used with any Java option to pass the \\f[I]option\\f[R] following the\n-\\f[V]-J\\f[R] (no spaces between the \\f[V]-J\\f[R] and the option) to the\n-Java interpreter.\n","filename":"src\/java.rmi\/share\/man\/rmiregistry.1","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -0,0 +1,86 @@\n+---\n+# Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'RMIREGISTRY(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+rmiregistry - create and start a remote object registry on the specified port\n+on the current host\n+\n+## Synopsis\n+\n+`rmiregistry` \\[*options*\\] \\[*port*\\]\n+\n+*options*\n+:   This represents the option for the `rmiregistry` command. See\n+    [Options]\n+\n+*port*\n+:   The number of a port on the current host at which to start the remote\n+    object registry.\n+\n+## Description\n+\n+The `rmiregistry` command creates and starts a remote object registry on the\n+specified port on the current host. If the port is omitted, then the registry\n+is started on port 1099. The `rmiregistry` command produces no output and is\n+typically run in the background, for example:\n+\n+>   `rmiregistry &`\n+\n+A remote object registry is a bootstrap naming service that's used by RMI\n+servers on the same host to bind remote objects to names. Clients on local and\n+remote hosts can then look up remote objects and make remote method\n+invocations.\n+\n+The registry is typically used to locate the first remote object on which an\n+application needs to call methods. That object then provides\n+application-specific support for finding other objects.\n+\n+The methods of the `java.rmi.registry.LocateRegistry` class are used to get a\n+registry operating on the local host or local host and port.\n+\n+The URL-based methods of the `java.rmi.Naming` class operate on a registry and\n+can be used to:\n+\n+-   Bind the specified name to a remote object\n+\n+-   Return an array of the names bound in the registry\n+\n+-   Return a reference, a stub, for the remote object associated with the\n+    specified name\n+\n+-   Rebind the specified name to a new remote object\n+\n+-   Destroy the binding for the specified name that's associated with a remote\n+    object\n+\n+## Options\n+\n+`-J`*option*\n+:   Used with any Java option to pass the *option* following the `-J` (no\n+    spaces between the `-J` and the option) to the Java interpreter.\n","filename":"src\/java.rmi\/share\/man\/rmiregistry.md","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -1,166 +0,0 @@\n-.\\\" Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JRUNSCRIPT\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jrunscript - run a command-line script shell that supports interactive\n-and batch modes\n-.SH SYNOPSIS\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-This tool is \\f[B]experimental\\f[R] and unsupported.\n-It is deprecated and will be removed in a future release.\n-.PP\n-\\f[V]jrunscript\\f[R] [\\f[I]options\\f[R]] [\\f[I]arguments\\f[R]]\n-.TP\n-\\f[I]options\\f[R]\n-This represents the \\f[V]jrunscript\\f[R] command-line options that can\n-be used.\n-See \\f[B]Options for the jrunscript Command\\f[R].\n-.TP\n-\\f[I]arguments\\f[R]\n-Arguments, when used, follow immediately after options or the command\n-name.\n-See \\f[B]Arguments\\f[R].\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jrunscript\\f[R] command is a language-independent command-line\n-script shell.\n-The \\f[V]jrunscript\\f[R] command supports both an interactive\n-(read-eval-print) mode and a batch (\\f[V]-f\\f[R] option) mode of script\n-execution.\n-By default, JavaScript is the language used, but the \\f[V]-l\\f[R] option\n-can be used to specify a different language.\n-By using Java to scripting language communication, the\n-\\f[V]jrunscript\\f[R] command supports an exploratory programming style.\n-.PP\n-If JavaScript is used, then before it evaluates a user defined script,\n-the \\f[V]jrunscript\\f[R] command initializes certain built-in functions\n-and objects, which are documented in the API Specification for\n-\\f[V]jrunscript\\f[R] JavaScript built-in functions.\n-.SH OPTIONS FOR THE JRUNSCRIPT COMMAND\n-.TP\n-\\f[V]-cp\\f[R] \\f[I]path\\f[R] or \\f[V]-classpath\\f[R] \\f[I]path\\f[R]\n-Indicates where any class files are that the script needs to access.\n-.TP\n-\\f[V]-D\\f[R]\\f[I]name\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R]\n-Sets a Java system property.\n-.TP\n-\\f[V]-J\\f[R]\\f[I]flag\\f[R]\n-Passes \\f[I]flag\\f[R] directly to the Java Virtual Machine where the\n-\\f[V]jrunscript\\f[R] command is running.\n-.TP\n-\\f[V]-l\\f[R] \\f[I]language\\f[R]\n-Uses the specified scripting language.\n-By default, JavaScript is used.\n-To use other scripting languages, you must specify the corresponding\n-script engine\\[aq]s JAR file with the \\f[V]-cp\\f[R] or\n-\\f[V]-classpath\\f[R] option.\n-.TP\n-\\f[V]-e\\f[R] \\f[I]script\\f[R]\n-Evaluates the specified script.\n-This option can be used to run one-line scripts that are specified\n-completely on the command line.\n-.TP\n-\\f[V]-encoding\\f[R] \\f[I]encoding\\f[R]\n-Specifies the character encoding used to read script files.\n-.TP\n-\\f[V]-f\\f[R] \\f[I]script-file\\f[R]\n-Evaluates the specified script file (batch mode).\n-.TP\n-\\f[V]-f -\\f[R]\n-Enters interactive mode to read and evaluate a script from standard\n-input.\n-.TP\n-\\f[V]-help\\f[R] or \\f[V]-?\\f[R]\n-Displays a help message and exits.\n-.TP\n-\\f[V]-q\\f[R]\n-Lists all script engines available and exits.\n-.SH ARGUMENTS\n-.PP\n-If arguments are present and if no \\f[V]-e\\f[R] or \\f[V]-f\\f[R] option\n-is used, then the first argument is the script file and the rest of the\n-arguments, if any, are passed as script arguments.\n-If arguments and the \\f[V]-e\\f[R] or the \\f[V]-f\\f[R] option are used,\n-then all arguments are passed as script arguments.\n-If arguments \\f[V]-e\\f[R] and \\f[V]-f\\f[R] are missing, then the\n-interactive mode is used.\n-.SH EXAMPLE OF EXECUTING INLINE SCRIPTS\n-.RS\n-.PP\n-\\f[V]jrunscript -e \\[dq]print(\\[aq]hello world\\[aq])\\[dq]\\f[R]\n-.RE\n-.RS\n-.PP\n-\\f[V]jrunscript -e \\[dq]cat(\\[aq]http:\/\/www.example.com\\[aq])\\[dq]\\f[R]\n-.RE\n-.SH EXAMPLE OF USING SPECIFIED LANGUAGE AND EVALUATE THE SCRIPT FILE\n-.RS\n-.PP\n-\\f[V]jrunscript -l js -f test.js\\f[R]\n-.RE\n-.SH EXAMPLE OF INTERACTIVE MODE\n-.IP\n-.nf\n-\\f[CB]\n-jrunscript\n-js> print(\\[aq]Hello World\\[rs]n\\[aq]);\n-Hello World\n-js> 34 + 55\n-89.0\n-js> t = new java.lang.Thread(function() { print(\\[aq]Hello World\\[rs]n\\[aq]); })\n-Thread[Thread-0,5,main]\n-js> t.start()\n-js> Hello World\n-\n-js>\n-\\f[R]\n-.fi\n-.SH RUN SCRIPT FILE WITH SCRIPT ARGUMENTS\n-.PP\n-In this example, the \\f[V]test.js\\f[R] file is the script file.\n-The \\f[V]arg1\\f[R], \\f[V]arg2\\f[R], and \\f[V]arg3\\f[R] arguments are\n-passed to the script.\n-The script can access these arguments with an arguments array.\n-.RS\n-.PP\n-\\f[V]jrunscript test.js arg1 arg2 arg3\\f[R]\n-.RE\n","filename":"src\/java.scripting\/share\/man\/jrunscript.1","additions":0,"deletions":166,"binary":false,"changes":166,"status":"deleted"},{"patch":"@@ -0,0 +1,141 @@\n+---\n+# Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JRUNSCRIPT(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jrunscript - run a command-line script shell that supports interactive and\n+batch modes\n+\n+## Synopsis\n+\n+**Note:**\n+\n+This tool is **experimental** and unsupported. It is deprecated and will be\n+removed in a future release.\n+\n+`jrunscript` \\[*options*\\] \\[*arguments*\\]\n+\n+*options*\n+:   This represents the `jrunscript` command-line options that can be used. See\n+    [Options for the jrunscript Command].\n+\n+*arguments*\n+:   Arguments, when used, follow immediately after options or the command name.\n+    See [Arguments].\n+\n+## Description\n+\n+The `jrunscript` command is a language-independent command-line script shell.\n+The `jrunscript` command supports both an interactive (read-eval-print) mode\n+and a batch (`-f` option) mode of script execution. By default, JavaScript is\n+the language used, but the `-l` option can be used to specify a different\n+language. By using Java to scripting language communication, the `jrunscript`\n+command supports an exploratory programming style.\n+\n+If JavaScript is used, then before it evaluates a user defined script, the\n+`jrunscript` command initializes certain built-in functions and objects, which\n+are documented in the API Specification for `jrunscript` JavaScript built-in\n+functions.\n+\n+## Options for the jrunscript Command\n+\n+`-cp` *path* or `-classpath` *path*\n+:   Indicates where any class files are that the script needs to access.\n+\n+`-D`*name*`=`*value*\n+:   Sets a Java system property.\n+\n+`-J`*flag*\n+:   Passes *flag* directly to the Java Virtual Machine where the `jrunscript`\n+    command is running.\n+\n+`-l` *language*\n+:   Uses the specified scripting language. By default, JavaScript is used. To\n+    use other scripting languages, you must specify the corresponding script\n+    engine's JAR file with the `-cp` or `-classpath` option.\n+\n+`-e` *script*\n+:   Evaluates the specified script. This option can be used to run one-line\n+    scripts that are specified completely on the command line.\n+\n+`-encoding` *encoding*\n+:   Specifies the character encoding used to read script files.\n+\n+`-f` *script-file*\n+:   Evaluates the specified script file (batch mode).\n+\n+`-f -`\n+:   Enters interactive mode to read and evaluate a script from standard input.\n+\n+`-help` or `-?`\n+:   Displays a help message and exits.\n+\n+`-q`\n+:   Lists all script engines available and exits.\n+\n+## Arguments\n+\n+If arguments are present and if no `-e` or `-f` option is used, then the first\n+argument is the script file and the rest of the arguments, if any, are passed\n+as script arguments. If arguments and the `-e` or the `-f` option are used,\n+then all arguments are passed as script arguments. If arguments `-e` and `-f`\n+are missing, then the interactive mode is used.\n+\n+## Example of Executing Inline Scripts\n+\n+>   `jrunscript -e \"print('hello world')\"`\n+\n+>   `jrunscript -e \"cat('http:\/\/www.example.com')\"`\n+\n+## Example of Using Specified Language and Evaluate the Script File\n+\n+>   `jrunscript -l js -f test.js`\n+\n+## Example of Interactive Mode\n+\n+```\n+jrunscript\n+js> print('Hello World\\n');\n+Hello World\n+js> 34 + 55\n+89.0\n+js> t = new java.lang.Thread(function() { print('Hello World\\n'); })\n+Thread[Thread-0,5,main]\n+js> t.start()\n+js> Hello World\n+\n+js>\n+```\n+\n+## Run Script File with Script Arguments\n+\n+In this example, the `test.js` file is the script file. The `arg1`, `arg2`, and\n+`arg3` arguments are passed to the script. The script can access these\n+arguments with an arguments array.\n+\n+>   `jrunscript test.js arg1 arg2 arg3`\n","filename":"src\/java.scripting\/share\/man\/jrunscript.md","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -0,0 +1,154 @@\n+---\n+# Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'KINIT(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+kinit - obtain and cache Kerberos ticket-granting tickets\n+\n+## Synopsis\n+\n+Initial ticket request:\n+\n+`kinit` \\[`-A`\\] \\[`-f`\\] \\[`-p`\\] \\[`-c` *cache\\_name*\\] \\[`-l` *lifetime*\\]\n+\\[`-r` *renewable\\_time*\\] \\[\\[`-k` \\[`-t` *keytab\\_file\\_name*\\]\\]\n+\\[*principal*\\] \\[*password*\\]\n+\n+Renew a ticket:\n+\n+`kinit` `-R` \\[`-c` *cache\\_name*\\] \\[*principal*\\]\n+\n+## Description\n+\n+This tool is similar in functionality to the `kinit` tool that is commonly\n+found in other Kerberos implementations, such as SEAM and MIT Reference\n+implementations. The user must be registered as a principal with the Key\n+Distribution Center (KDC) prior to running `kinit`.\n+\n+By default, on Windows, a cache file named *USER\\_HOME*`\\krb5cc_`*USER\\_NAME*\n+is generated.\n+\n+The identifier *USER\\_HOME* is obtained from the `java.lang.System` property\n+`user.home`. *USER\\_NAME* is obtained from the `java.lang.System` property\n+`user.name`. If *USER\\_HOME* is null, the cache file is stored in the current\n+directory from which the program is running. *USER\\_NAME* is the operating\n+system's login user name. This user name could be different than the user's\n+principal name. For example, on Windows, the cache file could be\n+`C:\\Windows\\Users\\duke\\krb5cc_duke`, in which `duke` is the *USER\\_NAME* and\n+`C:\\Windows\\Users\\duke` is the *USER\\_HOME*.\n+\n+By default, the keytab name is retrieved from the Kerberos configuration file.\n+If the keytab name isn't specified in the Kerberos configuration file, the\n+kinit tool assumes that the name is *USER\\_HOME*`\\krb5.keytab`\n+\n+If you don't specify the password using the *password* option on the command\n+line, the `kinit` tool prompts you for the password.\n+\n+**Note:**\n+\n+The `password` option is provided only for testing purposes. Don't specify your\n+password in a script or provide your password on the command line. Doing so\n+will compromise your password.\n+\n+## Commands\n+\n+You can specify one of the following commands. After the command, specify the\n+options for it.\n+\n+`-A`\n+:   Doesn't include addresses.\n+\n+`-f`\n+:   Issues a forwardable ticket.\n+\n+`-p`\n+:   Issues a proxiable ticket.\n+\n+`-c` *cache\\_name*\n+:   The cache name (for example, `FILE:D:\\temp\\mykrb5cc`).\n+\n+`-l` *lifetime*\n+:   Sets the lifetime of a ticket. The value can be one of \"h:m[:s]\",\n+    \"NdNhNmNs\", and \"N\". See the [MIT krb5 Time Duration definition](\n+    http:\/\/web.mit.edu\/kerberos\/krb5-1.17\/doc\/basic\/date_format.html#duration)\n+    for more information.\n+\n+`-r` *renewable\\_time*\n+:   Sets the total lifetime that a ticket can be renewed.\n+\n+`-R`\n+:   Renews a ticket.\n+\n+`-k`\n+:   Uses keytab\n+\n+`-t` *keytab\\_filename*\n+:   The keytab name (for example, `D:\\winnt\\profiles\\duke\\krb5.keytab`).\n+\n+*principal*\n+:   The principal name (for example, `duke@example.com`).\n+\n+*password*\n+:   The *principal*'s Kerberos password. **Don't specify this on the command\n+    line or in a script.**\n+\n+Run `kinit -help` to display the instructions above.\n+\n+## Examples\n+\n+Requests credentials valid for authentication from the current client host, for\n+the default services, storing the credentials cache in the default location\n+(`C:\\Windows\\Users\\duke\\krb5cc_duke`):\n+\n+>   `kinit duke@example.com`\n+\n+Requests proxiable credentials for a different principal and store these\n+credentials in a specified file cache:\n+\n+>   `kinit -l 1h -r 10h duke@example.com`\n+\n+Requests a TGT for the specified principal that will expire in 1 hour but\n+is renewable for up to 10 hours. Users must renew a ticket before it has\n+expired. The renewed ticket can be renewed repeatedly within 10 hours\n+from its initial request.\n+\n+>   `kinit -R duke@example.com`\n+\n+Renews an existing renewable TGT for the specified principal.\n+\n+>   `kinit -p -c FILE:C:\\Windows\\Users\\duke\\credentials\\krb5cc_cafebeef\n+    cafebeef@example.com`\n+\n+Requests proxiable and forwardable credentials for a different principal and\n+stores these credentials in a specified file cache:\n+\n+>   `kinit -f -p -c FILE:C:\\Windows\\Users\\duke\\credentials\\krb5cc_cafebeef\n+    cafebeef@example.com`\n+\n+Displays the help menu for the `kinit` tool:\n+\n+>   `kinit -help`\n","filename":"src\/java.security.jgss\/windows\/man\/kinit.md","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+---\n+# Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'KLIST(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+klist - display the entries in the local credentials cache and key table\n+\n+## Synopsis\n+\n+`klist` \\[`-c` \\[`-f`\\] \\[`-e`\\] \\[`-a` \\[`-n`\\]\\]\\] \\[`-k` \\[`-t`\\] \\[`-K`\\]\\]\n+\\[*name*\\] \\[`-help`\\]\n+\n+## Description\n+\n+The `klist` tool displays the entries in the local credentials cache and key\n+table. After you modify the credentials cache with the `kinit` tool or modify\n+the keytab with the `ktab` tool, the only way to verify the changes is to view\n+the contents of the credentials cache or keytab using the `klist` tool. The\n+`klist` tool doesn't change the Kerberos database.\n+\n+## Commands\n+\n+`-c`\n+:   Specifies that the credential cache is to be listed.\n+\n+    The following are the options for credential cache entries:\n+\n+    `-f`\n+    :   Show credential flags.\n+\n+    `-e`\n+    :   Show the encryption type.\n+\n+    `-a`\n+    :   Show addresses.\n+\n+    `-n`\n+    :   If the `-a` option is specified, don't reverse resolve addresses.\n+\n+`-k`\n+:   Specifies that key tab is to be listed.\n+\n+    List the keytab entries. The following are the options for keytab entries:\n+\n+    `-t`\n+    :   Show keytab entry timestamps.\n+\n+    `-K`\n+    :   Show keytab entry DES keys.\n+\n+    `-e`\n+    :   Shows keytab entry key type.\n+\n+*name*\n+:   Specifies the credential cache name or the keytab name. File-based cache or\n+    keytab's prefix is `FILE:`. If the name isn't specified, the `klist` tool\n+    uses default values for the cache name and keytab. The `kinit`\n+    documentation lists these default values.\n+\n+`-help`\n+:   Displays instructions.\n+\n+## Examples\n+\n+List entries in the keytable specified including keytab entry timestamps and\n+DES keys:\n+\n+>   `klist -k -t -K FILE:\\temp\\mykrb5cc`\n+\n+List entries in the credentials cache specified including credentials flag and\n+address list:\n+\n+>   `klist -c -f FILE:\\temp\\mykrb5cc`\n","filename":"src\/java.security.jgss\/windows\/man\/klist.md","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+---\n+# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'KTAB(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+ktab - manage the principal names and service keys stored in a local key\n+table\n+\n+## Synopsis\n+\n+`ktab` \\[*commands*\\] \\[*options*\\]\n+\n+\\[*commands*\\] \\[*options*\\]\n+:   Lists the keytab name and entries, adds new key entries to the keytab,\n+    deletes existing key entries, and displays instructions. See [Commands and\n+    Options].\n+\n+## Description\n+\n+The `ktab` enables the user to manage the principal names and service keys\n+stored in a local key table. Principal and key pairs listed in the keytab\n+enable services running on a host to authenticate themselves to the Key\n+Distribution Center (KDC).\n+\n+Before configuring a server to use Kerberos, you must set up a keytab on the\n+host running the server. Note that any updates made to the keytab using the\n+`ktab` tool don't affect the Kerberos database.\n+\n+A *keytab* is a host's copy of its own keylist, which is analogous to a user's\n+password. An application server that needs to authenticate itself to the Key\n+Distribution Center (KDC) must have a keytab which contains its own principal\n+and key. If you change the keys in the keytab, you must also make the\n+corresponding changes to the Kerberos database. The `ktab` tool enables you to\n+list, add, update or delete principal names and key pairs in the key table.\n+None of these operations affect the Kerberos database.\n+\n+## Security Alert\n+\n+Don't specify your password on the command line. Doing so can be a security\n+risk. For example, an attacker could discover your password while running the\n+UNIX `ps` command.\n+\n+Just as it is important for users to protect their passwords, it is equally\n+important for hosts to protect their keytabs. You should always store keytab\n+files on the local disk and make them readable only by root. You should never\n+send a keytab file over a network in the clear.\n+\n+## Commands and Options\n+\n+`-l` \\[`-e`\\] \\[`-t`\\]\n+:   Lists the keytab name and entries. When `-e` is specified, the encryption\n+    type for each entry is displayed. When `-t` is specified, the timestamp for\n+    each entry is displayed.\n+\n+`-a` *principal\\_name* \\[*password*\\] \\[`-n` *kvno*\\] \\[`-s` *salt* \\| `-f`\\] \\[`-append`\\]\n+:   Adds new key entries to the keytab for the given principal name with an\n+    optional *password*. If a *kvno* is specified, new keys' Key Version\n+    Numbers equal to the value, otherwise, automatically incrementing the Key\n+    Version Numbers. If *salt* is specified, it will be used instead of the\n+    default salt. If `-f` is specified, the KDC will be contacted to\n+    fetch the salt. If `-append` is specified, new keys are appended to the\n+    keytab, otherwise, old keys for the same principal are removed.\n+\n+    No changes are made to the Kerberos database. **Don't specify the password\n+    on the command line or in a script.** This tool will prompt for a password\n+    if it isn't specified.\n+\n+`-d` *principal\\_name* \\[`-f`\\] \\[`-e` *etype*\\] \\[*kvno* \\| `all`\\| `old`\\]\n+:   Deletes key entries from the keytab for the specified principal. No changes\n+    are made to the Kerberos database.\n+\n+    -   If *kvno* is specified, the tool deletes keys whose Key Version Numbers\n+        match kvno. If `all` is specified, delete all keys.\n+\n+    -   If `old` is specified, the tool deletes all keys except those with the\n+        highest *kvno*. The default action is `all`.\n+\n+    -   If *etype* is specified, the tool only deletes keys of this encryption\n+        type. *etype* should be specified as the numeric value *etype* defined\n+        in RFC 3961, section 8. A prompt to confirm the deletion is displayed\n+        unless `-f` is specified.\n+\n+    When *etype* is provided, only the entry matching this encryption type is\n+    deleted. Otherwise, all entries are deleted.\n+\n+`-help`\n+:   Displays instructions.\n+\n+## Common Options\n+\n+This option can be used with the `-l`, `-a` or `-d` commands.\n+\n+`-k` *keytab name*\n+:   Specifies the keytab name and path with the `FILE:` prefix.\n+\n+## Examples\n+\n+-   Lists all the entries in the default keytable\n+\n+    >   `ktab -l`\n+\n+-   Adds a new principal to the key table (note that you will be prompted for\n+    your password)\n+\n+    >   `ktab -a duke@example.com`\n+\n+-   Deletes a principal from the key table\n+\n+    >   `ktab -d duke@example.com`\n","filename":"src\/java.security.jgss\/windows\/man\/ktab.md","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+---\n+# Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JABSWITCH(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jabswitch - enable or disable the Java Access Bridge\n+\n+## Synopsis\n+\n+`jabswitch` \\[ -enable|\/enable | -disable|\/disable | -version|\/version | -?|\/? \\]\n+\n+## Options\n+\n+`-enable`\n+or\n+`\/enable`\n+:   Enables the Java Access Bridge\n+\n+`-disable`\n+or\n+`\/disable`\n+:   Disables the Java Access Bridge\n+\n+`-version`\n+or\n+`\/version`\n+:   Displays version information for the `jabswitch` command.\n+\n+`-?`\n+or\n+`\/?`\n+:   Displays usage information for the `jabswitch` command.\n+\n+## Description\n+\n+The `jabswitch` command is a utility program that enables the\n+Java Access Bridge to be loaded by the JDK on Windows platforms.\n+The Java Access Bridge is used by Assistive Technologies\n+to interact with Java Accessibility APIs of the Java SE platform.\n+To have any effect, the assistive technology must support the Java Access Bridge.\n+\n+This command creates or updates a file named `.accessibility.properties`,\n+in the user's home directory. When selecting the `-enable` option, the file\n+is populated with the information needed to load the Java Access Bridge.\n+This file is then read and used in accordance with the specification of the\n+Java SE\n+[`java.awt.Toolkit.getDefaultToolkit()`](..\/..\/api\/java.desktop\/java\/awt\/Toolkit.html#getDefaultToolkit())\n+API, on initialization.\n+\n+Note: This command is only provided with JDK for Windows.\n","filename":"src\/jdk.accessibility\/windows\/man\/jabswitch.md","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,249 @@\n+---\n+# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JACCESSINSPECTOR(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jaccessinspector - examine accessible information about the objects in the\n+Java Virtual Machine using the Java Accessibility Utilities API\n+\n+## Description\n+\n+The `jaccessinspector` tool lets you select different methods for examining the\n+object accessibility information:\n+\n+-   When events occur such as a change of focus, mouse movement, property\n+    change, menu selection, and the display of a popup menu\n+\n+-   When you press the F1 key when the mouse is over an object, or F2 when the\n+    mouse is over a window\n+\n+After an object has been selected for examination, the `jaccessinspector` tool\n+displays the results of calling Java Accessibility API methods on that object.\n+\n+## Running the jaccessinspector Tool\n+\n+To use the `jaccessinspector` tool, launch the `jaccessinspector` tool after\n+launching a Java application. To launch `jaccessinspector`, run the following\n+command:\n+\n+**Note:**\n+\n+`JAVA_HOME` is an environment variable and should be set to the path of the JDK\n+or JRE, such as `c:\\Program Files\\Java\\jdk-10`.\n+\n+>   `%JAVA_HOME%\\bin\\jaccessinspector.exe`\n+\n+You now have two windows open: The Java application window and the\n+`jaccessinspector` window. The `jaccessinspector` window contains five menus:\n+\n+-   [File Menu]\n+\n+-   [UpdateSettings Menu]\n+\n+-   [JavaEvents Menu]\n+\n+-   [AccessibilityEvents Menu]\n+\n+-   [Options Menu]\n+\n+The items in **UpdateSettings**, **JavaEvents**, and **AccessibilityEvents**\n+menus let you query Java applications in a variety of ways.\n+\n+## File Menu\n+\n+This section describes the **File** menu items.\n+\n+AccessBridge DLL Loaded\n+:   Enables and disables AccessBridge DLL Loaded.\n+\n+Exit\n+:   Exits from the tool.\n+\n+## UpdateSettings Menu\n+\n+This section describes the **UpdateSettings** menu items.\n+\n+Update from Mouse\n+:   Determines the x- and y-coordinates of the mouse (assuming the\n+    `jaccessinspector` tool window is topmost) when the mouse has stopped\n+    moving, and then queries the Java application for the accessible object\n+    underneath the mouse, dumping the output into the `jaccessinspector`\n+    window.\n+\n+Update with F2 (Mouse HWND)\n+:   Determines the x- and y-coordinates of the mouse (assuming the\n+    `jaccessinspector` tool window is topmost), and then queries the Java\n+    application for the accessible object of the HWND underneath the mouse,\n+    dumping the output into the `jaccessinspector` window.\n+\n+Update with F1 (Mouse Point)\n+:   Determines the x- and y-coordinates of the mouse (assuming the\n+    `jaccessinspector` tool window is topmost), and then queries the Java\n+    application for the accessible object underneath the cursor, dumping the\n+    output into the `jaccessinspector` window.\n+\n+## JavaEvents Menu\n+\n+This section describes the **JavaEvents** menu items.\n+\n+Track Mouse Events\n+:   Registers with the Java application all Java Mouse Entered events, and upon\n+    receiving one, queries the object that was entered by the cursor and dumps\n+    the output into the `jaccessinspector` window.\n+\n+    **Note:** If the mouse is moved quickly, then there may be some delay\n+    before the displayed information is updated.\n+\n+Track Focus Events\n+:   Registers with the Java application all Java Focus Gained events, and upon\n+    receiving an event, queries the object that received the focus and dumps\n+    the output into the `jaccessinspector` window.\n+\n+Track Caret Events\n+:   Register with the Java application all Java Caret Update events, and upon\n+    receiving an event, queries the object in which the caret was updated, and\n+    dumps the output into the `jaccessinspector` window.\n+\n+    **Note:** Because objects that contain carets are almost by definition\n+    objects that are rich text objects, this won't seem as responsive as the\n+    other event tracking options. In real use, one would make fewer\n+    accessibility calls in Caret Update situations (for example, just get the\n+    new letter, word, sentence at the caret location), which would be\n+    significantly faster.\n+\n+Track Menu Selected \\| Deselected \\| Cancelled Events\n+:   Registers with the Java application all Menu events, and upon receiving an\n+    event, queries the object in which the caret was updated, and dumps the\n+    output into the `jaccessinspector` window.\n+\n+Track Popup Visible \\| Invisible \\| Cancelled Events\n+:   Registers with the Java application all Popup Menu events, and upon\n+    receiving an event, queries the object in which the caret was updated, and\n+    dumps the output into the `jaccessinspector` window.\n+\n+Track Shutdown Events\n+:   Registers with the Java application to receive a Property Changed event\n+    when a Java application terminates.\n+\n+## AccessibilityEvents Menu\n+\n+This section describes the **AccessibilityEvents** menu items.\n+\n+**Note:** The items listed in the **AccessibilityEvents** menu are the most\n+important for testing applications, especially for assistive technology\n+applications.\n+\n+Track Name Property Events\n+:   Registers with the Java application all Java Property Changed events\n+    specifically on accessible objects in which the Name property has changed,\n+    and upon receiving an event, dumps the output into the scrolling window,\n+    along with information about the property that changed.\n+\n+Track Description Property Events\n+:   Register with the Java application for all Java Property Changed events\n+    specifically on accessible objects in which the Description property has\n+    changed, and upon receiving an event, dumps the output into the\n+    `jaccessinspector` window, along with information about the property that\n+    changed.\n+\n+Track State Property Events\n+:   Register with the Java application all Java Property Changed events\n+    specifically on accessible objects in which the State property has changed,\n+    and upon receiving an event, dumps the output into the `jaccessinspector`\n+    window, along with information about the property that changed.\n+\n+Track Value Property Events\n+:   Register with the Java application all Java Property Changed events\n+    specifically on accessible objects in which the Value property has changed,\n+    and upon receiving an event, dumps the output into the scrolling window,\n+    along with information about the property that changed.\n+\n+Track Selection Property Events\n+:   Register with the Java application all Java Property Changed events\n+    specifically on accessible objects in which the Selection property has\n+    changed, and upon receiving an event, dumps the output into the\n+    `jaccessinspector` window, along with information about the property that\n+    changed.\n+\n+Track Text Property Events\n+:   Register with the Java application all Java Property Changed events\n+    specifically on accessible objects in which the Text property has changed,\n+    and upon receiving one event, dump the output into the `jaccessinspector`\n+    window, along with information about the property that changed.\n+\n+Track Caret Property Events\n+:   Register with the Java application all Java Property Changed events\n+    specifically on accessible objects in which the Caret property has changed,\n+    and upon receiving an event, dumps the output into the `jaccessinspector`\n+    window, along with information about the property that changed.\n+\n+Track VisibleData Property Events\n+:   Register with the Java application all Java Property Changed events\n+    specifically on accessible objects in which the VisibleData property has\n+    changed, and upon receiving an event, dumps the output into the\n+    `jaccessinspector` window, along with information about the property that\n+    changed.\n+\n+Track Child Property Events\n+:   Register with the Java application all Java Property Changed events\n+    specifically on accessible objects in which the Child property has changed,\n+    and upon receiving an event, dumps the output into the `jaccessinspector`\n+    window, along with information about the property that changed.\n+\n+Track Active Descendent Property Events\n+:   Register with the Java application all Java Property Changed events\n+    specifically on accessible objects in which the Active Descendent property\n+    has changed, and upon receiving an event, dumps the output into the\n+    `jaccessinspector` window, along with information about the property that\n+    changed.\n+\n+Track Table Model Change Property Events\n+:   Register with the Java application all Property Changed events specifically\n+    on accessible objects in which the Table Model Change property has changed,\n+    and upon receiving an event, dumps the output into the `jaccessinspector`\n+    window, along with information about the property that changed.\n+\n+## Options Menu\n+\n+This section describes the **Options** menu items.\n+\n+Monitor the same events as JAWS\n+:   Enables monitoring of only the events also monitored by JAWS.\n+\n+Monitor All Events\n+:   Enables monitoring of all events in the `jaccessinspector` window.\n+\n+Reset All Events\n+:   Resets the selected Options to the default settings.\n+\n+Go To Message\n+:   Opens the **Go To Message** dialog that lets you display a logged message\n+    by entering its message number.\n+\n+Clear Message History\n+:   Clears the history of logged messages from the `jaccessinspector` window.\n","filename":"src\/jdk.accessibility\/windows\/man\/jaccessinspector.md","additions":249,"deletions":0,"binary":false,"changes":249,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+---\n+# Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JACCESSWALKER(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jaccesswalker - navigate through the component trees in a particular Java\n+Virtual Machine and present the hierarchy in a tree view\n+\n+## Description\n+\n+You select a node in the tree, and from the **Panels** menu, you select\n+**Accessibility API Panel**. The `jaccesswalker` tool shows you the\n+accessibility information for the object in the window.\n+\n+## Running the jaccesswalker Tool\n+\n+To use `jaccesswalker`, launch the `jaccesswalker` tool after launching a Java\n+application. For example, to launch `jaccesswalker`, enter the following\n+command:\n+\n+**Note:**\n+\n+`JAVA_HOME` is an environment variable and should be set to the path of the JDK\n+or JRE, such as, `c:\\Program Files\\Java\\jdk-10`.\n+\n+>   `%JAVA_HOME%\\bin\\jaccesswalker.exe`\n+\n+You now have two windows open: The Java application window, and the window for\n+the `jaccesswalker` tool. There are two tasks that you can do with\n+`jaccesswalker` . You can build a tree view of the Java applications' GUI\n+hierarchy, and you can query the Java Accessibility API information of a\n+particular element in the GUI hierarchy.\n+\n+## Building the GUI Hierarchy\n+\n+From the **File** menu, select **Refresh Tree** menu. The `jaccesswalker` tool\n+builds a list of the top-level windows belonging to Java applications. The tool\n+then recursively queries the elements in those windows, and builds a tree of\n+all of the GUI components in all of the Java applications in all of the JVMs\n+running in the system.\n+\n+## Examining a GUI Component\n+\n+After a GUI tree is built, you can view detailed accessibility information\n+about an individual GUI component by selecting it in the tree, then selecting\n+**Panels**, and then **Display Accessibility Information**.\n","filename":"src\/jdk.accessibility\/windows\/man\/jaccesswalker.md","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -1,2372 +0,0 @@\n-.\\\" Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JAVAC\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-javac - read Java declarations and compile them into class files\n-.SH SYNOPSIS\n-.PP\n-\\f[V]javac\\f[R] [\\f[I]options\\f[R]]\n-[\\f[I]sourcefiles-or-classnames\\f[R]]\n-.TP\n-\\f[I]options\\f[R]\n-Command-line options.\n-.TP\n-\\f[I]sourcefiles-or-classnames\\f[R]\n-Source files to be compiled (for example, \\f[V]Shape.java\\f[R]) or the\n-names of previously compiled classes to be processed for annotations\n-(for example, \\f[V]geometry.MyShape\\f[R]).\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]javac\\f[R] command reads \\f[I]source files\\f[R] that contain\n-module, package and type declarations written in the Java programming\n-language, and compiles them into \\f[I]class files\\f[R] that run on the\n-Java Virtual Machine.\n-.PP\n-The \\f[V]javac\\f[R] command can also \\f[B]process annotations\\f[R] in\n-Java source files and classes.\n-.PP\n-Source files must have a file name extension of \\f[V].java\\f[R].\n-Class files have a file name extension of \\f[V].class\\f[R].\n-Both source and class files normally have file names that identify the\n-contents.\n-For example, a class called \\f[V]Shape\\f[R] would be declared in a\n-source file called \\f[V]Shape.java\\f[R], and compiled into a class file\n-called \\f[V]Shape.class\\f[R].\n-.PP\n-There are two ways to specify source files to \\f[V]javac\\f[R]:\n-.IP \\[bu] 2\n-For a small number of source files, you can list their file names on the\n-command line.\n-.IP \\[bu] 2\n-For a large number of source files, you can use the\n-\\f[B]\\f[VB]\\[at]\\f[B]\\f[BI]filename\\f[B]\\f[R] option on the command line\n-to specify an \\f[I]argument file\\f[R] that lists their file names.\n-See \\f[B]Standard Options\\f[R] for a description of the option and\n-\\f[B]Command-Line Argument Files\\f[R] for a description of\n-\\f[V]javac\\f[R] argument files.\n-.PP\n-The order of source files specified on the command line or in an\n-argument file is not important.\n-\\f[V]javac\\f[R] will compile the files together, as a group, and will\n-automatically resolve any dependencies between the declarations in the\n-various source files.\n-.PP\n-\\f[V]javac\\f[R] expects that source files are arranged in one or more\n-directory hierarchies on the file system, described in \\f[B]Arrangement\n-of Source Code\\f[R].\n-.PP\n-To compile a source file, \\f[V]javac\\f[R] needs to find the declaration\n-of every class or interface that is used, extended, or implemented by\n-the code in the source file.\n-This lets \\f[V]javac\\f[R] check that the code has the right to access\n-those classes and interfaces.\n-Rather than specifying the source files of those classes and interfaces\n-explicitly, you can use command-line options to tell \\f[V]javac\\f[R]\n-where to search for their source files.\n-If you have compiled those source files previously, you can use options\n-to tell \\f[V]javac\\f[R] where to search for the corresponding class\n-files.\n-The options, which all have names ending in \\[dq]path\\[dq], are\n-described in \\f[B]Standard Options\\f[R], and further described in\n-\\f[B]Configuring a Compilation\\f[R] and \\f[B]Searching for Module,\n-Package and Type Declarations\\f[R].\n-.PP\n-By default, \\f[V]javac\\f[R] compiles each source file to a class file in\n-the same directory as the source file.\n-However, it is recommended to specify a separate destination directory\n-with the \\f[B]\\f[VB]-d\\f[B]\\f[R] option.\n-.PP\n-Command-line \\f[B]options\\f[R] and \\f[B]environment variables\\f[R] also\n-control how \\f[V]javac\\f[R] performs various tasks:\n-.IP \\[bu] 2\n-Compiling code to run on earlier releases of the JDK.\n-.IP \\[bu] 2\n-Compiling code to run under a debugger.\n-.IP \\[bu] 2\n-Checking for stylistic issues in Java source code.\n-.IP \\[bu] 2\n-Checking for problems in \\f[V]javadoc\\f[R] comments\n-(\\f[V]\/** ... *\/\\f[R]).\n-.IP \\[bu] 2\n-Processing annotations in source files and class files.\n-.IP \\[bu] 2\n-Upgrading and patching modules in the compile-time environment.\n-.PP\n-\\f[V]javac\\f[R] supports \\f[B]Compiling for Earlier Releases Of The\n-Platform\\f[R] and can also be invoked from Java code using one of a\n-number of \\f[B]APIs\\f[R]\n-.SH OPTIONS\n-.PP\n-\\f[V]javac\\f[R] provides \\f[B]standard options\\f[R], and \\f[B]extra\n-options\\f[R] that are either non-standard or are for advanced use.\n-.PP\n-Some options take one or more arguments.\n-If an argument contains spaces or other whitespace characters, the value\n-should be quoted according to the conventions of the environment being\n-used to invoke javac.\n-If the option begins with a single dash (\\f[V]-\\f[R]) the argument\n-should either directly follow the option name, or should be separated\n-with a colon (\\f[V]:\\f[R]) or whitespace, depending on the option.\n-If the option begins with a double dash (\\f[V]--\\f[R]), the argument may\n-be separated either by whitespace or by an equals (\\f[V]=\\f[R])\n-character with no additional whitespace.\n-For example,\n-.IP\n-.nf\n-\\f[CB]\n--Aname=\\[dq]J. Duke\\[dq]\n--proc:only\n--d myDirectory\n---module-version 3\n---module-version=3\n-\\f[R]\n-.fi\n-.PP\n-In the following lists of options, an argument of \\f[I]path\\f[R]\n-represents a search path, composed of a list of file system locations\n-separated by the platform path separator character, (semicolon\n-\\f[V];\\f[R] on Windows, or colon \\f[V]:\\f[R] on other systems.)\n-Depending on the option, the file system locations may be directories,\n-JAR files or JMOD files.\n-.SS Standard Options\n-.TP\n-\\f[V]\\[at]\\f[R]\\f[I]filename\\f[R]\n-Reads options and file names from a file.\n-To shorten or simplify the \\f[V]javac\\f[R] command, you can specify one\n-or more files that contain arguments to the \\f[V]javac\\f[R] command\n-(except \\f[B]\\f[VB]-J\\f[B]\\f[R] options).\n-This lets you to create \\f[V]javac\\f[R] commands of any length on any\n-operating system.\n-See \\f[B]Command-Line Argument Files\\f[R].\n-.TP\n-\\f[V]-A\\f[R]\\f[I]key\\f[R][\\f[V]=\\f[R]\\f[I]value\\f[R]]\n-Specifies options to pass to annotation processors.\n-These options are not interpreted by \\f[V]javac\\f[R] directly, but are\n-made available for use by individual processors.\n-The \\f[I]key\\f[R] value should be one or more identifiers separated by a\n-dot (\\f[V].\\f[R]).\n-.TP\n-\\f[V]--add-modules\\f[R] \\f[I]module\\f[R]\\f[V],\\f[R]\\f[I]module\\f[R]\n-Specifies root modules to resolve in addition to the initial modules, or\n-all modules on the module path if \\f[I]module\\f[R] is\n-\\f[V]ALL-MODULE-PATH\\f[R].\n-.TP\n-\\f[V]--boot-class-path\\f[R] \\f[I]path\\f[R] or \\f[V]-bootclasspath\\f[R] \\f[I]path\\f[R]\n-Overrides the location of the bootstrap class files.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] This can only be used when compiling for releases prior\n-to JDK 9.\n-As applicable, see the descriptions in \\f[B]\\f[VB]--release\\f[B]\\f[R],\n-\\f[B]\\f[VB]-source\\f[B]\\f[R], or \\f[B]\\f[VB]-target\\f[B]\\f[R] for\n-details.\n-For JDK 9 or later, see \\f[B]\\f[VB]--system\\f[B]\\f[R].\n-.RE\n-.TP\n-\\f[V]--class-path\\f[R] \\f[I]path\\f[R], \\f[V]-classpath\\f[R] \\f[I]path\\f[R], or \\f[V]-cp\\f[R] \\f[I]path\\f[R]\n-Specifies where to find user class files and annotation processors.\n-This class path overrides the user class path in the \\f[V]CLASSPATH\\f[R]\n-environment variable.\n-.RS\n-.IP \\[bu] 2\n-If \\f[V]--class-path\\f[R], \\f[V]-classpath\\f[R], or \\f[V]-cp\\f[R] are\n-not specified, then the user class path is the value of the\n-\\f[V]CLASSPATH\\f[R] environment variable, if that is set, or else the\n-current directory.\n-.IP \\[bu] 2\n-If not compiling code for modules, if the\n-\\f[B]\\f[VB]--source-path\\f[B]\\f[R] or -sourcepath\\[ga] option is not\n-specified, then the user class path is also searched for source files.\n-.IP \\[bu] 2\n-If the \\f[B]\\f[VB]-processorpath\\f[B]\\f[R] option is not specified, then\n-the class path is also searched for annotation processors.\n-.RE\n-.TP\n-\\f[V]-d\\f[R] \\f[I]directory\\f[R]\n-Sets the destination directory (or \\f[I]class output directory\\f[R]) for\n-class files.\n-If a class is part of a package, then \\f[V]javac\\f[R] puts the class\n-file in a subdirectory that reflects the module name (if appropriate)\n-and package name.\n-The directory, and any necessary subdirectories, will be created if they\n-do not already exist.\n-.RS\n-.PP\n-If the \\f[V]-d\\f[R] option is not specified, then \\f[V]javac\\f[R] puts\n-each class file in the same directory as the source file from which it\n-was generated.\n-.PP\n-Except when compiling code for multiple modules, the contents of the\n-class output directory will be organized in a package hierarchy.\n-When compiling code for multiple modules, the contents of the output\n-directory will be organized in a module hierarchy, with the contents of\n-each module in a separate subdirectory, each organized as a package\n-hierarchy.\n-.PP\n-\\f[B]Note:\\f[R] When compiling code for one or more modules, the class\n-output directory will automatically be checked when searching for\n-previously compiled classes.\n-When not compiling for modules, for backwards compatibility, the\n-directory is \\f[I]not\\f[R] automatically checked for previously compiled\n-classes, and so it is recommended to specify the class output directory\n-as one of the locations on the user class path, using the\n-\\f[V]--class-path\\f[R] option or one of its alternate forms.\n-.RE\n-.TP\n-\\f[V]-deprecation\\f[R]\n-Shows a description of each use or override of a deprecated member or\n-class.\n-Without the \\f[V]-deprecation\\f[R] option, \\f[V]javac\\f[R] shows a\n-summary of the source files that use or override deprecated members or\n-classes.\n-The \\f[V]-deprecation\\f[R] option is shorthand for\n-\\f[V]-Xlint:deprecation\\f[R].\n-.TP\n-\\f[V]--enable-preview\\f[R]\n-Enables preview language features.\n-Used in conjunction with either \\f[B]\\f[VB]-source\\f[B]\\f[R] or\n-\\f[B]\\f[VB]--release\\f[B]\\f[R].\n-.TP\n-\\f[V]-encoding\\f[R] \\f[I]encoding\\f[R]\n-Specifies character encoding used by source files, such as EUC-JP and\n-UTF-8.\n-If the \\f[V]-encoding\\f[R] option is not specified, then the platform\n-default converter is used.\n-.TP\n-\\f[V]-endorseddirs\\f[R] \\f[I]directories\\f[R]\n-Overrides the location of the endorsed standards path.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] This can only be used when compiling for releases prior\n-to JDK 9.\n-As applicable, see the descriptions in \\f[B]\\f[VB]--release\\f[B]\\f[R],\n-\\f[B]\\f[VB]-source\\f[B]\\f[R], or \\f[B]\\f[VB]-target\\f[B]\\f[R] for\n-details.\n-.RE\n-.TP\n-\\f[V]-extdirs\\f[R] \\f[I]directories\\f[R]\n-Overrides the location of the installed extensions.\n-\\f[V]directories\\f[R] is a list of directories, separated by the\n-platform path separator (\\f[V];\\f[R] on Windows, and \\f[V]:\\f[R]\n-otherwise).\n-Each JAR file in the specified directories is searched for class files.\n-All JAR files found become part of the class path.\n-.RS\n-.PP\n-If you are compiling for a release of the platform that supports the\n-Extension Mechanism, then this option specifies the directories that\n-contain the extension classes.\n-See [Compiling for Other Releases of the Platform].\n-.PP\n-\\f[B]Note:\\f[R] This can only be used when compiling for releases prior\n-to JDK 9.\n-As applicable, see the descriptions in \\f[B]\\f[VB]--release\\f[B]\\f[R],\n-\\f[B]\\f[VB]-source\\f[B]\\f[R], or \\f[B]\\f[VB]-target\\f[B]\\f[R] for\n-details.\n-.RE\n-.TP\n-\\f[V]-g\\f[R]\n-Generates all debugging information, including local variables.\n-By default, only line number and source file information is generated.\n-.TP\n-\\f[V]-g:\\f[R][\\f[V]lines\\f[R], \\f[V]vars\\f[R], \\f[V]source\\f[R]]\n-Generates only the kinds of debugging information specified by the\n-comma-separated list of keywords.\n-Valid keywords are:\n-.RS\n-.TP\n-\\f[V]lines\\f[R]\n-Line number debugging information.\n-.TP\n-\\f[V]vars\\f[R]\n-Local variable debugging information.\n-.TP\n-\\f[V]source\\f[R]\n-Source file debugging information.\n-.RE\n-.TP\n-\\f[V]-g:none\\f[R]\n-Does not generate debugging information.\n-.TP\n-\\f[V]-h\\f[R] \\f[I]directory\\f[R]\n-Specifies where to place generated native header files.\n-.RS\n-.PP\n-When you specify this option, a native header file is generated for each\n-class that contains native methods or that has one or more constants\n-annotated with the \\f[B]\\f[VB]java.lang.annotation.Native\\f[B]\\f[R]\n-annotation.\n-If the class is part of a package, then the compiler puts the native\n-header file in a subdirectory that reflects the module name (if\n-appropriate) and package name.\n-The directory, and any necessary subdirectories, will be created if they\n-do not already exist.\n-.RE\n-.TP\n-\\f[V]--help\\f[R], \\f[V]-help\\f[R] or \\f[V]-?\\f[R]\n-Prints a synopsis of the standard options.\n-.TP\n-\\f[V]--help-extra\\f[R] or \\f[V]-X\\f[R]\n-Prints a synopsis of the set of extra options.\n-.TP\n-\\f[V]--help-lint\\f[R]\n-Prints the supported keys for the \\f[V]-Xlint\\f[R] option.\n-.TP\n-\\f[V]-implicit:\\f[R][\\f[V]none\\f[R], \\f[V]class\\f[R]]\n-Specifies whether or not to generate class files for implicitly\n-referenced files:\n-.RS\n-.IP \\[bu] 2\n-\\f[V]-implicit:class\\f[R] --- Automatically generates class files.\n-.IP \\[bu] 2\n-\\f[V]-implicit:none\\f[R] --- Suppresses class file generation.\n-.PP\n-If this option is not specified, then the default automatically\n-generates class files.\n-In this case, the compiler issues a warning if any class files are\n-generated when also doing annotation processing.\n-The warning is not issued when the \\f[V]-implicit\\f[R] option is\n-explicitly set.\n-See \\f[B]Searching for Module, Package and Type Declarations\\f[R].\n-.RE\n-.TP\n-\\f[V]-J\\f[R]\\f[I]option\\f[R]\n-Passes \\f[I]option\\f[R] to the runtime system, where \\f[I]option\\f[R] is\n-one of the Java options described on \\f[B]java\\f[R] command.\n-For example, \\f[V]-J-Xms48m\\f[R] sets the startup memory to 48 MB.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] The \\f[V]CLASSPATH\\f[R] environment variable,\n-\\f[V]-classpath\\f[R] option, \\f[V]-bootclasspath\\f[R] option, and\n-\\f[V]-extdirs\\f[R] option do not specify the classes used to run\n-\\f[V]javac\\f[R].\n-Trying to customize the compiler implementation with these options and\n-variables is risky and often does not accomplish what you want.\n-If you must customize the compiler implementation, then use the\n-\\f[V]-J\\f[R] option to pass options through to the underlying Java\n-launcher.\n-.RE\n-.TP\n-\\f[V]--limit-modules\\f[R] \\f[I]module\\f[R]\\f[V],\\f[R]\\f[I]module\\f[R]*\n-Limits the universe of observable modules.\n-.TP\n-\\f[V]--module\\f[R] \\f[I]module-name\\f[R] (\\f[V],\\f[R]\\f[I]module-name\\f[R])* or \\f[V]-m\\f[R] \\f[I]module-name\\f[R] (\\f[V],\\f[R]\\f[I]module-name\\f[R])*\n-Compiles those source files in the named modules that are newer than the\n-corresponding files in the output directory.\n-.TP\n-\\f[V]--module-path\\f[R] \\f[I]path\\f[R] or \\f[V]-p\\f[R] \\f[I]path\\f[R]\n-Specifies where to find application modules.\n-.TP\n-\\f[V]--module-source-path\\f[R] \\f[I]module-source-path\\f[R]\n-Specifies where to find source files when compiling code in multiple\n-modules.\n-See [Compilation Modes] and \\f[B]The Module Source Path Option\\f[R].\n-.TP\n-\\f[V]--module-version\\f[R] \\f[I]version\\f[R]\n-Specifies the version of modules that are being compiled.\n-.TP\n-\\f[V]-nowarn\\f[R]\n-Disables warning messages.\n-This option operates the same as the \\f[V]-Xlint:none\\f[R] option.\n-.TP\n-\\f[V]-parameters\\f[R]\n-Generates metadata for reflection on method parameters.\n-Stores formal parameter names of constructors and methods in the\n-generated class file so that the method\n-\\f[V]java.lang.reflect.Executable.getParameters\\f[R] from the Reflection\n-API can retrieve them.\n-.TP\n-\\f[V]-proc:\\f[R][\\f[V]none\\f[R], \\f[V]only\\f[R], \\f[V]full\\f[R]]\n-Controls whether annotation processing and compilation are done.\n-\\f[V]-proc:none\\f[R] means that compilation takes place without\n-annotation processing.\n-\\f[V]-proc:only\\f[R] means that only annotation processing is done,\n-without any subsequent compilation.\n-If this option is not used, or \\f[V]-proc:full\\f[R] is specified,\n-annotation processing and compilation are done.\n-.TP\n-\\f[V]-processor\\f[R] \\f[I]class1\\f[R][\\f[V],\\f[R]\\f[I]class2\\f[R]\\f[V],\\f[R]\\f[I]class3\\f[R]...]\n-Names of the annotation processors to run.\n-This bypasses the default discovery process.\n-.TP\n-\\f[V]--processor-module-path\\f[R] \\f[I]path\\f[R]\n-Specifies the module path used for finding annotation processors.\n-.TP\n-\\f[V]--processor-path\\f[R] \\f[I]path\\f[R] or \\f[V]-processorpath\\f[R] \\f[I]path\\f[R]\n-Specifies where to find annotation processors.\n-If this option is not used, then the class path is searched for\n-processors.\n-.TP\n-\\f[V]-profile\\f[R] \\f[I]profile\\f[R]\n-Checks that the API used is available in the specified profile.\n-This option is deprecated and may be removed in a future release.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] This can only be used when compiling for releases prior\n-to JDK 9.\n-As applicable, see the descriptions in \\f[B]\\f[VB]--release\\f[B]\\f[R],\n-\\f[B]\\f[VB]-source\\f[B]\\f[R], or \\f[B]\\f[VB]-target\\f[B]\\f[R] for\n-details.\n-.RE\n-.TP\n-\\f[V]--release\\f[R] \\f[I]release\\f[R]\n-Compiles source code according to the rules of the Java programming\n-language for the specified Java SE release, generating class files which\n-target that release.\n-Source code is compiled against the combined Java SE and JDK API for the\n-specified release.\n-.RS\n-.PP\n-The supported values of \\f[I]release\\f[R] are the current Java SE\n-release and a limited number of previous releases, detailed in the\n-command-line help.\n-.PP\n-For the current release, the Java SE API consists of the\n-\\f[V]java.*\\f[R], \\f[V]javax.*\\f[R], and \\f[V]org.*\\f[R] packages that\n-are exported by the Java SE modules in the release; the JDK API consists\n-of the \\f[V]com.*\\f[R] and \\f[V]jdk.*\\f[R] packages that are exported by\n-the JDK modules in the release, plus the \\f[V]javax.*\\f[R] packages that\n-are exported by standard, but non-Java SE, modules in the release.\n-.PP\n-For previous releases, the Java SE API and the JDK API are as defined in\n-that release.\n-.PP\n-\\f[B]Note:\\f[R] When using \\f[V]--release\\f[R], you cannot also use the\n-\\f[B]\\f[VB]--source\\f[B]\\f[R]\/\\f[V]-source\\f[R] or\n-\\f[B]\\f[VB]--target\\f[B]\\f[R]\/\\f[V]-target\\f[R] options.\n-.PP\n-\\f[B]Note:\\f[R] When using \\f[V]--release\\f[R] to specify a release that\n-supports the Java Platform Module System, the \\f[V]--add-exports\\f[R]\n-option cannot be used to enlarge the set of packages exported by the\n-Java SE, JDK, and standard modules in the specified release.\n-.RE\n-.TP\n-\\f[V]-s\\f[R] \\f[I]directory\\f[R]\n-Specifies the directory used to place the generated source files.\n-If a class is part of a package, then the compiler puts the source file\n-in a subdirectory that reflects the module name (if appropriate) and\n-package name.\n-The directory, and any necessary subdirectories, will be created if they\n-do not already exist.\n-.RS\n-.PP\n-Except when compiling code for multiple modules, the contents of the\n-source output directory will be organized in a package hierarchy.\n-When compiling code for multiple modules, the contents of the source\n-output directory will be organized in a module hierarchy, with the\n-contents of each module in a separate subdirectory, each organized as a\n-package hierarchy.\n-.RE\n-.TP\n-\\f[V]--source\\f[R] \\f[I]release\\f[R] or \\f[V]-source\\f[R] \\f[I]release\\f[R]\n-Compiles source code according to the rules of the Java programming\n-language for the specified Java SE release.\n-The supported values of \\f[I]release\\f[R] are the current Java SE\n-release and a limited number of previous releases, detailed in the\n-command-line help.\n-.RS\n-.PP\n-If the option is not specified, the default is to compile source code\n-according to the rules of the Java programming language for the current\n-Java SE release.\n-.RE\n-.TP\n-\\f[V]--source-path\\f[R] \\f[I]path\\f[R] or \\f[V]-sourcepath\\f[R] \\f[I]path\\f[R]\n-Specifies where to find source files.\n-Except when compiling multiple modules together, this is the source code\n-path used to search for class or interface definitions.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] Classes found through the class path might be recompiled\n-when their source files are also found.\n-See \\f[B]Searching for Module, Package and Type Declarations\\f[R].\n-.RE\n-.TP\n-\\f[V]--system\\f[R] \\f[I]jdk\\f[R] | \\f[V]none\\f[R]\n-Overrides the location of system modules.\n-.TP\n-\\f[V]--target\\f[R] \\f[I]release\\f[R] or \\f[V]-target\\f[R] \\f[I]release\\f[R]\n-Generates \\f[V]class\\f[R] files suitable for the specified Java SE\n-release.\n-The supported values of \\f[I]release\\f[R] are the current Java SE\n-release and a limited number of previous releases, detailed in the\n-command-line help.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] The target release must be equal to or higher than the\n-source release.\n-(See \\f[B]\\f[VB]--source\\f[B]\\f[R].)\n-.RE\n-.TP\n-\\f[V]--upgrade-module-path\\f[R] \\f[I]path\\f[R]\n-Overrides the location of upgradeable modules.\n-.TP\n-\\f[V]-verbose\\f[R]\n-Outputs messages about what the compiler is doing.\n-Messages include information about each class loaded and each source\n-file compiled.\n-.TP\n-\\f[V]--version\\f[R] or \\f[V]-version\\f[R]\n-Prints version information.\n-.TP\n-\\f[V]-Werror\\f[R]\n-Terminates compilation when warnings occur.\n-.SS Extra Options\n-.TP\n-\\f[V]--add-exports\\f[R] \\f[I]module\\f[R]\\f[V]\/\\f[R]\\f[I]package\\f[R]\\f[V]=\\f[R]\\f[I]other-module\\f[R](\\f[V],\\f[R]\\f[I]other-module\\f[R])*\n-Specifies a package to be considered as exported from its defining\n-module to additional modules or to all unnamed modules when the value of\n-\\f[I]other-module\\f[R] is \\f[V]ALL-UNNAMED\\f[R].\n-.TP\n-\\f[V]--add-reads\\f[R] \\f[I]module\\f[R]\\f[V]=\\f[R]\\f[I]other-module\\f[R](\\f[V],\\f[R]\\f[I]other-module\\f[R])*\n-Specifies additional modules to be considered as required by a given\n-module.\n-.TP\n-\\f[V]--default-module-for-created-files\\f[R] \\f[I]module-name\\f[R]\n-Specifies the fallback target module for files created by annotation\n-processors, if none is specified or inferred.\n-.TP\n-\\f[V]--disable-line-doc-comments\\f[R]\n-Disables support for documentation comments with lines beginning \/\/\/.\n-.TP\n-\\f[V]-Djava.endorsed.dirs=\\f[R]\\f[I]dirs\\f[R]\n-Overrides the location of the endorsed standards path.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] This can only be used when compiling for releases prior\n-to JDK 9.\n-As applicable, see the descriptions in \\f[B]\\f[VB]--release\\f[B]\\f[R],\n-\\f[B]\\f[VB]-source\\f[B]\\f[R], or \\f[B]\\f[VB]-target\\f[B]\\f[R] for\n-details.\n-.RE\n-.TP\n-\\f[V]-Djava.ext.dirs=\\f[R]\\f[I]dirs\\f[R]\n-Overrides the location of installed extensions.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] This can only be used when compiling for releases prior\n-to JDK 9.\n-As applicable, see the descriptions in \\f[B]\\f[VB]--release\\f[B]\\f[R],\n-\\f[B]\\f[VB]-source\\f[B]\\f[R], or \\f[B]\\f[VB]-target\\f[B]\\f[R] for\n-details.\n-.RE\n-.TP\n-\\f[V]--patch-module\\f[R] \\f[I]module\\f[R]\\f[V]=\\f[R]\\f[I]path\\f[R]\n-Overrides or augments a module with classes and resources in JAR files\n-or directories.\n-.TP\n-\\f[V]-Xbootclasspath:\\f[R]\\f[I]path\\f[R]\n-Overrides the location of the bootstrap class files.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] This can only be used when compiling for releases prior\n-to JDK 9.\n-As applicable, see the descriptions in \\f[B]\\f[VB]--release\\f[B]\\f[R],\n-\\f[B]\\f[VB]-source\\f[B]\\f[R], or \\f[B]\\f[VB]-target\\f[B]\\f[R] for\n-details.\n-.RE\n-.TP\n-\\f[V]-Xbootclasspath\/a:\\f[R]\\f[I]path\\f[R]\n-Adds a suffix to the bootstrap class path.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] This can only be used when compiling for releases prior\n-to JDK 9.\n-As applicable, see the descriptions in \\f[B]\\f[VB]--release\\f[B]\\f[R],\n-\\f[B]\\f[VB]-source\\f[B]\\f[R], or \\f[B]\\f[VB]-target\\f[B]\\f[R] for\n-details.\n-.RE\n-.TP\n-\\f[V]-Xbootclasspath\/p:\\f[R]\\f[I]path\\f[R]\n-Adds a prefix to the bootstrap class path.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] This can only be used when compiling for releases prior\n-to JDK 9.\n-As applicable, see the descriptions in \\f[B]\\f[VB]--release\\f[B]\\f[R],\n-\\f[B]\\f[VB]-source\\f[B]\\f[R], or \\f[B]\\f[VB]-target\\f[B]\\f[R] for\n-details.\n-.RE\n-.TP\n-\\f[V]-Xdiags:\\f[R][\\f[V]compact\\f[R], \\f[V]verbose\\f[R]]\n-Selects a diagnostic mode.\n-.TP\n-\\f[V]-Xdoclint\\f[R]\n-Enables recommended checks for problems in documentation comments.\n-.TP\n-\\f[V]-Xdoclint:\\f[R](\\f[V]all\\f[R]|\\f[V]none\\f[R]|[\\f[V]-\\f[R]]\\f[I]group\\f[R])[\\f[V]\/\\f[R]\\f[I]access\\f[R]]\n-Enables or disables specific groups of checks in documentation comments.\n-.RS\n-.PP\n-\\f[I]group\\f[R] can have one of the following values:\n-\\f[V]accessibility\\f[R], \\f[V]html\\f[R], \\f[V]missing\\f[R],\n-\\f[V]reference\\f[R], \\f[V]syntax\\f[R].\n-.PP\n-The variable \\f[I]access\\f[R] specifies the minimum visibility level of\n-classes and members that the \\f[V]-Xdoclint\\f[R] option checks.\n-It can have one of the following values (in order of most to least\n-visible): \\f[V]public\\f[R], \\f[V]protected\\f[R], \\f[V]package\\f[R],\n-\\f[V]private\\f[R].\n-.PP\n-The default \\f[I]access\\f[R] level is \\f[V]private\\f[R].\n-.PP\n-When prefixed by \\f[V]doclint:\\f[R], the \\f[I]group\\f[R] names and\n-\\f[V]all\\f[R] can be used with \\f[V]\\[at]SuppressWarnings\\f[R] to\n-suppress warnings about documentation comments in parts of the code\n-being compiled.\n-.PP\n-For more information about these groups of checks, see the\n-\\f[B]DocLint\\f[R] section of the \\f[V]javadoc\\f[R] command\n-documentation.\n-The \\f[V]-Xdoclint\\f[R] option is disabled by default in the\n-\\f[V]javac\\f[R] command.\n-.PP\n-For example, the following option checks classes and members (with all\n-groups of checks) that have the access level of protected and higher\n-(which includes protected and public):\n-.RS\n-.PP\n-\\f[V]-Xdoclint:all\/protected\\f[R]\n-.RE\n-.PP\n-The following option enables all groups of checks for all access levels,\n-except it will not check for HTML errors for classes and members that\n-have the access level of package and higher (which includes package,\n-protected and public):\n-.RS\n-.PP\n-\\f[V]-Xdoclint:all,-html\/package\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-Xdoclint\/package:\\f[R][\\f[V]-\\f[R]]\\f[I]packages\\f[R](\\f[V],\\f[R][\\f[V]-\\f[R]]\\f[I]package\\f[R])*\n-Enables or disables checks in specific packages.\n-Each \\f[I]package\\f[R] is either the qualified name of a package or a\n-package name prefix followed by \\f[V].*\\f[R], which expands to all\n-sub-packages of the given package.\n-Each \\f[I]package\\f[R] can be prefixed with a hyphen (\\f[V]-\\f[R]) to\n-disable checks for a specified package or packages.\n-.RS\n-.PP\n-For more information, see the \\f[B]DocLint\\f[R] section of the\n-\\f[V]javadoc\\f[R] command documentation.\n-.RE\n-.TP\n-\\f[V]-Xlint\\f[R]\n-Enables all recommended warnings.\n-In this release, enabling all available warnings is recommended.\n-.TP\n-\\f[V]-Xlint:\\f[R][\\f[V]-\\f[R]]\\f[I]key\\f[R](\\f[V],\\f[R][\\f[V]-\\f[R]]\\f[I]key\\f[R])*\n-Supplies warnings to enable or disable, separated by comma.\n-Precede a key by a hyphen (\\f[V]-\\f[R]) to disable the specified\n-warning.\n-.RS\n-.PP\n-Supported values for \\f[I]key\\f[R] are:\n-.IP \\[bu] 2\n-\\f[V]all\\f[R]: Enables all warnings.\n-.IP \\[bu] 2\n-\\f[V]auxiliaryclass\\f[R]: Warns about an auxiliary class that is hidden\n-in a source file, and is used from other files.\n-.IP \\[bu] 2\n-\\f[V]cast\\f[R]: Warns about the use of unnecessary casts.\n-.IP \\[bu] 2\n-\\f[V]classfile\\f[R]: Warns about the issues related to classfile\n-contents.\n-.IP \\[bu] 2\n-\\f[V]dangling-doc-comments\\f[R]: Warns about extra or misplaced\n-documentation comments near the beginning of a declaration.\n-.IP \\[bu] 2\n-\\f[V]deprecation\\f[R]: Warns about the use of deprecated items.\n-.IP \\[bu] 2\n-\\f[V]dep-ann\\f[R]: Warns about the items marked as deprecated in\n-\\f[V]javadoc\\f[R] but without the \\f[V]\\[at]Deprecated\\f[R] annotation.\n-.IP \\[bu] 2\n-\\f[V]divzero\\f[R]: Warns about the division by the constant integer 0.\n-.IP \\[bu] 2\n-\\f[V]empty\\f[R]: Warns about an empty statement after \\f[V]if\\f[R].\n-.IP \\[bu] 2\n-\\f[V]exports\\f[R]: Warns about the issues regarding module exports.\n-.IP \\[bu] 2\n-\\f[V]fallthrough\\f[R]: Warns about the falling through from one case of\n-a switch statement to the next.\n-.IP \\[bu] 2\n-\\f[V]finally\\f[R]: Warns about \\f[V]finally\\f[R] clauses that do not\n-terminate normally.\n-.IP \\[bu] 2\n-\\f[V]incubating\\f[R]: Warns about the use of incubating modules.\n-.IP \\[bu] 2\n-\\f[V]lossy-conversions\\f[R]: Warns about possible lossy conversions in\n-compound assignment.\n-.IP \\[bu] 2\n-\\f[V]missing-explicit-ctor\\f[R]: Warns about missing explicit\n-constructors in public and protected classes in exported packages.\n-.IP \\[bu] 2\n-\\f[V]module\\f[R]: Warns about the module system-related issues.\n-.IP \\[bu] 2\n-\\f[V]opens\\f[R]: Warns about the issues related to module opens.\n-.IP \\[bu] 2\n-\\f[V]options\\f[R]: Warns about the issues relating to use of command\n-line options.\n-.IP \\[bu] 2\n-\\f[V]output-file-clash\\f[R]: Warns if any output file is overwritten\n-during compilation.\n-This can occur, for example, on case-insensitive filesystems.\n-.IP \\[bu] 2\n-\\f[V]overloads\\f[R]: Warns about the issues related to method overloads.\n-.IP \\[bu] 2\n-\\f[V]overrides\\f[R]: Warns about the issues related to method overrides.\n-.IP \\[bu] 2\n-\\f[V]path\\f[R]: Warns about the invalid path elements on the command\n-line.\n-.IP \\[bu] 2\n-\\f[V]preview\\f[R]: Warns about the use of preview language features.\n-.IP \\[bu] 2\n-\\f[V]processing\\f[R]: Warns about the issues related to annotation\n-processing.\n-.IP \\[bu] 2\n-\\f[V]rawtypes\\f[R]: Warns about the use of raw types.\n-.IP \\[bu] 2\n-\\f[V]removal\\f[R]: Warns about the use of an API that has been marked\n-for removal.\n-.IP \\[bu] 2\n-\\f[V]restricted\\f[R]: Warns about the use of restricted methods.\n-.IP \\[bu] 2\n-\\f[V]requires-automatic\\f[R]: Warns developers about the use of\n-automatic modules in requires clauses.\n-.IP \\[bu] 2\n-\\f[V]requires-transitive-automatic\\f[R]: Warns about automatic modules\n-in requires transitive.\n-.IP \\[bu] 2\n-\\f[V]serial\\f[R]: Warns about the serializable classes that do not\n-provide a serial version ID.\n-Also warns about access to non-public members from a serializable\n-element.\n-.IP \\[bu] 2\n-\\f[V]static\\f[R]: Warns about the accessing a static member using an\n-instance.\n-.IP \\[bu] 2\n-\\f[V]strictfp\\f[R]: Warns about unnecessary use of the\n-\\f[V]strictfp\\f[R] modifier.\n-.IP \\[bu] 2\n-\\f[V]synchronization\\f[R]: Warns about synchronization attempts on\n-instances of value-based classes.\n-.IP \\[bu] 2\n-\\f[V]text-blocks\\f[R]: Warns about inconsistent white space characters\n-in text block indentation.\n-.IP \\[bu] 2\n-\\f[V]this-escape\\f[R]: Warns about constructors leaking \\f[V]this\\f[R]\n-prior to subclass initialization.\n-.IP \\[bu] 2\n-\\f[V]try\\f[R]: Warns about the issues relating to the use of try blocks\n-(that is, try-with-resources).\n-.IP \\[bu] 2\n-\\f[V]unchecked\\f[R]: Warns about the unchecked operations.\n-.IP \\[bu] 2\n-\\f[V]varargs\\f[R]: Warns about the potentially unsafe \\f[V]vararg\\f[R]\n-methods.\n-.IP \\[bu] 2\n-\\f[V]none\\f[R]: Disables all warnings.\n-.PP\n-With the exception of \\f[V]all\\f[R] and \\f[V]none\\f[R], the keys can be\n-used with the \\f[V]\\[at]SuppressWarnings\\f[R] annotation to suppress\n-warnings in a part of the source code being compiled.\n-.PP\n-See \\f[B]Examples of Using -Xlint keys\\f[R].\n-.RE\n-.TP\n-\\f[V]-Xmaxerrs\\f[R] \\f[I]number\\f[R]\n-Sets the maximum number of errors to print.\n-.TP\n-\\f[V]-Xmaxwarns\\f[R] \\f[I]number\\f[R]\n-Sets the maximum number of warnings to print.\n-.TP\n-\\f[V]-Xpkginfo:\\f[R][\\f[V]always\\f[R], \\f[V]legacy\\f[R], \\f[V]nonempty\\f[R]]\n-Specifies when and how the \\f[V]javac\\f[R] command generates\n-\\f[V]package-info.class\\f[R] files from \\f[V]package-info.java\\f[R]\n-files using one of the following options:\n-.RS\n-.TP\n-\\f[V]always\\f[R]\n-Generates a \\f[V]package-info.class\\f[R] file for every\n-\\f[V]package-info.java\\f[R] file.\n-This option may be useful if you use a build system such as Ant, which\n-checks that each \\f[V].java\\f[R] file has a corresponding\n-\\f[V].class\\f[R] file.\n-.TP\n-\\f[V]legacy\\f[R]\n-Generates a \\f[V]package-info.class\\f[R] file only if\n-\\f[V]package-info.java\\f[R] contains annotations.\n-This option does not generate a \\f[V]package-info.class\\f[R] file if\n-\\f[V]package-info.java\\f[R] contains only comments.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] A \\f[V]package-info.class\\f[R] file might be generated\n-but be empty if all the annotations in the \\f[V]package-info.java\\f[R]\n-file have \\f[V]RetentionPolicy.SOURCE\\f[R].\n-.RE\n-.TP\n-\\f[V]nonempty\\f[R]\n-Generates a \\f[V]package-info.class\\f[R] file only if\n-\\f[V]package-info.java\\f[R] contains annotations with\n-\\f[V]RetentionPolicy.CLASS\\f[R] or \\f[V]RetentionPolicy.RUNTIME\\f[R].\n-.RE\n-.TP\n-\\f[V]-Xplugin:\\f[R]\\f[I]name\\f[R] \\f[I]args\\f[R]\n-Specifies the name and optional arguments for a plug-in to be run.\n-If \\f[I]args\\f[R] are provided, \\f[I]name\\f[R] and \\f[I]args\\f[R] should\n-be quoted or otherwise escape the whitespace characters between the name\n-and all the arguments.\n-For details on the API for a plugin, see the API documentation for\n-\\f[B]jdk.compiler\/com.sun.source.util.Plugin\\f[R].\n-.TP\n-\\f[V]-Xprefer:\\f[R][\\f[V]source\\f[R], \\f[V]newer\\f[R]]\n-Specifies which file to read when both a source file and class file are\n-found for an implicitly compiled class using one of the following\n-options.\n-See \\f[B]Searching for Module, Package and Type Declarations\\f[R].\n-.RS\n-.IP \\[bu] 2\n-\\f[V]-Xprefer:newer\\f[R]: Reads the newer of the source or class files\n-for a type (default).\n-.IP \\[bu] 2\n-\\f[V]-Xprefer:source\\f[R] : Reads the source file.\n-Use \\f[V]-Xprefer:source\\f[R] when you want to be sure that any\n-annotation processors can access annotations declared with a retention\n-policy of \\f[V]SOURCE\\f[R].\n-.RE\n-.TP\n-\\f[V]-Xprint\\f[R]\n-Prints a textual representation of specified types for debugging\n-purposes.\n-This does not perform annotation processing or compilation.\n-The format of the output could change.\n-.TP\n-\\f[V]-XprintProcessorInfo\\f[R]\n-Prints information about which annotations a processor is asked to\n-process.\n-.TP\n-\\f[V]-XprintRounds\\f[R]\n-Prints information about initial and subsequent annotation processing\n-rounds.\n-.TP\n-\\f[V]-Xstdout\\f[R] \\f[I]filename\\f[R]\n-Sends compiler messages to the named file.\n-By default, compiler messages go to \\f[V]System.err\\f[R].\n-.SH ENVIRONMENT VARIABLES\n-.SS CLASSPATH\n-.PP\n-If the \\f[B]\\f[VB]--class-path\\f[B]\\f[R] option or any of its alternate\n-forms are not specified, the class path will default to the value of the\n-\\f[V]CLASSPATH\\f[R] environment variable if it is set.\n-However, it is recommended that this environment variable should\n-\\f[I]not\\f[R] be set, and that the \\f[V]--class-path\\f[R] option should\n-be used to provide an explicit value for the class path when one is\n-required.\n-.SS JDK_JAVAC_OPTIONS\n-.PP\n-The content of the \\f[V]JDK_JAVAC_OPTIONS\\f[R] environment variable,\n-separated by white-spaces ( ) or white-space characters\n-(\\f[V]\\[rs]n\\f[R], \\f[V]\\[rs]t\\f[R], \\f[V]\\[rs]r\\f[R], or\n-\\f[V]\\[rs]f\\f[R]) is prepended to the command line arguments passed to\n-\\f[V]javac\\f[R] as a list of arguments.\n-.PP\n-The encoding requirement for the environment variable is the same as the\n-\\f[V]javac\\f[R] command line on the system.\n-\\f[V]JDK_JAVAC_OPTIONS\\f[R] environment variable content is treated in\n-the same manner as that specified in the command line.\n-.PP\n-Single quotes (\\f[V]\\[aq]\\f[R]) or double quotes (\\f[V]\\[dq]\\f[R]) can\n-be used to enclose arguments that contain whitespace characters.\n-All content between the open quote and the first matching close quote\n-are preserved by simply removing the pair of quotes.\n-In case a matching quote is not found, the launcher will abort with an\n-error message.\n-\\f[V]\\[at]\\f[R]\\f[I]files\\f[R] are supported as they are specified in\n-the command line.\n-However, as in \\f[V]\\[at]\\f[R]\\f[I]files\\f[R], use of a wildcard is not\n-supported.\n-.PP\n-\\f[B]Examples of quoting arguments containing white spaces:\\f[R]\n-.RS\n-.PP\n-\\f[V]export JDK_JAVAC_OPTIONS=\\[aq]\\[at]\\[dq]C:\\[rs]white spaces\\[rs]argfile\\[dq]\\[aq]\\f[R]\n-.RE\n-.RS\n-.PP\n-\\f[V]export JDK_JAVAC_OPTIONS=\\[aq]\\[dq]\\[at]C:\\[rs]white spaces\\[rs]argfile\\[dq]\\[aq]\\f[R]\n-.RE\n-.RS\n-.PP\n-\\f[V]export JDK_JAVAC_OPTIONS=\\[aq]\\[at]C:\\[rs]\\[dq]white spaces\\[dq]\\[rs]argfile\\[aq]\\f[R]\n-.RE\n-.SH COMMAND-LINE ARGUMENT FILES\n-.PP\n-An argument file can include command-line options and source file names\n-in any combination.\n-The arguments within a file can be separated by spaces or new line\n-characters.\n-If a file name contains embedded spaces, then put the whole file name in\n-double quotation marks.\n-.PP\n-File names within an argument file are relative to the current\n-directory, not to the location of the argument file.\n-Wildcards (\\f[V]*\\f[R]) are not allowed in these lists (such as for\n-specifying \\f[V]*.java\\f[R]).\n-Use of the at sign (\\f[V]\\[at]\\f[R]) to recursively interpret files is\n-not supported.\n-The \\f[V]-J\\f[R] options are not supported because they\\[aq]re passed to\n-the launcher, which does not support argument files.\n-.PP\n-When executing the \\f[V]javac\\f[R] command, pass in the path and name of\n-each argument file with the at sign (\\f[V]\\[at]\\f[R]) leading character.\n-When the \\f[V]javac\\f[R] command encounters an argument beginning with\n-the at sign (\\f[V]\\[at]\\f[R]), it expands the contents of that file into\n-the argument list.\n-.SS Examples of Using javac \\[at]filename\n-.TP\n-Single Argument File\n-You could use a single argument file named \\f[V]argfile\\f[R] to hold all\n-\\f[V]javac\\f[R] arguments:\n-.RS\n-.RS\n-.PP\n-\\f[V]javac \\[at]argfile\\f[R]\n-.RE\n-.PP\n-This argument file could contain the contents of both files shown in the\n-following \\f[B]Two Argument Files\\f[R] example.\n-.RE\n-.TP\n-Two Argument Files\n-You can create two argument files: one for the \\f[V]javac\\f[R] options\n-and the other for the source file names.\n-Note that the following lists have no line-continuation characters.\n-.RS\n-.PP\n-Create a file named \\f[V]options\\f[R] that contains the following:\n-.PP\n-\\f[B]Linux and macOS:\\f[R]\n-.IP\n-.nf\n-\\f[CB]\n--d classes\n--g\n--sourcepath \/java\/pubs\/ws\/1.3\/src\/share\/classes\n-\\f[R]\n-.fi\n-.PP\n-\\f[B]Windows:\\f[R]\n-.IP\n-.nf\n-\\f[CB]\n--d classes\n--g\n--sourcepath C:\\[rs]java\\[rs]pubs\\[rs]ws\\[rs]1.3\\[rs]src\\[rs]share\\[rs]classes\n-\\f[R]\n-.fi\n-.PP\n-Create a file named \\f[V]sources\\f[R] that contains the following:\n-.IP\n-.nf\n-\\f[CB]\n-MyClass1.java\n-MyClass2.java\n-MyClass3.java\n-\\f[R]\n-.fi\n-.PP\n-Then, run the \\f[V]javac\\f[R] command as follows:\n-.RS\n-.PP\n-\\f[V]javac \\[at]options \\[at]sources\\f[R]\n-.RE\n-.RE\n-.TP\n-Argument Files with Paths\n-The argument files can have paths, but any file names inside the files\n-are relative to the current working directory (not \\f[V]path1\\f[R] or\n-\\f[V]path2\\f[R]):\n-.RS\n-.RS\n-.PP\n-\\f[V]javac \\[at]path1\/options \\[at]path2\/sources\\f[R]\n-.RE\n-.RE\n-.SH ARRANGEMENT OF SOURCE CODE\n-.PP\n-In the Java language, classes and interfaces can be organized into\n-packages, and packages can be organized into modules.\n-\\f[V]javac\\f[R] expects that the physical arrangement of source files in\n-directories of the file system will mirror the organization of classes\n-into packages, and packages into modules.\n-.PP\n-It is a widely adopted convention that module names and package names\n-begin with a lower-case letter, and that class names begin with an\n-upper-case letter.\n-.SS Arrangement of Source Code for a Package\n-.PP\n-When classes and interfaces are organized into a package, the package is\n-represented as a directory, and any subpackages are represented as\n-subdirectories.\n-.PP\n-For example:\n-.IP \\[bu] 2\n-The package \\f[V]p\\f[R] is represented as a directory called\n-\\f[V]p\\f[R].\n-.IP \\[bu] 2\n-The package \\f[V]p.q\\f[R] -- that is, the subpackage \\f[V]q\\f[R] of\n-package \\f[V]p\\f[R] -- is represented as the subdirectory \\f[V]q\\f[R] of\n-directory \\f[V]p\\f[R].\n-The directory tree representing package \\f[V]p.q\\f[R] is therefore\n-\\f[V]p\\[rs]q\\f[R] on Windows, and \\f[V]p\/q\\f[R] on other systems.\n-.IP \\[bu] 2\n-The package \\f[V]p.q.r\\f[R] is represented as the directory tree\n-\\f[V]p\\[rs]q\\[rs]r\\f[R] (on Windows) or \\f[V]p\/q\/r\\f[R] (on other\n-systems).\n-.PP\n-Within a directory or subdirectory, \\f[V].java\\f[R] files represent\n-classes and interfaces in the corresponding package or subpackage.\n-.PP\n-For example:\n-.IP \\[bu] 2\n-The class \\f[V]X\\f[R] declared in package \\f[V]p\\f[R] is represented by\n-the file \\f[V]X.java\\f[R] in the \\f[V]p\\f[R] directory.\n-.IP \\[bu] 2\n-The class \\f[V]Y\\f[R] declared in package \\f[V]p.q\\f[R] is represented\n-by the file \\f[V]Y.java\\f[R] in the \\f[V]q\\f[R] subdirectory of\n-directory \\f[V]p\\f[R].\n-.IP \\[bu] 2\n-The class \\f[V]Z\\f[R] declared in package \\f[V]p.q.r\\f[R] is represented\n-by the file \\f[V]Z.java\\f[R] in the \\f[V]r\\f[R] subdirectory of\n-\\f[V]p\\[rs]q\\f[R] (on Windows) or \\f[V]p\/q\\f[R] (on other systems).\n-.PP\n-In some situations, it is convenient to split the code into separate\n-directories, each structured as described above, and the aggregate list\n-of directories specified to \\f[V]javac\\f[R].\n-.SS Arrangement of Source Code for a Module\n-.PP\n-In the Java language, a module is a set of packages designed for reuse.\n-In addition to \\f[V].java\\f[R] files for classes and interfaces, each\n-module has a source file called \\f[V]module-info.java\\f[R] which:\n-.IP \"1.\" 3\n-declares the module\\[aq]s name;\n-.IP \"2.\" 3\n-lists the packages exported by the module (to allow reuse by other\n-modules);\n-.IP \"3.\" 3\n-lists other modules required by the module (to reuse their exported\n-packages).\n-.PP\n-When packages are organized into a module, the module is represented by\n-one or more directories representing the packages in the module, one of\n-which contains the \\f[V]module-info.java\\f[R] file.\n-It may be convenient, but it is not required, to use a single directory,\n-named after the module, to contain the \\f[V]module-info.java\\f[R] file\n-alongside the directory tree which represents the packages in the module\n-(i.e., the \\f[I]package hierarchy\\f[R] described above).\n-The exact arrangement of source code for a module is typically dictated\n-by the conventions adopted by a development environment (IDE) or build\n-system.\n-.PP\n-For example:\n-.IP \\[bu] 2\n-The module \\f[V]a.b.c\\f[R] may be represented by the directory\n-\\f[V]a.b.c\\f[R], on all systems.\n-.IP \\[bu] 2\n-The module\\[aq]s declaration is represented by the file\n-\\f[V]module-info.java\\f[R] in the \\f[V]a.b.c\\f[R] directory.\n-.IP \\[bu] 2\n-If the module contains package \\f[V]p.q.r\\f[R], then the \\f[V]a.b.c\\f[R]\n-directory contains the directory tree \\f[V]p\\[rs]q\\[rs]r\\f[R] (on\n-Windows) or \\f[V]p\/q\/r\\f[R] (on other systems).\n-.PP\n-The development environment may prescribe some directory hierarchy\n-between the directory named for the module and the source files to be\n-read by \\f[V]javac\\f[R].\n-.PP\n-For example:\n-.IP \\[bu] 2\n-The module \\f[V]a.b.c\\f[R] may be represented by the directory\n-\\f[V]a.b.c\\f[R]\n-.IP \\[bu] 2\n-The module\\[aq]s declaration and the module\\[aq]s packages may be in\n-some subdirectory of \\f[V]a.b.c\\f[R], such as\n-\\f[V]src\\[rs]main\\[rs]java\\f[R] (on Windows) or \\f[V]src\/main\/java\\f[R]\n-(on other systems).\n-.SH CONFIGURING A COMPILATION\n-.PP\n-This section describes how to configure \\f[V]javac\\f[R] to perform a\n-basic compilation.\n-.PP\n-See \\f[B]Configuring the Module System\\f[R] for additional details for\n-use when compiling for a release of the platform that supports modules.\n-.SS Source Files\n-.IP \\[bu] 2\n-Specify the source files to be compiled on the command line.\n-.PP\n-If there are no compilation errors, the corresponding class files will\n-be placed in the \\f[B]output directory\\f[R].\n-.PP\n-Some systems may limit the amount you can put on a command line; to work\n-around those limits, you can use \\f[B]argument files\\f[R].\n-.PP\n-When compiling code for modules, you can also specify source files\n-indirectly, by using the \\f[B]\\f[VB]--module\\f[B]\\f[R] or \\f[V]-m\\f[R]\n-option.\n-.SS Output Directory\n-.IP \\[bu] 2\n-Use the \\f[B]\\f[VB]-d\\f[B]\\f[R] option to specify an output directory in\n-which to put the compiled class files.\n-.PP\n-This will normally be organized in a \\f[B]package hierarchy\\f[R], unless\n-you are compiling source code from multiple modules, in which case it\n-will be organized as a \\f[B]module hierarchy\\f[R].\n-.PP\n-When the compilation has been completed, if you are compiling one or\n-more modules, you can place the output directory on the module path for\n-the Java \\f[B]launcher\\f[R]; otherwise, you can place the place the\n-output directory on the class path for the Java launcher.\n-.SS Precompiled Code\n-.PP\n-The code to be compiled may refer to libraries beyond what is provided\n-by the platform.\n-If so, you must place these libraries on the class path or module path.\n-If the library code is not in a module, place it on the class path; if\n-it is in a module, place it on the module path.\n-.IP \\[bu] 2\n-Use the \\f[B]\\f[VB]--class-path\\f[B]\\f[R] option to specify libraries to\n-be placed on the class path.\n-Locations on the class path should be organized in a \\f[B]package\n-hierarchy\\f[R].\n-You can also use alternate forms of the option: \\f[V]-classpath\\f[R] or\n-\\f[V]-cp\\f[R].\n-.IP \\[bu] 2\n-Use the \\f[B]\\f[VB]--module-path\\f[B]\\f[R] option to specify libraries\n-to be placed on the module path.\n-Locations on the module path should either be modules or directories of\n-modules.\n-You can also use an alternate form of the option: \\f[V]-p\\f[R].\n-.RS 2\n-.PP\n-See \\f[B]Configuring the Module System\\f[R] for details on how to modify\n-the default configuration of library modules.\n-.RE\n-.PP\n-\\f[B]Note\\f[R]: the options for the class path and module path are not\n-mutually exclusive, although it is not common to specify the class path\n-when compiling code for one or more modules.\n-.SS Additional Source Files\n-.PP\n-The code to be compiled may refer to types in additional source files\n-that are not specified on the command line.\n-If so, you must put those source files on either the source path or\n-module path.\n-You can only specify one of these options: if you are not compiling code\n-for a module, or if you are only compiling code for a single module, use\n-the source path; if you are compiling code for multiple modules, use the\n-module source path.\n-.IP \\[bu] 2\n-Use the \\f[B]\\f[VB]--source-path\\f[B]\\f[R] option to specify the\n-locations of additional source files that may be read by javac.\n-Locations on the source path should be organized in a \\f[B]package\n-hierarchy\\f[R].\n-You can also use an alternate form of the option: \\f[V]-sourcepath\\f[R].\n-.IP \\[bu] 2\n-Use the \\f[B]\\f[VB]--module-source-path\\f[B]\\f[R] option one or more\n-times to specify the location of additional source files in different\n-modules that may be read by javac, or when compiling source files in\n-multiple modules.\n-You can either specify the locations for each module\n-\\f[B]individually\\f[R], or you can organize the source files so that you\n-can specify the locations all \\f[B]together\\f[R].\n-For more details, see \\f[B]The Module Source Path Option\\f[R].\n-.PP\n-If you want to be able to refer to types in additional source files but\n-do not want them to be compiled, use the \\f[B]\\f[VB]-implicit\\f[B]\\f[R]\n-option.\n-.PP\n-\\f[B]Note\\f[R]: if you are compiling code for multiple modules, you must\n-always specify a module source path, and all source files specified on\n-the command line must be in one of the directories on the module source\n-path, or in a subdirectory thereof.\n-.SS Example of Compiling Multiple Source Files\n-.PP\n-This example compiles the \\f[V]Aloha.java\\f[R], \\f[V]GutenTag.java\\f[R],\n-\\f[V]Hello.java\\f[R], and \\f[V]Hi.java\\f[R] source files in the\n-\\f[V]greetings\\f[R] package.\n-.PP\n-\\f[B]Linux and macOS:\\f[R]\n-.IP\n-.nf\n-\\f[CB]\n-% javac greetings\/*.java\n-% ls greetings\n-Aloha.class         GutenTag.class      Hello.class         Hi.class\n-Aloha.java          GutenTag.java       Hello.java          Hi.java\n-\\f[R]\n-.fi\n-.PP\n-\\f[B]Windows:\\f[R]\n-.IP\n-.nf\n-\\f[CB]\n-C:\\[rs]>javac greetings\\[rs]*.java\n-C:\\[rs]>dir greetings\n-Aloha.class         GutenTag.class      Hello.class         Hi.class\n-Aloha.java          GutenTag.java       Hello.java          Hi.java\n-\\f[R]\n-.fi\n-.SS Example of Specifying a User Class Path\n-.PP\n-After changing one of the source files in the previous example,\n-recompile it:\n-.PP\n-\\f[B]Linux and macOS:\\f[R]\n-.IP\n-.nf\n-\\f[CB]\n-pwd\n-\/examples\n-javac greetings\/Hi.java\n-\\f[R]\n-.fi\n-.PP\n-\\f[B]Windows:\\f[R]\n-.IP\n-.nf\n-\\f[CB]\n-C:\\[rs]>cd\n-\\[rs]examples\n-C:\\[rs]>javac greetings\\[rs]Hi.java\n-\\f[R]\n-.fi\n-.PP\n-Because \\f[V]greetings.Hi\\f[R] refers to other classes in the\n-\\f[V]greetings\\f[R] package, the compiler needs to find these other\n-classes.\n-The previous example works because the default user class path is the\n-directory that contains the package directory.\n-If you want to recompile this file without concern for which directory\n-you are in, then add the examples directory to the user class path by\n-setting \\f[V]CLASSPATH\\f[R].\n-This example uses the \\f[V]-classpath\\f[R] option.\n-.PP\n-\\f[B]Linux and macOS:\\f[R]\n-.RS\n-.PP\n-\\f[V]javac -classpath \/examples \/examples\/greetings\/Hi.java\\f[R]\n-.RE\n-.PP\n-\\f[B]Windows:\\f[R]\n-.RS\n-.PP\n-\\f[V]C:\\[rs]>javac -classpath \\[rs]examples \\[rs]examples\\[rs]greetings\\[rs]Hi.java\\f[R]\n-.RE\n-.PP\n-If you change \\f[V]greetings.Hi\\f[R] to use a banner utility, then that\n-utility also needs to be accessible through the user class path.\n-.PP\n-\\f[B]Linux and macOS:\\f[R]\n-.IP\n-.nf\n-\\f[CB]\n-javac -classpath \/examples:\/lib\/Banners.jar \\[rs]\n-            \/examples\/greetings\/Hi.java\n-\\f[R]\n-.fi\n-.PP\n-\\f[B]Windows:\\f[R]\n-.IP\n-.nf\n-\\f[CB]\n-C:\\[rs]>javac -classpath \\[rs]examples;\\[rs]lib\\[rs]Banners.jar \\[ha]\n-            \\[rs]examples\\[rs]greetings\\[rs]Hi.java\n-\\f[R]\n-.fi\n-.PP\n-To execute a class in the \\f[V]greetings\\f[R] package, the program needs\n-access to the \\f[V]greetings\\f[R] package, and to the classes that the\n-\\f[V]greetings\\f[R] classes use.\n-.PP\n-\\f[B]Linux and macOS:\\f[R]\n-.RS\n-.PP\n-\\f[V]java -classpath \/examples:\/lib\/Banners.jar greetings.Hi\\f[R]\n-.RE\n-.PP\n-\\f[B]Windows:\\f[R]\n-.RS\n-.PP\n-\\f[V]C:\\[rs]>java -classpath \\[rs]examples;\\[rs]lib\\[rs]Banners.jar greetings.Hi\\f[R]\n-.RE\n-.SH CONFIGURING THE MODULE SYSTEM\n-.PP\n-If you want to include additional modules in your compilation, use the\n-\\f[B]\\f[VB]--add-modules\\f[B]\\f[R] option.\n-This may be necessary when you are compiling code that is not in a\n-module, or which is in an automatic module, and the code refers to API\n-in the additional modules.\n-.PP\n-If you want to restrict the set of modules in your compilation, use the\n-\\f[B]\\f[VB]--limit-modules\\f[B]\\f[R] option.\n-This may be useful if you want to ensure that the code you are compiling\n-is capable of running on a system with a limited set of modules\n-installed.\n-.PP\n-If you want to break encapsulation and specify that additional packages\n-should be considered as exported from a module, use the\n-\\f[B]\\f[VB]--add-exports\\f[B]\\f[R] option.\n-This may be useful when performing white-box testing; relying on access\n-to internal API in production code is strongly discouraged.\n-.PP\n-If you want to specify that additional packages should be considered as\n-required by a module, use the \\f[B]\\f[VB]--add-reads\\f[B]\\f[R] option.\n-This may be useful when performing white-box testing; relying on access\n-to internal API in production code is strongly discouraged.\n-.PP\n-You can patch additional content into any module using the\n-\\f[B]\\f[VB]--patch-module\\f[B]\\f[R] option.\n-See [Patching a Module] for more details.\n-.SH SEARCHING FOR MODULE, PACKAGE AND TYPE DECLARATIONS\n-.PP\n-To compile a source file, the compiler often needs information about a\n-module or type, but the declaration is not in the source files specified\n-on the command line.\n-.PP\n-\\f[V]javac\\f[R] needs type information for every class or interface\n-used, extended, or implemented in the source file.\n-This includes classes and interfaces not explicitly mentioned in the\n-source file, but that provide information through inheritance.\n-.PP\n-For example, when you create a subclass of \\f[V]java.awt.Window\\f[R],\n-you are also using the ancestor classes of \\f[V]Window\\f[R]:\n-\\f[V]java.awt.Container\\f[R], \\f[V]java.awt.Component\\f[R], and\n-\\f[V]java.lang.Object\\f[R].\n-.PP\n-When compiling code for a module, the compiler also needs to have\n-available the declaration of that module.\n-.PP\n-A successful search may produce a class file, a source file, or both.\n-If both are found, then you can use the \\f[B]\\f[VB]-Xprefer\\f[B]\\f[R]\n-option to instruct the compiler which to use.\n-.PP\n-If a search finds and uses a source file, then by default\n-\\f[V]javac\\f[R] compiles that source file.\n-This behavior can be altered with \\f[B]\\f[VB]-implicit\\f[B]\\f[R].\n-.PP\n-The compiler might not discover the need for some type information until\n-after annotation processing completes.\n-When the type information is found in a source file and no\n-\\f[B]\\f[VB]-implicit\\f[B]\\f[R] option is specified, the compiler gives a\n-warning that the file is being compiled without being subject to\n-annotation processing.\n-To disable the warning, either specify the file on the command line (so\n-that it will be subject to annotation processing) or use the\n-\\f[B]\\f[VB]-implicit\\f[B]\\f[R] option to specify whether or not class\n-files should be generated for such source files.\n-.PP\n-The way that \\f[V]javac\\f[R] locates the declarations of those types\n-depends on whether the reference exists within code for a module or not.\n-.SS Searching Package Oriented Paths\n-.PP\n-When searching for a source or class file on a path composed of package\n-oriented locations, \\f[V]javac\\f[R] will check each location on the path\n-in turn for the possible presence of the file.\n-The first occurrence of a particular file shadows (hides) any subsequent\n-occurrences of like-named files.\n-This shadowing does not affect any search for any files with a different\n-name.\n-This can be convenient when searching for source files, which may be\n-grouped in different locations, such as shared code, platform-specific\n-code and generated code.\n-It can also be useful when injecting alternate versions of a class file\n-into a package, to debugging or other instrumentation reasons.\n-But, it can also be dangerous, such as when putting incompatible\n-different versions of a library on the class path.\n-.SS Searching Module Oriented Paths\n-.PP\n-Prior to scanning any module paths for any package or type declarations,\n-\\f[V]javac\\f[R] will lazily scan the following paths and locations to\n-determine the modules that will be used in the compilation.\n-.IP \\[bu] 2\n-The module source path (see the\n-\\f[B]\\f[VB]--module-source-path\\f[B]\\f[R] option)\n-.IP \\[bu] 2\n-The path for upgradeable modules (see the\n-\\f[B]\\f[VB]--upgrade-module-path\\f[B]\\f[R] option)\n-.IP \\[bu] 2\n-The system modules (see the \\f[B]\\f[VB]--system\\f[B]\\f[R] option)\n-.IP \\[bu] 2\n-The user module path ( see the \\f[B]\\f[VB]--module-path\\f[B]\\f[R]\n-option)\n-.PP\n-For any module, the first occurrence of the module during the scan\n-completely shadows (hides) any subsequent appearance of a like-named\n-module.\n-While locating the modules, \\f[V]javac\\f[R] is able to determine the\n-packages exported by the module and to associate with each module a\n-package oriented path for the contents of the module.\n-For any previously compiled module, this path will typically be a single\n-entry for either a directory or a file that provides an internal\n-directory-like hierarchy, such as a JAR file.\n-Thus, when searching for a type that is in a package that is known to be\n-exported by a module, \\f[V]javac\\f[R] can locate the declaration\n-directly and efficiently.\n-.SS Searching for the Declaration of a Module\n-.PP\n-If the module has been previously compiled, the module declaration is\n-located in a file named \\f[V]module-info.class\\f[R] in the root of the\n-package hierarchy for the content of the module.\n-.PP\n-If the module is one of those currently being compiled, the module\n-declaration will be either the file named \\f[V]module-info.class\\f[R] in\n-the root of the package hierarchy for the module in the class output\n-directory, or the file named \\f[V]module-info.java\\f[R] in one of the\n-locations on the source path or one the module source path for the\n-module.\n-.SS Searching for the Declaration of a Type When the Reference is not in a Module\n-.PP\n-When searching for a type that is referenced in code that is not in a\n-module, \\f[V]javac\\f[R] will look in the following places:\n-.IP \\[bu] 2\n-The platform classes (or the types in exported packages of the platform\n-modules) (This is for compiled class files only.)\n-.IP \\[bu] 2\n-Types in exported packages of any modules on the module path, if\n-applicable.\n-(This is for compiled class files only.)\n-.IP \\[bu] 2\n-Types in packages on the class path and\/or source path:\n-.RS 2\n-.IP \\[bu] 2\n-If both are specified, \\f[V]javac\\f[R] looks for compiled class files on\n-the class path and for source files on the source path.\n-.IP \\[bu] 2\n-If the class path is specified, but not source path, \\f[V]javac\\f[R]\n-looks for both compiled class files and source files on the class path.\n-.IP \\[bu] 2\n-If the class path is not specified, it defaults to the current\n-directory.\n-.RE\n-.PP\n-When looking for a type on the class path and\/or source path, if both a\n-compiled class file and a source file are found, the most recently\n-modified file will be used by default.\n-If the source file is newer, it will be compiled and will may override\n-any previously compiled version of the file.\n-You can use the \\f[B]\\f[VB]-Xprefer\\f[B]\\f[R] option to override the\n-default behavior.\n-.SS Searching for the Declaration of a Type When the Reference is in a Module\n-.PP\n-When searching for a type that is referenced in code in a module,\n-\\f[V]javac\\f[R] will examine the declaration of the enclosing module to\n-determine if the type is in a package that is exported from another\n-module that is readable by the enclosing module.\n-If so, \\f[V]javac\\f[R] will simply and directly go to the definition of\n-that module to find the definition of the required type.\n-Unless the module is another of the modules being compiled,\n-\\f[V]javac\\f[R] will only look for compiled class files files.\n-In other words, \\f[V]javac\\f[R] will not look for source files in\n-platform modules or modules on the module path.\n-.PP\n-If the type being referenced is not in some other readable module,\n-\\f[V]javac\\f[R] will examine the module being compiled to try and find\n-the declaration of the type.\n-\\f[V]javac\\f[R] will look for the declaration of the type as follows:\n-.IP \\[bu] 2\n-Source files specified on the command line or on the source path or\n-module source path.\n-.IP \\[bu] 2\n-Previously compiled files in the output directory.\n-.SH DIRECTORY HIERARCHIES\n-.PP\n-\\f[V]javac\\f[R] generally assumes that source files and compiled class\n-files will be organized in a file system directory hierarchy or in a\n-type of file that supports in an internal directory hierarchy, such as a\n-JAR file.\n-Three different kinds of hierarchy are supported: a \\f[I]package\n-hierarchy\\f[R], a \\f[I]module hierarchy\\f[R], and a \\f[I]module source\n-hierarchy\\f[R].\n-.PP\n-While \\f[V]javac\\f[R] is fairly relaxed about the organization of source\n-code, beyond the expectation that source will be organized in one or\n-package hierarchies, and can generally accommodate organizations\n-prescribed by development environments and build tools, Java tools in\n-general, and \\f[V]javac\\f[R] and the Java launcher in particular, are\n-more stringent regarding the organization of compiled class files, and\n-will be organized in package hierarchies or module hierarchies, as\n-appropriate.\n-.PP\n-The location of these hierarchies are specified to \\f[V]javac\\f[R] with\n-command-line options, whose names typically end in \\[dq]path\\[dq], like\n-\\f[B]\\f[VB]--source-path\\f[B]\\f[R] or \\f[B]\\f[VB]--class-path\\f[B]\\f[R].\n-Also as a general rule, path options whose name includes the word\n-\\f[V]module\\f[R], like \\f[B]\\f[VB]--module-path\\f[B]\\f[R], are used to\n-specify module hierarchies, although some module-related path options\n-allow a package hierarchy to be specified on a per-module basis.\n-All other path options are used to specify package hierarchies.\n-.SS Package Hierarchy\n-.PP\n-In a package hierarchy, directories and subdirectories are used to\n-represent the component parts of the package name, with the source file\n-or compiled class file for a type being stored as a file with an\n-extension of \\f[V].java\\f[R] or \\f[V].class\\f[R] in the most nested\n-directory.\n-.PP\n-For example, in a package hierarchy, the source file for a class\n-\\f[V]com.example.MyClass\\f[R] will be stored in the file\n-\\f[I]com\/example\/MyClass.java\\f[R]\n-.SS Module Hierarchy\n-.PP\n-In a module hierarchy, the first level of directories are named for the\n-modules in the hierarchy; within each of those directories the contents\n-of the module are organized in package hierarchies.\n-.PP\n-For example, in a module hierarchy, the compiled class file for a type\n-called \\f[V]com.example.MyClass\\f[R] in a module called\n-\\f[V]my.library\\f[R] will be stored in\n-\\f[I]my.library\/com\/example\/MyClass.class\\f[R].\n-.PP\n-The various output directories used by \\f[V]javac\\f[R] (the class output\n-directory, the source output directory, and native header output\n-directory) will all be organized in a module hierarchy when multiple\n-modules are being compiled.\n-.SS Module Source Hierarchy\n-.PP\n-Although the source for each individual module should always be\n-organized in a package hierarchy, it may be convenient to group those\n-hierarchies into a module source hierarchy.\n-This is similar to a module hierarchy, except that there may be\n-intervening directories between the directory for the module and the\n-directory that is the root of the package hierarchy for the source code\n-of the module.\n-.PP\n-For example, in a module source hierarchy, the source file for a type\n-called \\f[V]com.example.MyClass\\f[R] in a module called\n-\\f[V]my.library\\f[R] may be stored in a file such as\n-\\f[I]my.library\/src\/main\/java\/com\/example\/MyClass.java\\f[R].\n-.SH THE MODULE SOURCE PATH OPTION\n-.PP\n-The \\f[B]\\f[VB]--module-source-path\\f[B]\\f[R] option has two forms: a\n-\\f[I]module-specific form\\f[R], in which a package path is given for\n-each module containing code to be compiled, and a\n-\\f[I]module-pattern\\f[R] form, in which the source path for each module\n-is specified by a pattern.\n-The module-specific form is generally simpler to use when only a small\n-number of modules are involved; the module-pattern form may be more\n-convenient when the number of modules is large and the modules are\n-organized in a regular manner that can be described by a pattern.\n-.PP\n-Multiple instances of the \\f[V]--module-source-path\\f[R] option may be\n-given, each one using either the module-pattern form or the\n-module-specific form, subject to the following limitations:\n-.IP \\[bu] 2\n-the module-pattern form may be used at most once\n-.IP \\[bu] 2\n-the module-specific form may be used at most once for any given module\n-.PP\n-If the module-specific form is used for any module, the associated\n-search path overrides any path that might otherwise have been inferred\n-from the module-pattern form.\n-.SS Module-specific form\n-.PP\n-The module-specific form allows an explicit search path to be given for\n-any specific module.\n-This form is:\n-.IP \\[bu] 2\n-\\f[V]--module-source-path\\f[R]\n-\\f[I]module-name\\f[R]\\f[V]=\\f[R]\\f[I]file-path\\f[R]\n-(\\f[I]path-separator\\f[R] \\f[I]file-path\\f[R])*\n-.PP\n-The path separator character is \\f[V];\\f[R] on Windows, and \\f[V]:\\f[R]\n-otherwise.\n-.PP\n-\\f[B]Note:\\f[R] this is similar to the form used for the\n-\\f[B]\\f[VB]--patch-module\\f[B]\\f[R] option.\n-.SS Module-pattern form\n-.PP\n-The module-pattern form allows a concise specification of the module\n-source path for any number of modules organized in regular manner.\n-.IP \\[bu] 2\n-\\f[V]--module-source-path\\f[R] \\f[I]pattern\\f[R]\n-.PP\n-The pattern is defined by the following rules, which are applied in\n-order:\n-.IP \\[bu] 2\n-The argument is considered to be a series of segments separated by the\n-path separator character (\\f[V];\\f[R] on Windows, and \\f[V]:\\f[R]\n-otherwise).\n-.IP \\[bu] 2\n-Each segment containing curly braces of the form\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-string1{alt1 ( ,alt2 )* } string2\n-\\f[R]\n-.fi\n-.PP\n-is considered to be replaced by a series of segments formed by\n-\\[dq]expanding\\[dq] the braces:\n-.IP\n-.nf\n-\\f[CB]\n-string1 alt1 string2\n-string1 alt2 string2\n-and so on...\n-\\f[R]\n-.fi\n-.PP\n-The braces may be nested.\n-.PP\n-This rule is applied for all such usages of braces.\n-.RE\n-.IP \\[bu] 2\n-Each segment must have at most one asterisk (\\f[V]*\\f[R]).\n-If a segment does not contain an asterisk, it is considered to be as\n-though the file separator character and an asterisk are appended.\n-.RS 2\n-.PP\n-For any module \\f[I]M\\f[R], the source path for that module is formed\n-from the series of segments obtained by substituting the module name\n-\\f[I]M\\f[R] for the asterisk in each segment.\n-.PP\n-\\f[B]Note\\f[R]: in this context, the asterisk is just used as a special\n-marker, to denote the position in the path of the module name.\n-It should not be confused with the use of \\f[V]*\\f[R] as a file name\n-wildcard character, as found on most operating systems.\n-.RE\n-.SH PATCHING MODULES\n-.PP\n-javac allows any content, whether in source or compiled form, to be\n-patched into any module using the \\f[B]\\f[VB]--patch-module\\f[B]\\f[R]\n-option.\n-You may want to do this to compile alternative implementations of a\n-class to be patched at runtime into a JVM, or to inject additional\n-classes into the module, such as when testing.\n-.PP\n-The form of the option is:\n-.IP \\[bu] 2\n-\\f[V]--patch-module\\f[R]\n-\\f[I]module-name\\f[R]\\f[V]=\\f[R]\\f[I]file-path\\f[R]\n-(\\f[I]path-separator\\f[R] \\f[I]file-path\\f[R] )*\n-.PP\n-The path separator character is \\f[V];\\f[R] on Windows, and \\f[V]:\\f[R]\n-otherwise.\n-The paths given for the module must specify the root of a package\n-hierarchy for the contents of the module\n-.PP\n-The option may be given at most once for any given module.\n-Any content on the path will hide any like-named content later in the\n-path and in the patched module.\n-.PP\n-When patching source code into more than one module, the\n-\\f[B]\\f[VB]--module-source-path\\f[B]\\f[R] must also be used, so that the\n-output directory is organized in a module hierarchy, and capable of\n-holding the compiled class files for the modules being compiled.\n-.SH ANNOTATION PROCESSING\n-.PP\n-The \\f[V]javac\\f[R] command provides direct support for annotation\n-processing.\n-.PP\n-The API for annotation processors is defined in the\n-\\f[V]javax.annotation.processing\\f[R] and \\f[V]javax.lang.model\\f[R]\n-packages and subpackages.\n-.SS How Annotation Processing Works\n-.PP\n-Unless annotation processing is disabled with the\n-\\f[B]\\f[VB]-proc:none\\f[B]\\f[R] option, the compiler searches for any\n-annotation processors that are available.\n-The search path can be specified with the\n-\\f[B]\\f[VB]-processorpath\\f[B]\\f[R] option.\n-If no path is specified, then the user class path is used.\n-Processors are located by means of service provider-configuration files\n-named \\f[V]META-INF\/services\/javax.annotation.processing.Processor\\f[R]\n-on the search path.\n-Such files should contain the names of any annotation processors to be\n-used, listed one per line.\n-Alternatively, processors can be specified explicitly, using the\n-\\f[B]\\f[VB]-processor\\f[B]\\f[R] option.\n-.PP\n-After scanning the source files and classes on the command line to\n-determine what annotations are present, the compiler queries the\n-processors to determine what annotations they process.\n-When a match is found, the processor is called.\n-A processor can claim the annotations it processes, in which case no\n-further attempt is made to find any processors for those annotations.\n-After all of the annotations are claimed, the compiler does not search\n-for additional processors.\n-.PP\n-If any processors generate new source files, then another round of\n-annotation processing occurs: Any newly generated source files are\n-scanned, and the annotations processed as before.\n-Any processors called on previous rounds are also called on all\n-subsequent rounds.\n-This continues until no new source files are generated.\n-.PP\n-After a round occurs where no new source files are generated, the\n-annotation processors are called one last time, to give them a chance to\n-complete any remaining work.\n-Finally, unless the \\f[B]\\f[VB]-proc:only\\f[B]\\f[R] option is used, the\n-compiler compiles the original and all generated source files.\n-.PP\n-If you use an annotation processor that generates additional source\n-files to be included in the compilation, you can specify a default\n-module to be used for the newly generated files, for use when a module\n-declaration is not also generated.\n-In this case, use the\n-\\f[B]\\f[VB]--default-module-for-created-files\\f[B]\\f[R] option.\n-.SS Compilation Environment and Runtime Environment.\n-.PP\n-The declarations in source files and previously compiled class files are\n-analyzed by \\f[V]javac\\f[R] in a \\f[I]compilation environment\\f[R] that\n-is distinct from the \\f[I]runtime environment\\f[R] used to execute\n-\\f[V]javac\\f[R] itself.\n-Although there is a deliberate similarity between many \\f[V]javac\\f[R]\n-options and like-named options for the Java \\f[B]launcher\\f[R], such as\n-\\f[V]--class-path\\f[R], \\f[V]--module-path\\f[R] and so on, it is\n-important to understand that in general the \\f[V]javac\\f[R] options just\n-affect the environment in which the source files are compiled, and do\n-not affect the operation of \\f[V]javac\\f[R] itself.\n-.PP\n-The distinction between the compilation environment and runtime\n-environment is significant when it comes to using annotation processors.\n-Although annotations processors process elements (declarations) that\n-exist in the compilation environment, the annotation processor itself is\n-executed in the runtime environment.\n-If an annotation processor has dependencies on libraries that are not in\n-modules, the libraries can be placed, along with the annotation\n-processor itself, on the processor path.\n-(See the \\f[B]\\f[VB]--processor-path\\f[B]\\f[R] option.)\n-If the annotation processor and its dependencies are in modules, you\n-should use the processor module path instead.\n-(See the \\f[B]\\f[VB]--processor-module-path\\f[B]\\f[R] option.)\n-When those are insufficient, it may be necessary to provide further\n-configuration of the runtime environment.\n-This can be done in two ways:\n-.IP \"1.\" 3\n-If \\f[V]javac\\f[R] is invoked from the command line, options can be\n-passed to the underlying runtime by prefixing the option with\n-\\f[B]\\f[VB]-J\\f[B]\\f[R].\n-.IP \"2.\" 3\n-You can start an instance of a Java Virtual Machine directly and use\n-command line options and API to configure an environment in which\n-\\f[V]javac\\f[R] can be invoked via one of its \\f[B]APIs\\f[R].\n-.SH COMPILING FOR EARLIER RELEASES OF THE PLATFORM\n-.PP\n-\\f[V]javac\\f[R] can compile code that is to be used on other releases of\n-the platform, using either the \\f[B]\\f[VB]--release\\f[B]\\f[R] option, or\n-the \\f[B]\\f[VB]--source\\f[B]\\f[R]\/\\f[V]-source\\f[R] and\n-\\f[B]\\f[VB]--target\\f[B]\\f[R]\/\\f[V]-target\\f[R] options, together with\n-additional options to specify the platform classes.\n-.PP\n-Depending on the desired platform release, there are some restrictions\n-on some of the options that can be used.\n-.IP \\[bu] 2\n-When compiling for JDK 8 and earlier releases, you cannot use any option\n-that is intended for use with the module system.\n-This includes all of the following options:\n-.RS 2\n-.IP \\[bu] 2\n-\\f[B]\\f[VB]--module-source-path\\f[B]\\f[R],\n-\\f[B]\\f[VB]--upgrade-module-path\\f[B]\\f[R],\n-\\f[B]\\f[VB]--system\\f[B]\\f[R], \\f[B]\\f[VB]--module-path\\f[B]\\f[R],\n-\\f[B]\\f[VB]--add-modules\\f[B]\\f[R], \\f[B]\\f[VB]--add-exports\\f[B]\\f[R],\n-\\f[V]--add-opens\\f[R], \\f[B]\\f[VB]--add-reads\\f[B]\\f[R],\n-\\f[B]\\f[VB]--limit-modules\\f[B]\\f[R],\n-\\f[B]\\f[VB]--patch-module\\f[B]\\f[R]\n-.PP\n-If you use the \\f[V]--source\\f[R]\/\\f[V]-source\\f[R] or\n-\\f[V]--target\\f[R]\/\\f[V]-target\\f[R] options, you should also set the\n-appropriate platform classes using the boot class path family of\n-options.\n-.RE\n-.IP \\[bu] 2\n-When compiling for JDK 9 and later releases, you cannot use any option\n-that is intended to configure the boot class path.\n-This includes all of the following options:\n-.RS 2\n-.IP \\[bu] 2\n-\\f[B]\\f[VB]-Xbootclasspath\/p:\\f[B]\\f[R],\n-\\f[B]\\f[VB]-Xbootclasspath\\f[B]\\f[R],\n-\\f[B]\\f[VB]-Xbootclasspath\/a:\\f[B]\\f[R],\n-\\f[B]\\f[VB]-endorseddirs\\f[B]\\f[R],\n-\\f[B]\\f[VB]-Djava.endorsed.dirs\\f[B]\\f[R],\n-\\f[B]\\f[VB]-extdirs\\f[B]\\f[R], \\f[B]\\f[VB]-Djava.ext.dirs\\f[B]\\f[R],\n-\\f[B]\\f[VB]-profile\\f[B]\\f[R]\n-.PP\n-If you use the \\f[V]--source\\f[R]\/\\f[V]-source\\f[R] or\n-\\f[V]--target\\f[R]\/\\f[V]-target\\f[R] options, you should also set the\n-appropriate platform classes using the \\f[V]--system\\f[R] option to give\n-the location of an appropriate installed release of JDK.\n-.RE\n-.PP\n-When using the \\f[V]--release\\f[R] option, only the supported documented\n-API for that release may be used; you cannot use any options to break\n-encapsulation to access any internal classes.\n-.SH APIS\n-.PP\n-The \\f[V]javac\\f[R] compiler can be invoked using an API in three\n-different ways:\n-.TP\n-The \\f[B]Java Compiler API\\f[R]\n-This provides the most flexible way to invoke the compiler, including\n-the ability to compile source files provided in memory buffers or other\n-non-standard file systems.\n-.TP\n-The \\f[B]ToolProvider API\\f[R]\n-A \\f[V]ToolProvider\\f[R] for \\f[V]javac\\f[R] can be obtained by calling\n-\\f[V]ToolProvider.findFirst(\\[dq]javac\\[dq])\\f[R].\n-This returns an object with the equivalent functionality of the\n-command-line tool.\n-.RS\n-.PP\n-\\f[B]Note\\f[R]: This API should not be confused with the like-named API\n-in the \\f[B]\\f[VB]javax.tools\\f[B]\\f[R] package.\n-.RE\n-.TP\n-The \\f[V]javac\\f[R] \\f[B]Legacy API\\f[R]\n-This API is retained for backward compatibility only.\n-All new code should use either the Java Compiler API or the ToolProvider\n-API.\n-.PP\n-\\f[B]Note:\\f[R] All other classes and methods found in a package with\n-names that start with \\f[V]com.sun.tools.javac\\f[R] (subpackages of\n-\\f[V]com.sun.tools.javac\\f[R]) are strictly internal and subject to\n-change at any time.\n-.SH EXAMPLES OF USING -XLINT KEYS\n-.TP\n-\\f[V]cast\\f[R]\n-Warns about unnecessary and redundant casts, for example:\n-.RS\n-.RS\n-.PP\n-\\f[V]String s = (String) \\[dq]Hello!\\[dq]\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]classfile\\f[R]\n-Warns about issues related to class file contents.\n-.TP\n-\\f[V]deprecation\\f[R]\n-Warns about the use of deprecated items.\n-For example:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-java.util.Date myDate = new java.util.Date();\n-int currentDay = myDate.getDay();\n-\\f[R]\n-.fi\n-.PP\n-The method \\f[V]java.util.Date.getDay\\f[R] has been deprecated since JDK\n-1.1.\n-.RE\n-.TP\n-\\f[V]dep-ann\\f[R]\n-Warns about items that are documented with the \\f[V]\\[at]deprecated\\f[R]\n-Javadoc comment, but do not have the \\f[V]\\[at]Deprecated\\f[R]\n-annotation, for example:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-\/**\n-  * \\[at]deprecated As of Java SE 7, replaced by {\\[at]link #newMethod()}\n-  *\/\n-public static void deprecatedMethod() { }\n-public static void newMethod() { }\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]divzero\\f[R]\n-Warns about division by the constant integer 0, for example:\n-.RS\n-.RS\n-.PP\n-\\f[V]int divideByZero = 42 \/ 0;\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]empty\\f[R]\n-Warns about empty statements after \\f[V]if\\f[R]statements, for example:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-class E {\n-    void m() {\n-         if (true) ;\n-    }\n-}\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]fallthrough\\f[R]\n-Checks the switch blocks for fall-through cases and provides a warning\n-message for any that are found.\n-Fall-through cases are cases in a switch block, other than the last case\n-in the block, whose code does not include a \\f[V]break\\f[R] statement,\n-allowing code execution to fall through from that case to the next case.\n-For example, the code following the case 1 label in this switch block\n-does not end with a \\f[V]break\\f[R] statement:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-switch (x) {\n-case 1:\n-  System.out.println(\\[dq]1\\[dq]);\n-  \/\/ No break statement here.\n-case 2:\n-  System.out.println(\\[dq]2\\[dq]);\n-}\n-\\f[R]\n-.fi\n-.PP\n-If the \\f[V]-Xlint:fallthrough\\f[R] option was used when compiling this\n-code, then the compiler emits a warning about possible fall-through into\n-case, with the line number of the case in question.\n-.RE\n-.TP\n-\\f[V]finally\\f[R]\n-Warns about \\f[V]finally\\f[R] clauses that cannot be completed normally,\n-for example:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-public static int m() {\n-  try {\n-     throw new NullPointerException();\n-  }  catch (NullPointerException(); {\n-     System.err.println(\\[dq]Caught NullPointerException.\\[dq]);\n-     return 1;\n-   } finally {\n-     return 0;\n-   }\n-  }\n-\\f[R]\n-.fi\n-.PP\n-The compiler generates a warning for the \\f[V]finally\\f[R] block in this\n-example.\n-When the \\f[V]int\\f[R] method is called, it returns a value of 0.\n-A \\f[V]finally\\f[R] block executes when the \\f[V]try\\f[R] block exits.\n-In this example, when control is transferred to the \\f[V]catch\\f[R]\n-block, the \\f[V]int\\f[R] method exits.\n-However, the \\f[V]finally\\f[R] block must execute, so it\\[aq]s executed,\n-even though control was transferred outside the method.\n-.RE\n-.TP\n-\\f[V]options\\f[R]\n-Warns about issues that related to the use of command-line options.\n-See \\f[B]Compiling for Earlier Releases of the Platform\\f[R].\n-.TP\n-\\f[V]overrides\\f[R]\n-Warns about issues related to method overrides.\n-For example, consider the following two classes:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-public class ClassWithVarargsMethod {\n-  void varargsMethod(String... s) { }\n-}\n-\n-public class ClassWithOverridingMethod extends ClassWithVarargsMethod {\n-   \\[at]Override\n-   void varargsMethod(String[] s) { }\n-}\n-\\f[R]\n-.fi\n-.PP\n-The compiler generates a warning similar to the following:.\n-.IP\n-.nf\n-\\f[CB]\n-warning: [override] varargsMethod(String[]) in ClassWithOverridingMethod\n-overrides varargsMethod(String...) in ClassWithVarargsMethod; overriding\n-method is missing \\[aq]...\\[aq]\n-\\f[R]\n-.fi\n-.PP\n-When the compiler encounters a \\f[V]varargs\\f[R] method, it translates\n-the \\f[V]varargs\\f[R] formal parameter into an array.\n-In the method \\f[V]ClassWithVarargsMethod.varargsMethod\\f[R], the\n-compiler translates the \\f[V]varargs\\f[R] formal parameter\n-\\f[V]String... s\\f[R] to the formal parameter \\f[V]String[] s\\f[R], an\n-array that matches the formal parameter of the method\n-\\f[V]ClassWithOverridingMethod.varargsMethod\\f[R].\n-Consequently, this example compiles.\n-.RE\n-.TP\n-\\f[V]path\\f[R]\n-Warns about invalid path elements and nonexistent path directories on\n-the command line (with regard to the class path, the source path, and\n-other paths).\n-Such warnings cannot be suppressed with the\n-\\f[V]\\[at]SuppressWarnings\\f[R] annotation.\n-For example:\n-.RS\n-.IP \\[bu] 2\n-\\f[B]Linux and macOS:\\f[R]\n-\\f[V]javac -Xlint:path -classpath \/nonexistentpath Example.java\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R]\n-\\f[V]javac -Xlint:path -classpath C:\\[rs]nonexistentpath Example.java\\f[R]\n-.RE\n-.TP\n-\\f[V]processing\\f[R]\n-Warns about issues related to annotation processing.\n-The compiler generates this warning when you have a class that has an\n-annotation, and you use an annotation processor that cannot handle that\n-type of annotation.\n-For example, the following is a simple annotation processor:\n-.RS\n-.PP\n-\\f[B]Source file AnnoProc.java\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-import java.util.*;\n-import javax.annotation.processing.*;\n-import javax.lang.model.*;\n-import javax.lang.model.element.*;\n-\n-\\[at]SupportedAnnotationTypes(\\[dq]NotAnno\\[dq])\n-public class AnnoProc extends AbstractProcessor {\n-  public boolean process(Set<? extends TypeElement> elems, RoundEnvironment renv){\n-     return true;\n-  }\n-\n-  public SourceVersion getSupportedSourceVersion() {\n-     return SourceVersion.latest();\n-   }\n-}\n-\\f[R]\n-.fi\n-.PP\n-\\f[B]Source file AnnosWithoutProcessors.java\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-\\[at]interface Anno { }\n-\n-\\[at]Anno\n-class AnnosWithoutProcessors { }\n-\\f[R]\n-.fi\n-.PP\n-The following commands compile the annotation processor\n-\\f[V]AnnoProc\\f[R], then run this annotation processor against the\n-source file \\f[V]AnnosWithoutProcessors.java\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-javac AnnoProc.java\n-javac -cp . -Xlint:processing -processor AnnoProc -proc:only AnnosWithoutProcessors.java\n-\\f[R]\n-.fi\n-.PP\n-When the compiler runs the annotation processor against the source file\n-\\f[V]AnnosWithoutProcessors.java\\f[R], it generates the following\n-warning:\n-.IP\n-.nf\n-\\f[CB]\n-warning: [processing] No processor claimed any of these annotations: Anno\n-\\f[R]\n-.fi\n-.PP\n-To resolve this issue, you can rename the annotation defined and used in\n-the class \\f[V]AnnosWithoutProcessors\\f[R] from \\f[V]Anno\\f[R] to\n-\\f[V]NotAnno\\f[R].\n-.RE\n-.TP\n-\\f[V]rawtypes\\f[R]\n-Warns about unchecked operations on raw types.\n-The following statement generates a \\f[V]rawtypes\\f[R] warning:\n-.RS\n-.RS\n-.PP\n-\\f[V]void countElements(List l) { ... }\\f[R]\n-.RE\n-.PP\n-The following example does not generate a \\f[V]rawtypes\\f[R] warning:\n-.RS\n-.PP\n-\\f[V]void countElements(List<?> l) { ... }\\f[R]\n-.RE\n-.PP\n-\\f[V]List\\f[R] is a raw type.\n-However, \\f[V]List<?>\\f[R] is an unbounded wildcard parameterized type.\n-Because \\f[V]List\\f[R] is a parameterized interface, always specify its\n-type argument.\n-In this example, the \\f[V]List\\f[R] formal argument is specified with an\n-unbounded wildcard (\\f[V]?\\f[R]) as its formal type parameter, which\n-means that the \\f[V]countElements\\f[R] method can accept any\n-instantiation of the \\f[V]List\\f[R] interface.\n-.RE\n-.TP\n-\\f[V]serial\\f[R]\n-Warns about missing \\f[V]serialVersionUID\\f[R] definitions on\n-serializable classes.\n-For example:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-public class PersistentTime implements Serializable\n-{\n-  private Date time;\n-\n-   public PersistentTime() {\n-     time = Calendar.getInstance().getTime();\n-   }\n-\n-   public Date getTime() {\n-     return time;\n-   }\n-}\n-\\f[R]\n-.fi\n-.PP\n-The compiler generates the following warning:\n-.IP\n-.nf\n-\\f[CB]\n-warning: [serial] serializable class PersistentTime has no definition of\n-serialVersionUID\n-\\f[R]\n-.fi\n-.PP\n-If a serializable class does not explicitly declare a field named\n-\\f[V]serialVersionUID\\f[R], then the serialization runtime environment\n-calculates a default \\f[V]serialVersionUID\\f[R] value for that class\n-based on various aspects of the class, as described in the Java Object\n-Serialization Specification.\n-However, it\\[aq]s strongly recommended that all serializable classes\n-explicitly declare \\f[V]serialVersionUID\\f[R] values because the default\n-process of computing \\f[V]serialVersionUID\\f[R] values is highly\n-sensitive to class details that can vary depending on compiler\n-implementations.\n-As a result, this might cause an unexpected\n-\\f[V]InvalidClassExceptions\\f[R] during deserialization.\n-To guarantee a consistent \\f[V]serialVersionUID\\f[R] value across\n-different Java compiler implementations, a serializable class must\n-declare an explicit \\f[V]serialVersionUID\\f[R] value.\n-.RE\n-.TP\n-\\f[V]static\\f[R]\n-Warns about issues relating to the use of static variables, for example:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-class XLintStatic {\n-    static void m1() { }\n-    void m2() { this.m1(); }\n-}\n-\\f[R]\n-.fi\n-.PP\n-The compiler generates the following warning:\n-.IP\n-.nf\n-\\f[CB]\n-warning: [static] static method should be qualified by type name,\n-XLintStatic, instead of by an expression\n-\\f[R]\n-.fi\n-.PP\n-To resolve this issue, you can call the \\f[V]static\\f[R] method\n-\\f[V]m1\\f[R] as follows:\n-.RS\n-.PP\n-\\f[V]XLintStatic.m1();\\f[R]\n-.RE\n-.PP\n-Alternately, you can remove the \\f[V]static\\f[R] keyword from the\n-declaration of the method \\f[V]m1\\f[R].\n-.RE\n-.TP\n-\\f[V]this-escape\\f[R]\n-Warns about constructors leaking \\f[V]this\\f[R] prior to subclass\n-initialization.\n-For example, this class:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-public class MyClass {\n-  public MyClass() {\n-    System.out.println(this.hashCode());\n-  }\n-}\n-\\f[R]\n-.fi\n-.PP\n-generates the following warning:\n-.IP\n-.nf\n-\\f[CB]\n-MyClass.java:3: warning: [this-escape] possible \\[aq]this\\[aq] escape\n-                         before subclass is fully initialized\n-    System.out.println(this.hashCode());\n-                                    \\[ha]\n-\\f[R]\n-.fi\n-.PP\n-A \\[aq]this\\[aq] escape warning is generated when a constructor does\n-something that might result in a subclass method being invoked before\n-the constructor returns.\n-In such cases the subclass method would be operating on an incompletely\n-initialized instance.\n-In the above example, a subclass of \\f[V]MyClass\\f[R] that overrides\n-\\f[V]hashCode()\\f[R] to incorporate its own fields would likely produce\n-an incorrect result when invoked as shown.\n-.PP\n-Warnings are only generated if a subclass could exist that is outside of\n-the current module (or package, if no module) being compiled.\n-So, for example, constructors in final and non-public classes do not\n-generate warnings.\n-.RE\n-.TP\n-\\f[V]try\\f[R]\n-Warns about issues relating to the use of \\f[V]try\\f[R] blocks,\n-including try-with-resources statements.\n-For example, a warning is generated for the following statement because\n-the resource \\f[V]ac\\f[R] declared in the \\f[V]try\\f[R] block is not\n-used:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-try ( AutoCloseable ac = getResource() ) {    \/\/ do nothing}\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]unchecked\\f[R]\n-Gives more detail for unchecked conversion warnings that are mandated by\n-the Java Language Specification, for example:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-List l = new ArrayList<Number>();\n-List<String> ls = l;       \/\/ unchecked warning\n-\\f[R]\n-.fi\n-.PP\n-During type erasure, the types \\f[V]ArrayList<Number>\\f[R] and\n-\\f[V]List<String>\\f[R] become \\f[V]ArrayList\\f[R] and \\f[V]List\\f[R],\n-respectively.\n-.PP\n-The \\f[V]ls\\f[R] command has the parameterized type\n-\\f[V]List<String>\\f[R].\n-When the \\f[V]List\\f[R] referenced by \\f[V]l\\f[R] is assigned to\n-\\f[V]ls\\f[R], the compiler generates an unchecked warning.\n-At compile time, the compiler and JVM cannot determine whether\n-\\f[V]l\\f[R] refers to a \\f[V]List<String>\\f[R] type.\n-In this case, \\f[V]l\\f[R] does not refer to a \\f[V]List<String>\\f[R]\n-type.\n-As a result, heap pollution occurs.\n-.PP\n-A heap pollution situation occurs when the \\f[V]List\\f[R] object\n-\\f[V]l\\f[R], whose static type is \\f[V]List<Number>\\f[R], is assigned to\n-another \\f[V]List\\f[R] object, \\f[V]ls\\f[R], that has a different static\n-type, \\f[V]List<String>\\f[R].\n-However, the compiler still allows this assignment.\n-It must allow this assignment to preserve backward compatibility with\n-releases of Java SE that do not support generics.\n-Because of type erasure, \\f[V]List<Number>\\f[R] and\n-\\f[V]List<String>\\f[R] both become \\f[V]List\\f[R].\n-Consequently, the compiler allows the assignment of the object\n-\\f[V]l\\f[R], which has a raw type of \\f[V]List\\f[R], to the object\n-\\f[V]ls\\f[R].\n-.RE\n-.TP\n-\\f[V]varargs\\f[R]\n-Warns about unsafe use of variable arguments (\\f[V]varargs\\f[R])\n-methods, in particular, those that contain non-reifiable arguments, for\n-example:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-public class ArrayBuilder {\n-  public static <T> void addToList (List<T> listArg, T... elements) {\n-    for (T x : elements) {\n-      listArg.add(x);\n-    }\n-  }\n-}\n-\\f[R]\n-.fi\n-.PP\n-A non-reifiable type is a type whose type information is not fully\n-available at runtime.\n-.PP\n-The compiler generates the following warning for the definition of the\n-method \\f[V]ArrayBuilder.addToList\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-warning: [varargs] Possible heap pollution from parameterized vararg type T\n-\\f[R]\n-.fi\n-.PP\n-When the compiler encounters a varargs method, it translates the\n-\\f[V]varargs\\f[R] formal parameter into an array.\n-However, the Java programming language does not permit the creation of\n-arrays of parameterized types.\n-In the method \\f[V]ArrayBuilder.addToList\\f[R], the compiler translates\n-the \\f[V]varargs\\f[R] formal parameter \\f[V]T...\\f[R] elements to the\n-formal parameter \\f[V]T[]\\f[R] elements, an array.\n-However, because of type erasure, the compiler converts the\n-\\f[V]varargs\\f[R] formal parameter to \\f[V]Object[]\\f[R] elements.\n-Consequently, there\\[aq]s a possibility of heap pollution.\n-.RE\n","filename":"src\/jdk.compiler\/share\/man\/javac.1","additions":0,"deletions":2372,"binary":false,"changes":2372,"status":"deleted"},{"patch":"@@ -0,0 +1,1952 @@\n+---\n+# Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JAVAC(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+javac - read Java declarations and compile them into class files\n+\n+## Synopsis\n+\n+`javac` \\[*options*\\] \\[*sourcefiles-or-classnames*\\]\n+\n+*options*\n+:   Command-line options.\n+\n+*sourcefiles-or-classnames*\n+:   Source files to be compiled (for example, `Shape.java`) or\n+    the names of previously compiled classes to be processed for annotations\n+    (for example, `geometry.MyShape`).\n+\n+## Description\n+\n+The `javac` command reads _source files_ that contain module, package and type\n+declarations written in the Java programming language, and compiles them into _class files_\n+that run on the Java Virtual Machine.\n+\n+The `javac` command can also [process annotations](#annotation-processing)\n+in Java source files and classes.\n+\n+Source files must have a file name extension of `.java`.\n+Class files have a file name extension of `.class`.\n+Both source and class files normally have file names that identify the contents.\n+For example, a class called `Shape` would be declared in a source file\n+called `Shape.java`, and compiled into a class file called `Shape.class`.\n+\n+There are two ways to specify source files to `javac`:\n+\n+- For a small number of source files, you can list their file names on\n+  the command line.\n+\n+- For a large number of source files, you can use the [`@`*filename*](#option-at)\n+  option on the command line to specify an _argument file_ that lists\n+  their file names. See [Standard Options] for a description of the\n+  option and [Command-Line Argument Files] for a description of\n+  `javac` argument files.\n+\n+The order of source files specified on the command line or in an\n+argument file is not important. `javac` will compile the files together,\n+as a group, and will automatically resolve any dependencies between\n+the declarations in the various source files.\n+\n+`javac` expects that source files are arranged in one or more directory\n+hierarchies on the file system, described in [Arrangement of Source\n+Code].\n+\n+To compile a source file, `javac` needs to find the declaration of\n+every class or interface that is used, extended, or implemented by the\n+code in the source file. This lets `javac` check that the code has the\n+right to access those classes and interfaces. Rather than specifying\n+the source files of those classes and interfaces explicitly, you can\n+use command-line options to tell `javac` where to search for their\n+source files. If you have compiled those source files previously, you\n+can use options to tell `javac` where to search for the corresponding\n+class files. The options, which all have names ending in \"path\", are\n+described in [Standard Options], and further described in\n+[Configuring a Compilation] and [Searching for Module, Package and Type Declarations].\n+\n+By default, `javac` compiles each source file to a class file in the\n+same directory as the source file. However, it is recommended to\n+specify a separate destination directory with the [`-d`](#option-d) option.\n+\n+Command-line [options] and [environment variables] also control how\n+`javac` performs various tasks:\n+\n+- Compiling code to run on earlier releases of the JDK.\n+- Compiling code to run under a debugger.\n+- Checking for stylistic issues in Java source code.\n+- Checking for problems in `javadoc` comments (`\/** ... *\/`).\n+- Processing annotations in source files and class files.\n+- Upgrading and patching modules in the compile-time environment.\n+\n+`javac` supports [Compiling for Earlier Releases Of The Platform]\n+and can also be invoked from Java code using one of a number of [APIs]\n+\n+## Options\n+\n+`javac` provides [standard options], and [extra options] that are either\n+non-standard or are for advanced use.\n+\n+Some options take one or more arguments.\n+If an argument contains spaces or other whitespace characters,\n+the value should be quoted according to the conventions of the\n+environment being used to invoke javac.\n+If the option begins with a single dash (`-`) the argument should\n+either directly follow the option name, or should be separated with a\n+colon (`:`) or whitespace, depending on the option. If the option begins with\n+a double dash (`--`), the argument may be separated either by whitespace\n+or by an equals (`=`) character with no additional whitespace.\n+For example,\n+\n+    -Aname=\"J. Duke\"\n+    -proc:only\n+    -d myDirectory\n+    --module-version 3\n+    --module-version=3\n+\n+In the following lists of options, an argument of *path* represents\n+a search path, composed of a list of file system locations separated\n+by the platform path separator character, (semicolon `;` on Windows,\n+or colon `:` on other systems.) Depending on the option, the\n+file system locations may be directories, JAR files or JMOD files.\n+\n+### Standard Options\n+\n+<a id=\"option-at\">`@`*filename*<\/a>\n+:   Reads options and file names from a file. To shorten or simplify the\n+    `javac` command, you can specify one or more files that contain arguments\n+    to the `javac` command (except [`-J`](#option-J) options). This lets you to create\n+    `javac` commands of any length on any operating system.\n+    See [Command-Line Argument Files].\n+\n+<a id=\"option-A\">`-A`*key*\\[`=`*value*\\]<\/a>\n+:   Specifies options to pass to annotation processors. These options are not\n+    interpreted by `javac` directly, but are made available for use by\n+    individual processors. The *key* value should be one or more identifiers\n+    separated by a dot (`.`).\n+\n+<a id=\"option-add-modules\">`--add-modules` *module*`,`*module*<\/a>\n+:   Specifies root modules to resolve in addition to the initial modules, or\n+    all modules on the module path if *module* is `ALL-MODULE-PATH`.\n+\n+<a id=\"option-boot-class-path\">`--boot-class-path` *path* or `-bootclasspath` *path*<\/a>\n+:   Overrides the location of the bootstrap class files.\n+\n+    **Note:** This can only be used when compiling for releases prior to JDK 9.\n+    As applicable, see the descriptions in [`--release`](#option-release), [`-source`](#option-source), or\n+    [`-target`](#option-target) for details.  For JDK 9 or later, see [`--system`](#option-system).\n+\n+<a id=\"option-class-path\">`--class-path` *path*, `-classpath` *path*, or `-cp` *path*<\/a>\n+:   Specifies where to find user class files and annotation processors. This\n+    class path overrides the user class path in the `CLASSPATH` environment\n+    variable.\n+\n+    -   If `--class-path`, `-classpath`, or `-cp` are not specified, then the\n+        user class path is the value of the `CLASSPATH` environment variable,\n+        if that is set, or else the current directory.\n+\n+    -   If not compiling code for modules, if the [`--source-path`](#option-source-path) or -sourcepath`\n+        option is not specified, then the user class path is also searched for source files.\n+\n+    -   If the [`-processorpath`](#option-processor-path) option is not specified, then the class path is\n+        also searched for annotation processors.\n+\n+<a id=\"option-d\">`-d` *directory*<\/a>\n+:   Sets the destination directory (or _class output directory_) for class files.\n+    If a class is part of a package, then `javac` puts the class file in a\n+    subdirectory that reflects the module name (if appropriate) and package name.\n+    The directory, and any necessary subdirectories, will be created if they\n+    do not already exist.\n+\n+    If the `-d` option is not specified, then `javac` puts each class file in\n+    the same directory as the source file from which it was generated.\n+\n+    Except when compiling code for multiple modules, the contents of the\n+    class output directory will be organized in a package hierarchy.\n+    When compiling code for multiple modules, the contents of the output\n+    directory will be organized in a module hierarchy, with the contents of each\n+    module in a separate subdirectory, each organized as a package\n+    hierarchy.\n+\n+    **Note:**\n+    When compiling code for one or more modules, the class output directory will\n+    automatically be checked when searching for previously compiled classes.\n+    When not compiling for modules, for backwards compatibility,\n+    the directory is _not_ automatically checked for previously compiled classes,\n+    and so it is recommended to specify the class output directory as one\n+    of the locations on the user class path, using the `--class-path` option or one of\n+    its alternate forms.\n+\n+<a id=\"option-deprecation\">`-deprecation`<\/a>\n+:   Shows a description of each use or override of a deprecated member or\n+    class. Without the `-deprecation` option, `javac` shows a summary of the\n+    source files that use or override deprecated members or classes. The\n+    `-deprecation` option is shorthand for `-Xlint:deprecation`.\n+\n+<a id=\"option-enable-preview\">`--enable-preview`<\/a>\n+:   Enables preview language features. Used in conjunction with either\n+    [`-source`](#option-source) or [`--release`](#option-release).\n+\n+<a id=\"option-encoding\">`-encoding` *encoding*<\/a>\n+:   Specifies character encoding used by source files, such as EUC-JP and\n+    UTF-8. If the `-encoding` option is not specified, then the platform default\n+    converter is used.\n+\n+<a id=\"option-endorseddirs\">`-endorseddirs` *directories*<\/a>\n+:   Overrides the location of the endorsed standards path.\n+\n+    **Note:** This can only be used when compiling for releases prior to JDK 9.\n+    As applicable, see the descriptions in [`--release`](#option-release), [`-source`](#option-source), or\n+    [`-target`](#option-target) for details.\n+\n+<a id=\"option-extdirs\">`-extdirs` *directories*<\/a>\n+:   Overrides the location of the installed extensions.\n+    `directories` is a list of directories, separated by the platform path separator\n+    (`;` on Windows, and `:` otherwise).\n+    Each JAR file in the specified directories is searched for class files.\n+    All JAR files found become part of the class path.\n+\n+    If you are compiling for a release of the platform that supports the\n+    Extension Mechanism, then this option specifies the directories that\n+    contain the extension classes.\n+    See [Compiling for Other Releases of the Platform].\n+\n+    **Note:** This can only be used when compiling for releases prior to JDK 9.\n+    As applicable, see the descriptions in [`--release`](#option-release), [`-source`](#option-source), or\n+    [`-target`](#option-target) for details.\n+\n+<a id=\"option-g\">`-g`<\/a>\n+:   Generates all debugging information, including local variables. By default,\n+    only line number and source file information is generated.\n+\n+<a id=\"option-g-custom\">`-g:`\\[`lines`, `vars`, `source`\\]<\/a>\n+:   Generates only the kinds of debugging information specified by the\n+    comma-separated list of keywords. Valid keywords are:\n+\n+    `lines`\n+    :   Line number debugging information.\n+\n+    `vars`\n+    :   Local variable debugging information.\n+\n+    `source`\n+    :   Source file debugging information.\n+\n+<a id=\"option-g-none\">`-g:none`<\/a>\n+:   Does not generate debugging information.\n+\n+<a id=\"option-h\">`-h` *directory*<\/a>\n+:   Specifies where to place generated native header files.\n+\n+    When you specify this option, a native header file is generated for each\n+    class that contains native methods or that has one or more constants\n+    annotated with the [`java.lang.annotation.Native`](\n+    ..\/..\/api\/java.base\/java\/lang\/annotation\/Native.html)\n+    annotation. If the class is part of a package, then the compiler puts the\n+    native header file in a subdirectory that reflects the module name\n+    (if appropriate) and package name.\n+    The directory, and any necessary subdirectories, will be created if they\n+    do not already exist.\n+\n+<a id=\"option-help\">`--help`, `-help` or `-?`<\/a>\n+:   Prints a synopsis of the standard options.\n+\n+<a id=\"option-help-extra\">`--help-extra` or `-X`<\/a>\n+:   Prints a synopsis of the set of extra options.\n+\n+<a id=\"option-help-lint\">`--help-lint`<\/a>\n+:   Prints the supported keys for the `-Xlint` option.\n+\n+<a id=\"option-implicit\">`-implicit:`\\[`none`, `class`\\]<\/a>\n+:   Specifies whether or not to generate class files for implicitly referenced\n+    files:\n+\n+    -   `-implicit:class` --- Automatically generates class files.\n+\n+    -   `-implicit:none` --- Suppresses class file generation.\n+\n+    If this option is not specified, then the default automatically generates\n+    class files. In this case, the compiler issues a warning if any class files\n+    are generated when also doing annotation processing. The warning is not\n+    issued when the `-implicit` option is explicitly set.\n+    See [Searching for Module, Package and Type Declarations].\n+\n+<a id=\"option-J\">`-J`*option*<\/a>\n+:   Passes *option* to the runtime system, where *option* is one of the Java\n+    options described on [java](java.html) command. For example, `-J-Xms48m`\n+    sets the startup memory to 48 MB.\n+\n+    **Note:** The `CLASSPATH` environment variable, `-classpath` option, `-bootclasspath`\n+    option, and `-extdirs` option do not specify the classes used to run\n+    `javac`. Trying to customize the compiler implementation with these options\n+    and variables is risky and often does not accomplish what you want. If you\n+    must customize the compiler implementation, then use the `-J` option to\n+    pass options through to the underlying Java launcher.\n+\n+<a id=\"option-limit-modules\">`--limit-modules` *module*`,`*module*\\*<\/a>\n+:   Limits the universe of observable modules.\n+\n+<a id=\"option-module\">`--module` *module-name* (`,`*module-name*)* or `-m` *module-name* (`,`*module-name*)*<\/a>\n+:   Compiles those source files in the named modules that are newer\n+    than the corresponding files in the output directory.\n+\n+<a id=\"option-module-path\">`--module-path` *path* or `-p` *path*<\/a>\n+:   Specifies where to find application modules.\n+\n+<a id=\"option-module-source-path\">`--module-source-path` *module-source-path*<\/a>\n+:   Specifies where to find source files when compiling code\n+    in multiple modules. See [The Module Source Path Option].\n+\n+<a id=\"option-module-version\">`--module-version` *version*<\/a>\n+:   Specifies the version of modules that are being compiled.\n+\n+<a id=\"option-nowarn\">`-nowarn`<\/a>\n+:   Disables warning messages. This option operates the same as the\n+    `-Xlint:none` option.\n+\n+<a id=\"option-parameters\">`-parameters`<\/a>\n+:   Generates metadata for reflection on method parameters. Stores formal\n+    parameter names of constructors and methods in the generated class file so\n+    that the method `java.lang.reflect.Executable.getParameters` from the\n+    Reflection API can retrieve them.\n+\n+<a id=\"option-proc\">`-proc:`\\[`none`, `only`, `full`\\]<\/a>\n+:   Controls whether annotation processing and compilation are done.\n+    `-proc:none` means that compilation takes place without annotation\n+    processing. `-proc:only` means that only annotation processing is done,\n+    without any subsequent compilation. If this option is not used, or\n+    `-proc:full` is specified, annotation processing and compilation are done.\n+\n+<a id=\"option-processor\">`-processor` *class1*\\[`,`*class2*`,`*class3*...\\]<\/a>\n+:   Names of the annotation processors to run. This bypasses the default\n+    discovery process.\n+\n+<a id=\"option-processor-module-path\">`--processor-module-path` *path*<\/a>\n+:   Specifies the module path used for finding annotation processors.\n+\n+<a id=\"option-processor-path\">`--processor-path` *path* or `-processorpath` *path*<\/a>\n+:   Specifies where to find annotation processors. If this option is not used,\n+    then the class path is searched for processors.\n+\n+<a id=\"option-profile\">`-profile` *profile*<\/a>\n+:   Checks that the API used is available in the specified profile.\n+    This option is deprecated and may be removed in a future release.\n+\n+    **Note:** This can only be used when compiling for releases prior to JDK 9.\n+    As applicable, see the descriptions in [`--release`](#option-release), [`-source`](#option-source),\n+    or [`-target`](#option-target) for details.\n+\n+<a id=\"option-release\">`--release` *release*<\/a>\n+:   Compiles source code according to the rules of the Java programming language\n+    for the specified Java SE release, generating class files which target\n+    that release.\n+    Source code is compiled against the combined Java SE and JDK API for the\n+    specified release.\n+\n+    The supported values of *release* are the current Java SE release and a\n+    limited number of previous releases, detailed in the command-line help.\n+\n+    For the current release, the Java SE API consists of the `java.*`,\n+    `javax.*`, and `org.*` packages that are exported by the Java SE modules in\n+    the release; the JDK API consists of the `com.*` and `jdk.*` packages that\n+    are exported by the JDK modules in the release, plus the `javax.*` packages\n+    that are exported by standard, but non-Java SE, modules in the release.\n+\n+    For previous releases, the Java SE API and the JDK API are as defined in\n+    that release.\n+\n+    **Note:** When using `--release`, you cannot also use the [`--source`](#option-source)\/`-source` or\n+    [`--target`](#option-target)\/`-target` options.\n+\n+    **Note:** When using `--release` to specify a release that supports the Java\n+    Platform Module System, the `--add-exports` option cannot be used to\n+    enlarge the set of packages exported by the Java SE, JDK, and standard\n+    modules in the specified release.\n+\n+<a id=\"option-s\">`-s` *directory*<\/a>\n+:   Specifies the directory used to place the generated source files. If a\n+    class is part of a package, then the compiler puts the source file in a\n+    subdirectory that reflects the module name (if appropriate) and package name.\n+    The directory, and any necessary subdirectories, will be created if they\n+    do not already exist.\n+\n+    Except when compiling code for multiple modules, the contents of the\n+    source output directory will be organized in a package hierarchy.\n+    When compiling code for multiple modules, the contents of the source output directory will be\n+    organized in a module hierarchy, with the contents of each\n+    module in a separate subdirectory, each organized as a package\n+    hierarchy.\n+\n+<a id=\"option-source\">`--source` *release* or `-source` *release*<\/a>\n+:   Compiles source code according to the rules of the Java programming language\n+    for the specified Java SE release.\n+    The supported values of *release* are the current Java SE release and a\n+    limited number of previous releases, detailed in the command-line help.\n+\n+    If the option is not specified, the default is to compile source code\n+    according to the rules of the Java programming language for the current\n+    Java SE release.\n+\n+<a id=\"option-source-path\">`--source-path` *path* or `-sourcepath` *path*<\/a>\n+:   Specifies where to find source files.\n+    Except when compiling multiple modules together, this is the source code path\n+    used to search for class or interface definitions.\n+\n+    **Note:** Classes found through the class path might be recompiled when their source\n+    files are also found. See [Searching for Module, Package and Type Declarations].\n+\n+<a id=\"option-system\">`--system` *jdk* \\| `none`<\/a>\n+:   Overrides the location of system modules.\n+\n+<a id=\"option-target\">`--target` *release* or `-target` *release*<\/a>\n+:   Generates `class` files suitable for the specified Java SE release.\n+    The supported values of *release* are the current Java SE release and a\n+    limited number of previous releases, detailed in the command-line help.\n+\n+    **Note:** The target release must be equal to or higher than the source release.\n+    (See [`--source`](#option-source).)\n+\n+<a id=\"option-upgrade-module-path\">`--upgrade-module-path` *path*<\/a>\n+:   Overrides the location of upgradeable modules.\n+\n+<a id=\"option-verbose\">`-verbose`<\/a>\n+:   Outputs messages about what the compiler is doing. Messages include\n+    information about each class loaded and each source file compiled.\n+\n+<a id=\"option-version\">`--version` or `-version`<\/a>\n+:   Prints version information.\n+\n+<a id=\"option-Werror\">`-Werror`<\/a>\n+:   Terminates compilation when warnings occur.\n+\n+### Extra Options\n+\n+<a id=\"option-add-exports\">`--add-exports` *module*`\/`*package*`=`*other-module*(`,`*other-module*)\\*<\/a>\n+:   Specifies a package to be considered as exported from its defining module\n+    to additional modules or to all unnamed modules when the value of\n+    *other-module* is `ALL-UNNAMED`.\n+\n+<a id=\"option-add-reads\">`--add-reads` *module*`=`*other-module*(`,`*other-module*)\\*<\/a>\n+:   Specifies additional modules to be considered as required by a given\n+    module.\n+\n+<a id=\"option-default-module-for-created-files\">`--default-module-for-created-files` *module-name*<\/a>\n+:   Specifies the fallback target module for files created by annotation\n+    processors, if none is specified or inferred.\n+\n+<a id=\"option-disable-line-doc-comments\">`--disable-line-doc-comments`<\/a>\n+:   Disables support for documentation comments with lines beginning \/\/\/.\n+\n+<a id=\"option-Djava.endorsed.dirs\">`-Djava.endorsed.dirs=`*dirs*<\/a>\n+:   Overrides the location of the endorsed standards path.\n+\n+    **Note:** This can only be used when compiling for releases prior to JDK 9.\n+    As applicable, see the descriptions in [`--release`](#option-release), [`-source`](#option-source),\n+    or [`-target`](#option-target) for details.\n+\n+<a id=\"option-Djava.ext.dirs\">`-Djava.ext.dirs=`*dirs*<\/a>\n+:   Overrides the location of installed extensions.\n+\n+    **Note:** This can only be used when compiling for releases prior to JDK 9.\n+    As applicable, see the descriptions in [`--release`](#option-release), [`-source`](#option-source),\n+    or [`-target`](#option-target) for details.\n+\n+<a id=\"option-patch-module\">`--patch-module` *module*`=`*path*<\/a>\n+:   Overrides or augments a module with classes and resources in JAR files or\n+    directories.\n+\n+<a id=\"option-Xbootclasspath\">`-Xbootclasspath:`*path*<\/a>\n+:   Overrides the location of the bootstrap class files.\n+\n+    **Note:** This can only be used when compiling for releases prior to JDK 9.\n+    As applicable, see the descriptions in [`--release`](#option-release), [`-source`](#option-source),\n+    or [`-target`](#option-target) for details.\n+\n+<a id=\"option-Xbootclasspath-a\">`-Xbootclasspath\/a:`*path*<\/a>\n+:   Adds a suffix to the bootstrap class path.\n+\n+    **Note:** This can only be used when compiling for releases prior to JDK 9.\n+    As applicable, see the descriptions in [`--release`](#option-release), [`-source`](#option-source),\n+    or [`-target`](#option-target) for details.\n+\n+<a id=\"option-Xbootclasspath-p\">`-Xbootclasspath\/p:`*path*<\/a>\n+:   Adds a prefix to the bootstrap class path.\n+\n+    **Note:** This can only be used when compiling for releases prior to JDK 9.\n+    As applicable, see the descriptions in [`--release`](#option-release), [`-source`](#option-source),\n+    or [`-target`](#option-target) for details.\n+\n+<a id=\"option-Xdiags\">`-Xdiags:`\\[`compact`, `verbose`\\]<\/a>\n+:   Selects a diagnostic mode.\n+\n+<a id=\"option-Xdoclint\">`-Xdoclint`<\/a>\n+:   Enables recommended checks for problems in documentation comments.\n+\n+<a id=\"option-Xdoclint-custom\">`-Xdoclint:`(`all`|`none`|\\[`-`\\]*group*)\\[`\/`*access*\\]<\/a>\n+:   Enables or disables specific groups of checks in documentation comments.\n+\n+    *group* can have one of the following values:\n+    `accessibility`, `html`, `missing`, `reference`, `syntax`.\n+\n+    The variable *access* specifies the minimum visibility level of classes and\n+    members that the `-Xdoclint` option checks. It can have one of the\n+    following values (in order of most to least visible):\n+    `public`, `protected`, `package`, `private`.\n+\n+    The default *access* level is `private`.\n+\n+    When prefixed by `doclint:`, the *group* names and `all` can be used with `@SuppressWarnings`\n+    to suppress warnings about documentation comments in parts of the code being compiled.\n+\n+    For more information about these groups of checks, see the [DocLint](javadoc.html#doclint)\n+    section of the `javadoc` command documentation.\n+    The `-Xdoclint` option is disabled by default in the `javac` command.\n+\n+    For example, the following option checks classes and members (with all\n+    groups of checks) that have the access level of protected and higher (which\n+    includes protected and public):\n+\n+    >   `-Xdoclint:all\/protected`\n+\n+    The following option enables all groups of checks for all access levels,\n+    except it will not check for HTML errors for classes and members that have the\n+    access level of package and higher (which includes package, protected and\n+    public):\n+\n+    >   `-Xdoclint:all,-html\/package`\n+\n+<a id=\"option-Xdoclint-package\">`-Xdoclint\/package:`\\[`-`\\]*packages*(`,`\\[`-`\\]*package*)\\*<\/a>\n+:   Enables or disables checks in specific packages. Each *package* is either\n+    the qualified name of a package or a package name prefix followed by `.*`,\n+    which expands to all sub-packages of the given package. Each *package* can\n+    be prefixed with a hyphen (`-`) to disable checks for a specified package\n+    or packages.\n+\n+    For more information, see the [DocLint](javadoc.html#doclint)\n+    section of the `javadoc` command documentation.\n+\n+<a id=\"option-Xlint\">`-Xlint`<\/a>\n+:   Enables all recommended warnings. In this release, enabling all available\n+    warnings is recommended.\n+\n+<a id=\"option-Xlint-custom\">`-Xlint:`\\[`-`\\]*key*(`,`\\[`-`\\]*key*)\\*<\/a>\n+:   Supplies warnings to enable or disable, separated by comma. Precede a key\n+    by a hyphen (`-`) to disable the specified warning.\n+\n+    Supported values for *key* are:\n+\n+    -   `all`: Enables all warnings.\n+\n+    -   `auxiliaryclass`: Warns about an auxiliary class that is hidden in a\n+        source file, and is used from other files.\n+\n+    -   `cast`: Warns about the use of unnecessary casts.\n+\n+    -   `classfile`: Warns about the issues related to classfile contents.\n+\n+    -   `dangling-doc-comments`: Warns about extra or misplaced documentation\n+         comments near the beginning of a declaration.\n+\n+    -   `deprecation`: Warns about the use of deprecated items.\n+\n+    -   `dep-ann`: Warns about the items marked as deprecated in `javadoc` but\n+        without the `@Deprecated` annotation.\n+\n+    -   `divzero`: Warns about the division by the constant integer 0.\n+\n+    -   `empty`: Warns about an empty statement after `if`.\n+\n+    -   `exports`: Warns about the issues regarding module exports.\n+\n+    -   `fallthrough`: Warns about the falling through from one case of a\n+        switch statement to the next.\n+\n+    -   `finally`: Warns about `finally` clauses that do not terminate normally.\n+\n+    -   `incubating`: Warns about the use of incubating modules.\n+\n+    -   `lossy-conversions`: Warns about possible lossy conversions\n+        in compound assignment.\n+\n+    -   `missing-explicit-ctor`: Warns about missing explicit constructors in\n+         public and protected classes in exported packages.\n+\n+    -   `module`: Warns about the module system-related issues.\n+\n+    -   `opens`: Warns about the issues related to module opens.\n+\n+    -   `options`: Warns about the issues relating to use of command line\n+        options.\n+\n+    -   `output-file-clash`: Warns if any output file is overwritten during compilation.\n+         This can occur, for example, on case-insensitive filesystems.\n+\n+    -   `overloads`: Warns about the issues related to method overloads.\n+\n+    -   `overrides`: Warns about the issues related to method overrides.\n+\n+    -   `path`: Warns about the invalid path elements on the command line.\n+\n+    -   `preview`: Warns about the use of preview language features.\n+\n+    -   `processing`: Warns about the issues related to annotation processing.\n+\n+    -   `rawtypes`: Warns about the use of raw types.\n+\n+    -   `removal`: Warns about the use of an API that has been marked for\n+        removal.\n+\n+    -   `restricted`: Warns about the use of restricted methods.\n+\n+    -   `requires-automatic`: Warns developers about the use of automatic\n+        modules in requires clauses.\n+\n+    -   `requires-transitive-automatic`: Warns about automatic modules in\n+        requires transitive.\n+\n+    -   `serial`: Warns about the serializable classes that do not provide a\n+        serial version ID. Also warns about access to non-public members from a\n+        serializable element.\n+\n+    -   `static`: Warns about the accessing a static member using an instance.\n+\n+    -   `strictfp`: Warns about unnecessary use of the `strictfp` modifier.\n+\n+    -   `synchronization`: Warns about synchronization attempts on instances\n+        of value-based classes.\n+\n+    -   `text-blocks`: Warns about inconsistent white space characters in text\n+        block indentation.\n+\n+    -  `this-escape`: Warns about constructors leaking `this` prior to subclass initialization.\n+\n+    -   `try`: Warns about the issues relating to the use of try blocks (that\n+        is, try-with-resources).\n+\n+    -   `unchecked`: Warns about the unchecked operations.\n+\n+    -   `varargs`: Warns about the potentially unsafe `vararg` methods.\n+\n+    -   `none`: Disables all warnings.\n+\n+    With the exception of `all` and `none`, the keys can be used with\n+    the `@SuppressWarnings` annotation to suppress warnings in a part\n+    of the source code being compiled.\n+\n+    See [Examples of Using -Xlint keys].\n+\n+<a id=\"option-Xmaxerrs\">`-Xmaxerrs` *number*<\/a>\n+:   Sets the maximum number of errors to print.\n+\n+<a id=\"option-Xmaxwarns\">`-Xmaxwarns` *number*<\/a>\n+:   Sets the maximum number of warnings to print.\n+\n+<a id=\"option-Xpkginfo\">`-Xpkginfo:`\\[`always`, `legacy`, `nonempty`\\]<\/a>\n+:   Specifies when and how the `javac` command generates `package-info.class`\n+    files from `package-info.java` files using one of the following options:\n+\n+    `always`\n+    :   Generates a `package-info.class` file for every `package-info.java`\n+        file. This option may be useful if you use a build system such as Ant,\n+        which checks that each `.java` file has a corresponding `.class` file.\n+\n+    `legacy`\n+    :   Generates a `package-info.class` file only if `package-info.java`\n+        contains annotations. This option does not generate a\n+        `package-info.class` file if `package-info.java` contains only\n+        comments.\n+\n+        **Note:** A `package-info.class` file might be generated but be empty if all the\n+        annotations in the `package-info.java` file have\n+        `RetentionPolicy.SOURCE`.\n+\n+    `nonempty`\n+    :   Generates a `package-info.class` file only if `package-info.java`\n+        contains annotations with `RetentionPolicy.CLASS` or\n+        `RetentionPolicy.RUNTIME`.\n+\n+<a id=\"option-Xplugin\">`-Xplugin:`*name* *args*<\/a>\n+:   Specifies the name and optional arguments for a plug-in to be run.\n+    If *args* are provided, *name* and *args* should be quoted or otherwise\n+    escape the whitespace characters between the name and all the arguments.\n+    For details on the API for a plugin, see the API documentation for\n+    [jdk.compiler\/com.sun.source.util.Plugin](..\/..\/api\/jdk.compiler\/com\/sun\/source\/util\/Plugin.html).\n+\n+<a id=\"option-Xprefer\">`-Xprefer:`\\[`source`, `newer`\\]<\/a>\n+:   Specifies which file to read when both a source file and class file are\n+    found for an implicitly compiled class using one of the following options.\n+    See [Searching for Module, Package and Type Declarations].\n+\n+    -   `-Xprefer:newer`: Reads the newer of the source or class files for a\n+        type (default).\n+\n+    -   `-Xprefer:source` : Reads the source file. Use `-Xprefer:source` when\n+        you want to be sure that any annotation processors can access\n+        annotations declared with a retention policy of `SOURCE`.\n+\n+<a id=\"option-Xprint\">`-Xprint`<\/a>\n+:   Prints a textual representation of specified types for debugging purposes.\n+    This does not perform annotation processing or compilation. The format of\n+    the output could change.\n+\n+<a id=\"option-XprintProcessorInfo\">`-XprintProcessorInfo`<\/a>\n+:   Prints information about which annotations a processor is asked to process.\n+\n+<a id=\"option-XprintRounds\">`-XprintRounds`<\/a>\n+:   Prints information about initial and subsequent annotation processing\n+    rounds.\n+\n+<a id=\"option-Xstdout\">`-Xstdout` *filename*<\/a>\n+:   Sends compiler messages to the named file. By default, compiler messages go\n+    to `System.err`.\n+\n+## Environment Variables\n+\n+### CLASSPATH\n+\n+If the [`--class-path`](#option-class-path) option or any of its alternate forms are not specified,\n+the class path will default to the value of the `CLASSPATH` environment\n+variable if it is set.\n+However, it is recommended that this environment variable should _not_ be set,\n+and that the `--class-path` option should be used to provide an explicit\n+value for the class path when one is required.\n+\n+### JDK\\_JAVAC\\_OPTIONS\n+\n+The content of the `JDK_JAVAC_OPTIONS` environment variable, separated by\n+white-spaces ( ) or white-space characters (`\\n`, `\\t`, `\\r`, or `\\f`) is\n+prepended to the command line arguments passed to `javac` as a list of\n+arguments.\n+\n+The encoding requirement for the environment variable is the same as the\n+`javac` command line on the system. `JDK_JAVAC_OPTIONS` environment variable\n+content is treated in the same manner as that specified in the command line.\n+\n+Single quotes (`'`) or double quotes (`\"`) can be used to enclose arguments\n+that contain whitespace characters. All content between the open quote and the\n+first matching close quote are preserved by simply removing the pair of quotes.\n+In case a matching quote is not found, the launcher will abort with an error\n+message. `@`*files* are supported as they are specified in the command line.\n+However, as in `@`*files*, use of a wildcard is not supported.\n+\n+**Examples of quoting arguments containing white spaces:**\n+\n+>   `export JDK_JAVAC_OPTIONS='@\"C:\\white spaces\\argfile\"'`\n+\n+>   `export JDK_JAVAC_OPTIONS='\"@C:\\white spaces\\argfile\"'`\n+\n+>   `export JDK_JAVAC_OPTIONS='@C:\\\"white spaces\"\\argfile'`\n+\n+## Command-Line Argument Files\n+\n+An argument file can include command-line options and source file names in any\n+combination. The arguments within a file can be separated by spaces or new line\n+characters. If a file name contains embedded spaces, then put the whole file\n+name in double quotation marks.\n+\n+File names within an argument file are relative to the current directory, not\n+to the location of the argument file. Wildcards (`*`) are not allowed in these\n+lists (such as for specifying `*.java`). Use of the at sign (`@`) to\n+recursively interpret files is not supported. The `-J` options are not supported\n+because they're passed to the launcher, which does not support argument files.\n+\n+When executing the `javac` command, pass in the path and name of each argument\n+file with the at sign (`@`) leading character. When the `javac` command\n+encounters an argument beginning with the at sign (`@`), it expands the\n+contents of that file into the argument list.\n+\n+\n+### Examples of Using javac @filename\n+\n+Single Argument File\n+:   You could use a single argument file named `argfile` to hold all `javac`\n+    arguments:\n+\n+    >   `javac @argfile`\n+\n+    This argument file could contain the contents of both files shown in the\n+    following **Two Argument Files** example.\n+\n+Two Argument Files\n+:   You can create two argument files: one for the `javac` options and the\n+    other for the source file names. Note that the following lists have no\n+    line-continuation characters.\n+\n+    Create a file named `options` that contains the following:\n+\n+    **Linux and macOS:**\n+\n+    ```\n+    -d classes\n+    -g\n+    -sourcepath \/java\/pubs\/ws\/1.3\/src\/share\/classes\n+    ```\n+\n+    **Windows:**\n+\n+    ```\n+    -d classes\n+    -g\n+    -sourcepath C:\\java\\pubs\\ws\\1.3\\src\\share\\classes\n+    ```\n+\n+    Create a file named `sources` that contains the following:\n+\n+    ```\n+    MyClass1.java\n+    MyClass2.java\n+    MyClass3.java\n+    ```\n+\n+    Then, run the `javac` command as follows:\n+\n+    >   `javac @options @sources`\n+\n+Argument Files with Paths\n+:   The argument files can have paths, but any file names inside the files are\n+    relative to the current working directory (not `path1` or `path2`):\n+\n+    >   `javac @path1\/options @path2\/sources`\n+\n+## Arrangement of Source Code\n+\n+In the Java language, classes and interfaces can be organized into\n+packages, and packages can be organized into modules. `javac` expects\n+that the physical arrangement of source files in directories of the\n+file system will mirror the organization of classes into packages, and\n+packages into modules.\n+\n+It is a widely adopted convention that module names and package names\n+begin with a lower-case letter, and that class names begin with an\n+upper-case letter.\n+\n+### Arrangement of Source Code for a Package\n+\n+When classes and interfaces are organized into a package, the package\n+is represented as a directory, and any subpackages are represented as\n+subdirectories.\n+\n+For example:\n+\n+- The package `p` is represented as a directory called `p`.\n+\n+- The package `p.q` -- that is, the subpackage `q` of package `p` --\n+  is represented as the subdirectory `q` of directory `p`. The\n+  directory tree representing package `p.q` is therefore `p\\q`\n+  on Windows, and `p\/q` on other systems.\n+\n+- The package `p.q.r` is represented as the directory tree `p\\q\\r`\n+  (on Windows) or `p\/q\/r` (on other systems).\n+\n+Within a directory or subdirectory, `.java` files represent classes\n+and interfaces in the corresponding package or subpackage.\n+\n+For example:\n+\n+- The class `X` declared in package `p` is represented by the file\n+  `X.java` in the `p` directory.\n+\n+- The class `Y` declared in package `p.q` is represented by the file\n+  `Y.java` in the `q` subdirectory of directory `p`.\n+\n+- The class `Z` declared in package `p.q.r` is represented by the file\n+  `Z.java` in the `r` subdirectory of `p\\q` (on Windows) or `p\/q`\n+  (on other systems).\n+\n+In some situations, it is convenient to split the code into\n+separate directories, each structured as described above, and\n+the aggregate list of directories specified to `javac`.\n+\n+### Arrangement of Source Code for a Module\n+\n+In the Java language, a module is a set of packages designed for\n+reuse. In addition to `.java` files for classes and interfaces, each\n+module has a source file called `module-info.java` which:\n+\n+1. declares the module's name;\n+\n+2. lists the packages exported by the module (to allow reuse by other\n+   modules);\n+\n+3. lists other modules required by the module (to reuse their exported\n+   packages).\n+\n+When packages are organized into a module, the module is represented\n+by one or more directories representing the packages in the module,\n+one of which contains the `module-info.java` file. It may be convenient,\n+but it is not required, to use a single directory, named after the module,\n+to contain the `module-info.java` file alongside the directory tree which\n+represents the packages in the module (i.e., the _package hierarchy_\n+described above). The exact arrangement of source code for a module\n+is typically dictated by the conventions adopted by a development\n+environment (IDE) or build system.\n+\n+For example:\n+\n+- The module `a.b.c` may be represented by the directory `a.b.c`, on all\n+  systems.\n+\n+- The module's declaration is represented by the file\n+  `module-info.java` in the `a.b.c` directory.\n+\n+- If the module contains package `p.q.r`, then the `a.b.c` directory\n+  contains the directory tree `p\\q\\r` (on Windows) or `p\/q\/r`\n+  (on other systems).\n+\n+The development environment may prescribe some directory hierarchy\n+between the directory named for the module and the source files to\n+be read by `javac`.\n+\n+For example:\n+\n+- The module `a.b.c` may be represented by the directory `a.b.c`\n+\n+- The module's declaration and the module's packages may be in\n+  some subdirectory of `a.b.c`, such as `src\\main\\java` (on Windows)\n+  or `src\/main\/java` (on other systems).\n+\n+\n+## Configuring a Compilation\n+\n+This section describes how to configure `javac` to perform a basic compilation.\n+\n+See [Configuring the Module System] for additional details for use when compiling\n+for a release of the platform that supports modules.\n+\n+### Source Files\n+\n+*   Specify the source files to be compiled on the command line.\n+\n+If there are no compilation errors, the corresponding class files will\n+be placed in the [output directory].\n+\n+Some systems may limit the amount you can put on a command line;\n+to work around those limits, you can use [argument files](#command-line-argument-files).\n+\n+When compiling code for modules, you can also specify source files indirectly,\n+by using the [`--module`](#option-module) or `-m` option.\n+\n+### Output Directory\n+\n+*   Use the [`-d`](#option-d) option to specify an output directory in which to put the compiled class files.\n+\n+This will normally be organized in a [package hierarchy](#package-hierarchy),\n+unless you are compiling source code from multiple modules, in which case it will be\n+organized as a [module hierarchy](#module-hierarchy).\n+\n+When the compilation has been completed, if you are compiling one or more modules,\n+you can place the output directory on the module path for the Java [launcher](java.html);\n+otherwise, you can place the place the output directory on the class path\n+for the Java launcher.\n+\n+### Precompiled Code\n+\n+The code to be compiled may refer to libraries beyond what is provided by the platform.\n+If so, you must place these libraries on the class path or module path.\n+If the library code is not in a module, place it on the class path;\n+if it is in a module, place it on the module path.\n+\n+*   Use the [`--class-path`](#option-class-path) option to specify libraries to be placed on the class path.\n+    Locations on the class path should be organized in a [package hierarchy](#package-hierarchy).\n+    You can also use alternate forms of the option: `-classpath` or `-cp`.\n+\n+*   Use the [`--module-path`](#option-module-path) option to specify libraries to be placed on the module path.\n+    Locations on the module path should either be modules or directories of modules.\n+    You can also use an alternate form of the option: `-p`.\n+\n+    See [Configuring the Module System] for details on how to modify the default\n+    configuration of library modules.\n+\n+**Note**: the options for the class path and module path are not mutually\n+exclusive, although it is not common to specify the class path when compiling\n+code for one or more modules.\n+\n+### Additional Source Files\n+\n+The code to be compiled may refer to types in additional source files that are not\n+specified on the command line.\n+If so, you must put those source files on either the source path or module path.\n+You can only specify one of these options: if you are not compiling code for a module,\n+or if you are only compiling code for a single module, use the source path;\n+if you are compiling code for multiple modules, use the module source path.\n+\n+*   Use the [`--source-path`](#option-source-path) option to specify the locations of additional source\n+    files that may be read by javac.\n+    Locations on the source path should be organized in a [package hierarchy](#package-hierarchy).\n+    You can also use an alternate form of the option: `-sourcepath`.\n+\n+*   Use the [`--module-source-path`](#option-module-source-path) option one or more times to specify the location\n+    of additional source files in different modules that may be read by javac,\n+    or when compiling source files in multiple modules.\n+    You can either specify the locations for each module [individually](#module-specific-form),\n+    or you can organize the source files so that you can specify the locations all\n+    [together](#module-pattern-form).  For more details, see [The Module Source Path Option].\n+\n+If you want to be able to refer to types in additional source files but do not\n+want them to be compiled, use the [`-implicit`](#option-implicit) option.\n+\n+**Note**: if you are compiling code for multiple modules, you must always specify\n+a module source path, and all source files specified on the command line must be\n+in one of the directories on the module source path, or in a subdirectory thereof.\n+\n+\n+### Example of Compiling Multiple Source Files\n+\n+This example compiles the `Aloha.java`, `GutenTag.java`, `Hello.java`, and\n+`Hi.java` source files in the `greetings` package.\n+\n+**Linux and macOS:**\n+\n+```\n+% javac greetings\/*.java\n+% ls greetings\n+Aloha.class         GutenTag.class      Hello.class         Hi.class\n+Aloha.java          GutenTag.java       Hello.java          Hi.java\n+```\n+\n+**Windows:**\n+\n+```\n+C:\\>javac greetings\\*.java\n+C:\\>dir greetings\n+Aloha.class         GutenTag.class      Hello.class         Hi.class\n+Aloha.java          GutenTag.java       Hello.java          Hi.java\n+```\n+\n+### Example of Specifying a User Class Path\n+\n+After changing one of the source files in the previous example, recompile it:\n+\n+**Linux and macOS:**\n+\n+```\n+pwd\n+\/examples\n+javac greetings\/Hi.java\n+```\n+\n+**Windows:**\n+\n+```\n+C:\\>cd\n+\\examples\n+C:\\>javac greetings\\Hi.java\n+```\n+\n+Because `greetings.Hi` refers to other classes in the `greetings` package, the\n+compiler needs to find these other classes. The previous example works because\n+the default user class path is the directory that contains the package\n+directory. If you want to recompile this file without concern for which\n+directory you are in, then add the examples directory to the user class path by\n+setting `CLASSPATH`. This example uses the `-classpath` option.\n+\n+**Linux and macOS:**\n+\n+>   `javac -classpath \/examples \/examples\/greetings\/Hi.java`\n+\n+**Windows:**\n+\n+>   `C:\\>javac -classpath \\examples \\examples\\greetings\\Hi.java`\n+\n+If you change `greetings.Hi` to use a banner utility, then that utility also\n+needs to be accessible through the user class path.\n+\n+**Linux and macOS:**\n+\n+```\n+javac -classpath \/examples:\/lib\/Banners.jar \\\n+            \/examples\/greetings\/Hi.java\n+```\n+\n+**Windows:**\n+\n+```\n+C:\\>javac -classpath \\examples;\\lib\\Banners.jar ^\n+            \\examples\\greetings\\Hi.java\n+```\n+\n+To execute a class in the `greetings` package, the program needs access to the\n+`greetings` package, and to the classes that the `greetings` classes use.\n+\n+**Linux and macOS:**\n+\n+>   `java -classpath \/examples:\/lib\/Banners.jar greetings.Hi`\n+\n+**Windows:**\n+\n+>   `C:\\>java -classpath \\examples;\\lib\\Banners.jar greetings.Hi`\n+\n+## Configuring the Module System\n+\n+If you want to include additional modules in your compilation, use the\n+[`--add-modules`](#option-add-modules) option.\n+This may be necessary when you are compiling code that is not in a module,\n+or which is in an automatic module, and the code refers to API in the additional\n+modules.\n+\n+If you want to restrict the set of modules in your compilation, use the\n+[`--limit-modules`](#option-limit-modules) option.\n+This may be useful if you want to ensure that the code you are compiling\n+is capable of running on a system with a limited set of modules installed.\n+\n+If you want to break encapsulation and specify that additional packages\n+should be considered as exported from a module, use the [`--add-exports`](#option-add-exports) option.\n+This may be useful when performing white-box testing; relying on access\n+to internal API in production code is strongly discouraged.\n+\n+If you want to specify that additional packages\n+should be considered as required by a module, use the [`--add-reads`](#option-add-reads) option.\n+This may be useful when performing white-box testing; relying on access\n+to internal API in production code is strongly discouraged.\n+\n+You can patch additional content into any module using the\n+[`--patch-module`](#option-patch-module) option. See [Patching a Module] for more details.\n+\n+## Searching for Module, Package and Type Declarations\n+\n+To compile a source file, the compiler often needs information about a module\n+or type, but the declaration is not in the source files specified on the command\n+line.\n+\n+`javac` needs type information for every class or interface used,\n+extended, or implemented in the source file. This includes classes and\n+interfaces not explicitly mentioned in the source file, but that provide\n+information through inheritance.\n+\n+For example, when you create a subclass of `java.awt.Window`, you are also\n+using the ancestor classes of `Window`: `java.awt.Container`,\n+`java.awt.Component`, and `java.lang.Object`.\n+\n+When compiling code for a module, the compiler also needs to have available\n+the declaration of that module.\n+\n+A successful search may produce a class file, a source file, or both. If\n+both are found, then you can use the [`-Xprefer`](#option-Xprefer) option to instruct the compiler\n+which to use.\n+\n+If a search finds and uses a source file, then by default `javac`\n+compiles that source file. This behavior can be altered with\n+[`-implicit`](#option-implicit).\n+\n+The compiler might not discover the need for some type information until after\n+annotation processing completes. When the type information is found in a source\n+file and no [`-implicit`](#option-implicit) option is specified, the compiler gives a warning that\n+the file is being compiled without being subject to annotation processing. To\n+disable the warning, either specify the file on the command line (so that it\n+will be subject to annotation processing) or use the [`-implicit`](#option-implicit) option to\n+specify whether or not class files should be generated for such source files.\n+\n+The way that `javac` locates the declarations of those types\n+depends on whether the reference exists within code for a module or not.\n+\n+### Searching Package Oriented Paths\n+\n+When searching for a source or class file on a path composed of package oriented\n+locations, `javac` will check each location on the path in turn for the\n+possible presence of the file. The first occurrence of a particular file\n+shadows (hides) any subsequent occurrences of like-named files. This shadowing\n+does not affect any search for any files with a different name. This can be\n+convenient when searching for source files, which may be grouped in different\n+locations, such as shared code, platform-specific code and generated code.\n+It can also be useful when injecting alternate versions of a class file into\n+a package, to debugging or other instrumentation reasons. But, it can also\n+be dangerous, such as when putting incompatible different versions of a library\n+on the class path.\n+\n+### Searching Module Oriented Paths\n+\n+Prior to scanning any module paths for any package or type declarations,\n+`javac` will lazily scan the following paths and locations to determine\n+the modules that will be used in the compilation.\n+\n+* The module source path (see the [`--module-source-path`](#option-module-source-path) option)\n+* The path for upgradeable modules (see the [`--upgrade-module-path`](#option-upgrade-module-path) option)\n+* The system modules (see the [`--system`](#option-system) option)\n+* The user module path ( see the [`--module-path`](#option-module-path) option)\n+\n+For any module, the first occurrence of the module during the scan completely\n+shadows (hides) any subsequent appearance of a like-named module. While locating\n+the modules, `javac` is able to determine the packages exported by the module\n+and to associate with each module a package oriented path for the contents of\n+the module. For any previously compiled module, this path will typically be a\n+single entry for either a directory or a file that provides an internal\n+directory-like hierarchy, such as a JAR file. Thus, when searching for a type\n+that is in a package that is known to be exported by a module, `javac` can\n+locate the declaration directly and efficiently.\n+\n+### Searching for the Declaration of a Module\n+\n+If the module has been previously compiled, the module declaration is\n+located in a file named `module-info.class` in the root of the package hierarchy\n+for the content of the module.\n+\n+If the module is one of those currently being compiled, the module declaration\n+will be either the file named `module-info.class` in the root of the\n+package hierarchy for the module in the class output directory, or the\n+file named `module-info.java` in one of the locations on the source path\n+or one the module source path for the module.\n+\n+### Searching for the Declaration of a Type When the Reference is not in a Module\n+\n+When searching for a type that is referenced in code that is not in a module,\n+`javac` will look in the following places:\n+\n+*   The platform classes (or the types in exported packages of the platform modules)\n+    (This is for compiled class files only.)\n+\n+*   Types in exported packages of any modules on the module path, if applicable.\n+    (This is for compiled class files only.)\n+\n+*   Types in packages on the class path and\/or source path:\n+\n+    *   If both are specified, `javac` looks for compiled class files on the class path\n+        and for source files on the source path.\n+\n+    *   If the class path is specified, but not source path, `javac` looks for both\n+        compiled class files and source files on the class path.\n+\n+    *   If the class path is not specified, it defaults to the current directory.\n+\n+When looking for a type on the class path and\/or source path, if both a compiled\n+class file and a source file are found, the most recently modified file will\n+be used by default.\n+If the source file is newer, it will be compiled and will may override any\n+previously compiled version of the file.  You can use the [`-Xprefer`](#option-Xprefer) option\n+to override the default behavior.\n+\n+### Searching for the Declaration of a Type When the Reference is in a Module\n+\n+When searching for a type that is referenced in code in a module,\n+`javac` will examine the declaration of the enclosing module to determine\n+if the type is in a package that is exported from another module that is\n+readable by the enclosing module.\n+If so, `javac` will simply and directly go to the definition of that module\n+to find the definition of the required type.\n+Unless the module is another of the modules being compiled, `javac` will\n+only look for compiled class files files. In other words, `javac` will\n+not look for source files in platform modules or modules on the module path.\n+\n+If the type being referenced is not in some other readable module,\n+`javac` will examine the module being compiled to try and find the\n+declaration of the type.\n+`javac` will look for the declaration of the type as follows:\n+\n+*   Source files specified on the command line or on the source path or\n+    module source path.\n+\n+*   Previously compiled files in the output directory.\n+\n+\n+## Directory Hierarchies\n+\n+`javac` generally assumes that source files and compiled class files will be\n+organized in a file system directory hierarchy or in a type of file that\n+supports in an internal directory hierarchy, such as a JAR file.\n+Three different kinds of hierarchy are supported: a _package hierarchy_,\n+a _module hierarchy_, and a _module source hierarchy_.\n+\n+While `javac` is fairly relaxed about the organization of source code,\n+beyond the expectation that source will be organized in one or package\n+hierarchies, and can generally accommodate organizations prescribed by\n+development environments and build tools, Java tools in general,\n+and `javac` and the Java launcher in particular, are more stringent\n+regarding the organization of compiled class files, and will be\n+organized in package hierarchies or module hierarchies, as appropriate.\n+\n+The location of these hierarchies are specified to `javac` with command-line\n+options, whose names typically end in \"path\", like [`--source-path`](#option-source-path) or\n+[`--class-path`](#option-class-path). Also as a general rule, path options whose name includes the\n+word `module`, like [`--module-path`](#option-module-path), are used to specify module hierarchies,\n+although some module-related path options allow a package hierarchy to be\n+specified on a per-module basis. All other path options are used to specify\n+package hierarchies.\n+\n+### Package Hierarchy\n+\n+In a package hierarchy, directories and subdirectories are used\n+to represent the component parts of the package name, with the source\n+file or compiled class file for a type being stored as a file with an\n+extension of `.java` or `.class` in the most nested directory.\n+\n+For example, in a package hierarchy, the source file for a class\n+`com.example.MyClass` will be stored in the file _com\/example\/MyClass.java_\n+\n+### Module Hierarchy\n+\n+In a module hierarchy, the first level of directories are named\n+for the modules in the hierarchy; within each of those directories\n+the contents of the module are organized in package hierarchies.\n+\n+For example, in a module hierarchy, the compiled class file for a type called\n+`com.example.MyClass` in a module called `my.library` will be stored in\n+_my.library\/com\/example\/MyClass.class_.\n+\n+The various output directories used by `javac` (the class output directory,\n+the source output directory, and native header output directory)\n+will all be organized in a module hierarchy when multiple modules are being compiled.\n+\n+### Module Source Hierarchy\n+\n+Although the source for each individual module should always be\n+organized in a package hierarchy, it may be convenient to group\n+those hierarchies into a module source hierarchy. This is similar\n+to a module hierarchy, except that there may be intervening directories\n+between the directory for the module and the directory that is\n+the root of the package hierarchy for the source code of the module.\n+\n+For example, in a module source hierarchy, the source file for a type called\n+`com.example.MyClass` in a module called `my.library` may be stored in a\n+file such as\n+_my.library\/src\/main\/java\/com\/example\/MyClass.java_.\n+\n+## The Module Source Path Option\n+\n+The [`--module-source-path`](#option-module-source-path) option has two forms: a _module-specific form_,\n+in which a package path is given for each module containing code to be compiled,\n+and a _module-pattern_ form, in which the source path for each module is specified\n+by a pattern.\n+The module-specific form is generally simpler to use when only a small number of\n+modules are involved; the module-pattern form may be more convenient when the\n+number of modules is large and the modules are organized in a regular manner that\n+can be described by a pattern.\n+\n+Multiple instances of the `--module-source-path` option may be given, each one\n+using either the module-pattern form or the module-specific form, subject to the\n+following limitations:\n+\n+*   the module-pattern form may be used at most once\n+*   the module-specific form may be used at most once for any given module\n+\n+If the module-specific form is used for any module, the associated search path\n+overrides any path that might otherwise have been inferred from the module-pattern form.\n+\n+### Module-specific form\n+\n+The module-specific form allows an explicit search path to be given for any specific module.\n+This form is:\n+\n+*    `--module-source-path` *module-name*`=`*file-path* (*path-separator* *file-path*)*\n+\n+The path separator character is `;` on Windows, and `:` otherwise.\n+\n+**Note:** this is similar to the form used for the [`--patch-module`](#option-patch-module) option.\n+\n+### Module-pattern form\n+\n+The module-pattern form allows a concise specification of the module source path\n+for any number of modules organized in regular manner.\n+\n+*    `--module-source-path` *pattern*\n+\n+The pattern is defined by the following rules, which are applied in order:\n+\n+*   The argument is considered to be a series of segments separated by the path\n+    separator character (`;` on Windows, and `:` otherwise).\n+\n+*   Each segment containing curly braces of the form\n+\n+        string1{alt1 ( ,alt2 )* } string2\n+\n+    is considered to be replaced by a series of segments formed by \"expanding\" the braces:\n+\n+        string1 alt1 string2\n+        string1 alt2 string2\n+        and so on...\n+\n+    The braces may be nested.\n+\n+    This rule is applied for all such usages of braces.\n+\n+ *  Each segment must have at most one asterisk (`*`).\n+    If a segment does not contain an asterisk, it is considered to be as though the\n+    file separator character and an asterisk are appended.\n+\n+    For any module _M_, the source path for that module is formed from the series\n+    of segments obtained by substituting the module name _M_ for the asterisk in\n+    each segment.\n+\n+    **Note**: in this context, the asterisk is just used as a special marker, to\n+    denote the position in the path of the module name. It should not be confused\n+    with the use of `*` as a file name wildcard character, as found on most\n+    operating systems.\n+\n+## Patching Modules\n+\n+javac allows any content, whether in source or compiled form, to be patched\n+into any module using the [`--patch-module`](#option-patch-module) option.\n+You may want to do this to compile alternative implementations of a class\n+to be patched at runtime into a JVM, or to inject additional classes into\n+the module, such as when testing.\n+\n+The form of the option is:\n+\n+*    `--patch-module` *module-name*`=`*file-path* (*path-separator* *file-path* )*\n+\n+The path separator character is `;` on Windows, and `:` otherwise.\n+The paths given for the module must specify the root of a\n+package hierarchy for the contents of the module\n+\n+The option may be given at most once for any given module.\n+Any content on the path will hide any like-named content later in the path\n+and in the patched module.\n+\n+When patching source code into more than one module, the [`--module-source-path`](#option-module-source-path)\n+must also be used, so that the output directory is organized in a module hierarchy,\n+and capable of holding the compiled class files for the modules being compiled.\n+\n+## Annotation Processing\n+\n+The `javac` command provides direct support for annotation processing.\n+\n+The API for annotation processors is defined in the\n+`javax.annotation.processing` and `javax.lang.model` packages and subpackages.\n+\n+### How Annotation Processing Works\n+\n+Unless annotation processing is disabled with the [`-proc:none`](#option-proc) option, the\n+compiler searches for any annotation processors that are available. The search\n+path can be specified with the [`-processorpath`](#option-processor-path) option. If no path is\n+specified, then the user class path is used. Processors are located by means of\n+service provider-configuration files named\n+`META-INF\/services\/javax.annotation.processing.Processor` on the search path.\n+Such files should contain the names of any annotation processors to be used,\n+listed one per line. Alternatively, processors can be specified explicitly,\n+using the [`-processor`](#option-processor) option.\n+\n+After scanning the source files and classes on the command line to determine\n+what annotations are present, the compiler queries the processors to determine\n+what annotations they process. When a match is found, the processor is called.\n+A processor can claim the annotations it processes, in which case no further\n+attempt is made to find any processors for those annotations. After all of the\n+annotations are claimed, the compiler does not search for additional\n+processors.\n+\n+If any processors generate new source files, then another round of annotation\n+processing occurs: Any newly generated source files are scanned, and the\n+annotations processed as before. Any processors called on previous rounds are\n+also called on all subsequent rounds. This continues until no new source files\n+are generated.\n+\n+After a round occurs where no new source files are generated, the annotation\n+processors are called one last time, to give them a chance to complete any\n+remaining work. Finally, unless the [`-proc:only`](#option-proc) option is used, the compiler\n+compiles the original and all generated source files.\n+\n+If you use an annotation processor that generates additional source\n+files to be included in the compilation, you can specify a default\n+module to be used for the newly generated files, for use when a\n+module declaration is not also generated. In this case, use the\n+[`--default-module-for-created-files`](#option-default-module-for-created-files) option.\n+\n+### Compilation Environment and Runtime Environment.\n+\n+The declarations in source files and previously compiled class files are analyzed\n+by `javac` in a _compilation environment_ that is distinct from the\n+_runtime environment_ used to execute `javac` itself. Although there is a\n+deliberate similarity between many `javac` options and like-named options for the\n+Java [launcher](java.html), such as `--class-path`, `--module-path` and so\n+on, it is important to understand that in general the `javac` options just affect\n+the environment in which the source files are compiled, and do not affect\n+the operation of `javac` itself.\n+\n+The distinction between the compilation environment and runtime environment\n+is significant when it comes to using annotation processors.\n+Although annotations processors process elements (declarations) that exist\n+in the compilation environment, the annotation processor itself is executed\n+in the runtime environment. If an annotation processor has dependencies on\n+libraries that are not in modules, the libraries can be placed, along with the\n+annotation processor itself, on the processor path.\n+(See the [`--processor-path`](#option-processor-path) option.)\n+If the annotation processor and its dependencies are in modules, you should\n+use the processor module path instead.\n+(See the [`--processor-module-path`](#option-processor-module-path) option.)\n+When those are insufficient, it may be necessary to provide further\n+configuration of the runtime environment. This can be done in two ways:\n+\n+1.  If `javac` is invoked from the command line, options can be passed to the\n+    underlying runtime by prefixing the option with [`-J`](#option-J).\n+\n+2.  You can start an instance of a Java Virtual Machine directly and use\n+    command line options and API to configure an environment in which\n+   `javac` can be invoked via one of its [APIs].\n+\n+## Compiling for Earlier Releases of the Platform\n+\n+`javac` can compile code that is to be used on other releases of the platform,\n+using either the [`--release`](#option-release) option, or the [`--source`](#option-source)\/`-source` and\n+[`--target`](#option-target)\/`-target` options, together with additional options to specify the\n+platform classes.\n+\n+Depending on the desired platform release, there are some restrictions on some\n+of the options that can be used.\n+\n+*   When compiling for JDK 8 and earlier releases, you cannot use any option\n+    that is intended for use with the module system.\n+    This includes all of the following options:\n+\n+    *   [`--module-source-path`](#option-module-source-path),\n+        [`--upgrade-module-path`](#option-upgrade-module-path),\n+        [`--system`](#option-system),\n+        [`--module-path`](#option-module-path),\n+        [`--add-modules`](#option-add-modules),\n+        [`--add-exports`](#option-add-exports),\n+        `--add-opens`,\n+        [`--add-reads`](#option-add-reads),\n+        [`--limit-modules`](#option-limit-modules),\n+        [`--patch-module`](#option-patch-module)\n+\n+    If you use the `--source`\/`-source` or `--target`\/`-target` options,\n+    you should also set the appropriate platform classes using the\n+    boot class path family of options.\n+\n+*   When compiling for JDK 9 and later releases, you cannot use any option\n+    that is intended to configure the boot class path.\n+    This includes all of the following options:\n+\n+    *    [`-Xbootclasspath\/p:`](#option-Xbootclasspath-p),\n+         [`-Xbootclasspath`](#option-Xbootclasspath),\n+         [`-Xbootclasspath\/a:`](#option-Xbootclasspath-a),\n+         [`-endorseddirs`](#option-endorseddirs),\n+         [`-Djava.endorsed.dirs`](#option-Djava.endorsed.dirs),\n+         [`-extdirs`](#option-extdirs),\n+         [`-Djava.ext.dirs`](#option-Djava.ext.dirs),\n+         [`-profile`](#option-profile)\n+\n+    If you use the `--source`\/`-source` or `--target`\/`-target` options,\n+    you should also set the  appropriate platform classes using the `--system`\n+    option to give the location of an appropriate installed release of JDK.\n+\n+When using the `--release` option, only the supported documented API for that\n+release may be used; you cannot use any options to break encapsulation to\n+access any internal classes.\n+\n+## APIs\n+\n+The `javac` compiler can be invoked using an API in three different ways:\n+\n+The [Java Compiler API](..\/..\/api\/java.compiler\/javax\/tools\/JavaCompiler.html)\n+:   This provides the most flexible way to invoke the compiler,\n+    including the ability to compile source files provided in\n+    memory buffers or other non-standard file systems.\n+\n+The [ToolProvider API](..\/..\/api\/java.base\/java\/util\/spi\/ToolProvider.html)\n+:   A `ToolProvider` for `javac` can be obtained by calling\n+    `ToolProvider.findFirst(\"javac\")`. This returns an object\n+    with the equivalent functionality of the command-line tool.\n+\n+    **Note**: This API should not be confused with the like-named\n+    API in the [`javax.tools`](..\/..\/api\/java.compiler\/javax\/tools\/ToolProvider.html)\n+    package.\n+\n+The `javac` [Legacy API](..\/..\/api\/jdk.compiler\/com\/sun\/tools\/javac\/Main.html)\n+:   This API is  retained for backward compatibility only.\n+    All new code should use either the Java Compiler API or the ToolProvider API.\n+\n+**Note:** All other classes and methods found in a package with names that start with\n+`com.sun.tools.javac` (subpackages of `com.sun.tools.javac`) are strictly\n+internal and subject to change at any time.\n+\n+## Examples of Using -Xlint keys\n+\n+`cast`\n+:   Warns about unnecessary and redundant casts, for example:\n+\n+    >   `String s = (String) \"Hello!\"`\n+\n+`classfile`\n+:   Warns about issues related to class file contents.\n+\n+`deprecation`\n+:   Warns about the use of deprecated items. For example:\n+\n+    ```\n+    java.util.Date myDate = new java.util.Date();\n+    int currentDay = myDate.getDay();\n+    ```\n+\n+    The method `java.util.Date.getDay` has been deprecated since JDK 1.1.\n+\n+`dep-ann`\n+:   Warns about items that are documented with the `@deprecated` Javadoc\n+    comment, but do not have the `@Deprecated` annotation, for example:\n+\n+    ```\n+    \/**\n+      * @deprecated As of Java SE 7, replaced by {@link #newMethod()}\n+      *\/\n+    public static void deprecatedMethod() { }\n+    public static void newMethod() { }\n+    ```\n+\n+`divzero`\n+:   Warns about division by the constant integer 0, for example:\n+\n+    >   `int divideByZero = 42 \/ 0;`\n+\n+`empty`\n+:   Warns about empty statements after `if`statements, for example:\n+\n+    ```\n+    class E {\n+        void m() {\n+             if (true) ;\n+        }\n+    }\n+    ```\n+\n+`fallthrough`\n+:   Checks the switch blocks for fall-through cases and provides a warning\n+    message for any that are found. Fall-through cases are cases in a switch\n+    block, other than the last case in the block, whose code does not include a\n+    `break` statement, allowing code execution to fall through from that case to\n+    the next case. For example, the code following the case 1 label in this\n+    switch block does not end with a `break` statement:\n+\n+    ```\n+    switch (x) {\n+    case 1:\n+      System.out.println(\"1\");\n+      \/\/ No break statement here.\n+    case 2:\n+      System.out.println(\"2\");\n+    }\n+    ```\n+\n+    If the `-Xlint:fallthrough` option was used when compiling this code, then\n+    the compiler emits a warning about possible fall-through into case, with\n+    the line number of the case in question.\n+\n+`finally`\n+:   Warns about `finally` clauses that cannot be completed normally, for\n+    example:\n+\n+    ```\n+    public static int m() {\n+      try {\n+         throw new NullPointerException();\n+      }  catch (NullPointerException(); {\n+         System.err.println(\"Caught NullPointerException.\");\n+         return 1;\n+       } finally {\n+         return 0;\n+       }\n+      }\n+    ```\n+\n+    The compiler generates a warning for the `finally` block in this example.\n+    When the `int` method is called, it returns a value of 0. A `finally` block\n+    executes when the `try` block exits. In this example, when control is\n+    transferred to the `catch` block, the `int` method exits. However, the\n+    `finally` block must execute, so it's executed, even though control was\n+    transferred outside the method.\n+\n+`options`\n+:   Warns about issues that related to the use of command-line options. See\n+    [Compiling for Earlier Releases of the Platform].\n+\n+`overrides`\n+:   Warns about issues related to method overrides. For example, consider the\n+    following two classes:\n+\n+    ```\n+    public class ClassWithVarargsMethod {\n+      void varargsMethod(String... s) { }\n+    }\n+\n+    public class ClassWithOverridingMethod extends ClassWithVarargsMethod {\n+       @Override\n+       void varargsMethod(String[] s) { }\n+    }\n+    ```\n+\n+    The compiler generates a warning similar to the following:.\n+\n+    ```\n+    warning: [override] varargsMethod(String[]) in ClassWithOverridingMethod\n+    overrides varargsMethod(String...) in ClassWithVarargsMethod; overriding\n+    method is missing '...'\n+    ```\n+\n+    When the compiler encounters a `varargs` method, it translates the\n+    `varargs` formal parameter into an array. In the method\n+    `ClassWithVarargsMethod.varargsMethod`, the compiler translates the\n+    `varargs` formal parameter `String... s` to the formal parameter\n+    `String[] s`, an array that matches the formal parameter of the method\n+    `ClassWithOverridingMethod.varargsMethod`. Consequently, this example\n+    compiles.\n+\n+`path`\n+:   Warns about invalid path elements and nonexistent path directories on the\n+    command line (with regard to the class path, the source path, and other\n+    paths). Such warnings cannot be suppressed with the `@SuppressWarnings`\n+    annotation. For example:\n+\n+    -   **Linux and macOS:**\n+        `javac -Xlint:path -classpath \/nonexistentpath Example.java`\n+\n+    -   **Windows:**\n+        `javac -Xlint:path -classpath C:\\nonexistentpath Example.java`\n+\n+`processing`\n+:   Warns about issues related to annotation processing. The compiler generates\n+    this warning when you have a class that has an annotation, and you use an\n+    annotation processor that cannot handle that type of annotation. For example,\n+    the following is a simple annotation processor:\n+\n+    **Source file AnnoProc.java**:\n+\n+    ```\n+    import java.util.*;\n+    import javax.annotation.processing.*;\n+    import javax.lang.model.*;\n+    import javax.lang.model.element.*;\n+\n+    @SupportedAnnotationTypes(\"NotAnno\")\n+    public class AnnoProc extends AbstractProcessor {\n+      public boolean process(Set<? extends TypeElement> elems, RoundEnvironment renv){\n+         return true;\n+      }\n+\n+      public SourceVersion getSupportedSourceVersion() {\n+         return SourceVersion.latest();\n+       }\n+    }\n+    ```\n+\n+    **Source file AnnosWithoutProcessors.java**:\n+\n+    ```\n+    @interface Anno { }\n+\n+    @Anno\n+    class AnnosWithoutProcessors { }\n+    ```\n+\n+    The following commands compile the annotation processor `AnnoProc`, then\n+    run this annotation processor against the source file\n+    `AnnosWithoutProcessors.java`:\n+\n+    ```\n+    javac AnnoProc.java\n+    javac -cp . -Xlint:processing -processor AnnoProc -proc:only AnnosWithoutProcessors.java\n+    ```\n+\n+    When the compiler runs the annotation processor against the source file\n+    `AnnosWithoutProcessors.java`, it generates the following warning:\n+\n+    ```\n+    warning: [processing] No processor claimed any of these annotations: Anno\n+    ```\n+\n+    To resolve this issue, you can rename the annotation defined and used in\n+    the class `AnnosWithoutProcessors` from `Anno` to `NotAnno`.\n+\n+`rawtypes`\n+:   Warns about unchecked operations on raw types. The following statement\n+    generates a `rawtypes` warning:\n+\n+    >   `void countElements(List l) { ... }`\n+\n+    The following example does not generate a `rawtypes` warning:\n+\n+    >   `void countElements(List<?> l) { ... }`\n+\n+    `List` is a raw type. However, `List<?>` is an unbounded wildcard\n+    parameterized type. Because `List` is a parameterized interface, always\n+    specify its type argument. In this example, the `List` formal argument is\n+    specified with an unbounded wildcard (`?`) as its formal type parameter,\n+    which means that the `countElements` method can accept any instantiation of\n+    the `List` interface.\n+\n+`serial`\n+:   Warns about missing `serialVersionUID` definitions on serializable classes.\n+    For example:\n+\n+    ```\n+    public class PersistentTime implements Serializable\n+    {\n+      private Date time;\n+\n+       public PersistentTime() {\n+         time = Calendar.getInstance().getTime();\n+       }\n+\n+       public Date getTime() {\n+         return time;\n+       }\n+    }\n+    ```\n+\n+    The compiler generates the following warning:\n+\n+    ```\n+    warning: [serial] serializable class PersistentTime has no definition of\n+    serialVersionUID\n+    ```\n+\n+    If a serializable class does not explicitly declare a field named\n+    `serialVersionUID`, then the serialization runtime environment calculates a\n+    default `serialVersionUID` value for that class based on various aspects of\n+    the class, as described in the Java Object Serialization Specification.\n+    However, it's strongly recommended that all serializable classes explicitly\n+    declare `serialVersionUID` values because the default process of computing\n+    `serialVersionUID` values is highly sensitive to class details that can\n+    vary depending on compiler implementations. As a result, this might cause\n+    an unexpected `InvalidClassExceptions` during deserialization. To guarantee\n+    a consistent `serialVersionUID` value across different Java compiler\n+    implementations, a serializable class must declare an explicit\n+    `serialVersionUID` value.\n+\n+`static`\n+:   Warns about issues relating to the use of static variables, for example:\n+\n+    ```\n+    class XLintStatic {\n+        static void m1() { }\n+        void m2() { this.m1(); }\n+    }\n+    ```\n+\n+    The compiler generates the following warning:\n+\n+    ```\n+    warning: [static] static method should be qualified by type name,\n+    XLintStatic, instead of by an expression\n+    ```\n+\n+    To resolve this issue, you can call the `static` method `m1` as follows:\n+\n+    >   `XLintStatic.m1();`\n+\n+    Alternately, you can remove the `static` keyword from the declaration of\n+    the method `m1`.\n+\n+`this-escape`\n+:   Warns about constructors leaking\n+    `this` prior to subclass initialization.\n+    For example, this class:\n+\n+    ```\n+    public class MyClass {\n+      public MyClass() {\n+        System.out.println(this.hashCode());\n+      }\n+    }\n+    ```\n+\n+    generates the following warning:\n+\n+    ```\n+    MyClass.java:3: warning: [this-escape] possible 'this' escape\n+                             before subclass is fully initialized\n+        System.out.println(this.hashCode());\n+                                        ^\n+    ```\n+\n+    A 'this' escape warning is generated when a constructor does something\n+    that might result in a subclass method being invoked before the\n+    constructor returns.\n+    In such cases the subclass method would be operating on an incompletely\n+    initialized instance.\n+    In the above example, a subclass of `MyClass` that overrides\n+    `hashCode()` to incorporate its own fields would likely produce\n+    an incorrect result when invoked as shown.\n+\n+    Warnings are only generated if a subclass could exist that is outside\n+    of the current module (or package, if no module) being compiled.\n+    So, for example, constructors in final and non-public classes do not\n+    generate warnings.\n+\n+`try`\n+:   Warns about issues relating to the use of `try` blocks, including\n+    try-with-resources statements. For example, a warning is generated for the\n+    following statement because the resource `ac` declared in the `try` block\n+    is not used:\n+\n+    ```\n+    try ( AutoCloseable ac = getResource() ) {    \/\/ do nothing}\n+    ```\n+\n+`unchecked`\n+:   Gives more detail for unchecked conversion warnings that are mandated by\n+    the Java Language Specification, for example:\n+\n+    ```\n+    List l = new ArrayList<Number>();\n+    List<String> ls = l;       \/\/ unchecked warning\n+    ```\n+\n+    During type erasure, the types `ArrayList<Number>` and `List<String>`\n+    become `ArrayList` and `List`, respectively.\n+\n+    The `ls` command has the parameterized type `List<String>`. When the `List`\n+    referenced by `l` is assigned to `ls`, the compiler generates an unchecked\n+    warning. At compile time, the compiler and JVM cannot determine whether `l`\n+    refers to a `List<String>` type. In this case, `l` does not refer to a\n+    `List<String>` type. As a result, heap pollution occurs.\n+\n+    A heap pollution situation occurs when the `List` object `l`, whose static\n+    type is `List<Number>`, is assigned to another `List` object, `ls`, that\n+    has a different static type, `List<String>`. However, the compiler still\n+    allows this assignment. It must allow this assignment to preserve backward\n+    compatibility with releases of Java SE that do not support generics. Because\n+    of type erasure, `List<Number>` and `List<String>` both become `List`.\n+    Consequently, the compiler allows the assignment of the object `l`, which\n+    has a raw type of `List`, to the object `ls`.\n+\n+`varargs`\n+:   Warns about unsafe use of variable arguments (`varargs`) methods, in\n+    particular, those that contain non-reifiable arguments, for example:\n+\n+    ```\n+    public class ArrayBuilder {\n+      public static <T> void addToList (List<T> listArg, T... elements) {\n+        for (T x : elements) {\n+          listArg.add(x);\n+        }\n+      }\n+    }\n+    ```\n+\n+    A non-reifiable type is a type whose type information is not fully available\n+    at runtime.\n+\n+    The compiler generates the following warning for the definition of the\n+    method `ArrayBuilder.addToList`:\n+\n+    ```\n+    warning: [varargs] Possible heap pollution from parameterized vararg type T\n+    ```\n+\n+    When the compiler encounters a varargs method, it translates the `varargs`\n+    formal parameter into an array. However, the Java programming language\n+    does not permit the creation of arrays of parameterized types. In the method\n+    `ArrayBuilder.addToList`, the compiler translates the `varargs` formal\n+    parameter `T...` elements to the formal parameter `T[]` elements, an array.\n+    However, because of type erasure, the compiler converts the `varargs`\n+    formal parameter to `Object[]` elements. Consequently, there's a\n+    possibility of heap pollution.\n","filename":"src\/jdk.compiler\/share\/man\/javac.md","additions":1952,"deletions":0,"binary":false,"changes":1952,"status":"added"},{"patch":"@@ -1,90 +0,0 @@\n-.\\\" Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"SERIALVER\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-serialver - return the \\f[V]serialVersionUID\\f[R] for one or more\n-classes in a form suitable for copying into an evolving class\n-.SH SYNOPSIS\n-.PP\n-\\f[V]serialver\\f[R] [\\f[I]options\\f[R]] [\\f[I]classnames\\f[R]]\n-.TP\n-\\f[I]options\\f[R]\n-This represents the command-line options for the \\f[V]serialver\\f[R]\n-command.\n-See \\f[B]Options for serialver\\f[R].\n-.TP\n-\\f[I]classnames\\f[R]\n-The classes for which \\f[V]serialVersionUID\\f[R] is to be returned.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]serialver\\f[R] command returns the \\f[V]serialVersionUID\\f[R]\n-for one or more classes in a form suitable for copying into an evolving\n-class.\n-When called with no arguments, the \\f[V]serialver\\f[R] command prints a\n-usage line.\n-.SH OPTIONS FOR SERIALVER\n-.TP\n-\\f[V]-classpath\\f[R] \\f[I]path-files\\f[R]\n-Sets the search path for application classes and resources.\n-Separate classes and resources with a colon (:).\n-.TP\n-\\f[V]-J\\f[R]\\f[I]option\\f[R]\n-Passes the specified \\f[I]option\\f[R] to the Java Virtual Machine, where\n-\\f[I]option\\f[R] is one of the options described on the reference page\n-for the Java application launcher.\n-For example, \\f[V]-J-Xms48m\\f[R] sets the startup memory to 48 MB.\n-.SH NOTES\n-.PP\n-The \\f[V]serialver\\f[R] command loads and initializes the specified\n-classes in its virtual machine, and by default, it doesn\\[aq]t set a\n-security manager.\n-If the \\f[V]serialver\\f[R] command is to be run with untrusted classes,\n-then a security manager can be set with the following option:\n-.RS\n-.PP\n-\\f[V]-J-Djava.security.manager\\f[R]\n-.RE\n-.PP\n-When necessary, a security policy can be specified with the following\n-option:\n-.RS\n-.PP\n-\\f[V]-J-Djava.security.policy=\\f[R]\\f[I]policy_file\\f[R]\n-.RE\n","filename":"src\/jdk.compiler\/share\/man\/serialver.1","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -0,0 +1,74 @@\n+---\n+# Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'SERIALVER(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+serialver - return the `serialVersionUID` for one or more classes in a form\n+suitable for copying into an evolving class\n+\n+## Synopsis\n+\n+`serialver` \\[*options*\\] \\[*classnames*\\]\n+\n+*options*\n+:   This represents the command-line options for the `serialver` command. See\n+    [Options for serialver].\n+\n+*classnames*\n+:   The classes for which `serialVersionUID` is to be returned.\n+\n+## Description\n+\n+The `serialver` command returns the `serialVersionUID` for one or more classes\n+in a form suitable for copying into an evolving class. When called with no\n+arguments, the `serialver` command prints a usage line.\n+\n+## Options for serialver\n+\n+`-classpath` *path-files*\n+:   Sets the search path for application classes and resources. Separate\n+    classes and resources with a colon (:).\n+\n+`-J`*option*\n+:   Passes the specified *option* to the Java Virtual Machine, where *option*\n+    is one of the options described on the reference page for the Java\n+    application launcher. For example, `-J-Xms48m` sets the startup memory to\n+    48 MB.\n+\n+## Notes\n+\n+The `serialver` command loads and initializes the specified classes in its\n+virtual machine, and by default, it doesn't set a security manager. If the\n+`serialver` command is to be run with untrusted classes, then a security\n+manager can be set with the following option:\n+\n+>   `-J-Djava.security.manager`\n+\n+When necessary, a security policy can be specified with the following option:\n+\n+>   `-J-Djava.security.policy=`*policy\\_file*\n","filename":"src\/jdk.compiler\/share\/man\/serialver.md","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -1,218 +0,0 @@\n-.\\\" Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JHSDB\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jhsdb - attach to a Java process or launch a postmortem debugger to\n-analyze the content of a core dump from a crashed Java Virtual Machine\n-(JVM)\n-.SH SYNOPSIS\n-.PP\n-\\f[B]WARNING:\\f[R] The \\f[V]debugd\\f[R] subcommand and\n-\\f[V]--connect\\f[R] options are deprecated.\n-They will be removed in a future release.\n-.PP\n-\\f[V]jhsdb\\f[R] \\f[V]clhsdb\\f[R] [\\f[V]--pid\\f[R] \\f[I]pid\\f[R] |\n-\\f[V]--exe\\f[R] \\f[I]executable\\f[R] \\f[V]--core\\f[R]\n-\\f[I]coredump\\f[R]]\n-.PP\n-\\f[V]jhsdb\\f[R] \\f[V]hsdb\\f[R] [\\f[V]--pid\\f[R] \\f[I]pid\\f[R] |\n-\\f[V]--exe\\f[R] \\f[I]executable\\f[R] \\f[V]--core\\f[R]\n-\\f[I]coredump\\f[R]]\n-.PP\n-\\f[V]jhsdb\\f[R] \\f[V]debugd\\f[R] (\\f[V]--pid\\f[R] \\f[I]pid\\f[R] |\n-\\f[V]--exe\\f[R] \\f[I]executable\\f[R] \\f[V]--core\\f[R]\n-\\f[I]coredump\\f[R]) [\\f[I]options\\f[R]]\n-.PP\n-\\f[V]jhsdb\\f[R] \\f[V]jstack\\f[R] (\\f[V]--pid\\f[R] \\f[I]pid\\f[R] |\n-\\f[V]--exe\\f[R] \\f[I]executable\\f[R] \\f[V]--core\\f[R] \\f[I]coredump\\f[R]\n-| \\f[V]--connect\\f[R] \\f[I][server-id\\[at]]debugd-host\\f[R])\n-[\\f[I]options\\f[R]]\n-.PP\n-\\f[V]jhsdb\\f[R] \\f[V]jmap\\f[R] (\\f[V]--pid\\f[R] \\f[I]pid\\f[R] |\n-\\f[V]--exe\\f[R] \\f[I]executable\\f[R] \\f[V]--core\\f[R] \\f[I]coredump\\f[R]\n-| \\f[V]--connect\\f[R] \\f[I][server-id\\[at]]debugd-host\\f[R])\n-[\\f[I]options\\f[R]]\n-.PP\n-\\f[V]jhsdb\\f[R] \\f[V]jinfo\\f[R] (\\f[V]--pid\\f[R] \\f[I]pid\\f[R] |\n-\\f[V]--exe\\f[R] \\f[I]executable\\f[R] \\f[V]--core\\f[R] \\f[I]coredump\\f[R]\n-| \\f[V]--connect\\f[R] \\f[I][server-id\\[at]]debugd-host\\f[R])\n-[\\f[I]options\\f[R]]\n-.PP\n-\\f[V]jhsdb\\f[R] \\f[V]jsnap\\f[R] (\\f[V]--pid\\f[R] \\f[I]pid\\f[R] |\n-\\f[V]--exe\\f[R] \\f[I]executable\\f[R] \\f[V]--core\\f[R] \\f[I]coredump\\f[R]\n-| \\f[V]--connect\\f[R] \\f[I][server-id\\[at]]debugd-host\\f[R])\n-[\\f[I]options\\f[R]]\n-.TP\n-\\f[I]pid\\f[R]\n-The process ID to which the \\f[V]jhsdb\\f[R] tool should attach.\n-The process must be a Java process.\n-To get a list of Java processes running on a machine, use the\n-\\f[V]ps\\f[R] command or, if the JVM processes are not running in a\n-separate docker instance, the \\f[B]jps\\f[R] command.\n-.TP\n-\\f[I]executable\\f[R]\n-The Java executable file from which the core dump was produced.\n-.TP\n-\\f[I]coredump\\f[R]\n-The core file to which the \\f[V]jhsdb\\f[R] tool should attach.\n-.TP\n-\\f[I][server-id\\[at]]debugd-host\\f[R]\n-An optional server ID and the address of the remote debug server\n-(debugd).\n-.TP\n-\\f[I]options\\f[R]\n-The command-line options for a \\f[V]jhsdb\\f[R] mode.\n-See \\f[B]Options for the debugd Mode\\f[R], \\f[B]Options for the jstack\n-Mode\\f[R], \\f[B]Options for the jmap Mode\\f[R], \\f[B]Options for the\n-jinfo Mode\\f[R], and \\f[B]Options for the jsnap Mode\\f[R].\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-Either the \\f[I]pid\\f[R] or the pair of \\f[I]executable\\f[R] and\n-\\f[I]core\\f[R] files or the \\f[I][server-id\\[at]]debugd-host\\f[R] must\n-be provided for \\f[V]debugd\\f[R], \\f[V]jstack\\f[R], \\f[V]jmap\\f[R],\n-\\f[V]jinfo\\f[R] and \\f[V]jsnap\\f[R] modes.\n-.SH DESCRIPTION\n-.PP\n-You can use the \\f[V]jhsdb\\f[R] tool to attach to a Java process or to\n-launch a postmortem debugger to analyze the content of a core-dump from\n-a crashed Java Virtual Machine (JVM).\n-This command is experimental and unsupported.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-Attaching the \\f[V]jhsdb\\f[R] tool to a live process will cause the\n-process to hang and the process will probably crash when the debugger\n-detaches.\n-.PP\n-The \\f[V]jhsdb\\f[R] tool can be launched in any one of the following\n-modes:\n-.TP\n-\\f[V]jhsdb clhsdb\\f[R]\n-Starts the interactive command-line debugger.\n-.TP\n-\\f[V]jhsdb hsdb\\f[R]\n-Starts the interactive GUI debugger.\n-.TP\n-\\f[V]jhsdb debugd\\f[R]\n-Starts the remote debug server.\n-.TP\n-\\f[V]jhsdb jstack\\f[R]\n-Prints stack and locks information.\n-.TP\n-\\f[V]jhsdb jmap\\f[R]\n-Prints heap information.\n-.TP\n-\\f[V]jhsdb jinfo\\f[R]\n-Prints basic JVM information.\n-.TP\n-\\f[V]jhsdb jsnap\\f[R]\n-Prints performance counter information.\n-.TP\n-\\f[V]jhsdb\\f[R] \\f[I]command\\f[R] \\f[V]--help\\f[R]\n-Displays the options available for the \\f[I]command\\f[R].\n-.SH OPTIONS FOR THE DEBUGD MODE\n-.TP\n-\\f[V]--serverid\\f[R] \\f[I]server-id\\f[R]\n-An optional unique ID for this debug server.\n-This is required if multiple debug servers are run on the same machine.\n-.TP\n-\\f[V]--rmiport\\f[R] \\f[I]port\\f[R]\n-Sets the port number to which the RMI connector is bound.\n-If not specified a random available port is used.\n-.TP\n-\\f[V]--registryport\\f[R] \\f[I]port\\f[R]\n-Sets the RMI registry port.\n-This option overrides the system property\n-\\[aq]sun.jvm.hotspot.rmi.port\\[aq].\n-If not specified, the system property is used.\n-If the system property is not set, the default port 1099 is used.\n-.TP\n-\\f[V]--hostname\\f[R] \\f[I]hostname\\f[R]\n-Sets the hostname the RMI connector is bound.\n-The value could be a hostname or an IPv4\/IPv6 address.\n-This option overrides the system property\n-\\[aq]java.rmi.server.hostname\\[aq].\n-If not specified, the system property is used.\n-If the system property is not set, a system hostname is used.\n-.SH OPTIONS FOR THE JINFO MODE\n-.TP\n-\\f[V]--flags\\f[R]\n-Prints the VM flags.\n-.TP\n-\\f[V]--sysprops\\f[R]\n-Prints the Java system properties.\n-.TP\n-no option\n-Prints the VM flags and the Java system properties.\n-.SH OPTIONS FOR THE JMAP MODE\n-.TP\n-no option\n-Prints the same information as Solaris \\f[V]pmap\\f[R].\n-.TP\n-\\f[V]--heap\\f[R]\n-Prints the \\f[V]java\\f[R] heap summary.\n-.TP\n-\\f[V]--binaryheap\\f[R]\n-Dumps the \\f[V]java\\f[R] heap in \\f[V]hprof\\f[R] binary format.\n-.TP\n-\\f[V]--dumpfile\\f[R] \\f[I]name\\f[R]\n-The name of the dumpfile.\n-.TP\n-\\f[V]--histo\\f[R]\n-Prints the histogram of \\f[V]java\\f[R] object heap.\n-.TP\n-\\f[V]--clstats\\f[R]\n-Prints the class loader statistics.\n-.TP\n-\\f[V]--finalizerinfo\\f[R]\n-Prints the information on objects awaiting finalization.\n-.SH OPTIONS FOR THE JSTACK MODE\n-.TP\n-\\f[V]--locks\\f[R]\n-Prints the \\f[V]java.util.concurrent\\f[R] locks information.\n-.TP\n-\\f[V]--mixed\\f[R]\n-Attempts to print both \\f[V]java\\f[R] and native frames if the platform\n-allows it.\n-.SH OPTIONS FOR THE JSNAP MODE\n-.TP\n-\\f[V]--all\\f[R]\n-Prints all performance counters.\n","filename":"src\/jdk.hotspot.agent\/share\/man\/jhsdb.1","additions":0,"deletions":218,"binary":false,"changes":218,"status":"deleted"},{"patch":"@@ -0,0 +1,186 @@\n+---\n+# Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JHSDB(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jhsdb - attach to a Java process or launch a postmortem debugger to analyze\n+the content of a core dump from a crashed Java Virtual Machine (JVM)\n+\n+## Synopsis\n+\n+ **WARNING:** The `debugd` subcommand and `--connect` options are deprecated.  They will be removed in a future release.\n+\n+`jhsdb` `clhsdb` \\[`--pid` *pid* \\| `--exe` *executable* `--core` *coredump*\\]\n+\n+`jhsdb` `hsdb` \\[`--pid` *pid* \\| `--exe` *executable* `--core` *coredump*\\]\n+\n+`jhsdb` `debugd` (`--pid` *pid* \\| `--exe` *executable* `--core` *coredump*)\n+\\[*options*\\]\n+\n+`jhsdb` `jstack` (`--pid` *pid* \\| `--exe` *executable* `--core` *coredump* \\|\n+`--connect` *\\[server-id@\\]debugd-host*) \\[*options*\\]\n+\n+`jhsdb` `jmap` (`--pid` *pid* \\| `--exe` *executable* `--core` *coredump* \\|\n+`--connect` *\\[server-id@\\]debugd-host*) \\[*options*\\]\n+\n+`jhsdb` `jinfo` (`--pid` *pid* \\| `--exe` *executable* `--core` *coredump* \\|\n+`--connect` *\\[server-id@\\]debugd-host*) \\[*options*\\]\n+\n+`jhsdb` `jsnap` (`--pid` *pid* \\| `--exe` *executable* `--core` *coredump* \\|\n+`--connect` *\\[server-id@\\]debugd-host*) \\[*options*\\]\n+\n+*pid*\n+:   The process ID to which the `jhsdb` tool should attach. The process must be\n+    a Java process. To get a list of Java processes running on a machine, use\n+    the `ps` command or, if the JVM processes are not running in a separate\n+    docker instance, the [jps](jps.html) command.\n+\n+*executable*\n+:   The Java executable file from which the core dump was produced.\n+\n+*coredump*\n+:   The core file to which the `jhsdb` tool should attach.\n+\n+*\\[server-id@\\]debugd-host*\n+:   An optional server ID and the address of the remote debug server (debugd).\n+\n+*options*\n+:   The command-line options for a `jhsdb` mode. See [Options for the debugd Mode],\n+    [Options for the jstack Mode], [Options for the jmap Mode],\n+    [Options for the jinfo Mode], and [Options for the jsnap Mode].\n+\n+**Note:**\n+\n+Either the *pid* or the pair of *executable* and *core* files or\n+the *\\[server-id@\\]debugd-host* must be provided for `debugd`, `jstack`, `jmap`,\n+`jinfo` and `jsnap` modes.\n+\n+## Description\n+\n+You can use the `jhsdb` tool to attach to a Java process or to launch a\n+postmortem debugger to analyze the content of a core-dump from a crashed Java\n+Virtual Machine (JVM). This command is experimental and unsupported.\n+\n+**Note:**\n+\n+Attaching the `jhsdb` tool to a live process will cause the process to hang and\n+the process will probably crash when the debugger detaches.\n+\n+The `jhsdb` tool can be launched in any one of the following modes:\n+\n+`jhsdb clhsdb`\n+:   Starts the interactive command-line debugger.\n+\n+`jhsdb hsdb`\n+:   Starts the interactive GUI debugger.\n+\n+`jhsdb debugd`\n+:   Starts the remote debug server.\n+\n+`jhsdb jstack`\n+:   Prints stack and locks information.\n+\n+`jhsdb jmap`\n+:   Prints heap information.\n+\n+`jhsdb jinfo`\n+:   Prints basic JVM information.\n+\n+`jhsdb jsnap`\n+:   Prints performance counter information.\n+\n+`jhsdb` *command* `--help`\n+:   Displays the options available for the *command*.\n+\n+## Options for the debugd Mode\n+\n+`--serverid` *server-id*\n+:   An optional unique ID for this debug server. This is required if multiple\n+    debug servers are run on the same machine.\n+\n+`--rmiport` *port*\n+:   Sets the port number to which the RMI connector is bound. If not specified\n+    a random available port is used.\n+\n+`--registryport` *port*\n+:   Sets the RMI registry port. This option overrides the system property\n+    'sun.jvm.hotspot.rmi.port'. If not specified, the system property is used.\n+    If the system property is not set, the default port 1099 is used.\n+\n+`--hostname` *hostname*\n+:   Sets the hostname the RMI connector is bound. The value could be a hostname\n+    or an IPv4\/IPv6 address. This option overrides the system property\n+    'java.rmi.server.hostname'. If not specified, the system property is used.\n+    If the system property is not set, a system hostname is used.\n+\n+## Options for the jinfo Mode\n+\n+`--flags`\n+:   Prints the VM flags.\n+\n+`--sysprops`\n+:   Prints the Java system properties.\n+\n+no option\n+:   Prints the VM flags and the Java system properties.\n+\n+## Options for the jmap Mode\n+\n+no option\n+:   Prints the same information as Solaris `pmap`.\n+\n+`--heap`\n+:   Prints the `java` heap summary.\n+\n+`--binaryheap`\n+:   Dumps the `java` heap in `hprof` binary format.\n+\n+`--dumpfile` *name*\n+:   The name of the dumpfile.\n+\n+`--histo`\n+:   Prints the histogram of `java` object heap.\n+\n+`--clstats`\n+:   Prints the class loader statistics.\n+\n+`--finalizerinfo`\n+:   Prints the information on objects awaiting finalization.\n+\n+## Options for the jstack Mode\n+\n+`--locks`\n+:   Prints the `java.util.concurrent` locks information.\n+\n+`--mixed`\n+:   Attempts to print both `java` and native frames if the platform allows it.\n+\n+## Options for the jsnap Mode\n+\n+`--all`\n+:   Prints all performance counters.\n","filename":"src\/jdk.hotspot.agent\/share\/man\/jhsdb.md","additions":186,"deletions":0,"binary":false,"changes":186,"status":"added"},{"patch":"@@ -1,193 +0,0 @@\n-.\\\" Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JWEBSERVER\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jwebserver - launch the Java Simple Web Server\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jwebserver\\f[R] [\\f[I]options\\f[R]]\n-.TP\n-\\f[I]options\\f[R]\n-Command-line options.\n-For a detailed description of the options, see \\f[B]Options\\f[R].\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jwebserver\\f[R] tool provides a minimal HTTP server, designed\n-to be used for prototyping, testing, and debugging.\n-It serves a single directory hierarchy, and only serves static files.\n-Only HTTP\/1.1 is supported; HTTP\/2 and HTTPS are not supported.\n-.PP\n-Only idempotent HEAD and GET requests are served.\n-Any other requests receive a \\f[V]501 - Not Implemented\\f[R] or a\n-\\f[V]405 - Not Allowed\\f[R] response.\n-GET requests are mapped to the directory being served, as follows:\n-.IP \\[bu] 2\n-If the requested resource is a file, its content is served.\n-.IP \\[bu] 2\n-If the requested resource is a directory that contains an index file,\n-the content of the index file is served.\n-.IP \\[bu] 2\n-Otherwise, the names of all files and subdirectories of the directory\n-are listed.\n-Symbolic links and hidden files are not listed or served.\n-.PP\n-MIME types are configured automatically, using the built-in table.\n-For example, \\f[V].html\\f[R] files are served as \\f[V]text\/html\\f[R] and\n-\\f[V].java\\f[R] files are served as \\f[V]text\/plain\\f[R].\n-.PP\n-\\f[V]jwebserver\\f[R] is located in the jdk.httpserver module, and can\n-alternatively be started with \\f[V]java -m jdk.httpserver\\f[R].\n-It is based on the web server implementation in the\n-\\f[V]com.sun.net.httpserver\\f[R] package.\n-The \\f[V]com.sun.net.httpserver.SimpleFileServer\\f[R] class provides a\n-programmatic way to retrieve the server and its components for reuse and\n-extension.\n-.SH USAGE\n-.IP\n-.nf\n-\\f[CB]\n-jwebserver [-b bind address] [-p port] [-d directory]\n-           [-o none|info|verbose] [-h to show options]\n-           [-version to show version information]\n-\\f[R]\n-.fi\n-.SH OPTIONS\n-.TP\n-\\f[V]-h\\f[R] or \\f[V]-?\\f[R] or \\f[V]--help\\f[R]\n-Prints the help message and exits.\n-.TP\n-\\f[V]-b\\f[R] \\f[I]addr\\f[R] or \\f[V]--bind-address\\f[R] \\f[I]addr\\f[R]\n-Specifies the address to bind to.\n-Default: 127.0.0.1 or ::1 (loopback).\n-For all interfaces use \\f[V]-b 0.0.0.0\\f[R] or \\f[V]-b ::\\f[R].\n-.TP\n-\\f[V]-d\\f[R] \\f[I]dir\\f[R] or \\f[V]--directory\\f[R] \\f[I]dir\\f[R]\n-Specifies the directory to serve.\n-Default: current directory.\n-.TP\n-\\f[V]-o\\f[R] \\f[I]level\\f[R] or \\f[V]--output\\f[R] \\f[I]level\\f[R]\n-Specifies the output format.\n-\\f[V]none\\f[R] | \\f[V]info\\f[R] | \\f[V]verbose\\f[R].\n-Default: \\f[V]info\\f[R].\n-.TP\n-\\f[V]-p\\f[R] \\f[I]port\\f[R] or \\f[V]--port\\f[R] \\f[I]port\\f[R]\n-Specifies the port to listen on.\n-Default: 8000.\n-.TP\n-\\f[V]-version\\f[R] or \\f[V]--version\\f[R]\n-Prints the version information and exits.\n-.PP\n-To stop the server, press \\f[V]Ctrl + C\\f[R].\n-.SH STARTING THE SERVER\n-.PP\n-The following command starts the Simple Web Server:\n-.IP\n-.nf\n-\\f[CB]\n-$ jwebserver\n-\\f[R]\n-.fi\n-.PP\n-If startup is successful, the server prints a message to\n-\\f[V]System.out\\f[R] listing the local address and the absolute path of\n-the directory being served.\n-For example:\n-.IP\n-.nf\n-\\f[CB]\n-$ jwebserver\n-Binding to loopback by default. For all interfaces use \\[dq]-b 0.0.0.0\\[dq] or \\[dq]-b ::\\[dq].\n-Serving \/cwd and subdirectories on 127.0.0.1 port 8000\n-URL http:\/\/127.0.0.1:8000\/\n-\\f[R]\n-.fi\n-.SH CONFIGURATION\n-.PP\n-By default, the server runs in the foreground and binds to the loopback\n-address and port 8000.\n-This can be changed with the \\f[V]-b\\f[R] and \\f[V]-p\\f[R] options.\n-For example, to bind the Simple Web Server to all interfaces, use:\n-.IP\n-.nf\n-\\f[CB]\n-$ jwebserver -b 0.0.0.0\n-Serving \/cwd and subdirectories on 0.0.0.0 (all interfaces) port 8000\n-URL http:\/\/123.456.7.891:8000\/\n-\\f[R]\n-.fi\n-.PP\n-Note that this makes the web server accessible to all hosts on the\n-network.\n-\\f[I]Do not do this unless you are sure the server cannot leak any\n-sensitive information.\\f[R]\n-.PP\n-As another example, use the following command to run on port 9000:\n-.IP\n-.nf\n-\\f[CB]\n-$ jwebserver -p 9000\n-\\f[R]\n-.fi\n-.PP\n-By default, the files of the current directory are served.\n-A different directory can be specified with the \\f[V]-d\\f[R] option.\n-.PP\n-By default, every request is logged on the console.\n-The output looks like this:\n-.IP\n-.nf\n-\\f[CB]\n-127.0.0.1 - - [10\/Feb\/2021:14:34:11 +0000] \\[dq]GET \/some\/subdirectory\/ HTTP\/1.1\\[dq] 200 -\n-\\f[R]\n-.fi\n-.PP\n-Logging output can be changed with the \\f[V]-o\\f[R] option.\n-The default setting is \\f[V]info\\f[R].\n-The \\f[V]verbose\\f[R] setting additionally includes the request and\n-response headers as well as the absolute path of the requested resource.\n-.SH STOPPING THE SERVER\n-.PP\n-Once started successfully, the server runs until it is stopped.\n-On Unix platforms, the server can be stopped by sending it a\n-\\f[V]SIGINT\\f[R] signal (\\f[V]Ctrl+C\\f[R] in a terminal window).\n-.SH HELP OPTION\n-.PP\n-The \\f[V]-h\\f[R] option displays a help message describing the usage and\n-the options of the \\f[V]jwebserver\\f[R].\n","filename":"src\/jdk.httpserver\/share\/man\/jwebserver.1","additions":0,"deletions":193,"binary":false,"changes":193,"status":"deleted"},{"patch":"@@ -0,0 +1,152 @@\n+---\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JWEBSERVER(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jwebserver - launch the Java Simple Web Server\n+\n+## Synopsis\n+\n+`jwebserver` \\[*options*\\]\n+\n+*options*\n+:   Command-line options. For a detailed description of the options, see [Options].\n+\n+## Description\n+The `jwebserver` tool provides a minimal HTTP server, designed to be used\n+for prototyping, testing, and debugging. It serves a single directory hierarchy,\n+and only serves static files. Only HTTP\/1.1 is supported;\n+HTTP\/2 and HTTPS are not supported.\n+\n+Only idempotent HEAD and GET requests are served. Any other requests receive\n+a `501 - Not Implemented` or a `405 - Not Allowed` response. GET requests are\n+mapped to the directory being served, as follows:\n+\n+* If the requested resource is a file, its content is served.\n+* If the requested resource is a directory that contains an index file,\n+the content of the index file is served.\n+* Otherwise, the names of all files and subdirectories of the directory are\n+listed. Symbolic links and hidden files are not listed or served.\n+\n+MIME types are configured automatically, using the built-in table. For example,\n+`.html` files are served as `text\/html` and `.java` files are served as\n+`text\/plain`.\n+\n+`jwebserver` is located in the jdk.httpserver module, and can alternatively\n+be started with `java -m jdk.httpserver`. It is based on the web server\n+implementation in the `com.sun.net.httpserver` package.\n+The `com.sun.net.httpserver.SimpleFileServer` class provides a programmatic\n+way to retrieve the server and its components for reuse and extension.\n+\n+## Usage\n+```\n+jwebserver [-b bind address] [-p port] [-d directory]\n+           [-o none|info|verbose] [-h to show options]\n+           [-version to show version information]\n+```\n+\n+## Options\n+\n+`-h` or `-?` or `--help`\n+:   Prints the help message and exits.\n+\n+`-b` *addr* or `--bind-address` *addr*\n+:   Specifies the address to bind to.\n+    Default: 127.0.0.1 or ::1 (loopback).\n+    For all interfaces use `-b 0.0.0.0` or `-b ::`.\n+\n+`-d` *dir* or `--directory` *dir*\n+:   Specifies the directory to serve.\n+    Default: current directory.\n+\n+`-o` *level* or `--output` *level*\n+:   Specifies the output format. `none` | `info` | `verbose`.\n+    Default: `info`.\n+\n+`-p` *port* or `--port` *port*\n+:   Specifies the port to listen on.\n+    Default: 8000.\n+\n+`-version` or `--version`\n+:   Prints the version information and exits.\n+\n+To stop the server, press `Ctrl + C`.\n+\n+## Starting the Server\n+The following command starts the Simple Web Server:\n+```\n+$ jwebserver\n+```\n+If startup is successful, the server prints a message to `System.out`\n+listing the local address and the absolute path of the directory being\n+served. For example:\n+```\n+$ jwebserver\n+Binding to loopback by default. For all interfaces use \"-b 0.0.0.0\" or \"-b ::\".\n+Serving \/cwd and subdirectories on 127.0.0.1 port 8000\n+URL http:\/\/127.0.0.1:8000\/\n+```\n+\n+## Configuration\n+By default, the server runs in the foreground and binds to the loopback\n+address and port 8000. This can be changed with the `-b` and `-p` options.\n+For example, to bind the Simple Web Server to all interfaces, use:\n+```\n+$ jwebserver -b 0.0.0.0\n+Serving \/cwd and subdirectories on 0.0.0.0 (all interfaces) port 8000\n+URL http:\/\/123.456.7.891:8000\/\n+```\n+Note that this makes the web server accessible to all hosts on the network.\n+*Do not do this unless you are sure the server cannot leak any sensitive\n+information.*\n+\n+As another example, use the following command to run on port 9000:\n+```\n+$ jwebserver -p 9000\n+```\n+\n+By default, the files of the current directory are served. A different\n+directory can be specified with the `-d` option.\n+\n+By default, every request is logged on the console. The output looks like\n+this:\n+```\n+127.0.0.1 - - [10\/Feb\/2021:14:34:11 +0000] \"GET \/some\/subdirectory\/ HTTP\/1.1\" 200 -\n+```\n+Logging output can be changed with the `-o` option. The default setting is\n+`info`. The `verbose` setting additionally includes the request and response\n+headers as well as the absolute path of the requested resource.\n+\n+## Stopping the Server\n+Once started successfully, the server runs until it is stopped. On Unix\n+platforms, the server can be stopped by sending it a `SIGINT` signal\n+(`Ctrl+C` in a terminal window).\n+\n+## Help Option\n+The `-h` option displays a help message describing the usage and the options\n+of the `jwebserver`.\n","filename":"src\/jdk.httpserver\/share\/man\/jwebserver.md","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -1,379 +0,0 @@\n-.\\\" Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JAR\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jar - create an archive for classes and resources, and manipulate or\n-restore individual classes or resources from an archive\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jar\\f[R] [\\f[I]OPTION\\f[R] ...]\n-[ [\\f[V]--release\\f[R] \\f[I]VERSION\\f[R]] [\\f[V]-C\\f[R] \\f[I]dir\\f[R]]\n-\\f[I]files\\f[R]] ...\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jar\\f[R] command is a general-purpose archiving and compression\n-tool, based on the ZIP and ZLIB compression formats.\n-Initially, the \\f[V]jar\\f[R] command was designed to package Java\n-applets (not supported since JDK 11) or applications; however, beginning\n-with JDK 9, users can use the \\f[V]jar\\f[R] command to create modular\n-JARs.\n-For transportation and deployment, it\\[aq]s usually more convenient to\n-package modules as modular JARs.\n-.PP\n-The syntax for the \\f[V]jar\\f[R] command resembles the syntax for the\n-\\f[V]tar\\f[R] command.\n-It has several main operation modes, defined by one of the mandatory\n-operation arguments.\n-Other arguments are either options that modify the behavior of the\n-operation or are required to perform the operation.\n-.PP\n-When modules or the components of an application (files, images and\n-sounds) are combined into a single archive, they can be downloaded by a\n-Java agent (such as a browser) in a single HTTP transaction, rather than\n-requiring a new connection for each piece.\n-This dramatically improves download times.\n-The \\f[V]jar\\f[R] command also compresses files, which further improves\n-download time.\n-The \\f[V]jar\\f[R] command also enables individual entries in a file to\n-be signed so that their origin can be authenticated.\n-A JAR file can be used as a class path entry, whether or not it\\[aq]s\n-compressed.\n-.PP\n-An archive becomes a modular JAR when you include a module descriptor,\n-\\f[V]module-info.class\\f[R], in the root of the given directories or in\n-the root of the \\f[V].jar\\f[R] archive.\n-The following operations described in \\f[B]Operation Modifiers Valid\n-Only in Create and Update Modes\\f[R] are valid only when creating or\n-updating a modular jar or updating an existing non-modular jar:\n-.IP \\[bu] 2\n-\\f[V]--module-version\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--hash-modules\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--module-path\\f[R]\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-All mandatory or optional arguments for long options are also mandatory\n-or optional for any corresponding short options.\n-.SH MAIN OPERATION MODES\n-.PP\n-When using the \\f[V]jar\\f[R] command, you must specify the operation for\n-it to perform.\n-You specify the operation mode for the \\f[V]jar\\f[R] command by\n-including the appropriate operation arguments described in this section.\n-You can mix an operation argument with other one-letter options.\n-Generally the operation argument is the first argument specified on the\n-command line.\n-.TP\n-\\f[V]-c\\f[R] or \\f[V]--create\\f[R]\n-Creates the archive.\n-.TP\n-\\f[V]-i\\f[R] \\f[I]FILE\\f[R] or \\f[V]--generate-index=\\f[R]\\f[I]FILE\\f[R]\n-Generates index information for the specified JAR file.\n-This option is deprecated and may be removed in a future release.\n-.TP\n-\\f[V]-t\\f[R] or \\f[V]--list\\f[R]\n-Lists the table of contents for the archive.\n-.TP\n-\\f[V]-u\\f[R] or \\f[V]--update\\f[R]\n-Updates an existing JAR file.\n-.TP\n-\\f[V]-x\\f[R] or \\f[V]--extract\\f[R]\n-Extracts the named (or all) files from the archive.\n-If a file with the same name appears more than once in the archive, each\n-copy will be extracted, with later copies overwriting (replacing)\n-earlier copies unless -k is specified.\n-.TP\n-\\f[V]-d\\f[R] or \\f[V]--describe-module\\f[R]\n-Prints the module descriptor or automatic module name.\n-.SH OPERATION MODIFIERS VALID IN ANY MODE\n-.PP\n-You can use the following options to customize the actions of any\n-operation mode included in the \\f[V]jar\\f[R] command.\n-.TP\n-\\f[V]-C\\f[R] \\f[I]DIR\\f[R]\n-When used with the create operation mode, changes the specified\n-directory and includes the \\f[I]files\\f[R] specified at the end of the\n-command line.\n-.RS\n-.PP\n-\\f[V]jar\\f[R] [\\f[I]OPTION\\f[R] ...]\n-[ [\\f[V]--release\\f[R] \\f[I]VERSION\\f[R]] [\\f[V]-C\\f[R] \\f[I]dir\\f[R]]\n-\\f[I]files\\f[R]]\n-.PP\n-When used with the extract operation mode, specifies the destination\n-directory where the JAR file will be extracted.\n-Unlike with the create operation mode, this option can be specified only\n-once with the extract operation mode.\n-.RE\n-.TP\n-\\f[V]-f\\f[R] \\f[I]FILE\\f[R] or \\f[V]--file=\\f[R]\\f[I]FILE\\f[R]\n-Specifies the archive file name.\n-.TP\n-\\f[V]--release\\f[R] \\f[I]VERSION\\f[R]\n-Creates a multirelease JAR file.\n-Places all files specified after the option into a versioned directory\n-of the JAR file named\n-\\f[V]META-INF\/versions\/\\f[R]\\f[I]VERSION\\f[R]\\f[V]\/\\f[R], where\n-\\f[I]VERSION\\f[R] must be must be a positive integer whose value is 9 or\n-greater.\n-.RS\n-.PP\n-At run time, where more than one version of a class exists in the JAR,\n-the JDK will use the first one it finds, searching initially in the\n-directory tree whose \\f[I]VERSION\\f[R] number matches the JDK\\[aq]s\n-major version number.\n-It will then look in directories with successively lower\n-\\f[I]VERSION\\f[R] numbers, and finally look in the root of the JAR.\n-.RE\n-.TP\n-\\f[V]-v\\f[R] or \\f[V]--verbose\\f[R]\n-Sends or prints verbose output to standard output.\n-.SH OPERATION MODIFIERS VALID ONLY IN CREATE AND UPDATE MODES\n-.PP\n-You can use the following options to customize the actions of the create\n-and the update main operation modes:\n-.TP\n-\\f[V]-e\\f[R] \\f[I]CLASSNAME\\f[R] or \\f[V]--main-class=\\f[R]\\f[I]CLASSNAME\\f[R]\n-Specifies the application entry point for standalone applications\n-bundled into a modular or executable modular JAR file.\n-.TP\n-\\f[V]-m\\f[R] \\f[I]FILE\\f[R] or \\f[V]--manifest=\\f[R]\\f[I]FILE\\f[R]\n-Includes the manifest information from the given manifest file.\n-.TP\n-\\f[V]-M\\f[R] or \\f[V]--no-manifest\\f[R]\n-Doesn\\[aq]t create a manifest file for the entries.\n-.TP\n-\\f[V]--module-version=\\f[R]\\f[I]VERSION\\f[R]\n-Specifies the module version, when creating or updating a modular JAR\n-file, or updating a non-modular JAR file.\n-.TP\n-\\f[V]--hash-modules=\\f[R]\\f[I]PATTERN\\f[R]\n-Computes and records the hashes of modules matched by the given pattern\n-and that depend upon directly or indirectly on a modular JAR file being\n-created or a non-modular JAR file being updated.\n-.TP\n-\\f[V]-p\\f[R] or \\f[V]--module-path\\f[R]\n-Specifies the location of module dependence for generating the hash.\n-.TP\n-\\f[V]\\[at]\\f[R]\\f[I]file\\f[R]\n-Reads \\f[V]jar\\f[R] options and file names from a text file as if they\n-were supplied on the command line\n-.SH OPERATION MODIFIERS VALID ONLY IN CREATE, UPDATE, AND GENERATE-INDEX MODES\n-.PP\n-You can use the following options to customize the actions of the create\n-(\\f[V]-c\\f[R] or \\f[V]--create\\f[R]) the update (\\f[V]-u\\f[R] or\n-\\f[V]--update\\f[R] ) and the generate-index (\\f[V]-i\\f[R] or\n-\\f[V]--generate-index=\\f[R]\\f[I]FILE\\f[R]) main operation modes:\n-.TP\n-\\f[V]-0\\f[R] or \\f[V]--no-compress\\f[R]\n-Stores without using ZIP compression.\n-.TP\n-\\f[V]--date=\\f[R]\\f[I]TIMESTAMP\\f[R]\n-The timestamp in ISO-8601 extended offset date-time with optional\n-time-zone format, to use for the timestamp of the entries, e.g.\n-\\[dq]2022-02-12T12:30:00-05:00\\[dq].\n-.SH OPERATION MODIFIERS VALID ONLY IN EXTRACT MODE\n-.TP\n-\\f[V]--dir\\f[R] \\f[I]DIR\\f[R]\n-Directory into which the JAR file will be extracted.\n-.TP\n-\\f[V]-k\\f[R] or \\f[V]--keep-old-files\\f[R]\n-Do not overwrite existing files.\n-If a Jar file entry with the same name exists in the target directory,\n-the existing file will not be overwritten.\n-As a result, if a file appears more than once in an archive, later\n-copies will not overwrite earlier copies.\n-Also note that some file system can be case insensitive.\n-.SH OTHER OPTIONS\n-.PP\n-The following options are recognized by the \\f[V]jar\\f[R] command and\n-not used with operation modes:\n-.TP\n-\\f[V]-h\\f[R] or \\f[V]--help\\f[R][\\f[V]:compat\\f[R]]\n-Displays the command-line help for the \\f[V]jar\\f[R] command or\n-optionally the compatibility help.\n-.TP\n-\\f[V]--help-extra\\f[R]\n-Displays help on extra options.\n-.TP\n-\\f[V]--version\\f[R]\n-Prints the program version.\n-.SH EXAMPLES OF JAR COMMAND SYNTAX\n-.IP \\[bu] 2\n-Create an archive, \\f[V]classes.jar\\f[R], that contains two class files,\n-\\f[V]Foo.class\\f[R] and \\f[V]Bar.class\\f[R].\n-.RS 2\n-.RS\n-.PP\n-\\f[V]jar --create --file classes.jar Foo.class Bar.class\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-Create an archive, \\f[V]classes.jar\\f[R], that contains two class files,\n-\\f[V]Foo.class\\f[R] and \\f[V]Bar.class\\f[R] setting the last modified\n-date and time to \\f[V]2021 Jan 6 12:36:00\\f[R].\n-.RS 2\n-.RS\n-.PP\n-\\f[V]jar --create --date=\\[dq]2021-01-06T14:36:00+02:00\\[dq] --file=classes.jar Foo.class Bar.class\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-Create an archive, \\f[V]classes.jar\\f[R], by using an existing manifest,\n-\\f[V]mymanifest\\f[R], that contains all of the files in the directory\n-\\f[V]foo\/\\f[R].\n-.RS 2\n-.RS\n-.PP\n-\\f[V]jar --create --file classes.jar --manifest mymanifest -C foo\/\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-Create a modular JAR archive,\\f[V]foo.jar\\f[R], where the module\n-descriptor is located in \\f[V]classes\/module-info.class\\f[R].\n-.RS 2\n-.RS\n-.PP\n-\\f[V]jar --create --file foo.jar --main-class com.foo.Main --module-version 1.0 -C foo\/classes resources\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-Update an existing non-modular JAR, \\f[V]foo.jar\\f[R], to a modular JAR\n-file.\n-.RS 2\n-.RS\n-.PP\n-\\f[V]jar --update --file foo.jar --main-class com.foo.Main --module-version 1.0 -C foo\/module-info.class\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-Create a versioned or multi-release JAR, \\f[V]foo.jar\\f[R], that places\n-the files in the \\f[V]classes\\f[R] directory at the root of the JAR, and\n-the files in the \\f[V]classes-10\\f[R] directory in the\n-\\f[V]META-INF\/versions\/10\\f[R] directory of the JAR.\n-.RS 2\n-.PP\n-In this example, the \\f[V]classes\/com\/foo\\f[R] directory contains two\n-classes, \\f[V]com.foo.Hello\\f[R] (the entry point class) and\n-\\f[V]com.foo.NameProvider\\f[R], both compiled for JDK 8.\n-The \\f[V]classes-10\/com\/foo\\f[R] directory contains a different version\n-of the \\f[V]com.foo.NameProvider\\f[R] class, this one containing JDK 10\n-specific code and compiled for JDK 10.\n-.PP\n-Given this setup, create a multirelease JAR file \\f[V]foo.jar\\f[R] by\n-running the following command from the directory containing the\n-directories \\f[V]classes\\f[R] and \\f[V]classes-10\\f[R] .\n-.RS\n-.PP\n-\\f[V]jar --create --file foo.jar --main-class com.foo.Hello -C classes . --release 10 -C classes-10 .\\f[R]\n-.RE\n-.PP\n-The JAR file \\f[V]foo.jar\\f[R] now contains:\n-.IP\n-.nf\n-\\f[CB]\n-% jar -tf foo.jar\n-\n-META-INF\/\n-META-INF\/MANIFEST.MF\n-com\/\n-com\/foo\/\n-com\/foo\/Hello.class\n-com\/foo\/NameProvider.class\n-META-INF\/versions\/10\/com\/\n-META-INF\/versions\/10\/com\/foo\/\n-META-INF\/versions\/10\/com\/foo\/NameProvider.class\n-\\f[R]\n-.fi\n-.PP\n-As well as other information, the file \\f[V]META-INF\/MANIFEST.MF\\f[R],\n-will contain the following lines to indicate that this is a multirelease\n-JAR file with an entry point of \\f[V]com.foo.Hello\\f[R].\n-.IP\n-.nf\n-\\f[CB]\n-\\&...\n-Main-Class: com.foo.Hello\n-Multi-Release: true\n-\\f[R]\n-.fi\n-.PP\n-Assuming that the \\f[V]com.foo.Hello\\f[R] class calls a method on the\n-\\f[V]com.foo.NameProvider\\f[R] class, running the program using JDK 10\n-will ensure that the \\f[V]com.foo.NameProvider\\f[R] class is the one in\n-\\f[V]META-INF\/versions\/10\/com\/foo\/\\f[R].\n-Running the program using JDK 8 will ensure that the\n-\\f[V]com.foo.NameProvider\\f[R] class is the one at the root of the JAR,\n-in \\f[V]com\/foo\\f[R].\n-.RE\n-.IP \\[bu] 2\n-Create an archive, \\f[V]my.jar\\f[R], by reading options and lists of\n-class files from the file \\f[V]classes.list\\f[R].\n-.RS 2\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-To shorten or simplify the \\f[V]jar\\f[R] command, you can provide an arg\n-file that lists the files to include in the JAR file and pass it to the\n-\\f[V]jar\\f[R] command with the at sign (\\f[V]\\[at]\\f[R]) as a prefix.\n-.RS\n-.PP\n-\\f[V]jar --create --file my.jar \\[at]classes.list\\f[R]\n-.RE\n-.PP\n-If one or more entries in the arg file cannot be found then the jar\n-command fails without creating the JAR file.\n-.RE\n-.IP \\[bu] 2\n-Extract the JAR file \\f[V]foo.jar\\f[R] to \\f[V]\/tmp\/bar\/\\f[R] directory:\n-.RS 2\n-.RS\n-.PP\n-\\f[V]jar -xf foo.jar -C \/tmp\/bar\/\\f[R]\n-.RE\n-.PP\n-Alternatively, you can also do:\n-.RS\n-.PP\n-\\f[V]jar --extract --file foo.jar --dir \/tmp\/bar\/\\f[R]\n-.RE\n-.RE\n","filename":"src\/jdk.jartool\/share\/man\/jar.1","additions":0,"deletions":379,"binary":false,"changes":379,"status":"deleted"},{"patch":"@@ -0,0 +1,313 @@\n+---\n+# Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JAR(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jar - create an archive for classes and resources, and manipulate or restore\n+individual classes or resources from an archive\n+\n+## Synopsis\n+\n+`jar` \\[*OPTION* ...\\] \\[ \\[`--release` *VERSION*\\] \\[`-C` *dir*\\] *files*\\]\n+...\n+\n+## Description\n+\n+The `jar` command is a general-purpose archiving and compression tool, based on\n+the ZIP and ZLIB compression formats. Initially, the `jar` command was designed\n+to package Java applets (not supported since JDK 11) or applications; however,\n+beginning with JDK 9, users can use the `jar` command to create modular JARs.\n+For transportation and deployment, it's usually more convenient to package\n+modules as modular JARs.\n+\n+The syntax for the `jar` command resembles the syntax for the `tar` command. It\n+has several main operation modes, defined by one of the mandatory operation\n+arguments. Other arguments are either options that modify the behavior of the\n+operation or are required to perform the operation.\n+\n+When modules or the components of an application (files, images and sounds) are\n+combined into a single archive, they can be downloaded by a Java agent (such as\n+a browser) in a single HTTP transaction, rather than requiring a new connection\n+for each piece. This dramatically improves download times. The `jar` command\n+also compresses files, which further improves download time. The `jar` command\n+also enables individual entries in a file to be signed so that their origin can\n+be authenticated. A JAR file can be used as a class path entry, whether or not\n+it's compressed.\n+\n+An archive becomes a modular JAR when you include a module descriptor,\n+`module-info.class`, in the root of the given directories or in the root of\n+the `.jar` archive. The following operations described in [Operation Modifiers\n+Valid Only in Create and Update Modes] are valid only when creating or\n+updating a modular jar or updating an existing non-modular jar:\n+\n+-   `--module-version`\n+\n+-   `--hash-modules`\n+\n+-   `--module-path`\n+\n+**Note:**\n+\n+All mandatory or optional arguments for long options are also mandatory or\n+optional for any corresponding short options.\n+\n+## Main Operation Modes\n+\n+When using the `jar` command, you must specify the operation for it to perform.\n+You specify the operation mode for the `jar` command by including the\n+appropriate operation arguments described in this section. You can mix an\n+operation argument with other one-letter options. Generally the operation\n+argument is the first argument specified on the command line.\n+\n+`-c` or `--create`\n+:   Creates the archive.\n+\n+`-i` *FILE* or `--generate-index=`*FILE*\n+:   Generates index information for the specified JAR file.  This option is deprecated\n+    and may be removed in a future release.\n+\n+`-t` or `--list`\n+:   Lists the table of contents for the archive.\n+\n+`-u` or `--update`\n+:   Updates an existing JAR file.\n+\n+`-x` or `--extract`\n+:   Extracts the named (or all) files from the archive.\n+    If a file with the same name appears more than once in\n+    the archive, each copy will be extracted, with later copies\n+    overwriting (replacing) earlier copies unless -k is specified.\n+\n+`-d` or `--describe-module`\n+:   Prints the module descriptor or automatic module name.\n+\n+## Operation Modifiers Valid in Any Mode\n+\n+You can use the following options to customize the actions of any operation\n+mode included in the `jar` command.\n+\n+`-C` *DIR*\n+:   When used with the create operation mode, changes the specified directory\n+    and includes the *files* specified at the end of the command line.\n+\n+    `jar` \\[*OPTION* ...\\] \\[ \\[`--release` *VERSION*\\] \\[`-C` *dir*\\]\n+    *files*\\]\n+\n+    When used with the extract operation mode, specifies the destination directory\n+    where the JAR file will be extracted. Unlike with the create operation mode,\n+    this option can be specified only once with the extract operation mode.\n+\n+`-f` *FILE* or `--file=`*FILE*\n+:   Specifies the archive file name.\n+\n+`--release` *VERSION*\n+:   Creates a multirelease JAR file. Places all files specified after the\n+    option into a versioned directory of the JAR file named\n+    `META-INF\/versions\/`*VERSION*`\/`, where *VERSION* must be must be a\n+    positive integer whose value is 9 or greater.\n+\n+    At run time, where more than one version of a class exists in the JAR, the\n+    JDK will use the first one it finds, searching initially in the directory\n+    tree whose *VERSION* number matches the JDK's major version number. It will\n+    then look in directories with successively lower *VERSION* numbers, and\n+    finally look in the root of the JAR.\n+\n+`-v` or `--verbose`\n+:   Sends or prints verbose output to standard output.\n+\n+## Operation Modifiers Valid Only in Create and Update Modes\n+\n+You can use the following options to customize the actions of the create and\n+the update main operation modes:\n+\n+`-e` *CLASSNAME* or `--main-class=`*CLASSNAME*\n+:   Specifies the application entry point for standalone applications bundled\n+    into a modular or executable modular JAR file.\n+\n+`-m` *FILE* or `--manifest=`*FILE*\n+:   Includes the manifest information from the given manifest file.\n+\n+`-M` or `--no-manifest`\n+:   Doesn't create a manifest file for the entries.\n+\n+`--module-version=`*VERSION*\n+:   Specifies the module version, when creating or updating a modular JAR file,\n+    or updating a non-modular JAR file.\n+\n+`--hash-modules=`*PATTERN*\n+:   Computes and records the hashes of modules matched by the given pattern and\n+    that depend upon directly or indirectly on a modular JAR file being created\n+    or a non-modular JAR file being updated.\n+\n+`-p` or `--module-path`\n+:   Specifies the location of module dependence for generating the hash.\n+\n+`@`*file*\n+:   Reads `jar` options and file names from a text file as if they were supplied\n+on the command line\n+\n+## Operation Modifiers Valid Only in Create, Update, and Generate-index Modes\n+\n+You can use the following options to customize the actions of the create (`-c`\n+or `--create`) the update (`-u` or `--update` ) and the generate-index (`-i` or\n+`--generate-index=`*FILE*) main operation modes:\n+\n+`-0` or `--no-compress`\n+:   Stores without using ZIP compression.\n+\n+`--date=`*TIMESTAMP*\n+:   The timestamp in ISO-8601 extended offset date-time with optional time-zone\n+    format, to use for the timestamp of the entries,\n+    e.g. \"2022-02-12T12:30:00-05:00\".\n+\n+## Operation Modifiers Valid Only in Extract Mode\n+\n+`--dir` *DIR*\n+:   Directory into which the JAR file will be extracted.\n+\n+`-k` or `--keep-old-files`\n+:   Do not overwrite existing files.\n+    If a Jar file entry with the same name exists in the target directory, the\n+    existing file will not be overwritten.\n+    As a result, if a file appears more than once in an archive, later copies will not overwrite\n+    earlier copies.\n+    Also note that some file system can be case insensitive.\n+\n+## Other Options\n+\n+The following options are recognized by the `jar` command and not used with\n+operation modes:\n+\n+`-h` or `--help`\\[`:compat`\\]\n+:   Displays the command-line help for the `jar` command or optionally the\n+    compatibility help.\n+\n+`--help-extra`\n+:   Displays help on extra options.\n+\n+`--version`\n+:   Prints the program version.\n+\n+## Examples of jar Command Syntax\n+\n+-   Create an archive, `classes.jar`, that contains two class files,\n+    `Foo.class` and `Bar.class`.\n+\n+    >   `jar --create --file classes.jar Foo.class Bar.class`\n+\n+-   Create an archive, `classes.jar`, that contains two class files,\n+    `Foo.class` and `Bar.class` setting the last modified date and time to `2021 Jan 6 12:36:00`.\n+\n+    >   `jar --create --date=\"2021-01-06T14:36:00+02:00\" --file=classes.jar Foo.class Bar.class`\n+\n+-   Create an archive, `classes.jar`, by using an existing manifest,\n+    `mymanifest`, that contains all of the files in the directory `foo\/`.\n+\n+    >   `jar --create --file classes.jar --manifest mymanifest -C foo\/`\n+\n+-   Create a modular JAR archive,`foo.jar`, where the module descriptor is\n+    located in `classes\/module-info.class`.\n+\n+    >   `jar --create --file foo.jar --main-class com.foo.Main\n+        --module-version 1.0 -C foo\/classes resources`\n+\n+-   Update an existing non-modular JAR, `foo.jar`, to a modular JAR file.\n+\n+    >   `jar --update --file foo.jar --main-class com.foo.Main\n+        --module-version 1.0 -C foo\/module-info.class`\n+\n+-   Create a versioned or multi-release JAR, `foo.jar`, that places the files\n+    in the `classes` directory at the root of the JAR, and the files in the\n+    `classes-10` directory in the `META-INF\/versions\/10` directory of the JAR.\n+\n+    In this example, the `classes\/com\/foo` directory contains two classes,\n+    `com.foo.Hello` (the entry point class) and `com.foo.NameProvider`, both\n+    compiled for JDK 8. The `classes-10\/com\/foo` directory contains a different\n+    version of the `com.foo.NameProvider` class, this one containing JDK 10\n+    specific code and compiled for JDK 10.\n+\n+    Given this setup, create a multirelease JAR file `foo.jar` by running the\n+    following command from the directory containing the directories `classes`\n+    and `classes-10` .\n+\n+    >   `jar --create --file foo.jar --main-class com.foo.Hello -C classes .\n+        --release 10 -C classes-10 .`\n+\n+    The JAR file `foo.jar` now contains:\n+\n+    ```\n+    % jar -tf foo.jar\n+\n+    META-INF\/\n+    META-INF\/MANIFEST.MF\n+    com\/\n+    com\/foo\/\n+    com\/foo\/Hello.class\n+    com\/foo\/NameProvider.class\n+    META-INF\/versions\/10\/com\/\n+    META-INF\/versions\/10\/com\/foo\/\n+    META-INF\/versions\/10\/com\/foo\/NameProvider.class\n+    ```\n+\n+    As well as other information, the file `META-INF\/MANIFEST.MF`, will contain\n+    the following lines to indicate that this is a multirelease JAR file with\n+    an entry point of `com.foo.Hello`.\n+\n+    ```\n+    ...\n+    Main-Class: com.foo.Hello\n+    Multi-Release: true\n+    ```\n+\n+    Assuming that the `com.foo.Hello` class calls a method on the\n+    `com.foo.NameProvider` class, running the program using JDK 10 will ensure\n+    that the `com.foo.NameProvider` class is the one in\n+    `META-INF\/versions\/10\/com\/foo\/`. Running the program using JDK 8 will\n+    ensure that the `com.foo.NameProvider` class is the one at the root of the\n+    JAR, in `com\/foo`.\n+\n+-   Create an archive, `my.jar`, by reading options and lists of class files\n+    from the file `classes.list`.\n+\n+    **Note:**\n+\n+    To shorten or simplify the `jar` command, you can provide an arg file that lists\n+    the files to include in the JAR file and pass it to the `jar` command with the at sign (`@`)\n+    as a prefix.\n+\n+    >   `jar --create --file my.jar @classes.list`\n+\n+    If one or more entries in the arg file cannot be found then the jar command fails without creating the JAR file.\n+\n+-   Extract the JAR file `foo.jar` to `\/tmp\/bar\/` directory:\n+\n+    >   `jar -xf foo.jar -C \/tmp\/bar\/`\n+\n+    Alternatively, you can also do:\n+\n+    >   `jar --extract --file foo.jar --dir \/tmp\/bar\/`\n","filename":"src\/jdk.jartool\/share\/man\/jar.md","additions":313,"deletions":0,"binary":false,"changes":313,"status":"added"},{"patch":"@@ -1,1395 +0,0 @@\n-.\\\" Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-'\\\" t\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JARSIGNER\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jarsigner - sign and verify Java Archive (JAR) files\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jarsigner\\f[R] [\\f[I]options\\f[R]] \\f[I]jar-file\\f[R]\n-\\f[I]alias\\f[R]\n-.PP\n-\\f[V]jarsigner\\f[R] \\f[V]-verify\\f[R] [\\f[I]options\\f[R]]\n-\\f[I]jar-file\\f[R] [\\f[I]alias\\f[R] ...]\n-.PP\n-\\f[V]jarsigner\\f[R] \\f[V]-version\\f[R]\n-.TP\n-\\f[I]options\\f[R]\n-The command-line options.\n-See \\f[B]Options for jarsigner\\f[R].\n-.TP\n-\\f[V]-verify\\f[R]\n-The \\f[V]-verify\\f[R] option can take zero or more keystore alias names\n-after the JAR file name.\n-When the \\f[V]-verify\\f[R] option is specified, the \\f[V]jarsigner\\f[R]\n-command checks that the certificate used to verify each signed entry in\n-the JAR file matches one of the keystore aliases.\n-The aliases are defined in the keystore specified by \\f[V]-keystore\\f[R]\n-or the default keystore.\n-.RS\n-.PP\n-If you also specify the \\f[V]-strict\\f[R] option, and the\n-\\f[V]jarsigner\\f[R] command detects severe warnings, the message,\n-\\[dq]jar verified, with signer errors\\[dq] is displayed.\n-.RE\n-.TP\n-\\f[I]jar-file\\f[R]\n-The JAR file to be signed.\n-.RS\n-.PP\n-If you also specified the \\f[V]-strict\\f[R] option, and the\n-\\f[V]jarsigner\\f[R] command detected severe warnings, the message,\n-\\[dq]jar signed, with signer errors\\[dq] is displayed.\n-.RE\n-.TP\n-\\f[I]alias\\f[R]\n-The aliases are defined in the keystore specified by \\f[V]-keystore\\f[R]\n-or the default keystore.\n-.TP\n-\\f[V]-version\\f[R]\n-The \\f[V]-version\\f[R] option prints the program version of\n-\\f[V]jarsigner\\f[R].\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jarsigner\\f[R] tool has two purposes:\n-.IP \\[bu] 2\n-To sign Java Archive (JAR) files.\n-.IP \\[bu] 2\n-To verify the signatures and integrity of signed JAR files.\n-.PP\n-The JAR feature enables the packaging of class files, images, sounds,\n-and other digital data in a single file for faster and easier\n-distribution.\n-A tool named \\f[V]jar\\f[R] enables developers to produce JAR files.\n-(Technically, any ZIP file can also be considered a JAR file, although\n-when created by the \\f[V]jar\\f[R] command or processed by the\n-\\f[V]jarsigner\\f[R] command, JAR files also contain a\n-\\f[V]META-INF\/MANIFEST.MF\\f[R] file.)\n-.PP\n-A digital signature is a string of bits that is computed from some data\n-(the data being signed) and the private key of an entity (a person,\n-company, and so on).\n-Similar to a handwritten signature, a digital signature has many useful\n-characteristics:\n-.IP \\[bu] 2\n-Its authenticity can be verified by a computation that uses the public\n-key corresponding to the private key used to generate the signature.\n-.IP \\[bu] 2\n-It can\\[aq]t be forged, assuming the private key is kept secret.\n-.IP \\[bu] 2\n-It is a function of the data signed and thus can\\[aq]t be claimed to be\n-the signature for other data as well.\n-.IP \\[bu] 2\n-The signed data can\\[aq]t be changed.\n-If the data is changed, then the signature can\\[aq]t be verified as\n-authentic.\n-.PP\n-To generate an entity\\[aq]s signature for a file, the entity must first\n-have a public\/private key pair associated with it and one or more\n-certificates that authenticate its public key.\n-A certificate is a digitally signed statement from one entity that says\n-that the public key of another entity has a particular value.\n-.PP\n-The \\f[V]jarsigner\\f[R] command uses key and certificate information\n-from a keystore to generate digital signatures for JAR files.\n-A keystore is a database of private keys and their associated X.509\n-certificate chains that authenticate the corresponding public keys.\n-The \\f[V]keytool\\f[R] command is used to create and administer\n-keystores.\n-.PP\n-The \\f[V]jarsigner\\f[R] command uses an entity\\[aq]s private key to\n-generate a signature.\n-The signed JAR file contains, among other things, a copy of the\n-certificate from the keystore for the public key corresponding to the\n-private key used to sign the file.\n-The \\f[V]jarsigner\\f[R] command can verify the digital signature of the\n-signed JAR file using the certificate inside it (in its signature block\n-file).\n-.PP\n-The \\f[V]jarsigner\\f[R] command can generate signatures that include a\n-time stamp that enables a systems or deployer to check whether the JAR\n-file was signed while the signing certificate was still valid.\n-.PP\n-In addition, APIs allow applications to obtain the timestamp\n-information.\n-.PP\n-At this time, the \\f[V]jarsigner\\f[R] command can only sign JAR files\n-created by the \\f[V]jar\\f[R] command or zip files.\n-JAR files are the same as zip files, except they also have a\n-\\f[V]META-INF\/MANIFEST.MF\\f[R] file.\n-A \\f[V]META-INF\/MANIFEST.MF\\f[R] file is created when the\n-\\f[V]jarsigner\\f[R] command signs a zip file.\n-.PP\n-The default \\f[V]jarsigner\\f[R] command behavior is to sign a JAR or zip\n-file.\n-Use the \\f[V]-verify\\f[R] option to verify a signed JAR file.\n-.PP\n-The \\f[V]jarsigner\\f[R] command also attempts to validate the\n-signer\\[aq]s certificate after signing or verifying.\n-During validation, it checks the revocation status of each certificate\n-in the signer\\[aq]s certificate chain when the \\f[V]-revCheck\\f[R]\n-option is specified.\n-If there is a validation error or any other problem, the command\n-generates warning messages.\n-If you specify the \\f[V]-strict\\f[R] option, then the command treats\n-severe warnings as errors.\n-See \\f[B]Errors and Warnings\\f[R].\n-.SH KEYSTORE ALIASES\n-.PP\n-All keystore entities are accessed with unique aliases.\n-.PP\n-When you use the \\f[V]jarsigner\\f[R] command to sign a JAR file, you\n-must specify the alias for the keystore entry that contains the private\n-key needed to generate the signature.\n-If no output file is specified, it overwrites the original JAR file with\n-the signed JAR file.\n-.PP\n-Keystores are protected with a password, so the store password must be\n-specified.\n-You are prompted for it when you don\\[aq]t specify it on the command\n-line.\n-Similarly, private keys are protected in a keystore with a password, so\n-the private key\\[aq]s password must be specified, and you are prompted\n-for the password when you don\\[aq]t specify it on the command line and\n-it isn\\[aq]t the same as the store password.\n-.SH KEYSTORE LOCATION\n-.PP\n-The \\f[V]jarsigner\\f[R] command has a \\f[V]-keystore\\f[R] option for\n-specifying the URL of the keystore to be used.\n-The keystore is by default stored in a file named \\f[V].keystore\\f[R] in\n-the user\\[aq]s home directory, as determined by the \\f[V]user.home\\f[R]\n-system property.\n-.PP\n-\\f[B]Linux and macOS:\\f[R] \\f[V]user.home\\f[R] defaults to the\n-user\\[aq]s home directory.\n-.PP\n-The input stream from the \\f[V]-keystore\\f[R] option is passed to the\n-\\f[V]KeyStore.load\\f[R] method.\n-If \\f[V]NONE\\f[R] is specified as the URL, then a null stream is passed\n-to the \\f[V]KeyStore.load\\f[R] method.\n-\\f[V]NONE\\f[R] should be specified when the \\f[V]KeyStore\\f[R] class\n-isn\\[aq]t file based, for example, when it resides on a hardware token\n-device.\n-.SH KEYSTORE IMPLEMENTATION\n-.PP\n-The \\f[V]KeyStore\\f[R] class provided in the \\f[V]java.security\\f[R]\n-package supplies a number of well-defined interfaces to access and\n-modify the information in a keystore.\n-You can have multiple different concrete implementations, where each\n-implementation is for a particular type of keystore.\n-.PP\n-Currently, there are two command-line tools that use keystore\n-implementations (\\f[V]keytool\\f[R] and \\f[V]jarsigner\\f[R]).\n-.PP\n-The default keystore implementation is \\f[V]PKCS12\\f[R].\n-This is a cross platform keystore based on the RSA PKCS12 Personal\n-Information Exchange Syntax Standard.\n-This standard is primarily meant for storing or transporting a\n-user\\[aq]s private keys, certificates, and miscellaneous secrets.\n-There is another built-in implementation, provided by Oracle.\n-It implements the keystore as a file with a proprietary keystore type\n-(format) named \\f[V]JKS\\f[R].\n-It protects each private key with its individual password, and also\n-protects the integrity of the entire keystore with a (possibly\n-different) password.\n-.PP\n-Keystore implementations are provider-based, which means the application\n-interfaces supplied by the \\f[V]KeyStore\\f[R] class are implemented in\n-terms of a Service Provider Interface (SPI).\n-There is a corresponding abstract \\f[V]KeystoreSpi\\f[R] class, also in\n-the \\f[V]java.security package\\f[R], that defines the Service Provider\n-Interface methods that providers must implement.\n-The term provider refers to a package or a set of packages that supply a\n-concrete implementation of a subset of services that can be accessed by\n-the Java Security API.\n-To provide a keystore implementation, clients must implement a provider\n-and supply a \\f[V]KeystoreSpi\\f[R] subclass implementation, as described\n-in \\f[B]How to Implement a Provider in the Java Cryptography\n-Architecture\\f[R]\n-[https:\/\/www.oracle.com\/pls\/topic\/lookup?ctx=en\/java\/javase&id=security_guide_implement_provider_jca].\n-.PP\n-Applications can choose different types of keystore implementations from\n-different providers, with the \\f[V]getInstance\\f[R] factory method in\n-the \\f[V]KeyStore\\f[R] class.\n-A keystore type defines the storage and data format of the keystore\n-information and the algorithms used to protect private keys in the\n-keystore and the integrity of the keystore itself.\n-Keystore implementations of different types aren\\[aq]t compatible.\n-.PP\n-The \\f[V]jarsigner\\f[R] commands can read file-based keystores from any\n-location that can be specified using a URL.\n-In addition, these commands can read non-file-based keystores such as\n-those provided by MSCAPI on Windows and PKCS11 on all platforms.\n-.PP\n-For the \\f[V]jarsigner\\f[R] and \\f[V]keytool\\f[R] commands, you can\n-specify a keystore type at the command line with the\n-\\f[V]-storetype\\f[R] option.\n-.PP\n-If you don\\[aq]t explicitly specify a keystore type, then the tools\n-choose a keystore implementation based on the value of the\n-\\f[V]keystore.type\\f[R] property specified in the security properties\n-file.\n-The security properties file is called \\f[V]java.security\\f[R], and it\n-resides in the JDK security properties directory,\n-\\f[V]java.home\/conf\/security\\f[R].\n-.PP\n-Each tool gets the \\f[V]keystore.type\\f[R] value and then examines all\n-the installed providers until it finds one that implements keystores of\n-that type.\n-It then uses the keystore implementation from that provider.\n-.PP\n-The \\f[V]KeyStore\\f[R] class defines a static method named\n-\\f[V]getDefaultType\\f[R] that lets applications retrieve the value of\n-the \\f[V]keystore.type\\f[R] property.\n-The following line of code creates an instance of the default keystore\n-type as specified in the \\f[V]keystore.type\\f[R] property:\n-.RS\n-.PP\n-\\f[V]KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\\f[R]\n-.RE\n-.PP\n-The default keystore type is \\f[V]pkcs12\\f[R], which is a cross platform\n-keystore based on the RSA PKCS12 Personal Information Exchange Syntax\n-Standard.\n-This is specified by the following line in the security properties file:\n-.RS\n-.PP\n-\\f[V]keystore.type=pkcs12\\f[R]\n-.RE\n-.PP\n-Case doesn\\[aq]t matter in keystore type designations.\n-For example, \\f[V]JKS\\f[R] is the same as \\f[V]jks\\f[R].\n-.PP\n-To have the tools utilize a keystore implementation other than the\n-default, you can change that line to specify a different keystore type.\n-For example, if you want to use the Oracle\\[aq]s \\f[V]jks\\f[R] keystore\n-implementation, then change the line to the following:\n-.RS\n-.PP\n-\\f[V]keystore.type=jks\\f[R]\n-.RE\n-.SH SUPPORTED ALGORITHMS\n-.PP\n-By default, the \\f[V]jarsigner\\f[R] command signs a JAR file using one\n-of the following algorithms and block file extensions depending on the\n-type and size of the private key:\n-.PP\n-Default Signature Algorithms and Block File Extensions\n-.TS\n-tab(@);\n-l l l l.\n-T{\n-keyalg\n-T}@T{\n-key size\n-T}@T{\n-default sigalg\n-T}@T{\n-block file extension\n-T}\n-_\n-T{\n-DSA\n-T}@T{\n-any size\n-T}@T{\n-SHA256withDSA\n-T}@T{\n-\\&.DSA\n-T}\n-T{\n-RSA\n-T}@T{\n-< 624\n-T}@T{\n-SHA256withRSA\n-T}@T{\n-\\&.RSA\n-T}\n-T{\n-T}@T{\n-<= 7680\n-T}@T{\n-SHA384withRSA\n-T}@T{\n-T}\n-T{\n-T}@T{\n-> 7680\n-T}@T{\n-SHA512withRSA\n-T}@T{\n-T}\n-T{\n-EC\n-T}@T{\n-< 512\n-T}@T{\n-SHA384withECDSA\n-T}@T{\n-\\&.EC\n-T}\n-T{\n-T}@T{\n->= 512\n-T}@T{\n-SHA512withECDSA\n-T}@T{\n-T}\n-T{\n-RSASSA-PSS\n-T}@T{\n-< 624\n-T}@T{\n-RSASSA-PSS (with SHA-256)\n-T}@T{\n-\\&.RSA\n-T}\n-T{\n-T}@T{\n-<= 7680\n-T}@T{\n-RSASSA-PSS (with SHA-384)\n-T}@T{\n-T}\n-T{\n-T}@T{\n-> 7680\n-T}@T{\n-RSASSA-PSS (with SHA-512)\n-T}@T{\n-T}\n-T{\n-EdDSA\n-T}@T{\n-255\n-T}@T{\n-Ed25519\n-T}@T{\n-\\&.EC\n-T}\n-T{\n-T}@T{\n-448\n-T}@T{\n-Ed448\n-T}@T{\n-T}\n-.TE\n-.IP \\[bu] 2\n-If an RSASSA-PSS key is encoded with parameters, then jarsigner will use\n-the same parameters in the signature.\n-Otherwise, jarsigner will use parameters that are determined by the size\n-of the key as specified in the table above.\n-For example, an 3072-bit RSASSA-PSS key will use RSASSA-PSS as the\n-signature algorithm and SHA-384 as the hash and MGF1 algorithms.\n-.IP \\[bu] 2\n-If a key algorithm is not listed in this table, the \\f[V].DSA\\f[R]\n-extension is used when signing a JAR file.\n-.PP\n-These default signature algorithms can be overridden by using the\n-\\f[V]-sigalg\\f[R] option.\n-.PP\n-The \\f[V]jarsigner\\f[R] command uses the\n-\\f[V]jdk.jar.disabledAlgorithms\\f[R] and\n-\\f[V]jdk.security.legacyAlgorithms\\f[R] security properties to determine\n-which algorithms are considered a security risk.\n-If the JAR file was signed with any algorithms that are disabled, it\n-will be treated as an unsigned JAR file.\n-If the JAR file was signed with any legacy algorithms, it will be\n-treated as signed with an informational warning to inform users that the\n-legacy algorithm will be disabled in a future update.\n-For detailed verification output, include\n-\\f[V]-J-Djava.security.debug=jar\\f[R].\n-The \\f[V]jdk.jar.disabledAlgorithms\\f[R] and\n-\\f[V]jdk.security.legacyAlgorithms\\f[R] security properties are defined\n-in the \\f[V]java.security\\f[R] file (located in the JDK\\[aq]s\n-\\f[V]$JAVA_HOME\/conf\/security\\f[R] directory).\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-In order to improve out of the box security, default key size and\n-signature algorithm names are periodically updated to stronger values\n-with each release of the JDK.\n-If interoperability with older releases of the JDK is important, please\n-make sure the defaults are supported by those releases, or alternatively\n-use the \\f[V]-sigalg\\f[R] option to override the default values at your\n-own risk.\n-.SH THE SIGNED JAR FILE\n-.PP\n-When the \\f[V]jarsigner\\f[R] command is used to sign a JAR file, the\n-output signed JAR file is exactly the same as the input JAR file, except\n-that it has two additional files placed in the META-INF directory:\n-.IP \\[bu] 2\n-A signature file with an \\f[V].SF\\f[R] extension\n-.IP \\[bu] 2\n-A signature block file with a \\f[V].DSA\\f[R], \\f[V].RSA\\f[R], or\n-\\f[V].EC\\f[R] extension\n-.PP\n-The base file names for these two files come from the value of the\n-\\f[V]-sigfile\\f[R] option.\n-For example, when the option is \\f[V]-sigfile MKSIGN\\f[R], the files are\n-named \\f[V]MKSIGN.SF\\f[R] and \\f[V]MKSIGN.RSA\\f[R].\n-In this document, we assume the signer always uses an RSA key.\n-.PP\n-If no \\f[V]-sigfile\\f[R] option appears on the command line, then the\n-base file name for the \\f[V].SF\\f[R] and the signature block files is\n-the first 8 characters of the alias name specified on the command line,\n-all converted to uppercase.\n-If the alias name has fewer than 8 characters, then the full alias name\n-is used.\n-If the alias name contains any characters that aren\\[aq]t allowed in a\n-signature file name, then each such character is converted to an\n-underscore (_) character in forming the file name.\n-Valid characters include letters, digits, underscores, and hyphens.\n-.SH SIGNATURE FILE\n-.PP\n-A signature file (\\f[V].SF\\f[R] file) looks similar to the manifest file\n-that is always included in a JAR file when the \\f[V]jarsigner\\f[R]\n-command is used to sign the file.\n-For each source file included in the JAR file, the \\f[V].SF\\f[R] file\n-has two lines, such as in the manifest file, that list the following:\n-.IP \\[bu] 2\n-File name\n-.IP \\[bu] 2\n-Name of the digest algorithm (SHA)\n-.IP \\[bu] 2\n-SHA digest value\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The name of the digest algorithm (SHA) and the SHA digest value are on\n-the same line.\n-.PP\n-In the manifest file, the SHA digest value for each source file is the\n-digest (hash) of the binary data in the source file.\n-In the \\f[V].SF\\f[R] file, the digest value for a specified source file\n-is the hash of the two lines in the manifest file for the source file.\n-.PP\n-The signature file, by default, includes a header with a hash of the\n-whole manifest file.\n-The header also contains a hash of the manifest header.\n-The presence of the header enables verification optimization.\n-See \\f[B]JAR File Verification\\f[R].\n-.SH SIGNATURE BLOCK FILE\n-.PP\n-The \\f[V].SF\\f[R] file is signed and the signature is placed in the\n-signature block file.\n-This file also contains, encoded inside it, the certificate or\n-certificate chain from the keystore that authenticates the public key\n-corresponding to the private key used for signing.\n-The file has the extension \\f[V].DSA\\f[R], \\f[V].RSA\\f[R], or\n-\\f[V].EC\\f[R], depending on the key algorithm used.\n-See the table in \\f[B]Supported Algorithms\\f[R].\n-.SH SIGNATURE TIME STAMP\n-.PP\n-The \\f[V]jarsigner\\f[R] command used with the following options\n-generates and stores a signature time stamp when signing a JAR file:\n-.IP \\[bu] 2\n-\\f[V]-tsa\\f[R] \\f[I]url\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-tsacert\\f[R] \\f[I]alias\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-tsapolicyid\\f[R] \\f[I]policyid\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-tsadigestalg\\f[R] \\f[I]algorithm\\f[R]\n-.PP\n-See \\f[B]Options for jarsigner\\f[R].\n-.SH JAR FILE VERIFICATION\n-.PP\n-A successful JAR file verification occurs when the signatures are valid,\n-and none of the files that were in the JAR file when the signatures were\n-generated have changed since then.\n-JAR file verification involves the following steps:\n-.IP \"1.\" 3\n-Verify the signature of the \\f[V].SF\\f[R] file.\n-.RS 4\n-.PP\n-The verification ensures that the signature stored in each signature\n-block file was generated using the private key corresponding to the\n-public key whose certificate (or certificate chain) also appears in the\n-signature block file.\n-It also ensures that the signature is a valid signature of the\n-corresponding signature (\\f[V].SF\\f[R]) file, and thus the \\f[V].SF\\f[R]\n-file wasn\\[aq]t tampered with.\n-.RE\n-.IP \"2.\" 3\n-Verify the digest listed in each entry in the \\f[V].SF\\f[R] file with\n-each corresponding section in the manifest.\n-.RS 4\n-.PP\n-The \\f[V].SF\\f[R] file by default includes a header that contains a hash\n-of the entire manifest file.\n-When the header is present, the verification can check to see whether or\n-not the hash in the header matches the hash of the manifest file.\n-If there is a match, then verification proceeds to the next step.\n-.PP\n-If there is no match, then a less optimized verification is required to\n-ensure that the hash in each source file information section in the\n-\\f[V].SF\\f[R] file equals the hash of its corresponding section in the\n-manifest file.\n-See Signature File.\n-.PP\n-One reason the hash of the manifest file that is stored in the\n-\\f[V].SF\\f[R] file header might not equal the hash of the current\n-manifest file is that it might contain sections for newly added files\n-after the file was signed.\n-For example, suppose one or more files were added to the signed JAR file\n-(using the \\f[V]jar\\f[R] tool) that already contains a signature and a\n-\\f[V].SF\\f[R] file.\n-If the JAR file is signed again by a different signer, then the manifest\n-file is changed (sections are added to it for the new files by the\n-\\f[V]jarsigner\\f[R] tool) and a new \\f[V].SF\\f[R] file is created, but\n-the original \\f[V].SF\\f[R] file is unchanged.\n-A verification is still considered successful if none of the files that\n-were in the JAR file when the original signature was generated have been\n-changed since then.\n-This is because the hashes in the non-header sections of the\n-\\f[V].SF\\f[R] file equal the hashes of the corresponding sections in the\n-manifest file.\n-.RE\n-.IP \"3.\" 3\n-Read each file in the JAR file that has an entry in the \\f[V].SF\\f[R]\n-file.\n-While reading, compute the file\\[aq]s digest and compare the result with\n-the digest for this file in the manifest section.\n-The digests should be the same or verification fails.\n-.RS 4\n-.PP\n-If any serious verification failures occur during the verification\n-process, then the process is stopped and a security exception is thrown.\n-The \\f[V]jarsigner\\f[R] command catches and displays the exception.\n-.RE\n-.IP \"4.\" 3\n-Check for disabled algorithm usage.\n-See \\f[B]Supported Algorithms\\f[R].\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-You should read any addition warnings (or errors if you specified the\n-\\f[V]-strict\\f[R] option), as well as the content of the certificate (by\n-specifying the \\f[V]-verbose\\f[R] and \\f[V]-certs\\f[R] options) to\n-determine if the signature can be trusted.\n-.SH MULTIPLE SIGNATURES FOR A JAR FILE\n-.PP\n-A JAR file can be signed by multiple people by running the\n-\\f[V]jarsigner\\f[R] command on the file multiple times and specifying\n-the alias for a different person each time, as follows:\n-.IP\n-.nf\n-\\f[CB]\n-jarsigner myBundle.jar susan\n-jarsigner myBundle.jar kevin\n-\\f[R]\n-.fi\n-.PP\n-When a JAR file is signed multiple times, there are multiple\n-\\f[V].SF\\f[R] and signature block files in the resulting JAR file, one\n-pair for each signature.\n-In the previous example, the output JAR file includes files with the\n-following names:\n-.IP\n-.nf\n-\\f[CB]\n-SUSAN.SF\n-SUSAN.RSA\n-KEVIN.SF\n-KEVIN.RSA\n-\\f[R]\n-.fi\n-.SH OPTIONS FOR JARSIGNER\n-.PP\n-The following sections describe the options for the \\f[V]jarsigner\\f[R].\n-Be aware of the following standards:\n-.IP \\[bu] 2\n-All option names are preceded by a hyphen sign (-).\n-.IP \\[bu] 2\n-The options can be provided in any order.\n-.IP \\[bu] 2\n-Items that are in italics or underlined (option values) represent the\n-actual values that must be supplied.\n-.IP \\[bu] 2\n-The \\f[V]-storepass\\f[R], \\f[V]-keypass\\f[R], \\f[V]-sigfile\\f[R],\n-\\f[V]-sigalg\\f[R], \\f[V]-digestalg\\f[R], \\f[V]-signedjar\\f[R], and\n-TSA-related options are only relevant when signing a JAR file; they\n-aren\\[aq]t relevant when verifying a signed JAR file.\n-The \\f[V]-keystore\\f[R] option is relevant for signing and verifying a\n-JAR file.\n-In addition, aliases are specified when signing and verifying a JAR\n-file.\n-.TP\n-\\f[V]-keystore\\f[R] \\f[I]url\\f[R]\n-Specifies the URL that tells the keystore location.\n-This defaults to the file \\f[V].keystore\\f[R] in the user\\[aq]s home\n-directory, as determined by the \\f[V]user.home\\f[R] system property.\n-.RS\n-.PP\n-A keystore is required when signing.\n-You must explicitly specify a keystore when the default keystore\n-doesn\\[aq]t exist or if you want to use one other than the default.\n-.PP\n-A keystore isn\\[aq]t required when verifying, but if one is specified or\n-the default exists and the \\f[V]-verbose\\f[R] option was also specified,\n-then additional information is output regarding whether or not any of\n-the certificates used to verify the JAR file are contained in that\n-keystore.\n-.PP\n-The \\f[V]-keystore\\f[R] argument can be a file name and path\n-specification rather than a URL, in which case it is treated the same as\n-a file: URL, for example, the following are equivalent:\n-.IP \\[bu] 2\n-\\f[V]-keystore\\f[R] \\f[I]filePathAndName\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-keystore file:\\f[R]\\f[I]filePathAndName\\f[R]\n-.PP\n-If the Sun PKCS #11 provider was configured in the\n-\\f[V]java.security\\f[R] security properties file (located in the\n-JDK\\[aq]s \\f[V]$JAVA_HOME\/conf\/security\\f[R] directory), then the\n-\\f[V]keytool\\f[R] and \\f[V]jarsigner\\f[R] tools can operate on the PKCS\n-#11 token by specifying these options:\n-.RS\n-.PP\n-\\f[V]-keystore NONE -storetype PKCS11\\f[R]\n-.RE\n-.PP\n-For example, the following command lists the contents of the configured\n-PKCS#11 token:\n-.RS\n-.PP\n-\\f[V]keytool -keystore NONE -storetype PKCS11 -list\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-storepass\\f[R] [\\f[V]:env\\f[R] | \\f[V]:file\\f[R]] \\f[I]argument\\f[R]\n-Specifies the password that is required to access the keystore.\n-This is only needed when signing (not verifying) a JAR file.\n-In that case, if a \\f[V]-storepass\\f[R] option isn\\[aq]t provided at the\n-command line, then the user is prompted for the password.\n-.RS\n-.PP\n-If the modifier \\f[V]env\\f[R] or \\f[V]file\\f[R] isn\\[aq]t specified,\n-then the password has the value \\f[V]argument\\f[R].\n-Otherwise, the password is retrieved as follows:\n-.IP \\[bu] 2\n-\\f[V]env\\f[R]: Retrieve the password from the environment variable named\n-\\f[I]argument\\f[R].\n-.IP \\[bu] 2\n-\\f[V]file\\f[R]: Retrieve the password from the file named\n-\\f[I]argument\\f[R].\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The password shouldn\\[aq]t be specified on the command line or in a\n-script unless it is for testing purposes, or you are on a secure system.\n-.RE\n-.TP\n-\\f[V]-storetype\\f[R] \\f[I]storetype\\f[R]\n-Specifies the type of keystore to be instantiated.\n-The default keystore type is the one that is specified as the value of\n-the \\f[V]keystore.type\\f[R] property in the security properties file,\n-which is returned by the static \\f[V]getDefaultType\\f[R] method in\n-\\f[V]java.security.KeyStore\\f[R].\n-.RS\n-.PP\n-The PIN for a PKCS #11 token can also be specified with the\n-\\f[V]-storepass\\f[R] option.\n-If none is specified, then the \\f[V]keytool\\f[R] and \\f[V]jarsigner\\f[R]\n-commands prompt for the token PIN.\n-If the token has a protected authentication path (such as a dedicated\n-PIN-pad or a biometric reader), then the \\f[V]-protected\\f[R] option\n-must be specified and no password options can be specified.\n-.RE\n-.TP\n-\\f[V]-keypass\\f[R] [\\f[V]:env\\f[R] | \\f[V]:file\\f[R]] \\f[I]argument\\f[R] \\f[V]-certchain\\f[R] \\f[I]file\\f[R]\n-Specifies the password used to protect the private key of the keystore\n-entry addressed by the alias specified on the command line.\n-The password is required when using \\f[V]jarsigner\\f[R] to sign a JAR\n-file.\n-If no password is provided on the command line, and the required\n-password is different from the store password, then the user is prompted\n-for it.\n-.RS\n-.PP\n-If the modifier \\f[V]env\\f[R] or \\f[V]file\\f[R] isn\\[aq]t specified,\n-then the password has the value \\f[V]argument\\f[R].\n-Otherwise, the password is retrieved as follows:\n-.IP \\[bu] 2\n-\\f[V]env\\f[R]: Retrieve the password from the environment variable named\n-\\f[I]argument\\f[R].\n-.IP \\[bu] 2\n-\\f[V]file\\f[R]: Retrieve the password from the file named\n-\\f[I]argument\\f[R].\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The password shouldn\\[aq]t be specified on the command line or in a\n-script unless it is for testing purposes, or you are on a secure system.\n-.RE\n-.TP\n-\\f[V]-certchain\\f[R] \\f[I]file\\f[R]\n-Specifies the certificate chain to be used when the certificate chain\n-associated with the private key of the keystore entry that is addressed\n-by the alias specified on the command line isn\\[aq]t complete.\n-This can happen when the keystore is located on a hardware token where\n-there isn\\[aq]t enough capacity to hold a complete certificate chain.\n-The file can be a sequence of concatenated X.509 certificates, or a\n-single PKCS#7 formatted data block, either in binary encoding format or\n-in printable encoding format (also known as Base64 encoding) as defined\n-by \\f[B]Internet RFC 1421 Certificate Encoding Standard\\f[R]\n-[http:\/\/tools.ietf.org\/html\/rfc1421].\n-.TP\n-\\f[V]-sigfile\\f[R] \\f[I]file\\f[R]\n-Specifies the base file name to be used for the generated \\f[V].SF\\f[R]\n-and signature block files.\n-For example, if file is \\f[V]DUKESIGN\\f[R], then the generated\n-\\f[V].SF\\f[R] and signature block files are named \\f[V]DUKESIGN.SF\\f[R]\n-and \\f[V]DUKESIGN.RSA\\f[R], and placed in the \\f[V]META-INF\\f[R]\n-directory of the signed JAR file.\n-.RS\n-.PP\n-The characters in the file must come from the set \\f[V]a-zA-Z0-9_-\\f[R].\n-Only letters, numbers, underscore, and hyphen characters are allowed.\n-All lowercase characters are converted to uppercase for the\n-\\f[V].SF\\f[R] and signature block file names.\n-.PP\n-If no \\f[V]-sigfile\\f[R] option appears on the command line, then the\n-base file name for the \\f[V].SF\\f[R] and signature block files is the\n-first 8 characters of the alias name specified on the command line, all\n-converted to upper case.\n-If the alias name has fewer than 8 characters, then the full alias name\n-is used.\n-If the alias name contains any characters that aren\\[aq]t valid in a\n-signature file name, then each such character is converted to an\n-underscore (_) character to form the file name.\n-.RE\n-.TP\n-\\f[V]-signedjar\\f[R] \\f[I]file\\f[R]\n-Specifies the name of signed JAR file.\n-.TP\n-\\f[V]-digestalg\\f[R] \\f[I]algorithm\\f[R]\n-Specifies the name of the message digest algorithm to use when digesting\n-the entries of a JAR file.\n-.RS\n-.PP\n-For a list of standard message digest algorithm names, see the Java\n-Security Standard Algorithm Names Specification.\n-.PP\n-If this option isn\\[aq]t specified, then \\f[V]SHA-384\\f[R] is used.\n-There must either be a statically installed provider supplying an\n-implementation of the specified algorithm or the user must specify one\n-with the \\f[V]-addprovider\\f[R] or \\f[V]-providerClass\\f[R] options;\n-otherwise, the command will not succeed.\n-.RE\n-.TP\n-\\f[V]-sigalg\\f[R] \\f[I]algorithm\\f[R]\n-Specifies the name of the signature algorithm to use to sign the JAR\n-file.\n-.RS\n-.PP\n-This algorithm must be compatible with the private key used to sign the\n-JAR file.\n-If this option isn\\[aq]t specified, then use a default algorithm\n-matching the private key as described in the \\f[B]Supported\n-Algorithms\\f[R] section.\n-There must either be a statically installed provider supplying an\n-implementation of the specified algorithm or you must specify one with\n-the \\f[V]-addprovider\\f[R] or \\f[V]-providerClass\\f[R] option;\n-otherwise, the command doesn\\[aq]t succeed.\n-.PP\n-For a list of standard signature algorithm names, see the Java Security\n-Standard Algorithm Names Specification.\n-.RE\n-.TP\n-\\f[V]-verify\\f[R]\n-Verifies a signed JAR file.\n-.TP\n-\\f[V]-verbose\\f[R][\\f[V]:\\f[R]\\f[I]suboptions\\f[R]]\n-When the \\f[V]-verbose\\f[R] option appears on the command line, it\n-indicates that the \\f[V]jarsigner\\f[R] use the verbose mode when signing\n-or verifying with the suboptions determining how much information is\n-shown.\n-This causes the , which causes \\f[V]jarsigner\\f[R] to output extra\n-information about the progress of the JAR signing or verification.\n-The \\f[I]suboptions\\f[R] can be \\f[V]all\\f[R], \\f[V]grouped\\f[R], or\n-\\f[V]summary\\f[R].\n-.RS\n-.PP\n-If the \\f[V]-certs\\f[R] option is also specified, then the default mode\n-(or suboption \\f[V]all\\f[R]) displays each entry as it is being\n-processed, and after that, the certificate information for each signer\n-of the JAR file.\n-.PP\n-If the \\f[V]-certs\\f[R] and the \\f[V]-verbose:grouped\\f[R] suboptions\n-are specified, then entries with the same signer info are grouped and\n-displayed together with their certificate information.\n-.PP\n-If \\f[V]-certs\\f[R] and the \\f[V]-verbose:summary\\f[R] suboptions are\n-specified, then entries with the same signer information are grouped and\n-displayed together with their certificate information.\n-.PP\n-Details about each entry are summarized and displayed as \\f[I]one entry\n-(and more)\\f[R].\n-See \\f[B]Example of Verifying a Signed JAR File\\f[R] and \\f[B]Example of\n-Verification with Certificate Information\\f[R].\n-.RE\n-.TP\n-\\f[V]-certs\\f[R]\n-If the \\f[V]-certs\\f[R] option appears on the command line with the\n-\\f[V]-verify\\f[R] and \\f[V]-verbose\\f[R] options, then the output\n-includes certificate information for each signer of the JAR file.\n-This information includes the name of the type of certificate (stored in\n-the signature block file) that certifies the signer\\[aq]s public key,\n-and if the certificate is an X.509 certificate (an instance of the\n-\\f[V]java.security.cert.X509Certificate\\f[R]), then the distinguished\n-name of the signer.\n-.RS\n-.PP\n-The keystore is also examined.\n-If no keystore value is specified on the command line, then the default\n-keystore file (if any) is checked.\n-If the public key certificate for a signer matches an entry in the\n-keystore, then the alias name for the keystore entry for that signer is\n-displayed in parentheses.\n-.RE\n-.TP\n-\\f[V]-revCheck\\f[R]\n-This option enables revocation checking of certificates when signing or\n-verifying a JAR file.\n-The \\f[V]jarsigner\\f[R] command attempts to make network connections to\n-fetch OCSP responses and CRLs if the \\f[V]-revCheck\\f[R] option is\n-specified on the command line.\n-Note that revocation checks are not enabled unless this option is\n-specified.\n-.TP\n-\\f[V]-tsa\\f[R] \\f[I]url\\f[R]\n-If \\f[V]-tsa http:\/\/example.tsa.url\\f[R] appears on the command line\n-when signing a JAR file then a time stamp is generated for the\n-signature.\n-The URL, \\f[V]http:\/\/example.tsa.url\\f[R], identifies the location of\n-the Time Stamping Authority (TSA) and overrides any URL found with the\n-\\f[V]-tsacert\\f[R] option.\n-The \\f[V]-tsa\\f[R] option doesn\\[aq]t require the TSA public key\n-certificate to be present in the keystore.\n-.RS\n-.PP\n-To generate the time stamp, \\f[V]jarsigner\\f[R] communicates with the\n-TSA with the Time-Stamp Protocol (TSP) defined in RFC 3161.\n-When successful, the time stamp token returned by the TSA is stored with\n-the signature in the signature block file.\n-.RE\n-.TP\n-\\f[V]-tsacert\\f[R] \\f[I]alias\\f[R]\n-When \\f[V]-tsacert\\f[R] \\f[I]alias\\f[R] appears on the command line when\n-signing a JAR file, a time stamp is generated for the signature.\n-The alias identifies the TSA public key certificate in the keystore that\n-is in effect.\n-The entry\\[aq]s certificate is examined for a Subject Information Access\n-extension that contains a URL identifying the location of the TSA.\n-.RS\n-.PP\n-The TSA public key certificate must be present in the keystore when\n-using the \\f[V]-tsacert\\f[R] option.\n-.RE\n-.TP\n-\\f[V]-tsapolicyid\\f[R] \\f[I]policyid\\f[R]\n-Specifies the object identifier (OID) that identifies the policy ID to\n-be sent to the TSA server.\n-If this option isn\\[aq]t specified, no policy ID is sent and the TSA\n-server will choose a default policy ID.\n-.RS\n-.PP\n-Object identifiers are defined by X.696, which is an ITU\n-Telecommunication Standardization Sector (ITU-T) standard.\n-These identifiers are typically period-separated sets of non-negative\n-digits like \\f[V]1.2.3.4\\f[R], for example.\n-.RE\n-.TP\n-\\f[V]-tsadigestalg\\f[R] \\f[I]algorithm\\f[R]\n-Specifies the message digest algorithm that is used to generate the\n-message imprint to be sent to the TSA server.\n-If this option isn\\[aq]t specified, SHA-384 will be used.\n-.RS\n-.PP\n-See \\f[B]Supported Algorithms\\f[R].\n-.PP\n-For a list of standard message digest algorithm names, see the Java\n-Security Standard Algorithm Names Specification.\n-.RE\n-.TP\n-\\f[V]-internalsf\\f[R]\n-In the past, the signature block file generated when a JAR file was\n-signed included a complete encoded copy of the \\f[V].SF\\f[R] file\n-(signature file) also generated.\n-This behavior has been changed.\n-To reduce the overall size of the output JAR file, the signature block\n-file by default doesn\\[aq]t contain a copy of the \\f[V].SF\\f[R] file\n-anymore.\n-If \\f[V]-internalsf\\f[R] appears on the command line, then the old\n-behavior is utilized.\n-This option is useful for testing.\n-In practice, don\\[aq]t use the \\f[V]-internalsf\\f[R] option because it\n-incurs higher overhead.\n-.TP\n-\\f[V]-sectionsonly\\f[R]\n-If the \\f[V]-sectionsonly\\f[R] option appears on the command line, then\n-the \\f[V].SF\\f[R] file (signature file) generated when a JAR file is\n-signed doesn\\[aq]t include a header that contains a hash of the whole\n-manifest file.\n-It contains only the information and hashes related to each individual\n-source file included in the JAR file.\n-See Signature File.\n-.RS\n-.PP\n-By default, this header is added, as an optimization.\n-When the header is present, whenever the JAR file is verified, the\n-verification can first check to see whether the hash in the header\n-matches the hash of the whole manifest file.\n-When there is a match, verification proceeds to the next step.\n-When there is no match, it is necessary to do a less optimized\n-verification that the hash in each source file information section in\n-the \\f[V].SF\\f[R] file equals the hash of its corresponding section in\n-the manifest file.\n-See \\f[B]JAR File Verification\\f[R].\n-.PP\n-The \\f[V]-sectionsonly\\f[R] option is primarily used for testing.\n-It shouldn\\[aq]t be used other than for testing because using it incurs\n-higher overhead.\n-.RE\n-.TP\n-\\f[V]-protected\\f[R]\n-Values can be either \\f[V]true\\f[R] or \\f[V]false\\f[R].\n-Specify \\f[V]true\\f[R] when a password must be specified through a\n-protected authentication path such as a dedicated PIN reader.\n-.TP\n-\\f[V]-providerName\\f[R] \\f[I]providerName\\f[R]\n-If more than one provider was configured in the \\f[V]java.security\\f[R]\n-security properties file, then you can use the \\f[V]-providerName\\f[R]\n-option to target a specific provider instance.\n-The argument to this option is the name of the provider.\n-.RS\n-.PP\n-For the Oracle PKCS #11 provider, \\f[I]providerName\\f[R] is of the form\n-\\f[V]SunPKCS11-\\f[R]\\f[I]TokenName\\f[R], where \\f[I]TokenName\\f[R] is\n-the name suffix that the provider instance has been configured with, as\n-detailed in the configuration attributes table.\n-For example, the following command lists the contents of the\n-\\f[V]PKCS #11\\f[R] keystore provider instance with name suffix\n-\\f[V]SmartCard\\f[R]:\n-.RS\n-.PP\n-\\f[V]jarsigner -keystore NONE -storetype PKCS11 -providerName SunPKCS11-SmartCard -list\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-addprovider\\f[R] \\f[I]name\\f[R] [\\f[V]-providerArg\\f[R] \\f[I]arg\\f[R]]\n-Adds a security provider by name (such as SunPKCS11) and an optional\n-configure argument.\n-The value of the security provider is the name of a security provider\n-that is defined in a module.\n-.RS\n-.PP\n-Used with the \\f[V]-providerArg ConfigFilePath\\f[R] option, the\n-\\f[V]keytool\\f[R] and \\f[V]jarsigner\\f[R] tools install the provider\n-dynamically and use \\f[V]ConfigFilePath\\f[R] for the path to the token\n-configuration file.\n-The following example shows a command to list a \\f[V]PKCS #11\\f[R]\n-keystore when the Oracle PKCS #11 provider wasn\\[aq]t configured in the\n-security properties file.\n-.RS\n-.PP\n-\\f[V]jarsigner -keystore NONE -storetype PKCS11 -addprovider SunPKCS11 -providerArg \/mydir1\/mydir2\/token.config\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-providerClass\\f[R] \\f[I]provider-class-name\\f[R] [\\f[V]-providerArg\\f[R] \\f[I]arg\\f[R]]\n-Used to specify the name of cryptographic service provider\\[aq]s master\n-class file when the service provider isn\\[aq]t listed in the\n-\\f[V]java.security\\f[R] security properties file.\n-Adds a security provider by fully-qualified class name and an optional\n-configure argument.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The preferred way to load PKCS11 is by using modules.\n-See \\f[V]-addprovider\\f[R].\n-.RE\n-.TP\n-\\f[V]-providerPath\\f[R] \\f[I]classpath\\f[R]\n-Used to specify the classpath for providers specified by the\n-\\f[V]-providerClass\\f[R] option.\n-Multiple paths should be separated by the system-dependent\n-path-separator character.\n-.TP\n-\\f[V]-J\\f[R]\\f[I]javaoption\\f[R]\n-Passes through the specified \\f[I]javaoption\\f[R] string directly to the\n-Java interpreter.\n-The \\f[V]jarsigner\\f[R] command is a wrapper around the interpreter.\n-This option shouldn\\[aq]t contain any spaces.\n-It is useful for adjusting the execution environment or memory usage.\n-For a list of possible interpreter options, type \\f[V]java -h\\f[R] or\n-\\f[V]java -X\\f[R] at the command line.\n-.TP\n-\\f[V]-strict\\f[R]\n-During the signing or verifying process, the command may issue warning\n-messages.\n-If you specify this option, the exit code of the tool reflects the\n-severe warning messages that this command found.\n-See \\f[B]Errors and Warnings\\f[R].\n-.TP\n-\\f[V]-conf\\f[R] \\f[I]url\\f[R]\n-Specifies a pre-configured options file.\n-Read the \\f[B]keytool documentation\\f[R] for details.\n-The property keys supported are \\[dq]jarsigner.all\\[dq] for all actions,\n-\\[dq]jarsigner.sign\\[dq] for signing, and \\[dq]jarsigner.verify\\[dq] for\n-verification.\n-\\f[V]jarsigner\\f[R] arguments including the JAR file name and alias\n-name(s) cannot be set in this file.\n-.TP\n-\\f[V]-version\\f[R]\n-Prints the program version.\n-.SH ERRORS AND WARNINGS\n-.PP\n-During the signing or verifying process, the \\f[V]jarsigner\\f[R] command\n-may issue various errors or warnings.\n-.PP\n-If there is a failure, the \\f[V]jarsigner\\f[R] command exits with code\n-1.\n-If there is no failure, but there are one or more severe warnings, the\n-\\f[V]jarsigner\\f[R] command exits with code 0 when the \\f[V]-strict\\f[R]\n-option is \\f[B]not\\f[R] specified, or exits with the OR-value of the\n-warning codes when the \\f[V]-strict\\f[R] is specified.\n-If there is only informational warnings or no warning at all, the\n-command always exits with code 0.\n-.PP\n-For example, if a certificate used to sign an entry is expired and has a\n-KeyUsage extension that doesn\\[aq]t allow it to sign a file, the\n-\\f[V]jarsigner\\f[R] command exits with code 12 (=4+8) when the\n-\\f[V]-strict\\f[R] option is specified.\n-.PP\n-\\f[B]Note:\\f[R] Exit codes are reused because only the values from 0 to\n-255 are legal on Linux and macOS.\n-.PP\n-The following sections describes the names, codes, and descriptions of\n-the errors and warnings that the \\f[V]jarsigner\\f[R] command can issue.\n-.SH FAILURE\n-.PP\n-Reasons why the \\f[V]jarsigner\\f[R] command fails include (but\n-aren\\[aq]t limited to) a command line parsing error, the inability to\n-find a keypair to sign the JAR file, or the verification of a signed JAR\n-fails.\n-.TP\n-failure\n-Code 1.\n-The signing or verifying fails.\n-.SH SEVERE WARNINGS\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-Severe warnings are reported as errors if you specify the\n-\\f[V]-strict\\f[R] option.\n-.PP\n-Reasons why the \\f[V]jarsigner\\f[R] command issues a severe warning\n-include the certificate used to sign the JAR file has an error or the\n-signed JAR file has other problems.\n-.TP\n-hasExpiredCert\n-Code 4.\n-This JAR contains entries whose signer certificate has expired.\n-.TP\n-hasExpiredTsaCert\n-Code 4.\n-The timestamp has expired.\n-.TP\n-notYetValidCert\n-Code 4.\n-This JAR contains entries whose signer certificate isn\\[aq]t yet valid.\n-.TP\n-chainNotValidated\n-Code 4.\n-This JAR contains entries whose certificate chain isn\\[aq]t validated.\n-.TP\n-tsaChainNotValidated\n-Code 64.\n-The timestamp is invalid.\n-.TP\n-signerSelfSigned\n-Code 4.\n-This JAR contains entries whose signer certificate is self signed.\n-.TP\n-disabledAlg\n-Code 4.\n-An algorithm used is considered a security risk and is disabled.\n-.TP\n-badKeyUsage\n-Code 8.\n-This JAR contains entries whose signer certificate\\[aq]s KeyUsage\n-extension doesn\\[aq]t allow code signing.\n-.TP\n-badExtendedKeyUsage\n-Code 8.\n-This JAR contains entries whose signer certificate\\[aq]s\n-ExtendedKeyUsage extension doesn\\[aq]t allow code signing.\n-.TP\n-badNetscapeCertType\n-Code 8.\n-This JAR contains entries whose signer certificate\\[aq]s\n-NetscapeCertType extension doesn\\[aq]t allow code signing.\n-.TP\n-hasUnsignedEntry\n-Code 16.\n-This JAR contains unsigned entries which haven\\[aq]t been\n-integrity-checked.\n-.TP\n-notSignedByAlias\n-Code 32.\n-This JAR contains signed entries which aren\\[aq]t signed by the\n-specified alias(es).\n-.TP\n-aliasNotInStore\n-Code 32.\n-This JAR contains signed entries that aren\\[aq]t signed by alias in this\n-keystore.\n-.TP\n-tsaChainNotValidated\n-Code 64.\n-This JAR contains entries whose TSA certificate chain is invalid.\n-.SH INFORMATIONAL WARNINGS\n-.PP\n-Informational warnings include those that aren\\[aq]t errors but regarded\n-as bad practice.\n-They don\\[aq]t have a code.\n-.TP\n-extraAttributesDetected\n-The POSIX file permissions and\/or symlink attributes are detected during\n-signing or verifying a JAR file.\n-The \\f[V]jarsigner\\f[R] tool preserves these attributes in the newly\n-signed file but warns that these attributes are unsigned and not\n-protected by the signature.\n-.TP\n-hasExpiringCert\n-This JAR contains entries whose signer certificate expires within six\n-months.\n-.TP\n-hasExpiringTsaCert\n-The timestamp will expire within one year on \\f[V]YYYY-MM-DD\\f[R].\n-.TP\n-legacyAlg\n-An algorithm used is considered a security risk but not disabled.\n-.TP\n-noTimestamp\n-This JAR contains signatures that doesn\\[aq]t include a timestamp.\n-Without a timestamp, users may not be able to validate this JAR file\n-after the signer certificate\\[aq]s expiration date\n-(\\f[V]YYYY-MM-DD\\f[R]) or after any future revocation date.\n-.SH EXAMPLE OF SIGNING A JAR FILE\n-.PP\n-Use the following command to sign \\f[V]bundle.jar\\f[R] with the private\n-key of a user whose keystore alias is \\f[V]jane\\f[R] in a keystore named\n-\\f[V]mystore\\f[R] in the \\f[V]working\\f[R] directory and name the signed\n-JAR file \\f[V]sbundle.jar\\f[R]:\n-.RS\n-.PP\n-\\f[V]jarsigner -keystore \/working\/mystore -storepass\\f[R]\n-\\f[I]keystore_password\\f[R] \\f[V]-keypass\\f[R]\n-\\f[I]private_key_password\\f[R]\n-\\f[V]-signedjar sbundle.jar bundle.jar jane\\f[R]\n-.RE\n-.PP\n-There is no \\f[V]-sigfile\\f[R] specified in the previous command so the\n-generated \\f[V].SF\\f[R] and signature block files to be placed in the\n-signed JAR file have default names based on the alias name.\n-They are named \\f[V]JANE.SF\\f[R] and \\f[V]JANE.RSA\\f[R].\n-.PP\n-If you want to be prompted for the store password and the private key\n-password, then you could shorten the previous command to the following:\n-.RS\n-.PP\n-\\f[V]jarsigner -keystore \/working\/mystore -signedjar sbundle.jar bundle.jar jane\\f[R]\n-.RE\n-.PP\n-If the \\f[V]keystore\\f[R] is the default \\f[V]keystore\\f[R]\n-(\\f[V].keystore\\f[R] in your home directory), then you don\\[aq]t need to\n-specify a \\f[V]keystore\\f[R], as follows:\n-.RS\n-.PP\n-\\f[V]jarsigner -signedjar sbundle.jar bundle.jar jane\\f[R]\n-.RE\n-.PP\n-If you want the signed JAR file to overwrite the input JAR file\n-(\\f[V]bundle.jar\\f[R]), then you don\\[aq]t need to specify a\n-\\f[V]-signedjar\\f[R] option, as follows:\n-.RS\n-.PP\n-\\f[V]jarsigner bundle.jar jane\\f[R]\n-.RE\n-.SH EXAMPLE OF VERIFYING A SIGNED JAR FILE\n-.PP\n-To verify a signed JAR file to ensure that the signature is valid and\n-the JAR file wasn\\[aq]t been tampered with, use a command such as the\n-following:\n-.RS\n-.PP\n-\\f[V]jarsigner -verify ButtonDemo.jar\\f[R]\n-.RE\n-.PP\n-When the verification is successful, \\f[V]jar verified\\f[R] is\n-displayed.\n-Otherwise, an error message is displayed.\n-You can get more information when you use the \\f[V]-verbose\\f[R] option.\n-A sample use of \\f[V]jarsigner\\f[R] with the \\f[V]-verbose\\f[R] option\n-follows:\n-.IP\n-.nf\n-\\f[CB]\n-jarsigner -verify -verbose ButtonDemo.jar\n-\n-s       866 Tue Sep 12 20:08:48 EDT 2017 META-INF\/MANIFEST.MF\n-        825 Tue Sep 12 20:08:48 EDT 2017 META-INF\/ORACLE_C.SF\n-       7475 Tue Sep 12 20:08:48 EDT 2017 META-INF\/ORACLE_C.RSA\n-          0 Tue Sep 12 20:07:54 EDT 2017 META-INF\/\n-          0 Tue Sep 12 20:07:16 EDT 2017 components\/\n-          0 Tue Sep 12 20:07:16 EDT 2017 components\/images\/\n-sm      523 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo$1.class\n-sm     3440 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo.class\n-sm     2346 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo.jnlp\n-sm      172 Tue Sep 12 20:07:16 EDT 2017 components\/images\/left.gif\n-sm      235 Tue Sep 12 20:07:16 EDT 2017 components\/images\/middle.gif\n-sm      172 Tue Sep 12 20:07:16 EDT 2017 components\/images\/right.gif\n-\n-  s = signature was verified\n-  m = entry is listed in manifest\n-  k = at least one certificate was found in keystore\n-\n-- Signed by \\[dq]CN=\\[dq]Oracle America, Inc.\\[dq], OU=Software Engineering, O=\\[dq]Oracle America, Inc.\\[dq], L=Redwood City, ST=California, C=US\\[dq]\n-    Digest algorithm: SHA-256\n-    Signature algorithm: SHA256withRSA, 2048-bit key\n-  Timestamped by \\[dq]CN=Symantec Time Stamping Services Signer - G4, O=Symantec Corporation, C=US\\[dq] on Tue Sep 12 20:08:49 UTC 2017\n-    Timestamp digest algorithm: SHA-1\n-    Timestamp signature algorithm: SHA1withRSA, 2048-bit key\n-\n-jar verified.\n-\n-The signer certificate expired on 2018-02-01. However, the JAR will be valid until the timestamp expires on 2020-12-29.\n-\\f[R]\n-.fi\n-.SH EXAMPLE OF VERIFICATION WITH CERTIFICATE INFORMATION\n-.PP\n-If you specify the \\f[V]-certs\\f[R] option with the \\f[V]-verify\\f[R]\n-and \\f[V]-verbose\\f[R] options, then the output includes certificate\n-information for each signer of the JAR file.\n-The information includes the certificate type, the signer distinguished\n-name information (when it is an X.509 certificate), and in parentheses,\n-the keystore alias for the signer when the public key certificate in the\n-JAR file matches the one in a keystore entry, for example:\n-.IP\n-.nf\n-\\f[CB]\n-jarsigner -keystore $JAVA_HOME\/lib\/security\/cacerts -verify -verbose -certs ButtonDemo.jar\n-\n-s k     866 Tue Sep 12 20:08:48 EDT 2017 META-INF\/MANIFEST.MF\n-\n-      >>> Signer\n-      X.509, CN=\\[dq]Oracle America, Inc.\\[dq], OU=Software Engineering, O=\\[dq]Oracle America, Inc.\\[dq], L=Redwood City, ST=California, C=US\n-      [certificate is valid from 2017-01-30, 7:00 PM to 2018-02-01, 6:59 PM]\n-      X.509, CN=Symantec Class 3 SHA256 Code Signing CA, OU=Symantec Trust Network, O=Symantec Corporation, C=US\n-      [certificate is valid from 2013-12-09, 7:00 PM to 2023-12-09, 6:59 PM]\n-      X.509, CN=VeriSign Class 3 Public Primary Certification Authority - G5, OU=\\[dq](c) 2006 VeriSign, Inc. - For authorized use only\\[dq], OU=VeriSign Trust Network, O=\\[dq]VeriSign, Inc.\\[dq], C=US (verisignclass3g5ca [jdk])\n-      [trusted certificate]\n-      >>> TSA\n-      X.509, CN=Symantec Time Stamping Services Signer - G4, O=Symantec Corporation, C=US\n-      [certificate is valid from 2012-10-17, 8:00 PM to 2020-12-29, 6:59 PM]\n-      X.509, CN=Symantec Time Stamping Services CA - G2, O=Symantec Corporation, C=US\n-      [certificate is valid from 2012-12-20, 7:00 PM to 2020-12-30, 6:59 PM]\n-\n-        825 Tue Sep 12 20:08:48 EDT 2017 META-INF\/ORACLE_C.SF\n-       7475 Tue Sep 12 20:08:48 EDT 2017 META-INF\/ORACLE_C.RSA\n-          0 Tue Sep 12 20:07:54 EDT 2017 META-INF\/\n-          0 Tue Sep 12 20:07:16 EDT 2017 components\/\n-          0 Tue Sep 12 20:07:16 EDT 2017 components\/images\/\n-smk     523 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo$1.class\n-\n-      [entry was signed on 2017-09-12, 4:08 PM]\n-      >>> Signer\n-      X.509, CN=\\[dq]Oracle America, Inc.\\[dq], OU=Software Engineering, O=\\[dq]Oracle America, Inc.\\[dq], L=Redwood City, ST=California, C=US\n-      [certificate is valid from 2017-01-30, 7:00 PM to 2018-02-01, 6:59 PM]\n-      X.509, CN=Symantec Class 3 SHA256 Code Signing CA, OU=Symantec Trust Network, O=Symantec Corporation, C=US\n-      [certificate is valid from 2013-12-09, 7:00 PM to 2023-12-09, 6:59 PM]\n-      X.509, CN=VeriSign Class 3 Public Primary Certification Authority - G5, OU=\\[dq](c) 2006 VeriSign, Inc. - For authorized use only\\[dq], OU=VeriSign Trust Network, O=\\[dq]VeriSign, Inc.\\[dq], C=US (verisignclass3g5ca [jdk])\n-      [trusted certificate]\n-      >>> TSA\n-      X.509, CN=Symantec Time Stamping Services Signer - G4, O=Symantec Corporation, C=US\n-      [certificate is valid from 2012-10-17, 8:00 PM to 2020-12-29, 6:59 PM]\n-      X.509, CN=Symantec Time Stamping Services CA - G2, O=Symantec Corporation, C=US\n-      [certificate is valid from 2012-12-20, 7:00 PM to 2020-12-30, 6:59 PM]\n-\n-smk    3440 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo.class\n-\\&...\n-smk    2346 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo.jnlp\n-\\&...\n-smk     172 Tue Sep 12 20:07:16 EDT 2017 components\/images\/left.gif\n-\\&...\n-smk     235 Tue Sep 12 20:07:16 EDT 2017 components\/images\/middle.gif\n-\\&...\n-smk     172 Tue Sep 12 20:07:16 EDT 2017 components\/images\/right.gif\n-\\&...\n-\n-  s = signature was verified\n-  m = entry is listed in manifest\n-  k = at least one certificate was found in keystore\n-\n-- Signed by \\[dq]CN=\\[dq]Oracle America, Inc.\\[dq], OU=Software Engineering, O=\\[dq]Oracle America, Inc.\\[dq], L=Redwood City, ST=California, C=US\\[dq]\n-    Digest algorithm: SHA-256\n-    Signature algorithm: SHA256withRSA, 2048-bit key\n-  Timestamped by \\[dq]CN=Symantec Time Stamping Services Signer - G4, O=Symantec Corporation, C=US\\[dq] on Tue Sep 12 20:08:49 UTC 2017\n-    Timestamp digest algorithm: SHA-1\n-    Timestamp signature algorithm: SHA1withRSA, 2048-bit key\n-\n-jar verified.\n-\n-The signer certificate expired on 2018-02-01. However, the JAR will be valid until the timestamp expires on 2020-12-29.\n-\\f[R]\n-.fi\n-.PP\n-If the certificate for a signer isn\\[aq]t an X.509 certificate, then\n-there is no distinguished name information.\n-In that case, just the certificate type and the alias are shown.\n-For example, if the certificate is a PGP certificate, and the alias is\n-\\f[V]bob\\f[R], then you would get: \\f[V]PGP, (bob)\\f[R].\n","filename":"src\/jdk.jartool\/share\/man\/jarsigner.1","additions":0,"deletions":1395,"binary":false,"changes":1395,"status":"deleted"},{"patch":"@@ -0,0 +1,1089 @@\n+---\n+# Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JARSIGNER(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jarsigner - sign and verify Java Archive (JAR) files\n+\n+## Synopsis\n+\n+`jarsigner` \\[*options*\\] *jar-file* *alias*\n+\n+`jarsigner` `-verify` \\[*options*\\] *jar-file* \\[*alias* ...\\]\n+\n+`jarsigner` `-version`\n+\n+*options*\n+:   The command-line options. See [Options for jarsigner].\n+\n+`-verify`\n+:   The `-verify` option can take zero or more keystore alias names after the\n+    JAR file name. When the `-verify` option is specified, the `jarsigner`\n+    command checks that the certificate used to verify each signed entry in the\n+    JAR file matches one of the keystore aliases. The aliases are defined in\n+    the keystore specified by `-keystore` or the default keystore.\n+\n+    If you also specify the `-strict` option, and the `jarsigner` command\n+    detects severe warnings, the message, \"jar verified, with signer errors\" is\n+    displayed.\n+\n+*jar-file*\n+:   The JAR file to be signed.\n+\n+    If you also specified the `-strict` option, and the `jarsigner` command\n+    detected severe warnings, the message, \"jar signed, with signer errors\" is\n+    displayed.\n+\n+*alias*\n+:   The aliases are defined in the keystore specified by `-keystore` or the\n+    default keystore.\n+\n+`-version`\n+:   The `-version` option prints the program version of `jarsigner`.\n+\n+## Description\n+\n+The `jarsigner` tool has two purposes:\n+\n+-   To sign Java Archive (JAR) files.\n+\n+-   To verify the signatures and integrity of signed JAR files.\n+\n+The JAR feature enables the packaging of class files, images, sounds, and other\n+digital data in a single file for faster and easier distribution. A tool named\n+`jar` enables developers to produce JAR files. (Technically, any ZIP file can\n+also be considered a JAR file, although when created by the `jar` command or\n+processed by the `jarsigner` command, JAR files also contain a\n+`META-INF\/MANIFEST.MF` file.)\n+\n+A digital signature is a string of bits that is computed from some data (the\n+data being signed) and the private key of an entity (a person, company, and so\n+on). Similar to a handwritten signature, a digital signature has many useful\n+characteristics:\n+\n+-   Its authenticity can be verified by a computation that uses the public key\n+    corresponding to the private key used to generate the signature.\n+\n+-   It can't be forged, assuming the private key is kept secret.\n+\n+-   It is a function of the data signed and thus can't be claimed to be the\n+    signature for other data as well.\n+\n+-   The signed data can't be changed. If the data is changed, then the\n+    signature can't be verified as authentic.\n+\n+To generate an entity's signature for a file, the entity must first have a\n+public\/private key pair associated with it and one or more certificates that\n+authenticate its public key. A certificate is a digitally signed statement from\n+one entity that says that the public key of another entity has a particular\n+value.\n+\n+The `jarsigner` command uses key and certificate information from a keystore to\n+generate digital signatures for JAR files. A keystore is a database of private\n+keys and their associated X.509 certificate chains that authenticate the\n+corresponding public keys. The `keytool` command is used to create and\n+administer keystores.\n+\n+The `jarsigner` command uses an entity's private key to generate a signature.\n+The signed JAR file contains, among other things, a copy of the certificate\n+from the keystore for the public key corresponding to the private key used to\n+sign the file. The `jarsigner` command can verify the digital signature of the\n+signed JAR file using the certificate inside it (in its signature block file).\n+\n+The `jarsigner` command can generate signatures that include a time stamp that\n+enables a systems or deployer to check whether the JAR file was signed while\n+the signing certificate was still valid.\n+\n+In addition, APIs allow applications to obtain the timestamp information.\n+\n+At this time, the `jarsigner` command can only sign JAR files created by the\n+`jar` command or zip files. JAR files are the same as zip files, except they\n+also have a `META-INF\/MANIFEST.MF` file. A `META-INF\/MANIFEST.MF` file is\n+created when the `jarsigner` command signs a zip file.\n+\n+The default `jarsigner` command behavior is to sign a JAR or zip file. Use the\n+`-verify` option to verify a signed JAR file.\n+\n+The `jarsigner` command also attempts to validate the signer's certificate\n+after signing or verifying. During validation, it checks the revocation\n+status of each certificate in the signer's certificate chain when the\n+`-revCheck` option is specified. If there is a validation error or any other\n+problem, the command generates warning messages. If you specify the `-strict`\n+option, then the command treats severe warnings as errors. See [Errors and\n+Warnings].\n+\n+## Keystore Aliases\n+\n+All keystore entities are accessed with unique aliases.\n+\n+When you use the `jarsigner` command to sign a JAR file, you must specify the\n+alias for the keystore entry that contains the private key needed to generate\n+the signature. If no output file is specified, it overwrites the original JAR\n+file with the signed JAR file.\n+\n+Keystores are protected with a password, so the store password must be\n+specified. You are prompted for it when you don't specify it on the command\n+line. Similarly, private keys are protected in a keystore with a password, so\n+the private key's password must be specified, and you are prompted for the\n+password when you don't specify it on the command line and it isn't the same as\n+the store password.\n+\n+## Keystore Location\n+\n+The `jarsigner` command has a `-keystore` option for specifying the URL of the\n+keystore to be used. The keystore is by default stored in a file named\n+`.keystore` in the user's home directory, as determined by the `user.home`\n+system property.\n+\n+**Linux and macOS:** `user.home` defaults to the user's home\n+directory.\n+\n+The input stream from the `-keystore` option is passed to the `KeyStore.load`\n+method. If `NONE` is specified as the URL, then a null stream is passed to the\n+`KeyStore.load` method. `NONE` should be specified when the `KeyStore` class\n+isn't file based, for example, when it resides on a hardware token device.\n+\n+## Keystore Implementation\n+\n+The `KeyStore` class provided in the `java.security` package supplies a number\n+of well-defined interfaces to access and modify the information in a keystore.\n+You can have multiple different concrete implementations, where each\n+implementation is for a particular type of keystore.\n+\n+Currently, there are two command-line tools that use keystore implementations\n+(`keytool` and `jarsigner`).\n+\n+The default keystore implementation is `PKCS12`. This is a cross platform\n+keystore based on the RSA PKCS12 Personal Information Exchange Syntax Standard.\n+This standard is primarily meant for storing or transporting a user's private\n+keys, certificates, and miscellaneous secrets. There is another built-in\n+implementation, provided by Oracle. It implements the keystore as a file with a\n+proprietary keystore type (format) named `JKS`. It protects each private key\n+with its individual password, and also protects the integrity of the entire\n+keystore with a (possibly different) password.\n+\n+Keystore implementations are provider-based, which means the application\n+interfaces supplied by the `KeyStore` class are implemented in terms of a\n+Service Provider Interface (SPI). There is a corresponding abstract\n+`KeystoreSpi` class, also in the `java.security package`, that defines the\n+Service Provider Interface methods that providers must implement. The term\n+provider refers to a package or a set of packages that supply a concrete\n+implementation of a subset of services that can be accessed by the Java\n+Security API. To provide a keystore implementation, clients must implement a\n+provider and supply a `KeystoreSpi` subclass implementation, as described in\n+[How to Implement a Provider in the Java Cryptography Architecture](\n+https:\/\/www.oracle.com\/pls\/topic\/lookup?ctx=en\/java\/javase&id=security_guide_implement_provider_jca).\n+\n+Applications can choose different types of keystore implementations from\n+different providers, with the `getInstance` factory method in the `KeyStore`\n+class. A keystore type defines the storage and data format of the keystore\n+information and the algorithms used to protect private keys in the keystore and\n+the integrity of the keystore itself. Keystore implementations of different\n+types aren't compatible.\n+\n+The `jarsigner` commands can read file-based keystores from any location that\n+can be specified using a URL. In addition, these commands can read\n+non-file-based keystores such as those provided by MSCAPI on Windows and PKCS11\n+on all platforms.\n+\n+For the `jarsigner` and `keytool` commands, you can specify a keystore type at\n+the command line with the `-storetype` option.\n+\n+If you don't explicitly specify a keystore type, then the tools choose a\n+keystore implementation based on the value of the `keystore.type` property\n+specified in the security properties file. The security properties file is\n+called `java.security`, and it resides in the JDK security properties\n+directory, `java.home\/conf\/security`.\n+\n+Each tool gets the `keystore.type` value and then examines all the installed\n+providers until it finds one that implements keystores of that type. It then\n+uses the keystore implementation from that provider.\n+\n+The `KeyStore` class defines a static method named `getDefaultType` that lets\n+applications retrieve the value of the `keystore.type` property. The following\n+line of code creates an instance of the default keystore type as specified in\n+the `keystore.type` property:\n+\n+>   `KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());`\n+\n+The default keystore type is `pkcs12`, which is a cross platform keystore based\n+on the RSA PKCS12 Personal Information Exchange Syntax Standard. This is\n+specified by the following line in the security properties file:\n+\n+>   `keystore.type=pkcs12`\n+\n+Case doesn't matter in keystore type designations. For example, `JKS` is the\n+same as `jks`.\n+\n+To have the tools utilize a keystore implementation other than the default, you\n+can change that line to specify a different keystore type. For example, if you\n+want to use the Oracle's `jks` keystore implementation, then change the line to\n+the following:\n+\n+>   `keystore.type=jks`\n+\n+## Supported Algorithms\n+\n+By default, the `jarsigner` command signs a JAR file using one of the following\n+algorithms and block file extensions depending on the type and size of\n+the private key:\n+\n+Table: Default Signature Algorithms and Block File Extensions\n+\n+keyalg      key size    default sigalg              block file extension\n+-------     --------    --------------              --------------------\n+DSA         any size    SHA256withDSA               .DSA\n+RSA         \\< 624      SHA256withRSA               .RSA\n+            \\<= 7680    SHA384withRSA\n+            \\> 7680     SHA512withRSA\n+EC          \\< 512      SHA384withECDSA             .EC\n+            \\>= 512     SHA512withECDSA\n+RSASSA-PSS  \\< 624      RSASSA-PSS (with SHA-256)   .RSA\n+            \\<= 7680    RSASSA-PSS (with SHA-384)\n+            \\> 7680     RSASSA-PSS (with SHA-512)\n+EdDSA       255         Ed25519                     .EC\n+            448         Ed448\n+-------     --------    --------------              ------\n+\n+* If an RSASSA-PSS key is encoded with parameters, then jarsigner will use the\n+same parameters in the signature. Otherwise, jarsigner will use parameters that\n+are determined by the size of the key as specified in the table above.\n+For example, an 3072-bit RSASSA-PSS key will use RSASSA-PSS as the signature\n+algorithm and SHA-384 as the hash and MGF1 algorithms.\n+\n+* If a key algorithm is not listed in this table, the `.DSA` extension\n+is used when signing a JAR file.\n+\n+These default signature algorithms can be overridden by using the `-sigalg`\n+option.\n+\n+The `jarsigner` command uses the `jdk.jar.disabledAlgorithms` and\n+`jdk.security.legacyAlgorithms` security properties to determine which\n+algorithms are considered a security risk. If the JAR file was signed\n+with any algorithms that are disabled, it will be treated as an unsigned JAR\n+file. If the JAR file was signed with any legacy algorithms, it will be treated\n+as signed with an informational warning to inform users that the legacy\n+algorithm will be disabled in a future update.\n+For detailed verification output, include `-J-Djava.security.debug=jar`.\n+The `jdk.jar.disabledAlgorithms` and `jdk.security.legacyAlgorithms`\n+security properties are defined in the `java.security` file (located in\n+the JDK's `$JAVA_HOME\/conf\/security` directory).\n+\n+**Note:**\n+\n+In order to improve out of the box security, default key size and signature\n+algorithm names are periodically updated to stronger values with each release\n+of the JDK. If interoperability with older releases of the JDK is important,\n+please make sure the defaults are supported by those releases, or alternatively\n+use the `-sigalg` option to override the default values at your own risk.\n+\n+## The Signed JAR File\n+\n+When the `jarsigner` command is used to sign a JAR file, the output signed JAR\n+file is exactly the same as the input JAR file, except that it has two\n+additional files placed in the META-INF directory:\n+\n+-   A signature file with an `.SF` extension\n+\n+-   A signature block file with a `.DSA`, `.RSA`, or `.EC` extension\n+\n+The base file names for these two files come from the value of the `-sigfile`\n+option. For example, when the option is `-sigfile MKSIGN`, the files are named\n+`MKSIGN.SF` and `MKSIGN.RSA`. In this document, we assume the signer always\n+uses an RSA key.\n+\n+If no `-sigfile` option appears on the command line, then the base file name\n+for the `.SF` and the signature block files is the first 8 characters of the alias name\n+specified on the command line, all converted to uppercase. If the alias name\n+has fewer than 8 characters, then the full alias name is used. If the alias\n+name contains any characters that aren't allowed in a signature file name, then\n+each such character is converted to an underscore (\\_) character in forming the\n+file name. Valid characters include letters, digits, underscores, and hyphens.\n+\n+## Signature File\n+\n+A signature file (`.SF` file) looks similar to the manifest file that is always\n+included in a JAR file when the `jarsigner` command is used to sign the file.\n+For each source file included in the JAR file, the `.SF` file has two lines,\n+such as in the manifest file, that list the following:\n+\n+-   File name\n+\n+-   Name of the digest algorithm (SHA)\n+\n+-   SHA digest value\n+\n+**Note:**\n+\n+The name of the digest algorithm (SHA) and the SHA digest value are on the same\n+line.\n+\n+In the manifest file, the SHA digest value for each source file is the digest\n+(hash) of the binary data in the source file. In the `.SF` file, the digest\n+value for a specified source file is the hash of the two lines in the manifest\n+file for the source file.\n+\n+The signature file, by default, includes a header with a hash of the whole\n+manifest file. The header also contains a hash of the manifest header. The\n+presence of the header enables verification optimization. See [JAR File\n+Verification].\n+\n+## Signature Block File\n+\n+The `.SF` file is signed and the signature is placed in the signature block\n+file. This file also contains, encoded inside it, the certificate or\n+certificate chain from the keystore that authenticates the public key\n+corresponding to the private key used for signing. The file has the extension\n+`.DSA`, `.RSA`, or `.EC`, depending on the key algorithm used. See the table\n+in [Supported Algorithms].\n+\n+## Signature Time Stamp\n+\n+The `jarsigner` command used with the following options generates and stores a\n+signature time stamp when signing a JAR file:\n+\n+-   `-tsa` *url*\n+\n+-   `-tsacert` *alias*\n+\n+-   `-tsapolicyid` *policyid*\n+\n+-   `-tsadigestalg` *algorithm*\n+\n+See [Options for jarsigner].\n+\n+## JAR File Verification\n+\n+A successful JAR file verification occurs when the signatures are valid, and\n+none of the files that were in the JAR file when the signatures were generated\n+have changed since then. JAR file verification involves the following steps:\n+\n+1.  Verify the signature of the `.SF` file.\n+\n+    The verification ensures that the signature stored in each signature block\n+    file was generated using the private key corresponding to the\n+    public key whose certificate (or certificate chain) also appears in the\n+    signature block file. It also ensures that the signature is a valid signature of the\n+    corresponding signature (`.SF`) file, and thus the `.SF` file wasn't\n+    tampered with.\n+\n+2.  Verify the digest listed in each entry in the `.SF` file with each\n+    corresponding section in the manifest.\n+\n+    The `.SF` file by default includes a header that contains a hash of the\n+    entire manifest file. When the header is present, the verification can\n+    check to see whether or not the hash in the header matches the hash of the\n+    manifest file. If there is a match, then verification proceeds to the next\n+    step.\n+\n+    If there is no match, then a less optimized verification is required to\n+    ensure that the hash in each source file information section in the `.SF`\n+    file equals the hash of its corresponding section in the manifest file. See\n+    Signature File.\n+\n+    One reason the hash of the manifest file that is stored in the `.SF` file\n+    header might not equal the hash of the current manifest file is that it\n+    might contain sections for newly added files after the file was signed. For\n+    example, suppose one or more files were added to the signed JAR file (using\n+    the `jar` tool) that already contains a signature and a `.SF` file. If the\n+    JAR file is signed again by a different signer, then the manifest file is\n+    changed (sections are added to it for the new files by the `jarsigner` tool)\n+    and a new `.SF` file is created, but the original `.SF` file is unchanged. A\n+    verification is still considered successful if none of the files that were\n+    in the JAR file when the original signature was generated have been changed\n+    since then. This is because the hashes in the non-header sections of the\n+    `.SF` file equal the hashes of the corresponding sections in the manifest\n+    file.\n+\n+3.  Read each file in the JAR file that has an entry in the `.SF` file. While\n+    reading, compute the file's digest and compare the result with the digest\n+    for this file in the manifest section. The digests should be the same or\n+    verification fails.\n+\n+    If any serious verification failures occur during the verification process,\n+    then the process is stopped and a security exception is thrown. The\n+    `jarsigner` command catches and displays the exception.\n+\n+4.  Check for disabled algorithm usage. See [Supported Algorithms].\n+\n+**Note:**\n+\n+You should read any addition warnings (or errors if you specified the `-strict`\n+option), as well as the content of the certificate (by specifying the\n+`-verbose` and `-certs` options) to determine if the signature can be trusted.\n+\n+## Multiple Signatures for a JAR File\n+\n+A JAR file can be signed by multiple people by running the `jarsigner` command\n+on the file multiple times and specifying the alias for a different person each\n+time, as follows:\n+\n+```\n+jarsigner myBundle.jar susan\n+jarsigner myBundle.jar kevin\n+```\n+\n+When a JAR file is signed multiple times, there are multiple `.SF` and signature\n+block files in the resulting JAR file, one pair for each signature. In the previous\n+example, the output JAR file includes files with the following names:\n+\n+```\n+SUSAN.SF\n+SUSAN.RSA\n+KEVIN.SF\n+KEVIN.RSA\n+```\n+\n+## Options for jarsigner\n+\n+The following sections describe the options for the `jarsigner`. Be aware of\n+the following standards:\n+\n+-   All option names are preceded by a hyphen sign (-).\n+\n+-   The options can be provided in any order.\n+\n+-   Items that are in italics or underlined (option values) represent the\n+    actual values that must be supplied.\n+\n+-   The `-storepass`, `-keypass`, `-sigfile`, `-sigalg`, `-digestalg`,\n+    `-signedjar`, and TSA-related options are only relevant when signing a JAR\n+    file; they aren't relevant when verifying a signed JAR file. The\n+    `-keystore` option is relevant for signing and verifying a JAR file. In\n+    addition, aliases are specified when signing and verifying a JAR file.\n+\n+`-keystore` *url*\n+:   Specifies the URL that tells the keystore location. This defaults to the\n+    file `.keystore` in the user's home directory, as determined by the\n+    `user.home` system property.\n+\n+    A keystore is required when signing. You must explicitly specify a keystore\n+    when the default keystore doesn't exist or if you want to use one other\n+    than the default.\n+\n+    A keystore isn't required when verifying, but if one is specified or the\n+    default exists and the `-verbose` option was also specified, then\n+    additional information is output regarding whether or not any of the\n+    certificates used to verify the JAR file are contained in that keystore.\n+\n+    The `-keystore` argument can be a file name and path specification rather\n+    than a URL, in which case it is treated the same as a file: URL, for\n+    example, the following are equivalent:\n+\n+    -   `-keystore` *filePathAndName*\n+\n+    -   `-keystore file:`*filePathAndName*\n+\n+    If the Sun PKCS \\#11 provider was configured in the `java.security`\n+    security properties file (located in the JDK's `$JAVA_HOME\/conf\/security`\n+    directory), then the `keytool` and `jarsigner` tools can operate on the\n+    PKCS \\#11 token by specifying these options:\n+\n+    >   `-keystore NONE -storetype PKCS11`\n+\n+    For example, the following command lists the contents of the configured\n+    PKCS\\#11 token:\n+\n+    >   `keytool -keystore NONE -storetype PKCS11 -list`\n+\n+`-storepass` \\[`:env` \\| `:file`\\] *argument*\n+:   Specifies the password that is required to access the keystore. This is\n+    only needed when signing (not verifying) a JAR file. In that case, if a\n+    `-storepass` option isn't provided at the command line, then the user is\n+    prompted for the password.\n+\n+    If the modifier `env` or `file` isn't specified, then the password has the\n+    value `argument`. Otherwise, the password is retrieved as follows:\n+\n+    -   `env`: Retrieve the password from the environment variable named\n+        *argument*.\n+\n+    -   `file`: Retrieve the password from the file named *argument*.\n+\n+    **Note:**\n+\n+    The password shouldn't be specified on the command line or in a script\n+    unless it is for testing purposes, or you are on a secure system.\n+\n+`-storetype` *storetype*\n+:   Specifies the type of keystore to be instantiated. The default keystore\n+    type is the one that is specified as the value of the `keystore.type`\n+    property in the security properties file, which is returned by the static\n+    `getDefaultType` method in `java.security.KeyStore`.\n+\n+    The PIN for a PKCS \\#11 token can also be specified with the `-storepass`\n+    option. If none is specified, then the `keytool` and `jarsigner` commands\n+    prompt for the token PIN. If the token has a protected authentication path\n+    (such as a dedicated PIN-pad or a biometric reader), then the `-protected`\n+    option must be specified and no password options can be specified.\n+\n+`-keypass` \\[`:env` \\| `:file`\\] *argument* `-certchain` *file*\n+:   Specifies the password used to protect the private key of the keystore\n+    entry addressed by the alias specified on the command line. The password is\n+    required when using `jarsigner` to sign a JAR file. If no password is\n+    provided on the command line, and the required password is different from\n+    the store password, then the user is prompted for it.\n+\n+    If the modifier `env` or `file` isn't specified, then the password has the\n+    value `argument`. Otherwise, the password is retrieved as follows:\n+\n+    -   `env`: Retrieve the password from the environment variable named\n+        *argument*.\n+\n+    -   `file`: Retrieve the password from the file named *argument*.\n+\n+    **Note:**\n+\n+    The password shouldn't be specified on the command line or in a script\n+    unless it is for testing purposes, or you are on a secure system.\n+\n+`-certchain` *file*\n+:   Specifies the certificate chain to be used when the certificate chain\n+    associated with the private key of the keystore entry that is addressed by\n+    the alias specified on the command line isn't complete. This can happen\n+    when the keystore is located on a hardware token where there isn't enough\n+    capacity to hold a complete certificate chain. The file can be a sequence\n+    of concatenated X.509 certificates, or a single PKCS\\#7 formatted data\n+    block, either in binary encoding format or in printable encoding format\n+    (also known as Base64 encoding) as defined by [Internet RFC 1421\n+    Certificate Encoding Standard](http:\/\/tools.ietf.org\/html\/rfc1421).\n+\n+`-sigfile` *file*\n+:   Specifies the base file name to be used for the generated `.SF` and signature block\n+    files. For example, if file is `DUKESIGN`, then the generated `.SF` and\n+    signature block files are named `DUKESIGN.SF` and `DUKESIGN.RSA`, and placed in the\n+    `META-INF` directory of the signed JAR file.\n+\n+    The characters in the file must come from the set `a-zA-Z0-9_-`. Only\n+    letters, numbers, underscore, and hyphen characters are allowed. All\n+    lowercase characters are converted to uppercase for the `.SF` and signature block\n+    file names.\n+\n+    If no `-sigfile` option appears on the command line, then the base file\n+    name for the `.SF` and signature block files is the first 8 characters of the alias\n+    name specified on the command line, all converted to upper case. If the\n+    alias name has fewer than 8 characters, then the full alias name is used.\n+    If the alias name contains any characters that aren't valid in a signature\n+    file name, then each such character is converted to an underscore (\\_)\n+    character to form the file name.\n+\n+`-signedjar` *file*\n+:   Specifies the name of signed JAR file.\n+\n+`-digestalg` *algorithm*\n+:   Specifies the name of the message digest algorithm to use when digesting\n+    the entries of a JAR file.\n+\n+    For a list of standard message digest algorithm names, see the Java Security\n+    Standard Algorithm Names Specification.\n+\n+    If this option isn't specified, then `SHA-384` is used. There must either be\n+    a statically installed provider supplying an implementation of the\n+    specified algorithm or the user must specify one with the `-addprovider` or\n+    `-providerClass` options; otherwise, the command will not succeed.\n+\n+`-sigalg` *algorithm*\n+:   Specifies the name of the signature algorithm to use to sign the JAR file.\n+\n+    This algorithm must be compatible with the private key used to sign the\n+    JAR file. If this option isn't specified, then use a default algorithm\n+    matching the private key as described in the [Supported Algorithms]\n+    section. There must either be a statically installed provider supplying an\n+    implementation of the specified algorithm or you must specify one with the\n+    `-addprovider` or `-providerClass` option; otherwise, the command doesn't\n+    succeed.\n+\n+    For a list of standard signature algorithm names, see the Java Security\n+    Standard Algorithm Names Specification.\n+\n+`-verify`\n+:   Verifies a signed JAR file.\n+\n+`-verbose`\\[`:`*suboptions*\\]\n+:   When the `-verbose` option appears on the command line, it indicates that\n+    the `jarsigner` use the verbose mode when signing or verifying with the\n+    suboptions determining how much information is shown. This causes the ,\n+    which causes `jarsigner` to output extra information about the progress of\n+    the JAR signing or verification. The *suboptions* can be `all`, `grouped`,\n+    or `summary`.\n+\n+    If the `-certs` option is also specified, then the default mode (or\n+    suboption `all`) displays each entry as it is being processed, and after\n+    that, the certificate information for each signer of the JAR file.\n+\n+    If the `-certs` and the `-verbose:grouped` suboptions are specified, then\n+    entries with the same signer info are grouped and displayed together with\n+    their certificate information.\n+\n+    If `-certs` and the `-verbose:summary` suboptions are specified, then\n+    entries with the same signer information are grouped and displayed together\n+    with their certificate information.\n+\n+    Details about each entry are summarized and displayed as *one entry (and\n+    more)*. See [Example of Verifying a Signed JAR File] and [Example of\n+    Verification with Certificate Information].\n+\n+`-certs`\n+:   If the `-certs` option appears on the command line with the `-verify` and\n+    `-verbose` options, then the output includes certificate information for\n+    each signer of the JAR file. This information includes the name of the type\n+    of certificate (stored in the signature block file) that certifies the signer's\n+    public key, and if the certificate is an X.509 certificate (an instance of\n+    the `java.security.cert.X509Certificate`), then the distinguished name of\n+    the signer.\n+\n+    The keystore is also examined. If no keystore value is specified on the\n+    command line, then the default keystore file (if any) is checked. If the\n+    public key certificate for a signer matches an entry in the keystore, then\n+    the alias name for the keystore entry for that signer is displayed in\n+    parentheses.\n+\n+`-revCheck`\n+:   This option enables revocation checking of certificates when signing or\n+    verifying a JAR file. The `jarsigner` command attempts to make network\n+    connections to fetch OCSP responses and CRLs if the `-revCheck` option\n+    is specified on the command line. Note that revocation checks are not\n+    enabled unless this option is specified.\n+\n+`-tsa` *url*\n+:   If `-tsa http:\/\/example.tsa.url` appears on the command line when signing a\n+    JAR file then a time stamp is generated for the signature. The URL,\n+    `http:\/\/example.tsa.url`, identifies the location of the Time Stamping\n+    Authority (TSA) and overrides any URL found with the `-tsacert` option. The\n+    `-tsa` option doesn't require the TSA public key certificate to be present\n+    in the keystore.\n+\n+    To generate the time stamp, `jarsigner` communicates with the TSA with the\n+    Time-Stamp Protocol (TSP) defined in RFC 3161. When successful, the time\n+    stamp token returned by the TSA is stored with the signature in the\n+    signature block file.\n+\n+`-tsacert` *alias*\n+:   When `-tsacert` *alias* appears on the command line when signing a JAR\n+    file, a time stamp is generated for the signature. The alias identifies the\n+    TSA public key certificate in the keystore that is in effect. The entry's\n+    certificate is examined for a Subject Information Access extension that\n+    contains a URL identifying the location of the TSA.\n+\n+    The TSA public key certificate must be present in the keystore when using\n+    the `-tsacert` option.\n+\n+`-tsapolicyid` *policyid*\n+:   Specifies the object identifier (OID) that identifies the policy ID to be\n+    sent to the TSA server. If this option isn't specified, no policy ID is\n+    sent and the TSA server will choose a default policy ID.\n+\n+    Object identifiers are defined by X.696, which is an ITU Telecommunication\n+    Standardization Sector (ITU-T) standard. These identifiers are typically\n+    period-separated sets of non-negative digits like `1.2.3.4`, for example.\n+\n+`-tsadigestalg` *algorithm*\n+:   Specifies the message digest algorithm that is used to generate the message\n+    imprint to be sent to the TSA server. If this option isn't specified,\n+    SHA-384 will be used.\n+\n+    See [Supported Algorithms].\n+\n+    For a list of standard message digest algorithm names, see the Java Security\n+    Standard Algorithm Names Specification.\n+\n+`-internalsf`\n+:   In the past, the signature block file generated when a JAR file\n+    was signed included a complete encoded copy of the `.SF` file (signature\n+    file) also generated. This behavior has been changed. To reduce the overall\n+    size of the output JAR file, the signature block file by default doesn't contain a\n+    copy of the `.SF` file anymore. If `-internalsf` appears on the command\n+    line, then the old behavior is utilized. This option is useful for testing.\n+    In practice, don't use the `-internalsf` option because it incurs higher\n+    overhead.\n+\n+`-sectionsonly`\n+:   If the `-sectionsonly` option appears on the command line, then the `.SF`\n+    file (signature file) generated when a JAR file is signed doesn't include a\n+    header that contains a hash of the whole manifest file. It contains only\n+    the information and hashes related to each individual source file included\n+    in the JAR file. See Signature File.\n+\n+    By default, this header is added, as an optimization. When the header is\n+    present, whenever the JAR file is verified, the verification can first\n+    check to see whether the hash in the header matches the hash of the whole\n+    manifest file. When there is a match, verification proceeds to the next\n+    step. When there is no match, it is necessary to do a less optimized\n+    verification that the hash in each source file information section in the\n+    `.SF` file equals the hash of its corresponding section in the manifest\n+    file. See [JAR File Verification].\n+\n+    The `-sectionsonly` option is primarily used for testing. It shouldn't be\n+    used other than for testing because using it incurs higher overhead.\n+\n+`-protected`\n+:   Values can be either `true` or `false`. Specify `true` when a password must\n+    be specified through a protected authentication path such as a dedicated\n+    PIN reader.\n+\n+`-providerName` *providerName*\n+:   If more than one provider was configured in the `java.security` security\n+    properties file, then you can use the `-providerName` option to target a\n+    specific provider instance. The argument to this option is the name of the\n+    provider.\n+\n+    For the Oracle PKCS \\#11 provider, *providerName* is of the form\n+    `SunPKCS11-`*TokenName*, where *TokenName* is the name suffix that the\n+    provider instance has been configured with, as detailed in the\n+    configuration attributes table. For example, the following command lists\n+    the contents of the `PKCS #11` keystore provider instance with name suffix\n+    `SmartCard`:\n+\n+    >   `jarsigner -keystore NONE -storetype PKCS11 -providerName\n+        SunPKCS11-SmartCard -list`\n+\n+`-addprovider` *name* \\[`-providerArg` *arg*\\]\n+:   Adds a security provider by name (such as SunPKCS11) and an optional\n+    configure argument. The value of the security provider is the name of a\n+    security provider that is defined in a module.\n+\n+    Used with the `-providerArg ConfigFilePath` option, the `keytool` and\n+    `jarsigner` tools install the provider dynamically and use `ConfigFilePath`\n+    for the path to the token configuration file. The following example shows a\n+    command to list a `PKCS #11` keystore when the Oracle PKCS \\#11 provider\n+    wasn't configured in the security properties file.\n+\n+    >   `jarsigner -keystore NONE -storetype PKCS11 -addprovider SunPKCS11\n+        -providerArg \/mydir1\/mydir2\/token.config`\n+\n+`-providerClass` *provider-class-name* \\[`-providerArg` *arg*\\]\n+:   Used to specify the name of cryptographic service provider's master class\n+    file when the service provider isn't listed in the `java.security` security\n+    properties file. Adds a security provider by fully-qualified class name and\n+    an optional configure argument.\n+\n+    **Note:**\n+\n+    The preferred way to load PKCS11 is by using modules. See `-addprovider`.\n+\n+`-providerPath` *classpath*\n+:   Used to specify the classpath for providers specified by the `-providerClass`\n+    option. Multiple paths should be separated by the system-dependent\n+    path-separator character.\n+\n+`-J`*javaoption*\n+:   Passes through the specified *javaoption* string directly to the Java\n+    interpreter. The `jarsigner` command is a wrapper around the interpreter.\n+    This option shouldn't contain any spaces. It is useful for adjusting the\n+    execution environment or memory usage. For a list of possible interpreter\n+    options, type `java -h` or `java -X` at the command line.\n+\n+`-strict`\n+:   During the signing or verifying process, the command may issue warning\n+    messages. If you specify this option, the exit code of the tool reflects\n+    the severe warning messages that this command found. See [Errors and\n+    Warnings].\n+\n+`-conf` *url*\n+:   Specifies a pre-configured options file. Read the\n+    [keytool documentation](keytool.html#pre-configured-options-file) for\n+    details. The property keys supported are \"jarsigner.all\" for all actions,\n+    \"jarsigner.sign\" for signing, and \"jarsigner.verify\" for verification.\n+    `jarsigner` arguments including the JAR file name and alias name(s) cannot\n+    be set in this file.\n+\n+`-version`\n+:   Prints the program version.\n+\n+## Errors and Warnings\n+\n+During the signing or verifying process, the `jarsigner` command may issue\n+various errors or warnings.\n+\n+If there is a failure, the `jarsigner` command exits with code 1. If there is\n+no failure, but there are one or more severe warnings, the `jarsigner` command\n+exits with code 0 when the `-strict` option is **not** specified, or exits with\n+the OR-value of the warning codes when the `-strict` is specified. If there is\n+only informational warnings or no warning at all, the command always exits with\n+code 0.\n+\n+For example, if a certificate used to sign an entry is expired and has a\n+KeyUsage extension that doesn't allow it to sign a file, the `jarsigner`\n+command exits with code 12 (=4+8) when the `-strict` option is specified.\n+\n+**Note:** Exit codes are reused because only the values from 0 to 255 are legal\n+on Linux and macOS.\n+\n+The following sections describes the names, codes, and descriptions of the\n+errors and warnings that the `jarsigner` command can issue.\n+\n+## Failure\n+\n+Reasons why the `jarsigner` command fails include (but aren't limited to) a\n+command line parsing error, the inability to find a keypair to sign the JAR\n+file, or the verification of a signed JAR fails.\n+\n+failure\n+:   Code 1. The signing or verifying fails.\n+\n+## Severe Warnings\n+\n+**Note:**\n+\n+Severe warnings are reported as errors if you specify the `-strict` option.\n+\n+Reasons why the `jarsigner` command issues a severe warning include the\n+certificate used to sign the JAR file has an error or the signed JAR file has\n+other problems.\n+\n+hasExpiredCert\n+:   Code 4. This JAR contains entries whose signer certificate has expired.\n+\n+hasExpiredTsaCert\n+:   Code 4. The timestamp has expired.\n+\n+notYetValidCert\n+:   Code 4. This JAR contains entries whose signer certificate isn't yet valid.\n+\n+chainNotValidated\n+:   Code 4. This JAR contains entries whose certificate chain isn't validated.\n+\n+tsaChainNotValidated\n+:   Code 64. The timestamp is invalid.\n+\n+signerSelfSigned\n+:   Code 4. This JAR contains entries whose signer certificate is self signed.\n+\n+disabledAlg\n+:   Code 4. An algorithm used is considered a security risk and is disabled.\n+\n+badKeyUsage\n+:   Code 8. This JAR contains entries whose signer certificate's KeyUsage\n+    extension doesn't allow code signing.\n+\n+badExtendedKeyUsage\n+:   Code 8. This JAR contains entries whose signer certificate's\n+    ExtendedKeyUsage extension doesn't allow code signing.\n+\n+badNetscapeCertType\n+:   Code 8. This JAR contains entries whose signer certificate's\n+    NetscapeCertType extension doesn't allow code signing.\n+\n+hasUnsignedEntry\n+:   Code 16. This JAR contains unsigned entries which haven't been\n+    integrity-checked.\n+\n+notSignedByAlias\n+:   Code 32. This JAR contains signed entries which aren't signed by the\n+    specified alias(es).\n+\n+aliasNotInStore\n+:   Code 32. This JAR contains signed entries that aren't signed by alias in\n+    this keystore.\n+\n+tsaChainNotValidated\n+:   Code 64. This JAR contains entries whose TSA certificate chain is invalid.\n+\n+## Informational Warnings\n+\n+Informational warnings include those that aren't errors but regarded as bad\n+practice. They don't have a code.\n+\n+extraAttributesDetected\n+:   The POSIX file permissions and\/or symlink attributes are detected during\n+    signing or verifying a JAR file. The `jarsigner` tool preserves these\n+    attributes in the newly signed file but warns that these attributes are\n+    unsigned and not protected by the signature.\n+\n+hasExpiringCert\n+:   This JAR contains entries whose signer certificate expires within six\n+    months.\n+\n+hasExpiringTsaCert\n+:   The timestamp will expire within one year on `YYYY-MM-DD`.\n+\n+hasNonexistentEntries\n+:   This JAR contains signed entries for files that do not exist.\n+\n+legacyAlg\n+:   An algorithm used is considered a security risk but not disabled.\n+\n+noTimestamp\n+:   This JAR contains signatures that doesn't include a timestamp. Without a\n+    timestamp, users may not be able to validate this JAR file after the signer\n+    certificate's expiration date (`YYYY-MM-DD`) or after any future revocation\n+    date.\n+\n+## Example of Signing a JAR File\n+\n+Use the following command to sign `bundle.jar` with the private key of a user\n+whose keystore alias is `jane` in a keystore named `mystore` in the `working`\n+directory and name the signed JAR file `sbundle.jar`:\n+\n+>   `jarsigner -keystore \/working\/mystore -storepass` *keystore\\_password*\n+    `-keypass` *private\\_key\\_password* `-signedjar sbundle.jar bundle.jar\n+    jane`\n+\n+There is no `-sigfile` specified in the previous command so the generated `.SF`\n+and signature block files to be placed in the signed JAR file have default names based\n+on the alias name. They are named `JANE.SF` and `JANE.RSA`.\n+\n+If you want to be prompted for the store password and the private key password,\n+then you could shorten the previous command to the following:\n+\n+>   `jarsigner -keystore \/working\/mystore -signedjar sbundle.jar bundle.jar\n+    jane`\n+\n+If the `keystore` is the default `keystore` (`.keystore` in your home\n+directory), then you don't need to specify a `keystore`, as follows:\n+\n+>   `jarsigner -signedjar sbundle.jar bundle.jar jane`\n+\n+If you want the signed JAR file to overwrite the input JAR file (`bundle.jar`),\n+then you don't need to specify a `-signedjar` option, as follows:\n+\n+>   `jarsigner bundle.jar jane`\n+\n+## Example of Verifying a Signed JAR File\n+\n+To verify a signed JAR file to ensure that the signature is valid and the JAR\n+file wasn't been tampered with, use a command such as the following:\n+\n+>   `jarsigner -verify ButtonDemo.jar`\n+\n+When the verification is successful, `jar verified` is displayed. Otherwise, an\n+error message is displayed. You can get more information when you use the\n+`-verbose` option. A sample use of `jarsigner` with the `-verbose` option\n+follows:\n+\n+```\n+jarsigner -verify -verbose ButtonDemo.jar\n+\n+s       866 Tue Sep 12 20:08:48 EDT 2017 META-INF\/MANIFEST.MF\n+        825 Tue Sep 12 20:08:48 EDT 2017 META-INF\/ORACLE_C.SF\n+       7475 Tue Sep 12 20:08:48 EDT 2017 META-INF\/ORACLE_C.RSA\n+          0 Tue Sep 12 20:07:54 EDT 2017 META-INF\/\n+          0 Tue Sep 12 20:07:16 EDT 2017 components\/\n+          0 Tue Sep 12 20:07:16 EDT 2017 components\/images\/\n+sm      523 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo$1.class\n+sm     3440 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo.class\n+sm     2346 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo.jnlp\n+sm      172 Tue Sep 12 20:07:16 EDT 2017 components\/images\/left.gif\n+sm      235 Tue Sep 12 20:07:16 EDT 2017 components\/images\/middle.gif\n+sm      172 Tue Sep 12 20:07:16 EDT 2017 components\/images\/right.gif\n+\n+  s = signature was verified\n+  m = entry is listed in manifest\n+  k = at least one certificate was found in keystore\n+\n+- Signed by \"CN=\"Oracle America, Inc.\", OU=Software Engineering, O=\"Oracle America, Inc.\", L=Redwood City, ST=California, C=US\"\n+    Digest algorithm: SHA-256\n+    Signature algorithm: SHA256withRSA, 2048-bit key\n+  Timestamped by \"CN=Symantec Time Stamping Services Signer - G4, O=Symantec Corporation, C=US\" on Tue Sep 12 20:08:49 UTC 2017\n+    Timestamp digest algorithm: SHA-1\n+    Timestamp signature algorithm: SHA1withRSA, 2048-bit key\n+\n+jar verified.\n+\n+The signer certificate expired on 2018-02-01. However, the JAR will be valid until the timestamp expires on 2020-12-29.\n+```\n+\n+## Example of Verification with Certificate Information\n+\n+If you specify the `-certs` option with the `-verify` and `-verbose` options,\n+then the output includes certificate information for each signer of the JAR\n+file. The information includes the certificate type, the signer distinguished\n+name information (when it is an X.509 certificate), and in parentheses, the\n+keystore alias for the signer when the public key certificate in the JAR file\n+matches the one in a keystore entry, for example:\n+\n+```\n+jarsigner -keystore $JAVA_HOME\/lib\/security\/cacerts -verify -verbose -certs ButtonDemo.jar\n+\n+s k     866 Tue Sep 12 20:08:48 EDT 2017 META-INF\/MANIFEST.MF\n+\n+      >>> Signer\n+      X.509, CN=\"Oracle America, Inc.\", OU=Software Engineering, O=\"Oracle America, Inc.\", L=Redwood City, ST=California, C=US\n+      [certificate is valid from 2017-01-30, 7:00 PM to 2018-02-01, 6:59 PM]\n+      X.509, CN=Symantec Class 3 SHA256 Code Signing CA, OU=Symantec Trust Network, O=Symantec Corporation, C=US\n+      [certificate is valid from 2013-12-09, 7:00 PM to 2023-12-09, 6:59 PM]\n+      X.509, CN=VeriSign Class 3 Public Primary Certification Authority - G5, OU=\"(c) 2006 VeriSign, Inc. - For authorized use only\", OU=VeriSign Trust Network, O=\"VeriSign, Inc.\", C=US (verisignclass3g5ca [jdk])\n+      [trusted certificate]\n+      >>> TSA\n+      X.509, CN=Symantec Time Stamping Services Signer - G4, O=Symantec Corporation, C=US\n+      [certificate is valid from 2012-10-17, 8:00 PM to 2020-12-29, 6:59 PM]\n+      X.509, CN=Symantec Time Stamping Services CA - G2, O=Symantec Corporation, C=US\n+      [certificate is valid from 2012-12-20, 7:00 PM to 2020-12-30, 6:59 PM]\n+\n+        825 Tue Sep 12 20:08:48 EDT 2017 META-INF\/ORACLE_C.SF\n+       7475 Tue Sep 12 20:08:48 EDT 2017 META-INF\/ORACLE_C.RSA\n+          0 Tue Sep 12 20:07:54 EDT 2017 META-INF\/\n+          0 Tue Sep 12 20:07:16 EDT 2017 components\/\n+          0 Tue Sep 12 20:07:16 EDT 2017 components\/images\/\n+smk     523 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo$1.class\n+\n+      [entry was signed on 2017-09-12, 4:08 PM]\n+      >>> Signer\n+      X.509, CN=\"Oracle America, Inc.\", OU=Software Engineering, O=\"Oracle America, Inc.\", L=Redwood City, ST=California, C=US\n+      [certificate is valid from 2017-01-30, 7:00 PM to 2018-02-01, 6:59 PM]\n+      X.509, CN=Symantec Class 3 SHA256 Code Signing CA, OU=Symantec Trust Network, O=Symantec Corporation, C=US\n+      [certificate is valid from 2013-12-09, 7:00 PM to 2023-12-09, 6:59 PM]\n+      X.509, CN=VeriSign Class 3 Public Primary Certification Authority - G5, OU=\"(c) 2006 VeriSign, Inc. - For authorized use only\", OU=VeriSign Trust Network, O=\"VeriSign, Inc.\", C=US (verisignclass3g5ca [jdk])\n+      [trusted certificate]\n+      >>> TSA\n+      X.509, CN=Symantec Time Stamping Services Signer - G4, O=Symantec Corporation, C=US\n+      [certificate is valid from 2012-10-17, 8:00 PM to 2020-12-29, 6:59 PM]\n+      X.509, CN=Symantec Time Stamping Services CA - G2, O=Symantec Corporation, C=US\n+      [certificate is valid from 2012-12-20, 7:00 PM to 2020-12-30, 6:59 PM]\n+\n+smk    3440 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo.class\n+...\n+smk    2346 Tue Sep 12 20:07:16 EDT 2017 components\/ButtonDemo.jnlp\n+...\n+smk     172 Tue Sep 12 20:07:16 EDT 2017 components\/images\/left.gif\n+...\n+smk     235 Tue Sep 12 20:07:16 EDT 2017 components\/images\/middle.gif\n+...\n+smk     172 Tue Sep 12 20:07:16 EDT 2017 components\/images\/right.gif\n+...\n+\n+  s = signature was verified\n+  m = entry is listed in manifest\n+  k = at least one certificate was found in keystore\n+\n+- Signed by \"CN=\"Oracle America, Inc.\", OU=Software Engineering, O=\"Oracle America, Inc.\", L=Redwood City, ST=California, C=US\"\n+    Digest algorithm: SHA-256\n+    Signature algorithm: SHA256withRSA, 2048-bit key\n+  Timestamped by \"CN=Symantec Time Stamping Services Signer - G4, O=Symantec Corporation, C=US\" on Tue Sep 12 20:08:49 UTC 2017\n+    Timestamp digest algorithm: SHA-1\n+    Timestamp signature algorithm: SHA1withRSA, 2048-bit key\n+\n+jar verified.\n+\n+The signer certificate expired on 2018-02-01. However, the JAR will be valid until the timestamp expires on 2020-12-29.\n+```\n+\n+If the certificate for a signer isn't an X.509 certificate, then there is no\n+distinguished name information. In that case, just the certificate type and the\n+alias are shown. For example, if the certificate is a PGP certificate, and the\n+alias is `bob`, then you would get: `PGP, (bob)`.\n","filename":"src\/jdk.jartool\/share\/man\/jarsigner.md","additions":1089,"deletions":0,"binary":false,"changes":1089,"status":"added"},{"patch":"@@ -1,1526 +0,0 @@\n-.\\\" Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JAVADOC\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-javadoc - generate HTML pages of API documentation from Java source\n-files\n-.SH SYNOPSIS\n-.PP\n-\\f[V]javadoc\\f[R] [\\f[I]options\\f[R]] [\\f[I]packagenames\\f[R]]\n-[\\f[I]sourcefiles\\f[R]] [\\f[V]\\[at]\\f[R]\\f[I]files\\f[R]]\n-.TP\n-\\f[I]options\\f[R]\n-Specifies command-line options, separated by spaces.\n-See \\f[B]Standard \\f[VB]javadoc\\f[B] Options\\f[R], \\f[B]Extra\n-\\f[VB]javadoc\\f[B] Options\\f[R], \\f[B]Standard Options for the Standard\n-Doclet\\f[R], and \\f[B]Extra Options for the Standard Doclet\\f[R].\n-.TP\n-\\f[I]packagenames\\f[R]\n-Specifies names of packages that you want to document, separated by\n-spaces, for example \\f[V]java.lang java.lang.reflect java.awt\\f[R].\n-If you want to also document the subpackages, then use the\n-\\f[V]-subpackages\\f[R] option to specify the packages.\n-.RS\n-.PP\n-By default, \\f[V]javadoc\\f[R] looks for the specified packages in the\n-current directory and subdirectories.\n-Use the \\f[V]-sourcepath\\f[R] option to specify the list of directories\n-where to look for packages.\n-.RE\n-.TP\n-\\f[I]sourcefiles\\f[R]\n-Specifies names of Java source files that you want to document,\n-separated by spaces, for example\n-\\f[V]Class.java Object.java Button.java\\f[R].\n-By default, \\f[V]javadoc\\f[R] looks for the specified classes in the\n-current directory.\n-However, you can specify the full path to the class file and use\n-wildcard characters, for example\n-\\f[V]\/home\/src\/java\/awt\/Graphics*.java\\f[R].\n-You can also specify the path relative to the current directory.\n-.TP\n-\\f[V]\\[at]\\f[R]\\f[I]files\\f[R]\n-Specifies names of files that contain a list of \\f[V]javadoc\\f[R] tool\n-options, package names, and source file names in any order.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]javadoc\\f[R] tool parses the declarations and documentation\n-comments in a set of Java source files and produces corresponding HTML\n-pages that describe (by default) the public and protected classes,\n-nested and implicitly declared classes (but not anonymous inner\n-classes), interfaces, constructors, methods, and fields.\n-You can use the \\f[V]javadoc\\f[R] tool to generate the API documentation\n-or the implementation documentation for a set of source files.\n-.PP\n-You can run the \\f[V]javadoc\\f[R] tool on entire packages, individual\n-source files, or both.\n-When documenting entire packages, you can use the \\f[V]-subpackages\\f[R]\n-option either to recursively traverse a directory and its\n-subdirectories, or to pass in an explicit list of package names.\n-When you document individual source files, pass in a list of Java source\n-file names.\n-.SS Documentation Comments\n-.PP\n-The \\f[V]javadoc\\f[R] tool uses the documentation comment, if any, that\n-immediately precedes the beginning of the declaration, whether that is\n-an annotation, modifier, or the name being declared.\n-If there are multiple documentation comments before the declaration,\n-only the last one (closest to the declaration) will be used.\n-If there are any documentation comments after the beginning of the\n-declaration, they will be ignored.\n-To check for any extra or misplaced documentation comments, compile your\n-source code with the \\f[V]javac\\f[R] option \\f[V]-Xlint\\f[R], or more\n-specifically, \\f[V]-Xlint:dangling-doc-comments\\f[R].\n-Within a source file, you may suppress any warnings generated by these\n-options by using\n-\\f[V]\\[at]SuppressWarnings(\\[dq]dangling-doc-comments\\[dq])\\f[R] on a\n-suitable enclosing declaration.\n-.SS Conformance\n-.PP\n-The standard doclet does not validate the content of documentation\n-comments for conformance, nor does it attempt to correct any errors in\n-documentation comments.\n-Anyone running javadoc is advised to be aware of the problems that may\n-arise when generating non-conformant output or output containing\n-executable content, such as JavaScript.\n-The standard doclet does provide the \\f[B]DocLint\\f[R] feature to help\n-developers detect common problems in documentation comments; but it is\n-also recommended to check the generated output with any appropriate\n-conformance and other checking tools.\n-.PP\n-For more details on the conformance requirements for HTML5 documents,\n-see \\f[B]Conformance requirements for authors\\f[R]\n-[https:\/\/html.spec.whatwg.org\/multipage\/introduction.html#conformance-requirements-for-authors]\n-in the HTML5 Specification.\n-For more details on security issues related to web pages, see the\n-\\f[B]Open Web Application Security Project (OWASP)\\f[R]\n-[https:\/\/www.owasp.org] page.\n-.SH OPTIONS\n-.PP\n-\\f[V]javadoc\\f[R] supports command-line options for both the main\n-\\f[V]javadoc\\f[R] tool and the currently selected doclet.\n-The standard doclet is used if no other doclet is specified.\n-.PP\n-GNU-style options (that is, those beginning with \\f[V]--\\f[R]) can use\n-an equal sign (\\f[V]=\\f[R]) instead of whitespace characters to separate\n-the name of an option from its value.\n-.SS Standard \\f[V]javadoc\\f[R] Options\n-.PP\n-The following core \\f[V]javadoc\\f[R] options are equivalent to\n-corresponding \\f[V]javac\\f[R] options.\n-See \\f[I]Standard Options\\f[R] in \\f[B]javac\\f[R] for the detailed\n-descriptions of using these options:\n-.IP \\[bu] 2\n-\\f[V]--add-modules\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-bootclasspath\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--class-path\\f[R], \\f[V]-classpath\\f[R], or \\f[V]-cp\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--disable-line-doc-comments\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--enable-preview\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-encoding\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-extdirs\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--limit-modules\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--module\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--module-path\\f[R] or \\f[V]-p\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--module-source-path\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--release\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--source\\f[R] or \\f[V]-source\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--source-path\\f[R] or \\f[V]-sourcepath\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--system\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--upgrade-module-path\\f[R]\n-.PP\n-The following options are the core \\f[V]javadoc\\f[R] options that are\n-not equivalent to a corresponding \\f[V]javac\\f[R] option:\n-.TP\n-\\f[V]-breakiterator\\f[R]\n-Computes the first sentence of the description in a documentation\n-comment using an instance of \\f[V]java.text.BreakIterator\\f[R] to detect\n-\\f[I]sentence breaks\\f[R].\n-The rules that are used depend on the \\f[B]current locale\\f[R]: for\n-example, for English, a sentence break occurs after a period, question\n-mark, or exclamation point followed by a space when the next word starts\n-with a capital letter.\n-(This is meant to handle most abbreviations, such as \\[dq]The serial no.\n-is valid\\[dq], but will not handle \\[dq]Mr.\n-Smith\\[dq].)\n-.RS\n-.PP\n-The option is enabled by default if the language of the current locale\n-is not English.\n-If the language of the current locale is English, and the\n-\\f[V]-breakiterator\\f[R] option is not given, a simple default algorithm\n-is used, which just looks for a period followed by a space.\n-.PP\n-In a traditional \\f[V]\/**...*\/\\f[R] comment, the search for the end of\n-the first sentence is terminated by an HTML block tag, such as\n-\\f[V]<p>\\f[R], \\f[V]<pre>\\f[R], or the tag for a heading.\n-.PP\n-In a Markdown \\f[V]\/\/\/\\f[R] comment, the search for the end of the first\n-sentence skips over any characters enclosed in code spans and links, and\n-is terminated by the end of the initial block, as indicated by a blank\n-line or the beginning of the next block, such as a list, thematic break,\n-or an HTML block.\n-.PP\n-The first sentence of the description in a documentation comment is used\n-in summary tables, index pages, and other situations where a short\n-summary is required.\n-For more explicit control in any individual documentation comment,\n-enclose the contents of the first sentence in a\n-\\f[V]{\\[at]summary ...}\\f[R] tag, or when applicable, in a\n-\\f[V]{\\[at]return ...}\\f[R] tag.\n-.RE\n-.TP\n-\\f[V]-doclet\\f[R] \\f[I]class\\f[R]\n-Generates output by using an alternate doclet.\n-Use the fully qualified name.\n-This doclet defines the content and formats the output.\n-If the \\f[V]-doclet\\f[R] option isn\\[aq]t used, then the\n-\\f[V]javadoc\\f[R] tool uses the standard doclet for generating the\n-default HTML format.\n-This class must implement the \\f[V]jdk.javadoc.doclet.Doclet\\f[R]\n-interface.\n-The path to this class is defined by the \\f[V]-docletpath\\f[R] option.\n-.TP\n-\\f[V]-docletpath\\f[R] \\f[I]path\\f[R]\n-Specifies where to find doclet class files (specified with the\n-\\f[V]-doclet\\f[R] option) and any JAR files it depends on.\n-If the starting class file is in a JAR file, then this option specifies\n-the path to that JAR file.\n-You can specify an absolute path or a path relative to the current\n-directory.\n-If \\f[V]path\\f[R] contains multiple paths or JAR files, then they should\n-be separated with a colon (\\f[V]:\\f[R]) on Linux and macOS, and a\n-semicolon (\\f[V];\\f[R]) on Windows.\n-This option isn\\[aq]t necessary when the \\f[V]doclet\\f[R] starting class\n-is already in the search path.\n-.TP\n-\\f[V]-exclude\\f[R] \\f[I]pkglist\\f[R]\n-Unconditionally, excludes the specified packages and their subpackages\n-from the list formed by \\f[V]-subpackages\\f[R].\n-It excludes those packages even when they would otherwise be included by\n-some earlier or later \\f[V]-subpackages\\f[R] option.\n-.RS\n-.PP\n-The following example would include \\f[V]java.io\\f[R],\n-\\f[V]java.util\\f[R], and \\f[V]java.math\\f[R] (among others), but would\n-exclude packages rooted at \\f[V]java.net\\f[R] and \\f[V]java.lang\\f[R].\n-Notice that these examples exclude \\f[V]java.lang.ref\\f[R], which is a\n-subpackage of \\f[V]java.lang\\f[R].\n-Arguments are separated by colons on all operating systems.\n-.IP \\[bu] 2\n-\\f[B]Linux and macOS:\\f[R]\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-javadoc -sourcepath \/home\/user\/src -subpackages java -exclude java.net:java.lang\n-\\f[R]\n-.fi\n-.RE\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R]\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-javadoc -sourcepath \\[rs]user\\[rs]src -subpackages java -exclude java.net:java.lang\n-\\f[R]\n-.fi\n-.RE\n-.RE\n-.TP\n-\\f[V]--expand-requires\\f[R] (\\f[V]transitive\\f[R]|\\f[V]all\\f[R])\n-Instructs the javadoc tool to expand the set of modules to be\n-documented.\n-By default, only the modules given explicitly on the command line are\n-documented.\n-Supports the following values:\n-.RS\n-.IP \\[bu] 2\n-\\f[V]transitive\\f[R]: additionally includes all the required transitive\n-dependencies of those modules.\n-.IP \\[bu] 2\n-\\f[V]all\\f[R]: includes all dependencies.\n-.RE\n-.TP\n-\\f[V]--help\\f[R], \\f[V]-help\\f[R], \\f[V]-h\\f[R], or \\f[V]-?\\f[R]\n-Prints a synopsis of the standard options.\n-.TP\n-\\f[V]--help-extra\\f[R] or \\f[V]-X\\f[R]\n-Prints a synopsis of the set of extra options.\n-.TP\n-\\f[V]-J\\f[R]\\f[I]flag\\f[R]\n-Passes \\f[I]flag\\f[R] directly to the Java Runtime Environment (JRE)\n-that runs the \\f[V]javadoc\\f[R] tool.\n-For example, if you must ensure that the system sets aside 32 MB of\n-memory in which to process the generated documentation, then you would\n-call the \\f[V]-Xmx\\f[R] option as follows:\n-\\f[V]javadoc -J-Xmx32m -J-Xms32m com.mypackage\\f[R].\n-Be aware that \\f[V]-Xms\\f[R] is optional because it only sets the size\n-of initial memory, which is useful when you know the minimum amount of\n-memory required.\n-.RS\n-.PP\n-There is no space between the \\f[V]J\\f[R] and the \\f[V]flag\\f[R].\n-.PP\n-Use the \\f[V]-version\\f[R] option to report the version of the JRE being\n-used to run the \\f[V]javadoc\\f[R] tool.\n-.IP\n-.nf\n-\\f[CB]\n-javadoc -J-version\n-java version \\[dq]17\\[dq] 2021-09-14 LTS\n-Java(TM) SE Runtime Environment (build 17+35-LTS-2724)\n-Java HotSpot(TM) 64-Bit Server VM (build 17+35-LTS-2724, mixed mode, sharing)\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]-locale\\f[R] \\f[I]name\\f[R]\n-Specifies the locale that the \\f[V]javadoc\\f[R] tool uses when it\n-generates documentation.\n-The argument is the name of the locale, as described in\n-\\f[V]java.util.Locale\\f[R] documentation, such as \\f[V]en_US\\f[R]\n-(English, United States) or \\f[V]en_US_WIN\\f[R] (Windows variant).\n-.RS\n-.PP\n-Specifying a locale causes the \\f[V]javadoc\\f[R] tool to choose the\n-resource files of that locale for messages such as strings in the\n-navigation bar, headings for lists and tables, help file contents,\n-comments in the \\f[V]stylesheet.css\\f[R] file, and so on.\n-It also specifies the sorting order for lists sorted alphabetically, and\n-the sentence separator to determine the end of the first sentence.\n-The \\f[V]-locale\\f[R] option doesn\\[aq]t determine the locale of the\n-documentation comment text specified in the source files of the\n-documented classes.\n-.RE\n-.TP\n-\\f[V]-package\\f[R]\n-Shows only package, protected, and public classes and members.\n-.TP\n-\\f[V]-private\\f[R]\n-Shows all classes and members.\n-.TP\n-\\f[V]-protected\\f[R]\n-Shows only protected and public classes and members.\n-This is the default.\n-.TP\n-\\f[V]-public\\f[R]\n-Shows only the public classes and members.\n-.TP\n-\\f[V]-quiet\\f[R]\n-Shuts off messages so that only the warnings and errors appear to make\n-them easier to view.\n-It also suppresses the \\f[V]version\\f[R] string.\n-.TP\n-\\f[V]--show-members\\f[R] \\f[I]value\\f[R]\n-Specifies which members (fields, methods, or constructors) are\n-documented, where \\f[I]value\\f[R] can be any of the following:\n-.RS\n-.IP \\[bu] 2\n-\\f[V]public\\f[R] --- shows only public members\n-.IP \\[bu] 2\n-\\f[V]protected\\f[R] --- shows public and protected members; this is the\n-default\n-.IP \\[bu] 2\n-\\f[V]package\\f[R] --- shows public, protected, and package members\n-.IP \\[bu] 2\n-\\f[V]private\\f[R] --- shows all members\n-.RE\n-.TP\n-\\f[V]--show-module-contents\\f[R] \\f[I]value\\f[R]\n-Specifies the documentation granularity of module declarations, where\n-\\f[I]value\\f[R] can be \\f[V]api\\f[R] or \\f[V]all\\f[R].\n-.TP\n-\\f[V]--show-packages\\f[R] \\f[I]value\\f[R]\n-Specifies which module packages are documented, where \\f[I]value\\f[R]\n-can be \\f[V]exported\\f[R] or \\f[V]all\\f[R] packages.\n-.TP\n-\\f[V]--show-types\\f[R] \\f[I]value\\f[R]\n-Specifies which types (classes, interfaces, etc.)\n-are documented, where \\f[I]value\\f[R] can be any of the following:\n-.RS\n-.IP \\[bu] 2\n-\\f[V]public\\f[R] --- shows only public types\n-.IP \\[bu] 2\n-\\f[V]protected\\f[R] --- shows public and protected types; this is the\n-default\n-.IP \\[bu] 2\n-\\f[V]package\\f[R] --- shows public, protected, and package types\n-.IP \\[bu] 2\n-\\f[V]private\\f[R] --- shows all types\n-.RE\n-.TP\n-\\f[V]-subpackages\\f[R] \\f[I]subpkglist\\f[R]\n-Generates documentation from source files in the specified packages and\n-recursively in their subpackages.\n-This option is useful when adding new subpackages to the source code\n-because they are automatically included.\n-Each package argument is any top-level subpackage (such as\n-\\f[V]java\\f[R]) or fully qualified package (such as\n-\\f[V]javax.swing\\f[R]) that doesn\\[aq]t need to contain source files.\n-Arguments are separated by colons on all operating systems.\n-Wild cards aren\\[aq]t allowed.\n-Use \\f[V]-sourcepath\\f[R] to specify where to find the packages.\n-This option doesn\\[aq]t process source files that are in the source tree\n-but don\\[aq]t belong to the packages.\n-.RS\n-.PP\n-For example, the following commands generates documentation for packages\n-named \\f[V]java\\f[R] and \\f[V]javax.swing\\f[R] and all of their\n-subpackages.\n-.IP \\[bu] 2\n-\\f[B]Linux and macOS:\\f[R]\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-javadoc -d docs -sourcepath \/home\/user\/src -subpackages java:javax.swing\n-\\f[R]\n-.fi\n-.RE\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R]\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-javadoc -d docs -sourcepath \\[rs]user\\[rs]src -subpackages java:javax.swing\n-\\f[R]\n-.fi\n-.RE\n-.RE\n-.TP\n-\\f[V]-verbose\\f[R]\n-Provides more detailed messages while the \\f[V]javadoc\\f[R] tool runs.\n-Without the \\f[V]-verbose\\f[R] option, messages appear for loading the\n-source files, generating the documentation (one message per source\n-file), and sorting.\n-The \\f[V]-verbose\\f[R] option causes the printing of additional messages\n-that specify the number of milliseconds to parse each Java source file.\n-.TP\n-\\f[V]--version\\f[R]\n-Prints version information.\n-.TP\n-\\f[V]-Werror\\f[R]\n-Reports an error if any warnings occur.\n-.PP\n-Note that if a Java source file contains an implicitly declared class,\n-then that class and its public, protected, and package members will be\n-documented regardless of the options such as \\f[V]--show-types\\f[R],\n-\\f[V]--show-members\\f[R], \\f[V]-private\\f[R], \\f[V]-protected\\f[R],\n-\\f[V]-package\\f[R], and \\f[V]-public\\f[R].\n-If \\f[V]--show-members\\f[R] is specified with value \\f[V]private\\f[R] or\n-if \\f[V]-private\\f[R] is used then all private members of an implicitly\n-declared class will be documented too.\n-.SS Extra \\f[V]javadoc\\f[R] Options\n-.PP\n-\\f[I]Note:\\f[R] The additional options for \\f[V]javadoc\\f[R] are subject\n-to change without notice.\n-.PP\n-The following additional \\f[V]javadoc\\f[R] options are equivalent to\n-corresponding \\f[V]javac\\f[R] options.\n-See \\f[I]Extra Options\\f[R] in \\f[B]javac\\f[R] for the detailed\n-descriptions of using these options:\n-.IP \\[bu] 2\n-\\f[V]--add-exports\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--add-reads\\f[R]\n-.IP \\[bu] 2\n-\\f[V]--patch-module\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-Xmaxerrs\\f[R]\n-.IP \\[bu] 2\n-\\f[V]-Xmaxwarns\\f[R]\n-.SS Standard Options for the Standard Doclet\n-.PP\n-The following options are provided by the standard doclet.\n-.TP\n-\\f[V]--add-script\\f[R] \\f[I]file\\f[R]\n-Adds \\f[I]file\\f[R] as an additional JavaScript file to the generated\n-documentation.\n-This option can be used one or more times to specify additional script\n-files.\n-.RS\n-.PP\n-Command-line example:\n-.RS\n-.PP\n-\\f[V]javadoc --add-script first_script.js --add-script second_script.js pkg_foo\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]--add-stylesheet\\f[R] \\f[I]file\\f[R]\n-Adds \\f[I]file\\f[R] as an additional stylesheet file to the generated\n-documentation.\n-This option can be used one or more times to specify additional\n-stylesheets included in the documentation.\n-.RS\n-.PP\n-Command-line example:\n-.IP\n-.nf\n-\\f[CB]\n-javadoc --add-stylesheet new_stylesheet_1.css --add-stylesheet new_stylesheet_2.css pkg_foo\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]--allow-script-in-comments\\f[R]\n-Allow JavaScript in documentation comments, and options whose value is\n-\\f[I]html-code\\f[R].\n-.TP\n-\\f[V]-author\\f[R]\n-Includes the text of any \\f[V]author\\f[R] tags in the generated\n-documentation.\n-.TP\n-\\f[V]-bottom\\f[R] \\f[I]html-code\\f[R]\n-Specifies the text to be placed at the bottom of each generated page.\n-The text can contain HTML tags and white space, but when it does, the\n-text must be enclosed in quotation marks.\n-Use escape characters for any internal quotation marks within text.\n-.TP\n-\\f[V]-charset\\f[R] \\f[I]name\\f[R]\n-Specifies the HTML character set for this document.\n-The name should be a preferred MIME name as specified in the \\f[B]IANA\n-Registry, Character Sets\\f[R]\n-[http:\/\/www.iana.org\/assignments\/character-sets].\n-.RS\n-.PP\n-For example:\n-.IP\n-.nf\n-\\f[CB]\n-javadoc -charset \\[dq]iso-8859-1\\[dq] mypackage\n-\\f[R]\n-.fi\n-.PP\n-This command inserts the following line, containing a\n-\\f[B]\\f[VB]meta\\f[B] element\\f[R]\n-[https:\/\/html.spec.whatwg.org\/multipage\/semantics.html#the-meta-element]\n-in the head of every generated page:\n-.IP\n-.nf\n-\\f[CB]\n-<meta http-equiv=\\[dq]Content-Type\\[dq] content=\\[dq]text\/html; charset=ISO-8859-1\\[dq]>\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]-d\\f[R] \\f[I]directory\\f[R]\n-Specifies the destination directory where the \\f[V]javadoc\\f[R] tool\n-saves the generated HTML files.\n-If you omit the \\f[V]-d\\f[R] option, then the files are saved to the\n-current directory.\n-The \\f[V]directory\\f[R] value can be absolute or relative to the current\n-working directory.\n-The destination directory is automatically created when the\n-\\f[V]javadoc\\f[R] tool runs.\n-.RS\n-.IP \\[bu] 2\n-\\f[B]Linux and macOS:\\f[R] For example, the following command generates\n-the documentation for the package \\f[V]com.mypackage\\f[R] and saves the\n-results in the \\f[V]\/user\/doc\/\\f[R] directory:\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-javadoc -d \/user\/doc\/ com.mypackage\n-\\f[R]\n-.fi\n-.RE\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R] For example, the following command generates the\n-documentation for the package \\f[V]com.mypackage\\f[R] and saves the\n-results in the \\f[V]\\[rs]user\\[rs]doc\\[rs]\\f[R] directory:\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-javadoc -d \\[rs]user\\[rs]doc\\[rs] com.mypackage\n-\\f[R]\n-.fi\n-.RE\n-.RE\n-.TP\n-\\f[V]-docencoding\\f[R] \\f[I]name\\f[R]\n-Specifies the encoding of the generated HTML files.\n-The name should be a preferred MIME name as specified in the \\f[B]IANA\n-Registry, Character Sets\\f[R]\n-[http:\/\/www.iana.org\/assignments\/character-sets].\n-.RS\n-.PP\n-Three options are available for use in a \\f[V]javadoc\\f[R] encoding\n-command.\n-The \\f[V]-encoding\\f[R] option is used for encoding the files read by\n-the \\f[V]javadoc\\f[R] tool, while the \\f[V]-docencoding\\f[R] and\n-\\f[V]-charset\\f[R] options are used for encoding the files written by\n-the tool.\n-Of the three available options, at most, only the input and an output\n-encoding option are used in a single encoding command.\n-If you specify both input and output encoding options in a command, they\n-must be the same value.\n-If you specify neither output option, it defaults to the input encoding.\n-.PP\n-For example:\n-.IP\n-.nf\n-\\f[CB]\n-javadoc -docencoding \\[dq]iso-8859-1\\[dq] mypackage\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]-docfilessubdirs\\f[R]\n-Enables deep copying of \\f[V]doc-files\\f[R] directories.\n-Subdirectories and all contents are recursively copied to the\n-destination.\n-For example, the directory \\f[V]doc-files\/example\/images\\f[R] and all of\n-its contents are copied.\n-Use the \\f[B]\\f[VB]-excludedocfilessubdir\\f[B]\\f[R] option to restrict\n-the subdirectories to be copied.\n-.TP\n-\\f[V]-doctitle\\f[R] \\f[I]html-code\\f[R]\n-Specifies the title to place near the top of the overview summary file.\n-The text specified in the \\f[V]title\\f[R] tag is placed as a centered,\n-level-one heading directly beneath the navigation bar.\n-The \\f[V]title\\f[R] tag can contain HTML tags and white space, but when\n-it does, you must enclose the title in quotation marks.\n-Additional quotation marks within the \\f[V]title\\f[R] tag must be\n-escaped.\n-For example,\n-\\f[V]javadoc -doctitle \\[dq]<b>My Library<\/b><br>v1.0\\[dq] com.mypackage\\f[R].\n-.TP\n-\\f[V]-excludedocfilessubdir\\f[R] \\f[I]name1\\f[R]\\f[V],\\f[R]\\f[I]name2...\\f[R]\n-Excludes any subdirectories with the given names when recursively\n-copying \\f[V]doc-files\\f[R] subdirectories.\n-See \\f[B]\\f[VB]-docfilessubdirs\\f[B]\\f[R].\n-For historical reasons, \\f[V]:\\f[R] can be used anywhere in the argument\n-as a separator instead of \\f[V],\\f[R].\n-.TP\n-\\f[V]-footer\\f[R] \\f[I]html-code\\f[R]\n-This option is no longer supported and reports a warning.\n-.TP\n-\\f[V]-group\\f[R] \\f[I]name\\f[R] \\f[I]p1\\f[R]\\f[V],\\f[R]\\f[I]p2...\\f[R]\n-Group the specified packages together in the Overview page.\n-For historical reasons, \\f[V]:\\f[R] can be used as a separator anywhere\n-in the argument instead of \\f[V],\\f[R].\n-.TP\n-\\f[V]-header\\f[R] \\f[I]html-code\\f[R]\n-Specifies the header text to be placed at the top of each output file.\n-The header is placed to the right of the navigation bar.\n-The \\f[V]header\\f[R] can contain HTML tags and white space, but when it\n-does, the \\f[V]header\\f[R] must be enclosed in quotation marks.\n-Use escape characters for internal quotation marks within a header.\n-For example,\n-\\f[V]javadoc -header \\[dq]<b>My Library<\/b><br>v1.0\\[dq] com.mypackage\\f[R].\n-.TP\n-\\f[V]-helpfile\\f[R] \\f[I]filename\\f[R]\n-Specifies a file containing the text that will be displayed when the\n-\\f[B]HELP\\f[R] link in the navigation bar is clicked.\n-If this option is not given, the \\f[V]javadoc\\f[R] tool creates a\n-default page that will be used.\n-.TP\n-\\f[V]-html5\\f[R]\n-This option is a no-op and is just retained for backwards compatibility.\n-.TP\n-\\f[V]--javafx\\f[R] or \\f[V]-javafx\\f[R]\n-Enables JavaFX functionality.\n-This option is enabled by default if the JavaFX library classes are\n-detected on the module path.\n-.TP\n-\\f[V]-keywords\\f[R]\n-Adds HTML keyword \\f[V]<meta>\\f[R] tags to the generated file for each\n-class.\n-These tags can help search engines that look for \\f[V]<meta>\\f[R] tags\n-find the pages.\n-Most search engines that search the entire Internet don\\[aq]t look at\n-\\f[V]<meta>\\f[R] tags, because pages can misuse them.\n-Search engines offered by companies that confine their searches to their\n-own website can benefit by looking at \\f[V]<meta>\\f[R] tags.\n-The \\f[V]<meta>\\f[R] tags include the fully qualified name of the class\n-and the unqualified names of the fields and methods.\n-Constructors aren\\[aq]t included because they are identical to the class\n-name.\n-For example, the page for the class \\f[V]String\\f[R] includes these\n-keywords:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-<meta name=\\[dq]keywords\\[dq] content=\\[dq]java.lang.String class\\[dq]>\n-<meta name=\\[dq]keywords\\[dq] content=\\[dq]CASE_INSENSITIVE_ORDER\\[dq]>\n-<meta name=\\[dq]keywords\\[dq] content=\\[dq]length()\\[dq]>\n-<meta name=\\[dq]keywords\\[dq] content=\\[dq]isEmpty()\\[dq]>\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]-link\\f[R] \\f[I]url\\f[R]\n-Creates links to existing \\f[V]javadoc\\f[R] generated documentation of\n-externally referenced classes.\n-The \\f[I]url\\f[R] argument is the absolute or relative URL of the\n-directory that contains the external \\f[V]javadoc\\f[R] generated\n-documentation.\n-You can specify multiple \\f[V]-link\\f[R] options in a specified\n-\\f[V]javadoc\\f[R] tool run to link to multiple documents.\n-.RS\n-.PP\n-Either a \\f[V]package-list\\f[R] or an \\f[V]element-list\\f[R] file must\n-be in this \\f[I]url\\f[R] directory (otherwise, use the\n-\\f[V]-linkoffline\\f[R] option).\n-.PP\n-\\f[I]Note:\\f[R] The \\f[V]package-list\\f[R] and \\f[V]element-list\\f[R]\n-files are generated by the \\f[V]javadoc\\f[R] tool when generating the\n-API documentation and should not be modified by the user.\n-.PP\n-When you use the \\f[V]javadoc\\f[R] tool to document packages, it uses\n-the \\f[V]package-list\\f[R] file to determine the packages declared in an\n-API.\n-When you generate API documents for modules, the \\f[V]javadoc\\f[R] tool\n-uses the \\f[V]element-list\\f[R] file to determine the modules and\n-packages declared in an API.\n-.PP\n-The \\f[V]javadoc\\f[R] tool reads the names from the appropriate list\n-file and then links to the packages or modules at that URL.\n-.PP\n-When the \\f[V]javadoc\\f[R] tool runs, the \\f[I]url\\f[R] value is copied\n-into the \\f[V]<a href>\\f[R] links that are created.\n-Therefore, \\f[I]url\\f[R] must be the URL to the directory and not to a\n-file.\n-.PP\n-You can use an absolute link for \\f[I]url\\f[R] to enable your documents\n-to link to a document on any web site, or you can use a relative link to\n-link only to a relative location.\n-If you use a relative link, then the value you pass in should be the\n-relative path from the destination directory (specified with the\n-\\f[V]-d\\f[R] option) to the directory containing the packages being\n-linked to.\n-When you specify an absolute link, you usually use an HTTP link.\n-However, if you want to link to a file system that has no web server,\n-then you can use a file link.\n-Use a file link only when everyone who wants to access the generated\n-documentation shares the same file system.\n-In all cases, and on all operating systems, use a slash as the\n-separator, whether the URL is absolute or relative, and\n-\\f[V]https:\\f[R], \\f[V]http:\\f[R], or \\f[V]file:\\f[R] as specified in\n-the \\f[B]RFC 1738: Uniform Resource Locators (URL)\\f[R]\n-[https:\/\/www.rfc-editor.org\/info\/rfc1738].\n-.IP\n-.nf\n-\\f[CB]\n--link https:\/\/<host>\/<directory>\/<directory>\/...\/<name>\n--link http:\/\/<host>\/<directory>\/<directory>\/...\/<name>\n--link file:\/\/<host>\/<directory>\/<directory>\/...\/<name>\n--link <directory>\/<directory>\/...\/<name>\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]--link-modularity-mismatch\\f[R] (\\f[V]warn\\f[R]|\\f[V]info\\f[R])\n-Specifies whether external documentation with wrong modularity (e.g.\n-non-modular documentation for a modular library, or the reverse case)\n-should be reported as a warning (\\f[V]warn\\f[R]) or just a message\n-(\\f[V]info\\f[R]).\n-The default behavior is to report a warning.\n-.TP\n-\\f[V]-linkoffline\\f[R] \\f[I]url1\\f[R] \\f[I]url2\\f[R]\n-This option is a variation of the \\f[V]-link\\f[R] option.\n-They both create links to \\f[V]javadoc\\f[R] generated documentation for\n-externally referenced classes.\n-You can specify multiple \\f[V]-linkoffline\\f[R] options in a specified\n-\\f[V]javadoc\\f[R] tool run.\n-.RS\n-.PP\n-Use the \\f[V]-linkoffline\\f[R] option when:\n-.IP \\[bu] 2\n-Linking to a document on the web that the \\f[V]javadoc\\f[R] tool\n-can\\[aq]t access through a web connection\n-.IP \\[bu] 2\n-The \\f[V]package-list\\f[R] or \\f[V]element-list\\f[R] file of the\n-external document either isn\\[aq]t accessible or doesn\\[aq]t exist at\n-the URL location, but does exist at a different location and can be\n-specified by either the \\f[V]package-list\\f[R] or \\f[V]element-list\\f[R]\n-file (typically local).\n-.PP\n-\\f[I]Note:\\f[R] The \\f[V]package-list\\f[R] and \\f[V]element-list\\f[R]\n-files are generated by the \\f[V]javadoc\\f[R] tool when generating the\n-API documentation and should not be modified by the user.\n-.PP\n-If \\f[I]url1\\f[R] is accessible only on the World Wide Web, then the\n-\\f[V]-linkoffline\\f[R] option removes the constraint that the\n-\\f[V]javadoc\\f[R] tool must have a web connection to generate\n-documentation.\n-.PP\n-Another use of the \\f[V]-linkoffline\\f[R] option is as a work-around to\n-update documents.\n-After you have run the \\f[V]javadoc\\f[R] tool on a full set of packages\n-or modules, you can run the \\f[V]javadoc\\f[R] tool again on a smaller\n-set of changed packages or modules, so that the updated files can be\n-inserted back into the original set.\n-.PP\n-For example, the \\f[V]-linkoffline\\f[R] option takes two arguments.\n-The first is for the string to be embedded in the \\f[V]<a href>\\f[R]\n-links, and the second tells the \\f[V]javadoc\\f[R] tool where to find\n-either the \\f[V]package-list\\f[R] or \\f[V]element-list\\f[R] file.\n-.PP\n-The \\f[I]url1\\f[R] or \\f[I]url2\\f[R] value is the absolute or relative\n-URL of the directory that contains the external \\f[V]javadoc\\f[R]\n-generated documentation that you want to link to.\n-When relative, the value should be the relative path from the\n-destination directory (specified with the \\f[V]-d\\f[R] option) to the\n-root of the packages being linked to.\n-See \\f[I]url\\f[R] in the \\f[V]-link\\f[R] option.\n-.RE\n-.TP\n-\\f[V]--link-platform-properties\\f[R] \\f[I]url\\f[R]\n-Specifies a properties file used to configure links to platform\n-documentation.\n-.RS\n-.PP\n-The \\f[I]url\\f[R] argument is expected to point to a properties file\n-containing one or more entries with the following format, where\n-\\f[V]<version>\\f[R] is the platform version as passed to the\n-\\f[V]--release\\f[R] or \\f[V]--source\\f[R] option and \\f[V]<url>\\f[R] is\n-the base URL of the corresponding platform API documentation:\n-.IP\n-.nf\n-\\f[CB]\n-doclet.platform.docs.<version>=<url>\n-\\f[R]\n-.fi\n-.PP\n-For instance, a properties file containing URLs for releases 15 to 17\n-might contain the following lines:\n-.IP\n-.nf\n-\\f[CB]\n-doclet.platform.docs.15=https:\/\/example.com\/api\/15\/\n-doclet.platform.docs.16=https:\/\/example.com\/api\/16\/\n-doclet.platform.docs.17=https:\/\/example.com\/api\/17\/\n-\\f[R]\n-.fi\n-.PP\n-If the properties file does not contain an entry for a particular\n-release no platform links are generated.\n-.RE\n-.TP\n-\\f[V]-linksource\\f[R]\n-Creates an HTML version of each source file (with line numbers) and adds\n-links to them from the standard HTML documentation.\n-Links are created for classes, interfaces, constructors, methods, and\n-fields whose declarations are in a source file.\n-Otherwise, links aren\\[aq]t created, such as for default constructors\n-and generated classes.\n-.RS\n-.PP\n-This option exposes all private implementation details in the included\n-source files, including private classes, private fields, and the bodies\n-of private methods, regardless of the \\f[V]-public\\f[R],\n-\\f[V]-package\\f[R], \\f[V]-protected\\f[R], and \\f[V]-private\\f[R]\n-options.\n-Unless you also use the \\f[V]-private\\f[R] option, not all private\n-classes or interfaces are accessible through links.\n-.PP\n-Each link appears on the name of the identifier in its declaration.\n-For example, the link to the source code of the \\f[V]Button\\f[R] class\n-would be on the word \\f[V]Button\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-public class Button extends Component implements Accessible\n-\\f[R]\n-.fi\n-.PP\n-The link to the source code of the \\f[V]getLabel\\f[R] method in the\n-\\f[V]Button\\f[R] class is on the word \\f[V]getLabel\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-public String getLabel()\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]--main-stylesheet\\f[R] \\f[I]file\\f[R] or \\f[V]-stylesheetfile\\f[R] \\f[I]file\\f[R]\n-Specifies the path of an alternate stylesheet file that contains the\n-definitions for the CSS styles used in the generated documentation.\n-This option lets you override the default.\n-If you do not specify the option, the \\f[V]javadoc\\f[R] tool will create\n-and use a default stylesheet.\n-The file name can be any name and isn\\[aq]t restricted to\n-\\f[V]stylesheet.css\\f[R].\n-The \\f[V]--main-stylesheet\\f[R] option is the preferred form.\n-.RS\n-.PP\n-Command-line example:\n-.IP\n-.nf\n-\\f[CB]\n-javadoc --main-stylesheet main_stylesheet.css pkg_foo\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]-nocomment\\f[R]\n-Suppresses the entire comment body, including the main description and\n-all tags, and generate only declarations.\n-This option lets you reuse source files that were originally intended\n-for a different purpose so that you can produce skeleton HTML\n-documentation during the early stages of a new project.\n-.TP\n-\\f[V]-nodeprecated\\f[R]\n-Prevents the generation of any deprecated API in the documentation.\n-This does what the \\f[V]-nodeprecatedlist\\f[R] option does, and it\n-doesn\\[aq]t generate any deprecated API throughout the rest of the\n-documentation.\n-This is useful when writing code when you don\\[aq]t want to be\n-distracted by the deprecated code.\n-.TP\n-\\f[V]-nodeprecatedlist\\f[R]\n-Prevents the generation of the file that contains the list of deprecated\n-APIs (\\f[V]deprecated-list.html\\f[R]) and the link in the navigation bar\n-to that page.\n-The \\f[V]javadoc\\f[R] tool continues to generate the deprecated API\n-throughout the rest of the document.\n-This is useful when your source code contains no deprecated APIs, and\n-you want to make the navigation bar cleaner.\n-.TP\n-\\f[V]--no-fonts\\f[R]\n-Prevents inclusion of font files in the generated documentation.\n-This can be useful if the documentation uses a custom stylesheet which\n-does not use the default fonts.\n-.TP\n-\\f[V]-nohelp\\f[R]\n-Omits the \\f[B]HELP\\f[R] link in the navigation bar at the top of each\n-generated page.\n-.TP\n-\\f[V]-noindex\\f[R]\n-Omits the index from the generated documents.\n-The index is produced by default.\n-.TP\n-\\f[V]-nonavbar\\f[R]\n-Prevents the generation of the navigation bar and header.\n-The \\f[V]-nonavbar\\f[R] option has no effect on the \\f[V]-bottom\\f[R]\n-option.\n-The \\f[V]-nonavbar\\f[R] option is useful when you are interested only in\n-the content and have no need for navigation, such as when you are\n-converting the files to PostScript or PDF for printing only.\n-.TP\n-\\f[V]--no-platform-links\\f[R]\n-Prevents the generation of links to platform documentation.\n-These links are generated by default.\n-.TP\n-\\f[V]-noqualifier\\f[R] \\f[I]name1\\f[R]\\f[V],\\f[R]\\f[I]name2...\\f[R]\n-Excludes the list of qualifiers from the output.\n-The package name is removed from places where class or interface names\n-appear.\n-For historical reasons, \\f[V]:\\f[R] can be used anywhere in the argument\n-as a separator instead of \\f[V],\\f[R].\n-.RS\n-.PP\n-The following example omits all package qualifiers:\n-\\f[V]-noqualifier all\\f[R].\n-.PP\n-The following example omits \\f[V]java.lang\\f[R] and \\f[V]java.io\\f[R]\n-package qualifiers: \\f[V]-noqualifier java.lang:java.io\\f[R].\n-.PP\n-The following example omits package qualifiers starting with\n-\\f[V]java\\f[R] and \\f[V]com.sun\\f[R] subpackages, but not\n-\\f[V]javax: -noqualifier java.*:com.sun.*\\f[R].\n-.PP\n-Where a package qualifier would appear due to the previous behavior, the\n-name can be suitably shortened.\n-This rule is in effect whether or not the \\f[V]-noqualifier\\f[R] option\n-is used.\n-.RE\n-.TP\n-\\f[V]-nosince\\f[R]\n-Omits from the generated documentation the \\f[V]Since\\f[R] sections\n-derived from any \\f[V]since\\f[R] tags.\n-.TP\n-\\f[V]-notimestamp\\f[R]\n-Suppresses the time stamp, which is hidden in an HTML comment in the\n-generated HTML near the top of each page.\n-The \\f[V]-notimestamp\\f[R] option is useful when you want to run the\n-\\f[V]javadoc\\f[R] tool on two source bases and compare them, because it\n-prevents time stamps from causing a difference (which would otherwise be\n-a difference on every page).\n-The time stamp includes the \\f[V]javadoc\\f[R] tool release number.\n-.TP\n-\\f[V]-notree\\f[R]\n-Omits the class and interface hierarchy pages from the generated\n-documents.\n-These are the pages you reach using the \\f[B]TREE\\f[R] link in the\n-navigation bar.\n-The hierarchy is produced by default.\n-.TP\n-\\f[V]--override-methods\\f[R] (\\f[V]detail\\f[R]|\\f[V]summary\\f[R])\n-Documents overridden methods in the detail or summary sections.\n-The default is \\f[V]detail\\f[R].\n-.TP\n-\\f[V]-overview\\f[R] \\f[I]filename\\f[R]\n-Specifies that the \\f[V]javadoc\\f[R] tool should retrieve the content\n-for the overview documentation from the file specified by\n-\\f[I]filename\\f[R] and place it on the Overview page\n-(\\f[V]overview-summary.html\\f[R]).\n-If the \\f[I]filename\\f[R] is a relative path, it is evaluated relative\n-to the current working directory.\n-.RS\n-.PP\n-The file may be an HTML file, with a filename ending in \\f[V].html\\f[R],\n-or a Markdown file, with a filename ending in \\f[V].md\\f[R].\n-If the file is an HTML file, the content for the overview documentation\n-is taken from the \\f[V]<main>\\f[R] element in the file, if one is\n-present, or from the \\f[V]<body>\\f[R] element is there is no\n-\\f[V]<main>\\f[R] element.\n-If the file is a Markdown file, the entire content of the file is used.\n-.PP\n-The title on the overview page is set by \\f[V]-doctitle\\f[R].\n-.PP\n-\\f[I]Note:\\f[R] older versions of the \\f[V]javadoc\\f[R] tool assumed\n-that any use of this option was for an HTML file, and allowed any\n-extension for the \\f[I]filename\\f[R].\n-.RE\n-.TP\n-\\f[V]-serialwarn\\f[R]\n-Reports compile-time warnings for missing \\f[V]\\[at]serial\\f[R] tags.\n-By default, Javadoc reports no serial warnings.\n-Use this option to display the serial warnings, which helps to properly\n-document default serializable fields and \\f[V]writeExternal\\f[R]\n-methods.\n-.TP\n-\\f[V]--since\\f[R] \\f[I]release\\f[R](\\f[V],\\f[R]\\f[I]release\\f[R])*\n-Generates documentation for APIs that were added or newly deprecated in\n-the specified \\f[I]release\\f[R]s.\n-.RS\n-.PP\n-If the \\f[V]\\[at]since\\f[R] tag in the \\f[V]javadoc\\f[R] comment of an\n-element in the documented source code matches a \\f[I]release\\f[R] passed\n-as the option argument, information about the element and the release it\n-was added in is included in a \\[dq]New API\\[dq] page.\n-.PP\n-If the \\[dq]Deprecated API\\[dq] page is generated and the\n-\\f[V]since\\f[R] element of the \\f[V]java.lang.Deprecated\\f[R] annotation\n-of a documented element matches a \\f[I]release\\f[R] in the option\n-arguments, information about the release the element was deprecated in\n-is added to the \\[dq]Deprecated API\\[dq] page.\n-.PP\n-Releases are compared using case-sensitive string comparison.\n-.RE\n-.TP\n-\\f[V]--since-label\\f[R] \\f[I]text\\f[R]\n-Specifies the \\f[I]text\\f[R] to use in the heading of the \\[dq]New\n-API\\[dq] page.\n-This may contain information about the releases covered in the page,\n-e.g.\n-\\[dq]New API in release 2.0\\[dq], or \\[dq]New API since release 1\\[dq].\n-.TP\n-\\f[V]--snippet-path\\f[R] \\f[I]snippetpathlist\\f[R]\n-Specifies the search paths for finding files for external snippets.\n-The \\f[I]snippetpathlist\\f[R] can contain multiple paths by separating\n-them with the platform path separator (\\f[V];\\f[R] on Windows;\n-\\f[V]:\\f[R] on other platforms.)\n-The standard doclet first searches the \\f[V]snippet-files\\f[R]\n-subdirectory in the package containing the snippet, and then searches\n-all the directories in the given list.\n-.TP\n-\\f[V]-sourcetab\\f[R] \\f[I]tab-length\\f[R]\n-Specifies the number of spaces each tab uses in the source.\n-.TP\n-\\f[V]--spec-base-url\\f[R] \\f[I]url\\f[R]\n-Specifies the base URL for relative URLs in \\f[V]\\[at]spec\\f[R] tags, to\n-be used when generating links to any external specifications.\n-It can either be an absolute URL, or a relative URL, in which case it is\n-evaluated relative to the base directory of the generated output files.\n-The default value is equivalent to \\f[V]{\\[at]docRoot}\/..\/specs\\f[R].\n-.TP\n-\\f[V]-splitindex\\f[R]\n-Splits the index file into multiple files, alphabetically, one file per\n-letter, plus a file for any index entries that start with\n-non-alphabetical symbols.\n-.TP\n-\\f[V]-tag\\f[R] \\f[I]name\\f[R]:\\f[I]locations\\f[R]:\\f[I]header\\f[R]\n-Specifies a custom tag with a single argument.\n-For the \\f[V]javadoc\\f[R] tool to spell-check tag names, it is important\n-to include a \\f[V]-tag\\f[R] option for every custom tag that is present\n-in the source code, disabling (with \\f[V]X\\f[R]) those that aren\\[aq]t\n-being output in the current run.\n-The colon (\\f[V]:\\f[R]) is always the separator.\n-To include a colon in the tag name, escape it with a backward slash\n-(\\f[V]\\[rs]\\f[R]).\n-The \\f[V]-tag\\f[R] option outputs the tag heading, \\f[I]header\\f[R], in\n-bold, followed on the next line by the text from its single argument.\n-Similar to any block tag, the argument text can contain inline tags,\n-which are also interpreted.\n-The output is similar to standard one-argument tags, such as the\n-\\f[V]\\[at]return\\f[R] and \\f[V]\\[at]author\\f[R] tags.\n-Omitting a \\f[I]header\\f[R] value causes the \\f[I]name\\f[R] to be the\n-heading.\n-\\f[I]locations\\f[R] is a list of characters specifying the kinds of\n-declarations in which the tag may be used.\n-The following characters may be used, in either uppercase or lowercase:\n-.RS\n-.IP \\[bu] 2\n-\\f[V]A\\f[R]: all declarations\n-.IP \\[bu] 2\n-\\f[V]C\\f[R]: constructors\n-.IP \\[bu] 2\n-\\f[V]F\\f[R]: fields\n-.IP \\[bu] 2\n-\\f[V]M\\f[R]: methods\n-.IP \\[bu] 2\n-\\f[V]O\\f[R]: the overview page and other documentation files in\n-\\f[V]doc-files\\f[R] subdirectories\n-.IP \\[bu] 2\n-\\f[V]P\\f[R]: packages\n-.IP \\[bu] 2\n-\\f[V]S\\f[R]: modules\n-.IP \\[bu] 2\n-\\f[V]T\\f[R]: types (classes and interfaces)\n-.IP \\[bu] 2\n-\\f[V]X\\f[R]: nowhere: the tag is disabled, and will be ignored\n-.PP\n-The order in which tags are given on the command line will be used as\n-the order in which the tags appear in the generated output.\n-You can include standard tags in the order given on the command line by\n-using the \\f[V]-tag\\f[R] option with no \\f[I]locations\\f[R] or\n-\\f[I]header\\f[R].\n-.RE\n-.TP\n-\\f[V]-taglet\\f[R] \\f[I]class\\f[R]\n-Specifies the fully qualified name of the taglet used in generating the\n-documentation for that tag.\n-Use the fully qualified name for the \\f[I]class\\f[R] value.\n-This taglet also defines the number of text arguments that the custom\n-tag has.\n-The taglet accepts those arguments, processes them, and generates the\n-output.\n-.RS\n-.PP\n-Taglets are useful for block or inline tags.\n-They can have any number of arguments and implement custom behavior,\n-such as making text bold, formatting bullets, writing out the text to a\n-file, or starting other processes.\n-Taglets can only determine where a tag should appear and in what form.\n-All other decisions are made by the doclet.\n-A taglet can\\[aq]t do things such as remove a class name from the list\n-of included classes.\n-However, it can execute side effects, such as printing the tag\\[aq]s\n-text to a file or triggering another process.\n-Use the \\f[V]-tagletpath\\f[R] option to specify the path to the taglet.\n-The following example inserts the To Do taglet after Parameters and\n-ahead of Throws in the generated pages.\n-.IP\n-.nf\n-\\f[CB]\n--taglet com.sun.tools.doclets.ToDoTaglet\n--tagletpath \/home\/taglets\n--tag return\n--tag param\n--tag todo\n--tag throws\n--tag see\n-\\f[R]\n-.fi\n-.PP\n-Alternately, you can use the \\f[V]-taglet\\f[R] option in place of its\n-\\f[V]-tag\\f[R] option, but that might be difficult to read.\n-.RE\n-.TP\n-\\f[V]-tagletpath\\f[R] \\f[I]tagletpathlist\\f[R]\n-Specifies the search paths for finding taglet class files.\n-The \\f[I]tagletpathlist\\f[R] can contain multiple paths by separating\n-them with the platform path separator (\\f[V];\\f[R] on Windows;\n-\\f[V]:\\f[R] on other platforms.)\n-The \\f[V]javadoc\\f[R] tool searches all subdirectories of the specified\n-paths.\n-.TP\n-\\f[V]-top\\f[R] \\f[I]html-code\\f[R]\n-Specifies the text to be placed at the top of each output file.\n-.TP\n-\\f[V]-use\\f[R]\n-Creates class and package usage pages.\n-Includes one Use page for each documented class and package.\n-The page describes what packages, classes, methods, constructors, and\n-fields use any API of the specified class or package.\n-Given class C, things that use class C would include subclasses of C,\n-fields declared as C, methods that return C, and methods and\n-constructors with parameters of type C.\n-For example, you can look at the Use page for the \\f[V]String\\f[R] type.\n-Because the \\f[V]getName\\f[R] method in the \\f[V]java.awt.Font\\f[R]\n-class returns type \\f[V]String\\f[R], the \\f[V]getName\\f[R] method uses\n-\\f[V]String\\f[R] and so the \\f[V]getName\\f[R] method appears on the Use\n-page for \\f[V]String\\f[R].\n-This documents only uses of the API, not the implementation.\n-When a method uses \\f[V]String\\f[R] in its implementation, but\n-doesn\\[aq]t take a string as an argument or return a string, that\n-isn\\[aq]t considered a use of \\f[V]String\\f[R].\n-To access the generated Use page, go to the class or package and click\n-the \\f[B]USE\\f[R] link in the navigation bar.\n-.TP\n-\\f[V]-version\\f[R]\n-Includes the text of any \\f[V]version\\f[R] tags in the generated\n-documentation.\n-This text is omitted by default.\n-Note: To find out what version of the \\f[V]javadoc\\f[R] tool you are\n-using, use the \\f[V]--version\\f[R] option (with two hyphens).\n-.TP\n-\\f[V]-windowtitle\\f[R] \\f[I]title\\f[R]\n-Specifies the title to be placed in the HTML \\f[V]<title>\\f[R] tag.\n-The text specified in the \\f[V]title\\f[R] tag appears in the window\n-title and in any browser bookmarks (favorite places) that someone\n-creates for this page.\n-This title should not contain any HTML tags because a browser will not\n-interpret them correctly.\n-Use escape characters on any internal quotation marks within the\n-\\f[V]title\\f[R] tag.\n-If the \\f[V]-windowtitle\\f[R] option is omitted, then the\n-\\f[V]javadoc\\f[R] tool uses the value of the \\f[V]-doctitle\\f[R] option\n-for the \\f[V]-windowtitle\\f[R] option.\n-For example,\n-\\f[V]javadoc -windowtitle \\[dq]My Library\\[dq] com.mypackage\\f[R].\n-.SS Extra Options for the Standard Doclet\n-.PP\n-The following are additional options provided by the standard doclet and\n-are subject to change without notice.\n-Additional options are less commonly used or are otherwise regarded as\n-advanced.\n-.TP\n-\\f[V]--date\\f[R] \\f[I]date-and-time\\f[R]\n-Specifies the value to be used to timestamp the generated pages, in\n-\\f[B]ISO 8601\\f[R]\n-[https:\/\/www.iso.org\/iso-8601-date-and-time-format.html] format.\n-The specified value must be within 10 years of the current date and\n-time.\n-It is an error to specify both \\f[V]-notimestamp\\f[R] and\n-\\f[V]--date\\f[R].\n-Using a specific value means the generated documentation can be part of\n-a \\f[B]reproducible build\\f[R] [https:\/\/reproducible-builds.org\/].\n-If the option is not given, the default value is the current date and\n-time.\n-For example:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-javadoc --date 2022-02-01T17:41:59-08:00 mypackage\n-\\f[R]\n-.fi\n-.RE\n-.TP\n-\\f[V]--legal-notices\\f[R] (\\f[V]default\\f[R]|\\f[V]none\\f[R]|\\f[I]directory\\f[R])\n-Specifies the location from which to copy legal files to the generated\n-documentation.\n-If the option is not specified or is used with the value\n-\\f[V]default\\f[R], the files are copied from the default location.\n-If the argument is used with value \\f[V]none\\f[R], no files are copied.\n-Every other argument is interpreted as directory from which to copy the\n-legal files.\n-.TP\n-\\f[V]--no-frames\\f[R]\n-This option is no longer supported and reports a warning.\n-.TP\n-\\f[V]-Xdoclint\\f[R]\n-Enables recommended checks for problems in documentation comments.\n-.RS\n-.PP\n-By default, the \\f[V]-Xdoclint\\f[R] option is enabled.\n-Disable it with the option \\f[V]-Xdoclint:none\\f[R].\n-.PP\n-For more details, see \\f[B]DocLint\\f[R].\n-.RE\n-.TP\n-\\f[V]-Xdoclint:\\f[R]\\f[I]flag\\f[R],\\f[I]flag\\f[R],...\n-Enables or disables specific checks for different kinds of issues in\n-documentation comments.\n-.RS\n-.PP\n-Each \\f[I]flag\\f[R] can be one of \\f[V]all\\f[R], \\f[V]none\\f[R], or\n-\\f[V][-]\\f[R]\\f[I]group\\f[R] where \\f[I]group\\f[R] has one of the\n-following values: \\f[V]accessibility\\f[R], \\f[V]html\\f[R],\n-\\f[V]missing\\f[R], \\f[V]reference\\f[R], \\f[V]syntax\\f[R].\n-For more details on these values, see \\f[B]DocLint Groups\\f[R].\n-.PP\n-When specifying two or more flags, you can either use a single\n-\\f[V]-Xdoclint:...\\f[R] option, listing all the desired flags, or you\n-can use multiple options giving one or more flag in each option.\n-For example, use either of the following commands to check for the HTML,\n-syntax, and accessibility issues in the file \\f[V]MyFile.java\\f[R].\n-.IP\n-.nf\n-\\f[CB]\n-javadoc -Xdoclint:html -Xdoclint:syntax -Xdoclint:accessibility MyFile.java\n-javadoc -Xdoclint:html,syntax,accessibility MyFile.java\n-\\f[R]\n-.fi\n-.PP\n-The following examples illustrate how to change what DocLint reports:\n-.IP \\[bu] 2\n-\\f[V]-Xdoclint:none\\f[R] --- disables all checks\n-.IP \\[bu] 2\n-\\f[V]-Xdoclint:\\f[R]\\f[I]group\\f[R] --- enables \\f[I]group\\f[R] checks\n-.IP \\[bu] 2\n-\\f[V]-Xdoclint:all\\f[R] --- enables all groups of checks\n-.IP \\[bu] 2\n-\\f[V]-Xdoclint:all,-\\f[R]\\f[I]group\\f[R] --- enables all checks except\n-\\f[I]group\\f[R] checks\n-.PP\n-For more details, see \\f[B]DocLint\\f[R].\n-.RE\n-.TP\n-\\f[V]-Xdoclint\/package:\\f[R][\\f[V]-\\f[R]]\\f[I]packages\\f[R]\n-Enables or disables checks in specific packages.\n-\\f[I]packages\\f[R] is a comma separated list of package specifiers.\n-A package specifier is either a qualified name of a package or a package\n-name prefix followed by \\f[V]*\\f[R], which expands to all subpackages of\n-the given package.\n-Prefix the package specifier with \\f[V]-\\f[R] to disable checks for the\n-specified packages.\n-.RS\n-.PP\n-For more details, see \\f[B]DocLint\\f[R].\n-.RE\n-.TP\n-\\f[V]-Xdocrootparent\\f[R] \\f[I]url\\f[R]\n-Replaces all \\f[V]\\[at]docRoot\\f[R] items followed by \\f[V]\/..\\f[R] in\n-documentation comments with \\f[I]url\\f[R].\n-.SH DOCLINT\n-.PP\n-DocLint provides the ability to check for possible problems in\n-documentation comments.\n-Problems may be reported as warnings or errors, depending on their\n-severity.\n-For example, a missing comment may be bad style that deserves a warning,\n-but a link to an unknown Java declaration is more serious and deserves\n-an error.\n-Problems are organized into \\f[B]groups\\f[R], and options can be used to\n-enable or disable messages in one or more groups.\n-Within the source code, messages in one or more groups can be\n-\\f[B]suppressed\\f[R] by using \\f[V]\\[at]SuppressWarnings\\f[R]\n-annotations.\n-.PP\n-When invoked from \\f[V]javadoc\\f[R], by default DocLint checks all\n-comments that are used in the generated documentation.\n-It thus relies on other command-line options to determine which\n-declarations, and which corresponding documentation comments will be\n-included.\n-\\f[I]Note:\\f[R] this may mean that even comments on some private members\n-of serializable classes will also be checked, if the members need to be\n-documented in the generated \\f[V]Serialized Forms\\f[R] page.\n-.PP\n-In contrast, when DocLint is invoked from \\f[V]javac\\f[R], DocLint\n-solely relies on the various \\f[V]-Xdoclint...\\f[R] options to determine\n-which documentation comments to check.\n-.PP\n-DocLint doesn\\[aq]t attempt to fix invalid input, it just reports it.\n-.PP\n-\\f[I]Note:\\f[R] DocLint doesn\\[aq]t guarantee the completeness of these\n-checks.\n-In particular, it isn\\[aq]t a full HTML compliance checker.\n-The goal is to just report common errors in a convenient manner.\n-.SS Groups\n-.PP\n-The checks performed by DocLint are organized into groups.\n-The warnings and errors in each group can be enabled or disabled with\n-command-line options, or suppressed with \\f[V]\\[at]SuppressWarnings\\f[R]\n-annotations.\n-.PP\n-The groups are as follows:\n-.IP \\[bu] 2\n-\\f[V]accessibility\\f[R] --- Checks for issues related to accessibility.\n-For example, no \\f[V]alt\\f[R] attribute specified in an \\f[V]<img>\\f[R]\n-element, or no caption or summary attributes specified in a\n-\\f[V]<table>\\f[R] element.\n-.RS 2\n-.PP\n-Issues are reported as errors if a downstream validation tool might be\n-expected to report an error in the files generated by \\f[V]javadoc\\f[R].\n-.PP\n-For reference, see the \\f[B]Web Content Accessibility Guidelines\\f[R]\n-[https:\/\/www.w3.org\/WAI\/standards-guidelines\/wcag\/].\n-.RE\n-.IP \\[bu] 2\n-\\f[V]html\\f[R] --- Detects common high-level HTML issues.\n-For example, putting block elements inside inline elements, or not\n-closing elements that require an end tag.\n-.RS 2\n-.PP\n-Issues are reported as errors if a downstream validation tool might be\n-expected to report an error in the files generated by \\f[V]javadoc\\f[R].\n-.PP\n-For reference, see the \\f[B]HTML Living Standard\\f[R]\n-[https:\/\/html.spec.whatwg.org\/multipage\/].\n-.RE\n-.IP \\[bu] 2\n-\\f[V]missing\\f[R] --- Checks for missing documentation comments or tags.\n-For example, a missing comment on a class declaration, or a missing\n-\\f[V]\\[at]param\\f[R] or \\f[V]\\[at]return\\f[R] tag in the comment for a\n-method declaration.\n-.RS 2\n-.PP\n-Issues related to missing items are typically reported as warnings\n-because they are unlikely to be reported as errors by downstream\n-validation tools that may be used to check the output generated by\n-\\f[V]javadoc\\f[R].\n-.RE\n-.IP \\[bu] 2\n-\\f[V]reference\\f[R] --- Checks for issues relating to the references to\n-Java API elements from documentation comment tags.\n-For example, the reference in \\f[V]\\[at]see\\f[R] or\n-\\f[V]{\\[at]link ...}\\f[R] cannot be found, or a bad name is given for\n-\\f[V]\\[at]param\\f[R] or \\f[V]\\[at]throws\\f[R].\n-.RS 2\n-.PP\n-Issues are typically reported as errors because while the issue may not\n-cause problems in the generated files, the author has likely made a\n-mistake that will lead to incorrect or unexpected documentation.\n-.RE\n-.IP \\[bu] 2\n-\\f[V]syntax\\f[R] --- Checks for low-level syntactic issues in\n-documentation comments.\n-For example, unescaped angle brackets (\\f[V]<\\f[R] and \\f[V]>\\f[R]) and\n-ampersands (\\f[V]&\\f[R]) and invalid documentation comment tags.\n-.RS 2\n-.PP\n-Issues are typically reported as errors because the issues may lead to\n-incorrect or unexpected documentation.\n-.RE\n-.SS Suppressing Messages\n-.PP\n-DocLint checks for and recognizes two strings that may be present in the\n-arguments for an \\f[V]\\[at]SuppressWarnings\\f[R] annotation.\n-.IP \\[bu] 2\n-\\f[V]doclint\\f[R]\n-.IP \\[bu] 2\n-\\f[V]doclint:\\f[R]\\f[I]LIST\\f[R]\n-.PP\n-where \\f[I]LIST\\f[R] is a comma-separated list of one or more of\n-\\f[V]accessibility\\f[R], \\f[V]html\\f[R], \\f[V]missing\\f[R],\n-\\f[V]reference\\f[R], \\f[V]syntax\\f[R].\n-.PP\n-The names in \\f[I]LIST\\f[R] are the same \\f[B]group\\f[R] names supported\n-by the command-line \\f[V]-Xdoclint\\f[R] option for \\f[V]javac\\f[R] and\n-\\f[V]javadoc\\f[R].\n-(This is the same convention honored by the \\f[V]javac\\f[R]\n-\\f[V]-Xlint\\f[R] option and the corresponding names supported by\n-\\f[V]\\[at]SuppressWarnings\\f[R].)\n-.PP\n-The names in \\f[I]LIST\\f[R] can equivalently be specified in separate\n-arguments of the annotation.\n-For example, the following are equivalent:\n-.IP \\[bu] 2\n-\\f[V]\\[at]SuppressWarnings(\\[dq]doclint:accessibility,missing\\[dq])\\f[R]\n-.IP \\[bu] 2\n-\\f[V]\\[at]SuppressWarnings(\\[dq]doclint:accessibility\\[dq], \\[dq]doclint:missing\\[dq])\\f[R]\n-.PP\n-When DocLint detects an issue in a documentation comment, it checks for\n-the presence of \\f[V]\\[at]SuppressWarnings\\f[R] on the associated\n-declaration and on all lexically enclosing declarations.\n-The issue will be ignored if any such annotation is found containing the\n-simple string \\f[V]doclint\\f[R] or the longer form\n-\\f[V]doclint:LIST\\f[R] where \\f[I]LIST\\f[R] contains the name of the\n-group for the issue.\n-.PP\n-\\f[I]Note:\\f[R] as with other uses of \\f[V]\\[at]SuppressWarnings\\f[R],\n-using the annotation on a module or package declaration only affects\n-that declaration; it does not affect the contents of the module or\n-package in other source files.\n-.PP\n-All messages related to an issue are suppressed by the presence of an\n-appropriate \\f[V]\\[at]SuppressWarnings\\f[R] annotation: this includes\n-errors as well as warnings.\n-.PP\n-\\f[I]Note:\\f[R] It is only possible to \\f[I]suppress\\f[R] messages.\n-If an annotation of \\f[V]\\[at]SuppressWarnings(\\[dq]doclint\\[dq])\\f[R]\n-is given on a top-level declaration, all DocLint messages for that\n-declaration and any enclosed declarations will be suppressed; it is not\n-possible to selectively re-enable messages for issues in enclosed\n-declarations.\n-.SS Comparison with downstream validation tools\n-.PP\n-DocLint is a utility built into \\f[V]javac\\f[R] and \\f[V]javadoc\\f[R]\n-that checks the content of documentation comments, as found in source\n-files.\n-In contrast, downstream validation tools can be used to validate the\n-output generated from those documentation comments by \\f[V]javadoc\\f[R]\n-and the standard doclet.\n-.PP\n-Although there is some overlap in functionality, the two mechanisms are\n-different and each has its own strengths and weaknesses.\n-.IP \\[bu] 2\n-Downstream validation tools can check the end result of any generated\n-documentation, as it will be seen by the end user.\n-This includes content from all sources, including documentation\n-comments, the standard doclet itself, user-provided taglets, and content\n-supplied via command-line options.\n-Because such tools are analyzing complete HTML pages, they can do more\n-complete checks than can DocLint.\n-However, when a problem is found in the generated pages, it can be\n-harder to track down exactly where in the build pipeline the problem\n-needs to be fixed.\n-.IP \\[bu] 2\n-DocLint checks the content of documentation comments, in source files.\n-This makes it very easy to identify the exact position of any issues\n-that may be found.\n-DocLint can also detect some semantic errors in documentation comments\n-that downstream tools cannot detect, such as missing comments, using an\n-\\f[V]\\[at]return\\f[R] tag in a method returning \\f[V]void\\f[R], or an\n-\\f[V]\\[at]param\\f[R] tag describing a non-existent parameter.\n-But by its nature, DocLint cannot report on problems such as missing\n-links, or errors in user-provided custom taglets, or problems in the\n-standard doclet itself.\n-It also cannot reliably detect errors in documentation comments at the\n-boundaries between content in a documentation comment and content\n-generated by a custom taglet.\n","filename":"src\/jdk.javadoc\/share\/man\/javadoc.1","additions":0,"deletions":1526,"binary":false,"changes":1526,"status":"deleted"},{"patch":"@@ -0,0 +1,1214 @@\n+---\n+# Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JAVADOC(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+javadoc - generate HTML pages of API documentation from Java source files\n+\n+## Synopsis\n+\n+`javadoc` \\[*options*\\] \\[*packagenames*\\] \\[*sourcefiles*\\] \\[`@`*files*\\]\n+\n+*options*\n+:   Specifies command-line options, separated by spaces. See [Standard `javadoc`\n+    Options], [Extra `javadoc` Options], [Standard Options for the Standard Doclet],\n+    and [Extra Options for the Standard Doclet].\n+\n+*packagenames*\n+:   Specifies names of packages that you want to document, separated by spaces,\n+    for example `java.lang java.lang.reflect java.awt`. If you want to also\n+    document the subpackages, then use the `-subpackages` option to specify the\n+    packages.\n+\n+    By default, `javadoc` looks for the specified packages in the current\n+    directory and subdirectories. Use the `-sourcepath` option to specify the\n+    list of directories where to look for packages.\n+\n+*sourcefiles*\n+:   Specifies names of Java source files that you want to document, separated\n+    by spaces, for example `Class.java Object.java Button.java`. By default,\n+    `javadoc` looks for the specified classes in the current directory.\n+    However, you can specify the full path to the class file and use wildcard\n+    characters, for example `\/home\/src\/java\/awt\/Graphics*.java`. You can also\n+    specify the path relative to the current directory.\n+\n+`@`*files*\n+:   Specifies names of files that contain a list of `javadoc` tool options,\n+    package names, and source file names in any order.\n+\n+## Description\n+\n+The `javadoc` tool parses the declarations and documentation comments in a set\n+of Java source files and processes them using a pluggable back-end called a\n+[_doclet_][doclet].\n+\n+The [_standard doclet_][standard-doclet] is the one that is used by default,\n+and can produce corresponding HTML pages that describe the public and protected\n+classes, nested and implicitly declared classes (but not anonymous inner classes),\n+interfaces, constructors, methods, and fields. The standard doclet interprets\n+the content of documentation comments according to the\n+[JavaDoc Documentation Comment Specification for the Standard Doclet][doc-comment-spec].\n+Custom tags in documentation comments are supported by means of [taglets][taglet].\n+\n+You can use the `javadoc` tool and the standard doclet to generate the API\n+documentation or the implementation documentation for a set of source files.\n+\n+You can run the `javadoc` tool on entire packages, individual source files, or\n+both. When documenting entire packages, you can use the `-subpackages` option\n+either to recursively traverse a directory and its subdirectories, or to pass\n+in an explicit list of package names. When you document individual source\n+files, pass in a list of Java source file names.\n+\n+### Documentation Comments\n+\n+The `javadoc` tool uses the documentation comment, if any, that immediately\n+precedes the beginning of the declaration, whether that is an annotation,\n+modifier, or the name being declared. If there are multiple documentation\n+comments before the declaration, only the last one (closest to the declaration)\n+will be used.  If there are any documentation comments after the beginning of\n+the declaration, they will be ignored.  To check for any extra or misplaced\n+documentation comments, compile your source code with the `javac` option\n+`-Xlint`, or more specifically, `-Xlint:dangling-doc-comments`. Within a\n+source file, you may suppress any warnings generated by these options\n+by using `@SuppressWarnings(\"dangling-doc-comments\")` on a suitable enclosing\n+declaration.\n+\n+[doc-comment-spec]: ..\/javadoc\/doc-comment-spec.html\n+[doclet]: ..\/..\/api\/jdk.javadoc\/jdk\/javadoc\/doclet\/Doclet.html\n+[standard-doclet]: ..\/..\/api\/jdk.javadoc\/jdk\/javadoc\/doclet\/StandardDoclet.html\n+[taglet]: ..\/..\/api\/jdk.javadoc\/jdk\/javadoc\/doclet\/Taglet.html\n+\n+### Conformance\n+\n+The standard doclet does not validate the content of documentation comments for\n+conformance, nor does it attempt to correct any errors in documentation\n+comments. Anyone running javadoc is advised to be aware of the problems that\n+may arise when generating non-conformant output or output containing executable\n+content, such as JavaScript. The standard doclet does provide the [DocLint](#doclint)\n+feature to help developers detect common problems in documentation comments;\n+but it is also recommended to check the generated output with any appropriate\n+conformance and other checking tools.\n+\n+For more details on the conformance requirements for HTML5 documents, see\n+[Conformance requirements for authors](\n+https:\/\/html.spec.whatwg.org\/multipage\/introduction.html#conformance-requirements-for-authors)\n+in the HTML5 Specification. For more details on security issues related to web\n+pages, see the [Open Web Application Security Project (OWASP)](\n+https:\/\/www.owasp.org) page.\n+\n+## Options\n+\n+`javadoc` supports command-line options for both the main `javadoc` tool\n+and the currently selected doclet. The standard doclet is used if no other\n+doclet is specified.\n+\n+GNU-style options (that is, those beginning with `--`) can use an equal sign\n+(`=`) instead of whitespace characters to separate the name of an option from\n+its value.\n+\n+### Standard `javadoc` Options\n+\n+The following core `javadoc` options are equivalent to corresponding `javac`\n+options. See *Standard Options* in [javac](javac.html) for the detailed\n+descriptions of using these options:\n+\n+* <span id=\"option-add-modules\">`--add-modules`<\/span>\n+* <span id=\"option-bootclasspath\">`-bootclasspath`<\/span>\n+* <span id=\"option-class-path\">`--class-path`, `-classpath`, or `-cp`<\/span>\n+* <span id=\"option-disable-line-doc-comments\">`--disable-line-doc-comments`<\/span>\n+* <span id=\"option-enable-preview\">`--enable-preview`<\/span>\n+* <span id=\"option-encoding\">`-encoding`<\/span>\n+* <span id=\"option-extdirs\">`-extdirs`<\/span>\n+* <span id=\"option-limit-modules\">`--limit-modules`<\/span>\n+* <span id=\"option-module\">`--module`<\/span>\n+* <span id=\"option-module-path\">`--module-path` or `-p`<\/span>\n+* <span id=\"option-module-source-path\">`--module-source-path`<\/span>\n+* <span id=\"option-release\">`--release`<\/span>\n+* <span id=\"option-source\">`--source` or `-source`<\/span>\n+* <span id=\"option-source-path\">`--source-path` or `-sourcepath`<\/span>\n+* <span id=\"option-system\">`--system`<\/span>\n+* <span id=\"option-upgrade-module-path\">`--upgrade-module-path`<\/span>\n+\n+The following options are the core `javadoc` options that are not equivalent to\n+a corresponding `javac` option:\n+\n+<span id=\"option-breakiterator\">`-breakiterator`<\/span>\n+:   Computes the first sentence of the description in a documentation comment\n+    using an instance of `java.text.BreakIterator` to detect _sentence breaks_.\n+    The rules that are used depend on the [current locale](#option-locale):\n+    for example, for English, a sentence break occurs after a period, question mark,\n+    or exclamation point followed by a space when the next word starts with a\n+    capital letter. (This is meant to handle most abbreviations, such as\n+    \"The serial no. is valid\", but will not handle \"Mr. Smith\".)\n+\n+    The option is enabled by default if the language of the current locale is\n+    not English. If the language of the current locale is English, and the\n+    `-breakiterator` option is not given, a simple default algorithm is used,\n+    which just looks for a period followed by a space.\n+\n+    In a traditional `\/**...*\/` comment, the search for the end of the first\n+    sentence is terminated by an HTML block tag, such as `<p>`, `<pre>`, or\n+    the tag for a heading.\n+\n+    In a Markdown `\/\/\/` comment, the search for the end of the first sentence\n+    skips over any characters enclosed in code spans and links, and is\n+    terminated by the end of the initial block, as indicated by a\n+    blank line or the beginning of the next block, such as a list, thematic break,\n+    or an HTML block.\n+\n+    The first sentence of the description in a documentation comment is used in\n+    summary tables, index pages, and other situations where a short summary is\n+    required. For more explicit control in any individual documentation comment,\n+    enclose the contents of the first sentence in a `{@summary ...}` tag, or\n+    when applicable, in a `{@return ...}` tag.\n+\n+<span id=\"option-doclet\">`-doclet` *class*<\/span>\n+:   Generates output by using an alternate doclet. Use the fully qualified\n+    name. This doclet defines the content and formats the output. If the\n+    `-doclet` option isn't used, then the `javadoc` tool uses the standard\n+    doclet for generating the default HTML format. This class must implement\n+    the `jdk.javadoc.doclet.Doclet` interface. The path to this class is\n+    defined by the `-docletpath` option.\n+\n+<span id=\"option-docletpath\">`-docletpath` *path*<\/span>\n+:   Specifies where to find doclet class files (specified with the `-doclet`\n+    option) and any JAR files it depends on. If the starting class file is in a\n+    JAR file, then this option specifies the path to that JAR file. You can\n+    specify an absolute path or a path relative to the current directory. If\n+    `path` contains multiple paths or JAR files, then they should be\n+    separated with a colon (`:`) on Linux and macOS, and a semicolon (`;`) on\n+    Windows. This option isn't necessary when the `doclet` starting class is\n+    already in the search path.\n+\n+<span id=\"option-exclude\">`-exclude` *pkglist*<\/span>\n+:   Unconditionally, excludes the specified packages and their subpackages from\n+    the list formed by `-subpackages`. It excludes those packages even when\n+    they would otherwise be included by some earlier or later `-subpackages`\n+    option.\n+\n+    The following example would include `java.io`, `java.util`, and `java.math`\n+    (among others), but would exclude packages rooted at `java.net` and\n+    `java.lang`. Notice that these examples exclude `java.lang.ref`, which is a\n+    subpackage of `java.lang`. Arguments are separated by colons on all\n+    operating systems.\n+\n+    -   **Linux and macOS:**\n+\n+        ```\n+        javadoc -sourcepath \/home\/user\/src -subpackages java -exclude java.net:java.lang\n+        ```\n+\n+    -   **Windows:**\n+\n+        ```\n+        javadoc -sourcepath \\user\\src -subpackages java -exclude java.net:java.lang\n+        ```\n+\n+<span id=\"option-expand-requires\">`--expand-requires` (`transitive`|`all`)<\/span>\n+:   Instructs the javadoc tool to expand the set of modules to be documented.\n+    By default, only the modules given explicitly on the command line are\n+    documented. Supports the following values:\n+\n+    -   `transitive`: additionally includes all the required transitive\n+        dependencies of those modules.\n+\n+    -   `all`: includes all dependencies.\n+\n+<span id=\"option-help\">`--help`, `-help`, `-h`, or `-?`<\/span>\n+:   Prints a synopsis of the standard options.\n+\n+<span id=\"option-help-extra\">`--help-extra` or `-X`<\/span>\n+:   Prints a synopsis of the set of extra options.\n+\n+<span id=\"option-J\">`-J`*flag*<\/span>\n+:   Passes *flag* directly to the Java Runtime Environment (JRE) that runs the\n+    `javadoc` tool. For example, if you must ensure that the system sets aside\n+    32 MB of memory in which to process the generated documentation, then you\n+    would call the `-Xmx` option as follows:\n+    `javadoc -J-Xmx32m -J-Xms32m com.mypackage`. Be aware that `-Xms` is\n+    optional because it only sets the size of initial memory, which is useful\n+    when you know the minimum amount of memory required.\n+\n+    There is no space between the `J` and the `flag`.\n+\n+    Use the `-version` option to report the version of the JRE being used to\n+    run the `javadoc` tool.\n+\n+    ```\n+    javadoc -J-version\n+    java version \"17\" 2021-09-14 LTS\n+    Java(TM) SE Runtime Environment (build 17+35-LTS-2724)\n+    Java HotSpot(TM) 64-Bit Server VM (build 17+35-LTS-2724, mixed mode, sharing)\n+    ```\n+\n+<span id=\"option-locale\">`-locale` *name*<\/span>\n+:   Specifies the locale that the `javadoc` tool uses when it generates\n+    documentation. The argument is the name of the locale, as described in\n+    `java.util.Locale` documentation, such as `en_US` (English, United States)\n+    or `en_US_WIN` (Windows variant).\n+\n+    Specifying a locale causes the `javadoc` tool to choose the resource files\n+    of that locale for messages such as strings in the navigation bar, headings\n+    for lists and tables, help file contents, comments in the `stylesheet.css`\n+    file, and so on. It also specifies the sorting order for lists sorted\n+    alphabetically, and the sentence separator to determine the end of the\n+    first sentence. The `-locale` option doesn't determine the locale of the\n+    documentation comment text specified in the source files of the documented\n+    classes.\n+\n+<span id=\"option-package\">`-package`<\/span>\n+:   Shows only package, protected, and public classes and members.\n+\n+<span id=\"option-private\">`-private`<\/span>\n+:   Shows all classes and members.\n+\n+<span id=\"option-protected\">`-protected`<\/span>\n+:   Shows only protected and public classes and members. This is the default.\n+\n+<span id=\"option-public\">`-public`<\/span>\n+:   Shows only the public classes and members.\n+\n+<span id=\"option-quiet\">`-quiet`<\/span>\n+:   Shuts off messages so that only the warnings and errors appear to make them\n+    easier to view. It also suppresses the `version` string.\n+\n+<span id=\"option-show-members\">`--show-members` *value*<\/span>\n+:   Specifies which members (fields, methods, or constructors) are documented,\n+    where *value* can be any of the following:\n+\n+    * `public` --- shows only public members\n+    * `protected` --- shows public and protected members; this is the default\n+    * `package` --- shows public, protected, and package members\n+    * `private` --- shows all members\n+\n+<span id=\"option-show-module-contents\">`--show-module-contents` *value*<\/span>\n+:   Specifies the documentation granularity of module declarations, where\n+    *value* can be `api` or `all`.\n+\n+<span id=\"option-show-packages\">`--show-packages` *value*<\/span>\n+:   Specifies which module packages are documented, where *value* can be\n+    `exported` or `all` packages.\n+\n+<span id=\"option-show-types\">`--show-types` *value*<\/span>\n+:   Specifies which types (classes, interfaces, etc.) are documented, where\n+    *value* can be any of the following:\n+\n+    * `public` --- shows only public types\n+    * `protected` --- shows public and protected types; this is the default\n+    * `package` --- shows public, protected, and package types\n+    * `private` --- shows all types\n+\n+<span id=\"option-subpackages\">`-subpackages` *subpkglist*<\/span>\n+:   Generates documentation from source files in the specified packages and\n+    recursively in their subpackages. This option is useful when adding new\n+    subpackages to the source code because they are automatically included.\n+    Each package argument is any top-level subpackage (such as `java`) or fully\n+    qualified package (such as `javax.swing`) that doesn't need to contain\n+    source files. Arguments are separated by colons on all operating systems.\n+    Wild cards aren't allowed. Use `-sourcepath` to specify where to find the\n+    packages. This option doesn't process source files that are in the source\n+    tree but don't belong to the packages.\n+\n+    For example, the following commands generates documentation for packages\n+    named `java` and `javax.swing` and all of their subpackages.\n+\n+    -   **Linux and macOS:**\n+\n+        ```\n+        javadoc -d docs -sourcepath \/home\/user\/src -subpackages java:javax.swing\n+        ```\n+\n+    -   **Windows:**\n+\n+        ```\n+        javadoc -d docs -sourcepath \\user\\src -subpackages java:javax.swing\n+        ```\n+\n+<span id=\"option-verbose\">`-verbose`<\/span>\n+:   Provides more detailed messages while the `javadoc` tool runs. Without the\n+    `-verbose` option, messages appear for loading the source files, generating\n+    the documentation (one message per source file), and sorting. The\n+    `-verbose` option causes the printing of additional messages that specify\n+    the number of milliseconds to parse each Java source file.\n+\n+<span id=\"option--version\">`--version`<\/span>\n+:   Prints version information.\n+\n+<span id=\"option-Werror\">`-Werror`<\/span>\n+:   Reports an error if any warnings occur.\n+\n+Note that if a Java source file contains an implicitly declared class, then\n+that class and its public, protected, and package members will be documented\n+regardless of the options such as `--show-types`, `--show-members`, `-private`,\n+`-protected`, `-package`, and `-public`. If  `--show-members` is specified with\n+value `private` or if `-private` is used then all private members of an\n+implicitly declared class will be documented too.\n+\n+### Extra `javadoc` Options\n+\n+_Note:_ The additional options for `javadoc` are subject to change without\n+notice.\n+\n+The following additional `javadoc` options are equivalent to corresponding\n+`javac` options. See *Extra Options* in [javac](javac.html) for the detailed\n+descriptions of using these options:\n+\n+* <span id=\"option-add-exports\">`--add-exports`<\/span>\n+* <span id=\"option-add-reads\">`--add-reads`<\/span>\n+* <span id=\"option-patch-module\">`--patch-module`<\/span>\n+* <span id=\"option-Xmaxerrs\">`-Xmaxerrs`<\/span>\n+* <span id=\"option-Xmaxwarns\">`-Xmaxwarns`<\/span>\n+\n+### Standard Options for the Standard Doclet\n+\n+The following options are provided by the standard doclet.\n+\n+<span id=\"option-add-script\">`--add-script` *file*<\/span>\n+:   Adds *file* as an additional JavaScript file to the generated documentation.\n+    This option can be used one or more times to specify additional script\n+    files.\n+\n+    Command-line example:\n+\n+    >   `javadoc --add-script first_script.js --add-script\n+        second_script.js pkg_foo`\n+\n+<span id=\"option-add-stylesheet\">`--add-stylesheet` *file*<\/span>\n+:   Adds *file* as an additional stylesheet file to the generated documentation.\n+    This option can be used one or more times to specify additional stylesheets\n+    included in the documentation.\n+\n+    Command-line example:\n+\n+    ```\n+    javadoc --add-stylesheet new_stylesheet_1.css --add-stylesheet new_stylesheet_2.css pkg_foo\n+    ```\n+\n+<span id=\"option-allow-script-in-comments\">`--allow-script-in-comments`<\/span>\n+:   Allow JavaScript in documentation comments, and options whose value is\n+    _html-code_.\n+\n+<span id=\"option-author\">`-author`<\/span>\n+:   Includes the text of any `author` tags in the generated documentation.\n+\n+<span id=\"option-bottom\">`-bottom` *html-code*<\/span>\n+:   Specifies the text to be placed at the bottom of each generated page.\n+    The text can contain HTML tags and white space, but when it does, the text\n+    must be enclosed in quotation marks. Use escape characters for any internal\n+    quotation marks within text.\n+\n+<span id=\"option-charset\">`-charset` *name*<\/span>\n+:   Specifies the HTML character set for this document. The name should be a\n+    preferred MIME name as specified in the [IANA Registry, Character Sets](\n+    http:\/\/www.iana.org\/assignments\/character-sets).\n+\n+    For example:\n+\n+    ```\n+    javadoc -charset \"iso-8859-1\" mypackage\n+    ```\n+\n+    This command inserts the following line, containing a\n+    [`meta` element](https:\/\/html.spec.whatwg.org\/multipage\/semantics.html#the-meta-element)\n+    in the head of every generated page:\n+\n+    ```\n+    <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=ISO-8859-1\">\n+    ```\n+\n+<span id=\"option-d\">`-d` *directory*<\/span>\n+:   Specifies the destination directory where the `javadoc` tool saves the\n+    generated HTML files. If you omit the `-d` option, then the files are saved\n+    to the current directory. The `directory` value can be absolute or relative\n+    to the current working directory. The destination directory is\n+    automatically created when the `javadoc` tool runs.\n+\n+    -   **Linux and macOS:** For example, the following command\n+        generates the documentation for the package `com.mypackage` and saves\n+        the results in the `\/user\/doc\/` directory:\n+\n+        ```\n+        javadoc -d \/user\/doc\/ com.mypackage\n+        ```\n+\n+    -   **Windows:** For example, the following command generates the\n+        documentation for the package `com.mypackage` and saves the results in\n+        the `\\user\\doc\\` directory:\n+\n+        ```\n+        javadoc -d \\user\\doc\\ com.mypackage\n+        ```\n+\n+<span id=\"option-docencoding\">`-docencoding` *name*<\/span>\n+:   Specifies the encoding of the generated HTML files. The name should be a\n+    preferred MIME name as specified in the [IANA Registry, Character Sets](\n+    http:\/\/www.iana.org\/assignments\/character-sets).\n+\n+    Three options are available for use in a `javadoc` encoding command. The\n+    `-encoding` option is used for encoding the files read by the `javadoc`\n+    tool, while the `-docencoding` and `-charset` options are used for encoding\n+    the files written by the tool. Of the three available options, at most,\n+    only the input and an output encoding option are used in a single encoding\n+    command. If you specify both input and output encoding options in a\n+    command, they must be the same value. If you specify neither output option,\n+    it defaults to the input encoding.\n+\n+    For example:\n+\n+    ```\n+    javadoc -docencoding \"iso-8859-1\" mypackage\n+    ```\n+\n+<span id=\"option-docfilessubdirs\">`-docfilessubdirs`<\/span>\n+:   Enables deep copying of `doc-files` directories. Subdirectories and all\n+    contents are recursively copied to the destination. For example, the\n+    directory `doc-files\/example\/images` and all of its contents are copied.\n+    Use the [`-excludedocfilessubdir`](#option-excludedocfilessubdir) option to\n+    restrict the subdirectories to be copied.\n+\n+<span id=\"option-doctitle\">`-doctitle` *html-code*<\/span>\n+:   Specifies the title to place near the top of the overview summary file. The\n+    text specified in the `title` tag is placed as a centered, level-one\n+    heading directly beneath the navigation bar. The `title` tag can\n+    contain HTML tags and white space, but when it does, you must enclose the\n+    title in quotation marks. Additional quotation marks within the `title` tag\n+    must be escaped. For example,\n+    `javadoc -doctitle \"<b>My Library<\/b><br>v1.0\" com.mypackage`.\n+\n+<span id=\"option-excludedocfilessubdir\">`-excludedocfilessubdir` *name1*`,`*name2...*<\/span>\n+:   Excludes any subdirectories with the given names\n+    when recursively copying `doc-files` subdirectories.\n+    See [`-docfilessubdirs`](#option-docfilessubdirs).\n+    For historical reasons, `:` can be used anywhere in the argument as a\n+    separator instead of `,`.\n+\n+<span id=\"option-footer\">`-footer` *html-code*<\/span>\n+:   This option is no longer supported and reports a warning.\n+\n+<span id=\"option-group\">`-group` *name* *p1*`,`*p2...*<\/span>\n+:   Group the specified packages together in the Overview page.\n+    For historical reasons, `:` can be used as a separator anywhere in the\n+    argument instead of `,`.\n+\n+<span id=\"option-header\">`-header` *html-code*<\/span>\n+:   Specifies the header text to be placed at the top of each output file. The\n+    header is placed to the right of the navigation bar. The `header` can\n+    contain HTML tags and white space, but when it does, the `header` must be\n+    enclosed in quotation marks. Use escape characters for internal quotation\n+    marks within a header. For example,\n+    `javadoc -header \"<b>My Library<\/b><br>v1.0\" com.mypackage`.\n+\n+<span id=\"option-helpfile\">`-helpfile` *filename*<\/span>\n+:   Specifies a file containing the text that will be displayed when the\n+    **HELP** link in the navigation bar is clicked. If this option is not given,\n+    the `javadoc` tool creates a default page that will be used.\n+\n+<span id=\"option-html5\">`-html5`<\/span>\n+:   This option is a no-op and is just retained for backwards compatibility.\n+\n+<span id=\"option-javafx\">`--javafx` or `-javafx`<\/span>\n+:   Enables JavaFX functionality. This option is enabled by default if the\n+    JavaFX library classes are detected on the module path.\n+\n+<span id=\"option-keywords\">`-keywords`<\/span>\n+:   Adds HTML keyword `<meta>` tags to the generated file for each class. These\n+    tags can help search engines that look for `<meta>` tags find the pages.\n+    Most search engines that search the entire Internet don't look at `<meta>`\n+    tags, because pages can misuse them. Search engines offered by companies\n+    that confine their searches to their own website can benefit by looking at\n+    `<meta>` tags. The `<meta>` tags include the fully qualified name of the\n+    class and the unqualified names of the fields and methods. Constructors\n+    aren't included because they are identical to the class name. For example,\n+    the page for the class `String` includes these keywords:\n+\n+    ```\n+    <meta name=\"keywords\" content=\"java.lang.String class\">\n+    <meta name=\"keywords\" content=\"CASE_INSENSITIVE_ORDER\">\n+    <meta name=\"keywords\" content=\"length()\">\n+    <meta name=\"keywords\" content=\"isEmpty()\">\n+    ```\n+\n+<span id=\"option-link\">`-link` *url*<\/span>\n+:   Creates links to existing `javadoc` generated documentation of externally\n+    referenced classes. The *url* argument is the absolute or relative URL of\n+    the directory that contains the external `javadoc` generated documentation.\n+    You can specify multiple `-link` options in a specified `javadoc` tool run\n+    to link to multiple documents.\n+\n+    Either a `package-list` or an `element-list` file must be in this *url*\n+    directory (otherwise, use the `-linkoffline` option).\n+\n+    _Note:_ The `package-list` and `element-list` files are generated by the\n+    `javadoc` tool when generating the API documentation and should not be\n+    modified by the user.\n+\n+    When you use the `javadoc` tool to document packages, it uses the\n+    `package-list` file to determine the packages declared in an API. When you\n+    generate API documents for modules, the `javadoc` tool uses the\n+    `element-list` file to determine the modules and packages declared in an\n+    API.\n+\n+    The `javadoc` tool reads the names from the appropriate list file and then\n+    links to the packages or modules at that URL.\n+\n+    When the `javadoc` tool runs, the *url* value is copied into the `<a href>`\n+    links that are created. Therefore, *url* must be the URL to the directory\n+    and not to a file.\n+\n+    You can use an absolute link for *url* to enable your documents to link to\n+    a document on any web site, or you can use a relative link to link only to\n+    a relative location. If you use a relative link, then the value you pass in\n+    should be the relative path from the destination directory (specified with\n+    the `-d` option) to the directory containing the packages being linked to.\n+    When you specify an absolute link, you usually use an HTTP link. However,\n+    if you want to link to a file system that has no web server, then you can\n+    use a file link. Use a file link only when everyone who wants to access the\n+    generated documentation shares the same file system. In all cases, and on\n+    all operating systems, use a slash as the separator, whether the URL is\n+    absolute or relative, and `https:`, `http:`, or `file:` as specified in the\n+    [RFC 1738: Uniform Resource Locators (URL)](https:\/\/www.rfc-editor.org\/info\/rfc1738).\n+\n+    ```\n+    -link https:\/\/<host>\/<directory>\/<directory>\/...\/<name>\n+    -link http:\/\/<host>\/<directory>\/<directory>\/...\/<name>\n+    -link file:\/\/<host>\/<directory>\/<directory>\/...\/<name>\n+    -link <directory>\/<directory>\/...\/<name>\n+    ```\n+\n+<span id=\"option-link-modularity-mismatch\">`--link-modularity-mismatch` (`warn`|`info`)<\/span>\n+:   Specifies whether external documentation with wrong modularity (e.g.\n+    non-modular documentation for a modular library, or the reverse case)\n+    should be reported as a warning (`warn`) or just a message (`info`).\n+    The default behavior is to report a warning.\n+\n+<span id=\"option-linkoffline\">`-linkoffline` *url1* *url2*<\/span>\n+:   This option is a variation of the `-link` option. They both create links to\n+    `javadoc` generated documentation for externally referenced classes. You\n+    can specify multiple `-linkoffline` options in a specified `javadoc` tool\n+    run.\n+\n+    Use the `-linkoffline` option when:\n+\n+    -   Linking to a document on the web that the `javadoc` tool can't access\n+        through a web connection\n+\n+    -   The `package-list` or `element-list` file of the external document\n+        either isn't accessible or doesn't exist at the URL location, but does\n+        exist at a different location and can be specified by either the\n+        `package-list` or `element-list` file (typically local).\n+\n+    _Note:_ The `package-list` and `element-list` files are generated by the\n+    `javadoc` tool when generating the API documentation and should not be\n+    modified by the user.\n+\n+    If *url1* is accessible only on the World Wide Web, then the `-linkoffline`\n+    option removes the constraint that the `javadoc` tool must have a web\n+    connection to generate documentation.\n+\n+    Another use of the `-linkoffline` option is as a work-around to update\n+    documents. After you have run the `javadoc` tool on a full set of packages\n+    or modules, you can run the `javadoc` tool again on a smaller set of\n+    changed packages or modules, so that the updated files can be inserted back\n+    into the original set.\n+\n+    For example, the `-linkoffline` option takes two arguments. The first is\n+    for the string to be embedded in the `<a href>` links, and the second tells\n+    the `javadoc` tool where to find either the `package-list` or\n+    `element-list` file.\n+\n+    The *url1* or *url2* value is the absolute or relative URL of the directory\n+    that contains the external `javadoc` generated documentation that you want\n+    to link to. When relative, the value should be the relative path from the\n+    destination directory (specified with the `-d` option) to the root of the\n+    packages being linked to. See *url* in the `-link` option.\n+\n+<span id=\"option-link-platform-properties\">`--link-platform-properties` *url*<\/span>\n+:   Specifies a properties file used to configure links to platform\n+    documentation.\n+\n+    The *url* argument is expected to point to a properties file containing\n+    one or more entries with the following format, where `<version>` is the\n+    platform version as passed to the `--release` or `--source` option and\n+    `<url>` is the base URL of the corresponding platform API documentation:\n+\n+    ```\n+    doclet.platform.docs.<version>=<url>\n+    ```\n+\n+    For instance, a properties file containing URLs for releases 15 to 17 might\n+    contain the following lines:\n+\n+    ```\n+    doclet.platform.docs.15=https:\/\/example.com\/api\/15\/\n+    doclet.platform.docs.16=https:\/\/example.com\/api\/16\/\n+    doclet.platform.docs.17=https:\/\/example.com\/api\/17\/\n+    ```\n+\n+    If the properties file does not contain an entry for a particular release\n+    no platform links are generated.\n+\n+<span id=\"option-linksource\">`-linksource`<\/span>\n+:   Creates an HTML version of each source file (with line numbers) and adds\n+    links to them from the standard HTML documentation. Links are created for\n+    classes, interfaces, constructors, methods, and fields whose declarations\n+    are in a source file. Otherwise, links aren't created, such as for default\n+    constructors and generated classes.\n+\n+    This option exposes all private implementation details in the included\n+    source files, including private classes, private fields, and the bodies of\n+    private methods, regardless of the `-public`, `-package`, `-protected`, and\n+    `-private` options. Unless you also use the `-private` option, not all\n+    private classes or interfaces are accessible through links.\n+\n+    Each link appears on the name of the identifier in its declaration. For\n+    example, the link to the source code of the `Button` class would be on the\n+    word `Button`:\n+\n+    ```\n+    public class Button extends Component implements Accessible\n+    ```\n+\n+    The link to the source code of the `getLabel` method in the `Button` class\n+    is on the word `getLabel`:\n+\n+    ```\n+    public String getLabel()\n+    ```\n+\n+<span id=\"option-main-stylesheet\">`--main-stylesheet` *file* or `-stylesheetfile` *file*<\/span>\n+:   Specifies the path of an alternate stylesheet file that contains the\n+    definitions for the CSS styles used in the generated documentation. This\n+    option lets you override the default. If you do not specify the option, the\n+    `javadoc` tool will create and use a default stylesheet. The file name can\n+    be any name and isn't restricted to `stylesheet.css`. The\n+    `--main-stylesheet` option is the preferred form.\n+\n+    Command-line example:\n+\n+    ```\n+    javadoc --main-stylesheet main_stylesheet.css pkg_foo\n+    ```\n+\n+<span id=\"option-nocomment\">`-nocomment`<\/span>\n+:   Suppresses the entire comment body, including the main description and all\n+    tags, and generate only declarations. This option lets you reuse source\n+    files that were originally intended for a different purpose so that you can\n+    produce skeleton HTML documentation during the early stages of a new\n+    project.\n+\n+<span id=\"option-nodeprecated\">`-nodeprecated`<\/span>\n+:   Prevents the generation of any deprecated API in the documentation. This\n+    does what the `-nodeprecatedlist` option does, and it doesn't generate any\n+    deprecated API throughout the rest of the documentation. This is useful\n+    when writing code when you don't want to be distracted by the deprecated\n+    code.\n+\n+<span id=\"option-nodeprecatedlist\">`-nodeprecatedlist`<\/span>\n+:   Prevents the generation of the file that contains the list of deprecated\n+    APIs (`deprecated-list.html`) and the link in the navigation bar to that\n+    page. The `javadoc` tool continues to generate the deprecated API\n+    throughout the rest of the document. This is useful when your source code\n+    contains no deprecated APIs, and you want to make the navigation bar\n+    cleaner.\n+\n+<span id=\"option-no-fonts\">`--no-fonts`<\/span>\n+:    Prevents inclusion of font files in the generated documentation. This can\n+     be useful if the documentation uses a custom stylesheet which does not\n+     use the default fonts.\n+\n+<span id=\"option-nohelp\">`-nohelp`<\/span>\n+:   Omits the **HELP** link in the navigation bar at the top of each\n+    generated page.\n+\n+<span id=\"option-noindex\">`-noindex`<\/span>\n+:   Omits the index from the generated documents. The index is produced by\n+    default.\n+\n+<span id=\"option-nonavbar\">`-nonavbar`<\/span>\n+:   Prevents the generation of the navigation bar and header. The `-nonavbar`\n+    option has no effect on the `-bottom` option. The `-nonavbar` option is\n+    useful when you are interested only in the content and have no need for\n+    navigation, such as when you are converting the files to PostScript or PDF\n+    for printing only.\n+\n+<span id=\"option-no-platform-links\">`--no-platform-links`<\/span>\n+:   Prevents the generation of links to platform documentation.\n+    These links are generated by default.\n+\n+<span id=\"option-noqualifier\">`-noqualifier` *name1*`,`*name2...*<\/span>\n+:   Excludes the list of qualifiers from the output. The package name is\n+    removed from places where class or interface names appear.\n+    For historical reasons, `:` can be used anywhere in the argument as a\n+    separator instead of `,`.\n+\n+    The following example omits all package qualifiers: `-noqualifier all`.\n+\n+    The following example omits `java.lang` and `java.io` package qualifiers:\n+    `-noqualifier java.lang:java.io`.\n+\n+    The following example omits package qualifiers starting with `java` and\n+    `com.sun` subpackages, but not `javax: -noqualifier java.*:com.sun.*`.\n+\n+    Where a package qualifier would appear due to the previous behavior, the\n+    name can be suitably shortened. This rule is in effect whether or not the\n+    `-noqualifier` option is used.\n+\n+<span id=\"option-nosince\">`-nosince`<\/span>\n+:   Omits from the generated documentation the `Since` sections derived from\n+    any `since` tags.\n+\n+<span id=\"option-notimestamp\">`-notimestamp`<\/span>\n+:   Suppresses the time stamp, which is hidden in an HTML comment in the\n+    generated HTML near the top of each page. The `-notimestamp` option is\n+    useful when you want to run the `javadoc` tool on two source bases and\n+    compare them, because it prevents time stamps from causing a difference\n+    (which would otherwise be a difference on every page). The time stamp\n+    includes the `javadoc` tool release number.\n+\n+<span id=\"option-notree\">`-notree`<\/span>\n+:   Omits the class and interface hierarchy pages from the generated documents.\n+    These are the pages you reach using the **TREE** link in the navigation bar.\n+    The hierarchy is produced by default.\n+\n+<span id=\"option-override-methods\">`--override-methods` (`detail`|`summary`)<\/span>\n+:   Documents overridden methods in the detail or summary sections.\n+    The default is `detail`.\n+\n+<span id=\"option-overview\">`-overview` *filename*<\/span>\n+:   Specifies that the `javadoc` tool should retrieve the content for the overview\n+    documentation from the file specified by *filename* and place it on\n+    the Overview page (`overview-summary.html`). If the *filename* is a relative\n+    path, it is evaluated relative to the current working directory.\n+\n+    The file may be an HTML file, with a filename ending in `.html`,\n+    or a Markdown file, with a filename ending in `.md`.\n+    If the file is an HTML file, the content for the overview documentation\n+    is taken from the `<main>` element in the file, if one is present, or from\n+    the `<body>` element is there is no `<main>` element.  If the file is\n+    a Markdown file, the entire content of the file is used.\n+\n+    The title on the overview page is set by `-doctitle`.\n+\n+    _Note:_ older versions of the `javadoc` tool assumed that any use of this\n+    option was for an HTML file, and allowed any extension for the *filename*.\n+\n+<span id=\"option-serialwarn\">`-serialwarn`<\/span>\n+:   Reports compile-time warnings for missing `@serial` tags. By default,\n+    Javadoc reports no serial warnings. Use this option to display the serial\n+    warnings, which helps to properly document default serializable fields and\n+    `writeExternal` methods.\n+\n+<span id=\"option-since\">`--since` *release*(`,`*release*)*<\/span>\n+:   Generates documentation for APIs that were added or newly deprecated in the\n+    specified *release*s.\n+\n+    If the `@since` tag in the `javadoc` comment of an element in the documented\n+    source code matches a *release* passed as the option argument, information\n+    about the element and the release it was added in is included in a \"New API\"\n+    page.\n+\n+    If the \"Deprecated API\" page is generated and the `since` element of the\n+    `java.lang.Deprecated` annotation of a documented element matches a *release*\n+    in the option arguments, information about the release the element was\n+    deprecated in is added to the \"Deprecated API\" page.\n+\n+    Releases are compared using case-sensitive string comparison.\n+\n+<span id=\"option-since-label\">`--since-label` *text*<\/span>\n+:   Specifies the *text* to use in the heading of the \"New API\" page. This may\n+    contain information about the releases covered in the page, e.g.\n+    \"New API in release 2.0\", or \"New API since release 1\".\n+\n+<span id=\"option-snippet-path\">`--snippet-path` *snippetpathlist*<\/span>\n+:   Specifies the search paths for finding files for external snippets.\n+    The *snippetpathlist* can contain multiple paths by separating them with the\n+    platform path separator (`;` on Windows; `:` on other platforms.)\n+    The standard doclet first searches the `snippet-files` subdirectory in the\n+    package containing the snippet, and then searches all the directories in the\n+    given list.\n+\n+<span id=\"option-sourcetab\">`-sourcetab` *tab-length*<\/span>\n+:   Specifies the number of spaces each tab uses in the source.\n+\n+<span id=\"option-spec-base-url\">`--spec-base-url` *url*<\/span>\n+:   Specifies the base URL for relative URLs in `@spec` tags, to be used when\n+    generating links to any external specifications. It can either be an\n+    absolute URL, or a relative URL, in which case it is evaluated relative\n+    to the base directory of the generated output files. The default value is\n+    equivalent to `{@docRoot}\/..\/specs`.\n+\n+<span id=\"option-splitindex\">`-splitindex`<\/span>\n+:   Splits the index file into multiple files, alphabetically, one file per\n+    letter, plus a file for any index entries that start with non-alphabetical\n+    symbols.\n+\n+<span id=\"option-tag\">`-tag` *name*:*locations*:*header*<\/span>\n+:   Specifies a custom tag with a single argument. For the `javadoc` tool to\n+    spell-check tag names, it is important to include a `-tag` option for every\n+    custom tag that is present in the source code, disabling (with `X`) those\n+    that aren't being output in the current run. The colon (`:`) is always the\n+    separator. To include a colon in the tag name, escape it with a backward\n+    slash (`\\`). The `-tag` option outputs the tag heading, *header*, in bold,\n+    followed on the next line by the text from its single argument. Similar to\n+    any block tag, the argument text can contain inline tags, which are also\n+    interpreted. The output is similar to standard one-argument tags, such as\n+    the `@return` and `@author` tags. Omitting a *header* value causes the\n+    *name* to be the heading.  *locations* is a list of characters specifying\n+    the kinds of declarations in which the tag may be used. The following\n+    characters may be used, in either uppercase or lowercase:\n+\n+    * `A`: all declarations\n+    * `C`: constructors\n+    * `F`: fields\n+    * `M`: methods\n+    * `O`: the overview page and other documentation files in `doc-files` subdirectories\n+    * `P`: packages\n+    * `S`: modules\n+    * `T`: types (classes and interfaces)\n+    * `X`: nowhere: the tag is disabled, and will be ignored\n+\n+    The order in which tags are given on the command line will be used\n+    as the order in which the tags appear in the generated output.\n+    You can include standard tags in the order given on the command line\n+    by using the `-tag` option with no *locations* or *header*.\n+\n+<span id=\"option-taglet\">`-taglet` *class*<\/span>\n+:   Specifies the fully qualified name of the taglet used in generating the\n+    documentation for that tag. Use the fully qualified name for the *class*\n+    value. This taglet also defines the number of text arguments that the\n+    custom tag has. The taglet accepts those arguments, processes them, and\n+    generates the output.\n+\n+    Taglets are useful for block or inline tags. They can have any number of\n+    arguments and implement custom behavior, such as making text bold,\n+    formatting bullets, writing out the text to a file, or starting other\n+    processes. Taglets can only determine where a tag should appear and in what\n+    form. All other decisions are made by the doclet. A taglet can't do things\n+    such as remove a class name from the list of included classes. However, it\n+    can execute side effects, such as printing the tag's text to a file or\n+    triggering another process. Use the `-tagletpath` option to specify the\n+    path to the taglet. The following example inserts the To Do taglet after\n+    Parameters and ahead of Throws in the generated pages.\n+\n+    ```\n+    -taglet com.sun.tools.doclets.ToDoTaglet\n+    -tagletpath \/home\/taglets\n+    -tag return\n+    -tag param\n+    -tag todo\n+    -tag throws\n+    -tag see\n+    ```\n+\n+    Alternately, you can use the `-taglet` option in place of its `-tag`\n+    option, but that might be difficult to read.\n+\n+<span id=\"option-tagletpath\">`-tagletpath` *tagletpathlist*<\/span>\n+:   Specifies the search paths for finding taglet class files.\n+    The *tagletpathlist* can contain multiple paths by separating them with the\n+    platform path separator (`;` on Windows; `:` on other platforms.)\n+    The `javadoc` tool searches all subdirectories of the specified paths.\n+\n+<span id=\"option-top\">`-top` *html-code*<\/span>\n+:   Specifies the text to be placed at the top of each output file.\n+\n+<span id=\"option-use\">`-use`<\/span>\n+:   Creates class and package usage pages. Includes one Use page for each\n+    documented class and package. The page describes what packages, classes,\n+    methods, constructors, and fields use any API of the specified class or\n+    package. Given class C, things that use class C would include subclasses of\n+    C, fields declared as C, methods that return C, and methods and\n+    constructors with parameters of type C. For example, you can look at the\n+    Use page for the `String` type. Because the `getName` method in the\n+    `java.awt.Font` class returns type `String`, the `getName` method uses\n+    `String` and so the `getName` method appears on the Use page for `String`.\n+    This documents only uses of the API, not the implementation. When a method\n+    uses `String` in its implementation, but doesn't take a string as an\n+    argument or return a string, that isn't considered a use of `String`. To\n+    access the generated Use page, go to the class or package and click the\n+    **USE** link in the navigation bar.\n+\n+<span id=\"option-version\">`-version`<\/span>\n+:   Includes the text of any `version` tags in the generated documentation.\n+    This text is omitted by default.\n+    Note: To find out what version of the `javadoc` tool you are using, use\n+    the `--version` option (with two hyphens).\n+\n+<span id=\"option-windowtitle\">`-windowtitle` *title*<\/span>\n+:   Specifies the title to be placed in the HTML `<title>` tag. The text\n+    specified in the `title` tag appears in the window title and in any browser\n+    bookmarks (favorite places) that someone creates for this page. This title\n+    should not contain any HTML tags because a browser will not interpret them\n+    correctly. Use escape characters on any internal quotation marks within the\n+    `title` tag. If the `-windowtitle` option is omitted, then the `javadoc`\n+    tool uses the value of the `-doctitle` option for the `-windowtitle`\n+    option. For example, `javadoc -windowtitle \"My Library\" com.mypackage`.\n+\n+### Extra Options for the Standard Doclet\n+\n+The following are additional options provided by the standard doclet and are\n+subject to change without notice. Additional options are less commonly\n+used or are otherwise regarded as advanced.\n+\n+<span id=\"option-date\">`--date` *date-and-time*<\/span>\n+:   Specifies the value to be used to timestamp the generated pages, in\n+    [ISO 8601][] format. The specified value must be within 10 years of the\n+    current date and time. It is an error to specify both `-notimestamp`\n+    and `--date`. Using a specific value means the generated documentation\n+    can be part of a [reproducible build][]. If the option is not given, the\n+    default value is the current date and  time. For example:\n+\n+    ```\n+    javadoc --date 2022-02-01T17:41:59-08:00 mypackage\n+    ```\n+\n+<span id=\"option-legal-notices\">`--legal-notices` (`default`|`none`|*directory*)<\/span>\n+:   Specifies the location from which to copy legal files to the generated\n+    documentation. If the option is not specified or is used with the value\n+    `default`, the files are copied from the default location.\n+    If the argument is used with value `none`, no files are copied. Every\n+    other argument is interpreted as directory from which to copy the legal\n+    files.\n+\n+<span id=\"option-no-frames\">`--no-frames`<\/span>\n+:   This option is no longer supported and reports a warning.\n+\n+<span id=\"option-Xdoclint\">`-Xdoclint`<\/span>\n+:   Enables recommended checks for problems in documentation comments.\n+\n+    By default, the `-Xdoclint` option is enabled. Disable it with the option\n+    `-Xdoclint:none`.\n+\n+    For more details, see [DocLint](#doclint).\n+\n+<span id=\"option-Xdoclint-flags\">`-Xdoclint:`*flag*,*flag*,...<\/span>\n+:   Enables or disables specific checks for different kinds of issues in\n+    documentation comments.\n+\n+    Each *flag* can be one of `all`, `none`, or `[-]`*group* where\n+    *group* has one of the following values:\n+    `accessibility`, `html`, `missing`, `reference`, `syntax`.\n+    For more details on these values, see [DocLint Groups](#groups).\n+\n+    When specifying two or more flags, you can either use a single `-Xdoclint:...`\n+    option, listing all the desired flags, or you can use multiple options\n+    giving one or more flag in each option. For example, use either of the\n+    following commands to check for the HTML, syntax, and accessibility issues\n+    in the file `MyFile.java`.\n+\n+    ```\n+    javadoc -Xdoclint:html -Xdoclint:syntax -Xdoclint:accessibility MyFile.java\n+    javadoc -Xdoclint:html,syntax,accessibility MyFile.java\n+    ```\n+\n+    The following examples illustrate how to change what DocLint reports:\n+\n+    * `-Xdoclint:none` --- disables all checks\n+    * `-Xdoclint:`*group* --- enables *group* checks\n+    * `-Xdoclint:all` --- enables all groups of checks\n+    * `-Xdoclint:all,-`*group* --- enables all checks except *group* checks\n+\n+    For more details, see [DocLint](#doclint).\n+\n+<span id=\"option-Xdoclint-package\">`-Xdoclint\/package:`\\[`-`\\]*packages*<\/span>\n+:   Enables or disables checks in specific packages. *packages* is a comma\n+    separated list of package specifiers. A package specifier is either a\n+    qualified name of a package or a package name prefix followed by `*`, which\n+    expands to all subpackages of the given package. Prefix the package\n+    specifier with `-` to disable checks for the specified packages.\n+\n+    For more details, see [DocLint](#doclint).\n+\n+<span id=\"option-Xdocrootparent\">`-Xdocrootparent` *url*<\/span>\n+:   Replaces all `@docRoot` items followed by `\/..` in documentation comments\n+    with *url*.\n+\n+[ISO 8601]: https:\/\/www.iso.org\/iso-8601-date-and-time-format.html\n+[reproducible build]: https:\/\/reproducible-builds.org\/\n+\n+## DocLint\n+\n+DocLint provides the ability to check for possible problems in documentation\n+comments. Problems may be reported as warnings or errors, depending on their\n+severity. For example, a missing comment may be bad style that deserves a\n+warning, but a link to an unknown Java declaration is more serious and deserves\n+an error. Problems are organized into [groups](#groups), and options can be\n+used to enable or disable messages in one or more groups. Within the source\n+code, messages in one or more groups can be [suppressed](#suppressing-messages)\n+by using `@SuppressWarnings` annotations.\n+\n+When invoked from `javadoc`, by default DocLint checks all comments that are\n+used in the generated documentation. It thus relies on other command-line\n+options to determine which declarations, and which corresponding documentation\n+comments will be included. _Note:_ this may mean that even comments on some\n+private members of serializable classes will also be checked, if the members\n+need to be documented in the generated `Serialized Forms` page.\n+\n+In contrast, when DocLint is invoked from `javac`, DocLint solely relies on the\n+various `-Xdoclint...` options to determine which documentation comments to\n+check.\n+\n+DocLint doesn't attempt to fix invalid input, it just reports it.\n+\n+_Note:_ DocLint doesn't guarantee the completeness of these checks.\n+In particular, it isn't a full HTML compliance checker. The goal is to just\n+report common errors in a convenient manner.\n+\n+### Groups\n+\n+The checks performed by DocLint are organized into groups. The warnings and\n+errors in each group can be enabled or disabled with command-line options, or\n+suppressed with `@SuppressWarnings` annotations.\n+\n+The groups are as follows:\n+\n+* `accessibility` --- Checks for issues related to accessibility.<br>\n+  For example, no `alt` attribute specified in an `<img>` element,\n+  or no caption or summary attributes specified in a `<table>` element.\n+\n+  Issues are reported as errors if a downstream validation tool might\n+  be expected to report an error in the files generated by `javadoc`.\n+\n+  For reference, see the [Web Content Accessibility Guidelines][].\n+\n+\n+* `html` --- Detects common high-level HTML issues.<br>\n+  For example, putting block elements inside inline elements, or not closing\n+  elements that require an end tag.\n+\n+  Issues are reported as errors if a downstream validation tool might\n+  be expected to report an error in the files generated by `javadoc`.\n+\n+  For reference, see the [HTML Living Standard][].\n+\n+\n+* `missing` --- Checks for missing documentation comments or tags.<br>\n+  For example, a missing comment on a class declaration, or a missing `@param`\n+  or `@return` tag in the comment for a method declaration.\n+\n+  Issues related to missing items are typically reported as warnings because\n+  they are unlikely to be reported as errors by downstream validation tools\n+  that may be used to check the output generated by `javadoc`.\n+\n+\n+* `reference` --- Checks for issues relating to the references to Java API\n+  elements from documentation comment tags.<br>\n+  For example, the reference in `@see` or `{@link ...}` cannot be found,\n+  or a bad name is given for `@param` or `@throws`.\n+\n+  Issues are typically reported as errors because while the issue may not cause\n+  problems in the generated files, the author has likely made a mistake that\n+  will lead to incorrect or unexpected documentation.\n+\n+\n+* `syntax` --- Checks for low-level syntactic issues in documentation comments.<br>\n+  For example, unescaped angle brackets (`<` and `>`) and ampersands (`&`)\n+  and invalid documentation comment tags.<br>\n+\n+  Issues are typically reported as errors because the issues may\n+  lead to incorrect or unexpected documentation.\n+\n+[HTML Living Standard]: https:\/\/html.spec.whatwg.org\/multipage\/\n+[Web Content Accessibility Guidelines]: https:\/\/www.w3.org\/WAI\/standards-guidelines\/wcag\/\n+\n+\n+### Suppressing Messages\n+\n+DocLint checks for and recognizes two strings that may be present in the\n+arguments for an `@SuppressWarnings` annotation.\n+\n+* `doclint`\n+* `doclint:`_LIST_\n+\n+where _LIST_ is a comma-separated list of one or more of\n+`accessibility`, `html`, `missing`, `reference`, `syntax`.\n+\n+The names in _LIST_ are the same [group](#groups) names supported by the\n+command-line `-Xdoclint` option for `javac` and `javadoc`. (This is the same\n+convention honored by the `javac` `-Xlint` option and the corresponding names\n+supported by `@SuppressWarnings`.)\n+\n+The names in _LIST_ can equivalently be specified in separate arguments of\n+the annotation. For example, the following are equivalent:\n+\n+* `@SuppressWarnings(\"doclint:accessibility,missing\")`\n+* `@SuppressWarnings(\"doclint:accessibility\", \"doclint:missing\")`\n+\n+When DocLint detects an issue in a documentation comment, it checks for the\n+presence of `@SuppressWarnings` on the associated declaration and on all\n+lexically enclosing declarations. The issue will be ignored if any such\n+annotation is found containing the simple string `doclint` or the longer form\n+`doclint:LIST` where _LIST_ contains the name of the group for the issue.\n+\n+_Note:_ as with other uses of `@SuppressWarnings`, using the annotation on a\n+module or package declaration only affects that declaration; it does not affect\n+the contents of the module or package in other source files.\n+\n+All messages related to an issue are suppressed by the presence of an\n+appropriate `@SuppressWarnings` annotation: this includes errors as well as\n+warnings.\n+\n+_Note:_ It is only possible to *suppress* messages.\n+If an annotation of `@SuppressWarnings(\"doclint\")` is given on a top-level\n+declaration, all DocLint messages for that declaration and any enclosed\n+declarations will be suppressed; it is not possible to selectively re-enable\n+messages for issues in enclosed declarations.\n+\n+\n+### Comparison with downstream validation tools\n+\n+DocLint is a utility built into `javac` and `javadoc` that checks the content\n+of documentation comments, as found in source files. In contrast, downstream\n+validation tools can be used to validate the output generated from those\n+documentation comments by `javadoc` and the standard doclet.\n+\n+Although there is some overlap in functionality, the two mechanisms are\n+different and each has its own strengths and weaknesses.\n+\n+* Downstream validation tools can check the end result of any generated\n+  documentation, as it will be seen by the end user.\n+  This includes content from all sources, including documentation comments,\n+  the standard doclet itself, user-provided taglets, and content supplied\n+  via command-line options. Because such tools are analyzing complete HTML\n+  pages, they can do more complete checks than can DocLint.\n+  However, when a problem is found in the generated pages, it can be harder to\n+  track down exactly where in the build pipeline the problem needs to be fixed.\n+\n+\n+* DocLint checks the content of documentation comments, in source files.\n+  This makes it very easy to identify the exact position of any issues that\n+  may be found. DocLint can also detect some semantic errors in\n+  documentation comments that downstream tools cannot detect,\n+  such as missing comments, using an `@return` tag in a method returning `void`,\n+  or an `@param` tag describing a non-existent parameter.\n+  But by its nature, DocLint cannot report on problems such as\n+  missing links, or errors in user-provided custom taglets, or\n+  problems in the standard doclet itself. It also cannot reliably\n+  detect errors in documentation comments at the boundaries\n+  between content in a documentation comment and content generated\n+  by a custom taglet.\n","filename":"src\/jdk.javadoc\/share\/man\/javadoc.md","additions":1214,"deletions":0,"binary":false,"changes":1214,"status":"added"},{"patch":"@@ -1,1345 +0,0 @@\n-.\\\" Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JCMD\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jcmd - send diagnostic command requests to a running Java Virtual\n-Machine (JVM)\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jcmd\\f[R] [\\f[I]pid\\f[R] | \\f[I]main-class\\f[R]]\n-\\f[I]command\\f[R]...\n-| \\f[V]PerfCounter.print\\f[R] | \\f[V]-f\\f[R] \\f[I]filename\\f[R]\n-.PP\n-\\f[V]jcmd\\f[R] [\\f[V]-l\\f[R]]\n-.PP\n-\\f[V]jcmd\\f[R] \\f[V]-h\\f[R]\n-.TP\n-\\f[I]pid\\f[R]\n-When used, the \\f[V]jcmd\\f[R] utility sends the diagnostic command\n-request to the process ID for the Java process.\n-.TP\n-\\f[I]main-class\\f[R]\n-When used, the \\f[V]jcmd\\f[R] utility sends the diagnostic command\n-request to all Java processes with the specified name of the main class.\n-.TP\n-\\f[I]command\\f[R]\n-The \\f[V]command\\f[R] must be a valid \\f[V]jcmd\\f[R] command for the\n-selected JVM.\n-The list of available commands for \\f[V]jcmd\\f[R] is obtained by running\n-the \\f[V]help\\f[R] command (\\f[V]jcmd\\f[R] \\f[I]pid\\f[R] \\f[V]help\\f[R])\n-where \\f[I]pid\\f[R] is the process ID for the running Java process.\n-.TP\n-\\f[V]Perfcounter.print\\f[R]\n-Prints the performance counters exposed by the specified Java process.\n-.TP\n-\\f[V]-f\\f[R] \\f[I]filename\\f[R]\n-Reads and executes commands from a specified file, \\f[I]filename\\f[R].\n-.TP\n-\\f[V]-l\\f[R]\n-Displays the list of Java Virtual Machine process identifiers that are\n-not running in a separate docker process along with the main class and\n-command-line arguments that were used to launch the process.\n-If the JVM is in a docker process, you must use tools such as\n-\\f[V]ps\\f[R] to look up the PID.\n-.RS\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-Using \\f[V]jcmd\\f[R] without arguments is the same as using\n-\\f[V]jcmd -l\\f[R].\n-.RE\n-.TP\n-\\f[V]-h\\f[R]\n-Displays the \\f[V]jcmd\\f[R] utility\\[aq]s command-line help.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jcmd\\f[R] utility is used to send diagnostic command requests\n-to the JVM.\n-It must be used on the same machine on which the JVM is running, and\n-have the same effective user and group identifiers that were used to\n-launch the JVM.\n-Each diagnostic command has its own set of options and arguments.\n-To display the description, syntax, and a list of available options and\n-arguments for a diagnostic command, use the name of the command as the\n-argument.\n-For example:\n-.RS\n-.PP\n-\\f[V]jcmd\\f[R] \\f[I]pid\\f[R] \\f[V]help\\f[R] \\f[I]command\\f[R]\n-.RE\n-.PP\n-If arguments contain spaces, then you must surround them with single or\n-double quotation marks (\\f[V]\\[aq]\\f[R] or \\f[V]\\[dq]\\f[R]).\n-In addition, you must escape single or double quotation marks with a\n-backslash (\\f[V]\\[rs]\\f[R]) to prevent the operating system shell from\n-processing quotation marks.\n-Alternatively, you can surround these arguments with single quotation\n-marks and then with double quotation marks (or with double quotation\n-marks and then with single quotation marks).\n-.PP\n-If you specify the process identifier (\\f[I]pid\\f[R]) or the main class\n-(\\f[I]main-class\\f[R]) as the first argument, then the \\f[V]jcmd\\f[R]\n-utility sends the diagnostic command request to the Java process with\n-the specified identifier or to all Java processes with the specified\n-name of the main class.\n-You can also send the diagnostic command request to all available Java\n-processes by specifying \\f[V]0\\f[R] as the process identifier.\n-.SH COMMANDS FOR JCMD\n-.PP\n-The \\f[I]command\\f[R] must be a valid \\f[V]jcmd\\f[R] diagnostic command\n-for the selected JVM.\n-The list of available commands for \\f[V]jcmd\\f[R] is obtained by running\n-the \\f[V]help\\f[R] command (\\f[V]jcmd\\f[R] \\f[I]pid\\f[R] \\f[V]help\\f[R])\n-where \\f[I]pid\\f[R] is the process ID for a running Java process.\n-If the \\f[I]pid\\f[R] is \\f[V]0\\f[R], commands will be sent to all Java\n-processes.\n-The main class argument will be used to match, either partially or\n-fully, the class used to start Java.\n-If no options are given, it lists the running Java process identifiers\n-that are not in separate docker processes along with the main class and\n-command-line arguments that were used to launch the process (the same as\n-using \\f[V]-l\\f[R]).\n-.PP\n-\\f[V]jcmd\\f[R] \\f[I]commands\\f[R] may take options and arguments.\n-\\f[I]Options\\f[R] are specified using either \\f[I]key\\f[R] or\n-\\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-\\f[I]Arguments\\f[R] are given as just a value, never name=value.\n-.PP\n-The following commands are available:\n-.TP\n-\\f[V]help\\f[R] [\\f[I]options\\f[R]] [\\f[I]arguments\\f[R]]\n-For more information about a specific command.\n-.RS\n-.PP\n-\\f[I]arguments\\f[R]:\n-.IP \\[bu] 2\n-\\f[I]command name\\f[R]: The name of the command for which we want help\n-(STRING, no default value)\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-all\\f[R]: (Optional) Show help for all commands (BOOLEAN, false) .\n-.RE\n-.TP\n-\\f[V]Compiler.CodeHeap_Analytics\\f[R] [\\f[I]function\\f[R]] [\\f[I]granularity\\f[R]]\n-Print CodeHeap analytics\n-.RS\n-.PP\n-Impact: Low: Depends on code heap size and content.\n-Holds CodeCache_lock during analysis step, usually sub-second duration.\n-.PP\n-\\f[I]arguments\\f[R]:\n-.IP \\[bu] 2\n-\\f[I]function\\f[R]: (Optional) Function to be performed (aggregate,\n-UsedSpace, FreeSpace, MethodCount, MethodSpace, MethodAge, MethodNames,\n-discard (STRING, all)\n-.IP \\[bu] 2\n-\\f[I]granularity\\f[R]: (Optional) Detail level - smaller value -> more\n-detail (INT, 4096)\n-.RE\n-.TP\n-\\f[V]Compiler.codecache\\f[R]\n-Prints code cache layout and bounds.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]Compiler.codelist\\f[R]\n-Prints all compiled methods in code cache that are alive.\n-.RS\n-.PP\n-Impact: Medium\n-.RE\n-.TP\n-\\f[V]Compiler.directives_add\\f[R] \\f[I]arguments\\f[R]\n-Adds compiler directives from a file.\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[I]arguments\\f[R]:\n-.IP \\[bu] 2\n-\\f[I]filename\\f[R]: The name of the directives file (STRING, no default\n-value)\n-.RE\n-.TP\n-\\f[V]Compiler.directives_clear\\f[R]\n-Remove all compiler directives.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]Compiler.directives_print\\f[R]\n-Prints all active compiler directives.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]Compiler.directives_remove\\f[R]\n-Remove latest added compiler directive.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]Compiler.memory\\f[R] [\\f[I]options\\f[R]]\n-Print compilation footprint\n-.RS\n-.PP\n-Impact: Medium: Pause time depends on number of compiled methods\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The \\f[I]options\\f[R] must be specified using either \\f[I]key\\f[R] or\n-\\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-H\\f[R]: (Optional) Human readable format (BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]-s\\f[R]: (Optional) Minimum memory size (MEMORY SIZE, 0)\n-.RE\n-.TP\n-\\f[V]Compiler.perfmap\\f[R] [\\f[I]arguments\\f[R]] (Linux only)\n-Write map file for Linux perf tool.\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[I]arguments\\f[R]:\n-.IP \\[bu] 2\n-\\f[I]filename\\f[R]: (Optional) The name of the map file.\n-If %p is specified in the filename, it is expanded to the JVM\\[aq]s PID.\n-(FILE, \\[dq]\/tmp\/perf-%p.map\\[dq])\n-.RE\n-.TP\n-\\f[V]Compiler.queue\\f[R]\n-Prints methods queued for compilation.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]GC.class_histogram\\f[R] [\\f[I]options\\f[R]]\n-Provides statistics about the Java heap usage.\n-.RS\n-.PP\n-Impact: High --- depends on Java heap size and content.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The \\f[I]options\\f[R] must be specified using either \\f[I]key\\f[R] or\n-\\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-all\\f[R]: (Optional) Inspects all objects, including unreachable\n-objects (BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]-parallel\\f[R]: (Optional) Number of parallel threads to use for\n-heap inspection.\n-0 (the default) means let the VM determine the number of threads to use.\n-1 means use one thread (disable parallelism).\n-For any other value the VM will try to use the specified number of\n-threads, but might use fewer.\n-(INT, 0)\n-.RE\n-.TP\n-\\f[V]GC.finalizer_info\\f[R]\n-Provides information about the Java finalization queue.\n-.RS\n-.PP\n-Impact: Medium\n-.RE\n-.TP\n-\\f[V]GC.heap_dump\\f[R] [\\f[I]options\\f[R]] \\f[I]filename\\f[R]\n-Generates a HPROF format dump of the Java heap.\n-.RS\n-.PP\n-Impact: High --- depends on the Java heap size and content.\n-Request a full GC unless the \\f[V]-all\\f[R] option is specified.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-all\\f[R]: (Optional) Dump all objects, including unreachable\n-objects (BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]-gz\\f[R]: (Optional) If specified, the heap dump is written in\n-gzipped format using the given compression level.\n-1 (recommended) is the fastest, 9 the strongest compression.\n-(INT, 1)\n-.IP \\[bu] 2\n-\\f[V]-overwrite\\f[R]: (Optional) If specified, the dump file will be\n-overwritten if it exists (BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]-parallel\\f[R]: (Optional) Number of parallel threads to use for\n-heap dump.\n-The VM will try to use the specified number of threads, but might use\n-fewer.\n-(INT, 1)\n-.PP\n-\\f[I]arguments\\f[R]:\n-.IP \\[bu] 2\n-\\f[I]filename\\f[R]: The name of the dump file.\n-If %p is specified in the filename, it is expanded to the JVM\\[aq]s PID.\n-(FILE, no default value)\n-.RE\n-.TP\n-\\f[V]GC.heap_info\\f[R]\n-Provides generic Java heap information.\n-.RS\n-.PP\n-Impact: Medium\n-.RE\n-.TP\n-\\f[V]GC.run\\f[R]\n-Calls \\f[V]java.lang.System.gc()\\f[R].\n-.RS\n-.PP\n-Impact: Medium --- depends on the Java heap size and content.\n-.RE\n-.TP\n-\\f[V]GC.run_finalization\\f[R]\n-Calls \\f[V]java.lang.System.runFinalization()\\f[R].\n-.RS\n-.PP\n-Impact: Medium --- depends on the Java content.\n-.RE\n-.TP\n-\\f[V]JFR.check\\f[R] [\\f[I]options\\f[R]]\n-Show information about a running flight recording\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The \\f[I]options\\f[R] must be specified using either \\f[I]key\\f[R] or\n-\\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-If no parameters are entered, information for all active recordings is\n-shown.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]name\\f[R]: (Optional) Name of the flight recording.\n-(STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]verbose\\f[R]: (Optional) Flag for printing the event settings for\n-the recording (BOOLEAN, false)\n-.RE\n-.TP\n-\\f[V]JFR.configure\\f[R] [\\f[I]options\\f[R]]\n-Set the parameters for a flight recording\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The \\f[I]options\\f[R] must be specified using either \\f[I]key\\f[R] or\n-\\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-If no parameters are entered, the current settings are displayed.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]dumppath\\f[R]: (Optional) Path to the location where a recording\n-file is written in case the VM runs into a critical error, such as a\n-system crash.\n-(STRING, The default location is the current directory)\n-.IP \\[bu] 2\n-\\f[V]globalbuffercount\\f[R]: (Optional) Number of global buffers.\n-This option is a legacy option: change the \\f[V]memorysize\\f[R]\n-parameter to alter the number of global buffers.\n-This value cannot be changed once JFR has been initialized.\n-(STRING, default determined by the value for \\f[V]memorysize\\f[R])\n-.IP \\[bu] 2\n-\\f[V]globalbuffersize\\f[R]: (Optional) Size of the global buffers, in\n-bytes.\n-This option is a legacy option: change the \\f[V]memorysize\\f[R]\n-parameter to alter the size of the global buffers.\n-This value cannot be changed once JFR has been initialized.\n-(STRING, default determined by the value for \\f[V]memorysize\\f[R])\n-.IP \\[bu] 2\n-\\f[V]maxchunksize\\f[R]: (Optional) Maximum size of an individual data\n-chunk in bytes if one of the following suffixes is not used: \\[aq]m\\[aq]\n-or \\[aq]M\\[aq] for megabytes OR \\[aq]g\\[aq] or \\[aq]G\\[aq] for\n-gigabytes.\n-This value cannot be changed once JFR has been initialized.\n-(STRING, 12M)\n-.IP \\[bu] 2\n-\\f[V]memorysize\\f[R]: (Optional) Overall memory size, in bytes if one of\n-the following suffixes is not used: \\[aq]m\\[aq] or \\[aq]M\\[aq] for\n-megabytes OR \\[aq]g\\[aq] or \\[aq]G\\[aq] for gigabytes.\n-This value cannot be changed once JFR has been initialized.\n-(STRING, 10M)\n-.IP \\[bu] 2\n-\\f[V]repositorypath\\f[R]: (Optional) Path to the location where\n-recordings are stored until they are written to a permanent file.\n-(STRING, The default location is the temporary directory for the\n-operating system.\n-On Linux operating systems, the temporary directory is \\f[V]\/tmp\\f[R].\n-On Windwows, the temporary directory is specified by the \\f[V]TMP\\f[R]\n-environment variable.)\n-.IP \\[bu] 2\n-\\f[V]preserve-repository=\\f[R]{\\f[V]true\\f[R]|\\f[V]false\\f[R]} :\n-Specifies whether files stored in the disk repository should be kept\n-after the JVM has exited.\n-If false, files are deleted.\n-By default, this parameter is disabled.\n-.IP \\[bu] 2\n-\\f[V]stackdepth\\f[R]: (Optional) Stack depth for stack traces.\n-Setting this value greater than the default of 64 may cause a\n-performance degradation.\n-This value cannot be changed once JFR has been initialized.\n-(LONG, 64)\n-.IP \\[bu] 2\n-\\f[V]thread_buffer_size\\f[R]: (Optional) Local buffer size for each\n-thread in bytes if one of the following suffixes is not used:\n-\\[aq]k\\[aq] or \\[aq]K\\[aq] for kilobytes or \\[aq]m\\[aq] or \\[aq]M\\[aq]\n-for megabytes.\n-Overriding this parameter could reduce performance and is not\n-recommended.\n-This value cannot be changed once JFR has been initialized.\n-(STRING, 8k)\n-.IP \\[bu] 2\n-\\f[V]samplethreads\\f[R]: (Optional) Flag for activating thread sampling.\n-(BOOLEAN, true)\n-.RE\n-.TP\n-\\f[V]JFR.dump\\f[R] [\\f[I]options\\f[R]]\n-Write data to a file while a flight recording is running\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The \\f[I]options\\f[R] must be specified using either \\f[I]key\\f[R] or\n-\\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-No options are required.\n-The recording continues to run after the data is written.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]begin\\f[R]: (Optional) Specify the time from which recording data\n-will be included in the dump file.\n-The format is specified as local time.\n-(STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]end\\f[R]: (Optional) Specify the time to which recording data will\n-be included in the dump file.\n-The format is specified as local time.\n-(STRING, no default value)\n-.RS 2\n-.PP\n-\\f[B]Note:\\f[R] For both \\f[V]begin\\f[R] and \\f[V]end\\f[R], the time\n-must be in a format that can be read by\n-java.time.LocalTime::parse(STRING),\n-java.time.LocalDateTime::parse(STRING) or\n-java.time.Instant::parse(STRING).\n-For example, \\[dq]13:20:15\\[dq], \\[dq]2020-03-17T09:00:00\\[dq] or\n-\\[dq]2020-03-17T09:00:00Z\\[dq].\n-.PP\n-\\f[B]Note:\\f[R] \\f[V]begin\\f[R] and \\f[V]end\\f[R] times correspond to\n-the timestamps found within the recorded information in the flight\n-recording data.\n-.PP\n-Another option is to use a time relative to the current time that is\n-specified by a negative integer followed by \\[dq]s\\[dq], \\[dq]m\\[dq] or\n-\\[dq]h\\[dq].\n-For example, \\[dq]-12h\\[dq], \\[dq]-15m\\[dq] or \\[dq]-30s\\[dq]\n-.RE\n-.IP \\[bu] 2\n-\\f[V]filename\\f[R]: (Optional) Name of the file to which the flight\n-recording data is dumped.\n-If no filename is given, a filename is generated from the PID and the\n-current date.\n-The filename may also be a directory in which case, the filename is\n-generated from the PID and the current date in the specified directory.\n-If %p and\/or %t is specified in the filename, it expands to the\n-JVM\\[aq]s PID and the current timestamp, respectively.\n-(FILE, no default value)\n-.IP \\[bu] 2\n-\\f[V]maxage\\f[R]: (Optional) Length of time for dumping the flight\n-recording data to a file.\n-(INTEGER followed by \\[aq]s\\[aq] for seconds \\[aq]m\\[aq] for minutes or\n-\\[aq]h\\[aq] for hours, no default value)\n-.IP \\[bu] 2\n-\\f[V]maxsize\\f[R]: (Optional) Maximum size for the amount of data to\n-dump from a flight recording in bytes if one of the following suffixes\n-is not used: \\[aq]m\\[aq] or \\[aq]M\\[aq] for megabytes OR \\[aq]g\\[aq] or\n-\\[aq]G\\[aq] for gigabytes.\n-(STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]name\\f[R]: (Optional) Name of the recording.\n-If no name is given, data from all recordings is dumped.\n-(STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]path-to-gc-roots\\f[R]: (Optional) Flag for saving the path to\n-garbage collection (GC) roots at the time the recording data is dumped.\n-The path information is useful for finding memory leaks but collecting\n-it can cause the application to pause for a short period of time.\n-Turn on this flag only when you have an application that you suspect has\n-a memory leak.\n-(BOOLEAN, false)\n-.RE\n-.TP\n-\\f[V]JFR.start\\f[R] [\\f[I]options\\f[R]]\n-Start a flight recording\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The \\f[I]options\\f[R] must be specified using either \\f[I]key\\f[R] or\n-\\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-If no parameters are entered, then a recording is started with default\n-values.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]delay\\f[R]: (Optional) Length of time to wait before starting to\n-record (INTEGER followed by \\[aq]s\\[aq] for seconds \\[aq]m\\[aq] for\n-minutes or \\[aq]h\\[aq] for hours, 0s)\n-.IP \\[bu] 2\n-\\f[V]disk\\f[R]: (Optional) Flag for also writing the data to disk while\n-recording (BOOLEAN, true)\n-.IP \\[bu] 2\n-\\f[V]dumponexit\\f[R]: (Optional) Flag for writing the recording to disk\n-when the Java Virtual Machine (JVM) shuts down.\n-If set to \\[aq]true\\[aq] and no value is given for \\f[V]filename\\f[R],\n-the recording is written to a file in the directory where the process\n-was started.\n-The file name is a system-generated name that contains the process ID,\n-the recording ID and the current time stamp.\n-(For example: \\f[V]id-1-2019_12_12_10_41.jfr\\f[R]) (BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]duration\\f[R]: (Optional) Length of time to record.\n-Note that \\f[V]0s\\f[R] means forever (INTEGER followed by \\[aq]s\\[aq]\n-for seconds \\[aq]m\\[aq] for minutes or \\[aq]h\\[aq] for hours, 0s)\n-.IP \\[bu] 2\n-\\f[V]filename\\f[R]: (Optional) Name of the file to which the flight\n-recording data is written when the recording is stopped.\n-If no filename is given, a filename is generated from the PID and the\n-current date and is placed in the directory where the process was\n-started.\n-The filename may also be a directory in which case, the filename is\n-generated from the PID and the current date in the specified directory.\n-If %p and\/or %t is specified in the filename, it expands to the\n-JVM\\[aq]s PID and the current timestamp, respectively.\n-(FILE, no default value)\n-.IP \\[bu] 2\n-\\f[V]maxage\\f[R]: (Optional) Maximum time to keep the recorded data on\n-disk.\n-This parameter is valid only when the \\f[V]disk\\f[R] parameter is set to\n-\\f[V]true\\f[R].\n-Note \\f[V]0s\\f[R] means forever.\n-(INTEGER followed by \\[aq]s\\[aq] for seconds \\[aq]m\\[aq] for minutes or\n-\\[aq]h\\[aq] for hours, 0s)\n-.IP \\[bu] 2\n-\\f[V]maxsize\\f[R]: (Optional) Maximum size of the data to keep on disk\n-in bytes if one of the following suffixes is not used: \\[aq]m\\[aq] or\n-\\[aq]M\\[aq] for megabytes OR \\[aq]g\\[aq] or \\[aq]G\\[aq] for gigabytes.\n-This parameter is valid only when the \\f[V]disk\\f[R] parameter is set to\n-\\[aq]true\\[aq].\n-The value must not be less than the value for the \\f[V]maxchunksize\\f[R]\n-parameter set with the \\f[V]JFR.configure\\f[R] command.\n-(STRING, 0 (no maximum size))\n-.IP \\[bu] 2\n-\\f[V]name\\f[R]: (Optional) Name of the recording.\n-If no name is provided, a name is generated.\n-Make note of the generated name that is shown in the response to the\n-command so that you can use it with other commands.\n-(STRING, system-generated default name)\n-.IP \\[bu] 2\n-\\f[V]path-to-gc-roots\\f[R]: (Optional) Flag for saving the path to\n-garbage collection (GC) roots at the end of a recording.\n-The path information is useful for finding memory leaks but collecting\n-it is time consuming.\n-Turn on this flag only when you have an application that you suspect has\n-a memory leak.\n-If the \\f[V]settings\\f[R] parameter is set to \\[aq]profile\\[aq], then\n-the information collected includes the stack trace from where the\n-potential leaking object was allocated.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]settings\\f[R]: (Optional) Name of the settings file that identifies\n-which events to record.\n-To specify more than one file, separate the names with a comma\n-(\\[aq],\\[aq]).\n-Include the path if the file is not in \\f[V]JAVA-HOME\\f[R]\/lib\/jfr.\n-The following profiles are included with the JDK in the\n-\\f[V]JAVA-HOME\\f[R]\/lib\/jfr directory: \\[aq]default.jfc\\[aq]: collects a\n-predefined set of information with low overhead, so it has minimal\n-impact on performance and can be used with recordings that run\n-continuously; \\[aq]profile.jfc\\[aq]: Provides more data than the\n-\\[aq]default.jfc\\[aq] profile, but with more overhead and impact on\n-performance.\n-Use this configuration for short periods of time when more information\n-is needed.\n-Use \\f[V]none\\f[R] to start a recording without a predefined\n-configuration file.\n-(STRING, \\f[V]JAVA-HOME\\f[R]\/lib\/jfr\/default.jfc)\n-.PP\n-Event settings and .jfc options can be specified using the following\n-syntax:\n-.IP \\[bu] 2\n-\\f[V]option\\f[R]: (Optional) Specifies the option value to modify.\n-To list available options, use the \\f[V]JAVA_HOME\\f[R]\/bin\/jfr tool.\n-.IP \\[bu] 2\n-\\f[V]event-setting\\f[R]: (Optional) Specifies the event setting value to\n-modify.\n-Use the form: \\f[V]<event-name>#<setting-name>=<value>\\f[R] To add a new\n-event setting, prefix the event name with \\[aq]+\\[aq].\n-.PP\n-You can specify values for multiple event settings and .jfc options by\n-separating them with a whitespace.\n-In case of a conflict between a parameter and a .jfc option, the\n-parameter will take precedence.\n-The whitespace delimiter can be omitted for timespan values, i.e.\n-20ms.\n-For more information about the settings syntax, see Javadoc of the\n-jdk.jfr package.\n-.RE\n-.TP\n-\\f[V]JFR.stop\\f[R] [\\f[I]options\\f[R]]\n-Stop a flight recording\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The \\f[I]options\\f[R] must be specified using either \\f[I]key\\f[R] or\n-\\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-If no parameters are entered, then no recording is stopped.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]filename\\f[R]: (Optional) Name of the file to which the recording\n-is written when the recording is stopped.\n-If %p and\/or %t is specified in the filename, it expands to the\n-JVM\\[aq]s PID and the current timestamp, respectively.\n-If no path is provided, the data from the recording is discarded.\n-(FILE, no default value)\n-.IP \\[bu] 2\n-\\f[V]name\\f[R]: (Optional) Name of the recording (STRING, no default\n-value)\n-.RE\n-.TP\n-\\f[V]JFR.view\\f[R] [\\f[I]options\\f[R]]\n-Display event data in predefined views.\n-.RS\n-.PP\n-Impact: Medium\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The \\f[I]options\\f[R] must be specified using either \\f[I]key\\f[R] or\n-\\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-If no parameters are entered, then a list of available views are\n-displayed.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]cell-height\\f[R]: (Optional) Maximum number of rows in a table\n-cell.\n-(INT, default value depends on the view)\n-.IP \\[bu] 2\n-\\f[V]maxage\\f[R]: (Optional) Length of time for the view to span.\n-(INT followed by \\[aq]s\\[aq] for seconds \\[aq]m\\[aq] for minutes or\n-\\[aq]h\\[aq] for hours, default value is 10m)\n-.IP \\[bu] 2\n-\\f[V]maxsize\\f[R]: (Optional) Maximum size for the view to span in bytes\n-if one of the following suffixes is not used: \\[aq]m\\[aq] or \\[aq]M\\[aq]\n-for megabytes OR \\[aq]g\\[aq] or \\[aq]G\\[aq] for gigabytes.\n-(STRING, default value is 32MB)\n-.IP \\[bu] 2\n-\\f[V]truncate\\f[R]: (Optional) Maximum number of rows in a table cell.\n-(INT, default value depends on the view)\n-.IP \\[bu] 2\n-\\f[V]verbose\\f[R]: (Optional) Displays the query that makes up the view.\n-(BOOLEAN, default value is false)\n-.IP \\[bu] 2\n-\\f[V]width\\f[R]: (Optional) The width of the view in characters.\n-(INT, default value depends on the view)\n-.PP\n-\\f[I]arguments\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]view\\f[R]: Name of the view or event type to display.\n-Use \\f[V]help JFR.view\\f[R] to see a list of available views.\n-(STRING, no default value)\n-.PP\n-The view parameter can be an event type name.\n-Use \\f[V]JFR.view types\\f[R] to see a list.\n-To display all views, use \\f[V]JFR.view all-views\\f[R].\n-To display all events, use \\f[V]JFR.view all-events\\f[R].\n-.RE\n-.TP\n-\\f[V]JVMTI.agent_load\\f[R] [\\f[I]arguments\\f[R]]\n-Loads JVMTI native agent.\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[I]arguments\\f[R]:\n-.IP \\[bu] 2\n-\\f[I]library path\\f[R]: Absolute path of the JVMTI agent to load.\n-(STRING, no default value)\n-.IP \\[bu] 2\n-\\f[I]agent option\\f[R]: (Optional) Option string to pass the agent.\n-(STRING, no default value)\n-.RE\n-.TP\n-\\f[V]JVMTI.data_dump\\f[R]\n-Signal the JVM to do a data-dump request for JVMTI.\n-.RS\n-.PP\n-Impact: High\n-.RE\n-.TP\n-\\f[V]ManagementAgent.start\\f[R] [\\f[I]options\\f[R]]\n-Starts remote management agent.\n-.RS\n-.PP\n-Impact: Low --- no impact\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]config.file\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.config.file\\f[R] (STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.host\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxremote.host\\f[R] (STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.port\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxremote.port\\f[R] (STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.rmi.port\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxremote.rmi.port\\f[R] (STRING, no default\n-value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.ssl\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxremote.ssl\\f[R] (STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.registry.ssl\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxremote.registry.ssl\\f[R] (STRING, no default\n-value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.authenticate\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxremote.authenticate\\f[R] (STRING, no default\n-value)\n-.IP \\[bu] 2\n-jmxremote.password.file: (Optional) Sets\n-\\f[V]com.sun.management.jmxremote.password.file\\f[R] (STRING, no default\n-value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.access.file\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxremote.acce ss.file\\f[R] (STRING, no default\n-value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.login.config\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxremote.log in.config\\f[R] (STRING, no default\n-value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.ssl.enabled.cipher.suites\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management\\f[R].\n-.IP \\[bu] 2\n-\\f[V]jmxremote.ssl.enabled.cipher.suite\\f[R]: (STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.ssl.enabled.protocols\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxr emote.ssl.enabled.protocols\\f[R] (STRING,\n-no default value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.ssl.need.client.auth\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxre mote.need.client.auth\\f[R] (STRING, no\n-default value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.ssl.config.file\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxremote. ssl_config_file\\f[R] (STRING, no\n-default value)\n-.IP \\[bu] 2\n-\\f[V]jmxremote.autodiscovery\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jmxremote.au todiscovery\\f[R] (STRING, no\n-default value)\n-.IP \\[bu] 2\n-\\f[V]jdp.port\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jdp.port\\f[R] (INT, no default value)\n-.IP \\[bu] 2\n-\\f[V]jdp.address\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jdp.address\\f[R] (STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]jdp.source_addr\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jdp.source_addr\\f[R] (STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]jdp.ttl\\f[R]: (Optional) Sets \\f[V]com.sun.management.jdp.ttl\\f[R]\n-(INT, no default value)\n-.IP \\[bu] 2\n-\\f[V]jdp.pause\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jdp.pause\\f[R] (INT, no default value)\n-.IP \\[bu] 2\n-\\f[V]jdp.name\\f[R]: (Optional) Sets\n-\\f[V]com.sun.management.jdp.name\\f[R] (STRING, no default value)\n-.RE\n-.TP\n-\\f[V]ManagementAgent.start_local\\f[R]\n-Starts the local management agent.\n-.RS\n-.PP\n-Impact: Low --- no impact\n-.RE\n-.TP\n-\\f[V]ManagementAgent.status\\f[R]\n-Print the management agent status.\n-.RS\n-.PP\n-Impact: Low --- no impact\n-.RE\n-.TP\n-\\f[V]ManagementAgent.stop\\f[R]\n-Stops the remote management agent.\n-.RS\n-.PP\n-Impact: Low --- no impact\n-.RE\n-.TP\n-\\f[V]System.dump_map\\f[R] [\\f[I]options\\f[R]] (Linux only)\n-Dumps an annotated process memory map to an output file.\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-H\\f[R]: (Optional) Human readable format (BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]-F\\f[R]: (Optional) File path.\n-If %p is specified in the filename, it is expanded to the JVM\\[aq]s PID.\n-(FILE, \\[dq]vm_memory_map_%p.txt\\[dq])\n-.RE\n-.TP\n-\\f[V]System.map\\f[R] [\\f[I]options\\f[R]] (Linux only)\n-Prints an annotated process memory map of the VM process.\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-H\\f[R]: (Optional) Human readable format (BOOLEAN, false)\n-.RE\n-.TP\n-\\f[V]System.native_heap_info\\f[R] (Linux only)\n-Attempts to output information regarding native heap usage through\n-malloc_info(3).\n-If unsuccessful outputs \\[dq]Error: \\[dq] and a reason.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]System.trim_native_heap\\f[R] (Linux only)\n-Attempts to free up memory by trimming the C-heap.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]Thread.dump_to_file\\f[R] [\\f[I]options\\f[R]] \\f[I]filepath\\f[R]\n-Dump threads, with stack traces, to a file in plain text or JSON format.\n-.RS\n-.PP\n-Impact: Medium: Depends on the number of threads.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-overwrite\\f[R]: (Optional) May overwrite existing file (BOOLEAN,\n-false)\n-.IP \\[bu] 2\n-\\f[V]-format\\f[R]: (Optional) Output format (\\[dq]plain\\[dq] or\n-\\[dq]json\\[dq]) (STRING, plain)\n-.PP\n-\\f[I]arguments\\f[R]:\n-.IP \\[bu] 2\n-\\f[I]filepath\\f[R]: The file path to the output file.\n-If %p is specified in the filename, it is expanded to the JVM\\[aq]s PID.\n-(FILE, no default value)\n-.RE\n-.TP\n-\\f[V]Thread.print\\f[R] [\\f[I]options\\f[R]]\n-Prints all threads with stacktraces.\n-.RS\n-.PP\n-Impact: Medium --- depends on the number of threads.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-e\\f[R]: (Optional) Print extended thread information (BOOLEAN,\n-false)\n-.IP \\[bu] 2\n-\\f[V]-l\\f[R]: (Optional) Prints \\f[V]java.util.concurrent\\f[R] locks\n-(BOOLEAN, false)\n-.RE\n-.TP\n-\\f[V]VM.cds\\f[R] [\\f[I]arguments\\f[R]]\n-Dump a static or dynamic shared archive that includes all currently\n-loaded classes.\n-.RS\n-.PP\n-Impact: Medium --- pause time depends on number of loaded classes\n-.PP\n-\\f[I]arguments\\f[R]:\n-.IP \\[bu] 2\n-\\f[I]subcmd\\f[R]: must be either \\f[V]static_dump\\f[R] or\n-\\f[V]dynamic_dump\\f[R] (STRING, no default value)\n-.IP \\[bu] 2\n-\\f[I]filename\\f[R]: (Optional) Name of the shared archive to be dumped.\n-If %p is specified in the filename, it is expanded to the JVM\\[aq]s PID.\n-(FILE, \\[dq]java_pid%p_<subcmd>.jsa\\[dq])\n-.PP\n-If \\f[V]dynamic_dump\\f[R] is specified, the target JVM must be started\n-with the JVM option \\f[V]-XX:+RecordDynamicDumpInfo\\f[R].\n-.RE\n-.TP\n-\\f[V]VM.class_hierarchy\\f[R] [\\f[I]options\\f[R]] [\\f[I]arguments\\f[R]]\n-Print a list of all loaded classes, indented to show the class\n-hierarchy.\n-The name of each class is followed by the ClassLoaderData* of its\n-ClassLoader, or \\[dq]null\\[dq] if it is loaded by the bootstrap class\n-loader.\n-.RS\n-.PP\n-Impact: Medium --- depends on the number of loaded classes.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-i\\f[R]: (Optional) Inherited interfaces should be printed.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]-s\\f[R]: (Optional) If a classname is specified, print its\n-subclasses in addition to its superclasses.\n-Without this option only the superclasses will be printed.\n-(BOOLEAN, false)\n-.PP\n-\\f[I]arguments\\f[R]:\n-.IP \\[bu] 2\n-\\f[I]classname\\f[R]: (Optional) The name of the class whose hierarchy\n-should be printed.\n-If not specified, all class hierarchies are printed.\n-(STRING, no default value)\n-.RE\n-.TP\n-\\f[V]VM.classes\\f[R] [\\f[I]options\\f[R]]\n-Print all loaded classes\n-.RS\n-.PP\n-Impact: Medium: Depends on number of loaded classes.\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-verbose\\f[R]: (Optional) Dump the detailed content of a Java\n-class.\n-Some classes are annotated with flags: \\f[V]F\\f[R] = has, or inherits, a\n-non-empty finalize method, \\f[V]f\\f[R] = has final method, \\f[V]W\\f[R] =\n-methods rewritten, \\f[V]C\\f[R] = marked with \\f[V]\\[at]Contended\\f[R]\n-annotation, \\f[V]R\\f[R] = has been redefined, \\f[V]S\\f[R] = is shared\n-class (BOOLEAN, false)\n-.RE\n-.TP\n-\\f[V]VM.classloader_stats\\f[R]\n-Print statistics about all ClassLoaders.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]VM.classloaders\\f[R] [\\f[I]options\\f[R]]\n-Prints classloader hierarchy.\n-.RS\n-.PP\n-Impact: Medium --- Depends on number of class loaders and classes\n-loaded.\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]show-classes\\f[R]: (Optional) Print loaded classes.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]verbose\\f[R]: (Optional) Print detailed information.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]fold\\f[R]: (Optional) Show loaders of the same name and class as\n-one.\n-(BOOLEAN, true)\n-.RE\n-.TP\n-\\f[V]VM.command_line\\f[R]\n-Print the command line used to start this VM instance.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]VM.dynlibs\\f[R]\n-Print loaded dynamic libraries.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]VM.events\\f[R] [\\f[I]options\\f[R]]\n-Print VM event logs\n-.RS\n-.PP\n-Impact: Low --- Depends on event log size.\n-.PP\n-\\f[I]options\\f[R]:\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.IP \\[bu] 2\n-\\f[V]log\\f[R]: (Optional) Name of log to be printed.\n-If omitted, all logs are printed.\n-(STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]max\\f[R]: (Optional) Maximum number of events to be printed (newest\n-first).\n-If omitted, all events are printed.\n-(STRING, no default value)\n-.RE\n-.TP\n-\\f[V]VM.flags\\f[R] [\\f[I]options\\f[R]]\n-Print the VM flag options and their current values.\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-all\\f[R]: (Optional) Prints all flags supported by the VM\n-(BOOLEAN, false).\n-.RE\n-.TP\n-\\f[V]VM.info\\f[R]\n-Print information about the JVM environment and status.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]VM.log\\f[R] [\\f[I]options\\f[R]]\n-Lists current log configuration, enables\/disables\/configures a log\n-output, or rotates all logs.\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[I]options\\f[R]:\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.IP \\[bu] 2\n-\\f[V]output\\f[R]: (Optional) The name or index (#) of output to\n-configure.\n-(STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]output_options\\f[R]: (Optional) Options for the output.\n-(STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]what\\f[R]: (Optional) Configures what tags to log.\n-(STRING, no default value )\n-.IP \\[bu] 2\n-\\f[V]decorators\\f[R]: (Optional) Configures which decorators to use.\n-Use \\[aq]none\\[aq] or an empty value to remove all.\n-(STRING, no default value)\n-.IP \\[bu] 2\n-\\f[V]disable\\f[R]: (Optional) Turns off all logging and clears the log\n-configuration.\n-(BOOLEAN, no default value)\n-.IP \\[bu] 2\n-\\f[V]list\\f[R]: (Optional) Lists current log configuration.\n-(BOOLEAN, no default value)\n-.IP \\[bu] 2\n-\\f[V]rotate\\f[R]: (Optional) Rotates all logs.\n-(BOOLEAN, no default value)\n-.RE\n-.TP\n-\\f[V]VM.metaspace\\f[R] [\\f[I]options\\f[R]]\n-Prints the statistics for the metaspace\n-.RS\n-.PP\n-Impact: Medium --- Depends on number of classes loaded.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]basic\\f[R]: (Optional) Prints a basic summary (does not need a\n-safepoint).\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]show-loaders\\f[R]: (Optional) Shows usage by class loader.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]show-classes\\f[R]: (Optional) If show-loaders is set, shows loaded\n-classes for each loader.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]by-chunktype\\f[R]: (Optional) Break down numbers by chunk type.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]by-spacetype\\f[R]: (Optional) Break down numbers by loader type.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]vslist\\f[R]: (Optional) Shows details about the underlying virtual\n-space.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]chunkfreelist\\f[R]: (Optional) Shows details about global chunk\n-free lists (ChunkManager).\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]scale\\f[R]: (Optional) Memory usage in which to scale.\n-Valid values are: 1, KB, MB or GB (fixed scale) or \\[dq]dynamic\\[dq] for\n-a dynamically chosen scale.\n-(STRING, dynamic)\n-.RE\n-.TP\n-\\f[V]VM.native_memory\\f[R] [\\f[I]options\\f[R]]\n-Print native memory usage\n-.RS\n-.PP\n-Impact: Medium\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]summary\\f[R]: (Optional) Requests runtime to report current memory\n-summary, which includes total reserved and committed memory, along with\n-memory usage summary by each subsystem.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]detail\\f[R]: (Optional) Requests runtime to report memory\n-allocation >= 1K by each callsite.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]baseline\\f[R]: (Optional) Requests runtime to baseline current\n-memory usage, so it can be compared against in later time.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]summary.diff\\f[R]: (Optional) Requests runtime to report memory\n-summary comparison against previous baseline.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]detail.diff\\f[R]: (Optional) Requests runtime to report memory\n-detail comparison against previous baseline, which shows the memory\n-allocation activities at different callsites.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]statistics\\f[R]: (Optional) Prints tracker statistics for tuning\n-purpose.\n-(BOOLEAN, false)\n-.IP \\[bu] 2\n-\\f[V]scale\\f[R]: (Optional) Memory usage in which scale, KB, MB or GB\n-(STRING, KB)\n-.RE\n-.TP\n-\\f[V]VM.set_flag\\f[R] [\\f[I]arguments\\f[R]]\n-Sets VM flag option using the provided value.\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[I]arguments\\f[R]:\n-.IP \\[bu] 2\n-\\f[I]flag name\\f[R]: The name of the flag that you want to set (STRING,\n-no default value)\n-.IP \\[bu] 2\n-\\f[I]string value\\f[R]: (Optional) The value that you want to set\n-(STRING, no default value)\n-.RE\n-.TP\n-\\f[V]VM.stringtable\\f[R] [\\f[I]options\\f[R]]\n-Dump string table.\n-.RS\n-.PP\n-Impact: Medium --- depends on the Java content.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-verbose\\f[R]: (Optional) Dumps the content of each string in the\n-table (BOOLEAN, false)\n-.RE\n-.TP\n-\\f[V]VM.symboltable\\f[R] [\\f[I]options\\f[R]]\n-Dump symbol table.\n-.RS\n-.PP\n-Impact: Medium --- depends on the Java content.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax).\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-verbose\\f[R]: (Optional) Dumps the content of each symbol in the\n-table (BOOLEAN, false)\n-.RE\n-.TP\n-\\f[V]VM.system_properties\\f[R]\n-Print system properties.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n-.TP\n-\\f[V]VM.systemdictionary\\f[R]\n-Prints the statistics for dictionary hashtable sizes and bucket length.\n-.RS\n-.PP\n-Impact: Medium\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]verbose\\f[R]: (Optional) Dump the content of each dictionary entry\n-for all class loaders (BOOLEAN, false) .\n-.RE\n-.TP\n-\\f[V]VM.uptime\\f[R] [\\f[I]options\\f[R]]\n-Print VM uptime.\n-.RS\n-.PP\n-Impact: Low\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The following \\f[I]options\\f[R] must be specified using either\n-\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R] syntax.\n-.PP\n-\\f[I]options\\f[R]:\n-.IP \\[bu] 2\n-\\f[V]-date\\f[R]: (Optional) Adds a prefix with the current date\n-(BOOLEAN, false)\n-.RE\n-.TP\n-\\f[V]VM.version\\f[R]\n-Print JVM version information.\n-.RS\n-.PP\n-Impact: Low\n-.RE\n","filename":"src\/jdk.jcmd\/share\/man\/jcmd.1","additions":0,"deletions":1345,"binary":false,"changes":1345,"status":"deleted"},{"patch":"@@ -0,0 +1,1032 @@\n+---\n+# Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JCMD(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jcmd - send diagnostic command requests to a running Java Virtual Machine\n+(JVM)\n+\n+## Synopsis\n+\n+`jcmd` \\[*pid* \\| *main-class*\\] *command*... \\| `PerfCounter.print` \\| `-f`\n+*filename*\n+\n+`jcmd` \\[`-l`\\]\n+\n+`jcmd` `-h`\n+\n+*pid*\n+:   When used, the `jcmd` utility sends the diagnostic command request to the\n+    process ID for the Java process.\n+\n+*main-class*\n+:   When used, the `jcmd` utility sends the diagnostic command request to all\n+    Java processes with the specified name of the main class.\n+\n+*command*\n+:   The `command` must be a valid `jcmd` command for the selected JVM. The list\n+    of available commands for `jcmd` is obtained by running the `help` command\n+    (`jcmd` *pid* `help`) where *pid* is the process ID for the running Java\n+    process.\n+\n+`Perfcounter.print`\n+:   Prints the performance counters exposed by the specified Java process.\n+\n+`-f` *filename*\n+:   Reads and executes commands from a specified file, *filename*.\n+\n+`-l`\n+:   Displays the list of Java Virtual Machine process identifiers that are not\n+    running in a separate docker process along with the main class and\n+    command-line arguments that were used to launch the process. If the JVM is\n+    in a docker process, you must use tools such as `ps` to look up the PID.\n+\n+    **Note:**\n+\n+    Using `jcmd` without arguments is the same as using `jcmd -l`.\n+\n+`-h`\n+:   Displays the `jcmd` utility's command-line help.\n+\n+## Description\n+\n+The `jcmd` utility is used to send diagnostic command requests to the JVM. It\n+must be used on the same machine on which the JVM is running, and have the same\n+effective user and group identifiers that were used to launch the JVM. Each\n+diagnostic command has its own set of options and arguments. To display the description,\n+syntax, and a list of available options and arguments for a diagnostic command, use the\n+name of the command as the argument. For example:\n+\n+>   `jcmd` *pid* `help` *command*\n+\n+If arguments contain spaces, then you must surround them with single or double\n+quotation marks (`'` or `\"`). In addition, you must escape single or double\n+quotation marks with a backslash (`\\`) to prevent the operating system shell\n+from processing quotation marks. Alternatively, you can surround these\n+arguments with single quotation marks and then with double quotation marks (or\n+with double quotation marks and then with single quotation marks).\n+\n+If you specify the process identifier (*pid*) or the main class (*main-class*)\n+as the first argument, then the `jcmd` utility sends the diagnostic command\n+request to the Java process with the specified identifier or to all Java\n+processes with the specified name of the main class. You can also send the\n+diagnostic command request to all available Java processes by specifying `0` as\n+the process identifier.\n+\n+## Commands for jcmd\n+\n+The *command* must be a valid `jcmd` diagnostic command for the selected JVM.\n+The list of available commands for `jcmd` is obtained by running the `help`\n+command (`jcmd` *pid* `help`) where *pid* is the process ID for a running Java\n+process. If the *pid* is `0`, commands will be sent to all Java processes. The\n+main class argument will be used to match, either partially or fully, the class\n+used to start Java. If no options are given, it lists the running Java process\n+identifiers that are not in separate docker processes along with the main class\n+and command-line arguments that were used to launch the process (the same as\n+using `-l`).\n+\n+`jcmd` *commands* may take options and arguments.  *Options* are specified using\n+either *key* or *key*`=`*value* syntax.  *Arguments* are given as just a value,\n+never name=value.\n+\n+\n+The following commands are available:\n+\n+`help` \\[*options*\\] \\[*arguments*\\]\n+:   For more information about a specific command.\n+\n+    *arguments*:\n+\n+    -   *command name*: The name of the command for which we want help (STRING,\n+        no default value)\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `-all`: (Optional) Show help for all commands (BOOLEAN, false) .\n+\n+`Compiler.CodeHeap_Analytics`  \\[*function*\\] \\[*granularity*\\]\n+:   Print CodeHeap analytics\n+\n+    Impact: Low: Depends on code heap size and content. Holds CodeCache_lock during analysis step, usually sub-second duration.\n+\n+    *arguments*:\n+\n+    -   *function*: (Optional) Function to be performed (aggregate, UsedSpace, FreeSpace, MethodCount, MethodSpace, MethodAge, MethodNames, discard (STRING, all)\n+\n+    -   *granularity*: (Optional) Detail level - smaller value -> more detail (INT, 4096)\n+\n+`Compiler.codecache`\n+:   Prints code cache layout and bounds.\n+\n+    Impact: Low\n+\n+`Compiler.codelist`\n+:   Prints all compiled methods in code cache that are alive.\n+\n+    Impact: Medium\n+\n+`Compiler.directives_add` *arguments*\n+:   Adds compiler directives from a file.\n+\n+    Impact: Low\n+\n+    *arguments*:\n+\n+    -   *filename*: The name of the directives file (STRING, no default value)\n+\n+`Compiler.directives_clear`\n+:   Remove all compiler directives.\n+\n+    Impact: Low\n+\n+`Compiler.directives_print`\n+:   Prints all active compiler directives.\n+\n+    Impact: Low\n+\n+`Compiler.directives_remove`\n+:   Remove latest added compiler directive.\n+\n+    Impact: Low\n+\n+`Compiler.memory` \\[*options*\\]\n+:   Print compilation footprint\n+\n+    Impact: Medium: Pause time depends on number of compiled methods\n+\n+    **Note:**\n+\n+    The *options* must be specified using either *key* or *key*`=`*value*\n+    syntax.\n+\n+    *options*:\n+\n+    -   `-H`: (Optional) Human readable format (BOOLEAN, false)\n+    -   `-s`: (Optional) Minimum memory size (MEMORY SIZE, 0)\n+\n+`Compiler.perfmap` \\[*arguments*\\] (Linux only)\n+:   Write map file for Linux perf tool.\n+\n+    Impact: Low\n+\n+    *arguments*:\n+\n+    -   *filename*: (Optional) The name of the map file.  If %p is specified in the filename, it is expanded to the JVM's PID. (FILE, \"\/tmp\/perf-%p.map\")\n+\n+`Compiler.queue`\n+:   Prints methods queued for compilation.\n+\n+    Impact: Low\n+\n+`GC.class_histogram` \\[*options*\\]\n+:   Provides statistics about the Java heap usage.\n+\n+    Impact: High --- depends on Java heap size and content.\n+\n+    **Note:**\n+\n+    The *options* must be specified using either *key* or *key*`=`*value*\n+    syntax.\n+\n+    *options*:\n+\n+    -   `-all`: (Optional) Inspects all objects, including unreachable objects\n+        (BOOLEAN, false)\n+    -  `-parallel`: (Optional) Number of parallel threads to use for heap inspection.\n+       0 (the default) means let the VM determine the number of threads to use.\n+       1 means use one thread (disable parallelism). For any other value the VM will\n+       try to use the specified number of threads, but might use fewer. (INT, 0)\n+\n+`GC.finalizer_info`\n+:   Provides information about the Java finalization queue.\n+\n+    Impact: Medium\n+\n+`GC.heap_dump` \\[*options*\\] *filename*\n+:   Generates a HPROF format dump of the Java heap.\n+\n+    Impact: High --- depends on the Java heap size and content. Request a full\n+    GC unless the `-all` option is specified.\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `-all`: (Optional) Dump all objects, including unreachable objects\n+        (BOOLEAN, false)\n+    -   `-gz`: (Optional) If specified, the heap dump is written in gzipped format\n+         using the given compression level. 1 (recommended) is the fastest, 9 the\n+         strongest compression. (INT, 1)\n+    -   `-overwrite`: (Optional) If specified, the dump file will be overwritten if\n+         it exists (BOOLEAN, false)\n+    -   `-parallel`: (Optional) Number of parallel threads to use for heap dump. The VM will try to use the specified number of threads, but might use fewer. (INT, 1)\n+\n+    *arguments*:\n+\n+    -   *filename*: The name of the dump file.  If %p is specified in the filename, it is expanded to the JVM's PID. (FILE, no default value)\n+\n+`GC.heap_info`\n+:   Provides generic Java heap information.\n+\n+    Impact: Medium\n+\n+`GC.run`\n+:   Calls `java.lang.System.gc()`.\n+\n+    Impact: Medium --- depends on the Java heap size and content.\n+\n+`GC.run_finalization`\n+:   Calls `java.lang.System.runFinalization()`.\n+\n+    Impact: Medium --- depends on the Java content.\n+\n+`JFR.check` \\[*options*\\]\n+:   Show information about a running flight recording\n+\n+    Impact: Low\n+\n+    **Note:**\n+\n+    The *options* must be specified using either *key* or *key*`=`*value*\n+    syntax. If no parameters are entered, information for all active recordings is shown.\n+\n+    *options*:\n+\n+    -   `name`: (Optional) Name of the flight recording. (STRING, no default value)\n+\n+    -   `verbose`: (Optional) Flag for printing the event settings for the recording\n+        (BOOLEAN, false)\n+\n+`JFR.configure` \\[*options*\\]\n+:   Set the parameters for a flight recording\n+\n+    Impact: Low\n+\n+    **Note:**\n+\n+    The *options* must be specified using either *key* or *key*`=`*value*\n+    syntax. If no parameters are entered, the current settings are displayed.\n+\n+    *options*:\n+\n+    -   `dumppath`: (Optional) Path to the location where a recording file is written\n+        in case the VM runs into a critical error, such as a system\n+        crash. (STRING, The default location is the current directory)\n+\n+    -   `globalbuffercount`: (Optional) Number of global buffers. This option is\n+        a legacy option: change the `memorysize` parameter to alter the number of\n+        global buffers. This value cannot be changed once JFR has been initialized.\n+        (STRING, default determined by the value for `memorysize`)\n+\n+    -   `globalbuffersize`: (Optional) Size of the global buffers, in bytes. This\n+        option is a legacy option: change the `memorysize` parameter to alter\n+        the size of the global buffers. This value cannot be changed once JFR\n+        has been initialized. (STRING, default determined by the value for `memorysize`)\n+\n+    -   `maxchunksize`: (Optional) Maximum size of an individual data chunk in bytes\n+        if one of the following suffixes is not used: 'm' or 'M' for megabytes OR\n+        'g' or 'G' for gigabytes. This value cannot be changed once JFR has been\n+        initialized. (STRING, 12M)\n+\n+    -   `memorysize`: (Optional) Overall memory size, in bytes if one of the following\n+        suffixes is not used: 'm' or 'M' for megabytes OR 'g' or 'G' for gigabytes.\n+        This value cannot be changed once JFR has been initialized. (STRING, 10M)\n+\n+    -   `repositorypath`: (Optional) Path to the location where recordings are stored\n+        until they are written to a permanent file. (STRING, The default location is\n+        the temporary directory for the operating system. On Linux operating systems,\n+        the temporary directory is `\/tmp`. On Windwows, the temporary directory is\n+        specified by the `TMP` environment variable.)\n+\n+    -   `preserve-repository=`{`true`\\|`false`} : Specifies whether files stored in\n+        the disk repository should be kept after the JVM has exited. If false, files\n+        are deleted. By default, this parameter is disabled.\n+\n+    -   `stackdepth`: (Optional) Stack depth for stack traces. Setting this value\n+        greater than the default of 64 may cause a performance degradation.\n+        This value cannot be changed once JFR has been initialized.  (LONG, 64)\n+\n+    -   `thread_buffer_size`: (Optional) Local buffer size for each thread in bytes if one\n+        of the following suffixes is not used: 'k' or 'K' for kilobytes or 'm' or 'M'\n+        for megabytes. Overriding this parameter could reduce performance and is\n+        not recommended. This value cannot be changed once JFR has been initialized.\n+        (STRING, 8k)\n+\n+    -   `samplethreads`: (Optional) Flag for activating thread sampling. (BOOLEAN, true)\n+\n+`JFR.dump` \\[*options*\\]\n+:   Write data to a file while a flight recording is running\n+\n+    Impact: Low\n+\n+    **Note:**\n+\n+    The *options* must be specified using either *key* or *key*`=`*value* syntax.\n+    No options are required. The recording continues to run after the data is written.\n+\n+    *options*:\n+\n+    -   `begin`: (Optional) Specify the time from which recording data will be included\n+        in the dump file. The format is specified as local time. (STRING, no default value)\n+\n+    -   `end`: (Optional) Specify the time to which recording data will be included in the\n+        dump file. The format is specified as local time. (STRING, no default value)\n+\n+        **Note:** For both `begin` and `end`, the time must be in a format that can be read\n+        by java.time.LocalTime::parse(STRING), java.time.LocalDateTime::parse(STRING)\n+        or java.time.Instant::parse(STRING). For example, \"13:20:15\", \"2020-03-17T09:00:00\"\n+        or \"2020-03-17T09:00:00Z\".\n+\n+        **Note:** `begin` and `end` times correspond to the timestamps found within the recorded\n+        information in the flight recording data.\n+\n+        Another option is to use a time relative to the current time that is specified\n+        by a negative integer followed by \"s\", \"m\" or \"h\".  For example, \"-12h\", \"-15m\" or \"-30s\"\n+\n+    -   `filename`: (Optional) Name of the file to which the flight recording data\n+        is dumped. If no filename is given, a filename is generated from the PID and\n+        the current date. The filename may also be a directory in which case, the filename\n+        is generated from the PID and the current date in the specified directory.\n+        If %p and\/or %t is specified in the filename, it expands to the JVM's PID and\n+        the current timestamp, respectively.\n+        (FILE, no default value)\n+\n+    -   `maxage`: (Optional) Length of time for dumping the flight recording data\n+        to a file. (INTEGER followed by 's' for seconds 'm' for minutes or 'h' for hours,\n+        no default value)\n+\n+    -   `maxsize`: (Optional) Maximum size for the amount of data to dump from a flight\n+        recording in bytes if one of the following suffixes is not used: 'm' or 'M' for megabytes\n+        OR 'g' or 'G' for gigabytes. (STRING, no default value)\n+\n+    -   `name`: (Optional) Name of the recording. If no name is given, data\n+        from all recordings is dumped. (STRING, no default value)\n+\n+    -   `path-to-gc-roots`: (Optional) Flag for saving the path to garbage collection (GC)\n+        roots at the time the recording data is dumped. The path information is useful for\n+        finding memory leaks but collecting it can cause the application to pause for\n+        a short period of time. Turn on this flag only when you have an application\n+        that you suspect has a memory leak. (BOOLEAN, false)\n+\n+`JFR.start` \\[*options*\\]\n+:   Start a flight recording\n+\n+    Impact: Low\n+\n+    **Note:**\n+\n+    The *options* must be specified using either *key* or *key*`=`*value*\n+    syntax. If no parameters are entered, then a recording is started with default values.\n+\n+    *options*:\n+\n+    -   `delay`: (Optional) Length of time to wait before starting to record\n+        (INTEGER followed by 's' for seconds 'm' for minutes or 'h' for hours, 0s)\n+\n+    -   `disk`: (Optional) Flag for also writing the data to disk while recording\n+        (BOOLEAN, true)\n+\n+    -   `dumponexit`: (Optional) Flag for writing the recording to disk when the\n+        Java Virtual Machine (JVM) shuts down. If set to 'true' and no value is given\n+        for `filename`, the recording is written to a file in the directory where\n+        the process was started. The file name is a system-generated name that\n+        contains the process ID, the recording ID and the current time stamp.\n+        (For example: `id-1-2019_12_12_10_41.jfr`) (BOOLEAN, false)\n+\n+    -   `duration`: (Optional) Length of time to record. Note that `0s` means forever\n+        (INTEGER followed by 's' for seconds 'm' for minutes or 'h' for hours, 0s)\n+\n+    -   `filename`: (Optional) Name of the file to which the flight recording data\n+        is written when the recording is stopped. If no filename is given, a filename\n+        is generated from the PID and the current date and is placed in the directory\n+        where the process was started. The filename may also be a directory in which case,\n+        the filename is generated from the PID and the current date in the specified directory.\n+        If %p and\/or %t is specified in the filename, it expands to the JVM's PID\n+        and the current timestamp, respectively.\n+        (FILE, no default value)\n+\n+    -   `maxage`: (Optional) Maximum time to keep the recorded data on disk. This\n+        parameter is valid only when the `disk` parameter is set to `true`. Note\n+        `0s` means forever. (INTEGER followed by 's' for seconds 'm'\n+        for minutes or 'h' for hours, 0s)\n+\n+    -   `maxsize`: (Optional) Maximum size of the data to keep on disk in bytes if one\n+        of the following suffixes is not used: 'm' or 'M' for megabytes OR 'g' or 'G' for gigabytes.\n+        This parameter is valid only when the `disk` parameter is set to 'true'. The value must\n+        not be less than the value for the `maxchunksize` parameter set with the `JFR.configure` command.\n+        (STRING, 0 (no maximum size))\n+\n+    -   `name`: (Optional) Name of the recording. If no name is provided, a name is generated.\n+        Make note of the generated name that is shown in the response to the command so that\n+        you can use it with other commands. (STRING, system-generated default name)\n+\n+    -   `path-to-gc-roots`: (Optional) Flag for saving the path to garbage collection (GC)\n+        roots at the end of a recording. The path information is useful for finding memory leaks\n+        but collecting it is time consuming. Turn on this flag only when you\n+        have an application that you suspect has a memory leak. If the `settings` parameter\n+        is set to 'profile', then the information collected includes the stack trace\n+        from where the potential leaking object was allocated. (BOOLEAN, false)\n+\n+    -   `settings`: (Optional) Name of the settings file that identifies which events to record.\n+        To specify more than one file, separate the names with a comma (','). Include the path\n+        if the file is not in `JAVA-HOME`\/lib\/jfr. The following profiles are included with\n+        the JDK in the `JAVA-HOME`\/lib\/jfr directory: 'default.jfc': collects a predefined set\n+        of information with low overhead, so it has minimal impact on performance and can be\n+        used with recordings that run continuously; 'profile.jfc': Provides more data than the\n+        'default.jfc' profile, but with more overhead and impact on performance. Use this\n+        configuration for short periods of time when more information is needed. Use `none` to\n+        start a recording without a predefined configuration file.\n+        (STRING, `JAVA-HOME`\/lib\/jfr\/default.jfc)\n+\n+    Event settings and .jfc options can be specified using the following syntax:\n+\n+    -   `option`: (Optional) Specifies the option value to modify. To list available\n+        options, use the `JAVA_HOME`\/bin\/jfr tool.\n+\n+    -   `event-setting`: (Optional) Specifies the event setting value to modify. Use the form:\n+        `<event-name>#<setting-name>=<value>`\n+        To add a new event setting, prefix the event name with '+'.\n+\n+    You can specify values for multiple event settings and .jfc options by\n+    separating them with a whitespace. In case of a conflict between a parameter\n+    and a .jfc option, the parameter will take precedence. The whitespace\n+    delimiter can be omitted for timespan values, i.e. 20ms. For more\n+    information about the settings syntax, see Javadoc of the jdk.jfr\n+    package.\n+\n+`JFR.stop` \\[*options*\\]\n+:   Stop a flight recording\n+\n+    Impact: Low\n+\n+    **Note:**\n+\n+    The *options* must be specified using either *key* or *key*`=`*value*\n+    syntax. If no parameters are entered, then no recording is stopped.\n+\n+    *options*:\n+\n+    -   `filename`: (Optional) Name of the file to which the recording is\n+        written when the recording is stopped. If %p and\/or %t is specified\n+        in the filename, it expands to the JVM's PID and the current\n+        timestamp, respectively. If no path is provided, the data from the\n+        recording is discarded. (FILE, no default value)\n+\n+    -   `name`: (Optional) Name of the recording (STRING, no default value)\n+\n+\n+`JFR.view` \\[*options*\\]\n+:   Display event data in predefined views.\n+\n+    Impact: Medium\n+\n+    **Note:**\n+\n+    The *options* must be specified using either *key* or *key*`=`*value*\n+    syntax. If no parameters are entered, then a list of available views\n+    are displayed.\n+\n+    *options*:\n+\n+    -   `cell-height`: (Optional) Maximum number of rows in a table cell.\n+        (INT, default value depends on the view)\n+\n+    -   `maxage`: (Optional) Length of time for the view to span.\n+        (INT followed by 's' for seconds 'm' for minutes or 'h' for hours,\n+        default value is 10m)\n+\n+    -   `maxsize`: (Optional) Maximum size for the view to span in bytes if one\n+        of the following suffixes is not used: 'm' or 'M' for megabytes OR\n+        'g' or 'G' for gigabytes. (STRING, default value is 32MB)\n+\n+    -   `truncate`: (Optional) Maximum number of rows in a table cell.\n+        (INT, default value depends on the view)\n+\n+    -   `verbose`: (Optional) Displays the query that makes up the view.\n+        (BOOLEAN, default value is false)\n+\n+    -   `width`: (Optional) The width of the view in characters. (INT,\n+        default value depends on the view)\n+\n+    *arguments*:\n+\n+    -   `view`: Name of the view or event type to display. Use `help JFR.view`\n+        to see a list of available views. (STRING, no default value)\n+\n+    The view parameter can be an event type name. Use `JFR.view types` to see\n+    a list. To display all views, use `JFR.view all-views`. To display all\n+    events, use `JFR.view all-events`.\n+\n+`JVMTI.agent_load` \\[*arguments*\\]\n+:   Loads JVMTI native agent.\n+\n+    Impact: Low\n+\n+    *arguments*:\n+\n+    -   *library path*: Absolute path of the JVMTI agent to load. (STRING, no\n+        default value)\n+\n+    -   *agent option*: (Optional) Option string to pass the agent. (STRING, no\n+        default value)\n+\n+`JVMTI.data_dump`\n+:   Signal the JVM to do a data-dump request for JVMTI.\n+\n+    Impact: High\n+\n+`ManagementAgent.start` \\[*options*\\]\n+:   Starts remote management agent.\n+\n+    Impact: Low --- no impact\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `config.file`: (Optional) Sets `com.sun.management.config.file`\n+        (STRING, no default value)\n+\n+    -   `jmxremote.host`: (Optional) Sets `com.sun.management.jmxremote.host`\n+        (STRING, no default value)\n+\n+    -   `jmxremote.port`: (Optional) Sets `com.sun.management.jmxremote.port`\n+        (STRING, no default value)\n+\n+    -   `jmxremote.rmi.port`: (Optional) Sets\n+        `com.sun.management.jmxremote.rmi.port` (STRING, no default value)\n+\n+    -   `jmxremote.ssl`: (Optional) Sets `com.sun.management.jmxremote.ssl`\n+        (STRING, no default value)\n+\n+    -   `jmxremote.registry.ssl`: (Optional) Sets\n+        `com.sun.management.jmxremote.registry.ssl` (STRING, no default value)\n+\n+    -   `jmxremote.authenticate`: (Optional) Sets\n+        `com.sun.management.jmxremote.authenticate` (STRING, no default value)\n+\n+    -   jmxremote.password.file: (Optional) Sets\n+        `com.sun.management.jmxremote.password.file` (STRING, no default value)\n+\n+    -   `jmxremote.access.file`: (Optional) Sets\n+        `com.sun.management.jmxremote.acce ss.file` (STRING, no default value)\n+\n+    -   `jmxremote.login.config`: (Optional) Sets\n+        `com.sun.management.jmxremote.log in.config` (STRING, no default value)\n+\n+    -   `jmxremote.ssl.enabled.cipher.suites`: (Optional) Sets\n+        `com.sun.management`.\n+\n+    -   `jmxremote.ssl.enabled.cipher.suite`: (STRING, no default value)\n+\n+    -   `jmxremote.ssl.enabled.protocols`: (Optional) Sets\n+        `com.sun.management.jmxr emote.ssl.enabled.protocols` (STRING, no\n+        default value)\n+\n+    -   `jmxremote.ssl.need.client.auth`: (Optional) Sets\n+        `com.sun.management.jmxre mote.need.client.auth` (STRING, no default\n+        value)\n+\n+    -   `jmxremote.ssl.config.file`: (Optional) Sets\n+        `com.sun.management.jmxremote. ssl_config_file` (STRING, no default\n+        value)\n+\n+    -   `jmxremote.autodiscovery`: (Optional) Sets\n+        `com.sun.management.jmxremote.au todiscovery` (STRING, no default\n+        value)\n+\n+    -   `jdp.port`: (Optional) Sets `com.sun.management.jdp.port` (INT, no\n+        default value)\n+\n+    -   `jdp.address`: (Optional) Sets `com.sun.management.jdp.address`\n+        (STRING, no default value)\n+\n+    -   `jdp.source_addr`: (Optional) Sets `com.sun.management.jdp.source_addr`\n+        (STRING, no default value)\n+\n+    -   `jdp.ttl`: (Optional) Sets `com.sun.management.jdp.ttl` (INT, no\n+        default value)\n+\n+    -   `jdp.pause`: (Optional) Sets `com.sun.management.jdp.pause` (INT, no\n+        default value)\n+\n+    -   `jdp.name`: (Optional) Sets `com.sun.management.jdp.name` (STRING, no\n+        default value)\n+\n+`ManagementAgent.start_local`\n+:   Starts the local management agent.\n+\n+    Impact: Low --- no impact\n+\n+`ManagementAgent.status`\n+:   Print the management agent status.\n+\n+    Impact: Low --- no impact\n+\n+`ManagementAgent.stop`\n+:   Stops the remote management agent.\n+\n+    Impact: Low --- no impact\n+\n+`System.dump_map` \\[*options*\\] (Linux only)\n+:   Dumps an annotated process memory map to an output file.\n+\n+    Impact: Low\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -    `-H`: (Optional) Human readable format (BOOLEAN, false)\n+    -    `-F`: (Optional) File path.  If %p is specified in the filename, it is expanded to the JVM's PID.  (FILE, \"vm_memory_map_%p.txt\")\n+\n+`System.map` \\[*options*\\] (Linux only)\n+:   Prints an annotated process memory map of the VM process.\n+\n+    Impact: Low\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -    `-H`: (Optional) Human readable format (BOOLEAN, false)\n+\n+`System.native_heap_info` (Linux only)\n+:   Attempts to output information regarding native heap usage through malloc_info(3). If unsuccessful outputs \"Error: \" and a reason.\n+\n+    Impact: Low\n+\n+`System.trim_native_heap` (Linux only)\n+:   Attempts to free up memory by trimming the C-heap.\n+\n+    Impact: Low\n+\n+`Thread.dump_to_file` \\[*options*\\] *filepath*\n+:   Dump threads, with stack traces, to a file in plain text or JSON format.\n+\n+    Impact: Medium: Depends on the number of threads.\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `-overwrite`: (Optional) May overwrite existing file (BOOLEAN, false)\n+    -   `-format`: (Optional) Output format (\"plain\" or \"json\") (STRING, plain)\n+\n+    *arguments*:\n+\n+    -   *filepath*:  The file path to the output file.  If %p is specified in the filename, it is expanded to the JVM's PID.  (FILE, no default value)\n+\n+`Thread.print` \\[*options*\\]\n+:   Prints all threads with stacktraces.\n+\n+    Impact: Medium --- depends on the number of threads.\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `-e`: (Optional) Print extended thread information (BOOLEAN, false)\n+    -   `-l`: (Optional) Prints `java.util.concurrent` locks (BOOLEAN, false)\n+\n+`VM.cds` \\[*arguments*\\]\n+:   Dump a static or dynamic shared archive that includes all currently loaded classes.\n+\n+    Impact: Medium --- pause time depends on number of loaded classes\n+\n+    *arguments*:\n+\n+    -   *subcmd*:  must be either `static_dump` or `dynamic_dump` (STRING, no default value)\n+    -   *filename*: (Optional) Name of the shared archive to be dumped.  If %p is specified in the filename, it is expanded to the JVM's PID.  (FILE, \"java_pid%p_\\<subcmd\\>.jsa\")\n+\n+    If `dynamic_dump` is specified, the target JVM must be started with the JVM option\n+    `-XX:+RecordDynamicDumpInfo`.\n+\n+`VM.class_hierarchy` \\[*options*\\] \\[*arguments*\\]\n+:   Print a list of all loaded classes, indented to show the class hierarchy.\n+    The name of each class is followed by the ClassLoaderData\\* of its\n+    ClassLoader, or \"null\" if it is loaded by the bootstrap class loader.\n+\n+    Impact: Medium --- depends on the number of loaded classes.\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `-i`: (Optional) Inherited interfaces should be printed. (BOOLEAN,\n+        false)\n+\n+    -   `-s`: (Optional) If a classname is specified, print its subclasses\n+         in addition to its superclasses. Without this option only the\n+         superclasses will be printed. (BOOLEAN, false)\n+\n+    *arguments*:\n+\n+    -   *classname*: (Optional) The name of the class whose hierarchy should be\n+        printed. If not specified, all class hierarchies are printed. (STRING,\n+        no default value)\n+\n+`VM.classes` \\[*options*\\]\n+:   Print all loaded classes\n+\n+    Impact: Medium: Depends on number of loaded classes.\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `-verbose`: (Optional) Dump the detailed content of a Java class.\n+        Some classes are annotated with flags: `F` = has, or inherits, a non-empty finalize method,\n+        `f` = has final method, `W` = methods rewritten, `C` = marked with `@Contended` annotation,\n+        `R` = has been redefined, `S` = is shared class (BOOLEAN, false)\n+\n+`VM.classloader_stats`\n+:   Print statistics about all ClassLoaders.\n+\n+    Impact: Low\n+\n+`VM.classloaders` \\[*options*\\]\n+:   Prints classloader hierarchy.\n+\n+    Impact: Medium --- Depends on number of class loaders and classes loaded.\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `show-classes`: (Optional) Print loaded classes. (BOOLEAN, false)\n+    -   `verbose`: (Optional) Print detailed information. (BOOLEAN, false)\n+    -   `fold`: (Optional) Show loaders of the same name and class as one. (BOOLEAN, true)\n+\n+`VM.command_line`\n+:   Print the command line used to start this VM instance.\n+\n+    Impact: Low\n+\n+`VM.dynlibs`\n+:   Print loaded dynamic libraries.\n+\n+    Impact: Low\n+\n+`VM.events` \\[*options*\\]\n+:   Print VM event logs\n+\n+    Impact: Low --- Depends on event log size.\n+\n+    *options*:\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    -   `log`: (Optional) Name of log to be printed.\n+        If omitted, all logs are printed. (STRING, no default value)\n+    -   `max`: (Optional) Maximum number of events to be printed (newest first).\n+        If omitted, all events are printed. (STRING, no default value)\n+\n+`VM.flags` \\[*options*\\]\n+:   Print the VM flag options and their current values.\n+\n+    Impact: Low\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `-all`: (Optional) Prints all flags supported by the VM (BOOLEAN,\n+        false).\n+\n+`VM.info`\n+:   Print information about the JVM environment and status.\n+\n+    Impact: Low\n+\n+`VM.log` \\[*options*\\]\n+:   Lists current log configuration, enables\/disables\/configures a log output,\n+    or rotates all logs.\n+\n+    Impact: Low\n+\n+    *options*:\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    -   `output`: (Optional) The name or index (\\#) of output to configure.\n+        (STRING, no default value)\n+\n+    -   `output_options`: (Optional) Options for the output. (STRING, no\n+        default value)\n+\n+    -   `what`: (Optional) Configures what tags to log. (STRING, no default\n+        value )\n+\n+    -   `decorators`: (Optional) Configures which decorators to use. Use 'none'\n+        or an empty value to remove all. (STRING, no default value)\n+\n+    -   `disable`: (Optional) Turns off all logging and clears the log\n+        configuration. (BOOLEAN, no default value)\n+\n+    -   `list`: (Optional) Lists current log configuration. (BOOLEAN, no\n+        default value)\n+\n+    -   `rotate`: (Optional) Rotates all logs. (BOOLEAN, no default value)\n+\n+`VM.metaspace`  \\[*options*\\]\n+:   Prints the statistics for the metaspace\n+\n+    Impact: Medium --- Depends on number of classes loaded.\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `basic`: (Optional) Prints a basic summary (does not need a safepoint). (BOOLEAN, false)\n+    -   `show-loaders`: (Optional) Shows usage by class loader. (BOOLEAN, false)\n+    -   `show-classes`: (Optional) If show-loaders is set, shows loaded classes for each loader. (BOOLEAN, false)\n+    -   `by-chunktype`: (Optional) Break down numbers by chunk type. (BOOLEAN, false)\n+    -   `by-spacetype`: (Optional) Break down numbers by loader type. (BOOLEAN, false)\n+    -   `vslist`: (Optional) Shows details about the underlying virtual space. (BOOLEAN, false)\n+    -   `chunkfreelist`: (Optional) Shows details about global chunk free lists (ChunkManager). (BOOLEAN, false)\n+    -   `scale`: (Optional) Memory usage in which to scale. Valid values are: 1, KB, MB\n+        or GB (fixed scale) or \"dynamic\" for a dynamically chosen scale. (STRING, dynamic)\n+\n+`VM.native_memory` \\[*options*\\]\n+:   Print native memory usage\n+\n+    Impact: Medium\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `summary`: (Optional) Requests runtime to report current memory\n+        summary, which includes total reserved and committed memory, along with\n+        memory usage summary by each subsystem. (BOOLEAN, false)\n+\n+    -   `detail`: (Optional) Requests runtime to report memory allocation &gt;=\n+        1K by each callsite. (BOOLEAN, false)\n+\n+    -   `baseline`: (Optional) Requests runtime to baseline current memory\n+        usage, so it can be compared against in later time. (BOOLEAN, false)\n+\n+    -   `summary.diff`: (Optional) Requests runtime to report memory summary\n+        comparison against previous baseline. (BOOLEAN, false)\n+\n+    -   `detail.diff`: (Optional) Requests runtime to report memory detail\n+        comparison against previous baseline, which shows the memory allocation\n+        activities at different callsites. (BOOLEAN, false)\n+\n+    -   `statistics`: (Optional) Prints tracker statistics for tuning purpose.\n+        (BOOLEAN, false)\n+\n+    -   `scale`: (Optional) Memory usage in which scale, KB, MB or GB (STRING,\n+        KB)\n+\n+`VM.set_flag` \\[*arguments*\\]\n+:   Sets VM flag option using the provided value.\n+\n+    Impact: Low\n+\n+    *arguments*:\n+\n+    -   *flag name*: The name of the flag that you want to set (STRING, no\n+        default value)\n+\n+    -   *string value*: (Optional) The value that you want to set (STRING, no\n+        default value)\n+\n+`VM.stringtable` \\[*options*\\]\n+:   Dump string table.\n+\n+    Impact: Medium --- depends on the Java content.\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `-verbose`: (Optional) Dumps the content of each string in the table\n+        (BOOLEAN, false)\n+\n+`VM.symboltable` \\[*options*\\]\n+:   Dump symbol table.\n+\n+    Impact: Medium --- depends on the Java content.\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax).\n+\n+    *options*:\n+\n+    -   `-verbose`: (Optional) Dumps the content of each symbol in the table\n+        (BOOLEAN, false)\n+\n+`VM.system_properties`\n+:   Print system properties.\n+\n+    Impact: Low\n+\n+`VM.systemdictionary`\n+:   Prints the statistics for dictionary hashtable sizes and bucket length.\n+\n+    Impact: Medium\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `verbose`: (Optional) Dump the content of each dictionary entry for all\n+        class loaders (BOOLEAN, false) .\n+\n+`VM.uptime` \\[*options*\\]\n+:   Print VM uptime.\n+\n+    Impact: Low\n+\n+    **Note:**\n+\n+    The following *options* must be specified using either *key* or\n+    *key*`=`*value* syntax.\n+\n+    *options*:\n+\n+    -   `-date`: (Optional) Adds a prefix with the current date (BOOLEAN,\n+        false)\n+\n+`VM.version`\n+:   Print JVM version information.\n+\n+    Impact: Low\n","filename":"src\/jdk.jcmd\/share\/man\/jcmd.md","additions":1032,"deletions":0,"binary":false,"changes":1032,"status":"added"},{"patch":"@@ -1,103 +0,0 @@\n-.\\\" Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JINFO\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jinfo - generate Java configuration information for a specified Java\n-process\n-.SH SYNOPSIS\n-.PP\n-\\f[B]Note:\\f[R] This command is experimental and unsupported.\n-.PP\n-\\f[V]jinfo\\f[R] [\\f[I]option\\f[R]] \\f[I]pid\\f[R]\n-.TP\n-\\f[I]option\\f[R]\n-This represents the \\f[V]jinfo\\f[R] command-line options.\n-See \\f[B]Options for the jinfo Command\\f[R].\n-.TP\n-\\f[I]pid\\f[R]\n-The process ID for which the configuration information is to be printed.\n-The process must be a Java process.\n-To get a list of Java processes running on a machine, use either the\n-\\f[V]ps\\f[R] command or, if the JVM processes are not running in a\n-separate docker instance, the \\f[B]jps\\f[R] command.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jinfo\\f[R] command prints Java configuration information for a\n-specified Java process.\n-The configuration information includes Java system properties and JVM\n-command-line flags.\n-If the specified process is running on a 64-bit JVM, then you might need\n-to specify the \\f[V]-J-d64\\f[R] option, for example:\n-.RS\n-.PP\n-\\f[V]jinfo -J-d64 -sysprops\\f[R] \\f[I]pid\\f[R]\n-.RE\n-.PP\n-This command is unsupported and might not be available in future\n-releases of the JDK.\n-In Windows Systems where \\f[V]dbgeng.dll\\f[R] is not present, the\n-Debugging Tools for Windows must be installed to have these tools work.\n-The \\f[V]PATH\\f[R] environment variable should contain the location of\n-the \\f[V]jvm.dll\\f[R] that\\[aq]s used by the target process or the\n-location from which the core dump file was produced.\n-.SH OPTIONS FOR THE JINFO COMMAND\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-If none of the following options are used, both the command-line flags\n-and the system property name-value pairs are printed.\n-.TP\n-\\f[V]-flag\\f[R] \\f[I]name\\f[R]\n-Prints the name and value of the specified command-line flag.\n-.TP\n-\\f[V]-flag\\f[R] [\\f[V]+\\f[R]|\\f[V]-\\f[R]]\\f[I]name\\f[R]\n-Enables or disables the specified Boolean command-line flag.\n-.TP\n-\\f[V]-flag\\f[R] \\f[I]name\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R]\n-Sets the specified command-line flag to the specified value.\n-.TP\n-\\f[V]-flags\\f[R]\n-Prints command-line flags passed to the JVM.\n-.TP\n-\\f[V]-sysprops\\f[R]\n-Prints Java system properties as name-value pairs.\n-.TP\n-\\f[V]-h\\f[R] or \\f[V]-help\\f[R]\n-Prints a help message.\n","filename":"src\/jdk.jcmd\/share\/man\/jinfo.1","additions":0,"deletions":103,"binary":false,"changes":103,"status":"deleted"},{"patch":"@@ -0,0 +1,88 @@\n+---\n+# Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JINFO(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jinfo - generate Java configuration information for a specified Java process\n+\n+## Synopsis\n+\n+**Note:** This command is experimental and unsupported.\n+\n+`jinfo` \\[*option*\\] *pid*\n+\n+*option*\n+:   This represents the `jinfo` command-line options. See [Options for the\n+    jinfo Command].\n+\n+*pid*\n+:   The process ID for which the configuration information is to be printed.\n+    The process must be a Java process. To get a list of Java processes running\n+    on a machine, use either the `ps` command or, if the JVM processes are not\n+    running in a separate docker instance, the [jps](jps.html) command.\n+\n+## Description\n+\n+The `jinfo` command prints Java configuration information for a specified Java\n+process. The configuration information includes Java system properties and JVM\n+command-line flags. If the specified process is running on a 64-bit JVM, then\n+you might need to specify the `-J-d64` option, for example:\n+\n+>   `jinfo -J-d64 -sysprops` *pid*\n+\n+This command is unsupported and might not be available in future releases of\n+the JDK. In Windows Systems where `dbgeng.dll` is not present, the Debugging\n+Tools for Windows must be installed to have these tools work. The `PATH`\n+environment variable should contain the location of the `jvm.dll` that's used\n+by the target process or the location from which the core dump file was\n+produced.\n+\n+## Options for the jinfo Command\n+\n+**Note:**\n+\n+If none of the following options are used, both the command-line flags and the\n+system property name-value pairs are printed.\n+\n+`-flag` *name*\n+:   Prints the name and value of the specified command-line flag.\n+\n+`-flag` \\[`+`\\|`-`\\]*name*\n+:   Enables or disables the specified Boolean command-line flag.\n+\n+`-flag` *name*`=`*value*\n+:   Sets the specified command-line flag to the specified value.\n+\n+`-flags`\n+:   Prints command-line flags passed to the JVM.\n+\n+`-sysprops`\n+:   Prints Java system properties as name-value pairs.\n+\n+`-h` or `-help`\n+:   Prints a help message.\n","filename":"src\/jdk.jcmd\/share\/man\/jinfo.md","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -1,106 +0,0 @@\n-.\\\" Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JMAP\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jmap - print details of a specified process\n-.SH SYNOPSIS\n-.PP\n-\\f[B]Note:\\f[R] This command is experimental and unsupported.\n-.PP\n-\\f[V]jmap\\f[R] [\\f[I]options\\f[R]] \\f[I]pid\\f[R]\n-.TP\n-\\f[I]options\\f[R]\n-This represents the \\f[V]jmap\\f[R] command-line options.\n-See \\f[B]Options for the jmap Command\\f[R].\n-.TP\n-\\f[I]pid\\f[R]\n-The process ID for which the information specified by the\n-\\f[I]options\\f[R] is to be printed.\n-The process must be a Java process.\n-To get a list of Java processes running on a machine, use either the\n-\\f[V]ps\\f[R] command or, if the JVM processes are not running in a\n-separate docker instance, the \\f[B]jps\\f[R] command.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jmap\\f[R] command prints details of a specified running\n-process.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-This command is unsupported and might not be available in future\n-releases of the JDK.\n-On Windows Systems where the \\f[V]dbgeng.dll\\f[R] file isn\\[aq]t\n-present, the Debugging Tools for Windows must be installed to make these\n-tools work.\n-The \\f[V]PATH\\f[R] environment variable should contain the location of\n-the \\f[V]jvm.dll\\f[R] file that\\[aq]s used by the target process or the\n-location from which the core dump file was produced.\n-.SH OPTIONS FOR THE JMAP COMMAND\n-.TP\n-\\f[V]-clstats\\f[R] \\f[I]pid\\f[R]\n-Connects to a running process and prints class loader statistics of Java\n-heap.\n-.TP\n-\\f[V]-finalizerinfo\\f[R] \\f[I]pid\\f[R]\n-Connects to a running process and prints information on objects awaiting\n-finalization.\n-.TP\n-\\f[V]-histo\\f[R][\\f[V]:live\\f[R]] \\f[I]pid\\f[R]\n-Connects to a running process and prints a histogram of the Java object\n-heap.\n-If the \\f[V]live\\f[R] suboption is specified, it then counts only live\n-objects.\n-.TP\n-\\f[V]-dump:\\f[R]\\f[I]dump_options\\f[R] \\f[I]pid\\f[R]\n-Connects to a running process and dumps the Java heap.\n-The \\f[I]dump_options\\f[R] include:\n-.RS\n-.IP \\[bu] 2\n-\\f[V]live\\f[R] --- When specified, dumps only the live objects; if not\n-specified, then dumps all objects in the heap.\n-.IP \\[bu] 2\n-\\f[V]format=b\\f[R] --- Dumps the Java heap in \\f[V]hprof\\f[R] binary\n-format\n-.IP \\[bu] 2\n-\\f[V]file=\\f[R]\\f[I]filename\\f[R] --- Dumps the heap to\n-\\f[I]filename\\f[R]\n-.PP\n-Example: \\f[V]jmap -dump:live,format=b,file=heap.bin\\f[R] \\f[I]pid\\f[R]\n-.RE\n","filename":"src\/jdk.jcmd\/share\/man\/jmap.1","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -0,0 +1,89 @@\n+---\n+# Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JMAP(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jmap - print details of a specified process\n+\n+## Synopsis\n+\n+**Note:** This command is experimental and unsupported.\n+\n+`jmap` \\[*options*\\] *pid*\n+\n+*options*\n+:   This represents the `jmap` command-line options. See [Options for the jmap\n+    Command].\n+\n+*pid*\n+:   The process ID for which the information specified by the *options* is to\n+    be printed. The process must be a Java process. To get a list of Java\n+    processes running on a machine, use either the `ps` command or, if the JVM\n+    processes are not running in a separate docker instance, the\n+    [jps](jps.html) command.\n+\n+## Description\n+\n+The `jmap` command prints details of a specified running process.\n+\n+**Note:**\n+\n+This command is unsupported and might not be available in future releases of\n+the JDK. On Windows Systems where the `dbgeng.dll` file isn't present, the\n+Debugging Tools for Windows must be installed to make these tools work. The\n+`PATH` environment variable should contain the location of the `jvm.dll` file\n+that's used by the target process or the location from which the core dump file\n+was produced.\n+\n+## Options for the jmap Command\n+\n+`-clstats` *pid*\n+:   Connects to a running process and prints class loader statistics of Java\n+    heap.\n+\n+`-finalizerinfo` *pid*\n+:   Connects to a running process and prints information on objects awaiting\n+    finalization.\n+\n+`-histo`\\[`:live`\\] *pid*\n+:   Connects to a running process and prints a histogram of the Java object\n+    heap. If the `live` suboption is specified, it then counts only live\n+    objects.\n+\n+`-dump:`*dump\\_options* *pid*\n+:   Connects to a running process and dumps the Java heap. The *dump\\_options*\n+    include:\n+\n+    -   `live` --- When specified, dumps only the live objects; if not\n+        specified, then dumps all objects in the heap.\n+\n+    -   `format=b` --- Dumps the Java heap in `hprof` binary format\n+\n+    -   `file=`*filename* --- Dumps the heap to *filename*\n+\n+    Example: `jmap -dump:live,format=b,file=heap.bin` *pid*\n","filename":"src\/jdk.jcmd\/share\/man\/jmap.md","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -1,235 +0,0 @@\n-.\\\" Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JPS\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jps - list the instrumented JVMs on the target system\n-.SH SYNOPSIS\n-.PP\n-\\f[B]Note:\\f[R] This command is experimental and unsupported.\n-.PP\n-\\f[V]jps\\f[R] [\\f[V]-q\\f[R]] [\\f[V]-mlvV\\f[R]] [\\f[I]hostid\\f[R]]\n-.PP\n-\\f[V]jps\\f[R] [\\f[V]-help\\f[R]]\n-.SH OPTIONS\n-.TP\n-\\f[V]-q\\f[R]\n-Suppresses the output of the class name, JAR file name, and arguments\n-passed to the \\f[V]main\\f[R] method, producing a list of only local JVM\n-identifiers.\n-.TP\n-\\f[V]-mlvV\\f[R]\n-You can specify any combination of these options.\n-.RS\n-.IP \\[bu] 2\n-\\f[V]-m\\f[R] displays the arguments passed to the \\f[V]main\\f[R] method.\n-The output may be \\f[V]null\\f[R] for embedded JVMs.\n-.IP \\[bu] 2\n-\\f[V]-l\\f[R] displays the full package name for the application\\[aq]s\n-\\f[V]main\\f[R] class or the full path name to the application\\[aq]s JAR\n-file.\n-.IP \\[bu] 2\n-\\f[V]-v\\f[R] displays the arguments passed to the JVM.\n-.IP \\[bu] 2\n-\\f[V]-V\\f[R] suppresses the output of the class name, JAR file name, and\n-arguments passed to the \\f[V]main\\f[R] method, producing a list of only\n-local JVM identifiers.\n-.RE\n-.TP\n-\\f[I]hostid\\f[R]\n-The identifier of the host for which the process report should be\n-generated.\n-The \\f[V]hostid\\f[R] can include optional components that indicate the\n-communications protocol, port number, and other implementation specific\n-data.\n-See \\f[B]Host Identifier\\f[R].\n-.TP\n-\\f[V]-help\\f[R]\n-Displays the help message for the \\f[V]jps\\f[R] command.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jps\\f[R] command lists the instrumented Java HotSpot VMs on the\n-target system.\n-The command is limited to reporting information on JVMs for which it has\n-the access permissions.\n-.PP\n-If the \\f[V]jps\\f[R] command is run without specifying a\n-\\f[V]hostid\\f[R], then it searches for instrumented JVMs on the local\n-host.\n-If started with a \\f[V]hostid\\f[R], then it searches for JVMs on the\n-indicated host, using the specified protocol and port.\n-A \\f[V]jstatd\\f[R] process is assumed to be running on the target host.\n-.PP\n-The \\f[V]jps\\f[R] command reports the local JVM identifier, or\n-\\f[V]lvmid\\f[R], for each instrumented JVM found on the target system.\n-The \\f[V]lvmid\\f[R] is typically, but not necessarily, the operating\n-system\\[aq]s process identifier for the JVM process.\n-With no options, the \\f[V]jps\\f[R] command lists each Java\n-application\\[aq]s \\f[V]lvmid\\f[R] followed by the short form of the\n-application\\[aq]s class name or jar file name.\n-The short form of the class name or JAR file name omits the class\\[aq]s\n-package information or the JAR files path information.\n-.PP\n-The \\f[V]jps\\f[R] command uses the Java launcher to find the class name\n-and arguments passed to the main method.\n-If the target JVM is started with a custom launcher, then the class or\n-JAR file name, and the arguments to the \\f[V]main\\f[R] method aren\\[aq]t\n-available.\n-In this case, the \\f[V]jps\\f[R] command outputs the string\n-\\f[V]Unknown\\f[R] for the class name, or JAR file name, and for the\n-arguments to the \\f[V]main\\f[R] method.\n-.PP\n-The list of JVMs produced by the \\f[V]jps\\f[R] command can be limited by\n-the permissions granted to the principal running the command.\n-The command lists only the JVMs for which the principal has access\n-rights as determined by operating system-specific access control\n-mechanisms.\n-.SH HOST IDENTIFIER\n-.PP\n-The host identifier, or \\f[V]hostid\\f[R], is a string that indicates the\n-target system.\n-The syntax of the \\f[V]hostid\\f[R] string corresponds to the syntax of a\n-URI:\n-.RS\n-.PP\n-[\\f[I]protocol\\f[R]\\f[V]:\\f[R]][[\\f[V]\/\/\\f[R]]\\f[I]hostname\\f[R]][\\f[V]:\\f[R]\\f[I]port\\f[R]][\\f[V]\/\\f[R]\\f[I]servername\\f[R]]\n-.RE\n-.TP\n-\\f[I]protocol\\f[R]\n-The communications protocol.\n-If the \\f[I]protocol\\f[R] is omitted and a \\f[I]hostname\\f[R] isn\\[aq]t\n-specified, then the default protocol is a platform-specific, optimized,\n-local protocol.\n-If the protocol is omitted and a host name is specified, then the\n-default protocol is \\f[V]rmi\\f[R].\n-.TP\n-\\f[I]hostname\\f[R]\n-A host name or IP address that indicates the target host.\n-If you omit the \\f[I]hostname\\f[R] parameter, then the target host is\n-the local host.\n-.TP\n-\\f[I]port\\f[R]\n-The default port for communicating with the remote server.\n-If the \\f[I]hostname\\f[R] parameter is omitted or the \\f[I]protocol\\f[R]\n-parameter specifies an optimized, local protocol, then the\n-\\f[I]port\\f[R] parameter is ignored.\n-Otherwise, treatment of the \\f[I]port\\f[R] parameter is\n-implementation-specific.\n-For the default \\f[V]rmi\\f[R] protocol, the \\f[I]port\\f[R] parameter\n-indicates the port number for the \\f[V]rmiregistry\\f[R] on the remote\n-host.\n-If the \\f[I]port\\f[R] parameter is omitted, and the \\f[I]protocol\\f[R]\n-parameter indicates \\f[V]rmi\\f[R], then the default\n-\\f[V]rmiregistry\\f[R] port (\\f[V]1099\\f[R]) is used.\n-.TP\n-\\f[I]servername\\f[R]\n-The treatment of this parameter depends on the implementation.\n-For the optimized, local protocol, this field is ignored.\n-For the \\f[V]rmi\\f[R] protocol, this parameter is a string that\n-represents the name of the RMI remote object on the remote host.\n-See the \\f[B]jstatd\\f[R] command \\f[V]-n\\f[R] option.\n-.SH OUTPUT FORMAT OF THE JPS COMMAND\n-.PP\n-The output of the \\f[V]jps\\f[R] command has the following pattern:\n-.RS\n-.PP\n-\\f[I]lvmid\\f[R] [ [ \\f[I]classname\\f[R] | \\f[I]JARfilename\\f[R] |\n-\\f[V]\\[dq]Unknown\\[dq]\\f[R]] [ \\f[I]arg\\f[R]* ] [ \\f[I]jvmarg\\f[R]* ] ]\n-.RE\n-.PP\n-All output tokens are separated by white space.\n-An \\f[V]arg\\f[R] value that includes embedded white space introduces\n-ambiguity when attempting to map arguments to their actual positional\n-parameters.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-It\\[aq]s recommended that you don\\[aq]t write scripts to parse\n-\\f[V]jps\\f[R] output because the format might change in future releases.\n-If you write scripts that parse \\f[V]jps\\f[R] output, then expect to\n-modify them for future releases of this tool.\n-.SH EXAMPLES\n-.PP\n-This section provides examples of the \\f[V]jps\\f[R] command.\n-.PP\n-List the instrumented JVMs on the local host:\n-.IP\n-.nf\n-\\f[CB]\n-jps\n-18027 Java2Demo.JAR\n-18032 jps\n-18005 jstat\n-\\f[R]\n-.fi\n-.PP\n-The following example lists the instrumented JVMs on a remote host.\n-This example assumes that the \\f[V]jstat\\f[R] server and either the its\n-internal RMI registry or a separate external \\f[V]rmiregistry\\f[R]\n-process are running on the remote host on the default port (port\n-\\f[V]1099\\f[R]).\n-It also assumes that the local host has appropriate permissions to\n-access the remote host.\n-This example includes the \\f[V]-l\\f[R] option to output the long form of\n-the class names or JAR file names.\n-.IP\n-.nf\n-\\f[CB]\n-jps -l remote.domain\n-3002 \/opt\/jdk1.7.0\/demo\/jfc\/Java2D\/Java2Demo.JAR\n-2857 sun.tools.jstatd.jstatd\n-\\f[R]\n-.fi\n-.PP\n-The following example lists the instrumented JVMs on a remote host with\n-a nondefault port for the RMI registry.\n-This example assumes that the \\f[V]jstatd\\f[R] server, with an internal\n-RMI registry bound to port \\f[V]2002\\f[R], is running on the remote\n-host.\n-This example also uses the \\f[V]-m\\f[R] option to include the arguments\n-passed to the \\f[V]main\\f[R] method of each of the listed Java\n-applications.\n-.IP\n-.nf\n-\\f[CB]\n-jps -m remote.domain:2002\n-3002 \/opt\/jdk1.7.0\/demo\/jfc\/Java2D\/Java2Demo.JAR\n-3102 sun.tools.jstatd.jstatd -p 2002\n-\\f[R]\n-.fi\n","filename":"src\/jdk.jcmd\/share\/man\/jps.1","additions":0,"deletions":235,"binary":false,"changes":235,"status":"deleted"},{"patch":"@@ -0,0 +1,189 @@\n+---\n+# Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JPS(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jps - list the instrumented JVMs on the target system\n+\n+## Synopsis\n+\n+**Note:** This command is experimental and unsupported.\n+\n+`jps` \\[`-q`\\] \\[`-mlvV`\\] \\[*hostid*\\]\n+\n+`jps` \\[`-help`\\]\n+\n+## Options\n+\n+`-q`\n+:   Suppresses the output of the class name, JAR file name, and arguments\n+    passed to the `main` method, producing a list of only local JVM\n+    identifiers.\n+\n+`-mlvV`\n+:   You can specify any combination of these options.\n+\n+    -   `-m` displays the arguments passed to the `main` method. The output may\n+        be `null` for embedded JVMs.\n+\n+    -   `-l` displays the full package name for the application's `main` class\n+        or the full path name to the application's JAR file.\n+\n+    -   `-v` displays the arguments passed to the JVM.\n+\n+    -   `-V` suppresses the output of the class name, JAR file name, and\n+        arguments passed to the `main` method, producing a list of only local\n+        JVM identifiers.\n+\n+*hostid*\n+:   The identifier of the host for which the process report should be\n+    generated. The `hostid` can include optional components that indicate the\n+    communications protocol, port number, and other implementation specific\n+    data. See [Host Identifier].\n+\n+`-help`\n+:   Displays the help message for the `jps` command.\n+\n+## Description\n+\n+The `jps` command lists the instrumented Java HotSpot VMs on the target system.\n+The command is limited to reporting information on JVMs for which it has the\n+access permissions.\n+\n+If the `jps` command is run without specifying a `hostid`, then it searches for\n+instrumented JVMs on the local host. If started with a `hostid`, then it\n+searches for JVMs on the indicated host, using the specified protocol and port.\n+A `jstatd` process is assumed to be running on the target host.\n+\n+The `jps` command reports the local JVM identifier, or `lvmid`, for each\n+instrumented JVM found on the target system. The `lvmid` is typically, but not\n+necessarily, the operating system's process identifier for the JVM process.\n+With no options, the `jps` command lists each Java application's `lvmid`\n+followed by the short form of the application's class name or jar file name.\n+The short form of the class name or JAR file name omits the class's package\n+information or the JAR files path information.\n+\n+The `jps` command uses the Java launcher to find the class name and arguments\n+passed to the main method. If the target JVM is started with a custom launcher,\n+then the class or JAR file name, and the arguments to the `main` method aren't\n+available. In this case, the `jps` command outputs the string `Unknown` for the\n+class name, or JAR file name, and for the arguments to the `main` method.\n+\n+The list of JVMs produced by the `jps` command can be limited by the\n+permissions granted to the principal running the command. The command lists\n+only the JVMs for which the principal has access rights as determined by\n+operating system-specific access control mechanisms.\n+\n+## Host Identifier\n+\n+The host identifier, or `hostid`, is a string that indicates the target system.\n+The syntax of the `hostid` string corresponds to the syntax of a URI:\n+\n+>   \\[*protocol*`:`\\]\\[\\[`\/\/`\\]*hostname*\\]\\[`:`*port*\\]\\[`\/`*servername*\\]\n+\n+*protocol*\n+:   The communications protocol. If the *protocol* is omitted and a *hostname*\n+    isn't specified, then the default protocol is a platform-specific,\n+    optimized, local protocol. If the protocol is omitted and a host name is\n+    specified, then the default protocol is `rmi`.\n+\n+*hostname*\n+:   A host name or IP address that indicates the target host. If you omit the\n+    *hostname* parameter, then the target host is the local host.\n+\n+*port*\n+:   The default port for communicating with the remote server. If the\n+    *hostname* parameter is omitted or the *protocol* parameter specifies an\n+    optimized, local protocol, then the *port* parameter is ignored. Otherwise,\n+    treatment of the *port* parameter is implementation-specific. For the\n+    default `rmi` protocol, the *port* parameter indicates the port number for\n+    the `rmiregistry` on the remote host. If the *port* parameter is omitted,\n+    and the *protocol* parameter indicates `rmi`, then the default\n+    `rmiregistry` port (`1099`) is used.\n+\n+*servername*\n+:   The treatment of this parameter depends on the implementation. For the\n+    optimized, local protocol, this field is ignored. For the `rmi` protocol,\n+    this parameter is a string that represents the name of the RMI remote\n+    object on the remote host. See the [jstatd](jstatd.html) command `-n`\n+    option.\n+\n+## Output Format of the jps Command\n+\n+The output of the `jps` command has the following pattern:\n+\n+>   *lvmid* \\[ \\[ *classname* \\| *JARfilename* \\| `\"Unknown\"`\\] \\[ *arg*\\* \\]\n+    \\[ *jvmarg*\\* \\] \\]\n+\n+All output tokens are separated by white space. An `arg` value that includes\n+embedded white space introduces ambiguity when attempting to map arguments to\n+their actual positional parameters.\n+\n+**Note:**\n+\n+It's recommended that you don't write scripts to parse `jps` output because the\n+format might change in future releases. If you write scripts that parse `jps`\n+output, then expect to modify them for future releases of this tool.\n+\n+## Examples\n+\n+This section provides examples of the `jps` command.\n+\n+List the instrumented JVMs on the local host:\n+\n+```\n+jps\n+18027 Java2Demo.JAR\n+18032 jps\n+18005 jstat\n+```\n+\n+The following example lists the instrumented JVMs on a remote host. This\n+example assumes that the `jstat` server and either the its internal RMI\n+registry or a separate external `rmiregistry` process are running on the remote\n+host on the default port (port `1099`). It also assumes that the local host has\n+appropriate permissions to access the remote host. This example includes the\n+`-l` option to output the long form of the class names or JAR file names.\n+\n+```\n+jps -l remote.domain\n+3002 \/opt\/jdk1.7.0\/demo\/jfc\/Java2D\/Java2Demo.JAR\n+2857 sun.tools.jstatd.jstatd\n+```\n+\n+The following example lists the instrumented JVMs on a remote host with a\n+nondefault port for the RMI registry. This example assumes that the `jstatd`\n+server, with an internal RMI registry bound to port `2002`, is running on the\n+remote host. This example also uses the `-m` option to include the arguments\n+passed to the `main` method of each of the listed Java applications.\n+\n+```\n+jps -m remote.domain:2002\n+3002 \/opt\/jdk1.7.0\/demo\/jfc\/Java2D\/Java2Demo.JAR\n+3102 sun.tools.jstatd.jstatd -p 2002\n+```\n","filename":"src\/jdk.jcmd\/share\/man\/jps.md","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"},{"patch":"@@ -1,89 +0,0 @@\n-.\\\" Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JSTACK\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jstack - print Java stack traces of Java threads for a specified Java\n-process\n-.SH SYNOPSIS\n-.PP\n-\\f[B]Note:\\f[R] This command is experimental and unsupported.\n-.PP\n-\\f[V]jstack\\f[R] [\\f[I]options\\f[R]] \\f[I]pid\\f[R]\n-.TP\n-\\f[I]options\\f[R]\n-This represents the \\f[V]jstack\\f[R] command-line options.\n-See \\f[B]Options for the jstack Command\\f[R].\n-.TP\n-\\f[I]pid\\f[R]\n-The process ID for which the stack trace is printed.\n-The process must be a Java process.\n-To get a list of Java processes running on a machine, use either the\n-\\f[V]ps\\f[R] command or, if the JVM processes are not running in a\n-separate docker instance, the \\f[B]jps\\f[R] command.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jstack\\f[R] command prints Java stack traces of Java threads\n-for a specified Java process.\n-For each Java frame, the full class name, method name, byte code index\n-(BCI), and line number, when available, are printed.\n-C++ mangled names aren\\[aq]t demangled.\n-To demangle C++ names, the output of this command can be piped to\n-\\f[V]c++filt\\f[R].\n-When the specified process is running on a 64-bit JVM, you might need to\n-specify the \\f[V]-J-d64\\f[R] option, for example:\n-\\f[V]jstack -J-d64\\f[R] \\f[I]pid\\f[R].\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-This command is unsupported and might not be available in future\n-releases of the JDK.\n-In Windows Systems where the \\f[V]dbgeng.dll\\f[R] file isn\\[aq]t\n-present, the Debugging Tools for Windows must be installed so that these\n-tools work.\n-The \\f[V]PATH\\f[R] environment variable needs to contain the location of\n-the \\f[V]jvm.dll\\f[R] that is used by the target process, or the\n-location from which the core dump file was produced.\n-.SH OPTIONS FOR THE JSTACK COMMAND\n-.TP\n-\\f[V]-l\\f[R]\n-The long listing option prints additional information about locks.\n-.TP\n-\\f[V]-h\\f[R] or \\f[V]-help\\f[R]\n-Prints a help message.\n","filename":"src\/jdk.jcmd\/share\/man\/jstack.1","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -0,0 +1,73 @@\n+---\n+# Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JSTACK(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jstack - print Java stack traces of Java threads for a specified Java process\n+\n+## Synopsis\n+\n+**Note:** This command is experimental and unsupported.\n+\n+`jstack` \\[*options*\\] *pid*\n+\n+*options*\n+:   This represents the `jstack` command-line options. See [Options for the\n+    jstack Command].\n+\n+*pid*\n+:   The process ID for which the stack trace is printed. The process must be a\n+    Java process. To get a list of Java processes running on a machine, use\n+    either the `ps` command or, if the JVM processes are not running in a\n+    separate docker instance, the [jps](jps.html) command.\n+\n+## Description\n+\n+The `jstack` command prints Java stack traces of Java threads for a specified\n+Java process. For each Java frame, the full class name, method name, byte code\n+index (BCI), and line number, when available, are printed. C++ mangled names\n+aren't demangled. To demangle C++ names, the output of this command can be\n+piped to `c++filt`. When the specified process is running on a 64-bit JVM, you\n+might need to specify the `-J-d64` option, for example: `jstack -J-d64` *pid*.\n+\n+**Note:**\n+\n+This command is unsupported and might not be available in future releases of\n+the JDK. In Windows Systems where the `dbgeng.dll` file isn't present, the\n+Debugging Tools for Windows must be installed so that these tools work. The\n+`PATH` environment variable needs to contain the location of the `jvm.dll` that\n+is used by the target process, or the location from which the core dump file\n+was produced.\n+\n+## Options for the jstack Command\n+\n+`-l`\n+:   The long listing option prints additional information about locks.\n+\n+`-h` or `-help`\n+:   Prints a help message.\n","filename":"src\/jdk.jcmd\/share\/man\/jstack.md","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -1,689 +0,0 @@\n-.\\\" Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JSTAT\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jstat - monitor JVM statistics\n-.SH SYNOPSIS\n-.PP\n-\\f[B]Note:\\f[R] This command is experimental and unsupported.\n-.PP\n-\\f[V]jstat\\f[R] \\f[I]generalOptions\\f[R]\n-.PP\n-\\f[V]jstat\\f[R] \\f[I]outputOptions\\f[R] [\\f[V]-t\\f[R]] [\\f[V]-h\\f[R]\n-\\f[I]lines\\f[R]] \\f[I]vmid\\f[R] [\\f[I]interval\\f[R] [\\f[I]count\\f[R]]]\n-.TP\n-\\f[I]generalOptions\\f[R]\n-A single general command-line option.\n-See \\f[B]General Options\\f[R].\n-.TP\n-\\f[I]outputOptions\\f[R]\n-An option reported by the \\f[V]-options\\f[R] option.\n-One or more output options that consist of a single\n-\\f[V]statOption\\f[R], plus any of the \\f[V]-t\\f[R], \\f[V]-h\\f[R], and\n-\\f[V]-J\\f[R] options.\n-See \\f[B]Output Options for the jstat Command\\f[R].\n-.TP\n-\\f[V]-t\\f[R]\n-Displays a time-stamp column as the first column of output.\n-The time stamp is the time since the start time of the target JVM.\n-.TP\n-\\f[V]-h\\f[R] \\f[I]n\\f[R]\n-Displays a column header every \\f[I]n\\f[R] samples (output rows), where\n-\\f[I]n\\f[R] is a positive integer.\n-The default value is \\f[V]0\\f[R], which displays the column header of\n-the first row of data.\n-.TP\n-\\f[I]vmid\\f[R]\n-A virtual machine identifier, which is a string that indicates the\n-target JVM.\n-See \\f[B]Virtual Machine Identifier\\f[R].\n-.TP\n-\\f[I]interval\\f[R]\n-The sampling interval in the specified units, seconds (s) or\n-milliseconds (ms).\n-Default units are milliseconds.\n-This must be a positive integer.\n-When specified, the \\f[V]jstat\\f[R] command produces its output at each\n-interval.\n-.TP\n-\\f[I]count\\f[R]\n-The number of samples to display.\n-The default value is infinity, which causes the \\f[V]jstat\\f[R] command\n-to display statistics until the target JVM terminates or the\n-\\f[V]jstat\\f[R] command is terminated.\n-This value must be a positive integer.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jstat\\f[R] command displays performance statistics for an\n-instrumented Java HotSpot VM.\n-The target JVM is identified by its virtual machine identifier, or\n-\\f[V]vmid\\f[R] option.\n-.PP\n-The \\f[V]jstat\\f[R] command supports two types of options, general\n-options and output options.\n-General options cause the \\f[V]jstat\\f[R] command to display simple\n-usage and version information.\n-Output options determine the content and format of the statistical\n-output.\n-.PP\n-All options and their functionality are subject to change or removal in\n-future releases.\n-.SH GENERAL OPTIONS\n-.PP\n-If you specify one of the general options, then you can\\[aq]t specify\n-any other option or parameter.\n-.TP\n-\\f[V]-help\\f[R]\n-Displays a help message.\n-.TP\n-\\f[V]-options\\f[R]\n-Displays a list of static options.\n-See \\f[B]Output Options for the jstat Command\\f[R].\n-.SH OUTPUT OPTIONS FOR THE JSTAT COMMAND\n-.PP\n-If you don\\[aq]t specify a general option, then you can specify output\n-options.\n-Output options determine the content and format of the \\f[V]jstat\\f[R]\n-command\\[aq]s output, and consist of a single \\f[V]statOption\\f[R], plus\n-any of the other output options (\\f[V]-h\\f[R], \\f[V]-t\\f[R], and\n-\\f[V]-J\\f[R]).\n-The \\f[V]statOption\\f[R] must come first.\n-.PP\n-Output is formatted as a table, with columns that are separated by\n-spaces.\n-A header row with titles describes the columns.\n-Use the \\f[V]-h\\f[R] option to set the frequency at which the header is\n-displayed.\n-Column header names are consistent among the different options.\n-In general, if two options provide a column with the same name, then the\n-data source for the two columns is the same.\n-.PP\n-Use the \\f[V]-t\\f[R] option to display a time-stamp column, labeled\n-Timestamp as the first column of output.\n-The Timestamp column contains the elapsed time, in seconds, since the\n-target JVM started.\n-The resolution of the time stamp is dependent on various factors and is\n-subject to variation due to delayed thread scheduling on heavily loaded\n-systems.\n-.PP\n-Use the interval and count parameters to determine how frequently and\n-how many times, respectively, the \\f[V]jstat\\f[R] command displays its\n-output.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-Don\\[aq]t write scripts to parse the \\f[V]jstat\\f[R] command\\[aq]s\n-output because the format might change in future releases.\n-If you write scripts that parse the \\f[V]jstat\\f[R] command output, then\n-expect to modify them for future releases of this tool.\n-.TP\n-\\f[V]-statOption\\f[R]\n-Determines the statistics information that the \\f[V]jstat\\f[R] command\n-displays.\n-The following lists the available options.\n-Use the \\f[V]-options\\f[R] general option to display the list of options\n-for a particular platform installation.\n-See \\f[B]Stat Options and Output\\f[R].\n-.RS\n-.PP\n-\\f[V]class\\f[R]: Displays statistics about the behavior of the class\n-loader.\n-.PP\n-\\f[V]compiler\\f[R]: Displays statistics about the behavior of the Java\n-HotSpot VM Just-in-Time compiler.\n-.PP\n-\\f[V]gc\\f[R]: Displays statistics about the behavior of the garbage\n-collected heap.\n-.PP\n-\\f[V]gccapacity\\f[R]: Displays statistics about the capacities of the\n-generations and their corresponding spaces.\n-.PP\n-\\f[V]gccause\\f[R]: Displays a summary about garbage collection\n-statistics (same as \\f[V]-gcutil\\f[R]), with the cause of the last and\n-current (when applicable) garbage collection events.\n-.PP\n-\\f[V]gcnew\\f[R]: Displays statistics about the behavior of the new\n-generation.\n-.PP\n-\\f[V]gcnewcapacity\\f[R]: Displays statistics about the sizes of the new\n-generations and their corresponding spaces.\n-.PP\n-\\f[V]gcold\\f[R]: Displays statistics about the behavior of the old\n-generation and metaspace statistics.\n-.PP\n-\\f[V]gcoldcapacity\\f[R]: Displays statistics about the sizes of the old\n-generation.\n-.PP\n-\\f[V]gcmetacapacity\\f[R]: Displays statistics about the sizes of the\n-metaspace.\n-.PP\n-\\f[V]gcutil\\f[R]: Displays a summary about garbage collection\n-statistics.\n-.PP\n-\\f[V]printcompilation\\f[R]: Displays Java HotSpot VM compilation method\n-statistics.\n-.RE\n-.TP\n-\\f[V]-J\\f[R]\\f[I]javaOption\\f[R]\n-Passes \\f[I]javaOption\\f[R] to the Java application launcher.\n-For example, \\f[V]-J-Xms48m\\f[R] sets the startup memory to 48 MB.\n-For a complete list of options, see \\f[B]java\\f[R].\n-.SH STAT OPTIONS AND OUTPUT\n-.PP\n-The following information summarizes the columns that the\n-\\f[V]jstat\\f[R] command outputs for each \\f[I]statOption\\f[R].\n-.TP\n-\\f[V]-class\\f[R] \\f[I]option\\f[R]\n-Class loader statistics.\n-.RS\n-.PP\n-\\f[V]Loaded\\f[R]: Number of classes loaded.\n-.PP\n-\\f[V]Bytes\\f[R]: Number of KB loaded.\n-.PP\n-\\f[V]Unloaded\\f[R]: Number of classes unloaded.\n-.PP\n-\\f[V]Bytes\\f[R]: Number of KB unloaded.\n-.PP\n-\\f[V]Time\\f[R]: Time spent performing class loading and unloading\n-operations.\n-.RE\n-.TP\n-\\f[V]-compiler\\f[R] \\f[I]option\\f[R]\n-Java HotSpot VM Just-in-Time compiler statistics.\n-.RS\n-.PP\n-\\f[V]Compiled\\f[R]: Number of compilation tasks performed.\n-.PP\n-\\f[V]Failed\\f[R]: Number of compilations tasks failed.\n-.PP\n-\\f[V]Invalid\\f[R]: Number of compilation tasks that were invalidated.\n-.PP\n-\\f[V]Time\\f[R]: Time spent performing compilation tasks.\n-.PP\n-\\f[V]FailedType\\f[R]: Compile type of the last failed compilation.\n-.PP\n-\\f[V]FailedMethod\\f[R]: Class name and method of the last failed\n-compilation.\n-.RE\n-.TP\n-\\f[V]-gc\\f[R] \\f[I]option\\f[R]\n-Garbage collected heap statistics.\n-.RS\n-.PP\n-\\f[V]S0C\\f[R]: Current survivor space 0 capacity (KB).\n-.PP\n-\\f[V]S1C\\f[R]: Current survivor space 1 capacity (KB).\n-.PP\n-\\f[V]S0U\\f[R]: Survivor space 0 utilization (KB).\n-.PP\n-\\f[V]S1U\\f[R]: Survivor space 1 utilization (KB).\n-.PP\n-\\f[V]EC\\f[R]: Current eden space capacity (KB).\n-.PP\n-\\f[V]EU\\f[R]: Eden space utilization (KB).\n-.PP\n-\\f[V]OC\\f[R]: Current old space capacity (KB).\n-.PP\n-\\f[V]OU\\f[R]: Old space utilization (KB).\n-.PP\n-\\f[V]MC\\f[R]: Metaspace Committed Size (KB).\n-.PP\n-\\f[V]MU\\f[R]: Metaspace utilization (KB).\n-.PP\n-\\f[V]CCSC\\f[R]: Compressed class committed size (KB).\n-.PP\n-\\f[V]CCSU\\f[R]: Compressed class space used (KB).\n-.PP\n-\\f[V]YGC\\f[R]: Number of young generation garbage collection (GC)\n-events.\n-.PP\n-\\f[V]YGCT\\f[R]: Young generation garbage collection time.\n-.PP\n-\\f[V]FGC\\f[R]: Number of full GC events.\n-.PP\n-\\f[V]FGCT\\f[R]: Full garbage collection time.\n-.PP\n-\\f[V]GCT\\f[R]: Total garbage collection time.\n-.RE\n-.TP\n-\\f[V]-gccapacity\\f[R] \\f[I]option\\f[R]\n-Memory pool generation and space capacities.\n-.RS\n-.PP\n-\\f[V]NGCMN\\f[R]: Minimum new generation capacity (KB).\n-.PP\n-\\f[V]NGCMX\\f[R]: Maximum new generation capacity (KB).\n-.PP\n-\\f[V]NGC\\f[R]: Current new generation capacity (KB).\n-.PP\n-\\f[V]S0C\\f[R]: Current survivor space 0 capacity (KB).\n-.PP\n-\\f[V]S1C\\f[R]: Current survivor space 1 capacity (KB).\n-.PP\n-\\f[V]EC\\f[R]: Current eden space capacity (KB).\n-.PP\n-\\f[V]OGCMN\\f[R]: Minimum old generation capacity (KB).\n-.PP\n-\\f[V]OGCMX\\f[R]: Maximum old generation capacity (KB).\n-.PP\n-\\f[V]OGC\\f[R]: Current old generation capacity (KB).\n-.PP\n-\\f[V]OC\\f[R]: Current old space capacity (KB).\n-.PP\n-\\f[V]MCMN\\f[R]: Minimum metaspace capacity (KB).\n-.PP\n-\\f[V]MCMX\\f[R]: Maximum metaspace capacity (KB).\n-.PP\n-\\f[V]MC\\f[R]: Metaspace Committed Size (KB).\n-.PP\n-\\f[V]CCSMN\\f[R]: Compressed class space minimum capacity (KB).\n-.PP\n-\\f[V]CCSMX\\f[R]: Compressed class space maximum capacity (KB).\n-.PP\n-\\f[V]CCSC\\f[R]: Compressed class committed size (KB).\n-.PP\n-\\f[V]YGC\\f[R]: Number of young generation GC events.\n-.PP\n-\\f[V]FGC\\f[R]: Number of full GC events.\n-.RE\n-.TP\n-\\f[V]-gccause\\f[R] \\f[I]option\\f[R]\n-This option displays the same summary of garbage collection statistics\n-as the \\f[V]-gcutil\\f[R] option, but includes the causes of the last\n-garbage collection event and (when applicable), the current garbage\n-collection event.\n-In addition to the columns listed for \\f[V]-gcutil\\f[R], this option\n-adds the following columns:\n-.RS\n-.PP\n-\\f[V]LGCC\\f[R]: Cause of last garbage collection\n-.PP\n-\\f[V]GCC\\f[R]: Cause of current garbage collection\n-.RE\n-.TP\n-\\f[V]-gcnew\\f[R] \\f[I]option\\f[R]\n-New generation statistics.\n-.RS\n-.PP\n-\\f[V]S0C\\f[R]: Current survivor space 0 capacity (KB).\n-.PP\n-\\f[V]S1C\\f[R]: Current survivor space 1 capacity (KB).\n-.PP\n-\\f[V]S0U\\f[R]: Survivor space 0 utilization (KB).\n-.PP\n-\\f[V]S1U\\f[R]: Survivor space 1 utilization (KB).\n-.PP\n-\\f[V]TT\\f[R]: Tenuring threshold.\n-.PP\n-\\f[V]MTT\\f[R]: Maximum tenuring threshold.\n-.PP\n-\\f[V]DSS\\f[R]: Desired survivor size (KB).\n-.PP\n-\\f[V]EC\\f[R]: Current eden space capacity (KB).\n-.PP\n-\\f[V]EU\\f[R]: Eden space utilization (KB).\n-.PP\n-\\f[V]YGC\\f[R]: Number of young generation GC events.\n-.PP\n-\\f[V]YGCT\\f[R]: Young generation garbage collection time.\n-.RE\n-.TP\n-\\f[V]-gcnewcapacity\\f[R] \\f[I]option\\f[R]\n-New generation space size statistics.\n-.RS\n-.PP\n-\\f[V]NGCMN\\f[R]: Minimum new generation capacity (KB).\n-.PP\n-\\f[V]NGCMX\\f[R]: Maximum new generation capacity (KB).\n-.PP\n-\\f[V]NGC\\f[R]: Current new generation capacity (KB).\n-.PP\n-\\f[V]S0CMX\\f[R]: Maximum survivor space 0 capacity (KB).\n-.PP\n-\\f[V]S0C\\f[R]: Current survivor space 0 capacity (KB).\n-.PP\n-\\f[V]S1CMX\\f[R]: Maximum survivor space 1 capacity (KB).\n-.PP\n-\\f[V]S1C\\f[R]: Current survivor space 1 capacity (KB).\n-.PP\n-\\f[V]ECMX\\f[R]: Maximum eden space capacity (KB).\n-.PP\n-\\f[V]EC\\f[R]: Current eden space capacity (KB).\n-.PP\n-\\f[V]YGC\\f[R]: Number of young generation GC events.\n-.PP\n-\\f[V]FGC\\f[R]: Number of full GC events.\n-.RE\n-.TP\n-\\f[V]-gcold\\f[R] \\f[I]option\\f[R]\n-Old generation size statistics.\n-.RS\n-.PP\n-\\f[V]MC\\f[R]: Metaspace Committed Size (KB).\n-.PP\n-\\f[V]MU\\f[R]: Metaspace utilization (KB).\n-.PP\n-\\f[V]CCSC\\f[R]: Compressed class committed size (KB).\n-.PP\n-\\f[V]CCSU\\f[R]: Compressed class space used (KB).\n-.PP\n-\\f[V]OC\\f[R]: Current old space capacity (KB).\n-.PP\n-\\f[V]OU\\f[R]: Old space utilization (KB).\n-.PP\n-\\f[V]YGC\\f[R]: Number of young generation GC events.\n-.PP\n-\\f[V]FGC\\f[R]: Number of full GC events.\n-.PP\n-\\f[V]FGCT\\f[R]: Full garbage collection time.\n-.PP\n-\\f[V]GCT\\f[R]: Total garbage collection time.\n-.RE\n-.TP\n-\\f[V]-gcoldcapacity\\f[R] \\f[I]option\\f[R]\n-Old generation statistics.\n-.RS\n-.PP\n-\\f[V]OGCMN\\f[R]: Minimum old generation capacity (KB).\n-.PP\n-\\f[V]OGCMX\\f[R]: Maximum old generation capacity (KB).\n-.PP\n-\\f[V]OGC\\f[R]: Current old generation capacity (KB).\n-.PP\n-\\f[V]OC\\f[R]: Current old space capacity (KB).\n-.PP\n-\\f[V]YGC\\f[R]: Number of young generation GC events.\n-.PP\n-\\f[V]FGC\\f[R]: Number of full GC events.\n-.PP\n-\\f[V]FGCT\\f[R]: Full garbage collection time.\n-.PP\n-\\f[V]GCT\\f[R]: Total garbage collection time.\n-.RE\n-.TP\n-\\f[V]-gcmetacapacity\\f[R] \\f[I]option\\f[R]\n-Metaspace size statistics.\n-.RS\n-.PP\n-\\f[V]MCMN\\f[R]: Minimum metaspace capacity (KB).\n-.PP\n-\\f[V]MCMX\\f[R]: Maximum metaspace capacity (KB).\n-.PP\n-\\f[V]MC\\f[R]: Metaspace Committed Size (KB).\n-.PP\n-\\f[V]CCSMN\\f[R]: Compressed class space minimum capacity (KB).\n-.PP\n-\\f[V]CCSMX\\f[R]: Compressed class space maximum capacity (KB).\n-.PP\n-\\f[V]YGC\\f[R]: Number of young generation GC events.\n-.PP\n-\\f[V]FGC\\f[R]: Number of full GC events.\n-.PP\n-\\f[V]FGCT\\f[R]: Full garbage collection time.\n-.PP\n-\\f[V]GCT\\f[R]: Total garbage collection time.\n-.RE\n-.TP\n-\\f[V]-gcutil\\f[R] \\f[I]option\\f[R]\n-Summary of garbage collection statistics.\n-.RS\n-.PP\n-\\f[V]S0\\f[R]: Survivor space 0 utilization as a percentage of the\n-space\\[aq]s current capacity.\n-.PP\n-\\f[V]S1\\f[R]: Survivor space 1 utilization as a percentage of the\n-space\\[aq]s current capacity.\n-.PP\n-\\f[V]E\\f[R]: Eden space utilization as a percentage of the space\\[aq]s\n-current capacity.\n-.PP\n-\\f[V]O\\f[R]: Old space utilization as a percentage of the space\\[aq]s\n-current capacity.\n-.PP\n-\\f[V]M\\f[R]: Metaspace utilization as a percentage of the space\\[aq]s\n-current capacity.\n-.PP\n-\\f[V]CCS\\f[R]: Compressed class space utilization as a percentage.\n-.PP\n-\\f[V]YGC\\f[R]: Number of young generation GC events.\n-.PP\n-\\f[V]YGCT\\f[R]: Young generation garbage collection time.\n-.PP\n-\\f[V]FGC\\f[R]: Number of full GC events.\n-.PP\n-\\f[V]FGCT\\f[R]: Full garbage collection time.\n-.PP\n-\\f[V]GCT\\f[R]: Total garbage collection time.\n-.RE\n-.TP\n-\\f[V]-printcompilation\\f[R] \\f[I]option\\f[R]\n-Java HotSpot VM compiler method statistics.\n-.RS\n-.PP\n-\\f[V]Compiled\\f[R]: Number of compilation tasks performed by the most\n-recently compiled method.\n-.PP\n-\\f[V]Size\\f[R]: Number of bytes of byte code of the most recently\n-compiled method.\n-.PP\n-\\f[V]Type\\f[R]: Compilation type of the most recently compiled method.\n-.PP\n-\\f[V]Method\\f[R]: Class name and method name identifying the most\n-recently compiled method.\n-Class name uses a slash (\/) instead of a dot (.)\n-as a name space separator.\n-The method name is the method within the specified class.\n-The format for these two fields is consistent with the HotSpot\n-\\f[V]-XX:+PrintCompilation\\f[R] option.\n-.RE\n-.SH VIRTUAL MACHINE IDENTIFIER\n-.PP\n-The syntax of the \\f[V]vmid\\f[R] string corresponds to the syntax of a\n-URI:\n-.RS\n-.PP\n-[\\f[I]protocol\\f[R]\\f[V]:\\f[R]][\\f[V]\/\/\\f[R]]\\f[I]lvmid\\f[R][\\f[V]\\[at]\\f[R]\\f[I]hostname\\f[R][\\f[V]:\\f[R]\\f[I]port\\f[R]][\\f[V]\/\\f[R]\\f[I]servername\\f[R]]\n-.RE\n-.PP\n-The syntax of the \\f[V]vmid\\f[R] string corresponds to the syntax of a\n-URI.\n-The \\f[V]vmid\\f[R] string can vary from a simple integer that represents\n-a local JVM to a more complex construction that specifies a\n-communications protocol, port number, and other implementation-specific\n-values.\n-.TP\n-\\f[I]protocol\\f[R]\n-The communications protocol.\n-If the \\f[I]protocol\\f[R] value is omitted and a host name isn\\[aq]t\n-specified, then the default protocol is a platform-specific optimized\n-local protocol.\n-If the \\f[I]protocol\\f[R] value is omitted and a host name is specified,\n-then the default protocol is \\f[V]rmi\\f[R].\n-.TP\n-\\f[I]lvmid\\f[R]\n-The local virtual machine identifier for the target JVM.\n-The \\f[I]lvmid\\f[R] is a platform-specific value that uniquely\n-identifies a JVM on a system.\n-The \\f[I]lvmid\\f[R] is the only required component of a virtual machine\n-identifier.\n-The \\f[I]lvmid\\f[R] is typically, but not necessarily, the operating\n-system\\[aq]s process identifier for the target JVM process.\n-You can use the \\f[V]jps\\f[R] command to determine the \\f[I]lvmid\\f[R]\n-provided the JVM processes is not running in a separate docker instance.\n-You can also determine the \\f[I]lvmid\\f[R] on Linux and macOS platforms\n-with the \\f[V]ps\\f[R] command, and on Windows with the Windows Task\n-Manager.\n-.TP\n-\\f[I]hostname\\f[R]\n-A host name or IP address that indicates the target host.\n-If the \\f[I]hostname\\f[R] value is omitted, then the target host is the\n-local host.\n-.TP\n-\\f[I]port\\f[R]\n-The default port for communicating with the remote server.\n-If the \\f[I]hostname\\f[R] value is omitted or the \\f[I]protocol\\f[R]\n-value specifies an optimized, local protocol, then the \\f[I]port\\f[R]\n-value is ignored.\n-Otherwise, treatment of the \\f[I]port\\f[R] parameter is\n-implementation-specific.\n-For the default \\f[V]rmi\\f[R] protocol, the port value indicates the\n-port number for the \\f[V]rmiregistry\\f[R] on the remote host.\n-If the \\f[I]port\\f[R] value is omitted and the \\f[I]protocol\\f[R] value\n-indicates \\f[V]rmi\\f[R], then the default rmiregistry port (1099) is\n-used.\n-.TP\n-\\f[I]servername\\f[R]\n-The treatment of the \\f[I]servername\\f[R] parameter depends on\n-implementation.\n-For the optimized local protocol, this field is ignored.\n-For the \\f[V]rmi\\f[R] protocol, it represents the name of the RMI remote\n-object on the remote host.\n-.SH EXAMPLES\n-.PP\n-This section presents some examples of monitoring a local JVM with an\n-\\f[I]lvmid\\f[R] of 21891.\n-.SH THE GCUTIL OPTION\n-.PP\n-This example attaches to lvmid 21891 and takes 7 samples at 250\n-millisecond intervals and displays the output as specified by the\n-\\f[V]-gcutil\\f[R] option.\n-.PP\n-The output of this example shows that a young generation collection\n-occurred between the third and fourth sample.\n-The collection took 0.078 seconds and promoted objects from the eden\n-space (E) to the old space (O), resulting in an increase of old space\n-utilization from 66.80% to 68.19%.\n-Before the collection, the survivor space was 97.02% utilized, but after\n-this collection it\\[aq]s 91.03% utilized.\n-.IP\n-.nf\n-\\f[CB]\n-jstat -gcutil 21891 250 7\n-  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n-  0.00  97.02  70.31  66.80  95.52  89.14      7    0.300     0    0.000    0.300\n-  0.00  97.02  86.23  66.80  95.52  89.14      7    0.300     0    0.000    0.300\n-  0.00  97.02  96.53  66.80  95.52  89.14      7    0.300     0    0.000    0.300\n- 91.03   0.00   1.98  68.19  95.89  91.24      8    0.378     0    0.000    0.378\n- 91.03   0.00  15.82  68.19  95.89  91.24      8    0.378     0    0.000    0.378\n- 91.03   0.00  17.80  68.19  95.89  91.24      8    0.378     0    0.000    0.378\n- 91.03   0.00  17.80  68.19  95.89  91.24      8    0.378     0    0.000    0.378\n-\\f[R]\n-.fi\n-.SH REPEAT THE COLUMN HEADER STRING\n-.PP\n-This example attaches to lvmid 21891 and takes samples at 250\n-millisecond intervals and displays the output as specified by\n-\\f[V]-gcnew\\f[R] option.\n-In addition, it uses the \\f[V]-h3\\f[R] option to output the column\n-header after every 3 lines of data.\n-.PP\n-In addition to showing the repeating header string, this example shows\n-that between the second and third samples, a young GC occurred.\n-Its duration was 0.001 seconds.\n-The collection found enough active data that the survivor space 0\n-utilization (S0U) would have exceeded the desired survivor size (DSS).\n-As a result, objects were promoted to the old generation (not visible in\n-this output), and the tenuring threshold (TT) was lowered from 31 to 2.\n-.PP\n-Another collection occurs between the fifth and sixth samples.\n-This collection found very few survivors and returned the tenuring\n-threshold to 31.\n-.IP\n-.nf\n-\\f[CB]\n-jstat -gcnew -h3 21891 250\n- S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT\n-  64.0   64.0    0.0   31.7 31  31   32.0    512.0    178.6    249    0.203\n-  64.0   64.0    0.0   31.7 31  31   32.0    512.0    355.5    249    0.203\n-  64.0   64.0   35.4    0.0  2  31   32.0    512.0     21.9    250    0.204\n- S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT\n-  64.0   64.0   35.4    0.0  2  31   32.0    512.0    245.9    250    0.204\n-  64.0   64.0   35.4    0.0  2  31   32.0    512.0    421.1    250    0.204\n-  64.0   64.0    0.0   19.0 31  31   32.0    512.0     84.4    251    0.204\n- S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT\n-  64.0   64.0    0.0   19.0 31  31   32.0    512.0    306.7    251    0.204\n-\\f[R]\n-.fi\n-.SH INCLUDE A TIME STAMP FOR EACH SAMPLE\n-.PP\n-This example attaches to lvmid 21891 and takes 3 samples at 250\n-millisecond intervals.\n-The \\f[V]-t\\f[R] option is used to generate a time stamp for each sample\n-in the first column.\n-.PP\n-The Timestamp column reports the elapsed time in seconds since the start\n-of the target JVM.\n-In addition, the \\f[V]-gcoldcapacity\\f[R] output shows the old\n-generation capacity (OGC) and the old space capacity (OC) increasing as\n-the heap expands to meet allocation or promotion demands.\n-The old generation capacity (OGC) has grown from 11,696 KB to 13,820 KB\n-after the eighty-first full garbage collection (FGC).\n-The maximum capacity of the generation (and space) is 60,544 KB (OGCMX),\n-so it still has room to expand.\n-.IP\n-.nf\n-\\f[CB]\n-Timestamp      OGCMN    OGCMX     OGC       OC       YGC   FGC    FGCT    GCT\n-          150.1   1408.0  60544.0  11696.0  11696.0   194    80    2.874   3.799\n-          150.4   1408.0  60544.0  13820.0  13820.0   194    81    2.938   3.863\n-          150.7   1408.0  60544.0  13820.0  13820.0   194    81    2.938   3.863\n-\\f[R]\n-.fi\n-.SH MONITOR INSTRUMENTATION FOR A REMOTE JVM\n-.PP\n-This example attaches to lvmid 40496 on the system named\n-\\f[V]remote.domain\\f[R] using the \\f[V]-gcutil\\f[R] option, with samples\n-taken every second indefinitely.\n-.PP\n-The lvmid is combined with the name of the remote host to construct a\n-vmid of \\f[V]40496\\[at]remote.domain\\f[R].\n-This vmid results in the use of the \\f[V]rmi\\f[R] protocol to\n-communicate to the default \\f[V]jstatd\\f[R] server on the remote host.\n-The \\f[V]jstatd\\f[R] server is located using the \\f[V]rmiregistry\\f[R]\n-command on \\f[V]remote.domain\\f[R] that\\[aq]s bound to the default port\n-of the \\f[V]rmiregistry\\f[R] command (port 1099).\n-.IP\n-.nf\n-\\f[CB]\n-jstat -gcutil 40496\\[at]remote.domain 1000\n-\\&... output omitted\n-\\f[R]\n-.fi\n","filename":"src\/jdk.jcmd\/share\/man\/jstat.1","additions":0,"deletions":689,"binary":false,"changes":689,"status":"deleted"},{"patch":"@@ -0,0 +1,588 @@\n+---\n+# Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JSTAT(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jstat - monitor JVM statistics\n+\n+## Synopsis\n+\n+**Note:** This command is experimental and unsupported.\n+\n+`jstat` *generalOptions*\n+\n+`jstat` *outputOptions* \\[`-t`\\] \\[`-h` *lines*\\] *vmid* \\[*interval*\n+\\[*count*\\]\\]\n+\n+*generalOptions*\n+:   A single general command-line option. See [General Options].\n+\n+*outputOptions*\n+:   An option reported by the `-options` option. One or more output options\n+    that consist of a single `statOption`, plus any of the `-t`, `-h`, and `-J`\n+    options. See [Output Options for the jstat Command].\n+\n+`-t`\n+:   Displays a time-stamp column as the first column of output. The time stamp\n+    is the time since the start time of the target JVM.\n+\n+`-h` *n*\n+:   Displays a column header every *n* samples (output rows), where *n* is a\n+    positive integer. The default value is `0`, which displays the column\n+    header of the first row of data.\n+\n+*vmid*\n+:   A virtual machine identifier, which is a string that indicates the target\n+    JVM. See [Virtual Machine Identifier].\n+\n+*interval*\n+:   The sampling interval in the specified units, seconds (s) or milliseconds\n+    (ms). Default units are milliseconds. This must be a positive integer. When\n+    specified, the `jstat` command produces its output at each interval.\n+\n+*count*\n+:   The number of samples to display. The default value is infinity, which\n+    causes the `jstat` command to display statistics until the target JVM\n+    terminates or the `jstat` command is terminated. This value must be a\n+    positive integer.\n+\n+## Description\n+\n+The `jstat` command displays performance statistics for an instrumented Java\n+HotSpot VM. The target JVM is identified by its virtual machine identifier, or\n+`vmid` option.\n+\n+The `jstat` command supports two types of options, general options and output\n+options. General options cause the `jstat` command to display simple usage and\n+version information. Output options determine the content and format of the\n+statistical output.\n+\n+All options and their functionality are subject to change or removal in future\n+releases.\n+\n+## General Options\n+\n+If you specify one of the general options, then you can't specify any other\n+option or parameter.\n+\n+`-help`\n+:   Displays a help message.\n+\n+`-options`\n+:   Displays a list of static options. See [Output Options for the jstat\n+    Command].\n+\n+## Output Options for the jstat Command\n+\n+If you don't specify a general option, then you can specify output options.\n+Output options determine the content and format of the `jstat` command's\n+output, and consist of a single `statOption`, plus any of the other output\n+options (`-h`, `-t`, and `-J`). The `statOption` must come first.\n+\n+Output is formatted as a table, with columns that are separated by spaces. A\n+header row with titles describes the columns. Use the `-h` option to set the\n+frequency at which the header is displayed. Column header names are consistent\n+among the different options. In general, if two options provide a column with\n+the same name, then the data source for the two columns is the same.\n+\n+Use the `-t` option to display a time-stamp column, labeled Timestamp as the\n+first column of output. The Timestamp column contains the elapsed time, in\n+seconds, since the target JVM started. The resolution of the time stamp is\n+dependent on various factors and is subject to variation due to delayed thread\n+scheduling on heavily loaded systems.\n+\n+Use the interval and count parameters to determine how frequently and how many\n+times, respectively, the `jstat` command displays its output.\n+\n+**Note:**\n+\n+Don't write scripts to parse the `jstat` command's output because the format\n+might change in future releases. If you write scripts that parse the `jstat`\n+command output, then expect to modify them for future releases of this tool.\n+\n+`-statOption`\n+:   Determines the statistics information that the `jstat` command displays.\n+    The following lists the available options. Use the `-options` general\n+    option to display the list of options for a particular platform\n+    installation. See [Stat Options and Output].\n+\n+    `class`: Displays statistics about the behavior of the class loader.\n+\n+    `compiler`: Displays statistics about the behavior of the Java HotSpot VM\n+    Just-in-Time compiler.\n+\n+    `gc`: Displays statistics about the behavior of the garbage collected heap.\n+\n+    `gccapacity`: Displays statistics about the capacities of the generations\n+    and their corresponding spaces.\n+\n+    `gccause`: Displays a summary about garbage collection statistics (same as\n+    `-gcutil`), with the cause of the last and current (when applicable)\n+    garbage collection events.\n+\n+    `gcnew`: Displays statistics about the behavior of the new generation.\n+\n+    `gcnewcapacity`: Displays statistics about the sizes of the new generations\n+    and their corresponding spaces.\n+\n+    `gcold`: Displays statistics about the behavior of the old generation and\n+    metaspace statistics.\n+\n+    `gcoldcapacity`: Displays statistics about the sizes of the old generation.\n+\n+    `gcmetacapacity`: Displays statistics about the sizes of the metaspace.\n+\n+    `gcutil`: Displays a summary about garbage collection statistics.\n+\n+    `printcompilation`: Displays Java HotSpot VM compilation method statistics.\n+\n+`-J`*javaOption*\n+:   Passes *javaOption* to the Java application launcher. For example,\n+    `-J-Xms48m` sets the startup memory to 48 MB. For a complete list of\n+    options, see [java](java.html).\n+\n+## Stat Options and Output\n+\n+The following information summarizes the columns that the `jstat` command\n+outputs for each *statOption*.\n+\n+`-class` *option*\n+:   Class loader statistics.\n+\n+    `Loaded`: Number of classes loaded.\n+\n+    `Bytes`: Number of KB loaded.\n+\n+    `Unloaded`: Number of classes unloaded.\n+\n+    `Bytes`: Number of KB unloaded.\n+\n+    `Time`: Time spent performing class loading and unloading operations.\n+\n+`-compiler` *option*\n+:   Java HotSpot VM Just-in-Time compiler statistics.\n+\n+    `Compiled`: Number of compilation tasks performed.\n+\n+    `Failed`: Number of compilations tasks failed.\n+\n+    `Invalid`: Number of compilation tasks that were invalidated.\n+\n+    `Time`: Time spent performing compilation tasks.\n+\n+    `FailedType`: Compile type of the last failed compilation.\n+\n+    `FailedMethod`: Class name and method of the last failed compilation.\n+\n+`-gc` *option*\n+:   Garbage collected heap statistics.\n+\n+    `S0C`: Current survivor space 0 capacity (KB).\n+\n+    `S1C`: Current survivor space 1 capacity (KB).\n+\n+    `S0U`: Survivor space 0 utilization (KB).\n+\n+    `S1U`: Survivor space 1 utilization (KB).\n+\n+    `EC`: Current eden space capacity (KB).\n+\n+    `EU`: Eden space utilization (KB).\n+\n+    `OC`: Current old space capacity (KB).\n+\n+    `OU`: Old space utilization (KB).\n+\n+    `MC`: Metaspace Committed Size (KB).\n+\n+    `MU`: Metaspace utilization (KB).\n+\n+    `CCSC`: Compressed class committed size (KB).\n+\n+    `CCSU`: Compressed class space used (KB).\n+\n+    `YGC`: Number of young generation garbage collection (GC) events.\n+\n+    `YGCT`: Young generation garbage collection time.\n+\n+    `FGC`: Number of full GC events.\n+\n+    `FGCT`: Full garbage collection time.\n+\n+    `GCT`: Total garbage collection time.\n+\n+`-gccapacity` *option*\n+:   Memory pool generation and space capacities.\n+\n+    `NGCMN`: Minimum new generation capacity (KB).\n+\n+    `NGCMX`: Maximum new generation capacity (KB).\n+\n+    `NGC`: Current new generation capacity (KB).\n+\n+    `S0C`: Current survivor space 0 capacity (KB).\n+\n+    `S1C`: Current survivor space 1 capacity (KB).\n+\n+    `EC`: Current eden space capacity (KB).\n+\n+    `OGCMN`: Minimum old generation capacity (KB).\n+\n+    `OGCMX`: Maximum old generation capacity (KB).\n+\n+    `OGC`: Current old generation capacity (KB).\n+\n+    `OC`: Current old space capacity (KB).\n+\n+    `MCMN`: Minimum metaspace capacity (KB).\n+\n+    `MCMX`: Maximum metaspace capacity (KB).\n+\n+    `MC`: Metaspace Committed Size (KB).\n+\n+    `CCSMN`: Compressed class space minimum capacity (KB).\n+\n+    `CCSMX`: Compressed class space maximum capacity (KB).\n+\n+    `CCSC`: Compressed class committed size (KB).\n+\n+    `YGC`: Number of young generation GC events.\n+\n+    `FGC`: Number of full GC events.\n+\n+`-gccause` *option*\n+:   This option displays the same summary of garbage collection statistics as\n+    the `-gcutil` option, but includes the causes of the last garbage\n+    collection event and (when applicable), the current garbage collection\n+    event. In addition to the columns listed for `-gcutil`, this option adds\n+    the following columns:\n+\n+    `LGCC`: Cause of last garbage collection\n+\n+    `GCC`: Cause of current garbage collection\n+\n+`-gcnew` *option*\n+:   New generation statistics.\n+\n+    `S0C`: Current survivor space 0 capacity (KB).\n+\n+    `S1C`: Current survivor space 1 capacity (KB).\n+\n+    `S0U`: Survivor space 0 utilization (KB).\n+\n+    `S1U`: Survivor space 1 utilization (KB).\n+\n+    `TT`: Tenuring threshold.\n+\n+    `MTT`: Maximum tenuring threshold.\n+\n+    `DSS`: Desired survivor size (KB).\n+\n+    `EC`: Current eden space capacity (KB).\n+\n+    `EU`: Eden space utilization (KB).\n+\n+    `YGC`: Number of young generation GC events.\n+\n+    `YGCT`: Young generation garbage collection time.\n+\n+`-gcnewcapacity` *option*\n+:   New generation space size statistics.\n+\n+    `NGCMN`: Minimum new generation capacity (KB).\n+\n+    `NGCMX`: Maximum new generation capacity (KB).\n+\n+    `NGC`: Current new generation capacity (KB).\n+\n+    `S0CMX`: Maximum survivor space 0 capacity (KB).\n+\n+    `S0C`: Current survivor space 0 capacity (KB).\n+\n+    `S1CMX`: Maximum survivor space 1 capacity (KB).\n+\n+    `S1C`: Current survivor space 1 capacity (KB).\n+\n+    `ECMX`: Maximum eden space capacity (KB).\n+\n+    `EC`: Current eden space capacity (KB).\n+\n+    `YGC`: Number of young generation GC events.\n+\n+    `FGC`: Number of full GC events.\n+\n+`-gcold` *option*\n+:   Old generation size statistics.\n+\n+    `MC`: Metaspace Committed Size (KB).\n+\n+    `MU`: Metaspace utilization (KB).\n+\n+    `CCSC`: Compressed class committed size (KB).\n+\n+    `CCSU`: Compressed class space used (KB).\n+\n+    `OC`: Current old space capacity (KB).\n+\n+    `OU`: Old space utilization (KB).\n+\n+    `YGC`: Number of young generation GC events.\n+\n+    `FGC`: Number of full GC events.\n+\n+    `FGCT`: Full garbage collection time.\n+\n+    `GCT`: Total garbage collection time.\n+\n+`-gcoldcapacity` *option*\n+:   Old generation statistics.\n+\n+    `OGCMN`: Minimum old generation capacity (KB).\n+\n+    `OGCMX`: Maximum old generation capacity (KB).\n+\n+    `OGC`: Current old generation capacity (KB).\n+\n+    `OC`: Current old space capacity (KB).\n+\n+    `YGC`: Number of young generation GC events.\n+\n+    `FGC`: Number of full GC events.\n+\n+    `FGCT`: Full garbage collection time.\n+\n+    `GCT`: Total garbage collection time.\n+\n+`-gcmetacapacity` *option*\n+:   Metaspace size statistics.\n+\n+    `MCMN`: Minimum metaspace capacity (KB).\n+\n+    `MCMX`: Maximum metaspace capacity (KB).\n+\n+    `MC`: Metaspace Committed Size (KB).\n+\n+    `CCSMN`: Compressed class space minimum capacity (KB).\n+\n+    `CCSMX`: Compressed class space maximum capacity (KB).\n+\n+    `YGC`: Number of young generation GC events.\n+\n+    `FGC`: Number of full GC events.\n+\n+    `FGCT`: Full garbage collection time.\n+\n+    `GCT`: Total garbage collection time.\n+\n+`-gcutil` *option*\n+:   Summary of garbage collection statistics.\n+\n+    `S0`: Survivor space 0 utilization as a percentage of the space's current\n+    capacity.\n+\n+    `S1`: Survivor space 1 utilization as a percentage of the space's current\n+    capacity.\n+\n+    `E`: Eden space utilization as a percentage of the space's current\n+    capacity.\n+\n+    `O`: Old space utilization as a percentage of the space's current capacity.\n+\n+    `M`: Metaspace utilization as a percentage of the space's current capacity.\n+\n+    `CCS`: Compressed class space utilization as a percentage.\n+\n+    `YGC`: Number of young generation GC events.\n+\n+    `YGCT`: Young generation garbage collection time.\n+\n+    `FGC`: Number of full GC events.\n+\n+    `FGCT`: Full garbage collection time.\n+\n+    `GCT`: Total garbage collection time.\n+\n+`-printcompilation` *option*\n+:   Java HotSpot VM compiler method statistics.\n+\n+    `Compiled`: Number of compilation tasks performed by the most recently\n+    compiled method.\n+\n+    `Size`: Number of bytes of byte code of the most recently compiled method.\n+\n+    `Type`: Compilation type of the most recently compiled method.\n+\n+    `Method`: Class name and method name identifying the most recently compiled\n+    method. Class name uses a slash (\/) instead of a dot (.) as a name space\n+    separator. The method name is the method within the specified class. The\n+    format for these two fields is consistent with the HotSpot\n+    `-XX:+PrintCompilation` option.\n+\n+## Virtual Machine Identifier\n+\n+The syntax of the `vmid` string corresponds to the syntax of a URI:\n+\n+>   \\[*protocol*`:`\\]\\[`\/\/`\\]*lvmid*\\[`@`*hostname*\\[`:`*port*\\]\\[`\/`*servername*\\]\n+\n+The syntax of the `vmid` string corresponds to the syntax of a URI. The `vmid`\n+string can vary from a simple integer that represents a local JVM to a more\n+complex construction that specifies a communications protocol, port number, and\n+other implementation-specific values.\n+\n+*protocol*\n+:   The communications protocol. If the *protocol* value is omitted and a host\n+    name isn't specified, then the default protocol is a platform-specific\n+    optimized local protocol. If the *protocol* value is omitted and a host\n+    name is specified, then the default protocol is `rmi`.\n+\n+*lvmid*\n+:   The local virtual machine identifier for the target JVM. The *lvmid* is a\n+    platform-specific value that uniquely identifies a JVM on a system. The\n+    *lvmid* is the only required component of a virtual machine identifier. The\n+    *lvmid* is typically, but not necessarily, the operating system's process\n+    identifier for the target JVM process. You can use the `jps` command to\n+    determine the *lvmid* provided the JVM processes is not running in a\n+    separate docker instance. You can also determine the *lvmid* on Linux and\n+    macOS platforms with the `ps` command, and on Windows with the Windows Task\n+    Manager.\n+\n+*hostname*\n+:   A host name or IP address that indicates the target host. If the *hostname*\n+    value is omitted, then the target host is the local host.\n+\n+*port*\n+:   The default port for communicating with the remote server. If the\n+    *hostname* value is omitted or the *protocol* value specifies an optimized,\n+    local protocol, then the *port* value is ignored. Otherwise, treatment of\n+    the *port* parameter is implementation-specific. For the default `rmi`\n+    protocol, the port value indicates the port number for the `rmiregistry` on\n+    the remote host. If the *port* value is omitted and the *protocol* value\n+    indicates `rmi`, then the default rmiregistry port (1099) is used.\n+\n+*servername*\n+:   The treatment of the *servername* parameter depends on implementation. For\n+    the optimized local protocol, this field is ignored. For the `rmi`\n+    protocol, it represents the name of the RMI remote object on the remote\n+    host.\n+\n+## Examples\n+\n+This section presents some examples of monitoring a local JVM with an *lvmid*\n+of 21891.\n+\n+## The gcutil Option\n+\n+This example attaches to lvmid 21891 and takes 7 samples at 250 millisecond\n+intervals and displays the output as specified by the `-gcutil` option.\n+\n+The output of this example shows that a young generation collection occurred\n+between the third and fourth sample. The collection took 0.078 seconds and\n+promoted objects from the eden space (E) to the old space (O), resulting in an\n+increase of old space utilization from 66.80% to 68.19%. Before the collection,\n+the survivor space was 97.02% utilized, but after this collection it's 91.03%\n+utilized.\n+\n+```\n+jstat -gcutil 21891 250 7\n+  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n+  0.00  97.02  70.31  66.80  95.52  89.14      7    0.300     0    0.000    0.300\n+  0.00  97.02  86.23  66.80  95.52  89.14      7    0.300     0    0.000    0.300\n+  0.00  97.02  96.53  66.80  95.52  89.14      7    0.300     0    0.000    0.300\n+ 91.03   0.00   1.98  68.19  95.89  91.24      8    0.378     0    0.000    0.378\n+ 91.03   0.00  15.82  68.19  95.89  91.24      8    0.378     0    0.000    0.378\n+ 91.03   0.00  17.80  68.19  95.89  91.24      8    0.378     0    0.000    0.378\n+ 91.03   0.00  17.80  68.19  95.89  91.24      8    0.378     0    0.000    0.378\n+```\n+\n+## Repeat the Column Header String\n+\n+This example attaches to lvmid 21891 and takes samples at 250 millisecond\n+intervals and displays the output as specified by `-gcnew` option. In addition,\n+it uses the `-h3` option to output the column header after every 3 lines of\n+data.\n+\n+In addition to showing the repeating header string, this example shows that\n+between the second and third samples, a young GC occurred. Its duration was\n+0.001 seconds. The collection found enough active data that the survivor space\n+0 utilization (S0U) would have exceeded the desired survivor size (DSS). As a\n+result, objects were promoted to the old generation (not visible in this\n+output), and the tenuring threshold (TT) was lowered from 31 to 2.\n+\n+Another collection occurs between the fifth and sixth samples. This collection\n+found very few survivors and returned the tenuring threshold to 31.\n+\n+```\n+jstat -gcnew -h3 21891 250\n+ S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT\n+  64.0   64.0    0.0   31.7 31  31   32.0    512.0    178.6    249    0.203\n+  64.0   64.0    0.0   31.7 31  31   32.0    512.0    355.5    249    0.203\n+  64.0   64.0   35.4    0.0  2  31   32.0    512.0     21.9    250    0.204\n+ S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT\n+  64.0   64.0   35.4    0.0  2  31   32.0    512.0    245.9    250    0.204\n+  64.0   64.0   35.4    0.0  2  31   32.0    512.0    421.1    250    0.204\n+  64.0   64.0    0.0   19.0 31  31   32.0    512.0     84.4    251    0.204\n+ S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT\n+  64.0   64.0    0.0   19.0 31  31   32.0    512.0    306.7    251    0.204\n+```\n+\n+## Include a Time Stamp for Each Sample\n+\n+This example attaches to lvmid 21891 and takes 3 samples at 250 millisecond\n+intervals. The `-t` option is used to generate a time stamp for each sample in\n+the first column.\n+\n+The Timestamp column reports the elapsed time in seconds since the start of the\n+target JVM. In addition, the `-gcoldcapacity` output shows the old generation\n+capacity (OGC) and the old space capacity (OC) increasing as the heap expands\n+to meet allocation or promotion demands. The old generation capacity (OGC) has\n+grown from 11,696 KB to 13,820 KB after the eighty-first full garbage\n+collection (FGC). The maximum capacity of the generation (and space) is 60,544\n+KB (OGCMX), so it still has room to expand.\n+\n+```\n+Timestamp      OGCMN    OGCMX     OGC       OC       YGC   FGC    FGCT    GCT\n+          150.1   1408.0  60544.0  11696.0  11696.0   194    80    2.874   3.799\n+          150.4   1408.0  60544.0  13820.0  13820.0   194    81    2.938   3.863\n+          150.7   1408.0  60544.0  13820.0  13820.0   194    81    2.938   3.863\n+```\n+\n+## Monitor Instrumentation for a Remote JVM\n+\n+This example attaches to lvmid 40496 on the system named `remote.domain` using\n+the `-gcutil` option, with samples taken every second indefinitely.\n+\n+The lvmid is combined with the name of the remote host to construct a vmid of\n+`40496@remote.domain`. This vmid results in the use of the `rmi` protocol to\n+communicate to the default `jstatd` server on the remote host. The `jstatd`\n+server is located using the `rmiregistry` command on `remote.domain` that's\n+bound to the default port of the `rmiregistry` command (port 1099).\n+\n+```\n+jstat -gcutil 40496@remote.domain 1000\n+... output omitted\n+```\n","filename":"src\/jdk.jcmd\/share\/man\/jstat.md","additions":588,"deletions":0,"binary":false,"changes":588,"status":"added"},{"patch":"@@ -1,104 +0,0 @@\n-.\\\" Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JCONSOLE\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jconsole - start a graphical console to monitor and manage Java\n-applications\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jconsole\\f[R] [\\f[V]-interval=\\f[R]\\f[I]n\\f[R]] [\\f[V]-notile\\f[R]]\n-[\\f[V]-plugin\\f[R] \\f[I]path\\f[R]] [\\f[V]-version\\f[R]]\n-[\\f[I]connection\\f[R] ...\n-] [\\f[V]-J\\f[R]\\f[I]input_arguments\\f[R]]\n-.PP\n-\\f[V]jconsole\\f[R] \\f[V]-help\\f[R]\n-.SH OPTIONS\n-.TP\n-\\f[V]-interval\\f[R]\n-Sets the update interval to \\f[V]n\\f[R] seconds (default is 4 seconds).\n-.TP\n-\\f[V]-notile\\f[R]\n-Doesn\\[aq]t tile the windows for two or more connections.\n-.TP\n-\\f[V]-pluginpath\\f[R] \\f[I]path\\f[R]\n-Specifies the path that \\f[V]jconsole\\f[R] uses to look up plug-ins.\n-The plug-in \\f[I]path\\f[R] should contain a provider-configuration file\n-named \\f[V]META-INF\/services\/com.sun.tools.jconsole.JConsolePlugin\\f[R]\n-that contains one line for each plug-in.\n-The line specifies the fully qualified class name of the class\n-implementing the \\f[V]com.sun.tools.jconsole.JConsolePlugin\\f[R] class.\n-.TP\n-\\f[V]-version\\f[R]\n-Prints the program version.\n-.TP\n-\\f[I]connection\\f[R] = \\f[I]pid\\f[R] | \\f[I]host\\f[R]\\f[V]:\\f[R]\\f[I]port\\f[R] | \\f[I]jmxURL\\f[R]\n-A connection is described by either \\f[I]pid\\f[R],\n-\\f[I]host\\f[R]\\f[V]:\\f[R]\\f[I]port\\f[R] or \\f[I]jmxURL\\f[R].\n-.RS\n-.IP \\[bu] 2\n-The \\f[I]pid\\f[R] value is the process ID of a target process.\n-The JVM must be running with the same user ID as the user ID running the\n-\\f[V]jconsole\\f[R] command.\n-.IP \\[bu] 2\n-The \\f[I]host\\f[R]\\f[V]:\\f[R]\\f[I]port\\f[R] values are the name of the\n-host system on which the JVM is running, and the port number specified\n-by the system property \\f[V]com.sun.management.jmxremote.port\\f[R] when\n-the JVM was started.\n-.IP \\[bu] 2\n-The \\f[I]jmxUrl\\f[R] value is the address of the JMX agent to be\n-connected to as described in JMXServiceURL.\n-.RE\n-.TP\n-\\f[V]-J\\f[R]\\f[I]input_arguments\\f[R]\n-Passes \\f[I]input_arguments\\f[R] to the JVM on which the\n-\\f[V]jconsole\\f[R] command is run.\n-.TP\n-\\f[V]-help\\f[R] or \\f[V]--help\\f[R]\n-Displays the help message for the command.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jconsole\\f[R] command starts a graphical console tool that lets\n-you monitor and manage Java applications and virtual machines on a local\n-or remote machine.\n-.PP\n-On Windows, the \\f[V]jconsole\\f[R] command doesn\\[aq]t associate with a\n-console window.\n-It does, however, display a dialog box with error information when the\n-\\f[V]jconsole\\f[R] command fails.\n","filename":"src\/jdk.jconsole\/share\/man\/jconsole.1","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"},{"patch":"@@ -0,0 +1,86 @@\n+---\n+# Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JCONSOLE(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jconsole - start a graphical console to monitor and manage Java applications\n+\n+## Synopsis\n+\n+`jconsole` \\[`-interval=`*n*\\] \\[`-notile`\\] \\[`-plugin` *path*\\]\n+\\[`-version`\\] \\[*connection* ... \\] \\[`-J`*input\\_arguments*\\]\n+\n+`jconsole` `-help`\n+\n+## Options\n+\n+`-interval`\n+:   Sets the update interval to `n` seconds (default is 4 seconds).\n+\n+`-notile`\n+:   Doesn't tile the windows for two or more connections.\n+\n+`-pluginpath` *path*\n+:   Specifies the path that `jconsole` uses to look up plug-ins. The plug-in\n+    *path* should contain a provider-configuration file named\n+    `META-INF\/services\/com.sun.tools.jconsole.JConsolePlugin` that contains one\n+    line for each plug-in. The line specifies the fully qualified class name of\n+    the class implementing the `com.sun.tools.jconsole.JConsolePlugin` class.\n+\n+`-version`\n+:   Prints the program version.\n+\n+*connection* = *pid* \\| *host*`:`*port* \\| *jmxURL*\n+:   A connection is described by either *pid*, *host*`:`*port* or *jmxURL*.\n+\n+    -   The *pid* value is the process ID of a target process. The JVM must be\n+        running with the same user ID as the user ID running the `jconsole`\n+        command.\n+\n+    -   The *host*`:`*port* values are the name of the host system on which the\n+        JVM is running, and the port number specified by the system property\n+        `com.sun.management.jmxremote.port` when the JVM was started.\n+\n+    -   The *jmxUrl* value is the address of the JMX agent to be connected to\n+        as described in JMXServiceURL.\n+\n+`-J`*input\\_arguments*\n+:   Passes *input\\_arguments* to the JVM on which the `jconsole` command is\n+    run.\n+\n+`-help` or `--help`\n+:   Displays the help message for the command.\n+\n+## Description\n+\n+The `jconsole` command starts a graphical console tool that lets you monitor\n+and manage Java applications and virtual machines on a local or remote machine.\n+\n+On Windows, the `jconsole` command doesn't associate with a console window. It\n+does, however, display a dialog box with error information when the `jconsole`\n+command fails.\n","filename":"src\/jdk.jconsole\/share\/man\/jconsole.md","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -1,259 +0,0 @@\n-.\\\" Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JAVAP\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-javap - disassemble one or more class files\n-.SH SYNOPSIS\n-.PP\n-\\f[V]javap\\f[R] [\\f[I]options\\f[R]] \\f[I]classes\\f[R]...\n-.TP\n-\\f[I]options\\f[R]\n-Specifies the command-line options.\n-See \\f[B]Options for javap\\f[R].\n-.TP\n-\\f[I]classes\\f[R]\n-Specifies one or more classes separated by spaces to be processed for\n-annotations.\n-You can specify a class that can be found in the class path by its file\n-name, URL, or by its fully qualified class name.\n-.RS\n-.PP\n-Examples:\n-.RS\n-.PP\n-\\f[V]path\/to\/MyClass.class\\f[R]\n-.RE\n-.RS\n-.PP\n-\\f[V]jar:file:\/\/\/path\/to\/MyJar.jar!\/mypkg\/MyClass.class\\f[R]\n-.RE\n-.RS\n-.PP\n-\\f[V]java.lang.Object\\f[R]\n-.RE\n-.RE\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]javap\\f[R] command disassembles one or more class files.\n-The output depends on the options used.\n-When no options are used, the \\f[V]javap\\f[R] command prints the\n-protected and public fields, and methods of the classes passed to it.\n-.PP\n-The \\f[V]javap\\f[R] command isn\\[aq]t multirelease JAR aware.\n-Using the class path form of the command results in viewing the base\n-entry in all JAR files, multirelease or not.\n-Using the URL form, you can use the URL form of an argument to specify a\n-specific version of a class to be disassembled.\n-.PP\n-The \\f[V]javap\\f[R] command prints its output to \\f[V]stdout\\f[R].\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-In tools that support \\f[V]--\\f[R] style options, the GNU-style options\n-can use the equal sign (\\f[V]=\\f[R]) instead of a white space to\n-separate the name of an option from its value.\n-.SH OPTIONS FOR JAVAP\n-.TP\n-\\f[V]--help\\f[R], \\f[V]-help\\f[R] , \\f[V]-h\\f[R], or \\f[V]-?\\f[R]\n-Prints a help message for the \\f[V]javap\\f[R] command.\n-.TP\n-\\f[V]-version\\f[R]\n-Prints release information.\n-.TP\n-\\f[V]-verbose\\f[R] or \\f[V]-v\\f[R]\n-Prints additional information about the selected class.\n-.TP\n-\\f[V]-l\\f[R]\n-Prints line and local variable tables.\n-.TP\n-\\f[V]-public\\f[R]\n-Shows only public classes and members.\n-.TP\n-\\f[V]-protected\\f[R]\n-Shows only protected and public classes and members.\n-.TP\n-\\f[V]-package\\f[R]\n-Shows package\/protected\/public classes and members (default).\n-.TP\n-\\f[V]-private\\f[R] or \\f[V]-p\\f[R]\n-Shows all classes and members.\n-.TP\n-\\f[V]-c\\f[R]\n-Prints disassembled code, for example, the instructions that comprise\n-the Java bytecodes, for each of the methods in the class.\n-.TP\n-\\f[V]-s\\f[R]\n-Prints internal type signatures.\n-.TP\n-\\f[V]-sysinfo\\f[R]\n-Shows system information (path, size, date, SHA-256 hash) of the class\n-being processed.\n-.TP\n-\\f[V]-verify\\f[R]\n-Prints additional class verification info.\n-.TP\n-\\f[V]-constants\\f[R]\n-Shows \\f[V]static final\\f[R] constants.\n-.TP\n-\\f[V]--module\\f[R] \\f[I]module\\f[R] or \\f[V]-m\\f[R] \\f[I]module\\f[R]\n-Specifies the module containing classes to be disassembled.\n-.TP\n-\\f[V]--module-path\\f[R] \\f[I]path\\f[R]\n-Specifies where to find application modules.\n-.TP\n-\\f[V]--system\\f[R] \\f[I]jdk\\f[R]\n-Specifies where to find system modules.\n-.TP\n-\\f[V]--class-path\\f[R] \\f[I]path\\f[R], \\f[V]-classpath\\f[R] \\f[I]path\\f[R], or \\f[V]-cp\\f[R] \\f[I]path\\f[R]\n-Specifies the path that the \\f[V]javap\\f[R] command uses to find user\n-class files.\n-It overrides the default or the \\f[V]CLASSPATH\\f[R] environment variable\n-when it\\[aq]s set.\n-.TP\n-\\f[V]-bootclasspath\\f[R] \\f[I]path\\f[R]\n-Overrides the location of bootstrap class files.\n-.TP\n-\\f[V]--multi-release\\f[R] \\f[I]version\\f[R]\n-Specifies the version to select in multi-release JAR files.\n-.TP\n-\\f[V]-J\\f[R]\\f[I]option\\f[R]\n-Passes the specified option to the JVM.\n-For example:\n-.RS\n-.IP\n-.nf\n-\\f[CB]\n-javap -J-version\n-\n-javap -J-Djava.security.manager -J-Djava.security.policy=MyPolicy MyClassName\n-\\f[R]\n-.fi\n-.PP\n-See \\f[I]Overview of Java Options\\f[R] in \\f[B]java\\f[R].\n-.RE\n-.SH JAVAP EXAMPLE\n-.PP\n-Compile the following \\f[V]HelloWorldFrame\\f[R] class:\n-.IP\n-.nf\n-\\f[CB]\n-import java.awt.Graphics;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JPanel;\n-\n-public class HelloWorldFrame extends JFrame {\n-\n-   String message = \\[dq]Hello World!\\[dq];\n-\n-   public HelloWorldFrame(){\n-        setContentPane(new JPanel(){\n-            \\[at]Override\n-            protected void paintComponent(Graphics g) {\n-                g.drawString(message, 15, 30);\n-            }\n-        });\n-        setSize(100, 100);\n-    }\n-    public static void main(String[] args) {\n-        HelloWorldFrame frame = new HelloWorldFrame();\n-        frame.setVisible(true);\n-\n-    }\n-\n-}\n-\\f[R]\n-.fi\n-.PP\n-The output from the \\f[V]javap HelloWorldFrame.class\\f[R] command yields\n-the following:\n-.IP\n-.nf\n-\\f[CB]\n-Compiled from \\[dq]HelloWorldFrame.java\\[dq]\n-public class HelloWorldFrame extends javax.swing.JFrame {\n-  java.lang.String message;\n-  public HelloWorldFrame();\n-  public static void main(java.lang.String[]);\n-}\n-\\f[R]\n-.fi\n-.PP\n-The output from the \\f[V]javap -c HelloWorldFrame.class\\f[R] command\n-yields the following:\n-.IP\n-.nf\n-\\f[CB]\n-Compiled from \\[dq]HelloWorldFrame.java\\[dq]\n-public class HelloWorldFrame extends javax.swing.JFrame {\n-  java.lang.String message;\n-\n-  public HelloWorldFrame();\n-    Code:\n-       0: aload_0\n-       1: invokespecial #1        \/\/ Method javax\/swing\/JFrame.\\[dq]<init>\\[dq]:()V\n-       4: aload_0\n-       5: ldc           #2        \/\/ String Hello World!\n-       7: putfield      #3        \/\/ Field message:Ljava\/lang\/String;\n-      10: aload_0\n-      11: new           #4        \/\/ class HelloWorldFrame$1\n-      14: dup\n-      15: aload_0\n-      16: invokespecial #5        \/\/ Method HelloWorldFrame$1.\\[dq]<init>\\[dq]:(LHelloWorldFrame;)V\n-      19: invokevirtual #6        \/\/ Method setContentPane:(Ljava\/awt\/Container;)V\n-      22: aload_0\n-      23: bipush        100\n-      25: bipush        100\n-      27: invokevirtual #7        \/\/ Method setSize:(II)V\n-      30: return\n-\n-  public static void main(java.lang.String[]);\n-    Code:\n-       0: new           #8        \/\/ class HelloWorldFrame\n-       3: dup\n-       4: invokespecial #9        \/\/ Method \\[dq]<init>\\[dq]:()V\n-       7: astore_1\n-       8: aload_1\n-       9: iconst_1\n-      10: invokevirtual #10       \/\/ Method setVisible:(Z)V\n-      13: return\n-}\n-\\f[R]\n-.fi\n","filename":"src\/jdk.jdeps\/share\/man\/javap.1","additions":0,"deletions":259,"binary":false,"changes":259,"status":"deleted"},{"patch":"@@ -0,0 +1,227 @@\n+---\n+# Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JAVAP(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+javap - disassemble one or more class files\n+\n+## Synopsis\n+\n+`javap` \\[*options*\\] *classes*...\n+\n+*options*\n+:   Specifies the command-line options. See [Options for javap].\n+\n+*classes*\n+:   Specifies one or more classes separated by spaces to be processed for\n+    annotations. You can specify a class that can be found in the class path by\n+    its file name, URL, or by its fully qualified class name.\n+\n+    Examples:\n+\n+    >   `path\/to\/MyClass.class`\n+\n+    >   `jar:file:\/\/\/path\/to\/MyJar.jar!\/mypkg\/MyClass.class`\n+\n+    >   `java.lang.Object`\n+\n+## Description\n+\n+The `javap` command disassembles one or more class files. The output depends on\n+the options used. When no options are used, the `javap` command prints the\n+protected and public fields, and methods of the classes passed to it.\n+\n+The `javap` command isn't multirelease JAR aware. Using the class path form of\n+the command results in viewing the base entry in all JAR files, multirelease or\n+not. Using the URL form, you can use the URL form of an argument to specify a\n+specific version of a class to be disassembled.\n+\n+The `javap` command prints its output to `stdout`.\n+\n+**Note:**\n+\n+In tools that support `--` style options, the GNU-style options can use the\n+equal sign (`=`) instead of a white space to separate the name of an option\n+from its value.\n+\n+## Options for javap\n+\n+`--help`, `-help` , `-h`, or `-?`\n+:   Prints a help message for the `javap` command.\n+\n+`-version`\n+:   Prints release information.\n+\n+`-verbose` or `-v`\n+:   Prints additional information about the selected class.\n+\n+`-l`\n+:   Prints line and local variable tables.\n+\n+`-public`\n+:   Shows only public classes and members.\n+\n+`-protected`\n+:   Shows only protected and public classes and members.\n+\n+`-package`\n+:   Shows package\/protected\/public classes and members (default).\n+\n+`-private` or `-p`\n+:   Shows all classes and members.\n+\n+`-c`\n+:   Prints disassembled code, for example, the instructions that comprise the\n+    Java bytecodes, for each of the methods in the class.\n+\n+`-s`\n+:   Prints internal type signatures.\n+\n+`-sysinfo`\n+:   Shows system information (path, size, date, SHA-256 hash) of the class being\n+    processed.\n+\n+`-verify`\n+:   Prints additional class verification info.\n+\n+`-constants`\n+:   Shows `static final` constants.\n+\n+`--module` *module* or `-m` *module*\n+:   Specifies the module containing classes to be disassembled.\n+\n+`--module-path` *path*\n+:   Specifies where to find application modules.\n+\n+`--system` *jdk*\n+:   Specifies where to find system modules.\n+\n+`--class-path` *path*, `-classpath` *path*, or `-cp` *path*\n+:   Specifies the path that the `javap` command uses to find user class files.\n+    It overrides the default or the `CLASSPATH` environment variable when it's\n+    set.\n+\n+`-bootclasspath` *path*\n+:   Overrides the location of bootstrap class files.\n+\n+`--multi-release` *version*\n+:   Specifies the version to select in multi-release JAR files.\n+\n+`-J`*option*\n+:   Passes the specified option to the JVM. For example:\n+\n+    ```\n+    javap -J-version\n+\n+    javap -J-Djava.security.manager -J-Djava.security.policy=MyPolicy MyClassName\n+    ```\n+\n+    See *Overview of Java Options* in [java](java.html).\n+\n+## javap Example\n+\n+Compile the following `HelloWorldFrame` class:\n+\n+```\n+import java.awt.Graphics;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+\n+public class HelloWorldFrame extends JFrame {\n+\n+   String message = \"Hello World!\";\n+\n+   public HelloWorldFrame(){\n+        setContentPane(new JPanel(){\n+            @Override\n+            protected void paintComponent(Graphics g) {\n+                g.drawString(message, 15, 30);\n+            }\n+        });\n+        setSize(100, 100);\n+    }\n+    public static void main(String[] args) {\n+        HelloWorldFrame frame = new HelloWorldFrame();\n+        frame.setVisible(true);\n+\n+    }\n+\n+}\n+```\n+\n+The output from the `javap HelloWorldFrame.class` command yields the following:\n+\n+```\n+Compiled from \"HelloWorldFrame.java\"\n+public class HelloWorldFrame extends javax.swing.JFrame {\n+  java.lang.String message;\n+  public HelloWorldFrame();\n+  public static void main(java.lang.String[]);\n+}\n+```\n+\n+The output from the `javap -c HelloWorldFrame.class` command yields the\n+following:\n+\n+```\n+Compiled from \"HelloWorldFrame.java\"\n+public class HelloWorldFrame extends javax.swing.JFrame {\n+  java.lang.String message;\n+\n+  public HelloWorldFrame();\n+    Code:\n+       0: aload_0\n+       1: invokespecial #1        \/\/ Method javax\/swing\/JFrame.\"<init>\":()V\n+       4: aload_0\n+       5: ldc           #2        \/\/ String Hello World!\n+       7: putfield      #3        \/\/ Field message:Ljava\/lang\/String;\n+      10: aload_0\n+      11: new           #4        \/\/ class HelloWorldFrame$1\n+      14: dup\n+      15: aload_0\n+      16: invokespecial #5        \/\/ Method HelloWorldFrame$1.\"<init>\":(LHelloWorldFrame;)V\n+      19: invokevirtual #6        \/\/ Method setContentPane:(Ljava\/awt\/Container;)V\n+      22: aload_0\n+      23: bipush        100\n+      25: bipush        100\n+      27: invokevirtual #7        \/\/ Method setSize:(II)V\n+      30: return\n+\n+  public static void main(java.lang.String[]);\n+    Code:\n+       0: new           #8        \/\/ class HelloWorldFrame\n+       3: dup\n+       4: invokespecial #9        \/\/ Method \"<init>\":()V\n+       7: astore_1\n+       8: aload_1\n+       9: iconst_1\n+      10: invokevirtual #10       \/\/ Method setVisible:(Z)V\n+      13: return\n+}\n+```\n","filename":"src\/jdk.jdeps\/share\/man\/javap.md","additions":227,"deletions":0,"binary":false,"changes":227,"status":"added"},{"patch":"@@ -1,271 +0,0 @@\n-.\\\" Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JDEPRSCAN\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jdeprscan - static analysis tool that scans a jar file (or some other\n-aggregation of class files) for uses of deprecated API elements\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jdeprscan\\f[R] [\\f[I]options\\f[R]]\n-{\\f[I]dir\\f[R]|\\f[I]jar\\f[R]|\\f[I]class\\f[R]}\n-.TP\n-\\f[I]options\\f[R]\n-See \\f[B]Options for the jdeprscan Command\\f[R]\n-.TP\n-\\f[I]dir\\f[R]|\\f[I]jar\\f[R]|\\f[I]class\\f[R]\n-\\f[V]jdeprscan\\f[R] command scans each argument for usages of deprecated\n-APIs.\n-The arguments can be a:\n-.RS\n-.IP \\[bu] 2\n-\\f[I]dir\\f[R]: Directory\n-.IP \\[bu] 2\n-\\f[I]jar\\f[R]: JAR file\n-.IP \\[bu] 2\n-\\f[I]class\\f[R]: Class name or class file\n-.PP\n-The class name should use a dot (\\f[V].\\f[R]) as a separator.\n-For example:\n-.PP\n-\\f[V]java.lang.Thread\\f[R]\n-.PP\n-For nested classes, the dollar sign \\f[V]$\\f[R] separator character\n-should be used.\n-For example:\n-.PP\n-\\f[V]java.lang.Thread$State\\f[R]\n-.PP\n-A class file can also be named.\n-For example:\n-.PP\n-\\f[V]build\/classes\/java\/lang\/Thread$State.class\\f[R]\n-.RE\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jdeprscan\\f[R] tool is a static analysis tool provided by the\n-JDK that scans a JAR file or some other aggregation of class files for\n-uses of deprecated API elements.\n-The deprecated APIs identified by the \\f[V]jdeprscan\\f[R] tool are only\n-those that are defined by Java SE.\n-Deprecated APIs defined by third-party libraries aren\\[aq]t reported.\n-.PP\n-To scan a JAR file or a set of class files, you must first ensure that\n-all of the classes that the scanned classes depend upon are present in\n-the class path.\n-Set the class path using the \\f[V]--class-path\\f[R] option described in\n-\\f[B]Options for the jdeprscan Command\\f[R].\n-Typically, you would use the same class path as the one that you use\n-when invoking your application.\n-.PP\n-If the \\f[V]jdeprscan\\f[R] can\\[aq]t find all the dependent classes, it\n-will generate an error message for each class that\\[aq]s missing.\n-These error messages are typically of the form:\n-.RS\n-.PP\n-\\f[V]error: cannot find class ...\\f[R]\n-.RE\n-.PP\n-If these errors occur, then you must adjust the class path so that it\n-includes all dependent classes.\n-.SH OPTIONS FOR THE JDEPRSCAN COMMAND\n-.PP\n-The following options are available:\n-.TP\n-\\f[V]--class-path\\f[R] \\f[I]path\\f[R]\n-Provides a search path for resolution of dependent classes.\n-.RS\n-.PP\n-\\f[I]path\\f[R] can be a search path that consists of one or more\n-directories separated by the system-specific path separator.\n-For example:\n-.IP \\[bu] 2\n-\\f[B]Linux and macOS:\\f[R]\n-.RS 2\n-.RS\n-.PP\n-\\f[V]--class-path \/some\/directory:\/another\/different\/dir\\f[R]\n-.RE\n-.RE\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-On Windows, use a semicolon (\\f[V];\\f[R]) as the separator instead of a\n-colon (\\f[V]:\\f[R]).\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R]\n-.RS 2\n-.RS\n-.PP\n-\\f[V]--class-path \\[rs]some\\[rs]directory;\\[rs]another\\[rs]different\\[rs]dir\\f[R]\n-.RE\n-.RE\n-.RE\n-.TP\n-\\f[V]--for-removal\\f[R]\n-Limits scanning or listing to APIs that are deprecated for removal.\n-Can\\[aq]t be used with a release value of 6, 7, or 8.\n-.TP\n-\\f[V]--full-version\\f[R]\n-Prints out the full version string of the tool.\n-.TP\n-\\f[V]--help\\f[R] or \\f[V]-h\\f[R]\n-Prints out a full help message.\n-.TP\n-\\f[V]--list\\f[R] or \\f[V]-l\\f[R]\n-Prints the set of deprecated APIs.\n-No scanning is done, so no directory, jar, or class arguments should be\n-provided.\n-.TP\n-\\f[V]--release\\f[R] \\f[V]6\\f[R]|\\f[V]7\\f[R]|\\f[V]8\\f[R]|\\f[V]9\\f[R]\n-Specifies the Java SE release that provides the set of deprecated APIs\n-for scanning.\n-.TP\n-\\f[V]--verbose\\f[R] or \\f[V]-v\\f[R]\n-Enables additional message output during processing.\n-.TP\n-\\f[V]--version\\f[R]\n-Prints out the abbreviated version string of the tool.\n-.SH EXAMPLE OF JDEPRSCAN OUTPUT\n-.PP\n-The JAR file for this library will be named something similar to\n-\\f[V]commons-math3-3.6.1.jar\\f[R].\n-To scan this JAR file for the use of deprecated APIs, run the following\n-command:\n-.RS\n-.PP\n-\\f[V]jdeprscan commons-math3-3.6.1.jar\\f[R]\n-.RE\n-.PP\n-This command produces several lines of output.\n-For example, one line of output might be:\n-.IP\n-.nf\n-\\f[CB]\n-class org\/apache\/commons\/math3\/util\/MathUtils uses deprecated method java\/lang\/Double::<init>(D)V\n-\\f[R]\n-.fi\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-The class name is specified using the slash-separated binary name as\n-described in JVMS 4.2.1.\n-This is the form used internally in class files.\n-.PP\n-The deprecated API it uses is a method on the \\f[V]java.lang.Double\\f[R]\n-class.\n-.PP\n-The name of the deprecated method is \\f[V]<init>\\f[R], which is a\n-special name that means that the method is actually a constructor.\n-Another special name is \\f[V]<clinit>\\f[R], which indicates a class\n-static initializer.\n-.PP\n-Other methods are listed just by their method name.\n-Following the method name is the argument list and return type:\n-.RS\n-.PP\n-\\f[V](D)V\\f[R]\n-.RE\n-.PP\n-This indicates that it takes just one double value (a primitive) and\n-returns void.\n-The argument and return types can become cryptic.\n-For example, another line of output might be:\n-.IP\n-.nf\n-\\f[CB]\n-class org\/apache\/commons\/math3\/util\/Precision uses deprecated method java\/math\/BigDecimal::setScale(II)Ljava\/math\/BigDecimal;\n-\\f[R]\n-.fi\n-.PP\n-In this line of output, the deprecated method is on class\n-\\f[V]java.math.BigDecimal\\f[R], and the method is \\f[V]setScale()\\f[R].\n-In this case, the \\f[V](II)\\f[R] means that it takes two \\f[V]int\\f[R]\n-arguments.\n-The \\f[V]Ljava\/math\/BigDecimal;\\f[R] after the parentheses means that it\n-returns a reference to \\f[V]java.math.BigDecimal\\f[R].\n-.SH JDEPRSCAN ANALYSIS CAN BE VERSION-SPECIFIC\n-.PP\n-You can use \\f[V]jdeprscan\\f[R] relative to the previous three JDK\n-releases.\n-For example, if you are running JDK 9, then you can check against JDK 8,\n-7, and 6.\n-.PP\n-As an example, look at this code snippet:\n-.IP\n-.nf\n-\\f[CB]\n-public class Deprecations {\n-   SecurityManager sm = new RMISecurityManager();    \/\/ deprecated in 8\n-   Boolean b2 = new Boolean(true);          \/\/ deprecated in 9\n-}\n-\\f[R]\n-.fi\n-.PP\n-The complete class compiles without warnings in JDK 7.\n-.PP\n-If you run \\f[V]jdeprscan\\f[R] on a system with JDK 9, then you see:\n-.IP\n-.nf\n-\\f[CB]\n-$ jdeprscan --class-path classes --release 7 example.Deprecations\n-(no output)\n-\\f[R]\n-.fi\n-.PP\n-Run \\f[V]jdeprscan\\f[R] with a release value of 8:\n-.IP\n-.nf\n-\\f[CB]\n-$ jdeprscan --class-path classes --release 8 example.Deprecations\n-class example\/Deprecations uses type java\/rmi\/RMISecurityManager deprecated\n-class example\/Deprecations uses method in type java\/rmi\/RMISecurityManager deprecated\n-\\f[R]\n-.fi\n-.PP\n-Run \\f[V]jdeprscan\\f[R] on JDK 9:\n-.IP\n-.nf\n-\\f[CB]\n-$ jdeprscan --class-path classes example.Deprecations\n-class example\/Deprecations uses type java\/rmi\/RMISecurityManager deprecated\n-class example\/Deprecations uses method in type java\/rmi\/RMISecurityManager deprecated\n-class example\/Deprecations uses method java\/lang\/Boolean <init> (Z)V deprecated\n-\\f[R]\n-.fi\n","filename":"src\/jdk.jdeps\/share\/man\/jdeprscan.1","additions":0,"deletions":271,"binary":false,"changes":271,"status":"deleted"},{"patch":"@@ -0,0 +1,217 @@\n+---\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JDEPRSCAN(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jdeprscan - static analysis tool that scans a jar file (or some other\n+aggregation of class files) for uses of deprecated API elements\n+\n+## Synopsis\n+\n+`jdeprscan` \\[*options*\\] {*dir*\\|*jar*\\|*class*}\n+\n+*options*\n+:   See [Options for the jdeprscan Command]\n+\n+*dir*\\|*jar*\\|*class*\n+:   `jdeprscan` command scans each argument for usages of deprecated APIs. The\n+    arguments can be a:\n+\n+    -   *dir*: Directory\n+\n+    -   *jar*: JAR file\n+\n+    -   *class*: Class name or class file\n+\n+    The class name should use a dot (`.`) as a separator. For example:\n+\n+    `java.lang.Thread`\n+\n+    For nested classes, the dollar sign `$` separator character should be used.\n+    For example:\n+\n+    `java.lang.Thread$State`\n+\n+    A class file can also be named. For example:\n+\n+    `build\/classes\/java\/lang\/Thread$State.class`\n+\n+## Description\n+\n+The `jdeprscan` tool is a static analysis tool provided by the JDK that scans a\n+JAR file or some other aggregation of class files for uses of deprecated API\n+elements. The deprecated APIs identified by the `jdeprscan` tool are only those\n+that are defined by Java SE. Deprecated APIs defined by third-party libraries\n+aren't reported.\n+\n+To scan a JAR file or a set of class files, you must first ensure that all of\n+the classes that the scanned classes depend upon are present in the class\n+path. Set the class path using the `--class-path` option described in [Options\n+for the jdeprscan Command]. Typically, you would use the same class path as\n+the one that you use when invoking your application.\n+\n+If the `jdeprscan` can't find all the dependent classes, it will generate an\n+error message for each class that's missing. These error messages are typically\n+of the form:\n+\n+>   `error: cannot find class ...`\n+\n+If these errors occur, then you must adjust the class path so that it includes\n+all dependent classes.\n+\n+## Options for the jdeprscan Command\n+\n+The following options are available:\n+\n+`--class-path` *path*\n+:   Provides a search path for resolution of dependent classes.\n+\n+    *path* can be a search path that consists of one or more directories\n+    separated by the system-specific path separator. For example:\n+\n+    -   **Linux and macOS:**\n+\n+        >   `--class-path \/some\/directory:\/another\/different\/dir`\n+\n+    **Note:**\n+\n+    On Windows, use a semicolon (`;`) as the separator instead of a colon\n+    (`:`).\n+\n+    -   **Windows:**\n+\n+        >   `--class-path \\some\\directory;\\another\\different\\dir`\n+\n+`--for-removal`\n+:   Limits scanning or listing to APIs that are deprecated for removal. Can't\n+    be used with a release value of 6, 7, or 8.\n+\n+`--full-version`\n+:   Prints out the full version string of the tool.\n+\n+`--help` or `-h`\n+:   Prints out a full help message.\n+\n+`--list` or `-l`\n+:   Prints the set of deprecated APIs. No scanning is done, so no directory,\n+    jar, or class arguments should be provided.\n+\n+`--release` `6`\\|`7`\\|`8`\\|`9`\n+:   Specifies the Java SE release that provides the set of deprecated APIs for\n+    scanning.\n+\n+`--verbose` or `-v`\n+:   Enables additional message output during processing.\n+\n+`--version`\n+:   Prints out the abbreviated version string of the tool.\n+\n+## Example of jdeprscan Output\n+\n+The JAR file for this library will be named something similar to\n+`commons-math3-3.6.1.jar`. To scan this JAR file for the use of deprecated\n+APIs, run the following command:\n+\n+>   `jdeprscan commons-math3-3.6.1.jar`\n+\n+This command produces several lines of output. For example, one line of output\n+might be:\n+\n+```\n+class org\/apache\/commons\/math3\/util\/MathUtils uses deprecated method java\/lang\/Double::<init>(D)V\n+```\n+\n+**Note:**\n+\n+The class name is specified using the slash-separated binary name as described\n+in JVMS 4.2.1. This is the form used internally in class files.\n+\n+The deprecated API it uses is a method on the `java.lang.Double` class.\n+\n+The name of the deprecated method is `<init>`, which is a special name that\n+means that the method is actually a constructor. Another special name is\n+`<clinit>`, which indicates a class static initializer.\n+\n+Other methods are listed just by their method name. Following the method name\n+is the argument list and return type:\n+\n+>   `(D)V`\n+\n+This indicates that it takes just one double value (a primitive) and returns\n+void. The argument and return types can become cryptic. For example, another\n+line of output might be:\n+\n+```\n+class org\/apache\/commons\/math3\/util\/Precision uses deprecated method java\/math\/BigDecimal::setScale(II)Ljava\/math\/BigDecimal;\n+```\n+\n+In this line of output, the deprecated method is on class\n+`java.math.BigDecimal`, and the method is `setScale()`. In this case, the\n+`(II)` means that it takes two `int` arguments. The `Ljava\/math\/BigDecimal;`\n+after the parentheses means that it returns a reference to\n+`java.math.BigDecimal`.\n+\n+## jdeprscan Analysis Can Be Version-Specific\n+\n+You can use `jdeprscan` relative to the previous three JDK releases. For\n+example, if you are running JDK 9, then you can check against JDK 8, 7, and 6.\n+\n+As an example, look at this code snippet:\n+\n+```\n+public class Deprecations {\n+   SecurityManager sm = new RMISecurityManager();    \/\/ deprecated in 8\n+   Boolean b2 = new Boolean(true);          \/\/ deprecated in 9\n+}\n+```\n+\n+The complete class compiles without warnings in JDK 7.\n+\n+If you run `jdeprscan` on a system with JDK 9, then you see:\n+\n+```\n+$ jdeprscan --class-path classes --release 7 example.Deprecations\n+(no output)\n+```\n+\n+Run `jdeprscan` with a release value of 8:\n+\n+```\n+$ jdeprscan --class-path classes --release 8 example.Deprecations\n+class example\/Deprecations uses type java\/rmi\/RMISecurityManager deprecated\n+class example\/Deprecations uses method in type java\/rmi\/RMISecurityManager deprecated\n+```\n+\n+Run `jdeprscan` on JDK 9:\n+\n+```\n+$ jdeprscan --class-path classes example.Deprecations\n+class example\/Deprecations uses type java\/rmi\/RMISecurityManager deprecated\n+class example\/Deprecations uses method in type java\/rmi\/RMISecurityManager deprecated\n+class example\/Deprecations uses method java\/lang\/Boolean <init> (Z)V deprecated\n+```\n","filename":"src\/jdk.jdeps\/share\/man\/jdeprscan.md","additions":217,"deletions":0,"binary":false,"changes":217,"status":"added"},{"patch":"@@ -1,338 +0,0 @@\n-.\\\" Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JDEPS\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jdeps - launch the Java class dependency analyzer\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jdeps\\f[R] [\\f[I]options\\f[R]] \\f[I]path\\f[R] ...\n-.TP\n-\\f[I]options\\f[R]\n-Command-line options.\n-For detailed descriptions of the options that can be used, see\n-.RS\n-.IP \\[bu] 2\n-\\f[B]Possible Options\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Module Dependence Analysis Options\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Options to Filter Dependences\\f[R]\n-.IP \\[bu] 2\n-\\f[B]Options to Filter Classes to be Analyzed\\f[R]\n-.RE\n-.TP\n-\\f[I]path\\f[R]\n-A pathname to the \\f[V].class\\f[R] file, directory, or JAR file to\n-analyze.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jdeps\\f[R] command shows the package-level or class-level\n-dependencies of Java class files.\n-The input class can be a path name to a \\f[V].class\\f[R] file, a\n-directory, a JAR file, or it can be a fully qualified class name to\n-analyze all class files.\n-The options determine the output.\n-By default, the \\f[V]jdeps\\f[R] command writes the dependencies to the\n-system output.\n-The command can generate the dependencies in DOT language (see the\n-\\f[V]-dotoutput\\f[R] option).\n-.SH POSSIBLE OPTIONS\n-.TP\n-\\f[V]-?\\f[R] or \\f[V]-h\\f[R] or \\f[V]--help\\f[R]\n-Prints the help message.\n-.TP\n-\\f[V]-dotoutput\\f[R] \\f[I]dir\\f[R] or \\f[V]--dot-output\\f[R] \\f[I]dir\\f[R]\n-Specifies the destination directory for DOT file output.\n-If this option is specified, then the \\f[V]jdeps\\f[R]command generates\n-one \\f[V].dot\\f[R] file for each analyzed archive named\n-\\f[V]archive-file-name.dot\\f[R] that lists the dependencies, and also a\n-summary file named \\f[V]summary.dot\\f[R] that lists the dependencies\n-among the archive files.\n-.TP\n-\\f[V]-s\\f[R] or \\f[V]-summary\\f[R]\n-Prints a dependency summary only.\n-.TP\n-\\f[V]-v\\f[R] or \\f[V]-verbose\\f[R]\n-Prints all class-level dependencies.\n-This is equivalent to\n-.RS\n-.RS\n-.PP\n-\\f[V]-verbose:class -filter:none\\f[R]\n-.RE\n-.RE\n-.TP\n-\\f[V]-verbose:package\\f[R]\n-Prints package-level dependencies excluding, by default, dependences\n-within the same package.\n-.TP\n-\\f[V]-verbose:class\\f[R]\n-Prints class-level dependencies excluding, by default, dependencies\n-within the same archive.\n-.TP\n-\\f[V]-apionly\\f[R] or \\f[V]--api-only\\f[R]\n-Restricts the analysis to APIs, for example, dependences from the\n-signature of \\f[V]public\\f[R] and \\f[V]protected\\f[R] members of public\n-classes including field type, method parameter types, returned type, and\n-checked exception types.\n-.TP\n-\\f[V]-jdkinternals\\f[R] or \\f[V]--jdk-internals\\f[R]\n-Finds class-level dependences in the JDK internal APIs.\n-By default, this option analyzes all classes specified in the\n-\\f[V]--classpath\\f[R] option and input files unless you specified the\n-\\f[V]-include\\f[R] option.\n-You can\\[aq]t use this option with the \\f[V]-p\\f[R], \\f[V]-e\\f[R], and\n-\\f[V]-s\\f[R] options.\n-.RS\n-.PP\n-\\f[B]Warning\\f[R]: The JDK internal APIs are inaccessible.\n-.RE\n-.TP\n-\\f[V]-cp\\f[R] \\f[I]path\\f[R], \\f[V]-classpath\\f[R] \\f[I]path\\f[R], or \\f[V]--class-path\\f[R] \\f[I]path\\f[R]\n-Specifies where to find class files.\n-.TP\n-\\f[V]--module-path\\f[R] \\f[I]module-path\\f[R]\n-Specifies the module path.\n-.TP\n-\\f[V]--upgrade-module-path\\f[R] \\f[I]module-path\\f[R]\n-Specifies the upgrade module path.\n-.TP\n-\\f[V]--system\\f[R] \\f[I]java-home\\f[R]\n-Specifies an alternate system module path.\n-.TP\n-\\f[V]--add-modules\\f[R] \\f[I]module-name\\f[R][\\f[V],\\f[R] \\f[I]module-name\\f[R]...]\n-Adds modules to the root set for analysis.\n-.TP\n-\\f[V]--multi-release\\f[R] \\f[I]version\\f[R]\n-Specifies the version when processing multi-release JAR files.\n-\\f[I]version\\f[R] should be an integer >=9 or base.\n-.TP\n-\\f[V]-q\\f[R] or \\f[V]-quiet\\f[R]\n-Doesn\\[aq]t show missing dependencies from\n-\\f[V]-generate-module-info\\f[R] output.\n-.TP\n-\\f[V]-version\\f[R] or \\f[V]--version\\f[R]\n-Prints version information.\n-.SH MODULE DEPENDENCE ANALYSIS OPTIONS\n-.TP\n-\\f[V]-m\\f[R] \\f[I]module-name\\f[R] or \\f[V]--module\\f[R] \\f[I]module-name\\f[R]\n-Specifies the root module for analysis.\n-.TP\n-\\f[V]--generate-module-info\\f[R] \\f[I]dir\\f[R]\n-Generates \\f[V]module-info.java\\f[R] under the specified directory.\n-The specified JAR files will be analyzed.\n-This option cannot be used with \\f[V]--dot-output\\f[R] or\n-\\f[V]--class-path\\f[R] options.\n-Use the \\f[V]--generate-open-module\\f[R] option for open modules.\n-.TP\n-\\f[V]--generate-open-module\\f[R] \\f[I]dir\\f[R]\n-Generates \\f[V]module-info.java\\f[R] for the specified JAR files under\n-the specified directory as open modules.\n-This option cannot be used with the \\f[V]--dot-output\\f[R] or\n-\\f[V]--class-path\\f[R] options.\n-.TP\n-\\f[V]--check\\f[R] \\f[I]module-name\\f[R] [\\f[V],\\f[R] \\f[I]module-name\\f[R]...]\n-Analyzes the dependence of the specified modules.\n-It prints the module descriptor, the resulting module dependences after\n-analysis and the graph after transition reduction.\n-It also identifies any unused qualified exports.\n-.TP\n-\\f[V]--list-deps\\f[R]\n-Lists the module dependences and also the package names of JDK internal\n-APIs (if referenced).\n-This option transitively analyzes libraries on class path and module\n-path if referenced.\n-Use \\f[V]--no-recursive\\f[R] option for non-transitive dependency\n-analysis.\n-.TP\n-\\f[V]--list-reduced-deps\\f[R]\n-Same as \\f[V]--list-deps\\f[R] without listing the implied reads edges\n-from the module graph.\n-If module M1 reads M2, and M2 requires transitive on M3, then M1 reading\n-M3 is implied and is not shown in the graph.\n-.TP\n-\\f[V]--print-module-deps\\f[R]\n-Same as \\f[V]--list-reduced-deps\\f[R] with printing a comma-separated\n-list of module dependences.\n-The output can be used by \\f[V]jlink --add-modules\\f[R] to create a\n-custom image that contains those modules and their transitive\n-dependences.\n-.TP\n-\\f[V]--ignore-missing-deps\\f[R]\n-Ignore missing dependences.\n-.SH OPTIONS TO FILTER DEPENDENCES\n-.TP\n-\\f[V]-p\\f[R] \\f[I]pkg_name\\f[R], \\f[V]-package\\f[R] \\f[I]pkg_name\\f[R], or \\f[V]--package\\f[R] \\f[I]pkg_name\\f[R]\n-Finds dependences matching the specified package name.\n-You can specify this option multiple times for different packages.\n-The \\f[V]-p\\f[R] and \\f[V]-e\\f[R] options are mutually exclusive.\n-.TP\n-\\f[V]-e\\f[R] \\f[I]regex\\f[R], \\f[V]-regex\\f[R] \\f[I]regex\\f[R], or \\f[V]--regex\\f[R] \\f[I]regex\\f[R]\n-Finds dependences matching the specified pattern.\n-The \\f[V]-p\\f[R] and \\f[V]-e\\f[R] options are mutually exclusive.\n-.TP\n-\\f[V]--require\\f[R] \\f[I]module-name\\f[R]\n-Finds dependences matching the given module name (may be given multiple\n-times).\n-The \\f[V]--package\\f[R], \\f[V]--regex\\f[R], and \\f[V]--require\\f[R]\n-options are mutually exclusive.\n-.TP\n-\\f[V]-f\\f[R] \\f[I]regex\\f[R] or \\f[V]-filter\\f[R] \\f[I]regex\\f[R]\n-Filters dependences matching the given pattern.\n-If give multiple times, the last one will be selected.\n-.TP\n-\\f[V]-filter:package\\f[R]\n-Filters dependences within the same package.\n-This is the default.\n-.TP\n-\\f[V]-filter:archive\\f[R]\n-Filters dependences within the same archive.\n-.TP\n-\\f[V]-filter:module\\f[R]\n-Filters dependences within the same module.\n-.TP\n-\\f[V]-filter:none\\f[R]\n-No \\f[V]-filter:package\\f[R] and \\f[V]-filter:archive\\f[R] filtering.\n-Filtering specified via the \\f[V]-filter\\f[R] option still applies.\n-.TP\n-\\f[V]--missing-deps\\f[R]\n-Finds missing dependences.\n-This option cannot be used with \\f[V]-p\\f[R], \\f[V]-e\\f[R] and\n-\\f[V]-s\\f[R] options.\n-.SH OPTIONS TO FILTER CLASSES TO BE ANALYZED\n-.TP\n-\\f[V]-include\\f[R] \\f[I]regex\\f[R]\n-Restricts analysis to the classes matching pattern.\n-This option filters the list of classes to be analyzed.\n-It can be used together with \\f[V]-p\\f[R] and \\f[V]-e\\f[R], which apply\n-the pattern to the dependencies.\n-.TP\n-\\f[V]-R\\f[R] or \\f[V]--recursive\\f[R]\n-Recursively traverses all run-time dependences.\n-The \\f[V]-R\\f[R] option implies \\f[V]-filter:none\\f[R].\n-If \\f[V]-p\\f[R], \\f[V]-e\\f[R], or \\f[V]-f\\f[R] options are specified,\n-only the matching dependences are analyzed.\n-.TP\n-\\f[V]--no-recursive\\f[R]\n-Do not recursively traverse dependences.\n-.TP\n-\\f[V]-I\\f[R] or \\f[V]--inverse\\f[R]\n-Analyzes the dependences per other given options and then finds all\n-artifacts that directly and indirectly depend on the matching nodes.\n-This is equivalent to the inverse of the compile-time view analysis and\n-the print dependency summary.\n-This option must be used with the \\f[V]--require\\f[R],\n-\\f[V]--package\\f[R], or \\f[V]--regex\\f[R] options.\n-.TP\n-\\f[V]--compile-time\\f[R]\n-Analyzes the compile-time view of transitive dependencies, such as the\n-compile-time view of the \\f[V]-R\\f[R] option.\n-Analyzes the dependences per other specified options.\n-If a dependency is found from a directory, a JAR file or a module, all\n-classes in that containing archive are analyzed.\n-.SH EXAMPLE OF ANALYZING DEPENDENCIES\n-.PP\n-The following example demonstrates analyzing the dependencies of the\n-\\f[V]Notepad.jar\\f[R] file.\n-.PP\n-\\f[B]Linux and macOS:\\f[R]\n-.IP\n-.nf\n-\\f[CB]\n-$ jdeps demo\/jfc\/Notepad\/Notepad.jar\n-Notepad.jar -> java.base\n-Notepad.jar -> java.desktop\n-Notepad.jar -> java.logging\n-   <unnamed> (Notepad.jar)\n-      -> java.awt\n-      -> java.awt.event\n-      -> java.beans\n-      -> java.io\n-      -> java.lang\n-      -> java.net\n-      -> java.util\n-      -> java.util.logging\n-      -> javax.swing\n-      -> javax.swing.border\n-      -> javax.swing.event\n-      -> javax.swing.text\n-      -> javax.swing.tree\n-      -> javax.swing.undo\n-\\f[R]\n-.fi\n-.PP\n-\\f[B]Windows:\\f[R]\n-.IP\n-.nf\n-\\f[CB]\n-C:\\[rs]Java\\[rs]jdk1.9.0>jdeps demo\\[rs]jfc\\[rs]Notepad\\[rs]Notepad.jar\n-Notepad.jar -> java.base\n-Notepad.jar -> java.desktop\n-Notepad.jar -> java.logging\n-   <unnamed> (Notepad.jar)\n-      -> java.awt\n-      -> java.awt.event\n-      -> java.beans\n-      -> java.io\n-      -> java.lang\n-      -> java.net\n-      -> java.util\n-      -> java.util.logging\n-      -> javax.swing\n-      -> javax.swing.border\n-      -> javax.swing.event\n-      -> javax.swing.text\n-      -> javax.swing.tree\n-      -> javax.swing.undo\n-\\f[R]\n-.fi\n-.SH EXAMPLE USING THE --INVERSE OPTION\n-.IP\n-.nf\n-\\f[CB]\n- $ jdeps --inverse --require java.xml.bind\n-Inverse transitive dependences on [java.xml.bind]\n-java.xml.bind <- java.se.ee\n-java.xml.bind <- jdk.xml.ws\n-java.xml.bind <- java.xml.ws <- java.se.ee\n-java.xml.bind <- java.xml.ws <- jdk.xml.ws\n-java.xml.bind <- jdk.xml.bind <- jdk.xml.ws\n-\\f[R]\n-.fi\n","filename":"src\/jdk.jdeps\/share\/man\/jdeps.1","additions":0,"deletions":338,"binary":false,"changes":338,"status":"deleted"},{"patch":"@@ -0,0 +1,297 @@\n+---\n+# Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JDEPS(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jdeps - launch the Java class dependency analyzer\n+\n+## Synopsis\n+\n+`jdeps` \\[*options*\\] *path* ...\n+\n+*options*\n+:   Command-line options. For detailed descriptions of the options that can be\n+    used, see\n+\n+    -   [Possible Options]\n+\n+    -   [Module Dependence Analysis Options]\n+\n+    -   [Options to Filter Dependences]\n+\n+    -   [Options to Filter Classes to be Analyzed]\n+\n+*path*\n+:   A pathname to the `.class` file, directory, or JAR file to analyze.\n+\n+## Description\n+\n+The `jdeps` command shows the package-level or class-level dependencies of Java\n+class files. The input class can be a path name to a `.class` file, a\n+directory, a JAR file, or it can be a fully qualified class name to analyze all\n+class files. The options determine the output. By default, the `jdeps` command\n+writes the dependencies to the system output. The command can generate the\n+dependencies in DOT language (see the `-dotoutput` option).\n+\n+## Possible Options\n+\n+`-?` or `-h` or `--help`\n+:   Prints the help message.\n+\n+`-dotoutput` *dir* or `--dot-output` *dir*\n+:   Specifies the destination directory for DOT file output. If this option is\n+    specified, then the `jdeps`command generates one `.dot` file for each\n+    analyzed archive named `archive-file-name.dot` that lists the dependencies,\n+    and also a summary file named `summary.dot` that lists the dependencies\n+    among the archive files.\n+\n+`-s` or `-summary`\n+:   Prints a dependency summary only.\n+\n+`-v` or `-verbose`\n+:   Prints all class-level dependencies. This is equivalent to\n+\n+    >   `-verbose:class -filter:none`\n+\n+`-verbose:package`\n+:   Prints package-level dependencies excluding, by default, dependences within\n+    the same package.\n+\n+`-verbose:class`\n+:   Prints class-level dependencies excluding, by default, dependencies within\n+    the same archive.\n+\n+`-apionly` or `--api-only`\n+:   Restricts the analysis to APIs, for example, dependences from the signature\n+    of `public` and `protected` members of public classes including field type,\n+    method parameter types, returned type, and checked exception types.\n+\n+`-jdkinternals` or `--jdk-internals`\n+:   Finds class-level dependences in the JDK internal APIs. By default, this\n+    option analyzes all classes specified in the `--classpath` option and input\n+    files unless you specified the `-include` option. You can't use this option\n+    with the `-p`, `-e`, and `-s` options.\n+\n+    **Warning**: The JDK internal APIs are inaccessible.\n+\n+`-cp` *path*, `-classpath` *path*, or `--class-path` *path*\n+:   Specifies where to find class files.\n+\n+`--module-path` *module-path*\n+:   Specifies the module path.\n+\n+`--upgrade-module-path` *module-path*\n+:   Specifies the upgrade module path.\n+\n+`--system` *java-home*\n+:   Specifies an alternate system module path.\n+\n+`--add-modules` *module-name*\\[`,` *module-name*...\\]\n+:   Adds modules to the root set for analysis.\n+\n+`--multi-release` *version*\n+:   Specifies the version when processing multi-release JAR files. *version*\n+    should be an integer \\>=9 or base.\n+\n+`-q` or `-quiet`\n+:   Doesn't show missing dependencies from `-generate-module-info` output.\n+\n+`-version` or `--version`\n+:   Prints version information.\n+\n+## Module Dependence Analysis Options\n+\n+`-m` *module-name* or `--module` *module-name*\n+:   Specifies the root module for analysis.\n+\n+`--generate-module-info` *dir*\n+:   Generates `module-info.java` under the specified directory. The specified\n+    JAR files will be analyzed. This option cannot be used with `--dot-output`\n+    or `--class-path` options. Use the `--generate-open-module` option for open\n+    modules.\n+\n+`--generate-open-module` *dir*\n+:   Generates `module-info.java` for the specified JAR files under the\n+    specified directory as open modules. This option cannot be used with the\n+    `--dot-output` or `--class-path` options.\n+\n+`--check` *module-name* \\[`,` *module-name*...\\]\n+:   Analyzes the dependence of the specified modules. It prints the module\n+    descriptor, the resulting module dependences after analysis and the graph\n+    after transition reduction. It also identifies any unused qualified\n+    exports.\n+\n+`--list-deps`\n+:   Lists the module dependences and also the package names of JDK internal\n+    APIs (if referenced).  This option transitively analyzes libraries on\n+    class path and module path if referenced.  Use `--no-recursive` option for\n+    non-transitive dependency analysis.\n+\n+`--list-reduced-deps`\n+:   Same as `--list-deps` without listing the implied reads edges from the\n+    module graph. If module M1 reads M2, and M2 requires transitive on M3, then\n+    M1 reading M3 is implied and is not shown in the graph.\n+\n+`--print-module-deps`\n+:   Same as `--list-reduced-deps` with printing a comma-separated list of\n+    module dependences. The output can be used by `jlink --add-modules` to\n+    create a custom image that contains those modules and their transitive\n+    dependences.\n+\n+`--ignore-missing-deps`\n+:   Ignore missing dependences.\n+\n+## Options to Filter Dependences\n+\n+`-p` *pkg\\_name*, `-package` *pkg\\_name*, or `--package` *pkg\\_name*\n+:   Finds dependences matching the specified package name. You can specify this\n+    option multiple times for different packages. The `-p` and `-e` options are\n+    mutually exclusive.\n+\n+`-e` *regex*, `-regex` *regex*, or `--regex` *regex*\n+:   Finds dependences matching the specified pattern. The `-p` and `-e` options\n+    are mutually exclusive.\n+\n+`--require` *module-name*\n+:   Finds dependences matching the given module name (may be given multiple\n+    times). The `--package`, `--regex`, and `--require` options are mutually\n+    exclusive.\n+\n+`-f` *regex* or `-filter` *regex*\n+:   Filters dependences matching the given pattern. If give multiple times, the\n+    last one will be selected.\n+\n+`-filter:package`\n+:   Filters dependences within the same package. This is the default.\n+\n+`-filter:archive`\n+:   Filters dependences within the same archive.\n+\n+`-filter:module`\n+:   Filters dependences within the same module.\n+\n+`-filter:none`\n+:   No `-filter:package` and `-filter:archive` filtering. Filtering specified\n+    via the `-filter` option still applies.\n+\n+`--missing-deps`\n+:   Finds missing dependences.  This option cannot be used with `-p`, `-e` and\n+    `-s` options.\n+\n+## Options to Filter Classes to be Analyzed\n+\n+`-include` *regex*\n+:   Restricts analysis to the classes matching pattern. This option filters the\n+    list of classes to be analyzed. It can be used together with `-p` and `-e`,\n+    which apply the pattern to the dependencies.\n+\n+`-R` or `--recursive`\n+:   Recursively traverses all run-time dependences. The `-R` option implies\n+    `-filter:none`. If `-p`, `-e`, or `-f` options are specified, only the\n+    matching dependences are analyzed.\n+\n+`--no-recursive`\n+:   Do not recursively traverse dependences.\n+\n+`-I` or `--inverse`\n+:   Analyzes the dependences per other given options and then finds all\n+    artifacts that directly and indirectly depend on the matching nodes. This\n+    is equivalent to the inverse of the compile-time view analysis and the\n+    print dependency summary. This option must be used with the `--require`,\n+    `--package`, or `--regex` options.\n+\n+`--compile-time`\n+:   Analyzes the compile-time view of transitive dependencies, such as the\n+    compile-time view of the `-R` option. Analyzes the dependences per other\n+    specified options. If a dependency is found from a directory, a JAR file or\n+    a module, all classes in that containing archive are analyzed.\n+\n+## Example of Analyzing Dependencies\n+\n+The following example demonstrates analyzing the dependencies of the\n+`Notepad.jar` file.\n+\n+**Linux and macOS:**\n+\n+```\n+$ jdeps demo\/jfc\/Notepad\/Notepad.jar\n+Notepad.jar -> java.base\n+Notepad.jar -> java.desktop\n+Notepad.jar -> java.logging\n+   <unnamed> (Notepad.jar)\n+      -> java.awt\n+      -> java.awt.event\n+      -> java.beans\n+      -> java.io\n+      -> java.lang\n+      -> java.net\n+      -> java.util\n+      -> java.util.logging\n+      -> javax.swing\n+      -> javax.swing.border\n+      -> javax.swing.event\n+      -> javax.swing.text\n+      -> javax.swing.tree\n+      -> javax.swing.undo\n+```\n+\n+**Windows:**\n+\n+```\n+C:\\Java\\jdk1.9.0>jdeps demo\\jfc\\Notepad\\Notepad.jar\n+Notepad.jar -> java.base\n+Notepad.jar -> java.desktop\n+Notepad.jar -> java.logging\n+   <unnamed> (Notepad.jar)\n+      -> java.awt\n+      -> java.awt.event\n+      -> java.beans\n+      -> java.io\n+      -> java.lang\n+      -> java.net\n+      -> java.util\n+      -> java.util.logging\n+      -> javax.swing\n+      -> javax.swing.border\n+      -> javax.swing.event\n+      -> javax.swing.text\n+      -> javax.swing.tree\n+      -> javax.swing.undo\n+```\n+\n+## Example Using the --inverse Option\n+\n+```\n+ $ jdeps --inverse --require java.xml.bind\n+Inverse transitive dependences on [java.xml.bind]\n+java.xml.bind <- java.se.ee\n+java.xml.bind <- jdk.xml.ws\n+java.xml.bind <- java.xml.ws <- java.se.ee\n+java.xml.bind <- java.xml.ws <- jdk.xml.ws\n+java.xml.bind <- jdk.xml.bind <- jdk.xml.ws\n+```\n","filename":"src\/jdk.jdeps\/share\/man\/jdeps.md","additions":297,"deletions":0,"binary":false,"changes":297,"status":"added"},{"patch":"@@ -1,220 +0,0 @@\n-.\\\" Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JNATIVESCAN\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jnativescan - static analysis tool that scans one or more jar files for\n-uses of native functionalities, such as restricted method calls or\n-\\f[V]native\\f[R] method declarations.\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jnativescan\\f[R] [\\f[I]options\\f[R]]\n-.TP\n-\\f[I]options\\f[R]\n-See \\f[B]Options for the jnativescan Command\\f[R]\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jnative\\f[R] tool is a static analysis tool provided by the JDK\n-that scans a JAR file for uses of native functionalities, such as\n-restricted method calls or \\f[V]native\\f[R] method declarations.\n-.PP\n-\\f[V]jnativescan\\f[R] accepts a runtime class path and module path\n-configuration, as well as a set of root modules, and a target release.\n-It scans the jars on the class and module paths, and reports uses of\n-native functionalities either in a tree like structure, which also\n-identifies that calling classes and methods, or as a list of module\n-names when the \\f[V]--print-native-access\\f[R] flag is specified.\n-.SH OPTIONS FOR THE JNATIVESCAN COMMAND\n-.PP\n-The following options are available:\n-.TP\n-\\f[V]--class-path\\f[R] \\f[I]path\\f[R]\n-Used to specify a list of paths pointing to jar files to be scanned.\n-.PP\n-All jar files specified through this list will be scanned.\n-If a jar file contains a \\f[V]Class-Path\\f[R] attribute in its manifest,\n-jar files listed there will be scanned as well.\n-Jar files listed in the \\f[V]Class-Path\\f[R] manifest attribute that can\n-not be found are ignored.\n-All the jar files found are treated as if they belonged to the unnamed\n-module.\n-.TP\n-\\f[V]--module-path\\f[R] \\f[I]path\\f[R]\n-Used to specify a list of paths pointing to jar files or directories\n-containing jar files, that the tool can use to find modules that need to\n-be scanned.\n-The list of jar files that will be scanned depends on the\n-\\f[V]--add-modules\\f[R] option.\n-.RS\n-.PP\n-For both the \\f[V]--class-path\\f[R] and \\f[V]--module-path\\f[R] options,\n-\\f[I]path\\f[R] should be a search path that consists of one or more jar\n-files, separated by the system-specific path separator.\n-For example:\n-.IP \\[bu] 2\n-\\f[B]Linux and macOS:\\f[R]\n-.RS 2\n-.RS\n-.PP\n-\\f[V]--class-path \/some\/foo.jar:\/another\/different\/bar.jar\\f[R]\n-.RE\n-.RE\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-On Windows, use a semicolon (\\f[V];\\f[R]) as the separator instead of a\n-colon (\\f[V]:\\f[R]).\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R]\n-.RS 2\n-.RS\n-.PP\n-\\f[V]--class-path C:\\[rs]some\\[rs]foo.jar;C:\\[rs]another\\[rs]different\\[rs]bar.jar\\f[R]\n-.RE\n-.RE\n-.RE\n-.TP\n-\\f[V]--add-modules\\f[R] \\f[I]module[,module...]\\f[R]\n-Used to specify a comma-separated list of module names that indicate the\n-root modules to scan.\n-All the root modules will be scanned, as well as any modules that they\n-depend on.\n-This includes dependencies on service implementations specified through\n-the \\f[V]uses\\f[R] directive in a module\\[aq]s \\f[V]module-info\\f[R]\n-file.\n-All modules found on the module path that provide an implementation of\n-such a service will be scanned as well.\n-.TP\n-\\f[V]--release\\f[R] \\f[I]version\\f[R]\n-Used to specify the Java SE release that specifies the set of restricted\n-methods to scan for.\n-For multi-release jar files, this option also indicates the version of\n-class file that should be loaded from the jar.\n-This option should be set to the version of the runtime under which the\n-application is eventually intended to be run.\n-If this flag is omitted, the version of \\f[V]jnativescan\\f[R] is used as\n-release version, which is the same as the version of the JDK that the\n-tool belongs to.\n-.TP\n-\\f[V]--print-native-access\\f[R]\n-Print a comma-separated list of module names that use native\n-functionalities, instead of the default tree structure.\n-.TP\n-\\f[V]--help\\f[R] or \\f[V]-h\\f[R]\n-Prints out a full help message.\n-.TP\n-\\f[V]--version\\f[R]\n-Prints out the abbreviated version string of the tool.\n-.SH EXAMPLE OF \\f[V]jnativescan\\f[R] USE\n-.PP\n-\\f[V]jnativescan\\f[R] accepts a runtime configuration in the form of a\n-class path, module path, set of root modules, and a target release\n-version.\n-For the class path, the tool will scan all jar files, including those\n-found recursively through the \\f[V]Class-Path\\f[R] manifest attribute.\n-For the module path, the tool scans all root modules specified through\n-\\f[V]--add-modules\\f[R], and any (transitive) dependence of the root\n-modules, including any modules that contain service implementations that\n-are used by a scanned module.\n-.PP\n-By default, the tool prints out which jars, classes, and methods use\n-native functionalities, in a tree-like structure.\n-The following is an example output:\n-.IP\n-.nf\n-\\f[CB]\n-$ jnativescan --class-path app.jar\n-app.jar (ALL-UNNAMED):\n-  foo.Main:\n-    foo.Main::main(String[])void references restricted methods:\n-      java.lang.foreign.MemorySegment::reinterpret(long)MemorySegment\n-    foo.Main::nativeMethod()void is a native method declaration\n-\\f[R]\n-.fi\n-.PP\n-\\f[V]app.jar (ALL-UNNAMED)\\f[R] is the path to the jar file, with the\n-module name in parentheses behind it.\n-Since in this case the jar file appears on the class path,\n-\\f[V]ALL-UNNAMED\\f[R] is printed to indicate the unnamed module.\n-The second line of the output, \\f[V]foo.Main\\f[R], indicates that\n-methods using native functionalities were found in the\n-\\f[V]foo.Main\\f[R] class.\n-The next line:\n-.IP\n-.nf\n-\\f[CB]\n-    foo.Main::main(String[])void references restricted methods:\n-\\f[R]\n-.fi\n-.PP\n-Indicates that the \\f[V]main(String[])\\f[R] method in the\n-\\f[V]foo.Main\\f[R] class references a restricted method, which is listed\n-on the following line as:\n-.IP\n-.nf\n-\\f[CB]\n-      java.lang.foreign.MemorySegment::reinterpret(long)MemorySegment\n-\\f[R]\n-.fi\n-.PP\n-Lastly, the text:\n-.IP\n-.nf\n-\\f[CB]\n-    foo.Main::nativeMethod()void is a native method declaration\n-\\f[R]\n-.fi\n-.PP\n-Indicates that the \\f[V]foo.Main\\f[R] class contains a declaration of a\n-\\f[V]native\\f[R] method named \\f[V]nativeMethod\\f[R].\n-.PP\n-If we add \\f[V]--print-native-access\\f[R] to the example command line,\n-we instead get a list of the names of modules that contain accesses to\n-native functionalities:\n-.IP\n-.nf\n-\\f[CB]\n-$ jnativescan --class-path app.jar --print-native-access\n-ALL-UNNAMED\n-\\f[R]\n-.fi\n-.PP\n-In this case the output consists of just \\f[V]ALL-UNNAMED\\f[R], which\n-indicates a jar file on the class path, that is, in the unnamed module,\n-contains an access to native functionalities.\n","filename":"src\/jdk.jdeps\/share\/man\/jnativescan.1","additions":0,"deletions":220,"binary":false,"changes":220,"status":"deleted"},{"patch":"@@ -0,0 +1,175 @@\n+---\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JNATIVESCAN(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jnativescan - static analysis tool that scans one or more jar files for uses of\n+native functionalities, such as restricted method calls or `native` method declarations.\n+\n+## Synopsis\n+\n+`jnativescan` \\[*options*\\]\n+\n+*options*\n+:   See [Options for the jnativescan Command]\n+\n+## Description\n+\n+The `jnative` tool is a static analysis tool provided by the JDK that scans a\n+JAR file for uses of native functionalities, such as restricted method calls\n+or `native` method declarations.\n+\n+`jnativescan` accepts a runtime class path and module path configuration, as\n+well as a set of root modules, and a target release. It scans the jars on the\n+class and module paths, and reports uses of native functionalities either in a tree\n+like structure, which also identifies that calling classes and methods, or as a list\n+of module names when the `--print-native-access` flag is specified.\n+\n+## Options for the jnativescan Command\n+\n+The following options are available:\n+\n+`--class-path` *path*\n+:   Used to specify a list of paths pointing to jar files to be scanned.\n+\n+All jar files specified through this list will be scanned. If a jar file\n+contains a `Class-Path` attribute in its manifest, jar files listed there\n+will be scanned as well. Jar files listed in the `Class-Path` manifest\n+attribute that can not be found are ignored. All the jar files found are\n+treated as if they belonged to the unnamed module.\n+\n+`--module-path` *path*\n+:   Used to specify a list of paths pointing to jar files or directories\n+containing jar files, that the tool can use to find modules that need\n+to be scanned. The list of jar files that will be scanned depends on the\n+`--add-modules` option.\n+\n+    For both the `--class-path` and `--module-path` options, *path* should\n+    be a search path that consists of one or more jar files, separated by\n+    the system-specific path separator. For example:\n+\n+    -   **Linux and macOS:**\n+\n+        >   `--class-path \/some\/foo.jar:\/another\/different\/bar.jar`\n+\n+    **Note:**\n+\n+    On Windows, use a semicolon (`;`) as the separator instead of a colon\n+    (`:`).\n+\n+    -   **Windows:**\n+\n+        >   `--class-path C:\\some\\foo.jar;C:\\another\\different\\bar.jar`\n+\n+`--add-modules` *module[,module...]*\n+:   Used to specify a comma-separated list of module names that indicate\n+the root modules to scan. All the root modules will be scanned,\n+as well as any modules that they depend on. This includes dependencies on\n+service implementations specified through the `uses` directive in a module's\n+`module-info` file. All modules found on the module path that provide an\n+implementation of such a service will be scanned as well.\n+\n+`--release` *version*\n+:   Used to specify the Java SE release that specifies the set of restricted\n+methods to scan for. For multi-release jar files, this option also indicates\n+the version of class file that should be loaded from the jar. This option\n+should be set to the version of the runtime under which the application is\n+eventually intended to be run. If this flag is omitted, the version of\n+`jnativescan` is used as release version, which is the same as the version of\n+the JDK that the tool belongs to.\n+\n+`--print-native-access`\n+:   Print a comma-separated list of module names that use native functionalities,\n+instead of the default tree structure.\n+\n+`--help` or `-h`\n+:   Prints out a full help message.\n+\n+`--version`\n+:   Prints out the abbreviated version string of the tool.\n+\n+## Example of `jnativescan` use\n+\n+`jnativescan` accepts a runtime configuration in the form of a class path, module\n+path, set of root modules, and a target release version. For the class path, the\n+tool will scan all jar files, including those found recursively through the\n+`Class-Path` manifest attribute. For the module path, the tool scans all root\n+modules specified through `--add-modules`, and any (transitive) dependence of\n+the root modules, including any modules that contain service implementations that\n+are used by a scanned module.\n+\n+By default, the tool prints out which jars, classes, and methods use native\n+functionalities, in a tree-like structure. The following is an example output:\n+\n+```\n+$ jnativescan --class-path app.jar\n+app.jar (ALL-UNNAMED):\n+  foo.Main:\n+    foo.Main::main(String[])void references restricted methods:\n+      java.lang.foreign.MemorySegment::reinterpret(long)MemorySegment\n+    foo.Main::nativeMethod()void is a native method declaration\n+```\n+\n+`app.jar (ALL-UNNAMED)` is the path to the jar file, with the module name in\n+parentheses behind it. Since in this case the jar file appears on the class\n+path, `ALL-UNNAMED` is printed to indicate the unnamed module. The second line\n+of the output, `foo.Main`, indicates that methods using native functionalities\n+were found in the `foo.Main` class. The next line:\n+\n+```\n+    foo.Main::main(String[])void references restricted methods:\n+```\n+\n+Indicates that the `main(String[])` method in the `foo.Main` class references\n+a restricted method, which is listed on the following line as:\n+\n+```\n+      java.lang.foreign.MemorySegment::reinterpret(long)MemorySegment\n+```\n+\n+Lastly, the text:\n+\n+```\n+    foo.Main::nativeMethod()void is a native method declaration\n+```\n+\n+Indicates that the `foo.Main` class contains a declaration of a `native`\n+method named `nativeMethod`.\n+\n+If we add `--print-native-access` to the example command line, we instead\n+get a list of the names of modules that contain accesses to native\n+functionalities:\n+\n+```\n+$ jnativescan --class-path app.jar --print-native-access\n+ALL-UNNAMED\n+```\n+\n+In this case the output consists of just `ALL-UNNAMED`, which indicates\n+a jar file on the class path, that is, in the unnamed module, contains an access\n+to native functionalities.\n","filename":"src\/jdk.jdeps\/share\/man\/jnativescan.md","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"},{"patch":"@@ -1,277 +0,0 @@\n-.\\\" Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JDB\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jdb - find and fix bugs in Java platform programs\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jdb\\f[R] [\\f[I]options\\f[R]] [\\f[I]classname\\f[R]]\n-[\\f[I]arguments\\f[R]]\n-.TP\n-\\f[I]options\\f[R]\n-This represents the \\f[V]jdb\\f[R] command-line options.\n-See \\f[B]Options for the jdb command\\f[R].\n-.TP\n-\\f[I]classname\\f[R]\n-This represents the name of the main class to debug.\n-.TP\n-\\f[I]arguments\\f[R]\n-This represents the arguments that are passed to the \\f[V]main()\\f[R]\n-method of the class.\n-.SH DESCRIPTION\n-.PP\n-The Java Debugger (JDB) is a simple command-line debugger for Java\n-classes.\n-The \\f[V]jdb\\f[R] command and its options call the JDB.\n-The \\f[V]jdb\\f[R] command demonstrates the Java Platform Debugger\n-Architecture and provides inspection and debugging of a local or remote\n-JVM.\n-.SH START A JDB SESSION\n-.PP\n-There are many ways to start a JDB session.\n-The most frequently used way is to have the JDB launch a new JVM with\n-the main class of the application to be debugged.\n-Do this by substituting the \\f[V]jdb\\f[R] command for the \\f[V]java\\f[R]\n-command in the command line.\n-For example, if your application\\[aq]s main class is \\f[V]MyClass\\f[R],\n-then use the following command to debug it under the JDB:\n-.RS\n-.PP\n-\\f[V]jdb MyClass\\f[R]\n-.RE\n-.PP\n-When started this way, the \\f[V]jdb\\f[R] command calls a second JVM with\n-the specified parameters, loads the specified class, and stops the JVM\n-before executing that class\\[aq]s first instruction.\n-.PP\n-Another way to use the \\f[V]jdb\\f[R] command is by attaching it to a JVM\n-that\\[aq]s already running.\n-Syntax for starting a JVM to which the \\f[V]jdb\\f[R] command attaches\n-when the JVM is running is as follows.\n-This loads in-process debugging libraries and specifies the kind of\n-connection to be made.\n-.RS\n-.PP\n-\\f[V]java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n MyClass\\f[R]\n-.RE\n-.PP\n-You can then attach the \\f[V]jdb\\f[R] command to the JVM with the\n-following command:\n-.RS\n-.PP\n-\\f[V]jdb -attach 8000\\f[R]\n-.RE\n-.PP\n-8000 is the address of the running JVM.\n-.PP\n-The \\f[V]MyClass\\f[R] argument isn\\[aq]t specified in the \\f[V]jdb\\f[R]\n-command line in this case because the \\f[V]jdb\\f[R] command is\n-connecting to an existing JVM instead of launching a new JVM.\n-.PP\n-There are many other ways to connect the debugger to a JVM, and all of\n-them are supported by the \\f[V]jdb\\f[R] command.\n-The Java Platform Debugger Architecture has additional documentation on\n-these connection options.\n-.SH BREAKPOINTS\n-.PP\n-Breakpoints can be set in the JDB at line numbers or at the first\n-instruction of a method, for example:\n-.IP \\[bu] 2\n-The command \\f[V]stop at MyClass:22\\f[R] sets a breakpoint at the first\n-instruction for line 22 of the source file containing \\f[V]MyClass\\f[R].\n-.IP \\[bu] 2\n-The command \\f[V]stop in java.lang.String.length\\f[R] sets a breakpoint\n-at the beginning of the method \\f[V]java.lang.String.length\\f[R].\n-.IP \\[bu] 2\n-The command \\f[V]stop in MyClass.<clinit>\\f[R] uses \\f[V]<clinit>\\f[R]\n-to identify the static initialization code for \\f[V]MyClass\\f[R].\n-.PP\n-When a method is overloaded, you must also specify its argument types so\n-that the proper method can be selected for a breakpoint.\n-For example, \\f[V]MyClass.myMethod(int,java.lang.String)\\f[R] or\n-\\f[V]MyClass.myMethod()\\f[R].\n-.PP\n-The \\f[V]clear\\f[R] command removes breakpoints using the following\n-syntax: \\f[V]clear MyClass:45\\f[R].\n-Using the \\f[V]clear\\f[R] or \\f[V]stop\\f[R] command with no argument\n-displays a list of all breakpoints currently set.\n-The \\f[V]cont\\f[R] command continues execution.\n-.SH STEPPING\n-.PP\n-The \\f[V]step\\f[R] command advances execution to the next line whether\n-it\\[aq]s in the current stack frame or a called method.\n-The \\f[V]next\\f[R] command advances execution to the next line in the\n-current stack frame.\n-.SH EXCEPTIONS\n-.PP\n-When an exception occurs for which there isn\\[aq]t a \\f[V]catch\\f[R]\n-statement anywhere in the throwing thread\\[aq]s call stack, the JVM\n-typically prints an exception trace and exits.\n-When running under the JDB, however, control returns to the JDB at the\n-offending throw.\n-You can then use the \\f[V]jdb\\f[R] command to diagnose the cause of the\n-exception.\n-.PP\n-Use the \\f[V]catch\\f[R] command to cause the debugged application to\n-stop at other thrown exceptions, for example:\n-\\f[V]catch java.io.FileNotFoundException\\f[R] or \\f[V]catch\\f[R]\n-\\f[V]mypackage.BigTroubleException\\f[R].\n-Any exception that\\[aq]s an instance of the specified class or subclass\n-stops the application at the point where the exception is thrown.\n-.PP\n-The \\f[V]ignore\\f[R] command negates the effect of an earlier\n-\\f[V]catch\\f[R] command.\n-The \\f[V]ignore\\f[R] command doesn\\[aq]t cause the debugged JVM to\n-ignore specific exceptions, but only to ignore the debugger.\n-.SH OPTIONS FOR THE JDB COMMAND\n-.PP\n-When you use the \\f[V]jdb\\f[R] command instead of the \\f[V]java\\f[R]\n-command on the command line, the \\f[V]jdb\\f[R] command accepts many of\n-the same options as the \\f[V]java\\f[R] command.\n-.PP\n-The following options are accepted by the \\f[V]jdb\\f[R] command:\n-.TP\n-\\f[V]-help\\f[R]\n-Displays a help message.\n-.TP\n-\\f[V]-sourcepath\\f[R] \\f[I]dir1\\f[R]\\f[V]:\\f[R]\\f[I]dir2\\f[R]\\f[V]:\\f[R]...\n-Uses the specified path to search for source files in the specified\n-path.\n-If this option is not specified, then use the default path of dot\n-(\\f[V].\\f[R]).\n-.TP\n-\\f[V]-attach\\f[R] \\f[I]address\\f[R]\n-Attaches the debugger to a running JVM with the default connection\n-mechanism.\n-.TP\n-\\f[V]-listen\\f[R] \\f[I]address\\f[R]\n-Waits for a running JVM to connect to the specified address with a\n-standard connector.\n-.TP\n-\\f[V]-listenany\\f[R]\n-Waits for a running JVM to connect at any available address using a\n-standard connector.\n-.TP\n-\\f[V]-launch\\f[R]\n-Starts the debugged application immediately upon startup of the\n-\\f[V]jdb\\f[R] command.\n-The \\f[V]-launch\\f[R] option removes the need for the \\f[V]run\\f[R]\n-command.\n-The debugged application is launched and then stopped just before the\n-initial application class is loaded.\n-At that point, you can set any necessary breakpoints and use the\n-\\f[V]cont\\f[R] command to continue execution.\n-.TP\n-\\f[V]-listconnectors\\f[R]\n-Lists the connectors available in this JVM.\n-.TP\n-\\f[V]-connect\\f[R] \\f[I]connector-name\\f[R]\\f[V]:\\f[R]\\f[I]name1\\f[R]\\f[V]=\\f[R]\\f[I]value1\\f[R]....\n-Connects to the target JVM with the named connector and listed argument\n-values.\n-.TP\n-\\f[V]-dbgtrace\\f[R] [\\f[I]flags\\f[R]]\n-Prints information for debugging the \\f[V]jdb\\f[R] command.\n-.TP\n-\\f[V]-tclient\\f[R]\n-Runs the application in the Java HotSpot VM client.\n-.TP\n-\\f[V]-trackallthreads\\f[R]\n-Track all threads as they are created, including virtual threads.\n-See \\f[B]Working With Virtual Threads\\f[R] below.\n-.TP\n-\\f[V]-tserver\\f[R]\n-Runs the application in the Java HotSpot VM server.\n-.TP\n-\\f[V]-J\\f[R]\\f[I]option\\f[R]\n-Passes \\f[I]option\\f[R] to the JDB JVM, where option is one of the\n-options described on the reference page for the Java application\n-launcher.\n-For example, \\f[V]-J-Xms48m\\f[R] sets the startup memory to 48 MB.\n-See \\f[I]Overview of Java Options\\f[R] in \\f[B]java\\f[R].\n-.PP\n-The following options are forwarded to the debuggee process:\n-.TP\n-\\f[V]-R\\f[R]\\f[I]option\\f[R]\n-Passes \\f[I]option\\f[R] to the debuggee JVM, where option is one of the\n-options described on the reference page for the Java application\n-launcher.\n-For example, \\f[V]-R-Xms48m\\f[R] sets the startup memory to 48 MB.\n-See \\f[I]Overview of Java Options\\f[R] in \\f[B]java\\f[R].\n-.TP\n-\\f[V]-v\\f[R] or \\f[V]-verbose\\f[R][\\f[V]:\\f[R]\\f[I]class\\f[R]|\\f[V]gc\\f[R]|\\f[V]jni\\f[R]]\n-Turns on the verbose mode.\n-.TP\n-\\f[V]-D\\f[R]\\f[I]name\\f[R]\\f[V]=\\f[R]\\f[I]value\\f[R]\n-Sets a system property.\n-.TP\n-\\f[V]-classpath\\f[R] \\f[I]dir\\f[R]\n-Lists directories separated by colons in which to look for classes.\n-.TP\n-\\f[V]-X\\f[R] \\f[I]option\\f[R]\n-A nonstandard target JVM option.\n-.PP\n-Other options are supported to provide alternate mechanisms for\n-connecting the debugger to the JVM that it\\[aq]s to debug.\n-.SH WORKING WITH VIRTUAL THREADS\n-.PP\n-Often virtual theads are created in such large numbers and frequency\n-that they can overwhelm a debugger.\n-For this reason by default JDB does not keep track of virtual threads as\n-they are created.\n-It will only keep track of virtual threads that an event has arrived on,\n-such as a breakpoint event.\n-The \\f[V]-trackallthreads\\f[R] option can be used to make JDB track all\n-virtual threads as they are created.\n-.PP\n-When JDB first connects, it requests a list of all known threads from\n-the Debug Agent.\n-By default the debug agent does not return any virtual threads in this\n-list, once again because the list could be so large that it overwhelms\n-the debugger.\n-The Debug Agent has an \\f[V]includevirtualthreads\\f[R] option that can\n-be enabled to change this behavior so all known virtual threads will be\n-included in the list.\n-The JDB \\f[V]-trackallthreads\\f[R] option will cause JDB to\n-automatically enable the Debug Agent\\[aq]s\n-\\f[V]includevirtualthreads\\f[R] option when JDB launches an application\n-to debug.\n-However, keep in mind that the Debug Agent may not know about any\n-virtual threads that were created before JDB attached to the debugged\n-application.\n","filename":"src\/jdk.jdi\/share\/man\/jdb.1","additions":0,"deletions":277,"binary":false,"changes":277,"status":"deleted"},{"patch":"@@ -0,0 +1,237 @@\n+---\n+# Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JDB(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jdb - find and fix bugs in Java platform programs\n+\n+## Synopsis\n+\n+`jdb` \\[*options*\\] \\[*classname*\\] \\[*arguments*\\]\n+\n+*options*\n+:   This represents the `jdb` command-line options. See [Options for the jdb\n+    command].\n+\n+*classname*\n+:   This represents the name of the main class to debug.\n+\n+*arguments*\n+:   This represents the arguments that are passed to the `main()` method of the\n+    class.\n+\n+## Description\n+\n+The Java Debugger (JDB) is a simple command-line debugger for Java classes. The\n+`jdb` command and its options call the JDB. The `jdb` command demonstrates the\n+Java Platform Debugger Architecture and provides inspection and debugging of a\n+local or remote JVM.\n+\n+## Start a JDB Session\n+\n+There are many ways to start a JDB session. The most frequently used way is to\n+have the JDB launch a new JVM with the main class of the application to be\n+debugged. Do this by substituting the `jdb` command for the `java` command in\n+the command line. For example, if your application's main class is `MyClass`,\n+then use the following command to debug it under the JDB:\n+\n+>   `jdb MyClass`\n+\n+When started this way, the `jdb` command calls a second JVM with the specified\n+parameters, loads the specified class, and stops the JVM before executing that\n+class's first instruction.\n+\n+Another way to use the `jdb` command is by attaching it to a JVM that's already\n+running. Syntax for starting a JVM to which the `jdb` command attaches when the\n+JVM is running is as follows. This loads in-process debugging libraries and\n+specifies the kind of connection to be made.\n+\n+>   `java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n MyClass`\n+\n+You can then attach the `jdb` command to the JVM with the following command:\n+\n+>   `jdb -attach 8000`\n+\n+8000 is the address of the running JVM.\n+\n+The `MyClass` argument isn't specified in the `jdb` command line in this case\n+because the `jdb` command is connecting to an existing JVM instead of launching\n+a new JVM.\n+\n+There are many other ways to connect the debugger to a JVM, and all of them are\n+supported by the `jdb` command. The Java Platform Debugger Architecture has\n+additional documentation on these connection options.\n+\n+## Breakpoints\n+\n+Breakpoints can be set in the JDB at line numbers or at the first instruction\n+of a method, for example:\n+\n+-   The command `stop at MyClass:22` sets a breakpoint at the first instruction\n+    for line 22 of the source file containing `MyClass`.\n+\n+-   The command `stop in java.lang.String.length` sets a breakpoint at the\n+    beginning of the method `java.lang.String.length`.\n+\n+-   The command `stop in MyClass.<clinit>` uses `<clinit>` to identify the\n+    static initialization code for `MyClass`.\n+\n+When a method is overloaded, you must also specify its argument types so that\n+the proper method can be selected for a breakpoint. For example,\n+`MyClass.myMethod(int,java.lang.String)` or `MyClass.myMethod()`.\n+\n+The `clear` command removes breakpoints using the following syntax:\n+`clear MyClass:45`. Using the `clear` or `stop` command with no argument\n+displays a list of all breakpoints currently set. The `cont` command continues\n+execution.\n+\n+## Stepping\n+\n+The `step` command advances execution to the next line whether it's in the\n+current stack frame or a called method. The `next` command advances execution\n+to the next line in the current stack frame.\n+\n+## Exceptions\n+\n+When an exception occurs for which there isn't a `catch` statement anywhere in\n+the throwing thread's call stack, the JVM typically prints an exception trace\n+and exits. When running under the JDB, however, control returns to the JDB at\n+the offending throw. You can then use the `jdb` command to diagnose the cause\n+of the exception.\n+\n+Use the `catch` command to cause the debugged application to stop at other\n+thrown exceptions, for example: `catch java.io.FileNotFoundException` or\n+`catch` `mypackage.BigTroubleException`. Any exception that's an instance of\n+the specified class or subclass stops the application at the point where the\n+exception is thrown.\n+\n+The `ignore` command negates the effect of an earlier `catch` command. The\n+`ignore` command doesn't cause the debugged JVM to ignore specific exceptions,\n+but only to ignore the debugger.\n+\n+## Options for the jdb command\n+\n+When you use the `jdb` command instead of the `java` command on the command\n+line, the `jdb` command accepts many of the same options as the `java`\n+command.\n+\n+The following options are accepted by the `jdb` command:\n+\n+`-help`\n+:   Displays a help message.\n+\n+`-sourcepath` *dir1*`:`*dir2*`:`...\n+:   Uses the specified path to search for source files in the specified path.\n+    If this option is not specified, then use the default path of dot (`.`).\n+\n+`-attach` *address*\n+:   Attaches the debugger to a running JVM with the default connection\n+    mechanism.\n+\n+`-listen` *address*\n+:   Waits for a running JVM to connect to the specified address with a standard\n+    connector.\n+\n+`-listenany`\n+:   Waits for a running JVM to connect at any available address using a\n+    standard connector.\n+\n+`-launch`\n+:   Starts the debugged application immediately upon startup of the `jdb`\n+    command. The `-launch` option removes the need for the `run` command. The\n+    debugged application is launched and then stopped just before the initial\n+    application class is loaded. At that point, you can set any necessary\n+    breakpoints and use the `cont` command to continue execution.\n+\n+`-listconnectors`\n+:   Lists the connectors available in this JVM.\n+\n+`-connect` *connector-name*`:`*name1*`=`*value1*....\n+:   Connects to the target JVM with the named connector and listed argument\n+    values.\n+\n+`-dbgtrace` \\[*flags*\\]\n+:   Prints information for debugging the `jdb` command.\n+\n+`-tclient`\n+:   Runs the application in the Java HotSpot VM client.\n+\n+`-trackallthreads`\n+:   Track all threads as they are created, including virtual threads.\n+    See [Working With Virtual Threads](#working-with-virtual-threads) below.\n+\n+`-tserver`\n+:   Runs the application in the Java HotSpot VM server.\n+\n+`-J`*option*\n+:   Passes *option* to the JDB JVM, where option is one of the options described on\n+    the reference page for the Java application launcher. For example,\n+    `-J-Xms48m` sets the startup memory to 48 MB. See *Overview of Java\n+    Options* in [java](java.html).\n+\n+The following options are forwarded to the debuggee process:\n+\n+`-R`*option*\n+:   Passes *option* to the debuggee JVM, where option is one of the options described on\n+    the reference page for the Java application launcher. For example,\n+    `-R-Xms48m` sets the startup memory to 48 MB. See *Overview of Java\n+    Options* in [java](java.html).\n+\n+`-v` or `-verbose`\\[`:`*class*\\|`gc`\\|`jni`\\]\n+:   Turns on the verbose mode.\n+\n+`-D`*name*`=`*value*\n+:   Sets a system property.\n+\n+`-classpath` *dir*\n+:   Lists directories separated by colons in which to look for classes.\n+\n+`-X` *option*\n+:   A nonstandard target JVM option.\n+\n+Other options are supported to provide alternate mechanisms for connecting the\n+debugger to the JVM that it's to debug.\n+\n+## Working With Virtual Threads\n+\n+Often virtual theads are created in such large numbers and frequency that they\n+can overwhelm a debugger. For this reason by default JDB does not keep track\n+of virtual threads as they are created. It will only keep track of virtual\n+threads that an event has arrived on, such as a breakpoint event. The\n+`-trackallthreads` option can be used to make JDB track all virtual threads\n+as they are created.\n+\n+When JDB first connects, it requests a list of all known threads from the Debug Agent.\n+By default the debug agent does not return any virtual threads in this list, once\n+again because the list could be so large that it overwhelms the debugger. The\n+Debug Agent has an `includevirtualthreads` option that can be enabled to change\n+this behavior so all known virtual threads will be included in the list. The\n+JDB `-trackallthreads` option will cause JDB to automatically enable the Debug Agent's\n+`includevirtualthreads` option when JDB launches an application to debug. However, keep in mind\n+that the Debug Agent may not know about any virtual threads that were created\n+before JDB attached to the debugged application.\n","filename":"src\/jdk.jdi\/share\/man\/jdb.md","additions":237,"deletions":0,"binary":false,"changes":237,"status":"added"},{"patch":"@@ -1,438 +0,0 @@\n-.\\\" Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JFR\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jfr - print and manipulate Flight Recorder files\n-.SH SYNOPSIS\n-.PP\n-To print the contents of a flight recording to standard out:\n-.PP\n-\\f[V]jfr\\f[R] \\f[V]print\\f[R] [\\f[I]options\\f[R]] \\f[I]file\\f[R]\n-.PP\n-To display aggregated event data on standard out:\n-.PP\n-\\f[V]jfr\\f[R] \\f[V]view\\f[R] [\\f[I]options\\f[R]] \\f[I]file\\f[R]\n-.PP\n-To configure a .jfc settings file:\n-.PP\n-\\f[V]jfr\\f[R] \\f[V]configure\\f[R] [\\f[I]options\\f[R]]\n-.PP\n-To print metadata information about flight recording events:\n-.PP\n-\\f[V]jfr\\f[R] \\f[V]metadata\\f[R] [\\f[I]file\\f[R]]\n-.PP\n-To view the summary statistics for a flight recording file:\n-.PP\n-\\f[V]jfr\\f[R] \\f[V]summary\\f[R] \\f[I]file\\f[R]\n-.PP\n-To remove events from a flight recording file:\n-.PP\n-\\f[V]jfr\\f[R] \\f[V]scrub\\f[R] [\\f[I]options\\f[R]] \\f[I]file\\f[R]\n-.PP\n-To assemble chunk files into a flight recording file:\n-.PP\n-\\f[V]jfr\\f[R] \\f[V]assemble\\f[R] \\f[I]repository\\f[R] \\f[I]file\\f[R]\n-.PP\n-To disassemble a flight recording file into chunk files:\n-.PP\n-\\f[V]jfr\\f[R] \\f[V]disassmble\\f[R] [\\f[I]options\\f[R]] \\f[I]file\\f[R]\n-.TP\n-\\f[I]options\\f[R]\n-Optional: Specifies command-line options separated by spaces.\n-See the individual subcomponent sections for descriptions of the\n-available options.\n-.TP\n-\\f[I]file\\f[R]\n-Specifies the name of the target flight recording file (\\f[V].jfr\\f[R]).\n-.TP\n-\\f[I]repository\\f[R]\n-Specifies the location of the chunk files which are to be assembled into\n-a flight recording.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jfr\\f[R] command provides a tool for interacting with flight\n-recorder files (\\f[V].jfr\\f[R]).\n-The main function is to filter, summarize and output flight recording\n-files into human readable format.\n-There is also support for scrubbing, merging and splitting recording\n-files.\n-.PP\n-Flight recording files are created and saved as binary formatted files.\n-Having a tool that can extract the contents from a flight recording and\n-manipulate the contents and translate them into human readable format\n-helps developers to debug performance issues with Java applications.\n-.SS Subcommands\n-.PP\n-The \\f[V]jfr\\f[R] command has several subcommands:\n-.IP \\[bu] 2\n-\\f[V]print\\f[R]\n-.IP \\[bu] 2\n-\\f[V]view\\f[R]\n-.IP \\[bu] 2\n-\\f[V]configure\\f[R]\n-.IP \\[bu] 2\n-\\f[V]metadata\\f[R]\n-.IP \\[bu] 2\n-\\f[V]summary\\f[R]\n-.IP \\[bu] 2\n-\\f[V]scrub\\f[R]\n-.IP \\[bu] 2\n-\\f[V]assemble\\f[R]\n-.IP \\[bu] 2\n-\\f[V]disassemble\\f[R]\n-.SS \\f[V]jfr print\\f[R] subcommand\n-.PP\n-Use \\f[V]jfr print\\f[R] to print the contents of a flight recording file\n-to standard out.\n-.PP\n-The syntax is:\n-.PP\n-\\f[V]jfr print\\f[R] [\\f[V]--xml\\f[R]|\\f[V]--json\\f[R]]\n-[\\f[V]--categories\\f[R] <\\f[I]filters\\f[R]>] [\\f[V]--events\\f[R]\n-<\\f[I]filters\\f[R]>] [\\f[V]--stack-depth\\f[R] <\\f[I]depth\\f[R]>]\n-<\\f[I]file\\f[R]>\n-.PP\n-where:\n-.TP\n-\\f[V]--xml\\f[R]\n-Print the recording in XML format.\n-.TP\n-\\f[V]--json\\f[R]\n-Print the recording in JSON format.\n-.TP\n-\\f[V]--categories\\f[R] <\\f[I]filters\\f[R]>\n-Select events matching a category name.\n-The filter is a comma-separated list of names, simple and\/or qualified,\n-and\/or quoted glob patterns.\n-.TP\n-\\f[V]--events\\f[R] <\\f[I]filters\\f[R]>\n-Select events matching an event name.\n-The filter is a comma-separated list of names, simple and\/or qualified,\n-and\/or quoted glob patterns.\n-.TP\n-\\f[V]--stack-depth\\f[R] <\\f[I]depth\\f[R]>\n-Number of frames in stack traces, by default 5.\n-.TP\n-<\\f[I]file\\f[R]>\n-Location of the recording file (\\f[V].jfr\\f[R])\n-.PP\n-The default format for printing the contents of the flight recording\n-file is human readable form unless either \\f[V]xml\\f[R] or\n-\\f[V]json\\f[R] is specified.\n-These options provide machine-readable output that can be further parsed\n-or processed by user created scripts.\n-.PP\n-Use \\f[V]jfr --help print\\f[R] to see example usage of filters.\n-.PP\n-To reduce the amount of data displayed, it is possible to filter out\n-events or categories of events.\n-The filter operates on the symbolic name of an event, set by using the\n-\\f[V]\\[at]Name\\f[R] annotation, or the category name, set by using the\n-\\f[V]\\[at]Category\\f[R] annotation.\n-If multiple filters are used, events from both filters will be included.\n-If no filter is used, all the events will be printed.\n-If a combination of a category filter and event filter is used, the\n-selected events will be the union of the two filters.\n-.PP\n-For example, to show all GC events and the CPULoad event, the following\n-command could be used:\n-.PP\n-\\f[V]jfr print --categories GC --events CPULoad recording.jfr\\f[R]\n-.PP\n-Event values are formatted according to the content types that are being\n-used.\n-For example, a field with the \\f[V]jdk.jfr.Percentage\\f[R] annotation\n-that has the value 0.52 is formatted as 52%.\n-.PP\n-Stack traces are by default truncated to 5 frames, but the number can be\n-increased\/decreased using the \\f[V]--stack-depth\\f[R] command-line\n-option.\n-.SS \\f[V]jfr view\\f[R] subcommand\n-.PP\n-Use \\f[V]jfr view\\f[R] to aggregate and display event data on standard\n-out.\n-.PP\n-The syntax is:\n-.PP\n-\\f[V]jfr view\\f[R] [\\f[V]--verbose\\f[R]] [\\f[V]--width\\f[R]\n-<\\f[I]integer\\f[R]>] [\\f[V]--truncate\\f[R] <\\f[I]mode\\f[R]>]\n-[\\f[V]--cell-height\\f[R] <\\f[I]integer\\f[R]>] <\\f[I]view\\f[R]>\n-<\\f[I]file\\f[R]>\n-.PP\n-where:\n-.TP\n-\\f[V]--verbose\\f[R]\n-Displays the query that makes up the view.\n-.TP\n-\\f[V]--width\\f[R] <\\f[I]integer\\f[R]>\n-The width of the view in characters.\n-Default value depends on the view.\n-.TP\n-\\f[V]--truncate\\f[R] <\\f[I]mode\\f[R]>\n-How to truncate content that exceeds space in a table cell.\n-Mode can be \\[aq]beginning\\[aq] or \\[aq]end\\[aq].\n-Default value is \\[aq]end\\[aq].\n-.TP\n-\\f[V]--cell-height\\f[R] <\\f[I]integer\\f[R]>\n-Maximum number of rows in a table cell.\n-Default value depends on the view.\n-.TP\n-<\\f[I]view\\f[R]>\n-Name of the view or event type to display.\n-Use \\f[V]jfr --help view\\f[R] to see a list of available views.\n-.TP\n-<\\f[I]file\\f[R]>\n-Location of the recording file (.jfr)\n-.PP\n-The <\\f[I]view\\f[R]> parameter can be an event type name.\n-Use the \\f[V]jfr view types <file>\\f[R] to see a list.\n-To display all views, use \\f[V]jfr view all-views <file>\\f[R].\n-To display all events, use \\f[V]jfr view all-events <file>\\f[R].\n-.SS \\f[V]jfr configure\\f[R] subcommand\n-.PP\n-Use \\f[V]jfr configure\\f[R] to configure a .jfc settings file.\n-.PP\n-The syntax is:\n-.PP\n-\\f[V]jfr configure\\f[R] [--interactive] [--verbose] [--input ] [--output\n-] [option=value]* [event-setting=value]*\n-.TP\n-\\f[V]--interactive\\f[R]\n-Interactive mode where the configuration is determined by a set of\n-questions.\n-.TP\n-\\f[V]--verbose\\f[R]\n-Displays the modified settings.\n-.TP\n-\\f[V]--input\\f[R] <\\f[I]files\\f[R]>\n-A comma-separated list of .jfc files from which the new configuration is\n-based.\n-If no file is specified, the default file in the JDK is used\n-(default.jfc).\n-If \\[aq]none\\[aq] is specified, the new configuration starts empty.\n-.TP\n-\\f[V]--output\\f[R] <\\f[I]file\\f[R]>\n-The filename of the generated output file.\n-If not specified, the filename custom.jfc will be used.\n-.TP\n-\\f[I]option=value\\f[R]\n-The option value to modify.\n-To see available options, use \\f[V]jfr help configure\\f[R]\n-.TP\n-\\f[I]event-setting=value\\f[R]\n-The event setting value to modify.\n-Use the form:\n-<\\f[I]event-name\\f[R]>#<\\f[I]setting-name\\f[R]>=<\\f[I]value\\f[R]> To add\n-a new event setting, prefix the event name with \\[aq]+\\[aq].\n-.PP\n-The whitespace delimiter can be omitted for timespan values, i.e.\n-20ms.\n-For more information about the settings syntax, see Javadoc of the\n-jdk.jfr package.\n-.SS \\f[V]jfr metadata\\f[R] subcommand\n-.PP\n-Use \\f[V]jfr metadata\\f[R] to display information about events, such as\n-event names, categories and field layout within a flight recording file.\n-.PP\n-The syntax is:\n-.PP\n-\\f[V]jfr metadata\\f[R] [--categories ] [--events ] []\n-.TP\n-\\f[V]--categories\\f[R] <\\f[I]filter\\f[R]>\n-Select events matching a category name.\n-The filter is a comma-separated list of names, simple and\/or qualified,\n-and\/or quoted glob patterns.\n-.TP\n-\\f[V]--events\\f[R] <\\f[I]filter\\f[R]>\n-Select events matching an event name.\n-The filter is a comma-separated list of names, simple and\/or qualified,\n-and\/or quoted glob patterns.\n-.TP\n-<\\f[I]file\\f[R]>\n-Location of the recording file (.jfr)\n-.PP\n-If the parameter is omitted, metadata from the JDK where the\n-\\[aq]jfr\\[aq] tool is located will be used.\n-.SS \\f[V]jfr summary\\f[R] subcommand\n-.PP\n-Use \\f[V]jfr summary\\f[R] to print statistics for a recording.\n-For example, a summary can illustrate the number of recorded events and\n-how much disk space they used.\n-This is useful for troubleshooting and understanding the impact of event\n-settings.\n-.PP\n-The syntax is:\n-.PP\n-\\f[V]jfr summary\\f[R] <\\f[I]file\\f[R]>\n-.PP\n-where:\n-.TP\n-<\\f[I]file\\f[R]>\n-Location of the flight recording file (\\f[V].jfr\\f[R])\n-.SS \\f[V]jfr scrub\\f[R] subcommand\n-.PP\n-Use \\f[V]jfr scrub\\f[R] to remove sensitive contents from a file or to\n-reduce its size.\n-.PP\n-The syntax is:\n-.PP\n-\\f[V]jfr scrub\\f[R] [--include-events <\\f[I]filter\\f[R]>]\n-[--exclude-events <\\f[I]filter\\f[R]>] [--include-categories\n-<\\f[I]filter\\f[R]>] [--exclude-categories <\\f[I]filter\\f[R]>]\n-[--include-threads <\\f[I]filter\\f[R]>] [--exclude-threads\n-<\\f[I]filter\\f[R]>] <\\f[I]input-file\\f[R]> [<\\f[I]output-file\\f[R]>]\n-.TP\n-\\f[V]--include-events\\f[R] <\\f[I]filter\\f[R]>\n-Select events matching an event name.\n-.TP\n-\\f[V]--exclude-events\\f[R] <\\f[I]filter\\f[R]>\n-Exclude events matching an event name.\n-.TP\n-\\f[V]--include-categories\\f[R] <\\f[I]filter\\f[R]>\n-Select events matching a category name.\n-.TP\n-\\f[V]--exclude-categories\\f[R] <\\f[I]filter\\f[R]>\n-Exclude events matching a category name.\n-.TP\n-\\f[V]--include-threads\\f[R] <\\f[I]filter\\f[R]>\n-Select events matching a thread name.\n-.TP\n-\\f[V]--exclude-threads\\f[R] <\\f[I]filter\\f[R]>\n-Exclude events matching a thread name.\n-.TP\n-<\\f[I]input-file\\f[R]>\n-The input file to read events from.\n-.TP\n-<\\f[I]output-file\\f[R]>\n-The output file to write filter events to.\n-If no file is specified, it will be written to the same path as the\n-input file, but with \\[dq]-scrubbed\\[dq] appended to the filename.\n-.PP\n-The filter is a comma-separated list of names, simple and\/or qualified,\n-and\/or quoted glob patterns.\n-If multiple filters are used, they are applied in the specified order.\n-.SS \\f[V]jfr assemble\\f[R] subcommand\n-.PP\n-Use jfr \\f[V]assemble\\f[R] to assemble chunk files into a recording\n-file.\n-.PP\n-The syntax is:\n-.PP\n-\\f[V]jfr assemble\\f[R] <\\f[I]repository\\f[R]> <\\f[I]file\\f[R]>\n-.PP\n-where:\n-.TP\n-<\\f[I]repository\\f[R]>\n-Directory where the repository containing chunk files is located.\n-.TP\n-<\\f[I]file\\f[R]>\n-Location of the flight recording file (\\f[V].jfr\\f[R]).\n-.PP\n-Flight recording information is written in chunks.\n-A chunk contains all of the information necessary for parsing.\n-A chunk typically contains events useful for troubleshooting.\n-If a JVM should crash, these chunks can be recovered and used to create\n-a flight recording file using this \\f[V]jfr assemble\\f[R] command.\n-These chunk files are concatenated in chronological order and chunk\n-files that are not finished (.part) are excluded.\n-.SS \\f[V]jfr disassemble\\f[R] subcommand\n-.PP\n-Use \\f[V]jfr disassemble\\f[R] to decompose a flight recording file into\n-its chunk file pieces.\n-.PP\n-The syntax is:\n-.PP\n-\\f[V]jfr disassemble\\f[R] [\\f[V]--max-chunks\\f[R] <\\f[I]chunks\\f[R]>]\n-[\\f[V]--output\\f[R] <\\f[I]directory\\f[R]>] <\\f[I]file\\f[R]>\n-.PP\n-where:\n-.TP\n-\\f[V]--output\\f[R] <\\f[I]directory\\f[R]>\n-The location to write the disassembled file, by default the current\n-directory\n-.TP\n-\\f[V]--max-chunks\\f[R] <\\f[I]chunks\\f[R]>\n-Maximum number of chunks per file, by default 5.\n-The chunk size varies, but is typically around 15 MB.\n-.TP\n-\\f[V]--max-size\\f[R] <\\f[I]size\\f[R]>\n-Maximum number of bytes per file.\n-.TP\n-<\\f[I]file\\f[R]>\n-Location of the flight recording file (\\f[V].jfr\\f[R])\n-.PP\n-This function can be useful for repairing a broken file by removing the\n-faulty chunk.\n-It can also be used to reduce the size of a file that is too large to\n-transfer.\n-The resulting chunk files are named \\f[V]myfile_1.jfr\\f[R],\n-\\f[V]myfile_2.jfr\\f[R], etc.\n-If needed, the resulting file names will be padded with zeros to\n-preserve chronological order.\n-For example, the chunk file name is \\f[V]myfile_001.jfr\\f[R] if the\n-recording consists of more than 100 chunks.\n-.SS jfr version and help subcommands\n-.PP\n-Use \\f[V]jfr --version\\f[R] or \\f[V]jfr version\\f[R] to view the version\n-string information for this jfr command.\n-.PP\n-To get help on any of the jfr subcommands, use:\n-.PP\n-\\f[V]jfr <--help|help>\\f[R] [\\f[I]subcommand\\f[R]]\n-.PP\n-where:\n-.PP\n-[\\f[I]subcommand\\f[R]] is any of:\n-.IP \\[bu] 2\n-\\f[V]print\\f[R]\n-.IP \\[bu] 2\n-\\f[V]view\\f[R]\n-.IP \\[bu] 2\n-\\f[V]configure\\f[R]\n-.IP \\[bu] 2\n-\\f[V]metadata\\f[R]\n-.IP \\[bu] 2\n-\\f[V]summary\\f[R]\n-.IP \\[bu] 2\n-\\f[V]scrub\\f[R]\n-.IP \\[bu] 2\n-\\f[V]assemble\\f[R]\n-.IP \\[bu] 2\n-\\f[V]disassemble\\f[R]\n","filename":"src\/jdk.jfr\/share\/man\/jfr.1","additions":0,"deletions":438,"binary":false,"changes":438,"status":"deleted"},{"patch":"@@ -0,0 +1,399 @@\n+---\n+# Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JFR(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jfr - print and manipulate Flight Recorder files\n+\n+## Synopsis\n+\n+To print the contents of a flight recording to standard out:\n+\n+`jfr` `print` \\[*options*\\] *file*\n+\n+To display aggregated event data on standard out:\n+\n+`jfr` `view` \\[*options*\\] *file*\n+\n+To configure a .jfc settings file:\n+\n+`jfr` `configure` \\[*options*\\]\n+\n+To print metadata information about flight recording events:\n+\n+`jfr` `metadata` \\[*file*\\]\n+\n+To view the summary statistics for a flight recording file:\n+\n+`jfr` `summary` *file*\n+\n+To remove events from  a flight recording file:\n+\n+`jfr` `scrub` \\[*options*\\] *file*\n+\n+To assemble chunk files into a flight recording file:\n+\n+`jfr` `assemble` *repository* *file*\n+\n+To disassemble a flight recording file into chunk files:\n+\n+`jfr` `disassmble` \\[*options*\\] *file*\n+\n+*options*\n+:   Optional: Specifies command-line options separated by spaces. See the\n+individual subcomponent sections for descriptions of the available options.\n+\n+*file*\n+:   Specifies the name of the target flight recording file (`.jfr`).\n+\n+*repository*\n+:   Specifies the location of the chunk files which are to be assembled into\n+a flight recording.\n+\n+## Description\n+\n+The `jfr` command provides a tool for interacting with flight recorder files\n+(`.jfr`). The main function is to filter, summarize and output flight\n+recording files into human readable format. There is also support for scrubbing,\n+merging and splitting recording files.\n+\n+Flight recording files are created and saved as binary formatted files. Having\n+a tool that can extract the contents from a flight recording and manipulate the\n+contents and translate them into human readable format helps developers to debug\n+performance issues with Java applications.\n+\n+### Subcommands\n+\n+The `jfr` command has several subcommands:\n+\n+- `print`\n+- `view`\n+- `configure`\n+- `metadata`\n+- `summary`\n+- `scrub`\n+- `assemble`\n+- `disassemble`\n+\n+#### `jfr print` subcommand\n+\n+Use `jfr print` to print the contents of a flight recording file to standard out.\n+\n+The syntax is:\n+\n+`jfr print` \\[`--xml`|`--json`\\]\n+           \\[`--categories` <*filters*>\\]\n+           \\[`--events` <*filters*>\\]\n+           \\[`--stack-depth` <*depth*>\\]\n+           <*file*>\n+\n+where:\n+\n+<a id=\"print-option-xml\">`--xml`<\/a>\n+: Print the recording in XML format.\n+\n+<a id=\"print-option-json\">`--json`<\/a>\n+: Print the recording in JSON format.\n+\n+<a id=\"print-option-categories\">`--categories` <*filters*><\/a>\n+: Select events matching a category name.\n+The filter is a comma-separated list of names,\n+simple and\/or qualified, and\/or quoted glob patterns.\n+\n+<a id=\"print-option-events\">`--events` <*filters*><\/a>\n+: Select events matching an event name.\n+The filter is a comma-separated list of names,\n+simple and\/or qualified, and\/or quoted glob patterns.\n+\n+<a id=\"print-option-stack-depth\">`--stack-depth` <*depth*><\/a>\n+: Number of frames in stack traces, by default 5.\n+\n+<a id=\"print-option-file\"><*file*><\/a>\n+: Location of the recording file (`.jfr`)\n+\n+The default format for printing the contents of the flight recording file is human\n+readable form unless either `xml` or `json` is specified. These options provide\n+machine-readable output that can be further parsed or processed by user created scripts.\n+\n+Use `jfr --help print` to see example usage of filters.\n+\n+To reduce the amount of data displayed, it is possible to filter out events or\n+categories of events. The filter operates on the symbolic name of an event,\n+set by using the `@Name` annotation, or the category name, set by using\n+the `@Category` annotation. If multiple filters are used, events from both\n+filters will be included. If no filter is used, all the events will be printed.\n+If a combination of a category filter and event filter is used, the selected events\n+will be the union of the two filters.\n+\n+For example, to show all GC events and the CPULoad event, the following command could be used:\n+\n+`jfr print --categories GC --events CPULoad recording.jfr`\n+\n+Event values are formatted according to the content types that are being used.\n+For example, a field with the `jdk.jfr.Percentage` annotation that has the value 0.52\n+is formatted as 52%.\n+\n+Stack traces are by default truncated to 5 frames, but the number can be\n+increased\/decreased using the `--stack-depth` command-line option.\n+\n+#### `jfr view` subcommand\n+\n+Use `jfr view` to aggregate and display event data on standard out.\n+\n+The syntax is:\n+\n+ `jfr view` \\[`--verbose`\\]\n+           \\[`--width` <*integer*>\\]\n+           \\[`--truncate` <*mode*>\\]\n+           \\[`--cell-height` <*integer*>\\]\n+            <*view*>\n+            <*file*>\n+\n+where:\n+\n+<a id=\"view-option-verbose\">`--verbose`<\/a>\n+: Displays the query that makes up the view.\n+\n+<a id=\"view-option-width\">`--width` <*integer*><\/a>\n+: The width of the view in characters. Default value depends on the view.\n+\n+<a id=\"view-option-truncate\">`--truncate` <*mode*><\/a>\n+: How to truncate content that exceeds space in a table cell.\n+Mode can be 'beginning' or 'end'. Default value is 'end'.\n+\n+<a id=\"view-option-cell-height\">`--cell-height` <*integer*><\/a>\n+: Maximum number of rows in a table cell. Default value depends on the view.\n+\n+<a id=\"view-option-view\"><*view*><\/a>\n+: Name of the view or event type to display. Use `jfr --help view` to see a\n+list of available views.\n+\n+<a id=\"view-option-file\"><*file*><\/a>\n+: Location of the recording file (.jfr)\n+\n+The <*view*> parameter can be an event type name. Use the `jfr view types <file>`\n+to see a list. To display all views, use `jfr view all-views <file>`. To display\n+all events, use `jfr view all-events <file>`.\n+\n+#### `jfr configure` subcommand\n+\n+Use `jfr configure` to configure a .jfc settings file.\n+\n+The syntax is:\n+\n+ `jfr configure` \\[--interactive\\] \\[--verbose\\]\n+               \\[--input <files>\\] [--output <file>\\]\n+               \\[option=value\\]* \\[event-setting=value\\]*\n+\n+<a id=\"configure-option-interactive\">`--interactive`<\/a>\n+: Interactive mode where the configuration is determined by a set of questions.\n+\n+<a id=\"configure-option-verbose\">`--verbose`<\/a>\n+: Displays the modified settings.\n+\n+<a id=\"configure-option-input\">`--input` <*files*><\/a>\n+: A comma-separated list of .jfc files from which the new configuration is\n+based. If no file is specified, the default file in the JDK is used\n+(default.jfc). If 'none' is specified, the new configuration starts empty.\n+\n+<a id=\"configure-option-output\">`--output` <*file*><\/a>\n+: The filename of the generated output file. If not specified, the filename\n+custom.jfc will be used.\n+\n+<a id=\"configure-option-value\">*option=value*<\/a>\n+: The option value to modify. To see available options,\n+use `jfr help configure`\n+\n+<a id=\"configure-option-event-setting\">*event-setting=value*<\/a>\n+: The event setting value to modify. Use the form:\n+  <*event-name*>#<*setting-name*>=<*value*>\n+To add a new event setting, prefix the event name with '+'.\n+\n+The whitespace delimiter can be omitted for timespan values, i.e. 20ms. For\n+more information about the settings syntax, see Javadoc of the jdk.jfr package.\n+\n+#### `jfr metadata` subcommand\n+\n+Use `jfr metadata` to display information about events, such as event\n+names, categories and field layout within a flight recording file.\n+\n+The syntax is:\n+\n+`jfr metadata` \\[--categories <filter>\\]\n+              \\[--events <filter>\\]\n+              \\[<file>\\]\n+\n+<a id=\"metadata-option-categories\">`--categories` <*filter*><\/a>\n+: Select events matching a category name. The filter is a comma-separated\n+list of names, simple and\/or qualified, and\/or quoted glob patterns.\n+\n+<a id=\"metadata-option-events\">`--events` <*filter*><\/a>\n+: Select events matching an event name. The filter is a comma-separated\n+list of names, simple and\/or qualified, and\/or quoted glob patterns.\n+\n+<a id=\"metadata-option-file\"><*file*><\/a>\n+: Location of the recording file (.jfr)\n+\n+If the <file> parameter is omitted, metadata from the JDK where\n+the 'jfr' tool is located will be used.\n+\n+#### `jfr summary` subcommand\n+\n+Use `jfr summary` to print statistics for a recording. For example, a summary can\n+illustrate the number of recorded events and how much disk space they used. This\n+is useful for troubleshooting and understanding the impact of event settings.\n+\n+The syntax is:\n+\n+`jfr summary` <*file*>\n+\n+where:\n+\n+<a id=\"summary-option-file\"><*file*><\/a>\n+: Location of the flight recording file (`.jfr`)\n+\n+#### `jfr scrub` subcommand\n+\n+Use `jfr scrub` to remove sensitive contents from a file or to reduce its size.\n+\n+The syntax is:\n+\n+`jfr scrub` \\[--include-events <*filter*>\\]\n+           \\[--exclude-events <*filter*>\\]\n+           \\[--include-categories <*filter*>\\]\n+           \\[--exclude-categories <*filter*>\\]\n+           \\[--include-threads <*filter*>\\]\n+           \\[--exclude-threads <*filter*>\\]\n+           <*input-file*>\n+           \\[<*output-file*>\\]\n+\n+<a id=\"scrub-option-include-events\">`--include-events` <*filter*><\/a>\n+: Select events matching an event name.\n+\n+<a id=\"scrub-option-exclude-events\">`--exclude-events` <*filter*><\/a>\n+: Exclude events matching an event name.\n+\n+<a id=\"scrub-option-include-categories\">`--include-categories` <*filter*><\/a>\n+: Select events matching a category name.\n+\n+<a id=\"scrub-option-exclude-categories\">`--exclude-categories` <*filter*><\/a>\n+: Exclude events matching a category name.\n+\n+<a id=\"scrub-option-include-threads\">`--include-threads` <*filter*><\/a>\n+: Select events matching a thread name.\n+\n+<a id=\"scrub-option-exclude-threads\">`--exclude-threads` <*filter*><\/a>\n+: Exclude events matching a thread name.\n+\n+<a id=\"scrub-option-input-file\"><*input-file*><\/a>\n+: The input file to read events from.\n+\n+<a id=\"scrub-option-output-file\"><*output-file*><\/a>\n+: The output file to write filter events to. If no file is specified,\n+it will be written to the same  path as the input file, but with\n+\"-scrubbed\" appended to the filename.\n+\n+The filter is a comma-separated list of names, simple and\/or qualified,\n+and\/or quoted glob patterns. If multiple filters are used, they\n+are applied in the specified order.\n+\n+#### `jfr assemble` subcommand\n+\n+Use jfr `assemble` to assemble chunk files into a recording file.\n+\n+The syntax is:\n+\n+`jfr assemble` <*repository*>\n+               <*file*>\n+\n+where:\n+\n+<a id=\"assemble-option-repository\"><*repository*><\/a>\n+: Directory where the repository containing chunk files is located.\n+\n+<a id=\"assemble-option-file\"><*file*><\/a>\n+: Location of the flight recording file (`.jfr`).\n+\n+Flight recording information is written in chunks. A chunk contains all of the information\n+necessary for parsing. A chunk typically contains events useful for troubleshooting.\n+If a JVM should crash, these chunks can be recovered and used to create a flight\n+recording file using this `jfr assemble` command. These chunk files are concatenated in\n+chronological order and chunk files that are not finished (.part) are excluded.\n+\n+#### `jfr disassemble` subcommand\n+\n+Use `jfr disassemble` to decompose a flight recording file into its chunk file pieces.\n+\n+The syntax is:\n+\n+`jfr disassemble` \\[`--max-chunks` <*chunks*>\\]\n+                  \\[`--output` <*directory*>\\]\n+                  <*file*>\n+\n+where:\n+\n+<a id=\"disassemble-option-output\">`--output` <*directory*><\/a>\n+: The location to write the disassembled file,\n+by default the current directory\n+\n+<a id=\"disassemble-option-max-chunks\">`--max-chunks` <*chunks*><\/a>\n+: Maximum number of chunks per file, by default 5.\n+The chunk size varies, but is typically around 15 MB.\n+\n+<a id=\"disassemble-option-max-size\">`--max-size` <*size*><\/a>\n+: Maximum number of bytes per file.\n+\n+<a id=\"disassemble-option-file\"><*file*><\/a>\n+: Location of the flight recording file (`.jfr`)\n+\n+This function can be useful for repairing a broken file by removing the faulty chunk.\n+It can also be used to reduce the size of a file that is too large to transfer.\n+The resulting chunk files are named `myfile_1.jfr`, `myfile_2.jfr`, etc. If needed, the\n+resulting file names will be padded with zeros to preserve chronological order. For example,\n+the chunk file name is `myfile_001.jfr` if the recording consists of more than 100 chunks.\n+\n+#### jfr version and help subcommands\n+\n+Use `jfr --version` or `jfr version` to view the version string information for this jfr command.\n+\n+To get help on any of the jfr subcommands, use:\n+\n+`jfr <--help|help>` \\[*subcommand*\\]\n+\n+where:\n+\n+\\[*subcommand*\\] is any of:\n+\n+- `print`\n+- `view`\n+- `configure`\n+- `metadata`\n+- `summary`\n+- `scrub`\n+- `assemble`\n+- `disassemble`\n","filename":"src\/jdk.jfr\/share\/man\/jfr.md","additions":399,"deletions":0,"binary":false,"changes":399,"status":"added"},{"patch":"@@ -1,409 +0,0 @@\n-.\\\" Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JLINK\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jlink - assemble and optimize a set of modules and their dependencies\n-into a custom runtime image\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jlink\\f[R] [\\f[I]options\\f[R]] \\f[V]--module-path\\f[R]\n-\\f[I]modulepath\\f[R] \\f[V]--add-modules\\f[R]\n-\\f[I]module\\f[R][,\\f[I]module\\f[R]...]\n-.TP\n-\\f[I]options\\f[R]\n-Command-line options separated by spaces.\n-See \\f[B]jlink Options\\f[R].\n-.TP\n-\\f[I]modulepath\\f[R]\n-The path where the \\f[V]jlink\\f[R] tool discovers observable modules.\n-These modules can be modular JAR files, JMOD files, or exploded modules.\n-.TP\n-\\f[I]module\\f[R]\n-The names of the modules to add to the runtime image.\n-The \\f[V]jlink\\f[R] tool adds these modules and their transitive\n-dependencies.\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jlink\\f[R] tool links a set of modules, along with their\n-transitive dependences, to create a custom runtime image.\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-Developers are responsible for updating their custom runtime images.\n-.SH JLINK OPTIONS\n-.TP\n-\\f[V]--add-modules\\f[R] \\f[I]mod\\f[R][\\f[V],\\f[R]\\f[I]mod\\f[R]...]\n-Adds the named modules, \\f[I]mod\\f[R], to the default set of root\n-modules.\n-The default set of root modules is empty.\n-.TP\n-\\f[V]--bind-services\\f[R]\n-Link service provider modules and their dependencies.\n-.TP\n-\\f[V]-c ={0|1|2}\\f[R] or \\f[V]--compress={0|1|2}\\f[R]\n-Enable compression of resources:\n-.RS\n-.IP \\[bu] 2\n-\\f[V]0\\f[R]: No compression\n-.IP \\[bu] 2\n-\\f[V]1\\f[R]: Constant string sharing\n-.IP \\[bu] 2\n-\\f[V]2\\f[R]: ZIP\n-.RE\n-.TP\n-\\f[V]--disable-plugin\\f[R] \\f[I]pluginname\\f[R]\n-Disables the specified plug-in.\n-See \\f[B]jlink Plug-ins\\f[R] for the list of supported plug-ins.\n-.TP\n-\\f[V]--endian\\f[R] {\\f[V]little\\f[R]|\\f[V]big\\f[R]}\n-Specifies the byte order of the generated image.\n-The default value is the format of your system\\[aq]s architecture.\n-.TP\n-\\f[V]-h\\f[R] or \\f[V]--help\\f[R]\n-Prints the help message.\n-.TP\n-\\f[V]--ignore-signing-information\\f[R]\n-Suppresses a fatal error when signed modular JARs are linked in the\n-runtime image.\n-The signature-related files of the signed modular JARs aren\\[aq]t copied\n-to the runtime image.\n-.TP\n-\\f[V]--launcher\\f[R] \\f[I]command\\f[R]\\f[V]=\\f[R]\\f[I]module\\f[R] or \\f[V]--launcher\\f[R] \\f[I]command\\f[R]\\f[V]=\\f[R]\\f[I]module\\f[R]\\f[V]\/\\f[R]\\f[I]main\\f[R]\n-Specifies the launcher command name for the module or the command name\n-for the module and main class (the module and the main class names are\n-separated by a slash (\\f[V]\/\\f[R])).\n-.TP\n-\\f[V]--limit-modules\\f[R] \\f[I]mod\\f[R][\\f[V],\\f[R]\\f[I]mod\\f[R]...]\n-Limits the universe of observable modules to those in the transitive\n-closure of the named modules, \\f[V]mod\\f[R], plus the main module, if\n-any, plus any further modules specified in the \\f[V]--add-modules\\f[R]\n-option.\n-.TP\n-\\f[V]--list-plugins\\f[R]\n-Lists available plug-ins, which you can access through command-line\n-options; see \\f[B]jlink Plug-ins\\f[R].\n-.TP\n-\\f[V]-p\\f[R] or \\f[V]--module-path\\f[R] \\f[I]modulepath\\f[R]\n-Specifies the module path.\n-.RS\n-.PP\n-If this option is not specified, then the default module path is\n-\\f[V]$JAVA_HOME\/jmods\\f[R].\n-This directory contains the \\f[V]java.base\\f[R] module and the other\n-standard and JDK modules.\n-If this option is specified but the \\f[V]java.base\\f[R] module cannot be\n-resolved from it, then the \\f[V]jlink\\f[R] command appends\n-\\f[V]$JAVA_HOME\/jmods\\f[R] to the module path.\n-.RE\n-.TP\n-\\f[V]--no-header-files\\f[R]\n-Excludes header files.\n-.TP\n-\\f[V]--no-man-pages\\f[R]\n-Excludes man pages.\n-.TP\n-\\f[V]--output\\f[R] \\f[I]path\\f[R]\n-Specifies the location of the generated runtime image.\n-.TP\n-\\f[V]--save-opts\\f[R] \\f[I]filename\\f[R]\n-Saves \\f[V]jlink\\f[R] options in the specified file.\n-.TP\n-\\f[V]--suggest-providers\\f[R] [\\f[I]name\\f[R]\\f[V],\\f[R] ...]\n-Suggest providers that implement the given service types from the module\n-path.\n-.TP\n-\\f[V]--version\\f[R]\n-Prints version information.\n-.TP\n-\\f[V]\\[at]\\f[R]\\f[I]filename\\f[R]\n-Reads options from the specified file.\n-.RS\n-.PP\n-An options file is a text file that contains the options and values that\n-you would typically enter in a command prompt.\n-Options may appear on one line or on several lines.\n-You may not specify environment variables for path names.\n-You may comment out lines by prefixing a hash symbol (\\f[V]#\\f[R]) to\n-the beginning of the line.\n-.PP\n-The following is an example of an options file for the \\f[V]jlink\\f[R]\n-command:\n-.IP\n-.nf\n-\\f[CB]\n-#Wed Dec 07 00:40:19 EST 2016\n---module-path mlib\n---add-modules com.greetings\n---output greetingsapp\n-\\f[R]\n-.fi\n-.RE\n-.SH JLINK PLUG-INS\n-.PP\n-\\f[B]Note:\\f[R]\n-.PP\n-Plug-ins not listed in this section aren\\[aq]t supported and are subject\n-to change.\n-.PP\n-For plug-in options that require a \\f[I]pattern-list\\f[R], the value is\n-a comma-separated list of elements, with each element using one the\n-following forms:\n-.IP \\[bu] 2\n-\\f[I]glob-pattern\\f[R]\n-.IP \\[bu] 2\n-\\f[V]glob:\\f[R]\\f[I]glob-pattern\\f[R]\n-.IP \\[bu] 2\n-\\f[V]regex:\\f[R]\\f[I]regex-pattern\\f[R]\n-.IP \\[bu] 2\n-\\f[V]\\[at]\\f[R]\\f[I]filename\\f[R]\n-.RS 2\n-.IP \\[bu] 2\n-\\f[I]filename\\f[R] is the name of a file that contains patterns to be\n-used, one pattern per line.\n-.RE\n-.PP\n-For a complete list of all available plug-ins, run the command\n-\\f[V]jlink --list-plugins\\f[R].\n-.SS Plugin \\f[V]compress\\f[R]\n-.TP\n-Options\n-\\f[V]--compress=\\f[R]{\\f[V]0\\f[R]|\\f[V]1\\f[R]|\\f[V]2\\f[R]}[\\f[V]:filter=\\f[R]\\f[I]pattern-list\\f[R]]\n-.TP\n-Description\n-Compresses all resources in the output image.\n-.RS\n-.IP \\[bu] 2\n-Level 0: No compression\n-.IP \\[bu] 2\n-Level 1: Constant string sharing\n-.IP \\[bu] 2\n-Level 2: ZIP\n-.PP\n-An optional \\f[I]pattern-list\\f[R] filter can be specified to list the\n-pattern of files to include.\n-.RE\n-.SS Plugin \\f[V]include-locales\\f[R]\n-.TP\n-Options\n-\\f[V]--include-locales=\\f[R]\\f[I]langtag\\f[R][\\f[V],\\f[R]\\f[I]langtag\\f[R]]*\n-.TP\n-Description\n-Includes the list of locales where \\f[I]langtag\\f[R] is a BCP 47\n-language tag.\n-This option supports locale matching as defined in RFC 4647.\n-Ensure that you add the module jdk.localedata when using this option.\n-.RS\n-.PP\n-Example:\n-.RS\n-.PP\n-\\f[V]--add-modules jdk.localedata --include-locales=en,ja,*-IN\\f[R]\n-.RE\n-.RE\n-.SS Plugin \\f[V]order-resources\\f[R]\n-.TP\n-Options\n-\\f[V]--order-resources=\\f[R]\\f[I]pattern-list\\f[R]\n-.TP\n-Description\n-Orders the specified paths in priority order.\n-If \\f[V]\\[at]\\f[R]\\f[I]filename\\f[R] is specified, then each line in\n-\\f[I]pattern-list\\f[R] must be an exact match for the paths to be\n-ordered.\n-.RS\n-.PP\n-Example:\n-.RS\n-.PP\n-\\f[V]--order-resources=\/module-info.class,\\[at]classlist,\/java.base\/java\/lang\/\\f[R]\n-.RE\n-.RE\n-.SS Plugin \\f[V]strip-debug\\f[R]\n-.TP\n-Options\n-\\f[V]--strip-debug\\f[R]\n-.TP\n-Description\n-Strips debug information from the output image.\n-.SS Plugin \\f[V]generate-cds-archive\\f[R]\n-.TP\n-Options\n-\\f[V]--generate-cds-archive\\f[R]\n-.TP\n-Description\n-Generate CDS archive if the runtime image supports the CDS feature.\n-.SH JLINK EXAMPLES\n-.PP\n-The following command creates a runtime image in the directory\n-\\f[V]greetingsapp\\f[R].\n-This command links the module \\f[V]com.greetings\\f[R], whose module\n-definition is contained in the directory \\f[V]mlib\\f[R].\n-.IP\n-.nf\n-\\f[CB]\n-jlink --module-path mlib --add-modules com.greetings --output greetingsapp\n-\\f[R]\n-.fi\n-.PP\n-The following command lists the modules in the runtime image\n-\\f[V]greetingsapp\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-greetingsapp\/bin\/java --list-modules\n-com.greetings\n-java.base\\[at]11\n-java.logging\\[at]11\n-org.astro\\[at]1.0\n-\\f[R]\n-.fi\n-.PP\n-The following command creates a runtime image in the directory\n-compressedrt that\\[aq]s stripped of debug symbols, uses compression to\n-reduce space, and includes French language locale information:\n-.IP\n-.nf\n-\\f[CB]\n-jlink --add-modules jdk.localedata --strip-debug --compress=2 --include-locales=fr --output compressedrt\n-\\f[R]\n-.fi\n-.PP\n-The following example compares the size of the runtime image\n-\\f[V]compressedrt\\f[R] with \\f[V]fr_rt\\f[R], which isn\\[aq]t stripped of\n-debug symbols and doesn\\[aq]t use compression:\n-.IP\n-.nf\n-\\f[CB]\n-jlink --add-modules jdk.localedata --include-locales=fr --output fr_rt\n-\n-du -sh .\/compressedrt .\/fr_rt\n-23M     .\/compressedrt\n-36M     .\/fr_rt\n-\\f[R]\n-.fi\n-.PP\n-The following example lists the providers that implement\n-\\f[V]java.security.Provider\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-jlink --suggest-providers java.security.Provider\n-\n-Suggested providers:\n-  java.naming provides java.security.Provider used by java.base\n-  java.security.jgss provides java.security.Provider used by java.base\n-  java.security.sasl provides java.security.Provider used by java.base\n-  java.smartcardio provides java.security.Provider used by java.base\n-  java.xml.crypto provides java.security.Provider used by java.base\n-  jdk.crypto.cryptoki provides java.security.Provider used by java.base\n-  jdk.crypto.ec provides java.security.Provider used by java.base\n-  jdk.crypto.mscapi provides java.security.Provider used by java.base\n-  jdk.security.jgss provides java.security.Provider used by java.base\n-\\f[R]\n-.fi\n-.PP\n-The following example creates a custom runtime image named\n-\\f[V]mybuild\\f[R] that includes only \\f[V]java.naming\\f[R] and\n-\\f[V]jdk.crypto.cryptoki\\f[R] and their dependencies but no other\n-providers.\n-Note that these dependencies must exist in the module path:\n-.IP\n-.nf\n-\\f[CB]\n-jlink --add-modules java.naming,jdk.crypto.cryptoki --output mybuild\n-\\f[R]\n-.fi\n-.PP\n-The following command is similar to the one that creates a runtime image\n-named \\f[V]greetingsapp\\f[R], except that it will link the modules\n-resolved from root modules with service binding; see the\n-\\f[B]\\f[VB]Configuration.resolveAndBind\\f[B]\\f[R] method.\n-.IP\n-.nf\n-\\f[CB]\n-jlink --module-path mlib --add-modules com.greetings --output greetingsapp --bind-services\n-\\f[R]\n-.fi\n-.PP\n-The following command lists the modules in the runtime image\n-greetingsapp created by this command:\n-.IP\n-.nf\n-\\f[CB]\n-greetingsapp\/bin\/java --list-modules\n-com.greetings\n-java.base\\[at]11\n-java.compiler\\[at]11\n-java.datatransfer\\[at]11\n-java.desktop\\[at]11\n-java.logging\\[at]11\n-java.management\\[at]11\n-java.management.rmi\\[at]11\n-java.naming\\[at]11\n-java.prefs\\[at]11\n-java.rmi\\[at]11\n-java.security.jgss\\[at]11\n-java.security.sasl\\[at]11\n-java.smartcardio\\[at]11\n-java.xml\\[at]11\n-java.xml.crypto\\[at]11\n-jdk.accessibility\\[at]11\n-jdk.charsets\\[at]11\n-jdk.compiler\\[at]11\n-jdk.crypto.cryptoki\\[at]11\n-jdk.crypto.ec\\[at]11\n-jdk.crypto.mscapi\\[at]11\n-jdk.internal.opt\\[at]11\n-jdk.jartool\\[at]11\n-jdk.javadoc\\[at]11\n-jdk.jdeps\\[at]11\n-jdk.jfr\\[at]11\n-jdk.jlink\\[at]11\n-jdk.localedata\\[at]11\n-jdk.management\\[at]11\n-jdk.management.jfr\\[at]11\n-jdk.naming.dns\\[at]11\n-jdk.naming.rmi\\[at]11\n-jdk.security.auth\\[at]11\n-jdk.security.jgss\\[at]11\n-jdk.zipfs\\[at]11\n-org.astro\\[at]1.0\n-\\f[R]\n-.fi\n","filename":"src\/jdk.jlink\/share\/man\/jlink.1","additions":0,"deletions":409,"binary":false,"changes":409,"status":"deleted"},{"patch":"@@ -0,0 +1,347 @@\n+---\n+# Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JLINK(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jlink - assemble and optimize a set of modules and their dependencies into a\n+custom runtime image\n+\n+## Synopsis\n+\n+`jlink` \\[*options*\\] `--module-path` *modulepath* `--add-modules` *module*\\[,*module*...\\]\n+\n+*options*\n+:   Command-line options separated by spaces. See [jlink Options].\n+\n+*modulepath*\n+:   The path where the `jlink` tool discovers observable modules. These modules\n+    can be modular JAR files, JMOD files, or exploded modules.\n+\n+*module*\n+:   The names of the modules to add to the runtime image. The `jlink` tool adds\n+    these modules and their transitive dependencies.\n+\n+## Description\n+\n+The `jlink` tool links a set of modules, along with their transitive\n+dependences, to create a custom runtime image.\n+\n+**Note:**\n+\n+Developers are responsible for updating their custom runtime images.\n+\n+## jlink Options\n+\n+`--add-modules` *mod*\\[`,`*mod*...\\]\n+:   Adds the named modules, *mod*, to the default set of root modules. The\n+    default set of root modules is empty.\n+\n+`--bind-services`\n+:   Link service provider modules and their dependencies.\n+\n+`-c ={0|1|2}` or `--compress={0|1|2}`\n+:   Enable compression of resources:\n+\n+    -   `0`: No compression\n+    -   `1`: Constant string sharing\n+    -   `2`: ZIP\n+\n+`--disable-plugin` *pluginname*\n+:   Disables the specified plug-in. See [jlink Plug-ins] for the list of\n+    supported plug-ins.\n+\n+`--endian` {`little`\\|`big`}\n+:   Specifies the byte order of the generated image. The default value is the\n+    format of your system's architecture.\n+\n+`-h` or `--help`\n+:   Prints the help message.\n+\n+`--ignore-signing-information`\n+:   Suppresses a fatal error when signed modular JARs are linked in the runtime\n+    image. The signature-related files of the signed modular JARs aren't copied\n+    to the runtime image.\n+\n+`--launcher` *command*`=`*module* or `--launcher` *command*`=`*module*`\/`*main*\n+:   Specifies the launcher command name for the module or the command name for\n+    the module and main class (the module and the main class names are\n+    separated by a slash (`\/`)).\n+\n+`--limit-modules` *mod*\\[`,`*mod*...\\]\n+:   Limits the universe of observable modules to those in the transitive\n+    closure of the named modules, `mod`, plus the main module, if any, plus any\n+    further modules specified in the `--add-modules` option.\n+\n+`--list-plugins`\n+:   Lists available plug-ins, which you can access through command-line\n+    options; see [jlink Plug-ins].\n+\n+`-p` or `--module-path` *modulepath*\n+:   Specifies the module path.\n+\n+    If this option is not specified, then the default module path is\n+    `$JAVA_HOME\/jmods`. This directory contains the `java.base` module and the\n+    other standard and JDK modules. If this option is specified but the\n+    `java.base` module cannot be resolved from it, then the `jlink` command\n+    appends `$JAVA_HOME\/jmods` to the module path.\n+\n+`--no-header-files`\n+:   Excludes header files.\n+\n+`--no-man-pages`\n+:   Excludes man pages.\n+\n+`--output` *path*\n+:   Specifies the location of the generated runtime image.\n+\n+`--save-opts` *filename*\n+:   Saves `jlink` options in the specified file.\n+\n+`--suggest-providers` \\[*name*`,` ...\\]\n+:   Suggest providers that implement the given service types from the module\n+    path.\n+\n+`--version`\n+:   Prints version information.\n+\n+`@`*filename*\n+:   Reads options from the specified file.\n+\n+    An options file is a text file that contains the options and values that\n+    you would typically enter in a command prompt. Options may appear on one\n+    line or on several lines. You may not specify environment variables for\n+    path names. You may comment out lines by prefixing a hash symbol (`#`) to\n+    the beginning of the line.\n+\n+    The following is an example of an options file for the `jlink` command:\n+\n+    ```\n+    #Wed Dec 07 00:40:19 EST 2016\n+    --module-path mlib\n+    --add-modules com.greetings\n+    --output greetingsapp\n+    ```\n+\n+## jlink Plug-ins\n+\n+**Note:**\n+\n+Plug-ins not listed in this section aren't supported and are subject to change.\n+\n+For plug-in options that require a *pattern-list*, the value is a\n+comma-separated list of elements, with each element using one the following\n+forms:\n+\n+-   *glob-pattern*\n+-   `glob:`*glob-pattern*\n+-   `regex:`*regex-pattern*\n+-   `@`*filename*\n+    -   *filename* is the name of a file that contains patterns to be used, one\n+        pattern per line.\n+\n+For a complete list of all available plug-ins, run the command\n+`jlink --list-plugins`.\n+\n+### Plugin `compress`\n+\n+Options\n+:   `--compress=`{`0`\\|`1`\\|`2`}\\[`:filter=`*pattern-list*\\]\n+\n+Description\n+:   Compresses all resources in the output image.\n+\n+    -   Level 0: No compression\n+    -   Level 1: Constant string sharing\n+    -   Level 2: ZIP\n+\n+    An optional *pattern-list* filter can be specified to list the pattern of\n+    files to include.\n+\n+### Plugin `include-locales`\n+\n+Options\n+:   `--include-locales=`*langtag*\\[`,`*langtag*\\]\\*\n+\n+Description\n+:   Includes the list of locales where *langtag* is a BCP 47 language tag.\n+    This option supports locale matching as defined in RFC 4647. Ensure that\n+    you add the module jdk.localedata when using this option.\n+\n+    Example:\n+\n+    >   `--add-modules jdk.localedata --include-locales=en,ja,*-IN`\n+\n+### Plugin `order-resources`\n+\n+Options\n+:   `--order-resources=`*pattern-list*\n+\n+Description\n+:   Orders the specified paths in priority order. If `@`*filename* is\n+    specified, then each line in *pattern-list* must be an exact match for the\n+    paths to be ordered.\n+\n+    Example:\n+\n+    >   `--order-resources=\/module-info.class,@classlist,\/java.base\/java\/lang\/`\n+\n+### Plugin `strip-debug`\n+\n+Options\n+:   `--strip-debug`\n+\n+Description\n+:   Strips debug information from the output image.\n+\n+### Plugin `generate-cds-archive`\n+\n+Options\n+:   `--generate-cds-archive`\n+\n+Description\n+:   Generate CDS archive if the runtime image supports the CDS feature.\n+\n+## jlink Examples\n+\n+The following command creates a runtime image in the directory `greetingsapp`.\n+This command links the module `com.greetings`, whose module definition is\n+contained in the directory `mlib`.\n+\n+```\n+jlink --module-path mlib --add-modules com.greetings --output greetingsapp\n+```\n+\n+The following command lists the modules in the runtime image `greetingsapp`:\n+\n+```\n+greetingsapp\/bin\/java --list-modules\n+com.greetings\n+java.base@11\n+java.logging@11\n+org.astro@1.0\n+```\n+\n+The following command creates a runtime image in the directory compressedrt\n+that's stripped of debug symbols, uses compression to reduce space, and\n+includes French language locale information:\n+\n+```\n+jlink --add-modules jdk.localedata --strip-debug --compress=2 --include-locales=fr --output compressedrt\n+```\n+\n+The following example compares the size of the runtime image `compressedrt`\n+with `fr_rt`, which isn't stripped of debug symbols and doesn't use\n+compression:\n+\n+```\n+jlink --add-modules jdk.localedata --include-locales=fr --output fr_rt\n+\n+du -sh .\/compressedrt .\/fr_rt\n+23M     .\/compressedrt\n+36M     .\/fr_rt\n+```\n+\n+The following example lists the providers that implement\n+`java.security.Provider`:\n+\n+```\n+jlink --suggest-providers java.security.Provider\n+\n+Suggested providers:\n+  java.naming provides java.security.Provider used by java.base\n+  java.security.jgss provides java.security.Provider used by java.base\n+  java.security.sasl provides java.security.Provider used by java.base\n+  java.smartcardio provides java.security.Provider used by java.base\n+  java.xml.crypto provides java.security.Provider used by java.base\n+  jdk.crypto.cryptoki provides java.security.Provider used by java.base\n+  jdk.crypto.ec provides java.security.Provider used by java.base\n+  jdk.crypto.mscapi provides java.security.Provider used by java.base\n+  jdk.security.jgss provides java.security.Provider used by java.base\n+```\n+\n+The following example creates a custom runtime image named `mybuild` that\n+includes only `java.naming` and `jdk.crypto.cryptoki` and their dependencies but no\n+other providers. Note that these dependencies must exist in the module path:\n+\n+```\n+jlink --add-modules java.naming,jdk.crypto.cryptoki --output mybuild\n+```\n+\n+The following command is similar to the one that creates a runtime image named\n+`greetingsapp`, except that it will link the modules resolved from root modules\n+with service binding; see the [`Configuration.resolveAndBind`](\n+..\/..\/api\/java.base\/java\/lang\/module\/Configuration.html#resolveAndBind(java.lang.module.ModuleFinder,java.util.List,java.lang.module.ModuleFinder,java.util.Collection))\n+method.\n+\n+```\n+jlink --module-path mlib --add-modules com.greetings --output greetingsapp --bind-services\n+```\n+\n+The following command lists the modules in the runtime image greetingsapp\n+created by this command:\n+\n+```\n+greetingsapp\/bin\/java --list-modules\n+com.greetings\n+java.base@11\n+java.compiler@11\n+java.datatransfer@11\n+java.desktop@11\n+java.logging@11\n+java.management@11\n+java.management.rmi@11\n+java.naming@11\n+java.prefs@11\n+java.rmi@11\n+java.security.jgss@11\n+java.security.sasl@11\n+java.smartcardio@11\n+java.xml@11\n+java.xml.crypto@11\n+jdk.accessibility@11\n+jdk.charsets@11\n+jdk.compiler@11\n+jdk.crypto.cryptoki@11\n+jdk.crypto.ec@11\n+jdk.crypto.mscapi@11\n+jdk.internal.opt@11\n+jdk.jartool@11\n+jdk.javadoc@11\n+jdk.jdeps@11\n+jdk.jfr@11\n+jdk.jlink@11\n+jdk.localedata@11\n+jdk.management@11\n+jdk.management.jfr@11\n+jdk.naming.dns@11\n+jdk.naming.rmi@11\n+jdk.security.auth@11\n+jdk.security.jgss@11\n+jdk.zipfs@11\n+org.astro@1.0\n+```\n","filename":"src\/jdk.jlink\/share\/man\/jlink.md","additions":347,"deletions":0,"binary":false,"changes":347,"status":"added"},{"patch":"@@ -1,423 +0,0 @@\n-.\\\" Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JMOD\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jmod - create JMOD files and list the content of existing JMOD files\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jmod\\f[R]\n-(\\f[V]create\\f[R]|\\f[V]extract\\f[R]|\\f[V]list\\f[R]|\\f[V]describe\\f[R]|\\f[V]hash\\f[R])\n-[\\f[I]options\\f[R]] \\f[I]jmod-file\\f[R]\n-.PP\n-Includes the following:\n-.PP\n-\\f[B]Main operation modes\\f[R]\n-.TP\n-\\f[V]create\\f[R]\n-Creates a new JMOD archive file.\n-.TP\n-\\f[V]extract\\f[R]\n-Extracts all the files from the JMOD archive file.\n-.TP\n-\\f[V]list\\f[R]\n-Prints the names of all the entries.\n-.TP\n-\\f[V]describe\\f[R]\n-Prints the module details.\n-.TP\n-\\f[V]hash\\f[R]\n-Determines leaf modules and records the hashes of the dependencies that\n-directly and indirectly require them.\n-.PP\n-\\f[B]Options\\f[R]\n-.TP\n-\\f[I]options\\f[R]\n-See \\f[B]Options for jmod\\f[R].\n-.PP\n-\\f[B]Required\\f[R]\n-.TP\n-\\f[I]jmod-file\\f[R]\n-Specifies the name of the JMOD file to create or from which to retrieve\n-information.\n-.SH DESCRIPTION\n-.PP\n-\\f[B]Note:\\f[R] For most development tasks, including deploying modules\n-on the module path or publishing them to a Maven repository, continue to\n-package modules in modular JAR files.\n-The \\f[V]jmod\\f[R] tool is intended for modules that have native\n-libraries or other configuration files or for modules that you intend to\n-link, with the \\f[B]jlink\\f[R] tool, to a runtime image.\n-.PP\n-The JMOD file format lets you aggregate files other than\n-\\f[V].class\\f[R] files, metadata, and resources.\n-This format is transportable but not executable, which means that you\n-can use it during compile time or link time but not at run time.\n-.PP\n-Many \\f[V]jmod\\f[R] options involve specifying a path whose contents are\n-copied into the resulting JMOD files.\n-These options copy all the contents of the specified path, including\n-subdirectories and their contents, but exclude files whose names match\n-the pattern specified by the \\f[V]--exclude\\f[R] option.\n-.PP\n-With the \\f[V]--hash-modules\\f[R] option or the \\f[V]jmod hash\\f[R]\n-command, you can, in each module\\[aq]s descriptor, record hashes of the\n-content of the modules that are allowed to depend upon it, thus\n-\\[dq]tying\\[dq] together these modules.\n-This enables a package to be exported to one or more specifically-named\n-modules and to no others through qualified exports.\n-The runtime verifies if the recorded hash of a module matches the one\n-resolved at run time; if not, the runtime returns an error.\n-.SH OPTIONS FOR JMOD\n-.TP\n-\\f[V]--class-path\\f[R] \\f[I]path\\f[R]\n-Specifies the location of application JAR files or a directory\n-containing classes to copy into the resulting JMOD file.\n-.TP\n-\\f[V]--cmds\\f[R] \\f[I]path\\f[R]\n-Specifies the location of native commands to copy into the resulting\n-JMOD file.\n-.TP\n-\\f[V]--compress\\f[R] \\f[I]compress\\f[R]\n-Specifies the compression to use in creating the JMOD file.\n-The accepted values are \\f[V]zip-[0-9]\\f[R], where \\f[V]zip-0\\f[R]\n-provides no compression, and \\f[V]zip-9\\f[R] provides the best\n-compression.\n-Default is \\f[V]zip-6\\f[R].\n-.TP\n-\\f[V]--config\\f[R] \\f[I]path\\f[R]\n-Specifies the location of user-editable configuration files to copy into\n-the resulting JMOD file.\n-.TP\n-\\f[V]--date\\f[R]\\f[I]TIMESTAMP\\f[R]\n-The timestamp in ISO-8601 extended offset date-time with optional\n-time-zone format, to use for the timestamp of the entries, e.g.\n-\\[dq]2022-02-12T12:30:00-05:00\\[dq].\n-.TP\n-\\f[V]--dir\\f[R] \\f[I]path\\f[R]\n-Specifies the location where \\f[V]jmod\\f[R] puts extracted files from\n-the specified JMOD archive.\n-.TP\n-\\f[V]--dry-run\\f[R]\n-Performs a dry run of hash mode.\n-It identifies leaf modules and their required modules without recording\n-any hash values.\n-.TP\n-\\f[V]--exclude\\f[R] \\f[I]pattern-list\\f[R]\n-Excludes files matching the supplied comma-separated pattern list, each\n-element using one the following forms:\n-.RS\n-.IP \\[bu] 2\n-\\f[I]glob-pattern\\f[R]\n-.IP \\[bu] 2\n-\\f[V]glob:\\f[R]\\f[I]glob-pattern\\f[R]\n-.IP \\[bu] 2\n-\\f[V]regex:\\f[R]\\f[I]regex-pattern\\f[R]\n-.PP\n-See the \\f[B]\\f[VB]FileSystem.getPathMatcher\\f[B]\\f[R] method for the\n-syntax of \\f[I]glob-pattern\\f[R].\n-See the \\f[B]\\f[VB]Pattern\\f[B]\\f[R] class for the syntax of\n-\\f[I]regex-pattern\\f[R], which represents a regular expression.\n-.RE\n-.TP\n-\\f[V]--hash-modules\\f[R] \\f[I]regex-pattern\\f[R]\n-Determines the leaf modules and records the hashes of the dependencies\n-directly and indirectly requiring them, based on the module graph of the\n-modules matching the given \\f[I]regex-pattern\\f[R].\n-The hashes are recorded in the JMOD archive file being created, or a\n-JMOD archive or modular JAR on the module path specified by the\n-\\f[V]jmod hash\\f[R] command.\n-.TP\n-\\f[V]--header-files\\f[R] \\f[I]path\\f[R]\n-Specifies the location of header files to copy into the resulting JMOD\n-file.\n-.TP\n-\\f[V]--help\\f[R] or \\f[V]-h\\f[R]\n-Prints a usage message.\n-.TP\n-\\f[V]--help-extra\\f[R]\n-Prints help for extra options.\n-.TP\n-\\f[V]--legal-notices\\f[R] \\f[I]path\\f[R]\n-Specifies the location of legal notices to copy into the resulting JMOD\n-file.\n-.TP\n-\\f[V]--libs\\f[R] \\f[I]path\\f[R]\n-Specifies location of native libraries to copy into the resulting JMOD\n-file.\n-.TP\n-\\f[V]--main-class\\f[R] \\f[I]class-name\\f[R]\n-Specifies main class to record in the module-info.class file.\n-.TP\n-\\f[V]--man-pages\\f[R] \\f[I]path\\f[R]\n-Specifies the location of man pages to copy into the resulting JMOD\n-file.\n-.TP\n-\\f[V]--module-version\\f[R] \\f[I]module-version\\f[R]\n-Specifies the module version to record in the module-info.class file.\n-.TP\n-\\f[V]--module-path\\f[R] \\f[I]path\\f[R] or \\f[V]-p\\f[R] \\f[I]path\\f[R]\n-Specifies the module path.\n-This option is required if you also specify \\f[V]--hash-modules\\f[R].\n-.TP\n-\\f[V]--target-platform\\f[R] \\f[I]platform\\f[R]\n-Specifies the target platform.\n-.TP\n-\\f[V]--version\\f[R]\n-Prints version information of the \\f[V]jmod\\f[R] tool.\n-.TP\n-\\f[V]\\[at]\\f[R]\\f[I]filename\\f[R]\n-Reads options from the specified file.\n-.RS\n-.PP\n-An options file is a text file that contains the options and values that\n-you would ordinarily enter in a command prompt.\n-Options may appear on one line or on several lines.\n-You may not specify environment variables for path names.\n-You may comment out lines by prefixinga hash symbol (\\f[V]#\\f[R]) to the\n-beginning of the line.\n-.PP\n-The following is an example of an options file for the \\f[V]jmod\\f[R]\n-command:\n-.IP\n-.nf\n-\\f[CB]\n-#Wed Dec 07 00:40:19 EST 2016\n-create --class-path mods\/com.greetings --module-path mlib\n-  --cmds commands --config configfiles --header-files src\/h\n-  --libs lib --main-class com.greetings.Main\n-  --man-pages man --module-version 1.0\n-  --os-arch \\[dq]x86_x64\\[dq] --os-name \\[dq]macOS\\[dq]\n-  --os-version \\[dq]10.10.5\\[dq] greetingsmod\n-\\f[R]\n-.fi\n-.RE\n-.SH EXTRA OPTIONS FOR JMOD\n-.PP\n-In addition to the options described in \\f[B]Options for jmod\\f[R], the\n-following are extra options that can be used with the command.\n-.TP\n-\\f[V]--do-not-resolve-by-default\\f[R]\n-Exclude from the default root set of modules\n-.TP\n-\\f[V]--warn-if-resolved\\f[R]\n-Hint for a tool to issue a warning if the module is resolved.\n-One of deprecated, deprecated-for-removal, or incubating.\n-.SH JMOD CREATE EXAMPLE\n-.PP\n-The following is an example of creating a JMOD file:\n-.IP\n-.nf\n-\\f[CB]\n-jmod create --class-path mods\/com.greetings --cmds commands\n-  --config configfiles --header-files src\/h --libs lib\n-  --main-class com.greetings.Main --man-pages man --module-version 1.0\n-  --os-arch \\[dq]x86_x64\\[dq] --os-name \\[dq]macOS\\[dq]\n-  --os-version \\[dq]10.10.5\\[dq] greetingsmod\n-\\f[R]\n-.fi\n-.PP\n-Create a JMOD file specifying the date for the entries as\n-\\f[V]2022 March 15 00:00:00\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-jmod create --class-path build\/foo\/classes --date 2022-03-15T00:00:00Z\n-   jmods\/foo1.jmod\n-\\f[R]\n-.fi\n-.SH JMOD HASH EXAMPLE\n-.PP\n-The following example demonstrates what happens when you try to link a\n-leaf module (in this example, \\f[V]ma\\f[R]) with a required module\n-(\\f[V]mb\\f[R]), and the hash value recorded in the required module\n-doesn\\[aq]t match that of the leaf module.\n-.IP \"1.\" 3\n-Create and compile the following \\f[V].java\\f[R] files:\n-.RS 4\n-.IP \\[bu] 2\n-\\f[V]jmodhashex\/src\/ma\/module-info.java\\f[R]\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-module ma {\n-  requires mb;\n-}\n-\\f[R]\n-.fi\n-.RE\n-.IP \\[bu] 2\n-\\f[V]jmodhashex\/src\/mb\/module-info.java\\f[R]\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-module mb {\n-}\n-\\f[R]\n-.fi\n-.RE\n-.IP \\[bu] 2\n-\\f[V]jmodhashex2\/src\/ma\/module-info.java\\f[R]\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-module ma {\n-  requires mb;\n-}\n-\\f[R]\n-.fi\n-.RE\n-.IP \\[bu] 2\n-\\f[V]jmodhashex2\/src\/mb\/module-info.java\\f[R]\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-module mb {\n-}\n-\\f[R]\n-.fi\n-.RE\n-.RE\n-.IP \"2.\" 3\n-Create a JMOD archive for each module.\n-Create the directories \\f[V]jmodhashex\/jmods\\f[R] and\n-\\f[V]jmodhashex2\/jmods\\f[R], and then run the following commands from\n-the \\f[V]jmodhashex\\f[R] directory, then from the \\f[V]jmodhashex2\\f[R]\n-directory:\n-.RS 4\n-.IP \\[bu] 2\n-\\f[V]jmod create --class-path mods\/ma jmods\/ma.jmod\\f[R]\n-.IP \\[bu] 2\n-\\f[V]jmod create --class-path mods\/mb jmods\/mb.jmod\\f[R]\n-.RE\n-.IP \"3.\" 3\n-Optionally preview the \\f[V]jmod hash\\f[R] command.\n-Run the following command from the \\f[V]jmodhashex\\f[R] directory:\n-.RS 4\n-.PP\n-\\f[V]jmod hash --dry-run -module-path jmods --hash-modules .*\\f[R]\n-.PP\n-The command prints the following:\n-.IP\n-.nf\n-\\f[CB]\n-Dry run:\n-mb\n-  hashes ma SHA-256 07667d5032004b37b42ec2bb81b46df380cf29e66962a16481ace2e71e74073a\n-\\f[R]\n-.fi\n-.PP\n-This indicates that the \\f[V]jmod hash\\f[R] command (without the\n-\\f[V]--dry-run\\f[R] option) will record the hash value of the leaf\n-module \\f[V]ma\\f[R] in the module \\f[V]mb\\f[R].\n-.RE\n-.IP \"4.\" 3\n-Record hash values in the JMOD archive files contained in the\n-\\f[V]jmodhashex\\f[R] directory.\n-Run the following command from the \\f[V]jmodhashex\\f[R] directory:\n-.RS 4\n-.RS\n-.PP\n-\\f[V]jmod hash --module-path jmods --hash-modules .*\\f[R]\n-.RE\n-.PP\n-The command prints the following:\n-.RS\n-.PP\n-\\f[V]Hashes are recorded in module mb\\f[R]\n-.RE\n-.RE\n-.IP \"5.\" 3\n-Print information about each JMOD archive contained in the\n-\\f[V]jmodhashex\\f[R] directory.\n-Run the highlighted commands from the \\f[V]jmodhashex\\f[R] directory:\n-.RS 4\n-.IP\n-.nf\n-\\f[CB]\n-jmod describe jmods\/ma.jmod\n-\n-ma\n-  requires mandated java.base\n-  requires mb\n-\n-jmod describe jmods\/mb.jmod\n-\n-mb\n-  requires mandated java.base\n-  hashes ma SHA-256 07667d5032004b37b42ec2bb81b46df380cf29e66962a16481ace2e71e74073a\n-\\f[R]\n-.fi\n-.RE\n-.IP \"6.\" 3\n-Attempt to create a runtime image that contains the module \\f[V]ma\\f[R]\n-from the directory \\f[V]jmodhashex2\\f[R] but the module \\f[V]mb\\f[R]\n-from the directory \\f[V]jmodhashex\\f[R].\n-Run the following command from the \\f[V]jmodhashex2\\f[R] directory:\n-.RS 4\n-.IP \\[bu] 2\n-\\f[B]Linux and macOS:\\f[R]\n-.RS 2\n-.RS\n-.PP\n-\\f[V]jlink --module-path $JAVA_HOME\/jmods:jmods\/ma.jmod:..\/jmodhashex\/jmods\/mb.jmod --add-modules ma --output ma-app\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-\\f[B]Windows:\\f[R]\n-.RS 2\n-.RS\n-.PP\n-\\f[V]jlink --module-path %JAVA_HOME%\/jmods;jmods\/ma.jmod;..\/jmodhashex\/jmods\/mb.jmod --add-modules ma --output ma-app\\f[R]\n-.RE\n-.RE\n-.PP\n-The command prints an error message similar to the following:\n-.IP\n-.nf\n-\\f[CB]\n-Error: Hash of ma (a2d77889b0cb067df02a3abc39b01ac1151966157a68dc4241562c60499150d2) differs to\n-expected hash (07667d5032004b37b42ec2bb81b46df380cf29e66962a16481ace2e71e74073a) recorded in mb\n-\\f[R]\n-.fi\n-.RE\n","filename":"src\/jdk.jlink\/share\/man\/jmod.1","additions":0,"deletions":423,"binary":false,"changes":423,"status":"deleted"},{"patch":"@@ -0,0 +1,348 @@\n+---\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JMOD(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jmod - create JMOD files and list the content of existing JMOD files\n+\n+## Synopsis\n+\n+`jmod` (`create`\\|`extract`\\|`list`\\|`describe`\\|`hash`) \\[*options*\\]\n+*jmod-file*\n+\n+Includes the following:\n+\n+**Main operation modes**\n+\n+`create`\n+:   Creates a new JMOD archive file.\n+\n+`extract`\n+:   Extracts all the files from the JMOD archive file.\n+\n+`list`\n+:   Prints the names of all the entries.\n+\n+`describe`\n+:   Prints the module details.\n+\n+`hash`\n+:   Determines leaf modules and records the hashes of the dependencies that\n+    directly and indirectly require them.\n+\n+**Options**\n+\n+*options*\n+:   See [Options for jmod].\n+\n+**Required**\n+\n+*jmod-file*\n+:   Specifies the name of the JMOD file to create or from which to retrieve\n+    information.\n+\n+## Description\n+\n+**Note:** For most development tasks, including deploying modules on the module\n+path or publishing them to a Maven repository, continue to package modules in\n+modular JAR files. The `jmod` tool is intended for modules that have native\n+libraries or other configuration files or for modules that you intend to link,\n+with the [jlink](jlink.html) tool, to a runtime image.\n+\n+The JMOD file format lets you aggregate files other than `.class` files,\n+metadata, and resources. This format is transportable but not executable, which\n+means that you can use it during compile time or link time but not at run time.\n+\n+Many `jmod` options involve specifying a path whose contents are copied into\n+the resulting JMOD files. These options copy all the contents of the specified\n+path, including subdirectories and their contents, but exclude files whose\n+names match the pattern specified by the `--exclude` option.\n+\n+With the `--hash-modules` option or the `jmod hash` command, you can, in each\n+module's descriptor, record hashes of the content of the modules that are\n+allowed to depend upon it, thus \"tying\" together these modules. This enables a\n+package to be exported to one or more specifically-named modules and to no\n+others through qualified exports. The runtime verifies if the recorded hash of\n+a module matches the one resolved at run time; if not, the runtime returns an\n+error.\n+\n+## Options for jmod\n+\n+`--class-path` *path*\n+:   Specifies the location of application JAR files or a directory containing\n+    classes to copy into the resulting JMOD file.\n+\n+`--cmds` *path*\n+:   Specifies the location of native commands to copy into the resulting JMOD\n+    file.\n+\n+`--compress` *compress*\n+:   Specifies the compression to use in creating the JMOD file.\n+    The accepted values are `zip-[0-9]`, where `zip-0` provides no\n+    compression, and `zip-9` provides the best compression. Default is `zip-6`.\n+\n+`--config` *path*\n+:   Specifies the location of user-editable configuration files to copy into\n+    the resulting JMOD file.\n+\n+`--date `*TIMESTAMP*\n+:   The timestamp in ISO-8601 extended offset date-time with optional time-zone\n+format, to use for the timestamp of the entries,\n+e.g. \"2022-02-12T12:30:00-05:00\".\n+\n+`--dir` *path*\n+:   Specifies the location where `jmod` puts extracted files from the specified\n+    JMOD archive.\n+\n+`--dry-run`\n+:   Performs a dry run of hash mode. It identifies leaf modules and their\n+    required modules without recording any hash values.\n+\n+`--exclude` *pattern-list*\n+:   Excludes files matching the supplied comma-separated pattern list, each\n+    element using one the following forms:\n+\n+    -   *glob-pattern*\n+\n+    -   `glob:`*glob-pattern*\n+\n+    -   `regex:`*regex-pattern*\n+\n+    See the [`FileSystem.getPathMatcher`](\n+    ..\/..\/api\/java.base\/java\/nio\/file\/FileSystem.html#getPathMatcher(java.lang.String))\n+    method for the syntax of *glob-pattern*. See the [`Pattern`](\n+    ..\/..\/api\/java.base\/java\/util\/regex\/Pattern.html)\n+    class for the syntax of *regex-pattern*, which represents a regular\n+    expression.\n+\n+`--hash-modules` *regex-pattern*\n+:   Determines the leaf modules and records the hashes of the dependencies\n+    directly and indirectly requiring them, based on the module graph of the\n+    modules matching the given *regex-pattern*. The hashes are recorded in the\n+    JMOD archive file being created, or a JMOD archive or modular JAR on the\n+    module path specified by the `jmod hash` command.\n+\n+`--header-files` *path*\n+:   Specifies the location of header files to copy into the resulting JMOD\n+    file.\n+\n+`--help` or `-h`\n+:   Prints a usage message.\n+\n+`--help-extra`\n+:   Prints help for extra options.\n+\n+`--legal-notices` *path*\n+:   Specifies the location of legal notices to copy into the resulting JMOD\n+    file.\n+\n+`--libs` *path*\n+:   Specifies location of native libraries to copy into the resulting JMOD\n+    file.\n+\n+`--main-class` *class-name*\n+:   Specifies main class to record in the module-info.class file.\n+\n+`--man-pages` *path*\n+:   Specifies the location of man pages to copy into the resulting JMOD file.\n+\n+`--module-version` *module-version*\n+:   Specifies the module version to record in the module-info.class file.\n+\n+`--module-path` *path* or `-p` *path*\n+:   Specifies the module path. This option is required if you also specify\n+    `--hash-modules`.\n+\n+`--target-platform` *platform*\n+:   Specifies the target platform.\n+\n+`--version`\n+:   Prints version information of the `jmod` tool.\n+\n+`@`*filename*\n+:   Reads options from the specified file.\n+\n+    An options file is a text file that contains the options and values that\n+    you would ordinarily enter in a command prompt. Options may appear on one\n+    line or on several lines. You may not specify environment variables for\n+    path names. You may comment out lines by prefixinga hash symbol (`#`) to\n+    the beginning of the line.\n+\n+    The following is an example of an options file for the `jmod` command:\n+\n+    ```\n+    #Wed Dec 07 00:40:19 EST 2016\n+    create --class-path mods\/com.greetings --module-path mlib\n+      --cmds commands --config configfiles --header-files src\/h\n+      --libs lib --main-class com.greetings.Main\n+      --man-pages man --module-version 1.0\n+      --os-arch \"x86_x64\" --os-name \"macOS\"\n+      --os-version \"10.10.5\" greetingsmod\n+    ```\n+\n+## Extra Options for jmod\n+\n+In addition to the options described in [Options for jmod], the following are\n+extra options that can be used with the command.\n+\n+`--do-not-resolve-by-default`\n+:   Exclude from the default root set of modules\n+\n+`--warn-if-resolved`\n+:   Hint for a tool to issue a warning if the module is resolved. One of\n+    deprecated, deprecated-for-removal, or incubating.\n+\n+## jmod Create Example\n+\n+The following is an example of creating a JMOD file:\n+\n+```\n+jmod create --class-path mods\/com.greetings --cmds commands\n+  --config configfiles --header-files src\/h --libs lib\n+  --main-class com.greetings.Main --man-pages man --module-version 1.0\n+  --os-arch \"x86_x64\" --os-name \"macOS\"\n+  --os-version \"10.10.5\" greetingsmod\n+```\n+Create a JMOD file specifying the date for the entries as `2022 March 15 00:00:00`:\n+\n+```\n+jmod create --class-path build\/foo\/classes --date 2022-03-15T00:00:00Z\n+   jmods\/foo1.jmod\n+```\n+## jmod Hash Example\n+\n+The following example demonstrates what happens when you try to link a leaf\n+module (in this example, `ma`) with a required module (`mb`), and the hash\n+value recorded in the required module doesn't match that of the leaf module.\n+\n+1.  Create and compile the following `.java` files:\n+\n+    -   `jmodhashex\/src\/ma\/module-info.java`\n+\n+        ```\n+        module ma {\n+          requires mb;\n+        }\n+        ```\n+\n+    -   `jmodhashex\/src\/mb\/module-info.java`\n+\n+        ```\n+        module mb {\n+        }\n+        ```\n+\n+    -   `jmodhashex2\/src\/ma\/module-info.java`\n+\n+        ```\n+        module ma {\n+          requires mb;\n+        }\n+        ```\n+\n+    -   `jmodhashex2\/src\/mb\/module-info.java`\n+\n+        ```\n+        module mb {\n+        }\n+        ```\n+\n+2.  Create a JMOD archive for each module. Create the directories\n+    `jmodhashex\/jmods` and `jmodhashex2\/jmods`, and then run the following\n+    commands from the `jmodhashex` directory, then from the `jmodhashex2`\n+    directory:\n+\n+    -   `jmod create --class-path mods\/ma jmods\/ma.jmod`\n+\n+    -   `jmod create --class-path mods\/mb jmods\/mb.jmod`\n+\n+3.  Optionally preview the `jmod hash` command. Run the following command from\n+    the `jmodhashex` directory:\n+\n+    `jmod hash --dry-run -module-path jmods --hash-modules .*`\n+\n+    The command prints the following:\n+\n+    ```\n+    Dry run:\n+    mb\n+      hashes ma SHA-256 07667d5032004b37b42ec2bb81b46df380cf29e66962a16481ace2e71e74073a\n+    ```\n+\n+    This indicates that the `jmod hash` command (without the `--dry-run`\n+    option) will record the hash value of the leaf module `ma` in the module\n+    `mb`.\n+\n+4.  Record hash values in the JMOD archive files contained in the `jmodhashex`\n+    directory. Run the following command from the `jmodhashex` directory:\n+\n+    >   `jmod hash --module-path jmods --hash-modules .*`\n+\n+    The command prints the following:\n+\n+    >   `Hashes are recorded in module mb`\n+\n+5.  Print information about each JMOD archive contained in the `jmodhashex`\n+    directory. Run the highlighted commands from the `jmodhashex` directory:\n+\n+    ```\n+    jmod describe jmods\/ma.jmod\n+\n+    ma\n+      requires mandated java.base\n+      requires mb\n+\n+    jmod describe jmods\/mb.jmod\n+\n+    mb\n+      requires mandated java.base\n+      hashes ma SHA-256 07667d5032004b37b42ec2bb81b46df380cf29e66962a16481ace2e71e74073a\n+    ```\n+\n+6.  Attempt to create a runtime image that contains the module `ma` from the\n+    directory `jmodhashex2` but the module `mb` from the directory\n+    `jmodhashex`. Run the following command from the `jmodhashex2` directory:\n+\n+    -   **Linux and macOS:**\n+\n+        >   `jlink --module-path\n+            $JAVA_HOME\/jmods:jmods\/ma.jmod:..\/jmodhashex\/jmods\/mb.jmod\n+            --add-modules ma --output ma-app`\n+\n+    -   **Windows:**\n+\n+        >   `jlink --module-path\n+            %JAVA_HOME%\/jmods;jmods\/ma.jmod;..\/jmodhashex\/jmods\/mb.jmod\n+            --add-modules ma --output ma-app`\n+\n+    The command prints an error message similar to the following:\n+\n+    ```\n+    Error: Hash of ma (a2d77889b0cb067df02a3abc39b01ac1151966157a68dc4241562c60499150d2) differs to\n+    expected hash (07667d5032004b37b42ec2bb81b46df380cf29e66962a16481ace2e71e74073a) recorded in mb\n+    ```\n","filename":"src\/jdk.jlink\/share\/man\/jmod.md","additions":348,"deletions":0,"binary":false,"changes":348,"status":"added"},{"patch":"@@ -1,834 +0,0 @@\n-.\\\" Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JPACKAGE\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jpackage - tool for packaging self-contained Java applications.\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jpackage\\f[R] [\\f[I]options\\f[R]]\n-.TP\n-\\f[I]options\\f[R]\n-Command-line options separated by spaces.\n-See \\f[B]jpackage Options\\f[R].\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jpackage\\f[R] tool will take as input a Java application and a\n-Java run-time image, and produce a Java application image that includes\n-all the necessary dependencies.\n-It will be able to produce a native package in a platform-specific\n-format, such as an exe on Windows or a dmg on macOS.\n-Each format must be built on the platform it runs on, there is no\n-cross-platform support.\n-The tool will have options that allow packaged applications to be\n-customized in various ways.\n-.SH JPACKAGE OPTIONS\n-.SS Generic Options:\n-.TP\n-\\f[V]\\[at]\\f[R]\\f[I]filename\\f[R]\n-Read options from a file.\n-.RS\n-.PP\n-This option can be used multiple times.\n-.RE\n-.TP\n-\\f[V]--type\\f[R] or \\f[V]-t\\f[R] \\f[I]type\\f[R]\n-The type of package to create\n-.RS\n-.PP\n-Valid values are: {\\[dq]app-image\\[dq], \\[dq]exe\\[dq], \\[dq]msi\\[dq],\n-\\[dq]rpm\\[dq], \\[dq]deb\\[dq], \\[dq]pkg\\[dq], \\[dq]dmg\\[dq]}\n-.PP\n-If this option is not specified a platform dependent default type will\n-be created.\n-.RE\n-.TP\n-\\f[V]--app-version\\f[R] \\f[I]version\\f[R]\n-Version of the application and\/or package\n-.TP\n-\\f[V]--copyright\\f[R] \\f[I]copyright\\f[R]\n-Copyright for the application\n-.TP\n-\\f[V]--description\\f[R] \\f[I]description\\f[R]\n-Description of the application\n-.TP\n-\\f[V]--help\\f[R] or \\f[V]-h\\f[R]\n-Print the usage text with a list and description of each valid option\n-for the current platform to the output stream, and exit.\n-.TP\n-\\f[V]--icon\\f[R] \\f[I]path\\f[R]\n-Path of the icon of the application package\n-.RS\n-.PP\n-(absolute path or relative to the current directory)\n-.RE\n-.TP\n-\\f[V]--name\\f[R] or \\f[V]-n\\f[R] \\f[I]name\\f[R]\n-Name of the application and\/or package\n-.TP\n-\\f[V]--dest\\f[R] or \\f[V]-d\\f[R] \\f[I]destination\\f[R]\n-Path where generated output file is placed\n-.RS\n-.PP\n-(absolute path or relative to the current directory).\n-.PP\n-Defaults to the current working directory.\n-.RE\n-.TP\n-\\f[V]--resource-dir\\f[R] \\f[I]path\\f[R]\n-Path to override jpackage resources\n-.RS\n-.PP\n-(absolute path or relative to the current directory)\n-.PP\n-Icons, template files, and other resources of jpackage can be\n-over-ridden by adding replacement resources to this directory.\n-.RE\n-.TP\n-\\f[V]--temp\\f[R] \\f[I]directory\\f[R]\n-Path of a new or empty directory used to create temporary files\n-.RS\n-.PP\n-(absolute path or relative to the current directory)\n-.PP\n-If specified, the temp dir will not be removed upon the task completion\n-and must be removed manually.\n-.PP\n-If not specified, a temporary directory will be created and removed upon\n-the task completion.\n-.RE\n-.TP\n-\\f[V]--vendor\\f[R] \\f[I]vendor\\f[R]\n-Vendor of the application\n-.TP\n-\\f[V]--verbose\\f[R]\n-Enables verbose output.\n-.TP\n-\\f[V]--version\\f[R]\n-Print the product version to the output stream and exit.\n-.SS Options for creating the runtime image:\n-.TP\n-\\f[V]--add-modules\\f[R] \\f[I]module-name\\f[R] [\\f[V],\\f[R]\\f[I]module-name\\f[R]...]\n-A comma (\\[dq],\\[dq]) separated list of modules to add\n-.RS\n-.PP\n-This module list, along with the main module (if specified) will be\n-passed to jlink as the --add-module argument.\n-If not specified, either just the main module (if --module is\n-specified), or the default set of modules (if --main-jar is specified)\n-are used.\n-.PP\n-This option can be used multiple times.\n-.RE\n-.TP\n-\\f[V]--module-path\\f[R] or \\f[V]-p\\f[R] \\f[I]module-path\\f[R] [\\f[V],\\f[R]\\f[I]module-path\\f[R]...]\n-A File.pathSeparator separated list of paths\n-.RS\n-.PP\n-Each path is either a directory of modules or the path to a modular jar,\n-and is absolute or relative to the current directory.\n-.PP\n-This option can be used multiple times.\n-.RE\n-.TP\n-\\f[V]--jlink-options\\f[R] \\f[I]options\\f[R]\n-A space separated list of options to pass to jlink\n-.RS\n-.PP\n-If not specified, defaults to \\[dq]--strip-native-commands --strip-debug\n---no-man-pages --no-header-files\\[dq]\n-.PP\n-This option can be used multiple times.\n-.RE\n-.TP\n-\\f[V]--runtime-image\\f[R] \\f[I]directory\\f[R]\n-Path of the predefined runtime image that will be copied into the\n-application image\n-.RS\n-.PP\n-(absolute path or relative to the current directory)\n-.PP\n-If --runtime-image is not specified, jpackage will run jlink to create\n-the runtime image using options specified by --jlink-options.\n-.RE\n-.SS Options for creating the application image:\n-.TP\n-\\f[V]--input\\f[R] or \\f[V]-i\\f[R] \\f[I]directory\\f[R]\n-Path of the input directory that contains the files to be packaged\n-.RS\n-.PP\n-(absolute path or relative to the current directory)\n-.PP\n-All files in the input directory will be packaged into the application\n-image.\n-.RE\n-.TP\n-\\f[V]--app-content\\f[R] \\f[I]additional-content\\f[R] [\\f[V],\\f[R]\\f[I]additional-content\\f[R]...]\n-A comma separated list of paths to files and\/or directories to add to\n-the application payload.\n-.RS\n-.PP\n-This option can be used more than once.\n-.RE\n-.SS Options for creating the application launcher(s):\n-.TP\n-\\f[V]--add-launcher\\f[R] \\f[I]name\\f[R]=\\f[I]path\\f[R]\n-Name of launcher, and a path to a Properties file that contains a list\n-of key, value pairs\n-.RS\n-.PP\n-(absolute path or relative to the current directory)\n-.PP\n-The keys \\[dq]module\\[dq], \\[dq]main-jar\\[dq], \\[dq]main-class\\[dq],\n-\\[dq]description\\[dq], \\[dq]arguments\\[dq], \\[dq]java-options\\[dq],\n-\\[dq]icon\\[dq], \\[dq]launcher-as-service\\[dq], \\[dq]win-console\\[dq],\n-\\[dq]win-shortcut\\[dq], \\[dq]win-menu\\[dq], and \\[dq]linux-shortcut\\[dq]\n-can be used.\n-.PP\n-These options are added to, or used to overwrite, the original command\n-line options to build an additional alternative launcher.\n-The main application launcher will be built from the command line\n-options.\n-Additional alternative launchers can be built using this option, and\n-this option can be used multiple times to build multiple additional\n-launchers.\n-.RE\n-.TP\n-\\f[V]--arguments\\f[R] \\f[I]arguments\\f[R]\n-Command line arguments to pass to the main class if no command line\n-arguments are given to the launcher\n-.RS\n-.PP\n-This option can be used multiple times.\n-.RE\n-.TP\n-\\f[V]--java-options\\f[R] \\f[I]options\\f[R]\n-Options to pass to the Java runtime\n-.RS\n-.PP\n-This option can be used multiple times.\n-.RE\n-.TP\n-\\f[V]--main-class\\f[R] \\f[I]class-name\\f[R]\n-Qualified name of the application main class to execute\n-.RS\n-.PP\n-This option can only be used if --main-jar is specified.\n-.RE\n-.TP\n-\\f[V]--main-jar\\f[R] \\f[I]main-jar\\f[R]\n-The main JAR of the application; containing the main class (specified as\n-a path relative to the input path)\n-.RS\n-.PP\n-Either --module or --main-jar option can be specified but not both.\n-.RE\n-.TP\n-\\f[V]--module\\f[R] or \\f[V]-m\\f[R] \\f[I]module-name\\f[R][\/\\f[I]main-class\\f[R]]\n-The main module (and optionally main class) of the application\n-.RS\n-.PP\n-This module must be located on the module path.\n-.PP\n-When this option is specified, the main module will be linked in the\n-Java runtime image.\n-Either --module or --main-jar option can be specified but not both.\n-.RE\n-.SS Platform dependent options for creating the application launcher:\n-.SS Windows platform options (available only when running on Windows):\n-.TP\n-\\f[V]--win-console\\f[R]\n-Creates a console launcher for the application, should be specified for\n-application which requires console interactions\n-.SS macOS platform options (available only when running on macOS):\n-.TP\n-\\f[V]--mac-package-identifier\\f[R] \\f[I]identifier\\f[R]\n-An identifier that uniquely identifies the application for macOS\n-.RS\n-.PP\n-Defaults to the main class name.\n-.PP\n-May only use alphanumeric (A-Z,a-z,0-9), hyphen (-), and period (.)\n-characters.\n-.RE\n-.TP\n-\\f[V]--mac-package-name\\f[R] \\f[I]name\\f[R]\n-Name of the application as it appears in the Menu Bar\n-.RS\n-.PP\n-This can be different from the application name.\n-.PP\n-This name must be less than 16 characters long and be suitable for\n-displaying in the menu bar and the application Info window.\n-Defaults to the application name.\n-.RE\n-.TP\n-\\f[V]--mac-package-signing-prefix\\f[R] \\f[I]prefix\\f[R]\n-When signing the application package, this value is prefixed to all\n-components that need to be signed that don\\[aq]t have an existing\n-package identifier.\n-.TP\n-\\f[V]--mac-sign\\f[R]\n-Request that the package or the predefined application image be signed.\n-.TP\n-\\f[V]--mac-signing-keychain\\f[R] \\f[I]keychain-name\\f[R]\n-Name of the keychain to search for the signing identity\n-.RS\n-.PP\n-If not specified, the standard keychains are used.\n-.RE\n-.TP\n-\\f[V]--mac-signing-key-user-name\\f[R] \\f[I]name\\f[R]\n-Team or user name portion in Apple signing identities\n-.TP\n-\\f[V]--mac-app-store\\f[R]\n-Indicates that the jpackage output is intended for the Mac App Store.\n-.TP\n-\\f[V]--mac-entitlements\\f[R] \\f[I]path\\f[R]\n-Path to file containing entitlements to use when signing executables and\n-libraries in the bundle\n-.TP\n-\\f[V]--mac-app-category\\f[R] \\f[I]category\\f[R]\n-String used to construct LSApplicationCategoryType in application plist\n-.RS\n-.PP\n-The default value is \\[dq]utilities\\[dq].\n-.RE\n-.SS Options for creating the application package:\n-.TP\n-\\f[V]--about-url\\f[R] \\f[I]url\\f[R]\n-URL of the application\\[aq]s home page\n-.TP\n-\\f[V]--app-image\\f[R] \\f[I]directory\\f[R]\n-Location of the predefined application image that is used to build an\n-installable package (on all platforms) or to be signed (on macOS)\n-.RS\n-.PP\n-(absolute path or relative to the current directory)\n-.RE\n-.TP\n-\\f[V]--file-associations\\f[R] \\f[I]path\\f[R]\n-Path to a Properties file that contains list of key, value pairs\n-.RS\n-.PP\n-(absolute path or relative to the current directory)\n-.PP\n-The keys \\[dq]extension\\[dq], \\[dq]mime-type\\[dq], \\[dq]icon\\[dq], and\n-\\[dq]description\\[dq] can be used to describe the association.\n-.PP\n-This option can be used multiple times.\n-.RE\n-.TP\n-\\f[V]--install-dir\\f[R] \\f[I]path\\f[R]\n-Absolute path of the installation directory of the application (on macOS\n-or linux), or relative sub-path of the installation directory such as\n-\\[dq]Program Files\\[dq] or \\[dq]AppData\\[dq] (on Windows)\n-.TP\n-\\f[V]--license-file\\f[R] \\f[I]path\\f[R]\n-Path to the license file\n-.RS\n-.PP\n-(absolute path or relative to the current directory)\n-.RE\n-.TP\n-\\f[V]--runtime-image\\f[R] \\f[I]path\\f[R]\n-Path of the predefined runtime image to install\n-.RS\n-.PP\n-(absolute path or relative to the current directory)\n-.PP\n-Option is required when creating a runtime installer.\n-.RE\n-.TP\n-\\f[V]--launcher-as-service\\f[R]\n-Request to create an installer that will register the main application\n-launcher as a background service-type application.\n-.SS Platform dependent options for creating the application package:\n-.SS Windows platform options (available only when running on Windows):\n-.TP\n-\\f[V]--win-dir-chooser\\f[R]\n-Adds a dialog to enable the user to choose a directory in which the\n-product is installed.\n-.TP\n-\\f[V]--win-help-url\\f[R] \\f[I]url\\f[R]\n-URL where user can obtain further information or technical support\n-.TP\n-\\f[V]--win-menu\\f[R]\n-Request to add a Start Menu shortcut for this application\n-.TP\n-\\f[V]--win-menu-group\\f[R] \\f[I]menu-group-name\\f[R]\n-Start Menu group this application is placed in\n-.TP\n-\\f[V]--win-per-user-install\\f[R]\n-Request to perform an install on a per-user basis\n-.TP\n-\\f[V]--win-shortcut\\f[R]\n-Request to create a desktop shortcut for this application\n-.TP\n-\\f[V]--win-shortcut-prompt\\f[R]\n-Adds a dialog to enable the user to choose if shortcuts will be created\n-by installer\n-.TP\n-\\f[V]--win-update-url\\f[R] \\f[I]url\\f[R]\n-URL of available application update information\n-.TP\n-\\f[V]--win-upgrade-uuid\\f[R] \\f[I]id\\f[R]\n-UUID associated with upgrades for this package\n-.SS Linux platform options (available only when running on Linux):\n-.TP\n-\\f[V]--linux-package-name\\f[R] \\f[I]name\\f[R]\n-Name for Linux package\n-.RS\n-.PP\n-Defaults to the application name.\n-.RE\n-.TP\n-\\f[V]--linux-deb-maintainer\\f[R] \\f[I]email-address\\f[R]\n-Maintainer for .deb bundle\n-.TP\n-\\f[V]--linux-menu-group\\f[R] \\f[I]menu-group-name\\f[R]\n-Menu group this application is placed in\n-.TP\n-\\f[V]--linux-package-deps\\f[R]\n-Required packages or capabilities for the application\n-.TP\n-\\f[V]--linux-rpm-license-type\\f[R] \\f[I]type\\f[R]\n-Type of the license (\\[dq]License: \\f[I]value\\f[R]\\[dq] of the RPM\n-\\&.spec)\n-.TP\n-\\f[V]--linux-app-release\\f[R] \\f[I]release\\f[R]\n-Release value of the RPM <name>.spec file or Debian revision value of\n-the DEB control file\n-.TP\n-\\f[V]--linux-app-category\\f[R] \\f[I]category-value\\f[R]\n-Group value of the RPM \/.spec file or Section value of DEB control file\n-.TP\n-\\f[V]--linux-shortcut\\f[R]\n-Creates a shortcut for the application.\n-.SS macOS platform options (available only when running on macOS):\n-.TP\n-\\f[V]--mac-dmg-content\\f[R] \\f[I]additional-content\\f[R] [\\f[V],\\f[R]\\f[I]additional-content\\f[R]...]\n-Include all the referenced content in the dmg.\n-.RS\n-.PP\n-This option can be used more than once.\n-.RE\n-.SH JPACKAGE EXAMPLES\n-.IP\n-.nf\n-\\f[CB]\n-Generate an application package suitable for the host system:\n-\\f[R]\n-.fi\n-.IP\n-.nf\n-\\f[CB]\n-For a modular application:\n-    jpackage -n name -p modulePath -m moduleName\/className\n-For a non-modular application:\n-    jpackage -i inputDir -n name \\[rs]\n-        --main-class className --main-jar myJar.jar\n-From a pre-built application image:\n-    jpackage -n name --app-image appImageDir\n-\\f[R]\n-.fi\n-.IP\n-.nf\n-\\f[CB]\n-Generate an application image:\n-\\f[R]\n-.fi\n-.IP\n-.nf\n-\\f[CB]\n-For a modular application:\n-    jpackage --type app-image -n name -p modulePath \\[rs]\n-        -m moduleName\/className\n-For a non-modular application:\n-    jpackage --type app-image -i inputDir -n name \\[rs]\n-        --main-class className --main-jar myJar.jar\n-To provide your own options to jlink, run jlink separately:\n-    jlink --output appRuntimeImage -p modulePath \\[rs]\n-        --add-modules moduleName \\[rs]\n-        --no-header-files [<additional jlink options>...]\n-    jpackage --type app-image -n name \\[rs]\n-        -m moduleName\/className --runtime-image appRuntimeImage\n-\\f[R]\n-.fi\n-.IP\n-.nf\n-\\f[CB]\n-Generate a Java runtime package:\n-\\f[R]\n-.fi\n-.IP\n-.nf\n-\\f[CB]\n-jpackage -n name --runtime-image <runtime-image>\n-\\f[R]\n-.fi\n-.IP\n-.nf\n-\\f[CB]\n-Sign the predefined application image (on macOS):\n-\\f[R]\n-.fi\n-.IP\n-.nf\n-\\f[CB]\n-jpackage --type app-image --app-image <app-image> \\[rs]\n-    --mac-sign [<additional signing options>...]\n-\n-Note: the only additional options that are permitted in this mode are:\n-      the set of additional mac signing options and --verbose\n-\\f[R]\n-.fi\n-.SH JPACKAGE RESOURCE DIRECTORY\n-.PP\n-Icons, template files, and other resources of jpackage can be\n-over-ridden by adding replacement resources to this directory.\n-jpackage will lookup files by specific names in the resource directory.\n-.SS Resource directory files considered only when running on Linux:\n-.TP\n-\\f[V]<launcher-name>.png\\f[R]\n-Application launcher icon\n-.RS\n-.PP\n-Default resource is \\f[I]JavaApp.png\\f[R]\n-.RE\n-.TP\n-\\f[V]<launcher-name>.desktop\\f[R]\n-A desktop file to be used with \\f[V]xdg-desktop-menu\\f[R] command\n-.RS\n-.PP\n-Considered with application launchers registered for file associations\n-and\/or have an icon\n-.PP\n-Default resource is \\f[I]template.desktop\\f[R]\n-.RE\n-.SS Resource directory files considered only when building Linux DEB\/RPM installer:\n-.TP\n-\\f[V]<package-name>-<launcher-name>.service\\f[R]\n-systemd unit file for application launcher registered as a background\n-service-type application\n-.RS\n-.PP\n-Default resource is \\f[I]unit-template.service\\f[R]\n-.RE\n-.SS Resource directory files considered only when building Linux RPM installer:\n-.TP\n-\\f[V]<package-name>.spec\\f[R]\n-RPM spec file\n-.RS\n-.PP\n-Default resource is \\f[I]template.spec\\f[R]\n-.RE\n-.SS Resource directory files considered only when building Linux DEB installer:\n-.TP\n-\\f[V]control\\f[R]\n-Control file\n-.RS\n-.PP\n-Default resource is \\f[I]template.control\\f[R]\n-.RE\n-.TP\n-\\f[V]copyright\\f[R]\n-Copyright file\n-.RS\n-.PP\n-Default resource is \\f[I]template.copyright\\f[R]\n-.RE\n-.TP\n-\\f[V]preinstall\\f[R]\n-Pre-install shell script\n-.RS\n-.PP\n-Default resource is \\f[I]template.preinstall\\f[R]\n-.RE\n-.TP\n-\\f[V]prerm\\f[R]\n-Pre-remove shell script\n-.RS\n-.PP\n-Default resource is \\f[I]template.prerm\\f[R]\n-.RE\n-.TP\n-\\f[V]postinstall\\f[R]\n-Post-install shell script\n-.RS\n-.PP\n-Default resource is \\f[I]template.postinstall\\f[R]\n-.RE\n-.TP\n-\\f[V]postrm\\f[R]\n-Post-remove shell script\n-.RS\n-.PP\n-Default resource is \\f[I]template.postrm\\f[R]\n-.RE\n-.SS Resource directory files considered only when running on Windows:\n-.TP\n-\\f[V]<launcher-name>.ico\\f[R]\n-Application launcher icon\n-.RS\n-.PP\n-Default resource is \\f[I]JavaApp.ico\\f[R]\n-.RE\n-.TP\n-\\f[V]<launcher-name>.properties\\f[R]\n-Properties file for application launcher executable\n-.RS\n-.PP\n-Default resource is \\f[I]WinLauncher.template\\f[R]\n-.RE\n-.SS Resource directory files considered only when building Windows MSI\/EXE installer:\n-.TP\n-\\f[V]<application-name>-post-image.wsf\\f[R]\n-A Windows Script File (WSF) to run after building application image\n-.TP\n-\\f[V]main.wxs\\f[R]\n-Main WiX project file\n-.RS\n-.PP\n-Default resource is \\f[I]main.wxs\\f[R]\n-.RE\n-.TP\n-\\f[V]overrides.wxi\\f[R]\n-Overrides WiX project file\n-.RS\n-.PP\n-Default resource is \\f[I]overrides.wxi\\f[R]\n-.RE\n-.TP\n-\\f[V]service-installer.exe\\f[R]\n-Service installer executable\n-.RS\n-.PP\n-Considered if some application launchers are registered as background\n-service-type applications\n-.RE\n-.TP\n-\\f[V]<launcher-name>-service-install.wxi\\f[R]\n-Service installer WiX project file\n-.RS\n-.PP\n-Considered if some application launchers are registered as background\n-service-type applications\n-.PP\n-Default resource is \\f[I]service-install.wxi\\f[R]\n-.RE\n-.TP\n-\\f[V]<launcher-name>-service-config.wxi\\f[R]\n-Service installer WiX project file\n-.RS\n-.PP\n-Considered if some application launchers are registered as background\n-service-type applications\n-.PP\n-Default resource is \\f[I]service-config.wxi\\f[R]\n-.RE\n-.TP\n-\\f[V]InstallDirNotEmptyDlg.wxs\\f[R]\n-WiX project file for installer UI dialog checking installation directory\n-doesn\\[aq]t exist or is empty\n-.RS\n-.PP\n-Default resource is \\f[I]InstallDirNotEmptyDlg.wxs\\f[R]\n-.RE\n-.TP\n-\\f[V]ShortcutPromptDlg.wxs\\f[R]\n-WiX project file for installer UI dialog configuring shortcuts\n-.RS\n-.PP\n-Default resource is \\f[I]ShortcutPromptDlg.wxs\\f[R]\n-.RE\n-.TP\n-\\f[V]bundle.wxf\\f[R]\n-WiX project file with the hierarchy of components of application image\n-.TP\n-\\f[V]ui.wxf\\f[R]\n-WiX project file for installer UI\n-.SS Resource directory files considered only when building Windows EXE installer:\n-.TP\n-\\f[V]WinInstaller.properties\\f[R]\n-Properties file for the installer executable\n-.RS\n-.PP\n-Default resource is \\f[I]WinInstaller.template\\f[R]\n-.RE\n-.TP\n-\\f[V]<package-name>-post-msi.wsf\\f[R]\n-A Windows Script File (WSF) to run after building embedded MSI installer\n-for EXE installer\n-.SS Resource directory files considered only when running on macOS:\n-.TP\n-\\f[V]<launcher-name>.icns\\f[R]\n-Application launcher icon\n-.RS\n-.PP\n-Default resource is \\f[I]JavaApp.icns\\f[R]\n-.RE\n-.TP\n-\\f[V]Info.plist\\f[R]\n-Application property list file\n-.RS\n-.PP\n-Default resource is \\f[I]Info-lite.plist.template\\f[R]\n-.RE\n-.TP\n-\\f[V]Runtime-Info.plist\\f[R]\n-Java Runtime property list file\n-.RS\n-.PP\n-Default resource is \\f[I]Runtime-Info.plist.template\\f[R]\n-.RE\n-.TP\n-\\f[V]<application-name>.entitlements\\f[R]\n-Signing entitlements property list file\n-.RS\n-.PP\n-Default resource is \\f[I]sandbox.plist\\f[R]\n-.RE\n-.SS Resource directory files considered only when building macOS PKG\/DMG installer:\n-.TP\n-\\f[V]<package-name>-post-image.sh\\f[R]\n-Shell script to run after building application image\n-.SS Resource directory files considered only when building macOS PKG installer:\n-.TP\n-\\f[V]uninstaller\\f[R]\n-Uninstaller shell script\n-.RS\n-.PP\n-Considered if some application launchers are registered as background\n-service-type applications\n-.PP\n-Default resource is \\f[I]uninstall.command.template\\f[R]\n-.RE\n-.TP\n-\\f[V]preinstall\\f[R]\n-Pre-install shell script\n-.RS\n-.PP\n-Default resource is \\f[I]preinstall.template\\f[R]\n-.RE\n-.TP\n-\\f[V]postinstall\\f[R]\n-Post-install shell script\n-.RS\n-.PP\n-Default resource is \\f[I]postinstall.template\\f[R]\n-.RE\n-.TP\n-\\f[V]services-preinstall\\f[R]\n-Pre-install shell script for services package\n-.RS\n-.PP\n-Considered if some application launchers are registered as background\n-service-type applications\n-.PP\n-Default resource is \\f[I]services-preinstall.template\\f[R]\n-.RE\n-.TP\n-\\f[V]services-postinstall\\f[R]\n-Post-install shell script for services package\n-.RS\n-.PP\n-Considered if some application launchers are registered as background\n-service-type applications\n-.PP\n-Default resource is \\f[I]services-postinstall.template\\f[R]\n-.RE\n-.TP\n-\\f[V]<package-name>-background.png\\f[R]\n-Background image\n-.RS\n-.PP\n-Default resource is \\f[I]background_pkg.png\\f[R]\n-.RE\n-.TP\n-\\f[V]<package-name>-background-darkAqua.png\\f[R]\n-Dark background image\n-.RS\n-.PP\n-Default resource is \\f[I]background_pkg.png\\f[R]\n-.RE\n-.TP\n-\\f[V]product-def.plist\\f[R]\n-Package property list file\n-.RS\n-.PP\n-Default resource is \\f[I]product-def.plist\\f[R]\n-.RE\n-.TP\n-\\f[V]<package-name>-<launcher-name>.plist\\f[R]\n-launchd property list file for application launcher registered as a\n-background service-type application\n-.RS\n-.PP\n-Default resource is \\f[I]launchd.plist.template\\f[R]\n-.RE\n-.SS Resource directory files considered only when building macOS DMG installer:\n-.TP\n-\\f[V]<package-name>-dmg-setup.scpt\\f[R]\n-Setup AppleScript script\n-.RS\n-.PP\n-Default resource is \\f[I]DMGsetup.scpt\\f[R]\n-.RE\n-.TP\n-\\f[V]<package-name>-license.plist\\f[R]\n-License property list file\n-.RS\n-.PP\n-Default resource is \\f[I]lic_template.plist\\f[R]\n-.RE\n-.TP\n-\\f[V]<package-name>-background.tiff\\f[R]\n-Background image\n-.RS\n-.PP\n-Default resource is \\f[I]background_dmg.tiff\\f[R]\n-.RE\n-.TP\n-\\f[V]<package-name>-volume.icns\\f[R]\n-Volume icon\n-.RS\n-.PP\n-Default resource is \\f[I]JavaApp.icns\\f[R]\n-.RE\n","filename":"src\/jdk.jpackage\/share\/man\/jpackage.1","additions":0,"deletions":834,"binary":false,"changes":834,"status":"deleted"},{"patch":"@@ -0,0 +1,791 @@\n+---\n+# Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JPACKAGE(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jpackage - tool for packaging self-contained Java applications.\n+\n+## Synopsis\n+\n+`jpackage` \\[*options*\\]\n+\n+\n+*options*\n+:   Command-line options separated by spaces. See [jpackage Options].\n+\n+## Description\n+\n+The `jpackage` tool will take as input a Java application and a Java run-time image, and produce a Java application image that includes all the necessary dependencies. It will be able to produce a native package in a platform-specific format, such as an exe on Windows or a dmg on macOS. Each format must be built on the platform it runs on, there is no cross-platform support. The tool will have options that allow packaged applications to be customized in various ways.\n+\n+\n+## jpackage Options\n+\n+### Generic Options:\n+\n+`@`*filename*\n+\n+:   Read options from a file.\n+\n+    This option can be used multiple times.\n+\n+<a id=\"option-type\">`--type` or `-t` *type*<\/a>\n+:   The type of package to create\n+\n+    Valid values are: {\"app-image\", \"exe\", \"msi\", \"rpm\", \"deb\", \"pkg\", \"dmg\"}\n+\n+    If this option is not specified a platform dependent\n+    default type will be created.\n+\n+<a id=\"option-app-version\">`--app-version` *version*<\/a>\n+\n+:   Version of the application and\/or package\n+\n+<a id=\"option-copyright\">`--copyright` *copyright*<\/a>\n+\n+:   Copyright for the application\n+\n+<a id=\"option-description\">`--description` *description*<\/a>\n+\n+:   Description of the application\n+\n+<a id=\"option-help\">`--help` or `-h`<\/a>\n+\n+:   Print the usage text with a list and description of each valid\n+    option for the current platform to the output stream, and exit.\n+\n+<a id=\"option-icon\">`--icon` *path*<\/a>\n+\n+:   Path of the icon of the application package\n+\n+    (absolute path or relative to the current directory)\n+\n+<a id=\"option-name\">`--name` or `-n` *name*<\/a>\n+\n+:   Name of the application and\/or package\n+\n+<a id=\"option-dest\">`--dest` or `-d` *destination*<\/a>\n+\n+:   Path where generated output file is placed\n+\n+    (absolute path or relative to the current directory).\n+\n+    Defaults to the current working directory.\n+\n+<a id=\"option-resource-dir\">`--resource-dir` *path*<\/a>\n+\n+:   Path to override jpackage resources\n+\n+    (absolute path or relative to the current directory)\n+\n+    Icons, template files, and other resources of jpackage can be\n+    over-ridden by adding replacement resources to this directory.\n+\n+<a id=\"option-temp\">`--temp` *directory*<\/a>\n+\n+:   Path of a new or empty directory used to create temporary files\n+\n+    (absolute path or relative to the current directory)\n+\n+    If specified, the temp dir will not be removed upon the task\n+    completion and must be removed manually.\n+\n+    If not specified, a temporary directory will be created and\n+    removed upon the task completion.\n+\n+<a id=\"option-vendor\">`--vendor` *vendor*<\/a>\n+\n+:   Vendor of the application\n+\n+<a id=\"option-verbose\">`--verbose`<\/a>\n+\n+:   Enables verbose output.\n+\n+<a id=\"option-version\">`--version`<\/a>\n+\n+:   Print the product version to the output stream and exit.\n+\n+### Options for creating the runtime image:\n+\n+\n+<a id=\"option-add-modules\">`--add-modules` *module-name* \\[`,`*module-name*...\\]<\/a>\n+\n+:   A comma (\",\") separated list of modules to add\n+\n+    This module list, along with the main module (if specified)\n+    will be passed to jlink as the --add-module argument.\n+    If not specified, either just the main module (if --module is\n+    specified), or the default set of modules (if --main-jar is\n+    specified) are used.\n+\n+    This option can be used multiple times.\n+\n+<a id=\"option-module-path\">`--module-path` or `-p` *module-path* \\[`,`*module-path*...\\]<\/a>\n+\n+:   A File.pathSeparator separated list of paths\n+\n+    Each path is either a directory of modules or the path to a\n+    modular jar, and is absolute or relative to the current directory.\n+\n+    This option can be used multiple times.\n+\n+<a id=\"option-jlink-options\">`--jlink-options` *options*<\/a>\n+\n+:   A space separated list of options to pass to jlink\n+\n+    If not specified, defaults to \"--strip-native-commands\n+    --strip-debug --no-man-pages --no-header-files\"\n+\n+    This option can be used multiple times.\n+\n+<a id=\"option-runtime-image\">`--runtime-image` *directory*<\/a>\n+\n+:   Path of the predefined runtime image that will be copied into\n+    the application image\n+\n+    (absolute path or relative to the current directory)\n+\n+    If --runtime-image is not specified, jpackage will run jlink to\n+    create the runtime image using options specified by --jlink-options.\n+\n+### Options for creating the application image:\n+\n+<a id=\"option-input\">`--input` or `-i` *directory*<\/a>\n+\n+:   Path of the input directory that contains the files to be packaged\n+\n+    (absolute path or relative to the current directory)\n+\n+    All files in the input directory will be packaged into the\n+    application image.\n+\n+<a id=\"option-app-content\">`--app-content` *additional-content* \\[`,`*additional-content*...\\]<\/a>\n+\n+:   A comma separated list of paths to files and\/or directories\n+    to add to the application payload.\n+\n+    This option can be used more than once.\n+\n+### Options for creating the application launcher(s):\n+\n+\n+<a id=\"option-add-launcher\">`--add-launcher` *name*=*path*<\/a>\n+\n+:   Name of launcher, and a path to a Properties file that contains\n+    a list of key, value pairs\n+\n+    (absolute path or relative to the current directory)\n+\n+    The keys \"module\", \"main-jar\", \"main-class\", \"description\",\n+    \"arguments\", \"java-options\", \"icon\", \"launcher-as-service\",\n+    \"win-console\", \"win-shortcut\", \"win-menu\", and \"linux-shortcut\"\n+    can be used.\n+\n+    These options are added to, or used to overwrite, the original\n+    command line options to build an additional alternative launcher.\n+    The main application launcher will be built from the command line\n+    options. Additional alternative launchers can be built using\n+    this option, and this option can be used multiple times to\n+    build multiple additional launchers.\n+\n+<a id=\"option-arguments\">`--arguments` *arguments*<\/a>\n+\n+:   Command line arguments to pass to the main class if no command\n+    line arguments are given to the launcher\n+\n+    This option can be used multiple times.\n+\n+<a id=\"option-java-options\">`--java-options` *options*<\/a>\n+\n+:   Options to pass to the Java runtime\n+\n+    This option can be used multiple times.\n+\n+<a id=\"option-main-class\">`--main-class` *class-name*<\/a>\n+\n+:   Qualified name of the application main class to execute\n+\n+    This option can only be used if --main-jar is specified.\n+\n+<a id=\"option-main-jar\">`--main-jar` *main-jar*<\/a>\n+\n+:   The main JAR of the application; containing the main class\n+    (specified as a path relative to the input path)\n+\n+    Either --module or --main-jar option can be specified but not\n+    both.\n+\n+<a id=\"option-module\">`--module` or `-m` *module-name*[\/*main-class*]<\/a>\n+\n+:   The main module (and optionally main class) of the application\n+\n+    This module must be located on the module path.\n+\n+    When this option is specified, the main module will be linked\n+    in the Java runtime image.  Either --module or --main-jar\n+    option can be specified but not both.\n+\n+\n+### Platform dependent options for creating the application launcher:\n+\n+\n+#### Windows platform options (available only when running on Windows):\n+\n+<a id=\"option-win-console\">`--win-console`<\/a>\n+\n+:   Creates a console launcher for the application, should be\n+    specified for application which requires console interactions\n+\n+#### macOS platform options (available only when running on macOS):\n+\n+<a id=\"option-mac-package-identifier\">`--mac-package-identifier` *identifier*<\/a>\n+\n+:   An identifier that uniquely identifies the application for macOS\n+\n+    Defaults to the main class name.\n+\n+    May only use alphanumeric (A-Z,a-z,0-9), hyphen (-),\n+    and period (.) characters.\n+\n+<a id=\"option-mac-package-name\">`--mac-package-name` *name*<\/a>\n+\n+:   Name of the application as it appears in the Menu Bar\n+\n+    This can be different from the application name.\n+\n+    This name must be less than 16 characters long and be suitable for\n+    displaying in the menu bar and the application Info window.\n+    Defaults to the application name.\n+\n+<a id=\"option-mac-package-signing-prefix\">`--mac-package-signing-prefix` *prefix*<\/a>\n+\n+:   When signing the application package, this value is prefixed to all\n+    components that need to be signed that don't have\n+    an existing package identifier.\n+\n+<a id=\"option-mac-sign\">`--mac-sign`<\/a>\n+\n+:   Request that the package or the predefined application image be signed.\n+\n+<a id=\"option-mac-signing-keychain\">`--mac-signing-keychain` *keychain-name*<\/a>\n+\n+:   Name of the keychain to search for the signing identity\n+\n+    If not specified, the standard keychains are used.\n+\n+<a id=\"option-mac-signing-key-user-name\">`--mac-signing-key-user-name` *name*<\/a>\n+\n+:   Team or user name portion in Apple signing identities\n+\n+<a id=\"option-mac-app-store\">`--mac-app-store`<\/a>\n+\n+:   Indicates that the jpackage output is intended for the Mac App Store.\n+\n+<a id=\"option-mac-entitlements\">`--mac-entitlements` *path*<\/a>\n+\n+:   Path to file containing entitlements to use when signing executables and libraries in the bundle\n+\n+<a id=\"option-mac-app-category\">`--mac-app-category` *category*<\/a>\n+\n+:   String used to construct LSApplicationCategoryType in application plist\n+\n+    The default value is \"utilities\".\n+\n+### Options for creating the application package:\n+\n+<a id=\"option-about-url\">`--about-url` *url*<\/a>\n+\n+:   URL of the application's home page\n+\n+<a id=\"option-app-image\">`--app-image` *directory*<\/a>\n+\n+:   Location of the predefined application image that is used to build an installable package\n+    (on all platforms) or to be signed (on macOS)\n+\n+    (absolute path or relative to the current directory)\n+\n+<a id=\"option-file-associations\">`--file-associations` *path*<\/a>\n+\n+:   Path to a Properties file that contains list of key, value pairs\n+\n+    (absolute path or relative to the current directory)\n+\n+    The keys \"extension\", \"mime-type\", \"icon\", and \"description\"\n+    can be used to describe the association.\n+\n+    This option can be used multiple times.\n+\n+<a id=\"option-install-dir\">`--install-dir` *path*<\/a>\n+\n+:   Absolute path of the installation directory of the application (on macOS\n+    or linux), or relative sub-path of the installation directory\n+    such as \"Program Files\" or \"AppData\" (on Windows)\n+\n+<a id=\"option-license-file\">`--license-file` *path*<\/a>\n+\n+:   Path to the license file\n+\n+    (absolute path or relative to the current directory)\n+\n+<a id=\"option-application-package-runtime-image\">`--runtime-image` *path*<\/a>\n+\n+:   Path of the predefined runtime image to install\n+\n+    (absolute path or relative to the current directory)\n+\n+    Option is required when creating a runtime installer.\n+\n+<a id=\"option-launcher-as-service\">`--launcher-as-service`<\/a>\n+\n+:   Request to create an installer that will register the main\n+    application launcher as a background service-type application.\n+\n+\n+### Platform dependent options for creating the application package:\n+\n+\n+#### Windows platform options (available only when running on Windows):\n+\n+<a id=\"option-win-dir-chooser\">`--win-dir-chooser`<\/a>\n+\n+:   Adds a dialog to enable the user to choose a directory in which\n+    the product is installed.\n+\n+<a id=\"option-win-help-url\">`--win-help-url` *url*<\/a>\n+\n+:   URL where user can obtain further information or technical support\n+\n+<a id=\"option-win-menu\">`--win-menu`<\/a>\n+\n+:   Request to add a Start Menu shortcut for this application\n+\n+<a id=\"option-win-menu-group\">`--win-menu-group` *menu-group-name*<\/a>\n+\n+:   Start Menu group this application is placed in\n+\n+<a id=\"option-win-per-user-install\">`--win-per-user-install`<\/a>\n+\n+:   Request to perform an install on a per-user basis\n+\n+<a id=\"option-win-shortcut\">`--win-shortcut`<\/a>\n+\n+:   Request to create a desktop shortcut for this application\n+\n+<a id=\"option-win-shortcut-prompt\">`--win-shortcut-prompt`<\/a>\n+\n+:   Adds a dialog to enable the user to choose if shortcuts will be created by installer\n+\n+<a id=\"option-win-update-url\">`--win-update-url` *url*<\/a>\n+\n+:   URL of available application update information\n+\n+<a id=\"option-win-upgrade-uuid\">`--win-upgrade-uuid` *id*<\/a>\n+\n+:   UUID associated with upgrades for this package\n+\n+#### Linux platform options (available only when running on Linux):\n+\n+<a id=\"option-linux-package-name\">`--linux-package-name` *name*<\/a>\n+\n+:   Name for Linux package\n+\n+    Defaults to the application name.\n+\n+<a id=\"option-linux-deb-maintainer\">`--linux-deb-maintainer` *email-address*<\/a>\n+\n+:   Maintainer for .deb bundle\n+\n+<a id=\"option-linux-menu-group\">`--linux-menu-group` *menu-group-name*<\/a>\n+\n+:   Menu group this application is placed in\n+\n+<a id=\"option-linux-package-deps\">`--linux-package-deps`<\/a>\n+\n+:   Required packages or capabilities for the application\n+\n+<a id=\"option-linux-rpm-license-type\">`--linux-rpm-license-type` *type*<\/a>\n+\n+:   Type of the license (\"License: *value*\" of the RPM .spec)\n+\n+<a id=\"option-linux-app-release\">`--linux-app-release` *release*<\/a>\n+\n+:   Release value of the RPM \\<name\\>.spec file or\n+    Debian revision value of the DEB control file\n+\n+<a id=\"option-linux-app-category\">`--linux-app-category` *category-value*<\/a>\n+\n+:   Group value of the RPM \/<name\/>.spec file or\n+    Section value of DEB control file\n+\n+<a id=\"option-linux-shortcut\">`--linux-shortcut`<\/a>\n+\n+:   Creates a shortcut for the application.\n+\n+#### macOS platform options (available only when running on macOS):\n+\n+<a id=\"option-mac-dmg-content\">`--mac-dmg-content` *additional-content* \\[`,`*additional-content*...\\]<\/a>\n+\n+:   Include all the referenced content in the dmg.\n+\n+    This option can be used more than once.\n+\n+## jpackage Examples\n+\n+```\n+Generate an application package suitable for the host system:\n+```\n+    For a modular application:\n+        jpackage -n name -p modulePath -m moduleName\/className\n+    For a non-modular application:\n+        jpackage -i inputDir -n name \\\n+            --main-class className --main-jar myJar.jar\n+    From a pre-built application image:\n+        jpackage -n name --app-image appImageDir\n+\n+```\n+Generate an application image:\n+```\n+    For a modular application:\n+        jpackage --type app-image -n name -p modulePath \\\n+            -m moduleName\/className\n+    For a non-modular application:\n+        jpackage --type app-image -i inputDir -n name \\\n+            --main-class className --main-jar myJar.jar\n+    To provide your own options to jlink, run jlink separately:\n+        jlink --output appRuntimeImage -p modulePath \\\n+            --add-modules moduleName \\\n+            --no-header-files [<additional jlink options>...]\n+        jpackage --type app-image -n name \\\n+            -m moduleName\/className --runtime-image appRuntimeImage\n+\n+```\n+Generate a Java runtime package:\n+```\n+    jpackage -n name --runtime-image <runtime-image>\n+\n+```\n+Sign the predefined application image (on macOS):\n+```\n+    jpackage --type app-image --app-image <app-image> \\\n+        --mac-sign [<additional signing options>...]\n+\n+    Note: the only additional options that are permitted in this mode are:\n+          the set of additional mac signing options and --verbose\n+\n+\n+## jpackage resource directory\n+\n+Icons, template files, and other resources of jpackage can be over-ridden by\n+adding replacement resources to this directory.\n+jpackage will lookup files by specific names in the resource directory.\n+\n+\n+### Resource directory files considered only when running on Linux:\n+\n+`<launcher-name>.png`\n+\n+:   Application launcher icon\n+\n+    Default resource is *JavaApp.png*\n+\n+`<launcher-name>.desktop`\n+\n+:   A desktop file to be used with `xdg-desktop-menu` command\n+\n+    Considered with application launchers registered for file associations and\/or have an icon\n+\n+    Default resource is *template.desktop*\n+\n+\n+#### Resource directory files considered only when building Linux DEB\/RPM installer:\n+\n+`<package-name>-<launcher-name>.service`\n+\n+:   systemd unit file for application launcher registered as a background service-type application\n+\n+    Default resource is *unit-template.service*\n+\n+\n+#### Resource directory files considered only when building Linux RPM installer:\n+\n+`<package-name>.spec`\n+\n+:   RPM spec file\n+\n+    Default resource is *template.spec*\n+\n+\n+#### Resource directory files considered only when building Linux DEB installer:\n+\n+`control`\n+\n+:   Control file\n+\n+    Default resource is *template.control*\n+\n+`copyright`\n+\n+:   Copyright file\n+\n+    Default resource is *template.copyright*\n+\n+`preinstall`\n+\n+:   Pre-install shell script\n+\n+    Default resource is *template.preinstall*\n+\n+`prerm`\n+\n+:   Pre-remove shell script\n+\n+    Default resource is *template.prerm*\n+\n+`postinstall`\n+\n+:   Post-install shell script\n+\n+    Default resource is *template.postinstall*\n+\n+`postrm`\n+\n+:   Post-remove shell script\n+\n+    Default resource is *template.postrm*\n+\n+\n+### Resource directory files considered only when running on Windows:\n+\n+`<launcher-name>.ico`\n+\n+:   Application launcher icon\n+\n+    Default resource is *JavaApp.ico*\n+\n+`<launcher-name>.properties`\n+\n+:   Properties file for application launcher executable\n+\n+    Default resource is *WinLauncher.template*\n+\n+\n+#### Resource directory files considered only when building Windows MSI\/EXE installer:\n+\n+`<application-name>-post-image.wsf`\n+\n+:   A Windows Script File (WSF) to run after building application image\n+\n+`main.wxs`\n+\n+:   Main WiX project file\n+\n+    Default resource is *main.wxs*\n+\n+`overrides.wxi`\n+\n+:   Overrides WiX project file\n+\n+    Default resource is *overrides.wxi*\n+\n+`service-installer.exe`\n+\n+:   Service installer executable\n+\n+    Considered if some application launchers are registered as background service-type applications\n+\n+`<launcher-name>-service-install.wxi`\n+\n+:   Service installer WiX project file\n+\n+    Considered if some application launchers are registered as background service-type applications\n+\n+    Default resource is *service-install.wxi*\n+\n+`<launcher-name>-service-config.wxi`\n+\n+:   Service installer WiX project file\n+\n+    Considered if some application launchers are registered as background service-type applications\n+\n+    Default resource is *service-config.wxi*\n+\n+`InstallDirNotEmptyDlg.wxs`\n+\n+:   WiX project file for installer UI dialog checking installation directory doesn't exist or is empty\n+\n+    Default resource is *InstallDirNotEmptyDlg.wxs*\n+\n+`ShortcutPromptDlg.wxs`\n+\n+:   WiX project file for installer UI dialog configuring shortcuts\n+\n+    Default resource is *ShortcutPromptDlg.wxs*\n+\n+`bundle.wxf`\n+\n+:   WiX project file with the hierarchy of components of application image\n+\n+`ui.wxf`\n+\n+:   WiX project file for installer UI\n+\n+\n+#### Resource directory files considered only when building Windows EXE installer:\n+\n+`WinInstaller.properties`\n+\n+:   Properties file for the installer executable\n+\n+    Default resource is *WinInstaller.template*\n+\n+`<package-name>-post-msi.wsf`\n+\n+:   A Windows Script File (WSF) to run after building embedded MSI installer for EXE installer\n+\n+\n+### Resource directory files considered only when running on macOS:\n+\n+`<launcher-name>.icns`\n+\n+:   Application launcher icon\n+\n+    Default resource is *JavaApp.icns*\n+\n+`Info.plist`\n+\n+:   Application property list file\n+\n+    Default resource is *Info-lite.plist.template*\n+\n+`Runtime-Info.plist`\n+\n+:   Java Runtime property list file\n+\n+    Default resource is *Runtime-Info.plist.template*\n+\n+`<application-name>.entitlements`\n+\n+:   Signing entitlements property list file\n+\n+    Default resource is *sandbox.plist*\n+\n+\n+#### Resource directory files considered only when building macOS PKG\/DMG installer:\n+\n+`<package-name>-post-image.sh`\n+\n+:   Shell script to run after building application image\n+\n+\n+#### Resource directory files considered only when building macOS PKG installer:\n+\n+`uninstaller`\n+\n+:   Uninstaller shell script\n+\n+    Considered if some application launchers are registered as background service-type applications\n+\n+    Default resource is *uninstall.command.template*\n+\n+`preinstall`\n+\n+:   Pre-install shell script\n+\n+    Default resource is *preinstall.template*\n+\n+`postinstall`\n+\n+:   Post-install shell script\n+\n+    Default resource is *postinstall.template*\n+\n+`services-preinstall`\n+\n+:   Pre-install shell script for services package\n+\n+    Considered if some application launchers are registered as background service-type applications\n+\n+    Default resource is *services-preinstall.template*\n+\n+`services-postinstall`\n+\n+:   Post-install shell script for services package\n+\n+    Considered if some application launchers are registered as background service-type applications\n+\n+    Default resource is *services-postinstall.template*\n+\n+`<package-name>-background.png`\n+\n+:   Background image\n+\n+    Default resource is *background_pkg.png*\n+\n+`<package-name>-background-darkAqua.png`\n+\n+:   Dark background image\n+\n+    Default resource is *background_pkg.png*\n+\n+`product-def.plist`\n+\n+:   Package property list file\n+\n+    Default resource is *product-def.plist*\n+\n+`<package-name>-<launcher-name>.plist`\n+\n+:   launchd property list file for application launcher registered as a background service-type application\n+\n+    Default resource is *launchd.plist.template*\n+\n+\n+#### Resource directory files considered only when building macOS DMG installer:\n+\n+`<package-name>-dmg-setup.scpt`\n+\n+:   Setup AppleScript script\n+\n+    Default resource is *DMGsetup.scpt*\n+\n+`<package-name>-license.plist`\n+\n+:   License property list file\n+\n+    Default resource is *lic_template.plist*\n+\n+`<package-name>-background.tiff`\n+\n+:   Background image\n+\n+    Default resource is *background_dmg.tiff*\n+\n+`<package-name>-volume.icns`\n+\n+:   Volume icon\n+\n+    Default resource is *JavaApp.icns*\n","filename":"src\/jdk.jpackage\/share\/man\/jpackage.md","additions":791,"deletions":0,"binary":false,"changes":791,"status":"added"},{"patch":"@@ -1,1292 +0,0 @@\n-.\\\" Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-'\\\" t\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JSHELL\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jshell - interactively evaluate declarations, statements, and\n-expressions of the Java programming language in a read-eval-print loop\n-(REPL)\n-.SH SYNOPSIS\n-.PP\n-\\f[V]jshell\\f[R] [\\f[I]options\\f[R]] [\\f[I]load-files\\f[R]]\n-.TP\n-\\f[I]options\\f[R]\n-Command-line options, separated by spaces.\n-See \\f[B]Options for jshell\\f[R].\n-.TP\n-\\f[I]load-files\\f[R]\n-One or more scripts to run when the tool is started.\n-Scripts can contain any valid code snippets or JShell commands.\n-.RS\n-.PP\n-The script can be a local file or one of following predefined scripts:\n-.TP\n-\\f[V]DEFAULT\\f[R]\n-Loads the default entries, which are commonly used as imports.\n-.TP\n-\\f[V]JAVASE\\f[R]\n-Imports all Java SE packages.\n-.TP\n-\\f[V]PRINTING\\f[R]\n-Defines \\f[V]print\\f[R], \\f[V]println\\f[R], and \\f[V]printf\\f[R] as\n-\\f[V]jshell\\f[R] methods for use within the tool.\n-.TP\n-\\f[V]TOOLING\\f[R]\n-Defines \\f[V]javac\\f[R], \\f[V]jar\\f[R], and other methods for running\n-JDK tools via their command-line interface within the \\f[V]jshell\\f[R]\n-tool.\n-.PP\n-For more than one script, use a space to separate the names.\n-Scripts are run in the order in which they\\[aq]re entered on the command\n-line.\n-Command-line scripts are run after startup scripts.\n-To run a script after JShell is started, use the \\f[V]\/open\\f[R]\n-command.\n-.PP\n-To accept input from standard input and suppress the interactive I\/O,\n-enter a hyphen (-) for \\f[I]load-files\\f[R].\n-This option enables the use of the \\f[V]jshell\\f[R] tool in pipe chains.\n-.RE\n-.SH DESCRIPTION\n-.PP\n-JShell provides a way to interactively evaluate declarations,\n-statements, and expressions of the Java programming language, making it\n-easier to learn the language, explore unfamiliar code and APIs, and\n-prototype complex code.\n-Java statements, variable definitions, method definitions, class\n-definitions, import statements, and expressions are accepted.\n-The bits of code entered are called snippets.\n-.PP\n-As snippets are entered, they\\[aq]re evaluated, and feedback is\n-provided.\n-Feedback varies from the results and explanations of actions to nothing,\n-depending on the snippet entered and the feedback mode chosen.\n-Errors are described regardless of the feedback mode.\n-Start with the verbose mode to get the most feedback while learning the\n-tool.\n-.PP\n-Command-line options are available for configuring the initial\n-environment when JShell is started.\n-Within JShell, commands are available for modifying the environment as\n-needed.\n-.PP\n-Existing snippets can be loaded from a file to initialize a JShell\n-session, or at any time within a session.\n-Snippets can be modified within the session to try out different\n-variations and make corrections.\n-To keep snippets for later use, save them to a file.\n-.SH OPTIONS FOR JSHELL\n-.TP\n-\\f[V]--add-exports\\f[R] \\f[I]module\\f[R]\/\\f[I]package\\f[R]\n-Specifies a package to be considered as exported from its defining\n-module.\n-.TP\n-\\f[V]--add-modules\\f[R] \\f[I]module\\f[R][\\f[V],\\f[R]\\f[I]module\\f[R]...]\n-Specifies the root modules to resolve in addition to the initial module.\n-.TP\n-\\f[V]-C\\f[R]\\f[I]flag\\f[R]\n-passes \\f[I]flag\\f[R] to the Java compiler inside JShell.\n-For example, \\f[V]-C-Xlint\\f[R] enables all the recommended lint\n-warnings, and \\f[V]-C--release=<N>\\f[R] compiles for Java SE N, as if\n---release N was specified.\n-.TP\n-\\f[V]--class-path\\f[R] \\f[I]path\\f[R]\n-Specifies the directories and archives that are searched to locate class\n-files.\n-This option overrides the path in the \\f[V]CLASSPATH\\f[R] environment\n-variable.\n-If the environment variable isn\\[aq]t set and this option isn\\[aq]t\n-used, then the current directory is searched.\n-For Linux and macOS, use a colon (:) to separate items in the path.\n-For Windows, use a semicolon (;) to separate items.\n-.TP\n-\\f[V]--enable-preview\\f[R]\n-Allows code to depend on the preview features of this release.\n-.TP\n-\\f[V]--execution\\f[R] \\f[I]specification\\f[R]\n-Specifies an alternate execution engine, where \\f[I]specification\\f[R]\n-is an ExecutionControl spec.\n-See the documentation of the package jdk.jshell.spi for the syntax of\n-the spec.\n-.TP\n-\\f[V]--feedback\\f[R] \\f[I]mode\\f[R]\n-Sets the initial level of feedback provided in response to what\\[aq]s\n-entered.\n-The initial level can be overridden within a session by using the\n-\\f[V]\/set feedback\\f[R] \\f[I]mode\\f[R] command.\n-The default is \\f[V]normal\\f[R].\n-.RS\n-.PP\n-The following values are valid for \\f[I]mode\\f[R]:\n-.TP\n-\\f[V]verbose\\f[R]\n-Provides detailed feedback for entries.\n-Additional information about the action performed is displayed after the\n-result of the action.\n-The next prompt is separated from the feedback by a blank line.\n-.TP\n-\\f[V]normal\\f[R]\n-Provides an average amount of feedback.\n-The next prompt is separated from the feedback by a blank line.\n-.TP\n-\\f[V]concise\\f[R]\n-Provides minimal feedback.\n-The next prompt immediately follows the code snippet or feedback.\n-.TP\n-\\f[V]silent\\f[R]\n-Provides no feedback.\n-The next prompt immediately follows the code snippet.\n-.TP\n-\\f[I]custom\\f[R]\n-Provides custom feedback based on how the mode is defined.\n-Custom feedback modes are created within JShell by using the\n-\\f[V]\/set mode\\f[R] command.\n-.RE\n-.TP\n-\\f[V]--help\\f[R] or \\f[V]-h\\f[R] or \\f[V]-?\\f[R]\n-Prints a summary of standard options and exits the tool.\n-.TP\n-\\f[V]--help-extra\\f[R] or \\f[V]-X\\f[R]\n-Prints a summary of nonstandard options and exits the tool.\n-Nonstandard options are subject to change without notice.\n-.TP\n-\\f[V]-J\\f[R]\\f[I]flag\\f[R]\n-passes \\f[I]flag\\f[R] to the runtime system, but has no effect on the\n-execution of code snippets.\n-To specify flags that affect the execution of code snippets, use\n-\\f[V]-R\\f[R]\\f[I]flag\\f[R].\n-Alternatively, use \\f[V]-J\\f[R]\\f[I]flag\\f[R] with\n-\\f[V]--execution local\\f[R].\n-.TP\n-\\f[V]--module-path\\f[R] \\f[I]modulepath\\f[R]\n-Specifies where to find application modules.\n-For Linux and macOS, use a colon (:) to separate items in the path.\n-For Windows, use a semicolon (;) to separate items.\n-.TP\n-\\f[V]--no-startup\\f[R]\n-Prevents startup scripts from running when JShell starts.\n-Use this option to run only the scripts entered on the command line when\n-JShell is started, or to start JShell without any preloaded information\n-if no scripts are entered.\n-This option can\\[aq]t be used if the \\f[V]--startup\\f[R] option is used.\n-.TP\n-\\f[V]-q\\f[R]\n-Sets the feedback mode to \\f[V]concise\\f[R], which is the same as\n-entering \\f[V]--feedback concise\\f[R].\n-.TP\n-\\f[V]-R\\f[R]\\f[I]flag\\f[R]\n-passes \\f[I]flag\\f[R] to the runtime system only when code snippets are\n-executed.\n-For example, \\f[V]-R-Dfoo=bar\\f[R] means that execution of the snippet\n-\\f[V]System.getProperty(\\[dq]foo\\[dq])\\f[R] will return\n-\\f[V]\\[dq]bar\\[dq]\\f[R].\n-.TP\n-\\f[V]-s\\f[R]\n-Sets the feedback mode to \\f[V]silent\\f[R], which is the same as\n-entering \\f[V]--feedback silent\\f[R].\n-.TP\n-\\f[V]--show-version\\f[R]\n-Prints version information and enters the tool.\n-.TP\n-\\f[V]--startup\\f[R] \\f[I]file\\f[R]\n-Overrides the default startup script for this session.\n-The script can contain any valid code snippets or commands.\n-.RS\n-.PP\n-The script can be a local file or one of the following predefined\n-scripts:\n-.TP\n-\\f[V]DEFAULT\\f[R]\n-Loads the default entries, which are commonly used as imports.\n-.TP\n-\\f[V]JAVASE\\f[R]\n-Imports all Java SE packages.\n-.TP\n-\\f[V]PRINTING\\f[R]\n-Defines \\f[V]print\\f[R], \\f[V]println\\f[R], and \\f[V]printf\\f[R] as\n-\\f[V]jshell\\f[R] methods for use within the tool.\n-.TP\n-\\f[V]TOOLING\\f[R]\n-Defines \\f[V]javac\\f[R], \\f[V]jar\\f[R], and other methods for running\n-JDK tools via their command-line interface within the \\f[V]jshell\\f[R]\n-tool.\n-.PP\n-For more than one script, provide a separate instance of this option for\n-each script.\n-Startup scripts are run when JShell is first started and when the\n-session is restarted with the \\f[V]\/reset\\f[R], \\f[V]\/reload\\f[R], or\n-\\f[V]\/env\\f[R] command.\n-Startup scripts are run in the order in which they\\[aq]re entered on the\n-command line.\n-.PP\n-This option can\\[aq]t be used if the \\f[V]--no-startup\\f[R] option is\n-used.\n-.RE\n-.TP\n-\\f[V]-v\\f[R]\n-Sets the feedback mode to \\f[V]verbose\\f[R], which is the same as\n-entering \\f[V]--feedback verbose\\f[R].\n-.TP\n-\\f[V]--version\\f[R]\n-Prints version information and exits the tool.\n-.SH JSHELL COMMANDS\n-.PP\n-Within the \\f[V]jshell\\f[R] tool, commands are used to modify the\n-environment and manage code snippets.\n-.TP\n-\\f[V]\/drop\\f[R] {\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]} [{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]}...]\n-Drops snippets identified by name, ID, or ID range, making them\n-inactive.\n-For a range of IDs, provide the starting ID and ending ID separated with\n-a hyphen.\n-To provide a list, separate the items in the list with a space.\n-Use the \\f[V]\/list\\f[R] command to see the IDs of code snippets.\n-.TP\n-\\f[V]\/edit\\f[R] [\\f[I]option\\f[R]]\n-Opens an editor.\n-If no option is entered, then the editor opens with the active snippets.\n-.RS\n-.PP\n-The following options are valid:\n-.TP\n-{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]} [{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]}...]\n-Opens the editor with the snippets identified by name, ID, or ID range.\n-For a range of IDs, provide the starting ID and ending ID separated with\n-a hyphen.\n-To provide a list, separate the items in the list with a space.\n-Use the \\f[V]\/list\\f[R] command to see the IDs of code snippets.\n-.TP\n-\\f[V]-all\\f[R]\n-Opens the editor with all snippets, including startup snippets and\n-snippets that failed, were overwritten, or were dropped.\n-.TP\n-\\f[V]-start\\f[R]\n-Opens the editor with startup snippets that were evaluated when JShell\n-was started.\n-.PP\n-To exit edit mode, close the editor window, or respond to the prompt\n-provided if the \\f[V]-wait\\f[R] option was used when the editor was set.\n-.PP\n-Use the \\f[V]\/set editor\\f[R] command to specify the editor to use.\n-If no editor is set, then the following environment variables are\n-checked in order: \\f[V]JSHELLEDITOR\\f[R], \\f[V]VISUAL\\f[R], and\n-\\f[V]EDITOR\\f[R].\n-If no editor is set in JShell and none of the editor environment\n-variables is set, then a simple default editor is used.\n-.RE\n-.TP\n-\\f[V]\/env\\f[R] [\\f[I]options\\f[R]]\n-Displays the environment settings, or updates the environment settings\n-and restarts the session.\n-If no option is entered, then the current environment settings are\n-displayed.\n-If one or more options are entered, then the session is restarted as\n-follows:\n-.RS\n-.IP \\[bu] 2\n-Updates the environment settings with the provided options.\n-.IP \\[bu] 2\n-Resets the execution state.\n-.IP \\[bu] 2\n-Runs the startup scripts.\n-.IP \\[bu] 2\n-Silently replays the history in the order entered.\n-The history includes all valid snippets or \\f[V]\/drop\\f[R] commands\n-entered at the \\f[V]jshell\\f[R] prompt, in scripts entered on the\n-command line, or scripts entered with the \\f[V]\/open\\f[R] command.\n-.PP\n-Environment settings entered on the command line or provided with a\n-previous \\f[V]\/reset\\f[R], \\f[V]\/env\\f[R], or \\f[V]\/reload\\f[R] command\n-are maintained unless an \\f[I]option\\f[R] is entered that overwrites the\n-setting.\n-.PP\n-The following options are valid:\n-.TP\n-\\f[V]--add-modules\\f[R] \\f[I]module\\f[R][\\f[V],\\f[R]\\f[I]module\\f[R]...]\n-Specifies the root modules to resolve in addition to the initial module.\n-.TP\n-\\f[V]--add-exports\\f[R] \\f[I]source-module\\f[R]\\f[V]\/\\f[R]\\f[I]package\\f[R]\\f[V]=\\f[R]\\f[I]target-module\\f[R][\\f[V],\\f[R]\\f[I]target-module\\f[R]]*\n-Adds an export of \\f[I]package\\f[R] from \\f[I]source-module\\f[R] to\n-\\f[I]target-module\\f[R].\n-.TP\n-\\f[V]--class-path\\f[R] \\f[I]path\\f[R]\n-Specifies the directories and archives that are searched to locate class\n-files.\n-This option overrides the path in the \\f[V]CLASSPATH\\f[R] environment\n-variable.\n-If the environment variable isn\\[aq]t set and this option isn\\[aq]t\n-used, then the current directory is searched.\n-For Linux and macOS, use a colon (\\f[V]:\\f[R]) to separate items in the\n-path.\n-For Windows, use a semicolon (\\f[V];\\f[R]) to separate items.\n-.TP\n-\\f[V]--module-path\\f[R] \\f[I]modulepath\\f[R]\n-Specifies where to find application modules.\n-For Linux and macOS, use a colon (\\f[V]:\\f[R]) to separate items in the\n-path.\n-For Windows, use a semicolon (\\f[V];\\f[R]) to separate items.\n-.RE\n-.TP\n-\\f[V]\/exit\\f[R] [\\f[I]integer-expression-snippet\\f[R]]\n-Exits the tool.\n-If no snippet is entered, the exit status is zero.\n-If a snippet is entered and the result of the snippet is an integer, the\n-result is used as the exit status.\n-If an error occurs, or the result of the snippet is not an integer, an\n-error is displayed and the tool remains active.\n-.TP\n-\\f[V]\/history\\f[R]\n-Displays what was entered in this session.\n-.TP\n-\\f[V]\/help\\f[R] [\\f[I]command\\f[R]|\\f[I]subject\\f[R]]\n-Displays information about commands and subjects.\n-If no options are entered, then a summary of information for all\n-commands and a list of available subjects are displayed.\n-If a valid command is provided, then expanded information for that\n-command is displayed.\n-If a valid subject is entered, then information about that subject is\n-displayed.\n-.RS\n-.PP\n-The following values for \\f[I]subject\\f[R] are valid:\n-.TP\n-\\f[V]context\\f[R]\n-Describes the options that are available for configuring the\n-environment.\n-.TP\n-\\f[V]intro\\f[R]\n-Provides an introduction to the tool.\n-.TP\n-\\f[V]shortcuts\\f[R]\n-Describes keystrokes for completing commands and snippets.\n-See \\f[B]Input Shortcuts\\f[R].\n-.RE\n-.TP\n-\\f[V]\/imports\\f[R]\n-Displays the current active imports, including those from the startup\n-scripts and scripts that were entered on the command line when JShell\n-was started.\n-.TP\n-\\f[V]\/list\\f[R] [\\f[I]option\\f[R]]\n-Displays a list of snippets and their IDs.\n-If no option is entered, then all active snippets are displayed, but\n-startup snippets aren\\[aq]t.\n-.RS\n-.PP\n-The following options are valid:\n-.TP\n-{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]} [{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]}...]\n-Displays the snippets identified by name, ID, or ID range.\n-For a range of IDs, provide the starting ID and ending ID separated with\n-a hyphen.\n-To provide a list, separate the items in the list with a space.\n-.TP\n-\\f[V]-all\\f[R]\n-Displays all snippets, including startup snippets and snippets that\n-failed, were overwritten, or were dropped.\n-IDs that begin with \\f[V]s\\f[R] are startup snippets.\n-IDs that begin with \\f[V]e\\f[R] are snippets that failed.\n-.TP\n-\\f[V]-start\\f[R]\n-Displays startup snippets that were evaluated when JShell was started.\n-.RE\n-.TP\n-\\f[V]\/methods\\f[R] [\\f[I]option\\f[R]]\n-Displays information about the methods that were entered.\n-If no option is entered, then the name, parameter types, and return type\n-of all active methods are displayed.\n-.RS\n-.PP\n-The following options are valid:\n-.TP\n-{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]} [{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]}...]\n-Displays information for methods identified by name, ID, or ID range.\n-For a range of IDs, provide the starting ID and ending ID separated with\n-a hyphen.\n-To provide a list, separate the items in the list with a space.\n-Use the \\f[V]\/list\\f[R] command to see the IDs of code snippets.\n-.TP\n-\\f[V]-all\\f[R]\n-Displays information for all methods, including those added when JShell\n-was started, and methods that failed, were overwritten, or were dropped.\n-.TP\n-\\f[V]-start\\f[R]\n-Displays information for startup methods that were added when JShell was\n-started.\n-.RE\n-.TP\n-\\f[V]\/open\\f[R] \\f[I]file\\f[R]\n-Opens the script specified and reads the snippets into the tool.\n-The script can be a local file or one of the following predefined\n-scripts:\n-.RS\n-.TP\n-\\f[V]DEFAULT\\f[R]\n-Loads the default entries, which are commonly used as imports.\n-.TP\n-\\f[V]JAVASE\\f[R]\n-Imports all Java SE packages.\n-.TP\n-\\f[V]PRINTING\\f[R]\n-Defines \\f[V]print\\f[R], \\f[V]println\\f[R], and \\f[V]printf\\f[R] as\n-\\f[V]jshell\\f[R] methods for use within the tool.\n-.TP\n-\\f[V]TOOLING\\f[R]\n-Defines \\f[V]javac\\f[R], \\f[V]jar\\f[R], and other methods for running\n-JDK tools via their command-line interface within the \\f[V]jshell\\f[R]\n-tool.\n-.RE\n-.TP\n-\\f[V]\/reload\\f[R] [\\f[I]options\\f[R]]\n-Restarts the session as follows:\n-.RS\n-.IP \\[bu] 2\n-Updates the environment settings with the provided options, if any.\n-.IP \\[bu] 2\n-Resets the execution state.\n-.IP \\[bu] 2\n-Runs the startup scripts.\n-.IP \\[bu] 2\n-Replays the history in the order entered.\n-The history includes all valid snippets or \\f[V]\/drop\\f[R] commands\n-entered at the \\f[V]jshell\\f[R] prompt, in scripts entered on the\n-command line, or scripts entered with the \\f[V]\/open\\f[R] command.\n-.PP\n-Environment settings entered on the command line or provided with a\n-previous \\f[V]\/reset\\f[R], \\f[V]\/env\\f[R], or \\f[V]\/reload\\f[R] command\n-are maintained unless an \\f[I]option\\f[R] is entered that overwrites the\n-setting.\n-.PP\n-The following options are valid:\n-.TP\n-\\f[V]--add-modules\\f[R] \\f[I]module\\f[R][\\f[V],\\f[R]\\f[I]module\\f[R]...]\n-Specifies the root modules to resolve in addition to the initial module.\n-.TP\n-\\f[V]--add-exports\\f[R] \\f[I]source-module\\f[R]\\f[V]\/\\f[R]\\f[I]package\\f[R]\\f[V]=\\f[R]\\f[I]target-module\\f[R][\\f[V],\\f[R]\\f[I]target-module\\f[R]]*\n-Adds an export of \\f[I]package\\f[R] from \\f[I]source-module\\f[R] to\n-\\f[I]target-module\\f[R].\n-.TP\n-\\f[V]--class-path\\f[R] \\f[I]path\\f[R]\n-Specifies the directories and archives that are searched to locate class\n-files.\n-This option overrides the path in the \\f[V]CLASSPATH\\f[R] environment\n-variable.\n-If the environment variable isn\\[aq]t set and this option isn\\[aq]t\n-used, then the current directory is searched.\n-For Linux and macOS, use a colon (\\f[V]:\\f[R]) to separate items in the\n-path.\n-For Windows, use a semicolon (\\f[V];\\f[R]) to separate items.\n-.TP\n-\\f[V]--module-path\\f[R] \\f[I]modulepath\\f[R]\n-Specifies where to find application modules.\n-For Linux and macOS, use a colon (\\f[V]:\\f[R]) to separate items in the\n-path.\n-For Windows, use a semicolon (\\f[V];\\f[R]) to separate items.\n-.TP\n-\\f[V]-quiet\\f[R]\n-Replays the valid history without displaying it.\n-Errors are displayed.\n-.TP\n-\\f[V]-restore\\f[R]\n-Resets the environment to the state at the start of the previous run of\n-the tool or to the last time a \\f[V]\/reset\\f[R], \\f[V]\/reload\\f[R], or\n-\\f[V]\/env\\f[R] command was executed in the previous run.\n-The valid history since that point is replayed.\n-Use this option to restore a previous JShell session.\n-.RE\n-.TP\n-\\f[V]\/reset\\f[R] [\\f[I]options\\f[R]]\n-Discards all entered snippets and restarts the session as follows:\n-.RS\n-.IP \\[bu] 2\n-Updates the environment settings with the provided options, if any.\n-.IP \\[bu] 2\n-Resets the execution state.\n-.IP \\[bu] 2\n-Runs the startup scripts.\n-.PP\n-History is not replayed.\n-All code that was entered is lost.\n-.PP\n-Environment settings entered on the command line or provided with a\n-previous \\f[V]\/reset\\f[R], \\f[V]\/env\\f[R], or \\f[V]\/reload\\f[R] command\n-are maintained unless an \\f[I]option\\f[R] is entered that overwrites the\n-setting.\n-.PP\n-The following options are valid:\n-.TP\n-\\f[V]--add-modules\\f[R] \\f[I]module\\f[R][\\f[V],\\f[R]\\f[I]module\\f[R]...]\n-Specifies the root modules to resolve in addition to the initial module.\n-.TP\n-\\f[V]--add-exports\\f[R] \\f[I]source-module\\f[R]\\f[V]\/\\f[R]\\f[I]package\\f[R]\\f[V]=\\f[R]\\f[I]target-module\\f[R][\\f[V],\\f[R]\\f[I]target-module\\f[R]]*\n-Adds an export of \\f[I]package\\f[R] from \\f[I]source-module\\f[R] to\n-\\f[I]target-module\\f[R].\n-.TP\n-\\f[V]--class-path\\f[R] \\f[I]path\\f[R]\n-Specifies the directories and archives that are searched to locate class\n-files.\n-This option overrides the path in the \\f[V]CLASSPATH\\f[R] environment\n-variable.\n-If the environment variable isn\\[aq]t set and this option isn\\[aq]t\n-used, then the current directory is searched.\n-For Linux and macOS, use a colon (\\f[V]:\\f[R]) to separate items in the\n-path.\n-For Windows, use a semicolon (\\f[V];\\f[R]) to separate items.\n-.TP\n-\\f[V]--module-path\\f[R] \\f[I]modulepath\\f[R]\n-Specifies where to find application modules.\n-For Linux and macOS, use a colon (\\f[V]:\\f[R]) to separate items in the\n-path.\n-For Windows, use a semicolon (\\f[V];\\f[R]) to separate items.\n-.RE\n-.TP\n-\\f[V]\/save\\f[R] [\\f[I]options\\f[R]] \\f[I]file\\f[R]\n-Saves snippets and commands to the file specified.\n-If no options are entered, then active snippets are saved.\n-.RS\n-.PP\n-The following options are valid:\n-.TP\n-{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]} [{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]}...]\n-Saves the snippets and commands identified by name, ID, or ID range.\n-For a range of IDs, provide the starting ID and ending ID separated with\n-a hyphen.\n-To provide a list, separate the items in the list with a space.\n-Use the \\f[V]\/list\\f[R] command to see the IDs of the code snippets.\n-.TP\n-\\f[V]-all\\f[R]\n-Saves all snippets, including startup snippets and snippets that were\n-overwritten or failed.\n-.TP\n-\\f[V]-history\\f[R]\n-Saves the sequential history of all commands and snippets entered in the\n-current session.\n-.TP\n-\\f[V]-start\\f[R]\n-Saves the current startup settings.\n-If no startup scripts were provided, then an empty file is saved.\n-.RE\n-.TP\n-\\f[V]\/set\\f[R] [\\f[I]setting\\f[R]]\n-Sets configuration information, including the external editor, startup\n-settings, and feedback mode.\n-This command is also used to create a custom feedback mode with\n-customized prompt, format, and truncation values.\n-If no setting is entered, then the current setting for the editor,\n-startup settings, and feedback mode are displayed.\n-.RS\n-.PP\n-The following values are valid for \\f[V]setting\\f[R]:\n-.TP\n-\\f[V]editor\\f[R] [\\f[I]options\\f[R]] [\\f[I]command\\f[R]]\n-Sets the command used to start an external editor when the\n-\\f[V]\/edit\\f[R] command is entered.\n-The command can include command arguments separated by spaces.\n-If no command or options are entered, then the current setting is\n-displayed.\n-.RS\n-.PP\n-The following options are valid:\n-.TP\n-\\f[V]-default\\f[R]\n-Sets the editor to the default editor provided with JShell.\n-This option can\\[aq]t be used if a command for starting an editor is\n-entered.\n-.TP\n-\\f[V]-delete\\f[R]\n-Sets the editor to the one in effect when the session started.\n-If used with the \\f[V]-retain\\f[R] option, then the retained editor\n-setting is deleted and the editor is set to the first of the following\n-environment variables found: \\f[V]JSHELLEDITOR\\f[R], \\f[V]VISUAL\\f[R],\n-or \\f[V]EDITOR\\f[R].\n-If none of the editor environment variables are set, then this option\n-sets the editor to the default editor.\n-.RS\n-.PP\n-This option can\\[aq]t be used if a command for starting an editor is\n-entered.\n-.RE\n-.TP\n-\\f[V]-retain\\f[R]\n-Saves the editor setting across sessions.\n-If no other option or a command is entered, then the current setting is\n-saved.\n-.TP\n-\\f[V]-wait\\f[R]\n-Prompts the user to indicate when editing is complete.\n-Otherwise control returns to JShell when the editor exits.\n-Use this option if the editor being used exits immediately, for example,\n-when an edit window already exists.\n-This option is valid only when a command for starting an editor is\n-entered.\n-.RE\n-.TP\n-\\f[V]feedback\\f[R] [\\f[I]mode\\f[R]]\n-Sets the feedback mode used to respond to input.\n-If no mode is entered, then the current mode is displayed.\n-.RS\n-.PP\n-The following modes are valid: \\f[V]concise\\f[R], \\f[V]normal\\f[R],\n-\\f[V]silent\\f[R], \\f[V]verbose\\f[R], and any custom mode created with\n-the \\f[V]\/set mode\\f[R] command.\n-.RE\n-.TP\n-\\f[V]format\\f[R] \\f[I]mode\\f[R] \\f[I]field\\f[R] \\f[V]\\[dq]\\f[R]\\f[I]format-string\\f[R]\\f[V]\\[dq]\\f[R] \\f[I]selector\\f[R]\n-Sets the format of the feedback provided in response to input.\n-If no mode is entered, then the current formats for all fields for all\n-feedback modes are displayed.\n-If only a mode is entered, then the current formats for that mode are\n-displayed.\n-If only a mode and field are entered, then the current formats for that\n-field are displayed.\n-.RS\n-.PP\n-To define a format, the following arguments are required:\n-.TP\n-\\f[I]mode\\f[R]\n-Specifies a feedback mode to which the response format is applied.\n-Only custom modes created with the \\f[V]\/set mode\\f[R] command can be\n-modified.\n-.TP\n-\\f[I]field\\f[R]\n-Specifies a context-specific field to which the response format is\n-applied.\n-The fields are described in the online help, which is accessed from\n-JShell using the \\f[V]\/help \/set format\\f[R] command.\n-.TP\n-\\f[V]\\[dq]\\f[R]\\f[I]format-string\\f[R]\\f[V]\\[dq]\\f[R]\n-Specifies the string to use as the response format for the specified\n-field and selector.\n-The structure of the format string is described in the online help,\n-which is accessed from JShell using the \\f[V]\/help \/set format\\f[R]\n-command.\n-.TP\n-\\f[I]selector\\f[R]\n-Specifies the context in which the response format is applied.\n-The selectors are described in the online help, which is accessed from\n-JShell using the \\f[V]\/help \/set format\\f[R] command.\n-.RE\n-.TP\n-\\f[V]mode\\f[R] [\\f[I]mode-name\\f[R]] [\\f[I]existing-mode\\f[R]] [\\f[I]options\\f[R]]\n-Creates a custom feedback mode with the mode name provided.\n-If no mode name is entered, then the settings for all modes are\n-displayed, which includes the mode, prompt, format, and truncation\n-settings.\n-If the name of an existing mode is provided, then the settings from the\n-existing mode are copied to the mode being created.\n-.RS\n-.PP\n-The following options are valid:\n-.TP\n-\\f[V]-command\\f[R]|\\f[V]-quiet\\f[R]\n-Specifies the level of feedback displayed for commands when using the\n-mode.\n-This option is required when creating a feedback mode.\n-Use \\f[V]-command\\f[R] to show information and verification feedback for\n-commands.\n-Use \\f[V]-quiet\\f[R] to show only essential feedback for commands, such\n-as error messages.\n-.TP\n-\\f[V]-delete\\f[R]\n-Deletes the named feedback mode for this session.\n-The name of the mode to delete is required.\n-To permanently delete a retained mode, use the \\f[V]-retain\\f[R] option\n-with this option.\n-Predefined modes can\\[aq]t be deleted.\n-.TP\n-\\f[V]-retain\\f[R]\n-Saves the named feedback mode across sessions.\n-The name of the mode to retain is required.\n-.PP\n-Configure the new feedback mode using the \\f[V]\/set prompt\\f[R],\n-\\f[V]\/set format\\f[R], and \\f[V]\/set truncation\\f[R] commands.\n-.PP\n-To start using the new mode, use the \\f[V]\/set feedback\\f[R] command.\n-.RE\n-.TP\n-\\f[V]prompt\\f[R] \\f[I]mode\\f[R] \\f[V]\\[dq]\\f[R]\\f[I]prompt-string\\f[R]\\f[V]\\[dq]\\f[R] \\f[V]\\[dq]\\f[R]\\f[I]continuation-prompt-string\\f[R]\\f[V]\\[dq]\\f[R]\n-Sets the prompts for input within JShell.\n-If no mode is entered, then the current prompts for all feedback modes\n-are displayed.\n-If only a mode is entered, then the current prompts for that mode are\n-displayed.\n-.RS\n-.PP\n-To define a prompt, the following arguments are required:\n-.TP\n-\\f[I]mode\\f[R]\n-Specifies the feedback mode to which the prompts are applied.\n-Only custom modes created with the \\f[V]\/set mode\\f[R] command can be\n-modified.\n-.TP\n-\\f[V]\\[dq]\\f[R]\\f[I]prompt-string\\f[R]\\f[V]\\[dq]\\f[R]\n-Specifies the string to use as the prompt for the first line of input.\n-.TP\n-\\f[V]\\[dq]\\f[R]\\f[I]continuation-prompt-string\\f[R]\\f[V]\\[dq]\\f[R]\n-Specifies the string to use as the prompt for the additional input lines\n-needed to complete a snippet.\n-.RE\n-.TP\n-\\f[V]start\\f[R] [\\f[V]-retain\\f[R]] [\\f[I]file\\f[R] [\\f[I]file\\f[R]...]|\\f[I]option\\f[R]]\n-Sets the names of the startup scripts used when the next\n-\\f[V]\/reset\\f[R], \\f[V]\/reload\\f[R], or \\f[V]\/env\\f[R] command is\n-entered.\n-If more than one script is entered, then the scripts are run in the\n-order entered.\n-If no scripts or options are entered, then the current startup settings\n-are displayed.\n-.RS\n-.PP\n-The scripts can be local files or one of the following predefined\n-scripts:\n-.TP\n-\\f[V]DEFAULT\\f[R]\n-Loads the default entries, which are commonly used as imports.\n-.TP\n-\\f[V]JAVASE\\f[R]\n-Imports all Java SE packages.\n-.TP\n-\\f[V]PRINTING\\f[R]\n-Defines \\f[V]print\\f[R], \\f[V]println\\f[R], and \\f[V]printf\\f[R] as\n-\\f[V]jshell\\f[R] methods for use within the tool.\n-.TP\n-\\f[V]TOOLING\\f[R]\n-Defines \\f[V]javac\\f[R], \\f[V]jar\\f[R], and other methods for running\n-JDK tools via their command-line interface within the \\f[V]jshell\\f[R]\n-tool.\n-.PP\n-The following options are valid:\n-.TP\n-\\f[V]-default\\f[R]\n-Sets the startup settings to the default settings.\n-.TP\n-\\f[V]-none\\f[R]\n-Specifies that no startup settings are used.\n-.PP\n-Use the \\f[V]-retain\\f[R] option to save the start setting across\n-sessions.\n-.RE\n-.TP\n-\\f[V]truncation\\f[R] \\f[I]mode\\f[R] \\f[I]length\\f[R] \\f[I]selector\\f[R]\n-Sets the maximum length of a displayed value.\n-If no mode is entered, then the current truncation values for all\n-feedback modes are displayed.\n-If only a mode is entered, then the current truncation values for that\n-mode are displayed.\n-.RS\n-.PP\n-To define truncation values, the following arguments are required:\n-.TP\n-\\f[I]mode\\f[R]\n-Specifies the feedback mode to which the truncation value is applied.\n-Only custom modes created with the \\f[V]\/set mode\\f[R] command can be\n-modified.\n-.TP\n-\\f[I]length\\f[R]\n-Specifies the unsigned integer to use as the maximum length for the\n-specified selector.\n-.TP\n-\\f[I]selector\\f[R]\n-Specifies the context in which the truncation value is applied.\n-The selectors are described in the online help, which is accessed from\n-JShell using the \\f[V]\/help \/set truncation\\f[R] command.\n-.RE\n-.RE\n-.TP\n-\\f[V]\/types\\f[R] [\\f[I]option\\f[R]]\n-Displays classes, interfaces, and enums that were entered.\n-If no option is entered, then all current active classes, interfaces,\n-and enums are displayed.\n-.RS\n-.PP\n-The following options are valid:\n-.TP\n-{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]} [{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]}...]\n-Displays information for classes, interfaces, and enums identified by\n-name, ID, or ID range.\n-For a range of IDs, provide the starting ID and ending ID separated with\n-a hyphen.\n-To provide a list, separate the items in the list with a space.\n-Use the \\f[V]\/list\\f[R] command to see the IDs of the code snippets.\n-.TP\n-\\f[V]-all\\f[R]\n-Displays information for all classes, interfaces, and enums, including\n-those added when JShell was started, and classes, interfaces, and enums\n-that failed, were overwritten, or were dropped.\n-.TP\n-\\f[V]-start\\f[R]\n-Displays information for startup classes, interfaces, and enums that\n-were added when JShell was started.\n-.RE\n-.TP\n-\\f[V]\/vars\\f[R] [\\f[I]option\\f[R]]\n-Displays the name, type, and value of variables that were entered.\n-If no option is entered, then all current active variables are\n-displayed.\n-.RS\n-.PP\n-The following options are valid:\n-.TP\n-{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]} [{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]}...]\n-Displays information for variables identified by name, ID, or ID range.\n-For a range of IDs, provide the starting ID and ending ID separated with\n-a hyphen.\n-To provide a list, separate the items in the list with a space.\n-Use the \\f[V]\/list\\f[R] command to see the IDs of the code snippets.\n-.TP\n-\\f[V]-all\\f[R]\n-Displays information for all variables, including those added when\n-JShell was started, and variables that failed, were overwritten, or were\n-dropped.\n-.TP\n-\\f[V]-start\\f[R]\n-Displays information for startup variables that were added when JShell\n-was started.\n-.RE\n-.TP\n-\\f[V]\/?\\f[R]\n-Same as the \\f[V]\/help\\f[R] command.\n-.TP\n-\\f[V]\/!\\f[R]\n-Reruns the last snippet.\n-.TP\n-\\f[V]\/\\f[R]{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]} [{\\f[I]name\\f[R]|\\f[I]id\\f[R]|\\f[I]startID\\f[R]\\f[V]-\\f[R]\\f[I]endID\\f[R]}...]\n-Reruns the snippets identified by ID, range of IDs, or name.\n-For a range of IDs, provide the starting ID and ending ID separated with\n-a hyphen.\n-To provide a list, separate the items in the list with a space.\n-The first item in the list must be an ID or ID range.\n-Use the \\f[V]\/list\\f[R] command to see the IDs of the code snippets.\n-.TP\n-\\f[V]\/-\\f[R]\\f[I]n\\f[R]\n-Reruns the -\\f[I]n\\f[R]th previous snippet.\n-For example, if 15 code snippets were entered, then \\f[V]\/-4\\f[R] runs\n-the 11th snippet.\n-Commands aren\\[aq]t included in the count.\n-.SH INPUT SHORTCUTS\n-.PP\n-The following shortcuts are available for entering commands and snippets\n-in JShell.\n-.SS Tab completion\n-.TP\n-\\f[B]<tab>\\f[R]\n-When entering snippets, commands, subcommands, command arguments, or\n-command options, use the Tab key to automatically complete the item.\n-If the item can\\[aq]t be determined from what was entered, then possible\n-options are provided.\n-.RS\n-.PP\n-When entering a method call, use the Tab key after the method call\\[aq]s\n-opening parenthesis to see the parameters for the method.\n-If the method has more than one signature, then all signatures are\n-displayed.\n-Pressing the Tab key a second time displays the description of the\n-method and the parameters for the first signature.\n-Continue pressing the Tab key for a description of any additional\n-signatures.\n-.RE\n-.TP\n-\\f[B]Shift+<Tab> V\\f[R]\n-After entering a complete expression, use this key sequence to convert\n-the expression to a variable declaration of a type determined by the\n-type of the expression.\n-.TP\n-\\f[B]Shift+<Tab> M\\f[R]\n-After entering a complete expression or statement, use this key sequence\n-to convert the expression or statement to a method declaration.\n-If an expression is entered, the return type is based on the type of the\n-expression.\n-.TP\n-\\f[B]Shift+<Tab> I\\f[R]\n-When an identifier is entered that can\\[aq]t be resolved, use this key\n-sequence to show possible imports that resolve the identifier based on\n-the content of the specified class path.\n-.SS Command abbreviations\n-.PP\n-An abbreviation of a command is accepted if the abbreviation uniquely\n-identifies a command.\n-For example, \\f[V]\/l\\f[R] is recognized as the \\f[V]\/list\\f[R] command.\n-However, \\f[V]\/s\\f[R] isn\\[aq]t a valid abbreviation because it\n-can\\[aq]t be determined if the \\f[V]\/set\\f[R] or \\f[V]\/save\\f[R] command\n-is meant.\n-Use \\f[V]\/se\\f[R] for the \\f[V]\/set\\f[R] command or \\f[V]\/sa\\f[R] for\n-the \\f[V]\/save\\f[R] command.\n-.PP\n-Abbreviations are also accepted for subcommands, command arguments, and\n-command options.\n-For example, use \\f[V]\/m -a\\f[R] to display all methods.\n-.SS History navigation\n-.PP\n-A history of what was entered is maintained across sessions.\n-Use the up and down arrows to scroll through commands and snippets from\n-the current and past sessions.\n-Use the Ctrl key with the up and down arrows to skip all but the first\n-line of multiline snippets.\n-.SS History search\n-.PP\n-Use the Ctrl+R key combination to search the history for the string\n-entered.\n-The prompt changes to show the string and the match.\n-Ctrl+R searches backwards from the current location in the history\n-through earlier entries.\n-Ctrl+S searches forward from the current location in the history though\n-later entries.\n-.SH INPUT EDITING\n-.PP\n-The editing capabilities of JShell are similar to that of other common\n-shells.\n-Keyboard keys and key combinations provide line editing shortcuts.\n-The Ctrl key and Meta key are used in key combinations.\n-If your keyboard doesn\\[aq]t have a Meta key, then the Alt key is often\n-mapped to provide Meta key functionality.\n-.PP\n-Line Editing Shortcuts\n-.TS\n-tab(@);\n-l l.\n-T{\n-Key or Key Combination\n-T}@T{\n-Action\n-T}\n-_\n-T{\n-Return\n-T}@T{\n-Enter the current line.\n-T}\n-T{\n-Left arrow\n-T}@T{\n-Move the cursor to the left one character.\n-T}\n-T{\n-Right arrow Move\n-T}@T{\n-the cursor to the right one character.\n-T}\n-T{\n-Ctrl+A\n-T}@T{\n-Move the cursor to the beginning of the line.\n-T}\n-T{\n-Ctrl+E\n-T}@T{\n-Move the cursor to the end of the line.\n-T}\n-T{\n-Meta+B\n-T}@T{\n-Move the cursor to the left one word.\n-T}\n-T{\n-Meta+F\n-T}@T{\n-Move the cursor to the right one word.\n-T}\n-T{\n-Delete\n-T}@T{\n-Delete the character under the cursor.\n-T}\n-T{\n-Backspace\n-T}@T{\n-Delete the character before the cursor.\n-T}\n-T{\n-Ctrl+K\n-T}@T{\n-Delete the text from the cursor to the end of the line.\n-T}\n-T{\n-Meta+D\n-T}@T{\n-Delete the text from the cursor to the end of the word.\n-T}\n-T{\n-Ctrl+W\n-T}@T{\n-Delete the text from the cursor to the previous white space.\n-T}\n-T{\n-Ctrl+Y\n-T}@T{\n-Paste the most recently deleted text into the line.\n-T}\n-T{\n-Meta+Y\n-T}@T{\n-After Ctrl+Y, press to cycle through the previously deleted text.\n-T}\n-.TE\n-.SH EXAMPLE OF STARTING AND STOPPING A JSHELL SESSION\n-.PP\n-JShell is provided with the JDK.\n-To start a session, enter \\f[V]jshell\\f[R] on the command line.\n-A welcome message is printed, and a prompt for entering commands and\n-snippets is provided.\n-.IP\n-.nf\n-\\f[CB]\n-% jshell\n-|  Welcome to JShell -- Version 9\n-|  For an introduction type: \/help intro\n-\n-jshell>\n-\\f[R]\n-.fi\n-.PP\n-To see which snippets were automatically loaded when JShell started, use\n-the \\f[V]\/list -start\\f[R] command.\n-The default startup snippets are import statements for common packages.\n-The ID for each snippet begins with the letter \\f[I]s\\f[R], which\n-indicates it\\[aq]s a startup snippet.\n-.IP\n-.nf\n-\\f[CB]\n-jshell> \/list -start\n-\n-  s1 : import java.io.*;\n-  s2 : import java.math.*;\n-  s3 : import java.net.*;\n-  s4 : import java.nio.file.*;\n-  s5 : import java.util.*;\n-  s6 : import java.util.concurrent.*;\n-  s7 : import java.util.function.*;\n-  s8 : import java.util.prefs.*;\n-  s9 : import java.util.regex.*;\n- s10 : import java.util.stream.*;\n-\n-jshell>\n-\\f[R]\n-.fi\n-.PP\n-To end the session, use the \\f[V]\/exit\\f[R] command.\n-.IP\n-.nf\n-\\f[CB]\n-jshell> \/exit\n-|  Goodbye\n-\n-%\n-\\f[R]\n-.fi\n-.SH EXAMPLE OF ENTERING SNIPPETS\n-.PP\n-Snippets are Java statements, variable definitions, method definitions,\n-class definitions, import statements, and expressions.\n-Terminating semicolons are automatically added to the end of a completed\n-snippet if they\\[aq]re missing.\n-.PP\n-The following example shows two variables and a method being defined,\n-and the method being run.\n-Note that a scratch variable is automatically created to hold the result\n-because no variable was provided.\n-.IP\n-.nf\n-\\f[CB]\n-jshell> int a=4\n-a ==> 4\n-\n-jshell> int b=8\n-b ==> 8\n-\n-jshell> int square(int i1) {\n-   ...> return i1 * i1;\n-   ...> }\n-|  created method square(int)\n-\n-jshell> square(b)\n-$5 ==> 64\n-\\f[R]\n-.fi\n-.SH EXAMPLE OF CHANGING SNIPPETS\n-.PP\n-Change the definition of a variable, method, or class by entering it\n-again.\n-.PP\n-The following examples shows a method being defined and the method run:\n-.IP\n-.nf\n-\\f[CB]\n-jshell> String grade(int testScore) {\n-   ...>     if (testScore >= 90) {\n-   ...>         return \\[dq]Pass\\[dq];\n-   ...>     }\n-   ...>     return \\[dq]Fail\\[dq];\n-   ...> }\n-|  created method grade(int)\n-\n-jshell> grade(88)\n-$3 ==> \\[dq]Fail\\[dq]\n-\\f[R]\n-.fi\n-.PP\n-To change the method \\f[V]grade\\f[R] to allow more students to pass,\n-enter the method definition again and change the pass score to\n-\\f[V]80\\f[R].\n-Use the up arrow key to retrieve the previous entries to avoid having to\n-reenter them and make the change in the \\f[V]if\\f[R] statement.\n-The following example shows the new definition and reruns the method to\n-show the new result:\n-.IP\n-.nf\n-\\f[CB]\n-jshell> String grade(int testScore) {\n-   ...>     if (testScore >= 80) {\n-   ...>         return \\[dq]Pass\\[dq];\n-   ...>     }\n-   ...>     return \\[dq]Fail\\[dq];\n-   ...> }\n-|  modified method grade(int)\n-\n-jshell> grade(88)\n-$5 ==> \\[dq]Pass\\[dq]\n-\\f[R]\n-.fi\n-.PP\n-For snippets that are more than a few lines long, or to make more than a\n-few changes, use the \\f[V]\/edit\\f[R] command to open the snippet in an\n-editor.\n-After the changes are complete, close the edit window to return control\n-to the JShell session.\n-The following example shows the command and the feedback provided when\n-the edit window is closed.\n-The \\f[V]\/list\\f[R] command is used to show that the pass score was\n-changed to \\f[V]85\\f[R].\n-.IP\n-.nf\n-\\f[CB]\n-jshell> \/edit grade\n-|  modified method grade(int)\n-jshell> \/list grade\n-\n-   6 : String grade(int testScore) {\n-           if (testScore >= 85) {\n-               return \\[dq]Pass\\[dq];\n-           }\n-           return \\[dq]Fail\\[dq];\n-       }\n-\\f[R]\n-.fi\n-.SH EXAMPLE OF CREATING A CUSTOM FEEDBACK MODE\n-.PP\n-The feedback mode determines the prompt that\\[aq]s displayed, the\n-feedback messages that are provided as snippets are entered, and the\n-maximum length of a displayed value.\n-Predefined feedback modes are provided.\n-Commands for creating custom feedback modes are also provided.\n-.PP\n-Use the \\f[V]\/set mode\\f[R] command to create a new feedback mode.\n-In the following example, the new mode \\f[V]mymode\\f[R], is based on the\n-predefined feedback mode, \\f[V]normal\\f[R], and verifying command\n-feedback is displayed:\n-.IP\n-.nf\n-\\f[CB]\n-jshell> \/set mode mymode normal -command\n-|  Created new feedback mode: mymode\n-\\f[R]\n-.fi\n-.PP\n-Because the new mode is based on the \\f[V]normal\\f[R] mode, the prompts\n-are the same.\n-The following example shows how to see what prompts are used and then\n-changes the prompts to custom strings.\n-The first string represents the standard JShell prompt.\n-The second string represents the prompt for additional lines in\n-multiline snippets.\n-.IP\n-.nf\n-\\f[CB]\n-jshell> \/set prompt mymode\n-|  \/set prompt mymode \\[dq]\\[rs]njshell> \\[dq] \\[dq]   ...> \\[dq]\n-\n-jshell> \/set prompt mymode \\[dq]\\[rs]nprompt$ \\[dq] \\[dq]   continue$ \\[dq]\n-\\f[R]\n-.fi\n-.PP\n-The maximum length of a displayed value is controlled by the truncation\n-setting.\n-Different types of values can have different lengths.\n-The following example sets an overall truncation value of 72, and a\n-truncation value of 500 for variable value expressions:\n-.IP\n-.nf\n-\\f[CB]\n-jshell> \/set truncation mymode 72\n-\n-jshell> \/set truncation mymode 500 varvalue\n-\\f[R]\n-.fi\n-.PP\n-The feedback displayed after snippets are entered is controlled by the\n-format setting and is based on the type of snippet entered and the\n-action taken for that snippet.\n-In the predefined mode \\f[V]normal\\f[R], the string \\f[V]created\\f[R] is\n-displayed when a method is created.\n-The following example shows how to change that string to\n-\\f[V]defined\\f[R]:\n-.IP\n-.nf\n-\\f[CB]\n-jshell> \/set format mymode action \\[dq]defined\\[dq] added-primary\n-\\f[R]\n-.fi\n-.PP\n-Use the \\f[V]\/set feedback\\f[R] command to start using the feedback mode\n-that was just created.\n-The following example shows the custom mode in use:\n-.IP\n-.nf\n-\\f[CB]\n-jshell> \/set feedback mymode\n-|  Feedback mode: mymode\n-\n-prompt$ int square (int num1){\n-   continue$ return num1*num1;\n-   continue$ }\n-|  defined method square(int)\n-\n-prompt$\n-\\f[R]\n-.fi\n","filename":"src\/jdk.jshell\/share\/man\/jshell.1","additions":0,"deletions":1292,"binary":false,"changes":1292,"status":"deleted"},{"patch":"@@ -0,0 +1,1042 @@\n+---\n+# Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JSHELL(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jshell - interactively evaluate declarations, statements, and expressions of\n+the Java programming language in a read-eval-print loop (REPL)\n+\n+## Synopsis\n+\n+`jshell` \\[*options*\\] \\[*load-files*\\]\n+\n+*options*\n+:   Command-line options, separated by spaces. See [Options for jshell].\n+\n+*load-files*\n+:   One or more scripts to run when the tool is started. Scripts can contain\n+    any valid code snippets or JShell commands.\n+\n+    The script can be a local file or one of following predefined scripts:\n+\n+    `DEFAULT`\n+    :   Loads the default entries, which are commonly used as imports.\n+\n+    `JAVASE`\n+    :   Imports all Java SE packages.\n+\n+    `PRINTING`\n+    :   Defines `print`, `println`, and `printf` as `jshell` methods for use\n+        within the tool.\n+\n+    `TOOLING`\n+    :   Defines `javac`, `jar`, and other methods for running JDK tools via\n+        their command-line interface within the `jshell` tool.\n+\n+    For more than one script, use a space to separate the names. Scripts are\n+    run in the order in which they're entered on the command line. Command-line\n+    scripts are run after startup scripts. To run a script after JShell is\n+    started, use the `\/open` command.\n+\n+    To accept input from standard input and suppress the interactive I\/O, enter\n+    a hyphen (-) for *load-files*. This option enables the use of the `jshell`\n+    tool in pipe chains.\n+\n+## Description\n+\n+JShell provides a way to interactively evaluate declarations, statements, and\n+expressions of the Java programming language, making it easier to learn the\n+language, explore unfamiliar code and APIs, and prototype complex code. Java\n+statements, variable definitions, method definitions, class definitions, import\n+statements, and expressions are accepted. The bits of code entered are called\n+snippets.\n+\n+As snippets are entered, they're evaluated, and feedback is provided. Feedback\n+varies from the results and explanations of actions to nothing, depending on\n+the snippet entered and the feedback mode chosen. Errors are described\n+regardless of the feedback mode. Start with the verbose mode to get the most\n+feedback while learning the tool.\n+\n+Command-line options are available for configuring the initial environment when\n+JShell is started. Within JShell, commands are available for modifying the\n+environment as needed.\n+\n+Existing snippets can be loaded from a file to initialize a JShell session, or\n+at any time within a session. Snippets can be modified within the session to\n+try out different variations and make corrections. To keep snippets for later\n+use, save them to a file.\n+\n+## Options for jshell\n+\n+`--add-exports` *module*\/*package*\n+:   Specifies a package to be considered as exported from its defining module.\n+\n+`--add-modules` *module*\\[`,`*module*...\\]\n+:   Specifies the root modules to resolve in addition to the initial module.\n+\n+`-C`*flag*\n+:   passes *flag* to the Java compiler inside JShell. For example, `-C-Xlint`\n+    enables all the recommended lint warnings, and `-C--release=<N>` compiles\n+    for Java SE N, as if --release N was specified.\n+\n+`--class-path` *path*\n+:   Specifies the directories and archives that are searched to locate class\n+    files. This option overrides the path in the `CLASSPATH` environment\n+    variable. If the environment variable isn't set and this option isn't used,\n+    then the current directory is searched. For Linux and macOS, use a colon\n+    (:) to separate items in the path. For Windows, use a semicolon (;) to\n+    separate items.\n+\n+`--enable-preview`\n+:   Allows code to depend on the preview features of this release.\n+\n+`--execution` *specification*\n+:   Specifies an alternate execution engine, where *specification* is an\n+    ExecutionControl spec. See the documentation of the package jdk.jshell.spi\n+    for the syntax of the spec.\n+\n+`--feedback` *mode*\n+:   Sets the initial level of feedback provided in response to what's entered.\n+    The initial level can be overridden within a session by using the\n+    `\/set feedback` *mode* command. The default is `normal`.\n+\n+    The following values are valid for *mode*:\n+\n+    `verbose`\n+    :   Provides detailed feedback for entries. Additional information about\n+        the action performed is displayed after the result of the action. The\n+        next prompt is separated from the feedback by a blank line.\n+\n+    `normal`\n+    :   Provides an average amount of feedback. The next prompt is separated\n+        from the feedback by a blank line.\n+\n+    `concise`\n+    :   Provides minimal feedback. The next prompt immediately follows the code\n+        snippet or feedback.\n+\n+    `silent`\n+    :   Provides no feedback. The next prompt immediately follows the code\n+        snippet.\n+\n+    *custom*\n+    :   Provides custom feedback based on how the mode is defined. Custom\n+        feedback modes are created within JShell by using the `\/set mode`\n+        command.\n+\n+`--help` or `-h` or `-?`\n+:   Prints a summary of standard options and exits the tool.\n+\n+`--help-extra` or `-X`\n+:   Prints a summary of nonstandard options and exits the tool. Nonstandard\n+    options are subject to change without notice.\n+\n+`-J`*flag*\n+:   passes *flag* to the runtime system, but has no effect on the execution of\n+    code snippets. To specify flags that affect the execution of code snippets,\n+    use `-R`*flag*. Alternatively, use `-J`*flag* with `--execution local`.\n+\n+`--module-path` *modulepath*\n+:   Specifies where to find application modules. For Linux and macOS, use a\n+    colon (:) to separate items in the path. For Windows, use a semicolon (;)\n+    to separate items.\n+\n+`--no-startup`\n+:   Prevents startup scripts from running when JShell starts. Use this option\n+    to run only the scripts entered on the command line when JShell is started,\n+    or to start JShell without any preloaded information if no scripts are\n+    entered. This option can't be used if the `--startup` option is used.\n+\n+`-q`\n+:   Sets the feedback mode to `concise`, which is the same as entering\n+    `--feedback concise`.\n+\n+`-R`*flag*\n+:   passes *flag* to the runtime system only when code snippets are executed.\n+    For example, `-R-Dfoo=bar` means that execution of the snippet\n+    `System.getProperty(\"foo\")` will return `\"bar\"`.\n+\n+`-s`\n+:   Sets the feedback mode to `silent`, which is the same as entering\n+    `--feedback silent`.\n+\n+`--show-version`\n+:   Prints version information and enters the tool.\n+\n+`--startup` *file*\n+:   Overrides the default startup script for this session. The script can\n+    contain any valid code snippets or commands.\n+\n+    The script can be a local file or one of the following predefined scripts:\n+\n+    `DEFAULT`\n+    :   Loads the default entries, which are commonly used as imports.\n+\n+    `JAVASE`\n+    :   Imports all Java SE packages.\n+\n+    `PRINTING`\n+    :   Defines `print`, `println`, and `printf` as `jshell` methods for use\n+        within the tool.\n+\n+    `TOOLING`\n+    :   Defines `javac`, `jar`, and other methods for running JDK tools via\n+        their command-line interface within the `jshell` tool.\n+\n+    For more than one script, provide a separate instance of this option for\n+    each script. Startup scripts are run when JShell is first started and when\n+    the session is restarted with the `\/reset`, `\/reload`, or `\/env` command.\n+    Startup scripts are run in the order in which they're entered on the\n+    command line.\n+\n+    This option can't be used if the `--no-startup` option is used.\n+\n+`-v`\n+:   Sets the feedback mode to `verbose`, which is the same as entering\n+    `--feedback verbose`.\n+\n+`--version`\n+:   Prints version information and exits the tool.\n+\n+## jshell Commands\n+\n+Within the `jshell` tool, commands are used to modify the environment and\n+manage code snippets.\n+\n+`\/drop` {*name*\\|*id*\\|*startID*`-`*endID*} \\[{*name*\\|*id*\\|*startID*`-`*endID*}...\\]\n+:   Drops snippets identified by name, ID, or ID range, making them inactive.\n+    For a range of IDs, provide the starting ID and ending ID separated with a\n+    hyphen. To provide a list, separate the items in the list with a space. Use\n+    the `\/list` command to see the IDs of code snippets.\n+\n+`\/edit` \\[*option*\\]\n+:   Opens an editor. If no option is entered, then the editor opens with the\n+    active snippets.\n+\n+    The following options are valid:\n+\n+    {*name*\\|*id*\\|*startID*`-`*endID*} \\[{*name*\\|*id*\\|*startID*`-`*endID*}...\\]\n+    :   Opens the editor with the snippets identified by name, ID, or ID range.\n+        For a range of IDs, provide the starting ID and ending ID separated\n+        with a hyphen. To provide a list, separate the items in the list with a\n+        space. Use the `\/list` command to see the IDs of code snippets.\n+\n+    `-all`\n+    :   Opens the editor with all snippets, including startup snippets and\n+        snippets that failed, were overwritten, or were dropped.\n+\n+    `-start`\n+    :   Opens the editor with startup snippets that were evaluated when JShell\n+        was started.\n+\n+    To exit edit mode, close the editor window, or respond to the prompt\n+    provided if the `-wait` option was used when the editor was set.\n+\n+    Use the `\/set editor` command to specify the editor to use. If no editor is\n+    set, then the following environment variables are checked in order:\n+    `JSHELLEDITOR`, `VISUAL`, and `EDITOR`. If no editor is set in JShell and\n+    none of the editor environment variables is set, then a simple default\n+    editor is used.\n+\n+`\/env` \\[*options*\\]\n+:   Displays the environment settings, or updates the environment settings and\n+    restarts the session. If no option is entered, then the current environment\n+    settings are displayed. If one or more options are entered, then the\n+    session is restarted as follows:\n+\n+    -   Updates the environment settings with the provided options.\n+\n+    -   Resets the execution state.\n+\n+    -   Runs the startup scripts.\n+\n+    -   Silently replays the history in the order entered. The history includes\n+        all valid snippets or `\/drop` commands entered at the `jshell` prompt,\n+        in scripts entered on the command line, or scripts entered with the\n+        `\/open` command.\n+\n+    Environment settings entered on the command line or provided with a\n+    previous `\/reset`, `\/env`, or `\/reload` command are maintained unless an\n+    *option* is entered that overwrites the setting.\n+\n+    The following options are valid:\n+\n+    `--add-modules` *module*\\[`,`*module*...\\]\n+    :   Specifies the root modules to resolve in addition to the initial\n+        module.\n+\n+    `--add-exports` *source-module*`\/`*package*`=`*target-module*\\[`,`*target-module*\\]\\*\n+    :   Adds an export of *package* from *source-module* to *target-module*.\n+\n+    `--class-path` *path*\n+    :   Specifies the directories and archives that are searched to locate\n+        class files. This option overrides the path in the `CLASSPATH`\n+        environment variable. If the environment variable isn't set and this\n+        option isn't used, then the current directory is searched. For Linux\n+        and macOS, use a colon (`:`) to separate items in the path. For Windows,\n+        use a semicolon (`;`) to separate items.\n+\n+    `--module-path` *modulepath*\n+    :   Specifies where to find application modules. For Linux and macOS, use\n+        a colon (`:`) to separate items in the path. For Windows, use a\n+        semicolon (`;`) to separate items.\n+\n+`\/exit` \\[*integer-expression-snippet*\\]\n+:   Exits the tool. If no snippet is entered, the exit status is zero. If a\n+    snippet is entered and the result of the snippet is an integer, the result\n+    is used as the exit status. If an error occurs, or the result of the\n+    snippet is not an integer, an error is displayed and the tool remains\n+    active.\n+\n+`\/history`\n+:   Displays what was entered in this session.\n+\n+`\/help` \\[*command*\\|*subject*\\]\n+:   Displays information about commands and subjects. If no options are\n+    entered, then a summary of information for all commands and a list of\n+    available subjects are displayed. If a valid command is provided, then\n+    expanded information for that command is displayed. If a valid subject is\n+    entered, then information about that subject is displayed.\n+\n+    The following values for *subject* are valid:\n+\n+    `context`\n+    :   Describes the options that are available for configuring the\n+        environment.\n+\n+    `intro`\n+    :   Provides an introduction to the tool.\n+\n+    `shortcuts`\n+    :   Describes keystrokes for completing commands and snippets. See [Input\n+        Shortcuts].\n+\n+`\/imports`\n+:   Displays the current active imports, including those from the startup\n+    scripts and scripts that were entered on the command line when JShell was\n+    started.\n+\n+`\/list` \\[*option*\\]\n+:   Displays a list of snippets and their IDs. If no option is entered, then\n+    all active snippets are displayed, but startup snippets aren't.\n+\n+    The following options are valid:\n+\n+    {*name*\\|*id*\\|*startID*`-`*endID*} \\[{*name*\\|*id*\\|*startID*`-`*endID*}...\\]\n+    :   Displays the snippets identified by name, ID, or ID range. For a range\n+        of IDs, provide the starting ID and ending ID separated with a hyphen.\n+        To provide a list, separate the items in the list with a space.\n+\n+    `-all`\n+    :   Displays all snippets, including startup snippets and snippets that\n+        failed, were overwritten, or were dropped. IDs that begin with `s` are\n+        startup snippets. IDs that begin with `e` are snippets that failed.\n+\n+    `-start`\n+    :   Displays startup snippets that were evaluated when JShell was started.\n+\n+`\/methods` \\[*option*\\]\n+:   Displays information about the methods that were entered. If no option is\n+    entered, then the name, parameter types, and return type of all active\n+    methods are displayed.\n+\n+    The following options are valid:\n+\n+    {*name*\\|*id*\\|*startID*`-`*endID*} \\[{*name*\\|*id*\\|*startID*`-`*endID*}...\\]\n+    :   Displays information for methods identified by name, ID, or ID range.\n+        For a range of IDs, provide the starting ID and ending ID separated\n+        with a hyphen. To provide a list, separate the items in the list with a\n+        space. Use the `\/list` command to see the IDs of code snippets.\n+\n+    `-all`\n+    :   Displays information for all methods, including those added when JShell\n+        was started, and methods that failed, were overwritten, or were\n+        dropped.\n+\n+    `-start`\n+    :   Displays information for startup methods that were added when JShell\n+        was started.\n+\n+`\/open` *file*\n+:   Opens the script specified and reads the snippets into the tool. The script\n+    can be a local file or one of the following predefined scripts:\n+\n+    `DEFAULT`\n+    :   Loads the default entries, which are commonly used as imports.\n+\n+    `JAVASE`\n+    :   Imports all Java SE packages.\n+\n+    `PRINTING`\n+    :   Defines `print`, `println`, and `printf` as `jshell` methods for use\n+        within the tool.\n+\n+    `TOOLING`\n+    :   Defines `javac`, `jar`, and other methods for running JDK tools via\n+        their command-line interface within the `jshell` tool.\n+\n+`\/reload` \\[*options*\\]\n+:   Restarts the session as follows:\n+\n+    -   Updates the environment settings with the provided options, if any.\n+\n+    -   Resets the execution state.\n+\n+    -   Runs the startup scripts.\n+\n+    -   Replays the history in the order entered. The history includes all\n+        valid snippets or `\/drop` commands entered at the `jshell` prompt, in\n+        scripts entered on the command line, or scripts entered with the\n+        `\/open` command.\n+\n+    Environment settings entered on the command line or provided with a\n+    previous `\/reset`, `\/env`, or `\/reload` command are maintained unless an\n+    *option* is entered that overwrites the setting.\n+\n+    The following options are valid:\n+\n+    `--add-modules` *module*\\[`,`*module*...\\]\n+    :   Specifies the root modules to resolve in addition to the initial\n+        module.\n+\n+    `--add-exports` *source-module*`\/`*package*`=`*target-module*\\[`,`*target-module*\\]\\*\n+    :   Adds an export of *package* from *source-module* to *target-module*.\n+\n+    `--class-path` *path*\n+    :   Specifies the directories and archives that are searched to locate\n+        class files. This option overrides the path in the `CLASSPATH`\n+        environment variable. If the environment variable isn't set and this\n+        option isn't used, then the current directory is searched. For Linux\n+        and macOS, use a colon (`:`) to separate items in the path. For\n+        Windows, use a semicolon (`;`) to separate items.\n+\n+    `--module-path` *modulepath*\n+    :   Specifies where to find application modules. For Linux and macOS, use\n+        a colon (`:`) to separate items in the path. For Windows, use a\n+        semicolon (`;`) to separate items.\n+\n+    `-quiet`\n+    :   Replays the valid history without displaying it. Errors are displayed.\n+\n+    `-restore`\n+    :   Resets the environment to the state at the start of the previous run of\n+        the tool or to the last time a `\/reset`, `\/reload`, or `\/env` command\n+        was executed in the previous run. The valid history since that point is\n+        replayed. Use this option to restore a previous JShell session.\n+\n+`\/reset` \\[*options*\\]\n+:   Discards all entered snippets and restarts the session as follows:\n+\n+    -   Updates the environment settings with the provided options, if any.\n+\n+    -   Resets the execution state.\n+\n+    -   Runs the startup scripts.\n+\n+    History is not replayed. All code that was entered is lost.\n+\n+    Environment settings entered on the command line or provided with a\n+    previous `\/reset`, `\/env`, or `\/reload` command are maintained unless an\n+    *option* is entered that overwrites the setting.\n+\n+    The following options are valid:\n+\n+    `--add-modules` *module*\\[`,`*module*...\\]\n+    :   Specifies the root modules to resolve in addition to the initial\n+        module.\n+\n+    `--add-exports` *source-module*`\/`*package*`=`*target-module*\\[`,`*target-module*\\]\\*\n+    :   Adds an export of *package* from *source-module* to *target-module*.\n+\n+    `--class-path` *path*\n+    :   Specifies the directories and archives that are searched to locate\n+        class files. This option overrides the path in the `CLASSPATH`\n+        environment variable. If the environment variable isn't set and this\n+        option isn't used, then the current directory is searched. For Linux\n+        and macOS, use a colon (`:`) to separate items in the path. For\n+        Windows, use a semicolon (`;`) to separate items.\n+\n+    `--module-path` *modulepath*\n+    :   Specifies where to find application modules. For Linux and macOS, use\n+        a colon (`:`) to separate items in the path. For Windows, use a\n+        semicolon (`;`) to separate items.\n+\n+`\/save` \\[*options*\\] *file*\n+:   Saves snippets and commands to the file specified. If no options are\n+    entered, then active snippets are saved.\n+\n+    The following options are valid:\n+\n+    {*name*\\|*id*\\|*startID*`-`*endID*} \\[{*name*\\|*id*\\|*startID*`-`*endID*}...\\]\n+    :   Saves the snippets and commands identified by name, ID, or ID range.\n+        For a range of IDs, provide the starting ID and ending ID separated\n+        with a hyphen. To provide a list, separate the items in the list with a\n+        space. Use the `\/list` command to see the IDs of the code snippets.\n+\n+    `-all`\n+    :   Saves all snippets, including startup snippets and snippets that were\n+        overwritten or failed.\n+\n+    `-history`\n+    :   Saves the sequential history of all commands and snippets entered in\n+        the current session.\n+\n+    `-start`\n+    :   Saves the current startup settings. If no startup scripts were\n+        provided, then an empty file is saved.\n+\n+`\/set` \\[*setting*\\]\n+:   Sets configuration information, including the external editor, startup\n+    settings, and feedback mode. This command is also used to create a custom\n+    feedback mode with customized prompt, format, and truncation values. If no\n+    setting is entered, then the current setting for the editor, startup\n+    settings, and feedback mode are displayed.\n+\n+    The following values are valid for `setting`:\n+\n+    `editor` \\[*options*\\] \\[*command*\\]\n+    :   Sets the command used to start an external editor when the `\/edit`\n+        command is entered. The command can include command arguments separated\n+        by spaces. If no command or options are entered, then the current\n+        setting is displayed.\n+\n+        The following options are valid:\n+\n+        `-default`\n+        :   Sets the editor to the default editor provided with JShell. This\n+            option can't be used if a command for starting an editor is\n+            entered.\n+\n+        `-delete`\n+        :   Sets the editor to the one in effect when the session started. If\n+            used with the `-retain` option, then the retained editor setting is\n+            deleted and the editor is set to the first of the following\n+            environment variables found: `JSHELLEDITOR`, `VISUAL`, or `EDITOR`.\n+            If none of the editor environment variables are set, then this\n+            option sets the editor to the default editor.\n+\n+            This option can't be used if a command for starting an editor is\n+            entered.\n+\n+        `-retain`\n+        :   Saves the editor setting across sessions. If no other option or a\n+            command is entered, then the current setting is saved.\n+\n+        `-wait`\n+        :   Prompts the user to indicate when editing is complete. Otherwise\n+            control returns to JShell when the editor exits. Use this option if\n+            the editor being used exits immediately, for example, when an edit\n+            window already exists. This option is valid only when a command for\n+            starting an editor is entered.\n+\n+    `feedback` \\[*mode*\\]\n+    :   Sets the feedback mode used to respond to input. If no mode is entered,\n+        then the current mode is displayed.\n+\n+        The following modes are valid: `concise`, `normal`, `silent`,\n+        `verbose`, and any custom mode created with the `\/set mode` command.\n+\n+    `format` *mode* *field* `\"`*format-string*`\"` *selector*\n+    :   Sets the format of the feedback provided in response to input. If no\n+        mode is entered, then the current formats for all fields for all\n+        feedback modes are displayed. If only a mode is entered, then the\n+        current formats for that mode are displayed. If only a mode and field\n+        are entered, then the current formats for that field are displayed.\n+\n+        To define a format, the following arguments are required:\n+\n+        *mode*\n+        :   Specifies a feedback mode to which the response format is applied.\n+            Only custom modes created with the `\/set mode` command can be\n+            modified.\n+\n+        *field*\n+        :   Specifies a context-specific field to which the response format is\n+            applied. The fields are described in the online help, which is\n+            accessed from JShell using the `\/help \/set format` command.\n+\n+        `\"`*format-string*`\"`\n+        :   Specifies the string to use as the response format for the\n+            specified field and selector. The structure of the format string is\n+            described in the online help, which is accessed from JShell using\n+            the `\/help \/set format` command.\n+\n+        *selector*\n+        :   Specifies the context in which the response format is applied. The\n+            selectors are described in the online help, which is accessed from\n+            JShell using the `\/help \/set format` command.\n+\n+    `mode` \\[*mode-name*\\] \\[*existing-mode*\\] \\[*options*\\]\n+    :   Creates a custom feedback mode with the mode name provided. If no mode\n+        name is entered, then the settings for all modes are displayed, which\n+        includes the mode, prompt, format, and truncation settings. If the name\n+        of an existing mode is provided, then the settings from the existing\n+        mode are copied to the mode being created.\n+\n+        The following options are valid:\n+\n+        `-command`\\|`-quiet`\n+        :   Specifies the level of feedback displayed for commands when using\n+            the mode. This option is required when creating a feedback mode.\n+            Use `-command` to show information and verification feedback for\n+            commands. Use `-quiet` to show only essential feedback for\n+            commands, such as error messages.\n+\n+        `-delete`\n+        :   Deletes the named feedback mode for this session. The name of the\n+            mode to delete is required. To permanently delete a retained mode,\n+            use the `-retain` option with this option. Predefined modes can't\n+            be deleted.\n+\n+        `-retain`\n+        :   Saves the named feedback mode across sessions. The name of the mode\n+            to retain is required.\n+\n+        Configure the new feedback mode using the `\/set prompt`, `\/set format`,\n+        and `\/set truncation` commands.\n+\n+        To start using the new mode, use the `\/set feedback` command.\n+\n+    `prompt` *mode* `\"`*prompt-string*`\"` `\"`*continuation-prompt-string*`\"`\n+    :   Sets the prompts for input within JShell. If no mode is entered, then\n+        the current prompts for all feedback modes are displayed. If only a\n+        mode is entered, then the current prompts for that mode are displayed.\n+\n+        To define a prompt, the following arguments are required:\n+\n+        *mode*\n+        :   Specifies the feedback mode to which the prompts are applied. Only\n+            custom modes created with the `\/set mode` command can be modified.\n+\n+        `\"`*prompt-string*`\"`\n+        :   Specifies the string to use as the prompt for the first line of\n+            input.\n+\n+        `\"`*continuation-prompt-string*`\"`\n+        :   Specifies the string to use as the prompt for the additional input\n+            lines needed to complete a snippet.\n+\n+    `start` \\[`-retain`\\] \\[*file* \\[*file*...\\]\\|*option*\\]\n+    :   Sets the names of the startup scripts used when the next `\/reset`,\n+        `\/reload`, or `\/env` command is entered. If more than one script is\n+        entered, then the scripts are run in the order entered. If no scripts\n+        or options are entered, then the current startup settings are\n+        displayed.\n+\n+        The scripts can be local files or one of the following predefined\n+        scripts:\n+\n+        `DEFAULT`\n+        :   Loads the default entries, which are commonly used as imports.\n+\n+        `JAVASE`\n+        :   Imports all Java SE packages.\n+\n+        `PRINTING`\n+        :   Defines `print`, `println`, and `printf` as `jshell` methods for\n+            use within the tool.\n+\n+        `TOOLING`\n+        :   Defines `javac`, `jar`, and other methods for running JDK tools via\n+            their command-line interface within the `jshell` tool.\n+\n+        The following options are valid:\n+\n+        `-default`\n+        :   Sets the startup settings to the default settings.\n+\n+        `-none`\n+        :   Specifies that no startup settings are used.\n+\n+        Use the `-retain` option to save the start setting across sessions.\n+\n+    `truncation` *mode* *length* *selector*\n+    :   Sets the maximum length of a displayed value. If no mode is entered,\n+        then the current truncation values for all feedback modes are\n+        displayed. If only a mode is entered, then the current truncation\n+        values for that mode are displayed.\n+\n+        To define truncation values, the following arguments are required:\n+\n+        *mode*\n+        :   Specifies the feedback mode to which the truncation value is\n+            applied. Only custom modes created with the `\/set mode` command can\n+            be modified.\n+\n+        *length*\n+        :   Specifies the unsigned integer to use as the maximum length for the\n+            specified selector.\n+\n+        *selector*\n+        :   Specifies the context in which the truncation value is applied. The\n+            selectors are described in the online help, which is accessed from\n+            JShell using the `\/help \/set truncation` command.\n+\n+`\/types` \\[*option*\\]\n+:   Displays classes, interfaces, and enums that were entered. If no option is\n+    entered, then all current active classes, interfaces, and enums are\n+    displayed.\n+\n+    The following options are valid:\n+\n+    {*name*\\|*id*\\|*startID*`-`*endID*} \\[{*name*\\|*id*\\|*startID*`-`*endID*}...\\]\n+    :   Displays information for classes, interfaces, and enums identified by\n+        name, ID, or ID range. For a range of IDs, provide the starting ID and\n+        ending ID separated with a hyphen. To provide a list, separate the\n+        items in the list with a space. Use the `\/list` command to see the IDs\n+        of the code snippets.\n+\n+    `-all`\n+    :   Displays information for all classes, interfaces, and enums, including\n+        those added when JShell was started, and classes, interfaces, and enums\n+        that failed, were overwritten, or were dropped.\n+\n+    `-start`\n+    :   Displays information for startup classes, interfaces, and enums that\n+        were added when JShell was started.\n+\n+`\/vars` \\[*option*\\]\n+:   Displays the name, type, and value of variables that were entered. If no\n+    option is entered, then all current active variables are displayed.\n+\n+    The following options are valid:\n+\n+    {*name*\\|*id*\\|*startID*`-`*endID*} \\[{*name*\\|*id*\\|*startID*`-`*endID*}...\\]\n+    :   Displays information for variables identified by name, ID, or ID range.\n+        For a range of IDs, provide the starting ID and ending ID separated\n+        with a hyphen. To provide a list, separate the items in the list with a\n+        space. Use the `\/list` command to see the IDs of the code snippets.\n+\n+    `-all`\n+    :   Displays information for all variables, including those added when\n+        JShell was started, and variables that failed, were overwritten, or\n+        were dropped.\n+\n+    `-start`\n+    :   Displays information for startup variables that were added when JShell\n+        was started.\n+\n+`\/?`\n+:   Same as the `\/help` command.\n+\n+`\/!`\n+:   Reruns the last snippet.\n+\n+`\/`{*name*\\|*id*\\|*startID*`-`*endID*} \\[{*name*\\|*id*\\|*startID*`-`*endID*}...\\]\n+:   Reruns the snippets identified by ID, range of IDs, or name. For a range of\n+    IDs, provide the starting ID and ending ID separated with a hyphen. To\n+    provide a list, separate the items in the list with a space. The first item\n+    in the list must be an ID or ID range. Use the `\/list` command to see the\n+    IDs of the code snippets.\n+\n+`\/-`*n*\n+:   Reruns the -*n*th previous snippet. For example, if 15 code snippets were\n+    entered, then `\/-4` runs the 11th snippet. Commands aren't included in the\n+    count.\n+\n+## Input Shortcuts\n+\n+The following shortcuts are available for entering commands and snippets in\n+JShell.\n+\n+### Tab completion\n+\n+**\\<tab\\>**\n+:   When entering snippets, commands, subcommands, command arguments, or\n+    command options, use the Tab key to automatically complete the item. If the\n+    item can't be determined from what was entered, then possible options are\n+    provided.\n+\n+    When entering a method call, use the Tab key after the method call's\n+    opening parenthesis to see the parameters for the method. If the method has\n+    more than one signature, then all signatures are displayed. Pressing the\n+    Tab key a second time displays the description of the method and the\n+    parameters for the first signature. Continue pressing the Tab key for a\n+    description of any additional signatures.\n+\n+**Shift+\\<Tab\\> V**\n+:   After entering a complete expression, use this key sequence to convert the\n+    expression to a variable declaration of a type determined by the type of\n+    the expression.\n+\n+**Shift+\\<Tab\\> M**\n+:   After entering a complete expression or statement, use this key sequence to\n+    convert the expression or statement to a method declaration. If an\n+    expression is entered, the return type is based on the type of the\n+    expression.\n+\n+**Shift+\\<Tab\\> I**\n+:   When an identifier is entered that can't be resolved, use this key sequence\n+    to show possible imports that resolve the identifier based on the content\n+    of the specified class path.\n+\n+### Command abbreviations\n+\n+An abbreviation of a command is accepted if the abbreviation uniquely\n+identifies a command. For example, `\/l` is recognized as the `\/list` command.\n+However, `\/s` isn't a valid abbreviation because it can't be determined if the\n+`\/set` or `\/save` command is meant. Use `\/se` for the `\/set` command or `\/sa`\n+for the `\/save` command.\n+\n+Abbreviations are also accepted for subcommands, command arguments, and command\n+options. For example, use `\/m -a` to display all methods.\n+\n+### History navigation\n+\n+A history of what was entered is maintained across sessions. Use the up and\n+down arrows to scroll through commands and snippets from the current and past\n+sessions. Use the Ctrl key with the up and down arrows to skip all but the\n+first line of multiline snippets.\n+\n+### History search\n+\n+Use the Ctrl+R key combination to search the history for the string entered.\n+The prompt changes to show the string and the match. Ctrl+R searches backwards\n+from the current location in the history through earlier entries. Ctrl+S\n+searches forward from the current location in the history though later entries.\n+\n+## Input Editing\n+\n+The editing capabilities of JShell are similar to that of other common shells.\n+Keyboard keys and key combinations provide line editing shortcuts. The Ctrl key\n+and Meta key are used in key combinations. If your keyboard doesn't have a Meta\n+key, then the Alt key is often mapped to provide Meta key functionality.\n+\n+Table: Line Editing Shortcuts\n+\n+Key or Key Combination   Action\n+-----------------------  -------\n+Return                   Enter the current line.\n+Left arrow               Move the cursor to the left one character.\n+Right arrow              Move the cursor to the right one character.\n+Ctrl+A                   Move the cursor to the beginning of the line.\n+Ctrl+E                   Move the cursor to the end of the line.\n+Meta+B                   Move the cursor to the left one word.\n+Meta+F                   Move the cursor to the right one word.\n+Delete                   Delete the character under the cursor.\n+Backspace                Delete the character before the cursor.\n+Ctrl+K                   Delete the text from the cursor to the end of the line.\n+Meta+D                   Delete the text from the cursor to the end of the word.\n+Ctrl+W                   Delete the text from the cursor to the previous white space.\n+Ctrl+Y                   Paste the most recently deleted text into the line.\n+Meta+Y                   After Ctrl+Y, press to cycle through the previously deleted text.\n+-----------------------  -------\n+\n+## Example of Starting and Stopping a JShell Session\n+\n+JShell is provided with the JDK. To start a session, enter `jshell` on the\n+command line. A welcome message is printed, and a prompt for entering commands\n+and snippets is provided.\n+\n+```\n+% jshell\n+|  Welcome to JShell -- Version 9\n+|  For an introduction type: \/help intro\n+\n+jshell>\n+```\n+\n+To see which snippets were automatically loaded when JShell started, use the\n+`\/list -start` command. The default startup snippets are import statements for\n+common packages. The ID for each snippet begins with the letter *s*, which\n+indicates it's a startup snippet.\n+\n+```\n+jshell> \/list -start\n+\n+  s1 : import java.io.*;\n+  s2 : import java.math.*;\n+  s3 : import java.net.*;\n+  s4 : import java.nio.file.*;\n+  s5 : import java.util.*;\n+  s6 : import java.util.concurrent.*;\n+  s7 : import java.util.function.*;\n+  s8 : import java.util.prefs.*;\n+  s9 : import java.util.regex.*;\n+ s10 : import java.util.stream.*;\n+\n+jshell>\n+```\n+\n+To end the session, use the `\/exit` command.\n+\n+```\n+jshell> \/exit\n+|  Goodbye\n+\n+%\n+```\n+\n+## Example of Entering Snippets\n+\n+Snippets are Java statements, variable definitions, method definitions, class\n+definitions, import statements, and expressions. Terminating semicolons are\n+automatically added to the end of a completed snippet if they're missing.\n+\n+The following example shows two variables and a method being defined, and the\n+method being run. Note that a scratch variable is automatically created to hold\n+the result because no variable was provided.\n+\n+```\n+jshell> int a=4\n+a ==> 4\n+\n+jshell> int b=8\n+b ==> 8\n+\n+jshell> int square(int i1) {\n+   ...> return i1 * i1;\n+   ...> }\n+|  created method square(int)\n+\n+jshell> square(b)\n+$5 ==> 64\n+```\n+\n+## Example of Changing Snippets\n+\n+Change the definition of a variable, method, or class by entering it again.\n+\n+The following examples shows a method being defined and the method run:\n+\n+```\n+jshell> String grade(int testScore) {\n+   ...>     if (testScore >= 90) {\n+   ...>         return \"Pass\";\n+   ...>     }\n+   ...>     return \"Fail\";\n+   ...> }\n+|  created method grade(int)\n+\n+jshell> grade(88)\n+$3 ==> \"Fail\"\n+```\n+\n+To change the method `grade` to allow more students to pass, enter the method\n+definition again and change the pass score to `80`. Use the up arrow key to\n+retrieve the previous entries to avoid having to reenter them and make the\n+change in the `if` statement. The following example shows the new definition\n+and reruns the method to show the new result:\n+\n+```\n+jshell> String grade(int testScore) {\n+   ...>     if (testScore >= 80) {\n+   ...>         return \"Pass\";\n+   ...>     }\n+   ...>     return \"Fail\";\n+   ...> }\n+|  modified method grade(int)\n+\n+jshell> grade(88)\n+$5 ==> \"Pass\"\n+```\n+\n+For snippets that are more than a few lines long, or to make more than a few\n+changes, use the `\/edit` command to open the snippet in an editor. After the\n+changes are complete, close the edit window to return control to the JShell\n+session. The following example shows the command and the feedback provided when\n+the edit window is closed. The `\/list` command is used to show that the pass\n+score was changed to `85`.\n+\n+```\n+jshell> \/edit grade\n+|  modified method grade(int)\n+jshell> \/list grade\n+\n+   6 : String grade(int testScore) {\n+           if (testScore >= 85) {\n+               return \"Pass\";\n+           }\n+           return \"Fail\";\n+       }\n+```\n+\n+## Example of Creating a Custom Feedback Mode\n+\n+The feedback mode determines the prompt that's displayed, the feedback messages\n+that are provided as snippets are entered, and the maximum length of a\n+displayed value. Predefined feedback modes are provided. Commands for creating\n+custom feedback modes are also provided.\n+\n+Use the `\/set mode` command to create a new feedback mode. In the following\n+example, the new mode `mymode`, is based on the predefined feedback mode,\n+`normal`, and verifying command feedback is displayed:\n+\n+```\n+jshell> \/set mode mymode normal -command\n+|  Created new feedback mode: mymode\n+```\n+\n+Because the new mode is based on the `normal` mode, the prompts are the same.\n+The following example shows how to see what prompts are used and then changes\n+the prompts to custom strings. The first string represents the standard JShell\n+prompt. The second string represents the prompt for additional lines in\n+multiline snippets.\n+\n+```\n+jshell> \/set prompt mymode\n+|  \/set prompt mymode \"\\njshell> \" \"   ...> \"\n+\n+jshell> \/set prompt mymode \"\\nprompt$ \" \"   continue$ \"\n+```\n+\n+The maximum length of a displayed value is controlled by the truncation\n+setting. Different types of values can have different lengths. The following\n+example sets an overall truncation value of 72, and a truncation value of 500\n+for variable value expressions:\n+\n+```\n+jshell> \/set truncation mymode 72\n+\n+jshell> \/set truncation mymode 500 varvalue\n+```\n+\n+The feedback displayed after snippets are entered is controlled by the format\n+setting and is based on the type of snippet entered and the action taken for\n+that snippet. In the predefined mode `normal`, the string `created` is\n+displayed when a method is created. The following example shows how to change\n+that string to `defined`:\n+\n+```\n+jshell> \/set format mymode action \"defined\" added-primary\n+```\n+\n+Use the `\/set feedback` command to start using the feedback mode that was just\n+created. The following example shows the custom mode in use:\n+\n+```\n+jshell> \/set feedback mymode\n+|  Feedback mode: mymode\n+\n+prompt$ int square (int num1){\n+   continue$ return num1*num1;\n+   continue$ }\n+|  defined method square(int)\n+\n+prompt$\n+```\n","filename":"src\/jdk.jshell\/share\/man\/jshell.md","additions":1042,"deletions":0,"binary":false,"changes":1042,"status":"added"},{"patch":"@@ -1,219 +0,0 @@\n-.\\\" Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n-.\\\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-.\\\"\n-.\\\" This code is free software; you can redistribute it and\/or modify it\n-.\\\" under the terms of the GNU General Public License version 2 only, as\n-.\\\" published by the Free Software Foundation.\n-.\\\"\n-.\\\" This code is distributed in the hope that it will be useful, but WITHOUT\n-.\\\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-.\\\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-.\\\" version 2 for more details (a copy is included in the LICENSE file that\n-.\\\" accompanied this code).\n-.\\\"\n-.\\\" You should have received a copy of the GNU General Public License version\n-.\\\" 2 along with this work; if not, write to the Free Software Foundation,\n-.\\\" Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-.\\\"\n-.\\\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-.\\\" or visit www.oracle.com if you need additional information or have any\n-.\\\" questions.\n-.\\\"\n-.\\\" Automatically generated by Pandoc 2.19.2\n-.\\\"\n-.\\\" Define V font for inline verbatim, using C font in formats\n-.\\\" that render this, and otherwise B font.\n-.ie \"\\f[CB]x\\f[R]\"x\" \\{\\\n-. ftr V B\n-. ftr VI BI\n-. ftr VB B\n-. ftr VBI BI\n-.\\}\n-.el \\{\\\n-. ftr V CR\n-. ftr VI CI\n-. ftr VB CB\n-. ftr VBI CBI\n-.\\}\n-.TH \"JSTATD\" \"1\" \"2025\" \"JDK 24-ea\" \"JDK Commands\"\n-.hy\n-.SH NAME\n-.PP\n-jstatd - monitor the creation and termination of instrumented Java\n-HotSpot VMs\n-.SH SYNOPSIS\n-.PP\n-\\f[B]WARNING:\\f[R] This command is experimental, unsupported, and\n-deprecated.\n-It will be removed in a future release.\n-.PP\n-\\f[V]jstatd\\f[R] [\\f[I]options\\f[R]]\n-.TP\n-\\f[I]options\\f[R]\n-This represents the \\f[V]jstatd\\f[R] command-line options.\n-See \\f[B]Options for the jstatd Command\\f[R].\n-.SH DESCRIPTION\n-.PP\n-The \\f[V]jstatd\\f[R] command is an RMI server application that monitors\n-for the creation and termination of instrumented Java HotSpot VMs and\n-provides an interface to enable remote monitoring tools, \\f[V]jstat\\f[R]\n-and \\f[V]jps\\f[R], to attach to JVMs that are running on the local host\n-and collect information about the JVM process.\n-.PP\n-The \\f[V]jstatd\\f[R] server requires an RMI registry on the local host.\n-The \\f[V]jstatd\\f[R] server attempts to attach to the RMI registry on\n-the default port, or on the port you specify with the \\f[V]-p\\f[R]\n-\\f[V]port\\f[R] option.\n-If an RMI registry is not found, then one is created within the\n-\\f[V]jstatd\\f[R] application that\\[aq]s bound to the port that\\[aq]s\n-indicated by the \\f[V]-p\\f[R] \\f[V]port\\f[R] option or to the default\n-RMI registry port when the \\f[V]-p\\f[R] \\f[V]port\\f[R] option is\n-omitted.\n-You can stop the creation of an internal RMI registry by specifying the\n-\\f[V]-nr\\f[R] option.\n-.SH OPTIONS FOR THE JSTATD COMMAND\n-.TP\n-\\f[V]-nr\\f[R]\n-This option does not attempt to create an internal RMI registry within\n-the \\f[V]jstatd\\f[R] process when an existing RMI registry isn\\[aq]t\n-found.\n-.TP\n-\\f[V]-p\\f[R] \\f[I]port\\f[R]\n-This option sets the port number where the RMI registry is expected to\n-be found, or when not found, created if the \\f[V]-nr\\f[R] option\n-isn\\[aq]t specified.\n-.TP\n-\\f[V]-r\\f[R] \\f[I]rmiport\\f[R]\n-This option sets the port number to which the RMI connector is bound.\n-If not specified a random available port is used.\n-.TP\n-\\f[V]-n\\f[R] \\f[I]rminame\\f[R]\n-This option sets the name to which the remote RMI object is bound in the\n-RMI registry.\n-The default name is \\f[V]JStatRemoteHost\\f[R].\n-If multiple \\f[V]jstatd\\f[R] servers are started on the same host, then\n-the name of the exported RMI object for each server can be made unique\n-by specifying this option.\n-However, doing so requires that the unique server name be included in\n-the monitoring client\\[aq]s \\f[V]hostid\\f[R] and \\f[V]vmid\\f[R] strings.\n-.TP\n-\\f[V]-J\\f[R]\\f[I]option\\f[R]\n-This option passes a Java \\f[V]option\\f[R] to the JVM, where the option\n-is one of those described on the reference page for the Java application\n-launcher.\n-For example, \\f[V]-J-Xms48m\\f[R] sets the startup memory to 48 MB.\n-See \\f[B]java\\f[R].\n-.SH SECURITY\n-.PP\n-The \\f[V]jstatd\\f[R] server can monitor only JVMs for which it has the\n-appropriate native access permissions.\n-Therefore, the \\f[V]jstatd\\f[R] process must be running with the same\n-user credentials as the target JVMs.\n-Some user credentials, such as the root user in Linux and macOS\n-operating systems, have permission to access the instrumentation\n-exported by any JVM on the system.\n-A \\f[V]jstatd\\f[R] process running with such credentials can monitor any\n-JVM on the system, but introduces additional security concerns.\n-.PP\n-The \\f[V]jstatd\\f[R] server doesn\\[aq]t provide any authentication of\n-remote clients.\n-Therefore, running a \\f[V]jstatd\\f[R] server process exposes the\n-instrumentation export by all JVMs for which the \\f[V]jstatd\\f[R]\n-process has access permissions to any user on the network.\n-This exposure might be undesirable in your environment, and therefore,\n-local security policies should be considered before you start the\n-\\f[V]jstatd\\f[R] process, particularly in production environments or on\n-networks that aren\\[aq]t secure.\n-.PP\n-For security purposes, the \\f[V]jstatd\\f[R] server uses an RMI\n-ObjectInputFilter to allow only essential classes to be deserialized.\n-.PP\n-If your security concerns can\\[aq]t be addressed, then the safest action\n-is to not run the \\f[V]jstatd\\f[R] server and use the \\f[V]jstat\\f[R]\n-and \\f[V]jps\\f[R] tools locally.\n-However, when using \\f[V]jps\\f[R] to get a list of instrumented JVMs,\n-the list will not include any JVMs running in docker containers.\n-.SH REMOTE INTERFACE\n-.PP\n-The interface exported by the \\f[V]jstatd\\f[R] process is proprietary\n-and guaranteed to change.\n-Users and developers are discouraged from writing to this interface.\n-.SH EXAMPLES\n-.PP\n-The following are examples of the \\f[V]jstatd\\f[R] command.\n-The \\f[V]jstatd\\f[R] scripts automatically start the server in the\n-background.\n-.SH INTERNAL RMI REGISTRY\n-.PP\n-This example shows how to start a \\f[V]jstatd\\f[R] session with an\n-internal RMI registry.\n-This example assumes that no other server is bound to the default RMI\n-registry port (port \\f[V]1099\\f[R]).\n-.RS\n-.PP\n-\\f[V]jstatd\\f[R]\n-.RE\n-.SH EXTERNAL RMI REGISTRY\n-.PP\n-This example starts a \\f[V]jstatd\\f[R] session with an external RMI\n-registry.\n-.IP\n-.nf\n-\\f[CB]\n-rmiregistry&\n-jstatd\n-\\f[R]\n-.fi\n-.PP\n-This example starts a \\f[V]jstatd\\f[R] session with an external RMI\n-registry server on port \\f[V]2020\\f[R].\n-.IP\n-.nf\n-\\f[CB]\n-jrmiregistry 2020&\n-jstatd -p 2020\n-\\f[R]\n-.fi\n-.PP\n-This example starts a \\f[V]jstatd\\f[R] session with an external RMI\n-registry server on port \\f[V]2020\\f[R] and JMX connector bound to port\n-\\f[V]2021\\f[R].\n-.IP\n-.nf\n-\\f[CB]\n-jrmiregistry 2020&\n-jstatd -p 2020 -r 2021\n-\\f[R]\n-.fi\n-.PP\n-This example starts a \\f[V]jstatd\\f[R] session with an external RMI\n-registry on port 2020 that\\[aq]s bound to\n-\\f[V]AlternateJstatdServerName\\f[R].\n-.IP\n-.nf\n-\\f[CB]\n-rmiregistry 2020&\n-jstatd -p 2020 -n AlternateJstatdServerName\n-\\f[R]\n-.fi\n-.SH STOP THE CREATION OF AN IN-PROCESS RMI REGISTRY\n-.PP\n-This example starts a \\f[V]jstatd\\f[R] session that doesn\\[aq]t create\n-an RMI registry when one isn\\[aq]t found.\n-This example assumes an RMI registry is already running.\n-If an RMI registry isn\\[aq]t running, then an error message is\n-displayed.\n-.RS\n-.PP\n-\\f[V]jstatd -nr\\f[R]\n-.RE\n-.SH ENABLE RMI LOGGING\n-.PP\n-This example starts a \\f[V]jstatd\\f[R] session with RMI logging\n-capabilities enabled.\n-This technique is useful as a troubleshooting aid or for monitoring\n-server activities.\n-.RS\n-.PP\n-\\f[V]jstatd -J-Djava.rmi.server.logCalls=true\\f[R]\n-.RE\n","filename":"src\/jdk.jstatd\/share\/man\/jstatd.1","additions":0,"deletions":219,"binary":false,"changes":219,"status":"deleted"},{"patch":"@@ -0,0 +1,180 @@\n+---\n+# Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+title: 'JSTATD(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n+date: @@COPYRIGHT_YEAR@@\n+lang: en\n+---\n+\n+## Name\n+\n+jstatd - monitor the creation and termination of instrumented Java HotSpot VMs\n+\n+## Synopsis\n+\n+**WARNING:** This command is experimental, unsupported, and deprecated. It will be removed in a future release.\n+\n+`jstatd` \\[*options*\\]\n+\n+*options*\n+:   This represents the `jstatd` command-line options. See [Options for the\n+    jstatd Command].\n+\n+## Description\n+\n+The `jstatd` command is an RMI server application that monitors for the\n+creation and termination of instrumented Java HotSpot VMs and provides an\n+interface to enable remote monitoring tools, `jstat` and `jps`, to attach to\n+JVMs that are running on the local host and collect information about the JVM\n+process.\n+\n+The `jstatd` server requires an RMI registry on the local host. The `jstatd`\n+server attempts to attach to the RMI registry on the default port, or on the\n+port you specify with the `-p` `port` option. If an RMI registry is not found,\n+then one is created within the `jstatd` application that's bound to the port\n+that's indicated by the `-p` `port` option or to the default RMI registry port\n+when the `-p` `port` option is omitted. You can stop the creation of an\n+internal RMI registry by specifying the `-nr` option.\n+\n+## Options for the jstatd Command\n+\n+`-nr`\n+:   This option does not attempt to create an internal RMI registry within the\n+    `jstatd` process when an existing RMI registry isn't found.\n+\n+`-p` *port*\n+:   This option sets the port number where the RMI registry is expected to be\n+    found, or when not found, created if the `-nr` option isn't specified.\n+\n+`-r` *rmiport*\n+:   This option sets the port number to which the RMI connector is bound. If\n+    not specified a random available port is used.\n+\n+`-n` *rminame*\n+:   This option sets the name to which the remote RMI object is bound in the\n+    RMI registry. The default name is `JStatRemoteHost`. If multiple `jstatd`\n+    servers are started on the same host, then the name of the exported RMI\n+    object for each server can be made unique by specifying this option.\n+    However, doing so requires that the unique server name be included in the\n+    monitoring client's `hostid` and `vmid` strings.\n+\n+`-J`*option*\n+:   This option passes a Java `option` to the JVM, where the option is one of\n+    those described on the reference page for the Java application launcher.\n+    For example, `-J-Xms48m` sets the startup memory to 48 MB. See\n+    [java](java.html).\n+\n+## Security\n+\n+The `jstatd` server can monitor only JVMs for which it has the appropriate\n+native access permissions. Therefore, the `jstatd` process must be running with\n+the same user credentials as the target JVMs. Some user credentials, such as\n+the root user in Linux and macOS operating systems, have\n+permission to access the instrumentation exported by any JVM on the system. A\n+`jstatd` process running with such credentials can monitor any JVM on the\n+system, but introduces additional security concerns.\n+\n+The `jstatd` server doesn't provide any authentication of remote clients.\n+Therefore, running a `jstatd` server process exposes the instrumentation export\n+by all JVMs for which the `jstatd` process has access permissions to any user\n+on the network. This exposure might be undesirable in your environment, and\n+therefore, local security policies should be considered before you start the\n+`jstatd` process, particularly in production environments or on networks that\n+aren't secure.\n+\n+For security purposes, the `jstatd` server uses an RMI ObjectInputFilter to allow\n+only essential classes to be deserialized.\n+\n+If your security concerns can't be addressed,\n+then the safest action is to not run the `jstatd` server and use the `jstat`\n+and `jps` tools locally. However, when using `jps` to get a list of\n+instrumented JVMs, the list will not include any JVMs running in docker\n+containers.\n+\n+## Remote Interface\n+\n+The interface exported by the `jstatd` process is proprietary and guaranteed to\n+change. Users and developers are discouraged from writing to this interface.\n+\n+## Examples\n+\n+The following are examples of the `jstatd` command. The `jstatd` scripts\n+automatically start the server in the background.\n+\n+## Internal RMI Registry\n+\n+This example shows how to start a `jstatd` session with an internal RMI\n+registry. This example assumes that no other server is bound to the default RMI\n+registry port (port `1099`).\n+\n+>   `jstatd`\n+\n+## External RMI Registry\n+\n+This example starts a `jstatd` session with an external RMI registry.\n+\n+```\n+rmiregistry&\n+jstatd\n+```\n+\n+This example starts a `jstatd` session with an external RMI registry server on\n+port `2020`.\n+\n+```\n+jrmiregistry 2020&\n+jstatd -p 2020\n+```\n+\n+This example starts a `jstatd` session with an external RMI registry server on\n+port `2020` and JMX connector bound to port `2021`.\n+\n+```\n+jrmiregistry 2020&\n+jstatd -p 2020 -r 2021\n+```\n+\n+This example starts a `jstatd` session with an external RMI registry on port\n+2020 that's bound to `AlternateJstatdServerName`.\n+\n+```\n+rmiregistry 2020&\n+jstatd -p 2020 -n AlternateJstatdServerName\n+```\n+\n+## Stop the Creation of an In-Process RMI Registry\n+\n+This example starts a `jstatd` session that doesn't create an RMI registry when\n+one isn't found. This example assumes an RMI registry is already running. If an\n+RMI registry isn't running, then an error message is displayed.\n+\n+>   `jstatd -nr`\n+\n+## Enable RMI Logging\n+\n+This example starts a `jstatd` session with RMI logging capabilities enabled.\n+This technique is useful as a troubleshooting aid or for monitoring server\n+activities.\n+\n+>   `jstatd\n+    -J-Djava.rmi.server.logCalls=true`\n","filename":"src\/jdk.jstatd\/share\/man\/jstatd.md","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"},{"patch":"@@ -141,1 +141,1 @@\n-        return findRootDir().resolve(\"src\/jdk.javadoc\/share\/man\/javadoc.1\");\n+        return findRootDir().resolve(\"src\/jdk.javadoc\/share\/man\/javadoc.md\");\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/CheckManPageOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}