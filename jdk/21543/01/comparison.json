{"files":[{"patch":"@@ -345,10 +345,2 @@\n-    if (! PeekNamedPipe(han, NULL, 0, NULL, pbytes, NULL)) {\n-        \/* PeekNamedPipe fails when at EOF.  In that case we\n-         * simply make *pbytes = 0 which is consistent with the\n-         * behavior we get on Solaris when an fd is at EOF.\n-         * The only alternative is to raise and Exception,\n-         * which isn't really warranted.\n-         *\/\n-        if (GetLastError() != ERROR_BROKEN_PIPE) {\n-            return FALSE;\n-        }\n+    if (!PeekNamedPipe(han, NULL, 0, NULL, pbytes, NULL)) {\n+        \/\/ If PeekNamedPipe fails, set the number of available bytes to zero.\n","filename":"src\/java.base\/windows\/native\/libjava\/io_util_md.c","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,5 @@\n- * @bug 4129479\n- * @summary Test if available would throw an IOException\n- *           when the stream is closed.\n+ * @bug 4129479 8342086\n+ * @summary Test that available throws an IOException if the stream is\n+ *          closed, and that available works correctly with the NUL\n+ *          device on Windows\n+ * @run junit Available\n@@ -31,1 +33,8 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -34,1 +43,2 @@\n-    public static void main(String args[]) throws Exception {\n+    @Test\n+    void throwAfterClose() throws IOException {\n@@ -39,7 +49,10 @@\n-        try {\n-            fis.available();\n-            throw new Exception\n-                (\"available should throw an exception after stream is closed\");\n-        }\n-        catch (IOException e) {\n-        }\n+        assertThrows(IOException.class, () -> fis.available());\n+    }\n+\n+    @Test\n+    @EnabledOnOs(OS.WINDOWS)\n+    void nulDevice() throws IOException {\n+        File file = new File(\"nul\");\n+        FileInputStream fis = new FileInputStream(file);\n+        int n = fis.available();\n+        assertEquals(0, n, \"available() returned non-zero value\");\n","filename":"test\/jdk\/java\/io\/FileInputStream\/Available.java","additions":26,"deletions":13,"binary":false,"changes":39,"status":"modified"}]}