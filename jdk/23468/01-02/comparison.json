{"files":[{"patch":"@@ -16300,1 +16300,2 @@\n-      __ stop(_halt_reason);\n+      const char* str = __ code_string(_halt_reason);\n+      __ stop(str);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -9007,1 +9007,2 @@\n-      __ stop(_halt_reason);\n+      const char* str = __ code_string(_halt_reason);\n+      __ stop(str);\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -14724,1 +14724,2 @@\n-      __ stop(_halt_reason);\n+      const char* str = __ code_string(_halt_reason);\n+      __ stop(str);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -10850,1 +10850,2 @@\n-      __ stop(_halt_reason);\n+      const char* str = __ code_string(_halt_reason);\n+      __ stop(str);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -10100,1 +10100,2 @@\n-      __ stop(_halt_reason);\n+      const char* str = __ code_string(_halt_reason);\n+      __ stop(str);\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3033,1 +3033,2 @@\n-      __ stop(_halt_reason);\n+      const char* str = __ code_string(_halt_reason);\n+      __ stop(str);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -821,0 +821,4 @@\n+                                                                            \\\n+  develop(bool, KillPathsReachableByDeadTypeNode, true,                     \\\n+          \"When a Type node becomes top, make paths where the node is used\" \\\n+          \"dead by replacing them with a Halt node\")                        \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3080,1 +3080,1 @@\n-void TypeNode::make_path_dead(PhaseIterGVN* igvn, PhaseIdealLoop* loop, Node* ctrl_use, uint j) {\n+void TypeNode::make_path_dead(PhaseIterGVN* igvn, PhaseIdealLoop* loop, Node* ctrl_use, uint j, const char* phase_str) {\n@@ -3084,1 +3084,1 @@\n-    create_halt_path(igvn, c, loop);\n+    create_halt_path(igvn, c, loop, phase_str);\n@@ -3092,4 +3092,4 @@\n-\/\/ constant fold and the control flow that leads to the Type node becomes unreachable. There are cases where that doesn't\n-\/\/ happen, however. They are handled here by following uses of the Type node until a CFG or a Phi to find dead paths.\n-\/\/ The dead paths are then replaced by a Halt node.\n-void TypeNode::make_paths_from_here_dead(PhaseIterGVN* igvn, PhaseIdealLoop* loop) {\n+\/\/ constant folds and the control flow that leads to the Type node becomes unreachable. There are cases where that\n+\/\/ doesn't happen, however. They are handled here by following uses of the Type node until a CFG or a Phi to find dead\n+\/\/ paths. The dead paths are then replaced by a Halt node.\n+void TypeNode::make_paths_from_here_dead(PhaseIterGVN* igvn, PhaseIdealLoop* loop, const char* phase_str) {\n@@ -3104,1 +3104,1 @@\n-        make_path_dead(igvn, loop, u, 0);\n+        make_path_dead(igvn, loop, u, 0, phase_str);\n@@ -3111,1 +3111,1 @@\n-              make_path_dead(igvn, loop, r, j);\n+              make_path_dead(igvn, loop, r, j, phase_str);\n@@ -3122,1 +3122,1 @@\n-void TypeNode::create_halt_path(PhaseIterGVN* igvn, Node* c, PhaseIdealLoop* loop) const {\n+void TypeNode::create_halt_path(PhaseIterGVN* igvn, Node* c, PhaseIdealLoop* loop, const char* phase_str) const {\n@@ -3129,1 +3129,8 @@\n-  Node* halt = new HaltNode(c, frame, \"dead path discovered by TypeNode\");\n+\n+  stringStream ss;\n+  ss.print(\"dead path discovered by TypeNode during %s\", phase_str);\n+  size_t len = ss.size() + 1;\n+  char* arena_str = NEW_ARENA_ARRAY(igvn->C->comp_arena(), char, len);\n+  memcpy(arena_str, ss.base(), len);\n+\n+  Node* halt = new HaltNode(c, frame, arena_str);\n@@ -3139,1 +3146,1 @@\n-  if (can_reshape && Value(phase) == Type::TOP) {\n+  if (KillPathsReachableByDeadTypeNode && can_reshape && Value(phase) == Type::TOP) {\n@@ -3143,1 +3150,1 @@\n-    make_paths_from_here_dead(igvn, nullptr);\n+    make_paths_from_here_dead(igvn, nullptr, \"igvn\");\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2052,1 +2052,1 @@\n-  void make_path_dead(PhaseIterGVN* igvn, PhaseIdealLoop* loop, Node* ctrl_use, uint j);\n+  void make_path_dead(PhaseIterGVN* igvn, PhaseIdealLoop* loop, Node* ctrl_use, uint j, const char* phase_str);\n@@ -2057,2 +2057,2 @@\n-  void make_paths_from_here_dead(PhaseIterGVN* igvn, PhaseIdealLoop* loop);\n-  void create_halt_path(PhaseIterGVN* igvn, Node* c, PhaseIdealLoop* loop) const;\n+  void make_paths_from_here_dead(PhaseIterGVN* igvn, PhaseIdealLoop* loop, const char* phase_str);\n+  void create_halt_path(PhaseIterGVN* igvn, Node* c, PhaseIdealLoop* loop, const char* phase_str) const;\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2068,5 +2068,7 @@\n-  for (uint i = 0; i < _type_nodes.size(); ++i) {\n-    Node* type_node = _type_nodes.at(i);\n-    if (type(type_node) == Type::TOP) {\n-      ResourceMark rm;\n-      type_node->as_Type()->make_paths_from_here_dead(this, nullptr);\n+  if (KillPathsReachableByDeadTypeNode) {\n+    for (uint i = 0; i < _type_nodes.size(); ++i) {\n+      Node* type_node = _type_nodes.at(i);\n+      if (type(type_node) == Type::TOP) {\n+        ResourceMark rm;\n+        type_node->as_Type()->make_paths_from_here_dead(this, nullptr, \"ccp\");\n+      }\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @run main\/othervm TestGuardOfCastIIDoesntFold\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestGuardOfCastIIDoesntFold.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}