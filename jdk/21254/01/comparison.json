{"files":[{"patch":"@@ -25,1 +25,0 @@\n-#include \"gc\/shared\/gcLogPrecious.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"gc\/z\/zInitialize.hpp\"\n@@ -85,1 +85,1 @@\n-    log_error_pd(gc)(\"Failed to reserve address space for backing memory\");\n+    ZInitialize::error(\"Failed to reserve address space for backing memory\");\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zPhysicalMemoryBacking_bsd.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/z\/zInitialize.hpp\"\n@@ -132,0 +133,1 @@\n+    ZInitialize::error(\"Failed to create heap backing file\");\n@@ -139,1 +141,1 @@\n-      log_error_p(gc)(\"Failed to truncate backing file (%s)\", err.to_string());\n+      ZInitialize::error(\"Failed to truncate backing file (%s)\", err.to_string());\n@@ -148,1 +150,1 @@\n-    log_error_p(gc)(\"Failed to determine filesystem type for backing file (%s)\", err.to_string());\n+    ZInitialize::error(\"Failed to determine filesystem type for backing file (%s)\", err.to_string());\n@@ -161,2 +163,2 @@\n-    log_error_p(gc)(\"-XX:+UseTransparentHugePages can only be enabled when using a %s filesystem\",\n-                    ZFILESYSTEM_TMPFS);\n+    ZInitialize::error(\"-XX:+UseTransparentHugePages can only be enabled when using a %s filesystem\",\n+                       ZFILESYSTEM_TMPFS);\n@@ -167,2 +169,2 @@\n-    log_error_p(gc)(\"-XX:+UseTransparentHugePages on a %s filesystem not supported by kernel\",\n-                    ZFILESYSTEM_TMPFS);\n+    ZInitialize::error(\"-XX:+UseTransparentHugePages on a %s filesystem not supported by kernel\",\n+                       ZFILESYSTEM_TMPFS);\n@@ -173,2 +175,2 @@\n-    log_error_p(gc)(\"-XX:+UseLargePages (without -XX:+UseTransparentHugePages) can only be enabled \"\n-                    \"when using a %s filesystem\", ZFILESYSTEM_HUGETLBFS);\n+    ZInitialize::error(\"-XX:+UseLargePages (without -XX:+UseTransparentHugePages) can only be enabled \"\n+                       \"when using a %s filesystem\", ZFILESYSTEM_HUGETLBFS);\n@@ -179,2 +181,2 @@\n-    log_error_p(gc)(\"-XX:+UseLargePages must be enabled when using a %s filesystem\",\n-                    ZFILESYSTEM_HUGETLBFS);\n+    ZInitialize::error(\"-XX:+UseLargePages must be enabled when using a %s filesystem\",\n+                       ZFILESYSTEM_HUGETLBFS);\n@@ -186,2 +188,2 @@\n-    log_error_p(gc)(\"Filesystem backing the heap has incompatible block size (\" SIZE_FORMAT \")\",\n-                    _block_size);\n+    ZInitialize::error(\"Filesystem backing the heap has incompatible block size (\" SIZE_FORMAT \")\",\n+                       _block_size);\n@@ -192,2 +194,2 @@\n-    log_error_p(gc)(\"%s filesystem has unexpected block size \" SIZE_FORMAT \" (expected \" SIZE_FORMAT \")\",\n-                    ZFILESYSTEM_HUGETLBFS, _block_size, ZGranuleSize);\n+    ZInitialize::error(\"%s filesystem has unexpected block size \" SIZE_FORMAT \" (expected \" SIZE_FORMAT \")\",\n+                       ZFILESYSTEM_HUGETLBFS, _block_size, ZGranuleSize);\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zPhysicalMemoryBacking_linux.cpp","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"runtime\/java.hpp\"\n@@ -63,1 +64,1 @@\n-    _initialize(&_barrier_set),\n+    _initializer(&_barrier_set),\n@@ -81,0 +82,1 @@\n+    vm_shutdown_during_initialization(ZInitialize::error_message());\n@@ -86,0 +88,2 @@\n+  ZInitialize::finish();\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  ZInitialize       _initialize;\n+  ZInitializer      _initializer;\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"gc\/z\/zInitialize.hpp\"\n@@ -77,1 +78,1 @@\n-    log_error_p(gc)(\"Failed to allocate initial Java heap (\" SIZE_FORMAT \"M)\", InitialHeapSize \/ M);\n+    ZInitialize::error(\"Failed to allocate initial Java heap (\" SIZE_FORMAT \"M)\", InitialHeapSize \/ M);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"gc\/shared\/gcLogPrecious.hpp\"\n@@ -41,0 +42,1 @@\n+#include \"nmt\/memTag.hpp\"\n@@ -42,0 +44,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -43,1 +46,9 @@\n-ZInitialize::ZInitialize(ZBarrierSet* barrier_set) {\n+char ZInitialize::_error_message[ErrorMessageLength] = {};\n+bool ZInitialize::_had_error                         = false;\n+bool ZInitialize::_finished                          = false;\n+\n+ZInitializer::ZInitializer(ZBarrierSet* barrier_set) {\n+  ZInitialize::initialize(barrier_set);\n+}\n+\n+void ZInitialize::initialize(ZBarrierSet* barrier_set) {\n@@ -65,0 +76,48 @@\n+\n+void ZInitialize::register_error(bool debug, const char *error) {\n+  guarantee(!_finished, \"Only register errors during initialization\");\n+\n+  if (!_had_error) {\n+    strncpy(_error_message, error, ErrorMessageLength - 1);\n+    _had_error = true;\n+  }\n+\n+  if (debug) {\n+    log_error_pd(gc)(\"%s\", error);\n+  } else {\n+    log_error_p(gc)(\"%s\", error);\n+  }\n+}\n+\n+void ZInitialize::error(const char* msg_format, ...) {\n+  va_list argp;\n+  va_start(argp, msg_format);\n+  const FormatBuffer<ErrorMessageLength> error(FormatBufferDummy(), msg_format, argp);\n+  va_end(argp);\n+  register_error(false \/* debug *\/, error);\n+}\n+\n+void ZInitialize::error_d(const char* msg_format, ...) {\n+  va_list argp;\n+  va_start(argp, msg_format);\n+  const FormatBuffer<ErrorMessageLength> error(FormatBufferDummy(), msg_format, argp);\n+  va_end(argp);\n+  register_error(true \/* debug *\/, error);\n+}\n+\n+bool ZInitialize::had_error() {\n+  return _had_error;\n+}\n+\n+const char* ZInitialize::error_message() {\n+  assert(had_error(), \"Should have registered an error\");\n+  if (had_error()) {\n+    return _error_message;\n+  }\n+  return \"Unknown error, check error GC logs\";\n+}\n+\n+void ZInitialize::finish() {\n+  guarantee(!_finished, \"Only finish initialization once\");\n+  _finished = true;\n+}\n","filename":"src\/hotspot\/share\/gc\/z\/zInitialize.cpp","additions":60,"deletions":1,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -27,1 +27,4 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"memory\/allStatic.hpp\"\n+#include \"utilities\/compilerWarnings.hpp\"\n+\n+#include <cstddef>\n@@ -31,1 +34,6 @@\n-class ZInitialize {\n+class ZInitializer {\n+ public:\n+  ZInitializer(ZBarrierSet* barrier_set);\n+};\n+\n+class ZInitialize : public AllStatic {\n@@ -33,1 +41,9 @@\n-  void pd_initialize();\n+  static constexpr size_t ErrorMessageLength = 256;\n+\n+  static char _error_message[ErrorMessageLength];\n+  static bool _had_error;\n+  static bool _finished;\n+\n+  static void register_error(bool debug, const char *error);\n+\n+  static void pd_initialize();\n@@ -36,1 +52,8 @@\n-  ZInitialize(ZBarrierSet* barrier_set);\n+  static void error(const char* msg_format, ...) ATTRIBUTE_PRINTF(1, 2);\n+  static void error_d(const char* msg_format, ...) ATTRIBUTE_PRINTF(1, 2);\n+\n+  static bool had_error();\n+  static const char* error_message();\n+\n+  static void initialize(ZBarrierSet* barrier_set);\n+  static void finish();\n","filename":"src\/hotspot\/share\/gc\/z\/zInitialize.hpp","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"gc\/shared\/gcLogPrecious.hpp\"\n@@ -27,0 +26,1 @@\n+#include \"gc\/z\/zInitialize.hpp\"\n@@ -46,1 +46,1 @@\n-    log_error_pd(gc, marking)(\"Failed to reserve address space for mark stacks\");\n+    ZInitialize::error_d(\"Failed to reserve address space for mark stacks\");\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/z\/zInitialize.hpp\"\n@@ -47,1 +48,1 @@\n-    log_error_pd(gc)(\"Failed to reserve enough address space for Java heap\");\n+    ZInitialize::error_d(\"Failed to reserve enough address space for Java heap\");\n","filename":"src\/hotspot\/share\/gc\/z\/zVirtualMemory.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}