{"files":[{"patch":"@@ -172,0 +172,7 @@\n+  if (phase->type(in(Condition)) == TypeInt::ZERO) {\n+    return phase->type(in(IfFalse))->filter(_type); \/\/ Always pick left(false) input\n+  }\n+  if (phase->type(in(Condition)) == TypeInt::ONE) {\n+    return phase->type(in(IfTrue))->filter(_type);  \/\/ Always pick right(true) input\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8330163\n+ * @summary C2: improve CMoveNode::Value() when condition is always true or false\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestCMoveCCP\n+ *\/\n+\n+\n+public class TestCMoveCCP {\n+    private static volatile int volatileField;\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTED_LOOP, IRNode.LOOP })\n+    private static void test1() {\n+        int i = -1;\n+        testHelper1(i);\n+    }\n+\n+    @ForceInline\n+    private static void testHelper1(int i) {\n+        do {\n+            if (i != 1) {\n+                if (i < 0) { \/\/ Converted to CMoveI\n+                    i = 50;\n+                }\n+                volatileField = 42;\n+            }\n+            i *= 2;\n+            \/\/ i = 100 on first iteration when called from test1\n+        } while (i != 100);\n+    }\n+\n+    @Run(test = \"test1\")\n+    @Warmup(10000)\n+    private static void testRunner1() {\n+        test1();\n+        testHelper1(1);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestCMoveCCP.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}