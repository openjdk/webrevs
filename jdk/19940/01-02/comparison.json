{"files":[{"patch":"@@ -377,4 +377,4 @@\n-  TemplateAssertionPredicateExpression template_assertion_predicate_expression(\n-      template_assertion_predicate->in(1)->as_Opaque4());\n-  Opaque4Node* cloned_opaque4_node = template_assertion_predicate_expression.clone(parse_predicate_proj->in(0)->in(0), this);\n-  IfProjNode* if_proj = create_new_if_for_predicate(parse_predicate_proj, nullptr, reason, template_assertion_predicate->Opcode(), false);\n+  TemplateAssertionExpression template_assertion_expression(template_assertion_predicate->in(1)->as_Opaque4());\n+  Opaque4Node* cloned_opaque4_node = template_assertion_expression.clone(parse_predicate_proj->in(0)->in(0), this);\n+  IfProjNode* if_proj = create_new_if_for_predicate(parse_predicate_proj, nullptr, reason,\n+                                                    template_assertion_predicate->Opcode(), false);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1458,1 +1458,1 @@\n-    if (TemplateAssertionPredicateExpressionNode::is_maybe_in_expression(n)) {\n+    if (TemplateAssertionExpressionNode::is_maybe_in_expression(n)) {\n@@ -1494,1 +1494,1 @@\n-  TemplateAssertionPredicateExpression template_assertion_predicate_expression(iff->in(1)->as_Opaque4());\n+  TemplateAssertionExpression template_assertion_expression(iff->in(1)->as_Opaque4());\n@@ -1496,1 +1496,1 @@\n-  Opaque4Node* new_opaque_node = template_assertion_predicate_expression.clone_and_replace_init(new_init, control, this);\n+  Opaque4Node* new_opaque_node = template_assertion_expression.clone_and_replace_init(new_init, control, this);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1773,1 +1773,1 @@\n-  void clone_template_assertion_predicate_expression_down(Node* node);\n+  void clone_template_assertion_expression_down(Node* node);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -243,5 +243,5 @@\n-\/\/ Creates an identical clone of this Template Assertion Predicate Expression (i.e.cloning all nodes from the Opaque4Node\n-\/\/ to and including the OpaqueLoop* nodes). The cloned nodes are rewired to reflect the same graph structure as found for\n-\/\/ this Template Assertion Predicate Expression. The cloned nodes get 'new_ctrl' as ctrl. There is no other update done\n-\/\/ for the cloned nodes. Return the newly cloned Opaque4Node.\n-Opaque4Node* TemplateAssertionPredicateExpression::clone(Node* new_ctrl, PhaseIdealLoop* phase) {\n+\/\/ Creates an identical clone of this Template Assertion Expression (i.e.cloning all nodes from the Opaque4Node to and\n+\/\/ including the OpaqueLoop* nodes). The cloned nodes are rewired to reflect the same graph structure as found for this\n+\/\/ Template Assertion Expression. The cloned nodes get 'new_ctrl' as ctrl. There is no other update done for the cloned\n+\/\/ nodes. Return the newly cloned Opaque4Node.\n+Opaque4Node* TemplateAssertionExpression::clone(Node* new_ctrl, PhaseIdealLoop* phase) {\n@@ -253,2 +253,2 @@\n-Opaque4Node* TemplateAssertionPredicateExpression::clone_and_replace_init(Node* new_init, Node* new_ctrl,\n-                                                                          PhaseIdealLoop* phase) {\n+Opaque4Node* TemplateAssertionExpression::clone_and_replace_init(Node* new_init, Node* new_ctrl,\n+                                                                 PhaseIdealLoop* phase) {\n@@ -261,3 +261,3 @@\n-Opaque4Node* TemplateAssertionPredicateExpression::clone_and_replace_init_and_stride(Node* new_init, Node* new_stride,\n-                                                                                     Node* new_ctrl,\n-                                                                                     PhaseIdealLoop* phase) {\n+Opaque4Node* TemplateAssertionExpression::clone_and_replace_init_and_stride(Node* new_init, Node* new_stride,\n+                                                                            Node* new_ctrl,\n+                                                                            PhaseIdealLoop* phase) {\n@@ -311,2 +311,1 @@\n-  \/\/       Given that the typical Template Assertion Predicate Expression only consists of a few nodes, we aim for\n-  \/\/       simplicity here.\n+  \/\/       Given that the typical Template Assertion Expression only consists of a few nodes, we aim for simplicity here.\n@@ -346,3 +345,3 @@\n-\/\/ Clones this Template Assertion Predicate Expression and applies the given strategy to transform the OpaqueLoop* nodes.\n-Opaque4Node* TemplateAssertionPredicateExpression::clone(const TransformStrategyForOpaqueLoopNodes& transform_strategy,\n-                                                         Node* new_ctrl, PhaseIdealLoop* phase) {\n+\/\/ Clones this Template Assertion Expression and applies the given strategy to transform the OpaqueLoop* nodes.\n+Opaque4Node* TemplateAssertionExpression::clone(const TransformStrategyForOpaqueLoopNodes& transform_strategy,\n+                                                Node* new_ctrl, PhaseIdealLoop* phase) {\n@@ -353,1 +352,1 @@\n-  DataNodesOnPathsToTargets data_nodes_on_path_to_targets(TemplateAssertionPredicateExpressionNode::is_maybe_in_expression,\n+  DataNodesOnPathsToTargets data_nodes_on_path_to_targets(TemplateAssertionExpressionNode::is_maybe_in_expression,\n@@ -363,2 +362,2 @@\n-\/\/ Check if this node belongs a Template Assertion Predicate Expression (including OpaqueLoop* nodes).\n-bool TemplateAssertionPredicateExpressionNode::is_in_expression(Node* node) {\n+\/\/ Check if this node belongs a Template Assertion Expression (including OpaqueLoop* nodes).\n+bool TemplateAssertionExpressionNode::is_in_expression(Node* node) {\n@@ -381,1 +380,1 @@\n-bool TemplateAssertionPredicateExpressionNode::is_template_assertion_predicate(Node* node) {\n+bool TemplateAssertionExpressionNode::is_template_assertion_predicate(Node* node) {\n@@ -393,1 +392,1 @@\n-\/\/ We clone the Template Assertion Predicate Expression and replace:\n+\/\/ We clone the Template Assertion Expression and replace:\n@@ -397,14 +396,14 @@\n-\/\/          init                 stride\n-\/\/            |                    |\n-\/\/   OpaqueLoopInitNode  OpaqueLoopStrideNode                      _new_init    _new_stride\n-\/\/                  \\     \/                                               \\     \/\n-\/\/                    ...                                                   ...\n-\/\/                     |                                                     |\n-\/\/                    Bool                                                new Bool\n-\/\/                     |                                                     |\n-\/\/                  Opaque4                ======>              control   OpaqueInitializedAssertionPredicate\n-\/\/                     |                                              \\  \/\n-\/\/                    If                                             new If\n-\/\/                  \/    \\                                           \/    \\\n-\/\/            success     fail path                         new success   new Halt\n-\/\/              proj    (Halt or UCT)                           proj\n+\/\/             \/         init                 stride\n+\/\/             |           |                    |\n+\/\/             |  OpaqueLoopInitNode  OpaqueLoopStrideNode                      \/       _new_init    _new_stride\n+\/\/  Template   |                 \\     \/                                        |              \\     \/\n+\/\/  Assertion  |                   ...                               Assertion  |                ...\n+\/\/  Expression |                    |                                Expression |                 |\n+\/\/             |                   Bool                                         |              new Bool\n+\/\/             |                    |                                           |                 |\n+\/\/             \\                 Opaque4           ======>          control     \\  OpaqueInitializedAssertionPredicate\n+\/\/                                  |                                      \\      \/\n+\/\/                                 If                                       new If\n+\/\/                               \/    \\                                     \/    \\\n+\/\/                         success     fail path                   new success   new Halt\n+\/\/                           proj    (Halt or UCT)                     proj\n@@ -423,7 +422,7 @@\n-  TemplateAssertionPredicateExpression assertion_expression(template_opaque);\n-  Opaque4Node* tmp_opaque =\n-      assertion_expression.clone_and_replace_init_and_stride(_new_init, _new_stride, control, _phase);\n-  OpaqueInitializedAssertionPredicateNode* assertion_predicate_expression\n-      = new OpaqueInitializedAssertionPredicateNode(tmp_opaque->in(1)->as_Bool(), _phase->C);\n-  _phase->register_new_node(assertion_predicate_expression, control);\n-  return assertion_predicate_expression;\n+  TemplateAssertionExpression template_assertion_expression(template_opaque);\n+  Opaque4Node* tmp_opaque = template_assertion_expression.clone_and_replace_init_and_stride(_new_init, _new_stride,\n+                                                                                            control, _phase);\n+  OpaqueInitializedAssertionPredicateNode* assertion_expression =\n+      new OpaqueInitializedAssertionPredicateNode(tmp_opaque->in(1)->as_Bool(), _phase->C);\n+  _phase->register_new_node(assertion_expression, control);\n+  return assertion_expression;\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":40,"deletions":41,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-\/\/ Interface to transform OpaqueLoopInit and OpaqueLoopStride nodes of a Template Assertion Predicate Expression.\n+\/\/ Interface to transform OpaqueLoopInit and OpaqueLoopStride nodes of a Template Assertion Expression.\n@@ -306,1 +306,1 @@\n-\/\/ A Template Assertion Predicate Expression represents the Opaque4Node for the initial value or the last value of a\n+\/\/ A Template Assertion Predicate represents the Opaque4Node for the initial value or the last value of a\n@@ -308,1 +308,1 @@\n-class TemplateAssertionPredicateExpression : public StackObj {\n+class TemplateAssertionExpression : public StackObj {\n@@ -312,1 +312,1 @@\n-  explicit TemplateAssertionPredicateExpression(Opaque4Node* opaque4_node) : _opaque4_node(opaque4_node) {}\n+  explicit TemplateAssertionExpression(Opaque4Node* opaque4_node) : _opaque4_node(opaque4_node) {}\n@@ -323,1 +323,1 @@\n-\/\/ Class to represent a node being part of a Template Assertion Predicate Expression. Note that this is not an IR node.\n+\/\/ Class to represent a node being part of a Template Assertion Expression. Note that this is not an IR node.\n@@ -329,1 +329,1 @@\n-class TemplateAssertionPredicateExpressionNode : public StackObj {\n+class TemplateAssertionExpressionNode : public StackObj {\n@@ -333,1 +333,1 @@\n-  explicit TemplateAssertionPredicateExpressionNode(Node* node) : _node(node) {\n+  explicit TemplateAssertionExpressionNode(Node* node) : _node(node) {\n@@ -336,1 +336,1 @@\n-  NONCOPYABLE(TemplateAssertionPredicateExpressionNode);\n+  NONCOPYABLE(TemplateAssertionExpressionNode);\n@@ -342,1 +342,1 @@\n-  \/\/ Check whether the provided node is part of a Template Assertion Predicate Expression or not.\n+  \/\/ Check whether the provided node is part of a Template Assertion Expression or not.\n@@ -345,1 +345,1 @@\n-  \/\/ Check if the opcode of node could be found in a Template Assertion Predicate Expression.\n+  \/\/ Check if the opcode of node could be found in a Template Assertion Expression.\n@@ -382,1 +382,1 @@\n-        assert(!next->is_CFG(), \"no CFG expected in Template Assertion Predicate Expression\");\n+        assert(!next->is_CFG(), \"no CFG expected in Template Assertion Expression\");\n@@ -387,5 +387,5 @@\n-    \/\/ Each node inside a Template Assertion Predicate Expression is in between a Template Assertion Predicate and\n-    \/\/ its OpaqueLoop* nodes (or an OpaqueLoop* node itself). The OpaqueLoop* nodes do not common up. Therefore, each\n-    \/\/ Template Assertion Predicate Expression node belongs to a single expression - except for OpaqueLoopInitNodes.\n-    \/\/ An OpaqueLoopInitNode is shared between the init and last value Template Assertion Predicate at creation.\n-    \/\/ Later, when cloning the expressions, they are no longer shared.\n+    \/\/ Each node inside a Template Assertion Expression is in between a Template Assertion Predicate and its OpaqueLoop*\n+    \/\/ nodes (or an OpaqueLoop* node itself). The OpaqueLoop* nodes do not common up. Therefore, each Template Assertion\n+    \/\/ Expression node belongs to a single expression - except for OpaqueLoopInitNodes. An OpaqueLoopInitNode is shared\n+    \/\/ between the init and last value Template Assertion Predicate at creation. Later, when cloning the expressions,\n+    \/\/ they are no longer shared.\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-  clone_template_assertion_predicate_expression_down(n);\n+  clone_template_assertion_expression_down(n);\n@@ -412,7 +412,7 @@\n-\/\/ 'n' could be a node belonging to a Template Assertion Predicate Expression (i.e. any node between a Template\n-\/\/ Assertion Predicate and its OpaqueLoop* nodes (included)). We cannot simply split this node up since this would\n-\/\/ create a phi node inside the Template Assertion Predicate Expression - making it unrecognizable as such. Therefore,\n-\/\/ we completely clone the entire Template Assertion Predicate Expression \"down\". This ensures that we have an\n-\/\/ untouched copy that is still recognized by the Template Assertion Predicate matching code.\n-void PhaseIdealLoop::clone_template_assertion_predicate_expression_down(Node* node) {\n-  if (!TemplateAssertionPredicateExpressionNode::is_in_expression(node)) {\n+\/\/ 'n' could be a node belonging to a Template Assertion Expression (i.e. any node between a Template Assertion Predicate\n+\/\/ and its OpaqueLoop* nodes (included)). We cannot simply split this node up since this would  create a phi node inside\n+\/\/ the Template Assertion Expression - making it unrecognizable as such. Therefore, we completely clone the entire\n+\/\/ Template Assertion Expression \"down\". This ensures that we have an untouched copy that is still recognized by the\n+\/\/ Template Assertion Predicate matching code.\n+void PhaseIdealLoop::clone_template_assertion_expression_down(Node* node) {\n+  if (!TemplateAssertionExpressionNode::is_in_expression(node)) {\n@@ -422,1 +422,1 @@\n-  TemplateAssertionPredicateExpressionNode template_assertion_predicate_expression_node(node);\n+  TemplateAssertionExpressionNode template_assertion_expression_node(node);\n@@ -425,1 +425,1 @@\n-    TemplateAssertionPredicateExpression template_assertion_predicate_expression(opaque4_node);\n+    TemplateAssertionExpression template_assertion_expression(opaque4_node);\n@@ -427,1 +427,1 @@\n-    Opaque4Node* cloned_opaque4_node = template_assertion_predicate_expression.clone(new_ctrl, this);\n+    Opaque4Node* cloned_opaque4_node = template_assertion_expression.clone(new_ctrl, this);\n@@ -430,1 +430,1 @@\n-  template_assertion_predicate_expression_node.for_each_template_assertion_predicate(clone_expression);\n+  template_assertion_expression_node.for_each_template_assertion_predicate(clone_expression);\n","filename":"src\/hotspot\/share\/opto\/split_if.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}