{"files":[{"patch":"@@ -1505,1 +1505,1 @@\n-  Node* halt = new HaltNode(other_proj, frame, \"Template Assertion Predicate should never be executed\");\n+  Node* halt = new HaltNode(other_proj, frame, \"Template Assertion Predicates are always removed before code generation\");\n@@ -2025,3 +2025,1 @@\n-  Node* control = outer_loop_head->in(LoopNode::EntryControl);\n-  Node* input_proj = control;\n-\n+  Node* input_proj = outer_loop_head->in(LoopNode::EntryControl);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -388,1 +388,0 @@\n-      NOT_PRODUCT(_assertion_predicate_type(template_assertion_predicate->assertion_predicate_type()) COMMA)\n@@ -393,1 +392,4 @@\n-\/\/ Create an Initialized Assertion Predicate at the provided control from the _template_assertion_predicate:\n+\/\/ Create an Initialized Assertion Predicate at the provided control from the _template_assertion_predicate.\n+\/\/ We clone the Template Assertion Predicate Expression and replace:\n+\/\/ - Opaque4 with OpaqueInitializedAssertionPredicate\n+\/\/ - OpaqueLoop*Nodes with _new_init and _new_stride, respectively.\n@@ -412,3 +414,3 @@\n-  OpaqueInitializedAssertionPredicateNode* new_opaque_bool = create_new_bool(control);\n-  IfNode* if_node = create_if_node(control, new_opaque_bool, loop);\n-  create_halt_path(if_node, loop);\n+  OpaqueInitializedAssertionPredicateNode* assertion_expression = create_assertion_expression(control);\n+  IfNode* if_node = create_if_node(control, assertion_expression, loop);\n+  create_fail_path(if_node, loop);\n@@ -418,10 +420,10 @@\n-\/\/ Create a OpaqueInitializedAssertionPredicate with a new Assertion Predicate Expression.\n-OpaqueInitializedAssertionPredicateNode* InitializedAssertionPredicate::create_new_bool(Node* control) {\n-  Opaque4Node* template_opaque_bool = _template_assertion_predicate->in(1)->as_Opaque4();\n-  TemplateAssertionPredicateExpression template_assertion_predicate_expression(template_opaque_bool);\n-  Opaque4Node* new_opaque =\n-      template_assertion_predicate_expression.clone_and_replace_init_and_stride(_new_init, _new_stride, control, _phase);\n-  OpaqueInitializedAssertionPredicateNode* opaque_bool\n-      = new OpaqueInitializedAssertionPredicateNode(new_opaque->in(1)->as_Bool(), _phase->C);\n-  _phase->register_new_node(opaque_bool, control);\n-  return opaque_bool;\n+\/\/ Create a new Assertion Expression to be used as bool input for the Initialized Assertion Predicate IfNode.\n+OpaqueInitializedAssertionPredicateNode* InitializedAssertionPredicate::create_assertion_expression(Node* control) {\n+  Opaque4Node* template_opaque = _template_assertion_predicate->in(1)->as_Opaque4();\n+  TemplateAssertionPredicateExpression assertion_expression(template_opaque);\n+  Opaque4Node* tmp_opaque =\n+      assertion_expression.clone_and_replace_init_and_stride(_new_init, _new_stride, control, _phase);\n+  OpaqueInitializedAssertionPredicateNode* assertion_predicate_expression\n+      = new OpaqueInitializedAssertionPredicateNode(tmp_opaque->in(1)->as_Bool(), _phase->C);\n+  _phase->register_new_node(assertion_predicate_expression, control);\n+  return assertion_predicate_expression;\n@@ -431,1 +433,1 @@\n-                                                      OpaqueInitializedAssertionPredicateNode* new_opaque_bool,\n+                                                      OpaqueInitializedAssertionPredicateNode* assertion_expression,\n@@ -434,0 +436,1 @@\n+  const AssertionPredicateType assertion_predicate_type = _template_assertion_predicate->assertion_predicate_type();\n@@ -435,2 +438,2 @@\n-      new IfNode(control, new_opaque_bool, PROB_MAX, COUNT_UNKNOWN NOT_PRODUCT(COMMA _assertion_predicate_type)) :\n-      new RangeCheckNode(control, new_opaque_bool, PROB_MAX, COUNT_UNKNOWN NOT_PRODUCT(COMMA _assertion_predicate_type));\n+      new IfNode(control, assertion_expression, PROB_MAX, COUNT_UNKNOWN NOT_PRODUCT(COMMA assertion_predicate_type)) :\n+      new RangeCheckNode(control, assertion_expression, PROB_MAX, COUNT_UNKNOWN NOT_PRODUCT(COMMA assertion_predicate_type));\n@@ -447,1 +450,1 @@\n-void InitializedAssertionPredicate::create_halt_path(IfNode* if_node, IdealLoopTree* loop) {\n+void InitializedAssertionPredicate::create_fail_path(IfNode* if_node, IdealLoopTree* loop) {\n@@ -457,1 +460,1 @@\n-  Node* halt = new HaltNode(fail_proj, frame, \"Assertion Predicate cannot fail\");\n+  Node* halt = new HaltNode(fail_proj, frame, \"Initialized Assertion Predicate cannot fail\");\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -400,1 +400,0 @@\n-  NOT_PRODUCT(const AssertionPredicateType _assertion_predicate_type;)\n@@ -413,3 +412,3 @@\n-  OpaqueInitializedAssertionPredicateNode* create_new_bool(Node* control);\n-  IfNode* create_if_node(Node* control, OpaqueInitializedAssertionPredicateNode* new_opaque_bool, IdealLoopTree* loop);\n-  void create_halt_path(IfNode* if_node, IdealLoopTree* loop);\n+  OpaqueInitializedAssertionPredicateNode* create_assertion_expression(Node* control);\n+  IfNode* create_if_node(Node* control, OpaqueInitializedAssertionPredicateNode* assertion_expression, IdealLoopTree* loop);\n+  void create_fail_path(IfNode* if_node, IdealLoopTree* loop);\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}