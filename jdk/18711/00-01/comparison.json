{"files":[{"patch":"@@ -214,1 +214,0 @@\n-#endif\n@@ -216,1 +215,10 @@\n-  debug_only(G1BlockOffsetTable::verify_for_block(blk_start, blk_end);)\n+  G1BlockOffsetTable::verify_for_block(blk_start, blk_end);\n+#endif \/\/ ASSERT\n+}\n+\n+#ifdef ASSERT\n+void G1BlockOffsetTable::verify_offset(uint8_t* card_index, uint8_t upper_boundary) const {\n+  assert(offset_array(card_index) <= upper_boundary,\n+         \"Offset %u should not be larger than upper boundary %u.\",\n+         (uint) offset_array(card_index),\n+         (uint) upper_boundary);\n@@ -225,1 +233,1 @@\n-  assert(offset_array(start_card) < CardTable::card_size_in_words(), \"offset card\");\n+  verify_offset(start_card, CardTable::card_size_in_words());\n@@ -228,7 +236,4 @@\n-    assert(offset_array(current_card) > 0 &&\n-           offset_array(current_card) <= (uint8_t) (CardTable::card_size_in_words() + BOTConstants::N_powers - 1),\n-           \"offset array should have been set - \"\n-           \"%u not > 0 OR %u not <= %u\",\n-           (uint) offset_array(current_card),\n-           (uint) offset_array(current_card),\n-           (uint) (CardTable::card_size_in_words() + BOTConstants::N_powers - 1));\n+    assert(offset_array(current_card) > 0,\n+           \"Offset %u is not larger than 0.\",\n+           (uint) offset_array(current_card));\n+    verify_offset(current_card, (uint8_t) (CardTable::card_size_in_words() + BOTConstants::N_powers - 1));\n@@ -245,0 +250,1 @@\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -115,1 +115,2 @@\n-  void verify_for_block(HeapWord* blk_start, HeapWord* blk_end) const;\n+  void verify_offset(uint8_t* card_index, uint8_t upper) const NOT_DEBUG_RETURN;\n+  void verify_for_block(HeapWord* blk_start, HeapWord* blk_end) const NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}