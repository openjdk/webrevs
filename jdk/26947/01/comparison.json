{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,1 +259,0 @@\n-\n@@ -370,0 +369,1 @@\n+     * @throws IllegalArgumentException if any of the parameters are null.\n@@ -381,2 +381,2 @@\n-        if (string.length() == 0) {\n-            throw new IllegalArgumentException(\"Zero length string passed to TextLayout constructor.\");\n+        if (frc == null) {\n+            throw new IllegalArgumentException(\"Null font render context passed to TextLayout constructor.\");\n@@ -418,0 +418,1 @@\n+     * @throws IllegalArgumentException if any of the parameters are null.\n@@ -430,2 +431,2 @@\n-        if (string.length() == 0) {\n-            throw new IllegalArgumentException(\"Zero length string passed to TextLayout constructor.\");\n+        if (frc == null) {\n+            throw new IllegalArgumentException(\"Null font render context passed to TextLayout constructor.\");\n@@ -502,0 +503,1 @@\n+     * @throws IllegalArgumentException if any of the parameters are null.\n@@ -509,4 +511,2 @@\n-        int start = text.getBeginIndex();\n-        int limit = text.getEndIndex();\n-        if (start == limit) {\n-            throw new IllegalArgumentException(\"Zero length iterator passed to TextLayout constructor.\");\n+        if (frc == null) {\n+            throw new IllegalArgumentException(\"Null font render context passed to TextLayout constructor.\");\n@@ -515,0 +515,2 @@\n+        int start = text.getBeginIndex();\n+        int limit = text.getEndIndex();\n@@ -516,1 +518,0 @@\n-        text.first();\n@@ -1128,1 +1129,6 @@\n-        if (caret == 0 || caret == characterCount) {\n+        if (caret == 0 && characterCount == 0) {\n+\n+            top1X = top2X = 0;\n+            bottom1X = bottom2X = 0;\n+\n+        } else if (caret == 0 || caret == characterCount) {\n@@ -1146,2 +1152,2 @@\n-        }\n-        else {\n+\n+        } else {\n@@ -1887,1 +1893,0 @@\n-\n@@ -2183,2 +2188,2 @@\n-        if(bounds == null) {\n-                throw new IllegalArgumentException(\"Null Rectangle2D passed to TextLayout.getVisualHighlightShape()\");\n+        if (bounds == null) {\n+            throw new IllegalArgumentException(\"Null Rectangle2D passed to TextLayout.getVisualHighlightShape()\");\n@@ -2189,0 +2194,4 @@\n+        if (characterCount == 0) {\n+            return result;\n+        }\n+\n@@ -2197,1 +2206,1 @@\n-            if (!ls.getBounds().isEmpty())\n+            if (!ls.getBounds().isEmpty()) {\n@@ -2199,0 +2208,1 @@\n+            }\n@@ -2285,1 +2295,1 @@\n-        if(firstEndpoint < 0 || secondEndpoint > characterCount) {\n+        if (firstEndpoint < 0 || secondEndpoint > characterCount) {\n@@ -2291,0 +2301,4 @@\n+        if (characterCount == 0) {\n+            return result;\n+        }\n+\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/TextLayout.java","additions":33,"deletions":19,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -839,1 +839,1 @@\n-            result = new Rectangle2D.Float(Float.MAX_VALUE, Float.MAX_VALUE, Float.MIN_VALUE, Float.MIN_VALUE);\n+            result = new Rectangle2D.Float(0, 0, 0, 0);\n@@ -847,0 +847,4 @@\n+        if (fComponents.length == 0) {\n+            return new Rectangle2D.Float(0, 0, 0, 0);\n+        }\n+\n@@ -930,1 +934,1 @@\n-            requiresBidi = Bidi.requiresBidi(chars, 0, chars.length);\n+            requiresBidi = Bidi.requiresBidi(chars, 0, characterCount);\n@@ -938,1 +942,1 @@\n-          bidi = new Bidi(chars, 0, embs, 0, chars.length, bidiflags);\n+          bidi = new Bidi(chars, 0, embs, 0, characterCount, bidiflags);\n@@ -948,1 +952,0 @@\n-\n@@ -953,2 +956,1 @@\n-\n-        components = createComponentsOnRun(0, chars.length,\n+        components = createComponentsOnRun(0, characterCount,\n@@ -975,1 +977,1 @@\n-                            chars, 0, chars.length, charsLtoV, levels, isDirectionLTR);\n+                            chars, 0, characterCount, charsLtoV, levels, isDirectionLTR);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/TextLine.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,1 +122,1 @@\n-    if (start >= limit || start < lineStart || limit > lineLimit) {\n+    if (start > limit || start < lineStart || limit > lineLimit) {\n@@ -148,1 +148,1 @@\n-    if (start >= limit || start < lineStart || limit > lineLimit) {\n+    if (start > limit || start < lineStart || limit > lineLimit) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/TextLabelFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,316 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4138921\n+ * @summary Confirm constructor behavior for various edge cases.\n+ *\/\n+\n+import java.awt.Font;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n+import java.awt.Shape;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.TextAttribute;\n+import java.awt.font.TextHitInfo;\n+import java.awt.font.TextLayout;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Point2D;\n+import java.awt.geom.Rectangle2D;\n+import java.awt.image.BufferedImage;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+public class TextLayoutConstructorTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        testFontConstructor();\n+        testMapConstructor();\n+        testIteratorConstructor();\n+    }\n+\n+    private static void testFontConstructor() {\n+\n+        \/\/ new TextLayout(String, Font, FontRenderContext)\n+\n+        Font font = new Font(Font.DIALOG, Font.PLAIN, 20);\n+        FontRenderContext frc = new FontRenderContext(null, true, true);\n+\n+        assertThrows(() -> new TextLayout(null, font, frc),\n+            IllegalArgumentException.class,\n+            \"Null string passed to TextLayout constructor.\");\n+\n+        assertThrows(() -> new TextLayout(\"test\", (Font) null, frc),\n+            IllegalArgumentException.class,\n+            \"Null font passed to TextLayout constructor.\");\n+\n+        assertThrows(() -> new TextLayout(\"test\", font, null),\n+            IllegalArgumentException.class,\n+            \"Null font render context passed to TextLayout constructor.\");\n+\n+        Function< String, TextLayout > creator = (s) -> new TextLayout(s, font, frc);\n+        assertEmptyTextLayoutBehavior(creator);\n+    }\n+\n+    private static void testMapConstructor() {\n+\n+        \/\/ new TextLayout(String, Map, FontRenderContext)\n+\n+        Map< TextAttribute, Object > attributes = Map.of(TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD);\n+        FontRenderContext frc = new FontRenderContext(null, true, true);\n+\n+        assertThrows(() -> new TextLayout(null, attributes, frc),\n+            IllegalArgumentException.class,\n+            \"Null string passed to TextLayout constructor.\");\n+\n+        assertThrows(() -> new TextLayout(\"test\", (Map) null, frc),\n+            IllegalArgumentException.class,\n+            \"Null map passed to TextLayout constructor.\");\n+\n+        assertThrows(() -> new TextLayout(\"test\", attributes, null),\n+            IllegalArgumentException.class,\n+            \"Null font render context passed to TextLayout constructor.\");\n+\n+        Function< String, TextLayout > creator = (s) -> new TextLayout(s, attributes, frc);\n+        assertEmptyTextLayoutBehavior(creator);\n+    }\n+\n+    private static void testIteratorConstructor() {\n+\n+        \/\/ new TextLayout(AttributedCharacterIterator, FontRenderContext)\n+\n+        Map< TextAttribute, Object > attributes = Map.of();\n+        FontRenderContext frc = new FontRenderContext(null, true, true);\n+\n+        assertThrows(() -> new TextLayout(null, frc),\n+            IllegalArgumentException.class,\n+            \"Null iterator passed to TextLayout constructor.\");\n+\n+        AttributedCharacterIterator it1 = new AttributedString(\"test\", attributes).getIterator();\n+        assertThrows(() -> new TextLayout(it1, null),\n+            IllegalArgumentException.class,\n+            \"Null font render context passed to TextLayout constructor.\");\n+\n+        Function< String, TextLayout > creator = (s) -> {\n+            AttributedCharacterIterator it2 = new AttributedString(s, attributes).getIterator();\n+            return new TextLayout(it2, frc);\n+        };\n+        assertEmptyTextLayoutBehavior(creator);\n+    }\n+\n+    private static void assertEmptyTextLayoutBehavior(Function< String, TextLayout > creator) {\n+\n+        TextLayout tl = creator.apply(\"\");\n+        TextLayout ref = creator.apply(\" \"); \/\/ space\n+        FontRenderContext frc = new FontRenderContext(null, true, true);\n+        Rectangle zero = new Rectangle(0, 0, 0, 0);\n+        Rectangle2D.Float zero2D = new Rectangle2D.Float(0, 0, 0, 0);\n+        Rectangle2D.Float oneTwo = new Rectangle2D.Float(1, 2, 0, 0);\n+        Rectangle2D.Float kilo = new Rectangle2D.Float(0, 0, 1000, 1000);\n+        AffineTransform identity = new AffineTransform();\n+        TextLayout.CaretPolicy policy = new TextLayout.CaretPolicy();\n+        TextHitInfo start = TextHitInfo.trailing(-1);\n+        TextHitInfo end = TextHitInfo.leading(0);\n+\n+        assertEqual(0, tl.getJustifiedLayout(100).getAdvance(), \"justified advance\");\n+        assertEqual(0, tl.getBaseline(), \"baseline\");\n+\n+        float[] offsets = tl.getBaselineOffsets();\n+        float[] refOffsets = ref.getBaselineOffsets();\n+        assertEqual(3, offsets.length, \"baseline offsets\");\n+        assertEqual(refOffsets[0], offsets[0], \"baseline offset 1\");\n+        assertEqual(refOffsets[1], offsets[1], \"baseline offset 2\");\n+        assertEqual(refOffsets[2], offsets[2], \"baseline offset 3\");\n+\n+        assertEqual(0, tl.getAdvance(), \"advance\");\n+        assertEqual(0, tl.getVisibleAdvance(), \"visible advance\");\n+        assertEqual(ref.getAscent(), tl.getAscent(), \"ascent\");\n+        assertEqual(ref.getDescent(), tl.getDescent(), \"descent\");\n+        assertEqual(ref.getLeading(), tl.getLeading(), \"leading\");\n+        assertEqual(zero2D, tl.getBounds(), \"bounds\");\n+        assertEqual(zero2D, tl.getPixelBounds(frc, 0, 0), \"pixel bounds 1\");\n+        assertEqual(oneTwo, tl.getPixelBounds(frc, 1, 2), \"pixel bounds 2\");\n+        assertEqual(true, tl.isLeftToRight(), \"left to right\");\n+        assertEqual(false, tl.isVertical(), \"is vertical\");\n+        assertEqual(0, tl.getCharacterCount(), \"character count\");\n+\n+        float[] caretInfo = tl.getCaretInfo(start, kilo);\n+        float[] refCaretInfo = ref.getCaretInfo(start, kilo);\n+        assertEqual(6, caretInfo.length, \"caret info length 1\");\n+        assertEqual(refCaretInfo[0], caretInfo[0], \"first caret info 1\");\n+        assertEqual(refCaretInfo[1], caretInfo[1], \"second caret info 1\");\n+        assertEqual(refCaretInfo[2], caretInfo[2], \"third caret info 1\");\n+        assertEqual(refCaretInfo[3], caretInfo[3], \"fourth caret info 1\");\n+        assertEqual(refCaretInfo[4], caretInfo[4], \"fifth caret info 1\");\n+        assertEqual(refCaretInfo[5], caretInfo[5], \"sixth caret info 1\");\n+\n+        float[] caretInfo2 = tl.getCaretInfo(start);\n+        float[] refCaretInfo2 = ref.getCaretInfo(start);\n+        assertEqual(6, caretInfo2.length, \"caret info length 2\");\n+        assertEqual(refCaretInfo2[0], caretInfo2[0], \"first caret info 2\");\n+        assertEqual(refCaretInfo2[1], caretInfo2[1], \"second caret info 2\");\n+        assertEqual(refCaretInfo2[2], caretInfo2[2], \"third caret info 2\");\n+        assertEqual(refCaretInfo2[3], caretInfo2[3], \"fourth caret info 2\");\n+        assertEqual(refCaretInfo2[4], caretInfo2[4], \"fifth caret info 2\");\n+        assertEqual(refCaretInfo2[5], caretInfo2[5], \"sixth caret info 2\");\n+\n+        assertEqual(null, tl.getNextRightHit(start), \"next right hit 1\");\n+        assertEqual(null, tl.getNextRightHit(end), \"next right hit 2\");\n+        assertEqual(null, tl.getNextRightHit(0, policy), \"next right hit 3\");\n+        assertEqual(null, tl.getNextRightHit(0), \"next right hit 4\");\n+        assertEqual(null, tl.getNextLeftHit(start), \"next left hit 1\");\n+        assertEqual(null, tl.getNextLeftHit(end), \"next left hit 2\");\n+        assertEqual(null, tl.getNextLeftHit(0, policy), \"next left hit 3\");\n+        assertEqual(null, tl.getNextLeftHit(0), \"next left hit 4\");\n+        assertEqual(end, tl.getVisualOtherHit(start), \"visual other hit\");\n+\n+        Shape caretShape = tl.getCaretShape(start, kilo);\n+        Shape refCaretShape = ref.getCaretShape(start, kilo);\n+        assertEqual(refCaretShape.getBounds(), caretShape.getBounds(), \"caret shape 1\");\n+\n+        Shape caretShape2 = tl.getCaretShape(start);\n+        Shape refCaretShape2 = ref.getCaretShape(start);\n+        assertEqual(refCaretShape2.getBounds(), caretShape2.getBounds(), \"caret shape 2\");\n+\n+        assertEqual(0, tl.getCharacterLevel(0), \"character level\");\n+\n+        Shape[] caretShapes = tl.getCaretShapes(0, kilo, policy);\n+        Shape[] refCaretShapes = ref.getCaretShapes(0, kilo, policy);\n+        assertEqual(2, caretShapes.length, \"caret shapes length 1\");\n+        assertEqual(refCaretShapes[0].getBounds(), caretShapes[0].getBounds(), \"caret shapes strong 1\");\n+        assertEqual(refCaretShapes[1], caretShapes[1], \"caret shapes weak 1\");\n+        assertEqual(null, caretShapes[1], \"caret shapes weak 1\");\n+\n+        Shape[] caretShapes2 = tl.getCaretShapes(0, kilo);\n+        Shape[] refCaretShapes2 = ref.getCaretShapes(0, kilo);\n+        assertEqual(2, caretShapes2.length, \"caret shapes length 2\");\n+        assertEqual(refCaretShapes2[0].getBounds(), caretShapes2[0].getBounds(), \"caret shapes strong 2\");\n+        assertEqual(refCaretShapes2[1], caretShapes2[1], \"caret shapes weak 2\");\n+        assertEqual(null, caretShapes2[1], \"caret shapes weak 2\");\n+\n+        Shape[] caretShapes3 = tl.getCaretShapes(0);\n+        Shape[] refCaretShapes3 = ref.getCaretShapes(0);\n+        assertEqual(2, caretShapes3.length, \"caret shapes length 3\");\n+        assertEqual(refCaretShapes3[0].getBounds(), caretShapes3[0].getBounds(), \"caret shapes strong 3\");\n+        assertEqual(refCaretShapes3[1], caretShapes3[1], \"caret shapes weak 3\");\n+        assertEqual(null, caretShapes3[1], \"caret shapes weak 3\");\n+\n+        assertEqual(0, tl.getLogicalRangesForVisualSelection(start, start).length, \"logical ranges for visual selection\");\n+        assertEqual(zero2D, tl.getVisualHighlightShape(start, start, kilo).getBounds(), \"visual highlight shape 1\");\n+        assertEqual(zero2D, tl.getVisualHighlightShape(start, start).getBounds(), \"visual highlight shape 2\");\n+        assertEqual(zero, tl.getLogicalHighlightShape(0, 0, kilo).getBounds(), \"logical highlight shape 1\");\n+        assertEqual(zero, tl.getLogicalHighlightShape(0, 0).getBounds(), \"logical highlight shape 2\");\n+        assertEqual(zero, tl.getBlackBoxBounds(0, 0).getBounds(), \"black box bounds\");\n+\n+        TextHitInfo hit = tl.hitTestChar(0, 0);\n+        assertEqual(-1, hit.getCharIndex(), \"hit test char index 1\");\n+        assertEqual(false, hit.isLeadingEdge(), \"hit test leading edge 1\");\n+\n+        TextHitInfo hit2 = tl.hitTestChar(0, 0, kilo);\n+        assertEqual(-1, hit2.getCharIndex(), \"hit test char index 2\");\n+        assertEqual(false, hit2.isLeadingEdge(), \"hit test leading edge 2\");\n+\n+        assertEqual(false, tl.equals(creator.apply(\"\")), \"equals\");\n+        assertEqual(false, tl.toString().isEmpty(), \"to string\");\n+        assertDoesNotDraw(tl);\n+        assertEqual(zero2D, tl.getOutline(identity).getBounds(), \"outline\");\n+        assertEqual(null, tl.getLayoutPath(), \"layout path\");\n+\n+        Point2D.Float point = new Point2D.Float(7, 7);\n+        tl.hitToPoint(start, point);\n+        assertEqual(0, point.x, \"hit to point x\");\n+        assertEqual(0, point.y, \"hit to point y\");\n+    }\n+\n+    private static void assertEqual(int expected, int actual, String name) {\n+        if (expected != actual) {\n+            throw new RuntimeException(\"Expected \" + name + \" = \" + expected + \", but got \" + actual);\n+        }\n+    }\n+\n+    private static void assertEqual(float expected, float actual, String name) {\n+        if (expected != actual) {\n+            throw new RuntimeException(\"Expected \" + name + \" = \" + expected + \", but got \" + actual);\n+        }\n+    }\n+\n+    private static void assertEqual(boolean expected, boolean actual, String name) {\n+        if (expected != actual) {\n+            throw new RuntimeException(\"Expected \" + name + \" = \" + expected + \", but got \" + actual);\n+        }\n+    }\n+\n+    private static void assertEqual(Object expected, Object actual, String name) {\n+        if (!Objects.equals(expected, actual)) {\n+            throw new RuntimeException(\"Expected \" + name + \" = \" + expected + \", but got \" + actual);\n+        }\n+    }\n+\n+    private static void assertThrows(Runnable r, Class< ? > type, String message) {\n+        Class< ? > actualType;\n+        String actualMessage;\n+        Exception actualException;\n+        try {\n+            r.run();\n+            actualType = null;\n+            actualMessage = null;\n+            actualException = null;\n+        } catch (Exception e) {\n+            actualType = e.getClass();\n+            actualMessage = e.getMessage();\n+            actualException = e;\n+        }\n+        if (!Objects.equals(type, actualType)) {\n+            throw new RuntimeException(type + \" != \" + actualType, actualException);\n+        }\n+        if (!Objects.equals(message, actualMessage)) {\n+            throw new RuntimeException(message + \" != \" + actualMessage, actualException);\n+        }\n+    }\n+\n+    private static void assertDoesNotDraw(TextLayout layout) {\n+\n+        int w = 200;\n+        int h = 200;\n+        BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_BYTE_BINARY);\n+        Graphics2D g2d = image.createGraphics();\n+        int expected = image.getRGB(0, 0);\n+\n+        layout.draw(g2d, w \/ 2f, h \/ 2f); \/\/ should not actually draw anything\n+\n+        int[] rowPixels = new int[w];\n+        for (int y = 0; y < h; y++) {\n+            image.getRGB(0, y, w, 1, rowPixels, 0, w);\n+            for (int x = 0; x < w; x++) {\n+                if (rowPixels[x] != expected) {\n+                    throw new RuntimeException(\n+                        \"pixel (\" + x + \", \" + y +\"): \" + expected + \" != \" + rowPixels[x]);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/TextLayout\/TextLayoutConstructorTest.java","additions":316,"deletions":0,"binary":false,"changes":316,"status":"added"}]}