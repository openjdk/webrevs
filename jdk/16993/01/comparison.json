{"files":[{"patch":"@@ -634,0 +634,3 @@\n+     *     <li>For write operations, the accessed memory segment must not be\n+     *     {@link MemorySegment#isReadOnly() read only}, or an\n+     *     {@link IllegalArgumentException} is thrown.<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -872,1 +872,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -897,1 +897,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1272,0 +1272,2 @@\n+     * @throws IllegalArgumentException if this segment is\n+     *         {@linkplain #isReadOnly() read-only}\n@@ -1309,0 +1311,2 @@\n+     * @throws IllegalArgumentException if this segment is\n+     *         {@linkplain #isReadOnly() read-only}\n@@ -1496,1 +1500,1 @@\n-     * @throws UnsupportedOperationException if {@code dstSegment} is\n+     * @throws IllegalArgumentException if {@code dstSegment} is\n@@ -1555,1 +1559,1 @@\n-     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}\n@@ -1608,1 +1612,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1646,1 +1650,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1684,1 +1688,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1722,1 +1726,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1760,1 +1764,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1798,1 +1802,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1836,1 +1840,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1874,1 +1878,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1924,1 +1928,1 @@\n-     * @throws UnsupportedOperationException if {@code value} is not a\n+     * @throws IllegalArgumentException if {@code value} is not a\n@@ -1926,0 +1930,2 @@\n+     * @throws IllegalArgumentException if this segment is\n+     *         {@linkplain #isReadOnly() read-only}\n@@ -2058,1 +2064,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2081,1 +2087,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2104,1 +2110,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2149,1 +2155,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2194,1 +2200,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2239,1 +2245,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2284,1 +2290,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2339,1 +2345,3 @@\n-     * @throws UnsupportedOperationException if {@code value} is not a {@linkplain #isNative() native} segment\n+     * @throws IllegalArgumentException if {@code value} is not a {@linkplain #isNative() native} segment\n+     * @throws IllegalArgumentException if this segment is\n+     *         {@linkplain #isReadOnly() read-only}\n@@ -2463,1 +2471,1 @@\n-     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":30,"deletions":22,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-     * @throws UnsupportedOperationException if {@code value} is not\n+     * @throws IllegalArgumentException if {@code value} is not\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import static jdk.internal.foreign.AbstractMemorySegmentImpl.AccessConstraint.*;\n@@ -100,1 +101,1 @@\n-    static AbstractMemorySegmentImpl checkAddress(Object obb, long offset, long length, boolean ro) {\n+    static AbstractMemorySegmentImpl checkAddress(Object obb, long offset, long length, AbstractMemorySegmentImpl.AccessConstraint constraint) {\n@@ -102,1 +103,1 @@\n-        oo.checkAccess(offset, length, ro);\n+        oo.checkAccess(offset, length, constraint);\n@@ -128,1 +129,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, true);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, NONE);\n@@ -152,1 +153,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -178,1 +179,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, true);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, NONE);\n@@ -188,1 +189,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -198,1 +199,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, true);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, NONE);\n@@ -208,1 +209,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -218,1 +219,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, true);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, NONE);\n@@ -228,1 +229,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -239,1 +240,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -249,1 +250,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -260,1 +261,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -271,1 +272,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -282,1 +283,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -292,1 +293,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -302,1 +303,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -312,1 +313,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -322,1 +323,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -333,1 +334,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -344,1 +345,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -357,1 +358,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -371,1 +372,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -385,1 +386,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -413,1 +414,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -427,1 +428,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -441,1 +442,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -467,1 +468,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -481,1 +482,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -495,1 +496,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -522,1 +523,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -536,1 +537,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n@@ -550,1 +551,1 @@\n-        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, false);\n+        AbstractMemorySegmentImpl bb = checkAddress(obb, base, handle.length, ON_WRITE_IAE);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleSegmentView.java.template","additions":34,"deletions":33,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+import static jdk.internal.foreign.AbstractMemorySegmentImpl.AccessConstraint.*;\n@@ -195,1 +196,1 @@\n-        checkAccess(0, length, false);\n+        checkAccess(0, length, ON_WRITE_IAE);\n@@ -361,0 +362,4 @@\n+    public enum AccessConstraint {\n+        NONE, ON_WRITE_UOE, ON_WRITE_IAE\n+    }\n+\n@@ -362,3 +367,8 @@\n-    public void checkAccess(long offset, long length, boolean readOnly) {\n-        if (!readOnly && this.readOnly) {\n-            throw new UnsupportedOperationException(\"Attempt to write a read-only segment\");\n+    public void checkAccess(long offset, long length, AccessConstraint access) {\n+        if (readOnly) {\n+            switch (access) {\n+                case ON_WRITE_UOE ->\n+                        throw new UnsupportedOperationException(\"Attempt to write a read-only segment\");\n+                case ON_WRITE_IAE ->\n+                        throw new IllegalArgumentException(\"Attempt to write a read-only segment\");\n+            }\n@@ -611,2 +621,2 @@\n-        srcImpl.checkAccess(srcOffset, size, true);\n-        dstImpl.checkAccess(dstOffset, size, false);\n+        srcImpl.checkAccess(srcOffset, size, NONE);\n+        dstImpl.checkAccess(dstOffset, size, ON_WRITE_IAE);\n@@ -638,1 +648,1 @@\n-        srcImpl.checkAccess(srcOffset, elementCount * dstInfo.scale(), true);\n+        srcImpl.checkAccess(srcOffset, elementCount * dstInfo.scale(), NONE);\n@@ -666,1 +676,1 @@\n-        destImpl.checkAccess(dstOffset, elementCount * srcInfo.scale(), false);\n+        destImpl.checkAccess(dstOffset, elementCount * srcInfo.scale(), ON_WRITE_IAE);\n@@ -684,2 +694,2 @@\n-        srcImpl.checkAccess(srcFromOffset, srcBytes, true);\n-        dstImpl.checkAccess(dstFromOffset, dstBytes, true);\n+        srcImpl.checkAccess(srcFromOffset, srcBytes, NONE);\n+        dstImpl.checkAccess(dstFromOffset, dstBytes, NONE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -32,1 +31,0 @@\n-import java.lang.invoke.MethodHandle;\n@@ -34,1 +32,0 @@\n-import java.lang.invoke.MethodType;\n@@ -243,1 +240,1 @@\n-        } catch (UnsupportedOperationException ex) {\n+        } catch (IllegalArgumentException ex) {\n","filename":"test\/jdk\/java\/foreign\/TestArrayCopy.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-            } catch (UnsupportedOperationException ex) {\n+            } catch (IllegalArgumentException ex) {\n@@ -124,1 +124,1 @@\n-            } catch (UnsupportedOperationException ex) {\n+            } catch (IllegalArgumentException ex) {\n@@ -188,1 +188,1 @@\n-            } catch (UnsupportedOperationException ex) {\n+            } catch (IllegalArgumentException ex) {\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.lang.foreign.MemoryLayout;\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -163,0 +163,19 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class,\n+            expectedExceptionsMessageRegExp = \".*Heap segment not allowed.*\")\n+    public void testArenaAllocateFromHeapSegment() {\n+        try (Arena arena = Arena.ofConfined()) {\n+            var heapSegment = MemorySegment.ofArray(new int[]{1});\n+            arena.allocateFrom(ValueLayout.ADDRESS, heapSegment);\n+        }\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class,\n+            expectedExceptionsMessageRegExp = \".*Heap segment not allowed.*\")\n+    public void testAllocatorAllocateFromHeapSegment() {\n+        try (Arena arena = Arena.ofConfined()) {\n+            SegmentAllocator allocator = SegmentAllocator.prefixAllocator(arena.allocate(16));\n+            var heapSegment = MemorySegment.ofArray(new int[]{1});\n+            allocator.allocateFrom(ValueLayout.ADDRESS, heapSegment);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    @Test(expectedExceptions = UnsupportedOperationException.class, dataProvider = \"segmentKinds\")\n+    @Test(expectedExceptions = IllegalArgumentException.class, dataProvider = \"segmentKinds\")\n@@ -87,0 +87,9 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class,\n+            expectedExceptionsMessageRegExp = \".*Attempt to write a read-only segment.*\")\n+    public void badCopy6Arg() {\n+        try (Arena scope = Arena.ofConfined()) {\n+            MemorySegment dest = scope.allocate(ValueLayout.JAVA_INT).asReadOnly();\n+            MemorySegment.copy(new int[1],0, dest, ValueLayout.JAVA_INT, 0 ,1); \/\/ should throw\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentCopy.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-    @Test(dataProvider = \"segmentFactories\", expectedExceptions = UnsupportedOperationException.class)\n+    @Test(dataProvider = \"segmentFactories\", expectedExceptions = IllegalArgumentException.class)\n@@ -334,0 +334,6 @@\n+    @Test(dataProvider = \"segmentFactories\", expectedExceptions = IllegalArgumentException.class)\n+    public void testFromStringIllegalAccessMode(Supplier<MemorySegment> segmentSupplier) {\n+        MemorySegment segment = segmentSupplier.get();\n+        segment.asReadOnly().setString(0, \"a\");\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}