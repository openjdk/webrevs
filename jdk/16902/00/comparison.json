{"files":[{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=JDK-8293941\n+ * @bug 8319372 8293941\n+ * @summary Tests that CastII are not dying anymore and breaking the graph due to control that is not removed\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+AbortVMOnCompilationFailure -XX:-RangeCheckElimination\n+ *                   -Xcomp -XX:CompileOnly=compiler.c2.TestTopCastIIOnUndetectedDeadPath4::*\n+ *                   compiler.c2.TestTopCastIIOnUndetectedDeadPath4\n+ *\/\n+\n+\/*\n+ * @test id=JDK-8314111\n+ * @bug 8319372 8314111\n+ * @summary Tests that CastII are not dying anymore and breaking the graph due to control that is not removed\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=compiler.c2.TestTopCastIIOnUndetectedDeadPath4::test*\n+ *                   compiler.c2.TestTopCastIIOnUndetectedDeadPath4\n+ *\/\n+\n+\/*\n+ * @test id=NoFlags\n+ * @summary Tests that CastII are not dying anymore and breaking the graph due to control that is not removed\n+ * @run main\/othervm compiler.c2.TestTopCastIIOnUndetectedDeadPath4\n+ *\/\n+\n+package compiler.c2;\n+\n+public class TestTopCastIIOnUndetectedDeadPath4 {\n+\n+    static boolean bFld;\n+    static int iArrFld[];\n+    static long lArrFld[];\n+    static double dArrFld[][];\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 5000; i++) {\n+            test8293941();\n+            test8314111_1();\n+            test8314111_2();\n+        }\n+    }\n+\n+    static void test8293941() {\n+        int i16;\n+        boolean b = false;\n+        for (double d1 = 31.2; d1 < 72; d1++) {\n+            for (i16 = (int) d1; i16 < 2; ++i16) {\n+                iArrFld[i16] >>= 5;\n+                dArrFld[i16 - 1][i16] = 3;\n+                if (b) {\n+                    break;\n+                }\n+                lArrFld[i16] = 4;\n+            }\n+            switch (0) {\n+                case 5:\n+                    b = b;\n+            }\n+        }\n+    }\n+\n+    static void test8314111_1() {\n+        int i, i1 = 0, i28, i30 = 0, iArr[] = new int[10];\n+        boolean bArr[] = new boolean[10];\n+        i = 1;\n+        while (++i < 5) {\n+            try {\n+                i1 = iArr[i - 1];\n+                i1 = 2 \/ i;\n+            } catch (ArithmeticException a_e) {\n+            }\n+            if (bFld) {\n+                switch (i) {\n+                    case 4:\n+                        for (i28 = 3; 100 > i28; i28++) {\n+                            i1 -= i28;\n+                        }\n+                        if ((i30 -= 3) > 0) {\n+                            switch (i30) {\n+                                case 4:\n+                                    bArr[i - 1] = bFld;\n+                                    iArr[i] = 6;\n+                            }\n+                        }\n+                }\n+            }\n+        }\n+    }\n+\n+    static void test8314111_2() {\n+        int iArr[] = new int[1000];\n+        boolean bArr[] = new boolean[1000];\n+        int x = 0;\n+        int i = 1;\n+        while (++i < 5) {\n+            try {\n+                x = iArr[i - 1];\n+                x = 2 \/ i;\n+            } catch (ArithmeticException a_e) {\n+            }\n+            if (bFld) {\n+                x++;\n+                bArr[i - 1] = false;\n+                iArr[i] = 0;\n+            }\n+        }\n+    }\n+}\n+\n+class Foo {\n+    public static void empty() {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestTopCastIIOnUndetectedDeadPath4.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}