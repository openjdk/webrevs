{"files":[{"patch":"@@ -31,0 +31,1 @@\n+#include \"nmt\/nativeCallStackPrinter.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/memReporter.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"logging\/log.hpp\"\n+#include \"nmt\/nativeCallStackPrinter.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/nativeCallStack.hpp\"\n+#include \"utilities\/ostream.hpp\"\n+\n+NativeCallStackPrinter::NativeCallStackPrinter(outputStream* out) :\n+    _text_storage(mtNMT, Arena::Tag::tag_other, 128 * K), _out(out)\n+{}\n+\n+#ifdef ASSERT\n+NativeCallStackPrinter::~NativeCallStackPrinter() {\n+  _out->print_cr(\"stack printer cache: entries: %d text size: %zu\",\n+                 _cache.number_of_entries(), _text_storage.size_in_bytes());\n+}\n+#endif\n+\n+void NativeCallStackPrinter::print_stack(const NativeCallStack* stack) const {\n+  for (int i = 0; i < NMT_TrackingStackDepth; i++) {\n+    const address pc = stack->get_frame(i);\n+    if (pc != nullptr) {\n+      bool created = false;\n+      const char** cached_frame_text = _cache.put_if_absent(pc, &created);\n+      if (created) {\n+        stringStream ss(4 * K);\n+        stack->print_frame(&ss, pc);\n+        const size_t len = strlen(ss.base());\n+        char* store = NEW_ARENA_ARRAY(&_text_storage, char, len + 1);\n+        strcpy(store, ss.base());\n+        (*cached_frame_text) = store;\n+_out->put('x');\n+      }\n+      _out->print_raw_cr(*cached_frame_text);\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/share\/nmt\/nativeCallStackPrinter.cpp","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_NMT_NATIVECALLSTACKPRINTER_HPP\n+#define SHARE_NMT_NATIVECALLSTACKPRINTER_HPP\n+\n+#include \"memory\/arena.hpp\"\n+#include \"nmt\/memflags.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/resourceHash.hpp\"\n+\n+class outputStream;\n+class NativeCallStack;\n+\n+\/\/ This is a text cache for NativeCallStack frames by PC. When printing tons of\n+\/\/ NativeCallStack instances (e.g. during NMT detail reports), printing through\n+\/\/ this printer speeds up frame description resolution by quite a bit.\n+class NativeCallStackPrinter {\n+  \/\/ Cache-related data are mutable to be able to use NativeCallStackPrinter as\n+  \/\/ inline member in classes with const printing methods.\n+  mutable Arena _text_storage;\n+  mutable ResourceHashtable<address, const char*, 293, AnyObj::C_HEAP, mtNMT> _cache;\n+  outputStream* const _out;\n+public:\n+  NativeCallStackPrinter(outputStream* out);\n+  DEBUG_ONLY(~NativeCallStackPrinter();)\n+  void print_stack(const NativeCallStack* stack) const;\n+};\n+\n+#endif \/\/ SHARE_NMT_NATIVECALLSTACKPRINTER_HPP\n","filename":"src\/hotspot\/share\/nmt\/nativeCallStackPrinter.hpp","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"nmt\/nativeCallStackPrinter.hpp\"\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -120,21 +120,0 @@\n-\n-NativeCallStackPrinter::NativeCallStackPrinter(outputStream* out) : _out(out) {}\n-\n-void NativeCallStackPrinter::print_stack(const NativeCallStack* stack) const {\n-  for (int i = 0; i < NMT_TrackingStackDepth; i++) {\n-    const address pc = stack->get_frame(i);\n-\n-    if (pc != nullptr) {\n-      \/\/ cached?\n-      bool created = false;\n-      Entry* const cached_value = _cache.put_if_absent(pc, &created);\n-      if (!created) {\n-        _out->print_raw_cr(cached_value->text);\n-      } else {\n-        stringStream ss(cached_value->text, sizeof(cached_value->text));\n-        stack->print_frame(&ss, pc);\n-        _out->print_raw_cr(cached_value->text);\n-      }\n-    }\n-  }\n-}\n","filename":"src\/hotspot\/share\/utilities\/nativeCallStack.cpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -133,11 +133,0 @@\n-\/\/ When printing many instances of NativeCallStack that may share many PC addresses,\n-\/\/ a NativeCallStackPrinter improves performance by caching printed frames by address.\n-class NativeCallStackPrinter {\n-  struct Entry { char text[1024]; };\n-  mutable ResourceHashtable<address, Entry, 293, AnyObj::C_HEAP, mtNMT> _cache;\n-  outputStream* const _out;\n-public:\n-  NativeCallStackPrinter(outputStream* out);\n-  void print_stack(const NativeCallStack* stack) const;\n-};\n-\n","filename":"src\/hotspot\/share\/utilities\/nativeCallStack.hpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"}]}