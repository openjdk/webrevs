{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,0 +80,1 @@\n+  int     line;\n@@ -85,1 +86,4 @@\n-      if (pc == nullptr) break;\n+      if (pc == nullptr) {\n+        break;\n+      }\n+      const bool pc_in_VM = os::address_is_in_vm(pc);\n@@ -93,0 +97,9 @@\n+        if (Decoder::get_source_info(pc, buf, sizeof(buf), &line, false)) {\n+          \/\/ For intra-vm functions, we omit the full path\n+          const char* s = buf;\n+          if (pc_in_VM) {\n+            s = strrchr(s, os::file_separator()[0]);\n+            s = (s != nullptr) ? s + 1 : buf;\n+          }\n+          out->print(\"   (%s:%d)\", s, line);\n+        }\n@@ -94,1 +107,1 @@\n-      if ((!function_printed || !os::address_is_in_vm(pc)) &&\n+      if ((!function_printed || !pc_in_VM) &&\n","filename":"src\/hotspot\/share\/utilities\/nativeCallStack.cpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,3 @@\n+    private static final boolean expectSourceInformation =\n+            Platform.isLinux() || Platform.isWindows();\n+\n@@ -124,2 +127,3 @@\n-            if (Platform.isWindows() || Platform.isARM()) {\n-                return; \/\/ we are done\n+            if (!Platform.isWindows() && !Platform.isARM()) {\n+                output.reportDiagnosticSummary();\n+                throw new RuntimeException(\"Expected symbol missing from output: \" + expectedSymbol);\n@@ -127,2 +131,0 @@\n-            output.reportDiagnosticSummary();\n-            throw new RuntimeException(\"Expected symbol missing from output: \" + expectedSymbol);\n@@ -133,9 +135,11 @@\n-        if (okToHaveAllocateHeap) {\n-            System.out.print(stackTraceAllocateHeap);\n-            if (stackTraceMatches(stackTraceAllocateHeap, output)) {\n-                return;\n-            }\n-        } else {\n-            System.out.print(stackTraceDefault);\n-            if (stackTraceMatches(stackTraceDefault, output)) {\n-                return;\n+        String toMatch = okToHaveAllocateHeap ? stackTraceAllocateHeap : stackTraceDefault;\n+        if (!stackTraceMatches(toMatch, output)) {\n+            output.reportDiagnosticSummary();\n+            throw new RuntimeException(\"Expected stack trace missing from output\");\n+        }\n+\n+        System.out.println(\"Looking for source information:\");\n+        if (expectSourceInformation) {\n+            if (!stackTraceMatches(\".*moduleEntry.cpp.*\", output)) {\n+                output.reportDiagnosticSummary();\n+                throw new RuntimeException(\"Expected source information missing from output\");\n@@ -144,3 +148,0 @@\n-        \/\/ Failed to match so dump all the output\n-        output.reportDiagnosticSummary();\n-        throw new RuntimeException(\"Expected stack trace missing from output\");\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/CheckForProperDetailStackTrace.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"}]}