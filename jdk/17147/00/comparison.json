{"files":[{"patch":"@@ -687,0 +687,1 @@\n+    C->print_inlining_update_delayed(this);\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8320237\n+ * @summary late inlining output shouldn't produce both failure and success messages\n+ * @library \/test\/lib\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.inlining.TestDuplicatedLateInliningOutput\n+ *\/\n+\n+package compiler.inlining;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestDuplicatedLateInliningOutput {\n+    public static void main(String[] args) throws Exception {\n+        test(\n+            NonConstantReceiverLauncher.class,\n+            \"@ (\\\\d+)\\\\s+java\\\\.lang\\\\.invoke\\\\.LambdaForm\\\\$DMH\\\\\/0x[0-9a-f]+::invokeStatic \\\\(\\\\d+ bytes\\\\)\\\\s+force inline by annotation\",\n+            \"@ (\\\\d+)\\\\s+java\\\\.lang\\\\.invoke\\\\.MethodHandle::invokeBasic\\\\(\\\\)V \\\\(\\\\d+ bytes\\\\)\\\\s+failed to inline: receiver not constant\");\n+\n+        test(\n+            VirtualCallLauncher.class,\n+            \"@ (\\\\d+)\\\\s+compiler\\\\.inlining\\\\.TestDuplicatedLateInliningOutput\\\\$VirtualCallLauncher\\\\$B::lateInlined2 \\\\(\\\\d+ bytes\\\\)\\\\s+inline \\\\(hot\\\\)\",\n+            \"@ (\\\\d+)\\\\s+compiler\\\\.inlining\\\\.TestDuplicatedLateInliningOutput\\\\$VirtualCallLauncher\\\\$A::lateInlined2 \\\\(\\\\d+ bytes\\\\)\\\\s+failed to inline: virtual call\"\n+        );\n+    }\n+\n+    private static void test(Class<?> launcher, String pattern1, String pattern2) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:+PrintInlining\",\n+                \"-XX:CICompilerCount=1\",\n+                \"-XX:-TieredCompilation\",\n+                launcher.getName());\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        analyzer.outputTo(System.out);\n+        analyzer.errorTo(System.err);\n+\n+        List<String> lines = analyzer.asLines();\n+        int index = IntStream.range(0, lines.size())\n+                .filter(i -> lines.get(i).trim().matches(pattern1))\n+                .findFirst()\n+                .orElseThrow(() -> new Exception(\"No inlining found\"));\n+\n+        if (lines.get(index - 1).trim().matches(pattern2)) {\n+            throw new Exception(\"Both failure and success message found\");\n+        }\n+    }\n+\n+    static class NonConstantReceiverLauncher {\n+        static final MethodHandle mh1;\n+        static MethodHandle mh2;\n+\n+        static {\n+            try {\n+                MethodHandles.Lookup lookup = MethodHandles.lookup();\n+                mh1 = lookup.findStatic(NonConstantReceiverLauncher.class, \"lateInlined\", MethodType.methodType(void.class));\n+                mh2 = mh1;\n+            } catch (NoSuchMethodException | IllegalAccessException e) {\n+                e.printStackTrace();\n+                throw new RuntimeException(\"Method handle lookup failed\");\n+            }\n+        }\n+\n+        public static void main(String[] args) throws Throwable {\n+            for (int i = 0; i < 20_000; i++) {\n+                test(true);\n+                inlined(false);\n+            }\n+        }\n+\n+        private static void lateInlined() {\n+            \/\/ noop\n+        }\n+\n+        private static void test(boolean flag) throws Throwable {\n+            MethodHandle mh = null;\n+            if (flag) {\n+                mh = inlined(flag);\n+            }\n+            mh.invokeExact();\n+        }\n+\n+        private static MethodHandle inlined(boolean flag) {\n+            if (flag) {\n+                return mh1;\n+            }\n+            return mh2;\n+        }\n+    }\n+\n+    static class VirtualCallLauncher {\n+        static final A obj1 = new B();\n+        static final A obj2 = new C();\n+        static final A obj3 = new D();\n+\n+        public static void main(String[] args) throws Throwable {\n+            for (int i = 0; i < 20_000; i++) {\n+                test2(true);\n+                inlined2(false);\n+                inlined3(obj1);\n+                inlined3(obj2);\n+                inlined3(obj3);\n+            }\n+        }\n+\n+        private static void test2(boolean flag) {\n+            A a = null;\n+            if (flag) {\n+                a = inlined2(flag);\n+            }\n+            inlined3(a);\n+        }\n+\n+        private static A inlined2(boolean flag) {\n+            if (flag) {\n+                return obj1;\n+            }\n+            return obj2;\n+        }\n+\n+        private static void inlined3(A a) {\n+            a.lateInlined2();\n+        }\n+\n+        private static abstract class A {\n+            abstract void lateInlined2();\n+        }\n+\n+        private static class B extends A {\n+            @Override\n+            void lateInlined2() {\n+                \/\/ noop\n+            }\n+        }\n+\n+        private static class C extends A {\n+            @Override\n+            void lateInlined2() {\n+                \/\/ noop\n+            }\n+        }\n+\n+        private static class D extends A {\n+            @Override\n+            void lateInlined2() {\n+                \/\/ noop\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/inlining\/TestDuplicatedLateInliningOutput.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"}]}