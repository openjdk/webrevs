{"files":[{"patch":"@@ -1560,0 +1560,1 @@\n+        private volatile Class<?> constructorParameterClass;\n@@ -1566,0 +1567,9 @@\n+\n+        Class<?> getConstructorParameterClass() throws ClassNotFoundException {\n+            Class<?> clazz = constructorParameterClass;\n+            if (clazz == null) {\n+                clazz = Class.forName(constructorParameterClassName);\n+                constructorParameterClass = clazz;\n+            }\n+            return clazz;\n+        }\n@@ -1899,1 +1909,1 @@\n-                        null : Class.forName(cap.constructorParameterClassName);\n+                        null : cap.getConstructorParameterClass();\n","filename":"src\/java.base\/share\/classes\/java\/security\/Provider.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,19 @@\n+package org.openjdk.bench.java.security;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.security.SecureRandom;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n+public class SecureRandomBench {\n+\n+    @Benchmark\n+    public SecureRandom newSecureRandom() throws Exception {\n+        return new SecureRandom();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/SecureRandomBench.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"}]}