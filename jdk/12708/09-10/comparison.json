{"files":[{"patch":"@@ -349,1 +349,1 @@\n-                        bindings.bufferLoad(offset, type)\n+                        bindings.bufferLoad(offset, type, (int) size)\n@@ -354,7 +354,0 @@\n-                case STRUCT_REFERENCE -> {\n-                    assert carrier == MemorySegment.class;\n-                    VMStorage storage = storageCalculator.nextStorage(StorageType.INTEGER, false);\n-                    bindings.copy(layout)\n-                            .unboxAddress()\n-                            .vmStore(storage, long.class);\n-                }\n@@ -433,1 +426,1 @@\n-                                .bufferStore(offset, type);\n+                                .bufferStore(offset, type, (int) size);\n@@ -437,6 +430,0 @@\n-                case STRUCT_REFERENCE -> {\n-                    assert carrier == MemorySegment.class;\n-                    VMStorage storage = storageCalculator.nextStorage(StorageType.INTEGER, false);\n-                    bindings.vmLoad(storage, long.class)\n-                            .boxAddress(layout);\n-                }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/CallArranger.java","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-    STRUCT_REFERENCE,\n@@ -44,1 +43,0 @@\n-    private static final int MAX_AGGREGATE_REGS_SIZE = 8;\n@@ -61,4 +59,0 @@\n-    static boolean isRegisterAggregate(MemoryLayout type) {\n-        return type.bitSize() <= MAX_AGGREGATE_REGS_SIZE * 64;\n-    }\n-\n@@ -124,2 +118,0 @@\n-        } else if (!useABIv2 || isRegisterAggregate(layout)) {\n-            return TypeClass.STRUCT_REGISTER;\n@@ -127,1 +119,1 @@\n-        return TypeClass.STRUCT_REFERENCE;\n+        return TypeClass.STRUCT_REGISTER;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/ppc64\/TypeClass.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\" | os.arch == \"riscv64\"\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\" | os.arch == \"ppc64le\" | os.arch == \"riscv64\"\n","filename":"test\/jdk\/java\/foreign\/nested\/TestNested.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}