{"files":[{"patch":"@@ -131,1 +131,1 @@\n-    case StorageType::FRAME_DATA:\n+    case StorageType::FRAME_DATA: {\n@@ -133,2 +133,1 @@\n-      \/\/ Note: The case in which we'd have to store into a Java frame slot doesn't happen,\n-      \/\/ because we always have enough GP regs to hold all values passed in GP regs by C.\n+      Register storeval = as_Register(from_reg);\n@@ -138,3 +137,1 @@\n-        __ std(R0, reg2offset(to_reg, out_bias), R1_SP);\n-      } else {\n-        __ std(as_Register(from_reg), reg2offset(to_reg, out_bias), R1_SP);\n+        storeval = R0;\n@@ -142,1 +139,6 @@\n-      break;\n+      switch (to_reg.stack_size()) {\n+        case 8: __ std(storeval, reg2offset(to_reg, out_bias), R1_SP); break;\n+        case 4: __ stw(storeval, reg2offset(to_reg, out_bias), R1_SP); break;\n+        default: ShouldNotReachHere();\n+      }\n+    } break;\n","filename":"src\/hotspot\/cpu\/ppc\/foreignGlobals_ppc.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\" | os.arch == \"riscv64\"\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\" | os.arch == \"ppc64le\" | os.arch == \"riscv64\"\n@@ -41,1 +41,1 @@\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\" | os.arch == \"riscv64\"\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\" | os.arch == \"ppc64le\" | os.arch == \"riscv64\"\n","filename":"test\/jdk\/java\/foreign\/arraystructs\/TestArrayStructs.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}