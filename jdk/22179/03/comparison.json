{"files":[{"patch":"@@ -29,2 +29,0 @@\n-import java.io.File;\n-import java.io.FilePermission;\n@@ -35,1 +33,1 @@\n-import java.security.Permission;\n+import java.security.Permissions;\n@@ -53,2 +51,0 @@\n-import sun.net.www.ParseUtil;\n-import sun.security.util.SecurityConstants;\n@@ -576,22 +572,4 @@\n-     * Returns the permissions for the given codesource object.\n-     * The implementation of this method first calls super.getPermissions\n-     * and then adds permissions based on the URL of the codesource.\n-     * <p>\n-     * If the protocol of this URL is \"jar\", then the permission returned\n-     * is based on the permission that is required by the URL of the Jar\n-     * file.\n-     * <p>\n-     * If the protocol is \"file\" and there is an authority component, then\n-     * permission to connect to and accept connections from that authority\n-     * may be returned. If the protocol is \"file\"\n-     * and the path specifies a file, then permission to read that\n-     * file is returned. If protocol is \"file\" and the path is\n-     * a directory, then permission is returned to read all files\n-     * and (recursively) all files and subdirectories contained in\n-     * that directory.\n-     * <p>\n-     * If the protocol is not \"file\", then permission\n-     * to connect to and accept connections from the URL's host is returned.\n-     * @param codesource the codesource\n-     * @throws    NullPointerException if {@code codesource} is {@code null}.\n-     * @return the permissions for the codesource\n+     * {@return an {@linkplain PermissionCollection empty Permission collection}}\n+     *\n+     * @param codesource the {@code CodeSource}\n+     * @throws NullPointerException if {@code codesource} is {@code null}.\n@@ -599,55 +577,4 @@\n-    protected PermissionCollection getPermissions(CodeSource codesource)\n-    {\n-        PermissionCollection perms = super.getPermissions(codesource);\n-\n-        URL url = codesource.getLocation();\n-\n-        Permission p;\n-        URLConnection urlConnection;\n-\n-        try {\n-            urlConnection = url.openConnection();\n-            p = urlConnection.getPermission();\n-        } catch (java.io.IOException ioe) {\n-            p = null;\n-            urlConnection = null;\n-        }\n-\n-        if (p instanceof FilePermission) {\n-            \/\/ if the permission has a separator char on the end,\n-            \/\/ it means the codebase is a directory, and we need\n-            \/\/ to add an additional permission to read recursively\n-            String path = p.getName();\n-            if (path.endsWith(File.separator)) {\n-                path += \"-\";\n-                p = new FilePermission(path, SecurityConstants.FILE_READ_ACTION);\n-            }\n-        } else if ((p == null) && (url.getProtocol().equals(\"file\"))) {\n-            String path = url.getFile().replace('\/', File.separatorChar);\n-            path = ParseUtil.decode(path);\n-            if (path.endsWith(File.separator))\n-                path += \"-\";\n-            p = new FilePermission(path, SecurityConstants.FILE_READ_ACTION);\n-        } else {\n-            \/**\n-             * Not loading from a 'file:' URL so we want to give the class\n-             * permission to connect to and accept from the remote host\n-             * after we've made sure the host is the correct one and is valid.\n-             *\/\n-            URL locUrl = url;\n-            if (urlConnection instanceof JarURLConnection) {\n-                locUrl = ((JarURLConnection)urlConnection).getJarFileURL();\n-            }\n-            String host = locUrl.getHost();\n-            if (host != null && !host.isEmpty())\n-                p = new SocketPermission(host,\n-                        SecurityConstants.SOCKET_CONNECT_ACCEPT_ACTION);\n-        }\n-\n-        \/\/ make sure the person that created this class loader\n-        \/\/ would have this permission\n-\n-        if (p != null) {\n-            perms.add(p);\n-        }\n-        return perms;\n+    @Override\n+    protected PermissionCollection getPermissions(CodeSource codesource) {\n+        Objects.requireNonNull(codesource);\n+        return new Permissions();\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLClassLoader.java","additions":9,"deletions":82,"binary":false,"changes":91,"status":"modified"}]}