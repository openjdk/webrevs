{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/aix\/forbiddenFunctions_aix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/aix\/permitForbiddenFunctions_aix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-          permit_forbidden_functions::free(demangled_name);\n+          permit_forbidden_function::free(demangled_name);\n","filename":"src\/hotspot\/os\/aix\/porting_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-    permit_forbidden_functions::free(result);\n+    permit_forbidden_function::free(result);\n","filename":"src\/hotspot\/os\/bsd\/decoder_machO.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/bsd\/forbiddenFunctions_bsd.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/bsd\/permitForbiddenFunctions_bsd.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    permit_forbidden_functions::free(result);\n+    permit_forbidden_function::free(result);\n","filename":"src\/hotspot\/os\/linux\/decoder_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/linux\/forbiddenFunctions_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-    permit_forbidden_functions::free(line_mountpoint);\n+    permit_forbidden_function::free(line_mountpoint);\n@@ -71,1 +71,1 @@\n-  permit_forbidden_functions::free(line_filesystem);\n+  permit_forbidden_function::free(line_filesystem);\n@@ -95,1 +95,1 @@\n-  permit_forbidden_functions::free(line);\n+  permit_forbidden_function::free(line);\n@@ -102,1 +102,1 @@\n-    permit_forbidden_functions::free(mountpoint); \/\/ *not* os::free\n+    permit_forbidden_function::free(mountpoint); \/\/ *not* os::free\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zMountPoint_linux.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-  permit_forbidden_functions::free(buf);\n+  permit_forbidden_function::free(buf);\n","filename":"src\/hotspot\/os\/linux\/mallocInfoDcmd.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/linux\/permitForbiddenFunctions_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/posix\/forbiddenFunctions_posix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -934,1 +934,1 @@\n-  permit_forbidden_functions::exit(num);\n+  permit_forbidden_function::exit(num);\n@@ -938,1 +938,1 @@\n-  permit_forbidden_functions::_exit(num);\n+  permit_forbidden_function::_exit(num);\n@@ -995,1 +995,1 @@\n-  char* p = permit_forbidden_functions::realpath(filename, nullptr);\n+  char* p = permit_forbidden_function::realpath(filename, nullptr);\n@@ -1003,1 +1003,1 @@\n-    permit_forbidden_functions::free(p); \/\/ *not* os::free\n+    permit_forbidden_function::free(p); \/\/ *not* os::free\n@@ -1012,1 +1012,1 @@\n-      p = permit_forbidden_functions::realpath(filename, outbuf);\n+      p = permit_forbidden_function::realpath(filename, outbuf);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-namespace permit_forbidden_functions {\n+namespace permit_forbidden_function {\n@@ -43,1 +43,1 @@\n-} \/\/ namespace permit_forbidden_functions\n+} \/\/ namespace permit_forbidden_function\n","filename":"src\/hotspot\/os\/posix\/permitForbiddenFunctions_posix.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/windows\/forbiddenFunctions_windows.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -4386,1 +4386,1 @@\n-    permit_forbidden_functions::exit(exit_code);\n+    permit_forbidden_function::exit(exit_code);\n@@ -4388,1 +4388,1 @@\n-    permit_forbidden_functions::_exit(exit_code);\n+    permit_forbidden_function::_exit(exit_code);\n@@ -5151,1 +5151,1 @@\n-  char* p = permit_forbidden_functions::_fullpath(nullptr, filename, 0);\n+  char* p = permit_forbidden_function::_fullpath(nullptr, filename, 0);\n@@ -5159,1 +5159,1 @@\n-    permit_forbidden_functions::free(p); \/\/ *not* os::free\n+    permit_forbidden_function::free(p); \/\/ *not* os::free\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-namespace permit_forbidden_functions {\n+namespace permit_forbidden_function {\n@@ -43,1 +43,1 @@\n-} \/\/ namespace permit_forbidden_functions\n+} \/\/ namespace permit_forbidden_function\n","filename":"src\/hotspot\/os\/windows\/permitForbiddenFunctions_windows.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-    T* q = (T*) permit_forbidden_functions::malloc(bytes);\n+    T* q = (T*) permit_forbidden_function::malloc(bytes);\n@@ -123,1 +123,1 @@\n-      permit_forbidden_functions::free(_p);\n+      permit_forbidden_function::free(_p);\n","filename":"src\/hotspot\/os\/windows\/symbolengine.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -617,1 +617,1 @@\n-    permit_forbidden_functions::free((void*)_init_error_msg);\n+    permit_forbidden_function::free((void*)_init_error_msg);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,1 +153,1 @@\n-    char* newbuf = (char*)permit_forbidden_functions::malloc(newbuf_len * sizeof(char));\n+    char* newbuf = (char*)permit_forbidden_function::malloc(newbuf_len * sizeof(char));\n@@ -163,1 +163,1 @@\n-      permit_forbidden_functions::free(newbuf);\n+      permit_forbidden_function::free(newbuf);\n","filename":"src\/hotspot\/share\/logging\/logTagSet.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-  _table = (MallocSiteHashtableEntry**)permit_forbidden_functions::calloc(table_size, sizeof(MallocSiteHashtableEntry*));\n+  _table = (MallocSiteHashtableEntry**)permit_forbidden_function::calloc(table_size, sizeof(MallocSiteHashtableEntry*));\n","filename":"src\/hotspot\/share\/nmt\/mallocSiteTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,2 +101,2 @@\n-    permit_forbidden_functions::free(_ranges);\n-    permit_forbidden_functions::free(_mem_tags);\n+    permit_forbidden_function::free(_ranges);\n+    permit_forbidden_function::free(_mem_tags);\n@@ -117,2 +117,2 @@\n-      _ranges = (Range*)permit_forbidden_functions::realloc(_ranges, new_capacity * sizeof(Range));\n-      _mem_tags = (MemTag*)permit_forbidden_functions::realloc(_mem_tags, new_capacity * sizeof(MemTag));\n+      _ranges = (Range*)permit_forbidden_function::realloc(_ranges, new_capacity * sizeof(Range));\n+      _mem_tags = (MemTag*)permit_forbidden_function::realloc(_mem_tags, new_capacity * sizeof(MemTag));\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,3 +37,3 @@\n-static void* raw_malloc(size_t s)               { return permit_forbidden_functions::malloc(s); }\n-static void* raw_realloc(void* old, size_t s)   { return permit_forbidden_functions::realloc(old, s); }\n-static void  raw_free(void* p)                  { permit_forbidden_functions::free(p); }\n+static void* raw_malloc(size_t s)               { return permit_forbidden_function::malloc(s); }\n+static void* raw_realloc(void* old, size_t s)   { return permit_forbidden_function::realloc(old, s); }\n+static void  raw_free(void* p)                  { permit_forbidden_function::free(p); }\n","filename":"src\/hotspot\/share\/nmt\/nmtPreInit.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-  int result = permit_forbidden_functions::vsnprintf(buf, len, fmt, args);\n+  int result = permit_forbidden_function::vsnprintf(buf, len, fmt, args);\n@@ -660,1 +660,1 @@\n-  void* const outer_ptr = permit_forbidden_functions::malloc(outer_size);\n+  void* const outer_ptr = permit_forbidden_function::malloc(outer_size);\n@@ -727,1 +727,1 @@\n-    void* const new_outer_ptr = permit_forbidden_functions::realloc(header, new_outer_size);\n+    void* const new_outer_ptr = permit_forbidden_function::realloc(header, new_outer_size);\n@@ -755,1 +755,1 @@\n-    rc = permit_forbidden_functions::realloc(memblock, size);\n+    rc = permit_forbidden_function::realloc(memblock, size);\n@@ -783,1 +783,1 @@\n-  permit_forbidden_functions::free(old_outer_ptr);\n+  permit_forbidden_function::free(old_outer_ptr);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,0 @@\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n@@ -100,4 +99,5 @@\n-\/\/ The variants with IMPORTED in the name are to deal with Windows requirements.\n-\/\/ See the Visual Studio definitions for more details.  The default definitions\n-\/\/ provided here don't do anything additional and just expand to a non-IMPORTED\n-\/\/ variant.\n+\/\/ The variants with IMPORTED in the name are to deal with Windows\n+\/\/ requirements, using FORBIDDEN_FUNCTION_IMPORT_SPEC.  See the Visual\n+\/\/ Studio definition of that macro for more details.  The default has\n+\/\/ an empty expansion.  The potentially added spec must precede the\n+\/\/ base signature but follow all attributes.\n@@ -106,3 +106,2 @@\n-\/\/ definition for more details.  The default definition provided here expands\n-\/\/ to the non-NORETURN variant with a `[[noreturn]]` attribute added to the\n-\/\/ signature.\n+\/\/ definition of FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE for more\n+\/\/ details.  The default expands to `[[noreturn]]`.\n@@ -112,3 +111,2 @@\n-#ifndef FORBID_IMPORTED_C_FUNCTION\n-#define FORBID_IMPORTED_C_FUNCTION(Signature, Alternative) \\\n-  FORBID_C_FUNCTION(Signature, Alternative)\n+#ifndef FORBIDDEN_FUNCTION_IMPORT_SPEC\n+#define FORBIDDEN_FUNCTION_IMPORT_SPEC\n@@ -117,3 +115,2 @@\n-#ifndef FORBID_NORETURN_C_FUNCTION\n-#define FORBID_NORETURN_C_FUNCTION(Signature, Alternative) \\\n-  FORBID_C_FUNCTION([[noreturn]] Signature, Alternative)\n+#ifndef FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE\n+#define FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE [[noreturn]]\n@@ -122,1 +119,6 @@\n-#ifndef FORBID_IMPORTED_NORETURN_C_FUNCTION\n+#define FORBID_IMPORTED_C_FUNCTION(Signature, Alternative) \\\n+  FORBID_C_FUNCTION(FORBIDDEN_FUNCTION_IMPORT_SPEC Signature, Alternative)\n+\n+#define FORBID_NORETURN_C_FUNCTION(Signature, Alternative) \\\n+  FORBID_C_FUNCTION(FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE Signature, Alternative)\n+\n@@ -124,2 +126,1 @@\n-  FORBID_NORETURN_C_FUNCTION(Signature, Alternative)\n-#endif\n+  FORBID_NORETURN_C_FUNCTION(FORBIDDEN_FUNCTION_IMPORT_SPEC Signature, Alternative)\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings.hpp","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,7 +76,34 @@\n-\/\/ This variant of FORBID_C_FUNCTION overrides the default variant.  Clang\n-\/\/ seems to make a distinction between [[noreturn]] and the old-style noreturn\n-\/\/ attribute.  For example, if <stdlib.h> has already been included, using\n-\/\/ [[noreturn]] when forbidding exit(int) gives \"error: 'noreturn' attribute\n-\/\/ does not appear on the first declaration\", with the previous declaration\n-\/\/ reported as being \"void exit(int) __dead2;\". __dead2 is an old-style\n-\/\/ noreturn attribute.\n+\/\/ This macro is used by the NORETURN variants of FORBID_C_FUNCTION.\n+\/\/\n+\/\/ The [[noreturn]] attribute requires that the first declaration of a\n+\/\/ function has it if any have it.  clang does not treat an old-style noreturn\n+\/\/ attribute on the first declaration as meeting that requirement.  But some\n+\/\/ libraries use old-style noreturn attributes.  So if we use [[noreturn]] in\n+\/\/ the forbidding declaration, but the library header for the function has\n+\/\/ already been included, we get a compiler error.  Similarly, if we use an\n+\/\/ old-style noreturn attribute and the library header is included after the\n+\/\/ forbidding declaration.\n+\/\/\n+\/\/ For now, we're only going to worry about the standard library, and not\n+\/\/ noreturn functions in some other library that we might want to forbid in\n+\/\/ the future.  If there's more than one library to be accounted for, then\n+\/\/ things may get more complicated.\n+\/\/\n+\/\/ There are several ways we could deal with this.\n+\/\/\n+\/\/ Probably the most robust is to use the same style of noreturn attribute as\n+\/\/ is used by the library providing the function.  That way it doesn't matter\n+\/\/ in which order the inclusion of the library header and the forbidding are\n+\/\/ performed.  We could use configure to determine which to use and provide a\n+\/\/ macro to select on here.\n+\/\/\n+\/\/ Another approach is to always use the old-style attribute in the forbidding\n+\/\/ declaration, but ensure the relevant library header has been included\n+\/\/ before the forbidding declaration.  Since there are currently only a couple\n+\/\/ of affected functions, this is easier to implement.  So this is the\n+\/\/ approach being taken for now.\n+\/\/\n+\/\/ And remember, all of this is because clang treats an old-style noreturn\n+\/\/ attribute as not counting toward the [[noreturn]] requirement that the\n+\/\/ first declaration must have a noreturn attribute.\n+\n@@ -84,2 +111,1 @@\n-#define FORBID_NORETURN_C_FUNCTION(Signature, Alternative) \\\n-  FORBID_C_FUNCTION(__attribute__((__noreturn__)) Signature, Alternative)\n+#define FORBIDDEN_FUNCTION_NORETURN_ATTRIBUTE __attribute__((__noreturn__))\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_gcc.hpp","additions":36,"deletions":10,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,5 +35,7 @@\n-\/\/ These variants of FORBID_C_FUNCTION override the default definitions.  They\n-\/\/ add `__declspec(dllimport)` to the signature.  Failure to do so where\n-\/\/ needed leads to \"redefinition; different linkage\" errors for the forbidding\n-\/\/ declaration. Including a dllimport specifier here if not present in the\n-\/\/ compiler's header leads to the same errors.  It seems one just must know\n+\/\/ This macro is used by the IMPORTED variants of FORBID_C_FUNCTION.\n+\/\/\n+\/\/ Some, but not all, functions we want to forbid using must include a\n+\/\/ `__declspec(dllimport)` in the declaration.  Failure to do so where needed\n+\/\/ leads to \"redefinition; different linkage\" errors for the forbidding\n+\/\/ declaration. But including a dllimport specifier if not present in the\n+\/\/ compiler's header leads to the same errors.  It seems one must just know\n@@ -42,5 +44,1 @@\n-#define FORBID_IMPORTED_C_FUNCTION(Signature, Alternative) \\\n-  FORBID_C_FUNCTION(__declspec(dllimport) Signature, Alternative)\n-\n-#define FORBID_IMPORTED_NORETURN_C_FUNCTION(Signature, Alternative) \\\n-  FORBID_NORETURN_C_FUNCTION(__declspec(dllimport) Signature, Alternative)\n+#define FORBIDDEN_FUNCTION_IMPORT_SPEC __declspec(dllimport)\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_visCPP.hpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+#include <stdlib.h> \/\/ clang workaround for exit, _exit - see FORBID macro.\n","filename":"src\/hotspot\/share\/utilities\/forbiddenFunctions.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-namespace permit_forbidden_functions {\n+namespace permit_forbidden_function {\n@@ -65,1 +65,1 @@\n-} \/\/ namespace permit_forbidden_functions\n+} \/\/ namespace permit_forbidden_function\n","filename":"src\/hotspot\/share\/utilities\/permitForbiddenFunctions.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/code\/test_codestrings.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahNumberSeq.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,1 +197,1 @@\n-  char** new_argv = (char**)permit_forbidden_functions::malloc(sizeof(char*) * argc);\n+  char** new_argv = (char**)permit_forbidden_function::malloc(sizeof(char*) * argc);\n@@ -293,1 +293,1 @@\n-  permit_forbidden_functions::free(argv);\n+  permit_forbidden_function::free(argv);\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/unittest.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}