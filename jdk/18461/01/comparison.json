{"files":[{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4784285 4785920\n+ * @key printer\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary check whether Print- and Page- dialogs are modal and correct window\n+ *  activated after their closing\n+ * @run main\/manual PrinterDialogsModalityTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.FlowLayout;\n+import java.awt.print.PageFormat;\n+import java.awt.print.PrinterJob;\n+\n+import javax.swing.JFrame;\n+\n+public class PrinterDialogsModalityTest {\n+    private static final String INSTRUCTIONS =\n+            \"\"\"\n+             After the test starts, you will see a frame titled \"Test Frame\"\n+             with two buttons: \"Page Dialog\" and \"Print Dialog\".\n+             1. Make the \"Test Frame\" active by clicking on title.\n+             2. Press \"Page Dialog\" button and a page dialog should popup.\n+             3. Make sure page dialog is modal. (Modal in this case means that\n+                it blocks the user from interacting with other windows in the\n+                same application, like this instruction window. You may still be\n+                able to interact with unrelated applications on the desktop.).\n+             4. Close the dialog (either cancel it or press ok).\n+             5. Make sure the frame is still active.\n+             6. Press \"Print Dialog\" button, print dialog should popup.\n+             7. Repeat steps 3-5.\n+\n+             If you are able to execute all steps successfully then the test\n+             passes, otherwise it fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame\n+                .builder()\n+                .title(\"PrinterDialogsModalityTest Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testUI(PrinterDialogsModalityTest::init)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame init() {\n+        JFrame frame = new JFrame(\"Test Frame\");\n+        frame.setLayout(new FlowLayout());\n+\n+        Button page = new Button(\"Page Dialog\");\n+        page.addActionListener(e -> {\n+            PrinterJob prnJob = PrinterJob.getPrinterJob();\n+            prnJob.pageDialog(new PageFormat());\n+        });\n+        Button print = new Button(\"Print Dialog\");\n+        print.addActionListener(e -> {\n+            PrinterJob prnJob = PrinterJob.getPrinterJob();\n+            prnJob.printDialog();\n+        });\n+        frame.add(page);\n+        frame.add(print);\n+        frame.pack();\n+        frame.setVisible(true);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrinterDialogsModalityTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -1,43 +0,0 @@\n-<!--\n- Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--  \n-  @test\n-  @bug 4784285 4785920\n-  @key printer\n-  @summary check whether Print- and Page- dialogs are modal and correct window activated after their closing\n-  @run applet\/manual=yesno PrinterDialogsModalityTest.html\n-  -->\n-<head>\n-<title> PrinterDialogsModalityTest <\/title>\n-<\/head>\n-<body>\n-\n-<h1>PrinterDialogsModalityTest<br>Bug ID: 4784285 4785920<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"PrinterDialogsModalityTest.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrinterDialogsModalityTest\/PrinterDialogsModalityTest.html","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,262 +0,0 @@\n-\/*\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  test\n-  @bug 4784285 4785920\n-  @key printer\n-  @summary check whether Print- and Page- dialogs are modal and correct window activated after their closing\n-  @run applet\/manual=yesno PrinterDialogsModalityTest.html\n-*\/\n-\n-\/**\n- * PrinterDialogsModalityTest.java\n- *\n- * summary: check whether Print- and Page- dialogs are modal and correct window activated after their closing\n- *\/\n-\n-import java.applet.Applet;\n-\n-import java.awt.BorderLayout;\n-import java.awt.Button;\n-import java.awt.Dialog;\n-import java.awt.FlowLayout;\n-import java.awt.Frame;\n-import java.awt.TextArea;\n-\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n-\n-import java.awt.print.PageFormat;\n-import java.awt.print.PrinterJob;\n-\n-public class PrinterDialogsModalityTest extends Applet\n-{\n-    \/\/Declare things used in the test, like buttons and labels here\n-\n-    public void init()\n-    {\n-        \/\/Create instructions for the user here, as well as set up\n-        \/\/ the environment -- set the layout manager, add buttons,\n-        \/\/ etc.\n-        this.setLayout (new BorderLayout ());\n-\n-        String[] instructions =\n-        {\n-            \"This is a Windows only test, for other platforms consider it passed\",\n-            \"After test start you will see frame titled \\\"test Frame\\\"\",\n-            \"with two buttons - \\\"Page Dialog\\\" and \\\"Print Dialog\\\"\",\n-            \"1. make the frame active by clicking on title\",\n-            \"2. press \\\"Page Dialog\\\" button, page dailog should popup\",\n-            \"3. make sure page dialog is modal (if not test is failed)\",\n-            \"4. close the dialog (either cancel it or press ok)\",\n-            \"5. make sure the frame is still active (if not test is failed)\",\n-            \"6. press \\\"Print Dialog\\\" button, print dialog should popup\",\n-            \"7. repeat steps 3.-5.\",\n-            \"\",\n-            \"If you are able to execute all steps successfully then test is passed, else failed.\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n-\n-    }\/\/End  init()\n-\n-    public void start ()\n-    {\n-        \/\/Get things going.  Request focus, set size, et cetera\n-        setSize (200,200);\n-        setVisible(true);\n-        validate();\n-\n-        Button page = new Button(\"Page Dialog\");\n-        page.addActionListener(new ActionListener() {\n-                public void actionPerformed(ActionEvent e) {\n-                    PrinterJob prnJob = PrinterJob.getPrinterJob();\n-                    prnJob.pageDialog(new PageFormat());\n-                }\n-            });\n-        Button print = new Button(\"Print Dialog\");\n-        print.addActionListener(new ActionListener() {\n-                public void actionPerformed(ActionEvent e) {\n-                    PrinterJob prnJob = PrinterJob.getPrinterJob();\n-                    prnJob.printDialog();\n-                }\n-            });\n-        Frame frame = new Frame(\"Test Frame\");\n-        frame.setLayout(new FlowLayout());\n-        frame.add(page);\n-        frame.add(print);\n-        frame.setLocation(200, 200);\n-        frame.pack();\n-        frame.setVisible(true);\n-\n-    }\/\/ start()\n-\n-    \/\/The rest of this class is the actions which perform the test...\n-\n-    \/\/Use Sysout.println to communicate with the user NOT System.out!!\n-    \/\/Sysout.println (\"Something Happened!\");\n-\n-}\/\/ class PrinterDialogsModalityTest\n-\n-\/* Place other classes related to the test after this line *\/\n-\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrinterDialogsModalityTest\/PrinterDialogsModalityTest.java","additions":0,"deletions":262,"binary":false,"changes":262,"status":"deleted"}]}