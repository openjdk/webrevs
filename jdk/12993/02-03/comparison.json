{"files":[{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.*;\n+import java.awt.geom.RoundRectangle2D;\n+import java.awt.image.BufferedImage;\n+import java.util.concurrent.Semaphore;\n+\n+import javax.swing.JComponent;\n+import javax.swing.SwingUtilities;\n+import javax.swing.*;\n+import javax.swing.border.EmptyBorder;\n+import javax.swing.plaf.PanelUI;\n+\n+\/* @test\n+ * @bug 8303950\n+ * @summary this codifies the preexisting behavior for Window\/JRootPane backgrounds. I want to be sure the resolution\n+ *          to 8303950 does not alter this behavior.\n+ * @author Jeremy Wood\n+ *\/\n+public class bug8303950_legacyWindowPaintBehavior {\n+\n+    private static Color WINDOW_BACKGROUND = Color.red;\n+    private static Color ROOTPANE_BACKGROUND = Color.blue;\n+\n+    public static void main(String[] args) throws Exception {\n+        Semaphore semaphore = new Semaphore(1);\n+        semaphore.acquireUninterruptibly();\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                UIManager.getDefaults().put(\"Panel.background\", Color.green);\n+\n+                int x = 0;\n+                int y = 0;\n+\n+                GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();\n+                Insets i = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n+                x += i.left;\n+                y += i.top;\n+\n+                Window w1 = createWindow( WINDOW_BACKGROUND, null, x, y, 400, 400, false, \"window 1\");\n+                Window w2 = createWindow( WINDOW_BACKGROUND, ROOTPANE_BACKGROUND, x + 400, y, 400, 400, false, \"window 2\");\n+                Window w3 = createWindow( WINDOW_BACKGROUND, null, x, y + 400, 400, 400, true, \"window 3\");\n+                Window w4 =  createWindow( WINDOW_BACKGROUND, ROOTPANE_BACKGROUND, x + 400, y + 400, 400, 400, true, \"window 4\");\n+\n+                SwingUtilities.invokeLater(new Runnable() {\n+                    int ctr = 0;\n+                    boolean failed = false;\n+                    @Override\n+                    public void run() {\n+                        while (ctr++ < 100_000) {\n+                            SwingUtilities.invokeLater(this);\n+                            return;\n+                        }\n+\n+                        try {\n+                            Robot robot = new Robot();\n+                            testColor(robot, w1, Color.green);\n+                            testColor(robot, w2, Color.green);\n+                            testColor(robot, w3, Color.red);\n+                            testColor(robot, w4, Color.blue);\n+                        } catch (AWTException e) {\n+                            throw new RuntimeException(e);\n+                        } finally {\n+                            if (failed)\n+                                System.exit(1);\n+                            semaphore.release();\n+                        }\n+                    }\n+\n+                    private void testColor(Robot robot, Window window, Color expectedColor) {\n+                        Color actual = robot.getPixelColor(window.getLocationOnScreen().x + window.getWidth() \/ 2, window.getLocationOnScreen().y + window.getHeight() \/ 2);\n+                        if (Math.abs(actual.getRed() - expectedColor.getRed()) > 150 ||\n+                                Math.abs(actual.getGreen() - expectedColor.getGreen()) > 150 ||\n+                                Math.abs(actual.getBlue() - expectedColor.getBlue()) > 150) {\n+                            System.err.println(\"name = \\\"\" + window.getName() + \"\\\" expected = \" + expectedColor + \", actual = \" + actual);\n+                            failed = true;\n+                        }\n+                    }\n+                });\n+            }\n+        });\n+        semaphore.acquireUninterruptibly();\n+    }\n+\n+    private static JWindow createWindow(Color windowBackground, Color rootPaneBackground, int x, int y, int w, int h, boolean translucent, String name) {\n+        JWindow window = new JWindow();\n+        window.setName(name);\n+        if (translucent) {\n+            windowBackground = new Color(windowBackground.getRed(), windowBackground.getGreen(), windowBackground.getBlue(), 128);\n+            if (rootPaneBackground != null)\n+                rootPaneBackground = new Color(rootPaneBackground.getRed(), rootPaneBackground.getGreen(), rootPaneBackground.getBlue(), 128);\n+        }\n+        window.setBackground(windowBackground);\n+        if (rootPaneBackground != null)\n+            window.getRootPane().setBackground(rootPaneBackground);\n+\n+        window.getContentPane().setLayout(new BorderLayout());\n+        JTextArea text = new JTextArea(\"translucent = \" + translucent+\"\\nrootPaneBackground = \" + rootPaneBackground);\n+        text.setOpaque(false);\n+        text.setEditable(false);\n+        window.getContentPane().add(text, BorderLayout.NORTH);\n+\n+        window.pack();\n+        window.setBounds(x,y,w,h);\n+        window.setVisible(true);\n+\n+        return window;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/RepaintManager\/8303950\/bug8303950_legacyWindowPaintBehavior.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"}]}