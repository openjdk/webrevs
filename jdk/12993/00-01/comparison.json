{"files":[{"patch":"@@ -3951,6 +3951,4 @@\n-                if (gg instanceof Graphics2D gg2d) {\n-                    if (!SunHints.VALUE_PAINT_WINDOW_BACKGROUND_OFF.equals(gg2d.getRenderingHint(SunHints.KEY_PAINT_WINDOW_BACKGROUND_COLOR))) {\n-                        gg2d.setColor(getBackground());\n-                        gg2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));\n-                        gg2d.fillRect(0, 0, getWidth(), getHeight());\n-                    }\n+                if (gg instanceof Graphics2D) {\n+                    gg.setColor(getBackground());\n+                    ((Graphics2D) gg).setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));\n+                    gg.fillRect(0, 0, getWidth(), getHeight());\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Window.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import sun.awt.SunHints;\n@@ -890,5 +889,0 @@\n-                                if (g instanceof Graphics2D g2d) {\n-                                    \/\/ If Window#paint(Graphics) fills its background color we may see flickering\n-                                    g2d.setRenderingHint(SunHints.KEY_PAINT_WINDOW_BACKGROUND_COLOR, SunHints.VALUE_PAINT_WINDOW_BACKGROUND_OFF);\n-                                }\n-\n@@ -896,1 +890,4 @@\n-                                    dirtyComponent.paint(g);\n+                                    AWTPaintManager<Component> pm = new AWTPaintManager<Component>();\n+                                    pm.repaintManager = RepaintManager.this;\n+                                    pm.paint(dirtyComponent, dirtyComponent, g,\n+                                            rect.x, rect.y, rect.width, rect.height);\n@@ -1525,7 +1522,1 @@\n-\n-    \/**\n-     * PaintManager is used to handle all double buffered painting for\n-     * Swing.  Subclasses should call back into the JComponent method\n-     * <code>paintToOffscreen<\/code> to handle the actual painting.\n-     *\/\n-    static class PaintManager {\n+    static class AWTPaintManager<T extends Component> {\n@@ -1536,1 +1527,0 @@\n-        boolean isRepaintingRoot;\n@@ -1550,2 +1540,2 @@\n-        public boolean paint(JComponent paintingComponent,\n-                             JComponent bufferComponent, Graphics g,\n+        public boolean paint(T paintingComponent,\n+                             T bufferComponent, Graphics g,\n@@ -1562,2 +1552,2 @@\n-                (offscreen = getValidImage(repaintManager.\n-                getVolatileOffscreenBuffer(bufferComponent, sw, sh))) != null) {\n+                    (offscreen = getValidImage(repaintManager.\n+                            getVolatileOffscreenBuffer(bufferComponent, sw, sh))) != null) {\n@@ -1566,1 +1556,1 @@\n-                                            getGraphicsConfiguration();\n+                        getGraphicsConfiguration();\n@@ -1568,1 +1558,1 @@\n-                         i < RepaintManager.VOLATILE_LOOP_MAX; i++) {\n+                        i < RepaintManager.VOLATILE_LOOP_MAX; i++) {\n@@ -1570,1 +1560,1 @@\n-                                   VolatileImage.IMAGE_INCOMPATIBLE) {\n+                            VolatileImage.IMAGE_INCOMPATIBLE) {\n@@ -1573,1 +1563,1 @@\n-                            bufferComponent, sw, sh);\n+                                bufferComponent, sw, sh);\n@@ -1577,1 +1567,1 @@\n-                                        w, h);\n+                            w, h);\n@@ -1584,2 +1574,2 @@\n-                      repaintManager.getOffscreenBuffer(\n-                      bufferComponent, w, h))) != null) {\n+                    repaintManager.getOffscreenBuffer(\n+                            bufferComponent, w, h))) != null) {\n@@ -1587,1 +1577,1 @@\n-                                    h);\n+                        h);\n@@ -1593,36 +1583,0 @@\n-        \/**\n-         * Does a copy area on the specified region.\n-         *\/\n-        public void copyArea(JComponent c, Graphics g, int x, int y, int w,\n-                             int h, int deltaX, int deltaY, boolean clip) {\n-            g.copyArea(x, y, w, h, deltaX, deltaY);\n-        }\n-\n-        \/**\n-         * Invoked prior to any calls to paint or copyArea.\n-         *\/\n-        public void beginPaint() {\n-        }\n-\n-        \/**\n-         * Invoked to indicate painting has been completed.\n-         *\/\n-        public void endPaint() {\n-        }\n-\n-        \/**\n-         * Shows a region of a previously rendered component.  This\n-         * will return true if successful, false otherwise.  The default\n-         * implementation returns false.\n-         *\/\n-        public boolean show(Container c, int x, int y, int w, int h) {\n-            return false;\n-        }\n-\n-        \/**\n-         * Invoked when the doubleBuffered or useTrueDoubleBuffering\n-         * properties of a JRootPane change.  This may come in on any thread.\n-         *\/\n-        public void doubleBufferingChanged(JRootPane rootPane) {\n-        }\n-\n@@ -1632,3 +1586,3 @@\n-        protected void paintDoubleBuffered(JComponent c, Image image,\n-                Graphics g, int clipX, int clipY,\n-                int clipW, int clipH) {\n+        protected void paintDoubleBuffered(T c, Image image,\n+                                           Graphics g, int clipX, int clipY,\n+                                           int clipW, int clipH) {\n@@ -1642,1 +1596,1 @@\n-        private void paintDoubleBufferedImpl(JComponent c, Image image,\n+        private void paintDoubleBufferedImpl(T c, Image image,\n@@ -1663,1 +1617,5 @@\n-                        c.paintToOffscreen(osg, x, y, bw, bh, maxx, maxy);\n+                        if (c instanceof JComponent jc) {\n+                            jc.paintToOffscreen(osg, x, y, bw, bh, maxx, maxy);\n+                        } else {\n+                            c.paint(osg);\n+                        }\n@@ -1683,1 +1641,1 @@\n-        private void paintDoubleBufferedFPScales(JComponent c, Image image,\n+        private void paintDoubleBufferedFPScales(Component c, Image image,\n@@ -1727,1 +1685,5 @@\n-                        c.paintToOffscreen(osg, x, y, bw, bh, maxx, maxy);\n+                        if (c instanceof JComponent jc) {\n+                            jc.paintToOffscreen(osg, x, y, bw, bh, maxx, maxy);\n+                        } else {\n+                            c.paint(osg);\n+                        }\n@@ -1759,1 +1721,1 @@\n-                                 image.getHeight(null) > 0) {\n+                    image.getHeight(null) > 0) {\n@@ -1765,0 +1727,70 @@\n+        private boolean isPixelsCopying(T c, Graphics g) {\n+\n+            AffineTransform tx = getTransform(g);\n+            GraphicsConfiguration gc = c.getGraphicsConfiguration();\n+\n+            if (tx == null || gc == null\n+                    || !SwingUtilities2.isFloatingPointScale(tx)) {\n+                return false;\n+            }\n+\n+            AffineTransform gcTx = gc.getDefaultTransform();\n+\n+            return gcTx.getScaleX() == tx.getScaleX()\n+                    && gcTx.getScaleY() == tx.getScaleY();\n+        }\n+\n+        private static AffineTransform getTransform(Graphics g) {\n+            if (g instanceof SunGraphics2D) {\n+                return ((SunGraphics2D) g).transform;\n+            } else if (g instanceof Graphics2D) {\n+                return ((Graphics2D) g).getTransform();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    \/**\n+     * PaintManager is used to handle all double buffered painting for\n+     * Swing.  Subclasses should call back into the JComponent method\n+     * <code>paintToOffscreen<\/code> to handle the actual painting.\n+     *\/\n+    static class PaintManager extends AWTPaintManager<JComponent> {\n+        boolean isRepaintingRoot;\n+\n+        \/**\n+         * Does a copy area on the specified region.\n+         *\/\n+        public void copyArea(JComponent c, Graphics g, int x, int y, int w,\n+                             int h, int deltaX, int deltaY, boolean clip) {\n+            g.copyArea(x, y, w, h, deltaX, deltaY);\n+        }\n+\n+        \/**\n+         * Invoked prior to any calls to paint or copyArea.\n+         *\/\n+        public void beginPaint() {\n+        }\n+\n+        \/**\n+         * Invoked to indicate painting has been completed.\n+         *\/\n+        public void endPaint() {\n+        }\n+\n+        \/**\n+         * Shows a region of a previously rendered component.  This\n+         * will return true if successful, false otherwise.  The default\n+         * implementation returns false.\n+         *\/\n+        public boolean show(Container c, int x, int y, int w, int h) {\n+            return false;\n+        }\n+\n+        \/**\n+         * Invoked when the doubleBuffered or useTrueDoubleBuffering\n+         * properties of a JRootPane change.  This may come in on any thread.\n+         *\/\n+        public void doubleBufferingChanged(JRootPane rootPane) {\n+        }\n+\n@@ -1795,25 +1827,0 @@\n-\n-        private boolean isPixelsCopying(JComponent c, Graphics g) {\n-\n-            AffineTransform tx = getTransform(g);\n-            GraphicsConfiguration gc = c.getGraphicsConfiguration();\n-\n-            if (tx == null || gc == null\n-                    || !SwingUtilities2.isFloatingPointScale(tx)) {\n-                return false;\n-            }\n-\n-            AffineTransform gcTx = gc.getDefaultTransform();\n-\n-            return gcTx.getScaleX() == tx.getScaleX()\n-                    && gcTx.getScaleY() == tx.getScaleY();\n-        }\n-\n-        private static AffineTransform getTransform(Graphics g) {\n-            if (g instanceof SunGraphics2D) {\n-                return ((SunGraphics2D) g).transform;\n-            } else if (g instanceof Graphics2D) {\n-                return ((Graphics2D) g).getTransform();\n-            }\n-            return null;\n-        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java","additions":103,"deletions":96,"binary":false,"changes":199,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-    private static final int NUM_KEYS = 11;\n+    private static final int NUM_KEYS = 10;\n@@ -264,7 +264,0 @@\n-    \/**\n-     * Paint window background color hint key and values\n-     *\/\n-    @Native public static final int INTKEY_PAINT_WINDOW_BACKGROUND_COLOR = 10;\n-    @Native public static final int INTVAL_PAINT_WINDOW_BACKGROUND_COLOR_ON = 0;\n-    @Native public static final int INTVAL_PAINT_WINDOW_BACKGROUND_COLOR_OFF = 1;\n-\n@@ -523,15 +516,0 @@\n-\n-    \/**\n-     * Paint window background color key and value objects\n-     *\/\n-    public static final Key KEY_PAINT_WINDOW_BACKGROUND_COLOR =\n-            new SunHints.Key(SunHints.INTKEY_PAINT_WINDOW_BACKGROUND_COLOR,\n-                    \"Paint window background color\");\n-    public static final Object VALUE_PAINT_WINDOW_BACKGROUND_ON =\n-            new SunHints.Value(KEY_PAINT_WINDOW_BACKGROUND_COLOR,\n-                    SunHints.INTVAL_PAINT_WINDOW_BACKGROUND_COLOR_ON,\n-                    \"Paint window background color\");\n-    public static final Object VALUE_PAINT_WINDOW_BACKGROUND_OFF =\n-            new SunHints.Value(KEY_PAINT_WINDOW_BACKGROUND_COLOR,\n-                    SunHints.INTVAL_PAINT_WINDOW_BACKGROUND_COLOR_OFF,\n-                    \"Do not paint window background color\");\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/SunHints.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"}]}