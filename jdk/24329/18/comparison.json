{"files":[{"patch":"@@ -38,2 +38,1 @@\n-#define VM_TYPES_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type) \\\n-  declare_toplevel_type(VM_Version)\n+#define VM_TYPES_CPU(declare_type, declare_toplevel_type, declare_oop_type, declare_integer_type, declare_unsigned_integer_type)\n","filename":"src\/hotspot\/cpu\/aarch64\/vmStructs_aarch64.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,2 +32,5 @@\n-#define VM_STRUCTS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field)            \\\n-  volatile_nonstatic_field(JavaFrameAnchor, _last_Java_fp, intptr_t*)\n+#define VM_STRUCTS_CPU(nonstatic_field, static_field, unchecked_nonstatic_field, volatile_nonstatic_field, nonproduct_nonstatic_field) \\\n+  volatile_nonstatic_field(JavaFrameAnchor,         _last_Java_fp,                  intptr_t*)               \\\n+              static_field(VM_Version,              _features,                      VM_Version::VM_Features) \\\n+           nonstatic_field(VM_Version::VM_Features, _features_bitmap[0],            uint64_t)                \\\n+              static_field(VM_Version::VM_Features, _features_bitmap_size,          int)\n@@ -36,0 +39,1 @@\n+  declare_toplevel_type(VM_Version::VM_Features)\n@@ -38,3 +42,4 @@\n-  LP64_ONLY(declare_constant(frame::arg_reg_save_area_bytes))       \\\n-  declare_constant(frame::interpreter_frame_sender_sp_offset)       \\\n-  declare_constant(frame::interpreter_frame_last_sp_offset)\n+  declare_constant(frame::arg_reg_save_area_bytes)            \\\n+  declare_constant(frame::interpreter_frame_sender_sp_offset) \\\n+  declare_constant(frame::interpreter_frame_last_sp_offset)   \\\n+  declare_constant(frame::entry_frame_call_wrapper_offset)\n","filename":"src\/hotspot\/cpu\/x86\/vmStructs_x86.hpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -66,0 +66,5 @@\n+int VM_Version::VM_Features::_features_bitmap_size = sizeof(VM_Version::VM_Features::_features_bitmap) \/ BytesPerLong;\n+\n+VM_Version::VM_Features VM_Version::_features;\n+VM_Version::VM_Features VM_Version::_cpu_features;\n+\n@@ -85,1 +90,1 @@\n-  assert ((!Universe::is_fully_initialized() || (_features & CPU_FLUSH) != 0), \"clflush should be available\");\n+  assert ((!Universe::is_fully_initialized() || _features.supports_feature(CPU_FLUSH)), \"clflush should be available\");\n@@ -136,1 +141,1 @@\n-    Label detect_486, cpu486, detect_586, std_cpuid1, std_cpuid4;\n+    Label detect_486, cpu486, detect_586, std_cpuid1, std_cpuid4, std_cpuid24;\n@@ -335,0 +340,11 @@\n+    \/\/\n+    \/\/ cpuid(0x24) Converged Vector ISA Main Leaf (EAX = 24H, ECX = 0).\n+    \/\/\n+    __ bind(std_cpuid24);\n+    __ movl(rax, 0x24);\n+    __ movl(rcx, 0);\n+    __ cpuid();\n+    __ lea(rsi, Address(rbp, in_bytes(VM_Version::std_cpuid24_offset())));\n+    __ movl(Address(rsi, 0), rax);\n+    __ movl(Address(rsi, 4), rbx);\n+\n@@ -421,2 +437,1 @@\n-    __ cmpl(rax, 0x200000);\n-    __ jcc(Assembler::notEqual, vector_save_restore);\n+    __ jcc(Assembler::equal, vector_save_restore);\n@@ -426,2 +441,1 @@\n-    __ cmpl(rax, 0x80000);\n-    __ jcc(Assembler::notEqual, vector_save_restore);\n+    __ jcc(Assembler::equal, vector_save_restore);\n@@ -480,0 +494,1 @@\n+      \/\/ OR check _cpuid_info.std_cpuid24_ebx.bits.avx10\n@@ -482,3 +497,6 @@\n-      __ andl(rax, Address(rsi, 4)); \/\/ xcr0 bits sse | ymm\n-      __ cmpl(rax, 0x10000);\n-      __ jccb(Assembler::notEqual, legacy_setup); \/\/ jump if EVEX is not supported\n+      __ andl(rax, Address(rsi, 4));\n+      __ lea(rsi, Address(rbp, in_bytes(VM_Version::sefsl1_cpuid7_offset())));\n+      __ movl(rbx, 0x80000);\n+      __ andl(rbx, Address(rsi, 4));\n+      __ orl(rax, rbx);\n+      __ jccb(Assembler::equal, legacy_setup); \/\/ jump if EVEX is not supported\n@@ -565,2 +583,1 @@\n-      __ cmpl(rax, 0x10000);\n-      __ jcc(Assembler::notEqual, legacy_save_restore);\n+      __ jcc(Assembler::equal, legacy_save_restore);\n@@ -838,1 +855,0 @@\n-  _features = 0;\n@@ -854,1 +870,1 @@\n-    _cpu_features = _features;   \/\/ Preserve features\n+    _cpu_features = _features; \/\/ Preserve features\n@@ -903,2 +919,2 @@\n-    _features &= ~CPU_SSE4_1;\n-    _features &= ~CPU_SSE4_2;\n+    _features.clear_feature(CPU_SSE4_1);\n+    _features.clear_feature(CPU_SSE4_2);\n@@ -908,3 +924,3 @@\n-    _features &= ~CPU_SSE3;\n-    _features &= ~CPU_SSSE3;\n-    _features &= ~CPU_SSE4A;\n+    _features.clear_feature(CPU_SSE3);\n+    _features.clear_feature(CPU_SSSE3);\n+    _features.clear_feature(CPU_SSE4A);\n@@ -914,1 +930,1 @@\n-    _features &= ~CPU_SSE2;\n+    _features.clear_feature(CPU_SSE2);\n@@ -917,1 +933,1 @@\n-    _features &= ~CPU_SSE;\n+    _features.clear_feature(CPU_SSE);\n@@ -983,15 +999,19 @@\n-    _features &= ~CPU_AVX512F;\n-    _features &= ~CPU_AVX512DQ;\n-    _features &= ~CPU_AVX512CD;\n-    _features &= ~CPU_AVX512BW;\n-    _features &= ~CPU_AVX512VL;\n-    _features &= ~CPU_AVX512_VPOPCNTDQ;\n-    _features &= ~CPU_AVX512_VPCLMULQDQ;\n-    _features &= ~CPU_AVX512_VAES;\n-    _features &= ~CPU_AVX512_VNNI;\n-    _features &= ~CPU_AVX512_VBMI;\n-    _features &= ~CPU_AVX512_VBMI2;\n-    _features &= ~CPU_AVX512_BITALG;\n-    _features &= ~CPU_AVX512_IFMA;\n-    _features &= ~CPU_APX_F;\n-    _features &= ~CPU_AVX512_FP16;\n+    _features.clear_feature(CPU_AVX512F);\n+    _features.clear_feature(CPU_AVX512DQ);\n+    _features.clear_feature(CPU_AVX512CD);\n+    _features.clear_feature(CPU_AVX512BW);\n+    _features.clear_feature(CPU_AVX512ER);\n+    _features.clear_feature(CPU_AVX512PF);\n+    _features.clear_feature(CPU_AVX512VL);\n+    _features.clear_feature(CPU_AVX512_VPOPCNTDQ);\n+    _features.clear_feature(CPU_AVX512_VPCLMULQDQ);\n+    _features.clear_feature(CPU_AVX512_VAES);\n+    _features.clear_feature(CPU_AVX512_VNNI);\n+    _features.clear_feature(CPU_AVX512_VBMI);\n+    _features.clear_feature(CPU_AVX512_VBMI2);\n+    _features.clear_feature(CPU_AVX512_BITALG);\n+    _features.clear_feature(CPU_AVX512_IFMA);\n+    _features.clear_feature(CPU_APX_F);\n+    _features.clear_feature(CPU_AVX512_FP16);\n+    _features.clear_feature(CPU_AVX10_1);\n+    _features.clear_feature(CPU_AVX10_2);\n@@ -1010,1 +1030,1 @@\n-    _features &= ~CPU_APX_F;\n+    _features.clear_feature(CPU_APX_F);\n@@ -1014,2 +1034,2 @@\n-    _features &= ~CPU_AVX2;\n-    _features &= ~CPU_AVX_IFMA;\n+    _features.clear_feature(CPU_AVX2);\n+    _features.clear_feature(CPU_AVX_IFMA);\n@@ -1019,4 +1039,4 @@\n-    _features &= ~CPU_AVX;\n-    _features &= ~CPU_VZEROUPPER;\n-    _features &= ~CPU_F16C;\n-    _features &= ~CPU_SHA512;\n+    _features.clear_feature(CPU_AVX);\n+    _features.clear_feature(CPU_VZEROUPPER);\n+    _features.clear_feature(CPU_F16C);\n+    _features.clear_feature(CPU_SHA512);\n@@ -1027,1 +1047,1 @@\n-    _features &= ~CPU_HT;\n+    _features.clear_feature(CPU_HT);\n@@ -1032,17 +1052,17 @@\n-      _features &= ~CPU_VZEROUPPER;\n-      _features &= ~CPU_AVX512BW;\n-      _features &= ~CPU_AVX512VL;\n-      _features &= ~CPU_AVX512DQ;\n-      _features &= ~CPU_AVX512_VNNI;\n-      _features &= ~CPU_AVX512_VAES;\n-      _features &= ~CPU_AVX512_VPOPCNTDQ;\n-      _features &= ~CPU_AVX512_VPCLMULQDQ;\n-      _features &= ~CPU_AVX512_VBMI;\n-      _features &= ~CPU_AVX512_VBMI2;\n-      _features &= ~CPU_CLWB;\n-      _features &= ~CPU_FLUSHOPT;\n-      _features &= ~CPU_GFNI;\n-      _features &= ~CPU_AVX512_BITALG;\n-      _features &= ~CPU_AVX512_IFMA;\n-      _features &= ~CPU_AVX_IFMA;\n-      _features &= ~CPU_AVX512_FP16;\n+      _features.clear_feature(CPU_VZEROUPPER);\n+      _features.clear_feature(CPU_AVX512BW);\n+      _features.clear_feature(CPU_AVX512VL);\n+      _features.clear_feature(CPU_AVX512DQ);\n+      _features.clear_feature(CPU_AVX512_VNNI);\n+      _features.clear_feature(CPU_AVX512_VAES);\n+      _features.clear_feature(CPU_AVX512_VPOPCNTDQ);\n+      _features.clear_feature(CPU_AVX512_VPCLMULQDQ);\n+      _features.clear_feature(CPU_AVX512_VBMI);\n+      _features.clear_feature(CPU_AVX512_VBMI2);\n+      _features.clear_feature(CPU_CLWB);\n+      _features.clear_feature(CPU_FLUSHOPT);\n+      _features.clear_feature(CPU_GFNI);\n+      _features.clear_feature(CPU_AVX512_BITALG);\n+      _features.clear_feature(CPU_AVX512_IFMA);\n+      _features.clear_feature(CPU_AVX_IFMA);\n+      _features.clear_feature(CPU_AVX512_FP16);\n@@ -1058,1 +1078,0 @@\n-  assert(supports_cpuid(), \"Always present\");\n@@ -1082,2 +1101,2 @@\n-  char buf[1024];\n-  int cpu_info_size = jio_snprintf(\n+  char buf[2048];\n+  size_t cpu_info_size = jio_snprintf(\n@@ -1089,1 +1108,2 @@\n-  insert_features_names(buf + cpu_info_size, sizeof(buf) - cpu_info_size, _features_names);\n+\n+  insert_features_names(_features, buf + cpu_info_size, sizeof(buf) - cpu_info_size);\n@@ -2091,0 +2111,1 @@\n+\n@@ -2866,2 +2887,2 @@\n-uint64_t VM_Version::CpuidInfo::feature_flags() const {\n-  uint64_t result = 0;\n+VM_Version::VM_Features VM_Version::CpuidInfo::feature_flags() const {\n+  VM_Features vm_features;\n@@ -2869,1 +2890,1 @@\n-    result |= CPU_CX8;\n+    vm_features.set_feature(CPU_CX8);\n@@ -2871,1 +2892,1 @@\n-    result |= CPU_CMOV;\n+    vm_features.set_feature(CPU_CMOV);\n@@ -2873,1 +2894,1 @@\n-    result |= CPU_FLUSH;\n+    vm_features.set_feature(CPU_FLUSH);\n@@ -2877,1 +2898,1 @@\n-  assert ((result & CPU_FLUSH) != 0, \"clflush should be available\");\n+  assert (vm_features.supports_feature(CPU_FLUSH), \"clflush should be available\");\n@@ -2880,1 +2901,1 @@\n-    result |= CPU_FXSR;\n+    vm_features.set_feature(CPU_FXSR);\n@@ -2883,1 +2904,1 @@\n-    result |= CPU_HT;\n+    vm_features.set_feature(CPU_HT);\n@@ -2886,1 +2907,1 @@\n-    result |= CPU_MMX;\n+    vm_features.set_feature(CPU_MMX);\n@@ -2888,1 +2909,1 @@\n-    result |= CPU_SSE;\n+    vm_features.set_feature(CPU_SSE);\n@@ -2890,1 +2911,1 @@\n-    result |= CPU_SSE2;\n+    vm_features.set_feature(CPU_SSE2);\n@@ -2892,1 +2913,1 @@\n-    result |= CPU_SSE3;\n+    vm_features.set_feature(CPU_SSE3);\n@@ -2894,1 +2915,1 @@\n-    result |= CPU_SSSE3;\n+    vm_features.set_feature(CPU_SSSE3);\n@@ -2896,1 +2917,1 @@\n-    result |= CPU_SSE4_1;\n+    vm_features.set_feature(CPU_SSE4_1);\n@@ -2898,1 +2919,1 @@\n-    result |= CPU_SSE4_2;\n+    vm_features.set_feature(CPU_SSE4_2);\n@@ -2900,1 +2921,1 @@\n-    result |= CPU_POPCNT;\n+    vm_features.set_feature(CPU_POPCNT);\n@@ -2903,1 +2924,1 @@\n-    result |= CPU_APX_F;\n+    vm_features.set_feature(CPU_APX_F);\n@@ -2909,2 +2930,2 @@\n-    result |= CPU_AVX;\n-    result |= CPU_VZEROUPPER;\n+    vm_features.set_feature(CPU_AVX);\n+    vm_features.set_feature(CPU_VZEROUPPER);\n@@ -2912,1 +2933,1 @@\n-      result |= CPU_SHA512;\n+      vm_features.set_feature(CPU_SHA512);\n@@ -2914,1 +2935,1 @@\n-      result |= CPU_F16C;\n+      vm_features.set_feature(CPU_F16C);\n@@ -2916,1 +2937,1 @@\n-      result |= CPU_AVX2;\n+      vm_features.set_feature(CPU_AVX2);\n@@ -2918,1 +2939,1 @@\n-        result |= CPU_AVX_IFMA;\n+        vm_features.set_feature(CPU_AVX_IFMA);\n@@ -2921,1 +2942,1 @@\n-        result |= CPU_GFNI;\n+        vm_features.set_feature(CPU_GFNI);\n@@ -2926,1 +2947,1 @@\n-      result |= CPU_AVX512F;\n+      vm_features.set_feature(CPU_AVX512F);\n@@ -2928,1 +2949,1 @@\n-        result |= CPU_AVX512CD;\n+        vm_features.set_feature(CPU_AVX512CD);\n@@ -2930,1 +2951,1 @@\n-        result |= CPU_AVX512DQ;\n+        vm_features.set_feature(CPU_AVX512DQ);\n@@ -2932,1 +2953,1 @@\n-        result |= CPU_AVX512_IFMA;\n+        vm_features.set_feature(CPU_AVX512_IFMA);\n@@ -2934,1 +2955,1 @@\n-        result |= CPU_AVX512PF;\n+        vm_features.set_feature(CPU_AVX512PF);\n@@ -2936,1 +2957,1 @@\n-        result |= CPU_AVX512ER;\n+        vm_features.set_feature(CPU_AVX512ER);\n@@ -2938,1 +2959,1 @@\n-        result |= CPU_AVX512BW;\n+        vm_features.set_feature(CPU_AVX512BW);\n@@ -2940,1 +2961,1 @@\n-        result |= CPU_AVX512VL;\n+        vm_features.set_feature(CPU_AVX512VL);\n@@ -2942,1 +2963,1 @@\n-        result |= CPU_AVX512_VPOPCNTDQ;\n+        vm_features.set_feature(CPU_AVX512_VPOPCNTDQ);\n@@ -2944,1 +2965,1 @@\n-        result |= CPU_AVX512_VPCLMULQDQ;\n+        vm_features.set_feature(CPU_AVX512_VPCLMULQDQ);\n@@ -2946,1 +2967,1 @@\n-        result |= CPU_AVX512_VAES;\n+        vm_features.set_feature(CPU_AVX512_VAES);\n@@ -2948,1 +2969,1 @@\n-        result |= CPU_AVX512_VNNI;\n+        vm_features.set_feature(CPU_AVX512_VNNI);\n@@ -2950,1 +2971,1 @@\n-        result |= CPU_AVX512_BITALG;\n+        vm_features.set_feature(CPU_AVX512_BITALG);\n@@ -2952,1 +2973,1 @@\n-        result |= CPU_AVX512_VBMI;\n+        vm_features.set_feature(CPU_AVX512_VBMI);\n@@ -2954,1 +2975,28 @@\n-        result |= CPU_AVX512_VBMI2;\n+        vm_features.set_feature(CPU_AVX512_VBMI2);\n+    }\n+    if (is_intel()) {\n+      if (sefsl1_cpuid7_edx.bits.avx10 != 0 &&\n+          std_cpuid24_ebx.bits.avx10_vlen_512 !=0 &&\n+          std_cpuid24_ebx.bits.avx10_converged_isa_version >= 1 &&\n+          xem_xcr0_eax.bits.opmask != 0 &&\n+          xem_xcr0_eax.bits.zmm512 != 0 &&\n+          xem_xcr0_eax.bits.zmm32 != 0) {\n+        vm_features.set_feature(CPU_AVX10_1);\n+        vm_features.set_feature(CPU_AVX512F);\n+        vm_features.set_feature(CPU_AVX512CD);\n+        vm_features.set_feature(CPU_AVX512DQ);\n+        vm_features.set_feature(CPU_AVX512PF);\n+        vm_features.set_feature(CPU_AVX512ER);\n+        vm_features.set_feature(CPU_AVX512BW);\n+        vm_features.set_feature(CPU_AVX512VL);\n+        vm_features.set_feature(CPU_AVX512_VPOPCNTDQ);\n+        vm_features.set_feature(CPU_AVX512_VPCLMULQDQ);\n+        vm_features.set_feature(CPU_AVX512_VAES);\n+        vm_features.set_feature(CPU_AVX512_VNNI);\n+        vm_features.set_feature(CPU_AVX512_BITALG);\n+        vm_features.set_feature(CPU_AVX512_VBMI);\n+        vm_features.set_feature(CPU_AVX512_VBMI2);\n+        if (std_cpuid24_ebx.bits.avx10_converged_isa_version >= 2) {\n+          vm_features.set_feature(CPU_AVX10_2);\n+        }\n+      }\n@@ -2957,0 +3005,1 @@\n+\n@@ -2958,1 +3007,1 @@\n-    result |= CPU_HV;\n+    vm_features.set_feature(CPU_HV);\n@@ -2960,1 +3009,1 @@\n-    result |= CPU_BMI1;\n+    vm_features.set_feature(CPU_BMI1);\n@@ -2962,1 +3011,1 @@\n-    result |= CPU_TSC;\n+    vm_features.set_feature(CPU_TSC);\n@@ -2964,1 +3013,1 @@\n-    result |= CPU_TSCINV_BIT;\n+    vm_features.set_feature(CPU_TSCINV_BIT);\n@@ -2966,1 +3015,1 @@\n-    result |= CPU_AES;\n+    vm_features.set_feature(CPU_AES);\n@@ -2968,1 +3017,1 @@\n-    result |= CPU_LZCNT;\n+    vm_features.set_feature(CPU_LZCNT);\n@@ -2970,1 +3019,1 @@\n-    result |= CPU_3DNOW_PREFETCH;\n+    vm_features.set_feature(CPU_3DNOW_PREFETCH);\n@@ -2972,1 +3021,1 @@\n-    result |= CPU_ERMS;\n+    vm_features.set_feature(CPU_ERMS);\n@@ -2974,1 +3023,1 @@\n-    result |= CPU_FSRM;\n+    vm_features.set_feature(CPU_FSRM);\n@@ -2976,1 +3025,1 @@\n-    result |= CPU_CLMUL;\n+    vm_features.set_feature(CPU_CLMUL);\n@@ -2978,1 +3027,1 @@\n-    result |= CPU_RTM;\n+    vm_features.set_feature(CPU_RTM);\n@@ -2980,1 +3029,1 @@\n-     result |= CPU_ADX;\n+     vm_features.set_feature(CPU_ADX);\n@@ -2982,1 +3031,1 @@\n-    result |= CPU_BMI2;\n+    vm_features.set_feature(CPU_BMI2);\n@@ -2984,1 +3033,1 @@\n-    result |= CPU_SHA;\n+    vm_features.set_feature(CPU_SHA);\n@@ -2986,1 +3035,1 @@\n-    result |= CPU_FMA;\n+    vm_features.set_feature(CPU_FMA);\n@@ -2988,1 +3037,1 @@\n-    result |= CPU_FLUSHOPT;\n+    vm_features.set_feature(CPU_FLUSHOPT);\n@@ -2990,1 +3039,1 @@\n-    result |= CPU_CLWB;\n+    vm_features.set_feature(CPU_CLWB);\n@@ -2992,1 +3041,1 @@\n-    result |= CPU_RDTSCP;\n+    vm_features.set_feature(CPU_RDTSCP);\n@@ -2994,1 +3043,1 @@\n-    result |= CPU_RDPID;\n+    vm_features.set_feature(CPU_RDPID);\n@@ -3000,1 +3049,1 @@\n-      result |= CPU_3DNOW_PREFETCH;\n+      vm_features.set_feature(CPU_3DNOW_PREFETCH);\n@@ -3002,1 +3051,1 @@\n-      result |= CPU_SSE4A;\n+      vm_features.set_feature(CPU_SSE4A);\n@@ -3008,1 +3057,1 @@\n-      result |= CPU_SERIALIZE;\n+      vm_features.set_feature(CPU_SERIALIZE);\n@@ -3010,1 +3059,1 @@\n-      result |= CPU_AVX512_FP16;\n+      vm_features.set_feature(CPU_AVX512_FP16);\n@@ -3017,2 +3066,2 @@\n-    assert((result & CPU_CLWB) == 0, \"Check if it is supported?\");\n-    result &= ~CPU_CLWB;\n+    assert(vm_features.supports_feature(CPU_CLWB), \"Check if it is supported?\");\n+    vm_features.clear_feature(CPU_CLWB);\n@@ -3023,1 +3072,1 @@\n-    result |= CPU_PKU;\n+    vm_features.set_feature(CPU_PKU);\n@@ -3026,1 +3075,1 @@\n-    result |= CPU_OSPKE;\n+    vm_features.set_feature(CPU_OSPKE);\n@@ -3031,1 +3080,1 @@\n-    result |= CPU_CET_SS;\n+    vm_features.set_feature(CPU_CET_SS);\n@@ -3034,1 +3083,1 @@\n-    result |= CPU_CET_IBT;\n+    vm_features.set_feature(CPU_CET_IBT);\n@@ -3041,1 +3090,1 @@\n-    result |= CPU_TSCINV;\n+    vm_features.set_feature(CPU_TSCINV);\n@@ -3043,2 +3092,1 @@\n-\n-  return result;\n+  return vm_features;\n@@ -3234,0 +3282,11 @@\n+\n+void VM_Version::insert_features_names(VM_Version::VM_Features features, char* buf, size_t buflen) {\n+  for (int i = 0; i < MAX_CPU_FEATURES; i++) {\n+    if (features.supports_feature((VM_Version::Feature_Flag)i)) {\n+      int res = jio_snprintf(buf, buflen, \", %s\", _features_names[i]);\n+      assert(res > 0, \"not enough temporary space allocated\");\n+      buf += res;\n+      buflen -= res;\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":194,"deletions":135,"binary":false,"changes":329,"status":"modified"},{"patch":"@@ -298,1 +298,3 @@\n-      uint32_t       : 21,\n+      uint32_t       : 19,\n+              avx10  : 1,\n+                     : 1,\n@@ -304,0 +306,18 @@\n+  union StdCpuid24MainLeafEax {\n+    uint32_t value;\n+    struct {\n+      uint32_t  sub_leaves_cnt  : 31;\n+    } bits;\n+  };\n+\n+  union StdCpuid24MainLeafEbx {\n+    uint32_t value;\n+    struct {\n+      uint32_t  avx10_converged_isa_version  : 8,\n+                                             : 8,\n+                                             : 2,\n+                avx10_vlen_512               : 1,\n+                                             : 13;\n+    } bits;\n+  };\n+\n@@ -345,1 +365,1 @@\n-   * src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.amd64\/src\/jdk\/vm\/ci\/amd64\/AMD64.java\n+   * src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/amd64\/AMD64.java\n@@ -347,1 +367,1 @@\n-  enum Feature_Flag : uint64_t {\n+  enum Feature_Flag {\n@@ -423,1 +443,3 @@\n-    decl(AVX512_FP16,       \"avx512_fp16\",       62) \/* AVX512 FP16 ISA support*\/\n+    decl(AVX512_FP16,       \"avx512_fp16\",       62) \/* AVX512 FP16 ISA support*\/ \\\n+    decl(AVX10_1,           \"avx10_1\",           63) \/* AVX10 512 bit vector ISA Version 1 support*\/ \\\n+    decl(AVX10_2,           \"avx10_2\",           64) \/* AVX10 512 bit vector ISA Version 2 support*\/\n@@ -425,1 +447,1 @@\n-#define DECLARE_CPU_FEATURE_FLAG(id, name, bit) CPU_##id = (1ULL << bit),\n+#define DECLARE_CPU_FEATURE_FLAG(id, name, bit) CPU_##id = (bit),\n@@ -428,0 +450,1 @@\n+    MAX_CPU_FEATURES\n@@ -430,0 +453,62 @@\n+  class VM_Features {\n+    friend class VMStructs;\n+    friend class JVMCIVMStructs;\n+\n+   private:\n+    uint64_t _features_bitmap[(MAX_CPU_FEATURES \/ BitsPerLong) + 1];\n+\n+    STATIC_ASSERT(sizeof(_features_bitmap) * BitsPerByte >= MAX_CPU_FEATURES);\n+\n+    \/\/ Number of 8-byte elements in _bitmap.\n+    constexpr static int features_bitmap_element_count() {\n+      return sizeof(_features_bitmap) \/ sizeof(uint64_t);\n+    }\n+\n+    constexpr static int features_bitmap_element_shift_count() {\n+      return LogBitsPerLong;\n+    }\n+\n+    constexpr static uint64_t features_bitmap_element_mask() {\n+      return (1ULL << features_bitmap_element_shift_count()) - 1;\n+    }\n+\n+    static int index(Feature_Flag feature) {\n+      int idx = feature >> features_bitmap_element_shift_count();\n+      assert(idx < features_bitmap_element_count(), \"Features array index out of bounds\");\n+      return idx;\n+    }\n+\n+    static uint64_t bit_mask(Feature_Flag feature) {\n+      return (1ULL << (feature & features_bitmap_element_mask()));\n+    }\n+\n+    static int _features_bitmap_size; \/\/ for JVMCI purposes\n+   public:\n+    VM_Features() {\n+      for (int i = 0; i < features_bitmap_element_count(); i++) {\n+        _features_bitmap[i] = 0;\n+      }\n+    }\n+\n+    void set_feature(Feature_Flag feature) {\n+      int idx = index(feature);\n+      _features_bitmap[idx] |= bit_mask(feature);\n+    }\n+\n+    void clear_feature(VM_Version::Feature_Flag feature) {\n+      int idx = index(feature);\n+      _features_bitmap[idx] &= ~bit_mask(feature);\n+    }\n+\n+    bool supports_feature(VM_Version::Feature_Flag feature) {\n+      int idx = index(feature);\n+      return (_features_bitmap[idx] & bit_mask(feature)) != 0;\n+    }\n+  };\n+\n+  \/\/ CPU feature flags vector, can be affected by VM settings.\n+  static VM_Features _features;\n+\n+  \/\/ Original CPU feature flags vector, not affected by VM settings.\n+  static VM_Features _cpu_features;\n+\n@@ -432,0 +517,5 @@\n+  static void clear_cpu_features() {\n+    _features = VM_Features();\n+    _cpu_features = VM_Features();\n+  }\n+\n@@ -495,0 +585,5 @@\n+    \/\/ cpuid function 24 converged vector ISA main leaf\n+    \/\/ eax = 24, ecx = 0\n+    StdCpuid24MainLeafEax std_cpuid24_eax;\n+    StdCpuid24MainLeafEbx std_cpuid24_ebx;\n+\n@@ -568,1 +663,1 @@\n-    uint64_t feature_flags() const;\n+    VM_Features feature_flags() const;\n@@ -614,0 +709,1 @@\n+  static ByteSize std_cpuid24_offset() { return byte_offset_of(CpuidInfo, std_cpuid24_eax); }\n@@ -647,5 +743,23 @@\n-  static void clean_cpuFeatures()   { _features = 0; }\n-  static void set_avx_cpuFeatures() { _features |= (CPU_SSE | CPU_SSE2 | CPU_AVX | CPU_VZEROUPPER ); }\n-  static void set_evex_cpuFeatures() { _features |= (CPU_AVX512F | CPU_SSE | CPU_SSE2 | CPU_VZEROUPPER ); }\n-  static void set_apx_cpuFeatures() { _features |= CPU_APX_F; }\n-  static void set_bmi_cpuFeatures() { _features |= (CPU_BMI1 | CPU_BMI2 | CPU_LZCNT | CPU_POPCNT); }\n+  static void clean_cpuFeatures()   {\n+    VM_Version::clear_cpu_features();\n+  }\n+  static void set_avx_cpuFeatures() {\n+    _features.set_feature(CPU_SSE);\n+    _features.set_feature(CPU_SSE2);\n+    _features.set_feature(CPU_AVX);\n+    _features.set_feature(CPU_VZEROUPPER);\n+  }\n+  static void set_evex_cpuFeatures() {\n+    _features.set_feature(CPU_AVX10_1);\n+    _features.set_feature(CPU_AVX512F);\n+    _features.set_feature(CPU_SSE);\n+    _features.set_feature(CPU_SSE2);\n+    _features.set_feature(CPU_VZEROUPPER);\n+  }\n+  static void set_apx_cpuFeatures() { _features.set_feature(CPU_APX_F); }\n+  static void set_bmi_cpuFeatures() {\n+    _features.set_feature(CPU_BMI1);\n+    _features.set_feature(CPU_BMI2);\n+    _features.set_feature(CPU_LZCNT);\n+    _features.set_feature(CPU_POPCNT);\n+  }\n@@ -706,34 +820,33 @@\n-  static bool supports_cpuid()        { return _features  != 0; }\n-  static bool supports_cmov()         { return (_features & CPU_CMOV) != 0; }\n-  static bool supports_fxsr()         { return (_features & CPU_FXSR) != 0; }\n-  static bool supports_ht()           { return (_features & CPU_HT) != 0; }\n-  static bool supports_mmx()          { return (_features & CPU_MMX) != 0; }\n-  static bool supports_sse()          { return (_features & CPU_SSE) != 0; }\n-  static bool supports_sse2()         { return (_features & CPU_SSE2) != 0; }\n-  static bool supports_sse3()         { return (_features & CPU_SSE3) != 0; }\n-  static bool supports_ssse3()        { return (_features & CPU_SSSE3)!= 0; }\n-  static bool supports_sse4_1()       { return (_features & CPU_SSE4_1) != 0; }\n-  static bool supports_sse4_2()       { return (_features & CPU_SSE4_2) != 0; }\n-  static bool supports_popcnt()       { return (_features & CPU_POPCNT) != 0; }\n-  static bool supports_avx()          { return (_features & CPU_AVX) != 0; }\n-  static bool supports_avx2()         { return (_features & CPU_AVX2) != 0; }\n-  static bool supports_tsc()          { return (_features & CPU_TSC) != 0; }\n-  static bool supports_rdtscp()       { return (_features & CPU_RDTSCP) != 0; }\n-  static bool supports_rdpid()        { return (_features & CPU_RDPID) != 0; }\n-  static bool supports_aes()          { return (_features & CPU_AES) != 0; }\n-  static bool supports_erms()         { return (_features & CPU_ERMS) != 0; }\n-  static bool supports_fsrm()         { return (_features & CPU_FSRM) != 0; }\n-  static bool supports_clmul()        { return (_features & CPU_CLMUL) != 0; }\n-  static bool supports_rtm()          { return (_features & CPU_RTM) != 0; }\n-  static bool supports_bmi1()         { return (_features & CPU_BMI1) != 0; }\n-  static bool supports_bmi2()         { return (_features & CPU_BMI2) != 0; }\n-  static bool supports_adx()          { return (_features & CPU_ADX) != 0; }\n-  static bool supports_evex()         { return (_features & CPU_AVX512F) != 0; }\n-  static bool supports_avx512dq()     { return (_features & CPU_AVX512DQ) != 0; }\n-  static bool supports_avx512ifma()   { return (_features & CPU_AVX512_IFMA) != 0; }\n-  static bool supports_avxifma()      { return (_features & CPU_AVX_IFMA) != 0; }\n-  static bool supports_avx512pf()     { return (_features & CPU_AVX512PF) != 0; }\n-  static bool supports_avx512er()     { return (_features & CPU_AVX512ER) != 0; }\n-  static bool supports_avx512cd()     { return (_features & CPU_AVX512CD) != 0; }\n-  static bool supports_avx512bw()     { return (_features & CPU_AVX512BW) != 0; }\n-  static bool supports_avx512vl()     { return (_features & CPU_AVX512VL) != 0; }\n+  static bool supports_cmov()         { return _features.supports_feature(CPU_CMOV); }\n+  static bool supports_fxsr()         { return _features.supports_feature(CPU_FXSR); }\n+  static bool supports_ht()           { return _features.supports_feature(CPU_HT); }\n+  static bool supports_mmx()          { return _features.supports_feature(CPU_MMX); }\n+  static bool supports_sse()          { return _features.supports_feature(CPU_SSE); }\n+  static bool supports_sse2()         { return _features.supports_feature(CPU_SSE2); }\n+  static bool supports_sse3()         { return _features.supports_feature(CPU_SSE3); }\n+  static bool supports_ssse3()        { return _features.supports_feature(CPU_SSSE3); }\n+  static bool supports_sse4_1()       { return _features.supports_feature(CPU_SSE4_1); }\n+  static bool supports_sse4_2()       { return _features.supports_feature(CPU_SSE4_2); }\n+  static bool supports_popcnt()       { return _features.supports_feature(CPU_POPCNT); }\n+  static bool supports_avx()          { return _features.supports_feature(CPU_AVX); }\n+  static bool supports_avx2()         { return _features.supports_feature(CPU_AVX2); }\n+  static bool supports_tsc()          { return _features.supports_feature(CPU_TSC); }\n+  static bool supports_rdtscp()       { return _features.supports_feature(CPU_RDTSCP); }\n+  static bool supports_rdpid()        { return _features.supports_feature(CPU_RDPID); }\n+  static bool supports_aes()          { return _features.supports_feature(CPU_AES); }\n+  static bool supports_erms()         { return _features.supports_feature(CPU_ERMS); }\n+  static bool supports_fsrm()         { return _features.supports_feature(CPU_FSRM); }\n+  static bool supports_clmul()        { return _features.supports_feature(CPU_CLMUL); }\n+  static bool supports_rtm()          { return _features.supports_feature(CPU_RTM); }\n+  static bool supports_bmi1()         { return _features.supports_feature(CPU_BMI1); }\n+  static bool supports_bmi2()         { return _features.supports_feature(CPU_BMI2); }\n+  static bool supports_adx()          { return _features.supports_feature(CPU_ADX); }\n+  static bool supports_evex()         { return _features.supports_feature(CPU_AVX512F); }\n+  static bool supports_avx512dq()     { return _features.supports_feature(CPU_AVX512DQ); }\n+  static bool supports_avx512ifma()   { return _features.supports_feature(CPU_AVX512_IFMA); }\n+  static bool supports_avxifma()      { return _features.supports_feature(CPU_AVX_IFMA); }\n+  static bool supports_avx512pf()     { return _features.supports_feature(CPU_AVX512PF); }\n+  static bool supports_avx512er()     { return _features.supports_feature(CPU_AVX512ER); }\n+  static bool supports_avx512cd()     { return _features.supports_feature(CPU_AVX512CD); }\n+  static bool supports_avx512bw()     { return _features.supports_feature(CPU_AVX512BW); }\n+  static bool supports_avx512vl()     { return _features.supports_feature(CPU_AVX512VL); }\n@@ -748,1 +861,1 @@\n-  static bool supports_apx_f()        { return (_features & CPU_APX_F) != 0; }\n+  static bool supports_apx_f()        { return _features.supports_feature(CPU_APX_F); }\n@@ -750,20 +863,26 @@\n-  static bool supports_sha()          { return (_features & CPU_SHA) != 0; }\n-  static bool supports_fma()          { return (_features & CPU_FMA) != 0 && supports_avx(); }\n-  static bool supports_vzeroupper()   { return (_features & CPU_VZEROUPPER) != 0; }\n-  static bool supports_avx512_vpopcntdq()  { return (_features & CPU_AVX512_VPOPCNTDQ) != 0; }\n-  static bool supports_avx512_vpclmulqdq() { return (_features & CPU_AVX512_VPCLMULQDQ) != 0; }\n-  static bool supports_avx512_vaes()  { return (_features & CPU_AVX512_VAES) != 0; }\n-  static bool supports_gfni()         { return (_features & CPU_GFNI) != 0; }\n-  static bool supports_avx512_vnni()  { return (_features & CPU_AVX512_VNNI) != 0; }\n-  static bool supports_avx512_bitalg()  { return (_features & CPU_AVX512_BITALG) != 0; }\n-  static bool supports_avx512_vbmi()  { return (_features & CPU_AVX512_VBMI) != 0; }\n-  static bool supports_avx512_vbmi2() { return (_features & CPU_AVX512_VBMI2) != 0; }\n-  static bool supports_avx512_fp16()  { return (_features & CPU_AVX512_FP16) != 0; }\n-  static bool supports_hv()           { return (_features & CPU_HV) != 0; }\n-  static bool supports_serialize()    { return (_features & CPU_SERIALIZE) != 0; }\n-  static bool supports_f16c()         { return (_features & CPU_F16C) != 0; }\n-  static bool supports_pku()          { return (_features & CPU_PKU) != 0; }\n-  static bool supports_ospke()        { return (_features & CPU_OSPKE) != 0; }\n-  static bool supports_cet_ss()       { return (_features & CPU_CET_SS) != 0; }\n-  static bool supports_cet_ibt()      { return (_features & CPU_CET_IBT) != 0; }\n-  static bool supports_sha512()       { return (_features & CPU_SHA512) != 0; }\n+  static bool supports_sha()          { return _features.supports_feature(CPU_SHA); }\n+  static bool supports_fma()          { return _features.supports_feature(CPU_FMA) && supports_avx(); }\n+  static bool supports_vzeroupper()   { return _features.supports_feature(CPU_VZEROUPPER); }\n+  static bool supports_avx512_vpopcntdq()  { return _features.supports_feature(CPU_AVX512_VPOPCNTDQ); }\n+  static bool supports_avx512_vpclmulqdq() { return _features.supports_feature(CPU_AVX512_VPCLMULQDQ); }\n+  static bool supports_avx512_vaes()  { return _features.supports_feature(CPU_AVX512_VAES); }\n+  static bool supports_gfni()         { return _features.supports_feature(CPU_GFNI); }\n+  static bool supports_avx512_vnni()  { return _features.supports_feature(CPU_AVX512_VNNI); }\n+  static bool supports_avx512_bitalg()  { return _features.supports_feature(CPU_AVX512_BITALG); }\n+  static bool supports_avx512_vbmi()  { return _features.supports_feature(CPU_AVX512_VBMI); }\n+  static bool supports_avx512_vbmi2() { return _features.supports_feature(CPU_AVX512_VBMI2); }\n+  static bool supports_avx512_fp16()  { return _features.supports_feature(CPU_AVX512_FP16); }\n+  static bool supports_hv()           { return _features.supports_feature(CPU_HV); }\n+  static bool supports_serialize()    { return _features.supports_feature(CPU_SERIALIZE); }\n+  static bool supports_f16c()         { return _features.supports_feature(CPU_F16C); }\n+  static bool supports_pku()          { return _features.supports_feature(CPU_PKU); }\n+  static bool supports_ospke()        { return _features.supports_feature(CPU_OSPKE); }\n+  static bool supports_cet_ss()       { return _features.supports_feature(CPU_CET_SS); }\n+  static bool supports_cet_ibt()      { return _features.supports_feature(CPU_CET_IBT); }\n+  static bool supports_sha512()       { return _features.supports_feature(CPU_SHA512); }\n+\n+  \/\/ Intel® AVX10 introduces a versioned approach for enumeration that is monotonically increasing, inclusive,\n+  \/\/ and supporting all vector lengths. Feature set supported by an AVX10 vector ISA version is also supported\n+  \/\/ by all the versions above it.\n+  static bool supports_avx10_1()      { return _features.supports_feature(CPU_AVX10_1);}\n+  static bool supports_avx10_2()      { return _features.supports_feature(CPU_AVX10_2);}\n@@ -774,1 +893,1 @@\n-  static bool cpu_supports_evex()     { return (_cpu_features & CPU_AVX512F) != 0; }\n+  static bool cpu_supports_evex()     { return _cpu_features.supports_feature(CPU_AVX512F); }\n@@ -805,0 +924,2 @@\n+  static void insert_features_names(VM_Version::VM_Features features, char* buf, size_t buflen);\n+\n@@ -812,3 +933,3 @@\n-  static bool supports_3dnow_prefetch()    { return (_features & CPU_3DNOW_PREFETCH) != 0; }\n-  static bool supports_lzcnt()    { return (_features & CPU_LZCNT) != 0; }\n-  static bool supports_sse4a()    { return (_features & CPU_SSE4A) != 0; }\n+  static bool supports_3dnow_prefetch()    { return _features.supports_feature(CPU_3DNOW_PREFETCH); }\n+  static bool supports_lzcnt()    { return _features.supports_feature(CPU_LZCNT); }\n+  static bool supports_sse4a()    { return _features.supports_feature(CPU_SSE4A); }\n@@ -821,1 +942,1 @@\n-    return (_features & CPU_TSCINV_BIT) != 0;\n+    return _features.supports_feature(CPU_TSCINV_BIT);\n@@ -824,1 +945,1 @@\n-    return (_features & CPU_TSCINV) != 0;\n+    return _features.supports_feature(CPU_TSCINV);\n@@ -885,2 +1006,2 @@\n-  static bool supports_clflushopt() { return ((_features & CPU_FLUSHOPT) != 0); }\n-  static bool supports_clwb() { return ((_features & CPU_CLWB) != 0); }\n+  static bool supports_clflushopt() { return (_features.supports_feature(CPU_FLUSHOPT)); }\n+  static bool supports_clwb() { return (_features.supports_feature(CPU_CLWB)); }\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":195,"deletions":74,"binary":false,"changes":269,"status":"modified"},{"patch":"@@ -473,0 +473,1 @@\n+                 strcmp(vmField.typeString, \"VM_Version::VM_Features\") == 0 ||\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-  JVMTI_ONLY(static_field(CompilerToVM::Data,  _should_notify_object_alloc,            int*))                                         \\\n+  JVMTI_ONLY(static_field(CompilerToVM::Data,  _should_notify_object_alloc,            int*))                                        \\\n@@ -1000,1 +1000,5 @@\n-  static_field(VM_Version, _has_intel_jcc_erratum, bool)\n+  static_field(VM_Version,                     _features,                      VM_Version::VM_Features) \\\n+                                                                                                        \\\n+  nonstatic_field(VM_Version::VM_Features,     _features_bitmap[0],            uint64_t)                \\\n+  static_field(VM_Version::VM_Features,        _features_bitmap_size,          int)                     \\\n+  static_field(VM_Version,                     _has_intel_jcc_erratum,         bool)\n@@ -1008,1 +1012,2 @@\n-#define VM_LONG_CPU_FEATURE_CONSTANTS CPU_FEATURE_FLAGS(DECLARE_LONG_CPU_FEATURE_CONSTANT)\n+#define VM_LONG_CPU_FEATURE_CONSTANTS \\\n+   CPU_FEATURE_FLAGS(DECLARE_LONG_CPU_FEATURE_CONSTANT)\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -328,16 +328,0 @@\n-void Abstract_VM_Version::insert_features_names(char* buf, size_t buflen, const char* features_names[]) {\n-  uint64_t features = _features;\n-  uint features_names_index = 0;\n-\n-  while (features != 0) {\n-    if (features & 1) {\n-      int res = jio_snprintf(buf, buflen, \", %s\", features_names[features_names_index]);\n-      assert(res > 0, \"not enough temporary space allocated\");\n-      buf += res;\n-      buflen -= res;\n-    }\n-    features >>= 1;\n-    ++features_names_index;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -131,1 +132,0 @@\n-  static uint64_t features()           { return _features; }\n@@ -133,0 +133,1 @@\n+\n@@ -134,1 +135,0 @@\n-  static void insert_features_names(char* buf, size_t buflen, const char* features_names[]);\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+\n@@ -1167,0 +1168,1 @@\n+  declare_toplevel_type(VM_Version)                                       \\\n@@ -1719,1 +1721,0 @@\n-  NOT_ZERO(X86_ONLY(declare_constant(frame::entry_frame_call_wrapper_offset)))      \\\n@@ -2149,0 +2150,1 @@\n+\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -261,0 +261,2 @@\n+        AVX10_1,\n+        AVX10_2\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/amd64\/AMD64.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import static jdk.vm.ci.hotspot.UnsafeAccess.UNSAFE;\n@@ -83,0 +84,54 @@\n+\n+    \/**\n+     * Converts CPU features bit map into enum constants.\n+     *\n+     * @param <CPUFeatureType> CPU feature enum type\n+     * @param enumType the class of {@code CPUFeatureType}\n+     * @param constants VM constants. Each entry whose key starts with {@code \"VM_Version::CPU_\"}\n+     *            specifies a CPU feature and its value is a mask for a bit in {@code features}\n+     * @param featuresBitMapAddress pointer to {@code VM_Features::_features_bitmap} field of {@code VM_Version::_features}\n+     * @param featuresBitMapSize size of feature bit map in bytes\n+     * @param renaming maps from VM feature names to enum constant names where the two differ\n+     * @throws IllegalArgumentException if any VM CPU feature constant cannot be converted to an\n+     *             enum value\n+     * @return the set of converted values\n+     *\/\n+    static <CPUFeatureType extends Enum<CPUFeatureType>> EnumSet<CPUFeatureType> convertFeatures(\n+                    Class<CPUFeatureType> enumType,\n+                    Map<String, Long> constants,\n+                    long featuresBitMapAddress,\n+                    long featuresBitMapSize,\n+                    Map<String, String> renaming) {\n+        EnumSet<CPUFeatureType> outFeatures = EnumSet.noneOf(enumType);\n+        List<String> missing = new ArrayList<>();\n+\n+        for (Entry<String, Long> e : constants.entrySet()) {\n+            String key = e.getKey();\n+            long bitIndex = e.getValue();\n+            if (key.startsWith(\"VM_Version::CPU_\")) {\n+                String name = key.substring(\"VM_Version::CPU_\".length());\n+                try {\n+                    final long featuresElementShiftCount = 6; \/\/ log (# of bits per long)\n+                    final long featuresElementMask = (1L << featuresElementShiftCount) - 1;\n+\n+                    CPUFeatureType feature = Enum.valueOf(enumType, renaming.getOrDefault(name, name));\n+\n+                    long featureIndex = bitIndex >>> featuresElementShiftCount;\n+                    long featureBitMask = 1L << (bitIndex & featuresElementMask);\n+                    assert featureIndex < featuresBitMapSize;\n+\n+                    long featuresElement = UNSAFE.getLong(featuresBitMapAddress + featureIndex * Long.BYTES);\n+\n+                    if ((featuresElement & featureBitMask) != 0) {\n+                        outFeatures.add(feature);\n+                    }\n+                } catch (IllegalArgumentException iae) {\n+                    missing.add(name);\n+                }\n+            }\n+        }\n+        if (!missing.isEmpty()) {\n+            throw new JVMCIError(\"Missing CPU feature constants: %s\", missing);\n+        }\n+        return outFeatures;\n+    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIBackendFactory.java","additions":56,"deletions":1,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,6 @@\n-        EnumSet<CPUFeature> features = HotSpotJVMCIBackendFactory.convertFeatures(CPUFeature.class, constants, config.vmVersionFeatures, renaming);\n+        long featuresBitMapAddress = config.vmVersionFeatures + config.vmFeaturesFeaturesOffset;\n+        EnumSet<CPUFeature> features = HotSpotJVMCIBackendFactory.convertFeatures(CPUFeature.class,\n+                                                                                  constants,\n+                                                                                  featuresBitMapAddress,\n+                                                                                  config.vmFeaturesFeaturesSize,\n+                                                                                  renaming);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/amd64\/AMD64HotSpotJVMCIBackendFactory.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,4 @@\n+    final long vmVersionFeatures = getFieldAddress(\"VM_Version::_features\", \"VM_Version::VM_Features\");\n+    final long vmFeaturesFeaturesOffset = getFieldOffset(\"VM_Version::VM_Features::_features_bitmap[0]\", Long.class, \"uint64_t\");\n+    final long vmFeaturesFeaturesSize = getFieldValue(\"VM_Version::VM_Features::_features_bitmap_size\", Long.class, \"int\");\n+\n@@ -49,2 +53,0 @@\n-    final long vmVersionFeatures = getFieldValue(\"Abstract_VM_Version::_features\", Long.class, \"uint64_t\");\n-\n@@ -91,0 +93,2 @@\n+    final long amd64AVX10_1 = getConstant(\"VM_Version::CPU_AVX10_1\", Long.class);\n+    final long amd64AVX10_2 = getConstant(\"VM_Version::CPU_AVX10_2\", Long.class);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/amd64\/AMD64HotSpotVMConfig.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-        \/\/ longConstant VM_Version::CPU_SHA 17179869184\n+        \/\/ longConstant VM_Version::CPU_SHA 34\n@@ -109,1 +109,1 @@\n-                           17179869184L);\n+                           34L);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbLongConstant.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-                    \"apx_f\"\n+                    \"apx_f\",        \"avx10_1\",          \"avx10_2\"\n","filename":"test\/lib-test\/jdk\/test\/whitebox\/CPUInfoTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}