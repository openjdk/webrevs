{"files":[{"patch":"@@ -356,2 +356,0 @@\n-void VM_Version::pre_initialize() {}\n-\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm_32.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -464,2 +464,1 @@\n-    __ cmpl(rcx, 0x18000000);\n-    __ jccb(Assembler::notEqual, done); \/\/ jump if AVX is not supported\n+    __ jccb(Assembler::equal, done); \/\/ jump if AVX is not supported\n@@ -469,2 +468,1 @@\n-    __ cmpl(rax, 0x6);\n-    __ jccb(Assembler::equal, start_simd_check); \/\/ return if AVX is not supported\n+    __ jccb(Assembler::notEqual, start_simd_check); \/\/ return if AVX is not supported\n@@ -503,2 +501,1 @@\n-      __ cmpl(rax, 0xE0);\n-      __ jccb(Assembler::notEqual, legacy_setup); \/\/ jump if EVEX is not supported\n+      __ jccb(Assembler::equal, legacy_setup); \/\/ jump if EVEX is not supported\n@@ -584,2 +581,1 @@\n-      __ cmpl(rax, 0xE0);\n-      __ jcc(Assembler::notEqual, legacy_save_restore);\n+      __ jcc(Assembler::equal, legacy_save_restore);\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-void VM_Version::pre_initialize() {}\n-\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-     * @param features_vector_size_offset offset of feature_vector_size field in {@code VM_Features}\n+     * @param features_vector_size size of feature vector\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIBackendFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}