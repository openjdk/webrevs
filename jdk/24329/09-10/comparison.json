{"files":[{"patch":"@@ -710,2 +710,0 @@\n-void VM_Version::pre_initialize() {}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,0 @@\n-  static void pre_initialize();\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-  static void pre_initialize();\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,2 +56,0 @@\n-void VM_Version::pre_initialize() {}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,0 @@\n-  static void pre_initialize();\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -67,2 +67,0 @@\n-void VM_Version::pre_initialize() {}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -308,1 +308,0 @@\n-  static void pre_initialize();\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -91,2 +91,0 @@\n-void VM_Version::pre_initialize() {}\n-\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -414,1 +414,0 @@\n-  static void pre_initialize();\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  assert ((!Universe::is_fully_initialized() || SUPPORTS_CPU_FEATURE(CPU_FLUSH)), \"clflush should be available\");\n+  assert ((!Universe::is_fully_initialized() || _vm_target_features.supports_feature(CPU_FLUSH)), \"clflush should be available\");\n@@ -864,1 +864,1 @@\n-    _cpuid_info.feature_flags(); \/\/ These can be changed by VM settings\n+    _cpuid_info.install_feature_flags(); \/\/ These can be changed by VM settings\n@@ -914,2 +914,2 @@\n-    CLEAR_CPU_FEATURE(CPU_SSE4_1);\n-    CLEAR_CPU_FEATURE(CPU_SSE4_2);\n+    _vm_target_features.clear_feature(CPU_SSE4_1);\n+    _vm_target_features.clear_feature(CPU_SSE4_2);\n@@ -919,3 +919,3 @@\n-    CLEAR_CPU_FEATURE(CPU_SSE3);\n-    CLEAR_CPU_FEATURE(CPU_SSSE3);\n-    CLEAR_CPU_FEATURE(CPU_SSE4A);\n+    _vm_target_features.clear_feature(CPU_SSE3);\n+    _vm_target_features.clear_feature(CPU_SSSE3);\n+    _vm_target_features.clear_feature(CPU_SSE4A);\n@@ -925,1 +925,1 @@\n-    CLEAR_CPU_FEATURE(CPU_SSE2);\n+    _vm_target_features.clear_feature(CPU_SSE2);\n@@ -928,1 +928,1 @@\n-    CLEAR_CPU_FEATURE(CPU_SSE);\n+    _vm_target_features.clear_feature(CPU_SSE);\n@@ -994,19 +994,19 @@\n-    CLEAR_CPU_FEATURE(CPU_AVX512F);\n-    CLEAR_CPU_FEATURE(CPU_AVX512DQ);\n-    CLEAR_CPU_FEATURE(CPU_AVX512CD);\n-    CLEAR_CPU_FEATURE(CPU_AVX512BW);\n-    CLEAR_CPU_FEATURE(CPU_AVX512ER);\n-    CLEAR_CPU_FEATURE(CPU_AVX512PF);\n-    CLEAR_CPU_FEATURE(CPU_AVX512VL);\n-    CLEAR_CPU_FEATURE(CPU_AVX512_VPOPCNTDQ);\n-    CLEAR_CPU_FEATURE(CPU_AVX512_VPCLMULQDQ);\n-    CLEAR_CPU_FEATURE(CPU_AVX512_VAES);\n-    CLEAR_CPU_FEATURE(CPU_AVX512_VNNI);\n-    CLEAR_CPU_FEATURE(CPU_AVX512_VBMI);\n-    CLEAR_CPU_FEATURE(CPU_AVX512_VBMI2);\n-    CLEAR_CPU_FEATURE(CPU_AVX512_BITALG);\n-    CLEAR_CPU_FEATURE(CPU_AVX512_IFMA);\n-    CLEAR_CPU_FEATURE(CPU_APX_F);\n-    CLEAR_CPU_FEATURE(CPU_AVX512_FP16);\n-    CLEAR_CPU_FEATURE(CPU_AVX10_1);\n-    CLEAR_CPU_FEATURE(CPU_AVX10_2);\n+    _vm_target_features.clear_feature(CPU_AVX512F);\n+    _vm_target_features.clear_feature(CPU_AVX512DQ);\n+    _vm_target_features.clear_feature(CPU_AVX512CD);\n+    _vm_target_features.clear_feature(CPU_AVX512BW);\n+    _vm_target_features.clear_feature(CPU_AVX512ER);\n+    _vm_target_features.clear_feature(CPU_AVX512PF);\n+    _vm_target_features.clear_feature(CPU_AVX512VL);\n+    _vm_target_features.clear_feature(CPU_AVX512_VPOPCNTDQ);\n+    _vm_target_features.clear_feature(CPU_AVX512_VPCLMULQDQ);\n+    _vm_target_features.clear_feature(CPU_AVX512_VAES);\n+    _vm_target_features.clear_feature(CPU_AVX512_VNNI);\n+    _vm_target_features.clear_feature(CPU_AVX512_VBMI);\n+    _vm_target_features.clear_feature(CPU_AVX512_VBMI2);\n+    _vm_target_features.clear_feature(CPU_AVX512_BITALG);\n+    _vm_target_features.clear_feature(CPU_AVX512_IFMA);\n+    _vm_target_features.clear_feature(CPU_APX_F);\n+    _vm_target_features.clear_feature(CPU_AVX512_FP16);\n+    _vm_target_features.clear_feature(CPU_AVX10_1);\n+    _vm_target_features.clear_feature(CPU_AVX10_2);\n@@ -1025,1 +1025,1 @@\n-    CLEAR_CPU_FEATURE(CPU_APX_F);\n+    _vm_target_features.clear_feature(CPU_APX_F);\n@@ -1029,2 +1029,2 @@\n-    CLEAR_CPU_FEATURE(CPU_AVX2);\n-    CLEAR_CPU_FEATURE(CPU_AVX_IFMA);\n+    _vm_target_features.clear_feature(CPU_AVX2);\n+    _vm_target_features.clear_feature(CPU_AVX_IFMA);\n@@ -1034,4 +1034,4 @@\n-    CLEAR_CPU_FEATURE(CPU_AVX);\n-    CLEAR_CPU_FEATURE(CPU_VZEROUPPER);\n-    CLEAR_CPU_FEATURE(CPU_F16C);\n-    CLEAR_CPU_FEATURE(CPU_SHA512);\n+    _vm_target_features.clear_feature(CPU_AVX);\n+    _vm_target_features.clear_feature(CPU_VZEROUPPER);\n+    _vm_target_features.clear_feature(CPU_F16C);\n+    _vm_target_features.clear_feature(CPU_SHA512);\n@@ -1042,1 +1042,1 @@\n-    CLEAR_CPU_FEATURE(CPU_HT);\n+    _vm_target_features.clear_feature(CPU_HT);\n@@ -1047,17 +1047,17 @@\n-      CLEAR_CPU_FEATURE(CPU_VZEROUPPER);\n-      CLEAR_CPU_FEATURE(CPU_AVX512BW);\n-      CLEAR_CPU_FEATURE(CPU_AVX512VL);\n-      CLEAR_CPU_FEATURE(CPU_AVX512DQ);\n-      CLEAR_CPU_FEATURE(CPU_AVX512_VNNI);\n-      CLEAR_CPU_FEATURE(CPU_AVX512_VAES);\n-      CLEAR_CPU_FEATURE(CPU_AVX512_VPOPCNTDQ);\n-      CLEAR_CPU_FEATURE(CPU_AVX512_VPCLMULQDQ);\n-      CLEAR_CPU_FEATURE(CPU_AVX512_VBMI);\n-      CLEAR_CPU_FEATURE(CPU_AVX512_VBMI2);\n-      CLEAR_CPU_FEATURE(CPU_CLWB);\n-      CLEAR_CPU_FEATURE(CPU_FLUSHOPT);\n-      CLEAR_CPU_FEATURE(CPU_GFNI);\n-      CLEAR_CPU_FEATURE(CPU_AVX512_BITALG);\n-      CLEAR_CPU_FEATURE(CPU_AVX512_IFMA);\n-      CLEAR_CPU_FEATURE(CPU_AVX_IFMA);\n-      CLEAR_CPU_FEATURE(CPU_AVX512_FP16);\n+      _vm_target_features.clear_feature(CPU_VZEROUPPER);\n+      _vm_target_features.clear_feature(CPU_AVX512BW);\n+      _vm_target_features.clear_feature(CPU_AVX512VL);\n+      _vm_target_features.clear_feature(CPU_AVX512DQ);\n+      _vm_target_features.clear_feature(CPU_AVX512_VNNI);\n+      _vm_target_features.clear_feature(CPU_AVX512_VAES);\n+      _vm_target_features.clear_feature(CPU_AVX512_VPOPCNTDQ);\n+      _vm_target_features.clear_feature(CPU_AVX512_VPCLMULQDQ);\n+      _vm_target_features.clear_feature(CPU_AVX512_VBMI);\n+      _vm_target_features.clear_feature(CPU_AVX512_VBMI2);\n+      _vm_target_features.clear_feature(CPU_CLWB);\n+      _vm_target_features.clear_feature(CPU_FLUSHOPT);\n+      _vm_target_features.clear_feature(CPU_GFNI);\n+      _vm_target_features.clear_feature(CPU_AVX512_BITALG);\n+      _vm_target_features.clear_feature(CPU_AVX512_IFMA);\n+      _vm_target_features.clear_feature(CPU_AVX_IFMA);\n+      _vm_target_features.clear_feature(CPU_AVX512_FP16);\n@@ -1105,2 +1105,2 @@\n-  for (uint64_t i = 0; i < dynamic_features_vector_size(); i++) {\n-    insert_features_names(dynamic_features_vector_elem(i), buf + buf_iter, sizeof(buf) - buf_iter, _features_names, 64 * i);\n+  for (uint64_t i = 0; i < features_vector_size(); i++) {\n+    insert_features_names(features_vector_elem(i), buf + buf_iter, sizeof(buf) - buf_iter, _features_names, 64 * i);\n@@ -2108,4 +2108,0 @@\n-void VM_Version::pre_initialize() {\n-  Abstract_VM_Version::init_vm_features((MAX_CPU_FEATURES >> 6) + 1, 6);\n-}\n-\n@@ -2114,0 +2110,2 @@\n+  assert(VM_Features::is_within_feature_vector_bounds(MAX_CPU_FEATURES), \"Feature out of vector bounds\");\n+\n@@ -2889,1 +2887,1 @@\n-void VM_Version::CpuidInfo::feature_flags() const {\n+void VM_Version::CpuidInfo::install_feature_flags() const {\n@@ -2891,1 +2889,1 @@\n-    SET_CPU_FEATURE(CPU_CX8);\n+    _vm_target_features.set_feature(CPU_CX8);\n@@ -2893,1 +2891,1 @@\n-    SET_CPU_FEATURE(CPU_CMOV);\n+    _vm_target_features.set_feature(CPU_CMOV);\n@@ -2895,1 +2893,1 @@\n-    SET_CPU_FEATURE(CPU_FLUSH);\n+    _vm_target_features.set_feature(CPU_FLUSH);\n@@ -2899,1 +2897,1 @@\n-  assert (SUPPORTS_CPU_FEATURE(CPU_FLUSH), \"clflush should be available\");\n+  assert (_vm_target_features.supports_feature(CPU_FLUSH), \"clflush should be available\");\n@@ -2902,1 +2900,1 @@\n-    SET_CPU_FEATURE(CPU_FXSR);\n+    _vm_target_features.set_feature(CPU_FXSR);\n@@ -2905,1 +2903,1 @@\n-    SET_CPU_FEATURE(CPU_HT);\n+    _vm_target_features.set_feature(CPU_HT);\n@@ -2908,1 +2906,1 @@\n-    SET_CPU_FEATURE(CPU_MMX);\n+    _vm_target_features.set_feature(CPU_MMX);\n@@ -2910,1 +2908,1 @@\n-    SET_CPU_FEATURE(CPU_SSE);\n+    _vm_target_features.set_feature(CPU_SSE);\n@@ -2912,1 +2910,1 @@\n-    SET_CPU_FEATURE(CPU_SSE2);\n+    _vm_target_features.set_feature(CPU_SSE2);\n@@ -2914,1 +2912,1 @@\n-    SET_CPU_FEATURE(CPU_SSE3);\n+    _vm_target_features.set_feature(CPU_SSE3);\n@@ -2916,1 +2914,1 @@\n-    SET_CPU_FEATURE(CPU_SSSE3);\n+    _vm_target_features.set_feature(CPU_SSSE3);\n@@ -2918,1 +2916,1 @@\n-    SET_CPU_FEATURE(CPU_SSE4_1);\n+    _vm_target_features.set_feature(CPU_SSE4_1);\n@@ -2920,1 +2918,1 @@\n-    SET_CPU_FEATURE(CPU_SSE4_2);\n+    _vm_target_features.set_feature(CPU_SSE4_2);\n@@ -2922,1 +2920,1 @@\n-    SET_CPU_FEATURE(CPU_POPCNT);\n+    _vm_target_features.set_feature(CPU_POPCNT);\n@@ -2925,1 +2923,1 @@\n-    SET_CPU_FEATURE(CPU_APX_F);\n+    _vm_target_features.set_feature(CPU_APX_F);\n@@ -2931,2 +2929,2 @@\n-    SET_CPU_FEATURE(CPU_AVX);\n-    SET_CPU_FEATURE(CPU_VZEROUPPER);\n+    _vm_target_features.set_feature(CPU_AVX);\n+    _vm_target_features.set_feature(CPU_VZEROUPPER);\n@@ -2934,1 +2932,1 @@\n-      SET_CPU_FEATURE(CPU_SHA512);\n+      _vm_target_features.set_feature(CPU_SHA512);\n@@ -2936,1 +2934,1 @@\n-      SET_CPU_FEATURE(CPU_F16C);\n+      _vm_target_features.set_feature(CPU_F16C);\n@@ -2938,1 +2936,1 @@\n-      SET_CPU_FEATURE(CPU_AVX2);\n+      _vm_target_features.set_feature(CPU_AVX2);\n@@ -2940,1 +2938,1 @@\n-        SET_CPU_FEATURE(CPU_AVX_IFMA);\n+        _vm_target_features.set_feature(CPU_AVX_IFMA);\n@@ -2943,1 +2941,1 @@\n-        SET_CPU_FEATURE(CPU_GFNI);\n+        _vm_target_features.set_feature(CPU_GFNI);\n@@ -2948,1 +2946,1 @@\n-      SET_CPU_FEATURE(CPU_AVX512F);\n+      _vm_target_features.set_feature(CPU_AVX512F);\n@@ -2950,1 +2948,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512CD);\n+        _vm_target_features.set_feature(CPU_AVX512CD);\n@@ -2952,1 +2950,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512DQ);\n+        _vm_target_features.set_feature(CPU_AVX512DQ);\n@@ -2954,1 +2952,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512_IFMA);\n+        _vm_target_features.set_feature(CPU_AVX512_IFMA);\n@@ -2956,1 +2954,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512PF);\n+        _vm_target_features.set_feature(CPU_AVX512PF);\n@@ -2958,1 +2956,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512ER);\n+        _vm_target_features.set_feature(CPU_AVX512ER);\n@@ -2960,1 +2958,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512BW);\n+        _vm_target_features.set_feature(CPU_AVX512BW);\n@@ -2962,1 +2960,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512VL);\n+        _vm_target_features.set_feature(CPU_AVX512VL);\n@@ -2964,1 +2962,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512_VPOPCNTDQ);\n+        _vm_target_features.set_feature(CPU_AVX512_VPOPCNTDQ);\n@@ -2966,1 +2964,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512_VPCLMULQDQ);\n+        _vm_target_features.set_feature(CPU_AVX512_VPCLMULQDQ);\n@@ -2968,1 +2966,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512_VAES);\n+        _vm_target_features.set_feature(CPU_AVX512_VAES);\n@@ -2970,1 +2968,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512_VNNI);\n+        _vm_target_features.set_feature(CPU_AVX512_VNNI);\n@@ -2972,1 +2970,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512_BITALG);\n+        _vm_target_features.set_feature(CPU_AVX512_BITALG);\n@@ -2974,1 +2972,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512_VBMI);\n+        _vm_target_features.set_feature(CPU_AVX512_VBMI);\n@@ -2976,1 +2974,1 @@\n-        SET_CPU_FEATURE(CPU_AVX512_VBMI2);\n+        _vm_target_features.set_feature(CPU_AVX512_VBMI2);\n@@ -2985,15 +2983,15 @@\n-        SET_CPU_FEATURE(CPU_AVX10_1);\n-        SET_CPU_FEATURE(CPU_AVX512F);\n-        SET_CPU_FEATURE(CPU_AVX512CD);\n-        SET_CPU_FEATURE(CPU_AVX512DQ);\n-        SET_CPU_FEATURE(CPU_AVX512PF);\n-        SET_CPU_FEATURE(CPU_AVX512ER);\n-        SET_CPU_FEATURE(CPU_AVX512BW);\n-        SET_CPU_FEATURE(CPU_AVX512VL);\n-        SET_CPU_FEATURE(CPU_AVX512_VPOPCNTDQ);\n-        SET_CPU_FEATURE(CPU_AVX512_VPCLMULQDQ);\n-        SET_CPU_FEATURE(CPU_AVX512_VAES);\n-        SET_CPU_FEATURE(CPU_AVX512_VNNI);\n-        SET_CPU_FEATURE(CPU_AVX512_BITALG);\n-        SET_CPU_FEATURE(CPU_AVX512_VBMI);\n-        SET_CPU_FEATURE(CPU_AVX512_VBMI2);\n+        _vm_target_features.set_feature(CPU_AVX10_1);\n+        _vm_target_features.set_feature(CPU_AVX512F);\n+        _vm_target_features.set_feature(CPU_AVX512CD);\n+        _vm_target_features.set_feature(CPU_AVX512DQ);\n+        _vm_target_features.set_feature(CPU_AVX512PF);\n+        _vm_target_features.set_feature(CPU_AVX512ER);\n+        _vm_target_features.set_feature(CPU_AVX512BW);\n+        _vm_target_features.set_feature(CPU_AVX512VL);\n+        _vm_target_features.set_feature(CPU_AVX512_VPOPCNTDQ);\n+        _vm_target_features.set_feature(CPU_AVX512_VPCLMULQDQ);\n+        _vm_target_features.set_feature(CPU_AVX512_VAES);\n+        _vm_target_features.set_feature(CPU_AVX512_VNNI);\n+        _vm_target_features.set_feature(CPU_AVX512_BITALG);\n+        _vm_target_features.set_feature(CPU_AVX512_VBMI);\n+        _vm_target_features.set_feature(CPU_AVX512_VBMI2);\n@@ -3001,1 +2999,1 @@\n-          SET_CPU_FEATURE(CPU_AVX10_2);\n+          _vm_target_features.set_feature(CPU_AVX10_2);\n@@ -3008,1 +3006,1 @@\n-    SET_CPU_FEATURE(CPU_HV);\n+    _vm_target_features.set_feature(CPU_HV);\n@@ -3010,1 +3008,1 @@\n-    SET_CPU_FEATURE(CPU_BMI1);\n+    _vm_target_features.set_feature(CPU_BMI1);\n@@ -3012,1 +3010,1 @@\n-    SET_CPU_FEATURE(CPU_TSC);\n+    _vm_target_features.set_feature(CPU_TSC);\n@@ -3014,1 +3012,1 @@\n-    SET_CPU_FEATURE(CPU_TSCINV_BIT);\n+    _vm_target_features.set_feature(CPU_TSCINV_BIT);\n@@ -3016,1 +3014,1 @@\n-    SET_CPU_FEATURE(CPU_AES);\n+    _vm_target_features.set_feature(CPU_AES);\n@@ -3018,1 +3016,1 @@\n-    SET_CPU_FEATURE(CPU_LZCNT);\n+    _vm_target_features.set_feature(CPU_LZCNT);\n@@ -3020,1 +3018,1 @@\n-    SET_CPU_FEATURE(CPU_3DNOW_PREFETCH);\n+    _vm_target_features.set_feature(CPU_3DNOW_PREFETCH);\n@@ -3022,1 +3020,1 @@\n-    SET_CPU_FEATURE(CPU_ERMS);\n+    _vm_target_features.set_feature(CPU_ERMS);\n@@ -3024,1 +3022,1 @@\n-    SET_CPU_FEATURE(CPU_FSRM);\n+    _vm_target_features.set_feature(CPU_FSRM);\n@@ -3026,1 +3024,1 @@\n-    SET_CPU_FEATURE(CPU_CLMUL);\n+    _vm_target_features.set_feature(CPU_CLMUL);\n@@ -3028,1 +3026,1 @@\n-    SET_CPU_FEATURE(CPU_RTM);\n+    _vm_target_features.set_feature(CPU_RTM);\n@@ -3030,1 +3028,1 @@\n-     SET_CPU_FEATURE(CPU_ADX);\n+     _vm_target_features.set_feature(CPU_ADX);\n@@ -3032,1 +3030,1 @@\n-    SET_CPU_FEATURE(CPU_BMI2);\n+    _vm_target_features.set_feature(CPU_BMI2);\n@@ -3034,1 +3032,1 @@\n-    SET_CPU_FEATURE(CPU_SHA);\n+    _vm_target_features.set_feature(CPU_SHA);\n@@ -3036,1 +3034,1 @@\n-    SET_CPU_FEATURE(CPU_FMA);\n+    _vm_target_features.set_feature(CPU_FMA);\n@@ -3038,1 +3036,1 @@\n-    SET_CPU_FEATURE(CPU_FLUSHOPT);\n+    _vm_target_features.set_feature(CPU_FLUSHOPT);\n@@ -3040,1 +3038,1 @@\n-    SET_CPU_FEATURE(CPU_CLWB);\n+    _vm_target_features.set_feature(CPU_CLWB);\n@@ -3042,1 +3040,1 @@\n-    SET_CPU_FEATURE(CPU_RDTSCP);\n+    _vm_target_features.set_feature(CPU_RDTSCP);\n@@ -3044,1 +3042,1 @@\n-    SET_CPU_FEATURE(CPU_RDPID);\n+    _vm_target_features.set_feature(CPU_RDPID);\n@@ -3050,1 +3048,1 @@\n-      SET_CPU_FEATURE(CPU_3DNOW_PREFETCH);\n+      _vm_target_features.set_feature(CPU_3DNOW_PREFETCH);\n@@ -3052,1 +3050,1 @@\n-      SET_CPU_FEATURE(CPU_SSE4A);\n+      _vm_target_features.set_feature(CPU_SSE4A);\n@@ -3058,1 +3056,1 @@\n-      SET_CPU_FEATURE(CPU_SERIALIZE);\n+      _vm_target_features.set_feature(CPU_SERIALIZE);\n@@ -3060,1 +3058,1 @@\n-      SET_CPU_FEATURE(CPU_AVX512_FP16);\n+      _vm_target_features.set_feature(CPU_AVX512_FP16);\n@@ -3067,2 +3065,2 @@\n-    assert(SUPPORTS_CPU_FEATURE(CPU_CLWB), \"Check if it is supported?\");\n-    CLEAR_CPU_FEATURE(CPU_CLWB);\n+    assert(_vm_target_features.supports_feature(CPU_CLWB), \"Check if it is supported?\");\n+    _vm_target_features.clear_feature(CPU_CLWB);\n@@ -3073,1 +3071,1 @@\n-    SET_CPU_FEATURE(CPU_PKU);\n+    _vm_target_features.set_feature(CPU_PKU);\n@@ -3076,1 +3074,1 @@\n-    SET_CPU_FEATURE(CPU_OSPKE);\n+    _vm_target_features.set_feature(CPU_OSPKE);\n@@ -3081,1 +3079,1 @@\n-    SET_CPU_FEATURE(CPU_CET_SS);\n+    _vm_target_features.set_feature(CPU_CET_SS);\n@@ -3084,1 +3082,1 @@\n-    SET_CPU_FEATURE(CPU_CET_IBT);\n+    _vm_target_features.set_feature(CPU_CET_IBT);\n@@ -3091,1 +3089,1 @@\n-    SET_CPU_FEATURE(CPU_TSCINV);\n+    _vm_target_features.set_feature(CPU_TSCINV);\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":141,"deletions":143,"binary":false,"changes":284,"status":"modified"},{"patch":"@@ -450,0 +450,1 @@\n+    MAX_CPU_FEATURES\n@@ -452,2 +453,0 @@\n-#define MAX_CPU_FEATURES 64\n-\n@@ -597,1 +596,1 @@\n-    void feature_flags() const;\n+    void install_feature_flags() const;\n@@ -681,4 +680,4 @@\n-    SET_CPU_FEATURE(CPU_SSE);\n-    SET_CPU_FEATURE(CPU_SSE2);\n-    SET_CPU_FEATURE(CPU_AVX);\n-    SET_CPU_FEATURE(CPU_VZEROUPPER);\n+    _vm_target_features.set_feature(CPU_SSE);\n+    _vm_target_features.set_feature(CPU_SSE2);\n+    _vm_target_features.set_feature(CPU_AVX);\n+    _vm_target_features.set_feature(CPU_VZEROUPPER);\n@@ -687,5 +686,5 @@\n-    SET_CPU_FEATURE(CPU_AVX10_1);\n-    SET_CPU_FEATURE(CPU_AVX512F);\n-    SET_CPU_FEATURE(CPU_SSE);\n-    SET_CPU_FEATURE(CPU_SSE2);\n-    SET_CPU_FEATURE(CPU_VZEROUPPER);\n+    _vm_target_features.set_feature(CPU_AVX10_1);\n+    _vm_target_features.set_feature(CPU_AVX512F);\n+    _vm_target_features.set_feature(CPU_SSE);\n+    _vm_target_features.set_feature(CPU_SSE2);\n+    _vm_target_features.set_feature(CPU_VZEROUPPER);\n@@ -693,1 +692,1 @@\n-  static void set_apx_cpuFeatures() { SET_CPU_FEATURE(CPU_APX_F); }\n+  static void set_apx_cpuFeatures() { _vm_target_features.set_feature(CPU_APX_F); }\n@@ -695,4 +694,4 @@\n-    SET_CPU_FEATURE(CPU_BMI1);\n-    SET_CPU_FEATURE(CPU_BMI2);\n-    SET_CPU_FEATURE(CPU_LZCNT);\n-    SET_CPU_FEATURE(CPU_POPCNT);\n+    _vm_target_features.set_feature(CPU_BMI1);\n+    _vm_target_features.set_feature(CPU_BMI2);\n+    _vm_target_features.set_feature(CPU_LZCNT);\n+    _vm_target_features.set_feature(CPU_POPCNT);\n@@ -702,1 +701,0 @@\n-  static void pre_initialize();\n@@ -756,33 +754,33 @@\n-  static bool supports_cmov()         { return SUPPORTS_CPU_FEATURE(CPU_CMOV); }\n-  static bool supports_fxsr()         { return SUPPORTS_CPU_FEATURE(CPU_FXSR); }\n-  static bool supports_ht()           { return SUPPORTS_CPU_FEATURE(CPU_HT); }\n-  static bool supports_mmx()          { return SUPPORTS_CPU_FEATURE(CPU_MMX); }\n-  static bool supports_sse()          { return SUPPORTS_CPU_FEATURE(CPU_SSE); }\n-  static bool supports_sse2()         { return SUPPORTS_CPU_FEATURE(CPU_SSE2); }\n-  static bool supports_sse3()         { return SUPPORTS_CPU_FEATURE(CPU_SSE3); }\n-  static bool supports_ssse3()        { return SUPPORTS_CPU_FEATURE(CPU_SSSE3); }\n-  static bool supports_sse4_1()       { return SUPPORTS_CPU_FEATURE(CPU_SSE4_1); }\n-  static bool supports_sse4_2()       { return SUPPORTS_CPU_FEATURE(CPU_SSE4_2); }\n-  static bool supports_popcnt()       { return SUPPORTS_CPU_FEATURE(CPU_POPCNT); }\n-  static bool supports_avx()          { return SUPPORTS_CPU_FEATURE(CPU_AVX); }\n-  static bool supports_avx2()         { return SUPPORTS_CPU_FEATURE(CPU_AVX2); }\n-  static bool supports_tsc()          { return SUPPORTS_CPU_FEATURE(CPU_TSC); }\n-  static bool supports_rdtscp()       { return SUPPORTS_CPU_FEATURE(CPU_RDTSCP); }\n-  static bool supports_rdpid()        { return SUPPORTS_CPU_FEATURE(CPU_RDPID); }\n-  static bool supports_aes()          { return SUPPORTS_CPU_FEATURE(CPU_AES); }\n-  static bool supports_erms()         { return SUPPORTS_CPU_FEATURE(CPU_ERMS); }\n-  static bool supports_fsrm()         { return SUPPORTS_CPU_FEATURE(CPU_FSRM); }\n-  static bool supports_clmul()        { return SUPPORTS_CPU_FEATURE(CPU_CLMUL); }\n-  static bool supports_rtm()          { return SUPPORTS_CPU_FEATURE(CPU_RTM); }\n-  static bool supports_bmi1()         { return SUPPORTS_CPU_FEATURE(CPU_BMI1); }\n-  static bool supports_bmi2()         { return SUPPORTS_CPU_FEATURE(CPU_BMI2); }\n-  static bool supports_adx()          { return SUPPORTS_CPU_FEATURE(CPU_ADX); }\n-  static bool supports_evex()         { return SUPPORTS_CPU_FEATURE(CPU_AVX512F); }\n-  static bool supports_avx512dq()     { return SUPPORTS_CPU_FEATURE(CPU_AVX512DQ); }\n-  static bool supports_avx512ifma()   { return SUPPORTS_CPU_FEATURE(CPU_AVX512_IFMA); }\n-  static bool supports_avxifma()      { return SUPPORTS_CPU_FEATURE(CPU_AVX_IFMA); }\n-  static bool supports_avx512pf()     { return SUPPORTS_CPU_FEATURE(CPU_AVX512PF); }\n-  static bool supports_avx512er()     { return SUPPORTS_CPU_FEATURE(CPU_AVX512ER); }\n-  static bool supports_avx512cd()     { return SUPPORTS_CPU_FEATURE(CPU_AVX512CD); }\n-  static bool supports_avx512bw()     { return SUPPORTS_CPU_FEATURE(CPU_AVX512BW); }\n-  static bool supports_avx512vl()     { return SUPPORTS_CPU_FEATURE(CPU_AVX512VL); }\n+  static bool supports_cmov()         { return _vm_target_features.supports_feature(CPU_CMOV); }\n+  static bool supports_fxsr()         { return _vm_target_features.supports_feature(CPU_FXSR); }\n+  static bool supports_ht()           { return _vm_target_features.supports_feature(CPU_HT); }\n+  static bool supports_mmx()          { return _vm_target_features.supports_feature(CPU_MMX); }\n+  static bool supports_sse()          { return _vm_target_features.supports_feature(CPU_SSE); }\n+  static bool supports_sse2()         { return _vm_target_features.supports_feature(CPU_SSE2); }\n+  static bool supports_sse3()         { return _vm_target_features.supports_feature(CPU_SSE3); }\n+  static bool supports_ssse3()        { return _vm_target_features.supports_feature(CPU_SSSE3); }\n+  static bool supports_sse4_1()       { return _vm_target_features.supports_feature(CPU_SSE4_1); }\n+  static bool supports_sse4_2()       { return _vm_target_features.supports_feature(CPU_SSE4_2); }\n+  static bool supports_popcnt()       { return _vm_target_features.supports_feature(CPU_POPCNT); }\n+  static bool supports_avx()          { return _vm_target_features.supports_feature(CPU_AVX); }\n+  static bool supports_avx2()         { return _vm_target_features.supports_feature(CPU_AVX2); }\n+  static bool supports_tsc()          { return _vm_target_features.supports_feature(CPU_TSC); }\n+  static bool supports_rdtscp()       { return _vm_target_features.supports_feature(CPU_RDTSCP); }\n+  static bool supports_rdpid()        { return _vm_target_features.supports_feature(CPU_RDPID); }\n+  static bool supports_aes()          { return _vm_target_features.supports_feature(CPU_AES); }\n+  static bool supports_erms()         { return _vm_target_features.supports_feature(CPU_ERMS); }\n+  static bool supports_fsrm()         { return _vm_target_features.supports_feature(CPU_FSRM); }\n+  static bool supports_clmul()        { return _vm_target_features.supports_feature(CPU_CLMUL); }\n+  static bool supports_rtm()          { return _vm_target_features.supports_feature(CPU_RTM); }\n+  static bool supports_bmi1()         { return _vm_target_features.supports_feature(CPU_BMI1); }\n+  static bool supports_bmi2()         { return _vm_target_features.supports_feature(CPU_BMI2); }\n+  static bool supports_adx()          { return _vm_target_features.supports_feature(CPU_ADX); }\n+  static bool supports_evex()         { return _vm_target_features.supports_feature(CPU_AVX512F); }\n+  static bool supports_avx512dq()     { return _vm_target_features.supports_feature(CPU_AVX512DQ); }\n+  static bool supports_avx512ifma()   { return _vm_target_features.supports_feature(CPU_AVX512_IFMA); }\n+  static bool supports_avxifma()      { return _vm_target_features.supports_feature(CPU_AVX_IFMA); }\n+  static bool supports_avx512pf()     { return _vm_target_features.supports_feature(CPU_AVX512PF); }\n+  static bool supports_avx512er()     { return _vm_target_features.supports_feature(CPU_AVX512ER); }\n+  static bool supports_avx512cd()     { return _vm_target_features.supports_feature(CPU_AVX512CD); }\n+  static bool supports_avx512bw()     { return _vm_target_features.supports_feature(CPU_AVX512BW); }\n+  static bool supports_avx512vl()     { return _vm_target_features.supports_feature(CPU_AVX512VL); }\n@@ -797,1 +795,1 @@\n-  static bool supports_apx_f()        { return SUPPORTS_CPU_FEATURE(CPU_APX_F); }\n+  static bool supports_apx_f()        { return _vm_target_features.supports_feature(CPU_APX_F); }\n@@ -799,20 +797,20 @@\n-  static bool supports_sha()          { return SUPPORTS_CPU_FEATURE(CPU_SHA); }\n-  static bool supports_fma()          { return SUPPORTS_CPU_FEATURE(CPU_FMA) && supports_avx(); }\n-  static bool supports_vzeroupper()   { return SUPPORTS_CPU_FEATURE(CPU_VZEROUPPER); }\n-  static bool supports_avx512_vpopcntdq()  { return SUPPORTS_CPU_FEATURE(CPU_AVX512_VPOPCNTDQ); }\n-  static bool supports_avx512_vpclmulqdq() { return SUPPORTS_CPU_FEATURE(CPU_AVX512_VPCLMULQDQ); }\n-  static bool supports_avx512_vaes()  { return SUPPORTS_CPU_FEATURE(CPU_AVX512_VAES); }\n-  static bool supports_gfni()         { return SUPPORTS_CPU_FEATURE(CPU_GFNI); }\n-  static bool supports_avx512_vnni()  { return SUPPORTS_CPU_FEATURE(CPU_AVX512_VNNI); }\n-  static bool supports_avx512_bitalg()  { return SUPPORTS_CPU_FEATURE(CPU_AVX512_BITALG); }\n-  static bool supports_avx512_vbmi()  { return SUPPORTS_CPU_FEATURE(CPU_AVX512_VBMI); }\n-  static bool supports_avx512_vbmi2() { return SUPPORTS_CPU_FEATURE(CPU_AVX512_VBMI2); }\n-  static bool supports_avx512_fp16()  { return SUPPORTS_CPU_FEATURE(CPU_AVX512_FP16); }\n-  static bool supports_hv()           { return SUPPORTS_CPU_FEATURE(CPU_HV); }\n-  static bool supports_serialize()    { return SUPPORTS_CPU_FEATURE(CPU_SERIALIZE); }\n-  static bool supports_f16c()         { return SUPPORTS_CPU_FEATURE(CPU_F16C); }\n-  static bool supports_pku()          { return SUPPORTS_CPU_FEATURE(CPU_PKU); }\n-  static bool supports_ospke()        { return SUPPORTS_CPU_FEATURE(CPU_OSPKE); }\n-  static bool supports_cet_ss()       { return SUPPORTS_CPU_FEATURE(CPU_CET_SS); }\n-  static bool supports_cet_ibt()      { return SUPPORTS_CPU_FEATURE(CPU_CET_IBT); }\n-  static bool supports_sha512()       { return SUPPORTS_CPU_FEATURE(CPU_SHA512); }\n+  static bool supports_sha()          { return _vm_target_features.supports_feature(CPU_SHA); }\n+  static bool supports_fma()          { return _vm_target_features.supports_feature(CPU_FMA) && supports_avx(); }\n+  static bool supports_vzeroupper()   { return _vm_target_features.supports_feature(CPU_VZEROUPPER); }\n+  static bool supports_avx512_vpopcntdq()  { return _vm_target_features.supports_feature(CPU_AVX512_VPOPCNTDQ); }\n+  static bool supports_avx512_vpclmulqdq() { return _vm_target_features.supports_feature(CPU_AVX512_VPCLMULQDQ); }\n+  static bool supports_avx512_vaes()  { return _vm_target_features.supports_feature(CPU_AVX512_VAES); }\n+  static bool supports_gfni()         { return _vm_target_features.supports_feature(CPU_GFNI); }\n+  static bool supports_avx512_vnni()  { return _vm_target_features.supports_feature(CPU_AVX512_VNNI); }\n+  static bool supports_avx512_bitalg()  { return _vm_target_features.supports_feature(CPU_AVX512_BITALG); }\n+  static bool supports_avx512_vbmi()  { return _vm_target_features.supports_feature(CPU_AVX512_VBMI); }\n+  static bool supports_avx512_vbmi2() { return _vm_target_features.supports_feature(CPU_AVX512_VBMI2); }\n+  static bool supports_avx512_fp16()  { return _vm_target_features.supports_feature(CPU_AVX512_FP16); }\n+  static bool supports_hv()           { return _vm_target_features.supports_feature(CPU_HV); }\n+  static bool supports_serialize()    { return _vm_target_features.supports_feature(CPU_SERIALIZE); }\n+  static bool supports_f16c()         { return _vm_target_features.supports_feature(CPU_F16C); }\n+  static bool supports_pku()          { return _vm_target_features.supports_feature(CPU_PKU); }\n+  static bool supports_ospke()        { return _vm_target_features.supports_feature(CPU_OSPKE); }\n+  static bool supports_cet_ss()       { return _vm_target_features.supports_feature(CPU_CET_SS); }\n+  static bool supports_cet_ibt()      { return _vm_target_features.supports_feature(CPU_CET_IBT); }\n+  static bool supports_sha512()       { return _vm_target_features.supports_feature(CPU_SHA512); }\n@@ -823,2 +821,2 @@\n-  static bool supports_avx10_1()      { return SUPPORTS_CPU_FEATURE(CPU_AVX10_1);}\n-  static bool supports_avx10_2()      { return SUPPORTS_CPU_FEATURE(CPU_AVX10_2);}\n+  static bool supports_avx10_1()      { return _vm_target_features.supports_feature(CPU_AVX10_1);}\n+  static bool supports_avx10_2()      { return _vm_target_features.supports_feature(CPU_AVX10_2);}\n@@ -829,1 +827,1 @@\n-  static bool cpu_supports_evex()     { return SUPPORTS_CPU_FEATURE_AUX(CPU_AVX512F); }\n+  static bool cpu_supports_evex()     { return _cpu_target_features.supports_feature(CPU_AVX512F); }\n@@ -867,3 +865,3 @@\n-  static bool supports_3dnow_prefetch()    { return SUPPORTS_CPU_FEATURE(CPU_3DNOW_PREFETCH); }\n-  static bool supports_lzcnt()    { return SUPPORTS_CPU_FEATURE(CPU_LZCNT); }\n-  static bool supports_sse4a()    { return SUPPORTS_CPU_FEATURE(CPU_SSE4A); }\n+  static bool supports_3dnow_prefetch()    { return _vm_target_features.supports_feature(CPU_3DNOW_PREFETCH); }\n+  static bool supports_lzcnt()    { return _vm_target_features.supports_feature(CPU_LZCNT); }\n+  static bool supports_sse4a()    { return _vm_target_features.supports_feature(CPU_SSE4A); }\n@@ -876,1 +874,1 @@\n-    return SUPPORTS_CPU_FEATURE(CPU_TSCINV_BIT);\n+    return _vm_target_features.supports_feature(CPU_TSCINV_BIT);\n@@ -879,1 +877,1 @@\n-    return SUPPORTS_CPU_FEATURE(CPU_TSCINV);\n+    return _vm_target_features.supports_feature(CPU_TSCINV);\n@@ -940,2 +938,2 @@\n-  static bool supports_clflushopt() { return (SUPPORTS_CPU_FEATURE(CPU_FLUSHOPT)); }\n-  static bool supports_clwb() { return (SUPPORTS_CPU_FEATURE(CPU_CLWB)); }\n+  static bool supports_clflushopt() { return (_vm_target_features.supports_feature(CPU_FLUSHOPT)); }\n+  static bool supports_clwb() { return (_vm_target_features.supports_feature(CPU_CLWB)); }\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":80,"deletions":82,"binary":false,"changes":162,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-  static void pre_initialize();\n","filename":"src\/hotspot\/cpu\/zero\/vm_version_zero.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-  static_field(Abstract_VM_Version,            _dynamic_features,                      VM_Features)                                  \\\n+  static_field(Abstract_VM_Version,            _vm_target_features,                    VM_Features)                                  \\\n@@ -152,3 +152,3 @@\n-  nonstatic_field(VM_Features,                 _dynamic_features_vector,               uint64_t*)                                    \\\n-  nonstatic_field(VM_Features,                 _dynamic_features_vector_size,          uint32_t)                                     \\\n-  nonstatic_field(VM_Features,                 _dynamic_features_element_shift_count,  uint32_t)                                     \\\n+  nonstatic_field(VM_Features,                 _features_vector,                       VM_Features::FeatureVector)                   \\\n+  static_field(VM_Features,                    _features_vector_size,                  uint32_t)                                     \\\n+  static_field(VM_Features,                    _features_vector_element_shift_count,   uint32_t)                                     \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,2 +40,4 @@\n-VM_Features Abstract_VM_Version::_dynamic_features = {nullptr, 0, 0};\n-VM_Features Abstract_VM_Version::_dynamic_cpu_features = {nullptr, 0, 0};\n+uint32_t VM_Features::_features_vector_element_shift_count = 6;\n+uint32_t VM_Features::_features_vector_size = MAX_FEATURE_VEC_SIZE;\n+VM_Features Abstract_VM_Version::_vm_target_features = {{0, 0, 0, 0}};\n+VM_Features Abstract_VM_Version::_cpu_target_features = {{0, 0, 0, 0}};\n@@ -423,10 +425,0 @@\n-\n-void VM_Features::init_vm_features(uint32_t size, uint32_t elem_shift_count) {\n-  _dynamic_features_vector_size = size;\n-  _dynamic_features_element_shift_count = elem_shift_count;\n-\n-  uint64_t* features_memory = NEW_C_HEAP_ARRAY(uint64_t, size, mtInternal);\n-  memset(features_memory, 0, sizeof(uint64_t*) * size);\n-  _dynamic_features_vector = features_memory;\n-  }\n-\n@@ -434,4 +426,4 @@\n-  uint32_t index = feature >> _dynamic_features_element_shift_count;\n-  uint32_t index_mask = (1 << _dynamic_features_element_shift_count) - 1;\n-  assert(index < _dynamic_features_vector_size, \"Features array index out of bounds\");\n-  _dynamic_features_vector[index] |= (1ULL << (feature & index_mask));\n+  uint32_t index = feature >> _features_vector_element_shift_count;\n+  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n+  assert(index < _features_vector_size, \"Features array index out of bounds\");\n+  _features_vector[index] |= (1ULL << (feature & index_mask));\n@@ -441,4 +433,4 @@\n-  uint32_t index = feature >> _dynamic_features_element_shift_count;\n-  uint32_t index_mask = (1 << _dynamic_features_element_shift_count) - 1;\n-  assert(index < _dynamic_features_vector_size, \"Features array index out of bounds\");\n-  _dynamic_features_vector[index] &= ~(1ULL << (feature & index_mask));\n+  uint32_t index = feature >> _features_vector_element_shift_count;\n+  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n+  assert(index < _features_vector_size, \"Features array index out of bounds\");\n+  _features_vector[index] &= ~(1ULL << (feature & index_mask));\n@@ -448,4 +440,8 @@\n-  uint32_t index = feature >> _dynamic_features_element_shift_count;\n-  uint32_t index_mask = (1 << _dynamic_features_element_shift_count) - 1;\n-  assert(index < _dynamic_features_vector_size, \"Features array index out of bounds\");\n-  return (_dynamic_features_vector[index] & (1ULL << (feature & index_mask))) != 0;\n+  uint32_t index = feature >> _features_vector_element_shift_count;\n+  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n+  assert(index < _features_vector_size, \"Features array index out of bounds\");\n+  return (_features_vector[index] & (1ULL << (feature & index_mask))) != 0;\n+}\n+\n+bool VM_Features::is_within_feature_vector_bounds(uint32_t num_features) {\n+   return _features_vector_size >= ((num_features >> _features_vector_element_shift_count) + 1);\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":20,"deletions":24,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+#define MAX_FEATURE_VEC_SIZE 4\n+\n@@ -49,5 +51,1 @@\n-  \/\/ Dynamically sized feature flags currently only used by x86 backend,\n-  \/\/ can be affected by VM settings.\n-  uint64_t* _dynamic_features_vector;\n-  uint32_t _dynamic_features_vector_size;\n-  uint32_t _dynamic_features_element_shift_count;\n+  using FeatureVector = uint64_t [MAX_FEATURE_VEC_SIZE];\n@@ -55,1 +53,2 @@\n-  void init_vm_features(uint32_t size, uint32_t elem_shift_count);\n+  \/\/ Feature vector bitmap currently only used by x86 backend.\n+  FeatureVector _features_vector;\n@@ -57,1 +56,2 @@\n-  void set_feature(uint32_t feature);\n+  \/\/ Size of feature vector bitmap.\n+  static uint32_t _features_vector_size;\n@@ -59,1 +59,3 @@\n-  void clear_feature(uint32_t feature);\n+  \/\/ Log2 of feature vector element size in bits, used by JVMCI to check enabled feature bits.\n+  \/\/ Refer HotSpotJVMCIBackendFactory::convertFeaturesVector.\n+  static uint32_t _features_vector_element_shift_count;\n@@ -61,0 +63,4 @@\n+  static bool is_within_feature_vector_bounds(uint32_t num_features);\n+\n+  void set_feature(uint32_t feature);\n+  void clear_feature(uint32_t feature);\n@@ -84,1 +90,2 @@\n-  static VM_Features _dynamic_features;\n+  \/\/ CPU feature flags vector, can be affected by VM settings.\n+  static VM_Features _vm_target_features;\n@@ -86,18 +93,2 @@\n-  static VM_Features _dynamic_cpu_features;\n-\n-#define SET_CPU_FEATURE(feature) \\\n-  _dynamic_features.set_feature(feature)\n-\n-#define CLEAR_CPU_FEATURE(feature) \\\n-  _dynamic_features.clear_feature(feature)\n-\n-#define SUPPORTS_CPU_FEATURE(feature) \\\n-  _dynamic_features.supports_feature(feature)\n-\n-#define SUPPORTS_CPU_FEATURE_AUX(feature) \\\n-  _dynamic_cpu_features.supports_feature(feature)\n-\n-  static void init_vm_features(uint32_t size, uint32_t elem_shift_count) {\n-    _dynamic_features.init_vm_features(size, elem_shift_count);\n-    _dynamic_cpu_features.init_vm_features(size, elem_shift_count);\n-  }\n+  \/\/ Original CPU feature flags vector, not affected by VM settings.\n+  static VM_Features _cpu_target_features;\n@@ -106,3 +97,2 @@\n-    assert(_dynamic_cpu_features._dynamic_features_vector_size == _dynamic_features._dynamic_features_vector_size, \"\");\n-    memcpy(_dynamic_cpu_features._dynamic_features_vector, _dynamic_features._dynamic_features_vector,\n-           sizeof(uint64_t) * _dynamic_features._dynamic_features_vector_size);\n+    memcpy(_cpu_target_features._features_vector, _vm_target_features._features_vector,\n+           sizeof(uint64_t) * VM_Features::_features_vector_size);\n@@ -112,1 +102,1 @@\n-    memset(_dynamic_features._dynamic_features_vector, 0, sizeof(uint64_t) * _dynamic_features._dynamic_features_vector_size);\n+    memset(_vm_target_features._features_vector, 0, sizeof(uint64_t) * VM_Features::_features_vector_size);\n@@ -116,2 +106,1 @@\n-    return (_dynamic_features._dynamic_features_vector_size > 0) &&\n-           (_dynamic_features._dynamic_features_vector != nullptr);\n+    return VM_Features::_features_vector_size > 0;\n@@ -120,2 +109,2 @@\n-  static uint32_t dynamic_features_vector_size() {\n-    return _dynamic_features._dynamic_features_vector_size;\n+  static uint32_t features_vector_size() {\n+    return VM_Features::_features_vector_size;\n@@ -124,3 +113,3 @@\n-  static uint64_t dynamic_features_vector_elem(uint32_t elem) {\n-    assert(elem < _dynamic_features._dynamic_features_vector_size, \"\");\n-    return _dynamic_features._dynamic_features_vector[elem];\n+  static uint64_t features_vector_elem(uint32_t elem) {\n+    assert(elem < VM_Features::_features_vector_size, \"\");\n+    return _vm_target_features._features_vector[elem];\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":27,"deletions":38,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -128,1 +128,0 @@\n-  VM_Version_pre_init();          \/\/ allocate feature flags arrays\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -710,1 +710,1 @@\n-     static_field(Abstract_VM_Version,         _dynamic_features,                             VM_Features)                           \\\n+     static_field(Abstract_VM_Version,         _vm_target_features,                           VM_Features)                           \\\n@@ -712,3 +712,3 @@\n-     nonstatic_field(VM_Features,              _dynamic_features_vector,                      uint64_t*)                             \\\n-     nonstatic_field(VM_Features,              _dynamic_features_vector_size,                 uint32_t)                              \\\n-     nonstatic_field(VM_Features,              _dynamic_features_element_shift_count,         uint32_t)                              \\\n+     nonstatic_field(VM_Features,              _features_vector,                              VM_Features::FeatureVector)            \\\n+     static_field(VM_Features,                 _features_vector_size,                         uint32_t)                              \\\n+     static_field(VM_Features,                 _features_vector_element_shift_count,          uint32_t)                              \\\n@@ -1173,0 +1173,1 @@\n+  declare_toplevel_type(VM_Features::FeatureVector)                       \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,4 +30,0 @@\n-void VM_Version_pre_init() {\n-  VM_Version::pre_initialize();\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/vm_version.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,5 +92,4 @@\n-     * @param dynamic_features_vector_pointer pointer to dynamic feature bit vector of CPU features\n-     * @param dynamic_features_vector_offset offset of dynamic_feature_vector field in {@code VM_Features}\n-     * @param dynamic_features_vector_size_offset offset of dynamic_feature_vector_size field in {@code VM_Features}\n-     * @param dynamic_features_element_shift_count_offset offset of dynamic_features_element_shift_count field in {@code VM_Features}\n-     *             ,it holds the base2 logarithmic value of dynamic feature bit vector lanesize in bits.\n+     * @param features_pointer pointer to {@code _vm_target_features} field of {@code Abstract_VM_Version}\n+     * @param features_vector_offset offset of feature_vector field in {@code VM_Features}\n+     * @param features_vector_size_offset offset of feature_vector_size field in {@code VM_Features}\n+     * @param features_element_shift_count log2 of dynamic feature bit vector lanesize in bits.\n@@ -102,1 +101,1 @@\n-    static <CPUFeatureType extends Enum<CPUFeatureType>> EnumSet<CPUFeatureType> convertDynamicFeaturesVector(\n+    static <CPUFeatureType extends Enum<CPUFeatureType>> EnumSet<CPUFeatureType> convertFeaturesVector(\n@@ -105,4 +104,4 @@\n-                    long dynamic_features_pointer,\n-                    long dynamic_features_vector_offset,\n-                    long dynamic_features_vector_size_offset,\n-                    long dynamic_features_element_shift_count_offset,\n+                    long features_pointer,\n+                    long features_vector_offset,\n+                    long features_vector_size,\n+                    long features_element_shift_count,\n@@ -113,4 +112,0 @@\n-        long dynamic_features_vector_pointer = UNSAFE.getLong(dynamic_features_pointer + dynamic_features_vector_offset);\n-        long dynamic_features_vector_size = UNSAFE.getLong(dynamic_features_pointer + dynamic_features_vector_size_offset);\n-        long dynamic_features_element_shift_count = UNSAFE.getLong(dynamic_features_pointer + dynamic_features_element_shift_count_offset);\n-\n@@ -124,2 +119,2 @@\n-                    long dynamic_features_vector_index = bitIndex >>> dynamic_features_element_shift_count;\n-                    assert dynamic_features_vector_index < dynamic_features_vector_size;\n+                    long features_vector_index = bitIndex >>> features_element_shift_count;\n+                    assert features_vector_index < features_vector_size;\n@@ -127,2 +122,2 @@\n-                    long  dynamic_features_element_bitsize = (1L << dynamic_features_element_shift_count);\n-                    assert (dynamic_features_element_bitsize & (dynamic_features_element_bitsize - 1)) == 0;\n+                    long  features_element_bitsize = (1L << features_element_shift_count);\n+                    assert (features_element_bitsize & (features_element_bitsize - 1)) == 0;\n@@ -130,3 +125,3 @@\n-                    long  dynamic_features_element_size = dynamic_features_element_bitsize \/ Byte.SIZE;\n-                    long features = UNSAFE.getLong(dynamic_features_vector_pointer +\n-                                                   dynamic_features_vector_index * dynamic_features_element_size);\n+                    long  features_element_size = features_element_bitsize \/ Byte.SIZE;\n+                    long features = UNSAFE.getLong(features_pointer + features_vector_offset +\n+                                                   features_vector_index * features_element_size);\n@@ -134,1 +129,1 @@\n-                    long effective_bitMask = 1L << (bitIndex & (dynamic_features_element_bitsize - 1));\n+                    long effective_bitMask = 1L << (bitIndex & (features_element_bitsize - 1));\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIBackendFactory.java","additions":18,"deletions":23,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,6 +53,6 @@\n-        EnumSet<CPUFeature> features = HotSpotJVMCIBackendFactory.convertDynamicFeaturesVector(CPUFeature.class, constants,\n-                                                                                               config.vmVersionDynFeatures,\n-                                                                                               config.vmFeaturesDynFeaturesVecOffset,\n-                                                                                               config.vmFeaturesDynFeaturesVecSizeOffset,\n-                                                                                               config.vmFeaturesDynFeaturesElemShiftCntOffset,\n-                                                                                               renaming);\n+        EnumSet<CPUFeature> features = HotSpotJVMCIBackendFactory.convertFeaturesVector(CPUFeature.class, constants,\n+                                                                                        config.vmVersionTargetFeatures,\n+                                                                                        config.vmFeaturesFeaturesVecOffset,\n+                                                                                        config.vmFeaturesFeaturesVecSize,\n+                                                                                        config.vmFeaturesFeaturesElemShiftCnt,\n+                                                                                        renaming);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/amd64\/AMD64HotSpotJVMCIBackendFactory.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,4 @@\n+    final long vmVersionTargetFeatures = getFieldAddress(\"Abstract_VM_Version::_vm_target_features\", \"VM_Features\");\n+    final long vmFeaturesFeaturesVecOffset = getFieldOffset(\"VM_Features::_features_vector\", Long.class, \"VM_Features::FeatureVector\");\n+    final long vmFeaturesFeaturesVecSize = getFieldValue(\"VM_Features::_features_vector_size\", Long.class, \"uint32_t\");\n+    final long vmFeaturesFeaturesElemShiftCnt = getFieldValue(\"VM_Features::_features_vector_element_shift_count\", Long.class, \"uint32_t\");\n@@ -50,5 +54,0 @@\n-    final long vmFeaturesDynFeaturesVecOffset = getFieldOffset(\"VM_Features::_dynamic_features_vector\", Long.class, \"uint64_t*\");\n-    final long vmFeaturesDynFeaturesVecSizeOffset = getFieldOffset(\"VM_Features::_dynamic_features_vector_size\", Long.class, \"uint32_t\");\n-    final long vmFeaturesDynFeaturesElemShiftCntOffset = getFieldOffset(\"VM_Features::_dynamic_features_element_shift_count\", Long.class, \"uint32_t\");\n-    final long vmVersionDynFeatures = getFieldAddress(\"Abstract_VM_Version::_dynamic_features\", \"VM_Features\");\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/amd64\/AMD64HotSpotVMConfig.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbLongConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}