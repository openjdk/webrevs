{"files":[{"patch":"@@ -66,0 +66,5 @@\n+uint32_t VM_Features::_features_vector_element_shift_count = 6;\n+uint32_t VM_Features::_features_vector_size = MAX_FEATURE_VEC_SIZE;\n+VM_Features VM_Version::_features;\n+VM_Features VM_Version::_cpu_features;\n+\n@@ -85,1 +90,1 @@\n-  assert ((!Universe::is_fully_initialized() || _vm_target_features.supports_feature(CPU_FLUSH)), \"clflush should be available\");\n+  assert ((!Universe::is_fully_initialized() || _features.supports_feature(CPU_FLUSH)), \"clflush should be available\");\n@@ -860,2 +865,2 @@\n-    _cpuid_info.install_feature_flags(); \/\/ These can be changed by VM settings\n-    Abstract_VM_Version::sync_cpu_features(); \/\/ Preserve features\n+    _features = _cpuid_info.feature_flags(); \/\/ These can be changed by VM settings\n+    _cpu_features = _features; \/\/ Preserve features\n@@ -910,2 +915,2 @@\n-    _vm_target_features.clear_feature(CPU_SSE4_1);\n-    _vm_target_features.clear_feature(CPU_SSE4_2);\n+    _features.clear_feature(CPU_SSE4_1);\n+    _features.clear_feature(CPU_SSE4_2);\n@@ -915,3 +920,3 @@\n-    _vm_target_features.clear_feature(CPU_SSE3);\n-    _vm_target_features.clear_feature(CPU_SSSE3);\n-    _vm_target_features.clear_feature(CPU_SSE4A);\n+    _features.clear_feature(CPU_SSE3);\n+    _features.clear_feature(CPU_SSSE3);\n+    _features.clear_feature(CPU_SSE4A);\n@@ -921,1 +926,1 @@\n-    _vm_target_features.clear_feature(CPU_SSE2);\n+    _features.clear_feature(CPU_SSE2);\n@@ -924,1 +929,1 @@\n-    _vm_target_features.clear_feature(CPU_SSE);\n+    _features.clear_feature(CPU_SSE);\n@@ -990,19 +995,19 @@\n-    _vm_target_features.clear_feature(CPU_AVX512F);\n-    _vm_target_features.clear_feature(CPU_AVX512DQ);\n-    _vm_target_features.clear_feature(CPU_AVX512CD);\n-    _vm_target_features.clear_feature(CPU_AVX512BW);\n-    _vm_target_features.clear_feature(CPU_AVX512ER);\n-    _vm_target_features.clear_feature(CPU_AVX512PF);\n-    _vm_target_features.clear_feature(CPU_AVX512VL);\n-    _vm_target_features.clear_feature(CPU_AVX512_VPOPCNTDQ);\n-    _vm_target_features.clear_feature(CPU_AVX512_VPCLMULQDQ);\n-    _vm_target_features.clear_feature(CPU_AVX512_VAES);\n-    _vm_target_features.clear_feature(CPU_AVX512_VNNI);\n-    _vm_target_features.clear_feature(CPU_AVX512_VBMI);\n-    _vm_target_features.clear_feature(CPU_AVX512_VBMI2);\n-    _vm_target_features.clear_feature(CPU_AVX512_BITALG);\n-    _vm_target_features.clear_feature(CPU_AVX512_IFMA);\n-    _vm_target_features.clear_feature(CPU_APX_F);\n-    _vm_target_features.clear_feature(CPU_AVX512_FP16);\n-    _vm_target_features.clear_feature(CPU_AVX10_1);\n-    _vm_target_features.clear_feature(CPU_AVX10_2);\n+    _features.clear_feature(CPU_AVX512F);\n+    _features.clear_feature(CPU_AVX512DQ);\n+    _features.clear_feature(CPU_AVX512CD);\n+    _features.clear_feature(CPU_AVX512BW);\n+    _features.clear_feature(CPU_AVX512ER);\n+    _features.clear_feature(CPU_AVX512PF);\n+    _features.clear_feature(CPU_AVX512VL);\n+    _features.clear_feature(CPU_AVX512_VPOPCNTDQ);\n+    _features.clear_feature(CPU_AVX512_VPCLMULQDQ);\n+    _features.clear_feature(CPU_AVX512_VAES);\n+    _features.clear_feature(CPU_AVX512_VNNI);\n+    _features.clear_feature(CPU_AVX512_VBMI);\n+    _features.clear_feature(CPU_AVX512_VBMI2);\n+    _features.clear_feature(CPU_AVX512_BITALG);\n+    _features.clear_feature(CPU_AVX512_IFMA);\n+    _features.clear_feature(CPU_APX_F);\n+    _features.clear_feature(CPU_AVX512_FP16);\n+    _features.clear_feature(CPU_AVX10_1);\n+    _features.clear_feature(CPU_AVX10_2);\n@@ -1021,1 +1026,1 @@\n-    _vm_target_features.clear_feature(CPU_APX_F);\n+    _features.clear_feature(CPU_APX_F);\n@@ -1025,2 +1030,2 @@\n-    _vm_target_features.clear_feature(CPU_AVX2);\n-    _vm_target_features.clear_feature(CPU_AVX_IFMA);\n+    _features.clear_feature(CPU_AVX2);\n+    _features.clear_feature(CPU_AVX_IFMA);\n@@ -1030,4 +1035,4 @@\n-    _vm_target_features.clear_feature(CPU_AVX);\n-    _vm_target_features.clear_feature(CPU_VZEROUPPER);\n-    _vm_target_features.clear_feature(CPU_F16C);\n-    _vm_target_features.clear_feature(CPU_SHA512);\n+    _features.clear_feature(CPU_AVX);\n+    _features.clear_feature(CPU_VZEROUPPER);\n+    _features.clear_feature(CPU_F16C);\n+    _features.clear_feature(CPU_SHA512);\n@@ -1038,1 +1043,1 @@\n-    _vm_target_features.clear_feature(CPU_HT);\n+    _features.clear_feature(CPU_HT);\n@@ -1043,17 +1048,17 @@\n-      _vm_target_features.clear_feature(CPU_VZEROUPPER);\n-      _vm_target_features.clear_feature(CPU_AVX512BW);\n-      _vm_target_features.clear_feature(CPU_AVX512VL);\n-      _vm_target_features.clear_feature(CPU_AVX512DQ);\n-      _vm_target_features.clear_feature(CPU_AVX512_VNNI);\n-      _vm_target_features.clear_feature(CPU_AVX512_VAES);\n-      _vm_target_features.clear_feature(CPU_AVX512_VPOPCNTDQ);\n-      _vm_target_features.clear_feature(CPU_AVX512_VPCLMULQDQ);\n-      _vm_target_features.clear_feature(CPU_AVX512_VBMI);\n-      _vm_target_features.clear_feature(CPU_AVX512_VBMI2);\n-      _vm_target_features.clear_feature(CPU_CLWB);\n-      _vm_target_features.clear_feature(CPU_FLUSHOPT);\n-      _vm_target_features.clear_feature(CPU_GFNI);\n-      _vm_target_features.clear_feature(CPU_AVX512_BITALG);\n-      _vm_target_features.clear_feature(CPU_AVX512_IFMA);\n-      _vm_target_features.clear_feature(CPU_AVX_IFMA);\n-      _vm_target_features.clear_feature(CPU_AVX512_FP16);\n+      _features.clear_feature(CPU_VZEROUPPER);\n+      _features.clear_feature(CPU_AVX512BW);\n+      _features.clear_feature(CPU_AVX512VL);\n+      _features.clear_feature(CPU_AVX512DQ);\n+      _features.clear_feature(CPU_AVX512_VNNI);\n+      _features.clear_feature(CPU_AVX512_VAES);\n+      _features.clear_feature(CPU_AVX512_VPOPCNTDQ);\n+      _features.clear_feature(CPU_AVX512_VPCLMULQDQ);\n+      _features.clear_feature(CPU_AVX512_VBMI);\n+      _features.clear_feature(CPU_AVX512_VBMI2);\n+      _features.clear_feature(CPU_CLWB);\n+      _features.clear_feature(CPU_FLUSHOPT);\n+      _features.clear_feature(CPU_GFNI);\n+      _features.clear_feature(CPU_AVX512_BITALG);\n+      _features.clear_feature(CPU_AVX512_IFMA);\n+      _features.clear_feature(CPU_AVX_IFMA);\n+      _features.clear_feature(CPU_AVX512_FP16);\n@@ -1069,1 +1074,0 @@\n-  assert(supports_cpuid(), \"Always present\");\n@@ -1101,1 +1105,1 @@\n-  for (uint64_t i = 0; i < features_vector_size(); i++) {\n+  for (uint64_t i = 0; i < VM_Features::features_vector_size(); i++) {\n@@ -2883,1 +2887,2 @@\n-void VM_Version::CpuidInfo::install_feature_flags() const {\n+VM_Features VM_Version::CpuidInfo::feature_flags() const {\n+  VM_Features vm_features;\n@@ -2885,1 +2890,1 @@\n-    _vm_target_features.set_feature(CPU_CX8);\n+    vm_features.set_feature(CPU_CX8);\n@@ -2887,1 +2892,1 @@\n-    _vm_target_features.set_feature(CPU_CMOV);\n+    vm_features.set_feature(CPU_CMOV);\n@@ -2889,1 +2894,1 @@\n-    _vm_target_features.set_feature(CPU_FLUSH);\n+    vm_features.set_feature(CPU_FLUSH);\n@@ -2893,1 +2898,1 @@\n-  assert (_vm_target_features.supports_feature(CPU_FLUSH), \"clflush should be available\");\n+  assert (vm_features.supports_feature(CPU_FLUSH), \"clflush should be available\");\n@@ -2896,1 +2901,1 @@\n-    _vm_target_features.set_feature(CPU_FXSR);\n+    vm_features.set_feature(CPU_FXSR);\n@@ -2899,1 +2904,1 @@\n-    _vm_target_features.set_feature(CPU_HT);\n+    vm_features.set_feature(CPU_HT);\n@@ -2902,1 +2907,1 @@\n-    _vm_target_features.set_feature(CPU_MMX);\n+    vm_features.set_feature(CPU_MMX);\n@@ -2904,1 +2909,1 @@\n-    _vm_target_features.set_feature(CPU_SSE);\n+    vm_features.set_feature(CPU_SSE);\n@@ -2906,1 +2911,1 @@\n-    _vm_target_features.set_feature(CPU_SSE2);\n+    vm_features.set_feature(CPU_SSE2);\n@@ -2908,1 +2913,1 @@\n-    _vm_target_features.set_feature(CPU_SSE3);\n+    vm_features.set_feature(CPU_SSE3);\n@@ -2910,1 +2915,1 @@\n-    _vm_target_features.set_feature(CPU_SSSE3);\n+    vm_features.set_feature(CPU_SSSE3);\n@@ -2912,1 +2917,1 @@\n-    _vm_target_features.set_feature(CPU_SSE4_1);\n+    vm_features.set_feature(CPU_SSE4_1);\n@@ -2914,1 +2919,1 @@\n-    _vm_target_features.set_feature(CPU_SSE4_2);\n+    vm_features.set_feature(CPU_SSE4_2);\n@@ -2916,1 +2921,1 @@\n-    _vm_target_features.set_feature(CPU_POPCNT);\n+    vm_features.set_feature(CPU_POPCNT);\n@@ -2919,1 +2924,1 @@\n-    _vm_target_features.set_feature(CPU_APX_F);\n+    vm_features.set_feature(CPU_APX_F);\n@@ -2925,2 +2930,2 @@\n-    _vm_target_features.set_feature(CPU_AVX);\n-    _vm_target_features.set_feature(CPU_VZEROUPPER);\n+    vm_features.set_feature(CPU_AVX);\n+    vm_features.set_feature(CPU_VZEROUPPER);\n@@ -2928,1 +2933,1 @@\n-      _vm_target_features.set_feature(CPU_SHA512);\n+      vm_features.set_feature(CPU_SHA512);\n@@ -2930,1 +2935,1 @@\n-      _vm_target_features.set_feature(CPU_F16C);\n+      vm_features.set_feature(CPU_F16C);\n@@ -2932,1 +2937,1 @@\n-      _vm_target_features.set_feature(CPU_AVX2);\n+      vm_features.set_feature(CPU_AVX2);\n@@ -2934,1 +2939,1 @@\n-        _vm_target_features.set_feature(CPU_AVX_IFMA);\n+        vm_features.set_feature(CPU_AVX_IFMA);\n@@ -2937,1 +2942,1 @@\n-        _vm_target_features.set_feature(CPU_GFNI);\n+        vm_features.set_feature(CPU_GFNI);\n@@ -2942,1 +2947,1 @@\n-      _vm_target_features.set_feature(CPU_AVX512F);\n+      vm_features.set_feature(CPU_AVX512F);\n@@ -2944,1 +2949,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512CD);\n+        vm_features.set_feature(CPU_AVX512CD);\n@@ -2946,1 +2951,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512DQ);\n+        vm_features.set_feature(CPU_AVX512DQ);\n@@ -2948,1 +2953,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512_IFMA);\n+        vm_features.set_feature(CPU_AVX512_IFMA);\n@@ -2950,1 +2955,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512PF);\n+        vm_features.set_feature(CPU_AVX512PF);\n@@ -2952,1 +2957,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512ER);\n+        vm_features.set_feature(CPU_AVX512ER);\n@@ -2954,1 +2959,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512BW);\n+        vm_features.set_feature(CPU_AVX512BW);\n@@ -2956,1 +2961,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512VL);\n+        vm_features.set_feature(CPU_AVX512VL);\n@@ -2958,1 +2963,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512_VPOPCNTDQ);\n+        vm_features.set_feature(CPU_AVX512_VPOPCNTDQ);\n@@ -2960,1 +2965,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512_VPCLMULQDQ);\n+        vm_features.set_feature(CPU_AVX512_VPCLMULQDQ);\n@@ -2962,1 +2967,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512_VAES);\n+        vm_features.set_feature(CPU_AVX512_VAES);\n@@ -2964,1 +2969,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512_VNNI);\n+        vm_features.set_feature(CPU_AVX512_VNNI);\n@@ -2966,1 +2971,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512_BITALG);\n+        vm_features.set_feature(CPU_AVX512_BITALG);\n@@ -2968,1 +2973,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512_VBMI);\n+        vm_features.set_feature(CPU_AVX512_VBMI);\n@@ -2970,1 +2975,1 @@\n-        _vm_target_features.set_feature(CPU_AVX512_VBMI2);\n+        vm_features.set_feature(CPU_AVX512_VBMI2);\n@@ -2979,15 +2984,15 @@\n-        _vm_target_features.set_feature(CPU_AVX10_1);\n-        _vm_target_features.set_feature(CPU_AVX512F);\n-        _vm_target_features.set_feature(CPU_AVX512CD);\n-        _vm_target_features.set_feature(CPU_AVX512DQ);\n-        _vm_target_features.set_feature(CPU_AVX512PF);\n-        _vm_target_features.set_feature(CPU_AVX512ER);\n-        _vm_target_features.set_feature(CPU_AVX512BW);\n-        _vm_target_features.set_feature(CPU_AVX512VL);\n-        _vm_target_features.set_feature(CPU_AVX512_VPOPCNTDQ);\n-        _vm_target_features.set_feature(CPU_AVX512_VPCLMULQDQ);\n-        _vm_target_features.set_feature(CPU_AVX512_VAES);\n-        _vm_target_features.set_feature(CPU_AVX512_VNNI);\n-        _vm_target_features.set_feature(CPU_AVX512_BITALG);\n-        _vm_target_features.set_feature(CPU_AVX512_VBMI);\n-        _vm_target_features.set_feature(CPU_AVX512_VBMI2);\n+        vm_features.set_feature(CPU_AVX10_1);\n+        vm_features.set_feature(CPU_AVX512F);\n+        vm_features.set_feature(CPU_AVX512CD);\n+        vm_features.set_feature(CPU_AVX512DQ);\n+        vm_features.set_feature(CPU_AVX512PF);\n+        vm_features.set_feature(CPU_AVX512ER);\n+        vm_features.set_feature(CPU_AVX512BW);\n+        vm_features.set_feature(CPU_AVX512VL);\n+        vm_features.set_feature(CPU_AVX512_VPOPCNTDQ);\n+        vm_features.set_feature(CPU_AVX512_VPCLMULQDQ);\n+        vm_features.set_feature(CPU_AVX512_VAES);\n+        vm_features.set_feature(CPU_AVX512_VNNI);\n+        vm_features.set_feature(CPU_AVX512_BITALG);\n+        vm_features.set_feature(CPU_AVX512_VBMI);\n+        vm_features.set_feature(CPU_AVX512_VBMI2);\n@@ -2995,1 +3000,1 @@\n-          _vm_target_features.set_feature(CPU_AVX10_2);\n+          vm_features.set_feature(CPU_AVX10_2);\n@@ -3002,1 +3007,1 @@\n-    _vm_target_features.set_feature(CPU_HV);\n+    vm_features.set_feature(CPU_HV);\n@@ -3004,1 +3009,1 @@\n-    _vm_target_features.set_feature(CPU_BMI1);\n+    vm_features.set_feature(CPU_BMI1);\n@@ -3006,1 +3011,1 @@\n-    _vm_target_features.set_feature(CPU_TSC);\n+    vm_features.set_feature(CPU_TSC);\n@@ -3008,1 +3013,1 @@\n-    _vm_target_features.set_feature(CPU_TSCINV_BIT);\n+    vm_features.set_feature(CPU_TSCINV_BIT);\n@@ -3010,1 +3015,1 @@\n-    _vm_target_features.set_feature(CPU_AES);\n+    vm_features.set_feature(CPU_AES);\n@@ -3012,1 +3017,1 @@\n-    _vm_target_features.set_feature(CPU_LZCNT);\n+    vm_features.set_feature(CPU_LZCNT);\n@@ -3014,1 +3019,1 @@\n-    _vm_target_features.set_feature(CPU_3DNOW_PREFETCH);\n+    vm_features.set_feature(CPU_3DNOW_PREFETCH);\n@@ -3016,1 +3021,1 @@\n-    _vm_target_features.set_feature(CPU_ERMS);\n+    vm_features.set_feature(CPU_ERMS);\n@@ -3018,1 +3023,1 @@\n-    _vm_target_features.set_feature(CPU_FSRM);\n+    vm_features.set_feature(CPU_FSRM);\n@@ -3020,1 +3025,1 @@\n-    _vm_target_features.set_feature(CPU_CLMUL);\n+    vm_features.set_feature(CPU_CLMUL);\n@@ -3022,1 +3027,1 @@\n-    _vm_target_features.set_feature(CPU_RTM);\n+    vm_features.set_feature(CPU_RTM);\n@@ -3024,1 +3029,1 @@\n-     _vm_target_features.set_feature(CPU_ADX);\n+     vm_features.set_feature(CPU_ADX);\n@@ -3026,1 +3031,1 @@\n-    _vm_target_features.set_feature(CPU_BMI2);\n+    vm_features.set_feature(CPU_BMI2);\n@@ -3028,1 +3033,1 @@\n-    _vm_target_features.set_feature(CPU_SHA);\n+    vm_features.set_feature(CPU_SHA);\n@@ -3030,1 +3035,1 @@\n-    _vm_target_features.set_feature(CPU_FMA);\n+    vm_features.set_feature(CPU_FMA);\n@@ -3032,1 +3037,1 @@\n-    _vm_target_features.set_feature(CPU_FLUSHOPT);\n+    vm_features.set_feature(CPU_FLUSHOPT);\n@@ -3034,1 +3039,1 @@\n-    _vm_target_features.set_feature(CPU_CLWB);\n+    vm_features.set_feature(CPU_CLWB);\n@@ -3036,1 +3041,1 @@\n-    _vm_target_features.set_feature(CPU_RDTSCP);\n+    vm_features.set_feature(CPU_RDTSCP);\n@@ -3038,1 +3043,1 @@\n-    _vm_target_features.set_feature(CPU_RDPID);\n+    vm_features.set_feature(CPU_RDPID);\n@@ -3044,1 +3049,1 @@\n-      _vm_target_features.set_feature(CPU_3DNOW_PREFETCH);\n+      vm_features.set_feature(CPU_3DNOW_PREFETCH);\n@@ -3046,1 +3051,1 @@\n-      _vm_target_features.set_feature(CPU_SSE4A);\n+      vm_features.set_feature(CPU_SSE4A);\n@@ -3052,1 +3057,1 @@\n-      _vm_target_features.set_feature(CPU_SERIALIZE);\n+      vm_features.set_feature(CPU_SERIALIZE);\n@@ -3054,1 +3059,1 @@\n-      _vm_target_features.set_feature(CPU_AVX512_FP16);\n+      vm_features.set_feature(CPU_AVX512_FP16);\n@@ -3061,2 +3066,2 @@\n-    assert(_vm_target_features.supports_feature(CPU_CLWB), \"Check if it is supported?\");\n-    _vm_target_features.clear_feature(CPU_CLWB);\n+    assert(vm_features.supports_feature(CPU_CLWB), \"Check if it is supported?\");\n+    vm_features.clear_feature(CPU_CLWB);\n@@ -3067,1 +3072,1 @@\n-    _vm_target_features.set_feature(CPU_PKU);\n+    vm_features.set_feature(CPU_PKU);\n@@ -3070,1 +3075,1 @@\n-    _vm_target_features.set_feature(CPU_OSPKE);\n+    vm_features.set_feature(CPU_OSPKE);\n@@ -3075,1 +3080,1 @@\n-    _vm_target_features.set_feature(CPU_CET_SS);\n+    vm_features.set_feature(CPU_CET_SS);\n@@ -3078,1 +3083,1 @@\n-    _vm_target_features.set_feature(CPU_CET_IBT);\n+    vm_features.set_feature(CPU_CET_IBT);\n@@ -3085,1 +3090,1 @@\n-    _vm_target_features.set_feature(CPU_TSCINV);\n+    vm_features.set_feature(CPU_TSCINV);\n@@ -3087,0 +3092,1 @@\n+  return vm_features;\n@@ -3276,0 +3282,45 @@\n+\n+void VM_Features::set_feature(uint32_t feature) {\n+  uint32_t index = feature >> _features_vector_element_shift_count;\n+  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n+  assert(index < _features_vector_size, \"Features array index out of bounds\");\n+  _features_vector[index] |= (1ULL << (feature & index_mask));\n+}\n+\n+void VM_Features::clear_feature(uint32_t feature) {\n+  uint32_t index = feature >> _features_vector_element_shift_count;\n+  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n+  assert(index < _features_vector_size, \"Features array index out of bounds\");\n+  _features_vector[index] &= ~(1ULL << (feature & index_mask));\n+}\n+\n+void VM_Features::clear_features() {\n+  for (uint32_t i = 0; i < _features_vector_size; i++) {\n+    _features_vector[i] = 0;\n+  }\n+}\n+\n+bool VM_Features::supports_feature(uint32_t feature) {\n+  uint32_t index = feature >> _features_vector_element_shift_count;\n+  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n+  assert(index < _features_vector_size, \"Features array index out of bounds\");\n+  return (_features_vector[index] & (1ULL << (feature & index_mask))) != 0;\n+}\n+\n+bool VM_Features::is_within_feature_vector_bounds(uint32_t num_features) {\n+  return _features_vector_size >= ((num_features >> _features_vector_element_shift_count) + 1);\n+}\n+\n+void VM_Version::insert_features_names(uint64_t features, char* buf, size_t buflen, const char* features_names[],\n+                                       uint features_names_index) {\n+  while (features != 0) {\n+    if (features & 1) {\n+      int res = jio_snprintf(buf, buflen, \", %s\", features_names[features_names_index]);\n+      assert(res > 0, \"not enough temporary space allocated\");\n+      buf += res;\n+      buflen -= res;\n+    }\n+    features >>= 1;\n+    ++features_names_index;\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":191,"deletions":140,"binary":false,"changes":331,"status":"modified"},{"patch":"@@ -33,0 +33,29 @@\n+#define MAX_FEATURE_VEC_SIZE 4\n+\n+class VM_Features {\n+ public:\n+  using FeatureVector = uint64_t [MAX_FEATURE_VEC_SIZE];\n+\n+  \/\/ Feature vector bitmap currently only used by x86 backend.\n+  FeatureVector _features_vector;\n+\n+  \/\/ log2 of feature vector element size in bits, used by JVMCI to check enabled feature bits.\n+  \/\/ Refer HotSpotJVMCIBackendFactory::convertFeaturesVector.\n+  static uint32_t _features_vector_element_shift_count;\n+\n+  \/\/ Size of feature vector bitmap.\n+  static uint32_t _features_vector_size;\n+\n+  VM_Features() {\n+    clear_features();\n+  }\n+\n+  void set_feature(uint32_t feature);\n+  void clear_feature(uint32_t feature);\n+  bool supports_feature(uint32_t feature);\n+  void clear_features();\n+\n+  static bool is_within_feature_vector_bounds(uint32_t num_features);\n+  static uint32_t features_vector_size() { return _features_vector_size;}\n+};\n+\n@@ -455,0 +484,16 @@\n+  \/\/ CPU feature flags vector, can be affected by VM settings.\n+  static VM_Features _features;\n+\n+  \/\/ Original CPU feature flags vector, not affected by VM settings.\n+  static VM_Features _cpu_features;\n+\n+  static void clear_cpu_features() {\n+    _features.clear_features();\n+    _cpu_features.clear_features();\n+  }\n+\n+  static uint64_t features_vector_elem(uint32_t elem) {\n+    assert(elem < VM_Features::_features_vector_size, \"\");\n+    return _features._features_vector[elem];\n+  }\n+\n@@ -596,1 +641,1 @@\n-    void install_feature_flags() const;\n+    VM_Features feature_flags() const;\n@@ -677,1 +722,1 @@\n-    Abstract_VM_Version::clear_cpu_features();\n+    VM_Version::clear_cpu_features();\n@@ -680,4 +725,4 @@\n-    _vm_target_features.set_feature(CPU_SSE);\n-    _vm_target_features.set_feature(CPU_SSE2);\n-    _vm_target_features.set_feature(CPU_AVX);\n-    _vm_target_features.set_feature(CPU_VZEROUPPER);\n+    _features.set_feature(CPU_SSE);\n+    _features.set_feature(CPU_SSE2);\n+    _features.set_feature(CPU_AVX);\n+    _features.set_feature(CPU_VZEROUPPER);\n@@ -686,5 +731,5 @@\n-    _vm_target_features.set_feature(CPU_AVX10_1);\n-    _vm_target_features.set_feature(CPU_AVX512F);\n-    _vm_target_features.set_feature(CPU_SSE);\n-    _vm_target_features.set_feature(CPU_SSE2);\n-    _vm_target_features.set_feature(CPU_VZEROUPPER);\n+    _features.set_feature(CPU_AVX10_1);\n+    _features.set_feature(CPU_AVX512F);\n+    _features.set_feature(CPU_SSE);\n+    _features.set_feature(CPU_SSE2);\n+    _features.set_feature(CPU_VZEROUPPER);\n@@ -692,1 +737,1 @@\n-  static void set_apx_cpuFeatures() { _vm_target_features.set_feature(CPU_APX_F); }\n+  static void set_apx_cpuFeatures() { _features.set_feature(CPU_APX_F); }\n@@ -694,4 +739,4 @@\n-    _vm_target_features.set_feature(CPU_BMI1);\n-    _vm_target_features.set_feature(CPU_BMI2);\n-    _vm_target_features.set_feature(CPU_LZCNT);\n-    _vm_target_features.set_feature(CPU_POPCNT);\n+    _features.set_feature(CPU_BMI1);\n+    _features.set_feature(CPU_BMI2);\n+    _features.set_feature(CPU_LZCNT);\n+    _features.set_feature(CPU_POPCNT);\n@@ -753,34 +798,33 @@\n-  static bool supports_cpuid()        { return Abstract_VM_Version::vm_features_exist(); }\n-  static bool supports_cmov()         { return _vm_target_features.supports_feature(CPU_CMOV); }\n-  static bool supports_fxsr()         { return _vm_target_features.supports_feature(CPU_FXSR); }\n-  static bool supports_ht()           { return _vm_target_features.supports_feature(CPU_HT); }\n-  static bool supports_mmx()          { return _vm_target_features.supports_feature(CPU_MMX); }\n-  static bool supports_sse()          { return _vm_target_features.supports_feature(CPU_SSE); }\n-  static bool supports_sse2()         { return _vm_target_features.supports_feature(CPU_SSE2); }\n-  static bool supports_sse3()         { return _vm_target_features.supports_feature(CPU_SSE3); }\n-  static bool supports_ssse3()        { return _vm_target_features.supports_feature(CPU_SSSE3); }\n-  static bool supports_sse4_1()       { return _vm_target_features.supports_feature(CPU_SSE4_1); }\n-  static bool supports_sse4_2()       { return _vm_target_features.supports_feature(CPU_SSE4_2); }\n-  static bool supports_popcnt()       { return _vm_target_features.supports_feature(CPU_POPCNT); }\n-  static bool supports_avx()          { return _vm_target_features.supports_feature(CPU_AVX); }\n-  static bool supports_avx2()         { return _vm_target_features.supports_feature(CPU_AVX2); }\n-  static bool supports_tsc()          { return _vm_target_features.supports_feature(CPU_TSC); }\n-  static bool supports_rdtscp()       { return _vm_target_features.supports_feature(CPU_RDTSCP); }\n-  static bool supports_rdpid()        { return _vm_target_features.supports_feature(CPU_RDPID); }\n-  static bool supports_aes()          { return _vm_target_features.supports_feature(CPU_AES); }\n-  static bool supports_erms()         { return _vm_target_features.supports_feature(CPU_ERMS); }\n-  static bool supports_fsrm()         { return _vm_target_features.supports_feature(CPU_FSRM); }\n-  static bool supports_clmul()        { return _vm_target_features.supports_feature(CPU_CLMUL); }\n-  static bool supports_rtm()          { return _vm_target_features.supports_feature(CPU_RTM); }\n-  static bool supports_bmi1()         { return _vm_target_features.supports_feature(CPU_BMI1); }\n-  static bool supports_bmi2()         { return _vm_target_features.supports_feature(CPU_BMI2); }\n-  static bool supports_adx()          { return _vm_target_features.supports_feature(CPU_ADX); }\n-  static bool supports_evex()         { return _vm_target_features.supports_feature(CPU_AVX512F); }\n-  static bool supports_avx512dq()     { return _vm_target_features.supports_feature(CPU_AVX512DQ); }\n-  static bool supports_avx512ifma()   { return _vm_target_features.supports_feature(CPU_AVX512_IFMA); }\n-  static bool supports_avxifma()      { return _vm_target_features.supports_feature(CPU_AVX_IFMA); }\n-  static bool supports_avx512pf()     { return _vm_target_features.supports_feature(CPU_AVX512PF); }\n-  static bool supports_avx512er()     { return _vm_target_features.supports_feature(CPU_AVX512ER); }\n-  static bool supports_avx512cd()     { return _vm_target_features.supports_feature(CPU_AVX512CD); }\n-  static bool supports_avx512bw()     { return _vm_target_features.supports_feature(CPU_AVX512BW); }\n-  static bool supports_avx512vl()     { return _vm_target_features.supports_feature(CPU_AVX512VL); }\n+  static bool supports_cmov()         { return _features.supports_feature(CPU_CMOV); }\n+  static bool supports_fxsr()         { return _features.supports_feature(CPU_FXSR); }\n+  static bool supports_ht()           { return _features.supports_feature(CPU_HT); }\n+  static bool supports_mmx()          { return _features.supports_feature(CPU_MMX); }\n+  static bool supports_sse()          { return _features.supports_feature(CPU_SSE); }\n+  static bool supports_sse2()         { return _features.supports_feature(CPU_SSE2); }\n+  static bool supports_sse3()         { return _features.supports_feature(CPU_SSE3); }\n+  static bool supports_ssse3()        { return _features.supports_feature(CPU_SSSE3); }\n+  static bool supports_sse4_1()       { return _features.supports_feature(CPU_SSE4_1); }\n+  static bool supports_sse4_2()       { return _features.supports_feature(CPU_SSE4_2); }\n+  static bool supports_popcnt()       { return _features.supports_feature(CPU_POPCNT); }\n+  static bool supports_avx()          { return _features.supports_feature(CPU_AVX); }\n+  static bool supports_avx2()         { return _features.supports_feature(CPU_AVX2); }\n+  static bool supports_tsc()          { return _features.supports_feature(CPU_TSC); }\n+  static bool supports_rdtscp()       { return _features.supports_feature(CPU_RDTSCP); }\n+  static bool supports_rdpid()        { return _features.supports_feature(CPU_RDPID); }\n+  static bool supports_aes()          { return _features.supports_feature(CPU_AES); }\n+  static bool supports_erms()         { return _features.supports_feature(CPU_ERMS); }\n+  static bool supports_fsrm()         { return _features.supports_feature(CPU_FSRM); }\n+  static bool supports_clmul()        { return _features.supports_feature(CPU_CLMUL); }\n+  static bool supports_rtm()          { return _features.supports_feature(CPU_RTM); }\n+  static bool supports_bmi1()         { return _features.supports_feature(CPU_BMI1); }\n+  static bool supports_bmi2()         { return _features.supports_feature(CPU_BMI2); }\n+  static bool supports_adx()          { return _features.supports_feature(CPU_ADX); }\n+  static bool supports_evex()         { return _features.supports_feature(CPU_AVX512F); }\n+  static bool supports_avx512dq()     { return _features.supports_feature(CPU_AVX512DQ); }\n+  static bool supports_avx512ifma()   { return _features.supports_feature(CPU_AVX512_IFMA); }\n+  static bool supports_avxifma()      { return _features.supports_feature(CPU_AVX_IFMA); }\n+  static bool supports_avx512pf()     { return _features.supports_feature(CPU_AVX512PF); }\n+  static bool supports_avx512er()     { return _features.supports_feature(CPU_AVX512ER); }\n+  static bool supports_avx512cd()     { return _features.supports_feature(CPU_AVX512CD); }\n+  static bool supports_avx512bw()     { return _features.supports_feature(CPU_AVX512BW); }\n+  static bool supports_avx512vl()     { return _features.supports_feature(CPU_AVX512VL); }\n@@ -795,1 +839,1 @@\n-  static bool supports_apx_f()        { return _vm_target_features.supports_feature(CPU_APX_F); }\n+  static bool supports_apx_f()        { return _features.supports_feature(CPU_APX_F); }\n@@ -797,20 +841,20 @@\n-  static bool supports_sha()          { return _vm_target_features.supports_feature(CPU_SHA); }\n-  static bool supports_fma()          { return _vm_target_features.supports_feature(CPU_FMA) && supports_avx(); }\n-  static bool supports_vzeroupper()   { return _vm_target_features.supports_feature(CPU_VZEROUPPER); }\n-  static bool supports_avx512_vpopcntdq()  { return _vm_target_features.supports_feature(CPU_AVX512_VPOPCNTDQ); }\n-  static bool supports_avx512_vpclmulqdq() { return _vm_target_features.supports_feature(CPU_AVX512_VPCLMULQDQ); }\n-  static bool supports_avx512_vaes()  { return _vm_target_features.supports_feature(CPU_AVX512_VAES); }\n-  static bool supports_gfni()         { return _vm_target_features.supports_feature(CPU_GFNI); }\n-  static bool supports_avx512_vnni()  { return _vm_target_features.supports_feature(CPU_AVX512_VNNI); }\n-  static bool supports_avx512_bitalg()  { return _vm_target_features.supports_feature(CPU_AVX512_BITALG); }\n-  static bool supports_avx512_vbmi()  { return _vm_target_features.supports_feature(CPU_AVX512_VBMI); }\n-  static bool supports_avx512_vbmi2() { return _vm_target_features.supports_feature(CPU_AVX512_VBMI2); }\n-  static bool supports_avx512_fp16()  { return _vm_target_features.supports_feature(CPU_AVX512_FP16); }\n-  static bool supports_hv()           { return _vm_target_features.supports_feature(CPU_HV); }\n-  static bool supports_serialize()    { return _vm_target_features.supports_feature(CPU_SERIALIZE); }\n-  static bool supports_f16c()         { return _vm_target_features.supports_feature(CPU_F16C); }\n-  static bool supports_pku()          { return _vm_target_features.supports_feature(CPU_PKU); }\n-  static bool supports_ospke()        { return _vm_target_features.supports_feature(CPU_OSPKE); }\n-  static bool supports_cet_ss()       { return _vm_target_features.supports_feature(CPU_CET_SS); }\n-  static bool supports_cet_ibt()      { return _vm_target_features.supports_feature(CPU_CET_IBT); }\n-  static bool supports_sha512()       { return _vm_target_features.supports_feature(CPU_SHA512); }\n+  static bool supports_sha()          { return _features.supports_feature(CPU_SHA); }\n+  static bool supports_fma()          { return _features.supports_feature(CPU_FMA) && supports_avx(); }\n+  static bool supports_vzeroupper()   { return _features.supports_feature(CPU_VZEROUPPER); }\n+  static bool supports_avx512_vpopcntdq()  { return _features.supports_feature(CPU_AVX512_VPOPCNTDQ); }\n+  static bool supports_avx512_vpclmulqdq() { return _features.supports_feature(CPU_AVX512_VPCLMULQDQ); }\n+  static bool supports_avx512_vaes()  { return _features.supports_feature(CPU_AVX512_VAES); }\n+  static bool supports_gfni()         { return _features.supports_feature(CPU_GFNI); }\n+  static bool supports_avx512_vnni()  { return _features.supports_feature(CPU_AVX512_VNNI); }\n+  static bool supports_avx512_bitalg()  { return _features.supports_feature(CPU_AVX512_BITALG); }\n+  static bool supports_avx512_vbmi()  { return _features.supports_feature(CPU_AVX512_VBMI); }\n+  static bool supports_avx512_vbmi2() { return _features.supports_feature(CPU_AVX512_VBMI2); }\n+  static bool supports_avx512_fp16()  { return _features.supports_feature(CPU_AVX512_FP16); }\n+  static bool supports_hv()           { return _features.supports_feature(CPU_HV); }\n+  static bool supports_serialize()    { return _features.supports_feature(CPU_SERIALIZE); }\n+  static bool supports_f16c()         { return _features.supports_feature(CPU_F16C); }\n+  static bool supports_pku()          { return _features.supports_feature(CPU_PKU); }\n+  static bool supports_ospke()        { return _features.supports_feature(CPU_OSPKE); }\n+  static bool supports_cet_ss()       { return _features.supports_feature(CPU_CET_SS); }\n+  static bool supports_cet_ibt()      { return _features.supports_feature(CPU_CET_IBT); }\n+  static bool supports_sha512()       { return _features.supports_feature(CPU_SHA512); }\n@@ -821,2 +865,2 @@\n-  static bool supports_avx10_1()      { return _vm_target_features.supports_feature(CPU_AVX10_1);}\n-  static bool supports_avx10_2()      { return _vm_target_features.supports_feature(CPU_AVX10_2);}\n+  static bool supports_avx10_1()      { return _features.supports_feature(CPU_AVX10_1);}\n+  static bool supports_avx10_2()      { return _features.supports_feature(CPU_AVX10_2);}\n@@ -827,1 +871,1 @@\n-  static bool cpu_supports_evex()     { return _cpu_target_features.supports_feature(CPU_AVX512F); }\n+  static bool cpu_supports_evex()     { return _cpu_features.supports_feature(CPU_AVX512F); }\n@@ -858,0 +902,2 @@\n+  static void insert_features_names(uint64_t features, char* buf, size_t buflen, const char* features_names[], uint features_names_index = 0);\n+\n@@ -865,3 +911,3 @@\n-  static bool supports_3dnow_prefetch()    { return _vm_target_features.supports_feature(CPU_3DNOW_PREFETCH); }\n-  static bool supports_lzcnt()    { return _vm_target_features.supports_feature(CPU_LZCNT); }\n-  static bool supports_sse4a()    { return _vm_target_features.supports_feature(CPU_SSE4A); }\n+  static bool supports_3dnow_prefetch()    { return _features.supports_feature(CPU_3DNOW_PREFETCH); }\n+  static bool supports_lzcnt()    { return _features.supports_feature(CPU_LZCNT); }\n+  static bool supports_sse4a()    { return _features.supports_feature(CPU_SSE4A); }\n@@ -874,1 +920,1 @@\n-    return _vm_target_features.supports_feature(CPU_TSCINV_BIT);\n+    return _features.supports_feature(CPU_TSCINV_BIT);\n@@ -877,1 +923,1 @@\n-    return _vm_target_features.supports_feature(CPU_TSCINV);\n+    return _features.supports_feature(CPU_TSCINV);\n@@ -938,2 +984,2 @@\n-  static bool supports_clflushopt() { return (_vm_target_features.supports_feature(CPU_FLUSHOPT)); }\n-  static bool supports_clwb() { return (_vm_target_features.supports_feature(CPU_CLWB)); }\n+  static bool supports_clflushopt() { return (_features.supports_feature(CPU_FLUSHOPT)); }\n+  static bool supports_clwb() { return (_features.supports_feature(CPU_CLWB)); }\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":127,"deletions":81,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -150,5 +150,0 @@\n-  static_field(Abstract_VM_Version,            _vm_target_features,                    VM_Features)                                  \\\n-                                                                                                                                     \\\n-  nonstatic_field(VM_Features,                 _features_vector,                       VM_Features::FeatureVector)                   \\\n-  static_field(VM_Features,                    _features_vector_size,                  uint32_t)                                     \\\n-  static_field(VM_Features,                    _features_vector_element_shift_count,   uint32_t)                                     \\\n@@ -983,1 +978,6 @@\n-  static_field(VM_Version, _has_intel_jcc_erratum, bool)\n+  static_field(VM_Version,                     _features,                              VM_Features)                                  \\\n+                                                                                                                                     \\\n+  nonstatic_field(VM_Features,                 _features_vector,                       VM_Features::FeatureVector)                   \\\n+  static_field(VM_Features,                    _features_vector_size,                  uint32_t)                                     \\\n+  static_field(VM_Features,                    _features_vector_element_shift_count,   uint32_t)                                     \\\n+  static_field(VM_Version,                     _has_intel_jcc_erratum,                     bool)\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -40,5 +40,0 @@\n-uint32_t VM_Features::_features_vector_element_shift_count = 6;\n-uint32_t VM_Features::_features_vector_size = MAX_FEATURE_VEC_SIZE;\n-VM_Features Abstract_VM_Version::_vm_target_features = {{0, 0, 0, 0}};\n-VM_Features Abstract_VM_Version::_cpu_target_features = {{0, 0, 0, 0}};\n-\n@@ -333,14 +328,0 @@\n-void Abstract_VM_Version::insert_features_names(uint64_t features, char* buf, size_t buflen, const char* features_names[],\n-                                                uint features_names_index) {\n-  while (features != 0) {\n-    if (features & 1) {\n-      int res = jio_snprintf(buf, buflen, \", %s\", features_names[features_names_index]);\n-      assert(res > 0, \"not enough temporary space allocated\");\n-      buf += res;\n-      buflen -= res;\n-    }\n-    features >>= 1;\n-    ++features_names_index;\n-  }\n-}\n-\n@@ -424,25 +405,0 @@\n-\n-void VM_Features::set_feature(uint32_t feature) {\n-  uint32_t index = feature >> _features_vector_element_shift_count;\n-  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n-  assert(index < _features_vector_size, \"Features array index out of bounds\");\n-  _features_vector[index] |= (1ULL << (feature & index_mask));\n-}\n-\n-void VM_Features::clear_feature(uint32_t feature) {\n-  uint32_t index = feature >> _features_vector_element_shift_count;\n-  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n-  assert(index < _features_vector_size, \"Features array index out of bounds\");\n-  _features_vector[index] &= ~(1ULL << (feature & index_mask));\n-}\n-\n-bool VM_Features::supports_feature(uint32_t feature) {\n-  uint32_t index = feature >> _features_vector_element_shift_count;\n-  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n-  assert(index < _features_vector_size, \"Features array index out of bounds\");\n-  return (_features_vector[index] & (1ULL << (feature & index_mask))) != 0;\n-}\n-\n-bool VM_Features::is_within_feature_vector_bounds(uint32_t num_features) {\n-   return _features_vector_size >= ((num_features >> _features_vector_element_shift_count) + 1);\n-}\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -47,23 +47,0 @@\n-#define MAX_FEATURE_VEC_SIZE 4\n-\n-class VM_Features {\n- public:\n-  using FeatureVector = uint64_t [MAX_FEATURE_VEC_SIZE];\n-\n-  \/\/ Feature vector bitmap currently only used by x86 backend.\n-  FeatureVector _features_vector;\n-\n-  \/\/ Size of feature vector bitmap.\n-  static uint32_t _features_vector_size;\n-\n-  \/\/ Log2 of feature vector element size in bits, used by JVMCI to check enabled feature bits.\n-  \/\/ Refer HotSpotJVMCIBackendFactory::convertFeaturesVector.\n-  static uint32_t _features_vector_element_shift_count;\n-\n-  static bool is_within_feature_vector_bounds(uint32_t num_features);\n-\n-  void set_feature(uint32_t feature);\n-  void clear_feature(uint32_t feature);\n-  bool supports_feature(uint32_t feature);\n-};\n-\n@@ -90,28 +67,0 @@\n-  \/\/ CPU feature flags vector, can be affected by VM settings.\n-  static VM_Features _vm_target_features;\n-\n-  \/\/ Original CPU feature flags vector, not affected by VM settings.\n-  static VM_Features _cpu_target_features;\n-\n-  static void sync_cpu_features() {\n-    memcpy(_cpu_target_features._features_vector, _vm_target_features._features_vector,\n-           sizeof(uint64_t) * VM_Features::_features_vector_size);\n-  }\n-\n-  static void clear_cpu_features() {\n-    memset(_vm_target_features._features_vector, 0, sizeof(uint64_t) * VM_Features::_features_vector_size);\n-  }\n-\n-  static bool vm_features_exist() {\n-    return VM_Features::_features_vector_size > 0;\n-  }\n-\n-  static uint32_t features_vector_size() {\n-    return VM_Features::_features_vector_size;\n-  }\n-\n-  static uint64_t features_vector_elem(uint32_t elem) {\n-    assert(elem < VM_Features::_features_vector_size, \"\");\n-    return _vm_target_features._features_vector[elem];\n-  }\n-\n@@ -183,3 +132,1 @@\n-  static uint64_t features() {\n-    return _features;\n-  }\n+  static uint64_t features() { return _features; }\n@@ -189,1 +136,0 @@\n-  static void insert_features_names(uint64_t features, char* buf, size_t buflen, const char* features_names[], uint features_names_index = 0);\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":1,"deletions":55,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-void VM_Version_pre_init();\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -710,1 +710,0 @@\n-     static_field(Abstract_VM_Version,         _vm_target_features,                           VM_Features)                           \\\n@@ -712,3 +711,4 @@\n-     nonstatic_field(VM_Features,              _features_vector,                              VM_Features::FeatureVector)            \\\n-     static_field(VM_Features,                 _features_vector_size,                         uint32_t)                              \\\n-     static_field(VM_Features,                 _features_vector_element_shift_count,          uint32_t)                              \\\n+     NOT_ZERO(X86_ONLY(static_field(VM_Version,        _features,                             VM_Features)))                         \\\n+     NOT_ZERO(X86_ONLY(nonstatic_field(VM_Features,    _features_vector,                      VM_Features::FeatureVector)))          \\\n+     NOT_ZERO(X86_ONLY(static_field(VM_Features,       _features_vector_size,                 uint32_t)))                            \\\n+     NOT_ZERO(X86_ONLY(static_field(VM_Features,       _features_vector_element_shift_count,  uint32_t)))                            \\\n@@ -1172,2 +1172,3 @@\n-  declare_toplevel_type(VM_Features)                                      \\\n-  declare_toplevel_type(VM_Features::FeatureVector)                       \\\n+  NOT_ZERO(declare_toplevel_type(VM_Features))                            \\\n+  NOT_ZERO(declare_toplevel_type(VM_Version))                             \\\n+  NOT_ZERO(declare_toplevel_type(VM_Features::FeatureVector))             \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                                                                                        config.vmVersionTargetFeatures,\n+                                                                                        config.vmVersionFeatures,\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/amd64\/AMD64HotSpotJVMCIBackendFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    final long vmVersionTargetFeatures = getFieldAddress(\"Abstract_VM_Version::_vm_target_features\", \"VM_Features\");\n+    final long vmVersionFeatures = getFieldAddress(\"VM_Version::_features\", \"VM_Features\");\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/amd64\/AMD64HotSpotVMConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}