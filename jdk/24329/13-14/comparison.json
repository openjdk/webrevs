{"files":[{"patch":"@@ -66,4 +66,4 @@\n-uint32_t VM_Features::_features_vector_element_shift_count = 6;\n-uint32_t VM_Features::_features_vector_size = MAX_FEATURE_VEC_SIZE;\n-VM_Features VM_Version::_features;\n-VM_Features VM_Version::_cpu_features;\n+int VM_Version::VM_Features::_features_bitmap_size_in_bytes = sizeof(VM_Version::VM_Features::_features_bitmap);\n+\n+VM_Version::VM_Features VM_Version::_features;\n+VM_Version::VM_Features VM_Version::_cpu_features;\n@@ -1104,5 +1104,2 @@\n-  size_t buf_iter = cpu_info_size;\n-  for (uint64_t i = 0; i < VM_Features::features_vector_size(); i++) {\n-    insert_features_names(features_vector_elem(i), buf + buf_iter, sizeof(buf) - buf_iter, _features_names, 64 * i);\n-    buf_iter = strlen(buf);\n-  }\n+\n+  insert_features_names(_features, buf + cpu_info_size, sizeof(buf) - cpu_info_size);\n@@ -2110,1 +2107,0 @@\n-  assert(VM_Features::is_within_feature_vector_bounds(MAX_CPU_FEATURES), \"Feature out of vector bounds\");\n@@ -2887,1 +2883,1 @@\n-VM_Features VM_Version::CpuidInfo::feature_flags() const {\n+VM_Version::VM_Features VM_Version::CpuidInfo::feature_flags() const {\n@@ -3283,36 +3279,4 @@\n-void VM_Features::set_feature(uint32_t feature) {\n-  uint32_t index = feature >> _features_vector_element_shift_count;\n-  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n-  assert(index < _features_vector_size, \"Features array index out of bounds\");\n-  _features_vector[index] |= (1ULL << (feature & index_mask));\n-}\n-\n-void VM_Features::clear_feature(uint32_t feature) {\n-  uint32_t index = feature >> _features_vector_element_shift_count;\n-  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n-  assert(index < _features_vector_size, \"Features array index out of bounds\");\n-  _features_vector[index] &= ~(1ULL << (feature & index_mask));\n-}\n-\n-void VM_Features::clear_features() {\n-  for (uint32_t i = 0; i < _features_vector_size; i++) {\n-    _features_vector[i] = 0;\n-  }\n-}\n-\n-bool VM_Features::supports_feature(uint32_t feature) {\n-  uint32_t index = feature >> _features_vector_element_shift_count;\n-  uint32_t index_mask = (1 << _features_vector_element_shift_count) - 1;\n-  assert(index < _features_vector_size, \"Features array index out of bounds\");\n-  return (_features_vector[index] & (1ULL << (feature & index_mask))) != 0;\n-}\n-\n-bool VM_Features::is_within_feature_vector_bounds(uint32_t num_features) {\n-  return _features_vector_size >= ((num_features >> _features_vector_element_shift_count) + 1);\n-}\n-\n-void VM_Version::insert_features_names(uint64_t features, char* buf, size_t buflen, const char* features_names[],\n-                                       uint features_names_index) {\n-  while (features != 0) {\n-    if (features & 1) {\n-      int res = jio_snprintf(buf, buflen, \", %s\", features_names[features_names_index]);\n+void VM_Version::insert_features_names(VM_Version::VM_Features features, char* buf, size_t buflen) {\n+  for (int i = 0; i < MAX_CPU_FEATURES; i++) {\n+    if (features.supports_feature((VM_Version::Feature_Flag)i)) {\n+      int res = jio_snprintf(buf, buflen, \", %s\", _features_names[i]);\n@@ -3323,2 +3287,0 @@\n-    features >>= 1;\n-    ++features_names_index;\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":11,"deletions":49,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -33,29 +33,0 @@\n-#define MAX_FEATURE_VEC_SIZE 4\n-\n-class VM_Features {\n- public:\n-  using FeatureVector = uint64_t [MAX_FEATURE_VEC_SIZE];\n-\n-  \/\/ Feature vector bitmap currently only used by x86 backend.\n-  FeatureVector _features_vector;\n-\n-  \/\/ log2 of feature vector element size in bits, used by JVMCI to check enabled feature bits.\n-  \/\/ Refer HotSpotJVMCIBackendFactory::convertFeaturesVector.\n-  static uint32_t _features_vector_element_shift_count;\n-\n-  \/\/ Size of feature vector bitmap.\n-  static uint32_t _features_vector_size;\n-\n-  VM_Features() {\n-    clear_features();\n-  }\n-\n-  void set_feature(uint32_t feature);\n-  void clear_feature(uint32_t feature);\n-  bool supports_feature(uint32_t feature);\n-  void clear_features();\n-\n-  static bool is_within_feature_vector_bounds(uint32_t num_features);\n-  static uint32_t features_vector_size() { return _features_vector_size;}\n-};\n-\n@@ -396,1 +367,1 @@\n-  enum Feature_Flag : uint32_t {\n+  enum Feature_Flag {\n@@ -482,1 +453,55 @@\n-  static const char* _features_names[];\n+  class VM_Features {\n+    friend class VMStructs;\n+    friend class JVMCIVMStructs;\n+\n+   private:\n+    uint64_t _features_bitmap[(MAX_CPU_FEATURES >> 6) + 1];\n+\n+    STATIC_ASSERT(sizeof(_features_bitmap) * BitsPerByte > MAX_CPU_FEATURES);\n+\n+    \/\/ Number of 8-byte elements in _bitmap.\n+    constexpr static int features_bitmap_element_count() {\n+      return sizeof(_features_bitmap) \/ sizeof(uint64_t);\n+    }\n+\n+    constexpr static int features_bitmap_element_shift_count() {\n+      return LogBitsPerLong;\n+    }\n+\n+    constexpr static uint64_t features_bitmap_element_mask() {\n+      return (1ULL << features_bitmap_element_shift_count()) - 1;\n+    }\n+\n+    static int index(Feature_Flag feature) {\n+      int idx = feature >> features_bitmap_element_shift_count();\n+      assert(idx < features_bitmap_element_count(), \"Features array index out of bounds\");\n+      return idx;\n+    }\n+\n+    static uint64_t bit_mask(Feature_Flag feature) {\n+      return (1ULL << (feature & features_bitmap_element_mask()));\n+    }\n+\n+    static int _features_bitmap_size_in_bytes; \/\/ for JVMCI purposes\n+   public:\n+    VM_Features() {\n+      for (int i = 0; i < features_bitmap_element_count(); i++) {\n+        _features_bitmap[i] = 0;\n+      }\n+    }\n+\n+    void set_feature(Feature_Flag feature) {\n+      int idx = index(feature);\n+      _features_bitmap[idx] |= bit_mask(feature);\n+    }\n+\n+    void clear_feature(VM_Version::Feature_Flag feature) {\n+      int idx = index(feature);\n+      _features_bitmap[idx] &= ~bit_mask(feature);\n+    }\n+\n+    bool supports_feature(VM_Version::Feature_Flag feature) {\n+      int idx = index(feature);\n+      return (_features_bitmap[idx] & bit_mask(feature)) != 0;\n+    }\n+  };\n@@ -490,4 +515,1 @@\n-  static void clear_cpu_features() {\n-    _features.clear_features();\n-    _cpu_features.clear_features();\n-  }\n+  static const char* _features_names[];\n@@ -495,3 +517,3 @@\n-  static uint64_t features_vector_elem(uint32_t elem) {\n-    assert(elem < VM_Features::_features_vector_size, \"\");\n-    return _features._features_vector[elem];\n+  static void clear_cpu_features() {\n+    _features = VM_Features();\n+    _cpu_features = VM_Features();\n@@ -902,1 +924,1 @@\n-  static void insert_features_names(uint64_t features, char* buf, size_t buflen, const char* features_names[], uint features_names_index = 0);\n+  static void insert_features_names(VM_Version::VM_Features features, char* buf, size_t buflen);\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":61,"deletions":39,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -452,1 +452,1 @@\n-                 strcmp(vmField.typeString, \"VM_Features\") == 0 ||\n+                 strcmp(vmField.typeString, \"VM_Version::VM_Features\") == 0 ||\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -978,6 +978,5 @@\n-  static_field(VM_Version,                     _features,                              VM_Features)                                  \\\n-                                                                                                                                     \\\n-  nonstatic_field(VM_Features,                 _features_vector,                       VM_Features::FeatureVector)                   \\\n-  static_field(VM_Features,                    _features_vector_size,                  uint32_t)                                     \\\n-  static_field(VM_Features,                    _features_vector_element_shift_count,   uint32_t)                                     \\\n-  static_field(VM_Version,                     _has_intel_jcc_erratum,                     bool)\n+  static_field(VM_Version,                     _features,                      VM_Version::VM_Features) \\\n+                                                                                                        \\\n+  nonstatic_field(VM_Version::VM_Features,     _features_bitmap[0],            uint64_t)                \\\n+  static_field(VM_Version::VM_Features,        _features_bitmap_size_in_bytes, int)                     \\\n+  static_field(VM_Version,                     _has_intel_jcc_erratum,         bool)\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -132,2 +132,0 @@\n-  static uint64_t features() { return _features; }\n-\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -711,4 +711,3 @@\n-     NOT_ZERO(X86_ONLY(static_field(VM_Version,        _features,                             VM_Features)))                         \\\n-     NOT_ZERO(X86_ONLY(nonstatic_field(VM_Features,    _features_vector,                      VM_Features::FeatureVector)))          \\\n-     NOT_ZERO(X86_ONLY(static_field(VM_Features,       _features_vector_size,                 uint32_t)))                            \\\n-     NOT_ZERO(X86_ONLY(static_field(VM_Features,       _features_vector_element_shift_count,  uint32_t)))                            \\\n+     NOT_ZERO(X86_ONLY(   static_field(VM_Version,              _features,                      VM_Version::VM_Features)))           \\\n+     NOT_ZERO(X86_ONLY(nonstatic_field(VM_Version::VM_Features, _features_bitmap[0],            uint64_t)))                          \\\n+     NOT_ZERO(X86_ONLY(   static_field(VM_Version::VM_Features, _features_bitmap_size_in_bytes, int)))                               \\\n@@ -1172,1 +1171,0 @@\n-  NOT_ZERO(X86_ONLY(declare_toplevel_type(VM_Features)))                  \\\n@@ -1174,1 +1172,1 @@\n-  NOT_ZERO(X86_ONLY(declare_toplevel_type(VM_Features::FeatureVector)))   \\\n+  NOT_ZERO(X86_ONLY(declare_toplevel_type(VM_Version::VM_Features)))      \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-     * Converts a dynamically sized CPU features vector into enum constants.\n+     * Converts CPU features bit map into enum constants.\n@@ -92,4 +92,2 @@\n-     * @param features_pointer pointer to {@code _vm_target_features} field of {@code Abstract_VM_Version}\n-     * @param features_vector_offset offset of feature_vector field in {@code VM_Features}\n-     * @param features_vector_size size of feature vector\n-     * @param features_element_shift_count log2 of dynamic feature bit vector lanesize in bits.\n+     * @param featuresBitMapAddress pointer to {@code VM_Features::_features_bitmap} field of {@code VM_Version::_features}\n+     * @param featuresBitMapSize size of feature bit map in bytes\n@@ -101,1 +99,1 @@\n-    static <CPUFeatureType extends Enum<CPUFeatureType>> EnumSet<CPUFeatureType> convertFeaturesVector(\n+    static <CPUFeatureType extends Enum<CPUFeatureType>> EnumSet<CPUFeatureType> convertFeatures(\n@@ -104,4 +102,2 @@\n-                    long features_pointer,\n-                    long features_vector_offset,\n-                    long features_vector_size,\n-                    long features_element_shift_count,\n+                    long featuresBitMapAddress,\n+                    long featuresBitMapSize,\n@@ -118,0 +114,3 @@\n+                    final long featuresElementShiftCount = 6; \/\/ log (# of bits per long)\n+                    final long featuresElementMask = (1L << featuresElementShiftCount) - 1;\n+\n@@ -119,2 +118,0 @@\n-                    long features_vector_index = bitIndex >>> features_element_shift_count;\n-                    assert features_vector_index < features_vector_size;\n@@ -122,2 +119,3 @@\n-                    long  features_element_bitsize = (1L << features_element_shift_count);\n-                    assert (features_element_bitsize & (features_element_bitsize - 1)) == 0;\n+                    long featureIndex = bitIndex >>> featuresElementShiftCount;\n+                    long featureBitMask = 1L << (bitIndex & featuresElementMask);\n+                    assert featureIndex < featuresBitMapSize;\n@@ -125,3 +123,1 @@\n-                    long  features_element_size = features_element_bitsize \/ Byte.SIZE;\n-                    long features = UNSAFE.getLong(features_pointer + features_vector_offset +\n-                                                   features_vector_index * features_element_size);\n+                    long featuresElement = UNSAFE.getLong(featuresBitMapAddress + featureIndex * Long.BYTES);\n@@ -129,2 +125,1 @@\n-                    long effective_bitMask = 1L << (bitIndex & (features_element_bitsize - 1));\n-                    if ((features & effective_bitMask) != 0) {\n+                    if ((featuresElement & featureBitMask) != 0) {\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIBackendFactory.java","additions":14,"deletions":19,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -53,6 +53,6 @@\n-        EnumSet<CPUFeature> features = HotSpotJVMCIBackendFactory.convertFeaturesVector(CPUFeature.class, constants,\n-                                                                                        config.vmVersionFeatures,\n-                                                                                        config.vmFeaturesFeaturesVecOffset,\n-                                                                                        config.vmFeaturesFeaturesVecSize,\n-                                                                                        config.vmFeaturesFeaturesElemShiftCnt,\n-                                                                                        renaming);\n+        long featuresBitMapAddress = config.vmVersionFeatures + config.vmFeaturesFeaturesOffset;\n+        EnumSet<CPUFeature> features = HotSpotJVMCIBackendFactory.convertFeatures(CPUFeature.class,\n+                                                                                  constants,\n+                                                                                  featuresBitMapAddress,\n+                                                                                  config.vmFeaturesFeaturesSize,\n+                                                                                  renaming);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/amd64\/AMD64HotSpotJVMCIBackendFactory.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -45,4 +45,3 @@\n-    final long vmVersionFeatures = getFieldAddress(\"VM_Version::_features\", \"VM_Features\");\n-    final long vmFeaturesFeaturesVecOffset = getFieldOffset(\"VM_Features::_features_vector\", Long.class, \"VM_Features::FeatureVector\");\n-    final long vmFeaturesFeaturesVecSize = getFieldValue(\"VM_Features::_features_vector_size\", Long.class, \"uint32_t\");\n-    final long vmFeaturesFeaturesElemShiftCnt = getFieldValue(\"VM_Features::_features_vector_element_shift_count\", Long.class, \"uint32_t\");\n+    final long vmVersionFeatures = getFieldAddress(\"VM_Version::_features\", \"VM_Version::VM_Features\");\n+    final long vmFeaturesFeaturesOffset = getFieldOffset(\"VM_Version::VM_Features::_features_bitmap[0]\", Long.class, \"uint64_t\");\n+    final long vmFeaturesFeaturesSize = getFieldValue(\"VM_Version::VM_Features::_features_bitmap_size_in_bytes\", Long.class, \"int\");\n@@ -94,2 +93,0 @@\n-    final long avx10_1 = getConstant(\"VM_Version::CPU_AVX10_1\", Long.class);\n-    final long avx10_2 = getConstant(\"VM_Version::CPU_AVX10_2\", Long.class);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/amd64\/AMD64HotSpotVMConfig.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"}]}