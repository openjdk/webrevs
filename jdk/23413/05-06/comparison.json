{"files":[{"patch":"@@ -201,4 +201,0 @@\n-  static bool is_vector_cast_supported(BasicType from_bt, BasicType to_bt) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -194,4 +194,0 @@\n-  static bool is_vector_cast_supported(BasicType from_bt, BasicType to_bt) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/arm\/matcher_arm.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -205,4 +205,0 @@\n-  static bool is_vector_cast_supported(BasicType from_bt, BasicType to_bt) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/ppc\/matcher_ppc.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -200,4 +200,0 @@\n-  static bool is_vector_cast_supported(BasicType from_bt, BasicType to_bt) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/matcher_riscv.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,4 +197,0 @@\n-  static bool is_vector_cast_supported(BasicType from_bt, BasicType to_bt) {\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/s390\/matcher_s390.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -264,21 +264,0 @@\n-  static bool is_vector_cast_supported(BasicType from_bt, BasicType to_bt) {\n-    \/\/ Vector casts are only supported on AVX1 and higher\n-    if (UseAVX == 0) {\n-      return false;\n-    }\n-\n-    assert(to_bt != from_bt, \"Must call with different from_bt and to_bt\");\n-\n-    \/\/ T_CHAR is not supported yet due to the backend not implementing vector casts to and from char.\n-    switch (from_bt) {\n-      case T_INT:\n-      case T_SHORT:\n-      case T_BYTE: {\n-        return to_bt == T_INT || to_bt == T_SHORT || to_bt == T_BYTE;\n-      }\n-      default: {\n-        return false;\n-      }\n-    }\n-  }\n-\n","filename":"src\/hotspot\/cpu\/x86\/matcher_x86.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2258,1 +2258,1 @@\n-  if (!is_velt_basic_type_compatible_use_def(use, def)) {\n+  if (!is_velt_basic_type_compatible_use_def(use, def, d_pk->size())) {\n@@ -2324,1 +2324,1 @@\n-bool SuperWord::is_velt_basic_type_compatible_use_def(Node* use, Node* def) const {\n+bool SuperWord::is_velt_basic_type_compatible_use_def(Node* use, Node* def, const uint def_size) const {\n@@ -2356,1 +2356,2 @@\n-  if (Matcher::is_vector_cast_supported(def_bt, use_bt)) {\n+\n+  if ((is_subword_type(def_bt) || is_subword_type(use_bt)) && VectorCastNode::implemented(-1, def_size, def_bt, use_bt)) {\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -656,1 +656,1 @@\n-  bool is_velt_basic_type_compatible_use_def(Node* use, Node* def) const;\n+  bool is_velt_basic_type_compatible_use_def(Node* use, Node* def, const uint def_size) const;\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -194,1 +194,2 @@\n-    if (use_bt != def_bt && !p0->is_Convert() && Matcher::is_vector_cast_supported(def_bt, use_bt)) {\n+    if (use_bt != def_bt && !p0->is_Convert()\n+        && (is_subword_type(def_bt) || is_subword_type(use_bt)) && VectorCastNode::implemented(-1, pack->size(), def_bt, use_bt)) {\n","filename":"src\/hotspot\/share\/opto\/superwordVTransformBuilder.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}