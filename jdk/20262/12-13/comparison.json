{"files":[{"patch":"@@ -3310,8 +3310,0 @@\n-  enc_class enc_cmove_imm(iRegIdst dst, flagsRegSrc crx, immI16 src, cmpOp cmp) %{\n-    Label done;\n-    assert((Assembler::bcondCRbiIs1 & ~Assembler::bcondCRbiIs0) == 8, \"check encoding\");\n-    \/\/ Branch if not (cmp crx).\n-    __ bc(cc_to_inverse_boint($cmp$$cmpcode), cc_to_biint($cmp$$cmpcode, $crx$$reg), done);\n-    __ li($dst$$Register, $src$$constant);\n-    __ bind(done);\n-  %}\n@@ -7413,12 +7405,0 @@\n-instruct cmovI_imm(cmpOp cmp, flagsRegSrc crx, iRegIdst dst, immI16 src) %{\n-  match(Set dst (CMoveI (Binary cmp crx) (Binary dst src)));\n-  ins_cost(DEFAULT_COST+BRANCH_COST);\n-\n-  ins_variable_size_depending_on_alignment(true);\n-\n-  format %{ \"CMOVE   $cmp, $crx, $dst, $src\\n\\t\" %}\n-  \/\/ Worst case is branch + move + stop, no stop without scheduler\n-  size(8);\n-  ins_encode( enc_cmove_imm(dst, crx, src, cmp) );\n-  ins_pipe(pipe_class_default);\n-%}\n@@ -7444,12 +7424,0 @@\n-instruct cmovL_imm(cmpOp cmp, flagsRegSrc crx, iRegLdst dst, immL16 src) %{\n-  match(Set dst (CMoveL (Binary cmp crx) (Binary dst src)));\n-  ins_cost(DEFAULT_COST+BRANCH_COST);\n-\n-  ins_variable_size_depending_on_alignment(true);\n-\n-  format %{ \"CMOVE   $cmp, $crx, $dst, $src\\n\\t\" %}\n-  \/\/ Worst case is branch + move + stop, no stop without scheduler.\n-  size(8);\n-  ins_encode( enc_cmove_imm(dst, crx, src, cmp) );\n-  ins_pipe(pipe_class_default);\n-%}\n@@ -7476,12 +7444,0 @@\n-instruct cmovN_imm(cmpOp cmp, flagsRegSrc crx, iRegNdst dst, immN_0 src) %{\n-  match(Set dst (CMoveN (Binary cmp crx) (Binary dst src)));\n-  ins_cost(DEFAULT_COST+BRANCH_COST);\n-\n-  ins_variable_size_depending_on_alignment(true);\n-\n-  format %{ \"CMOVE   $cmp, $crx, $dst, $src\\n\\t\" %}\n-  \/\/ Worst case is branch + move + stop, no stop without scheduler.\n-  size(8);\n-  ins_encode( enc_cmove_imm(dst, crx, src, cmp) );\n-  ins_pipe(pipe_class_default);\n-%}\n@@ -7507,12 +7463,0 @@\n-instruct cmovP_imm(cmpOp cmp, flagsRegSrc crx, iRegPdst dst, immP_0 src) %{\n-  match(Set dst (CMoveP (Binary cmp crx) (Binary dst src)));\n-  ins_cost(DEFAULT_COST+BRANCH_COST);\n-\n-  ins_variable_size_depending_on_alignment(true);\n-\n-  format %{ \"CMOVE   $cmp, $crx, $dst, $src\\n\\t\" %}\n-  \/\/ Worst case is branch + move + stop, no stop without scheduler.\n-  size(8);\n-  ins_encode( enc_cmove_imm(dst, crx, src, cmp) );\n-  ins_pipe(pipe_class_default);\n-%}\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":0,"deletions":56,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -98,1 +98,0 @@\n-\n@@ -167,1 +166,3 @@\n-               \"ppc64 aes sha%s%s\",\n+               \"ppc64%s%s%s%s\",\n+               (\" sha\"),\n+               (\" aes\"),\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}