{"files":[{"patch":"@@ -734,4 +734,0 @@\n-        case vmIntrinsics::_dsqrt:\n-        case vmIntrinsics::_dsqrt_strict:\n-          \/* run interpreted *\/\n-          break;\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -898,4 +898,0 @@\n-  void kernel_crc32_1word(Register crc, Register buf, Register len, Register table,\n-                          Register t0,  Register t1,  Register t2,  Register t3,\n-                          Register tc0, Register tc1, Register tc2, Register tc3,\n-                          bool invertCRC);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-  static bool convL2FSupported(void) {\n+  static constexpr bool convL2FSupported(void) {\n","filename":"src\/hotspot\/cpu\/ppc\/matcher_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-      FLAG_SET_ERGO(PowerArchitecturePPC64, 0);\n+      FLAG_SET_ERGO(PowerArchitecturePPC64, 8);\n@@ -76,1 +76,1 @@\n-    case  0: PowerArchitecturePPC64_ok = true; break;\n+    case  8: PowerArchitecturePPC64_ok = true; break;\n@@ -114,2 +114,7 @@\n-    if (FLAG_IS_DEFAULT(UseVectorByteReverseInstructionsPPC64)) {\n-      FLAG_SET_ERGO(UseVectorByteReverseInstructionsPPC64, true);\n+    if (SuperwordUseVSX) {\n+      if (FLAG_IS_DEFAULT(UseVectorByteReverseInstructionsPPC64)) {\n+        FLAG_SET_ERGO(UseVectorByteReverseInstructionsPPC64, true);\n+      }\n+    } else if (UseVectorByteReverseInstructionsPPC64) {\n+      warning(\"UseVectorByteReverseInstructionsPPC64 specified, but needs SuperwordUseVSX.\");\n+      FLAG_SET_DEFAULT(UseVectorByteReverseInstructionsPPC64, false);\n@@ -253,1 +258,0 @@\n-\n@@ -272,1 +276,0 @@\n-\n@@ -274,1 +277,5 @@\n-    FLAG_SET_DEFAULT(UseSHA256Intrinsics, true);\n+    if (UseSHA) {\n+      FLAG_SET_DEFAULT(UseSHA256Intrinsics, true);\n+    } else {\n+      FLAG_SET_DEFAULT(UseSHA256Intrinsics, false);\n+    }\n@@ -278,1 +285,5 @@\n-    FLAG_SET_DEFAULT(UseSHA512Intrinsics, true);\n+    if (UseSHA) {\n+      FLAG_SET_DEFAULT(UseSHA512Intrinsics, true);\n+    } else {\n+      FLAG_SET_DEFAULT(UseSHA512Intrinsics, false);\n+    }\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-    \"   cmpw    %[compare_value], %[old_value] \\n\"\n+    \"   cmpw    %[compare_value], %[old_value]            \\n\"\n@@ -266,1 +266,1 @@\n-      [loaded_value]             \"=&r\"   (loaded_value),\n+      [loaded_value]        \"=&r\"   (loaded_value),\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/atomic_linux_ppc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}