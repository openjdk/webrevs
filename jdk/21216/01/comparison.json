{"files":[{"patch":"@@ -1515,0 +1515,32 @@\n+\/\/ Support class used to generate HPROF_LOAD_CLASS records\n+\n+class LoadedClassDumper : public LockedClassesDo {\n+ private:\n+  AbstractDumpWriter* _writer;\n+  GrowableArray<Klass*>* _klass_map;\n+  u4 _class_serial_num;\n+  AbstractDumpWriter* writer() const { return _writer; }\n+  void add_class_serial_number(Klass* k, int serial_num) {\n+    _klass_map->at_put_grow(serial_num, k);\n+  }\n+ public:\n+  LoadedClassDumper(AbstractDumpWriter* writer, GrowableArray<Klass*>* klass_map)\n+    : _writer(writer), _klass_map(klass_map), _class_serial_num(0) {}\n+\n+  void do_klass(Klass* k) {\n+    \/\/ len of HPROF_LOAD_CLASS record\n+    u4 remaining = 2 * oopSize + 2 * sizeof(u4);\n+    DumperSupport::write_header(writer(), HPROF_LOAD_CLASS, remaining);\n+    \/\/ class serial number is just a number\n+    writer()->write_u4(++_class_serial_num);\n+    \/\/ class ID\n+    writer()->write_classID(k);\n+    \/\/ add the Klass* and class serial number pair\n+    add_class_serial_number(k, _class_serial_num);\n+    writer()->write_u4(STACK_TRACE_ID);\n+    \/\/ class name ID\n+    Symbol* name = k->name();\n+    writer()->write_symbolID(name);\n+  }\n+};\n+\n@@ -2193,3 +2225,1 @@\n-  static VM_HeapDumper*   _global_dumper;\n-  static DumpWriter*      _global_writer;\n-  DumpWriter*             _local_writer;\n+  DumpWriter*             _writer;\n@@ -2221,14 +2251,1 @@\n-  \/\/ accessors and setters\n-  static VM_HeapDumper* dumper()         {  assert(_global_dumper != nullptr, \"Error\"); return _global_dumper; }\n-  static DumpWriter* writer()            {  assert(_global_writer != nullptr, \"Error\"); return _global_writer; }\n-\n-  void set_global_dumper() {\n-    assert(_global_dumper == nullptr, \"Error\");\n-    _global_dumper = this;\n-  }\n-  void set_global_writer() {\n-    assert(_global_writer == nullptr, \"Error\");\n-    _global_writer = _local_writer;\n-  }\n-  void clear_global_dumper() { _global_dumper = nullptr; }\n-  void clear_global_writer() { _global_writer = nullptr; }\n+  DumpWriter* writer() const { return _writer; }\n@@ -2238,3 +2255,0 @@\n-  \/\/ writes a HPROF_LOAD_CLASS record to global writer\n-  static void do_load_class(Klass* k);\n-\n@@ -2244,4 +2258,0 @@\n-  void add_class_serial_number(Klass* k, int serial_num) {\n-    _klass_map->at_put_grow(serial_num, k);\n-  }\n-\n@@ -2262,1 +2272,1 @@\n-    _local_writer = writer;\n+    _writer = writer;\n@@ -2316,3 +2326,0 @@\n-VM_HeapDumper* VM_HeapDumper::_global_dumper = nullptr;\n-DumpWriter*    VM_HeapDumper::_global_writer = nullptr;\n-\n@@ -2332,25 +2339,0 @@\n-\/\/ writes a HPROF_LOAD_CLASS record for the class\n-void VM_HeapDumper::do_load_class(Klass* k) {\n-  static u4 class_serial_num = 0;\n-\n-  \/\/ len of HPROF_LOAD_CLASS record\n-  u4 remaining = 2*oopSize + 2*sizeof(u4);\n-\n-  DumperSupport::write_header(writer(), HPROF_LOAD_CLASS, remaining);\n-\n-  \/\/ class serial number is just a number\n-  writer()->write_u4(++class_serial_num);\n-\n-  \/\/ class ID\n-  writer()->write_classID(k);\n-\n-  \/\/ add the Klass* and class serial number pair\n-  dumper()->add_class_serial_number(k, class_serial_num);\n-\n-  writer()->write_u4(STACK_TRACE_ID);\n-\n-  \/\/ class name ID\n-  Symbol* name = k->name();\n-  writer()->write_symbolID(name);\n-}\n-\n@@ -2433,5 +2415,0 @@\n-  \/\/ At this point we should be the only dumper active, so\n-  \/\/ the following should be safe.\n-  set_global_dumper();\n-  set_global_writer();\n-\n@@ -2449,4 +2426,0 @@\n-\n-  \/\/ Now we clear the global variables, so that a future dumper can run.\n-  clear_global_dumper();\n-  clear_global_writer();\n@@ -2483,2 +2456,2 @@\n-      LockedClassesDo locked_load_classes(&do_load_class);\n-      ClassLoaderDataGraph::classes_do(&locked_load_classes);\n+      LoadedClassDumper loaded_class_dumper(writer(), _klass_map);\n+      ClassLoaderDataGraph::classes_do(&loaded_class_dumper);\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":37,"deletions":64,"binary":false,"changes":101,"status":"modified"}]}