{"files":[{"patch":"@@ -1268,1 +1268,1 @@\n-        String[] countries = ISO_3166_1_ALPHA2.get();\n+        String[] countries = LocaleISOData.ISO_3166_1_ALPHA2.get();\n@@ -1283,3 +1283,3 @@\n-            case PART1_ALPHA2 -> Set.of(ISO_3166_1_ALPHA2.get());\n-            case PART1_ALPHA3 -> ISO_3166_1_ALPHA3.get();\n-            case PART3 -> ISO_3166_3.get();\n+            case PART1_ALPHA2 -> Set.of(LocaleISOData.ISO_3166_1_ALPHA2.get());\n+            case PART1_ALPHA3 -> LocaleISOData.ISO_3166_1_ALPHA3.get();\n+            case PART3 -> LocaleISOData.ISO_3166_3.get();\n@@ -1306,1 +1306,1 @@\n-        String[] languages = ISO_639.get();\n+        String[] languages = LocaleISOData.ISO_639.get();\n@@ -1310,9 +1310,0 @@\n-    private static String[] getISO2Table(String table) {\n-        int len = table.length() \/ 5;\n-        String[] isoTable = new String[len];\n-        for (int i = 0, j = 0; i < len; i++, j += 5) {\n-            isoTable[i] = table.substring(j, j + 2);\n-        }\n-        return isoTable;\n-    }\n-\n@@ -1916,1 +1907,1 @@\n-        String language3 = getISO3Code(lang, LocaleISOData.isoLanguageTable);\n+        String language3 = LocaleISOData.getISO3LangCode(lang);\n@@ -1938,1 +1929,1 @@\n-        String country3 = getISO3Code(baseLocale.getRegion(), LocaleISOData.isoCountryTable);\n+        String country3 = LocaleISOData.getISO3CtryCode(baseLocale.getRegion());\n@@ -1946,21 +1937,0 @@\n-    private static String getISO3Code(String iso2Code, String table) {\n-        int codeLength = iso2Code.length();\n-        if (codeLength == 0) {\n-            return \"\";\n-        }\n-\n-        int tableLength = table.length();\n-        int index = tableLength;\n-        if (codeLength == 2) {\n-            char c1 = iso2Code.charAt(0);\n-            char c2 = iso2Code.charAt(1);\n-            for (index = 0; index < tableLength; index += 5) {\n-                if (table.charAt(index) == c1\n-                    && table.charAt(index + 1) == c2) {\n-                    break;\n-                }\n-            }\n-        }\n-        return index < tableLength ? table.substring(index + 2, index + 5) : null;\n-    }\n-\n@@ -2348,1 +2318,1 @@\n-    private transient final Supplier<String> languageTag =\n+    private final transient Supplier<String> languageTag =\n@@ -2548,32 +2518,0 @@\n-    private static final Supplier<String[]> ISO_639 =\n-            StableValue.supplier(new Supplier<>() {\n-                @Override\n-                public String[] get() {\n-                    return getISO2Table(LocaleISOData.isoLanguageTable);\n-                }\n-            });\n-\n-    private static final Supplier<String[]> ISO_3166_1_ALPHA2 =\n-            StableValue.supplier(new Supplier<>() {\n-                @Override\n-                public String[] get() {\n-                    return getISO2Table(LocaleISOData.isoCountryTable);\n-                }\n-            });\n-\n-    private static final Supplier<Set<String>> ISO_3166_1_ALPHA3 =\n-            StableValue.supplier(new Supplier<>() {\n-                @Override\n-                public Set<String> get() {\n-                    return LocaleISOData.computeISO3166_1Alpha3Countries();\n-                }\n-            });\n-\n-    private static final Supplier<Set<String>> ISO_3166_3 =\n-            StableValue.supplier(new Supplier<>() {\n-                @Override\n-                public Set<String> get() {\n-                    return Set.of(LocaleISOData.ISO3166_3);\n-                }\n-            });\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":8,"deletions":70,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.util.function.Supplier;\n+\n+\/\/ Methods and suppliers for producing ISO 639\/3166 resources used by Locale.\n@@ -29,0 +32,33 @@\n+\n+    static final Supplier<String[]> ISO_639 =\n+            StableValue.supplier(new Supplier<>() {\n+                @Override\n+                public String[] get() {\n+                    return getISO2Table(isoLanguageTable);\n+                }\n+            });\n+\n+    static final Supplier<String[]> ISO_3166_1_ALPHA2 =\n+            StableValue.supplier(new Supplier<>() {\n+                @Override\n+                public String[] get() {\n+                    return getISO2Table(isoCountryTable);\n+                }\n+            });\n+\n+    static final Supplier<Set<String>> ISO_3166_1_ALPHA3 =\n+            StableValue.supplier(new Supplier<>() {\n+                @Override\n+                public Set<String> get() {\n+                    return computeISO3166_1Alpha3Countries();\n+                }\n+            });\n+\n+    static final Supplier<Set<String>> ISO_3166_3 =\n+            StableValue.supplier(new Supplier<>() {\n+                @Override\n+                public Set<String> get() {\n+                    return Set.of(ISO3166_3);\n+                }\n+            });\n+\n@@ -32,1 +68,1 @@\n-    static final String isoLanguageTable =\n+    private static final String isoLanguageTable =\n@@ -226,1 +262,1 @@\n-    static final String isoCountryTable =\n+    private static final String isoCountryTable =\n@@ -483,1 +519,1 @@\n-    static final String[] ISO3166_3 = {\n+    private static final String[] ISO3166_3 = {\n@@ -490,0 +526,42 @@\n+    static String getISO3LangCode(String language) {\n+        return getISO3Code(language, isoLanguageTable);\n+    }\n+\n+    static String getISO3CtryCode(String country) {\n+        return getISO3Code(country, isoCountryTable);\n+    }\n+\n+    private static String getISO3Code(String iso2Code, String table) {\n+        int codeLength = iso2Code.length();\n+        if (codeLength == 0) {\n+            return \"\";\n+        }\n+\n+        int tableLength = table.length();\n+        int index = tableLength;\n+        if (codeLength == 2) {\n+            char c1 = iso2Code.charAt(0);\n+            char c2 = iso2Code.charAt(1);\n+            for (index = 0; index < tableLength; index += 5) {\n+                if (table.charAt(index) == c1\n+                        && table.charAt(index + 1) == c2) {\n+                    break;\n+                }\n+            }\n+        }\n+        return index < tableLength ? table.substring(index + 2, index + 5) : null;\n+    }\n+\n+    \/**\n+     * This method computes an array of alpha-2 codes from either ISO639 or\n+     * ISO3166.\n+     *\/\n+    private static String[] getISO2Table(String table) {\n+        int len = table.length() \/ 5;\n+        String[] isoTable = new String[len];\n+        for (int i = 0, j = 0; i < len; i++, j += 5) {\n+            isoTable[i] = table.substring(j, j + 2);\n+        }\n+        return isoTable;\n+    }\n+\n@@ -494,1 +572,1 @@\n-    static Set<String> computeISO3166_1Alpha3Countries() {\n+    private static Set<String> computeISO3166_1Alpha3Countries() {\n@@ -503,2 +581,1 @@\n-    private LocaleISOData() {\n-    }\n+    private LocaleISOData() {}\n","filename":"src\/java.base\/share\/classes\/java\/util\/LocaleISOData.java","additions":84,"deletions":7,"binary":false,"changes":91,"status":"modified"}]}