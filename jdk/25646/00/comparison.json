{"files":[{"patch":"@@ -51,1 +51,0 @@\n-import java.util.concurrent.ConcurrentHashMap;\n@@ -53,0 +52,1 @@\n+import java.util.function.Supplier;\n@@ -736,1 +736,1 @@\n-    public static enum IsoCountryCode {\n+    public enum IsoCountryCode {\n@@ -741,6 +741,1 @@\n-        PART1_ALPHA2 {\n-            @Override\n-            Set<String> createCountryCodeSet() {\n-                return Set.of(Locale.getISOCountries());\n-            }\n-        },\n+        PART1_ALPHA2,\n@@ -753,6 +748,1 @@\n-        PART1_ALPHA3 {\n-            @Override\n-            Set<String> createCountryCodeSet() {\n-                return LocaleISOData.computeISO3166_1Alpha3Countries();\n-            }\n-        },\n+        PART1_ALPHA3,\n@@ -763,25 +753,1 @@\n-        PART3 {\n-            @Override\n-            Set<String> createCountryCodeSet() {\n-                return Set.of(LocaleISOData.ISO3166_3);\n-            }\n-        };\n-\n-        \/**\n-         * Concrete implementation of this method attempts to compute value\n-         * for iso3166CodesMap for each IsoCountryCode type key.\n-         *\/\n-        abstract Set<String> createCountryCodeSet();\n-\n-        \/**\n-         * Map to hold country codes for each ISO3166 part.\n-         *\/\n-        private static final Map<IsoCountryCode, Set<String>> iso3166CodesMap = new ConcurrentHashMap<>();\n-\n-        \/**\n-         * This method is called from Locale class to retrieve country code set\n-         * for getISOCountries(type)\n-         *\/\n-        static Set<String> retrieveISOCountryCodes(IsoCountryCode type) {\n-            return iso3166CodesMap.computeIfAbsent(type, IsoCountryCode::createCountryCodeSet);\n-        }\n+        PART3\n@@ -1007,1 +973,0 @@\n-\n@@ -1014,1 +979,1 @@\n-            return LocaleCache.cache(baseloc);\n+            return LOCALE_CACHE.get().computeIfAbsent(baseloc, LOCALE_CREATOR);\n@@ -1017,1 +982,1 @@\n-            return LocaleCache.cache(key);\n+            return LOCALE_CACHE.get().computeIfAbsent(key, LOCALE_CREATOR);\n@@ -1021,9 +986,7 @@\n-    private static final class LocaleCache implements Function<Object, Locale> {\n-        private static final ReferencedKeyMap<Object, Locale> LOCALE_CACHE\n-                = ReferencedKeyMap.create(true, ReferencedKeyMap.concurrentHashMapSupplier());\n-\n-        private static final Function<Object, Locale> LOCALE_CREATOR = new LocaleCache();\n-\n-        public static Locale cache(Object key) {\n-            return LOCALE_CACHE.computeIfAbsent(key, LOCALE_CREATOR);\n-        }\n+    private static final Supplier<ReferencedKeyMap<Object, Locale>> LOCALE_CACHE =\n+            StableValue.supplier(new Supplier<>() {\n+                @Override\n+                public ReferencedKeyMap<Object, Locale> get() {\n+                    return ReferencedKeyMap.create(true, ReferencedKeyMap.concurrentHashMapSupplier());\n+                }\n+            });\n@@ -1031,0 +994,1 @@\n+    private static final Function<Object, Locale> LOCALE_CREATOR = new Function<>() {\n@@ -1039,1 +1003,1 @@\n-    }\n+    };\n@@ -1304,6 +1268,2 @@\n-        if (isoCountries == null) {\n-            isoCountries = getISO2Table(LocaleISOData.isoCountryTable);\n-        }\n-        String[] result = new String[isoCountries.length];\n-        System.arraycopy(isoCountries, 0, result, 0, isoCountries.length);\n-        return result;\n+        String[] countries = ISO_3166_1_ALPHA2.get();\n+        return Arrays.copyOf(countries, countries.length);\n@@ -1322,1 +1282,5 @@\n-        return IsoCountryCode.retrieveISOCountryCodes(type);\n+        return switch (type) {\n+            case PART1_ALPHA2 -> Set.of(ISO_3166_1_ALPHA2.get());\n+            case PART1_ALPHA3 -> ISO_3166_1_ALPHA3.get();\n+            case PART3 -> ISO_3166_3.get();\n+        };\n@@ -1342,7 +1306,2 @@\n-        String[] languages = Locale.isoLanguages;\n-        if (languages == null) {\n-            Locale.isoLanguages = languages = getISO2Table(LocaleISOData.isoLanguageTable);\n-        }\n-        String[] result = new String[languages.length];\n-        System.arraycopy(languages, 0, result, 0, languages.length);\n-        return result;\n+        String[] languages = ISO_639.get();\n+        return Arrays.copyOf(languages, languages.length);\n@@ -1686,4 +1645,2 @@\n-        String lTag = this.languageTag;\n-        if (lTag != null) {\n-            return lTag;\n-        }\n+        return languageTag.get();\n+    }\n@@ -1691,0 +1648,1 @@\n+    private String computeLanguageTag() {\n@@ -1692,1 +1650,1 @@\n-        StringBuilder buf = new StringBuilder();\n+        StringBuilder bldr = new StringBuilder();\n@@ -1696,1 +1654,1 @@\n-            buf.append(LanguageTag.canonicalizeLanguage(subtag));\n+            bldr.append(LanguageTag.canonicalizeLanguage(subtag));\n@@ -1701,2 +1659,2 @@\n-            buf.append(LanguageTag.SEP);\n-            buf.append(LanguageTag.canonicalizeScript(subtag));\n+            bldr.append(LanguageTag.SEP);\n+            bldr.append(LanguageTag.canonicalizeScript(subtag));\n@@ -1707,2 +1665,2 @@\n-            buf.append(LanguageTag.SEP);\n-            buf.append(LanguageTag.canonicalizeRegion(subtag));\n+            bldr.append(LanguageTag.SEP);\n+            bldr.append(LanguageTag.canonicalizeRegion(subtag));\n@@ -1713,1 +1671,1 @@\n-            buf.append(LanguageTag.SEP);\n+            bldr.append(LanguageTag.SEP);\n@@ -1715,1 +1673,1 @@\n-            buf.append(s);\n+            bldr.append(s);\n@@ -1720,2 +1678,2 @@\n-            buf.append(LanguageTag.SEP);\n-            buf.append(LanguageTag.canonicalizeExtension(s));\n+            bldr.append(LanguageTag.SEP);\n+            bldr.append(LanguageTag.canonicalizeExtension(s));\n@@ -1726,2 +1684,2 @@\n-            if (buf.length() > 0) {\n-                buf.append(LanguageTag.SEP);\n+            if (bldr.length() > 0) {\n+                bldr.append(LanguageTag.SEP);\n@@ -1729,1 +1687,1 @@\n-            buf.append(LanguageTag.PRIVATEUSE).append(LanguageTag.SEP);\n+            bldr.append(LanguageTag.PRIVATEUSE).append(LanguageTag.SEP);\n@@ -1731,1 +1689,1 @@\n-            buf.append(subtag);\n+            bldr.append(subtag);\n@@ -1734,7 +1692,1 @@\n-        String langTag = buf.toString();\n-        synchronized (this) {\n-            if (this.languageTag == null) {\n-                this.languageTag = langTag;\n-            }\n-        }\n-        return langTag;\n+        return bldr.toString();\n@@ -2396,1 +2348,7 @@\n-    private transient volatile String languageTag;\n+    private transient final Supplier<String> languageTag =\n+            StableValue.supplier(new Supplier<>() {\n+                @Override\n+                public String get() {\n+                    return computeLanguageTag();\n+                }\n+            });\n@@ -2590,1 +2548,23 @@\n-    private static volatile String[] isoLanguages;\n+    private static final Supplier<String[]> ISO_639 =\n+            StableValue.supplier(new Supplier<>() {\n+                @Override\n+                public String[] get() {\n+                    return getISO2Table(LocaleISOData.isoLanguageTable);\n+                }\n+            });\n+\n+    private static final Supplier<String[]> ISO_3166_1_ALPHA2 =\n+            StableValue.supplier(new Supplier<>() {\n+                @Override\n+                public String[] get() {\n+                    return getISO2Table(LocaleISOData.isoCountryTable);\n+                }\n+            });\n+\n+    private static final Supplier<Set<String>> ISO_3166_1_ALPHA3 =\n+            StableValue.supplier(new Supplier<>() {\n+                @Override\n+                public Set<String> get() {\n+                    return LocaleISOData.computeISO3166_1Alpha3Countries();\n+                }\n+            });\n@@ -2592,1 +2572,7 @@\n-    private static volatile String[] isoCountries;\n+    private static final Supplier<Set<String>> ISO_3166_3 =\n+            StableValue.supplier(new Supplier<>() {\n+                @Override\n+                public Set<String> get() {\n+                    return Set.of(LocaleISOData.ISO3166_3);\n+                }\n+            });\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":80,"deletions":94,"binary":false,"changes":174,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.util.function.Supplier;\n@@ -93,0 +94,9 @@\n+    \/\/ Interned BaseLocale cache\n+    private static final Supplier<ReferencedKeySet<BaseLocale>> CACHE =\n+            StableValue.supplier(new Supplier<>() {\n+                @Override\n+                public ReferencedKeySet<BaseLocale> get() {\n+                    return ReferencedKeySet.create(true, ReferencedKeySet.concurrentHashMapSupplier());\n+                }\n+            });\n+\n@@ -167,5 +177,1 @@\n-        class InterningCache { \/\/ TODO: StableValue\n-            private static final ReferencedKeySet<BaseLocale> CACHE =\n-                    ReferencedKeySet.create(true, ReferencedKeySet.concurrentHashMapSupplier());\n-        }\n-        return InterningCache.CACHE.intern(new BaseLocale(\n+        return CACHE.get().intern(new BaseLocale(\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/BaseLocale.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"}]}