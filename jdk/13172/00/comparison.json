{"files":[{"patch":"@@ -702,1 +702,2 @@\n-            Rectangle draggedCellRect = header.getHeaderRect(draggedColumnIndex);\n+            if (draggedColumnIndex != -1) {\n+                Rectangle draggedCellRect = header.getHeaderRect(draggedColumnIndex);\n@@ -704,4 +705,4 @@\n-            \/\/ Draw a gray well in place of the moving column.\n-            g.setColor(header.getParent().getBackground());\n-            g.fillRect(draggedCellRect.x, draggedCellRect.y,\n-                               draggedCellRect.width, draggedCellRect.height);\n+                \/\/ Draw a gray well in place of the moving column.\n+                g.setColor(header.getParent().getBackground());\n+                g.fillRect(draggedCellRect.x, draggedCellRect.y,\n+                        draggedCellRect.width, draggedCellRect.height);\n@@ -709,1 +710,1 @@\n-            draggedCellRect.x += header.getDraggedDistance();\n+                draggedCellRect.x += header.getDraggedDistance();\n@@ -711,4 +712,7 @@\n-            \/\/ Fill the background.\n-            g.setColor(header.getBackground());\n-            g.fillRect(draggedCellRect.x, draggedCellRect.y,\n-                       draggedCellRect.width, draggedCellRect.height);\n+                \/\/ Fill the background.\n+                g.setColor(header.getBackground());\n+                g.fillRect(draggedCellRect.x, draggedCellRect.y,\n+                        draggedCellRect.width, draggedCellRect.height);\n+\n+                paintCell(g, draggedCellRect, draggedColumnIndex);\n+            }\n@@ -716,1 +720,0 @@\n-            paintCell(g, draggedCellRect, draggedColumnIndex);\n@@ -724,0 +727,1 @@\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTableHeaderUI.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2124,0 +2124,3 @@\n+        if (draggedColumnIndex == -1) {\n+            return;\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTableUI.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8068824\n+ * @key headful\n+ * @summary JTable header rendering problem (after setting preferred size)\n+ * @run JTableHeaderExceptionTest\n+*\/\n+import java.awt.BorderLayout;\n+import java.awt.MouseInfo;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.InputEvent;\n+import javax.swing.*;\n+import javax.swing.table.AbstractTableModel;\n+\n+public class JTableHeaderExceptionTest {\n+    static JFrame frame;\n+    static JTable table;\n+    static Point tableLoc;\n+\n+    public static void main(String args[]) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame();\n+                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\n+                Object rowData[][] = {{\"Row1-Column1\", \"Row1-Column2\", \"Row1-Column3\"},\n+                        {\"Row2-Column1\", \"Row2-Column2\", \"Row2-Column3\"}};\n+                Object columnNames[] = {\"Test\", \"Click me with right mouse click!\", \"Test\"};\n+\n+                DragTestTable.DragTestTableModel model = new DragTestTable.DragTestTableModel(rowData, columnNames);\n+\n+                DragTestTable dragTable = new DragTestTable(model);\n+                table = dragTable;\n+\n+                JScrollPane scrollPane = new JScrollPane(table);\n+                frame.add(scrollPane, BorderLayout.CENTER);\n+                frame.setSize(600, 150);\n+                frame.setVisible(true);\n+            });\n+            Robot robot = new Robot();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                tableLoc = table.getTableHeader().getLocationOnScreen();\n+            });\n+            robot.mouseMove(tableLoc.x + 5, tableLoc.y + 5);\n+            robot.waitForIdle();\n+            robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            Point p = MouseInfo.getPointerInfo().getLocation();\n+            robot.mouseMove(p.x + 5, p.y + 5);\n+            robot.delay(1000);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(1000);\n+        } finally {\n+            SwingUtilities.invokeAndWait(frame::dispose);\n+        }\n+    }\n+}\n+\n+class DragTestTable extends JTable {\n+\n+    Point loc;\n+    public DragTestTable(DragTestTableModel model){\n+\n+        super(model);\n+\n+        JPopupMenu menu = new JPopupMenu();\n+        menu.add(new AbstractAction(\"Bug Test\") {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                \/\/loc = menu.getLocationOnScreen();\n+                ((DragTestTableModel)getModel()).fireTableStructureChanged();\n+            }\n+        });\n+\n+\n+\n+        getTableHeader().setComponentPopupMenu(menu);\n+    }\n+\n+    public static class DragTestTableModel extends AbstractTableModel {\n+        private Object rowData[][];\n+        private Object columnNames[];\n+\n+        public DragTestTableModel(Object rowData[][], Object columnNames[]){\n+            super();\n+            this.rowData = rowData;\n+            this.columnNames = columnNames;\n+        }\n+\n+        public String getColumnName(int column) { return columnNames[column].toString(); }\n+        public int getRowCount() { return rowData.length; }\n+        public int getColumnCount() { return columnNames.length; }\n+        public Object getValueAt(int row, int col) { return rowData[row][col]; }\n+        public boolean isCellEditable(int row, int column) { return true; }\n+        public void setValueAt(Object value, int row, int col) {\n+            rowData[row][col] = value;\n+            fireTableCellUpdated(row, col);\n+        }\n+        public void fireTableStructureChanged(){\n+            super.fireTableStructureChanged();\n+        }\n+\n+    }\n+}\n+\n+\n","filename":"test\/jdk\/javax\/swing\/JTableHeader\/JTableHeaderExceptionTest.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"}]}