{"files":[{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @key randomness\n+ * @bug 8321011\n+ * @summary Test vector intrinsic for Math.round(double) in full 64 bits range.\n+ *\n+ * @requires vm.compiler2.enabled\n+ *\n+ * @library \/test\/lib \/\n+ * @run main compiler.vectorization.TestRoundVectorDoubleRandom\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import java.util.Random;\n+import compiler.lib.ir_framework.DontCompile;\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.IRNode;\n+import compiler.lib.ir_framework.Run;\n+import compiler.lib.ir_framework.RunInfo;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+import compiler.lib.ir_framework.Warmup;\n+\n+public class TestRoundVectorDoubleRandom {\n+  private static final int ITERS  = 11000;\n+  private static final int ARRLEN = 997;\n+  private static final double ADD_INIT = -7500.;\n+\n+  private static final double[] input = new double[ARRLEN];\n+  private static final long [] res = new long[ARRLEN];\n+  private static final Random rand = new Random();\n+\n+  public static void main(String args[]) {\n+    TestFramework.runWithFlags(\"-XX:-TieredCompilation\", \"-XX:CompileThresholdScaling=0.3\");\n+    TestFramework.runWithFlags(\"-XX:-TieredCompilation\", \"-XX:CompileThresholdScaling=0.3\", \"-XX:MaxVectorSize=8\");\n+    TestFramework.runWithFlags(\"-XX:-TieredCompilation\", \"-XX:CompileThresholdScaling=0.3\", \"-XX:MaxVectorSize=16\");\n+    TestFramework.runWithFlags(\"-XX:-TieredCompilation\", \"-XX:CompileThresholdScaling=0.3\", \"-XX:MaxVectorSize=32\");\n+  }\n+\n+  @DontCompile\n+  long golden_round(double d) {\n+    return Math.round(d);\n+  }\n+\n+  @Test\n+  @IR(counts = {IRNode.ROUND_VD, \"> 0\"},\n+      applyIfPlatform = {\"x64\", \"true\"},\n+      applyIfCPUFeature = {\"avx512dq\", \"true\"})\n+  @IR(counts = {IRNode.ROUND_VD, \"> 0\"},\n+      applyIfPlatform = {\"aarch64\", \"true\"})\n+  void test_round(long[] a0, double[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = Math.round(a1[i]);\n+    }\n+  }\n+\n+  @Run(test = \"test_round\")\n+  @Warmup(ITERS)\n+  void test_rounds(RunInfo runInfo) {\n+    \/\/ Initialize\n+    for (int i = 0; i < ARRLEN; i++) {\n+      double val = ADD_INIT+(double)i;\n+      input[i] = val;\n+    }\n+\n+    test_round(res, input);\n+    \/\/ skip test\/verify when warming up\n+    if (runInfo.isWarmUp()) {\n+      return;\n+    }\n+\n+    int errn = 0;\n+    final int eShift = 52;\n+    final int eWidth = 11;\n+    final int eBound = 1 << eWidth;\n+    final int fWidth = eShift;\n+    final long fBound = 1 << fWidth;\n+    final int fNum = 256;\n+\n+    \/\/ prepare test data\n+    long fis[] = new long[fNum];\n+    int fidx = 0;\n+    for (; fidx < fWidth; fidx++) {\n+      fis[fidx] = 1 << fidx;\n+    }\n+    fis[fidx++] = 0;\n+    for (; fidx < fNum; fidx++) {\n+      fis[fidx] = rand.nextLong(fBound);\n+    }\n+\n+    \/\/ run test & verify\n+    for (long fi : fis) {\n+      final int eStart = rand.nextInt(9);\n+      final int eStep = (1 << 3) + rand.nextInt(3);\n+      for (int ei = eStart; ei < eBound; ei += eStep) {\n+        int eiIdx = ei\/eStep;\n+        long bits = (ei << eShift) + fi;\n+        input[eiIdx*2] = Double.longBitsToDouble(bits);\n+        bits = bits | (1 << 63);\n+        input[eiIdx*2+1] = Double.longBitsToDouble(bits);\n+      }\n+\n+      \/\/ test\n+      test_round(res, input);\n+\n+      \/\/ verify results\n+      for (int ei = eStart; ei < eBound; ei += eStep) {\n+        int eiIdx = ei\/eStep;\n+        for (int sign = 0; sign < 2; sign++) {\n+          int idx = eiIdx * 2 + sign;\n+          if (res[idx] != Math.round(input[idx])) {\n+            errn++;\n+            System.err.println(\"round error, input: \" + input[idx] +\n+                               \", res: \" + res[idx] + \"expected: \" + Math.round(input[idx]) +\n+                               \", input hex: \" + Double.doubleToLongBits(input[idx]) +\n+                               \", fi: \" + fi + \", ei: \" + ei + \", sign: \" + sign);\n+          }\n+        }\n+      }\n+    }\n+    if (errn > 0) {\n+      throw new RuntimeException(\"There are some round error detected!\");\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRoundVectorDoubleRandom.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @key randomness\n+ * @bug 8321010\n+ * @summary Test vector intrinsic for Math.round(float) in full 32 bits range\n+ *\n+ * @requires vm.compiler2.enabled\n+ *\n+ * @library \/test\/lib \/\n+ * @run main compiler.vectorization.TestRoundVectorFloatRandom\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import java.util.Random;\n+import compiler.lib.ir_framework.DontCompile;\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.IRNode;\n+import compiler.lib.ir_framework.Run;\n+import compiler.lib.ir_framework.RunInfo;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+import compiler.lib.ir_framework.Warmup;\n+\n+public class TestRoundVectorFloatRandom {\n+  private static final int ITERS  = 11000;\n+  private static final int ARRLEN = 997;\n+  private static final float ADD_INIT = -7500.f;\n+\n+  private static final float[] input = new float[ARRLEN];\n+  private static final int[] res = new int[ARRLEN];\n+  private static final Random rand = new Random();\n+\n+  public static void main(String args[]) {\n+    TestFramework.runWithFlags(\"-XX:-TieredCompilation\", \"-XX:CompileThresholdScaling=0.3\");\n+    TestFramework.runWithFlags(\"-XX:-TieredCompilation\", \"-XX:CompileThresholdScaling=0.3\", \"-XX:MaxVectorSize=8\");\n+    TestFramework.runWithFlags(\"-XX:-TieredCompilation\", \"-XX:CompileThresholdScaling=0.3\", \"-XX:MaxVectorSize=16\");\n+    TestFramework.runWithFlags(\"-XX:-TieredCompilation\", \"-XX:CompileThresholdScaling=0.3\", \"-XX:MaxVectorSize=32\");\n+  }\n+\n+  @DontCompile\n+  int golden_round(float f) {\n+    return Math.round(f);\n+  }\n+\n+  @Test\n+  @IR(counts = {IRNode.ROUND_VF, \"> 0\"},\n+      applyIfPlatform = {\"x64\", \"true\"},\n+      applyIfCPUFeature = {\"avx\", \"true\"})\n+  @IR(counts = {IRNode.ROUND_VF, \"> 0\"},\n+      applyIfPlatform = {\"aarch64\", \"true\"})\n+  void test_round(int[] a0, float[] a1) {\n+    for (int i = 0; i < a0.length; i+=1) {\n+      a0[i] = Math.round(a1[i]);\n+    }\n+  }\n+\n+  @Run(test = \"test_round\")\n+  @Warmup(ITERS)\n+  void test_rounds(RunInfo runInfo) {\n+    \/\/ Initialize\n+    for (int i = 0; i < ARRLEN; i++) {\n+      float val = ADD_INIT+(float)i;\n+      input[i] = val;\n+    }\n+\n+    test_round(res, input);\n+    \/\/ skip test\/verify when warming up\n+    if (runInfo.isWarmUp()) {\n+      return;\n+    }\n+\n+    int errn = 0;\n+    final int eStart = 0;\n+    final int eShift = 23;\n+    final int eWidth = 8;\n+    final int eBound = 1 << eWidth;\n+    final int fWidth = eShift;\n+    final int fBound = 1 << fWidth;\n+    final int fNum = 128;\n+\n+    \/\/ prepare test data\n+    int fis[] = new int[fNum];\n+    int fidx = 0;\n+    for (; fidx < fWidth; fidx++) {\n+      fis[fidx] = 1 << fidx;\n+    }\n+    fis[fidx++] = 0;\n+    for (; fidx < fNum; fidx++) {\n+      fis[fidx] = rand.nextInt(fBound);\n+    }\n+\n+    \/\/ run test & verify\n+    for (int fi : fis) {\n+      for (int ei = eStart; ei < eBound; ei++) {\n+        int bits = (ei << eShift) + fi;\n+        input[ei*2] = Float.intBitsToFloat(bits);\n+        bits = bits | (1 << 31);\n+        input[ei*2+1] = Float.intBitsToFloat(bits);\n+      }\n+\n+      \/\/ test\n+      test_round(res, input);\n+\n+      \/\/ verify results\n+      for (int ei = eStart; ei < eBound; ei++) {\n+        for (int sign = 0; sign < 2; sign++) {\n+          int idx = ei * 2 + sign;\n+          if (res[idx] != Math.round(input[idx])) {\n+            errn++;\n+            System.err.println(\"round error, input: \" + input[idx] +\n+                               \", res: \" + res[idx] + \"expected: \" + Math.round(input[idx]) +\n+                               \", input hex: \" + Float.floatToIntBits(input[idx]) +\n+                               \", fi: \" + fi + \", ei: \" + ei + \", sign: \" + sign);\n+          }\n+        }\n+      }\n+    }\n+    if (errn > 0) {\n+      throw new RuntimeException(\"There are some round error detected!\");\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRoundVectorFloatRandom.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"}]}