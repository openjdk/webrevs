{"files":[{"patch":"@@ -93,15 +93,15 @@\n-    \/\/ a double precise float point is composed of 3 parts: sign\/e(exponent)\/f(signicand)\n-    \/\/ e (exponent) part of a float value\n-    final int eShift = 52;\n-    final int eWidth = 11;\n-    final int eBound = 1 << eWidth;\n-    \/\/ f (significant) part of a float value\n-    final int fWidth = eShift;\n-    final long fBound = 1L << fWidth;\n-    final int fNum = 256;\n-\n-    \/\/ prepare for data of f (i.e. significand part)\n-    long fis[] = new long[fNum];\n-    int fidx = 0;\n-    for (; fidx < fWidth; fidx++) {\n-      fis[fidx] = 1L << fidx;\n+    \/\/ a double precise float point is composed of 3 parts: sign\/exponent\/signicand\n+    \/\/ exponent part of a float value\n+    final int exponentShift = 52;\n+    final int exponentWidth = 11;\n+    final int exponentBound = 1 << exponentWidth;\n+    \/\/ significant part of a float value\n+    final int signicandWidth = exponentShift;\n+    final long signicandBound = 1L << signicandWidth;\n+    final int signicandNum = 256;\n+\n+    \/\/ prepare for data of significand part\n+    long signicandValues[] = new long[signicandNum];\n+    int signicandIdx = 0;\n+    for (; signicandIdx < signicandWidth; signicandIdx++) {\n+      signicandValues[signicandIdx] = 1L << signicandIdx;\n@@ -109,2 +109,2 @@\n-    for (; fidx < fNum; fidx++) {\n-      fis[fidx] = rand.nextLong(fBound);\n+    for (; signicandIdx < signicandNum; signicandIdx++) {\n+      signicandValues[signicandIdx] = rand.nextLong(signicandBound);\n@@ -112,1 +112,1 @@\n-    fis[rand.nextInt(fNum)] = 0;\n+    signicandValues[rand.nextInt(signicandNum)] = 0;\n@@ -117,1 +117,1 @@\n-    for (long fi : fis) {\n+    for (long sv : signicandValues) {\n@@ -119,5 +119,5 @@\n-      \/\/   previously generated f values,\n-      \/\/   random value in e (i.e. exponent) range,\n-      \/\/   both positive and negative of previous combined values (e+f)\n-      final int eStart = rand.nextInt(9);\n-      final int eStep = (1 << 3) + rand.nextInt(3);\n+      \/\/   previously generated significand values,\n+      \/\/   random value in exponent range,\n+      \/\/   both positive and negative of previous combined values (exponent+significand)\n+      final int exponentStart = rand.nextInt(9);\n+      final int exponentStep = (1 << 3) + rand.nextInt(3);\n@@ -126,7 +126,7 @@\n-      int ei = eStart;\n-      int eiIdx = 0;\n-      for (; ei < eBound; ei += eStep) {\n-        eiIdx = ei\/eStep;\n-        \/\/ combine e and f\n-        long bits = ((long)ei << eShift) + fi;\n-        \/\/ combine sign(+\/-) with e and f\n+      int ev = exponentStart;\n+      int inputIdx = 0;\n+      for (; ev < exponentBound; ev += exponentStep) {\n+        inputIdx = ev\/exponentStep;\n+        \/\/ combine exponent and significand\n+        long bits = ((long)ev << exponentShift) + sv;\n+        \/\/ combine sign(+\/-) with exponent and significand\n@@ -134,1 +134,1 @@\n-        input[eiIdx*2] = Double.longBitsToDouble(bits);\n+        input[inputIdx*2] = Double.longBitsToDouble(bits);\n@@ -137,1 +137,1 @@\n-        input[eiIdx*2+1] = Double.longBitsToDouble(bits);\n+        input[inputIdx*2+1] = Double.longBitsToDouble(bits);\n@@ -142,4 +142,4 @@\n-      eiIdx = eiIdx*2+2;\n-      long bits = (1L << eWidth) - 1L;\n-      bits <<= eShift;\n-      input[eiIdx++] = Double.longBitsToDouble(bits);\n+      inputIdx = inputIdx*2+2;\n+      long bits = (1L << exponentWidth) - 1L;\n+      bits <<= exponentShift;\n+      input[inputIdx++] = Double.longBitsToDouble(bits);\n@@ -147,1 +147,1 @@\n-      input[eiIdx] = Double.longBitsToDouble(bits);\n+      input[inputIdx] = Double.longBitsToDouble(bits);\n@@ -153,3 +153,3 @@\n-      ei = eStart;\n-      eiIdx = ei\/eStep;\n-      for (; ei < eBound; ei += eStep) {\n+      ev = exponentStart;\n+      inputIdx = ev\/exponentStep;\n+      for (; ev < exponentBound; ev += exponentStep) {\n@@ -157,1 +157,1 @@\n-          int idx = eiIdx * 2 + sign;\n+          int idx = inputIdx * 2 + sign;\n@@ -163,1 +163,1 @@\n-                               \", fi: \" + fi + \", ei: \" + ei + \", sign: \" + sign);\n+                               \", fi: \" + sv + \", ei: \" + ev + \", sign: \" + sign);\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRoundVectorDoubleRandom.java","additions":43,"deletions":43,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -95,16 +95,16 @@\n-    \/\/ a single precise float point is composed of 3 parts: sign\/e(exponent)\/f(signicand)\n-    \/\/ e (exponent) part of a float value\n-    final int eStart = 0;\n-    final int eShift = 23;\n-    final int eWidth = 8;\n-    final int eBound = 1 << eWidth;\n-    \/\/ f (significant) part of a float value\n-    final int fWidth = eShift;\n-    final int fBound = 1 << fWidth;\n-    final int fNum = 128;\n-\n-    \/\/ prepare for data of f (i.e. significand part)\n-    int fis[] = new int[fNum];\n-    int fidx = 0;\n-    for (; fidx < fWidth; fidx++) {\n-      fis[fidx] = 1 << fidx;\n+    \/\/ a single precise float point is composed of 3 parts: sign\/exponent\/signicand\n+    \/\/ exponent part of a float value\n+    final int exponentStart = 0;\n+    final int exponentShift = 23;\n+    final int exponentWidth = 8;\n+    final int exponentBound = 1 << exponentWidth;\n+    \/\/ significant part of a float value\n+    final int signicandWidth = exponentShift;\n+    final int signicandBound = 1 << signicandWidth;\n+    final int signicandNum = 128;\n+\n+    \/\/ prepare for data of significand part\n+    int signicandValues[] = new int[signicandNum];\n+    int signicandIdx = 0;\n+    for (; signicandIdx < signicandWidth; signicandIdx++) {\n+      signicandValues[signicandIdx] = 1 << signicandIdx;\n@@ -112,2 +112,2 @@\n-    for (; fidx < fNum; fidx++) {\n-      fis[fidx] = rand.nextInt(fBound);\n+    for (; signicandIdx < signicandNum; signicandIdx++) {\n+      signicandValues[signicandIdx] = rand.nextInt(signicandBound);\n@@ -115,1 +115,1 @@\n-    fis[rand.nextInt(fNum)] = 0;\n+    signicandValues[rand.nextInt(signicandNum)] = 0;\n@@ -120,1 +120,1 @@\n-    for (int fi : fis) {\n+    for (int sv : signicandValues) {\n@@ -122,7 +122,7 @@\n-      \/\/   previously generated f values,\n-      \/\/   all values in e (i.e. exponent) range,\n-      \/\/   both positive and negative of previous combined values (e+f)\n-      for (int ei = eStart; ei < eBound; ei++) {\n-        \/\/ combine e and f\n-        int bits = (ei << eShift) + fi;\n-        \/\/ combine sign(+\/-) with e and f\n+      \/\/   previously generated significand values,\n+      \/\/   all values in exponent range,\n+      \/\/   both positive and negative of previous combined values (exponent+significand)\n+      for (int ev = exponentStart; ev < exponentBound; ev++) {\n+        \/\/ combine exponent and significand\n+        int bits = (ev << exponentShift) + sv;\n+        \/\/ combine sign(+\/-) with exponent and significand\n@@ -130,1 +130,1 @@\n-        input[ei*2] = Float.intBitsToFloat(bits);\n+        input[ev*2] = Float.intBitsToFloat(bits);\n@@ -133,1 +133,1 @@\n-        input[ei*2+1] = Float.intBitsToFloat(bits);\n+        input[ev*2+1] = Float.intBitsToFloat(bits);\n@@ -140,1 +140,1 @@\n-      for (int ei = eStart; ei < eBound; ei++) {\n+      for (int ev = exponentStart; ev < exponentBound; ev++) {\n@@ -142,1 +142,1 @@\n-          int idx = ei * 2 + sign;\n+          int idx = ev * 2 + sign;\n@@ -148,1 +148,1 @@\n-                               \", fi: \" + fi + \", ei: \" + ei + \", sign: \" + sign);\n+                               \", fi: \" + sv + \", ei: \" + ev + \", sign: \" + sign);\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestRoundVectorFloatRandom.java","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"}]}