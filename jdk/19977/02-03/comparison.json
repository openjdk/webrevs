{"files":[{"patch":"@@ -71,1 +71,1 @@\n-     * use is {@code Outer<@TC Long>.@TA nner<@TB String>}, this method returns\n+     * use is {@code Outer<@TC Long>.@TA Inner<@TB String>}, this method returns\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedParameterizedType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,32 +31,39 @@\n- * {@code AnnotatedType} represents the potentially annotated (JLS {@jls 9.7.4})\n- * use of a type or type argument in the current runtime. See {@link Type} for\n- * the complete list of types and type arguments.\n- * <p>\n- * Here is a mapping from types and type arguments of the use, with examples,\n- * to the modeling interfaces. \"{@code AnnotatedType} alone\" means the modeling\n- * class does not implement any of the subinterfaces of {@code AnnotatedType}.\n- * <ul>\n- * <li>Primitive types (such as {@code @TA int}):\n- *     {@code AnnotatedType} alone\n- * <li>Reference types: <ul>\n- *     <li>Class types and interface types:<ul>\n- *         <li>Parameterized types (such as {@code @TA List<@TB ? extends @TC\n- *             String>}): {@link AnnotatedParameterizedType}\n- *         <li>Non-generic classes and interfaces (such as {@code @TC String})\n- *             and raw types (such as {@code @TA List}):\n- *             {@code AnnotatedType} alone\n- *     <\/ul>\n- *     <li>Type variables (such as {@code @TA T}):\n- *         {@link AnnotatedTypeVariable}\n- *     <li>Array types (such as {@code @TB int @TA []}):\n- *         {@link AnnotatedArrayType}\n- * <\/ul>\n- * <li>Wildcard type arguments (such as {@code @TB ? extends @TC String}):\n- *     {@link AnnotatedWildcardType}\n- * <\/ul>\n- * <p>\n- * For example, an annotated use {@code @TB Outer.@TA Inner}, represented by\n- * {@code AnnotatedType} alone, has an annotation {@code @TA} and represents the\n- * non-generic {@code Outer.Inner} class. The use of its immediately enclosing\n- * class is {@code @TB Outer}, with an annotation {@code @TB}, representing the\n- * non-generic {@code Outer} class.\n+ * {@code AnnotatedType} represents the potentially annotated use of a type or\n+ * type argument in the current runtime.  The use of a type (JLS {@jls 4.1}) is\n+ * the use of a primitive type or a reference type.  The use of a type argument\n+ * (JLS {@jls 4.5.1}) is the use of a reference type or a wildcard type\n+ * argument.\n+ * <table class=\"striped\">\n+ * <caption style=\"display:none\">\n+ * Types and Type Arguments Used to Modeling Interfaces\n+ * <\/caption>\n+ * <thead>\n+ * <tr><th colspan=\"3\">Type or Type Argument Used\n+ *     <th>Example\n+ *     <th>Modeling interface\n+ * <\/thead>\n+ * <tbody>\n+ * <tr><td colspan=\"3\">Primitive Types (JLS {@jls 4.2})\n+ *     <td>{@code @TA int}\n+ *     <td rowspan=\"3\">{@link ##alone AnnotatedType}\n+ * <tr><td rowspan=\"5\">Reference<br>Types<br>(JLS {@jls 4.3})\n+ *     <td rowspan=\"3\">Classes<br>and<br>Interfaces\n+ *     <td>Non-generic Classes and<br>Interfaces\n+ *         (JLS {@jls 8.1.3}, {@jls 9.1.3})\n+ *     <td>{@code @TC String}\n+ * <tr><td>Raw Types (JLS {@jls 4.8})\n+ *     <td>{@code @TA List}\n+ * <tr><td>Parameterized Types (JLS {@jls 4.5})\n+ *     <td>{@code @TA List<@TB ? extends @TC String>}\n+ *     <td>{@link AnnotatedParameterizedType}\n+ * <tr><td colspan=\"2\">Type Variables (JLS {@jls 4.4})\n+ *     <td>{@code @TA T}\n+ *     <td>{@link AnnotatedTypeVariable}\n+ * <tr><td colspan=\"2\">Array Types (JLS {@jls 10.1})\n+ *     <td>{@code @TB int @TA []}\n+ *     <td>{@link AnnotatedArrayType}\n+ * <tr><td colspan=\"3\">Wildcard Type Arguments (JLS {@jls 4.5.1})\n+ *     <td>{@code @TB ? extends @TC String}\n+ *     <td>{@link AnnotatedWildcardType}\n+ * <\/tbody>\n+ * <\/table>\n@@ -71,0 +78,13 @@\n+ * <h2 id=\"alone\">The {@code AnnotatedType} interface alone<\/h2>\n+ * Some {@code AnnotatedType} objects are not instances of the {@link\n+ * AnnotatedArrayType}, {@link AnnotatedParameterizedType}, {@link\n+ * AnnotatedTypeVariable}, or {@link AnnotatedWildcardType} subinterfaces.\n+ * Such a potentially annotated use represents a primitive type, a non-generic\n+ * class or interface, or a raw type, and the {@link #getType() getType()}\n+ * method returns a {@link Class}.\n+ * <p>\n+ * For example, an annotated use {@code @TB Outer.@TA Inner} has an annotation\n+ * {@code @TA} and represents the non-generic {@code Outer.Inner} class. The use\n+ * of its immediately enclosing class is {@code @TB Outer}, with an annotation\n+ * {@code @TB}, representing the non-generic {@code Outer} class.\n+ *\n@@ -72,8 +92,2 @@\n- * @jls 4.1 The Kinds of Types and Values\n- * @jls 4.2 Primitive Types and Values\n- * @jls 4.3 Reference Types and Values\n- * @jls 4.4 Type Variables\n- * @jls 4.5 Parameterized Types\n- * @jls 4.8 Raw Types\n- * @jls 4.9 Intersection Types\n- * @jls 10.1 Array Types\n+ * @jls 4.11 Where Types Are Used\n+ * @jls 9.7.4 Where Annotations May Appear\n@@ -109,3 +123,5 @@\n-     * If this object does not implement any of the subinterfaces of {@code\n-     * AnnotatedType}, this use represents a primitive type, a non-generic class\n-     * or interface, or a raw type, and this method returns a {@link Class}.\n+     * If this object is not an instance of {@link AnnotatedArrayType}, {@link\n+     * AnnotatedParameterizedType}, {@link AnnotatedTypeVariable}, or {@link\n+     * AnnotatedWildcardType}, this method returns a {@link Class}.\n+     *\n+     * @see ##alone The {@code AnnotatedType} interface alone\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedType.java","additions":59,"deletions":43,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -57,0 +57,5 @@\n+     * @throws TypeNotPresentException if any of the bounds refers to a\n+     *     non-existent type declaration\n+     * @throws MalformedParameterizedTypeException if any of the bounds refer to\n+     *     a parameterized type that cannot be instantiated for any reason\n+     * @jls 4.9 Intersection Types\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedTypeVariable.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,3 +31,5 @@\n- * annotated uses of types.  Note that the use of a wildcard type argument is\n- * not the use of a type, and thus will only be returned by APIs where uses of\n- * type arguments may appear.\n+ * annotated uses of types.  Since the use of a wildcard type argument is not\n+ * the use of a type, it will only be returned by APIs where uses of type\n+ * arguments may appear, such as {@link\n+ * AnnotatedParameterizedType#getAnnotatedActualTypeArguments()\n+ * AnnotatedParameterizedType::getAnnotatedActualTypeArguments}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedWildcardType.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,40 +29,48 @@\n- * {@code Type} represents types in the Java programming language (JLS {@jls\n- * 4.1}) and type arguments (JLS {@jls 4.5.1}).  Types are primitive types (JLS\n- * {@jls 4.2}) and reference types (JLS {@jls 4.3}).  Reference types are\n- * non-generic classes (JLS {@jls 8.1.2}) (which must not be an {@linkplain\n- * ParameterizedType##inner-member-class inner member class} of a generic class)\n- * and interfaces (JLS {@jls 9.1.2}), raw types (JLS {@jls 4.8}) and\n- * parameterized types (JLS {@jls 4.5}) of generic classes and interfaces,\n- * type variables (JLS {@jls 4.4}), and array types (JLS {@jls 10.1}).  Type\n- * arguments are reference types and wildcard type arguments.\n- * <p>\n- * Here is a mapping from types and type arguments to the modeling interfaces.\n- * \"{@code Type} alone\" means the modeling class does not implement any other\n- * {@code Type} subinterface.  The modeling class is {@link Class} in core\n- * reflection representation of types in the current runtime.  Other\n- * implementations may use different modeling classes to represent types not\n- * in the current runtime.\n- * <ul>\n- * <li>Primitive types (such as {@code int}): {@code Type} alone\n- * <li>Reference types: <ul>\n- *     <li>Class types and interface types:<ul>\n- *         <li>Parameterized types (such as {@code List<String>}):\n- *             {@link ParameterizedType}\n- *         <li>Non-generic classes and interfaces (such as {@code String}) and\n- *             raw types (such as {@code List}): {@code Type} alone\n- *     <\/ul>\n- *     <li>Type variables (such as {@code T}): {@link TypeVariable}\n- *     <li>Array types: Depends on its element type. <ul>\n- *         <li>If the element type is modeled by {@code Type} alone, such as\n- *             {@code int} for the array type {@code int[]}, the array type is\n- *             modeled by {@code Type} alone.\n- *         <li>Otherwise, the element type must be modeled by {@link\n- *             ParameterizedType}, such as {@code Comparable<?>} for the array\n- *             type {@code Comparable<?>[]}, or {@link TypeVariable}, such as\n- *             {@code T} for the array type {@code T[]}, and the array type is\n- *             modeled by {@link GenericArrayType}.\n- *     <\/ul>\n- * <\/ul>\n- * <li>Wildcard type arguments (such as {@code ? extends String}):\n- *     {@link WildcardType}\n- * <\/ul>\n+ * {@code Type} represents types in the Java programming language and type\n+ * arguments.  Types (JLS {@jls 4.1}) are primitive types and reference types.\n+ * Type arguments (JLS {@jls 4.5.1}) are reference types and wildcard type\n+ * arguments.\n+ * <table class=\"striped\">\n+ * <caption style=\"display:none\">\n+ * Types and Type Arguments to Modeling Interfaces\n+ * <\/caption>\n+ * <thead>\n+ * <tr><th colspan=\"3\">Type or Type Argument\n+ *     <th>Example\n+ *     <th>Modeling interface\n+ * <\/thead>\n+ * <tbody>\n+ * <tr><td colspan=\"3\">Primitive Types (JLS {@jls 4.2})\n+ *     <td>{@code int}\n+ *     <td rowspan=\"3\">{@link ##alone Type}\n+ * <tr><td rowspan=\"9\">Reference<br>Types<br>(JLS {@jls 4.3})\n+ *     <td rowspan=\"3\">Classes<br>and<br>Interfaces\n+ *     <td>Non-generic Classes and<br>Interfaces\n+ *         (JLS {@jls 8.1.3}, {@jls 9.1.3})\n+ *     <td>{@code String}\n+ * <tr><td>Raw Types (JLS {@jls 4.8})\n+ *     <td>{@code List}\n+ * <tr><td>Parameterized Types (JLS {@jls 4.5})\n+ *     <td>{@code List<String>}\n+ *     <td>{@link ParameterizedType}\n+ * <tr><td colspan=\"2\">Type Variables (JLS {@jls 4.4})\n+ *     <td>{@code T}\n+ *     <td>{@link TypeVariable}\n+ * <tr><td rowspan=\"5\">Array<br>Types<br>(JLS {@jls 10.1})\n+ *     <td>Primitive Type Elements\n+ *     <td>{@code int[]}\n+ *     <td rowspan=\"3\">{@link ##alone Type}\n+ * <tr><td>Non-generic Class or<br>Interface Elements\n+ *     <td>{@code String[]}\n+ * <tr><td>Raw Type Elements\n+ *     <td>{@code List[]}\n+ * <tr><td>Parameterized Type Elements\n+ *     <td>{@code List<String>[][]}\n+ *     <td rowspan=\"2\">{@link GenericArrayType}\n+ * <tr><td>Types Variable Elements\n+ *     <td>{@code T[][][]}\n+ * <tr><td colspan=\"3\">Wildcard Type Arguments (JLS {@jls 4.5.1})\n+ *     <td>{@code ? extends String}\n+ *     <td>{@link WildcardType}\n+ * <\/tbody>\n+ * <\/table>\n@@ -73,0 +81,10 @@\n+ * <h2 id=\"alone\">The {@code Type} interface alone<\/h2>\n+ * Some {@code Type} objects are not instances of the {@link GenericArrayType},\n+ * {@link ParameterizedType}, {@link TypeVariable}, or {@link WildcardType}\n+ * subinterfaces.  Such a type is a primitive type, a non-generic class or\n+ * interface, a raw type, or an array type with any of these types as its\n+ * element type.  In core reflection, they are all represented by {@link Class}.\n+ * <p>\n+ * Examples include the primitive type {@code int}, the non-generic {@link\n+ * Object} class, the raw type {@code List}, and the array type {@code int[]}.\n+ *\n@@ -74,7 +92,1 @@\n- * @jls 4.2 Primitive Types and Values\n- * @jls 4.3 Reference Types and Values\n- * @jls 4.4 Type Variables\n- * @jls 4.5 Parameterized Types\n- * @jls 4.8 Raw Types\n- * @jls 4.9 Intersection Types\n- * @jls 10.1 Array Types\n+ * @jls 4.11 Where Types Are Used\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Type.java","additions":59,"deletions":47,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+     * @jls 4.9 Intersection Types\n@@ -84,0 +85,5 @@\n+     * @throws TypeNotPresentException if any of the bounds refers to a\n+     *     non-existent type declaration\n+     * @throws MalformedParameterizedTypeException if any of the bounds refer to\n+     *     a parameterized type that cannot be instantiated for any reason\n+     * @jls 4.9 Intersection Types\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/TypeVariable.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,2 +31,3 @@\n- * argument is not a type, and it will only be returned by APIs where type\n- * arguments may appear.\n+ * argument is not a type, it will only be returned by APIs where type arguments\n+ * may appear, such as {@link ParameterizedType#getActualTypeArguments()\n+ * ParameterizedType::getActualTypeArguments}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/WildcardType.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}