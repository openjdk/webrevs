{"files":[{"patch":"@@ -60,1 +60,1 @@\n-     * {@return {@code null}}  An array type is not an inner member class.\n+     * {@return {@code null}}  An array type is not a member class or interface.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedArrayType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,6 +56,6 @@\n-     * of the parameterized type, if the parameterized type is an {@linkplain\n-     * ParameterizedType##inner-member-class inner member class}.  For example,\n-     * if this use is {@code @TA O<T>.I<S>}, this method returns an array\n-     * containing exactly the use of {@code S}.  In particular, if this inner\n-     * member class is non-generic but an enclosing class of it is, this method\n-     * returns an empty array.\n+     * of the parameterized type, if the parameterized type is nested.  For\n+     * example, if this use is {@code @TB O<@TC T>.@TA I<@TB S>}, this method\n+     * returns an array containing exactly the use of {@code @TB S}.  In\n+     * particular, if this nested type is a non-generic class in a generic\n+     * enclosing class, such as in the use {@code @TB O<@TC T>.@TA I}, this\n+     * method returns an empty array.\n@@ -68,5 +68,1 @@\n-     * {@return the potentially annotated use of the immediately enclosing class\n-     * of the parameterized type, or {@code null} if and only if the\n-     * parameterized type is not an inner member class}  For example, if this\n-     * use is {@code Outer<@TC Long>.@TA Inner<@TB String>}, this method returns\n-     * a representation of {@code Outer<@TC Long>}.\n+     * {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedParameterizedType.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n- *     <td rowspan=\"3\">Classes<br>and<br>Interfaces\n- *     <td>Non-generic Classes and<br>Interfaces\n+ *     <td rowspan=\"3\">Class and<br>Interface Types\n+ *     <td>Non-generic Class and Interface<br>Types\n@@ -53,1 +53,1 @@\n- *     <td>{@code @TC String}\n+ *     <td>{@code @TA String}\n@@ -57,1 +57,1 @@\n- *     <td>{@code @TA List<@TB ? extends @TC String>}\n+ *     <td>{@code @TA List<@TB String>}\n@@ -66,1 +66,1 @@\n- *     <td>{@code @TB ? extends @TC String}\n+ *     <td>{@code @TA ? extends @TB String}\n@@ -75,0 +75,4 @@\n+ * Class and Interface Types may be members of other classes and interfaces.\n+ * The use of a class or interface that declares another class or interface is\n+ * accessible via {@link #getAnnotatedOwnerType()}.\n+ * <p>\n@@ -99,4 +103,33 @@\n-     * {@return the potentially annotated use of the immediately enclosing class\n-     * of the type, or {@code null} if and only if the type is not an inner\n-     * member class}  For example, if this use is {@code @TB Outer.@TA Inner},\n-     * this method returns a representation of {@code @TB Outer}.\n+     * {@return the potentially annotated use of the type that this type is a\n+     * member of, or {@code null} if this type is not a nested type}  The type\n+     * of the returned use is the immediately enclosing class or interface of\n+     * this type.\n+     * <p>\n+     * Top-level classes and interfaces, local classes and interfaces, and\n+     * anonymous classes are not members of other classes or interfaces.  For\n+     * example, if this use is {@code @TA Map<@TB K, V>}, this method returns\n+     * {@code null}.\n+     * <p>\n+     * If this type is explicitly or implicitly {@code static}, the uses of all\n+     * enclosing classes and interfaces of this type are unannotated and\n+     * represented by an {@link ##alone AnnotatedType} without any other\n+     * subinterface.  For example, if this use is {@code Map.@TA Entry<@TB K, V>},\n+     * this method returns the unannotated use of the raw type {@code Map}.\n+     * <p>\n+     * If this type is not {@code static}, the use of enclosing classes and\n+     * interfaces of this type are potentially annotated.  For example, if this\n+     * use is {@code @TB Outer.@TA Inner}, this method returns a representation\n+     * of {@code @TB Outer}.  In particular, if this use is an {@link\n+     * AnnotatedParameterizedType}, the enclosing classes and interfaces of this\n+     * parameterized type are possibly generic, and the use of type arguments\n+     * in these enclosing classes and interfaces are potentially annotated.  For\n+     * example, if this use is {@code @TB O<@TC T>.@TA I<S>}, this method\n+     * returns the use {@code @TB O<@TC T>}.\n+     * <p>\n+     * If this use is an {@link ##alone AnnotatedType} without any other\n+     * subinterface, this method returns an {@code AnnotatedType} without any\n+     * other subinterface or {@code null}.  If this use is an {@link\n+     * AnnotatedParameterizedType}, this method returns an {@code\n+     * AnnotatedParameterizedType}, an {@code AnnotatedType} without any other\n+     * subinterface, or {@code null}.  For all other subinterfaces, this method\n+     * returns {@code null}.\n@@ -108,2 +141,2 @@\n-     * @throws TypeNotPresentException if the immediate enclosing class refers\n-     *     to a non-existent class declaration\n+     * @throws TypeNotPresentException if the immediate enclosing class or\n+     *     interface refers to a non-existent class or interface declaration\n@@ -111,3 +144,3 @@\n-     *     class refers to a parameterized type that cannot be instantiated for\n-     *     any reason\n-     * @see ParameterizedType##inner-member-class Inner member classes\n+     *     class or interface refers to a parameterized type that cannot be\n+     *     instantiated for any reason\n+     * @see Class#getDeclaringClass() Class::getDeclaringClass\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedType.java","additions":47,"deletions":14,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-     * {@return {@code null}}  A type variable is not an inner member class.\n+     * {@return {@code null}}  A type variable is not a member class or interface.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedTypeVariable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,2 +80,2 @@\n-     * {@return {@code null}}  A wildcard type argument is not an inner member\n-     * class.\n+     * {@return {@code null}}  A wildcard type argument is not a member class or\n+     * interface.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedWildcardType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,6 +52,5 @@\n-     * #getOwnerType() enclosing classes} of this type, if this is an\n-     * {@linkplain ##inner-member-class inner member class}.  For example, if\n-     * this type is {@code O<T>.I<S>}, this method returns an array containing\n-     * exactly {@code S}.  In particular, if this inner member class is\n-     * non-generic but an enclosing class is, this method returns an empty\n-     * array.\n+     * #getOwnerType() enclosing classes} of this type, if this type is nested.\n+     * For example, if this type is {@code O<T>.I<S>}, this method returns an\n+     * array containing exactly {@code S}.  In particular, if this is a\n+     * non-generic class in a generic enclosing class, such as the type {@code\n+     * O<T>.I}, this method returns an empty array.\n@@ -70,3 +69,3 @@\n-     * to the {@linkplain #getOwnerType() immediately enclosing class} of this\n-     * type if there is one.  For example, if this type is {@code O<T>.I<S>},\n-     * this method returns a representation of {@code O.I}.\n+     * to the {@linkplain #getOwnerType() type that this type is a member of} if\n+     * such a type exists.  For example, if this type is {@code O<T>.I<S>}, this\n+     * method returns a representation of {@code O.I}.\n@@ -74,2 +73,2 @@\n-     * The returned object is not an instance of {@link GenericArrayType},\n-     * {@link ParameterizedType}, {@link TypeVariable}, or {@link WildcardType}.\n+     * The returned object implements {@link Type##alone Type} without any other\n+     * subinterface.\n@@ -86,11 +85,3 @@\n-     * {@return the immediately enclosing class of this type, or {@code null} if\n-     * and only if this type is not an inner member class}  For example, if this\n-     * type is {@code O<T>.I<S>}, this method returns a representation of {@code\n-     * O<T>}.\n-     *\n-     * <h4 id=\"inner-member-class\">Inner member classes<\/h4>\n-     * An inner member class is both an inner class (JLS {@jls 8.1.3}) and a\n-     * member class (JLS {@jls 8.5}).  Any object of an inner member class\n-     * {@code C} has an immediately enclosing instance (JLS {@jls 15.9.2}) of\n-     * the {@linkplain Class#getDeclaringClass() immediately enclosing class} of\n-     * {@code C}.\n+     * {@return the type that this type is a member of, or {@code null} if this\n+     * type is not a nested type}  The returned type is the immediately enclosing\n+     * class or interface of this type.\n@@ -98,3 +89,4 @@\n-     * A type is not an inner member class if it is not an inner class, such as\n-     * any interface, top-level class, or static nested class, or is not a\n-     * member class, such as any local or anonymous class.\n+     * Top-level classes and interfaces, local classes and interfaces, and\n+     * anonymous classes are not members of other classes or interfaces.  For\n+     * example, if this type is {@code Map<K, V>}, this method returns {@code\n+     * null}.\n@@ -102,4 +94,5 @@\n-     * Nested interfaces (JLS {@jls 9.1.1.3}) and interface members (JLS {@jls\n-     * 9.5}) are all implicitly {@code static}, so there is no inner member\n-     * interface, and the immediately enclosing class or interface for an inner\n-     * member class must be a class.\n+     * If this type is explicitly or implicitly {@code static}, the class or\n+     * interface that declared this type is always represented by a {@link\n+     * Type##alone Type} without any other subinterface.  For example, if this\n+     * type is {@code Map.Entry<K, V>}, this method returns the raw type {@code\n+     * Map}.\n@@ -107,11 +100,6 @@\n-     * To check if a {@link Class} is an inner member class:\n-     * {@snippet lang=java :\n-     * \/\/ @replace substring=\"int.class\" replacement=... :\n-     * Class<?> clazz = int.class;\n-     * \/\/ @link substring=\"getDeclaringClass\" target=\"Class#getDeclaringClass()\" :\n-     * return clazz.getDeclaringClass() != null &&\n-     * \/\/ @link region substring=\"isStatic\" target=\"Modifier#isStatic(int)\"\n-     * \/\/ @link substring=\"getModifiers\" target=\"Class#getModifiers()\":\n-     *         !Modifier.isStatic(clazz.getModifiers());\n-     * \/\/ @end\n-     * }\n+     * If this type is not {@code static}, the class or interface that declared\n+     * this type may be a {@code ParameterizedType} that has more type arguments\n+     * in one of the enclosing classes and interfaces, or a {@link Type##alone\n+     * Type} without any other subinterface if there is no more type argument.\n+     * For example, if this type is {@code O<T>.I<S>}, this method returns the\n+     * parameterized type {@code O<T>}.\n@@ -119,2 +107,2 @@\n-     * @throws TypeNotPresentException if the immediately enclosing class refers\n-     *     to a non-existent class or interface declaration\n+     * @throws TypeNotPresentException if the immediately enclosing class or\n+     *     interface refers to a non-existent class or interface declaration\n@@ -122,3 +110,3 @@\n-     *     class refers to a parameterized type that cannot be instantiated for\n-     *     any reason\n-     * @jls 8.1.3 Inner Classes and Enclosing Instances\n+     *     class or interface refers to a parameterized type that cannot be\n+     *     instantiated for any reason\n+     * @see Class#getDeclaringClass() Class::getDeclaringClass\n@@ -126,1 +114,1 @@\n-     * @jls 15.9.2 Determining Enclosing Instances\n+     * @jls 9.5 Member Class and Interface Declarations\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ParameterizedType.java","additions":34,"deletions":46,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -46,3 +46,3 @@\n- * <tr><td rowspan=\"9\">Reference<br>Types<br>(JLS {@jls 4.3})\n- *     <td rowspan=\"3\">Classes<br>and<br>Interfaces\n- *     <td>Non-generic Classes and<br>Interfaces\n+ * <tr><td rowspan=\"7\">Reference<br>Types<br>(JLS {@jls 4.3})\n+ *     <td rowspan=\"3\">Class and<br>Interface Types\n+ *     <td>Non-generic Class and Interface<br>Types\n@@ -59,10 +59,3 @@\n- * <tr><td rowspan=\"5\">Array<br>Types<br>(JLS {@jls 10.1})\n- *     <td>Primitive Type Elements\n- *     <td>{@code int[]}\n- *     <td rowspan=\"3\">{@link ##alone Type}\n- * <tr><td>Non-generic Class or<br>Interface Elements\n- *     <td>{@code String[]}\n- * <tr><td>Raw Type Elements\n- *     <td>{@code List[]}\n- * <tr><td>Parameterized Type Elements\n- *     <td>{@code List<String>[][]}\n+ * <tr><td rowspan=\"3\">Array Types<br>(JLS {@jls 10.1})\n+ *     <td>Parameterized Type Elements\n+ *     <td>{@code List<String>[]}\n@@ -71,1 +64,4 @@\n- *     <td>{@code T[][][]}\n+ *     <td>{@code T[]}\n+ * <tr><td>Other Elements\n+ *     <td>{@code int[]}, {@code String[]}\n+ *     <td>{@link ##alone Type}\n@@ -78,0 +74,6 @@\n+ * Class and Interface Types may be members of other classes and interfaces.\n+ * The class or interface that declares a class or interface is accessible via\n+ * {@link Class#getDeclaringClass() Class::getDeclaringClass}.  The possibly\n+ * generic class or interface that declares a parameterized type is accessible\n+ * via {@link ParameterizedType#getOwnerType() ParameterizedType::getOwnerType}.\n+ * <p>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Type.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"}]}