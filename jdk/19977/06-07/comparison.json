{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedArrayType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedParameterizedType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,4 +90,5 @@\n- * For example, an annotated use {@code @TB Outer.@TA Inner} has an annotation\n- * {@code @TA} and represents the non-generic {@code Outer.Inner} class. The use\n- * of its immediately enclosing class is {@code @TB Outer}, with an annotation\n- * {@code @TB}, representing the non-generic {@code Outer} class.\n+ * For example, an annotated use {@code @TB Outer.@TA Inner} is such an object;\n+ * it has an annotation {@code @TA} and represents the non-generic {@code\n+ * Outer.Inner} class. The use of its immediately enclosing class is {@code @TB\n+ * Outer}, with an annotation {@code @TB}, representing the non-generic {@code\n+ * Outer} class.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedType.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedTypeVariable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * extends Number}.  Its lower bound is the annotated use {@code @TB Number}\n+ * extends Number}.  Its upper bound is the annotated use {@code @TB Number}\n@@ -41,1 +41,1 @@\n- * has no upper bound.\n+ * has no lower bound.\n@@ -54,3 +54,5 @@\n-     * type argument}  If no lower bound is explicitly declared, the lower bound\n-     * is the null type (JLS {@jls 4.1}) and the use is unannotated. In this\n-     * case, a zero length array is returned.\n+     * type argument}  A lower bound has the syntax {@code ? super B} in Java\n+     * source code, where {@code B} is the bound.  If no lower bound is\n+     * explicitly declared, the lower bound is the null type (JLS {@jls 4.1})\n+     * and the use is unannotated.  In this case, a zero length array is\n+     * returned.\n@@ -59,1 +61,1 @@\n-     * While to date a wildcard type argument may have at most one upper bound,\n+     * While to date a wildcard type argument may have at most one lower bound,\n@@ -68,2 +70,4 @@\n-     * type argument}  If no upper bound is explicitly declared, the upper bound\n-     * is the {@code Object} class and the use is unannotated.\n+     * type argument}  An upper bound has the syntax {@code ? extends B} in Java\n+     * source code, where {@code B} is the bound.  If no upper bound is\n+     * explicitly declared, the upper bound is the {@code Object} class and the\n+     * use is unannotated.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedWildcardType.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/GenericArrayType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-     *     actual type parameters refer to a parameterized type that cannot\n+     *     actual type arguments refer to a parameterized type that cannot\n@@ -123,1 +123,1 @@\n-     * #getActualTypeArguments() type parameters}, including those from the\n+     * #getActualTypeArguments() type arguments}, including those from the\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ParameterizedType.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/TypeVariable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,3 +43,4 @@\n-     * {@return the upper bounds of this wildcard type argument}  If no upper\n-     * bound is explicitly declared, the upper bound is the {@link Object}\n-     * class.\n+     * {@return the upper bounds of this wildcard type argument}  An upper bound\n+     * has the syntax {@code ? extends B} in Java source code, where {@code B}\n+     * is the bound.  If no upper bound is explicitly declared, the upper bound\n+     * is the {@link Object} class.\n@@ -67,3 +68,5 @@\n-     * {@return the lower bounds of this wildcard type argument}  If no lower\n-     * bound is explicitly declared, the lower bound is the null type (JLS\n-     * {@jls 4.1}).  In this case, a zero length array is returned.\n+     * {@return the lower bounds of this wildcard type argument}  A lower bound\n+     * has the syntax {@code ? super B} in Java source code, where {@code B} is\n+     * the bound.  If no lower bound is explicitly declared, the lower bound is\n+     * the null type (JLS {@jls 4.1}).  In this case, a zero length array is\n+     * returned.\n@@ -80,1 +83,1 @@\n-     * While to date a wildcard type argument may have at most one upper bound,\n+     * While to date a wildcard type argument may have at most one lower bound,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/WildcardType.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"}]}