{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-     * Returns the potentially annotated generic component type of this array type.\n+     * {@return the potentially annotated component type of this array type}\n@@ -42,1 +42,0 @@\n-     * @return the potentially annotated generic component type of this array type\n@@ -44,0 +43,2 @@\n+     *      GenericArrayType::getGenericComponentType\n+     * @see Class#componentType() Class::componentType\n@@ -45,1 +46,1 @@\n-    AnnotatedType  getAnnotatedGenericComponentType();\n+    AnnotatedType getAnnotatedGenericComponentType();\n@@ -48,8 +49,2 @@\n-     * Returns the potentially annotated type that this type is a member of, if\n-     * this type represents a nested class or interface. For example, if this\n-     * type is {@code @TA O<T>.I<S>}, return a representation of {@code @TA O<T>}.\n-     *\n-     * <p>Returns {@code null} for an {@code AnnotatedType} that is an instance\n-     *     of {@code AnnotatedArrayType}.\n-     *\n-     * @return {@code null}\n+     * {@return {@code null}}  An {@code AnnotatedArrayType} is not an inner\n+     * member class.\n@@ -61,0 +56,7 @@\n+\n+    \/**\n+     * {@inheritDoc}  The underlying type of an {@code AnnotatedArrayType} is\n+     * a {@link Class} representing an array type or a {@link GenericArrayType}.\n+     *\/\n+    @Override\n+    Type getType();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedArrayType.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,10 @@\n-     * Returns the potentially annotated actual type arguments of this parameterized type.\n+     * {@return the potentially annotated actual type arguments of this\n+     * parameterized type}\n+     * <p>\n+     * This method does not return the type arguments of the {@linkplain\n+     * #getAnnotatedOwnerType() enclosing classes} of this type, if this is an\n+     * {@linkplain ParameterizedType##inner-member-class inner member class}.\n+     * For example, if this type is {@code @TA O<T>.I<S>}, this method\n+     * returns {@code [S]}.  In particular, if this inner member class is\n+     * non-generic but an enclosing class is, this method returns an empty\n+     * array.\n@@ -41,5 +50,0 @@\n-     * <p>Note that in some cases, the returned array can be empty. This can occur\n-     * if this annotated type represents a non-parameterized type nested within\n-     * a parameterized type.\n-     *\n-     * @return the potentially annotated actual type arguments of this parameterized type\n@@ -51,15 +55,1 @@\n-     * Returns the potentially annotated type that this type is a member of, if\n-     * this type represents a nested type. For example, if this type is\n-     * {@code @TA O<T>.I<S>}, return a representation of {@code @TA O<T>}.\n-     *\n-     * <p>Returns {@code null} if this {@code AnnotatedType} represents a\n-     *     top-level class or interface, or a local or anonymous class, or\n-     *     a primitive type, or void.\n-     *\n-     * @return an {@code AnnotatedType} object representing the potentially\n-     *     annotated type that this type is a member of, or {@code null}\n-     * @throws TypeNotPresentException if the owner type\n-     *     refers to a non-existent class or interface declaration\n-     * @throws MalformedParameterizedTypeException if the owner type\n-     *     refers to a parameterized type that cannot be instantiated\n-     *     for any reason\n+     * {@inheritDoc}\n@@ -67,0 +57,3 @@\n+     * @throws TypeNotPresentException {@inheritDoc}\n+     * @throws MalformedParameterizedTypeException {@inheritDoc}\n+     * @see ParameterizedType#getOwnerType()\n@@ -71,0 +64,7 @@\n+\n+    \/**\n+     * {@inheritDoc}  The underlying type of an {@code\n+     * AnnotatedParameterizedType} is a {@link ParameterizedType}.\n+     *\/\n+    @Override\n+    Type getType();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedParameterizedType.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- *\n+ * <p>\n@@ -40,0 +40,22 @@\n+ * <h2 id=\"hierarchy\">Interface Hierarchy of {@code AnnotatedType}<\/h2>\n+ * Annotated use of types in the Java programming language is modeled with these\n+ * subinterfaces, and {@link #getType() getType()} can identify their underlying\n+ * {@linkplain Type##hierarchy types}:\n+ * <ul>\n+ * <li>No particular subinterface models primitive types (JLS {@jls 4.2}) and\n+ *     non-generic (JLS {@jls 4.5}) and raw types (JLS {@jls 4.8}) of classes\n+ *     and interfaces (JLS {@jls 4.3}).  Their underlying type is {@link Class}.\n+ * <li>{@link AnnotatedArrayType} models array types (JLS {@jls 10.1}). Their\n+ *     underlying type is {@link Class} or {@link GenericArrayType}.\n+ * <li>{@link AnnotatedParameterizedType} models parameterized types (JLS {@jls\n+ *     4.4}), including non-generic {@linkplain #getAnnotatedOwnerType() inner\n+ *     member classes} of generic classes.  Their underlying type is {@link\n+ *     ParameterizedType}.\n+ * <li>{@link AnnotatedTypeVariable} models type variable (JLS {@jls 4.4})\n+ *     usages.  Their underlying type is {@link TypeVariable}.\n+ * <li>{@link AnnotatedWildcardType} models wildcard {@linkplain\n+ *     AnnotatedParameterizedType#getAnnotatedActualTypeArguments() type\n+ *     arguments} (JLS {@jls 4.5.1}).  Their underlying type is {@link\n+ *     AnnotatedWildcardType}.\n+ * <\/ul>\n+ *\n@@ -53,11 +75,4 @@\n-     * Returns the potentially annotated type that this type is a member of, if\n-     * this type represents a nested type. For example, if this type is\n-     * {@code @TA O<T>.I<S>}, return a representation of {@code @TA O<T>}.\n-     *\n-     * <p>Returns {@code null} if this {@code AnnotatedType} represents a\n-     *     top-level class or interface, or a local or anonymous class, or\n-     *     a primitive type, or void.\n-     *\n-     * <p>Returns {@code null} if this {@code AnnotatedType} is an instance of\n-     *     {@code AnnotatedArrayType}, {@code AnnotatedTypeVariable}, or\n-     *     {@code AnnotatedWildcardType}.\n+     * {@return the potentially annotated use of the immediately enclosing class\n+     * of this type, or {@code null} if and only if this type is not an inner\n+     * member class}  For example, if this type is {@code @TA O<T>.I<S>}, this\n+     * method returns a representation of {@code @TA O<T>}.\n@@ -69,8 +84,6 @@\n-     * @return an {@code AnnotatedType} object representing the potentially\n-     *     annotated type that this type is a member of, or {@code null}\n-     * @throws TypeNotPresentException if the owner type\n-     *     refers to a non-existent class or interface declaration\n-     * @throws MalformedParameterizedTypeException if the owner type\n-     *     refers to a parameterized type that cannot be instantiated\n-     *     for any reason\n-     *\n+     * @throws TypeNotPresentException if the immediate enclosing class refers\n+     *     to a non-existent class declaration\n+     * @throws MalformedParameterizedTypeException if the immediate enclosing\n+     *     class refers to a parameterized type that cannot be instantiated for\n+     *     any reason\n+     * @see ParameterizedType##inner-member-class Inner member classes\n@@ -84,1 +97,1 @@\n-     * Returns the underlying type that this annotated type represents.\n+     * {@return the underlying type that this annotated type represents}\n@@ -86,1 +99,2 @@\n-     * @return the type this annotated type represents\n+     * @see ##hierarchy Interface Hierarchy of {@code AnnotatedType}\n+     * @see Type##hierarchy Interface Hierarchy of {@code Type}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedType.java","additions":37,"deletions":23,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,8 +49,2 @@\n-     * Returns the potentially annotated type that this type is a member of, if\n-     * this type represents a nested type. For example, if this type is\n-     * {@code @TA O<T>.I<S>}, return a representation of {@code @TA O<T>}.\n-     *\n-     * <p>Returns {@code null} for an {@code AnnotatedType} that is an instance\n-     *     of {@code AnnotatedTypeVariable}.\n-     *\n-     * @return {@code null}\n+     * {@return {@code null}}  An {@code AnnotatedTypeVariable} is not an inner\n+     * member class.\n@@ -62,0 +56,7 @@\n+\n+    \/**\n+     * {@inheritDoc}  The underlying type of an {@code AnnotatedTypeVariable} is\n+     * a {@link TypeVariable}.\n+     *\/\n+    @Override\n+    Type getType();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedTypeVariable.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,8 +68,2 @@\n-     * Returns the potentially annotated type that this type is a member of, if\n-     * this type represents a nested type. For example, if this type is\n-     * {@code @TA O<T>.I<S>}, return a representation of {@code @TA O<T>}.\n-     *\n-     * <p>Returns {@code null} for an {@code AnnotatedType} that is an instance\n-     *     of {@code AnnotatedWildcardType}.\n-     *\n-     * @return {@code null}\n+     * {@return {@code null}}  An {@code AnnotatedTypeVariable} is not an inner\n+     * member class.\n@@ -81,0 +75,7 @@\n+\n+    \/**\n+     * {@inheritDoc}  The underlying type of an {@code AnnotatedWildcardType} is\n+     * a {@link WildcardType}.\n+     *\/\n+    @Override\n+    Type getType();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedWildcardType.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,14 +30,13 @@\n- * ParameterizedType represents a parameterized type such as\n- * {@code Collection<String>}.\n- *\n- * <p>A parameterized type is created the first time it is needed by a\n- * reflective method, as specified in this package. When a\n- * parameterized type p is created, the generic class or interface declaration\n- * that p instantiates is resolved, and all type arguments of p are created\n- * recursively. See {@link java.lang.reflect.TypeVariable\n- * TypeVariable} for details on the creation process for type\n- * variables. Repeated creation of a parameterized type has no effect.\n- *\n- * <p>Instances of classes that implement this interface must implement\n- * an equals() method that equates any two instances that share the\n- * same generic class or interface declaration and have equal type parameters.\n+ * {@code ParameterizedType} represents a parameterized type, such as {@code\n+ * Collection<String>}.\n+ * <p>\n+ * A parameterized type is created the first time it is needed by a reflective\n+ * method, as specified in this package. When a parameterized type {@code p} is\n+ * created, the generic class or interface declaration that {@linkplain\n+ * #getRawType() defines} {@code p} is resolved, and all type arguments of\n+ * {@code p} are created  recursively. See {@link TypeVariable} for details on\n+ * the creation process for type variables. Repeated creation of a parameterized\n+ * type has no effect.\n+ * <p>\n+ * Two {@code ParameterizedType} objects should be compared using the {@link\n+ * #equals equals} method.\n@@ -50,2 +49,9 @@\n-     * Returns an array of {@code Type} objects representing the actual type\n-     * arguments to this type.\n+     * {@return an array of {@code Type} objects representing the actual type\n+     * arguments of this type}\n+     * <p>\n+     * This method does not return the type arguments of the {@linkplain\n+     * #getOwnerType() enclosing classes} of this type, if this is an inner\n+     * member class.  For example, if this type is {@code O<T>.I<S>}, this\n+     * method returns {@code [S]}.  In particular, if this inner member class is\n+     * non-generic but an enclosing class is, this method returns an empty\n+     * array.\n@@ -53,6 +59,0 @@\n-     * <p>Note that in some cases, the returned array be empty. This can occur\n-     * if this type represents a non-parameterized type nested within\n-     * a parameterized type.\n-     *\n-     * @return an array of {@code Type} objects representing the actual type\n-     *     arguments to this type\n@@ -69,2 +69,7 @@\n-     * {@return the {@code Type} object representing the class or interface\n-     * that declared this type}\n+     * {@return the raw type of this type}  This is the generic class or\n+     * interface that defines this parameterized type, and applies recursively\n+     * to the {@linkplain #getOwnerType() immediately enclosing class} of this\n+     * type if there is one.  For example, if this type is {@code O<T>.I<S>},\n+     * this method returns a representation of {@code O.I}.\n+     * <p>\n+     * This method performs type erasure.\n@@ -78,0 +83,2 @@\n+     * @jls 4.6 Type Erasure\n+     * @jls 4.8 Raw Types\n@@ -83,3 +90,4 @@\n-     * Returns a {@code Type} object representing the type that this type\n-     * is a member of.  For example, if this type is {@code O<T>.I<S>},\n-     * return a representation of {@code O<T>}.\n+     * {@return the immediately enclosing class of this type, or {@code null} if\n+     * and only if this type is not an inner member class}  For example, if this\n+     * type is {@code O<T>.I<S>}, this method returns a representation of {@code\n+     * O<T>}.\n@@ -87,1 +95,22 @@\n-     * <p>If this type is a top-level type, {@code null} is returned.\n+     * <h4 id=\"inner-member-class\">Inner member classes<\/h4>\n+     * An inner member class is both an inner class (JLS {@jls 8.1.3}) and a\n+     * member class (JLS {@jls 8.5}). Any object of an inner member class {@code\n+     * C} has an immediately enclosing instance (JLS {@jls 15.9.2}) of the\n+     * {@linkplain Class#getDeclaringClass() immediately enclosing class} of\n+     * {@code C}.\n+     * <p>\n+     * A type is not an inner member class if it is not an inner class, such as\n+     * any interface, top-level class, or static nested class, or is not a\n+     * member class, such as any local or anonymous class.\n+     * <p>\n+     * Nested interfaces (JLS {@jls 9.1.1.3}) and interface members (JLS {@jls\n+     * 9.5}) are all implicitly {@code static}, so there is no inner member\n+     * interface, and the immediately enclosing class or interface for an inner\n+     * member class must be a class.\n+     * <p>\n+     * To check if a {@link Class} is an inner member class:\n+     * {@snippet lang=java :\n+     * Class<?> clazz = int.class; \/\/ @replace regex=\"int.class\" replacement=...\n+     * return clazz.getDeclaringClass() != null &&\n+     *         !Modifier.isStatic(clazz.getModifiers());\n+     * }\n@@ -89,8 +118,8 @@\n-     * @return a {@code Type} object representing the type that\n-     *     this type is a member of. If this type is a top-level type,\n-     *     {@code null} is returned\n-     * @throws TypeNotPresentException if the owner type\n-     *     refers to a non-existent class or interface declaration\n-     * @throws MalformedParameterizedTypeException if the owner type\n-     *     refers to a parameterized type that cannot be instantiated\n-     *     for any reason\n+     * @throws TypeNotPresentException if the immediately enclosing class refers\n+     *     to a non-existent class or interface declaration\n+     * @throws MalformedParameterizedTypeException if the immediately enclosing\n+     *     class refers to a parameterized type that cannot be instantiated for\n+     *     any reason\n+     * @jls 8.1.3 Inner Classes and Enclosing Instances\n+     * @jls 8.5 Member Class and Interface Declarations\n+     * @jls 15.9.2 Determining Enclosing Instances\n@@ -100,0 +129,13 @@\n+\n+    \/**\n+     * {@return whether some other object is equal to this {@code\n+     * ParameterizedType}}  Two instances of {@code ParameterizedType} are equal\n+     * if and only if they share the same {@linkplain #getRawType() generic\n+     * class or interface declaration} and have equal {@linkplain\n+     * #getActualTypeArguments() type parameters}, including those from the\n+     * {@linkplain #getOwnerType() enclosing classes}.\n+     *\n+     * @param o {@inheritDoc}\n+     *\/\n+    @Override\n+    boolean equals(Object o);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ParameterizedType.java","additions":78,"deletions":36,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,20 @@\n+ * <h2 id=\"hierarchy\">Interface Hierarchy of {@code Type}<\/h2>\n+ * Types in the Java programming language are modeled with these subinterfaces:\n+ * <ul>\n+ * <li>No particular subinterface models primitive types (JLS {@jls 4.2}) and\n+ *     non-generic (JLS {@jls 4.5}) and raw types (JLS {@jls 4.8}) of reference\n+ *     types (JLS {@jls 4.3}), including classes and interfaces and array types.\n+ *     Core reflection models these with {@link Class}.\n+ * <li>{@link GenericArrayType} models array types (JLS {@jls 10.1}) with\n+ *     generic component types.\n+ * <li>{@link ParameterizedType} models parameterized types (JLS {@jls 4.4}),\n+ *     including non-generic {@linkplain ParameterizedType##inner-member-class\n+ *     inner member classes} of generic classes.\n+ * <li>{@link TypeVariable} models type variables (JLS {@jls 4.4}), including\n+ *     those from {@linkplain GenericDeclaration#getTypeParameters() type\n+ *     parameter declarations}.\n+ * <li>{@link WildcardType} models wildcard {@linkplain\n+ *     ParameterizedType#getActualTypeArguments() type arguments} (JLS {@jls\n+ *     4.5.1}).\n+ * <\/ul>\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Type.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}