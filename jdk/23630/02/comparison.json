{"files":[{"patch":"@@ -62,1 +62,1 @@\n-void OptoRuntime::generate_uncommon_trap_blob() {\n+UncommonTrapBlob* OptoRuntime::generate_uncommon_trap_blob() {\n@@ -245,1 +245,1 @@\n-  _uncommon_trap_blob =  UncommonTrapBlob::create(&buffer, oop_maps,\n+  return UncommonTrapBlob::create(&buffer, oop_maps,\n@@ -275,1 +275,1 @@\n-void OptoRuntime::generate_exception_blob() {\n+ExceptionBlob* OptoRuntime::generate_exception_blob() {\n@@ -379,1 +379,1 @@\n-  _exception_blob =  ExceptionBlob::create(&buffer, oop_maps, SimpleRuntimeFrame::framesize >> 1);\n+  return ExceptionBlob::create(&buffer, oop_maps, SimpleRuntimeFrame::framesize >> 1);\n","filename":"src\/hotspot\/cpu\/aarch64\/runtime_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-void OptoRuntime::generate_uncommon_trap_blob() {\n+UncommonTrapBlob* OptoRuntime::generate_uncommon_trap_blob() {\n@@ -176,1 +176,1 @@\n-  _uncommon_trap_blob = UncommonTrapBlob::create(&buffer, nullptr, 2 \/* LR+FP *\/);\n+  return UncommonTrapBlob::create(&buffer, nullptr, 2 \/* LR+FP *\/);\n@@ -203,1 +203,1 @@\n-void OptoRuntime::generate_exception_blob() {\n+ExceptionBlob* OptoRuntime::generate_exception_blob() {\n@@ -284,1 +284,1 @@\n-  _exception_blob = ExceptionBlob::create(&buffer, oop_maps, framesize_in_words);\n+  return ExceptionBlob::create(&buffer, oop_maps, framesize_in_words);\n","filename":"src\/hotspot\/cpu\/arm\/runtime_arm.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-void OptoRuntime::generate_exception_blob() {\n+ExceptionBlob* OptoRuntime::generate_exception_blob() {\n@@ -145,1 +145,1 @@\n-  _exception_blob = ExceptionBlob::create(&buffer, oop_maps,\n+  return ExceptionBlob::create(&buffer, oop_maps,\n","filename":"src\/hotspot\/cpu\/ppc\/runtime_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3103,1 +3103,1 @@\n-void OptoRuntime::generate_uncommon_trap_blob() {\n+UncommonTrapBlob* OptoRuntime::generate_uncommon_trap_blob() {\n@@ -3230,1 +3230,1 @@\n-  _uncommon_trap_blob = UncommonTrapBlob::create(&buffer, oop_maps, frame_size_in_bytes\/wordSize);\n+  return UncommonTrapBlob::create(&buffer, oop_maps, frame_size_in_bytes\/wordSize);\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-void OptoRuntime::generate_uncommon_trap_blob() {\n+UncommonTrapBlob* OptoRuntime::generate_uncommon_trap_blob() {\n@@ -242,1 +242,1 @@\n-  _uncommon_trap_blob =  UncommonTrapBlob::create(&buffer, oop_maps,\n+  return UncommonTrapBlob::create(&buffer, oop_maps,\n@@ -272,1 +272,1 @@\n-void OptoRuntime::generate_exception_blob() {\n+ExceptionBlob* OptoRuntime::generate_exception_blob() {\n@@ -377,1 +377,1 @@\n-  _exception_blob =  ExceptionBlob::create(&buffer, oop_maps, SimpleRuntimeFrame::framesize >> 1);\n+  return ExceptionBlob::create(&buffer, oop_maps, SimpleRuntimeFrame::framesize >> 1);\n","filename":"src\/hotspot\/cpu\/riscv\/runtime_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-void OptoRuntime::generate_exception_blob() {\n+ExceptionBlob* OptoRuntime::generate_exception_blob() {\n@@ -148,1 +148,1 @@\n-  _exception_blob =  ExceptionBlob::create(&buffer, oop_maps, frame_size\/wordSize);\n+  return ExceptionBlob::create(&buffer, oop_maps, frame_size\/wordSize);\n","filename":"src\/hotspot\/cpu\/s390\/runtime_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2765,1 +2765,1 @@\n-void OptoRuntime::generate_uncommon_trap_blob() {\n+UncommonTrapBlob* OptoRuntime::generate_uncommon_trap_blob() {\n@@ -2884,1 +2884,1 @@\n-  _uncommon_trap_blob = UncommonTrapBlob::create(&buffer, nullptr, framesize_in_bytes\/wordSize);\n+  return UncommonTrapBlob::create(&buffer, nullptr, framesize_in_bytes\/wordSize);\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-void OptoRuntime::generate_uncommon_trap_blob() {\n+UncommonTrapBlob* OptoRuntime::generate_uncommon_trap_blob() {\n@@ -214,1 +214,1 @@\n-   _uncommon_trap_blob = UncommonTrapBlob::create(&buffer, oop_maps, framesize);\n+   return UncommonTrapBlob::create(&buffer, oop_maps, framesize);\n@@ -242,1 +242,1 @@\n-void OptoRuntime::generate_exception_blob() {\n+ExceptionBlob* OptoRuntime::generate_exception_blob() {\n@@ -329,1 +329,1 @@\n-  _exception_blob = ExceptionBlob::create(&buffer, oop_maps, framesize);\n+  return ExceptionBlob::create(&buffer, oop_maps, framesize);\n","filename":"src\/hotspot\/cpu\/x86\/runtime_x86_32.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-void OptoRuntime::generate_uncommon_trap_blob() {\n+UncommonTrapBlob* OptoRuntime::generate_uncommon_trap_blob() {\n@@ -227,1 +227,1 @@\n-  _uncommon_trap_blob =  UncommonTrapBlob::create(&buffer, oop_maps,\n+  return UncommonTrapBlob::create(&buffer, oop_maps,\n@@ -257,1 +257,1 @@\n-void OptoRuntime::generate_exception_blob() {\n+ExceptionBlob* OptoRuntime::generate_exception_blob() {\n@@ -358,1 +358,1 @@\n-  _exception_blob =  ExceptionBlob::create(&buffer, oop_maps, SimpleRuntimeFrame::framesize >> 1);\n+  return ExceptionBlob::create(&buffer, oop_maps, SimpleRuntimeFrame::framesize >> 1);\n","filename":"src\/hotspot\/cpu\/x86\/runtime_x86_64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-void Compiler::init_c1_runtime() {\n+bool Compiler::init_c1_runtime() {\n@@ -53,1 +53,3 @@\n-  Runtime1::initialize(buffer_blob);\n+  if (!Runtime1::initialize(buffer_blob)) {\n+    return false;\n+  }\n@@ -60,0 +62,1 @@\n+  return true;\n@@ -68,1 +71,1 @@\n-    if (buffer_blob == nullptr) {\n+    if (buffer_blob == nullptr || !init_c1_runtime()) {\n@@ -73,1 +76,0 @@\n-      init_c1_runtime();\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-  static void init_c1_runtime();\n+  static bool init_c1_runtime();\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -232,2 +232,2 @@\n-                                                 must_gc_arguments);\n-  assert(blob != nullptr, \"blob must exist\");\n+                                                 must_gc_arguments,\n+                                                 false \/* alloc_fail_is_fatal *\/ );\n@@ -237,1 +237,1 @@\n-void Runtime1::generate_blob_for(BufferBlob* buffer_blob, C1StubId id) {\n+bool Runtime1::generate_blob_for(BufferBlob* buffer_blob, C1StubId id) {\n@@ -260,0 +260,1 @@\n+  return blob != nullptr;\n@@ -262,1 +263,1 @@\n-void Runtime1::initialize(BufferBlob* blob) {\n+bool Runtime1::initialize(BufferBlob* blob) {\n@@ -267,1 +268,5 @@\n-  for (int id = 0; id < limit; id++) generate_blob_for(blob, (C1StubId)id);\n+  for (int id = 0; id < limit; id++) {\n+    if (!generate_blob_for(blob, (C1StubId) id)) {\n+      return false;\n+    }\n+  }\n@@ -281,1 +286,1 @@\n-  bs->generate_c1_runtime_stubs(blob);\n+  return bs->generate_c1_runtime_stubs(blob);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-  static void       generate_blob_for(BufferBlob* blob, C1StubId id);\n+  static bool       generate_blob_for(BufferBlob* blob, C1StubId id);\n@@ -134,1 +134,1 @@\n-  static void initialize(BufferBlob* blob);\n+  static bool initialize(BufferBlob* blob);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -474,1 +474,1 @@\n-void* SingletonBlob::operator new(size_t s, unsigned size) throw() {\n+void* SingletonBlob::operator new(size_t s, unsigned size, bool alloc_fail_is_fatal) throw() {\n@@ -476,1 +476,1 @@\n-  if (!p) fatal(\"Initial size of CodeCache is too small\");\n+  if (alloc_fail_is_fatal && !p) fatal(\"Initial size of CodeCache is too small\");\n@@ -558,1 +558,1 @@\n-    blob = new (size) UncommonTrapBlob(cb, size, oop_maps, frame_size);\n+    blob = new (size, false) UncommonTrapBlob(cb, size, oop_maps, frame_size);\n@@ -590,1 +590,1 @@\n-    blob = new (size) ExceptionBlob(cb, size, oop_maps, frame_size);\n+    blob = new (size, false) ExceptionBlob(cb, size, oop_maps, frame_size);\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -448,1 +448,1 @@\n-  void* operator new(size_t s, unsigned size) throw();\n+  void* operator new(size_t s, unsigned size, bool alloc_fail_is_fatal=true) throw();\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-void G1BarrierSetC1::generate_c1_runtime_stubs(BufferBlob* buffer_blob) {\n+bool G1BarrierSetC1::generate_c1_runtime_stubs(BufferBlob* buffer_blob) {\n@@ -225,0 +225,1 @@\n+  return _pre_barrier_c1_runtime_code_blob != nullptr && _post_barrier_c1_runtime_code_blob != nullptr;\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,1 +143,1 @@\n-  virtual void generate_c1_runtime_stubs(BufferBlob* buffer_blob);\n+  virtual bool generate_c1_runtime_stubs(BufferBlob* buffer_blob);\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,1 +138,1 @@\n-  virtual void generate_c1_runtime_stubs(BufferBlob* buffer_blob) {}\n+  virtual bool generate_c1_runtime_stubs(BufferBlob* buffer_blob) { return true; }\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/barrierSetC1.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -274,1 +275,1 @@\n-void ShenandoahBarrierSetC1::generate_c1_runtime_stubs(BufferBlob* buffer_blob) {\n+bool ShenandoahBarrierSetC1::generate_c1_runtime_stubs(BufferBlob* buffer_blob) {\n@@ -279,0 +280,3 @@\n+  if (_pre_barrier_c1_runtime_code_blob == nullptr) {\n+    return false;\n+  }\n@@ -282,2 +286,5 @@\n-                                                                  \"shenandoah_load_reference_barrier_strong_slow\",\n-                                                                  false, &lrb_strong_code_gen_cl);\n+                                                                          \"shenandoah_load_reference_barrier_strong_slow\",\n+                                                                          false, &lrb_strong_code_gen_cl);\n+    if (_load_reference_barrier_strong_rt_code_blob == nullptr) {\n+      return false;\n+    }\n@@ -287,2 +294,5 @@\n-                                                                          \"shenandoah_load_reference_barrier_strong_native_slow\",\n-                                                                          false, &lrb_strong_native_code_gen_cl);\n+                                                                                 \"shenandoah_load_reference_barrier_strong_native_slow\",\n+                                                                                 false, &lrb_strong_native_code_gen_cl);\n+    if (_load_reference_barrier_strong_native_rt_code_blob == nullptr) {\n+      return false;\n+    }\n@@ -292,2 +302,5 @@\n-                                                                          \"shenandoah_load_reference_barrier_weak_slow\",\n-                                                                          false, &lrb_weak_code_gen_cl);\n+                                                                        \"shenandoah_load_reference_barrier_weak_slow\",\n+                                                                        false, &lrb_weak_code_gen_cl);\n+    if (_load_reference_barrier_weak_rt_code_blob == nullptr) {\n+      return false;\n+    }\n@@ -299,0 +312,1 @@\n+    return (_load_reference_barrier_phantom_rt_code_blob != nullptr);\n@@ -300,0 +314,1 @@\n+  return true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -250,1 +251,1 @@\n-  virtual void generate_c1_runtime_stubs(BufferBlob* buffer_blob);\n+  virtual bool generate_c1_runtime_stubs(BufferBlob* buffer_blob);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -510,1 +510,1 @@\n-  return code_blob->code_begin();\n+  return (code_blob != nullptr) ? code_blob->code_begin() : nullptr;\n@@ -530,1 +530,1 @@\n-  return code_blob->code_begin();\n+  return (code_blob != nullptr) ? code_blob->code_begin() : nullptr;\n@@ -533,1 +533,1 @@\n-void ZBarrierSetC1::generate_c1_runtime_stubs(BufferBlob* blob) {\n+bool ZBarrierSetC1::generate_c1_runtime_stubs(BufferBlob* blob) {\n@@ -535,1 +535,4 @@\n-    generate_c1_load_runtime_stub(blob, ON_STRONG_OOP_REF, \"load_barrier_on_oop_field_preloaded_runtime_stub\");\n+      generate_c1_load_runtime_stub(blob, ON_STRONG_OOP_REF, \"load_barrier_on_oop_field_preloaded_runtime_stub\");\n+  if (_load_barrier_on_oop_field_preloaded_runtime_stub == nullptr) {\n+    return false;\n+  }\n@@ -537,1 +540,4 @@\n-    generate_c1_load_runtime_stub(blob, ON_WEAK_OOP_REF, \"load_barrier_on_weak_oop_field_preloaded_runtime_stub\");\n+      generate_c1_load_runtime_stub(blob, ON_WEAK_OOP_REF, \"load_barrier_on_weak_oop_field_preloaded_runtime_stub\");\n+  if (_load_barrier_on_weak_oop_field_preloaded_runtime_stub == nullptr) {\n+    return false;\n+  }\n@@ -540,1 +546,4 @@\n-    generate_c1_store_runtime_stub(blob, true \/* self_healing *\/, \"store_barrier_on_oop_field_with_healing\");\n+      generate_c1_store_runtime_stub(blob, true \/* self_healing *\/, \"store_barrier_on_oop_field_with_healing\");\n+  if (_store_barrier_on_oop_field_with_healing == nullptr) {\n+    return false;\n+  }\n@@ -542,1 +551,2 @@\n-    generate_c1_store_runtime_stub(blob, false \/* self_healing *\/, \"store_barrier_on_oop_field_without_healing\");\n+      generate_c1_store_runtime_stub(blob, false \/* self_healing *\/, \"store_barrier_on_oop_field_without_healing\");\n+  return _store_barrier_on_oop_field_without_healing != nullptr;\n","filename":"src\/hotspot\/share\/gc\/z\/c1\/zBarrierSetC1.cpp","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,1 +115,1 @@\n-  virtual void generate_c1_runtime_stubs(BufferBlob* blob);\n+  virtual bool generate_c1_runtime_stubs(BufferBlob* blob);\n","filename":"src\/hotspot\/share\/gc\/z\/c1\/zBarrierSetC1.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3482,0 +3482,1 @@\n+                                                      false,\n@@ -3483,3 +3484,5 @@\n-      assert(rs != nullptr && rs->is_runtime_stub(), \"sanity check\");\n-\n-      C->set_stub_entry_point(rs->entry_point());\n+      if (rs == nullptr) {\n+        C->record_failure(\"CodeCache is full\");\n+      } else {\n+        C->set_stub_entry_point(rs->entry_point());\n+      }\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -134,1 +134,3 @@\n-  generate_ ## name ## _blob();\n+  BLOB_FIELD_NAME(name) =                       \\\n+    generate_ ## name ## _blob();                  \\\n+  if (BLOB_FIELD_NAME(name) == nullptr) { return false; }\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -254,2 +254,2 @@\n-  static void generate_uncommon_trap_blob(void);\n-  static void generate_exception_blob();\n+  static UncommonTrapBlob* generate_uncommon_trap_blob(void);\n+  static ExceptionBlob* generate_exception_blob();\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,2 +74,0 @@\n-compiler\/startup\/StartupOutput.java 8347406 generic-x64\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @key randomness\n@@ -40,0 +41,2 @@\n+import jdk.test.lib.Utils;\n+import java.util.Random;\n@@ -45,0 +48,1 @@\n+        Random rand = Utils.getRandomInstance();\n@@ -59,7 +63,15 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:InitialCodeCacheSize=1024K\", \"-XX:ReservedCodeCacheSize=1200k\", \"-version\");\n-        out = new OutputAnalyzer(pb.start());\n-        \/\/ The VM should not crash but will probably fail with a \"CodeCache is full. Compiler has been disabled.\" message\n-        out.stdoutShouldNotContain(\"# A fatal error\");\n-        exitCode = out.getExitValue();\n-        if (exitCode != 1 && exitCode != 0) {\n-            throw new Exception(\"VM crashed with exit code \" + exitCode);\n+        Process[] pr = new Process[200];\n+        for (int i = 0; i < 200; i++) {\n+            int initialCodeCacheSizeInKb = 800 + rand.nextInt(400);\n+            int reservedCodeCacheSizeInKb = initialCodeCacheSizeInKb + rand.nextInt(200);\n+            pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:InitialCodeCacheSize=\" + initialCodeCacheSizeInKb + \"K\", \"-XX:ReservedCodeCacheSize=\" + reservedCodeCacheSizeInKb + \"k\", \"-version\");\n+            pr[i] = pb.start();\n+        }\n+        for (int i = 0; i < 200; i++) {\n+            out = new OutputAnalyzer(pr[i]);\n+            \/\/ The VM should not crash but will probably fail with a \"CodeCache is full. Compiler has been disabled.\" message\n+            out.stdoutShouldNotContain(\"# A fatal error\");\n+            exitCode = out.getExitValue();\n+            if (exitCode != 1 && exitCode != 0) {\n+                throw new Exception(\"VM crashed with exit code \" + exitCode);\n+            }\n","filename":"test\/hotspot\/jtreg\/compiler\/startup\/StartupOutput.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"}]}