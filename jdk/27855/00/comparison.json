{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -33,1 +34,0 @@\n-import java.util.concurrent.*;\n@@ -37,2 +37,4 @@\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import jdk.test.lib.thread.VThreadScheduler;\n@@ -62,1 +64,1 @@\n-            ThreadFactory factory = virtualThreadBuilder(scheduler).factory();\n+            ThreadFactory factory = VThreadScheduler.virtualThreadBuilder(scheduler).factory();\n@@ -101,18 +103,0 @@\n-\n-    private static Thread.Builder.OfVirtual virtualThreadBuilder(Executor scheduler) {\n-        Thread.Builder.OfVirtual builder = Thread.ofVirtual();\n-        try {\n-            Class<?> clazz = Class.forName(\"java.lang.ThreadBuilders$VirtualThreadBuilder\");\n-            Constructor<?> ctor = clazz.getDeclaredConstructor(Executor.class);\n-            ctor.setAccessible(true);\n-            return (Thread.Builder.OfVirtual) ctor.newInstance(scheduler);\n-        } catch (InvocationTargetException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException re) {\n-                throw re;\n-            }\n-            throw new RuntimeException(e);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ThreadStateTest\/ThreadStateTest.java","additions":7,"deletions":23,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -37,1 +38,0 @@\n-import java.lang.reflect.Constructor;\n@@ -40,1 +40,0 @@\n-import java.util.concurrent.ExecutorService;\n@@ -43,0 +42,1 @@\n+import java.util.concurrent.ExecutorService;\n@@ -45,0 +45,1 @@\n+import jdk.test.lib.thread.VThreadScheduler;\n@@ -56,1 +57,1 @@\n-            Thread.Builder builder = virtualThreadBuilder(scheduler);\n+            Thread.Builder builder = VThreadScheduler.virtualThreadBuilder(scheduler);\n@@ -121,10 +122,0 @@\n-\n-    \/**\n-     * Returns a builder to create virtual threads that use the given scheduler.\n-     *\/\n-    static Thread.Builder.OfVirtual virtualThreadBuilder(Executor scheduler) throws Exception {\n-        Class<?> clazz = Class.forName(\"java.lang.ThreadBuilders$VirtualThreadBuilder\");\n-        Constructor<?> ctor = clazz.getDeclaredConstructor(Executor.class);\n-        ctor.setAccessible(true);\n-        return (Thread.Builder.OfVirtual) ctor.newInstance(scheduler);\n-    }\n","filename":"test\/jdk\/java\/io\/ByteArrayOutputStream\/WriteToReleasesCarrier.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import java.lang.reflect.Constructor;\n@@ -28,1 +27,0 @@\n-import java.lang.reflect.InvocationTargetException;\n@@ -40,0 +38,2 @@\n+import jdk.test.lib.thread.VThreadScheduler;\n+\n@@ -49,0 +49,1 @@\n+ * @library \/test\/lib\n@@ -142,1 +143,1 @@\n-            ThreadFactory factory = virtualThreadBuilder(pool)\n+            ThreadFactory factory = VThreadScheduler.virtualThreadBuilder(pool)\n@@ -205,20 +206,0 @@\n-\n-    \/**\n-     * Returns a builder to create virtual threads that use the given scheduler.\n-     *\/\n-    static Thread.Builder.OfVirtual virtualThreadBuilder(Executor scheduler) {\n-        try {\n-            Class<?> clazz = Class.forName(\"java.lang.ThreadBuilders$VirtualThreadBuilder\");\n-            Constructor<?> ctor = clazz.getDeclaredConstructor(Executor.class);\n-            ctor.setAccessible(true);\n-            return (Thread.Builder.OfVirtual) ctor.newInstance(scheduler);\n-        } catch (InvocationTargetException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException re) {\n-                throw re;\n-            }\n-            throw new RuntimeException(e);\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n","filename":"test\/jdk\/jdk\/internal\/misc\/TerminatingThreadLocal\/TestTerminatingThreadLocal.java","additions":4,"deletions":23,"binary":false,"changes":27,"status":"modified"}]}