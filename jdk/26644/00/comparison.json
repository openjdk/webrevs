{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import jdk.jfr.StackTrace;\n@@ -41,0 +42,1 @@\n+    @StackTrace(false)\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/streaming\/TestFilledChunks.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    @Period(\"10 s\")\n+    @Period(\"2 s\")\n@@ -68,1 +68,1 @@\n-        CountDownLatch zebraLatch = new CountDownLatch(3);\n+        CountDownLatch zebraLatch = new CountDownLatch(2);\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/streaming\/TestStartMultiChunk.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    static final int RUN_TIME_MS = 10000;\n+    static final int RUN_TIME_MS = 5000;\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/StressJavaMonitorEvents.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import jdk.jfr.StackTrace;\n@@ -48,0 +49,1 @@\n+    @StackTrace(false)\n@@ -95,1 +97,1 @@\n-        Thread.sleep(1000);\n+        Thread.sleep(100);\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestMaxSize.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-    private static List<RecordedEvent> recordWithPolicy(String filename, Consumer<RemoteRecordingStream> policy) throws Exception {\n+    private static List<RecordedEvent> recordWithPolicy(String filename, boolean awaitEvents, Consumer<RemoteRecordingStream> policy) throws Exception {\n@@ -114,1 +114,3 @@\n-            latch1.await();\n+            if (awaitEvents) {\n+                latch1.await();\n+            }\n@@ -121,1 +123,3 @@\n-            latch2.await();\n+            if (awaitEvents) {\n+                latch2.await();\n+            }\n@@ -132,1 +136,1 @@\n-        var events = recordWithPolicy(\"max-size.jfr\", rs -> {\n+        var events = recordWithPolicy(\"max-size.jfr\", false, rs -> {\n@@ -143,1 +147,1 @@\n-        var events = recordWithPolicy(\"max-age.jfr\", rs -> {\n+        var events = recordWithPolicy(\"max-age.jfr\", false, rs -> {\n@@ -154,1 +158,1 @@\n-        var events = recordWithPolicy(\"no-policy.jfr\", rs -> {\n+        var events = recordWithPolicy(\"no-policy.jfr\", true, rs -> {\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestRemoteDump.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-             .with(\"cutoff\", \"infinity\")\n+             .with(\"cutoff\", \"2 s\")\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestWaste.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,7 +77,0 @@\n-    private static void testDefault() throws Exception {\n-        System.out.println(\"testDefault\");\n-        launchUnary(null);\n-        launchBinary(null, null);\n-        launchTernary(null, null, null);\n-    }\n-\n@@ -102,1 +95,0 @@\n-        testDefault();\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestMultipleStartupRecordings.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"}]}