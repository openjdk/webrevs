{"files":[{"patch":"@@ -447,0 +447,1 @@\n+        Objects.requireNonNull(cls);\n@@ -461,0 +462,1 @@\n+        Objects.requireNonNull(cls);\n@@ -470,2 +472,1 @@\n-        int index = readU2(pos);\n-        return entryByIndex(index, Utf8Entry.class);\n+        return readEntry(pos, Utf8Entry.class);\n@@ -476,5 +477,1 @@\n-        int index = readU2(pos);\n-        if (index == 0) {\n-            return null;\n-        }\n-        return entryByIndex(index, Utf8Entry.class);\n+        return readEntryOrNull(pos, Utf8Entry.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.Objects;\n@@ -118,0 +119,1 @@\n+        Objects.requireNonNull(cls);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n- * @bug 8331291\n- * @summary Testing Attributes API.\n+ * @bug 8331291 8332614\n+ * @summary Testing Attributes API and ClassReader.\n@@ -31,0 +31,1 @@\n+import java.lang.classfile.AttributedElement;\n@@ -32,0 +33,6 @@\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassReader;\n+import java.lang.classfile.CustomAttribute;\n+import java.lang.classfile.constantpool.ConstantPoolException;\n+import java.lang.classfile.constantpool.InvokeDynamicEntry;\n@@ -33,0 +40,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -34,0 +42,1 @@\n+\n@@ -55,0 +64,71 @@\n+\n+    private static final String TEST_ATTRIBUTE_NAME = \"org.openjdk.classfile.test\";\n+    private static final AttributeMapper<TestAttribute> TEST_MAPPER = new AttributeMapper<>() {\n+        @Override\n+        public String name() {\n+            return TEST_ATTRIBUTE_NAME;\n+        }\n+\n+        @Override\n+        public TestAttribute readAttribute(AttributedElement enclosing, ClassReader cf, int pos) {\n+            int cpPos = pos - 6; \/\/ Attribute Name Utf8\n+            \/\/ Test valid pos\/index - NPE\n+            assertThrows(NullPointerException.class, () -> cf.readEntry(cpPos, null));\n+            assertThrows(NullPointerException.class, () -> cf.readEntryOrNull(cpPos, null));\n+            assertThrows(NullPointerException.class, () -> cf.entryByIndex(1, null));\n+\n+            \/\/ Test valid pos\/index - incorrect type\n+            assertThrows(ConstantPoolException.class, () -> cf.readEntry(cpPos, InvokeDynamicEntry.class));\n+            assertThrows(ConstantPoolException.class, () -> cf.readEntryOrNull(cpPos, InvokeDynamicEntry.class));\n+            assertThrows(ConstantPoolException.class, () -> cf.entryByIndex(1, InvokeDynamicEntry.class));\n+\n+            \/\/ Passing tests\n+            var utf8 = cf.readEntry(cpPos, Utf8Entry.class);\n+            assertSame(utf8, cf.readEntryOrNull(cpPos, Utf8Entry.class));\n+\n+            \/\/ Test invalid pos\/index - NPE thrown before CPE\n+            assertThrows(NullPointerException.class, () -> cf.readEntry(-1, null));\n+            assertThrows(NullPointerException.class, () -> cf.readEntryOrNull(-1, null));\n+            assertThrows(NullPointerException.class, () -> cf.entryByIndex(-1, null));\n+\n+            return new TestAttribute(true);\n+        }\n+\n+        @Override\n+        public void writeAttribute(BufWriter buf, TestAttribute attr) {\n+            buf.writeIndex(buf.constantPool().utf8Entry(name()));\n+            buf.writeInt(0);\n+        }\n+\n+        @Override\n+        public AttributeStability stability() {\n+            return AttributeStability.STATELESS;\n+        }\n+    };\n+\n+    private static final class TestAttribute extends CustomAttribute<TestAttribute> {\n+        final boolean fromMapper;\n+\n+        TestAttribute(boolean fromMapper) {\n+            super(TEST_MAPPER);\n+            this.fromMapper = fromMapper;\n+        }\n+    }\n+\n+    @Test\n+    void testClassReader() throws Exception {\n+        var cf = ClassFile.of(ClassFile.AttributeMapperOption.of(utf8 -> {\n+            if (utf8.equalsString(TEST_ATTRIBUTE_NAME)) {\n+                return TEST_MAPPER;\n+            }\n+            return null;\n+        }));\n+\n+        var cd = ClassDesc.of(\"Testing\");\n+        var bytes = cf.build(cd, clb -> clb\n+                .with(new TestAttribute(false)));\n+        assertTrue(cf.parse(bytes)\n+                .findAttribute(TEST_MAPPER)\n+                .orElseThrow()\n+                .fromMapper);\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/AttributesTest.java","additions":82,"deletions":2,"binary":false,"changes":84,"status":"modified"}]}