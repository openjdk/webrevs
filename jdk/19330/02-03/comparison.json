{"files":[{"patch":"@@ -347,27 +347,0 @@\n-    private static final @Stable Class<?>[] TAG_TO_TYPE;\n-    private static final int TAG_TABLE_SIZE = 32;\n-\n-    static {\n-        @SuppressWarnings(\"unchecked\")\n-        var a = (Class<? extends PoolEntry>[]) new Class<?>[TAG_TABLE_SIZE];\n-        \/\/ JVMS Table 4.4-B. Constant pool tags\n-        a[TAG_UTF8] = AbstractPoolEntry.Utf8EntryImpl.class;\n-        a[TAG_INTEGER] = AbstractPoolEntry.IntegerEntryImpl.class;\n-        a[TAG_FLOAT] = AbstractPoolEntry.FloatEntryImpl.class;\n-        a[TAG_LONG] = AbstractPoolEntry.LongEntryImpl.class;\n-        a[TAG_DOUBLE] = AbstractPoolEntry.DoubleEntryImpl.class;\n-        a[TAG_CLASS] = AbstractPoolEntry.ClassEntryImpl.class;\n-        a[TAG_STRING] = AbstractPoolEntry.StringEntryImpl.class;\n-        a[TAG_FIELDREF] = AbstractPoolEntry.FieldRefEntryImpl.class;\n-        a[TAG_METHODREF] = AbstractPoolEntry.MethodRefEntryImpl.class;\n-        a[TAG_INTERFACEMETHODREF] = AbstractPoolEntry.InterfaceMethodRefEntryImpl.class;\n-        a[TAG_NAMEANDTYPE] = AbstractPoolEntry.NameAndTypeEntryImpl.class;\n-        a[TAG_METHODHANDLE] = AbstractPoolEntry.MethodHandleEntryImpl.class;\n-        a[TAG_METHODTYPE] = AbstractPoolEntry.MethodTypeEntryImpl.class;\n-        a[TAG_CONSTANTDYNAMIC] = AbstractPoolEntry.ConstantDynamicEntryImpl.class;\n-        a[TAG_INVOKEDYNAMIC] = AbstractPoolEntry.InvokeDynamicEntryImpl.class;\n-        a[TAG_MODULE] = AbstractPoolEntry.ModuleEntryImpl.class;\n-        a[TAG_PACKAGE] = AbstractPoolEntry.PackageEntryImpl.class;\n-        TAG_TO_TYPE = a;\n-    }\n-\n@@ -375,5 +348,22 @@\n-        if (0 <= tag && tag < TAG_TABLE_SIZE) {\n-            var type = TAG_TO_TYPE[tag];\n-            return type != null && cls.isAssignableFrom(type);\n-        }\n-        return false;\n+        var type = switch (tag) {\n+            \/\/ JVMS Table 4.4-B. Constant pool tags\n+            case TAG_UTF8 -> AbstractPoolEntry.Utf8EntryImpl.class;\n+            case TAG_INTEGER -> AbstractPoolEntry.IntegerEntryImpl.class;\n+            case TAG_FLOAT -> AbstractPoolEntry.FloatEntryImpl.class;\n+            case TAG_LONG -> AbstractPoolEntry.LongEntryImpl.class;\n+            case TAG_DOUBLE -> AbstractPoolEntry.DoubleEntryImpl.class;\n+            case TAG_CLASS -> AbstractPoolEntry.ClassEntryImpl.class;\n+            case TAG_STRING -> AbstractPoolEntry.StringEntryImpl.class;\n+            case TAG_FIELDREF -> AbstractPoolEntry.FieldRefEntryImpl.class;\n+            case TAG_METHODREF -> AbstractPoolEntry.MethodRefEntryImpl.class;\n+            case TAG_INTERFACEMETHODREF -> AbstractPoolEntry.InterfaceMethodRefEntryImpl.class;\n+            case TAG_NAMEANDTYPE -> AbstractPoolEntry.NameAndTypeEntryImpl.class;\n+            case TAG_METHODHANDLE -> AbstractPoolEntry.MethodHandleEntryImpl.class;\n+            case TAG_METHODTYPE -> AbstractPoolEntry.MethodTypeEntryImpl.class;\n+            case TAG_CONSTANTDYNAMIC -> AbstractPoolEntry.ConstantDynamicEntryImpl.class;\n+            case TAG_INVOKEDYNAMIC -> AbstractPoolEntry.InvokeDynamicEntryImpl.class;\n+            case TAG_MODULE -> AbstractPoolEntry.ModuleEntryImpl.class;\n+            case TAG_PACKAGE -> AbstractPoolEntry.PackageEntryImpl.class;\n+            default -> null;\n+        };\n+        return type != null && cls.isAssignableFrom(type);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":22,"deletions":32,"binary":false,"changes":54,"status":"modified"}]}