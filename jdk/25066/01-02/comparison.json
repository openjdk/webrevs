{"files":[{"patch":"@@ -109,4 +109,9 @@\n-  \/\/ The vast majority of memory operands seen in practice are of indOffL8 type.\n-  \/\/ By construction, these memory operands do not lead to out-of-range offsets\n-  \/\/ (see definition of immLoffset8), so ldr is guaranteed to be the first\n-  \/\/ instruction emitted by legitimize_address() (no preceding lea).\n+  \/\/ The main load is a candidate to implement implicit null checks, as long as\n+  \/\/ legitimize_address() does not require a preceding lea instruction to\n+  \/\/ materialize the memory operand. The absence of a preceding lea instruction\n+  \/\/ is guaranteed for immLoffset8 memory operands, because these do not lead to\n+  \/\/ out-of-range offsets (see definition of immLoffset8). Fortunately,\n+  \/\/ immLoffset8 memory operands are the most common ones in practice.\n+  \/\/ The barrier's slow path includes a reload that is identical to the main\n+  \/\/ load. The reload does not need to be registered in the exception table,\n+  \/\/ because it is dominated by the main one.\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -121,0 +121,3 @@\n+  \/\/ The main load is a candidate to implement implicit null checks. The\n+  \/\/ barrier's slow path includes an identical reload, which does not need to be\n+  \/\/ registered in the exception table because it is dominated by the main one.\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/z_x86_64.ad","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}