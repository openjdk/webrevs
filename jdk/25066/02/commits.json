[{"commit":{"message":"Extend comments in zLoadP implementations to explain role of reload"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad"},{"filename":"src\/hotspot\/cpu\/x86\/gc\/z\/z_x86_64.ad"}],"sha":"20d960e62b87af0ecd92644c83bee4f6c969053e"},{"commit":{"message":"Generalize tests by removing requires annotation and adding local applyIf rules"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestImplicitNullChecks.java"}],"sha":"6353f42bfad9f432624abbb67d7cf81b197a6570"},{"commit":{"message":"Assert that we do not move control nodes"},"files":[{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"}],"sha":"b198fca8b293cf11113b36437643ac55dddce0fd"},{"commit":{"message":"Extend comment about hoisting DecodeN inputs"},"files":[{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"}],"sha":"024d09ce1761a4fc7ee9e317a3918285f462104f"},{"commit":{"message":"Apply Emanuels suggestions to ensure_node_is_at_block_or_above"},"files":[{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"}],"sha":"793bbe7f3d7618a38aeed3acbd57ba253ce55321"},{"commit":{"message":"Rename auxiliary functions"},"files":[{"filename":"src\/hotspot\/share\/opto\/block.hpp"},{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"}],"sha":"bcf08f90823c1b8169bb397d02778c95839c63fd"},{"commit":{"message":"Rename auxiliary functions"},"files":[{"filename":"src\/hotspot\/share\/opto\/block.hpp"},{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"}],"sha":"dbe461103063b41892f0c2f62ea962b6ccd6d714"},{"commit":{"message":"Clarify scope of move_into"},"files":[{"filename":"src\/hotspot\/share\/opto\/block.hpp"}],"sha":"d6a749e4967f6aaf363c91d34f223481b50d3cdb"},{"commit":{"message":"Extend comment about MachTemp nodes"},"files":[{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"}],"sha":"446649a627d869a4beb97284c0f22a70922efa23"},{"commit":{"message":"Extract and reuse legitimize_address test"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp"}],"sha":"5c7da867be71e225f3dafcfc479d2c893c05354b"},{"commit":{"message":"Format"},"files":[{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"}],"sha":"dc5aa4fc75c4b4bcaecfbf47b1a974f33f6277a1"},{"commit":{"message":"Remove extra line"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"}],"sha":"672df4ce6d30c1a40e01a843b1a977b5011f13e3"},{"commit":{"message":"Further clarify zLoadP candidate predicate and no-preceding-lea assertion"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad"}],"sha":"16cc858a8584627bf26d14020835dd3341483aa0"},{"commit":{"message":"Rename machine node property to ins_is_late_expanded_null_check_candidate for clarity, and make it a total function"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad"},{"filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/z_ppc.ad"},{"filename":"src\/hotspot\/cpu\/ppc\/ppc.ad"},{"filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/z_riscv.ad"},{"filename":"src\/hotspot\/cpu\/riscv\/riscv.ad"},{"filename":"src\/hotspot\/cpu\/x86\/gc\/z\/z_x86_64.ad"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"src\/hotspot\/share\/adlc\/output_h.cpp"},{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"},{"filename":"src\/hotspot\/share\/opto\/machnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/output.cpp"}],"sha":"eb71c88d73dc0903ce0d8bd2bdee602c78c2af53"},{"commit":{"message":"Update copyright year"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestImplicitNullChecks.java"}],"sha":"57e7075192f96861021e71696343d4a55ecf855a"},{"commit":{"message":"Revert unnecessary changes"},"files":[],"sha":"e951589938cd680b16a6011e1284ef1ab95d3261"},{"commit":{"message":"Move check to original location"},"files":[{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"}],"sha":"17fdf943950d24b112f72757a90c85c83ef9dca8"},{"commit":{"message":"Enable zLoadP as implicit null check candidates on riscv and ppc"},"files":[{"filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/z_ppc.ad"},{"filename":"src\/hotspot\/cpu\/ppc\/ppc.ad"},{"filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/z_riscv.ad"},{"filename":"src\/hotspot\/cpu\/riscv\/riscv.ad"}],"sha":"9e68edbfc49970338ca90f97ef9b22f90f9e6d69"},{"commit":{"message":"Refactor assertion"},"files":[{"filename":"src\/hotspot\/share\/opto\/output.cpp"}],"sha":"87ff3e9381723d6230fd2364c1cb27e63a8b1a71"},{"commit":{"message":"Simplify test"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestImplicitNullChecks.java"}],"sha":"b99e9e7b562de20eceef35281d91a665c1dba067"},{"commit":{"message":"Mark zLoadP in x64 as exploitable by implicit null check optimization"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/gc\/z\/z_x86_64.ad"}],"sha":"715c33b9dbe1f83177e85d8f85754a55d39c2b08"},{"commit":{"message":"Fix comment"},"files":[{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"}],"sha":"a3d3a2880788ef18256119ccd38e4763352578fc"},{"commit":{"message":"Do not mark g1LoadP\/g1LoadN as initial_implicit_null_check_candidate, they cannot be exploited anyway due to indirect memory operand"},"files":[],"sha":"f9f3774f3655b87945303f7b32c3a99eabe79ed8"},{"commit":{"message":"Exploit zLoadP only if the memory operand is indOffL8 (indirect does not work anyway due to limitations in C2's analysis)"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad"}],"sha":"2adf01fa9771bc638463eebe2be558e18981a76c"},{"commit":{"message":"Complete test with stores and atomics"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestImplicitNullChecks.java"}],"sha":"fb520fd49e461700eb19cb1758dd980026185020"},{"commit":{"message":"Extend test to G1"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestImplicitNullChecks.java"}],"sha":"234fa3497823eafd276b2b227b85aa0ef59c5fc7"},{"commit":{"message":"Do not mark zLoadPVolatile as a candidate: it cannot be used anyway (due to indirect memory operand)"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad"},{"filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestImplicitNullChecks.java"}],"sha":"9b9688b9dcc83c9f9751e7a7426c31b139b9da10"},{"commit":{"message":"Add initial test for ZGC"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestImplicitNullChecks.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"}],"sha":"5debeb545ca334eb233548de31ca8825fac8ba2f"},{"commit":{"message":"Add temporarily a few nops to simulate implicit null check bug"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad"}],"sha":"688c6007cac3d09e5c61450cd918d9b869f2b2ee"},{"commit":{"message":"Enable g1LoadP\/N as candidates to implement implicit null checks on aarch64"},"files":[],"sha":"82797a69d9ad260cb79e3f943bc687c5f9118f50"},{"commit":{"message":"Enable zLoadPVolatile as a candidate to implement implicit null checks on aarch64"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad"}],"sha":"8166bb885658a74ea86077994c0497c4b57cc917"},{"commit":{"message":"Refine comment"},"files":[{"filename":"src\/hotspot\/share\/opto\/machnode.hpp"}],"sha":"bd478fd80bcfc3fbd9e6753c9101e0f1e0ac7676"},{"commit":{"message":"Simplify zLoadP check"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad"}],"sha":"92b2681f99a9d3c1dee4881e359c9540684c6a2b"},{"commit":{"message":"Do implicit null check for aarch64 only for simple memory operands"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad"},{"filename":"src\/hotspot\/share\/opto\/output.cpp"}],"sha":"27efd249583d115c18d2f8726f86bcedaa1ee10f"},{"commit":{"message":"Add initial implementation"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"src\/hotspot\/share\/adlc\/output_h.cpp"},{"filename":"src\/hotspot\/share\/opto\/block.hpp"},{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"},{"filename":"src\/hotspot\/share\/opto\/machnode.hpp"}],"sha":"c689c836a283fad877a2a1ec540b8da86c1aed55"}]