{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.constant.ConstantUtils;\n@@ -331,1 +332,1 @@\n-    public static final MethodTypeDesc MTD_void = MethodTypeDesc.of(CD_void);\n+    public static final MethodTypeDesc MTD_void = MethodTypeDescImpl.ofValidated(\"()V\", CD_void, ConstantUtils.EMPTY_CLASSDESC);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantDescs.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -985,1 +985,1 @@\n-        return MethodTypeDescImpl.ofValidated(classDesc(mt.returnType()), params);\n+        return MethodTypeDescImpl.ofValidated(mt.descriptorString(), classDesc(mt.returnType()), params);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ClassSpecializer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -570,1 +570,1 @@\n-        return MethodTypeDescImpl.ofValidated(classDesc(mt.returnType()), params);\n+        return MethodTypeDescImpl.ofValidated(mt.descriptorString(), classDesc(mt.returnType()), params);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1673,1 +1673,1 @@\n-        return MethodTypeDescImpl.ofValidated(classDesc(mt.returnType()), params);\n+        return MethodTypeDescImpl.ofValidated(mt.descriptorString(), classDesc(mt.returnType()), params);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,0 @@\n-import java.lang.ref.Reference;\n-import java.lang.ref.ReferenceQueue;\n-import java.lang.ref.WeakReference;\n@@ -39,1 +36,0 @@\n-import java.util.NoSuchElementException;\n@@ -44,2 +40,0 @@\n-import java.util.concurrent.ConcurrentMap;\n-import java.util.stream.Stream;\n@@ -47,0 +41,2 @@\n+import jdk.internal.constant.ConstantUtils;\n+import jdk.internal.constant.MethodTypeDescImpl;\n@@ -1299,1 +1295,1 @@\n-            return Optional.of(MethodTypeDesc.of(retDesc.get()));\n+            return Optional.of(MethodTypeDescImpl.ofValidated(methodDescriptor, retDesc.get(), ConstantUtils.EMPTY_CLASSDESC));\n@@ -1308,1 +1304,1 @@\n-        return Optional.of(MethodTypeDesc.of(retDesc.get(), params));\n+        return Optional.of(MethodTypeDescImpl.ofValidated(methodDescriptor, retDesc.get(), params));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodType.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -105,1 +103,1 @@\n-            return MethodTypeDescImpl.ofValidated(returnDesc, EMPTY_CLASSDESC);\n+            return MethodTypeDescImpl.ofValidated(type.descriptorString(), returnDesc, EMPTY_CLASSDESC);\n@@ -111,1 +109,1 @@\n-        return MethodTypeDescImpl.ofValidated(returnDesc, paramDescs);\n+        return MethodTypeDescImpl.ofValidated(type.descriptorString(), returnDesc, paramDescs);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/ConstantUtils.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -107,0 +107,18 @@\n+    \/**\n+     * Constructs a {@linkplain MethodTypeDesc} with the specified pre-validated return type,\n+     * pre-validated trusted parameter types array, and a pre-validated descriptor string.\n+     * <p>\n+     * This API facilitates descriptor string reuse to avoid redundant hashing and allow faster\n+     * descriptor string equality checks.\n+     *\n+     * @param descriptorString the descriptor string, may be null for uncached\n+     * @param returnType a {@link ClassDesc} describing the return type\n+     * @param trustedArgTypes {@link ClassDesc}s describing the trusted parameter types\n+     *\/\n+    public static MethodTypeDescImpl ofValidated(String descriptorString, ClassDesc returnType, ClassDesc[] trustedArgTypes) {\n+        var ret = ofValidated(returnType, trustedArgTypes);\n+        assert descriptorString == null || ret.computeDescriptorString().equals(descriptorString);\n+        ret.cachedDescriptorString = descriptorString;\n+        return ret;\n+    }\n+\n@@ -116,1 +134,1 @@\n-    public static MethodTypeDescImpl ofDescriptor(String descriptor) {\n+    public static MethodTypeDesc ofDescriptor(String descriptor) {\n@@ -130,1 +148,1 @@\n-            return (MethodTypeDescImpl) ConstantDescs.MTD_void;\n+            return ConstantDescs.MTD_void;\n@@ -133,3 +151,1 @@\n-        var result = new MethodTypeDescImpl(returnType, paramTypes);\n-        result.cachedDescriptorString = descriptor;\n-        return result;\n+        return ofValidated(descriptor, returnType, paramTypes);\n@@ -289,0 +305,2 @@\n+        return this.cachedDescriptorString = computeDescriptorString();\n+    }\n@@ -290,0 +308,1 @@\n+    private String computeDescriptorString() {\n@@ -298,3 +317,1 @@\n-        desc = sb.append(')').append(returnType.descriptorString()).toString();\n-        cachedDescriptorString = desc;\n-        return desc;\n+        return sb.append(')').append(returnType.descriptorString()).toString();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/MethodTypeDescImpl.java","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"}]}