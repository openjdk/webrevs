{"files":[{"patch":"@@ -128,3 +128,3 @@\n-bool CompressedKlassPointers::check_klass_decode_mode() {\n-  const size_t range = CompressedKlassPointers::klass_range_end() - CompressedKlassPointers::base();\n-  return check_klass_decode_mode(_base, _shift, range);\n+bool CompressedKlassPointers::set_klass_decode_mode() {\n+  const size_t range = klass_range_end() - base();\n+  return MacroAssembler::set_klass_decode_mode(_base, _shift, range);\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedKlass_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5302,1 +5302,2 @@\n-  \/\/ KlassDecodeMode could change with final calculation, so recalculate.\n+  \/\/ KlassDecodeMode shouldn't be set already.\n+  assert(_klass_decode_mode == KlassDecodeNone, \"set once\");\n@@ -5305,1 +5306,1 @@\n-    return (_klass_decode_mode = KlassDecodeZero);\n+    return KlassDecodeZero;\n@@ -5312,1 +5313,1 @@\n-      return (_klass_decode_mode = KlassDecodeXor);\n+      return KlassDecodeXor;\n@@ -5319,1 +5320,1 @@\n-    return (_klass_decode_mode = KlassDecodeMovk);\n+    return KlassDecodeMovk;\n@@ -5323,1 +5324,0 @@\n-  assert(_klass_decode_mode == KlassDecodeNone, \"cannot reset\");\n@@ -5332,0 +5332,5 @@\n+bool MacroAssembler::set_klass_decode_mode(address base, int shift, const size_t range) {\n+  _klass_decode_mode = klass_decode_mode(base, shift, range);\n+  return _klass_decode_mode != KlassDecodeNone;\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  static KlassDecodeMode klass_decode_mode();\n+  \/\/ Calculate decoding mode based on given parameters, used for checking then ultimately setting.\n@@ -103,0 +103,3 @@\n+  \/\/ Returns above setting with asserts\n+  static KlassDecodeMode klass_decode_mode();\n+\n@@ -104,1 +107,1 @@\n-  \/\/ Sets the decode mode and returns false if cannot be set.\n+  \/\/ Checks the decode mode and returns false if not compatible with preferred decoding mode.\n@@ -107,0 +110,3 @@\n+  \/\/ Sets the decode mode and returns false if cannot be set.\n+  static bool set_klass_decode_mode(address base, int shift, const size_t range);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-  if (!check_klass_decode_mode()) {\n+  if (!set_klass_decode_mode()) {\n@@ -278,1 +278,1 @@\n-  if (!check_klass_decode_mode()) {\n+  if (!set_klass_decode_mode()) {\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -263,1 +263,1 @@\n-  static bool check_klass_decode_mode() NOT_AARCH64({ return true;});  \/\/ can be called after initialization\n+  static bool set_klass_decode_mode() NOT_AARCH64({ return true;});  \/\/ can be called after initialization\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}