{"files":[{"patch":"@@ -5294,1 +5294,0 @@\n-  assert(UseCompressedClassPointers, \"not using compressed class pointers\");\n@@ -5296,0 +5295,6 @@\n+  assert(_klass_decode_mode != KlassDecodeNone, \"should be initialized\");\n+  return _klass_decode_mode;\n+}\n+\n+MacroAssembler::KlassDecodeMode  MacroAssembler::klass_decode_mode(address base, int shift, const size_t range) {\n+  assert(UseCompressedClassPointers, \"not using compressed class pointers\");\n@@ -5301,1 +5306,1 @@\n-  if (CompressedKlassPointers::base() == nullptr) {\n+  if (base == nullptr) {\n@@ -5306,2 +5311,1 @@\n-        \/*is32*\/false, (uint64_t)CompressedKlassPointers::base())) {\n-    const size_t range = CompressedKlassPointers::klass_range_end() - CompressedKlassPointers::base();\n+        \/*is32*\/false, (uint64_t)base)) {\n@@ -5309,1 +5313,1 @@\n-    if (((uint64_t)CompressedKlassPointers::base() & range_mask) == 0) {\n+    if (((uint64_t)base & range_mask) == 0) {\n@@ -5315,3 +5319,4 @@\n-    (uint64_t)CompressedKlassPointers::base() >> CompressedKlassPointers::shift();\n-  guarantee((shifted_base & 0xffff0000ffffffff) == 0,\n-            \"compressed class base bad alignment\");\n+    (uint64_t)base >> shift;\n+  if ((shifted_base & 0xffff0000ffffffff) == 0) {\n+    return (_klass_decode_mode = KlassDecodeMovk);\n+  }\n@@ -5319,1 +5324,3 @@\n-  return (_klass_decode_mode = KlassDecodeMovk);\n+  \/\/ No valid encoding.\n+  assert(_klass_decode_mode == KlassDecodeNone, \"cannot reset\");\n+  return KlassDecodeNone;\n@@ -5324,9 +5331,1 @@\n-  assert(UseCompressedClassPointers, \"not using compressed class pointers\");\n-  const uint64_t base_address = (uint64_t)base;\n-  const uint64_t range_mask = right_n_bits(log2i_ceil(range));\n-  const uint64_t shifted_base = base_address >> shift;\n-\n-  return (base == nullptr ||\n-         (operand_valid_for_logical_immediate(\/*is32*\/false, base_address) &&\n-            ((base_address & range_mask) == 0))  ||\n-         (shifted_base & 0xffff0000ffffffff) == 0);\n+  return klass_decode_mode(base, shift, range) != KlassDecodeNone;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -97,1 +97,2 @@\n-  KlassDecodeMode klass_decode_mode();\n+  static KlassDecodeMode klass_decode_mode();\n+  static KlassDecodeMode klass_decode_mode(address base, int shift, const size_t range);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -262,7 +262,2 @@\n-#ifdef AARCH64\n-  static bool check_klass_decode_mode(address base, int shift, const size_t range);\n-  static bool check_klass_decode_mode();  \/\/ can be called after initialization\n-#else\n-  static bool check_klass_decode_mode(address base, int shift, const size_t range) { return true; }\n-  static bool check_klass_decode_mode() { return true; }  \/\/ can be called after initialization\n-#endif\n+  static bool check_klass_decode_mode(address base, int shift, const size_t range) NOT_AARCH64({ return true;});\n+  static bool check_klass_decode_mode() NOT_AARCH64({ return true;});  \/\/ can be called after initialization\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"}]}