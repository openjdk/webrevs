{"files":[{"patch":"@@ -561,1 +561,1 @@\n-    return TrainingData::need_data() ? make_a_copy : set_to_null;\n+    return (TrainingData::need_data() || TrainingData::assembling_data()) ? make_a_copy : set_to_null;\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -973,7 +973,0 @@\n-  if (CDSConfig::is_dumping_final_static_archive()) {\n-    assert(!AOTRecordTraining, \"must be\");\n-    if (CDSConfig::is_dumping_aot_linked_classes()) {\n-      AOTRecordTraining = true;\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+#if INCLUDE_CDS\n@@ -57,0 +58,1 @@\n+  \/\/ Used by cppVtables.cpp only\n@@ -59,0 +61,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/oops\/methodCounters.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -129,1 +129,0 @@\n-\n","filename":"src\/hotspot\/share\/oops\/methodCounters.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1295,0 +1295,1 @@\n+#if INCLUDE_CDS\n@@ -1296,0 +1297,1 @@\n+  \/\/ Used by cppVtables.cpp only\n@@ -1298,0 +1300,1 @@\n+#endif\n@@ -1434,1 +1437,1 @@\n-  return CompilationPolicy::is_mature((MethodData*)this);\n+  return CompilationPolicy::is_mature(const_cast<MethodData*>(this));\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+  \/\/ Used by cppVtables.cpp only\n@@ -58,0 +59,1 @@\n+  \/\/ Used by cppVtables.cpp only\n@@ -62,0 +64,1 @@\n+  \/\/ Used by cppVtables.cpp only\n@@ -468,5 +471,3 @@\n-  if (!need_data()) {\n-    return;\n-  }\n-  _dumptime_training_data_dictionary = new DumptimeTrainingDataDictionary();\n-  if (CDSConfig::is_dumping_final_static_archive()) {\n+  precond((!assembling_data() && !need_data()) || need_data() != assembling_data());\n+  if (assembling_data()) {\n+    _dumptime_training_data_dictionary = new DumptimeTrainingDataDictionary();\n@@ -476,1 +477,3 @@\n-  } else {\n+  }\n+  if (need_data()) {\n+    _dumptime_training_data_dictionary = new DumptimeTrainingDataDictionary();\n@@ -496,6 +499,4 @@\n-  if (!need_data()) {\n-    return;\n-  }\n-  assert(_dumptime_training_data_dictionary != nullptr, \"\");\n-  for (int i = 0; i < _dumptime_training_data_dictionary->length(); i++) {\n-    _dumptime_training_data_dictionary->at(i).metaspace_pointers_do(it);\n+  if (_dumptime_training_data_dictionary != nullptr) {\n+    for (int i = 0; i < _dumptime_training_data_dictionary->length(); i++) {\n+      _dumptime_training_data_dictionary->at(i).metaspace_pointers_do(it);\n+    }\n@@ -506,2 +507,18 @@\n-  if (!need_data()) {\n-    return;\n+  if (_dumptime_training_data_dictionary != nullptr) {\n+    CompactHashtableStats stats;\n+    _archived_training_data_dictionary_for_dumping.reset();\n+    CompactHashtableWriter writer(_dumptime_training_data_dictionary->length(), &stats);\n+    for (int i = 0; i < _dumptime_training_data_dictionary->length(); i++) {\n+      TrainingData* td = _dumptime_training_data_dictionary->at(i).training_data();\n+#ifdef ASSERT\n+      for (int j = i+1; j < _dumptime_training_data_dictionary->length(); j++) {\n+        TrainingData* td1 = _dumptime_training_data_dictionary->at(j).training_data();\n+        assert(!TrainingData::Key::equals(td1, td->key(), -1), \"conflict\");\n+      }\n+#endif \/\/ ASSERT\n+      td = ArchiveBuilder::current()->get_buffered_addr(td);\n+      uint hash = TrainingData::Key::cds_hash(td->key());\n+      u4 delta = ArchiveBuilder::current()->buffer_to_offset_u4((address)td);\n+      writer.add(hash, delta);\n+    }\n+    writer.dump(&_archived_training_data_dictionary_for_dumping, \"training data dictionary\");\n@@ -509,1 +526,0 @@\n-  write_training_data_dictionary(&_archived_training_data_dictionary_for_dumping);\n@@ -696,24 +712,0 @@\n-void TrainingData::write_training_data_dictionary(TrainingDataDictionary* dictionary) {\n-  if (!need_data()) {\n-    return;\n-  }\n-  assert(_dumptime_training_data_dictionary != nullptr, \"\");\n-  CompactHashtableStats stats;\n-  dictionary->reset();\n-  CompactHashtableWriter writer(_dumptime_training_data_dictionary->length(), &stats);\n-  for (int i = 0; i < _dumptime_training_data_dictionary->length(); i++) {\n-    TrainingData* td = _dumptime_training_data_dictionary->at(i).training_data();\n-#ifdef ASSERT\n-    for (int j = i+1; j < _dumptime_training_data_dictionary->length(); j++) {\n-      TrainingData* td1 = _dumptime_training_data_dictionary->at(j).training_data();\n-      assert(!TrainingData::Key::equals(td1, td->key(), -1), \"conflict\");\n-    }\n-#endif \/\/ ASSERT\n-    td = ArchiveBuilder::current()->get_buffered_addr(td);\n-    uint hash = TrainingData::Key::cds_hash(td->key());\n-    u4 delta = ArchiveBuilder::current()->buffer_to_offset_u4((address)td);\n-    writer.add(hash, delta);\n-  }\n-  writer.dump(dictionary, \"training data dictionary\");\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/trainingData.cpp","additions":32,"deletions":40,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -38,1 +39,0 @@\n-#include \"utilities\/count_leading_zeros.hpp\"\n@@ -284,0 +284,1 @@\n+  static bool assembling_data() { return CDSConfig::is_dumping_final_static_archive() && CDSConfig::is_dumping_aot_linked_classes(); }\n@@ -394,1 +395,0 @@\n-  static void write_training_data_dictionary(TrainingDataDictionary* dictionary);\n@@ -720,1 +720,0 @@\n-  bool _was_inlined;\n@@ -735,1 +734,1 @@\n-    _was_inlined = _was_toplevel = false;\n+    _was_toplevel = false;\n@@ -741,5 +740,0 @@\n-  static CompLevel highest_level(int mask) {\n-    if (mask == 0)  return (CompLevel) 0;\n-    int diff = (count_leading_zeros(level_mask(0)) - count_leading_zeros(mask));\n-    return (CompLevel) diff;\n-  }\n@@ -752,1 +746,0 @@\n-  bool never_inlined()        const { return !_was_inlined; }\n@@ -754,1 +747,0 @@\n-  int highest_level()         const { return highest_level(_level_mask); }\n@@ -775,3 +767,1 @@\n-    if (inlined) {\n-      _was_inlined = true;\n-    } else {\n+    if (!inlined) {\n","filename":"src\/hotspot\/share\/oops\/trainingData.hpp","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -189,0 +189,1 @@\n+  \/\/ Initialize TrainingData only we're recording\/replaying\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}