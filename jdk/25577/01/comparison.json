{"files":[{"patch":"@@ -101,2 +101,2 @@\n-\/\/ The alignment used for boundary between young gen and old gen\n-static size_t default_gen_alignment() {\n+\/\/ The alignment used for spaces in young gen and old gen\n+static size_t default_space_alignment() {\n@@ -109,1 +109,1 @@\n-  SpaceAlignment = GenAlignment = default_gen_alignment();\n+  SpaceAlignment = default_space_alignment();\n@@ -126,3 +126,2 @@\n-  size_t new_alignment = align_up(page_sz, GenAlignment);\n-  if (new_alignment != GenAlignment) {\n-    GenAlignment = new_alignment;\n+  size_t new_alignment = align_up(page_sz, SpaceAlignment);\n+  if (new_alignment != SpaceAlignment) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelArguments.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-                       \" Generation \" EXACTFMT \",\"\n@@ -35,1 +34,0 @@\n-                       EXACTFMTARGS(GenAlignment),\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelInitLogger.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-  ReservedSpace old_rs   = heap_rs.first_part(MaxOldSize, GenAlignment);\n-  ReservedSpace young_rs = heap_rs.last_part(MaxOldSize, GenAlignment);\n+  ReservedSpace old_rs   = heap_rs.first_part(MaxOldSize, SpaceAlignment);\n+  ReservedSpace young_rs = heap_rs.last_part(MaxOldSize, SpaceAlignment);\n@@ -110,1 +110,1 @@\n-                             GenAlignment,\n+                             SpaceAlignment,\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  initialize(rs, initial_size, GenAlignment);\n+  initialize(rs, initial_size, SpaceAlignment);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  initialize(rs, initial_size, GenAlignment);\n+  initialize(rs, initial_size, SpaceAlignment);\n@@ -749,1 +749,1 @@\n-  delta_in_bytes = align_down(delta_in_bytes, GenAlignment);\n+  delta_in_bytes = align_down(delta_in_bytes, SpaceAlignment);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,2 +191,2 @@\n-  ReservedSpace young_rs = heap_rs.first_part(MaxNewSize, GenAlignment);\n-  ReservedSpace old_rs = heap_rs.last_part(MaxNewSize, GenAlignment);\n+  ReservedSpace young_rs = heap_rs.first_part(MaxNewSize, SpaceAlignment);\n+  ReservedSpace old_rs = heap_rs.last_part(MaxNewSize, SpaceAlignment);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  \/\/ Initialize HeapAlignment, SpaceAlignment, and extra alignments (E.g. GenAlignment)\n+  \/\/ Initialize HeapAlignment, SpaceAlignment\n","filename":"src\/hotspot\/share\/gc\/shared\/gcArguments.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,2 +45,0 @@\n-size_t GenAlignment = 0;\n-\n@@ -51,1 +49,1 @@\n-  return align_up(3 * SpaceAlignment, GenAlignment);\n+  return 3 * SpaceAlignment;\n@@ -55,1 +53,1 @@\n-  return align_up(SpaceAlignment, GenAlignment);\n+  return SpaceAlignment;\n@@ -72,1 +70,1 @@\n-  SpaceAlignment = GenAlignment = (size_t)Generation::GenGrain;\n+  SpaceAlignment = (size_t)Generation::GenGrain;\n@@ -79,10 +77,7 @@\n-  assert(GenAlignment != 0, \"Generation alignment not set up properly\");\n-  assert(HeapAlignment >= GenAlignment,\n-         \"HeapAlignment: %zu less than GenAlignment: %zu\",\n-         HeapAlignment, GenAlignment);\n-  assert(GenAlignment % SpaceAlignment == 0,\n-         \"GenAlignment: %zu not aligned by SpaceAlignment: %zu\",\n-         GenAlignment, SpaceAlignment);\n-  assert(HeapAlignment % GenAlignment == 0,\n-         \"HeapAlignment: %zu not aligned by GenAlignment: %zu\",\n-         HeapAlignment, GenAlignment);\n+  assert(SpaceAlignment != 0, \"Generation alignment not set up properly\");\n+  assert(HeapAlignment >= SpaceAlignment,\n+         \"HeapAlignment: %zu less than SpaceAlignment: %zu\",\n+         HeapAlignment, SpaceAlignment);\n+  assert(HeapAlignment % SpaceAlignment == 0,\n+         \"HeapAlignment: %zu not aligned by SpaceAlignment: %zu\",\n+         HeapAlignment, SpaceAlignment);\n@@ -109,1 +104,1 @@\n-    size_t revised_new_size = bound_minus_alignment(NewSize, InitialHeapSize, GenAlignment);\n+    size_t revised_new_size = bound_minus_alignment(NewSize, InitialHeapSize, SpaceAlignment);\n@@ -118,2 +113,2 @@\n-  size_t bounded_new_size = bound_minus_alignment(NewSize, MaxHeapSize, GenAlignment);\n-  bounded_new_size = MAX2(smallest_new_size, align_down(bounded_new_size, GenAlignment));\n+  size_t bounded_new_size = bound_minus_alignment(NewSize, MaxHeapSize, SpaceAlignment);\n+  bounded_new_size = MAX2(smallest_new_size, align_down(bounded_new_size, SpaceAlignment));\n@@ -128,1 +123,1 @@\n-      size_t smaller_max_new_size = MaxHeapSize - GenAlignment;\n+      size_t smaller_max_new_size = MaxHeapSize - SpaceAlignment;\n@@ -140,2 +135,2 @@\n-    } else if (!is_aligned(MaxNewSize, GenAlignment)) {\n-      FLAG_SET_ERGO(MaxNewSize, align_down(MaxNewSize, GenAlignment));\n+    } else if (!is_aligned(MaxNewSize, SpaceAlignment)) {\n+      FLAG_SET_ERGO(MaxNewSize, align_down(MaxNewSize, SpaceAlignment));\n@@ -169,1 +164,1 @@\n-      size_t smaller_new_size = align_down((size_t)(NewSize * shrink_factor), GenAlignment);\n+      size_t smaller_new_size = align_down((size_t)(NewSize * shrink_factor), SpaceAlignment);\n@@ -174,2 +169,2 @@\n-      \/\/ GenAlignment. In initialize_flags() we verified that HeapAlignment\n-      \/\/ is a multiple of GenAlignment.\n+      \/\/ SpaceAlignment. In initialize_flags() we verified that HeapAlignment\n+      \/\/ is a multiple of SpaceAlignment.\n@@ -203,1 +198,1 @@\n-    max_young_size = scale_by_NewRatio_aligned(MaxHeapSize, GenAlignment);\n+    max_young_size = scale_by_NewRatio_aligned(MaxHeapSize, SpaceAlignment);\n@@ -232,2 +227,2 @@\n-        MIN2(max_young_size, bound_minus_alignment(NewSize, InitialHeapSize, GenAlignment));\n-      MinNewSize = bound_minus_alignment(initial_young_size, MinHeapSize, GenAlignment);\n+        MIN2(max_young_size, bound_minus_alignment(NewSize, InitialHeapSize, SpaceAlignment));\n+      MinNewSize = bound_minus_alignment(initial_young_size, MinHeapSize, SpaceAlignment);\n@@ -240,1 +235,1 @@\n-        clamp(scale_by_NewRatio_aligned(InitialHeapSize, GenAlignment), NewSize, max_young_size);\n+        clamp(scale_by_NewRatio_aligned(InitialHeapSize, SpaceAlignment), NewSize, max_young_size);\n@@ -243,1 +238,1 @@\n-      MinNewSize = MIN2(scale_by_NewRatio_aligned(MinHeapSize, GenAlignment), initial_young_size);\n+      MinNewSize = MIN2(scale_by_NewRatio_aligned(MinHeapSize, SpaceAlignment), initial_young_size);\n@@ -255,1 +250,1 @@\n-  MaxOldSize = MAX2(MaxHeapSize - max_young_size, GenAlignment);\n+  MaxOldSize = MAX2(MaxHeapSize - max_young_size, SpaceAlignment);\n@@ -318,2 +313,2 @@\n-  assert(NewSize % GenAlignment == 0, \"NewSize alignment\");\n-  assert(FLAG_IS_DEFAULT(MaxNewSize) || MaxNewSize % GenAlignment == 0, \"MaxNewSize alignment\");\n+  assert(NewSize % SpaceAlignment == 0, \"NewSize alignment\");\n+  assert(FLAG_IS_DEFAULT(MaxNewSize) || MaxNewSize % SpaceAlignment == 0, \"MaxNewSize alignment\");\n@@ -321,1 +316,1 @@\n-  assert(OldSize % GenAlignment == 0, \"OldSize alignment\");\n+  assert(OldSize % SpaceAlignment == 0, \"OldSize alignment\");\n@@ -330,4 +325,4 @@\n-  assert(MinNewSize % GenAlignment == 0, \"_min_young_size alignment\");\n-  assert(NewSize % GenAlignment == 0, \"_initial_young_size alignment\");\n-  assert(MaxNewSize % GenAlignment == 0, \"MaxNewSize alignment\");\n-  assert(MinNewSize <= bound_minus_alignment(MinNewSize, MinHeapSize, GenAlignment),\n+  assert(MinNewSize % SpaceAlignment == 0, \"_min_young_size alignment\");\n+  assert(NewSize % SpaceAlignment == 0, \"_initial_young_size alignment\");\n+  assert(MaxNewSize % SpaceAlignment == 0, \"MaxNewSize alignment\");\n+  assert(MinNewSize <= bound_minus_alignment(MinNewSize, MinHeapSize, SpaceAlignment),\n@@ -335,1 +330,1 @@\n-  assert(NewSize <=  bound_minus_alignment(NewSize, InitialHeapSize, GenAlignment),\n+  assert(NewSize <=  bound_minus_alignment(NewSize, InitialHeapSize, SpaceAlignment),\n@@ -337,1 +332,1 @@\n-  assert(MaxNewSize <= bound_minus_alignment(MaxNewSize, MaxHeapSize, GenAlignment),\n+  assert(MaxNewSize <= bound_minus_alignment(MaxNewSize, MaxHeapSize, SpaceAlignment),\n@@ -341,2 +336,2 @@\n-  assert(MaxOldSize % GenAlignment == 0, \"MaxOldSize alignment\");\n-  assert(OldSize % GenAlignment == 0, \"OldSize alignment\");\n+  assert(MaxOldSize % SpaceAlignment == 0, \"MaxOldSize alignment\");\n+  assert(OldSize % SpaceAlignment == 0, \"OldSize alignment\");\n","filename":"src\/hotspot\/share\/gc\/shared\/genArguments.cpp","additions":36,"deletions":41,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-extern size_t GenAlignment;\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/genArguments.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -586,22 +586,0 @@\n-#endif \/\/ INCLUDE_G1GC\n-\n-#if INCLUDE_PARALLELGC\n-\n-WB_ENTRY(jlong, WB_PSVirtualSpaceAlignment(JNIEnv* env, jobject o))\n-  if (UseParallelGC) {\n-    return GenAlignment;\n-  }\n-  THROW_MSG_0(vmSymbols::java_lang_UnsupportedOperationException(), \"WB_PSVirtualSpaceAlignment: Parallel GC is not enabled\");\n-WB_END\n-\n-WB_ENTRY(jlong, WB_PSHeapGenerationAlignment(JNIEnv* env, jobject o))\n-  if (UseParallelGC) {\n-    return GenAlignment;\n-  }\n-  THROW_MSG_0(vmSymbols::java_lang_UnsupportedOperationException(), \"WB_PSHeapGenerationAlignment: Parallel GC is not enabled\");\n-WB_END\n-\n-#endif \/\/ INCLUDE_PARALLELGC\n-\n-#if INCLUDE_G1GC\n-\n@@ -2776,4 +2754,0 @@\n-#if INCLUDE_PARALLELGC\n-  {CC\"psVirtualSpaceAlignment\",CC\"()J\",               (void*)&WB_PSVirtualSpaceAlignment},\n-  {CC\"psHeapGenerationAlignment\",CC\"()J\",             (void*)&WB_PSHeapGenerationAlignment},\n-#endif\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-      size_t expected = scale_by_NewRatio_aligned(initial_heap_size, GenAlignment);\n+      size_t expected = scale_by_NewRatio_aligned(initial_heap_size, SpaceAlignment);\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_collectorPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-            long generationAlignment = wb.psHeapGenerationAlignment();\n+            long spaceAlignment = wb.getHeapSpaceAlignment();\n@@ -170,1 +170,1 @@\n-                        generationAlignment);\n+                        spaceAlignment);\n@@ -180,1 +180,1 @@\n-                        generationAlignment);\n+                        spaceAlignment);\n@@ -189,1 +189,1 @@\n-                        generationAlignment);\n+                        spaceAlignment);\n@@ -191,1 +191,1 @@\n-                        generationAlignment);\n+                        spaceAlignment);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMinAndInitialSurvivorRatioFlags.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-            long alignedDownNewSize = HeapRegionUsageTool.alignDown(initHeap \/ (expectedRatio + 1),\n+            long expectedNewSize = HeapRegionUsageTool.alignDown(initHeap \/ (expectedRatio + 1),\n@@ -151,2 +151,0 @@\n-            long expectedNewSize = HeapRegionUsageTool.alignUp(alignedDownNewSize,\n-                    wb.psVirtualSpaceAlignment());\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewRatioFlag.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -185,2 +185,0 @@\n-        private static final long PS_VIRTUAL_SPACE_ALIGNMENT =\n-                (YOUNG_GC_TYPE == GCTypes.YoungGCType.PSNew) ? WB.psVirtualSpaceAlignment() : 0;\n@@ -306,3 +304,1 @@\n-                    return HeapRegionUsageTool.alignUp(HeapRegionUsageTool.alignDown(value,\n-                            HEAP_SPACE_ALIGNMENT),\n-                            PS_VIRTUAL_SPACE_ALIGNMENT);\n+                    return HeapRegionUsageTool.alignDown(value, HEAP_SPACE_ALIGNMENT);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewSizeFlags.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-                    wb.psHeapGenerationAlignment());\n+                    wb.getHeapSpaceAlignment());\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSurvivorRatioFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -300,4 +300,0 @@\n-  \/\/ Parallel GC\n-  public native long psVirtualSpaceAlignment();\n-  public native long psHeapGenerationAlignment();\n-\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}