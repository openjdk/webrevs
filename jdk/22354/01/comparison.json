{"files":[{"patch":"@@ -86,3 +86,5 @@\n-unsigned int C2_MacroAssembler::string_compress(Register result, Register src, Register dst, Register cnt,\n-                                                Register tmp,    bool precise, bool toASCII) {\n-  assert_different_registers(Z_R0, Z_R1, result, src, dst, cnt, tmp);\n+unsigned int C2_MacroAssembler::string_compress(Register result, Register Rsrc, Register Rdst, Register Rcnt,\n+                                                Register tmp, bool precise, bool toASCII, VectorRegister Vtmp1, VectorRegister Vtmp2,\n+                                                VectorRegister Vmask, VectorRegister Vzero, VectorRegister Vsrc_first, VectorRegister v21,\n+                                                VectorRegister v22, VectorRegister Vsrc_last) {\n+  assert_different_registers(Z_R0, Z_R1, result, Rsrc, Rdst, Rcnt, tmp);\n@@ -107,2 +109,0 @@\n-  Register       Rsrc  = src;\n-  Register       Rdst  = dst;\n@@ -110,1 +110,0 @@\n-  Register       Rcnt  = cnt;\n@@ -172,1 +171,0 @@\n-#if 0\n@@ -181,7 +179,0 @@\n-    VectorRegister Vtmp1      = Z_V16;\n-    VectorRegister Vtmp2      = Z_V17;\n-    VectorRegister Vmask      = Z_V18;\n-    VectorRegister Vzero      = Z_V19;\n-    VectorRegister Vsrc_first = Z_V20;\n-    VectorRegister Vsrc_last  = Z_V23;\n-\n@@ -202,2 +193,2 @@\n-      z_vo(Vtmp1, Z_V20, Z_V21);\n-      z_vo(Vtmp2, Z_V22, Z_V23);\n+      z_vo(Vtmp1, Vsrc_first, v21);\n+      z_vo(Vtmp2, v22, Vsrc_last);\n@@ -211,2 +202,2 @@\n-      z_vpkh(Vtmp1, Z_V20, Z_V21);         \/\/ pack (src1, src2) -> tmp1\n-      z_vpkh(Vtmp2, Z_V22, Z_V23);         \/\/ pack (src3, src4) -> tmp2\n+      z_vpkh(Vtmp1, Vsrc_first, v21);      \/\/ pack (src1, src2) -> tmp1\n+      z_vpkh(Vtmp2, v22, Vsrc_last);       \/\/ pack (src3, src4) -> tmp2\n@@ -227,1 +218,0 @@\n-#endif\n@@ -422,1 +412,3 @@\n-unsigned int C2_MacroAssembler::string_inflate(Register src, Register dst, Register cnt, Register tmp) {\n+unsigned int C2_MacroAssembler::string_inflate(Register src, Register dst, Register cnt, Register tmp,\n+                                               VectorRegister v20, VectorRegister v21, VectorRegister v22,\n+                                               VectorRegister v23, VectorRegister v24, VectorRegister v25) {\n@@ -466,1 +458,0 @@\n-#if 0\n@@ -481,1 +472,1 @@\n-      z_vlm(Z_V20, Z_V21, 0, Rsrc);        \/\/ get next 32 characters (single-byte)\n+      z_vlm(v20, v21, 0, Rsrc);        \/\/ get next 32 characters (single-byte)\n@@ -484,5 +475,5 @@\n-      z_vuplhb(Z_V22, Z_V20);              \/\/ V2 <- (expand) V0(high)\n-      z_vupllb(Z_V23, Z_V20);              \/\/ V3 <- (expand) V0(low)\n-      z_vuplhb(Z_V24, Z_V21);              \/\/ V4 <- (expand) V1(high)\n-      z_vupllb(Z_V25, Z_V21);              \/\/ V5 <- (expand) V1(low)\n-      z_vstm(Z_V22, Z_V25, 0, Rdst);       \/\/ store next 32 bytes\n+      z_vuplhb(v22, v20);              \/\/ V2 <- (expand) V0(high)\n+      z_vupllb(v23, v20);              \/\/ V3 <- (expand) V0(low)\n+      z_vuplhb(v24, v21);              \/\/ V4 <- (expand) V1(high)\n+      z_vupllb(v25, v21);              \/\/ V5 <- (expand) V1(low)\n+      z_vstm(v22, v25, 0, Rdst);       \/\/ store next 32 bytes\n@@ -495,1 +486,0 @@\n-#endif\n@@ -614,1 +604,3 @@\n-unsigned int C2_MacroAssembler::string_inflate_const(Register src, Register dst, Register tmp, int len) {\n+unsigned int C2_MacroAssembler::string_inflate_const(Register src, Register dst, Register tmp, int len ,\n+                                                     VectorRegister v20, VectorRegister v21, VectorRegister v22,\n+                                                     VectorRegister v23, VectorRegister v24, VectorRegister v25) {\n@@ -630,1 +622,0 @@\n-#if 0\n@@ -641,6 +632,6 @@\n-      z_vlm(Z_V20, Z_V21, 0+src_off, Rsrc);  \/\/ get next 32 characters (single-byte)\n-      z_vuplhb(Z_V22, Z_V20);                \/\/ V2 <- (expand) V0(high)\n-      z_vupllb(Z_V23, Z_V20);                \/\/ V3 <- (expand) V0(low)\n-      z_vuplhb(Z_V24, Z_V21);                \/\/ V4 <- (expand) V1(high)\n-      z_vupllb(Z_V25, Z_V21);                \/\/ V5 <- (expand) V1(low)\n-      z_vstm(Z_V22, Z_V25, 0+dst_off, Rdst); \/\/ store next 32 bytes\n+      z_vlm(v20, v21, 0+src_off, Rsrc);  \/\/ get next 32 characters (single-byte)\n+      z_vuplhb(v22, v20);                \/\/ V2 <- (expand) V0(high)\n+      z_vupllb(v23, v20);                \/\/ V3 <- (expand) V0(low)\n+      z_vuplhb(v24, v21);                \/\/ V4 <- (expand) V1(high)\n+      z_vupllb(v25, v21);                \/\/ V5 <- (expand) V1(low)\n+      z_vstm(v22, v25, 0+dst_off, Rdst); \/\/ store next 32 bytes\n@@ -655,1 +646,1 @@\n-        z_vlm(Z_V20, Z_V21, 0, Rsrc);        \/\/ get next 32 characters (single-byte)\n+        z_vlm(v20, v21, 0, Rsrc);        \/\/ get next 32 characters (single-byte)\n@@ -658,5 +649,5 @@\n-        z_vuplhb(Z_V22, Z_V20);              \/\/ V2 <- (expand) V0(high)\n-        z_vupllb(Z_V23, Z_V20);              \/\/ V3 <- (expand) V0(low)\n-        z_vuplhb(Z_V24, Z_V21);              \/\/ V4 <- (expand) V1(high)\n-        z_vupllb(Z_V25, Z_V21);              \/\/ V5 <- (expand) V1(low)\n-        z_vstm(Z_V22, Z_V25, 0, Rdst);       \/\/ store next 32 bytes\n+        z_vuplhb(v22, v20);              \/\/ V2 <- (expand) V0(high)\n+        z_vupllb(v23, v20);              \/\/ V3 <- (expand) V0(low)\n+        z_vuplhb(v24, v21);              \/\/ V4 <- (expand) V1(high)\n+        z_vupllb(v25, v21);              \/\/ V5 <- (expand) V1(low)\n+        z_vstm(v22, v25, 0, Rdst);       \/\/ store next 32 bytes\n@@ -678,4 +669,4 @@\n-    z_vl(Z_V20, 0+src_off, Z_R0, Rsrc);    \/\/ get next 16 characters (single-byte)\n-    z_vuplhb(Z_V22, Z_V20);                \/\/ V2 <- (expand) V0(high)\n-    z_vupllb(Z_V23, Z_V20);                \/\/ V3 <- (expand) V0(low)\n-    z_vstm(Z_V22, Z_V23, 0+dst_off, Rdst); \/\/ store next 32 bytes\n+    z_vl(v20, 0+src_off, Z_R0, Rsrc);    \/\/ get next 16 characters (single-byte)\n+    z_vuplhb(v22, v20);                \/\/ V2 <- (expand) V0(high)\n+    z_vupllb(v23, v20);                \/\/ V3 <- (expand) V0(low)\n+    z_vstm(v22, v23, 0+dst_off, Rdst); \/\/ store next 32 bytes\n@@ -686,1 +677,0 @@\n-#endif\n","filename":"src\/hotspot\/cpu\/s390\/c2_MacroAssembler_s390.cpp","additions":37,"deletions":47,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -47,2 +47,4 @@\n-  unsigned int string_compress(Register result, Register src, Register dst, Register cnt,\n-                               Register tmp,    bool precise, bool toASCII);\n+  unsigned int string_compress(Register result, Register Rsrc, Register Rdst, Register Rcnt,\n+                               Register tmp, bool precise, bool toASCII, VectorRegister Vtmp1, VectorRegister Vtmp2,\n+                               VectorRegister Vmask, VectorRegister Vzero, VectorRegister Vsrc_first, VectorRegister v21,\n+                               VectorRegister v22, VectorRegister Vsrc_last);\n@@ -57,1 +59,2 @@\n-  unsigned int string_inflate(Register src, Register dst, Register cnt, Register tmp);\n+  unsigned int string_inflate(Register src, Register dst, Register cnt, Register tmp, VectorRegister v20, VectorRegister v21,\n+                              VectorRegister v22, VectorRegister v23, VectorRegister v24, VectorRegister v25);\n@@ -64,1 +67,2 @@\n-  unsigned int string_inflate_const(Register src, Register dst, Register tmp, int len);\n+  unsigned int string_inflate_const(Register src, Register dst, Register tmp, int len , VectorRegister v20, VectorRegister v21,\n+                                    VectorRegister v22, VectorRegister v23, VectorRegister v24, VectorRegister v25);\n","filename":"src\/hotspot\/cpu\/s390\/c2_MacroAssembler_s390.hpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -765,0 +765,50 @@\n+\/\/ class for vector register v16\n+reg_class z_vreg_16(\n+   Z_VR16, Z_VR16_H, Z_VR16_J, Z_VR16_K\n+);\n+\n+\/\/ class for vector register v17\n+reg_class z_vreg_17(\n+   Z_VR17, Z_VR17_H, Z_VR17_J, Z_VR17_K\n+);\n+\n+\/\/ class for vector register v18\n+reg_class z_vreg_18(\n+    Z_VR18, Z_VR18_H, Z_VR18_J, Z_VR18_K\n+);\n+\n+\/\/ class for vector register v19\n+reg_class z_vreg_19(\n+    Z_VR19, Z_VR19_H, Z_VR19_J, Z_VR19_K\n+);\n+\n+\/\/ class for vector register v20\n+reg_class z_vreg_20(\n+    Z_VR20, Z_VR20_H, Z_VR20_J, Z_VR20_K\n+);\n+\n+\/\/ class for vector register v21\n+reg_class z_vreg_21(\n+    Z_VR21, Z_VR21_H, Z_VR21_J, Z_VR21_K\n+);\n+\n+\/\/ class for vector register v22\n+reg_class z_vreg_22(\n+    Z_VR22, Z_VR22_H, Z_VR22_J, Z_VR22_K\n+);\n+\n+\/\/ class for vector register v23\n+reg_class z_vreg_23(\n+    Z_VR23, Z_VR23_H, Z_VR23_J, Z_VR23_K\n+);\n+\n+\/\/ class for vector register v24\n+reg_class z_vreg_24(\n+    Z_VR24, Z_VR24_H, Z_VR24_J, Z_VR24_K\n+);\n+\n+\/\/ class for vector register v25\n+reg_class z_vreg_25(\n+    Z_VR25, Z_VR25_H, Z_VR25_J, Z_VR25_K\n+);\n+\n@@ -2689,0 +2739,20 @@\n+  match(v16TempReg);\n+  match(v17TempReg);\n+  match(v18TempReg);\n+  match(v19TempReg);\n+  match(v20TempReg);\n+  match(v21TempReg);\n+  match(v22TempReg);\n+  match(v23TempReg);\n+  match(v24TempReg);\n+  match(v25TempReg);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+operand v16TempReg() %{\n+  constraint(ALLOC_IN_RC(z_vreg_16));\n+  match(VecX);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n@@ -2690,0 +2760,3 @@\n+operand v17TempReg() %{\n+  constraint(ALLOC_IN_RC(z_vreg_17));\n+  match(VecX);\n@@ -2694,0 +2767,55 @@\n+operand v18TempReg() %{\n+  constraint(ALLOC_IN_RC(z_vreg_18));\n+  match(VecX);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+operand v19TempReg() %{\n+  constraint(ALLOC_IN_RC(z_vreg_19));\n+  match(VecX);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+operand v20TempReg() %{\n+  constraint(ALLOC_IN_RC(z_vreg_20));\n+  match(VecX);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+operand v21TempReg() %{\n+  constraint(ALLOC_IN_RC(z_vreg_21));\n+  match(VecX);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+operand v22TempReg() %{\n+  constraint(ALLOC_IN_RC(z_vreg_22));\n+  match(VecX);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+operand v23TempReg() %{\n+  constraint(ALLOC_IN_RC(z_vreg_23));\n+  match(VecX);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+operand v24TempReg() %{\n+  constraint(ALLOC_IN_RC(z_vreg_24));\n+  match(VecX);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n+operand v25TempReg() %{\n+  constraint(ALLOC_IN_RC(z_vreg_25));\n+  match(VecX);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n@@ -10466,1 +10594,2 @@\n-instruct string_compress(iRegP src, iRegP dst, iRegI result, iRegI len, iRegI tmp, flagsReg cr) %{\n+instruct string_compress(iRegP src, iRegP dst, iRegI result, iRegI len, iRegI tmp, v16TempReg v16, v17TempReg v17, v18TempReg v18,\n+                         v19TempReg v19, v20TempReg v20, v21TempReg v21, v22TempReg v22, v23TempReg v23, flagsReg cr) %{\n@@ -10468,1 +10597,1 @@\n-  effect(TEMP_DEF result, TEMP tmp, KILL cr); \/\/ R0, R1 are killed, too.\n+  effect(TEMP_DEF result, TEMP tmp, TEMP v16, TEMP v17, TEMP v18, TEMP v19, TEMP v20, TEMP v21, TEMP v22, TEMP v23, KILL cr); \/\/ R0, R1 are killed, too.\n@@ -10473,1 +10602,3 @@\n-                       $tmp$$Register, true, false);\n+                       $tmp$$Register, true, false, $v16$$VectorRegister, $v17$$VectorRegister, $v18$$VectorRegister,\n+                     $v19$$VectorRegister, $v20$$VectorRegister, $v21$$VectorRegister, $v22$$VectorRegister,\n+                     $v23$$VectorRegister);\n@@ -10492,1 +10623,2 @@\n-instruct string_inflate(Universe dummy, iRegP src, iRegP dst, iRegI len, iRegI tmp, flagsReg cr) %{\n+instruct string_inflate(Universe dummy, iRegP src, iRegP dst, iRegI len, iRegI tmp, v20TempReg v20, v21TempReg v21, v22TempReg v22, v23TempReg v23,\n+                        v24TempReg v24, v25TempReg v25, flagsReg cr) %{\n@@ -10494,1 +10626,1 @@\n-  effect(TEMP tmp, KILL cr); \/\/ R0, R1 are killed, too.\n+  effect(TEMP tmp, TEMP v20, TEMP v21, TEMP v22, TEMP v23, TEMP v24, TEMP v25, KILL cr); \/\/ R0, R1 are killed, too.\n@@ -10498,1 +10630,3 @@\n-    __ string_inflate($src$$Register, $dst$$Register, $len$$Register, $tmp$$Register);\n+    __ string_inflate($src$$Register, $dst$$Register, $len$$Register, $tmp$$Register, $v20$$VectorRegister,\n+                      $v21$$VectorRegister, $v22$$VectorRegister, $v23$$VectorRegister, $v24$$VectorRegister,\n+                      $v25$$VectorRegister);\n@@ -10504,1 +10638,2 @@\n-instruct string_inflate_const(Universe dummy, iRegP src, iRegP dst, iRegI tmp, immI len, flagsReg cr) %{\n+instruct string_inflate_const(Universe dummy, iRegP src, iRegP dst, iRegI tmp, immI len, v20TempReg v20, v21TempReg v21, v22TempReg v22, v23TempReg v23,\n+                              v24TempReg v24, v25TempReg v25, flagsReg cr) %{\n@@ -10506,1 +10641,1 @@\n-  effect(TEMP tmp, KILL cr); \/\/ R0, R1 are killed, too.\n+  effect(TEMP tmp, TEMP v20, TEMP v21, TEMP v22, TEMP v23, TEMP v24, TEMP v25, KILL cr); \/\/ R0, R1 are killed, too.\n@@ -10510,1 +10645,3 @@\n-    __ string_inflate_const($src$$Register, $dst$$Register, $tmp$$Register, $len$$constant);\n+    __ string_inflate_const($src$$Register, $dst$$Register, $tmp$$Register, $len$$constant , $v20$$VectorRegister,\n+                            $v21$$VectorRegister, $v22$$VectorRegister, $v23$$VectorRegister, $v24$$VectorRegister,\n+                            $v25$$VectorRegister);\n@@ -10528,1 +10665,2 @@\n-instruct encode_iso_array(iRegP src, iRegP dst, iRegI result, iRegI len, iRegI tmp, flagsReg cr) %{\n+instruct encode_iso_array(iRegP src, iRegP dst, iRegI result, iRegI len, iRegI tmp, v16TempReg v16, v17TempReg v17, v18TempReg v18, v19TempReg v19, v20TempReg v20, v21TempReg v21,\n+\t\t\t v22TempReg v22, v23TempReg v23, flagsReg cr) %{\n@@ -10531,1 +10669,2 @@\n-  effect(TEMP_DEF result, TEMP tmp, KILL cr); \/\/ R0, R1 are killed, too.\n+  effect(TEMP_DEF result, TEMP tmp, TEMP v16, TEMP v17, TEMP v18, TEMP v19,\n+\t       TEMP v20, TEMP v21, TEMP v22, TEMP v23, KILL cr); \/\/ R0, R1 are killed, too.\n@@ -10536,1 +10675,3 @@\n-                       $tmp$$Register, true, false);\n+                       $tmp$$Register, true, false, $v16$$VectorRegister, $v17$$VectorRegister, $v18$$VectorRegister,\n+                     $v19$$VectorRegister, $v20$$VectorRegister, $v21$$VectorRegister, $v22$$VectorRegister,\n+                     $v23$$VectorRegister);\n@@ -10542,1 +10683,2 @@\n-instruct encode_ascii_array(iRegP src, iRegP dst, iRegI result, iRegI len, iRegI tmp, flagsReg cr) %{\n+instruct encode_ascii_array(iRegP src, iRegP dst, iRegI result, iRegI len, iRegI tmp, v16TempReg v16, v17TempReg v17, v18TempReg v18, v19TempReg v19, v20TempReg v20, v21TempReg v21,\n+\t\t\t v22TempReg v22, v23TempReg v23, flagsReg cr) %{\n@@ -10545,1 +10687,2 @@\n-  effect(TEMP_DEF result, TEMP tmp, KILL cr); \/\/ R0, R1 are killed, too.\n+  effect(TEMP_DEF result, TEMP tmp, TEMP v16, TEMP v17, TEMP v18, TEMP v19,\n+\t       TEMP v20, TEMP v21, TEMP v22, TEMP v23, KILL cr); \/\/ R0, R1 are killed, too.\n@@ -10550,1 +10693,3 @@\n-                       $tmp$$Register, true, true);\n+                       $tmp$$Register, true, true, $v16$$VectorRegister, $v17$$VectorRegister, $v18$$VectorRegister,\n+                     $v19$$VectorRegister, $v20$$VectorRegister, $v21$$VectorRegister, $v22$$VectorRegister,\n+                     $v23$$VectorRegister);\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":160,"deletions":15,"binary":false,"changes":175,"status":"modified"}]}