{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -188,2 +188,2 @@\n-     * <p> This method works in a similar manner to {@link Files#move move}\n-     * method when the {@link StandardCopyOption#ATOMIC_MOVE ATOMIC_MOVE} option\n+     * <p> This method works in a similar manner to {@link Files#move Files.move}\n+     * when the {@link StandardCopyOption#ATOMIC_MOVE ATOMIC_MOVE} option\n@@ -197,3 +197,4 @@\n-     * by the {@code targetdir} parameter. In all cases, if the target file\n-     * exists then it is implementation specific if it is replaced or this\n-     * method fails.\n+     * by the {@code targetdir} parameter, unless {@code targetdir} is\n+     * {@code null}, in which case it is located relative to the current\n+     * working directory. In all cases, if the target file exists then it is\n+     * implementation specific if it is replaced or this method fails.\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/SecureDirectoryStream.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -205,3 +205,1 @@\n-        if (dir == null)\n-            throw new NullPointerException();\n-        if (!(dir instanceof UnixSecureDirectoryStream))\n+        if (dir != null && !(dir instanceof UnixSecureDirectoryStream))\n@@ -210,0 +208,1 @@\n+        int todfd = that != null ? that.dfd : AT_FDCWD;\n@@ -214,1 +213,2 @@\n-            that.ds.readLock().lock();\n+            if (that != null)\n+                that.ds.readLock().lock();\n@@ -216,1 +216,1 @@\n-                if (!this.ds.isOpen() || !that.ds.isOpen())\n+                if (!this.ds.isOpen() || (that != null && !that.ds.isOpen()))\n@@ -219,1 +219,1 @@\n-                    renameat(this.dfd, from.asByteArray(), that.dfd, to.asByteArray());\n+                    renameat(this.dfd, from.asByteArray(), todfd, to.asByteArray());\n@@ -228,1 +228,2 @@\n-                that.ds.readLock().unlock();\n+                if (that != null)\n+                    that.ds.readLock().unlock();\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixSecureDirectoryStream.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -295,0 +295,24 @@\n+        \/\/ Test: move to cwd\n+        final String TEXT = \"Sous le pont Mirabeau coule la Seine\";\n+        Path file = Path.of(\"file\");\n+        Path filepath = dir.resolve(file);\n+        Path cwd = Path.of(System.getProperty(\"user.dir\"));\n+        Path result = cwd.resolve(file);\n+        Files.writeString(filepath, TEXT);\n+        try (DirectoryStream<Path> ds = Files.newDirectoryStream(dir);) {\n+            if (ds instanceof SecureDirectoryStream<Path> sds) {\n+                sds.move(file, null, file);\n+                if (!Files.exists(result))\n+                    throw new RuntimeException(result + \" does not exist\");\n+                if (!TEXT.equals(Files.readString(result)))\n+                    throw new RuntimeException(result + \" content incorrect\");\n+            } else {\n+                throw new RuntimeException(\"Not a SecureDirectoryStream\");\n+            }\n+            System.out.println(\"Success: \\\"\" + TEXT + \"\\\"\");\n+        } finally {\n+            boolean fileDeleted = Files.deleteIfExists(filepath);\n+            if (!fileDeleted)\n+                Files.deleteIfExists(result);\n+        }\n+\n@@ -337,4 +361,0 @@\n-        try {\n-            stream.move(file, null, file);\n-            shouldNotGetHere();\n-        } catch (NullPointerException x) { }\n","filename":"test\/jdk\/java\/nio\/file\/DirectoryStream\/SecureDS.java","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"}]}