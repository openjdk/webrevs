{"files":[{"patch":"@@ -476,0 +476,5 @@\n+                } else if (token.equals(\"import\")) {\n+                    nextIdentifier(parser);\n+                    skipTokenOrThrow(parser, \";\", \"missing semicolon\");\n+                } else if (token.startsWith(\"@\")) {\n+                    continue;\n","filename":"make\/jdk\/src\/classes\/build\/tools\/module\/GenModuleInfoSource.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-    jdk\/internal\/classfile\/snippet-files \\\n-    jdk\/internal\/classfile\/components\/snippet-files\n+    java\/lang\/classfile\/snippet-files \\\n+    java\/lang\/classfile\/components\/snippet-files\n","filename":"make\/modules\/java.base\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,5 +101,0 @@\n-        --add-exports java.base\/jdk.internal.classfile=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED \\\n-        --add-exports java.base\/jdk.internal.classfile.components=ALL-UNNAMED \\\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,7 +55,7 @@\n-import jdk.internal.classfile.AccessFlags;\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.AccessFlags;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n@@ -1594,1 +1594,1 @@\n-        var cc = Classfile.of(Classfile.ConstantPoolSharingOption.NEW_POOL);\n+        var cc = ClassFile.of(ClassFile.ConstantPoolSharingOption.NEW_POOL);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -30,0 +30,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -35,0 +36,2 @@\n+ *\n+ * @since 22\n@@ -36,0 +39,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AccessFlags.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AccessFlags.java","status":"renamed"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AnnotationImpl;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.List;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an annotation on a declaration.\n+ *\n+ * @see AnnotationElement\n+ * @see AnnotationValue\n+ * @see RuntimeVisibleAnnotationsAttribute\n+ * @see RuntimeInvisibleAnnotationsAttribute\n+ * @see RuntimeVisibleParameterAnnotationsAttribute\n+ * @see RuntimeInvisibleParameterAnnotationsAttribute\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface Annotation\n+        extends WritableElement<Annotation>\n+        permits TypeAnnotation, AnnotationImpl {\n+\n+    \/**\n+     * {@return the class of the annotation}\n+     *\/\n+    Utf8Entry className();\n+\n+    \/**\n+     * {@return the class of the annotation, as a symbolic descriptor}\n+     *\/\n+    default ClassDesc classSymbol() {\n+        return ClassDesc.ofDescriptor(className().stringValue());\n+    }\n+\n+    \/**\n+     * {@return the elements of the annotation}\n+     *\/\n+    List<AnnotationElement> elements();\n+\n+    \/**\n+     * {@return an annotation}\n+     * @param annotationClass the class of the annotation\n+     * @param elements the elements of the annotation\n+     *\/\n+    static Annotation of(Utf8Entry annotationClass,\n+                         List<AnnotationElement> elements) {\n+        return new AnnotationImpl(annotationClass, elements);\n+    }\n+\n+    \/**\n+     * {@return an annotation}\n+     * @param annotationClass the class of the annotation\n+     * @param elements the elements of the annotation\n+     *\/\n+    static Annotation of(Utf8Entry annotationClass,\n+                         AnnotationElement... elements) {\n+        return of(annotationClass, List.of(elements));\n+    }\n+\n+    \/**\n+     * {@return an annotation}\n+     * @param annotationClass the class of the annotation\n+     * @param elements the elements of the annotation\n+     *\/\n+    static Annotation of(ClassDesc annotationClass,\n+                         List<AnnotationElement> elements) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), elements);\n+    }\n+\n+    \/**\n+     * {@return an annotation}\n+     * @param annotationClass the class of the annotation\n+     * @param elements the elements of the annotation\n+     *\/\n+    static Annotation of(ClassDesc annotationClass,\n+                         AnnotationElement... elements) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), elements);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Annotation.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -29,1 +29,1 @@\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -32,0 +32,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -38,0 +39,2 @@\n+ *\n+ * @since 22\n@@ -39,0 +42,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationElement.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AnnotationElement.java","status":"renamed"},{"patch":"@@ -0,0 +1,545 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.classfile.constantpool.AnnotationConstantValueEntry;\n+import java.lang.classfile.constantpool.DoubleEntry;\n+import java.lang.classfile.constantpool.FloatEntry;\n+import java.lang.classfile.constantpool.IntegerEntry;\n+import java.lang.classfile.constantpool.LongEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AnnotationImpl;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDesc;\n+import java.util.ArrayList;\n+import java.util.List;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the value of a key-value pair of an annotation.\n+ *\n+ * @see Annotation\n+ * @see AnnotationElement\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface AnnotationValue extends WritableElement<AnnotationValue>\n+        permits AnnotationValue.OfAnnotation, AnnotationValue.OfArray,\n+                AnnotationValue.OfConstant, AnnotationValue.OfClass,\n+                AnnotationValue.OfEnum {\n+\n+    \/**\n+     * Models an annotation-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfAnnotation extends AnnotationValue\n+            permits AnnotationImpl.OfAnnotationImpl {\n+        \/** {@return the annotation} *\/\n+        Annotation annotation();\n+    }\n+\n+    \/**\n+     * Models an array-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfArray extends AnnotationValue\n+            permits AnnotationImpl.OfArrayImpl {\n+        \/** {@return the values} *\/\n+        List<AnnotationValue> values();\n+    }\n+\n+    \/**\n+     * Models a constant-valued element\n+     *\n+     * @sealedGraph\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfConstant extends AnnotationValue\n+            permits AnnotationValue.OfString, AnnotationValue.OfDouble,\n+                    AnnotationValue.OfFloat, AnnotationValue.OfLong,\n+                    AnnotationValue.OfInteger, AnnotationValue.OfShort,\n+                    AnnotationValue.OfCharacter, AnnotationValue.OfByte,\n+                    AnnotationValue.OfBoolean, AnnotationImpl.OfConstantImpl {\n+        \/** {@return the constant} *\/\n+        AnnotationConstantValueEntry constant();\n+        \/** {@return the constant} *\/\n+        ConstantDesc constantValue();\n+    }\n+\n+    \/**\n+     * Models a constant-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfString extends AnnotationValue.OfConstant\n+            permits AnnotationImpl.OfStringImpl {\n+        \/** {@return the constant} *\/\n+        String stringValue();\n+    }\n+\n+    \/**\n+     * Models a constant-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfDouble extends AnnotationValue.OfConstant\n+            permits AnnotationImpl.OfDoubleImpl {\n+        \/** {@return the constant} *\/\n+        double doubleValue();\n+    }\n+\n+    \/**\n+     * Models a constant-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfFloat extends AnnotationValue.OfConstant\n+            permits AnnotationImpl.OfFloatImpl {\n+        \/** {@return the constant} *\/\n+        float floatValue();\n+    }\n+\n+    \/**\n+     * Models a constant-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfLong extends AnnotationValue.OfConstant\n+            permits AnnotationImpl.OfLongImpl {\n+        \/** {@return the constant} *\/\n+        long longValue();\n+    }\n+\n+    \/**\n+     * Models a constant-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfInteger extends AnnotationValue.OfConstant\n+            permits AnnotationImpl.OfIntegerImpl {\n+        \/** {@return the constant} *\/\n+        int intValue();\n+    }\n+\n+    \/**\n+     * Models a constant-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfShort extends AnnotationValue.OfConstant\n+            permits AnnotationImpl.OfShortImpl {\n+        \/** {@return the constant} *\/\n+        short shortValue();\n+    }\n+\n+    \/**\n+     * Models a constant-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfCharacter extends AnnotationValue.OfConstant\n+            permits AnnotationImpl.OfCharacterImpl {\n+        \/** {@return the constant} *\/\n+        char charValue();\n+    }\n+\n+    \/**\n+     * Models a constant-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfByte extends AnnotationValue.OfConstant\n+            permits AnnotationImpl.OfByteImpl {\n+        \/** {@return the constant} *\/\n+        byte byteValue();\n+    }\n+\n+    \/**\n+     * Models a constant-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfBoolean extends AnnotationValue.OfConstant\n+            permits AnnotationImpl.OfBooleanImpl {\n+        \/** {@return the constant} *\/\n+        boolean booleanValue();\n+    }\n+\n+    \/**\n+     * Models a class-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfClass extends AnnotationValue\n+            permits AnnotationImpl.OfClassImpl {\n+        \/** {@return the class name} *\/\n+        Utf8Entry className();\n+\n+        \/** {@return the class symbol} *\/\n+        default ClassDesc classSymbol() {\n+            return ClassDesc.ofDescriptor(className().stringValue());\n+        }\n+    }\n+\n+    \/**\n+     * Models an enum-valued element\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OfEnum extends AnnotationValue\n+            permits AnnotationImpl.OfEnumImpl {\n+        \/** {@return the enum class name} *\/\n+        Utf8Entry className();\n+\n+        \/** {@return the enum class symbol} *\/\n+        default ClassDesc classSymbol() {\n+            return ClassDesc.ofDescriptor(className().stringValue());\n+        }\n+\n+        \/** {@return the enum constant name} *\/\n+        Utf8Entry constantName();\n+    }\n+\n+    \/**\n+     * {@return the tag character for this type as per {@jvms 4.7.16.1}}\n+     *\/\n+    char tag();\n+\n+    \/**\n+     * {@return an annotation element for a enum-valued element}\n+     * @param className the name of the enum class\n+     * @param constantName the name of the enum constant\n+     *\/\n+    static OfEnum ofEnum(Utf8Entry className,\n+                         Utf8Entry constantName) {\n+        return new AnnotationImpl.OfEnumImpl(className, constantName);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a enum-valued element}\n+     * @param className the name of the enum class\n+     * @param constantName the name of the enum constant\n+     *\/\n+    static OfEnum ofEnum(ClassDesc className, String constantName) {\n+        return ofEnum(TemporaryConstantPool.INSTANCE.utf8Entry(className.descriptorString()),\n+                      TemporaryConstantPool.INSTANCE.utf8Entry(constantName));\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a class-valued element}\n+     * @param className the name of the enum class\n+     *\/\n+    static OfClass ofClass(Utf8Entry className) {\n+        return new AnnotationImpl.OfClassImpl(className);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a class-valued element}\n+     * @param className the name of the enum class\n+     *\/\n+    static OfClass ofClass(ClassDesc className) {\n+        return ofClass(TemporaryConstantPool.INSTANCE.utf8Entry(className.descriptorString()));\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a string-valued element}\n+     * @param value the string\n+     *\/\n+    static OfConstant ofString(Utf8Entry value) {\n+        return new AnnotationImpl.OfStringImpl(value);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a string-valued element}\n+     * @param value the string\n+     *\/\n+    static OfConstant ofString(String value) {\n+        return ofString(TemporaryConstantPool.INSTANCE.utf8Entry(value));\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a double-valued element}\n+     * @param value the double value\n+     *\/\n+    static OfConstant ofDouble(DoubleEntry value) {\n+        return new AnnotationImpl.OfDoubleImpl(value);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a double-valued element}\n+     * @param value the double value\n+     *\/\n+    static OfConstant ofDouble(double value) {\n+        return ofDouble(TemporaryConstantPool.INSTANCE.doubleEntry(value));\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a float-valued element}\n+     * @param value the float value\n+     *\/\n+    static OfConstant ofFloat(FloatEntry value) {\n+        return new AnnotationImpl.OfFloatImpl(value);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a float-valued element}\n+     * @param value the float value\n+     *\/\n+    static OfConstant ofFloat(float value) {\n+        return ofFloat(TemporaryConstantPool.INSTANCE.floatEntry(value));\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a long-valued element}\n+     * @param value the long value\n+     *\/\n+    static OfConstant ofLong(LongEntry value) {\n+        return new AnnotationImpl.OfLongImpl(value);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a long-valued element}\n+     * @param value the long value\n+     *\/\n+    static OfConstant ofLong(long value) {\n+        return ofLong(TemporaryConstantPool.INSTANCE.longEntry(value));\n+    }\n+\n+    \/**\n+     * {@return an annotation element for an int-valued element}\n+     * @param value the int value\n+     *\/\n+    static OfConstant ofInt(IntegerEntry value) {\n+        return new AnnotationImpl.OfIntegerImpl(value);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for an int-valued element}\n+     * @param value the int value\n+     *\/\n+    static OfConstant ofInt(int value) {\n+        return ofInt(TemporaryConstantPool.INSTANCE.intEntry(value));\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a short-valued element}\n+     * @param value the short value\n+     *\/\n+    static OfConstant ofShort(IntegerEntry value) {\n+        return new AnnotationImpl.OfShortImpl(value);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a short-valued element}\n+     * @param value the short value\n+     *\/\n+    static OfConstant ofShort(short value) {\n+        return ofShort(TemporaryConstantPool.INSTANCE.intEntry(value));\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a char-valued element}\n+     * @param value the char value\n+     *\/\n+    static OfConstant ofChar(IntegerEntry value) {\n+        return new AnnotationImpl.OfCharacterImpl(value);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a char-valued element}\n+     * @param value the char value\n+     *\/\n+    static OfConstant ofChar(char value) {\n+        return ofChar(TemporaryConstantPool.INSTANCE.intEntry(value));\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a byte-valued element}\n+     * @param value the byte value\n+     *\/\n+    static OfConstant ofByte(IntegerEntry value) {\n+        return new AnnotationImpl.OfByteImpl(value);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a byte-valued element}\n+     * @param value the byte value\n+     *\/\n+    static OfConstant ofByte(byte value) {\n+        return ofByte(TemporaryConstantPool.INSTANCE.intEntry(value));\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a boolean-valued element}\n+     * @param value the boolean value\n+     *\/\n+    static OfConstant ofBoolean(IntegerEntry value) {\n+        return new AnnotationImpl.OfBooleanImpl(value);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for a boolean-valued element}\n+     * @param value the boolean value\n+     *\/\n+    static OfConstant ofBoolean(boolean value) {\n+        int i = value ? 1 : 0;\n+        return ofBoolean(TemporaryConstantPool.INSTANCE.intEntry(i));\n+    }\n+\n+    \/**\n+     * {@return an annotation element for an annotation-valued element}\n+     * @param value the annotation\n+     *\/\n+    static OfAnnotation ofAnnotation(Annotation value) {\n+        return new AnnotationImpl.OfAnnotationImpl(value);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for an array-valued element}\n+     * @param values the values\n+     *\/\n+    static OfArray ofArray(List<AnnotationValue> values) {\n+        return new AnnotationImpl.OfArrayImpl(values);\n+    }\n+\n+    \/**\n+     * {@return an annotation element for an array-valued element}\n+     * @param values the values\n+     *\/\n+    static OfArray ofArray(AnnotationValue... values) {\n+        return ofArray(List.of(values));\n+    }\n+\n+    \/**\n+     * {@return an annotation element}  The {@code value} parameter must be\n+     * a primitive, a wrapper of primitive, a String, a ClassDesc, an enum\n+     * constant, or an array of one of these.\n+     *\n+     * @param value the annotation value\n+     * @throws IllegalArgumentException when the {@code value} parameter is not\n+     *         a primitive, a wrapper of primitive, a String, a ClassDesc,\n+     *         an enum constant, or an array of one of these.\n+     *\/\n+    static AnnotationValue of(Object value) {\n+        if (value instanceof String s) {\n+            return ofString(s);\n+        } else if (value instanceof Byte b) {\n+            return ofByte(b);\n+        } else if (value instanceof Boolean b) {\n+            return ofBoolean(b);\n+        } else if (value instanceof Short s) {\n+            return ofShort(s);\n+        } else if (value instanceof Character c) {\n+            return ofChar(c);\n+        } else if (value instanceof Integer i) {\n+            return ofInt(i);\n+        } else if (value instanceof Long l) {\n+            return ofLong(l);\n+        } else if (value instanceof Float f) {\n+            return ofFloat(f);\n+        } else if (value instanceof Double d) {\n+            return ofDouble(d);\n+        } else if (value instanceof ClassDesc clsDesc) {\n+            return ofClass(clsDesc);\n+        } else if (value instanceof byte[] arr) {\n+            var els = new ArrayList<AnnotationValue>(arr.length);\n+            for (var el : arr) {\n+                els.add(ofByte(el));\n+            }\n+            return ofArray(els);\n+        } else if (value instanceof boolean[] arr) {\n+            var els = new ArrayList<AnnotationValue>(arr.length);\n+            for (var el : arr) {\n+                els.add(ofBoolean(el));\n+            }\n+            return ofArray(els);\n+        } else if (value instanceof short[] arr) {\n+            var els = new ArrayList<AnnotationValue>(arr.length);\n+            for (var el : arr) {\n+                els.add(ofShort(el));\n+            }\n+            return ofArray(els);\n+        } else if (value instanceof char[] arr) {\n+            var els = new ArrayList<AnnotationValue>(arr.length);\n+            for (var el : arr) {\n+                els.add(ofChar(el));\n+            }\n+            return ofArray(els);\n+        } else if (value instanceof int[] arr) {\n+            var els = new ArrayList<AnnotationValue>(arr.length);\n+            for (var el : arr) {\n+                els.add(ofInt(el));\n+            }\n+            return ofArray(els);\n+        } else if (value instanceof long[] arr) {\n+            var els = new ArrayList<AnnotationValue>(arr.length);\n+            for (var el : arr) {\n+                els.add(ofLong(el));\n+            }\n+            return ofArray(els);\n+        } else if (value instanceof float[] arr) {\n+            var els = new ArrayList<AnnotationValue>(arr.length);\n+            for (var el : arr) {\n+                els.add(ofFloat(el));\n+            }\n+            return ofArray(els);\n+        } else if (value instanceof double[] arr) {\n+            var els = new ArrayList<AnnotationValue>(arr.length);\n+            for (var el : arr) {\n+                els.add(ofDouble(el));\n+            }\n+            return ofArray(els);\n+        } else if (value instanceof Object[] arr) {\n+            var els = new ArrayList<AnnotationValue>(arr.length);\n+            for (var el : arr) {\n+                els.add(of(el));\n+            }\n+            return ofArray(els);\n+        } else if (value instanceof Enum<?> e) {\n+            return ofEnum(ClassDesc.ofDescriptor(e.getDeclaringClass().descriptorString()), e.name());\n+        }\n+        throw new IllegalArgumentException(\"Illegal annotation constant value type \" + (value == null ? null : value.getClass()));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":545,"deletions":0,"binary":false,"changes":545,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.classfile.attribute.AnnotationDefaultAttribute;\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n+import java.lang.classfile.attribute.CharacterRangeTableAttribute;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.CompilationIDAttribute;\n+import java.lang.classfile.attribute.ConstantValueAttribute;\n+import java.lang.classfile.attribute.DeprecatedAttribute;\n+import java.lang.classfile.attribute.EnclosingMethodAttribute;\n+import java.lang.classfile.attribute.ExceptionsAttribute;\n+import java.lang.classfile.attribute.InnerClassesAttribute;\n+import java.lang.classfile.attribute.LineNumberTableAttribute;\n+import java.lang.classfile.attribute.LocalVariableTableAttribute;\n+import java.lang.classfile.attribute.LocalVariableTypeTableAttribute;\n+import java.lang.classfile.attribute.MethodParametersAttribute;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.ModuleHashesAttribute;\n+import java.lang.classfile.attribute.ModuleMainClassAttribute;\n+import java.lang.classfile.attribute.ModulePackagesAttribute;\n+import java.lang.classfile.attribute.ModuleResolutionAttribute;\n+import java.lang.classfile.attribute.ModuleTargetAttribute;\n+import java.lang.classfile.attribute.NestHostAttribute;\n+import java.lang.classfile.attribute.NestMembersAttribute;\n+import java.lang.classfile.attribute.PermittedSubclassesAttribute;\n+import java.lang.classfile.attribute.RecordAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.attribute.SourceDebugExtensionAttribute;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.attribute.SourceIDAttribute;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n+import java.lang.classfile.attribute.SyntheticAttribute;\n+import java.lang.classfile.attribute.UnknownAttribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a classfile attribute {@jvms 4.7}.  Many, though not all, subtypes of\n+ * {@linkplain Attribute} will implement {@link ClassElement}, {@link\n+ * MethodElement}, {@link FieldElement}, or {@link CodeElement}; attributes that\n+ * are also elements will be delivered when traversing the elements of the\n+ * corresponding model type. Additionally, all attributes are accessible\n+ * directly from the corresponding model type through {@link\n+ * AttributedElement#findAttribute(AttributeMapper)}.\n+ * @param <A> the attribute type\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface Attribute<A extends Attribute<A>>\n+        extends WritableElement<A>\n+        permits AnnotationDefaultAttribute, BootstrapMethodsAttribute,\n+                CharacterRangeTableAttribute, CodeAttribute, CompilationIDAttribute,\n+                ConstantValueAttribute, DeprecatedAttribute, EnclosingMethodAttribute,\n+                ExceptionsAttribute, InnerClassesAttribute, LineNumberTableAttribute,\n+                LocalVariableTableAttribute, LocalVariableTypeTableAttribute,\n+                MethodParametersAttribute, ModuleAttribute, ModuleHashesAttribute,\n+                ModuleMainClassAttribute, ModulePackagesAttribute, ModuleResolutionAttribute,\n+                ModuleTargetAttribute, NestHostAttribute, NestMembersAttribute,\n+                PermittedSubclassesAttribute,\n+                RecordAttribute, RuntimeInvisibleAnnotationsAttribute,\n+                RuntimeInvisibleParameterAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n+                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleParameterAnnotationsAttribute,\n+                RuntimeVisibleTypeAnnotationsAttribute, SignatureAttribute,\n+                SourceDebugExtensionAttribute, SourceFileAttribute, SourceIDAttribute,\n+                StackMapTableAttribute, SyntheticAttribute,\n+                UnknownAttribute, BoundAttribute, UnboundAttribute, CustomAttribute {\n+    \/**\n+     * {@return the name of the attribute}\n+     *\/\n+    String attributeName();\n+\n+    \/**\n+     * {@return the {@link AttributeMapper} associated with this attribute}\n+     *\/\n+    AttributeMapper<A> attributeMapper();\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attribute.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -25,1 +25,3 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n+\n+import jdk.internal.javac.PreviewFeature;\n@@ -37,0 +39,2 @@\n+ *\n+ * @since 22\n@@ -38,0 +42,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -42,0 +47,2 @@\n+     *\n+     * @since 22\n@@ -43,0 +50,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -63,1 +71,1 @@\n-         * and so we consult the {@link Classfile.AttributesProcessingOption} option to determine whether to preserve\n+         * and so we consult the {@link ClassFile.AttributesProcessingOption} option to determine whether to preserve\n@@ -69,1 +77,1 @@\n-         * The attribute is completely unknown and so we consult the {@link Classfile.AttributesProcessingOption} option\n+         * The attribute is completely unknown and so we consult the {@link ClassFile.AttributesProcessingOption} option\n@@ -99,8 +107,0 @@\n-    \/**\n-     * {@return The earliest classfile version for which this attribute is\n-     * applicable}\n-     *\/\n-    default int validSince() {\n-        return Classfile.JAVA_1_VERSION;\n-    }\n-\n@@ -109,0 +109,2 @@\n+     *\n+     * @implSpec The default implementation returns {@code false}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AttributeMapper.java","additions":13,"deletions":11,"binary":false,"changes":24,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AttributeMapper.java","status":"renamed"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import java.lang.classfile.attribute.RecordComponentInfo;\n+import jdk.internal.classfile.impl.AbstractUnboundModel;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A {@link ClassFileElement} describing an entity that has attributes, such\n+ * as a class, field, method, code attribute, or record component.\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface AttributedElement extends ClassFileElement\n+        permits ClassModel, CodeModel, FieldModel, MethodModel,\n+                RecordComponentInfo, AbstractUnboundModel {\n+\n+    \/**\n+     * {@return the attributes of this element}\n+     *\/\n+    List<Attribute<?>> attributes();\n+\n+    \/**\n+     * Finds an attribute by name.\n+     * @param attr the attribute mapper\n+     * @param <T> the type of the attribute\n+     * @return the attribute, or an empty {@linkplain Optional} if the attribute\n+     * is not present\n+     *\/\n+    default <T extends Attribute<T>> Optional<T> findAttribute(AttributeMapper<T> attr) {\n+        for (Attribute<?> la : attributes()) {\n+            if (la.attributeMapper() == attr) {\n+                @SuppressWarnings(\"unchecked\")\n+                var res = Optional.of((T) la);\n+                return res;\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    \/**\n+     * Finds one or more attributes by name.\n+     * @param attr the attribute mapper\n+     * @param <T> the type of the attribute\n+     * @return the attributes, or an empty {@linkplain List} if the attribute\n+     * is not present\n+     *\/\n+    default <T extends Attribute<T>> List<T> findAttributes(AttributeMapper<T> attr) {\n+        var list = new ArrayList<T>();\n+        for (var a : attributes()) {\n+            if (a.attributeMapper() == attr) {\n+                @SuppressWarnings(\"unchecked\")\n+                T t = (T)a;\n+                list.add(t);\n+            }\n+        }\n+        return list;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AttributedElement.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -33,49 +33,49 @@\n-import jdk.internal.classfile.attribute.AnnotationDefaultAttribute;\n-import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.internal.classfile.attribute.CharacterRangeInfo;\n-import jdk.internal.classfile.attribute.CharacterRangeTableAttribute;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.attribute.CompilationIDAttribute;\n-import jdk.internal.classfile.attribute.ConstantValueAttribute;\n-import jdk.internal.classfile.attribute.DeprecatedAttribute;\n-import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n-import jdk.internal.classfile.attribute.ExceptionsAttribute;\n-import jdk.internal.classfile.attribute.InnerClassInfo;\n-import jdk.internal.classfile.attribute.InnerClassesAttribute;\n-import jdk.internal.classfile.attribute.LineNumberInfo;\n-import jdk.internal.classfile.attribute.LineNumberTableAttribute;\n-import jdk.internal.classfile.attribute.LocalVariableInfo;\n-import jdk.internal.classfile.attribute.LocalVariableTableAttribute;\n-import jdk.internal.classfile.attribute.LocalVariableTypeInfo;\n-import jdk.internal.classfile.attribute.LocalVariableTypeTableAttribute;\n-import jdk.internal.classfile.attribute.MethodParameterInfo;\n-import jdk.internal.classfile.attribute.MethodParametersAttribute;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.ModuleExportInfo;\n-import jdk.internal.classfile.attribute.ModuleHashInfo;\n-import jdk.internal.classfile.attribute.ModuleHashesAttribute;\n-import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.internal.classfile.attribute.ModuleOpenInfo;\n-import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n-import jdk.internal.classfile.attribute.ModuleProvideInfo;\n-import jdk.internal.classfile.attribute.ModuleRequireInfo;\n-import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n-import jdk.internal.classfile.attribute.ModuleTargetAttribute;\n-import jdk.internal.classfile.attribute.NestHostAttribute;\n-import jdk.internal.classfile.attribute.NestMembersAttribute;\n-import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n-import jdk.internal.classfile.attribute.RecordAttribute;\n-import jdk.internal.classfile.attribute.RecordComponentInfo;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.SignatureAttribute;\n-import jdk.internal.classfile.attribute.SourceDebugExtensionAttribute;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n-import jdk.internal.classfile.attribute.SourceIDAttribute;\n-import jdk.internal.classfile.attribute.StackMapTableAttribute;\n-import jdk.internal.classfile.attribute.SyntheticAttribute;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.attribute.AnnotationDefaultAttribute;\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n+import java.lang.classfile.attribute.CharacterRangeInfo;\n+import java.lang.classfile.attribute.CharacterRangeTableAttribute;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.CompilationIDAttribute;\n+import java.lang.classfile.attribute.ConstantValueAttribute;\n+import java.lang.classfile.attribute.DeprecatedAttribute;\n+import java.lang.classfile.attribute.EnclosingMethodAttribute;\n+import java.lang.classfile.attribute.ExceptionsAttribute;\n+import java.lang.classfile.attribute.InnerClassInfo;\n+import java.lang.classfile.attribute.InnerClassesAttribute;\n+import java.lang.classfile.attribute.LineNumberInfo;\n+import java.lang.classfile.attribute.LineNumberTableAttribute;\n+import java.lang.classfile.attribute.LocalVariableInfo;\n+import java.lang.classfile.attribute.LocalVariableTableAttribute;\n+import java.lang.classfile.attribute.LocalVariableTypeInfo;\n+import java.lang.classfile.attribute.LocalVariableTypeTableAttribute;\n+import java.lang.classfile.attribute.MethodParameterInfo;\n+import java.lang.classfile.attribute.MethodParametersAttribute;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.ModuleExportInfo;\n+import java.lang.classfile.attribute.ModuleHashInfo;\n+import java.lang.classfile.attribute.ModuleHashesAttribute;\n+import java.lang.classfile.attribute.ModuleMainClassAttribute;\n+import java.lang.classfile.attribute.ModuleOpenInfo;\n+import java.lang.classfile.attribute.ModulePackagesAttribute;\n+import java.lang.classfile.attribute.ModuleProvideInfo;\n+import java.lang.classfile.attribute.ModuleRequireInfo;\n+import java.lang.classfile.attribute.ModuleResolutionAttribute;\n+import java.lang.classfile.attribute.ModuleTargetAttribute;\n+import java.lang.classfile.attribute.NestHostAttribute;\n+import java.lang.classfile.attribute.NestMembersAttribute;\n+import java.lang.classfile.attribute.PermittedSubclassesAttribute;\n+import java.lang.classfile.attribute.RecordAttribute;\n+import java.lang.classfile.attribute.RecordComponentInfo;\n+import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.attribute.SourceDebugExtensionAttribute;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.attribute.SourceIDAttribute;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n+import java.lang.classfile.attribute.SyntheticAttribute;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -87,0 +87,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -92,0 +93,2 @@\n+ *\n+ * @since 22\n@@ -93,0 +96,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -170,1 +174,1 @@\n-    \/** RuntimeInvisibleTypeAnnotations *\/\n+    \/** RuntimeInvisibleParameterAnnotations *\/\n@@ -173,1 +177,1 @@\n-    \/**  *\/\n+    \/** RuntimeInvisibleTypeAnnotations *\/\n@@ -208,1 +212,1 @@\n-            ANNOTATION_DEFAULT = new AbstractAttributeMapper<>(NAME_ANNOTATION_DEFAULT, Classfile.JAVA_5_VERSION) {\n+            ANNOTATION_DEFAULT = new AbstractAttributeMapper<>(NAME_ANNOTATION_DEFAULT) {\n@@ -227,1 +231,1 @@\n-            BOOTSTRAP_METHODS = new AbstractAttributeMapper<>(NAME_BOOTSTRAP_METHODS, Classfile.JAVA_17_VERSION) {\n+            BOOTSTRAP_METHODS = new AbstractAttributeMapper<>(NAME_BOOTSTRAP_METHODS) {\n@@ -246,1 +250,1 @@\n-            CHARACTER_RANGE_TABLE = new AbstractAttributeMapper<>(NAME_CHARACTER_RANGE_TABLE, true, Classfile.JAVA_4_VERSION) {\n+            CHARACTER_RANGE_TABLE = new AbstractAttributeMapper<>(NAME_CHARACTER_RANGE_TABLE, true) {\n@@ -350,1 +354,1 @@\n-            ENCLOSING_METHOD = new AbstractAttributeMapper<>(NAME_ENCLOSING_METHOD, Classfile.JAVA_5_VERSION) {\n+            ENCLOSING_METHOD = new AbstractAttributeMapper<>(NAME_ENCLOSING_METHOD) {\n@@ -466,1 +470,1 @@\n-            LOCAL_VARIABLE_TYPE_TABLE = new AbstractAttributeMapper<>(NAME_LOCAL_VARIABLE_TYPE_TABLE, true, Classfile.JAVA_5_VERSION) {\n+            LOCAL_VARIABLE_TYPE_TABLE = new AbstractAttributeMapper<>(NAME_LOCAL_VARIABLE_TYPE_TABLE, true) {\n@@ -493,1 +497,1 @@\n-            METHOD_PARAMETERS = new AbstractAttributeMapper<>(NAME_METHOD_PARAMETERS, Classfile.JAVA_8_VERSION) {\n+            METHOD_PARAMETERS = new AbstractAttributeMapper<>(NAME_METHOD_PARAMETERS) {\n@@ -517,1 +521,1 @@\n-            MODULE = new AbstractAttributeMapper<>(NAME_MODULE, Classfile.JAVA_9_VERSION) {\n+            MODULE = new AbstractAttributeMapper<>(NAME_MODULE) {\n@@ -562,1 +566,1 @@\n-            MODULE_HASHES = new AbstractAttributeMapper<>(NAME_MODULE_HASHES, Classfile.JAVA_9_VERSION) {\n+            MODULE_HASHES = new AbstractAttributeMapper<>(NAME_MODULE_HASHES) {\n@@ -588,1 +592,1 @@\n-            MODULE_MAIN_CLASS = new AbstractAttributeMapper<>(NAME_MODULE_MAIN_CLASS, Classfile.JAVA_9_VERSION) {\n+            MODULE_MAIN_CLASS = new AbstractAttributeMapper<>(NAME_MODULE_MAIN_CLASS) {\n@@ -607,1 +611,1 @@\n-            MODULE_PACKAGES = new AbstractAttributeMapper<>(NAME_MODULE_PACKAGES, Classfile.JAVA_9_VERSION) {\n+            MODULE_PACKAGES = new AbstractAttributeMapper<>(NAME_MODULE_PACKAGES) {\n@@ -626,1 +630,1 @@\n-            MODULE_RESOLUTION = new AbstractAttributeMapper<>(NAME_MODULE_RESOLUTION, Classfile.JAVA_9_VERSION) {\n+            MODULE_RESOLUTION = new AbstractAttributeMapper<>(NAME_MODULE_RESOLUTION) {\n@@ -645,1 +649,1 @@\n-            MODULE_TARGET = new AbstractAttributeMapper<>(NAME_MODULE_TARGET, Classfile.JAVA_9_VERSION) {\n+            MODULE_TARGET = new AbstractAttributeMapper<>(NAME_MODULE_TARGET) {\n@@ -664,1 +668,1 @@\n-            NEST_HOST = new AbstractAttributeMapper<>(NAME_NEST_HOST, Classfile.JAVA_11_VERSION) {\n+            NEST_HOST = new AbstractAttributeMapper<>(NAME_NEST_HOST) {\n@@ -683,1 +687,1 @@\n-            NEST_MEMBERS = new AbstractAttributeMapper<>(NAME_NEST_MEMBERS, Classfile.JAVA_11_VERSION) {\n+            NEST_MEMBERS = new AbstractAttributeMapper<>(NAME_NEST_MEMBERS) {\n@@ -702,1 +706,1 @@\n-            PERMITTED_SUBCLASSES = new AbstractAttributeMapper<>(NAME_PERMITTED_SUBCLASSES, Classfile.JAVA_15_VERSION) {\n+            PERMITTED_SUBCLASSES = new AbstractAttributeMapper<>(NAME_PERMITTED_SUBCLASSES) {\n@@ -721,1 +725,1 @@\n-            RECORD = new AbstractAttributeMapper<>(NAME_RECORD, Classfile.JAVA_16_VERSION) {\n+            RECORD = new AbstractAttributeMapper<>(NAME_RECORD) {\n@@ -746,1 +750,1 @@\n-            RUNTIME_INVISIBLE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_ANNOTATIONS, Classfile.JAVA_5_VERSION) {\n+            RUNTIME_INVISIBLE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_ANNOTATIONS) {\n@@ -765,1 +769,1 @@\n-            RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS, Classfile.JAVA_5_VERSION) {\n+            RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS) {\n@@ -787,1 +791,1 @@\n-            RUNTIME_INVISIBLE_TYPE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, Classfile.JAVA_8_VERSION) {\n+            RUNTIME_INVISIBLE_TYPE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS) {\n@@ -806,1 +810,1 @@\n-            RUNTIME_VISIBLE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_ANNOTATIONS, Classfile.JAVA_5_VERSION) {\n+            RUNTIME_VISIBLE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_ANNOTATIONS) {\n@@ -825,1 +829,1 @@\n-            RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS, Classfile.JAVA_5_VERSION) {\n+            RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS) {\n@@ -847,1 +851,1 @@\n-            RUNTIME_VISIBLE_TYPE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_TYPE_ANNOTATIONS, Classfile.JAVA_8_VERSION) {\n+            RUNTIME_VISIBLE_TYPE_ANNOTATIONS = new AbstractAttributeMapper<>(NAME_RUNTIME_VISIBLE_TYPE_ANNOTATIONS) {\n@@ -866,1 +870,1 @@\n-            SIGNATURE = new AbstractAttributeMapper<>(NAME_SIGNATURE, Classfile.JAVA_5_VERSION) {\n+            SIGNATURE = new AbstractAttributeMapper<>(NAME_SIGNATURE) {\n@@ -885,1 +889,1 @@\n-            SOURCE_DEBUG_EXTENSION = new AbstractAttributeMapper<>(NAME_SOURCE_DEBUG_EXTENSION, Classfile.JAVA_5_VERSION) {\n+            SOURCE_DEBUG_EXTENSION = new AbstractAttributeMapper<>(NAME_SOURCE_DEBUG_EXTENSION) {\n@@ -942,1 +946,1 @@\n-            STACK_MAP_TABLE = new AbstractAttributeMapper<>(NAME_STACK_MAP_TABLE, Classfile.JAVA_6_VERSION) {\n+            STACK_MAP_TABLE = new AbstractAttributeMapper<>(NAME_STACK_MAP_TABLE) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Attributes.java","additions":81,"deletions":77,"binary":false,"changes":158,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attributes.java","status":"renamed"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.LoadableConstantEntry;\n+import java.lang.classfile.constantpool.MethodHandleEntry;\n+import jdk.internal.classfile.impl.BootstrapMethodEntryImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an entry in the bootstrap method table.  The bootstrap method table\n+ * is stored in the {@code BootstrapMethods} attribute, but is modeled by\n+ * the {@link ConstantPool}, since the bootstrap method table is logically\n+ * part of the constant pool.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface BootstrapMethodEntry\n+        extends WritableElement<BootstrapMethodEntry>\n+        permits BootstrapMethodEntryImpl {\n+\n+    \/**\n+     * {@return the constant pool associated with this entry}\n+     *\/\n+    ConstantPool constantPool();\n+\n+    \/**\n+     * {@return the index into the bootstrap method table corresponding to this entry}\n+     *\/\n+    int bsmIndex();\n+\n+    \/**\n+     * {@return the bootstrap method}\n+     *\/\n+    MethodHandleEntry bootstrapMethod();\n+\n+    \/**\n+     * {@return the bootstrap arguments}\n+     *\/\n+    List<LoadableConstantEntry> arguments();\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/BootstrapMethodEntry.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -30,3 +30,3 @@\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -34,0 +34,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -36,1 +37,1 @@\n- * Supports writing portions of a classfile to a growable buffer.   Method\n+ * Supports writing portions of a classfile to a growable buffer.   Methods\n@@ -39,0 +40,2 @@\n+ *\n+ * @since 22\n@@ -40,0 +43,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/BufWriter.java","additions":9,"deletions":5,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/BufWriter.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -36,2 +36,2 @@\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -42,1 +42,2 @@\n-import jdk.internal.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import jdk.internal.javac.PreviewFeature;\n@@ -46,1 +47,1 @@\n- * to handlers by methods such as {@link Classfile#build(ClassDesc, Consumer)}\n+ * to handlers by methods such as {@link ClassFile#build(ClassDesc, Consumer)}\n@@ -48,1 +49,1 @@\n- * abstractly (by passing a {@link ClassElement} to {@link #with(ClassfileElement)})\n+ * abstractly (by passing a {@link ClassElement} to {@link #with(ClassFileElement)})\n@@ -52,0 +53,2 @@\n+ *\n+ * @since 22\n@@ -53,0 +56,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -54,1 +58,1 @@\n-        extends ClassfileBuilder<ClassElement, ClassBuilder>\n+        extends ClassFileBuilder<ClassElement, ClassBuilder>\n@@ -70,1 +74,1 @@\n-        return with(ClassfileVersion.of(major, minor));\n+        return with(ClassFileVersion.of(major, minor));\n@@ -104,0 +108,1 @@\n+     * @throws IllegalArgumentException if {@code desc} represents a primitive type\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassBuilder.java","additions":13,"deletions":8,"binary":false,"changes":21,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassBuilder.java","status":"renamed"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.classfile.attribute.CompilationIDAttribute;\n+import java.lang.classfile.attribute.DeprecatedAttribute;\n+import java.lang.classfile.attribute.EnclosingMethodAttribute;\n+import java.lang.classfile.attribute.InnerClassesAttribute;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.ModuleHashesAttribute;\n+import java.lang.classfile.attribute.ModuleMainClassAttribute;\n+import java.lang.classfile.attribute.ModulePackagesAttribute;\n+import java.lang.classfile.attribute.ModuleResolutionAttribute;\n+import java.lang.classfile.attribute.ModuleTargetAttribute;\n+import java.lang.classfile.attribute.NestHostAttribute;\n+import java.lang.classfile.attribute.NestMembersAttribute;\n+import java.lang.classfile.attribute.PermittedSubclassesAttribute;\n+import java.lang.classfile.attribute.RecordAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.attribute.SourceDebugExtensionAttribute;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.attribute.SourceIDAttribute;\n+import java.lang.classfile.attribute.SyntheticAttribute;\n+import java.lang.classfile.attribute.UnknownAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A marker interface for elements that can appear when traversing\n+ * a {@link ClassModel} or be presented to a {@link ClassBuilder}.\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ClassElement extends ClassFileElement\n+        permits AccessFlags, Superclass, Interfaces, ClassFileVersion,\n+                FieldModel, MethodModel,\n+                CustomAttribute, CompilationIDAttribute, DeprecatedAttribute,\n+                EnclosingMethodAttribute, InnerClassesAttribute,\n+                ModuleAttribute, ModuleHashesAttribute, ModuleMainClassAttribute,\n+                ModulePackagesAttribute, ModuleResolutionAttribute, ModuleTargetAttribute,\n+                NestHostAttribute, NestMembersAttribute, PermittedSubclassesAttribute,\n+                RecordAttribute,\n+                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n+                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n+                SignatureAttribute, SourceDebugExtensionAttribute,\n+                SourceFileAttribute, SourceIDAttribute, SyntheticAttribute, UnknownAttribute {\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassElement.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,1471 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.io.IOException;\n+import java.lang.constant.ClassDesc;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.UnknownAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.ClassFileImpl;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import java.lang.reflect.AccessFlag;\n+import java.lang.classfile.attribute.CharacterRangeInfo;\n+import java.lang.classfile.attribute.LocalVariableInfo;\n+import java.lang.classfile.attribute.LocalVariableTypeInfo;\n+import java.lang.classfile.instruction.ExceptionCatch;\n+import static java.util.Objects.requireNonNull;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Represents a context for parsing, transforming, and generating classfiles.\n+ * A {@code ClassFile} has a set of options that condition how parsing and\n+ * generation is done.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ClassFile\n+        permits ClassFileImpl {\n+\n+    \/**\n+     * {@return a context with default options}\n+     *\/\n+    static ClassFile of() {\n+        return ClassFileImpl.DEFAULT_CONTEXT;\n+    }\n+\n+    \/**\n+     * {@return a new context with options altered from the default}\n+     * @param options the desired processing options\n+     *\/\n+    static ClassFile of(Option... options) {\n+        return of().withOptions(options);\n+    }\n+\n+    \/**\n+     * {@return a copy of the context with altered options}\n+     * @param options the desired processing options\n+     *\/\n+    ClassFile withOptions(Option... options);\n+\n+    \/**\n+     * An option that affects the parsing and writing of classfiles.\n+     *\n+     * @sealedGraph\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface Option {\n+    }\n+\n+    \/**\n+     * Option describing attribute mappers for custom attributes.\n+     * Default is only to process standard attributes.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface AttributeMapperOption extends Option\n+            permits ClassFileImpl.AttributeMapperOptionImpl {\n+\n+        \/**\n+         * {@return an option describing attribute mappers for custom attributes}\n+         * @param attributeMapper a function mapping attribute names to attribute mappers\n+         *\/\n+        static AttributeMapperOption of(Function<Utf8Entry, AttributeMapper<?>> attributeMapper) {\n+            requireNonNull(attributeMapper);\n+            return new ClassFileImpl.AttributeMapperOptionImpl(attributeMapper);\n+        }\n+\n+        \/**\n+         * {@return the function mapping attribute names to attribute mappers}\n+         *\/\n+        Function<Utf8Entry, AttributeMapper<?>> attributeMapper();\n+    }\n+\n+    \/**\n+     * Option describing the class hierarchy resolver to use when generating\n+     * stack maps.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface ClassHierarchyResolverOption extends Option\n+            permits ClassFileImpl.ClassHierarchyResolverOptionImpl {\n+\n+        \/**\n+         * {@return an option describing the class hierarchy resolver to use when\n+         * generating stack maps}\n+         * @param classHierarchyResolver the resolver\n+         *\/\n+        static ClassHierarchyResolverOption of(ClassHierarchyResolver classHierarchyResolver) {\n+            requireNonNull(classHierarchyResolver);\n+            return new ClassFileImpl.ClassHierarchyResolverOptionImpl(classHierarchyResolver);\n+        }\n+\n+        \/**\n+         * {@return the class hierarchy resolver}\n+         *\/\n+        ClassHierarchyResolver classHierarchyResolver();\n+    }\n+\n+    \/**\n+     * Option describing whether to preserve the original constant pool when\n+     * transforming a classfile.  Reusing the constant pool enables significant\n+     * optimizations in processing time and minimizes differences between the\n+     * original and transformed classfile, but may result in a bigger classfile\n+     * when a classfile is significantly transformed.\n+     * Default is {@code SHARED_POOL} to preserve the original constant\n+     * pool.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    enum ConstantPoolSharingOption implements Option {\n+\n+        \/** Preserves the original constant pool when transforming classfile *\/\n+        SHARED_POOL,\n+\n+        \/** Creates a new constant pool when transforming classfile *\/\n+        NEW_POOL\n+    }\n+\n+    \/**\n+     * Option describing whether to patch out unreachable code.\n+     * Default is {@code PATCH_DEAD_CODE} to automatically patch out unreachable\n+     * code with NOPs.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    enum DeadCodeOption implements Option {\n+\n+        \/** Patch unreachable code *\/\n+        PATCH_DEAD_CODE,\n+\n+        \/** Keep the unreachable code *\/\n+        KEEP_DEAD_CODE\n+    }\n+\n+    \/**\n+     * Option describing whether to filter unresolved labels.\n+     * Default is {@code FAIL_ON_DEAD_LABELS} to throw IllegalStateException\n+     * when any {@link ExceptionCatch}, {@link LocalVariableInfo},\n+     * {@link LocalVariableTypeInfo}, or {@link CharacterRangeInfo}\n+     * reference to unresolved {@link Label} during bytecode serialization.\n+     * Setting this option to {@code DROP_DEAD_LABELS} filters the above\n+     * elements instead.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    enum DeadLabelsOption implements Option {\n+\n+        \/** Fail on unresolved labels *\/\n+        FAIL_ON_DEAD_LABELS,\n+\n+        \/** Filter unresolved labels *\/\n+        DROP_DEAD_LABELS\n+    }\n+\n+    \/**\n+     * Option describing whether to process or discard debug elements.\n+     * Debug elements include the local variable table, local variable type\n+     * table, and character range table.  Discarding debug elements may\n+     * reduce the overhead of parsing or transforming classfiles.\n+     * Default is {@code PASS_DEBUG} to process debug elements.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    enum DebugElementsOption implements Option {\n+\n+        \/** Process debug elements *\/\n+        PASS_DEBUG,\n+\n+        \/** Drop debug elements *\/\n+        DROP_DEBUG\n+    }\n+\n+    \/**\n+     * Option describing whether to process or discard line numbers.\n+     * Discarding line numbers may reduce the overhead of parsing or transforming\n+     * classfiles.\n+     * Default is {@code PASS_LINE_NUMBERS} to process line numbers.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    enum LineNumbersOption implements Option {\n+\n+        \/** Process line numbers *\/\n+        PASS_LINE_NUMBERS,\n+\n+        \/** Drop line numbers *\/\n+        DROP_LINE_NUMBERS;\n+    }\n+\n+    \/**\n+     * Option describing whether to automatically rewrite short jumps to\n+     * long when necessary.\n+     * Default is {@code FIX_SHORT_JUMPS} to automatically rewrite jump\n+     * instructions.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    enum ShortJumpsOption implements Option {\n+\n+        \/** Automatically convert short jumps to long when necessary *\/\n+        FIX_SHORT_JUMPS,\n+\n+        \/** Fail if short jump overflows *\/\n+        FAIL_ON_SHORT_JUMPS\n+    }\n+\n+    \/**\n+     * Option describing whether to generate stackmaps.\n+     * Default is {@code STACK_MAPS_WHEN_REQUIRED} to generate stack\n+     * maps for {@link #JAVA_6_VERSION} or above, where specifically for\n+     * {@link #JAVA_6_VERSION} the stack maps may not be generated.\n+     * @jvms 4.10.1 Verification by Type Checking\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    enum StackMapsOption implements Option {\n+\n+        \/** Generate stack maps when required *\/\n+        STACK_MAPS_WHEN_REQUIRED,\n+\n+        \/** Always generate stack maps *\/\n+        GENERATE_STACK_MAPS,\n+\n+        \/** Drop stack maps from code *\/\n+        DROP_STACK_MAPS\n+    }\n+\n+    \/**\n+     * Option describing whether to process or discard unrecognized or problematic\n+     * original attributes when a class, record component, field, method or code is\n+     * transformed in its exploded form.\n+     * Default is {@code PASS_ALL_ATTRIBUTES} to process all original attributes.\n+     * @see AttributeMapper.AttributeStability\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    enum AttributesProcessingOption implements Option {\n+\n+        \/** Process all original attributes during transformation *\/\n+        PASS_ALL_ATTRIBUTES,\n+\n+        \/** Drop unknown attributes during transformation *\/\n+        DROP_UNKNOWN_ATTRIBUTES,\n+\n+        \/** Drop unknown and unstable original attributes during transformation *\/\n+        DROP_UNSTABLE_ATRIBUTES;\n+    }\n+\n+    \/**\n+     * Parse a classfile into a {@link ClassModel}.\n+     * @param bytes the bytes of the classfile\n+     * @return the class model\n+     * @throws IllegalArgumentException or its subclass if the classfile format is\n+     * not supported or an incompatibility prevents parsing of the classfile\n+     *\/\n+    ClassModel parse(byte[] bytes);\n+\n+    \/**\n+     * Parse a classfile into a {@link ClassModel}.\n+     * @param path the path to the classfile\n+     * @return the class model\n+     * @throws java.io.IOException if an I\/O error occurs\n+     * @throws IllegalArgumentException or its subclass if the classfile format is\n+     * not supported or an incompatibility prevents parsing of the classfile\n+     *\/\n+    default ClassModel parse(Path path) throws IOException {\n+        return parse(Files.readAllBytes(path));\n+    }\n+\n+    \/**\n+     * Build a classfile into a byte array.\n+     * @param thisClass the name of the class to build\n+     * @param handler a handler that receives a {@link ClassBuilder}\n+     * @return the classfile bytes\n+     * @throws IllegalArgumentException if {@code thisClass} represents a primitive type\n+     *\/\n+    default byte[] build(ClassDesc thisClass,\n+                         Consumer<? super ClassBuilder> handler) {\n+        ConstantPoolBuilder pool = ConstantPoolBuilder.of();\n+        return build(pool.classEntry(thisClass), pool, handler);\n+    }\n+\n+    \/**\n+     * Build a classfile into a byte array using the provided constant pool\n+     * builder.\n+     *\n+     * @param thisClassEntry the name of the class to build\n+     * @param constantPool the constant pool builder\n+     * @param handler a handler that receives a {@link ClassBuilder}\n+     * @return the classfile bytes\n+     *\/\n+    byte[] build(ClassEntry thisClassEntry,\n+                 ConstantPoolBuilder constantPool,\n+                 Consumer<? super ClassBuilder> handler);\n+\n+    \/**\n+     * Build a classfile into a file.\n+     * @param path the path to the file to write\n+     * @param thisClass the name of the class to build\n+     * @param handler a handler that receives a {@link ClassBuilder}\n+     * @throws java.io.IOException if an I\/O error occurs\n+     *\/\n+    default void buildTo(Path path,\n+                         ClassDesc thisClass,\n+                         Consumer<ClassBuilder> handler) throws IOException {\n+        Files.write(path, build(thisClass, handler));\n+    }\n+\n+    \/**\n+     * Build a classfile into a file using the provided constant pool\n+     * builder.\n+     *\n+     * @param path the path to the file to write\n+     * @param thisClassEntry the name of the class to build\n+     * @param constantPool the constant pool builder\n+     * @param handler a handler that receives a {@link ClassBuilder}\n+     * @throws java.io.IOException if an I\/O error occurs\n+     *\/\n+    default void buildTo(Path path,\n+                         ClassEntry thisClassEntry,\n+                         ConstantPoolBuilder constantPool,\n+                         Consumer<? super ClassBuilder> handler) throws IOException {\n+        Files.write(path, build(thisClassEntry, constantPool, handler));\n+    }\n+\n+    \/**\n+     * Build a module descriptor into a byte array.\n+     * @param moduleAttribute the {@code Module} attribute\n+     * @return the classfile bytes\n+     *\/\n+    default byte[] buildModule(ModuleAttribute moduleAttribute) {\n+        return buildModule(moduleAttribute, clb -> {});\n+    }\n+\n+    \/**\n+     * Build a module descriptor into a byte array.\n+     * @param moduleAttribute the {@code Module} attribute\n+     * @param handler a handler that receives a {@link ClassBuilder}\n+     * @return the classfile bytes\n+     *\/\n+    default byte[] buildModule(ModuleAttribute moduleAttribute,\n+                                     Consumer<? super ClassBuilder> handler) {\n+        return build(ClassDesc.of(\"module-info\"), clb -> {\n+            clb.withFlags(AccessFlag.MODULE);\n+            clb.with(moduleAttribute);\n+            handler.accept(clb);\n+        });\n+    }\n+\n+    \/**\n+     * Build a module descriptor into a file.\n+     * @param path the file to write\n+     * @param moduleAttribute the {@code Module} attribute\n+     * @throws java.io.IOException if an I\/O error occurs\n+     *\/\n+    default void buildModuleTo(Path path,\n+                                     ModuleAttribute moduleAttribute) throws IOException {\n+        buildModuleTo(path, moduleAttribute, clb -> {});\n+    }\n+\n+    \/**\n+     * Build a module descriptor into a file.\n+     * @param path the file to write\n+     * @param moduleAttribute the {@code Module} attribute\n+     * @param handler a handler that receives a {@link ClassBuilder}\n+     * @throws java.io.IOException if an I\/O error occurs\n+     *\/\n+    default void buildModuleTo(Path path,\n+                                     ModuleAttribute moduleAttribute,\n+                                     Consumer<? super ClassBuilder> handler) throws IOException {\n+        Files.write(path, buildModule(moduleAttribute, handler));\n+    }\n+\n+    \/**\n+     * Transform one classfile into a new classfile with the aid of a\n+     * {@link ClassTransform}.  The transform will receive each element of\n+     * this class, as well as a {@link ClassBuilder} for building the new class.\n+     * The transform is free to preserve, remove, or replace elements as it\n+     * sees fit.\n+     *\n+     * @implNote\n+     * This method behaves as if:\n+     * {@snippet lang=java :\n+     *     this.build(model.thisClass(), ConstantPoolBuilder.of(model),\n+     *                     b -> b.transform(model, transform));\n+     * }\n+     *\n+     * @param model the class model to transform\n+     * @param transform the transform\n+     * @return the bytes of the new class\n+     *\/\n+    default byte[] transform(ClassModel model, ClassTransform transform) {\n+        return transform(model, model.thisClass(), transform);\n+    }\n+\n+    \/**\n+     * Transform one classfile into a new classfile with the aid of a\n+     * {@link ClassTransform}.  The transform will receive each element of\n+     * this class, as well as a {@link ClassBuilder} for building the new class.\n+     * The transform is free to preserve, remove, or replace elements as it\n+     * sees fit.\n+     *\n+     * @param model the class model to transform\n+     * @param newClassName new class name\n+     * @param transform the transform\n+     * @return the bytes of the new class\n+     *\/\n+    default byte[] transform(ClassModel model, ClassDesc newClassName, ClassTransform transform) {\n+        return transform(model, TemporaryConstantPool.INSTANCE.classEntry(newClassName), transform);\n+    }\n+\n+    \/**\n+     * Transform one classfile into a new classfile with the aid of a\n+     * {@link ClassTransform}.  The transform will receive each element of\n+     * this class, as well as a {@link ClassBuilder} for building the new class.\n+     * The transform is free to preserve, remove, or replace elements as it\n+     * sees fit.\n+     *\n+     * @implNote\n+     * This method behaves as if:\n+     * {@snippet lang=java :\n+     *     this.build(newClassName, ConstantPoolBuilder.of(model),\n+     *                     b -> b.transform(model, transform));\n+     * }\n+     *\n+     * @param model the class model to transform\n+     * @param newClassName new class name\n+     * @param transform the transform\n+     * @return the bytes of the new class\n+     *\/\n+    byte[] transform(ClassModel model, ClassEntry newClassName, ClassTransform transform);\n+\n+    \/** 0xCAFEBABE *\/\n+    int MAGIC_NUMBER = 0xCAFEBABE;\n+\n+    \/** The integer value used to encode the NOP instruction. *\/\n+    int NOP             = 0;\n+\n+    \/** The integer value used to encode the ACONST_NULL instruction. *\/\n+    int ACONST_NULL     = 1;\n+\n+    \/** The integer value used to encode the ICONST_M1 instruction. *\/\n+    int ICONST_M1       = 2;\n+\n+    \/** The integer value used to encode the ICONST_0 instruction. *\/\n+    int ICONST_0        = 3;\n+\n+    \/** The integer value used to encode the ICONST_1 instruction. *\/\n+    int ICONST_1        = 4;\n+\n+    \/** The integer value used to encode the ICONST_2 instruction. *\/\n+    int ICONST_2        = 5;\n+\n+    \/** The integer value used to encode the ICONST_3 instruction. *\/\n+    int ICONST_3        = 6;\n+\n+    \/** The integer value used to encode the ICONST_4 instruction. *\/\n+    int ICONST_4        = 7;\n+\n+    \/** The integer value used to encode the ICONST_5 instruction. *\/\n+    int ICONST_5        = 8;\n+\n+    \/** The integer value used to encode the LCONST_0 instruction. *\/\n+    int LCONST_0        = 9;\n+\n+    \/** The integer value used to encode the LCONST_1 instruction. *\/\n+    int LCONST_1        = 10;\n+\n+    \/** The integer value used to encode the FCONST_0 instruction. *\/\n+    int FCONST_0        = 11;\n+\n+    \/** The integer value used to encode the FCONST_1 instruction. *\/\n+    int FCONST_1        = 12;\n+\n+    \/** The integer value used to encode the FCONST_2 instruction. *\/\n+    int FCONST_2        = 13;\n+\n+    \/** The integer value used to encode the DCONST_0 instruction. *\/\n+    int DCONST_0        = 14;\n+\n+    \/** The integer value used to encode the DCONST_1 instruction. *\/\n+    int DCONST_1        = 15;\n+\n+    \/** The integer value used to encode the BIPUSH instruction. *\/\n+    int BIPUSH          = 16;\n+\n+    \/** The integer value used to encode the SIPUSH instruction. *\/\n+    int SIPUSH          = 17;\n+\n+    \/** The integer value used to encode the LDC instruction. *\/\n+    int LDC             = 18;\n+\n+    \/** The integer value used to encode the LDC_W instruction. *\/\n+    int LDC_W           = 19;\n+\n+    \/** The integer value used to encode the LDC2_W instruction. *\/\n+    int LDC2_W          = 20;\n+\n+    \/** The integer value used to encode the ILOAD instruction. *\/\n+    int ILOAD           = 21;\n+\n+    \/** The integer value used to encode the LLOAD instruction. *\/\n+    int LLOAD           = 22;\n+\n+    \/** The integer value used to encode the FLOAD instruction. *\/\n+    int FLOAD           = 23;\n+\n+    \/** The integer value used to encode the DLOAD instruction. *\/\n+    int DLOAD           = 24;\n+\n+    \/** The integer value used to encode the ALOAD instruction. *\/\n+    int ALOAD           = 25;\n+\n+    \/** The integer value used to encode the ILOAD_0 instruction. *\/\n+    int ILOAD_0         = 26;\n+\n+    \/** The integer value used to encode the ILOAD_1 instruction. *\/\n+    int ILOAD_1         = 27;\n+\n+    \/** The integer value used to encode the ILOAD_2 instruction. *\/\n+    int ILOAD_2         = 28;\n+\n+    \/** The integer value used to encode the ILOAD_3 instruction. *\/\n+    int ILOAD_3         = 29;\n+\n+    \/** The integer value used to encode the LLOAD_0 instruction. *\/\n+    int LLOAD_0         = 30;\n+\n+    \/** The integer value used to encode the LLOAD_1 instruction. *\/\n+    int LLOAD_1         = 31;\n+\n+    \/** The integer value used to encode the LLOAD_2 instruction. *\/\n+    int LLOAD_2         = 32;\n+\n+    \/** The integer value used to encode the LLOAD_3 instruction. *\/\n+    int LLOAD_3         = 33;\n+\n+    \/** The integer value used to encode the FLOAD_0 instruction. *\/\n+    int FLOAD_0         = 34;\n+\n+    \/** The integer value used to encode the FLOAD_1 instruction. *\/\n+    int FLOAD_1         = 35;\n+\n+    \/** The integer value used to encode the FLOAD_2 instruction. *\/\n+    int FLOAD_2         = 36;\n+\n+    \/** The integer value used to encode the FLOAD_3 instruction. *\/\n+    int FLOAD_3         = 37;\n+\n+    \/** The integer value used to encode the DLOAD_0 instruction. *\/\n+    int DLOAD_0         = 38;\n+\n+    \/** The integer value used to encode the DLOAD_1 instruction. *\/\n+    int DLOAD_1         = 39;\n+\n+    \/** The integer value used to encode the DLOAD_2 instruction. *\/\n+    int DLOAD_2         = 40;\n+\n+    \/** The integer value used to encode the DLOAD_3 instruction. *\/\n+    int DLOAD_3         = 41;\n+\n+    \/** The integer value used to encode the ALOAD_0 instruction. *\/\n+    int ALOAD_0         = 42;\n+\n+    \/** The integer value used to encode the ALOAD_1 instruction. *\/\n+    int ALOAD_1         = 43;\n+\n+    \/** The integer value used to encode the ALOAD_2 instruction. *\/\n+    int ALOAD_2         = 44;\n+\n+    \/** The integer value used to encode the ALOAD_3 instruction. *\/\n+    int ALOAD_3         = 45;\n+\n+    \/** The integer value used to encode the IALOAD instruction. *\/\n+    int IALOAD          = 46;\n+\n+    \/** The integer value used to encode the LALOAD instruction. *\/\n+    int LALOAD          = 47;\n+\n+    \/** The integer value used to encode the FALOAD instruction. *\/\n+    int FALOAD          = 48;\n+\n+    \/** The integer value used to encode the DALOAD instruction. *\/\n+    int DALOAD          = 49;\n+\n+    \/** The integer value used to encode the AALOAD instruction. *\/\n+    int AALOAD          = 50;\n+\n+    \/** The integer value used to encode the BALOAD instruction. *\/\n+    int BALOAD          = 51;\n+\n+    \/** The integer value used to encode the CALOAD instruction. *\/\n+    int CALOAD          = 52;\n+\n+    \/** The integer value used to encode the SALOAD instruction. *\/\n+    int SALOAD          = 53;\n+\n+    \/** The integer value used to encode the ISTORE instruction. *\/\n+    int ISTORE          = 54;\n+\n+    \/** The integer value used to encode the LSTORE instruction. *\/\n+    int LSTORE          = 55;\n+\n+    \/** The integer value used to encode the FSTORE instruction. *\/\n+    int FSTORE          = 56;\n+\n+    \/** The integer value used to encode the DSTORE instruction. *\/\n+    int DSTORE          = 57;\n+\n+    \/** The integer value used to encode the ASTORE instruction. *\/\n+    int ASTORE          = 58;\n+\n+    \/** The integer value used to encode the ISTORE_0 instruction. *\/\n+    int ISTORE_0        = 59;\n+\n+    \/** The integer value used to encode the ISTORE_1 instruction. *\/\n+    int ISTORE_1        = 60;\n+\n+    \/** The integer value used to encode the ISTORE_2 instruction. *\/\n+    int ISTORE_2        = 61;\n+\n+    \/** The integer value used to encode the ISTORE_3 instruction. *\/\n+    int ISTORE_3        = 62;\n+\n+    \/** The integer value used to encode the LSTORE_0 instruction. *\/\n+    int LSTORE_0        = 63;\n+\n+    \/** The integer value used to encode the LSTORE_1 instruction. *\/\n+    int LSTORE_1        = 64;\n+\n+    \/** The integer value used to encode the LSTORE_2 instruction. *\/\n+    int LSTORE_2        = 65;\n+\n+    \/** The integer value used to encode the LSTORE_3 instruction. *\/\n+    int LSTORE_3        = 66;\n+\n+    \/** The integer value used to encode the FSTORE_0 instruction. *\/\n+    int FSTORE_0        = 67;\n+\n+    \/** The integer value used to encode the FSTORE_1 instruction. *\/\n+    int FSTORE_1        = 68;\n+\n+    \/** The integer value used to encode the FSTORE_2 instruction. *\/\n+    int FSTORE_2        = 69;\n+\n+    \/** The integer value used to encode the FSTORE_3 instruction. *\/\n+    int FSTORE_3        = 70;\n+\n+    \/** The integer value used to encode the DSTORE_0 instruction. *\/\n+    int DSTORE_0        = 71;\n+\n+    \/** The integer value used to encode the DSTORE_1 instruction. *\/\n+    int DSTORE_1        = 72;\n+\n+    \/** The integer value used to encode the DSTORE_2 instruction. *\/\n+    int DSTORE_2        = 73;\n+\n+    \/** The integer value used to encode the DSTORE_3 instruction. *\/\n+    int DSTORE_3        = 74;\n+\n+    \/** The integer value used to encode the ASTORE_0 instruction. *\/\n+    int ASTORE_0        = 75;\n+\n+    \/** The integer value used to encode the ASTORE_1 instruction. *\/\n+    int ASTORE_1        = 76;\n+\n+    \/** The integer value used to encode the ASTORE_2 instruction. *\/\n+    int ASTORE_2        = 77;\n+\n+    \/** The integer value used to encode the ASTORE_3 instruction. *\/\n+    int ASTORE_3        = 78;\n+\n+    \/** The integer value used to encode the IASTORE instruction. *\/\n+    int IASTORE         = 79;\n+\n+    \/** The integer value used to encode the LASTORE instruction. *\/\n+    int LASTORE         = 80;\n+\n+    \/** The integer value used to encode the FASTORE instruction. *\/\n+    int FASTORE         = 81;\n+\n+    \/** The integer value used to encode the DASTORE instruction. *\/\n+    int DASTORE         = 82;\n+\n+    \/** The integer value used to encode the AASTORE instruction. *\/\n+    int AASTORE         = 83;\n+\n+    \/** The integer value used to encode the BASTORE instruction. *\/\n+    int BASTORE         = 84;\n+\n+    \/** The integer value used to encode the CASTORE instruction. *\/\n+    int CASTORE         = 85;\n+\n+    \/** The integer value used to encode the SASTORE instruction. *\/\n+    int SASTORE         = 86;\n+\n+    \/** The integer value used to encode the POP instruction. *\/\n+    int POP             = 87;\n+\n+    \/** The integer value used to encode the POP2 instruction. *\/\n+    int POP2            = 88;\n+\n+    \/** The integer value used to encode the DUP instruction. *\/\n+    int DUP             = 89;\n+\n+    \/** The integer value used to encode the DUP_X1 instruction. *\/\n+    int DUP_X1          = 90;\n+\n+    \/** The integer value used to encode the DUP_X2 instruction. *\/\n+    int DUP_X2          = 91;\n+\n+    \/** The integer value used to encode the DUP2 instruction. *\/\n+    int DUP2            = 92;\n+\n+    \/** The integer value used to encode the DUP2_X1 instruction. *\/\n+    int DUP2_X1         = 93;\n+\n+    \/** The integer value used to encode the DUP2_X2 instruction. *\/\n+    int DUP2_X2         = 94;\n+\n+    \/** The integer value used to encode the SWAP instruction. *\/\n+    int SWAP            = 95;\n+\n+    \/** The integer value used to encode the IADD instruction. *\/\n+    int IADD            = 96;\n+\n+    \/** The integer value used to encode the LADD instruction. *\/\n+    int LADD            = 97;\n+\n+    \/** The integer value used to encode the FADD instruction. *\/\n+    int FADD            = 98;\n+\n+    \/** The integer value used to encode the DADD instruction. *\/\n+    int DADD            = 99;\n+\n+    \/** The integer value used to encode the ISUB instruction. *\/\n+    int ISUB            = 100;\n+\n+    \/** The integer value used to encode the LSUB instruction. *\/\n+    int LSUB            = 101;\n+\n+    \/** The integer value used to encode the FSUB instruction. *\/\n+    int FSUB            = 102;\n+\n+    \/** The integer value used to encode the DSUB instruction. *\/\n+    int DSUB            = 103;\n+\n+    \/** The integer value used to encode the IMUL instruction. *\/\n+    int IMUL            = 104;\n+\n+    \/** The integer value used to encode the LMUL instruction. *\/\n+    int LMUL            = 105;\n+\n+    \/** The integer value used to encode the FMUL instruction. *\/\n+    int FMUL            = 106;\n+\n+    \/** The integer value used to encode the DMUL instruction. *\/\n+    int DMUL            = 107;\n+\n+    \/** The integer value used to encode the IDIV instruction. *\/\n+    int IDIV            = 108;\n+\n+    \/** The integer value used to encode the LDIV instruction. *\/\n+    int LDIV            = 109;\n+\n+    \/** The integer value used to encode the FDIV instruction. *\/\n+    int FDIV            = 110;\n+\n+    \/** The integer value used to encode the DDIV instruction. *\/\n+    int DDIV            = 111;\n+\n+    \/** The integer value used to encode the IREM instruction. *\/\n+    int IREM            = 112;\n+\n+    \/** The integer value used to encode the LREM instruction. *\/\n+    int LREM            = 113;\n+\n+    \/** The integer value used to encode the FREM instruction. *\/\n+    int FREM            = 114;\n+\n+    \/** The integer value used to encode the DREM instruction. *\/\n+    int DREM            = 115;\n+\n+    \/** The integer value used to encode the INEG instruction. *\/\n+    int INEG            = 116;\n+\n+    \/** The integer value used to encode the LNEG instruction. *\/\n+    int LNEG            = 117;\n+\n+    \/** The integer value used to encode the FNEG instruction. *\/\n+    int FNEG            = 118;\n+\n+    \/** The integer value used to encode the DNEG instruction. *\/\n+    int DNEG            = 119;\n+\n+    \/** The integer value used to encode the ISHL instruction. *\/\n+    int ISHL            = 120;\n+\n+    \/** The integer value used to encode the LSHL instruction. *\/\n+    int LSHL            = 121;\n+\n+    \/** The integer value used to encode the ISHR instruction. *\/\n+    int ISHR            = 122;\n+\n+    \/** The integer value used to encode the LSHR instruction. *\/\n+    int LSHR            = 123;\n+\n+    \/** The integer value used to encode the IUSHR instruction. *\/\n+    int IUSHR           = 124;\n+\n+    \/** The integer value used to encode the LUSHR instruction. *\/\n+    int LUSHR           = 125;\n+\n+    \/** The integer value used to encode the IAND instruction. *\/\n+    int IAND            = 126;\n+\n+    \/** The integer value used to encode the LAND instruction. *\/\n+    int LAND            = 127;\n+\n+    \/** The integer value used to encode the IOR instruction. *\/\n+    int IOR             = 128;\n+\n+    \/** The integer value used to encode the LOR instruction. *\/\n+    int LOR             = 129;\n+\n+    \/** The integer value used to encode the IXOR instruction. *\/\n+    int IXOR            = 130;\n+\n+    \/** The integer value used to encode the LXOR instruction. *\/\n+    int LXOR            = 131;\n+\n+    \/** The integer value used to encode the IINC instruction. *\/\n+    int IINC            = 132;\n+\n+    \/** The integer value used to encode the I2L instruction. *\/\n+    int I2L             = 133;\n+\n+    \/** The integer value used to encode the I2F instruction. *\/\n+    int I2F             = 134;\n+\n+    \/** The integer value used to encode the I2D instruction. *\/\n+    int I2D             = 135;\n+\n+    \/** The integer value used to encode the L2I instruction. *\/\n+    int L2I             = 136;\n+\n+    \/** The integer value used to encode the L2F instruction. *\/\n+    int L2F             = 137;\n+\n+    \/** The integer value used to encode the L2D instruction. *\/\n+    int L2D             = 138;\n+\n+    \/** The integer value used to encode the F2I instruction. *\/\n+    int F2I             = 139;\n+\n+    \/** The integer value used to encode the F2L instruction. *\/\n+    int F2L             = 140;\n+\n+    \/** The integer value used to encode the F2D instruction. *\/\n+    int F2D             = 141;\n+\n+    \/** The integer value used to encode the D2I instruction. *\/\n+    int D2I             = 142;\n+\n+    \/** The integer value used to encode the D2L instruction. *\/\n+    int D2L             = 143;\n+\n+    \/** The integer value used to encode the D2F instruction. *\/\n+    int D2F             = 144;\n+\n+    \/** The integer value used to encode the I2B instruction. *\/\n+    int I2B             = 145;\n+\n+    \/** The integer value used to encode the I2C instruction. *\/\n+    int I2C             = 146;\n+\n+    \/** The integer value used to encode the I2S instruction. *\/\n+    int I2S             = 147;\n+\n+    \/** The integer value used to encode the LCMP instruction. *\/\n+    int LCMP            = 148;\n+\n+    \/** The integer value used to encode the FCMPL instruction. *\/\n+    int FCMPL           = 149;\n+\n+    \/** The integer value used to encode the FCMPG instruction. *\/\n+    int FCMPG           = 150;\n+\n+    \/** The integer value used to encode the DCMPL instruction. *\/\n+    int DCMPL           = 151;\n+\n+    \/** The integer value used to encode the DCMPG instruction. *\/\n+    int DCMPG           = 152;\n+\n+    \/** The integer value used to encode the IFEQ instruction. *\/\n+    int IFEQ            = 153;\n+\n+    \/** The integer value used to encode the IFNE instruction. *\/\n+    int IFNE            = 154;\n+\n+    \/** The integer value used to encode the IFLT instruction. *\/\n+    int IFLT            = 155;\n+\n+    \/** The integer value used to encode the IFGE instruction. *\/\n+    int IFGE            = 156;\n+\n+    \/** The integer value used to encode the IFGT instruction. *\/\n+    int IFGT            = 157;\n+\n+    \/** The integer value used to encode the IFLE instruction. *\/\n+    int IFLE            = 158;\n+\n+    \/** The integer value used to encode the IF_ICMPEQ instruction. *\/\n+    int IF_ICMPEQ       = 159;\n+\n+    \/** The integer value used to encode the IF_ICMPNE instruction. *\/\n+    int IF_ICMPNE       = 160;\n+\n+    \/** The integer value used to encode the IF_ICMPLT instruction. *\/\n+    int IF_ICMPLT       = 161;\n+\n+    \/** The integer value used to encode the IF_ICMPGE instruction. *\/\n+    int IF_ICMPGE       = 162;\n+\n+    \/** The integer value used to encode the IF_ICMPGT instruction. *\/\n+    int IF_ICMPGT       = 163;\n+\n+    \/** The integer value used to encode the IF_ICMPLE instruction. *\/\n+    int IF_ICMPLE       = 164;\n+\n+    \/** The integer value used to encode the IF_ACMPEQ instruction. *\/\n+    int IF_ACMPEQ       = 165;\n+\n+    \/** The integer value used to encode the IF_ACMPNE instruction. *\/\n+    int IF_ACMPNE       = 166;\n+\n+    \/** The integer value used to encode the GOTO instruction. *\/\n+    int GOTO            = 167;\n+\n+    \/** The integer value used to encode the JSR instruction. *\/\n+    int JSR             = 168;\n+\n+    \/** The integer value used to encode the RET instruction. *\/\n+    int RET             = 169;\n+\n+    \/** The integer value used to encode the TABLESWITCH instruction. *\/\n+    int TABLESWITCH     = 170;\n+\n+    \/** The integer value used to encode the LOOKUPSWITCH instruction. *\/\n+    int LOOKUPSWITCH    = 171;\n+\n+    \/** The integer value used to encode the IRETURN instruction. *\/\n+    int IRETURN         = 172;\n+\n+    \/** The integer value used to encode the LRETURN instruction. *\/\n+    int LRETURN         = 173;\n+\n+    \/** The integer value used to encode the FRETURN instruction. *\/\n+    int FRETURN         = 174;\n+\n+    \/** The integer value used to encode the DRETURN instruction. *\/\n+    int DRETURN         = 175;\n+\n+    \/** The integer value used to encode the ARETURN instruction. *\/\n+    int ARETURN         = 176;\n+\n+    \/** The integer value used to encode the RETURN instruction. *\/\n+    int RETURN          = 177;\n+\n+    \/** The integer value used to encode the GETSTATIC instruction. *\/\n+    int GETSTATIC       = 178;\n+\n+    \/** The integer value used to encode the PUTSTATIC instruction. *\/\n+    int PUTSTATIC       = 179;\n+\n+    \/** The integer value used to encode the GETFIELD instruction. *\/\n+    int GETFIELD        = 180;\n+\n+    \/** The integer value used to encode the PUTFIELD instruction. *\/\n+    int PUTFIELD        = 181;\n+\n+    \/** The integer value used to encode the INVOKEVIRTUAL instruction. *\/\n+    int INVOKEVIRTUAL   = 182;\n+\n+    \/** The integer value used to encode the INVOKESPECIAL instruction. *\/\n+    int INVOKESPECIAL   = 183;\n+\n+    \/** The integer value used to encode the INVOKESTATIC instruction. *\/\n+    int INVOKESTATIC    = 184;\n+\n+    \/** The integer value used to encode the INVOKEINTERFACE instruction. *\/\n+    int INVOKEINTERFACE = 185;\n+\n+    \/** The integer value used to encode the INVOKEDYNAMIC instruction. *\/\n+    int INVOKEDYNAMIC   = 186;\n+\n+    \/** The integer value used to encode the NEW instruction. *\/\n+    int NEW             = 187;\n+\n+    \/** The integer value used to encode the NEWARRAY instruction. *\/\n+    int NEWARRAY        = 188;\n+\n+    \/** The integer value used to encode the ANEWARRAY instruction. *\/\n+    int ANEWARRAY       = 189;\n+\n+    \/** The integer value used to encode the ARRAYLENGTH instruction. *\/\n+    int ARRAYLENGTH     = 190;\n+\n+    \/** The integer value used to encode the ATHROW instruction. *\/\n+    int ATHROW          = 191;\n+\n+    \/** The integer value used to encode the CHECKCAST instruction. *\/\n+    int CHECKCAST       = 192;\n+\n+    \/** The integer value used to encode the INSTANCEOF instruction. *\/\n+    int INSTANCEOF      = 193;\n+\n+    \/** The integer value used to encode the MONITORENTER instruction. *\/\n+    int MONITORENTER    = 194;\n+\n+    \/** The integer value used to encode the MONITOREXIT instruction. *\/\n+    int MONITOREXIT     = 195;\n+\n+    \/** The integer value used to encode the WIDE instruction. *\/\n+    int WIDE            = 196;\n+\n+    \/** The integer value used to encode the MULTIANEWARRAY instruction. *\/\n+    int MULTIANEWARRAY  = 197;\n+\n+    \/** The integer value used to encode the IFNULL instruction. *\/\n+    int IFNULL          = 198;\n+\n+    \/** The integer value used to encode the IFNONNULL instruction. *\/\n+    int IFNONNULL       = 199;\n+\n+    \/** The integer value used to encode the GOTO_W instruction. *\/\n+    int GOTO_W          = 200;\n+\n+    \/** The integer value used to encode the JSR_W instruction. *\/\n+    int JSR_W           = 201;\n+\n+    \/** The value of PUBLIC access and property modifier. *\/\n+    int ACC_PUBLIC = 0x0001;\n+\n+    \/** The value of PROTECTED access and property modifier. *\/\n+    int ACC_PROTECTED = 0x0004;\n+\n+    \/** The value of PRIVATE access and property modifier. *\/\n+    int ACC_PRIVATE = 0x0002;\n+\n+    \/** The value of INTERFACE access and property modifier. *\/\n+    int ACC_INTERFACE = 0x0200;\n+\n+    \/** The value of ENUM access and property modifier. *\/\n+    int ACC_ENUM = 0x4000;\n+\n+    \/** The value of ANNOTATION access and property modifier. *\/\n+    int ACC_ANNOTATION = 0x2000;\n+\n+    \/** The value of SUPER access and property modifier. *\/\n+    int ACC_SUPER = 0x0020;\n+\n+    \/** The value of ABSTRACT access and property modifier. *\/\n+    int ACC_ABSTRACT = 0x0400;\n+\n+    \/** The value of VOLATILE access and property modifier. *\/\n+    int ACC_VOLATILE = 0x0040;\n+\n+    \/** The value of TRANSIENT access and property modifier. *\/\n+    int ACC_TRANSIENT = 0x0080;\n+\n+    \/** The value of SYNTHETIC access and property modifier. *\/\n+    int ACC_SYNTHETIC = 0x1000;\n+\n+    \/** The value of STATIC access and property modifier. *\/\n+    int ACC_STATIC = 0x0008;\n+\n+    \/** The value of FINAL access and property modifier. *\/\n+    int ACC_FINAL = 0x0010;\n+\n+    \/** The value of SYNCHRONIZED access and property modifier. *\/\n+    int ACC_SYNCHRONIZED = 0x0020;\n+\n+    \/** The value of BRIDGE access and property modifier. *\/\n+    int ACC_BRIDGE = 0x0040;\n+\n+    \/** The value of VARARGS access and property modifier. *\/\n+    int ACC_VARARGS = 0x0080;\n+\n+    \/** The value of NATIVE access and property modifier. *\/\n+    int ACC_NATIVE = 0x0100;\n+\n+    \/** The value of STRICT access and property modifier. *\/\n+    int ACC_STRICT = 0x0800;\n+\n+    \/** The value of MODULE access and property modifier. *\/\n+    int ACC_MODULE = 0x8000;\n+\n+    \/** The value of OPEN access and property modifier. *\/\n+    int ACC_OPEN = 0x20;\n+\n+    \/** The value of MANDATED access and property modifier. *\/\n+    int ACC_MANDATED = 0x8000;\n+\n+    \/** The value of TRANSITIVE access and property modifier. *\/\n+    int ACC_TRANSITIVE = 0x20;\n+\n+    \/** The value of STATIC_PHASE access and property modifier. *\/\n+    int ACC_STATIC_PHASE = 0x40;\n+\n+    \/** The value of STATEMENT {@link CharacterRangeInfo} kind. *\/\n+    int CRT_STATEMENT       = 0x0001;\n+\n+    \/** The value of BLOCK {@link CharacterRangeInfo} kind. *\/\n+    int CRT_BLOCK           = 0x0002;\n+\n+    \/** The value of ASSIGNMENT {@link CharacterRangeInfo} kind. *\/\n+    int CRT_ASSIGNMENT      = 0x0004;\n+\n+    \/** The value of FLOW_CONTROLLER {@link CharacterRangeInfo} kind. *\/\n+    int CRT_FLOW_CONTROLLER = 0x0008;\n+\n+    \/** The value of FLOW_TARGET {@link CharacterRangeInfo} kind. *\/\n+    int CRT_FLOW_TARGET     = 0x0010;\n+\n+    \/** The value of INVOKE {@link CharacterRangeInfo} kind. *\/\n+    int CRT_INVOKE          = 0x0020;\n+\n+    \/** The value of CREATE {@link CharacterRangeInfo} kind. *\/\n+    int CRT_CREATE          = 0x0040;\n+\n+    \/** The value of BRANCH_TRUE {@link CharacterRangeInfo} kind. *\/\n+    int CRT_BRANCH_TRUE     = 0x0080;\n+\n+    \/** The value of BRANCH_FALSE {@link CharacterRangeInfo} kind. *\/\n+    int CRT_BRANCH_FALSE    = 0x0100;\n+\n+    \/** The value of constant pool tag CLASS. *\/\n+    int TAG_CLASS = 7;\n+\n+    \/** The value of constant pool tag CONSTANTDYNAMIC. *\/\n+    int TAG_CONSTANTDYNAMIC = 17;\n+\n+    \/** The value of constant pool tag DOUBLE. *\/\n+    int TAG_DOUBLE = 6;\n+\n+    \/** The value of constant pool tag FIELDREF. *\/\n+    int TAG_FIELDREF = 9;\n+\n+    \/** The value of constant pool tag FLOAT. *\/\n+    int TAG_FLOAT = 4;\n+\n+    \/** The value of constant pool tag INTEGER. *\/\n+    int TAG_INTEGER = 3;\n+\n+    \/** The value of constant pool tag INTERFACEMETHODREF. *\/\n+    int TAG_INTERFACEMETHODREF = 11;\n+\n+    \/** The value of constant pool tag INVOKEDYNAMIC. *\/\n+    int TAG_INVOKEDYNAMIC = 18;\n+\n+    \/** The value of constant pool tag LONG. *\/\n+    int TAG_LONG = 5;\n+\n+    \/** The value of constant pool tag METHODHANDLE. *\/\n+    int TAG_METHODHANDLE = 15;\n+\n+    \/** The value of constant pool tag METHODREF. *\/\n+    int TAG_METHODREF = 10;\n+\n+    \/** The value of constant pool tag METHODTYPE. *\/\n+    int TAG_METHODTYPE = 16;\n+\n+    \/** The value of constant pool tag MODULE. *\/\n+    int TAG_MODULE = 19;\n+\n+    \/** The value of constant pool tag NAMEANDTYPE. *\/\n+    int TAG_NAMEANDTYPE = 12;\n+\n+    \/** The value of constant pool tag PACKAGE. *\/\n+    int TAG_PACKAGE = 20;\n+\n+    \/** The value of constant pool tag STRING. *\/\n+    int TAG_STRING = 8;\n+\n+    \/** The value of constant pool tag UNICODE. *\/\n+    int TAG_UNICODE = 2;\n+\n+    \/** The value of constant pool tag UTF8. *\/\n+    int TAG_UTF8 = 1;\n+\n+    \/\/ annotation element values\n+\n+    \/** The value of annotation element value type AEV_BYTE. *\/\n+    int AEV_BYTE = 'B';\n+\n+    \/** The value of annotation element value type AEV_CHAR. *\/\n+    int AEV_CHAR = 'C';\n+\n+    \/** The value of annotation element value type AEV_DOUBLE. *\/\n+    int AEV_DOUBLE = 'D';\n+\n+    \/** The value of annotation element value type AEV_FLOAT. *\/\n+    int AEV_FLOAT = 'F';\n+\n+    \/** The value of annotation element value type AEV_INT. *\/\n+    int AEV_INT = 'I';\n+\n+    \/** The value of annotation element value type AEV_LONG. *\/\n+    int AEV_LONG = 'J';\n+\n+    \/** The value of annotation element value type AEV_SHORT. *\/\n+    int AEV_SHORT = 'S';\n+\n+    \/** The value of annotation element value type AEV_BOOLEAN. *\/\n+    int AEV_BOOLEAN = 'Z';\n+\n+    \/** The value of annotation element value type AEV_STRING. *\/\n+    int AEV_STRING = 's';\n+\n+    \/** The value of annotation element value type AEV_ENUM. *\/\n+    int AEV_ENUM = 'e';\n+\n+    \/** The value of annotation element value type AEV_CLASS. *\/\n+    int AEV_CLASS = 'c';\n+\n+    \/** The value of annotation element value type AEV_ANNOTATION. *\/\n+    int AEV_ANNOTATION = '@';\n+\n+    \/** The value of annotation element value type AEV_ARRAY. *\/\n+    int AEV_ARRAY = '[';\n+\n+    \/\/type annotations\n+\n+    \/** The value of type annotation target type CLASS_TYPE_PARAMETER. *\/\n+    int TAT_CLASS_TYPE_PARAMETER = 0x00;\n+\n+    \/** The value of type annotation target type METHOD_TYPE_PARAMETER. *\/\n+    int TAT_METHOD_TYPE_PARAMETER = 0x01;\n+\n+    \/** The value of type annotation target type CLASS_EXTENDS. *\/\n+    int TAT_CLASS_EXTENDS = 0x10;\n+\n+    \/** The value of type annotation target type CLASS_TYPE_PARAMETER_BOUND. *\/\n+    int TAT_CLASS_TYPE_PARAMETER_BOUND = 0x11;\n+\n+    \/** The value of type annotation target type METHOD_TYPE_PARAMETER_BOUND. *\/\n+    int TAT_METHOD_TYPE_PARAMETER_BOUND = 0x12;\n+\n+    \/** The value of type annotation target type FIELD. *\/\n+    int TAT_FIELD = 0x13;\n+\n+    \/** The value of type annotation target type METHOD_RETURN. *\/\n+    int TAT_METHOD_RETURN = 0x14;\n+\n+    \/** The value of type annotation target type METHOD_RECEIVER. *\/\n+    int TAT_METHOD_RECEIVER = 0x15;\n+\n+    \/** The value of type annotation target type METHOD_FORMAL_PARAMETER. *\/\n+    int TAT_METHOD_FORMAL_PARAMETER = 0x16;\n+\n+    \/** The value of type annotation target type THROWS. *\/\n+    int TAT_THROWS = 0x17;\n+\n+    \/** The value of type annotation target type LOCAL_VARIABLE. *\/\n+    int TAT_LOCAL_VARIABLE = 0x40;\n+\n+    \/** The value of type annotation target type RESOURCE_VARIABLE. *\/\n+    int TAT_RESOURCE_VARIABLE = 0x41;\n+\n+    \/** The value of type annotation target type EXCEPTION_PARAMETER. *\/\n+    int TAT_EXCEPTION_PARAMETER = 0x42;\n+\n+    \/** The value of type annotation target type INSTANCEOF. *\/\n+    int TAT_INSTANCEOF = 0x43;\n+\n+    \/** The value of type annotation target type NEW. *\/\n+    int TAT_NEW = 0x44;\n+\n+    \/** The value of type annotation target type CONSTRUCTOR_REFERENCE. *\/\n+    int TAT_CONSTRUCTOR_REFERENCE = 0x45;\n+\n+    \/** The value of type annotation target type METHOD_REFERENCE. *\/\n+    int TAT_METHOD_REFERENCE = 0x46;\n+\n+    \/** The value of type annotation target type CAST. *\/\n+    int TAT_CAST = 0x47;\n+\n+    \/** The value of type annotation target type CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT. *\/\n+    int TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT = 0x48;\n+\n+    \/** The value of type annotation target type METHOD_INVOCATION_TYPE_ARGUMENT. *\/\n+    int TAT_METHOD_INVOCATION_TYPE_ARGUMENT = 0x49;\n+\n+    \/** The value of type annotation target type CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT. *\/\n+    int TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT = 0x4A;\n+\n+    \/** The value of type annotation target type METHOD_REFERENCE_TYPE_ARGUMENT. *\/\n+    int TAT_METHOD_REFERENCE_TYPE_ARGUMENT = 0x4B;\n+\n+    \/\/stackmap verification types\n+\n+    \/** The value of verification type TOP. *\/\n+    int VT_TOP = 0;\n+\n+    \/** The value of verification type INTEGER. *\/\n+    int VT_INTEGER = 1;\n+\n+    \/** The value of verification type FLOAT. *\/\n+    int VT_FLOAT = 2;\n+\n+    \/** The value of verification type DOUBLE. *\/\n+    int VT_DOUBLE = 3;\n+\n+    \/** The value of verification type LONG. *\/\n+    int VT_LONG = 4;\n+\n+    \/** The value of verification type NULL. *\/\n+    int VT_NULL = 5;\n+\n+    \/** The value of verification type UNINITIALIZED_THIS. *\/\n+    int VT_UNINITIALIZED_THIS = 6;\n+\n+    \/** The value of verification type OBJECT. *\/\n+    int VT_OBJECT = 7;\n+\n+    \/** The value of verification type UNINITIALIZED. *\/\n+    int VT_UNINITIALIZED = 8;\n+\n+    \/** The value of default class access flags *\/\n+    int DEFAULT_CLASS_FLAGS = ACC_PUBLIC;\n+\n+    \/** The class major version of JAVA_1. *\/\n+    int JAVA_1_VERSION = 45;\n+\n+    \/** The class major version of JAVA_2. *\/\n+    int JAVA_2_VERSION = 46;\n+\n+    \/** The class major version of JAVA_3. *\/\n+    int JAVA_3_VERSION = 47;\n+\n+    \/** The class major version of JAVA_4. *\/\n+    int JAVA_4_VERSION = 48;\n+\n+    \/** The class major version of JAVA_5. *\/\n+    int JAVA_5_VERSION = 49;\n+\n+    \/** The class major version of JAVA_6. *\/\n+    int JAVA_6_VERSION = 50;\n+\n+    \/** The class major version of JAVA_7. *\/\n+    int JAVA_7_VERSION = 51;\n+\n+    \/** The class major version of JAVA_8. *\/\n+    int JAVA_8_VERSION = 52;\n+\n+    \/** The class major version of JAVA_9. *\/\n+    int JAVA_9_VERSION = 53;\n+\n+    \/** The class major version of JAVA_10. *\/\n+    int JAVA_10_VERSION = 54;\n+\n+    \/** The class major version of JAVA_11. *\/\n+    int JAVA_11_VERSION = 55;\n+\n+    \/** The class major version of JAVA_12. *\/\n+    int JAVA_12_VERSION = 56;\n+\n+    \/** The class major version of JAVA_13. *\/\n+    int JAVA_13_VERSION = 57;\n+\n+    \/** The class major version of JAVA_14. *\/\n+    int JAVA_14_VERSION = 58;\n+\n+    \/** The class major version of JAVA_15. *\/\n+    int JAVA_15_VERSION = 59;\n+\n+    \/** The class major version of JAVA_16. *\/\n+    int JAVA_16_VERSION = 60;\n+\n+    \/** The class major version of JAVA_17. *\/\n+    int JAVA_17_VERSION = 61;\n+\n+    \/** The class major version of JAVA_18. *\/\n+    int JAVA_18_VERSION = 62;\n+\n+    \/** The class major version of JAVA_19. *\/\n+    int JAVA_19_VERSION = 63;\n+\n+    \/** The class major version of JAVA_20. *\/\n+    int JAVA_20_VERSION = 64;\n+\n+    \/** The class major version of JAVA_21. *\/\n+    int JAVA_21_VERSION = 65;\n+\n+    \/** The class major version of JAVA_22. *\/\n+    int JAVA_22_VERSION = 66;\n+\n+    \/**\n+     * A minor version number indicating a class uses preview features\n+     * of a Java SE version since 12, for major versions {@value\n+     * #JAVA_12_VERSION} and above.\n+     *\/\n+    int PREVIEW_MINOR_VERSION = 65535;\n+\n+    \/**\n+     * {@return the latest major Java version}\n+     *\/\n+    static int latestMajorVersion() {\n+        return JAVA_22_VERSION;\n+    }\n+\n+    \/**\n+     * {@return the latest minor Java version}\n+     *\/\n+    static int latestMinorVersion() {\n+        return 0;\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":1471,"deletions":0,"binary":false,"changes":1471,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.function.Consumer;\n+\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A builder for a classfile or portion of a classfile.  Builders are rarely\n+ * created directly; they are passed to handlers by methods such as\n+ * {@link ClassFile#build(ClassDesc, Consumer)} or to transforms.\n+ * Elements of the newly built entity can be specified\n+ * abstractly (by passing a {@link ClassFileElement} to {@link #with(ClassFileElement)}\n+ * or concretely by calling the various {@code withXxx} methods.\n+ *\n+ * @param <E> the element type\n+ * @param <B> the builder type\n+ * @see ClassFileTransform\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ClassFileBuilder<E extends ClassFileElement, B extends ClassFileBuilder<E, B>>\n+        extends Consumer<E> permits ClassBuilder, FieldBuilder, MethodBuilder, CodeBuilder {\n+\n+    \/**\n+     * Integrate the {@link ClassFileElement} into the entity being built.\n+     * @param e the element\n+     *\/\n+    @Override\n+    default void accept(E e) {\n+        with(e);\n+    }\n+\n+    \/**\n+     * Integrate the {@link ClassFileElement} into the entity being built.\n+     * @param e the element\n+     * @return this builder\n+     *\/\n+    B with(E e);\n+\n+    \/**\n+     * {@return the constant pool builder associated with this builder}\n+     *\/\n+    ConstantPoolBuilder constantPool();\n+\n+    \/**\n+     * {@return whether the provided constant pool is compatible with this builder}\n+     * @param source the constant pool to test compatibility with\n+     *\/\n+    default boolean canWriteDirect(ConstantPool source) {\n+        return constantPool().canWriteDirect(source);\n+    }\n+\n+    \/**\n+     * Apply a transform to a model, directing results to this builder.\n+     * @param model the model to transform\n+     * @param transform the transform to apply\n+     *\/\n+    default void transform(CompoundElement<E> model, ClassFileTransform<?, E, B> transform) {\n+        @SuppressWarnings(\"unchecked\")\n+        B builder = (B) this;\n+        var resolved = transform.resolve(builder);\n+        resolved.startHandler().run();\n+        model.forEachElement(resolved.consumer());\n+        resolved.endHandler().run();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileBuilder.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Immutable model for a portion of (or the entirety of) a classfile.  Elements\n+ * that model parts of the classfile that have attributes will implement {@link\n+ * AttributedElement}; elements that model complex parts of the classfile that\n+ * themselves contain their own child elements will implement {@link\n+ * CompoundElement}.  Elements specific to various locations in the classfile\n+ * will implement {@link ClassElement}, {@link MethodElement}, etc.\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ClassFileElement\n+        permits AttributedElement, CompoundElement, WritableElement,\n+                ClassElement, CodeElement, FieldElement, MethodElement {\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileElement.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A transformation on streams of elements. Transforms are used during\n+ * transformation of classfile entities; a transform is provided to a method like\n+ * {@link ClassFile#transform(ClassModel, ClassTransform)}, and the elements of the class,\n+ * along with a builder, are presented to the transform.\n+ *\n+ * <p>The subtypes of {@linkplain\n+ * ClassFileTransform} (e.g., {@link ClassTransform}) are functional interfaces\n+ * that accept an element and a corresponding builder.  Since any element can be\n+ * reproduced on the builder via {@link ClassBuilder#with(ClassFileElement)}, a\n+ * transform can easily leave elements in place, remove them, replace them, or\n+ * augment them with other elements.  This enables localized transforms to be\n+ * represented concisely.\n+ *\n+ * <p>Transforms also have an {@link #atEnd(ClassFileBuilder)} method, for\n+ * which the default implementation does nothing, so that a transform can\n+ * perform additional building after the stream of elements is exhausted.\n+ *\n+ * <p>Transforms can be chained together via the {@link\n+ * #andThen(ClassFileTransform)} method, so that the output of one becomes the\n+ * input to another.  This allows smaller units of transformation to be captured\n+ * and reused.\n+ *\n+ * <p>Some transforms are stateful; for example, a transform that injects an\n+ * annotation on a class may watch for the {@link RuntimeVisibleAnnotationsAttribute}\n+ * element and transform it if found, but if it is not found, will generate a\n+ * {@linkplain RuntimeVisibleAnnotationsAttribute} element containing the\n+ * injected annotation from the {@linkplain #atEnd(ClassFileBuilder)} handler.\n+ * To do this, the transform must accumulate some state during the traversal so\n+ * that the end handler knows what to do.  If such a transform is to be reused,\n+ * its state must be reset for each traversal; this will happen automatically if\n+ * the transform is created with {@link ClassTransform#ofStateful(Supplier)} (or\n+ * corresponding methods for other classfile locations.)\n+ * <p>\n+ * Class transformation sample where code transformation is stateful:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"codeRelabeling\"}\n+ * <p>\n+ * Complex class instrumentation sample chaining multiple transformations:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"classInstrumentation\"}\n+ * @param <C> the transform type\n+ * @param <E> the element type\n+ * @param <B> the builder type\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ClassFileTransform<\n+        C extends ClassFileTransform<C, E, B>,\n+        E extends ClassFileElement,\n+        B extends ClassFileBuilder<E, B>>\n+        permits ClassTransform, FieldTransform, MethodTransform, CodeTransform {\n+    \/**\n+     * Transform an element by taking the appropriate actions on the builder.\n+     * Used when transforming a classfile entity (class, method, field, method\n+     * body.) If no transformation is desired, the element can be presented to\n+     * {@link B#with(ClassFileElement)}.  If the element is to be dropped, no\n+     * action is required.\n+     *\n+     * @param builder the builder for the new entity\n+     * @param element the element\n+     *\/\n+    void accept(B builder, E element);\n+\n+    \/**\n+     * Take any final action during transformation of a classfile entity.  Called\n+     * after all elements of the class are presented to {@link\n+     * #accept(ClassFileBuilder, ClassFileElement)}.\n+     *\n+     * @param builder the builder for the new entity\n+     * @implSpec The default implementation does nothing.\n+     *\/\n+    default void atEnd(B builder) {\n+    }\n+\n+    \/**\n+     * Take any preliminary action during transformation of a classfile entity.\n+     * Called before any elements of the class are presented to {@link\n+     * #accept(ClassFileBuilder, ClassFileElement)}.\n+     *\n+     * @param builder the builder for the new entity\n+     * @implSpec The default implementation does nothing.\n+     *\/\n+    default void atStart(B builder) {\n+    }\n+\n+    \/**\n+     * Chain this transform with another; elements presented to the builder of\n+     * this transform will become the input to the next transform.\n+     *\n+     * @param next the downstream transform\n+     * @return the chained transform\n+     *\/\n+    C andThen(C next);\n+\n+    \/**\n+     * The result of binding a transform to a builder.  Used primarily within\n+     * the implementation to perform transformation.\n+     *\n+     * @param <E> the element type\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    interface ResolvedTransform<E extends ClassFileElement> {\n+        \/**\n+         * {@return a {@link Consumer} to receive elements}\n+         *\/\n+        Consumer<E> consumer();\n+\n+        \/**\n+         * {@return an action to call at the end of transformation}\n+         *\/\n+        Runnable endHandler();\n+\n+        \/**\n+         * {@return an action to call at the start of transformation}\n+         *\/\n+        Runnable startHandler();\n+    }\n+\n+    \/**\n+     * Bind a transform to a builder.  If the transform is chained, intermediate\n+     * builders are created for each chain link.  If the transform is stateful\n+     * (see, e.g., {@link ClassTransform#ofStateful(Supplier)}), the supplier is\n+     * invoked to get a fresh transform object.\n+     *\n+     * <p>This method is a low-level method that should rarely be used by\n+     * user code; most of the time, user code should prefer\n+     * {@link ClassFileBuilder#transform(CompoundElement, ClassFileTransform)},\n+     * which resolves the transform and executes it on the current builder.\n+     *\n+     * @param builder the builder to bind to\n+     * @return the bound result\n+     *\/\n+    ResolvedTransform<E> resolve(B builder);\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileTransform.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import jdk.internal.classfile.impl.ClassFileVersionImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the classfile version information for a class.  Delivered as a {@link\n+ * java.lang.classfile.ClassElement} when traversing the elements of a {@link\n+ * ClassModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ClassFileVersion\n+        extends ClassElement\n+        permits ClassFileVersionImpl {\n+    \/**\n+     * {@return the major classfile version}\n+     *\/\n+    int majorVersion();\n+\n+    \/**\n+     * {@return the minor classfile version}\n+     *\/\n+    int minorVersion();\n+\n+    \/**\n+     * {@return a {@link ClassFileVersion} element}\n+     * @param majorVersion the major classfile version\n+     * @param minorVersion the minor classfile version\n+     *\/\n+    static ClassFileVersion of(int majorVersion, int minorVersion) {\n+        return new ClassFileVersionImpl(majorVersion, minorVersion);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFileVersion.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -42,0 +42,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -46,0 +47,2 @@\n+ *\n+ * @since 22\n@@ -47,0 +50,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -68,0 +72,2 @@\n+     *\n+     * @since 22\n@@ -69,0 +75,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -97,0 +104,3 @@\n+     *\n+     * @implSpec The default implementation returns resolver implemented to ask\n+     *           other resolver in cases where this resolver returns {@code null}.\n@@ -118,0 +128,6 @@\n+     *\n+     * @implSpec The default implementation returns resolver holding an instance\n+     *           of the cache map provided by the {@code cacheFactory}. It asks\n+     *           the cache map always first and fills the cache map with all\n+     *           resolved and also unresolved class info. The cache map may refuse\n+     *           {@code null} keys and values.\n@@ -130,0 +146,3 @@\n+     *\n+     * @implSpec The default implementation calls {@link #cached(Supplier)} with\n+     *           {@link HashMap} supplier as {@code cacheFactory}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassHierarchyResolver.java","additions":20,"deletions":1,"binary":false,"changes":21,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassHierarchyResolver.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -32,2 +32,2 @@\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantPool;\n@@ -36,0 +36,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -41,0 +42,2 @@\n+ *\n+ * @since 22\n@@ -42,0 +45,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassModel.java","additions":7,"deletions":3,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassModel.java","status":"renamed"},{"patch":"@@ -25,11 +25,11 @@\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.constantpool.ConstantPoolException;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.PackageEntry;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+package java.lang.classfile;\n+\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.ConstantPoolException;\n+import java.lang.classfile.constantpool.MethodHandleEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.constantpool.PackageEntry;\n+import java.lang.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -40,0 +40,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -47,0 +48,2 @@\n+ *\n+ * @since 22\n@@ -48,0 +51,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -55,1 +59,1 @@\n-     * the processing option {@link Classfile.AttributeMapperOption}.\n+     * the processing option {@link ClassFile.AttributeMapperOption}.\n@@ -108,0 +112,1 @@\n+     * @param <T> the entry type\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassReader.java","additions":17,"deletions":12,"binary":false,"changes":29,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassReader.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -30,0 +30,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -33,0 +34,2 @@\n+ *\n+ * @since 22\n@@ -34,0 +37,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -50,1 +54,1 @@\n-     * @return class signature\n+     * {@return a class signature}\n@@ -60,1 +64,1 @@\n-     * @return class signature\n+     * {@return a class signature}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassSignature.java","additions":7,"deletions":3,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassSignature.java","status":"renamed"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import java.lang.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.impl.TransformImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A transformation on streams of {@link ClassElement}.\n+ *\n+ * @see ClassFileTransform\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+@FunctionalInterface\n+public non-sealed interface ClassTransform\n+        extends ClassFileTransform<ClassTransform, ClassElement, ClassBuilder> {\n+\n+    \/**\n+     * A class transform that sends all elements to the builder.\n+     *\/\n+    static final ClassTransform ACCEPT_ALL = new ClassTransform() {\n+        @Override\n+        public void accept(ClassBuilder builder, ClassElement element) {\n+            builder.with(element);\n+        }\n+    };\n+\n+    \/**\n+     * Create a stateful class transform from a {@link Supplier}.  The supplier\n+     * will be invoked for each transformation.\n+     *\n+     * @param supplier a {@link Supplier} that produces a fresh transform object\n+     *                 for each traversal\n+     * @return the stateful class transform\n+     *\/\n+    static ClassTransform ofStateful(Supplier<ClassTransform> supplier) {\n+        return new TransformImpl.SupplierClassTransform(supplier);\n+    }\n+\n+    \/**\n+     * Create a class transform that passes each element through to the builder,\n+     * and calls the specified function when transformation is complete.\n+     *\n+     * @param finisher the function to call when transformation is complete\n+     * @return the class transform\n+     *\/\n+    static ClassTransform endHandler(Consumer<ClassBuilder> finisher) {\n+        return new ClassTransform() {\n+            @Override\n+            public void accept(ClassBuilder builder, ClassElement element) {\n+                builder.with(element);\n+            }\n+\n+            @Override\n+            public void atEnd(ClassBuilder builder) {\n+                finisher.accept(builder);\n+            }\n+        };\n+    }\n+\n+    \/**\n+     * Create a class transform that passes each element through to the builder,\n+     * except for those that the supplied {@link Predicate} is true for.\n+     *\n+     * @param filter the predicate that determines which elements to drop\n+     * @return the class transform\n+     *\/\n+    static ClassTransform dropping(Predicate<ClassElement> filter) {\n+        return (b, e) -> {\n+            if (!filter.test(e))\n+                b.with(e);\n+        };\n+    }\n+\n+    \/**\n+     * Create a class transform that transforms {@link MethodModel} elements\n+     * with the supplied method transform.\n+     *\n+     * @param filter a predicate that determines which methods to transform\n+     * @param xform the method transform\n+     * @return the class transform\n+     *\/\n+    static ClassTransform transformingMethods(Predicate<MethodModel> filter,\n+                                              MethodTransform xform) {\n+        return new TransformImpl.ClassMethodTransform(xform, filter);\n+    }\n+\n+    \/**\n+     * Create a class transform that transforms {@link MethodModel} elements\n+     * with the supplied method transform.\n+     *\n+     * @param xform the method transform\n+     * @return the class transform\n+     *\/\n+    static ClassTransform transformingMethods(MethodTransform xform) {\n+        return transformingMethods(mm -> true, xform);\n+    }\n+\n+    \/**\n+     * Create a class transform that transforms the {@link CodeAttribute} (method body)\n+     * of {@link MethodModel} elements with the supplied code transform.\n+     *\n+     * @param filter a predicate that determines which methods to transform\n+     * @param xform the code transform\n+     * @return the class transform\n+     *\/\n+    static ClassTransform transformingMethodBodies(Predicate<MethodModel> filter,\n+                                                   CodeTransform xform) {\n+        return transformingMethods(filter, MethodTransform.transformingCode(xform));\n+    }\n+\n+    \/**\n+     * Create a class transform that transforms the {@link CodeAttribute} (method body)\n+     * of {@link MethodModel} elements with the supplied code transform.\n+     *\n+     * @param xform the code transform\n+     * @return the class transform\n+     *\/\n+    static ClassTransform transformingMethodBodies(CodeTransform xform) {\n+        return transformingMethods(MethodTransform.transformingCode(xform));\n+    }\n+\n+    \/**\n+     * Create a class transform that transforms {@link FieldModel} elements\n+     * with the supplied field transform.\n+     *\n+     * @param xform the field transform\n+     * @return the class transform\n+     *\/\n+    static ClassTransform transformingFields(FieldTransform xform) {\n+        return new TransformImpl.ClassFieldTransform(xform, f -> true);\n+    }\n+\n+    \/**\n+     * @implSpec\n+     * The default implementation returns this class transform chained with another\n+     * class transform from the argument. Chaining of two transforms requires to\n+     * involve a chained builder serving as a target builder for this transform\n+     * and also as a source of elements for the downstream transform.\n+     *\/\n+    @Override\n+    default ClassTransform andThen(ClassTransform t) {\n+        return new TransformImpl.ChainedClassTransform(this, t);\n+    }\n+\n+    \/**\n+     * @implSpec The default implementation returns a resolved transform bound\n+     *           to the given class builder.\n+     *\/\n+    @Override\n+    default ResolvedTransform<ClassElement> resolve(ClassBuilder builder) {\n+        return new TransformImpl.ResolvedTransformImpl<>(e -> accept(builder, e),\n+                                                         () -> atEnd(builder),\n+                                                         () -> atStart(builder));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassTransform.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -39,10 +39,10 @@\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.FieldRefEntry;\n-import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.constantpool.MethodRefEntry;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.FieldRefEntry;\n+import java.lang.classfile.constantpool.InterfaceMethodRefEntry;\n+import java.lang.classfile.constantpool.InvokeDynamicEntry;\n+import java.lang.classfile.constantpool.LoadableConstantEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.constantpool.MethodRefEntry;\n+import java.lang.classfile.constantpool.MethodHandleEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -56,30 +56,30 @@\n-import jdk.internal.classfile.instruction.ArrayLoadInstruction;\n-import jdk.internal.classfile.instruction.ArrayStoreInstruction;\n-import jdk.internal.classfile.instruction.BranchInstruction;\n-import jdk.internal.classfile.instruction.CharacterRange;\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n-import jdk.internal.classfile.instruction.ConvertInstruction;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n-import jdk.internal.classfile.instruction.FieldInstruction;\n-import jdk.internal.classfile.instruction.IncrementInstruction;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n-import jdk.internal.classfile.instruction.LineNumber;\n-import jdk.internal.classfile.instruction.LoadInstruction;\n-import jdk.internal.classfile.instruction.LocalVariable;\n-import jdk.internal.classfile.instruction.LocalVariableType;\n-import jdk.internal.classfile.instruction.LookupSwitchInstruction;\n-import jdk.internal.classfile.instruction.MonitorInstruction;\n-import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.internal.classfile.instruction.NewObjectInstruction;\n-import jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction;\n-import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n-import jdk.internal.classfile.instruction.NopInstruction;\n-import jdk.internal.classfile.instruction.OperatorInstruction;\n-import jdk.internal.classfile.instruction.ReturnInstruction;\n-import jdk.internal.classfile.instruction.StackInstruction;\n-import jdk.internal.classfile.instruction.StoreInstruction;\n-import jdk.internal.classfile.instruction.SwitchCase;\n-import jdk.internal.classfile.instruction.TableSwitchInstruction;\n-import jdk.internal.classfile.instruction.ThrowInstruction;\n-import jdk.internal.classfile.instruction.TypeCheckInstruction;\n+import java.lang.classfile.instruction.ArrayLoadInstruction;\n+import java.lang.classfile.instruction.ArrayStoreInstruction;\n+import java.lang.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.instruction.CharacterRange;\n+import java.lang.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.instruction.ConvertInstruction;\n+import java.lang.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.instruction.FieldInstruction;\n+import java.lang.classfile.instruction.IncrementInstruction;\n+import java.lang.classfile.instruction.InvokeDynamicInstruction;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.instruction.LineNumber;\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.LocalVariable;\n+import java.lang.classfile.instruction.LocalVariableType;\n+import java.lang.classfile.instruction.LookupSwitchInstruction;\n+import java.lang.classfile.instruction.MonitorInstruction;\n+import java.lang.classfile.instruction.NewMultiArrayInstruction;\n+import java.lang.classfile.instruction.NewObjectInstruction;\n+import java.lang.classfile.instruction.NewPrimitiveArrayInstruction;\n+import java.lang.classfile.instruction.NewReferenceArrayInstruction;\n+import java.lang.classfile.instruction.NopInstruction;\n+import java.lang.classfile.instruction.OperatorInstruction;\n+import java.lang.classfile.instruction.ReturnInstruction;\n+import java.lang.classfile.instruction.StackInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n+import java.lang.classfile.instruction.SwitchCase;\n+import java.lang.classfile.instruction.TableSwitchInstruction;\n+import java.lang.classfile.instruction.ThrowInstruction;\n+import java.lang.classfile.instruction.TypeCheckInstruction;\n@@ -90,0 +90,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -96,1 +97,1 @@\n- * #with(ClassfileElement)} or concretely by calling the various {@code withXxx}\n+ * #with(ClassFileElement)} or concretely by calling the various {@code withXxx}\n@@ -100,0 +101,2 @@\n+ *\n+ * @since 22\n@@ -101,0 +104,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -102,1 +106,1 @@\n-        extends ClassfileBuilder<CodeElement, CodeBuilder>\n+        extends ClassFileBuilder<CodeElement, CodeBuilder>\n@@ -177,0 +181,2 @@\n+     *\n+     * @since 22\n@@ -178,0 +184,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -318,0 +325,2 @@\n+     *\n+     * @since 22\n@@ -319,0 +328,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -331,1 +341,2 @@\n-         * @throws IllegalArgumentException if an existing catch block catches an exception of the given type.\n+         * @throws IllegalArgumentException if an existing catch block catches an exception of the given type\n+         *                                  or {@code exceptionType} represents a primitive type\n@@ -585,0 +596,1 @@\n+     * @throws IllegalArgumentException if {@code type} represents a primitive type\n@@ -614,0 +626,1 @@\n+     * @throws IllegalArgumentException if {@code type} represents a primitive type\n@@ -1008,0 +1021,1 @@\n+     * @throws IllegalArgumentException if {@code className} represents a primitive type\n@@ -1100,0 +1114,1 @@\n+     * @throws IllegalArgumentException if {@code type} represents a primitive type\n@@ -1470,0 +1485,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n@@ -1490,0 +1506,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n@@ -1658,1 +1675,1 @@\n-     * Generate an instruction to branch if int comparison succeeds\n+     * Generate an instruction to branch if reference comparison succeeds\n@@ -1667,1 +1684,1 @@\n-     * Generate an instruction to branch if int comparison succeeds\n+     * Generate an instruction to branch if reference comparison succeeds\n@@ -1849,0 +1866,1 @@\n+     * @throws IllegalArgumentException if {@code target} represents a primitive type\n@@ -1887,0 +1905,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n@@ -1919,0 +1938,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n@@ -1932,0 +1952,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n@@ -1961,0 +1982,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n@@ -1973,0 +1995,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n@@ -1993,0 +2016,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n@@ -2319,0 +2343,1 @@\n+     * @throws IllegalArgumentException if {@code array} represents a primitive type\n@@ -2337,0 +2362,1 @@\n+     * @throws IllegalArgumentException if {@code clazz} represents a primitive type\n@@ -2382,0 +2408,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n@@ -2402,0 +2429,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":74,"deletions":46,"binary":false,"changes":120,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeBuilder.java","status":"renamed"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A marker interface for elements that can appear when traversing\n+ * a {@link CodeModel} or be presented to a {@link CodeBuilder}. Code elements\n+ * are either an {@link Instruction}, which models an instruction in the body\n+ * of a method, or a {@link PseudoInstruction}, which models metadata from\n+ * the code attribute, such as line number metadata, local variable metadata,\n+ * exception metadata, label target metadata, etc.\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface CodeElement extends ClassFileElement\n+        permits Instruction, PseudoInstruction,\n+                CustomAttribute, RuntimeVisibleTypeAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n+                StackMapTableAttribute {\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeElement.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import java.lang.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.impl.BufferedCodeBuilder;\n+import jdk.internal.classfile.impl.CodeImpl;\n+import java.lang.classfile.instruction.ExceptionCatch;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the body of a method (the {@code Code} attribute).  The instructions\n+ * of the method body are accessed via a streaming view (e.g., {@link\n+ * #elements()}).\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface CodeModel\n+        extends CompoundElement<CodeElement>, AttributedElement, MethodElement\n+        permits CodeAttribute, BufferedCodeBuilder.Model, CodeImpl {\n+\n+    \/**\n+     * {@return the maximum size of the local variable table}\n+     *\/\n+    int maxLocals();\n+\n+    \/**\n+     * {@return the maximum size of the operand stack}\n+     *\/\n+    int maxStack();\n+\n+    \/**\n+     * {@return the enclosing method, if known}\n+     *\/\n+    Optional<MethodModel> parent();\n+\n+    \/**\n+     * {@return the exception table of the method}  The exception table is also\n+     * modeled by {@link ExceptionCatch} elements in the streaming view.\n+     *\/\n+    List<ExceptionCatch> exceptionHandlers();\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeModel.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import jdk.internal.classfile.impl.TransformImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A transformation on streams of {@link CodeElement}.\n+ *\n+ * @see ClassFileTransform\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+@FunctionalInterface\n+public non-sealed interface CodeTransform\n+        extends ClassFileTransform<CodeTransform, CodeElement, CodeBuilder> {\n+\n+    \/**\n+     * A code transform that sends all elements to the builder.\n+     *\/\n+    CodeTransform ACCEPT_ALL = new CodeTransform() {\n+        @Override\n+        public void accept(CodeBuilder builder, CodeElement element) {\n+            builder.with(element);\n+        }\n+    };\n+\n+    \/**\n+     * Create a stateful code transform from a {@link Supplier}.  The supplier\n+     * will be invoked for each transformation.\n+     *\n+     * @param supplier a {@link Supplier} that produces a fresh transform object\n+     *                 for each traversal\n+     * @return the stateful code transform\n+     *\/\n+    static CodeTransform ofStateful(Supplier<CodeTransform> supplier) {\n+        return new TransformImpl.SupplierCodeTransform(supplier);\n+    }\n+\n+    \/**\n+     * Create a code transform that passes each element through to the builder,\n+     * and calls the specified function when transformation is complete.\n+     *\n+     * @param finisher the function to call when transformation is complete\n+     * @return the code transform\n+     *\/\n+    static CodeTransform endHandler(Consumer<CodeBuilder> finisher) {\n+        return new CodeTransform() {\n+            @Override\n+            public void accept(CodeBuilder builder, CodeElement element) {\n+                builder.with(element);\n+            }\n+\n+            @Override\n+            public void atEnd(CodeBuilder builder) {\n+                finisher.accept(builder);\n+            }\n+        };\n+    }\n+\n+    \/**\n+     * @implSpec\n+     * The default implementation returns this code transform chained with another\n+     * code transform from the argument. Chaining of two transforms requires to\n+     * involve a chained builder serving as a target builder for this transform\n+     * and also as a source of elements for the downstream transform.\n+     *\/\n+    @Override\n+    default CodeTransform andThen(CodeTransform t) {\n+        return new TransformImpl.ChainedCodeTransform(this, t);\n+    }\n+\n+    \/**\n+     * @implSpec The default implementation returns a resolved transform bound\n+     *           to the given code builder.\n+     *\/\n+    @Override\n+    default ResolvedTransform<CodeElement> resolve(CodeBuilder builder) {\n+        return new TransformImpl.ResolvedTransformImpl<>(e -> accept(builder, e),\n+                                                         () -> atEnd(builder),\n+                                                         () -> atStart(builder));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeTransform.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -35,0 +35,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -37,1 +38,1 @@\n- * A {@link ClassfileElement} that has complex structure defined in terms of\n+ * A {@link ClassFileElement} that has complex structure defined in terms of\n@@ -44,0 +45,3 @@\n+ *\n+ * @sealedGraph\n+ * @since 22\n@@ -45,2 +49,3 @@\n-public sealed interface CompoundElement<E extends ClassfileElement>\n-        extends ClassfileElement, Iterable<E>\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface CompoundElement<E extends ClassFileElement>\n+        extends ClassFileElement, Iterable<E>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CompoundElement.java","additions":9,"deletions":4,"binary":false,"changes":13,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CompoundElement.java","status":"renamed"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a non-standard attribute of a classfile.  Clients should extend\n+ * this class to provide an implementation class for non-standard attributes,\n+ * and provide an {@link AttributeMapper} to mediate between the classfile\n+ * format and the {@linkplain CustomAttribute} representation.\n+ * @param <T> the custom attribute type\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public abstract non-sealed class CustomAttribute<T extends CustomAttribute<T>>\n+        implements Attribute<T>, CodeElement, ClassElement, MethodElement, FieldElement {\n+\n+    private final AttributeMapper<T> mapper;\n+\n+    \/**\n+     * Construct a {@linkplain CustomAttribute}.\n+     * @param mapper the attribute mapper\n+     *\/\n+    protected CustomAttribute(AttributeMapper<T> mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public final AttributeMapper<T> attributeMapper() {\n+        return mapper;\n+    }\n+\n+    @Override\n+    public final String attributeName() {\n+        return mapper.name();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public final void writeTo(BufWriter buf) {\n+        mapper.writeAttribute(buf, (T) this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"CustomAttribute[name=%s]\", mapper.name());\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CustomAttribute.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -28,1 +28,1 @@\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -35,0 +35,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -40,1 +41,1 @@\n- * abstractly (by passing a {@link FieldElement} to {@link #with(ClassfileElement)}\n+ * abstractly (by passing a {@link FieldElement} to {@link #with(ClassFileElement)}\n@@ -44,0 +45,2 @@\n+ *\n+ * @since 22\n@@ -45,0 +48,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -46,1 +50,1 @@\n-        extends ClassfileBuilder<FieldElement, FieldBuilder>\n+        extends ClassFileBuilder<FieldElement, FieldBuilder>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldBuilder.java","additions":8,"deletions":4,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/FieldBuilder.java","status":"renamed"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.classfile.attribute.ConstantValueAttribute;\n+import java.lang.classfile.attribute.DeprecatedAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.attribute.SyntheticAttribute;\n+import java.lang.classfile.attribute.UnknownAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A marker interface for elements that can appear when traversing\n+ * a {@link FieldModel} or be presented to a {@link FieldBuilder}.\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface FieldElement extends ClassFileElement\n+        permits AccessFlags,\n+                CustomAttribute, ConstantValueAttribute, DeprecatedAttribute,\n+                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n+                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n+                SignatureAttribute, SyntheticAttribute, UnknownAttribute {\n+\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldElement.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -31,1 +31,1 @@\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -34,0 +34,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -39,0 +40,2 @@\n+ *\n+ * @since 22\n@@ -40,0 +43,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldModel.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/FieldModel.java","status":"renamed"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import jdk.internal.classfile.impl.TransformImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A transformation on streams of {@link FieldElement}.\n+ *\n+ * @see ClassFileTransform\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+@FunctionalInterface\n+public non-sealed interface FieldTransform\n+        extends ClassFileTransform<FieldTransform, FieldElement, FieldBuilder> {\n+\n+    \/**\n+     * A field transform that sends all elements to the builder.\n+     *\/\n+    FieldTransform ACCEPT_ALL = new FieldTransform() {\n+        @Override\n+        public void accept(FieldBuilder builder, FieldElement element) {\n+            builder.with(element);\n+        }\n+    };\n+\n+    \/**\n+     * Create a stateful field transform from a {@link Supplier}.  The supplier\n+     * will be invoked for each transformation.\n+     *\n+     * @param supplier a {@link Supplier} that produces a fresh transform object\n+     *                 for each traversal\n+     * @return the stateful field transform\n+     *\/\n+    static FieldTransform ofStateful(Supplier<FieldTransform> supplier) {\n+        return new TransformImpl.SupplierFieldTransform(supplier);\n+    }\n+\n+    \/**\n+     * Create a field transform that passes each element through to the builder,\n+     * and calls the specified function when transformation is complete.\n+     *\n+     * @param finisher the function to call when transformation is complete\n+     * @return the field transform\n+     *\/\n+    static FieldTransform endHandler(Consumer<FieldBuilder> finisher) {\n+        return new FieldTransform() {\n+            @Override\n+            public void accept(FieldBuilder builder, FieldElement element) {\n+                builder.with(element);\n+            }\n+\n+            @Override\n+            public void atEnd(FieldBuilder builder) {\n+                finisher.accept(builder);\n+            }\n+        };\n+    }\n+\n+    \/**\n+     * Create a field transform that passes each element through to the builder,\n+     * except for those that the supplied {@link Predicate} is true for.\n+     *\n+     * @param filter the predicate that determines which elements to drop\n+     * @return the field transform\n+     *\/\n+    static FieldTransform dropping(Predicate<FieldElement> filter) {\n+        return (b, e) -> {\n+            if (!filter.test(e))\n+                b.with(e);\n+        };\n+    }\n+\n+    \/**\n+     * @implSpec\n+     * The default implementation returns this field transform chained with another\n+     * field transform from the argument. Chaining of two transforms requires to\n+     * involve a chained builder serving as a target builder for this transform\n+     * and also as a source of elements for the downstream transform.\n+     *\/\n+    @Override\n+    default FieldTransform andThen(FieldTransform t) {\n+        return new TransformImpl.ChainedFieldTransform(this, t);\n+    }\n+\n+    \/**\n+     * @implSpec The default implementation returns a resolved transform bound\n+     *           to the given field builder.\n+     *\/\n+    @Override\n+    default ResolvedTransform<FieldElement> resolve(FieldBuilder builder) {\n+        return new TransformImpl.ResolvedTransformImpl<>(e -> accept(builder, e),\n+                                                         () -> atEnd(builder),\n+                                                         () -> atStart(builder));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldTransform.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile;\n+\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import java.lang.classfile.instruction.ArrayLoadInstruction;\n+import java.lang.classfile.instruction.ArrayStoreInstruction;\n+import java.lang.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.instruction.ConvertInstruction;\n+import java.lang.classfile.instruction.DiscontinuedInstruction;\n+import java.lang.classfile.instruction.FieldInstruction;\n+import java.lang.classfile.instruction.IncrementInstruction;\n+import java.lang.classfile.instruction.InvokeDynamicInstruction;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.LookupSwitchInstruction;\n+import java.lang.classfile.instruction.MonitorInstruction;\n+import java.lang.classfile.instruction.NewMultiArrayInstruction;\n+import java.lang.classfile.instruction.NewObjectInstruction;\n+import java.lang.classfile.instruction.NewPrimitiveArrayInstruction;\n+import java.lang.classfile.instruction.NewReferenceArrayInstruction;\n+import java.lang.classfile.instruction.NopInstruction;\n+import java.lang.classfile.instruction.OperatorInstruction;\n+import java.lang.classfile.instruction.ReturnInstruction;\n+import java.lang.classfile.instruction.StackInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n+import java.lang.classfile.instruction.TableSwitchInstruction;\n+import java.lang.classfile.instruction.ThrowInstruction;\n+import java.lang.classfile.instruction.TypeCheckInstruction;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an executable instruction in a method body.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface Instruction extends CodeElement\n+        permits ArrayLoadInstruction, ArrayStoreInstruction, BranchInstruction,\n+                ConstantInstruction, ConvertInstruction, DiscontinuedInstruction,\n+                FieldInstruction, InvokeDynamicInstruction, InvokeInstruction,\n+                LoadInstruction, StoreInstruction, IncrementInstruction,\n+                LookupSwitchInstruction, MonitorInstruction, NewMultiArrayInstruction,\n+                NewObjectInstruction, NewPrimitiveArrayInstruction, NewReferenceArrayInstruction,\n+                NopInstruction, OperatorInstruction, ReturnInstruction,\n+                StackInstruction, TableSwitchInstruction,\n+                ThrowInstruction, TypeCheckInstruction, AbstractInstruction {\n+\n+    \/**\n+     * {@return the opcode of this instruction}\n+     *\/\n+    Opcode opcode();\n+\n+    \/**\n+     * {@return the size in bytes of this instruction}\n+     *\/\n+    int sizeInBytes();\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Instruction.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -31,1 +31,1 @@\n-import jdk.internal.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ClassEntry;\n@@ -34,0 +34,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -37,1 +38,3 @@\n- * jdk.internal.classfile.ClassElement} when traversing a {@link ClassModel}.\n+ * java.lang.classfile.ClassElement} when traversing a {@link ClassModel}.\n+ *\n+ * @since 22\n@@ -39,0 +42,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Interfaces.java","additions":7,"deletions":3,"binary":false,"changes":10,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Interfaces.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -28,0 +28,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -40,1 +41,3 @@\n- * {@link CodeBuilder#labelBinding(Label)} or {@link CodeBuilder#with(ClassfileElement)}.\n+ * {@link CodeBuilder#labelBinding(Label)} or {@link CodeBuilder#with(ClassFileElement)}.\n+ *\n+ * @since 22\n@@ -42,0 +45,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Label.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Label.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -31,1 +31,1 @@\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -35,0 +35,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -40,1 +41,1 @@\n- * abstractly (by passing a {@link MethodElement} to {@link #with(ClassfileElement)}\n+ * abstractly (by passing a {@link MethodElement} to {@link #with(ClassFileElement)}\n@@ -44,0 +45,2 @@\n+ *\n+ * @since 22\n@@ -45,0 +48,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -46,1 +50,1 @@\n-        extends ClassfileBuilder<MethodElement, MethodBuilder>\n+        extends ClassFileBuilder<MethodElement, MethodBuilder>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodBuilder.java","additions":8,"deletions":4,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodBuilder.java","status":"renamed"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.classfile.attribute.AnnotationDefaultAttribute;\n+import java.lang.classfile.attribute.DeprecatedAttribute;\n+import java.lang.classfile.attribute.ExceptionsAttribute;\n+import java.lang.classfile.attribute.MethodParametersAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.attribute.SyntheticAttribute;\n+import java.lang.classfile.attribute.UnknownAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A marker interface for elements that can appear when traversing\n+ * a {@link MethodModel} or be presented to a {@link MethodBuilder}.\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface MethodElement\n+        extends ClassFileElement\n+        permits AccessFlags, CodeModel, CustomAttribute,\n+                AnnotationDefaultAttribute, DeprecatedAttribute,\n+                ExceptionsAttribute, MethodParametersAttribute,\n+                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleParameterAnnotationsAttribute,\n+                RuntimeInvisibleTypeAnnotationsAttribute, RuntimeVisibleAnnotationsAttribute,\n+                RuntimeVisibleParameterAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n+                SignatureAttribute, SyntheticAttribute, UnknownAttribute {\n+\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodElement.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -31,1 +31,1 @@\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -34,0 +34,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -39,0 +40,2 @@\n+ *\n+ * @since 22\n@@ -40,0 +43,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodModel.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodModel.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -32,0 +32,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -35,0 +36,2 @@\n+ *\n+ * @since 22\n@@ -36,0 +39,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -55,1 +59,1 @@\n-     * @return method signature for a raw (no generic information) method descriptor\n+     * {@return a method signature for a raw (no generic information) method descriptor}\n@@ -69,1 +73,1 @@\n-     * @return method signature\n+     * {@return a method signature}\n@@ -83,1 +87,1 @@\n-     * @return method signature\n+     * {@return a method signature}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodSignature.java","additions":8,"deletions":4,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodSignature.java","status":"renamed"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import jdk.internal.classfile.impl.TransformImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A transformation on streams of {@link MethodElement}.\n+ *\n+ * @see ClassFileTransform\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+@FunctionalInterface\n+public non-sealed interface MethodTransform\n+        extends ClassFileTransform<MethodTransform, MethodElement, MethodBuilder> {\n+\n+    \/**\n+     * A method transform that sends all elements to the builder.\n+     *\/\n+    MethodTransform ACCEPT_ALL = new MethodTransform() {\n+        @Override\n+        public void accept(MethodBuilder builder, MethodElement element) {\n+            builder.with(element);\n+        }\n+    };\n+\n+    \/**\n+     * Create a stateful method transform from a {@link Supplier}.  The supplier\n+     * will be invoked for each transformation.\n+     *\n+     * @param supplier a {@link Supplier} that produces a fresh transform object\n+     *                 for each traversal\n+     * @return the stateful method transform\n+     *\/\n+    static MethodTransform ofStateful(Supplier<MethodTransform> supplier) {\n+        return new TransformImpl.SupplierMethodTransform(supplier);\n+    }\n+\n+    \/**\n+     * Create a method transform that passes each element through to the builder,\n+     * and calls the specified function when transformation is complete.\n+     *\n+     * @param finisher the function to call when transformation is complete\n+     * @return the method transform\n+     *\/\n+    static MethodTransform endHandler(Consumer<MethodBuilder> finisher) {\n+        return new MethodTransform() {\n+            @Override\n+            public void accept(MethodBuilder builder, MethodElement element) {\n+                builder.with(element);\n+            }\n+\n+            @Override\n+            public void atEnd(MethodBuilder builder) {\n+                finisher.accept(builder);\n+            }\n+        };\n+    }\n+\n+    \/**\n+     * Create a method transform that passes each element through to the builder,\n+     * except for those that the supplied {@link Predicate} is true for.\n+     *\n+     * @param filter the predicate that determines which elements to drop\n+     * @return the method transform\n+     *\/\n+    static MethodTransform dropping(Predicate<MethodElement> filter) {\n+        return (b, e) -> {\n+            if (!filter.test(e))\n+                b.with(e);\n+        };\n+    }\n+\n+    \/**\n+     * Create a method transform that transforms {@link CodeModel} elements\n+     * with the supplied code transform.\n+     *\n+     * @param xform the method transform\n+     * @return the class transform\n+     *\/\n+    static MethodTransform transformingCode(CodeTransform xform) {\n+        return new TransformImpl.MethodCodeTransform(xform);\n+    }\n+\n+    \/**\n+     * @implSpec The default implementation returns a resolved transform bound\n+     *           to the given method builder.\n+     *\/\n+    @Override\n+    default ResolvedTransform<MethodElement> resolve(MethodBuilder builder) {\n+        return new TransformImpl.ResolvedTransformImpl<>(e -> accept(builder, e),\n+                                                         () -> atEnd(builder),\n+                                                         () -> atStart(builder));\n+    }\n+\n+    \/**\n+     * @implSpec\n+     * The default implementation returns this method transform chained with another\n+     * method transform from the argument. Chaining of two transforms requires to\n+     * involve a chained builder serving as a target builder for this transform\n+     * and also as a source of elements for the downstream transform.\n+     *\/\n+    @Override\n+    default MethodTransform andThen(MethodTransform t) {\n+        return new TransformImpl.ChainedMethodTransform(this, t);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodTransform.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,1179 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.constant.ConstantDesc;\n+import java.lang.constant.ConstantDescs;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Describes the opcodes of the JVM instruction set, as described in {@jvms 6.5}.\n+ * As well as a number of pseudo-instructions that may be encountered when\n+ * traversing the instructions of a method.\n+ *\n+ * @see Instruction\n+ * @see PseudoInstruction\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public enum Opcode {\n+\n+    \/** Do nothing *\/\n+    NOP(ClassFile.NOP, 1, Kind.NOP),\n+\n+    \/** Push null *\/\n+    ACONST_NULL(ClassFile.ACONST_NULL, 1, Kind.CONSTANT, TypeKind.ReferenceType, 0, ConstantDescs.NULL),\n+\n+    \/** Push int constant -1 *\/\n+    ICONST_M1(ClassFile.ICONST_M1, 1, Kind.CONSTANT, TypeKind.IntType, 0, -1),\n+\n+    \/** Push int constant 0 *\/\n+    ICONST_0(ClassFile.ICONST_0, 1, Kind.CONSTANT, TypeKind.IntType, 0, 0),\n+\n+    \/** Push int constant 1 *\/\n+    ICONST_1(ClassFile.ICONST_1, 1, Kind.CONSTANT, TypeKind.IntType, 0, 1),\n+\n+    \/** Push int constant 2 *\/\n+    ICONST_2(ClassFile.ICONST_2, 1, Kind.CONSTANT, TypeKind.IntType, 0, 2),\n+\n+    \/** Push int constant 3 *\/\n+    ICONST_3(ClassFile.ICONST_3, 1, Kind.CONSTANT, TypeKind.IntType, 0, 3),\n+\n+    \/** Push int constant 4 *\/\n+    ICONST_4(ClassFile.ICONST_4, 1, Kind.CONSTANT, TypeKind.IntType, 0, 4),\n+\n+    \/** Push int constant 5 *\/\n+    ICONST_5(ClassFile.ICONST_5, 1, Kind.CONSTANT, TypeKind.IntType, 0, 5),\n+\n+    \/** Push long constant 0 *\/\n+    LCONST_0(ClassFile.LCONST_0, 1, Kind.CONSTANT, TypeKind.LongType, 0, 0L),\n+\n+    \/** Push long constant  1 *\/\n+    LCONST_1(ClassFile.LCONST_1, 1, Kind.CONSTANT, TypeKind.LongType, 0, 1L),\n+\n+    \/** Push float constant 0 *\/\n+    FCONST_0(ClassFile.FCONST_0, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 0.0f),\n+\n+    \/** Push float constant 1 *\/\n+    FCONST_1(ClassFile.FCONST_1, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 1.0f),\n+\n+    \/** Push float constant 2 *\/\n+    FCONST_2(ClassFile.FCONST_2, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 2.0f),\n+\n+    \/** Push double constant 0 *\/\n+    DCONST_0(ClassFile.DCONST_0, 1, Kind.CONSTANT, TypeKind.DoubleType, 0, 0.0d),\n+\n+    \/** Push double constant 1 *\/\n+    DCONST_1(ClassFile.DCONST_1, 1, Kind.CONSTANT, TypeKind.DoubleType, 0, 1.0d),\n+\n+    \/** Push byte *\/\n+    BIPUSH(ClassFile.BIPUSH, 2, Kind.CONSTANT, TypeKind.ByteType),\n+\n+    \/** Push short *\/\n+    SIPUSH(ClassFile.SIPUSH, 3, Kind.CONSTANT, TypeKind.ShortType),\n+\n+    \/** Push item from run-time constant pool *\/\n+    LDC(ClassFile.LDC, 2, Kind.CONSTANT),\n+\n+    \/** Push item from run-time constant pool (wide index) *\/\n+    LDC_W(ClassFile.LDC_W, 3, Kind.CONSTANT),\n+\n+    \/** Push long or double from run-time constant pool (wide index) *\/\n+    LDC2_W(ClassFile.LDC2_W, 3, Kind.CONSTANT),\n+\n+    \/** Load int from local variable *\/\n+    ILOAD(ClassFile.ILOAD, 2, Kind.LOAD, TypeKind.IntType, -1),\n+\n+    \/** Load long from local variable *\/\n+    LLOAD(ClassFile.LLOAD, 2, Kind.LOAD, TypeKind.LongType, -1),\n+\n+    \/** Load float from local variable *\/\n+    FLOAD(ClassFile.FLOAD, 2, Kind.LOAD, TypeKind.FloatType, -1),\n+\n+    \/** Load double from local variable *\/\n+    DLOAD(ClassFile.DLOAD, 2, Kind.LOAD, TypeKind.DoubleType, -1),\n+\n+    \/** Load reference from local variable *\/\n+    ALOAD(ClassFile.ALOAD, 2, Kind.LOAD, TypeKind.ReferenceType, -1),\n+\n+    \/** Load int from local variable 0 *\/\n+    ILOAD_0(ClassFile.ILOAD_0, 1, Kind.LOAD, TypeKind.IntType, 0),\n+\n+    \/** Load int from local variable 1 *\/\n+    ILOAD_1(ClassFile.ILOAD_1, 1, Kind.LOAD, TypeKind.IntType, 1),\n+\n+    \/** Load int from local variable 2 *\/\n+    ILOAD_2(ClassFile.ILOAD_2, 1, Kind.LOAD, TypeKind.IntType, 2),\n+\n+    \/** Load int from local variable3  *\/\n+    ILOAD_3(ClassFile.ILOAD_3, 1, Kind.LOAD, TypeKind.IntType, 3),\n+\n+    \/** Load long from local variable 0 *\/\n+    LLOAD_0(ClassFile.LLOAD_0, 1, Kind.LOAD, TypeKind.LongType, 0),\n+\n+    \/** Load long from local variable 1 *\/\n+    LLOAD_1(ClassFile.LLOAD_1, 1, Kind.LOAD, TypeKind.LongType, 1),\n+\n+    \/** Load long from local variable 2 *\/\n+    LLOAD_2(ClassFile.LLOAD_2, 1, Kind.LOAD, TypeKind.LongType, 2),\n+\n+    \/** Load long from local variable 3 *\/\n+    LLOAD_3(ClassFile.LLOAD_3, 1, Kind.LOAD, TypeKind.LongType, 3),\n+\n+    \/** Load float from local variable 0 *\/\n+    FLOAD_0(ClassFile.FLOAD_0, 1, Kind.LOAD, TypeKind.FloatType, 0),\n+\n+    \/** Load float from local variable 1 *\/\n+    FLOAD_1(ClassFile.FLOAD_1, 1, Kind.LOAD, TypeKind.FloatType, 1),\n+\n+    \/** Load float from local variable 2 *\/\n+    FLOAD_2(ClassFile.FLOAD_2, 1, Kind.LOAD, TypeKind.FloatType, 2),\n+\n+    \/** Load float from local variable 3 *\/\n+    FLOAD_3(ClassFile.FLOAD_3, 1, Kind.LOAD, TypeKind.FloatType, 3),\n+\n+    \/** Load double from local variable 0 *\/\n+    DLOAD_0(ClassFile.DLOAD_0, 1, Kind.LOAD, TypeKind.DoubleType, 0),\n+\n+    \/** Load double from local variable 1 *\/\n+    DLOAD_1(ClassFile.DLOAD_1, 1, Kind.LOAD, TypeKind.DoubleType, 1),\n+\n+    \/** Load double from local variable 2 *\/\n+    DLOAD_2(ClassFile.DLOAD_2, 1, Kind.LOAD, TypeKind.DoubleType, 2),\n+\n+    \/** Load double from local variable 3 *\/\n+    DLOAD_3(ClassFile.DLOAD_3, 1, Kind.LOAD, TypeKind.DoubleType, 3),\n+\n+    \/**  Load reference from local variable 0 *\/\n+    ALOAD_0(ClassFile.ALOAD_0, 1, Kind.LOAD, TypeKind.ReferenceType, 0),\n+\n+    \/** Load reference from local variable 1 *\/\n+    ALOAD_1(ClassFile.ALOAD_1, 1, Kind.LOAD, TypeKind.ReferenceType, 1),\n+\n+    \/** Load reference from local variable 2 *\/\n+    ALOAD_2(ClassFile.ALOAD_2, 1, Kind.LOAD, TypeKind.ReferenceType, 2),\n+\n+    \/** Load reference from local variable 3 *\/\n+    ALOAD_3(ClassFile.ALOAD_3, 1, Kind.LOAD, TypeKind.ReferenceType, 3),\n+\n+    \/** Load int from array *\/\n+    IALOAD(ClassFile.IALOAD, 1, Kind.ARRAY_LOAD, TypeKind.IntType),\n+\n+    \/** Load long from array *\/\n+    LALOAD(ClassFile.LALOAD, 1, Kind.ARRAY_LOAD, TypeKind.LongType),\n+\n+    \/** Load float from array *\/\n+    FALOAD(ClassFile.FALOAD, 1, Kind.ARRAY_LOAD, TypeKind.FloatType),\n+\n+    \/** Load double from array *\/\n+    DALOAD(ClassFile.DALOAD, 1, Kind.ARRAY_LOAD, TypeKind.DoubleType),\n+\n+    \/** Load reference from array *\/\n+    AALOAD(ClassFile.AALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ReferenceType),\n+\n+    \/** Load byte from array *\/\n+    BALOAD(ClassFile.BALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ByteType),\n+\n+    \/** Load char from array *\/\n+    CALOAD(ClassFile.CALOAD, 1, Kind.ARRAY_LOAD, TypeKind.CharType),\n+\n+    \/** Load short from array *\/\n+    SALOAD(ClassFile.SALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ShortType),\n+\n+    \/** Store int into local variable *\/\n+    ISTORE(ClassFile.ISTORE, 2, Kind.STORE, TypeKind.IntType, -1),\n+\n+    \/** Store long into local variable *\/\n+    LSTORE(ClassFile.LSTORE, 2, Kind.STORE, TypeKind.LongType, -1),\n+\n+    \/** Store float into local variable *\/\n+    FSTORE(ClassFile.FSTORE, 2, Kind.STORE, TypeKind.FloatType, -1),\n+\n+    \/** Store double into local variable *\/\n+    DSTORE(ClassFile.DSTORE, 2, Kind.STORE, TypeKind.DoubleType, -1),\n+\n+    \/** Store reference into local variable *\/\n+    ASTORE(ClassFile.ASTORE, 2, Kind.STORE, TypeKind.ReferenceType, -1),\n+\n+    \/** Store int into local variable 0 *\/\n+    ISTORE_0(ClassFile.ISTORE_0, 1, Kind.STORE, TypeKind.IntType, 0),\n+\n+    \/** Store int into local variable 1 *\/\n+    ISTORE_1(ClassFile.ISTORE_1, 1, Kind.STORE, TypeKind.IntType, 1),\n+\n+    \/** Store int into local variable 2 *\/\n+    ISTORE_2(ClassFile.ISTORE_2, 1, Kind.STORE, TypeKind.IntType, 2),\n+\n+    \/** Store int into local variable 3 *\/\n+    ISTORE_3(ClassFile.ISTORE_3, 1, Kind.STORE, TypeKind.IntType, 3),\n+\n+    \/** Store long into local variable 0 *\/\n+    LSTORE_0(ClassFile.LSTORE_0, 1, Kind.STORE, TypeKind.LongType, 0),\n+\n+    \/** Store long into local variable 1 *\/\n+    LSTORE_1(ClassFile.LSTORE_1, 1, Kind.STORE, TypeKind.LongType, 1),\n+\n+    \/** Store long into local variable 2 *\/\n+    LSTORE_2(ClassFile.LSTORE_2, 1, Kind.STORE, TypeKind.LongType, 2),\n+\n+    \/** Store long into local variable 3 *\/\n+    LSTORE_3(ClassFile.LSTORE_3, 1, Kind.STORE, TypeKind.LongType, 3),\n+\n+    \/** Store float into local variable 0 *\/\n+    FSTORE_0(ClassFile.FSTORE_0, 1, Kind.STORE, TypeKind.FloatType, 0),\n+\n+    \/** Store float into local variable 1 *\/\n+    FSTORE_1(ClassFile.FSTORE_1, 1, Kind.STORE, TypeKind.FloatType, 1),\n+\n+    \/** Store float into local variable 2 *\/\n+    FSTORE_2(ClassFile.FSTORE_2, 1, Kind.STORE, TypeKind.FloatType, 2),\n+\n+    \/** Store float into local variable 3 *\/\n+    FSTORE_3(ClassFile.FSTORE_3, 1, Kind.STORE, TypeKind.FloatType, 3),\n+\n+    \/** Store double into local variable 0 *\/\n+    DSTORE_0(ClassFile.DSTORE_0, 1, Kind.STORE, TypeKind.DoubleType, 0),\n+\n+    \/** Store double into local variable 1 *\/\n+    DSTORE_1(ClassFile.DSTORE_1, 1, Kind.STORE, TypeKind.DoubleType, 1),\n+\n+    \/** Store double into local variable 2 *\/\n+    DSTORE_2(ClassFile.DSTORE_2, 1, Kind.STORE, TypeKind.DoubleType, 2),\n+\n+    \/** Store double into local variable 3 *\/\n+    DSTORE_3(ClassFile.DSTORE_3, 1, Kind.STORE, TypeKind.DoubleType, 3),\n+\n+    \/** Store reference into local variable 0 *\/\n+    ASTORE_0(ClassFile.ASTORE_0, 1, Kind.STORE, TypeKind.ReferenceType, 0),\n+\n+    \/** Store reference into local variable 1 *\/\n+    ASTORE_1(ClassFile.ASTORE_1, 1, Kind.STORE, TypeKind.ReferenceType, 1),\n+\n+    \/** Store reference into local variable 2 *\/\n+    ASTORE_2(ClassFile.ASTORE_2, 1, Kind.STORE, TypeKind.ReferenceType, 2),\n+\n+    \/** Store reference into local variable 3 *\/\n+    ASTORE_3(ClassFile.ASTORE_3, 1, Kind.STORE, TypeKind.ReferenceType, 3),\n+\n+    \/** Store into int array *\/\n+    IASTORE(ClassFile.IASTORE, 1, Kind.ARRAY_STORE, TypeKind.IntType),\n+\n+    \/** Store into long array *\/\n+    LASTORE(ClassFile.LASTORE, 1, Kind.ARRAY_STORE, TypeKind.LongType),\n+\n+    \/** Store into float array *\/\n+    FASTORE(ClassFile.FASTORE, 1, Kind.ARRAY_STORE, TypeKind.FloatType),\n+\n+    \/** Store into double array *\/\n+    DASTORE(ClassFile.DASTORE, 1, Kind.ARRAY_STORE, TypeKind.DoubleType),\n+\n+    \/** Store into reference array *\/\n+    AASTORE(ClassFile.AASTORE, 1, Kind.ARRAY_STORE, TypeKind.ReferenceType),\n+\n+    \/** Store into byte array *\/\n+    BASTORE(ClassFile.BASTORE, 1, Kind.ARRAY_STORE, TypeKind.ByteType),\n+\n+    \/** Store into char array *\/\n+    CASTORE(ClassFile.CASTORE, 1, Kind.ARRAY_STORE, TypeKind.CharType),\n+\n+    \/** Store into short array *\/\n+    SASTORE(ClassFile.SASTORE, 1, Kind.ARRAY_STORE, TypeKind.ShortType),\n+\n+    \/** Pop the top operand stack value *\/\n+    POP(ClassFile.POP, 1, Kind.STACK),\n+\n+    \/** Pop the top one or two operand stack values *\/\n+    POP2(ClassFile.POP2, 1, Kind.STACK),\n+\n+    \/** Duplicate the top operand stack value *\/\n+    DUP(ClassFile.DUP, 1, Kind.STACK),\n+\n+    \/** Duplicate the top operand stack value and insert two values down *\/\n+    DUP_X1(ClassFile.DUP_X1, 1, Kind.STACK),\n+\n+    \/** Duplicate the top operand stack value and insert two or three values down *\/\n+    DUP_X2(ClassFile.DUP_X2, 1, Kind.STACK),\n+\n+    \/** Duplicate the top one or two operand stack values *\/\n+    DUP2(ClassFile.DUP2, 1, Kind.STACK),\n+\n+    \/** Duplicate the top one or two operand stack values and insert two or three values down *\/\n+    DUP2_X1(ClassFile.DUP2_X1, 1, Kind.STACK),\n+\n+    \/** Duplicate the top one or two operand stack values and insert two, three, or four values down *\/\n+    DUP2_X2(ClassFile.DUP2_X2, 1, Kind.STACK),\n+\n+    \/** Swap the top two operand stack values *\/\n+    SWAP(ClassFile.SWAP, 1, Kind.STACK),\n+\n+    \/** Add int *\/\n+    IADD(ClassFile.IADD, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Add long *\/\n+    LADD(ClassFile.LADD, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Add float *\/\n+    FADD(ClassFile.FADD, 1, Kind.OPERATOR, TypeKind.FloatType),\n+\n+    \/** Add double *\/\n+    DADD(ClassFile.DADD, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+\n+    \/** Subtract int *\/\n+    ISUB(ClassFile.ISUB, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Subtract long *\/\n+    LSUB(ClassFile.LSUB, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Subtract float *\/\n+    FSUB(ClassFile.FSUB, 1, Kind.OPERATOR, TypeKind.FloatType),\n+\n+    \/** Subtract double *\/\n+    DSUB(ClassFile.DSUB, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+\n+    \/** Multiply int *\/\n+    IMUL(ClassFile.IMUL, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Multiply long *\/\n+    LMUL(ClassFile.LMUL, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Multiply float *\/\n+    FMUL(ClassFile.FMUL, 1, Kind.OPERATOR, TypeKind.FloatType),\n+\n+    \/** Multiply double *\/\n+    DMUL(ClassFile.DMUL, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+\n+    \/** Divide int *\/\n+    IDIV(ClassFile.IDIV, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Divide long *\/\n+    LDIV(ClassFile.LDIV, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Divide float *\/\n+    FDIV(ClassFile.FDIV, 1, Kind.OPERATOR, TypeKind.FloatType),\n+\n+    \/** Divide double *\/\n+    DDIV(ClassFile.DDIV, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+\n+    \/** Remainder int *\/\n+    IREM(ClassFile.IREM, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Remainder long *\/\n+    LREM(ClassFile.LREM, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Remainder float *\/\n+    FREM(ClassFile.FREM, 1, Kind.OPERATOR, TypeKind.FloatType),\n+\n+    \/** Remainder double *\/\n+    DREM(ClassFile.DREM, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+\n+    \/** Negate int *\/\n+    INEG(ClassFile.INEG, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Negate long *\/\n+    LNEG(ClassFile.LNEG, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Negate float *\/\n+    FNEG(ClassFile.FNEG, 1, Kind.OPERATOR, TypeKind.FloatType),\n+\n+    \/** Negate double *\/\n+    DNEG(ClassFile.DNEG, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+\n+    \/** Shift left int *\/\n+    ISHL(ClassFile.ISHL, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Shift left long *\/\n+    LSHL(ClassFile.LSHL, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Shift right int *\/\n+    ISHR(ClassFile.ISHR, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Shift right long *\/\n+    LSHR(ClassFile.LSHR, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Logical shift right int *\/\n+    IUSHR(ClassFile.IUSHR, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Logical shift right long *\/\n+    LUSHR(ClassFile.LUSHR, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Boolean AND int *\/\n+    IAND(ClassFile.IAND, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Boolean AND long *\/\n+    LAND(ClassFile.LAND, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Boolean OR int *\/\n+    IOR(ClassFile.IOR, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Boolean OR long *\/\n+    LOR(ClassFile.LOR, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Boolean XOR int *\/\n+    IXOR(ClassFile.IXOR, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Boolean XOR long *\/\n+    LXOR(ClassFile.LXOR, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Increment local variable by constant *\/\n+    IINC(ClassFile.IINC, 3, Kind.INCREMENT, TypeKind.IntType, -1),\n+\n+    \/** Convert int to long *\/\n+    I2L(ClassFile.I2L, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.LongType),\n+\n+    \/** Convert int to float *\/\n+    I2F(ClassFile.I2F, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.FloatType),\n+\n+    \/** Convert int to double *\/\n+    I2D(ClassFile.I2D, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.DoubleType),\n+\n+    \/** Convert long to int *\/\n+    L2I(ClassFile.L2I, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.IntType),\n+\n+    \/** Convert long to float *\/\n+    L2F(ClassFile.L2F, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.FloatType),\n+\n+    \/** Convert long to double *\/\n+    L2D(ClassFile.L2D, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.DoubleType),\n+\n+    \/** Convert float to int *\/\n+    F2I(ClassFile.F2I, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.IntType),\n+\n+    \/** Convert float to long *\/\n+    F2L(ClassFile.F2L, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.LongType),\n+\n+    \/** Convert float to double *\/\n+    F2D(ClassFile.F2D, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.DoubleType),\n+\n+    \/** Convert double to int *\/\n+    D2I(ClassFile.D2I, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.IntType),\n+\n+    \/** Convert double to long *\/\n+    D2L(ClassFile.D2L, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.LongType),\n+\n+    \/** Convert double to float *\/\n+    D2F(ClassFile.D2F, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.FloatType),\n+\n+    \/** Convert int to byte *\/\n+    I2B(ClassFile.I2B, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.ByteType),\n+\n+    \/** Convert int to char *\/\n+    I2C(ClassFile.I2C, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.CharType),\n+\n+    \/** Convert int to short *\/\n+    I2S(ClassFile.I2S, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.ShortType),\n+\n+    \/** Compare long *\/\n+    LCMP(ClassFile.LCMP, 1, Kind.OPERATOR, TypeKind.LongType),\n+\n+    \/** Compare float *\/\n+    FCMPL(ClassFile.FCMPL, 1, Kind.OPERATOR, TypeKind.FloatType),\n+\n+    \/** Compare float *\/\n+    FCMPG(ClassFile.FCMPG, 1, Kind.OPERATOR, TypeKind.FloatType),\n+\n+    \/** Compare double *\/\n+    DCMPL(ClassFile.DCMPL, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+\n+    \/** Compare double *\/\n+    DCMPG(ClassFile.DCMPG, 1, Kind.OPERATOR, TypeKind.DoubleType),\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n+    IFEQ(ClassFile.IFEQ, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n+    IFNE(ClassFile.IFNE, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n+    IFLT(ClassFile.IFLT, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n+    IFGE(ClassFile.IFGE, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n+    IFGT(ClassFile.IFGT, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if int comparison with zero succeeds *\/\n+    IFLE(ClassFile.IFLE, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if int comparison succeeds *\/\n+    IF_ICMPEQ(ClassFile.IF_ICMPEQ, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if int comparison succeeds *\/\n+    IF_ICMPNE(ClassFile.IF_ICMPNE, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if int comparison succeeds *\/\n+    IF_ICMPLT(ClassFile.IF_ICMPLT, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if int comparison succeeds *\/\n+    IF_ICMPGE(ClassFile.IF_ICMPGE, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if int comparison succeeds *\/\n+    IF_ICMPGT(ClassFile.IF_ICMPGT, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if int comparison succeeds *\/\n+    IF_ICMPLE(ClassFile.IF_ICMPLE, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch if reference comparison succeeds *\/\n+    IF_ACMPEQ(ClassFile.IF_ACMPEQ, 3, Kind.BRANCH, TypeKind.ReferenceType),\n+\n+    \/** Branch if reference comparison succeeds *\/\n+    IF_ACMPNE(ClassFile.IF_ACMPNE, 3, Kind.BRANCH, TypeKind.ReferenceType),\n+\n+    \/** Branch always *\/\n+    GOTO(ClassFile.GOTO, 3, Kind.BRANCH, TypeKind.VoidType),\n+\n+    \/**\n+     * Jump subroutine is discontinued opcode\n+     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     *\/\n+    JSR(ClassFile.JSR, 3, Kind.DISCONTINUED_JSR),\n+\n+    \/**\n+     * Return from subroutine is discontinued opcode\n+     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     *\/\n+    RET(ClassFile.RET, 2, Kind.DISCONTINUED_RET),\n+\n+    \/** Access jump table by index and jump *\/\n+    TABLESWITCH(ClassFile.TABLESWITCH, -1, Kind.TABLE_SWITCH),\n+\n+    \/** Access jump table by key match and jump *\/\n+    LOOKUPSWITCH(ClassFile.LOOKUPSWITCH, -1, Kind.LOOKUP_SWITCH),\n+\n+    \/** Return int from method *\/\n+    IRETURN(ClassFile.IRETURN, 1, Kind.RETURN, TypeKind.IntType),\n+\n+    \/** Return long from method *\/\n+    LRETURN(ClassFile.LRETURN, 1, Kind.RETURN, TypeKind.LongType),\n+\n+    \/** Return float from method *\/\n+    FRETURN(ClassFile.FRETURN, 1, Kind.RETURN, TypeKind.FloatType),\n+\n+    \/** Return double from method *\/\n+    DRETURN(ClassFile.DRETURN, 1, Kind.RETURN, TypeKind.DoubleType),\n+\n+    \/** Return reference from method *\/\n+    ARETURN(ClassFile.ARETURN, 1, Kind.RETURN, TypeKind.ReferenceType),\n+\n+    \/** Return void from method *\/\n+    RETURN(ClassFile.RETURN, 1, Kind.RETURN, TypeKind.VoidType),\n+\n+    \/** Get static field from class *\/\n+    GETSTATIC(ClassFile.GETSTATIC, 3, Kind.FIELD_ACCESS),\n+\n+    \/** Set static field in class *\/\n+    PUTSTATIC(ClassFile.PUTSTATIC, 3, Kind.FIELD_ACCESS),\n+\n+    \/** Fetch field from object *\/\n+    GETFIELD(ClassFile.GETFIELD, 3, Kind.FIELD_ACCESS),\n+\n+    \/** Set field in object *\/\n+    PUTFIELD(ClassFile.PUTFIELD, 3, Kind.FIELD_ACCESS),\n+\n+    \/** Invoke instance method; dispatch based on class *\/\n+    INVOKEVIRTUAL(ClassFile.INVOKEVIRTUAL, 3, Kind.INVOKE),\n+\n+    \/**\n+     * Invoke instance method; direct invocation of instance initialization\n+     * methods and methods of the current class and its supertypes\n+     *\/\n+    INVOKESPECIAL(ClassFile.INVOKESPECIAL, 3, Kind.INVOKE),\n+\n+    \/** Invoke a class (static) method *\/\n+    INVOKESTATIC(ClassFile.INVOKESTATIC, 3, Kind.INVOKE),\n+\n+    \/** Invoke interface method *\/\n+    INVOKEINTERFACE(ClassFile.INVOKEINTERFACE, 5, Kind.INVOKE),\n+\n+    \/** Invoke a dynamically-computed call site *\/\n+    INVOKEDYNAMIC(ClassFile.INVOKEDYNAMIC, 5, Kind.INVOKE_DYNAMIC),\n+\n+    \/** Create new object *\/\n+    NEW(ClassFile.NEW, 3, Kind.NEW_OBJECT),\n+\n+    \/** Create new array *\/\n+    NEWARRAY(ClassFile.NEWARRAY, 2, Kind.NEW_PRIMITIVE_ARRAY),\n+\n+    \/** Create new array of reference *\/\n+    ANEWARRAY(ClassFile.ANEWARRAY, 3, Kind.NEW_REF_ARRAY),\n+\n+    \/** Get length of array *\/\n+    ARRAYLENGTH(ClassFile.ARRAYLENGTH, 1, Kind.OPERATOR, TypeKind.IntType),\n+\n+    \/** Throw exception or error *\/\n+    ATHROW(ClassFile.ATHROW, 1, Kind.THROW_EXCEPTION),\n+\n+    \/** Check whether object is of given type *\/\n+    CHECKCAST(ClassFile.CHECKCAST, 3, Kind.TYPE_CHECK),\n+\n+    \/** Determine if object is of given type *\/\n+    INSTANCEOF(ClassFile.INSTANCEOF, 3, Kind.TYPE_CHECK),\n+\n+    \/** Enter monitor for object *\/\n+    MONITORENTER(ClassFile.MONITORENTER, 1, Kind.MONITOR),\n+\n+    \/** Exit monitor for object *\/\n+    MONITOREXIT(ClassFile.MONITOREXIT, 1, Kind.MONITOR),\n+\n+    \/** Create new multidimensional array *\/\n+    MULTIANEWARRAY(ClassFile.MULTIANEWARRAY, 4, Kind.NEW_MULTI_ARRAY),\n+\n+    \/** Branch if reference is null *\/\n+    IFNULL(ClassFile.IFNULL, 3, Kind.BRANCH, TypeKind.ReferenceType),\n+\n+    \/** Branch if reference not null *\/\n+    IFNONNULL(ClassFile.IFNONNULL, 3, Kind.BRANCH, TypeKind.IntType),\n+\n+    \/** Branch always (wide index) *\/\n+    GOTO_W(ClassFile.GOTO_W, 5, Kind.BRANCH, TypeKind.VoidType),\n+\n+    \/**\n+     * Jump subroutine (wide index) is discontinued opcode\n+     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     *\/\n+    JSR_W(ClassFile.JSR_W, 5, Kind.DISCONTINUED_JSR),\n+\n+    \/** Load int from local variable (wide index) *\/\n+    ILOAD_W((ClassFile.WIDE << 8) | ClassFile.ILOAD, 4, Kind.LOAD, TypeKind.IntType, -1),\n+\n+    \/** Load long from local variable (wide index) *\/\n+    LLOAD_W((ClassFile.WIDE << 8) | ClassFile.LLOAD, 4, Kind.LOAD, TypeKind.LongType, -1),\n+\n+    \/** Load float from local variable (wide index) *\/\n+    FLOAD_W((ClassFile.WIDE << 8) | ClassFile.FLOAD, 4, Kind.LOAD, TypeKind.FloatType, -1),\n+\n+    \/** Load double from local variable (wide index) *\/\n+    DLOAD_W((ClassFile.WIDE << 8) | ClassFile.DLOAD, 4, Kind.LOAD, TypeKind.DoubleType, -1),\n+\n+    \/** Load reference from local variable (wide index) *\/\n+    ALOAD_W((ClassFile.WIDE << 8) | ClassFile.ALOAD, 4, Kind.LOAD, TypeKind.ReferenceType, -1),\n+\n+    \/** Store int into local variable (wide index) *\/\n+    ISTORE_W((ClassFile.WIDE << 8) | ClassFile.ISTORE, 4, Kind.STORE, TypeKind.IntType, -1),\n+\n+    \/** Store long into local variable (wide index) *\/\n+    LSTORE_W((ClassFile.WIDE << 8) | ClassFile.LSTORE, 4, Kind.STORE, TypeKind.LongType, -1),\n+\n+    \/** Store float into local variable (wide index) *\/\n+    FSTORE_W((ClassFile.WIDE << 8) | ClassFile.FSTORE, 4, Kind.STORE, TypeKind.FloatType, -1),\n+\n+    \/** Store double into local variable (wide index) *\/\n+    DSTORE_W((ClassFile.WIDE << 8) | ClassFile.DSTORE, 4, Kind.STORE, TypeKind.DoubleType, -1),\n+\n+    \/** Store reference into local variable (wide index) *\/\n+    ASTORE_W((ClassFile.WIDE << 8) | ClassFile.ASTORE, 4, Kind.STORE, TypeKind.ReferenceType, -1),\n+\n+    \/**\n+     * Return from subroutine (wide index) is discontinued opcode\n+     * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+     *\/\n+    RET_W((ClassFile.WIDE << 8) | ClassFile.RET, 4, Kind.DISCONTINUED_RET),\n+\n+    \/** Increment local variable by constant (wide index) *\/\n+    IINC_W((ClassFile.WIDE << 8) | ClassFile.IINC, 6, Kind.INCREMENT, TypeKind.IntType, -1);\n+\n+    \/**\n+     * Kinds of opcodes.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    public static enum Kind {\n+\n+        \/**\n+         * Load from local variable\n+         *\n+         * @see Opcode#ILOAD\n+         * @see Opcode#LLOAD\n+         * @see Opcode#FLOAD\n+         * @see Opcode#DLOAD\n+         * @see Opcode#ALOAD\n+         * @see Opcode#ILOAD_0\n+         * @see Opcode#ILOAD_1\n+         * @see Opcode#ILOAD_2\n+         * @see Opcode#ILOAD_3\n+         * @see Opcode#LLOAD_0\n+         * @see Opcode#LLOAD_1\n+         * @see Opcode#LLOAD_2\n+         * @see Opcode#LLOAD_3\n+         * @see Opcode#FLOAD_0\n+         * @see Opcode#FLOAD_1\n+         * @see Opcode#FLOAD_2\n+         * @see Opcode#FLOAD_3\n+         * @see Opcode#DLOAD_0\n+         * @see Opcode#DLOAD_1\n+         * @see Opcode#DLOAD_2\n+         * @see Opcode#DLOAD_3\n+         * @see Opcode#ALOAD_0\n+         * @see Opcode#ALOAD_1\n+         * @see Opcode#ALOAD_2\n+         * @see Opcode#ALOAD_3\n+         * @see Opcode#ILOAD_W\n+         * @see Opcode#LLOAD_W\n+         * @see Opcode#FLOAD_W\n+         * @see Opcode#DLOAD_W\n+         * @see Opcode#ALOAD_W\n+         *\/\n+        LOAD,\n+\n+        \/**\n+         * Store into local variable\n+         *\n+         * @see Opcode#ISTORE\n+         * @see Opcode#LSTORE\n+         * @see Opcode#FSTORE\n+         * @see Opcode#DSTORE\n+         * @see Opcode#ASTORE\n+         * @see Opcode#ISTORE_0\n+         * @see Opcode#ISTORE_1\n+         * @see Opcode#ISTORE_2\n+         * @see Opcode#ISTORE_3\n+         * @see Opcode#LSTORE_0\n+         * @see Opcode#LSTORE_1\n+         * @see Opcode#LSTORE_2\n+         * @see Opcode#LSTORE_3\n+         * @see Opcode#FSTORE_0\n+         * @see Opcode#FSTORE_1\n+         * @see Opcode#FSTORE_2\n+         * @see Opcode#FSTORE_3\n+         * @see Opcode#DSTORE_0\n+         * @see Opcode#DSTORE_1\n+         * @see Opcode#DSTORE_2\n+         * @see Opcode#DSTORE_3\n+         * @see Opcode#ASTORE_0\n+         * @see Opcode#ASTORE_1\n+         * @see Opcode#ASTORE_2\n+         * @see Opcode#ASTORE_3\n+         * @see Opcode#ISTORE_W\n+         * @see Opcode#LSTORE_W\n+         * @see Opcode#FSTORE_W\n+         * @see Opcode#DSTORE_W\n+         * @see Opcode#ASTORE_W\n+         *\/\n+        STORE,\n+\n+        \/**\n+         * Increment local variable\n+         *\n+         * @see Opcode#IINC\n+         * @see Opcode#IINC_W\n+         *\/\n+        INCREMENT,\n+\n+        \/**\n+         * Branch\n+         *\n+         * @see Opcode#IFEQ\n+         * @see Opcode#IFNE\n+         * @see Opcode#IFLT\n+         * @see Opcode#IFGE\n+         * @see Opcode#IFGT\n+         * @see Opcode#IFLE\n+         * @see Opcode#IF_ICMPEQ\n+         * @see Opcode#IF_ICMPNE\n+         * @see Opcode#IF_ICMPLT\n+         * @see Opcode#IF_ICMPGE\n+         * @see Opcode#IF_ICMPGT\n+         * @see Opcode#IF_ICMPLE\n+         * @see Opcode#IF_ACMPEQ\n+         * @see Opcode#IF_ACMPNE\n+         * @see Opcode#GOTO\n+         * @see Opcode#IFNULL\n+         * @see Opcode#IFNONNULL\n+         * @see Opcode#GOTO_W\n+         *\/\n+        BRANCH,\n+\n+        \/**\n+         * Access jump table by key match and jump\n+         *\n+         * @see Opcode#LOOKUPSWITCH\n+         *\/\n+        LOOKUP_SWITCH,\n+\n+        \/**\n+         * Access jump table by index and jump\n+         *\n+         * @see Opcode#TABLESWITCH\n+         *\/\n+        TABLE_SWITCH,\n+\n+        \/**\n+         * Return from method\n+         *\n+         * @see Opcode#IRETURN\n+         * @see Opcode#LRETURN\n+         * @see Opcode#FRETURN\n+         * @see Opcode#DRETURN\n+         * @see Opcode#ARETURN\n+         * @see Opcode#RETURN\n+         *\/\n+        RETURN,\n+\n+        \/**\n+         * Throw exception or error\n+         *\n+         * @see Opcode#ATHROW\n+         *\/\n+        THROW_EXCEPTION,\n+\n+        \/**\n+         * Access field\n+         *\n+         * @see Opcode#GETSTATIC\n+         * @see Opcode#PUTSTATIC\n+         * @see Opcode#GETFIELD\n+         * @see Opcode#PUTFIELD\n+         *\/\n+        FIELD_ACCESS,\n+\n+        \/**\n+         * Invoke method or constructor\n+         *\n+         * @see Opcode#INVOKEVIRTUAL\n+         * @see Opcode#INVOKESPECIAL\n+         * @see Opcode#INVOKESTATIC\n+         * @see Opcode#INVOKEINTERFACE\n+         *\/\n+        INVOKE,\n+\n+        \/**\n+         * Invoke a dynamically-computed call site\n+         *\n+         * @see Opcode#INVOKEDYNAMIC\n+         *\/\n+        INVOKE_DYNAMIC,\n+\n+        \/**\n+         * Create new object\n+         *\n+         * @see Opcode#NEW\n+         *\/\n+        NEW_OBJECT,\n+\n+        \/**\n+         * Create new array\n+         *\n+         * @see Opcode#NEWARRAY\n+         *\/\n+        NEW_PRIMITIVE_ARRAY,\n+\n+        \/**\n+         * Create new reference array\n+         *\n+         * @see Opcode#ANEWARRAY\n+         *\/\n+        NEW_REF_ARRAY,\n+\n+        \/**\n+         * Create new multidimensional array\n+         *\n+         * @see Opcode#MULTIANEWARRAY\n+         *\/\n+        NEW_MULTI_ARRAY,\n+\n+        \/**\n+         * Check whether object is of given type\n+         *\n+         * @see Opcode#CHECKCAST\n+         * @see Opcode#INSTANCEOF\n+         *\/\n+        TYPE_CHECK,\n+\n+        \/**\n+         * Load from array\n+         *\n+         * @see Opcode#IALOAD\n+         * @see Opcode#LALOAD\n+         * @see Opcode#FALOAD\n+         * @see Opcode#DALOAD\n+         * @see Opcode#AALOAD\n+         * @see Opcode#BALOAD\n+         * @see Opcode#CALOAD\n+         * @see Opcode#SALOAD\n+         *\/\n+        ARRAY_LOAD,\n+\n+        \/**\n+         * Store into array\n+         *\n+         * @see Opcode#IASTORE\n+         * @see Opcode#LASTORE\n+         * @see Opcode#FASTORE\n+         * @see Opcode#DASTORE\n+         * @see Opcode#AASTORE\n+         * @see Opcode#BASTORE\n+         * @see Opcode#CASTORE\n+         * @see Opcode#SASTORE\n+         *\/\n+        ARRAY_STORE,\n+\n+        \/**\n+         * Stack operations\n+         *\n+         * @see Opcode#POP\n+         * @see Opcode#POP2\n+         * @see Opcode#DUP\n+         * @see Opcode#DUP_X1\n+         * @see Opcode#DUP_X2\n+         * @see Opcode#DUP2\n+         * @see Opcode#DUP2_X1\n+         * @see Opcode#DUP2_X2\n+         * @see Opcode#SWAP\n+         *\/\n+        STACK,\n+\n+        \/**\n+         * Type conversions\n+         *\n+         * @see Opcode#I2L\n+         * @see Opcode#I2F\n+         * @see Opcode#I2D\n+         * @see Opcode#L2I\n+         * @see Opcode#L2F\n+         * @see Opcode#L2D\n+         * @see Opcode#F2I\n+         * @see Opcode#F2L\n+         * @see Opcode#F2D\n+         * @see Opcode#D2I\n+         * @see Opcode#D2L\n+         * @see Opcode#D2F\n+         * @see Opcode#I2B\n+         * @see Opcode#I2C\n+         * @see Opcode#I2S\n+         *\/\n+        CONVERT,\n+\n+        \/**\n+         * Operators\n+         *\n+         * @see Opcode#IADD\n+         * @see Opcode#LADD\n+         * @see Opcode#FADD\n+         * @see Opcode#DADD\n+         * @see Opcode#ISUB\n+         * @see Opcode#LSUB\n+         * @see Opcode#FSUB\n+         * @see Opcode#DSUB\n+         * @see Opcode#IMUL\n+         * @see Opcode#LMUL\n+         * @see Opcode#FMUL\n+         * @see Opcode#DMUL\n+         * @see Opcode#IDIV\n+         * @see Opcode#LDIV\n+         * @see Opcode#FDIV\n+         * @see Opcode#DDIV\n+         * @see Opcode#IREM\n+         * @see Opcode#LREM\n+         * @see Opcode#FREM\n+         * @see Opcode#DREM\n+         * @see Opcode#INEG\n+         * @see Opcode#LNEG\n+         * @see Opcode#FNEG\n+         * @see Opcode#DNEG\n+         * @see Opcode#ISHL\n+         * @see Opcode#LSHL\n+         * @see Opcode#ISHR\n+         * @see Opcode#LSHR\n+         * @see Opcode#IUSHR\n+         * @see Opcode#LUSHR\n+         * @see Opcode#IAND\n+         * @see Opcode#LAND\n+         * @see Opcode#IOR\n+         * @see Opcode#LOR\n+         * @see Opcode#IXOR\n+         * @see Opcode#LXOR\n+         * @see Opcode#LCMP\n+         * @see Opcode#FCMPL\n+         * @see Opcode#FCMPG\n+         * @see Opcode#DCMPL\n+         * @see Opcode#DCMPG\n+         * @see Opcode#ARRAYLENGTH\n+         *\/\n+        OPERATOR,\n+\n+        \/**\n+         * Constants\n+         *\n+         * @see Opcode#ACONST_NULL\n+         * @see Opcode#ICONST_M1\n+         * @see Opcode#ICONST_0\n+         * @see Opcode#ICONST_1\n+         * @see Opcode#ICONST_2\n+         * @see Opcode#ICONST_3\n+         * @see Opcode#ICONST_4\n+         * @see Opcode#ICONST_5\n+         * @see Opcode#LCONST_0\n+         * @see Opcode#LCONST_1\n+         * @see Opcode#FCONST_0\n+         * @see Opcode#FCONST_1\n+         * @see Opcode#FCONST_2\n+         * @see Opcode#DCONST_0\n+         * @see Opcode#DCONST_1\n+         * @see Opcode#BIPUSH\n+         * @see Opcode#SIPUSH\n+         * @see Opcode#LDC\n+         * @see Opcode#LDC_W\n+         * @see Opcode#LDC2_W\n+         *\/\n+        CONSTANT,\n+\n+        \/**\n+         * Monitor\n+         *\n+         * @see Opcode#MONITORENTER\n+         * @see Opcode#MONITOREXIT\n+         *\/\n+        MONITOR,\n+\n+        \/**\n+         * Do nothing\n+         *\n+         * @see Opcode#NOP\n+         *\/\n+        NOP,\n+\n+        \/**\n+         * Discontinued jump subroutine\n+         *\n+         * @see Opcode#JSR\n+         * @see Opcode#JSR_W\n+         * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+         *\/\n+        DISCONTINUED_JSR,\n+\n+        \/**\n+         * Discontinued return from subroutine\n+         *\n+         * @see Opcode#RET\n+         * @see Opcode#RET_W\n+         * @see java.lang.classfile.instruction.DiscontinuedInstruction\n+         *\/\n+        DISCONTINUED_RET;\n+    }\n+\n+    private final int bytecode;\n+    private final int sizeIfFixed;\n+    private final Kind kind;\n+    private final TypeKind primaryTypeKind;\n+    private final TypeKind secondaryTypeKind;\n+    private final int slot;\n+    private final ConstantDesc constantValue;\n+\n+    Opcode(int bytecode, int sizeIfFixed, Kind kind) {\n+        this(bytecode, sizeIfFixed, kind, null, null, -1, null);\n+    }\n+\n+    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind typeKind) {\n+        this(bytecode, sizeIfFixed, kind, typeKind, null, -1, null);\n+    }\n+\n+    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind typeKind, int slot) {\n+        this(bytecode, sizeIfFixed, kind, typeKind, null, slot, null);\n+    }\n+\n+    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind typeKind, int slot, ConstantDesc constantValue) {\n+        this(bytecode, sizeIfFixed, kind, typeKind, null, slot, constantValue);\n+    }\n+\n+    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind primaryTypeKind, TypeKind secondaryTypeKind) {\n+        this(bytecode, sizeIfFixed, kind, primaryTypeKind, secondaryTypeKind, 0, null);\n+    }\n+\n+    Opcode(int bytecode,\n+           int sizeIfFixed,\n+           Kind kind,\n+           TypeKind primaryTypeKind,\n+           TypeKind secondaryTypeKind,\n+           int slot,\n+           ConstantDesc constantValue) {\n+        this.bytecode = bytecode;\n+        this.sizeIfFixed = sizeIfFixed;\n+        this.kind = kind;\n+        this.primaryTypeKind = primaryTypeKind;\n+        this.secondaryTypeKind = secondaryTypeKind;\n+        this.slot = slot;\n+        this.constantValue = constantValue;\n+    }\n+\n+    \/**\n+     * {@return bytecode}\n+     *\/\n+    public int bytecode() { return bytecode; }\n+\n+    \/**\n+     * {@return true if the instruction has extended local variable index by additional bytes}\n+     *\/\n+    public boolean isWide() { return bytecode > 255; }\n+\n+    \/**\n+     * {@return size of the instruction if fixed, or -1 otherwise}\n+     *\/\n+    public int sizeIfFixed() { return sizeIfFixed; }\n+\n+    \/**\n+     * {@return instruction kind}\n+     *\/\n+    public Kind kind() { return kind; }\n+\n+    \/**\n+     * {@return primary type kind for instructions operating with at least one type, or null otherwise}\n+     *\/\n+    public TypeKind primaryTypeKind() {\n+        return primaryTypeKind;\n+    }\n+\n+    \/**\n+     * {@return secondary type kind for instructions operating with two types, or null otherwise}\n+     *\/\n+    public TypeKind secondaryTypeKind() {\n+        return secondaryTypeKind;\n+    }\n+\n+    \/**\n+     * {@return local variable slot for instructions operating with local variable, or -1 otherwise}\n+     *\/\n+    public int slot() {\n+        return slot;\n+    }\n+\n+    \/**\n+     * {@return constant value for constant instructions, or null otherwise}\n+     *\/\n+    public ConstantDesc constantValue() {\n+        return constantValue;\n+    }\n+\n+    \/**\n+     * {@return true if the instruction represents an unconditional branch}\n+     *\/\n+    public boolean isUnconditionalBranch() {\n+        return switch (this) {\n+            case GOTO, ATHROW, GOTO_W, LOOKUPSWITCH, TABLESWITCH -> true;\n+            default -> kind() == Kind.RETURN;\n+        };\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Opcode.java","additions":1179,"deletions":0,"binary":false,"changes":1179,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.instruction.CharacterRange;\n+import java.lang.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.instruction.LabelTarget;\n+import java.lang.classfile.instruction.LineNumber;\n+import java.lang.classfile.instruction.LocalVariable;\n+import java.lang.classfile.instruction.LocalVariableType;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models metadata about a {@link CodeAttribute}, such as entries in the\n+ * exception table, line number table, local variable table, or the mapping\n+ * between instructions and labels.  Pseudo-instructions are delivered as part\n+ * of the element stream of a {@link CodeModel}.  Delivery of some\n+ * pseudo-instructions can be disabled by modifying the value of classfile\n+ * options (e.g., {@link ClassFile.DebugElementsOption}).\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface PseudoInstruction\n+        extends CodeElement\n+        permits CharacterRange, ExceptionCatch, LabelTarget, LineNumber, LocalVariable, LocalVariableType, AbstractPseudoInstruction {\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/PseudoInstruction.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -34,0 +34,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -37,0 +38,3 @@\n+ *\n+ * @sealedGraph\n+ * @since 22\n@@ -38,0 +42,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -53,0 +58,1 @@\n+     * {@return a Java type signature}\n@@ -54,1 +60,0 @@\n-     * @return Java type signature\n@@ -67,0 +72,2 @@\n+     *\n+     * @since 22\n@@ -68,0 +75,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -100,0 +108,3 @@\n+     *\n+     * @sealedGraph\n+     * @since 22\n@@ -101,0 +112,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -108,0 +120,2 @@\n+     *\n+     * @since 22\n@@ -109,0 +123,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -172,0 +187,2 @@\n+     *\n+     * @since 22\n@@ -173,0 +190,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -179,0 +197,2 @@\n+         *\n+         * @since 22\n@@ -180,0 +200,1 @@\n+        @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -255,0 +276,2 @@\n+     *\n+     * @since 22\n@@ -256,0 +279,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -274,0 +298,2 @@\n+     *\n+     * @since 22\n@@ -275,0 +301,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -307,0 +334,2 @@\n+     *\n+     * @since 22\n@@ -308,0 +337,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -349,0 +379,3 @@\n+     *\n+     * @sealedGraph\n+     * @since 22\n@@ -350,0 +383,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Signature.java","additions":36,"deletions":2,"binary":false,"changes":38,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Signature.java","status":"renamed"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.SuperclassImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the superclass of a class.  Delivered as a {@link\n+ * java.lang.classfile.ClassElement} when traversing a {@link ClassModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface Superclass\n+        extends ClassElement\n+        permits SuperclassImpl {\n+\n+    \/** {@return the superclass} *\/\n+    ClassEntry superclassEntry();\n+\n+    \/**\n+     * {@return a {@linkplain Superclass} element}\n+     * @param superclassEntry the superclass\n+     *\/\n+    static Superclass of(ClassEntry superclassEntry) {\n+        return new SuperclassImpl(superclassEntry);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Superclass.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,862 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.List;\n+\n+import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.TargetInfoImpl;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+import static java.lang.classfile.ClassFile.TAT_CAST;\n+import static java.lang.classfile.ClassFile.TAT_CLASS_EXTENDS;\n+import static java.lang.classfile.ClassFile.TAT_CLASS_TYPE_PARAMETER;\n+import static java.lang.classfile.ClassFile.TAT_CLASS_TYPE_PARAMETER_BOUND;\n+import static java.lang.classfile.ClassFile.TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT;\n+import static java.lang.classfile.ClassFile.TAT_CONSTRUCTOR_REFERENCE;\n+import static java.lang.classfile.ClassFile.TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT;\n+import static java.lang.classfile.ClassFile.TAT_EXCEPTION_PARAMETER;\n+import static java.lang.classfile.ClassFile.TAT_FIELD;\n+import static java.lang.classfile.ClassFile.TAT_INSTANCEOF;\n+import static java.lang.classfile.ClassFile.TAT_LOCAL_VARIABLE;\n+import static java.lang.classfile.ClassFile.TAT_METHOD_FORMAL_PARAMETER;\n+import static java.lang.classfile.ClassFile.TAT_METHOD_INVOCATION_TYPE_ARGUMENT;\n+import static java.lang.classfile.ClassFile.TAT_METHOD_RECEIVER;\n+import static java.lang.classfile.ClassFile.TAT_METHOD_REFERENCE;\n+import static java.lang.classfile.ClassFile.TAT_METHOD_REFERENCE_TYPE_ARGUMENT;\n+import static java.lang.classfile.ClassFile.TAT_METHOD_RETURN;\n+import static java.lang.classfile.ClassFile.TAT_METHOD_TYPE_PARAMETER;\n+import static java.lang.classfile.ClassFile.TAT_METHOD_TYPE_PARAMETER_BOUND;\n+import static java.lang.classfile.ClassFile.TAT_NEW;\n+import static java.lang.classfile.ClassFile.TAT_RESOURCE_VARIABLE;\n+import static java.lang.classfile.ClassFile.TAT_THROWS;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an annotation on a type use, as defined in {@jvms 4.7.19} and {@jvms 4.7.20}.\n+ *\n+ * @see RuntimeVisibleTypeAnnotationsAttribute\n+ * @see RuntimeInvisibleTypeAnnotationsAttribute\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface TypeAnnotation\n+        extends Annotation\n+        permits UnboundAttribute.UnboundTypeAnnotation {\n+\n+    \/**\n+     * The kind of target on which the annotation appears, as defined in {@jvms 4.7.20.1}.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    public enum TargetType {\n+        \/** For annotations on a class type parameter declaration. *\/\n+        CLASS_TYPE_PARAMETER(TAT_CLASS_TYPE_PARAMETER, 1),\n+\n+        \/** For annotations on a method type parameter declaration. *\/\n+        METHOD_TYPE_PARAMETER(TAT_METHOD_TYPE_PARAMETER, 1),\n+\n+        \/** For annotations on the type of an \"extends\" or \"implements\" clause. *\/\n+        CLASS_EXTENDS(TAT_CLASS_EXTENDS, 2),\n+\n+        \/** For annotations on a bound of a type parameter of a class. *\/\n+        CLASS_TYPE_PARAMETER_BOUND(TAT_CLASS_TYPE_PARAMETER_BOUND, 2),\n+\n+        \/** For annotations on a bound of a type parameter of a method. *\/\n+        METHOD_TYPE_PARAMETER_BOUND(TAT_METHOD_TYPE_PARAMETER_BOUND, 2),\n+\n+        \/** For annotations on a field. *\/\n+        FIELD(TAT_FIELD, 0),\n+\n+        \/** For annotations on a method return type. *\/\n+        METHOD_RETURN(TAT_METHOD_RETURN, 0),\n+\n+        \/** For annotations on the method receiver. *\/\n+        METHOD_RECEIVER(TAT_METHOD_RECEIVER, 0),\n+\n+        \/** For annotations on a method parameter. *\/\n+        METHOD_FORMAL_PARAMETER(TAT_METHOD_FORMAL_PARAMETER, 1),\n+\n+        \/** For annotations on a throws clause in a method declaration. *\/\n+        THROWS(TAT_THROWS, 2),\n+\n+        \/** For annotations on a local variable. *\/\n+        LOCAL_VARIABLE(TAT_LOCAL_VARIABLE, -1),\n+\n+        \/** For annotations on a resource variable. *\/\n+        RESOURCE_VARIABLE(TAT_RESOURCE_VARIABLE, -1),\n+\n+        \/** For annotations on an exception parameter. *\/\n+        EXCEPTION_PARAMETER(TAT_EXCEPTION_PARAMETER, 2),\n+\n+        \/** For annotations on a type test. *\/\n+        INSTANCEOF(TAT_INSTANCEOF, 2),\n+\n+        \/** For annotations on an object creation expression. *\/\n+        NEW(TAT_NEW, 2),\n+\n+        \/** For annotations on a constructor reference receiver. *\/\n+        CONSTRUCTOR_REFERENCE(TAT_CONSTRUCTOR_REFERENCE, 2),\n+\n+        \/** For annotations on a method reference receiver. *\/\n+        METHOD_REFERENCE(TAT_METHOD_REFERENCE, 2),\n+\n+        \/** For annotations on a typecast. *\/\n+        CAST(TAT_CAST, 3),\n+\n+        \/** For annotations on a type argument of an object creation expression. *\/\n+        CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT(TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT, 3),\n+\n+        \/** For annotations on a type argument of a method call. *\/\n+        METHOD_INVOCATION_TYPE_ARGUMENT(TAT_METHOD_INVOCATION_TYPE_ARGUMENT, 3),\n+\n+        \/** For annotations on a type argument of a constructor reference. *\/\n+        CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT(TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT, 3),\n+\n+        \/** For annotations on a type argument of a method reference. *\/\n+        METHOD_REFERENCE_TYPE_ARGUMENT(TAT_METHOD_REFERENCE_TYPE_ARGUMENT, 3);\n+\n+        private final int targetTypeValue;\n+        private final int sizeIfFixed;\n+\n+        private TargetType(int targetTypeValue, int sizeIfFixed) {\n+            this.targetTypeValue = targetTypeValue;\n+            this.sizeIfFixed = sizeIfFixed;\n+        }\n+\n+        \/**\n+         * {@return the target type value}\n+         *\/\n+        public int targetTypeValue() {\n+            return targetTypeValue;\n+        }\n+\n+        \/**\n+         * {@return the size of the target type if fixed or -1 if variable}\n+         *\/\n+        public int sizeIfFixed() {\n+            return sizeIfFixed;\n+        }\n+    }\n+\n+    \/**\n+     * {@return information describing precisely which type in a declaration or expression\n+     * is annotated}\n+     *\/\n+    TargetInfo targetInfo();\n+\n+    \/**\n+     * {@return which part of the type indicated by {@link #targetInfo()} is annotated}\n+     *\/\n+    List<TypePathComponent> targetPath();\n+\n+    \/**\n+     * {@return a type annotation}\n+     * @param targetInfo which type in a declaration or expression is annotated\n+     * @param targetPath which part of the type is annotated\n+     * @param annotationClassUtf8Entry the annotation class\n+     * @param annotationElements the annotation elements\n+     *\/\n+    static TypeAnnotation of(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n+                             Utf8Entry annotationClassUtf8Entry,\n+                             List<AnnotationElement> annotationElements) {\n+        return new UnboundAttribute.UnboundTypeAnnotation(targetInfo, targetPath,\n+                annotationClassUtf8Entry, annotationElements);\n+    }\n+\n+    \/**\n+     * {@return a type annotation}\n+     * @param targetInfo which type in a declaration or expression is annotated\n+     * @param targetPath which part of the type is annotated\n+     * @param annotationClass the annotation class\n+     * @param annotationElements the annotation elements\n+     *\/\n+    static TypeAnnotation of(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n+                             ClassDesc annotationClass,\n+                             AnnotationElement... annotationElements) {\n+        return of(targetInfo, targetPath, annotationClass, List.of(annotationElements));\n+    }\n+\n+    \/**\n+     * {@return a type annotation}\n+     * @param targetInfo which type in a declaration or expression is annotated\n+     * @param targetPath which part of the type is annotated\n+     * @param annotationClass the annotation class\n+     * @param annotationElements the annotation elements\n+     *\/\n+    static TypeAnnotation of(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n+                             ClassDesc annotationClass,\n+                             List<AnnotationElement> annotationElements) {\n+        return of(targetInfo, targetPath,\n+                TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), annotationElements);\n+    }\n+\n+    \/**\n+     * {@return a type annotation}\n+     * @param targetInfo which type in a declaration or expression is annotated\n+     * @param targetPath which part of the type is annotated\n+     * @param annotationClassUtf8Entry the annotation class\n+     * @param annotationElements the annotation elements\n+     *\/\n+    static TypeAnnotation of(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n+                             Utf8Entry annotationClassUtf8Entry,\n+                             AnnotationElement... annotationElements) {\n+        return of(targetInfo, targetPath, annotationClassUtf8Entry, List.of(annotationElements));\n+    }\n+\n+    \/**\n+     * Specifies which type in a declaration or expression is being annotated.\n+     *\n+     * @sealedGraph\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface TargetInfo {\n+\n+        \/**\n+         * {@return the type of the target}\n+         *\/\n+        TargetType targetType();\n+\n+        \/**\n+         * {@return the size of the target info}\n+         *\/\n+        default int size() {\n+            return targetType().sizeIfFixed;\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on a class or method type parameter declaration}\n+         * @param targetType {@link TargetType#CLASS_TYPE_PARAMETER} or {@link TargetType#METHOD_TYPE_PARAMETER}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n+        static TypeParameterTarget ofTypeParameter(TargetType targetType, int typeParameterIndex) {\n+            return new TargetInfoImpl.TypeParameterTargetImpl(targetType, typeParameterIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on a class type parameter declaration}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n+        static TypeParameterTarget ofClassTypeParameter(int typeParameterIndex) {\n+            return ofTypeParameter(TargetType.CLASS_TYPE_PARAMETER, typeParameterIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on a method type parameter declaration}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         *\/\n+        static TypeParameterTarget ofMethodTypeParameter(int typeParameterIndex) {\n+            return ofTypeParameter(TargetType.METHOD_TYPE_PARAMETER, typeParameterIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the type of an \"extends\" or \"implements\" clause}\n+         * @param supertypeIndex the index into the interfaces array or 65535 to indicate it is the superclass\n+         *\/\n+        static SupertypeTarget ofClassExtends(int supertypeIndex) {\n+            return new TargetInfoImpl.SupertypeTargetImpl(supertypeIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic class, interface, method, or constructor}\n+         * @param targetType {@link TargetType#CLASS_TYPE_PARAMETER_BOUND} or {@link TargetType#METHOD_TYPE_PARAMETER_BOUND}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n+        static TypeParameterBoundTarget ofTypeParameterBound(TargetType targetType, int typeParameterIndex, int boundIndex) {\n+            return new TargetInfoImpl.TypeParameterBoundTargetImpl(targetType, typeParameterIndex, boundIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic class, or interface}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n+        static TypeParameterBoundTarget ofClassTypeParameterBound(int typeParameterIndex, int boundIndex) {\n+            return ofTypeParameterBound(TargetType.CLASS_TYPE_PARAMETER_BOUND, typeParameterIndex, boundIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the i'th bound of the j'th type parameter declaration of\n+         * a generic method, or constructor}\n+         * @param typeParameterIndex specifies which type parameter declaration is annotated\n+         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n+         *\/\n+        static TypeParameterBoundTarget ofMethodTypeParameterBound(int typeParameterIndex, int boundIndex) {\n+            return ofTypeParameterBound(TargetType.METHOD_TYPE_PARAMETER_BOUND, typeParameterIndex, boundIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations}\n+         * @param targetType {@link TargetType#FIELD}, {@link TargetType#METHOD_RETURN} or {@link TargetType#METHOD_RECEIVER}\n+         *\/\n+        static EmptyTarget of(TargetType targetType) {\n+            return new TargetInfoImpl.EmptyTargetImpl(targetType);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the type in a field or record declaration}\n+         *\/\n+        static EmptyTarget ofField() {\n+            return of(TargetType.FIELD);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the return type of a method or a newly constructed object}\n+         *\/\n+        static EmptyTarget ofMethodReturn() {\n+            return of(TargetType.METHOD_RETURN);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the receiver type of a method or constructor}\n+         *\/\n+        static EmptyTarget ofMethodReceiver() {\n+            return of(TargetType.METHOD_RECEIVER);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the type in a formal parameter declaration of a method,\n+         * constructor, or lambda expression}\n+         * @param formalParameterIndex specifies which formal parameter declaration has an annotated type\n+         *\/\n+        static FormalParameterTarget ofMethodFormalParameter(int formalParameterIndex) {\n+            return new TargetInfoImpl.FormalParameterTargetImpl(formalParameterIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the i'th type in the throws clause of a method or\n+         * constructor declaration}\n+         * @param throwsTargetIndex the index into the exception table of the Exceptions attribute of the method\n+         *\/\n+        static ThrowsTarget ofThrows(int throwsTargetIndex) {\n+            return new TargetInfoImpl.ThrowsTargetImpl(throwsTargetIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the type in a local variable declaration,\n+         * including a variable declared as a resource in a try-with-resources statement}\n+         * @param targetType {@link TargetType#LOCAL_VARIABLE} or {@link TargetType#RESOURCE_VARIABLE}\n+         * @param table the list of local variable targets\n+         *\/\n+        static LocalVarTarget ofVariable(TargetType targetType, List<LocalVarTargetInfo> table) {\n+            return new TargetInfoImpl.LocalVarTargetImpl(targetType, table);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the type in a local variable declaration}\n+         * @param table the list of local variable targets\n+         *\/\n+        static LocalVarTarget ofLocalVariable(List<LocalVarTargetInfo> table) {\n+            return ofVariable(TargetType.LOCAL_VARIABLE, table);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the type in a local variable declared\n+         * as a resource in a try-with-resources statement}\n+         * @param table the list of local variable targets\n+         *\/\n+        static LocalVarTarget ofResourceVariable(List<LocalVarTargetInfo> table) {\n+            return ofVariable(TargetType.RESOURCE_VARIABLE, table);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the i'th type in an exception parameter declaration}\n+         * @param exceptionTableIndex the index into the exception table of the Code attribute\n+         *\/\n+        static CatchTarget ofExceptionParameter(int exceptionTableIndex) {\n+            return new TargetInfoImpl.CatchTargetImpl(exceptionTableIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the type in an instanceof expression or a new expression,\n+         * or the type before the :: in a method reference expression}\n+         * @param targetType {@link TargetType#INSTANCEOF}, {@link TargetType#NEW},\n+         *                   {@link TargetType#CONSTRUCTOR_REFERENCE},\n+         *                   or {@link TargetType#METHOD_REFERENCE}\n+         * @param target the code label corresponding to the instruction\n+         *\/\n+        static OffsetTarget ofOffset(TargetType targetType, Label target) {\n+            return new TargetInfoImpl.OffsetTargetImpl(targetType, target);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the type in an instanceof expression}\n+         * @param target the code label corresponding to the instruction\n+         *\/\n+        static OffsetTarget ofInstanceofExpr(Label target) {\n+            return ofOffset(TargetType.INSTANCEOF, target);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the type in a new expression}\n+         * @param target the code label corresponding to the instruction\n+         *\/\n+        static OffsetTarget ofNewExpr(Label target) {\n+            return ofOffset(TargetType.NEW, target);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the type before the :: in a constructor reference expression}\n+         * @param target the code label corresponding to the instruction\n+         *\/\n+        static OffsetTarget ofConstructorReference(Label target) {\n+            return ofOffset(TargetType.CONSTRUCTOR_REFERENCE, target);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the type before the :: in a method reference expression}\n+         * @param target the code label corresponding to the instruction\n+         *\/\n+        static OffsetTarget ofMethodReference(Label target) {\n+            return ofOffset(TargetType.METHOD_REFERENCE, target);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the i'th type in a cast expression,\n+         * or on the i'th type argument in the explicit type argument list for any of the following:\n+         * a new expression, an explicit constructor invocation statement, a method invocation expression,\n+         * or a method reference expression}\n+         * @param targetType {@link TargetType#CAST}, {@link TargetType#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},\n+         *                   {@link TargetType#METHOD_INVOCATION_TYPE_ARGUMENT},\n+         *                   {@link TargetType#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT},\n+         *                   or {@link TargetType#METHOD_REFERENCE_TYPE_ARGUMENT}\n+         * @param target the code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the cast operator or argument is annotated\n+         *\/\n+        static TypeArgumentTarget ofTypeArgument(TargetType targetType, Label target, int typeArgumentIndex) {\n+            return new TargetInfoImpl.TypeArgumentTargetImpl(targetType, target, typeArgumentIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the i'th type in a cast expression}\n+         * @param target the code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the cast operator is annotated\n+         *\/\n+        static TypeArgumentTarget ofCastExpr(Label target, int typeArgumentIndex) {\n+            return ofTypeArgument(TargetType.CAST, target, typeArgumentIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the i'th type argument in the explicit type argument list for\n+         * an explicit constructor invocation statement}\n+         * @param target the code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n+        static TypeArgumentTarget ofConstructorInvocationTypeArgument(Label target, int typeArgumentIndex) {\n+            return ofTypeArgument(TargetType.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT, target, typeArgumentIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the i'th type argument in the explicit type argument list for\n+         * a method invocation expression}\n+         * @param target the code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n+        static TypeArgumentTarget ofMethodInvocationTypeArgument(Label target, int typeArgumentIndex) {\n+            return ofTypeArgument(TargetType.METHOD_INVOCATION_TYPE_ARGUMENT, target, typeArgumentIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the i'th type argument in the explicit type argument list for\n+         * a new expression}\n+         * @param target the code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n+        static TypeArgumentTarget ofConstructorReferenceTypeArgument(Label target, int typeArgumentIndex) {\n+            return ofTypeArgument(TargetType.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT, target, typeArgumentIndex);\n+        }\n+\n+        \/**\n+         * {@return a target for annotations on the i'th type argument in the explicit type argument list for\n+         * a method reference expression}\n+         * @param target the code label corresponding to the instruction\n+         * @param typeArgumentIndex specifies which type in the argument is annotated\n+         *\/\n+        static TypeArgumentTarget ofMethodReferenceTypeArgument(Label target, int typeArgumentIndex) {\n+            return ofTypeArgument(TargetType.METHOD_REFERENCE_TYPE_ARGUMENT, target, typeArgumentIndex);\n+        }\n+    }\n+\n+    \/**\n+     * Indicates that an annotation appears on the declaration of the i'th type\n+     * parameter of a generic class, generic interface, generic method, or\n+     * generic constructor.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface TypeParameterTarget extends TargetInfo\n+            permits TargetInfoImpl.TypeParameterTargetImpl {\n+\n+        \/**\n+         * JVMS: The value of the type_parameter_index item specifies which type parameter declaration is annotated.\n+         * A type_parameter_index value of 0 specifies the first type parameter declaration.\n+         *\n+         * @return the index into the type parameters\n+         *\/\n+        int typeParameterIndex();\n+    }\n+\n+    \/**\n+     * Indicates that an annotation appears on a type in the extends or implements\n+     * clause of a class or interface declaration.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface SupertypeTarget extends TargetInfo\n+            permits TargetInfoImpl.SupertypeTargetImpl {\n+\n+        \/**\n+         * JVMS: A supertype_index value of 65535 specifies that the annotation appears on the superclass in an extends\n+         * clause of a class declaration.\n+         *\n+         * Any other supertype_index value is an index into the interfaces array of the enclosing ClassFile structure,\n+         * and specifies that the annotation appears on that superinterface in either the implements clause of a class\n+         * declaration or the extends clause of an interface declaration.\n+         *\n+         * @return the index into the interfaces array or 65535 to indicate it is the superclass\n+         *\/\n+        int supertypeIndex();\n+    }\n+\n+    \/**\n+     * Indicates that an annotation appears on the i'th bound of the j'th\n+     * type parameter declaration of a generic class, interface, method, or\n+     * constructor.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface TypeParameterBoundTarget extends TargetInfo\n+            permits TargetInfoImpl.TypeParameterBoundTargetImpl {\n+\n+        \/**\n+         * Which type parameter declaration has an annotated bound.\n+         *\n+         * @return the zero-origin index into the type parameters\n+         *\/\n+        int typeParameterIndex();\n+\n+        \/**\n+         * Which bound of the type parameter declaration is annotated.\n+         *\n+         * @return the zero-origin index into bounds on the type parameter\n+         *\/\n+        int boundIndex();\n+    }\n+\n+    \/**\n+     * Indicates that an annotation appears on either the type in a field\n+     * declaration, the return type of a method, the type of a newly constructed\n+     * object, or the receiver type of a method or constructor.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface EmptyTarget extends TargetInfo\n+            permits TargetInfoImpl.EmptyTargetImpl {\n+    }\n+\n+    \/**\n+     * Indicates that an annotation appears on the type in a formal parameter\n+     * declaration of a method, constructor, or lambda expression.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface FormalParameterTarget extends TargetInfo\n+            permits TargetInfoImpl.FormalParameterTargetImpl {\n+\n+        \/**\n+         * Which formal parameter declaration has an annotated type.\n+         *\n+         * @return the index into the formal parameter declarations, in the order\n+         * declared in the source code\n+         *\/\n+        int formalParameterIndex();\n+    }\n+\n+    \/**\n+     * Indicates that an annotation appears on the i'th type in the throws\n+     * clause of a method or constructor declaration.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface ThrowsTarget extends TargetInfo\n+            permits TargetInfoImpl.ThrowsTargetImpl {\n+\n+        \/**\n+         * The index into the exception_index_table array of the\n+         * Exceptions attribute of the method_info structure enclosing the\n+         * RuntimeVisibleTypeAnnotations attribute.\n+         *\n+         * @return the index into the list java.lang.classfile.attribute.ExceptionsAttribute.exceptions()\n+         *\/\n+        int throwsTargetIndex();\n+    }\n+\n+    \/**\n+     * Indicates that an annotation appears on the type in a local variable declaration,\n+     * including a variable declared as a resource in a try-with-resources statement.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface LocalVarTarget extends TargetInfo\n+            permits TargetInfoImpl.LocalVarTargetImpl {\n+\n+        \/**\n+         * {@return the table of local variable location\/indices.}\n+         *\/\n+        List<LocalVarTargetInfo> table();\n+    }\n+\n+    \/**\n+     * Indicates a range of code array offsets within which a local variable\n+     * has a value, and the index into the local variable array of the current\n+     * frame at which that local variable can be found.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface LocalVarTargetInfo\n+            permits TargetInfoImpl.LocalVarTargetInfoImpl {\n+\n+        \/**\n+         * The given local variable has a value at indices into the code array in the interval\n+         * [start_pc, start_pc + length), that is, between start_pc inclusive and start_pc + length exclusive.\n+         *\n+         * @return the start of the bytecode section\n+         *\/\n+        Label startLabel();\n+\n+\n+        \/**\n+         * The given local variable has a value at indices into the code array in the interval\n+         * [start_pc, start_pc + length), that is, between start_pc inclusive and start_pc + length exclusive.\n+         *\n+         * @return the end of the bytecode section\n+         *\/\n+        Label endLabel();\n+\n+        \/**\n+         * The given local variable must be at index in the local variable array of the current frame.\n+         *\n+         * If the local variable at index is of type double or long, it occupies both index and index + 1.\n+         *\n+         * @return the index into the local variables\n+         *\/\n+        int index();\n+\n+        \/**\n+         * {@return local variable target info}\n+         * @param startLabel the code label indicating start of an interval where variable has value\n+         * @param endLabel the code label indicating start of an interval where variable has value\n+         * @param index index into the local variables\n+         *\/\n+        static LocalVarTargetInfo of(Label startLabel, Label endLabel, int index) {\n+            return new TargetInfoImpl.LocalVarTargetInfoImpl(startLabel, endLabel, index);\n+        }\n+    }\n+\n+    \/**\n+     * Indicates that an annotation appears on the i'th type in an exception parameter\n+     * declaration.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface CatchTarget extends TargetInfo\n+            permits TargetInfoImpl.CatchTargetImpl {\n+\n+        \/**\n+         * The index into the exception_table array of the Code\n+         * attribute enclosing the RuntimeVisibleTypeAnnotations attribute.\n+         *\n+         * @return the index into the exception table\n+         *\/\n+        int exceptionTableIndex();\n+    }\n+\n+    \/**\n+     * Indicates that an annotation appears on either the type in an instanceof expression\n+     * or a new expression, or the type before the :: in a method reference expression.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface OffsetTarget extends TargetInfo\n+            permits TargetInfoImpl.OffsetTargetImpl {\n+\n+        \/**\n+         * The code array offset of either the bytecode instruction\n+         * corresponding to the instanceof expression, the new bytecode instruction corresponding to the new\n+         * expression, or the bytecode instruction corresponding to the method reference expression.\n+         *\n+         * @return the code label corresponding to the instruction\n+         *\/\n+        Label target();\n+    }\n+\n+    \/**\n+     * Indicates that an annotation appears either on the i'th type in a cast\n+     * expression, or on the i'th type argument in the explicit type argument list for any of the following: a new\n+     * expression, an explicit constructor invocation statement, a method invocation expression, or a method reference\n+     * expression.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface TypeArgumentTarget extends TargetInfo\n+            permits TargetInfoImpl.TypeArgumentTargetImpl {\n+\n+        \/**\n+         * The code array offset of either the bytecode instruction\n+         * corresponding to the cast expression, the new bytecode instruction corresponding to the new expression, the\n+         * bytecode instruction corresponding to the explicit constructor invocation statement, the bytecode\n+         * instruction corresponding to the method invocation expression, or the bytecode instruction corresponding to\n+         * the method reference expression.\n+         *\n+         * @return the code label corresponding to the instruction\n+         *\/\n+        Label target();\n+\n+        \/**\n+         * For a cast expression, the value of the type_argument_index item specifies which type in the cast\n+         * operator is annotated. A type_argument_index value of 0 specifies the first (or only) type in the cast\n+         * operator.\n+         *\n+         * The possibility of more than one type in a cast expression arises from a cast to an intersection type.\n+         *\n+         * For an explicit type argument list, the value of the type_argument_index item specifies which type argument\n+         * is annotated. A type_argument_index value of 0 specifies the first type argument.\n+         *\n+         * @return the index into the type arguments\n+         *\/\n+        int typeArgumentIndex();\n+    }\n+\n+    \/**\n+     * JVMS: Type_path structure identifies which part of the type is annotated,\n+     * as defined in {@jvms 4.7.20.2}\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface TypePathComponent\n+            permits UnboundAttribute.TypePathComponentImpl {\n+\n+        \/**\n+         * Type path kind, as defined in {@jvms 4.7.20.2}\n+         *\n+         * @since 22\n+         *\/\n+        @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+        public enum Kind {\n+\n+            \/** Annotation is deeper in an array type *\/\n+            ARRAY(0),\n+\n+            \/** Annotation is deeper in a nested type *\/\n+            INNER_TYPE(1),\n+\n+            \/** Annotation is on the bound of a wildcard type argument of a parameterized type *\/\n+            WILDCARD(2),\n+\n+            \/** Annotation is on a type argument of a parameterized type *\/\n+            TYPE_ARGUMENT(3);\n+\n+            private final int tag;\n+\n+            private Kind(int tag) {\n+                this.tag = tag;\n+            }\n+\n+            \/**\n+             * {@return the type path kind value}\n+             *\/\n+            public int tag() {\n+                return tag;\n+            }\n+        }\n+\n+        \/** static instance for annotation is deeper in an array type *\/\n+        TypePathComponent ARRAY = new UnboundAttribute.TypePathComponentImpl(Kind.ARRAY, 0);\n+\n+        \/** static instance for annotation is deeper in a nested type *\/\n+        TypePathComponent INNER_TYPE = new UnboundAttribute.TypePathComponentImpl(Kind.INNER_TYPE, 0);\n+\n+        \/** static instance for annotation is on the bound of a wildcard type argument of a parameterized type *\/\n+        TypePathComponent WILDCARD = new UnboundAttribute.TypePathComponentImpl(Kind.WILDCARD, 0);\n+\n+\n+        \/**\n+         * The type path kind items from JVMS Table 4.7.20.2-A.\n+         *\n+         * @return the kind of path element\n+         *\/\n+        Kind typePathKind();\n+\n+        \/**\n+         * JVMS: type_argument_index\n+         * If the value of the type_path_kind item is 0, 1, or 2, then the value of the type_argument_index item is 0.\n+         *\n+         * If the value of the type_path_kind item is 3, then the value of the type_argument_index item specifies which\n+         * type argument of a parameterized type is annotated, where 0 indicates the first type argument of a\n+         * parameterized type.\n+         *\n+         * @return the index within the type component\n+         *\/\n+        int typeArgumentIndex();\n+\n+        \/**\n+         * {@return type path component of an annotation}\n+         * @param typePathKind the kind of path element\n+         * @param typeArgumentIndex the type argument index\n+         *\/\n+        static TypePathComponent of(Kind typePathKind, int typeArgumentIndex) {\n+\n+            return switch (typePathKind) {\n+                case ARRAY -> ARRAY;\n+                case INNER_TYPE -> INNER_TYPE;\n+                case WILDCARD -> WILDCARD;\n+                case TYPE_ARGUMENT -> new UnboundAttribute.TypePathComponentImpl(Kind.TYPE_ARGUMENT, typeArgumentIndex);\n+            };\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeAnnotation.java","additions":862,"deletions":0,"binary":false,"changes":862,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.classfile;\n+package java.lang.classfile;\n@@ -29,0 +29,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -32,0 +33,2 @@\n+ *\n+ * @since 22\n@@ -33,0 +36,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeKind.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/TypeKind.java","status":"renamed"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile;\n+\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.PoolEntry;\n+import jdk.internal.classfile.impl.DirectFieldBuilder;\n+import jdk.internal.classfile.impl.DirectMethodBuilder;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A classfile element that can encode itself as a stream of bytes in the\n+ * encoding expected by the classfile format.\n+ *\n+ * @param <T> the type of the entity\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface WritableElement<T> extends ClassFileElement\n+        permits Annotation, AnnotationElement, AnnotationValue, Attribute,\n+                PoolEntry, BootstrapMethodEntry, FieldModel, MethodModel,\n+                ConstantPoolBuilder, DirectFieldBuilder, DirectMethodBuilder {\n+    \/**\n+     * Writes the element to the specified writer\n+     *\n+     * @param buf the writer\n+     *\/\n+    void writeTo(BufWriter buf);\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/WritableElement.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.MethodModel;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code AnnotationDefault} attribute {@jvms 4.7.22}, which can\n+ * appear on methods of annotation types, and records the default value\n+ * {@jls 9.6.2} for the element corresponding to this method.  Delivered as a\n+ * {@link MethodElement} when traversing the elements of a {@link MethodModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 5.0.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface AnnotationDefaultAttribute\n+        extends Attribute<AnnotationDefaultAttribute>, MethodElement\n+        permits BoundAttribute.BoundAnnotationDefaultAttr,\n+                UnboundAttribute.UnboundAnnotationDefaultAttribute {\n+\n+    \/**\n+     * {@return the default value of the annotation type element represented by\n+     * this method}\n+     *\/\n+    AnnotationValue defaultValue();\n+\n+    \/**\n+     * {@return an {@code AnnotationDefault} attribute}\n+     * @param annotationDefault the default value of the annotation type element\n+     *\/\n+    static AnnotationDefaultAttribute of(AnnotationValue annotationDefault) {\n+        return new UnboundAttribute.UnboundAnnotationDefaultAttribute(annotationDefault);\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/AnnotationDefaultAttribute.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.BootstrapMethodEntry;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code BootstrapMethods} attribute {@jvms 4.7.23}, which serves as\n+ * an extension to the constant pool of a classfile.  Elements of the bootstrap\n+ * method table are accessed through {@link ConstantPool}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 7.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface BootstrapMethodsAttribute\n+        extends Attribute<BootstrapMethodsAttribute>\n+        permits BoundAttribute.BoundBootstrapMethodsAttribute,\n+                UnboundAttribute.EmptyBootstrapAttribute {\n+\n+    \/**\n+     * {@return the elements of the bootstrap method table}\n+     *\/\n+    List<BootstrapMethodEntry> bootstrapMethods();\n+\n+    \/**\n+     * {@return the size of the bootstrap methods table}.  Calling this method\n+     * does not necessarily inflate the entire table.\n+     *\/\n+    int bootstrapMethodsSize();\n+\n+    \/\/ No factories; BMA is generated as part of constant pool\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/BootstrapMethodsAttribute.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a single character range in the {@link CharacterRangeTableAttribute}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface CharacterRangeInfo\n+        permits UnboundAttribute.UnboundCharacterRangeInfo {\n+\n+    \/**\n+     * {@return the start of the character range region (inclusive)}  This is\n+     * the index into the code array at which the code for this character range\n+     * begins.\n+     *\/\n+    int startPc();\n+\n+    \/**\n+     * {@return the end of the character range region (exclusive)}  This is the\n+     * index into the code array after which the code for this character range\n+     * ends.\n+     *\/\n+    int endPc();\n+\n+    \/**\n+     * {@return the encoded start of the character range region (inclusive)}\n+     * The value is constructed from the line_number\/column_number pair as given\n+     * by {@code line_number << 10 + column_number}, where the source file is\n+     * viewed as an array of (possibly multi-byte) characters.\n+     *\/\n+    int characterRangeStart();\n+\n+    \/**\n+     * {@return the encoded end of the character range region (exclusive)}.\n+     * The value is constructed from the line_number\/column_number pair as given\n+     * by {@code line_number << 10 + column_number}, where the source file is\n+     * viewed as an array of (possibly multi-byte) characters.\n+     *\/\n+    int characterRangeEnd();\n+\n+    \/**\n+     * The value of the flags item describes the kind of range. Multiple flags\n+     * may be set within flags.\n+     * <ul>\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_STATEMENT} Range is a Statement\n+     * (except ExpressionStatement), StatementExpression {@jls 14.8}, as well as each\n+     * VariableDeclaratorId = VariableInitializer of\n+     * LocalVariableDeclarationStatement {@jls 14.4} or FieldDeclaration {@jls 8.3} in the\n+     * grammar.\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_BLOCK} Range is a Block in the\n+     * grammar.\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_ASSIGNMENT} Range is an assignment\n+     * expression - Expression1 AssignmentOperator Expression1 in the grammar as\n+     * well as increment and decrement expressions (both prefix and postfix).\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_FLOW_CONTROLLER} An expression\n+     * whose value will effect control flow. {@code Flowcon} in the following:\n+     * <pre>\n+     * if ( Flowcon ) Statement [else Statement]\n+     * for ( ForInitOpt ; [Flowcon] ; ForUpdateOpt ) Statement\n+     * while ( Flowcon ) Statement\n+     * do Statement while ( Flowcon ) ;\n+     * switch ( Flowcon ) { SwitchBlockStatementGroups }\n+     * Flowcon || Expression3\n+     * Flowcon &amp;&amp; Expression3\n+     * Flowcon ? Expression : Expression1\n+     * <\/pre>\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_FLOW_TARGET} Statement or\n+     * expression effected by a CRT_FLOW_CONTROLLER. {@code Flowtarg} in the following:\n+     * <pre>\n+     * if ( Flowcon ) Flowtarg [else Flowtarg]\n+     * for ( ForInitOpt ; [Flowcon] ; ForUpdateOpt ) Flowtarg\n+     * while ( Flowcon ) Flowtarg\n+     * do Flowtarg while ( Flowcon ) ;\n+     * Flowcon || Flowtarg\n+     * Flowcon &amp;&amp; Flowtarg\n+     * Flowcon ? Flowtarg : Flowtarg\n+     * <\/pre>\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_INVOKE} Method invocation. For\n+     * example: Identifier Arguments.\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_CREATE} New object creation. For\n+     * example: new Creator.\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_BRANCH_TRUE} A condition encoded\n+     * in the branch instruction immediately contained in the code range for\n+     * this item is not inverted towards the corresponding branch condition in\n+     * the source code. I.e. actual jump occurs if and only if the the source\n+     * code branch condition evaluates to true. Entries of this type are\n+     * produced only for conditions that are listed in the description of\n+     * CRT_FLOW_CONTROLLER flag. The source range for the entry contains flow\n+     * controlling expression. start_pc field for an entry of this type must\n+     * point to a branch instruction: if_acmp&lt;cond&gt;, if_icmp&lt;cond&gt;,\n+     * if&lt;cond&gt;, ifnonull, ifnull or goto. CRT_BRANCH_TRUE and\n+     * CRT_BRANCH_FALSE are special kinds of entries that can be used to\n+     * determine what branch of a condition was chosen during the runtime.\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_BRANCH_FALSE} A condition encoded\n+     * in the branch instruction immediately contained in the code range for\n+     * this item is inverted towards the corresponding branch condition in the\n+     * source code. I.e. actual jump occurs if and only if the the source code\n+     * branch condition evaluates to false. Entries of this type are produced\n+     * only for conditions that are listed in the description of\n+     * CRT_FLOW_CONTROLLER flag. The source range for the entry contains flow\n+     * controlling expression. start_pc field for an entry of this type must\n+     * point to a branch instruction: if_acmp&lt;cond&gt;, if_icmp&lt;cond&gt;,\n+     * if&lt;cond&gt;, ifnonull, ifnull or goto.\n+     * <\/ul>\n+     * <p>\n+     * All bits of the flags item not assigned above are reserved for future use. They should be set to zero in generated class files and should be ignored by Java virtual machine implementations.\n+     *\n+     * @return the flags\n+     *\/\n+    int flags();\n+\n+    \/**\n+     * {@return a character range description}\n+     * @param startPc the start of the bytecode range, inclusive\n+     * @param endPc the end of the bytecode range, exclusive\n+     * @param characterRangeStart the start of the character range, inclusive,\n+     *                            encoded as {@code line_number << 10 + column_number}\n+     * @param characterRangeEnd the end of the character range, exclusive,\n+     *                          encoded as {@code line_number << 10 + column_number}\n+     * @param flags the range flags\n+     *\/\n+    static CharacterRangeInfo of(int startPc,\n+                                 int endPc,\n+                                 int characterRangeStart,\n+                                 int characterRangeEnd,\n+                                 int flags) {\n+        return new UnboundAttribute.UnboundCharacterRangeInfo(startPc, endPc,\n+                                                              characterRangeStart, characterRangeEnd,\n+                                                              flags);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CharacterRangeInfo.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -30,1 +30,1 @@\n-import jdk.internal.classfile.Attribute;\n+import java.lang.classfile.Attribute;\n@@ -33,0 +33,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -59,0 +60,2 @@\n+ *\n+ * @since 22\n@@ -60,0 +63,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CharacterRangeTableAttribute.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/CharacterRangeTableAttribute.java","status":"renamed"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Label;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code Code} attribute {@jvms 4.7.3}, appears on non-native,\n+ * non-abstract methods and contains the bytecode of the method body.  Delivered\n+ * as a {@link java.lang.classfile.MethodElement} when traversing the elements of a\n+ * {@link java.lang.classfile.MethodModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface CodeAttribute extends Attribute<CodeAttribute>, CodeModel\n+        permits BoundAttribute.BoundCodeAttribute {\n+\n+    \/**\n+     * {@return The length of the code array in bytes}\n+     *\/\n+    int codeLength();\n+\n+    \/**\n+     * {@return the bytes (bytecode) of the code array}\n+     *\/\n+    byte[] codeArray();\n+\n+    \/**\n+     * {@return the position of the {@code Label} in the {@code codeArray}\n+     * or -1 if the {@code Label} does not point to the {@code codeArray}}\n+     * @param label a marker for a position within this {@code CodeAttribute}\n+     *\/\n+    int labelToBci(Label label);\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CodeAttribute.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code CompilationID} attribute (@@@ need reference), which can\n+ * appear on classes and records the compilation time of the class.  Delivered\n+ * as a {@link java.lang.classfile.ClassElement} when traversing the elements of\n+ * a {@link java.lang.classfile.ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface CompilationIDAttribute\n+        extends Attribute<CompilationIDAttribute>, ClassElement\n+        permits BoundAttribute.BoundCompilationIDAttribute,\n+                UnboundAttribute.UnboundCompilationIDAttribute {\n+\n+    \/**\n+     * {@return the compilation ID}  The compilation ID is the value of\n+     * {@link System#currentTimeMillis()} when the classfile is generated.\n+     *\/\n+    Utf8Entry compilationId();\n+\n+    \/**\n+     * {@return a {@code CompilationID} attribute}\n+     * @param id the compilation ID\n+     *\/\n+    static CompilationIDAttribute of(Utf8Entry id) {\n+        return new UnboundAttribute.UnboundCompilationIDAttribute(id);\n+    }\n+\n+    \/**\n+     * {@return a {@code CompilationID} attribute}\n+     * @param id the compilation ID\n+     *\/\n+    static CompilationIDAttribute of(String id) {\n+        return new UnboundAttribute.UnboundCompilationIDAttribute(TemporaryConstantPool.INSTANCE.utf8Entry(id));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CompilationIDAttribute.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import java.lang.constant.ConstantDesc;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.constantpool.ConstantValueEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code ConstantValue} attribute {@jvms 4.7.2}, which can appear on\n+ * fields and indicates that the field's value is a constant.  Delivered as a\n+ * {@link java.lang.classfile.FieldElement} when traversing the elements of a\n+ * {@link java.lang.classfile.FieldModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ConstantValueAttribute\n+        extends Attribute<ConstantValueAttribute>, FieldElement\n+        permits BoundAttribute.BoundConstantValueAttribute,\n+                UnboundAttribute.UnboundConstantValueAttribute {\n+\n+    \/**\n+     * {@return the constant value of the field}\n+     *\/\n+    ConstantValueEntry constant();\n+\n+    \/**\n+     * {@return a {@code ConstantValue} attribute}\n+     * @param value the constant value\n+     *\/\n+    static ConstantValueAttribute of(ConstantValueEntry value) {\n+        return new UnboundAttribute.UnboundConstantValueAttribute(value);\n+    }\n+\n+    \/**\n+     * {@return a {@code ConstantValue} attribute}\n+     * @param value the constant value\n+     *\/\n+    static ConstantValueAttribute of(ConstantDesc value) {\n+        return of(switch(value) {\n+            case Integer i -> TemporaryConstantPool.INSTANCE.intEntry(i);\n+            case Float f -> TemporaryConstantPool.INSTANCE.floatEntry(f);\n+            case Long l -> TemporaryConstantPool.INSTANCE.longEntry(l);\n+            case Double d -> TemporaryConstantPool.INSTANCE.doubleEntry(d);\n+            case String s -> TemporaryConstantPool.INSTANCE.stringEntry(s);\n+            default -> throw new IllegalArgumentException(\"Invalid ConstantValueAttribute value: \" + value);\n+        });\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ConstantValueAttribute.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.MethodElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code Deprecated} attribute {@jvms 4.7.15}, which can appear on\n+ * classes, methods, and fields.  Delivered as a  {@link ClassElement},\n+ * {@link MethodElement}, or  {@link FieldElement} when traversing the elements\n+ * of a corresponding model.\n+ * <p>\n+ * The attribute permits multiple instances in a given location.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface DeprecatedAttribute\n+        extends Attribute<DeprecatedAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundDeprecatedAttribute,\n+                UnboundAttribute.UnboundDeprecatedAttribute {\n+\n+    \/**\n+     * {@return a {@code Deprecated} attribute}\n+     *\/\n+    static DeprecatedAttribute of() {\n+        return new UnboundAttribute.UnboundDeprecatedAttribute();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/DeprecatedAttribute.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.Optional;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code EnclosingMethod} attribute {@jvms 4.7.7}, which can appear\n+ * on classes, and indicates that the class is a local or anonymous class.\n+ * Delivered as a {@link ClassElement} when traversing the elements of a {@link\n+ * java.lang.classfile.ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 5.0.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface EnclosingMethodAttribute\n+        extends Attribute<EnclosingMethodAttribute>, ClassElement\n+        permits BoundAttribute.BoundEnclosingMethodAttribute,\n+                UnboundAttribute.UnboundEnclosingMethodAttribute {\n+\n+    \/**\n+     * {@return the innermost class that encloses the declaration of the current\n+     * class}\n+     *\/\n+    ClassEntry enclosingClass();\n+\n+    \/**\n+     * {@return the name and type of the enclosing method, if the class is\n+     * immediately enclosed by a method or constructor}\n+     *\/\n+    Optional<NameAndTypeEntry> enclosingMethod();\n+\n+    \/**\n+     * {@return the name of the enclosing method, if the class is\n+     * immediately enclosed by a method or constructor}\n+     *\/\n+    default Optional<Utf8Entry> enclosingMethodName() {\n+        return enclosingMethod().map(NameAndTypeEntry::name);\n+    }\n+\n+    \/**\n+     * {@return the type of the enclosing method, if the class is\n+     * immediately enclosed by a method or constructor}\n+     *\/\n+    default Optional<Utf8Entry> enclosingMethodType() {\n+        return enclosingMethod().map(NameAndTypeEntry::type);\n+    }\n+\n+    \/**\n+     * {@return the type of the enclosing method, if the class is\n+     * immediately enclosed by a method or constructor}\n+     *\/\n+    default Optional<MethodTypeDesc> enclosingMethodTypeSymbol() {\n+        return enclosingMethod().map(Util::methodTypeSymbol);\n+    }\n+\n+    \/**\n+     * {@return an {@code EnclosingMethod} attribute}\n+     * @param className the class name\n+     * @param method the name and type of the enclosing method or {@code empty} if\n+     *               the class is not immediately enclosed by a method or constructor\n+     *\/\n+    static EnclosingMethodAttribute of(ClassEntry className,\n+                                       Optional<NameAndTypeEntry> method) {\n+        return new UnboundAttribute.UnboundEnclosingMethodAttribute(className, method.orElse(null));\n+    }\n+\n+    \/**\n+     * {@return an {@code EnclosingMethod} attribute}\n+     * @param className the class name\n+     * @param methodName the name of the enclosing method or {@code empty} if\n+     *                   the class is not immediately enclosed by a method or constructor\n+     * @param methodType the type of the enclosing method or {@code empty} if\n+     *                   the class is not immediately enclosed by a method or constructor\n+     * @throws IllegalArgumentException if {@code className} represents a primitive type\n+     *\/\n+    static EnclosingMethodAttribute of(ClassDesc className,\n+                                       Optional<String> methodName,\n+                                       Optional<MethodTypeDesc> methodType) {\n+        return new UnboundAttribute.UnboundEnclosingMethodAttribute(\n+                        TemporaryConstantPool.INSTANCE.classEntry(className),\n+                        methodName.isPresent() && methodType.isPresent()\n+                                ? TemporaryConstantPool.INSTANCE.nameAndTypeEntry(methodName.get(), methodType.get())\n+                                : null);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/EnclosingMethodAttribute.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -31,3 +31,3 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.MethodElement;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.MethodElement;\n@@ -37,0 +37,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -42,1 +43,1 @@\n- * {@link jdk.internal.classfile.MethodModel}.\n+ * {@link java.lang.classfile.MethodModel}.\n@@ -47,0 +48,2 @@\n+ *\n+ * @since 22\n@@ -48,0 +51,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ExceptionsAttribute.java","additions":9,"deletions":5,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ExceptionsAttribute.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -31,2 +31,2 @@\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -38,0 +38,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -41,0 +42,2 @@\n+ *\n+ * @since 22\n@@ -42,0 +45,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -101,0 +105,1 @@\n+     * @throws IllegalArgumentException if {@code innerClass} or {@code outerClass} represents a primitive type\n@@ -115,0 +120,1 @@\n+     * @throws IllegalArgumentException if {@code innerClass} or {@code outerClass} represents a primitive type\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/InnerClassInfo.java","additions":9,"deletions":3,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/InnerClassInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code InnerClasses} attribute {@jvms 4.7.6}, which can\n+ * appear on classes, and records which classes referenced by this classfile\n+ * are inner classes. Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface InnerClassesAttribute\n+        extends Attribute<InnerClassesAttribute>, ClassElement\n+        permits BoundAttribute.BoundInnerClassesAttribute,\n+                UnboundAttribute.UnboundInnerClassesAttribute {\n+\n+    \/**\n+     * {@return the inner classes used by this class}\n+     *\/\n+    List<InnerClassInfo> classes();\n+\n+    \/**\n+     * {@return an {@code InnerClasses} attribute}\n+     * @param innerClasses descriptions of the inner classes\n+     *\/\n+    static InnerClassesAttribute of(List<InnerClassInfo> innerClasses) {\n+        return new UnboundAttribute.UnboundInnerClassesAttribute(innerClasses);\n+    }\n+\n+    \/**\n+     * {@return an {@code InnerClasses} attribute}\n+     * @param innerClasses descriptions of the inner classes\n+     *\/\n+    static InnerClassesAttribute of(InnerClassInfo... innerClasses) {\n+        return new UnboundAttribute.UnboundInnerClassesAttribute(List.of(innerClasses));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/InnerClassesAttribute.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -28,0 +28,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -31,0 +32,2 @@\n+ *\n+ * @since 22\n@@ -32,0 +35,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LineNumberInfo.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LineNumberInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.Attribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code LineNumberTable} attribute {@jvms 4.7.12}, which can appear\n+ * on a {@code Code} attribute, and records the mapping between indexes into\n+ * the code table and line numbers in the source file.\n+ * Delivered as a {@link java.lang.classfile.instruction.LineNumber} when traversing the\n+ * elements of a {@link java.lang.classfile.CodeModel}, according to the setting of the\n+ * {@link java.lang.classfile.ClassFile.LineNumbersOption} option.\n+ * <p>\n+ * The attribute permits multiple instances in a given location.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LineNumberTableAttribute\n+        extends Attribute<LineNumberTableAttribute>\n+        permits BoundAttribute.BoundLineNumberTableAttribute,\n+                UnboundAttribute.UnboundLineNumberTableAttribute {\n+\n+    \/**\n+     * {@return the table mapping bytecode offsets to source line numbers}\n+     *\/\n+    List<LineNumberInfo> lineNumbers();\n+\n+    \/**\n+     * {@return a {@code LineNumberTable} attribute}\n+     * @param lines the line number descriptions\n+     *\/\n+    static LineNumberTableAttribute of(List<LineNumberInfo> lines) {\n+        return new UnboundAttribute.UnboundLineNumberTableAttribute(lines);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LineNumberTableAttribute.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -28,1 +28,1 @@\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -31,0 +31,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -34,0 +35,2 @@\n+ *\n+ * @since 22\n@@ -35,0 +38,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LocalVariableInfo.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LocalVariableInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+import java.util.List;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code LocalVariableTable} attribute {@jvms 4.7.13}, which can appear\n+ * on a {@code Code} attribute, and records debug information about local\n+ * variables.\n+ * Delivered as a {@link java.lang.classfile.instruction.LocalVariable} when traversing the\n+ * elements of a {@link java.lang.classfile.CodeModel}, according to the setting of the\n+ * {@link java.lang.classfile.ClassFile.DebugElementsOption} option.\n+ * <p>\n+ * The attribute permits multiple instances in a given location.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LocalVariableTableAttribute\n+        extends Attribute<LocalVariableTableAttribute>\n+        permits BoundAttribute.BoundLocalVariableTableAttribute, UnboundAttribute.UnboundLocalVariableTableAttribute {\n+\n+    \/**\n+     * {@return debug information for the local variables in this method}\n+     *\/\n+    List<LocalVariableInfo> localVariables();\n+\n+    \/**\n+     * {@return a {@code LocalVariableTable} attribute}\n+     * @param locals the local variable descriptions\n+     *\/\n+    static LocalVariableTableAttribute of(List<LocalVariableInfo> locals) {\n+        return new UnboundAttribute.UnboundLocalVariableTableAttribute(locals);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LocalVariableTableAttribute.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -30,0 +30,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -33,0 +34,2 @@\n+ *\n+ * @since 22\n@@ -34,0 +37,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LocalVariableTypeInfo.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LocalVariableTypeInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+import java.util.List;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code LocalVariableTypeTable} attribute {@jvms 4.7.14}, which can appear\n+ * on a {@code Code} attribute, and records debug information about local\n+ * variables.\n+ * Delivered as a {@link java.lang.classfile.instruction.LocalVariable} when traversing the\n+ * elements of a {@link java.lang.classfile.CodeModel}, according to the setting of the\n+ * {@link java.lang.classfile.ClassFile.LineNumbersOption} option.\n+ * <p>\n+ * The attribute permits multiple instances in a given location.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 5.0.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LocalVariableTypeTableAttribute\n+        extends Attribute<LocalVariableTypeTableAttribute>\n+        permits BoundAttribute.BoundLocalVariableTypeTableAttribute, UnboundAttribute.UnboundLocalVariableTypeTableAttribute {\n+\n+    \/**\n+     * {@return debug information for the local variables in this method}\n+     *\/\n+    List<LocalVariableTypeInfo> localVariableTypes();\n+\n+    \/**\n+     * {@return a {@code LocalVariableTypeTable} attribute}\n+     * @param locals the local variable descriptions\n+     *\/\n+    static LocalVariableTypeTableAttribute of(List<LocalVariableTypeInfo> locals) {\n+        return new UnboundAttribute.UnboundLocalVariableTypeTableAttribute(locals);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LocalVariableTypeTableAttribute.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -30,1 +30,1 @@\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -32,1 +32,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -36,0 +36,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -39,0 +40,2 @@\n+ *\n+ * @since 22\n@@ -40,0 +43,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -51,2 +55,2 @@\n-     * parameter flags include {@link Classfile#ACC_FINAL},\n-     * {@link Classfile#ACC_SYNTHETIC}, and {@link Classfile#ACC_MANDATED}.\n+     * parameter flags include {@link ClassFile#ACC_FINAL},\n+     * {@link ClassFile#ACC_SYNTHETIC}, and {@link ClassFile#ACC_MANDATED}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/MethodParameterInfo.java","additions":9,"deletions":5,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/MethodParameterInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.MethodElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code MethodParameters} attribute {@jvms 4.7.24}, which can\n+ * appear on methods, and records optional information about the method's\n+ * parameters.  Delivered as a {@link java.lang.classfile.MethodElement} when\n+ * traversing the elements of a {@link java.lang.classfile.MethodModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 8.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface MethodParametersAttribute\n+        extends Attribute<MethodParametersAttribute>, MethodElement\n+        permits BoundAttribute.BoundMethodParametersAttribute,\n+                UnboundAttribute.UnboundMethodParametersAttribute {\n+\n+    \/**\n+     * {@return information about the parameters of the method}  The i'th entry\n+     * in the list corresponds to the i'th parameter in the method declaration.\n+     *\/\n+    List<MethodParameterInfo> parameters();\n+\n+    \/**\n+     * {@return a {@code MethodParameters} attribute}\n+     * @param parameters the method parameter descriptions\n+     *\/\n+    static MethodParametersAttribute of(List<MethodParameterInfo> parameters) {\n+        return new UnboundAttribute.UnboundMethodParametersAttribute(parameters);\n+    }\n+\n+    \/**\n+     * {@return a {@code MethodParameters} attribute}\n+     * @param parameters the method parameter descriptions\n+     *\/\n+    static MethodParametersAttribute of(MethodParameterInfo... parameters) {\n+        return of(List.of(parameters));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/MethodParametersAttribute.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -29,5 +29,5 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -46,0 +46,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -50,2 +51,2 @@\n- * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ * Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n@@ -56,0 +57,4 @@\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 9.\n+ *\n+ * @since 22\n@@ -57,1 +62,1 @@\n-\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -169,0 +174,2 @@\n+     *\n+     * @since 22\n@@ -170,0 +177,1 @@\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -258,1 +266,1 @@\n-         *\n+         * Opens package\n@@ -267,1 +275,1 @@\n-         *\n+         * Opens package\n@@ -288,0 +296,1 @@\n+         * @throws IllegalArgumentException if {@code service} represents a primitive type\n@@ -303,0 +312,1 @@\n+         * @throws IllegalArgumentException if {@code service} or any of the {@code implClasses} represents a primitive type\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleAttribute.java","additions":21,"deletions":11,"binary":false,"changes":32,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleAttribute.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -31,2 +31,2 @@\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.PackageEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.PackageEntry;\n@@ -37,1 +37,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -41,0 +41,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -44,0 +45,2 @@\n+ *\n+ * @since 22\n@@ -45,0 +48,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -55,2 +59,2 @@\n-     * Valid flags include {@link Classfile#ACC_SYNTHETIC} and\n-     * {@link Classfile#ACC_MANDATED}.\n+     * Valid flags include {@link ClassFile#ACC_SYNTHETIC} and\n+     * {@link ClassFile#ACC_MANDATED}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleExportInfo.java","additions":10,"deletions":6,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleExportInfo.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n@@ -31,0 +31,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -34,0 +35,2 @@\n+ *\n+ * @since 22\n@@ -35,0 +38,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleHashInfo.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleHashInfo.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -28,2 +28,2 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n@@ -33,1 +33,1 @@\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -37,0 +37,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -42,2 +43,2 @@\n- * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n+ * Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n@@ -70,0 +71,2 @@\n+ *\n+ * @since 22\n@@ -71,0 +74,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleHashesAttribute.java","additions":10,"deletions":6,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleHashesAttribute.java","status":"renamed"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code ModuleMainClass} attribute {@jvms 4.7.27}, which can\n+ * appear on classes that represent module descriptors.\n+ * Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 9.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ModuleMainClassAttribute\n+        extends Attribute<ModuleMainClassAttribute>, ClassElement\n+        permits BoundAttribute.BoundModuleMainClassAttribute, UnboundAttribute.UnboundModuleMainClassAttribute {\n+\n+    \/**\n+     * {@return main class for this module}\n+     *\/\n+    ClassEntry mainClass();\n+\n+    \/**\n+     * {@return a {@code ModuleMainClass} attribute}\n+     * @param mainClass the main class\n+     *\/\n+    static ModuleMainClassAttribute of(ClassEntry mainClass) {\n+        return new UnboundAttribute.UnboundModuleMainClassAttribute(mainClass);\n+    }\n+\n+    \/**\n+     * {@return a {@code ModuleMainClass} attribute}\n+     * @param mainClass the main class\n+     * @throws IllegalArgumentException if {@code mainClass} represents a primitive type\n+     *\/\n+    static ModuleMainClassAttribute of(ClassDesc mainClass) {\n+        return new UnboundAttribute.UnboundModuleMainClassAttribute(TemporaryConstantPool.INSTANCE.classEntry(mainClass));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleMainClassAttribute.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -31,2 +31,2 @@\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.PackageEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.PackageEntry;\n@@ -40,0 +40,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -43,0 +44,2 @@\n+ *\n+ * @since 22\n@@ -44,0 +47,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -54,2 +58,2 @@\n-     * Valid flags include {@link jdk.internal.classfile.Classfile#ACC_SYNTHETIC} and\n-     * {@link jdk.internal.classfile.Classfile#ACC_MANDATED}\n+     * Valid flags include {@link java.lang.classfile.ClassFile#ACC_SYNTHETIC} and\n+     * {@link java.lang.classfile.ClassFile#ACC_MANDATED}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleOpenInfo.java","additions":9,"deletions":5,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleOpenInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import java.lang.classfile.constantpool.PackageEntry;\n+import java.lang.constant.PackageDesc;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code ModulePackages} attribute {@jvms 4.7.26}, which can\n+ * appear on classes that represent module descriptors.\n+ * Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 9.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ModulePackagesAttribute\n+        extends Attribute<ModulePackagesAttribute>, ClassElement\n+        permits BoundAttribute.BoundModulePackagesAttribute,\n+                UnboundAttribute.UnboundModulePackagesAttribute {\n+\n+    \/**\n+     * {@return the packages that are opened or exported by this module}\n+     *\/\n+    List<PackageEntry> packages();\n+\n+    \/**\n+     * {@return a {@code ModulePackages} attribute}\n+     * @param packages the packages\n+     *\/\n+    static ModulePackagesAttribute of(List<PackageEntry> packages) {\n+        return new UnboundAttribute.UnboundModulePackagesAttribute(packages);\n+    }\n+\n+    \/**\n+     * {@return a {@code ModulePackages} attribute}\n+     * @param packages the packages\n+     *\/\n+    static ModulePackagesAttribute of(PackageEntry... packages) {\n+        return of(List.of(packages));\n+    }\n+\n+    \/**\n+     * {@return a {@code ModulePackages} attribute}\n+     * @param packages the packages\n+     *\/\n+    static ModulePackagesAttribute ofNames(List<PackageDesc> packages) {\n+        var p = new PackageEntry[packages.size()];\n+        for (int i = 0; i < packages.size(); i++) {\n+            p[i] = TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(packages.get(i).internalName()));\n+        }\n+        return of(p);\n+    }\n+\n+    \/**\n+     * {@return a {@code ModulePackages} attribute}\n+     * @param packages the packages\n+     *\/\n+    static ModulePackagesAttribute ofNames(PackageDesc... packages) {\n+        \/\/ List view, since ref to packages is temporary\n+        return ofNames(Arrays.asList(packages));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModulePackagesAttribute.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import java.lang.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a single \"provides\" declaration in the {@link ModuleAttribute}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ModuleProvideInfo\n+        permits UnboundAttribute.UnboundModuleProvideInfo {\n+\n+    \/**\n+     * {@return the service interface representing the provided service}\n+     *\/\n+    ClassEntry provides();\n+\n+    \/**\n+     * {@return the classes providing the service implementation}\n+     *\/\n+    List<ClassEntry> providesWith();\n+\n+    \/**\n+     * {@return a service provision description}\n+     * @param provides the service class interface\n+     * @param providesWith the service class implementations\n+     *\/\n+    static ModuleProvideInfo of(ClassEntry provides,\n+                                List<ClassEntry> providesWith) {\n+        return new UnboundAttribute.UnboundModuleProvideInfo(provides, providesWith);\n+    }\n+\n+    \/**\n+     * {@return a service provision description}\n+     * @param provides the service class interface\n+     * @param providesWith the service class implementations\n+     *\/\n+    static ModuleProvideInfo of(ClassEntry provides,\n+                                ClassEntry... providesWith) {\n+        return of(provides, List.of(providesWith));\n+    }\n+\n+    \/**\n+     * {@return a service provision description}\n+     * @param provides the service class interface\n+     * @param providesWith the service class implementations\n+     * @throws IllegalArgumentException if {@code provides} represents a primitive type\n+     *\/\n+    static ModuleProvideInfo of(ClassDesc provides,\n+                                       List<ClassDesc> providesWith) {\n+        return of(TemporaryConstantPool.INSTANCE.classEntry(provides), Util.entryList(providesWith));\n+    }\n+\n+    \/**\n+     * {@return a service provision description}\n+     * @param provides the service class interface\n+     * @param providesWith the service class implementations\n+     * @throws IllegalArgumentException if {@code provides} or any of {@code providesWith} represents a primitive type\n+     *\/\n+    static ModuleProvideInfo of(ClassDesc provides,\n+                                       ClassDesc... providesWith) {\n+        \/\/ List view, since ref to providesWith is temporary\n+        return of(provides, Arrays.asList(providesWith));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleProvideInfo.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.reflect.AccessFlag;\n+import java.lang.constant.ModuleDesc;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a single \"requires\" declaration in the {@link ModuleAttribute}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ModuleRequireInfo\n+        permits UnboundAttribute.UnboundModuleRequiresInfo {\n+\n+    \/**\n+     * {@return The module on which the current module depends}\n+     *\/\n+    ModuleEntry requires();\n+\n+    \/**\n+     * {@return the flags associated with this require declaration, as a bit mask}\n+     * Valid flags include {@link java.lang.classfile.ClassFile#ACC_TRANSITIVE},\n+     * {@link java.lang.classfile.ClassFile#ACC_STATIC_PHASE},\n+     * {@link java.lang.classfile.ClassFile#ACC_SYNTHETIC} and\n+     * {@link java.lang.classfile.ClassFile#ACC_MANDATED}\n+     *\/\n+    int requiresFlagsMask();\n+\n+    \/**\n+     * {@return the access flags}\n+     *\/\n+    default Set<AccessFlag> requiresFlags() {\n+        return AccessFlag.maskToAccessFlags(requiresFlagsMask(), AccessFlag.Location.MODULE_REQUIRES);\n+    }\n+\n+    \/**\n+     * {@return the required version of the required module, if present}\n+     *\/\n+    Optional<Utf8Entry> requiresVersion();\n+\n+    \/**\n+     * {@return whether the specific access flag is set}\n+     * @param flag the access flag\n+     *\/\n+    default boolean has(AccessFlag flag) {\n+        return Util.has(AccessFlag.Location.MODULE_REQUIRES, requiresFlagsMask(), flag);\n+    }\n+\n+    \/**\n+     * {@return a module requirement description}\n+     * @param requires the required module\n+     * @param requiresFlags the require-specific flags\n+     * @param requiresVersion the required version\n+     *\/\n+    static ModuleRequireInfo of(ModuleEntry requires, int requiresFlags, Utf8Entry requiresVersion) {\n+        return new UnboundAttribute.UnboundModuleRequiresInfo(requires, requiresFlags, Optional.ofNullable(requiresVersion));\n+    }\n+\n+    \/**\n+     * {@return a module requirement description}\n+     * @param requires the required module\n+     * @param requiresFlags the require-specific flags\n+     * @param requiresVersion the required version\n+     *\/\n+    static ModuleRequireInfo of(ModuleEntry requires, Collection<AccessFlag> requiresFlags, Utf8Entry requiresVersion) {\n+        return of(requires, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n+    }\n+\n+    \/**\n+     * {@return a module requirement description}\n+     * @param requires the required module\n+     * @param requiresFlags the require-specific flags\n+     * @param requiresVersion the required version\n+     *\/\n+    static ModuleRequireInfo of(ModuleDesc requires, int requiresFlags, String requiresVersion) {\n+        return new UnboundAttribute.UnboundModuleRequiresInfo(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(requires.name())), requiresFlags, Optional.ofNullable(requiresVersion).map(s -> TemporaryConstantPool.INSTANCE.utf8Entry(s)));\n+    }\n+\n+    \/**\n+     * {@return a module requirement description}\n+     * @param requires the required module\n+     * @param requiresFlags the require-specific flags\n+     * @param requiresVersion the required version\n+     *\/\n+    static ModuleRequireInfo of(ModuleDesc requires, Collection<AccessFlag> requiresFlags, String requiresVersion) {\n+        return of(requires, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleRequireInfo.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code ModuleResolution} attribute, which can\n+ * appear on classes that represent module descriptors.  This is a JDK-specific\n+ *  * attribute, which captures resolution metadata for modules.\n+ * Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ *\n+ *  <p>The specification of the {@code ModuleResolution} attribute is:\n+ * <pre> {@code\n+ *  ModuleResolution_attribute {\n+ *    u2 attribute_name_index;    \/\/ \"ModuleResolution\"\n+ *    u4 attribute_length;        \/\/ 2\n+ *    u2 resolution_flags;\n+ *\n+ *  The value of the resolution_flags item is a mask of flags used to denote\n+ *  properties of module resolution. The flags are as follows:\n+ *\n+ *   \/\/ Optional\n+ *   0x0001 (DO_NOT_RESOLVE_BY_DEFAULT)\n+ *\n+ *   \/\/ At most one of:\n+ *   0x0002 (WARN_DEPRECATED)\n+ *   0x0004 (WARN_DEPRECATED_FOR_REMOVAL)\n+ *   0x0008 (WARN_INCUBATING)\n+ *  }\n+ * } <\/pre>\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ModuleResolutionAttribute\n+        extends Attribute<ModuleResolutionAttribute>, ClassElement\n+        permits BoundAttribute.BoundModuleResolutionAttribute, UnboundAttribute.UnboundModuleResolutionAttribute {\n+\n+    \/**\n+     *  The value of the resolution_flags item is a mask of flags used to denote\n+     *  properties of module resolution. The flags are as follows:\n+     * <pre> {@code\n+     *   \/\/ Optional\n+     *   0x0001 (DO_NOT_RESOLVE_BY_DEFAULT)\n+     *\n+     *   \/\/ At most one of:\n+     *   0x0002 (WARN_DEPRECATED)\n+     *   0x0004 (WARN_DEPRECATED_FOR_REMOVAL)\n+     *   0x0008 (WARN_INCUBATING)\n+     *  } <\/pre>\n+     * @return the module resolution flags\n+     *\/\n+    int resolutionFlags();\n+\n+    \/**\n+     * {@return a {@code ModuleResolution} attribute}\n+     * @param resolutionFlags the resolution flags\n+     *\/\n+    static ModuleResolutionAttribute of(int resolutionFlags) {\n+        return new UnboundAttribute.UnboundModuleResolutionAttribute(resolutionFlags);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleResolutionAttribute.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code ModuleTarget} attribute, which can\n+ * appear on classes that represent module descriptors.  This is a JDK-specific\n+ * attribute, which captures constraints on the target platform.\n+ * Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ *\n+ * <p>The specification of the {@code ModuleTarget} attribute is:\n+ * <pre> {@code\n+ * TargetPlatform_attribute {\n+ *   \/\/ index to CONSTANT_utf8_info structure in constant pool representing\n+ *   \/\/ the string \"ModuleTarget\"\n+ *   u2 attribute_name_index;\n+ *   u4 attribute_length;\n+ *\n+ *   \/\/ index to CONSTANT_utf8_info structure with the target platform\n+ *   u2 target_platform_index;\n+ * }\n+ * } <\/pre>\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ModuleTargetAttribute\n+        extends Attribute<ModuleTargetAttribute>, ClassElement\n+        permits BoundAttribute.BoundModuleTargetAttribute, UnboundAttribute.UnboundModuleTargetAttribute {\n+\n+    \/**\n+     * {@return the target platform}\n+     *\/\n+    Utf8Entry targetPlatform();\n+\n+    \/**\n+     * {@return a {@code ModuleTarget} attribute}\n+     * @param targetPlatform the target platform\n+     *\/\n+    static ModuleTargetAttribute of(String targetPlatform) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(targetPlatform));\n+    }\n+\n+    \/**\n+     * {@return a {@code ModuleTarget} attribute}\n+     * @param targetPlatform the target platform\n+     *\/\n+    static ModuleTargetAttribute of(Utf8Entry targetPlatform) {\n+        return new UnboundAttribute.UnboundModuleTargetAttribute(targetPlatform);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/ModuleTargetAttribute.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code NestHost} attribute {@jvms 4.7.28}, which can\n+ * appear on classes to indicate that this class is a member of a nest.\n+ * Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 11.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface NestHostAttribute extends Attribute<NestHostAttribute>, ClassElement\n+        permits BoundAttribute.BoundNestHostAttribute,\n+                UnboundAttribute.UnboundNestHostAttribute {\n+\n+    \/**\n+     * {@return the host class of the nest to which this class belongs}\n+     *\/\n+    ClassEntry nestHost();\n+\n+    \/**\n+     * {@return a {@code NestHost} attribute}\n+     * @param nestHost the host class of the nest\n+     *\/\n+    static NestHostAttribute of(ClassEntry nestHost) {\n+        return new UnboundAttribute.UnboundNestHostAttribute(nestHost);\n+    }\n+\n+    \/**\n+     * {@return a {@code NestHost} attribute}\n+     * @param nestHost the host class of the nest\n+     * @throws IllegalArgumentException if {@code nestHost} represents a primitive type\n+     *\/\n+    static NestHostAttribute of(ClassDesc nestHost) {\n+        return of(TemporaryConstantPool.INSTANCE.classEntry(nestHost));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/NestHostAttribute.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code NestMembers} attribute {@jvms 4.7.29}, which can\n+ * appear on classes to indicate that this class is the host of a nest.\n+ * Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 11.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface NestMembersAttribute extends Attribute<NestMembersAttribute>, ClassElement\n+        permits BoundAttribute.BoundNestMembersAttribute, UnboundAttribute.UnboundNestMembersAttribute {\n+\n+    \/**\n+     * {@return the classes belonging to the nest hosted by this class}\n+     *\/\n+    List<ClassEntry> nestMembers();\n+\n+    \/**\n+     * {@return a {@code NestMembers} attribute}\n+     * @param nestMembers the member classes of the nest\n+     *\/\n+    static NestMembersAttribute of(List<ClassEntry> nestMembers) {\n+        return new UnboundAttribute.UnboundNestMembersAttribute(nestMembers);\n+    }\n+\n+    \/**\n+     * {@return a {@code NestMembers} attribute}\n+     * @param nestMembers the member classes of the nest\n+     *\/\n+    static NestMembersAttribute of(ClassEntry... nestMembers) {\n+        return of(List.of(nestMembers));\n+    }\n+\n+    \/**\n+     * {@return a {@code NestMembers} attribute}\n+     * @param nestMembers the member classes of the nest\n+     *\/\n+    static NestMembersAttribute ofSymbols(List<ClassDesc> nestMembers) {\n+        return of(Util.entryList(nestMembers));\n+    }\n+\n+    \/**\n+     * {@return a {@code NestMembers} attribute}\n+     * @param nestMembers the member classes of the nest\n+     *\/\n+    static NestMembersAttribute ofSymbols(ClassDesc... nestMembers) {\n+        \/\/ List view, since ref to nestMembers is temporary\n+        return ofSymbols(Arrays.asList(nestMembers));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/NestMembersAttribute.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code PermittedSubclasses} attribute {@jvms 4.7.31}, which can\n+ * appear on classes to indicate which classes may extend this class.\n+ * Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 17.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface PermittedSubclassesAttribute\n+        extends Attribute<PermittedSubclassesAttribute>, ClassElement\n+        permits BoundAttribute.BoundPermittedSubclassesAttribute, UnboundAttribute.UnboundPermittedSubclassesAttribute {\n+\n+    \/**\n+     * {@return the list of permitted subclasses}\n+     *\/\n+    List<ClassEntry> permittedSubclasses();\n+\n+    \/**\n+     * {@return a {@code PermittedSubclasses} attribute}\n+     * @param permittedSubclasses the permitted subclasses\n+     *\/\n+    static PermittedSubclassesAttribute of(List<ClassEntry> permittedSubclasses) {\n+        return new UnboundAttribute.UnboundPermittedSubclassesAttribute(permittedSubclasses);\n+    }\n+\n+    \/**\n+     * {@return a {@code PermittedSubclasses} attribute}\n+     * @param permittedSubclasses the permitted subclasses\n+     *\/\n+    static PermittedSubclassesAttribute of(ClassEntry... permittedSubclasses) {\n+        return of(List.of(permittedSubclasses));\n+    }\n+\n+    \/**\n+     * {@return a {@code PermittedSubclasses} attribute}\n+     * @param permittedSubclasses the permitted subclasses\n+     *\/\n+    static PermittedSubclassesAttribute ofSymbols(List<ClassDesc> permittedSubclasses) {\n+        return of(Util.entryList(permittedSubclasses));\n+    }\n+\n+    \/**\n+     * {@return a {@code PermittedSubclasses} attribute}\n+     * @param permittedSubclasses the permitted subclasses\n+     *\/\n+    static PermittedSubclassesAttribute ofSymbols(ClassDesc... permittedSubclasses) {\n+        \/\/ List view, since ref to nestMembers is temporary\n+        return ofSymbols(Arrays.asList(permittedSubclasses));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/PermittedSubclassesAttribute.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code Record} attribute {@jvms 4.7.30}, which can\n+ * appear on classes to indicate that this class is a record class.\n+ * Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing the elements of a {@link java.lang.classfile.ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 16.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface RecordAttribute extends Attribute<RecordAttribute>, ClassElement\n+        permits BoundAttribute.BoundRecordAttribute, UnboundAttribute.UnboundRecordAttribute {\n+\n+    \/**\n+     * {@return the components of this record class}\n+     *\/\n+    List<RecordComponentInfo> components();\n+\n+    \/**\n+     * {@return a {@code Record} attribute}\n+     * @param components the record components\n+     *\/\n+    static RecordAttribute of(List<RecordComponentInfo> components) {\n+        return new UnboundAttribute.UnboundRecordAttribute(components);\n+    }\n+\n+    \/**\n+     * {@return a {@code Record} attribute}\n+     * @param components the record components\n+     *\/\n+    static RecordAttribute of(RecordComponentInfo... components) {\n+        return of(List.of(components));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RecordAttribute.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.attribute;\n+package java.lang.classfile.attribute;\n@@ -30,3 +30,3 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.AttributedElement;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.AttributedElement;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -36,0 +36,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -38,1 +39,3 @@\n- * Models a single record component in the {@link jdk.internal.classfile.attribute.RecordAttribute}.\n+ * Models a single record component in the {@link java.lang.classfile.attribute.RecordAttribute}.\n+ *\n+ * @since 22\n@@ -40,0 +43,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RecordComponentInfo.java","additions":9,"deletions":5,"binary":false,"changes":14,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RecordComponentInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.*;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+import java.util.List;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code RuntimeInvisibleAnnotations} attribute {@jvms 4.7.17}, which\n+ * can appear on classes, methods, and fields. Delivered as a\n+ * {@link java.lang.classfile.ClassElement}, {@link java.lang.classfile.FieldElement}, or\n+ * {@link java.lang.classfile.MethodElement} when traversing the corresponding model type.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 5.0.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface RuntimeInvisibleAnnotationsAttribute\n+        extends Attribute<RuntimeInvisibleAnnotationsAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundRuntimeInvisibleAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeInvisibleAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the non-runtime-visible annotations on this class, field, or method}\n+     *\/\n+    List<Annotation> annotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeInvisibleAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeInvisibleAnnotationsAttribute of(List<Annotation> annotations) {\n+        return new UnboundAttribute.UnboundRuntimeInvisibleAnnotationsAttribute(annotations);\n+    }\n+\n+    \/**\n+     * {@return a {@code RuntimeInvisibleAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeInvisibleAnnotationsAttribute of(Annotation... annotations) {\n+        return of(List.of(annotations));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeInvisibleAnnotationsAttribute.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.MethodModel;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code RuntimeInvisibleParameterAnnotations} attribute\n+ * {@jvms 4.7.19}, which can appear on methods. Delivered as a {@link\n+ * java.lang.classfile.MethodElement} when traversing a {@link MethodModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 5.0.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface RuntimeInvisibleParameterAnnotationsAttribute\n+        extends Attribute<RuntimeInvisibleParameterAnnotationsAttribute>, MethodElement\n+        permits BoundAttribute.BoundRuntimeInvisibleParameterAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeInvisibleParameterAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the list of annotations corresponding to each method parameter}\n+     * The element at the i'th index corresponds to the annotations on the i'th\n+     * parameter.\n+     *\/\n+    List<List<Annotation>> parameterAnnotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeInvisibleParameterAnnotations} attribute}\n+     * @param parameterAnnotations a list of parameter annotations for each parameter\n+     *\/\n+    static RuntimeInvisibleParameterAnnotationsAttribute of(List<List<Annotation>> parameterAnnotations) {\n+        return new UnboundAttribute.UnboundRuntimeInvisibleParameterAnnotationsAttribute(parameterAnnotations);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeInvisibleParameterAnnotationsAttribute.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.TypeAnnotation;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code RuntimeInvisibleTypeAnnotations} attribute {@jvms 4.7.21}, which\n+ * can appear on classes, methods, fields, and code attributes. Delivered as a\n+ * {@link java.lang.classfile.ClassElement}, {@link java.lang.classfile.FieldElement},\n+ * {@link java.lang.classfile.MethodElement}, or {@link CodeElement} when traversing\n+ * the corresponding model type.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 8.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface RuntimeInvisibleTypeAnnotationsAttribute\n+        extends Attribute<RuntimeInvisibleTypeAnnotationsAttribute>,\n+                ClassElement, MethodElement, FieldElement, CodeElement\n+        permits BoundAttribute.BoundRuntimeInvisibleTypeAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeInvisibleTypeAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the non-runtime-visible type annotations on parts of this class, field, or method}\n+     *\/\n+    List<TypeAnnotation> annotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeInvisibleTypeAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeInvisibleTypeAnnotationsAttribute of(List<TypeAnnotation> annotations) {\n+        return new UnboundAttribute.UnboundRuntimeInvisibleTypeAnnotationsAttribute(annotations);\n+    }\n+\n+    \/**\n+     * {@return a {@code RuntimeInvisibleTypeAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeInvisibleTypeAnnotationsAttribute of(TypeAnnotation... annotations) {\n+        return of(List.of(annotations));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeInvisibleTypeAnnotationsAttribute.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.*;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+\n+import java.util.List;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code RuntimeVisibleAnnotations} attribute {@jvms 4.7.16}, which\n+ * can appear on classes, methods, and fields. Delivered as a\n+ * {@link java.lang.classfile.ClassElement}, {@link java.lang.classfile.FieldElement}, or\n+ * {@link java.lang.classfile.MethodElement} when traversing the corresponding model type.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 5.0.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface RuntimeVisibleAnnotationsAttribute\n+        extends Attribute<RuntimeVisibleAnnotationsAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundRuntimeVisibleAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeVisibleAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the runtime-visible annotations on this class, field, or method}\n+     *\/\n+    List<Annotation> annotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeVisibleAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeVisibleAnnotationsAttribute of(List<Annotation> annotations) {\n+        return new UnboundAttribute.UnboundRuntimeVisibleAnnotationsAttribute(annotations);\n+    }\n+\n+    \/**\n+     * {@return a {@code RuntimeVisibleAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeVisibleAnnotationsAttribute of(Annotation... annotations) {\n+        return of(List.of(annotations));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeVisibleAnnotationsAttribute.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.MethodModel;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code RuntimeVisibleParameterAnnotations} attribute {@jvms 4.7.18}, which\n+ * can appear on methods. Delivered as a {@link java.lang.classfile.MethodElement}\n+ * when traversing a {@link MethodModel}.\n+ *\n+ * @apiNote The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 5.0.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface RuntimeVisibleParameterAnnotationsAttribute\n+        extends Attribute<RuntimeVisibleParameterAnnotationsAttribute>, MethodElement\n+        permits BoundAttribute.BoundRuntimeVisibleParameterAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeVisibleParameterAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the list of annotations corresponding to each method parameter}\n+     * The element at the i'th index corresponds to the annotations on the i'th\n+     * parameter.\n+     *\/\n+    List<List<Annotation>> parameterAnnotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeVisibleParameterAnnotations} attribute}\n+     * @param parameterAnnotations a list of parameter annotations for each parameter\n+     *\/\n+    static RuntimeVisibleParameterAnnotationsAttribute of(List<List<Annotation>> parameterAnnotations) {\n+        return new UnboundAttribute.UnboundRuntimeVisibleParameterAnnotationsAttribute(parameterAnnotations);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeVisibleParameterAnnotationsAttribute.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.TypeAnnotation;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code RuntimeVisibleTypeAnnotations} attribute {@jvms 4.7.20}, which\n+ * can appear on classes, methods, fields, and code attributes. Delivered as a\n+ * {@link java.lang.classfile.ClassElement}, {@link java.lang.classfile.FieldElement},\n+ * {@link java.lang.classfile.MethodElement}, or {@link CodeElement} when traversing\n+ * the corresponding model type.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 8.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface RuntimeVisibleTypeAnnotationsAttribute\n+        extends Attribute<RuntimeVisibleTypeAnnotationsAttribute>,\n+                ClassElement, MethodElement, FieldElement, CodeElement\n+        permits BoundAttribute.BoundRuntimeVisibleTypeAnnotationsAttribute,\n+                UnboundAttribute.UnboundRuntimeVisibleTypeAnnotationsAttribute {\n+\n+    \/**\n+     * {@return the runtime-visible type annotations on parts of this class, field, or method}\n+     *\/\n+    List<TypeAnnotation> annotations();\n+\n+    \/**\n+     * {@return a {@code RuntimeVisibleTypeAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeVisibleTypeAnnotationsAttribute of(List<TypeAnnotation> annotations) {\n+        return new UnboundAttribute.UnboundRuntimeVisibleTypeAnnotationsAttribute(annotations);\n+    }\n+\n+    \/**\n+     * {@return a {@code RuntimeVisibleTypeAnnotations} attribute}\n+     * @param annotations the annotations\n+     *\/\n+    static RuntimeVisibleTypeAnnotationsAttribute of(TypeAnnotation... annotations) {\n+        return of(List.of(annotations));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RuntimeVisibleTypeAnnotationsAttribute.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassSignature;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import java.lang.classfile.MethodSignature;\n+import java.lang.classfile.Signature;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code Signature} attribute {@jvms 4.7.9}, which\n+ * can appear on classes, methods, or fields. Delivered as a\n+ * {@link java.lang.classfile.ClassElement}, {@link java.lang.classfile.FieldElement}, or\n+ * {@link java.lang.classfile.MethodElement} when traversing\n+ * the corresponding model type.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 5.0.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface SignatureAttribute\n+        extends Attribute<SignatureAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundSignatureAttribute, UnboundAttribute.UnboundSignatureAttribute {\n+\n+    \/**\n+     * {@return the signature for the class, method, or field}\n+     *\/\n+    Utf8Entry signature();\n+\n+    \/**\n+     * Parse the signature as a class signature.\n+     * @return the class signature\n+     *\/\n+    default ClassSignature asClassSignature() {\n+        return ClassSignature.parseFrom(signature().stringValue());\n+    }\n+\n+    \/**\n+     * Parse the signature as a method signature.\n+     * @return the method signature\n+     *\/\n+    default MethodSignature asMethodSignature() {\n+        return MethodSignature.parseFrom(signature().stringValue());\n+    }\n+\n+    \/**\n+     * Parse the signature as a type signature.\n+     * @return the type signature\n+     *\/\n+    default Signature asTypeSignature() {\n+        return Signature.parseFrom(signature().stringValue());\n+    }\n+\n+    \/**\n+     * {@return a {@code Signature} attribute for a class}\n+     * @param classSignature the signature\n+     *\/\n+    static SignatureAttribute of(ClassSignature classSignature) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(classSignature.signatureString()));\n+    }\n+\n+    \/**\n+     * {@return a {@code Signature} attribute for a method}\n+     * @param methodSignature the signature\n+     *\/\n+    static SignatureAttribute of(MethodSignature methodSignature) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(methodSignature.signatureString()));\n+    }\n+\n+    \/**\n+     * {@return a {@code Signature} attribute}\n+     * @param signature the signature\n+     *\/\n+    static SignatureAttribute of(Signature signature) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(signature.signatureString()));\n+    }\n+\n+    \/**\n+     * {@return a {@code Signature} attribute}\n+     * @param signature the signature\n+     *\/\n+    static SignatureAttribute of(Utf8Entry signature) {\n+        return new UnboundAttribute.UnboundSignatureAttribute(signature);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/SignatureAttribute.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code SourceDebugExtension} attribute.\n+ * Delivered as a {@link java.lang.classfile.ClassElement} when traversing the elements of\n+ * a {@link java.lang.classfile.ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 5.0.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface SourceDebugExtensionAttribute\n+        extends Attribute<SourceDebugExtensionAttribute>, ClassElement\n+        permits BoundAttribute.BoundSourceDebugExtensionAttribute, UnboundAttribute.UnboundSourceDebugExtensionAttribute {\n+\n+    \/**\n+     * {@return the debug extension payload}\n+     *\/\n+    byte[] contents();\n+\n+    \/**\n+     * {@return a {@code SourceDebugExtension} attribute}\n+     * @param contents the extension contents\n+     *\/\n+    static SourceDebugExtensionAttribute of(byte[] contents) {\n+        return new UnboundAttribute.UnboundSourceDebugExtensionAttribute(contents);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/SourceDebugExtensionAttribute.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code SourceFile} attribute {@jvms 4.7.10}, which\n+ * can appear on classes. Delivered as a {@link java.lang.classfile.ClassElement}\n+ * when traversing a {@link ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface SourceFileAttribute\n+        extends Attribute<SourceFileAttribute>, ClassElement\n+        permits BoundAttribute.BoundSourceFileAttribute, UnboundAttribute.UnboundSourceFileAttribute {\n+\n+    \/**\n+     * {@return the name of the source file from which this class was compiled}\n+     *\/\n+    Utf8Entry sourceFile();\n+\n+    \/**\n+     * {@return a source file attribute}\n+     * @param sourceFile the source file name\n+     *\/\n+    static SourceFileAttribute of(String sourceFile) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(sourceFile));\n+    }\n+\n+    \/**\n+     * {@return a source file attribute}\n+     * @param sourceFile the source file name\n+     *\/\n+    static SourceFileAttribute of(Utf8Entry sourceFile) {\n+        return new UnboundAttribute.UnboundSourceFileAttribute(sourceFile);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/SourceFileAttribute.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code SourceID} attribute, which can\n+ * appear on classes. Delivered as a {@link java.lang.classfile.ClassElement} when\n+ * traversing a {@link ClassModel}.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface SourceIDAttribute\n+        extends Attribute<SourceIDAttribute>, ClassElement\n+        permits BoundAttribute.BoundSourceIDAttribute, UnboundAttribute.UnboundSourceIDAttribute {\n+\n+    \/**\n+     * {@return the source id}  The source id is the last modified time of the\n+     * source file (as reported by the filesystem, in milliseconds) when the\n+     * classfile is compiled.\n+     *\/\n+    Utf8Entry sourceId();\n+\n+    \/**\n+     * {@return a {@code SourceID} attribute}\n+     * @param sourceId the source id\n+     *\/\n+    static SourceIDAttribute of(Utf8Entry sourceId) {\n+        return new UnboundAttribute.UnboundSourceIDAttribute(sourceId);\n+    }\n+\n+    \/**\n+     * {@return a {@code SourceID} attribute}\n+     * @param sourceId the source id\n+     *\/\n+    static SourceIDAttribute of(String sourceId) {\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(sourceId));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/SourceIDAttribute.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,197 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.List;\n+\n+import java.lang.classfile.Label;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import jdk.internal.classfile.impl.StackMapDecoder;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import static java.lang.classfile.ClassFile.*;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models stack map frame of {@code StackMapTable} attribute {@jvms 4.7.4}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface StackMapFrameInfo\n+            permits StackMapDecoder.StackMapFrameImpl {\n+\n+    \/**\n+     * {@return the frame compact form type}\n+     *\/\n+    int frameType();\n+\n+    \/**\n+     * {@return the frame target label}\n+     *\/\n+    Label target();\n+\n+    \/**\n+     * {@return the expanded local variable types}\n+     *\/\n+    List<VerificationTypeInfo> locals();\n+\n+    \/**\n+     * {@return the expanded stack types}\n+     *\/\n+    List<VerificationTypeInfo> stack();\n+\n+    \/**\n+     * {@return a new stack map frame}\n+     * @param target the location of the frame\n+     * @param locals the complete list of frame locals\n+     * @param stack the complete frame stack\n+     *\/\n+    public static StackMapFrameInfo of(Label target,\n+            List<VerificationTypeInfo> locals,\n+            List<VerificationTypeInfo> stack) {\n+\n+        return new StackMapDecoder.StackMapFrameImpl(255, target, locals, stack);\n+    }\n+\n+    \/**\n+     * The type of a stack value.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface VerificationTypeInfo {\n+\n+        \/**\n+         * {@return the tag of the type info}\n+         *\/\n+        int tag();\n+    }\n+\n+    \/**\n+     * A simple stack value.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    public enum SimpleVerificationTypeInfo implements VerificationTypeInfo {\n+\n+        \/** verification type top *\/\n+        ITEM_TOP(VT_TOP),\n+\n+        \/** verification type int *\/\n+        ITEM_INTEGER(VT_INTEGER),\n+\n+        \/** verification type float *\/\n+        ITEM_FLOAT(VT_FLOAT),\n+\n+        \/** verification type double *\/\n+        ITEM_DOUBLE(VT_DOUBLE),\n+\n+        \/** verification type long *\/\n+        ITEM_LONG(VT_LONG),\n+\n+        \/** verification type null *\/\n+        ITEM_NULL(VT_NULL),\n+\n+        \/** verification type uninitializedThis *\/\n+        ITEM_UNINITIALIZED_THIS(VT_UNINITIALIZED_THIS);\n+\n+\n+        private final int tag;\n+\n+        SimpleVerificationTypeInfo(int tag) {\n+            this.tag = tag;\n+        }\n+\n+        @Override\n+        public int tag() {\n+            return tag;\n+        }\n+    }\n+\n+    \/**\n+     * A stack value for an object type.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface ObjectVerificationTypeInfo extends VerificationTypeInfo\n+            permits StackMapDecoder.ObjectVerificationTypeInfoImpl {\n+\n+        \/**\n+         * {@return a new object verification type info}\n+         * @param className the class of the object\n+         *\/\n+        public static ObjectVerificationTypeInfo of(ClassEntry className) {\n+            return new StackMapDecoder.ObjectVerificationTypeInfoImpl(className);\n+        }\n+\n+        \/**\n+         * {@return a new object verification type info}\n+         * @param classDesc the class of the object\n+         * @throws IllegalArgumentException if {@code classDesc} represents a primitive type\n+         *\/\n+        public static ObjectVerificationTypeInfo of(ClassDesc classDesc) {\n+            return of(TemporaryConstantPool.INSTANCE.classEntry(classDesc));\n+        }\n+\n+        \/**\n+         * {@return the class of the object}\n+         *\/\n+        ClassEntry className();\n+\n+        \/**\n+         * {@return the class of the object}\n+         *\/\n+        default ClassDesc classSymbol() {\n+            return className().asSymbol();\n+        }\n+    }\n+\n+    \/**\n+     * An uninitialized stack value.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface UninitializedVerificationTypeInfo extends VerificationTypeInfo\n+            permits StackMapDecoder.UninitializedVerificationTypeInfoImpl {\n+\n+        \/**\n+         * {@return the {@code new} instruction position that creates this unitialized object}\n+         *\/\n+        Label newTarget();\n+\n+        \/**\n+         * {@return an unitialized verification type info}\n+         * @param newTarget the {@code new} instruction position that creates this unitialized object\n+         *\/\n+        public static UninitializedVerificationTypeInfo of(Label newTarget) {\n+            return new StackMapDecoder.UninitializedVerificationTypeInfoImpl(newTarget);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/StackMapFrameInfo.java","additions":197,"deletions":0,"binary":false,"changes":197,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.CodeElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code StackMapTable} attribute {@jvms 4.7.4}, which can appear\n+ * on a {@code Code} attribute.\n+ * <p>\n+ * The attribute does not permit multiple instances in a given location.\n+ * Subsequent occurrence of the attribute takes precedence during the attributed\n+ * element build or transformation.\n+ * <p>\n+ * The attribute was introduced in the Java SE Platform version 6.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface StackMapTableAttribute\n+        extends Attribute<StackMapTableAttribute>, CodeElement\n+        permits BoundAttribute.BoundStackMapTableAttribute, UnboundAttribute.UnboundStackMapTableAttribute {\n+\n+    \/**\n+     * {@return the stack map frames}\n+     *\/\n+    List<StackMapFrameInfo> entries();\n+\n+    \/**\n+     * {@return a stack map table attribute}\n+     * @param entries the stack map frames\n+     *\/\n+    public static StackMapTableAttribute of(List<StackMapFrameInfo> entries) {\n+        return new UnboundAttribute.UnboundStackMapTableAttribute(entries);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/StackMapTableAttribute.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.MethodElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.impl.UnboundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models the {@code Synthetic} attribute {@jvms 4.7.8}, which can appear on\n+ * classes, methods, and fields.  Delivered as a  {@link ClassElement},\n+ * {@link MethodElement}, or  {@link FieldElement} when traversing the elements\n+ * of a corresponding model.\n+ * <p>\n+ * The attribute permits multiple instances in a given location.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface SyntheticAttribute\n+        extends Attribute<SyntheticAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundSyntheticAttribute, UnboundAttribute.UnboundSyntheticAttribute {\n+\n+    \/**\n+     * {@return a {@code Synthetic} attribute}\n+     *\/\n+    static SyntheticAttribute of() {\n+        return new UnboundAttribute.UnboundSyntheticAttribute();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/SyntheticAttribute.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.classfile.attribute;\n+\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.MethodElement;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an unknown attribute on a class, method, or field.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface UnknownAttribute\n+        extends Attribute<UnknownAttribute>,\n+                ClassElement, MethodElement, FieldElement\n+        permits BoundAttribute.BoundUnknownAttribute {\n+\n+    \/**\n+     * {@return the uninterpreted contents of the attribute payload}\n+     *\/\n+    byte[] contents();\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/UnknownAttribute.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <h2>Provides interfaces describing classfile attributes for the {@link java.lang.classfile} library.<\/h2>\n+ *\n+ * The {@code java.lang.classfile.attribute} package contains interfaces describing classfile attributes.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+package java.lang.classfile.attribute;\n+\n+import jdk.internal.javac.PreviewFeature;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/package-info.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,228 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.components;\n+\n+import java.lang.constant.ConstantDesc;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CompoundElement;\n+\n+import jdk.internal.classfile.impl.ClassPrinterImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A printer of classfiles and its elements.\n+ * <p>\n+ * Any {@link ClassModel}, {@link FieldModel}, {@link MethodModel}, or {@link CodeModel}\n+ * can be printed to a human-readable structured text in JSON, XML, or YAML format.\n+ * Or it can be exported into a tree of traversable and printable nodes,\n+ * more exactly into a tree of {@link MapNode}, {@link ListNode}, and {@link LeafNode} instances.\n+ * <p>\n+ * Level of details to print or to export is driven by {@link Verbosity} option.\n+ * <p>\n+ * Printing is for debugging purposes only. Printed text schema, tree content and structure\n+ * not guaranteed. It may change anytime in a future.\n+ * <p>\n+ * The most frequent use case is to simply print a class:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printClass\"}\n+ * <p>\n+ * {@link ClassPrinter} allows to traverse tree of simple printable nodes to hook custom printer:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"customPrint\"}\n+ * <p>\n+ * Another use case for {@link ClassPrinter} is to simplify writing of automated tests:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printNodesInTest\"}\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public final class ClassPrinter {\n+\n+    private ClassPrinter() {\n+    }\n+\n+    \/**\n+     * Level of detail to print or export.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    public enum Verbosity {\n+\n+        \/**\n+         * Only top level class info, class members and attribute names are printed.\n+         *\/\n+        MEMBERS_ONLY,\n+\n+        \/**\n+         * Top level class info, class members, and critical attributes are printed.\n+         * <p>\n+         * Critical attributes are:\n+         * <ul>\n+         * <li>ConstantValue\n+         * <li>Code\n+         * <li>StackMapTable\n+         * <li>BootstrapMethods\n+         * <li>NestHost\n+         * <li>NestMembers\n+         * <li>PermittedSubclasses\n+         * <\/ul>\n+         * @jvms 4.7 Attributes\n+         *\/\n+        CRITICAL_ATTRIBUTES,\n+\n+        \/**\n+         * All class content is printed, including constant pool.\n+         *\/\n+        TRACE_ALL }\n+\n+    \/**\n+     * Named, traversable, and printable node parent.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    public sealed interface Node {\n+\n+        \/**\n+         * Printable name of the node.\n+         * @return name of the node\n+         *\/\n+        ConstantDesc name();\n+\n+        \/**\n+         * Walks through the underlying tree.\n+         * @return ordered stream of nodes\n+         *\/\n+        Stream<Node> walk();\n+\n+        \/**\n+         * Prints the node and its sub-tree into JSON format.\n+         * @param out consumer of the printed fragments\n+         *\/\n+        default void toJson(Consumer<String> out) {\n+            ClassPrinterImpl.toJson(this, out);\n+        }\n+\n+        \/**\n+         * Prints the node and its sub-tree into XML format.\n+         * @param out consumer of the printed fragments\n+         *\/\n+        default void toXml(Consumer<String> out) {\n+            ClassPrinterImpl.toXml(this, out);\n+        }\n+\n+        \/**\n+         * Prints the node and its sub-tree into YAML format.\n+         * @param out consumer of the printed fragments\n+         *\/\n+        default void toYaml(Consumer<String> out) {\n+            ClassPrinterImpl.toYaml(this, out);\n+        }\n+    }\n+\n+    \/**\n+     * A leaf node holding single printable value.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    public sealed interface LeafNode extends Node\n+            permits ClassPrinterImpl.LeafNodeImpl {\n+\n+        \/**\n+         * Printable node value\n+         * @return node value\n+         *\/\n+        ConstantDesc value();\n+    }\n+\n+    \/**\n+     * A tree node holding {@link List} of nested nodes.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    public sealed interface ListNode extends Node, List<Node>\n+            permits ClassPrinterImpl.ListNodeImpl {\n+    }\n+\n+    \/**\n+     * A tree node holding {@link Map} of nested nodes.\n+     * <p>\n+     * Each {@link Map.Entry#getKey()} == {@link Map.Entry#getValue()}.{@link #name()}.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    public sealed interface MapNode extends Node, Map<ConstantDesc, Node>\n+            permits ClassPrinterImpl.MapNodeImpl {\n+    }\n+\n+    \/**\n+     * Exports provided model into a tree of printable nodes.\n+     * @param model a {@link ClassModel}, {@link FieldModel}, {@link MethodModel}, or {@link CodeModel} to export\n+     * @param verbosity level of details to export\n+     * @return root node of the exported tree\n+     *\/\n+    public static MapNode toTree(CompoundElement<?> model, Verbosity verbosity) {\n+        return ClassPrinterImpl.modelToTree(model, verbosity);\n+    }\n+\n+    \/**\n+     * Prints provided model as structured text in JSON format.\n+     * @param model a {@link ClassModel}, {@link FieldModel}, {@link MethodModel}, or {@link CodeModel} to print\n+     * @param verbosity level of details to print\n+     * @param out consumer of the print fragments\n+     *\/\n+    public static void toJson(CompoundElement<?> model, Verbosity verbosity, Consumer<String> out) {\n+        toTree(model, verbosity).toJson(out);\n+    }\n+\n+    \/**\n+     * Prints provided model as structured text in XML format.\n+     * @param model a {@link ClassModel}, {@link FieldModel}, {@link MethodModel}, or {@link CodeModel} to print\n+     * @param verbosity level of details to print\n+     * @param out consumer of the print fragments\n+     *\/\n+    public static void toXml(CompoundElement<?> model, Verbosity verbosity, Consumer<String> out) {\n+        toTree(model, verbosity).toXml(out);\n+    }\n+\n+    \/**\n+     * Prints provided model as structured text in YAML format.\n+     * @param model a {@link ClassModel}, {@link FieldModel}, {@link MethodModel}, or {@link CodeModel} to print\n+     * @param verbosity level of details to print\n+     * @param out consumer of the print fragments\n+     *\/\n+    public static void toYaml(CompoundElement<?> model, Verbosity verbosity, Consumer<String> out) {\n+        toTree(model, verbosity).toYaml(out);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/ClassPrinter.java","additions":228,"deletions":0,"binary":false,"changes":228,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.components;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.FieldTransform;\n+import java.lang.classfile.MethodTransform;\n+import jdk.internal.classfile.impl.ClassRemapperImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * {@code ClassRemapper} is a {@link ClassTransform}, {@link FieldTransform},\n+ * {@link MethodTransform} and {@link CodeTransform}\n+ * deeply re-mapping all class references in any form, according to given map or\n+ * map function.\n+ * <p>\n+ * The re-mapping is applied to superclass, interfaces, all kinds of descriptors\n+ * and signatures, all attributes referencing classes in any form (including all\n+ * types of annotations), and to all instructions referencing to classes.\n+ * <p>\n+ * Primitive types and arrays are never subjects of mapping and are not allowed\n+ * targets of mapping.\n+ * <p>\n+ * Arrays of reference types are always decomposed, mapped as the base reference\n+ * types and composed back to arrays.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ClassRemapper extends ClassTransform permits ClassRemapperImpl {\n+\n+    \/**\n+     * Creates new instance of {@code ClassRemapper} instructed with a class map.\n+     * Map may contain only re-mapping entries, identity mapping is applied by default.\n+     * @param classMap class map\n+     * @return new instance of {@code ClassRemapper}\n+     *\/\n+    static ClassRemapper of(Map<ClassDesc, ClassDesc> classMap) {\n+        return of(desc -> classMap.getOrDefault(desc, desc));\n+    }\n+\n+    \/**\n+     * Creates new instance of {@code ClassRemapper} instructed with a map function.\n+     * Map function must return valid {@link java.lang.constant.ClassDesc} of an interface\n+     * or a class, even for identity mappings.\n+     * @param mapFunction class map function\n+     * @return new instance of {@code ClassRemapper}\n+     *\/\n+    static ClassRemapper of(Function<ClassDesc, ClassDesc> mapFunction) {\n+        return new ClassRemapperImpl(mapFunction);\n+    }\n+\n+    \/**\n+     * Access method to internal class mapping function.\n+     * @param desc source class\n+     * @return target class\n+     *\/\n+    ClassDesc map(ClassDesc desc);\n+\n+    \/**\n+     * {@return this {@code ClassRemapper} as {@link FieldTransform} instance}\n+     *\/\n+    FieldTransform asFieldTransform();\n+\n+    \/**\n+     * {@return this {@code ClassRemapper} as {@link MethodTransform} instance}\n+     *\/\n+    MethodTransform asMethodTransform();\n+\n+    \/**\n+     * {@return this {@code ClassRemapper} as {@link CodeTransform} instance}\n+     *\/\n+    CodeTransform asCodeTransform();\n+\n+    \/**\n+     * Remaps the whole ClassModel into a new class file, including the class name.\n+     * @param context ClassFile context\n+     * @param clm class model to re-map\n+     * @return re-mapped class file bytes\n+     *\/\n+    default byte[] remapClass(ClassFile context, ClassModel clm) {\n+        return context.transform(clm, map(clm.thisClass().asSymbol()), this);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/ClassRemapper.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.components;\n+\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.reflect.AccessFlag;\n+import java.lang.classfile.AccessFlags;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.TypeKind;\n+import jdk.internal.classfile.impl.CodeLocalsShifterImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * {@link CodeLocalsShifter} is a {@link CodeTransform} shifting locals to\n+ * newly allocated positions to avoid conflicts during code injection.\n+ * Locals pointing to the receiver or to method arguments slots are never shifted.\n+ * All locals pointing beyond the method arguments are re-indexed in order of appearance.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface CodeLocalsShifter extends CodeTransform permits CodeLocalsShifterImpl {\n+\n+    \/**\n+     * Creates a new instance of {@link CodeLocalsShifter}\n+     * with fixed local slots calculated from provided method information.\n+     * @param methodFlags flags of the method to construct {@link CodeLocalsShifter} for\n+     * @param methodDescriptor descriptor of the method to construct {@link CodeLocalsShifter} for\n+     * @return new instance of {@link CodeLocalsShifter}\n+     *\/\n+    static CodeLocalsShifter of(AccessFlags methodFlags, MethodTypeDesc methodDescriptor) {\n+        int fixed = methodFlags.has(AccessFlag.STATIC) ? 0 : 1;\n+        for (var param : methodDescriptor.parameterList())\n+            fixed += TypeKind.from(param).slotSize();\n+        return new CodeLocalsShifterImpl(fixed);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/CodeLocalsShifter.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.components;\n+\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.Label;\n+import jdk.internal.classfile.impl.CodeRelabelerImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A code relabeler is a {@link CodeTransform} replacing all occurrences\n+ * of {@link java.lang.classfile.Label} in the transformed code with new instances.\n+ * All {@link java.lang.classfile.instruction.LabelTarget} instructions are adjusted accordingly.\n+ * Relabeled code graph is identical to the original.\n+ * <p>\n+ * Primary purpose of CodeRelabeler is for repeated injections of the same code blocks.\n+ * Repeated injection of the same code block must be relabeled, so each instance of\n+ * {@link java.lang.classfile.Label} is bound in the target bytecode exactly once.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface CodeRelabeler extends CodeTransform permits CodeRelabelerImpl {\n+\n+    \/**\n+     * Creates a new instance of CodeRelabeler.\n+     * @return a new instance of CodeRelabeler\n+     *\/\n+    static CodeRelabeler of() {\n+        return of(new IdentityHashMap<>());\n+    }\n+\n+    \/**\n+     * Creates a new instance of CodeRelabeler storing the label mapping into the provided map.\n+     * @param map label map actively used for relabeling\n+     * @return a new instance of CodeRelabeler\n+     *\/\n+    static CodeRelabeler of(Map<Label, Label> map) {\n+        return of((l, cob) -> map.computeIfAbsent(l, ll -> cob.newLabel()));\n+    }\n+\n+    \/**\n+     * Creates a new instance of CodeRelabeler using provided {@link java.util.function.BiFunction}\n+     * to re-label the code.\n+     * @param mapFunction function for remapping labels in the source code model\n+     * @return a new instance of CodeRelabeler\n+     *\/\n+    static CodeRelabeler of(BiFunction<Label, CodeBuilder, Label> mapFunction) {\n+        return new CodeRelabelerImpl(mapFunction);\n+    }\n+\n+    \/**\n+     * Access method to internal re-labeling function.\n+     * @param label source label\n+     * @param codeBuilder builder to create new labels\n+     * @return target label\n+     *\/\n+    Label relabel(Label label, CodeBuilder codeBuilder);\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/CodeRelabeler.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.components;\n+package java.lang.classfile.components;\n@@ -29,3 +29,3 @@\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.TypeKind;\n@@ -33,0 +33,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -51,0 +52,2 @@\n+ *\n+ * @since 22\n@@ -52,0 +55,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/CodeStackTracker.java","additions":8,"deletions":4,"binary":false,"changes":12,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/CodeStackTracker.java","status":"renamed"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <h2>Provides specific components, transformations, and tools built on top of the\n+ * {@link java.lang.classfile} library.<\/h2>\n+ *\n+ * The {@code java.lang.classfile.components} package contains specific\n+ * transformation components and utility classes helping to compose very complex\n+ * tasks with minimal effort.\n+ *\n+ * <h3>{@link ClassPrinter}<\/h3>\n+ * <p>\n+ * {@link ClassPrinter} is a helper class providing seamless export of a {@link\n+ * java.lang.classfile.ClassModel}, {@link java.lang.classfile.FieldModel},\n+ * {@link java.lang.classfile.MethodModel}, or {@link\n+ * java.lang.classfile.CodeModel} into human-readable structured text in\n+ * JSON, XML, or YAML format, or into a tree of traversable and printable nodes.\n+ * <p>\n+ * Primary purpose of {@link ClassPrinter} is to provide human-readable class\n+ * info for debugging, exception handling and logging purposes. The printed\n+ * class also conforms to a standard format to support automated offline\n+ * processing.\n+ * <p>\n+ * The most frequent use case is to simply print a class:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printClass\"}\n+ * <p>\n+ * {@link ClassPrinter} allows to traverse tree of simple printable nodes to\n+ * hook custom printer:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"customPrint\"}\n+ * <p>\n+ * Another use case for {@link ClassPrinter} is to simplify writing of automated\n+ * tests:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printNodesInTest\"}\n+ *\n+ * <h3>{@link ClassRemapper}<\/h3>\n+ * ClassRemapper is a {@link java.lang.classfile.ClassTransform}, {@link\n+ * java.lang.classfile.FieldTransform}, {@link\n+ * java.lang.classfile.MethodTransform} and {@link\n+ * java.lang.classfile.CodeTransform} deeply re-mapping all class references\n+ * in any form, according to given map or map function.\n+ * <p>\n+ * The re-mapping is applied to superclass, interfaces, all kinds of descriptors\n+ * and signatures, all attributes referencing classes in any form (including all\n+ * types of annotations), and to all instructions referencing to classes.\n+ * <p>\n+ * Primitive types and arrays are never subjects of mapping and are not allowed\n+ * targets of mapping.\n+ * <p>\n+ * Arrays of reference types are always decomposed, mapped as the base reference\n+ * types and composed back to arrays.\n+ * <p>\n+ * Single class remapping example:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"singleClassRemap\"}\n+ * <p>\n+ * Remapping of all classes under specific package:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"allPackageRemap\"}\n+ *\n+ * <h3>{@link CodeLocalsShifter}<\/h3>\n+ * {@link CodeLocalsShifter} is a {@link java.lang.classfile.CodeTransform}\n+ * shifting locals to newly allocated positions to avoid conflicts during code\n+ * injection. Locals pointing to the receiver or to method arguments slots are\n+ * never shifted. All locals pointing beyond the method arguments are re-indexed\n+ * in order of appearance.\n+ * <p>\n+ * Sample of code transformation shifting all locals in all methods:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"codeLocalsShifting\"}\n+ *\n+ * <h3>{@link CodeRelabeler}<\/h3>\n+ * {@link CodeRelabeler} is a {@link java.lang.classfile.CodeTransform}\n+ * replacing all occurrences of {@link java.lang.classfile.Label} in the\n+ * transformed code with new instances.\n+ * All {@link java.lang.classfile.instruction.LabelTarget} instructions are\n+ * adjusted accordingly.\n+ * Relabeled code graph is identical to the original.\n+ * <p>\n+ * Primary purpose of {@link CodeRelabeler} is for repeated injections of the\n+ * same code blocks.\n+ * Repeated injection of the same code block must be relabeled, so each instance\n+ * of {@link java.lang.classfile.Label} is bound in the target bytecode\n+ * exactly once.\n+ * <p>\n+ * Sample transformation relabeling all methods:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"codeRelabeling\"}\n+ *\n+ * <h3>Class Instrumentation Sample<\/h3>\n+ * Following snippet is sample composition of {@link ClassRemapper}, {@link\n+ * CodeLocalsShifter} and {@link CodeRelabeler} into fully functional class\n+ * instrumenting transformation:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"classInstrumentation\"}\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+package java.lang.classfile.components;\n+\n+import jdk.internal.javac.PreviewFeature;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/package-info.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -25,0 +25,2 @@\n+package java.lang.classfile.components.snippets;\n+\n@@ -34,17 +36,17 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n-\n-import jdk.internal.classfile.MethodTransform;\n-import jdk.internal.classfile.components.ClassPrinter;\n-import jdk.internal.classfile.components.ClassRemapper;\n-import jdk.internal.classfile.components.CodeLocalsShifter;\n-import jdk.internal.classfile.components.CodeRelabeler;\n-import jdk.internal.classfile.instruction.ReturnInstruction;\n-import jdk.internal.classfile.instruction.StoreInstruction;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.components.ClassPrinter;\n+import java.lang.classfile.components.ClassRemapper;\n+import java.lang.classfile.components.CodeLocalsShifter;\n+import java.lang.classfile.components.CodeRelabeler;\n+import java.lang.classfile.instruction.ReturnInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n@@ -109,1 +111,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -121,1 +123,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -131,1 +133,1 @@\n-        byte[] newBytes = Classfile.of().transform(\n+        byte[] newBytes = ClassFile.of().transform(\n@@ -146,1 +148,1 @@\n-        byte[] newBytes = Classfile.of().transform(\n+        byte[] newBytes = ClassFile.of().transform(\n@@ -161,1 +163,1 @@\n-        return Classfile.of().transform(target,\n+        return ClassFile.of().transform(target,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/snippet-files\/PackageSnippets.java","additions":24,"deletions":22,"binary":false,"changes":46,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/snippet-files\/PackageSnippets.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -28,0 +28,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -32,0 +33,3 @@\n+ *\n+ * @sealedGraph\n+ * @since 22\n@@ -33,0 +37,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/AnnotationConstantValueEntry.java","additions":6,"deletions":1,"binary":false,"changes":7,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/AnnotationConstantValueEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -30,0 +30,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -35,0 +36,2 @@\n+ *\n+ * @since 22\n@@ -36,0 +39,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ClassEntry.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ClassEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.TypeKind;\n@@ -35,0 +35,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -40,0 +41,2 @@\n+ *\n+ * @since 22\n@@ -41,0 +44,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantDynamicEntry.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantDynamicEntry.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -30,2 +30,3 @@\n-import jdk.internal.classfile.BootstrapMethodEntry;\n-import jdk.internal.classfile.ClassReader;\n+import java.lang.classfile.BootstrapMethodEntry;\n+import java.lang.classfile.ClassReader;\n+import jdk.internal.javac.PreviewFeature;\n@@ -37,0 +38,3 @@\n+ *\n+ * @sealedGraph\n+ * @since 22\n@@ -38,0 +42,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -56,1 +61,1 @@\n-     * @{return an iterator over pool entries}\n+     * {@return an iterator over pool entries}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPool.java","additions":9,"deletions":4,"binary":false,"changes":13,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPool.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -33,1 +33,0 @@\n-import java.util.Collection;\n@@ -36,5 +35,4 @@\n-import jdk.internal.classfile.BootstrapMethodEntry;\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.BootstrapMethodEntry;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassModel;\n@@ -42,1 +40,0 @@\n-import jdk.internal.classfile.impl.ClassfileImpl;\n@@ -45,1 +42,1 @@\n-import jdk.internal.classfile.WritableElement;\n+import java.lang.classfile.WritableElement;\n@@ -51,0 +48,2 @@\n+import jdk.internal.javac.PreviewFeature;\n+import static java.util.Objects.requireNonNull;\n@@ -60,0 +59,2 @@\n+ *\n+ * @since 22\n@@ -61,0 +62,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n@@ -153,0 +155,1 @@\n+     * @throws IllegalArgumentException if {@code classDesc} represents a primitive type\n@@ -155,1 +158,1 @@\n-        if (classDesc.isPrimitive()) {\n+        if (requireNonNull(classDesc).isPrimitive()) {\n@@ -273,0 +276,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n@@ -298,0 +302,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n@@ -323,0 +328,1 @@\n+     * @throws IllegalArgumentException if {@code owner} represents a primitive type\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":16,"deletions":10,"binary":false,"changes":26,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPoolBuilder.java","status":"renamed"},{"patch":"@@ -25,1 +25,3 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n+\n+import jdk.internal.javac.PreviewFeature;\n@@ -30,0 +32,2 @@\n+ *\n+ * @since 22\n@@ -31,0 +35,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolException.java","additions":6,"deletions":1,"binary":false,"changes":7,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPoolException.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -28,0 +28,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -33,0 +34,3 @@\n+ *\n+ * @sealedGraph\n+ * @since 22\n@@ -34,0 +38,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantValueEntry.java","additions":6,"deletions":1,"binary":false,"changes":7,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantValueEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.TypeKind;\n@@ -29,0 +29,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -34,0 +35,2 @@\n+ *\n+ * @since 22\n@@ -35,0 +38,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/DoubleEntry.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/DoubleEntry.java","status":"renamed"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.constantpool;\n+\n+import java.lang.classfile.BootstrapMethodEntry;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a dynamic constant pool entry, which is either {@link ConstantDynamicEntry}\n+ * or {@link InvokeDynamicEntry}.\n+ * @jvms 4.4.10 The CONSTANT_Dynamic_info and CONSTANT_InvokeDynamic_info Structures\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface DynamicConstantPoolEntry extends PoolEntry\n+        permits ConstantDynamicEntry, InvokeDynamicEntry {\n+\n+    \/**\n+     * {@return the entry in the bootstrap method table for this constant}\n+     *\/\n+    BootstrapMethodEntry bootstrap();\n+\n+    \/**\n+     * {@return index of the entry in the bootstrap method table for this constant}\n+     *\/\n+    int bootstrapMethodIndex();\n+\n+    \/**\n+     * {@return the invocation name and type}\n+     *\/\n+    NameAndTypeEntry nameAndType();\n+\n+    \/**\n+     * {@return the invocation name}\n+     *\/\n+    default Utf8Entry name() {\n+        return nameAndType().name();\n+    }\n+\n+    \/**\n+     * {@return the invocation type}\n+     *\/\n+    default Utf8Entry type() {\n+        return nameAndType().type();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/DynamicConstantPoolEntry.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -29,1 +29,1 @@\n-\n+import jdk.internal.javac.PreviewFeature;\n@@ -36,0 +36,2 @@\n+ *\n+ * @since 22\n@@ -37,0 +39,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/FieldRefEntry.java","additions":5,"deletions":2,"binary":false,"changes":7,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/FieldRefEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.TypeKind;\n@@ -29,0 +29,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -34,0 +35,2 @@\n+ *\n+ * @since 22\n@@ -35,0 +38,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/FloatEntry.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/FloatEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.TypeKind;\n@@ -29,0 +29,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -34,0 +35,2 @@\n+ *\n+ * @since 22\n@@ -35,0 +38,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/IntegerEntry.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/IntegerEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -29,1 +29,1 @@\n-\n+import jdk.internal.javac.PreviewFeature;\n@@ -36,0 +36,2 @@\n+ *\n+ * @since 22\n@@ -37,0 +39,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/InterfaceMethodRefEntry.java","additions":5,"deletions":2,"binary":false,"changes":7,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/InterfaceMethodRefEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -33,0 +33,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -37,0 +38,2 @@\n+ *\n+ * @since 22\n@@ -38,0 +41,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/InvokeDynamicEntry.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/InvokeDynamicEntry.java","status":"renamed"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.constantpool;\n+\n+import java.lang.constant.ConstantDesc;\n+import java.lang.classfile.TypeKind;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Marker interface for constant pool entries suitable for loading via the\n+ * {@code LDC} instructions.\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LoadableConstantEntry extends PoolEntry\n+        permits ClassEntry, ConstantDynamicEntry, ConstantValueEntry, MethodHandleEntry, MethodTypeEntry {\n+\n+    \/**\n+     * {@return the constant described by this entry}\n+     *\/\n+    ConstantDesc constantValue();\n+\n+    \/**\n+     * {@return the type of the constant}\n+     *\/\n+    default TypeKind typeKind() {\n+        return TypeKind.ReferenceType;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/LoadableConstantEntry.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.constantpool;\n+\n+import java.lang.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractPoolEntry;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a {@code CONSTANT_Long_info} constant in the constant pool of a\n+ * classfile.\n+ * @jvms 4.4.5 The CONSTANT_Long_info and CONSTANT_Double_info Structures\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LongEntry\n+        extends AnnotationConstantValueEntry, ConstantValueEntry\n+        permits AbstractPoolEntry.LongEntryImpl {\n+\n+    \/**\n+     * {@return the long value}\n+     *\/\n+    long longValue();\n+\n+    \/**\n+     * {@return the type of the constant}\n+     *\/\n+    @Override\n+    default TypeKind typeKind() {\n+        return TypeKind.LongType;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/LongEntry.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -28,0 +28,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -32,0 +33,3 @@\n+ *\n+ * @sealedGraph\n+ * @since 22\n@@ -33,0 +37,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/MemberRefEntry.java","additions":6,"deletions":1,"binary":false,"changes":7,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/MemberRefEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -31,0 +31,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -36,0 +37,2 @@\n+ *\n+ * @since 22\n@@ -37,0 +40,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/MethodHandleEntry.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/MethodHandleEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -29,1 +29,1 @@\n-\n+import jdk.internal.javac.PreviewFeature;\n@@ -36,0 +36,2 @@\n+ *\n+ * @since 22\n@@ -37,0 +39,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/MethodRefEntry.java","additions":5,"deletions":2,"binary":false,"changes":7,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/MethodRefEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -31,0 +31,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -36,0 +37,2 @@\n+ *\n+ * @since 22\n@@ -37,0 +40,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/MethodTypeEntry.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/MethodTypeEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -29,0 +29,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -34,0 +35,2 @@\n+ *\n+ * @since 22\n@@ -35,0 +38,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ModuleEntry.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ModuleEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -28,0 +28,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -33,0 +34,2 @@\n+ *\n+ * @since 22\n@@ -34,0 +37,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/NameAndTypeEntry.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/NameAndTypeEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -29,0 +29,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -34,0 +35,2 @@\n+ *\n+ * @since 22\n@@ -35,0 +38,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/PackageEntry.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/PackageEntry.java","status":"renamed"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.constantpool;\n+\n+import java.lang.classfile.WritableElement;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an entry in the constant pool of a classfile.\n+ *\n+ * @sealedGraph\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface PoolEntry extends WritableElement<PoolEntry>\n+        permits AnnotationConstantValueEntry, DynamicConstantPoolEntry,\n+                LoadableConstantEntry, MemberRefEntry, ModuleEntry, NameAndTypeEntry,\n+                PackageEntry {\n+\n+    \/**\n+     * {@return the constant pool this entry is from}\n+     *\/\n+    ConstantPool constantPool();\n+\n+    \/**\n+     * {@return the constant pool tag that describes the type of this entry}\n+     *\/\n+    byte tag();\n+\n+    \/**\n+     * {@return the index within the constant pool corresponding to this entry}\n+     *\/\n+    int index();\n+\n+    \/**\n+     * {@return the number of constant pool slots this entry consumes}\n+     *\/\n+    int width();\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/PoolEntry.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -28,0 +28,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -33,0 +34,2 @@\n+ *\n+ * @since 22\n@@ -34,0 +37,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/StringEntry.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/StringEntry.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.constantpool;\n+package java.lang.classfile.constantpool;\n@@ -28,0 +28,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -33,0 +34,2 @@\n+ *\n+ * @since 22\n@@ -34,0 +37,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/Utf8Entry.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/Utf8Entry.java","status":"renamed"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <h2>Provides interfaces describing classfile constant pool entries for the {@link java.lang.classfile} library.<\/h2>\n+ *\n+ * The {@code java.lang.classfile.constantpool} package contains interfaces describing classfile constant pool entries.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+package java.lang.classfile.constantpool;\n+\n+import jdk.internal.javac.PreviewFeature;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/package-info.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an array load instruction in the {@code code} array of a {@code Code}\n+ * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n+ * Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ArrayLoadInstruction extends Instruction\n+        permits AbstractInstruction.UnboundArrayLoadInstruction {\n+    \/**\n+     * {@return the component type of the array}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return an array load instruction}\n+     *\n+     * @param op the opcode for the specific type of array load instruction,\n+     *           which must be of kind {@link Opcode.Kind#ARRAY_LOAD}\n+     *\/\n+    static ArrayLoadInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.ARRAY_LOAD);\n+        return new AbstractInstruction.UnboundArrayLoadInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayLoadInstruction.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an array store instruction in the {@code code} array of a {@code Code}\n+ * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n+ * Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ArrayStoreInstruction extends Instruction\n+        permits AbstractInstruction.UnboundArrayStoreInstruction {\n+    \/**\n+     * {@return the component type of the array}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return an array store instruction}\n+     *\n+     * @param op the opcode for the specific type of array store instruction,\n+     *           which must be of kind {@link Opcode.Kind#ARRAY_STORE}\n+     *\/\n+    static ArrayStoreInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.ARRAY_STORE);\n+        return new AbstractInstruction.UnboundArrayStoreInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ArrayStoreInstruction.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.Opcode;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a branching instruction (conditional or unconditional) in the {@code\n+ * code} array of a {@code Code} attribute.  Corresponding opcodes will have a\n+ * {@code kind} of {@link Opcode.Kind#BRANCH}.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface BranchInstruction extends Instruction\n+        permits AbstractInstruction.BoundBranchInstruction,\n+                AbstractInstruction.UnboundBranchInstruction {\n+    \/**\n+     * {@return the target of the branch}\n+     *\/\n+    Label target();\n+\n+    \/**\n+     * {@return a branch instruction}\n+     *\n+     * @param op the opcode for the specific type of branch instruction,\n+     *           which must be of kind {@link Opcode.Kind#BRANCH}\n+     * @param target the target of the branch\n+     *\/\n+    static BranchInstruction of(Opcode op, Label target) {\n+        Util.checkKind(op, Opcode.Kind.BRANCH);\n+        return new AbstractInstruction.UnboundBranchInstruction(op, target);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/BranchInstruction.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.PseudoInstruction;\n+import java.lang.classfile.attribute.CharacterRangeTableAttribute;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n+import jdk.internal.classfile.impl.BoundCharacterRange;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A pseudo-instruction which models a single entry in the\n+ * {@link CharacterRangeTableAttribute}.  Delivered as a {@link CodeElement}\n+ * during traversal of the elements of a {@link CodeModel}, according to\n+ * the setting of the {@link ClassFile.DebugElementsOption} option.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface CharacterRange extends PseudoInstruction\n+        permits AbstractPseudoInstruction.UnboundCharacterRange, BoundCharacterRange {\n+    \/**\n+     * {@return the start of the instruction range}\n+     *\/\n+    Label startScope();\n+\n+    \/**\n+     * {@return the end of the instruction range}\n+     *\/\n+    Label endScope();\n+\n+    \/**\n+     * {@return the encoded start of the character range region (inclusive)}\n+     * The value is constructed from the line_number\/column_number pair as given\n+     * by {@code line_number << 10 + column_number}, where the source file is\n+     * viewed as an array of (possibly multi-byte) characters.\n+     *\/\n+    int characterRangeStart();\n+\n+    \/**\n+     * {@return the encoded end of the character range region (exclusive)}.\n+     * The value is constructed from the line_number\/column_number pair as given\n+     * by {@code line_number << 10 + column_number}, where the source file is\n+     * viewed as an array of (possibly multi-byte) characters.\n+     *\/\n+    int characterRangeEnd();\n+\n+    \/**\n+     * A flags word, indicating the kind of range.  Multiple flag bits\n+     * may be set.  Valid flags include:\n+     * <ul>\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_STATEMENT}\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_BLOCK}\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_ASSIGNMENT}\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_FLOW_CONTROLLER}\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_FLOW_TARGET}\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_INVOKE}\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_CREATE}\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_BRANCH_TRUE}\n+     * <li>{@link java.lang.classfile.ClassFile#CRT_BRANCH_FALSE}\n+     * <\/ul>\n+     *\n+     * @see java.lang.classfile.attribute.CharacterRangeInfo#flags()\n+     *\n+     * @return the flags\n+     *\/\n+    int flags();\n+\n+    \/**\n+     * {@return a character range pseudo-instruction}\n+     *\n+     * @param startScope the start of the instruction range\n+     * @param endScope the end of the instruction range\n+     * @param characterRangeStart the encoded start of the character range region (inclusive)\n+     * @param characterRangeEnd the encoded end of the character range region (exclusive)\n+     * @param flags a flags word, indicating the kind of range\n+     *\/\n+    static CharacterRange of(Label startScope, Label endScope, int characterRangeStart, int characterRangeEnd, int flags) {\n+        return new AbstractPseudoInstruction.UnboundCharacterRange(startScope, endScope, characterRangeStart, characterRangeEnd, flags);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/CharacterRange.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.constant.ConstantDesc;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.constantpool.LoadableConstantEntry;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a constant-load instruction in the {@code code} array of a {@code\n+ * Code} attribute, including \"intrinsic constant\" instructions (e.g., {@code\n+ * iconst_0}), \"argument constant\" instructions (e.g., {@code bipush}), and \"load\n+ * constant\" instructions (e.g., {@code LDC}).  Corresponding opcodes will have\n+ * a {@code kind} of {@link Opcode.Kind#CONSTANT}.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ConstantInstruction extends Instruction {\n+\n+    \/**\n+     * {@return the constant value}\n+     *\/\n+    ConstantDesc constantValue();\n+\n+    \/**\n+     * {@return the type of the constant}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * Models an \"intrinsic constant\" instruction (e.g., {@code\n+     * iconst_0}).\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface IntrinsicConstantInstruction extends ConstantInstruction\n+            permits AbstractInstruction.UnboundIntrinsicConstantInstruction {\n+\n+        \/**\n+         * {@return the type of the constant}\n+         *\/\n+        @Override\n+        default TypeKind typeKind() {\n+            return opcode().primaryTypeKind();\n+        }\n+    }\n+\n+    \/**\n+     * Models an \"argument constant\" instruction (e.g., {@code\n+     * bipush}).\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface ArgumentConstantInstruction extends ConstantInstruction\n+            permits AbstractInstruction.BoundArgumentConstantInstruction,\n+                    AbstractInstruction.UnboundArgumentConstantInstruction {\n+\n+        @Override\n+        Integer constantValue();\n+\n+        \/**\n+         * {@return the type of the constant}\n+         *\/\n+        @Override\n+        default TypeKind typeKind() {\n+            return opcode().primaryTypeKind();\n+        }\n+    }\n+\n+    \/**\n+     * Models a \"load constant\" instruction (e.g., {@code\n+     * ldc}).\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface LoadConstantInstruction extends ConstantInstruction\n+            permits AbstractInstruction.BoundLoadConstantInstruction,\n+                    AbstractInstruction.UnboundLoadConstantInstruction {\n+\n+        \/**\n+         * {@return the constant value}\n+         *\/\n+        LoadableConstantEntry constantEntry();\n+\n+        \/**\n+         * {@return the type of the constant}\n+         *\/\n+        @Override\n+        default TypeKind typeKind() {\n+            return constantEntry().typeKind();\n+        }\n+    }\n+\n+    \/**\n+     * {@return an intrinsic constant instruction}\n+     *\n+     * @param op the opcode for the specific type of intrinsic constant instruction,\n+     *           which must be of kind {@link Opcode.Kind#CONSTANT}\n+     *\/\n+    static IntrinsicConstantInstruction ofIntrinsic(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.CONSTANT);\n+        if (op.constantValue() == null)\n+            throw new IllegalArgumentException(String.format(\"Wrong opcode specified; found %s, expected xCONST_val\", op));\n+        return new AbstractInstruction.UnboundIntrinsicConstantInstruction(op);\n+    }\n+\n+    \/**\n+     * {@return an argument constant instruction}\n+     *\n+     * @param op the opcode for the specific type of intrinsic constant instruction,\n+     *           which must be of kind {@link Opcode.Kind#CONSTANT}\n+     * @param value the constant value\n+     *\/\n+    static ArgumentConstantInstruction ofArgument(Opcode op, int value) {\n+        Util.checkKind(op, Opcode.Kind.CONSTANT);\n+        if (op != Opcode.BIPUSH && op != Opcode.SIPUSH)\n+            throw new IllegalArgumentException(String.format(\"Wrong opcode specified; found %s, expected BIPUSH or SIPUSH\", op));\n+        return new AbstractInstruction.UnboundArgumentConstantInstruction(op, value);\n+    }\n+\n+    \/**\n+     * {@return a load constant instruction}\n+     *\n+     * @param op the opcode for the specific type of load constant instruction,\n+     *           which must be of kind {@link Opcode.Kind#CONSTANT}\n+     * @param constant the constant value\n+     *\/\n+    static LoadConstantInstruction ofLoad(Opcode op, LoadableConstantEntry constant) {\n+        Util.checkKind(op, Opcode.Kind.CONSTANT);\n+        if (op != Opcode.LDC && op != Opcode.LDC_W && op != Opcode.LDC2_W)\n+            throw new IllegalArgumentException(String.format(\"Wrong opcode specified; found %s, expected LDC, LDC_W or LDC2_W\", op));\n+        return new AbstractInstruction.UnboundLoadConstantInstruction(op, constant);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConstantInstruction.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.BytecodeHelpers;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a primitive conversion instruction in the {@code code} array of a\n+ * {@code Code} attribute, such as {@code i2l}.  Corresponding opcodes will have\n+ * a {@code kind} of {@link Opcode.Kind#CONVERT}.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ConvertInstruction extends Instruction\n+        permits AbstractInstruction.UnboundConvertInstruction {\n+    \/**\n+     * {@return the source type to convert from}\n+     *\/\n+    TypeKind fromType();\n+\n+    \/**\n+     * {@return the destination type to convert to}\n+     *\/\n+    TypeKind toType();\n+\n+    \/**\n+     * {@return A conversion instruction}\n+     *\n+     * @param fromType the type to convert from\n+     * @param toType the type to convert to\n+     *\/\n+    static ConvertInstruction of(TypeKind fromType, TypeKind toType) {\n+        return of(BytecodeHelpers.convertOpcode(fromType, toType));\n+    }\n+\n+    \/**\n+     * {@return a conversion instruction}\n+     *\n+     * @param op the opcode for the specific type of conversion instruction,\n+     *           which must be of kind {@link Opcode.Kind#CONVERT}\n+     *\/\n+    static ConvertInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.CONVERT);\n+        return new AbstractInstruction.UnboundConvertInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ConvertInstruction.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.Opcode;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models instruction discontinued from the {@code code} array of a {@code Code}\n+ * attribute. Delivered as a {@link CodeElement} when traversing the elements of\n+ * a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface DiscontinuedInstruction extends Instruction {\n+\n+    \/**\n+     * Models JSR and JSR_W instructions discontinued from the {@code code}\n+     * array of a {@code Code} attribute since class file version 51.0.\n+     * Corresponding opcodes will have a {@code kind} of\n+     * {@link Opcode.Kind#DISCONTINUED_JSR}.  Delivered as a {@link CodeElement}\n+     * when traversing the elements of a {@link CodeModel}.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface JsrInstruction extends DiscontinuedInstruction\n+            permits AbstractInstruction.BoundJsrInstruction,\n+                    AbstractInstruction.UnboundJsrInstruction {\n+\n+        \/**\n+         * {@return the target of the JSR instruction}\n+         *\/\n+        Label target();\n+\n+        \/**\n+         * {@return a JSR instruction}\n+         *\n+         * @param op the opcode for the specific type of JSR instruction,\n+         *           which must be of kind {@link Opcode.Kind#DISCONTINUED_JSR}\n+         * @param target target label of the subroutine\n+         *\/\n+        static JsrInstruction of(Opcode op, Label target) {\n+            Util.checkKind(op, Opcode.Kind.DISCONTINUED_JSR);\n+            return new AbstractInstruction.UnboundJsrInstruction(op, target);\n+        }\n+\n+        \/**\n+         * {@return a JSR instruction}\n+         *\n+         * @param target target label of the subroutine\n+         *\/\n+        static JsrInstruction of(Label target) {\n+            return of(Opcode.JSR, target);\n+        }\n+    }\n+\n+    \/**\n+     * Models RET and RET_W instructions discontinued from the {@code code}\n+     * array of a {@code Code} attribute since class file version 51.0.\n+     * Corresponding opcodes will have a {@code kind} of\n+     * {@link Opcode.Kind#DISCONTINUED_RET}.  Delivered as a {@link CodeElement}\n+     * when traversing the elements of a {@link CodeModel}.\n+     *\n+     * @since 22\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    sealed interface RetInstruction extends DiscontinuedInstruction\n+            permits AbstractInstruction.BoundRetInstruction,\n+                    AbstractInstruction.UnboundRetInstruction {\n+\n+        \/**\n+         * {@return the local variable slot with return address}\n+         *\/\n+        int slot();\n+\n+        \/**\n+         * {@return a RET or RET_W instruction}\n+         *\n+         * @param op the opcode for the specific type of RET instruction,\n+         *           which must be of kind {@link Opcode.Kind#DISCONTINUED_RET}\n+         * @param slot the local variable slot to load return address from\n+         *\/\n+        static RetInstruction of(Opcode op, int slot) {\n+            Util.checkKind(op, Opcode.Kind.DISCONTINUED_RET);\n+            return new AbstractInstruction.UnboundRetInstruction(op, slot);\n+        }\n+\n+        \/**\n+         * {@return a RET instruction}\n+         *\n+         * @param slot the local variable slot to load return address from\n+         *\/\n+        static RetInstruction of(int slot) {\n+            return of(slot < 256 ? Opcode.RET : Opcode.RET_W, slot);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/DiscontinuedInstruction.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.instruction;\n+package java.lang.classfile.instruction;\n@@ -29,5 +29,5 @@\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.PseudoInstruction;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.PseudoInstruction;\n@@ -35,0 +35,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -43,0 +44,2 @@\n+ *\n+ * @since 22\n@@ -44,0 +47,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ExceptionCatch.java","additions":10,"deletions":6,"binary":false,"changes":16,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ExceptionCatch.java","status":"renamed"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.constant.ClassDesc;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.constantpool.FieldRefEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a field access instruction in the {@code code} array of a {@code Code}\n+ * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n+ * Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface FieldInstruction extends Instruction\n+        permits AbstractInstruction.BoundFieldInstruction, AbstractInstruction.UnboundFieldInstruction {\n+    \/**\n+     * {@return the {@link FieldRefEntry} constant described by this instruction}\n+     *\/\n+    FieldRefEntry field();\n+\n+    \/**\n+     * {@return the class holding the field}\n+     *\/\n+    default ClassEntry owner() {\n+        return field().owner();\n+    }\n+\n+    \/**\n+     * {@return the name of the field}\n+     *\/\n+    default Utf8Entry name() {\n+        return field().nameAndType().name();\n+    }\n+\n+    \/**\n+     * {@return the field descriptor of the field}\n+     *\/\n+    default Utf8Entry type() {\n+        return field().nameAndType().type();\n+    }\n+\n+    \/**\n+     * {@return a symbolic descriptor for the type of the field}\n+     *\/\n+    default ClassDesc typeSymbol() {\n+        return field().typeSymbol();\n+    }\n+\n+    \/**\n+     * {@return a field access instruction}\n+     *\n+     * @param op the opcode for the specific type of field access instruction,\n+     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n+     * @param field a constant pool entry describing the field\n+     *\/\n+    static FieldInstruction of(Opcode op, FieldRefEntry field) {\n+        Util.checkKind(op, Opcode.Kind.FIELD_ACCESS);\n+        return new AbstractInstruction.UnboundFieldInstruction(op, field);\n+    }\n+\n+    \/**\n+     * {@return a field access instruction}\n+     *\n+     * @param op the opcode for the specific type of field access instruction,\n+     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n+     * @param owner the class holding the field\n+     * @param name the name of the field\n+     * @param type the field descriptor\n+     *\/\n+    static FieldInstruction of(Opcode op,\n+                               ClassEntry owner,\n+                               Utf8Entry name,\n+                               Utf8Entry type) {\n+        return of(op, owner, TemporaryConstantPool.INSTANCE.nameAndTypeEntry(name, type));\n+    }\n+\n+    \/**\n+     * {@return a field access instruction}\n+     *\n+     * @param op the opcode for the specific type of field access instruction,\n+     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n+     * @param owner the class holding the field\n+     * @param nameAndType the name and field descriptor of the field\n+     *\/\n+    static FieldInstruction of(Opcode op,\n+                               ClassEntry owner,\n+                               NameAndTypeEntry nameAndType) {\n+        return of(op, TemporaryConstantPool.INSTANCE.fieldRefEntry(owner, nameAndType));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/FieldInstruction.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a local variable increment instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface IncrementInstruction extends Instruction\n+        permits AbstractInstruction.BoundIncrementInstruction,\n+                AbstractInstruction.UnboundIncrementInstruction {\n+    \/**\n+     * {@return the local variable slot to increment}\n+     *\/\n+    int slot();\n+\n+    \/**\n+     * {@return the value to increment by}\n+     *\/\n+    int constant();\n+\n+    \/**\n+     * {@return an increment instruction}\n+     *\n+     * @param slot the local variable slot to increment\n+     * @param constant the value to increment by\n+     *\/\n+    static IncrementInstruction of(int slot, int constant) {\n+        return new AbstractInstruction.UnboundIncrementInstruction(slot, constant);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/IncrementInstruction.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.constant.ConstantDesc;\n+import java.lang.constant.DirectMethodHandleDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.constantpool.InvokeDynamicEntry;\n+import java.lang.classfile.constantpool.LoadableConstantEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an {@code invokedynamic} instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface InvokeDynamicInstruction extends Instruction\n+        permits AbstractInstruction.BoundInvokeDynamicInstruction, AbstractInstruction.UnboundInvokeDynamicInstruction {\n+    \/**\n+     * {@return an {@link InvokeDynamicEntry} describing the call site}\n+     *\/\n+    InvokeDynamicEntry invokedynamic();\n+\n+    \/**\n+     * {@return the invocation name of the call site}\n+     *\/\n+    default Utf8Entry name() {\n+        return invokedynamic().name();\n+    }\n+\n+    \/**\n+     * {@return the invocation type of the call site}\n+     *\/\n+    default Utf8Entry type() {\n+        return invokedynamic().type();\n+    }\n+\n+    \/**\n+     * {@return the invocation type of the call site, as a symbolic descriptor}\n+     *\/\n+    default MethodTypeDesc typeSymbol() {\n+        return invokedynamic().typeSymbol();\n+    }\n+\n+    \/**\n+     * {@return the bootstrap method of the call site}\n+     *\/\n+    default DirectMethodHandleDesc bootstrapMethod() {\n+        return invokedynamic().bootstrap()\n+                              .bootstrapMethod()\n+                              .asSymbol();\n+    }\n+\n+    \/**\n+     * {@return the bootstrap arguments of the call site}\n+     *\/\n+    default List<ConstantDesc> bootstrapArgs() {\n+        return Util.mappedList(invokedynamic().bootstrap().arguments(), new Function<>() {\n+            @Override\n+            public ConstantDesc apply(LoadableConstantEntry loadableConstantEntry) {\n+                return loadableConstantEntry.constantValue();\n+            }\n+        });\n+    }\n+\n+    \/**\n+     * {@return an invokedynamic instruction}\n+     *\n+     * @param invokedynamic the constant pool entry describing the call site\n+     *\/\n+    static InvokeDynamicInstruction of(InvokeDynamicEntry invokedynamic) {\n+        return new AbstractInstruction.UnboundInvokeDynamicInstruction(invokedynamic);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/InvokeDynamicInstruction.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.constant.MethodTypeDesc;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.constantpool.InterfaceMethodRefEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.constantpool.MethodRefEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a method invocation instruction in the {@code code} array of a {@code\n+ * Code} attribute, other than {@code invokedynamic}.  Corresponding opcodes\n+ * will have a {@code kind} of {@link Opcode.Kind#INVOKE}.  Delivered as a\n+ * {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface InvokeInstruction extends Instruction\n+        permits AbstractInstruction.BoundInvokeInterfaceInstruction, AbstractInstruction.BoundInvokeInstruction, AbstractInstruction.UnboundInvokeInstruction {\n+    \/**\n+     * {@return the {@link MethodRefEntry} or {@link InterfaceMethodRefEntry}\n+     * constant described by this instruction}\n+     *\/\n+    MemberRefEntry method();\n+\n+    \/**\n+     * {@return whether the class holding the method is an interface}\n+     *\/\n+    boolean isInterface();\n+\n+    \/**\n+     * {@return the {@code count} value of an {@code invokeinterface} instruction, as defined in {@jvms 6.5}\n+     * or {@code 0} for {@code invokespecial}, {@code invokestatic} and {@code invokevirtual} instructions}\n+     *\/\n+    int count();\n+\n+    \/**\n+     * {@return the class holding the method}\n+     *\/\n+    default ClassEntry owner() {\n+        return method().owner();\n+    }\n+\n+    \/**\n+     * {@return the name of the method}\n+     *\/\n+    default Utf8Entry name() {\n+        return method().nameAndType().name();\n+    }\n+\n+    \/**\n+     * {@return the method descriptor of the method}\n+     *\/\n+    default Utf8Entry type() {\n+        return method().nameAndType().type();\n+    }\n+\n+    \/**\n+     * {@return a symbolic descriptor for the method type}\n+     *\/\n+    default MethodTypeDesc typeSymbol() {\n+        return Util.methodTypeSymbol(method().nameAndType());\n+    }\n+\n+\n+    \/**\n+     * {@return an invocation instruction}\n+     *\n+     * @param op the opcode for the specific type of invocation instruction,\n+     *           which must be of kind {@link Opcode.Kind#INVOKE}\n+     * @param method a constant pool entry describing the method\n+     *\/\n+    static InvokeInstruction of(Opcode op, MemberRefEntry method) {\n+        Util.checkKind(op, Opcode.Kind.INVOKE);\n+        return new AbstractInstruction.UnboundInvokeInstruction(op, method);\n+    }\n+\n+    \/**\n+     * {@return an invocation instruction}\n+     *\n+     * @param op the opcode for the specific type of invocation instruction,\n+     *           which must be of kind {@link Opcode.Kind#INVOKE}\n+     * @param owner the class holding the method\n+     * @param name the name of the method\n+     * @param type the method descriptor\n+     * @param isInterface whether the class holding the method is an interface\n+     *\/\n+    static InvokeInstruction of(Opcode op,\n+                                ClassEntry owner,\n+                                Utf8Entry name,\n+                                Utf8Entry type,\n+                                boolean isInterface) {\n+        return of(op, owner, TemporaryConstantPool.INSTANCE.nameAndTypeEntry(name, type), isInterface);\n+    }\n+\n+    \/**\n+     * {@return an invocation instruction}\n+     *\n+     * @param op the opcode for the specific type of invocation instruction,\n+     *           which must be of kind {@link Opcode.Kind#INVOKE}\n+     * @param owner the class holding the method\n+     * @param nameAndType the name and type of the method\n+     * @param isInterface whether the class holding the method is an interface\n+     *\/\n+    static InvokeInstruction of(Opcode op,\n+                                ClassEntry owner,\n+                                NameAndTypeEntry nameAndType,\n+                                boolean isInterface) {\n+        return of(op, isInterface\n+                      ? TemporaryConstantPool.INSTANCE.interfaceMethodRefEntry(owner, nameAndType)\n+                      : TemporaryConstantPool.INSTANCE.methodRefEntry(owner, nameAndType));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/InvokeInstruction.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.PseudoInstruction;\n+import jdk.internal.classfile.impl.LabelImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A pseudo-instruction which indicates that the specified label corresponds to\n+ * the current position in the {@code Code} attribute.  Delivered as a {@link\n+ * CodeElement} during traversal of the elements of a {@link CodeModel}.\n+ *\n+ * @see PseudoInstruction\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LabelTarget extends PseudoInstruction\n+        permits LabelImpl {\n+\n+    \/**\n+     * {@return the label corresponding to this target}\n+     *\/\n+    Label label();\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LabelTarget.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.PseudoInstruction;\n+import java.lang.classfile.attribute.LineNumberTableAttribute;\n+import jdk.internal.classfile.impl.LineNumberImpl;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A pseudo-instruction which models a single entry in the\n+ * {@link LineNumberTableAttribute}.  Delivered as a {@link CodeElement}\n+ * during traversal of the elements of a {@link CodeModel}, according to\n+ * the setting of the {@link ClassFile.LineNumbersOption} option.\n+ *\n+ * @see PseudoInstruction\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LineNumber extends PseudoInstruction\n+        permits LineNumberImpl {\n+\n+    \/**\n+     * {@return the line number}\n+     *\/\n+    int line();\n+\n+    \/**\n+     * {@return a line number pseudo-instruction}\n+     *\n+     * @param line the line number\n+     *\/\n+    static LineNumber of(int line) {\n+        return LineNumberImpl.of(line);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LineNumber.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.BytecodeHelpers;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a local variable load instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#LOAD}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LoadInstruction extends Instruction\n+        permits AbstractInstruction.BoundLoadInstruction,\n+                AbstractInstruction.UnboundLoadInstruction {\n+\n+    \/**\n+     * {@return the local variable slot to load from}\n+     *\/\n+    int slot();\n+\n+    \/**\n+     * {@return the type of the value to be loaded}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return a local variable load instruction}\n+     *\n+     * @param kind the type of the value to be loaded\n+     * @param slot the local variable slot to load from\n+     *\/\n+    static LoadInstruction of(TypeKind kind, int slot) {\n+        return of(BytecodeHelpers.loadOpcode(kind, slot), slot);\n+    }\n+\n+    \/**\n+     * {@return a local variable load instruction}\n+     *\n+     * @param op the opcode for the specific type of load instruction,\n+     *           which must be of kind {@link Opcode.Kind#LOAD}\n+     * @param slot the local variable slot to load from\n+     *\/\n+    static LoadInstruction of(Opcode op, int slot) {\n+        Util.checkKind(op, Opcode.Kind.LOAD);\n+        return new AbstractInstruction.UnboundLoadInstruction(op, slot);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LoadInstruction.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.constant.ClassDesc;\n+\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.PseudoInstruction;\n+import java.lang.classfile.attribute.LocalVariableTableAttribute;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n+import jdk.internal.classfile.impl.BoundLocalVariable;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A pseudo-instruction which models a single entry in the\n+ * {@link LocalVariableTableAttribute}.  Delivered as a {@link CodeElement}\n+ * during traversal of the elements of a {@link CodeModel}, according to\n+ * the setting of the {@link ClassFile.DebugElementsOption} option.\n+ *\n+ * @see PseudoInstruction\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LocalVariable extends PseudoInstruction\n+        permits AbstractPseudoInstruction.UnboundLocalVariable, BoundLocalVariable {\n+    \/**\n+     * {@return the local variable slot}\n+     *\/\n+    int slot();\n+\n+    \/**\n+     * {@return the local variable name}\n+     *\/\n+    Utf8Entry name();\n+\n+    \/**\n+     * {@return the local variable field descriptor}\n+     *\/\n+    Utf8Entry type();\n+\n+    \/**\n+     * {@return the local variable type, as a symbolic descriptor}\n+     *\/\n+    default ClassDesc typeSymbol() {\n+        return ClassDesc.ofDescriptor(type().stringValue());\n+    }\n+\n+    \/**\n+     * {@return the start range of the local variable scope}\n+     *\/\n+    Label startScope();\n+\n+    \/**\n+     * {@return the end range of the local variable scope}\n+     *\/\n+    Label endScope();\n+\n+    \/**\n+     * Writes the local variable to the specified writer\n+     *\n+     * @param buf the writer\n+     * @return true if the variable has been written\n+     *\/\n+    boolean writeTo(BufWriter buf);\n+\n+    \/**\n+     * {@return a local variable pseudo-instruction}\n+     *\n+     * @param slot the local variable slot\n+     * @param nameEntry the local variable name\n+     * @param descriptorEntry the local variable descriptor\n+     * @param startScope the start range of the local variable scope\n+     * @param endScope the end range of the local variable scope\n+     *\/\n+    static LocalVariable of(int slot, Utf8Entry nameEntry, Utf8Entry descriptorEntry, Label startScope, Label endScope) {\n+        return new AbstractPseudoInstruction.UnboundLocalVariable(slot, nameEntry, descriptorEntry,\n+                                                                  startScope, endScope);\n+    }\n+\n+    \/**\n+     * {@return a local variable pseudo-instruction}\n+     *\n+     * @param slot the local variable slot\n+     * @param name the local variable name\n+     * @param descriptor the local variable descriptor\n+     * @param startScope the start range of the local variable scope\n+     * @param endScope the end range of the local variable scope\n+     *\/\n+    static LocalVariable of(int slot, String name, ClassDesc descriptor, Label startScope, Label endScope) {\n+        return of(slot,\n+                  TemporaryConstantPool.INSTANCE.utf8Entry(name),\n+                  TemporaryConstantPool.INSTANCE.utf8Entry(descriptor.descriptorString()),\n+                  startScope, endScope);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariable.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.PseudoInstruction;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.attribute.LocalVariableTypeTableAttribute;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n+import jdk.internal.classfile.impl.BoundLocalVariableType;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A pseudo-instruction which models a single entry in the {@link\n+ * LocalVariableTypeTableAttribute}.  Delivered as a {@link CodeElement} during\n+ * traversal of the elements of a {@link CodeModel}, according to the setting of\n+ * the {@link ClassFile.DebugElementsOption} option.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LocalVariableType extends PseudoInstruction\n+        permits AbstractPseudoInstruction.UnboundLocalVariableType, BoundLocalVariableType {\n+    \/**\n+     * {@return the local variable slot}\n+     *\/\n+    int slot();\n+\n+    \/**\n+     * {@return the local variable name}\n+     *\/\n+    Utf8Entry name();\n+\n+    \/**\n+     * {@return the local variable signature}\n+     *\/\n+    Utf8Entry signature();\n+\n+    \/**\n+     * {@return the local variable signature}\n+     *\/\n+    default Signature signatureSymbol() {\n+        return Signature.parseFrom(signature().stringValue());\n+    }\n+\n+    \/**\n+     * {@return the start range of the local variable scope}\n+     *\/\n+    Label startScope();\n+\n+    \/**\n+     * {@return the end range of the local variable scope}\n+     *\/\n+    Label endScope();\n+\n+    \/**\n+     * Writes the local variable to the specified writer\n+     *\n+     * @param buf the writer\n+     * @return true if the variable has been written\n+     *\/\n+    boolean writeTo(BufWriter buf);\n+\n+    \/**\n+     * {@return a local variable type pseudo-instruction}\n+     *\n+     * @param slot the local variable slot\n+     * @param nameEntry the local variable name\n+     * @param signatureEntry the local variable signature\n+     * @param startScope the start range of the local variable scope\n+     * @param endScope the end range of the local variable scope\n+     *\/\n+    static LocalVariableType of(int slot, Utf8Entry nameEntry, Utf8Entry signatureEntry, Label startScope, Label endScope) {\n+        return new AbstractPseudoInstruction.UnboundLocalVariableType(slot, nameEntry, signatureEntry,\n+                                                                      startScope, endScope);\n+    }\n+\n+    \/**\n+     * {@return a local variable type pseudo-instruction}\n+     *\n+     * @param slot the local variable slot\n+     * @param name the local variable name\n+     * @param signature the local variable signature\n+     * @param startScope the start range of the local variable scope\n+     * @param endScope the end range of the local variable scope\n+     *\/\n+    static LocalVariableType of(int slot, String name, Signature signature, Label startScope, Label endScope) {\n+        return of(slot,\n+                  TemporaryConstantPool.INSTANCE.utf8Entry(name),\n+                  TemporaryConstantPool.INSTANCE.utf8Entry(signature.signatureString()),\n+                  startScope, endScope);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariableType.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Label;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a {@code lookupswitch} instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface LookupSwitchInstruction extends Instruction\n+        permits AbstractInstruction.BoundLookupSwitchInstruction,\n+                AbstractInstruction.UnboundLookupSwitchInstruction {\n+    \/**\n+     * {@return the target of the default case}\n+     *\/\n+    Label defaultTarget();\n+\n+    \/**\n+     * {@return the cases of the switch}\n+     *\/\n+    List<SwitchCase> cases();\n+\n+    \/**\n+     * {@return a lookup switch instruction}\n+     *\n+     * @param defaultTarget the default target of the switch\n+     * @param cases the cases of the switch\n+     *\/\n+    static LookupSwitchInstruction of(Label defaultTarget, List<SwitchCase> cases) {\n+        return new AbstractInstruction.UnboundLookupSwitchInstruction(defaultTarget, cases);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LookupSwitchInstruction.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a {@code monitorenter} or {@code monitorexit} instruction in the\n+ * {@code code} array of a {@code Code} attribute.  Delivered as a {@link\n+ * CodeElement} when traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface MonitorInstruction extends Instruction\n+        permits AbstractInstruction.UnboundMonitorInstruction {\n+\n+    \/**\n+     * {@return a monitor instruction}\n+     *\n+     * @param op the opcode for the specific type of monitor instruction,\n+     *           which must be of kind {@link Opcode.Kind#MONITOR}\n+     *\/\n+    static MonitorInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.MONITOR);\n+        return new AbstractInstruction.UnboundMonitorInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/MonitorInstruction.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.Instruction;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a {@code multianewarray} invocation instruction in the {@code code}\n+ * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface NewMultiArrayInstruction extends Instruction\n+        permits AbstractInstruction.BoundNewMultidimensionalArrayInstruction,\n+                AbstractInstruction.UnboundNewMultidimensionalArrayInstruction {\n+\n+    \/**\n+     * {@return the type of the array, as a symbolic descriptor}\n+     *\/\n+    ClassEntry arrayType();\n+\n+    \/**\n+     * {@return the number of dimensions of the array}\n+     *\/\n+    int dimensions();\n+\n+    \/**\n+     * {@return a new multi-dimensional array instruction}\n+     *\n+     * @param arrayTypeEntry the type of the array\n+     * @param dimensions the number of dimensions of the array\n+     *\/\n+    static NewMultiArrayInstruction of(ClassEntry arrayTypeEntry,\n+                                       int dimensions) {\n+        return new AbstractInstruction.UnboundNewMultidimensionalArrayInstruction(arrayTypeEntry, dimensions);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewMultiArrayInstruction.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.Instruction;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a {@code new} instruction in the {@code code} array of a {@code Code}\n+ * attribute.  Delivered as a {@link CodeElement} when traversing the elements\n+ * of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface NewObjectInstruction extends Instruction\n+        permits AbstractInstruction.BoundNewObjectInstruction, AbstractInstruction.UnboundNewObjectInstruction {\n+\n+    \/**\n+     * {@return the type of object to create}\n+     *\/\n+    ClassEntry className();\n+\n+    \/**\n+     * {@return a new object instruction}\n+     *\n+     * @param className the type of object to create\n+     *\/\n+    static NewObjectInstruction of(ClassEntry className) {\n+        return new AbstractInstruction.UnboundNewObjectInstruction(className);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewObjectInstruction.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a {@code newarray} invocation instruction in the {@code code}\n+ * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface NewPrimitiveArrayInstruction extends Instruction\n+        permits AbstractInstruction.BoundNewPrimitiveArrayInstruction,\n+                AbstractInstruction.UnboundNewPrimitiveArrayInstruction {\n+    \/**\n+     * {@return the component type of the array}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return a new primitive array instruction}\n+     *\n+     * @param typeKind the component type of the array\n+     *\/\n+    static NewPrimitiveArrayInstruction of(TypeKind typeKind) {\n+        return new AbstractInstruction.UnboundNewPrimitiveArrayInstruction(typeKind);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewPrimitiveArrayInstruction.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.Instruction;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a {@code anewarray} invocation instruction in the {@code code}\n+ * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface NewReferenceArrayInstruction extends Instruction\n+        permits AbstractInstruction.BoundNewReferenceArrayInstruction, AbstractInstruction.UnboundNewReferenceArrayInstruction {\n+    \/**\n+     * {@return the component type of the array}\n+     *\/\n+    ClassEntry componentType();\n+\n+    \/**\n+     * {@return a new reference array instruction}\n+     *\n+     * @param componentType the component type of the array\n+     *\/\n+    static NewReferenceArrayInstruction of(ClassEntry componentType) {\n+        return new AbstractInstruction.UnboundNewReferenceArrayInstruction(componentType);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NewReferenceArrayInstruction.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a {@code nop} invocation instruction in the {@code code}\n+ * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface NopInstruction extends Instruction\n+        permits AbstractInstruction.UnboundNopInstruction {\n+    \/**\n+     * {@return a no-op instruction}\n+     *\/\n+    static NopInstruction of() {\n+        return new AbstractInstruction.UnboundNopInstruction();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/NopInstruction.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an arithmetic operator instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#OPERATOR}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface OperatorInstruction extends Instruction\n+        permits AbstractInstruction.UnboundOperatorInstruction {\n+    \/**\n+     * {@return the operand type of the instruction}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return an operator instruction}\n+     *\n+     * @param op the opcode for the specific type of array load instruction,\n+     *           which must be of kind {@link Opcode.Kind#OPERATOR}\n+     *\/\n+    static OperatorInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.OPERATOR);\n+        return new AbstractInstruction.UnboundOperatorInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/OperatorInstruction.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.BytecodeHelpers;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a return-from-method instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#RETURN}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ReturnInstruction extends Instruction\n+        permits AbstractInstruction.UnboundReturnInstruction {\n+\n+    \/**\n+     * {@return the type of the return instruction}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return a return instruction}\n+     *\n+     * @param typeKind the type of the return instruction\n+     *\/\n+    static ReturnInstruction of(TypeKind typeKind) {\n+        return of(BytecodeHelpers.returnOpcode(typeKind));\n+    }\n+\n+    \/**\n+     * {@return a return instruction}\n+     *\n+     * @param op the opcode for the specific type of return instruction,\n+     *           which must be of kind {@link Opcode.Kind#RETURN}\n+     *\/\n+    static ReturnInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.RETURN);\n+        return new AbstractInstruction.UnboundReturnInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ReturnInstruction.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a stack manipulation instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#STACK}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface StackInstruction extends Instruction\n+        permits AbstractInstruction.UnboundStackInstruction {\n+\n+    \/**\n+     * {@return a stack manipulation instruction}\n+     *\n+     * @param op the opcode for the specific type of stack instruction,\n+     *           which must be of kind {@link Opcode.Kind#STACK}\n+     *\/\n+    static StackInstruction of(Opcode op) {\n+        Util.checkKind(op, Opcode.Kind.STACK);\n+        return new AbstractInstruction.UnboundStackInstruction(op);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StackInstruction.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.BytecodeHelpers;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a local variable store instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n+ * {@link Opcode.Kind#STORE}.  Delivered as a {@link CodeElement} when\n+ * traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface StoreInstruction extends Instruction\n+        permits AbstractInstruction.BoundStoreInstruction, AbstractInstruction.UnboundStoreInstruction {\n+\n+    \/**\n+     * {@return the local variable slot to store to}\n+     *\/\n+    int slot();\n+\n+    \/**\n+     * {@return the type of the value to be stored}\n+     *\/\n+    TypeKind typeKind();\n+\n+    \/**\n+     * {@return a local variable store instruction}\n+     *\n+     * @param kind the type of the value to be stored\n+     * @param slot the local variable slot to store to\n+     *\/\n+    static StoreInstruction of(TypeKind kind, int slot) {\n+        return of(BytecodeHelpers.storeOpcode(kind, slot), slot);\n+    }\n+\n+    \/**\n+     * {@return a local variable store instruction}\n+     *\n+     * @param op the opcode for the specific type of store instruction,\n+     *           which must be of kind {@link Opcode.Kind#STORE}\n+     * @param slot the local variable slot to store to\n+     *\/\n+    static StoreInstruction of(Opcode op, int slot) {\n+        Util.checkKind(op, Opcode.Kind.STORE);\n+        return new AbstractInstruction.UnboundStoreInstruction(op, slot);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/StoreInstruction.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.instruction;\n+package java.lang.classfile.instruction;\n@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.Label;\n+import java.lang.classfile.Label;\n@@ -29,0 +29,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -36,0 +37,2 @@\n+ *\n+ * @since 22\n@@ -37,0 +40,1 @@\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/SwitchCase.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/SwitchCase.java","status":"renamed"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.util.List;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Label;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models a {@code tableswitch} instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface TableSwitchInstruction extends Instruction\n+        permits AbstractInstruction.BoundTableSwitchInstruction, AbstractInstruction.UnboundTableSwitchInstruction {\n+    \/**\n+     * {@return the low value of the switch target range, inclusive}\n+     *\/\n+    int lowValue();\n+\n+    \/**\n+     * {@return the high value of the switch target range, inclusive}\n+     *\/\n+    int highValue();\n+\n+    \/**\n+     * {@return the default target of the switch}\n+     *\/\n+    Label defaultTarget();\n+\n+    \/**\n+     * {@return the cases of the switch}\n+     *\/\n+    List<SwitchCase> cases();\n+\n+    \/**\n+     * {@return a table switch instruction}\n+     *\n+     * @param lowValue the low value of the switch target range, inclusive\n+     * @param highValue the high value of the switch target range, inclusive\n+     * @param defaultTarget the default target of the switch\n+     * @param cases the cases of the switch\n+     *\/\n+    static TableSwitchInstruction of(int lowValue, int highValue, Label defaultTarget, List<SwitchCase> cases) {\n+        return new AbstractInstruction.UnboundTableSwitchInstruction(lowValue, highValue, defaultTarget, cases);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/TableSwitchInstruction.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an {@code athrow} instruction in the {@code code} array of a\n+ * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n+ * the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface ThrowInstruction extends Instruction\n+        permits AbstractInstruction.UnboundThrowInstruction {\n+\n+    \/**\n+     * {@return a throw instruction}\n+     *\/\n+    static ThrowInstruction of() {\n+        return new AbstractInstruction.UnboundThrowInstruction();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/ThrowInstruction.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.instruction;\n+\n+import java.lang.constant.ClassDesc;\n+\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Opcode;\n+import jdk.internal.classfile.impl.AbstractInstruction;\n+import jdk.internal.classfile.impl.TemporaryConstantPool;\n+import jdk.internal.classfile.impl.Util;\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Models an {@code instanceof} or {@code checkcast} instruction in the {@code\n+ * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n+ * when traversing the elements of a {@link CodeModel}.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+public sealed interface TypeCheckInstruction extends Instruction\n+        permits AbstractInstruction.BoundTypeCheckInstruction,\n+                AbstractInstruction.UnboundTypeCheckInstruction {\n+\n+    \/**\n+     * {@return the type against which the instruction checks or casts}\n+     *\/\n+    ClassEntry type();\n+\n+    \/**\n+     * {@return a type check instruction}\n+     *\n+     * @param op the opcode for the specific type of type check instruction,\n+     *           which must be of kind {@link Opcode.Kind#TYPE_CHECK}\n+     * @param type the type against which to check or cast\n+     *\/\n+    static TypeCheckInstruction of(Opcode op, ClassEntry type) {\n+        Util.checkKind(op, Opcode.Kind.TYPE_CHECK);\n+        return new AbstractInstruction.UnboundTypeCheckInstruction(op, type);\n+    }\n+\n+    \/**\n+     * {@return a type check instruction}\n+     *\n+     * @param op the opcode for the specific type of type check instruction,\n+     *           which must be of kind {@link Opcode.Kind#TYPE_CHECK}\n+     * @param type the type against which to check or cast\n+     *\/\n+    static TypeCheckInstruction of(Opcode op, ClassDesc type) {\n+        return of(op, TemporaryConstantPool.INSTANCE.classEntry(type));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/TypeCheckInstruction.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <h2>Provides interfaces describing code instructions for the {@link java.lang.classfile} library.<\/h2>\n+ *\n+ * The {@code java.lang.classfile.attribute} package contains interfaces describing code instructions.\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+package java.lang.classfile.instruction;\n+\n+import jdk.internal.javac.PreviewFeature;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/package-info.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,542 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * <h2>Provides classfile parsing, generation, and transformation library.<\/h2>\n+ * The {@code java.lang.classfile} package contains classes for reading, writing, and\n+ * modifying Java class files, as specified in Chapter {@jvms 4} of the <cite>Java\n+ * Java Virtual Machine Specification<\/cite>.\n+ *\n+ * <h2>Reading classfiles<\/h2>\n+ * The main class for reading classfiles is {@link java.lang.classfile.ClassModel}; we\n+ * convert bytes into a {@link java.lang.classfile.ClassModel} with {@link\n+ * java.lang.classfile.ClassFile#parse(byte[])}:\n+ * <p>\n+ * {@snippet lang=java :\n+ * ClassModel cm = ClassFile.of().parse(bytes);\n+ * }\n+ * <p>\n+ * There are several additional overloads of {@code parse} that let you specify\n+ * various processing options.\n+ * <p>\n+ * A {@link java.lang.classfile.ClassModel} is an immutable description of a class\n+ * file.  It provides accessor methods to get at class metadata (e.g., {@link\n+ * java.lang.classfile.ClassModel#thisClass()}, {@link java.lang.classfile.ClassModel#flags()}),\n+ * as well as subordinate classfile entities ({@link java.lang.classfile.ClassModel#fields()},\n+ * {@link java.lang.classfile.ClassModel#attributes()}). A {@link\n+ * java.lang.classfile.ClassModel} is inflated lazily; most parts of the classfile are\n+ * not parsed until they are actually needed.\n+ * <p>\n+ * We can enumerate the names of the fields and methods in a class by:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"enumerateFieldsMethods1\"}\n+ * <p>\n+ * When we enumerate the methods, we get a {@link java.lang.classfile.MethodModel} for each method; like a\n+ * {@code ClassModel}, it gives us access to method metadata and\n+ * the ability to descend into subordinate entities such as the bytecodes of the\n+ * method body. In this way, a {@code ClassModel} is the root of a\n+ * tree, with children for fields, methods, and attributes, and {@code MethodModel} in\n+ * turn has its own children (attributes, {@code CodeModel}, etc.)\n+ * <p>\n+ * Methods like {@link java.lang.classfile.ClassModel#methods} allows us to traverse the class structure\n+ * explicitly, going straight to the parts we are interested in.  This is useful\n+ * for certain kinds of analysis, but if we wanted to process the whole\n+ * classfile, we may want something more organized.  A {@link\n+ * java.lang.classfile.ClassModel} also provides us with a view of the classfile as a\n+ * series of class <em>elements<\/em>, which may include methods, fields, attributes,\n+ * and more, and which can be distinguished with pattern matching.  We could\n+ * rewrite the above example as:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"enumerateFieldsMethods2\"}\n+ * <p>\n+ * The models returned as elements from traversing {@code ClassModel} can in\n+ * turn be sources of elements.  If we wanted to\n+ * traverse a classfile and enumerate all the classes for which we access fields\n+ * and methods, we can pick out the class elements that describe methods, then\n+ * in turn pick out the method elements that describe the code attribute, and\n+ * finally pick out the code elements that describe field access and invocation\n+ * instructions:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"gatherDependencies1\"}\n+ * <p>\n+ * This same query could alternately be processed as a stream pipeline over\n+ * class elements:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"gatherDependencies2\"}\n+ *\n+ * <h3>Models and elements<\/h3>\n+ * The view of classfiles presented by this API is framed in terms of\n+ * <em>models<\/em> and <em>elements<\/em>.  Models represent complex structures,\n+ * such as classes, methods, fields, record elements, or the code body of a\n+ * method.  Models can be explored either via random-access navigation (such as\n+ * the {@link java.lang.classfile.ClassModel#methods()} accessor) or as a linear\n+ * sequence of <em>elements<\/em>. (Elements can in turn also be models; a {@link\n+ * java.lang.classfile.FieldModel} is also an element of a class.) For each model type\n+ * (e.g., {@link java.lang.classfile.MethodModel}), there is a corresponding element\n+ * type ({@link java.lang.classfile.MethodElement}).  Models and elements are immutable\n+ * and are inflated lazily so creating a model does not necessarily require\n+ * processing its entire content.\n+ *\n+ * <h3>The constant pool<\/h3>\n+ * Much of the interesting content in a classfile lives in the <em>constant\n+ * pool<\/em>. {@link java.lang.classfile.ClassModel} provides a lazily-inflated,\n+ * read-only view of the constant pool via {@link java.lang.classfile.ClassModel#constantPool()}.\n+ * Descriptions of classfile content is often exposed in the form of various\n+ * subtypes of {@link java.lang.classfile.constantpool.PoolEntry}, such as {@link\n+ * java.lang.classfile.constantpool.ClassEntry} or {@link java.lang.classfile.constantpool.Utf8Entry}.\n+ * <p>\n+ * Constant pool entries are also exposed through models and elements; in the\n+ * above traversal example, the {@link java.lang.classfile.instruction.InvokeInstruction}\n+ * element exposed a method for {@code owner} that corresponds to a {@code\n+ * Constant_Class_info} entry in the constant pool.\n+ *\n+ * <h3>Attributes<\/h3>\n+ * Much of the contents of a classfile is stored in attributes; attributes are\n+ * found on classes, methods, fields, record components, and on the {@code Code}\n+ * attribute.  Most attributes are surfaced as elements; for example, {@link\n+ * java.lang.classfile.attribute.SignatureAttribute} is a {@link\n+ * java.lang.classfile.ClassElement}, {@link java.lang.classfile.MethodElement}, and {@link\n+ * java.lang.classfile.FieldElement} since it can appear in all of those places, and is\n+ * included when iterating the elements of the corresponding model.\n+ * <p>\n+ * Some attributes are not surfaced as elements; these are attributes that are\n+ * tightly coupled to -- and logically part of -- other parts of the class file.\n+ * These include the {@code BootstrapMethods}, {@code LineNumberTable}, {@code\n+ * StackMapTable}, {@code LocalVariableTable}, and {@code\n+ * LocalVariableTypeTable} attributes.  These are processed by the library and\n+ * treated as part of the structure they are coupled to (the entries of the\n+ * {@code BootstrapMethods} attribute are treated as part of the constant pool;\n+ * line numbers and local variable metadata are modeled as elements of {@link\n+ * java.lang.classfile.CodeModel}.)\n+ * <p>\n+ * The {@code Code} attribute, in addition to being modeled as a {@link\n+ * java.lang.classfile.MethodElement}, is also a model in its own right ({@link\n+ * java.lang.classfile.CodeModel}) due to its complex structure.\n+ * <p>\n+ * Each standard attribute has an interface (in {@code java.lang.classfile.attribute})\n+ * which exposes the contents of the attribute and provides factories to\n+ * construct the attribute.  For example, the {@code Signature} attribute is\n+ * defined by the {@link java.lang.classfile.attribute.SignatureAttribute} class, and\n+ * provides accessors for {@link java.lang.classfile.attribute.SignatureAttribute#signature()}\n+ * as well as factories taking {@link java.lang.classfile.constantpool.Utf8Entry} or\n+ * {@link java.lang.String}.\n+ *\n+ * <h3>Custom attributes<\/h3>\n+ * Attributes are converted between their classfile form and their corresponding\n+ * object form via an {@link java.lang.classfile.AttributeMapper}.  An {@code\n+ * AttributeMapper} provides the\n+ * {@link java.lang.classfile.AttributeMapper#readAttribute(AttributedElement,\n+ * ClassReader, int)} method for mapping from the classfile format\n+ * to an attribute instance, and the\n+ * {@link java.lang.classfile.AttributeMapper#writeAttribute(java.lang.classfile.BufWriter,\n+ * java.lang.Object)} method for mapping back to the classfile format.  It also\n+ * contains metadata including the attribute name, the set of classfile entities\n+ * where the attribute is applicable, and whether multiple attributes of the\n+ * same kind are allowed on a single entity.\n+ * <p>\n+ * There are built-in attribute mappers (in {@link java.lang.classfile.Attributes}) for\n+ * each of the attribute types defined in section {@jvms 4.7} of <cite>The Java Virtual\n+ * Machine Specification<\/cite>, as well as several common nonstandard attributes used by the\n+ * JDK such as {@code CharacterRangeTable}.\n+ * <p>\n+ * Unrecognized attributes are delivered as elements of type {@link\n+ * java.lang.classfile.attribute.UnknownAttribute}, which provide access only to the\n+ * {@code byte[]} contents of the attribute.\n+ * <p>\n+ * For nonstandard attributes, user-provided attribute mappers can be specified\n+ * through the use of the {@link\n+ * java.lang.classfile.ClassFile.AttributeMapperOption#of(java.util.function.Function)}}\n+ * classfile option.  Implementations of custom attributes should extend {@link\n+ * java.lang.classfile.CustomAttribute}.\n+ *\n+ * <h3>Options<\/h3>\n+ * <p>\n+ * {@link java.lang.classfile.ClassFile#of(java.lang.classfile.ClassFile.Option[])}\n+ * accepts a list of options.  {@link java.lang.classfile.ClassFile.Option} is a base interface\n+ * for some statically enumerated options, as well as factories for more complex options,\n+ * including:\n+ * <ul>\n+ *   <li>{@link java.lang.classfile.ClassFile.StackMapsOption}\n+ * -- generate stackmaps (default is {@code STACK_MAPS_WHEN_REQUIRED})<\/li>\n+ *   <li>{@link java.lang.classfile.ClassFile.DebugElementsOption}\n+ * -- processing of debug information, such as local variable metadata (default is {@code PASS_DEBUG}) <\/li>\n+ *   <li>{@link java.lang.classfile.ClassFile.LineNumbersOption}\n+ * -- processing of line numbers (default is {@code PASS_LINE_NUMBERS}) <\/li>\n+ *   <li>{@link java.lang.classfile.ClassFile.AttributesProcessingOption}\n+ * -- unrecognized or problematic original attributes (default is {@code PASS_ALL_ATTRIBUTES})<\/li>\n+ *   <li>{@link java.lang.classfile.ClassFile.ConstantPoolSharingOption}}\n+ * -- share constant pool when transforming (default is {@code SHARED_POOL})<\/li>\n+ *   <li>{@link java.lang.classfile.ClassFile.ClassHierarchyResolverOption#of(java.lang.classfile.ClassHierarchyResolver)}\n+ * -- specify a custom class hierarchy resolver used by stack map generation<\/li>\n+ *   <li>{@link java.lang.classfile.ClassFile.AttributeMapperOption#of(java.util.function.Function)}\n+ * -- specify format of custom attributes<\/li>\n+ * <\/ul>\n+ * <p>\n+ * Most options allow you to request that certain parts of the classfile be\n+ * skipped during traversal, such as debug information or unrecognized\n+ * attributes.  Some options allow you to suppress generation of portions of the\n+ * classfile, such as stack maps.  Many of these options are to access\n+ * performance tradeoffs; processing debug information and line numbers has a\n+ * cost (both in writing and reading.)  If you don't need this information, you\n+ * can suppress it with options to gain some performance.\n+ *\n+ * <h2>Writing classfiles<\/h2>\n+ * ClassFile generation is accomplished through <em>builders<\/em>.  For each\n+ * entity type that has a model, there is also a corresponding builder type;\n+ * classes are built through {@link java.lang.classfile.ClassBuilder}, methods through\n+ * {@link java.lang.classfile.MethodBuilder}, etc.\n+ * <p>\n+ * Rather than creating builders directly, builders are provided as an argument\n+ * to a user-provided lambda.  To generate the familiar \"hello world\" program,\n+ * we ask for a class builder, and use that class builder to create method\n+ * builders for the constructor and {@code main} method, and in turn use the\n+ * method builders to create a {@code Code} attribute and use the code builders\n+ * to generate the instructions:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld1\"}\n+ * <p>\n+ * The convenience methods {@code ClassBuilder.buildMethodBody} allows us to ask\n+ * {@link ClassBuilder} to create code builders to build method bodies directly,\n+ * skipping the method builder custom lambda:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld2\"}\n+ * <p>\n+ * Builders often support multiple ways of expressing the same entity at\n+ * different levels of abstraction.  For example, the {@code invokevirtual}\n+ * instruction invoking {@code println} could have been generated with {@link\n+ * java.lang.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n+ * java.lang.String, java.lang.constant.MethodTypeDesc) CodeBuilder.invokevirtual}, {@link\n+ * java.lang.classfile.CodeBuilder#invokeInstruction(java.lang.classfile.Opcode,\n+ * java.lang.constant.ClassDesc, java.lang.String, java.lang.constant.MethodTypeDesc,\n+ * boolean) CodeBuilder.invokeInstruction}, or {@link\n+ * java.lang.classfile.CodeBuilder#with(java.lang.classfile.ClassFileElement)\n+ * CodeBuilder.with}.\n+ * <p>\n+ * The convenience method {@code CodeBuilder.invokevirtual} behaves as if it calls\n+ * the convenience method {@code CodeBuilder.invokeInstruction}, which in turn behaves\n+ * as if it calls method {@code CodeBuilder.with}. This composing of method calls on the\n+ * builder enables the composing of transforms (as described later).\n+ *\n+ * <h3>Symbolic information<\/h3>\n+ * To describe symbolic information for classes and types, the API uses the\n+ * nominal descriptor abstractions from {@code java.lang.constant} such as {@link\n+ * java.lang.constant.ClassDesc} and {@link java.lang.constant.MethodTypeDesc},\n+ * which is less error-prone than using raw strings.\n+ * <p>\n+ * If a constant pool entry has a nominal representation then it provides a\n+ * method returning the corresponding nominal descriptor type e.g.\n+ * method {@link java.lang.classfile.constantpool.ClassEntry#asSymbol} returns\n+ * {@code ClassDesc}.\n+ * <p>\n+ * Where appropriate builders provide two methods for building an element with\n+ * symbolic information, one accepting nominal descriptors, and the other\n+ * accepting constant pool entries.\n+ *\n+ * <h3>Consistency checks, syntax checks and verification<\/h3>\n+ * No consistency checks are performed while building or transforming classfiles\n+ * (except for null arguments checks). All builders and classfile elements factory\n+ * methods accepts the provided information without implicit validation.\n+ * However, fatal inconsistencies (like for example invalid code sequence or\n+ * unresolved labels) affects internal tools and may cause exceptions later in\n+ * the classfile building process.\n+ * <p>\n+ * Using nominal descriptors assures the right serial form is applied by the\n+ * ClassFile API library based on the actual context. Also these nominal\n+ * descriptors are validated during their construction, so it is not possible to\n+ * create them with invalid content by mistake. Following example pass class\n+ * name to the {@link java.lang.constant.ClassDesc#of} method for validation\n+ * and the library performs automatic conversion to the right internal form of\n+ * the class name when serialized in the constant pool as a class entry.\n+ * {@snippet lang=java :\n+ * var validClassEntry = constantPoolBuilder.classEntry(ClassDesc.of(\"mypackage.MyClass\"));\n+ * }\n+ * <p>\n+ * On the other hand it is possible to use builders methods and factories accepting\n+ * constant pool entries directly. Constant pool entries can be constructed also\n+ * directly from raw values, with no additional conversions or validations.\n+ * Following example uses intentionally wrong class name form and it is applied\n+ * without any validation or conversion.\n+ * {@snippet lang=java :\n+ * var invalidClassEntry = constantPoolBuilder.classEntry(\n+ *                             constantPoolBuilder.utf8Entry(\"mypackage.MyClass\"));\n+ * }\n+ * <p>\n+ * More complex verification of a classfile can be achieved by explicit invocation\n+ * of {@link java.lang.classfile.ClassModel#verify}.\n+ *\n+ * <h2>Transforming classfiles<\/h2>\n+ * ClassFile Processing APIs are most frequently used to combine reading and\n+ * writing into transformation, where a classfile is read, localized changes are\n+ * made, but much of the classfile is passed through unchanged.  For each kind\n+ * of builder, {@code XxxBuilder} has a method {@code with(XxxElement)} so that\n+ * elements that we wish to pass through unchanged can be handed directly back\n+ * to the builder.\n+ * <p>\n+ * If we wanted to strip out methods whose names starts with \"debug\", we could\n+ * get an existing {@link java.lang.classfile.ClassModel}, build a new classfile that\n+ * provides a {@link java.lang.classfile.ClassBuilder}, iterate the elements of the\n+ * original {@link java.lang.classfile.ClassModel}, and pass through all of them to\n+ * the builder except the methods we want to drop:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods1\"}\n+ * <p>\n+ * This hands every class element, except for those corresponding to methods\n+ * whose names start with {@code debug}, back to the builder.  Transformations\n+ * can of course be more complicated, diving into method bodies and instructions\n+ * and transforming those as well, but the same structure is repeated at every\n+ * level, since every entity has corresponding model, builder, and element\n+ * abstractions.\n+ * <p>\n+ * Transformation can be viewed as a \"flatMap\" operation on the sequence of\n+ * elements; for every element, we could pass it through unchanged, drop it, or\n+ * replace it with one or more elements.  Because transformation is such a\n+ * common operation on classfiles, each model type has a corresponding {@code\n+ * XxxTransform} type (which describes a transform on a sequence of {@code\n+ * XxxElement}) and each builder type has {@code transformYyy} methods for transforming\n+ * its child models.  A transform is simply a functional interface that takes a\n+ * builder and an element, and an implementation \"flatMap\"s elements\n+ * into the builder.  We could express the above as:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods2\"}\n+ * <p>\n+ * {@code ClassTransform.dropping} convenience method allow us to simplify the same\n+ * transformation construction and express the above as:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods3\"}\n+ *\n+ * <h3>Lifting transforms<\/h3>\n+ * While the example using transformations are only slightly shorter, the\n+ * advantage of expressing transformation in this way is that the transform\n+ * operations can be more easily combined.  Suppose we want to redirect\n+ * invocations of static methods on {@code Foo} to the corresponding method on\n+ * {@code Bar} instead.  We could express this as a transformation on {@link\n+ * java.lang.classfile.CodeElement}:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"fooToBarTransform\"}\n+ * <p>\n+ * We can then <em>lift<\/em> this transformation on code elements into a\n+ * transformation on method elements.  This intercepts method elements that\n+ * correspond to a {@code Code} attribute, dives into its code elements, and\n+ * applies the code transform to them, and passes other method elements through\n+ * unchanged:\n+ * {@snippet lang=java :\n+ * MethodTransform mt = MethodTransform.transformingCode(fooToBar);\n+ * }\n+ * <p>\n+ * and further lift the transform on method elements into one on class\n+ * elements:\n+ * {@snippet lang=java :\n+ * ClassTransform ct = ClassTransform.transformingMethods(mt);\n+ * }\n+ * <p>\n+ * or lift the code transform into the class transform directly:\n+ * {@snippet lang=java :\n+ * ClassTransform ct = ClassTransform.transformingMethodBodiess(fooToBar);\n+ * }\n+ * <p>\n+ * and then transform the classfile:\n+ * {@snippet lang=java :\n+ * var cc = ClassFile.of();\n+ * byte[] newBytes = cc.transform(cc.parse(bytes), ct);\n+ * }\n+ * <p>\n+ * This is much more concise (and less error-prone) than the equivalent\n+ * expressed by traversing the classfile structure directly:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"fooToBarUnrolled\"}\n+ *\n+ * <h3>Composing transforms<\/h3>\n+ * Transforms on the same type of element can be composed in sequence, where the\n+ * output of the first is fed to the input of the second.  Suppose we want to\n+ * instrument all method calls, where we print the name of a method before\n+ * calling it:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"instrumentCallsTransform\"}\n+ * <p>\n+ * Then we can compose {@code fooToBar} and {@code instrumentCalls} with {@link\n+ * java.lang.classfile.CodeTransform#andThen(java.lang.classfile.CodeTransform)}:\n+ * <p>\n+ * {@snippet lang=java :\n+ * var cc = ClassFile.of();\n+ * byte[] newBytes = cc.transform(cc.parse(bytes),\n+ *                                ClassTransform.transformingMethods(\n+ *                                    MethodTransform.transformingCode(\n+ *                                        fooToBar.andThen(instrumentCalls))));\n+ * }\n+ *\n+ * Transform {@code instrumentCalls} will receive all code elements produced by\n+ * transform {@code forToBar}, either those code elements from the original classfile\n+ * or replacements (replacing static invocations to {@code Foo} with those to {@code Bar}).\n+ *\n+ * <h3>Constant pool sharing<\/h3>\n+ * Transformation doesn't merely handle the logistics of reading, transforming\n+ * elements, and writing.  Most of the time when we are transforming a\n+ * classfile, we are making relatively minor changes.  To optimize such cases,\n+ * transformation seeds the new classfile with a copy of the constant pool from\n+ * the original classfile; this enables significant optimizations (methods and\n+ * attributes that are not transformed can be processed by bulk-copying their\n+ * bytes, rather than parsing them and regenerating their contents.)  If\n+ * constant pool sharing is not desired it can be suppressed\n+ * with the {@link java.lang.classfile.ClassFile.ConstantPoolSharingOption} option.\n+ * Such suppression may be beneficial when transformation removes many elements,\n+ * resulting in many unreferenced constant pool entries.\n+ *\n+ * <h3>Transformation handling of unknown classfile elements<\/h3>\n+ * Custom classfile transformations might be unaware of classfile elements\n+ * introduced by future JDK releases. To achieve deterministic stability,\n+ * classfile transforms interested in consuming all classfile elements should be\n+ * implemented strictly to throw exceptions if running on a newer JDK, if the\n+ * transformed class file is a newer version, or if a new and unknown classfile\n+ * element appears. As for example in the following strict compatibility-checking\n+ * transformation snippets:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"strictTransform1\"}\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"strictTransform2\"}\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"strictTransform3\"}\n+ * <p>\n+ * Conversely, classfile transforms that are only interested in consuming a portion\n+ * of classfile elements do not need to concern with new and unknown classfile\n+ * elements and may pass them through. Following example shows such future-proof\n+ * code transformation:\n+ * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"benevolentTransform\"}\n+ *\n+ * <h2>API conventions<\/h2>\n+ * <p>\n+ * The API is largely derived from a <a href=\"#data_model\"><em>data model<\/em><\/a>\n+ * for the classfile format, which defines each element kind (which includes models and\n+ * attributes) and its properties.  For each element kind, there is a\n+ * corresponding interface to describe that element, and factory methods to\n+ * create that element.  Some element kinds also have convenience methods on the\n+ * corresponding builder (e.g., {@link\n+ * java.lang.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n+ * java.lang.String, java.lang.constant.MethodTypeDesc)}).\n+ * <p>\n+ * Most symbolic information in elements is represented by constant pool entries\n+ * (for example, the owner of a field is represented by a {@link\n+ * java.lang.classfile.constantpool.ClassEntry}.) Factories and builders also\n+ * accept nominal descriptors from {@code java.lang.constant} (e.g., {@link\n+ * java.lang.constant.ClassDesc}.)\n+ *\n+ * <h2><a id=\"data_model\"><\/a>Data model<\/h2>\n+ * We define each kind of element by its name, an optional arity indicator (zero\n+ * or more, zero or one, exactly one), and a list of components.  The elements\n+ * of a class are fields, methods, and the attributes that can appear on\n+ * classes:\n+ * <p>\n+ * {@snippet lang=\"text\" :\n+ * ClassElement =\n+ *     FieldModel*(UtfEntry name, Utf8Entry descriptor)\n+ *     | MethodModel*(UtfEntry name, Utf8Entry descriptor)\n+ *     | ModuleAttribute?(int flags, ModuleEntry moduleName, UtfEntry moduleVersion,\n+ *                        List<ModuleRequireInfo> requires, List<ModuleOpenInfo> opens,\n+ *                        List<ModuleExportInfo> exports, List<ModuleProvidesInfo> provides,\n+ *                        List<ClassEntry> uses)\n+ *     | ModulePackagesAttribute?(List<PackageEntry> packages)\n+ *     | ModuleTargetAttribute?(Utf8Entry targetPlatform)\n+ *     | ModuleHashesAttribute?(Utf8Entry algorithm, List<HashInfo> hashes)\n+ *     | ModuleResolutionAttribute?(int resolutionFlags)\n+ *     | SourceFileAttribute?(Utf8Entry sourceFile)\n+ *     | SourceDebugExtensionsAttribute?(byte[] contents)\n+ *     | CompilationIDAttribute?(Utf8Entry compilationId)\n+ *     | SourceIDAttribute?(Utf8Entry sourceId)\n+ *     | NestHostAttribute?(ClassEntry nestHost)\n+ *     | NestMembersAttribute?(List<ClassEntry> nestMembers)\n+ *     | RecordAttribute?(List<RecordComponent> components)\n+ *     | EnclosingMethodAttribute?(ClassEntry className, NameAndTypeEntry method)\n+ *     | InnerClassesAttribute?(List<InnerClassInfo> classes)\n+ *     | PermittedSubclassesAttribute?(List<ClassEntry> permittedSubclasses)\n+ *     | DeclarationElement*\n+ * }\n+ *<p>\n+ * where {@code DeclarationElement} are the elements that are common to all declarations\n+ * (classes,  methods, fields) and so are factored out:\n+ *\n+ * {@snippet lang=\"text\" :\n+ * DeclarationElement =\n+ *     SignatureAttribute?(Utf8Entry signature)\n+ *     | SyntheticAttribute?()\n+ *     | DeprecatedAttribute?()\n+ *     | RuntimeInvisibleAnnotationsAttribute?(List<Annotation> annotations)\n+ *     | RuntimeVisibleAnnotationsAttribute?(List<Annotation> annotations)\n+ *     | CustomAttribute*\n+ *     | UnknownAttribute*\n+ * }\n+ *\n+ * Fields and methods are models with their own elements.  The elements of fields\n+ * and methods are fairly simple; most of the complexity of methods lives in the\n+ * {@link java.lang.classfile.CodeModel} (which models the {@code Code} attribute\n+ * along with the code-related attributes: stack map table, local variable table,\n+ * line number table, etc.)\n+ *\n+ * {@snippet lang=\"text\" :\n+ * FieldElement =\n+ *     DeclarationElement\n+ *     | ConstantValueAttribute?(ConstantValueEntry constant)\n+ *\n+ * MethodElement =\n+ *     DeclarationElement\n+ *     | CodeModel?()\n+ *     | AnnotationDefaultAttribute?(ElementValue defaultValue)\n+ *     | MethodParametersAttribute?(List<MethodParameterInfo> parameters)\n+ *     | ExceptionsAttribute?(List<ClassEntry> exceptions)\n+ * }\n+ *\n+ * {@link java.lang.classfile.CodeModel} is unique in that its elements are <em>ordered<\/em>.\n+ * Elements of {@code Code} include ordinary bytecodes, as well as a number of pseudo-instructions\n+ * representing branch targets, line number metadata, local variable metadata, and\n+ * catch blocks.\n+ *\n+ * {@snippet lang=\"text\" :\n+ * CodeElement = Instruction | PseudoInstruction\n+ *\n+ * Instruction =\n+ *     LoadInstruction(TypeKind type, int slot)\n+ *     | StoreInstruction(TypeKind type, int slot)\n+ *     | IncrementInstruction(int slot, int constant)\n+ *     | BranchInstruction(Opcode opcode, Label target)\n+ *     | LookupSwitchInstruction(Label defaultTarget, List<SwitchCase> cases)\n+ *     | TableSwitchInstruction(Label defaultTarget, int low, int high,\n+ *                              List<SwitchCase> cases)\n+ *     | ReturnInstruction(TypeKind kind)\n+ *     | ThrowInstruction()\n+ *     | FieldInstruction(Opcode opcode, FieldRefEntry field)\n+ *     | InvokeInstruction(Opcode opcode, MemberRefEntry method, boolean isInterface)\n+ *     | InvokeDynamicInstruction(InvokeDynamicEntry invokedynamic)\n+ *     | NewObjectInstruction(ClassEntry className)\n+ *     | NewReferenceArrayInstruction(ClassEntry componentType)\n+ *     | NewPrimitiveArrayInstruction(TypeKind typeKind)\n+ *     | NewMultiArrayInstruction(ClassEntry componentType, int dims)\n+ *     | ArrayLoadInstruction(Opcode opcode)\n+ *     | ArrayStoreInstruction(Opcode opcode)\n+ *     | TypeCheckInstruction(Opcode opcode, ClassEntry className)\n+ *     | ConvertInstruction(TypeKind from, TypeKind to)\n+ *     | OperatorInstruction(Opcode opcode)\n+ *     | ConstantInstruction(ConstantDesc constant)\n+ *     | StackInstruction(Opcode opcode)\n+ *     | MonitorInstruction(Opcode opcode)\n+ *     | NopInstruction()\n+ *\n+ * PseudoInstruction =\n+ *     | LabelTarget(Label label)\n+ *     | LineNumber(int line)\n+ *     | ExceptionCatch(Label tryStart, Label tryEnd, Label handler, ClassEntry exception)\n+ *     | LocalVariable(int slot, UtfEntry name, Utf8Entry type, Label startScope, Label endScope)\n+ *     | LocalVariableType(int slot, Utf8Entry name, Utf8Entry type, Label startScope, Label endScope)\n+ *     | CharacterRange(int rangeStart, int rangeEnd, int flags, Label startScope, Label endScope)\n+ * }\n+ *\n+ * @since 22\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+package java.lang.classfile;\n+\n+import jdk.internal.javac.PreviewFeature;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/package-info.java","additions":542,"deletions":0,"binary":false,"changes":542,"status":"added"},{"patch":"@@ -0,0 +1,429 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.classfile.snippets;\n+\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.invoke.MethodHandles;\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import java.lang.reflect.AccessFlag;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassFileVersion;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.PseudoInstruction;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.instruction.*;\n+\n+import static java.util.stream.Collectors.toSet;\n+import java.lang.classfile.components.ClassRemapper;\n+import java.lang.classfile.components.CodeLocalsShifter;\n+import java.lang.classfile.components.CodeRelabeler;\n+\n+class PackageSnippets {\n+    void enumerateFieldsMethods1(byte[] bytes) {\n+        \/\/ @start region=\"enumerateFieldsMethods1\"\n+        ClassModel cm = ClassFile.of().parse(bytes);\n+        for (FieldModel fm : cm.fields())\n+            System.out.printf(\"Field %s%n\", fm.fieldName().stringValue());\n+        for (MethodModel mm : cm.methods())\n+            System.out.printf(\"Method %s%n\", mm.methodName().stringValue());\n+        \/\/ @end\n+    }\n+\n+    void enumerateFieldsMethods2(byte[] bytes) {\n+        \/\/ @start region=\"enumerateFieldsMethods2\"\n+        ClassModel cm = ClassFile.of().parse(bytes);\n+        for (ClassElement ce : cm) {\n+            switch (ce) {\n+                case MethodModel mm -> System.out.printf(\"Method %s%n\", mm.methodName().stringValue());\n+                case FieldModel fm -> System.out.printf(\"Field %s%n\", fm.fieldName().stringValue());\n+                default -> { }\n+            }\n+        }\n+        \/\/ @end\n+    }\n+\n+    void gatherDependencies1(byte[] bytes) {\n+        \/\/ @start region=\"gatherDependencies1\"\n+        ClassModel cm = ClassFile.of().parse(bytes);\n+        Set<ClassDesc> dependencies = new HashSet<>();\n+\n+        for (ClassElement ce : cm) {\n+            if (ce instanceof MethodModel mm) {\n+                for (MethodElement me : mm) {\n+                    if (me instanceof CodeModel xm) {\n+                        for (CodeElement e : xm) {\n+                            switch (e) {\n+                                case InvokeInstruction i -> dependencies.add(i.owner().asSymbol());\n+                                case FieldInstruction i -> dependencies.add(i.owner().asSymbol());\n+                                default -> { }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        \/\/ @end\n+    }\n+\n+    void gatherDependencies2(byte[] bytes) {\n+        \/\/ @start region=\"gatherDependencies2\"\n+        ClassModel cm = ClassFile.of().parse(bytes);\n+        Set<ClassDesc> dependencies =\n+              cm.elementStream()\n+                .flatMap(ce -> ce instanceof MethodModel mm ? mm.elementStream() : Stream.empty())\n+                .flatMap(me -> me instanceof CodeModel com ? com.elementStream() : Stream.empty())\n+                .<ClassDesc>mapMulti((xe, c) -> {\n+                    switch (xe) {\n+                        case InvokeInstruction i -> c.accept(i.owner().asSymbol());\n+                        case FieldInstruction i -> c.accept(i.owner().asSymbol());\n+                        default -> { }\n+                    }\n+                })\n+                .collect(toSet());\n+        \/\/ @end\n+    }\n+\n+    private static final ClassDesc CD_Hello = ClassDesc.of(\"Hello\");\n+    private static final ClassDesc CD_Foo = ClassDesc.of(\"Foo\");\n+    private static final ClassDesc CD_Bar = ClassDesc.of(\"Bar\");\n+    private static final ClassDesc CD_System = ClassDesc.of(\"java.lang.System\");\n+    private static final ClassDesc CD_PrintStream = ClassDesc.of(\"java.io.PrintStream\");\n+    private static final MethodTypeDesc MTD_void_StringArray = MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_String.arrayType());\n+    private static final MethodTypeDesc MTD_void_String = MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_String);\n+\n+    void writeHelloWorld1() {\n+        \/\/ @start region=\"helloWorld1\"\n+        byte[] bytes = ClassFile.of().build(CD_Hello,\n+                clb -> clb.withFlags(ClassFile.ACC_PUBLIC)\n+                          .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void,\n+                                      ClassFile.ACC_PUBLIC,\n+                                      mb -> mb.withCode(\n+                                              cob -> cob.aload(0)\n+                                                        .invokespecial(ConstantDescs.CD_Object,\n+                                                                       ConstantDescs.INIT_NAME, ConstantDescs.MTD_void)\n+                                                        .return_()))\n+                          .withMethod(\"main\", MTD_void_StringArray, ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC,\n+                                      mb -> mb.withCode(\n+                                              cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n+                                                        .ldc(\"Hello World\")\n+                                                        .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n+                                                        .return_())));\n+        \/\/ @end\n+    }\n+\n+    void writeHelloWorld2() {\n+        \/\/ @start region=\"helloWorld2\"\n+        byte[] bytes = ClassFile.of().build(CD_Hello,\n+                clb -> clb.withFlags(ClassFile.ACC_PUBLIC)\n+                          .withMethodBody(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void,\n+                                          ClassFile.ACC_PUBLIC,\n+                                          cob -> cob.aload(0)\n+                                                    .invokespecial(ConstantDescs.CD_Object,\n+                                                                   ConstantDescs.INIT_NAME, ConstantDescs.MTD_void)\n+                                                    .return_())\n+                          .withMethodBody(\"main\", MTD_void_StringArray, ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC,\n+                                          cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n+                                                    .ldc(\"Hello World\")\n+                                                    .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n+                                                    .return_()));\n+        \/\/ @end\n+    }\n+\n+    void stripDebugMethods1(byte[] bytes) {\n+        \/\/ @start region=\"stripDebugMethods1\"\n+        ClassModel classModel = ClassFile.of().parse(bytes);\n+        byte[] newBytes = ClassFile.of().build(classModel.thisClass().asSymbol(),\n+                classBuilder -> {\n+                    for (ClassElement ce : classModel) {\n+                        if (!(ce instanceof MethodModel mm\n+                                && mm.methodName().stringValue().startsWith(\"debug\"))) {\n+                            classBuilder.with(ce);\n+                        }\n+                    }\n+                });\n+        \/\/ @end\n+    }\n+\n+    void stripDebugMethods2(byte[] bytes) {\n+        \/\/ @start region=\"stripDebugMethods2\"\n+        ClassTransform ct = (builder, element) -> {\n+            if (!(element instanceof MethodModel mm && mm.methodName().stringValue().startsWith(\"debug\")))\n+                builder.with(element);\n+        };\n+        var cc = ClassFile.of();\n+        byte[] newBytes = cc.transform(cc.parse(bytes), ct);\n+        \/\/ @end\n+    }\n+\n+    void stripDebugMethods3(byte[] bytes) {\n+        \/\/ @start region=\"stripDebugMethods3\"\n+        ClassTransform ct = ClassTransform.dropping(\n+                                    element -> element instanceof MethodModel mm\n+                                            && mm.methodName().stringValue().startsWith(\"debug\"));\n+        \/\/ @end\n+    }\n+\n+    void fooToBarTransform() {\n+        \/\/ @start region=\"fooToBarTransform\"\n+        CodeTransform fooToBar = (b, e) -> {\n+            if (e instanceof InvokeInstruction i\n+                    && i.owner().asInternalName().equals(\"Foo\")\n+                    && i.opcode() == Opcode.INVOKESTATIC)\n+                        b.invokeInstruction(i.opcode(), CD_Bar, i.name().stringValue(), i.typeSymbol(), i.isInterface());\n+            else b.with(e);\n+        };\n+        \/\/ @end\n+    }\n+\n+    void strictTransform1() {\n+        \/\/ @start region=\"strictTransform1\"\n+        CodeTransform fooToBar = (b, e) -> {\n+            if (ClassFile.latestMajorVersion() > ClassFile.JAVA_22_VERSION) {\n+                throw new IllegalArgumentException(\"Cannot run on JDK > 22\");\n+            }\n+            switch (e) {\n+                case ArrayLoadInstruction i -> doSomething(b, i);\n+                case ArrayStoreInstruction i -> doSomething(b, i);\n+                default ->  b.with(e);\n+            }\n+        };\n+        \/\/ @end\n+    }\n+\n+    void strictTransform2() {\n+        \/\/ @start region=\"strictTransform2\"\n+        ClassTransform fooToBar = (b, e) -> {\n+            switch (e) {\n+                case ClassFileVersion v when v.majorVersion() > ClassFile.JAVA_22_VERSION ->\n+                    throw new IllegalArgumentException(\"Cannot transform class file version \" + v.majorVersion());\n+                default ->  doSomething(b, e);\n+            }\n+        };\n+        \/\/ @end\n+    }\n+\n+    void strictTransform3() {\n+        \/\/ @start region=\"strictTransform3\"\n+        CodeTransform fooToBar = (b, e) -> {\n+            switch (e) {\n+                case ArrayLoadInstruction i -> doSomething(b, i);\n+                case ArrayStoreInstruction i -> doSomething(b, i);\n+                case BranchInstruction i -> doSomething(b, i);\n+                case ConstantInstruction i -> doSomething(b, i);\n+                case ConvertInstruction i -> doSomething(b, i);\n+                case DiscontinuedInstruction i -> doSomething(b, i);\n+                case FieldInstruction i -> doSomething(b, i);\n+                case InvokeDynamicInstruction i -> doSomething(b, i);\n+                case InvokeInstruction i -> doSomething(b, i);\n+                case LoadInstruction i -> doSomething(b, i);\n+                case StoreInstruction i -> doSomething(b, i);\n+                case IncrementInstruction i -> doSomething(b, i);\n+                case LookupSwitchInstruction i -> doSomething(b, i);\n+                case MonitorInstruction i -> doSomething(b, i);\n+                case NewMultiArrayInstruction i -> doSomething(b, i);\n+                case NewObjectInstruction i -> doSomething(b, i);\n+                case NewPrimitiveArrayInstruction i -> doSomething(b, i);\n+                case NewReferenceArrayInstruction i -> doSomething(b, i);\n+                case NopInstruction i -> doSomething(b, i);\n+                case OperatorInstruction i -> doSomething(b, i);\n+                case ReturnInstruction i -> doSomething(b, i);\n+                case StackInstruction i -> doSomething(b, i);\n+                case TableSwitchInstruction i -> doSomething(b, i);\n+                case ThrowInstruction i -> doSomething(b, i);\n+                case TypeCheckInstruction i -> doSomething(b, i);\n+                case PseudoInstruction i ->  doSomething(b, i);\n+                default ->\n+                    throw new IllegalArgumentException(\"An unknown instruction could not be handled by this transformation\");\n+            }\n+        };\n+        \/\/ @end\n+    }\n+\n+    void benevolentTransform() {\n+        \/\/ @start region=\"benevolentTransform\"\n+        CodeTransform fooToBar = (b, e) -> {\n+            switch (e) {\n+                case ArrayLoadInstruction i -> doSomething(b, i);\n+                case ArrayStoreInstruction i -> doSomething(b, i);\n+                default ->  b.with(e);\n+            }\n+        };\n+        \/\/ @end\n+    }\n+\n+    void doSomething(CodeBuilder b, CodeElement e) {}\n+\n+    void doSomething(ClassBuilder b, ClassElement e) {}\n+\n+    void instrumentCallsTransform() {\n+        \/\/ @start region=\"instrumentCallsTransform\"\n+        CodeTransform instrumentCalls = (b, e) -> {\n+            if (e instanceof InvokeInstruction i) {\n+                b.getstatic(CD_System, \"out\", CD_PrintStream)\n+                 .ldc(i.name().stringValue())\n+                 .invokevirtual(CD_PrintStream, \"println\", MTD_void_String);\n+            }\n+            b.with(e);\n+        };\n+        \/\/ @end\n+    }\n+\n+    void fooToBarUnrolled(ClassModel classModel) {\n+        \/\/ @start region=\"fooToBarUnrolled\"\n+        byte[] newBytes = ClassFile.of().build(classModel.thisClass().asSymbol(),\n+            classBuilder -> {\n+              for (ClassElement ce : classModel) {\n+                  if (ce instanceof MethodModel mm) {\n+                      classBuilder.withMethod(mm.methodName().stringValue(), mm.methodTypeSymbol(),\n+                                              mm.flags().flagsMask(),\n+                                              methodBuilder -> {\n+                                  for (MethodElement me : mm) {\n+                                      if (me instanceof CodeModel xm) {\n+                                          methodBuilder.withCode(codeBuilder -> {\n+                                              for (CodeElement e : xm) {\n+                                                  if (e instanceof InvokeInstruction i && i.owner().asInternalName().equals(\"Foo\")\n+                                                                               && i.opcode() == Opcode.INVOKESTATIC)\n+                                                              codeBuilder.invokeInstruction(i.opcode(), CD_Bar,\n+                                                                                            i.name().stringValue(), i.typeSymbol(), i.isInterface());\n+                                                  else codeBuilder.with(e);\n+                                              }});\n+                                          }\n+                                          else\n+                                          methodBuilder.with(me);\n+                                      }\n+                                  });\n+                              }\n+                      else\n+                      classBuilder.with(ce);\n+                  }\n+              });\n+        \/\/ @end\n+    }\n+\n+    void codeRelabeling(ClassModel classModel) {\n+        \/\/ @start region=\"codeRelabeling\"\n+        byte[] newBytes = ClassFile.of().transform(classModel,\n+                ClassTransform.transformingMethodBodies(\n+                        CodeTransform.ofStateful(CodeRelabeler::of)));\n+        \/\/ @end\n+    }\n+\n+    \/\/ @start region=\"classInstrumentation\"\n+    byte[] classInstrumentation(ClassModel target, ClassModel instrumentor, Predicate<MethodModel> instrumentedMethodsFilter) {\n+        var instrumentorCodeMap = instrumentor.methods().stream()\n+                                              .filter(instrumentedMethodsFilter)\n+                                              .collect(Collectors.toMap(mm -> mm.methodName().stringValue() + mm.methodType().stringValue(), mm -> mm.code().orElseThrow()));\n+        var targetFieldNames = target.fields().stream().map(f -> f.fieldName().stringValue()).collect(Collectors.toSet());\n+        var targetMethods = target.methods().stream().map(m -> m.methodName().stringValue() + m.methodType().stringValue()).collect(Collectors.toSet());\n+        var instrumentorClassRemapper = ClassRemapper.of(Map.of(instrumentor.thisClass().asSymbol(), target.thisClass().asSymbol()));\n+        return ClassFile.of().transform(target,\n+                ClassTransform.transformingMethods(\n+                        instrumentedMethodsFilter,\n+                        (mb, me) -> {\n+                            if (me instanceof CodeModel targetCodeModel) {\n+                                var mm = targetCodeModel.parent().get();\n+                                \/\/instrumented methods code is taken from instrumentor\n+                                mb.transformCode(instrumentorCodeMap.get(mm.methodName().stringValue() + mm.methodType().stringValue()),\n+                                        \/\/all references to the instrumentor class are remapped to target class\n+                                        instrumentorClassRemapper.asCodeTransform()\n+                                        .andThen((codeBuilder, instrumentorCodeElement) -> {\n+                                            \/\/all invocations of target methods from instrumentor are inlined\n+                                            if (instrumentorCodeElement instanceof InvokeInstruction inv\n+                                                && target.thisClass().asInternalName().equals(inv.owner().asInternalName())\n+                                                && mm.methodName().stringValue().equals(inv.name().stringValue())\n+                                                && mm.methodType().stringValue().equals(inv.type().stringValue())) {\n+\n+                                                \/\/store stacked method parameters into locals\n+                                                var storeStack = new ArrayDeque<StoreInstruction>();\n+                                                int slot = 0;\n+                                                if (!mm.flags().has(AccessFlag.STATIC))\n+                                                    storeStack.push(StoreInstruction.of(TypeKind.ReferenceType, slot++));\n+                                                for (var pt : mm.methodTypeSymbol().parameterList()) {\n+                                                    var tk = TypeKind.from(pt);\n+                                                    storeStack.push(StoreInstruction.of(tk, slot));\n+                                                    slot += tk.slotSize();\n+                                                }\n+                                                storeStack.forEach(codeBuilder::with);\n+\n+                                                \/\/inlined target locals must be shifted based on the actual instrumentor locals\n+                                                codeBuilder.block(inlinedBlockBuilder -> inlinedBlockBuilder\n+                                                        .transform(targetCodeModel, CodeLocalsShifter.of(mm.flags(), mm.methodTypeSymbol())\n+                                                        .andThen(CodeRelabeler.of())\n+                                                        .andThen((innerBuilder, shiftedTargetCode) -> {\n+                                                            \/\/returns must be replaced with jump to the end of the inlined method\n+                                                            if (shiftedTargetCode instanceof ReturnInstruction)\n+                                                                innerBuilder.goto_(inlinedBlockBuilder.breakLabel());\n+                                                            else\n+                                                                innerBuilder.with(shiftedTargetCode);\n+                                                        })));\n+                                            } else\n+                                                codeBuilder.with(instrumentorCodeElement);\n+                                        }));\n+                            } else\n+                                mb.with(me);\n+                        })\n+                .andThen(ClassTransform.endHandler(clb ->\n+                    \/\/remaining instrumentor fields and methods are injected at the end\n+                    clb.transform(instrumentor,\n+                            ClassTransform.dropping(cle ->\n+                                    !(cle instanceof FieldModel fm\n+                                            && !targetFieldNames.contains(fm.fieldName().stringValue()))\n+                                    && !(cle instanceof MethodModel mm\n+                                            && !ConstantDescs.INIT_NAME.equals(mm.methodName().stringValue())\n+                                            && !targetMethods.contains(mm.methodName().stringValue() + mm.methodType().stringValue())))\n+                            \/\/and instrumentor class references remapped to target class\n+                            .andThen(instrumentorClassRemapper)))));\n+    }\n+    \/\/ @end\n+\n+    void resolverExample() {\n+        \/\/ @start region=\"lookup-class-hierarchy-resolver\"\n+        MethodHandles.Lookup lookup = MethodHandles.lookup(); \/\/ @replace regex=\"MethodHandles\\.lookup\\(\\)\" replacement=\"...\"\n+        ClassHierarchyResolver resolver = ClassHierarchyResolver.ofClassLoading(lookup).cached();\n+        \/\/ @end\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/snippet-files\/PackageSnippets.java","additions":429,"deletions":0,"binary":false,"changes":429,"status":"added"},{"patch":"@@ -51,4 +51,4 @@\n-import jdk.internal.classfile.ClassHierarchyResolver;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.TypeKind;\n@@ -65,1 +65,1 @@\n-import static jdk.internal.classfile.Classfile.*;\n+import static java.lang.classfile.ClassFile.*;\n@@ -370,1 +370,1 @@\n-        return Classfile.of(ClassHierarchyResolverOption.of(ClassHierarchyResolver.ofClassLoading(loader)))\n+        return ClassFile.of(ClassHierarchyResolverOption.of(ClassHierarchyResolver.ofClassLoading(loader)))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -45,3 +45,3 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.instruction.SwitchCase;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.instruction.SwitchCase;\n@@ -389,1 +389,1 @@\n-        byte[] classBytes = Classfile.of().build(ClassDesc.of(typeSwitchClassName(caller.lookupClass())), clb -> {\n+        byte[] classBytes = ClassFile.of().build(ClassDesc.of(typeSwitchClassName(caller.lookupClass())), clb -> {\n@@ -393,1 +393,1 @@\n-                               Classfile.ACC_FINAL | Classfile.ACC_PUBLIC | Classfile.ACC_STATIC,\n+                               ClassFile.ACC_FINAL | ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.AnnotationImpl;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.List;\n-\n-\/**\n- * Models an annotation on a declaration.\n- *\n- * @see AnnotationElement\n- * @see AnnotationValue\n- * @see RuntimeVisibleAnnotationsAttribute\n- * @see RuntimeInvisibleAnnotationsAttribute\n- * @see RuntimeVisibleParameterAnnotationsAttribute\n- * @see RuntimeInvisibleParameterAnnotationsAttribute\n- *\/\n-public sealed interface Annotation\n-        extends WritableElement<Annotation>\n-        permits TypeAnnotation, AnnotationImpl {\n-\n-    \/**\n-     * {@return the class of the annotation}\n-     *\/\n-    Utf8Entry className();\n-\n-    \/**\n-     * {@return the class of the annotation, as a symbolic descriptor}\n-     *\/\n-    default ClassDesc classSymbol() {\n-        return ClassDesc.ofDescriptor(className().stringValue());\n-    }\n-\n-    \/**\n-     * {@return the elements of the annotation}\n-     *\/\n-    List<AnnotationElement> elements();\n-\n-    \/**\n-     * {@return an annotation}\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n-     *\/\n-    static Annotation of(Utf8Entry annotationClass,\n-                         List<AnnotationElement> elements) {\n-        return new AnnotationImpl(annotationClass, elements);\n-    }\n-\n-    \/**\n-     * {@return an annotation}\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n-     *\/\n-    static Annotation of(Utf8Entry annotationClass,\n-                         AnnotationElement... elements) {\n-        return of(annotationClass, List.of(elements));\n-    }\n-\n-    \/**\n-     * {@return an annotation}\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n-     *\/\n-    static Annotation of(ClassDesc annotationClass,\n-                         List<AnnotationElement> elements) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), elements);\n-    }\n-\n-    \/**\n-     * {@return an annotation}\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n-     *\/\n-    static Annotation of(ClassDesc annotationClass,\n-                         AnnotationElement... elements) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), elements);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Annotation.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -1,467 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.constantpool.AnnotationConstantValueEntry;\n-import jdk.internal.classfile.constantpool.DoubleEntry;\n-import jdk.internal.classfile.constantpool.FloatEntry;\n-import jdk.internal.classfile.constantpool.IntegerEntry;\n-import jdk.internal.classfile.constantpool.LongEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.AnnotationImpl;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-\n-import java.lang.constant.ClassDesc;\n-import java.lang.constant.ConstantDesc;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-\/**\n- * Models the value of a key-value pair of an annotation.\n- *\n- * @see Annotation\n- * @see AnnotationElement\n- *\/\n-\n-public sealed interface AnnotationValue extends WritableElement<AnnotationValue>\n-        permits AnnotationValue.OfAnnotation, AnnotationValue.OfArray,\n-                AnnotationValue.OfConstant, AnnotationValue.OfClass,\n-                AnnotationValue.OfEnum {\n-\n-    \/** Models an annotation-valued element *\/\n-    sealed interface OfAnnotation extends AnnotationValue\n-            permits AnnotationImpl.OfAnnotationImpl {\n-        \/** {@return the annotation} *\/\n-        Annotation annotation();\n-    }\n-\n-    \/** Models an array-valued element *\/\n-    sealed interface OfArray extends AnnotationValue\n-            permits AnnotationImpl.OfArrayImpl {\n-        \/** {@return the values} *\/\n-        List<AnnotationValue> values();\n-    }\n-\n-    \/** Models a constant-valued element *\/\n-    sealed interface OfConstant extends AnnotationValue\n-            permits AnnotationValue.OfString, AnnotationValue.OfDouble,\n-                    AnnotationValue.OfFloat, AnnotationValue.OfLong,\n-                    AnnotationValue.OfInteger, AnnotationValue.OfShort,\n-                    AnnotationValue.OfCharacter, AnnotationValue.OfByte,\n-                    AnnotationValue.OfBoolean, AnnotationImpl.OfConstantImpl {\n-        \/** {@return the constant} *\/\n-        AnnotationConstantValueEntry constant();\n-        \/** {@return the constant} *\/\n-        ConstantDesc constantValue();\n-    }\n-\n-    \/** Models a constant-valued element *\/\n-    sealed interface OfString extends AnnotationValue.OfConstant\n-            permits AnnotationImpl.OfStringImpl {\n-        \/** {@return the constant} *\/\n-        String stringValue();\n-    }\n-\n-    \/** Models a constant-valued element *\/\n-    sealed interface OfDouble extends AnnotationValue.OfConstant\n-            permits AnnotationImpl.OfDoubleImpl {\n-        \/** {@return the constant} *\/\n-        double doubleValue();\n-    }\n-\n-    \/** Models a constant-valued element *\/\n-    sealed interface OfFloat extends AnnotationValue.OfConstant\n-            permits AnnotationImpl.OfFloatImpl {\n-        \/** {@return the constant} *\/\n-        float floatValue();\n-    }\n-\n-    \/** Models a constant-valued element *\/\n-    sealed interface OfLong extends AnnotationValue.OfConstant\n-            permits AnnotationImpl.OfLongImpl {\n-        \/** {@return the constant} *\/\n-        long longValue();\n-    }\n-\n-    \/** Models a constant-valued element *\/\n-    sealed interface OfInteger extends AnnotationValue.OfConstant\n-            permits AnnotationImpl.OfIntegerImpl {\n-        \/** {@return the constant} *\/\n-        int intValue();\n-    }\n-\n-    \/** Models a constant-valued element *\/\n-    sealed interface OfShort extends AnnotationValue.OfConstant\n-            permits AnnotationImpl.OfShortImpl {\n-        \/** {@return the constant} *\/\n-        short shortValue();\n-    }\n-\n-    \/** Models a constant-valued element *\/\n-    sealed interface OfCharacter extends AnnotationValue.OfConstant\n-            permits AnnotationImpl.OfCharacterImpl {\n-        \/** {@return the constant} *\/\n-        char charValue();\n-    }\n-\n-    \/** Models a constant-valued element *\/\n-    sealed interface OfByte extends AnnotationValue.OfConstant\n-            permits AnnotationImpl.OfByteImpl {\n-        \/** {@return the constant} *\/\n-        byte byteValue();\n-    }\n-\n-    \/** Models a constant-valued element *\/\n-    sealed interface OfBoolean extends AnnotationValue.OfConstant\n-            permits AnnotationImpl.OfBooleanImpl {\n-        \/** {@return the constant} *\/\n-        boolean booleanValue();\n-    }\n-\n-    \/** Models a class-valued element *\/\n-    sealed interface OfClass extends AnnotationValue\n-            permits AnnotationImpl.OfClassImpl {\n-        \/** {@return the class name} *\/\n-        Utf8Entry className();\n-\n-        \/** {@return the class symbol} *\/\n-        default ClassDesc classSymbol() {\n-            return ClassDesc.ofDescriptor(className().stringValue());\n-        }\n-    }\n-\n-    \/** Models an enum-valued element *\/\n-    sealed interface OfEnum extends AnnotationValue\n-            permits AnnotationImpl.OfEnumImpl {\n-        \/** {@return the enum class name} *\/\n-        Utf8Entry className();\n-\n-        \/** {@return the enum class symbol} *\/\n-        default ClassDesc classSymbol() {\n-            return ClassDesc.ofDescriptor(className().stringValue());\n-        }\n-\n-        \/** {@return the enum constant name} *\/\n-        Utf8Entry constantName();\n-    }\n-\n-    \/**\n-     * @return the tag character for this type as per {@jvms 4.7.16.1}\n-     *\/\n-    char tag();\n-\n-    \/**\n-     * {@return an annotation element for a enum-valued element}\n-     * @param className the name of the enum class\n-     * @param constantName the name of the enum constant\n-     *\/\n-    static OfEnum ofEnum(Utf8Entry className,\n-                         Utf8Entry constantName) {\n-        return new AnnotationImpl.OfEnumImpl(className, constantName);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a enum-valued element}\n-     * @param className the name of the enum class\n-     * @param constantName the name of the enum constant\n-     *\/\n-    static OfEnum ofEnum(ClassDesc className, String constantName) {\n-        return ofEnum(TemporaryConstantPool.INSTANCE.utf8Entry(className.descriptorString()),\n-                      TemporaryConstantPool.INSTANCE.utf8Entry(constantName));\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a class-valued element}\n-     * @param className the name of the enum class\n-     *\/\n-    static OfClass ofClass(Utf8Entry className) {\n-        return new AnnotationImpl.OfClassImpl(className);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a class-valued element}\n-     * @param className the name of the enum class\n-     *\/\n-    static OfClass ofClass(ClassDesc className) {\n-        return ofClass(TemporaryConstantPool.INSTANCE.utf8Entry(className.descriptorString()));\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a string-valued element}\n-     * @param value the string\n-     *\/\n-    static OfConstant ofString(Utf8Entry value) {\n-        return new AnnotationImpl.OfStringImpl(value);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a string-valued element}\n-     * @param value the string\n-     *\/\n-    static OfConstant ofString(String value) {\n-        return ofString(TemporaryConstantPool.INSTANCE.utf8Entry(value));\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a double-valued element}\n-     * @param value the double value\n-     *\/\n-    static OfConstant ofDouble(DoubleEntry value) {\n-        return new AnnotationImpl.OfDoubleImpl(value);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a double-valued element}\n-     * @param value the double value\n-     *\/\n-    static OfConstant ofDouble(double value) {\n-        return ofDouble(TemporaryConstantPool.INSTANCE.doubleEntry(value));\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a float-valued element}\n-     * @param value the float value\n-     *\/\n-    static OfConstant ofFloat(FloatEntry value) {\n-        return new AnnotationImpl.OfFloatImpl(value);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a float-valued element}\n-     * @param value the float value\n-     *\/\n-    static OfConstant ofFloat(float value) {\n-        return ofFloat(TemporaryConstantPool.INSTANCE.floatEntry(value));\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a long-valued element}\n-     * @param value the long value\n-     *\/\n-    static OfConstant ofLong(LongEntry value) {\n-        return new AnnotationImpl.OfLongImpl(value);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a long-valued element}\n-     * @param value the long value\n-     *\/\n-    static OfConstant ofLong(long value) {\n-        return ofLong(TemporaryConstantPool.INSTANCE.longEntry(value));\n-    }\n-\n-    \/**\n-     * {@return an annotation element for an int-valued element}\n-     * @param value the int value\n-     *\/\n-    static OfConstant ofInt(IntegerEntry value) {\n-        return new AnnotationImpl.OfIntegerImpl(value);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for an int-valued element}\n-     * @param value the int value\n-     *\/\n-    static OfConstant ofInt(int value) {\n-        return ofInt(TemporaryConstantPool.INSTANCE.intEntry(value));\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a short-valued element}\n-     * @param value the short value\n-     *\/\n-    static OfConstant ofShort(IntegerEntry value) {\n-        return new AnnotationImpl.OfShortImpl(value);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a short-valued element}\n-     * @param value the short value\n-     *\/\n-    static OfConstant ofShort(short value) {\n-        return ofShort(TemporaryConstantPool.INSTANCE.intEntry(value));\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a char-valued element}\n-     * @param value the char value\n-     *\/\n-    static OfConstant ofChar(IntegerEntry value) {\n-        return new AnnotationImpl.OfCharacterImpl(value);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a char-valued element}\n-     * @param value the char value\n-     *\/\n-    static OfConstant ofChar(char value) {\n-        return ofChar(TemporaryConstantPool.INSTANCE.intEntry(value));\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a byte-valued element}\n-     * @param value the byte value\n-     *\/\n-    static OfConstant ofByte(IntegerEntry value) {\n-        return new AnnotationImpl.OfByteImpl(value);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a byte-valued element}\n-     * @param value the byte value\n-     *\/\n-    static OfConstant ofByte(byte value) {\n-        return ofByte(TemporaryConstantPool.INSTANCE.intEntry(value));\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a boolean-valued element}\n-     * @param value the boolean value\n-     *\/\n-    static OfConstant ofBoolean(IntegerEntry value) {\n-        return new AnnotationImpl.OfBooleanImpl(value);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for a boolean-valued element}\n-     * @param value the boolean value\n-     *\/\n-    static OfConstant ofBoolean(boolean value) {\n-        int i = value ? 1 : 0;\n-        return ofBoolean(TemporaryConstantPool.INSTANCE.intEntry(i));\n-    }\n-\n-    \/**\n-     * {@return an annotation element for an annotation-valued element}\n-     * @param value the annotation\n-     *\/\n-    static OfAnnotation ofAnnotation(Annotation value) {\n-        return new AnnotationImpl.OfAnnotationImpl(value);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for an array-valued element}\n-     * @param values the values\n-     *\/\n-    static OfArray ofArray(List<AnnotationValue> values) {\n-        return new AnnotationImpl.OfArrayImpl(values);\n-    }\n-\n-    \/**\n-     * {@return an annotation element for an array-valued element}\n-     * @param values the values\n-     *\/\n-    static OfArray ofArray(AnnotationValue... values) {\n-        return ofArray(List.of(values));\n-    }\n-\n-    \/**\n-     * {@return an annotation element}  The {@code value} parameter must be\n-     * a primitive, a String, a ClassDesc, an enum constant, or an array of\n-     * one of these.\n-     *\n-     * @param value the annotation value\n-     *\/\n-    static AnnotationValue of(Object value) {\n-        if (value instanceof String s) {\n-            return ofString(s);\n-        } else if (value instanceof Byte b) {\n-            return ofByte(b);\n-        } else if (value instanceof Boolean b) {\n-            return ofBoolean(b);\n-        } else if (value instanceof Short s) {\n-            return ofShort(s);\n-        } else if (value instanceof Character c) {\n-            return ofChar(c);\n-        } else if (value instanceof Integer i) {\n-            return ofInt(i);\n-        } else if (value instanceof Long l) {\n-            return ofLong(l);\n-        } else if (value instanceof Float f) {\n-            return ofFloat(f);\n-        } else if (value instanceof Double d) {\n-            return ofDouble(d);\n-        } else if (value instanceof ClassDesc clsDesc) {\n-            return ofClass(clsDesc);\n-        } else if (value instanceof byte[] arr) {\n-            var els = new ArrayList<AnnotationValue>(arr.length);\n-            for (var el : arr) {\n-                els.add(ofByte(el));\n-            }\n-            return ofArray(els);\n-        } else if (value instanceof boolean[] arr) {\n-            var els = new ArrayList<AnnotationValue>(arr.length);\n-            for (var el : arr) {\n-                els.add(ofBoolean(el));\n-            }\n-            return ofArray(els);\n-        } else if (value instanceof short[] arr) {\n-            var els = new ArrayList<AnnotationValue>(arr.length);\n-            for (var el : arr) {\n-                els.add(ofShort(el));\n-            }\n-            return ofArray(els);\n-        } else if (value instanceof char[] arr) {\n-            var els = new ArrayList<AnnotationValue>(arr.length);\n-            for (var el : arr) {\n-                els.add(ofChar(el));\n-            }\n-            return ofArray(els);\n-        } else if (value instanceof int[] arr) {\n-            var els = new ArrayList<AnnotationValue>(arr.length);\n-            for (var el : arr) {\n-                els.add(ofInt(el));\n-            }\n-            return ofArray(els);\n-        } else if (value instanceof long[] arr) {\n-            var els = new ArrayList<AnnotationValue>(arr.length);\n-            for (var el : arr) {\n-                els.add(ofLong(el));\n-            }\n-            return ofArray(els);\n-        } else if (value instanceof float[] arr) {\n-            var els = new ArrayList<AnnotationValue>(arr.length);\n-            for (var el : arr) {\n-                els.add(ofFloat(el));\n-            }\n-            return ofArray(els);\n-        } else if (value instanceof double[] arr) {\n-            var els = new ArrayList<AnnotationValue>(arr.length);\n-            for (var el : arr) {\n-                els.add(ofDouble(el));\n-            }\n-            return ofArray(els);\n-        } else if (value instanceof Object[] arr) {\n-            var els = new ArrayList<AnnotationValue>(arr.length);\n-            for (var el : arr) {\n-                els.add(of(el));\n-            }\n-            return ofArray(els);\n-        } else if (value instanceof Enum<?> e) {\n-            return ofEnum(ClassDesc.ofDescriptor(e.getDeclaringClass().descriptorString()), e.name());\n-        }\n-        throw new IllegalArgumentException(\"Illegal annotation constant value type \" + (value == null ? null : value.getClass()));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AnnotationValue.java","additions":0,"deletions":467,"binary":false,"changes":467,"status":"deleted"},{"patch":"@@ -1,104 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.attribute.AnnotationDefaultAttribute;\n-import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.internal.classfile.attribute.CharacterRangeTableAttribute;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.attribute.CompilationIDAttribute;\n-import jdk.internal.classfile.attribute.ConstantValueAttribute;\n-import jdk.internal.classfile.attribute.DeprecatedAttribute;\n-import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n-import jdk.internal.classfile.attribute.ExceptionsAttribute;\n-import jdk.internal.classfile.attribute.InnerClassesAttribute;\n-import jdk.internal.classfile.attribute.LineNumberTableAttribute;\n-import jdk.internal.classfile.attribute.LocalVariableTableAttribute;\n-import jdk.internal.classfile.attribute.LocalVariableTypeTableAttribute;\n-import jdk.internal.classfile.attribute.MethodParametersAttribute;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.ModuleHashesAttribute;\n-import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n-import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n-import jdk.internal.classfile.attribute.ModuleTargetAttribute;\n-import jdk.internal.classfile.attribute.NestHostAttribute;\n-import jdk.internal.classfile.attribute.NestMembersAttribute;\n-import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n-import jdk.internal.classfile.attribute.RecordAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.SignatureAttribute;\n-import jdk.internal.classfile.attribute.SourceDebugExtensionAttribute;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n-import jdk.internal.classfile.attribute.SourceIDAttribute;\n-import jdk.internal.classfile.attribute.StackMapTableAttribute;\n-import jdk.internal.classfile.attribute.SyntheticAttribute;\n-import jdk.internal.classfile.attribute.UnknownAttribute;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models a classfile attribute {@jvms 4.7}.  Many, though not all, subtypes of\n- * {@linkplain Attribute} will implement {@link ClassElement}, {@link\n- * MethodElement}, {@link FieldElement}, or {@link CodeElement}; attributes that\n- * are also elements will be delivered when traversing the elements of the\n- * corresponding model type. Additionally, all attributes are accessible\n- * directly from the corresponding model type through {@link\n- * AttributedElement#findAttribute(AttributeMapper)}.\n- * @param <A> the attribute type\n- *\/\n-public sealed interface Attribute<A extends Attribute<A>>\n-        extends WritableElement<A>\n-        permits AnnotationDefaultAttribute, BootstrapMethodsAttribute,\n-                CharacterRangeTableAttribute, CodeAttribute, CompilationIDAttribute,\n-                ConstantValueAttribute, DeprecatedAttribute, EnclosingMethodAttribute,\n-                ExceptionsAttribute, InnerClassesAttribute, LineNumberTableAttribute,\n-                LocalVariableTableAttribute, LocalVariableTypeTableAttribute,\n-                MethodParametersAttribute, ModuleAttribute, ModuleHashesAttribute,\n-                ModuleMainClassAttribute, ModulePackagesAttribute, ModuleResolutionAttribute,\n-                ModuleTargetAttribute, NestHostAttribute, NestMembersAttribute,\n-                PermittedSubclassesAttribute,\n-                RecordAttribute, RuntimeInvisibleAnnotationsAttribute,\n-                RuntimeInvisibleParameterAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n-                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleParameterAnnotationsAttribute,\n-                RuntimeVisibleTypeAnnotationsAttribute, SignatureAttribute,\n-                SourceDebugExtensionAttribute, SourceFileAttribute, SourceIDAttribute,\n-                StackMapTableAttribute, SyntheticAttribute,\n-                UnknownAttribute, BoundAttribute, UnboundAttribute {\n-    \/**\n-     * {@return the name of the attribute}\n-     *\/\n-    String attributeName();\n-\n-    \/**\n-     * {@return the {@link AttributeMapper} associated with this attribute}\n-     *\/\n-    AttributeMapper<A> attributeMapper();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attribute.java","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import jdk.internal.classfile.attribute.RecordComponentInfo;\n-import jdk.internal.classfile.impl.AbstractUnboundModel;\n-\n-\/**\n- * A {@link ClassfileElement} describing an entity that has attributes, such\n- * as a class, field, method, code attribute, or record component.\n- *\/\n-public sealed interface AttributedElement extends ClassfileElement\n-        permits ClassModel, CodeModel, FieldModel, MethodModel,\n-                RecordComponentInfo, AbstractUnboundModel {\n-\n-    \/**\n-     * {@return the attributes of this element}\n-     *\/\n-    List<Attribute<?>> attributes();\n-\n-    \/**\n-     * Finds an attribute by name.\n-     * @param attr the attribute mapper\n-     * @param <T> the type of the attribute\n-     * @return the attribute, or an empty {@linkplain Optional} if the attribute\n-     * is not present\n-     *\/\n-    default <T extends Attribute<T>> Optional<T> findAttribute(AttributeMapper<T> attr) {\n-        for (Attribute<?> la : attributes()) {\n-            if (la.attributeMapper() == attr) {\n-                @SuppressWarnings(\"unchecked\")\n-                var res = Optional.of((T) la);\n-                return res;\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    \/**\n-     * Finds one or more attributes by name.\n-     * @param attr the attribute mapper\n-     * @param <T> the type of the attribute\n-     * @return the attributes, or an empty {@linkplain List} if the attribute\n-     * is not present\n-     *\/\n-    default <T extends Attribute<T>> List<T> findAttributes(AttributeMapper<T> attr) {\n-        var list = new ArrayList<T>();\n-        for (var a : attributes()) {\n-            if (a.attributeMapper() == attr) {\n-                @SuppressWarnings(\"unchecked\")\n-                T t = (T)a;\n-                list.add(t);\n-            }\n-        }\n-        return list;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/AttributedElement.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n-import jdk.internal.classfile.impl.BootstrapMethodEntryImpl;\n-\n-\/**\n- * Models an entry in the bootstrap method table.  The bootstrap method table\n- * is stored in the {@code BootstrapMethods} attribute, but is modeled by\n- * the {@link ConstantPool}, since the bootstrap method table is logically\n- * part of the constant pool.\n- *\/\n-public sealed interface BootstrapMethodEntry\n-        extends WritableElement<BootstrapMethodEntry>\n-        permits BootstrapMethodEntryImpl {\n-\n-    \/**\n-     * {@return the constant pool associated with this entry}\n-     *\/\n-    ConstantPool constantPool();\n-\n-    \/**\n-     * {@return the index into the bootstrap method table corresponding to this entry}\n-     *\/\n-    int bsmIndex();\n-\n-    \/**\n-     * {@return the bootstrap method}\n-     *\/\n-    MethodHandleEntry bootstrapMethod();\n-\n-    \/**\n-     * {@return the bootstrap arguments}\n-     *\/\n-    List<LoadableConstantEntry> arguments();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/BootstrapMethodEntry.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.attribute.CompilationIDAttribute;\n-import jdk.internal.classfile.attribute.DeprecatedAttribute;\n-import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n-import jdk.internal.classfile.attribute.InnerClassesAttribute;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.ModuleHashesAttribute;\n-import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n-import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n-import jdk.internal.classfile.attribute.ModuleTargetAttribute;\n-import jdk.internal.classfile.attribute.NestHostAttribute;\n-import jdk.internal.classfile.attribute.NestMembersAttribute;\n-import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n-import jdk.internal.classfile.attribute.RecordAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.SignatureAttribute;\n-import jdk.internal.classfile.attribute.SourceDebugExtensionAttribute;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n-import jdk.internal.classfile.attribute.SourceIDAttribute;\n-import jdk.internal.classfile.attribute.SyntheticAttribute;\n-import jdk.internal.classfile.attribute.UnknownAttribute;\n-\n-\/**\n- * A {@link ClassfileElement} that can appear when traversing the elements\n- * of a {@link ClassModel} or be presented to a {@link ClassBuilder}.\n- *\/\n-public sealed interface ClassElement extends ClassfileElement\n-        permits AccessFlags, Superclass, Interfaces, ClassfileVersion,\n-                FieldModel, MethodModel,\n-                CustomAttribute, CompilationIDAttribute, DeprecatedAttribute,\n-                EnclosingMethodAttribute, InnerClassesAttribute,\n-                ModuleAttribute, ModuleHashesAttribute, ModuleMainClassAttribute,\n-                ModulePackagesAttribute, ModuleResolutionAttribute, ModuleTargetAttribute,\n-                NestHostAttribute, NestMembersAttribute, PermittedSubclassesAttribute,\n-                RecordAttribute,\n-                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n-                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n-                SignatureAttribute, SourceDebugExtensionAttribute,\n-                SourceFileAttribute, SourceIDAttribute, SyntheticAttribute, UnknownAttribute {\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassElement.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -1,170 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import java.util.function.Consumer;\n-import java.util.function.Predicate;\n-import java.util.function.Supplier;\n-\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.impl.TransformImpl;\n-\n-\/**\n- * A transformation on streams of {@link ClassElement}.\n- *\n- * @see ClassfileTransform\n- *\/\n-@FunctionalInterface\n-public non-sealed interface ClassTransform\n-        extends ClassfileTransform<ClassTransform, ClassElement, ClassBuilder> {\n-\n-    \/**\n-     * A class transform that sends all elements to the builder.\n-     *\/\n-    static final ClassTransform ACCEPT_ALL = new ClassTransform() {\n-        @Override\n-        public void accept(ClassBuilder builder, ClassElement element) {\n-            builder.with(element);\n-        }\n-    };\n-\n-    \/**\n-     * Create a stateful class transform from a {@link Supplier}.  The supplier\n-     * will be invoked for each transformation.\n-     *\n-     * @param supplier a {@link Supplier} that produces a fresh transform object\n-     *                 for each traversal\n-     * @return the stateful class transform\n-     *\/\n-    static ClassTransform ofStateful(Supplier<ClassTransform> supplier) {\n-        return new TransformImpl.SupplierClassTransform(supplier);\n-    }\n-\n-    \/**\n-     * Create a class transform that passes each element through to the builder,\n-     * and calls the specified function when transformation is complete.\n-     *\n-     * @param finisher the function to call when transformation is complete\n-     * @return the class transform\n-     *\/\n-    static ClassTransform endHandler(Consumer<ClassBuilder> finisher) {\n-        return new ClassTransform() {\n-            @Override\n-            public void accept(ClassBuilder builder, ClassElement element) {\n-                builder.with(element);\n-            }\n-\n-            @Override\n-            public void atEnd(ClassBuilder builder) {\n-                finisher.accept(builder);\n-            }\n-        };\n-    }\n-\n-    \/**\n-     * Create a class transform that passes each element through to the builder,\n-     * except for those that the supplied {@link Predicate} is true for.\n-     *\n-     * @param filter the predicate that determines which elements to drop\n-     * @return the class transform\n-     *\/\n-    static ClassTransform dropping(Predicate<ClassElement> filter) {\n-        return (b, e) -> {\n-            if (!filter.test(e))\n-                b.with(e);\n-        };\n-    }\n-\n-    \/**\n-     * Create a class transform that transforms {@link MethodModel} elements\n-     * with the supplied method transform.\n-     *\n-     * @param filter a predicate that determines which methods to transform\n-     * @param xform the method transform\n-     * @return the class transform\n-     *\/\n-    static ClassTransform transformingMethods(Predicate<MethodModel> filter,\n-                                              MethodTransform xform) {\n-        return new TransformImpl.ClassMethodTransform(xform, filter);\n-    }\n-\n-    \/**\n-     * Create a class transform that transforms {@link MethodModel} elements\n-     * with the supplied method transform.\n-     *\n-     * @param xform the method transform\n-     * @return the class transform\n-     *\/\n-    static ClassTransform transformingMethods(MethodTransform xform) {\n-        return transformingMethods(mm -> true, xform);\n-    }\n-\n-    \/**\n-     * Create a class transform that transforms the {@link CodeAttribute} (method body)\n-     * of {@link MethodModel} elements with the supplied code transform.\n-     *\n-     * @param filter a predicate that determines which methods to transform\n-     * @param xform the code transform\n-     * @return the class transform\n-     *\/\n-    static ClassTransform transformingMethodBodies(Predicate<MethodModel> filter,\n-                                                   CodeTransform xform) {\n-        return transformingMethods(filter, MethodTransform.transformingCode(xform));\n-    }\n-\n-    \/**\n-     * Create a class transform that transforms the {@link CodeAttribute} (method body)\n-     * of {@link MethodModel} elements with the supplied code transform.\n-     *\n-     * @param xform the code transform\n-     * @return the class transform\n-     *\/\n-    static ClassTransform transformingMethodBodies(CodeTransform xform) {\n-        return transformingMethods(MethodTransform.transformingCode(xform));\n-    }\n-\n-    \/**\n-     * Create a class transform that transforms {@link FieldModel} elements\n-     * with the supplied field transform.\n-     *\n-     * @param xform the field transform\n-     * @return the class transform\n-     *\/\n-    static ClassTransform transformingFields(FieldTransform xform) {\n-        return new TransformImpl.ClassFieldTransform(xform, f -> true);\n-    }\n-\n-    @Override\n-    default ClassTransform andThen(ClassTransform t) {\n-        return new TransformImpl.ChainedClassTransform(this, t);\n-    }\n-\n-    @Override\n-    default ResolvedTransform<ClassElement> resolve(ClassBuilder builder) {\n-        return new TransformImpl.ResolvedTransformImpl<>(e -> accept(builder, e),\n-                                                         () -> atEnd(builder),\n-                                                         () -> atStart(builder));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassTransform.java","additions":0,"deletions":170,"binary":false,"changes":170,"status":"deleted"},{"patch":"@@ -1,1428 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import java.io.IOException;\n-import java.lang.constant.ClassDesc;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.function.Consumer;\n-import java.util.function.Function;\n-\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.UnknownAttribute;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.ClassfileImpl;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import java.lang.reflect.AccessFlag;\n-import jdk.internal.classfile.attribute.CharacterRangeInfo;\n-import jdk.internal.classfile.attribute.LocalVariableInfo;\n-import jdk.internal.classfile.attribute.LocalVariableTypeInfo;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n-import static java.util.Objects.requireNonNull;\n-\n-\/**\n- * Represents a context for parsing, transforming, and generating classfiles.\n- * A {@code Classfile} has a set of options that condition how parsing and\n- * generation is done.\n- *\/\n-public sealed interface Classfile\n-        permits ClassfileImpl {\n-\n-    \/**\n-     * {@return a context with default options}\n-     *\/\n-    static Classfile of() {\n-        return ClassfileImpl.DEFAULT_CONTEXT;\n-    }\n-\n-    \/**\n-     * {@return a new context with options altered from the default}\n-     * @param options the desired processing options\n-     *\/\n-    static Classfile of(Option... options) {\n-        return of().withOptions(options);\n-    }\n-\n-    \/**\n-     * {@return a copy of the context with altered options}\n-     * @param options the desired processing options\n-     *\/\n-    Classfile withOptions(Option... options);\n-\n-    \/**\n-     * An option that affects the parsing and writing of classfiles.\n-     *\/\n-    sealed interface Option {\n-    }\n-\n-    \/**\n-     * Option describing attribute mappers for custom attributes.\n-     * Default is only to process standard attributes.\n-     *\/\n-    sealed interface AttributeMapperOption extends Option\n-            permits ClassfileImpl.AttributeMapperOptionImpl {\n-\n-        \/**\n-         * {@return an option describing attribute mappers for custom attributes}\n-         * @param attributeMapper a function mapping attribute names to attribute mappers\n-         *\/\n-        static AttributeMapperOption of(Function<Utf8Entry, AttributeMapper<?>> attributeMapper) {\n-            requireNonNull(attributeMapper);\n-            return new ClassfileImpl.AttributeMapperOptionImpl(attributeMapper);\n-        }\n-\n-        \/**\n-         * {@return the function mapping attribute names to attribute mappers}\n-         *\/\n-        Function<Utf8Entry, AttributeMapper<?>> attributeMapper();\n-    }\n-\n-    \/**\n-     * Option describing the class hierarchy resolver to use when generating\n-     * stack maps.\n-     *\/\n-    sealed interface ClassHierarchyResolverOption extends Option\n-            permits ClassfileImpl.ClassHierarchyResolverOptionImpl {\n-\n-        \/**\n-         * {@return an option describing the class hierarchy resolver to use when\n-         * generating stack maps}\n-         * @param classHierarchyResolver the resolver\n-         *\/\n-        static ClassHierarchyResolverOption of(ClassHierarchyResolver classHierarchyResolver) {\n-            requireNonNull(classHierarchyResolver);\n-            return new ClassfileImpl.ClassHierarchyResolverOptionImpl(classHierarchyResolver);\n-        }\n-\n-        \/**\n-         * {@return the class hierarchy resolver}\n-         *\/\n-        ClassHierarchyResolver classHierarchyResolver();\n-    }\n-\n-    \/**\n-     * Option describing whether to preserve the original constant pool when\n-     * transforming a classfile.  Reusing the constant pool enables significant\n-     * optimizations in processing time and minimizes differences between the\n-     * original and transformed classfile, but may result in a bigger classfile\n-     * when a classfile is significantly transformed.\n-     * Default is {@code SHARED_POOL} to preserve the original constant\n-     * pool.\n-     *\/\n-    enum ConstantPoolSharingOption implements Option {\n-\n-        \/** Preserves the original constant pool when transforming classfile *\/\n-        SHARED_POOL,\n-\n-        \/** Creates a new constant pool when transforming classfile *\/\n-        NEW_POOL\n-    }\n-\n-    \/**\n-     * Option describing whether or not to patch out unreachable code.\n-     * Default is {@code PATCH_DEAD_CODE} to automatically patch out unreachable\n-     * code with NOPs.\n-     *\/\n-    enum DeadCodeOption implements Option {\n-\n-        \/** Patch unreachable code *\/\n-        PATCH_DEAD_CODE,\n-\n-        \/** Keep the unreachable code *\/\n-        KEEP_DEAD_CODE\n-    }\n-\n-    \/**\n-     * Option describing whether or not to filter unresolved labels.\n-     * Default is {@code FAIL_ON_DEAD_LABELS} to throw IllegalStateException\n-     * when any {@link ExceptionCatch}, {@link LocalVariableInfo},\n-     * {@link LocalVariableTypeInfo}, or {@link CharacterRangeInfo}\n-     * reference to unresolved {@link Label} during bytecode serialization.\n-     * Setting this option to {@code DROP_DEAD_LABELS} filters the above\n-     * elements instead.\n-     *\/\n-    enum DeadLabelsOption implements Option {\n-\n-        \/** Fail on unresolved labels *\/\n-        FAIL_ON_DEAD_LABELS,\n-\n-        \/** Filter unresolved labels *\/\n-        DROP_DEAD_LABELS\n-    }\n-\n-    \/**\n-     * Option describing whether to process or discard debug elements.\n-     * Debug elements include the local variable table, local variable type\n-     * table, and character range table.  Discarding debug elements may\n-     * reduce the overhead of parsing or transforming classfiles.\n-     * Default is {@code PASS_DEBUG} to process debug elements.\n-     *\/\n-    enum DebugElementsOption implements Option {\n-\n-        \/** Process debug elements *\/\n-        PASS_DEBUG,\n-\n-        \/** Drop debug elements *\/\n-        DROP_DEBUG\n-    }\n-\n-    \/**\n-     * Option describing whether to process or discard line numbers.\n-     * Discarding line numbers may reduce the overhead of parsing or transforming\n-     * classfiles.\n-     * Default is {@code PASS_LINE_NUMBERS} to process line numbers.\n-     *\/\n-    enum LineNumbersOption implements Option {\n-\n-        \/** Process line numbers *\/\n-        PASS_LINE_NUMBERS,\n-\n-        \/** Drop line numbers *\/\n-        DROP_LINE_NUMBERS;\n-    }\n-\n-    \/**\n-     * Option describing whether or not to automatically rewrite short jumps to\n-     * long when necessary.\n-     * Default is {@code FIX_SHORT_JUMPS} to automatically rewrite jump\n-     * instructions.\n-     *\/\n-    enum ShortJumpsOption implements Option {\n-\n-        \/** Automatically convert short jumps to long when necessary *\/\n-        FIX_SHORT_JUMPS,\n-\n-        \/** Fail if short jump overflows *\/\n-        FAIL_ON_SHORT_JUMPS\n-    }\n-\n-    \/**\n-     * Option describing whether or not to generate stackmaps.\n-     * Default is {@code STACK_MAPS_WHEN_REQUIRED} to generate stack\n-     * maps for {@link #JAVA_6_VERSION} or above, where specifically for\n-     * {@link #JAVA_6_VERSION} the stack maps may not be generated.\n-     * @jvms 4.10.1 Verification by Type Checking\n-     *\/\n-    enum StackMapsOption implements Option {\n-\n-        \/** Generate stack maps when required *\/\n-        STACK_MAPS_WHEN_REQUIRED,\n-\n-        \/** Always generate stack maps *\/\n-        GENERATE_STACK_MAPS,\n-\n-        \/** Drop stack maps from code *\/\n-        DROP_STACK_MAPS\n-    }\n-\n-    \/**\n-     * Option describing whether to process or discard unrecognized or problematic\n-     * original attributes when a class, record component, field, method or code is\n-     * transformed in its exploded form.\n-     * Default is {@code PASS_ALL_ATTRIBUTES} to process all original attributes.\n-     * @see AttributeMapper.AttributeStability\n-     *\/\n-    enum AttributesProcessingOption implements Option {\n-\n-        \/** Process all original attributes during transformation *\/\n-        PASS_ALL_ATTRIBUTES,\n-\n-        \/** Drop unknown attributes during transformation *\/\n-        DROP_UNKNOWN_ATTRIBUTES,\n-\n-        \/** Drop unknown and unstable original attributes during transformation *\/\n-        DROP_UNSTABLE_ATRIBUTES;\n-    }\n-\n-    \/**\n-     * Parse a classfile into a {@link ClassModel}.\n-     * @param bytes the bytes of the classfile\n-     * @return the class model\n-     *\/\n-    ClassModel parse(byte[] bytes);\n-\n-    \/**\n-     * Parse a classfile into a {@link ClassModel}.\n-     * @param path the path to the classfile\n-     * @return the class model\n-     * @throws java.io.IOException\n-     *\/\n-    default ClassModel parse(Path path) throws IOException {\n-        return parse(Files.readAllBytes(path));\n-    }\n-\n-    \/**\n-     * Build a classfile into a byte array.\n-     * @param thisClass the name of the class to build\n-     * @param handler a handler that receives a {@link ClassBuilder}\n-     * @return the classfile bytes\n-     *\/\n-    default byte[] build(ClassDesc thisClass,\n-                         Consumer<? super ClassBuilder> handler) {\n-        ConstantPoolBuilder pool = ConstantPoolBuilder.of();\n-        return build(pool.classEntry(thisClass), pool, handler);\n-    }\n-\n-    \/**\n-     * Build a classfile into a byte array using the provided constant pool\n-     * builder.\n-     *\n-     * @param thisClassEntry the name of the class to build\n-     * @param constantPool the constant pool builder\n-     * @param handler a handler that receives a {@link ClassBuilder}\n-     * @return the classfile bytes\n-     *\/\n-    byte[] build(ClassEntry thisClassEntry,\n-                 ConstantPoolBuilder constantPool,\n-                 Consumer<? super ClassBuilder> handler);\n-\n-    \/**\n-     * Build a classfile into a file.\n-     * @param path the path to the file to write\n-     * @param thisClass the name of the class to build\n-     * @param handler a handler that receives a {@link ClassBuilder}\n-     * @throws java.io.IOException\n-     *\/\n-    default void buildTo(Path path,\n-                         ClassDesc thisClass,\n-                         Consumer<ClassBuilder> handler) throws IOException {\n-        Files.write(path, build(thisClass, handler));\n-    }\n-\n-    \/**\n-     * Build a classfile into a file using the provided constant pool\n-     * builder.\n-     *\n-     * @param path the path to the file to write\n-     * @param thisClassEntry the name of the class to build\n-     * @param constantPool the constant pool builder\n-     * @param handler a handler that receives a {@link ClassBuilder}\n-     * @throws java.io.IOException\n-     *\/\n-    default void buildTo(Path path,\n-                         ClassEntry thisClassEntry,\n-                         ConstantPoolBuilder constantPool,\n-                         Consumer<? super ClassBuilder> handler) throws IOException {\n-        Files.write(path, build(thisClassEntry, constantPool, handler));\n-    }\n-\n-    \/**\n-     * Build a module descriptor into a byte array.\n-     * @param moduleAttribute the {@code Module} attribute\n-     * @return the classfile bytes\n-     *\/\n-    default byte[] buildModule(ModuleAttribute moduleAttribute) {\n-        return buildModule(moduleAttribute, clb -> {});\n-    }\n-\n-    \/**\n-     * Build a module descriptor into a byte array.\n-     * @param moduleAttribute the {@code Module} attribute\n-     * @param handler a handler that receives a {@link ClassBuilder}\n-     * @return the classfile bytes\n-     *\/\n-    default byte[] buildModule(ModuleAttribute moduleAttribute,\n-                                     Consumer<? super ClassBuilder> handler) {\n-        return build(ClassDesc.of(\"module-info\"), clb -> {\n-            clb.withFlags(AccessFlag.MODULE);\n-            clb.with(moduleAttribute);\n-            handler.accept(clb);\n-        });\n-    }\n-\n-    \/**\n-     * Build a module descriptor into a file.\n-     * @param path the file to write\n-     * @param moduleAttribute the {@code Module} attribute\n-     * @throws java.io.IOException\n-     *\/\n-    default void buildModuleTo(Path path,\n-                                     ModuleAttribute moduleAttribute) throws IOException {\n-        buildModuleTo(path, moduleAttribute, clb -> {});\n-    }\n-\n-    \/**\n-     * Build a module descriptor into a file.\n-     * @param path the file to write\n-     * @param moduleAttribute the {@code Module} attribute\n-     * @param handler a handler that receives a {@link ClassBuilder}\n-     * @throws java.io.IOException\n-     *\/\n-    default void buildModuleTo(Path path,\n-                                     ModuleAttribute moduleAttribute,\n-                                     Consumer<? super ClassBuilder> handler) throws IOException {\n-        Files.write(path, buildModule(moduleAttribute, handler));\n-    }\n-\n-    \/**\n-     * Transform one classfile into a new classfile with the aid of a\n-     * {@link ClassTransform}.  The transform will receive each element of\n-     * this class, as well as a {@link ClassBuilder} for building the new class.\n-     * The transform is free to preserve, remove, or replace elements as it\n-     * sees fit.\n-     *\n-     * @implNote\n-     * This method behaves as if:\n-     * {@snippet lang=java :\n-     *     this.build(model.thisClass(), ConstantPoolBuilder.of(model),\n-     *                     b -> b.transform(model, transform));\n-     * }\n-     *\n-     * @param model the class model to transform\n-     * @param transform the transform\n-     * @return the bytes of the new class\n-     *\/\n-    default byte[] transform(ClassModel model, ClassTransform transform) {\n-        return transform(model, model.thisClass(), transform);\n-    }\n-\n-    \/**\n-     * Transform one classfile into a new classfile with the aid of a\n-     * {@link ClassTransform}.  The transform will receive each element of\n-     * this class, as well as a {@link ClassBuilder} for building the new class.\n-     * The transform is free to preserve, remove, or replace elements as it\n-     * sees fit.\n-     *\n-     * @param model the class model to transform\n-     * @param newClassName new class name\n-     * @param transform the transform\n-     * @return the bytes of the new class\n-     *\/\n-    default byte[] transform(ClassModel model, ClassDesc newClassName, ClassTransform transform) {\n-        return transform(model, TemporaryConstantPool.INSTANCE.classEntry(newClassName), transform);\n-    }\n-\n-    \/**\n-     * Transform one classfile into a new classfile with the aid of a\n-     * {@link ClassTransform}.  The transform will receive each element of\n-     * this class, as well as a {@link ClassBuilder} for building the new class.\n-     * The transform is free to preserve, remove, or replace elements as it\n-     * sees fit.\n-     *\n-     * @implNote\n-     * This method behaves as if:\n-     * {@snippet lang=java :\n-     *     this.build(newClassName, ConstantPoolBuilder.of(model),\n-     *                     b -> b.transform(model, transform));\n-     * }\n-     *\n-     * @param model the class model to transform\n-     * @param newClassName new class name\n-     * @param transform the transform\n-     * @return the bytes of the new class\n-     *\/\n-    byte[] transform(ClassModel model, ClassEntry newClassName, ClassTransform transform);\n-\n-    \/** 0xCAFEBABE *\/\n-    int MAGIC_NUMBER = 0xCAFEBABE;\n-\n-    \/** 0 *\/\n-    int NOP             = 0;\n-\n-    \/** 1 *\/\n-    int ACONST_NULL     = 1;\n-\n-    \/** 2 *\/\n-    int ICONST_M1       = 2;\n-\n-    \/** 3 *\/\n-    int ICONST_0        = 3;\n-\n-    \/** 4 *\/\n-    int ICONST_1        = 4;\n-\n-    \/** 5 *\/\n-    int ICONST_2        = 5;\n-\n-    \/** 6 *\/\n-    int ICONST_3        = 6;\n-\n-    \/** 7 *\/\n-    int ICONST_4        = 7;\n-\n-    \/** 8 *\/\n-    int ICONST_5        = 8;\n-\n-    \/** 9 *\/\n-    int LCONST_0        = 9;\n-\n-    \/** 10 *\/\n-    int LCONST_1        = 10;\n-\n-    \/** 11 *\/\n-    int FCONST_0        = 11;\n-\n-    \/** 12 *\/\n-    int FCONST_1        = 12;\n-\n-    \/** 13 *\/\n-    int FCONST_2        = 13;\n-\n-    \/** 14 *\/\n-    int DCONST_0        = 14;\n-\n-    \/** 15 *\/\n-    int DCONST_1        = 15;\n-\n-    \/** 16 *\/\n-    int BIPUSH          = 16;\n-\n-    \/** 17 *\/\n-    int SIPUSH          = 17;\n-\n-    \/** 18 *\/\n-    int LDC             = 18;\n-\n-    \/** 19 *\/\n-    int LDC_W           = 19;\n-\n-    \/** 20 *\/\n-    int LDC2_W          = 20;\n-\n-    \/** 21 *\/\n-    int ILOAD           = 21;\n-\n-    \/** 22 *\/\n-    int LLOAD           = 22;\n-\n-    \/** 23 *\/\n-    int FLOAD           = 23;\n-\n-    \/** 24 *\/\n-    int DLOAD           = 24;\n-\n-    \/** 25 *\/\n-    int ALOAD           = 25;\n-\n-    \/** 26 *\/\n-    int ILOAD_0         = 26;\n-\n-    \/** 27 *\/\n-    int ILOAD_1         = 27;\n-\n-    \/** 28 *\/\n-    int ILOAD_2         = 28;\n-\n-    \/** 29 *\/\n-    int ILOAD_3         = 29;\n-\n-    \/** 30 *\/\n-    int LLOAD_0         = 30;\n-\n-    \/** 31 *\/\n-    int LLOAD_1         = 31;\n-\n-    \/** 32 *\/\n-    int LLOAD_2         = 32;\n-\n-    \/** 33 *\/\n-    int LLOAD_3         = 33;\n-\n-    \/** 34 *\/\n-    int FLOAD_0         = 34;\n-\n-    \/** 35 *\/\n-    int FLOAD_1         = 35;\n-\n-    \/** 36 *\/\n-    int FLOAD_2         = 36;\n-\n-    \/** 37 *\/\n-    int FLOAD_3         = 37;\n-\n-    \/** 38 *\/\n-    int DLOAD_0         = 38;\n-\n-    \/** 39 *\/\n-    int DLOAD_1         = 39;\n-\n-    \/** 40 *\/\n-    int DLOAD_2         = 40;\n-\n-    \/** 41 *\/\n-    int DLOAD_3         = 41;\n-\n-    \/** 42 *\/\n-    int ALOAD_0         = 42;\n-\n-    \/** 43 *\/\n-    int ALOAD_1         = 43;\n-\n-    \/** 44 *\/\n-    int ALOAD_2         = 44;\n-\n-    \/** 45 *\/\n-    int ALOAD_3         = 45;\n-\n-    \/** 46 *\/\n-    int IALOAD          = 46;\n-\n-    \/** 47 *\/\n-    int LALOAD          = 47;\n-\n-    \/** 48 *\/\n-    int FALOAD          = 48;\n-\n-    \/** 49 *\/\n-    int DALOAD          = 49;\n-\n-    \/** 50 *\/\n-    int AALOAD          = 50;\n-\n-    \/** 51 *\/\n-    int BALOAD          = 51;\n-\n-    \/** 52 *\/\n-    int CALOAD          = 52;\n-\n-    \/** 53 *\/\n-    int SALOAD          = 53;\n-\n-    \/** 54 *\/\n-    int ISTORE          = 54;\n-\n-    \/** 55 *\/\n-    int LSTORE          = 55;\n-\n-    \/** 56 *\/\n-    int FSTORE          = 56;\n-\n-    \/** 57 *\/\n-    int DSTORE          = 57;\n-\n-    \/** 58 *\/\n-    int ASTORE          = 58;\n-\n-    \/** 59 *\/\n-    int ISTORE_0        = 59;\n-\n-    \/** 60 *\/\n-    int ISTORE_1        = 60;\n-\n-    \/** 61 *\/\n-    int ISTORE_2        = 61;\n-\n-    \/** 62 *\/\n-    int ISTORE_3        = 62;\n-\n-    \/** 63 *\/\n-    int LSTORE_0        = 63;\n-\n-    \/** 64 *\/\n-    int LSTORE_1        = 64;\n-\n-    \/** 65 *\/\n-    int LSTORE_2        = 65;\n-\n-    \/** 66 *\/\n-    int LSTORE_3        = 66;\n-\n-    \/** 67 *\/\n-    int FSTORE_0        = 67;\n-\n-    \/** 68 *\/\n-    int FSTORE_1        = 68;\n-\n-    \/** 69 *\/\n-    int FSTORE_2        = 69;\n-\n-    \/** 70 *\/\n-    int FSTORE_3        = 70;\n-\n-    \/** 71 *\/\n-    int DSTORE_0        = 71;\n-\n-    \/** 72 *\/\n-    int DSTORE_1        = 72;\n-\n-    \/** 73 *\/\n-    int DSTORE_2        = 73;\n-\n-    \/** 74 *\/\n-    int DSTORE_3        = 74;\n-\n-    \/** 75 *\/\n-    int ASTORE_0        = 75;\n-\n-    \/** 76 *\/\n-    int ASTORE_1        = 76;\n-\n-    \/** 77 *\/\n-    int ASTORE_2        = 77;\n-\n-    \/** 78 *\/\n-    int ASTORE_3        = 78;\n-\n-    \/** 79 *\/\n-    int IASTORE         = 79;\n-\n-    \/** 80 *\/\n-    int LASTORE         = 80;\n-\n-    \/** 81 *\/\n-    int FASTORE         = 81;\n-\n-    \/** 82 *\/\n-    int DASTORE         = 82;\n-\n-    \/** 83 *\/\n-    int AASTORE         = 83;\n-\n-    \/** 84 *\/\n-    int BASTORE         = 84;\n-\n-    \/** 85 *\/\n-    int CASTORE         = 85;\n-\n-    \/** 86 *\/\n-    int SASTORE         = 86;\n-\n-    \/** 87 *\/\n-    int POP             = 87;\n-\n-    \/** 88 *\/\n-    int POP2            = 88;\n-\n-    \/** 89 *\/\n-    int DUP             = 89;\n-\n-    \/** 90 *\/\n-    int DUP_X1          = 90;\n-\n-    \/** 91 *\/\n-    int DUP_X2          = 91;\n-\n-    \/** 92 *\/\n-    int DUP2            = 92;\n-\n-    \/** 93 *\/\n-    int DUP2_X1         = 93;\n-\n-    \/** 94 *\/\n-    int DUP2_X2         = 94;\n-\n-    \/** 95 *\/\n-    int SWAP            = 95;\n-\n-    \/** 96 *\/\n-    int IADD            = 96;\n-\n-    \/** 97 *\/\n-    int LADD            = 97;\n-\n-    \/** 98 *\/\n-    int FADD            = 98;\n-\n-    \/** 99 *\/\n-    int DADD            = 99;\n-\n-    \/** 100 *\/\n-    int ISUB            = 100;\n-\n-    \/** 101 *\/\n-    int LSUB            = 101;\n-\n-    \/** 102 *\/\n-    int FSUB            = 102;\n-\n-    \/** 103 *\/\n-    int DSUB            = 103;\n-\n-    \/** 104 *\/\n-    int IMUL            = 104;\n-\n-    \/** 105 *\/\n-    int LMUL            = 105;\n-\n-    \/** 106 *\/\n-    int FMUL            = 106;\n-\n-    \/** 107 *\/\n-    int DMUL            = 107;\n-\n-    \/** 108 *\/\n-    int IDIV            = 108;\n-\n-    \/** 109 *\/\n-    int LDIV            = 109;\n-\n-    \/** 110 *\/\n-    int FDIV            = 110;\n-\n-    \/** 111 *\/\n-    int DDIV            = 111;\n-\n-    \/** 112 *\/\n-    int IREM            = 112;\n-\n-    \/** 113 *\/\n-    int LREM            = 113;\n-\n-    \/** 114 *\/\n-    int FREM            = 114;\n-\n-    \/** 115 *\/\n-    int DREM            = 115;\n-\n-    \/** 116 *\/\n-    int INEG            = 116;\n-\n-    \/** 117 *\/\n-    int LNEG            = 117;\n-\n-    \/** 118 *\/\n-    int FNEG            = 118;\n-\n-    \/** 119 *\/\n-    int DNEG            = 119;\n-\n-    \/** 120 *\/\n-    int ISHL            = 120;\n-\n-    \/** 121 *\/\n-    int LSHL            = 121;\n-\n-    \/** 122 *\/\n-    int ISHR            = 122;\n-\n-    \/** 123 *\/\n-    int LSHR            = 123;\n-\n-    \/** 124 *\/\n-    int IUSHR           = 124;\n-\n-    \/** 125 *\/\n-    int LUSHR           = 125;\n-\n-    \/** 126 *\/\n-    int IAND            = 126;\n-\n-    \/** 127 *\/\n-    int LAND            = 127;\n-\n-    \/** 128 *\/\n-    int IOR             = 128;\n-\n-    \/** 129 *\/\n-    int LOR             = 129;\n-\n-    \/** 130 *\/\n-    int IXOR            = 130;\n-\n-    \/** 131 *\/\n-    int LXOR            = 131;\n-\n-    \/** 132 *\/\n-    int IINC            = 132;\n-\n-    \/** 133 *\/\n-    int I2L             = 133;\n-\n-    \/** 134 *\/\n-    int I2F             = 134;\n-\n-    \/** 135 *\/\n-    int I2D             = 135;\n-\n-    \/** 136 *\/\n-    int L2I             = 136;\n-\n-    \/** 137 *\/\n-    int L2F             = 137;\n-\n-    \/** 138 *\/\n-    int L2D             = 138;\n-\n-    \/** 139 *\/\n-    int F2I             = 139;\n-\n-    \/** 140 *\/\n-    int F2L             = 140;\n-\n-    \/** 141 *\/\n-    int F2D             = 141;\n-\n-    \/** 142 *\/\n-    int D2I             = 142;\n-\n-    \/** 143 *\/\n-    int D2L             = 143;\n-\n-    \/** 144 *\/\n-    int D2F             = 144;\n-\n-    \/** 145 *\/\n-    int I2B             = 145;\n-\n-    \/** 146 *\/\n-    int I2C             = 146;\n-\n-    \/** 147 *\/\n-    int I2S             = 147;\n-\n-    \/** 148 *\/\n-    int LCMP            = 148;\n-\n-    \/** 149 *\/\n-    int FCMPL           = 149;\n-\n-    \/** 150 *\/\n-    int FCMPG           = 150;\n-\n-    \/** 151 *\/\n-    int DCMPL           = 151;\n-\n-    \/** 152 *\/\n-    int DCMPG           = 152;\n-\n-    \/** 153 *\/\n-    int IFEQ            = 153;\n-\n-    \/** 154 *\/\n-    int IFNE            = 154;\n-\n-    \/** 155 *\/\n-    int IFLT            = 155;\n-\n-    \/** 156 *\/\n-    int IFGE            = 156;\n-\n-    \/** 157 *\/\n-    int IFGT            = 157;\n-\n-    \/** 158 *\/\n-    int IFLE            = 158;\n-\n-    \/** 159 *\/\n-    int IF_ICMPEQ       = 159;\n-\n-    \/** 160 *\/\n-    int IF_ICMPNE       = 160;\n-\n-    \/** 161 *\/\n-    int IF_ICMPLT       = 161;\n-\n-    \/** 162 *\/\n-    int IF_ICMPGE       = 162;\n-\n-    \/** 163 *\/\n-    int IF_ICMPGT       = 163;\n-\n-    \/** 164 *\/\n-    int IF_ICMPLE       = 164;\n-\n-    \/** 165 *\/\n-    int IF_ACMPEQ       = 165;\n-\n-    \/** 166 *\/\n-    int IF_ACMPNE       = 166;\n-\n-    \/** 167 *\/\n-    int GOTO            = 167;\n-\n-    \/** 168 *\/\n-    int JSR             = 168;\n-\n-    \/** 169 *\/\n-    int RET             = 169;\n-\n-    \/** 170 *\/\n-    int TABLESWITCH     = 170;\n-\n-    \/** 171 *\/\n-    int LOOKUPSWITCH    = 171;\n-\n-    \/** 172 *\/\n-    int IRETURN         = 172;\n-\n-    \/** 173 *\/\n-    int LRETURN         = 173;\n-\n-    \/** 174 *\/\n-    int FRETURN         = 174;\n-\n-    \/** 175 *\/\n-    int DRETURN         = 175;\n-\n-    \/** 176 *\/\n-    int ARETURN         = 176;\n-\n-    \/** 177 *\/\n-    int RETURN          = 177;\n-\n-    \/** 178 *\/\n-    int GETSTATIC       = 178;\n-\n-    \/** 179 *\/\n-    int PUTSTATIC       = 179;\n-\n-    \/** 180 *\/\n-    int GETFIELD        = 180;\n-\n-    \/** 181 *\/\n-    int PUTFIELD        = 181;\n-\n-    \/** 182 *\/\n-    int INVOKEVIRTUAL   = 182;\n-\n-    \/** 183 *\/\n-    int INVOKESPECIAL   = 183;\n-\n-    \/** 184 *\/\n-    int INVOKESTATIC    = 184;\n-\n-    \/** 185 *\/\n-    int INVOKEINTERFACE = 185;\n-\n-    \/** 186 *\/\n-    int INVOKEDYNAMIC   = 186;\n-\n-    \/** 187 *\/\n-    int NEW             = 187;\n-\n-    \/** 188 *\/\n-    int NEWARRAY        = 188;\n-\n-    \/** 189 *\/\n-    int ANEWARRAY       = 189;\n-\n-    \/** 190 *\/\n-    int ARRAYLENGTH     = 190;\n-\n-    \/** 191 *\/\n-    int ATHROW          = 191;\n-\n-    \/** 192 *\/\n-    int CHECKCAST       = 192;\n-\n-    \/** 193 *\/\n-    int INSTANCEOF      = 193;\n-\n-    \/** 194 *\/\n-    int MONITORENTER    = 194;\n-\n-    \/** 195 *\/\n-    int MONITOREXIT     = 195;\n-\n-    \/** 196 *\/\n-    int WIDE            = 196;\n-\n-    \/** 197 *\/\n-    int MULTIANEWARRAY  = 197;\n-\n-    \/** 198 *\/\n-    int IFNULL          = 198;\n-\n-    \/** 199 *\/\n-    int IFNONNULL       = 199;\n-\n-    \/** 200 *\/\n-    int GOTO_W          = 200;\n-\n-    \/** 201 *\/\n-    int JSR_W           = 201;\n-\n-    \/** 0x0001 *\/\n-    int ACC_PUBLIC = 0x0001;\n-\n-    \/** 0x0004 *\/\n-    int ACC_PROTECTED = 0x0004;\n-\n-    \/** 0x0002 *\/\n-    int ACC_PRIVATE = 0x0002;\n-\n-    \/** 0x0200 *\/\n-    int ACC_INTERFACE = 0x0200;\n-\n-    \/** 0x4000 *\/\n-    int ACC_ENUM = 0x4000;\n-\n-    \/** 0x2000 *\/\n-    int ACC_ANNOTATION = 0x2000;\n-\n-    \/** 0x0020 *\/\n-    int ACC_SUPER = 0x0020;\n-\n-    \/** 0x0400 *\/\n-    int ACC_ABSTRACT = 0x0400;\n-\n-    \/** 0x0040 *\/\n-    int ACC_VOLATILE = 0x0040;\n-\n-    \/** 0x0080 *\/\n-    int ACC_TRANSIENT = 0x0080;\n-\n-    \/** 0x1000 *\/\n-    int ACC_SYNTHETIC = 0x1000;\n-\n-    \/** 0x0008 *\/\n-    int ACC_STATIC = 0x0008;\n-\n-    \/** 0x0010 *\/\n-    int ACC_FINAL = 0x0010;\n-\n-    \/** 0x0020 *\/\n-    int ACC_SYNCHRONIZED = 0x0020;\n-\n-    \/** 0x0040 *\/\n-    int ACC_BRIDGE = 0x0040;\n-\n-    \/** 0x0080 *\/\n-    int ACC_VARARGS = 0x0080;\n-\n-    \/** 0x0100 *\/\n-    int ACC_NATIVE = 0x0100;\n-\n-    \/** 0x0800 *\/\n-    int ACC_STRICT = 0x0800;\n-\n-    \/** 0x8000 *\/\n-    int ACC_MODULE = 0x8000;\n-\n-    \/** 0x20 *\/\n-    int ACC_OPEN = 0x20;\n-\n-    \/** 0x8000 *\/\n-    int ACC_MANDATED = 0x8000;\n-\n-    \/** 0x20 *\/\n-    int ACC_TRANSITIVE = 0x20;\n-\n-    \/** 0x40 *\/\n-    int ACC_STATIC_PHASE = 0x40;\n-\n-    \/** 0x0001 *\/\n-    int CRT_STATEMENT       = 0x0001;\n-\n-    \/** 0x0002 *\/\n-    int CRT_BLOCK           = 0x0002;\n-\n-    \/** 0x0004 *\/\n-    int CRT_ASSIGNMENT      = 0x0004;\n-\n-    \/** 0x0008 *\/\n-    int CRT_FLOW_CONTROLLER = 0x0008;\n-\n-    \/** 0x0010 *\/\n-    int CRT_FLOW_TARGET     = 0x0010;\n-\n-    \/** 0x0020 *\/\n-    int CRT_INVOKE          = 0x0020;\n-\n-    \/** 0x0040 *\/\n-    int CRT_CREATE          = 0x0040;\n-\n-    \/** 0x0080 *\/\n-    int CRT_BRANCH_TRUE     = 0x0080;\n-\n-    \/** 0x0100 *\/\n-    int CRT_BRANCH_FALSE    = 0x0100;\n-\n-    \/** 7 *\/\n-    int TAG_CLASS = 7;\n-\n-    \/** 17 *\/\n-    int TAG_CONSTANTDYNAMIC = 17;\n-\n-    \/** 6 *\/\n-    int TAG_DOUBLE = 6;\n-\n-    \/** 9 *\/\n-    int TAG_FIELDREF = 9;\n-\n-    \/** 4 *\/\n-    int TAG_FLOAT = 4;\n-\n-    \/** 3 *\/\n-    int TAG_INTEGER = 3;\n-\n-    \/** 11 *\/\n-    int TAG_INTERFACEMETHODREF = 11;\n-\n-    \/** 18 *\/\n-    int TAG_INVOKEDYNAMIC = 18;\n-\n-    \/** 5 *\/\n-    int TAG_LONG = 5;\n-\n-    \/** 15 *\/\n-    int TAG_METHODHANDLE = 15;\n-\n-    \/** 10 *\/\n-    int TAG_METHODREF = 10;\n-\n-    \/** 16 *\/\n-    int TAG_METHODTYPE = 16;\n-\n-    \/** 19 *\/\n-    int TAG_MODULE = 19;\n-\n-    \/** 12 *\/\n-    int TAG_NAMEANDTYPE = 12;\n-\n-    \/** 20 *\/\n-    int TAG_PACKAGE = 20;\n-\n-    \/** 8 *\/\n-    int TAG_STRING = 8;\n-\n-    \/** 2 *\/\n-    int TAG_UNICODE = 2;\n-\n-    \/** 1 *\/\n-    int TAG_UTF8 = 1;\n-\n-    \/\/ annotation element values\n-\n-    \/** 'B' *\/\n-    char AEV_BYTE = 'B';\n-\n-    \/** 'C' *\/\n-    char AEV_CHAR = 'C';\n-\n-    \/** 'D' *\/\n-    char AEV_DOUBLE = 'D';\n-\n-    \/** 'F' *\/\n-    char AEV_FLOAT = 'F';\n-\n-    \/** 'I' *\/\n-    char AEV_INT = 'I';\n-\n-    \/** 'J' *\/\n-    char AEV_LONG = 'J';\n-\n-    \/** 'S' *\/\n-    char AEV_SHORT = 'S';\n-\n-    \/** 'Z' *\/\n-    char AEV_BOOLEAN = 'Z';\n-\n-    \/** 's' *\/\n-    char AEV_STRING = 's';\n-\n-    \/** 'e' *\/\n-    char AEV_ENUM = 'e';\n-\n-    \/** 'c' *\/\n-    char AEV_CLASS = 'c';\n-\n-    \/** '@' *\/\n-    char AEV_ANNOTATION = '@';\n-\n-    \/** '[' *\/\n-    char AEV_ARRAY = '[';\n-\n-    \/\/type annotations\n-\n-    \/** 0x00 *\/\n-    int TAT_CLASS_TYPE_PARAMETER = 0x00;\n-\n-    \/** 0x01 *\/\n-    int TAT_METHOD_TYPE_PARAMETER = 0x01;\n-\n-    \/** 0x10 *\/\n-    int TAT_CLASS_EXTENDS = 0x10;\n-\n-    \/** 0x11 *\/\n-    int TAT_CLASS_TYPE_PARAMETER_BOUND = 0x11;\n-\n-    \/** 0x12 *\/\n-    int TAT_METHOD_TYPE_PARAMETER_BOUND = 0x12;\n-\n-    \/** 0x13 *\/\n-    int TAT_FIELD = 0x13;\n-\n-    \/** 0x14 *\/\n-    int TAT_METHOD_RETURN = 0x14;\n-\n-    \/** 0x15 *\/\n-    int TAT_METHOD_RECEIVER = 0x15;\n-\n-    \/** 0x16 *\/\n-    int TAT_METHOD_FORMAL_PARAMETER = 0x16;\n-\n-    \/** 0x17 *\/\n-    int TAT_THROWS = 0x17;\n-\n-    \/** 0x40 *\/\n-    int TAT_LOCAL_VARIABLE = 0x40;\n-\n-    \/** 0x41 *\/\n-    int TAT_RESOURCE_VARIABLE = 0x41;\n-\n-    \/** 0x42 *\/\n-    int TAT_EXCEPTION_PARAMETER = 0x42;\n-\n-    \/** 0x43 *\/\n-    int TAT_INSTANCEOF = 0x43;\n-\n-    \/** 0x44 *\/\n-    int TAT_NEW = 0x44;\n-\n-    \/** 0x45 *\/\n-    int TAT_CONSTRUCTOR_REFERENCE = 0x45;\n-\n-    \/** 0x46 *\/\n-    int TAT_METHOD_REFERENCE = 0x46;\n-\n-    \/** 0x47 *\/\n-    int TAT_CAST = 0x47;\n-\n-    \/** 0x48 *\/\n-    int TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT = 0x48;\n-\n-    \/** 0x49 *\/\n-    int TAT_METHOD_INVOCATION_TYPE_ARGUMENT = 0x49;\n-\n-    \/** 0x4A *\/\n-    int TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT = 0x4A;\n-\n-    \/** 0x4B *\/\n-    int TAT_METHOD_REFERENCE_TYPE_ARGUMENT = 0x4B;\n-\n-    \/\/stackmap verification types\n-\n-    \/** 0 *\/\n-    int VT_TOP = 0;\n-\n-    \/** 1 *\/\n-    int VT_INTEGER = 1;\n-\n-    \/** 2 *\/\n-    int VT_FLOAT = 2;\n-\n-    \/** 3 *\/\n-    int VT_DOUBLE = 3;\n-\n-    \/** 4 *\/\n-    int VT_LONG = 4;\n-\n-    \/** 5 *\/\n-    int VT_NULL = 5;\n-\n-    \/** 6 *\/\n-    int VT_UNINITIALIZED_THIS = 6;\n-\n-    \/** 7 *\/\n-    int VT_OBJECT = 7;\n-\n-    \/** 8 *\/\n-    int VT_UNINITIALIZED = 8;\n-\n-    \/** ACC_PUBLIC *\/\n-    int DEFAULT_CLASS_FLAGS = ACC_PUBLIC;\n-\n-    \/** 45 *\/\n-    int JAVA_1_VERSION = 45;\n-\n-    \/** 46 *\/\n-    int JAVA_2_VERSION = 46;\n-\n-    \/** 47 *\/\n-    int JAVA_3_VERSION = 47;\n-\n-    \/** 48 *\/\n-    int JAVA_4_VERSION = 48;\n-\n-    \/** 49 *\/\n-    int JAVA_5_VERSION = 49;\n-\n-    \/** 50 *\/\n-    int JAVA_6_VERSION = 50;\n-\n-    \/** 51 *\/\n-    int JAVA_7_VERSION = 51;\n-\n-    \/** 52 *\/\n-    int JAVA_8_VERSION = 52;\n-\n-    \/** 53 *\/\n-    int JAVA_9_VERSION = 53;\n-\n-    \/** 54 *\/\n-    int JAVA_10_VERSION = 54;\n-\n-    \/** 55 *\/\n-    int JAVA_11_VERSION = 55;\n-\n-    \/** 56 *\/\n-    int JAVA_12_VERSION = 56;\n-\n-    \/** 57 *\/\n-    int JAVA_13_VERSION = 57;\n-\n-    \/** 58 *\/\n-    int JAVA_14_VERSION = 58;\n-\n-    \/** 59 *\/\n-    int JAVA_15_VERSION = 59;\n-\n-    \/** 60 *\/\n-    int JAVA_16_VERSION = 60;\n-\n-    \/** 61 *\/\n-    int JAVA_17_VERSION = 61;\n-\n-    \/** 62 *\/\n-    int JAVA_18_VERSION = 62;\n-\n-    \/** 63 *\/\n-    int JAVA_19_VERSION = 63;\n-\n-    \/** 64 *\/\n-    int JAVA_20_VERSION = 64;\n-\n-    \/** 65 *\/\n-    int JAVA_21_VERSION = 65;\n-\n-    \/** 66 *\/\n-    int JAVA_22_VERSION = 66;\n-\n-    \/**\n-     * A minor version number indicating a class uses preview features\n-     * of a Java SE version since 12, for major versions {@value\n-     * #JAVA_12_VERSION} and above.\n-     *\/\n-    int PREVIEW_MINOR_VERSION = 65535;\n-\n-    \/**\n-     * {@return the latest major Java version}\n-     *\/\n-    static int latestMajorVersion() {\n-        return JAVA_22_VERSION;\n-    }\n-\n-    \/**\n-     * {@return the latest minor Java version}\n-     *\/\n-    static int latestMinorVersion() {\n-        return 0;\n-    }\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":0,"deletions":1428,"binary":false,"changes":1428,"status":"deleted"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.function.Consumer;\n-\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-\n-\/**\n- * A builder for a classfile or portion of a classfile.  Builders are rarely\n- * created directly; they are passed to handlers by methods such as\n- * {@link Classfile#build(ClassDesc, Consumer)} or to transforms.\n- * Elements of the newly built entity can be specified\n- * abstractly (by passing a {@link ClassfileElement} to {@link #with(ClassfileElement)}\n- * or concretely by calling the various {@code withXxx} methods.\n- *\n- * @param <E> the element type\n- * @param <B> the builder type\n- * @see ClassfileTransform\n- *\/\n-public sealed interface ClassfileBuilder<E extends ClassfileElement, B extends ClassfileBuilder<E, B>>\n-        extends Consumer<E> permits ClassBuilder, FieldBuilder, MethodBuilder, CodeBuilder {\n-\n-    \/**\n-     * Integrate the {@link ClassfileElement} into the entity being built.\n-     * @param e the element\n-     *\/\n-    @Override\n-    default void accept(E e) {\n-        with(e);\n-    }\n-\n-    \/**\n-     * Integrate the {@link ClassfileElement} into the entity being built.\n-     * @param e the element\n-     * @return this builder\n-     *\/\n-    B with(E e);\n-\n-    \/**\n-     * {@return the constant pool builder associated with this builder}\n-     *\/\n-    ConstantPoolBuilder constantPool();\n-\n-    \/**\n-     * {@return whether the provided constant pool is compatible with this builder}\n-     * @param source the constant pool to test compatibility with\n-     *\/\n-    default boolean canWriteDirect(ConstantPool source) {\n-        return constantPool().canWriteDirect(source);\n-    }\n-\n-    \/**\n-     * Apply a transform to a model, directing results to this builder.\n-     * @param model the model to transform\n-     * @param transform the transform to apply\n-     *\/\n-    default void transform(CompoundElement<E> model, ClassfileTransform<?, E, B> transform) {\n-        @SuppressWarnings(\"unchecked\")\n-        B builder = (B) this;\n-        var resolved = transform.resolve(builder);\n-        resolved.startHandler().run();\n-        model.forEachElement(resolved.consumer());\n-        resolved.endHandler().run();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileBuilder.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-\/**\n- * Immutable model for a portion of (or the entirety of) a classfile.  Elements\n- * that model parts of the classfile that have attributes will implement {@link\n- * AttributedElement}; elements that model complex parts of the classfile that\n- * themselves contain their own child elements will implement {@link\n- * CompoundElement}.  Elements specific to various locations in the classfile\n- * will implement {@link ClassElement}, {@link MethodElement}, etc.\n- *\/\n-public sealed interface ClassfileElement\n-        permits AttributedElement, CompoundElement, WritableElement,\n-                ClassElement, CodeElement, FieldElement, MethodElement {\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileElement.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,161 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n-\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-\n-\/**\n- * A transformation on streams of elements. Transforms are used during\n- * transformation of classfile entities; a transform is provided to a method like\n- * {@link Classfile#transform(ClassModel, ClassTransform)}, and the elements of the class,\n- * along with a builder, are presented to the transform.\n- *\n- * <p>The subtypes of {@linkplain\n- * ClassfileTransform} (e.g., {@link ClassTransform}) are functional interfaces\n- * that accept an element and a corresponding builder.  Since any element can be\n- * reproduced on the builder via {@link ClassBuilder#with(ClassfileElement)}, a\n- * transform can easily leave elements in place, remove them, replace them, or\n- * augment them with other elements.  This enables localized transforms to be\n- * represented concisely.\n- *\n- * <p>Transforms also have an {@link #atEnd(ClassfileBuilder)} method, for\n- * which the default implementation does nothing, so that a transform can\n- * perform additional building after the stream of elements is exhausted.\n- *\n- * <p>Transforms can be chained together via the {@link\n- * #andThen(ClassfileTransform)} method, so that the output of one becomes the\n- * input to another.  This allows smaller units of transformation to be captured\n- * and reused.\n- *\n- * <p>Some transforms are stateful; for example, a transform that injects an\n- * annotation on a class may watch for the {@link RuntimeVisibleAnnotationsAttribute}\n- * element and transform it if found, but if it is not found, will generate a\n- * {@linkplain RuntimeVisibleAnnotationsAttribute} element containing the\n- * injected annotation from the {@linkplain #atEnd(ClassfileBuilder)} handler.\n- * To do this, the transform must accumulate some state during the traversal so\n- * that the end handler knows what to do.  If such a transform is to be reused,\n- * its state must be reset for each traversal; this will happen automatically if\n- * the transform is created with {@link ClassTransform#ofStateful(Supplier)} (or\n- * corresponding methods for other classfile locations.)\n- * <p>\n- * Class transformation sample where code transformation is stateful:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"codeRelabeling\"}\n- * <p>\n- * Complex class instrumentation sample chaining multiple transformations:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"classInstrumentation\"}\n- * @param <C> the transform type\n- * @param <E> the element type\n- * @param <B> the builder type\n- *\/\n-public sealed interface ClassfileTransform<\n-        C extends ClassfileTransform<C, E, B>,\n-        E extends ClassfileElement,\n-        B extends ClassfileBuilder<E, B>>\n-        permits ClassTransform, FieldTransform, MethodTransform, CodeTransform {\n-    \/**\n-     * Transform an element by taking the appropriate actions on the builder.\n-     * Used when transforming a classfile entity (class, method, field, method\n-     * body.) If no transformation is desired, the element can be presented to\n-     * {@link B#with(ClassfileElement)}.  If the element is to be dropped, no\n-     * action is required.\n-     *\n-     * @param builder the builder for the new entity\n-     * @param element the element\n-     *\/\n-    void accept(B builder, E element);\n-\n-    \/**\n-     * Take any final action during transformation of a classfile entity.  Called\n-     * after all elements of the class are presented to {@link\n-     * #accept(ClassfileBuilder, ClassfileElement)}.\n-     *\n-     * @param builder the builder for the new entity\n-     * @implSpec The default implementation does nothing.\n-     *\/\n-    default void atEnd(B builder) {\n-    }\n-\n-    \/**\n-     * Take any preliminary action during transformation of a classfile entity.\n-     * Called before any elements of the class are presented to {@link\n-     * #accept(ClassfileBuilder, ClassfileElement)}.\n-     *\n-     * @param builder the builder for the new entity\n-     * @implSpec The default implementation does nothing.\n-     *\/\n-    default void atStart(B builder) {\n-    }\n-\n-    \/**\n-     * Chain this transform with another; elements presented to the builder of\n-     * this transform will become the input to the next transform.\n-     *\n-     * @param next the downstream transform\n-     * @return the chained transform\n-     *\/\n-    C andThen(C next);\n-\n-    \/**\n-     * The result of binding a transform to a builder.  Used primarily within\n-     * the implementation to perform transformation.\n-     *\n-     * @param <E> the element type\n-     *\/\n-    interface ResolvedTransform<E extends ClassfileElement> {\n-        \/**\n-         * {@return a {@link Consumer} to receive elements}\n-         *\/\n-        Consumer<E> consumer();\n-\n-        \/**\n-         * {@return an action to call at the end of transformation}\n-         *\/\n-        Runnable endHandler();\n-\n-        \/**\n-         * {@return an action to call at the start of transformation}\n-         *\/\n-        Runnable startHandler();\n-    }\n-\n-    \/**\n-     * Bind a transform to a builder.  If the transform is chained, intermediate\n-     * builders are created for each chain link.  If the transform is stateful\n-     * (see, e.g., {@link ClassTransform#ofStateful(Supplier)}), the supplier is\n-     * invoked to get a fresh transform object.\n-     *\n-     * <p>This method is a low-level method that should rarely be used by\n-     * user code; most of the time, user code should prefer\n-     * {@link ClassfileBuilder#transform(CompoundElement, ClassfileTransform)},\n-     * which resolves the transform and executes it on the current builder.\n-     *\n-     * @param builder the builder to bind to\n-     * @return the bound result\n-     *\/\n-    ResolvedTransform<E> resolve(B builder);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileTransform.java","additions":0,"deletions":161,"binary":false,"changes":161,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.impl.ClassfileVersionImpl;\n-\n-\/**\n- * Models the classfile version information for a class.  Delivered as a {@link\n- * jdk.internal.classfile.ClassElement} when traversing the elements of a {@link\n- * ClassModel}.\n- *\/\n-public sealed interface ClassfileVersion\n-        extends ClassElement\n-        permits ClassfileVersionImpl {\n-    \/**\n-     * {@return the major classfile version}\n-     *\/\n-    int majorVersion();\n-\n-    \/**\n-     * {@return the minor classfile version}\n-     *\/\n-    int minorVersion();\n-\n-    \/**\n-     * {@return a {@link ClassfileVersion} element}\n-     * @param majorVersion the major classfile version\n-     * @param minorVersion the minor classfile version\n-     *\/\n-    static ClassfileVersion of(int majorVersion, int minorVersion) {\n-        return new ClassfileVersionImpl(majorVersion, minorVersion);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassfileVersion.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.StackMapTableAttribute;\n-\n-\/**\n- * A {@link ClassfileElement} that can appear when traversing the elements\n- * of a {@link CodeModel} or be presented to a {@link CodeBuilder}.  Code elements\n- * are either an {@link Instruction}, which models an instruction in the body\n- * of a method, or a {@link PseudoInstruction}, which models metadata from\n- * the code attribute, such as line number metadata, local variable metadata,\n- * exception metadata, label target metadata, etc.\n- *\/\n-public sealed interface CodeElement extends ClassfileElement\n-        permits Instruction, PseudoInstruction,\n-                CustomAttribute, RuntimeVisibleTypeAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n-                StackMapTableAttribute {\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeElement.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile;\n-\n-import java.util.List;\n-import java.util.Optional;\n-\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.impl.BufferedCodeBuilder;\n-import jdk.internal.classfile.impl.CodeImpl;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n-\n-\/**\n- * Models the body of a method (the {@code Code} attribute).  The instructions\n- * of the method body are accessed via a streaming view (e.g., {@link\n- * #elements()}).\n- *\/\n-public sealed interface CodeModel\n-        extends CompoundElement<CodeElement>, AttributedElement, MethodElement\n-        permits CodeAttribute, BufferedCodeBuilder.Model, CodeImpl {\n-\n-    \/**\n-     * {@return the maximum size of the local variable table}\n-     *\/\n-    int maxLocals();\n-\n-    \/**\n-     * {@return the maximum size of the operand stack}\n-     *\/\n-    int maxStack();\n-\n-    \/**\n-     * {@return the enclosing method, if known}\n-     *\/\n-    Optional<MethodModel> parent();\n-\n-    \/**\n-     * {@return the exception table of the method}  The exception table is also\n-     * modeled by {@link ExceptionCatch} elements in the streaming view.\n-     *\/\n-    List<ExceptionCatch> exceptionHandlers();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeModel.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n-\n-import jdk.internal.classfile.impl.TransformImpl;\n-\n-\/**\n- * A transformation on streams of {@link CodeElement}.\n- *\n- * @see ClassfileTransform\n- *\/\n-@FunctionalInterface\n-public non-sealed interface CodeTransform\n-        extends ClassfileTransform<CodeTransform, CodeElement, CodeBuilder> {\n-\n-    \/**\n-     * A code transform that sends all elements to the builder.\n-     *\/\n-    CodeTransform ACCEPT_ALL = new CodeTransform() {\n-        @Override\n-        public void accept(CodeBuilder builder, CodeElement element) {\n-            builder.with(element);\n-        }\n-    };\n-\n-    \/**\n-     * Create a stateful code transform from a {@link Supplier}.  The supplier\n-     * will be invoked for each transformation.\n-     *\n-     * @param supplier a {@link Supplier} that produces a fresh transform object\n-     *                 for each traversal\n-     * @return the stateful code transform\n-     *\/\n-    static CodeTransform ofStateful(Supplier<CodeTransform> supplier) {\n-        return new TransformImpl.SupplierCodeTransform(supplier);\n-    }\n-\n-    \/**\n-     * Create a code transform that passes each element through to the builder,\n-     * and calls the specified function when transformation is complete.\n-     *\n-     * @param finisher the function to call when transformation is complete\n-     * @return the code transform\n-     *\/\n-    static CodeTransform endHandler(Consumer<CodeBuilder> finisher) {\n-        return new CodeTransform() {\n-            @Override\n-            public void accept(CodeBuilder builder, CodeElement element) {\n-                builder.with(element);\n-            }\n-\n-            @Override\n-            public void atEnd(CodeBuilder builder) {\n-                finisher.accept(builder);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    default CodeTransform andThen(CodeTransform t) {\n-        return new TransformImpl.ChainedCodeTransform(this, t);\n-    }\n-\n-    @Override\n-    default ResolvedTransform<CodeElement> resolve(CodeBuilder builder) {\n-        return new TransformImpl.ResolvedTransformImpl<>(e -> accept(builder, e),\n-                                                         () -> atEnd(builder),\n-                                                         () -> atStart(builder));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeTransform.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models a non-standard attribute of a classfile.  Clients should extend\n- * this class to provide an implementation class for non-standard attributes,\n- * and provide an {@link AttributeMapper} to mediate between the classfile\n- * format and the {@linkplain CustomAttribute} representation.\n- * @param <T> the custom attribute type\n- *\/\n-@SuppressWarnings(\"exports\")\n-public abstract non-sealed class CustomAttribute<T extends CustomAttribute<T>>\n-        extends UnboundAttribute.CustomAttribute<T>\n-        implements CodeElement, ClassElement, MethodElement, FieldElement {\n-\n-    \/**\n-     * Construct a {@linkplain CustomAttribute}.\n-     * @param mapper the attribute mapper\n-     *\/\n-    protected CustomAttribute(AttributeMapper<T> mapper) {\n-        super(mapper);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CustomAttribute.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.attribute.ConstantValueAttribute;\n-import jdk.internal.classfile.attribute.DeprecatedAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.SignatureAttribute;\n-import jdk.internal.classfile.attribute.SyntheticAttribute;\n-import jdk.internal.classfile.attribute.UnknownAttribute;\n-\n-\/**\n- * A {@link ClassfileElement} that can appear when traversing the elements\n- * of a {@link FieldModel} or be presented to a {@link FieldBuilder}.\n- *\/\n-public sealed interface FieldElement extends ClassfileElement\n-        permits AccessFlags,\n-                CustomAttribute, ConstantValueAttribute, DeprecatedAttribute,\n-                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleTypeAnnotationsAttribute,\n-                RuntimeVisibleAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n-                SignatureAttribute, SyntheticAttribute, UnknownAttribute {\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/FieldElement.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import java.util.function.Consumer;\n-import java.util.function.Predicate;\n-import java.util.function.Supplier;\n-\n-import jdk.internal.classfile.impl.TransformImpl;\n-\n-\/**\n- * A transformation on streams of {@link FieldElement}.\n- *\n- * @see ClassfileTransform\n- *\/\n-@FunctionalInterface\n-public non-sealed interface FieldTransform\n-        extends ClassfileTransform<FieldTransform, FieldElement, FieldBuilder> {\n-\n-    \/**\n-     * A field transform that sends all elements to the builder.\n-     *\/\n-    FieldTransform ACCEPT_ALL = new FieldTransform() {\n-        @Override\n-        public void accept(FieldBuilder builder, FieldElement element) {\n-            builder.with(element);\n-        }\n-    };\n-\n-    \/**\n-     * Create a stateful field transform from a {@link Supplier}.  The supplier\n-     * will be invoked for each transformation.\n-     *\n-     * @param supplier a {@link Supplier} that produces a fresh transform object\n-     *                 for each traversal\n-     * @return the stateful field transform\n-     *\/\n-    static FieldTransform ofStateful(Supplier<FieldTransform> supplier) {\n-        return new TransformImpl.SupplierFieldTransform(supplier);\n-    }\n-\n-    \/**\n-     * Create a field transform that passes each element through to the builder,\n-     * and calls the specified function when transformation is complete.\n-     *\n-     * @param finisher the function to call when transformation is complete\n-     * @return the field transform\n-     *\/\n-    static FieldTransform endHandler(Consumer<FieldBuilder> finisher) {\n-        return new FieldTransform() {\n-            @Override\n-            public void accept(FieldBuilder builder, FieldElement element) {\n-                builder.with(element);\n-            }\n-\n-            @Override\n-            public void atEnd(FieldBuilder builder) {\n-                finisher.accept(builder);\n-            }\n-        };\n-    }\n-\n-    \/**\n-     * Create a field transform that passes each element through to the builder,\n-     * except for those that the supplied {@link Predicate} is true for.\n-     *\n-     * @param filter the predicate that determines which elements to drop\n-     * @return the field transform\n-     *\/\n-    static FieldTransform dropping(Predicate<FieldElement> filter) {\n-        return (b, e) -> {\n-            if (!filter.test(e))\n-                b.with(e);\n-        };\n-    }\n-\n-    @Override\n-    default FieldTransform andThen(FieldTransform t) {\n-        return new TransformImpl.ChainedFieldTransform(this, t);\n-    }\n-\n-    @Override\n-    default ResolvedTransform<FieldElement> resolve(FieldBuilder builder) {\n-        return new TransformImpl.ResolvedTransformImpl<>(e -> accept(builder, e),\n-                                                         () -> atEnd(builder),\n-                                                         () -> atStart(builder));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/FieldTransform.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.instruction.ArrayLoadInstruction;\n-import jdk.internal.classfile.instruction.ArrayStoreInstruction;\n-import jdk.internal.classfile.instruction.BranchInstruction;\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n-import jdk.internal.classfile.instruction.ConvertInstruction;\n-import jdk.internal.classfile.instruction.DiscontinuedInstruction;\n-import jdk.internal.classfile.instruction.FieldInstruction;\n-import jdk.internal.classfile.instruction.IncrementInstruction;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n-import jdk.internal.classfile.instruction.LoadInstruction;\n-import jdk.internal.classfile.instruction.LookupSwitchInstruction;\n-import jdk.internal.classfile.instruction.MonitorInstruction;\n-import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.internal.classfile.instruction.NewObjectInstruction;\n-import jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction;\n-import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n-import jdk.internal.classfile.instruction.NopInstruction;\n-import jdk.internal.classfile.instruction.OperatorInstruction;\n-import jdk.internal.classfile.instruction.ReturnInstruction;\n-import jdk.internal.classfile.instruction.StackInstruction;\n-import jdk.internal.classfile.instruction.StoreInstruction;\n-import jdk.internal.classfile.instruction.TableSwitchInstruction;\n-import jdk.internal.classfile.instruction.ThrowInstruction;\n-import jdk.internal.classfile.instruction.TypeCheckInstruction;\n-\n-\/**\n- * Models an executable instruction in a method body.\n- *\/\n-public sealed interface Instruction extends CodeElement\n-        permits ArrayLoadInstruction, ArrayStoreInstruction, BranchInstruction,\n-                ConstantInstruction, ConvertInstruction, DiscontinuedInstruction,\n-                FieldInstruction, InvokeDynamicInstruction, InvokeInstruction,\n-                LoadInstruction, StoreInstruction, IncrementInstruction,\n-                LookupSwitchInstruction, MonitorInstruction, NewMultiArrayInstruction,\n-                NewObjectInstruction, NewPrimitiveArrayInstruction, NewReferenceArrayInstruction,\n-                NopInstruction, OperatorInstruction, ReturnInstruction,\n-                StackInstruction, TableSwitchInstruction,\n-                ThrowInstruction, TypeCheckInstruction, AbstractInstruction {\n-\n-    \/**\n-     * {@return the opcode of this instruction}\n-     *\/\n-    Opcode opcode();\n-\n-    \/**\n-     * {@return the size in bytes of this instruction}\n-     *\/\n-    int sizeInBytes();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Instruction.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.attribute.AnnotationDefaultAttribute;\n-import jdk.internal.classfile.attribute.DeprecatedAttribute;\n-import jdk.internal.classfile.attribute.ExceptionsAttribute;\n-import jdk.internal.classfile.attribute.MethodParametersAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.SignatureAttribute;\n-import jdk.internal.classfile.attribute.SyntheticAttribute;\n-import jdk.internal.classfile.attribute.UnknownAttribute;\n-\n-\/**\n- * A {@link ClassfileElement} that can appear when traversing the elements\n- * of a {@link MethodModel} or be presented to a {@link MethodBuilder}.\n- *\/\n-public sealed interface MethodElement\n-        extends ClassfileElement\n-        permits AccessFlags, CodeModel, CustomAttribute,\n-                AnnotationDefaultAttribute, DeprecatedAttribute,\n-                ExceptionsAttribute, MethodParametersAttribute,\n-                RuntimeInvisibleAnnotationsAttribute, RuntimeInvisibleParameterAnnotationsAttribute,\n-                RuntimeInvisibleTypeAnnotationsAttribute, RuntimeVisibleAnnotationsAttribute,\n-                RuntimeVisibleParameterAnnotationsAttribute, RuntimeVisibleTypeAnnotationsAttribute,\n-                SignatureAttribute, SyntheticAttribute, UnknownAttribute {\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodElement.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,121 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import java.util.function.Consumer;\n-import java.util.function.Predicate;\n-import java.util.function.Supplier;\n-\n-import jdk.internal.classfile.impl.TransformImpl;\n-\n-\/**\n- * A transformation on streams of {@link MethodElement}.\n- *\n- * @see ClassfileTransform\n- *\/\n-@FunctionalInterface\n-public non-sealed interface MethodTransform\n-        extends ClassfileTransform<MethodTransform, MethodElement, MethodBuilder> {\n-\n-    \/**\n-     * A method transform that sends all elements to the builder.\n-     *\/\n-    MethodTransform ACCEPT_ALL = new MethodTransform() {\n-        @Override\n-        public void accept(MethodBuilder builder, MethodElement element) {\n-            builder.with(element);\n-        }\n-    };\n-\n-    \/**\n-     * Create a stateful method transform from a {@link Supplier}.  The supplier\n-     * will be invoked for each transformation.\n-     *\n-     * @param supplier a {@link Supplier} that produces a fresh transform object\n-     *                 for each traversal\n-     * @return the stateful method transform\n-     *\/\n-    static MethodTransform ofStateful(Supplier<MethodTransform> supplier) {\n-        return new TransformImpl.SupplierMethodTransform(supplier);\n-    }\n-\n-    \/**\n-     * Create a method transform that passes each element through to the builder,\n-     * and calls the specified function when transformation is complete.\n-     *\n-     * @param finisher the function to call when transformation is complete\n-     * @return the method transform\n-     *\/\n-    static MethodTransform endHandler(Consumer<MethodBuilder> finisher) {\n-        return new MethodTransform() {\n-            @Override\n-            public void accept(MethodBuilder builder, MethodElement element) {\n-                builder.with(element);\n-            }\n-\n-            @Override\n-            public void atEnd(MethodBuilder builder) {\n-                finisher.accept(builder);\n-            }\n-        };\n-    }\n-\n-    \/**\n-     * Create a method transform that passes each element through to the builder,\n-     * except for those that the supplied {@link Predicate} is true for.\n-     *\n-     * @param filter the predicate that determines which elements to drop\n-     * @return the method transform\n-     *\/\n-    static MethodTransform dropping(Predicate<MethodElement> filter) {\n-        return (b, e) -> {\n-            if (!filter.test(e))\n-                b.with(e);\n-        };\n-    }\n-\n-    \/**\n-     * Create a method transform that transforms {@link CodeModel} elements\n-     * with the supplied code transform.\n-     *\n-     * @param xform the method transform\n-     * @return the class transform\n-     *\/\n-    static MethodTransform transformingCode(CodeTransform xform) {\n-        return new TransformImpl.MethodCodeTransform(xform);\n-    }\n-\n-    @Override\n-    default ResolvedTransform<MethodElement> resolve(MethodBuilder builder) {\n-        return new TransformImpl.ResolvedTransformImpl<>(e -> accept(builder, e),\n-                                                         () -> atEnd(builder),\n-                                                         () -> atStart(builder));\n-    }\n-\n-    @Override\n-    default MethodTransform andThen(MethodTransform t) {\n-        return new TransformImpl.ChainedMethodTransform(this, t);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/MethodTransform.java","additions":0,"deletions":121,"binary":false,"changes":121,"status":"deleted"},{"patch":"@@ -1,1158 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import java.lang.constant.ConstantDesc;\n-import java.lang.constant.ConstantDescs;\n-\n-\/**\n- * Describes the opcodes of the JVM instruction set, as described in {@jvms 6.5}.\n- * As well as a number of pseudo-instructions that may be encountered when\n- * traversing the instructions of a method.\n- *\n- * @see Instruction\n- * @see PseudoInstruction\n- *\/\n-public enum Opcode {\n-\n-    \/** Do nothing *\/\n-    NOP(Classfile.NOP, 1, Kind.NOP),\n-\n-    \/** Push null *\/\n-    ACONST_NULL(Classfile.ACONST_NULL, 1, Kind.CONSTANT, TypeKind.ReferenceType, 0, ConstantDescs.NULL),\n-\n-    \/** Push int constant -1 *\/\n-    ICONST_M1(Classfile.ICONST_M1, 1, Kind.CONSTANT, TypeKind.IntType, 0, -1),\n-\n-    \/** Push int constant 0 *\/\n-    ICONST_0(Classfile.ICONST_0, 1, Kind.CONSTANT, TypeKind.IntType, 0, 0),\n-\n-    \/** Push int constant 1 *\/\n-    ICONST_1(Classfile.ICONST_1, 1, Kind.CONSTANT, TypeKind.IntType, 0, 1),\n-\n-    \/** Push int constant 2 *\/\n-    ICONST_2(Classfile.ICONST_2, 1, Kind.CONSTANT, TypeKind.IntType, 0, 2),\n-\n-    \/** Push int constant 3 *\/\n-    ICONST_3(Classfile.ICONST_3, 1, Kind.CONSTANT, TypeKind.IntType, 0, 3),\n-\n-    \/** Push int constant 4 *\/\n-    ICONST_4(Classfile.ICONST_4, 1, Kind.CONSTANT, TypeKind.IntType, 0, 4),\n-\n-    \/** Push int constant 5 *\/\n-    ICONST_5(Classfile.ICONST_5, 1, Kind.CONSTANT, TypeKind.IntType, 0, 5),\n-\n-    \/** Push long constant 0 *\/\n-    LCONST_0(Classfile.LCONST_0, 1, Kind.CONSTANT, TypeKind.LongType, 0, 0L),\n-\n-    \/** Push long constant  1 *\/\n-    LCONST_1(Classfile.LCONST_1, 1, Kind.CONSTANT, TypeKind.LongType, 0, 1L),\n-\n-    \/** Push float constant 0 *\/\n-    FCONST_0(Classfile.FCONST_0, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 0.0f),\n-\n-    \/** Push float constant 1 *\/\n-    FCONST_1(Classfile.FCONST_1, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 1.0f),\n-\n-    \/** Push float constant 2 *\/\n-    FCONST_2(Classfile.FCONST_2, 1, Kind.CONSTANT, TypeKind.FloatType, 0, 2.0f),\n-\n-    \/** Push double constant 0 *\/\n-    DCONST_0(Classfile.DCONST_0, 1, Kind.CONSTANT, TypeKind.DoubleType, 0, 0.0d),\n-\n-    \/** Push double constant 1 *\/\n-    DCONST_1(Classfile.DCONST_1, 1, Kind.CONSTANT, TypeKind.DoubleType, 0, 1.0d),\n-\n-    \/** Push byte *\/\n-    BIPUSH(Classfile.BIPUSH, 2, Kind.CONSTANT, TypeKind.ByteType),\n-\n-    \/** Push short *\/\n-    SIPUSH(Classfile.SIPUSH, 3, Kind.CONSTANT, TypeKind.ShortType),\n-\n-    \/** Push item from run-time constant pool *\/\n-    LDC(Classfile.LDC, 2, Kind.CONSTANT),\n-\n-    \/** Push item from run-time constant pool (wide index) *\/\n-    LDC_W(Classfile.LDC_W, 3, Kind.CONSTANT),\n-\n-    \/** Push long or double from run-time constant pool (wide index) *\/\n-    LDC2_W(Classfile.LDC2_W, 3, Kind.CONSTANT),\n-\n-    \/** Load int from local variable *\/\n-    ILOAD(Classfile.ILOAD, 2, Kind.LOAD, TypeKind.IntType, -1),\n-\n-    \/** Load long from local variable *\/\n-    LLOAD(Classfile.LLOAD, 2, Kind.LOAD, TypeKind.LongType, -1),\n-\n-    \/** Load float from local variable *\/\n-    FLOAD(Classfile.FLOAD, 2, Kind.LOAD, TypeKind.FloatType, -1),\n-\n-    \/** Load double from local variable *\/\n-    DLOAD(Classfile.DLOAD, 2, Kind.LOAD, TypeKind.DoubleType, -1),\n-\n-    \/** Load reference from local variable *\/\n-    ALOAD(Classfile.ALOAD, 2, Kind.LOAD, TypeKind.ReferenceType, -1),\n-\n-    \/** Load int from local variable 0 *\/\n-    ILOAD_0(Classfile.ILOAD_0, 1, Kind.LOAD, TypeKind.IntType, 0),\n-\n-    \/** Load int from local variable 1 *\/\n-    ILOAD_1(Classfile.ILOAD_1, 1, Kind.LOAD, TypeKind.IntType, 1),\n-\n-    \/** Load int from local variable 2 *\/\n-    ILOAD_2(Classfile.ILOAD_2, 1, Kind.LOAD, TypeKind.IntType, 2),\n-\n-    \/** Load int from local variable3  *\/\n-    ILOAD_3(Classfile.ILOAD_3, 1, Kind.LOAD, TypeKind.IntType, 3),\n-\n-    \/** Load long from local variable 0 *\/\n-    LLOAD_0(Classfile.LLOAD_0, 1, Kind.LOAD, TypeKind.LongType, 0),\n-\n-    \/** Load long from local variable 1 *\/\n-    LLOAD_1(Classfile.LLOAD_1, 1, Kind.LOAD, TypeKind.LongType, 1),\n-\n-    \/** Load long from local variable 2 *\/\n-    LLOAD_2(Classfile.LLOAD_2, 1, Kind.LOAD, TypeKind.LongType, 2),\n-\n-    \/** Load long from local variable 3 *\/\n-    LLOAD_3(Classfile.LLOAD_3, 1, Kind.LOAD, TypeKind.LongType, 3),\n-\n-    \/** Load float from local variable 0 *\/\n-    FLOAD_0(Classfile.FLOAD_0, 1, Kind.LOAD, TypeKind.FloatType, 0),\n-\n-    \/** Load float from local variable 1 *\/\n-    FLOAD_1(Classfile.FLOAD_1, 1, Kind.LOAD, TypeKind.FloatType, 1),\n-\n-    \/** Load float from local variable 2 *\/\n-    FLOAD_2(Classfile.FLOAD_2, 1, Kind.LOAD, TypeKind.FloatType, 2),\n-\n-    \/** Load float from local variable 3 *\/\n-    FLOAD_3(Classfile.FLOAD_3, 1, Kind.LOAD, TypeKind.FloatType, 3),\n-\n-    \/** Load double from local variable 0 *\/\n-    DLOAD_0(Classfile.DLOAD_0, 1, Kind.LOAD, TypeKind.DoubleType, 0),\n-\n-    \/** Load double from local variable 1 *\/\n-    DLOAD_1(Classfile.DLOAD_1, 1, Kind.LOAD, TypeKind.DoubleType, 1),\n-\n-    \/** Load double from local variable 2 *\/\n-    DLOAD_2(Classfile.DLOAD_2, 1, Kind.LOAD, TypeKind.DoubleType, 2),\n-\n-    \/** Load double from local variable 3 *\/\n-    DLOAD_3(Classfile.DLOAD_3, 1, Kind.LOAD, TypeKind.DoubleType, 3),\n-\n-    \/**  Load reference from local variable 0 *\/\n-    ALOAD_0(Classfile.ALOAD_0, 1, Kind.LOAD, TypeKind.ReferenceType, 0),\n-\n-    \/** Load reference from local variable 1 *\/\n-    ALOAD_1(Classfile.ALOAD_1, 1, Kind.LOAD, TypeKind.ReferenceType, 1),\n-\n-    \/** Load reference from local variable 2 *\/\n-    ALOAD_2(Classfile.ALOAD_2, 1, Kind.LOAD, TypeKind.ReferenceType, 2),\n-\n-    \/** Load reference from local variable 3 *\/\n-    ALOAD_3(Classfile.ALOAD_3, 1, Kind.LOAD, TypeKind.ReferenceType, 3),\n-\n-    \/** Load int from array *\/\n-    IALOAD(Classfile.IALOAD, 1, Kind.ARRAY_LOAD, TypeKind.IntType),\n-\n-    \/** Load long from array *\/\n-    LALOAD(Classfile.LALOAD, 1, Kind.ARRAY_LOAD, TypeKind.LongType),\n-\n-    \/** Load float from array *\/\n-    FALOAD(Classfile.FALOAD, 1, Kind.ARRAY_LOAD, TypeKind.FloatType),\n-\n-    \/** Load double from array *\/\n-    DALOAD(Classfile.DALOAD, 1, Kind.ARRAY_LOAD, TypeKind.DoubleType),\n-\n-    \/** Load reference from array *\/\n-    AALOAD(Classfile.AALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ReferenceType),\n-\n-    \/** Load byte from array *\/\n-    BALOAD(Classfile.BALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ByteType),\n-\n-    \/** Load char from array *\/\n-    CALOAD(Classfile.CALOAD, 1, Kind.ARRAY_LOAD, TypeKind.CharType),\n-\n-    \/** Load short from array *\/\n-    SALOAD(Classfile.SALOAD, 1, Kind.ARRAY_LOAD, TypeKind.ShortType),\n-\n-    \/** Store int into local variable *\/\n-    ISTORE(Classfile.ISTORE, 2, Kind.STORE, TypeKind.IntType, -1),\n-\n-    \/** Store long into local variable *\/\n-    LSTORE(Classfile.LSTORE, 2, Kind.STORE, TypeKind.LongType, -1),\n-\n-    \/** Store float into local variable *\/\n-    FSTORE(Classfile.FSTORE, 2, Kind.STORE, TypeKind.FloatType, -1),\n-\n-    \/** Store double into local variable *\/\n-    DSTORE(Classfile.DSTORE, 2, Kind.STORE, TypeKind.DoubleType, -1),\n-\n-    \/** Store reference into local variable *\/\n-    ASTORE(Classfile.ASTORE, 2, Kind.STORE, TypeKind.ReferenceType, -1),\n-\n-    \/** Store int into local variable 0 *\/\n-    ISTORE_0(Classfile.ISTORE_0, 1, Kind.STORE, TypeKind.IntType, 0),\n-\n-    \/** Store int into local variable 1 *\/\n-    ISTORE_1(Classfile.ISTORE_1, 1, Kind.STORE, TypeKind.IntType, 1),\n-\n-    \/** Store int into local variable 2 *\/\n-    ISTORE_2(Classfile.ISTORE_2, 1, Kind.STORE, TypeKind.IntType, 2),\n-\n-    \/** Store int into local variable 3 *\/\n-    ISTORE_3(Classfile.ISTORE_3, 1, Kind.STORE, TypeKind.IntType, 3),\n-\n-    \/** Store long into local variable 0 *\/\n-    LSTORE_0(Classfile.LSTORE_0, 1, Kind.STORE, TypeKind.LongType, 0),\n-\n-    \/** Store long into local variable 1 *\/\n-    LSTORE_1(Classfile.LSTORE_1, 1, Kind.STORE, TypeKind.LongType, 1),\n-\n-    \/** Store long into local variable 2 *\/\n-    LSTORE_2(Classfile.LSTORE_2, 1, Kind.STORE, TypeKind.LongType, 2),\n-\n-    \/** Store long into local variable 3 *\/\n-    LSTORE_3(Classfile.LSTORE_3, 1, Kind.STORE, TypeKind.LongType, 3),\n-\n-    \/** Store float into local variable 0 *\/\n-    FSTORE_0(Classfile.FSTORE_0, 1, Kind.STORE, TypeKind.FloatType, 0),\n-\n-    \/** Store float into local variable 1 *\/\n-    FSTORE_1(Classfile.FSTORE_1, 1, Kind.STORE, TypeKind.FloatType, 1),\n-\n-    \/** Store float into local variable 2 *\/\n-    FSTORE_2(Classfile.FSTORE_2, 1, Kind.STORE, TypeKind.FloatType, 2),\n-\n-    \/** Store float into local variable 3 *\/\n-    FSTORE_3(Classfile.FSTORE_3, 1, Kind.STORE, TypeKind.FloatType, 3),\n-\n-    \/** Store double into local variable 0 *\/\n-    DSTORE_0(Classfile.DSTORE_0, 1, Kind.STORE, TypeKind.DoubleType, 0),\n-\n-    \/** Store double into local variable 1 *\/\n-    DSTORE_1(Classfile.DSTORE_1, 1, Kind.STORE, TypeKind.DoubleType, 1),\n-\n-    \/** Store double into local variable 2 *\/\n-    DSTORE_2(Classfile.DSTORE_2, 1, Kind.STORE, TypeKind.DoubleType, 2),\n-\n-    \/** Store double into local variable 3 *\/\n-    DSTORE_3(Classfile.DSTORE_3, 1, Kind.STORE, TypeKind.DoubleType, 3),\n-\n-    \/** Store reference into local variable 0 *\/\n-    ASTORE_0(Classfile.ASTORE_0, 1, Kind.STORE, TypeKind.ReferenceType, 0),\n-\n-    \/** Store reference into local variable 1 *\/\n-    ASTORE_1(Classfile.ASTORE_1, 1, Kind.STORE, TypeKind.ReferenceType, 1),\n-\n-    \/** Store reference into local variable 2 *\/\n-    ASTORE_2(Classfile.ASTORE_2, 1, Kind.STORE, TypeKind.ReferenceType, 2),\n-\n-    \/** Store reference into local variable 3 *\/\n-    ASTORE_3(Classfile.ASTORE_3, 1, Kind.STORE, TypeKind.ReferenceType, 3),\n-\n-    \/** Store into int array *\/\n-    IASTORE(Classfile.IASTORE, 1, Kind.ARRAY_STORE, TypeKind.IntType),\n-\n-    \/** Store into long array *\/\n-    LASTORE(Classfile.LASTORE, 1, Kind.ARRAY_STORE, TypeKind.LongType),\n-\n-    \/** Store into float array *\/\n-    FASTORE(Classfile.FASTORE, 1, Kind.ARRAY_STORE, TypeKind.FloatType),\n-\n-    \/** Store into double array *\/\n-    DASTORE(Classfile.DASTORE, 1, Kind.ARRAY_STORE, TypeKind.DoubleType),\n-\n-    \/** Store into reference array *\/\n-    AASTORE(Classfile.AASTORE, 1, Kind.ARRAY_STORE, TypeKind.ReferenceType),\n-\n-    \/** Store into byte array *\/\n-    BASTORE(Classfile.BASTORE, 1, Kind.ARRAY_STORE, TypeKind.ByteType),\n-\n-    \/** Store into char array *\/\n-    CASTORE(Classfile.CASTORE, 1, Kind.ARRAY_STORE, TypeKind.CharType),\n-\n-    \/** Store into short array *\/\n-    SASTORE(Classfile.SASTORE, 1, Kind.ARRAY_STORE, TypeKind.ShortType),\n-\n-    \/** Pop the top operand stack value *\/\n-    POP(Classfile.POP, 1, Kind.STACK),\n-\n-    \/** Pop the top one or two operand stack values *\/\n-    POP2(Classfile.POP2, 1, Kind.STACK),\n-\n-    \/** Duplicate the top operand stack value *\/\n-    DUP(Classfile.DUP, 1, Kind.STACK),\n-\n-    \/** Duplicate the top operand stack value and insert two values down *\/\n-    DUP_X1(Classfile.DUP_X1, 1, Kind.STACK),\n-\n-    \/** Duplicate the top operand stack value and insert two or three values down *\/\n-    DUP_X2(Classfile.DUP_X2, 1, Kind.STACK),\n-\n-    \/** Duplicate the top one or two operand stack values *\/\n-    DUP2(Classfile.DUP2, 1, Kind.STACK),\n-\n-    \/** Duplicate the top one or two operand stack values and insert two or three values down *\/\n-    DUP2_X1(Classfile.DUP2_X1, 1, Kind.STACK),\n-\n-    \/** Duplicate the top one or two operand stack values and insert two, three, or four values down *\/\n-    DUP2_X2(Classfile.DUP2_X2, 1, Kind.STACK),\n-\n-    \/** Swap the top two operand stack values *\/\n-    SWAP(Classfile.SWAP, 1, Kind.STACK),\n-\n-    \/** Add int *\/\n-    IADD(Classfile.IADD, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Add long *\/\n-    LADD(Classfile.LADD, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Add float *\/\n-    FADD(Classfile.FADD, 1, Kind.OPERATOR, TypeKind.FloatType),\n-\n-    \/** Add double *\/\n-    DADD(Classfile.DADD, 1, Kind.OPERATOR, TypeKind.DoubleType),\n-\n-    \/** Subtract int *\/\n-    ISUB(Classfile.ISUB, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Subtract long *\/\n-    LSUB(Classfile.LSUB, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Subtract float *\/\n-    FSUB(Classfile.FSUB, 1, Kind.OPERATOR, TypeKind.FloatType),\n-\n-    \/** Subtract double *\/\n-    DSUB(Classfile.DSUB, 1, Kind.OPERATOR, TypeKind.DoubleType),\n-\n-    \/** Multiply int *\/\n-    IMUL(Classfile.IMUL, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Multiply long *\/\n-    LMUL(Classfile.LMUL, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Multiply float *\/\n-    FMUL(Classfile.FMUL, 1, Kind.OPERATOR, TypeKind.FloatType),\n-\n-    \/** Multiply double *\/\n-    DMUL(Classfile.DMUL, 1, Kind.OPERATOR, TypeKind.DoubleType),\n-\n-    \/** Divide int *\/\n-    IDIV(Classfile.IDIV, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Divide long *\/\n-    LDIV(Classfile.LDIV, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Divide float *\/\n-    FDIV(Classfile.FDIV, 1, Kind.OPERATOR, TypeKind.FloatType),\n-\n-    \/** Divide double *\/\n-    DDIV(Classfile.DDIV, 1, Kind.OPERATOR, TypeKind.DoubleType),\n-\n-    \/** Remainder int *\/\n-    IREM(Classfile.IREM, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Remainder long *\/\n-    LREM(Classfile.LREM, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Remainder float *\/\n-    FREM(Classfile.FREM, 1, Kind.OPERATOR, TypeKind.FloatType),\n-\n-    \/** Remainder double *\/\n-    DREM(Classfile.DREM, 1, Kind.OPERATOR, TypeKind.DoubleType),\n-\n-    \/** Negate int *\/\n-    INEG(Classfile.INEG, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Negate long *\/\n-    LNEG(Classfile.LNEG, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Negate float *\/\n-    FNEG(Classfile.FNEG, 1, Kind.OPERATOR, TypeKind.FloatType),\n-\n-    \/** Negate double *\/\n-    DNEG(Classfile.DNEG, 1, Kind.OPERATOR, TypeKind.DoubleType),\n-\n-    \/** Shift left int *\/\n-    ISHL(Classfile.ISHL, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Shift left long *\/\n-    LSHL(Classfile.LSHL, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Shift right int *\/\n-    ISHR(Classfile.ISHR, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Shift right long *\/\n-    LSHR(Classfile.LSHR, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Logical shift right int *\/\n-    IUSHR(Classfile.IUSHR, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Logical shift right long *\/\n-    LUSHR(Classfile.LUSHR, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Boolean AND int *\/\n-    IAND(Classfile.IAND, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Boolean AND long *\/\n-    LAND(Classfile.LAND, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Boolean OR int *\/\n-    IOR(Classfile.IOR, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Boolean OR long *\/\n-    LOR(Classfile.LOR, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Boolean XOR int *\/\n-    IXOR(Classfile.IXOR, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Boolean XOR long *\/\n-    LXOR(Classfile.LXOR, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Increment local variable by constant *\/\n-    IINC(Classfile.IINC, 3, Kind.INCREMENT, TypeKind.IntType, -1),\n-\n-    \/** Convert int to long *\/\n-    I2L(Classfile.I2L, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.LongType),\n-\n-    \/** Convert int to float *\/\n-    I2F(Classfile.I2F, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.FloatType),\n-\n-    \/** Convert int to double *\/\n-    I2D(Classfile.I2D, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.DoubleType),\n-\n-    \/** Convert long to int *\/\n-    L2I(Classfile.L2I, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.IntType),\n-\n-    \/** Convert long to float *\/\n-    L2F(Classfile.L2F, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.FloatType),\n-\n-    \/** Convert long to double *\/\n-    L2D(Classfile.L2D, 1, Kind.CONVERT, TypeKind.LongType, TypeKind.DoubleType),\n-\n-    \/** Convert float to int *\/\n-    F2I(Classfile.F2I, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.IntType),\n-\n-    \/** Convert float to long *\/\n-    F2L(Classfile.F2L, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.LongType),\n-\n-    \/** Convert float to double *\/\n-    F2D(Classfile.F2D, 1, Kind.CONVERT, TypeKind.FloatType, TypeKind.DoubleType),\n-\n-    \/** Convert double to int *\/\n-    D2I(Classfile.D2I, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.IntType),\n-\n-    \/** Convert double to long *\/\n-    D2L(Classfile.D2L, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.LongType),\n-\n-    \/** Convert double to float *\/\n-    D2F(Classfile.D2F, 1, Kind.CONVERT, TypeKind.DoubleType, TypeKind.FloatType),\n-\n-    \/** Convert int to byte *\/\n-    I2B(Classfile.I2B, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.ByteType),\n-\n-    \/** Convert int to char *\/\n-    I2C(Classfile.I2C, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.CharType),\n-\n-    \/** Convert int to short *\/\n-    I2S(Classfile.I2S, 1, Kind.CONVERT, TypeKind.IntType, TypeKind.ShortType),\n-\n-    \/** Compare long *\/\n-    LCMP(Classfile.LCMP, 1, Kind.OPERATOR, TypeKind.LongType),\n-\n-    \/** Compare float *\/\n-    FCMPL(Classfile.FCMPL, 1, Kind.OPERATOR, TypeKind.FloatType),\n-\n-    \/** Compare float *\/\n-    FCMPG(Classfile.FCMPG, 1, Kind.OPERATOR, TypeKind.FloatType),\n-\n-    \/** Compare double *\/\n-    DCMPL(Classfile.DCMPL, 1, Kind.OPERATOR, TypeKind.DoubleType),\n-\n-    \/** Compare double *\/\n-    DCMPG(Classfile.DCMPG, 1, Kind.OPERATOR, TypeKind.DoubleType),\n-\n-    \/** Branch if int comparison with zero succeeds *\/\n-    IFEQ(Classfile.IFEQ, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if int comparison with zero succeeds *\/\n-    IFNE(Classfile.IFNE, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if int comparison with zero succeeds *\/\n-    IFLT(Classfile.IFLT, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if int comparison with zero succeeds *\/\n-    IFGE(Classfile.IFGE, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if int comparison with zero succeeds *\/\n-    IFGT(Classfile.IFGT, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if int comparison with zero succeeds *\/\n-    IFLE(Classfile.IFLE, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if int comparison succeeds *\/\n-    IF_ICMPEQ(Classfile.IF_ICMPEQ, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if int comparison succeeds *\/\n-    IF_ICMPNE(Classfile.IF_ICMPNE, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if int comparison succeeds *\/\n-    IF_ICMPLT(Classfile.IF_ICMPLT, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if int comparison succeeds *\/\n-    IF_ICMPGE(Classfile.IF_ICMPGE, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if int comparison succeeds *\/\n-    IF_ICMPGT(Classfile.IF_ICMPGT, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if int comparison succeeds *\/\n-    IF_ICMPLE(Classfile.IF_ICMPLE, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch if reference comparison succeeds *\/\n-    IF_ACMPEQ(Classfile.IF_ACMPEQ, 3, Kind.BRANCH, TypeKind.ReferenceType),\n-\n-    \/** Branch if reference comparison succeeds *\/\n-    IF_ACMPNE(Classfile.IF_ACMPNE, 3, Kind.BRANCH, TypeKind.ReferenceType),\n-\n-    \/** Branch always *\/\n-    GOTO(Classfile.GOTO, 3, Kind.BRANCH, TypeKind.VoidType),\n-\n-    \/** Jump subroutine *\/\n-    JSR(Classfile.JSR, 3, Kind.DISCONTINUED_JSR),\n-\n-    \/** Return from subroutine *\/\n-    RET(Classfile.RET, 2, Kind.DISCONTINUED_RET),\n-\n-    \/** Access jump table by index and jump *\/\n-    TABLESWITCH(Classfile.TABLESWITCH, -1, Kind.TABLE_SWITCH),\n-\n-    \/** Access jump table by key match and jump *\/\n-    LOOKUPSWITCH(Classfile.LOOKUPSWITCH, -1, Kind.LOOKUP_SWITCH),\n-\n-    \/** Return int from method *\/\n-    IRETURN(Classfile.IRETURN, 1, Kind.RETURN, TypeKind.IntType),\n-\n-    \/** Return long from method *\/\n-    LRETURN(Classfile.LRETURN, 1, Kind.RETURN, TypeKind.LongType),\n-\n-    \/** Return float from method *\/\n-    FRETURN(Classfile.FRETURN, 1, Kind.RETURN, TypeKind.FloatType),\n-\n-    \/** Return double from method *\/\n-    DRETURN(Classfile.DRETURN, 1, Kind.RETURN, TypeKind.DoubleType),\n-\n-    \/** Return reference from method *\/\n-    ARETURN(Classfile.ARETURN, 1, Kind.RETURN, TypeKind.ReferenceType),\n-\n-    \/** Return void from method *\/\n-    RETURN(Classfile.RETURN, 1, Kind.RETURN, TypeKind.VoidType),\n-\n-    \/** Get static field from class *\/\n-    GETSTATIC(Classfile.GETSTATIC, 3, Kind.FIELD_ACCESS),\n-\n-    \/** Set static field in class *\/\n-    PUTSTATIC(Classfile.PUTSTATIC, 3, Kind.FIELD_ACCESS),\n-\n-    \/** Fetch field from object *\/\n-    GETFIELD(Classfile.GETFIELD, 3, Kind.FIELD_ACCESS),\n-\n-    \/** Set field in object *\/\n-    PUTFIELD(Classfile.PUTFIELD, 3, Kind.FIELD_ACCESS),\n-\n-    \/** Invoke instance method; dispatch based on class *\/\n-    INVOKEVIRTUAL(Classfile.INVOKEVIRTUAL, 3, Kind.INVOKE),\n-\n-    \/**\n-     * Invoke instance method; direct invocation of instance initialization\n-     * methods and methods of the current class and its supertypes\n-     *\/\n-    INVOKESPECIAL(Classfile.INVOKESPECIAL, 3, Kind.INVOKE),\n-\n-    \/** Invoke a class (static) method *\/\n-    INVOKESTATIC(Classfile.INVOKESTATIC, 3, Kind.INVOKE),\n-\n-    \/** Invoke interface method *\/\n-    INVOKEINTERFACE(Classfile.INVOKEINTERFACE, 5, Kind.INVOKE),\n-\n-    \/** Invoke a dynamically-computed call site *\/\n-    INVOKEDYNAMIC(Classfile.INVOKEDYNAMIC, 5, Kind.INVOKE_DYNAMIC),\n-\n-    \/** Create new object *\/\n-    NEW(Classfile.NEW, 3, Kind.NEW_OBJECT),\n-\n-    \/** Create new array *\/\n-    NEWARRAY(Classfile.NEWARRAY, 2, Kind.NEW_PRIMITIVE_ARRAY),\n-\n-    \/** Create new array of reference *\/\n-    ANEWARRAY(Classfile.ANEWARRAY, 3, Kind.NEW_REF_ARRAY),\n-\n-    \/** Get length of array *\/\n-    ARRAYLENGTH(Classfile.ARRAYLENGTH, 1, Kind.OPERATOR, TypeKind.IntType),\n-\n-    \/** Throw exception or error *\/\n-    ATHROW(Classfile.ATHROW, 1, Kind.THROW_EXCEPTION),\n-\n-    \/** Check whether object is of given type *\/\n-    CHECKCAST(Classfile.CHECKCAST, 3, Kind.TYPE_CHECK),\n-\n-    \/** Determine if object is of given type *\/\n-    INSTANCEOF(Classfile.INSTANCEOF, 3, Kind.TYPE_CHECK),\n-\n-    \/** Enter monitor for object *\/\n-    MONITORENTER(Classfile.MONITORENTER, 1, Kind.MONITOR),\n-\n-    \/** Exit monitor for object *\/\n-    MONITOREXIT(Classfile.MONITOREXIT, 1, Kind.MONITOR),\n-\n-    \/** Create new multidimensional array *\/\n-    MULTIANEWARRAY(Classfile.MULTIANEWARRAY, 4, Kind.NEW_MULTI_ARRAY),\n-\n-    \/** Branch if reference is null *\/\n-    IFNULL(Classfile.IFNULL, 3, Kind.BRANCH, TypeKind.ReferenceType),\n-\n-    \/** Branch if reference not null *\/\n-    IFNONNULL(Classfile.IFNONNULL, 3, Kind.BRANCH, TypeKind.IntType),\n-\n-    \/** Branch always (wide index) *\/\n-    GOTO_W(Classfile.GOTO_W, 5, Kind.BRANCH, TypeKind.VoidType),\n-\n-    \/** Jump subroutine (wide index) *\/\n-    JSR_W(Classfile.JSR_W, 5, Kind.DISCONTINUED_JSR),\n-\n-    \/** Load int from local variable (wide index) *\/\n-    ILOAD_W((Classfile.WIDE << 8) | Classfile.ILOAD, 4, Kind.LOAD, TypeKind.IntType, -1),\n-\n-    \/** Load long from local variable (wide index) *\/\n-    LLOAD_W((Classfile.WIDE << 8) | Classfile.LLOAD, 4, Kind.LOAD, TypeKind.LongType, -1),\n-\n-    \/** Load float from local variable (wide index) *\/\n-    FLOAD_W((Classfile.WIDE << 8) | Classfile.FLOAD, 4, Kind.LOAD, TypeKind.FloatType, -1),\n-\n-    \/** Load double from local variable (wide index) *\/\n-    DLOAD_W((Classfile.WIDE << 8) | Classfile.DLOAD, 4, Kind.LOAD, TypeKind.DoubleType, -1),\n-\n-    \/** Load reference from local variable (wide index) *\/\n-    ALOAD_W((Classfile.WIDE << 8) | Classfile.ALOAD, 4, Kind.LOAD, TypeKind.ReferenceType, -1),\n-\n-    \/** Store int into local variable (wide index) *\/\n-    ISTORE_W((Classfile.WIDE << 8) | Classfile.ISTORE, 4, Kind.STORE, TypeKind.IntType, -1),\n-\n-    \/** Store long into local variable (wide index) *\/\n-    LSTORE_W((Classfile.WIDE << 8) | Classfile.LSTORE, 4, Kind.STORE, TypeKind.LongType, -1),\n-\n-    \/** Store float into local variable (wide index) *\/\n-    FSTORE_W((Classfile.WIDE << 8) | Classfile.FSTORE, 4, Kind.STORE, TypeKind.FloatType, -1),\n-\n-    \/** Store double into local variable (wide index) *\/\n-    DSTORE_W((Classfile.WIDE << 8) | Classfile.DSTORE, 4, Kind.STORE, TypeKind.DoubleType, -1),\n-\n-    \/** Store reference into local variable (wide index) *\/\n-    ASTORE_W((Classfile.WIDE << 8) | Classfile.ASTORE, 4, Kind.STORE, TypeKind.ReferenceType, -1),\n-\n-    \/** Return from subroutine (wide index) *\/\n-    RET_W((Classfile.WIDE << 8) | Classfile.RET, 4, Kind.DISCONTINUED_RET),\n-\n-    \/** Increment local variable by constant (wide index) *\/\n-    IINC_W((Classfile.WIDE << 8) | Classfile.IINC, 6, Kind.INCREMENT, TypeKind.IntType, -1);\n-\n-    \/**\n-     * Kinds of opcodes.\n-     *\/\n-    public static enum Kind {\n-\n-        \/**\n-         * Load from local variable\n-         *\n-         * @see Opcode#ILOAD\n-         * @see Opcode#LLOAD\n-         * @see Opcode#FLOAD\n-         * @see Opcode#DLOAD\n-         * @see Opcode#ALOAD\n-         * @see Opcode#ILOAD_0\n-         * @see Opcode#ILOAD_1\n-         * @see Opcode#ILOAD_2\n-         * @see Opcode#ILOAD_3\n-         * @see Opcode#LLOAD_0\n-         * @see Opcode#LLOAD_1\n-         * @see Opcode#LLOAD_2\n-         * @see Opcode#LLOAD_3\n-         * @see Opcode#FLOAD_0\n-         * @see Opcode#FLOAD_1\n-         * @see Opcode#FLOAD_2\n-         * @see Opcode#FLOAD_3\n-         * @see Opcode#DLOAD_0\n-         * @see Opcode#DLOAD_1\n-         * @see Opcode#DLOAD_2\n-         * @see Opcode#DLOAD_3\n-         * @see Opcode#ALOAD_0\n-         * @see Opcode#ALOAD_1\n-         * @see Opcode#ALOAD_2\n-         * @see Opcode#ALOAD_3\n-         * @see Opcode#ILOAD_W\n-         * @see Opcode#LLOAD_W\n-         * @see Opcode#FLOAD_W\n-         * @see Opcode#DLOAD_W\n-         * @see Opcode#ALOAD_W\n-         *\/\n-        LOAD,\n-\n-        \/**\n-         * Store into local variable\n-         *\n-         * @see Opcode#ISTORE\n-         * @see Opcode#LSTORE\n-         * @see Opcode#FSTORE\n-         * @see Opcode#DSTORE\n-         * @see Opcode#ASTORE\n-         * @see Opcode#ISTORE_0\n-         * @see Opcode#ISTORE_1\n-         * @see Opcode#ISTORE_2\n-         * @see Opcode#ISTORE_3\n-         * @see Opcode#LSTORE_0\n-         * @see Opcode#LSTORE_1\n-         * @see Opcode#LSTORE_2\n-         * @see Opcode#LSTORE_3\n-         * @see Opcode#FSTORE_0\n-         * @see Opcode#FSTORE_1\n-         * @see Opcode#FSTORE_2\n-         * @see Opcode#FSTORE_3\n-         * @see Opcode#DSTORE_0\n-         * @see Opcode#DSTORE_1\n-         * @see Opcode#DSTORE_2\n-         * @see Opcode#DSTORE_3\n-         * @see Opcode#ASTORE_0\n-         * @see Opcode#ASTORE_1\n-         * @see Opcode#ASTORE_2\n-         * @see Opcode#ASTORE_3\n-         * @see Opcode#ISTORE_W\n-         * @see Opcode#LSTORE_W\n-         * @see Opcode#FSTORE_W\n-         * @see Opcode#DSTORE_W\n-         * @see Opcode#ASTORE_W\n-         *\/\n-        STORE,\n-\n-        \/**\n-         * Increment local variable\n-         *\n-         * @see Opcode#IINC\n-         * @see Opcode#IINC_W\n-         *\/\n-        INCREMENT,\n-\n-        \/**\n-         * Branch\n-         *\n-         * @see Opcode#IFEQ\n-         * @see Opcode#IFNE\n-         * @see Opcode#IFLT\n-         * @see Opcode#IFGE\n-         * @see Opcode#IFGT\n-         * @see Opcode#IFLE\n-         * @see Opcode#IF_ICMPEQ\n-         * @see Opcode#IF_ICMPNE\n-         * @see Opcode#IF_ICMPLT\n-         * @see Opcode#IF_ICMPGE\n-         * @see Opcode#IF_ICMPGT\n-         * @see Opcode#IF_ICMPLE\n-         * @see Opcode#IF_ACMPEQ\n-         * @see Opcode#IF_ACMPNE\n-         * @see Opcode#GOTO\n-         * @see Opcode#IFNULL\n-         * @see Opcode#IFNONNULL\n-         * @see Opcode#GOTO_W\n-         *\/\n-        BRANCH,\n-\n-        \/**\n-         * Access jump table by key match and jump\n-         *\n-         * @see Opcode#LOOKUPSWITCH\n-         *\/\n-        LOOKUP_SWITCH,\n-\n-        \/**\n-         * Access jump table by index and jump\n-         *\n-         * @see Opcode#TABLESWITCH\n-         *\/\n-        TABLE_SWITCH,\n-\n-        \/**\n-         * Return from method\n-         *\n-         * @see Opcode#IRETURN\n-         * @see Opcode#LRETURN\n-         * @see Opcode#FRETURN\n-         * @see Opcode#DRETURN\n-         * @see Opcode#ARETURN\n-         * @see Opcode#RETURN\n-         *\/\n-        RETURN,\n-\n-        \/**\n-         * Throw exception or error\n-         *\n-         * @see Opcode#ATHROW\n-         *\/\n-        THROW_EXCEPTION,\n-\n-        \/**\n-         * Access field\n-         *\n-         * @see Opcode#GETSTATIC\n-         * @see Opcode#PUTSTATIC\n-         * @see Opcode#GETFIELD\n-         * @see Opcode#PUTFIELD\n-         *\/\n-        FIELD_ACCESS,\n-\n-        \/**\n-         * Invoke method or constructor\n-         *\n-         * @see Opcode#INVOKEVIRTUAL\n-         * @see Opcode#INVOKESPECIAL\n-         * @see Opcode#INVOKESTATIC\n-         * @see Opcode#INVOKEINTERFACE\n-         *\/\n-        INVOKE,\n-\n-        \/**\n-         * Invoke a dynamically-computed call site\n-         *\n-         * @see Opcode#INVOKEDYNAMIC\n-         *\/\n-        INVOKE_DYNAMIC,\n-\n-        \/**\n-         * Create new object\n-         *\n-         * @see Opcode#NEW\n-         *\/\n-        NEW_OBJECT,\n-\n-        \/**\n-         * Create new array\n-         *\n-         * @see Opcode#NEWARRAY\n-         *\/\n-        NEW_PRIMITIVE_ARRAY,\n-\n-        \/**\n-         * Create new reference array\n-         *\n-         * @see Opcode#ANEWARRAY\n-         *\/\n-        NEW_REF_ARRAY,\n-\n-        \/**\n-         * Create new multidimensional array\n-         *\n-         * @see Opcode#MULTIANEWARRAY\n-         *\/\n-        NEW_MULTI_ARRAY,\n-\n-        \/**\n-         * Check whether object is of given type\n-         *\n-         * @see Opcode#CHECKCAST\n-         * @see Opcode#INSTANCEOF\n-         *\/\n-        TYPE_CHECK,\n-\n-        \/**\n-         * Load from array\n-         *\n-         * @see Opcode#IALOAD\n-         * @see Opcode#LALOAD\n-         * @see Opcode#FALOAD\n-         * @see Opcode#DALOAD\n-         * @see Opcode#AALOAD\n-         * @see Opcode#BALOAD\n-         * @see Opcode#CALOAD\n-         * @see Opcode#SALOAD\n-         *\/\n-        ARRAY_LOAD,\n-\n-        \/**\n-         * Store into array\n-         *\n-         * @see Opcode#IASTORE\n-         * @see Opcode#LASTORE\n-         * @see Opcode#FASTORE\n-         * @see Opcode#DASTORE\n-         * @see Opcode#AASTORE\n-         * @see Opcode#BASTORE\n-         * @see Opcode#CASTORE\n-         * @see Opcode#SASTORE\n-         *\/\n-        ARRAY_STORE,\n-\n-        \/**\n-         * Stack operations\n-         *\n-         * @see Opcode#POP\n-         * @see Opcode#POP2\n-         * @see Opcode#DUP\n-         * @see Opcode#DUP_X1\n-         * @see Opcode#DUP_X2\n-         * @see Opcode#DUP2\n-         * @see Opcode#DUP2_X1\n-         * @see Opcode#DUP2_X2\n-         * @see Opcode#SWAP\n-         *\/\n-        STACK,\n-\n-        \/**\n-         * Type conversions\n-         *\n-         * @see Opcode#I2L\n-         * @see Opcode#I2F\n-         * @see Opcode#I2D\n-         * @see Opcode#L2I\n-         * @see Opcode#L2F\n-         * @see Opcode#L2D\n-         * @see Opcode#F2I\n-         * @see Opcode#F2L\n-         * @see Opcode#F2D\n-         * @see Opcode#D2I\n-         * @see Opcode#D2L\n-         * @see Opcode#D2F\n-         * @see Opcode#I2B\n-         * @see Opcode#I2C\n-         * @see Opcode#I2S\n-         *\/\n-        CONVERT,\n-\n-        \/**\n-         * Operators\n-         *\n-         * @see Opcode#IADD\n-         * @see Opcode#LADD\n-         * @see Opcode#FADD\n-         * @see Opcode#DADD\n-         * @see Opcode#ISUB\n-         * @see Opcode#LSUB\n-         * @see Opcode#FSUB\n-         * @see Opcode#DSUB\n-         * @see Opcode#IMUL\n-         * @see Opcode#LMUL\n-         * @see Opcode#FMUL\n-         * @see Opcode#DMUL\n-         * @see Opcode#IDIV\n-         * @see Opcode#LDIV\n-         * @see Opcode#FDIV\n-         * @see Opcode#DDIV\n-         * @see Opcode#IREM\n-         * @see Opcode#LREM\n-         * @see Opcode#FREM\n-         * @see Opcode#DREM\n-         * @see Opcode#INEG\n-         * @see Opcode#LNEG\n-         * @see Opcode#FNEG\n-         * @see Opcode#DNEG\n-         * @see Opcode#ISHL\n-         * @see Opcode#LSHL\n-         * @see Opcode#ISHR\n-         * @see Opcode#LSHR\n-         * @see Opcode#IUSHR\n-         * @see Opcode#LUSHR\n-         * @see Opcode#IAND\n-         * @see Opcode#LAND\n-         * @see Opcode#IOR\n-         * @see Opcode#LOR\n-         * @see Opcode#IXOR\n-         * @see Opcode#LXOR\n-         * @see Opcode#LCMP\n-         * @see Opcode#FCMPL\n-         * @see Opcode#FCMPG\n-         * @see Opcode#DCMPL\n-         * @see Opcode#DCMPG\n-         * @see Opcode#ARRAYLENGTH\n-         *\/\n-        OPERATOR,\n-\n-        \/**\n-         * Constants\n-         *\n-         * @see Opcode#ACONST_NULL\n-         * @see Opcode#ICONST_M1\n-         * @see Opcode#ICONST_0\n-         * @see Opcode#ICONST_1\n-         * @see Opcode#ICONST_2\n-         * @see Opcode#ICONST_3\n-         * @see Opcode#ICONST_4\n-         * @see Opcode#ICONST_5\n-         * @see Opcode#LCONST_0\n-         * @see Opcode#LCONST_1\n-         * @see Opcode#FCONST_0\n-         * @see Opcode#FCONST_1\n-         * @see Opcode#FCONST_2\n-         * @see Opcode#DCONST_0\n-         * @see Opcode#DCONST_1\n-         * @see Opcode#BIPUSH\n-         * @see Opcode#SIPUSH\n-         * @see Opcode#LDC\n-         * @see Opcode#LDC_W\n-         * @see Opcode#LDC2_W\n-         *\/\n-        CONSTANT,\n-\n-        \/**\n-         * Monitor\n-         *\n-         * @see Opcode#MONITORENTER\n-         * @see Opcode#MONITOREXIT\n-         *\/\n-        MONITOR,\n-\n-        \/**\n-         * Do nothing\n-         *\n-         * @see Opcode#NOP\n-         *\/\n-        NOP,\n-\n-        \/**\n-         * Discontinued jump subroutine\n-         *\n-         * @see Opcode#JSR\n-         * @see Opcode#JSR_W\n-         *\/\n-        DISCONTINUED_JSR,\n-\n-        \/**\n-         * Discontinued return from subroutine\n-         *\n-         * @see Opcode#RET\n-         * @see Opcode#RET_W\n-         *\/\n-        DISCONTINUED_RET;\n-    }\n-\n-    private final int bytecode;\n-    private final int sizeIfFixed;\n-    private final Kind kind;\n-    private final TypeKind primaryTypeKind;\n-    private final TypeKind secondaryTypeKind;\n-    private final int slot;\n-    private final ConstantDesc constantValue;\n-\n-    Opcode(int bytecode, int sizeIfFixed, Kind kind) {\n-        this(bytecode, sizeIfFixed, kind, null, null, -1, null);\n-    }\n-\n-    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind typeKind) {\n-        this(bytecode, sizeIfFixed, kind, typeKind, null, -1, null);\n-    }\n-\n-    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind typeKind, int slot) {\n-        this(bytecode, sizeIfFixed, kind, typeKind, null, slot, null);\n-    }\n-\n-    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind typeKind, int slot, ConstantDesc constantValue) {\n-        this(bytecode, sizeIfFixed, kind, typeKind, null, slot, constantValue);\n-    }\n-\n-    Opcode(int bytecode, int sizeIfFixed, Kind kind, TypeKind primaryTypeKind, TypeKind secondaryTypeKind) {\n-        this(bytecode, sizeIfFixed, kind, primaryTypeKind, secondaryTypeKind, 0, null);\n-    }\n-\n-    Opcode(int bytecode,\n-           int sizeIfFixed,\n-           Kind kind,\n-           TypeKind primaryTypeKind,\n-           TypeKind secondaryTypeKind,\n-           int slot,\n-           ConstantDesc constantValue) {\n-        this.bytecode = bytecode;\n-        this.sizeIfFixed = sizeIfFixed;\n-        this.kind = kind;\n-        this.primaryTypeKind = primaryTypeKind;\n-        this.secondaryTypeKind = secondaryTypeKind;\n-        this.slot = slot;\n-        this.constantValue = constantValue;\n-    }\n-\n-    \/**\n-     * {@return bytecode}\n-     *\/\n-    public int bytecode() { return bytecode; }\n-\n-    \/**\n-     * {@return true if the instruction has extended local variable index by additional bytes}\n-     *\/\n-    public boolean isWide() { return bytecode > 255; }\n-\n-    \/**\n-     * {@return size of the instruction if fixed, or -1 otherwise}\n-     *\/\n-    public int sizeIfFixed() { return sizeIfFixed; }\n-\n-    \/**\n-     * {@return instruction kind}\n-     *\/\n-    public Kind kind() { return kind; }\n-\n-    \/**\n-     * {@return primary type kind for instructions operating with at least one type, or null otherwise}\n-     *\/\n-    public TypeKind primaryTypeKind() {\n-        return primaryTypeKind;\n-    }\n-\n-    \/**\n-     * {@return secondary type kind for instructions operating with two types, or null otherwise}\n-     *\/\n-    public TypeKind secondaryTypeKind() {\n-        return secondaryTypeKind;\n-    }\n-\n-    \/**\n-     * {@return local variable slot for instructions operating with local variable, or -1 otherwise}\n-     *\/\n-    public int slot() {\n-        return slot;\n-    }\n-\n-    \/**\n-     * {@return constant value for constant instructions, or null otherwise}\n-     *\/\n-    public ConstantDesc constantValue() {\n-        return constantValue;\n-    }\n-\n-    \/**\n-     * {@return true if the instruction represents an unconditional branch}\n-     *\/\n-    public boolean isUnconditionalBranch() {\n-        return switch (this) {\n-            case GOTO, ATHROW, GOTO_W, LOOKUPSWITCH, TABLESWITCH -> true;\n-            default -> kind() == Kind.RETURN;\n-        };\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Opcode.java","additions":0,"deletions":1158,"binary":false,"changes":1158,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.instruction.CharacterRange;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n-import jdk.internal.classfile.instruction.LabelTarget;\n-import jdk.internal.classfile.instruction.LineNumber;\n-import jdk.internal.classfile.instruction.LocalVariable;\n-import jdk.internal.classfile.instruction.LocalVariableType;\n-import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n-\n-\/**\n- * Models metadata about a {@link CodeAttribute}, such as entries in the\n- * exception table, line number table, local variable table, or the mapping\n- * between instructions and labels.  Pseudo-instructions are delivered as part\n- * of the element stream of a {@link CodeModel}.  Delivery of some\n- * pseudo-instructions can be disabled by modifying the value of classfile\n- * options (e.g., {@link Classfile.DebugElementsOption}).\n- *\/\n-public sealed interface PseudoInstruction\n-        extends CodeElement\n-        permits CharacterRange, ExceptionCatch, LabelTarget, LineNumber, LocalVariable, LocalVariableType, AbstractPseudoInstruction {\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/PseudoInstruction.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.impl.SuperclassImpl;\n-\n-\/**\n- * Models the superclass of a class.  Delivered as a {@link\n- * jdk.internal.classfile.ClassElement} when traversing a {@link ClassModel}.\n- *\/\n-public sealed interface Superclass\n-        extends ClassElement\n-        permits SuperclassImpl {\n-\n-    \/** {@return the superclass} *\/\n-    ClassEntry superclassEntry();\n-\n-    \/**\n-     * {@return a {@linkplain Superclass} element}\n-     * @param superclassEntry the superclass\n-     *\/\n-    static Superclass of(ClassEntry superclassEntry) {\n-        return new SuperclassImpl(superclassEntry);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Superclass.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,812 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.List;\n-\n-import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.TargetInfoImpl;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-import static jdk.internal.classfile.Classfile.TAT_CAST;\n-import static jdk.internal.classfile.Classfile.TAT_CLASS_EXTENDS;\n-import static jdk.internal.classfile.Classfile.TAT_CLASS_TYPE_PARAMETER;\n-import static jdk.internal.classfile.Classfile.TAT_CLASS_TYPE_PARAMETER_BOUND;\n-import static jdk.internal.classfile.Classfile.TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT;\n-import static jdk.internal.classfile.Classfile.TAT_CONSTRUCTOR_REFERENCE;\n-import static jdk.internal.classfile.Classfile.TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT;\n-import static jdk.internal.classfile.Classfile.TAT_EXCEPTION_PARAMETER;\n-import static jdk.internal.classfile.Classfile.TAT_FIELD;\n-import static jdk.internal.classfile.Classfile.TAT_INSTANCEOF;\n-import static jdk.internal.classfile.Classfile.TAT_LOCAL_VARIABLE;\n-import static jdk.internal.classfile.Classfile.TAT_METHOD_FORMAL_PARAMETER;\n-import static jdk.internal.classfile.Classfile.TAT_METHOD_INVOCATION_TYPE_ARGUMENT;\n-import static jdk.internal.classfile.Classfile.TAT_METHOD_RECEIVER;\n-import static jdk.internal.classfile.Classfile.TAT_METHOD_REFERENCE;\n-import static jdk.internal.classfile.Classfile.TAT_METHOD_REFERENCE_TYPE_ARGUMENT;\n-import static jdk.internal.classfile.Classfile.TAT_METHOD_RETURN;\n-import static jdk.internal.classfile.Classfile.TAT_METHOD_TYPE_PARAMETER;\n-import static jdk.internal.classfile.Classfile.TAT_METHOD_TYPE_PARAMETER_BOUND;\n-import static jdk.internal.classfile.Classfile.TAT_NEW;\n-import static jdk.internal.classfile.Classfile.TAT_RESOURCE_VARIABLE;\n-import static jdk.internal.classfile.Classfile.TAT_THROWS;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-\n-\/**\n- * Models an annotation on a type use, as defined in {@jvms 4.7.19} and {@jvms 4.7.20}.\n- *\n- * @see RuntimeVisibleTypeAnnotationsAttribute\n- * @see RuntimeInvisibleTypeAnnotationsAttribute\n- *\/\n-public sealed interface TypeAnnotation\n-        extends Annotation\n-        permits UnboundAttribute.UnboundTypeAnnotation {\n-\n-    \/**\n-     * The kind of target on which the annotation appears, as defined in {@jvms 4.7.20.1}.\n-     *\/\n-    public enum TargetType {\n-        \/** For annotations on a class type parameter declaration. *\/\n-        CLASS_TYPE_PARAMETER(TAT_CLASS_TYPE_PARAMETER, 1),\n-\n-        \/** For annotations on a method type parameter declaration. *\/\n-        METHOD_TYPE_PARAMETER(TAT_METHOD_TYPE_PARAMETER, 1),\n-\n-        \/** For annotations on the type of an \"extends\" or \"implements\" clause. *\/\n-        CLASS_EXTENDS(TAT_CLASS_EXTENDS, 2),\n-\n-        \/** For annotations on a bound of a type parameter of a class. *\/\n-        CLASS_TYPE_PARAMETER_BOUND(TAT_CLASS_TYPE_PARAMETER_BOUND, 2),\n-\n-        \/** For annotations on a bound of a type parameter of a method. *\/\n-        METHOD_TYPE_PARAMETER_BOUND(TAT_METHOD_TYPE_PARAMETER_BOUND, 2),\n-\n-        \/** For annotations on a field. *\/\n-        FIELD(TAT_FIELD, 0),\n-\n-        \/** For annotations on a method return type. *\/\n-        METHOD_RETURN(TAT_METHOD_RETURN, 0),\n-\n-        \/** For annotations on the method receiver. *\/\n-        METHOD_RECEIVER(TAT_METHOD_RECEIVER, 0),\n-\n-        \/** For annotations on a method parameter. *\/\n-        METHOD_FORMAL_PARAMETER(TAT_METHOD_FORMAL_PARAMETER, 1),\n-\n-        \/** For annotations on a throws clause in a method declaration. *\/\n-        THROWS(TAT_THROWS, 2),\n-\n-        \/** For annotations on a local variable. *\/\n-        LOCAL_VARIABLE(TAT_LOCAL_VARIABLE, -1),\n-\n-        \/** For annotations on a resource variable. *\/\n-        RESOURCE_VARIABLE(TAT_RESOURCE_VARIABLE, -1),\n-\n-        \/** For annotations on an exception parameter. *\/\n-        EXCEPTION_PARAMETER(TAT_EXCEPTION_PARAMETER, 2),\n-\n-        \/** For annotations on a type test. *\/\n-        INSTANCEOF(TAT_INSTANCEOF, 2),\n-\n-        \/** For annotations on an object creation expression. *\/\n-        NEW(TAT_NEW, 2),\n-\n-        \/** For annotations on a constructor reference receiver. *\/\n-        CONSTRUCTOR_REFERENCE(TAT_CONSTRUCTOR_REFERENCE, 2),\n-\n-        \/** For annotations on a method reference receiver. *\/\n-        METHOD_REFERENCE(TAT_METHOD_REFERENCE, 2),\n-\n-        \/** For annotations on a typecast. *\/\n-        CAST(TAT_CAST, 3),\n-\n-        \/** For annotations on a type argument of an object creation expression. *\/\n-        CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT(TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT, 3),\n-\n-        \/** For annotations on a type argument of a method call. *\/\n-        METHOD_INVOCATION_TYPE_ARGUMENT(TAT_METHOD_INVOCATION_TYPE_ARGUMENT, 3),\n-\n-        \/** For annotations on a type argument of a constructor reference. *\/\n-        CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT(TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT, 3),\n-\n-        \/** For annotations on a type argument of a method reference. *\/\n-        METHOD_REFERENCE_TYPE_ARGUMENT(TAT_METHOD_REFERENCE_TYPE_ARGUMENT, 3);\n-\n-        private final int targetTypeValue;\n-        private final int sizeIfFixed;\n-\n-        private TargetType(int targetTypeValue, int sizeIfFixed) {\n-            this.targetTypeValue = targetTypeValue;\n-            this.sizeIfFixed = sizeIfFixed;\n-        }\n-\n-        \/**\n-         * {@return the target type value}\n-         *\/\n-        public int targetTypeValue() {\n-            return targetTypeValue;\n-        }\n-\n-        \/**\n-         * {@return the size of the target type if fixed or -1 if variable}\n-         *\/\n-        public int sizeIfFixed() {\n-            return sizeIfFixed;\n-        }\n-    }\n-\n-    \/**\n-     * {@return information describing precisely which type in a declaration or expression\n-     * is annotated}\n-     *\/\n-    TargetInfo targetInfo();\n-\n-    \/**\n-     * {@return which part of the type indicated by {@link #targetInfo()} is annotated}\n-     *\/\n-    List<TypePathComponent> targetPath();\n-\n-    \/**\n-     * {@return a type annotation}\n-     * @param targetInfo which type in a declaration or expression is annotated\n-     * @param targetPath which part of the type is annotated\n-     * @param annotationClassUtf8Entry the annotation class\n-     * @param annotationElements the annotation elements\n-     *\/\n-    static TypeAnnotation of(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n-                             Utf8Entry annotationClassUtf8Entry,\n-                             List<AnnotationElement> annotationElements) {\n-        return new UnboundAttribute.UnboundTypeAnnotation(targetInfo, targetPath,\n-                annotationClassUtf8Entry, annotationElements);\n-    }\n-\n-    \/**\n-     * {@return a type annotation}\n-     * @param targetInfo which type in a declaration or expression is annotated\n-     * @param targetPath which part of the type is annotated\n-     * @param annotationClass the annotation class\n-     * @param annotationElements the annotation elements\n-     *\/\n-    static TypeAnnotation of(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n-                             ClassDesc annotationClass,\n-                             AnnotationElement... annotationElements) {\n-        return of(targetInfo, targetPath, annotationClass, List.of(annotationElements));\n-    }\n-\n-    \/**\n-     * {@return a type annotation}\n-     * @param targetInfo which type in a declaration or expression is annotated\n-     * @param targetPath which part of the type is annotated\n-     * @param annotationClass the annotation class\n-     * @param annotationElements the annotation elements\n-     *\/\n-    static TypeAnnotation of(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n-                             ClassDesc annotationClass,\n-                             List<AnnotationElement> annotationElements) {\n-        return of(targetInfo, targetPath,\n-                TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), annotationElements);\n-    }\n-\n-    \/**\n-     * {@return a type annotation}\n-     * @param targetInfo which type in a declaration or expression is annotated\n-     * @param targetPath which part of the type is annotated\n-     * @param annotationClassUtf8Entry the annotation class\n-     * @param annotationElements the annotation elements\n-     *\/\n-    static TypeAnnotation of(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n-                             Utf8Entry annotationClassUtf8Entry,\n-                             AnnotationElement... annotationElements) {\n-        return of(targetInfo, targetPath, annotationClassUtf8Entry, List.of(annotationElements));\n-    }\n-\n-    \/**\n-     * Specifies which type in a declaration or expression is being annotated.\n-     *\/\n-    sealed interface TargetInfo {\n-\n-        \/**\n-         * {@return the type of the target}\n-         *\/\n-        TargetType targetType();\n-\n-        \/**\n-         * {@return the size of the target info}\n-         *\/\n-        default int size() {\n-            return targetType().sizeIfFixed;\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on a class or method type parameter declaration}\n-         * @param targetType {@link TargetType#CLASS_TYPE_PARAMETER} or {@link TargetType#METHOD_TYPE_PARAMETER}\n-         * @param typeParameterIndex specifies which type parameter declaration is annotated\n-         *\/\n-        static TypeParameterTarget ofTypeParameter(TargetType targetType, int typeParameterIndex) {\n-            return new TargetInfoImpl.TypeParameterTargetImpl(targetType, typeParameterIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on a class type parameter declaration}\n-         * @param typeParameterIndex specifies which type parameter declaration is annotated\n-         *\/\n-        static TypeParameterTarget ofClassTypeParameter(int typeParameterIndex) {\n-            return ofTypeParameter(TargetType.CLASS_TYPE_PARAMETER, typeParameterIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on a method type parameter declaration}\n-         * @param typeParameterIndex specifies which type parameter declaration is annotated\n-         *\/\n-        static TypeParameterTarget ofMethodTypeParameter(int typeParameterIndex) {\n-            return ofTypeParameter(TargetType.METHOD_TYPE_PARAMETER, typeParameterIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the type of an \"extends\" or \"implements\" clause}\n-         * @param supertypeIndex the index into the interfaces array or 65535 to indicate it is the superclass\n-         *\/\n-        static SupertypeTarget ofClassExtends(int supertypeIndex) {\n-            return new TargetInfoImpl.SupertypeTargetImpl(supertypeIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the i'th bound of the j'th type parameter declaration of\n-         * a generic class, interface, method, or constructor}\n-         * @param targetType {@link TargetType#CLASS_TYPE_PARAMETER_BOUND} or {@link TargetType#METHOD_TYPE_PARAMETER_BOUND}\n-         * @param typeParameterIndex specifies which type parameter declaration is annotated\n-         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n-         *\/\n-        static TypeParameterBoundTarget ofTypeParameterBound(TargetType targetType, int typeParameterIndex, int boundIndex) {\n-            return new TargetInfoImpl.TypeParameterBoundTargetImpl(targetType, typeParameterIndex, boundIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the i'th bound of the j'th type parameter declaration of\n-         * a generic class, or interface}\n-         * @param typeParameterIndex specifies which type parameter declaration is annotated\n-         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n-         *\/\n-        static TypeParameterBoundTarget ofClassTypeParameterBound(int typeParameterIndex, int boundIndex) {\n-            return ofTypeParameterBound(TargetType.CLASS_TYPE_PARAMETER_BOUND, typeParameterIndex, boundIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the i'th bound of the j'th type parameter declaration of\n-         * a generic method, or constructor}\n-         * @param typeParameterIndex specifies which type parameter declaration is annotated\n-         * @param boundIndex specifies which bound of the type parameter declaration is annotated\n-         *\/\n-        static TypeParameterBoundTarget ofMethodTypeParameterBound(int typeParameterIndex, int boundIndex) {\n-            return ofTypeParameterBound(TargetType.METHOD_TYPE_PARAMETER_BOUND, typeParameterIndex, boundIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations}\n-         * @param targetType {@link TargetType#FIELD}, {@link TargetType#METHOD_RETURN} or {@link TargetType#METHOD_RECEIVER}\n-         *\/\n-        static EmptyTarget of(TargetType targetType) {\n-            return new TargetInfoImpl.EmptyTargetImpl(targetType);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the type in a field or record declaration}\n-         *\/\n-        static EmptyTarget ofField() {\n-            return of(TargetType.FIELD);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the return type of a method or a newly constructed object}\n-         *\/\n-        static EmptyTarget ofMethodReturn() {\n-            return of(TargetType.METHOD_RETURN);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the receiver type of a method or constructor}\n-         *\/\n-        static EmptyTarget ofMethodReceiver() {\n-            return of(TargetType.METHOD_RECEIVER);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the type in a formal parameter declaration of a method,\n-         * constructor, or lambda expression}\n-         * @param formalParameterIndex specifies which formal parameter declaration has an annotated type\n-         *\/\n-        static FormalParameterTarget ofMethodFormalParameter(int formalParameterIndex) {\n-            return new TargetInfoImpl.FormalParameterTargetImpl(formalParameterIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the i'th type in the throws clause of a method or\n-         * constructor declaration}\n-         * @param throwsTargetIndex the index into the exception table of the Exceptions attribute of the method\n-         *\/\n-        static ThrowsTarget ofThrows(int throwsTargetIndex) {\n-            return new TargetInfoImpl.ThrowsTargetImpl(throwsTargetIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the type in a local variable declaration,\n-         * including a variable declared as a resource in a try-with-resources statement}\n-         * @param targetType {@link TargetType#LOCAL_VARIABLE} or {@link TargetType#RESOURCE_VARIABLE}\n-         * @param table the list of local variable targets\n-         *\/\n-        static LocalVarTarget ofVariable(TargetType targetType, List<LocalVarTargetInfo> table) {\n-            return new TargetInfoImpl.LocalVarTargetImpl(targetType, table);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the type in a local variable declaration}\n-         * @param table the list of local variable targets\n-         *\/\n-        static LocalVarTarget ofLocalVariable(List<LocalVarTargetInfo> table) {\n-            return ofVariable(TargetType.LOCAL_VARIABLE, table);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the type in a local variable declared\n-         * as a resource in a try-with-resources statement}\n-         * @param table the list of local variable targets\n-         *\/\n-        static LocalVarTarget ofResourceVariable(List<LocalVarTargetInfo> table) {\n-            return ofVariable(TargetType.RESOURCE_VARIABLE, table);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the i'th type in an exception parameter declaration}\n-         * @param exceptionTableIndex the index into the exception table of the Code attribute\n-         *\/\n-        static CatchTarget ofExceptionParameter(int exceptionTableIndex) {\n-            return new TargetInfoImpl.CatchTargetImpl(exceptionTableIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the type in an instanceof expression or a new expression,\n-         * or the type before the :: in a method reference expression}\n-         * {@param targetType {@link TargetType#INSTANCEOF}, {@link TargetType#NEW},\n-         *                    {@link TargetType#CONSTRUCTOR_REFERENCE},\n-         *                    or {@link TargetType#METHOD_REFERENCE}}\n-         * @param target the code label corresponding to the instruction\n-         *\/\n-        static OffsetTarget ofOffset(TargetType targetType, Label target) {\n-            return new TargetInfoImpl.OffsetTargetImpl(targetType, target);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the type in an instanceof expression}\n-         * @param target the code label corresponding to the instruction\n-         *\/\n-        static OffsetTarget ofInstanceofExpr(Label target) {\n-            return ofOffset(TargetType.INSTANCEOF, target);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the type in a new expression}\n-         * @param target the code label corresponding to the instruction\n-         *\/\n-        static OffsetTarget ofNewExpr(Label target) {\n-            return ofOffset(TargetType.NEW, target);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the type before the :: in a constructor reference expression}\n-         * @param target the code label corresponding to the instruction\n-         *\/\n-        static OffsetTarget ofConstructorReference(Label target) {\n-            return ofOffset(TargetType.CONSTRUCTOR_REFERENCE, target);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the type before the :: in a method reference expression}\n-         * @param target the code label corresponding to the instruction\n-         *\/\n-        static OffsetTarget ofMethodReference(Label target) {\n-            return ofOffset(TargetType.METHOD_REFERENCE, target);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the i'th type in a cast expression,\n-         * or on the i'th type argument in the explicit type argument list for any of the following:\n-         * a new expression, an explicit constructor invocation statement, a method invocation expression,\n-         * or a method reference expression}\n-         * {@param targetType {@link TargetType#CAST}, {@link TargetType#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT},\n-         *                    {@link TargetType#METHOD_INVOCATION_TYPE_ARGUMENT},\n-         *                    {@link TargetType#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT},\n-         *                    or {@link TargetType#METHOD_REFERENCE_TYPE_ARGUMENT}}\n-         * @param target the code label corresponding to the instruction\n-         * @param typeArgumentIndex specifies which type in the cast operator or argument is annotated\n-         *\/\n-        static TypeArgumentTarget ofTypeArgument(TargetType targetType, Label target, int typeArgumentIndex) {\n-            return new TargetInfoImpl.TypeArgumentTargetImpl(targetType, target, typeArgumentIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the i'th type in a cast expression}\n-         * @param target the code label corresponding to the instruction\n-         * @param typeArgumentIndex specifies which type in the cast operator is annotated\n-         *\/\n-        static TypeArgumentTarget ofCastExpr(Label target, int typeArgumentIndex) {\n-            return ofTypeArgument(TargetType.CAST, target, typeArgumentIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the i'th type argument in the explicit type argument list for\n-         * an explicit constructor invocation statement}\n-         * @param target the code label corresponding to the instruction\n-         * @param typeArgumentIndex specifies which type in the argument is annotated\n-         *\/\n-        static TypeArgumentTarget ofConstructorInvocationTypeArgument(Label target, int typeArgumentIndex) {\n-            return ofTypeArgument(TargetType.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT, target, typeArgumentIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the i'th type argument in the explicit type argument list for\n-         * a method invocation expression}\n-         * @param target the code label corresponding to the instruction\n-         * @param typeArgumentIndex specifies which type in the argument is annotated\n-         *\/\n-        static TypeArgumentTarget ofMethodInvocationTypeArgument(Label target, int typeArgumentIndex) {\n-            return ofTypeArgument(TargetType.METHOD_INVOCATION_TYPE_ARGUMENT, target, typeArgumentIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the i'th type argument in the explicit type argument list for\n-         * a new expression}\n-         * @param target the code label corresponding to the instruction\n-         * @param typeArgumentIndex specifies which type in the argument is annotated\n-         *\/\n-        static TypeArgumentTarget ofConstructorReferenceTypeArgument(Label target, int typeArgumentIndex) {\n-            return ofTypeArgument(TargetType.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT, target, typeArgumentIndex);\n-        }\n-\n-        \/**\n-         * {@return a target for annotations on the i'th type argument in the explicit type argument list for\n-         * a method reference expression}\n-         * @param target the code label corresponding to the instruction\n-         * @param typeArgumentIndex specifies which type in the argument is annotated\n-         *\/\n-        static TypeArgumentTarget ofMethodReferenceTypeArgument(Label target, int typeArgumentIndex) {\n-            return ofTypeArgument(TargetType.METHOD_REFERENCE_TYPE_ARGUMENT, target, typeArgumentIndex);\n-        }\n-    }\n-\n-    \/**\n-     * Indicates that an annotation appears on the declaration of the i'th type\n-     * parameter of a generic class, generic interface, generic method, or\n-     * generic constructor.\n-     *\/\n-    sealed interface TypeParameterTarget extends TargetInfo\n-            permits TargetInfoImpl.TypeParameterTargetImpl {\n-\n-        \/**\n-         * JVMS: The value of the type_parameter_index item specifies which type parameter declaration is annotated.\n-         * A type_parameter_index value of 0 specifies the first type parameter declaration.\n-         *\n-         * @return the index into the type parameters\n-         *\/\n-        int typeParameterIndex();\n-    }\n-\n-    \/**\n-     * Indicates that an annotation appears on a type in the extends or implements\n-     * clause of a class or interface declaration.\n-     *\/\n-    sealed interface SupertypeTarget extends TargetInfo\n-            permits TargetInfoImpl.SupertypeTargetImpl {\n-\n-        \/**\n-         * JVMS: A supertype_index value of 65535 specifies that the annotation appears on the superclass in an extends\n-         * clause of a class declaration.\n-         *\n-         * Any other supertype_index value is an index into the interfaces array of the enclosing ClassFile structure,\n-         * and specifies that the annotation appears on that superinterface in either the implements clause of a class\n-         * declaration or the extends clause of an interface declaration.\n-         *\n-         * @return the index into the interfaces array or 65535 to indicate it is the superclass\n-         *\/\n-        int supertypeIndex();\n-    }\n-\n-    \/**\n-     * Indicates that an annotation appears on the i'th bound of the j'th\n-     * type parameter declaration of a generic class, interface, method, or\n-     * constructor.\n-     *\/\n-    sealed interface TypeParameterBoundTarget extends TargetInfo\n-            permits TargetInfoImpl.TypeParameterBoundTargetImpl {\n-\n-        \/**\n-         * Which type parameter declaration has an annotated bound.\n-         *\n-         * @return the zero-origin index into the type parameters\n-         *\/\n-        int typeParameterIndex();\n-\n-        \/**\n-         * Which bound of the type parameter declaration is annotated.\n-         *\n-         * @return the zero-origin index into bounds on the type parameter\n-         *\/\n-        int boundIndex();\n-    }\n-\n-    \/**\n-     * Indicates that an annotation appears on either the type in a field\n-     * declaration, the return type of a method, the type of a newly constructed\n-     * object, or the receiver type of a method or constructor.\n-     *\/\n-    sealed interface EmptyTarget extends TargetInfo\n-            permits TargetInfoImpl.EmptyTargetImpl {\n-    }\n-\n-    \/**\n-     * Indicates that an annotation appears on the type in a formal parameter\n-     * declaration of a method, constructor, or lambda expression.\n-     *\/\n-    sealed interface FormalParameterTarget extends TargetInfo\n-            permits TargetInfoImpl.FormalParameterTargetImpl {\n-\n-        \/**\n-         * Which formal parameter declaration has an annotated type.\n-         *\n-         * @return the index into the formal parameter declarations, in the order\n-         * declared in the source code\n-         *\/\n-        int formalParameterIndex();\n-    }\n-\n-    \/**\n-     * Indicates that an annotation appears on the i'th type in the throws\n-     * clause of a method or constructor declaration.\n-     *\/\n-    sealed interface ThrowsTarget extends TargetInfo\n-            permits TargetInfoImpl.ThrowsTargetImpl {\n-\n-        \/**\n-         * The index into the exception_index_table array of the\n-         * Exceptions attribute of the method_info structure enclosing the\n-         * RuntimeVisibleTypeAnnotations attribute.\n-         *\n-         * @return the index into the list jdk.internal.classfile.attribute.ExceptionsAttribute.exceptions()\n-         *\/\n-        int throwsTargetIndex();\n-    }\n-\n-    \/**\n-     * Indicates that an annotation appears on the type in a local variable declaration,\n-     * including a variable declared as a resource in a try-with-resources statement.\n-     *\/\n-    sealed interface LocalVarTarget extends TargetInfo\n-            permits TargetInfoImpl.LocalVarTargetImpl {\n-\n-        \/**\n-         * @return the table of local variable location\/indices.\n-         *\/\n-        List<LocalVarTargetInfo> table();\n-    }\n-\n-    \/**\n-     * Indicates a range of code array offsets within which a local variable\n-     * has a value, and the index into the local variable array of the current\n-     * frame at which that local variable can be found.\n-     *\/\n-    sealed interface LocalVarTargetInfo\n-            permits TargetInfoImpl.LocalVarTargetInfoImpl {\n-\n-        \/**\n-         * The given local variable has a value at indices into the code array in the interval\n-         * [start_pc, start_pc + length), that is, between start_pc inclusive and start_pc + length exclusive.\n-         *\n-         * @return the start of the bytecode section\n-         *\/\n-        Label startLabel();\n-\n-\n-        \/**\n-         * The given local variable has a value at indices into the code array in the interval\n-         * [start_pc, start_pc + length), that is, between start_pc inclusive and start_pc + length exclusive.\n-         *\n-         * @return the end of the bytecode section\n-         *\/\n-        Label endLabel();\n-\n-        \/**\n-         * The given local variable must be at index in the local variable array of the current frame.\n-         *\n-         * If the local variable at index is of type double or long, it occupies both index and index + 1.\n-         *\n-         * @return the index into the local variables\n-         *\/\n-        int index();\n-\n-        \/**\n-         * {@return local variable target info}\n-         * @param startLabel the code label indicating start of an interval where variable has value\n-         * @param endLabel the code label indicating start of an interval where variable has value\n-         * @param index index into the local variables\n-         *\/\n-        static LocalVarTargetInfo of(Label startLabel, Label endLabel, int index) {\n-            return new TargetInfoImpl.LocalVarTargetInfoImpl(startLabel, endLabel, index);\n-        }\n-    }\n-\n-    \/**\n-     * Indicates that an annotation appears on the i'th type in an exception parameter\n-     * declaration.\n-     *\/\n-    sealed interface CatchTarget extends TargetInfo\n-            permits TargetInfoImpl.CatchTargetImpl {\n-\n-        \/**\n-         * The index into the exception_table array of the Code\n-         * attribute enclosing the RuntimeVisibleTypeAnnotations attribute.\n-         *\n-         * @return the index into the exception table\n-         *\/\n-        int exceptionTableIndex();\n-    }\n-\n-    \/**\n-     * Indicates that an annotation appears on either the type in an instanceof expression\n-     * or a new expression, or the type before the :: in a method reference expression.\n-     *\/\n-    sealed interface OffsetTarget extends TargetInfo\n-            permits TargetInfoImpl.OffsetTargetImpl {\n-\n-        \/**\n-         * The code array offset of either the bytecode instruction\n-         * corresponding to the instanceof expression, the new bytecode instruction corresponding to the new\n-         * expression, or the bytecode instruction corresponding to the method reference expression.\n-         *\n-         * @return the code label corresponding to the instruction\n-         *\/\n-        Label target();\n-    }\n-\n-    \/**\n-     * Indicates that an annotation appears either on the i'th type in a cast\n-     * expression, or on the i'th type argument in the explicit type argument list for any of the following: a new\n-     * expression, an explicit constructor invocation statement, a method invocation expression, or a method reference\n-     * expression.\n-     *\/\n-    sealed interface TypeArgumentTarget extends TargetInfo\n-            permits TargetInfoImpl.TypeArgumentTargetImpl {\n-\n-        \/**\n-         * The code array offset of either the bytecode instruction\n-         * corresponding to the cast expression, the new bytecode instruction corresponding to the new expression, the\n-         * bytecode instruction corresponding to the explicit constructor invocation statement, the bytecode\n-         * instruction corresponding to the method invocation expression, or the bytecode instruction corresponding to\n-         * the method reference expression.\n-         *\n-         * @return the code label corresponding to the instruction\n-         *\/\n-        Label target();\n-\n-        \/**\n-         * For a cast expression, the value of the type_argument_index item specifies which type in the cast\n-         * operator is annotated. A type_argument_index value of 0 specifies the first (or only) type in the cast\n-         * operator.\n-         *\n-         * The possibility of more than one type in a cast expression arises from a cast to an intersection type.\n-         *\n-         * For an explicit type argument list, the value of the type_argument_index item specifies which type argument\n-         * is annotated. A type_argument_index value of 0 specifies the first type argument.\n-         *\n-         * @return the index into the type arguments\n-         *\/\n-        int typeArgumentIndex();\n-    }\n-\n-    \/**\n-     * JVMS: Type_path structure identifies which part of the type is annotated,\n-     * as defined in {@jvms 4.7.20.2}\n-     *\/\n-    sealed interface TypePathComponent\n-            permits UnboundAttribute.TypePathComponentImpl {\n-\n-        \/**\n-         * Type path kind, as defined in {@jvms 4.7.20.2}\n-         *\/\n-        public enum Kind {\n-\n-            \/** Annotation is deeper in an array type *\/\n-            ARRAY(0),\n-\n-            \/** Annotation is deeper in a nested type *\/\n-            INNER_TYPE(1),\n-\n-            \/** Annotation is on the bound of a wildcard type argument of a parameterized type *\/\n-            WILDCARD(2),\n-\n-            \/** Annotation is on a type argument of a parameterized type *\/\n-            TYPE_ARGUMENT(3);\n-\n-            private final int tag;\n-\n-            private Kind(int tag) {\n-                this.tag = tag;\n-            }\n-\n-            \/**\n-             * {@return the type path kind value}\n-             *\/\n-            public int tag() {\n-                return tag;\n-            }\n-        }\n-\n-        \/** static instance for annotation is deeper in an array type *\/\n-        TypePathComponent ARRAY = new UnboundAttribute.TypePathComponentImpl(Kind.ARRAY, 0);\n-\n-        \/** static instance for annotation is deeper in a nested type *\/\n-        TypePathComponent INNER_TYPE = new UnboundAttribute.TypePathComponentImpl(Kind.INNER_TYPE, 0);\n-\n-        \/** static instance for annotation is on the bound of a wildcard type argument of a parameterized type *\/\n-        TypePathComponent WILDCARD = new UnboundAttribute.TypePathComponentImpl(Kind.WILDCARD, 0);\n-\n-\n-        \/**\n-         * The type path kind items from JVMS Table 4.7.20.2-A.\n-         *\n-         * @return the kind of path element\n-         *\/\n-        Kind typePathKind();\n-\n-        \/**\n-         * JVMS: type_argument_index\n-         * If the value of the type_path_kind item is 0, 1, or 2, then the value of the type_argument_index item is 0.\n-         *\n-         * If the value of the type_path_kind item is 3, then the value of the type_argument_index item specifies which\n-         * type argument of a parameterized type is annotated, where 0 indicates the first type argument of a\n-         * parameterized type.\n-         *\n-         * @return the index within the type component\n-         *\/\n-        int typeArgumentIndex();\n-\n-        \/**\n-         * {@return type path component of an annotation}\n-         * @param typePathKind the kind of path element\n-         * @param typeArgumentIndex the type argument index\n-         *\/\n-        static TypePathComponent of(Kind typePathKind, int typeArgumentIndex) {\n-\n-            return switch (typePathKind) {\n-                case ARRAY -> ARRAY;\n-                case INNER_TYPE -> INNER_TYPE;\n-                case WILDCARD -> WILDCARD;\n-                case TYPE_ARGUMENT -> new UnboundAttribute.TypePathComponentImpl(Kind.TYPE_ARGUMENT, typeArgumentIndex);\n-            };\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/TypeAnnotation.java","additions":0,"deletions":812,"binary":false,"changes":812,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile;\n-\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n-import jdk.internal.classfile.impl.DirectFieldBuilder;\n-import jdk.internal.classfile.impl.DirectMethodBuilder;\n-\n-\/**\n- * A classfile element that can encode itself as a stream of bytes in the\n- * encoding expected by the classfile format.\n- *\n- * @param <T> the type of the entity\n- *\/\n-public sealed interface WritableElement<T> extends ClassfileElement\n-        permits Annotation, AnnotationElement, AnnotationValue, Attribute,\n-                PoolEntry, BootstrapMethodEntry, FieldModel, MethodModel,\n-                ConstantPoolBuilder, DirectFieldBuilder, DirectMethodBuilder {\n-    \/**\n-     * Writes the element to the specified writer\n-     *\n-     * @param buf the writer\n-     *\/\n-    void writeTo(BufWriter buf);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/WritableElement.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.AnnotationValue;\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code AnnotationDefault} attribute {@jvms 4.7.22}, which can\n- * appear on methods of annotation types, and records the default value\n- * {@jls 9.6.2} for the element corresponding to this method.  Delivered as a\n- * {@link MethodElement} when traversing the elements of a {@link MethodModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface AnnotationDefaultAttribute\n-        extends Attribute<AnnotationDefaultAttribute>, MethodElement\n-        permits BoundAttribute.BoundAnnotationDefaultAttr,\n-                UnboundAttribute.UnboundAnnotationDefaultAttribute {\n-\n-    \/**\n-     * {@return the default value of the annotation type element represented by\n-     * this method}\n-     *\/\n-    AnnotationValue defaultValue();\n-\n-    \/**\n-     * {@return an {@code AnnotationDefault} attribute}\n-     * @param annotationDefault the default value of the annotation type element\n-     *\/\n-    static AnnotationDefaultAttribute of(AnnotationValue annotationDefault) {\n-        return new UnboundAttribute.UnboundAnnotationDefaultAttribute(annotationDefault);\n-    }\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/AnnotationDefaultAttribute.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.BootstrapMethodEntry;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code BootstrapMethods} attribute {@jvms 4.7.23}, which serves as\n- * an extension to the constant pool of a classfile.  Elements of the bootstrap\n- * method table are accessed through {@link ConstantPool}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface BootstrapMethodsAttribute\n-        extends Attribute<BootstrapMethodsAttribute>\n-        permits BoundAttribute.BoundBootstrapMethodsAttribute,\n-                UnboundAttribute.EmptyBootstrapAttribute {\n-\n-    \/**\n-     * {@return the elements of the bootstrap method table}\n-     *\/\n-    List<BootstrapMethodEntry> bootstrapMethods();\n-\n-    \/**\n-     * {@return the size of the bootstrap methods table}.  Calling this method\n-     * does not necessarily inflate the entire table.\n-     *\/\n-    int bootstrapMethodsSize();\n-\n-    \/\/ No factories; BMA is generated as part of constant pool\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/BootstrapMethodsAttribute.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,155 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models a single character range in the {@link CharacterRangeTableAttribute}.\n- *\/\n-public sealed interface CharacterRangeInfo\n-        permits UnboundAttribute.UnboundCharacterRangeInfo {\n-\n-    \/**\n-     * {@return the start of the character range region (inclusive)}  This is\n-     * the index into the code array at which the code for this character range\n-     * begins.\n-     *\/\n-    int startPc();\n-\n-    \/**\n-     * {@return the end of the character range region (exclusive)}  This is the\n-     * index into the code array after which the code for this character range\n-     * ends.\n-     *\/\n-    int endPc();\n-\n-    \/**\n-     * {@return the encoded start of the character range region (inclusive)}\n-     * The value is constructed from the line_number\/column_number pair as given\n-     * by {@code line_number << 10 + column_number}, where the source file is\n-     * viewed as an array of (possibly multi-byte) characters.\n-     *\/\n-    int characterRangeStart();\n-\n-    \/**\n-     * {@return the encoded end of the character range region (exclusive)}.\n-     * The value is constructed from the line_number\/column_number pair as given\n-     * by {@code line_number << 10 + column_number}, where the source file is\n-     * viewed as an array of (possibly multi-byte) characters.\n-     *\/\n-    int characterRangeEnd();\n-\n-    \/**\n-     * The value of the flags item describes the kind of range. Multiple flags\n-     * may be set within flags.\n-     * <ul>\n-     * <li>{@link jdk.internal.classfile.Classfile#CRT_STATEMENT} Range is a Statement\n-     * (except ExpressionStatement), StatementExpression {@jls 14.8}, as well as each\n-     * VariableDeclaratorId = VariableInitializer of\n-     * LocalVariableDeclarationStatement {@jls 14.4} or FieldDeclaration {@jls 8.3} in the\n-     * grammar.\n-     * <li>{@link jdk.internal.classfile.Classfile#CRT_BLOCK} Range is a Block in the\n-     * grammar.\n-     * <li>{@link jdk.internal.classfile.Classfile#CRT_ASSIGNMENT} Range is an assignment\n-     * expression - Expression1 AssignmentOperator Expression1 in the grammar as\n-     * well as increment and decrement expressions (both prefix and postfix).\n-     * <li>{@link jdk.internal.classfile.Classfile#CRT_FLOW_CONTROLLER} An expression\n-     * whose value will effect control flow. {@code Flowcon} in the following:\n-     * <pre>\n-     * if ( Flowcon ) Statement [else Statement]\n-     * for ( ForInitOpt ; [Flowcon] ; ForUpdateOpt ) Statement\n-     * while ( Flowcon ) Statement\n-     * do Statement while ( Flowcon ) ;\n-     * switch ( Flowcon ) { SwitchBlockStatementGroups }\n-     * Flowcon || Expression3\n-     * Flowcon &amp;&amp; Expression3\n-     * Flowcon ? Expression : Expression1\n-     * <\/pre>\n-     * <li>{@link jdk.internal.classfile.Classfile#CRT_FLOW_TARGET} Statement or\n-     * expression effected by a CRT_FLOW_CONTROLLER. {@code Flowtarg} in the following:\n-     * <pre>\n-     * if ( Flowcon ) Flowtarg [else Flowtarg]\n-     * for ( ForInitOpt ; [Flowcon] ; ForUpdateOpt ) Flowtarg\n-     * while ( Flowcon ) Flowtarg\n-     * do Flowtarg while ( Flowcon ) ;\n-     * Flowcon || Flowtarg\n-     * Flowcon &amp;&amp; Flowtarg\n-     * Flowcon ? Flowtarg : Flowtarg\n-     * <\/pre>\n-     * <li>{@link jdk.internal.classfile.Classfile#CRT_INVOKE} Method invocation. For\n-     * example: Identifier Arguments.\n-     * <li>{@link jdk.internal.classfile.Classfile#CRT_CREATE} New object creation. For\n-     * example: new Creator.\n-     * <li>{@link jdk.internal.classfile.Classfile#CRT_BRANCH_TRUE} A condition encoded\n-     * in the branch instruction immediately contained in the code range for\n-     * this item is not inverted towards the corresponding branch condition in\n-     * the source code. I.e. actual jump occurs if and only if the the source\n-     * code branch condition evaluates to true. Entries of this type are\n-     * produced only for conditions that are listed in the description of\n-     * CRT_FLOW_CONTROLLER flag. The source range for the entry contains flow\n-     * controlling expression. start_pc field for an entry of this type must\n-     * point to a branch instruction: if_acmp&lt;cond&gt;, if_icmp&lt;cond&gt;,\n-     * if&lt;cond&gt;, ifnonull, ifnull or goto. CRT_BRANCH_TRUE and\n-     * CRT_BRANCH_FALSE are special kinds of entries that can be used to\n-     * determine what branch of a condition was chosen during the runtime.\n-     * <li>{@link jdk.internal.classfile.Classfile#CRT_BRANCH_FALSE} A condition encoded\n-     * in the branch instruction immediately contained in the code range for\n-     * this item is inverted towards the corresponding branch condition in the\n-     * source code. I.e. actual jump occurs if and only if the the source code\n-     * branch condition evaluates to false. Entries of this type are produced\n-     * only for conditions that are listed in the description of\n-     * CRT_FLOW_CONTROLLER flag. The source range for the entry contains flow\n-     * controlling expression. start_pc field for an entry of this type must\n-     * point to a branch instruction: if_acmp&lt;cond&gt;, if_icmp&lt;cond&gt;,\n-     * if&lt;cond&gt;, ifnonull, ifnull or goto.\n-     * <\/ul>\n-     * <p>\n-     * All bits of the flags item not assigned above are reserved for future use. They should be set to zero in generated class files and should be ignored by Java virtual machine implementations.\n-     *\n-     * @return the flags\n-     *\/\n-    int flags();\n-\n-    \/**\n-     * {@return a character range description}\n-     * @param startPc the start of the bytecode range, inclusive\n-     * @param endPc the end of the bytecode range, exclusive\n-     * @param characterRangeStart the start of the character range, inclusive,\n-     *                            encoded as {@code line_number << 10 + column_number}\n-     * @param characterRangeEnd the end of the character range, exclusive,\n-     *                          encoded as {@code line_number << 10 + column_number}\n-     * @param flags the range flags\n-     *\/\n-    static CharacterRangeInfo of(int startPc,\n-                                 int endPc,\n-                                 int characterRangeStart,\n-                                 int characterRangeEnd,\n-                                 int flags) {\n-        return new UnboundAttribute.UnboundCharacterRangeInfo(startPc, endPc,\n-                                                              characterRangeStart, characterRangeEnd,\n-                                                              flags);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/CharacterRangeInfo.java","additions":0,"deletions":155,"binary":false,"changes":155,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-\n-\/**\n- * Models the {@code Code} attribute {@jvms 4.7.3}, appears on non-native,\n- * non-abstract methods and contains the bytecode of the method body.  Delivered\n- * as a {@link jdk.internal.classfile.MethodElement} when traversing the elements of a\n- * {@link jdk.internal.classfile.MethodModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface CodeAttribute extends Attribute<CodeAttribute>, CodeModel\n-        permits BoundAttribute.BoundCodeAttribute {\n-\n-    \/**\n-     * {@return The length of the code array in bytes}\n-     *\/\n-    int codeLength();\n-\n-    \/**\n-     * {@return the bytes (bytecode) of the code array}\n-     *\/\n-    byte[] codeArray();\n-\n-    \/**\n-     * {@return the position of the {@code Label} in the {@code codeArray}\n-     * or -1 if the {@code Label} does not point to the {@code codeArray}}\n-     * @param label a marker for a position within this {@code CodeAttribute}\n-     *\/\n-    int labelToBci(Label label);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/CodeAttribute.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code CompilationID} attribute (@@@ need reference), which can\n- * appear on classes and records the compilation time of the class.  Delivered\n- * as a {@link jdk.internal.classfile.ClassElement} when traversing the elements of\n- * a {@link jdk.internal.classfile.ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface CompilationIDAttribute\n-        extends Attribute<CompilationIDAttribute>, ClassElement\n-        permits BoundAttribute.BoundCompilationIDAttribute,\n-                UnboundAttribute.UnboundCompilationIDAttribute {\n-\n-    \/**\n-     * {@return the compilation ID}  The compilation ID is the value of\n-     * {@link System#currentTimeMillis()} when the classfile is generated.\n-     *\/\n-    Utf8Entry compilationId();\n-\n-    \/**\n-     * {@return a {@code CompilationID} attribute}\n-     * @param id the compilation ID\n-     *\/\n-    static CompilationIDAttribute of(Utf8Entry id) {\n-        return new UnboundAttribute.UnboundCompilationIDAttribute(id);\n-    }\n-\n-    \/**\n-     * {@return a {@code CompilationID} attribute}\n-     * @param id the compilation ID\n-     *\/\n-    static CompilationIDAttribute of(String id) {\n-        return new UnboundAttribute.UnboundCompilationIDAttribute(TemporaryConstantPool.INSTANCE.utf8Entry(id));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/CompilationIDAttribute.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.attribute;\n-\n-import java.lang.constant.ConstantDesc;\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.FieldElement;\n-import jdk.internal.classfile.constantpool.ConstantValueEntry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code ConstantValue} attribute {@jvms 4.7.2}, which can appear on\n- * fields and indicates that the field's value is a constant.  Delivered as a\n- * {@link jdk.internal.classfile.FieldElement} when traversing the elements of a\n- * {@link jdk.internal.classfile.FieldModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface ConstantValueAttribute\n-        extends Attribute<ConstantValueAttribute>, FieldElement\n-        permits BoundAttribute.BoundConstantValueAttribute,\n-                UnboundAttribute.UnboundConstantValueAttribute {\n-\n-    \/**\n-     * {@return the constant value of the field}\n-     *\/\n-    ConstantValueEntry constant();\n-\n-    \/**\n-     * {@return a {@code ConstantValue} attribute}\n-     * @param value the constant value\n-     *\/\n-    static ConstantValueAttribute of(ConstantValueEntry value) {\n-        return new UnboundAttribute.UnboundConstantValueAttribute(value);\n-    }\n-\n-    \/**\n-     * {@return a {@code ConstantValue} attribute}\n-     * @param value the constant value\n-     *\/\n-    static ConstantValueAttribute of(ConstantDesc value) {\n-        return of(switch(value) {\n-            case Integer i -> TemporaryConstantPool.INSTANCE.intEntry(i);\n-            case Float f -> TemporaryConstantPool.INSTANCE.floatEntry(f);\n-            case Long l -> TemporaryConstantPool.INSTANCE.longEntry(l);\n-            case Double d -> TemporaryConstantPool.INSTANCE.doubleEntry(d);\n-            case String s -> TemporaryConstantPool.INSTANCE.stringEntry(s);\n-            default -> throw new IllegalArgumentException(\"Invalid ConstantValueAttribute value: \" + value);\n-        });\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ConstantValueAttribute.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.FieldElement;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code Deprecated} attribute {@jvms 4.7.15}, which can appear on\n- * classes, methods, and fields.  Delivered as a  {@link ClassElement},\n- * {@link MethodElement}, or  {@link FieldElement} when traversing the elements\n- * of a corresponding model.\n- * <p>\n- * The attribute permits multiple instances in a given location.\n- *\/\n-public sealed interface DeprecatedAttribute\n-        extends Attribute<DeprecatedAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundDeprecatedAttribute,\n-                UnboundAttribute.UnboundDeprecatedAttribute {\n-\n-    \/**\n-     * {@return a {@code Deprecated} attribute}\n-     *\/\n-    static DeprecatedAttribute of() {\n-        return new UnboundAttribute.UnboundDeprecatedAttribute();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/DeprecatedAttribute.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,117 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.lang.constant.MethodTypeDesc;\n-import java.util.Optional;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models the {@code EnclosingMethod} attribute {@jvms 4.7.7}, which can appear\n- * on classes, and indicates that the class is a local or anonymous class.\n- * Delivered as a {@link ClassElement} when traversing the elements of a {@link\n- * jdk.internal.classfile.ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface EnclosingMethodAttribute\n-        extends Attribute<EnclosingMethodAttribute>, ClassElement\n-        permits BoundAttribute.BoundEnclosingMethodAttribute,\n-                UnboundAttribute.UnboundEnclosingMethodAttribute {\n-\n-    \/**\n-     * {@return the innermost class that encloses the declaration of the current\n-     * class}\n-     *\/\n-    ClassEntry enclosingClass();\n-\n-    \/**\n-     * {@return the name and type of the enclosing method, if the class is\n-     * immediately enclosed by a method or constructor}\n-     *\/\n-    Optional<NameAndTypeEntry> enclosingMethod();\n-\n-    \/**\n-     * {@return the name of the enclosing method, if the class is\n-     * immediately enclosed by a method or constructor}\n-     *\/\n-    default Optional<Utf8Entry> enclosingMethodName() {\n-        return enclosingMethod().map(NameAndTypeEntry::name);\n-    }\n-\n-    \/**\n-     * {@return the type of the enclosing method, if the class is\n-     * immediately enclosed by a method or constructor}\n-     *\/\n-    default Optional<Utf8Entry> enclosingMethodType() {\n-        return enclosingMethod().map(NameAndTypeEntry::type);\n-    }\n-\n-    \/**\n-     * {@return the type of the enclosing method, if the class is\n-     * immediately enclosed by a method or constructor}\n-     *\/\n-    default Optional<MethodTypeDesc> enclosingMethodTypeSymbol() {\n-        return enclosingMethod().map(Util::methodTypeSymbol);\n-    }\n-\n-    \/**\n-     * {@return an {@code EnclosingMethod} attribute}\n-     * @param className the class name\n-     * @param method the name and type of the enclosing method\n-     *\/\n-    static EnclosingMethodAttribute of(ClassEntry className,\n-                                       Optional<NameAndTypeEntry> method) {\n-        return new UnboundAttribute.UnboundEnclosingMethodAttribute(className, method.orElse(null));\n-    }\n-\n-    \/**\n-     * {@return an {@code EnclosingMethod} attribute}\n-     * @param className the class name\n-     * @param methodName the name of the enclosing method\n-     * @param methodType the type of the enclosing method\n-     *\/\n-    static EnclosingMethodAttribute of(ClassDesc className,\n-                                       Optional<String> methodName,\n-                                       Optional<MethodTypeDesc> methodType) {\n-        return new UnboundAttribute.UnboundEnclosingMethodAttribute(\n-                        TemporaryConstantPool.INSTANCE.classEntry(className),\n-                        methodName.isPresent() && methodType.isPresent()\n-                                ? TemporaryConstantPool.INSTANCE.nameAndTypeEntry(methodName.get(), methodType.get())\n-                                : null);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/EnclosingMethodAttribute.java","additions":0,"deletions":117,"binary":false,"changes":117,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code InnerClasses} attribute {@jvms 4.7.6}, which can\n- * appear on classes, and records which classes referenced by this classfile\n- * are inner classes. Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface InnerClassesAttribute\n-        extends Attribute<InnerClassesAttribute>, ClassElement\n-        permits BoundAttribute.BoundInnerClassesAttribute,\n-                UnboundAttribute.UnboundInnerClassesAttribute {\n-\n-    \/**\n-     * {@return the inner classes used by this class}\n-     *\/\n-    List<InnerClassInfo> classes();\n-\n-    \/**\n-     * {@return an {@code InnerClasses} attribute}\n-     * @param innerClasses descriptions of the inner classes\n-     *\/\n-    static InnerClassesAttribute of(List<InnerClassInfo> innerClasses) {\n-        return new UnboundAttribute.UnboundInnerClassesAttribute(innerClasses);\n-    }\n-\n-    \/**\n-     * {@return an {@code InnerClasses} attribute}\n-     * @param innerClasses descriptions of the inner classes\n-     *\/\n-    static InnerClassesAttribute of(InnerClassInfo... innerClasses) {\n-        return new UnboundAttribute.UnboundInnerClassesAttribute(List.of(innerClasses));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/InnerClassesAttribute.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code LineNumberTable} attribute {@jvms 4.7.12}, which can appear\n- * on a {@code Code} attribute, and records the mapping between indexes into\n- * the code table and line numbers in the source file.\n- * Delivered as a {@link jdk.internal.classfile.instruction.LineNumber} when traversing the\n- * elements of a {@link jdk.internal.classfile.CodeModel}, according to the setting of the\n- * {@link jdk.internal.classfile.Classfile.LineNumbersOption} option.\n- * <p>\n- * The attribute permits multiple instances in a given location.\n- *\/\n-public sealed interface LineNumberTableAttribute\n-        extends Attribute<LineNumberTableAttribute>\n-        permits BoundAttribute.BoundLineNumberTableAttribute,\n-                UnboundAttribute.UnboundLineNumberTableAttribute {\n-\n-    \/**\n-     * {@return the table mapping bytecode offsets to source line numbers}\n-     *\/\n-    List<LineNumberInfo> lineNumbers();\n-\n-    \/**\n-     * {@return a {@code LineNumberTable} attribute}\n-     * @param lines the line number descriptions\n-     *\/\n-    static LineNumberTableAttribute of(List<LineNumberInfo> lines) {\n-        return new UnboundAttribute.UnboundLineNumberTableAttribute(lines);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LineNumberTableAttribute.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-import java.util.List;\n-\n-\/**\n- * Models the {@code LocalVariableTable} attribute {@jvms 4.7.13}, which can appear\n- * on a {@code Code} attribute, and records debug information about local\n- * variables.\n- * Delivered as a {@link jdk.internal.classfile.instruction.LocalVariable} when traversing the\n- * elements of a {@link jdk.internal.classfile.CodeModel}, according to the setting of the\n- * {@link jdk.internal.classfile.Classfile.DebugElementsOption} option.\n- * <p>\n- * The attribute permits multiple instances in a given location.\n- *\/\n-public sealed interface LocalVariableTableAttribute\n-        extends Attribute<LocalVariableTableAttribute>\n-        permits BoundAttribute.BoundLocalVariableTableAttribute, UnboundAttribute.UnboundLocalVariableTableAttribute {\n-\n-    \/**\n-     * {@return debug information for the local variables in this method}\n-     *\/\n-    List<LocalVariableInfo> localVariables();\n-\n-    \/**\n-     * {@return a {@code LocalVariableTable} attribute}\n-     * @param locals the local variable descriptions\n-     *\/\n-    static LocalVariableTableAttribute of(List<LocalVariableInfo> locals) {\n-        return new UnboundAttribute.UnboundLocalVariableTableAttribute(locals);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LocalVariableTableAttribute.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-import java.util.List;\n-\n-\/**\n- * Models the {@code LocalVariableTypeTable} attribute {@jvms 4.7.14}, which can appear\n- * on a {@code Code} attribute, and records debug information about local\n- * variables.\n- * Delivered as a {@link jdk.internal.classfile.instruction.LocalVariable} when traversing the\n- * elements of a {@link jdk.internal.classfile.CodeModel}, according to the setting of the\n- * {@link jdk.internal.classfile.Classfile.LineNumbersOption} option.\n- * <p>\n- * The attribute permits multiple instances in a given location.\n- *\/\n-public sealed interface LocalVariableTypeTableAttribute\n-        extends Attribute<LocalVariableTypeTableAttribute>\n-        permits BoundAttribute.BoundLocalVariableTypeTableAttribute, UnboundAttribute.UnboundLocalVariableTypeTableAttribute {\n-\n-    \/**\n-     * {@return debug information for the local variables in this method}\n-     *\/\n-    List<LocalVariableTypeInfo> localVariableTypes();\n-\n-    \/**\n-     * {@return a {@code LocalVariableTypeTable} attribute}\n-     * @param locals the local variable descriptions\n-     *\/\n-    static LocalVariableTypeTableAttribute of(List<LocalVariableTypeInfo> locals) {\n-        return new UnboundAttribute.UnboundLocalVariableTypeTableAttribute(locals);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/LocalVariableTypeTableAttribute.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code MethodParameters} attribute {@jvms 4.7.24}, which can\n- * appear on methods, and records optional information about the method's\n- * parameters.  Delivered as a {@link jdk.internal.classfile.MethodElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.MethodModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface MethodParametersAttribute\n-        extends Attribute<MethodParametersAttribute>, MethodElement\n-        permits BoundAttribute.BoundMethodParametersAttribute,\n-                UnboundAttribute.UnboundMethodParametersAttribute {\n-\n-    \/**\n-     * {@return information about the parameters of the method}  The i'th entry\n-     * in the list corresponds to the i'th parameter in the method declaration.\n-     *\/\n-    List<MethodParameterInfo> parameters();\n-\n-    \/**\n-     * {@return a {@code MethodParameters} attribute}\n-     * @param parameters the method parameter descriptions\n-     *\/\n-    static MethodParametersAttribute of(List<MethodParameterInfo> parameters) {\n-        return new UnboundAttribute.UnboundMethodParametersAttribute(parameters);\n-    }\n-\n-    \/**\n-     * {@return a {@code MethodParameters} attribute}\n-     * @param parameters the method parameter descriptions\n-     *\/\n-    static MethodParametersAttribute of(MethodParameterInfo... parameters) {\n-        return of(List.of(parameters));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/MethodParametersAttribute.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code ModuleMainClass} attribute {@jvms 4.7.27}, which can\n- * appear on classes that represent module descriptors.\n- * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface ModuleMainClassAttribute\n-        extends Attribute<ModuleMainClassAttribute>, ClassElement\n-        permits BoundAttribute.BoundModuleMainClassAttribute, UnboundAttribute.UnboundModuleMainClassAttribute {\n-\n-    \/**\n-     * {@return main class for this module}\n-     *\/\n-    ClassEntry mainClass();\n-\n-    \/**\n-     * {@return a {@code ModuleMainClass} attribute}\n-     * @param mainClass the main class\n-     *\/\n-    static ModuleMainClassAttribute of(ClassEntry mainClass) {\n-        return new UnboundAttribute.UnboundModuleMainClassAttribute(mainClass);\n-    }\n-\n-    \/**\n-     * {@return a {@code ModuleMainClass} attribute}\n-     * @param mainClass the main class\n-     *\/\n-    static ModuleMainClassAttribute of(ClassDesc mainClass) {\n-        return new UnboundAttribute.UnboundModuleMainClassAttribute(TemporaryConstantPool.INSTANCE.classEntry(mainClass));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleMainClassAttribute.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.internal.classfile.constantpool.PackageEntry;\n-import java.lang.constant.PackageDesc;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code ModulePackages} attribute {@jvms 4.7.26}, which can\n- * appear on classes that represent module descriptors.\n- * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface ModulePackagesAttribute\n-        extends Attribute<ModulePackagesAttribute>, ClassElement\n-        permits BoundAttribute.BoundModulePackagesAttribute,\n-                UnboundAttribute.UnboundModulePackagesAttribute {\n-\n-    \/**\n-     * {@return the packages that are opened or exported by this module}\n-     *\/\n-    List<PackageEntry> packages();\n-\n-    \/**\n-     * {@return a {@code ModulePackages} attribute}\n-     * @param packages the packages\n-     *\/\n-    static ModulePackagesAttribute of(List<PackageEntry> packages) {\n-        return new UnboundAttribute.UnboundModulePackagesAttribute(packages);\n-    }\n-\n-    \/**\n-     * {@return a {@code ModulePackages} attribute}\n-     * @param packages the packages\n-     *\/\n-    static ModulePackagesAttribute of(PackageEntry... packages) {\n-        return of(List.of(packages));\n-    }\n-\n-    \/**\n-     * {@return a {@code ModulePackages} attribute}\n-     * @param packages the packages\n-     *\/\n-    static ModulePackagesAttribute ofNames(List<PackageDesc> packages) {\n-        var p = new PackageEntry[packages.size()];\n-        for (int i = 0; i < packages.size(); i++) {\n-            p[i] = TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(packages.get(i).internalName()));\n-        }\n-        return of(p);\n-    }\n-\n-    \/**\n-     * {@return a {@code ModulePackages} attribute}\n-     * @param packages the packages\n-     *\/\n-    static ModulePackagesAttribute ofNames(PackageDesc... packages) {\n-        \/\/ List view, since ref to packages is temporary\n-        return ofNames(Arrays.asList(packages));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModulePackagesAttribute.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -1,92 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a single \"provides\" declaration in the {@link ModuleAttribute}.\n- *\/\n-public sealed interface ModuleProvideInfo\n-        permits UnboundAttribute.UnboundModuleProvideInfo {\n-\n-    \/**\n-     * {@return the service interface representing the provided service}\n-     *\/\n-    ClassEntry provides();\n-\n-    \/**\n-     * {@return the classes providing the service implementation}\n-     *\/\n-    List<ClassEntry> providesWith();\n-\n-    \/**\n-     * {@return a service provision description}\n-     * @param provides the service class interface\n-     * @param providesWith the service class implementations\n-     *\/\n-    static ModuleProvideInfo of(ClassEntry provides,\n-                                List<ClassEntry> providesWith) {\n-        return new UnboundAttribute.UnboundModuleProvideInfo(provides, providesWith);\n-    }\n-\n-    \/**\n-     * {@return a service provision description}\n-     * @param provides the service class interface\n-     * @param providesWith the service class implementations\n-     *\/\n-    static ModuleProvideInfo of(ClassEntry provides,\n-                                ClassEntry... providesWith) {\n-        return of(provides, List.of(providesWith));\n-    }\n-\n-    \/**\n-     * {@return a service provision description}\n-     * @param provides the service class interface\n-     * @param providesWith the service class implementations\n-     *\/\n-    static ModuleProvideInfo of(ClassDesc provides,\n-                                       List<ClassDesc> providesWith) {\n-        return of(TemporaryConstantPool.INSTANCE.classEntry(provides), Util.entryList(providesWith));\n-    }\n-\n-    \/**\n-     * {@return a service provision description}\n-     * @param provides the service class interface\n-     * @param providesWith the service class implementations\n-     *\/\n-    static ModuleProvideInfo of(ClassDesc provides,\n-                                       ClassDesc... providesWith) {\n-        \/\/ List view, since ref to providesWith is temporary\n-        return of(provides, Arrays.asList(providesWith));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleProvideInfo.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.attribute;\n-\n-import java.util.Collection;\n-import java.util.Optional;\n-import java.util.Set;\n-\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import java.lang.reflect.AccessFlag;\n-import java.lang.constant.ModuleDesc;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a single \"requires\" declaration in the {@link ModuleAttribute}.\n- *\/\n-public sealed interface ModuleRequireInfo\n-        permits UnboundAttribute.UnboundModuleRequiresInfo {\n-\n-    \/**\n-     * {@return The module on which the current module depends}\n-     *\/\n-    ModuleEntry requires();\n-\n-    \/**\n-     * {@return the flags associated with this require declaration, as a bit mask}\n-     * Valid flags include {@link jdk.internal.classfile.Classfile#ACC_TRANSITIVE},\n-     * {@link jdk.internal.classfile.Classfile#ACC_STATIC_PHASE},\n-     * {@link jdk.internal.classfile.Classfile#ACC_SYNTHETIC} and\n-     * {@link jdk.internal.classfile.Classfile#ACC_MANDATED}\n-     *\/\n-    int requiresFlagsMask();\n-\n-    \/**\n-     * {@return the access flags}\n-     *\/\n-    default Set<AccessFlag> requiresFlags() {\n-        return AccessFlag.maskToAccessFlags(requiresFlagsMask(), AccessFlag.Location.MODULE_REQUIRES);\n-    }\n-\n-    \/**\n-     * {@return the required version of the required module, if present}\n-     *\/\n-    Optional<Utf8Entry> requiresVersion();\n-\n-    \/**\n-     * {@return whether the specific access flag is set}\n-     * @param flag the access flag\n-     *\/\n-    default boolean has(AccessFlag flag) {\n-        return Util.has(AccessFlag.Location.MODULE_REQUIRES, requiresFlagsMask(), flag);\n-    }\n-\n-    \/**\n-     * {@return a module requirement description}\n-     * @param requires the required module\n-     * @param requiresFlags the require-specific flags\n-     * @param requiresVersion the required version\n-     *\/\n-    static ModuleRequireInfo of(ModuleEntry requires, int requiresFlags, Utf8Entry requiresVersion) {\n-        return new UnboundAttribute.UnboundModuleRequiresInfo(requires, requiresFlags, Optional.ofNullable(requiresVersion));\n-    }\n-\n-    \/**\n-     * {@return a module requirement description}\n-     * @param requires the required module\n-     * @param requiresFlags the require-specific flags\n-     * @param requiresVersion the required version\n-     *\/\n-    static ModuleRequireInfo of(ModuleEntry requires, Collection<AccessFlag> requiresFlags, Utf8Entry requiresVersion) {\n-        return of(requires, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n-    }\n-\n-    \/**\n-     * {@return a module requirement description}\n-     * @param requires the required module\n-     * @param requiresFlags the require-specific flags\n-     * @param requiresVersion the required version\n-     *\/\n-    static ModuleRequireInfo of(ModuleDesc requires, int requiresFlags, String requiresVersion) {\n-        return new UnboundAttribute.UnboundModuleRequiresInfo(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(requires.name())), requiresFlags, Optional.ofNullable(requiresVersion).map(s -> TemporaryConstantPool.INSTANCE.utf8Entry(s)));\n-    }\n-\n-    \/**\n-     * {@return a module requirement description}\n-     * @param requires the required module\n-     * @param requiresFlags the require-specific flags\n-     * @param requiresVersion the required version\n-     *\/\n-    static ModuleRequireInfo of(ModuleDesc requires, Collection<AccessFlag> requiresFlags, String requiresVersion) {\n-        return of(requires, Util.flagsToBits(AccessFlag.Location.MODULE_REQUIRES, requiresFlags), requiresVersion);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleRequireInfo.java","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code ModuleResolution} attribute, which can\n- * appear on classes that represent module descriptors.  This is a JDK-specific\n- *  * attribute, which captures resolution metadata for modules.\n- * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n- *\n- *  <p>The specification of the {@code ModuleResolution} attribute is:\n- * <pre> {@code\n- *  ModuleResolution_attribute {\n- *    u2 attribute_name_index;    \/\/ \"ModuleResolution\"\n- *    u4 attribute_length;        \/\/ 2\n- *    u2 resolution_flags;\n- *\n- *  The value of the resolution_flags item is a mask of flags used to denote\n- *  properties of module resolution. The flags are as follows:\n- *\n- *   \/\/ Optional\n- *   0x0001 (DO_NOT_RESOLVE_BY_DEFAULT)\n- *\n- *   \/\/ At most one of:\n- *   0x0002 (WARN_DEPRECATED)\n- *   0x0004 (WARN_DEPRECATED_FOR_REMOVAL)\n- *   0x0008 (WARN_INCUBATING)\n- *  }\n- * } <\/pre>\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface ModuleResolutionAttribute\n-        extends Attribute<ModuleResolutionAttribute>, ClassElement\n-        permits BoundAttribute.BoundModuleResolutionAttribute, UnboundAttribute.UnboundModuleResolutionAttribute {\n-\n-    \/**\n-     *  The value of the resolution_flags item is a mask of flags used to denote\n-     *  properties of module resolution. The flags are as follows:\n-     *\n-     *   \/\/ Optional\n-     *   0x0001 (DO_NOT_RESOLVE_BY_DEFAULT)\n-     *\n-     *   \/\/ At most one of:\n-     *   0x0002 (WARN_DEPRECATED)\n-     *   0x0004 (WARN_DEPRECATED_FOR_REMOVAL)\n-     *   0x0008 (WARN_INCUBATING)\n-     * @return the module resolution flags\n-     *\/\n-    int resolutionFlags();\n-\n-    \/**\n-     * {@return a {@code ModuleResolution} attribute}\n-     * @param resolutionFlags the resolution flags\n-     *\/\n-    static ModuleResolutionAttribute of(int resolutionFlags) {\n-        return new UnboundAttribute.UnboundModuleResolutionAttribute(resolutionFlags);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleResolutionAttribute.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code ModuleTarget} attribute, which can\n- * appear on classes that represent module descriptors.  This is a JDK-specific\n- * attribute, which captures constraints on the target platform.\n- * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n- *\n- * <p>The specification of the {@code ModuleTarget} attribute is:\n- * <pre> {@code\n- * TargetPlatform_attribute {\n- *   \/\/ index to CONSTANT_utf8_info structure in constant pool representing\n- *   \/\/ the string \"ModuleTarget\"\n- *   u2 attribute_name_index;\n- *   u4 attribute_length;\n- *\n- *   \/\/ index to CONSTANT_utf8_info structure with the target platform\n- *   u2 target_platform_index;\n- * }\n- * } <\/pre>\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface ModuleTargetAttribute\n-        extends Attribute<ModuleTargetAttribute>, ClassElement\n-        permits BoundAttribute.BoundModuleTargetAttribute, UnboundAttribute.UnboundModuleTargetAttribute {\n-\n-    \/**\n-     * {@return the target platform}\n-     *\/\n-    Utf8Entry targetPlatform();\n-\n-    \/**\n-     * {@return a {@code ModuleTarget} attribute}\n-     * @param targetPlatform the target platform\n-     *\/\n-    static ModuleTargetAttribute of(String targetPlatform) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(targetPlatform));\n-    }\n-\n-    \/**\n-     * {@return a {@code ModuleTarget} attribute}\n-     * @param targetPlatform the target platform\n-     *\/\n-    static ModuleTargetAttribute of(Utf8Entry targetPlatform) {\n-        return new UnboundAttribute.UnboundModuleTargetAttribute(targetPlatform);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleTargetAttribute.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code NestHost} attribute {@jvms 4.7.28}, which can\n- * appear on classes to indicate that this class is a member of a nest.\n- * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface NestHostAttribute extends Attribute<NestHostAttribute>, ClassElement\n-        permits BoundAttribute.BoundNestHostAttribute,\n-                UnboundAttribute.UnboundNestHostAttribute {\n-\n-    \/**\n-     * {@return the host class of the nest to which this class belongs}\n-     *\/\n-    ClassEntry nestHost();\n-\n-    \/**\n-     * {@return a {@code NestHost} attribute}\n-     * @param nestHost the host class of the nest\n-     *\/\n-    static NestHostAttribute of(ClassEntry nestHost) {\n-        return new UnboundAttribute.UnboundNestHostAttribute(nestHost);\n-    }\n-\n-    \/**\n-     * {@return a {@code NestHost} attribute}\n-     * @param nestHost the host class of the nest\n-     *\/\n-    static NestHostAttribute of(ClassDesc nestHost) {\n-        return of(TemporaryConstantPool.INSTANCE.classEntry(nestHost));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/NestHostAttribute.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,88 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models the {@code NestMembers} attribute {@jvms 4.7.29}, which can\n- * appear on classes to indicate that this class is the host of a nest.\n- * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface NestMembersAttribute extends Attribute<NestMembersAttribute>, ClassElement\n-        permits BoundAttribute.BoundNestMembersAttribute, UnboundAttribute.UnboundNestMembersAttribute {\n-\n-    \/**\n-     * {@return the classes belonging to the nest hosted by this class}\n-     *\/\n-    List<ClassEntry> nestMembers();\n-\n-    \/**\n-     * {@return a {@code NestMembers} attribute}\n-     * @param nestMembers the member classes of the nest\n-     *\/\n-    static NestMembersAttribute of(List<ClassEntry> nestMembers) {\n-        return new UnboundAttribute.UnboundNestMembersAttribute(nestMembers);\n-    }\n-\n-    \/**\n-     * {@return a {@code NestMembers} attribute}\n-     * @param nestMembers the member classes of the nest\n-     *\/\n-    static NestMembersAttribute of(ClassEntry... nestMembers) {\n-        return of(List.of(nestMembers));\n-    }\n-\n-    \/**\n-     * {@return a {@code NestMembers} attribute}\n-     * @param nestMembers the member classes of the nest\n-     *\/\n-    static NestMembersAttribute ofSymbols(List<ClassDesc> nestMembers) {\n-        return of(Util.entryList(nestMembers));\n-    }\n-\n-    \/**\n-     * {@return a {@code NestMembers} attribute}\n-     * @param nestMembers the member classes of the nest\n-     *\/\n-    static NestMembersAttribute ofSymbols(ClassDesc... nestMembers) {\n-        \/\/ List view, since ref to nestMembers is temporary\n-        return ofSymbols(Arrays.asList(nestMembers));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/NestMembersAttribute.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models the {@code PermittedSubclasses} attribute {@jvms 4.7.31}, which can\n- * appear on classes to indicate which classes may extend this class.\n- * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface PermittedSubclassesAttribute\n-        extends Attribute<PermittedSubclassesAttribute>, ClassElement\n-        permits BoundAttribute.BoundPermittedSubclassesAttribute, UnboundAttribute.UnboundPermittedSubclassesAttribute {\n-\n-    \/**\n-     * {@return the list of permitted subclasses}\n-     *\/\n-    List<ClassEntry> permittedSubclasses();\n-\n-    \/**\n-     * {@return a {@code PermittedSubclasses} attribute}\n-     * @param permittedSubclasses the permitted subclasses\n-     *\/\n-    static PermittedSubclassesAttribute of(List<ClassEntry> permittedSubclasses) {\n-        return new UnboundAttribute.UnboundPermittedSubclassesAttribute(permittedSubclasses);\n-    }\n-\n-    \/**\n-     * {@return a {@code PermittedSubclasses} attribute}\n-     * @param permittedSubclasses the permitted subclasses\n-     *\/\n-    static PermittedSubclassesAttribute of(ClassEntry... permittedSubclasses) {\n-        return of(List.of(permittedSubclasses));\n-    }\n-\n-    \/**\n-     * {@return a {@code PermittedSubclasses} attribute}\n-     * @param permittedSubclasses the permitted subclasses\n-     *\/\n-    static PermittedSubclassesAttribute ofSymbols(List<ClassDesc> permittedSubclasses) {\n-        return of(Util.entryList(permittedSubclasses));\n-    }\n-\n-    \/**\n-     * {@return a {@code PermittedSubclasses} attribute}\n-     * @param permittedSubclasses the permitted subclasses\n-     *\/\n-    static PermittedSubclassesAttribute ofSymbols(ClassDesc... permittedSubclasses) {\n-        \/\/ List view, since ref to nestMembers is temporary\n-        return ofSymbols(Arrays.asList(permittedSubclasses));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/PermittedSubclassesAttribute.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code Record} attribute {@jvms 4.7.30}, which can\n- * appear on classes to indicate that this class is a record class.\n- * Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing the elements of a {@link jdk.internal.classfile.ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface RecordAttribute extends Attribute<RecordAttribute>, ClassElement\n-        permits BoundAttribute.BoundRecordAttribute, UnboundAttribute.UnboundRecordAttribute {\n-\n-    \/**\n-     * {@return the components of this record class}\n-     *\/\n-    List<RecordComponentInfo> components();\n-\n-    \/**\n-     * {@return a {@code Record} attribute}\n-     * @param components the record components\n-     *\/\n-    static RecordAttribute of(List<RecordComponentInfo> components) {\n-        return new UnboundAttribute.UnboundRecordAttribute(components);\n-    }\n-\n-    \/**\n-     * {@return a {@code Record} attribute}\n-     * @param components the record components\n-     *\/\n-    static RecordAttribute of(RecordComponentInfo... components) {\n-        return of(List.of(components));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RecordAttribute.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-import java.util.List;\n-\n-\/**\n- * Models the {@code RuntimeInvisibleAnnotations} attribute {@jvms 4.7.17}, which\n- * can appear on classes, methods, and fields. Delivered as a\n- * {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement}, or\n- * {@link jdk.internal.classfile.MethodElement} when traversing the corresponding model type.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface RuntimeInvisibleAnnotationsAttribute\n-        extends Attribute<RuntimeInvisibleAnnotationsAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundRuntimeInvisibleAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeInvisibleAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the non-runtime-visible annotations on this class, field, or method}\n-     *\/\n-    List<Annotation> annotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeInvisibleAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeInvisibleAnnotationsAttribute of(List<Annotation> annotations) {\n-        return new UnboundAttribute.UnboundRuntimeInvisibleAnnotationsAttribute(annotations);\n-    }\n-\n-    \/**\n-     * {@return a {@code RuntimeInvisibleAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeInvisibleAnnotationsAttribute of(Annotation... annotations) {\n-        return of(List.of(annotations));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeInvisibleAnnotationsAttribute.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.Annotation;\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code RuntimeInvisibleParameterAnnotations} attribute\n- * {@jvms 4.7.19}, which can appear on methods. Delivered as a {@link\n- * jdk.internal.classfile.MethodElement} when traversing a {@link MethodModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface RuntimeInvisibleParameterAnnotationsAttribute\n-        extends Attribute<RuntimeInvisibleParameterAnnotationsAttribute>, MethodElement\n-        permits BoundAttribute.BoundRuntimeInvisibleParameterAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeInvisibleParameterAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the list of annotations corresponding to each method parameter}\n-     * The element at the i'th index corresponds to the annotations on the i'th\n-     * parameter.\n-     *\/\n-    List<List<Annotation>> parameterAnnotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeInvisibleParameterAnnotations} attribute}\n-     * @param parameterAnnotations a list of parameter annotations for each parameter\n-     *\/\n-    static RuntimeInvisibleParameterAnnotationsAttribute of(List<List<Annotation>> parameterAnnotations) {\n-        return new UnboundAttribute.UnboundRuntimeInvisibleParameterAnnotationsAttribute(parameterAnnotations);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeInvisibleParameterAnnotationsAttribute.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.FieldElement;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.TypeAnnotation;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code RuntimeInvisibleTypeAnnotations} attribute {@jvms 4.7.21}, which\n- * can appear on classes, methods, fields, and code attributes. Delivered as a\n- * {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement},\n- * {@link jdk.internal.classfile.MethodElement}, or {@link CodeElement} when traversing\n- * the corresponding model type.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface RuntimeInvisibleTypeAnnotationsAttribute\n-        extends Attribute<RuntimeInvisibleTypeAnnotationsAttribute>,\n-                ClassElement, MethodElement, FieldElement, CodeElement\n-        permits BoundAttribute.BoundRuntimeInvisibleTypeAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeInvisibleTypeAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the non-runtime-visible type annotations on parts of this class, field, or method}\n-     *\/\n-    List<TypeAnnotation> annotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeInvisibleTypeAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeInvisibleTypeAnnotationsAttribute of(List<TypeAnnotation> annotations) {\n-        return new UnboundAttribute.UnboundRuntimeInvisibleTypeAnnotationsAttribute(annotations);\n-    }\n-\n-    \/**\n-     * {@return a {@code RuntimeInvisibleTypeAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeInvisibleTypeAnnotationsAttribute of(TypeAnnotation... annotations) {\n-        return of(List.of(annotations));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeInvisibleTypeAnnotationsAttribute.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-import java.util.List;\n-\n-\/**\n- * Models the {@code RuntimeVisibleAnnotations} attribute {@jvms 4.7.16}, which\n- * can appear on classes, methods, and fields. Delivered as a\n- * {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement}, or\n- * {@link jdk.internal.classfile.MethodElement} when traversing the corresponding model type.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface RuntimeVisibleAnnotationsAttribute\n-        extends Attribute<RuntimeVisibleAnnotationsAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundRuntimeVisibleAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeVisibleAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the runtime-visible annotations on this class, field, or method}\n-     *\/\n-    List<Annotation> annotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeVisibleAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeVisibleAnnotationsAttribute of(List<Annotation> annotations) {\n-        return new UnboundAttribute.UnboundRuntimeVisibleAnnotationsAttribute(annotations);\n-    }\n-\n-    \/**\n-     * {@return a {@code RuntimeVisibleAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeVisibleAnnotationsAttribute of(Annotation... annotations) {\n-        return of(List.of(annotations));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeVisibleAnnotationsAttribute.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.Annotation;\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code RuntimeVisibleParameterAnnotations} attribute {@jvms 4.7.18}, which\n- * can appear on methods. Delivered as a {@link jdk.internal.classfile.MethodElement}\n- * when traversing a {@link MethodModel}.\n- *\n- * @apiNote The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface RuntimeVisibleParameterAnnotationsAttribute\n-        extends Attribute<RuntimeVisibleParameterAnnotationsAttribute>, MethodElement\n-        permits BoundAttribute.BoundRuntimeVisibleParameterAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeVisibleParameterAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the list of annotations corresponding to each method parameter}\n-     * The element at the i'th index corresponds to the annotations on the i'th\n-     * parameter.\n-     *\/\n-    List<List<Annotation>> parameterAnnotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeVisibleParameterAnnotations} attribute}\n-     * @param parameterAnnotations a list of parameter annotations for each parameter\n-     *\/\n-    static RuntimeVisibleParameterAnnotationsAttribute of(List<List<Annotation>> parameterAnnotations) {\n-        return new UnboundAttribute.UnboundRuntimeVisibleParameterAnnotationsAttribute(parameterAnnotations);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeVisibleParameterAnnotationsAttribute.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.FieldElement;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.TypeAnnotation;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code RuntimeVisibleTypeAnnotations} attribute {@jvms 4.7.20}, which\n- * can appear on classes, methods, fields, and code attributes. Delivered as a\n- * {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement},\n- * {@link jdk.internal.classfile.MethodElement}, or {@link CodeElement} when traversing\n- * the corresponding model type.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface RuntimeVisibleTypeAnnotationsAttribute\n-        extends Attribute<RuntimeVisibleTypeAnnotationsAttribute>,\n-                ClassElement, MethodElement, FieldElement, CodeElement\n-        permits BoundAttribute.BoundRuntimeVisibleTypeAnnotationsAttribute,\n-                UnboundAttribute.UnboundRuntimeVisibleTypeAnnotationsAttribute {\n-\n-    \/**\n-     * {@return the runtime-visible type annotations on parts of this class, field, or method}\n-     *\/\n-    List<TypeAnnotation> annotations();\n-\n-    \/**\n-     * {@return a {@code RuntimeVisibleTypeAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeVisibleTypeAnnotationsAttribute of(List<TypeAnnotation> annotations) {\n-        return new UnboundAttribute.UnboundRuntimeVisibleTypeAnnotationsAttribute(annotations);\n-    }\n-\n-    \/**\n-     * {@return a {@code RuntimeVisibleTypeAnnotations} attribute}\n-     * @param annotations the annotations\n-     *\/\n-    static RuntimeVisibleTypeAnnotationsAttribute of(TypeAnnotation... annotations) {\n-        return of(List.of(annotations));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/RuntimeVisibleTypeAnnotationsAttribute.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,116 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassSignature;\n-import jdk.internal.classfile.FieldElement;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.MethodSignature;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code Signature} attribute {@jvms 4.7.9}, which\n- * can appear on classes, methods, or fields. Delivered as a\n- * {@link jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.FieldElement}, or\n- * {@link jdk.internal.classfile.MethodElement} when traversing\n- * the corresponding model type.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface SignatureAttribute\n-        extends Attribute<SignatureAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundSignatureAttribute, UnboundAttribute.UnboundSignatureAttribute {\n-\n-    \/**\n-     * {@return the signature for the class, method, or field}\n-     *\/\n-    Utf8Entry signature();\n-\n-    \/**\n-     * Parse the signature as a class signature.\n-     * @return the class signature\n-     *\/\n-    default ClassSignature asClassSignature() {\n-        return ClassSignature.parseFrom(signature().stringValue());\n-    }\n-\n-    \/**\n-     * Parse the signature as a method signature.\n-     * @return the method signature\n-     *\/\n-    default MethodSignature asMethodSignature() {\n-        return MethodSignature.parseFrom(signature().stringValue());\n-    }\n-\n-    \/**\n-     * Parse the signature as a type signature.\n-     * @return the type signature\n-     *\/\n-    default Signature asTypeSignature() {\n-        return Signature.parseFrom(signature().stringValue());\n-    }\n-\n-    \/**\n-     * {@return a {@code Signature} attribute for a class}\n-     * @param classSignature the signature\n-     *\/\n-    static SignatureAttribute of(ClassSignature classSignature) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(classSignature.signatureString()));\n-    }\n-\n-    \/**\n-     * {@return a {@code Signature} attribute for a method}\n-     * @param methodSignature the signature\n-     *\/\n-    static SignatureAttribute of(MethodSignature methodSignature) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(methodSignature.signatureString()));\n-    }\n-\n-    \/**\n-     * {@return a {@code Signature} attribute}\n-     * @param signature the signature\n-     *\/\n-    static SignatureAttribute of(Signature signature) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(signature.signatureString()));\n-    }\n-\n-    \/**\n-     * {@return a {@code Signature} attribute}\n-     * @param signature the signature\n-     *\/\n-    static SignatureAttribute of(Utf8Entry signature) {\n-        return new UnboundAttribute.UnboundSignatureAttribute(signature);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SignatureAttribute.java","additions":0,"deletions":116,"binary":false,"changes":116,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code SourceDebugExtension} attribute.\n- * Delivered as a {@link jdk.internal.classfile.ClassElement} when traversing the elements of\n- * a {@link jdk.internal.classfile.ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface SourceDebugExtensionAttribute\n-        extends Attribute<SourceDebugExtensionAttribute>, ClassElement\n-        permits BoundAttribute.BoundSourceDebugExtensionAttribute, UnboundAttribute.UnboundSourceDebugExtensionAttribute {\n-\n-    \/**\n-     * {@return the debug extension payload}\n-     *\/\n-    byte[] contents();\n-\n-    \/**\n-     * {@return a {@code SourceDebugExtension} attribute}\n-     * @param contents the extension contents\n-     *\/\n-    static SourceDebugExtensionAttribute of(byte[] contents) {\n-        return new UnboundAttribute.UnboundSourceDebugExtensionAttribute(contents);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SourceDebugExtensionAttribute.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code SourceFile} attribute {@jvms 4.7.10}, which\n- * can appear on classes. Delivered as a {@link jdk.internal.classfile.ClassElement}\n- * when traversing a {@link ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface SourceFileAttribute\n-        extends Attribute<SourceFileAttribute>, ClassElement\n-        permits BoundAttribute.BoundSourceFileAttribute, UnboundAttribute.UnboundSourceFileAttribute {\n-\n-    \/**\n-     * {@return the name of the source file from which this class was compiled}\n-     *\/\n-    Utf8Entry sourceFile();\n-\n-    \/**\n-     * {@return a source file attribute}\n-     * @param sourceFile the source file name\n-     *\/\n-    static SourceFileAttribute of(String sourceFile) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(sourceFile));\n-    }\n-\n-    \/**\n-     * {@return a source file attribute}\n-     * @param sourceFile the source file name\n-     *\/\n-    static SourceFileAttribute of(Utf8Entry sourceFile) {\n-        return new UnboundAttribute.UnboundSourceFileAttribute(sourceFile);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SourceFileAttribute.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code SourceID} attribute, which can\n- * appear on classes. Delivered as a {@link jdk.internal.classfile.ClassElement} when\n- * traversing a {@link ClassModel}.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface SourceIDAttribute\n-        extends Attribute<SourceIDAttribute>, ClassElement\n-        permits BoundAttribute.BoundSourceIDAttribute, UnboundAttribute.UnboundSourceIDAttribute {\n-\n-    \/**\n-     * {@return the source id}  The source id is the last modified time of the\n-     * source file (as reported by the filesystem, in milliseconds) when the\n-     * classfile is compiled.\n-     *\/\n-    Utf8Entry sourceId();\n-\n-    \/**\n-     * {@return a {@code SourceID} attribute}\n-     * @param sourceId the source id\n-     *\/\n-    static SourceIDAttribute of(Utf8Entry sourceId) {\n-        return new UnboundAttribute.UnboundSourceIDAttribute(sourceId);\n-    }\n-\n-    \/**\n-     * {@return a {@code SourceID} attribute}\n-     * @param sourceId the source id\n-     *\/\n-    static SourceIDAttribute of(String sourceId) {\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(sourceId));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SourceIDAttribute.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,180 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.List;\n-\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.impl.StackMapDecoder;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import static jdk.internal.classfile.Classfile.*;\n-\n-\/**\n- * Models stack map frame of {@code StackMapTable} attribute {@jvms 4.7.4}.\n- *\/\n-public sealed interface StackMapFrameInfo\n-            permits StackMapDecoder.StackMapFrameImpl {\n-\n-    \/**\n-     * {@return the frame compact form type}\n-     *\/\n-    int frameType();\n-\n-    \/**\n-     * {@return the frame target label}\n-     *\/\n-    Label target();\n-\n-    \/**\n-     * {@return the expanded local variable types}\n-     *\/\n-    List<VerificationTypeInfo> locals();\n-\n-    \/**\n-     * {@return the expanded stack types}\n-     *\/\n-    List<VerificationTypeInfo> stack();\n-\n-    \/**\n-     * {@return a new stack map frame}\n-     * @param target the location of the frame\n-     * @param locals the complete list of frame locals\n-     * @param stack the complete frame stack\n-     *\/\n-    public static StackMapFrameInfo of(Label target,\n-            List<VerificationTypeInfo> locals,\n-            List<VerificationTypeInfo> stack) {\n-\n-        return new StackMapDecoder.StackMapFrameImpl(255, target, locals, stack);\n-    }\n-\n-    \/**\n-     * The type of a stack value.\n-     *\/\n-    sealed interface VerificationTypeInfo {\n-\n-        \/**\n-         * {@return the tag of the type info}\n-         *\/\n-        int tag();\n-    }\n-\n-    \/**\n-     * A simple stack value.\n-     *\/\n-    public enum SimpleVerificationTypeInfo implements VerificationTypeInfo {\n-\n-        \/** verification type top *\/\n-        ITEM_TOP(VT_TOP),\n-\n-        \/** verification type int *\/\n-        ITEM_INTEGER(VT_INTEGER),\n-\n-        \/** verification type float *\/\n-        ITEM_FLOAT(VT_FLOAT),\n-\n-        \/** verification type double *\/\n-        ITEM_DOUBLE(VT_DOUBLE),\n-\n-        \/** verification type long *\/\n-        ITEM_LONG(VT_LONG),\n-\n-        \/** verification type null *\/\n-        ITEM_NULL(VT_NULL),\n-\n-        \/** verification type uninitializedThis *\/\n-        ITEM_UNINITIALIZED_THIS(VT_UNINITIALIZED_THIS);\n-\n-\n-        private final int tag;\n-\n-        SimpleVerificationTypeInfo(int tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public int tag() {\n-            return tag;\n-        }\n-    }\n-\n-    \/**\n-     * A stack value for an object type.\n-     *\/\n-    sealed interface ObjectVerificationTypeInfo extends VerificationTypeInfo\n-            permits StackMapDecoder.ObjectVerificationTypeInfoImpl {\n-\n-        \/**\n-         * {@return a new object verification type info}\n-         * @param className the class of the object\n-         *\/\n-        public static ObjectVerificationTypeInfo of(ClassEntry className) {\n-            return new StackMapDecoder.ObjectVerificationTypeInfoImpl(className);\n-        }\n-\n-        \/**\n-         * {@return a new object verification type info}\n-         * @param classDesc the class of the object\n-         *\/\n-        public static ObjectVerificationTypeInfo of(ClassDesc classDesc) {\n-            return of(TemporaryConstantPool.INSTANCE.classEntry(classDesc));\n-        }\n-\n-        \/**\n-         * {@return the class of the object}\n-         *\/\n-        ClassEntry className();\n-\n-        \/**\n-         * {@return the class of the object}\n-         *\/\n-        default ClassDesc classSymbol() {\n-            return className().asSymbol();\n-        }\n-    }\n-\n-    \/**\n-     * An uninitialized stack value.\n-     *\/\n-    sealed interface UninitializedVerificationTypeInfo extends VerificationTypeInfo\n-            permits StackMapDecoder.UninitializedVerificationTypeInfoImpl {\n-\n-        \/**\n-         * {@return the {@code new} instruction position that creates this unitialized object}\n-         *\/\n-        Label newTarget();\n-\n-        \/**\n-         * {@return an unitialized verification type info}\n-         * @param newTarget the {@code new} instruction position that creates this unitialized object\n-         *\/\n-        public static UninitializedVerificationTypeInfo of(Label newTarget) {\n-            return new StackMapDecoder.UninitializedVerificationTypeInfoImpl(newTarget);\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/StackMapFrameInfo.java","additions":0,"deletions":180,"binary":false,"changes":180,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code StackMapTable} attribute {@jvms 4.7.4}, which can appear\n- * on a {@code Code} attribute.\n- * <p>\n- * The attribute does not permit multiple instances in a given location.\n- * Subsequent occurrence of the attribute takes precedence during the attributed\n- * element build or transformation.\n- *\/\n-public sealed interface StackMapTableAttribute\n-        extends Attribute<StackMapTableAttribute>, CodeElement\n-        permits BoundAttribute.BoundStackMapTableAttribute, UnboundAttribute.UnboundStackMapTableAttribute {\n-\n-    \/**\n-     * {@return the stack map frames}\n-     *\/\n-    List<StackMapFrameInfo> entries();\n-\n-    \/**\n-     * {@return a stack map table attribute}\n-     * @param entries the stack map frames\n-     *\/\n-    public static StackMapTableAttribute of(List<StackMapFrameInfo> entries) {\n-        return new UnboundAttribute.UnboundStackMapTableAttribute(entries);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/StackMapTableAttribute.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.FieldElement;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-import jdk.internal.classfile.impl.UnboundAttribute;\n-\n-\/**\n- * Models the {@code Synthetic} attribute {@jvms 4.7.8}, which can appear on\n- * classes, methods, and fields.  Delivered as a  {@link ClassElement},\n- * {@link MethodElement}, or  {@link FieldElement} when traversing the elements\n- * of a corresponding model.\n- * <p>\n- * The attribute permits multiple instances in a given location.\n- *\/\n-public sealed interface SyntheticAttribute\n-        extends Attribute<SyntheticAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundSyntheticAttribute, UnboundAttribute.UnboundSyntheticAttribute {\n-\n-    \/**\n-     * {@return a {@code Synthetic} attribute}\n-     *\/\n-    static SyntheticAttribute of() {\n-        return new UnboundAttribute.UnboundSyntheticAttribute();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/SyntheticAttribute.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.attribute;\n-\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.FieldElement;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.impl.BoundAttribute;\n-\n-\/**\n- * Models an unknown attribute on a class, method, or field.\n- *\/\n-public sealed interface UnknownAttribute\n-        extends Attribute<UnknownAttribute>,\n-                ClassElement, MethodElement, FieldElement\n-        permits BoundAttribute.BoundUnknownAttribute {\n-\n-    \/**\n-     * {@return the uninterpreted contents of the attribute payload}\n-     *\/\n-    byte[] contents();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/UnknownAttribute.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,203 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.components;\n-\n-import java.lang.constant.ConstantDesc;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.function.Consumer;\n-import java.util.stream.Stream;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CompoundElement;\n-\n-import jdk.internal.classfile.impl.ClassPrinterImpl;\n-\n-\/**\n- * A printer of classfiles and its elements.\n- * <p>\n- * Any {@link ClassModel}, {@link FieldModel}, {@link MethodModel}, or {@link CodeModel}\n- * can be printed to a human-readable structured text in JSON, XML, or YAML format.\n- * Or it can be exported into a tree of traversable and printable nodes,\n- * more exactly into a tree of {@link MapNode}, {@link ListNode}, and {@link LeafNode} instances.\n- * <p>\n- * Level of details to print or to export is driven by {@link Verbosity} option.\n- * <p>\n- * The most frequent use case is to simply print a class:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printClass\"}\n- * <p>\n- * {@link ClassPrinter} allows to traverse tree of simple printable nodes to hook custom printer:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"customPrint\"}\n- * <p>\n- * Another use case for {@link ClassPrinter} is to simplify writing of automated tests:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printNodesInTest\"}\n- *\/\n-public final class ClassPrinter {\n-\n-    \/**\n-     * Level of detail to print or export.\n-     *\/\n-    public enum Verbosity {\n-\n-        \/**\n-         * Only top level class info, class members and attribute names are printed.\n-         *\/\n-        MEMBERS_ONLY,\n-\n-        \/**\n-         * Top level class info, class members, and critical attributes are printed.\n-         * <p>\n-         * Critical attributes are:\n-         * <ul>\n-         * <li>ConstantValue\n-         * <li>Code\n-         * <li>StackMapTable\n-         * <li>BootstrapMethods\n-         * <li>NestHost\n-         * <li>NestMembers\n-         * <li>PermittedSubclasses\n-         * <\/ul>\n-         * @jvms 4.7 Attributes\n-         *\/\n-        CRITICAL_ATTRIBUTES,\n-\n-        \/**\n-         * All class content is printed, including constant pool.\n-         *\/\n-        TRACE_ALL }\n-\n-    \/**\n-     * Named, traversable, and printable node parent.\n-     *\/\n-    public sealed interface Node {\n-\n-        \/**\n-         * Printable name of the node.\n-         * @return name of the node\n-         *\/\n-        ConstantDesc name();\n-\n-        \/**\n-         * Walks through the underlying tree.\n-         * @return ordered stream of nodes\n-         *\/\n-        Stream<Node> walk();\n-\n-        \/**\n-         * Prints the node and its sub-tree into JSON format.\n-         * @param out consumer of the printed fragments\n-         *\/\n-        default void toJson(Consumer<String> out) {\n-            ClassPrinterImpl.toJson(this, out);\n-        }\n-\n-        \/**\n-         * Prints the node and its sub-tree into XML format.\n-         * @param out consumer of the printed fragments\n-         *\/\n-        default void toXml(Consumer<String> out) {\n-            ClassPrinterImpl.toXml(this, out);\n-        }\n-\n-        \/**\n-         * Prints the node and its sub-tree into YAML format.\n-         * @param out consumer of the printed fragments\n-         *\/\n-        default void toYaml(Consumer<String> out) {\n-            ClassPrinterImpl.toYaml(this, out);\n-        }\n-    }\n-\n-    \/**\n-     * A leaf node holding single printable value.\n-     *\/\n-    public sealed interface LeafNode extends Node\n-            permits ClassPrinterImpl.LeafNodeImpl {\n-\n-        \/**\n-         * Printable node value\n-         * @return node value\n-         *\/\n-        ConstantDesc value();\n-    }\n-\n-    \/**\n-     * A tree node holding {@link List} of nested nodes.\n-     *\/\n-    public sealed interface ListNode extends Node, List<Node>\n-            permits ClassPrinterImpl.ListNodeImpl {\n-    }\n-\n-    \/**\n-     * A tree node holding {@link Map} of nested nodes.\n-     * <p>\n-     * Each {@link Map.Entry#getKey()} == {@link Map.Entry#getValue()}.{@link #name()}.\n-     *\/\n-    public sealed interface MapNode extends Node, Map<ConstantDesc, Node>\n-            permits ClassPrinterImpl.MapNodeImpl {\n-    }\n-\n-    \/**\n-     * Exports provided model into a tree of printable nodes.\n-     * @param model a {@link ClassModel}, {@link FieldModel}, {@link MethodModel}, or {@link CodeModel} to export\n-     * @param verbosity level of details to export\n-     * @return root node of the exported tree\n-     *\/\n-    public static MapNode toTree(CompoundElement<?> model, Verbosity verbosity) {\n-        return ClassPrinterImpl.modelToTree(model, verbosity);\n-    }\n-\n-    \/**\n-     * Prints provided model as structured text in JSON format.\n-     * @param model a {@link ClassModel}, {@link FieldModel}, {@link MethodModel}, or {@link CodeModel} to print\n-     * @param verbosity level of details to print\n-     * @param out consumer of the print fragments\n-     *\/\n-    public static void toJson(CompoundElement<?> model, Verbosity verbosity, Consumer<String> out) {\n-        toTree(model, verbosity).toJson(out);\n-    }\n-\n-    \/**\n-     * Prints provided model as structured text in XML format.\n-     * @param model a {@link ClassModel}, {@link FieldModel}, {@link MethodModel}, or {@link CodeModel} to print\n-     * @param verbosity level of details to print\n-     * @param out consumer of the print fragments\n-     *\/\n-    public static void toXml(CompoundElement<?> model, Verbosity verbosity, Consumer<String> out) {\n-        toTree(model, verbosity).toXml(out);\n-    }\n-\n-    \/**\n-     * Prints provided model as structured text in YAML format.\n-     * @param model a {@link ClassModel}, {@link FieldModel}, {@link MethodModel}, or {@link CodeModel} to print\n-     * @param verbosity level of details to print\n-     * @param out consumer of the print fragments\n-     *\/\n-    public static void toYaml(CompoundElement<?> model, Verbosity verbosity, Consumer<String> out) {\n-        toTree(model, verbosity).toYaml(out);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/ClassPrinter.java","additions":0,"deletions":203,"binary":false,"changes":203,"status":"deleted"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.components;\n-\n-import java.lang.constant.ClassDesc;\n-import java.util.Map;\n-import java.util.function.Function;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.FieldTransform;\n-import jdk.internal.classfile.MethodTransform;\n-import jdk.internal.classfile.impl.ClassRemapperImpl;\n-\n-\/**\n- * {@code ClassRemapper} is a {@link ClassTransform}, {@link FieldTransform},\n- * {@link MethodTransform} and {@link CodeTransform}\n- * deeply re-mapping all class references in any form, according to given map or\n- * map function.\n- * <p>\n- * The re-mapping is applied to superclass, interfaces, all kinds of descriptors\n- * and signatures, all attributes referencing classes in any form (including all\n- * types of annotations), and to all instructions referencing to classes.\n- * <p>\n- * Primitive types and arrays are never subjects of mapping and are not allowed\n- * targets of mapping.\n- * <p>\n- * Arrays of reference types are always decomposed, mapped as the base reference\n- * types and composed back to arrays.\n- *\/\n-public sealed interface ClassRemapper extends ClassTransform permits ClassRemapperImpl {\n-\n-    \/**\n-     * Creates new instance of {@code ClassRemapper} instructed with a class map.\n-     * Map may contain only re-mapping entries, identity mapping is applied by default.\n-     * @param classMap class map\n-     * @return new instance of {@code ClassRemapper}\n-     *\/\n-    static ClassRemapper of(Map<ClassDesc, ClassDesc> classMap) {\n-        return of(desc -> classMap.getOrDefault(desc, desc));\n-    }\n-\n-    \/**\n-     * Creates new instance of {@code ClassRemapper} instructed with a map function.\n-     * Map function must return valid {@link java.lang.constant.ClassDesc} of an interface\n-     * or a class, even for identity mappings.\n-     * @param mapFunction class map function\n-     * @return new instance of {@code ClassRemapper}\n-     *\/\n-    static ClassRemapper of(Function<ClassDesc, ClassDesc> mapFunction) {\n-        return new ClassRemapperImpl(mapFunction);\n-    }\n-\n-    \/**\n-     * Access method to internal class mapping function.\n-     * @param desc source class\n-     * @return target class\n-     *\/\n-    ClassDesc map(ClassDesc desc);\n-\n-    \/**\n-     * {@return this {@code ClassRemapper} as {@link FieldTransform} instance}\n-     *\/\n-    FieldTransform asFieldTransform();\n-\n-    \/**\n-     * {@return this {@code ClassRemapper} as {@link MethodTransform} instance}\n-     *\/\n-    MethodTransform asMethodTransform();\n-\n-    \/**\n-     * {@return this {@code ClassRemapper} as {@link CodeTransform} instance}\n-     *\/\n-    CodeTransform asCodeTransform();\n-\n-    \/**\n-     * Remaps the whole ClassModel into a new class file, including the class name.\n-     * @param context Classfile context\n-     * @param clm class model to re-map\n-     * @return re-mapped class file bytes\n-     *\/\n-    default byte[] remapClass(Classfile context, ClassModel clm) {\n-        return context.transform(clm, map(clm.thisClass().asSymbol()), this);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/ClassRemapper.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.components;\n-\n-import java.lang.constant.MethodTypeDesc;\n-import java.lang.reflect.AccessFlag;\n-import jdk.internal.classfile.AccessFlags;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.impl.CodeLocalsShifterImpl;\n-\n-\/**\n- * {@link CodeLocalsShifter} is a {@link CodeTransform} shifting locals to\n- * newly allocated positions to avoid conflicts during code injection.\n- * Locals pointing to the receiver or to method arguments slots are never shifted.\n- * All locals pointing beyond the method arguments are re-indexed in order of appearance.\n- *\/\n-public sealed interface CodeLocalsShifter extends CodeTransform permits CodeLocalsShifterImpl {\n-\n-    \/**\n-     * Creates a new instance of {@link CodeLocalsShifter}\n-     * with fixed local slots calculated from provided method information.\n-     * @param methodFlags flags of the method to construct {@link CodeLocalsShifter} for\n-     * @param methodDescriptor descriptor of the method to construct {@link CodeLocalsShifter} for\n-     * @return new instance of {@link CodeLocalsShifter}\n-     *\/\n-    static CodeLocalsShifter of(AccessFlags methodFlags, MethodTypeDesc methodDescriptor) {\n-        int fixed = methodFlags.has(AccessFlag.STATIC) ? 0 : 1;\n-        for (var param : methodDescriptor.parameterList())\n-            fixed += TypeKind.from(param).slotSize();\n-        return new CodeLocalsShifterImpl(fixed);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/CodeLocalsShifter.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.components;\n-\n-import java.util.IdentityHashMap;\n-import java.util.Map;\n-import java.util.function.BiFunction;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.impl.CodeRelabelerImpl;\n-\n-\/**\n- * A code relabeler is a {@link CodeTransform} replacing all occurrences\n- * of {@link jdk.internal.classfile.Label} in the transformed code with new instances.\n- * All {@link jdk.internal.classfile.instruction.LabelTarget} instructions are adjusted accordingly.\n- * Relabeled code graph is identical to the original.\n- * <p>\n- * Primary purpose of CodeRelabeler is for repeated injections of the same code blocks.\n- * Repeated injection of the same code block must be relabeled, so each instance of\n- * {@link jdk.internal.classfile.Label} is bound in the target bytecode exactly once.\n- *\/\n-public sealed interface CodeRelabeler extends CodeTransform permits CodeRelabelerImpl {\n-\n-    \/**\n-     * Creates a new instance of CodeRelabeler.\n-     * @return a new instance of CodeRelabeler\n-     *\/\n-    static CodeRelabeler of() {\n-        return of(new IdentityHashMap<>());\n-    }\n-\n-    \/**\n-     * Creates a new instance of CodeRelabeler storing the label mapping into the provided map.\n-     * @param map label map actively used for relabeling\n-     * @return a new instance of CodeRelabeler\n-     *\/\n-    static CodeRelabeler of(Map<Label, Label> map) {\n-        return of((l, cob) -> map.computeIfAbsent(l, ll -> cob.newLabel()));\n-    }\n-\n-    \/**\n-     * Creates a new instance of CodeRelabeler using provided {@link java.util.function.BiFunction}\n-     * to re-label the code.\n-     * @param mapFunction\n-     * @return a new instance of CodeRelabeler\n-     *\/\n-    static CodeRelabeler of(BiFunction<Label, CodeBuilder, Label> mapFunction) {\n-        return new CodeRelabelerImpl(mapFunction);\n-    }\n-\n-    \/**\n-     * Access method to internal re-labeling function.\n-     * @param label source label\n-     * @param codeBuilder builder to create new labels\n-     * @return target label\n-     *\/\n-    Label relabel(Label label, CodeBuilder codeBuilder);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/CodeRelabeler.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -1,114 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * <h2>Specific components, transformations, and tools built on top of the\n- * Classfile API<\/h2>\n- *\n- * The {@code jdk.internal.classfile.components} package contains specific\n- * transformation components and utility classes helping to compose very complex\n- * tasks with minimal effort.\n- *\n- * <h3>{@link ClassPrinter}<\/h3>\n- * <p>\n- * {@link ClassPrinter} is a helper class providing seamless export of a {@link\n- * jdk.internal.classfile.ClassModel}, {@link jdk.internal.classfile.FieldModel},\n- * {@link jdk.internal.classfile.MethodModel}, or {@link\n- * jdk.internal.classfile.CodeModel} into human-readable structured text in\n- * JSON, XML, or YAML format, or into a tree of traversable and printable nodes.\n- * <p>\n- * Primary purpose of {@link ClassPrinter} is to provide human-readable class\n- * info for debugging, exception handling and logging purposes. The printed\n- * class also conforms to a standard format to support automated offline\n- * processing.\n- * <p>\n- * The most frequent use case is to simply print a class:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printClass\"}\n- * <p>\n- * {@link ClassPrinter} allows to traverse tree of simple printable nodes to\n- * hook custom printer:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"customPrint\"}\n- * <p>\n- * Another use case for {@link ClassPrinter} is to simplify writing of automated\n- * tests:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"printNodesInTest\"}\n- *\n- * <h3>{@link ClassRemapper}<\/h3>\n- * ClassRemapper is a {@link jdk.internal.classfile.ClassTransform}, {@link\n- * jdk.internal.classfile.FieldTransform}, {@link\n- * jdk.internal.classfile.MethodTransform} and {@link\n- * jdk.internal.classfile.CodeTransform} deeply re-mapping all class references\n- * in any form, according to given map or map function.\n- * <p>\n- * The re-mapping is applied to superclass, interfaces, all kinds of descriptors\n- * and signatures, all attributes referencing classes in any form (including all\n- * types of annotations), and to all instructions referencing to classes.\n- * <p>\n- * Primitive types and arrays are never subjects of mapping and are not allowed\n- * targets of mapping.\n- * <p>\n- * Arrays of reference types are always decomposed, mapped as the base reference\n- * types and composed back to arrays.\n- * <p>\n- * Single class remapping example:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"singleClassRemap\"}\n- * <p>\n- * Remapping of all classes under specific package:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"allPackageRemap\"}\n- *\n- * <h3>{@link CodeLocalsShifter}<\/h3>\n- * {@link CodeLocalsShifter} is a {@link jdk.internal.classfile.CodeTransform}\n- * shifting locals to newly allocated positions to avoid conflicts during code\n- * injection. Locals pointing to the receiver or to method arguments slots are\n- * never shifted. All locals pointing beyond the method arguments are re-indexed\n- * in order of appearance.\n- * <p>\n- * Sample of code transformation shifting all locals in all methods:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"codeLocalsShifting\"}\n- *\n- * <h3>{@link CodeRelabeler}<\/h3>\n- * {@link CodeRelabeler} is a {@link jdk.internal.classfile.CodeTransform}\n- * replacing all occurrences of {@link jdk.internal.classfile.Label} in the\n- * transformed code with new instances.\n- * All {@link jdk.internal.classfile.instruction.LabelTarget} instructions are\n- * adjusted accordingly.\n- * Relabeled code graph is identical to the original.\n- * <p>\n- * Primary purpose of {@link CodeRelabeler} is for repeated injections of the\n- * same code blocks.\n- * Repeated injection of the same code block must be relabeled, so each instance\n- * of {@link jdk.internal.classfile.Label} is bound in the target bytecode\n- * exactly once.\n- * <p>\n- * Sample transformation relabeling all methods:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"codeRelabeling\"}\n- *\n- * <h3>Class Instrumentation Sample<\/h3>\n- * Following snippet is sample composition of {@link ClassRemapper}, {@link\n- * CodeLocalsShifter} and {@link CodeRelabeler} into fully functional class\n- * instrumenting transformation:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"classInstrumentation\"}\n- *\/\n-package jdk.internal.classfile.components;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/package-info.java","additions":0,"deletions":114,"binary":false,"changes":114,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.constantpool;\n-\n-import jdk.internal.classfile.BootstrapMethodEntry;\n-\n-\/**\n- * Models a dynamic constant pool entry, which is either {@link ConstantDynamicEntry}\n- * or {@link InvokeDynamicEntry}.\n- *\/\n-public sealed interface DynamicConstantPoolEntry extends PoolEntry\n-        permits ConstantDynamicEntry, InvokeDynamicEntry {\n-\n-    \/**\n-     * {@return the entry in the bootstrap method table for this constant}\n-     *\/\n-    BootstrapMethodEntry bootstrap();\n-\n-    \/**\n-     * {@return index of the entry in the bootstrap method table for this constant}\n-     *\/\n-    int bootstrapMethodIndex();\n-\n-    \/**\n-     * {@return the invocation name and type}\n-     *\/\n-    NameAndTypeEntry nameAndType();\n-\n-    \/**\n-     * {@return the invocation name}\n-     *\/\n-    default Utf8Entry name() {\n-        return nameAndType().name();\n-    }\n-\n-    \/**\n-     * {@return the invocation type}\n-     *\/\n-    default Utf8Entry type() {\n-        return nameAndType().type();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/DynamicConstantPoolEntry.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.constantpool;\n-\n-import java.lang.constant.ConstantDesc;\n-import jdk.internal.classfile.TypeKind;\n-\n-\/**\n- * Marker interface for constant pool entries suitable for loading via the\n- * {@code LDC} instructions.\n- *\/\n-public sealed interface LoadableConstantEntry extends PoolEntry\n-        permits ClassEntry, ConstantDynamicEntry, ConstantValueEntry, MethodHandleEntry, MethodTypeEntry {\n-\n-    \/**\n-     * {@return the constant described by this entry}\n-     *\/\n-    ConstantDesc constantValue();\n-\n-    \/**\n-     * {@return the type of the constant}\n-     *\/\n-    default TypeKind typeKind() {\n-        return TypeKind.ReferenceType;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/LoadableConstantEntry.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.constantpool;\n-\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.impl.AbstractPoolEntry;\n-\n-\/**\n- * Models a {@code CONSTANT_Long_info} constant in the constant pool of a\n- * classfile.\n- * @jvms 4.4.5 The CONSTANT_Long_info and CONSTANT_Double_info Structures\n- *\/\n-public sealed interface LongEntry\n-        extends AnnotationConstantValueEntry, ConstantValueEntry\n-        permits AbstractPoolEntry.LongEntryImpl {\n-\n-    \/**\n-     * {@return the long value}\n-     *\/\n-    long longValue();\n-\n-    \/**\n-     * {@return the type of the constant}\n-     *\/\n-    @Override\n-    default TypeKind typeKind() {\n-        return TypeKind.LongType;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/LongEntry.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.constantpool;\n-\n-import jdk.internal.classfile.WritableElement;\n-\n-\/**\n- * Models an entry in the constant pool of a classfile.\n- *\/\n-public sealed interface PoolEntry extends WritableElement<PoolEntry>\n-        permits AnnotationConstantValueEntry, DynamicConstantPoolEntry,\n-                LoadableConstantEntry, MemberRefEntry, ModuleEntry, NameAndTypeEntry,\n-                PackageEntry {\n-\n-    \/**\n-     * {@return the constant pool this entry is from}\n-     *\/\n-    ConstantPool constantPool();\n-\n-    \/**\n-     * {@return the constant pool tag that describes the type of this entry}\n-     *\/\n-    byte tag();\n-\n-    \/**\n-     * {@return the index within the constant pool corresponding to this entry}\n-     *\/\n-    int index();\n-\n-    \/**\n-     * {@return the number of constant pool slots this entry consumes}\n-     *\/\n-    int width();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/PoolEntry.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -27,5 +27,3 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.AttributeMapper;\n-import jdk.internal.classfile.BufWriter;\n-\n-import static jdk.internal.classfile.Classfile.JAVA_1_VERSION;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.BufWriter;\n@@ -38,1 +36,0 @@\n-    private final int majorVersion;\n@@ -48,11 +45,0 @@\n-        this(name, allowMultiple, JAVA_1_VERSION);\n-    }\n-\n-    public AbstractAttributeMapper(String name,\n-                                   int majorVersion) {\n-        this(name, false, majorVersion);\n-    }\n-\n-    public AbstractAttributeMapper(String name,\n-                                   boolean allowMultiple,\n-                                   int majorVersion) {\n@@ -61,1 +47,0 @@\n-        this.majorVersion = majorVersion;\n@@ -84,5 +69,0 @@\n-    @Override\n-    public int validSince() {\n-        return majorVersion;\n-    }\n-\n@@ -91,2 +71,2 @@\n-        return String.format(\"AttributeMapper[name=%s, allowMultiple=%b, validSince=%d]\",\n-                name, allowMultiple, majorVersion);\n+        return String.format(\"AttributeMapper[name=%s, allowMultiple=%b, stability=%s]\",\n+                name, allowMultiple, stability());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.java","additions":5,"deletions":25,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractBoundLocalVariable.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.classfile.Attribute;\n+import java.lang.classfile.Attribute;\n@@ -33,1 +33,1 @@\n-    protected final ClassfileImpl context;\n+    protected final ClassFileImpl context;\n@@ -37,1 +37,1 @@\n-    public AbstractDirectBuilder(SplitConstantPool constantPool, ClassfileImpl context) {\n+    public AbstractDirectBuilder(SplitConstantPool constantPool, ClassFileImpl context) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractDirectBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,37 +31,37 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.instruction.SwitchCase;\n-import jdk.internal.classfile.constantpool.FieldRefEntry;\n-import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.instruction.ArrayLoadInstruction;\n-import jdk.internal.classfile.instruction.ArrayStoreInstruction;\n-import jdk.internal.classfile.instruction.BranchInstruction;\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n-import jdk.internal.classfile.instruction.ConvertInstruction;\n-import jdk.internal.classfile.instruction.DiscontinuedInstruction;\n-import jdk.internal.classfile.instruction.FieldInstruction;\n-import jdk.internal.classfile.instruction.IncrementInstruction;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n-import jdk.internal.classfile.instruction.LoadInstruction;\n-import jdk.internal.classfile.instruction.LookupSwitchInstruction;\n-import jdk.internal.classfile.instruction.MonitorInstruction;\n-import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.internal.classfile.instruction.NewObjectInstruction;\n-import jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction;\n-import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n-import jdk.internal.classfile.instruction.NopInstruction;\n-import jdk.internal.classfile.instruction.OperatorInstruction;\n-import jdk.internal.classfile.instruction.ReturnInstruction;\n-import jdk.internal.classfile.instruction.StackInstruction;\n-import jdk.internal.classfile.instruction.StoreInstruction;\n-import jdk.internal.classfile.instruction.TableSwitchInstruction;\n-import jdk.internal.classfile.instruction.ThrowInstruction;\n-import jdk.internal.classfile.instruction.TypeCheckInstruction;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.instruction.SwitchCase;\n+import java.lang.classfile.constantpool.FieldRefEntry;\n+import java.lang.classfile.constantpool.InterfaceMethodRefEntry;\n+import java.lang.classfile.constantpool.InvokeDynamicEntry;\n+import java.lang.classfile.constantpool.LoadableConstantEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.instruction.ArrayLoadInstruction;\n+import java.lang.classfile.instruction.ArrayStoreInstruction;\n+import java.lang.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.instruction.ConvertInstruction;\n+import java.lang.classfile.instruction.DiscontinuedInstruction;\n+import java.lang.classfile.instruction.FieldInstruction;\n+import java.lang.classfile.instruction.IncrementInstruction;\n+import java.lang.classfile.instruction.InvokeDynamicInstruction;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.LookupSwitchInstruction;\n+import java.lang.classfile.instruction.MonitorInstruction;\n+import java.lang.classfile.instruction.NewMultiArrayInstruction;\n+import java.lang.classfile.instruction.NewObjectInstruction;\n+import java.lang.classfile.instruction.NewPrimitiveArrayInstruction;\n+import java.lang.classfile.instruction.NewReferenceArrayInstruction;\n+import java.lang.classfile.instruction.NopInstruction;\n+import java.lang.classfile.instruction.OperatorInstruction;\n+import java.lang.classfile.instruction.ReturnInstruction;\n+import java.lang.classfile.instruction.StackInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n+import java.lang.classfile.instruction.TableSwitchInstruction;\n+import java.lang.classfile.instruction.ThrowInstruction;\n+import java.lang.classfile.instruction.TypeCheckInstruction;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n@@ -422,1 +422,1 @@\n-            return method().tag() == Classfile.TAG_INTERFACEMETHODREF;\n+            return method().tag() == ClassFile.TAG_INTERFACEMETHODREF;\n@@ -427,1 +427,1 @@\n-            return Util.parameterSlots(Util.methodTypeSymbol(method().nameAndType()));\n+            return 0;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -32,0 +32,23 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantDynamicEntry;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.constantpool.DoubleEntry;\n+import java.lang.classfile.constantpool.FieldRefEntry;\n+import java.lang.classfile.constantpool.FloatEntry;\n+import java.lang.classfile.constantpool.IntegerEntry;\n+import java.lang.classfile.constantpool.InterfaceMethodRefEntry;\n+import java.lang.classfile.constantpool.InvokeDynamicEntry;\n+import java.lang.classfile.constantpool.LongEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.constantpool.MethodHandleEntry;\n+import java.lang.classfile.constantpool.MethodRefEntry;\n+import java.lang.classfile.constantpool.MethodTypeEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.constantpool.PackageEntry;\n+import java.lang.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.constantpool.StringEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -34,23 +57,0 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.constantpool.DoubleEntry;\n-import jdk.internal.classfile.constantpool.FieldRefEntry;\n-import jdk.internal.classfile.constantpool.FloatEntry;\n-import jdk.internal.classfile.constantpool.IntegerEntry;\n-import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.internal.classfile.constantpool.LongEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n-import jdk.internal.classfile.constantpool.MethodRefEntry;\n-import jdk.internal.classfile.constantpool.MethodTypeEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.PackageEntry;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n-import jdk.internal.classfile.constantpool.StringEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n@@ -59,3 +59,0 @@\n-import java.lang.constant.ModuleDesc;\n-import java.lang.constant.PackageDesc;\n-\n@@ -131,1 +128,1 @@\n-        return (tag == Classfile.TAG_LONG || tag == Classfile.TAG_DOUBLE) ? 2 : 1;\n+        return (tag == ClassFile.TAG_LONG || tag == ClassFile.TAG_DOUBLE) ? 2 : 1;\n@@ -165,1 +162,1 @@\n-            super(cpm, Classfile.TAG_UTF8, index, 0);\n+            super(cpm, ClassFile.TAG_UTF8, index, 0);\n@@ -177,1 +174,1 @@\n-            super(cpm, Classfile.TAG_UTF8, index, 0);\n+            super(cpm, ClassFile.TAG_UTF8, index, 0);\n@@ -188,1 +185,1 @@\n-            super(cpm, Classfile.TAG_UTF8, index, 0);\n+            super(cpm, ClassFile.TAG_UTF8, index, 0);\n@@ -560,1 +557,1 @@\n-            super(cpm, Classfile.TAG_CLASS, index, name);\n+            super(cpm, ClassFile.TAG_CLASS, index, name);\n@@ -598,1 +595,1 @@\n-            super(cpm, Classfile.TAG_PACKAGE, index, name);\n+            super(cpm, ClassFile.TAG_PACKAGE, index, name);\n@@ -624,1 +621,1 @@\n-            super(cpm, Classfile.TAG_MODULE, index, name);\n+            super(cpm, ClassFile.TAG_MODULE, index, name);\n@@ -653,1 +650,1 @@\n-            super(cpm, Classfile.TAG_NAMEANDTYPE, index, name, type);\n+            super(cpm, ClassFile.TAG_NAMEANDTYPE, index, name, type);\n@@ -744,1 +741,1 @@\n-            super(cpm, Classfile.TAG_FIELDREF, index, owner, nameAndType);\n+            super(cpm, ClassFile.TAG_FIELDREF, index, owner, nameAndType);\n@@ -757,1 +754,1 @@\n-            super(cpm, Classfile.TAG_METHODREF, index, owner, nameAndType);\n+            super(cpm, ClassFile.TAG_METHODREF, index, owner, nameAndType);\n@@ -770,1 +767,1 @@\n-            super(cpm, Classfile.TAG_INTERFACEMETHODREF, index, owner, nameAndType);\n+            super(cpm, ClassFile.TAG_INTERFACEMETHODREF, index, owner, nameAndType);\n@@ -855,1 +852,1 @@\n-            super(cpm, Classfile.TAG_INVOKEDYNAMIC, index, hash, bootstrapMethod, nameAndType);\n+            super(cpm, ClassFile.TAG_INVOKEDYNAMIC, index, hash, bootstrapMethod, nameAndType);\n@@ -860,1 +857,1 @@\n-            super(cpm, Classfile.TAG_INVOKEDYNAMIC, index, hash2(Classfile.TAG_INVOKEDYNAMIC, bsmIndex, nameAndType.index()),\n+            super(cpm, ClassFile.TAG_INVOKEDYNAMIC, index, hash2(ClassFile.TAG_INVOKEDYNAMIC, bsmIndex, nameAndType.index()),\n@@ -875,1 +872,1 @@\n-            super(cpm, Classfile.TAG_CONSTANTDYNAMIC, index, hash, bootstrapMethod, nameAndType);\n+            super(cpm, ClassFile.TAG_CONSTANTDYNAMIC, index, hash, bootstrapMethod, nameAndType);\n@@ -880,1 +877,1 @@\n-            super(cpm, Classfile.TAG_CONSTANTDYNAMIC, index, hash2(Classfile.TAG_CONSTANTDYNAMIC, bsmIndex, nameAndType.index()),\n+            super(cpm, ClassFile.TAG_CONSTANTDYNAMIC, index, hash2(ClassFile.TAG_CONSTANTDYNAMIC, bsmIndex, nameAndType.index()),\n@@ -898,1 +895,1 @@\n-            super(cpm, Classfile.TAG_METHODHANDLE, index, hash);\n+            super(cpm, ClassFile.TAG_METHODHANDLE, index, hash);\n@@ -905,1 +902,1 @@\n-            super(cpm, Classfile.TAG_METHODHANDLE, index, hash2(Classfile.TAG_METHODHANDLE, refKind, reference.index()));\n+            super(cpm, ClassFile.TAG_METHODHANDLE, index, hash2(ClassFile.TAG_METHODHANDLE, refKind, reference.index()));\n@@ -965,1 +962,1 @@\n-            super(cpm, Classfile.TAG_METHODTYPE, index, descriptor);\n+            super(cpm, ClassFile.TAG_METHODTYPE, index, descriptor);\n@@ -1008,1 +1005,1 @@\n-            super(cpm, Classfile.TAG_STRING, index, utf8);\n+            super(cpm, ClassFile.TAG_STRING, index, utf8);\n@@ -1076,1 +1073,1 @@\n-            super(cpm, Classfile.TAG_INTEGER, index, i);\n+            super(cpm, ClassFile.TAG_INTEGER, index, i);\n@@ -1109,1 +1106,1 @@\n-            super(cpm, Classfile.TAG_FLOAT, index, f);\n+            super(cpm, ClassFile.TAG_FLOAT, index, f);\n@@ -1141,1 +1138,1 @@\n-            super(cpm, Classfile.TAG_LONG, index, l);\n+            super(cpm, ClassFile.TAG_LONG, index, l);\n@@ -1173,1 +1170,1 @@\n-            super(cpm, Classfile.TAG_DOUBLE, index, d);\n+            super(cpm, ClassFile.TAG_DOUBLE, index, d);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":46,"deletions":49,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -29,9 +29,9 @@\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.instruction.CharacterRange;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n-import jdk.internal.classfile.instruction.LocalVariable;\n-import jdk.internal.classfile.instruction.LocalVariableType;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.PseudoInstruction;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.instruction.CharacterRange;\n+import java.lang.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.instruction.LocalVariable;\n+import java.lang.classfile.instruction.LocalVariableType;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.PseudoInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPseudoInstruction.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,4 +31,4 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.AttributedElement;\n-import jdk.internal.classfile.ClassfileElement;\n-import jdk.internal.classfile.CompoundElement;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.AttributedElement;\n+import java.lang.classfile.ClassFileElement;\n+import java.lang.classfile.CompoundElement;\n@@ -36,1 +36,1 @@\n-public abstract sealed class AbstractUnboundModel<E extends ClassfileElement>\n+public abstract sealed class AbstractUnboundModel<E extends ClassFileElement>\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractUnboundModel.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.classfile.AccessFlags;\n+import java.lang.classfile.AccessFlags;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AccessFlagsImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.*;\n@@ -33,1 +33,1 @@\n-import static jdk.internal.classfile.Classfile.*;\n+import static java.lang.classfile.ClassFile.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,8 +28,8 @@\n-import jdk.internal.classfile.Annotation;\n-import jdk.internal.classfile.AnnotationElement;\n-import jdk.internal.classfile.AnnotationValue;\n-import jdk.internal.classfile.ClassReader;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.TypeAnnotation;\n-import static jdk.internal.classfile.Classfile.*;\n-import static jdk.internal.classfile.TypeAnnotation.TargetInfo.*;\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.ClassReader;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.TypeAnnotation;\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.classfile.TypeAnnotation.TargetInfo.*;\n@@ -38,2 +38,2 @@\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,3 +30,3 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.AttributeMapper;\n-import jdk.internal.classfile.BufWriter;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.BufWriter;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AttributeHolder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,5 +27,5 @@\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.instruction.LabelTarget;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.instruction.LabelTarget;\n@@ -34,1 +34,1 @@\n-import jdk.internal.classfile.Instruction;\n+import java.lang.classfile.Instruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BlockCodeBuilderImpl.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,5 +29,5 @@\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.BootstrapMethodEntry;\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.BootstrapMethodEntry;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.constantpool.LoadableConstantEntry;\n+import java.lang.classfile.constantpool.MethodHandleEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BootstrapMethodEntryImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,10 +34,10 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.constantpool.ConstantValueEntry;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.PackageEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.ConstantValueEntry;\n+import java.lang.classfile.constantpool.LoadableConstantEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.constantpool.PackageEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.instruction.CharacterRange;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.instruction.CharacterRange;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundCharacterRange.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-import jdk.internal.classfile.attribute.LocalVariableInfo;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.instruction.LocalVariable;\n+import java.lang.classfile.attribute.LocalVariableInfo;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.instruction.LocalVariable;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundLocalVariable.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n-import jdk.internal.classfile.attribute.LocalVariableTypeInfo;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.instruction.LocalVariableType;\n+import java.lang.classfile.attribute.LocalVariableTypeInfo;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.instruction.LocalVariableType;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundLocalVariableType.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,4 +29,4 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassReader;\n-import jdk.internal.classfile.attribute.RecordComponentInfo;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassReader;\n+import java.lang.classfile.attribute.RecordComponentInfo;\n+import java.lang.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundRecordComponentInfo.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,6 +32,6 @@\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.WritableElement;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.WritableElement;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -42,1 +42,1 @@\n-    private final ClassfileImpl context;\n+    private final ClassFileImpl context;\n@@ -49,1 +49,1 @@\n-    public BufWriterImpl(ConstantPoolBuilder constantPool, ClassfileImpl context) {\n+    public BufWriterImpl(ConstantPoolBuilder constantPool, ClassFileImpl context) {\n@@ -53,1 +53,1 @@\n-    public BufWriterImpl(ConstantPoolBuilder constantPool, ClassfileImpl context, int initialSize) {\n+    public BufWriterImpl(ConstantPoolBuilder constantPool, ClassFileImpl context, int initialSize) {\n@@ -57,1 +57,1 @@\n-    public BufWriterImpl(ConstantPoolBuilder constantPool, ClassfileImpl context, int initialSize, ClassEntry thisClass, int majorVersion) {\n+    public BufWriterImpl(ConstantPoolBuilder constantPool, ClassFileImpl context, int initialSize, ClassEntry thisClass, int majorVersion) {\n@@ -90,1 +90,1 @@\n-    public ClassfileImpl context() {\n+    public ClassFileImpl context() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,12 +27,12 @@\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n-import jdk.internal.classfile.instruction.IncrementInstruction;\n-import jdk.internal.classfile.instruction.LoadInstruction;\n-import jdk.internal.classfile.instruction.StoreInstruction;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.instruction.IncrementInstruction;\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n@@ -48,1 +48,1 @@\n-    private final ClassfileImpl context;\n+    private final ClassFileImpl context;\n@@ -58,1 +58,1 @@\n-                               ClassfileImpl context,\n+                               ClassFileImpl context,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -39,1 +39,1 @@\n-    private final ClassfileImpl context;\n+    private final ClassFileImpl context;\n@@ -47,1 +47,1 @@\n-                                ClassfileImpl context,\n+                                ClassFileImpl context,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.internal.classfile.AccessFlags;\n+import java.lang.classfile.AccessFlags;\n@@ -35,10 +35,10 @@\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.MethodBuilder;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.MethodBuilder;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -50,1 +50,1 @@\n-    private final ClassfileImpl context;\n+    private final ClassFileImpl context;\n@@ -59,1 +59,1 @@\n-                                 ClassfileImpl context,\n+                                 ClassFileImpl context,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -37,10 +37,10 @@\n-import jdk.internal.classfile.BootstrapMethodEntry;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.BootstrapMethodEntry;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantDynamicEntry;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.constantpool.LoadableConstantEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.constantpool.MethodHandleEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.Opcode;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.Opcode;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CatchBuilderImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,3 +30,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedClassBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,4 +27,4 @@\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.Label;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.Label;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedCodeBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,4 +30,4 @@\n-import jdk.internal.classfile.FieldBuilder;\n-import jdk.internal.classfile.FieldElement;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.FieldBuilder;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedFieldBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,7 +30,7 @@\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.MethodBuilder;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.MethodBuilder;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedMethodBuilder.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.classfile.impl;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Consumer;\n+\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassFile.*;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+\n+public record ClassFileImpl(StackMapsOption stackMapsOption,\n+                            DebugElementsOption debugElementsOption,\n+                            LineNumbersOption lineNumbersOption,\n+                            AttributesProcessingOption attributesProcessingOption,\n+                            ConstantPoolSharingOption constantPoolSharingOption,\n+                            ShortJumpsOption shortJumpsOption,\n+                            DeadCodeOption deadCodeOption,\n+                            DeadLabelsOption deadLabelsOption,\n+                            ClassHierarchyResolverOption classHierarchyResolverOption,\n+                            AttributeMapperOption attributeMapperOption) implements ClassFile {\n+\n+    public static final ClassFileImpl DEFAULT_CONTEXT = new ClassFileImpl(\n+            StackMapsOption.STACK_MAPS_WHEN_REQUIRED,\n+            DebugElementsOption.PASS_DEBUG,\n+            LineNumbersOption.PASS_LINE_NUMBERS,\n+            AttributesProcessingOption.PASS_ALL_ATTRIBUTES,\n+            ConstantPoolSharingOption.SHARED_POOL,\n+            ShortJumpsOption.FIX_SHORT_JUMPS,\n+            DeadCodeOption.PATCH_DEAD_CODE,\n+            DeadLabelsOption.FAIL_ON_DEAD_LABELS,\n+            new ClassHierarchyResolverOptionImpl(ClassHierarchyResolver.defaultResolver()),\n+            new AttributeMapperOptionImpl(new Function<>() {\n+                @Override\n+                public AttributeMapper<?> apply(Utf8Entry k) {\n+                    return null;\n+                }\n+            }));\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public ClassFileImpl withOptions(Option... options) {\n+        var smo = stackMapsOption;\n+        var deo = debugElementsOption;\n+        var lno = lineNumbersOption;\n+        var apo = attributesProcessingOption;\n+        var cpso = constantPoolSharingOption;\n+        var sjo = shortJumpsOption;\n+        var dco = deadCodeOption;\n+        var dlo = deadLabelsOption;\n+        var chro = classHierarchyResolverOption;\n+        var amo = attributeMapperOption;\n+        for (var o : options) {\n+            switch (o) {\n+                case StackMapsOption oo -> smo = oo;\n+                case DebugElementsOption oo -> deo = oo;\n+                case LineNumbersOption oo -> lno = oo;\n+                case AttributesProcessingOption oo -> apo = oo;\n+                case ConstantPoolSharingOption oo -> cpso = oo;\n+                case ShortJumpsOption oo -> sjo = oo;\n+                case DeadCodeOption oo -> dco = oo;\n+                case DeadLabelsOption oo -> dlo = oo;\n+                case ClassHierarchyResolverOption oo -> chro = oo;\n+                case AttributeMapperOption oo -> amo = oo;\n+            }\n+        }\n+        return new ClassFileImpl(smo, deo, lno, apo, cpso, sjo, dco, dlo, chro, amo);\n+    }\n+\n+    @Override\n+    public ClassModel parse(byte[] bytes) {\n+        return new ClassImpl(bytes, this);\n+    }\n+\n+    @Override\n+    public byte[] build(ClassEntry thisClassEntry,\n+                         ConstantPoolBuilder constantPool,\n+                         Consumer<? super ClassBuilder> handler) {\n+        thisClassEntry = AbstractPoolEntry.maybeClone(constantPool, thisClassEntry);\n+        DirectClassBuilder builder = new DirectClassBuilder((SplitConstantPool)constantPool, this, thisClassEntry);\n+        handler.accept(builder);\n+        return builder.build();\n+    }\n+\n+    @Override\n+    public byte[] transform(ClassModel model, ClassEntry newClassName, ClassTransform transform) {\n+        ConstantPoolBuilder constantPool = constantPoolSharingOption() == ConstantPoolSharingOption.SHARED_POOL\n+                                                                     ? ConstantPoolBuilder.of(model)\n+                                                                     : ConstantPoolBuilder.of();\n+        return build(newClassName, constantPool,\n+                new Consumer<ClassBuilder>() {\n+                    @Override\n+                    public void accept(ClassBuilder builder) {\n+                        ((DirectClassBuilder) builder).setOriginal((ClassImpl)model);\n+                        ((DirectClassBuilder) builder).setSizeHint(((ClassImpl)model).classfileLength());\n+                        builder.transform((ClassImpl)model, transform);\n+                    }\n+                });\n+    }\n+    public record AttributeMapperOptionImpl(Function<Utf8Entry, AttributeMapper<?>> attributeMapper)\n+            implements AttributeMapperOption {\n+    }\n+\n+    public record ClassHierarchyResolverOptionImpl(ClassHierarchyResolver classHierarchyResolver)\n+            implements ClassHierarchyResolverOption {\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassFileImpl.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import java.lang.classfile.ClassFileVersion;\n+\n+public final class ClassFileVersionImpl\n+        extends AbstractElement\n+        implements ClassFileVersion {\n+    private final int majorVersion, minorVersion;\n+\n+    public ClassFileVersionImpl(int majorVersion, int minorVersion) {\n+        this.majorVersion = majorVersion;\n+        this.minorVersion = minorVersion;\n+    }\n+\n+    @Override\n+    public int majorVersion() {\n+        return majorVersion;\n+    }\n+\n+    @Override\n+    public int minorVersion() {\n+        return minorVersion;\n+    }\n+\n+    @Override\n+    public void writeTo(DirectClassBuilder builder) {\n+        builder.setVersion(majorVersion, minorVersion);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"ClassFileVersion[majorVersion=%d, minorVersion=%d]\", majorVersion, minorVersion);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassFileVersionImpl.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.internal.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassHierarchyResolver;\n@@ -42,1 +42,1 @@\n-import static jdk.internal.classfile.Classfile.*;\n+import static java.lang.classfile.ClassFile.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.constantpool.ClassEntry;\n@@ -37,16 +37,16 @@\n-import jdk.internal.classfile.AccessFlags;\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.AttributeMapper;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassReader;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassfileVersion;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.Interfaces;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.Superclass;\n+import java.lang.classfile.AccessFlags;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassReader;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassFileVersion;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.Interfaces;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.Superclass;\n@@ -66,1 +66,1 @@\n-    public ClassImpl(byte[] cfbytes, ClassfileImpl context) {\n+    public ClassImpl(byte[] cfbytes, ClassFileImpl context) {\n@@ -159,1 +159,1 @@\n-        consumer.accept(ClassfileVersion.of(majorVersion(), minorVersion()));\n+        consumer.accept(ClassFileVersion.of(majorVersion(), minorVersion()));\n@@ -190,1 +190,1 @@\n-               && majorVersion() >= Classfile.JAVA_9_VERSION\n+               && majorVersion() >= ClassFile.JAVA_9_VERSION\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassImpl.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-import jdk.internal.classfile.Annotation;\n+import java.lang.classfile.Annotation;\n@@ -46,14 +46,14 @@\n-import jdk.internal.classfile.AnnotationElement;\n-import jdk.internal.classfile.AnnotationValue;\n-import jdk.internal.classfile.AnnotationValue.*;\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.components.ClassPrinter.*;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.TypeAnnotation;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.attribute.StackMapFrameInfo.*;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.instruction.*;\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.AnnotationValue.*;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.components.ClassPrinter.*;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.TypeAnnotation;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.attribute.StackMapFrameInfo.*;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.instruction.*;\n@@ -61,3 +61,3 @@\n-import static jdk.internal.classfile.Classfile.*;\n-import jdk.internal.classfile.CompoundElement;\n-import jdk.internal.classfile.FieldModel;\n+import static java.lang.classfile.ClassFile.*;\n+import java.lang.classfile.CompoundElement;\n+import java.lang.classfile.FieldModel;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -34,29 +34,21 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantPoolException;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-\n-import static jdk.internal.classfile.Classfile.TAG_CLASS;\n-import static jdk.internal.classfile.Classfile.TAG_CONSTANTDYNAMIC;\n-import static jdk.internal.classfile.Classfile.TAG_DOUBLE;\n-import static jdk.internal.classfile.Classfile.TAG_FIELDREF;\n-import static jdk.internal.classfile.Classfile.TAG_FLOAT;\n-import static jdk.internal.classfile.Classfile.TAG_INTEGER;\n-import static jdk.internal.classfile.Classfile.TAG_INTERFACEMETHODREF;\n-import static jdk.internal.classfile.Classfile.TAG_INVOKEDYNAMIC;\n-import static jdk.internal.classfile.Classfile.TAG_LONG;\n-import static jdk.internal.classfile.Classfile.TAG_METHODHANDLE;\n-import static jdk.internal.classfile.Classfile.TAG_METHODREF;\n-import static jdk.internal.classfile.Classfile.TAG_METHODTYPE;\n-import static jdk.internal.classfile.Classfile.TAG_MODULE;\n-import static jdk.internal.classfile.Classfile.TAG_NAMEANDTYPE;\n-import static jdk.internal.classfile.Classfile.TAG_PACKAGE;\n-import static jdk.internal.classfile.Classfile.TAG_STRING;\n-import static jdk.internal.classfile.Classfile.TAG_UTF8;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.PackageEntry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n+import java.lang.classfile.constantpool.*;\n+\n+import static java.lang.classfile.ClassFile.TAG_CLASS;\n+import static java.lang.classfile.ClassFile.TAG_CONSTANTDYNAMIC;\n+import static java.lang.classfile.ClassFile.TAG_DOUBLE;\n+import static java.lang.classfile.ClassFile.TAG_FIELDREF;\n+import static java.lang.classfile.ClassFile.TAG_FLOAT;\n+import static java.lang.classfile.ClassFile.TAG_INTEGER;\n+import static java.lang.classfile.ClassFile.TAG_INTERFACEMETHODREF;\n+import static java.lang.classfile.ClassFile.TAG_INVOKEDYNAMIC;\n+import static java.lang.classfile.ClassFile.TAG_LONG;\n+import static java.lang.classfile.ClassFile.TAG_METHODHANDLE;\n+import static java.lang.classfile.ClassFile.TAG_METHODREF;\n+import static java.lang.classfile.ClassFile.TAG_METHODTYPE;\n+import static java.lang.classfile.ClassFile.TAG_MODULE;\n+import static java.lang.classfile.ClassFile.TAG_NAMEANDTYPE;\n+import static java.lang.classfile.ClassFile.TAG_PACKAGE;\n+import static java.lang.classfile.ClassFile.TAG_STRING;\n+import static java.lang.classfile.ClassFile.TAG_UTF8;\n@@ -79,1 +71,1 @@\n-    final ClassfileImpl context;\n+    final ClassFileImpl context;\n@@ -88,1 +80,1 @@\n-                    ClassfileImpl context) {\n+                    ClassFileImpl context) {\n@@ -96,0 +88,3 @@\n+        if (readU2(6) > ClassFile.latestMajorVersion()) {\n+            throw new IllegalArgumentException(\"Unsupported class file version: \" + readU2(6));\n+        }\n@@ -136,1 +131,1 @@\n-    public ClassfileImpl context() {\n+    public ClassFileImpl context() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":27,"deletions":32,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -27,55 +27,55 @@\n-import jdk.internal.classfile.Annotation;\n-import jdk.internal.classfile.AnnotationElement;\n-import jdk.internal.classfile.AnnotationValue;\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassSignature;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.FieldBuilder;\n-import jdk.internal.classfile.FieldElement;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.FieldTransform;\n-import jdk.internal.classfile.Interfaces;\n-import jdk.internal.classfile.MethodBuilder;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.MethodSignature;\n-import jdk.internal.classfile.MethodTransform;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.Superclass;\n-import jdk.internal.classfile.TypeAnnotation;\n-import jdk.internal.classfile.attribute.AnnotationDefaultAttribute;\n-import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n-import jdk.internal.classfile.attribute.ExceptionsAttribute;\n-import jdk.internal.classfile.attribute.InnerClassInfo;\n-import jdk.internal.classfile.attribute.InnerClassesAttribute;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.ModuleProvideInfo;\n-import jdk.internal.classfile.attribute.NestHostAttribute;\n-import jdk.internal.classfile.attribute.NestMembersAttribute;\n-import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n-import jdk.internal.classfile.attribute.RecordAttribute;\n-import jdk.internal.classfile.attribute.RecordComponentInfo;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.SignatureAttribute;\n-import jdk.internal.classfile.components.ClassRemapper;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.instruction.ConstantInstruction.LoadConstantInstruction;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n-import jdk.internal.classfile.instruction.FieldInstruction;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n-import jdk.internal.classfile.instruction.LocalVariable;\n-import jdk.internal.classfile.instruction.LocalVariableType;\n-import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.internal.classfile.instruction.NewObjectInstruction;\n-import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n-import jdk.internal.classfile.instruction.TypeCheckInstruction;\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassSignature;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.FieldBuilder;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.FieldTransform;\n+import java.lang.classfile.Interfaces;\n+import java.lang.classfile.MethodBuilder;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.MethodSignature;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.Superclass;\n+import java.lang.classfile.TypeAnnotation;\n+import java.lang.classfile.attribute.AnnotationDefaultAttribute;\n+import java.lang.classfile.attribute.EnclosingMethodAttribute;\n+import java.lang.classfile.attribute.ExceptionsAttribute;\n+import java.lang.classfile.attribute.InnerClassInfo;\n+import java.lang.classfile.attribute.InnerClassesAttribute;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.ModuleProvideInfo;\n+import java.lang.classfile.attribute.NestHostAttribute;\n+import java.lang.classfile.attribute.NestMembersAttribute;\n+import java.lang.classfile.attribute.PermittedSubclassesAttribute;\n+import java.lang.classfile.attribute.RecordAttribute;\n+import java.lang.classfile.attribute.RecordComponentInfo;\n+import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.components.ClassRemapper;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.instruction.ConstantInstruction.LoadConstantInstruction;\n+import java.lang.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.instruction.FieldInstruction;\n+import java.lang.classfile.instruction.InvokeDynamicInstruction;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.instruction.LocalVariable;\n+import java.lang.classfile.instruction.LocalVariableType;\n+import java.lang.classfile.instruction.NewMultiArrayInstruction;\n+import java.lang.classfile.instruction.NewObjectInstruction;\n+import java.lang.classfile.instruction.NewReferenceArrayInstruction;\n+import java.lang.classfile.instruction.TypeCheckInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":55,"deletions":55,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1,138 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.classfile.impl;\n-\n-import java.util.List;\n-import java.util.function.Function;\n-import java.util.function.Consumer;\n-\n-import jdk.internal.classfile.AttributeMapper;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Classfile.*;\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.ClassHierarchyResolver;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-\n-public record ClassfileImpl(StackMapsOption stackMapsOption,\n-                            DebugElementsOption debugElementsOption,\n-                            LineNumbersOption lineNumbersOption,\n-                            AttributesProcessingOption attributesProcessingOption,\n-                            ConstantPoolSharingOption constantPoolSharingOption,\n-                            ShortJumpsOption shortJumpsOption,\n-                            DeadCodeOption deadCodeOption,\n-                            DeadLabelsOption deadLabelsOption,\n-                            ClassHierarchyResolverOption classHierarchyResolverOption,\n-                            AttributeMapperOption attributeMapperOption) implements Classfile {\n-\n-    public static final ClassfileImpl DEFAULT_CONTEXT = new ClassfileImpl(\n-            StackMapsOption.STACK_MAPS_WHEN_REQUIRED,\n-            DebugElementsOption.PASS_DEBUG,\n-            LineNumbersOption.PASS_LINE_NUMBERS,\n-            AttributesProcessingOption.PASS_ALL_ATTRIBUTES,\n-            ConstantPoolSharingOption.SHARED_POOL,\n-            ShortJumpsOption.FIX_SHORT_JUMPS,\n-            DeadCodeOption.PATCH_DEAD_CODE,\n-            DeadLabelsOption.FAIL_ON_DEAD_LABELS,\n-            new ClassHierarchyResolverOptionImpl(ClassHierarchyResolver.defaultResolver()),\n-            new AttributeMapperOptionImpl(new Function<>() {\n-                @Override\n-                public AttributeMapper<?> apply(Utf8Entry k) {\n-                    return null;\n-                }\n-            }));\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public ClassfileImpl withOptions(Option... options) {\n-        var smo = stackMapsOption;\n-        var deo = debugElementsOption;\n-        var lno = lineNumbersOption;\n-        var apo = attributesProcessingOption;\n-        var cpso = constantPoolSharingOption;\n-        var sjo = shortJumpsOption;\n-        var dco = deadCodeOption;\n-        var dlo = deadLabelsOption;\n-        var chro = classHierarchyResolverOption;\n-        var amo = attributeMapperOption;\n-        for (var o : options) {\n-            switch (o) {\n-                case StackMapsOption oo -> smo = oo;\n-                case DebugElementsOption oo -> deo = oo;\n-                case LineNumbersOption oo -> lno = oo;\n-                case AttributesProcessingOption oo -> apo = oo;\n-                case ConstantPoolSharingOption oo -> cpso = oo;\n-                case ShortJumpsOption oo -> sjo = oo;\n-                case DeadCodeOption oo -> dco = oo;\n-                case DeadLabelsOption oo -> dlo = oo;\n-                case ClassHierarchyResolverOption oo -> chro = oo;\n-                case AttributeMapperOption oo -> amo = oo;\n-            }\n-        }\n-        return new ClassfileImpl(smo, deo, lno, apo, cpso, sjo, dco, dlo, chro, amo);\n-    }\n-\n-    @Override\n-    public ClassModel parse(byte[] bytes) {\n-        return new ClassImpl(bytes, this);\n-    }\n-\n-    @Override\n-    public byte[] build(ClassEntry thisClassEntry,\n-                         ConstantPoolBuilder constantPool,\n-                         Consumer<? super ClassBuilder> handler) {\n-        thisClassEntry = AbstractPoolEntry.maybeClone(constantPool, thisClassEntry);\n-        DirectClassBuilder builder = new DirectClassBuilder((SplitConstantPool)constantPool, this, thisClassEntry);\n-        handler.accept(builder);\n-        return builder.build();\n-    }\n-\n-    @Override\n-    public byte[] transform(ClassModel model, ClassEntry newClassName, ClassTransform transform) {\n-        ConstantPoolBuilder constantPool = constantPoolSharingOption() == ConstantPoolSharingOption.SHARED_POOL\n-                                                                     ? ConstantPoolBuilder.of(model)\n-                                                                     : ConstantPoolBuilder.of();\n-        return build(newClassName, constantPool,\n-                new Consumer<ClassBuilder>() {\n-                    @Override\n-                    public void accept(ClassBuilder builder) {\n-                        ((DirectClassBuilder) builder).setOriginal((ClassImpl)model);\n-                        ((DirectClassBuilder) builder).setSizeHint(((ClassImpl)model).classfileLength());\n-                        builder.transform((ClassImpl)model, transform);\n-                    }\n-                });\n-    }\n-    public record AttributeMapperOptionImpl(Function<Utf8Entry, AttributeMapper<?>> attributeMapper)\n-            implements AttributeMapperOption {\n-    }\n-\n-    public record ClassHierarchyResolverOptionImpl(ClassHierarchyResolver classHierarchyResolver)\n-            implements ClassHierarchyResolverOption {\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassfileImpl.java","additions":0,"deletions":138,"binary":false,"changes":138,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.impl;\n-\n-import jdk.internal.classfile.ClassfileVersion;\n-\n-public final class ClassfileVersionImpl\n-        extends AbstractElement\n-        implements ClassfileVersion {\n-    private final int majorVersion, minorVersion;\n-\n-    public ClassfileVersionImpl(int majorVersion, int minorVersion) {\n-        this.majorVersion = majorVersion;\n-        this.minorVersion = minorVersion;\n-    }\n-\n-    @Override\n-    public int majorVersion() {\n-        return majorVersion;\n-    }\n-\n-    @Override\n-    public int minorVersion() {\n-        return minorVersion;\n-    }\n-\n-    @Override\n-    public void writeTo(DirectClassBuilder builder) {\n-        builder.setVersion(majorVersion, minorVersion);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return String.format(\"ClassfileVersion[majorVersion=%d, minorVersion=%d]\", majorVersion, minorVersion);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassfileVersionImpl.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -33,7 +33,7 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.StackMapTableAttribute;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.instruction.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.instruction.*;\n@@ -41,1 +41,1 @@\n-import static jdk.internal.classfile.Classfile.*;\n+import static java.lang.classfile.ClassFile.*;\n@@ -124,1 +124,1 @@\n-            if (((ClassReaderImpl)classReader).context().lineNumbersOption() == Classfile.LineNumbersOption.PASS_LINE_NUMBERS)\n+            if (((ClassReaderImpl)classReader).context().lineNumbersOption() == ClassFile.LineNumbersOption.PASS_LINE_NUMBERS)\n@@ -173,1 +173,1 @@\n-        if (((ClassReaderImpl)classReader).context().debugElementsOption() == Classfile.DebugElementsOption.PASS_DEBUG)\n+        if (((ClassReaderImpl)classReader).context().debugElementsOption() == ClassFile.DebugElementsOption.PASS_DEBUG)\n@@ -250,1 +250,1 @@\n-            if (classReader.readU2(6) <= Classfile.JAVA_6_VERSION) {\n+            if (classReader.readU2(6) <= ClassFile.JAVA_6_VERSION) {\n@@ -463,1 +463,1 @@\n-                    default -> throw new UnsupportedOperationException(\"unknown wide instruction: \" + bclow);\n+                    default -> throw new IllegalArgumentException(\"unknown wide instruction: \" + bclow);\n@@ -478,1 +478,1 @@\n-                    throw new UnsupportedOperationException(\"unknown instruction: \" + bc);\n+                    throw new IllegalArgumentException(\"unknown instruction: \" + bc);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,10 +27,10 @@\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.components.CodeLocalsShifter;\n-import jdk.internal.classfile.instruction.IncrementInstruction;\n-import jdk.internal.classfile.instruction.LoadInstruction;\n-import jdk.internal.classfile.instruction.LocalVariable;\n-import jdk.internal.classfile.instruction.LocalVariableType;\n-import jdk.internal.classfile.instruction.StoreInstruction;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.components.CodeLocalsShifter;\n+import java.lang.classfile.instruction.IncrementInstruction;\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.LocalVariable;\n+import java.lang.classfile.instruction.LocalVariableType;\n+import java.lang.classfile.instruction.StoreInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeLocalsShifterImpl.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,13 +27,13 @@\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.components.CodeRelabeler;\n-import jdk.internal.classfile.instruction.BranchInstruction;\n-import jdk.internal.classfile.instruction.CharacterRange;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n-import jdk.internal.classfile.instruction.LabelTarget;\n-import jdk.internal.classfile.instruction.LocalVariable;\n-import jdk.internal.classfile.instruction.LocalVariableType;\n-import jdk.internal.classfile.instruction.LookupSwitchInstruction;\n-import jdk.internal.classfile.instruction.SwitchCase;\n-import jdk.internal.classfile.instruction.TableSwitchInstruction;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.components.CodeRelabeler;\n+import java.lang.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.instruction.CharacterRange;\n+import java.lang.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.instruction.LabelTarget;\n+import java.lang.classfile.instruction.LocalVariable;\n+import java.lang.classfile.instruction.LocalVariableType;\n+import java.lang.classfile.instruction.LookupSwitchInstruction;\n+import java.lang.classfile.instruction.SwitchCase;\n+import java.lang.classfile.instruction.TableSwitchInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeRelabelerImpl.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,31 +27,31 @@\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.components.CodeStackTracker;\n-import jdk.internal.classfile.instruction.ArrayLoadInstruction;\n-import jdk.internal.classfile.instruction.ArrayStoreInstruction;\n-import jdk.internal.classfile.instruction.BranchInstruction;\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n-import jdk.internal.classfile.instruction.ConvertInstruction;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n-import jdk.internal.classfile.instruction.FieldInstruction;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n-import jdk.internal.classfile.instruction.LabelTarget;\n-import jdk.internal.classfile.instruction.LoadInstruction;\n-import jdk.internal.classfile.instruction.LookupSwitchInstruction;\n-import jdk.internal.classfile.instruction.MonitorInstruction;\n-import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.internal.classfile.instruction.NewObjectInstruction;\n-import jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction;\n-import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n-import jdk.internal.classfile.instruction.NopInstruction;\n-import jdk.internal.classfile.instruction.OperatorInstruction;\n-import jdk.internal.classfile.instruction.ReturnInstruction;\n-import jdk.internal.classfile.instruction.StackInstruction;\n-import jdk.internal.classfile.instruction.StoreInstruction;\n-import jdk.internal.classfile.instruction.TableSwitchInstruction;\n-import jdk.internal.classfile.instruction.ThrowInstruction;\n-import jdk.internal.classfile.instruction.TypeCheckInstruction;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.components.CodeStackTracker;\n+import java.lang.classfile.instruction.ArrayLoadInstruction;\n+import java.lang.classfile.instruction.ArrayStoreInstruction;\n+import java.lang.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.instruction.ConvertInstruction;\n+import java.lang.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.instruction.FieldInstruction;\n+import java.lang.classfile.instruction.InvokeDynamicInstruction;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.instruction.LabelTarget;\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.LookupSwitchInstruction;\n+import java.lang.classfile.instruction.MonitorInstruction;\n+import java.lang.classfile.instruction.NewMultiArrayInstruction;\n+import java.lang.classfile.instruction.NewObjectInstruction;\n+import java.lang.classfile.instruction.NewPrimitiveArrayInstruction;\n+import java.lang.classfile.instruction.NewReferenceArrayInstruction;\n+import java.lang.classfile.instruction.NopInstruction;\n+import java.lang.classfile.instruction.OperatorInstruction;\n+import java.lang.classfile.instruction.ReturnInstruction;\n+import java.lang.classfile.instruction.StackInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n+import java.lang.classfile.instruction.TableSwitchInstruction;\n+import java.lang.classfile.instruction.ThrowInstruction;\n+import java.lang.classfile.instruction.TypeCheckInstruction;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeStackTrackerImpl.java","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -34,14 +34,15 @@\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.FieldBuilder;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.FieldTransform;\n-import jdk.internal.classfile.MethodBuilder;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.MethodTransform;\n-import jdk.internal.classfile.WritableElement;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CustomAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.FieldBuilder;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.FieldTransform;\n+import java.lang.classfile.MethodBuilder;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.WritableElement;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -64,1 +65,1 @@\n-                              ClassfileImpl context,\n+                              ClassFileImpl context,\n@@ -68,1 +69,1 @@\n-        this.flags = Classfile.DEFAULT_CLASS_FLAGS;\n+        this.flags = ClassFile.DEFAULT_CLASS_FLAGS;\n@@ -71,2 +72,2 @@\n-        this.majorVersion = Classfile.latestMajorVersion();\n-        this.minorVersion = Classfile.latestMinorVersion();\n+        this.majorVersion = ClassFile.latestMajorVersion();\n+        this.minorVersion = ClassFile.latestMinorVersion();\n@@ -77,1 +78,5 @@\n-        ((AbstractElement) element).writeTo(this);\n+        if (element instanceof AbstractElement ae) {\n+            ae.writeTo(this);\n+        } else {\n+            writeAttribute((CustomAttribute)element);\n+        }\n@@ -162,1 +167,1 @@\n-        else if ((flags & Classfile.ACC_MODULE) == 0 && !\"java\/lang\/Object\".equals(thisClassEntry.asInternalName()))\n+        else if ((flags & ClassFile.ACC_MODULE) == 0 && !\"java\/lang\/Object\".equals(thisClassEntry.asInternalName()))\n@@ -188,1 +193,1 @@\n-        head.writeInt(Classfile.MAGIC_NUMBER);\n+        head.writeInt(ClassFile.MAGIC_NUMBER);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":26,"deletions":21,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -37,37 +37,38 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.instruction.SwitchCase;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.attribute.LineNumberTableAttribute;\n-import jdk.internal.classfile.attribute.StackMapTableAttribute;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.DoubleEntry;\n-import jdk.internal.classfile.constantpool.FieldRefEntry;\n-import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.LongEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.instruction.CharacterRange;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n-import jdk.internal.classfile.instruction.LocalVariable;\n-import jdk.internal.classfile.instruction.LocalVariableType;\n-\n-import static jdk.internal.classfile.Opcode.GOTO;\n-import static jdk.internal.classfile.Opcode.GOTO_W;\n-import static jdk.internal.classfile.Opcode.IINC;\n-import static jdk.internal.classfile.Opcode.IINC_W;\n-import static jdk.internal.classfile.Opcode.JSR;\n-import static jdk.internal.classfile.Opcode.JSR_W;\n-import static jdk.internal.classfile.Opcode.LDC2_W;\n-import static jdk.internal.classfile.Opcode.LDC_W;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CustomAttribute;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.instruction.SwitchCase;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.LineNumberTableAttribute;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.DoubleEntry;\n+import java.lang.classfile.constantpool.FieldRefEntry;\n+import java.lang.classfile.constantpool.InterfaceMethodRefEntry;\n+import java.lang.classfile.constantpool.InvokeDynamicEntry;\n+import java.lang.classfile.constantpool.LoadableConstantEntry;\n+import java.lang.classfile.constantpool.LongEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.instruction.CharacterRange;\n+import java.lang.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.instruction.LocalVariable;\n+import java.lang.classfile.instruction.LocalVariableType;\n+\n+import static java.lang.classfile.Opcode.GOTO;\n+import static java.lang.classfile.Opcode.GOTO_W;\n+import static java.lang.classfile.Opcode.IINC;\n+import static java.lang.classfile.Opcode.IINC_W;\n+import static java.lang.classfile.Opcode.JSR;\n+import static java.lang.classfile.Opcode.JSR_W;\n+import static java.lang.classfile.Opcode.LDC2_W;\n+import static java.lang.classfile.Opcode.LDC_W;\n@@ -105,1 +106,1 @@\n-                                                 ClassfileImpl context,\n+                                                 ClassFileImpl context,\n@@ -112,1 +113,1 @@\n-            if (context.shortJumpsOption() == Classfile.ShortJumpsOption.FIX_SHORT_JUMPS) {\n+            if (context.shortJumpsOption() == ClassFile.ShortJumpsOption.FIX_SHORT_JUMPS) {\n@@ -124,1 +125,1 @@\n-                              ClassfileImpl context,\n+                              ClassFileImpl context,\n@@ -131,1 +132,1 @@\n-        this.transformBackJumps = context.shortJumpsOption() == Classfile.ShortJumpsOption.FIX_SHORT_JUMPS;\n+        this.transformBackJumps = context.shortJumpsOption() == ClassFile.ShortJumpsOption.FIX_SHORT_JUMPS;\n@@ -143,1 +144,5 @@\n-        ((AbstractElement) element).writeTo(this);\n+        if (element instanceof AbstractElement ae) {\n+            ae.writeTo(this);\n+        } else {\n+            writeAttribute((CustomAttribute)element);\n+        }\n@@ -202,1 +207,1 @@\n-                if (context.deadLabelsOption() == Classfile.DeadLabelsOption.DROP_DEAD_LABELS) {\n+                if (context.deadLabelsOption() == ClassFile.DeadLabelsOption.DROP_DEAD_LABELS) {\n@@ -226,1 +231,1 @@\n-        if (context.debugElementsOption() == Classfile.DebugElementsOption.PASS_DEBUG) {\n+        if (context.debugElementsOption() == ClassFile.DebugElementsOption.PASS_DEBUG) {\n@@ -239,1 +244,1 @@\n-                                if (context.deadLabelsOption() == Classfile.DeadLabelsOption.DROP_DEAD_LABELS) {\n+                                if (context.deadLabelsOption() == ClassFile.DeadLabelsOption.DROP_DEAD_LABELS) {\n@@ -268,1 +273,1 @@\n-                                if (context.deadLabelsOption() == Classfile.DeadLabelsOption.DROP_DEAD_LABELS) {\n+                                if (context.deadLabelsOption() == ClassFile.DeadLabelsOption.DROP_DEAD_LABELS) {\n@@ -291,1 +296,1 @@\n-                                if (context.deadLabelsOption() == Classfile.DeadLabelsOption.DROP_DEAD_LABELS) {\n+                                if (context.deadLabelsOption() == ClassFile.DeadLabelsOption.DROP_DEAD_LABELS) {\n@@ -333,1 +338,1 @@\n-                if (buf.getMajorVersion() >= Classfile.JAVA_6_VERSION) {\n+                if (buf.getMajorVersion() >= ClassFile.JAVA_6_VERSION) {\n@@ -338,1 +343,1 @@\n-                        if (buf.getMajorVersion() == Classfile.JAVA_6_VERSION) {\n+                        if (buf.getMajorVersion() == ClassFile.JAVA_6_VERSION) {\n@@ -398,1 +403,1 @@\n-        public DedupLineNumberTableAttribute(ConstantPoolBuilder constantPool, ClassfileImpl context) {\n+        public DedupLineNumberTableAttribute(ConstantPoolBuilder constantPool, ClassFileImpl context) {\n@@ -489,1 +494,1 @@\n-            bytecodesBufWriter.writeU1(Classfile.WIDE);\n+            bytecodesBufWriter.writeU1(ClassFile.WIDE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":56,"deletions":51,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -30,6 +30,7 @@\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.FieldBuilder;\n-import jdk.internal.classfile.FieldElement;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.WritableElement;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.CustomAttribute;\n+import java.lang.classfile.FieldBuilder;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.WritableElement;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -45,1 +46,1 @@\n-                              ClassfileImpl context,\n+                              ClassFileImpl context,\n@@ -58,1 +59,5 @@\n-        ((AbstractElement) element).writeTo(this);\n+        if (element instanceof AbstractElement ae) {\n+            ae.writeTo(this);\n+        } else {\n+            writeAttribute((CustomAttribute)element);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -31,10 +31,11 @@\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.MethodBuilder;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.WritableElement;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.CustomAttribute;\n+import java.lang.classfile.MethodBuilder;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.WritableElement;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -53,1 +54,1 @@\n-                               ClassfileImpl context,\n+                               ClassFileImpl context,\n@@ -66,2 +67,2 @@\n-        boolean wasStatic = (this.flags & Classfile.ACC_STATIC) != 0;\n-        boolean isStatic = (flags & Classfile.ACC_STATIC) != 0;\n+        boolean wasStatic = (this.flags & ClassFile.ACC_STATIC) != 0;\n+        boolean isStatic = (flags & ClassFile.ACC_STATIC) != 0;\n@@ -114,1 +115,5 @@\n-        ((AbstractElement) element).writeTo(this);\n+        if (element instanceof AbstractElement ae) {\n+            ae.writeTo(this);\n+        } else {\n+            writeAttribute((CustomAttribute)element);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.java","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/FieldImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.Interfaces;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.Interfaces;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/InterfacesImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.Label;\n+import java.lang.classfile.Label;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/LabelContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.instruction.LabelTarget;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.instruction.LabelTarget;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/LabelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.instruction.LineNumber;\n+import java.lang.classfile.instruction.LineNumber;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/LineNumberImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -30,1 +30,1 @@\n-import static jdk.internal.classfile.Classfile.ACC_STATIC;\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.attribute.ModuleAttribute.ModuleAttributeBuilder;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.attribute.ModuleAttribute.ModuleAttributeBuilder;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ModuleAttributeBuilderImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,4 +29,4 @@\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/NonterminalCodeBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n-import static jdk.internal.classfile.Classfile.ASTORE_3;\n-import static jdk.internal.classfile.Classfile.ISTORE;\n-import static jdk.internal.classfile.Classfile.LOOKUPSWITCH;\n-import static jdk.internal.classfile.Classfile.TABLESWITCH;\n-import static jdk.internal.classfile.Classfile.WIDE;\n+import static java.lang.classfile.ClassFile.ASTORE_3;\n+import static java.lang.classfile.ClassFile.ISTORE;\n+import static java.lang.classfile.ClassFile.LOOKUPSWITCH;\n+import static java.lang.classfile.ClassFile.TABLESWITCH;\n+import static java.lang.classfile.ClassFile.WIDE;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,4 +31,4 @@\n-import jdk.internal.classfile.ClassSignature;\n-import jdk.internal.classfile.MethodSignature;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.Signature.*;\n+import java.lang.classfile.ClassSignature;\n+import java.lang.classfile.MethodSignature;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.Signature.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SignaturesImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,29 +33,8 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassReader;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.BootstrapMethodEntry;\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.internal.classfile.constantpool.DoubleEntry;\n-import jdk.internal.classfile.constantpool.FieldRefEntry;\n-import jdk.internal.classfile.constantpool.FloatEntry;\n-import jdk.internal.classfile.constantpool.IntegerEntry;\n-import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.LongEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n-import jdk.internal.classfile.constantpool.MethodRefEntry;\n-import jdk.internal.classfile.constantpool.MethodTypeEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.PackageEntry;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n-import jdk.internal.classfile.constantpool.StringEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassReader;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.BootstrapMethodEntry;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n+import java.lang.classfile.constantpool.*;\n@@ -63,17 +42,16 @@\n-import static jdk.internal.classfile.Classfile.TAG_CLASS;\n-import static jdk.internal.classfile.Classfile.TAG_CONSTANTDYNAMIC;\n-import static jdk.internal.classfile.Classfile.TAG_DOUBLE;\n-import static jdk.internal.classfile.Classfile.TAG_FIELDREF;\n-import static jdk.internal.classfile.Classfile.TAG_FLOAT;\n-import static jdk.internal.classfile.Classfile.TAG_INTEGER;\n-import static jdk.internal.classfile.Classfile.TAG_INTERFACEMETHODREF;\n-import static jdk.internal.classfile.Classfile.TAG_INVOKEDYNAMIC;\n-import static jdk.internal.classfile.Classfile.TAG_LONG;\n-import static jdk.internal.classfile.Classfile.TAG_METHODHANDLE;\n-import static jdk.internal.classfile.Classfile.TAG_METHODREF;\n-import static jdk.internal.classfile.Classfile.TAG_METHODTYPE;\n-import static jdk.internal.classfile.Classfile.TAG_MODULE;\n-import static jdk.internal.classfile.Classfile.TAG_NAMEANDTYPE;\n-import static jdk.internal.classfile.Classfile.TAG_PACKAGE;\n-import static jdk.internal.classfile.Classfile.TAG_STRING;\n-import jdk.internal.classfile.constantpool.ConstantPoolException;\n+import static java.lang.classfile.ClassFile.TAG_CLASS;\n+import static java.lang.classfile.ClassFile.TAG_CONSTANTDYNAMIC;\n+import static java.lang.classfile.ClassFile.TAG_DOUBLE;\n+import static java.lang.classfile.ClassFile.TAG_FIELDREF;\n+import static java.lang.classfile.ClassFile.TAG_FLOAT;\n+import static java.lang.classfile.ClassFile.TAG_INTEGER;\n+import static java.lang.classfile.ClassFile.TAG_INTERFACEMETHODREF;\n+import static java.lang.classfile.ClassFile.TAG_INVOKEDYNAMIC;\n+import static java.lang.classfile.ClassFile.TAG_LONG;\n+import static java.lang.classfile.ClassFile.TAG_METHODHANDLE;\n+import static java.lang.classfile.ClassFile.TAG_METHODREF;\n+import static java.lang.classfile.ClassFile.TAG_METHODTYPE;\n+import static java.lang.classfile.ClassFile.TAG_MODULE;\n+import static java.lang.classfile.ClassFile.TAG_NAMEANDTYPE;\n+import static java.lang.classfile.ClassFile.TAG_PACKAGE;\n+import static java.lang.classfile.ClassFile.TAG_STRING;\n@@ -344,1 +322,1 @@\n-            if (e.tag() == Classfile.TAG_UTF8\n+            if (e.tag() == ClassFile.TAG_UTF8\n@@ -361,1 +339,1 @@\n-            if (e.tag() == Classfile.TAG_UTF8\n+            if (e.tag() == ClassFile.TAG_UTF8\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":26,"deletions":48,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -35,5 +35,5 @@\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.internal.classfile.constantpool.DynamicConstantPoolEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import static jdk.internal.classfile.Classfile.*;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.constantpool.ConstantDynamicEntry;\n+import java.lang.classfile.constantpool.DynamicConstantPoolEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import static java.lang.classfile.ClassFile.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackCounter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.internal.classfile.BufWriter;\n+import java.lang.classfile.BufWriter;\n@@ -35,4 +35,4 @@\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.attribute.StackMapFrameInfo;\n-import jdk.internal.classfile.attribute.StackMapFrameInfo.*;\n-import jdk.internal.classfile.ClassReader;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.attribute.StackMapFrameInfo;\n+import java.lang.classfile.attribute.StackMapFrameInfo.*;\n+import java.lang.classfile.ClassReader;\n@@ -40,3 +40,3 @@\n-import static jdk.internal.classfile.Classfile.*;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.MethodModel;\n+import static java.lang.classfile.ClassFile.*;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.MethodModel;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,6 +31,6 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.internal.classfile.constantpool.DynamicConstantPoolEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantDynamicEntry;\n+import java.lang.classfile.constantpool.DynamicConstantPoolEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n@@ -44,1 +44,1 @@\n-import jdk.internal.classfile.Attribute;\n+import java.lang.classfile.Attribute;\n@@ -46,7 +46,7 @@\n-import static jdk.internal.classfile.Classfile.*;\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.attribute.StackMapTableAttribute;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.components.ClassPrinter;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n+import static java.lang.classfile.ClassFile.*;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.components.ClassPrinter;\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -228,1 +228,1 @@\n-                     ClassfileImpl context,\n+                     ClassFileImpl context,\n@@ -240,2 +240,2 @@\n-        this.patchDeadCode = context.deadCodeOption() == Classfile.DeadCodeOption.PATCH_DEAD_CODE;\n-        this.filterDeadLabels = context.deadLabelsOption() == Classfile.DeadLabelsOption.DROP_DEAD_LABELS;\n+        this.patchDeadCode = context.deadCodeOption() == ClassFile.DeadCodeOption.PATCH_DEAD_CODE;\n+        this.filterDeadLabels = context.deadLabelsOption() == ClassFile.DeadLabelsOption.DROP_DEAD_LABELS;\n@@ -841,1 +841,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.Superclass;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.Superclass;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SuperclassImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.TypeAnnotation.*;\n-import static jdk.internal.classfile.Classfile.*;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.TypeAnnotation.*;\n+import static java.lang.classfile.ClassFile.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TargetInfoImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,23 +27,23 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.DoubleEntry;\n-import jdk.internal.classfile.constantpool.FieldRefEntry;\n-import jdk.internal.classfile.constantpool.FloatEntry;\n-import jdk.internal.classfile.constantpool.IntegerEntry;\n-import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.LongEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n-import jdk.internal.classfile.constantpool.MethodRefEntry;\n-import jdk.internal.classfile.constantpool.MethodTypeEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.PackageEntry;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n-import jdk.internal.classfile.constantpool.StringEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantDynamicEntry;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.DoubleEntry;\n+import java.lang.classfile.constantpool.FieldRefEntry;\n+import java.lang.classfile.constantpool.FloatEntry;\n+import java.lang.classfile.constantpool.IntegerEntry;\n+import java.lang.classfile.constantpool.InterfaceMethodRefEntry;\n+import java.lang.classfile.constantpool.InvokeDynamicEntry;\n+import java.lang.classfile.constantpool.LoadableConstantEntry;\n+import java.lang.classfile.constantpool.LongEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.constantpool.MethodHandleEntry;\n+import java.lang.classfile.constantpool.MethodRefEntry;\n+import java.lang.classfile.constantpool.MethodTypeEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.constantpool.PackageEntry;\n+import java.lang.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.constantpool.StringEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.CodeBuilder;\n+import java.lang.classfile.CodeBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TerminalCodeBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.FieldBuilder;\n+import java.lang.classfile.FieldBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TerminalFieldBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.MethodBuilder;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.MethodBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TerminalMethodBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,17 +31,17 @@\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.ClassfileElement;\n-import jdk.internal.classfile.ClassfileTransform;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.FieldBuilder;\n-import jdk.internal.classfile.FieldElement;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.FieldTransform;\n-import jdk.internal.classfile.MethodBuilder;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.MethodTransform;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFileElement;\n+import java.lang.classfile.ClassFileTransform;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.FieldBuilder;\n+import java.lang.classfile.FieldElement;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.FieldTransform;\n+import java.lang.classfile.MethodBuilder;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.MethodTransform;\n@@ -78,1 +78,1 @@\n-    public record ResolvedTransformImpl<E extends ClassfileElement>(Consumer<E> consumer,\n+    public record ResolvedTransformImpl<E extends ClassFileElement>(Consumer<E> consumer,\n@@ -81,1 +81,1 @@\n-            implements ClassfileTransform.ResolvedTransform<E> {\n+            implements ClassFileTransform.ResolvedTransform<E> {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TransformImpl.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeModel;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeModel;\n@@ -31,4 +31,4 @@\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TransformingCodeBuilder.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,64 +31,64 @@\n-import jdk.internal.classfile.Annotation;\n-import jdk.internal.classfile.AnnotationElement;\n-import jdk.internal.classfile.AnnotationValue;\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.AttributeMapper;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.BootstrapMethodEntry;\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.TypeAnnotation;\n-import jdk.internal.classfile.attribute.AnnotationDefaultAttribute;\n-import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.internal.classfile.attribute.CharacterRangeInfo;\n-import jdk.internal.classfile.attribute.CharacterRangeTableAttribute;\n-import jdk.internal.classfile.attribute.CompilationIDAttribute;\n-import jdk.internal.classfile.attribute.ConstantValueAttribute;\n-import jdk.internal.classfile.attribute.DeprecatedAttribute;\n-import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n-import jdk.internal.classfile.attribute.ExceptionsAttribute;\n-import jdk.internal.classfile.attribute.InnerClassInfo;\n-import jdk.internal.classfile.attribute.InnerClassesAttribute;\n-import jdk.internal.classfile.attribute.LineNumberInfo;\n-import jdk.internal.classfile.attribute.LineNumberTableAttribute;\n-import jdk.internal.classfile.attribute.LocalVariableInfo;\n-import jdk.internal.classfile.attribute.LocalVariableTableAttribute;\n-import jdk.internal.classfile.attribute.LocalVariableTypeInfo;\n-import jdk.internal.classfile.attribute.LocalVariableTypeTableAttribute;\n-import jdk.internal.classfile.attribute.MethodParameterInfo;\n-import jdk.internal.classfile.attribute.MethodParametersAttribute;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.ModuleExportInfo;\n-import jdk.internal.classfile.attribute.ModuleHashInfo;\n-import jdk.internal.classfile.attribute.ModuleHashesAttribute;\n-import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.internal.classfile.attribute.ModuleOpenInfo;\n-import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n-import jdk.internal.classfile.attribute.ModuleProvideInfo;\n-import jdk.internal.classfile.attribute.ModuleRequireInfo;\n-import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n-import jdk.internal.classfile.attribute.ModuleTargetAttribute;\n-import jdk.internal.classfile.attribute.NestHostAttribute;\n-import jdk.internal.classfile.attribute.NestMembersAttribute;\n-import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n-import jdk.internal.classfile.attribute.RecordAttribute;\n-import jdk.internal.classfile.attribute.RecordComponentInfo;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.SignatureAttribute;\n-import jdk.internal.classfile.attribute.SourceDebugExtensionAttribute;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n-import jdk.internal.classfile.attribute.SourceIDAttribute;\n-import jdk.internal.classfile.attribute.StackMapTableAttribute;\n-import jdk.internal.classfile.attribute.StackMapFrameInfo;\n-import jdk.internal.classfile.attribute.SyntheticAttribute;\n-import jdk.internal.classfile.constantpool.ConstantValueEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.PackageEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.BootstrapMethodEntry;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.TypeAnnotation;\n+import java.lang.classfile.attribute.AnnotationDefaultAttribute;\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n+import java.lang.classfile.attribute.CharacterRangeInfo;\n+import java.lang.classfile.attribute.CharacterRangeTableAttribute;\n+import java.lang.classfile.attribute.CompilationIDAttribute;\n+import java.lang.classfile.attribute.ConstantValueAttribute;\n+import java.lang.classfile.attribute.DeprecatedAttribute;\n+import java.lang.classfile.attribute.EnclosingMethodAttribute;\n+import java.lang.classfile.attribute.ExceptionsAttribute;\n+import java.lang.classfile.attribute.InnerClassInfo;\n+import java.lang.classfile.attribute.InnerClassesAttribute;\n+import java.lang.classfile.attribute.LineNumberInfo;\n+import java.lang.classfile.attribute.LineNumberTableAttribute;\n+import java.lang.classfile.attribute.LocalVariableInfo;\n+import java.lang.classfile.attribute.LocalVariableTableAttribute;\n+import java.lang.classfile.attribute.LocalVariableTypeInfo;\n+import java.lang.classfile.attribute.LocalVariableTypeTableAttribute;\n+import java.lang.classfile.attribute.MethodParameterInfo;\n+import java.lang.classfile.attribute.MethodParametersAttribute;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.ModuleExportInfo;\n+import java.lang.classfile.attribute.ModuleHashInfo;\n+import java.lang.classfile.attribute.ModuleHashesAttribute;\n+import java.lang.classfile.attribute.ModuleMainClassAttribute;\n+import java.lang.classfile.attribute.ModuleOpenInfo;\n+import java.lang.classfile.attribute.ModulePackagesAttribute;\n+import java.lang.classfile.attribute.ModuleProvideInfo;\n+import java.lang.classfile.attribute.ModuleRequireInfo;\n+import java.lang.classfile.attribute.ModuleResolutionAttribute;\n+import java.lang.classfile.attribute.ModuleTargetAttribute;\n+import java.lang.classfile.attribute.NestHostAttribute;\n+import java.lang.classfile.attribute.NestMembersAttribute;\n+import java.lang.classfile.attribute.PermittedSubclassesAttribute;\n+import java.lang.classfile.attribute.RecordAttribute;\n+import java.lang.classfile.attribute.RecordComponentInfo;\n+import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.attribute.SourceDebugExtensionAttribute;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.attribute.SourceIDAttribute;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n+import java.lang.classfile.attribute.StackMapFrameInfo;\n+import java.lang.classfile.attribute.SyntheticAttribute;\n+import java.lang.classfile.constantpool.ConstantValueEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.constantpool.PackageEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -937,9 +937,0 @@\n-\n-    public static abstract sealed class CustomAttribute<T extends CustomAttribute<T>>\n-            extends UnboundAttribute<T>\n-            permits jdk.internal.classfile.CustomAttribute {\n-\n-        public CustomAttribute(AttributeMapper<T> mapper) {\n-            super(mapper);\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":64,"deletions":73,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -34,4 +34,7 @@\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.AttributeMapper;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n@@ -40,2 +43,0 @@\n-\n-import static jdk.internal.classfile.Classfile.ACC_STATIC;\n@@ -43,3 +44,2 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.AttributeMapper;\n-import jdk.internal.classfile.Classfile;\n+\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n@@ -60,1 +60,1 @@\n-                                             final Classfile.AttributesProcessingOption processingOption) {\n+                                             final ClassFile.AttributesProcessingOption processingOption) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -91,1 +91,1 @@\n-        return (Classfile.ISTORE <= code && code <= Classfile.ASTORE_3);\n+        return (ClassFile.ISTORE <= code && code <= ClassFile.ASTORE_3);\n@@ -98,1 +98,1 @@\n-            case Classfile.WIDE:\n+            case ClassFile.WIDE:\n@@ -103,1 +103,1 @@\n-            case Classfile.TABLESWITCH:\n+            case ClassFile.TABLESWITCH:\n@@ -113,1 +113,1 @@\n-            case Classfile.LOOKUPSWITCH:\n+            case ClassFile.LOOKUPSWITCH:\n@@ -144,202 +144,202 @@\n-        def(Classfile.NOP, \"nop\", \"b\", null, T_VOID, 0);\n-        def(Classfile.ACONST_NULL, \"aconst_null\", \"b\", null, T_OBJECT, 1);\n-        def(Classfile.ICONST_M1, \"iconst_m1\", \"b\", null, T_INT, 1);\n-        def(Classfile.ICONST_0, \"iconst_0\", \"b\", null, T_INT, 1);\n-        def(Classfile.ICONST_1, \"iconst_1\", \"b\", null, T_INT, 1);\n-        def(Classfile.ICONST_2, \"iconst_2\", \"b\", null, T_INT, 1);\n-        def(Classfile.ICONST_3, \"iconst_3\", \"b\", null, T_INT, 1);\n-        def(Classfile.ICONST_4, \"iconst_4\", \"b\", null, T_INT, 1);\n-        def(Classfile.ICONST_5, \"iconst_5\", \"b\", null, T_INT, 1);\n-        def(Classfile.LCONST_0, \"lconst_0\", \"b\", null, T_LONG, 2);\n-        def(Classfile.LCONST_1, \"lconst_1\", \"b\", null, T_LONG, 2);\n-        def(Classfile.FCONST_0, \"fconst_0\", \"b\", null, T_FLOAT, 1);\n-        def(Classfile.FCONST_1, \"fconst_1\", \"b\", null, T_FLOAT, 1);\n-        def(Classfile.FCONST_2, \"fconst_2\", \"b\", null, T_FLOAT, 1);\n-        def(Classfile.DCONST_0, \"dconst_0\", \"b\", null, T_DOUBLE, 2);\n-        def(Classfile.DCONST_1, \"dconst_1\", \"b\", null, T_DOUBLE, 2);\n-        def(Classfile.BIPUSH, \"bipush\", \"bc\", null, T_INT, 1);\n-        def(Classfile.SIPUSH, \"sipush\", \"bcc\", null, T_INT, 1);\n-        def(Classfile.LDC, \"ldc\", \"bk\", null, T_ILLEGAL, 1);\n-        def(Classfile.LDC_W, \"ldc_w\", \"bkk\", null, T_ILLEGAL, 1);\n-        def(Classfile.LDC2_W, \"ldc2_w\", \"bkk\", null, T_ILLEGAL, 2);\n-        def(Classfile.ILOAD, \"iload\", \"bi\", \"wbii\", T_INT, 1);\n-        def(Classfile.LLOAD, \"lload\", \"bi\", \"wbii\", T_LONG, 2);\n-        def(Classfile.FLOAD, \"fload\", \"bi\", \"wbii\", T_FLOAT, 1);\n-        def(Classfile.DLOAD, \"dload\", \"bi\", \"wbii\", T_DOUBLE, 2);\n-        def(Classfile.ALOAD, \"aload\", \"bi\", \"wbii\", T_OBJECT, 1);\n-        def(Classfile.ILOAD_0, \"iload_0\", \"b\", null, T_INT, 1);\n-        def(Classfile.ILOAD_1, \"iload_1\", \"b\", null, T_INT, 1);\n-        def(Classfile.ILOAD_2, \"iload_2\", \"b\", null, T_INT, 1);\n-        def(Classfile.ILOAD_3, \"iload_3\", \"b\", null, T_INT, 1);\n-        def(Classfile.LLOAD_0, \"lload_0\", \"b\", null, T_LONG, 2);\n-        def(Classfile.LLOAD_1, \"lload_1\", \"b\", null, T_LONG, 2);\n-        def(Classfile.LLOAD_2, \"lload_2\", \"b\", null, T_LONG, 2);\n-        def(Classfile.LLOAD_3, \"lload_3\", \"b\", null, T_LONG, 2);\n-        def(Classfile.FLOAD_0, \"fload_0\", \"b\", null, T_FLOAT, 1);\n-        def(Classfile.FLOAD_1, \"fload_1\", \"b\", null, T_FLOAT, 1);\n-        def(Classfile.FLOAD_2, \"fload_2\", \"b\", null, T_FLOAT, 1);\n-        def(Classfile.FLOAD_3, \"fload_3\", \"b\", null, T_FLOAT, 1);\n-        def(Classfile.DLOAD_0, \"dload_0\", \"b\", null, T_DOUBLE, 2);\n-        def(Classfile.DLOAD_1, \"dload_1\", \"b\", null, T_DOUBLE, 2);\n-        def(Classfile.DLOAD_2, \"dload_2\", \"b\", null, T_DOUBLE, 2);\n-        def(Classfile.DLOAD_3, \"dload_3\", \"b\", null, T_DOUBLE, 2);\n-        def(Classfile.ALOAD_0, \"aload_0\", \"b\", null, T_OBJECT, 1);\n-        def(Classfile.ALOAD_1, \"aload_1\", \"b\", null, T_OBJECT, 1);\n-        def(Classfile.ALOAD_2, \"aload_2\", \"b\", null, T_OBJECT, 1);\n-        def(Classfile.ALOAD_3, \"aload_3\", \"b\", null, T_OBJECT, 1);\n-        def(Classfile.IALOAD, \"iaload\", \"b\", null, T_INT, -1);\n-        def(Classfile.LALOAD, \"laload\", \"b\", null, T_LONG, 0);\n-        def(Classfile.FALOAD, \"faload\", \"b\", null, T_FLOAT, -1);\n-        def(Classfile.DALOAD, \"daload\", \"b\", null, T_DOUBLE, 0);\n-        def(Classfile.AALOAD, \"aaload\", \"b\", null, T_OBJECT, -1);\n-        def(Classfile.BALOAD, \"baload\", \"b\", null, T_INT, -1);\n-        def(Classfile.CALOAD, \"caload\", \"b\", null, T_INT, -1);\n-        def(Classfile.SALOAD, \"saload\", \"b\", null, T_INT, -1);\n-        def(Classfile.ISTORE, \"istore\", \"bi\", \"wbii\", T_VOID, -1);\n-        def(Classfile.LSTORE, \"lstore\", \"bi\", \"wbii\", T_VOID, -2);\n-        def(Classfile.FSTORE, \"fstore\", \"bi\", \"wbii\", T_VOID, -1);\n-        def(Classfile.DSTORE, \"dstore\", \"bi\", \"wbii\", T_VOID, -2);\n-        def(Classfile.ASTORE, \"astore\", \"bi\", \"wbii\", T_VOID, -1);\n-        def(Classfile.ISTORE_0, \"istore_0\", \"b\", null, T_VOID, -1);\n-        def(Classfile.ISTORE_1, \"istore_1\", \"b\", null, T_VOID, -1);\n-        def(Classfile.ISTORE_2, \"istore_2\", \"b\", null, T_VOID, -1);\n-        def(Classfile.ISTORE_3, \"istore_3\", \"b\", null, T_VOID, -1);\n-        def(Classfile.LSTORE_0, \"lstore_0\", \"b\", null, T_VOID, -2);\n-        def(Classfile.LSTORE_1, \"lstore_1\", \"b\", null, T_VOID, -2);\n-        def(Classfile.LSTORE_2, \"lstore_2\", \"b\", null, T_VOID, -2);\n-        def(Classfile.LSTORE_3, \"lstore_3\", \"b\", null, T_VOID, -2);\n-        def(Classfile.FSTORE_0, \"fstore_0\", \"b\", null, T_VOID, -1);\n-        def(Classfile.FSTORE_1, \"fstore_1\", \"b\", null, T_VOID, -1);\n-        def(Classfile.FSTORE_2, \"fstore_2\", \"b\", null, T_VOID, -1);\n-        def(Classfile.FSTORE_3, \"fstore_3\", \"b\", null, T_VOID, -1);\n-        def(Classfile.DSTORE_0, \"dstore_0\", \"b\", null, T_VOID, -2);\n-        def(Classfile.DSTORE_1, \"dstore_1\", \"b\", null, T_VOID, -2);\n-        def(Classfile.DSTORE_2, \"dstore_2\", \"b\", null, T_VOID, -2);\n-        def(Classfile.DSTORE_3, \"dstore_3\", \"b\", null, T_VOID, -2);\n-        def(Classfile.ASTORE_0, \"astore_0\", \"b\", null, T_VOID, -1);\n-        def(Classfile.ASTORE_1, \"astore_1\", \"b\", null, T_VOID, -1);\n-        def(Classfile.ASTORE_2, \"astore_2\", \"b\", null, T_VOID, -1);\n-        def(Classfile.ASTORE_3, \"astore_3\", \"b\", null, T_VOID, -1);\n-        def(Classfile.IASTORE, \"iastore\", \"b\", null, T_VOID, -3);\n-        def(Classfile.LASTORE, \"lastore\", \"b\", null, T_VOID, -4);\n-        def(Classfile.FASTORE, \"fastore\", \"b\", null, T_VOID, -3);\n-        def(Classfile.DASTORE, \"dastore\", \"b\", null, T_VOID, -4);\n-        def(Classfile.AASTORE, \"aastore\", \"b\", null, T_VOID, -3);\n-        def(Classfile.BASTORE, \"bastore\", \"b\", null, T_VOID, -3);\n-        def(Classfile.CASTORE, \"castore\", \"b\", null, T_VOID, -3);\n-        def(Classfile.SASTORE, \"sastore\", \"b\", null, T_VOID, -3);\n-        def(Classfile.POP, \"pop\", \"b\", null, T_VOID, -1);\n-        def(Classfile.POP2, \"pop2\", \"b\", null, T_VOID, -2);\n-        def(Classfile.DUP, \"dup\", \"b\", null, T_VOID, 1);\n-        def(Classfile.DUP_X1, \"dup_x1\", \"b\", null, T_VOID, 1);\n-        def(Classfile.DUP_X2, \"dup_x2\", \"b\", null, T_VOID, 1);\n-        def(Classfile.DUP2, \"dup2\", \"b\", null, T_VOID, 2);\n-        def(Classfile.DUP2_X1, \"dup2_x1\", \"b\", null, T_VOID, 2);\n-        def(Classfile.DUP2_X2, \"dup2_x2\", \"b\", null, T_VOID, 2);\n-        def(Classfile.SWAP, \"swap\", \"b\", null, T_VOID, 0);\n-        def(Classfile.IADD, \"iadd\", \"b\", null, T_INT, -1);\n-        def(Classfile.LADD, \"ladd\", \"b\", null, T_LONG, -2);\n-        def(Classfile.FADD, \"fadd\", \"b\", null, T_FLOAT, -1);\n-        def(Classfile.DADD, \"dadd\", \"b\", null, T_DOUBLE, -2);\n-        def(Classfile.ISUB, \"isub\", \"b\", null, T_INT, -1);\n-        def(Classfile.LSUB, \"lsub\", \"b\", null, T_LONG, -2);\n-        def(Classfile.FSUB, \"fsub\", \"b\", null, T_FLOAT, -1);\n-        def(Classfile.DSUB, \"dsub\", \"b\", null, T_DOUBLE, -2);\n-        def(Classfile.IMUL, \"imul\", \"b\", null, T_INT, -1);\n-        def(Classfile.LMUL, \"lmul\", \"b\", null, T_LONG, -2);\n-        def(Classfile.FMUL, \"fmul\", \"b\", null, T_FLOAT, -1);\n-        def(Classfile.DMUL, \"dmul\", \"b\", null, T_DOUBLE, -2);\n-        def(Classfile.IDIV, \"idiv\", \"b\", null, T_INT, -1);\n-        def(Classfile.LDIV, \"ldiv\", \"b\", null, T_LONG, -2);\n-        def(Classfile.FDIV, \"fdiv\", \"b\", null, T_FLOAT, -1);\n-        def(Classfile.DDIV, \"ddiv\", \"b\", null, T_DOUBLE, -2);\n-        def(Classfile.IREM, \"irem\", \"b\", null, T_INT, -1);\n-        def(Classfile.LREM, \"lrem\", \"b\", null, T_LONG, -2);\n-        def(Classfile.FREM, \"frem\", \"b\", null, T_FLOAT, -1);\n-        def(Classfile.DREM, \"drem\", \"b\", null, T_DOUBLE, -2);\n-        def(Classfile.INEG, \"ineg\", \"b\", null, T_INT, 0);\n-        def(Classfile.LNEG, \"lneg\", \"b\", null, T_LONG, 0);\n-        def(Classfile.FNEG, \"fneg\", \"b\", null, T_FLOAT, 0);\n-        def(Classfile.DNEG, \"dneg\", \"b\", null, T_DOUBLE, 0);\n-        def(Classfile.ISHL, \"ishl\", \"b\", null, T_INT, -1);\n-        def(Classfile.LSHL, \"lshl\", \"b\", null, T_LONG, -1);\n-        def(Classfile.ISHR, \"ishr\", \"b\", null, T_INT, -1);\n-        def(Classfile.LSHR, \"lshr\", \"b\", null, T_LONG, -1);\n-        def(Classfile.IUSHR, \"iushr\", \"b\", null, T_INT, -1);\n-        def(Classfile.LUSHR, \"lushr\", \"b\", null, T_LONG, -1);\n-        def(Classfile.IAND, \"iand\", \"b\", null, T_INT, -1);\n-        def(Classfile.LAND, \"land\", \"b\", null, T_LONG, -2);\n-        def(Classfile.IOR, \"ior\", \"b\", null, T_INT, -1);\n-        def(Classfile.LOR, \"lor\", \"b\", null, T_LONG, -2);\n-        def(Classfile.IXOR, \"ixor\", \"b\", null, T_INT, -1);\n-        def(Classfile.LXOR, \"lxor\", \"b\", null, T_LONG, -2);\n-        def(Classfile.IINC, \"iinc\", \"bic\", \"wbiicc\", T_VOID, 0);\n-        def(Classfile.I2L, \"i2l\", \"b\", null, T_LONG, 1);\n-        def(Classfile.I2F, \"i2f\", \"b\", null, T_FLOAT, 0);\n-        def(Classfile.I2D, \"i2d\", \"b\", null, T_DOUBLE, 1);\n-        def(Classfile.L2I, \"l2i\", \"b\", null, T_INT, -1);\n-        def(Classfile.L2F, \"l2f\", \"b\", null, T_FLOAT, -1);\n-        def(Classfile.L2D, \"l2d\", \"b\", null, T_DOUBLE, 0);\n-        def(Classfile.F2I, \"f2i\", \"b\", null, T_INT, 0);\n-        def(Classfile.F2L, \"f2l\", \"b\", null, T_LONG, 1);\n-        def(Classfile.F2D, \"f2d\", \"b\", null, T_DOUBLE, 1);\n-        def(Classfile.D2I, \"d2i\", \"b\", null, T_INT, -1);\n-        def(Classfile.D2L, \"d2l\", \"b\", null, T_LONG, 0);\n-        def(Classfile.D2F, \"d2f\", \"b\", null, T_FLOAT, -1);\n-        def(Classfile.I2B, \"i2b\", \"b\", null, T_BYTE, 0);\n-        def(Classfile.I2C, \"i2c\", \"b\", null, T_CHAR, 0);\n-        def(Classfile.I2S, \"i2s\", \"b\", null, T_SHORT, 0);\n-        def(Classfile.LCMP, \"lcmp\", \"b\", null, T_VOID, -3);\n-        def(Classfile.FCMPL, \"fcmpl\", \"b\", null, T_VOID, -1);\n-        def(Classfile.FCMPG, \"fcmpg\", \"b\", null, T_VOID, -1);\n-        def(Classfile.DCMPL, \"dcmpl\", \"b\", null, T_VOID, -3);\n-        def(Classfile.DCMPG, \"dcmpg\", \"b\", null, T_VOID, -3);\n-        def(Classfile.IFEQ, \"ifeq\", \"boo\", null, T_VOID, -1);\n-        def(Classfile.IFNE, \"ifne\", \"boo\", null, T_VOID, -1);\n-        def(Classfile.IFLT, \"iflt\", \"boo\", null, T_VOID, -1);\n-        def(Classfile.IFGE, \"ifge\", \"boo\", null, T_VOID, -1);\n-        def(Classfile.IFGT, \"ifgt\", \"boo\", null, T_VOID, -1);\n-        def(Classfile.IFLE, \"ifle\", \"boo\", null, T_VOID, -1);\n-        def(Classfile.IF_ICMPEQ, \"if_icmpeq\", \"boo\", null, T_VOID, -2);\n-        def(Classfile.IF_ICMPNE, \"if_icmpne\", \"boo\", null, T_VOID, -2);\n-        def(Classfile.IF_ICMPLT, \"if_icmplt\", \"boo\", null, T_VOID, -2);\n-        def(Classfile.IF_ICMPGE, \"if_icmpge\", \"boo\", null, T_VOID, -2);\n-        def(Classfile.IF_ICMPGT, \"if_icmpgt\", \"boo\", null, T_VOID, -2);\n-        def(Classfile.IF_ICMPLE, \"if_icmple\", \"boo\", null, T_VOID, -2);\n-        def(Classfile.IF_ACMPEQ, \"if_acmpeq\", \"boo\", null, T_VOID, -2);\n-        def(Classfile.IF_ACMPNE, \"if_acmpne\", \"boo\", null, T_VOID, -2);\n-        def(Classfile.GOTO, \"goto\", \"boo\", null, T_VOID, 0);\n-        def(Classfile.JSR, \"jsr\", \"boo\", null, T_INT, 0);\n-        def(Classfile.RET, \"ret\", \"bi\", \"wbii\", T_VOID, 0);\n-        def(Classfile.TABLESWITCH, \"tableswitch\", \"\", null, T_VOID, -1); \/\/ may have backward branches\n-        def(Classfile.LOOKUPSWITCH, \"lookupswitch\", \"\", null, T_VOID, -1); \/\/ rewriting in interpreter\n-        def(Classfile.IRETURN, \"ireturn\", \"b\", null, T_INT, -1);\n-        def(Classfile.LRETURN, \"lreturn\", \"b\", null, T_LONG, -2);\n-        def(Classfile.FRETURN, \"freturn\", \"b\", null, T_FLOAT, -1);\n-        def(Classfile.DRETURN, \"dreturn\", \"b\", null, T_DOUBLE, -2);\n-        def(Classfile.ARETURN, \"areturn\", \"b\", null, T_OBJECT, -1);\n-        def(Classfile.RETURN, \"return\", \"b\", null, T_VOID, 0);\n-        def(Classfile.GETSTATIC, \"getstatic\", \"bJJ\", null, T_ILLEGAL, 1);\n-        def(Classfile.PUTSTATIC, \"putstatic\", \"bJJ\", null, T_ILLEGAL, -1);\n-        def(Classfile.GETFIELD, \"getfield\", \"bJJ\", null, T_ILLEGAL, 0);\n-        def(Classfile.PUTFIELD, \"putfield\", \"bJJ\", null, T_ILLEGAL, -2);\n-        def(Classfile.INVOKEVIRTUAL, \"invokevirtual\", \"bJJ\", null, T_ILLEGAL, -1);\n-        def(Classfile.INVOKESPECIAL, \"invokespecial\", \"bJJ\", null, T_ILLEGAL, -1);\n-        def(Classfile.INVOKESTATIC, \"invokestatic\", \"bJJ\", null, T_ILLEGAL, 0);\n-        def(Classfile.INVOKEINTERFACE, \"invokeinterface\", \"bJJ__\", null, T_ILLEGAL, -1);\n-        def(Classfile.INVOKEDYNAMIC, \"invokedynamic\", \"bJJJJ\", null, T_ILLEGAL, 0);\n-        def(Classfile.NEW, \"new\", \"bkk\", null, T_OBJECT, 1);\n-        def(Classfile.NEWARRAY, \"newarray\", \"bc\", null, T_OBJECT, 0);\n-        def(Classfile.ANEWARRAY, \"anewarray\", \"bkk\", null, T_OBJECT, 0);\n-        def(Classfile.ARRAYLENGTH, \"arraylength\", \"b\", null, T_VOID, 0);\n-        def(Classfile.ATHROW, \"athrow\", \"b\", null, T_VOID, -1);\n-        def(Classfile.CHECKCAST, \"checkcast\", \"bkk\", null, T_OBJECT, 0);\n-        def(Classfile.INSTANCEOF, \"instanceof\", \"bkk\", null, T_INT, 0);\n-        def(Classfile.MONITORENTER, \"monitorenter\", \"b\", null, T_VOID, -1);\n-        def(Classfile.MONITOREXIT, \"monitorexit\", \"b\", null, T_VOID, -1);\n-        def(Classfile.WIDE, \"wide\", \"\", null, T_VOID, 0);\n-        def(Classfile.MULTIANEWARRAY, \"multianewarray\", \"bkkc\", null, T_OBJECT, 1);\n-        def(Classfile.IFNULL, \"ifnull\", \"boo\", null, T_VOID, -1);\n-        def(Classfile.IFNONNULL, \"ifnonnull\", \"boo\", null, T_VOID, -1);\n-        def(Classfile.GOTO_W, \"goto_w\", \"boooo\", null, T_VOID, 0);\n-        def(Classfile.JSR_W, \"jsr_w\", \"boooo\", null, T_INT, 0);\n+        def(ClassFile.NOP, \"nop\", \"b\", null, T_VOID, 0);\n+        def(ClassFile.ACONST_NULL, \"aconst_null\", \"b\", null, T_OBJECT, 1);\n+        def(ClassFile.ICONST_M1, \"iconst_m1\", \"b\", null, T_INT, 1);\n+        def(ClassFile.ICONST_0, \"iconst_0\", \"b\", null, T_INT, 1);\n+        def(ClassFile.ICONST_1, \"iconst_1\", \"b\", null, T_INT, 1);\n+        def(ClassFile.ICONST_2, \"iconst_2\", \"b\", null, T_INT, 1);\n+        def(ClassFile.ICONST_3, \"iconst_3\", \"b\", null, T_INT, 1);\n+        def(ClassFile.ICONST_4, \"iconst_4\", \"b\", null, T_INT, 1);\n+        def(ClassFile.ICONST_5, \"iconst_5\", \"b\", null, T_INT, 1);\n+        def(ClassFile.LCONST_0, \"lconst_0\", \"b\", null, T_LONG, 2);\n+        def(ClassFile.LCONST_1, \"lconst_1\", \"b\", null, T_LONG, 2);\n+        def(ClassFile.FCONST_0, \"fconst_0\", \"b\", null, T_FLOAT, 1);\n+        def(ClassFile.FCONST_1, \"fconst_1\", \"b\", null, T_FLOAT, 1);\n+        def(ClassFile.FCONST_2, \"fconst_2\", \"b\", null, T_FLOAT, 1);\n+        def(ClassFile.DCONST_0, \"dconst_0\", \"b\", null, T_DOUBLE, 2);\n+        def(ClassFile.DCONST_1, \"dconst_1\", \"b\", null, T_DOUBLE, 2);\n+        def(ClassFile.BIPUSH, \"bipush\", \"bc\", null, T_INT, 1);\n+        def(ClassFile.SIPUSH, \"sipush\", \"bcc\", null, T_INT, 1);\n+        def(ClassFile.LDC, \"ldc\", \"bk\", null, T_ILLEGAL, 1);\n+        def(ClassFile.LDC_W, \"ldc_w\", \"bkk\", null, T_ILLEGAL, 1);\n+        def(ClassFile.LDC2_W, \"ldc2_w\", \"bkk\", null, T_ILLEGAL, 2);\n+        def(ClassFile.ILOAD, \"iload\", \"bi\", \"wbii\", T_INT, 1);\n+        def(ClassFile.LLOAD, \"lload\", \"bi\", \"wbii\", T_LONG, 2);\n+        def(ClassFile.FLOAD, \"fload\", \"bi\", \"wbii\", T_FLOAT, 1);\n+        def(ClassFile.DLOAD, \"dload\", \"bi\", \"wbii\", T_DOUBLE, 2);\n+        def(ClassFile.ALOAD, \"aload\", \"bi\", \"wbii\", T_OBJECT, 1);\n+        def(ClassFile.ILOAD_0, \"iload_0\", \"b\", null, T_INT, 1);\n+        def(ClassFile.ILOAD_1, \"iload_1\", \"b\", null, T_INT, 1);\n+        def(ClassFile.ILOAD_2, \"iload_2\", \"b\", null, T_INT, 1);\n+        def(ClassFile.ILOAD_3, \"iload_3\", \"b\", null, T_INT, 1);\n+        def(ClassFile.LLOAD_0, \"lload_0\", \"b\", null, T_LONG, 2);\n+        def(ClassFile.LLOAD_1, \"lload_1\", \"b\", null, T_LONG, 2);\n+        def(ClassFile.LLOAD_2, \"lload_2\", \"b\", null, T_LONG, 2);\n+        def(ClassFile.LLOAD_3, \"lload_3\", \"b\", null, T_LONG, 2);\n+        def(ClassFile.FLOAD_0, \"fload_0\", \"b\", null, T_FLOAT, 1);\n+        def(ClassFile.FLOAD_1, \"fload_1\", \"b\", null, T_FLOAT, 1);\n+        def(ClassFile.FLOAD_2, \"fload_2\", \"b\", null, T_FLOAT, 1);\n+        def(ClassFile.FLOAD_3, \"fload_3\", \"b\", null, T_FLOAT, 1);\n+        def(ClassFile.DLOAD_0, \"dload_0\", \"b\", null, T_DOUBLE, 2);\n+        def(ClassFile.DLOAD_1, \"dload_1\", \"b\", null, T_DOUBLE, 2);\n+        def(ClassFile.DLOAD_2, \"dload_2\", \"b\", null, T_DOUBLE, 2);\n+        def(ClassFile.DLOAD_3, \"dload_3\", \"b\", null, T_DOUBLE, 2);\n+        def(ClassFile.ALOAD_0, \"aload_0\", \"b\", null, T_OBJECT, 1);\n+        def(ClassFile.ALOAD_1, \"aload_1\", \"b\", null, T_OBJECT, 1);\n+        def(ClassFile.ALOAD_2, \"aload_2\", \"b\", null, T_OBJECT, 1);\n+        def(ClassFile.ALOAD_3, \"aload_3\", \"b\", null, T_OBJECT, 1);\n+        def(ClassFile.IALOAD, \"iaload\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LALOAD, \"laload\", \"b\", null, T_LONG, 0);\n+        def(ClassFile.FALOAD, \"faload\", \"b\", null, T_FLOAT, -1);\n+        def(ClassFile.DALOAD, \"daload\", \"b\", null, T_DOUBLE, 0);\n+        def(ClassFile.AALOAD, \"aaload\", \"b\", null, T_OBJECT, -1);\n+        def(ClassFile.BALOAD, \"baload\", \"b\", null, T_INT, -1);\n+        def(ClassFile.CALOAD, \"caload\", \"b\", null, T_INT, -1);\n+        def(ClassFile.SALOAD, \"saload\", \"b\", null, T_INT, -1);\n+        def(ClassFile.ISTORE, \"istore\", \"bi\", \"wbii\", T_VOID, -1);\n+        def(ClassFile.LSTORE, \"lstore\", \"bi\", \"wbii\", T_VOID, -2);\n+        def(ClassFile.FSTORE, \"fstore\", \"bi\", \"wbii\", T_VOID, -1);\n+        def(ClassFile.DSTORE, \"dstore\", \"bi\", \"wbii\", T_VOID, -2);\n+        def(ClassFile.ASTORE, \"astore\", \"bi\", \"wbii\", T_VOID, -1);\n+        def(ClassFile.ISTORE_0, \"istore_0\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.ISTORE_1, \"istore_1\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.ISTORE_2, \"istore_2\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.ISTORE_3, \"istore_3\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.LSTORE_0, \"lstore_0\", \"b\", null, T_VOID, -2);\n+        def(ClassFile.LSTORE_1, \"lstore_1\", \"b\", null, T_VOID, -2);\n+        def(ClassFile.LSTORE_2, \"lstore_2\", \"b\", null, T_VOID, -2);\n+        def(ClassFile.LSTORE_3, \"lstore_3\", \"b\", null, T_VOID, -2);\n+        def(ClassFile.FSTORE_0, \"fstore_0\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.FSTORE_1, \"fstore_1\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.FSTORE_2, \"fstore_2\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.FSTORE_3, \"fstore_3\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.DSTORE_0, \"dstore_0\", \"b\", null, T_VOID, -2);\n+        def(ClassFile.DSTORE_1, \"dstore_1\", \"b\", null, T_VOID, -2);\n+        def(ClassFile.DSTORE_2, \"dstore_2\", \"b\", null, T_VOID, -2);\n+        def(ClassFile.DSTORE_3, \"dstore_3\", \"b\", null, T_VOID, -2);\n+        def(ClassFile.ASTORE_0, \"astore_0\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.ASTORE_1, \"astore_1\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.ASTORE_2, \"astore_2\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.ASTORE_3, \"astore_3\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.IASTORE, \"iastore\", \"b\", null, T_VOID, -3);\n+        def(ClassFile.LASTORE, \"lastore\", \"b\", null, T_VOID, -4);\n+        def(ClassFile.FASTORE, \"fastore\", \"b\", null, T_VOID, -3);\n+        def(ClassFile.DASTORE, \"dastore\", \"b\", null, T_VOID, -4);\n+        def(ClassFile.AASTORE, \"aastore\", \"b\", null, T_VOID, -3);\n+        def(ClassFile.BASTORE, \"bastore\", \"b\", null, T_VOID, -3);\n+        def(ClassFile.CASTORE, \"castore\", \"b\", null, T_VOID, -3);\n+        def(ClassFile.SASTORE, \"sastore\", \"b\", null, T_VOID, -3);\n+        def(ClassFile.POP, \"pop\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.POP2, \"pop2\", \"b\", null, T_VOID, -2);\n+        def(ClassFile.DUP, \"dup\", \"b\", null, T_VOID, 1);\n+        def(ClassFile.DUP_X1, \"dup_x1\", \"b\", null, T_VOID, 1);\n+        def(ClassFile.DUP_X2, \"dup_x2\", \"b\", null, T_VOID, 1);\n+        def(ClassFile.DUP2, \"dup2\", \"b\", null, T_VOID, 2);\n+        def(ClassFile.DUP2_X1, \"dup2_x1\", \"b\", null, T_VOID, 2);\n+        def(ClassFile.DUP2_X2, \"dup2_x2\", \"b\", null, T_VOID, 2);\n+        def(ClassFile.SWAP, \"swap\", \"b\", null, T_VOID, 0);\n+        def(ClassFile.IADD, \"iadd\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LADD, \"ladd\", \"b\", null, T_LONG, -2);\n+        def(ClassFile.FADD, \"fadd\", \"b\", null, T_FLOAT, -1);\n+        def(ClassFile.DADD, \"dadd\", \"b\", null, T_DOUBLE, -2);\n+        def(ClassFile.ISUB, \"isub\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LSUB, \"lsub\", \"b\", null, T_LONG, -2);\n+        def(ClassFile.FSUB, \"fsub\", \"b\", null, T_FLOAT, -1);\n+        def(ClassFile.DSUB, \"dsub\", \"b\", null, T_DOUBLE, -2);\n+        def(ClassFile.IMUL, \"imul\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LMUL, \"lmul\", \"b\", null, T_LONG, -2);\n+        def(ClassFile.FMUL, \"fmul\", \"b\", null, T_FLOAT, -1);\n+        def(ClassFile.DMUL, \"dmul\", \"b\", null, T_DOUBLE, -2);\n+        def(ClassFile.IDIV, \"idiv\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LDIV, \"ldiv\", \"b\", null, T_LONG, -2);\n+        def(ClassFile.FDIV, \"fdiv\", \"b\", null, T_FLOAT, -1);\n+        def(ClassFile.DDIV, \"ddiv\", \"b\", null, T_DOUBLE, -2);\n+        def(ClassFile.IREM, \"irem\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LREM, \"lrem\", \"b\", null, T_LONG, -2);\n+        def(ClassFile.FREM, \"frem\", \"b\", null, T_FLOAT, -1);\n+        def(ClassFile.DREM, \"drem\", \"b\", null, T_DOUBLE, -2);\n+        def(ClassFile.INEG, \"ineg\", \"b\", null, T_INT, 0);\n+        def(ClassFile.LNEG, \"lneg\", \"b\", null, T_LONG, 0);\n+        def(ClassFile.FNEG, \"fneg\", \"b\", null, T_FLOAT, 0);\n+        def(ClassFile.DNEG, \"dneg\", \"b\", null, T_DOUBLE, 0);\n+        def(ClassFile.ISHL, \"ishl\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LSHL, \"lshl\", \"b\", null, T_LONG, -1);\n+        def(ClassFile.ISHR, \"ishr\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LSHR, \"lshr\", \"b\", null, T_LONG, -1);\n+        def(ClassFile.IUSHR, \"iushr\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LUSHR, \"lushr\", \"b\", null, T_LONG, -1);\n+        def(ClassFile.IAND, \"iand\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LAND, \"land\", \"b\", null, T_LONG, -2);\n+        def(ClassFile.IOR, \"ior\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LOR, \"lor\", \"b\", null, T_LONG, -2);\n+        def(ClassFile.IXOR, \"ixor\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LXOR, \"lxor\", \"b\", null, T_LONG, -2);\n+        def(ClassFile.IINC, \"iinc\", \"bic\", \"wbiicc\", T_VOID, 0);\n+        def(ClassFile.I2L, \"i2l\", \"b\", null, T_LONG, 1);\n+        def(ClassFile.I2F, \"i2f\", \"b\", null, T_FLOAT, 0);\n+        def(ClassFile.I2D, \"i2d\", \"b\", null, T_DOUBLE, 1);\n+        def(ClassFile.L2I, \"l2i\", \"b\", null, T_INT, -1);\n+        def(ClassFile.L2F, \"l2f\", \"b\", null, T_FLOAT, -1);\n+        def(ClassFile.L2D, \"l2d\", \"b\", null, T_DOUBLE, 0);\n+        def(ClassFile.F2I, \"f2i\", \"b\", null, T_INT, 0);\n+        def(ClassFile.F2L, \"f2l\", \"b\", null, T_LONG, 1);\n+        def(ClassFile.F2D, \"f2d\", \"b\", null, T_DOUBLE, 1);\n+        def(ClassFile.D2I, \"d2i\", \"b\", null, T_INT, -1);\n+        def(ClassFile.D2L, \"d2l\", \"b\", null, T_LONG, 0);\n+        def(ClassFile.D2F, \"d2f\", \"b\", null, T_FLOAT, -1);\n+        def(ClassFile.I2B, \"i2b\", \"b\", null, T_BYTE, 0);\n+        def(ClassFile.I2C, \"i2c\", \"b\", null, T_CHAR, 0);\n+        def(ClassFile.I2S, \"i2s\", \"b\", null, T_SHORT, 0);\n+        def(ClassFile.LCMP, \"lcmp\", \"b\", null, T_VOID, -3);\n+        def(ClassFile.FCMPL, \"fcmpl\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.FCMPG, \"fcmpg\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.DCMPL, \"dcmpl\", \"b\", null, T_VOID, -3);\n+        def(ClassFile.DCMPG, \"dcmpg\", \"b\", null, T_VOID, -3);\n+        def(ClassFile.IFEQ, \"ifeq\", \"boo\", null, T_VOID, -1);\n+        def(ClassFile.IFNE, \"ifne\", \"boo\", null, T_VOID, -1);\n+        def(ClassFile.IFLT, \"iflt\", \"boo\", null, T_VOID, -1);\n+        def(ClassFile.IFGE, \"ifge\", \"boo\", null, T_VOID, -1);\n+        def(ClassFile.IFGT, \"ifgt\", \"boo\", null, T_VOID, -1);\n+        def(ClassFile.IFLE, \"ifle\", \"boo\", null, T_VOID, -1);\n+        def(ClassFile.IF_ICMPEQ, \"if_icmpeq\", \"boo\", null, T_VOID, -2);\n+        def(ClassFile.IF_ICMPNE, \"if_icmpne\", \"boo\", null, T_VOID, -2);\n+        def(ClassFile.IF_ICMPLT, \"if_icmplt\", \"boo\", null, T_VOID, -2);\n+        def(ClassFile.IF_ICMPGE, \"if_icmpge\", \"boo\", null, T_VOID, -2);\n+        def(ClassFile.IF_ICMPGT, \"if_icmpgt\", \"boo\", null, T_VOID, -2);\n+        def(ClassFile.IF_ICMPLE, \"if_icmple\", \"boo\", null, T_VOID, -2);\n+        def(ClassFile.IF_ACMPEQ, \"if_acmpeq\", \"boo\", null, T_VOID, -2);\n+        def(ClassFile.IF_ACMPNE, \"if_acmpne\", \"boo\", null, T_VOID, -2);\n+        def(ClassFile.GOTO, \"goto\", \"boo\", null, T_VOID, 0);\n+        def(ClassFile.JSR, \"jsr\", \"boo\", null, T_INT, 0);\n+        def(ClassFile.RET, \"ret\", \"bi\", \"wbii\", T_VOID, 0);\n+        def(ClassFile.TABLESWITCH, \"tableswitch\", \"\", null, T_VOID, -1); \/\/ may have backward branches\n+        def(ClassFile.LOOKUPSWITCH, \"lookupswitch\", \"\", null, T_VOID, -1); \/\/ rewriting in interpreter\n+        def(ClassFile.IRETURN, \"ireturn\", \"b\", null, T_INT, -1);\n+        def(ClassFile.LRETURN, \"lreturn\", \"b\", null, T_LONG, -2);\n+        def(ClassFile.FRETURN, \"freturn\", \"b\", null, T_FLOAT, -1);\n+        def(ClassFile.DRETURN, \"dreturn\", \"b\", null, T_DOUBLE, -2);\n+        def(ClassFile.ARETURN, \"areturn\", \"b\", null, T_OBJECT, -1);\n+        def(ClassFile.RETURN, \"return\", \"b\", null, T_VOID, 0);\n+        def(ClassFile.GETSTATIC, \"getstatic\", \"bJJ\", null, T_ILLEGAL, 1);\n+        def(ClassFile.PUTSTATIC, \"putstatic\", \"bJJ\", null, T_ILLEGAL, -1);\n+        def(ClassFile.GETFIELD, \"getfield\", \"bJJ\", null, T_ILLEGAL, 0);\n+        def(ClassFile.PUTFIELD, \"putfield\", \"bJJ\", null, T_ILLEGAL, -2);\n+        def(ClassFile.INVOKEVIRTUAL, \"invokevirtual\", \"bJJ\", null, T_ILLEGAL, -1);\n+        def(ClassFile.INVOKESPECIAL, \"invokespecial\", \"bJJ\", null, T_ILLEGAL, -1);\n+        def(ClassFile.INVOKESTATIC, \"invokestatic\", \"bJJ\", null, T_ILLEGAL, 0);\n+        def(ClassFile.INVOKEINTERFACE, \"invokeinterface\", \"bJJ__\", null, T_ILLEGAL, -1);\n+        def(ClassFile.INVOKEDYNAMIC, \"invokedynamic\", \"bJJJJ\", null, T_ILLEGAL, 0);\n+        def(ClassFile.NEW, \"new\", \"bkk\", null, T_OBJECT, 1);\n+        def(ClassFile.NEWARRAY, \"newarray\", \"bc\", null, T_OBJECT, 0);\n+        def(ClassFile.ANEWARRAY, \"anewarray\", \"bkk\", null, T_OBJECT, 0);\n+        def(ClassFile.ARRAYLENGTH, \"arraylength\", \"b\", null, T_VOID, 0);\n+        def(ClassFile.ATHROW, \"athrow\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.CHECKCAST, \"checkcast\", \"bkk\", null, T_OBJECT, 0);\n+        def(ClassFile.INSTANCEOF, \"instanceof\", \"bkk\", null, T_INT, 0);\n+        def(ClassFile.MONITORENTER, \"monitorenter\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.MONITOREXIT, \"monitorexit\", \"b\", null, T_VOID, -1);\n+        def(ClassFile.WIDE, \"wide\", \"\", null, T_VOID, 0);\n+        def(ClassFile.MULTIANEWARRAY, \"multianewarray\", \"bkkc\", null, T_OBJECT, 1);\n+        def(ClassFile.IFNULL, \"ifnull\", \"boo\", null, T_VOID, -1);\n+        def(ClassFile.IFNONNULL, \"ifnonnull\", \"boo\", null, T_VOID, -1);\n+        def(ClassFile.GOTO_W, \"goto_w\", \"boooo\", null, T_VOID, 0);\n+        def(ClassFile.JSR_W, \"jsr_w\", \"boooo\", null, T_INT, 0);\n@@ -347,35 +347,35 @@\n-        def(_fast_agetfield, \"fast_agetfield\", \"bJJ\", null, T_OBJECT, 0, Classfile.GETFIELD);\n-        def(_fast_bgetfield, \"fast_bgetfield\", \"bJJ\", null, T_INT, 0, Classfile.GETFIELD);\n-        def(_fast_cgetfield, \"fast_cgetfield\", \"bJJ\", null, T_CHAR, 0, Classfile.GETFIELD);\n-        def(_fast_dgetfield, \"fast_dgetfield\", \"bJJ\", null, T_DOUBLE, 0, Classfile.GETFIELD);\n-        def(_fast_fgetfield, \"fast_fgetfield\", \"bJJ\", null, T_FLOAT, 0, Classfile.GETFIELD);\n-        def(_fast_igetfield, \"fast_igetfield\", \"bJJ\", null, T_INT, 0, Classfile.GETFIELD);\n-        def(_fast_lgetfield, \"fast_lgetfield\", \"bJJ\", null, T_LONG, 0, Classfile.GETFIELD);\n-        def(_fast_sgetfield, \"fast_sgetfield\", \"bJJ\", null, T_SHORT, 0, Classfile.GETFIELD);\n-        def(_fast_aputfield, \"fast_aputfield\", \"bJJ\", null, T_OBJECT, 0, Classfile.PUTFIELD);\n-        def(_fast_bputfield, \"fast_bputfield\", \"bJJ\", null, T_INT, 0, Classfile.PUTFIELD);\n-        def(_fast_zputfield, \"fast_zputfield\", \"bJJ\", null, T_INT, 0, Classfile.PUTFIELD);\n-        def(_fast_cputfield, \"fast_cputfield\", \"bJJ\", null, T_CHAR, 0, Classfile.PUTFIELD);\n-        def(_fast_dputfield, \"fast_dputfield\", \"bJJ\", null, T_DOUBLE, 0, Classfile.PUTFIELD);\n-        def(_fast_fputfield, \"fast_fputfield\", \"bJJ\", null, T_FLOAT, 0, Classfile.PUTFIELD);\n-        def(_fast_iputfield, \"fast_iputfield\", \"bJJ\", null, T_INT, 0, Classfile.PUTFIELD);\n-        def(_fast_lputfield, \"fast_lputfield\", \"bJJ\", null, T_LONG, 0, Classfile.PUTFIELD);\n-        def(_fast_sputfield, \"fast_sputfield\", \"bJJ\", null, T_SHORT, 0, Classfile.PUTFIELD);\n-        def(_fast_aload_0, \"fast_aload_0\", \"b\", null, T_OBJECT, 1, Classfile.ALOAD_0);\n-        def(_fast_iaccess_0, \"fast_iaccess_0\", \"b_JJ\", null, T_INT, 1, Classfile.ALOAD_0);\n-        def(_fast_aaccess_0, \"fast_aaccess_0\", \"b_JJ\", null, T_OBJECT, 1, Classfile.ALOAD_0);\n-        def(_fast_faccess_0, \"fast_faccess_0\", \"b_JJ\", null, T_OBJECT, 1, Classfile.ALOAD_0);\n-        def(_fast_iload, \"fast_iload\", \"bi\", null, T_INT, 1, Classfile.ILOAD);\n-        def(_fast_iload2, \"fast_iload2\", \"bi_i\", null, T_INT, 2, Classfile.ILOAD);\n-        def(_fast_icaload, \"fast_icaload\", \"bi_\", null, T_INT, 0, Classfile.ILOAD);\n-        def(_fast_invokevfinal, \"fast_invokevfinal\", \"bJJ\", null, T_ILLEGAL, -1, Classfile.INVOKEVIRTUAL);\n-        def(_fast_linearswitch, \"fast_linearswitch\", \"\", null, T_VOID, -1, Classfile.LOOKUPSWITCH);\n-        def(_fast_binaryswitch, \"fast_binaryswitch\", \"\", null, T_VOID, -1, Classfile.LOOKUPSWITCH);\n-        def(_return_register_finalizer, \"return_register_finalizer\", \"b\", null, T_VOID, 0, Classfile.RETURN);\n-        def(_invokehandle, \"invokehandle\", \"bJJ\", null, T_ILLEGAL, -1, Classfile.INVOKEVIRTUAL);\n-        def(_fast_aldc, \"fast_aldc\", \"bj\", null, T_OBJECT, 1, Classfile.LDC);\n-        def(_fast_aldc_w, \"fast_aldc_w\", \"bJJ\", null, T_OBJECT, 1, Classfile.LDC_W);\n-        def(_nofast_getfield, \"nofast_getfield\", \"bJJ\", null, T_ILLEGAL, 0, Classfile.GETFIELD);\n-        def(_nofast_putfield, \"nofast PUTFIELD\", \"bJJ\", null, T_ILLEGAL, -2, Classfile.PUTFIELD);\n-        def(_nofast_aload_0, \"nofast_aload_0\", \"b\", null, T_ILLEGAL, 1, Classfile.ALOAD_0);\n-        def(_nofast_iload, \"nofast_iload\", \"bi\", null, T_ILLEGAL, 1, Classfile.ILOAD);\n+        def(_fast_agetfield, \"fast_agetfield\", \"bJJ\", null, T_OBJECT, 0, ClassFile.GETFIELD);\n+        def(_fast_bgetfield, \"fast_bgetfield\", \"bJJ\", null, T_INT, 0, ClassFile.GETFIELD);\n+        def(_fast_cgetfield, \"fast_cgetfield\", \"bJJ\", null, T_CHAR, 0, ClassFile.GETFIELD);\n+        def(_fast_dgetfield, \"fast_dgetfield\", \"bJJ\", null, T_DOUBLE, 0, ClassFile.GETFIELD);\n+        def(_fast_fgetfield, \"fast_fgetfield\", \"bJJ\", null, T_FLOAT, 0, ClassFile.GETFIELD);\n+        def(_fast_igetfield, \"fast_igetfield\", \"bJJ\", null, T_INT, 0, ClassFile.GETFIELD);\n+        def(_fast_lgetfield, \"fast_lgetfield\", \"bJJ\", null, T_LONG, 0, ClassFile.GETFIELD);\n+        def(_fast_sgetfield, \"fast_sgetfield\", \"bJJ\", null, T_SHORT, 0, ClassFile.GETFIELD);\n+        def(_fast_aputfield, \"fast_aputfield\", \"bJJ\", null, T_OBJECT, 0, ClassFile.PUTFIELD);\n+        def(_fast_bputfield, \"fast_bputfield\", \"bJJ\", null, T_INT, 0, ClassFile.PUTFIELD);\n+        def(_fast_zputfield, \"fast_zputfield\", \"bJJ\", null, T_INT, 0, ClassFile.PUTFIELD);\n+        def(_fast_cputfield, \"fast_cputfield\", \"bJJ\", null, T_CHAR, 0, ClassFile.PUTFIELD);\n+        def(_fast_dputfield, \"fast_dputfield\", \"bJJ\", null, T_DOUBLE, 0, ClassFile.PUTFIELD);\n+        def(_fast_fputfield, \"fast_fputfield\", \"bJJ\", null, T_FLOAT, 0, ClassFile.PUTFIELD);\n+        def(_fast_iputfield, \"fast_iputfield\", \"bJJ\", null, T_INT, 0, ClassFile.PUTFIELD);\n+        def(_fast_lputfield, \"fast_lputfield\", \"bJJ\", null, T_LONG, 0, ClassFile.PUTFIELD);\n+        def(_fast_sputfield, \"fast_sputfield\", \"bJJ\", null, T_SHORT, 0, ClassFile.PUTFIELD);\n+        def(_fast_aload_0, \"fast_aload_0\", \"b\", null, T_OBJECT, 1, ClassFile.ALOAD_0);\n+        def(_fast_iaccess_0, \"fast_iaccess_0\", \"b_JJ\", null, T_INT, 1, ClassFile.ALOAD_0);\n+        def(_fast_aaccess_0, \"fast_aaccess_0\", \"b_JJ\", null, T_OBJECT, 1, ClassFile.ALOAD_0);\n+        def(_fast_faccess_0, \"fast_faccess_0\", \"b_JJ\", null, T_OBJECT, 1, ClassFile.ALOAD_0);\n+        def(_fast_iload, \"fast_iload\", \"bi\", null, T_INT, 1, ClassFile.ILOAD);\n+        def(_fast_iload2, \"fast_iload2\", \"bi_i\", null, T_INT, 2, ClassFile.ILOAD);\n+        def(_fast_icaload, \"fast_icaload\", \"bi_\", null, T_INT, 0, ClassFile.ILOAD);\n+        def(_fast_invokevfinal, \"fast_invokevfinal\", \"bJJ\", null, T_ILLEGAL, -1, ClassFile.INVOKEVIRTUAL);\n+        def(_fast_linearswitch, \"fast_linearswitch\", \"\", null, T_VOID, -1, ClassFile.LOOKUPSWITCH);\n+        def(_fast_binaryswitch, \"fast_binaryswitch\", \"\", null, T_VOID, -1, ClassFile.LOOKUPSWITCH);\n+        def(_return_register_finalizer, \"return_register_finalizer\", \"b\", null, T_VOID, 0, ClassFile.RETURN);\n+        def(_invokehandle, \"invokehandle\", \"bJJ\", null, T_ILLEGAL, -1, ClassFile.INVOKEVIRTUAL);\n+        def(_fast_aldc, \"fast_aldc\", \"bj\", null, T_OBJECT, 1, ClassFile.LDC);\n+        def(_fast_aldc_w, \"fast_aldc_w\", \"bJJ\", null, T_OBJECT, 1, ClassFile.LDC_W);\n+        def(_nofast_getfield, \"nofast_getfield\", \"bJJ\", null, T_ILLEGAL, 0, ClassFile.GETFIELD);\n+        def(_nofast_putfield, \"nofast PUTFIELD\", \"bJJ\", null, T_ILLEGAL, -2, ClassFile.PUTFIELD);\n+        def(_nofast_aload_0, \"nofast_aload_0\", \"b\", null, T_ILLEGAL, 1, ClassFile.ALOAD_0);\n+        def(_nofast_iload, \"nofast_iload\", \"bi\", null, T_ILLEGAL, 1, ClassFile.ILOAD);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationBytecodes.java","additions":242,"deletions":242,"binary":false,"changes":484,"status":"modified"},{"patch":"@@ -31,4 +31,4 @@\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.DynamicConstantPoolEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.DynamicConstantPoolEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n@@ -36,5 +36,5 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.attribute.LocalVariableInfo;\n-import jdk.internal.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.attribute.LocalVariableInfo;\n+import java.lang.classfile.Attributes;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationWrapper.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,4 +31,4 @@\n-import jdk.internal.classfile.ClassHierarchyResolver;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.components.ClassPrinter;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.components.ClassPrinter;\n+import java.lang.classfile.ClassFile;\n@@ -331,6 +331,6 @@\n-                    if (opcode != Classfile.IINC && opcode != Classfile.ILOAD\n-                        && opcode != Classfile.ALOAD && opcode != Classfile.LLOAD\n-                        && opcode != Classfile.ISTORE && opcode != Classfile.ASTORE\n-                        && opcode != Classfile.LSTORE && opcode != Classfile.FLOAD\n-                        && opcode != Classfile.DLOAD && opcode != Classfile.FSTORE\n-                        && opcode != Classfile.DSTORE) {\n+                    if (opcode != ClassFile.IINC && opcode != ClassFile.ILOAD\n+                        && opcode != ClassFile.ALOAD && opcode != ClassFile.LLOAD\n+                        && opcode != ClassFile.ISTORE && opcode != ClassFile.ASTORE\n+                        && opcode != ClassFile.LSTORE && opcode != ClassFile.FLOAD\n+                        && opcode != ClassFile.DLOAD && opcode != ClassFile.FSTORE\n+                        && opcode != ClassFile.DSTORE) {\n@@ -345,1 +345,1 @@\n-                    case Classfile.NOP :\n+                    case ClassFile.NOP :\n@@ -347,1 +347,1 @@\n-                    case Classfile.ACONST_NULL :\n+                    case ClassFile.ACONST_NULL :\n@@ -351,7 +351,7 @@\n-                    case Classfile.ICONST_M1 :\n-                    case Classfile.ICONST_0 :\n-                    case Classfile.ICONST_1 :\n-                    case Classfile.ICONST_2 :\n-                    case Classfile.ICONST_3 :\n-                    case Classfile.ICONST_4 :\n-                    case Classfile.ICONST_5 :\n+                    case ClassFile.ICONST_M1 :\n+                    case ClassFile.ICONST_0 :\n+                    case ClassFile.ICONST_1 :\n+                    case ClassFile.ICONST_2 :\n+                    case ClassFile.ICONST_3 :\n+                    case ClassFile.ICONST_4 :\n+                    case ClassFile.ICONST_5 :\n@@ -361,2 +361,2 @@\n-                    case Classfile.LCONST_0 :\n-                    case Classfile.LCONST_1 :\n+                    case ClassFile.LCONST_0 :\n+                    case ClassFile.LCONST_1 :\n@@ -367,3 +367,3 @@\n-                    case Classfile.FCONST_0 :\n-                    case Classfile.FCONST_1 :\n-                    case Classfile.FCONST_2 :\n+                    case ClassFile.FCONST_0 :\n+                    case ClassFile.FCONST_1 :\n+                    case ClassFile.FCONST_2 :\n@@ -373,2 +373,2 @@\n-                    case Classfile.DCONST_0 :\n-                    case Classfile.DCONST_1 :\n+                    case ClassFile.DCONST_0 :\n+                    case ClassFile.DCONST_1 :\n@@ -379,2 +379,2 @@\n-                    case Classfile.SIPUSH :\n-                    case Classfile.BIPUSH :\n+                    case ClassFile.SIPUSH :\n+                    case ClassFile.BIPUSH :\n@@ -384,1 +384,1 @@\n-                    case Classfile.LDC :\n+                    case ClassFile.LDC :\n@@ -389,2 +389,2 @@\n-                    case Classfile.LDC_W :\n-                    case Classfile.LDC2_W :\n+                    case ClassFile.LDC_W :\n+                    case ClassFile.LDC2_W :\n@@ -395,1 +395,1 @@\n-                    case Classfile.ILOAD :\n+                    case ClassFile.ILOAD :\n@@ -398,5 +398,5 @@\n-                    case Classfile.ILOAD_0 :\n-                    case Classfile.ILOAD_1 :\n-                    case Classfile.ILOAD_2 :\n-                    case Classfile.ILOAD_3 :\n-                        index = opcode - Classfile.ILOAD_0;\n+                    case ClassFile.ILOAD_0 :\n+                    case ClassFile.ILOAD_1 :\n+                    case ClassFile.ILOAD_2 :\n+                    case ClassFile.ILOAD_3 :\n+                        index = opcode - ClassFile.ILOAD_0;\n@@ -405,1 +405,1 @@\n-                    case Classfile.LLOAD :\n+                    case ClassFile.LLOAD :\n@@ -408,5 +408,5 @@\n-                    case Classfile.LLOAD_0 :\n-                    case Classfile.LLOAD_1 :\n-                    case Classfile.LLOAD_2 :\n-                    case Classfile.LLOAD_3 :\n-                        index = opcode - Classfile.LLOAD_0;\n+                    case ClassFile.LLOAD_0 :\n+                    case ClassFile.LLOAD_1 :\n+                    case ClassFile.LLOAD_2 :\n+                    case ClassFile.LLOAD_3 :\n+                        index = opcode - ClassFile.LLOAD_0;\n@@ -415,1 +415,1 @@\n-                    case Classfile.FLOAD :\n+                    case ClassFile.FLOAD :\n@@ -418,5 +418,5 @@\n-                    case Classfile.FLOAD_0 :\n-                    case Classfile.FLOAD_1 :\n-                    case Classfile.FLOAD_2 :\n-                    case Classfile.FLOAD_3 :\n-                        index = opcode - Classfile.FLOAD_0;\n+                    case ClassFile.FLOAD_0 :\n+                    case ClassFile.FLOAD_1 :\n+                    case ClassFile.FLOAD_2 :\n+                    case ClassFile.FLOAD_3 :\n+                        index = opcode - ClassFile.FLOAD_0;\n@@ -425,1 +425,1 @@\n-                    case Classfile.DLOAD :\n+                    case ClassFile.DLOAD :\n@@ -428,5 +428,5 @@\n-                    case Classfile.DLOAD_0 :\n-                    case Classfile.DLOAD_1 :\n-                    case Classfile.DLOAD_2 :\n-                    case Classfile.DLOAD_3 :\n-                        index = opcode - Classfile.DLOAD_0;\n+                    case ClassFile.DLOAD_0 :\n+                    case ClassFile.DLOAD_1 :\n+                    case ClassFile.DLOAD_2 :\n+                    case ClassFile.DLOAD_3 :\n+                        index = opcode - ClassFile.DLOAD_0;\n@@ -435,1 +435,1 @@\n-                    case Classfile.ALOAD :\n+                    case ClassFile.ALOAD :\n@@ -438,5 +438,5 @@\n-                    case Classfile.ALOAD_0 :\n-                    case Classfile.ALOAD_1 :\n-                    case Classfile.ALOAD_2 :\n-                    case Classfile.ALOAD_3 :\n-                        index = opcode - Classfile.ALOAD_0;\n+                    case ClassFile.ALOAD_0 :\n+                    case ClassFile.ALOAD_1 :\n+                    case ClassFile.ALOAD_2 :\n+                    case ClassFile.ALOAD_3 :\n+                        index = opcode - ClassFile.ALOAD_0;\n@@ -445,1 +445,1 @@\n-                    case Classfile.IALOAD :\n+                    case ClassFile.IALOAD :\n@@ -456,1 +456,1 @@\n-                    case Classfile.BALOAD :\n+                    case ClassFile.BALOAD :\n@@ -467,1 +467,1 @@\n-                    case Classfile.CALOAD :\n+                    case ClassFile.CALOAD :\n@@ -478,1 +478,1 @@\n-                    case Classfile.SALOAD :\n+                    case ClassFile.SALOAD :\n@@ -489,1 +489,1 @@\n-                    case Classfile.LALOAD :\n+                    case ClassFile.LALOAD :\n@@ -501,1 +501,1 @@\n-                    case Classfile.FALOAD :\n+                    case ClassFile.FALOAD :\n@@ -512,1 +512,1 @@\n-                    case Classfile.DALOAD :\n+                    case ClassFile.DALOAD :\n@@ -524,1 +524,1 @@\n-                    case Classfile.AALOAD : {\n+                    case ClassFile.AALOAD : {\n@@ -542,1 +542,1 @@\n-                    case Classfile.ISTORE :\n+                    case ClassFile.ISTORE :\n@@ -545,5 +545,5 @@\n-                    case Classfile.ISTORE_0 :\n-                    case Classfile.ISTORE_1 :\n-                    case Classfile.ISTORE_2 :\n-                    case Classfile.ISTORE_3 :\n-                        index = opcode - Classfile.ISTORE_0;\n+                    case ClassFile.ISTORE_0 :\n+                    case ClassFile.ISTORE_1 :\n+                    case ClassFile.ISTORE_2 :\n+                    case ClassFile.ISTORE_3 :\n+                        index = opcode - ClassFile.ISTORE_0;\n@@ -552,1 +552,1 @@\n-                    case Classfile.LSTORE :\n+                    case ClassFile.LSTORE :\n@@ -555,5 +555,5 @@\n-                    case Classfile.LSTORE_0 :\n-                    case Classfile.LSTORE_1 :\n-                    case Classfile.LSTORE_2 :\n-                    case Classfile.LSTORE_3 :\n-                        index = opcode - Classfile.LSTORE_0;\n+                    case ClassFile.LSTORE_0 :\n+                    case ClassFile.LSTORE_1 :\n+                    case ClassFile.LSTORE_2 :\n+                    case ClassFile.LSTORE_3 :\n+                        index = opcode - ClassFile.LSTORE_0;\n@@ -562,1 +562,1 @@\n-                    case Classfile.FSTORE :\n+                    case ClassFile.FSTORE :\n@@ -565,5 +565,5 @@\n-                    case Classfile.FSTORE_0 :\n-                    case Classfile.FSTORE_1 :\n-                    case Classfile.FSTORE_2 :\n-                    case Classfile.FSTORE_3 :\n-                        index = opcode - Classfile.FSTORE_0;\n+                    case ClassFile.FSTORE_0 :\n+                    case ClassFile.FSTORE_1 :\n+                    case ClassFile.FSTORE_2 :\n+                    case ClassFile.FSTORE_3 :\n+                        index = opcode - ClassFile.FSTORE_0;\n@@ -572,1 +572,1 @@\n-                    case Classfile.DSTORE :\n+                    case ClassFile.DSTORE :\n@@ -575,5 +575,5 @@\n-                    case Classfile.DSTORE_0 :\n-                    case Classfile.DSTORE_1 :\n-                    case Classfile.DSTORE_2 :\n-                    case Classfile.DSTORE_3 :\n-                        index = opcode - Classfile.DSTORE_0;\n+                    case ClassFile.DSTORE_0 :\n+                    case ClassFile.DSTORE_1 :\n+                    case ClassFile.DSTORE_2 :\n+                    case ClassFile.DSTORE_3 :\n+                        index = opcode - ClassFile.DSTORE_0;\n@@ -582,1 +582,1 @@\n-                    case Classfile.ASTORE :\n+                    case ClassFile.ASTORE :\n@@ -585,5 +585,5 @@\n-                    case Classfile.ASTORE_0 :\n-                    case Classfile.ASTORE_1 :\n-                    case Classfile.ASTORE_2 :\n-                    case Classfile.ASTORE_3 :\n-                        index = opcode - Classfile.ASTORE_0;\n+                    case ClassFile.ASTORE_0 :\n+                    case ClassFile.ASTORE_1 :\n+                    case ClassFile.ASTORE_2 :\n+                    case ClassFile.ASTORE_3 :\n+                        index = opcode - ClassFile.ASTORE_0;\n@@ -592,1 +592,1 @@\n-                    case Classfile.IASTORE :\n+                    case ClassFile.IASTORE :\n@@ -603,1 +603,1 @@\n-                    case Classfile.BASTORE :\n+                    case ClassFile.BASTORE :\n@@ -614,1 +614,1 @@\n-                    case Classfile.CASTORE :\n+                    case ClassFile.CASTORE :\n@@ -625,1 +625,1 @@\n-                    case Classfile.SASTORE :\n+                    case ClassFile.SASTORE :\n@@ -636,1 +636,1 @@\n-                    case Classfile.LASTORE :\n+                    case ClassFile.LASTORE :\n@@ -648,1 +648,1 @@\n-                    case Classfile.FASTORE :\n+                    case ClassFile.FASTORE :\n@@ -659,1 +659,1 @@\n-                    case Classfile.DASTORE :\n+                    case ClassFile.DASTORE :\n@@ -671,1 +671,1 @@\n-                    case Classfile.AASTORE :\n+                    case ClassFile.AASTORE :\n@@ -683,1 +683,1 @@\n-                    case Classfile.POP :\n+                    case ClassFile.POP :\n@@ -687,1 +687,1 @@\n-                    case Classfile.POP2 :\n+                    case ClassFile.POP2 :\n@@ -699,1 +699,1 @@\n-                    case Classfile.DUP :\n+                    case ClassFile.DUP :\n@@ -705,1 +705,1 @@\n-                    case Classfile.DUP_X1 :\n+                    case ClassFile.DUP_X1 :\n@@ -714,1 +714,1 @@\n-                    case Classfile.DUP_X2 :\n+                    case ClassFile.DUP_X2 :\n@@ -735,1 +735,1 @@\n-                    case Classfile.DUP2 :\n+                    case ClassFile.DUP2 :\n@@ -751,1 +751,1 @@\n-                    case Classfile.DUP2_X1 :\n+                    case ClassFile.DUP2_X1 :\n@@ -773,1 +773,1 @@\n-                    case Classfile.DUP2_X2 :\n+                    case ClassFile.DUP2_X2 :\n@@ -802,1 +802,1 @@\n-                    case Classfile.SWAP :\n+                    case ClassFile.SWAP :\n@@ -810,11 +810,11 @@\n-                    case Classfile.IADD :\n-                    case Classfile.ISUB :\n-                    case Classfile.IMUL :\n-                    case Classfile.IDIV :\n-                    case Classfile.IREM :\n-                    case Classfile.ISHL :\n-                    case Classfile.ISHR :\n-                    case Classfile.IUSHR :\n-                    case Classfile.IOR :\n-                    case Classfile.IXOR :\n-                    case Classfile.IAND :\n+                    case ClassFile.IADD :\n+                    case ClassFile.ISUB :\n+                    case ClassFile.IMUL :\n+                    case ClassFile.IDIV :\n+                    case ClassFile.IREM :\n+                    case ClassFile.ISHL :\n+                    case ClassFile.ISHR :\n+                    case ClassFile.IUSHR :\n+                    case ClassFile.IOR :\n+                    case ClassFile.IXOR :\n+                    case ClassFile.IAND :\n@@ -824,1 +824,1 @@\n-                    case Classfile.INEG :\n+                    case ClassFile.INEG :\n@@ -830,8 +830,8 @@\n-                    case Classfile.LADD :\n-                    case Classfile.LSUB :\n-                    case Classfile.LMUL :\n-                    case Classfile.LDIV :\n-                    case Classfile.LREM :\n-                    case Classfile.LAND :\n-                    case Classfile.LOR :\n-                    case Classfile.LXOR :\n+                    case ClassFile.LADD :\n+                    case ClassFile.LSUB :\n+                    case ClassFile.LMUL :\n+                    case ClassFile.LDIV :\n+                    case ClassFile.LREM :\n+                    case ClassFile.LAND :\n+                    case ClassFile.LOR :\n+                    case ClassFile.LXOR :\n@@ -842,1 +842,1 @@\n-                    case Classfile.LNEG :\n+                    case ClassFile.LNEG :\n@@ -850,3 +850,3 @@\n-                    case Classfile.LSHL :\n-                    case Classfile.LSHR :\n-                    case Classfile.LUSHR :\n+                    case ClassFile.LSHL :\n+                    case ClassFile.LSHR :\n+                    case ClassFile.LUSHR :\n@@ -862,5 +862,5 @@\n-                    case Classfile.FADD :\n-                    case Classfile.FSUB :\n-                    case Classfile.FMUL :\n-                    case Classfile.FDIV :\n-                    case Classfile.FREM :\n+                    case ClassFile.FADD :\n+                    case ClassFile.FSUB :\n+                    case ClassFile.FMUL :\n+                    case ClassFile.FDIV :\n+                    case ClassFile.FREM :\n@@ -870,1 +870,1 @@\n-                    case Classfile.FNEG :\n+                    case ClassFile.FNEG :\n@@ -876,5 +876,5 @@\n-                    case Classfile.DADD :\n-                    case Classfile.DSUB :\n-                    case Classfile.DMUL :\n-                    case Classfile.DDIV :\n-                    case Classfile.DREM :\n+                    case ClassFile.DADD :\n+                    case ClassFile.DSUB :\n+                    case ClassFile.DMUL :\n+                    case ClassFile.DDIV :\n+                    case ClassFile.DREM :\n@@ -885,1 +885,1 @@\n-                    case Classfile.DNEG :\n+                    case ClassFile.DNEG :\n@@ -893,1 +893,1 @@\n-                                case Classfile.IINC :\n+                                case ClassFile.IINC :\n@@ -896,1 +896,1 @@\n-                                case Classfile.I2L :\n+                                case ClassFile.I2L :\n@@ -903,1 +903,1 @@\n-                             case Classfile.L2I :\n+                             case ClassFile.L2I :\n@@ -910,1 +910,1 @@\n-                                case Classfile.I2F :\n+                                case ClassFile.I2F :\n@@ -916,1 +916,1 @@\n-                    case Classfile.I2D :\n+                    case ClassFile.I2D :\n@@ -923,1 +923,1 @@\n-                    case Classfile.L2F :\n+                    case ClassFile.L2F :\n@@ -930,1 +930,1 @@\n-                    case Classfile.L2D :\n+                    case ClassFile.L2D :\n@@ -938,1 +938,1 @@\n-                    case Classfile.F2I :\n+                    case ClassFile.F2I :\n@@ -944,1 +944,1 @@\n-                    case Classfile.F2L :\n+                    case ClassFile.F2L :\n@@ -951,1 +951,1 @@\n-                    case Classfile.F2D :\n+                    case ClassFile.F2D :\n@@ -958,1 +958,1 @@\n-                    case Classfile.D2I :\n+                    case ClassFile.D2I :\n@@ -965,1 +965,1 @@\n-                    case Classfile.D2L :\n+                    case ClassFile.D2L :\n@@ -973,1 +973,1 @@\n-                    case Classfile.D2F :\n+                    case ClassFile.D2F :\n@@ -980,3 +980,3 @@\n-                    case Classfile.I2B :\n-                    case Classfile.I2C :\n-                    case Classfile.I2S :\n+                    case ClassFile.I2B :\n+                    case ClassFile.I2C :\n+                    case ClassFile.I2S :\n@@ -988,1 +988,1 @@\n-                    case Classfile.LCMP :\n+                    case ClassFile.LCMP :\n@@ -998,2 +998,2 @@\n-                    case Classfile.FCMPL :\n-                    case Classfile.FCMPG :\n+                    case ClassFile.FCMPL :\n+                    case ClassFile.FCMPG :\n@@ -1007,2 +1007,2 @@\n-                    case Classfile.DCMPL :\n-                    case Classfile.DCMPG :\n+                    case ClassFile.DCMPL :\n+                    case ClassFile.DCMPG :\n@@ -1018,6 +1018,6 @@\n-                    case Classfile.IF_ICMPEQ:\n-                    case Classfile.IF_ICMPNE:\n-                    case Classfile.IF_ICMPLT:\n-                    case Classfile.IF_ICMPGE:\n-                    case Classfile.IF_ICMPGT:\n-                    case Classfile.IF_ICMPLE:\n+                    case ClassFile.IF_ICMPEQ:\n+                    case ClassFile.IF_ICMPNE:\n+                    case ClassFile.IF_ICMPLT:\n+                    case ClassFile.IF_ICMPGE:\n+                    case ClassFile.IF_ICMPGT:\n+                    case ClassFile.IF_ICMPLE:\n@@ -1027,6 +1027,6 @@\n-                    case Classfile.IFEQ:\n-                    case Classfile.IFNE:\n-                    case Classfile.IFLT:\n-                    case Classfile.IFGE:\n-                    case Classfile.IFGT:\n-                    case Classfile.IFLE:\n+                    case ClassFile.IFEQ:\n+                    case ClassFile.IFNE:\n+                    case ClassFile.IFLT:\n+                    case ClassFile.IFGE:\n+                    case ClassFile.IFGT:\n+                    case ClassFile.IFLE:\n@@ -1039,2 +1039,2 @@\n-                    case Classfile.IF_ACMPEQ :\n-                    case Classfile.IF_ACMPNE :\n+                    case ClassFile.IF_ACMPEQ :\n+                    case ClassFile.IF_ACMPNE :\n@@ -1044,2 +1044,2 @@\n-                    case Classfile.IFNULL :\n-                    case Classfile.IFNONNULL :\n+                    case ClassFile.IFNULL :\n+                    case ClassFile.IFNONNULL :\n@@ -1052,1 +1052,1 @@\n-                    case Classfile.GOTO :\n+                    case ClassFile.GOTO :\n@@ -1057,1 +1057,1 @@\n-                    case Classfile.GOTO_W :\n+                    case ClassFile.GOTO_W :\n@@ -1062,2 +1062,2 @@\n-                    case Classfile.TABLESWITCH :\n-                    case Classfile.LOOKUPSWITCH :\n+                    case ClassFile.TABLESWITCH :\n+                    case ClassFile.LOOKUPSWITCH :\n@@ -1068,1 +1068,1 @@\n-                    case Classfile.IRETURN :\n+                    case ClassFile.IRETURN :\n@@ -1074,1 +1074,1 @@\n-                    case Classfile.LRETURN :\n+                    case ClassFile.LRETURN :\n@@ -1082,1 +1082,1 @@\n-                    case Classfile.FRETURN :\n+                    case ClassFile.FRETURN :\n@@ -1088,1 +1088,1 @@\n-                    case Classfile.DRETURN :\n+                    case ClassFile.DRETURN :\n@@ -1096,1 +1096,1 @@\n-                    case Classfile.ARETURN :\n+                    case ClassFile.ARETURN :\n@@ -1102,1 +1102,1 @@\n-                    case Classfile.RETURN:\n+                    case ClassFile.RETURN:\n@@ -1111,2 +1111,2 @@\n-                    case Classfile.GETSTATIC :\n-                    case Classfile.PUTSTATIC :\n+                    case ClassFile.GETSTATIC :\n+                    case ClassFile.PUTSTATIC :\n@@ -1115,2 +1115,2 @@\n-                    case Classfile.GETFIELD :\n-                    case Classfile.PUTFIELD :\n+                    case ClassFile.GETFIELD :\n+                    case ClassFile.PUTFIELD :\n@@ -1119,3 +1119,3 @@\n-                    case Classfile.INVOKEVIRTUAL :\n-                    case Classfile.INVOKESPECIAL :\n-                    case Classfile.INVOKESTATIC :\n+                    case ClassFile.INVOKEVIRTUAL :\n+                    case ClassFile.INVOKESPECIAL :\n+                    case ClassFile.INVOKESTATIC :\n@@ -1124,2 +1124,2 @@\n-                    case Classfile.INVOKEINTERFACE :\n-                    case Classfile.INVOKEDYNAMIC :\n+                    case ClassFile.INVOKEINTERFACE :\n+                    case ClassFile.INVOKEDYNAMIC :\n@@ -1128,1 +1128,1 @@\n-                    case Classfile.NEW :\n+                    case ClassFile.NEW :\n@@ -1141,1 +1141,1 @@\n-                    case Classfile.NEWARRAY :\n+                    case ClassFile.NEWARRAY :\n@@ -1147,1 +1147,1 @@\n-                    case Classfile.ANEWARRAY :\n+                    case ClassFile.ANEWARRAY :\n@@ -1150,1 +1150,1 @@\n-                    case Classfile.ARRAYLENGTH :\n+                    case ClassFile.ARRAYLENGTH :\n@@ -1159,1 +1159,1 @@\n-                    case Classfile.CHECKCAST :\n+                    case ClassFile.CHECKCAST :\n@@ -1169,1 +1169,1 @@\n-                    case Classfile.INSTANCEOF : {\n+                    case ClassFile.INSTANCEOF : {\n@@ -1177,2 +1177,2 @@\n-                    case Classfile.MONITORENTER :\n-                    case Classfile.MONITOREXIT :\n+                    case ClassFile.MONITORENTER :\n+                    case ClassFile.MONITOREXIT :\n@@ -1182,1 +1182,1 @@\n-                    case Classfile.MULTIANEWARRAY :\n+                    case ClassFile.MULTIANEWARRAY :\n@@ -1202,1 +1202,1 @@\n-                    case Classfile.ATHROW :\n+                    case ClassFile.ATHROW :\n@@ -1226,1 +1226,1 @@\n-                if (bcs.rawCode == Classfile.NEW) {\n+                if (bcs.rawCode == ClassFile.NEW) {\n@@ -1359,1 +1359,1 @@\n-        if (opcode == Classfile.LDC || opcode == Classfile.LDC_W) {\n+        if (opcode == ClassFile.LDC || opcode == ClassFile.LDC_W) {\n@@ -1366,1 +1366,1 @@\n-            if (opcode != Classfile.LDC2_W) verifyError(\"must be ldc2_w\");\n+            if (opcode != ClassFile.LDC2_W) verifyError(\"must be ldc2_w\");\n@@ -1386,1 +1386,1 @@\n-                int opcode_n = (opcode == Classfile.LDC2_W ? 2 : 1);\n+                int opcode_n = (opcode == ClassFile.LDC2_W ? 2 : 1);\n@@ -1415,1 +1415,1 @@\n-        if (bcs.rawCode == Classfile.TABLESWITCH) {\n+        if (bcs.rawCode == ClassFile.TABLESWITCH) {\n@@ -1468,1 +1468,1 @@\n-            case Classfile.GETSTATIC ->  {\n+            case ClassFile.GETSTATIC ->  {\n@@ -1473,1 +1473,1 @@\n-            case Classfile.PUTSTATIC ->  {\n+            case ClassFile.PUTSTATIC ->  {\n@@ -1478,1 +1478,1 @@\n-            case Classfile.GETFIELD ->  {\n+            case ClassFile.GETFIELD ->  {\n@@ -1485,1 +1485,1 @@\n-            case Classfile.PUTFIELD ->  {\n+            case ClassFile.PUTFIELD ->  {\n@@ -1539,1 +1539,1 @@\n-            if (new_offset > (code_length - 3) || (_method.codeArray()[new_offset] & 0xff) != Classfile.NEW) {\n+            if (new_offset > (code_length - 3) || (_method.codeArray()[new_offset] & 0xff) != ClassFile.NEW) {\n@@ -1576,1 +1576,1 @@\n-            case Classfile.INVOKEINTERFACE:\n+            case ClassFile.INVOKEINTERFACE:\n@@ -1579,1 +1579,1 @@\n-            case Classfile.INVOKEDYNAMIC:\n+            case ClassFile.INVOKEDYNAMIC:\n@@ -1582,2 +1582,2 @@\n-            case Classfile.INVOKESPECIAL:\n-            case Classfile.INVOKESTATIC:\n+            case ClassFile.INVOKESPECIAL:\n+            case ClassFile.INVOKESTATIC:\n@@ -1596,1 +1596,1 @@\n-        if (opcode == Classfile.INVOKEDYNAMIC) {\n+        if (opcode == ClassFile.INVOKEDYNAMIC) {\n@@ -1610,1 +1610,1 @@\n-        if (opcode == Classfile.INVOKEINTERFACE) {\n+        if (opcode == ClassFile.INVOKEINTERFACE) {\n@@ -1618,1 +1618,1 @@\n-        if (opcode == Classfile.INVOKEDYNAMIC) {\n+        if (opcode == ClassFile.INVOKEDYNAMIC) {\n@@ -1624,1 +1624,1 @@\n-            if (opcode != Classfile.INVOKESPECIAL ||\n+            if (opcode != ClassFile.INVOKESPECIAL ||\n@@ -1628,1 +1628,1 @@\n-        } else if (opcode == Classfile.INVOKESPECIAL\n+        } else if (opcode == ClassFile.INVOKESPECIAL\n@@ -1646,2 +1646,2 @@\n-        if (opcode != Classfile.INVOKESTATIC &&\n-            opcode != Classfile.INVOKEDYNAMIC) {\n+        if (opcode != ClassFile.INVOKESTATIC &&\n+            opcode != ClassFile.INVOKEDYNAMIC) {\n@@ -1653,1 +1653,1 @@\n-                    case Classfile.INVOKESPECIAL ->\n+                    case ClassFile.INVOKESPECIAL ->\n@@ -1655,1 +1655,1 @@\n-                    case Classfile.INVOKEVIRTUAL -> {\n+                    case ClassFile.INVOKEVIRTUAL -> {\n@@ -1663,1 +1663,1 @@\n-                        if (opcode != Classfile.INVOKEINTERFACE)\n+                        if (opcode != ClassFile.INVOKEINTERFACE)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerifierImpl.java","additions":242,"deletions":242,"binary":false,"changes":484,"status":"modified"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models an array load instruction in the {@code code} array of a {@code Code}\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_LOAD}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface ArrayLoadInstruction extends Instruction\n-        permits AbstractInstruction.UnboundArrayLoadInstruction {\n-    \/**\n-     * {@return the component type of the array}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return an array load instruction}\n-     *\n-     * @param op the opcode for the specific type of array load instruction,\n-     *           which must be of kind {@link Opcode.Kind#ARRAY_LOAD}\n-     *\/\n-    static ArrayLoadInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.ARRAY_LOAD);\n-        return new AbstractInstruction.UnboundArrayLoadInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ArrayLoadInstruction.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models an array store instruction in the {@code code} array of a {@code Code}\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#ARRAY_STORE}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface ArrayStoreInstruction extends Instruction\n-        permits AbstractInstruction.UnboundArrayStoreInstruction {\n-    \/**\n-     * {@return the component type of the array}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return an array store instruction}\n-     *\n-     * @param op the opcode for the specific type of array store instruction,\n-     *           which must be of kind {@link Opcode.Kind#ARRAY_STORE}\n-     *\/\n-    static ArrayStoreInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.ARRAY_STORE);\n-        return new AbstractInstruction.UnboundArrayStoreInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ArrayStoreInstruction.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a branching instruction (conditional or unconditional) in the {@code\n- * code} array of a {@code Code} attribute.  Corresponding opcodes will have a\n- * {@code kind} of {@link Opcode.Kind#BRANCH}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface BranchInstruction extends Instruction\n-        permits AbstractInstruction.BoundBranchInstruction,\n-                AbstractInstruction.UnboundBranchInstruction {\n-    \/**\n-     * {@return the target of the branch}\n-     *\/\n-    Label target();\n-\n-    \/**\n-     * {@return a branch instruction}\n-     *\n-     * @param op the opcode for the specific type of branch instruction,\n-     *           which must be of kind {@link Opcode.Kind#BRANCH}\n-     * @param target the target of the branch\n-     *\/\n-    static BranchInstruction of(Opcode op, Label target) {\n-        Util.checkKind(op, Opcode.Kind.BRANCH);\n-        return new AbstractInstruction.UnboundBranchInstruction(op, target);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/BranchInstruction.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.PseudoInstruction;\n-import jdk.internal.classfile.attribute.CharacterRangeTableAttribute;\n-import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n-import jdk.internal.classfile.impl.BoundCharacterRange;\n-\n-\/**\n- * A pseudo-instruction which models a single entry in the\n- * {@link CharacterRangeTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link Classfile.DebugElementsOption} option.\n- *\/\n-public sealed interface CharacterRange extends PseudoInstruction\n-        permits AbstractPseudoInstruction.UnboundCharacterRange, BoundCharacterRange {\n-    \/**\n-     * {@return the start of the instruction range}\n-     *\/\n-    Label startScope();\n-\n-    \/**\n-     * {@return the end of the instruction range}\n-     *\/\n-    Label endScope();\n-\n-    \/**\n-     * {@return the encoded start of the character range region (inclusive)}\n-     * The value is constructed from the line_number\/column_number pair as given\n-     * by {@code line_number << 10 + column_number}, where the source file is\n-     * viewed as an array of (possibly multi-byte) characters.\n-     *\/\n-    int characterRangeStart();\n-\n-    \/**\n-     * {@return the encoded end of the character range region (exclusive)}.\n-     * The value is constructed from the line_number\/column_number pair as given\n-     * by {@code line_number << 10 + column_number}, where the source file is\n-     * viewed as an array of (possibly multi-byte) characters.\n-     *\/\n-    int characterRangeEnd();\n-\n-    \/**\n-     * A flags word, indicating the kind of range.  Multiple flag bits\n-     * may be set.  Valid flags include\n-     * {@link jdk.internal.classfile.Classfile#CRT_STATEMENT},\n-     * {@link jdk.internal.classfile.Classfile#CRT_BLOCK},\n-     * {@link jdk.internal.classfile.Classfile#CRT_ASSIGNMENT},\n-     * {@link jdk.internal.classfile.Classfile#CRT_FLOW_CONTROLLER},\n-     * {@link jdk.internal.classfile.Classfile#CRT_FLOW_TARGET},\n-     * {@link jdk.internal.classfile.Classfile#CRT_INVOKE},\n-     * {@link jdk.internal.classfile.Classfile#CRT_CREATE},\n-     * {@link jdk.internal.classfile.Classfile#CRT_BRANCH_TRUE},\n-     * {@link jdk.internal.classfile.Classfile#CRT_BRANCH_FALSE}.\n-     *\n-     * @see jdk.internal.classfile.attribute.CharacterRangeInfo#flags()\n-     *\n-     * @return the flags\n-     *\/\n-    int flags();\n-\n-    \/**\n-     * {@return a character range pseudo-instruction}\n-     *\n-     * @param startScope the start of the instruction range\n-     * @param endScope the end of the instruction range\n-     * @param characterRangeStart the encoded start of the character range region (inclusive)\n-     * @param characterRangeEnd the encoded end of the character range region (exclusive)\n-     * @param flags a flags word, indicating the kind of range\n-     *\/\n-    static CharacterRange of(Label startScope, Label endScope, int characterRangeStart, int characterRangeEnd, int flags) {\n-        return new AbstractPseudoInstruction.UnboundCharacterRange(startScope, endScope, characterRangeStart, characterRangeEnd, flags);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/CharacterRange.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,156 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import java.lang.constant.ConstantDesc;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a constant-load instruction in the {@code code} array of a {@code\n- * Code} attribute, including \"intrinsic constant\" instructions (e.g., {@code\n- * iconst_0}), \"argument constant\" instructions (e.g., {@code bipush}), and \"load\n- * constant\" instructions (e.g., {@code LDC}).  Corresponding opcodes will have\n- * a {@code kind} of {@link Opcode.Kind#CONSTANT}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface ConstantInstruction extends Instruction {\n-\n-    \/**\n-     * {@return the constant value}\n-     *\/\n-    ConstantDesc constantValue();\n-\n-    \/**\n-     * {@return the type of the constant}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * Models an \"intrinsic constant\" instruction (e.g., {@code\n-     * iconst_0}).\n-     *\/\n-    sealed interface IntrinsicConstantInstruction extends ConstantInstruction\n-            permits AbstractInstruction.UnboundIntrinsicConstantInstruction {\n-\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n-        @Override\n-        default TypeKind typeKind() {\n-            return opcode().primaryTypeKind();\n-        }\n-    }\n-\n-    \/**\n-     * Models an \"argument constant\" instruction (e.g., {@code\n-     * bipush}).\n-     *\/\n-    sealed interface ArgumentConstantInstruction extends ConstantInstruction\n-            permits AbstractInstruction.BoundArgumentConstantInstruction,\n-                    AbstractInstruction.UnboundArgumentConstantInstruction {\n-\n-        @Override\n-        Integer constantValue();\n-\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n-        @Override\n-        default TypeKind typeKind() {\n-            return opcode().primaryTypeKind();\n-        }\n-    }\n-\n-    \/**\n-     * Models a \"load constant\" instruction (e.g., {@code\n-     * ldc}).\n-     *\/\n-    sealed interface LoadConstantInstruction extends ConstantInstruction\n-            permits AbstractInstruction.BoundLoadConstantInstruction,\n-                    AbstractInstruction.UnboundLoadConstantInstruction {\n-\n-        \/**\n-         * {@return the constant value}\n-         *\/\n-        LoadableConstantEntry constantEntry();\n-\n-        \/**\n-         * {@return the type of the constant}\n-         *\/\n-        @Override\n-        default TypeKind typeKind() {\n-            return constantEntry().typeKind();\n-        }\n-    }\n-\n-    \/**\n-     * {@return an intrinsic constant instruction}\n-     *\n-     * @param op the opcode for the specific type of intrinsic constant instruction,\n-     *           which must be of kind {@link Opcode.Kind#CONSTANT}\n-     *\/\n-    static IntrinsicConstantInstruction ofIntrinsic(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.CONSTANT);\n-        if (op.constantValue() == null)\n-            throw new IllegalArgumentException(String.format(\"Wrong opcode specified; found %s, expected xCONST_val\", op));\n-        return new AbstractInstruction.UnboundIntrinsicConstantInstruction(op);\n-    }\n-\n-    \/**\n-     * {@return an argument constant instruction}\n-     *\n-     * @param op the opcode for the specific type of intrinsic constant instruction,\n-     *           which must be of kind {@link Opcode.Kind#CONSTANT}\n-     * @param value the constant value\n-     *\/\n-    static ArgumentConstantInstruction ofArgument(Opcode op, int value) {\n-        Util.checkKind(op, Opcode.Kind.CONSTANT);\n-        if (op != Opcode.BIPUSH && op != Opcode.SIPUSH)\n-            throw new IllegalArgumentException(String.format(\"Wrong opcode specified; found %s, expected BIPUSH or SIPUSH\", op));\n-        return new AbstractInstruction.UnboundArgumentConstantInstruction(op, value);\n-    }\n-\n-    \/**\n-     * {@return a load constant instruction}\n-     *\n-     * @param op the opcode for the specific type of load constant instruction,\n-     *           which must be of kind {@link Opcode.Kind#CONSTANT}\n-     * @param constant the constant value\n-     *\/\n-    static LoadConstantInstruction ofLoad(Opcode op, LoadableConstantEntry constant) {\n-        Util.checkKind(op, Opcode.Kind.CONSTANT);\n-        if (op != Opcode.LDC && op != Opcode.LDC_W && op != Opcode.LDC2_W)\n-            throw new IllegalArgumentException(String.format(\"Wrong opcode specified; found %s, expected LDC, LDC_W or LDC2_W\", op));\n-        return new AbstractInstruction.UnboundLoadConstantInstruction(op, constant);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ConstantInstruction.java","additions":0,"deletions":156,"binary":false,"changes":156,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.BytecodeHelpers;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a primitive conversion instruction in the {@code code} array of a\n- * {@code Code} attribute, such as {@code i2l}.  Corresponding opcodes will have\n- * a {@code kind} of {@link Opcode.Kind#CONVERT}.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface ConvertInstruction extends Instruction\n-        permits AbstractInstruction.UnboundConvertInstruction {\n-    \/**\n-     * {@return the source type to convert from}\n-     *\/\n-    TypeKind fromType();\n-\n-    \/**\n-     * {@return the destination type to convert to}\n-     *\/\n-    TypeKind toType();\n-\n-    \/**\n-     * {@return A conversion instruction}\n-     *\n-     * @param fromType the type to convert from\n-     * @param toType the type to convert to\n-     *\/\n-    static ConvertInstruction of(TypeKind fromType, TypeKind toType) {\n-        return of(BytecodeHelpers.convertOpcode(fromType, toType));\n-    }\n-\n-    \/**\n-     * {@return a conversion instruction}\n-     *\n-     * @param op the opcode for the specific type of conversion instruction,\n-     *           which must be of kind {@link Opcode.Kind#CONVERT}\n-     *\/\n-    static ConvertInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.CONVERT);\n-        return new AbstractInstruction.UnboundConvertInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ConvertInstruction.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -1,117 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models instruction discontinued from the {@code code} array of a {@code Code}\n- * attribute. Delivered as a {@link CodeElement} when traversing the elements of\n- * a {@link CodeModel}.\n- *\/\n-public sealed interface DiscontinuedInstruction extends Instruction {\n-\n-    \/**\n-     * Models JSR and JSR_W instructions discontinued from the {@code code}\n-     * array of a {@code Code} attribute since class file version 51.0.\n-     * Corresponding opcodes will have a {@code kind} of\n-     * {@link Opcode.Kind#DISCONTINUED_JSR}.  Delivered as a {@link CodeElement}\n-     * when traversing the elements of a {@link CodeModel}.\n-     *\/\n-    sealed interface JsrInstruction extends DiscontinuedInstruction\n-            permits AbstractInstruction.BoundJsrInstruction,\n-                    AbstractInstruction.UnboundJsrInstruction {\n-\n-        \/**\n-         * {@return the target of the JSR instruction}\n-         *\/\n-        Label target();\n-\n-        \/**\n-         * {@return a JSR instruction}\n-         *\n-         * @param op the opcode for the specific type of JSR instruction,\n-         *           which must be of kind {@link Opcode.Kind#DISCONTINUED_JSR}\n-         * @param target target label of the subroutine\n-         *\/\n-        static JsrInstruction of(Opcode op, Label target) {\n-            Util.checkKind(op, Opcode.Kind.DISCONTINUED_JSR);\n-            return new AbstractInstruction.UnboundJsrInstruction(op, target);\n-        }\n-\n-        \/**\n-         * {@return a JSR instruction}\n-         *\n-         * @param target target label of the subroutine\n-         *\/\n-        static JsrInstruction of(Label target) {\n-            return of(Opcode.JSR, target);\n-        }\n-    }\n-\n-    \/**\n-     * Models RET and RET_W instructions discontinued from the {@code code}\n-     * array of a {@code Code} attribute since class file version 51.0.\n-     * Corresponding opcodes will have a {@code kind} of\n-     * {@link Opcode.Kind#DISCONTINUED_RET}.  Delivered as a {@link CodeElement}\n-     * when traversing the elements of a {@link CodeModel}.\n-     *\/\n-    sealed interface RetInstruction extends DiscontinuedInstruction\n-            permits AbstractInstruction.BoundRetInstruction,\n-                    AbstractInstruction.UnboundRetInstruction {\n-\n-        \/**\n-         * {@return the local variable slot with return address}\n-         *\/\n-        int slot();\n-\n-        \/**\n-         * {@return a RET or RET_W instruction}\n-         *\n-         * @param op the opcode for the specific type of RET instruction,\n-         *           which must be of kind {@link Opcode.Kind#DISCONTINUED_RET}\n-         * @param slot the local variable slot to load return address from\n-         *\/\n-        static RetInstruction of(Opcode op, int slot) {\n-            Util.checkKind(op, Opcode.Kind.DISCONTINUED_RET);\n-            return new AbstractInstruction.UnboundRetInstruction(op, slot);\n-        }\n-\n-        \/**\n-         * {@return a RET instruction}\n-         *\n-         * @param slot the local variable slot to load return address from\n-         *\/\n-        static RetInstruction of(int slot) {\n-            return of(slot < 256 ? Opcode.RET : Opcode.RET_W, slot);\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/DiscontinuedInstruction.java","additions":0,"deletions":117,"binary":false,"changes":117,"status":"deleted"},{"patch":"@@ -1,124 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import java.lang.constant.ClassDesc;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.constantpool.FieldRefEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.AbstractPoolEntry;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a field access instruction in the {@code code} array of a {@code Code}\n- * attribute.  Corresponding opcodes will have a {@code kind} of {@link\n- * Opcode.Kind#FIELD_ACCESS}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface FieldInstruction extends Instruction\n-        permits AbstractInstruction.BoundFieldInstruction, AbstractInstruction.UnboundFieldInstruction {\n-    \/**\n-     * {@return the {@link FieldRefEntry} constant described by this instruction}\n-     *\/\n-    FieldRefEntry field();\n-\n-    \/**\n-     * {@return the class holding the field}\n-     *\/\n-    default ClassEntry owner() {\n-        return field().owner();\n-    }\n-\n-    \/**\n-     * {@return the name of the field}\n-     *\/\n-    default Utf8Entry name() {\n-        return field().nameAndType().name();\n-    }\n-\n-    \/**\n-     * {@return the field descriptor of the field}\n-     *\/\n-    default Utf8Entry type() {\n-        return field().nameAndType().type();\n-    }\n-\n-    \/**\n-     * {@return a symbolic descriptor for the type of the field}\n-     *\/\n-    default ClassDesc typeSymbol() {\n-        return field().typeSymbol();\n-    }\n-\n-    \/**\n-     * {@return a field access instruction}\n-     *\n-     * @param op the opcode for the specific type of field access instruction,\n-     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n-     * @param field a constant pool entry describing the field\n-     *\/\n-    static FieldInstruction of(Opcode op, FieldRefEntry field) {\n-        Util.checkKind(op, Opcode.Kind.FIELD_ACCESS);\n-        return new AbstractInstruction.UnboundFieldInstruction(op, field);\n-    }\n-\n-    \/**\n-     * {@return a field access instruction}\n-     *\n-     * @param op the opcode for the specific type of field access instruction,\n-     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n-     * @param owner the class holding the field\n-     * @param name the name of the field\n-     * @param type the field descriptor\n-     *\/\n-    static FieldInstruction of(Opcode op,\n-                               ClassEntry owner,\n-                               Utf8Entry name,\n-                               Utf8Entry type) {\n-        return of(op, owner, TemporaryConstantPool.INSTANCE.nameAndTypeEntry(name, type));\n-    }\n-\n-    \/**\n-     * {@return a field access instruction}\n-     *\n-     * @param op the opcode for the specific type of field access instruction,\n-     *           which must be of kind {@link Opcode.Kind#FIELD_ACCESS}\n-     * @param owner the class holding the field\n-     * @param nameAndType the name and field descriptor of the field\n-     *\/\n-    static FieldInstruction of(Opcode op,\n-                               ClassEntry owner,\n-                               NameAndTypeEntry nameAndType) {\n-        return of(op, TemporaryConstantPool.INSTANCE.fieldRefEntry(owner, nameAndType));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/FieldInstruction.java","additions":0,"deletions":124,"binary":false,"changes":124,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a local variable increment instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#INCREMENT}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface IncrementInstruction extends Instruction\n-        permits AbstractInstruction.BoundIncrementInstruction,\n-                AbstractInstruction.UnboundIncrementInstruction {\n-    \/**\n-     * {@return the local variable slot to increment}\n-     *\/\n-    int slot();\n-\n-    \/**\n-     * {@return the value to increment by}\n-     *\/\n-    int constant();\n-\n-    \/**\n-     * {@return an increment instruction}\n-     *\n-     * @param slot the local variable slot to increment\n-     * @param constant the value to increment by\n-     *\/\n-    static IncrementInstruction of(int slot, int constant) {\n-        return new AbstractInstruction.UnboundIncrementInstruction(slot, constant);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/IncrementInstruction.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import java.lang.constant.ConstantDesc;\n-import java.lang.constant.DirectMethodHandleDesc;\n-import java.lang.constant.MethodTypeDesc;\n-import java.util.List;\n-import java.util.function.Function;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.AbstractPoolEntry;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models an {@code invokedynamic} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface InvokeDynamicInstruction extends Instruction\n-        permits AbstractInstruction.BoundInvokeDynamicInstruction, AbstractInstruction.UnboundInvokeDynamicInstruction {\n-    \/**\n-     * {@return an {@link InvokeDynamicEntry} describing the call site}\n-     *\/\n-    InvokeDynamicEntry invokedynamic();\n-\n-    \/**\n-     * {@return the invocation name of the call site}\n-     *\/\n-    default Utf8Entry name() {\n-        return invokedynamic().name();\n-    }\n-\n-    \/**\n-     * {@return the invocation type of the call site}\n-     *\/\n-    default Utf8Entry type() {\n-        return invokedynamic().type();\n-    }\n-\n-    \/**\n-     * {@return the invocation type of the call site, as a symbolic descriptor}\n-     *\/\n-    default MethodTypeDesc typeSymbol() {\n-        return invokedynamic().typeSymbol();\n-    }\n-\n-    \/**\n-     * {@return the bootstrap method of the call site}\n-     *\/\n-    default DirectMethodHandleDesc bootstrapMethod() {\n-        return invokedynamic().bootstrap()\n-                              .bootstrapMethod()\n-                              .asSymbol();\n-    }\n-\n-    \/**\n-     * {@return the bootstrap arguments of the call site}\n-     *\/\n-    default List<ConstantDesc> bootstrapArgs() {\n-        return Util.mappedList(invokedynamic().bootstrap().arguments(), new Function<>() {\n-            @Override\n-            public ConstantDesc apply(LoadableConstantEntry loadableConstantEntry) {\n-                return loadableConstantEntry.constantValue();\n-            }\n-        });\n-    }\n-\n-    \/**\n-     * {@return an invokedynamic instruction}\n-     *\n-     * @param invokedynamic the constant pool entry describing the call site\n-     *\/\n-    static InvokeDynamicInstruction of(InvokeDynamicEntry invokedynamic) {\n-        return new AbstractInstruction.UnboundInvokeDynamicInstruction(invokedynamic);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/InvokeDynamicInstruction.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"},{"patch":"@@ -1,144 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import java.lang.constant.MethodTypeDesc;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.constantpool.MethodRefEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.AbstractPoolEntry;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a method invocation instruction in the {@code code} array of a {@code\n- * Code} attribute, other than {@code invokedynamic}.  Corresponding opcodes\n- * will have a {@code kind} of {@link Opcode.Kind#INVOKE}.  Delivered as a\n- * {@link CodeElement} when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface InvokeInstruction extends Instruction\n-        permits AbstractInstruction.BoundInvokeInterfaceInstruction, AbstractInstruction.BoundInvokeInstruction, AbstractInstruction.UnboundInvokeInstruction {\n-    \/**\n-     * {@return the {@link MethodRefEntry} or {@link InterfaceMethodRefEntry}\n-     * constant described by this instruction}\n-     *\/\n-    MemberRefEntry method();\n-\n-    \/**\n-     * {@return whether the class holding the method is an interface}\n-     *\/\n-    boolean isInterface();\n-\n-    \/**\n-     * @return for an {@code invokeinterface}, the {@code count} value, as defined in {@jvms 6.5}\n-     *\/\n-    int count();\n-\n-    \/**\n-     * {@return the class holding the method}\n-     *\/\n-    default ClassEntry owner() {\n-        return method().owner();\n-    }\n-\n-    \/**\n-     * {@return the name of the method}\n-     *\/\n-    default Utf8Entry name() {\n-        return method().nameAndType().name();\n-    }\n-\n-    \/**\n-     * {@return the method descriptor of the method}\n-     *\/\n-    default Utf8Entry type() {\n-        return method().nameAndType().type();\n-    }\n-\n-    \/**\n-     * {@return a symbolic descriptor for the method type}\n-     *\/\n-    default MethodTypeDesc typeSymbol() {\n-        return Util.methodTypeSymbol(method().nameAndType());\n-    }\n-\n-\n-    \/**\n-     * {@return an invocation instruction}\n-     *\n-     * @param op the opcode for the specific type of invocation instruction,\n-     *           which must be of kind {@link Opcode.Kind#INVOKE}\n-     * @param method a constant pool entry describing the method\n-     *\/\n-    static InvokeInstruction of(Opcode op, MemberRefEntry method) {\n-        Util.checkKind(op, Opcode.Kind.INVOKE);\n-        return new AbstractInstruction.UnboundInvokeInstruction(op, method);\n-    }\n-\n-    \/**\n-     * {@return an invocation instruction}\n-     *\n-     * @param op the opcode for the specific type of invocation instruction,\n-     *           which must be of kind {@link Opcode.Kind#INVOKE}\n-     * @param owner the class holding the method\n-     * @param name the name of the method\n-     * @param type the method descriptor\n-     * @param isInterface whether the class holding the method is an interface\n-     *\/\n-    static InvokeInstruction of(Opcode op,\n-                                ClassEntry owner,\n-                                Utf8Entry name,\n-                                Utf8Entry type,\n-                                boolean isInterface) {\n-        return of(op, owner, TemporaryConstantPool.INSTANCE.nameAndTypeEntry(name, type), isInterface);\n-    }\n-\n-    \/**\n-     * {@return an invocation instruction}\n-     *\n-     * @param op the opcode for the specific type of invocation instruction,\n-     *           which must be of kind {@link Opcode.Kind#INVOKE}\n-     * @param owner the class holding the method\n-     * @param nameAndType the name and type of the method\n-     * @param isInterface whether the class holding the method is an interface\n-     *\/\n-    static InvokeInstruction of(Opcode op,\n-                                ClassEntry owner,\n-                                NameAndTypeEntry nameAndType,\n-                                boolean isInterface) {\n-        return of(op, isInterface\n-                      ? TemporaryConstantPool.INSTANCE.interfaceMethodRefEntry(owner, nameAndType)\n-                      : TemporaryConstantPool.INSTANCE.methodRefEntry(owner, nameAndType));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/InvokeInstruction.java","additions":0,"deletions":144,"binary":false,"changes":144,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.PseudoInstruction;\n-import jdk.internal.classfile.impl.LabelImpl;\n-\n-\/**\n- * A pseudo-instruction which indicates that the specified label corresponds to\n- * the current position in the {@code Code} attribute.  Delivered as a {@link\n- * CodeElement} during traversal of the elements of a {@link CodeModel}.\n- *\n- * @see PseudoInstruction\n- *\/\n-public sealed interface LabelTarget extends PseudoInstruction\n-        permits LabelImpl {\n-\n-    \/**\n-     * {@return the label corresponding to this target}\n-     *\/\n-    Label label();\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LabelTarget.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.PseudoInstruction;\n-import jdk.internal.classfile.attribute.LineNumberTableAttribute;\n-import jdk.internal.classfile.impl.LineNumberImpl;\n-\n-\/**\n- * A pseudo-instruction which models a single entry in the\n- * {@link LineNumberTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link Classfile.LineNumbersOption} option.\n- *\n- * @see PseudoInstruction\n- *\/\n-public sealed interface LineNumber extends PseudoInstruction\n-        permits LineNumberImpl {\n-\n-    \/**\n-     * {@return the line number}\n-     *\/\n-    int line();\n-\n-    \/**\n-     * {@return a line number pseudo-instruction}\n-     *\n-     * @param line the line number\n-     *\/\n-    static LineNumber of(int line) {\n-        return LineNumberImpl.of(line);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LineNumber.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.BytecodeHelpers;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a local variable load instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#LOAD}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface LoadInstruction extends Instruction\n-        permits AbstractInstruction.BoundLoadInstruction,\n-                AbstractInstruction.UnboundLoadInstruction {\n-\n-    \/**\n-     * {@return the local variable slot to load from}\n-     *\/\n-    int slot();\n-\n-    \/**\n-     * {@return the type of the value to be loaded}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return a local variable load instruction}\n-     *\n-     * @param kind the type of the value to be loaded\n-     * @param slot the local variable slot to load from\n-     *\/\n-    static LoadInstruction of(TypeKind kind, int slot) {\n-        return of(BytecodeHelpers.loadOpcode(kind, slot), slot);\n-    }\n-\n-    \/**\n-     * {@return a local variable load instruction}\n-     *\n-     * @param op the opcode for the specific type of load instruction,\n-     *           which must be of kind {@link Opcode.Kind#LOAD}\n-     * @param slot the local variable slot to load from\n-     *\/\n-    static LoadInstruction of(Opcode op, int slot) {\n-        Util.checkKind(op, Opcode.Kind.LOAD);\n-        return new AbstractInstruction.UnboundLoadInstruction(op, slot);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LoadInstruction.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -1,120 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import java.lang.constant.ClassDesc;\n-\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.PseudoInstruction;\n-import jdk.internal.classfile.attribute.LocalVariableTableAttribute;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n-import jdk.internal.classfile.impl.BoundLocalVariable;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-\n-\/**\n- * A pseudo-instruction which models a single entry in the\n- * {@link LocalVariableTableAttribute}.  Delivered as a {@link CodeElement}\n- * during traversal of the elements of a {@link CodeModel}, according to\n- * the setting of the {@link Classfile.DebugElementsOption} option.\n- *\n- * @see PseudoInstruction\n- *\/\n-public sealed interface LocalVariable extends PseudoInstruction\n-        permits AbstractPseudoInstruction.UnboundLocalVariable, BoundLocalVariable {\n-    \/**\n-     * {@return the local variable slot}\n-     *\/\n-    int slot();\n-\n-    \/**\n-     * {@return the local variable name}\n-     *\/\n-    Utf8Entry name();\n-\n-    \/**\n-     * {@return the local variable field descriptor}\n-     *\/\n-    Utf8Entry type();\n-\n-    \/**\n-     * {@return the local variable type, as a symbolic descriptor}\n-     *\/\n-    default ClassDesc typeSymbol() {\n-        return ClassDesc.ofDescriptor(type().stringValue());\n-    }\n-\n-    \/**\n-     * {@return the start range of the local variable scope}\n-     *\/\n-    Label startScope();\n-\n-    \/**\n-     * {@return the end range of the local variable scope}\n-     *\/\n-    Label endScope();\n-\n-    \/**\n-     * Writes the local variable to the specified writer\n-     *\n-     * @param buf the writer\n-     * @return true if the variable has been written\n-     *\/\n-    boolean writeTo(BufWriter buf);\n-\n-    \/**\n-     * {@return a local variable pseudo-instruction}\n-     *\n-     * @param slot the local variable slot\n-     * @param nameEntry the local variable name\n-     * @param descriptorEntry the local variable descriptor\n-     * @param startScope the start range of the local variable scope\n-     * @param endScope the end range of the local variable scope\n-     *\/\n-    static LocalVariable of(int slot, Utf8Entry nameEntry, Utf8Entry descriptorEntry, Label startScope, Label endScope) {\n-        return new AbstractPseudoInstruction.UnboundLocalVariable(slot, nameEntry, descriptorEntry,\n-                                                                  startScope, endScope);\n-    }\n-\n-    \/**\n-     * {@return a local variable pseudo-instruction}\n-     *\n-     * @param slot the local variable slot\n-     * @param name the local variable name\n-     * @param descriptor the local variable descriptor\n-     * @param startScope the start range of the local variable scope\n-     * @param endScope the end range of the local variable scope\n-     *\/\n-    static LocalVariable of(int slot, String name, ClassDesc descriptor, Label startScope, Label endScope) {\n-        return of(slot,\n-                  TemporaryConstantPool.INSTANCE.utf8Entry(name),\n-                  TemporaryConstantPool.INSTANCE.utf8Entry(descriptor.descriptorString()),\n-                  startScope, endScope);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariable.java","additions":0,"deletions":120,"binary":false,"changes":120,"status":"deleted"},{"patch":"@@ -1,117 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.PseudoInstruction;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.attribute.LocalVariableTypeTableAttribute;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.impl.AbstractPseudoInstruction;\n-import jdk.internal.classfile.impl.BoundLocalVariableType;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-\n-\/**\n- * A pseudo-instruction which models a single entry in the {@link\n- * LocalVariableTypeTableAttribute}.  Delivered as a {@link CodeElement} during\n- * traversal of the elements of a {@link CodeModel}, according to the setting of\n- * the {@link Classfile.DebugElementsOption} option.\n- *\/\n-public sealed interface LocalVariableType extends PseudoInstruction\n-        permits AbstractPseudoInstruction.UnboundLocalVariableType, BoundLocalVariableType {\n-    \/**\n-     * {@return the local variable slot}\n-     *\/\n-    int slot();\n-\n-    \/**\n-     * {@return the local variable name}\n-     *\/\n-    Utf8Entry name();\n-\n-    \/**\n-     * {@return the local variable signature}\n-     *\/\n-    Utf8Entry signature();\n-\n-    \/**\n-     * {@return the local variable signature}\n-     *\/\n-    default Signature signatureSymbol() {\n-        return Signature.parseFrom(signature().stringValue());\n-    }\n-\n-    \/**\n-     * {@return the start range of the local variable scope}\n-     *\/\n-    Label startScope();\n-\n-    \/**\n-     * {@return the end range of the local variable scope}\n-     *\/\n-    Label endScope();\n-\n-    \/**\n-     * Writes the local variable to the specified writer\n-     *\n-     * @param buf the writer\n-     * @return true if the variable has been written\n-     *\/\n-    boolean writeTo(BufWriter buf);\n-\n-    \/**\n-     * {@return a local variable type pseudo-instruction}\n-     *\n-     * @param slot the local variable slot\n-     * @param nameEntry the local variable name\n-     * @param signatureEntry the local variable signature\n-     * @param startScope the start range of the local variable scope\n-     * @param endScope the end range of the local variable scope\n-     *\/\n-    static LocalVariableType of(int slot, Utf8Entry nameEntry, Utf8Entry signatureEntry, Label startScope, Label endScope) {\n-        return new AbstractPseudoInstruction.UnboundLocalVariableType(slot, nameEntry, signatureEntry,\n-                                                                      startScope, endScope);\n-    }\n-\n-    \/**\n-     * {@return a local variable type pseudo-instruction}\n-     *\n-     * @param slot the local variable slot\n-     * @param name the local variable name\n-     * @param signature the local variable signature\n-     * @param startScope the start range of the local variable scope\n-     * @param endScope the end range of the local variable scope\n-     *\/\n-    static LocalVariableType of(int slot, String name, Signature signature, Label startScope, Label endScope) {\n-        return of(slot,\n-                  TemporaryConstantPool.INSTANCE.utf8Entry(name),\n-                  TemporaryConstantPool.INSTANCE.utf8Entry(signature.signatureString()),\n-                  startScope, endScope);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariableType.java","additions":0,"deletions":117,"binary":false,"changes":117,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code lookupswitch} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface LookupSwitchInstruction extends Instruction\n-        permits AbstractInstruction.BoundLookupSwitchInstruction,\n-                AbstractInstruction.UnboundLookupSwitchInstruction {\n-    \/**\n-     * {@return the target of the default case}\n-     *\/\n-    Label defaultTarget();\n-\n-    \/**\n-     * {@return the cases of the switch}\n-     *\/\n-    List<SwitchCase> cases();\n-\n-    \/**\n-     * {@return a lookup switch instruction}\n-     *\n-     * @param defaultTarget the default target of the switch\n-     * @param cases the cases of the switch\n-     *\/\n-    static LookupSwitchInstruction of(Label defaultTarget, List<SwitchCase> cases) {\n-        return new AbstractInstruction.UnboundLookupSwitchInstruction(defaultTarget, cases);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LookupSwitchInstruction.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a {@code monitorenter} or {@code monitorexit} instruction in the\n- * {@code code} array of a {@code Code} attribute.  Delivered as a {@link\n- * CodeElement} when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface MonitorInstruction extends Instruction\n-        permits AbstractInstruction.UnboundMonitorInstruction {\n-\n-    \/**\n-     * {@return a monitor instruction}\n-     *\n-     * @param op the opcode for the specific type of monitor instruction,\n-     *           which must be of kind {@link Opcode.Kind#MONITOR}\n-     *\/\n-    static MonitorInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.MONITOR);\n-        return new AbstractInstruction.UnboundMonitorInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/MonitorInstruction.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code multianewarray} invocation instruction in the {@code code}\n- * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface NewMultiArrayInstruction extends Instruction\n-        permits AbstractInstruction.BoundNewMultidimensionalArrayInstruction,\n-                AbstractInstruction.UnboundNewMultidimensionalArrayInstruction {\n-\n-    \/**\n-     * {@return the type of the array, as a symbolic descriptor}\n-     *\/\n-    ClassEntry arrayType();\n-\n-    \/**\n-     * {@return the number of dimensions of the array}\n-     *\/\n-    int dimensions();\n-\n-    \/**\n-     * {@return a new multi-dimensional array instruction}\n-     *\n-     * @param arrayTypeEntry the type of the array\n-     * @param dimensions the number of dimensions of the array\n-     *\/\n-    static NewMultiArrayInstruction of(ClassEntry arrayTypeEntry,\n-                                       int dimensions) {\n-        return new AbstractInstruction.UnboundNewMultidimensionalArrayInstruction(arrayTypeEntry, dimensions);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/NewMultiArrayInstruction.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code new} instruction in the {@code code} array of a {@code Code}\n- * attribute.  Delivered as a {@link CodeElement} when traversing the elements\n- * of a {@link CodeModel}.\n- *\/\n-public sealed interface NewObjectInstruction extends Instruction\n-        permits AbstractInstruction.BoundNewObjectInstruction, AbstractInstruction.UnboundNewObjectInstruction {\n-\n-    \/**\n-     * {@return the type of object to create}\n-     *\/\n-    ClassEntry className();\n-\n-    \/**\n-     * {@return a new object instruction}\n-     *\n-     * @param className the type of object to create\n-     *\/\n-    static NewObjectInstruction of(ClassEntry className) {\n-        return new AbstractInstruction.UnboundNewObjectInstruction(className);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/NewObjectInstruction.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code newarray} invocation instruction in the {@code code}\n- * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface NewPrimitiveArrayInstruction extends Instruction\n-        permits AbstractInstruction.BoundNewPrimitiveArrayInstruction,\n-                AbstractInstruction.UnboundNewPrimitiveArrayInstruction {\n-    \/**\n-     * {@return the component type of the array}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return a new primitive array instruction}\n-     *\n-     * @param typeKind the component type of the array\n-     *\/\n-    static NewPrimitiveArrayInstruction of(TypeKind typeKind) {\n-        return new AbstractInstruction.UnboundNewPrimitiveArrayInstruction(typeKind);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/NewPrimitiveArrayInstruction.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code anewarray} invocation instruction in the {@code code}\n- * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface NewReferenceArrayInstruction extends Instruction\n-        permits AbstractInstruction.BoundNewReferenceArrayInstruction, AbstractInstruction.UnboundNewReferenceArrayInstruction {\n-    \/**\n-     * {@return the component type of the array}\n-     *\/\n-    ClassEntry componentType();\n-\n-    \/**\n-     * {@return a new reference array instruction}\n-     *\n-     * @param componentType the component type of the array\n-     *\/\n-    static NewReferenceArrayInstruction of(ClassEntry componentType) {\n-        return new AbstractInstruction.UnboundNewReferenceArrayInstruction(componentType);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/NewReferenceArrayInstruction.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code nop} invocation instruction in the {@code code}\n- * array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface NopInstruction extends Instruction\n-        permits AbstractInstruction.UnboundNopInstruction {\n-    \/**\n-     * {@return a no-op instruction}\n-     *\/\n-    static NopInstruction of() {\n-        return new AbstractInstruction.UnboundNopInstruction();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/NopInstruction.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models an arithmetic operator instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#OPERATOR}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface OperatorInstruction extends Instruction\n-        permits AbstractInstruction.UnboundOperatorInstruction {\n-    \/**\n-     * {@return the operand type of the instruction}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return an operator instruction}\n-     *\n-     * @param op the opcode for the specific type of array load instruction,\n-     *           which must be of kind {@link Opcode.Kind#OPERATOR}\n-     *\/\n-    static OperatorInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.OPERATOR);\n-        return new AbstractInstruction.UnboundOperatorInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/OperatorInstruction.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.BytecodeHelpers;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a return-from-method instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#RETURN}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface ReturnInstruction extends Instruction\n-        permits AbstractInstruction.UnboundReturnInstruction {\n-\n-    \/**\n-     * {@return the type of the return instruction}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return a return instruction}\n-     *\n-     * @param typeKind the type of the return instruction\n-     *\/\n-    static ReturnInstruction of(TypeKind typeKind) {\n-        return of(BytecodeHelpers.returnOpcode(typeKind));\n-    }\n-\n-    \/**\n-     * {@return a return instruction}\n-     *\n-     * @param op the opcode for the specific type of return instruction,\n-     *           which must be of kind {@link Opcode.Kind#RETURN}\n-     *\/\n-    static ReturnInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.RETURN);\n-        return new AbstractInstruction.UnboundReturnInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ReturnInstruction.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a stack manipulation instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#STACK}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface StackInstruction extends Instruction\n-        permits AbstractInstruction.UnboundStackInstruction {\n-\n-    \/**\n-     * {@return a stack manipulation instruction}\n-     *\n-     * @param op the opcode for the specific type of stack instruction,\n-     *           which must be of kind {@link Opcode.Kind#STACK}\n-     *\/\n-    static StackInstruction of(Opcode op) {\n-        Util.checkKind(op, Opcode.Kind.STACK);\n-        return new AbstractInstruction.UnboundStackInstruction(op);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/StackInstruction.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.BytecodeHelpers;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models a local variable store instruction in the {@code code} array of a\n- * {@code Code} attribute.  Corresponding opcodes will have a {@code kind} of\n- * {@link Opcode.Kind#STORE}.  Delivered as a {@link CodeElement} when\n- * traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface StoreInstruction extends Instruction\n-        permits AbstractInstruction.BoundStoreInstruction, AbstractInstruction.UnboundStoreInstruction {\n-\n-    \/**\n-     * {@return the local variable slot to store to}\n-     *\/\n-    int slot();\n-\n-    \/**\n-     * {@return the type of the value to be stored}\n-     *\/\n-    TypeKind typeKind();\n-\n-    \/**\n-     * {@return a local variable store instruction}\n-     *\n-     * @param kind the type of the value to be stored\n-     * @param slot the local variable slot to store to\n-     *\/\n-    static StoreInstruction of(TypeKind kind, int slot) {\n-        return of(BytecodeHelpers.storeOpcode(kind, slot), slot);\n-    }\n-\n-    \/**\n-     * {@return a local variable store instruction}\n-     *\n-     * @param op the opcode for the specific type of store instruction,\n-     *           which must be of kind {@link Opcode.Kind#STORE}\n-     * @param slot the local variable slot to store to\n-     *\/\n-    static StoreInstruction of(Opcode op, int slot) {\n-        Util.checkKind(op, Opcode.Kind.STORE);\n-        return new AbstractInstruction.UnboundStoreInstruction(op, slot);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/StoreInstruction.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import java.util.List;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models a {@code tableswitch} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface TableSwitchInstruction extends Instruction\n-        permits AbstractInstruction.BoundTableSwitchInstruction, AbstractInstruction.UnboundTableSwitchInstruction {\n-    \/**\n-     * {@return the low value of the switch target range, inclusive}\n-     *\/\n-    int lowValue();\n-\n-    \/**\n-     * {@return the high value of the switch target range, inclusive}\n-     *\/\n-    int highValue();\n-\n-    \/**\n-     * {@return the default target of the switch}\n-     *\/\n-    Label defaultTarget();\n-\n-    \/**\n-     * {@return the cases of the switch}\n-     *\/\n-    List<SwitchCase> cases();\n-\n-    \/**\n-     * {@return a table switch instruction}\n-     *\n-     * @param lowValue the low value of the switch target range, inclusive\n-     * @param highValue the high value of the switch target range, inclusive\n-     * @param defaultTarget the default target of the switch\n-     * @param cases the cases of the switch\n-     *\/\n-    static TableSwitchInstruction of(int lowValue, int highValue, Label defaultTarget, List<SwitchCase> cases) {\n-        return new AbstractInstruction.UnboundTableSwitchInstruction(lowValue, highValue, defaultTarget, cases);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/TableSwitchInstruction.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-\n-\/**\n- * Models an {@code athrow} instruction in the {@code code} array of a\n- * {@code Code} attribute.  Delivered as a {@link CodeElement} when traversing\n- * the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface ThrowInstruction extends Instruction\n-        permits AbstractInstruction.UnboundThrowInstruction {\n-\n-    \/**\n-     * {@return a throw instruction}\n-     *\/\n-    static ThrowInstruction of() {\n-        return new AbstractInstruction.UnboundThrowInstruction();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/ThrowInstruction.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.instruction;\n-\n-import java.lang.constant.ClassDesc;\n-\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.impl.AbstractInstruction;\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n-import jdk.internal.classfile.impl.Util;\n-\n-\/**\n- * Models an {@code instanceof} or {@code checkcast} instruction in the {@code\n- * code} array of a {@code Code} attribute.  Delivered as a {@link CodeElement}\n- * when traversing the elements of a {@link CodeModel}.\n- *\/\n-public sealed interface TypeCheckInstruction extends Instruction\n-        permits AbstractInstruction.BoundTypeCheckInstruction,\n-                AbstractInstruction.UnboundTypeCheckInstruction {\n-\n-    \/**\n-     * {@return the type against which the instruction checks or casts}\n-     *\/\n-    ClassEntry type();\n-\n-    \/**\n-     * {@return a type check instruction}\n-     *\n-     * @param op the opcode for the specific type of type check instruction,\n-     *           which must be of kind {@link Opcode.Kind#TYPE_CHECK}\n-     * @param type the type against which to check or cast\n-     *\/\n-    static TypeCheckInstruction of(Opcode op, ClassEntry type) {\n-        Util.checkKind(op, Opcode.Kind.TYPE_CHECK);\n-        return new AbstractInstruction.UnboundTypeCheckInstruction(op, type);\n-    }\n-\n-    \/**\n-     * {@return a type check instruction}\n-     *\n-     * @param op the opcode for the specific type of type check instruction,\n-     *           which must be of kind {@link Opcode.Kind#TYPE_CHECK}\n-     * @param type the type against which to check or cast\n-     *\/\n-    static TypeCheckInstruction of(Opcode op, ClassDesc type) {\n-        return of(op, TemporaryConstantPool.INSTANCE.classEntry(type));\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/TypeCheckInstruction.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -1,488 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * <h2>Classfile parsing, generation, and transformation<\/h2>\n- * The {@code jdk.internal.classfile} package contains classes for reading, writing, and\n- * modifying Java class files, as specified in Chapter 4 of the <a\n- * href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se17\/html\/index.html\">Java\n- * Java Virtual Machine Specification<\/a>.\n- *\n- * <h2>Reading classfiles<\/h2>\n- * The main class for reading classfiles is {@link jdk.internal.classfile.ClassModel}; we\n- * convert bytes into a {@link jdk.internal.classfile.ClassModel} with {@link\n- * jdk.internal.classfile.Classfile#parse(byte[])}:\n- * <p>\n- * {@snippet lang=java :\n- * ClassModel cm = Classfile.of().parse(bytes);\n- * }\n- * <p>\n- * There are several additional overloads of {@code parse} that let you specify\n- * various processing options.\n- * <p>\n- * A {@link jdk.internal.classfile.ClassModel} is an immutable description of a class\n- * file.  It provides accessor methods to get at class metadata (e.g., {@link\n- * jdk.internal.classfile.ClassModel#thisClass()}, {@link jdk.internal.classfile.ClassModel#flags()}),\n- * as well as subordinate classfile entities ({@link jdk.internal.classfile.ClassModel#fields()},\n- * {@link jdk.internal.classfile.ClassModel#attributes()}). A {@link\n- * jdk.internal.classfile.ClassModel} is inflated lazily; most parts of the classfile are\n- * not parsed until they are actually needed.\n- * <p>\n- * We can enumerate the names of the fields and methods in a class by:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"enumerateFieldsMethods1\"}\n- * <p>\n- * When we enumerate the methods, we get a {@link jdk.internal.classfile.MethodModel} for each method; like a\n- * {@code ClassModel}, it gives us access to method metadata and\n- * the ability to descend into subordinate entities such as the bytecodes of the\n- * method body. In this way, a {@code ClassModel} is the root of a\n- * tree, with children for fields, methods, and attributes, and {@code MethodModel} in\n- * turn has its own children (attributes, {@code CodeModel}, etc.)\n- * <p>\n- * Methods like {@link jdk.internal.classfile.ClassModel#methods} allows us to traverse the class structure\n- * explicitly, going straight to the parts we are interested in.  This is useful\n- * for certain kinds of analysis, but if we wanted to process the whole\n- * classfile, we may want something more organized.  A {@link\n- * jdk.internal.classfile.ClassModel} also provides us with a view of the classfile as a\n- * series of class <em>elements<\/em>, which may include methods, fields, attributes,\n- * and more, and which can be distinguished with pattern matching.  We could\n- * rewrite the above example as:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"enumerateFieldsMethods2\"}\n- * <p>\n- * The models returned as elements from traversing {@code ClassModel} can in\n- * turn be sources of elements.  If we wanted to\n- * traverse a classfile and enumerate all the classes for which we access fields\n- * and methods, we can pick out the class elements that describe methods, then\n- * in turn pick out the method elements that describe the code attribute, and\n- * finally pick out the code elements that describe field access and invocation\n- * instructions:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"gatherDependencies1\"}\n- * <p>\n- * This same query could alternately be processed as a stream pipeline over\n- * class elements:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"gatherDependencies2\"}\n- *\n- * <h3>Models and elements<\/h3>\n- * The view of classfiles presented by this API is framed in terms of\n- * <em>models<\/em> and <em>elements<\/em>.  Models represent complex structures,\n- * such as classes, methods, fields, record elements, or the code body of a\n- * method.  Models can be explored either via random-access navigation (such as\n- * the {@link jdk.internal.classfile.ClassModel#methods()} accessor) or as a linear\n- * sequence of <em>elements<\/em>. (Elements can in turn also be models; a {@link\n- * jdk.internal.classfile.FieldModel} is also an element of a class.) For each model type\n- * (e.g., {@link jdk.internal.classfile.MethodModel}), there is a corresponding element\n- * type ({@link jdk.internal.classfile.MethodElement}).  Models and elements are immutable\n- * and are inflated lazily so creating a model does not necessarily require\n- * processing its entire content.\n- *\n- * <h3>The constant pool<\/h3>\n- * Much of the interesting content in a classfile lives in the <em>constant\n- * pool<\/em>. {@link jdk.internal.classfile.ClassModel} provides a lazily-inflated,\n- * read-only view of the constant pool via {@link jdk.internal.classfile.ClassModel#constantPool()}.\n- * Descriptions of classfile content is often exposed in the form of various\n- * subtypes of {@link jdk.internal.classfile.constantpool.PoolEntry}, such as {@link\n- * jdk.internal.classfile.constantpool.ClassEntry} or {@link jdk.internal.classfile.constantpool.Utf8Entry}.\n- * <p>\n- * Constant pool entries are also exposed through models and elements; in the\n- * above traversal example, the {@link jdk.internal.classfile.instruction.InvokeInstruction}\n- * element exposed a method for {@code owner} that corresponds to a {@code\n- * Constant_Class_info} entry in the constant pool.\n- *\n- * <h3>Attributes<\/h3>\n- * Much of the contents of a classfile is stored in attributes; attributes are\n- * found on classes, methods, fields, record components, and on the {@code Code}\n- * attribute.  Most attributes are surfaced as elements; for example, {@link\n- * jdk.internal.classfile.attribute.SignatureAttribute} is a {@link\n- * jdk.internal.classfile.ClassElement}, {@link jdk.internal.classfile.MethodElement}, and {@link\n- * jdk.internal.classfile.FieldElement} since it can appear in all of those places, and is\n- * included when iterating the elements of the corresponding model.\n- * <p>\n- * Some attributes are not surfaced as elements; these are attributes that are\n- * tightly coupled to -- and logically part of -- other parts of the class file.\n- * These include the {@code BootstrapMethods}, {@code LineNumberTable}, {@code\n- * StackMapTable}, {@code LocalVariableTable}, and {@code\n- * LocalVariableTypeTable} attributes.  These are processed by the library and\n- * treated as part of the structure they are coupled to (the entries of the\n- * {@code BootstrapMethods} attribute are treated as part of the constant pool;\n- * line numbers and local variable metadata are modeled as elements of {@link\n- * jdk.internal.classfile.CodeModel}.)\n- * <p>\n- * The {@code Code} attribute, in addition to being modeled as a {@link\n- * jdk.internal.classfile.MethodElement}, is also a model in its own right ({@link\n- * jdk.internal.classfile.CodeModel}) due to its complex structure.\n- * <p>\n- * Each standard attribute has an interface (in {@code jdk.internal.classfile.attribute})\n- * which exposes the contents of the attribute and provides factories to\n- * construct the attribute.  For example, the {@code Signature} attribute is\n- * defined by the {@link jdk.internal.classfile.attribute.SignatureAttribute} class, and\n- * provides accessors for {@link jdk.internal.classfile.attribute.SignatureAttribute#signature()}\n- * as well as factories taking {@link jdk.internal.classfile.constantpool.Utf8Entry} or\n- * {@link java.lang.String}.\n- *\n- * <h3>Custom attributes<\/h3>\n- * Attributes are converted between their classfile form and their corresponding\n- * object form via an {@link jdk.internal.classfile.AttributeMapper}.  An {@code\n- * AttributeMapper} provides the\n- * {@link jdk.internal.classfile.AttributeMapper#readAttribute(AttributedElement,\n- * ClassReader, int)} method for mapping from the classfile format\n- * to an attribute instance, and the\n- * {@link jdk.internal.classfile.AttributeMapper#writeAttribute(jdk.internal.classfile.BufWriter,\n- * java.lang.Object)} method for mapping back to the classfile format.  It also\n- * contains metadata including the attribute name, the set of classfile entities\n- * where the attribute is applicable, and whether multiple attributes of the\n- * same kind are allowed on a single entity.\n- * <p>\n- * There are built-in attribute mappers (in {@link jdk.internal.classfile.Attributes}) for\n- * each of the attribute types defined in section {@jvms 4.7} of <cite>The Java Virtual\n- * Machine Specification<\/cite>, as well as several common nonstandard attributes used by the\n- * JDK such as {@code CharacterRangeTable}.\n- * <p>\n- * Unrecognized attributes are delivered as elements of type {@link\n- * jdk.internal.classfile.attribute.UnknownAttribute}, which provide access only to the\n- * {@code byte[]} contents of the attribute.\n- * <p>\n- * For nonstandard attributes, user-provided attribute mappers can be specified\n- * through the use of the {@link\n- * jdk.internal.classfile.Classfile.AttributeMapperOption#of(java.util.function.Function)}}\n- * classfile option.  Implementations of custom attributes should extend {@link\n- * jdk.internal.classfile.CustomAttribute}.\n- *\n- * <h3>Options<\/h3>\n- * <p>\n- * {@link jdk.internal.classfile.Classfile#of(jdk.internal.classfile.Classfile.Option[])}\n- * accepts a list of options.  {@link jdk.internal.classfile.Classfile.Option} is a base interface\n- * for some statically enumerated options, as well as factories for more complex options,\n- * including:\n- * <ul>\n- *   <li>{@link jdk.internal.classfile.Classfile.StackMapsOption}\n- * -- generate stackmaps (default is {@code STACK_MAPS_WHEN_REQUIRED})<\/li>\n- *   <li>{@link jdk.internal.classfile.Classfile.DebugElementsOption}\n- * -- processing of debug information, such as local variable metadata (default is {@code PASS_DEBUG}) <\/li>\n- *   <li>{@link jdk.internal.classfile.Classfile.LineNumbersOption}\n- * -- processing of line numbers (default is {@code PASS_LINE_NUMBERS}) <\/li>\n- *   <li>{@link jdk.internal.classfile.Classfile.UnknownAttributesOption}\n- * -- processing of unrecognized attributes (default is {@code PASS_UNKNOWN_ATTRIBUTES})<\/li>\n- *   <li>{@link jdk.internal.classfile.Classfile.ConstantPoolSharingOption}}\n- * -- share constant pool when transforming (default is {@code SHARED_POOL})<\/li>\n- *   <li>{@link jdk.internal.classfile.Classfile.ClassHierarchyResolverOption#of(jdk.internal.classfile.ClassHierarchyResolver)}\n- * -- specify a custom class hierarchy resolver used by stack map generation<\/li>\n- *   <li>{@link jdk.internal.classfile.Classfile.AttributeMapperOption#of(java.util.function.Function)}\n- * -- specify format of custom attributes<\/li>\n- * <\/ul>\n- * <p>\n- * Most options allow you to request that certain parts of the classfile be\n- * skipped during traversal, such as debug information or unrecognized\n- * attributes.  Some options allow you to suppress generation of portions of the\n- * classfile, such as stack maps.  Many of these options are to access\n- * performance tradeoffs; processing debug information and line numbers has a\n- * cost (both in writing and reading.)  If you don't need this information, you\n- * can suppress it with options to gain some performance.\n- *\n- * <h2>Writing classfiles<\/h2>\n- * Classfile generation is accomplished through <em>builders<\/em>.  For each\n- * entity type that has a model, there is also a corresponding builder type;\n- * classes are built through {@link jdk.internal.classfile.ClassBuilder}, methods through\n- * {@link jdk.internal.classfile.MethodBuilder}, etc.\n- * <p>\n- * Rather than creating builders directly, builders are provided as an argument\n- * to a user-provided lambda.  To generate the familiar \"hello world\" program,\n- * we ask for a class builder, and use that class builder to create method\n- * builders for the constructor and {@code main} method, and in turn use the\n- * method builders to create a {@code Code} attribute and use the code builders\n- * to generate the instructions:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld1\"}\n- * <p>\n- * The convenience methods {@code ClassBuilder.buildMethodBody} allows us to ask\n- * {@link ClassBuilder} to create code builders to build method bodies directly,\n- * skipping the method builder custom lambda:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"helloWorld2\"}\n- * <p>\n- * Builders often support multiple ways of expressing the same entity at\n- * different levels of abstraction.  For example, the {@code invokevirtual}\n- * instruction invoking {@code println} could have been generated with {@link\n- * jdk.internal.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n- * java.lang.String, java.lang.constant.MethodTypeDesc) CodeBuilder.invokevirtual}, {@link\n- * jdk.internal.classfile.CodeBuilder#invokeInstruction(jdk.internal.classfile.Opcode,\n- * java.lang.constant.ClassDesc, java.lang.String, java.lang.constant.MethodTypeDesc,\n- * boolean) CodeBuilder.invokeInstruction}, or {@link\n- * jdk.internal.classfile.CodeBuilder#with(jdk.internal.classfile.ClassfileElement)\n- * CodeBuilder.with}.\n- * <p>\n- * The convenience method {@code CodeBuilder.invokevirtual} behaves as if it calls\n- * the convenience method {@code CodeBuilder.invokeInstruction}, which in turn behaves\n- * as if it calls method {@code CodeBuilder.with}. This composing of method calls on the\n- * builder enables the composing of transforms (as described later).\n- *\n- * <h3>Symbolic information<\/h3>\n- * To describe symbolic information for classes and types, the API uses the\n- * nominal descriptor abstractions from {@code java.lang.constant} such as {@link\n- * java.lang.constant.ClassDesc} and {@link java.lang.constant.MethodTypeDesc},\n- * which is less error-prone than using raw strings.\n- * <p>\n- * If a constant pool entry has a nominal representation then it provides a\n- * method returning the corresponding nominal descriptor type e.g.\n- * method {@link jdk.internal.classfile.constantpool.ClassEntry#asSymbol} returns\n- * {@code ClassDesc}.\n- * <p>\n- * Where appropriate builders provide two methods for building an element with\n- * symbolic information, one accepting nominal descriptors, and the other\n- * accepting constant pool entries.\n- *\n- * <h2>Transforming classfiles<\/h2>\n- * Classfile Processing APIs are most frequently used to combine reading and\n- * writing into transformation, where a classfile is read, localized changes are\n- * made, but much of the classfile is passed through unchanged.  For each kind\n- * of builder, {@code XxxBuilder} has a method {@code with(XxxElement)} so that\n- * elements that we wish to pass through unchanged can be handed directly back\n- * to the builder.\n- * <p>\n- * If we wanted to strip out methods whose names starts with \"debug\", we could\n- * get an existing {@link jdk.internal.classfile.ClassModel}, build a new classfile that\n- * provides a {@link jdk.internal.classfile.ClassBuilder}, iterate the elements of the\n- * original {@link jdk.internal.classfile.ClassModel}, and pass through all of them to\n- * the builder except the methods we want to drop:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods1\"}\n- * <p>\n- * This hands every class element, except for those corresponding to methods\n- * whose names start with {@code debug}, back to the builder.  Transformations\n- * can of course be more complicated, diving into method bodies and instructions\n- * and transforming those as well, but the same structure is repeated at every\n- * level, since every entity has corresponding model, builder, and element\n- * abstractions.\n- * <p>\n- * Transformation can be viewed as a \"flatMap\" operation on the sequence of\n- * elements; for every element, we could pass it through unchanged, drop it, or\n- * replace it with one or more elements.  Because transformation is such a\n- * common operation on classfiles, each model type has a corresponding {@code\n- * XxxTransform} type (which describes a transform on a sequence of {@code\n- * XxxElement}) and each builder type has {@code transformYyy} methods for transforming\n- * its child models.  A transform is simply a functional interface that takes a\n- * builder and an element, and an implementation \"flatMap\"s elements\n- * into the builder.  We could express the above as:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods2\"}\n- * <p>\n- * {@code ClassTransform.dropping} convenience method allow us to simplify the same\n- * transformation construction and express the above as:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"stripDebugMethods3\"}\n- *\n- * <h3>Lifting transforms<\/h3>\n- * While the example using transformations are only slightly shorter, the\n- * advantage of expressing transformation in this way is that the transform\n- * operations can be more easily combined.  Suppose we want to redirect\n- * invocations of static methods on {@code Foo} to the corresponding method on\n- * {@code Bar} instead.  We could express this as a transformation on {@link\n- * jdk.internal.classfile.CodeElement}:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"fooToBarTransform\"}\n- * <p>\n- * We can then <em>lift<\/em> this transformation on code elements into a\n- * transformation on method elements.  This intercepts method elements that\n- * correspond to a {@code Code} attribute, dives into its code elements, and\n- * applies the code transform to them, and passes other method elements through\n- * unchanged:\n- * {@snippet lang=java :\n- * MethodTransform mt = MethodTransform.transformingCode(fooToBar);\n- * }\n- * <p>\n- * and further lift the transform on method elements into one on class\n- * elements:\n- * {@snippet lang=java :\n- * ClassTransform ct = ClassTransform.transformingMethods(mt);\n- * }\n- * <p>\n- * or lift the code transform into the class transform directly:\n- * {@snippet lang=java :\n- * ClassTransform ct = ClassTransform.transformingMethodBodiess(fooToBar);\n- * }\n- * <p>\n- * and then transform the classfile:\n- * {@snippet lang=java :\n- * var cc = Classfile.of();\n- * byte[] newBytes = cc.transform(cc.parse(bytes), ct);\n- * }\n- * <p>\n- * This is much more concise (and less error-prone) than the equivalent\n- * expressed by traversing the classfile structure directly:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"fooToBarUnrolled\"}\n- *\n- * <h3>Composing transforms<\/h3>\n- * Transforms on the same type of element can be composed in sequence, where the\n- * output of the first is fed to the input of the second.  Suppose we want to\n- * instrument all method calls, where we print the name of a method before\n- * calling it:\n- * {@snippet lang=\"java\" class=\"PackageSnippets\" region=\"instrumentCallsTransform\"}\n- * <p>\n- * Then we can compose {@code fooToBar} and {@code instrumentCalls} with {@link\n- * jdk.internal.classfile.CodeTransform#andThen(jdk.internal.classfile.CodeTransform)}:\n- * <p>\n- * {@snippet lang=java :\n- * var cc = Classfile.of();\n- * byte[] newBytes = cc.transform(cc.parse(bytes),\n- *                                ClassTransform.transformingMethods(\n- *                                    MethodTransform.transformingCode(\n- *                                        fooToBar.andThen(instrumentCalls))));\n- * }\n- *\n- * Transform {@code instrumentCalls} will receive all code elements produced by\n- * transform {@code forToBar}, either those code elements from the original classfile\n- * or replacements (replacing static invocations to {@code Foo} with those to {@code Bar}).\n- *\n- * <h3>Constant pool sharing<\/h3>\n- * Transformation doesn't merely handle the logistics of reading, transforming\n- * elements, and writing.  Most of the time when we are transforming a\n- * classfile, we are making relatively minor changes.  To optimize such cases,\n- * transformation seeds the new classfile with a copy of the constant pool from\n- * the original classfile; this enables significant optimizations (methods and\n- * attributes that are not transformed can be processed by bulk-copying their\n- * bytes, rather than parsing them and regenerating their contents.)  If\n- * constant pool sharing is not desired it can be suppressed\n- * with the {@link jdk.internal.classfile.Classfile.ConstantPoolSharingOption} option.\n- * Such suppression may be beneficial when transformation removes many elements,\n- * resulting in many unreferenced constant pool entries.\n- *\n- * <h2>API conventions<\/h2>\n- * <p>\n- * The API is largely derived from a <a href=\"#data_model\"><em>data model<\/em><\/a>\n- * for the classfile format, which defines each element kind (which includes models and\n- * attributes) and its properties.  For each element kind, there is a\n- * corresponding interface to describe that element, and factory methods to\n- * create that element.  Some element kinds also have convenience methods on the\n- * corresponding builder (e.g., {@link\n- * jdk.internal.classfile.CodeBuilder#invokevirtual(java.lang.constant.ClassDesc,\n- * java.lang.String, java.lang.constant.MethodTypeDesc)}).\n- * <p>\n- * Most symbolic information in elements is represented by constant pool entries\n- * (for example, the owner of a field is represented by a {@link\n- * jdk.internal.classfile.constantpool.ClassEntry}.) Factories and builders also\n- * accept nominal descriptors from {@code java.lang.constant} (e.g., {@link\n- * java.lang.constant.ClassDesc}.)\n- *\n- * <h2><a id=\"data_model\"><\/a>Data model<\/h2>\n- * We define each kind of element by its name, an optional arity indicator (zero\n- * or more, zero or one, exactly one), and a list of components.  The elements\n- * of a class are fields, methods, and the attributes that can appear on\n- * classes:\n- * <p>\n- * {@snippet lang=\"text\" :\n- * ClassElement =\n- *     FieldModel*(UtfEntry name, Utf8Entry descriptor)\n- *     | MethodModel*(UtfEntry name, Utf8Entry descriptor)\n- *     | ModuleAttribute?(int flags, ModuleEntry moduleName, UtfEntry moduleVersion,\n- *                        List<ModuleRequireInfo> requires, List<ModuleOpenInfo> opens,\n- *                        List<ModuleExportInfo> exports, List<ModuleProvidesInfo> provides,\n- *                        List<ClassEntry> uses)\n- *     | ModulePackagesAttribute?(List<PackageEntry> packages)\n- *     | ModuleTargetAttribute?(Utf8Entry targetPlatform)\n- *     | ModuleHashesAttribute?(Utf8Entry algorithm, List<HashInfo> hashes)\n- *     | ModuleResolutionAttribute?(int resolutionFlags)\n- *     | SourceFileAttribute?(Utf8Entry sourceFile)\n- *     | SourceDebugExtensionsAttribute?(byte[] contents)\n- *     | CompilationIDAttribute?(Utf8Entry compilationId)\n- *     | SourceIDAttribute?(Utf8Entry sourceId)\n- *     | NestHostAttribute?(ClassEntry nestHost)\n- *     | NestMembersAttribute?(List<ClassEntry> nestMembers)\n- *     | RecordAttribute?(List<RecordComponent> components)\n- *     | EnclosingMethodAttribute?(ClassEntry className, NameAndTypeEntry method)\n- *     | InnerClassesAttribute?(List<InnerClassInfo> classes)\n- *     | PermittedSubclassesAttribute?(List<ClassEntry> permittedSubclasses)\n- *     | DeclarationElement*\n- * }\n- *<p>\n- * where {@code DeclarationElement} are the elements that are common to all declarations\n- * (classes,  methods, fields) and so are factored out:\n- *\n- * {@snippet lang=\"text\" :\n- * DeclarationElement =\n- *     SignatureAttribute?(Utf8Entry signature)\n- *     | SyntheticAttribute?()\n- *     | DeprecatedAttribute?()\n- *     | RuntimeInvisibleAnnotationsAttribute?(List<Annotation> annotations)\n- *     | RuntimeVisibleAnnotationsAttribute?(List<Annotation> annotations)\n- *     | CustomAttribute*\n- *     | UnknownAttribute*\n- * }\n- *\n- * Fields and methods are models with their own elements.  The elements of fields\n- * and methods are fairly simple; most of the complexity of methods lives in the\n- * {@link jdk.internal.classfile.CodeModel} (which models the {@code Code} attribute\n- * along with the code-related attributes: stack map table, local variable table,\n- * line number table, etc.)\n- *\n- * {@snippet lang=\"text\" :\n- * FieldElement =\n- *     DeclarationElement\n- *     | ConstantValueAttribute?(ConstantValueEntry constant)\n- *\n- * MethodElement =\n- *     DeclarationElement\n- *     | CodeModel?()\n- *     | AnnotationDefaultAttribute?(ElementValue defaultValue)\n- *     | MethodParametersAttribute?(List<MethodParameterInfo> parameters)\n- *     | ExceptionsAttribute?(List<ClassEntry> exceptions)\n- * }\n- *\n- * {@link jdk.internal.classfile.CodeModel} is unique in that its elements are <em>ordered<\/em>.\n- * Elements of {@code Code} include ordinary bytecodes, as well as a number of pseudo-instructions\n- * representing branch targets, line number metadata, local variable metadata, and\n- * catch blocks.\n- *\n- * {@snippet lang=\"text\" :\n- * CodeElement = Instruction | PseudoInstruction\n- *\n- * Instruction =\n- *     LoadInstruction(TypeKind type, int slot)\n- *     | StoreInstruction(TypeKind type, int slot)\n- *     | IncrementInstruction(int slot, int constant)\n- *     | BranchInstruction(Opcode opcode, Label target)\n- *     | LookupSwitchInstruction(Label defaultTarget, List<SwitchCase> cases)\n- *     | TableSwitchInstruction(Label defaultTarget, int low, int high,\n- *                              List<SwitchCase> cases)\n- *     | ReturnInstruction(TypeKind kind)\n- *     | ThrowInstruction()\n- *     | FieldInstruction(Opcode opcode, FieldRefEntry field)\n- *     | InvokeInstruction(Opcode opcode, MemberRefEntry method, boolean isInterface)\n- *     | InvokeDynamicInstruction(InvokeDynamicEntry invokedynamic)\n- *     | NewObjectInstruction(ClassEntry className)\n- *     | NewReferenceArrayInstruction(ClassEntry componentType)\n- *     | NewPrimitiveArrayInstruction(TypeKind typeKind)\n- *     | NewMultiArrayInstruction(ClassEntry componentType, int dims)\n- *     | ArrayLoadInstruction(Opcode opcode)\n- *     | ArrayStoreInstruction(Opcode opcode)\n- *     | TypeCheckInstruction(Opcode opcode, ClassEntry className)\n- *     | ConvertInstruction(TypeKind from, TypeKind to)\n- *     | OperatorInstruction(Opcode opcode)\n- *     | ConstantInstruction(ConstantDesc constant)\n- *     | StackInstruction(Opcode opcode)\n- *     | MonitorInstruction(Opcode opcode)\n- *     | NopInstruction()\n- *\n- * PseudoInstruction =\n- *     | LabelTarget(Label label)\n- *     | LineNumber(int line)\n- *     | ExceptionCatch(Label tryStart, Label tryEnd, Label handler, ClassEntry exception)\n- *     | LocalVariable(int slot, UtfEntry name, Utf8Entry type, Label startScope, Label endScope)\n- *     | LocalVariableType(int slot, Utf8Entry name, Utf8Entry type, Label startScope, Label endScope)\n- *     | CharacterRange(int rangeStart, int rangeEnd, int flags, Label startScope, Label endScope)\n- * }\n- *\/\n-package jdk.internal.classfile;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/package-info.java","additions":0,"deletions":488,"binary":false,"changes":488,"status":"deleted"},{"patch":"@@ -1,346 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import java.lang.constant.ClassDesc;\n-import java.lang.constant.ConstantDescs;\n-import java.lang.constant.MethodTypeDesc;\n-import java.lang.invoke.MethodHandles;\n-import java.util.ArrayDeque;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import java.lang.reflect.AccessFlag;\n-import java.util.Map;\n-import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassHierarchyResolver;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.instruction.FieldInstruction;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n-\n-import static java.util.stream.Collectors.toSet;\n-import jdk.internal.classfile.components.ClassRemapper;\n-import jdk.internal.classfile.components.CodeLocalsShifter;\n-import jdk.internal.classfile.components.CodeRelabeler;\n-import jdk.internal.classfile.instruction.ReturnInstruction;\n-import jdk.internal.classfile.instruction.StoreInstruction;\n-\n-class PackageSnippets {\n-    void enumerateFieldsMethods1(byte[] bytes) {\n-        \/\/ @start region=\"enumerateFieldsMethods1\"\n-        ClassModel cm = Classfile.of().parse(bytes);\n-        for (FieldModel fm : cm.fields())\n-            System.out.printf(\"Field %s%n\", fm.fieldName().stringValue());\n-        for (MethodModel mm : cm.methods())\n-            System.out.printf(\"Method %s%n\", mm.methodName().stringValue());\n-        \/\/ @end\n-    }\n-\n-    void enumerateFieldsMethods2(byte[] bytes) {\n-        \/\/ @start region=\"enumerateFieldsMethods2\"\n-        ClassModel cm = Classfile.of().parse(bytes);\n-        for (ClassElement ce : cm) {\n-            switch (ce) {\n-                case MethodModel mm -> System.out.printf(\"Method %s%n\", mm.methodName().stringValue());\n-                case FieldModel fm -> System.out.printf(\"Field %s%n\", fm.fieldName().stringValue());\n-                default -> { }\n-            }\n-        }\n-        \/\/ @end\n-    }\n-\n-    void gatherDependencies1(byte[] bytes) {\n-        \/\/ @start region=\"gatherDependencies1\"\n-        ClassModel cm = Classfile.of().parse(bytes);\n-        Set<ClassDesc> dependencies = new HashSet<>();\n-\n-        for (ClassElement ce : cm) {\n-            if (ce instanceof MethodModel mm) {\n-                for (MethodElement me : mm) {\n-                    if (me instanceof CodeModel xm) {\n-                        for (CodeElement e : xm) {\n-                            switch (e) {\n-                                case InvokeInstruction i -> dependencies.add(i.owner().asSymbol());\n-                                case FieldInstruction i -> dependencies.add(i.owner().asSymbol());\n-                                default -> { }\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        \/\/ @end\n-    }\n-\n-    void gatherDependencies2(byte[] bytes) {\n-        \/\/ @start region=\"gatherDependencies2\"\n-        ClassModel cm = Classfile.of().parse(bytes);\n-        Set<ClassDesc> dependencies =\n-              cm.elementStream()\n-                .flatMap(ce -> ce instanceof MethodModel mm ? mm.elementStream() : Stream.empty())\n-                .flatMap(me -> me instanceof CodeModel com ? com.elementStream() : Stream.empty())\n-                .<ClassDesc>mapMulti((xe, c) -> {\n-                    switch (xe) {\n-                        case InvokeInstruction i -> c.accept(i.owner().asSymbol());\n-                        case FieldInstruction i -> c.accept(i.owner().asSymbol());\n-                        default -> { }\n-                    }\n-                })\n-                .collect(toSet());\n-        \/\/ @end\n-    }\n-\n-    private static final ClassDesc CD_Hello = ClassDesc.of(\"Hello\");\n-    private static final ClassDesc CD_Foo = ClassDesc.of(\"Foo\");\n-    private static final ClassDesc CD_Bar = ClassDesc.of(\"Bar\");\n-    private static final ClassDesc CD_System = ClassDesc.of(\"java.lang.System\");\n-    private static final ClassDesc CD_PrintStream = ClassDesc.of(\"java.io.PrintStream\");\n-    private static final MethodTypeDesc MTD_void_StringArray = MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_String.arrayType());\n-    private static final MethodTypeDesc MTD_void_String = MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_String);\n-\n-    void writeHelloWorld1() {\n-        \/\/ @start region=\"helloWorld1\"\n-        byte[] bytes = Classfile.of().build(CD_Hello,\n-                clb -> clb.withFlags(Classfile.ACC_PUBLIC)\n-                          .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void,\n-                                      Classfile.ACC_PUBLIC,\n-                                      mb -> mb.withCode(\n-                                              cob -> cob.aload(0)\n-                                                        .invokespecial(ConstantDescs.CD_Object,\n-                                                                       ConstantDescs.INIT_NAME, ConstantDescs.MTD_void)\n-                                                        .return_()))\n-                          .withMethod(\"main\", MTD_void_StringArray, Classfile.ACC_PUBLIC + Classfile.ACC_STATIC,\n-                                      mb -> mb.withCode(\n-                                              cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n-                                                        .ldc(\"Hello World\")\n-                                                        .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n-                                                        .return_())));\n-        \/\/ @end\n-    }\n-\n-    void writeHelloWorld2() {\n-        \/\/ @start region=\"helloWorld2\"\n-        byte[] bytes = Classfile.of().build(CD_Hello,\n-                clb -> clb.withFlags(Classfile.ACC_PUBLIC)\n-                          .withMethodBody(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void,\n-                                          Classfile.ACC_PUBLIC,\n-                                          cob -> cob.aload(0)\n-                                                    .invokespecial(ConstantDescs.CD_Object,\n-                                                                   ConstantDescs.INIT_NAME, ConstantDescs.MTD_void)\n-                                                    .return_())\n-                          .withMethodBody(\"main\", MTD_void_StringArray, Classfile.ACC_PUBLIC + Classfile.ACC_STATIC,\n-                                          cob -> cob.getstatic(CD_System, \"out\", CD_PrintStream)\n-                                                    .ldc(\"Hello World\")\n-                                                    .invokevirtual(CD_PrintStream, \"println\", MTD_void_String)\n-                                                    .return_()));\n-        \/\/ @end\n-    }\n-\n-    void stripDebugMethods1(byte[] bytes) {\n-        \/\/ @start region=\"stripDebugMethods1\"\n-        ClassModel classModel = Classfile.of().parse(bytes);\n-        byte[] newBytes = Classfile.of().build(classModel.thisClass().asSymbol(),\n-                classBuilder -> {\n-                    for (ClassElement ce : classModel) {\n-                        if (!(ce instanceof MethodModel mm\n-                                && mm.methodName().stringValue().startsWith(\"debug\"))) {\n-                            classBuilder.with(ce);\n-                        }\n-                    }\n-                });\n-        \/\/ @end\n-    }\n-\n-    void stripDebugMethods2(byte[] bytes) {\n-        \/\/ @start region=\"stripDebugMethods2\"\n-        ClassTransform ct = (builder, element) -> {\n-            if (!(element instanceof MethodModel mm && mm.methodName().stringValue().startsWith(\"debug\")))\n-                builder.with(element);\n-        };\n-        var cc = Classfile.of();\n-        byte[] newBytes = cc.transform(cc.parse(bytes), ct);\n-        \/\/ @end\n-    }\n-\n-    void stripDebugMethods3(byte[] bytes) {\n-        \/\/ @start region=\"stripDebugMethods3\"\n-        ClassTransform ct = ClassTransform.dropping(\n-                                    element -> element instanceof MethodModel mm\n-                                            && mm.methodName().stringValue().startsWith(\"debug\"));\n-        \/\/ @end\n-    }\n-\n-    void fooToBarTransform() {\n-        \/\/ @start region=\"fooToBarTransform\"\n-        CodeTransform fooToBar = (b, e) -> {\n-            if (e instanceof InvokeInstruction i\n-                    && i.owner().asInternalName().equals(\"Foo\")\n-                    && i.opcode() == Opcode.INVOKESTATIC)\n-                        b.invokeInstruction(i.opcode(), CD_Bar, i.name().stringValue(), i.typeSymbol(), i.isInterface());\n-            else b.with(e);\n-        };\n-        \/\/ @end\n-    }\n-\n-    void instrumentCallsTransform() {\n-        \/\/ @start region=\"instrumentCallsTransform\"\n-        CodeTransform instrumentCalls = (b, e) -> {\n-            if (e instanceof InvokeInstruction i) {\n-                b.getstatic(CD_System, \"out\", CD_PrintStream)\n-                 .ldc(i.name().stringValue())\n-                 .invokevirtual(CD_PrintStream, \"println\", MTD_void_String);\n-            }\n-            b.with(e);\n-        };\n-        \/\/ @end\n-    }\n-\n-    void fooToBarUnrolled(ClassModel classModel) {\n-        \/\/ @start region=\"fooToBarUnrolled\"\n-        byte[] newBytes = Classfile.of().build(classModel.thisClass().asSymbol(),\n-            classBuilder -> {\n-              for (ClassElement ce : classModel) {\n-                  if (ce instanceof MethodModel mm) {\n-                      classBuilder.withMethod(mm.methodName().stringValue(), mm.methodTypeSymbol(),\n-                                              mm.flags().flagsMask(),\n-                                              methodBuilder -> {\n-                                  for (MethodElement me : mm) {\n-                                      if (me instanceof CodeModel xm) {\n-                                          methodBuilder.withCode(codeBuilder -> {\n-                                              for (CodeElement e : xm) {\n-                                                  if (e instanceof InvokeInstruction i && i.owner().asInternalName().equals(\"Foo\")\n-                                                                               && i.opcode() == Opcode.INVOKESTATIC)\n-                                                              codeBuilder.invokeInstruction(i.opcode(), CD_Bar,\n-                                                                                            i.name().stringValue(), i.typeSymbol(), i.isInterface());\n-                                                  else codeBuilder.with(e);\n-                                              }});\n-                                          }\n-                                          else\n-                                          methodBuilder.with(me);\n-                                      }\n-                                  });\n-                              }\n-                      else\n-                      classBuilder.with(ce);\n-                  }\n-              });\n-        \/\/ @end\n-    }\n-\n-    void codeRelabeling(ClassModel classModel) {\n-        \/\/ @start region=\"codeRelabeling\"\n-        byte[] newBytes = Classfile.of().transform(classModel,\n-                ClassTransform.transformingMethodBodies(\n-                        CodeTransform.ofStateful(CodeRelabeler::of)));\n-        \/\/ @end\n-    }\n-\n-    \/\/ @start region=\"classInstrumentation\"\n-    byte[] classInstrumentation(ClassModel target, ClassModel instrumentor, Predicate<MethodModel> instrumentedMethodsFilter) {\n-        var instrumentorCodeMap = instrumentor.methods().stream()\n-                                              .filter(instrumentedMethodsFilter)\n-                                              .collect(Collectors.toMap(mm -> mm.methodName().stringValue() + mm.methodType().stringValue(), mm -> mm.code().orElseThrow()));\n-        var targetFieldNames = target.fields().stream().map(f -> f.fieldName().stringValue()).collect(Collectors.toSet());\n-        var targetMethods = target.methods().stream().map(m -> m.methodName().stringValue() + m.methodType().stringValue()).collect(Collectors.toSet());\n-        var instrumentorClassRemapper = ClassRemapper.of(Map.of(instrumentor.thisClass().asSymbol(), target.thisClass().asSymbol()));\n-        return Classfile.of().transform(target,\n-                ClassTransform.transformingMethods(\n-                        instrumentedMethodsFilter,\n-                        (mb, me) -> {\n-                            if (me instanceof CodeModel targetCodeModel) {\n-                                var mm = targetCodeModel.parent().get();\n-                                \/\/instrumented methods code is taken from instrumentor\n-                                mb.transformCode(instrumentorCodeMap.get(mm.methodName().stringValue() + mm.methodType().stringValue()),\n-                                        \/\/all references to the instrumentor class are remapped to target class\n-                                        instrumentorClassRemapper.asCodeTransform()\n-                                        .andThen((codeBuilder, instrumentorCodeElement) -> {\n-                                            \/\/all invocations of target methods from instrumentor are inlined\n-                                            if (instrumentorCodeElement instanceof InvokeInstruction inv\n-                                                && target.thisClass().asInternalName().equals(inv.owner().asInternalName())\n-                                                && mm.methodName().stringValue().equals(inv.name().stringValue())\n-                                                && mm.methodType().stringValue().equals(inv.type().stringValue())) {\n-\n-                                                \/\/store stacked method parameters into locals\n-                                                var storeStack = new ArrayDeque<StoreInstruction>();\n-                                                int slot = 0;\n-                                                if (!mm.flags().has(AccessFlag.STATIC))\n-                                                    storeStack.push(StoreInstruction.of(TypeKind.ReferenceType, slot++));\n-                                                for (var pt : mm.methodTypeSymbol().parameterList()) {\n-                                                    var tk = TypeKind.from(pt);\n-                                                    storeStack.push(StoreInstruction.of(tk, slot));\n-                                                    slot += tk.slotSize();\n-                                                }\n-                                                storeStack.forEach(codeBuilder::with);\n-\n-                                                \/\/inlined target locals must be shifted based on the actual instrumentor locals\n-                                                codeBuilder.block(inlinedBlockBuilder -> inlinedBlockBuilder\n-                                                        .transform(targetCodeModel, CodeLocalsShifter.of(mm.flags(), mm.methodTypeSymbol())\n-                                                        .andThen(CodeRelabeler.of())\n-                                                        .andThen((innerBuilder, shiftedTargetCode) -> {\n-                                                            \/\/returns must be replaced with jump to the end of the inlined method\n-                                                            if (shiftedTargetCode instanceof ReturnInstruction)\n-                                                                innerBuilder.goto_(inlinedBlockBuilder.breakLabel());\n-                                                            else\n-                                                                innerBuilder.with(shiftedTargetCode);\n-                                                        })));\n-                                            } else\n-                                                codeBuilder.with(instrumentorCodeElement);\n-                                        }));\n-                            } else\n-                                mb.with(me);\n-                        })\n-                .andThen(ClassTransform.endHandler(clb ->\n-                    \/\/remaining instrumentor fields and methods are injected at the end\n-                    clb.transform(instrumentor,\n-                            ClassTransform.dropping(cle ->\n-                                    !(cle instanceof FieldModel fm\n-                                            && !targetFieldNames.contains(fm.fieldName().stringValue()))\n-                                    && !(cle instanceof MethodModel mm\n-                                            && !ConstantDescs.INIT_NAME.equals(mm.methodName().stringValue())\n-                                            && !targetMethods.contains(mm.methodName().stringValue() + mm.methodType().stringValue())))\n-                            \/\/and instrumentor class references remapped to target class\n-                            .andThen(instrumentorClassRemapper)))));\n-    }\n-    \/\/ @end\n-\n-    void resolverExample() {\n-        \/\/ @start region=\"lookup-class-hierarchy-resolver\"\n-        MethodHandles.Lookup lookup = MethodHandles.lookup(); \/\/ @replace regex=\"MethodHandles\\.lookup\\(\\)\" replacement=\"...\"\n-        ClassHierarchyResolver resolver = ClassHierarchyResolver.ofClassLoading(lookup).cached();\n-        \/\/ @end\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/snippet-files\/PackageSnippets.java","additions":0,"deletions":346,"binary":false,"changes":346,"status":"deleted"},{"patch":"@@ -27,5 +27,5 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n@@ -71,2 +71,2 @@\n-import static jdk.internal.classfile.Classfile.*;\n-import static jdk.internal.classfile.TypeKind.*;\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.classfile.TypeKind.*;\n@@ -194,1 +194,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.ofInternalName(className), clb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.ofInternalName(className), clb -> {\n@@ -215,1 +215,1 @@\n-            List<VerifyError> errors = Classfile.of().parse(bytes).verify(null);\n+            List<VerifyError> errors = ClassFile.of().parse(bytes).verify(null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -80,0 +80,2 @@\n+        @JEP(number=457, title=\"ClassFile API\", status=\"Preview\")\n+        CLASSFILE_API,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,9 +36,9 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.ModuleHashInfo;\n-import jdk.internal.classfile.attribute.ModuleHashesAttribute;\n-import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n-import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n-import jdk.internal.classfile.attribute.ModuleTargetAttribute;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.ModuleHashInfo;\n+import java.lang.classfile.attribute.ModuleHashesAttribute;\n+import java.lang.classfile.attribute.ModuleMainClassAttribute;\n+import java.lang.classfile.attribute.ModulePackagesAttribute;\n+import java.lang.classfile.attribute.ModuleResolutionAttribute;\n+import java.lang.classfile.attribute.ModuleTargetAttribute;\n@@ -153,1 +153,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfoExtender.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -82,0 +82,5 @@\n+    exports java.lang.classfile;\n+    exports java.lang.classfile.attribute;\n+    exports java.lang.classfile.components;\n+    exports java.lang.classfile.constantpool;\n+    exports java.lang.classfile.instruction;\n@@ -153,2 +158,6 @@\n-        jdk.incubator.vector,\n-        jdk.jshell;\n+        jdk.incubator.vector, \/\/ participates in preview features\n+        jdk.jartool, \/\/ participates in preview features\n+        jdk.jdeps, \/\/ participates in preview features\n+        jdk.jfr, \/\/ participates in preview features\n+        jdk.jlink,   \/\/ participates in preview features\n+        jdk.jshell; \/\/ participates in preview features\n@@ -188,22 +197,0 @@\n-    exports jdk.internal.classfile to\n-        jdk.jartool,\n-        jdk.jdeps,\n-        jdk.jfr,\n-        jdk.jlink,\n-        jdk.jshell;\n-    exports jdk.internal.classfile.attribute to\n-        jdk.jartool,\n-        jdk.jdeps,\n-        jdk.jfr,\n-        jdk.jlink;\n-    exports jdk.internal.classfile.components to\n-        jdk.jfr;\n-    exports jdk.internal.classfile.constantpool to\n-        jdk.jartool,\n-        jdk.jdeps,\n-        jdk.jfr,\n-        jdk.jlink;\n-    exports jdk.internal.classfile.instruction to\n-        jdk.jdeps,\n-        jdk.jlink,\n-        jdk.jshell;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":11,"deletions":24,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import jdk.internal.javac.ParticipatesInPreview;\n+\n@@ -50,0 +52,1 @@\n+@ParticipatesInPreview\n","filename":"src\/jdk.jartool\/share\/classes\/module-info.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,9 +35,9 @@\n-import jdk.internal.classfile.AccessFlags;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n-import jdk.internal.classfile.attribute.InnerClassesAttribute;\n+import java.lang.classfile.AccessFlags;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.attribute.EnclosingMethodAttribute;\n+import java.lang.classfile.attribute.InnerClassesAttribute;\n@@ -169,1 +169,1 @@\n-        var cm = Classfile.of().parse(bytes);\n+        var cm = ClassFile.of().parse(bytes);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/FingerPrint.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,7 +29,7 @@\n-import jdk.internal.classfile.Annotation;\n-import jdk.internal.classfile.AnnotationElement;\n-import jdk.internal.classfile.AnnotationValue;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.TypeAnnotation;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.TypeAnnotation;\n+import java.lang.classfile.attribute.CodeAttribute;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AnnotationWriter.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -34,4 +34,4 @@\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.attribute.*;\n-import static jdk.internal.classfile.Classfile.*;\n-import static jdk.internal.classfile.attribute.StackMapFrameInfo.*;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.attribute.*;\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.classfile.attribute.StackMapFrameInfo.*;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,13 +39,13 @@\n-import jdk.internal.classfile.AccessFlags;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassSignature;\n-import jdk.internal.classfile.Classfile;\n-import static jdk.internal.classfile.Classfile.*;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.MethodSignature;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.AccessFlags;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassSignature;\n+import java.lang.classfile.ClassFile;\n+import static java.lang.classfile.ClassFile.*;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.MethodSignature;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.SignatureAttribute;\n@@ -717,1 +717,1 @@\n-            case Classfile.TAG_INTEGER: {\n+            case ClassFile.TAG_INTEGER: {\n@@ -731,1 +731,1 @@\n-            case Classfile.TAG_STRING:\n+            case ClassFile.TAG_STRING:\n@@ -819,19 +819,19 @@\n-        ACC_PUBLIC      (Classfile.ACC_PUBLIC,       \"public\",       true,  true,  true,  true ),\n-        ACC_PRIVATE     (Classfile.ACC_PRIVATE,      \"private\",      false, true,  true,  true ),\n-        ACC_PROTECTED   (Classfile.ACC_PROTECTED,    \"protected\",    false, true,  true,  true ),\n-        ACC_STATIC      (Classfile.ACC_STATIC,       \"static\",       false, true,  true,  true ),\n-        ACC_FINAL       (Classfile.ACC_FINAL,        \"final\",        true,  true,  true,  true ),\n-        ACC_SUPER       (Classfile.ACC_SUPER,        null,           true,  false, false, false),\n-        ACC_SYNCHRONIZED(Classfile.ACC_SYNCHRONIZED, \"synchronized\", false, false, false, true ),\n-        ACC_VOLATILE    (Classfile.ACC_VOLATILE,     \"volatile\",     false, false, true,  false),\n-        ACC_BRIDGE      (Classfile.ACC_BRIDGE,       null,           false, false, false, true ),\n-        ACC_TRANSIENT   (Classfile.ACC_TRANSIENT,    \"transient\",    false, false, true,  false),\n-        ACC_VARARGS     (Classfile.ACC_VARARGS,      null,           false, false, false, true ),\n-        ACC_NATIVE      (Classfile.ACC_NATIVE,       \"native\",       false, false, false, true ),\n-        ACC_INTERFACE   (Classfile.ACC_INTERFACE,    null,           true,   true, false, false),\n-        ACC_ABSTRACT    (Classfile.ACC_ABSTRACT,     \"abstract\",     true,   true, false, true ),\n-        ACC_STRICT      (Classfile.ACC_STRICT,       \"strictfp\",     false, false, false, true ),\n-        ACC_SYNTHETIC   (Classfile.ACC_SYNTHETIC,    null,           true,  true,  true,  true ),\n-        ACC_ANNOTATION  (Classfile.ACC_ANNOTATION,   null,           true,   true, false, false),\n-        ACC_ENUM        (Classfile.ACC_ENUM,         null,           true,   true, true,  false),\n-        ACC_MODULE      (Classfile.ACC_MODULE,       null,           true,  false, false, false);\n+        ACC_PUBLIC      (ClassFile.ACC_PUBLIC,       \"public\",       true,  true,  true,  true ),\n+        ACC_PRIVATE     (ClassFile.ACC_PRIVATE,      \"private\",      false, true,  true,  true ),\n+        ACC_PROTECTED   (ClassFile.ACC_PROTECTED,    \"protected\",    false, true,  true,  true ),\n+        ACC_STATIC      (ClassFile.ACC_STATIC,       \"static\",       false, true,  true,  true ),\n+        ACC_FINAL       (ClassFile.ACC_FINAL,        \"final\",        true,  true,  true,  true ),\n+        ACC_SUPER       (ClassFile.ACC_SUPER,        null,           true,  false, false, false),\n+        ACC_SYNCHRONIZED(ClassFile.ACC_SYNCHRONIZED, \"synchronized\", false, false, false, true ),\n+        ACC_VOLATILE    (ClassFile.ACC_VOLATILE,     \"volatile\",     false, false, true,  false),\n+        ACC_BRIDGE      (ClassFile.ACC_BRIDGE,       null,           false, false, false, true ),\n+        ACC_TRANSIENT   (ClassFile.ACC_TRANSIENT,    \"transient\",    false, false, true,  false),\n+        ACC_VARARGS     (ClassFile.ACC_VARARGS,      null,           false, false, false, true ),\n+        ACC_NATIVE      (ClassFile.ACC_NATIVE,       \"native\",       false, false, false, true ),\n+        ACC_INTERFACE   (ClassFile.ACC_INTERFACE,    null,           true,   true, false, false),\n+        ACC_ABSTRACT    (ClassFile.ACC_ABSTRACT,     \"abstract\",     true,   true, false, true ),\n+        ACC_STRICT      (ClassFile.ACC_STRICT,       \"strictfp\",     false, false, false, true ),\n+        ACC_SYNTHETIC   (ClassFile.ACC_SYNTHETIC,    null,           true,  true,  true,  true ),\n+        ACC_ANNOTATION  (ClassFile.ACC_ANNOTATION,   null,           true,   true, false, false),\n+        ACC_ENUM        (ClassFile.ACC_ENUM,         null,           true,   true, true,  false),\n+        ACC_MODULE      (ClassFile.ACC_MODULE,       null,           true,  false, false, false);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -33,7 +33,7 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.instruction.*;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.instruction.*;\n@@ -85,1 +85,1 @@\n-        if ((method.flags().flagsMask() & Classfile.ACC_STATIC) == 0)\n+        if ((method.flags().flagsMask() & ClassFile.ACC_STATIC) == 0)\n@@ -133,1 +133,1 @@\n-                    if (instr.isInterface() && instr.opcode() != Opcode.INVOKESTATIC)\n+                    if (instr.opcode() == Opcode.INVOKEINTERFACE)\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/CodeWriter.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.internal.classfile.constantpool.*;\n-import static jdk.internal.classfile.Classfile.*;\n+import java.lang.classfile.constantpool.*;\n+import static java.lang.classfile.ClassFile.*;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ConstantWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.classfile.Instruction;\n+import java.lang.classfile.Instruction;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/InstructionDetailWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,4 +70,4 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.constantpool.*;\n-import static jdk.internal.classfile.Classfile.*;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.constantpool.*;\n+import static java.lang.classfile.ClassFile.*;\n@@ -677,1 +677,1 @@\n-            var a = cm.findAttribute(jdk.internal.classfile.Attributes.INNER_CLASSES);\n+            var a = cm.findAttribute(java.lang.classfile.Attributes.INNER_CLASSES);\n@@ -830,1 +830,1 @@\n-            ClassModel cm = Classfile.of().parse(in.readAllBytes());\n+            ClassModel cm = ClassFile.of().parse(in.readAllBytes());\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/JavapTask.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,5 +32,5 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.attribute.LocalVariableInfo;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.attribute.LocalVariableInfo;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/LocalVariableTableWriter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,5 +32,5 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.attribute.LocalVariableTypeInfo;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.attribute.LocalVariableTypeInfo;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/LocalVariableTypeTableWriter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static jdk.internal.classfile.Classfile.*;\n+import static java.lang.classfile.ClassFile.*;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/Options.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,4 +42,4 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/SourceWriter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n@@ -34,4 +34,4 @@\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.attribute.StackMapFrameInfo;\n-import jdk.internal.classfile.attribute.StackMapTableAttribute;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.StackMapFrameInfo;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n@@ -72,1 +72,1 @@\n-        if ((m.flags().flagsMask() & Classfile.ACC_STATIC) == 0) {\n+        if ((m.flags().flagsMask() & ClassFile.ACC_STATIC) == 0) {\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/StackMapWriter.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.attribute.CodeAttribute;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/TryBlockWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,5 +34,5 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.TypeAnnotation;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.TypeAnnotation;\n+import java.lang.classfile.attribute.CodeAttribute;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/TypeAnnotationWriter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import jdk.internal.javac.ParticipatesInPreview;\n+\n@@ -60,0 +62,1 @@\n+@ParticipatesInPreview\n","filename":"src\/jdk.jdeps\/share\/classes\/module-info.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,5 +37,5 @@\n-import jdk.internal.classfile.AnnotationValue;\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n@@ -69,1 +69,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(fullClassName), cb -> build(cb));\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(fullClassName), cb -> build(cb));\n@@ -83,1 +83,1 @@\n-        builder.withMethod(SET_METHOD.name(), SET_METHOD.descriptor(), Classfile.ACC_PUBLIC, methodBuilder -> methodBuilder.withCode(codeBuilder -> {\n+        builder.withMethod(SET_METHOD.name(), SET_METHOD.descriptor(), ClassFile.ACC_PUBLIC, methodBuilder -> methodBuilder.withCode(codeBuilder -> {\n@@ -104,1 +104,1 @@\n-        builder.withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, Classfile.ACC_PUBLIC, methodBuilder -> methodBuilder.withCode(codeBuilder -> {\n+        builder.withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC, methodBuilder -> methodBuilder.withCode(codeBuilder -> {\n@@ -114,1 +114,1 @@\n-        List<jdk.internal.classfile.Annotation> annotations = new ArrayList<>();\n+        List<java.lang.classfile.Annotation> annotations = new ArrayList<>();\n@@ -116,1 +116,1 @@\n-            List<jdk.internal.classfile.AnnotationElement> list = new ArrayList<>();\n+            List<java.lang.classfile.AnnotationElement> list = new ArrayList<>();\n@@ -122,1 +122,1 @@\n-                var ae = jdk.internal.classfile.AnnotationElement.of(v.getName(), av);\n+                var ae = java.lang.classfile.AnnotationElement.of(v.getName(), av);\n@@ -126,1 +126,1 @@\n-            annotations.add(jdk.internal.classfile.Annotation.of(cd, list));\n+            annotations.add(java.lang.classfile.Annotation.of(cd, list));\n@@ -133,1 +133,1 @@\n-            builder.withField(v.getName(), Bytecode.classDesc(v), Classfile.ACC_PRIVATE);\n+            builder.withField(v.getName(), Bytecode.classDesc(v), ClassFile.ACC_PRIVATE);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventClassBuilder.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -40,14 +40,14 @@\n-import jdk.internal.classfile.Annotation;\n-import jdk.internal.classfile.AnnotationElement;\n-import jdk.internal.classfile.AnnotationValue;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeBuilder.BlockCodeBuilder;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeBuilder.BlockCodeBuilder;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n@@ -193,1 +193,1 @@\n-        return Classfile.of().parse(bytes);\n+        return ClassFile.of().parse(bytes);\n@@ -399,1 +399,1 @@\n-        return Classfile.of().build(classModel.thisClass().asSymbol(), classBuilder -> {\n+        return ClassFile.of().build(classModel.thisClass().asSymbol(), classBuilder -> {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -35,4 +35,4 @@\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.components.ClassPrinter;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.components.ClassPrinter;\n@@ -161,1 +161,1 @@\n-            ClassModel classModel = Classfile.of().parse(bytes);\n+            ClassModel classModel = ClassFile.of().parse(bytes);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/Bytecode.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import jdk.internal.javac.ParticipatesInPreview;\n+\n@@ -32,0 +34,1 @@\n+@ParticipatesInPreview\n","filename":"src\/jdk.jfr\/share\/classes\/module-info.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,4 +42,4 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.MethodModel;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.MethodModel;\n@@ -371,1 +371,1 @@\n-                Classfile.of().parse(bytes).forEachElement(cle -> {\n+                ClassFile.of().parse(bytes).forEachElement(cle -> {\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jimage\/JImageTask.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n@@ -88,1 +88,1 @@\n-    ClassModel newClassReader(String path, ResourcePoolEntry resource, Classfile.Option... options) {\n+    ClassModel newClassReader(String path, ResourcePoolEntry resource, ClassFile.Option... options) {\n@@ -91,1 +91,1 @@\n-            return Classfile.of(options).parse(content);\n+            return ClassFile.of(options).parse(content);\n@@ -103,1 +103,1 @@\n-    protected ClassModel newClassReader(String path, byte[] buf, Classfile.Option... options) {\n+    protected ClassModel newClassReader(String path, byte[] buf, ClassFile.Option... options) {\n@@ -105,1 +105,1 @@\n-            return Classfile.of(options).parse(buf);\n+            return ClassFile.of(options).parse(buf);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/AbstractPlugin.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-import static jdk.internal.classfile.Classfile.*;\n+import static java.lang.classfile.ClassFile.*;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/IncludeLocalesPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n@@ -197,1 +197,1 @@\n-            ClassModel cf = Classfile.of().parse(content);\n+            ClassModel cf = ClassFile.of().parse(content);\n@@ -218,1 +218,1 @@\n-                    case Classfile.TAG_UTF8: {\n+                    case ClassFile.TAG_UTF8: {\n@@ -242,2 +242,2 @@\n-                    case Classfile.TAG_LONG:\n-                    case Classfile.TAG_DOUBLE:\n+                    case ClassFile.TAG_LONG:\n+                    case ClassFile.TAG_DOUBLE:\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StringSharingPlugin.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,7 +28,7 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.MethodTransform;\n-import jdk.internal.classfile.attribute.MethodParametersAttribute;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n-import jdk.internal.classfile.attribute.SourceDebugExtensionAttribute;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.attribute.MethodParametersAttribute;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.attribute.SourceDebugExtensionAttribute;\n@@ -68,3 +68,3 @@\n-                                Classfile.DebugElementsOption.DROP_DEBUG,\n-                                Classfile.LineNumbersOption.DROP_LINE_NUMBERS);\n-                        byte[] content = Classfile.of().transform(clm, ClassTransform\n+                                ClassFile.DebugElementsOption.DROP_DEBUG,\n+                                ClassFile.LineNumbersOption.DROP_LINE_NUMBERS);\n+                        byte[] content = ClassFile.of().transform(clm, ClassTransform\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripJavaDebugAttributesPlugin.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -77,6 +77,6 @@\n-import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.TypeKind;\n-import static jdk.internal.classfile.Classfile.*;\n-import jdk.internal.classfile.CodeBuilder;\n+import java.lang.classfile.attribute.ModulePackagesAttribute;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.TypeKind;\n+import static java.lang.classfile.ClassFile.*;\n+import java.lang.classfile.CodeBuilder;\n@@ -445,1 +445,1 @@\n-                return Classfile.of().parse(in.readAllBytes()).elementStream()\n+                return ClassFile.of().parse(in.readAllBytes()).elementStream()\n@@ -610,1 +610,1 @@\n-            return Classfile.of().build(classDesc,\n+            return ClassFile.of().build(classDesc,\n@@ -1830,1 +1830,1 @@\n-        ResourcePoolEntry e = ResourcePoolEntry.create(rn, Classfile.of().build(\n+        ResourcePoolEntry e = ResourcePoolEntry.create(rn, ClassFile.of().build(\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,7 +30,7 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.instruction.FieldInstruction;\n-import jdk.internal.classfile.CodeTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.instruction.FieldInstruction;\n+import java.lang.classfile.CodeTransform;\n@@ -104,1 +104,1 @@\n-        return Classfile.of().transform(newClassReader(path, classFile),\n+        return ClassFile.of().transform(newClassReader(path, classFile),\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/VersionPropsPlugin.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import jdk.internal.javac.ParticipatesInPreview;\n+\n@@ -54,0 +56,1 @@\n+@ParticipatesInPreview\n","filename":"src\/jdk.jlink\/share\/classes\/module-info.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,3 +34,3 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.instruction.BranchInstruction;\n@@ -81,1 +81,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -91,4 +91,4 @@\n-        return new ClassBytecodes(CANCEL_CLASS, Classfile.of().build(CD_Cancel, clb ->\n-             clb.withFlags(Classfile.ACC_PUBLIC)\n-                .withField(\"allStop\", ConstantDescs.CD_boolean, Classfile.ACC_PUBLIC | Classfile.ACC_STATIC | Classfile.ACC_VOLATILE)\n-                .withMethodBody(\"stopCheck\", ConstantDescs.MTD_void, Classfile.ACC_PUBLIC | Classfile.ACC_STATIC, cob ->\n+        return new ClassBytecodes(CANCEL_CLASS, ClassFile.of().build(CD_Cancel, clb ->\n+             clb.withFlags(ClassFile.ACC_PUBLIC)\n+                .withField(\"allStop\", ConstantDescs.CD_boolean, ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC | ClassFile.ACC_VOLATILE)\n+                .withMethodBody(\"stopCheck\", ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC, cob ->\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import jdk.internal.javac.ParticipatesInPreview;\n+\n@@ -66,0 +68,1 @@\n+@ParticipatesInPreview\n","filename":"src\/jdk.jshell\/share\/classes\/module-info.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @enablePreview\n@@ -39,3 +40,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n@@ -90,7 +88,7 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -604,1 +602,1 @@\n-                    return Classfile.of().parse(fs.getPath(parts[1]));\n+                    return ClassFile.of().parse(fs.getPath(parts[1]));\n@@ -608,1 +606,1 @@\n-        return Classfile.of().parse(Paths.get(uri));\n+        return ClassFile.of().parse(Paths.get(uri));\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaMethod.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -37,4 +37,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.misc\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/framework\/VMVersionTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,4 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.module\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.module\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/securityManager\/ClassLoaderTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+ * @enablePreview\n@@ -55,3 +56,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n","filename":"test\/jdk\/java\/lang\/ModuleTests\/AnnotationsTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.internal.classfile.ClassHierarchyResolver;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassFile;\n@@ -53,1 +53,1 @@\n-import static jdk.internal.classfile.Classfile.*;\n+import static java.lang.classfile.ClassFile.*;\n@@ -59,3 +59,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n+ * @enablePreview\n@@ -290,1 +288,1 @@\n-        var classfile = Classfile.of(Classfile.ClassHierarchyResolverOption.of(ClassHierarchyResolver.defaultResolver().orElse(\n+        var classfile = ClassFile.of(ClassFile.ClassHierarchyResolverOption.of(ClassHierarchyResolver.defaultResolver().orElse(\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/BasicTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -42,1 +42,1 @@\n-import static jdk.internal.classfile.Classfile.*;\n+import static java.lang.classfile.ClassFile.*;\n@@ -49,3 +49,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n+ * @enablePreview\n@@ -88,1 +86,1 @@\n-        var cf = Classfile.of();\n+        var cf = ClassFile.of();\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/WrapperHiddenClassTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,3 +26,3 @@\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.TypeKind;\n@@ -46,1 +46,1 @@\n-                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, Classfile.ACC_PUBLIC,\n+                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC,\n@@ -58,1 +58,1 @@\n-        byte[] byteArray = Classfile.of().build(genClassDesc, classBuilder -> {\n+        byte[] byteArray = ClassFile.of().build(genClassDesc, classBuilder -> {\n@@ -62,1 +62,1 @@\n-                            Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                            ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -105,1 +105,1 @@\n-        byte[] bytes = Classfile.of().build(genClassDesc, classBuilder -> {\n+        byte[] bytes = ClassFile.of().build(genClassDesc, classBuilder -> {\n@@ -108,1 +108,1 @@\n-                    Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                    ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n","filename":"test\/jdk\/java\/lang\/invoke\/common\/test\/java\/lang\/invoke\/lib\/InstructionHelper.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,5 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/BootstrapMethodJumboArgsTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,5 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyBSMException.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,5 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyBSMInvocation.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,5 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyBSMValidationTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,5 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -39,1 +35,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -83,2 +79,2 @@\n-        byte[] byteArray = Classfile.of().build(ClassDesc.of(genClassName), classBuilder -> classBuilder\n-                .withFlags(Classfile.ACC_INTERFACE + Classfile.ACC_ABSTRACT)\n+        byte[] byteArray = ClassFile.of().build(ClassDesc.of(genClassName), classBuilder -> classBuilder\n+                .withFlags(ClassFile.ACC_INTERFACE + ClassFile.ACC_ABSTRACT)\n@@ -87,1 +83,1 @@\n-                .withMethod(\"y\", MethodTypeDesc.of(ConstantDescs.CD_String), Classfile.ACC_PUBLIC, methodBuilder -> methodBuilder\n+                .withMethod(\"y\", MethodTypeDesc.of(ConstantDescs.CD_String), ClassFile.ACC_PUBLIC, methodBuilder -> methodBuilder\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyInterfaceWithOverpassMethods.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,5 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyNameValidationTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,5 +29,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -86,1 +82,1 @@\n-\/\/        byte[] byteArray = Classfile.of().build(ClassDesc.of(genClassName), classBuilder -> classBuilder\n+\/\/        byte[] byteArray = ClassFile.of().build(ClassDesc.of(genClassName), classBuilder -> classBuilder\n@@ -89,1 +85,1 @@\n-\/\/                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, Classfile.ACC_PUBLIC, methodBuilder -> methodBuilder\n+\/\/                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC, methodBuilder -> methodBuilder\n@@ -97,1 +93,1 @@\n-\/\/                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+\/\/                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -141,1 +137,1 @@\n-\/\/                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+\/\/                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -171,1 +167,1 @@\n-\/\/                        Classfile.ACC_PUBLIC + Classfile.ACC_PUBLIC, methodBuilder -> methodBuilder\n+\/\/                        ClassFile.ACC_PUBLIC + ClassFile.ACC_PUBLIC, methodBuilder -> methodBuilder\n@@ -187,1 +183,1 @@\n-\/\/                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+\/\/                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -205,1 +201,1 @@\n-\/\/                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+\/\/                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -223,1 +219,1 @@\n-\/\/                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+\/\/                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyNestedTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,5 +29,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -38,1 +34,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -111,1 +107,1 @@\n-        byte[] byteArray = Classfile.of().build(ClassDesc.of(genClassName), classBuilder -> classBuilder\n+        byte[] byteArray = ClassFile.of().build(ClassDesc.of(genClassName), classBuilder -> classBuilder\n@@ -114,1 +110,1 @@\n-                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, Classfile.ACC_PUBLIC,\n+                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC,\n@@ -124,1 +120,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -135,1 +131,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -146,1 +142,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -157,1 +153,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -168,1 +164,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -179,1 +175,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -190,1 +186,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -201,1 +197,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -212,1 +208,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -223,1 +219,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -234,1 +230,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -245,1 +241,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -256,1 +252,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -267,1 +263,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -278,1 +274,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyRepeatFailedResolution.java","additions":19,"deletions":23,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -28,5 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -37,1 +33,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -111,1 +107,1 @@\n-        byte[] byteArray = Classfile.of().build(ClassDesc.of(genClassName), classBuilder -> classBuilder\n+        byte[] byteArray = ClassFile.of().build(ClassDesc.of(genClassName), classBuilder -> classBuilder\n@@ -114,1 +110,1 @@\n-                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, Classfile.ACC_PUBLIC,\n+                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC,\n@@ -124,1 +120,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -135,1 +131,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -146,1 +142,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -157,1 +153,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -168,1 +164,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -179,1 +175,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -190,1 +186,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -201,1 +197,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -212,1 +208,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -223,1 +219,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -234,1 +230,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -245,1 +241,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -256,1 +252,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -267,1 +263,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -278,1 +274,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyReturnPrimitiveTest.java","additions":19,"deletions":23,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -30,5 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyStaticArgumentsTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,5 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyTypeValidationTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,5 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -40,2 +36,2 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeBuilder;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n@@ -73,1 +69,1 @@\n-        byte[] bytes = Classfile.of().build(cd, classBuilder -> classBuilder\n+        byte[] bytes = ClassFile.of().build(cd, classBuilder -> classBuilder\n@@ -76,1 +72,1 @@\n-                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, Classfile.ACC_PUBLIC,\n+                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC,\n@@ -84,1 +80,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n@@ -152,1 +148,1 @@\n-        byte[] bytes = Classfile.of().build(cd, classBuilder -> classBuilder\n+        byte[] bytes = ClassFile.of().build(cd, classBuilder -> classBuilder\n@@ -155,1 +151,1 @@\n-                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, Classfile.ACC_PUBLIC,\n+                .withMethod(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC,\n@@ -163,1 +159,1 @@\n-                        Classfile.ACC_PUBLIC + Classfile.ACC_STATIC, methodBuilder -> methodBuilder\n+                        ClassFile.ACC_PUBLIC + ClassFile.ACC_STATIC, methodBuilder -> methodBuilder\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyWithGarbageTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -30,5 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/CondyWrongType.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,5 +30,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/jdk\/java\/lang\/invoke\/condy\/ConstantBootstrapsTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,4 +26,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.module\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.module\n","filename":"test\/jdk\/java\/lang\/module\/ClassFileVersionsTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n@@ -27,3 +28,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n","filename":"test\/jdk\/java\/lang\/module\/ConfigurationTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n@@ -28,3 +29,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n@@ -65,2 +63,2 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.attribute.ModuleAttribute;\n@@ -1374,1 +1372,1 @@\n-        ByteBuffer bb = ByteBuffer.wrap(Classfile.of().buildModule(\n+        ByteBuffer bb = ByteBuffer.wrap(ClassFile.of().buildModule(\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,4 +26,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.module\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.module\n","filename":"test\/jdk\/java\/lang\/module\/ModuleFinderTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @enablePreview\n@@ -27,3 +28,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n","filename":"test\/jdk\/java\/lang\/module\/ModuleNamesTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,4 +26,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.module\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.module\n","filename":"test\/jdk\/java\/lang\/module\/MultiReleaseJarTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -49,1 +49,0 @@\n- * @modules java.base\/jdk.internal.classfile\n@@ -371,1 +370,1 @@\n-        return Classfile.of().build(ClassDesc.of(\"C\"), clb -> {\n+        return ClassFile.of().build(ClassDesc.of(\"C\"), clb -> {\n@@ -375,1 +374,1 @@\n-                               Classfile.ACC_PUBLIC,\n+                               ClassFile.ACC_PUBLIC,\n","filename":"test\/jdk\/java\/lang\/runtime\/SwitchBootstrapsTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -50,4 +50,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.module\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.module\n","filename":"test\/jdk\/java\/security\/Provider\/SecurityProviderModularTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ * @enablePreview\n@@ -37,5 +38,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/java\/time\/nontestng\/java\/time\/chrono\/HijrahConfigTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,4 +46,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.module\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.module\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularClientTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,4 +45,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.module\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.module\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularDefaultHandlerTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile AccessFlags.\n+ * @summary Testing ClassFile AccessFlags.\n@@ -36,1 +36,1 @@\n-import jdk.internal.classfile.AccessFlags;\n+import java.lang.classfile.AccessFlags;\n","filename":"test\/jdk\/jdk\/classfile\/AccessFlagsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile Code Adaptation.\n+ * @summary Testing ClassFile Code Adaptation.\n@@ -38,3 +38,3 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n@@ -44,1 +44,1 @@\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.instruction.ConstantInstruction;\n@@ -59,1 +59,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -79,1 +79,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -88,1 +88,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -115,1 +115,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/AdaptCodeTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile advanced transformations.\n+ * @summary Testing ClassFile advanced transformations.\n@@ -32,6 +32,6 @@\n-import jdk.internal.classfile.ClassHierarchyResolver;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.TypeKind;\n@@ -39,2 +39,2 @@\n-import jdk.internal.classfile.components.ClassRemapper;\n-import jdk.internal.classfile.components.CodeLocalsShifter;\n+import java.lang.classfile.components.ClassRemapper;\n+import java.lang.classfile.components.CodeLocalsShifter;\n@@ -48,8 +48,8 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.attribute.ModuleAttribute;\n@@ -57,3 +57,3 @@\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n-import jdk.internal.classfile.instruction.ReturnInstruction;\n-import jdk.internal.classfile.instruction.StoreInstruction;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.instruction.ReturnInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n@@ -61,1 +61,1 @@\n-import jdk.internal.classfile.components.CodeRelabeler;\n+import java.lang.classfile.components.CodeRelabeler;\n@@ -63,1 +63,1 @@\n-import jdk.internal.classfile.components.ClassPrinter;\n+import java.lang.classfile.components.ClassPrinter;\n@@ -76,1 +76,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -115,1 +115,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -170,1 +170,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -191,1 +191,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -238,1 +238,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -303,1 +303,1 @@\n-        return Classfile.of().transform(target,\n+        return ClassFile.of().transform(target,\n","filename":"test\/jdk\/jdk\/classfile\/AdvancedTransformationsTest.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile annotation model.\n+ * @summary Testing ClassFile annotation model.\n@@ -29,2 +29,2 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Attributes;\n@@ -56,1 +56,1 @@\n-        var model = Classfile.of().parse(fileBytes);\n+        var model = ClassFile.of().parse(fileBytes);\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationModelTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile annotations.\n+ * @summary Testing ClassFile annotations.\n@@ -39,3 +39,3 @@\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n@@ -128,1 +128,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -174,1 +174,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile arrays.\n+ * @summary Testing ClassFile arrays.\n@@ -29,9 +29,9 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction;\n-import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.instruction.NewMultiArrayInstruction;\n+import java.lang.classfile.instruction.NewPrimitiveArrayInstruction;\n+import java.lang.classfile.instruction.NewReferenceArrayInstruction;\n@@ -54,1 +54,1 @@\n-        ClassModel cm = Classfile.of().parse(testClassPath);\n+        ClassModel cm = ClassFile.of().parse(testClassPath);\n","filename":"test\/jdk\/jdk\/classfile\/ArrayTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile bootstrap methods.\n+ * @summary Testing ClassFile bootstrap methods.\n@@ -38,1 +38,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -40,6 +40,6 @@\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n-import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.LoadableConstantEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import java.lang.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.constantpool.ConstantDynamicEntry;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.LoadableConstantEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.constantpool.MethodHandleEntry;\n@@ -61,1 +61,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/BSMTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile complex basic blocks affecting SM generator.\n+ * @summary Testing ClassFile complex basic blocks affecting SM generator.\n@@ -31,1 +31,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -58,1 +58,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/BasicBlockTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,6 +30,6 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.attribute.MethodParameterInfo;\n-import jdk.internal.classfile.attribute.MethodParametersAttribute;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.attribute.MethodParameterInfo;\n+import java.lang.classfile.attribute.MethodParametersAttribute;\n@@ -52,1 +52,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/BoundAttributeTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile builder blocks.\n+ * @summary Testing ClassFile builder blocks.\n@@ -39,1 +39,1 @@\n-import jdk.internal.classfile.AccessFlags;\n+import java.lang.classfile.AccessFlags;\n@@ -41,4 +41,4 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n@@ -62,1 +62,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n@@ -81,1 +81,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n@@ -104,1 +104,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n@@ -123,1 +123,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n@@ -141,1 +141,1 @@\n-        Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+        ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n@@ -161,1 +161,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n@@ -181,1 +181,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n@@ -200,1 +200,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n@@ -225,1 +225,1 @@\n-        Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+        ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n@@ -246,2 +246,2 @@\n-        Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n-            cb.withMethod(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), Classfile.ACC_STATIC,\n+        ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+            cb.withMethod(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), ClassFile.ACC_STATIC,\n@@ -263,2 +263,2 @@\n-        Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n-            cb.withMethod(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), Classfile.ACC_STATIC,\n+        ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+            cb.withMethod(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), ClassFile.ACC_STATIC,\n@@ -284,2 +284,2 @@\n-        Classfile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n-            cb.withMethod(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), Classfile.ACC_STATIC,\n+        ClassFile.of().build(ClassDesc.of(\"Foo\"), cb -> {\n+            cb.withMethod(\"foo\", MethodTypeDesc.ofDescriptor(\"(IJI)V\"), ClassFile.ACC_STATIC,\n","filename":"test\/jdk\/jdk\/classfile\/BuilderBlockTest.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile builder parameters.\n+ * @summary Testing ClassFile builder parameters.\n@@ -32,1 +32,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -36,1 +36,1 @@\n-import static jdk.internal.classfile.Classfile.ACC_STATIC;\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n@@ -45,1 +45,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/BuilderParamTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile builder blocks.\n+ * @summary Testing ClassFile builder blocks.\n@@ -30,8 +30,8 @@\n-import jdk.internal.classfile.AccessFlags;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CompoundElement;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.instruction.BranchInstruction;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.AccessFlags;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CompoundElement;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.instruction.ExceptionCatch;\n@@ -174,1 +174,1 @@\n-        boolean anyGotos = Classfile.of().parse(bytes).methods().stream()\n+        boolean anyGotos = ClassFile.of().parse(bytes).methods().stream()\n@@ -185,1 +185,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"C\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"C\"), cb -> {\n@@ -216,1 +216,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"C\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"C\"), cb -> {\n@@ -279,1 +279,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"C\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"C\"), cb -> {\n","filename":"test\/jdk\/jdk\/classfile\/BuilderTryCatchTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,7 +32,7 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.MethodTransform;\n-import jdk.internal.classfile.attribute.MethodParametersAttribute;\n-import jdk.internal.classfile.attribute.SignatureAttribute;\n-import jdk.internal.classfile.components.ClassRemapper;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.attribute.MethodParametersAttribute;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.components.ClassRemapper;\n@@ -50,1 +50,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/ClassBuildingTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,7 +26,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.impl\n- *          java.base\/jdk.internal.classfile.impl.verifier\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -36,1 +31,1 @@\n- * @summary Testing Classfile class hierarchy resolution SPI.\n+ * @summary Testing ClassFile class hierarchy resolution SPI.\n@@ -50,1 +45,1 @@\n-import jdk.internal.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassHierarchyResolver;\n@@ -52,3 +47,3 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.MethodModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.MethodModel;\n@@ -129,2 +124,2 @@\n-        var classModel = Classfile.of().parse(path);\n-        byte[] newBytes = Classfile.of(Classfile.ClassHierarchyResolverOption.of(res)).transform(classModel,\n+        var classModel = ClassFile.of().parse(path);\n+        byte[] newBytes = ClassFile.of(ClassFile.ClassHierarchyResolverOption.of(res)).transform(classModel,\n@@ -144,1 +139,1 @@\n-        var errors = Classfile.of().parse(newBytes).verify(null);\n+        var errors = ClassFile.of().parse(newBytes).verify(null);\n","filename":"test\/jdk\/jdk\/classfile\/ClassHierarchyInfoTest.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile ClassPrinter.\n+ * @summary Testing ClassFile ClassPrinter.\n@@ -35,3 +35,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.components.ClassPrinter;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.components.ClassPrinter;\n@@ -44,1 +44,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -47,1 +47,1 @@\n-                .withFlags(Classfile.ACC_PUBLIC)\n+                .withFlags(ClassFile.ACC_PUBLIC)\n@@ -52,2 +52,2 @@\n-                        InnerClassInfo.of(ClassDesc.of(\"Phee\"), Optional.of(ClassDesc.of(\"Phoo\")), Optional.of(\"InnerName\"), Classfile.ACC_PROTECTED),\n-                        InnerClassInfo.of(ClassDesc.of(\"Phoo\"), Optional.empty(), Optional.empty(), Classfile.ACC_PRIVATE)))\n+                        InnerClassInfo.of(ClassDesc.of(\"Phee\"), Optional.of(ClassDesc.of(\"Phoo\")), Optional.of(\"InnerName\"), ClassFile.ACC_PROTECTED),\n+                        InnerClassInfo.of(ClassDesc.of(\"Phoo\"), Optional.empty(), Optional.empty(), ClassFile.ACC_PRIVATE)))\n@@ -69,1 +69,1 @@\n-                        .withFlags(Classfile.ACC_PRIVATE)\n+                        .withFlags(ClassFile.ACC_PRIVATE)\n@@ -71,1 +71,1 @@\n-                .withMethod(\"m\", MethodTypeDesc.of(ConstantDescs.CD_Void, ConstantDescs.CD_boolean, ConstantDescs.CD_Throwable), Classfile.ACC_PROTECTED, mb -> mb\n+                .withMethod(\"m\", MethodTypeDesc.of(ConstantDescs.CD_Void, ConstantDescs.CD_boolean, ConstantDescs.CD_Throwable), ClassFile.ACC_PROTECTED, mb -> mb\n","filename":"test\/jdk\/jdk\/classfile\/ClassPrinterTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile constant pool cloning.\n+ * @summary Testing ClassFile constant pool cloning.\n@@ -29,23 +29,23 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassReader;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantDynamicEntry;\n-import jdk.internal.classfile.constantpool.DoubleEntry;\n-import jdk.internal.classfile.constantpool.DynamicConstantPoolEntry;\n-import jdk.internal.classfile.constantpool.FieldRefEntry;\n-import jdk.internal.classfile.constantpool.FloatEntry;\n-import jdk.internal.classfile.constantpool.IntegerEntry;\n-import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n-import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.internal.classfile.constantpool.LongEntry;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n-import jdk.internal.classfile.constantpool.MethodRefEntry;\n-import jdk.internal.classfile.constantpool.MethodTypeEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.constantpool.PackageEntry;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n-import jdk.internal.classfile.constantpool.StringEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassReader;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantDynamicEntry;\n+import java.lang.classfile.constantpool.DoubleEntry;\n+import java.lang.classfile.constantpool.DynamicConstantPoolEntry;\n+import java.lang.classfile.constantpool.FieldRefEntry;\n+import java.lang.classfile.constantpool.FloatEntry;\n+import java.lang.classfile.constantpool.IntegerEntry;\n+import java.lang.classfile.constantpool.InterfaceMethodRefEntry;\n+import java.lang.classfile.constantpool.InvokeDynamicEntry;\n+import java.lang.classfile.constantpool.LongEntry;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.constantpool.MethodHandleEntry;\n+import java.lang.classfile.constantpool.MethodRefEntry;\n+import java.lang.classfile.constantpool.MethodTypeEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.constantpool.PackageEntry;\n+import java.lang.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.constantpool.StringEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -53,3 +53,3 @@\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.BootstrapMethodEntry;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.BootstrapMethodEntry;\n+import java.lang.classfile.constantpool.ConstantPool;\n@@ -72,1 +72,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/ConstantPoolCopyTest.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile on small Corpus.\n+ * @summary Testing ClassFile on small Corpus.\n@@ -55,8 +55,8 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -65,3 +65,3 @@\n-import jdk.internal.classfile.instruction.LineNumber;\n-import jdk.internal.classfile.instruction.LocalVariable;\n-import jdk.internal.classfile.instruction.LocalVariableType;\n+import java.lang.classfile.instruction.LineNumber;\n+import java.lang.classfile.instruction.LocalVariable;\n+import java.lang.classfile.instruction.LocalVariableType;\n@@ -80,1 +80,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -147,2 +147,2 @@\n-                                     ? Classfile.of(Classfile.StackMapsOption.DROP_STACK_MAPS)\n-                                                .transform(Classfile.of().parse(bytes), m.classTransform)\n+                                     ? ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS)\n+                                                .transform(ClassFile.of().parse(bytes), m.classTransform)\n@@ -198,1 +198,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -214,1 +214,1 @@\n-        byte[] noStackMaps = Classfile.of(Classfile.StackMapsOption.DROP_STACK_MAPS)\n+        byte[] noStackMaps = ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS)\n@@ -247,1 +247,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -272,1 +272,1 @@\n-        var cf = Classfile.of().parse(bytes);\n+        var cf = ClassFile.of().parse(bytes);\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile handling JSR and RET instructions.\n+ * @summary Testing ClassFile handling JSR and RET instructions.\n@@ -33,2 +33,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.instruction.DiscontinuedInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.instruction.DiscontinuedInstruction;\n@@ -39,1 +39,1 @@\n-import static jdk.internal.classfile.Classfile.*;\n+import static java.lang.classfile.ClassFile.*;\n@@ -48,1 +48,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -97,1 +97,1 @@\n-                Classfile.of(Classfile.StackMapsOption.GENERATE_STACK_MAPS)\n+                ClassFile.of(ClassFile.StackMapsOption.GENERATE_STACK_MAPS)\n","filename":"test\/jdk\/jdk\/classfile\/DiscontinuedInstructionsTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -36,3 +36,3 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.Signature;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.Signature;\n@@ -61,1 +61,1 @@\n-        var cc = Classfile.of(Classfile.DeadLabelsOption.DROP_DEAD_LABELS);\n+        var cc = ClassFile.of(ClassFile.DeadLabelsOption.DROP_DEAD_LABELS);\n@@ -77,1 +77,1 @@\n-        assertThrows(IllegalArgumentException.class, () -> Classfile.of().build(ClassDesc.of(\"cls\"), clb ->\n+        assertThrows(IllegalArgumentException.class, () -> ClassFile.of().build(ClassDesc.of(\"cls\"), clb ->\n","filename":"test\/jdk\/jdk\/classfile\/FilterDeadLabelsTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile LDC instructions.\n+ * @summary Testing ClassFile LDC instructions.\n@@ -33,3 +33,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.StringEntry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.StringEntry;\n@@ -40,3 +40,3 @@\n-import static jdk.internal.classfile.Opcode.*;\n-import static jdk.internal.classfile.TypeKind.VoidType;\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n+import static java.lang.classfile.Opcode.*;\n+import static java.lang.classfile.TypeKind.VoidType;\n+import java.lang.classfile.instruction.ConstantInstruction;\n@@ -47,1 +47,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/LDCTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile limits.\n+ * @summary Testing ClassFile limits.\n@@ -32,1 +32,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -41,1 +41,1 @@\n-        Classfile.of().build(ClassDesc.of(\"BigClass\"), cb -> {\n+        ClassFile.of().build(ClassDesc.of(\"BigClass\"), cb -> {\n@@ -50,1 +50,1 @@\n-        assertThrows(IllegalArgumentException.class, () -> Classfile.of().build(ClassDesc.of(\"BigClass\"), cb -> {\n+        assertThrows(IllegalArgumentException.class, () -> ClassFile.of().build(ClassDesc.of(\"BigClass\"), cb -> {\n@@ -59,1 +59,1 @@\n-        assertThrows(IllegalArgumentException.class, () -> Classfile.of().build(ClassDesc.of(\"BigClass\"), cb -> cb.withMethodBody(\n+        assertThrows(IllegalArgumentException.class, () -> ClassFile.of().build(ClassDesc.of(\"BigClass\"), cb -> cb.withMethodBody(\n@@ -70,1 +70,1 @@\n-        assertThrows(IllegalArgumentException.class, () -> Classfile.of().build(ClassDesc.of(\"EmptyClass\"), cb -> cb.withMethodBody(\n+        assertThrows(IllegalArgumentException.class, () -> ClassFile.of().build(ClassDesc.of(\"EmptyClass\"), cb -> cb.withMethodBody(\n@@ -76,1 +76,1 @@\n-        var cf = Classfile.of();\n+        var cf = ClassFile.of();\n@@ -82,0 +82,6 @@\n+\n+    @Test\n+    void testSupportedClassVersion() {\n+        var cf = ClassFile.of();\n+        assertThrows(IllegalArgumentException.class, () -> cf.parse(cf.build(ClassDesc.of(\"ClassFromFuture\"), cb -> cb.withVersion(ClassFile.latestMajorVersion() + 1, 0))));\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile low adaptation.\n+ * @summary Testing ClassFile low adaptation.\n@@ -38,1 +38,1 @@\n-import jdk.internal.classfile.AccessFlags;\n+import java.lang.classfile.AccessFlags;\n@@ -40,4 +40,4 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.TypeKind;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.TypeKind;\n@@ -45,1 +45,1 @@\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n@@ -57,1 +57,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/LowAdaptTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile low JCov attributes.\n+ * @summary Testing ClassFile low JCov attributes.\n@@ -35,8 +35,8 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -62,1 +62,1 @@\n-        this.classLow = Classfile.of().parse(path);\n+        this.classLow = ClassFile.of().parse(path);\n","filename":"test\/jdk\/jdk\/classfile\/LowJCovAttributeTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile low module attribute.\n+ * @summary Testing ClassFile low module attribute.\n@@ -35,9 +35,9 @@\n-import jdk.internal.classfile.Attribute;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n-import jdk.internal.classfile.constantpool.PackageEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.Attribute;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.constantpool.PackageEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -69,1 +69,1 @@\n-            ClassModel classLow = Classfile.of().parse(path);\n+            ClassModel classLow = ClassFile.of().parse(path);\n","filename":"test\/jdk\/jdk\/classfile\/LowModuleTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile local variable table.\n+ * @summary Testing ClassFile local variable table.\n@@ -32,1 +32,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -44,7 +44,7 @@\n-import jdk.internal.classfile.AccessFlags;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n-import jdk.internal.classfile.instruction.LocalVariable;\n-import jdk.internal.classfile.instruction.LocalVariableType;\n+import java.lang.classfile.AccessFlags;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.instruction.LocalVariable;\n+import java.lang.classfile.instruction.LocalVariableType;\n@@ -63,3 +63,3 @@\n-import static jdk.internal.classfile.Opcode.*;\n-import static jdk.internal.classfile.Opcode.INVOKEVIRTUAL;\n-import static jdk.internal.classfile.TypeKind.VoidType;\n+import static java.lang.classfile.Opcode.*;\n+import static java.lang.classfile.Opcode.INVOKEVIRTUAL;\n+import static java.lang.classfile.TypeKind.VoidType;\n@@ -82,1 +82,1 @@\n-        ClassModel c = Classfile.of().parse(fileBytes);\n+        ClassModel c = ClassFile.of().parse(fileBytes);\n@@ -107,1 +107,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -119,1 +119,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -192,1 +192,1 @@\n-        ClassModel c = Classfile.of().parse(fileBytes);\n+        ClassModel c = ClassFile.of().parse(fileBytes);\n@@ -232,1 +232,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -246,1 +246,1 @@\n-                          Classfile.ACC_PUBLIC,\n+                          ClassFile.ACC_PUBLIC,\n@@ -305,1 +305,1 @@\n-        ClassModel c = Classfile.of(Classfile.DebugElementsOption.DROP_DEBUG).parse(fileBytes);\n+        ClassModel c = ClassFile.of(ClassFile.DebugElementsOption.DROP_DEBUG).parse(fileBytes);\n","filename":"test\/jdk\/jdk\/classfile\/LvtTest.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile massive class adaptation.\n+ * @summary Testing ClassFile massive class adaptation.\n@@ -30,5 +30,5 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.MethodModel;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.MethodModel;\n@@ -77,1 +77,1 @@\n-        byte[] newBytes = adaptCopy(Classfile.of().parse(bytes));\n+        byte[] newBytes = adaptCopy(ClassFile.of().parse(bytes));\n@@ -83,1 +83,1 @@\n-        return Classfile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transform(cm, (cb, ce) -> {\n","filename":"test\/jdk\/jdk\/classfile\/MassAdaptCopyCodeTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile massive class adaptation.\n+ * @summary Testing ClassFile massive class adaptation.\n@@ -31,9 +31,9 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -97,1 +97,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/MassAdaptCopyPrimitiveMatchCodeTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile building module.\n+ * @summary Testing ClassFile building module.\n@@ -29,10 +29,10 @@\n-import jdk.internal.classfile.*;\n-\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.ModuleExportInfo;\n-import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.internal.classfile.attribute.ModuleOpenInfo;\n-import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n-import jdk.internal.classfile.attribute.ModuleProvideInfo;\n-import jdk.internal.classfile.attribute.ModuleRequireInfo;\n-import jdk.internal.classfile.Attributes;\n+import java.lang.classfile.*;\n+\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.ModuleExportInfo;\n+import java.lang.classfile.attribute.ModuleMainClassAttribute;\n+import java.lang.classfile.attribute.ModuleOpenInfo;\n+import java.lang.classfile.attribute.ModulePackagesAttribute;\n+import java.lang.classfile.attribute.ModuleProvideInfo;\n+import java.lang.classfile.attribute.ModuleRequireInfo;\n+import java.lang.classfile.Attributes;\n@@ -65,1 +65,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -100,1 +100,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -198,1 +198,1 @@\n-        ClassModel m = Classfile.of().parse(Paths.get(URI.create(ModuleBuilderTest.class.getResource(\"ModuleBuilderTest.class\").toString())));\n+        ClassModel m = ClassFile.of().parse(Paths.get(URI.create(ModuleBuilderTest.class.getResource(\"ModuleBuilderTest.class\").toString())));\n","filename":"test\/jdk\/jdk\/classfile\/ModuleBuilderTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile class writing and reading.\n+ * @summary Testing ClassFile class writing and reading.\n@@ -34,1 +34,1 @@\n-import jdk.internal.classfile.AccessFlags;\n+import java.lang.classfile.AccessFlags;\n@@ -36,7 +36,7 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n@@ -46,7 +46,7 @@\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n-import jdk.internal.classfile.instruction.StoreInstruction;\n-import jdk.internal.classfile.instruction.BranchInstruction;\n-import jdk.internal.classfile.instruction.LoadInstruction;\n-import jdk.internal.classfile.instruction.OperatorInstruction;\n-import jdk.internal.classfile.instruction.FieldInstruction;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n+import java.lang.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.OperatorInstruction;\n+import java.lang.classfile.instruction.FieldInstruction;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -58,1 +58,1 @@\n-import static jdk.internal.classfile.Opcode.*;\n+import static java.lang.classfile.Opcode.*;\n@@ -64,1 +64,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/OneToOneTest.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile constant instruction opcodes.\n+ * @summary Testing ClassFile constant instruction opcodes.\n@@ -35,2 +35,2 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Opcode;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Opcode;\n@@ -40,1 +40,1 @@\n-import static jdk.internal.classfile.Opcode.*;\n+import static java.lang.classfile.Opcode.*;\n@@ -106,1 +106,1 @@\n-        Classfile.of().build(ClassDesc.of(\"MyClass\"),\n+        ClassFile.of().build(ClassDesc.of(\"MyClass\"),\n@@ -123,1 +123,1 @@\n-        Classfile.of().build(ClassDesc.of(\"MyClass\"),\n+        ClassFile.of().build(ClassDesc.of(\"MyClass\"),\n","filename":"test\/jdk\/jdk\/classfile\/OpcodesValidationTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary Testing Classfile options on small Corpus.\n+ * @summary Testing ClassFile options on small Corpus.\n@@ -47,10 +47,1 @@\n-import jdk.internal.classfile.AttributeMapper;\n-import jdk.internal.classfile.AttributedElement;\n-import jdk.internal.classfile.BufWriter;\n-import jdk.internal.classfile.ClassReader;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassfileElement;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.CompoundElement;\n-import jdk.internal.classfile.CustomAttribute;\n+import java.lang.classfile.*;\n@@ -75,3 +66,3 @@\n-        testNoUnstable(path, Classfile.of().parse(\n-                Classfile.of(Classfile.AttributesProcessingOption.DROP_UNSTABLE_ATRIBUTES).transform(\n-                            Classfile.of().parse(path),\n+        testNoUnstable(path, ClassFile.of().parse(\n+                ClassFile.of(ClassFile.AttributesProcessingOption.DROP_UNSTABLE_ATRIBUTES).transform(\n+                            ClassFile.of().parse(path),\n@@ -113,1 +104,1 @@\n-        var classBytes = Classfile.of(Classfile.AttributeMapperOption.of(e -> {\n+        var classBytes = ClassFile.of(ClassFile.AttributeMapperOption.of(e -> {\n@@ -118,1 +109,1 @@\n-        assertFalse(Classfile.of().parse(classBytes).attributes().isEmpty());\n+        assertFalse(ClassFile.of().parse(classBytes).attributes().isEmpty());\n@@ -121,3 +112,3 @@\n-        assertTrue(Classfile.of().parse(\n-                Classfile.of(Classfile.AttributesProcessingOption.DROP_UNKNOWN_ATTRIBUTES).transform(\n-                        Classfile.of().parse(classBytes),\n+        assertTrue(ClassFile.of().parse(\n+                ClassFile.of(ClassFile.AttributesProcessingOption.DROP_UNKNOWN_ATTRIBUTES).transform(\n+                        ClassFile.of().parse(classBytes),\n@@ -127,1 +118,1 @@\n-    void testNoUnstable(Path path, ClassfileElement e) {\n+    void testNoUnstable(Path path, ClassFileElement e) {\n@@ -131,1 +122,1 @@\n-        if (e instanceof CompoundElement ce) ce.forEachElement(ee -> testNoUnstable(path, (ClassfileElement)ee));\n+        if (e instanceof CompoundElement ce) ce.forEachElement(ee -> testNoUnstable(path, (ClassFileElement)ee));\n","filename":"test\/jdk\/jdk\/classfile\/OptionsTest.java","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -23,1 +23,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -29,1 +29,1 @@\n-import static jdk.internal.classfile.Classfile.*;\n+import static java.lang.classfile.ClassFile.*;\n@@ -36,1 +36,1 @@\n- * @summary Ensures Classfile.PREVIEW_MINOR_VERSION equals that of classes with\n+ * @summary Ensures ClassFile.PREVIEW_MINOR_VERSION equals that of classes with\n@@ -45,1 +45,1 @@\n-        var cf = Classfile.of();\n+        var cf = ClassFile.of();\n@@ -54,2 +54,2 @@\n-        var cm = Classfile.of().parse(bytes);\n-        assertEquals(Classfile.PREVIEW_MINOR_VERSION, cm.minorVersion());\n+        var cm = ClassFile.of().parse(bytes);\n+        assertEquals(ClassFile.PREVIEW_MINOR_VERSION, cm.minorVersion());\n","filename":"test\/jdk\/jdk\/classfile\/PreviewMinorVersionTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -46,1 +46,1 @@\n-import static jdk.internal.classfile.Classfile.ACC_PUBLIC;\n+import static java.lang.classfile.ClassFile.ACC_PUBLIC;\n@@ -54,1 +54,1 @@\n-        Class<?> a = lookup.defineClass(Classfile.of().build(ape, clb -> {\n+        Class<?> a = lookup.defineClass(ClassFile.of().build(ape, clb -> {\n","filename":"test\/jdk\/jdk\/classfile\/PrimitiveClassConstantTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile short to long jumps extension.\n+ * @summary Testing ClassFile short to long jumps extension.\n@@ -34,9 +34,9 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.MethodTransform;\n-import jdk.internal.classfile.Opcode;\n-import static jdk.internal.classfile.Opcode.*;\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n-import jdk.internal.classfile.instruction.NopInstruction;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.Opcode;\n+import static java.lang.classfile.Opcode.*;\n+import java.lang.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.instruction.NopInstruction;\n@@ -101,5 +101,5 @@\n-    static final Classfile\n-            CC_Fixed_Jumps = Classfile.of(Classfile.ShortJumpsOption.FIX_SHORT_JUMPS),\n-            CC_Not_Fixed_Jumps = Classfile.of(Classfile.ShortJumpsOption.FAIL_ON_SHORT_JUMPS),\n-            CC_No_Stack_No_Patch = Classfile.of(Classfile.StackMapsOption.DROP_STACK_MAPS,\n-                                                        Classfile.DeadCodeOption.KEEP_DEAD_CODE);\n+    static final ClassFile\n+            CC_Fixed_Jumps = ClassFile.of(ClassFile.ShortJumpsOption.FIX_SHORT_JUMPS),\n+            CC_Not_Fixed_Jumps = ClassFile.of(ClassFile.ShortJumpsOption.FAIL_ON_SHORT_JUMPS),\n+            CC_No_Stack_No_Patch = ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS,\n+                                                        ClassFile.DeadCodeOption.KEEP_DEAD_CODE);\n@@ -207,1 +207,1 @@\n-    private static ClassModel generateFwd(Classfile cc, Sample sample, boolean overflow) {\n+    private static ClassModel generateFwd(ClassFile cc, Sample sample, boolean overflow) {\n@@ -222,1 +222,1 @@\n-    private static ClassModel generateBack(Classfile cc, Sample sample, boolean overflow) {\n+    private static ClassModel generateBack(ClassFile cc, Sample sample, boolean overflow) {\n@@ -253,1 +253,1 @@\n-        assertFixed(sample, Classfile.of().parse(classFile));\n+        assertFixed(sample, ClassFile.of().parse(classFile));\n","filename":"test\/jdk\/jdk\/classfile\/ShortJumpsFixTest.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -41,6 +41,6 @@\n-import jdk.internal.classfile.ClassSignature;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.MethodSignature;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.Signature.*;\n-import jdk.internal.classfile.Attributes;\n+import java.lang.classfile.ClassSignature;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.MethodSignature;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.Signature.*;\n+import java.lang.classfile.Attributes;\n@@ -131,1 +131,1 @@\n-                var cm = Classfile.of().parse(path);\n+                var cm = ClassFile.of().parse(path);\n@@ -180,1 +180,1 @@\n-        var observerCf = Classfile.of().parse(Path.of(System.getProperty(\"test.classes\"), \"SignaturesTest$Observer.class\"));\n+        var observerCf = ClassFile.of().parse(Path.of(System.getProperty(\"test.classes\"), \"SignaturesTest$Observer.class\"));\n","filename":"test\/jdk\/jdk\/classfile\/SignaturesTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Compile Classfile API snippets\n+ * @summary Compile ClassFile API snippets\n@@ -43,2 +43,2 @@\n-        \"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/snippet-files\/PackageSnippets.java\",\n-        \"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/components\/snippet-files\/PackageSnippets.java\"})\n+        \"src\/java.base\/share\/classes\/java\/lang\/classfile\/snippet-files\/PackageSnippets.java\",\n+        \"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/snippet-files\/PackageSnippets.java\"})\n@@ -56,5 +56,2 @@\n-                            \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n-                            \"--add-exports\", \"java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED\",\n-                            \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\",\n-                            \"--add-exports\", \"java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\",\n-                            \"--add-exports\", \"java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED\"),\n+                            \"--enable-preview\",\n+                            \"--source\", String.valueOf(Runtime.version().feature())),\n","filename":"test\/jdk\/jdk\/classfile\/SnippetsTest.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.components.ClassPrinter;\n+import java.lang.classfile.*;\n+import java.lang.classfile.components.ClassPrinter;\n@@ -41,1 +41,1 @@\n-import static jdk.internal.classfile.Classfile.ACC_STATIC;\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n@@ -54,2 +54,2 @@\n-        return Classfile.of(Classfile.StackMapsOption.DROP_STACK_MAPS,\n-                                    Classfile.DeadCodeOption.KEEP_DEAD_CODE).build(\n+        return ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS,\n+                                    ClassFile.DeadCodeOption.KEEP_DEAD_CODE).build(\n@@ -97,1 +97,1 @@\n-        var error = assertThrows(IllegalArgumentException.class, () -> testTransformedStackMaps(buildDeadCode(), Classfile.DeadCodeOption.KEEP_DEAD_CODE));\n+        var error = assertThrows(IllegalArgumentException.class, () -> testTransformedStackMaps(buildDeadCode(), ClassFile.DeadCodeOption.KEEP_DEAD_CODE));\n@@ -172,1 +172,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -195,1 +195,1 @@\n-        Classfile.of().build(ClassDesc.of(\"TestClass\"), clb ->\n+        ClassFile.of().build(ClassDesc.of(\"TestClass\"), clb ->\n@@ -208,1 +208,1 @@\n-        Classfile.of().build(ClassDesc.of(\"TestClass\"), clb ->\n+        ClassFile.of().build(ClassDesc.of(\"TestClass\"), clb ->\n@@ -220,1 +220,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -241,1 +241,1 @@\n-        Classfile.of().build(ClassDesc.of(\"Test\"), clb\n+        ClassFile.of().build(ClassDesc.of(\"Test\"), clb\n@@ -253,1 +253,1 @@\n-    private static void testTransformedStackMaps(String classPath, Classfile.Option... options) throws Exception {\n+    private static void testTransformedStackMaps(String classPath, ClassFile.Option... options) throws Exception {\n@@ -261,1 +261,1 @@\n-    private static void testTransformedStackMaps(byte[] originalBytes, Classfile.Option... options) throws Exception {\n+    private static void testTransformedStackMaps(byte[] originalBytes, ClassFile.Option... options) throws Exception {\n@@ -263,1 +263,1 @@\n-        Classfile cc = Classfile.of(options);\n+        ClassFile cc = ClassFile.of(options);\n@@ -281,1 +281,1 @@\n-                Classfile.of().build(ClassDesc.of(\"Test\"), clb ->\n+                ClassFile.of().build(ClassDesc.of(\"Test\"), clb ->\n@@ -284,1 +284,1 @@\n-                                       Classfile.ACC_STATIC,\n+                                       ClassFile.ACC_STATIC,\n@@ -299,1 +299,1 @@\n-                Classfile.of().build(ClassDesc.of(\"Test\"), clb ->\n+                ClassFile.of().build(ClassDesc.of(\"Test\"), clb ->\n@@ -302,1 +302,1 @@\n-                                       Classfile.ACC_STATIC,\n+                                       ClassFile.ACC_STATIC,\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -33,3 +33,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.components.CodeStackTracker;\n-import static jdk.internal.classfile.TypeKind.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.components.CodeStackTracker;\n+import static java.lang.classfile.TypeKind.*;\n@@ -46,1 +46,1 @@\n-        Classfile.of().build(ClassDesc.of(\"Foo\"), clb ->\n+        ClassFile.of().build(ClassDesc.of(\"Foo\"), clb ->\n@@ -82,1 +82,1 @@\n-        Classfile.of().build(ClassDesc.of(\"Foo\"), clb ->\n+        ClassFile.of().build(ClassDesc.of(\"Foo\"), clb ->\n","filename":"test\/jdk\/jdk\/classfile\/StackTrackerTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile streaming versus model.\n+ * @summary Testing ClassFile streaming versus model.\n@@ -29,5 +29,5 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.Instruction;\n-import jdk.internal.classfile.MethodModel;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.Instruction;\n+import java.lang.classfile.MethodModel;\n@@ -35,15 +35,15 @@\n-import jdk.internal.classfile.instruction.BranchInstruction;\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n-import jdk.internal.classfile.instruction.FieldInstruction;\n-import jdk.internal.classfile.instruction.IncrementInstruction;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n-import jdk.internal.classfile.instruction.LoadInstruction;\n-import jdk.internal.classfile.instruction.LookupSwitchInstruction;\n-import jdk.internal.classfile.instruction.NewMultiArrayInstruction;\n-import jdk.internal.classfile.instruction.NewObjectInstruction;\n-import jdk.internal.classfile.instruction.NewPrimitiveArrayInstruction;\n-import jdk.internal.classfile.instruction.NewReferenceArrayInstruction;\n-import jdk.internal.classfile.instruction.StoreInstruction;\n-import jdk.internal.classfile.instruction.TableSwitchInstruction;\n-import jdk.internal.classfile.instruction.TypeCheckInstruction;\n+import java.lang.classfile.instruction.BranchInstruction;\n+import java.lang.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.instruction.FieldInstruction;\n+import java.lang.classfile.instruction.IncrementInstruction;\n+import java.lang.classfile.instruction.InvokeDynamicInstruction;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.instruction.LookupSwitchInstruction;\n+import java.lang.classfile.instruction.NewMultiArrayInstruction;\n+import java.lang.classfile.instruction.NewObjectInstruction;\n+import java.lang.classfile.instruction.NewPrimitiveArrayInstruction;\n+import java.lang.classfile.instruction.NewReferenceArrayInstruction;\n+import java.lang.classfile.instruction.StoreInstruction;\n+import java.lang.classfile.instruction.TableSwitchInstruction;\n+import java.lang.classfile.instruction.TypeCheckInstruction;\n@@ -79,1 +79,1 @@\n-        ClassModel cm = Classfile.of().parse(fileBytes);\n+        ClassModel cm = ClassFile.of().parse(fileBytes);\n","filename":"test\/jdk\/jdk\/classfile\/StreamedVsListTest.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import jdk.internal.classfile.AccessFlags;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.AccessFlags;\n+import java.lang.classfile.ClassFile;\n@@ -50,1 +50,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"C\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"C\"), cb -> {\n","filename":"test\/jdk\/jdk\/classfile\/SwapTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+enablePreview = true\n@@ -3,4 +4,0 @@\n-    java.base\/jdk.internal.classfile \\\n-    java.base\/jdk.internal.classfile.attribute \\\n-    java.base\/jdk.internal.classfile.constantpool \\\n-    java.base\/jdk.internal.classfile.instruction \\\n@@ -9,1 +6,0 @@\n-    java.base\/jdk.internal.classfile.components \\\n","filename":"test\/jdk\/jdk\/classfile\/TEST.properties","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile TempConstantPoolBuilder.\n+ * @summary Testing ClassFile TempConstantPoolBuilder.\n@@ -29,3 +29,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n@@ -41,2 +41,2 @@\n-import static jdk.internal.classfile.Opcode.INVOKESPECIAL;\n-import static jdk.internal.classfile.TypeKind.VoidType;\n+import static java.lang.classfile.Opcode.INVOKESPECIAL;\n+import static java.lang.classfile.TypeKind.VoidType;\n@@ -56,1 +56,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/TempConstantPoolBuilderTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile RecordComponent.\n+ * @summary Testing ClassFile RecordComponent.\n@@ -39,6 +39,6 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.attribute.RecordAttribute;\n-import jdk.internal.classfile.attribute.RecordComponentInfo;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.attribute.RecordAttribute;\n+import java.lang.classfile.attribute.RecordComponentInfo;\n@@ -56,1 +56,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -74,1 +74,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -83,1 +83,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -107,1 +107,1 @@\n-        ClassModel cm = Classfile.of().parse(Files.readAllBytes(testClassPath));\n+        ClassModel cm = ClassFile.of().parse(Files.readAllBytes(testClassPath));\n","filename":"test\/jdk\/jdk\/classfile\/TestRecordComponent.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile transformations.\n+ * @summary Testing ClassFile transformations.\n@@ -35,7 +35,7 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.instruction.ConstantInstruction;\n@@ -96,1 +96,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -108,1 +108,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -120,1 +120,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/TransformTests.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile CP Utf8Entry.\n+ * @summary Testing ClassFile CP Utf8Entry.\n@@ -29,6 +29,6 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n-import jdk.internal.classfile.constantpool.StringEntry;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.constantpool.StringEntry;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -50,1 +50,1 @@\n-import static jdk.internal.classfile.TypeKind.VoidType;\n+import static java.lang.classfile.TypeKind.VoidType;\n@@ -82,1 +82,1 @@\n-        byte[] classfile = createClassfile(s);\n+        byte[] classfile = createClassFile(s);\n@@ -84,1 +84,1 @@\n-        ClassModel cm = Classfile.of().parse(classfile);\n+        ClassModel cm = ClassFile.of().parse(classfile);\n@@ -161,1 +161,1 @@\n-        byte[] classfile = createClassfile(marker);\n+        byte[] classfile = createClassFile(marker);\n@@ -164,1 +164,1 @@\n-        ClassModel cm = Classfile.of().parse(classfile);\n+        ClassModel cm = ClassFile.of().parse(classfile);\n@@ -196,2 +196,2 @@\n-    static byte[] createClassfile(String s) {\n-        return Classfile.of().build(ClassDesc.of(\"C\"),\n+    static byte[] createClassFile(String s) {\n+        return ClassFile.of().build(ClassDesc.of(\"C\"),\n","filename":"test\/jdk\/jdk\/classfile\/Utf8EntryTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile Util.\n+ * @summary Testing ClassFile Util.\n","filename":"test\/jdk\/jdk\/classfile\/UtilTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile Verifier.\n+ * @summary Testing ClassFile Verifier.\n@@ -36,4 +36,4 @@\n-import jdk.internal.classfile.ClassHierarchyResolver;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.MethodModel;\n+import java.lang.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.MethodModel;\n@@ -54,1 +54,1 @@\n-                            Classfile.of().parse(path).verify(null);\n+                            ClassFile.of().parse(path).verify(null);\n@@ -64,1 +64,1 @@\n-        var cc = Classfile.of(Classfile.ClassHierarchyResolverOption.of(\n+        var cc = ClassFile.of(ClassFile.ClassHierarchyResolverOption.of(\n@@ -82,1 +82,1 @@\n-        if (Classfile.of().parse(brokenClassBytes).verify(sb::append).isEmpty()) {\n+        if (ClassFile.of().parse(brokenClassBytes).verify(sb::append).isEmpty()) {\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile class building.\n+ * @summary Testing ClassFile class building.\n@@ -33,1 +33,1 @@\n-import jdk.internal.classfile.AccessFlags;\n+import java.lang.classfile.AccessFlags;\n@@ -35,4 +35,4 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.Label;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n@@ -43,4 +43,4 @@\n-import static jdk.internal.classfile.Opcode.*;\n-import static jdk.internal.classfile.TypeKind.IntType;\n-import static jdk.internal.classfile.TypeKind.ReferenceType;\n-import static jdk.internal.classfile.TypeKind.VoidType;\n+import static java.lang.classfile.Opcode.*;\n+import static java.lang.classfile.TypeKind.IntType;\n+import static java.lang.classfile.TypeKind.ReferenceType;\n+import static java.lang.classfile.TypeKind.VoidType;\n@@ -53,1 +53,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"MyClass\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"MyClass\"), cb -> {\n@@ -95,1 +95,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(\"MyClass\"), cb -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(\"MyClass\"), cb -> {\n","filename":"test\/jdk\/jdk\/classfile\/WriteTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile AnnotationsExamples compilation.\n+ * @summary Testing ClassFile AnnotationsExamples compilation.\n@@ -33,10 +33,10 @@\n-import jdk.internal.classfile.Annotation;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n-import jdk.internal.classfile.components.ClassPrinter;\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.components.ClassPrinter;\n@@ -50,1 +50,1 @@\n-        return Classfile.of().transform(m, ClassTransform.endHandler(cb -> cb.with(RuntimeVisibleAnnotationsAttribute.of(annos))));\n+        return ClassFile.of().transform(m, ClassTransform.endHandler(cb -> cb.with(RuntimeVisibleAnnotationsAttribute.of(annos))));\n@@ -74,1 +74,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -118,1 +118,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -147,1 +147,1 @@\n-        return Classfile.of().transform(m, ClassTransform.ofStateful(() -> new ClassTransform() {\n+        return ClassFile.of().transform(m, ClassTransform.ofStateful(() -> new ClassTransform() {\n@@ -174,1 +174,1 @@\n-        return Classfile.of().transform(m, ClassTransform.ofStateful(() -> new ClassTransform() {\n+        return ClassFile.of().transform(m, ClassTransform.ofStateful(() -> new ClassTransform() {\n","filename":"test\/jdk\/jdk\/classfile\/examples\/AnnotationsExamples.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile ExampleGallery compilation.\n+ * @summary Testing ClassFile ExampleGallery compilation.\n@@ -34,25 +34,25 @@\n-import jdk.internal.classfile.AccessFlags;\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassSignature;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassfileVersion;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.Interfaces;\n-import jdk.internal.classfile.MethodBuilder;\n-import jdk.internal.classfile.MethodElement;\n-import jdk.internal.classfile.MethodTransform;\n-import jdk.internal.classfile.Signature;\n-import jdk.internal.classfile.Signature.ClassTypeSig;\n-import jdk.internal.classfile.Signature.TypeArg;\n-import jdk.internal.classfile.Superclass;\n-import jdk.internal.classfile.attribute.ExceptionsAttribute;\n-import jdk.internal.classfile.attribute.SignatureAttribute;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.AccessFlags;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassSignature;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassFileVersion;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.Interfaces;\n+import java.lang.classfile.MethodBuilder;\n+import java.lang.classfile.MethodElement;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.Signature;\n+import java.lang.classfile.Signature.ClassTypeSig;\n+import java.lang.classfile.Signature.TypeArg;\n+import java.lang.classfile.Superclass;\n+import java.lang.classfile.attribute.ExceptionsAttribute;\n+import java.lang.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -65,1 +65,1 @@\n-        return Classfile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transform(cm, (cb, ce) -> {\n@@ -67,1 +67,1 @@\n-                case ClassfileVersion cv -> cb.withVersion(57, 0);\n+                case ClassFileVersion cv -> cb.withVersion(57, 0);\n@@ -74,1 +74,1 @@\n-        return Classfile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transform(cm, (cb, ce) -> {\n@@ -76,1 +76,1 @@\n-                case ClassfileVersion cv -> cb.withVersion(cv.majorVersion() + 1, 0);\n+                case ClassFileVersion cv -> cb.withVersion(cv.majorVersion() + 1, 0);\n@@ -83,1 +83,1 @@\n-        return Classfile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transform(cm, (cb, ce) -> {\n@@ -92,1 +92,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.endHandler(cb -> cb.withSuperclass(superclass)));\n+        return ClassFile.of().transform(cm, ClassTransform.endHandler(cb -> cb.withSuperclass(superclass)));\n@@ -96,1 +96,1 @@\n-        return Classfile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transform(cm, (cb, ce) -> {\n@@ -107,1 +107,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.ofStateful(()  -> new ClassTransform() {\n+        return ClassFile.of().transform(cm, ClassTransform.ofStateful(()  -> new ClassTransform() {\n@@ -136,1 +136,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.ofStateful(()  -> new ClassTransform() {\n+        return ClassFile.of().transform(cm, ClassTransform.ofStateful(()  -> new ClassTransform() {\n@@ -163,1 +163,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.dropping(e -> e instanceof SignatureAttribute));\n+        return ClassFile.of().transform(cm, ClassTransform.dropping(e -> e instanceof SignatureAttribute));\n@@ -167,1 +167,1 @@\n-        return Classfile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transform(cm, (cb, ce) -> {\n@@ -179,1 +179,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.dropping(e -> e instanceof SignatureAttribute)\n+        return ClassFile.of().transform(cm, ClassTransform.dropping(e -> e instanceof SignatureAttribute)\n@@ -190,1 +190,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.dropping(e -> e instanceof FieldModel fm\n+        return ClassFile.of().transform(cm, ClassTransform.dropping(e -> e instanceof FieldModel fm\n@@ -195,1 +195,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.endHandler(cb -> cb.withField(\"cool\", ClassDesc.ofDescriptor(\"(I)D\"), Classfile.ACC_PUBLIC)));\n+        return ClassFile.of().transform(cm, ClassTransform.endHandler(cb -> cb.withField(\"cool\", ClassDesc.ofDescriptor(\"(I)D\"), ClassFile.ACC_PUBLIC)));\n@@ -199,1 +199,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.transformingFields((fb, fe) -> {\n+        return ClassFile.of().transform(cm, ClassTransform.transformingFields((fb, fe) -> {\n@@ -208,1 +208,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.transformingFields((fb, fe) -> {\n+        return ClassFile.of().transform(cm, ClassTransform.transformingFields((fb, fe) -> {\n@@ -210,1 +210,1 @@\n-                case AccessFlags a -> fb.with(AccessFlags.ofField(a.flagsMask() & ~Classfile.ACC_PUBLIC & ~Classfile.ACC_PROTECTED));\n+                case AccessFlags a -> fb.with(AccessFlags.ofField(a.flagsMask() & ~ClassFile.ACC_PUBLIC & ~ClassFile.ACC_PROTECTED));\n@@ -217,1 +217,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.transformingMethods(\n+        return ClassFile.of().transform(cm, ClassTransform.transformingMethods(\n@@ -261,1 +261,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.transformingMethodBodies(transform));\n+        return ClassFile.of().transform(cm, ClassTransform.transformingMethodBodies(transform));\n@@ -265,1 +265,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.transformingMethodBodies((codeB, codeE) -> {\n+        return ClassFile.of().transform(cm, ClassTransform.transformingMethodBodies((codeB, codeE) -> {\n@@ -277,1 +277,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.transformingMethodBodies((codeB, codeE) -> {\n+        return ClassFile.of().transform(cm, ClassTransform.transformingMethodBodies((codeB, codeE) -> {\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ExampleGallery.java","additions":47,"deletions":47,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile ExperimentalTransformExamples compilation.\n+ * @summary Testing ClassFile ExperimentalTransformExamples compilation.\n@@ -33,3 +33,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.RuntimeInvisibleAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n@@ -55,1 +55,1 @@\n-        return Classfile.of().transform(cm, (cb, ce) -> {\n+        return ClassFile.of().transform(cm, (cb, ce) -> {\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ExperimentalTransformExamples.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile ModuleExamples compilation.\n+ * @summary Testing ClassFile ModuleExamples compilation.\n@@ -37,10 +37,10 @@\n-import jdk.internal.classfile.Annotation;\n-import jdk.internal.classfile.AnnotationElement;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.ModuleAttribute.ModuleAttributeBuilder;\n-import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n-import jdk.internal.classfile.Attributes;\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.ModuleAttribute.ModuleAttributeBuilder;\n+import java.lang.classfile.attribute.ModuleMainClassAttribute;\n+import java.lang.classfile.attribute.ModulePackagesAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.Attributes;\n@@ -54,1 +54,1 @@\n-        ClassModel cm = Classfile.of().parse(JRT.getPath(\"modules\/java.base\/module-info.class\"));\n+        ClassModel cm = ClassFile.of().parse(JRT.getPath(\"modules\/java.base\/module-info.class\"));\n@@ -79,1 +79,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ModuleExamples.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Testing Classfile TransformExamples compilation.\n+ * @summary Testing ClassFile TransformExamples compilation.\n@@ -29,6 +29,6 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.FieldModel;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.Attribute;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.FieldModel;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.Attribute;\n@@ -41,1 +41,1 @@\n-        return Classfile.of().transform(cm, ClassTransform.ACCEPT_ALL);\n+        return ClassFile.of().transform(cm, ClassTransform.ACCEPT_ALL);\n@@ -45,1 +45,1 @@\n-        return Classfile.of().transform(cm, (b, e) -> {\n+        return ClassFile.of().transform(cm, (b, e) -> {\n@@ -52,1 +52,1 @@\n-        return Classfile.of().transform(cm, (b, e) ->\n+        return ClassFile.of().transform(cm, (b, e) ->\n@@ -60,1 +60,1 @@\n-        return Classfile.of().transform(cm, (b, e) -> {\n+        return ClassFile.of().transform(cm, (b, e) -> {\n@@ -67,1 +67,1 @@\n-        return Classfile.of().transform(cm, (b, e) -> {\n+        return ClassFile.of().transform(cm, (b, e) -> {\n","filename":"test\/jdk\/jdk\/classfile\/examples\/TransformExamples.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -49,4 +49,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.instruction.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.instruction.*;\n@@ -56,2 +56,2 @@\n-import static jdk.internal.classfile.Classfile.*;\n-import static jdk.internal.classfile.Attributes.*;\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.classfile.Attributes.*;\n@@ -100,1 +100,1 @@\n-    public static ClassRecord ofStreamingElements(int majorVersion, int minorVersion, String thisClass, String superClass, Set<String> interfaces, int flags, ConstantPool cp, Supplier<Stream<? extends ClassfileElement>> elements, CompatibilityFilter... compatibilityFilter) {\n+    public static ClassRecord ofStreamingElements(int majorVersion, int minorVersion, String thisClass, String superClass, Set<String> interfaces, int flags, ConstantPool cp, Supplier<Stream<? extends ClassFileElement>> elements, CompatibilityFilter... compatibilityFilter) {\n@@ -136,1 +136,1 @@\n-        public static FieldRecord ofStreamingElements(String fieldName, String fieldType, int flags, Supplier<Stream<? extends ClassfileElement>> elements, CompatibilityFilter... compatibilityFilter) {\n+        public static FieldRecord ofStreamingElements(String fieldName, String fieldType, int flags, Supplier<Stream<? extends ClassFileElement>> elements, CompatibilityFilter... compatibilityFilter) {\n@@ -159,1 +159,1 @@\n-        public static MethodRecord ofStreamingElements(String methodName, String methodType, int flags, Supplier<Stream<? extends ClassfileElement>> elements, CompatibilityFilter... compatibilityFilter) {\n+        public static MethodRecord ofStreamingElements(String methodName, String methodType, int flags, Supplier<Stream<? extends ClassFileElement>> elements, CompatibilityFilter... compatibilityFilter) {\n@@ -241,1 +241,1 @@\n-        public static AttributesRecord ofStreamingElements(Supplier<Stream<? extends ClassfileElement>> elements, ConstantPool cp, CompatibilityFilter... cf) {\n+        public static AttributesRecord ofStreamingElements(Supplier<Stream<? extends ClassFileElement>> elements, ConstantPool cp, CompatibilityFilter... cf) {\n@@ -326,1 +326,1 @@\n-        static CodeAttributesRecord ofStreamingElements(Supplier<Stream<? extends ClassfileElement>> elements, CodeAttribute lc, CodeNormalizerHelper code, CompatibilityFilter... cf) {\n+        static CodeAttributesRecord ofStreamingElements(Supplier<Stream<? extends ClassFileElement>> elements, CodeAttribute lc, CodeNormalizerHelper code, CompatibilityFilter... cf) {\n@@ -504,1 +504,1 @@\n-        private static List<String> instructions(Supplier<Stream<? extends ClassfileElement>> elements, CodeNormalizerHelper code, CodeAttribute lr) {\n+        private static List<String> instructions(Supplier<Stream<? extends ClassFileElement>> elements, CodeNormalizerHelper code, CodeAttribute lr) {\n@@ -569,1 +569,1 @@\n-        public static CodeRecord ofStreamingElements(int maxStack, int maxLocals, int codeLength, Supplier<Stream<? extends ClassfileElement>> elements, CodeAttribute lc, CodeNormalizerHelper codeHelper, CompatibilityFilter... cf) {\n+        public static CodeRecord ofStreamingElements(int maxStack, int maxLocals, int codeLength, Supplier<Stream<? extends ClassFileElement>> elements, CodeAttribute lc, CodeNormalizerHelper codeHelper, CompatibilityFilter... cf) {\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ClassRecord.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.instruction.*;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.instruction.*;\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/InstructionModelToCodeBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,4 +29,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.instruction.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.instruction.*;\n@@ -35,1 +35,1 @@\n-import jdk.internal.classfile.components.CodeStackTracker;\n+import java.lang.classfile.components.CodeStackTracker;\n@@ -42,1 +42,1 @@\n-        return Classfile.of(Classfile.StackMapsOption.DROP_STACK_MAPS).build(clm.thisClass().asSymbol(), clb -> {\n+        return ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS).build(clm.thisClass().asSymbol(), clb -> {\n@@ -48,1 +48,1 @@\n-                    case ClassfileVersion v -> clb.withVersion(v.majorVersion(), v.minorVersion());\n+                    case ClassFileVersion v -> clb.withVersion(v.majorVersion(), v.minorVersion());\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import jdk.internal.classfile.instruction.LocalVariable;\n-import jdk.internal.classfile.instruction.LocalVariableType;\n+import java.lang.classfile.instruction.LocalVariable;\n+import java.lang.classfile.instruction.LocalVariableType;\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/TestUtil.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,11 +36,11 @@\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.MethodTransform;\n-import jdk.internal.classfile.components.ClassRemapper;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.components.ClassRemapper;\n@@ -116,1 +116,1 @@\n-            return RebuildingTransformation.transform(Classfile.of().parse(bytes));\n+            return RebuildingTransformation.transform(ClassFile.of().parse(bytes));\n@@ -130,2 +130,2 @@\n-        SHARED_3_NO_STACKMAP(true, threeLevelNoop, Classfile.StackMapsOption.DROP_STACK_MAPS),\n-        SHARED_3_NO_DEBUG(true, threeLevelNoop, Classfile.DebugElementsOption.DROP_DEBUG, Classfile.LineNumbersOption.DROP_LINE_NUMBERS),\n+        SHARED_3_NO_STACKMAP(true, threeLevelNoop, ClassFile.StackMapsOption.DROP_STACK_MAPS),\n+        SHARED_3_NO_DEBUG(true, threeLevelNoop, ClassFile.DebugElementsOption.DROP_DEBUG, ClassFile.LineNumbersOption.DROP_LINE_NUMBERS),\n@@ -165,1 +165,1 @@\n-                ClassRemapper.of(Map.of()).remapClass(Classfile.of(), Classfile.of().parse(bytes)));\n+                ClassRemapper.of(Map.of()).remapClass(ClassFile.of(), ClassFile.of().parse(bytes)));\n@@ -172,1 +172,1 @@\n-        public final Classfile cc;\n+        public final ClassFile cc;\n@@ -178,1 +178,1 @@\n-            cc = Classfile.of();\n+            cc = ClassFile.of();\n@@ -183,1 +183,1 @@\n-                      Classfile.Option... options) {\n+                      ClassFile.Option... options) {\n@@ -186,1 +186,1 @@\n-            this.cc = Classfile.of(\n+            this.cc = ClassFile.of(\n@@ -189,1 +189,1 @@\n-                    : Stream.concat(Stream.of(options), Stream.of(Classfile.ConstantPoolSharingOption.NEW_POOL)).toArray(Classfile.Option[]::new));\n+                    : Stream.concat(Stream.of(options), Stream.of(ClassFile.ConstantPoolSharingOption.NEW_POOL)).toArray(ClassFile.Option[]::new));\n@@ -195,1 +195,1 @@\n-                case ARRAYCOPY -> Optional.of(ClassRecord.ofClassModel(Classfile.of().parse(bytes)));\n+                case ARRAYCOPY -> Optional.of(ClassRecord.ofClassModel(ClassFile.of().parse(bytes)));\n@@ -199,1 +199,1 @@\n-                        -> Optional.of(ClassRecord.ofClassModel(Classfile.of().parse(bytes), ClassRecord.CompatibilityFilter.By_ClassBuilder));\n+                        -> Optional.of(ClassRecord.ofClassModel(ClassFile.of().parse(bytes), ClassRecord.CompatibilityFilter.By_ClassBuilder));\n@@ -213,1 +213,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -254,1 +254,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -269,1 +269,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -292,1 +292,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -300,1 +300,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/Transforms.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -6,4 +6,2 @@\n-modules = java.base\/jdk.internal.classfile \\\n-          java.base\/jdk.internal.classfile.constantpool \\\n-          java.base\/jdk.internal.classfile.instruction \\\n-          jdk.compiler jdk.zipfs\n+modules = jdk.compiler jdk.zipfs\n+enablePreview = true\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/lambda\/TEST.properties","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -29,1 +29,1 @@\n-import static jdk.internal.classfile.Classfile.*;\n+import static java.lang.classfile.ClassFile.*;\n@@ -53,1 +53,1 @@\n-        return Classfile.of().transform(classModel,\n+        return ClassFile.of().transform(classModel,\n@@ -61,1 +61,1 @@\n-        ClassModel classModel = Classfile.of().parse(bytes);\n+        ClassModel classModel = ClassFile.of().parse(bytes);\n","filename":"test\/jdk\/jdk\/lambda\/separate\/ClassToInterfaceConverter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,4 +27,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.module\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.module\n","filename":"test\/jdk\/jdk\/modules\/incubator\/ServiceBinding.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+ * @enablePreview\n@@ -58,3 +59,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestProcessHelper.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+ * @enablePreview\n@@ -41,5 +42,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jimage\/JImageNonAsciiNameTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+ * @enablePreview\n@@ -51,5 +52,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jimage\/JImageTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+ * @enablePreview\n@@ -46,5 +47,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/DefaultProviderTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+ * @enablePreview\n@@ -42,5 +43,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/ExplodedModuleNameTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+ * @enablePreview\n@@ -64,5 +65,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/IntegrationTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+ * @enablePreview\n@@ -39,5 +40,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLink100Modules.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLink2Test.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n@@ -40,5 +41,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLinkDedupTestBatchSizeOne.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,4 +31,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.jimage\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.jimage\n@@ -36,5 +34,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLinkNegativeTest.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @enablePreview\n@@ -40,5 +41,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLinkOptionsTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+ * @enablePreview\n@@ -39,5 +40,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLinkPluginsTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+ * @enablePreview\n@@ -55,5 +56,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/JLinkTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+ * @enablePreview\n@@ -45,5 +46,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/ModuleNamesOrderTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/NativeTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @enablePreview\n@@ -34,5 +35,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/AddOptionsPluginTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+ * @enablePreview\n@@ -41,5 +42,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CDSPluginTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+ * @enablePreview\n@@ -46,5 +47,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/GenerateJLIClassesPluginTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+ * @enablePreview\n@@ -51,5 +52,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/IncludeLocalesPluginTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SaveJlinkArgfilesPluginTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -36,5 +37,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/StringSharingPluginTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -36,5 +37,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -52,2 +48,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -141,1 +137,1 @@\n-        ClassModel classFile = Classfile.of().parse(strippedClassFile);\n+        ClassModel classFile = ClassFile.of().parse(strippedClassFile);\n","filename":"test\/jdk\/tools\/jlink\/plugins\/StripJavaDebugAttributesPluginTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @enablePreview\n@@ -34,5 +35,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/jdk\/tools\/jlink\/plugins\/VendorInfoPluginsTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import jdk.internal.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassHierarchyResolver;\n@@ -35,1 +36,0 @@\n-import jdk.internal.classfile.Classfile;\n@@ -226,1 +226,1 @@\n-        var errors = Classfile.of().parse(clazz).verify(\n+        var errors = ClassFile.of().parse(clazz).verify(\n","filename":"test\/jdk\/tools\/lib\/tests\/JImageValidator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -1176,1 +1176,1 @@\n-            return Classfile.of().parse(in.readAllBytes());\n+            return ClassFile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/lib\/annotations\/annotations\/classfile\/ClassfileInspector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -36,3 +32,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.attribute.*;\n@@ -115,1 +111,1 @@\n-            ClassModel cf = Classfile.of().parse(f.toPath());\n+            ClassModel cf = ClassFile.of().parse(f.toPath());\n","filename":"test\/langtools\/tools\/javac\/4241573\/T4241573.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -39,2 +35,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -165,1 +161,1 @@\n-                ClassModel cf = Classfile.of().parse(compiledTest.toPath());\n+                ClassModel cf = ClassFile.of().parse(compiledTest.toPath());\n","filename":"test\/langtools\/tools\/javac\/7003595\/T7003595.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,3 +34,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.PoolEntry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -77,1 +73,1 @@\n-        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        ClassModel classFile = ClassFile.of().parse(file.toPath());\n","filename":"test\/langtools\/tools\/javac\/7153958\/CPoolRefClassContainingInlinedCts.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,6 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n@@ -42,1 +37,7 @@\n-import jdk.internal.classfile.*;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.ConstantPoolException;\n+import com.sun.tools.classfile.Descriptor;\n+import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n+import com.sun.tools.classfile.Method;\n+\n+import static com.sun.tools.classfile.AccessFlags.ACC_STRICT;\n@@ -67,1 +68,2 @@\n-    public static void main(String[] args) throws IOException {\n+    public static void main(String[] args)\n+            throws IOException, ConstantPoolException, InvalidDescriptor {\n@@ -71,1 +73,2 @@\n-    private void run() throws IOException {\n+    private void run()\n+            throws IOException, ConstantPoolException, InvalidDescriptor {\n@@ -86,1 +89,5 @@\n-    void check(String dir, String... fileNames) throws IOException{\n+    void check(String dir, String... fileNames)\n+        throws\n+            IOException,\n+            ConstantPoolException,\n+            Descriptor.InvalidDescriptor {\n@@ -88,1 +95,1 @@\n-            ClassModel classFileToCheck = Classfile.of().parse(new File(dir, fileName).toPath());\n+            ClassFile classFileToCheck = ClassFile.read(new File(dir, fileName));\n@@ -90,2 +97,2 @@\n-            for (MethodModel method : classFileToCheck.methods()) {\n-                if ((method.flags().flagsMask() & Classfile.ACC_STRICT) == 0) {\n+            for (Method method : classFileToCheck.methods) {\n+                if ((method.access_flags.flags & ACC_STRICT) == 0) {\n@@ -93,2 +100,2 @@\n-                            method.methodName().stringValue(),\n-                            classFileToCheck.thisClass().asInternalName()));\n+                            method.getName(classFileToCheck.constant_pool),\n+                            classFileToCheck.getName()));\n@@ -100,0 +107,15 @@\n+\/\/ this version of the code can be used when ClassFile API in not in a preview\n+\/\/    void check(String dir, String... fileNames) throws IOException{\n+\/\/        for (String fileName : fileNames) {\n+\/\/            ClassModel classFileToCheck = ClassFile.of().parse(new File(dir, fileName).toPath());\n+\/\/\n+\/\/            for (MethodModel method : classFileToCheck.methods()) {\n+\/\/                if ((method.flags().flagsMask() & ClassFile.ACC_STRICT) == 0) {\n+\/\/                    errors.add(String.format(offendingMethodErrorMessage,\n+\/\/                            method.methodName().stringValue(),\n+\/\/                            classFileToCheck.thisClass().asInternalName()));\n+\/\/                }\n+\/\/            }\n+\/\/        }\n+\/\/    }\n+\n","filename":"test\/langtools\/tools\/javac\/7166455\/CheckACC_STRICTFlagOnclinitTest.java","additions":37,"deletions":15,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -39,2 +35,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -50,1 +47,0 @@\n-import jdk.internal.classfile.constantpool.PoolEntry;\n@@ -98,1 +94,1 @@\n-        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        ClassModel classFile = ClassFile.of().parse(file.toPath());\n","filename":"test\/langtools\/tools\/javac\/8000518\/DuplicateConstantPoolEntry.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -48,1 +44,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -96,1 +92,1 @@\n-        ClassModel classFileToCheck = Classfile.of().parse(new File(\"Test.class\").toPath());\n+        ClassModel classFileToCheck = ClassFile.of().parse(new File(\"Test.class\").toPath());\n@@ -99,1 +95,1 @@\n-            if ((method.flags().flagsMask() & Classfile.ACC_STRICT) == 0) {\n+            if ((method.flags().flagsMask() & ClassFile.ACC_STRICT) == 0) {\n","filename":"test\/langtools\/tools\/javac\/8005931\/CheckACC_STRICTFlagOnPkgAccessClassTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,5 +29,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -37,3 +33,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.ConstantPool;\n@@ -57,1 +53,1 @@\n-        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        ClassModel classFile = ClassFile.of().parse(file.toPath());\n","filename":"test\/langtools\/tools\/javac\/8009170\/RedundantByteCodeInArrayTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -41,3 +37,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.InnerClassInfo;\n-import jdk.internal.classfile.attribute.InnerClassesAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.InnerClassInfo;\n+import java.lang.classfile.attribute.InnerClassesAttribute;\n@@ -98,1 +94,1 @@\n-        ClassModel outerClass = Classfile.of().parse(outerFile);\n+        ClassModel outerClass = ClassFile.of().parse(outerFile);\n@@ -101,1 +97,1 @@\n-            ClassModel innerClass = Classfile.of().parse(innerFile);\n+            ClassModel innerClass = ClassFile.of().parse(innerFile);\n@@ -111,3 +107,3 @@\n-        int mask = Classfile.ACC_PUBLIC | Classfile.ACC_FINAL | Classfile.ACC_INTERFACE | Classfile.ACC_ABSTRACT |\n-                   Classfile.ACC_SYNTHETIC | Classfile.ACC_ANNOTATION | Classfile.ACC_ENUM;\n-        int classExpected = (expected & mask) | Classfile.ACC_SUPER;\n+        int mask = ClassFile.ACC_PUBLIC | ClassFile.ACC_FINAL | ClassFile.ACC_INTERFACE | ClassFile.ACC_ABSTRACT |\n+                   ClassFile.ACC_SYNTHETIC | ClassFile.ACC_ANNOTATION | ClassFile.ACC_ENUM;\n+        int classExpected = (expected & mask) | ClassFile.ACC_SUPER;\n","filename":"test\/langtools\/tools\/javac\/AnonymousClass\/AnonymousClassFlags.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/AnnotationTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/AnonymousClass.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.Utf8Entry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -90,4 +90,4 @@\n-        classFile = Classfile.of().parse(cfile.toPath());\n-        isEnum = (classFile.flags().flagsMask() & Classfile.ACC_ENUM) != 0;\n-        isInterface = (classFile.flags().flagsMask() & Classfile.ACC_INTERFACE) != 0;\n-        isPublic = (classFile.flags().flagsMask() & Classfile.ACC_PUBLIC) != 0;\n+        classFile = ClassFile.of().parse(cfile.toPath());\n+        isEnum = (classFile.flags().flagsMask() & ClassFile.ACC_ENUM) != 0;\n+        isInterface = (classFile.flags().flagsMask() & ClassFile.ACC_INTERFACE) != 0;\n+        isPublic = (classFile.flags().flagsMask() & ClassFile.ACC_PUBLIC) != 0;\n@@ -130,1 +130,1 @@\n-                isStatic = (info.flagsMask() & Classfile.ACC_STATIC) != 0;\n+                isStatic = (info.flagsMask() & ClassFile.ACC_STATIC) != 0;\n@@ -162,1 +162,1 @@\n-            mSynthetic = (method.flags().flagsMask() & Classfile.ACC_SYNTHETIC) != 0;\n+            mSynthetic = (method.flags().flagsMask() & ClassFile.ACC_SYNTHETIC) != 0;\n@@ -166,1 +166,1 @@\n-            mIsBridge = (method.flags().flagsMask() & Classfile.ACC_BRIDGE) != 0;\n+            mIsBridge = (method.flags().flagsMask() & ClassFile.ACC_BRIDGE) != 0;\n@@ -235,1 +235,1 @@\n-                isFinal = (mp.parameters().get(x).flagsMask() & Classfile.ACC_FINAL) != 0;\n+                isFinal = (mp.parameters().get(x).flagsMask() & ClassFile.ACC_FINAL) != 0;\n@@ -296,1 +296,1 @@\n-                                 & Classfile.ACC_SYNTHETIC) != 0;\n+                                 & ClassFile.ACC_SYNTHETIC) != 0;\n@@ -298,1 +298,1 @@\n-                                & Classfile.ACC_MANDATED) != 0;\n+                                & ClassFile.ACC_MANDATED) != 0;\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/ClassFileVisitor.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/Constructors.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/EnumTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/InstanceMethods.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/LambdaTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,3 +34,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.MethodParameterInfo;\n-import jdk.internal.classfile.attribute.MethodParametersAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.MethodParameterInfo;\n+import java.lang.classfile.attribute.MethodParametersAttribute;\n@@ -98,1 +94,1 @@\n-        ClassModel classFile = Classfile.of().parse(Paths.get(\"Test.class\"));\n+        ClassModel classFile = ClassFile.of().parse(Paths.get(\"Test.class\"));\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/LegacyOutputTest\/LegacyOutputTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/LocalClassTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/MemberClassTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/StaticMethods.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/UncommonParamNames.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -42,2 +38,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -174,1 +170,1 @@\n-        final ClassModel baz = Classfile.of().parse(Baz_class.toPath());\n+        final ClassModel baz = ClassFile.of().parse(Baz_class.toPath());\n@@ -191,1 +187,1 @@\n-        byte[] bazBytes = Classfile.of().transform(baz, ClassTransform.transformingMethods((methodBuilder, methodElement) -> {\n+        byte[] bazBytes = ClassFile.of().transform(baz, ClassTransform.transformingMethods((methodBuilder, methodElement) -> {\n@@ -207,1 +203,1 @@\n-            bazBytes = Classfile.of().transform(baz, ClassTransform.transformingMethods((methodBuilder, methodElement) -> {\n+            bazBytes = ClassFile.of().transform(baz, ClassTransform.transformingMethods((methodBuilder, methodElement) -> {\n@@ -223,1 +219,1 @@\n-        final ClassModel foo = Classfile.of().parse(Foo_class.toPath());\n+        final ClassModel foo = ClassFile.of().parse(Foo_class.toPath());\n@@ -264,1 +260,1 @@\n-        final ClassModel bar = Classfile.of().parse(Bar_class.toPath());\n+        final ClassModel bar = ClassFile.of().parse(Bar_class.toPath());\n","filename":"test\/langtools\/tools\/javac\/MethodParametersTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -39,2 +35,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.*;\n@@ -111,1 +107,1 @@\n-            ClassModel cf = Classfile.of().parse(in.readAllBytes());\n+            ClassModel cf = ClassFile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/NoStringToLower.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -41,3 +37,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.MethodParameterInfo;\n-import jdk.internal.classfile.attribute.MethodParametersAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.MethodParameterInfo;\n+import java.lang.classfile.attribute.MethodParametersAttribute;\n@@ -61,1 +57,1 @@\n-    private static final int CHECKED_FLAGS = Classfile.ACC_MANDATED | Classfile.ACC_SYNTHETIC;\n+    private static final int CHECKED_FLAGS = ClassFile.ACC_MANDATED | ClassFile.ACC_SYNTHETIC;\n@@ -133,1 +129,1 @@\n-            return Classfile.of().parse(classes.resolve(\"Outer$\" + className + \".class\"));\n+            return ClassFile.of().parse(classes.resolve(\"Outer$\" + className + \".class\"));\n@@ -147,1 +143,1 @@\n-        checkParameters(classFile.methods().get(0), Classfile.ACC_MANDATED, 0);\n+        checkParameters(classFile.methods().get(0), ClassFile.ACC_MANDATED, 0);\n@@ -155,1 +151,1 @@\n-                checkParameters(method, Classfile.ACC_MANDATED, NO_FLAGS, Classfile.ACC_SYNTHETIC);\n+                checkParameters(method, ClassFile.ACC_MANDATED, NO_FLAGS, ClassFile.ACC_SYNTHETIC);\n@@ -164,1 +160,1 @@\n-        checkParameters(classFile.methods().get(0), Classfile.ACC_MANDATED, NO_FLAGS, NO_FLAGS);\n+        checkParameters(classFile.methods().get(0), ClassFile.ACC_MANDATED, NO_FLAGS, NO_FLAGS);\n@@ -170,1 +166,1 @@\n-        checkParameters(classFile.methods().get(0), Classfile.ACC_MANDATED);\n+        checkParameters(classFile.methods().get(0), ClassFile.ACC_MANDATED);\n@@ -178,1 +174,1 @@\n-                checkParameters(method, Classfile.ACC_MANDATED);\n+                checkParameters(method, ClassFile.ACC_MANDATED);\n@@ -189,1 +185,1 @@\n-                checkParameters(method, Classfile.ACC_SYNTHETIC, Classfile.ACC_SYNTHETIC, NO_FLAGS, NO_FLAGS);\n+                checkParameters(method, ClassFile.ACC_SYNTHETIC, ClassFile.ACC_SYNTHETIC, NO_FLAGS, NO_FLAGS);\n@@ -198,1 +194,1 @@\n-        checkParameters(classFile.methods().get(0), Classfile.ACC_MANDATED, Classfile.ACC_MANDATED);\n+        checkParameters(classFile.methods().get(0), ClassFile.ACC_MANDATED, ClassFile.ACC_MANDATED);\n@@ -216,1 +212,1 @@\n-        return ((flags & Classfile.ACC_MANDATED) == Classfile.ACC_MANDATED) + \" and \" + ((flags & Classfile.ACC_SYNTHETIC) == Classfile.ACC_SYNTHETIC);\n+        return ((flags & ClassFile.ACC_MANDATED) == ClassFile.ACC_MANDATED) + \" and \" + ((flags & ClassFile.ACC_SYNTHETIC) == ClassFile.ACC_SYNTHETIC);\n","filename":"test\/langtools\/tools\/javac\/RequiredParameterFlags\/ImplicitParameters.java","additions":14,"deletions":18,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -24,5 +24,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n+import com.sun.tools.classfile.*;\n+import com.sun.tools.classfile.BootstrapMethods_attribute.BootstrapMethodSpecifier;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_InvokeDynamic_info;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_MethodHandle_info;\n@@ -36,6 +35,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n@@ -68,1 +62,1 @@\n-        boolean expected = Boolean.parseBoolean(args[0]);\n+        boolean expected = Boolean.valueOf(args[0]);\n@@ -76,2 +70,3 @@\n-        ClassModel classFile = Classfile.of().parse(new File(System.getProperty(\"test.classes\", \".\"),\n-                TestIndyStringConcat.class.getName() + \".class\").toPath());\n+        ClassFile classFile = ClassFile.read(new File(System.getProperty(\"test.classes\", \".\"),\n+                TestIndyStringConcat.class.getName() + \".class\"));\n+        ConstantPool constantPool = classFile.constant_pool;\n@@ -79,9 +74,20 @@\n-        for (MethodModel method : classFile.methods()) {\n-            if (method.methodName().equalsString(methodName)) {\n-                CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n-                for (CodeElement i : code.elementList()) {\n-                    if (i instanceof InvokeDynamicInstruction) {\n-                        InvokeDynamicInstruction indy = (InvokeDynamicInstruction) i;\n-                        BootstrapMethodEntry bsmSpec = indy.invokedynamic().bootstrap();\n-                        MethodHandleEntry bsmInfo = bsmSpec.bootstrapMethod();\n-                        if (bsmInfo.reference().owner().asInternalName().equals(\"java\/lang\/invoke\/StringConcatFactory\")) {\n+        BootstrapMethods_attribute bsm_attr =\n+                (BootstrapMethods_attribute)classFile\n+                        .getAttribute(Attribute.BootstrapMethods);\n+\n+        for (Method method : classFile.methods) {\n+            if (method.getName(constantPool).equals(methodName)) {\n+                Code_attribute code = (Code_attribute) method.attributes\n+                        .get(Attribute.Code);\n+                for (Instruction i : code.getInstructions()) {\n+                    if (i.getOpcode() == Opcode.INVOKEDYNAMIC) {\n+                        CONSTANT_InvokeDynamic_info indyInfo =\n+                                (CONSTANT_InvokeDynamic_info) constantPool.get(i.getUnsignedShort(1));\n+\n+                        BootstrapMethodSpecifier bsmSpec =\n+                                bsm_attr.bootstrap_method_specifiers[indyInfo.bootstrap_method_attr_index];\n+\n+                        CONSTANT_MethodHandle_info bsmInfo =\n+                                (CONSTANT_MethodHandle_info) constantPool.get(bsmSpec.bootstrap_method_ref);\n+\n+                        if (bsmInfo.getCPRefInfo().getClassName().equals(\"java\/lang\/invoke\/StringConcatFactory\")) {\n@@ -97,0 +103,23 @@\n+\/\/ this version of the code can be used when ClassFile API in not in a preview\n+\/\/    public static boolean hasStringConcatFactoryCall(String methodName) throws Exception {\n+\/\/        ClassModel classFile = ClassFile.of().parse(new File(System.getProperty(\"test.classes\", \".\"),\n+\/\/                TestIndyStringConcat.class.getName() + \".class\").toPath());\n+\/\/\n+\/\/        for (MethodModel method : classFile.methods()) {\n+\/\/            if (method.methodName().equalsString(methodName)) {\n+\/\/                CodeAttribute code = method.findAttribute(Attributes.CODE).orElseThrow();\n+\/\/                for (CodeElement i : code.elementList()) {\n+\/\/                    if (i instanceof InvokeDynamicInstruction) {\n+\/\/                        InvokeDynamicInstruction indy = (InvokeDynamicInstruction) i;\n+\/\/                        BootstrapMethodEntry bsmSpec = indy.invokedynamic().bootstrap();\n+\/\/                        MethodHandleEntry bsmInfo = bsmSpec.bootstrapMethod();\n+\/\/                        if (bsmInfo.reference().owner().asInternalName().equals(\"java\/lang\/invoke\/StringConcatFactory\")) {\n+\/\/                            return true;\n+\/\/                        }\n+\/\/                    }\n+\/\/                }\n+\/\/            }\n+\/\/        }\n+\/\/        return false;\n+\/\/    }\n+\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/TestIndyStringConcat.java","additions":52,"deletions":23,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -24,4 +24,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.NameAndTypeEntry;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.NameAndTypeEntry;\n+import java.lang.classfile.instruction.InvokeDynamicInstruction;\n@@ -37,6 +37,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -104,1 +100,1 @@\n-        ClassModel classFile = Classfile.of().parse(\n+        ClassModel classFile = ClassFile.of().parse(\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/WellKnownTypeSignatures.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,5 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/WellKnownTypes.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,4 +24,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.instruction.InvokeDynamicInstruction;\n@@ -37,5 +37,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -184,1 +180,1 @@\n-        ClassModel classFile = Classfile.of().parse(new File(System.getProperty(\"test.classes\", \".\"),\n+        ClassModel classFile = ClassFile.of().parse(new File(System.getProperty(\"test.classes\", \".\"),\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/access\/Test.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -48,2 +44,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -67,1 +63,1 @@\n-        ClassModel classFile = Classfile.of().parse(cfilePath);\n+        ClassModel classFile = ClassFile.of().parse(cfilePath);\n@@ -69,1 +65,1 @@\n-            if ((method.flags().flagsMask() & Classfile.ACC_BRIDGE) != 0) {\n+            if ((method.flags().flagsMask() & ClassFile.ACC_BRIDGE) != 0) {\n","filename":"test\/langtools\/tools\/javac\/T6695379\/AnnotationsAreNotCopiedToBridgeMethodsTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -46,2 +42,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -96,1 +92,1 @@\n-        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        ClassModel classFile = ClassFile.of().parse(cfile.toPath());\n","filename":"test\/langtools\/tools\/javac\/T6970173\/DebugPointerAtBadPositionTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -46,2 +42,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -103,1 +99,1 @@\n-        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        ClassModel classFile = ClassFile.of().parse(cfile.toPath());\n","filename":"test\/langtools\/tools\/javac\/T7008643\/InlinedFinallyConfuseDebuggersTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -41,4 +37,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.instruction.TypeCheckInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.instruction.TypeCheckInstruction;\n@@ -67,1 +63,1 @@\n-        ClassModel cls = Classfile.of().parse(Objects.requireNonNull(DoubleCastTest.class.getResourceAsStream(\"DoubleCastTest$C.class\")).readAllBytes());\n+        ClassModel cls = ClassFile.of().parse(Objects.requireNonNull(DoubleCastTest.class.getResourceAsStream(\"DoubleCastTest$C.class\")).readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/T7053059\/DoubleCastTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -46,3 +42,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n@@ -155,1 +151,1 @@\n-            ClassModel cf = Classfile.of().parse(is.readAllBytes());\n+            ClassModel cf = ClassFile.of().parse(is.readAllBytes());\n@@ -157,1 +153,1 @@\n-                fail(\"Classfile not found: \" + result.compilationInfo());\n+                fail(\"ClassFile not found: \" + result.compilationInfo());\n","filename":"test\/langtools\/tools\/javac\/T7093325.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          jdk.compiler\/com.sun.tools.javac.util\n+ * @enablePreview\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n@@ -38,2 +34,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -54,1 +50,1 @@\n-        ClassModel classFile = Classfile.of().parse(path.toPath());\n+        ClassModel classFile = ClassFile.of().parse(path.toPath());\n@@ -58,1 +54,1 @@\n-            Assert.check(classInfo.flagsMask() != Classfile.ACC_STRICT,\n+            Assert.check(classInfo.flagsMask() != ClassFile.ACC_STRICT,\n","filename":"test\/langtools\/tools\/javac\/T7165659\/InnerClassAttrMustNotHaveStrictFPFlagTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,1 +34,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -177,1 +173,1 @@\n-                    classFile = Classfile.of().parse(input.readAllBytes());\n+                    classFile = ClassFile.of().parse(input.readAllBytes());\n@@ -199,1 +195,1 @@\n-                (classFileToCheck.flags().flagsMask() & Classfile.ACC_ENUM) != 0;\n+                (classFileToCheck.flags().flagsMask() & ClassFile.ACC_ENUM) != 0;\n@@ -211,1 +207,1 @@\n-                    (field.flags().flagsMask() & (Classfile.ACC_ENUM | Classfile.ACC_FINAL)) == 0;\n+                    (field.flags().flagsMask() & (ClassFile.ACC_ENUM | ClassFile.ACC_FINAL)) == 0;\n@@ -213,2 +209,2 @@\n-                    (field.flags().flagsMask() & Classfile.ACC_STATIC) != 0 &&\n-                    (field.flags().flagsMask() & Classfile.ACC_FINAL) == 0;\n+                    (field.flags().flagsMask() & ClassFile.ACC_STATIC) != 0 &&\n+                    (field.flags().flagsMask() & ClassFile.ACC_FINAL) == 0;\n","filename":"test\/langtools\/tools\/javac\/T8003967\/DetectMutableStaticFields.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -69,1 +65,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -119,1 +115,1 @@\n-        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        ClassModel classFile = ClassFile.of().parse(cfile.toPath());\n@@ -150,5 +146,2 @@\n-                \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n-                \"--add-exports\", \"java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED\",\n-                \"--add-exports\", \"java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\",\n-                \"--add-exports\", \"java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED\",\n-                \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\",\n+                \"--enable-preview\",\n+                \"--source\", String.valueOf(Runtime.version().feature()),\n","filename":"test\/langtools\/tools\/javac\/T8010737\/ParameterNamesAreNotCopiedToAnonymousInitTest.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          jdk.compiler\/com.sun.tools.javac.util\n+ * @enablePreview\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n@@ -42,2 +38,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.*;\n@@ -59,1 +55,1 @@\n-        ClassModel classFile = Classfile.of().parse(\n+        ClassModel classFile = ClassFile.of().parse(\n","filename":"test\/langtools\/tools\/javac\/T8011181\/EmptyUTF8ForInnerClassNameTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -47,2 +43,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -165,1 +161,1 @@\n-        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        ClassModel classFile = ClassFile.of().parse(cfile.toPath());\n","filename":"test\/langtools\/tools\/javac\/T8019486\/WrongLNTForLambdaTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -37,4 +33,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -66,1 +62,1 @@\n-        ClassModel classFile = Classfile.of().parse(\n+        ClassModel classFile = ClassFile.of().parse(\n","filename":"test\/langtools\/tools\/javac\/T8022186\/DeadCodeGeneratedForEmptyTryTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -47,3 +43,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.instruction.ExceptionCatch;\n@@ -107,1 +103,1 @@\n-        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        ClassModel classFile = ClassFile.of().parse(cfile.toPath());\n","filename":"test\/langtools\/tools\/javac\/T8024039\/NoDeadCodeGenerationOnTrySmtTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,5 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -42,2 +38,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -57,1 +53,1 @@\n-        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        ClassModel classFile = ClassFile.of().parse(cfile.toPath());\n","filename":"test\/langtools\/tools\/javac\/T8028504\/DontGenerateLVTForGNoneOpTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -59,2 +55,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -96,1 +92,1 @@\n-        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        ClassModel classFile = ClassFile.of().parse(file.toPath());\n","filename":"test\/langtools\/tools\/javac\/T8180141\/MissingLNTEntryForBreakContinueTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -60,2 +56,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -92,1 +88,1 @@\n-        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        ClassModel classFile = ClassFile.of().parse(file.toPath());\n","filename":"test\/langtools\/tools\/javac\/T8180660\/MissingLNTEntryForFinalizerTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,6 +27,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -43,3 +39,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n@@ -74,1 +70,1 @@\n-        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        ClassModel classFile = ClassFile.of().parse(file.toPath());\n","filename":"test\/langtools\/tools\/javac\/T8187805\/BogusRTTAForUnusedVarTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -45,3 +41,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n@@ -86,1 +82,1 @@\n-        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        ClassModel classFile = ClassFile.of().parse(cfile.toPath());\n","filename":"test\/langtools\/tools\/javac\/T8203892\/CheckTargetIsNotAddedAsMarkerInterfaceTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/T8209173\/CodeCompletionExceptTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          jdk.compiler\/com.sun.tools.javac.api\n+ * @enablePreview\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n@@ -44,2 +40,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -72,1 +68,1 @@\n-        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        ClassModel classFile = ClassFile.of().parse(cfile.toPath());\n","filename":"test\/langtools\/tools\/javac\/T8210435\/NoLocalsMustBeReservedForDCEedVarsTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -56,4 +52,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.instruction.ConstantInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.instruction.ConstantInstruction;\n@@ -181,1 +177,1 @@\n-            ClassModel cf = Classfile.of().parse(is.readAllBytes());\n+            ClassModel cf = ClassFile.of().parse(is.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/T8222949\/TestConstantDynamic.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -60,4 +56,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -105,1 +101,1 @@\n-            ClassModel cf = Classfile.of().parse(new ByteArrayInputStream(data).readAllBytes());\n+            ClassModel cf = ClassFile.of().parse(new ByteArrayInputStream(data).readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/TryWithResources\/TwrSimpleClose.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -38,1 +34,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -63,1 +59,1 @@\n-            ClassModel cm = Classfile.of().parse(Objects.requireNonNull(in).readAllBytes());\n+            ClassModel cm = ClassFile.of().parse(Objects.requireNonNull(in).readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/annotations\/ApplicableAnnotationsOnRecords.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -44,1 +40,1 @@\n-import jdk.internal.classfile.ClassModel;\n+import java.lang.classfile.ClassModel;\n","filename":"test\/langtools\/tools\/javac\/annotations\/SyntheticParameters.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *      java.base\/jdk.internal.classfile\n- *      java.base\/jdk.internal.classfile.attribute\n- *      java.base\/jdk.internal.classfile.constantpool\n- *      java.base\/jdk.internal.classfile.instruction\n- *      java.base\/jdk.internal.classfile.components\n@@ -53,2 +49,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -118,1 +114,1 @@\n-        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        ClassModel classFile = ClassFile.of().parse(cfile.toPath());\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/TypeAnnotationsPositionsOnRecords.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *      java.base\/jdk.internal.classfile\n- *      java.base\/jdk.internal.classfile.attribute\n- *      java.base\/jdk.internal.classfile.constantpool\n- *      java.base\/jdk.internal.classfile.instruction\n- *      java.base\/jdk.internal.classfile.components\n@@ -53,2 +49,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -106,1 +102,1 @@\n-        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        ClassModel classFile = ClassFile.of().parse(cfile.toPath());\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/VariablesDeclaredWithVarTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -45,3 +41,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n@@ -105,1 +101,1 @@\n-        ClassModel cm = Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$1.class\"));\n+        ClassModel cm = ClassFile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$1.class\"));\n@@ -119,1 +115,1 @@\n-        ClassModel cm = Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n+        ClassModel cm = ClassFile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n@@ -130,1 +126,1 @@\n-                Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$Inner.class\"));\n+                ClassFile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$Inner.class\"));\n@@ -145,1 +141,1 @@\n-                    Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n+                    ClassFile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n@@ -157,1 +153,1 @@\n-                    Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$2.class\"));\n+                    ClassFile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$2.class\"));\n@@ -172,1 +168,1 @@\n-        ClassModel cm = Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n+        ClassModel cm = ClassFile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/AnonymousClassTest.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -66,1 +66,1 @@\n-            return Classfile.of().parse(in.readAllBytes());\n+            return ClassFile.of().parse(in.readAllBytes());\n@@ -72,1 +72,1 @@\n-            return Classfile.of().parse(in.readAllBytes());\n+            return ClassFile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/ClassfileTestHelper.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -36,1 +32,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -150,1 +146,1 @@\n-        ClassModel cm = Classfile.of().parse(classFile.toPath());\n+        ClassModel cm = ClassFile.of().parse(classFile.toPath());\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/CombinationsTargetTest1.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -36,1 +32,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -169,1 +165,1 @@\n-        ClassModel cm = Classfile.of().parse(classFile.toPath());\n+        ClassModel cm = ClassFile.of().parse(classFile.toPath());\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/CombinationsTargetTest2.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -29,5 +30,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/CombinationsTargetTest3.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -35,6 +35,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/DeadCode.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -32,6 +32,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/InstanceInitializer.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -34,6 +34,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/NewTypeArguments.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -37,6 +37,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -72,1 +68,1 @@\n-            return Classfile.of().parse(in.readAllBytes());\n+            return ClassFile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/NoTargetAnnotations.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -35,6 +35,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/Scopes.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -33,6 +33,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/StaticInitializer.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,2 +34,2 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.TypeAnnotation;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.TypeAnnotation;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/SyntheticParameters.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -40,1 +36,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/T8008762.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -39,1 +35,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/T8008769.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -39,1 +35,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/T8010015.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,6 +36,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -43,2 +39,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -324,1 +320,1 @@\n-                    cm = Classfile.of().parse(new File(testloc+clazz).toPath());\n+                    cm = ClassFile.of().parse(new File(testloc+clazz).toPath());\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TestAnonInnerClasses.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -35,2 +31,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -207,1 +203,1 @@\n-                cm = Classfile.of().parse(in.readAllBytes());\n+                cm = ClassFile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TestNewCastArray.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -39,3 +35,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TypeAnnotationPropagationTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -36,5 +36,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TypeCasts.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -35,5 +35,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/Wildcards.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ClassExtends.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ClassTypeParam.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,1 +34,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT;\n+import static java.lang.classfile.TypeAnnotation.TargetType.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ConstructorInvocationTypeArgument.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,1 +34,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Constructors.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -166,1 +166,1 @@\n-        return Classfile.of().parse(clazzFile.toPath());\n+        return ClassFile.of().parse(clazzFile.toPath());\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Driver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -31,6 +31,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ExceptionParameters.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,1 +34,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Fields.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/FromSpecification.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -31,6 +31,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Initializers.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -41,1 +37,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Lambda.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,1 +34,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.METHOD_INVOCATION_TYPE_ARGUMENT;\n+import static java.lang.classfile.TypeAnnotation.TargetType.METHOD_INVOCATION_TYPE_ARGUMENT;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodInvocationTypeArgument.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodParameters.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodReceivers.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodReturns.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodThrows.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -31,6 +31,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MethodTypeParam.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -31,6 +31,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/MultiCatch.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/NestedTypes.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/NewObjects.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ReferenceInfoUtil.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/RepeatingTypeAnnotations.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,1 +34,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.RESOURCE_VARIABLE;\n+import static java.lang.classfile.TypeAnnotation.TargetType.RESOURCE_VARIABLE;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ResourceVariable.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/TypeCasts.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import static jdk.internal.classfile.TypeAnnotation.TargetType.*;\n+import static java.lang.classfile.TypeAnnotation.TargetType.*;\n@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/TypeTests.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -45,4 +41,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.instruction.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.instruction.*;\n@@ -103,1 +99,1 @@\n-        cf = Classfile.of().parse(curPath.resolve(\"IntersectionTypeTest.class\"));\n+        cf = ClassFile.of().parse(curPath.resolve(\"IntersectionTypeTest.class\"));\n","filename":"test\/langtools\/tools\/javac\/cast\/intersection\/DuplicatedCheckcastTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- *  @modules java.base\/jdk.internal.classfile\n- *           java.base\/jdk.internal.classfile.attribute\n- *           java.base\/jdk.internal.classfile.constantpool\n- *           java.base\/jdk.internal.classfile.instruction\n- *           java.base\/jdk.internal.classfile.components\n- *           java.base\/jdk.internal.classfile.impl\n+ *  @enablePreview\n+ *  @modules java.base\/jdk.internal.classfile.impl\n@@ -40,2 +36,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -52,1 +48,1 @@\n-            ClassModel cf = Classfile.of().parse(classFile.toPath());\n+            ClassModel cf = ClassFile.of().parse(classFile.toPath());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/InnerClasses\/SyntheticClasses.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -43,2 +39,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.*;\n@@ -82,1 +78,1 @@\n-        ClassModel cf = Classfile.of().parse(curPath.resolve(\"Test.class\"));\n+        ClassModel cf = ClassFile.of().parse(curPath.resolve(\"Test.class\"));\n","filename":"test\/langtools\/tools\/javac\/classfiles\/T8255757\/T8255757.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -42,2 +38,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/AnnotationDefault\/AnnotationDefaultTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n@@ -73,1 +73,1 @@\n-            BufWriter buf = new BufWriterImpl(ConstantPoolBuilder.of(), (ClassfileImpl) Classfile.of());\n+            BufWriter buf = new BufWriterImpl(ConstantPoolBuilder.of(), (ClassFileImpl) ClassFile.of());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/AnnotationDefault\/AnnotationDefaultVerifier.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n-            java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -41,2 +37,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.EnclosingMethodAttribute;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/EnclosingMethod\/EnclosingMethodTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/LineNumberTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -72,1 +72,1 @@\n-                        classFile = Classfile.of().parse(input.readAllBytes());\n+                        classFile = ClassFile.of().parse(input.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/LineNumberTestBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/MultipleRecordPatterns.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/RuleSwitchBreaks.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/StringSwitchBreaks.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5,6 +5,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -22,2 +18,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -27,1 +23,1 @@\n-        ClassModel someTestIn = Classfile.of().parse(T8050993.class.getResourceAsStream(\"T8050993.class\").readAllBytes());\n+        ClassModel someTestIn = ClassFile.of().parse(T8050993.class.getResourceAsStream(\"T8050993.class\").readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/T8050993.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -44,1 +40,1 @@\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.attribute.*;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LocalVariableTable\/LocalVariableTableTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -63,1 +63,1 @@\n-            this.classFile = Classfile.of().parse(getClassFile(clazz).toPath());\n+            this.classFile = ClassFile.of().parse(getClassFile(clazz).toPath());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LocalVariableTable\/LocalVariableTestBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -43,1 +39,1 @@\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.attribute.*;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LocalVariableTable\/LocalVariableTypeTableTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -42,2 +38,2 @@\n-import jdk.internal.classfile.AccessFlags;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.AccessFlags;\n+import java.lang.classfile.ClassFile;\n@@ -64,1 +60,1 @@\n-        AccessFlags accessFlags = Classfile.of().parse(outdir.resolve(\"module-info.class\"))\n+        AccessFlags accessFlags = ClassFile.of().parse(outdir.resolve(\"module-info.class\"))\n@@ -67,1 +63,1 @@\n-            throw new RuntimeException(\"Classfile doesn't have module access flag\");\n+            throw new RuntimeException(\"ClassFile doesn't have module access flag\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Module\/ModuleFlagTest.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Module\/ModuleTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n@@ -72,1 +72,1 @@\n-        ClassModel classFile = Classfile.of().parse(modulePath.resolve(\"module-info.class\"));\n+        ClassModel classFile = ClassFile.of().parse(modulePath.resolve(\"module-info.class\"));\n@@ -196,1 +196,1 @@\n-        OPEN(\"open\", Classfile.ACC_OPEN);\n+        OPEN(\"open\", ClassFile.ACC_OPEN);\n@@ -213,3 +213,3 @@\n-        TRANSITIVE(\"transitive\", Classfile.ACC_TRANSITIVE),\n-        STATIC(\"static\", Classfile.ACC_STATIC_PHASE),\n-        MANDATED(\"\", Classfile.ACC_MANDATED);\n+        TRANSITIVE(\"transitive\", ClassFile.ACC_TRANSITIVE),\n+        STATIC(\"static\", ClassFile.ACC_STATIC_PHASE),\n+        MANDATED(\"\", ClassFile.ACC_MANDATED);\n@@ -232,1 +232,1 @@\n-        SYNTHETIC(\"\", Classfile.ACC_SYNTHETIC);\n+        SYNTHETIC(\"\", ClassFile.ACC_SYNTHETIC);\n@@ -249,1 +249,1 @@\n-        SYNTHETIC(\"\", Classfile.ACC_SYNTHETIC);\n+        SYNTHETIC(\"\", ClassFile.ACC_SYNTHETIC);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Module\/ModuleTestBase.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/ConstructorTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.SignatureAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.SignatureAttribute;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/Driver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/EnumTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/ExceptionTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/FieldTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/InnerClassTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/MethodParameterTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/MethodTypeBoundTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/ReturnTypeTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/AnonymousClassTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/InnerClassTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/LocalClassTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/MixTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/ModuleInfoTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -42,2 +38,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -55,1 +51,1 @@\n-                Classfile.of().parse(getClassFile(NoSourceFileAttribute.class).toPath()).findAttribute(Attributes.SOURCE_FILE).orElse(null),\n+                ClassFile.of().parse(getClassFile(NoSourceFileAttribute.class).toPath()).findAttribute(Attributes.SOURCE_FILE).orElse(null),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/NoSourceFileAttribute.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n@@ -53,1 +53,1 @@\n-        assertAttributePresent(Classfile.of().parse(getClassFile(classToTest).toPath()), fileName);\n+        assertAttributePresent(ClassFile.of().parse(getClassFile(classToTest).toPath()), fileName);\n@@ -63,1 +63,1 @@\n-        assertAttributePresent(Classfile.of().parse(getClassFile(classToTest + \".class\").toPath()), fileName);\n+        assertAttributePresent(ClassFile.of().parse(getClassFile(classToTest + \".class\").toPath()), fileName);\n@@ -73,1 +73,1 @@\n-        assertAttributePresent(Classfile.of().parse(classToTest), fileName);\n+        assertAttributePresent(ClassFile.of().parse(classToTest), fileName);\n@@ -90,1 +90,1 @@\n-                classFile = Classfile.of().parse(input.readAllBytes());\n+                classFile = ClassFile.of().parse(input.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/SourceFileTestBase.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import com.sun.tools.classfile.Attribute;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.SourceFile_attribute;\n+\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import javax.tools.JavaFileObject;\n+\n+import toolbox.ToolBox;\n+\n+\/**\n+ * Base class for Source file attribute tests. Checks expected file name for specified classes in the SourceFile attribute.\n+ * To add new tests you should extend the SourceFileTestBase class and invoke {@link #test} for static sources\n+ * or {@link #compileAndTest} for generated sources. For more information see corresponding methods.\n+ *\n+ * @see #test\n+ * @see #compileAndTest\n+ *\/\n+public class SourceFileTestBase_legacy extends TestBase {\n+    \/**\n+     * Checks expected fileName for the specified class in the SourceFile attribute.\n+     *\n+     * @param classToTest class to check its SourceFile attribute\n+     * @param fileName    expected name of the file from which the test file is compiled.\n+     *\/\n+    protected void test(Class<?> classToTest, String fileName) throws Exception {\n+        assertAttributePresent(ClassFile.read(getClassFile(classToTest)), fileName);\n+    }\n+\n+    \/**\n+     * Checks expected fileName for the specified class in the SourceFile attribute.\n+     *\n+     * @param classToTest class name to check its SourceFile attribute\n+     * @param fileName    expected name of the file from which the test file is compiled.\n+     *\/\n+    protected void test(String classToTest, String fileName) throws Exception {\n+        assertAttributePresent(ClassFile.read(getClassFile(classToTest + \".class\")), fileName);\n+    }\n+\n+    \/**\n+     * Checks expected fileName for the specified class in the SourceFile attribute.\n+     *\n+     * @param classToTest path of class to check its SourceFile attribute\n+     * @param fileName    expected name of the file from which the test file is compiled.\n+     *\/\n+    protected void test(Path classToTest, String fileName) throws Exception {\n+        assertAttributePresent(ClassFile.read(classToTest), fileName);\n+    }\n+\n+    \/**\n+     * Compiles sourceCode and for each specified class name checks the SourceFile attribute.\n+     * The file name is extracted from source code.\n+     *\n+     * @param sourceCode    source code to compile\n+     * @param classesToTest class names to check their SourceFile attribute.\n+     *\/\n+    protected void compileAndTest(String sourceCode, String... classesToTest) throws Exception {\n+\n+        Map<String, ? extends JavaFileObject> classes = compile(sourceCode).getClasses();\n+        String fileName = ToolBox.getJavaFileNameFromSource(sourceCode);\n+        for (String className : classesToTest) {\n+            ClassFile classFile;\n+            try (InputStream input = classes.get(className).openInputStream()) {\n+                classFile = ClassFile.read(input);\n+            }\n+            assertAttributePresent(classFile, fileName);\n+        }\n+    }\n+\n+    private void assertAttributePresent(ClassFile classFile, String fileName) throws Exception {\n+\n+        \/\/We need to count attributes with the same names because there is no appropriate API in the ClassFile.\n+\n+        List<SourceFile_attribute> sourceFileAttributes = new ArrayList<>();\n+        for (Attribute a : classFile.attributes.attrs) {\n+            if (Attribute.SourceFile.equals(a.getName(classFile.constant_pool))) {\n+                sourceFileAttributes.add((SourceFile_attribute) a);\n+            }\n+        }\n+\n+        assertEquals(sourceFileAttributes.size(), 1, \"Should be the only SourceFile attribute\");\n+\n+        SourceFile_attribute attribute = sourceFileAttributes.get(0);\n+\n+        assertEquals(classFile.constant_pool.getUTF8Info(attribute.attribute_name_index).value,\n+                Attribute.SourceFile, \"Incorrect attribute name\");\n+        assertEquals(classFile.constant_pool.getUTF8Info(attribute.sourcefile_index).value, fileName,\n+                \"Incorrect source file name\");\n+        assertEquals(attribute.attribute_length, 2, \"Incorrect attribute length\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/SourceFileTestBase_legacy.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/tools\/lib \/tools\/javac\/lib ..\/lib\n+ * @library \/tools\/lib \/tools\/javac\/lib ..\/lib_legacy\n@@ -31,7 +31,2 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n- * @build toolbox.ToolBox InMemoryFileManager TestBase SourceFileTestBase\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox InMemoryFileManager TestBase SourceFileTestBase_legacy\n@@ -47,1 +42,1 @@\n-public class SyntheticClassTest extends SourceFileTestBase {\n+public class SyntheticClassTest extends SourceFileTestBase_legacy {\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/SyntheticClassTest.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/TopLevelClassesOneFileTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateInnerClassConstructorsTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateInnerClassMembersTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateSiblingsTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AssertFieldTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/BridgeMethodForGenericMethodTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,7 +32,2 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n- * @library \/tools\/lib \/tools\/javac\/lib ..\/lib\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @library \/tools\/lib \/tools\/javac\/lib ..\/lib_legacy\n@@ -40,1 +35,1 @@\n- * @build SyntheticTestDriver ExpectedClass ExpectedClasses\n+ * @build SyntheticTestDriver_legacy ExpectedClass ExpectedClasses\n@@ -42,1 +37,1 @@\n- * @run main SyntheticTestDriver BridgeMethodsForLambdaTargetRelease14Test\n+ * @run main SyntheticTestDriver_legacy BridgeMethodsForLambdaTargetRelease14Test\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/BridgeMethodsForLambdaTargetRelease14Test.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/BridgeMethodsForLambdaTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/EnumTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/PackageInfoTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.SyntheticAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.SyntheticAttribute;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/SyntheticTestDriver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,212 @@\n+\/*\n+ * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.regex.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.sun.tools.classfile.*;\n+\n+\/**\n+ * The tests work as follows. Firstly, it looks through the test cases\n+ * and extracts the appropriate compiled classes. Each test case contains\n+ * a set of expected classes, methods and fields. Those class members must not have\n+ * the Synthetic attribute, while other found classes, methods and fields must have\n+ * the Synthetic attribute if they are not in the set of expected class members.\n+ *\n+ * Each test executes SyntheticTestDriver specifying the name of test cases and\n+ * the number of expected synthetic classes. Each test class is annotated by\n+ * annotations which contains non-synthetic class members.\n+ *\n+ * See the appropriate class for more information about a test case.\n+ *\/\n+public class SyntheticTestDriver_legacy extends TestResult {\n+\n+    private static final String ACC_SYNTHETIC = \"ACC_SYNTHETIC\";\n+\n+    private final String testCaseName;\n+    private final Map<String, ClassFile> classes;\n+    private final Map<String, ExpectedClass> expectedClasses;\n+\n+    public static void main(String[] args)\n+            throws TestFailedException, ConstantPoolException, IOException, ClassNotFoundException {\n+        if (args.length != 1 && args.length != 2) {\n+            throw new IllegalArgumentException(\"Usage: SyntheticTestDriver <class-name> [<number-of-synthetic-classes>]\");\n+        }\n+        int numberOfSyntheticClasses = args.length == 1 ? 0 : Integer.parseInt(args[1]);\n+        new SyntheticTestDriver_legacy(args[0]).test(numberOfSyntheticClasses);\n+    }\n+\n+    public SyntheticTestDriver_legacy(String testCaseName) throws IOException, ConstantPoolException, ClassNotFoundException {\n+        Class<?> clazz = Class.forName(testCaseName);\n+        this.testCaseName = testCaseName;\n+        this.expectedClasses = Stream.of(clazz.getAnnotationsByType(ExpectedClass.class))\n+                .collect(Collectors.toMap(ExpectedClass::className, Function.identity()));\n+        this.classes = new HashMap<>();\n+        Path classDir = getClassDir().toPath();\n+        Pattern filePattern = Pattern.compile(Pattern.quote(testCaseName.replace('.', File.separatorChar)) + \".*\\\\.class\");\n+        List<Path> paths = Files.walk(classDir)\n+                .map(p -> classDir.relativize(p.toAbsolutePath()))\n+                .filter(p -> filePattern.matcher(p.toString()).matches())\n+                .collect(Collectors.toList());\n+        for (Path path : paths) {\n+            String className = path.toString().replace(\".class\", \"\").replace(File.separatorChar, '.');\n+            classes.put(className, readClassFile(classDir.resolve(path).toFile()));\n+        }\n+        if (classes.isEmpty()) {\n+            throw new RuntimeException(\"Classes have not been found.\");\n+        }\n+        boolean success = classes.entrySet().stream()\n+                .allMatch(e -> e.getKey().startsWith(testCaseName));\n+        if (!success) {\n+            classes.forEach((className, $) -> printf(\"Found class: %s\\n\", className));\n+            throw new RuntimeException(\"Found classes are not from the test case : \" + testCaseName);\n+        }\n+    }\n+\n+    private String getMethodName(ClassFile classFile, Method method)\n+            throws ConstantPoolException, Descriptor.InvalidDescriptor {\n+        String methodName = method.getName(classFile.constant_pool);\n+        String parameters = method.descriptor.getParameterTypes(classFile.constant_pool);\n+        return methodName + parameters;\n+    }\n+\n+    public void test(int expectedNumberOfSyntheticClasses) throws TestFailedException {\n+        try {\n+            addTestCase(testCaseName);\n+            Set<String> foundClasses = new HashSet<>();\n+\n+            int numberOfSyntheticClasses = 0;\n+            for (Map.Entry<String, ClassFile> entry : classes.entrySet()) {\n+                String className = entry.getKey();\n+                ClassFile classFile = entry.getValue();\n+                foundClasses.add(className);\n+                if (testAttribute(\n+                        classFile,\n+                        () -> (Synthetic_attribute) classFile.getAttribute(Attribute.Synthetic),\n+                        classFile.access_flags::getClassFlags,\n+                        expectedClasses.keySet(),\n+                        className,\n+                        \"Testing class \" + className)) {\n+                    ++numberOfSyntheticClasses;\n+                }\n+                ExpectedClass expectedClass = expectedClasses.get(className);\n+                Set<String> expectedMethods = expectedClass != null\n+                        ? toSet(expectedClass.expectedMethods())\n+                        : new HashSet<>();\n+                int numberOfSyntheticMethods = 0;\n+                Set<String> foundMethods = new HashSet<>();\n+                for (Method method : classFile.methods) {\n+                    String methodName = getMethodName(classFile, method);\n+                    foundMethods.add(methodName);\n+                    if (testAttribute(\n+                            classFile,\n+                            () -> (Synthetic_attribute) method.attributes.get(Attribute.Synthetic),\n+                            method.access_flags::getMethodFlags,\n+                            expectedMethods,\n+                            methodName,\n+                            \"Testing method \" + methodName + \" in class \"\n+                                    + className)) {\n+                        ++numberOfSyntheticMethods;\n+                    }\n+                }\n+                checkContains(foundMethods, expectedMethods,\n+                        \"Checking that all methods of class \" + className\n+                                + \" without Synthetic attribute have been found\");\n+                checkEquals(numberOfSyntheticMethods,\n+                        expectedClass == null ? 0 : expectedClass.expectedNumberOfSyntheticMethods(),\n+                        \"Checking number of synthetic methods in class: \" + className);\n+\n+                Set<String> expectedFields = expectedClass != null\n+                        ? toSet(expectedClass.expectedFields())\n+                        : new HashSet<>();\n+                int numberOfSyntheticFields = 0;\n+                Set<String> foundFields = new HashSet<>();\n+                for (Field field : classFile.fields) {\n+                    String fieldName = field.getName(classFile.constant_pool);\n+                    foundFields.add(fieldName);\n+                    if (testAttribute(\n+                            classFile,\n+                            () -> (Synthetic_attribute) field.attributes.get(Attribute.Synthetic),\n+                            field.access_flags::getFieldFlags,\n+                            expectedFields,\n+                            fieldName,\n+                            \"Testing field \" + fieldName + \" in class \"\n+                                    + className)) {\n+                        ++numberOfSyntheticFields;\n+                    }\n+                }\n+                checkContains(foundFields, expectedFields,\n+                        \"Checking that all fields of class \" + className\n+                                + \" without Synthetic attribute have been found\");\n+                checkEquals(numberOfSyntheticFields,\n+                        expectedClass == null ? 0 : expectedClass.expectedNumberOfSyntheticFields(),\n+                        \"Checking number of synthetic fields in class: \" + className);\n+            }\n+            checkContains(foundClasses, expectedClasses.keySet(),\n+                    \"Checking that all classes have been found\");\n+            checkEquals(numberOfSyntheticClasses, expectedNumberOfSyntheticClasses,\n+                    \"Checking number of synthetic classes\");\n+        } catch (Exception e) {\n+            addFailure(e);\n+        } finally {\n+            checkStatus();\n+        }\n+    }\n+\n+    private boolean testAttribute(ClassFile classFile,\n+                               Supplier<Synthetic_attribute> getSyntheticAttribute,\n+                               Supplier<Set<String>> getAccessFlags,\n+                               Set<String> expectedMembers, String memberName,\n+                               String info) throws ConstantPoolException {\n+        echo(info);\n+        String className = classFile.getName();\n+        Synthetic_attribute attr = getSyntheticAttribute.get();\n+        Set<String> flags = getAccessFlags.get();\n+        if (expectedMembers.contains(memberName)) {\n+            checkNull(attr, \"Member must not have synthetic attribute : \"\n+                    + memberName);\n+            checkFalse(flags.contains(ACC_SYNTHETIC),\n+                    \"Member must not have synthetic flag : \" + memberName\n+                            + \" in class : \" + className);\n+            return false;\n+        } else {\n+            return checkNull(attr, \"Synthetic attribute should not be generated\")\n+                    && checkTrue(flags.contains(ACC_SYNTHETIC), \"Member must have synthetic flag : \"\n+                                + memberName + \" in class : \" + className);\n+        }\n+    }\n+\n+    private Set<String> toSet(String[] strings) {\n+        HashSet<String> set = new HashSet<>();\n+        Collections.addAll(set, strings);\n+        return set;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/SyntheticTestDriver_legacy.java","additions":212,"deletions":0,"binary":false,"changes":212,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/ThisFieldTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.internal.classfile.Attribute;\n+import java.lang.classfile.Attribute;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/AnnotationsTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForGenericMethodTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerAnnotationTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerClassTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerEnumTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerInterfaceTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForTopLevelClassTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsTestBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsForGenericMethodTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -43,5 +39,5 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n-import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsForLambdaTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsTestBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.AnnotationValue;\n+import java.lang.classfile.*;\n+import java.lang.classfile.AnnotationValue;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/TestAnnotationInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -42,3 +38,3 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.attribute.DeprecatedAttribute;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.attribute.DeprecatedAttribute;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/deprecated\/DeprecatedPackageTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -33,5 +34,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -43,2 +39,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/deprecated\/DeprecatedTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerAnnotationTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerClassTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerEnumTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerInterfaceTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -48,3 +44,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesHierarchyTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInAnonymousClassTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerAnnotationTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerClassTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerEnumTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerInterfaceTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInLocalClassTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -41,3 +37,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.ClassEntry;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesIndexTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesTestBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerAnnotationTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerEnumTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerInterfaceTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumsInInnerClassTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerAnnotationTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerClassTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerEnumTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerInterfaceTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -41,2 +37,2 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassModel;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/NoInnerClassesTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -131,1 +131,1 @@\n-        return Classfile.of().parse(is.readAllBytes());\n+        return ClassFile.of().parse(is.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/lib\/TestBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n-import jdk.internal.classfile.*;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.ConstantPoolException;\n@@ -129,0 +130,1 @@\n+     * @throws ConstantPoolException if constant pool error occurs\n@@ -130,2 +132,2 @@\n-    public ClassModel readClassFile(InputStream is) throws IOException {\n-        return Classfile.of().parse(is.readAllBytes());\n+    public ClassFile readClassFile(InputStream is) throws IOException, ConstantPoolException {\n+        return ClassFile.read(is);\n@@ -140,0 +142,1 @@\n+     * @throws ConstantPoolException if constant pool error occurs\n@@ -141,1 +144,1 @@\n-    public ClassModel readClassFile(JavaFileObject fileObject) throws IOException {\n+    public ClassFile readClassFile(JavaFileObject fileObject) throws IOException, ConstantPoolException {\n@@ -153,0 +156,1 @@\n+     * @throws ConstantPoolException if constant pool error occurs\n@@ -154,1 +158,1 @@\n-    public ClassModel readClassFile(Class<?> clazz) throws IOException {\n+    public ClassFile readClassFile(Class<?> clazz) throws IOException, ConstantPoolException {\n@@ -164,0 +168,1 @@\n+     * @throws ConstantPoolException if constant pool error occurs\n@@ -165,1 +170,1 @@\n-    public ClassModel readClassFile(String className) throws IOException {\n+    public ClassFile readClassFile(String className) throws IOException, ConstantPoolException {\n@@ -175,0 +180,1 @@\n+     * @throws ConstantPoolException if constant pool error occurs\n@@ -176,1 +182,1 @@\n-    public ClassModel readClassFile(File file) throws IOException {\n+    public ClassFile readClassFile(File file) throws IOException, ConstantPoolException {\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/lib_legacy\/TestBase.java","additions":13,"deletions":7,"binary":false,"changes":20,"previous_filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/lib\/TestBase.java","status":"copied"},{"patch":"","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/lib_legacy\/TestResult.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/lib\/TestResult.java","status":"copied"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -43,1 +39,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -188,1 +184,1 @@\n-        ClassModel cf = Classfile.of().parse(file.toPath());\n+        ClassModel cf = ClassFile.of().parse(file.toPath());\n@@ -191,2 +187,2 @@\n-        byte[] Bytes = Classfile.of().transform(cf, ClassTransform\n-                .dropping(ce -> ce instanceof ClassfileVersion || ce instanceof FieldModel)\n+        byte[] Bytes = ClassFile.of().transform(cf, ClassTransform\n+                .dropping(ce -> ce instanceof ClassFileVersion || ce instanceof FieldModel)\n","filename":"test\/langtools\/tools\/javac\/classreader\/8171132\/BadConstantValue.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -37,5 +38,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -62,4 +58,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.instruction.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.instruction.*;\n@@ -171,1 +167,1 @@\n-        ClassModel cf = Classfile.of().parse(testClass);\n+        ClassModel cf = ClassFile.of().parse(testClass);\n","filename":"test\/langtools\/tools\/javac\/classwriter\/IndyCorrectInvocationName.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -37,5 +38,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -61,2 +57,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -139,1 +135,1 @@\n-        ClassModel cf = Classfile.of().parse(testClass);\n+        ClassModel cf = ClassFile.of().parse(testClass);\n","filename":"test\/langtools\/tools\/javac\/code\/CharImmediateValue.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,5 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -37,1 +33,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -44,1 +40,1 @@\n-        ClassModel classModel = Classfile.of().parse(Paths.get(System.getProperty(\"test.classes\"),\n+        ClassModel classModel = ClassFile.of().parse(Paths.get(System.getProperty(\"test.classes\"),\n","filename":"test\/langtools\/tools\/javac\/constDebug\/ConstDebugTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -45,1 +41,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -67,2 +63,2 @@\n-        ClassModel cf = Classfile.of().parse(classfile.toPath());\n-        Classfile.of().transform(cf, ClassTransform.dropping(ce -> ce instanceof ClassfileVersion)\n+        ClassModel cf = ClassFile.of().parse(classfile.toPath());\n+        ClassFile.of().transform(cf, ClassTransform.dropping(ce -> ce instanceof ClassFileVersion)\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/BadClassfile.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,6 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n@@ -38,3 +33,0 @@\n-import jdk.internal.classfile.*;\n-import java.io.File;\n-import java.io.IOException;\n@@ -43,0 +35,10 @@\n+import java.io.File;\n+import java.io.IOException;\n+\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.ConstantPoolException;\n+import com.sun.tools.classfile.Descriptor;\n+import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n+import com.sun.tools.classfile.Method;\n+\n+import static com.sun.tools.classfile.AccessFlags.ACC_STRICT;\n@@ -53,1 +55,2 @@\n-    public static void main(String[] args) throws IOException {\n+    public static void main(String[] args)\n+            throws IOException, ConstantPoolException, InvalidDescriptor {\n@@ -57,1 +60,2 @@\n-    private void run() throws IOException {\n+    private void run()\n+            throws IOException, ConstantPoolException, InvalidDescriptor {\n@@ -69,1 +73,5 @@\n-    void check(String dir, String... fileNames) throws IOException {\n+    void check(String dir, String... fileNames)\n+        throws\n+            IOException,\n+            ConstantPoolException,\n+            Descriptor.InvalidDescriptor {\n@@ -71,1 +79,1 @@\n-            ClassModel classFileToCheck = Classfile.of().parse(new File(dir, fileName).toPath());\n+            ClassFile classFileToCheck = ClassFile.read(new File(dir, fileName));\n@@ -73,2 +81,2 @@\n-            for (MethodModel method : classFileToCheck.methods()) {\n-                if ((method.flags().flagsMask() & Classfile.ACC_STRICT) == 0) {\n+            for (Method method : classFileToCheck.methods) {\n+                if ((method.access_flags.flags & ACC_STRICT) == 0) {\n@@ -76,2 +84,2 @@\n-                            method.methodName().stringValue(),\n-                            classFileToCheck.thisClass().asInternalName()));\n+                            method.getName(classFileToCheck.constant_pool),\n+                            classFileToCheck.getName()));\n@@ -83,0 +91,15 @@\n+\/\/ this version of the code can be used when ClassFile API in not in a preview\n+\/\/    void check(String dir, String... fileNames) throws IOException {\n+\/\/        for (String fileName : fileNames) {\n+\/\/            ClassModel classFileToCheck = ClassFile.of().parse(new File(dir, fileName).toPath());\n+\/\/\n+\/\/            for (MethodModel method : classFileToCheck.methods()) {\n+\/\/                if ((method.flags().flagsMask() & ClassFile.ACC_STRICT) == 0) {\n+\/\/                    errors.add(String.format(offendingMethodErrorMessage,\n+\/\/                            method.methodName().stringValue(),\n+\/\/                            classFileToCheck.thisClass().asInternalName()));\n+\/\/                }\n+\/\/            }\n+\/\/        }\n+\/\/    }\n+\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/CheckACC_STRICTFlagOnDefaultMethodTest.java","additions":40,"deletions":17,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -36,4 +32,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -70,1 +66,1 @@\n-            ClassModel cf = Classfile.of().parse(f.toPath());\n+            ClassModel cf = ClassFile.of().parse(f.toPath());\n@@ -86,1 +82,1 @@\n-            if ((testMethod.flags().flagsMask() & Classfile.ACC_ABSTRACT) != 0) {\n+            if ((testMethod.flags().flagsMask() & ClassFile.ACC_ABSTRACT) != 0) {\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/TestDefaultBody.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -36,1 +32,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -77,1 +73,1 @@\n-            ClassModel cf = Classfile.of().parse(f.toPath());\n+            ClassModel cf = ClassFile.of().parse(f.toPath());\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/TestNoBridgeOnDefaults.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -39,4 +35,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -91,1 +87,1 @@\n-            final ClassModel cf = Classfile.of().parse(file.toPath());\n+            final ClassModel cf = ClassFile.of().parse(file.toPath());\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/super\/TestDirectSuperInterfaceInvoke.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -42,2 +38,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.*;\n@@ -499,1 +495,1 @@\n-            ClassModel cm = Classfile.of().parse(in.readAllBytes());\n+            ClassModel cm = ClassFile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -300,5 +300,3 @@\n-                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile=ALL-UNNAMED\");\n-                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED\");\n-                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\");\n-                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED\");\n-                    pOpts.add(\"--add-exports=java.base\/jdk.internal.classfile.components=ALL-UNNAMED\");\n+                    pOpts.add(\"--enable-preview\");\n+                    pOpts.add(\"--source\");\n+                    pOpts.add(String.valueOf(Runtime.version().feature()));\n","filename":"test\/langtools\/tools\/javac\/diags\/Example.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\/\/ run: exec --add-exports java.base\/jdk.internal.classfile=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED  --add-exports java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.components=ALL-UNNAMED\n+\/\/ run: exec --enable-preview\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/BadConstantValueType\/BadConstantValueType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.attribute.ConstantValueAttribute;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.attribute.ConstantValueAttribute;\n@@ -46,1 +46,1 @@\n-            byte[] bytes = Classfile.of().build(ClassDesc.of(\"Test\"), cb -> {\n+            byte[] bytes = ClassFile.of().build(ClassDesc.of(\"Test\"), cb -> {\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/BadConstantValueType\/processors\/CreateBadClassFile.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\/\/ run: exec --add-exports java.base\/jdk.internal.classfile=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED  --add-exports java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.components=ALL-UNNAMED\n+\/\/ run: exec --enable-preview\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidDefaultInterface\/InvalidDefaultInterface.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -42,1 +42,1 @@\n-            byte[] bytes = Classfile.of().build(ClassDesc.of(\"Test\"), classBuilder -> {\n+            byte[] bytes = ClassFile.of().build(ClassDesc.of(\"Test\"), classBuilder -> {\n@@ -47,1 +47,1 @@\n-                classBuilder.withMethod(\"test\", MethodTypeDesc.of(ConstantDescs.CD_void), Classfile.ACC_PUBLIC, methodBuilder -> {\n+                classBuilder.withMethod(\"test\", MethodTypeDesc.of(ConstantDescs.CD_void), ClassFile.ACC_PUBLIC, methodBuilder -> {\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidDefaultInterface\/processors\/CreateBadClassFile.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\/\/ run: exec --add-exports java.base\/jdk.internal.classfile=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED  --add-exports java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED --add-exports java.base\/jdk.internal.classfile.components=ALL-UNNAMED\n+\/\/ run: exec --enable-preview\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidStaticInterface\/InvalidStaticInterface.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -42,1 +42,1 @@\n-            byte[] bytes = Classfile.of().build(ClassDesc.of(\"Test\"), classBuilder -> {\n+            byte[] bytes = ClassFile.of().build(ClassDesc.of(\"Test\"), classBuilder -> {\n@@ -49,1 +49,1 @@\n-                        Classfile.ACC_PUBLIC | Classfile.ACC_STATIC, methodBuilder -> {\n+                        ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC, methodBuilder -> {\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidStaticInterface\/processors\/CreateBadClassFile.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -43,5 +39,5 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.instruction.FieldInstruction;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.instruction.FieldInstruction;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -66,1 +62,1 @@\n-            final ClassModel cf = Classfile.of().parse(clazz.toPath());\n+            final ClassModel cf = ClassFile.of().parse(clazz.toPath());\n","filename":"test\/langtools\/tools\/javac\/expression\/_super\/NonDirectSuper\/NonDirectSuper.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/file\/SymLinkArchiveTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/file\/SymLinkShortNameTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @enablePreview\n@@ -33,5 +34,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -48,2 +44,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n@@ -101,1 +97,1 @@\n-        ClassModel cf = Classfile.of().parse(classes.resolve(\"HelloWorld.class\"));\n+        ClassModel cf = ClassFile.of().parse(classes.resolve(\"HelloWorld.class\"));\n","filename":"test\/langtools\/tools\/javac\/file\/SymLinkTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,6 +31,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -62,2 +58,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -129,1 +125,1 @@\n-        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        ClassModel classFile = ClassFile.of().parse(file.toPath());\n","filename":"test\/langtools\/tools\/javac\/flow\/LVTHarness.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -42,1 +38,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -150,1 +146,1 @@\n-            ClassModel cf = Classfile.of().parse(is.readAllBytes());\n+            ClassModel cf = ClassFile.of().parse(is.readAllBytes());\n@@ -160,1 +156,1 @@\n-                if ((m.flags().flagsMask() & (Classfile.ACC_SYNTHETIC | Classfile.ACC_BRIDGE)) != 0) {\n+                if ((m.flags().flagsMask() & (ClassFile.ACC_SYNTHETIC | ClassFile.ACC_BRIDGE)) != 0) {\n","filename":"test\/langtools\/tools\/javac\/generics\/bridges\/BridgeHarness.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -64,1 +60,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -105,1 +101,1 @@\n-        byte[] bytes = Classfile.of().build(ClassDesc.of(name), classBuilder -> {\n+        byte[] bytes = ClassFile.of().build(ClassDesc.of(name), classBuilder -> {\n@@ -108,1 +104,1 @@\n-                    .withFlags(Classfile.ACC_ABSTRACT | Classfile.ACC_INTERFACE | Classfile.ACC_PUBLIC);\n+                    .withFlags(ClassFile.ACC_ABSTRACT | ClassFile.ACC_INTERFACE | ClassFile.ACC_PUBLIC);\n","filename":"test\/langtools\/tools\/javac\/importscope\/T8193717.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,5 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -39,2 +35,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.*;\n@@ -44,1 +40,1 @@\n-        ClassModel cls = Classfile.of().parse(ClassRefDupInConstantPoolTest.class.\n+        ClassModel cls = ClassFile.of().parse(ClassRefDupInConstantPoolTest.class.\n","filename":"test\/langtools\/tools\/javac\/jvm\/ClassRefDupInConstantPoolTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,3 +34,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n+import java.lang.classfile.constantpool.*;\n@@ -81,1 +77,1 @@\n-            c = Classfile.of().parse(classFile.toPath());\n+            c = ClassFile.of().parse(classFile.toPath());\n","filename":"test\/langtools\/tools\/javac\/lambda\/ByteCodeTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,5 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @modules jdk.jdeps\/com.sun.tools.classfile\n@@ -39,1 +35,1 @@\n-import jdk.internal.classfile.*;\n+import com.sun.tools.classfile.*;\n@@ -47,1 +43,2 @@\n-        ClassModel cm = getClassFile(\"LambdaTestStrictFPFlag$Test.class\");\n+        ClassFile cf = getClassFile(\"LambdaTestStrictFPFlag$Test.class\");\n+        ConstantPool cp = cf.constant_pool;\n@@ -49,3 +46,3 @@\n-        for (MethodModel meth: cm.methods()) {\n-            if (meth.methodName().stringValue().startsWith(\"lambda$\")) {\n-                if ((meth.flags().flagsMask() & Classfile.ACC_STRICT) == 0){\n+        for (Method meth: cf.methods) {\n+            if (meth.getName(cp).startsWith(\"lambda$\")) {\n+                if ((meth.access_flags.flags & AccessFlags.ACC_STRICT) == 0) {\n@@ -62,1 +59,18 @@\n-    ClassModel getClassFile(String name) throws IOException {\n+\/\/ this version of the code can be used when ClassFile API in not in a preview\n+\/\/    void run() throws Exception {\n+\/\/        ClassModel cm = getClassFile(\"LambdaTestStrictFPFlag$Test.class\");\n+\/\/        boolean found = false;\n+\/\/        for (MethodModel meth: cm.methods()) {\n+\/\/            if (meth.methodName().stringValue().startsWith(\"lambda$\")) {\n+\/\/                if ((meth.flags().flagsMask() & ClassFile.ACC_STRICT) == 0){\n+\/\/                    throw new Exception(\"strict flag missing from lambda\");\n+\/\/                }\n+\/\/                found = true;\n+\/\/            }\n+\/\/        }\n+\/\/        if (!found) {\n+\/\/            throw new Exception(\"did not find lambda method\");\n+\/\/        }\n+\/\/    }\n+\n+    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {\n@@ -64,3 +78,5 @@\n-        assert url != null;\n-        try (InputStream in = url.openStream()) {\n-            return Classfile.of().parse(in.readAllBytes());\n+        InputStream in = url.openStream();\n+        try {\n+            return ClassFile.read(in);\n+        } finally {\n+            in.close();\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaTestStrictFPFlag.java","additions":30,"deletions":14,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -41,2 +37,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -90,1 +86,1 @@\n-        ClassModel cm = Classfile.of().parse(Objects.requireNonNull(getClass().getResource(c.getName() + \".class\")).openStream().readAllBytes());\n+        ClassModel cm = ClassFile.of().parse(Objects.requireNonNull(getClass().getResource(c.getName() + \".class\")).openStream().readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/lambda\/LocalVariableTable.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -60,2 +56,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n@@ -118,1 +114,1 @@\n-            ClassModel cf = Classfile.of().parse(compiledTest.toPath());\n+            ClassModel cf = ClassFile.of().parse(compiledTest.toPath());\n","filename":"test\/langtools\/tools\/javac\/lambda\/TestBootstrapMethodsCount.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,6 +31,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -59,4 +55,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.instruction.InvokeDynamicInstruction;\n@@ -260,1 +256,1 @@\n-            ClassModel cm = Classfile.of().parse(is.readAllBytes());\n+            ClassModel cm = ClassFile.of().parse(is.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/lambda\/TestInvokeDynamic.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -43,4 +39,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.instruction.InvokeDynamicInstruction;\n@@ -213,1 +209,1 @@\n-            ClassModel cf = Classfile.of().parse(is.readAllBytes());\n+            ClassModel cf = ClassFile.of().parse(is.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/lambda\/bytecode\/TestLambdaBytecode.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -43,5 +39,5 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n-import jdk.internal.classfile.instruction.InvokeDynamicInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.InvokeDynamicEntry;\n+import java.lang.classfile.constantpool.MethodHandleEntry;\n+import java.lang.classfile.instruction.InvokeDynamicInstruction;\n@@ -215,1 +211,1 @@\n-            ClassModel cm = Classfile.of().parse(is.readAllBytes());\n+            ClassModel cm = ClassFile.of().parse(is.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/lambda\/bytecode\/TestLambdaBytecodeTargetRelease14.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,5 +27,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *     java.base\/jdk.internal.classfile.attribute\n- *     java.base\/jdk.internal.classfile.constantpool\n- *     java.base\/jdk.internal.classfile.instruction\n- *     java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n+ * @modules\n@@ -49,4 +46,4 @@\n-import jdk.internal.classfile.BootstrapMethodEntry;\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.BootstrapMethodsAttribute;\n-import jdk.internal.classfile.constantpool.MethodHandleEntry;\n+import java.lang.classfile.BootstrapMethodEntry;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.BootstrapMethodsAttribute;\n+import java.lang.classfile.constantpool.MethodHandleEntry;\n@@ -146,1 +143,1 @@\n-                cm = Classfile.of().parse(input.readAllBytes());\n+                cm = ClassFile.of().parse(input.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/lambda\/deduplication\/DeduplicationTest.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -48,1 +44,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -90,1 +86,1 @@\n-                    ClassModel cf = Classfile.of().parse(in.readAllBytes());\n+                    ClassModel cf = ClassFile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/lambda\/lambdaNaming\/TestNonSerializableLambdaNameStability.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -56,2 +57,1 @@\n-            .vmOptions(\"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n-                    \"--add-exports\", \"java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\")\n+            .vmOptions(\"--enable-preview\", \"--source\", String.valueOf(Runtime.version().feature()))\n","filename":"test\/langtools\/tools\/javac\/launcher\/GetResourceTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -43,2 +39,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.ModuleResolutionAttribute;\n@@ -546,1 +542,1 @@\n-    @Test\n+    \/\/@Test temporary disabled as enabled preview allows no-param main\n@@ -554,1 +550,1 @@\n-    @Test\n+    \/\/@Test temporary disabled as enabled preview allows non-public main\n@@ -562,1 +558,1 @@\n-    @Test\n+    \/\/@Test temporary disabled as enabled preview allows non-static main\n@@ -723,1 +719,1 @@\n-            ClassModel cf = Classfile.of().parse(moduleInfoFile);\n+            ClassModel cf = ClassFile.of().parse(moduleInfoFile);\n@@ -725,1 +721,1 @@\n-            byte[] newBytes = Classfile.of().transform(cf, ClassTransform.dropping(ce -> ce instanceof Attributes)\n+            byte[] newBytes = ClassFile.of().transform(cf, ClassTransform.dropping(ce -> ce instanceof Attributes)\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- *      --add-exports java.base\/jdk.internal.classfile=ALL-UNNAMED\n+ *      --enable-preview\n@@ -42,2 +42,2 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n@@ -155,1 +155,1 @@\n-        ClassModel cf = Classfile.of().parse(in.readAllBytes());\n+        ClassModel cf = ClassFile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/launcher\/src\/CLTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,5 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -35,2 +31,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -58,1 +54,1 @@\n-        ClassModel self = Classfile.of().parse(ConditionalLineNumberTest.class.getResourceAsStream(\"ConditionalLineNumberTest.class\").readAllBytes());\n+        ClassModel self = ClassFile.of().parse(ConditionalLineNumberTest.class.getResourceAsStream(\"ConditionalLineNumberTest.class\").readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/ConditionalLineNumberTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,5 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -35,2 +31,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -87,1 +83,1 @@\n-        ClassModel self = Classfile.of().parse(FinallyLineNumberTest.class.getResourceAsStream(\"FinallyLineNumberTest.class\").readAllBytes());\n+        ClassModel self = ClassFile.of().parse(FinallyLineNumberTest.class.getResourceAsStream(\"FinallyLineNumberTest.class\").readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/FinallyLineNumberTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5,5 +5,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -13,2 +9,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -28,2 +24,2 @@\n-        if (line != 54) {\n-            error(String.format(\"LineNumberTable contains wrong line number - expected %d, found %d\", 54, line));\n+        if (line != 50) {\n+            error(String.format(\"LineNumberTable contains wrong line number - expected %d, found %d\", 50, line));\n@@ -34,1 +30,1 @@\n-        ClassModel self = Classfile.of().parse(NestedLineNumberTest.Test.class.getResourceAsStream(\"NestedLineNumberTest$Test.class\").readAllBytes());\n+        ClassModel self = ClassFile.of().parse(NestedLineNumberTest.Test.class.getResourceAsStream(\"NestedLineNumberTest$Test.class\").readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/NestedLineNumberTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -5,5 +5,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -12,2 +8,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -43,7 +39,7 @@\n-                new SimpleEntry<>(29, 0),\n-                new SimpleEntry<>(30, 4),\n-                new SimpleEntry<>(32, 9),\n-                new SimpleEntry<>(33, 16),\n-                new SimpleEntry<>(34, 32),\n-                new SimpleEntry<>(35, 46),\n-                new SimpleEntry<>(36, 52)\n+                new SimpleEntry<>(25, 0),\n+                new SimpleEntry<>(26, 4),\n+                new SimpleEntry<>(28, 9),\n+                new SimpleEntry<>(29, 16),\n+                new SimpleEntry<>(30, 32),\n+                new SimpleEntry<>(31, 46),\n+                new SimpleEntry<>(32, 52)\n@@ -60,2 +56,2 @@\n-                                       se.getLineNumber() == 34)) {\n-                throw new AssertionError(\"Should go through line 34!\");\n+                                       se.getLineNumber() == 30)) {\n+                throw new AssertionError(\"Should go through line 30!\");\n@@ -67,1 +63,1 @@\n-        ClassModel self = Classfile.of().parse(Objects.requireNonNull(Test.class.getResourceAsStream(\"NullCheckLineNumberTest$Test.class\")).readAllBytes());\n+        ClassModel self = ClassFile.of().parse(Objects.requireNonNull(Test.class.getResourceAsStream(\"NullCheckLineNumberTest$Test.class\")).readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/NullCheckLineNumberTest.java","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -37,4 +33,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -131,1 +127,1 @@\n-            ClassModel cf = Classfile.of().parse(f.toPath());\n+            ClassModel cf = ClassFile.of().parse(f.toPath());\n","filename":"test\/langtools\/tools\/javac\/meth\/TestCP.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -59,3 +55,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.attribute.*;\n@@ -92,1 +88,1 @@\n-        ClassModel cf = Classfile.of().parse(modulePath.resolve(\"m1x\").resolve(\"module-info.class\"));\n+        ClassModel cf = ClassFile.of().parse(modulePath.resolve(\"m1x\").resolve(\"module-info.class\"));\n@@ -146,1 +142,1 @@\n-        ClassModel cf = Classfile.of().parse(modulePath.resolve(\"A\").resolve(\"module-info.class\"));\n+        ClassModel cf = ClassFile.of().parse(modulePath.resolve(\"A\").resolve(\"module-info.class\"));\n@@ -197,1 +193,1 @@\n-        ClassModel cf = Classfile.of().parse(modulePath.resolve(\"A\").resolve(\"module-info.class\"));\n+        ClassModel cf = ClassFile.of().parse(modulePath.resolve(\"A\").resolve(\"module-info.class\"));\n@@ -320,1 +316,1 @@\n-        ClassModel cf = Classfile.of().parse(modulePath.resolve(\"m1x\").resolve(\"module-info.class\"));\n+        ClassModel cf = ClassFile.of().parse(modulePath.resolve(\"m1x\").resolve(\"module-info.class\"));\n@@ -362,1 +358,1 @@\n-        ClassModel cf = Classfile.of().parse(modulePath.resolve(\"B\").resolve(\"module-info.class\"));\n+        ClassModel cf = ClassFile.of().parse(modulePath.resolve(\"B\").resolve(\"module-info.class\"));\n@@ -437,1 +433,1 @@\n-        ClassModel cf = Classfile.of().parse(classes.resolve(\"m1x\").resolve(\"module-info.class\"));\n+        ClassModel cf = ClassFile.of().parse(classes.resolve(\"m1x\").resolve(\"module-info.class\"));\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationsOnModules.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -56,3 +52,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.ModuleResolutionAttribute;\n+import java.lang.classfile.constantpool.*;\n@@ -271,1 +267,1 @@\n-        ClassModel cm = Classfile.of().parse(classfile);\n+        ClassModel cm = ClassFile.of().parse(classfile);\n@@ -273,1 +269,1 @@\n-        byte[] newBytes = Classfile.of().transform(cm, ClassTransform.dropping(ce -> ce instanceof ModuleResolutionAttribute).\n+        byte[] newBytes = ClassFile.of().transform(cm, ClassTransform.dropping(ce -> ce instanceof ModuleResolutionAttribute).\n","filename":"test\/langtools\/tools\/javac\/modules\/IncubatingTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -34,5 +35,0 @@\n- *      java.base\/jdk.internal.classfile\n- *      java.base\/jdk.internal.classfile.attribute\n- *      java.base\/jdk.internal.classfile.constantpool\n- *      java.base\/jdk.internal.classfile.instruction\n- *      java.base\/jdk.internal.classfile.components\n@@ -51,2 +47,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -211,1 +207,1 @@\n-        ClassModel cm1 = Classfile.of().parse(modules1.resolve(\"module-info.class\"));\n+        ClassModel cm1 = ClassFile.of().parse(modules1.resolve(\"module-info.class\"));\n@@ -222,2 +218,2 @@\n-                        case \"static\" -> flags |= Classfile.ACC_STATIC_PHASE;\n-                        case \"transitive\" -> flags |= Classfile.ACC_TRANSITIVE;\n+                        case \"static\" -> flags |= ClassFile.ACC_STATIC_PHASE;\n+                        case \"transitive\" -> flags |= ClassFile.ACC_TRANSITIVE;\n@@ -244,1 +240,1 @@\n-        byte[] newBytes = Classfile.of().transform(cm1, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute).\n+        byte[] newBytes = ClassFile.of().transform(cm1, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute).\n","filename":"test\/langtools\/tools\/javac\/modules\/JavaBaseTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -44,2 +40,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.ModuleAttribute;\n@@ -119,1 +115,1 @@\n-        ClassModel cm = Classfile.of().parse(classfile);\n+        ClassModel cm = ClassFile.of().parse(classfile);\n","filename":"test\/langtools\/tools\/javac\/modules\/ModuleVersion.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -30,5 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -50,2 +46,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.ModuleAttribute;\n@@ -239,1 +235,1 @@\n-        ClassModel cm = Classfile.of().parse(miClass);\n+        ClassModel cm = ClassFile.of().parse(miClass);\n@@ -242,1 +238,1 @@\n-                                                          module.moduleFlagsMask() | Classfile.ACC_OPEN,\n+                                                          module.moduleFlagsMask() | ClassFile.ACC_OPEN,\n@@ -250,1 +246,1 @@\n-        byte[] newBytes = Classfile.of().transform(cm, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute).\n+        byte[] newBytes = ClassFile.of().transform(cm, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute).\n","filename":"test\/langtools\/tools\/javac\/modules\/OpenModulesTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,3 +34,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.attribute.LocalVariableTypeTableAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.LocalVariableTypeTableAttribute;\n@@ -66,1 +62,1 @@\n-            ClassModel cf = Classfile.of().parse(f.toPath());\n+            ClassModel cf = ClassFile.of().parse(f.toPath());\n","filename":"test\/langtools\/tools\/javac\/multicatch\/7005371\/T7005371.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -37,3 +33,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.instruction.ExceptionCatch;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.instruction.ExceptionCatch;\n@@ -86,1 +82,1 @@\n-            ClassModel cf = Classfile.of().parse(f.toPath());\n+            ClassModel cf = ClassFile.of().parse(f.toPath());\n","filename":"test\/langtools\/tools\/javac\/multicatch\/Pos05.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -39,1 +35,1 @@\n- * @compile -processor Annotations -proc:only Annotations.java\n+ * @compile -J--enable-preview -processor Annotations -proc:only Annotations.java\n@@ -57,3 +53,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.attribute.RuntimeInvisibleTypeAnnotationsAttribute;\n@@ -71,1 +67,1 @@\n-        ClassModel cf = Classfile.of().parse(annotationsClass.readAllBytes());\n+        ClassModel cf = ClassFile.of().parse(annotationsClass.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/patterns\/Annotations.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -38,2 +34,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -86,1 +82,1 @@\n-        ClassModel cf = Classfile.of().parse(Objects.requireNonNull(getClass().getResource(c.getName() + \".class\"))\n+        ClassModel cf = ClassFile.of().parse(Objects.requireNonNull(getClass().getResource(c.getName() + \".class\"))\n","filename":"test\/langtools\/tools\/javac\/patterns\/LocalVariableTable.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -43,3 +39,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -47,1 +44,0 @@\n-import jdk.internal.classfile.constantpool.PoolEntry;\n@@ -119,1 +115,1 @@\n-                cf = Classfile.of().parse(curPath.resolve(\"Test.class\"));\n+                cf = ClassFile.of().parse(curPath.resolve(\"Test.class\"));\n","filename":"test\/langtools\/tools\/javac\/patterns\/MatchExceptionTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -46,2 +42,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -87,1 +83,1 @@\n-        cf = Classfile.of().parse(curPath.resolve(\"NestedPatterVariablesTest.class\"));\n+        cf = ClassFile.of().parse(curPath.resolve(\"NestedPatterVariablesTest.class\"));\n","filename":"test\/langtools\/tools\/javac\/patterns\/NestedPatternVariablesBytecode.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,6 +29,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -39,3 +35,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.ConstantPool;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.ConstantPool;\n@@ -57,1 +53,1 @@\n-        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        ClassModel classFile = ClassFile.of().parse(file.toPath());\n","filename":"test\/langtools\/tools\/javac\/patterns\/NoUnnecessaryCast.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -30,3 +31,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n@@ -46,5 +44,5 @@\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.ModuleRequireInfo;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.ModuleRequireInfo;\n@@ -105,1 +103,1 @@\n-        ClassModel clazz = Classfile.of().parse(moduleInfo);\n+        ClassModel clazz = ClassFile.of().parse(moduleInfo);\n","filename":"test\/langtools\/tools\/javac\/platform\/ModuleVersionTest.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *      java.base\/jdk.internal.classfile\n- *      java.base\/jdk.internal.classfile.attribute\n- *      java.base\/jdk.internal.classfile.constantpool\n- *      java.base\/jdk.internal.classfile.instruction\n- *      java.base\/jdk.internal.classfile.components\n@@ -40,1 +36,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -214,1 +210,1 @@\n-            ClassModel cf = Classfile.of().parse(in.readAllBytes());\n+            ClassModel cf = ClassFile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewAutoSuppress.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -35,5 +36,0 @@\n- *      java.base\/jdk.internal.classfile\n- *      java.base\/jdk.internal.classfile.attribute\n- *      java.base\/jdk.internal.classfile.constantpool\n- *      java.base\/jdk.internal.classfile.instruction\n- *      java.base\/jdk.internal.classfile.components\n@@ -63,2 +59,2 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n@@ -414,1 +410,1 @@\n-                            cf = Classfile.of().parse(input.readAllBytes());\n+                            cf = ClassFile.of().parse(input.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewErrors.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *      java.base\/jdk.internal.classfile\n- *      java.base\/jdk.internal.classfile.attribute\n- *      java.base\/jdk.internal.classfile.constantpool\n- *      java.base\/jdk.internal.classfile.instruction\n- *      java.base\/jdk.internal.classfile.components\n@@ -40,2 +36,2 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n@@ -484,1 +480,1 @@\n-            ClassModel cf = Classfile.of().parse(in.readAllBytes());\n+            ClassModel cf = ClassFile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestFileObjectOf.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -64,2 +60,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -282,1 +278,1 @@\n-        ClassModel cf = Classfile.of().parse(moduleInfo);\n+        ClassModel cf = ClassFile.of().parse(moduleInfo);\n@@ -286,2 +282,2 @@\n-        newRequires.add(ModuleRequireInfo.of(module.requires().get(0).requires(), Classfile.ACC_MANDATED, module.requires().get(0).requiresVersion().orElse(null)));\n-        newRequires.add(ModuleRequireInfo.of(module.requires().get(1).requires(), Classfile.ACC_SYNTHETIC, module.requires().get(1).requiresVersion().orElse(null)));\n+        newRequires.add(ModuleRequireInfo.of(module.requires().get(0).requires(), ClassFile.ACC_MANDATED, module.requires().get(0).requiresVersion().orElse(null)));\n+        newRequires.add(ModuleRequireInfo.of(module.requires().get(1).requires(), ClassFile.ACC_SYNTHETIC, module.requires().get(1).requiresVersion().orElse(null)));\n@@ -291,2 +287,2 @@\n-        newExports.add(ModuleExportInfo.of(module.exports().get(0).exportedPackage(), Classfile.ACC_MANDATED, module.exports().get(0).exportsTo()));\n-        newExports.add(ModuleExportInfo.of(module.exports().get(1).exportedPackage(), Classfile.ACC_SYNTHETIC, module.exports().get(1).exportsTo()));\n+        newExports.add(ModuleExportInfo.of(module.exports().get(0).exportedPackage(), ClassFile.ACC_MANDATED, module.exports().get(0).exportsTo()));\n+        newExports.add(ModuleExportInfo.of(module.exports().get(1).exportedPackage(), ClassFile.ACC_SYNTHETIC, module.exports().get(1).exportsTo()));\n@@ -296,2 +292,2 @@\n-        newOpens.add(ModuleOpenInfo.of(module.opens().get(0).openedPackage(), Classfile.ACC_MANDATED, module.opens().get(0).opensTo()));\n-        newOpens.add(ModuleOpenInfo.of(module.opens().get(1).openedPackage(), Classfile.ACC_SYNTHETIC, module.opens().get(1).opensTo()));\n+        newOpens.add(ModuleOpenInfo.of(module.opens().get(0).openedPackage(), ClassFile.ACC_MANDATED, module.opens().get(0).opensTo()));\n+        newOpens.add(ModuleOpenInfo.of(module.opens().get(1).openedPackage(), ClassFile.ACC_SYNTHETIC, module.opens().get(1).opensTo()));\n@@ -309,1 +305,1 @@\n-        byte[] newClassFileBytes = Classfile.of().transform(cf, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute)\n+        byte[] newClassFileBytes = ClassFile.of().transform(cf, ClassTransform.dropping(ce -> ce instanceof ModuleAttribute)\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestOrigin.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @enablePreview\n@@ -35,5 +36,0 @@\n- *      java.base\/jdk.internal.classfile\n- *      java.base\/jdk.internal.classfile.attribute\n- *      java.base\/jdk.internal.classfile.constantpool\n- *      java.base\/jdk.internal.classfile.instruction\n- *      java.base\/jdk.internal.classfile.components\n@@ -72,5 +68,5 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.Opcode;\n-import jdk.internal.classfile.constantpool.*;\n-import jdk.internal.classfile.instruction.FieldInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.constantpool.*;\n+import java.lang.classfile.instruction.FieldInstruction;\n@@ -1300,1 +1296,1 @@\n-                    ClassModel classFile = Classfile.of().parse(fileEntry.toPath());\n+                    ClassModel classFile = ClassFile.of().parse(fileEntry.toPath());\n@@ -1324,1 +1320,1 @@\n-                ClassModel classFile = Classfile.of().parse(fileEntry.toPath());\n+                ClassModel classFile = ClassFile.of().parse(fileEntry.toPath());\n@@ -1472,1 +1468,1 @@\n-                ClassModel classFile = Classfile.of().parse(findClassFileOrFail(dir, \"R.class\").toPath());\n+                ClassModel classFile = ClassFile.of().parse(findClassFileOrFail(dir, \"R.class\").toPath());\n@@ -1575,1 +1571,1 @@\n-        ClassModel classFile = Classfile.of().parse(findClassFileOrFail(dir, \"R.class\").toPath());\n+        ClassModel classFile = ClassFile.of().parse(findClassFileOrFail(dir, \"R.class\").toPath());\n@@ -1791,1 +1787,1 @@\n-                ClassModel classFile = Classfile.of().parse(fileEntry.toPath());\n+                ClassModel classFile = ClassFile.of().parse(fileEntry.toPath());\n@@ -1795,1 +1791,1 @@\n-                            Assert.check(((method.flags().flagsMask() & Classfile.ACC_PUBLIC) != 0) && ((method.flags().flagsMask() & Classfile.ACC_FINAL) != 0));\n+                            Assert.check(((method.flags().flagsMask() & ClassFile.ACC_PUBLIC) != 0) && ((method.flags().flagsMask() & ClassFile.ACC_FINAL) != 0));\n@@ -1824,1 +1820,1 @@\n-                    ClassModel classFile = Classfile.of().parse(fileEntry.toPath());\n+                    ClassModel classFile = ClassFile.of().parse(fileEntry.toPath());\n@@ -1847,3 +1843,3 @@\n-            case \"private\" -> Classfile.ACC_PRIVATE;\n-            case \"protected\" -> Classfile.ACC_PROTECTED;\n-            case \"public\" -> Classfile.ACC_PUBLIC;\n+            case \"private\" -> ClassFile.ACC_PRIVATE;\n+            case \"protected\" -> ClassFile.ACC_PROTECTED;\n+            case \"public\" -> ClassFile.ACC_PUBLIC;\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/records\/RecordsBinaryCompatibilityTests.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -41,2 +37,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n@@ -146,1 +142,1 @@\n-        cf = Classfile.of().parse(curPath.resolve(\"RecordComponentUsingGeneratedTypeWithAnnotation.class\"));\n+        cf = ClassFile.of().parse(curPath.resolve(\"RecordComponentUsingGeneratedTypeWithAnnotation.class\"));\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/RecordComponentTypeTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/recovery\/AnnotationRecovery.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/recovery\/AttrRecovery.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/recovery\/LambdaRecovery.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -31,5 +32,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/recovery\/MethodModifiers.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,5 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -38,2 +34,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.*;\n@@ -51,1 +47,1 @@\n-            ClassModel cm = Classfile.of().parse(in.readAllBytes());\n+            ClassModel cm = ClassFile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/resolve\/NoObjectToString.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/sealed\/BinaryCompatibilityTests.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,6 +28,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -45,2 +41,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.PermittedSubclassesAttribute;\n","filename":"test\/langtools\/tools\/javac\/sealed\/CheckSubtypesOfSealedTest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -32,5 +33,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -50,4 +46,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n-import jdk.internal.classfile.constantpool.ClassEntry;\n-import jdk.internal.classfile.constantpool.ConstantPoolException;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.PermittedSubclassesAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.lang.classfile.constantpool.ConstantPoolException;\n@@ -138,2 +134,2 @@\n-        ClassModel sealedCF = Classfile.of().parse(out.resolve(cfName));\n-        Assert.check((sealedCF.flags().flagsMask() & Classfile.ACC_FINAL) == 0, String.format(\"class at file %s must not be final\", cfName));\n+        ClassModel sealedCF = ClassFile.of().parse(out.resolve(cfName));\n+        Assert.check((sealedCF.flags().flagsMask() & ClassFile.ACC_FINAL) == 0, String.format(\"class at file %s must not be final\", cfName));\n@@ -156,1 +152,1 @@\n-        ClassModel subCF1 = Classfile.of().parse(out.resolve(cfName));\n+        ClassModel subCF1 = ClassFile.of().parse(out.resolve(cfName));\n@@ -158,1 +154,1 @@\n-            Assert.check((subCF1.flags().flagsMask() & Classfile.ACC_FINAL) != 0, String.format(\"class at file %s must be final\", cfName));\n+            Assert.check((subCF1.flags().flagsMask() & ClassFile.ACC_FINAL) != 0, String.format(\"class at file %s must be final\", cfName));\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedDiffConfigurationsTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -34,5 +35,0 @@\n- *          java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n@@ -101,1 +97,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -292,1 +288,1 @@\n-                    String name = Classfile.of().parse(in.readAllBytes()).thisClass().name().stringValue();\n+                    String name = ClassFile.of().parse(in.readAllBytes()).thisClass().name().stringValue();\n","filename":"test\/langtools\/tools\/javac\/sym\/ElementStructureTest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,6 +31,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -43,4 +39,4 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -222,1 +218,1 @@\n-            ClassModel cf = Classfile.of().parse(compiledTest.toPath());\n+            ClassModel cf = ClassFile.of().parse(compiledTest.toPath());\n","filename":"test\/langtools\/tools\/javac\/varargs\/6199075\/T6199075.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,6 +30,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -47,5 +43,5 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.constantpool.MemberRefEntry;\n-import jdk.internal.classfile.constantpool.MethodRefEntry;\n-import jdk.internal.classfile.instruction.InvokeInstruction;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.constantpool.MemberRefEntry;\n+import java.lang.classfile.constantpool.MethodRefEntry;\n+import java.lang.classfile.instruction.InvokeInstruction;\n@@ -277,1 +273,1 @@\n-            ClassModel cf = Classfile.of().parse(is.readAllBytes());\n+            ClassModel cf = ClassFile.of().parse(is.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/varargs\/7042566\/T7042566.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,5 +27,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -37,2 +33,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -48,1 +44,1 @@\n-        ClassModel cm = Classfile.of().parse(classFile.toPath());\n+        ClassModel cm = ClassFile.of().parse(classFile.toPath());\n","filename":"test\/langtools\/tools\/javap\/T6716452.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @enablePreview\n@@ -33,5 +34,0 @@\n- *      java.base\/jdk.internal.classfile\n- *      java.base\/jdk.internal.classfile.attribute\n- *      java.base\/jdk.internal.classfile.constantpool\n- *      java.base\/jdk.internal.classfile.instruction\n- *      java.base\/jdk.internal.classfile.components\n@@ -52,1 +48,1 @@\n-import jdk.internal.classfile.*;\n+import java.lang.classfile.*;\n@@ -179,2 +175,2 @@\n-        ClassModel cm = Classfile.of().parse(classes.resolve(\"A.class\"));\n-        Classfile.of().buildTo(\n+        ClassModel cm = ClassFile.of().parse(classes.resolve(\"A.class\"));\n+        ClassFile.of().buildTo(\n","filename":"test\/langtools\/tools\/javap\/TestClassNameWarning.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,3 +30,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n+import java.lang.classfile.constantpool.*;\n@@ -38,6 +38,2 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n- *          java.base\/jdk.internal.classfile.impl\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.classfile.impl\n@@ -159,1 +155,1 @@\n-        return Classfile.of().parse(Paths.get(rsc.toURI()));\n+        return ClassFile.of().parse(Paths.get(rsc.toURI()));\n","filename":"test\/langtools\/tools\/javap\/classfile\/6888367\/T6888367.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,5 +28,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -39,2 +35,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.constantpool.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.constantpool.*;\n@@ -78,1 +74,1 @@\n-        return Classfile.of().parse(Paths.get(rsc.toURI()));\n+        return ClassFile.of().parse(Paths.get(rsc.toURI()));\n","filename":"test\/langtools\/tools\/javap\/classfile\/T6887895.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,3 +25,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.attribute.*;\n@@ -33,5 +33,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -49,1 +45,1 @@\n-        ClassModel cm = Classfile.of().parse(classFile.toPath());\n+        ClassModel cm = ClassFile.of().parse(classFile.toPath());\n@@ -70,1 +66,1 @@\n-    <T extends jdk.internal.classfile.Attribute<T>> void test(AttributedElement m, AttributeMapper<T> attr_name) {\n+    <T extends java.lang.classfile.Attribute<T>> void test(AttributedElement m, AttributeMapper<T> attr_name) {\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/JSR175Annotations.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -32,5 +32,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -48,1 +44,1 @@\n-        ClassModel cm = Classfile.of().parse(classFile.toPath());\n+        ClassModel cm = ClassFile.of().parse(classFile.toPath());\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/NewArray.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -33,5 +33,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -49,1 +45,1 @@\n-        ClassModel cm = Classfile.of().parse(classFile.toPath());\n+        ClassModel cm = ClassFile.of().parse(classFile.toPath());\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/Presence.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -32,5 +32,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -48,1 +44,1 @@\n-        ClassModel cm = Classfile.of().parse(classFile.toPath());\n+        ClassModel cm = ClassFile.of().parse(classFile.toPath());\n@@ -62,1 +58,1 @@\n-        ClassModel icm = Classfile.of().parse(innerFile.toPath());\n+        ClassModel icm = ClassFile.of().parse(innerFile.toPath());\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/PresenceInner.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -33,5 +33,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -49,1 +45,1 @@\n-        ClassModel cm = Classfile.of().parse(classFile.toPath());\n+        ClassModel cm = ClassFile.of().parse(classFile.toPath());\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/TypeCasts.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,3 +25,3 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.Attributes;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.attribute.*;\n@@ -33,5 +33,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -49,1 +45,1 @@\n-        ClassModel cm = Classfile.of().parse(classFile.toPath());\n+        ClassModel cm = ClassFile.of().parse(classFile.toPath());\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/Visibility.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-import jdk.internal.classfile.*;\n-import jdk.internal.classfile.attribute.*;\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.*;\n@@ -32,5 +32,1 @@\n- * @modules java.base\/jdk.internal.classfile\n- *          java.base\/jdk.internal.classfile.attribute\n- *          java.base\/jdk.internal.classfile.constantpool\n- *          java.base\/jdk.internal.classfile.instruction\n- *          java.base\/jdk.internal.classfile.components\n+ * @enablePreview\n@@ -47,1 +43,1 @@\n-        ClassModel cm = Classfile.of().parse(classFile.toPath());\n+        ClassModel cm = ClassFile.of().parse(classFile.toPath());\n","filename":"test\/langtools\/tools\/javap\/typeAnnotations\/Wildcards.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -35,9 +35,9 @@\n-import jdk.internal.classfile.attribute.ModuleAttribute;\n-import jdk.internal.classfile.attribute.ModuleExportInfo;\n-import jdk.internal.classfile.attribute.ModuleMainClassAttribute;\n-import jdk.internal.classfile.attribute.ModuleOpenInfo;\n-import jdk.internal.classfile.attribute.ModulePackagesAttribute;\n-import jdk.internal.classfile.attribute.ModuleResolutionAttribute;\n-import jdk.internal.classfile.attribute.ModuleRequireInfo;\n-import jdk.internal.classfile.attribute.ModuleTargetAttribute;\n-import jdk.internal.classfile.constantpool.ModuleEntry;\n+import java.lang.classfile.attribute.ModuleAttribute;\n+import java.lang.classfile.attribute.ModuleExportInfo;\n+import java.lang.classfile.attribute.ModuleMainClassAttribute;\n+import java.lang.classfile.attribute.ModuleOpenInfo;\n+import java.lang.classfile.attribute.ModulePackagesAttribute;\n+import java.lang.classfile.attribute.ModuleResolutionAttribute;\n+import java.lang.classfile.attribute.ModuleRequireInfo;\n+import java.lang.classfile.attribute.ModuleTargetAttribute;\n+import java.lang.classfile.constantpool.ModuleEntry;\n@@ -55,3 +55,3 @@\n-            ModuleDescriptor.Modifier.OPEN, Classfile.ACC_OPEN,\n-            ModuleDescriptor.Modifier.SYNTHETIC, Classfile.ACC_SYNTHETIC,\n-            ModuleDescriptor.Modifier.MANDATED, Classfile.ACC_MANDATED\n+            ModuleDescriptor.Modifier.OPEN, ClassFile.ACC_OPEN,\n+            ModuleDescriptor.Modifier.SYNTHETIC, ClassFile.ACC_SYNTHETIC,\n+            ModuleDescriptor.Modifier.MANDATED, ClassFile.ACC_MANDATED\n@@ -62,4 +62,4 @@\n-            ModuleDescriptor.Requires.Modifier.TRANSITIVE, Classfile.ACC_TRANSITIVE,\n-            ModuleDescriptor.Requires.Modifier.STATIC, Classfile.ACC_STATIC_PHASE,\n-            ModuleDescriptor.Requires.Modifier.SYNTHETIC, Classfile.ACC_SYNTHETIC,\n-            ModuleDescriptor.Requires.Modifier.MANDATED, Classfile.ACC_MANDATED\n+            ModuleDescriptor.Requires.Modifier.TRANSITIVE, ClassFile.ACC_TRANSITIVE,\n+            ModuleDescriptor.Requires.Modifier.STATIC, ClassFile.ACC_STATIC_PHASE,\n+            ModuleDescriptor.Requires.Modifier.SYNTHETIC, ClassFile.ACC_SYNTHETIC,\n+            ModuleDescriptor.Requires.Modifier.MANDATED, ClassFile.ACC_MANDATED\n@@ -70,2 +70,2 @@\n-            ModuleDescriptor.Exports.Modifier.SYNTHETIC, Classfile.ACC_SYNTHETIC,\n-            ModuleDescriptor.Exports.Modifier.MANDATED, Classfile.ACC_MANDATED\n+            ModuleDescriptor.Exports.Modifier.SYNTHETIC, ClassFile.ACC_SYNTHETIC,\n+            ModuleDescriptor.Exports.Modifier.MANDATED, ClassFile.ACC_MANDATED\n@@ -76,2 +76,2 @@\n-            ModuleDescriptor.Opens.Modifier.SYNTHETIC, Classfile.ACC_SYNTHETIC,\n-            ModuleDescriptor.Opens.Modifier.MANDATED, Classfile.ACC_MANDATED\n+            ModuleDescriptor.Opens.Modifier.SYNTHETIC, ClassFile.ACC_SYNTHETIC,\n+            ModuleDescriptor.Opens.Modifier.MANDATED, ClassFile.ACC_MANDATED\n@@ -90,1 +90,1 @@\n-        return Classfile.of().build(ClassDesc.of(\"module-info\"), clb -> {\n+        return ClassFile.of().build(ClassDesc.of(\"module-info\"), clb -> {\n","filename":"test\/lib\/jdk\/test\/lib\/util\/ModuleInfoWriter.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassFile;\n@@ -46,1 +46,1 @@\n-import static jdk.internal.classfile.Classfile.ACC_STATIC;\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n@@ -56,5 +56,1 @@\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\"\n+        \"--enable-preview\"\n@@ -80,1 +76,1 @@\n-            static final byte[] classBytes = Classfile.of().build(describedClass, clb -> {\n+            static final byte[] classBytes = ClassFile.of().build(describedClass, clb -> {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/LazyStaticColdStart.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -49,5 +49,1 @@\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\",\n+        \"--enable-preview\",\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/AbstractCorpusBenchmark.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,3 +25,3 @@\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeTransform;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeTransform;\n@@ -58,1 +58,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/AdHocAdapt.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,7 +29,7 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeBuilder;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.CompoundElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.CompoundElement;\n@@ -49,1 +49,1 @@\n- * ClassfileBenchmark\n+ * ClassFileBenchmark\n@@ -54,1 +54,1 @@\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\"})\n+        \"--enable-preview\"})\n@@ -60,1 +60,1 @@\n-    private Classfile sharedCP, newCP;\n+    private ClassFile sharedCP, newCP;\n@@ -69,3 +69,3 @@\n-        sharedCP = Classfile.of();\n-        newCP = Classfile.of(Classfile.ConstantPoolSharingOption.NEW_POOL);\n-        benchModel = Classfile.of().parse(benchBytes);\n+        sharedCP = ClassFile.of();\n+        newCP = ClassFile.of(ClassFile.ConstantPoolSharingOption.NEW_POOL);\n+        benchModel = ClassFile.of().parse(benchBytes);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ClassfileBenchmark.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassReader;\n-import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassReader;\n+import java.lang.classfile.constantpool.ConstantPoolBuilder;\n@@ -41,1 +41,1 @@\n-import jdk.internal.classfile.impl.ClassfileImpl;\n+import jdk.internal.classfile.impl.ClassFileImpl;\n@@ -58,5 +58,1 @@\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\",\n+        \"--enable-preview\",\n@@ -80,1 +76,1 @@\n-    Classfile cc;\n+    ClassFile cc;\n@@ -84,1 +80,1 @@\n-        cc = Classfile.of();\n+        cc = ClassFile.of();\n@@ -99,1 +95,1 @@\n-                                (m.flags().flagsMask() & Classfile.ACC_STATIC) != 0,\n+                                (m.flags().flagsMask() & ClassFile.ACC_STATIC) != 0,\n@@ -124,1 +120,1 @@\n-                (ClassfileImpl)cc,\n+                (ClassFileImpl)cc,\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/GenerateStackMaps.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n@@ -42,1 +42,1 @@\n-        var cc = Classfile.of(Classfile.DebugElementsOption.DROP_DEBUG);\n+        var cc = ClassFile.of(ClassFile.DebugElementsOption.DROP_DEBUG);\n@@ -52,1 +52,1 @@\n-        var cc = Classfile.of(Classfile.StackMapsOption.DROP_STACK_MAPS);\n+        var cc = ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS);\n@@ -62,1 +62,1 @@\n-        var cc = Classfile.of(Classfile.LineNumbersOption.DROP_LINE_NUMBERS);\n+        var cc = ClassFile.of(ClassFile.LineNumbersOption.DROP_LINE_NUMBERS);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ParseOptions.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,7 +25,7 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassfileElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CompoundElement;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.instruction.LoadInstruction;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassFileElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CompoundElement;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.instruction.LoadInstruction;\n@@ -100,1 +100,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -124,1 +124,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -131,2 +131,2 @@\n-    private static ClassfileElement iterateAll(CompoundElement<?> model) {\n-        ClassfileElement last = null;\n+    private static ClassFileElement iterateAll(CompoundElement<?> model) {\n+        ClassFileElement last = null;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ReadDeep.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,4 +26,4 @@\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.FieldModel;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.FieldModel;\n@@ -69,1 +69,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -78,1 +78,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -133,1 +133,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n@@ -148,1 +148,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ReadMetadata.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,4 +32,4 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.instruction.*;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.instruction.*;\n@@ -41,3 +41,1 @@\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED\"})\n+        \"--enable-preview\"})\n@@ -48,1 +46,1 @@\n-    Classfile shared, unshared;\n+    ClassFile shared, unshared;\n@@ -54,8 +52,8 @@\n-        shared = Classfile.of(\n-                            Classfile.ConstantPoolSharingOption.SHARED_POOL,\n-                            Classfile.DebugElementsOption.DROP_DEBUG,\n-                            Classfile.LineNumbersOption.DROP_LINE_NUMBERS);\n-        unshared = Classfile.of(\n-                            Classfile.ConstantPoolSharingOption.NEW_POOL,\n-                            Classfile.DebugElementsOption.DROP_DEBUG,\n-                            Classfile.LineNumbersOption.DROP_LINE_NUMBERS);\n+        shared = ClassFile.of(\n+                            ClassFile.ConstantPoolSharingOption.SHARED_POOL,\n+                            ClassFile.DebugElementsOption.DROP_DEBUG,\n+                            ClassFile.LineNumbersOption.DROP_LINE_NUMBERS);\n+        unshared = ClassFile.of(\n+                            ClassFile.ConstantPoolSharingOption.NEW_POOL,\n+                            ClassFile.DebugElementsOption.DROP_DEBUG,\n+                            ClassFile.LineNumbersOption.DROP_LINE_NUMBERS);\n@@ -92,1 +90,1 @@\n-    private static void transform(Classfile cc, ClassModel clm) {\n+    private static void transform(ClassFile cc, ClassModel clm) {\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/RebuildMethodBodies.java","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.components.ClassPrinter;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.components.ClassPrinter;\n@@ -40,2 +40,1 @@\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\"})\n+        \"--enable-preview\"})\n@@ -52,1 +51,1 @@\n-        var cc = Classfile.of();\n+        var cc = ClassFile.of();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/RepeatedModelTraversal.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,11 +36,11 @@\n-import jdk.internal.classfile.ClassBuilder;\n-import jdk.internal.classfile.ClassElement;\n-import jdk.internal.classfile.ClassModel;\n-import jdk.internal.classfile.ClassTransform;\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.CodeElement;\n-import jdk.internal.classfile.CodeModel;\n-import jdk.internal.classfile.CodeTransform;\n-import jdk.internal.classfile.MethodModel;\n-import jdk.internal.classfile.MethodTransform;\n-import jdk.internal.classfile.components.ClassRemapper;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassElement;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeElement;\n+import java.lang.classfile.CodeModel;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.components.ClassRemapper;\n@@ -127,2 +127,2 @@\n-        SHARED_3_NO_STACKMAP(true, threeLevelNoop, Classfile.StackMapsOption.DROP_STACK_MAPS),\n-        SHARED_3_NO_DEBUG(true, threeLevelNoop, Classfile.DebugElementsOption.DROP_DEBUG, Classfile.LineNumbersOption.DROP_LINE_NUMBERS),\n+        SHARED_3_NO_STACKMAP(true, threeLevelNoop, ClassFile.StackMapsOption.DROP_STACK_MAPS),\n+        SHARED_3_NO_DEBUG(true, threeLevelNoop, ClassFile.DebugElementsOption.DROP_DEBUG, ClassFile.LineNumbersOption.DROP_LINE_NUMBERS),\n@@ -162,1 +162,1 @@\n-                ClassRemapper.of(Map.of()).remapClass(Classfile.of(), Classfile.of().parse(bytes)));\n+                ClassRemapper.of(Map.of()).remapClass(ClassFile.of(), ClassFile.of().parse(bytes)));\n@@ -169,1 +169,1 @@\n-        public final Classfile cc;\n+        public final ClassFile cc;\n@@ -175,1 +175,1 @@\n-            cc = Classfile.of();\n+            cc = ClassFile.of();\n@@ -180,1 +180,1 @@\n-                      Classfile.Option... options) {\n+                      ClassFile.Option... options) {\n@@ -183,1 +183,1 @@\n-            this.cc = Classfile.of(\n+            this.cc = ClassFile.of(\n@@ -186,1 +186,1 @@\n-                    : Stream.concat(Stream.of(options), Stream.of(Classfile.ConstantPoolSharingOption.NEW_POOL)).toArray(Classfile.Option[]::new));\n+                    : Stream.concat(Stream.of(options), Stream.of(ClassFile.ConstantPoolSharingOption.NEW_POOL)).toArray(ClassFile.Option[]::new));\n@@ -199,1 +199,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -240,1 +240,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -255,1 +255,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -278,1 +278,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n@@ -286,1 +286,1 @@\n-            var cc = Classfile.of();\n+            var cc = ClassFile.of();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Transforms.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.internal.classfile.AccessFlags;\n+import java.lang.classfile.AccessFlags;\n@@ -27,3 +27,3 @@\n-import jdk.internal.classfile.Classfile;\n-import jdk.internal.classfile.TypeKind;\n-import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.TypeKind;\n+import java.lang.classfile.attribute.SourceFileAttribute;\n@@ -38,2 +38,2 @@\n-import static jdk.internal.classfile.Opcode.*;\n-import static jdk.internal.classfile.TypeKind.*;\n+import static java.lang.classfile.Opcode.*;\n+import static java.lang.classfile.TypeKind.*;\n@@ -62,5 +62,1 @@\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.attribute=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.constantpool=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.instruction=ALL-UNNAMED\",\n-        \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\",\n+        \"--enable-preview\",\n@@ -143,1 +139,1 @@\n-        byte[] bytes = Classfile.of().build(CD_MyClass, cb -> {\n+        byte[] bytes = ClassFile.of().build(CD_MyClass, cb -> {\n@@ -157,2 +153,2 @@\n-                                  jdk.internal.classfile.Label loopTop = c0.newLabel();\n-                                  jdk.internal.classfile.Label loopEnd = c0.newLabel();\n+                                  java.lang.classfile.Label loopTop = c0.newLabel();\n+                                  java.lang.classfile.Label loopEnd = c0.newLabel();\n@@ -191,1 +187,1 @@\n-        byte[] bytes = Classfile.of().build(CD_MyClass, cb -> {\n+        byte[] bytes = ClassFile.of().build(CD_MyClass, cb -> {\n@@ -205,2 +201,2 @@\n-                                  jdk.internal.classfile.Label loopTop = c0.newLabel();\n-                                  jdk.internal.classfile.Label loopEnd = c0.newLabel();\n+                                  java.lang.classfile.Label loopTop = c0.newLabel();\n+                                  java.lang.classfile.Label loopEnd = c0.newLabel();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/Write.java","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"}]}