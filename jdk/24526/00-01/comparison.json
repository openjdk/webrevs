{"files":[{"patch":"@@ -41,1 +41,1 @@\n-import static sun.security.pkcs11.wrapper.PKCS11Exception.RV.*;\n+import static sun.security.pkcs11.wrapper.PKCS11Exception.RV.CKR_KEY_SIZE_RANGE;\n@@ -161,0 +161,9 @@\n+        P11SecretKeyFactory.KeyInfo ki = P11SecretKeyFactory.getKeyInfo(alg);\n+        if (ki == null) {\n+            throw new InvalidAlgorithmParameterException(\"A PKCS #11 key \" +\n+                    \"type (CKK_*) was not found for a key of the algorithm '\" +\n+                    alg + \"'.\");\n+        }\n+        long derivedKeyType = getDerivedKeyType(ki, alg);\n+        P11KeyGenerator.checkKeySize(ki.keyGenMech, outLen * 8, token);\n+\n@@ -178,7 +187,0 @@\n-        P11SecretKeyFactory.KeyInfo ki = P11SecretKeyFactory.getKeyInfo(alg);\n-        if (ki == null) {\n-            throw new InvalidAlgorithmParameterException(\"A PKCS #11 key \" +\n-                    \"type (CKK_*) was not found for a key of the algorithm '\" +\n-                    alg + \"'.\");\n-        }\n-        long derivedKeyType = ki.keyType;\n@@ -235,0 +237,20 @@\n+    private long getDerivedKeyType(P11SecretKeyFactory.KeyInfo ki, String alg)\n+            throws InvalidAlgorithmParameterException {\n+        switch ((int) ki.keyType) {\n+            case (int) CKK_DES, (int) CKK_DES3, (int) CKK_AES, (int) CKK_RC4,\n+                    (int) CKK_BLOWFISH, (int) CKK_CHACHA20,\n+                    (int) CKK_GENERIC_SECRET -> {\n+                if (ki.keyType != CKK_GENERIC_SECRET ||\n+                        alg.equalsIgnoreCase(\"Generic\")) {\n+                    return ki.keyType;\n+                }\n+            }\n+            case (int) PCKK_TLSPREMASTER, (int) PCKK_TLSRSAPREMASTER,\n+                    (int) PCKK_TLSMASTER -> {\n+                return CKK_GENERIC_SECRET;\n+            }\n+        }\n+        throw new InvalidAlgorithmParameterException(\"A key of algorithm '\" +\n+                alg + \"' is not valid for derivation.\");\n+    }\n+\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11HKDF.java","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,3 +78,4 @@\n-        \/\/ No need to query for fix-length algorithms\n-        if (mech == CKM_DES_KEY_GEN || mech == CKM_DES2_KEY_GEN ||\n-            mech == CKM_DES3_KEY_GEN) {\n+        \/\/ No need to query if the mechanism is not available or for\n+        \/\/ fix-length algorithms\n+        if (mech == CK_UNAVAILABLE_INFORMATION || mech == CKM_DES_KEY_GEN ||\n+                mech == CKM_DES2_KEY_GEN || mech == CKM_DES3_KEY_GEN) {\n@@ -118,1 +119,1 @@\n-     * @param keySize the to-be-checked key size for this mechanism.\n+     * @param keySize the to-be-checked key size (in bits) for this mechanism.\n@@ -126,1 +127,1 @@\n-    \/\/ called by P11SecretKeyFactory to check key size\n+    \/\/ called by P11SecretKeyFactory and P11HKDF to check key size\n@@ -157,2 +158,2 @@\n-                if (range != null && keySize < range.iMinKeySize\n-                    || keySize > range.iMaxKeySize) {\n+                if (range != null && (keySize < range.iMinKeySize\n+                    || keySize > range.iMaxKeySize)) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyGenerator.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -107,0 +107,1 @@\n+        \/\/ Java Standard Algorithm Name.\n@@ -108,0 +109,2 @@\n+\n+        \/\/ Key type (CKK_*).\n@@ -110,0 +113,8 @@\n+        \/\/ Mechanism for C_GenerateKey to generate a key of this type (CKM_*).\n+        \/\/ While keys may be generated with other APIs and mechanisms (e.g. AES\n+        \/\/ key generated with C_DeriveKey and CKM_HKDF_DERIVE instead of\n+        \/\/ C_GenerateKey and CKM_AES_KEY_GEN), this information is used by\n+        \/\/ P11KeyGenerator::checkKeySize in a best-effort attempt to validate\n+        \/\/ that the key size is within a valid range (see CK_MECHANISM_INFO).\n+        public final long keyGenMech;\n+\n@@ -111,0 +122,4 @@\n+            this(algo, keyType, CK_UNAVAILABLE_INFORMATION);\n+        }\n+\n+        KeyInfo(String algo, long keyType, long keyGenMech) {\n@@ -113,0 +128,1 @@\n+            this.keyGenMech = keyGenMech;\n@@ -207,8 +223,9 @@\n-        putKeyInfo(new KeyInfo(\"RC4\", CKK_RC4));\n-        putKeyInfo(new KeyInfo(\"ARCFOUR\", CKK_RC4));\n-        putKeyInfo(new KeyInfo(\"DES\", CKK_DES));\n-        putKeyInfo(new KeyInfo(\"DESede\", CKK_DES3));\n-        putKeyInfo(new KeyInfo(\"AES\", CKK_AES));\n-        putKeyInfo(new KeyInfo(\"Blowfish\", CKK_BLOWFISH));\n-        putKeyInfo(new KeyInfo(\"ChaCha20\", CKK_CHACHA20));\n-        putKeyInfo(new KeyInfo(\"ChaCha20-Poly1305\", CKK_CHACHA20));\n+        putKeyInfo(new KeyInfo(\"RC4\", CKK_RC4, CKM_RC4_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"ARCFOUR\", CKK_RC4, CKM_RC4_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"DES\", CKK_DES, CKM_DES_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"DESede\", CKK_DES3, CKM_DES3_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"AES\", CKK_AES, CKM_AES_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"Blowfish\", CKK_BLOWFISH, CKM_BLOWFISH_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"ChaCha20\", CKK_CHACHA20, CKM_CHACHA20_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"ChaCha20-Poly1305\", CKK_CHACHA20,\n+                CKM_CHACHA20_KEY_GEN));\n@@ -218,2 +235,2 @@\n-        putKeyInfo(new KeyInfo(\"RC2\", CKK_RC2));\n-        putKeyInfo(new KeyInfo(\"IDEA\", CKK_IDEA));\n+        putKeyInfo(new KeyInfo(\"RC2\", CKK_RC2, CKM_RC2_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"IDEA\", CKK_IDEA, CKM_IDEA_KEY_GEN));\n@@ -224,1 +241,2 @@\n-        putKeyInfo(new KeyInfo(\"Generic\", CKK_GENERIC_SECRET));\n+        putKeyInfo(new KeyInfo(\"Generic\", CKK_GENERIC_SECRET,\n+                CKM_GENERIC_SECRET_KEY_GEN));\n@@ -552,15 +570,14 @@\n-                case (int) CKK_DES -> {\n-                    keyLength =\n-                            P11KeyGenerator.checkKeySize(CKM_DES_KEY_GEN, n, token);\n-                    fixDESParity(encoded, 0);\n-                }\n-                case (int) CKK_DES3 -> {\n-                    keyLength =\n-                            P11KeyGenerator.checkKeySize(CKM_DES3_KEY_GEN, n, token);\n-                    fixDESParity(encoded, 0);\n-                    fixDESParity(encoded, 8);\n-                    if (keyLength == 112) {\n-                        keyType = CKK_DES2;\n-                    } else {\n-                        keyType = CKK_DES3;\n-                        fixDESParity(encoded, 16);\n+                case (int) CKK_DES, (int) CKK_DES3, (int) CKK_AES, (int) CKK_RC4,\n+                        (int) CKK_BLOWFISH, (int) CKK_CHACHA20 -> {\n+                    keyLength = P11KeyGenerator.checkKeySize(ki.keyGenMech, n,\n+                            token);\n+                    if (keyType == CKK_DES || keyType == CKK_DES3) {\n+                        fixDESParity(encoded, 0);\n+                    }\n+                    if (keyType == CKK_DES3) {\n+                        fixDESParity(encoded, 8);\n+                        if (keyLength == 112) {\n+                            keyType = CKK_DES2;\n+                        } else {\n+                            fixDESParity(encoded, 16);\n+                        }\n@@ -569,10 +586,2 @@\n-                case (int) CKK_AES -> keyLength =\n-                        P11KeyGenerator.checkKeySize(CKM_AES_KEY_GEN, n, token);\n-                case (int) CKK_RC4 -> keyLength =\n-                        P11KeyGenerator.checkKeySize(CKM_RC4_KEY_GEN, n, token);\n-                case (int) CKK_BLOWFISH -> keyLength =\n-                        P11KeyGenerator.checkKeySize(CKM_BLOWFISH_KEY_GEN, n,\n-                                token);\n-                case (int) CKK_CHACHA20 -> keyLength = P11KeyGenerator.checkKeySize(\n-                        CKM_CHACHA20_KEY_GEN, n, token);\n-                case (int) CKK_GENERIC_SECRET, (int) PCKK_TLSPREMASTER, (int) PCKK_TLSRSAPREMASTER, (int) PCKK_TLSMASTER ->\n+                case (int) CKK_GENERIC_SECRET, (int) PCKK_TLSPREMASTER,\n+                        (int) PCKK_TLSRSAPREMASTER, (int) PCKK_TLSMASTER ->\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11SecretKeyFactory.java","additions":45,"deletions":36,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -305,0 +305,16 @@\n+    private static void executeInvalidKeyDerivationTest(String testHeader,\n+            String keyAlg, int keySize, String errorMsg) {\n+        printTestHeader(testHeader);\n+        try {\n+            KDF k = KDF.getInstance(\"HKDF-SHA256\", p11Provider);\n+            k.deriveKey(keyAlg, HKDFParameterSpec.ofExtract()\n+                    .thenExpand(null, keySize));\n+            throw new Exception(\"No exception thrown.\");\n+        } catch (InvalidAlgorithmParameterException iape) {\n+            \/\/ Expected.\n+        } catch (Exception e) {\n+            reportTestFailure(new Exception(errorMsg + \" expected to throw \" +\n+                    \"InvalidAlgorithmParameterException.\", e));\n+        }\n+    }\n+\n@@ -613,0 +629,16 @@\n+    private static void test_unknown_key_algorithm_derivation() {\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an unknown key algorithm\",\n+                \"UnknownAlgorithm\",\n+                32,\n+                \"Derivation of an unknown key algorithm\");\n+    }\n+\n+    private static void test_invalid_key_algorithm_derivation() {\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an invalid key algorithm\",\n+                \"PBKDF2WithHmacSHA1\",\n+                32,\n+                \"Derivation of an invalid key algorithm\");\n+    }\n+\n@@ -614,13 +646,5 @@\n-        printTestHeader(\"Test derivation of an invalid AES key size\");\n-        try {\n-            KDF k = KDF.getInstance(\"HKDF-SHA256\", p11Provider);\n-            k.deriveKey(\"AES\", HKDFParameterSpec.ofExtract()\n-                    .thenExpand(null, 31));\n-            throw new Exception(\"No exception thrown.\");\n-        } catch (InvalidAlgorithmParameterException iape) {\n-            \/\/ Expected.\n-        } catch (Exception e) {\n-            reportTestFailure(new Exception(\"Derivation of an AES key of \" +\n-                    \"invalid size (31 bytes) expected to throw \" +\n-                    \"InvalidAlgorithmParameterException.\", e));\n-        }\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an invalid AES key size\",\n+                \"AES\",\n+                31,\n+                \"Derivation of an AES key of invalid size (31 bytes)\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KDF\/TestHKDF.java","additions":37,"deletions":13,"binary":false,"changes":50,"status":"modified"}]}