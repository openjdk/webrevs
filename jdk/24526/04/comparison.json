{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import static sun.security.pkcs11.wrapper.PKCS11Exception.RV.CKR_KEY_SIZE_RANGE;\n@@ -160,0 +161,9 @@\n+        P11SecretKeyFactory.KeyInfo ki = P11SecretKeyFactory.getKeyInfo(alg);\n+        if (ki == null) {\n+            throw new InvalidAlgorithmParameterException(\"A PKCS #11 key \" +\n+                    \"type (CKK_*) was not found for a key of the algorithm '\" +\n+                    alg + \"'.\");\n+        }\n+        checkDerivedKeyType(ki, alg);\n+        P11KeyGenerator.checkKeySize(ki.keyGenMech, outLen * 8, token);\n+\n@@ -177,7 +187,0 @@\n-        P11SecretKeyFactory.KeyInfo ki = P11SecretKeyFactory.getKeyInfo(alg);\n-        if (ki == null) {\n-            throw new InvalidAlgorithmParameterException(\"A PKCS #11 key \" +\n-                    \"type (CKK_*) was not found for a key of the algorithm '\" +\n-                    alg + \"'.\");\n-        }\n-        long derivedKeyType = ki.keyType;\n@@ -187,1 +190,1 @@\n-                new CK_ATTRIBUTE(CKA_KEY_TYPE, derivedKeyType),\n+                new CK_ATTRIBUTE(CKA_KEY_TYPE, ki.keyType),\n@@ -198,1 +201,1 @@\n-                    derivedKeyType, attrs);\n+                    ki.keyType, attrs);\n@@ -219,0 +222,5 @@\n+            if (e.match(CKR_KEY_SIZE_RANGE)) {\n+                throw new InvalidAlgorithmParameterException(\"Invalid key \" +\n+                        \"size (\" + outLen + \" bytes) for algorithm '\" + alg +\n+                        \"'.\", e);\n+            }\n@@ -230,0 +238,17 @@\n+    private static boolean canDeriveKeyInfoType(long t) {\n+        return (t == CKK_DES || t == CKK_DES3 || t == CKK_AES ||\n+                t == CKK_RC4 || t == CKK_BLOWFISH || t == CKK_CHACHA20 ||\n+                t == CKK_GENERIC_SECRET);\n+    }\n+\n+    private void checkDerivedKeyType(P11SecretKeyFactory.KeyInfo ki, String alg)\n+            throws InvalidAlgorithmParameterException {\n+        Class<?> kiClass = ki.getClass();\n+        if (!kiClass.equals(P11SecretKeyFactory.TLSKeyInfo.class) &&\n+                !(kiClass.equals(P11SecretKeyFactory.KeyInfo.class) &&\n+                        canDeriveKeyInfoType(ki.keyType))) {\n+            throw new InvalidAlgorithmParameterException(\"A key of algorithm \" +\n+                    \"'\" + alg + \"' is not valid for derivation.\");\n+        }\n+    }\n+\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11HKDF.java","additions":34,"deletions":9,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,3 +78,4 @@\n-        \/\/ No need to query for fix-length algorithms\n-        if (mech == CKM_DES_KEY_GEN || mech == CKM_DES2_KEY_GEN ||\n-            mech == CKM_DES3_KEY_GEN) {\n+        \/\/ No need to query if the mechanism is not available or for\n+        \/\/ fix-length algorithms\n+        if (mech == CK_UNAVAILABLE_INFORMATION || mech == CKM_DES_KEY_GEN ||\n+                mech == CKM_DES2_KEY_GEN || mech == CKM_DES3_KEY_GEN) {\n@@ -118,1 +119,1 @@\n-     * @param keySize the to-be-checked key size for this mechanism.\n+     * @param keySize the to-be-checked key size (in bits) for this mechanism.\n@@ -126,1 +127,1 @@\n-    \/\/ called by P11SecretKeyFactory to check key size\n+    \/\/ called by P11SecretKeyFactory and P11HKDF to check key size\n@@ -139,2 +140,2 @@\n-                    throw new InvalidAlgorithmParameterException\n-                            (\"DES key length must be 56 bits\");\n+                    throw new InvalidAlgorithmParameterException(\"DES key \" +\n+                            \"length was \" + keySize + \" but must be 56 bits\");\n@@ -151,2 +152,3 @@\n-                    throw new InvalidAlgorithmParameterException\n-                            (\"DESede key length must be 112, or 168 bits\");\n+                    throw new InvalidAlgorithmParameterException(\"DESede key \" +\n+                            \"length was \" + keySize + \" but must be 112, or \" +\n+                            \"168 bits\");\n@@ -157,5 +159,6 @@\n-                if (range != null && keySize < range.iMinKeySize\n-                    || keySize > range.iMaxKeySize) {\n-                    throw new InvalidAlgorithmParameterException\n-                        (\"Key length must be between \" + range.iMinKeySize +\n-                        \" and \" + range.iMaxKeySize + \" bits\");\n+                if (range != null && (keySize < range.iMinKeySize\n+                    || keySize > range.iMaxKeySize)) {\n+                    throw new InvalidAlgorithmParameterException(\"Key length \" +\n+                            \"was \" + keySize + \" but must be between \" +\n+                            range.iMinKeySize + \" and \" + range.iMaxKeySize +\n+                            \" bits\");\n@@ -166,2 +169,3 @@\n-                        throw new InvalidAlgorithmParameterException\n-                            (\"AES key length must be 128, 192, or 256 bits\");\n+                        throw new InvalidAlgorithmParameterException(\"AES key\" +\n+                                \" length was \" + keySize + \" but must be 128,\" +\n+                                \" 192, or 256 bits\");\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyGenerator.java","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -106,1 +106,10 @@\n-    static sealed class KeyInfo permits PBEKeyInfo, HMACKeyInfo, HKDFKeyInfo {\n+    \/*\n+     * The KeyInfo class represents information about a symmetric PKCS #11 key\n+     * type or about the output of a key-based computation (e.g. HMAC). A\n+     * KeyInfo instance may describe the key\/output itself, or the type of\n+     * key\/output that a service accepts\/produces. Used by P11SecretKeyFactory,\n+     * P11PBECipher, P11Mac, and P11HKDF.\n+     *\/\n+    static sealed class KeyInfo permits PBEKeyInfo, HMACKeyInfo, HKDFKeyInfo,\n+            TLSKeyInfo {\n+        \/\/ Java Standard Algorithm Name.\n@@ -108,0 +117,2 @@\n+\n+        \/\/ Key type (CKK_*).\n@@ -110,0 +121,8 @@\n+        \/\/ Mechanism for C_GenerateKey to generate a key of this type (CKM_*).\n+        \/\/ While keys may be generated with other APIs and mechanisms (e.g. AES\n+        \/\/ key generated with C_DeriveKey and CKM_HKDF_DERIVE instead of\n+        \/\/ C_GenerateKey and CKM_AES_KEY_GEN), this information is used by\n+        \/\/ P11KeyGenerator::checkKeySize in a best-effort attempt to validate\n+        \/\/ that the key size is within a valid range (see CK_MECHANISM_INFO).\n+        public final long keyGenMech;\n+\n@@ -111,0 +130,4 @@\n+            this(algo, keyType, CK_UNAVAILABLE_INFORMATION);\n+        }\n+\n+        KeyInfo(String algo, long keyType, long keyGenMech) {\n@@ -113,0 +136,1 @@\n+            this.keyGenMech = keyGenMech;\n@@ -137,0 +161,15 @@\n+    \/*\n+     * KeyInfo specialization for keys that are either input or result of a TLS\n+     * key derivation. Keys of this type are typically handled by JSSE and their\n+     * algorithm name start with \"Tls\". Used by P11HKDF.\n+     *\/\n+    static final class TLSKeyInfo extends KeyInfo {\n+        TLSKeyInfo(String algo) {\n+            super(algo, CKK_GENERIC_SECRET);\n+        }\n+    }\n+\n+    \/*\n+     * KeyInfo specialization for outputs of a HMAC computation. Used by\n+     * P11SecretKeyFactory and P11Mac.\n+     *\/\n@@ -138,0 +177,1 @@\n+        \/\/ HMAC mechanism (CKM_*) to generate the output.\n@@ -139,0 +179,2 @@\n+\n+        \/\/ HMAC output length (in bits).\n@@ -148,0 +190,4 @@\n+    \/*\n+     * KeyInfo specialization for HKDF key derivation. Used by\n+     * P11SecretKeyFactory and P11HKDF.\n+     *\/\n@@ -160,0 +206,4 @@\n+    \/*\n+     * KeyInfo specialization for PBE key derivation. Used by\n+     * P11SecretKeyFactory, P11PBECipher and P11Mac.\n+     *\/\n@@ -207,8 +257,9 @@\n-        putKeyInfo(new KeyInfo(\"RC4\", CKK_RC4));\n-        putKeyInfo(new KeyInfo(\"ARCFOUR\", CKK_RC4));\n-        putKeyInfo(new KeyInfo(\"DES\", CKK_DES));\n-        putKeyInfo(new KeyInfo(\"DESede\", CKK_DES3));\n-        putKeyInfo(new KeyInfo(\"AES\", CKK_AES));\n-        putKeyInfo(new KeyInfo(\"Blowfish\", CKK_BLOWFISH));\n-        putKeyInfo(new KeyInfo(\"ChaCha20\", CKK_CHACHA20));\n-        putKeyInfo(new KeyInfo(\"ChaCha20-Poly1305\", CKK_CHACHA20));\n+        putKeyInfo(new KeyInfo(\"RC4\", CKK_RC4, CKM_RC4_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"ARCFOUR\", CKK_RC4, CKM_RC4_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"DES\", CKK_DES, CKM_DES_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"DESede\", CKK_DES3, CKM_DES3_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"AES\", CKK_AES, CKM_AES_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"Blowfish\", CKK_BLOWFISH, CKM_BLOWFISH_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"ChaCha20\", CKK_CHACHA20, CKM_CHACHA20_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"ChaCha20-Poly1305\", CKK_CHACHA20,\n+                CKM_CHACHA20_KEY_GEN));\n@@ -218,7 +269,21 @@\n-        putKeyInfo(new KeyInfo(\"RC2\", CKK_RC2));\n-        putKeyInfo(new KeyInfo(\"IDEA\", CKK_IDEA));\n-\n-        putKeyInfo(new KeyInfo(\"TlsPremasterSecret\", PCKK_TLSPREMASTER));\n-        putKeyInfo(new KeyInfo(\"TlsRsaPremasterSecret\", PCKK_TLSRSAPREMASTER));\n-        putKeyInfo(new KeyInfo(\"TlsMasterSecret\", PCKK_TLSMASTER));\n-        putKeyInfo(new KeyInfo(\"Generic\", CKK_GENERIC_SECRET));\n+        putKeyInfo(new KeyInfo(\"RC2\", CKK_RC2, CKM_RC2_KEY_GEN));\n+        putKeyInfo(new KeyInfo(\"IDEA\", CKK_IDEA, CKM_IDEA_KEY_GEN));\n+\n+        putKeyInfo(new TLSKeyInfo(\"TlsPremasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsRsaPremasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsMasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsBinderKey\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsClientAppTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsClientHandshakeTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsEarlySecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsFinishedSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsHandshakeSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsKey\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsResumptionMasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsSaltSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsServerAppTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsServerHandshakeTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsUpdateNplus1\"));\n+\n+        putKeyInfo(new KeyInfo(\"Generic\", CKK_GENERIC_SECRET,\n+                CKM_GENERIC_SECRET_KEY_GEN));\n@@ -552,15 +617,14 @@\n-                case (int) CKK_DES -> {\n-                    keyLength =\n-                            P11KeyGenerator.checkKeySize(CKM_DES_KEY_GEN, n, token);\n-                    fixDESParity(encoded, 0);\n-                }\n-                case (int) CKK_DES3 -> {\n-                    keyLength =\n-                            P11KeyGenerator.checkKeySize(CKM_DES3_KEY_GEN, n, token);\n-                    fixDESParity(encoded, 0);\n-                    fixDESParity(encoded, 8);\n-                    if (keyLength == 112) {\n-                        keyType = CKK_DES2;\n-                    } else {\n-                        keyType = CKK_DES3;\n-                        fixDESParity(encoded, 16);\n+                case (int) CKK_DES, (int) CKK_DES3, (int) CKK_AES, (int) CKK_RC4,\n+                        (int) CKK_BLOWFISH, (int) CKK_CHACHA20 -> {\n+                    keyLength = P11KeyGenerator.checkKeySize(ki.keyGenMech, n,\n+                            token);\n+                    if (keyType == CKK_DES || keyType == CKK_DES3) {\n+                        fixDESParity(encoded, 0);\n+                    }\n+                    if (keyType == CKK_DES3) {\n+                        fixDESParity(encoded, 8);\n+                        if (keyLength == 112) {\n+                            keyType = CKK_DES2;\n+                        } else {\n+                            fixDESParity(encoded, 16);\n+                        }\n@@ -569,11 +633,1 @@\n-                case (int) CKK_AES -> keyLength =\n-                        P11KeyGenerator.checkKeySize(CKM_AES_KEY_GEN, n, token);\n-                case (int) CKK_RC4 -> keyLength =\n-                        P11KeyGenerator.checkKeySize(CKM_RC4_KEY_GEN, n, token);\n-                case (int) CKK_BLOWFISH -> keyLength =\n-                        P11KeyGenerator.checkKeySize(CKM_BLOWFISH_KEY_GEN, n,\n-                                token);\n-                case (int) CKK_CHACHA20 -> keyLength = P11KeyGenerator.checkKeySize(\n-                        CKM_CHACHA20_KEY_GEN, n, token);\n-                case (int) CKK_GENERIC_SECRET, (int) PCKK_TLSPREMASTER, (int) PCKK_TLSRSAPREMASTER, (int) PCKK_TLSMASTER ->\n-                        keyType = CKK_GENERIC_SECRET;\n+                case (int) CKK_GENERIC_SECRET -> {}\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11SecretKeyFactory.java","additions":96,"deletions":42,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -314,4 +314,0 @@\n-    public static final long  PCKK_TLSPREMASTER        = 0x7FFFFF25L;\n-    public static final long  PCKK_TLSRSAPREMASTER     = 0x7FFFFF26L;\n-    public static final long  PCKK_TLSMASTER           = 0x7FFFFF27L;\n-\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/PKCS11Constants.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -305,0 +305,17 @@\n+    private static void executeInvalidKeyDerivationTest(String testHeader,\n+            String keyAlg, int keySize, String errorMsg) {\n+        printTestHeader(testHeader);\n+        try {\n+            KDF k = KDF.getInstance(\"HKDF-SHA256\", p11Provider);\n+            k.deriveKey(keyAlg, HKDFParameterSpec.ofExtract()\n+                    .thenExpand(null, keySize));\n+            throw new Exception(\"No exception thrown.\");\n+        } catch (InvalidAlgorithmParameterException iape) {\n+            \/\/ Expected.\n+        } catch (Exception e) {\n+            reportTestFailure(new Exception(errorMsg + \" expected to throw \" +\n+                    \"InvalidAlgorithmParameterException for key algorithm '\" +\n+                    keyAlg + \"'.\", e));\n+        }\n+    }\n+\n@@ -613,0 +630,32 @@\n+    private static void test_unknown_key_algorithm_derivation() {\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an unknown key algorithm\",\n+                \"UnknownAlgorithm\",\n+                32,\n+                \"Derivation of an unknown key algorithm\");\n+    }\n+\n+    private static void test_invalid_key_algorithm_derivation() {\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an invalid key algorithm\",\n+                \"PBKDF2WithHmacSHA1\",\n+                32,\n+                \"Derivation of an invalid key algorithm\");\n+    }\n+\n+    private static void test_invalid_aes_key_algorithm_derivation() {\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an invalid AES key\",\n+                \"PBEWithHmacSHA224AndAES_256\",\n+                32,\n+                \"Derivation of an invalid AES key\");\n+    }\n+\n+    private static void test_invalid_AES_key_size() {\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an invalid AES key size\",\n+                \"AES\",\n+                31,\n+                \"Derivation of an AES key of invalid size (31 bytes)\");\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KDF\/TestHKDF.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"}]}