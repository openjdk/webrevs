{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import static sun.security.pkcs11.wrapper.PKCS11Exception.RV.*;\n@@ -219,0 +220,4 @@\n+            if (e.match(CKR_KEY_SIZE_RANGE)) {\n+                throw new InvalidAlgorithmParameterException(\"Invalid key \" +\n+                        \"size for algorithm '\" + alg + \"'.\", e);\n+            }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11HKDF.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -613,0 +613,16 @@\n+    private static void test_invalid_AES_key_size() {\n+        printTestHeader(\"Test derivation of an invalid AES key size\");\n+        try {\n+            KDF k = KDF.getInstance(\"HKDF-SHA256\", p11Provider);\n+            k.deriveKey(\"AES\", HKDFParameterSpec.ofExtract()\n+                    .thenExpand(null, 31));\n+            throw new Exception(\"No exception thrown.\");\n+        } catch (InvalidAlgorithmParameterException iape) {\n+            \/\/ Expected.\n+        } catch (Exception e) {\n+            reportTestFailure(new Exception(\"Derivation of an AES key of \" +\n+                    \"invalid size (31 bytes) expected to throw \" +\n+                    \"InvalidAlgorithmParameterException.\", e));\n+        }\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KDF\/TestHKDF.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}