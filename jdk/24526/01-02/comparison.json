{"files":[{"patch":"@@ -167,1 +167,1 @@\n-        long derivedKeyType = getDerivedKeyType(ki, alg);\n+        checkDerivedKeyType(ki, alg);\n@@ -190,1 +190,1 @@\n-                new CK_ATTRIBUTE(CKA_KEY_TYPE, derivedKeyType),\n+                new CK_ATTRIBUTE(CKA_KEY_TYPE, ki.keyType),\n@@ -201,1 +201,1 @@\n-                    derivedKeyType, attrs);\n+                    ki.keyType, attrs);\n@@ -237,1 +237,7 @@\n-    private long getDerivedKeyType(P11SecretKeyFactory.KeyInfo ki, String alg)\n+    private static boolean canDeriveKeyInfoType(long t) {\n+        return (t == CKK_DES || t == CKK_DES3 || t == CKK_AES ||\n+                t == CKK_RC4 || t == CKK_BLOWFISH || t == CKK_CHACHA20 ||\n+                t == CKK_GENERIC_SECRET);\n+    }\n+\n+    private void checkDerivedKeyType(P11SecretKeyFactory.KeyInfo ki, String alg)\n@@ -239,13 +245,6 @@\n-        switch ((int) ki.keyType) {\n-            case (int) CKK_DES, (int) CKK_DES3, (int) CKK_AES, (int) CKK_RC4,\n-                    (int) CKK_BLOWFISH, (int) CKK_CHACHA20,\n-                    (int) CKK_GENERIC_SECRET -> {\n-                if (ki.keyType != CKK_GENERIC_SECRET ||\n-                        alg.equalsIgnoreCase(\"Generic\")) {\n-                    return ki.keyType;\n-                }\n-            }\n-            case (int) PCKK_TLSPREMASTER, (int) PCKK_TLSRSAPREMASTER,\n-                    (int) PCKK_TLSMASTER -> {\n-                return CKK_GENERIC_SECRET;\n-            }\n+        Class<?> kiClass = ki.getClass();\n+        if (!kiClass.equals(P11SecretKeyFactory.TLSKeyInfo.class) &&\n+                !(kiClass.equals(P11SecretKeyFactory.KeyInfo.class) &&\n+                        canDeriveKeyInfoType(ki.keyType))) {\n+            throw new InvalidAlgorithmParameterException(\"A key of algorithm \" +\n+                    \"'\" + alg + \"' is not valid for derivation.\");\n@@ -253,2 +252,0 @@\n-        throw new InvalidAlgorithmParameterException(\"A key of algorithm '\" +\n-                alg + \"' is not valid for derivation.\");\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11HKDF.java","additions":16,"deletions":19,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -106,1 +106,2 @@\n-    static sealed class KeyInfo permits PBEKeyInfo, HMACKeyInfo, HKDFKeyInfo {\n+    static sealed class KeyInfo permits PBEKeyInfo, HMACKeyInfo, HKDFKeyInfo,\n+            TLSKeyInfo {\n@@ -153,0 +154,6 @@\n+    static final class TLSKeyInfo extends KeyInfo {\n+        TLSKeyInfo(String algo) {\n+            super(algo, CKK_GENERIC_SECRET);\n+        }\n+    }\n+\n@@ -238,3 +245,16 @@\n-        putKeyInfo(new KeyInfo(\"TlsPremasterSecret\", PCKK_TLSPREMASTER));\n-        putKeyInfo(new KeyInfo(\"TlsRsaPremasterSecret\", PCKK_TLSRSAPREMASTER));\n-        putKeyInfo(new KeyInfo(\"TlsMasterSecret\", PCKK_TLSMASTER));\n+        putKeyInfo(new TLSKeyInfo(\"TlsPremasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsRsaPremasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsMasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsBinderKey\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsClientAppTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsClientHandshakeTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsEarlySecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsFinishedSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsHandshakeSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsKey\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsResumptionMasterSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsSaltSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsServerAppTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsServerHandshakeTrafficSecret\"));\n+        putKeyInfo(new TLSKeyInfo(\"TlsUpdateNplus1\"));\n+\n@@ -586,3 +606,1 @@\n-                case (int) CKK_GENERIC_SECRET, (int) PCKK_TLSPREMASTER,\n-                        (int) PCKK_TLSRSAPREMASTER, (int) PCKK_TLSMASTER ->\n-                        keyType = CKK_GENERIC_SECRET;\n+                case (int) CKK_GENERIC_SECRET -> {}\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11SecretKeyFactory.java","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -314,4 +314,0 @@\n-    public static final long  PCKK_TLSPREMASTER        = 0x7FFFFF25L;\n-    public static final long  PCKK_TLSRSAPREMASTER     = 0x7FFFFF26L;\n-    public static final long  PCKK_TLSMASTER           = 0x7FFFFF27L;\n-\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/PKCS11Constants.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -317,1 +317,2 @@\n-                    \"InvalidAlgorithmParameterException.\", e));\n+                    \"InvalidAlgorithmParameterException for key algorithm '\" +\n+                    keyAlg + \"'.\", e));\n@@ -645,0 +646,8 @@\n+    private static void test_invalid_aes_key_algorithm_derivation() {\n+        executeInvalidKeyDerivationTest(\n+                \"Test derivation of an invalid AES key\",\n+                \"PBEWithHmacSHA224AndAES_256\",\n+                32,\n+                \"Derivation of an invalid AES key\");\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KDF\/TestHKDF.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}