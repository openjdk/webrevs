{"files":[{"patch":"@@ -64,0 +64,4 @@\n+ * <p> See <a href=\"https:\/\/www.rfc-editor.org\/rfc\/rfc9562.html\">\n+ * <i>RFC 9562: Universally Unique Identifiers (UUIDs)<\/i><\/a> for the complete specification,\n+ * including algorithms used to create {@code UUID}s.\n+ *\n@@ -69,5 +73,0 @@\n- * <p> For more information including algorithms used to create {@code UUID}s,\n- * see <a href=\"http:\/\/www.ietf.org\/rfc\/rfc4122.txt\"> <i>RFC&nbsp;4122: A\n- * Universally Unique IDentifier (UUID) URN Namespace<\/i><\/a>, section 4.2\n- * &quot;Algorithms for Creating a Time-Based UUID&quot;.\n- *\n@@ -185,2 +184,1 @@\n-     * Static factory to create a version 7 (time-based) {@code UUID} with a user-supplied\n-     * Unix timestamp in milliseconds.\n+     * Creates a {@code UUIDv7} {@code UUID} from the given Unix Epoch timestamp.\n@@ -188,3 +186,3 @@\n-     * The {@code UUID} embeds the provided Unix Epoch timestamp in milliseconds into\n-     * the first 6 bytes, sets the version and variant bits as per the specification,\n-     * and fills the remaining bytes with random data from a cryptographically strong\n+     * The returned {@code UUID} will have the given {@code timestamp} in\n+     * the first 6 bytes, followed by the version and variant bits representing {@code UUIDv7},\n+     * and the remaining bytes will contain random data from a cryptographically strong\n@@ -193,2 +191,10 @@\n-     * @apiNote The timestamp must be a Unix Epoch timestamp in milliseconds in order\n-     * to be compliant with <a href=\"https:\/\/datatracker.ietf.org\/doc\/html\/rfc9562\">RFC 9562<\/a>.\n+     * @apiNote {@code UUIDv7} values are created by allocating a Unix timestamp in milliseconds\n+     * in the most significant 48 bits and filling the remaining 74 bits, excluding the required\n+     * version and variant bits, with random bits. As such, this method rejects {@code timestamp}\n+     * values that do not fit into 48 bits.\n+     * <p>\n+     * Monotonicity (each subsequent value being greater than the last) is a primary characteristic\n+     * of {@code UUIDv7} values. This is due to the {@code timestamp} value being part of the {@code UUID}.\n+     * Callers of this method that wish to generate monotonic {@code UUIDv7} values are expected to\n+     * ensure that the given {@code timestamp} value is monotonic.\n+     *\n@@ -196,2 +202,2 @@\n-     * @param timestamp\n-     *        A Unix epoch timestamp in milliseconds which must fit in to 48 bits\n+     * @param timestamp the number of milliseconds since midnight 1 Jan 1970 UTC,\n+     *                 leap seconds excluded.\n@@ -199,1 +205,1 @@\n-     * @return a {@code UUID} generated using the provided timestamp\n+     * @return a {@code UUID} constructed using the given {@code timestamp}\n@@ -201,1 +207,1 @@\n-     * @throws IllegalArgumentException if the timestamp is negative or exceeds 48 bits\n+     * @throws IllegalArgumentException if the timestamp is negative or greater than {@code 281474976710655L}\n@@ -207,1 +213,2 @@\n-     * *\/\n+     *\n+     *\/\n@@ -210,1 +217,1 @@\n-            throw new IllegalArgumentException(\"Timestamp must be an unsigned 48-bit Unix Epoch time in milliseconds.\");\n+            throw new IllegalArgumentException(\"Supplied timestamp: \" + timestamp + \"does not fit within 48 bits\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/UUID.java","additions":25,"deletions":18,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -152,44 +152,7 @@\n-    private static void epochMillisTest() throws Exception {\n-        List<UUID> collisions = new ArrayList<>();\n-        Set<UUID> set = new HashSet<>();\n-        long now = System.currentTimeMillis();\n-\n-        for (int i = 0; i < COUNT; i++) {\n-            long ts = now + i;\n-            UUID u = UUID.epochMillis(ts);\n-            if (u.version() != 7) {\n-                throw new Exception(\"Bad version: \" + u);\n-            }\n-            if (u.variant() != 2) {\n-                throw new Exception(\"Bad variant: \" + u);\n-            }\n-            if (!set.add(u)) {\n-                collisions.add(u);\n-            }\n-        }\n-\n-        if (!collisions.isEmpty()) {\n-            \/\/ This is extremely unlikely to happen. If you see this failure,\n-            \/\/ this highly likely points to the implementation bug, rather than\n-            \/\/ the odd chance.\n-            throw new Exception(\"UUID collisions detected: \" + collisions);\n-        }\n-    }\n-\n-    private static void epochMillisTest_Multi() throws Exception {\n-        long now = System.currentTimeMillis();\n-        List<UUID> uuids = IntStream.range(0, COUNT).parallel()\n-                .mapToObj(i -> UUID.epochMillis(now + 1))\n-                .toList();\n-\n-        List<UUID> collisions = new ArrayList<>();\n-        Set<UUID> set = new HashSet<>();\n-        for (UUID u : uuids) {\n-            if (u.version() != 7) {\n-                throw new Exception(\"Bad version: \" + u);\n-            }\n-            if (u.variant() != 2) {\n-                throw new Exception(\"Bad variant: \" + u);\n-            }\n-            if (!set.add(u)) {\n-                collisions.add(u);\n+    private static void epochMillis_userInputTest() {\n+        \/\/ Should not throw for valid currentTimeMillis() timestamp\n+        long timestamp = System.currentTimeMillis();\n+        try {\n+            UUID u = UUID.epochMillis(timestamp);\n+            if (u == null) {\n+                throw new AssertionError(\"Generated UUID should not be null for timestamp: \" + timestamp);\n@@ -197,0 +160,2 @@\n+        } catch (Exception e) {\n+            throw new AssertionError(\"Unexpected exception with timestamp \" + timestamp + \": \" + e);\n@@ -199,10 +164,2 @@\n-        if (!collisions.isEmpty()) {\n-            \/\/ This is extremely unlikely to happen. If you see this failure,\n-            \/\/ this highly likely points to the implementation bug, rather than\n-            \/\/ the odd chance.\n-            throw new Exception(\"UUID collisions detected: \" + collisions);\n-        }\n-    }\n-\n-    private static void epochMillis_userInputTest() {\n-        \/\/ Should not throw for valid timestamp\n+        \/\/ Should not throw for the 48-bit long\n+        long value = 0xFEDCBA987654L;\n@@ -210,2 +167,4 @@\n-            long now = System.currentTimeMillis();\n-            UUID u = UUID.epochMillis(now);\n+            UUID u = UUID.epochMillis(value);\n+            if (u == null) {\n+                throw new AssertionError(\"Generated UUID should not be null for 48-bit long: \" + value);\n+            }\n@@ -213,1 +172,1 @@\n-            throw new AssertionError(\"Unexpected exception with valid timestamp: \" + e);\n+            throw new AssertionError(\"Unexpected exception with 48-bit long \" + value + \": \" + e);\n@@ -217,0 +176,1 @@\n+        value = -0xFEDCBA987654L;\n@@ -218,2 +178,2 @@\n-            UUID.epochMillis(-1);\n-            throw new AssertionError(\"Expected IllegalArgumentException with negative timestamp\");\n+            UUID.epochMillis(value);\n+            throw new AssertionError(\"Expected IllegalArgumentException with negative timestamp: \" + value);\n@@ -223,0 +183,1 @@\n+        value = 1L << 48;\n@@ -224,2 +185,2 @@\n-            UUID.epochMillis(1L << 48);\n-            throw new AssertionError(\"Expected IllegalArgumentException with timestamp > 48 bits\");\n+            UUID.epochMillis(value);\n+            throw new AssertionError(\"Expected IllegalArgumentException with timestamp > 48 bits: \" + value);\n@@ -270,2 +231,2 @@\n-        long now = System.currentTimeMillis();\n-        test = UUID.epochMillis(now);\n+        long timestamp = System.currentTimeMillis();\n+        test = UUID.epochMillis(timestamp);\n@@ -273,1 +234,4 @@\n-            throw new Exception(\"timestampUUID not type 7: \" + test);\n+            throw new Exception(\"epochMillis not type 7: \" + test);\n+        }\n+        if (test.variant() != 2) {\n+            throw new Exception(\"epochMillis not variant 2: \" + test);\n@@ -328,6 +292,0 @@\n-        }\n-\n-        long now = System.currentTimeMillis();\n-        test = UUID.epochMillis(now);\n-        if (test.variant() != 2) {\n-            throw new Exception(\"timestampUUID not variant 2\");\n","filename":"test\/jdk\/java\/util\/UUID\/UUIDTest.java","additions":28,"deletions":70,"binary":false,"changes":98,"status":"modified"}]}