{"files":[{"patch":"@@ -298,1 +298,1 @@\n-    if (_heap_changed.try_unset()) {\n+    if (heap->has_changed()) {\n@@ -515,8 +515,0 @@\n-void ShenandoahControlThread::notify_heap_changed() {\n-  \/\/ This is called from allocation path, and thus should be fast.\n-  \/\/ Notify that something had changed.\n-  if (_heap_changed.is_unset()) {\n-    _heap_changed.set();\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-  ShenandoahSharedFlag _heap_changed;\n@@ -107,2 +106,0 @@\n-  void notify_heap_changed();\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -835,1 +835,3 @@\n-  control_thread()->notify_heap_changed();\n+\n+  \/\/ This is called from allocation path, and thus should be fast.\n+  _heap_changed.try_set();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -298,0 +298,3 @@\n+\n+  \/\/ tracks if new regions have been allocated or retired since last check\n+  ShenandoahSharedFlag   _heap_changed;\n@@ -319,0 +322,6 @@\n+  \/\/ Returns true if allocations have occurred in new regions or if regions have been\n+  \/\/ uncommitted since the previous calls. This call will reset the flag to false.\n+  bool has_changed() {\n+    return _heap_changed.try_unset();\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}