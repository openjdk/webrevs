{"files":[{"patch":"@@ -67,2 +67,0 @@\n-\n-  AOTConstantPoolResolver::initialize();\n@@ -82,2 +80,0 @@\n-\n-  AOTConstantPoolResolver::dispose();\n","filename":"src\/hotspot\/share\/cds\/aotClassLinker.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,13 +40,0 @@\n-AOTConstantPoolResolver::ClassesTable* AOTConstantPoolResolver::_processed_classes = nullptr;\n-\n-void AOTConstantPoolResolver::initialize() {\n-  assert(_processed_classes == nullptr, \"must be\");\n-  _processed_classes = new (mtClass)ClassesTable();\n-}\n-\n-void AOTConstantPoolResolver::dispose() {\n-  assert(_processed_classes != nullptr, \"must be\");\n-  delete _processed_classes;\n-  _processed_classes = nullptr;\n-}\n-\n@@ -147,1 +134,1 @@\n-void AOTConstantPoolResolver::dumptime_resolve_constants(InstanceKlass* ik, TRAPS) {\n+void AOTConstantPoolResolver::preresolve_string_cp_entries(InstanceKlass* ik, TRAPS) {\n@@ -149,0 +136,1 @@\n+    \/\/ The cp->resolved_referenced() array is not ready yet, so we can't call resolve_string().\n@@ -151,7 +139,0 @@\n-  bool first_time;\n-  _processed_classes->put_if_absent(ik, &first_time);\n-  if (!first_time) {\n-    \/\/ We have already resolved the constants in class, so no need to do it again.\n-    return;\n-  }\n-\n","filename":"src\/hotspot\/share\/cds\/aotConstantPoolResolver.cpp","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,3 +83,0 @@\n-  static void initialize();\n-  static void dispose();\n-\n@@ -89,5 +86,1 @@\n-\n-\n-  \/\/ Resolve all constant pool entries that are safe to be stored in the\n-  \/\/ CDS archive.\n-  static void dumptime_resolve_constants(InstanceKlass* ik, TRAPS);\n+  static void preresolve_string_cp_entries(InstanceKlass* ik, TRAPS);\n","filename":"src\/hotspot\/share\/cds\/aotConstantPoolResolver.hpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -609,1 +609,1 @@\n-  oop shared_strings_array = StringTable::init_shared_strings_array(_dumped_interned_strings);\n+  oop shared_strings_array = StringTable::init_shared_strings_array();\n@@ -611,3 +611,0 @@\n-  \/\/ We must succeed because:\n-  \/\/ - _dumped_interned_strings do not contain any large strings.\n-  \/\/ - StringTable::init_shared_table() doesn't create any large arrays.\n@@ -686,1 +683,1 @@\n-  StringTable::write_shared_table(_dumped_interned_strings);\n+  StringTable::write_shared_table();\n@@ -713,2 +710,0 @@\n-\n-    orig_ik->constants()->add_dumped_interned_strings();\n@@ -2070,5 +2065,2 @@\n-\/\/ Not all the strings in the global StringTable are dumped into the archive, because\n-\/\/ some of those strings may be only referenced by classes that are excluded from\n-\/\/ the archive. We need to explicitly mark the strings that are:\n-\/\/   [1] used by classes that WILL be archived;\n-\/\/   [2] included in the SharedArchiveConfigFile.\n+\/\/ Keep track of the contents of the archived interned string table. This table\n+\/\/ is used only by CDSHeapVerifier.\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -649,9 +649,0 @@\n-#if INCLUDE_CDS_JAVA_HEAP\n-  if (CDSConfig::is_dumping_heap() && _extra_interned_strings != nullptr) {\n-    for (int i = 0; i < _extra_interned_strings->length(); i ++) {\n-      OopHandle string = _extra_interned_strings->at(i);\n-      HeapShared::add_to_dumped_interned_strings(string.resolve());\n-    }\n-  }\n-#endif\n-\n@@ -780,1 +771,1 @@\n-  \/\/ Resolve constant pool entries -- we don't load any new classes during this stage\n+  \/\/ Eargerly resolve all string constants in constant pools\n@@ -788,1 +779,1 @@\n-      AOTConstantPoolResolver::dumptime_resolve_constants(ik, CHECK);\n+      AOTConstantPoolResolver::preresolve_string_cp_entries(ik, CHECK);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -949,0 +949,2 @@\n+  assert(CDSConfig::allow_only_single_java_thread(), \"No more interned strings can be added\");\n+\n@@ -1029,1 +1031,1 @@\n-oop StringTable::init_shared_strings_array(const DumpedInternedStrings* dumped_interned_strings) {\n+oop StringTable::init_shared_strings_array() {\n@@ -1036,7 +1038,15 @@\n-  auto copy_into_array = [&] (oop string, bool value_ignored) {\n-    if (!_is_two_dimensional_shared_strings_array) {\n-      assert(index < array->length(), \"no strings should have been added\");\n-      array->obj_at_put(index, string);\n-    } else {\n-      int primary_index = index >> _secondary_array_index_bits;\n-      int secondary_index = index & _secondary_array_index_mask;\n+  auto copy_into_array = [&] (WeakHandle* val) {\n+    oop string = val->peek();\n+    if (string != nullptr && !ArchiveHeapWriter::is_string_too_large_to_archive(string)) {\n+      \/\/ If string is too large, don't put it into the string table.\n+      \/\/ - If there are no other refernences to it, it won't be stored into the archive,\n+      \/\/   so we are all good.\n+      \/\/ - If there's a referece to it, we will report an error inside HeapShared.cpp and\n+      \/\/   dumping will fail.\n+      HeapShared::add_to_dumped_interned_strings(string);\n+      if (!_is_two_dimensional_shared_strings_array) {\n+        assert(index < array->length(), \"no strings should have been added\");\n+        array->obj_at_put(index, string);\n+      } else {\n+        int primary_index = index >> _secondary_array_index_bits;\n+        int secondary_index = index & _secondary_array_index_mask;\n@@ -1044,2 +1054,2 @@\n-      assert(primary_index < array->length(), \"no strings should have been added\");\n-      objArrayOop secondary = (objArrayOop)array->obj_at(primary_index);\n+        assert(primary_index < array->length(), \"no strings should have been added\");\n+        objArrayOop secondary = (objArrayOop)array->obj_at(primary_index);\n@@ -1047,3 +1057,5 @@\n-      assert(secondary != nullptr && secondary->is_objArray(), \"must be\");\n-      assert(secondary_index < secondary->length(), \"no strings should have been added\");\n-      secondary->obj_at_put(secondary_index, string);\n+        assert(secondary != nullptr && secondary->is_objArray(), \"must be\");\n+        assert(secondary_index < secondary->length(), \"no strings should have been added\");\n+        secondary->obj_at_put(secondary_index, string);\n+      }\n+      index ++;\n@@ -1051,2 +1063,1 @@\n-\n-    index ++;\n+    return true;\n@@ -1054,1 +1065,0 @@\n-  dumped_interned_strings->iterate_all(copy_into_array);\n@@ -1056,0 +1066,2 @@\n+  _local_table->do_safepoint_scan(copy_into_array);\n+  log_info(cds)(\"Archived %d interned strings\", index);\n@@ -1057,1 +1069,1 @@\n-}\n+};\n@@ -1059,1 +1071,1 @@\n-void StringTable::write_shared_table(const DumpedInternedStrings* dumped_interned_strings) {\n+void StringTable::write_shared_table() {\n@@ -1064,4 +1076,8 @@\n-  auto copy_into_shared_table = [&] (oop string, bool value_ignored) {\n-    unsigned int hash = java_lang_String::hash_code(string);\n-    writer.add(hash, index);\n-    index ++;\n+  auto copy_into_shared_table = [&] (WeakHandle* val) {\n+    oop string = val->peek();\n+    if (string != nullptr && !ArchiveHeapWriter::is_string_too_large_to_archive(string)) {\n+      unsigned int hash = java_lang_String::hash_code(string);\n+      writer.add(hash, index);\n+      index ++;\n+    }\n+    return true;\n@@ -1069,2 +1085,1 @@\n-  dumped_interned_strings->iterate_all(copy_into_shared_table);\n-\n+  _local_table->do_safepoint_scan(copy_into_shared_table);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":39,"deletions":24,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-class DumpedInternedStrings;\n@@ -150,2 +149,2 @@\n-  static oop init_shared_strings_array(const DumpedInternedStrings* dumped_interned_strings) NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n-  static void write_shared_table(const DumpedInternedStrings* dumped_interned_strings) NOT_CDS_JAVA_HEAP_RETURN;\n+  static oop init_shared_strings_array() NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n+  static void write_shared_table() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -377,34 +377,0 @@\n-\n-void ConstantPool::add_dumped_interned_strings() {\n-  InstanceKlass* ik = pool_holder();\n-  if (!ik->is_linked()) {\n-    \/\/ resolved_references() doesn't exist yet, so we have no resolved CONSTANT_String entries. However,\n-    \/\/ some static final fields may have default values that were initialized when the class was parsed.\n-    \/\/ We need to enter those into the CDS archive strings table.\n-    for (JavaFieldStream fs(ik); !fs.done(); fs.next()) {\n-      if (fs.access_flags().is_static()) {\n-        fieldDescriptor& fd = fs.field_descriptor();\n-        if (fd.field_type() == T_OBJECT) {\n-          int offset = fd.offset();\n-          check_and_add_dumped_interned_string(ik->java_mirror()->obj_field(offset));\n-        }\n-      }\n-    }\n-  } else {\n-    objArrayOop rr = resolved_references();\n-    if (rr != nullptr) {\n-      int rr_len = rr->length();\n-      for (int i = 0; i < rr_len; i++) {\n-        check_and_add_dumped_interned_string(rr->obj_at(i));\n-      }\n-    }\n-  }\n-}\n-\n-void ConstantPool::check_and_add_dumped_interned_string(oop obj) {\n-  if (obj != nullptr && java_lang_String::is_instance(obj) &&\n-      !ArchiveHeapWriter::is_string_too_large_to_archive(obj)) {\n-    HeapShared::add_to_dumped_interned_strings(obj);\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -165,1 +165,0 @@\n-  static void check_and_add_dumped_interned_string(oop obj);\n@@ -687,1 +686,0 @@\n-  void add_dumped_interned_strings() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test storing a dynamically generated interned string in the AOT cache\n+ * @bug 8356125\n+ * @requires vm.cds.write.archived.java.heap\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @requires vm.debug\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @build GeneratedInternedString\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar GeneratedInternedStringApp\n+ * @run driver GeneratedInternedString\n+ *\/\n+\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+\n+public class GeneratedInternedString {\n+    public static void main(String... args) throws Exception {\n+        SimpleCDSAppTester.of(\"GeneratedInternedString\")\n+            .addVmArgs(\"-XX:AOTInitTestClass=GeneratedInternedStringApp\")\n+            .classpath(\"app.jar\")\n+            .appCommandLine(\"GeneratedInternedStringApp\")\n+            .runAOTWorkflow();\n+    }\n+}\n+\n+\/\/ This class is cached in the AOT-initialized state. At the beginning of the production\n+\/\/ run, all of the static fields in GeneratedInternedStringApp will retain their values\n+\/\/ at the end of the assembly phase. GeneratedInternedStringApp::<clinit> is NOT executed in the\n+\/\/ production run.\n+class GeneratedInternedStringApp {\n+    static volatile int n = 0;\n+    static final String generatedInternedString = generate();\n+\n+    public static void main(String args[]) {\n+        n = args.length;\n+        String b = generate();\n+        if (generatedInternedString != b) {\n+            throw new RuntimeException(\"generatedInternedString: \" + System.identityHashCode(generatedInternedString)\n+                                       + \" vs b:\" + System.identityHashCode(b));\n+        }\n+    }\n+\n+    static String generate() {\n+        System.out.println(\"generate() is called\");\n+        return (\"GeneratedInternedStringApp_String\" + n).intern();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/GeneratedInternedString.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Handling of non-final static string that has an initial value\n+ * @bug 8356125\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib\n+ * @build NonFinalStaticWithInitVal_Helper\n+ * @build NonFinalStaticWithInitVal\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar MyTestApp NonFinalStaticWithInitVal_Helper\n+ * @run driver NonFinalStaticWithInitVal AOT\n+ *\/\n+\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class NonFinalStaticWithInitVal {\n+    static final String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n+    static final String mainClass = \"MyTestApp\";\n+\n+    public static void main(String[] args) throws Exception {\n+        for (int i = 0; i < 2; i++) {\n+            SimpleCDSAppTester.of(\"NonFinalStaticWithInitVal\")\n+                .addVmArgs(\"-XX:\" + (i == 0 ? \"-\" : \"+\") + \"AOTClassLinking\",\n+                           \"-Xlog:cds\")\n+            .classpath(\"app.jar\")\n+            .appCommandLine(\"MyTestApp\")\n+            .setProductionChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(\"field = Dummy 12345678\");\n+                })\n+            .runStaticWorkflow()\n+            .runAOTWorkflow();\n+        }\n+    }\n+}\n+\n+class MyTestApp {\n+    volatile static int x = 0;\n+\n+    public static void main(String args[]) throws Exception {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Dummy \");\n+        sb.append(\"1234567\");\n+        sb.append(8 + x);\n+        String myValue = sb.toString().intern();\n+        String theirValue = NonFinalStaticWithInitVal_Helper.foo;\n+        System.out.println(\"field = \" + theirValue);\n+        if (myValue != theirValue) {\n+            \/\/ String literals from different class files must be interned.\n+            throw new RuntimeException(\"Interned strings do not match\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/NonFinalStaticWithInitVal.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+\n+public class NonFinalStaticWithInitVal_Helper {\n+    static String foo = String \"Dummy 12345678\";\n+}\n+\n+*\/\n+\n+public class NonFinalStaticWithInitVal_Helper\n+    version 51:0\n+{\n+    static Field foo:\"Ljava\/lang\/String;\" = String \"Dummy 12345678\";\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/NonFinalStaticWithInitVal_Helper.jasm","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"}]}