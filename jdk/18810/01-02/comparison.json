{"files":[{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8330467\n@@ -184,0 +185,14 @@\n+    \/\/ Define a hidden class that uses lambda and contains its implementation\n+    \/\/ This verifies LambdaMetaFactory supports the caller which is a hidden class\n+    @Test\n+    public void testHiddenLambda() throws Throwable {\n+        HiddenTest t = (HiddenTest)defineHiddenClass(\"HiddenLambda\").newInstance();\n+        try {\n+            t.test();\n+        } catch (Error e) {\n+            if (!e.getMessage().equals(\"thrown by \" + t.getClass().getName())) {\n+                throw e;\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/BasicTest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-public class Lambda implements HiddenTest {\n+public class HiddenLambda implements HiddenTest {\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/src\/HiddenLambda.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/src\/Lambda.java","status":"copied"},{"patch":"@@ -28,1 +28,1 @@\n-         Function<Object, String> f = o -> o.toString();\n+         Function<Object, String> f = Object::toString;\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/src\/Lambda.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}