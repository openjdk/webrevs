{"files":[{"patch":"@@ -178,4 +178,5 @@\n-        \/\/ lambda class has no access to the resolved method. Instead, we need\n-        \/\/ to pass the live implementation method handle to the proxy class\n-        \/\/ to invoke directly. (javac prefers to avoid this situation by\n-        \/\/ generating bridges in the target class)\n+        \/\/ lambda class has no access to the resolved method, or the\n+        \/\/ target class is hidden and could not be referenced as constant.\n+        \/\/ Instead, we need to pass the live implementation method handle\n+        \/\/ to the proxy class to invoke directly. (javac prefers to avoid\n+        \/\/ this situation by generating bridges in the target class)\n@@ -184,1 +185,2 @@\n-                               implKind == H_INVOKESPECIAL;\n+                               implKind == H_INVOKESPECIAL ||\n+                               implInfo.getDeclaringClass().isHidden();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-         Function<Object, String> f = Object::toString;\n+         Function<Object, String> f = o -> o.toString();\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/src\/Lambda.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}