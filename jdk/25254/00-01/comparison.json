{"files":[{"patch":"@@ -1229,1 +1229,1 @@\n-    return TypeInt::ZERO;\n+    return TypeInt::TOP;\n@@ -1523,1 +1523,1 @@\n-    return TypeLong::ZERO;\n+    return TypeLong::TOP;\n@@ -1537,2 +1537,2 @@\n-  \/\/ JVMS irem bytecode: \"the magnitude of the result is always less than the magnitude of the divisor\"\n-  \/\/ \"less than\" means we can subtract 1 to get an inclusive upper bound in [0, 2^31-1]\n+  \/\/ JVMS lrem bytecode: \"the magnitude of the result is always less than the magnitude of the divisor\"\n+  \/\/ \"less than\" means we can subtract 1 to get an inclusive upper bound in [0, 2^63-1]\n@@ -1557,1 +1557,1 @@\n-    \/\/ Mixed signs, so  we don't know the sign of the result, but the result is\n+    \/\/ Mixed signs, so we don't know the sign of the result, but the result is\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @key randomness\n@@ -43,1 +44,3 @@\n-    private static final Generator<Integer> G = Generators.G.ints();\n+    private static final Generator<Integer> INT_GEN = Generators.G.ints();\n+    private static final int POS_INT = Generators.G.ints().restricted(1, Integer.MAX_VALUE).next();\n+    private static final int NEG_INT = Generators.G.ints().restricted(Integer.MIN_VALUE, -1).next();\n@@ -58,2 +61,2 @@\n-        int a = G.next();\n-        int b = G.next();\n+        int a = INT_GEN.next();\n+        int b = INT_GEN.next();\n@@ -72,4 +75,4 @@\n-        Asserts.assertEQ(x != 0 && 123 % x < 0, nonNegativeDividend(x));\n-        Asserts.assertEQ(x != 0 && 123 % x <= 0, nonNegativeDividendInRange(x));\n-        Asserts.assertEQ(x != 0 && -123 % x > 0, negativeDividend(x));\n-        Asserts.assertEQ(x != 0 && -123 % x >= 0, negativeDividendInRange(x));\n+        Asserts.assertEQ(x != 0 && POS_INT % x < 0, nonNegativeDividend(x));\n+        Asserts.assertEQ(x != 0 && POS_INT % x <= 0, nonNegativeDividendInRange(x));\n+        Asserts.assertEQ(x != 0 && NEG_INT % x > 0, negativeDividend(x));\n+        Asserts.assertEQ(x != 0 && NEG_INT % x >= 0, negativeDividendInRange(x));\n@@ -91,1 +94,1 @@\n-        return x != 0 && 123 % x < 0;\n+        return x != 0 && POS_INT % x < 0;\n@@ -100,1 +103,1 @@\n-        return x != 0 && 123 % x <= 0;\n+        return x != 0 && POS_INT % x <= 0;\n@@ -108,1 +111,1 @@\n-        return x != 0 && -123 % x > 0;\n+        return x != 0 && NEG_INT % x > 0;\n@@ -117,1 +120,1 @@\n-        return x != 0 && -123 % x >= 0;\n+        return x != 0 && NEG_INT % x >= 0;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/ModINodeValueTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+ * @key randomness\n@@ -43,1 +44,3 @@\n-    private static final Generator<Long> G = Generators.G.longs();\n+    private static final Generator<Long> LONG_GEN = Generators.G.longs();\n+    private static final long POS_LONG = Generators.G.longs().restricted(1L, Long.MAX_VALUE).next();\n+    private static final long NEG_LONG = Generators.G.longs().restricted(Long.MIN_VALUE, -1L).next();\n@@ -58,2 +61,2 @@\n-        long a = G.next();\n-        long b = G.next();\n+        long a = LONG_GEN.next();\n+        long b = LONG_GEN.next();\n@@ -72,4 +75,4 @@\n-        Asserts.assertEQ(x != 0 && 123 % x < 0, nonNegativeDividend(x));\n-        Asserts.assertEQ(x != 0 && 123 % x <= 0, nonNegativeDividendInRange(x));\n-        Asserts.assertEQ(x != 0 && -123 % x > 0, negativeDividend(x));\n-        Asserts.assertEQ(x != 0 && -123 % x >= 0, negativeDividendInRange(x));\n+        Asserts.assertEQ(x != 0 && POS_LONG % x < 0, nonNegativeDividend(x));\n+        Asserts.assertEQ(x != 0 && POS_LONG % x <= 0, nonNegativeDividendInRange(x));\n+        Asserts.assertEQ(x != 0 && NEG_LONG % x > 0, negativeDividend(x));\n+        Asserts.assertEQ(x != 0 && NEG_LONG % x >= 0, negativeDividendInRange(x));\n@@ -91,1 +94,1 @@\n-        return x != 0 && 123 % x < 0;\n+        return x != 0 && POS_LONG % x < 0;\n@@ -100,1 +103,1 @@\n-        return x != 0 && 123 % x <= 0;\n+        return x != 0 && POS_LONG % x <= 0;\n@@ -108,1 +111,1 @@\n-        return x != 0 && -123 % x > 0;\n+        return x != 0 && NEG_LONG % x > 0;\n@@ -117,1 +120,1 @@\n-        return x != 0 && -123 % x >= 0;\n+        return x != 0 && NEG_LONG % x >= 0;\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/ModLNodeValueTests.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"}]}