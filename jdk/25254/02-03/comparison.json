{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import compiler.lib.generators.RestrictableGenerator;\n@@ -28,0 +29,1 @@\n+import compiler.lib.ir_framework.ForceInline;\n@@ -44,3 +46,3 @@\n-    private static final Generator<Integer> INT_GEN = Generators.G.ints();\n-    private static final int POS_INT = Generators.G.ints().restricted(1, Integer.MAX_VALUE).next();\n-    private static final int NEG_INT = Generators.G.ints().restricted(Integer.MIN_VALUE, -1).next();\n+    private static final RestrictableGenerator<Integer> INT_GEN = Generators.G.ints();\n+    private static final int POS_INT = INT_GEN.restricted(1, Integer.MAX_VALUE).next();\n+    private static final int NEG_INT = INT_GEN.restricted(Integer.MIN_VALUE, -1).next();\n@@ -58,1 +60,2 @@\n-        \"modByKnownBoundsLimitedByDividendLower\", \"modByKnownBoundsLimitedByDividendLowerInRange\"\n+        \"modByKnownBoundsLimitedByDividendLower\", \"modByKnownBoundsLimitedByDividendLowerInRange\",\n+        \"testRandomLimits\"\n@@ -87,0 +90,14 @@\n+\n+        int res;\n+        try {\n+            res = testRandomLimitsInterpreted(x, y);\n+        } catch (ArithmeticException _) {\n+            try {\n+                testRandomLimits(x, y);\n+                Asserts.fail(\"Expected ArithmeticException\");\n+                return; \/\/ unreachable\n+            } catch (ArithmeticException _) {\n+                return; \/\/ test succeeded, no result to assert\n+            }\n+        }\n+        Asserts.assertEQ(res, testRandomLimits(x, y));\n@@ -92,1 +109,1 @@\n-    \/\/ i.e., posVal % x < 0 => false.\n+    \/\/ i.e., POS_INT % x < 0 => false.\n@@ -100,1 +117,1 @@\n-    \/\/ i.e., posVal % x < 0 => false.\n+    \/\/ i.e., POS_INT % x < 0 => false.\n@@ -109,1 +126,1 @@\n-    \/\/ i.e., negValue % x > 0 => false.\n+    \/\/ i.e., NEG_INT % x > 0 => false.\n@@ -117,1 +134,1 @@\n-    \/\/ i.e., negValue % x > 0 => false.\n+    \/\/ i.e., NEG_INT % x > 0 => false.\n@@ -202,0 +219,73 @@\n+\n+    private static final int LIMIT_1 = INT_GEN.next();\n+    private static final int LIMIT_2 = INT_GEN.next();\n+    private static final int LIMIT_3 = INT_GEN.next();\n+    private static final int LIMIT_4 = INT_GEN.next();\n+    private static final int LIMIT_5 = INT_GEN.next();\n+    private static final int LIMIT_6 = INT_GEN.next();\n+    private static final int LIMIT_7 = INT_GEN.next();\n+    private static final int LIMIT_8 = INT_GEN.next();\n+    private static final Range RANGE_1 = Range.generate(INT_GEN);\n+    private static final Range RANGE_2 = Range.generate(INT_GEN);\n+\n+    @Test\n+    public int testRandomLimits(int x, int y) {\n+        x = RANGE_1.clamp(x);\n+        y = RANGE_2.clamp(y);\n+        int z = x % y;\n+\n+        int sum = 0;\n+        if (z < LIMIT_1) sum += 1;\n+        if (z < LIMIT_2) sum += 2;\n+        if (z < LIMIT_3) sum += 4;\n+        if (z < LIMIT_4) sum += 8;\n+        if (z > LIMIT_5) sum += 16;\n+        if (z > LIMIT_6) sum += 32;\n+        if (z > LIMIT_7) sum += 64;\n+        if (z > LIMIT_8) sum += 128;\n+\n+        return sum;\n+    }\n+\n+    @DontCompile\n+    public int testRandomLimitsInterpreted(int x, int y) {\n+        x = RANGE_1.clamp(x);\n+        y = RANGE_2.clamp(y);\n+        int z = x % y;\n+\n+        int sum = 0;\n+        if (z < LIMIT_1) sum += 1;\n+        if (z < LIMIT_2) sum += 2;\n+        if (z < LIMIT_3) sum += 4;\n+        if (z < LIMIT_4) sum += 8;\n+        if (z > LIMIT_5) sum += 16;\n+        if (z > LIMIT_6) sum += 32;\n+        if (z > LIMIT_7) sum += 64;\n+        if (z > LIMIT_8) sum += 128;\n+\n+        return sum;\n+    }\n+\n+    record Range(int lo, int hi) {\n+        Range {\n+            if (lo > hi) {\n+                throw new IllegalArgumentException(\"lo > hi\");\n+            }\n+        }\n+\n+        @ForceInline\n+        int clamp(int v) {\n+            return Math.min(hi, Math.max(v, lo));\n+        }\n+\n+        static Range generate(Generator<Integer> g) {\n+            var a = g.next();\n+            var b = g.next();\n+            if (a > b) {\n+                var tmp = a;\n+                a = b;\n+                b = tmp;\n+            }\n+            return new Range(a, b);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/ModINodeValueTests.java","additions":98,"deletions":8,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import compiler.lib.ir_framework.ForceInline;\n@@ -58,1 +59,2 @@\n-        \"modByKnownBoundsLimitedByDividendLower\", \"modByKnownBoundsLimitedByDividendLowerInRange\"\n+        \"modByKnownBoundsLimitedByDividendLower\", \"modByKnownBoundsLimitedByDividendLowerInRange\",\n+        \"testRandomLimits\"\n@@ -87,0 +89,14 @@\n+\n+        int res;\n+        try {\n+            res = testRandomLimitsInterpreted(x, y);\n+        } catch (ArithmeticException _) {\n+            try {\n+                testRandomLimits(x, y);\n+                Asserts.fail(\"Expected ArithmeticException\");\n+                return; \/\/ unreachable\n+            } catch (ArithmeticException _) {\n+                return; \/\/ test succeeded, no result to assert\n+            }\n+        }\n+        Asserts.assertEQ(res, testRandomLimits(x, y));\n@@ -202,0 +218,74 @@\n+\n+\n+    private static final long LIMIT_1 = LONG_GEN.next();\n+    private static final long LIMIT_2 = LONG_GEN.next();\n+    private static final long LIMIT_3 = LONG_GEN.next();\n+    private static final long LIMIT_4 = LONG_GEN.next();\n+    private static final long LIMIT_5 = LONG_GEN.next();\n+    private static final long LIMIT_6 = LONG_GEN.next();\n+    private static final long LIMIT_7 = LONG_GEN.next();\n+    private static final long LIMIT_8 = LONG_GEN.next();\n+    private static final Range RANGE_1 = Range.generate(LONG_GEN);\n+    private static final Range RANGE_2 = Range.generate(LONG_GEN);\n+\n+    @Test\n+    public int testRandomLimits(long x, long y) {\n+        x = RANGE_1.clamp(x);\n+        y = RANGE_2.clamp(y);\n+        long z = x % y;\n+\n+        int sum = 0;\n+        if (z < LIMIT_1) sum += 1;\n+        if (z < LIMIT_2) sum += 2;\n+        if (z < LIMIT_3) sum += 4;\n+        if (z < LIMIT_4) sum += 8;\n+        if (z > LIMIT_5) sum += 16;\n+        if (z > LIMIT_6) sum += 32;\n+        if (z > LIMIT_7) sum += 64;\n+        if (z > LIMIT_8) sum += 128;\n+\n+        return sum;\n+    }\n+\n+    @DontCompile\n+    public int testRandomLimitsInterpreted(long x, long y) {\n+        x = RANGE_1.clamp(x);\n+        y = RANGE_2.clamp(y);\n+        long z = x % y;\n+\n+        int sum = 0;\n+        if (z < LIMIT_1) sum += 1;\n+        if (z < LIMIT_2) sum += 2;\n+        if (z < LIMIT_3) sum += 4;\n+        if (z < LIMIT_4) sum += 8;\n+        if (z > LIMIT_5) sum += 16;\n+        if (z > LIMIT_6) sum += 32;\n+        if (z > LIMIT_7) sum += 64;\n+        if (z > LIMIT_8) sum += 128;\n+\n+        return sum;\n+    }\n+\n+    record Range(long lo, long hi) {\n+        Range {\n+            if (lo > hi) {\n+                throw new IllegalArgumentException(\"lo > hi\");\n+            }\n+        }\n+\n+        @ForceInline\n+        long clamp(long v) {\n+            return Math.min(hi, Math.max(v, lo));\n+        }\n+\n+        static Range generate(Generator<Long> g) {\n+            var a = g.next();\n+            var b = g.next();\n+            if (a > b) {\n+                var tmp = a;\n+                a = b;\n+                b = tmp;\n+            }\n+            return new Range(a, b);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/ModLNodeValueTests.java","additions":91,"deletions":1,"binary":false,"changes":92,"status":"modified"}]}