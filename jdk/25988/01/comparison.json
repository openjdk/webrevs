{"files":[{"patch":"@@ -2026,4 +2026,6 @@\n-    case Op_ReverseBytesS:  return TypeInt::make(byteswap(checked_cast<jshort>(con->is_int()->get_con())));\n-    case Op_ReverseBytesUS: return TypeInt::make(byteswap(checked_cast<jchar>(con->is_int()->get_con())));\n-    case Op_ReverseBytesI:  return TypeInt::make(byteswap(checked_cast<jint>(con->is_int()->get_con())));\n-    case Op_ReverseBytesL:  return TypeLong::make(byteswap(checked_cast<jlong>(con->is_long()->get_con())));\n+    \/\/ It is valid in bytecode to load any int and pass it to a method that expects a smaller type (i.e., short, char).\n+    \/\/ Let's cast the value to match the Java behavior.\n+    case Op_ReverseBytesS:  return TypeInt::make(byteswap(static_cast<jshort>(con->is_int()->get_con())));\n+    case Op_ReverseBytesUS: return TypeInt::make(byteswap(static_cast<jchar>(con->is_int()->get_con())));\n+    case Op_ReverseBytesI:  return TypeInt::make(byteswap(con->is_int()->get_con()));\n+    case Op_ReverseBytesL:  return TypeLong::make(byteswap(con->is_long()->get_con()));\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+public class ReverseBytesConstantsHelper {\n+    public Method \"<init>\":\"()V\" stack 1 locals 1 {\n+        aload_0;\n+        invokespecial Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+    }\n+\n+    public static Method reverseBytesShort:\"(I)S\" stack 1 locals 1 {\n+        iload_0;\n+        invokestatic Method java\/lang\/Short.\"reverseBytes\":\"(S)S\";\n+        ireturn;\n+    }\n+\n+    public static Method reverseBytesChar:\"(I)C\" stack 1 locals 1 {\n+        iload_0;\n+        invokestatic Method java\/lang\/Character.\"reverseBytes\":\"(C)C\";\n+        ireturn;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/ReverseBytesConstantsHelper.jasm","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -23,2 +23,0 @@\n-package compiler.c2.gvn;\n-\n@@ -37,1 +35,1 @@\n- * @bug 8353551\n+ * @bug 8353551 8359678\n@@ -40,1 +38,2 @@\n- * @run driver compiler.c2.gvn.ReverseBytesConstantsTests\n+ * @compile ReverseBytesConstantsHelper.jasm\n+ * @run driver ReverseBytesConstantsTests\n@@ -54,1 +53,1 @@\n-        TestFramework.run();\n+        TestFramework.runWithFlags(\"-XX:CompileCommand=inline,ReverseBytesConstantsHelper::*\");\n@@ -92,0 +91,2 @@\n+        Asserts.assertEQ(ReverseBytesConstantsHelper.reverseBytesShort(C_INT), testS5());\n+        Asserts.assertEQ(ReverseBytesConstantsHelper.reverseBytesShort(C_CHAR), testS6());\n@@ -100,0 +101,2 @@\n+        Asserts.assertEQ(ReverseBytesConstantsHelper.reverseBytesChar(C_INT), testUS5());\n+        Asserts.assertEQ(ReverseBytesConstantsHelper.reverseBytesChar(C_SHORT), testUS6());\n@@ -174,0 +177,12 @@\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_S, IRNode.CALL})\n+    public short testS5() {\n+        return ReverseBytesConstantsHelper.reverseBytesShort(C_INT);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_S, IRNode.CALL})\n+    public short testS6() {\n+        return ReverseBytesConstantsHelper.reverseBytesShort(C_CHAR);\n+    }\n+\n@@ -198,0 +213,12 @@\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_US, IRNode.CALL})\n+    public char testUS5() {\n+        return ReverseBytesConstantsHelper.reverseBytesChar(C_INT);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.REVERSE_BYTES_US, IRNode.CALL})\n+    public char testUS6() {\n+        return ReverseBytesConstantsHelper.reverseBytesChar(C_SHORT);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/ReverseBytesConstantsTests.java","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"}]}