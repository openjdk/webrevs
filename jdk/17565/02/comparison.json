{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,22 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Paper;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -30,1 +51,0 @@\n- * @summary Page setup dialog settings\n@@ -32,0 +52,5 @@\n+ * @summary Page setup dialog settings\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -34,5 +59,0 @@\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-\n@@ -41,41 +61,66 @@\n-  PrinterJob myPrinterJob;\n-  PageFormat myPageFormat;\n-  Label pw, ph, pglm, pgiw, pgrm, pgtm, pgih, pgbm;\n-  Label myWidthLabel;\n-  Label myHeightLabel;\n-  Label myImageableXLabel;\n-  Label myImageableYLabel;\n-  Label myImageableRightLabel;\n-  Label myImageableBottomLabel;\n-  Label myImageableWidthLabel;\n-  Label myImageableHeightLabel;\n-  Label myOrientationLabel;\n-  Checkbox reverseCB;\n-  boolean alpha = false;\n-  boolean reverse = false;\n-\n-  protected void displayPageFormatAttributes() {\n-\n-    myWidthLabel.setText(\"Format Width = \" + (float)myPageFormat.getWidth());\n-    myHeightLabel.setText(\"Format Height = \" + (float)myPageFormat.getHeight());\n-    myImageableXLabel.setText\n-        (\"Format Left Margin = \" + (float)myPageFormat.getImageableX());\n-    myImageableRightLabel.setText\n-        (\"Format Right Margin = \" + (float)(myPageFormat.getWidth() -\n-        (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n-    myImageableWidthLabel.setText\n-        (\"Format ImageableWidth = \" + (float)myPageFormat.getImageableWidth());\n-    myImageableYLabel.setText\n-        (\"Format Top Margin = \" + (float)myPageFormat.getImageableY());\n-    myImageableBottomLabel.setText\n-        (\"Format Bottom Margin = \" + (float)(myPageFormat.getHeight() -\n-        (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n-    myImageableHeightLabel.setText\n-        (\"Format ImageableHeight = \" + (float)myPageFormat.getImageableHeight());\n-    int o = myPageFormat.getOrientation();\n-    if (o == PageFormat.LANDSCAPE && reverse) {\n-        o = PageFormat.REVERSE_LANDSCAPE;\n-        myPageFormat.setOrientation(PageFormat.REVERSE_LANDSCAPE);\n-    } else if (o == PageFormat.REVERSE_LANDSCAPE && !reverse) {\n-        o = PageFormat.LANDSCAPE;\n-        myPageFormat.setOrientation(PageFormat.LANDSCAPE);\n+    PrinterJob myPrinterJob;\n+    PageFormat myPageFormat;\n+    Label pw, ph, pglm, pgiw, pgrm, pgtm, pgih, pgbm;\n+    Label myWidthLabel;\n+    Label myHeightLabel;\n+    Label myImageableXLabel;\n+    Label myImageableYLabel;\n+    Label myImageableRightLabel;\n+    Label myImageableBottomLabel;\n+    Label myImageableWidthLabel;\n+    Label myImageableHeightLabel;\n+    Label myOrientationLabel;\n+    Checkbox reverseCB;\n+    boolean alpha = false;\n+    boolean reverse = false;\n+\n+    private static final String instructions =\n+             \" You must have a printer available to perform this test\\n\" +\n+             \"\\n\" +\n+             \" This test is very flexible and requires much interaction.\\n\" +\n+             \" If the platform print dialog supports it, adjust orientation\\n\" +\n+             \" and margins and print pages and compare the results with the request.\";\n+\n+    protected void displayPageFormatAttributes() {\n+\n+        myWidthLabel.setText(\"Format Width = \" + (float) myPageFormat.getWidth());\n+        myHeightLabel.setText(\"Format Height = \" + (float) myPageFormat.getHeight());\n+        myImageableXLabel.setText\n+                (\"Format Left Margin = \" + (float) myPageFormat.getImageableX());\n+        myImageableRightLabel.setText\n+                (\"Format Right Margin = \" + (float) (myPageFormat.getWidth() -\n+                        (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n+        myImageableWidthLabel.setText\n+                (\"Format ImageableWidth = \" + (float) myPageFormat.getImageableWidth());\n+        myImageableYLabel.setText\n+                (\"Format Top Margin = \" + (float) myPageFormat.getImageableY());\n+        myImageableBottomLabel.setText\n+                (\"Format Bottom Margin = \" + (float) (myPageFormat.getHeight() -\n+                        (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n+        myImageableHeightLabel.setText\n+                (\"Format ImageableHeight = \" + (float) myPageFormat.getImageableHeight());\n+        int o = myPageFormat.getOrientation();\n+        if (o == PageFormat.LANDSCAPE && reverse) {\n+            o = PageFormat.REVERSE_LANDSCAPE;\n+            myPageFormat.setOrientation(PageFormat.REVERSE_LANDSCAPE);\n+        } else if (o == PageFormat.REVERSE_LANDSCAPE && !reverse) {\n+            o = PageFormat.LANDSCAPE;\n+            myPageFormat.setOrientation(PageFormat.LANDSCAPE);\n+        }\n+        myOrientationLabel.setText\n+                (\"Format Orientation = \" +\n+                        (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n+                                o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n+                                        o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n+                                                \"<invalid>\"));\n+        Paper p = myPageFormat.getPaper();\n+        pw.setText(\"Paper Width = \" + (float) p.getWidth());\n+        ph.setText(\"Paper Height = \" + (float) p.getHeight());\n+        pglm.setText(\"Paper Left Margin = \" + (float) p.getImageableX());\n+        pgiw.setText(\"Paper Imageable Width = \" + (float) p.getImageableWidth());\n+        pgrm.setText(\"Paper Right Margin = \" +\n+                (float) (p.getWidth() - (p.getImageableX() + p.getImageableWidth())));\n+        pgtm.setText(\"Paper Top Margin = \" + (float) p.getImageableY());\n+        pgih.setText(\"Paper Imageable Height = \" + (float) p.getImageableHeight());\n+        pgbm.setText(\"Paper Bottom Margin = \" +\n+                (float) (p.getHeight() - (p.getImageableY() + p.getImageableHeight())));\n@@ -83,59 +128,0 @@\n-    myOrientationLabel.setText\n-        (\"Format Orientation = \" +\n-                (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n-                 o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n-                 o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n-                 \"<invalid>\"));\n-    Paper p = myPageFormat.getPaper();\n-    pw.setText(\"Paper Width = \" + (float)p.getWidth());\n-    ph.setText(\"Paper Height = \" + (float)p.getHeight());\n-    pglm.setText(\"Paper Left Margin = \" + (float)p.getImageableX());\n-    pgiw.setText(\"Paper Imageable Width = \" + (float)p.getImageableWidth());\n-    pgrm.setText(\"Paper Right Margin = \" +\n-         (float)(p.getWidth() - (p.getImageableX()+p.getImageableWidth())));\n-    pgtm.setText(\"Paper Top Margin = \" + (float)p.getImageableY());\n-    pgih.setText(\"Paper Imageable Height = \" + (float)p.getImageableHeight());\n-    pgbm.setText(\"Paper Bottom Margin = \" +\n-       (float)(p.getHeight() - (p.getImageableY()+p.getImageableHeight())));\n-  }\n-\n-  public PageSetupDialog() {\n-    super (\"Page Dialog Test\");\n-    myPrinterJob = PrinterJob.getPrinterJob();\n-    myPageFormat = new PageFormat();\n-    Paper p = new Paper();\n-    double margin = 1.5*72;\n-    p.setImageableArea(margin, margin,\n-                       p.getWidth()-2*margin, p.getHeight()-2*margin);\n-    myPageFormat.setPaper(p);\n-    Panel c = new Panel();\n-    c.setLayout (new GridLayout (9, 2, 0, 0));\n-    c.add (reverseCB = new Checkbox(\"reverse if landscape\"));\n-    c.add (myOrientationLabel = new Label());\n-    c.add (myWidthLabel = new Label());\n-    c.add (pw = new Label());\n-    c.add (myImageableXLabel = new Label());\n-    c.add (pglm = new Label());\n-    c.add (myImageableRightLabel = new Label());\n-    c.add (pgrm = new Label());\n-    c.add (myImageableWidthLabel = new Label());\n-    c.add (pgiw = new Label());\n-    c.add (myHeightLabel = new Label());\n-    c.add (ph = new Label());\n-    c.add (myImageableYLabel = new Label());\n-    c.add (pgtm = new Label());\n-    c.add (myImageableHeightLabel = new Label());\n-    c.add (pgih = new Label());\n-    c.add (myImageableBottomLabel = new Label());\n-    c.add (pgbm = new Label());\n-\n-    reverseCB.addItemListener(new ItemListener() {\n-                public void itemStateChanged(ItemEvent e) {\n-                       reverse = e.getStateChange() == ItemEvent.SELECTED;\n-                       int o = myPageFormat.getOrientation();\n-                       if (o == PageFormat.LANDSCAPE ||\n-                           o == PageFormat.REVERSE_LANDSCAPE) {\n-                           displayPageFormatAttributes();\n-                       }\n-                }\n-    });\n@@ -143,8 +129,37 @@\n-    add(\"Center\", c);\n-    displayPageFormatAttributes();\n-    Panel panel = new Panel();\n-    Button pageButton = new Button (\"Page Setup...\");\n-    pageButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                        myPageFormat = myPrinterJob.pageDialog (myPageFormat);\n-                        displayPageFormatAttributes();\n+    public PageSetupDialog() {\n+        super(\"Page Dialog Test\");\n+        myPrinterJob = PrinterJob.getPrinterJob();\n+        myPageFormat = new PageFormat();\n+        Paper p = new Paper();\n+        double margin = 1.5 * 72;\n+        p.setImageableArea(margin, margin,\n+                p.getWidth() - 2 * margin, p.getHeight() - 2 * margin);\n+        myPageFormat.setPaper(p);\n+        Panel c = new Panel();\n+        c.setLayout(new GridLayout(9, 2, 0, 0));\n+        c.add(reverseCB = new Checkbox(\"reverse if landscape\"));\n+        c.add(myOrientationLabel = new Label());\n+        c.add(myWidthLabel = new Label());\n+        c.add(pw = new Label());\n+        c.add(myImageableXLabel = new Label());\n+        c.add(pglm = new Label());\n+        c.add(myImageableRightLabel = new Label());\n+        c.add(pgrm = new Label());\n+        c.add(myImageableWidthLabel = new Label());\n+        c.add(pgiw = new Label());\n+        c.add(myHeightLabel = new Label());\n+        c.add(ph = new Label());\n+        c.add(myImageableYLabel = new Label());\n+        c.add(pgtm = new Label());\n+        c.add(myImageableHeightLabel = new Label());\n+        c.add(pgih = new Label());\n+        c.add(myImageableBottomLabel = new Label());\n+        c.add(pgbm = new Label());\n+\n+        reverseCB.addItemListener(new ItemListener() {\n+            public void itemStateChanged(ItemEvent e) {\n+                reverse = e.getStateChange() == ItemEvent.SELECTED;\n+                int o = myPageFormat.getOrientation();\n+                if (o == PageFormat.LANDSCAPE ||\n+                        o == PageFormat.REVERSE_LANDSCAPE) {\n+                    displayPageFormatAttributes();\n@@ -152,12 +167,22 @@\n-    });\n-    Button printButton = new Button (\"Print ...\");\n-    printButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                    try {\n-                         if (myPrinterJob.printDialog()) {\n-                             myPrinterJob.setPrintable(PageSetupDialog.this,\n-                                                       myPageFormat);\n-                             alpha = false;\n-                             myPrinterJob.print();\n-                    }\n-                    } catch (PrinterException pe ) {\n+            }\n+        });\n+\n+        add(\"Center\", c);\n+        displayPageFormatAttributes();\n+        Panel panel = new Panel();\n+        Button pageButton = new Button(\"Page Setup...\");\n+        pageButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                myPageFormat = myPrinterJob.pageDialog(myPageFormat);\n+                displayPageFormatAttributes();\n+            }\n+        });\n+        Button printButton = new Button(\"Print ...\");\n+        printButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                try {\n+                    if (myPrinterJob.printDialog()) {\n+                        myPrinterJob.setPrintable(PageSetupDialog.this,\n+                                myPageFormat);\n+                        alpha = false;\n+                        myPrinterJob.print();\n@@ -165,0 +190,2 @@\n+                } catch (PrinterException pe) {\n+                    pe.printStackTrace();\n@@ -166,12 +193,11 @@\n-    });\n-    Button printAlphaButton = new Button (\"Print w\/Alpha...\");\n-    printAlphaButton.addActionListener(new ActionListener() {\n-           public void actionPerformed (ActionEvent e) {\n-                    try {\n-                         if (myPrinterJob.printDialog()) {\n-                             myPrinterJob.setPrintable(PageSetupDialog.this,\n-                                                       myPageFormat);\n-                             alpha = true;\n-                             myPrinterJob.print();\n-                    }\n-                    } catch (PrinterException pe ) {\n+            }\n+        });\n+        Button printAlphaButton = new Button(\"Print w\/Alpha...\");\n+        printAlphaButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                try {\n+                    if (myPrinterJob.printDialog()) {\n+                        myPrinterJob.setPrintable(PageSetupDialog.this,\n+                                myPageFormat);\n+                        alpha = true;\n+                        myPrinterJob.print();\n@@ -179,71 +205,10 @@\n-           }\n-    });\n-    panel.add (pageButton);\n-    panel.add (printButton);\n-    panel.add (printAlphaButton);\n-    add(\"South\", panel);\n-    addWindowListener (new WindowAdapter() {\n-         public void windowClosing (WindowEvent e) {\n-            dispose();\n-            System.exit (0);\n-         }\n-\n-      });\n-      \/\/setSize (280, 550);\n-      pack();\n-      setVisible (true);\n-  }\n-\n-  public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n-\n-     if (pageIndex > 0) {\n-        return Printable.NO_SUCH_PAGE;\n-     }\n-\n-     Graphics2D g2d = (Graphics2D)graphics;\n-     g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n-     g2d.drawString(\"ORIGIN(\"+pageFormat.getImageableX()+\",\"+\n-                             pageFormat.getImageableY()+\")\", 20, 20);\n-     g2d.drawString(\"X THIS WAY\", 200, 50);\n-     g2d.drawString(\"Y THIS WAY\", 60 , 200);\n-     g2d.drawString(\"Graphics is \" + g2d.getClass().getName(), 100, 100);\n-     g2d.drawRect(0,0,(int)pageFormat.getImageableWidth(),\n-                      (int)pageFormat.getImageableHeight());\n-     if (alpha) {\n-       g2d.setColor(new Color(0,0,255,192));\n-     } else {\n-        g2d.setColor(Color.blue);\n-     }\n-     g2d.drawRect(1,1,(int)pageFormat.getImageableWidth()-2,\n-                      (int)pageFormat.getImageableHeight()-2);\n-\n-     return  Printable.PAGE_EXISTS;\n-  }\n-\n-  public static void main( String[] args) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test is very flexible and requires much interaction.\",\n-         \"If the platform print dialog supports it, adjust orientation\",\n-         \"and margins and print pages and compare the results with the\",\n-         \"request.\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-     new PageSetupDialog();\n-  }\n-\n-}\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+                } catch (PrinterException pe) {\n+                    pe.printStackTrace();\n+                }\n+            }\n+        });\n+        panel.add(pageButton);\n+        panel.add(printButton);\n+        panel.add(printAlphaButton);\n+        add(\"South\", panel);\n+        pack();\n@@ -252,7 +217,24 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n+\n+        if (pageIndex > 0) {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n+\n+        Graphics2D g2d = (Graphics2D) graphics;\n+        g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n+        g2d.drawString(\"ORIGIN(\" + pageFormat.getImageableX() + \",\" +\n+                pageFormat.getImageableY() + \")\", 20, 20);\n+        g2d.drawString(\"X THIS WAY\", 200, 50);\n+        g2d.drawString(\"Y THIS WAY\", 60, 200);\n+        g2d.drawString(\"Graphics is \" + g2d.getClass().getName(), 100, 100);\n+        g2d.drawRect(0, 0, (int) pageFormat.getImageableWidth(),\n+                (int) pageFormat.getImageableHeight());\n+        if (alpha) {\n+            g2d.setColor(new Color(0, 0, 255, 192));\n+        } else {\n+            g2d.setColor(Color.blue);\n+        }\n+        g2d.drawRect(1, 1, (int) pageFormat.getImageableWidth() - 2,\n+                (int) pageFormat.getImageableHeight() - 2);\n+\n+        return Printable.PAGE_EXISTS;\n@@ -261,4 +243,16 @@\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .title(\"PageSetupDialog Test Instructions\")\n+                .instructions(instructions)\n+                .testUI(PageSetupDialog::new)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n@@ -266,88 +260,1 @@\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PageFormat\/PageSetupDialog.java","additions":217,"deletions":310,"binary":false,"changes":527,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,12 @@\n-\/**\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterAbortException;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -27,1 +38,0 @@\n- * @summary PrinterJob not cancelled when PrinterJob.cancel() is used\n@@ -29,0 +39,5 @@\n+ * @summary PrinterJob not cancelled when PrinterJob.cancel() is used\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,4 +46,0 @@\n-\n-import java.awt.* ;\n-import java.awt.print.* ;\n-\n@@ -37,54 +48,39 @@\n-  PrinterJob pj ;\n-  boolean okayed;\n-\n-  public static void main ( String args[] ) {\n-\n-     String[] instructions =\n-        {\n-         \"Test that print job cancellation works.\",\n-         \"You must have a printer available to perform this test.\",\n-         \"This test silently starts a print job and while the job is\",\n-         \"still being printed, cancels the print job\",\n-         \"You should see a message on System.out that the job\",\n-         \"was properly cancelled.\",\n-         \"You will need to kill the application manually since regression\",\n-         \"tests apparently aren't supposed to call System.exit()\"\n-       };\n-\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-      PrinterJobCancel pjc = new PrinterJobCancel() ;\n-\n-      if (pjc.okayed) {\n-          pjc.start();\n-          try {\n-               Thread.sleep(5000);\n-               pjc.pj.cancel();\n-          } catch ( InterruptedException e ) {\n-          }\n-      }\n-  }\n-\n-  public PrinterJobCancel() {\n-\n-    pj = PrinterJob.getPrinterJob() ;\n-    pj.setPrintable(this);\n-    okayed = pj.printDialog();\n-  }\n-\n-  public void run() {\n-    boolean cancelWorked = false;\n-    try {\n-        pj.print() ;\n-    }\n-    catch ( PrinterAbortException paex ) {\n-      cancelWorked = true;\n-      System.out.println(\"Job was properly cancelled and we\");\n-      System.out.println(\"got the expected PrintAbortException\");\n-    }\n-    catch ( PrinterException prex ) {\n-      System.out.println(\"This is wrong .. we shouldn't be here\");\n-      System.out.println(\"Looks like a test failure\");\n-      prex.printStackTrace() ;\n-      \/\/throw prex;\n+    PrinterJob pj;\n+    boolean okayed;\n+\n+    private static final String instructions =\n+             \"Test that print job cancellation works.\\n\" +\n+             \"You must have a printer available to perform this test.\\n\" +\n+             \"This test silently starts a print job and while the job is\\n\" +\n+             \"still being printed, cancels the print job\\n\" +\n+             \"You should see a message on System.out that the job\\n\" +\n+             \"was properly cancelled.\\n\" +\n+             \"You will need to kill the application manually since regression\\n\" +\n+             \"tests apparently aren't supposed to call System.exit()\";\n+\n+    public static void main(String args[]) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"Test Instructions\")\n+                .instructions(instructions)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build();\n+\n+        PrinterJobCancel pjc = new PrinterJobCancel();\n+        if (pjc.okayed) {\n+            pjc.start();\n+            try {\n+                Thread.sleep(5000);\n+                pjc.pj.cancel();\n+            } catch (InterruptedException e) {\n+            }\n+        }\n+\n+        passFailJFrame.awaitAndCheck();\n@@ -92,11 +88,0 @@\n-    finally {\n-       System.out.println(\"DONE PRINTING\");\n-       if (!cancelWorked) {\n-           System.out.println(\"Looks like the test failed - we didn't get\");\n-           System.out.println(\"the expected PrintAbortException \");\n-       }\n-    }\n-    \/\/System.exit(0);\n-  }\n-\n-  public int print(Graphics g, PageFormat pagef, int pidx) {\n@@ -104,3 +89,1 @@\n-     if (pidx > 5) {\n-        return( Printable.NO_SUCH_PAGE ) ;\n-     }\n+    public PrinterJobCancel() {\n@@ -108,27 +91,3 @@\n-     Graphics2D g2d = (Graphics2D)g;\n-     g2d.translate(pagef.getImageableX(), pagef.getImageableY());\n-     g2d.setColor(Color.black);\n-\n-     g2d.drawString((\"This is page\"+(pidx+1)), 60 , 80);\n-     \/\/ Need to slow things down a bit .. important not to try this\n-     \/\/ on the event dispathching thread of course.\n-     try {\n-          Thread.sleep(2000);\n-     } catch (InterruptedException e) {\n-     }\n-\n-     return ( Printable.PAGE_EXISTS );\n-  }\n-\n-}\n-\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+        pj = PrinterJob.getPrinterJob();\n+        pj.setPrintable(this);\n+        okayed = pj.printDialog();\n@@ -137,7 +96,20 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    public void run() {\n+        boolean cancelWorked = false;\n+        try {\n+            pj.print();\n+        } catch (PrinterAbortException paex) {\n+            cancelWorked = true;\n+            System.out.println(\"Job was properly cancelled and we\");\n+            System.out.println(\"got the expected PrintAbortException\");\n+        } catch (PrinterException prex) {\n+            System.out.println(\"This is wrong .. we shouldn't be here\");\n+            System.out.println(\"Looks like a test failure\");\n+            prex.printStackTrace();\n+            \/\/throw prex;\n+        } finally {\n+            System.out.println(\"DONE PRINTING\");\n+            if (!cancelWorked) {\n+                System.out.println(\"Looks like the test failed - we didn't get\");\n+                System.out.println(\"the expected PrintAbortException \");\n+            }\n+        }\n@@ -146,0 +118,1 @@\n+    public int print(Graphics g, PageFormat pagef, int pidx) {\n@@ -147,4 +120,3 @@\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n+        if (pidx > 5) {\n+            return (Printable.NO_SUCH_PAGE);\n+        }\n@@ -152,0 +124,3 @@\n+        Graphics2D g2d = (Graphics2D) g;\n+        g2d.translate(pagef.getImageableX(), pagef.getImageableY());\n+        g2d.setColor(Color.black);\n@@ -153,4 +128,7 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n+        g2d.drawString((\"This is page\" + (pidx + 1)), 60, 80);\n+        \/\/ Need to slow things down a bit .. important not to try this\n+        \/\/ on the event dispathching thread of course.\n+        try {\n+            Thread.sleep(2000);\n+        } catch (InterruptedException e) {\n+        }\n@@ -158,78 +136,1 @@\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+        return (Printable.PAGE_EXISTS);\n@@ -237,2 +138,1 @@\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/Cancel\/PrinterJobCancel.java","additions":97,"deletions":197,"binary":false,"changes":294,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,25 @@\n-\/**\n+import javax.print.Doc;\n+import javax.print.DocFlavor;\n+import javax.print.DocPrintJob;\n+import javax.print.PrintService;\n+import javax.print.PrintServiceLookup;\n+import javax.print.attribute.DocAttributeSet;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.standard.Copies;\n+import javax.print.attribute.standard.SheetCollate;\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.io.InputStream;\n+import java.io.Reader;\n+\n+\/*\n@@ -29,0 +53,3 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n@@ -31,8 +58,0 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import javax.print.attribute.standard.*;\n-import javax.print.attribute.*;\n-import javax.print.*;\n-import java.io.*;\n-\n@@ -40,1 +59,1 @@\n-    extends Frame implements Doc, Printable, ActionListener {\n+        extends Frame implements Doc, Printable, ActionListener {\n@@ -42,5 +61,5 @@\n-        Button print2D = new Button(\"2D Print\");\n-        Button printMerlin = new Button(\"PrintService\");\n-        PrinterJob pj = PrinterJob.getPrinterJob();\n-        PrintService defService = null;\n-        HashPrintRequestAttributeSet prSet = new HashPrintRequestAttributeSet();\n+    Button print2D = new Button(\"2D Print\");\n+    Button printMerlin = new Button(\"PrintService\");\n+    PrinterJob pj = PrinterJob.getPrinterJob();\n+    PrintService defService = null;\n+    HashPrintRequestAttributeSet prSet = new HashPrintRequestAttributeSet();\n@@ -55,5 +74,0 @@\n-        addWindowListener (new WindowAdapter() {\n-            public void windowClosing (WindowEvent e) {\n-                dispose();\n-            }\n-        });\n@@ -75,1 +89,0 @@\n-        setVisible(true);\n@@ -78,1 +91,0 @@\n-\n@@ -80,1 +92,1 @@\n-          throws PrinterException {\n+            throws PrinterException {\n@@ -89,1 +101,1 @@\n-    public void actionPerformed (ActionEvent ae) {\n+    public void actionPerformed(ActionEvent ae) {\n@@ -99,1 +111,1 @@\n-            System.out.println (\"DONE\");\n+            System.out.println(\"DONE\");\n@@ -126,24 +138,15 @@\n-  public static void main( String[] args) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"The print result should be collated.\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-     new Collate2DPrintingTest();\n-  }\n-}\n-\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.setVisible(true);\n-      println( \"Any messages for the tester will display here.\" );\n+    private static final String instructions =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"The print result should be collated.\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        PassFailJFrame.builder()\n+                .title(\"Instructions\")\n+                .instructions(instructions)\n+                .testUI(Collate2DPrintingTest::new)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(40)\n+                .build()\n+                .awaitAndCheck();\n@@ -151,103 +154,1 @@\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.setVisible(true);\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      setVisible(true);\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/Collate2DPrintingTest.java","additions":54,"deletions":153,"binary":false,"changes":207,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,17 @@\n-\/**\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.BufferedImageOp;\n+import java.awt.image.RescaleOp;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +45,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,0 +51,1 @@\n+public class DrawImage {\n@@ -32,20 +53,0 @@\n-import java.util.*;\n-import java.text.*;\n-import java.io.*;\n-import java.net.*;\n-import java.awt.*;\n-import java.awt.font.*;\n-import java.awt.geom.*;\n-import java.awt.print.*;\n-import java.awt.event.*;\n-import java.awt.image.*;\n-import java.awt.image.renderable.*;\n-import javax.swing.*;\n-import javax.swing.text.*;\n-import javax.swing.border.*;\n-import javax.swing.event.*;\n-\n-public class DrawImage\n-{\n-    protected static final double _hwBorder = 72 \/ 4;       \/\/ 1\/4 inch\n-    protected static final double _border = 72 \/ 4;         \/\/ 1\/4 inch\n@@ -53,2 +54,0 @@\n-    protected static final int _verticalGap = 20;\n-    protected static final int _textIndent = 150;\n@@ -58,1 +57,1 @@\n-    protected PageFormat  _pageFormat;\n+    protected PageFormat _pageFormat;\n@@ -64,3 +63,1 @@\n-\n- }\n-\n+    }\n@@ -69,1 +66,1 @@\n-        Graphics2D g2D = (Graphics2D)g;\n+        Graphics2D g2D = (Graphics2D) g;\n@@ -72,2 +69,2 @@\n-        int paperW = (int)pf.getImageableWidth(), paperH =\n-            (int)pf.getImageableHeight();\n+        int paperW = (int) pf.getImageableWidth(), paperH =\n+                (int) pf.getImageableHeight();\n@@ -75,1 +72,1 @@\n-        int x = (int)pf.getImageableX(), y = (int)pf.getImageableY();\n+        int x = (int) pf.getImageableX(), y = (int) pf.getImageableY();\n@@ -79,1 +76,1 @@\n-        if (image != null ) {\n+        if (image != null) {\n@@ -82,4 +79,3 @@\n-            float scaleFactor = ((float)((paperW - 25) - _objectBorder -\n-                                         _objectBorder) \/ (float)(imageW));\n-            int scaledW = (int)(imageW * scaleFactor),\n-                scaledH = (int)(imageH *scaleFactor);\n+            float scaleFactor = ((float) ((paperW - 25) - _objectBorder -\n+                    _objectBorder) \/ (float) (imageW));\n+\n@@ -88,1 +84,0 @@\n-            y += _objectBorder + scaledH + _objectBorder;\n@@ -90,2 +85,1 @@\n-        }\n-        else {\n+        } else {\n@@ -110,2 +104,3 @@\n-                try { pj.print(); }\n-                catch (PrinterException e) {\n+                try {\n+                    pj.print();\n+                } catch (PrinterException e) {\n@@ -116,2 +111,1 @@\n-        }\n-        catch (Exception e) {\n+        } catch (Exception e) {\n@@ -122,7 +116,12 @@\n-    public static void main(String[] args) {\n-                                String[] instructions =\n-           {\n-            \"You must have a printer available to perform this test.\",\n-            \"The test passes if you get a printout of a gray rectangle\",\n-                                                \"with white text without any exception.\"\n-          };\n+    private static final String instructions =\n+            \"You must have a printer available to perform this test.\\n\" +\n+            \"\\n\" +\n+            \"The test passes if you get a printout of a gray rectangle\\n\" +\n+            \"with white text without any exception.\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n@@ -130,2 +129,7 @@\n-         Sysout.createDialog( );\n-         Sysout.printInstructions( instructions );\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"Instructions\")\n+                .instructions(instructions)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build();\n@@ -136,1 +140,1 @@\n-        \/\/      System.exit(0);\n+        passFailJFrame.awaitAndCheck();\n@@ -139,2 +143,0 @@\n-\n-\n@@ -144,1 +146,1 @@\n-                                                 BufferedImage.TYPE_BYTE_GRAY);\n+                BufferedImage.TYPE_BYTE_GRAY);\n@@ -146,1 +148,1 @@\n-        Graphics2D g2D = (Graphics2D)result.getGraphics();\n+        Graphics2D g2D = (Graphics2D) result.getGraphics();\n@@ -148,1 +150,1 @@\n-                             RenderingHints.VALUE_ANTIALIAS_OFF);\n+                RenderingHints.VALUE_ANTIALIAS_OFF);\n@@ -158,1 +160,1 @@\n-5, h \/ 5);\n+                5, h \/ 5);\n@@ -161,1 +163,0 @@\n-\n@@ -166,2 +167,0 @@\n-\n-\n@@ -169,114 +168,0 @@\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/DrawImage.java","additions":62,"deletions":177,"binary":false,"changes":239,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,15 @@\n-\/**\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.font.FontRenderContext;\n+import java.awt.print.Book;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterJob;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -30,0 +44,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -32,0 +50,1 @@\n+public class DrawStringMethods implements Printable {\n@@ -33,4 +52,4 @@\n-import java.awt.*;\n-import java.text.*;\n-import java.awt.font.*;\n-import java.awt.print.*;\n+    private static final String instructions =\n+            \" Confirm that the methods are printed.\\n\" +\n+            \" For Graphics: drawString, drawString, drawChars, drawBytes\\n\" +\n+            \" For Graphics2D: drawString, drawString, drawGlyphVector\";\n@@ -38,1 +57,1 @@\n-public class DrawStringMethods implements Printable {\n+    public static void main(String args[]) throws Exception {\n@@ -40,8 +59,4 @@\n-    public static void main(String args[]) {\n-        String[] instructions =\n-        {\n-            \"Confirm that the methods are printed.\",\n-            \" For Graphics: drawString, drawString, drawChars, drawBytes\",\n-            \" For Graphics2D: drawString, drawString, drawGlyphVector\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n@@ -49,0 +64,7 @@\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"CustomPaper Test Instructions\")\n+                .instructions(instructions)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build();\n@@ -56,0 +78,1 @@\n+        pjob.print();\n@@ -57,5 +80,1 @@\n-        try {\n-            pjob.print();\n-        } catch (PrinterException e) {\n-            throw new RuntimeException(e.getMessage());\n-        }\n+        passFailJFrame.awaitAndCheck();\n@@ -119,1 +138,1 @@\n-                           \"float x, float y)\";\n+                    \"float x, float y)\";\n@@ -136,116 +155,0 @@\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"South\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-     \/\/chop up each into pieces maxSringLength long\n-     remainingStr = instructions[ i ];\n-     while( remainingStr.length() > 0 )\n-      {\n-        \/\/if longer than max then chop off first max chars to print\n-        if( remainingStr.length() >= maxStringLength )\n-         {\n-           \/\/Try to chop on a word boundary\n-           int posOfSpace = remainingStr.\n-          lastIndexOf( ' ', maxStringLength - 1 );\n-\n-           if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-           printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-           remainingStr = remainingStr.substring( posOfSpace + 1 );\n-         }\n-        \/\/else just print\n-        else\n-         {\n-           printStr = remainingStr;\n-           remainingStr = \"\";\n-         }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-      }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/DrawStringMethods.java","additions":40,"deletions":137,"binary":false,"changes":177,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,18 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Paper;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +46,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,5 +52,0 @@\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-\n@@ -38,21 +54,19 @@\n-  PrinterJob pJob;\n-  PageFormat pf;\n-\n-  public InvalidPage() {\n-    super (\"Validate Page Test\");\n-    pJob = PrinterJob.getPrinterJob();\n-    pf = pJob.defaultPage();\n-    Paper p = pf.getPaper();\n-    p.setImageableArea(0,0,p.getWidth(), p.getHeight());\n-    pf.setPaper(p);\n-    setLayout(new FlowLayout());\n-    Panel panel = new Panel();\n-    Button printButton = new Button (\"Print\");\n-    printButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                    try {\n-                         if (pJob.printDialog()) {\n-                             pJob.setPrintable(InvalidPage.this, pf);\n-                             pJob.print();\n-                    }\n-                    } catch (PrinterException pe ) {\n+    PrinterJob pJob;\n+    PageFormat pf;\n+\n+    public InvalidPage() {\n+        super(\"Validate Page Test\");\n+        pJob = PrinterJob.getPrinterJob();\n+        pf = pJob.defaultPage();\n+        Paper p = pf.getPaper();\n+        p.setImageableArea(0, 0, p.getWidth(), p.getHeight());\n+        pf.setPaper(p);\n+        setLayout(new FlowLayout());\n+        Panel panel = new Panel();\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                try {\n+                    if (pJob.printDialog()) {\n+                        pJob.setPrintable(InvalidPage.this, pf);\n+                        pJob.print();\n@@ -60,0 +74,1 @@\n+                } catch (PrinterException pe) {\n@@ -61,79 +76,5 @@\n-    });\n-    panel.add (printButton);\n-    add(panel);\n-\n-    addWindowListener (new WindowAdapter() {\n-         public void windowClosing (WindowEvent e) {\n-            dispose();\n-            System.exit (0);\n-         }\n-\n-      });\n-      setSize (200, 200);\n-      setVisible (true);\n-  }\n-\n-  public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n-\n-     if (pageIndex > 1) {\n-        return Printable.NO_SUCH_PAGE;\n-     }\n-\n-     Graphics2D g2d = (Graphics2D)graphics;\n-\n-     g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n-     g2d.drawString(\"ORIGIN\", 30, 30);\n-     g2d.drawString(\"X THIS WAY\", 200, 50);\n-     g2d.drawString(\"Y THIS WAY\", 60 , 200);\n-     g2d.drawRect(0,0,(int)pageFormat.getImageableWidth(),\n-                      (int)pageFormat.getImageableHeight());\n-     if (pageIndex == 0) {\n-        g2d.setColor(Color.black);\n-     } else {\n-        g2d.setColor(new Color(0,0,0,128));\n-     }\n-     g2d.drawRect(1,1,(int)pageFormat.getImageableWidth()-2,\n-                      (int)pageFormat.getImageableHeight()-2);\n-\n-     g2d.drawLine(0,0,\n-                  (int)pageFormat.getImageableWidth(),\n-                  (int)pageFormat.getImageableHeight());\n-     g2d.drawLine((int)pageFormat.getImageableWidth(),0,\n-                   0,(int)pageFormat.getImageableHeight());\n-     return  Printable.PAGE_EXISTS;\n-  }\n-\n-  public static void main( String[] args) {\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"Press the print button, which brings up a print dialog and\",\n-         \"in the dialog select a printer and press the print button\",\n-         \"in the dialog. Repeat for as many printers as you have installed\",\n-         \"On solaris and linux just one printer is sufficient\",\n-         \"Collect the output and examine it, each print job has two pages\",\n-         \"of very similar output, except that the 2nd page of the job may\",\n-         \"appear in a different colour, and the output near the edge of\",\n-         \"the page may be clipped. This is OK. Hold up both pieces of paper\",\n-         \"to the light and confirm that the lines and text (where present)\",\n-         \"are positioned identically on both pages\",\n-         \"The test fails if the JRE crashes, or if the output from the two\",\n-         \"pages of a job is aligned differently\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-     new InvalidPage();\n-  }\n-\n-}\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+            }\n+        });\n+        panel.add(printButton);\n+        add(panel);\n+        pack();\n@@ -142,7 +83,28 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n+\n+        if (pageIndex > 1) {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n+\n+        Graphics2D g2d = (Graphics2D) graphics;\n+\n+        g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n+        g2d.drawString(\"ORIGIN\", 30, 30);\n+        g2d.drawString(\"X THIS WAY\", 200, 50);\n+        g2d.drawString(\"Y THIS WAY\", 60, 200);\n+        g2d.drawRect(0, 0, (int) pageFormat.getImageableWidth(),\n+                (int) pageFormat.getImageableHeight());\n+        if (pageIndex == 0) {\n+            g2d.setColor(Color.black);\n+        } else {\n+            g2d.setColor(new Color(0, 0, 0, 128));\n+        }\n+        g2d.drawRect(1, 1, (int) pageFormat.getImageableWidth() - 2,\n+                (int) pageFormat.getImageableHeight() - 2);\n+\n+        g2d.drawLine(0, 0,\n+                (int) pageFormat.getImageableWidth(),\n+                (int) pageFormat.getImageableHeight());\n+        g2d.drawLine((int) pageFormat.getImageableWidth(), 0,\n+                0, (int) pageFormat.getImageableHeight());\n+        return Printable.PAGE_EXISTS;\n@@ -151,4 +113,31 @@\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n+    private static final String instructions =\n+            \" You must have a printer available to perform this test\\n\" +\n+            \" Press the print button, which brings up a print dialog and\\n\" +\n+            \" in the dialog select a printer and press the print button\\n\" +\n+            \" in the dialog. Repeat for as many printers as you have installed\\n\" +\n+            \" On solaris and linux just one printer is sufficient\\n\" +\n+            \" Collect the output and examine it, each print job has two pages\\n\" +\n+            \" of very similar output, except that the 2nd page of the job may\\n\" +\n+            \" appear in a different colour, and the output near the edge of\\n\" +\n+            \" the page may be clipped. This is OK. Hold up both pieces of paper\\n\" +\n+            \" to the light and confirm that the lines and text (where present)\\n\" +\n+            \" are positioned identically on both pages\\n\" +\n+            \" The test fails if the JRE crashes, or if the output from the two\\n\" +\n+            \" pages of a job is aligned differently\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .title(\"CustomPaper Test Instructions\")\n+                .instructions(instructions)\n+                .testUI(InvalidPage::new)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n@@ -156,88 +145,1 @@\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/InvalidPage.java","additions":108,"deletions":206,"binary":false,"changes":314,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,7 @@\n-\/**\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterJob;\n+\n+\/*\n@@ -29,0 +35,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,4 +41,0 @@\n-\n-import java.awt.*;\n-import java.awt.print.*;\n-\n@@ -37,0 +43,1 @@\n+    static String theName = \"Testing the Jobname setting\";\n@@ -38,3 +45,3 @@\n-  static String theName = \"Testing the Jobname setting\";\n-\n-  public static void main(String[] args) {\n+    private static final String instructions =\n+            \"You must have a printer available to perform this test\\n\" +\n+                    \"This test prints a page with a banner\/job name of\\n\" + theName;\n@@ -42,6 +49,1 @@\n-       String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test prints a page with a banner\/job name of\",\n-          theName\n-       };\n+    public static void main(String[] args) throws Exception {\n@@ -49,2 +51,4 @@\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n@@ -52,11 +56,7 @@\n-      PrinterJob job = PrinterJob.getPrinterJob();\n-      job.setJobName(theName);\n-      job.setPrintable(new PrinterJobName());\n-      try {\n-          job.print();\n-          System.out.println(\"PRINTING DONE.\");\n-      }\n-      catch (Exception exc) {\n-          System.out.println(\"Printer Exception\");\n-      }\n-  }\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"Test Instructions\")\n+                .instructions(instructions)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build();\n@@ -64,0 +64,6 @@\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setJobName(theName);\n+        job.setPrintable(new PrinterJobName());\n+        job.print();\n+        passFailJFrame.awaitAndCheck();\n+    }\n@@ -66,10 +72,8 @@\n-      if (pgIndex > 0 ) {\n-          return Printable.NO_SUCH_PAGE;\n-      }\n-\n-      double iw = pgFmt.getImageableWidth();\n-      double ih = pgFmt.getImageableHeight();\n-      Graphics2D g2d = (Graphics2D)g;\n-      g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n-      g2d.drawString(\"Name is: \"+theName,20,20 );\n-      return Printable.PAGE_EXISTS;\n+        if (pgIndex > 0) {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n+\n+        Graphics2D g2d = (Graphics2D) g;\n+        g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n+        g2d.drawString(\"Name is: \" + theName, 20, 20);\n+        return Printable.PAGE_EXISTS;\n@@ -77,1 +81,0 @@\n-\n@@ -79,115 +82,0 @@\n-\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/JobName\/PrinterJobName.java","additions":42,"deletions":154,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,10 @@\n-\/**\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +38,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,4 +44,0 @@\n-\n-import java.awt.*;\n-import java.awt.print.*;\n-\n@@ -37,18 +46,25 @@\n-\n-  public static void main(String[] args) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test should print a total of four pages which are two\",\n-         \" copies of each of two pages which consist of the text :-\",\n-         \"'This is page number N', where N is 0 and 1.\",\n-         \"The pages should be uncollated.\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-    PrinterJob job = PrinterJob.getPrinterJob();\n-    job.setCopies(2);\n-    job.setPrintable(new NumCopies());\n-    try {\n+    private static final String instructions =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test should print a total of four pages which are two\\n\" +\n+            \" copies of each of two pages which consist of the text :-\\n\" +\n+            \"'This is page number N', where N is 0 and 1.\\n\" +\n+            \"The pages should be uncollated.\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"CustomPaper Test Instructions\")\n+                .instructions(instructions)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build();\n+\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setCopies(2);\n+        job.setPrintable(new NumCopies());\n@@ -56,0 +72,1 @@\n+        passFailJFrame.awaitAndCheck();\n@@ -57,4 +74,0 @@\n-    catch (Exception exc) {\n-        System.out.println(\"Printer Exception\");\n-    }\n-  }\n@@ -62,2 +75,2 @@\n-  public int print(Graphics g, PageFormat pf, int pageIndex)\n-                   throws PrinterException {\n+    public int print(Graphics g, PageFormat pf, int pageIndex)\n+            throws PrinterException {\n@@ -65,2 +78,7 @@\n-    if (pageIndex > 1) {\n-         return NO_SUCH_PAGE;\n+        if (pageIndex > 1) {\n+            return NO_SUCH_PAGE;\n+        }\n+        g.translate((int) pf.getImageableX(), (int) pf.getImageableY());\n+        g.setColor(Color.black);\n+        g.drawString(\"This is page number \" + Integer.toString(pageIndex), 50, 50);\n+        return PAGE_EXISTS;\n@@ -68,6 +86,0 @@\n-    g.translate((int)pf.getImageableX(), (int)pf.getImageableY());\n-    g.setColor(Color.black);\n-    g.drawString(\"This is page number \" + Integer.toString(pageIndex), 50, 50);\n-    return PAGE_EXISTS ;\n-   }\n-\n@@ -75,115 +87,0 @@\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/NumCopies.java","additions":50,"deletions":153,"binary":false,"changes":203,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,8 +24,3 @@\n-\/**\n- * @test\n- * @bug 4956397\n- * @key printer\n- * @run main\/manual PageDlgPrnButton\n- *\/\n-\n-import java.awt.print.PrinterJob;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n@@ -35,0 +30,1 @@\n+import java.awt.print.PrinterJob;\n@@ -36,4 +32,1 @@\n-import java.awt.Graphics;\n-import java.awt.Graphics2D;\n-import java.awt.Rectangle;\n-import java.awt.* ;\n+import jtreg.SkippedException;\n@@ -41,0 +34,10 @@\n+\/*\n+ * @test\n+ * @bug 4956397\n+ * @key printer\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n+ * @run main\/manual PageDlgPrnButton\n+ *\/\n@@ -43,9 +46,0 @@\n-    public static void main ( String args[] ) {\n-\n-        String[] instructions =\n-           {\"For non-windows OS, this test PASSes.\",\n-            \"You must have at least 2 printers available to perform this test.\",\n-            \"This test brings up a native Windows page dialog.\",\n-            \"Click on the Printer... button and change the selected printer. \",\n-            \"Test passes if the printout comes from the new selected printer.\",\n-         };\n@@ -53,4 +47,19 @@\n-         Sysout.createDialog( );\n-         Sysout.printInstructions( instructions );\n-\n-        PageDlgPrnButton pdpb = new PageDlgPrnButton() ;\n+    private static final String instructions =\n+            \"For non-windows OS, this test PASSes.\\n\" +\n+            \"You must have at least 2 printers available to perform this test.\\n\" +\n+            \"This test brings up a native Windows page dialog.\\n\" +\n+            \"Click on the Printer... button and change the selected printer. \\n\" +\n+            \"Test passes if the printout comes from the new selected printer.\";\n+\n+    public static void main (String[] args) throws Exception {\n+\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"CustomPaper Test Instructions\")\n+                .instructions(instructions)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build();\n+\n+        new PageDlgPrnButton() ;\n+        passFailJFrame.awaitAndCheck();\n@@ -59,8 +68,2 @@\n-    public PageDlgPrnButton()\n-    {\n-        try\n-        {\n-            pageDialogExample();\n-        }\n-        catch(Exception e)\n-        {e.printStackTrace(System.err);}\n+    public PageDlgPrnButton() throws PrinterException {\n+        pageDialogExample();\n@@ -69,1 +72,0 @@\n-\n@@ -84,2 +86,0 @@\n-\n-\n@@ -116,114 +116,0 @@\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PageDlgPrnButton.java","additions":37,"deletions":151,"binary":false,"changes":188,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,11 @@\n-\/**\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -26,1 +36,1 @@\n- * test\n+ * @test\n@@ -29,0 +39,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -32,5 +46,0 @@\n-\n-import java.awt.*;\n-import java.awt.print.*;\n-import java.awt.GraphicsEnvironment;\n-\n@@ -43,1 +52,0 @@\n-    boolean done = false;\n@@ -46,0 +54,5 @@\n+    private static final String instructions =\n+             \"You must have a printer available to perform this test.\\n\" +\n+             \"\\n\" +\n+             \"This bug is system dependent and is not always reproducible.\\n\" +\n+             \"A passing test will have all text printed with correct font style.\";\n@@ -49,7 +62,4 @@\n-        String[] instructions =\n-        {\n-            \"You must have a printer available to perform this test and should use Win 98.\",\n-            \"This bug is system dependent and is not always reproducible.\",\n-            \" \",\n-            \"A passing test will have all text printed with correct font style.\",\n-        };\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n@@ -57,2 +67,7 @@\n-        Sysout.createDialog( );\n-        Sysout.printInstructions( instructions );\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"PrintAllFonts Test Instructions\")\n+                .instructions(instructions)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build();\n@@ -61,1 +76,1 @@\n-            GraphicsEnvironment.getLocalGraphicsEnvironment();\n+                GraphicsEnvironment.getLocalGraphicsEnvironment();\n@@ -67,1 +82,1 @@\n-           pj.print();\n+            pj.print();\n@@ -69,0 +84,1 @@\n+        passFailJFrame.awaitAndCheck();\n@@ -102,114 +118,0 @@\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintAllFonts.java","additions":36,"deletions":134,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,16 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +44,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,7 +50,0 @@\n-\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import java.text.*;\n-\n@@ -40,66 +52,28 @@\n- private TextCanvas c;\n-\n- public static void main(String args[]) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test should print a page which contains the same\",\n-         \"text message as in the test window on the screen\",\n-         \"You should also monitor the command line to see if any exceptions\",\n-         \"were thrown\",\n-         \"If an exception is thrown, or the page doesn't print properly\",\n-         \"then the test fails\",\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-    PrintCompoundString f = new PrintCompoundString();\n-    f.show();\n- }\n-\n- public PrintCompoundString() {\n-    super(\"JDK 1.2 drawString Printing\");\n-\n-    c = new TextCanvas();\n-    add(\"Center\", c);\n-\n-    Button printButton = new Button(\"Print\");\n-    printButton.addActionListener(this);\n-    add(\"South\", printButton);\n-\n-    addWindowListener(new WindowAdapter() {\n-       public void windowClosing(WindowEvent e) {\n-             System.exit(0);\n-            }\n-    });\n-\n-    pack();\n- }\n-\n- public void actionPerformed(ActionEvent e) {\n-\n-   PrinterJob pj = PrinterJob.getPrinterJob();\n-\n-   if (pj != null && pj.printDialog()) {\n-\n-       pj.setPrintable(c);\n-       try {\n-            pj.print();\n-      } catch (PrinterException pe) {\n-      } finally {\n-         System.err.println(\"PRINT RETURNED\");\n-      }\n-   }\n- }\n-\n- class TextCanvas extends Panel implements Printable {\n-\n-    String nullStr = null;\n-    String emptyStr = new String();\n-    AttributedString nullAttStr = null;\n-    AttributedString emptyAttStr = new AttributedString(emptyStr);\n-    AttributedCharacterIterator nullIterator = null;\n-    AttributedCharacterIterator emptyIterator = emptyAttStr.getIterator();\n-\n-    public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n+    private final TextCanvas c;\n+\n+    private static final String instructions =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test should print a page which contains the same\\n\" +\n+            \"text message as in the test window on the screen\\n\" +\n+            \"You should also monitor the command line to see if any exceptions\\n\" +\n+            \"were thrown\\n\" +\n+            \"If an exception is thrown, or the page doesn't print properly\\n\" +\n+            \"then the test fails\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(instructions)\n+                .testUI(PrintCompoundString::new)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -107,2 +81,2 @@\n-      if (pgIndex > 0)\n-         return Printable.NO_SUCH_PAGE;\n+    public PrintCompoundString() {\n+        super(\"JDK 1.2 drawString Printing\");\n@@ -110,2 +84,2 @@\n-      Graphics2D g2d = (Graphics2D)g;\n-      g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n+        c = new TextCanvas();\n+        add(\"Center\", c);\n@@ -113,1 +87,3 @@\n-      paint(g);\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(this);\n+        add(\"South\", printButton);\n@@ -115,1 +91,1 @@\n-      return Printable.PAGE_EXISTS;\n+        pack();\n@@ -118,2 +94,1 @@\n-    public void paint(Graphics g1) {\n-        Graphics2D g = (Graphics2D)g1;\n+    public void actionPerformed(ActionEvent e) {\n@@ -121,2 +96,1 @@\n-          String str = \"Test string compound printing \\u2203\\u2200\\u2211\";\n-          g.drawString(str, 20, 40);\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n@@ -124,1 +98,1 @@\n-    }\n+        if (pj != null && pj.printDialog()) {\n@@ -126,2 +100,8 @@\n-     public Dimension getPreferredSize() {\n-        return new Dimension(450, 250);\n+            pj.setPrintable(c);\n+            try {\n+                pj.print();\n+            } catch (PrinterException pe) {\n+            } finally {\n+                System.err.println(\"PRINT RETURNED\");\n+            }\n+        }\n@@ -129,1 +109,0 @@\n- }\n@@ -131,1 +110,1 @@\n-}\n+    class TextCanvas extends Panel implements Printable {\n@@ -133,3 +112,1 @@\n-class Sysout\n- {\n-   private static TestDialog dialog;\n+        public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n@@ -137,7 +114,2 @@\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+            if (pgIndex > 0)\n+                return Printable.NO_SUCH_PAGE;\n@@ -145,8 +117,2 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n@@ -154,0 +120,1 @@\n+            paint(g);\n@@ -155,4 +122,2 @@\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n+            return Printable.PAGE_EXISTS;\n+        }\n@@ -160,0 +125,2 @@\n+        public void paint(Graphics g1) {\n+            Graphics2D g = (Graphics2D) g1;\n@@ -161,4 +128,3 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n+            String str = \"Test string compound printing \\u2203\\u2200\\u2211\";\n+            g.drawString(str, 20, 40);\n+        }\n@@ -166,78 +132,3 @@\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+        public Dimension getPreferredSize() {\n+            return new Dimension(450, 250);\n+        }\n@@ -245,2 +136,1 @@\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintCompoundString.java","additions":86,"deletions":196,"binary":false,"changes":282,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,19 @@\n-\/**\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +47,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,4 +53,0 @@\n-import java.awt.*;\n-import java.awt.print.*;\n-import java.awt.event.*;\n-\n@@ -37,1 +55,1 @@\n-        private PrintImageCanvas                printImageCanvas;\n+    private PrintImageCanvas printImageCanvas;\n@@ -39,3 +57,3 @@\n-        private MenuItem        print1Menu = new MenuItem(\"PrintTest1\");\n-        private MenuItem        print2Menu = new MenuItem(\"PrintTest2\");\n-        private MenuItem        exitMenu = new MenuItem(\"Exit\");\n+    private final MenuItem print1Menu = new MenuItem(\"PrintTest1\");\n+    private final MenuItem print2Menu = new MenuItem(\"PrintTest2\");\n+    private final MenuItem exitMenu = new MenuItem(\"Exit\");\n@@ -43,8 +61,7 @@\n-        public static void main(String[] argv) {\n-        String[] instructions =\n-           { \"You must have a printer available to perform this test,\",\n-             \"prefererably Canon LaserShot A309GII.\",\n-             \"Printing must be done in Win 98 Japanese 2nd Edition.\",\n-             \"\",\n-             \"Passing test : Output of text image for PrintTest1 and PrintTest2 should be same as that on the screen.\",\n-           };\n+    private static final String instructions =\n+            \"You must have a printer available to perform this test,\\n\" +\n+            \"prefererably Canon LaserShot A309GII.\\n\" +\n+            \"Printing must be done in Win 98 Japanese 2nd Edition.\\n\" +\n+            \"\\n\" +\n+            \"Passing test : Output of text image for PrintTest1 and PrintTest2 should be \" +\n+            \"same as that on the screen.\";\n@@ -52,2 +69,1 @@\n-        Sysout.createDialog( );\n-         Sysout.printInstructions( instructions );\n+    public static void main(String[] argv) throws Exception {\n@@ -55,1 +71,3 @@\n-                new PrintImage();\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n@@ -58,4 +76,10 @@\n-        public PrintImage() {\n-                super(\"PrintImage\");\n-                initPrintImage();\n-        }\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(instructions)\n+                .testUI(PrintImage::new)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -63,1 +87,4 @@\n-        public void initPrintImage() {\n+    public PrintImage() {\n+        super(\"PrintImage\");\n+        initPrintImage();\n+    }\n@@ -65,1 +92,1 @@\n-                printImageCanvas = new PrintImageCanvas(this);\n+    public void initPrintImage() {\n@@ -67,1 +94,1 @@\n-                initMenu();\n+        printImageCanvas = new PrintImageCanvas(this);\n@@ -69,8 +96,1 @@\n-                addWindowListener(new WindowAdapter() {\n-                        public void windowClosing(WindowEvent ev) {\n-                                dispose();\n-                        }\n-                        public void windowClosed(WindowEvent ev) {\n-                                System.exit(0);\n-                        }\n-                });\n+        initMenu();\n@@ -78,3 +98,3 @@\n-                setLayout(new BorderLayout());\n-                add(printImageCanvas, BorderLayout.CENTER);\n-                pack();\n+        setLayout(new BorderLayout());\n+        add(printImageCanvas, BorderLayout.CENTER);\n+        pack();\n@@ -82,3 +102,2 @@\n-                setSize(500,500);\n-                setVisible(true);\n-        }\n+        setSize(500, 500);\n+    }\n@@ -86,14 +105,14 @@\n-        private void initMenu() {\n-                MenuBar         mb = new MenuBar();\n-                Menu            me = new Menu(\"File\");\n-                me.add(print1Menu);\n-                me.add(print2Menu);\n-                me.add(\"-\");\n-                me.add(exitMenu);\n-                mb.add(me);\n-                this.setMenuBar(mb);\n-\n-                print1Menu.addActionListener(this);\n-                print2Menu.addActionListener(this);\n-                exitMenu.addActionListener(this);\n-        }\n+    private void initMenu() {\n+        MenuBar mb = new MenuBar();\n+        Menu me = new Menu(\"File\");\n+        me.add(print1Menu);\n+        me.add(print2Menu);\n+        me.add(\"-\");\n+        me.add(exitMenu);\n+        mb.add(me);\n+        this.setMenuBar(mb);\n+\n+        print1Menu.addActionListener(this);\n+        print2Menu.addActionListener(this);\n+        exitMenu.addActionListener(this);\n+    }\n@@ -101,11 +120,8 @@\n-        public void actionPerformed(ActionEvent e) {\n-                Object target = e.getSource();\n-                if( target.equals(print1Menu) ) {\n-                        printMain1();\n-                }\n-                else if( target.equals(print2Menu) ) {\n-                        printMain2();\n-                }\n-                else if( target.equals(exitMenu) ) {\n-                        dispose();\n-                }\n+    public void actionPerformed(ActionEvent e) {\n+        Object target = e.getSource();\n+        if (target.equals(print1Menu)) {\n+            printMain1();\n+        } else if (target.equals(print2Menu)) {\n+            printMain2();\n+        } else if (target.equals(exitMenu)) {\n+            dispose();\n@@ -113,0 +129,1 @@\n+    }\n@@ -114,1 +131,1 @@\n-        private void printMain1(){\n+    private void printMain1() {\n@@ -116,2 +133,2 @@\n-                PrinterJob printerJob = PrinterJob.getPrinterJob();\n-                PageFormat pageFormat = printerJob.defaultPage();\n+        PrinterJob printerJob = PrinterJob.getPrinterJob();\n+        PageFormat pageFormat = printerJob.defaultPage();\n@@ -119,1 +136,1 @@\n-                printerJob.setPrintable((Printable)printImageCanvas, pageFormat);\n+        printerJob.setPrintable(printImageCanvas, pageFormat);\n@@ -121,10 +138,9 @@\n-                if(printerJob.printDialog()){\n-                        try {\n-                                printerJob.print();\n-                        }\n-                        catch(PrinterException p){\n-                        }\n-                }\n-                else\n-                        printerJob.cancel();\n-        }\n+        if (printerJob.printDialog()) {\n+            try {\n+                printerJob.print();\n+            } catch (PrinterException e) {\n+                e.printStackTrace();\n+            }\n+        } else\n+            printerJob.cancel();\n+    }\n@@ -132,1 +148,1 @@\n-        private void printMain2(){\n+    private void printMain2() {\n@@ -134,2 +150,2 @@\n-                PrinterJob printerJob = PrinterJob.getPrinterJob();\n-                PageFormat pageFormat = printerJob.pageDialog(printerJob.defaultPage());\n+        PrinterJob printerJob = PrinterJob.getPrinterJob();\n+        PageFormat pageFormat = printerJob.pageDialog(printerJob.defaultPage());\n@@ -137,12 +153,1 @@\n-                printerJob.setPrintable((Printable)printImageCanvas, pageFormat);\n-\n-                if(printerJob.printDialog()){\n-                        try {\n-                                printerJob.print();\n-                        }\n-                        catch(PrinterException p){\n-                        }\n-                }\n-                else\n-                        printerJob.cancel();\n-        }\n+        printerJob.setPrintable( printImageCanvas, pageFormat);\n@@ -150,0 +155,9 @@\n+        if (printerJob.printDialog()) {\n+            try {\n+                printerJob.print();\n+            } catch (PrinterException e) {\n+                e.printStackTrace();\n+            }\n+        } else\n+            printerJob.cancel();\n+    }\n@@ -154,48 +168,1 @@\n-        private PrintImage pdsFrame;\n-\n-        public PrintImageCanvas(PrintImage pds) {\n-                pdsFrame = pds;\n-        }\n-\n-        public void paint(Graphics g) {\n-                Font drawFont = new Font(\"MS Mincho\",Font.ITALIC,50);\n-                g.setFont(drawFont);\n-                g.drawString(\"PrintSample!\",100,150);\n-        }\n-\n-        public int print(Graphics g, PageFormat pf, int pi)\n-                throws PrinterException {\n-\n-                if(pi>=1)\n-                        return NO_SUCH_PAGE;\n-                else{\n-                        Graphics2D g2 = (Graphics2D)g;\n-                        g.setColor(new Color(0,0,0,200));\n-\n-                        Font drawFont = new Font(\"MS Mincho\",Font.ITALIC,50);\n-                        g.setFont(drawFont);\n-                        g.drawString(\"PrintSample!\",100,150);\n-                        return PAGE_EXISTS;\n-                }\n-        }\n-}\n-\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    public PrintImageCanvas(PrintImage pds) {\n@@ -204,4 +171,4 @@\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n+    public void paint(Graphics g) {\n+        Font drawFont = new Font(\"MS Mincho\", Font.ITALIC, 50);\n+        g.setFont(drawFont);\n+        g.drawString(\"PrintSample!\", 100, 150);\n@@ -210,0 +177,2 @@\n+    public int print(Graphics g, PageFormat pf, int pi)\n+            throws PrinterException {\n@@ -211,4 +180,4 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n+        if (pi >= 1)\n+            return NO_SUCH_PAGE;\n+        else {\n+            g.setColor(new Color(0, 0, 0, 200));\n@@ -216,78 +185,5 @@\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+            Font drawFont = new Font(\"MS Mincho\", Font.ITALIC, 50);\n+            g.setFont(drawFont);\n+            g.drawString(\"PrintSample!\", 100, 150);\n+            return PAGE_EXISTS;\n+        }\n@@ -295,2 +191,1 @@\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintImage.java","additions":127,"deletions":232,"binary":false,"changes":359,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,18 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +46,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,7 +52,0 @@\n-\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import java.text.*;\n-\n@@ -40,25 +54,30 @@\n- private TextCanvas c;\n-\n- public static void main(String args[]) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test should print a page which contains the same\",\n-         \"text messages as in the test window on the screen\",\n-         \"The messages should contain only 'OK' and 'expected' messages\",\n-         \"There should be no FAILURE messages.\",\n-         \"You should also monitor the command line to see if any exceptions\",\n-         \"were thrown\",\n-         \"If the page fails to print, but there were no exceptions\",\n-         \"then the problem is likely elsewhere (ie your printer)\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-    PrintNullString f = new PrintNullString();\n-    f.show();\n- }\n-\n- public PrintNullString() {\n-    super(\"JDK 1.2 drawString Printing\");\n+    private final TextCanvas c;\n+\n+    private static final String instructions =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test should print a page which contains the same\\n\" +\n+            \"text messages as in the test window on the screen\\n\" +\n+            \"The messages should contain only 'OK' and 'expected' messages\\n\" +\n+            \"There should be no FAILURE messages.\\n\" +\n+            \"You should also monitor the command line to see if any exceptions\\n\" +\n+            \"were thrown\\n\" +\n+            \"If the page fails to print, but there were no exceptions\\n\" +\n+            \"then the problem is likely elsewhere (ie your printer)\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(instructions)\n+                .testUI(PrintNullString::new)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -66,2 +85,2 @@\n-    c = new TextCanvas();\n-    add(\"Center\", c);\n+    public PrintNullString() {\n+        super(\"JDK 1.2 drawString Printing\");\n@@ -69,3 +88,2 @@\n-    Button printButton = new Button(\"Print\");\n-    printButton.addActionListener(this);\n-    add(\"South\", printButton);\n+        c = new TextCanvas();\n+        add(\"Center\", c);\n@@ -73,5 +91,3 @@\n-    addWindowListener(new WindowAdapter() {\n-       public void windowClosing(WindowEvent e) {\n-             System.exit(0);\n-            }\n-    });\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(this);\n+        add(\"South\", printButton);\n@@ -79,2 +95,2 @@\n-    pack();\n- }\n+        pack();\n+    }\n@@ -82,1 +98,1 @@\n- public void actionPerformed(ActionEvent e) {\n+    public void actionPerformed(ActionEvent e) {\n@@ -84,1 +100,1 @@\n-   PrinterJob pj = PrinterJob.getPrinterJob();\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n@@ -86,1 +102,1 @@\n-   if (pj != null && pj.printDialog()) {\n+        if (pj != null && pj.printDialog()) {\n@@ -88,9 +104,9 @@\n-       pj.setPrintable(c);\n-       try {\n-            pj.print();\n-      } catch (PrinterException pe) {\n-      } finally {\n-         System.err.println(\"PRINT RETURNED\");\n-      }\n-   }\n- }\n+            pj.setPrintable(c);\n+            try {\n+                pj.print();\n+            } catch (PrinterException pe) {\n+            } finally {\n+                System.out.println(\"PRINT RETURNED\");\n+            }\n+        }\n+    }\n@@ -98,1 +114,1 @@\n- class TextCanvas extends Panel implements Printable {\n+    static class TextCanvas extends Panel implements Printable {\n@@ -100,6 +116,5 @@\n-    String nullStr = null;\n-    String emptyStr = new String();\n-    AttributedString nullAttStr = null;\n-    AttributedString emptyAttStr = new AttributedString(emptyStr);\n-    AttributedCharacterIterator nullIterator = null;\n-    AttributedCharacterIterator emptyIterator = emptyAttStr.getIterator();\n+        String nullStr = null;\n+        String emptyStr = \"\";\n+        AttributedString emptyAttStr = new AttributedString(emptyStr);\n+        AttributedCharacterIterator nullIterator = null;\n+        AttributedCharacterIterator emptyIterator = emptyAttStr.getIterator();\n@@ -107,1 +122,1 @@\n-    public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n+        public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n@@ -109,2 +124,2 @@\n-      if (pgIndex > 0)\n-         return Printable.NO_SUCH_PAGE;\n+            if (pgIndex > 0)\n+                return Printable.NO_SUCH_PAGE;\n@@ -112,2 +127,2 @@\n-      Graphics2D g2d = (Graphics2D)g;\n-      g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n@@ -115,1 +130,1 @@\n-      paint(g);\n+            paint(g);\n@@ -117,2 +132,2 @@\n-      return Printable.PAGE_EXISTS;\n-    }\n+            return Printable.PAGE_EXISTS;\n+        }\n@@ -120,2 +135,2 @@\n-    public void paint(Graphics g1) {\n-        Graphics2D g = (Graphics2D)g1;\n+        public void paint(Graphics g1) {\n+            Graphics2D g = (Graphics2D) g1;\n@@ -123,7 +138,7 @@\n-        \/\/ API 1: null & empty drawString(String, int, int);\n-        try {\n-             g.drawString(nullStr, 20, 40);\n-             g.drawString(\"FAILURE: No NPE for null String, int\", 20, 40);\n-        } catch (NullPointerException e) {\n-          g.drawString(\"caught expected NPE for null String, int\", 20, 40);\n-        }\/* catch (Exception e) {\n+            \/\/ API 1: null & empty drawString(String, int, int);\n+            try {\n+                g.drawString(nullStr, 20, 40);\n+                g.drawString(\"FAILURE: No NPE for null String, int\", 20, 40);\n+            } catch (NullPointerException e) {\n+                g.drawString(\"caught expected NPE for null String, int\", 20, 40);\n+            }\/* catch (Exception e) {\n@@ -134,3 +149,3 @@\n-        \/\/try {\n-             g.drawString(emptyStr, 20, 60);\n-             g.drawString(\"OK for empty String, int\", 20, 60);\n+            \/\/try {\n+            g.drawString(emptyStr, 20, 60);\n+            g.drawString(\"OK for empty String, int\", 20, 60);\n@@ -142,8 +157,7 @@\n-\n-        \/\/ API 2: null & empty drawString(String, float, float);\n-        try {\n-             g.drawString(nullStr, 20.0f, 80.0f);\n-             g.drawString(\"FAILURE: No NPE for null String, float\", 20, 80);\n-        } catch (NullPointerException e) {\n-          g.drawString(\"caught expected NPE for null String, float\", 20, 80);\n-        } \/*catch (Exception e) {\n+            \/\/ API 2: null & empty drawString(String, float, float);\n+            try {\n+                g.drawString(nullStr, 20.0f, 80.0f);\n+                g.drawString(\"FAILURE: No NPE for null String, float\", 20, 80);\n+            } catch (NullPointerException e) {\n+                g.drawString(\"caught expected NPE for null String, float\", 20, 80);\n+            } \/*catch (Exception e) {\n@@ -153,3 +167,3 @@\n-        \/\/try {\n-             g.drawString(emptyStr, 20.0f, 100.0f);\n-             g.drawString(\"OK for empty String, float\", 20.0f, 100.f);\n+            \/\/try {\n+            g.drawString(emptyStr, 20.0f, 100.0f);\n+            g.drawString(\"OK for empty String, float\", 20.0f, 100.f);\n@@ -161,7 +175,7 @@\n-        \/\/ API 3: null & empty drawString(Iterator, int, int);\n-        try {\n-             g.drawString(nullIterator, 20, 120);\n-             g.drawString(\"FAILURE: No NPE for null iterator, float\", 20, 120);\n-        } catch (NullPointerException e) {\n-          g.drawString(\"caught expected NPE for null iterator, int\", 20, 120);\n-        } \/*catch (Exception e) {\n+            \/\/ API 3: null & empty drawString(Iterator, int, int);\n+            try {\n+                g.drawString(nullIterator, 20, 120);\n+                g.drawString(\"FAILURE: No NPE for null iterator, float\", 20, 120);\n+            } catch (NullPointerException e) {\n+                g.drawString(\"caught expected NPE for null iterator, int\", 20, 120);\n+            } \/*catch (Exception e) {\n@@ -171,6 +185,6 @@\n-        try {\n-             g.drawString(emptyIterator, 20, 140);\n-             g.drawString(\"FAILURE: No IAE for empty iterator, int\",\n-                           20, 140);\n-        } catch (IllegalArgumentException e) {\n-          g.drawString(\"caught expected IAE for empty iterator, int\",\n+            try {\n+                g.drawString(emptyIterator, 20, 140);\n+                g.drawString(\"FAILURE: No IAE for empty iterator, int\",\n+                        20, 140);\n+            } catch (IllegalArgumentException e) {\n+                g.drawString(\"caught expected IAE for empty iterator, int\",\n@@ -178,1 +192,1 @@\n-        } \/*catch (Exception e) {\n+            } \/*catch (Exception e) {\n@@ -183,8 +197,7 @@\n-\n-        \/\/ API 4: null & empty drawString(Iterator, float, int);\n-        try {\n-             g.drawString(nullIterator, 20.0f, 160.0f);\n-             g.drawString(\"FAILURE: No NPE for null iterator, float\", 20, 160);\n-        } catch (NullPointerException e) {\n-          g.drawString(\"caught expected NPE for null iterator, float\", 20, 160);\n-        } \/*catch (Exception e) {\n+            \/\/ API 4: null & empty drawString(Iterator, float, int);\n+            try {\n+                g.drawString(nullIterator, 20.0f, 160.0f);\n+                g.drawString(\"FAILURE: No NPE for null iterator, float\", 20, 160);\n+            } catch (NullPointerException e) {\n+                g.drawString(\"caught expected NPE for null iterator, float\", 20, 160);\n+            } \/*catch (Exception e) {\n@@ -195,6 +208,6 @@\n-        try {\n-             g.drawString(emptyIterator, 20, 180);\n-             g.drawString(\"FAILURE: No IAE for empty iterator, float\",\n-                           20, 180);\n-        } catch (IllegalArgumentException e) {\n-          g.drawString(\"caught expected IAE for empty iterator, float\",\n+            try {\n+                g.drawString(emptyIterator, 20, 180);\n+                g.drawString(\"FAILURE: No IAE for empty iterator, float\",\n+                        20, 180);\n+            } catch (IllegalArgumentException e) {\n+                g.drawString(\"caught expected IAE for empty iterator, float\",\n@@ -202,1 +215,1 @@\n-        } \/*catch (Exception e) {\n+            } \/*catch (Exception e) {\n@@ -206,1 +219,1 @@\n-    }\n+        }\n@@ -208,2 +221,3 @@\n-     public Dimension getPreferredSize() {\n-        return new Dimension(450, 250);\n+        public Dimension getPreferredSize() {\n+            return new Dimension(450, 250);\n+        }\n@@ -211,2 +225,0 @@\n- }\n-\n@@ -214,115 +226,0 @@\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintNullString.java","additions":142,"deletions":245,"binary":false,"changes":387,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,16 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +44,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,7 +50,0 @@\n-\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import java.text.*;\n-\n@@ -40,66 +52,28 @@\n- private TextCanvas c;\n-\n- public static void main(String args[]) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test should print a page which contains the same\",\n-         \"text message as in the test window on the screen\",\n-         \"You should also monitor the command line to see if any exceptions\",\n-         \"were thrown\",\n-         \"If an exception is thrown, or the page doesn't print properly\",\n-         \"then the test fails\",\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-    PrintParenString f = new PrintParenString();\n-    f.show();\n- }\n-\n- public PrintParenString() {\n-    super(\"JDK 1.2 drawString Printing\");\n-\n-    c = new TextCanvas();\n-    add(\"Center\", c);\n-\n-    Button printButton = new Button(\"Print\");\n-    printButton.addActionListener(this);\n-    add(\"South\", printButton);\n-\n-    addWindowListener(new WindowAdapter() {\n-       public void windowClosing(WindowEvent e) {\n-             System.exit(0);\n-            }\n-    });\n-\n-    pack();\n- }\n-\n- public void actionPerformed(ActionEvent e) {\n-\n-   PrinterJob pj = PrinterJob.getPrinterJob();\n-\n-   if (pj != null && pj.printDialog()) {\n-\n-       pj.setPrintable(c);\n-       try {\n-            pj.print();\n-      } catch (PrinterException pe) {\n-      } finally {\n-         System.err.println(\"PRINT RETURNED\");\n-      }\n-   }\n- }\n-\n- class TextCanvas extends Panel implements Printable {\n-\n-    String nullStr = null;\n-    String emptyStr = new String();\n-    AttributedString nullAttStr = null;\n-    AttributedString emptyAttStr = new AttributedString(emptyStr);\n-    AttributedCharacterIterator nullIterator = null;\n-    AttributedCharacterIterator emptyIterator = emptyAttStr.getIterator();\n-\n-    public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n+    private final TextCanvas c;\n+\n+    private static final String instructions =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test should print a page which contains the same\\n\" +\n+            \"text message as in the test window on the screen\\n\" +\n+            \"You should also monitor the command line to see if any exceptions\\n\" +\n+            \"were thrown\\n\" +\n+            \"If an exception is thrown, or the page doesn't print properly\\n\" +\n+            \"then the test fails\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(instructions)\n+                .testUI(PrintParenString::new)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -107,2 +81,2 @@\n-      if (pgIndex > 0)\n-         return Printable.NO_SUCH_PAGE;\n+    public PrintParenString() {\n+        super(\"JDK 1.2 drawString Printing\");\n@@ -110,2 +84,2 @@\n-      Graphics2D g2d = (Graphics2D)g;\n-      g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n+        c = new TextCanvas();\n+        add(\"Center\", c);\n@@ -113,1 +87,3 @@\n-      paint(g);\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(this);\n+        add(\"South\", printButton);\n@@ -115,1 +91,1 @@\n-      return Printable.PAGE_EXISTS;\n+        pack();\n@@ -118,2 +94,1 @@\n-    public void paint(Graphics g1) {\n-        Graphics2D g = (Graphics2D)g1;\n+    public void actionPerformed(ActionEvent e) {\n@@ -121,2 +96,1 @@\n-          String str = \"String containing unclosed parenthesis (.\";\n-          g.drawString(str, 20, 40);\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n@@ -124,1 +98,1 @@\n-    }\n+        if (pj != null && pj.printDialog()) {\n@@ -126,2 +100,9 @@\n-     public Dimension getPreferredSize() {\n-        return new Dimension(450, 250);\n+            pj.setPrintable(c);\n+            try {\n+                pj.print();\n+            } catch (PrinterException pe) {\n+                pe.printStackTrace();\n+            } finally {\n+                System.out.println(\"PRINT RETURNED\");\n+            }\n+        }\n@@ -129,1 +110,0 @@\n- }\n@@ -131,1 +111,1 @@\n-}\n+    class TextCanvas extends Panel implements Printable {\n@@ -133,3 +113,1 @@\n-class Sysout\n- {\n-   private static TestDialog dialog;\n+        public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n@@ -137,7 +115,2 @@\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+            if (pgIndex > 0)\n+                return Printable.NO_SUCH_PAGE;\n@@ -145,8 +118,2 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n@@ -154,0 +121,1 @@\n+            paint(g);\n@@ -155,4 +123,2 @@\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n+            return Printable.PAGE_EXISTS;\n+        }\n@@ -160,0 +126,2 @@\n+        public void paint(Graphics g1) {\n+            Graphics2D g = (Graphics2D) g1;\n@@ -161,4 +129,2 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n+            String str = \"String containing unclosed parenthesis (.\";\n+            g.drawString(str, 20, 40);\n@@ -166,79 +132,1 @@\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n+        }\n@@ -246,1 +134,5 @@\n- }\/\/ TestDialog  class\n+        public Dimension getPreferredSize() {\n+            return new Dimension(450, 250);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintParenString.java","additions":88,"deletions":196,"binary":false,"changes":284,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,19 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.geom.AffineTransform;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -28,0 +46,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,8 +53,0 @@\n-\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.geom.*;\n-import java.awt.print.*;\n-import java.text.*;\n-\n@@ -41,70 +55,28 @@\n- private TextCanvas c;\n-\n- public static void main(String args[]) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test should print a page which contains the same\",\n-         \"content as the test window on the screen, in particular the lines\",\n-         \"should be immediately under the text\",\n-         \"You should also monitor the command line to see if any exceptions\",\n-         \"were thrown\",\n-         \"If an exception is thrown, or the page doesn't print properly\",\n-         \"then the test fails\",\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-    PrintTranslatedFont f = new PrintTranslatedFont();\n-    f.show();\n- }\n-\n- public PrintTranslatedFont() {\n-    super(\"JDK 1.2 drawString Printing\");\n-\n-    c = new TextCanvas();\n-    add(\"Center\", c);\n-\n-    Button printButton = new Button(\"Print\");\n-    printButton.addActionListener(this);\n-    add(\"South\", printButton);\n-\n-    addWindowListener(new WindowAdapter() {\n-       public void windowClosing(WindowEvent e) {\n-             System.exit(0);\n-            }\n-    });\n-\n-    pack();\n- }\n-\n- public void actionPerformed(ActionEvent e) {\n-\n-   PrinterJob pj = PrinterJob.getPrinterJob();\n-\n-   if (pj != null && pj.printDialog()) {\n-\n-       pj.setPrintable(c);\n-       try {\n-            pj.print();\n-      } catch (PrinterException pe) {\n-      } finally {\n-         System.err.println(\"PRINT RETURNED\");\n-      }\n-   }\n- }\n-\n- class TextCanvas extends Panel implements Printable {\n-\n-    public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n-\n-      if (pgIndex > 0)\n-         return Printable.NO_SUCH_PAGE;\n-\n-      Graphics2D g2d = (Graphics2D)g;\n-      g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n-\n-      paint(g);\n-\n-      return Printable.PAGE_EXISTS;\n+    private final TextCanvas c;\n+\n+    private static final String instructions =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test should print a page which contains the same\\n\" +\n+            \"content as the test window on the screen, in particular the lines\\n\" +\n+            \"should be immediately under the text\\n\" +\n+            \"You should also monitor the command line to see if any exceptions\\n\" +\n+            \"were thrown\\n\" +\n+            \"If an exception is thrown, or the page doesn't print properly\\n\" +\n+            \"then the test fails\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(instructions)\n+                .testUI(PrintTranslatedFont::new)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n@@ -113,9 +85,2 @@\n-    public void paint(Graphics g1) {\n-        Graphics2D g = (Graphics2D)g1;\n-\n-          Font f = new Font(\"Dialog\", Font.PLAIN, 20);\n-          int tx = 20;\n-          int ty = 20;\n-          AffineTransform at = AffineTransform.getTranslateInstance(tx, ty);\n-          f = f.deriveFont(at);\n-          g.setFont(f);\n+    public PrintTranslatedFont() {\n+        super(\"JDK 1.2 drawString Printing\");\n@@ -123,6 +88,2 @@\n-          FontMetrics fm = g.getFontMetrics();\n-          String str = \"Basic ascii string\";\n-          int sw = fm.stringWidth(str);\n-          int posx = 20, posy = 40;\n-          g.drawString(str, posx, posy);\n-          g.drawLine(posx+tx, posy+ty+2, posx+tx+sw, posy+ty+2);\n+        c = new TextCanvas();\n+        add(\"Center\", c);\n@@ -130,6 +91,3 @@\n-          posx = 20; posy = 70;\n-          str = \"Test string compound printing \\u2203\\u2200\";\n-          sw = fm.stringWidth(str);\n-          g.drawString(str, posx, posy);\n-          g.drawLine(posx+tx, posy+ty+2, posx+tx+sw, posy+ty+2);\n-    }\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(this);\n+        add(\"South\", printButton);\n@@ -137,2 +95,1 @@\n-     public Dimension getPreferredSize() {\n-        return new Dimension(450, 250);\n+        pack();\n@@ -140,1 +97,0 @@\n- }\n@@ -142,1 +98,1 @@\n-}\n+    public void actionPerformed(ActionEvent e) {\n@@ -144,3 +100,1 @@\n-class Sysout\n- {\n-   private static TestDialog dialog;\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n@@ -148,22 +102,1 @@\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n+        if (pj != null && pj.printDialog()) {\n@@ -171,4 +104,9 @@\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n+            pj.setPrintable(c);\n+            try {\n+                pj.print();\n+            } catch (PrinterException pe) {\n+                pe.printStackTrace();\n+            } finally {\n+                System.out.println(\"PRINT RETURNED\");\n+            }\n+        }\n@@ -177,23 +115,1 @@\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n+    static class TextCanvas extends Panel implements Printable {\n@@ -201,2 +117,1 @@\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n+        public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n@@ -204,1 +119,2 @@\n-      pack();\n+            if (pgIndex > 0)\n+                return Printable.NO_SUCH_PAGE;\n@@ -206,2 +122,2 @@\n-      show();\n-    }\/\/ TestDialog()\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n@@ -209,5 +125,1 @@\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n+            paint(g);\n@@ -215,1 +127,2 @@\n-      \/\/Go down array of instruction strings\n+            return Printable.PAGE_EXISTS;\n+        }\n@@ -217,13 +130,2 @@\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n+        public void paint(Graphics g1) {\n+            Graphics2D g = (Graphics2D) g1;\n@@ -231,1 +133,6 @@\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n+            Font f = new Font(\"Dialog\", Font.PLAIN, 20);\n+            int tx = 20;\n+            int ty = 20;\n+            AffineTransform at = AffineTransform.getTranslateInstance(tx, ty);\n+            f = f.deriveFont(at);\n+            g.setFont(f);\n@@ -233,9 +140,6 @@\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n+            FontMetrics fm = g.getFontMetrics();\n+            String str = \"Basic ascii string\";\n+            int sw = fm.stringWidth(str);\n+            int posx = 20, posy = 40;\n+            g.drawString(str, posx, posy);\n+            g.drawLine(posx + tx, posy + ty + 2, posx + tx + sw, posy + ty + 2);\n@@ -243,1 +147,7 @@\n-            instructionsText.append( printStr + \"\\n\" );\n+            posx = 20;\n+            posy = 70;\n+            str = \"Test string compound printing \\u2203\\u2200\";\n+            sw = fm.stringWidth(str);\n+            g.drawString(str, posx, posy);\n+            g.drawLine(posx + tx, posy + ty + 2, posx + tx + sw, posy + ty + 2);\n+        }\n@@ -245,10 +155,3 @@\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+        public Dimension getPreferredSize() {\n+            return new Dimension(450, 250);\n+        }\n@@ -256,2 +159,1 @@\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintTranslatedFont.java","additions":106,"deletions":204,"binary":false,"changes":310,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,22 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Paper;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +50,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,5 +56,0 @@\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-\n@@ -38,148 +58,51 @@\n-PrinterJob myPrinterJob;\n-PageFormat myPageFormat;\n-Label pw, ph, pglm, pgrm, pgiw, pgih, pgtm, pgbm;\n-TextField tpw, tph, tpglm, tpgtm, tpgiw, tpgih;\n-Label myWidthLabel;\n-Label myHeightLabel;\n-Label myImageableXLabel;\n-Label myImageableYLabel;\n-Label myImageableRightLabel;\n-Label myImageableBottomLabel;\n-Label myImageableWidthLabel;\n-Label myImageableHeightLabel;\n-Label myOrientationLabel;\n-\n-  protected void displayPageFormatAttributes() {\n-    myWidthLabel.setText (\"Format Width = \" + drnd(myPageFormat.getWidth()));\n-    myHeightLabel.setText (\"Format Height = \" + drnd(myPageFormat.getHeight()));\n-    myImageableXLabel.setText\n-        (\"Format Left Margin = \" + drnd(myPageFormat.getImageableX()));\n-    myImageableRightLabel.setText\n-        (\"Format Right Margin = \" + drnd(myPageFormat.getWidth() -\n-        (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n-    myImageableWidthLabel.setText\n-        (\"Format ImageableWidth = \" + drnd(myPageFormat.getImageableWidth()));\n-    myImageableYLabel.setText\n-        (\"Format Top Margin = \" + drnd(myPageFormat.getImageableY()));\n-    myImageableBottomLabel.setText\n-        (\"Format Bottom Margin = \" + drnd(myPageFormat.getHeight() -\n-        (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n-    myImageableHeightLabel.setText\n-        (\"Format ImageableHeight = \" + drnd(myPageFormat.getImageableHeight()));\n-    int o = myPageFormat.getOrientation();\n-    myOrientationLabel.setText\n-        (\"Format Orientation = \" +\n-                (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n-                 o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n-                 o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n-                 \"<invalid>\"));\n-    Paper p = myPageFormat.getPaper();\n-    pw.setText(\"Paper Width = \" + drnd(p.getWidth()));\n-    ph.setText(\"Paper Height = \" + drnd(p.getHeight()));\n-    pglm.setText(\"Paper Left Margin = \" + drnd(p.getImageableX()));\n-    pgiw.setText(\"Paper Imageable Width = \" + drnd(p.getImageableWidth()));\n-    pgih.setText(\"Paper Imageable Height = \" + drnd(p.getImageableHeight()));\n-\n-    pgrm.setText(\"Paper Right Margin = \" +\n-         drnd(p.getWidth() - (p.getImageableX()+p.getImageableWidth())));\n-    pgtm.setText(\"Paper Top Margin = \" + drnd(p.getImageableY()));\n-    pgbm.setText(\"Paper Bottom Margin = \" +\n-       drnd(p.getHeight() - (p.getImageableY()+p.getImageableHeight())));\n-  }\n-\n-  static String drnd(double d) {\n-      d = d * 10.0 + 0.5;\n-      d = Math.floor(d) \/10.0;\n-      String ds = Double.toString(d);\n-      int decimal_pos = ds.indexOf(\".\");\n-      int len = ds.length();\n-      if (len > decimal_pos+2) {\n-          return ds.substring(0, decimal_pos+2);\n-      } else {\n-          return ds;\n-      }\n-  }\n-\n-  public ValidatePage() {\n-    super (\"Validate Page Test\");\n-    myPrinterJob = PrinterJob.getPrinterJob();\n-    myPageFormat = new PageFormat();\n-    Paper p = new Paper();\n-    p.setSize(28*72, 21.5 * 72);\n-    myPageFormat.setPaper(p);\n-    setLayout(new FlowLayout());\n-    Panel pfp = new Panel();\n-    pfp.setLayout (new GridLayout (9, 1, 0, 0));\n-    pfp.add (myOrientationLabel = new Label());\n-    pfp.add (myWidthLabel = new Label());\n-    pfp.add (myImageableXLabel = new Label());\n-    pfp.add (myImageableRightLabel = new Label());\n-    pfp.add (myImageableWidthLabel = new Label());\n-    pfp.add (myHeightLabel = new Label());\n-    pfp.add (myImageableYLabel = new Label());\n-    pfp.add (myImageableBottomLabel = new Label());\n-    pfp.add (myImageableHeightLabel = new Label());\n-\n-    add(pfp);\n-\n-    Panel pp = new Panel();\n-    pp.setLayout (new GridLayout (8, 1, 0, 0));\n-    pp.add (pw = new Label());\n-    pp.add (pglm = new Label());\n-    pp.add (pgtm = new Label());\n-    pp.add (ph = new Label());\n-    pp.add (pgiw = new Label());\n-    pp.add (pgih = new Label());\n-    pp.add (pgrm = new Label());\n-    pp.add (pgbm = new Label());\n-\n-    add(pp);\n-\n-    Panel epp = new Panel();\n-    epp.setLayout (new GridLayout (6, 2, 0, 0));\n-\n-    epp.add(new Label(\"Page width:\"));\n-    epp.add (tpw = new TextField());\n-    epp.add(new Label(\"Page height:\"));\n-    epp.add (tph = new TextField());\n-    epp.add(new Label(\"Left Margin:\"));\n-    epp.add (tpglm = new TextField());\n-    epp.add(new Label(\"Top margin:\"));\n-    epp.add (tpgtm = new TextField());\n-    epp.add(new Label(\"Imageable Wid:\"));\n-    epp.add (tpgiw = new TextField());\n-    epp.add(new Label(\"Imageable Hgt:\"));\n-    epp.add (tpgih = new TextField());\n-\n-    add(epp);\n-       displayPageFormatAttributes();\n-\n-    Panel panel = new Panel();\n-    Button defButton = new Button (\"Default Page\");\n-    defButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                        myPageFormat = myPrinterJob.defaultPage();\n-                        displayPageFormatAttributes();\n-                }\n-    });\n-\n-    Button pageButton = new Button (\"Page Setup..\");\n-    pageButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                        myPageFormat = myPrinterJob.pageDialog (myPageFormat);\n-                        displayPageFormatAttributes();\n-                }\n-    });\n-    Button printButton = new Button (\"Print\");\n-    printButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                    try {\n-                         \/\/if (myPrinterJob.printDialog()) {\n-                             myPrinterJob.setPrintable(ValidatePage.this,\n-                                                       myPageFormat);\n-                             myPrinterJob.print();\n-                   \/\/ }\n-                    } catch (PrinterException pe ) {\n-                    }\n-                }\n-    });\n+    PrinterJob myPrinterJob;\n+    PageFormat myPageFormat;\n+    Label pw, ph, pglm, pgrm, pgiw, pgih, pgtm, pgbm;\n+    TextField tpw, tph, tpglm, tpgtm, tpgiw, tpgih;\n+    Label myWidthLabel;\n+    Label myHeightLabel;\n+    Label myImageableXLabel;\n+    Label myImageableYLabel;\n+    Label myImageableRightLabel;\n+    Label myImageableBottomLabel;\n+    Label myImageableWidthLabel;\n+    Label myImageableHeightLabel;\n+    Label myOrientationLabel;\n+\n+    protected void displayPageFormatAttributes() {\n+        myWidthLabel.setText(\"Format Width = \" + drnd(myPageFormat.getWidth()));\n+        myHeightLabel.setText(\"Format Height = \" + drnd(myPageFormat.getHeight()));\n+        myImageableXLabel.setText\n+                (\"Format Left Margin = \" + drnd(myPageFormat.getImageableX()));\n+        myImageableRightLabel.setText\n+                (\"Format Right Margin = \" + drnd(myPageFormat.getWidth() -\n+                        (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n+        myImageableWidthLabel.setText\n+                (\"Format ImageableWidth = \" + drnd(myPageFormat.getImageableWidth()));\n+        myImageableYLabel.setText\n+                (\"Format Top Margin = \" + drnd(myPageFormat.getImageableY()));\n+        myImageableBottomLabel.setText\n+                (\"Format Bottom Margin = \" + drnd(myPageFormat.getHeight() -\n+                        (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n+        myImageableHeightLabel.setText\n+                (\"Format ImageableHeight = \" + drnd(myPageFormat.getImageableHeight()));\n+        int o = myPageFormat.getOrientation();\n+        myOrientationLabel.setText\n+                (\"Format Orientation = \" +\n+                        (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n+                                o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n+                                        o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n+                                                \"<invalid>\"));\n+        Paper p = myPageFormat.getPaper();\n+        pw.setText(\"Paper Width = \" + drnd(p.getWidth()));\n+        ph.setText(\"Paper Height = \" + drnd(p.getHeight()));\n+        pglm.setText(\"Paper Left Margin = \" + drnd(p.getImageableX()));\n+        pgiw.setText(\"Paper Imageable Width = \" + drnd(p.getImageableWidth()));\n+        pgih.setText(\"Paper Imageable Height = \" + drnd(p.getImageableHeight()));\n+\n+        pgrm.setText(\"Paper Right Margin = \" +\n+                drnd(p.getWidth() - (p.getImageableX() + p.getImageableWidth())));\n+        pgtm.setText(\"Paper Top Margin = \" + drnd(p.getImageableY()));\n+        pgbm.setText(\"Paper Bottom Margin = \" +\n+                drnd(p.getHeight() - (p.getImageableY() + p.getImageableHeight())));\n+    }\n@@ -187,6 +110,12 @@\n-    Button chooseButton = new Button (\"Printer..\");\n-    chooseButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                            myPrinterJob.printDialog();\n-                }\n-    });\n+    static String drnd(double d) {\n+        d = d * 10.0 + 0.5;\n+        d = Math.floor(d) \/ 10.0;\n+        String ds = Double.toString(d);\n+        int decimal_pos = ds.indexOf(\".\");\n+        int len = ds.length();\n+        if (len > decimal_pos + 2) {\n+            return ds.substring(0, decimal_pos + 2);\n+        } else {\n+            return ds;\n+        }\n+    }\n@@ -194,5 +123,81 @@\n-    Button validateButton = new Button (\"Validate Page\");\n-    validateButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                        myPageFormat = myPrinterJob.validatePage(myPageFormat);\n-                        displayPageFormatAttributes();\n+    public ValidatePage() {\n+        super(\"Validate Page Test\");\n+        myPrinterJob = PrinterJob.getPrinterJob();\n+        myPageFormat = new PageFormat();\n+        Paper p = new Paper();\n+        p.setSize(28 * 72, 21.5 * 72);\n+        myPageFormat.setPaper(p);\n+        setLayout(new FlowLayout());\n+        Panel pfp = new Panel();\n+        pfp.setLayout(new GridLayout(9, 1, 0, 0));\n+        pfp.add(myOrientationLabel = new Label());\n+        pfp.add(myWidthLabel = new Label());\n+        pfp.add(myImageableXLabel = new Label());\n+        pfp.add(myImageableRightLabel = new Label());\n+        pfp.add(myImageableWidthLabel = new Label());\n+        pfp.add(myHeightLabel = new Label());\n+        pfp.add(myImageableYLabel = new Label());\n+        pfp.add(myImageableBottomLabel = new Label());\n+        pfp.add(myImageableHeightLabel = new Label());\n+\n+        add(pfp);\n+\n+        Panel pp = new Panel();\n+        pp.setLayout(new GridLayout(8, 1, 0, 0));\n+        pp.add(pw = new Label());\n+        pp.add(pglm = new Label());\n+        pp.add(pgtm = new Label());\n+        pp.add(ph = new Label());\n+        pp.add(pgiw = new Label());\n+        pp.add(pgih = new Label());\n+        pp.add(pgrm = new Label());\n+        pp.add(pgbm = new Label());\n+\n+        add(pp);\n+\n+        Panel epp = new Panel();\n+        epp.setLayout(new GridLayout(6, 2, 0, 0));\n+\n+        epp.add(new Label(\"Page width:\"));\n+        epp.add(tpw = new TextField());\n+        epp.add(new Label(\"Page height:\"));\n+        epp.add(tph = new TextField());\n+        epp.add(new Label(\"Left Margin:\"));\n+        epp.add(tpglm = new TextField());\n+        epp.add(new Label(\"Top margin:\"));\n+        epp.add(tpgtm = new TextField());\n+        epp.add(new Label(\"Imageable Wid:\"));\n+        epp.add(tpgiw = new TextField());\n+        epp.add(new Label(\"Imageable Hgt:\"));\n+        epp.add(tpgih = new TextField());\n+\n+        add(epp);\n+        displayPageFormatAttributes();\n+\n+        Panel panel = new Panel();\n+        Button defButton = new Button(\"Default Page\");\n+        defButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                myPageFormat = myPrinterJob.defaultPage();\n+                displayPageFormatAttributes();\n+            }\n+        });\n+\n+        Button pageButton = new Button(\"Page Setup..\");\n+        pageButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                myPageFormat = myPrinterJob.pageDialog(myPageFormat);\n+                displayPageFormatAttributes();\n+            }\n+        });\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                try {\n+                    \/\/if (myPrinterJob.printDialog()) {\n+                    myPrinterJob.setPrintable(ValidatePage.this,\n+                            myPageFormat);\n+                    myPrinterJob.print();\n+                    \/\/ }\n+                } catch (PrinterException pe) {\n+                    pe.printStackTrace();\n@@ -200,18 +205,34 @@\n-    });\n-    Button setButton = new Button (\"Set Paper\");\n-    setButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                  try {\n-                      Paper p = new Paper();\n-                      double pwid = Double.parseDouble(tpw.getText());\n-                      double phgt = Double.parseDouble(tph.getText());\n-                      double pimx = Double.parseDouble(tpglm.getText());\n-                      double pimy = Double.parseDouble(tpgtm.getText());\n-                      double pimwid = Double.parseDouble(tpgiw.getText());\n-                      double pimhgt = Double.parseDouble(tpgih.getText());\n-                      p.setSize(pwid, phgt);\n-                      p.setImageableArea(pimx, pimy, pimwid, pimhgt);\n-                      myPageFormat.setPaper(p);\n-                            displayPageFormatAttributes();\n-                  } catch (NumberFormatException nfe) {\n-                  }\n+            }\n+        });\n+\n+        Button chooseButton = new Button(\"Printer..\");\n+        chooseButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                myPrinterJob.printDialog();\n+            }\n+        });\n+\n+        Button validateButton = new Button(\"Validate Page\");\n+        validateButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                myPageFormat = myPrinterJob.validatePage(myPageFormat);\n+                displayPageFormatAttributes();\n+            }\n+        });\n+        Button setButton = new Button(\"Set Paper\");\n+        setButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                try {\n+                    Paper p = new Paper();\n+                    double pwid = Double.parseDouble(tpw.getText());\n+                    double phgt = Double.parseDouble(tph.getText());\n+                    double pimx = Double.parseDouble(tpglm.getText());\n+                    double pimy = Double.parseDouble(tpgtm.getText());\n+                    double pimwid = Double.parseDouble(tpgiw.getText());\n+                    double pimhgt = Double.parseDouble(tpgih.getText());\n+                    p.setSize(pwid, phgt);\n+                    p.setImageableArea(pimx, pimy, pimwid, pimhgt);\n+                    myPageFormat.setPaper(p);\n+                    displayPageFormatAttributes();\n+                } catch (NumberFormatException nfe) {\n+                    nfe.printStackTrace();\n@@ -219,105 +240,24 @@\n-    });\n-    panel.add (setButton);\n-    panel.add (defButton);\n-    panel.add (pageButton);\n-    panel.add (chooseButton);\n-    panel.add (validateButton);\n-    panel.add (printButton);\n-    add(panel);\n-    TextArea ta = new TextArea(7, 60);\n-    String ls = System.getProperty(\"line.Separator\", \"\\n\");\n-    ta.setText(\n-        \"When validating a page, the process is 1st to find the closest matching \" + ls +\n-        \"paper size, next to make sure the requested imageable area fits within \" + ls +\n-        \"the printer's imageable area for that paper size. Finally the top and \" + ls +\n-        \"left margins will be shrunk if they are too great for the adjusted \" + ls +\n-        \"imageable area to fit at that position. They will shrink by the minimum\" + ls +\n-        \"needed to accomodate the imageable area.\"+ls+ls+\n-        \"To test 6229507, put the minimum margins (all 0s) in Page Setup dialog.\"+ls+\n-        \"Compare Imageable width, height, and margins of portrait against landscape.\");\n-    ta.setEditable(false);\n-    add(ta);\n-\n-    addWindowListener (new WindowAdapter() {\n-         public void windowClosing (WindowEvent e) {\n-            dispose();\n-            System.exit (0);\n-         }\n-\n-      });\n-      setSize (500, 630);\n-      setVisible (true);\n-  }\n-\n-  public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n-\n-     if (pageIndex > 0) {\n-        return Printable.NO_SUCH_PAGE;\n-     }\n-\n-     Graphics2D g2d = (Graphics2D)graphics;\n-\n-    int o = pageFormat.getOrientation();\n-\n-     System.out.println(\"Format Orientation = \" +\n-                (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n-                 o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n-                 o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n-                 \"<invalid>\"));\n-     System.out.println(g2d.getTransform());\n-     System.out.println(\"ix=\"+pageFormat.getImageableX()+\n-                       \" iy=\"+pageFormat.getImageableY());\n-     g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n-     g2d.drawString(\"ORIGIN\", 20, 20);\n-     g2d.drawString(\"X THIS WAY\", 200, 50);\n-     g2d.drawString(\"Y THIS WAY\", 60 , 200);\n-     g2d.drawRect(0,0,(int)pageFormat.getImageableWidth(),\n-                      (int)pageFormat.getImageableHeight());\n-     g2d.setColor(Color.blue);\n-     g2d.drawRect(1,1,(int)pageFormat.getImageableWidth()-2,\n-                      (int)pageFormat.getImageableHeight()-2);\n-\n-     return  Printable.PAGE_EXISTS;\n-  }\n-\n-  public static void main( String[] args) {\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test is very flexible and requires much interaction.\",\n-         \"There are several buttons.\",\n-         \"Set Paper: if all fields are valid numbers it sets the Paper object.\",\n-         \"This is used to create arbitrary nonsensical paper sizes to help\",\n-         \"test validatePage.\",\n-         \"Default Page: sets a default page. This should always be valid.\",\n-         \"Page Setup: brings up the page dialog. You must OK this dialog\",\n-         \"for it to have any effect. You can use this to set different size,\",\n-         \"orientation and margins - which of course affect imageable area.\",\n-         \"Printer: Used to set the current printer. Useful because current\",\n-         \"printer affects the choice of paper sizes available.\",\n-         \"You must OK this dialog for it to have any effect.\",\n-         \"Validate Page:\",\n-         \"The most important button in the test. By setting nonsensical\",\n-         \"or valid papers with varying margins etc, this should always find\",\n-         \"the closest\",\n-         \"match within the limits of what is possible on the current printer.\",\n-         \"Print: to the current printer. Not vital for this test.\",\n-         \"request.\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-     new ValidatePage();\n-  }\n-\n-}\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+            }\n+        });\n+        panel.add(setButton);\n+        panel.add(defButton);\n+        panel.add(pageButton);\n+        panel.add(chooseButton);\n+        panel.add(validateButton);\n+        panel.add(printButton);\n+        add(panel);\n+        TextArea ta = new TextArea(10, 45);\n+        String ls = System.getProperty(\"line.Separator\", \"\\n\");\n+        ta.setText(\n+                \"When validating a page, the process is 1st to find the closest matching \" + ls +\n+                \"paper size, next to make sure the requested imageable area fits within \" + ls +\n+                \"the printer's imageable area for that paper size. Finally the top and \" + ls +\n+                \"left margins will be shrunk if they are too great for the adjusted \" + ls +\n+                \"imageable area to fit at that position. They will shrink by the minimum\" + ls +\n+                \"needed to accomodate the imageable area.\" + ls + ls +\n+                \"To test 6229507, put the minimum margins (all 0s) in Page Setup dialog.\" + ls +\n+                \"Compare Imageable width, height, and margins of portrait against landscape.\");\n+\n+        ta.setEditable(false);\n+        add(ta);\n+        setSize(500, 650);\n@@ -326,8 +266,1 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n+    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n@@ -335,0 +268,3 @@\n+        if (pageIndex > 0) {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n@@ -336,4 +272,1 @@\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n+        Graphics2D g2d = (Graphics2D) graphics;\n@@ -341,0 +274,1 @@\n+        int o = pageFormat.getOrientation();\n@@ -342,3 +276,19 @@\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n+        System.out.println(\"Format Orientation = \" +\n+                (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n+                        o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n+                                o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n+                                        \"<invalid>\"));\n+        System.out.println(g2d.getTransform());\n+        System.out.println(\"ix=\" + pageFormat.getImageableX() +\n+                \" iy=\" + pageFormat.getImageableY());\n+        g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n+        g2d.drawString(\"ORIGIN\", 20, 20);\n+        g2d.drawString(\"X THIS WAY\", 200, 50);\n+        g2d.drawString(\"Y THIS WAY\", 60, 200);\n+        g2d.drawRect(0, 0, (int) pageFormat.getImageableWidth(),\n+                (int) pageFormat.getImageableHeight());\n+        g2d.setColor(Color.blue);\n+        g2d.drawRect(1, 1, (int) pageFormat.getImageableWidth() - 2,\n+                (int) pageFormat.getImageableHeight() - 2);\n+\n+        return Printable.PAGE_EXISTS;\n@@ -347,78 +297,38 @@\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+    private static final String instructions =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test is very flexible and requires much interaction.\\n\" +\n+            \"There are several buttons.\\n\" +\n+            \"Set Paper: if all fields are valid numbers it sets the Paper object.\\n\" +\n+            \"This is used to create arbitrary nonsensical paper sizes to help\\n\" +\n+            \"test validatePage.\\n\" +\n+            \"Default Page: sets a default page. This should always be valid.\\n\" +\n+            \"Page Setup: brings up the page dialog. You must OK this dialog\\n\" +\n+            \"for it to have any effect. You can use this to set different size,\\n\" +\n+            \"orientation and margins - which of course affect imageable area.\\n\" +\n+            \"Printer: Used to set the current printer. Useful because current\\n\" +\n+            \"printer affects the choice of paper sizes available.\\n\" +\n+            \"You must OK this dialog for it to have any effect.\\n\" +\n+            \"Validate Page:\\n\" +\n+            \"The most important button in the test. By setting nonsensical\\n\" +\n+            \"or valid papers with varying margins etc, this should always find\\n\" +\n+            \"the closest\\n\" +\n+            \"match within the limits of what is possible on the current printer.\\n\" +\n+            \"Print: to the current printer. Not vital for this test.\\n\" +\n+            \"request.\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(instructions)\n+                .testUI(ValidatePage::new)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n@@ -426,2 +336,1 @@\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ValidatePage\/ValidatePage.java","additions":293,"deletions":384,"binary":false,"changes":677,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,19 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.GradientPaint;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.image.BufferedImage;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n@@ -29,0 +47,4 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @library \/test\/lib\n+ * @build PassFailJFrame\n+ * @build jtreg.SkippedException\n@@ -31,8 +53,0 @@\n-import java.awt.*;\n-import java.awt.geom.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import java.awt.Toolkit;\n-import java.awt.image.BufferedImage;\n-\n-\n@@ -41,20 +55,29 @@\n- private RasterCanvas c;\n-\n- public static void main(String args[]) {\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test uses rendering operations which force the implementation\",\n-         \"to print the page as a raster\",\n-         \"You should see two square images, the 1st containing overlapping\",\n-         \"composited squares, the lower image shows a gradient paint.\",\n-         \"The printed output should match the on-screen display, although\",\n-         \"only colour printers will be able to accurately reproduce the\",\n-         \"subtle color changes.\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-    RasterTest f = new RasterTest();\n-    f.show();\n- }\n+    private final RasterCanvas c;\n+\n+    private static final String instructions =\n+            \"You must have a printer available to perform this test\\n\" +\n+            \"This test uses rendering operations which force the implementation\\n\" +\n+            \"to print the page as a raster\\n\" +\n+            \"You should see two square images, the 1st containing overlapping\\n\" +\n+            \"composited squares, the lower image shows a gradient paint.\\n\" +\n+            \"The printed output should match the on-screen display, although\\n\" +\n+            \"only colour printers will be able to accurately reproduce the\\n\" +\n+            \"subtle color changes.\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new SkippedException(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(instructions)\n+                .testUI(RasterTest::new)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -62,1 +85,1 @@\n- public RasterTest() {\n+    public RasterTest() {\n@@ -65,2 +88,2 @@\n-    c = new RasterCanvas();\n-    add(\"Center\", c);\n+        c = new RasterCanvas();\n+        add(\"Center\", c);\n@@ -68,9 +91,3 @@\n-    Button printButton = new Button(\"Print\");\n-    printButton.addActionListener(this);\n-    add(\"South\", printButton);\n-\n-    addWindowListener(new WindowAdapter() {\n-       public void windowClosing(WindowEvent e) {\n-             System.exit(0);\n-            }\n-    });\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(this);\n+        add(\"South\", printButton);\n@@ -78,1 +95,1 @@\n-    pack();\n+        pack();\n@@ -81,34 +98,0 @@\n-\n- }\n-\n- public void actionPerformed(ActionEvent e) {\n-\n-   PrinterJob pj = PrinterJob.getPrinterJob();\n-\n-   if (pj != null && pj.printDialog()) {\n-       pj.setPrintable(c);\n-       try {\n-            pj.print();\n-      } catch (PrinterException pe) {\n-      } finally {\n-         System.err.println(\"PRINT RETURNED\");\n-      }\n-   }\n-}\n-\n-\n- class RasterCanvas extends Canvas implements Printable {\n-\n-\n-    public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n-      if (pgIndex > 0)\n-         return Printable.NO_SUCH_PAGE;\n-\n-         Graphics2D g2d= (Graphics2D)g;\n-         g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n-         doPaint(g2d);\n-      return Printable.PAGE_EXISTS;\n-    }\n-\n-    public void paint(Graphics g) {\n-       doPaint(g);\n@@ -117,33 +100,1 @@\n-    public void paintComponent(Graphics g) {\n-       doPaint(g);\n-    }\n-\n-    public void doPaint(Graphics g) {\n-        Graphics2D g2 = (Graphics2D)g;\n-\n-        g2.setColor(Color.black);\n-\n-        BufferedImage bimg = new BufferedImage(200, 200,\n-                                                 BufferedImage.TYPE_INT_ARGB);\n-        Graphics ig = bimg.getGraphics();\n-        Color alphared = new Color(255, 0, 0, 128);\n-        Color alphagreen = new Color(0, 255, 0, 128);\n-        Color alphablue = new Color(0, 0, 255, 128);\n-        ig.setColor(alphared);\n-        ig.fillRect(0,0,200,200);\n-        ig.setColor(alphagreen);\n-        ig.fillRect(25,25,150,150);\n-        ig.setColor(alphablue);\n-        ig.fillRect(75,75,125,125);\n-        g.drawImage(bimg, 10, 25, this);\n-\n-        GradientPaint gp =\n-         new GradientPaint(10.0f, 10.0f, alphablue, 210.0f, 210.0f, alphared, true);\n-        g2.setPaint(gp);\n-        g2.fillRect(10, 240, 200, 200);\n-\n-     }\n-\n-    public Dimension getPreferredSize() {\n-        return new Dimension(500, 500);\n-    }\n+    public void actionPerformed(ActionEvent e) {\n@@ -151,1 +102,1 @@\n- }\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n@@ -153,27 +104,10 @@\n-}\n-\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n+        if (pj != null && pj.printDialog()) {\n+            pj.setPrintable(c);\n+            try {\n+                pj.print();\n+            } catch (PrinterException pe) {\n+                pe.printStackTrace();\n+            } finally {\n+                System.out.println(\"PRINT RETURNED\");\n+            }\n+        }\n@@ -182,4 +116,49 @@\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n+    static class RasterCanvas extends Canvas implements Printable {\n+\n+        public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n+            if (pgIndex > 0)\n+                return Printable.NO_SUCH_PAGE;\n+\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n+            doPaint(g2d);\n+            return Printable.PAGE_EXISTS;\n+        }\n+\n+        public void paint(Graphics g) {\n+            doPaint(g);\n+        }\n+\n+        public void paintComponent(Graphics g) {\n+            doPaint(g);\n+        }\n+\n+        public void doPaint(Graphics g) {\n+            Graphics2D g2 = (Graphics2D) g;\n+\n+            g2.setColor(Color.black);\n+\n+            BufferedImage bimg = new BufferedImage(200, 200,\n+                    BufferedImage.TYPE_INT_ARGB);\n+            Graphics ig = bimg.getGraphics();\n+            Color alphared = new Color(255, 0, 0, 128);\n+            Color alphagreen = new Color(0, 255, 0, 128);\n+            Color alphablue = new Color(0, 0, 255, 128);\n+            ig.setColor(alphared);\n+            ig.fillRect(0, 0, 200, 200);\n+            ig.setColor(alphagreen);\n+            ig.fillRect(25, 25, 150, 150);\n+            ig.setColor(alphablue);\n+            ig.fillRect(75, 75, 125, 125);\n+            g.drawImage(bimg, 10, 25, this);\n+\n+            GradientPaint gp =\n+                    new GradientPaint(10.0f, 10.0f, alphablue, 210.0f, 210.0f, alphared, true);\n+            g2.setPaint(gp);\n+            g2.fillRect(10, 240, 200, 200);\n+\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return new Dimension(500, 500);\n+        }\n@@ -187,82 +166,1 @@\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/raster\/RasterTest.java","additions":122,"deletions":224,"binary":false,"changes":346,"status":"modified"}]}