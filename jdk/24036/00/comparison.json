{"files":[{"patch":"@@ -339,1 +339,1 @@\n-void LogConfiguration::configure_stdout(LogLevelType level, int exact_match, ...) {\n+LogSelectionList LogConfiguration::create_selection_list(LogLevelType level, int exact_match, va_list ap) {\n@@ -341,1 +341,0 @@\n-  va_list ap;\n@@ -343,1 +342,0 @@\n-  va_start(ap, exact_match);\n@@ -354,1 +352,0 @@\n-  va_end(ap);\n@@ -358,2 +355,23 @@\n-         \"configure_stdout() called with invalid\/non-existing log selection\");\n-  LogSelectionList list(selection);\n+         \"create_selection_list() called with invalid\/non-existing log selection\");\n+  return LogSelectionList(selection);\n+}\n+\n+void LogConfiguration::disable_tags(int exact_match, ...) {\n+  va_list ap;\n+  va_start(ap, exact_match);\n+  LogSelectionList list = create_selection_list(LogLevel::Off, exact_match, ap);\n+  va_end(ap);\n+\n+  \/\/ Apply configuration to all outputs, with the same decorators as before.\n+  ConfigurationLock cl;\n+  for (size_t i = 0; i < _n_outputs; i++) {\n+    configure_output(i, list, _outputs[i]->decorators());\n+  }\n+  notify_update_listeners();\n+}\n+\n+void LogConfiguration::configure_stdout(LogLevelType level, int exact_match, ...) {\n+  va_list ap;\n+  va_start(ap, exact_match);\n+  LogSelectionList list = create_selection_list(level, exact_match, ap);\n+  va_end(ap);\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -100,0 +100,2 @@\n+  \/\/ Create a LogSelectionList given a level and a set of tags\n+  static LogSelectionList create_selection_list(LogLevelType level, int exact_match, va_list ap);\n@@ -112,0 +114,7 @@\n+  \/\/ Disables logging on all outputs for the given tags.\n+  \/\/ If exact_match is true, only tagsets with precisely the specified tags will be disabled\n+  \/\/ (exact_match=false is the same as \"-Xlog:<tags>*=off\", and exact_match=true is \"-Xlog:<tags>=off\").\n+  \/\/ Tags should be specified using the LOG_TAGS macro, e.g.\n+  \/\/ LogConfiguration::disable_tags(<true\/false>, LOG_TAGS(<tags>));\n+  static void disable_tags(int exact_match, ...);\n+\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3803,1 +3803,2 @@\n-      LogConfiguration::configure_stdout(LogLevel::Off, false, LOG_TAGS(perf, class, link));\n+      LogConfiguration::disable_tags(false, LOG_TAGS(perf, class, link));\n+      assert(!log_is_enabled(Info, perf, class, link), \"sanity\");\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -219,0 +219,26 @@\n+TEST_VM_F(LogConfigurationTest, disable_tags) {\n+  set_log_config(\"stdout\", \"logging*=info\");\n+  set_log_config(TestLogFileName, \"logging*=info\");\n+\n+  EXPECT_TRUE(log_is_enabled(Info, logging, gc));\n+  LogConfiguration::disable_tags(true, LOG_TAGS(logging, gc));\n+  EXPECT_FALSE(log_is_enabled(Info, logging, gc));\n+  EXPECT_TRUE(log_is_enabled(Info, logging));\n+\n+  set_log_config(\"stdout\", \"logging*=info\");\n+  set_log_config(TestLogFileName, \"logging*=info\");\n+\n+  EXPECT_TRUE(log_is_enabled(Info, logging));\n+  LogConfiguration::disable_tags(true, LOG_TAGS(logging));\n+  EXPECT_TRUE(log_is_enabled(Info, logging, gc));\n+  EXPECT_FALSE(log_is_enabled(Info, logging));\n+\n+  set_log_config(\"stdout\", \"logging*=info\");\n+  set_log_config(TestLogFileName, \"logging*=info\");\n+\n+  EXPECT_TRUE(log_is_enabled(Info, logging));\n+  LogConfiguration::disable_tags(false, LOG_TAGS(logging));\n+  EXPECT_FALSE(log_is_enabled(Info, logging, gc));\n+  EXPECT_FALSE(log_is_enabled(Info, logging));\n+}\n+\n","filename":"test\/hotspot\/gtest\/logging\/test_logConfiguration.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}