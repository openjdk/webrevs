{"files":[{"patch":"@@ -179,1 +179,3 @@\n-\n+long os::Linux::_release_major = -1;\n+long os::Linux::_release_minor = -1;\n+bool os::Linux::_is_uek_release{false};\n@@ -370,4 +372,1 @@\n-void os::Linux::kernel_version(long* major, long* minor) {\n-  *major = -1;\n-  *minor = -1;\n-\n+void os::Linux::version_init() {\n@@ -382,2 +381,2 @@\n-  long* set_v = major;\n-  while (*minor == -1 && walker != nullptr) {\n+  long* set_v = &_release_major;\n+  while (_release_minor == -1 && walker != nullptr) {\n@@ -386,1 +385,1 @@\n-      set_v = minor;\n+      set_v = &_release_minor;\n@@ -391,0 +390,9 @@\n+\n+  while ((walker = strstr(walker, \".el\"))) {\n+    if (sscanf(walker, \".el%duek.\", &ret) == 1) {\n+      _is_uek_release = true;\n+      break;\n+    } else {\n+      walker += 3;\n+    }\n+  }\n@@ -3069,5 +3077,11 @@\n-      return os::vm_page_size();\n-    } else if (err != 0) {\n-      log_info(gc, os)(\"::madvise(\" PTR_FORMAT \", \" SIZE_FORMAT \", %d) failed; \"\n-                       \"error='%s' (errno=%d)\", p2i(first), len,\n-                       MADV_POPULATE_WRITE, os::strerror(err), err);\n+      page_size = os::vm_page_size();\n+    } else if (err == 0) {\n+      page_size = 0;\n+    }\n+    if (UseMadvPopulateWrite) {\n+      log_debug(gc, os)(\"Called madvise(\" PTR_FORMAT \", \" SIZE_FORMAT \", %d):\"\n+                        \" error='%s' (errno=%d), when THPMode::always=%d and\"\n+                        \" UseTransparentHugePages=%d\",\n+                        p2i(first), len, MADV_POPULATE_WRITE, os::strerror(err),\n+                        err, (int)(HugePages::thp_mode() == THPMode::always),\n+                        (int)UseTransparentHugePages);\n@@ -3075,1 +3089,0 @@\n-    return 0;\n@@ -4555,3 +4568,1 @@\n-\n-  \/\/ Check the availability of MADV_POPULATE_WRITE.\n-  FLAG_SET_DEFAULT(UseMadvPopulateWrite, (::madvise(0, 0, MADV_POPULATE_WRITE) == 0));\n+  Linux::version_init();\n@@ -4835,0 +4846,10 @@\n+  \/\/ Check the availability of MADV_POPULATE_WRITE.\n+  if (FLAG_IS_DEFAULT(UseMadvPopulateWrite) && UseMadvPopulateWrite) {\n+    \/\/ Some uek releases recognize MADV_POPULATE_WRITE_value as another advice,\n+    \/\/ so a trick for uek releases is required.\n+    \/\/ See https:\/\/github.com\/oracle\/linux-uek\/issues\/23\n+    const int flag = MADV_POPULATE_WRITE + (os::Linux::_is_uek_release ? 1 : 0);\n+    FLAG_SET_DEFAULT(UseMadvPopulateWrite, (::madvise(0, 0, flag) == 0));\n+  }\n+  log_debug(gc, os)(\"UseMadvPopulateWrite=%d\", (int)(UseMadvPopulateWrite ? 1 : 0));\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":38,"deletions":17,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -46,0 +46,3 @@\n+  static long _release_major;\n+  static long _release_minor;\n+\n@@ -55,0 +58,1 @@\n+  static bool _is_uek_release;\n@@ -69,0 +73,1 @@\n+  static void version_init();\n@@ -96,1 +101,4 @@\n-  static void kernel_version(long* major, long* minor);\n+  static void kernel_version(long* major, long* minor) {\n+    *major = _release_major;\n+    *minor = _release_minor;\n+  }\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-gc\/parallel\/TestAlwaysPreTouchBehavior.java 8325218 linux-all\n@@ -115,1 +114,0 @@\n-runtime\/Thread\/TestAlwaysPreTouchStacks.java 8324781 linux-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}