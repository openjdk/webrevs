{"files":[{"patch":"@@ -1269,1 +1269,0 @@\n-  guarantee(archive_space_size < G, \"weirdly large archive (\" SIZE_FORMAT \")\", archive_space_size);\n@@ -1318,0 +1317,1 @@\n+  guarantee(archive_space_size < max_encoding_range_size - class_space_alignment, \"Archive too large\");\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,34 @@\n- * @test\n+ * @test id=invalid\n+ * @bug 8022865\n+ * @summary Tests for the -XX:CompressedClassSpaceSize command line option\n+ * @requires vm.bits == 64 & vm.opt.final.UseCompressedOops == true\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc java.management\n+ * @run driver CompressedClassSpaceSize invalid\n+ *\/\n+\n+\/*\n+ * @test id=valid_small\n+ * @bug 8022865\n+ * @summary Tests for the -XX:CompressedClassSpaceSize command line option\n+ * @requires vm.bits == 64 & vm.opt.final.UseCompressedOops == true\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc java.management\n+ * @run driver CompressedClassSpaceSize valid_small\n+ *\/\n+\n+\/*\n+ * @test id=valid_large_nocds\n+ * @bug 8022865\n+ * @summary Tests for the -XX:CompressedClassSpaceSize command line option\n+ * @requires vm.bits == 64 & vm.opt.final.UseCompressedOops == true\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc java.management\n+ * @run driver CompressedClassSpaceSize valid_large_nocds\n+ *\/\n+\n+\/*\n+ * @test id=valid_large_cds\n@@ -31,3 +64,2 @@\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run driver CompressedClassSpaceSize\n+ * @modules java.base\/jdk.internal.misc java.management\n+ * @run driver CompressedClassSpaceSize valid_large_cds\n@@ -41,0 +73,11 @@\n+    final static long MB = 1024 * 1024;\n+\n+    final static long minAllowedClassSpaceSize = MB;\n+    final static long minRealClassSpaceSize = 16 * MB;\n+    final static long maxClassSpaceSize = 4096 * MB;\n+\n+    \/\/ For the valid_large_cds sub test: we need to have a notion of what archive size to\n+    \/\/ maximally expect, with a generous fudge factor to avoid having to tweak this test\n+    \/\/ ofent. Note: today's default archives are around 16-20 MB.\n+    final static long maxExpectedArchiveSize = 512 * MB;\n+\n@@ -44,6 +87,0 @@\n-        \/\/ Minimum size is 1MB\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=0\",\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"outside the allowed range\")\n-              .shouldHaveExitValue(1);\n@@ -51,6 +88,8 @@\n-        \/\/ Invalid size of -1 should be handled correctly\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=-1\",\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"Improperly specified VM option 'CompressedClassSpaceSize=-1'\")\n-              .shouldHaveExitValue(1);\n+        switch (args[0]) {\n+            case \"invalid\": {\n+                \/\/ < Minimum size\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=0\",\n+                        \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldContain(\"outside the allowed range\")\n+                        .shouldHaveExitValue(1);\n@@ -58,0 +97,6 @@\n+                \/\/ Invalid size of -1 should be handled correctly\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=-1\",\n+                        \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldContain(\"Improperly specified VM option 'CompressedClassSpaceSize=-1'\")\n+                        .shouldHaveExitValue(1);\n@@ -59,7 +104,6 @@\n-        \/\/ Maximum size is 4GB\n-        long max_class_space_size = 4L * 1024 * 1024 * 1024;\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + max_class_space_size + 1,\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"outside the allowed range\")\n-              .shouldHaveExitValue(1);\n+                \/\/ > Maximum size\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + maxClassSpaceSize + 1,\n+                        \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldContain(\"outside the allowed range\")\n+                        .shouldHaveExitValue(1);\n@@ -67,6 +111,36 @@\n-        \/\/ Without CDS, we should get 4G\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + max_class_space_size,\n-                \"-Xshare:off\", \"-Xlog:metaspace*\", \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldMatch(\"Compressed class space mapped at: 0x\\\\w+-0x\\\\w+, reserved size: \" + max_class_space_size)\n-                .shouldHaveExitValue(0);\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:-UseCompressedClassPointers\",\n+                        \"-XX:CompressedClassSpaceSize=\" + minAllowedClassSpaceSize,\n+                        \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldContain(\"Setting CompressedClassSpaceSize has no effect when compressed class pointers are not used\")\n+                        .shouldHaveExitValue(0);\n+            }\n+            break;\n+            case \"valid_small\": {\n+                \/\/ Make sure the minimum size is set correctly and printed\n+                \/\/ (Note: ccs size are rounded up to the next larger root chunk boundary (16m).\n+                \/\/ Note that this is **reserved** size and does not affect rss.\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n+                        \"-XX:CompressedClassSpaceSize=\" + minAllowedClassSpaceSize,\n+                        \"-Xlog:gc+metaspace\",\n+                        \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldMatch(\"Compressed class space.*\" + minRealClassSpaceSize)\n+                        .shouldHaveExitValue(0);\n+            }\n+            break;\n+            case \"valid_large_nocds\": {\n+                \/\/ Without CDS, we should get 4G\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + maxClassSpaceSize,\n+                        \"-Xshare:off\", \"-Xlog:metaspace*\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldMatch(\"Compressed class space.*\" + maxClassSpaceSize)\n+                        .shouldHaveExitValue(0);\n+            }\n+            break;\n+            case \"valid_large_cds\": {\n+                \/\/ Create archive\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+                        \"-XX:SharedArchiveFile=.\/abc.jsa\", \"-Xshare:dump\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldHaveExitValue(0);\n@@ -74,10 +148,12 @@\n-        \/\/ With CDS, class space should fill whatever the CDS archive leaves us (modulo alignment)\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + max_class_space_size,\n-                \"-Xshare:on\", \"-Xlog:metaspace*\", \"-version\");\n-        {\n-            output = new OutputAnalyzer(pb.start());\n-            long real_size = Long.parseLong(\n-                    output.firstMatch(\"reducing class space size from \" + max_class_space_size + \" to (\\\\d+)\", 1));\n-            if (real_size < max_class_space_size * 0.75) {\n-                output.reportDiagnosticSummary();\n-                throw new RuntimeException(\"Class space size too small?\");\n+                \/\/ With CDS, class space should fill whatever the CDS archive leaves us (modulo alignment)\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + maxClassSpaceSize,\n+                        \"-XX:SharedArchiveFile=.\/abc.jsa\", \"-Xshare:on\", \"-Xlog:metaspace*\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldHaveExitValue(0);\n+                long reducedSize = Long.parseLong(\n+                        output.firstMatch(\"reducing class space size from \" + maxClassSpaceSize + \" to (\\\\d+)\", 1));\n+                if (reducedSize < (maxClassSpaceSize - maxExpectedArchiveSize)) {\n+                    output.reportDiagnosticSummary();\n+                    throw new RuntimeException(\"Class space size too small?\");\n+                }\n+                output.shouldMatch(\"Compressed class space.*\" + reducedSize);\n@@ -85,2 +161,3 @@\n-            output.shouldMatch(\"Compressed class space mapped at: 0x\\\\w+-0x\\\\w+, reserved size: \" + real_size)\n-                    .shouldHaveExitValue(0);\n+            break;\n+            default:\n+                throw new RuntimeException(\"invalid sub test \" + args[0]);\n@@ -88,29 +165,0 @@\n-\n-        \/\/ Make sure the minimum size is set correctly and printed\n-        \/\/ (Note: ccs size are rounded up to the next larger root chunk boundary (16m).\n-        \/\/ Note that this is **reserved** size and does not affect rss.\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n-                                                              \"-XX:CompressedClassSpaceSize=1m\",\n-                                                              \"-Xlog:gc+metaspace\",\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldMatch(\"Compressed class space.*16777216\")\n-              .shouldHaveExitValue(0);\n-\n-\n-        \/\/ Make sure the maximum size is set correctly and printed\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n-                                                              \"-XX:CompressedClassSpaceSize=3g\",\n-                                                              \"-Xlog:gc+metaspace\",\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldMatch(\"Compressed class space.*3221225472\")\n-              .shouldHaveExitValue(0);\n-\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:-UseCompressedClassPointers\",\n-                                                              \"-XX:CompressedClassSpaceSize=1m\",\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"Setting CompressedClassSpaceSize has no effect when compressed class pointers are not used\")\n-              .shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassSpaceSize.java","additions":118,"deletions":70,"binary":false,"changes":188,"status":"modified"}]}