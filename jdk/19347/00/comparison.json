{"files":[{"patch":"@@ -1269,0 +1269,1 @@\n+  guarantee(archive_space_size < G, \"weirdly large archive (\" SIZE_FORMAT \")\", archive_space_size);\n@@ -1306,1 +1307,1 @@\n-  const size_t class_space_size = CompressedClassSpaceSize;\n+  size_t class_space_size = CompressedClassSpaceSize;\n@@ -1315,0 +1316,9 @@\n+  \/\/ Reduce class space size if it would not fit into the Klass encoding range\n+  constexpr size_t max_encoding_range_size = 4 * G;\n+  if ((archive_space_size + gap_size + class_space_size) > max_encoding_range_size) {\n+    class_space_size = align_down(max_encoding_range_size - archive_space_size - gap_size, class_space_alignment);\n+    log_info(metaspace)(\"CDS initialization: reducing class space size from \" SIZE_FORMAT \" to \" SIZE_FORMAT,\n+        CompressedClassSpaceSize, class_space_size);\n+    FLAG_SET_ERGO(CompressedClassSpaceSize, class_space_size);\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1397,1 +1397,1 @@\n-          range(1*M, 3*G)                                                   \\\n+          range(1*M, LP64_ONLY(4*G) NOT_LP64(max_uintx))                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.bits == 64 & vm.opt.final.UseCompressedOops == true\n+ * @requires vm.bits == 64 & vm.opt.final.UseCompressedOops == true & vm.cds\n@@ -59,2 +59,3 @@\n-        \/\/ Maximum size is 3GB\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=4g\",\n+        \/\/ Maximum size is 4GB\n+        long max_class_space_size = 4L * 1024 * 1024 * 1024;\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + max_class_space_size + 1,\n@@ -66,0 +67,21 @@\n+        \/\/ Without CDS, we should get 4G\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + max_class_space_size,\n+                \"-Xshare:off\", \"-Xlog:metaspace*\", \"-version\");\n+        output = new OutputAnalyzer(pb.start());\n+        output.shouldMatch(\"Compressed class space mapped at: 0x\\\\w+-0x\\\\w+, reserved size: \" + max_class_space_size)\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ With CDS, class space should fill whatever the CDS archive leaves us (modulo alignment)\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + max_class_space_size,\n+                \"-Xshare:on\", \"-Xlog:metaspace*\", \"-version\");\n+        {\n+            output = new OutputAnalyzer(pb.start());\n+            long real_size = Long.parseLong(\n+                    output.firstMatch(\"reducing class space size from \" + max_class_space_size + \" to (\\\\d+)\", 1));\n+            if (real_size < max_class_space_size * 0.75) {\n+                output.reportDiagnosticSummary();\n+                throw new RuntimeException(\"Class space size too small?\");\n+            }\n+            output.shouldMatch(\"Compressed class space mapped at: 0x\\\\w+-0x\\\\w+, reserved size: \" + real_size)\n+                    .shouldHaveExitValue(0);\n+        }\n@@ -72,1 +94,1 @@\n-                                                              \"-Xlog:gc+metaspace=trace\",\n+                                                              \"-Xlog:gc+metaspace\",\n@@ -82,1 +104,1 @@\n-                                                              \"-Xlog:gc+metaspace=trace\",\n+                                                              \"-Xlog:gc+metaspace\",\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassSpaceSize.java","additions":27,"deletions":5,"binary":false,"changes":32,"status":"modified"}]}