{"files":[{"patch":"@@ -1306,1 +1306,1 @@\n-  const size_t class_space_size = CompressedClassSpaceSize;\n+  size_t class_space_size = CompressedClassSpaceSize;\n@@ -1315,0 +1315,10 @@\n+  \/\/ Reduce class space size if it would not fit into the Klass encoding range\n+  constexpr size_t max_encoding_range_size = 4 * G;\n+  guarantee(archive_space_size < max_encoding_range_size - class_space_alignment, \"Archive too large\");\n+  if ((archive_space_size + gap_size + class_space_size) > max_encoding_range_size) {\n+    class_space_size = align_down(max_encoding_range_size - archive_space_size - gap_size, class_space_alignment);\n+    log_info(metaspace)(\"CDS initialization: reducing class space size from \" SIZE_FORMAT \" to \" SIZE_FORMAT,\n+        CompressedClassSpaceSize, class_space_size);\n+    FLAG_SET_ERGO(CompressedClassSpaceSize, class_space_size);\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1399,1 +1399,1 @@\n-          range(1*M, 3*G)                                                   \\\n+          range(1*M, LP64_ONLY(4*G) NOT_LP64(max_uintx))                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=invalid\n@@ -31,3 +31,35 @@\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run driver CompressedClassSpaceSize\n+ * @modules java.base\/jdk.internal.misc java.management\n+ * @run driver CompressedClassSpaceSize invalid\n+ *\/\n+\n+\/*\n+ * @test id=valid_small\n+ * @bug 8022865\n+ * @summary Tests for the -XX:CompressedClassSpaceSize command line option\n+ * @requires vm.bits == 64 & vm.opt.final.UseCompressedOops == true\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc java.management\n+ * @run driver CompressedClassSpaceSize valid_small\n+ *\/\n+\n+\/*\n+ * @test id=valid_large_nocds\n+ * @bug 8022865\n+ * @summary Tests for the -XX:CompressedClassSpaceSize command line option\n+ * @requires vm.bits == 64 & vm.opt.final.UseCompressedOops == true\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc java.management\n+ * @run driver CompressedClassSpaceSize valid_large_nocds\n+ *\/\n+\n+\/*\n+ * @test id=valid_large_cds\n+ * @bug 8022865\n+ * @summary Tests for the -XX:CompressedClassSpaceSize command line option\n+ * @requires vm.bits == 64 & vm.opt.final.UseCompressedOops == true & vm.cds\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc java.management\n+ * @run driver CompressedClassSpaceSize valid_large_cds\n@@ -41,16 +73,1 @@\n-    public static void main(String[] args) throws Exception {\n-        ProcessBuilder pb;\n-        OutputAnalyzer output;\n-        \/\/ Minimum size is 1MB\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=0\",\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"outside the allowed range\")\n-              .shouldHaveExitValue(1);\n-\n-        \/\/ Invalid size of -1 should be handled correctly\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=-1\",\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"Improperly specified VM option 'CompressedClassSpaceSize=-1'\")\n-              .shouldHaveExitValue(1);\n+    final static long MB = 1024 * 1024;\n@@ -58,0 +75,3 @@\n+    final static long minAllowedClassSpaceSize = MB;\n+    final static long minRealClassSpaceSize = 16 * MB;\n+    final static long maxClassSpaceSize = 4096 * MB;\n@@ -59,6 +79,4 @@\n-        \/\/ Maximum size is 3GB\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=4g\",\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"outside the allowed range\")\n-              .shouldHaveExitValue(1);\n+    \/\/ For the valid_large_cds sub test: we need to have a notion of what archive size to\n+    \/\/ maximally expect, with a generous fudge factor to avoid having to tweak this test\n+    \/\/ ofent. Note: today's default archives are around 16-20 MB.\n+    final static long maxExpectedArchiveSize = 512 * MB;\n@@ -66,0 +84,3 @@\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer output;\n@@ -67,10 +88,8 @@\n-        \/\/ Make sure the minimum size is set correctly and printed\n-        \/\/ (Note: ccs size are rounded up to the next larger root chunk boundary (16m).\n-        \/\/ Note that this is **reserved** size and does not affect rss.\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n-                                                              \"-XX:CompressedClassSpaceSize=1m\",\n-                                                              \"-Xlog:gc+metaspace=trace\",\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldMatch(\"Compressed class space.*16777216\")\n-              .shouldHaveExitValue(0);\n+        switch (args[0]) {\n+            case \"invalid\": {\n+                \/\/ < Minimum size\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=0\",\n+                        \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldContain(\"outside the allowed range\")\n+                        .shouldHaveExitValue(1);\n@@ -78,0 +97,6 @@\n+                \/\/ Invalid size of -1 should be handled correctly\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=-1\",\n+                        \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldContain(\"Improperly specified VM option 'CompressedClassSpaceSize=-1'\")\n+                        .shouldHaveExitValue(1);\n@@ -79,8 +104,6 @@\n-        \/\/ Make sure the maximum size is set correctly and printed\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n-                                                              \"-XX:CompressedClassSpaceSize=3g\",\n-                                                              \"-Xlog:gc+metaspace=trace\",\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldMatch(\"Compressed class space.*3221225472\")\n-              .shouldHaveExitValue(0);\n+                \/\/ > Maximum size\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + maxClassSpaceSize + 1,\n+                        \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldContain(\"outside the allowed range\")\n+                        .shouldHaveExitValue(1);\n@@ -88,0 +111,36 @@\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:-UseCompressedClassPointers\",\n+                        \"-XX:CompressedClassSpaceSize=\" + minAllowedClassSpaceSize,\n+                        \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldContain(\"Setting CompressedClassSpaceSize has no effect when compressed class pointers are not used\")\n+                        .shouldHaveExitValue(0);\n+            }\n+            break;\n+            case \"valid_small\": {\n+                \/\/ Make sure the minimum size is set correctly and printed\n+                \/\/ (Note: ccs size are rounded up to the next larger root chunk boundary (16m).\n+                \/\/ Note that this is **reserved** size and does not affect rss.\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\",\n+                        \"-XX:CompressedClassSpaceSize=\" + minAllowedClassSpaceSize,\n+                        \"-Xlog:gc+metaspace\",\n+                        \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldMatch(\"Compressed class space.*\" + minRealClassSpaceSize)\n+                        .shouldHaveExitValue(0);\n+            }\n+            break;\n+            case \"valid_large_nocds\": {\n+                \/\/ Without CDS, we should get 4G\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + maxClassSpaceSize,\n+                        \"-Xshare:off\", \"-Xlog:metaspace*\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldMatch(\"Compressed class space.*\" + maxClassSpaceSize)\n+                        .shouldHaveExitValue(0);\n+            }\n+            break;\n+            case \"valid_large_cds\": {\n+                \/\/ Create archive\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+                        \"-XX:SharedArchiveFile=.\/abc.jsa\", \"-Xshare:dump\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldHaveExitValue(0);\n@@ -89,6 +148,17 @@\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:-UseCompressedClassPointers\",\n-                                                              \"-XX:CompressedClassSpaceSize=1m\",\n-                                                              \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"Setting CompressedClassSpaceSize has no effect when compressed class pointers are not used\")\n-              .shouldHaveExitValue(0);\n+                \/\/ With CDS, class space should fill whatever the CDS archive leaves us (modulo alignment)\n+                pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-XX:CompressedClassSpaceSize=\" + maxClassSpaceSize,\n+                        \"-XX:SharedArchiveFile=.\/abc.jsa\", \"-Xshare:on\", \"-Xlog:metaspace*\", \"-version\");\n+                output = new OutputAnalyzer(pb.start());\n+                output.shouldHaveExitValue(0);\n+                long reducedSize = Long.parseLong(\n+                        output.firstMatch(\"reducing class space size from \" + maxClassSpaceSize + \" to (\\\\d+)\", 1));\n+                if (reducedSize < (maxClassSpaceSize - maxExpectedArchiveSize)) {\n+                    output.reportDiagnosticSummary();\n+                    throw new RuntimeException(\"Class space size too small?\");\n+                }\n+                output.shouldMatch(\"Compressed class space.*\" + reducedSize);\n+            }\n+            break;\n+            default:\n+                throw new RuntimeException(\"invalid sub test \" + args[0]);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassSpaceSize.java","additions":120,"deletions":50,"binary":false,"changes":170,"status":"modified"}]}