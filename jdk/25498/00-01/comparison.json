{"files":[{"patch":"@@ -1151,1 +1151,2 @@\n-     * Gets the {@link ResolvedJavaMethod}s for all non-overpass and non-initializer methods of {@code klass}.\n+     * Gets the {@link ResolvedJavaMethod}s for all non-overpass and non-initializer\n+     * methods of {@code klass}.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -577,3 +577,3 @@\n-     * Currently in hotspot a method can either be a \"normal\" or an \"overpass\" method.\n-     * Overpass methods are instance methods which are created when otherwise a valid candidate\n-     * for method resolution would not be found.\n+     * Currently in hotspot a method can either be a \"normal\" or an \"overpass\"\n+     * method. Overpass methods are instance methods which are created when\n+     * otherwise a valid candidate for method resolution would not be found.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethodImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -370,4 +370,5 @@\n-     * Returns a list containing all methods present within this type. This list can include\n-     * methods implicitly created and used by the VM that are not present in {@link #getDeclaredMethods}.\n-     * The returned List is unmodifiable; calls to any mutator method\n-     * will always cause {@code UnsupportedOperationException} to be thrown.\n+     * Returns a list containing all methods present within this type. This list can\n+     * include methods implicitly created and used by the VM that are not present in\n+     * {@link #getDeclaredMethods}. The returned List is unmodifiable; calls to any\n+     * mutator method will always cause {@code UnsupportedOperationException} to be\n+     * thrown.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ResolvedJavaType.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1027,6 +1027,4 @@\n-            boolean included = Arrays.stream(type.getDeclaredMethods()).allMatch(m -> allMethods.contains(m));\n-            included = included && Arrays.stream(type.getDeclaredConstructors()).allMatch(m -> allMethods.contains(m));\n-            if (included && type.getClassInitializer() != null) {\n-                included = allMethods.contains(type.getClassInitializer());\n-            }\n-            assertTrue(included);\n+            Stream<ResolvedJavaMethod> allKnownMethods = Stream.concat(Arrays.stream(type.getDeclaredMethods()), Arrays.stream(type.getDeclaredConstructors()));\n+            allKnownMethods = Stream.concat(allKnownMethods, Stream.ofNullable(type.getClassInitializer()));\n+            List<ResolvedJavaMethod> missingMethods = allKnownMethods.filter(m -> !allMethods.contains(m)).toList();\n+            assertTrue(missingMethods.toString(), missingMethods.isEmpty());\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaType.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}