{"files":[{"patch":"@@ -1183,32 +1183,36 @@\n-      InstanceKlass* method_holder = target->method_holder();\n-      InstanceKlass* interf = interface_method->method_holder();\n-      HandleMark hm(THREAD);\n-      Handle method_holder_loader(THREAD, method_holder->class_loader());\n-      Handle interface_loader(THREAD, interf->class_loader());\n-\n-      if (method_holder_loader() != interface_loader()) {\n-        ResourceMark rm(THREAD);\n-        Symbol* failed_type_symbol =\n-          SystemDictionary::check_signature_loaders(target->signature(),\n-                                                    _klass,\n-                                                    method_holder_loader,\n-                                                    interface_loader,\n-                                                    true);\n-        if (failed_type_symbol != nullptr) {\n-          stringStream ss;\n-          ss.print(\"loader constraint violation in interface itable\"\n-                   \" initialization for class %s: when selecting method '\",\n-                   _klass->external_name());\n-          interface_method->print_external_name(&ss),\n-          ss.print(\"' the class loader %s for super interface %s, and the class\"\n-                   \" loader %s of the selected method's %s, %s have\"\n-                   \" different Class objects for the type %s used in the signature (%s; %s)\",\n-                   interf->class_loader_data()->loader_name_and_id(),\n-                   interf->external_name(),\n-                   method_holder->class_loader_data()->loader_name_and_id(),\n-                   method_holder->external_kind(),\n-                   method_holder->external_name(),\n-                   failed_type_symbol->as_klass_external_name(),\n-                   interf->class_in_module_of_loader(false, true),\n-                   method_holder->class_in_module_of_loader(false, true));\n-          THROW_MSG(vmSymbols::java_lang_LinkageError(), ss.as_string());\n+      \/\/ Do not check loader constraints for overpass methods because overpass\n+      \/\/ methods are created by the jvm to throw exceptions.\n+      if (!target->is_overpass()) {\n+        InstanceKlass* method_holder = target->method_holder();\n+        InstanceKlass* interf = interface_method->method_holder();\n+        HandleMark hm(THREAD);\n+        Handle method_holder_loader(THREAD, method_holder->class_loader());\n+        Handle interface_loader(THREAD, interf->class_loader());\n+\n+        if (method_holder_loader() != interface_loader()) {\n+          ResourceMark rm(THREAD);\n+          Symbol* failed_type_symbol =\n+            SystemDictionary::check_signature_loaders(target->signature(),\n+                                                      _klass,\n+                                                      method_holder_loader,\n+                                                      interface_loader,\n+                                                      true);\n+          if (failed_type_symbol != nullptr) {\n+            stringStream ss;\n+            ss.print(\"loader constraint violation in interface itable\"\n+                     \" initialization for class %s: when selecting method '\",\n+                     _klass->external_name());\n+            interface_method->print_external_name(&ss),\n+              ss.print(\"' the class loader %s for super interface %s, and the class\"\n+                       \" loader %s of the selected method's %s, %s have\"\n+                       \" different Class objects for the type %s used in the signature (%s; %s)\",\n+                       interf->class_loader_data()->loader_name_and_id(),\n+                       interf->external_name(),\n+                       method_holder->class_loader_data()->loader_name_and_id(),\n+                       method_holder->external_kind(),\n+                       method_holder->external_name(),\n+                       failed_type_symbol->as_klass_external_name(),\n+                       interf->class_in_module_of_loader(false, true),\n+                       method_holder->class_in_module_of_loader(false, true));\n+            THROW_MSG(vmSymbols::java_lang_LinkageError(), ss.as_string());\n+          }\n@@ -1336,3 +1340,1 @@\n-    if (target == nullptr || !target->is_public() || target->is_abstract() || target->is_overpass()) {\n-      assert(target == nullptr || !target->is_overpass() || target->is_public(),\n-             \"Non-public overpass method!\");\n+    if (target == nullptr || !target->is_public() || target->is_abstract()) {\n@@ -1340,1 +1342,1 @@\n-      if (!(target == nullptr) && !target->is_public()) {\n+      if (target != nullptr && !target->is_public()) {\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":38,"deletions":36,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -85,0 +85,2 @@\n+     * TEST: I c = new C(); c.m() ==> ICCE\n+     * TEST: J c = new C(); c.m() ==> ICCE\n@@ -98,1 +100,7 @@\n-                .throws_(IncompatibleClassChangeError.class)\n+                .throwsExact(IncompatibleClassChangeError.class)\n+            .done()\n+         .test().callSite(I, C, \"m\",\"()I\")\n+                .throwsExact(IncompatibleClassChangeError.class)\n+            .done()\n+         .test().callSite(J, C, \"m\",\"()I\")\n+                .throwsExact(IncompatibleClassChangeError.class)\n@@ -148,1 +156,1 @@\n-                .throws_(AbstractMethodError.class)\n+                .throwsExact(AbstractMethodError.class)\n@@ -180,1 +188,1 @@\n-                .throws_(AbstractMethodError.class)\n+                .throwsExact(AbstractMethodError.class)\n@@ -183,1 +191,1 @@\n-                .throws_(AbstractMethodError.class)\n+                .throwsExact(AbstractMethodError.class)\n@@ -186,1 +194,1 @@\n-                .throws_(AbstractMethodError.class)\n+                .throwsExact(AbstractMethodError.class)\n@@ -189,1 +197,1 @@\n-                .throws_(AbstractMethodError.class)\n+                .throwsExact(AbstractMethodError.class)\n@@ -221,1 +229,1 @@\n-                .throws_(AbstractMethodError.class)\n+                .throwsExact(AbstractMethodError.class)\n@@ -262,1 +270,1 @@\n-                .throws_(IncompatibleClassChangeError.class)\n+                .throwsExact(IncompatibleClassChangeError.class)\n@@ -265,1 +273,1 @@\n-                .throws_(AbstractMethodError.class)\n+                .throwsExact(AbstractMethodError.class)\n@@ -268,1 +276,1 @@\n-                .throws_(AbstractMethodError.class)\n+                .throwsExact(AbstractMethodError.class)\n@@ -310,1 +318,1 @@\n-                .throws_(IncompatibleClassChangeError.class)\n+                .throwsExact(IncompatibleClassChangeError.class)\n@@ -313,1 +321,1 @@\n-                .throws_(AbstractMethodError.class)\n+                .throwsExact(AbstractMethodError.class)\n@@ -373,1 +381,1 @@\n-                 .throws_(expectedError2)\n+                 .throwsExact(expectedError2)\n@@ -376,1 +384,1 @@\n-                 .throws_(expectedError2)\n+                 .throwsExact(expectedError2)\n@@ -379,1 +387,1 @@\n-                 .throws_(expectedError1)\n+                 .throwsExact(expectedError1)\n@@ -382,1 +390,1 @@\n-                 .throws_(expectedError1)\n+                 .throwsExact(expectedError1)\n@@ -385,1 +393,1 @@\n-                 .throws_(expectedError2)\n+                 .throwsExact(expectedError2)\n@@ -388,1 +396,1 @@\n-                 .throws_(expectedError2)\n+                 .throwsExact(expectedError2)\n@@ -489,1 +497,1 @@\n-                .throws_(NoSuchMethodError.class)\n+                .throwsExact(NoSuchMethodError.class)\n@@ -495,1 +503,1 @@\n-                .throws_(NoSuchMethodError.class)\n+                .throwsExact(NoSuchMethodError.class)\n@@ -542,1 +550,1 @@\n-                .throws_(IncompatibleClassChangeError.class)\n+                .throwsExact(IncompatibleClassChangeError.class)\n@@ -548,1 +556,1 @@\n-                .throws_(IncompatibleClassChangeError.class)\n+                .throwsExact(IncompatibleClassChangeError.class)\n@@ -554,1 +562,1 @@\n-                .throws_(IncompatibleClassChangeError.class)\n+                .throwsExact(IncompatibleClassChangeError.class)\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/runtime\/defmeth\/ConflictingDefaultsTest.java","additions":31,"deletions":23,"binary":false,"changes":54,"status":"modified"}]}