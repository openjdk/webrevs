{"files":[{"patch":"@@ -74,1 +74,1 @@\n-    const K _key;\n+    K _key;\n@@ -87,0 +87,1 @@\n+    RBNode() {}\n@@ -147,0 +148,1 @@\n+    K _key;\n@@ -148,2 +150,4 @@\n-    Cursor(RBNode** insert_location, RBNode* parent) : _insert_location(insert_location), _parent(parent) {}\n-    Cursor(RBNode* const* insert_location, RBNode* parent) : _insert_location((RBNode**)insert_location), _parent(parent) {}\n+    Cursor(RBNode** insert_location, RBNode* parent, const K& key)\n+        : _insert_location(insert_location), _parent(parent), _key(key) {}\n+    Cursor(RBNode* const* insert_location, RBNode* parent, const K& key)\n+        : _insert_location((RBNode**)insert_location), _parent(parent), _key(key) {}\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-  return Cursor(insert_location, parent);\n+  return Cursor(insert_location, parent, key);\n@@ -219,1 +219,0 @@\n-  node->set_parent(cursor._parent);\n@@ -222,0 +221,6 @@\n+  node->set_parent(cursor._parent);\n+  node->set_red();\n+  node->_left = nullptr;\n+  node->_right = nullptr;\n+  node->_key = cursor._key;\n+\n@@ -478,1 +483,1 @@\n-    return Cursor(&_root, nullptr);\n+    return Cursor(&_root, nullptr, node->key());\n@@ -484,1 +489,1 @@\n-  return Cursor(insert_location, parent);\n+  return Cursor(insert_location, parent, node->key());\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -82,1 +82,15 @@\n-using RBTreeInt = RBTreeCHeap<int, int, Cmp, mtOther>;\n+  using RBTreeInt = RBTreeCHeap<int, int, Cmp, mtOther>;\n+  using IntrusiveTreeInt = IntrusiveRBTree<int, Cmp>;\n+  using IntrusiveNode = IntrusiveTreeInt::RBNode;\n+  using IntrusiveCursor = IntrusiveTreeInt::Cursor;\n+\n+  struct IntrusiveHolder {\n+    IntrusiveNode node;\n+    int data;\n+\n+    IntrusiveNode* get_node() { return &node; }\n+\n+    IntrusiveHolder() {}\n+    IntrusiveHolder(int data) : data(data) {}\n+    static IntrusiveHolder* cast_to_self(IntrusiveNode* node) { return (IntrusiveHolder*)node; }\n+  };\n@@ -465,0 +479,47 @@\n+  void test_cursor_find() {\n+    constexpr const int num_nodes = 10;\n+    RBTreeInt tree;\n+\n+    for (int n = 0; n <= num_nodes; n++) {\n+      RBTreeInt::Cursor find_cursor = tree.cursor_find(n);\n+      EXPECT_FALSE(find_cursor.found());\n+    }\n+\n+    for (int n = 0; n <= num_nodes; n++) {\n+      tree.upsert(n, n);\n+    }\n+\n+    for (int n = 0; n <= num_nodes; n++) {\n+      RBTreeInt::Cursor find_cursor = tree.cursor_find(n);\n+      EXPECT_TRUE(find_cursor.found());\n+    }\n+\n+    EXPECT_FALSE(tree.cursor_find(-1).found());\n+    EXPECT_FALSE(tree.cursor_find(101).found());\n+  }\n+\n+  void test_get_cursor() {\n+    constexpr const int num_nodes = 10;\n+    IntrusiveTreeInt tree;\n+    GrowableArrayCHeap<IntrusiveHolder*, mtTest> nodes(num_nodes);\n+\n+    for (int n = 0; n <= num_nodes; n++) {\n+      IntrusiveHolder* place = (IntrusiveHolder*)os::malloc(sizeof(IntrusiveHolder), mtTest);\n+      new (place) IntrusiveHolder(n);\n+\n+      tree.insert_at_cursor(place->get_node(), tree.cursor_find(n));\n+      nodes.push(place);\n+    }\n+\n+    for (int n = 0; n <= num_nodes; n++) {\n+      IntrusiveNode* node = nodes.at(n)->get_node();\n+      IntrusiveCursor get_cursor = tree.get_cursor(node);\n+      IntrusiveCursor find_cursor = tree.cursor_find(n);\n+      EXPECT_TRUE(get_cursor.found());\n+      EXPECT_TRUE(get_cursor.valid());\n+      EXPECT_TRUE(find_cursor.found());\n+      EXPECT_TRUE(find_cursor.valid());\n+      EXPECT_EQ(get_cursor.node(), find_cursor.node());\n+    }\n+  }\n+\n@@ -548,14 +609,1 @@\n-    using Tree = IntrusiveRBTree<int, Cmp>;\n-    using Node = Tree::RBNode;\n-\n-    struct IntrusiveHolder {\n-      Node node;\n-      int data;\n-\n-      Node* get_node() { return &node; }\n-\n-      IntrusiveHolder(int data, Node node) : node(node), data(data) {}\n-      static IntrusiveHolder* cast_to_self(Node* node) { return (IntrusiveHolder*)node; }\n-    };\n-\n-    Tree intrusive_tree;\n+    IntrusiveTreeInt intrusive_tree;\n@@ -566,1 +614,1 @@\n-      Tree::Cursor cursor = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor = intrusive_tree.cursor_find(n);\n@@ -571,1 +619,1 @@\n-      new (place) IntrusiveHolder(n, Node(n));\n+      new (place) IntrusiveHolder(n);\n@@ -574,1 +622,1 @@\n-      Tree::Cursor cursor2 = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor2 = intrusive_tree.cursor_find(n);\n@@ -583,1 +631,1 @@\n-      Tree::Cursor cursor = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor = intrusive_tree.cursor_find(n);\n@@ -590,1 +638,1 @@\n-      Tree::Cursor cursor = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor = intrusive_tree.cursor_find(n);\n@@ -594,1 +642,1 @@\n-      Tree::Cursor cursor2 = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor2 = intrusive_tree.cursor_find(n);\n@@ -603,1 +651,1 @@\n-      Tree::Cursor cursor = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor = intrusive_tree.cursor_find(n);\n@@ -605,1 +653,0 @@\n-\n@@ -686,0 +733,8 @@\n+TEST_VM_F(RBTreeTest, CursorFind) {\n+  this->test_cursor_find();\n+}\n+\n+TEST_VM_F(RBTreeTest, CursorGet) {\n+  this->test_get_cursor();\n+}\n+\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":78,"deletions":23,"binary":false,"changes":101,"status":"modified"}]}