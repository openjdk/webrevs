{"files":[{"patch":"@@ -40,0 +40,4 @@\n+\/\/ A second static function `cmp(const IntrusiveRBNode* a, const IntrusiveRBNode* b)`\n+\/\/ used for `verify_self` and other extra validation can optionally be provided. This should return:\n+\/\/     - true if a < b\n+\/\/     - false otherwise\n@@ -47,1 +51,1 @@\n-\/\/ COMPARATOR must have one of the static functions `cmp(K a, K b)` or `cmp(K a, const RBNode<K, V>* b) which returns:\n+\/\/ COMPARATOR must have one of the static functions `cmp(K a, K b)` or `cmp(K a, const RBNode<K, V>* b)` which returns:\n@@ -51,0 +55,4 @@\n+\/\/ A second static function `cmp(const RBNode<K, V>* a, const RBNode<K, V>* b)`\n+\/\/ used for extra validation can optionally be provided,. This should return:\n+\/\/     - true if a < b\n+\/\/     - false otherwise\n@@ -187,0 +195,8 @@\n+  template <typename CMP, typename RET, typename ARG1, typename ARG2, typename = void>\n+  struct has_cmp_type : std::false_type {};\n+  template <typename CMP, typename RET, typename ARG1, typename ARG2>\n+  struct has_cmp_type<CMP, RET, ARG1, ARG2, decltype(static_cast<RET(*)(ARG1, ARG2)>(CMP::cmp), void())> : std::true_type {};\n+\n+  template <typename CMP>\n+  static constexpr bool IsKeyComparator = has_cmp_type<CMP, int, K, K>::value;\n+\n@@ -188,1 +204,2 @@\n-  static constexpr bool IsKeyComparator = std::is_same<decltype(CMP::cmp), int (K, K)>::value;\n+  static constexpr bool IsNodeComparator = has_cmp_type<CMP, int, K, const NodeType*>::value;\n+\n@@ -190,1 +207,1 @@\n-  static constexpr bool IsNodeComparator = std::is_same<decltype(CMP::cmp), int (K, const NodeType*)>::value;\n+  static constexpr bool HasNodeVerifier = has_cmp_type<CMP, bool, const NodeType*, const NodeType*>::value;\n@@ -202,0 +219,30 @@\n+  template <typename CMP = COMPARATOR, ENABLE_IF(!HasNodeVerifier<CMP>)>\n+  bool cmp(const NodeType* a, const NodeType* b) const {\n+    return true;\n+  }\n+\n+  template <typename CMP = COMPARATOR, ENABLE_IF(HasNodeVerifier<CMP>)>\n+  bool cmp(const NodeType* a, const NodeType* b) const {\n+    return COMPARATOR::cmp(a, b);\n+  }\n+\n+  template <typename CMP = COMPARATOR, ENABLE_IF(IsKeyComparator<CMP>)>\n+  void assert_leq(const K& a, const NodeType* b) const {\n+    assert(COMPARATOR::cmp(a, b->key()) <= 0, \"key not <= node\");\n+  }\n+\n+  template <typename CMP = COMPARATOR, ENABLE_IF(IsNodeComparator<CMP>)>\n+  void assert_leq(const K& a, const NodeType* b) const {\n+    assert(COMPARATOR::cmp(a, b) <= 0, \"key not <= node\");\n+  }\n+\n+  template <typename CMP = COMPARATOR, ENABLE_IF(IsKeyComparator<CMP>)>\n+  void assert_geq(const K& a, const NodeType* b) const {\n+    assert(COMPARATOR::cmp(a, b->key()) >= 0, \"key not >= node\");\n+  }\n+\n+  template <typename CMP = COMPARATOR, ENABLE_IF(IsNodeComparator<CMP>)>\n+  void assert_geq(const K& a, const NodeType* b) const {\n+    assert(COMPARATOR::cmp(a, b) >= 0, \"key not >= node\");\n+  }\n+\n@@ -218,0 +265,3 @@\n+  template <typename NodeVerifier>\n+  void verify_self(NodeVerifier verifier) const;\n+\n@@ -366,1 +416,1 @@\n-  \/\/ Visit all RBNodes in ascending order whose keys are in range [from, to), calling f on each node.\n+  \/\/ Visit all RBNodes in ascending order whose keys are in range [from, to], calling f on each node.\n@@ -372,5 +422,5 @@\n-  \/\/ A NodeVerifier function must be provided with signature:\n-  \/\/ bool (const NodeType* a, const NodeType* b)\n-  \/\/ Which returns true if a < b, and false otherwise.\n-  template <typename NodeVerifier>\n-  void verify_self(NodeVerifier verifier) const;\n+  \/\/ A second `cmp` must exist in COMPARATOR (see top of file).\n+  template <typename CMP = COMPARATOR, ENABLE_IF(HasNodeVerifier<CMP>)>\n+  void verify_self() const {\n+    verify_self([](const NodeType* a, const NodeType* b){ return COMPARATOR::cmp(a, b);});\n+  }\n@@ -378,1 +428,1 @@\n-  template <typename CMP = COMPARATOR, ENABLE_IF(IsKeyComparator<CMP>)>\n+  template <typename CMP = COMPARATOR, ENABLE_IF(IsKeyComparator<CMP> && !HasNodeVerifier<CMP>)>\n@@ -383,1 +433,1 @@\n-  template <typename CMP = COMPARATOR, ENABLE_IF(IsNodeComparator<CMP>)>\n+  template <typename CMP = COMPARATOR, ENABLE_IF(IsNodeComparator<CMP> && !HasNodeVerifier<CMP>)>\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":61,"deletions":11,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -552,0 +552,6 @@\n+  if (new_node->is_left_child()) {\n+    assert(cmp((const NodeType*)new_node, (const NodeType*)new_node->_parent), \"new node not < parent\");\n+  } else if (new_node->is_right_child()) {\n+    assert(cmp((const NodeType*)new_node->_parent, (const NodeType*)new_node->_right), \"new node not > parent\");\n+  }\n+\n@@ -555,0 +561,1 @@\n+    assert(cmp((const NodeType*)new_node->_left, (const NodeType*)new_node), \"left child not < new node\");\n@@ -558,0 +565,1 @@\n+    assert(cmp((const NodeType*)new_node, (const NodeType*)new_node->_right), \"right child not > new node\");\n@@ -608,1 +616,6 @@\n-  const NodeType* end = cursor_end.found() ? cursor_end.node() : next(cursor_end).node();\n+  const NodeType* end = next(cursor_end).node();\n+\n+  if (start != nullptr) {\n+    assert_leq(from, start);\n+    assert_geq(to, start);\n+  }\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-  };\n@@ -97,5 +96,6 @@\n-  \/\/ true if a < b\n-  static bool IntrusiveVerifier(IntrusiveTreeNode* a, IntrusiveTreeNode* b) {\n-    return (IntrusiveHolder::cast_to_self(a)->key -\n-            IntrusiveHolder::cast_to_self(b)->key) < 0;\n-  }\n+    \/\/ true if a < b\n+    static bool cmp(const IntrusiveTreeNode* a, const IntrusiveTreeNode* b) {\n+      return (IntrusiveHolder::cast_to_self(a)->key -\n+              IntrusiveHolder::cast_to_self(b)->key) < 0;\n+    }\n+  };\n@@ -236,2 +236,2 @@\n-      \/\/ Visiting empty range [0, 0) == {}\n-      rbtree.upsert(0, 0); \/\/ This node should not be visited.\n+      count = 0;\n+      rbtree.upsert(0, 0);\n@@ -239,1 +239,1 @@\n-        EXPECT_TRUE(false) << \"Empty visiting range should not visit any node\";\n+        count++;\n@@ -241,0 +241,1 @@\n+      EXPECT_EQ(1, count);\n@@ -249,1 +250,1 @@\n-      rbtree_const.visit_range_in_order(0, 10, [&](const Node* x) {\n+      rbtree_const.visit_range_in_order(0, 9, [&](const Node* x) {\n@@ -724,1 +725,1 @@\n-      intrusive_tree.verify_self(IntrusiveVerifier);\n+      intrusive_tree.verify_self();\n@@ -744,1 +745,1 @@\n-      intrusive_tree.verify_self(IntrusiveVerifier);\n+      intrusive_tree.verify_self();\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"}]}