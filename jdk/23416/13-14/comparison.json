{"files":[{"patch":"@@ -117,1 +117,1 @@\n-#ifdef ASSERT\n+  template <typename NodeType, typename NodeVerifier>\n@@ -120,2 +120,1 @@\n-              size_t& tree_depth, bool expect_visited) const;\n-#endif \/\/ ASSERT\n+              size_t& tree_depth, bool expect_visited, NodeVerifier verifier) const;\n@@ -188,1 +187,6 @@\n-  template <typename CMP = decltype(COMPARATOR::cmp), ENABLE_IF(std::is_same<CMP, int (K, K)>::value)>\n+  template <typename CMP>\n+  static constexpr bool IsKeyComparator = std::is_same<decltype(CMP::cmp), int (K, K)>::value;\n+  template <typename CMP>\n+  static constexpr bool IsNodeComparator = std::is_same<decltype(CMP::cmp), int (K, const NodeType*)>::value;\n+\n+  template <typename CMP = COMPARATOR, ENABLE_IF(IsKeyComparator<CMP>)>\n@@ -193,1 +197,1 @@\n-  template <typename CMP = decltype(COMPARATOR::cmp), ENABLE_IF(std::is_same<CMP, int (K, const NodeType*)>::value)>\n+  template <typename CMP = COMPARATOR, ENABLE_IF(IsNodeComparator<CMP>)>\n@@ -221,2 +225,1 @@\n-    static_assert(std::is_same<decltype(COMPARATOR::cmp), int(K, K)>::value ||\n-                  std::is_same<decltype(COMPARATOR::cmp), int(K, const NodeType*)>::value,\n+    static_assert(IsKeyComparator<COMPARATOR> || IsNodeComparator<COMPARATOR>,\n@@ -368,1 +371,16 @@\n-  void verify_self() const NOT_DEBUG({});\n+  \/\/ If not using a key comparator (when using IntrusiveRBTree for example),\n+  \/\/ A NodeVerifier function must be provided with signature:\n+  \/\/ bool (const NodeType* a, const NodeType* b)\n+  \/\/ Which returns true if a < b, and false otherwise.\n+  template <typename NodeVerifier>\n+  void verify_self(NodeVerifier verifier) const;\n+\n+  template <typename CMP = COMPARATOR, ENABLE_IF(IsKeyComparator<CMP>)>\n+  void verify_self() const {\n+    verify_self([](const NodeType* a, const NodeType* b){ return COMPARATOR::cmp(a->key(), b->key()) < 0; });\n+  }\n+\n+  template <typename CMP = COMPARATOR, ENABLE_IF(IsNodeComparator<CMP>)>\n+  void verify_self() const {\n+    verify_self([](const NodeType*, const NodeType*){ return true;});\n+  }\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":26,"deletions":8,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-#ifdef ASSERT\n+template <typename NodeType, typename NodeVerifier>\n@@ -128,1 +128,1 @@\n-    size_t& tree_depth, bool expect_visited) const {\n+    size_t& tree_depth, bool expect_visited, NodeVerifier verifier) const {\n@@ -130,1 +130,1 @@\n-  _visited = !_visited;\n+  DEBUG_ONLY(_visited = !_visited);\n@@ -138,0 +138,1 @@\n+    assert(verifier((NodeType*)_left, (NodeType*)this), \"left child must compare strictly less than parent\");\n@@ -143,2 +144,2 @@\n-    _left->verify(num_nodes, num_black_nodes_left, shortest_leaf_path_left,\n-                  longest_leaf_path_left, tree_depth_left, expect_visited);\n+    _left->verify<NodeType>(num_nodes, num_black_nodes_left, shortest_leaf_path_left,\n+                  longest_leaf_path_left, tree_depth_left, expect_visited, verifier);\n@@ -153,0 +154,1 @@\n+    assert(verifier((NodeType*)this, (NodeType*)_right), \"right child must compare strictly greater than parent\");\n@@ -158,2 +160,2 @@\n-    _right->verify(num_nodes, num_black_nodes_right, shortest_leaf_path_right,\n-                   longest_leaf_path_right, tree_depth_right, expect_visited);\n+    _right->verify<NodeType>(num_nodes, num_black_nodes_right, shortest_leaf_path_right,\n+                   longest_leaf_path_right, tree_depth_right, expect_visited, verifier);\n@@ -183,2 +185,0 @@\n-#endif \/\/ ASSERT\n-\n@@ -243,3 +243,1 @@\n-#ifdef ASSERT\n-  node->_visited = _expected_visited;\n-#endif \/\/ ASSERT\n+  DEBUG_ONLY(node->_visited = _expected_visited);\n@@ -564,4 +562,0 @@\n-\n-#ifdef ASSERT\n-  verify_self(); \/\/ Dangerous operation, should verify no tree properties were broken\n-#endif \/\/ ASSERT\n@@ -607,1 +601,0 @@\n-  \/\/ assert(COMPARATOR::cmp(from, to) <= 0, \"from must be less or equal to to\");\n@@ -623,1 +616,0 @@\n-#ifdef ASSERT\n@@ -625,1 +617,2 @@\n-inline void AbstractRBTree<K, NodeType, COMPARATOR>::verify_self() const {\n+template <typename NodeVerifier>\n+inline void AbstractRBTree<K, NodeType, COMPARATOR>::verify_self(NodeVerifier verifier) const {\n@@ -638,1 +631,2 @@\n-  _expected_visited = !_expected_visited;\n+  DEBUG_ONLY(_expected_visited = !_expected_visited);\n+  bool expected_visited = DEBUG_ONLY(_expected_visited) NOT_DEBUG(false);\n@@ -640,1 +634,2 @@\n-  _root->verify(num_nodes, black_depth, shortest_leaf_path, longest_leaf_path, tree_depth, _expected_visited);\n+  _root->verify<NodeType>(num_nodes, black_depth, shortest_leaf_path, longest_leaf_path,\n+                tree_depth, expected_visited, verifier);\n@@ -652,1 +647,0 @@\n-#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":16,"deletions":22,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -97,0 +97,6 @@\n+  \/\/ true if a < b\n+  static bool IntrusiveVerifier(IntrusiveTreeNode* a, IntrusiveTreeNode* b) {\n+    return (IntrusiveHolder::cast_to_self(a)->key -\n+            IntrusiveHolder::cast_to_self(b)->key) < 0;\n+  }\n+\n@@ -630,1 +636,0 @@\n-#ifdef ASSERT\n@@ -719,1 +724,1 @@\n-      intrusive_tree.verify_self();\n+      intrusive_tree.verify_self(IntrusiveVerifier);\n@@ -739,1 +744,1 @@\n-      intrusive_tree.verify_self();\n+      intrusive_tree.verify_self(IntrusiveVerifier);\n@@ -749,0 +754,1 @@\n+  #ifdef ASSERT\n@@ -912,1 +918,0 @@\n-#ifdef ASSERT\n@@ -925,0 +930,1 @@\n+#ifdef ASSERT\n@@ -928,0 +934,1 @@\n+#endif \/\/ ASSERT\n@@ -985,1 +992,0 @@\n-#endif \/\/ ASSERT\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"}]}