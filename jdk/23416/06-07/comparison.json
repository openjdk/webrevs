{"files":[{"patch":"@@ -149,2 +149,2 @@\n-  \/\/ If the cursor points to an existing node (found() == true), node() can be used to access that node,\n-  \/\/ Otherwise nullptr is returned, regardless if the node is valid or not.\n+  \/\/ If the cursor points to an existing node (found() == true), node() can be used to access that node.\n+  \/\/ If no node is pointed to, node() returns null, regardless if the cursor is valid or not.\n@@ -225,3 +225,5 @@\n-  \/\/ Gets the cursor to the given node.\n-  Cursor get_cursor(const RBNode* node);\n-  const Cursor get_cursor(const RBNode* node) const;\n+  \/\/ Gets the cursor associated with the given node or key.\n+  Cursor cursor(const K& key);\n+  Cursor cursor(const RBNode* node);\n+  const Cursor cursor(const K& key) const;\n+  const Cursor cursor(const RBNode* node) const;\n@@ -229,1 +231,1 @@\n-  \/\/ Moves to the next valid node.\n+  \/\/ Moves to the next existing node.\n@@ -231,2 +233,2 @@\n-  Cursor next(const Cursor& cursor);\n-  const Cursor next(const Cursor& cursor) const;\n+  Cursor next(const Cursor& node_cursor);\n+  const Cursor next(const Cursor& node_cursor) const;\n@@ -234,1 +236,1 @@\n-  \/\/ Moves to the previous valid node.\n+  \/\/ Moves to the previous existing node.\n@@ -236,2 +238,2 @@\n-  Cursor prev(const Cursor& cursor);\n-  const Cursor prev(const Cursor& cursor) const;\n+  Cursor prev(const Cursor& node_cursor);\n+  const Cursor prev(const Cursor& node_cursor) const;\n@@ -239,7 +241,4 @@\n-  \/\/ Finds the cursor to the node associated with the given key.\n-  Cursor cursor_find(const K& key);\n-  const Cursor cursor_find(const K& key) const;\n-\n-  \/\/ Inserts the given node at the cursor location\n-  \/\/ The cursor must not point to an existing node\n-  void insert_at_cursor(RBNode* node, const Cursor& cursor);\n+  \/\/ Initializes and inserts a node at the cursor location.\n+  \/\/ The cursor must not point to an existing node.\n+  \/\/ Node is given the same key used in `cursor()`.\n+  void insert_at_cursor(RBNode* node, const Cursor& node_cursor);\n@@ -249,1 +248,1 @@\n-  void remove_at_cursor(const Cursor& cursor);\n+  void remove_at_cursor(const Cursor& node_cursor);\n@@ -254,4 +253,4 @@\n-  \/\/ There must not exist any node with the same key\n-  \/\/ For all nodes with key < old_node, must also have key < new_node\n-  \/\/ For all nodes with key > old_node, must also have key > new_node\n-  void replace_at_cursor(RBNode* new_node, const Cursor& cursor);\n+  \/\/ There must not exist any node with the new key\n+  \/\/ For all nodes with key < old_key, must also have key < new_key\n+  \/\/ For all nodes with key > old_key, must also have key > new_key\n+  void replace_at_cursor(RBNode* new_node, const Cursor& node_cursor);\n@@ -261,2 +260,2 @@\n-    Cursor cursor = cursor_find(key);\n-    return cursor.found() ? &cursor.node()->_value : nullptr;\n+    Cursor node_cursor = cursor(key);\n+    return node_cursor.found() ? &node_cursor.node()->_value : nullptr;\n@@ -266,2 +265,2 @@\n-    const Cursor cursor = cursor_find(key);\n-    return cursor.found() ? &cursor.node()->_value : nullptr;\n+    const Cursor node_cursor = cursor(key);\n+    return node_cursor.found() ? &node_cursor.node()->_value : nullptr;\n@@ -272,2 +271,2 @@\n-    Cursor cursor = cursor_find(key);\n-    return cursor.node();\n+    Cursor node_cursor = cursor(key);\n+    return node_cursor.node();\n@@ -277,2 +276,2 @@\n-    Cursor cursor = cursor_find(key);\n-    return cursor.node();\n+    Cursor node_cursor = cursor(key);\n+    return node_cursor.node();\n@@ -284,2 +283,2 @@\n-    Cursor cursor = cursor_find(key);\n-    if (cursor.found()) {\n+    Cursor node_cursor = cursor(key);\n+    if (node_cursor.found()) {\n@@ -290,1 +289,1 @@\n-    insert_at_cursor(node, cursor);\n+    insert_at_cursor(node, node_cursor);\n@@ -297,2 +296,2 @@\n-    Cursor cursor = cursor_find(key);\n-    RBNode* node = cursor.node();\n+    Cursor node_cursor = cursor(key);\n+    RBNode* node = node_cursor.node();\n@@ -305,1 +304,1 @@\n-    insert_at_cursor(node, cursor);\n+    insert_at_cursor(node, node_cursor);\n@@ -311,2 +310,2 @@\n-    Cursor cursor = cursor_find(key);\n-    if (!cursor.found()) {\n+    Cursor node_cursor = cursor(key);\n+    if (!node_cursor.found()) {\n@@ -315,2 +314,2 @@\n-    RBNode* node = cursor.node();\n-    remove_at_cursor(cursor);\n+    RBNode* node = node_cursor.node();\n+    remove_at_cursor(node_cursor);\n@@ -322,2 +321,2 @@\n-    Cursor cursor = get_cursor(node);\n-    remove_at_cursor(cursor);\n+    Cursor node_cursor = cursor(node);\n+    remove_at_cursor(node_cursor);\n@@ -346,2 +345,2 @@\n-    Cursor cursor = cursor_find(key);\n-    return cursor.found() ? cursor.node() : prev(cursor).node();\n+    Cursor node_cursor = cursor(key);\n+    return node_cursor.found() ? node_cursor.node() : prev(node_cursor).node();\n@@ -351,2 +350,2 @@\n-    Cursor cursor = cursor_find(key);\n-    return cursor.found() ? cursor.node() : prev(cursor).node();\n+    Cursor node_cursor = cursor(key);\n+    return node_cursor.found() ? node_cursor.node() : prev(node_cursor).node();\n@@ -357,2 +356,2 @@\n-    Cursor cursor = cursor_find(key);\n-    return next(cursor).node();\n+    Cursor node_cursor = cursor(key);\n+    return next(node_cursor).node();\n@@ -362,2 +361,2 @@\n-    Cursor cursor = cursor_find(key);\n-    return next(cursor).node();\n+    Cursor node_cursor = cursor(key);\n+    return next(node_cursor).node();\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":50,"deletions":51,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-RBTree<K, V, COMPARATOR, ALLOCATOR>::cursor_find(const K& key) const {\n+RBTree<K, V, COMPARATOR, ALLOCATOR>::cursor(const K& key) const {\n@@ -196,1 +196,2 @@\n-    const int key_cmp_k = COMPARATOR::cmp(key, (*insert_location)->key());\n+    RBNode* curr = *insert_location;\n+    const int key_cmp_k = COMPARATOR::cmp(key, curr->key());\n@@ -204,1 +205,1 @@\n-      insert_location = &((*insert_location)->_left);\n+      insert_location = &curr->_left;\n@@ -206,1 +207,1 @@\n-      insert_location = &((*insert_location)->_right);\n+      insert_location = &curr->_right;\n@@ -213,2 +214,2 @@\n-inline void RBTree<K, V, COMPARATOR, ALLOCATOR>::insert_at_cursor(RBNode* node, const Cursor& cursor) {\n-  assert(cursor.valid() && !cursor.found(), \"must be\");\n+inline void RBTree<K, V, COMPARATOR, ALLOCATOR>::insert_at_cursor(RBNode* node, const Cursor& node_cursor) {\n+  assert(node_cursor.valid() && !node_cursor.found(), \"must be\");\n@@ -217,1 +218,1 @@\n-  *cursor._insert_location = node;\n+  *node_cursor._insert_location = node;\n@@ -219,1 +220,1 @@\n-  node->set_parent(cursor._parent);\n+  node->set_parent(node_cursor._parent);\n@@ -223,1 +224,1 @@\n-  node->_key = cursor._key;\n+  node->_key = node_cursor._key;\n@@ -229,1 +230,1 @@\n-  if (cursor._parent == nullptr) {\n+  if (node_cursor._parent == nullptr) {\n@@ -430,2 +431,2 @@\n-inline void RBTree<K, V, COMPARATOR, ALLOCATOR>::remove_at_cursor(const Cursor& cursor) {\n-  assert(cursor.valid() && cursor.found(), \"must be\");\n+inline void RBTree<K, V, COMPARATOR, ALLOCATOR>::remove_at_cursor(const Cursor& node_cursor) {\n+  assert(node_cursor.valid() && node_cursor.found(), \"must be\");\n@@ -434,1 +435,1 @@\n-  RBNode* node = cursor.node();\n+  RBNode* node = node_cursor.node();\n@@ -472,1 +473,1 @@\n-RBTree<K, V, COMPARATOR, ALLOCATOR>::get_cursor(const RBNode* node) const {\n+RBTree<K, V, COMPARATOR, ALLOCATOR>::cursor(const RBNode* node) const {\n@@ -489,3 +490,3 @@\n-RBTree<K, V, COMPARATOR, ALLOCATOR>::next(const Cursor& cursor) const {\n-  if (cursor.found()) {\n-    return get_cursor(cursor.node()->next());\n+RBTree<K, V, COMPARATOR, ALLOCATOR>::next(const Cursor& node_cursor) const {\n+  if (node_cursor.found()) {\n+    return cursor(node_cursor.node()->next());\n@@ -494,1 +495,1 @@\n-  if (cursor._parent == nullptr) { \/\/ Tree is empty\n+  if (node_cursor._parent == nullptr) { \/\/ Tree is empty\n@@ -499,2 +500,2 @@\n-  if (&cursor._parent->_left == cursor._insert_location) { \/\/ Left child, parent is next\n-    return get_cursor(cursor._parent);\n+  if (&node_cursor._parent->_left == node_cursor._insert_location) { \/\/ Left child, parent is next\n+    return cursor(node_cursor._parent);\n@@ -503,1 +504,1 @@\n-  return get_cursor(cursor._parent->next()); \/\/ Right child, parent's next is also node's next\n+  return cursor(node_cursor._parent->next()); \/\/ Right child, parent's next is also node's next\n@@ -508,3 +509,3 @@\n-RBTree<K, V, COMPARATOR, ALLOCATOR>::prev(const Cursor& cursor) const {\n-  if (cursor.found()) {\n-    return get_cursor(cursor.node()->prev());\n+RBTree<K, V, COMPARATOR, ALLOCATOR>::prev(const Cursor& node_cursor) const {\n+  if (node_cursor.found()) {\n+    return cursor(node_cursor.node()->prev());\n@@ -513,1 +514,1 @@\n-  if (cursor._parent == nullptr) { \/\/ Tree is empty\n+  if (node_cursor._parent == nullptr) { \/\/ Tree is empty\n@@ -518,2 +519,2 @@\n-  if (&cursor._parent->_right == cursor._insert_location) { \/\/ Right child, parent is prev\n-    return get_cursor(cursor._parent);\n+  if (&node_cursor._parent->_right == node_cursor._insert_location) { \/\/ Right child, parent is prev\n+    return cursor(node_cursor._parent);\n@@ -522,1 +523,1 @@\n-  return get_cursor(cursor._parent->prev()); \/\/ Left child, parent's prev is also node's prev\n+  return cursor(node_cursor._parent->prev()); \/\/ Left child, parent's prev is also node's prev\n@@ -526,3 +527,3 @@\n-inline void RBTree<K, V, COMPARATOR, ALLOCATOR>::replace_at_cursor(RBNode* new_node, const Cursor& cursor) {\n-  assert(cursor.valid() && cursor.found(), \"must be\");\n-  RBNode* old_node = cursor.node();\n+inline void RBTree<K, V, COMPARATOR, ALLOCATOR>::replace_at_cursor(RBNode* new_node, const Cursor& node_cursor) {\n+  assert(node_cursor.valid() && node_cursor.found(), \"must be\");\n+  RBNode* old_node = node_cursor.node();\n@@ -533,2 +534,2 @@\n-  *cursor._insert_location = new_node;\n-  new_node->set_parent(cursor._parent);\n+  *node_cursor._insert_location = new_node;\n+  new_node->set_parent(node_cursor._parent);\n@@ -555,2 +556,2 @@\n-RBTree<K, V, COMPARATOR, ALLOCATOR>::cursor_find(const K& key) {\n-  return static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->cursor_find(key);\n+RBTree<K, V, COMPARATOR, ALLOCATOR>::cursor(const K& key) {\n+  return static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->cursor(key);\n@@ -561,2 +562,2 @@\n-RBTree<K, V, COMPARATOR, ALLOCATOR>::get_cursor(const RBNode* node) {\n-  return static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->get_cursor(node);\n+RBTree<K, V, COMPARATOR, ALLOCATOR>::cursor(const RBNode* node) {\n+  return static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->cursor(node);\n@@ -567,2 +568,2 @@\n-RBTree<K, V, COMPARATOR, ALLOCATOR>::next(const Cursor& cursor) {\n-  return static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->next(cursor);\n+RBTree<K, V, COMPARATOR, ALLOCATOR>::next(const Cursor& node_cursor) {\n+  return static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->next(node_cursor);\n@@ -573,2 +574,2 @@\n-RBTree<K, V, COMPARATOR, ALLOCATOR>::prev(const Cursor& cursor) {\n-  return static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->prev(cursor);\n+RBTree<K, V, COMPARATOR, ALLOCATOR>::prev(const Cursor& node_cursor) {\n+  return static_cast<const RBTree<K, V, COMPARATOR, ALLOCATOR>*>(this)->prev(node_cursor);\n@@ -595,2 +596,2 @@\n-  Cursor cursor_start = cursor_find(from);\n-  Cursor cursor_end = cursor_find(to);\n+  Cursor cursor_start = cursor(from);\n+  Cursor cursor_end = cursor(to);\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":44,"deletions":43,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -486,1 +486,1 @@\n-  void test_cursor_find() {\n+  void test_cursor() {\n@@ -491,1 +491,1 @@\n-      RBTreeInt::Cursor find_cursor = tree.cursor_find(n);\n+      RBTreeInt::Cursor find_cursor = tree.cursor(n);\n@@ -500,1 +500,1 @@\n-      RBTreeInt::Cursor find_cursor = tree.cursor_find(n);\n+      RBTreeInt::Cursor find_cursor = tree.cursor(n);\n@@ -504,2 +504,2 @@\n-    EXPECT_FALSE(tree.cursor_find(-1).found());\n-    EXPECT_FALSE(tree.cursor_find(101).found());\n+    EXPECT_FALSE(tree.cursor(-1).found());\n+    EXPECT_FALSE(tree.cursor(101).found());\n@@ -517,1 +517,1 @@\n-      tree.insert_at_cursor(place->get_node(), tree.cursor_find(n));\n+      tree.insert_at_cursor(place->get_node(), tree.cursor(n));\n@@ -523,4 +523,4 @@\n-      IntrusiveCursor get_cursor = tree.get_cursor(node);\n-      IntrusiveCursor find_cursor = tree.cursor_find(n);\n-      EXPECT_TRUE(get_cursor.found());\n-      EXPECT_TRUE(get_cursor.valid());\n+      IntrusiveCursor cursor = tree.cursor(node);\n+      IntrusiveCursor find_cursor = tree.cursor(n);\n+      EXPECT_TRUE(cursor.found());\n+      EXPECT_TRUE(cursor.valid());\n@@ -529,1 +529,1 @@\n-      EXPECT_EQ(get_cursor.node(), find_cursor.node());\n+      EXPECT_EQ(cursor.node(), find_cursor.node());\n@@ -535,1 +535,1 @@\n-    RBTreeInt::Cursor cursor = tree.get_cursor(tree.leftmost());\n+    RBTreeInt::Cursor cursor = tree.cursor(tree.leftmost());\n@@ -538,1 +538,1 @@\n-    cursor = tree.cursor_find(0);\n+    cursor = tree.cursor(0);\n@@ -551,1 +551,1 @@\n-    RBTreeInt::Cursor cursor = tree.cursor_find(0);\n+    RBTreeInt::Cursor cursor = tree.cursor(0);\n@@ -559,1 +559,1 @@\n-    cursor = tree.cursor_find(num_nodes);\n+    cursor = tree.cursor(num_nodes);\n@@ -654,1 +654,1 @@\n-      IntrusiveCursor cursor = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor = intrusive_tree.cursor(n);\n@@ -662,1 +662,1 @@\n-      IntrusiveCursor cursor2 = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor2 = intrusive_tree.cursor(n);\n@@ -671,1 +671,1 @@\n-      IntrusiveCursor cursor = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor = intrusive_tree.cursor(n);\n@@ -678,1 +678,1 @@\n-      IntrusiveCursor cursor = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor = intrusive_tree.cursor(n);\n@@ -682,1 +682,1 @@\n-      IntrusiveCursor cursor2 = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor2 = intrusive_tree.cursor(n);\n@@ -691,1 +691,1 @@\n-      IntrusiveCursor cursor = intrusive_tree.cursor_find(n);\n+      IntrusiveCursor cursor = intrusive_tree.cursor(n);\n@@ -775,1 +775,1 @@\n-  this->test_cursor_find();\n+  this->test_cursor();\n@@ -779,1 +779,1 @@\n-  this->test_get_cursor();\n+  this->test_cursor();\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"}]}