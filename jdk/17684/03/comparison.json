{"files":[{"patch":"@@ -58,0 +58,3 @@\n+                                                                            \\\n+  product(bool, StressMacroExpansion, false, DIAGNOSTIC,                    \\\n+          \"Randomize macro node expansion order\")                           \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -847,1 +847,2 @@\n-  if (StressLCM || StressGCM || StressIGVN || StressCCP || StressIncrementalInlining) {\n+  if (StressLCM || StressGCM || StressIGVN || StressCCP ||\n+      StressIncrementalInlining || StressMacroExpansion) {\n@@ -2454,0 +2455,1 @@\n+    print_method(PHASE_BEFORE_MACRO_EXPANSION, 3);\n@@ -2459,1 +2461,1 @@\n-    print_method(PHASE_MACRO_EXPANSION, 2);\n+    print_method(PHASE_AFTER_MACRO_EXPANSION, 2);\n@@ -5124,0 +5126,10 @@\n+void Compile::shuffle_macro_nodes() {\n+  if (_macro_nodes.length() < 2) {\n+    return;\n+  }\n+  for (uint i = _macro_nodes.length() - 1; i >= 1; i--) {\n+    uint j = C->random() % (i + 1);\n+    swap(_macro_nodes.at(i), _macro_nodes.at(j));\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -797,0 +797,1 @@\n+  void shuffle_macro_nodes();\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2433,0 +2433,3 @@\n+  if (StressMacroExpansion) {\n+    C->shuffle_macro_nodes();\n+  }\n@@ -2514,0 +2517,3 @@\n+      if (success) {\n+        C->print_method(PHASE_AFTER_MACRO_EXPANSION_STEP, 5, n);\n+      }\n@@ -2574,0 +2580,1 @@\n+    C->print_method(PHASE_AFTER_MACRO_EXPANSION_STEP, 5, n);\n@@ -2616,0 +2623,1 @@\n+    C->print_method(PHASE_AFTER_MACRO_EXPANSION_STEP, 5, n);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,3 @@\n-  flags(MACRO_EXPANSION,                \"Macro expand\") \\\n+  flags(BEFORE_MACRO_EXPANSION ,        \"Before Macro Expansion\") \\\n+  flags(AFTER_MACRO_EXPANSION_STEP,     \"After Macro Expansion Step\") \\\n+  flags(AFTER_MACRO_EXPANSION,          \"After Macro Expansion\") \\\n","filename":"src\/hotspot\/share\/opto\/phasetype.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-* `N=5`: additionally, after every effective IGVN step (slow)\n+* `N=5`: additionally, after every effective IGVN and every macro expansion step (slow)\n","filename":"src\/utils\/IdealGraphVisualizer\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 8252219 8256535\n+ * @bug 8252219 8256535 8317349\n@@ -47,0 +47,4 @@\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+StressMacroExpansion\n+ *      compiler.arguments.TestStressOptions\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+StressMacroExpansion -XX:StressSeed=42\n+ *      compiler.arguments.TestStressOptions\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestStressOptions.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\" })\n+    @IR(phase = { CompilePhase.AFTER_MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\" })\n@@ -106,1 +106,1 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS_OR_NKLASS, \"1\" })\n+    @IR(phase = { CompilePhase.AFTER_MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS_OR_NKLASS, \"1\" })\n@@ -124,1 +124,1 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"3\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.AFTER_MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"3\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n@@ -141,1 +141,1 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.AFTER_MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n@@ -156,1 +156,1 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\" }, failOn = { IRNode.PARTIAL_SUBTYPE_CHECK })\n+    @IR(phase = { CompilePhase.AFTER_MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"2\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\" }, failOn = { IRNode.PARTIAL_SUBTYPE_CHECK })\n@@ -172,1 +172,1 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.AFTER_MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n@@ -187,1 +187,1 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.AFTER_MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n@@ -397,1 +397,1 @@\n-    @IR(phase = { CompilePhase.MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n+    @IR(phase = { CompilePhase.AFTER_MACRO_EXPANSION }, counts = { IRNode.CMP_P, \"5\", IRNode.LOAD_KLASS_OR_NKLASS, \"2\", IRNode.PARTIAL_SUBTYPE_CHECK, \"1\" })\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ProfileAtTypeCheck.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+ * @run driver compiler.debug.TestGenerateStressSeed StressMacroExpansion\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestGenerateStressSeed.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.debug;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @key stress randomness\n+ * @bug 8252219 8256535 8317349\n+ * @requires vm.debug == true & vm.compiler2.enabled\n+ * @summary Tests that stress compilations with the same seed yield the same\n+ *          IGVN, CCP, and macro expansion traces.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.debug.TestStress\n+ *\/\n+\n+public class TestStress {\n+\n+    static String phaseTrace(String stressOption, String traceOption,\n+                             int stressSeed) throws Exception {\n+        String className = TestStress.class.getName();\n+        String[] procArgs = {\n+            \"-Xcomp\", \"-XX:-TieredCompilation\", \"-XX:-Inline\", \"-XX:+CICountNative\",\n+            \"-XX:CompileOnly=\" + className + \"::sum\", \"-XX:\" + traceOption,\n+            \"-XX:+\" + stressOption, \"-XX:StressSeed=\" + stressSeed,\n+            className, \"10\"};\n+        ProcessBuilder pb  = ProcessTools.createLimitedTestJavaProcessBuilder(procArgs);\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        out.shouldHaveExitValue(0);\n+        return out.getStdout();\n+    }\n+\n+    static String igvnTrace(int stressSeed) throws Exception {\n+        return phaseTrace(\"StressIGVN\", \"+TraceIterativeGVN\", stressSeed);\n+    }\n+\n+    static String ccpTrace(int stressSeed) throws Exception {\n+        return phaseTrace(\"StressCCP\", \"+TracePhaseCCP\", stressSeed);\n+    }\n+\n+    static String macroExpansionTrace(int stressSeed) throws Exception {\n+        return phaseTrace(\"StressMacroExpansion\",\n+                          \"CompileCommand=PrintIdealPhase,*::*,AFTER_MACRO_EXPANSION_STEP\",\n+                          stressSeed);\n+    }\n+\n+    static void sum(int n) {\n+        int acc = 0;\n+        for (int i = 0; i < n; i++) acc += i;\n+        System.out.println(acc);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            for (int s = 0; s < 10; s++) {\n+                Asserts.assertEQ(igvnTrace(s), igvnTrace(s),\n+                    \"got different IGVN traces for the same seed\");\n+                Asserts.assertEQ(ccpTrace(s), ccpTrace(s),\n+                    \"got different CCP traces for the same seed\");\n+                Asserts.assertEQ(macroExpansionTrace(s), macroExpansionTrace(s),\n+                    \"got different macro expansion traces for the same seed\");\n+            }\n+        } else if (args.length > 0) {\n+            sum(Integer.parseInt(args[0]));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestStress.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.debug;\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.Asserts;\n-\n-\/*\n- * @test\n- * @key stress randomness\n- * @bug 8252219 8256535\n- * @requires vm.debug == true & vm.compiler2.enabled\n- * @summary Tests that stress compilations with the same seed yield the same\n- *          IGVN and CCP traces.\n- * @library \/test\/lib \/\n- * @run driver compiler.debug.TestStressIGVNAndCCP\n- *\/\n-\n-public class TestStressIGVNAndCCP {\n-\n-    static String phaseTrace(String stressOption, String traceOption,\n-                             int stressSeed) throws Exception {\n-        String className = TestStressIGVNAndCCP.class.getName();\n-        String[] procArgs = {\n-            \"-Xcomp\", \"-XX:-TieredCompilation\", \"-XX:-Inline\", \"-XX:+CICountNative\",\n-            \"-XX:CompileOnly=\" + className + \"::sum\", \"-XX:+\" + traceOption,\n-            \"-XX:+\" + stressOption, \"-XX:StressSeed=\" + stressSeed,\n-            className, \"10\"};\n-        ProcessBuilder pb  = ProcessTools.createLimitedTestJavaProcessBuilder(procArgs);\n-        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n-        out.shouldHaveExitValue(0);\n-        return out.getStdout();\n-    }\n-\n-    static String igvnTrace(int stressSeed) throws Exception {\n-        return phaseTrace(\"StressIGVN\", \"TraceIterativeGVN\", stressSeed);\n-    }\n-\n-    static String ccpTrace(int stressSeed) throws Exception {\n-        return phaseTrace(\"StressCCP\", \"TracePhaseCCP\", stressSeed);\n-    }\n-\n-    static void sum(int n) {\n-        int acc = 0;\n-        for (int i = 0; i < n; i++) acc += i;\n-        System.out.println(acc);\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 0) {\n-            for (int s = 0; s < 10; s++) {\n-                Asserts.assertEQ(igvnTrace(s), igvnTrace(s),\n-                    \"got different IGVN traces for the same seed\");\n-                Asserts.assertEQ(ccpTrace(s), ccpTrace(s),\n-                    \"got different CCP traces for the same seed\");\n-            }\n-        } else if (args.length > 0) {\n-            sum(Integer.parseInt(args[0]));\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestStressIGVNAndCCP.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,3 @@\n-    MACRO_EXPANSION(\"Macro expand\"),\n+    BEFORE_MACRO_EXPANSION(\"Before Macro Expansion\"),\n+    AFTER_MACRO_EXPANSION_STEP(\"After Macro Expansion Step\"),\n+    AFTER_MACRO_EXPANSION(\"After Macro Expansion\"),\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/CompilePhase.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2236,1 +2236,1 @@\n-                                                                          CompilePhase.MACRO_EXPANSION,\n+                                                                          CompilePhase.AFTER_MACRO_EXPANSION,\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -301,0 +301,1 @@\n+                \"-XX:+StressMacroExpansion\",\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/CtwRunner.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1098,1 +1098,1 @@\n-    @IR(failOn = IRNode.ALLOC, phase = {CompilePhase.FINAL_CODE, CompilePhase.MACRO_EXPANSION})\n+    @IR(failOn = IRNode.ALLOC, phase = {CompilePhase.FINAL_CODE, CompilePhase.AFTER_MACRO_EXPANSION})\n@@ -1102,1 +1102,1 @@\n-    @IR(failOn = IRNode.ALLOC_ARRAY, phase = {CompilePhase.FINAL_CODE, CompilePhase.MACRO_EXPANSION})\n+    @IR(failOn = IRNode.ALLOC_ARRAY, phase = {CompilePhase.FINAL_CODE, CompilePhase.AFTER_MACRO_EXPANSION})\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBadFormat.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}