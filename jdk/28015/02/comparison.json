{"files":[{"patch":"@@ -201,5 +201,3 @@\n-  if (log_is_enabled(Debug, stringdedup)) {\n-    _cur_stat.log_statistics(false);\n-    _total_stat.log_statistics(true);\n-    Table::log_statistics();\n-  }\n+  _cur_stat.emit_statistics(false \/* total *\/);\n+  _total_stat.emit_statistics(true \/* total *\/);\n+  Table::log_statistics();\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"jfr\/jfrEvents.hpp\"\n@@ -94,7 +95,0 @@\n-  double total_deduped_bytes_percent = 0.0;\n-\n-  if (total_stat->_new_bytes > 0) {\n-    \/\/ Avoid division by zero\n-    total_deduped_bytes_percent = percent_of(total_stat->_deduped_bytes, total_stat->_new_bytes);\n-  }\n-\n@@ -109,1 +103,1 @@\n-    total_deduped_bytes_percent,\n+    percent_of(total_stat->_deduped_bytes, total_stat->_new_bytes),\n@@ -211,1 +205,1 @@\n-void StringDedup::Stat::log_statistics(bool total) const {\n+void StringDedup::Stat::log_statistics() const {\n@@ -219,1 +213,0 @@\n-  log_times(total ? \"Total\" : \"Last\");\n@@ -232,0 +225,34 @@\n+\n+void StringDedup::Stat::emit_statistics(bool total) const {\n+  if (log_is_enabled(Debug, stringdedup)) {\n+    log_times(total ? \"Total\" : \"Last\");\n+    log_statistics();\n+  }\n+\n+  if (total) {\n+    \/\/ Send only JFR events about the last stats\n+    return;\n+  }\n+\n+  EventStringDeduplicationStatistics e;\n+  if (e.should_commit()) {\n+    e.set_inspected(_inspected);\n+    e.set_known(_known);\n+    e.set_shared(_known_shared);\n+    e.set_newStrings(_new);\n+    e.set_newBytes(_new_bytes);\n+    e.set_replaced(_replaced);\n+    e.set_deleted(_deleted);\n+    e.set_deduplicated(_deduped);\n+    e.set_deduplicatedBytes(_deduped_bytes);\n+    e.set_skippedDead(_skipped_dead);\n+    e.set_skippedIncomplete(_skipped_incomplete);\n+    e.set_skippedShared(_skipped_shared);\n+    e.set_activeElapsed(_active_elapsed);\n+    e.set_processElapsed(_process_elapsed);\n+    e.set_idleElapsed(_idle_elapsed);\n+    e.set_resizeTableElapsed(_resize_table_elapsed);\n+    e.set_cleanupTableElapsed(_cleanup_table_elapsed);\n+    e.commit();\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupStat.cpp","additions":37,"deletions":10,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+  void log_statistics() const;\n@@ -151,1 +152,1 @@\n-  void log_statistics(bool total) const;\n+  void emit_statistics(bool total) const;\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupStat.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -726,0 +726,4 @@\n+  if (!log_is_enabled(Debug, stringdedup)) {\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupTable.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1286,1 +1286,21 @@\n-  \n+\n+  <Event name=\"StringDeduplicationStatistics\" category=\"Java Virtual Machine, GC, Detailed\" label=\"String Deduplication Statistics\" stackTrace=\"false\">\n+    <Field type=\"ulong\" name=\"inspected\" label=\"Inspected\" \/>\n+    <Field type=\"ulong\" name=\"known\" label=\"Known\" \/>\n+    <Field type=\"ulong\" name=\"shared\" label=\"Shared\" \/>\n+    <Field type=\"ulong\" name=\"newStrings\" label=\"New Strings\" \/>\n+    <Field type=\"ulong\" name=\"newBytes\" contentType=\"bytes\" label=\"New Bytes\" \/>\n+    <Field type=\"ulong\" name=\"replaced\" label=\"Replaced\" \/>\n+    <Field type=\"ulong\" name=\"deleted\" label=\"Deleted\" \/>\n+    <Field type=\"ulong\" name=\"deduplicated\" label=\"Deduplicated\" \/>\n+    <Field type=\"ulong\" name=\"deduplicatedBytes\" contentType=\"bytes\" label=\"Deduplicated Bytes\" \/>\n+    <Field type=\"ulong\" name=\"skippedDead\" label=\"Skipped Dead\" \/>\n+    <Field type=\"ulong\" name=\"skippedIncomplete\" label=\"Skipped Incomplete\" \/>\n+    <Field type=\"ulong\" name=\"skippedShared\" label=\"Skipped Shared\" \/>\n+    <Field type=\"Tickspan\" name=\"activeElapsed\" label=\"Active Elapsed\" \/>\n+    <Field type=\"Tickspan\" name=\"processElapsed\" label=\"Process Elapsed\" \/>\n+    <Field type=\"Tickspan\" name=\"idleElapsed\" label=\"Idle Elapsed\" \/>\n+    <Field type=\"Tickspan\" name=\"resizeTableElapsed\" label=\"Resize Table Elapsed\" \/>\n+    <Field type=\"Tickspan\" name=\"cleanupTableElapsed\" label=\"Cleanup Table Elapsed\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -489,0 +489,5 @@\n+    <event name=\"jdk.StringDeduplicationStatistics\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">false<\/setting>\n+      <setting name=\"threshold\">0 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -489,0 +489,5 @@\n+    <event name=\"jdk.StringDeduplicationStatistics\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">true<\/setting>\n+      <setting name=\"threshold\">0 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.event.gc.detailed;\n+\n+import java.lang.reflect.Field;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.whitebox.WhiteBox;\n+\n+\/**\n+ * @test id=Serial\n+ * @requires vm.flagless\n+ * @requires vm.hasJFR\n+ * @requires vm.gc.Serial\n+ * @library \/test\/lib \/test\/jdk\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. --add-opens=java.base\/java.lang=ALL-UNNAMED\n+ *                                       -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                                       -ea\n+ *                                       -XX:+UseSerialGC\n+ *                                       -XX:+UseStringDeduplication\n+ *                                       -XX:StringDeduplicationAgeThreshold=1\n+ *                                       -Xlog:stringdedup*=debug\n+ *                                       jdk.jfr.event.gc.detailed.TestStringDeduplicationEvent\n+ *\/\n+\n+\/**\n+ * @test id=Parallel\n+ * @requires vm.flagless\n+ * @requires vm.hasJFR\n+ * @requires vm.gc.Parallel\n+ * @library \/test\/lib \/test\/jdk\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. --add-opens=java.base\/java.lang=ALL-UNNAMED\n+ *                                       -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                                       -ea\n+ *                                       -XX:+UseParallelGC\n+ *                                       -XX:+UseStringDeduplication\n+ *                                       -XX:StringDeduplicationAgeThreshold=1\n+ *                                       -Xlog:stringdedup*=debug\n+ *                                       jdk.jfr.event.gc.detailed.TestStringDeduplicationEvent\n+ *\/\n+\n+\/**\n+ * @test id=G1\n+ * @requires vm.flagless\n+ * @requires vm.hasJFR\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib \/test\/jdk\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. --add-opens=java.base\/java.lang=ALL-UNNAMED\n+ *                                       -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                                       -ea\n+ *                                       -XX:+UseG1GC\n+ *                                       -XX:+UseStringDeduplication\n+ *                                       -XX:StringDeduplicationAgeThreshold=1\n+ *                                       -Xlog:stringdedup*=debug\n+ *                                       jdk.jfr.event.gc.detailed.TestStringDeduplicationEvent\n+ *\/\n+\n+\/**\n+ * @test id=Z\n+ * @requires vm.flagless\n+ * @requires vm.hasJFR\n+ * @requires vm.gc.Z\n+ * @library \/test\/lib \/test\/jdk\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. --add-opens=java.base\/java.lang=ALL-UNNAMED\n+ *                                       -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                                       -ea\n+ *                                       -XX:+UseZGC\n+ *                                       -XX:+UseStringDeduplication\n+ *                                       -XX:StringDeduplicationAgeThreshold=1\n+ *                                       -Xlog:stringdedup*=debug\n+ *                                       jdk.jfr.event.gc.detailed.TestStringDeduplicationEvent\n+ *\/\n+\n+\/**\n+ * @test id=Shenandoah\n+ * @requires vm.flagless\n+ * @requires vm.hasJFR\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib \/test\/jdk\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. --add-opens=java.base\/java.lang=ALL-UNNAMED\n+ *                                       -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                                       -ea\n+ *                                       -XX:+UseShenandoahGC\n+ *                                       -XX:+UseStringDeduplication\n+ *                                       -XX:StringDeduplicationAgeThreshold=1\n+ *                                       -Xlog:stringdedup*=debug\n+ *                                       jdk.jfr.event.gc.detailed.TestStringDeduplicationEvent\n+ *\/\n+\n+public class TestStringDeduplicationEvent {\n+    private static Field valueField;\n+\n+    static {\n+        try {\n+            valueField = String.class.getDeclaredField(\"value\");\n+            valueField.setAccessible(true);\n+        } catch (Exception exception) {\n+            throw new RuntimeException(exception);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        boolean zgc = isZgc();\n+\n+        try (RecordingStream recording = new RecordingStream()) {\n+            recording.enable(EventNames.StringDeduplicationStatistics);\n+            recording.onEvent(EventNames.StringDeduplicationStatistics, e -> recording.close());\n+            recording.startAsync();\n+\n+            String base = TestStringDeduplicationEvent.class.getSimpleName();\n+            String duplicate = new StringBuilder(base).toString();\n+            assert(getValue(base) != getValue(duplicate));\n+\n+            if (zgc) {\n+                \/\/ ZGC only triggers string deduplications from major collections\n+                WhiteBox.getWhiteBox().fullGC();\n+            } else {\n+                WhiteBox.getWhiteBox().youngGC();\n+            }\n+\n+            recording.awaitTermination();\n+        }\n+    }\n+\n+    private static Object getValue(String string) {\n+        try {\n+            return valueField.get(string);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static boolean isZgc() {\n+        List<GarbageCollectorMXBean> gcs = ManagementFactory.getGarbageCollectorMXBeans();\n+        return gcs.getFirst().getName().contains(\"ZGC\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestStringDeduplicationEvent.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -163,0 +163,1 @@\n+    public static final String StringDeduplicationStatistics = PREFIX + \"StringDeduplicationStatistics\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}