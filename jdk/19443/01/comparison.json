{"files":[{"patch":"@@ -196,0 +196,14 @@\n+    @Override\n+    protected Class<?> findClass(String moduleName, String name) {\n+        try {\n+            if (moduleName == null) {\n+                return findClass(name);\n+            }\n+            if (moduleDescriptor != null && moduleDescriptor.name().equals(moduleName)) {\n+                return findClass(name);\n+            }\n+            return super.findClass(moduleName, name);\n+        } catch (ClassNotFoundException ignore) { }\n+        return null;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryClassLoader.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -223,0 +223,106 @@\n+\n+    @Test\n+    void testServiceLoading(@TempDir Path base) throws Exception {\n+        var packageFolder = Files.createDirectories(base.resolve(\"p\"));\n+        var mainFile = Files.writeString(packageFolder.resolve(\"Main.java\"),\n+                \"\"\"\n+                package p;\n+                \n+                import java.util.ServiceLoader;\n+                import java.util.spi.ToolProvider;\n+                \n+                class Main {\n+                    public static void main(String... args) throws Exception {\n+                        System.out.println(Main.class + \" in \" + Main.class.getModule());\n+                \n+                        System.out.println(\"1\");\n+                        System.out.println(Main.class.getResource(\"\/p\/Main.java\"));\n+                        System.out.println(Main.class.getResource(\"\/p\/Main.class\"));\n+                \n+                        System.out.println(\"2\");\n+                        System.out.println(Main.class.getResource(\"\/p\/Tool.java\"));\n+                        System.out.println(Main.class.getResource(\"\/p\/Tool.class\"));\n+                \n+                        System.out.println(\"3\");\n+                        System.out.println(ToolProvider.findFirst(\"p.Tool\")); \/\/ empty due to SCL being used\n+                \n+                        System.out.println(\"4\");\n+                        listToolProvidersIn(Main.class.getModule().getLayer());\n+                \n+                        System.out.println(\"5\");\n+                        Class.forName(\"p.Tool\"); \/\/ trigger compilation of \"p\/Tool.java\"\n+                        System.out.println(Main.class.getResource(\"\/p\/Tool.class\"));\n+                \n+                        System.out.println(\"6\");\n+                        listToolProvidersIn(Main.class.getModule().getLayer());\n+                    }\n+                \n+                    static void listToolProvidersIn(ModuleLayer layer) {\n+                        try {\n+                            ServiceLoader.load(layer, ToolProvider.class).stream()\n+                                .filter(service -> service.type().getModule().getLayer() == layer)\n+                                .map(ServiceLoader.Provider::get)\n+                                .forEach(System.out::println);\n+                        } catch (java.util.ServiceConfigurationError error) {\n+                            error.printStackTrace(System.err);\n+                        }\n+                    }\n+                }\n+                \"\"\");\n+        Files.writeString(packageFolder.resolve(\"Tool.java\"),\n+                \"\"\"\n+                package p;\n+                \n+                import java.io.PrintWriter;\n+                import java.util.spi.ToolProvider;\n+                \n+                public record Tool(String name) implements ToolProvider {\n+                   public static void main(String... args) {\n+                     System.exit(new Tool().run(System.out, System.err, args));\n+                   }\n+                \n+                   public Tool() {\n+                     this(Tool.class.getName());\n+                   }\n+                \n+                   @Override\n+                   public int run(PrintWriter out, PrintWriter err, String... args) {\n+                     out.println(name + \"\/out\");\n+                     err.println(name + \"\/err\");\n+                     return 0;\n+                   }\n+                }\n+                \"\"\");\n+        Files.writeString(base.resolve(\"module-info.java\"),\n+                \"\"\"\n+                module m {\n+                    uses java.util.spi.ToolProvider;\n+                    provides java.util.spi.ToolProvider with p.Tool;\n+                }\n+                \"\"\");\n+\n+        var run = Run.of(mainFile);\n+        assertAll(\"Run -> \" + run,\n+                () -> assertLinesMatch(\n+                        \"\"\"\n+                        class p.Main in module m\n+                        1\n+                        .*\/p\/Main.java\n+                        .*:p\/Main.class\n+                        2\n+                        .*\/p\/Tool.java\n+                        null\n+                        3\n+                        Optional.empty\n+                        4\n+                        Tool[name=p.Tool]\n+                        5\n+                        .*:p\/Tool.class\n+                        6\n+                        Tool[name=p.Tool]\n+                        \"\"\".lines(),\n+                        run.stdOut().lines()),\n+                () -> assertTrue(run.stdErr().isEmpty()),\n+                () -> assertNull(run.exception())\n+        );\n+    }\n","filename":"test\/langtools\/tools\/javac\/launcher\/ModuleSourceLauncherTests.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"modified"}]}