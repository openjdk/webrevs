{"files":[{"patch":"@@ -398,1 +398,0 @@\n- -runtime\/Thread\/ThreadCountLimit.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Stress test that reaches the process limit for thread count, or time limit.\n+ * @requires os.family != \"aix\"\n+ * @key stress\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xmx1g ThreadCountLimit\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Stress test that reaches the process limit for thread count, or time limit.\n+ * @requires os.family == \"aix\"\n+ * @key stress\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xmx1g -XX:MaxExpectedDataSegmentSize=16g ThreadCountLimit\n+ *\/\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.ArrayList;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ThreadCountLimit {\n+\n+  static final int TIME_LIMIT_MS = 5000; \/\/ Create as many threads as possible in 5 sec\n+\n+  static class Worker extends Thread {\n+    private final CountDownLatch startSignal;\n+\n+    Worker(CountDownLatch startSignal) {\n+      this.startSignal = startSignal;\n+    }\n+\n+    @Override\n+    public void run() {\n+      try {\n+        startSignal.await();\n+      } catch (InterruptedException e) {\n+        throw new Error(\"Unexpected\", e);\n+      }\n+    }\n+  }\n+\n+  public static void main(String[] args) throws Exception {\n+    if (args.length == 0) {\n+      \/\/ Called from the driver process so exec a new JVM on Linux.\n+      if (Platform.isLinux()) {\n+        \/\/ On Linux this test sometimes hits the limit for the maximum number of memory mappings,\n+        \/\/ which leads to various other failure modes. Run this test with a limit on how many\n+        \/\/ threads the process is allowed to create, so we hit that limit first.\n+\n+        final String ULIMIT_CMD = \"ulimit -u 4096\";\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(ThreadCountLimit.class.getName());\n+        String javaCmd = ProcessTools.getCommandLine(pb);\n+        \/\/ Relaunch the test with args.length > 0, and the ulimit set\n+        ProcessTools.executeCommand(\"bash\", \"-c\", ULIMIT_CMD + \" && \" + javaCmd + \" dummy\")\n+                    .shouldHaveExitValue(0);\n+      } else {\n+        \/\/ Not Linux so run directly.\n+        test();\n+      }\n+    } else {\n+      \/\/ This is the exec'd process so run directly.\n+      test();\n+    }\n+  }\n+\n+  static void test() {\n+    CountDownLatch startSignal = new CountDownLatch(1);\n+    ArrayList<Worker> workers = new ArrayList<Worker>();\n+\n+    boolean reachedNativeOOM = false;\n+\n+    \/\/ This is dangerous loop: it depletes system resources,\n+    \/\/ so doing additional things there that may end up allocating\n+    \/\/ Java\/native memory risks failing the VM prematurely.\n+    \/\/ Avoid doing unnecessary calls, printouts, etc.\n+\n+    int count = 0;\n+    long start = System.currentTimeMillis();\n+    try {\n+      while (true) {\n+        Worker w = new Worker(startSignal);\n+        w.start();\n+        workers.add(w);\n+        count++;\n+\n+        long end = System.currentTimeMillis();\n+        if ((end - start) > TIME_LIMIT_MS) {\n+          \/\/ Windows always gets here, but we also get here if\n+          \/\/ ulimit is set high enough.\n+          break;\n+        }\n+      }\n+    } catch (OutOfMemoryError e) {\n+      if (e.getMessage().contains(\"unable to create native thread\")) {\n+        \/\/ Linux, macOS path if we hit ulimit\n+        reachedNativeOOM = true;\n+      } else {\n+        throw e;\n+      }\n+    }\n+\n+    startSignal.countDown();\n+\n+    try {\n+      for (Worker w : workers) {\n+        w.join();\n+      }\n+    } catch (InterruptedException e) {\n+      throw new Error(\"Unexpected\", e);\n+    }\n+\n+    \/\/ Now that all threads have joined, we are away from dangerous\n+    \/\/ VM state and have enough memory to perform any other things.\n+    if (reachedNativeOOM) {\n+      System.out.println(\"INFO: reached this process thread count limit with \" +\n+                         count + \" threads created\");\n+    } else {\n+      System.out.println(\"INFO: reached the time limit \" + TIME_LIMIT_MS +\n+                         \" ms, with \" + count + \" threads created\");\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/resourcehogs\/runtime\/Thread\/ThreadCountLimit.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -1,174 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Stress test that reaches the process limit for thread count, or time limit.\n- * @requires os.family != \"aix\"\n- * @key stress\n- * @key cgroups\n- * @requires container.support\n- * @requires !vm.asan\n- * @library \/test\/lib\n- * @run main\/othervm -Xmx1g ThreadCountLimit\n- *\/\n-\n-\/**\n- * @test\n- * @summary Stress test that reaches the process limit for thread count, or time limit.\n- * @requires os.family == \"aix\"\n- * @key stress\n- * @library \/test\/lib\n- * @run main\/othervm -Xmx1g -XX:MaxExpectedDataSegmentSize=16g ThreadCountLimit\n- *\/\n-\n-import java.util.concurrent.CountDownLatch;\n-import java.util.ArrayList;\n-\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.containers.docker.Common;\n-import jdk.test.lib.containers.docker.DockerRunOptions;\n-import jdk.test.lib.containers.docker.DockerTestUtils;\n-\n-public class ThreadCountLimit {\n-\n-  static final int TIME_LIMIT_MS = 5000; \/\/ Create as many threads as possible in 5 sec\n-\n-  static class Worker extends Thread {\n-    private final CountDownLatch startSignal;\n-\n-    Worker(CountDownLatch startSignal) {\n-      this.startSignal = startSignal;\n-    }\n-\n-    @Override\n-    public void run() {\n-      try {\n-        startSignal.await();\n-      } catch (InterruptedException e) {\n-        throw new Error(\"Unexpected\", e);\n-      }\n-    }\n-  }\n-\n-  public static void main(String[] args) throws Exception {\n-    if (args.length == 0) {\n-      \/\/ Called from the driver process so exec a new JVM on Linux.\n-      if (Platform.isLinux()) {\n-        \/\/ On Linux this test sometimes hits the limit for the maximum number of memory mappings,\n-        \/\/ which leads to various other failure modes. Run this test with a limit on how many\n-        \/\/ threads the process is allowed to create, so we hit that limit first.\n-\n-        \/\/ Relaunch the test with args.length > 0, and the ulimit set\n-        if (!DockerTestUtils.canTestDocker()) {\n-            return;\n-        }\n-\n-        String imageName = Common.imageName(\"threadCountLimit\");\n-        imageName.replace(\"#\", \"-\");\n-        System.out.println(\"Building Docker image: \" + imageName);\n-        DockerTestUtils.buildJdkContainerImage(imageName);\n-\n-        try {\n-          Common.logNewTestCase(\"Test ThreadCountLimit\");\n-          DockerRunOptions opts =\n-                  new DockerRunOptions(imageName, \"\/jdk\/bin\/java\", ThreadCountLimit.class.getName());\n-          opts.addDockerOpts(\"--pids-limit\", \"4096\");\n-          opts.addDockerOpts(\"--volume\", Utils.TEST_CLASSES + \":\/test-classes\/\");\n-          opts.addJavaOpts(\"-cp\", \"\/test-classes\/\");\n-          opts.addClassOptions(\"dummy\");\n-          OutputAnalyzer out = DockerTestUtils.dockerRunJava(opts);\n-          out.shouldHaveExitValue(0);\n-        } finally {\n-            DockerTestUtils.removeDockerImage(imageName);\n-        }\n-      } else {\n-        \/\/ Not Linux so run directly.\n-        test();\n-      }\n-    } else {\n-      \/\/ This is the exec'd process so run directly.\n-      test();\n-    }\n-  }\n-\n-  static void test() {\n-    CountDownLatch startSignal = new CountDownLatch(1);\n-    ArrayList<Worker> workers = new ArrayList<Worker>();\n-\n-    boolean reachedNativeOOM = false;\n-\n-    \/\/ This is dangerous loop: it depletes system resources,\n-    \/\/ so doing additional things there that may end up allocating\n-    \/\/ Java\/native memory risks failing the VM prematurely.\n-    \/\/ Avoid doing unnecessary calls, printouts, etc.\n-\n-    int count = 0;\n-    long start = System.currentTimeMillis();\n-    try {\n-      while (true) {\n-        Worker w = new Worker(startSignal);\n-        w.start();\n-        workers.add(w);\n-        count++;\n-\n-        long end = System.currentTimeMillis();\n-        if ((end - start) > TIME_LIMIT_MS) {\n-          \/\/ Windows always gets here, but we also get here if\n-          \/\/ ulimit is set high enough.\n-          break;\n-        }\n-      }\n-    } catch (OutOfMemoryError e) {\n-      if (e.getMessage().contains(\"unable to create native thread\")) {\n-        \/\/ Linux, macOS path if we hit ulimit\n-        reachedNativeOOM = true;\n-      } else {\n-        throw e;\n-      }\n-    }\n-\n-    startSignal.countDown();\n-\n-    try {\n-      for (Worker w : workers) {\n-        w.join();\n-      }\n-    } catch (InterruptedException e) {\n-      throw new Error(\"Unexpected\", e);\n-    }\n-\n-    \/\/ Now that all threads have joined, we are away from dangerous\n-    \/\/ VM state and have enough memory to perform any other things.\n-    if (reachedNativeOOM) {\n-      System.out.println(\"INFO: reached this process thread count limit with \" +\n-                         count + \" threads created\");\n-    } else {\n-      System.out.println(\"INFO: reached the time limit \" + TIME_LIMIT_MS +\n-                         \" ms, with \" + count + \" threads created\");\n-    }\n-  }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/ThreadCountLimit.java","additions":0,"deletions":174,"binary":false,"changes":174,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,0 @@\n-        testname = testname.replace('#', '-');\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/Common.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}