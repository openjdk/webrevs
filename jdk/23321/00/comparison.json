{"files":[{"patch":"@@ -89,0 +89,5 @@\n+        \/\/ The first element of the list is pulled into a separate field\n+        \/\/ which helps escape analysis keep track of the instance, allowing\n+        \/\/ it to be scalar replaced.\n+        ResourceCleanup cache;\n+\n@@ -92,2 +97,6 @@\n-                cleanup.next = fst;\n-                fst = cleanup;\n+                if (cache == null) {\n+                    cache = cleanup;\n+                } else {\n+                    cleanup.next = fst;\n+                    fst = cleanup;\n+                }\n@@ -104,1 +113,5 @@\n-                cleanup(prev);\n+                RuntimeException pendingException = null;\n+                if (cache != null) {\n+                    pendingException = cleanupSingle(cache, pendingException);\n+                }\n+                cleanup(prev, pendingException);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ConfinedSession.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -264,1 +264,4 @@\n-            RuntimeException pendingException = null;\n+            cleanup(first, null);\n+        }\n+\n+        static void cleanup(ResourceCleanup first, RuntimeException pendingException) {\n@@ -267,10 +270,1 @@\n-                try {\n-                    current.cleanup();\n-                } catch (RuntimeException ex) {\n-                    if (pendingException == null) {\n-                        pendingException = ex;\n-                    } else if (ex != pendingException) {\n-                        \/\/ note: self-suppression is not supported\n-                        pendingException.addSuppressed(ex);\n-                    }\n-                }\n+                pendingException = cleanupSingle(current, pendingException);\n@@ -284,0 +278,14 @@\n+        static RuntimeException cleanupSingle(ResourceCleanup resource, RuntimeException pendingException) {\n+            try {\n+                resource.cleanup();\n+            } catch (RuntimeException ex) {\n+                if (pendingException == null) {\n+                    pendingException = ex;\n+                } else if (ex != pendingException) {\n+                    \/\/ note: self-suppression is not supported\n+                    pendingException.addSuppressed(ex);\n+                }\n+            }\n+            return pendingException;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    public MemorySegment alloc_confined() {\n+    public long alloc_confined() {\n@@ -69,1 +69,1 @@\n-            return arena.allocate(size);\n+            return arena.allocate(size).address();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}