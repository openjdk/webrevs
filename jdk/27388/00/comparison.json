{"files":[{"patch":"@@ -32,1 +32,1 @@\n- * @run testng\/othervm -Djdk.internal.httpclient.debug=true BadHeadersTest\n+ * @run junit\/othervm -Djdk.internal.httpclient.debug=true BadHeadersTest\n@@ -41,4 +41,5 @@\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -64,0 +65,2 @@\n+import java.util.stream.Stream;\n+\n@@ -72,2 +75,3 @@\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertInstanceOf;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -88,5 +92,5 @@\n-    SSLContext sslContext;\n-    Http2TestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n-    Http2TestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n-    String http2URI;\n-    String https2URI;\n+    static SSLContext sslContext;\n+    static Http2TestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n+    static Http2TestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n+    static String http2URI;\n+    static String https2URI;\n@@ -130,7 +134,6 @@\n-    @DataProvider(name = \"variants\")\n-    public Object[][] variants() {\n-        return new Object[][] {\n-                { http2URI,  false, oneContinuation },\n-                { https2URI, false, oneContinuation },\n-                { http2URI,  true,  oneContinuation },\n-                { https2URI, true,  oneContinuation },\n+    static Stream<Arguments> variants() {\n+        return Stream.of(\n+                Arguments.of(http2URI,  false, oneContinuation),\n+                Arguments.of(https2URI, false, oneContinuation),\n+                Arguments.of(http2URI,  true,  oneContinuation),\n+                Arguments.of(https2URI, true,  oneContinuation),\n@@ -138,5 +141,5 @@\n-                { http2URI,  false, byteAtATime },\n-                { https2URI, false, byteAtATime },\n-                { http2URI,  true,  byteAtATime },\n-                { https2URI, true,  byteAtATime },\n-        };\n+                Arguments.of(http2URI,  false, byteAtATime),\n+                Arguments.of(https2URI, false, byteAtATime),\n+                Arguments.of(http2URI,  true,  byteAtATime),\n+                Arguments.of(https2URI, true,  byteAtATime)\n+        );\n@@ -146,1 +149,2 @@\n-    @Test(dataProvider = \"variants\")\n+    @ParameterizedTest\n+    @MethodSource(\"variants\")\n@@ -175,1 +179,2 @@\n-    @Test(dataProvider = \"variants\")\n+    @ParameterizedTest\n+    @MethodSource(\"variants\")\n@@ -214,2 +219,1 @@\n-            assertTrue(throwable instanceof ProtocolException,\n-                    \"Expected ProtocolException, got \" + throwable);\n+            assertInstanceOf(ProtocolException.class, throwable, \"Expected ProtocolException, got \" + throwable);\n@@ -242,2 +246,2 @@\n-    @BeforeTest\n-    public void setup() throws Exception {\n+    @BeforeAll\n+    public static void setup() throws Exception {\n@@ -267,2 +271,2 @@\n-    @AfterTest\n-    public void teardown() throws Exception {\n+    @AfterAll\n+    public static void teardown() throws Exception {\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/BadHeadersTest.java","additions":36,"deletions":32,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng\/othervm\n+ * @run junit\/othervm\n@@ -36,3 +36,3 @@\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -62,1 +62,1 @@\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -76,2 +76,2 @@\n-    HttpServerAdapters.HttpTestServer server;\n-    URI uri;\n+    static HttpServerAdapters.HttpTestServer server;\n+    static URI uri;\n@@ -79,2 +79,2 @@\n-    @BeforeTest\n-    public void setup() throws Exception {\n+    @BeforeAll\n+    public static void setup() throws Exception {\n@@ -90,2 +90,2 @@\n-    @AfterTest\n-    public void teardown() {\n+    @AfterAll\n+    public static void teardown() {\n@@ -126,2 +126,1 @@\n-            assertTrue(throwable instanceof ProtocolException,\n-                    \"Expected ProtocolException, got \" + throwable);\n+            assertInstanceOf(ProtocolException.class, throwable, \"Expected ProtocolException, got \" + throwable);\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/BadPushPromiseTest.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run testng\/othervm -Djdk.httpclient.HttpClient.log=ssl,requests,responses,errors BasicTest\n+ * @run junit\/othervm -Djdk.httpclient.HttpClient.log=ssl,requests,responses,errors BasicTest\n@@ -56,1 +56,1 @@\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -63,1 +63,0 @@\n-@Test\n@@ -130,1 +129,1 @@\n-    public static void test() throws Exception {\n+    public void test() throws Exception {\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/BasicTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,4 @@\n- * @run testng\/othervm  -Djdk.internal.httpclient.debug=true\n- *                      -Djdk.httpclient.connectionWindowSize=65535\n- *                      -Djdk.httpclient.windowsize=16384\n- *                      ConnectionFlowControlTest\n+ * @run junit\/othervm  -Djdk.internal.httpclient.debug=true\n+ *              -Djdk.httpclient.connectionWindowSize=65535\n+ *              -Djdk.httpclient.windowsize=16384\n+ *              ConnectionFlowControlTest\n@@ -46,1 +46,0 @@\n-import java.net.http.HttpResponse.BodyHandler;\n@@ -48,3 +47,0 @@\n-import java.net.http.HttpResponse.BodySubscriber;\n-import java.net.http.HttpResponse.ResponseInfo;\n-import java.nio.ByteBuffer;\n@@ -52,1 +48,0 @@\n-import java.util.ArrayList;\n@@ -54,2 +49,0 @@\n-import java.util.List;\n-import java.util.Map.Entry;\n@@ -57,1 +50,0 @@\n-import java.util.concurrent.CompletionStage;\n@@ -60,1 +52,0 @@\n-import java.util.concurrent.Flow.Subscription;\n@@ -62,1 +53,0 @@\n-import java.util.function.BiFunction;\n@@ -64,0 +54,1 @@\n+import java.util.stream.Stream;\n@@ -75,4 +66,0 @@\n-import jdk.internal.net.http.frame.ContinuationFrame;\n-import jdk.internal.net.http.frame.HeaderFrame;\n-import jdk.internal.net.http.frame.HeadersFrame;\n-import jdk.internal.net.http.frame.Http2Frame;\n@@ -82,4 +69,5 @@\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -87,6 +75,1 @@\n-import static java.util.List.of;\n-import static java.util.Map.entry;\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertNotEquals;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -96,5 +79,5 @@\n-    SSLContext sslContext;\n-    HttpTestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n-    HttpTestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n-    String http2URI;\n-    String https2URI;\n+    static SSLContext sslContext;\n+    static HttpTestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n+    static HttpTestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n+    static String http2URI;\n+    static String https2URI;\n@@ -103,7 +86,5 @@\n-\n-    @DataProvider(name = \"variants\")\n-    public Object[][] variants() {\n-        return new Object[][] {\n-                { http2URI },\n-                { https2URI },\n-        };\n+    static Stream<Arguments> variants() {\n+        return Stream.of(\n+                Arguments.of(http2URI),\n+                Arguments.of(https2URI)\n+        );\n@@ -112,1 +93,2 @@\n-    @Test(dataProvider = \"variants\")\n+    @ParameterizedTest\n+    @MethodSource(\"variants\")\n@@ -261,2 +243,2 @@\n-    @BeforeTest\n-    public void setup() throws Exception {\n+    @BeforeAll\n+    public static void setup() throws Exception {\n@@ -267,4 +249,4 @@\n-        var http2TestServer = new Http2TestServer(\"localhost\", false, 0);\n-        http2TestServer.addHandler(new Http2TestHandler(), \"\/http2\/\");\n-        this.http2TestServer = HttpTestServer.of(http2TestServer);\n-        http2URI = \"http:\/\/\" + this.http2TestServer.serverAuthority() + \"\/http2\/x\";\n+        var http2TestServerLocal = new Http2TestServer(\"localhost\", false, 0);\n+        http2TestServerLocal.addHandler(new Http2TestHandler(), \"\/http2\/\");\n+        http2TestServer = HttpTestServer.of(http2TestServerLocal);\n+        http2URI = \"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/x\";\n@@ -272,4 +254,4 @@\n-        var https2TestServer = new Http2TestServer(\"localhost\", true, sslContext);\n-        https2TestServer.addHandler(new Http2TestHandler(), \"\/https2\/\");\n-        this.https2TestServer = HttpTestServer.of(https2TestServer);\n-        https2URI = \"https:\/\/\" + this.https2TestServer.serverAuthority() + \"\/https2\/x\";\n+        var https2TestServerLocal = new Http2TestServer(\"localhost\", true, sslContext);\n+        https2TestServerLocal.addHandler(new Http2TestHandler(), \"\/https2\/\");\n+        https2TestServer = HttpTestServer.of(https2TestServerLocal);\n+        https2URI = \"https:\/\/\" + https2TestServer.serverAuthority() + \"\/https2\/x\";\n@@ -279,2 +261,2 @@\n-        http2TestServer.setExchangeSupplier(FCHttp2TestExchange::new);\n-        https2TestServer.setExchangeSupplier(FCHttp2TestExchange::new);\n+        http2TestServerLocal.setExchangeSupplier(FCHttp2TestExchange::new);\n+        https2TestServerLocal.setExchangeSupplier(FCHttp2TestExchange::new);\n@@ -282,2 +264,2 @@\n-        this.http2TestServer.start();\n-        this.https2TestServer.start();\n+        http2TestServerLocal.start();\n+        https2TestServerLocal.start();\n@@ -286,2 +268,2 @@\n-    @AfterTest\n-    public void teardown() throws Exception {\n+    @AfterAll\n+    public static void teardown() throws Exception {\n@@ -367,1 +349,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ConnectionFlowControlTest.java","additions":40,"deletions":59,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run testng\/othervm ContinuationFrameTest\n+ * @run junit\/othervm ContinuationFrameTest\n@@ -49,0 +49,2 @@\n+import java.util.stream.Stream;\n+\n@@ -62,4 +64,5 @@\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -68,2 +71,1 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -73,8 +75,8 @@\n-    SSLContext sslContext;\n-    Http2TestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n-    Http2TestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n-    String http2URI;\n-    String https2URI;\n-    String noBodyhttp2URI;\n-    String noBodyhttps2URI;\n-    final ReferenceTracker TRACKER = ReferenceTracker.INSTANCE;\n+    static SSLContext sslContext;\n+    static Http2TestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n+    static Http2TestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n+    static String http2URI;\n+    static String https2URI;\n+    static String noBodyhttp2URI;\n+    static String noBodyhttps2URI;\n+    final static ReferenceTracker TRACKER = ReferenceTracker.INSTANCE;\n@@ -135,18 +137,17 @@\n-    @DataProvider(name = \"variants\")\n-    public Object[][] variants() {\n-        return new Object[][] {\n-                { http2URI,        false, oneContinuation },\n-                { https2URI,       false, oneContinuation },\n-                { http2URI,        true,  oneContinuation },\n-                { https2URI,       true,  oneContinuation },\n-\n-                { noBodyhttp2URI,  false, twoContinuation },\n-                { noBodyhttp2URI,  true,  twoContinuation },\n-                { noBodyhttps2URI, false, twoContinuation },\n-                { noBodyhttps2URI, true,  twoContinuation },\n-\n-                { http2URI,        false, byteAtATime },\n-                { https2URI,       false, byteAtATime },\n-                { http2URI,        true,  byteAtATime },\n-                { https2URI,       true,  byteAtATime },\n-        };\n+    static Stream<Arguments> variants() {\n+        return Stream.of(\n+                Arguments.of(http2URI,  false, oneContinuation),\n+                Arguments.of(https2URI, false, oneContinuation),\n+                Arguments.of(http2URI,  true,  oneContinuation),\n+                Arguments.of(https2URI, true,  oneContinuation),\n+\n+                Arguments.of(noBodyhttp2URI,  false, twoContinuation),\n+                Arguments.of(noBodyhttp2URI,  true,  twoContinuation),\n+                Arguments.of(noBodyhttps2URI, false, twoContinuation),\n+                Arguments.of(noBodyhttps2URI, true,  twoContinuation),\n+\n+                Arguments.of(http2URI,  false, byteAtATime),\n+                Arguments.of(https2URI, false, byteAtATime),\n+                Arguments.of(http2URI,  true,  byteAtATime),\n+                Arguments.of(https2URI, true,  byteAtATime)\n+        );\n@@ -157,1 +158,2 @@\n-    @Test(dataProvider = \"variants\")\n+    @ParameterizedTest\n+    @MethodSource(\"variants\")\n@@ -187,3 +189,2 @@\n-                assertTrue(resp.statusCode() == 204,\n-                    \"Expected 204, got:\" + resp.statusCode());\n-                assertEquals(resp.version(), HTTP_2);\n+                assertEquals(204, resp.statusCode(), \"Expected 204, got:\" + resp.statusCode());\n+                assertEquals(HTTP_2, resp.version());\n@@ -194,4 +195,3 @@\n-            assertTrue(resp.statusCode() == 200,\n-                       \"Expected 200, got:\" + resp.statusCode());\n-            assertEquals(resp.body(), \"Hello there!\");\n-            assertEquals(resp.version(), HTTP_2);\n+            assertEquals(200, resp.statusCode(), \"Expected 200, got:\" + resp.statusCode());\n+            assertEquals(\"Hello there!\", resp.body());\n+            assertEquals(HTTP_2, resp.version());\n@@ -201,2 +201,2 @@\n-    @BeforeTest\n-    public void setup() throws Exception {\n+    @BeforeAll\n+    public static void setup() throws Exception {\n@@ -230,2 +230,2 @@\n-    @AfterTest\n-    public void teardown() throws Exception {\n+    @AfterAll\n+    public static void teardown() throws Exception {\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ContinuationFrameTest.java","additions":46,"deletions":46,"binary":false,"changes":92,"status":"modified"}]}