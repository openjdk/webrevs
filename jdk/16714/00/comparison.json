{"files":[{"patch":"@@ -76,1 +76,1 @@\n-import jdk.javadoc.internal.doclint.Env;\n+import jdk.javadoc.internal.tool.AccessLevel;\n@@ -657,2 +657,2 @@\n-        \/\/ set DocLint options per access kind (as is common with javac.)\n-        \/\/ A more sophisticated solution might be to derive the access kind from the\n+        \/\/ set DocLint options per access level (as is common with javac.)\n+        \/\/ A more sophisticated solution might be to derive the access level from the\n@@ -660,1 +660,1 @@\n-        return doclint != null && doclint.isGroupEnabled(group, Env.AccessKind.PUBLIC);\n+        return doclint != null && doclint.isGroupEnabled(group, AccessLevel.PUBLIC);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseConfiguration.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+import jdk.javadoc.internal.tool.AccessLevel;\n@@ -413,2 +414,2 @@\n-    public boolean isGroupEnabled(Messages.Group group, Env.AccessKind accessKind) {\n-        return env.messages.isEnabled(group, accessKind);\n+    public boolean isGroupEnabled(Messages.Group group, AccessLevel accessLevel) {\n+        return env.messages.isEnabled(group, accessLevel);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/DocLint.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,1 @@\n+import jdk.javadoc.internal.tool.AccessLevel;\n@@ -71,26 +72,0 @@\n-    \/**\n-     * Access kinds for declarations.\n-     *\/\n-    public enum AccessKind {\n-        PRIVATE,\n-        PACKAGE,\n-        PROTECTED,\n-        PUBLIC;\n-\n-        static boolean accepts(String opt) {\n-            for (AccessKind g: values())\n-                if (opt.equals(StringUtils.toLowerCase(g.name()))) return true;\n-            return false;\n-        }\n-\n-        static AccessKind of(Set<Modifier> mods) {\n-            if (mods.contains(Modifier.PUBLIC))\n-                return AccessKind.PUBLIC;\n-            else if (mods.contains(Modifier.PROTECTED))\n-                return AccessKind.PROTECTED;\n-            else if (mods.contains(Modifier.PRIVATE))\n-                return AccessKind.PRIVATE;\n-            else\n-                return AccessKind.PACKAGE;\n-        }\n-    }\n@@ -139,2 +114,2 @@\n-     * The access kind of the declaration containing the comment currently being analyzed.\n-     * This is the minimum (most restrictive) access kind of the declaration itself\n+     * The access level of the declaration containing the comment currently being analyzed.\n+     * This is the most limiting access level of the declaration itself\n@@ -144,1 +119,1 @@\n-    AccessKind currAccess;\n+    AccessLevel currAccess;\n@@ -222,1 +197,3 @@\n-        AccessKind ak = AccessKind.PUBLIC;\n+        \/\/ It's convenient to use AccessLevel to model effects that nesting has\n+        \/\/ on access. While very similar, those are not the same concept.\n+        var mostLimitingSoFar = AccessLevel.PUBLIC;\n@@ -226,1 +203,3 @@\n-                ak = min(ak, AccessKind.of(e.getModifiers()));\n+                var level = AccessLevel.of(e.getModifiers());\n+                mostLimitingSoFar = mostLimitingSoFar.compareTo(level) <= 0\n+                        ? mostLimitingSoFar : level;\n@@ -229,5 +208,1 @@\n-        currAccess = ak;\n-    }\n-\n-    AccessKind getAccessKind() {\n-        return currAccess;\n+        currAccess = mostLimitingSoFar;\n@@ -362,7 +337,0 @@\n-\n-\n-    private <T extends Comparable<T>> T min(T item1, T item2) {\n-        return (item1 == null) ? item2\n-                : (item2 == null) ? item1\n-                : item1.compareTo(item2) <= 0 ? item1 : item2;\n-    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Env.java","additions":12,"deletions":44,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import jdk.javadoc.internal.doclint.Env.AccessKind;\n+import jdk.javadoc.internal.tool.AccessLevel;\n@@ -112,2 +112,2 @@\n-    boolean isEnabled(Group group, Env.AccessKind ak) {\n-        return options.isEnabled(group, ak);\n+    boolean isEnabled(Group group, AccessLevel al) {\n+        return options.isEnabled(group, al);\n@@ -179,1 +179,1 @@\n-        Map<String, Env.AccessKind> map = new HashMap<>();\n+        private final Map<String, AccessLevel> map = new HashMap<>();\n@@ -198,1 +198,7 @@\n-                    && ((sep == -1) || AccessKind.accepts(opt.substring(sep + 1)));\n+                    && ((sep == -1) || accepts(opt.substring(sep + 1)));\n+        }\n+\n+        static boolean accepts(String opt) {\n+            for (var level: AccessLevel.values())\n+                if (opt.equals(StringUtils.toLowerCase(level.name()))) return true;\n+            return false;\n@@ -206,1 +212,1 @@\n-        boolean isEnabled(Group g, Env.AccessKind access) {\n+        boolean isEnabled(Group g, AccessLevel access) {\n@@ -208,1 +214,1 @@\n-                map.put(\"all\", Env.AccessKind.PROTECTED);\n+                map.put(ALL, AccessLevel.PROTECTED);\n@@ -210,2 +216,2 @@\n-            Env.AccessKind ak = map.get(g.optName());\n-            if (ak != null && access.compareTo(ak) >= 0)\n+            AccessLevel al = map.get(g.optName());\n+            if (al != null && access.compareTo(al) >= 0)\n@@ -214,5 +220,4 @@\n-            ak = map.get(ALL);\n-            if (ak != null && access.compareTo(ak) >= 0) {\n-                ak = map.get(g.notOptName());\n-                if (ak == null || access.compareTo(ak) > 0) \/\/ note >, not >=\n-                    return true;\n+            al = map.get(ALL);\n+            if (al != null && access.compareTo(al) >= 0) {\n+                al = map.get(g.notOptName());\n+                return al == null || access.compareTo(al) > 0; \/\/ note >, not >=\n@@ -226,1 +231,1 @@\n-                setOption(ALL, Env.AccessKind.PRIVATE);\n+                setOption(ALL, AccessLevel.PRIVATE);\n@@ -241,2 +246,2 @@\n-                Env.AccessKind ak = Env.AccessKind.valueOf(StringUtils.toUpperCase(arg.substring(sep + 1)));\n-                setOption(arg.substring(0, sep), ak);\n+                var al = AccessLevel.valueOf(StringUtils.toUpperCase(arg.substring(sep + 1)));\n+                setOption(arg.substring(0, sep), al);\n@@ -248,3 +253,3 @@\n-        private void setOption(String opt, Env.AccessKind ak) {\n-            map.put(opt, (ak != null) ? ak\n-                    : opt.startsWith(\"-\") ? Env.AccessKind.PUBLIC : Env.AccessKind.PRIVATE);\n+        private void setOption(String opt, AccessLevel al) {\n+            map.put(opt, (al != null) ? al\n+                    : opt.startsWith(\"-\") ? AccessLevel.PUBLIC : AccessLevel.PRIVATE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Messages.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.javadoc.internal.tool;\n-\n-\/**\n- * The access value kinds.\n- *\/\n-public enum AccessKind {\n-    \/** Limits access to public entities *\/\n-    PUBLIC,\n-    \/** Limits access to public and protected entities *\/\n-    PROTECTED,\n-    \/** Limits access to public, protected and package private entities *\/\n-    PACKAGE,\n-    \/** No limits *\/\n-    PRIVATE;\n-}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/AccessKind.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.tool;\n+\n+import java.util.Set;\n+import javax.lang.model.element.Modifier;\n+\n+\/**\n+ * The access levels.\n+ *\n+ * These constants are ordered by their access limiting power. The bigger the\n+ * {@link #ordinal() ordinal} of a constant, the more limiting power that\n+ * constant has.\n+ *\n+ * That has a few useful implications. For example, the levels can be compared\n+ * by {@link #compareTo}. It also means that {@code AccessLevel.values()[0]} and\n+ * {@code AccessLevel.values()[values.length() - 1] and the constants with the\n+ * smallest and the biggest limiting powers respectively.\n+ *\/\n+public enum AccessLevel {\n+\n+    \/** Does not limit access *\/\n+    PRIVATE,\n+    \/** Limits access to entities that are public, protected, or declared with package access *\/\n+    PACKAGE,\n+    \/** Limits access to public and protected entities *\/\n+    PROTECTED,\n+    \/** Limits access to public entities *\/\n+    PUBLIC;\n+\n+    static { \/\/ self-test to catch unintended reordering of the constants\n+        assert PRIVATE.ordinal() == 0\n+                && PACKAGE.ordinal() == 1\n+                && PROTECTED.ordinal() == 2\n+                && PUBLIC.ordinal() == 3;\n+    }\n+\n+    public static AccessLevel of(Set<Modifier> mods) {\n+        if (mods.contains(Modifier.PUBLIC))\n+            return AccessLevel.PUBLIC;\n+        else if (mods.contains(Modifier.PROTECTED))\n+            return AccessLevel.PROTECTED;\n+        else if (mods.contains(Modifier.PRIVATE))\n+            return AccessLevel.PRIVATE;\n+        else\n+            return AccessLevel.PACKAGE;\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/AccessLevel.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -195,1 +195,1 @@\n-    private final AccessKind expandRequires;\n+    private final AccessLevel expandRequires;\n@@ -608,2 +608,2 @@\n-        final boolean expandAll = expandRequires.equals(AccessKind.PRIVATE)\n-                || expandRequires.equals(AccessKind.PACKAGE);\n+        final boolean expandAll = expandRequires.equals(AccessLevel.PRIVATE)\n+                || expandRequires.equals(AccessLevel.PACKAGE);\n@@ -660,3 +660,3 @@\n-        AccessKind accessValue = accessFilter.getAccessValue(ElementKind.PACKAGE);\n-        final boolean documentAllModulePackages = (accessValue == AccessKind.PACKAGE ||\n-                accessValue == AccessKind.PRIVATE);\n+        AccessLevel accessValue = accessFilter.getAccessValue(ElementKind.PACKAGE);\n+        final boolean documentAllModulePackages = (accessValue == AccessLevel.PACKAGE ||\n+                accessValue == AccessLevel.PRIVATE);\n@@ -665,2 +665,2 @@\n-        final boolean moduleDetailedMode = (accessValue == AccessKind.PACKAGE ||\n-                accessValue == AccessKind.PRIVATE);\n+        final boolean moduleDetailedMode = (accessValue == AccessLevel.PACKAGE ||\n+                accessValue == AccessLevel.PRIVATE);\n@@ -1188,6 +1188,2 @@\n-        \/\/ all possible access levels allowed for each element\n-        private final EnumMap<ElementKind, EnumSet<AccessKind>> filterMap =\n-                new EnumMap<>(ElementKind.class);\n-\n-        \/\/ the specified access level for each element\n-        private final EnumMap<ElementKind, AccessKind> accessMap =\n+        \/\/ the allowed access level for each element kind\n+        private final EnumMap<ElementKind, AccessLevel> allowedAccess =\n@@ -1202,2 +1198,0 @@\n-\n-            AccessKind accessValue = null;\n@@ -1205,1 +1199,1 @@\n-                accessValue = switch (kind) {\n+                var accessValue = switch (kind) {\n@@ -1212,2 +1206,1 @@\n-                accessMap.put(kind, accessValue);\n-                filterMap.put(kind, getFilterSet(accessValue));\n+                allowedAccess.put(kind, accessValue);\n@@ -1217,10 +1210,1 @@\n-        static EnumSet<AccessKind> getFilterSet(AccessKind accessValue) {\n-            return switch (accessValue) {\n-                case PUBLIC    -> EnumSet.of(AccessKind.PUBLIC);\n-                case PROTECTED -> EnumSet.of(AccessKind.PUBLIC, AccessKind.PROTECTED);\n-                case PACKAGE   -> EnumSet.of(AccessKind.PUBLIC, AccessKind.PROTECTED, AccessKind.PACKAGE);\n-                case PRIVATE   -> EnumSet.allOf(AccessKind.class);\n-            };\n-        }\n-\n-        public AccessKind getAccessValue(ElementKind kind) {\n+        public AccessLevel getAccessValue(ElementKind kind) {\n@@ -1230,1 +1214,1 @@\n-            return accessMap.getOrDefault(kind, AccessKind.PROTECTED);\n+            return allowedAccess.getOrDefault(kind, AccessLevel.PROTECTED);\n@@ -1240,11 +1224,2 @@\n-            Set<Modifier> modifiers = e.getModifiers();\n-            AccessKind fflag = AccessKind.PACKAGE;\n-            if (modifiers.contains(Modifier.PUBLIC)) {\n-                fflag = AccessKind.PUBLIC;\n-            } else if (modifiers.contains(Modifier.PROTECTED)) {\n-                fflag = AccessKind.PROTECTED;\n-            } else if (modifiers.contains(Modifier.PRIVATE)) {\n-                fflag = AccessKind.PRIVATE;\n-            }\n-            EnumSet<AccessKind> filterSet = filterMap.get(getAllowedKind(e.getKind()));\n-            return filterSet.contains(fflag);\n+            var access = AccessLevel.of(e.getModifiers());\n+            return allowedAccess.get(toTrackedKind(e.getKind())).compareTo(access) <= 0;\n@@ -1253,2 +1228,3 @@\n-        \/\/ convert a requested element kind to an allowed access kind\n-        private ElementKind getAllowedKind(ElementKind kind) {\n+        \/\/ convert the requested element kind to a tracked access kind\n+        \/\/ (access is tracked for certain kinds only)\n+        private ElementKind toTrackedKind(ElementKind kind) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ElementsTable.java","additions":19,"deletions":43,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    private AccessKind expandRequires;\n+    private AccessLevel expandRequires;\n@@ -109,1 +109,1 @@\n-    private AccessKind showMembersAccess;\n+    private AccessLevel showMembersAccess;\n@@ -114,1 +114,1 @@\n-    private AccessKind showTypesAccess;\n+    private AccessLevel showTypesAccess;\n@@ -119,1 +119,1 @@\n-    private AccessKind showPackagesAccess;\n+    private AccessLevel showPackagesAccess;\n@@ -124,1 +124,1 @@\n-    private AccessKind showModuleContents;\n+    private AccessLevel showModuleContents;\n@@ -720,1 +720,1 @@\n-    AccessKind expandRequires() {\n+    AccessLevel expandRequires() {\n@@ -749,1 +749,1 @@\n-    AccessKind showMembersAccess() {\n+    AccessLevel showMembersAccess() {\n@@ -756,1 +756,1 @@\n-    AccessKind showTypesAccess() {\n+    AccessLevel showTypesAccess() {\n@@ -763,1 +763,1 @@\n-    AccessKind showPackagesAccess() {\n+    AccessLevel showPackagesAccess() {\n@@ -770,1 +770,1 @@\n-    AccessKind showModuleContents() {\n+    AccessLevel showModuleContents() {\n@@ -888,8 +888,3 @@\n-            case \"transitive\":\n-                expandRequires = AccessKind.PUBLIC;\n-                break;\n-            case \"all\":\n-                expandRequires = AccessKind.PRIVATE;\n-                break;\n-            default:\n-                throw illegalOptionValue(arg);\n+            case \"transitive\" -> expandRequires = AccessLevel.PUBLIC;\n+            case \"all\" -> expandRequires = AccessLevel.PRIVATE;\n+            default -> throw illegalOptionValue(arg);\n@@ -901,8 +896,3 @@\n-            case \"api\":\n-                showModuleContents = AccessKind.PUBLIC;\n-                break;\n-            case \"all\":\n-                showModuleContents = AccessKind.PRIVATE;\n-                break;\n-            default:\n-                throw illegalOptionValue(arg);\n+            case \"api\" -> showModuleContents = AccessLevel.PUBLIC;\n+            case \"all\" -> showModuleContents = AccessLevel.PRIVATE;\n+            default -> throw illegalOptionValue(arg);\n@@ -914,8 +904,3 @@\n-            case \"exported\":\n-                showPackagesAccess = AccessKind.PUBLIC;\n-                break;\n-            case \"all\":\n-                showPackagesAccess = AccessKind.PRIVATE;\n-                break;\n-            default:\n-                throw illegalOptionValue(arg);\n+            case \"exported\" -> showPackagesAccess = AccessLevel.PUBLIC;\n+            case \"all\" -> showPackagesAccess = AccessLevel.PRIVATE;\n+            default -> throw illegalOptionValue(arg);\n@@ -951,1 +936,1 @@\n-    private AccessKind getAccessValue(String arg) throws OptionException {\n+    private AccessLevel getAccessValue(String arg) throws OptionException {\n@@ -953,15 +938,8 @@\n-        String value = (colon > 0)\n-                ? arg.substring(colon + 1)\n-                : arg;\n-        switch (value) {\n-            case \"public\":\n-                return AccessKind.PUBLIC;\n-            case \"protected\":\n-                return AccessKind.PROTECTED;\n-            case \"package\":\n-                return AccessKind.PACKAGE;\n-            case \"private\":\n-                return AccessKind.PRIVATE;\n-            default:\n-                throw illegalOptionValue(value);\n-        }\n+        String value = (colon > 0) ? arg.substring(colon + 1) : arg;\n+        return switch (value) {\n+            case \"public\" -> AccessLevel.PUBLIC;\n+            case \"protected\" -> AccessLevel.PROTECTED;\n+            case \"package\" -> AccessLevel.PACKAGE;\n+            case \"private\" -> AccessLevel.PRIVATE;\n+            default -> throw illegalOptionValue(value);\n+        };\n@@ -974,1 +952,1 @@\n-        setAccess(AccessKind.PROTECTED);\n+        setAccess(AccessLevel.PROTECTED);\n@@ -978,1 +956,1 @@\n-     * This sets access to all the allowed kinds in the\n+     * Sets access level to all the allowed kinds in the\n@@ -981,1 +959,1 @@\n-    private void setAccess(AccessKind accessValue) {\n+    private void setAccess(AccessLevel accessValue) {\n@@ -984,14 +962,5 @@\n-                case METHOD:\n-                    showMembersAccess = accessValue;\n-                    break;\n-                case CLASS:\n-                    showTypesAccess = accessValue;\n-                    break;\n-                case PACKAGE:\n-                    showPackagesAccess = accessValue;\n-                    break;\n-                case MODULE:\n-                    showModuleContents = accessValue;\n-                    break;\n-                default:\n-                    throw new AssertionError(\"unknown element kind:\" + kind);\n+                case METHOD -> showMembersAccess = accessValue;\n+                case CLASS -> showTypesAccess = accessValue;\n+                case PACKAGE -> showPackagesAccess = accessValue;\n+                case MODULE -> showModuleContents = accessValue;\n+                default -> throw new AssertionError(\"unknown element kind:\" + kind);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ToolOptions.java","additions":36,"deletions":67,"binary":false,"changes":103,"status":"modified"}]}