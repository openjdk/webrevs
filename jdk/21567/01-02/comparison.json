{"files":[{"patch":"@@ -1106,4 +1106,6 @@\n-    \/\/ This method is called when a DataFrame is dropped before\/without\n-    \/\/ having been added to any Stream::inputQ. In that case, the number\n-    \/\/ of unprocessed bytes hasn't been incremented by the stream, and\n-    \/\/ does not need to be decremented.\n+    \/\/ This method can be called directly when a DataFrame is dropped\n+    \/\/ before\/without having been added to any Stream::inputQ.\n+    \/\/ In that case, the number of unprocessed bytes hasn't been incremented\n+    \/\/ by the stream, and does not need to be decremented.\n+    \/\/ Otherwise, if the frame is dropped after having been added to the\n+    \/\/ inputQ, releaseUnconsumed above should be called.\n@@ -1957,1 +1959,1 @@\n-        protected boolean windowSizeExceeded(int received) {\n+        protected boolean windowSizeExceeded(long received) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http2Connection.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1770,1 +1770,1 @@\n-        protected boolean windowSizeExceeded(int received) {\n+        protected boolean windowSizeExceeded(long received) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.concurrent.atomic.AtomicLong;\n@@ -53,1 +54,1 @@\n-    final AtomicInteger received = new AtomicInteger();\n+    final AtomicLong received = new AtomicLong();\n@@ -57,1 +58,1 @@\n-    final AtomicInteger unprocessed = new AtomicInteger();\n+    final AtomicLong unprocessed = new AtomicLong();\n@@ -126,2 +127,5 @@\n-    private boolean checkWindowSizeExceeded(int len) {\n-        int rcv = Math.addExact(received.get(), len);\n+    private boolean checkWindowSizeExceeded(long len) {\n+        \/\/ because windowSize is bound by Integer.MAX_VALUE\n+        \/\/ we will never reach the point where received.get() + len\n+        \/\/ could overflow\n+        long rcv = received.get() + len;\n@@ -142,1 +146,1 @@\n-        int rest = unprocessed.addAndGet(-delta);\n+        long rest = unprocessed.addAndGet(-delta);\n@@ -164,2 +168,2 @@\n-    int released(int delta) {\n-        int rest = unprocessed.addAndGet(-delta);\n+    long released(int delta) {\n+        long rest = unprocessed.addAndGet(-delta);\n@@ -184,1 +188,1 @@\n-        int rcv = received.addAndGet(delta);\n+        long rcv = received.addAndGet(delta);\n@@ -192,1 +196,1 @@\n-                int tosend = received.get();\n+                int tosend = (int)Math.min(received.get(), Integer.MAX_VALUE);\n@@ -233,1 +237,1 @@\n-    protected abstract boolean windowSizeExceeded(int received);\n+    protected abstract boolean windowSizeExceeded(long received);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/WindowUpdateSender.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"}]}