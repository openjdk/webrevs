{"files":[{"patch":"@@ -294,40 +294,0 @@\n-\/\/ Helper function, emulates disclaim64 using multiple 32bit disclaims\n-\/\/ because we cannot use disclaim64() on old AIX releases.\n-static bool my_disclaim64(char* addr, size_t size) {\n-\n-  if (size == 0) {\n-    return true;\n-  }\n-\n-  \/\/ Maximum size 32bit disclaim() accepts. (Theoretically 4GB, but I just do not trust that.)\n-  const unsigned int maxDisclaimSize = 0x40000000;\n-\n-  const unsigned int numFullDisclaimsNeeded = (size \/ maxDisclaimSize);\n-  const unsigned int lastDisclaimSize = (size % maxDisclaimSize);\n-\n-  char* p = addr;\n-\n-  for (unsigned int i = 0; i < numFullDisclaimsNeeded; i ++) {\n-    if (::disclaim(p, maxDisclaimSize, DISCLAIM_ZEROMEM) != 0) {\n-      ErrnoPreserver ep;\n-      log_trace(os, map)(\"disclaim failed: \" RANGEFMT \" errno=(%s)\",\n-                         RANGEFMTARGS(p, maxDisclaimSize),\n-                         os::strerror(ep.saved_errno()));\n-      return false;\n-    }\n-    p += maxDisclaimSize;\n-  }\n-\n-  if (lastDisclaimSize > 0) {\n-    if (::disclaim(p, lastDisclaimSize, DISCLAIM_ZEROMEM) != 0) {\n-      ErrnoPreserver ep;\n-      log_trace(os, map)(\"disclaim failed: \" RANGEFMT \" errno=(%s)\",\n-                         RANGEFMTARGS(p, lastDisclaimSize),\n-                         os::strerror(ep.saved_errno()));\n-      return false;\n-    }\n-  }\n-\n-  return true;\n-}\n-\n@@ -1600,1 +1560,1 @@\n-  const bool rc = my_disclaim64(addr, size);\n+  const int rc = disclaim64(addr, size, DISCLAIM_ZEROMEM);\n@@ -1602,2 +1562,3 @@\n-  if (!rc) {\n-    log_warning(os)(\"my_disclaim64(\" PTR_FORMAT \", \" UINTX_FORMAT \") failed.\\n\", p2i(addr), size);\n+  if (rc != 0) {\n+    ErrnoPreserver ep;\n+    log_warning(os)(\"disclaim64(\" PTR_FORMAT \", \" UINTX_FORMAT \") failed, %s\\n\", p2i(addr), size, os::strerror(ep.saved_errno()));\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":4,"deletions":43,"binary":false,"changes":47,"status":"modified"}]}