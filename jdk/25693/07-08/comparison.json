{"files":[{"patch":"@@ -30,2 +30,0 @@\n-#include <type_traits>\n-\n@@ -38,1 +36,1 @@\n-  DEBUG_ONLY(bool _initialized);\n+  DEBUG_ONLY(bool _initialized;)\n@@ -43,24 +41,2 @@\n-  ZDeferredConstructed()\n-    DEBUG_ONLY(: _initialized(false)) {\n-    \/\/ Do not construct value immediately. Value is constructed at a later point\n-    \/\/ in time using initialize().\n-  }\n-\n-  ~ZDeferredConstructed() {\n-    assert(_initialized, \"must be initialized before being destructed\");\n-    _t.~T();\n-  }\n-\n-  T* get() {\n-    assert(_initialized, \"must be initialized before access\");\n-    return &_t;\n-  }\n-\n-  const T* get() const {\n-    assert(_initialized, \"must be initialized before access\");\n-    return &_t;\n-  }\n-\n-  T& operator*() {\n-    return *get();\n-  }\n+  ZDeferredConstructed();\n+  ~ZDeferredConstructed();\n@@ -68,3 +44,2 @@\n-  const T& operator*() const {\n-    return *get();\n-  }\n+  T* get();\n+  const T* get() const;\n@@ -72,3 +47,2 @@\n-  T* operator->() {\n-    return get();\n-  }\n+  T& operator*();\n+  const T& operator*() const;\n@@ -76,3 +50,2 @@\n-  const T* operator->() const {\n-    return get();\n-  }\n+  T* operator->();\n+  const T* operator->() const;\n@@ -81,6 +54,1 @@\n-  void initialize(Ts&&... args) {\n-    assert(!_initialized, \"Double initialization forbidden\");\n-    DEBUG_ONLY(_initialized = true);\n-    using NCVP = std::add_pointer_t<std::remove_cv_t<T>>;\n-    ::new (const_cast<NCVP>(get())) T(args...);\n-  }\n+  void initialize(Ts&&... args);\n","filename":"src\/hotspot\/share\/gc\/z\/zDeferredConstructed.hpp","additions":10,"deletions":42,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+* Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#ifndef SHARE_GC_Z_ZDEFERREDCONSTRUCTED_INLINE_HPP\n+#define SHARE_GC_Z_ZDEFERREDCONSTRUCTED_INLINE_HPP\n+\n+#include \"gc\/z\/zDeferredConstructed.hpp\"\n+\n+#include <new>\n+#include <type_traits>\n+\n+template <typename T>\n+inline ZDeferredConstructed<T>::ZDeferredConstructed()\n+  DEBUG_ONLY(: _initialized(false)) {\n+  \/\/ Do not construct value immediately. Value is constructed at a later point\n+  \/\/ in time using initialize().\n+}\n+\n+template <typename T>\n+inline ZDeferredConstructed<T>::~ZDeferredConstructed() {\n+  assert(_initialized, \"must be initialized before being destructed\");\n+  _t.~T();\n+}\n+\n+template <typename T>\n+inline T* ZDeferredConstructed<T>::get() {\n+  assert(_initialized, \"must be initialized before access\");\n+  return &_t;\n+}\n+\n+template <typename T>\n+inline const T* ZDeferredConstructed<T>::get() const {\n+  assert(_initialized, \"must be initialized before access\");\n+  return &_t;\n+}\n+\n+template <typename T>\n+inline T& ZDeferredConstructed<T>::operator*() {\n+  return *get();\n+}\n+\n+template <typename T>\n+inline const T& ZDeferredConstructed<T>::operator*() const {\n+  return *get();\n+}\n+\n+template <typename T>\n+inline T* ZDeferredConstructed<T>::operator->() {\n+  return get();\n+}\n+\n+template <typename T>\n+inline const T* ZDeferredConstructed<T>::operator->() const {\n+  return get();\n+}\n+\n+template <typename T>\n+template<typename... Ts>\n+inline void ZDeferredConstructed<T>::initialize(Ts&&... args) {\n+  assert(!_initialized, \"Double initialization forbidden\");\n+  DEBUG_ONLY(_initialized = true;);\n+  using NCVP = std::add_pointer_t<std::remove_cv_t<T>>;\n+  ::new (const_cast<NCVP>(get())) T(args...);\n+}\n+\n+#endif \/\/ SHARE_GC_Z_ZDEFERREDCONSTRUCTED_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zDeferredConstructed.inline.hpp","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"gc\/z\/zDeferredConstructed.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}