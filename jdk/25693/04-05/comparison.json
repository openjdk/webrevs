{"files":[{"patch":"@@ -43,1 +43,1 @@\n-#include \"gc\/z\/zObjectAllocator.inline.hpp\"\n+#include \"gc\/z\/zObjectAllocator.hpp\"\n@@ -844,1 +844,1 @@\n-  ZObjectAllocators::retire_pages(ZPageAgeRangeYoung);\n+  ZObjectAllocator::retire_pages(ZPageAgeRangeYoung);\n@@ -1201,1 +1201,1 @@\n-  ZObjectAllocators::retire_pages(ZPageAgeRangeOld);\n+  ZObjectAllocator::retire_pages(ZPageAgeRangeOld);\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-  size_t size = ZObjectAllocators::remaining_in_eden();\n+  size_t size = ZObjectAllocator::remaining_in_eden();\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  const zaddress addr = ZObjectAllocators::alloc_object(size, ZPageAge::eden);\n+  const zaddress addr = ZObjectAllocator::alloc_object(size, ZPageAge::eden);\n@@ -90,1 +90,1 @@\n-  return ZObjectAllocators::alloc_object(size, ZPageAge::eden);\n+  return ZObjectAllocator::alloc_object(size, ZPageAge::eden);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  ZObjectAllocators::initialize();\n+  ZObjectAllocator::initialize();\n","filename":"src\/hotspot\/share\/gc\/z\/zInitialize.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"gc\/z\/zAllocationFlags.hpp\"\n@@ -28,1 +29,1 @@\n-#include \"gc\/z\/zObjectAllocator.inline.hpp\"\n+#include \"gc\/z\/zObjectAllocator.hpp\"\n@@ -30,1 +31,2 @@\n-#include \"gc\/z\/zPageTable.inline.hpp\"\n+#include \"gc\/z\/zPageAge.inline.hpp\"\n+#include \"gc\/z\/zPageType.hpp\"\n@@ -39,0 +41,2 @@\n+#include \"utilities\/deferred.hpp\"\n+#include \"utilities\/valueObjArray.hpp\"\n@@ -43,1 +47,7 @@\n-ZObjectAllocators::Allocators ZObjectAllocators::_allocators;\n+class ZObjectAllocatorImpl {\n+public:\n+  const ZPageAge     _age;\n+  const bool         _use_per_cpu_shared_small_pages;\n+  ZPerCPU<ZPage*>    _shared_small_page;\n+  ZContended<ZPage*> _shared_medium_page;\n+  ZLock              _medium_page_alloc_lock;\n@@ -45,1 +55,34 @@\n-ZObjectAllocator::ZObjectAllocator(ZPageAge age)\n+  ZObjectAllocatorImpl(ZPageAge age);\n+\n+  ZPage** shared_small_page_addr();\n+  ZPage* const* shared_small_page_addr() const;\n+\n+  ZPage* alloc_page(ZPageType type, size_t size, ZAllocationFlags flags);\n+  void undo_alloc_page(ZPage* page);\n+\n+  \/\/ Allocate an object in a shared page. Allocate and\n+  \/\/ atomically install a new page if necessary.\n+  zaddress alloc_object_in_shared_page(ZPage** shared_page,\n+                                       ZPageType page_type,\n+                                       size_t page_size,\n+                                       size_t size,\n+                                       ZAllocationFlags flags);\n+\n+  zaddress alloc_object_in_medium_page(size_t size,\n+                                       ZAllocationFlags flags);\n+\n+  zaddress alloc_large_object(size_t size, ZAllocationFlags flags);\n+  zaddress alloc_medium_object(size_t size, ZAllocationFlags flags);\n+  zaddress alloc_small_object(size_t size, ZAllocationFlags flags);\n+  zaddress alloc_object(size_t size, ZAllocationFlags flags);\n+\n+  void retire_pages();\n+};\n+\n+static Deferred<ValueObjArray<ZObjectAllocatorImpl, ZObjectAllocator::NumAllocators>> ZObjectAllocators;\n+\n+static ZObjectAllocatorImpl* allocator(ZPageAge age) {\n+  return ZObjectAllocators->at((int)untype(age));\n+}\n+\n+ZObjectAllocatorImpl::ZObjectAllocatorImpl(ZPageAge age)\n@@ -52,1 +95,1 @@\n-ZPage** ZObjectAllocator::shared_small_page_addr() {\n+ZPage** ZObjectAllocatorImpl::shared_small_page_addr() {\n@@ -56,1 +99,1 @@\n-ZPage* const* ZObjectAllocator::shared_small_page_addr() const {\n+ZPage* const* ZObjectAllocatorImpl::shared_small_page_addr() const {\n@@ -60,1 +103,1 @@\n-ZPage* ZObjectAllocator::alloc_page(ZPageType type, size_t size, ZAllocationFlags flags) {\n+ZPage* ZObjectAllocatorImpl::alloc_page(ZPageType type, size_t size, ZAllocationFlags flags) {\n@@ -64,1 +107,1 @@\n-void ZObjectAllocator::undo_alloc_page(ZPage* page) {\n+void ZObjectAllocatorImpl::undo_alloc_page(ZPage* page) {\n@@ -68,5 +111,5 @@\n-zaddress ZObjectAllocator::alloc_object_in_shared_page(ZPage** shared_page,\n-                                                       ZPageType page_type,\n-                                                       size_t page_size,\n-                                                       size_t size,\n-                                                       ZAllocationFlags flags) {\n+zaddress ZObjectAllocatorImpl::alloc_object_in_shared_page(ZPage** shared_page,\n+                                                           ZPageType page_type,\n+                                                           size_t page_size,\n+                                                           size_t size,\n+                                                           ZAllocationFlags flags) {\n@@ -117,2 +160,2 @@\n-zaddress ZObjectAllocator::alloc_object_in_medium_page(size_t size,\n-                                                       ZAllocationFlags flags) {\n+zaddress ZObjectAllocatorImpl::alloc_object_in_medium_page(size_t size,\n+                                                           ZAllocationFlags flags) {\n@@ -166,1 +209,1 @@\n-zaddress ZObjectAllocator::alloc_large_object(size_t size, ZAllocationFlags flags) {\n+zaddress ZObjectAllocatorImpl::alloc_large_object(size_t size, ZAllocationFlags flags) {\n@@ -180,1 +223,1 @@\n-zaddress ZObjectAllocator::alloc_medium_object(size_t size, ZAllocationFlags flags) {\n+zaddress ZObjectAllocatorImpl::alloc_medium_object(size_t size, ZAllocationFlags flags) {\n@@ -184,1 +227,1 @@\n-zaddress ZObjectAllocator::alloc_small_object(size_t size, ZAllocationFlags flags) {\n+zaddress ZObjectAllocatorImpl::alloc_small_object(size_t size, ZAllocationFlags flags) {\n@@ -188,1 +231,1 @@\n-zaddress ZObjectAllocator::alloc_object(size_t size, ZAllocationFlags flags) {\n+zaddress ZObjectAllocatorImpl::alloc_object(size_t size, ZAllocationFlags flags) {\n@@ -201,1 +244,1 @@\n-void ZObjectAllocator::retire_pages() {\n+void ZObjectAllocatorImpl::retire_pages() {\n@@ -209,1 +252,1 @@\n-void ZObjectAllocators::initialize() {\n+void ZObjectAllocator::initialize() {\n@@ -211,1 +254,7 @@\n-  _allocators.initialize(it);\n+  ZObjectAllocators.initialize(it);\n+}\n+\n+void ZObjectAllocator::retire_pages(ZPageAgeRange range) {\n+  for (ZPageAge age : range) {\n+    allocator(age)->retire_pages();\n+  }\n@@ -214,1 +263,1 @@\n-size_t ZObjectAllocators::remaining_in_eden() {\n+size_t ZObjectAllocator::remaining_in_eden() {\n@@ -226,1 +275,1 @@\n-zaddress ZObjectAllocators::alloc_object(size_t size, ZPageAge age) {\n+zaddress ZObjectAllocator::alloc_object(size_t size, ZPageAge age) {\n@@ -237,1 +286,1 @@\n-void ZObjectAllocators::undo_alloc_object(zaddress addr, size_t size, ZPageAge age) {\n+void ZObjectAllocator::undo_alloc_object(zaddress addr, size_t size, ZPageAge age) {\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.cpp","additions":74,"deletions":25,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-#include \"gc\/z\/zAllocationFlags.hpp\"\n-#include \"gc\/z\/zLock.hpp\"\n@@ -31,4 +29,1 @@\n-#include \"gc\/z\/zPageType.hpp\"\n-#include \"gc\/z\/zValue.hpp\"\n-#include \"utilities\/deferred.hpp\"\n-#include \"utilities\/valueObjArray.hpp\"\n+#include \"memory\/allStatic.hpp\"\n@@ -36,42 +31,1 @@\n-class ZPage;\n-class ZPageTable;\n-\n-class ZObjectAllocator {\n-  template <typename Type, int Count> friend class ValueObjBlock;\n-  friend class ZObjectAllocators;\n-\n-private:\n-  const ZPageAge     _age;\n-  const bool         _use_per_cpu_shared_small_pages;\n-  ZPerCPU<ZPage*>    _shared_small_page;\n-  ZContended<ZPage*> _shared_medium_page;\n-  ZLock              _medium_page_alloc_lock;\n-\n-  ZPage** shared_small_page_addr();\n-  ZPage* const* shared_small_page_addr() const;\n-\n-  ZPage* alloc_page(ZPageType type, size_t size, ZAllocationFlags flags);\n-  void undo_alloc_page(ZPage* page);\n-\n-  \/\/ Allocate an object in a shared page. Allocate and\n-  \/\/ atomically install a new page if necessary.\n-  zaddress alloc_object_in_shared_page(ZPage** shared_page,\n-                                       ZPageType page_type,\n-                                       size_t page_size,\n-                                       size_t size,\n-                                       ZAllocationFlags flags);\n-\n-  zaddress alloc_object_in_medium_page(size_t size,\n-                                       ZAllocationFlags flags);\n-\n-  zaddress alloc_large_object(size_t size, ZAllocationFlags flags);\n-  zaddress alloc_medium_object(size_t size, ZAllocationFlags flags);\n-  zaddress alloc_small_object(size_t size, ZAllocationFlags flags);\n-  zaddress alloc_object(size_t size, ZAllocationFlags flags);\n-\n-  void retire_pages();\n-\n-  ZObjectAllocator(ZPageAge age);\n-};\n-\n-class ZObjectAllocators : public AllStatic {\n+class ZObjectAllocator : public AllStatic {\n@@ -82,7 +36,0 @@\n-private:\n-  using Allocators = Deferred<ValueObjArray<ZObjectAllocator, NumAllocators>>;\n-\n-  static Allocators _allocators;\n-  static ZObjectAllocator* allocator(ZPageAge age);\n-\n-public:\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.hpp","additions":2,"deletions":55,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#ifndef SHARE_GC_Z_ZOBJECTALLOCATOR_INLINE_HPP\n-#define SHARE_GC_Z_ZOBJECTALLOCATOR_INLINE_HPP\n-\n-#include \"gc\/z\/zObjectAllocator.hpp\"\n-\n-#include \"gc\/z\/zPageAge.inline.hpp\"\n-\n-inline ZObjectAllocator* ZObjectAllocators::allocator(ZPageAge age) {\n-  return _allocators->at((int)untype(age));\n-}\n-\n-inline void ZObjectAllocators::retire_pages(ZPageAgeRange range) {\n-  for (ZPageAge age : range) {\n-    allocator(age)->retire_pages();\n-  }\n-}\n-\n-#endif \/\/ SHARE_GC_Z_ZOBJECTALLOCATOR_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.inline.hpp","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -330,1 +330,1 @@\n-  const zaddress to_addr = ZObjectAllocators::alloc_object(size, to_age);\n+  const zaddress to_addr = ZObjectAllocator::alloc_object(size, to_age);\n@@ -345,1 +345,1 @@\n-    ZObjectAllocators::undo_alloc_object(to_addr, size, to_age);\n+    ZObjectAllocator::undo_alloc_object(to_addr, size, to_age);\n@@ -472,1 +472,1 @@\n-  ZPage*             _shared[ZObjectAllocators::NumRelocationAllocators];\n+  ZPage*             _shared[ZObjectAllocator::NumRelocationAllocators];\n@@ -485,1 +485,1 @@\n-    for (uint i = 0; i < ZObjectAllocators::NumRelocationAllocators; ++i) {\n+    for (uint i = 0; i < ZObjectAllocator::NumRelocationAllocators; ++i) {\n@@ -566,1 +566,1 @@\n-  ZPage*              _target[ZObjectAllocators::NumRelocationAllocators];\n+  ZPage*              _target[ZObjectAllocator::NumRelocationAllocators];\n@@ -920,1 +920,1 @@\n-    for (uint i = 0; i < ZObjectAllocators::NumRelocationAllocators; ++i) {\n+    for (uint i = 0; i < ZObjectAllocator::NumRelocationAllocators; ++i) {\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}