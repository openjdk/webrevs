{"files":[{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"gc\/z\/zAllocator.hpp\"\n-#include \"gc\/z\/zObjectAllocator.hpp\"\n-#include \"gc\/z\/zPageAge.inline.hpp\"\n-\n-ZAllocatorEden*          ZAllocator::_eden;\n-ZAllocatorForRelocation* ZAllocator::_relocation[ZAllocator::_relocation_allocators];\n-\n-ZAllocator::ZAllocator(ZPageAge age)\n-  : _object_allocator(age) {}\n-\n-void ZAllocator::retire_pages() {\n-  _object_allocator.retire_pages();\n-}\n-\n-ZAllocatorEden::ZAllocatorEden()\n-  : ZAllocator(ZPageAge::eden) {\n-  ZAllocator::_eden = this;\n-}\n-\n-size_t ZAllocatorEden::remaining() const {\n-  return _object_allocator.remaining();\n-}\n-\n-ZPageAge ZAllocatorForRelocation::install() {\n-  for (uint i = 0; i < ZAllocator::_relocation_allocators; ++i) {\n-    if (_relocation[i] == nullptr) {\n-      _relocation[i] = this;\n-      return to_zpageage(i + 1);\n-    }\n-  }\n-\n-  ShouldNotReachHere();\n-  return ZPageAge::eden;\n-}\n-\n-ZAllocatorForRelocation::ZAllocatorForRelocation()\n-  : ZAllocator(install()) {}\n-\n-zaddress ZAllocatorForRelocation::alloc_object(size_t size) {\n-  return _object_allocator.alloc_object_for_relocation(size);\n-}\n-\n-void ZAllocatorForRelocation::undo_alloc_object(zaddress addr, size_t size) {\n-  _object_allocator.undo_alloc_object_for_relocation(addr, size);\n-}\n-\n-ZPage* ZAllocatorForRelocation::alloc_page_for_relocation(ZPageType type, size_t size, ZAllocationFlags flags) {\n-  return _object_allocator.alloc_page_for_relocation(type, size, flags);\n-}\n","filename":"src\/hotspot\/share\/gc\/z\/zAllocator.cpp","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#ifndef SHARE_GC_Z_ZALLOCATOR_HPP\n-#define SHARE_GC_Z_ZALLOCATOR_HPP\n-\n-#include \"gc\/z\/zAllocationFlags.hpp\"\n-#include \"gc\/z\/zObjectAllocator.hpp\"\n-#include \"gc\/z\/zPageAge.hpp\"\n-#include \"gc\/z\/zPageType.hpp\"\n-\n-class ZAllocatorEden;\n-class ZAllocatorForRelocation;\n-class ZPage;\n-\n-class ZAllocator {\n-public:\n-  static constexpr uint _relocation_allocators = ZPageAgeCount - 1;\n-\n-protected:\n-  ZObjectAllocator _object_allocator;\n-\n-  static ZAllocatorEden*          _eden;\n-  static ZAllocatorForRelocation* _relocation[ZAllocator::_relocation_allocators];\n-\n-public:\n-  static ZAllocatorEden* eden();\n-  static ZAllocatorForRelocation* relocation(ZPageAge page_age);\n-  static ZAllocatorForRelocation* old();\n-\n-  ZAllocator(ZPageAge age);\n-\n-  void retire_pages();\n-};\n-\n-class ZAllocatorEden : public ZAllocator {\n-public:\n-  ZAllocatorEden();\n-\n-  \/\/ Mutator allocation\n-  zaddress alloc_tlab(size_t size);\n-  zaddress alloc_object(size_t size);\n-\n-  \/\/ Statistics\n-  size_t remaining() const;\n-};\n-\n-class ZAllocatorForRelocation : public ZAllocator {\n-private:\n-  ZPageAge install();\n-\n-public:\n-  ZAllocatorForRelocation();\n-\n-  \/\/ Relocation\n-  zaddress alloc_object(size_t size);\n-  void undo_alloc_object(zaddress addr, size_t size);\n-\n-  ZPage* alloc_page_for_relocation(ZPageType type, size_t size, ZAllocationFlags flags);\n-};\n-\n-#endif \/\/ SHARE_GC_Z_ZALLOCATOR_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zAllocator.hpp","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#ifndef SHARE_GC_Z_ZALLOCATOR_INLINE_HPP\n-#define SHARE_GC_Z_ZALLOCATOR_INLINE_HPP\n-\n-#include \"gc\/z\/zAllocator.hpp\"\n-\n-#include \"gc\/z\/zAddress.inline.hpp\"\n-#include \"gc\/z\/zHeap.hpp\"\n-#include \"gc\/z\/zPageAge.inline.hpp\"\n-\n-inline ZAllocatorEden* ZAllocator::eden() {\n-  return _eden;\n-}\n-\n-inline ZAllocatorForRelocation* ZAllocator::relocation(ZPageAge page_age) {\n-  return _relocation[untype(page_age - 1)];\n-}\n-\n-inline ZAllocatorForRelocation* ZAllocator::old() {\n-  return relocation(ZPageAge::old);\n-}\n-\n-inline zaddress ZAllocatorEden::alloc_tlab(size_t size) {\n-  guarantee(size <= ZHeap::heap()->max_tlab_size(), \"TLAB too large\");\n-  return _object_allocator.alloc_object(size);\n-}\n-\n-inline zaddress ZAllocatorEden::alloc_object(size_t size) {\n-  const zaddress addr = _object_allocator.alloc_object(size);\n-\n-  if (is_null(addr)) {\n-    ZHeap::heap()->out_of_memory();\n-  }\n-\n-  return addr;\n-}\n-\n-#endif \/\/ SHARE_GC_Z_ZALLOCATOR_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zAllocator.inline.hpp","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/z\/zAllocator.inline.hpp\"\n@@ -41,0 +40,1 @@\n+#include \"gc\/z\/zObjectAllocator.inline.hpp\"\n@@ -139,1 +139,1 @@\n-  const zaddress addr = ZAllocator::eden()->alloc_tlab(size_in_bytes);\n+  const zaddress addr = ZObjectAllocator::eden()->alloc_tlab(size_in_bytes);\n@@ -155,1 +155,1 @@\n-  return (HeapWord*)ZAllocator::eden()->alloc_object(size_in_bytes);\n+  return (HeapWord*)ZHeap::heap()->alloc_object(size_in_bytes);\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"gc\/z\/zAllocator.inline.hpp\"\n@@ -44,0 +43,1 @@\n+#include \"gc\/z\/zObjectAllocator.inline.hpp\"\n@@ -844,4 +844,1 @@\n-  ZAllocator::eden()->retire_pages();\n-  for (ZPageAge age : ZPageAgeRangeSurvivor) {\n-    ZAllocator::relocation(age)->retire_pages();\n-  }\n+  ZObjectAllocator::retire_pages(ZPageAgeRangeYoung);\n@@ -1204,1 +1201,1 @@\n-  ZAllocator::old()->retire_pages();\n+  ZObjectAllocator::retire_pages(ZPageAgeRangeOld);\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"gc\/z\/zObjectAllocator.inline.hpp\"\n@@ -60,2 +61,0 @@\n-    _allocator_eden(),\n-    _allocator_relocation(),\n@@ -147,1 +146,1 @@\n-  size_t size = _allocator_eden.remaining();\n+  size_t size = ZObjectAllocator::eden()->remaining();\n@@ -219,1 +218,1 @@\n-void ZHeap::out_of_memory() {\n+void ZHeap::out_of_memory() const {\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/z\/zAllocator.hpp\"\n@@ -51,3 +50,0 @@\n-  ZAllocatorEden          _allocator_eden;\n-  ZAllocatorForRelocation _allocator_relocation[ZAllocator::_relocation_allocators];\n-\n@@ -74,1 +70,1 @@\n-  void out_of_memory();\n+  void out_of_memory() const;\n@@ -118,0 +114,1 @@\n+  zaddress alloc_object(size_t size_in_bytes) const;\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"gc\/z\/zObjectAllocator.inline.hpp\"\n@@ -77,0 +78,10 @@\n+inline zaddress ZHeap::alloc_object(size_t size_in_bytes) const {\n+  const zaddress addr = ZObjectAllocator::eden()->alloc_object(size_in_bytes);\n+\n+  if (is_null(addr)) {\n+    out_of_memory();\n+  }\n+\n+  return addr;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.inline.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"gc\/z\/zObjectAllocator.hpp\"\n@@ -71,0 +72,1 @@\n+  ZObjectAllocator::initialize();\n","filename":"src\/hotspot\/share\/gc\/z\/zInitialize.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"gc\/z\/zObjectAllocator.hpp\"\n+#include \"gc\/z\/zObjectAllocator.inline.hpp\"\n@@ -43,0 +43,7 @@\n+ZObjectAllocator::Allocators ZObjectAllocator::_allocators;\n+\n+void ZObjectAllocator::initialize() {\n+  ZPageAgeRange::Iterator it = ZPageAgeRange().begin();\n+  _allocators.initialize(it);\n+}\n+\n@@ -62,4 +69,0 @@\n-ZPage* ZObjectAllocator::alloc_page_for_relocation(ZPageType type, size_t size, ZAllocationFlags flags) {\n-  return ZHeap::heap()->alloc_page(type, size, flags, _age);\n-}\n-\n@@ -204,5 +207,0 @@\n-  const ZAllocationFlags flags;\n-  return alloc_object(size, flags);\n-}\n-\n-zaddress ZObjectAllocator::alloc_object_for_relocation(size_t size) {\n@@ -210,1 +208,5 @@\n-  flags.set_non_blocking();\n+\n+  if (_age != ZPageAge::eden) {\n+    \/\/ Object allocation for relocation should not block\n+    flags.set_non_blocking();\n+  }\n@@ -215,1 +217,1 @@\n-void ZObjectAllocator::undo_alloc_object_for_relocation(zaddress addr, size_t size) {\n+void ZObjectAllocator::undo_alloc_object(zaddress addr, size_t size) {\n@@ -230,4 +232,0 @@\n-ZPageAge ZObjectAllocator::age() const {\n-  return _age;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.cpp","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+#include \"utilities\/deferred.hpp\"\n+#include \"utilities\/valueObjArray.hpp\"\n@@ -38,0 +40,6 @@\n+public:\n+  static constexpr uint NumAllocators = ZPageAgeCount;\n+  static constexpr uint NumRelocationAllocators = NumAllocators - 1;\n+\n+  typedef Deferred<ValueObjArray<ZObjectAllocator, NumAllocators>> Allocators;\n+\n@@ -39,1 +47,3 @@\n-  ZPageAge           _age;\n+  static Allocators  _allocators;\n+\n+  const ZPageAge     _age;\n@@ -67,0 +77,2 @@\n+  void retire_pages();\n+\n@@ -68,1 +80,1 @@\n-  ZObjectAllocator(ZPageAge age);\n+  static void initialize();\n@@ -70,2 +82,2 @@\n-  \/\/ Mutator allocation\n-  zaddress alloc_object(size_t size);\n+  static ZObjectAllocator* allocator(ZPageAge age);\n+  static ZObjectAllocator* eden();\n@@ -73,3 +85,1 @@\n-  \/\/ Relocation\n-  zaddress alloc_object_for_relocation(size_t size);\n-  void undo_alloc_object_for_relocation(zaddress addr, size_t size);\n+  static void retire_pages(ZPageAgeRange range);\n@@ -77,1 +87,1 @@\n-  ZPage* alloc_page_for_relocation(ZPageType type, size_t size, ZAllocationFlags flags);\n+  ZObjectAllocator(ZPageAge age);\n@@ -79,1 +89,4 @@\n-  ZPageAge age() const;\n+  \/\/ Mutator allocation\n+  zaddress alloc_tlab(size_t size);\n+  zaddress alloc_object(size_t size);\n+  void undo_alloc_object(zaddress addr, size_t size);\n@@ -82,2 +95,0 @@\n-\n-  void retire_pages();\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.hpp","additions":23,"deletions":12,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZOBJECTALLOCATOR_INLINE_HPP\n+#define SHARE_GC_Z_ZOBJECTALLOCATOR_INLINE_HPP\n+\n+#include \"gc\/z\/zObjectAllocator.hpp\"\n+\n+#include \"gc\/z\/zHeap.hpp\"\n+#include \"gc\/z\/zPageAge.inline.hpp\"\n+\n+inline ZObjectAllocator* ZObjectAllocator::allocator(ZPageAge age) {\n+  return _allocators->at((int)untype(age));\n+}\n+\n+inline ZObjectAllocator* ZObjectAllocator::eden() {\n+  return allocator(ZPageAge::eden);\n+}\n+\n+inline zaddress ZObjectAllocator::alloc_tlab(size_t size) {\n+  guarantee(size <= ZHeap::heap()->max_tlab_size(), \"TLAB too large\");\n+  return alloc_object(size);\n+}\n+\n+inline void ZObjectAllocator::retire_pages(ZPageAgeRange range) {\n+  for (ZPageAge age : range) {\n+    _allocators->at((int)untype(age))->retire_pages();\n+  }\n+}\n+\n+#endif \/\/ SHARE_GC_Z_ZOBJECTALLOCATOR_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.inline.hpp","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/z\/zAllocator.inline.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"gc\/z\/zObjectAllocator.inline.hpp\"\n@@ -329,1 +329,1 @@\n-  ZAllocatorForRelocation* allocator = ZAllocator::relocation(forwarding->to_age());\n+  ZObjectAllocator* allocator = ZObjectAllocator::allocator(forwarding->to_age());\n@@ -388,1 +388,1 @@\n-static ZPage* alloc_page(ZAllocatorForRelocation* allocator, ZPageType type, size_t size) {\n+static ZPage* alloc_page(ZForwarding* forwarding) {\n@@ -395,0 +395,4 @@\n+  const ZPageType type = forwarding->type();\n+  const size_t size = forwarding->size();\n+  const ZPageAge age = forwarding->to_age();\n+\n@@ -399,1 +403,1 @@\n-  return allocator->alloc_page_for_relocation(type, size, flags);\n+  return ZHeap::heap()->alloc_page(type, size, flags, age);\n@@ -429,2 +433,1 @@\n-    ZAllocatorForRelocation* const allocator = ZAllocator::relocation(forwarding->to_age());\n-    ZPage* const page = alloc_page(allocator, forwarding->type(), forwarding->size());\n+    ZPage* const page = alloc_page(forwarding);\n@@ -470,1 +473,1 @@\n-  ZPage*             _shared[ZAllocator::_relocation_allocators];\n+  ZPage*             _shared[ZObjectAllocator::NumRelocationAllocators];\n@@ -483,1 +486,1 @@\n-    for (uint i = 0; i < ZAllocator::_relocation_allocators; ++i) {\n+    for (uint i = 0; i < ZObjectAllocator::NumRelocationAllocators; ++i) {\n@@ -512,2 +515,1 @@\n-      ZAllocatorForRelocation* const allocator = ZAllocator::relocation(forwarding->to_age());\n-      ZPage* const to_page = alloc_page(allocator, forwarding->type(), forwarding->size());\n+      ZPage* const to_page = alloc_page(forwarding);\n@@ -565,1 +567,1 @@\n-  ZPage*              _target[ZAllocator::_relocation_allocators];\n+  ZPage*              _target[ZObjectAllocator::NumRelocationAllocators];\n@@ -919,1 +921,1 @@\n-    for (uint i = 0; i < ZAllocator::_relocation_allocators; ++i) {\n+    for (uint i = 0; i < ZObjectAllocator::NumRelocationAllocators; ++i) {\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"}]}