{"files":[{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+* Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#ifndef SHARE_GC_Z_ZDEFERREDCONSTRUCTED_HPP\n+#define SHARE_GC_Z_ZDEFERREDCONSTRUCTED_HPP\n+\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+#include <type_traits>\n+\n+template<typename T>\n+class ZDeferredConstructed {\n+  union {\n+    T _t;\n+  };\n+\n+  DEBUG_ONLY(bool _initialized);\n+\n+public:\n+  NONCOPYABLE(ZDeferredConstructed);\n+\n+  ZDeferredConstructed()\n+    DEBUG_ONLY(: _initialized(false)) {\n+    \/\/ Do not construct value immediately. Value is constructed at a later point\n+    \/\/ in time using initialize().\n+  }\n+\n+  ~ZDeferredConstructed() {\n+    assert(_initialized, \"must be initialized before being destructed\");\n+    _t.~T();\n+  }\n+\n+  T* get() {\n+    assert(_initialized, \"must be initialized before access\");\n+    return &_t;\n+  }\n+\n+  const T* get() const {\n+    assert(_initialized, \"must be initialized before access\");\n+    return &_t;\n+  }\n+\n+  T& operator*() {\n+    return *get();\n+  }\n+\n+  const T& operator*() const {\n+    return *get();\n+  }\n+\n+  T* operator->() {\n+    return get();\n+  }\n+\n+  const T* operator->() const {\n+    return get();\n+  }\n+\n+  template<typename... Ts>\n+  void initialize(Ts&&... args) {\n+    assert(!_initialized, \"Double initialization forbidden\");\n+    DEBUG_ONLY(_initialized = true);\n+    using NCVP = std::add_pointer_t<std::remove_cv_t<T>>;\n+    ::new (const_cast<NCVP>(get())) T(args...);\n+  }\n+};\n+\n+#endif \/\/ SHARE_GC_Z_ZDEFERREDCONSTRUCTED_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zDeferredConstructed.hpp","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -844,1 +844,1 @@\n-  ZObjectAllocator::retire_pages(ZPageAgeRangeYoung);\n+  ZHeap::heap()->retire_allocating_pages(ZPageAgeRangeYoung);\n@@ -1201,1 +1201,1 @@\n-  ZObjectAllocator::retire_pages(ZPageAgeRangeOld);\n+  ZHeap::heap()->retire_allocating_pages(ZPageAgeRangeOld);\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+static const ZStatCounter ZCounterUndoObjectAllocationSucceeded(\"Memory\", \"Undo Object Allocation Succeeded\", ZStatUnitOpsPerSecond);\n+static const ZStatCounter ZCounterUndoObjectAllocationFailed(\"Memory\", \"Undo Object Allocation Failed\", ZStatUnitOpsPerSecond);\n@@ -61,0 +63,1 @@\n+    _object_allocator(),\n@@ -146,1 +149,1 @@\n-  size_t size = ZObjectAllocator::remaining_in_eden();\n+  size_t size = _object_allocator.fast_available(ZPageAge::eden);\n@@ -159,0 +162,1 @@\n+\n@@ -294,0 +298,15 @@\n+void ZHeap::undo_alloc_object_for_relocation(zaddress addr, size_t size) {\n+  ZPage* const page = this->page(addr);\n+\n+  if (page->is_large()) {\n+    undo_alloc_page(page);\n+    ZStatInc(ZCounterUndoObjectAllocationSucceeded);\n+  } else {\n+    if (page->undo_alloc_object_atomic(addr, size)) {\n+      ZStatInc(ZCounterUndoObjectAllocationSucceeded);\n+    } else {\n+      ZStatInc(ZCounterUndoObjectAllocationFailed);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/z\/zObjectAllocator.hpp\"\n@@ -45,1 +46,1 @@\n-  static ZHeap*           _heap;\n+  static ZHeap*    _heap;\n@@ -47,2 +48,2 @@\n-  ZPageAllocator          _page_allocator;\n-  ZPageTable              _page_table;\n+  ZPageAllocator   _page_allocator;\n+  ZPageTable       _page_table;\n@@ -50,1 +51,1 @@\n-  ZServiceability         _serviceability;\n+  ZObjectAllocator _object_allocator;\n@@ -52,2 +53,1 @@\n-  ZGenerationOld          _old;\n-  ZGenerationYoung        _young;\n+  ZServiceability  _serviceability;\n@@ -55,1 +55,2 @@\n-  ZTLABUsage              _tlab_usage;\n+  ZGenerationOld   _old;\n+  ZGenerationYoung _young;\n@@ -57,1 +58,3 @@\n-  bool                    _initialized;\n+  ZTLABUsage       _tlab_usage;\n+\n+  bool             _initialized;\n@@ -112,0 +115,1 @@\n+  void retire_allocating_pages(ZPageAgeRange range);\n@@ -114,2 +118,5 @@\n-  zaddress alloc_object(size_t size) const;\n-  zaddress alloc_tlab(size_t size) const;\n+  zaddress alloc_object(size_t size);\n+  zaddress alloc_tlab(size_t size);\n+  zaddress alloc_object_for_relocation(size_t size, ZPageAge age);\n+  void undo_alloc_object_for_relocation(zaddress addr, size_t size);\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.hpp","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -78,2 +78,6 @@\n-inline zaddress ZHeap::alloc_object(size_t size) const {\n-  const zaddress addr = ZObjectAllocator::alloc_object(size, ZPageAge::eden);\n+inline void ZHeap::retire_allocating_pages(ZPageAgeRange range) {\n+  _object_allocator.retire_pages(range);\n+}\n+\n+inline zaddress ZHeap::alloc_object(size_t size) {\n+  const zaddress addr = _object_allocator.alloc(size);\n@@ -88,1 +92,1 @@\n-inline zaddress ZHeap::alloc_tlab(size_t size) const {\n+inline zaddress ZHeap::alloc_tlab(size_t size) {\n@@ -90,1 +94,5 @@\n-  return ZObjectAllocator::alloc_object(size, ZPageAge::eden);\n+  return _object_allocator.alloc(size);\n+}\n+\n+inline zaddress ZHeap::alloc_object_for_relocation(size_t size, ZPageAge age) {\n+  return _object_allocator.alloc_for_relocation(size, age);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.inline.hpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#include \"gc\/z\/zObjectAllocator.hpp\"\n@@ -72,1 +71,0 @@\n-  ZObjectAllocator::initialize();\n","filename":"src\/hotspot\/share\/gc\/z\/zInitialize.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"gc\/z\/zAllocationFlags.hpp\"\n@@ -33,1 +32,0 @@\n-#include \"gc\/z\/zStat.hpp\"\n@@ -35,1 +33,0 @@\n-#include \"logging\/log.hpp\"\n@@ -41,2 +38,0 @@\n-#include \"utilities\/deferred.hpp\"\n-#include \"utilities\/valueObjArray.hpp\"\n@@ -44,46 +39,1 @@\n-static const ZStatCounter ZCounterUndoObjectAllocationSucceeded(\"Memory\", \"Undo Object Allocation Succeeded\", ZStatUnitOpsPerSecond);\n-static const ZStatCounter ZCounterUndoObjectAllocationFailed(\"Memory\", \"Undo Object Allocation Failed\", ZStatUnitOpsPerSecond);\n-\n-class ZObjectAllocatorImpl {\n-private:\n-  const ZPageAge     _age;\n-  const bool         _use_per_cpu_shared_small_pages;\n-  ZPerCPU<ZPage*>    _shared_small_page;\n-  ZContended<ZPage*> _shared_medium_page;\n-  ZLock              _medium_page_alloc_lock;\n-\n-public:\n-  ZObjectAllocatorImpl(ZPageAge age);\n-\n-  ZPage** shared_small_page_addr();\n-  ZPage* const* shared_small_page_addr() const;\n-\n-  ZPage* alloc_page(ZPageType type, size_t size, ZAllocationFlags flags);\n-  void undo_alloc_page(ZPage* page);\n-\n-  \/\/ Allocate an object in a shared page. Allocate and\n-  \/\/ atomically install a new page if necessary.\n-  zaddress alloc_object_in_shared_page(ZPage** shared_page,\n-                                       ZPageType page_type,\n-                                       size_t page_size,\n-                                       size_t size,\n-                                       ZAllocationFlags flags);\n-\n-  zaddress alloc_object_in_medium_page(size_t size,\n-                                       ZAllocationFlags flags);\n-\n-  zaddress alloc_large_object(size_t size, ZAllocationFlags flags);\n-  zaddress alloc_medium_object(size_t size, ZAllocationFlags flags);\n-  zaddress alloc_small_object(size_t size, ZAllocationFlags flags);\n-  zaddress alloc_object(size_t size, ZAllocationFlags flags);\n-\n-  void retire_pages();\n-};\n-\n-static Deferred<ValueObjArray<ZObjectAllocatorImpl, ZObjectAllocator::NumAllocators>> ZObjectAllocators;\n-\n-static ZObjectAllocatorImpl* allocator(ZPageAge age) {\n-  return ZObjectAllocators->at((int)untype(age));\n-}\n-\n-ZObjectAllocatorImpl::ZObjectAllocatorImpl(ZPageAge age)\n+ZObjectAllocator::PerAge::PerAge(ZPageAge age)\n@@ -96,1 +46,1 @@\n-ZPage** ZObjectAllocatorImpl::shared_small_page_addr() {\n+ZPage** ZObjectAllocator::PerAge::shared_small_page_addr() {\n@@ -100,1 +50,1 @@\n-ZPage* const* ZObjectAllocatorImpl::shared_small_page_addr() const {\n+ZPage* const* ZObjectAllocator::PerAge::shared_small_page_addr() const {\n@@ -104,1 +54,1 @@\n-ZPage* ZObjectAllocatorImpl::alloc_page(ZPageType type, size_t size, ZAllocationFlags flags) {\n+ZPage* ZObjectAllocator::PerAge::alloc_page(ZPageType type, size_t size, ZAllocationFlags flags) {\n@@ -108,1 +58,1 @@\n-void ZObjectAllocatorImpl::undo_alloc_page(ZPage* page) {\n+void ZObjectAllocator::PerAge::undo_alloc_page(ZPage* page) {\n@@ -112,5 +62,5 @@\n-zaddress ZObjectAllocatorImpl::alloc_object_in_shared_page(ZPage** shared_page,\n-                                                           ZPageType page_type,\n-                                                           size_t page_size,\n-                                                           size_t size,\n-                                                           ZAllocationFlags flags) {\n+zaddress ZObjectAllocator::PerAge::alloc_object_in_shared_page(ZPage** shared_page,\n+                                                               ZPageType page_type,\n+                                                               size_t page_size,\n+                                                               size_t size,\n+                                                               ZAllocationFlags flags) {\n@@ -161,2 +111,2 @@\n-zaddress ZObjectAllocatorImpl::alloc_object_in_medium_page(size_t size,\n-                                                           ZAllocationFlags flags) {\n+zaddress ZObjectAllocator::PerAge::alloc_object_in_medium_page(size_t size,\n+                                                               ZAllocationFlags flags) {\n@@ -210,1 +160,1 @@\n-zaddress ZObjectAllocatorImpl::alloc_large_object(size_t size, ZAllocationFlags flags) {\n+zaddress ZObjectAllocator::PerAge::alloc_large_object(size_t size, ZAllocationFlags flags) {\n@@ -224,1 +174,1 @@\n-zaddress ZObjectAllocatorImpl::alloc_medium_object(size_t size, ZAllocationFlags flags) {\n+zaddress ZObjectAllocator::PerAge::alloc_medium_object(size_t size, ZAllocationFlags flags) {\n@@ -228,1 +178,1 @@\n-zaddress ZObjectAllocatorImpl::alloc_small_object(size_t size, ZAllocationFlags flags) {\n+zaddress ZObjectAllocator::PerAge::alloc_small_object(size_t size, ZAllocationFlags flags) {\n@@ -232,1 +182,1 @@\n-zaddress ZObjectAllocatorImpl::alloc_object(size_t size, ZAllocationFlags flags) {\n+zaddress ZObjectAllocator::PerAge::alloc_object(size_t size, ZAllocationFlags flags) {\n@@ -245,1 +195,1 @@\n-void ZObjectAllocatorImpl::retire_pages() {\n+void ZObjectAllocator::PerAge::retire_pages() {\n@@ -253,3 +203,14 @@\n-void ZObjectAllocator::initialize() {\n-  ZPageAgeRange::Iterator it = ZPageAgeRange().begin();\n-  ZObjectAllocators.initialize(it);\n+ZObjectAllocator::ZObjectAllocator()\n+  : _allocators() {\n+\n+  for (ZPageAge age : ZPageAgeRange()) {\n+    _allocators[untype(age)].initialize(age);\n+  }\n+}\n+\n+ZObjectAllocator::PerAge* ZObjectAllocator::allocator(ZPageAge age) {\n+  return _allocators[untype(age)].get();\n+}\n+\n+const ZObjectAllocator::PerAge* ZObjectAllocator::allocator(ZPageAge age) const {\n+  return _allocators[untype(age)].get();\n@@ -264,1 +225,1 @@\n-size_t ZObjectAllocator::remaining_in_eden() {\n+size_t ZObjectAllocator::fast_available(ZPageAge age) const {\n@@ -267,1 +228,1 @@\n-  ZPage** const shared_addr = allocator(ZPageAge::eden)->shared_small_page_addr();\n+  ZPage* const* const shared_addr = allocator(age)->shared_small_page_addr();\n@@ -276,1 +237,1 @@\n-zaddress ZObjectAllocator::alloc_object(size_t size, ZPageAge age) {\n+zaddress ZObjectAllocator::alloc(size_t size) {\n@@ -278,0 +239,2 @@\n+  return allocator(ZPageAge::eden)->alloc_object(size, flags);\n+}\n@@ -279,4 +242,5 @@\n-  if (age != ZPageAge::eden) {\n-    \/\/ Object allocation for relocation should not block\n-    flags.set_non_blocking();\n-  }\n+zaddress ZObjectAllocator::alloc_for_relocation(size_t size, ZPageAge age) {\n+  ZAllocationFlags flags;\n+\n+  \/\/ Object allocation for relocation should not block\n+  flags.set_non_blocking();\n@@ -287,14 +251,0 @@\n-void ZObjectAllocator::undo_alloc_object(zaddress addr, size_t size, ZPageAge age) {\n-  ZPage* const page = ZHeap::heap()->page(addr);\n-\n-  if (page->is_large()) {\n-    allocator(age)->undo_alloc_page(page);\n-    ZStatInc(ZCounterUndoObjectAllocationSucceeded);\n-  } else {\n-    if (page->undo_alloc_object_atomic(addr, size)) {\n-      ZStatInc(ZCounterUndoObjectAllocationSucceeded);\n-    } else {\n-      ZStatInc(ZCounterUndoObjectAllocationFailed);\n-    }\n-  }\n-}\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.cpp","additions":41,"deletions":91,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+#include \"gc\/z\/zAllocationFlags.hpp\"\n+#include \"gc\/z\/zDeferredConstructed.hpp\"\n+#include \"gc\/z\/zLock.hpp\"\n+#include \"gc\/z\/zPage.hpp\"\n@@ -29,1 +33,1 @@\n-#include \"memory\/allStatic.hpp\"\n+#include \"gc\/z\/zValue.hpp\"\n@@ -31,4 +35,29 @@\n-class ZObjectAllocator : public AllStatic {\n-public:\n-  static constexpr uint NumAllocators = ZPageAgeCount;\n-  static constexpr uint NumRelocationAllocators = NumAllocators - 1;\n+class ZObjectAllocator {\n+private:\n+  class PerAge {\n+  private:\n+    const ZPageAge     _age;\n+    const bool         _use_per_cpu_shared_small_pages;\n+    ZPerCPU<ZPage*>    _shared_small_page;\n+    ZContended<ZPage*> _shared_medium_page;\n+    ZLock              _medium_page_alloc_lock;\n+\n+  public:\n+    PerAge(ZPageAge age);\n+\n+    ZPage** shared_small_page_addr();\n+    ZPage* const* shared_small_page_addr() const;\n+\n+    ZPage* alloc_page(ZPageType type, size_t size, ZAllocationFlags flags);\n+    void undo_alloc_page(ZPage* page);\n+\n+    \/\/ Allocate an object in a shared page. Allocate and\n+    \/\/ atomically install a new page if necessary.\n+    zaddress alloc_object_in_shared_page(ZPage** shared_page,\n+                                         ZPageType page_type,\n+                                         size_t page_size,\n+                                         size_t size,\n+                                         ZAllocationFlags flags);\n+\n+    zaddress alloc_object_in_medium_page(size_t size,\n+                                         ZAllocationFlags flags);\n@@ -36,1 +65,4 @@\n-  static void initialize();\n+    zaddress alloc_large_object(size_t size, ZAllocationFlags flags);\n+    zaddress alloc_medium_object(size_t size, ZAllocationFlags flags);\n+    zaddress alloc_small_object(size_t size, ZAllocationFlags flags);\n+    zaddress alloc_object(size_t size, ZAllocationFlags flags);\n@@ -38,1 +70,2 @@\n-  static void retire_pages(ZPageAgeRange range);\n+    void retire_pages();\n+  };\n@@ -40,1 +73,11 @@\n-  static size_t remaining_in_eden();\n+  ZDeferredConstructed<PerAge> _allocators[ZPageAgeCount];\n+\n+  PerAge* allocator(ZPageAge age);\n+  const PerAge* allocator(ZPageAge age) const;\n+\n+public:\n+  ZObjectAllocator();\n+\n+  void retire_pages(ZPageAgeRange range);\n+\n+  size_t fast_available(ZPageAge age) const;\n@@ -43,2 +86,4 @@\n-  static zaddress alloc_object(size_t size, ZPageAge age);\n-  static void undo_alloc_object(zaddress addr, size_t size, ZPageAge age);\n+  zaddress alloc(size_t size);\n+\n+  \/\/ Mutator relocation\n+  zaddress alloc_for_relocation(size_t size, ZPageAge age);\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.hpp","additions":55,"deletions":10,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -52,0 +52,2 @@\n+constexpr uint ZNumRelocationAges = ZPageAgeCount - 1;\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAge.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -330,1 +330,1 @@\n-  const zaddress to_addr = ZObjectAllocator::alloc_object(size, to_age);\n+  const zaddress to_addr = ZHeap::heap()->alloc_object_for_relocation(size, to_age);\n@@ -345,1 +345,1 @@\n-    ZObjectAllocator::undo_alloc_object(to_addr, size, to_age);\n+    ZHeap::heap()->undo_alloc_object_for_relocation(to_addr, size);\n@@ -472,1 +472,1 @@\n-  ZPage*             _shared[ZObjectAllocator::NumRelocationAllocators];\n+  ZPage*             _shared[ZNumRelocationAges];\n@@ -485,1 +485,1 @@\n-    for (uint i = 0; i < ZObjectAllocator::NumRelocationAllocators; ++i) {\n+    for (uint i = 0; i < ZNumRelocationAges; ++i) {\n@@ -566,1 +566,1 @@\n-  ZPage*              _target[ZObjectAllocator::NumRelocationAllocators];\n+  ZPage*              _target[ZNumRelocationAges];\n@@ -920,1 +920,1 @@\n-    for (uint i = 0; i < ZObjectAllocator::NumRelocationAllocators; ++i) {\n+    for (uint i = 0; i < ZNumRelocationAges; ++i) {\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}