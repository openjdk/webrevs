{"files":[{"patch":"@@ -381,2 +381,1 @@\n-    int max_size = segments.max_size_in_bytes();\n-    HeapShared::init_root_segment_sizes(max_size);\n+    HeapShared::init_root_segment_sizes(segments.max_size_in_elems());\n@@ -385,1 +384,1 @@\n-      oop segment_oop = cast_to_oop(first_segment_addr + (c * max_size));\n+      oop segment_oop = cast_to_oop(first_segment_addr + (c * segments.max_size_in_bytes()));\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -226,0 +226,1 @@\n+  int root_index = 0;\n@@ -238,1 +239,0 @@\n-    int root_index = 0;\n@@ -248,0 +248,2 @@\n+  assert(root_index == roots->length(), \"Post-condition: All roots are handled\");\n+\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -280,1 +280,0 @@\n-    assert(is_power_of_2(max_size_in_bytes), \"must be\");\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -137,2 +137,1 @@\n-int HeapShared::_root_segment_max_size_shift;\n-int HeapShared::_root_segment_max_size_mask;\n+int HeapShared::_root_segment_max_size_elems;\n@@ -245,0 +244,16 @@\n+void HeapShared::get_segment_indexes(int idx, int& seg_idx, int& int_idx) {\n+  assert(_root_segment_max_size_elems > 0, \"sanity\");\n+\n+  \/\/ Try to avoid divisions for the common case.\n+  if (idx < _root_segment_max_size_elems) {\n+    seg_idx = 0;\n+    int_idx = idx;\n+  } else {\n+    seg_idx = idx \/ _root_segment_max_size_elems;\n+    int_idx = idx % _root_segment_max_size_elems;\n+  }\n+\n+  assert(idx == seg_idx * _root_segment_max_size_elems + int_idx,\n+         \"sanity: %d index maps to %d segment and %d internal\", idx, seg_idx, int_idx);\n+}\n+\n@@ -247,2 +262,0 @@\n-  assert(_root_segment_max_size_shift > 0, \"sanity\");\n-  assert(_root_segment_max_size_mask  > 0, \"sanity\");\n@@ -252,2 +265,2 @@\n-  int seg_idx = index >> _root_segment_max_size_shift;\n-  int int_idx = index &  _root_segment_max_size_mask;\n+  int seg_idx, int_idx;\n+  get_segment_indexes(index, seg_idx, int_idx);\n@@ -265,4 +278,2 @@\n-    assert(_root_segment_max_size_shift > 0, \"sanity\");\n-    assert(_root_segment_max_size_mask  > 0, \"sanity\");\n-    int seg_idx = index >> _root_segment_max_size_shift;\n-    int int_idx = index &  _root_segment_max_size_mask;\n+    int seg_idx, int_idx;\n+    get_segment_indexes(index, seg_idx, int_idx);\n@@ -788,4 +799,2 @@\n-void HeapShared::init_root_segment_sizes(int max_size) {\n-  assert(is_power_of_2(max_size), \"must be\");\n-  _root_segment_max_size_shift = log2i_exact(max_size);\n-  _root_segment_max_size_mask = max_size - 1;\n+void HeapShared::init_root_segment_sizes(int max_size_elems) {\n+  _root_segment_max_size_elems = max_size_elems;\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":23,"deletions":14,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -294,2 +294,1 @@\n-  static int _root_segment_max_size_shift;\n-  static int _root_segment_max_size_mask;\n+  static int _root_segment_max_size_elems;\n@@ -410,0 +409,2 @@\n+  static void get_segment_indexes(int index, int& segment_index, int& internal_index);\n+\n@@ -428,1 +429,1 @@\n-  static void init_root_segment_sizes(int max_size) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void init_root_segment_sizes(int max_size_elems) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}