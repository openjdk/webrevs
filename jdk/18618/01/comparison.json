{"files":[{"patch":"@@ -1202,1 +1202,1 @@\n-  \/\/ %%% Could store the aligned, prescaled offset in the klassoop.\n+  \/\/ Could store the aligned, prescaled offset in the klass.\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1882,1 +1882,1 @@\n-  \/\/ %%% We should store the aligned, prescaled offset in the klassoop.\n+  \/\/ We should store the aligned, prescaled offset in the klass.\n@@ -2013,1 +2013,1 @@\n-  \/\/ The loaded value is the offset from KlassOopDesc.\n+  \/\/ The loaded value is the offset from Klass.\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2505,1 +2505,1 @@\n-  \/\/ %%% Could store the aligned, prescaled offset in the klassoop.\n+  \/\/ Could store the aligned, prescaled offset in the klass.\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4342,1 +4342,1 @@\n-  \/\/ %%% Could store the aligned, prescaled offset in the klassoop.\n+  \/\/ Could store the aligned, prescaled offset in the klass.\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1326,3 +1326,3 @@\n-  Klass* univ_klass_obj = Universe::byteArrayKlassObj();\n-  assert(univ_klass_obj->modifier_flags() == (JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC), \"Sanity\");\n-  LIR_Opr prim_klass = LIR_OprFact::metadataConst(univ_klass_obj);\n+  Klass* univ_klass = Universe::byteArrayKlass();\n+  assert(univ_klass->modifier_flags() == (JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC), \"Sanity\");\n+  LIR_Opr prim_klass = LIR_OprFact::metadataConst(univ_klass);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-\n@@ -191,1 +190,1 @@\n-  Klass* k = Universe::objectArrayKlassObj(); \/\/ already relocated to point to archived klass\n+  Klass* k = Universe::objectArrayKlass(); \/\/ already relocated to point to archived klass\n@@ -318,1 +317,1 @@\n-  Klass* oak = Universe::objectArrayKlassObj(); \/\/ already relocated to point to archived klass\n+  Klass* oak = Universe::objectArrayKlass(); \/\/ already relocated to point to archived klass\n@@ -597,1 +596,1 @@\n-  update_header_for_requested_obj(requested_roots, nullptr, Universe::objectArrayKlassObj());\n+  update_header_for_requested_obj(requested_roots, nullptr, Universe::objectArrayKlass());\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-      Klass* k = Universe::typeArrayKlassObj((BasicType)i);  \/\/ this give you \"[I\", etc\n+      Klass* k = Universe::typeArrayKlass((BasicType)i);  \/\/ this give you \"[I\", etc\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -694,1 +694,1 @@\n-    if (buffered_k == Universe::objectArrayKlassObj()) {\n+    if (buffered_k == Universe::objectArrayKlass()) {\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -183,8 +183,8 @@\n-  get_metadata(Universe::boolArrayKlassObj());\n-  get_metadata(Universe::charArrayKlassObj());\n-  get_metadata(Universe::floatArrayKlassObj());\n-  get_metadata(Universe::doubleArrayKlassObj());\n-  get_metadata(Universe::byteArrayKlassObj());\n-  get_metadata(Universe::shortArrayKlassObj());\n-  get_metadata(Universe::intArrayKlassObj());\n-  get_metadata(Universe::longArrayKlassObj());\n+  get_metadata(Universe::boolArrayKlass());\n+  get_metadata(Universe::charArrayKlass());\n+  get_metadata(Universe::floatArrayKlass());\n+  get_metadata(Universe::doubleArrayKlass());\n+  get_metadata(Universe::byteArrayKlass());\n+  get_metadata(Universe::shortArrayKlass());\n+  get_metadata(Universe::intArrayKlass());\n+  get_metadata(Universe::longArrayKlass());\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  Klass* k = Universe::typeArrayKlassObj(t);\n+  Klass* k = Universe::typeArrayKlass(t);\n","filename":"src\/hotspot\/share\/ci\/ciTypeArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1262,1 +1262,1 @@\n-    Klass* aklass = Universe::typeArrayKlassObj(type);\n+    Klass* aklass = Universe::typeArrayKlass(type);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-    k = Universe::typeArrayKlassObj(t);\n+    k = Universe::typeArrayKlass(t);\n@@ -785,1 +785,1 @@\n-      k = Universe::typeArrayKlassObj(t);\n+      k = Universe::typeArrayKlass(t);\n@@ -1730,1 +1730,1 @@\n-      klass = Universe::typeArrayKlassObj(t);\n+      klass = Universe::typeArrayKlass(t);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-  return k == Universe::fillerArrayKlassObj() || k == vmClasses::FillerObject_klass();\n+  return k == Universe::fillerArrayKlass() || k == vmClasses::FillerObject_klass();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1430,1 +1430,1 @@\n-    \/\/ adjust_roots() updates Universe::_intArrayKlassObj which is\n+    \/\/ adjust_roots() updates Universe::_intArrayKlass which is\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-  ObjArrayAllocator allocator(Universe::fillerArrayKlassObj(), words, (int)len, \/* do_zero *\/ false);\n+  ObjArrayAllocator allocator(Universe::fillerArrayKlass(), words, (int)len, \/* do_zero *\/ false);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1610,1 +1610,1 @@\n-          if (arrObj->klass() == Universe::boolArrayKlassObj()) {\n+          if (arrObj->klass() == Universe::boolArrayKlass()) {\n@@ -1613,1 +1613,1 @@\n-            assert(arrObj->klass() == Universe::byteArrayKlassObj(),\n+            assert(arrObj->klass() == Universe::byteArrayKlass(),\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -453,1 +453,1 @@\n-  writer->write(cld_id(get_cld(Universe::boolArrayKlassObj()), false));\n+  writer->write(cld_id(get_cld(Universe::boolArrayKlass()), false));\n@@ -455,1 +455,1 @@\n-  writer->write(package_id(Universe::boolArrayKlassObj(), false));\n+  writer->write(package_id(Universe::boolArrayKlass(), false));\n@@ -471,8 +471,8 @@\n-  write_primitive(_writer, Universe::boolArrayKlassObj());\n-  write_primitive(_writer, Universe::byteArrayKlassObj());\n-  write_primitive(_writer, Universe::charArrayKlassObj());\n-  write_primitive(_writer, Universe::shortArrayKlassObj());\n-  write_primitive(_writer, Universe::intArrayKlassObj());\n-  write_primitive(_writer, Universe::longArrayKlassObj());\n-  write_primitive(_writer, Universe::floatArrayKlassObj());\n-  write_primitive(_writer, Universe::doubleArrayKlassObj());\n+  write_primitive(_writer, Universe::boolArrayKlass());\n+  write_primitive(_writer, Universe::byteArrayKlass());\n+  write_primitive(_writer, Universe::charArrayKlass());\n+  write_primitive(_writer, Universe::shortArrayKlass());\n+  write_primitive(_writer, Universe::intArrayKlass());\n+  write_primitive(_writer, Universe::longArrayKlass());\n+  write_primitive(_writer, Universe::floatArrayKlass());\n+  write_primitive(_writer, Universe::doubleArrayKlass());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -488,2 +488,2 @@\n-  bool isLongArray = klass == Universe::longArrayKlassObj();\n-  bool isByteArray = klass == Universe::byteArrayKlassObj();\n+  bool isLongArray = klass == Universe::longArrayKlass();\n+  bool isByteArray = klass == Universe::byteArrayKlass();\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -639,1 +639,1 @@\n-        resolved_klass = TypeArrayKlass::cast(Universe::typeArrayKlassObj(ss.type()))->array_klass(ndim, CHECK_NULL);\n+        resolved_klass = TypeArrayKlass::cast(Universe::typeArrayKlass(ss.type()))->array_klass(ndim, CHECK_NULL);\n@@ -659,1 +659,1 @@\n-    array_klass = Universe::typeArrayKlassObj(type);\n+    array_klass = Universe::typeArrayKlass(type);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1433,1 +1433,1 @@\n-    Klass* byteArrayArrayKlass = TypeArrayKlass::cast(Universe::byteArrayKlassObj  ())->array_klass(CHECK_(JVMCIObject()));\n+    Klass* byteArrayArrayKlass = TypeArrayKlass::cast(Universe::byteArrayKlass())->array_klass(CHECK_(JVMCIObject()));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,8 +86,8 @@\n-    if (_klass == Universe::boolArrayKlassObj())         name = \"<boolArrayKlass>\";         else\n-    if (_klass == Universe::charArrayKlassObj())         name = \"<charArrayKlass>\";         else\n-    if (_klass == Universe::floatArrayKlassObj())        name = \"<floatArrayKlass>\";        else\n-    if (_klass == Universe::doubleArrayKlassObj())       name = \"<doubleArrayKlass>\";       else\n-    if (_klass == Universe::byteArrayKlassObj())         name = \"<byteArrayKlass>\";         else\n-    if (_klass == Universe::shortArrayKlassObj())        name = \"<shortArrayKlass>\";        else\n-    if (_klass == Universe::intArrayKlassObj())          name = \"<intArrayKlass>\";          else\n-    if (_klass == Universe::longArrayKlassObj())         name = \"<longArrayKlass>\";         else\n+    if (_klass == Universe::boolArrayKlass())         name = \"<boolArrayKlass>\";         else\n+    if (_klass == Universe::charArrayKlass())         name = \"<charArrayKlass>\";         else\n+    if (_klass == Universe::floatArrayKlass())        name = \"<floatArrayKlass>\";        else\n+    if (_klass == Universe::doubleArrayKlass())       name = \"<doubleArrayKlass>\";       else\n+    if (_klass == Universe::byteArrayKlass())         name = \"<byteArrayKlass>\";         else\n+    if (_klass == Universe::shortArrayKlass())        name = \"<shortArrayKlass>\";        else\n+    if (_klass == Universe::intArrayKlass())          name = \"<intArrayKlass>\";          else\n+    if (_klass == Universe::longArrayKlass())         name = \"<longArrayKlass>\";         else\n@@ -173,1 +173,1 @@\n-  _ref = (HeapWord*) Universe::boolArrayKlassObj();\n+  _ref = (uintptr_t) Universe::boolArrayKlass();\n@@ -199,1 +199,1 @@\n-  return (uint)(((uintptr_t)p - (uintptr_t)_ref) >> 2);\n+  return (uint)(((uintptr_t)p - _ref) >> 2);\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -111,3 +111,2 @@\n-  \/\/ address in the perm gen) used for hashing klass\n-  \/\/ objects.\n-  HeapWord* _ref;\n+  \/\/ address in the metaspace) used for hashing klasses.\n+  uintptr_t _ref;\n","filename":"src\/hotspot\/share\/memory\/heapInspection.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  return TypeArrayKlass::cast(Universe::boolArrayKlassObj())->allocate(length, THREAD);\n+  return TypeArrayKlass::cast(Universe::boolArrayKlass())->allocate(length, THREAD);\n@@ -48,1 +48,1 @@\n-  return TypeArrayKlass::cast(Universe::charArrayKlassObj())->allocate(length, THREAD);\n+  return TypeArrayKlass::cast(Universe::charArrayKlass())->allocate(length, THREAD);\n@@ -52,1 +52,1 @@\n-  return TypeArrayKlass::cast(Universe::floatArrayKlassObj())->allocate(length, THREAD);\n+  return TypeArrayKlass::cast(Universe::floatArrayKlass())->allocate(length, THREAD);\n@@ -56,1 +56,1 @@\n-  return TypeArrayKlass::cast(Universe::doubleArrayKlassObj())->allocate(length, THREAD);\n+  return TypeArrayKlass::cast(Universe::doubleArrayKlass())->allocate(length, THREAD);\n@@ -60,1 +60,1 @@\n-  return TypeArrayKlass::cast(Universe::byteArrayKlassObj())->allocate(length, THREAD);\n+  return TypeArrayKlass::cast(Universe::byteArrayKlass())->allocate(length, THREAD);\n@@ -64,1 +64,1 @@\n-  return TypeArrayKlass::cast(Universe::shortArrayKlassObj())->allocate(length, THREAD);\n+  return TypeArrayKlass::cast(Universe::shortArrayKlass())->allocate(length, THREAD);\n@@ -68,1 +68,1 @@\n-  return TypeArrayKlass::cast(Universe::intArrayKlassObj())->allocate(length, THREAD);\n+  return TypeArrayKlass::cast(Universe::intArrayKlass())->allocate(length, THREAD);\n@@ -72,1 +72,1 @@\n-  return TypeArrayKlass::cast(Universe::longArrayKlassObj())->allocate(length, THREAD);\n+  return TypeArrayKlass::cast(Universe::longArrayKlass())->allocate(length, THREAD);\n@@ -77,2 +77,2 @@\n-  assert(Universe::objectArrayKlassObj() != nullptr, \"Too early?\");\n-  return ObjArrayKlass::cast(Universe::objectArrayKlassObj())->allocate(length, THREAD);\n+  assert(Universe::objectArrayKlass() != nullptr, \"Too early?\");\n+  return ObjArrayKlass::cast(Universe::objectArrayKlass())->allocate(length, THREAD);\n@@ -91,3 +91,3 @@\n-  Klass* type_asKlassOop = Universe::typeArrayKlassObj(type);\n-  TypeArrayKlass* type_asArrayKlass = TypeArrayKlass::cast(type_asKlassOop);\n-  typeArrayOop result = type_asArrayKlass->allocate(length, THREAD);\n+  Klass* klass = Universe::typeArrayKlass(type);\n+  TypeArrayKlass* typeArrayKlass = TypeArrayKlass::cast(klass);\n+  typeArrayOop result = typeArrayKlass->allocate(length, THREAD);\n@@ -103,3 +103,3 @@\n-  Klass* type_asKlassOop = Universe::typeArrayKlassObj(type);\n-  TypeArrayKlass* type_asArrayKlass = TypeArrayKlass::cast(type_asKlassOop);\n-  typeArrayOop result = type_asArrayKlass->allocate(length, THREAD);\n+  Klass* klass = Universe::typeArrayKlass(type);\n+  TypeArrayKlass* typeArrayKlass = TypeArrayKlass::cast(klass);\n+  typeArrayOop result = typeArrayKlass->allocate(length, THREAD);\n@@ -110,3 +110,3 @@\n-  Klass* type_asKlassOop = Universe::typeArrayKlassObj(type);\n-  TypeArrayKlass* type_asArrayKlass = TypeArrayKlass::cast(type_asKlassOop);\n-  typeArrayOop result = type_asArrayKlass->allocate_common(length, false, THREAD);\n+  Klass* klass = Universe::typeArrayKlass(type);\n+  TypeArrayKlass* typeArrayKlass = TypeArrayKlass::cast(klass);\n+  typeArrayOop result = typeArrayKlass->allocate_common(length, false, THREAD);\n","filename":"src\/hotspot\/share\/memory\/oopFactory.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -114,3 +114,3 @@\n-Klass* Universe::_typeArrayKlassObjs[T_LONG+1]        = { nullptr \/*, nullptr...*\/ };\n-Klass* Universe::_objectArrayKlassObj                 = nullptr;\n-Klass* Universe::_fillerArrayKlassObj                 = nullptr;\n+Klass* Universe::_typeArrayKlasses[T_LONG+1]        = { nullptr \/*, nullptr...*\/ };\n+Klass* Universe::_objectArrayKlass                  = nullptr;\n+Klass* Universe::_fillerArrayKlass                  = nullptr;\n@@ -268,1 +268,1 @@\n-    closure->do_klass(_typeArrayKlassObjs[i]);\n+    closure->do_klass(_typeArrayKlasses[i]);\n@@ -271,1 +271,1 @@\n-  \/\/ _fillerArrayKlassObj is used only by GC, which doesn't need to see\n+  \/\/ _fillerArrayKlass is used only by GC, which doesn't need to see\n@@ -274,1 +274,1 @@\n-  \/\/ closure->do_klass(_fillerArrayKlassObj);\n+  \/\/ closure->do_klass(_fillerArrayKlass);\n@@ -278,1 +278,1 @@\n-  it->push(&_fillerArrayKlassObj);\n+  it->push(&_fillerArrayKlass);\n@@ -280,1 +280,1 @@\n-    it->push(&_typeArrayKlassObjs[i]);\n+    it->push(&_typeArrayKlasses[i]);\n@@ -282,1 +282,1 @@\n-  it->push(&_objectArrayKlassObj);\n+  it->push(&_objectArrayKlass);\n@@ -337,1 +337,1 @@\n-  f->do_ptr(&_fillerArrayKlassObj);\n+  f->do_ptr(&_fillerArrayKlass);\n@@ -339,1 +339,1 @@\n-    f->do_ptr(&_typeArrayKlassObjs[i]);\n+    f->do_ptr(&_typeArrayKlasses[i]);\n@@ -342,1 +342,1 @@\n-  f->do_ptr(&_objectArrayKlassObj);\n+  f->do_ptr(&_objectArrayKlass);\n@@ -399,1 +399,1 @@\n-      _fillerArrayKlassObj = TypeArrayKlass::create_klass(T_INT, \"[Ljdk\/internal\/vm\/FillerElement;\", CHECK);\n+      _fillerArrayKlass = TypeArrayKlass::create_klass(T_INT, \"[Ljdk\/internal\/vm\/FillerElement;\", CHECK);\n@@ -401,1 +401,1 @@\n-        _typeArrayKlassObjs[i] = TypeArrayKlass::create_klass((BasicType)i, CHECK);\n+        _typeArrayKlasses[i] = TypeArrayKlass::create_klass((BasicType)i, CHECK);\n@@ -440,1 +440,1 @@\n-    initialize_basic_type_klass(_fillerArrayKlassObj, CHECK);\n+    initialize_basic_type_klass(_fillerArrayKlass, CHECK);\n@@ -442,8 +442,8 @@\n-    initialize_basic_type_klass(boolArrayKlassObj(), CHECK);\n-    initialize_basic_type_klass(charArrayKlassObj(), CHECK);\n-    initialize_basic_type_klass(floatArrayKlassObj(), CHECK);\n-    initialize_basic_type_klass(doubleArrayKlassObj(), CHECK);\n-    initialize_basic_type_klass(byteArrayKlassObj(), CHECK);\n-    initialize_basic_type_klass(shortArrayKlassObj(), CHECK);\n-    initialize_basic_type_klass(intArrayKlassObj(), CHECK);\n-    initialize_basic_type_klass(longArrayKlassObj(), CHECK);\n+    initialize_basic_type_klass(boolArrayKlass(), CHECK);\n+    initialize_basic_type_klass(charArrayKlass(), CHECK);\n+    initialize_basic_type_klass(floatArrayKlass(), CHECK);\n+    initialize_basic_type_klass(doubleArrayKlass(), CHECK);\n+    initialize_basic_type_klass(byteArrayKlass(), CHECK);\n+    initialize_basic_type_klass(shortArrayKlass(), CHECK);\n+    initialize_basic_type_klass(intArrayKlass(), CHECK);\n+    initialize_basic_type_klass(longArrayKlass(), CHECK);\n@@ -451,1 +451,1 @@\n-    assert(_fillerArrayKlassObj != intArrayKlassObj(),\n+    assert(_fillerArrayKlass != intArrayKlass(),\n@@ -475,1 +475,1 @@\n-  _objectArrayKlassObj = InstanceKlass::\n+  _objectArrayKlass = InstanceKlass::\n@@ -483,1 +483,1 @@\n-  _objectArrayKlassObj->append_to_sibling_list();\n+  _objectArrayKlass->append_to_sibling_list();\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-  static Klass* _typeArrayKlassObjs[T_LONG+1];\n-  static Klass* _objectArrayKlassObj;\n+  static Klass* _typeArrayKlasses[T_LONG+1];\n+  static Klass* _objectArrayKlass;\n@@ -72,1 +72,1 @@\n-  static Klass* _fillerArrayKlassObj;\n+  static Klass* _fillerArrayKlass;\n@@ -177,8 +177,8 @@\n-  static Klass* boolArrayKlassObj()                 { return typeArrayKlassObj(T_BOOLEAN); }\n-  static Klass* byteArrayKlassObj()                 { return typeArrayKlassObj(T_BYTE); }\n-  static Klass* charArrayKlassObj()                 { return typeArrayKlassObj(T_CHAR); }\n-  static Klass* intArrayKlassObj()                  { return typeArrayKlassObj(T_INT); }\n-  static Klass* shortArrayKlassObj()                { return typeArrayKlassObj(T_SHORT); }\n-  static Klass* longArrayKlassObj()                 { return typeArrayKlassObj(T_LONG); }\n-  static Klass* floatArrayKlassObj()                { return typeArrayKlassObj(T_FLOAT); }\n-  static Klass* doubleArrayKlassObj()               { return typeArrayKlassObj(T_DOUBLE); }\n+  static Klass* boolArrayKlass()                 { return typeArrayKlass(T_BOOLEAN); }\n+  static Klass* byteArrayKlass()                 { return typeArrayKlass(T_BYTE); }\n+  static Klass* charArrayKlass()                 { return typeArrayKlass(T_CHAR); }\n+  static Klass* intArrayKlass()                  { return typeArrayKlass(T_INT); }\n+  static Klass* shortArrayKlass()                { return typeArrayKlass(T_SHORT); }\n+  static Klass* longArrayKlass()                 { return typeArrayKlass(T_LONG); }\n+  static Klass* floatArrayKlass()                { return typeArrayKlass(T_FLOAT); }\n+  static Klass* doubleArrayKlass()               { return typeArrayKlass(T_DOUBLE); }\n@@ -186,1 +186,1 @@\n-  static Klass* objectArrayKlassObj()               { return _objectArrayKlassObj; }\n+  static Klass* objectArrayKlass()               { return _objectArrayKlass; }\n@@ -188,1 +188,1 @@\n-  static Klass* fillerArrayKlassObj()               { return _fillerArrayKlassObj; }\n+  static Klass* fillerArrayKlass()               { return _fillerArrayKlass; }\n@@ -190,1 +190,1 @@\n-  static Klass* typeArrayKlassObj(BasicType t) {\n+  static Klass* typeArrayKlass(BasicType t) {\n@@ -193,2 +193,2 @@\n-    assert(_typeArrayKlassObjs[t] != nullptr, \"domain check\");\n-    return _typeArrayKlassObjs[t];\n+    assert(_typeArrayKlasses[t] != nullptr, \"domain check\");\n+    return _typeArrayKlasses[t];\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1055,1 +1055,1 @@\n-    if (box.not_null() && box->klass() == Universe::objectArrayKlassObj() && box->length() > 0) {\n+    if (box.not_null() && box->klass() == Universe::objectArrayKlass() && box->length() > 0) {\n@@ -1258,1 +1258,1 @@\n-      index_info_oop->klass() != Universe::intArrayKlassObj() ||\n+      index_info_oop->klass() != Universe::intArrayKlass() ||\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-  TypeArrayKlass* tak = TypeArrayKlass::cast(Universe::typeArrayKlassObj(elem_bt));\n+  TypeArrayKlass* tak = TypeArrayKlass::cast(Universe::typeArrayKlass(elem_bt));\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -331,1 +331,1 @@\n-    return Universe::typeArrayKlassObj(type);\n+    return Universe::typeArrayKlass(type);\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  o->set_klass(Universe::boolArrayKlassObj());\n+  o->set_klass(Universe::boolArrayKlass());\n","filename":"test\/hotspot\/gtest\/oops\/test_typeArrayOop.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}