{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @run main\/othervm Connect\n@@ -33,1 +34,1 @@\n-import java.nio.charset.*;\n+import java.time.Instant;\n@@ -40,0 +41,2 @@\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+\n@@ -42,1 +45,6 @@\n-    static PrintStream log = System.err;\n+    static final PrintStream log = System.err;\n+    static final String NOW = Instant.now().toString();\n+    static final String MESSAGE = \"Hello \" + NOW;\n+    static final String OTHER = \"Hey \" + NOW;\n+    static final String RESPONSE = \"Hi \" + NOW;\n+    static final int MAX = Math.max(256, MESSAGE.getBytes(US_ASCII).length + 16);\n@@ -45,0 +53,3 @@\n+        assert MAX > MESSAGE.getBytes(US_ASCII).length;\n+        assert MAX > OTHER.getBytes(US_ASCII).length;\n+        assert MAX > RESPONSE.getBytes(US_ASCII).length;\n@@ -102,2 +113,3 @@\n-                ByteBuffer bb = ByteBuffer.allocateDirect(256);\n-                bb.put(\"hello\".getBytes());\n+                byte[] bytes = MESSAGE.getBytes(US_ASCII);\n+                ByteBuffer bb = ByteBuffer.allocateDirect(MAX);\n+                bb.put(bytes);\n@@ -105,1 +117,1 @@\n-                log.println(\"Initiator connecting to \" + connectSocketAddress);\n+                log.println(\"Initiator connecting to: \" + connectSocketAddress);\n@@ -107,0 +119,1 @@\n+                log.println(\"Initiator bound to: \" + dc.getLocalAddress());\n@@ -109,1 +122,1 @@\n-                log.println(\"Initiator attempting to write to Responder at \" + connectSocketAddress.toString());\n+                log.println(\"Initiator attempting to write to Responder at \" + connectSocketAddress);\n@@ -116,3 +129,10 @@\n-                    InetSocketAddress otherAddress = new InetSocketAddress(loopback, (port == 3333 ? 3332 : 3333));\n-                    log.println(\"Testing if Initiator throws AlreadyConnectedException\" + otherAddress.toString());\n-                    dc.send(bb, otherAddress);\n+                    try (DatagramChannel other = DatagramChannel.open()) {\n+                        InetSocketAddress otherAddress = new InetSocketAddress(loopback, 0);\n+                        other.bind(otherAddress);\n+                        log.println(\"Testing if Initiator throws AlreadyConnectedException\");\n+                        otherAddress = (InetSocketAddress) other.getLocalAddress();\n+                        assert port != otherAddress.getPort();\n+                        assert !connectSocketAddress.equals(otherAddress);\n+                        log.printf(\"Initiator sending \\\"%s\\\" to other address %s%n\", OTHER, otherAddress);\n+                        dc.send(ByteBuffer.wrap(OTHER.getBytes(US_ASCII)), otherAddress);\n+                    }\n@@ -122,0 +142,1 @@\n+                    log.println(\"Initiator got expected \" + ace);\n@@ -124,8 +145,19 @@\n-                \/\/ Read a reply\n-                bb.flip();\n-                log.println(\"Initiator waiting to read\");\n-                dc.read(bb);\n-                bb.flip();\n-                CharBuffer cb = StandardCharsets.US_ASCII.\n-                        newDecoder().decode(bb);\n-                log.println(\"Initiator received from Responder at \" + connectSocketAddress + \": \" + cb);\n+                \/\/ wait for response\n+                while (true) {\n+                    \/\/ zero out buffer\n+                    bb.clear();\n+                    bb.put(new byte[bb.remaining()]);\n+                    bb.flip();\n+\n+                    \/\/ Read a reply\n+                    log.println(\"Initiator waiting to read\");\n+                    dc.read(bb);\n+                    bb.flip();\n+                    CharBuffer cb = US_ASCII.newDecoder().decode(bb);\n+                    log.println(\"Initiator received from Responder at \" + connectSocketAddress + \": \" + cb);\n+                    if (!RESPONSE.equals(cb.toString())) {\n+                        log.println(\"Initiator received unexpected message: continue waiting\");\n+                        continue;\n+                    }\n+                    break;\n+                }\n@@ -159,20 +191,31 @@\n-            try {\n-                \/\/ Listen for a message\n-                ByteBuffer bb = ByteBuffer.allocateDirect(100);\n-                log.println(\"Responder waiting to receive\");\n-                SocketAddress sa = dc.receive(bb);\n-                bb.flip();\n-                CharBuffer cb = StandardCharsets.US_ASCII.\n-                        newDecoder().decode(bb);\n-                log.println(\"Responder received from Initiator at\" + sa +  \": \" + cb);\n-\n-                \/\/ Reply to sender\n-                dc.connect(sa);\n-                bb.flip();\n-                log.println(\"Responder attempting to write: \" + dc.getRemoteAddress().toString());\n-                dc.write(bb);\n-            } catch (Exception ex) {\n-                log.println(\"Responder threw exception: \" + ex);\n-                throw new RuntimeException(ex);\n-            } finally {\n-                log.println(\"Responder finished\");\n+            ByteBuffer bb = ByteBuffer.allocateDirect(MAX);\n+            while (true) {\n+                try {\n+                    \/\/ Listen for a message\n+                    log.println(\"Responder waiting to receive\");\n+                    SocketAddress sa = dc.receive(bb);\n+                    bb.flip();\n+                    CharBuffer cb = US_ASCII.\n+                            newDecoder().decode(bb);\n+                    log.println(\"Responder received from Initiator at \" + sa + \": \" + cb);\n+                    if (!MESSAGE.equals(cb.toString())) {\n+                        log.println(\"Responder received unexpected message: continue waiting\");\n+                        bb.clear();\n+                        continue;\n+                    }\n+\n+                    \/\/ Reply to sender\n+                    dc.connect(sa);\n+                    bb.clear();\n+                    bb.put(RESPONSE.getBytes(US_ASCII));\n+                    bb.flip();\n+                    log.println(\"Responder attempting to write: \" + dc.getRemoteAddress());\n+                    dc.write(bb);\n+                    bb.flip();\n+                    break;\n+                } catch (Exception ex) {\n+                    log.println(\"Responder threw exception: \" + ex);\n+                    throw new RuntimeException(ex);\n+                } finally {\n+                    log.println(\"Responder finished\");\n+                }\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/Connect.java","additions":81,"deletions":38,"binary":false,"changes":119,"status":"modified"}]}