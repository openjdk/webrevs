{"files":[{"patch":"@@ -4946,0 +4946,5 @@\n+        @Override\n+        public List<E> reversed() {\n+            return this;\n+        }\n+\n@@ -5313,0 +5318,12 @@\n+        public List<E> reversed() {\n+            return this;\n+        }\n+        @Override\n+        public E getFirst() {\n+            return element;\n+        }\n+        @Override\n+        public E getLast() {\n+            return element;\n+        }\n+        @Override\n@@ -5555,0 +5572,5 @@\n+        @Override\n+        public List<E> reversed() {\n+            return this;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -615,0 +615,11 @@\n+        @Override\n+        public E getFirst() {\n+            return e0;\n+        }\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public E getLast() {\n+            return e1 == EMPTY ? e0 : (E)e1;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- *          4802647 7123424 8024709 8193128 8327858\n+ *          4802647 7123424 8024709 8193128 8327858 8368178\n@@ -475,0 +475,1 @@\n+        THROWS(NoSuchElementException.class, c::getFirst, c::getLast);\n@@ -477,0 +478,1 @@\n+        equal2(c, c.reversed());\n@@ -1235,0 +1237,4 @@\n+        if (!l.isEmpty()) {\n+            equal(l.getFirst(), l.get(0));\n+            equal(l.getLast(), l.get(l.size() - 1));\n+        }\n","filename":"test\/jdk\/java\/util\/Collection\/MOAT.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,0 +138,7 @@\n+    private static void checkReversed() {\n+        List<String> copies = Collections.nCopies(10, \"content\");\n+        check(copies.equals(copies.reversed()));\n+        List<String> empty = Collections.nCopies(0, \"content\");\n+        check(empty.equals(empty.reversed()));\n+    }\n+\n@@ -152,0 +159,2 @@\n+            checkReversed();\n+\n","filename":"test\/jdk\/java\/util\/Collections\/NCopies.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import java.util.NoSuchElementException;\n+import java.util.function.Consumer;\n@@ -48,1 +50,1 @@\n-import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.assertThrows;\n@@ -386,0 +388,18 @@\n+\n+    @Test(dataProvider = \"all\")\n+    public void getFirst(List<String> act, List<String> exp) {\n+        if (!act.isEmpty()) {\n+            assertEquals(act.getFirst(), exp.getFirst());\n+        } else {\n+            assertThrows(NoSuchElementException.class, act::getFirst);\n+        }\n+    }\n+\n+    @Test(dataProvider = \"all\")\n+    public void getLast(List<String> act, List<String> exp) {\n+        if (!act.isEmpty()) {\n+            assertEquals(act.getLast(), exp.getLast());\n+        } else {\n+            assertThrows(NoSuchElementException.class, act::getLast);\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/List\/ListFactories.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}