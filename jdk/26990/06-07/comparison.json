{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -37,0 +38,1 @@\n+    @Stable\n@@ -39,0 +41,1 @@\n+    @Stable\n@@ -45,0 +48,1 @@\n+    @Stable\n@@ -55,47 +59,11 @@\n-            long[] long5pow = {\n-                    1L,\n-                    5L,\n-                    25L,\n-                    25L * 5,\n-                    25L * 25,\n-                    25L * 25 * 5,\n-                    25L * 25 * 25,\n-                    25L * 25 * 25 * 5,\n-                    25L * 25 * 25 * 25,\n-                    25L * 25 * 25 * 25 * 5,\n-                    25L * 25 * 25 * 25 * 25,\n-                    25L * 25 * 25 * 25 * 25 * 5,\n-                    25L * 25 * 25 * 25 * 25 * 25,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 5,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 5,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 5,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 5,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 5,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 5,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 5,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25,\n-                    25L * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 5,  \/\/ 5^27\n-                };\n-\n-            int[] small5pow = {\n-                    1,\n-                    5,\n-                    25,\n-                    25 * 5,\n-                    25 * 25,\n-                    25 * 25 * 5,\n-                    25 * 25 * 25,\n-                    25 * 25 * 25 * 5,\n-                    25 * 25 * 25 * 25,\n-                    25 * 25 * 25 * 25 * 5,\n-                    25 * 25 * 25 * 25 * 25,\n-                    25 * 25 * 25 * 25 * 25 * 5,\n-                    25 * 25 * 25 * 25 * 25 * 25,\n-                    25 * 25 * 25 * 25 * 25 * 25 * 5,  \/\/ 5^13\n-                };\n+            int[] small5pow = new int[13 + 1];  \/\/ 5^13 fits in an int, 5^14 does not\n+            small5pow[0] = 1;\n+            for (int i = 1; i < small5pow.length; ++i) {\n+                small5pow[i] = 5 * small5pow[i - 1];\n+            }\n+\n+            long[] long5pow = new long[27 + 1];  \/\/ 5^27 fits in a long, 5^28 does not\n+            long5pow[0] = 1;\n+            for (int i = 1; i < long5pow.length; ++i) {\n+                long5pow[i] = 5 * long5pow[i - 1];\n+            }\n@@ -962,1 +930,2 @@\n-     * Access must be synchronized for thread-safety.\n+     * Access needs not be synchronized for thread-safety, since races would\n+     * produce the same non-null value (although not the same instance).\n@@ -964,0 +933,1 @@\n+    @Stable\n@@ -980,11 +950,8 @@\n-        synchronized (LARGE_POW_5_CACHE) {\n-            FDBigInteger p5 = LARGE_POW_5_CACHE[e - MAX_FIVE_POW];\n-            if (p5 == null) {\n-                int ep = (e - 1) - (e - 1) % (MAX_FIVE_POW - 1);\n-                p5 = (ep < MAX_FIVE_POW\n-                        ? POW_5_CACHE[ep]\n-                        : LARGE_POW_5_CACHE[ep - MAX_FIVE_POW])\n-                        .mult(POW_5_CACHE[e - ep]);\n-                LARGE_POW_5_CACHE[e - MAX_FIVE_POW] = p5.makeImmutable();\n-            }\n-            return p5;\n+        FDBigInteger p5 = LARGE_POW_5_CACHE[e - MAX_FIVE_POW];\n+        if (p5 == null) {\n+            int ep = (e - 1) - (e - 1) % (MAX_FIVE_POW - 1);\n+            p5 = (ep < MAX_FIVE_POW\n+                    ? POW_5_CACHE[ep]\n+                    : LARGE_POW_5_CACHE[ep - MAX_FIVE_POW])\n+                    .mult(POW_5_CACHE[e - ep]);\n+            LARGE_POW_5_CACHE[e - MAX_FIVE_POW] = p5.makeImmutable();\n@@ -992,0 +959,1 @@\n+        return p5;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/FDBigInteger.java","additions":27,"deletions":59,"binary":false,"changes":86,"status":"modified"}]}