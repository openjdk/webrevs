{"files":[{"patch":"@@ -721,11 +721,4 @@\n-    if (UseVtableBasedCHA) {\n-      target = methodHandle(THREAD, Dependencies::find_unique_concrete_method(context,\n-                                                                              root_m->get_Method(),\n-                                                                              callee_holder->get_Klass(),\n-                                                                              this->get_Method()));\n-    } else {\n-      if (root_m->is_abstract()) {\n-        return nullptr; \/\/ not supported\n-      }\n-      target = methodHandle(THREAD, Dependencies::find_unique_concrete_method(context, root_m->get_Method()));\n-    }\n+    target = methodHandle(THREAD, Dependencies::find_unique_concrete_method(context,\n+                                                                            root_m->get_Method(),\n+                                                                            callee_holder->get_Klass(),\n+                                                                            this->get_Method()));\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -116,5 +116,1 @@\n-  if (UseVtableBasedCHA) {\n-    assert_common_4(unique_concrete_method_4, ctxk, uniqm, resolved_klass, resolved_method);\n-  } else {\n-    assert_common_2(unique_concrete_method_2, ctxk, uniqm);\n-  }\n+  assert_common_4(unique_concrete_method_4, ctxk, uniqm, resolved_klass, resolved_method);\n@@ -1477,1 +1473,0 @@\n-    assert(UseVtableBasedCHA, \"required\");\n@@ -1951,1 +1946,0 @@\n-  assert(UseVtableBasedCHA, \"required\");\n@@ -2132,1 +2126,1 @@\n-    if (UseVtableBasedCHA && changes->is_klass_init_change()) {\n+    if (changes->is_klass_init_change()) {\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -932,1 +932,1 @@\n-      if (UseVtableBasedCHA && Universe::is_fully_initialized()) {\n+      if (Universe::is_fully_initialized()) {\n@@ -1267,1 +1267,1 @@\n-void InstanceKlass::add_to_hierarchy_impl(JavaThread* current) {\n+void InstanceKlass::add_to_hierarchy(JavaThread* current) {\n@@ -1293,17 +1293,0 @@\n-void InstanceKlass::add_to_hierarchy(JavaThread* current) {\n-\n-  if (UseVtableBasedCHA || !Universe::is_fully_initialized()) {\n-    add_to_hierarchy_impl(current);\n-  } else {\n-    \/\/ In case we are not using CHA based vtables we need to make sure the loaded\n-    \/\/ deopt is completed before anyone links this class.\n-    \/\/ Linking is done with init_lock held, by loading and deopting with it\n-    \/\/ held we make sure the deopt is completed before linking.\n-    Handle h_init_lock(current, init_lock());\n-    ObjectLocker ol(h_init_lock, current);\n-    add_to_hierarchy_impl(current);\n-\n-    \/\/ This doesn't need a notify because the wait is only on the class initialization path.\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -831,3 +831,0 @@\n- private:\n-  void add_to_hierarchy_impl(JavaThread* current);\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -525,0 +525,1 @@\n+  { \"UseVtableBasedCHA\",               JDK_Version::undefined(), JDK_Version::jdk(24), JDK_Version::jdk(25) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -971,3 +971,0 @@\n-  product(bool, UseVtableBasedCHA, true,  DIAGNOSTIC,                       \\\n-          \"Use vtable information during CHA\")                              \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @requires !vm.graal.enabled & vm.opt.final.UseVtableBasedCHA == true\n+ * @requires !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/AbstractRootMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @requires !vm.graal.enabled & vm.opt.final.UseVtableBasedCHA == true\n+ * @requires !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/DefaultRootMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @requires !vm.graal.enabled & vm.opt.final.UseVtableBasedCHA == true\n+ * @requires !vm.graal.enabled\n","filename":"test\/hotspot\/jtreg\/compiler\/cha\/StrengthReduceInterfaceCall.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,117 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test id=special\n- * @summary Run invocation tests with old CHA (-XX:-UseVtableBasedCHA)\n- * @requires vm.flagless\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n- * @compile invokespecial\/Checker.java invokespecial\/ClassGenerator.java invokespecial\/Generator.java\n- *\n- * @run driver\/timeout=1800 invocationOldCHATests special\n- *\/\n-\n-\/*\n- * @test id=virtual\n- * @summary Run invocation tests with old CHA (-XX:-UseVtableBasedCHA)\n- * @requires vm.flagless\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n- * @compile invokevirtual\/Checker.java invokevirtual\/ClassGenerator.java invokevirtual\/Generator.java\n- *\n- * @run driver\/timeout=1800 invocationOldCHATests virtual\n- *\/\n-\n-\/*\n- * @test id=interface\n- * @summary Run invocation tests with old CHA (-XX:-UseVtableBasedCHA)\n- * @requires vm.flagless\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n- * @compile invokeinterface\/Checker.java invokeinterface\/ClassGenerator.java invokeinterface\/Generator.java\n- *\n- * @run driver\/timeout=1800 invocationOldCHATests interface\n- *\/\n-\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.compiler.InMemoryJavaCompiler;\n-\n-public class invocationOldCHATests {\n-\n-    public static void runTest(String whichTests, String classFileVersion) throws Throwable {\n-        System.out.println(\"\\nOld CHA invocation tests, Tests: \" + whichTests +\n-                           \", class file version: \" + classFileVersion);\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xmx128M\",\n-            \"-Xcomp\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-UseVtableBasedCHA\",\n-            \"--add-exports\", \"java.base\/jdk.internal.org.objectweb.asm=ALL-UNNAMED\",\n-            whichTests, \"--classfile_version=\" + classFileVersion);\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        try {\n-            output.shouldContain(\"EXECUTION STATUS: PASSED\");\n-            output.shouldHaveExitValue(0);\n-        } catch (Throwable e) {\n-            System.out.println(\n-                \"\\nNote that an entry such as 'B.m\/C.m' in the failure chart means that\" +\n-                \" the test case failed because method B.m was invoked but the test \" +\n-                \"expected method C.m to be invoked. Similarly, a result such as 'AME\/C.m'\" +\n-                \" means that an AbstractMethodError exception was thrown but the test\" +\n-                \" case expected method C.m to be invoked.\");\n-            System.out.println(\n-                \"\\nAlso note that passing --dump to invoke*.Generator will\" +\n-                \" dump the generated classes (for debugging purposes).\\n\");\n-\n-            throw e;\n-        }\n-    }\n-\n-    public static void main(String args[]) throws Throwable {\n-        if (args.length < 1) {\n-            throw new IllegalArgumentException(\"Should provide the test name\");\n-        }\n-        String testName = args[0];\n-\n-        \/\/ Get current major class file version and test with it.\n-        byte klassbuf[] = InMemoryJavaCompiler.compile(\"blah\", \"public class blah { }\");\n-        int major_version = klassbuf[6] << 8 | klassbuf[7];\n-\n-        switch (testName) {\n-            case \"special\":\n-                runTest(\"invokespecial.Generator\", String.valueOf(major_version));\n-                break;\n-            case \"virtual\":\n-                runTest(\"invokevirtual.Generator\", String.valueOf(major_version));\n-                break;\n-            case \"interface\":\n-                runTest(\"invokeinterface.Generator\", String.valueOf(major_version));\n-                break;\n-            default:\n-                throw new IllegalArgumentException(\"Unknown test name: \" + testName);\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/InvocationTests\/invocationOldCHATests.java","additions":0,"deletions":117,"binary":false,"changes":117,"status":"deleted"},{"patch":"@@ -389,1 +389,0 @@\n-        vmOptFinalFlag(map, \"UseVtableBasedCHA\");\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}