{"files":[{"patch":"@@ -1232,7 +1232,18 @@\n-  \/\/ Walk the node list, verifying that there is a one-to-one\n-  \/\/ correspondence between Use-Def edges and Def-Use edges\n-  \/\/ The option no_dead_code enables stronger checks that the\n-  \/\/ graph is strongly connected from root in both directions.\n-  \/\/ root_and_safepoints is used to give the starting points to\n-  \/\/ find useful nodes. If not supplied, only root is used.\n-  \/\/ Giving this makes sense only if no_dead_code == true.\n+  \/\/ Walk the node list, verifying that there is a one-to-one correspondence\n+  \/\/ between Use-Def edges and Def-Use edges The option no_dead_code enables\n+  \/\/ stronger checks that the graph is strongly connected from starting points\n+  \/\/ in both directions.\n+  \/\/ root_and_safepoints is used to give the starting points for the traversal.\n+  \/\/ If not supplied, only root is used. When this check is called after CCP,\n+  \/\/ we need to start traversal from Root and safepoints, just like CCP does its\n+  \/\/ own traversal (see PhaseCCP::transform for reasons).\n+  \/\/\n+  \/\/ To call this function, there are 2 ways to go:\n+  \/\/ - give root_and_safepoints to start traversal everywhere needed (like after CCP),\n+  \/\/ - if the whole graph is assumed to be reachable from Root's input,\n+  \/\/   root_and_safepoints is not needed (like in PhaseRemoveUseless).\n+  \/\/\n+  \/\/ Failure to specify root_and_safepoints in case the graph is not fully\n+  \/\/ reachable from Root's input make this check unsound (can miss inconsistencies)\n+  \/\/ and even incomplete (can make up non-existing problems) if no_dead_code is\n+  \/\/ true.\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8335708\n- * @summary Crash Compile::verify_graph_edges\n- * @requires vm.debug == true & vm.flavor == \"server\"\n- * @library \/test\/lib\n- *\n- * @run main\/othervm\n- *       -XX:-TieredCompilation -XX:+VerifyGraphEdges\n- *       -XX:+StressIGVN -Xcomp\n- *       -XX:CompileCommand=compileonly,compiler.loopopts.Test8335708::mainTest\n- *       compiler.loopopts.Test8335708\n- *\n- *\/\n-\n-package compiler.loopopts;\n-\n-import jdk.test.lib.Utils;\n-\n-public class Test8335708 {\n-    public static void main(String[] args) throws Exception {\n-        Thread thread = new Thread() {\n-            public void run() {\n-                Test8335708 instance = new Test8335708();\n-                byte[] a = new byte[997];\n-                for (int i = 0; i < 100; ++i) {\n-                    instance.mainTest(a, a);\n-                }\n-            }\n-        };\n-        \/\/ Give thread some time to trigger compilation\n-        thread.setDaemon(true);\n-        thread.start();\n-        Thread.sleep(Utils.adjustTimeout(500));\n-    }\n-\n-    public void mainTest(byte[] a, byte[] b) {\n-        int i = 0;\n-        while (i < (a.length - 4)) {\n-            a[i] = b[i];\n-        }\n-        while (true) {\n-            a[i] = b[i];\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/Test8335708.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8335708\n+ * @summary Crash Compile::verify_graph_edges with dead code check when safepoints are reachable but not connected back to Root's inputs\n+ * @library \/test\/lib\n+ *\n+ * @run driver compiler.loopopts.VerifyGraphEdgesWithDeadCodeCheckFromSafepoints\n+ * @run main\/othervm\n+ *       -XX:+IgnoreUnrecognizedVMOptions\n+ *       -XX:-TieredCompilation -XX:+VerifyGraphEdges\n+ *       -XX:+StressIGVN -Xcomp\n+ *       -XX:CompileCommand=compileonly,compiler.loopopts.VerifyGraphEdgesWithDeadCodeCheckFromSafepoints::mainTest\n+ *       compiler.loopopts.VerifyGraphEdgesWithDeadCodeCheckFromSafepoints\n+ *\n+ *\/\n+\n+package compiler.loopopts;\n+\n+import jdk.test.lib.Utils;\n+\n+public class VerifyGraphEdgesWithDeadCodeCheckFromSafepoints {\n+    public static void main(String[] args) throws Exception {\n+        Thread thread = new Thread() {\n+            public void run() {\n+                VerifyGraphEdgesWithDeadCodeCheckFromSafepoints instance = new VerifyGraphEdgesWithDeadCodeCheckFromSafepoints();\n+                byte[] a = new byte[997];\n+                for (int i = 0; i < 100; ++i) {\n+                    instance.mainTest(a, a);\n+                }\n+            }\n+        };\n+        \/\/ Give thread some time to trigger compilation\n+        thread.setDaemon(true);\n+        thread.start();\n+        Thread.sleep(Utils.adjustTimeout(500));\n+    }\n+\n+    public void mainTest(byte[] a, byte[] b) {\n+        int i = 0;\n+        while (i < (a.length - 4)) {\n+            a[i] = b[i];\n+        }\n+        while (true) {\n+            a[i] = b[i];\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/VerifyGraphEdgesWithDeadCodeCheckFromSafepoints.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}