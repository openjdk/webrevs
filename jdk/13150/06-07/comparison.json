{"files":[{"patch":"@@ -1,66 +1,67 @@\n-\/*\r\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\r\n-\r\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n- *\r\n- * This code is free software; you can redistribute it and\/or modify it\r\n- * under the terms of the GNU General Public License version 2 only, as\r\n- * published by the Free Software Foundation.\r\n- *\r\n- * This code is distributed in the hope that it will be useful, but WITHOUT\r\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n- * version 2 for more details (a copy is included in the LICENSE file that\r\n- * accompanied this code).\r\n- *\r\n- * You should have received a copy of the GNU General Public License version\r\n- * 2 along with this work; if not, write to the Free Software Foundation,\r\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n- *\r\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n- * or visit www.oracle.com if you need additional information or have any\r\n- * questions.\r\n- *\/\r\n-\r\n-package io;\r\n-\r\n-import org.openjdk.jmh.annotations.*;\r\n-\r\n-import java.io.BufferedInputStream;\r\n-import java.io.ByteArrayInputStream;\r\n-import java.util.concurrent.ThreadLocalRandom;\r\n-import java.util.concurrent.TimeUnit;\r\n-\r\n-@BenchmarkMode(Mode.AverageTime)\r\n-@OutputTimeUnit(TimeUnit.MICROSECONDS)\r\n-@Fork(value = 4, warmups = 0)\r\n-@Measurement(iterations = 5, time = 1)\r\n-@Warmup(iterations = 5, time = 2)\r\n-@State(Scope.Benchmark)\r\n-public class BufferedInputStreamBenchmark {\r\n-    private final int size = 1024;\r\n-    private ByteArrayInputStream bais;\r\n-\r\n-    @Setup(Level.Iteration)\r\n-    public void setup() {\r\n-        byte[] bytes = new byte[size];\r\n-        ThreadLocalRandom.current().nextBytes(bytes);\r\n-        bais = new ByteArrayInputStream(bytes);\r\n-    }\r\n-\r\n-    @Benchmark\r\n-    public byte[] readAllBytes() throws Exception {\r\n-        bais.reset();\r\n-        try (var bufferedInputStream = new BufferedInputStream(bais)) {\r\n-            return bufferedInputStream.readAllBytes();\r\n-        }\r\n-    }\r\n-\r\n-    @Benchmark\r\n-    public byte[] readAllBytesCascade() throws Exception {\r\n-        bais.reset();\r\n-        try (var bufferedInputStream = new BufferedInputStream(new BufferedInputStream(bais))) {\r\n-            return bufferedInputStream.readAllBytes();\r\n-        }\r\n-    }\r\n-}\r\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation. Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package io;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Fork(value = 4, warmups = 0)\n+@Measurement(iterations = 5, time = 1)\n+@Warmup(iterations = 5, time = 2)\n+@State(Scope.Benchmark)\n+public class BufferedInputStreamBenchmark {\n+    private final int size = 1024;\n+    private ByteArrayInputStream bais;\n+\n+    @Setup(Level.Iteration)\n+    public void setup() {\n+        byte[] bytes = new byte[size];\n+        ThreadLocalRandom.current().nextBytes(bytes);\n+        bais = new ByteArrayInputStream(bytes);\n+    }\n+\n+    @Benchmark\n+    public byte[] readAllBytes() throws Exception {\n+        bais.reset();\n+        try (var bufferedInputStream = new BufferedInputStream(bais)) {\n+            return bufferedInputStream.readAllBytes();\n+        }\n+    }\n+\n+    @Benchmark\n+    public byte[] readAllBytesCascade() throws Exception {\n+        bais.reset();\n+        try (var bufferedInputStream = new BufferedInputStream(new BufferedInputStream(bais))) {\n+            return bufferedInputStream.readAllBytes();\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/BufferedInputStreamBenchmark.java","additions":67,"deletions":66,"binary":false,"changes":133,"status":"modified"}]}