{"files":[{"patch":"@@ -60,0 +60,2 @@\n+    private static final byte[] EMPTY = new byte[0];\n+\n@@ -73,0 +75,3 @@\n+    \/\/ initial buffer size (DEFAULT_BUFFER_SIZE or size specified to constructor)\n+    private final int initialSize;\n+\n@@ -169,2 +174,3 @@\n-     * Check to make sure that buffer has not been nulled out due to\n-     * close; if not return it;\n+     * Returns the internal buffer, optionally allocating it if empty.\n+     * @param allocateIfEmpty true to allocate if empty\n+     * @throws IOException if the stream is closed (buf is null)\n@@ -172,1 +178,1 @@\n-    private byte[] getBufIfOpen() throws IOException {\n+    private byte[] getBufIfOpen(boolean allocateIfEmpty) throws IOException {\n@@ -174,1 +180,8 @@\n-        if (buffer == null)\n+        if (allocateIfEmpty && buffer == EMPTY) {\n+            buffer = new byte[initialSize];\n+            if (!U.compareAndSetReference(this, BUF_OFFSET, EMPTY, buffer)) {\n+                \/\/ re-read buf\n+                buffer = buf;\n+            }\n+        }\n+        if (buffer == null) {\n@@ -176,0 +189,1 @@\n+        }\n@@ -179,0 +193,17 @@\n+    \/**\n+     * Returns the internal buffer, allocating it if empty.\n+     * @throws IOException if the stream is closed (buf is null)\n+     *\/\n+    private byte[] getBufIfOpen() throws IOException {\n+        return getBufIfOpen(true);\n+    }\n+\n+    \/**\n+     * Throws IOException if the stream is closed (buf is null).\n+     *\/\n+    private void ensureOpen() throws IOException {\n+        if (buf == null) {\n+            throw new IOException(\"Stream closed\");\n+        }\n+    }\n+\n@@ -208,3 +239,1 @@\n-        buf = new byte[size];\n-\n-        \/\/ use monitors when BufferedInputStream is sub-classed\n+        initialSize = size;\n@@ -212,0 +241,1 @@\n+            \/\/ use internal lock and lazily create buffer when not subclassed\n@@ -213,0 +243,1 @@\n+            buf = EMPTY;\n@@ -214,0 +245,1 @@\n+            \/\/ use monitors and eagerly create buffer when subclassed\n@@ -215,0 +247,1 @@\n+            buf = new byte[size];\n@@ -310,1 +343,2 @@\n-            if (len >= getBufIfOpen().length && markpos == -1) {\n+            int size = Math.max(getBufIfOpen(false).length, initialSize);\n+            if (len >= size && markpos == -1) {\n@@ -377,1 +411,1 @@\n-        getBufIfOpen(); \/\/ Check for closed stream\n+        ensureOpen();\n@@ -424,1 +458,1 @@\n-        getBufIfOpen(); \/\/ Check for closed stream\n+        ensureOpen();\n@@ -547,1 +581,1 @@\n-        getBufIfOpen(); \/\/ Cause exception if closed\n+        ensureOpen();\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedInputStream.java","additions":45,"deletions":11,"binary":false,"changes":56,"status":"modified"}]}