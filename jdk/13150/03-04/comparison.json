{"files":[{"patch":"@@ -0,0 +1,64 @@\n+\/*\r\n+ * Copyright (c) 2020, 2022, Red Hat Inc. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\/\r\n+\r\n+package io;\r\n+\r\n+import org.openjdk.jmh.annotations.*;\r\n+\r\n+import java.io.BufferedInputStream;\r\n+import java.io.ByteArrayInputStream;\r\n+import java.util.concurrent.ThreadLocalRandom;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+@BenchmarkMode(Mode.AverageTime)\r\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\r\n+@Fork(value = 4, warmups = 0)\r\n+@Measurement(iterations = 5, time = 1)\r\n+@Warmup(iterations = 5, time = 2)\r\n+@State(Scope.Benchmark)\r\n+public class BufferedInputStreamBenchmark {\r\n+    private final int size = 1024;\r\n+    private ByteArrayInputStream bais;\r\n+    @Setup(Level.Iteration)\r\n+    public void setup() {\r\n+        byte[] bytes = new byte[size];\r\n+        ThreadLocalRandom.current().nextBytes(bytes);\r\n+        bais = new ByteArrayInputStream(bytes);\r\n+    }\r\n+\r\n+    @Benchmark\r\n+    public byte[] readAllBytes() throws Exception {\r\n+        bais.reset();\r\n+        try (var bufferedInputStream = new BufferedInputStream(bais)) {\r\n+            return bufferedInputStream.readAllBytes();\r\n+        }\r\n+    }\r\n+\r\n+    @Benchmark\r\n+    public byte[] readAllBytesCascade() throws Exception {\r\n+        bais.reset();\r\n+        try (var bufferedInputStream = new BufferedInputStream(new BufferedInputStream(bais))) {\r\n+            return bufferedInputStream.readAllBytes();\r\n+        }\r\n+    }\r\n+}\r\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/BufferedInputStreamBenchmark.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}