{"files":[{"patch":"@@ -60,0 +60,2 @@\n+    private static final byte[] EMPTY = new byte[0];\n+\n@@ -73,0 +75,3 @@\n+    \/\/ initial buffer size (DEFAULT_BUFFER_SIZE or size specified to constructor)\n+    private final int initialSize;\n+\n@@ -169,2 +174,3 @@\n-     * Check to make sure that buffer has not been nulled out due to\n-     * close; if not return it;\n+     * Returns the internal buffer, optionally allocating it if empty.\n+     * @param allocateIfEmpty true to allocate if empty\n+     * @throws IOException if the stream is closed (buf is null)\n@@ -172,1 +178,1 @@\n-    private byte[] getBufIfOpen() throws IOException {\n+    private byte[] getBufIfOpen(boolean allocateIfEmpty) throws IOException {\n@@ -174,1 +180,8 @@\n-        if (buffer == null)\n+        if (allocateIfEmpty && buffer == EMPTY) {\n+            buffer = new byte[initialSize];\n+            if (!U.compareAndSetReference(this, BUF_OFFSET, EMPTY, buffer)) {\n+                \/\/ re-read buf\n+                buffer = buf;\n+            }\n+        }\n+        if (buffer == null) {\n@@ -176,0 +189,1 @@\n+        }\n@@ -179,0 +193,17 @@\n+    \/**\n+     * Returns the internal buffer, allocating it if empty.\n+     * @throws IOException if the stream is closed (buf is null)\n+     *\/\n+    private byte[] getBufIfOpen() throws IOException {\n+        return getBufIfOpen(true);\n+    }\n+\n+    \/**\n+     * Throws IOException if the stream is closed (buf is null).\n+     *\/\n+    private void ensureOpen() throws IOException {\n+        if (buf == null) {\n+            throw new IOException(\"Stream closed\");\n+        }\n+    }\n+\n@@ -208,3 +239,1 @@\n-        buf = new byte[size];\n-\n-        \/\/ use monitors when BufferedInputStream is sub-classed\n+        initialSize = size;\n@@ -212,0 +241,1 @@\n+            \/\/ use internal lock and lazily create buffer when not subclassed\n@@ -213,0 +243,1 @@\n+            buf = EMPTY;\n@@ -214,0 +245,1 @@\n+            \/\/ use monitors and eagerly create buffer when subclassed\n@@ -215,0 +247,1 @@\n+            buf = new byte[size];\n@@ -310,1 +343,2 @@\n-            if (len >= getBufIfOpen().length && markpos == -1) {\n+            int size = Math.max(getBufIfOpen(false).length, initialSize);\n+            if (len >= size && markpos == -1) {\n@@ -377,1 +411,1 @@\n-        getBufIfOpen(); \/\/ Check for closed stream\n+        ensureOpen();\n@@ -424,1 +458,1 @@\n-        getBufIfOpen(); \/\/ Check for closed stream\n+        ensureOpen();\n@@ -547,1 +581,1 @@\n-        getBufIfOpen(); \/\/ Cause exception if closed\n+        ensureOpen();\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedInputStream.java","additions":45,"deletions":11,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\r\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\/\r\n+\r\n+package io;\r\n+\r\n+import org.openjdk.jmh.annotations.*;\r\n+\r\n+import java.io.BufferedInputStream;\r\n+import java.io.ByteArrayInputStream;\r\n+import java.util.concurrent.ThreadLocalRandom;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+@BenchmarkMode(Mode.AverageTime)\r\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\r\n+@Fork(value = 4, warmups = 0)\r\n+@Measurement(iterations = 5, time = 1)\r\n+@Warmup(iterations = 5, time = 2)\r\n+@State(Scope.Benchmark)\r\n+public class BufferedInputStreamBenchmark {\r\n+    private final int size = 1024;\r\n+    private ByteArrayInputStream bais;\r\n+\r\n+    @Setup(Level.Iteration)\r\n+    public void setup() {\r\n+        byte[] bytes = new byte[size];\r\n+        ThreadLocalRandom.current().nextBytes(bytes);\r\n+        bais = new ByteArrayInputStream(bytes);\r\n+    }\r\n+\r\n+    @Benchmark\r\n+    public byte[] readAllBytes() throws Exception {\r\n+        bais.reset();\r\n+        try (var bufferedInputStream = new BufferedInputStream(bais)) {\r\n+            return bufferedInputStream.readAllBytes();\r\n+        }\r\n+    }\r\n+\r\n+    @Benchmark\r\n+    public byte[] readAllBytesCascade() throws Exception {\r\n+        bais.reset();\r\n+        try (var bufferedInputStream = new BufferedInputStream(new BufferedInputStream(bais))) {\r\n+            return bufferedInputStream.readAllBytes();\r\n+        }\r\n+    }\r\n+}\r\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/BufferedInputStreamBenchmark.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}