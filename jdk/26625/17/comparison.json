{"files":[{"patch":"@@ -155,2 +155,0 @@\n-java\/awt\/Mixing\/AWT_Mixing\/JMenuBarOverlapping.java 8159451 linux-all,windows-all,macosx-all\n-java\/awt\/Mixing\/AWT_Mixing\/JSplitPaneOverlapping.java 6986109 generic-all\n@@ -158,3 +156,0 @@\n-java\/awt\/Mixing\/AWT_Mixing\/MixingPanelsResizing.java 8049405 generic-all\n-java\/awt\/Mixing\/AWT_Mixing\/JComboBoxOverlapping.java 8049405 macosx-all\n-java\/awt\/Mixing\/AWT_Mixing\/JPopupMenuOverlapping.java 8049405 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.awt.Component;\n@@ -25,0 +26,1 @@\n+import java.awt.KeyboardFocusManager;\n@@ -26,0 +28,2 @@\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n@@ -28,0 +32,10 @@\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowFocusListener;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.swing.FocusManager;\n+\n@@ -30,0 +44,1 @@\n+\n@@ -113,0 +128,44 @@\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        f.addFocusListener(new FocusAdapter() {\n+            @Override public void focusGained(FocusEvent e) {\n+                latch.countDown();\n+            }\n+        });\n+        if (testResize) {\n+            wasLWClicked = false;\n+            try {\n+                SwingUtilities.invokeAndWait(new Runnable() {\n+\n+                    public void run() {\n+                        testedComponent.setBounds(0, 0,\n+                                testedComponent.getPreferredSize().width,\n+                                testedComponent.getPreferredSize().height + 20);\n+                        Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager()\n+                                .getFocusOwner();\n+                        if (focusOwner == f) {\n+                            \/\/ frame already had focus\n+                            latch.countDown();\n+                        } else {\n+                            f.requestFocusInWindow();\n+                        }\n+                    }\n+                });\n+            } catch (InterruptedException ex) {\n+                fail(ex.getMessage());\n+            } catch (InvocationTargetException ex) {\n+                fail(ex.getMessage());\n+            }\n+            Point lLoc = testedComponent.getLocationOnScreen();\n+            lLoc.translate(1, testedComponent.getPreferredSize().height + 1);\n+            try {\n+                if (!latch.await(1, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Ancestor frame didn't receive focus\");\n+                }\n+                clickAndBlink(robot, lLoc);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+            return wasLWClicked;\n+        } else {\n+            latch.countDown();\n+\n@@ -115,0 +174,1 @@\n+\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/GlassPaneOverlappingTestBase.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -67,0 +67,3 @@\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JComboBoxOverlapping.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n- * @run main JMenuBarOverlapping\n+ * @run main\/timeout=180 JMenuBarOverlapping\n@@ -76,1 +76,2 @@\n-\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JMenuBarOverlapping.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+        frame.setLocationRelativeTo(null);\n@@ -78,0 +79,1 @@\n+                frame.setVisible(false);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JPopupMenuOverlapping.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,0 +73,2 @@\n+        currentAwtControl.setForeground(Color.white);\n+        currentAwtControl.setBackground(Color.white);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JSplitPaneOverlapping.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+import javax.swing.UIManager;\n+\n@@ -61,0 +63,1 @@\n+    static final int TOLERANCE_MACOSX = 15;\n@@ -78,0 +81,1 @@\n+\n@@ -80,1 +84,2 @@\n-            Process p = Runtime.getRuntime().exec(JAVA_HOME + \"\/bin\/java FrameBorderCounter\");\n+            Process p = Runtime.getRuntime()\n+                    .exec(JAVA_HOME + \"\/bin\/java FrameBorderCounter\");\n@@ -88,1 +93,3 @@\n-                throw new RuntimeException(\"FrameBorderCounter exited with not null code!\\n\" + readInputStream(p.getErrorStream()));\n+                throw new RuntimeException(\n+                        \"FrameBorderCounter exited with not null code!\\n\" +\n+                                readInputStream(p.getErrorStream()));\n@@ -98,0 +105,1 @@\n+\n@@ -113,1 +121,2 @@\n-        borderShift = Math.abs(borderShift) == 1 ? borderShift : (borderShift \/ 2);\n+        borderShift =\n+                Math.abs(borderShift) == 1 ? borderShift : (borderShift \/ 2);\n@@ -136,0 +145,1 @@\n+\n@@ -160,0 +170,1 @@\n+\n@@ -161,1 +172,2 @@\n-                lLoc.translate(frame.getWidth() + borderShift, frame.getHeight() + borderShift);\n+                lLoc.translate(frame.getWidth() + borderShift,\n+                        frame.getHeight() + borderShift);\n@@ -172,0 +184,1 @@\n+\n@@ -174,1 +187,2 @@\n-                if (!c.equals(jbColor)) {\n+                System.out.println(\"Color picked for jbutton: \" + c);\n+                if (!isAlmostEqualColor(c, jbColor)) {\n@@ -180,1 +194,2 @@\n-                if (!c.equals(awtColor)) {\n+                System.out.println(\"Color picked for awtButton: \" + c);\n+                if (!isAlmostEqualColor(c, awtColor)) {\n@@ -186,1 +201,2 @@\n-                if (!c.equals(jb2Color)) {\n+                System.out.println(\"Color picked for jbutton2: \" + c);\n+                if (!isAlmostEqualColor(c, jb2Color)) {\n@@ -192,1 +208,2 @@\n-                if (!c.equals(awt2Color)) {\n+                System.out.println(\"Color picked for awtButton2: \" + c);\n+                if (!isAlmostEqualColor(c, awt2Color)) {\n@@ -215,0 +232,1 @@\n+\n@@ -238,0 +256,8 @@\n+\n+        try {\n+            UIManager.setLookAndFeel(\n+                    UIManager.getCrossPlatformLookAndFeelClassName());\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n@@ -259,1 +285,2 @@\n-            throw new RuntimeException(\"Timed out after \" + sleepTime \/ 1000 + \" seconds\");\n+            throw new RuntimeException(\n+                    \"Timed out after \" + sleepTime \/ 1000 + \" seconds\");\n@@ -278,0 +305,1 @@\n+\n@@ -282,0 +310,1 @@\n+\n@@ -303,0 +332,1 @@\n+\n@@ -316,0 +346,13 @@\n+    private static boolean isAlmostEqualColor(Color color, Color refColor) {\n+\n+        System.out.println(\"Comparing color: \" + color + \" with reference \" +\n+                \"color: \" + refColor);\n+        return color.equals(refColor) ||\n+                Math.abs(color.getRed() - refColor.getRed()) <\n+                        TOLERANCE_MACOSX &&\n+                        Math.abs(color.getGreen() - refColor.getGreen()) <\n+                                TOLERANCE_MACOSX &&\n+                        Math.abs(color.getBlue() - refColor.getBlue()) <\n+                                TOLERANCE_MACOSX;\n+    }\n+\n@@ -317,0 +360,1 @@\n+\n@@ -318,0 +362,1 @@\n+\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/MixingPanelsResizing.java","additions":54,"deletions":9,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -385,4 +385,3 @@\n-        if ((component instanceof java.awt.Scrollbar) || isMac && (component instanceof java.awt.Button)) {\n-            return false;\n-        }\n-        return true;\n+        return !(component == null ||\n+                (component instanceof java.awt.Scrollbar) ||\n+                (isMac && (component instanceof java.awt.Button)));\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/OverlappingTestBase.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -162,0 +162,1 @@\n+\n@@ -168,0 +169,14 @@\n+        } else {\n+            latch.countDown();\n+        }\n+        try {\n+            boolean await = latch.await(1, TimeUnit.SECONDS);\n+            if (!await) {\n+                throw new RuntimeException(\"Ancestor frame didn't receive \" +\n+                        \"focus\");\n+            }\n+            clickAndBlink(robot, lLoc);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n@@ -183,0 +198,1 @@\n+\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/SimpleOverlappingTestBase.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}