{"files":[{"patch":"@@ -401,0 +401,2 @@\n+    case Op_RegI: \/\/ RA may place scalar values (Op_RegI\/N\/L\/P) in FP registers when UseFPUForSpilling is enabled\n+    case Op_RegN:\n@@ -402,1 +404,1 @@\n-      assert(opto_reg % 4 == 0, \"Float register should only occupy a single slot\");\n+      assert(opto_reg % 4 == 0, \"32-bit register should only occupy a single slot\");\n@@ -409,0 +411,2 @@\n+    case Op_RegL:\n+    case Op_RegP:\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,8 +38,17 @@\n-#define DEF_RV_FEATURE(NAME, PRETTY, BIT, FSTRING, FLAGF)       \\\n-VM_Version::NAME##RVFeatureValue VM_Version::NAME(PRETTY, BIT, FSTRING);\n-RV_FEATURE_FLAGS(DEF_RV_FEATURE)\n-\n-#define ADD_RV_FEATURE_IN_LIST(NAME, PRETTY, BIT, FSTRING, FLAGF) \\\n-    &VM_Version::NAME,\n-VM_Version::RVFeatureValue* VM_Version::_feature_list[] = {\n-RV_FEATURE_FLAGS(ADD_RV_FEATURE_IN_LIST)\n+#define DEF_RV_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+VM_Version::NAME##RVExtFeatureValue VM_Version::NAME;\n+RV_EXT_FEATURE_FLAGS(DEF_RV_EXT_FEATURE)\n+#undef DEF_RV_EXT_FEATURE\n+\n+#define DEF_RV_NON_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+VM_Version::NAME##RVNonExtFeatureValue VM_Version::NAME;\n+RV_NON_EXT_FEATURE_FLAGS(DEF_RV_NON_EXT_FEATURE)\n+#undef DEF_RV_NON_EXT_FEATURE\n+\n+#define ADD_RV_EXT_FEATURE_IN_LIST(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+     &VM_Version::NAME,\n+#define ADD_RV_NON_EXT_FEATURE_IN_LIST(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) \\\n+     &VM_Version::NAME,\n+ VM_Version::RVFeatureValue* VM_Version::_feature_list[] = {\n+ RV_EXT_FEATURE_FLAGS(ADD_RV_EXT_FEATURE_IN_LIST)\n+ RV_NON_EXT_FEATURE_FLAGS(ADD_RV_NON_EXT_FEATURE_IN_LIST)\n@@ -47,0 +56,4 @@\n+#undef ADD_RV_NON_EXT_FEATURE_IN_LIST\n+#undef ADD_RV_EXT_FEATURE_IN_LIST\n+\n+VM_Version::RVExtFeatures* VM_Version::_rv_ext_features = new VM_Version::RVExtFeatures();\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+  class RVExtFeatures;\n+\n@@ -52,2 +54,1 @@\n-    const uint64_t    _feature_bit;\n-    bool              _enabled;\n+    const uint64_t    _linux_feature_bit;\n@@ -56,3 +57,3 @@\n-    RVFeatureValue(const char* pretty, int bit_num, bool fstring) :\n-      _pretty(pretty), _feature_string(fstring), _feature_bit(nth_bit(bit_num)),\n-      _enabled(false), _value(-1) {\n+    RVFeatureValue(const char* pretty, int linux_bit_num, bool fstring) :\n+      _pretty(pretty), _feature_string(fstring), _linux_feature_bit(nth_bit(linux_bit_num)),\n+      _value(-1) {\n@@ -60,2 +61,1 @@\n-    void enable_feature(int64_t value = 0) {\n-      _enabled = true;\n+    virtual void enable_feature(int64_t value = 0) {\n@@ -64,2 +64,1 @@\n-    void disable_feature() {\n-      _enabled = false;\n+    virtual void disable_feature() {\n@@ -69,1 +68,1 @@\n-    uint64_t feature_bit()       { return _feature_bit; }\n+    uint64_t feature_bit()       { return _linux_feature_bit; }\n@@ -71,1 +70,0 @@\n-    bool enabled()               { return _enabled; }\n@@ -73,0 +71,1 @@\n+    virtual bool enabled() = 0;\n@@ -114,0 +113,39 @@\n+\n+  class RVExtFeatureValue : public RVFeatureValue {\n+    const uint32_t _cpu_feature_index;\n+   public:\n+    RVExtFeatureValue(const char* pretty, int linux_bit_num, uint32_t cpu_feature_index, bool fstring) :\n+      RVFeatureValue(pretty, linux_bit_num, fstring),\n+      _cpu_feature_index(cpu_feature_index) {\n+    }\n+    bool enabled() {\n+      return RVExtFeatures::current()->support_feature(_cpu_feature_index);\n+    }\n+    void enable_feature(int64_t value = 0) {\n+      RVFeatureValue::enable_feature(value);\n+      RVExtFeatures::current()->set_feature(_cpu_feature_index);\n+    }\n+    void disable_feature() {\n+      RVFeatureValue::disable_feature();\n+      RVExtFeatures::current()->clear_feature(_cpu_feature_index);\n+    }\n+  };\n+\n+  class RVNonExtFeatureValue : public RVFeatureValue {\n+    bool _enabled;\n+   public:\n+    RVNonExtFeatureValue(const char* pretty, int linux_bit_num, bool fstring) :\n+      RVFeatureValue(pretty, linux_bit_num, fstring),\n+      _enabled(false) {\n+    }\n+    bool enabled()               { return _enabled; }\n+    void enable_feature(int64_t value = 0) {\n+      RVFeatureValue::enable_feature(value);\n+      _enabled = true;\n+    }\n+    void disable_feature() {\n+      RVFeatureValue::disable_feature();\n+      _enabled = false;\n+    }\n+  };\n+\n@@ -164,52 +202,134 @@\n-  \/\/ declaration name  , extension name, bit pos       ,in str, mapped flag)\n-  #define RV_FEATURE_FLAGS(decl)                                                                        \\\n-  decl(ext_I            , \"i\"              ,    ('I' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_M            , \"m\"              ,    ('M' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_A            , \"a\"              ,    ('A' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_F            , \"f\"              ,    ('F' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_D            , \"d\"              ,    ('D' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_C            , \"c\"              ,    ('C' - 'A'), true , UPDATE_DEFAULT(UseRVC))             \\\n-  decl(ext_Q            , \"q\"              ,    ('Q' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_H            , \"h\"              ,    ('H' - 'A'), true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_V            , \"v\"              ,    ('V' - 'A'), true , UPDATE_DEFAULT(UseRVV))             \\\n-  decl(ext_Zicbom       , \"Zicbom\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicbom))          \\\n-  decl(ext_Zicboz       , \"Zicboz\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicboz))          \\\n-  decl(ext_Zicbop       , \"Zicbop\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicbop))          \\\n-  decl(ext_Zba          , \"Zba\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZba))             \\\n-  decl(ext_Zbb          , \"Zbb\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbb))             \\\n-  decl(ext_Zbc          , \"Zbc\"            , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zbs          , \"Zbs\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbs))             \\\n-  decl(ext_Zbkb         , \"Zbkb\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZbkb))            \\\n-  decl(ext_Zcb          , \"Zcb\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZcb))             \\\n-  decl(ext_Zfa          , \"Zfa\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfa))             \\\n-  decl(ext_Zfh          , \"Zfh\"            , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfh))             \\\n-  decl(ext_Zfhmin       , \"Zfhmin\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfhmin))          \\\n-  decl(ext_Zicsr        , \"Zicsr\"          , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zicntr       , \"Zicntr\"         , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zifencei     , \"Zifencei\"       , RV_NO_FLAG_BIT, true , NO_UPDATE_DEFAULT)                  \\\n-  decl(ext_Zic64b       , \"Zic64b\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZic64b))          \\\n-  decl(ext_Ztso         , \"Ztso\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZtso))            \\\n-  decl(ext_Zihintpause  , \"Zihintpause\"    , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZihintpause))     \\\n-  decl(ext_Zacas        , \"Zacas\"          , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZacas))           \\\n-  decl(ext_Zvbb         , \"Zvbb\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvbb, ext_V)) \\\n-  decl(ext_Zvbc         , \"Zvbc\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvbc, ext_V)) \\\n-  decl(ext_Zvfh         , \"Zvfh\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvfh, ext_V)) \\\n-  decl(ext_Zvkn         , \"Zvkn\"           , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT_DEP(UseZvkn, ext_V)) \\\n-  decl(ext_Zicond       , \"Zicond\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZicond))          \\\n-  decl(mvendorid        , \"VendorId\"       , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-  decl(marchid          , \"ArchId\"         , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-  decl(mimpid           , \"ImpId\"          , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-  decl(unaligned_access , \"Unaligned\"      , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-  decl(satp_mode        , \"SATP\"           , RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-  decl(zicboz_block_size, \"ZicbozBlockSize\", RV_NO_FLAG_BIT, false, NO_UPDATE_DEFAULT)                  \\\n-\n-  #define DECLARE_RV_FEATURE(NAME, PRETTY, BIT, FSTRING, FLAGF)        \\\n-  struct NAME##RVFeatureValue : public RVFeatureValue {                \\\n-    NAME##RVFeatureValue(const char* pretty, int bit, bool fstring) :  \\\n-      RVFeatureValue(pretty, bit, fstring) {}                          \\\n-    FLAGF;                                                             \\\n-  };                                                                   \\\n-  static NAME##RVFeatureValue NAME;                                    \\\n-\n-  RV_FEATURE_FLAGS(DECLARE_RV_FEATURE)\n-  #undef DECLARE_RV_FEATURE\n+  \/\/\n+  \/\/ Fields description in `decl`:\n+  \/\/    declaration name, extension name, bit value from linux, feature string?, mapped flag)\n+  #define RV_EXT_FEATURE_FLAGS(decl)                                                                   \\\n+  decl(ext_I            ,  i           ,     ('I' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_M            ,  m           ,     ('M' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_A            ,  a           ,     ('A' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_F            ,  f           ,     ('F' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_D            ,  d           ,     ('D' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_C            ,  c           ,     ('C' - 'A'),  true ,  UPDATE_DEFAULT(UseRVC))             \\\n+  decl(ext_Q            ,  q           ,     ('Q' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_H            ,  h           ,     ('H' - 'A'),  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_V            ,  v           ,     ('V' - 'A'),  true ,  UPDATE_DEFAULT(UseRVV))             \\\n+  decl(ext_Zicbom       ,  Zicbom      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbom))          \\\n+  decl(ext_Zicboz       ,  Zicboz      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicboz))          \\\n+  decl(ext_Zicbop       ,  Zicbop      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicbop))          \\\n+  decl(ext_Zba          ,  Zba         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZba))             \\\n+  decl(ext_Zbb          ,  Zbb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbb))             \\\n+  decl(ext_Zbc          ,  Zbc         ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zbs          ,  Zbs         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbs))             \\\n+  decl(ext_Zbkb         ,  Zbkb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZbkb))            \\\n+  decl(ext_Zcb          ,  Zcb         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZcb))             \\\n+  decl(ext_Zfa          ,  Zfa         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfa))             \\\n+  decl(ext_Zfh          ,  Zfh         ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfh))             \\\n+  decl(ext_Zfhmin       ,  Zfhmin      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZfhmin))          \\\n+  decl(ext_Zicsr        ,  Zicsr       ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zicntr       ,  Zicntr      ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zifencei     ,  Zifencei    ,  RV_NO_FLAG_BIT,  true ,  NO_UPDATE_DEFAULT)                  \\\n+  decl(ext_Zic64b       ,  Zic64b      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZic64b))          \\\n+  decl(ext_Ztso         ,  Ztso        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZtso))            \\\n+  decl(ext_Zihintpause  ,  Zihintpause ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZihintpause))     \\\n+  decl(ext_Zacas        ,  Zacas       ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZacas))           \\\n+  decl(ext_Zvbb         ,  Zvbb        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbb, ext_V)) \\\n+  decl(ext_Zvbc         ,  Zvbc        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvbc, ext_V)) \\\n+  decl(ext_Zvfh         ,  Zvfh        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvfh, ext_V)) \\\n+  decl(ext_Zvkn         ,  Zvkn        ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT_DEP(UseZvkn, ext_V)) \\\n+  decl(ext_Zicond       ,  Zicond      ,  RV_NO_FLAG_BIT,  true ,  UPDATE_DEFAULT(UseZicond))          \\\n+\n+  #define DECLARE_RV_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF)               \\\n+  struct NAME##RVExtFeatureValue : public RVExtFeatureValue {                           \\\n+    NAME##RVExtFeatureValue() :                                                         \\\n+      RVExtFeatureValue(#PRETTY, LINUX_BIT, RVExtFeatures::CPU_##NAME, FSTRING) {}      \\\n+    FLAGF;                                                                              \\\n+  };                                                                                    \\\n+  static NAME##RVExtFeatureValue NAME;                                                  \\\n+\n+  RV_EXT_FEATURE_FLAGS(DECLARE_RV_EXT_FEATURE)\n+  #undef DECLARE_RV_EXT_FEATURE\n+\n+  \/\/ Non-extension features\n+  \/\/\n+  #define RV_NON_EXT_FEATURE_FLAGS(decl)                                                       \\\n+  decl(unaligned_access ,  Unaligned       ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+  decl(mvendorid        ,  VendorId        ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+  decl(marchid          ,  ArchId          ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+  decl(mimpid           ,  ImpId           ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+  decl(satp_mode        ,  SATP            ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+  decl(zicboz_block_size,  ZicbozBlockSize ,  RV_NO_FLAG_BIT,  false,  NO_UPDATE_DEFAULT)      \\\n+\n+  #define DECLARE_RV_NON_EXT_FEATURE(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF)      \\\n+  struct NAME##RVNonExtFeatureValue : public RVNonExtFeatureValue {                \\\n+    NAME##RVNonExtFeatureValue() :                                                 \\\n+      RVNonExtFeatureValue(#PRETTY, LINUX_BIT, FSTRING) {}                         \\\n+    FLAGF;                                                                         \\\n+  };                                                                               \\\n+  static NAME##RVNonExtFeatureValue NAME;                                          \\\n+\n+  RV_NON_EXT_FEATURE_FLAGS(DECLARE_RV_NON_EXT_FEATURE)\n+  #undef DECLARE_RV_NON_EXT_FEATURE\n+\n+private:\n+  \/\/ Utility for AOT CPU feature store\/check.\n+  class RVExtFeatures : public CHeapObj<mtCode> {\n+   public:\n+    enum RVFeatureIndex {\n+      #define DECLARE_RV_FEATURE_ENUM(NAME, PRETTY, LINUX_BIT, FSTRING, FLAGF) CPU_##NAME,\n+\n+      RV_EXT_FEATURE_FLAGS(DECLARE_RV_FEATURE_ENUM)\n+      MAX_CPU_FEATURE_INDEX\n+      #undef DECLARE_RV_FEATURE_ENUM\n+    };\n+   private:\n+    uint64_t _features_bitmap[(MAX_CPU_FEATURE_INDEX \/ BitsPerLong) + 1];\n+    STATIC_ASSERT(sizeof(_features_bitmap) * BitsPerByte >= MAX_CPU_FEATURE_INDEX);\n+\n+    \/\/ Number of 8-byte elements in _features_bitmap.\n+    constexpr static int element_count() {\n+      return sizeof(_features_bitmap) \/ sizeof(uint64_t);\n+    }\n+\n+    static int element_index(RVFeatureIndex feature) {\n+      int idx = feature \/ BitsPerLong;\n+      assert(idx < element_count(), \"Features array index out of bounds\");\n+      return idx;\n+    }\n+\n+    static uint64_t feature_bit(RVFeatureIndex feature) {\n+      return (1ULL << (feature % BitsPerLong));\n+    }\n+\n+    static RVFeatureIndex convert(uint32_t index) {\n+      assert(index < MAX_CPU_FEATURE_INDEX, \"must\");\n+      return (RVFeatureIndex)index;\n+    }\n+\n+   public:\n+    static RVExtFeatures* current() {\n+      return _rv_ext_features;\n+    }\n+\n+    RVExtFeatures() {\n+      for (int i = 0; i < element_count(); i++) {\n+        _features_bitmap[i] = 0;\n+      }\n+    }\n+\n+    void set_feature(uint32_t feature) {\n+      RVFeatureIndex f = convert(feature);\n+      int idx = element_index(f);\n+      _features_bitmap[idx] |= feature_bit(f);\n+    }\n+\n+    void clear_feature(uint32_t feature) {\n+      RVFeatureIndex f = convert(feature);\n+      int idx = element_index(f);\n+      _features_bitmap[idx] &= ~feature_bit(f);\n+    }\n+\n+    bool support_feature(uint32_t feature) {\n+      RVFeatureIndex f = convert(feature);\n+      int idx = element_index(f);\n+      return (_features_bitmap[idx] & feature_bit(f)) != 0;\n+    }\n+  };\n@@ -289,0 +409,1 @@\n+  static RVExtFeatures* _rv_ext_features;\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":184,"deletions":63,"binary":false,"changes":247,"status":"modified"},{"patch":"@@ -154,2 +154,0 @@\n-java\/awt\/Mixing\/AWT_Mixing\/HierarchyBoundsListenerMixingTest.java 8049405 macosx-all\n-java\/awt\/Mixing\/AWT_Mixing\/OpaqueOverlapping.java 8294264 windows-x64\n@@ -157,2 +155,0 @@\n-java\/awt\/Mixing\/AWT_Mixing\/JMenuBarOverlapping.java 8159451 linux-all,windows-all,macosx-all\n-java\/awt\/Mixing\/AWT_Mixing\/JSplitPaneOverlapping.java 6986109 generic-all\n@@ -160,30 +156,0 @@\n-java\/awt\/Mixing\/AWT_Mixing\/MixingPanelsResizing.java 8049405 generic-all\n-java\/awt\/Mixing\/AWT_Mixing\/JComboBoxOverlapping.java 8049405 macosx-all\n-java\/awt\/Mixing\/AWT_Mixing\/JPopupMenuOverlapping.java 8049405 macosx-all\n-java\/awt\/Mixing\/AWT_Mixing\/JButtonInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JButtonOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JColorChooserOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JEditorPaneInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JEditorPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JLabelInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JLabelOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JListInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JListOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JPanelInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JPanelOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JProgressBarInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JProgressBarOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JScrollBarInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JScrollBarOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JSliderInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JSliderOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JSpinnerInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JSpinnerOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTableInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTableOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTextAreaInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTextAreaOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTextFieldInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTextFieldOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JToggleButtonInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JToggleButtonOverlapping.java 8158801 windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+import java.awt.Component;\n@@ -25,0 +26,1 @@\n+import java.awt.KeyboardFocusManager;\n@@ -26,0 +28,2 @@\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n@@ -29,0 +33,2 @@\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowFocusListener;\n@@ -30,0 +36,4 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.swing.FocusManager;\n@@ -86,0 +96,1 @@\n+        f.setLocationRelativeTo(null);\n@@ -109,0 +120,6 @@\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        f.addFocusListener(new FocusAdapter() {\n+            @Override public void focusGained(FocusEvent e) {\n+                latch.countDown();\n+            }\n+        });\n@@ -115,2 +132,11 @@\n-                        testedComponent.setBounds(0, 0, testedComponent.getPreferredSize().width, testedComponent.getPreferredSize().height + 20);\n-                        ancestorLoc = f.getLocationOnScreen();\n+                        testedComponent.setBounds(0, 0,\n+                                testedComponent.getPreferredSize().width,\n+                                testedComponent.getPreferredSize().height + 20);\n+                        Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager()\n+                                .getFocusOwner();\n+                        if (focusOwner == f) {\n+                            \/\/ frame already had focus\n+                            latch.countDown();\n+                        } else {\n+                            f.requestFocusInWindow();\n+                        }\n@@ -126,14 +152,8 @@\n-\n-            \/* this is a workaround for certain jtreg(?) focus issue:\n-               tests fail starting after failing mixing tests but always pass alone.\n-             *\/\n-            Util.waitForIdle(robot);\n-            ancestorLoc.translate(isOel7orLater() ? 5 : f.getWidth() \/ 2 - 15, 2);\n-            robot.mouseMove(ancestorLoc.x, ancestorLoc.y);\n-            Util.waitForIdle(robot);\n-            robot.mousePress(InputEvent.BUTTON1_MASK);\n-            robot.delay(50);\n-            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-            Util.waitForIdle(robot);\n-\n-            clickAndBlink(robot, lLoc);\n+            try {\n+                if (!latch.await(1, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Ancestor frame didn't receive focus\");\n+                }\n+                clickAndBlink(robot, lLoc);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n@@ -142,0 +162,1 @@\n+            latch.countDown();\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/GlassPaneOverlappingTestBase.java","additions":38,"deletions":17,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,0 +67,1 @@\n+        frame.setLocationRelativeTo(null);\n@@ -82,0 +83,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JComboBoxOverlapping.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,0 +120,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JInternalFrameMoveOverlapping.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JInternalFrameOverlapping.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n- * @run main JMenuBarOverlapping\n+ * @run main\/timeout=180 JMenuBarOverlapping\n@@ -75,0 +75,1 @@\n+        frame.setLocationRelativeTo(null);\n@@ -107,0 +108,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JMenuBarOverlapping.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,1 @@\n+        frame.setLocationRelativeTo(null);\n@@ -77,0 +78,1 @@\n+                frame.setVisible(false);\n@@ -85,0 +87,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JPopupMenuOverlapping.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,0 +98,1 @@\n+        f.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JScrollPaneOverlapping.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,2 @@\n+        currentAwtControl.setForeground(Color.white);\n+        currentAwtControl.setBackground(Color.white);\n@@ -92,0 +94,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JSplitPaneOverlapping.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,0 +68,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/MixingFrameResizing.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,7 @@\n-import java.awt.*;\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n@@ -27,2 +33,10 @@\n-import javax.swing.*;\n-import java.io.*;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n@@ -48,0 +62,1 @@\n+    static final int TOLERANCE_MACOSX = 15;\n@@ -65,0 +80,1 @@\n+\n@@ -67,1 +83,2 @@\n-            Process p = Runtime.getRuntime().exec(JAVA_HOME + \"\/bin\/java FrameBorderCounter\");\n+            Process p = Runtime.getRuntime()\n+                    .exec(JAVA_HOME + \"\/bin\/java FrameBorderCounter\");\n@@ -75,1 +92,3 @@\n-                throw new RuntimeException(\"FrameBorderCounter exited with not null code!\\n\" + readInputStream(p.getErrorStream()));\n+                throw new RuntimeException(\n+                        \"FrameBorderCounter exited with not null code!\\n\" +\n+                                readInputStream(p.getErrorStream()));\n@@ -85,0 +104,1 @@\n+\n@@ -100,1 +120,2 @@\n-        borderShift = Math.abs(borderShift) == 1 ? borderShift : (borderShift \/ 2);\n+        borderShift =\n+                Math.abs(borderShift) == 1 ? borderShift : (borderShift \/ 2);\n@@ -123,0 +144,1 @@\n+\n@@ -133,0 +155,1 @@\n+                frame.setLocationRelativeTo(null);\n@@ -146,0 +169,1 @@\n+\n@@ -147,1 +171,2 @@\n-                lLoc.translate(frame.getWidth() + borderShift, frame.getHeight() + borderShift);\n+                lLoc.translate(frame.getWidth() + borderShift,\n+                        frame.getHeight() + borderShift);\n@@ -158,0 +183,1 @@\n+\n@@ -160,1 +186,2 @@\n-                if (!c.equals(jbColor)) {\n+                System.out.println(\"Color picked for jbutton: \" + c);\n+                if (!isAlmostEqualColor(c, jbColor)) {\n@@ -166,1 +193,2 @@\n-                if (!c.equals(awtColor)) {\n+                System.out.println(\"Color picked for awtButton: \" + c);\n+                if (!isAlmostEqualColor(c, awtColor)) {\n@@ -172,1 +200,2 @@\n-                if (!c.equals(jb2Color)) {\n+                System.out.println(\"Color picked for jbutton2: \" + c);\n+                if (!isAlmostEqualColor(c, jb2Color)) {\n@@ -178,1 +207,2 @@\n-                if (!c.equals(awt2Color)) {\n+                System.out.println(\"Color picked for awtButton2: \" + c);\n+                if (!isAlmostEqualColor(c, awt2Color)) {\n@@ -201,0 +231,1 @@\n+\n@@ -224,0 +255,8 @@\n+\n+        try {\n+            UIManager.setLookAndFeel(\n+                    UIManager.getCrossPlatformLookAndFeelClassName());\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n@@ -245,1 +284,2 @@\n-            throw new RuntimeException(\"Timed out after \" + sleepTime \/ 1000 + \" seconds\");\n+            throw new RuntimeException(\n+                    \"Timed out after \" + sleepTime \/ 1000 + \" seconds\");\n@@ -264,0 +304,1 @@\n+\n@@ -268,0 +309,1 @@\n+\n@@ -289,0 +331,1 @@\n+\n@@ -301,0 +344,18 @@\n+\n+    private static boolean isAlmostEqualColor(Color color, Color refColor) {\n+\n+        System.out.println(\"Comparing color: \" + color + \" with reference \" +\n+                \"color: \" + refColor);\n+        return color.equals(refColor) ||\n+                Math.abs(color.getRed() - refColor.getRed()) <\n+                        TOLERANCE_MACOSX &&\n+                        Math.abs(color.getGreen() - refColor.getGreen()) <\n+                                TOLERANCE_MACOSX &&\n+                        Math.abs(color.getBlue() - refColor.getBlue()) <\n+                                TOLERANCE_MACOSX;\n+    }\n+\n+    static class TestPassedException extends RuntimeException {\n+\n+    }\n+\n@@ -302,2 +363,0 @@\n-class TestPassedException extends RuntimeException {\n-}\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/MixingPanelsResizing.java","additions":74,"deletions":15,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,0 +92,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/OpaqueOverlapping.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.awt.Window;\n@@ -174,0 +175,1 @@\n+                    frame.setLocationRelativeTo(null);\n@@ -262,0 +264,3 @@\n+                if(container instanceof Window){\n+                    ((Window) container).setLocationRelativeTo(null);\n+                }\n@@ -304,0 +309,1 @@\n+                eframe.setLocationRelativeTo(null);\n@@ -379,4 +385,3 @@\n-        if ((component instanceof java.awt.Scrollbar) || isMac && (component instanceof java.awt.Button)) {\n-            return false;\n-        }\n-        return true;\n+        return !(component == null ||\n+                (component instanceof java.awt.Scrollbar) ||\n+                (isMac && (component instanceof java.awt.Button)));\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/OverlappingTestBase.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,4 +24,15 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.util.regex.*;\n-import javax.swing.*;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.SpringLayout;\n+\n@@ -117,0 +128,1 @@\n+        f.setLocationRelativeTo(null);\n@@ -144,10 +156,20 @@\n-        if( ancestor != null ) {\n-            Point ancestorLoc = ancestor.getLocationOnScreen();\n-            ancestorLoc.translate(isOel7orLater() ? 5 :\n-                                             ancestor.getWidth() \/ 2 - 15, 2);\n-            robot.mouseMove(ancestorLoc.x, ancestorLoc.y);\n-            Util.waitForIdle(robot);\n-            robot.mousePress(InputEvent.BUTTON1_MASK);\n-            robot.delay(50);\n-            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-            Util.waitForIdle(robot);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        if (ancestor != null) {\n+            ancestor.addFocusListener(new FocusAdapter() {\n+                @Override public void focusGained(FocusEvent e) {\n+                    latch.countDown();\n+                }\n+            });\n+            ancestor.requestFocus();\n+        } else {\n+            latch.countDown();\n+        }\n+        try {\n+            boolean await = latch.await(1, TimeUnit.SECONDS);\n+            if (!await) {\n+                throw new RuntimeException(\"Ancestor frame didn't receive \" +\n+                        \"focus\");\n+            }\n+            clickAndBlink(robot, lLoc);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n@@ -155,3 +177,0 @@\n-\n-        clickAndBlink(robot, lLoc);\n-        Util.waitForIdle(robot);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/SimpleOverlappingTestBase.java","additions":37,"deletions":18,"binary":false,"changes":55,"status":"modified"}]}