{"files":[{"patch":"@@ -13453,8 +13453,0 @@\n-void Assembler::movslq(Register dst, int32_t imm32) {\n-  assert(is_simm32(imm32), \"lost bits\");\n-  InstructionMark im(this);\n-  int encode = prefixq_and_encode(dst->encoding());\n-  emit_int16((unsigned char)0xC7, (0xC0 | encode));\n-  emit_int32(imm32);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -321,4 +321,0 @@\n-void MacroAssembler::mov_ptrslot(Register dst, intptr_t value) {\n-  movptr(dst, value);\n-}\n-\n@@ -681,5 +677,0 @@\n-void MacroAssembler::mov_ptrslot(Register dst, intptr_t value) {\n-  \/\/ Should never be shortened. Need full 64-immediate.\n-  mov64(dst, value);\n-}\n-\n@@ -1351,1 +1342,6 @@\n-  mov_ptrslot(rax, (intptr_t)Universe::non_oop_word());\n+#ifdef _LP64\n+  \/\/ Should never be shortened. Needs full 64-immediate.\n+  mov64(rax, (intptr_t)Universe::non_oop_word());\n+#else\n+  movptr(rax, (intptr_t)Universe::non_oop_word());\n+#endif\n@@ -2576,1 +2572,1 @@\n-    movslq(dst, checked_cast<int32_t>(src));\n+    movq(dst, checked_cast<int32_t>(src));\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1818,2 +1818,0 @@\n-  void mov_ptrslot(Register dst, intptr_t val);\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}