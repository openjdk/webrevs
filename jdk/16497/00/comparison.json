{"files":[{"patch":"@@ -13454,4 +13454,1 @@\n-  \/\/ dbx shows movslq(rcx, 3) as movq     $0x0000000049000000,(%rbx)\n-  \/\/ and movslq(r8, 3); as movl     $0x0000000048000000,(%rbx)\n-  \/\/ as a result we shouldn't use until tested at runtime...\n-  ShouldNotReachHere();\n+  assert(is_simm32(imm32), \"lost bits\");\n@@ -13460,1 +13457,1 @@\n-  emit_int8(0xC7 | encode);\n+  emit_int16((unsigned char)0xC7, (0xC0 | encode));\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -321,0 +321,4 @@\n+void MacroAssembler::mov_ptrslot(Register dst, intptr_t value) {\n+  movptr(dst, value);\n+}\n+\n@@ -677,0 +681,5 @@\n+void MacroAssembler::mov_ptrslot(Register dst, intptr_t value) {\n+  \/\/ Should never be shortened. Need full 64-immediate.\n+  mov64(dst, value);\n+}\n+\n@@ -1342,1 +1351,1 @@\n-  movptr(rax, (intptr_t)Universe::non_oop_word());\n+  mov_ptrslot(rax, (intptr_t)Universe::non_oop_word());\n@@ -2565,1 +2574,9 @@\n-  LP64_ONLY(mov64(dst, src)) NOT_LP64(movl(dst, src));\n+#ifdef _LP64\n+  if (is_simm32(src)) {\n+    movslq(dst, checked_cast<int32_t>(src));\n+  } else {\n+    mov64(dst, src);\n+  }\n+#else\n+  movl(dst, src);\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1818,0 +1818,2 @@\n+  void mov_ptrslot(Register dst, intptr_t val);\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}