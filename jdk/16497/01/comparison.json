{"files":[{"patch":"@@ -13453,11 +13453,0 @@\n-void Assembler::movslq(Register dst, int32_t imm32) {\n-  \/\/ dbx shows movslq(rcx, 3) as movq     $0x0000000049000000,(%rbx)\n-  \/\/ and movslq(r8, 3); as movl     $0x0000000048000000,(%rbx)\n-  \/\/ as a result we shouldn't use until tested at runtime...\n-  ShouldNotReachHere();\n-  InstructionMark im(this);\n-  int encode = prefixq_and_encode(dst->encoding());\n-  emit_int8(0xC7 | encode);\n-  emit_int32(imm32);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1342,0 +1342,4 @@\n+#ifdef _LP64\n+  \/\/ Should never be shortened. Needs full 64-immediate.\n+  mov64(rax, (intptr_t)Universe::non_oop_word());\n+#else\n@@ -1343,0 +1347,1 @@\n+#endif\n@@ -2565,1 +2570,9 @@\n-  LP64_ONLY(mov64(dst, src)) NOT_LP64(movl(dst, src));\n+#ifdef _LP64\n+  if (is_simm32(src)) {\n+    movq(dst, checked_cast<int32_t>(src));\n+  } else {\n+    mov64(dst, src);\n+  }\n+#else\n+  movl(dst, src);\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"}]}