{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.invoke.InnerClassLambdaMetafactory.MethodBody;\n@@ -715,7 +716,8 @@\n-                    clb.withMethodBody(SPECIES_DATA_NAME, MTD_SPECIES_DATA, (SPECIES_DATA_MODS & ACC_PPP) | ACC_FINAL, new Consumer<CodeBuilder>() {\n-                        @Override\n-                        public void accept(CodeBuilder cob) {\n-                            cob.getstatic(classDesc, sdFieldName, CD_SPECIES_DATA)\n-                                    .areturn();\n-                        }\n-                    });\n+                    clb.withMethod(SPECIES_DATA_NAME, MTD_SPECIES_DATA, (SPECIES_DATA_MODS & ACC_PPP) | ACC_FINAL,\n+                            new MethodBody(new Consumer<CodeBuilder>() {\n+                                @Override\n+                                public void accept(CodeBuilder cob) {\n+                                    cob.getstatic(classDesc, sdFieldName, CD_SPECIES_DATA)\n+                                            .areturn();\n+                                }\n+                            }));\n@@ -728,26 +730,27 @@\n-                    clb.withMethodBody(INIT_NAME, methodDesc(thisCtorType), ACC_PRIVATE, new Consumer<CodeBuilder>() {\n-                        @Override\n-                        public void accept(CodeBuilder cob) {\n-                            cob.aload(0); \/\/ this\n-\n-                            final List<Var> ctorArgs = AFTER_THIS.fromTypes(superCtorType.parameterList());\n-                            for (Var ca : ctorArgs) {\n-                                ca.emitLoadInstruction(cob);\n-                            }\n-\n-                            \/\/ super(ca...)\n-                            cob.invokespecial(superClassDesc, INIT_NAME, methodDesc(superCtorType));\n-\n-                            \/\/ store down fields\n-                            Var lastFV = AFTER_THIS.lastOf(ctorArgs);\n-                            for (Var f : fields) {\n-                                \/\/ this.argL1 = argL1\n-                                cob.aload(0);  \/\/ this\n-                                lastFV = new Var(f.name, f.type, lastFV);\n-                                lastFV.emitLoadInstruction(cob);\n-                                cob.putfield(classDesc, f.name, f.desc);\n-                            }\n-\n-                            cob.return_();\n-                        }\n-                    });\n+                    clb.withMethod(INIT_NAME, methodDesc(thisCtorType), ACC_PRIVATE,\n+                            new MethodBody(new Consumer<CodeBuilder>() {\n+                                @Override\n+                                public void accept(CodeBuilder cob) {\n+                                    cob.aload(0); \/\/ this\n+\n+                                    final List<Var> ctorArgs = AFTER_THIS.fromTypes(superCtorType.parameterList());\n+                                    for (Var ca : ctorArgs) {\n+                                        ca.emitLoadInstruction(cob);\n+                                    }\n+\n+                                    \/\/ super(ca...)\n+                                    cob.invokespecial(superClassDesc, INIT_NAME, methodDesc(superCtorType));\n+\n+                                    \/\/ store down fields\n+                                    Var lastFV = AFTER_THIS.lastOf(ctorArgs);\n+                                    for (Var f : fields) {\n+                                        \/\/ this.argL1 = argL1\n+                                        cob.aload(0);  \/\/ this\n+                                        lastFV = new Var(f.name, f.type, lastFV);\n+                                        lastFV.emitLoadInstruction(cob);\n+                                        cob.putfield(classDesc, f.name, f.desc);\n+                                    }\n+\n+                                    cob.return_();\n+                                }\n+                            }));\n@@ -757,16 +760,17 @@\n-                    clb.withMethodBody(\"make\", methodDesc(ftryType), ACC_STATIC, new Consumer<CodeBuilder>() {\n-                        @Override\n-                        public void accept(CodeBuilder cob) {\n-                            \/\/ make instance\n-                            cob.new_(classDesc)\n-                                    .dup();\n-                            \/\/ load factory method arguments:  ctarg... and arg...\n-                            for (Var v : NO_THIS.fromTypes(ftryType.parameterList())) {\n-                                v.emitLoadInstruction(cob);\n-                            }\n-\n-                            \/\/ finally, invoke the constructor and return\n-                            cob.invokespecial(classDesc, INIT_NAME, methodDesc(thisCtorType))\n-                                    .areturn();\n-                        }\n-                    });\n+                    clb.withMethod(\"make\", methodDesc(ftryType), ACC_STATIC,\n+                            new MethodBody(new Consumer<CodeBuilder>() {\n+                                @Override\n+                                public void accept(CodeBuilder cob) {\n+                                    \/\/ make instance\n+                                    cob.new_(classDesc)\n+                                            .dup();\n+                                    \/\/ load factory method arguments:  ctarg... and arg...\n+                                    for (Var v : NO_THIS.fromTypes(ftryType.parameterList())) {\n+                                        v.emitLoadInstruction(cob);\n+                                    }\n+\n+                                    \/\/ finally, invoke the constructor and return\n+                                    cob.invokespecial(classDesc, INIT_NAME, methodDesc(thisCtorType))\n+                                            .areturn();\n+                                }\n+                            }));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ClassSpecializer.java","additions":53,"deletions":49,"binary":false,"changes":102,"status":"modified"}]}