{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTreeUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,5 @@\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.Reference;\n+import java.lang.ref.ReferenceQueue;\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -46,6 +51,1 @@\n-import java.lang.ref.WeakReference;\n-import java.util.ArrayList;\n-\n-public class TreeCellRendererLeakTest {\n-\n-    static int smCount = 0;\n+public final class TreeCellRendererLeakTest {\n@@ -60,1 +60,5 @@\n-    static CountDownLatch testDone;\n+    private static final CountDownLatch testDone = new CountDownLatch(1);\n+\n+    \/\/ Access to referenceList and referenceQueue is guarded by referenceList\n+    private static final List<Reference<JLabel>> referenceList = new ArrayList<>(50);\n+    private static final ReferenceQueue<JLabel> referenceQueue = new ReferenceQueue<>();\n@@ -62,1 +66,0 @@\n-    ArrayList<WeakReference<JLabel>> weakRefArrLabel = new ArrayList(50);\n@@ -65,1 +68,1 @@\n-    public class TreeCellRenderer extends DefaultTreeCellRenderer {\n+    public static final class TreeCellRenderer extends DefaultTreeCellRenderer {\n@@ -86,1 +89,3 @@\n-            weakRefArrLabel.add(smCount++, new WeakReference<JLabel>(label));\n+            synchronized (referenceList) {\n+                referenceList.add(new PhantomReference<>(label, referenceQueue));\n+            }\n@@ -132,1 +137,1 @@\n-    public static void main(String args[]) throws Exception {\n+    public static void main(String[] args) throws Exception {\n@@ -134,1 +139,0 @@\n-            testDone = new CountDownLatch(1);\n@@ -180,2 +184,2 @@\n-        long time = System.currentTimeMillis();\n-        long initialCnt = smCount;\n+        final long time = System.currentTimeMillis();\n+        long removedLabels = 0;\n@@ -184,1 +188,17 @@\n-            System.out.println(\"Live JLabels:\" + smCount);\n+\n+            int start;\n+            int removed = 0;\n+            int left;\n+            \/\/ Remove dead references\n+            synchronized (referenceList) {\n+                start = referenceList.size();\n+                Reference<?> ref;\n+                while ((ref = referenceQueue.poll()) != null) {\n+                    referenceList.remove(ref);\n+                    removed++;\n+                }\n+                left = referenceList.size();\n+            }\n+            removedLabels += removed;\n+            System.out.println(\"Live JLabels: \" + start + \" - \" + removed + \" = \" + left);\n+            System.out.println(\"All time removed: \" + removedLabels);\n@@ -189,0 +209,1 @@\n+                break;\n@@ -192,2 +213,2 @@\n-        System.out.println(\"\\ncleanedup LabelCount \" + getCleanedUpLabelCount());\n-        if (getCleanedUpLabelCount() == 0) {\n+        System.out.println(\"\\nCleaned up labels: \" + removedLabels);\n+        if (removedLabels == 0) {\n@@ -197,11 +218,0 @@\n-\n-    private int getCleanedUpLabelCount() {\n-        int count = 0;\n-        for (WeakReference<JLabel> ref : weakRefArrLabel) {\n-            if (ref.get() == null) {\n-                count++;\n-            }\n-        }\n-        return count;\n-    }\n-\n@@ -209,0 +219,1 @@\n+\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicTreeUI\/TreeCellRendererLeakTest.java","additions":39,"deletions":28,"binary":false,"changes":67,"status":"modified"}]}