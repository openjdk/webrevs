{"files":[{"patch":"@@ -3283,3 +3283,1 @@\n-                    for (int i = 0; i < rendererPane.getComponentCount(); i++) {\n-                        rendererPane.remove(i);\n-                    }\n+                    rendererPane.removeAll();\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTreeUI.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -44,0 +46,3 @@\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+\n@@ -46,2 +51,1 @@\n-    static long smCount = 0;\n-    static boolean done;\n+    static int smCount = 0;\n@@ -56,5 +60,1 @@\n-    \/\/ JLabel with an instance counter\n-    public class TestLabel extends JLabel {\n-        public TestLabel() {\n-            smCount++;\n-        }\n+    static CountDownLatch testDone;\n@@ -62,4 +62,1 @@\n-        public void finalize( ) {\n-            smCount--;\n-        }\n-    }\n+    ArrayList<WeakReference<JLabel>> weakRefArrLabel = new ArrayList(50);\n@@ -70,2 +67,1 @@\n-        public TreeCellRenderer( ) {\n-        }\n+        public TreeCellRenderer() {}\n@@ -82,1 +78,1 @@\n-            JLabel label = new TestLabel( );\n+            JLabel label = new JLabel();\n@@ -90,0 +86,1 @@\n+            weakRefArrLabel.add(smCount++, new WeakReference<JLabel>(label));\n@@ -97,5 +94,1 @@\n-        Thread updateThread = new Thread(new Runnable( ) {\n-            public void run( ) {\n-                runChanges( );\n-            }\n-        });\n+        Thread updateThread = new Thread(this::runChanges);\n@@ -104,5 +97,1 @@\n-        Thread infoThread = new Thread(new Runnable( ) {\n-            public void run( ) {\n-                runInfo( );\n-            }\n-        });\n+        Thread infoThread = new Thread(this::runInfo);\n@@ -145,0 +134,1 @@\n+            testDone = new CountDownLatch(1);\n@@ -148,3 +138,1 @@\n-            while (!done) {\n-                Thread.sleep(100);\n-            }\n+            testDone.await();\n@@ -165,1 +153,1 @@\n-        while ((tm - time) < (30 * 1000)) {\n+        while ((tm - time) < (15 * 1000)) {\n@@ -180,3 +168,5 @@\n-                System.out.println(\"time elapsed \" + (tm - time));\n-            } catch (Exception ex) {\n-                ex.printStackTrace();\n+                System.out.println(\"time elapsed \" + (tm - time)\/1000 + \" s\");\n+            } catch (InterruptedException ex) {\n+                break;\n+            } catch (Exception e) {\n+                e.printStackTrace();\n@@ -185,1 +175,1 @@\n-        done = true;\n+        testDone.countDown();\n@@ -188,2 +178,2 @@\n-    \/\/ Print number of uncollected TestLabels\n-    public void runInfo( ) {\n+    \/\/ Print number of uncollected JLabels\n+    public void runInfo() {\n@@ -192,1 +182,1 @@\n-        while ((System.currentTimeMillis() - time) < (30 * 1000)) {\n+        while ((System.currentTimeMillis() - time) < (15 * 1000)) {\n@@ -194,1 +184,1 @@\n-            System.err.println(\"Live TestLabels:\" + smCount);\n+            System.out.println(\"Live JLabels:\" + smCount);\n@@ -201,1 +191,3 @@\n-        if (smCount - initialCnt > 50) {\n+\n+        System.out.println(\"\\ncleanedup LabelCount \" + getCleanedUpLabelCount());\n+        if (getCleanedUpLabelCount() == 0) {\n@@ -206,0 +198,10 @@\n+    private int getCleanedUpLabelCount() {\n+        int count = 0;\n+        for (WeakReference<JLabel> ref : weakRefArrLabel) {\n+            if (ref.get() == null) {\n+                count++;\n+            }\n+        }\n+        return count;\n+    }\n+\n","filename":"test\/jdk\/javax\/swing\/plaf\/basic\/BasicTreeUI\/TreeCellRendererLeakTest.java","additions":39,"deletions":37,"binary":false,"changes":76,"status":"modified"}]}