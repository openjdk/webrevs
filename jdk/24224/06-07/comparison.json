{"files":[{"patch":"@@ -32,1 +32,0 @@\n-import java.util.ArrayList;\n@@ -67,2 +66,2 @@\n-     * Verify the content of two Objects, possibly recursively.\n-     * Different NaN encodins are considered non-qual, since we compare\n+     * Verify the contents of two Objects on a raw bit level, possibly recursively.\n+     * Different NaN encodings are considered non-equal, since we compare\n@@ -81,1 +80,1 @@\n-     * Verify the content of two Objects, possibly recursively.\n+     * Verify the contents of two Objects, possibly recursively.\n@@ -154,5 +153,1 @@\n-                    } catch (NoSuchMethodException e) {\n-                        throw new RuntimeException(\"Could not invoke toArray on \" + ca.getName(), e);\n-                    } catch (IllegalAccessException e) {\n-                        throw new RuntimeException(\"Could not invoke toArray on \" + ca.getName(), e);\n-                    } catch (InvocationTargetException e) {\n+                    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n@@ -233,1 +228,1 @@\n-     * Hence, by default, we pick the non-raw coparison: we verify that we have the same bit\n+     * Hence, by default, we pick the non-raw comparison: we verify that we have the same bit\n@@ -242,1 +237,1 @@\n-     * See comments for \"isFloatEQ\".\n+     * See comments for {@link #isFloatEQ}.\n@@ -250,1 +245,1 @@\n-     * Check that two floats are equal according to \"isFloatEQ\".\n+     * Check that two floats are equal according to {@link #isFloatEQ}.\n@@ -263,1 +258,1 @@\n-     * Check that two doubles are equal according to \"isDoubleEQ\".\n+     * Check that two doubles are equal according to {@link #isDoubleEQ}.\n@@ -287,1 +282,1 @@\n-     * Verify that the content of two MemorySegments is identical. Note: we do not check the\n+     * Verify that the contents of two MemorySegments are identical. Note: we do not check the\n@@ -333,1 +328,1 @@\n-     * Verify that the content of two byte arrays is identical.\n+     * Verify that the contents of two byte arrays are identical.\n@@ -340,1 +335,1 @@\n-     * Verify that the content of two char arrays is identical.\n+     * Verify that the contents of two char arrays are identical.\n@@ -347,1 +342,1 @@\n-     * Verify that the content of two short arrays is identical.\n+     * Verify that the contents of two short arrays are identical.\n@@ -354,1 +349,1 @@\n-     * Verify that the content of two int arrays is identical.\n+     * Verify that the contents of two int arrays are identical.\n@@ -361,1 +356,1 @@\n-     * Verify that the content of two long arrays is identical.\n+     * Verify that the contents of two long arrays are identical.\n@@ -368,1 +363,1 @@\n-     * Check that two float arrays are equal according to \"isFloatEQ\".\n+     * Check that two float arrays are equal according to {@link #isFloatEQ}.\n@@ -387,1 +382,1 @@\n-     * Check that two double arrays are equal according to \"isDoubleEQ\".\n+     * Check that two double arrays are equal according to {@link #isDoubleEQ}.\n@@ -406,1 +401,1 @@\n-     * Verify that the content of two boolean arrays is identical.\n+     * Verify that the contents of two boolean arrays are identical.\n@@ -425,1 +420,1 @@\n-     * Verify that the content of two Object arrays is identical, recursively:\n+     * Verify that the contents of two Object arrays are identical, recursively:\n@@ -443,1 +438,1 @@\n-        Class c = a.getClass();\n+        Class<?> c = a.getClass();\n@@ -446,2 +441,2 @@\n-                Object va = null;\n-                Object vb = null;\n+                Object va;\n+                Object vb;\n@@ -474,8 +469,8 @@\n-            case Boolean x -> { return false; }\n-            case Byte x -> { return false; }\n-            case Short x -> { return false; }\n-            case Character x -> { return false; }\n-            case Integer x -> { return false; }\n-            case Long x -> { return false; }\n-            case Float x -> { return false; }\n-            case Double x -> { return false; }\n+            case Boolean _, \n+                 Byte _, \n+                 Short _, \n+                 Character _, \n+                 Integer _, \n+                 Long _, \n+                 Float _, \n+                 Double _ -> { return false; }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/verify\/Verify.java","additions":29,"deletions":34,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/verify\/examples\/TestWithVectorAPI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}