{"files":[{"patch":"@@ -48,5 +48,4 @@\n- * have two modes of comparison, specified by {@code isFloatCheckWithRawBits}. By default, it is\n- * disabled, and different NaN values are regarded as equal. This applies to the boxed floating types,\n- * as well as arrays of floating arrays. When {@code isFloatCheckWithRawBits} is enabled, we compare\n- * the raw bits, and so different NaN encodings are not equal. Note: {@link MemorySegment} data is\n- * always compared with raw bits.\n+ * have two modes of comparison. By default, different NaN values are regarded as equal. This applies\n+ * to the boxed floating types, as well as arrays of floating arrays. With {@link Options#enableFloatCheckWithRawBits},\n+ * we compare the raw bits, and so different NaN encodings are not equal.\n+ * Note: {@link MemorySegment} data is always compared with raw bits.\n@@ -57,1 +56,1 @@\n- * by their field values. This feature can be enabled with {@code isCheckWithArbitraryClasses}.\n+ * by their field values. This feature can be enabled with {@link Options#enableCheckWithArbitraryClasses}.\n@@ -60,2 +59,38 @@\n-    private final boolean isFloatCheckWithRawBits;\n-    private final boolean isCheckWithArbitraryClasses;\n+\n+    \/**\n+     * The {@link Options} class allows the specification of further verification options.\n+     *\/\n+    public final static class Options {\n+        boolean isFloatCheckWithRawBits;\n+        boolean isCheckWithArbitraryClasses;\n+\n+        \/**\n+         * Generates a {@link Options} with default settings.\n+         *\/\n+        public Options() {}\n+\n+        \/**\n+         * By default, different NaN values are regarded as equal, but with this option enabled,\n+         * we compare the raw bits, and different NaN encodings are regarded as not equal.\n+         *\n+         * @return The {@code this} reference for chaining.\n+         *\/\n+        public Options enableFloatCheckWithRawBits() {\n+            isFloatCheckWithRawBits = true;\n+            return this;\n+        }\n+\n+        \/**\n+         * By default, we only support the comparison of a limited set of types, but with this option\n+         * enabled, we can compare arbitrary classes by value, and we compare the Objects by\n+         * the recursive structore given by their field values.\n+         *\n+         * @return The {@code this} reference for chaining.\n+         *\/\n+        public Options enableCheckWithArbitraryClasses() {\n+            isCheckWithArbitraryClasses = true;\n+            return this;\n+        }\n+    }\n+\n+    private final Options verifyOptions;\n@@ -65,3 +100,2 @@\n-    private Verify(boolean isFloatCheckWithRawBits, boolean isCheckWithArbitraryClasses) {\n-        this.isFloatCheckWithRawBits = isFloatCheckWithRawBits;\n-        this.isCheckWithArbitraryClasses = isCheckWithArbitraryClasses;\n+    private Verify(Options verifyOptions) {\n+        this.verifyOptions = verifyOptions;\n@@ -75,2 +109,1 @@\n-     * @param isFloatCheckWithRawBits Determines if different NaN encodings are equal or not.\n-     * @param isCheckWithArbitraryClasses Determines if the structural comparison of Objects from arbitrary classes is enabled.\n+     * @param verifyOptions Allows specification of further options.\n@@ -79,2 +112,2 @@\n-    public static void checkEQ(Object a, Object b, boolean isFloatCheckWithRawBits, boolean isCheckWithArbitraryClasses) {\n-        Verify v = new Verify(isFloatCheckWithRawBits, isCheckWithArbitraryClasses);\n+    public static void checkEQ(Object a, Object b, Options verifyOptions) {\n+        Verify v = new Verify(verifyOptions);\n@@ -94,1 +127,1 @@\n-        checkEQ(a, b, false, false);\n+        checkEQ(a, b, new Options());\n@@ -169,1 +202,1 @@\n-                if (isCheckWithArbitraryClasses) {\n+                if (verifyOptions.isCheckWithArbitraryClasses) {\n@@ -175,1 +208,1 @@\n-                    throw new VerifyException(\"Object type not supported: \" + ca.getName() + \" -- did you mean to enable 'isCheckWithArbitraryClasses'?\");\n+                    throw new VerifyException(\"Object type not supported: \" + ca.getName() + \" -- did you mean to 'enableCheckWithArbitraryClasses'?\");\n@@ -247,2 +280,2 @@\n-        return isFloatCheckWithRawBits ? Float.floatToRawIntBits(a) != Float.floatToRawIntBits(b)\n-                                       : Float.floatToIntBits(a) != Float.floatToIntBits(b);\n+        return verifyOptions.isFloatCheckWithRawBits ? Float.floatToRawIntBits(a) != Float.floatToRawIntBits(b)\n+                                                     : Float.floatToIntBits(a) != Float.floatToIntBits(b);\n@@ -255,2 +288,2 @@\n-        return isFloatCheckWithRawBits ? Double.doubleToRawLongBits(a) != Double.doubleToRawLongBits(b)\n-                                       : Double.doubleToLongBits(a) != Double.doubleToLongBits(b);\n+        return verifyOptions.isFloatCheckWithRawBits ? Double.doubleToRawLongBits(a) != Double.doubleToRawLongBits(b)\n+                                                     : Double.doubleToLongBits(a) != Double.doubleToLongBits(b);\n@@ -264,1 +297,1 @@\n-            System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch. check raw: \" + isFloatCheckWithRawBits);\n+            System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch. check raw: \" + verifyOptions.isFloatCheckWithRawBits);\n@@ -277,1 +310,1 @@\n-            System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch. check raw: \" + isFloatCheckWithRawBits);\n+            System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch. check raw: \" + verifyOptions.isFloatCheckWithRawBits);\n@@ -389,1 +422,1 @@\n-                System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch at \" + i + \": \" + a[i] + \" vs \" + b[i] + \". check raw: \" + isFloatCheckWithRawBits);\n+                System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch at \" + i + \": \" + a[i] + \" vs \" + b[i] + \". check raw: \" + verifyOptions.isFloatCheckWithRawBits);\n@@ -408,1 +441,1 @@\n-                System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch at \" + i + \": \" + a[i] + \" vs \" + b[i] + \". check raw: \" + isFloatCheckWithRawBits);\n+                System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch at \" + i + \": \" + a[i] + \" vs \" + b[i] + \". check raw: \" + verifyOptions.isFloatCheckWithRawBits);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/verify\/Verify.java","additions":59,"deletions":26,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -334,1 +334,1 @@\n-        Verify.checkEQ(nanF1, nanF1, true, false);\n+        Verify.checkEQ(nanF1, nanF1, new Verify.Options().enableFloatCheckWithRawBits());\n@@ -338,1 +338,1 @@\n-        Verify.checkEQ(nanD1, nanD1, true, false);\n+        Verify.checkEQ(nanD1, nanD1, new Verify.Options().enableFloatCheckWithRawBits());\n@@ -342,1 +342,1 @@\n-        Verify.checkEQ(arrF1, arrF1, true, false);\n+        Verify.checkEQ(arrF1, arrF1, new Verify.Options().enableFloatCheckWithRawBits());\n@@ -345,1 +345,1 @@\n-        Verify.checkEQ(arrD1, arrD1, true, false);\n+        Verify.checkEQ(arrD1, arrD1, new Verify.Options().enableFloatCheckWithRawBits());\n@@ -348,2 +348,2 @@\n-        checkNE(nanF1, nanF2, true, false);\n-        checkNE(nanD1, nanD2, true, false);\n+        checkNE(nanF1, nanF2, new Verify.Options().enableFloatCheckWithRawBits());\n+        checkNE(nanD1, nanD2, new Verify.Options().enableFloatCheckWithRawBits());\n@@ -351,2 +351,2 @@\n-        checkNE(arrF1, arrF2, true, false);\n-        checkNE(arrD1, arrD2, true, false);\n+        checkNE(arrF1, arrF2, new Verify.Options().enableFloatCheckWithRawBits());\n+        checkNE(arrD1, arrD2, new Verify.Options().enableFloatCheckWithRawBits());\n@@ -465,1 +465,1 @@\n-            checkNE(Float.intBitsToFloat(v1), Float.intBitsToFloat(v2), true, false);\n+            checkNE(Float.intBitsToFloat(v1), Float.intBitsToFloat(v2), new Verify.Options().enableFloatCheckWithRawBits());\n@@ -471,1 +471,1 @@\n-            checkNE(Double.longBitsToDouble(v1), Double.longBitsToDouble(v2), true, false);\n+            checkNE(Double.longBitsToDouble(v1), Double.longBitsToDouble(v2), new Verify.Options().enableFloatCheckWithRawBits());\n@@ -559,1 +559,1 @@\n-        checkNE(a1, a1, false, false);\n+        checkNE(a1, a1);\n@@ -562,6 +562,6 @@\n-        Verify.checkEQ(a1, a1, false, true);\n-        Verify.checkEQ(a1, a2, false, true);\n-        Verify.checkEQ(b1, b1, false, true);\n-        Verify.checkEQ(b1, b2, false, true);\n-        Verify.checkEQ(c1, c1, false, true);\n-        Verify.checkEQ(c1, c2, false, true);\n+        Verify.checkEQ(a1, a1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(a1, a2, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(b1, b1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(b1, b2, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(c1, c1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(c1, c2, new Verify.Options().enableCheckWithArbitraryClasses());\n@@ -570,6 +570,6 @@\n-        checkNE(a1, b1, false, true);\n-        checkNE(b1, a1, false, true);\n-        checkNE(a1, c1, false, true);\n-        checkNE(c1, a1, false, true);\n-        checkNE(b1, c1, false, true);\n-        checkNE(c1, b1, false, true);\n+        checkNE(a1, b1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(b1, a1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(a1, c1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(c1, a1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(b1, c1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(c1, b1, new Verify.Options().enableCheckWithArbitraryClasses());\n@@ -581,5 +581,5 @@\n-        Verify.checkEQ(d1, d1, false, true);\n-        Verify.checkEQ(d1, d2, false, true);\n-        Verify.checkEQ(d2, d1, false, true);\n-        checkNE(d1, d3, false, true);\n-        checkNE(d3, d1, false, true);\n+        Verify.checkEQ(d1, d1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(d1, d2, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(d2, d1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(d1, d3, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(d3, d1, new Verify.Options().enableCheckWithArbitraryClasses());\n@@ -600,11 +600,11 @@\n-        Verify.checkEQ(e1, e1, false, true);\n-        Verify.checkEQ(e1, e2, false, true);\n-        Verify.checkEQ(e2, e1, false, true);\n-        checkNE(e1, e3, false, true);\n-        checkNE(e3, e1, false, true);\n-        Verify.checkEQ(e6, e6, false, true);\n-        Verify.checkEQ(e6, e7, false, true);\n-        Verify.checkEQ(e7, e6, false, true);\n-        Verify.checkEQ(e8, e8, false, true);\n-        checkNE(e8, e9, false, true);\n-        checkNE(e9, e8, false, true);\n+        Verify.checkEQ(e1, e1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(e1, e2, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(e2, e1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(e1, e3, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(e3, e1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(e6, e6, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(e6, e7, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(e7, e6, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(e8, e8, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(e8, e9, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(e9, e8, new Verify.Options().enableCheckWithArbitraryClasses());\n@@ -618,9 +618,9 @@\n-        Verify.checkEQ(f1, f1, false, true);\n-        Verify.checkEQ(f1, f2, false, true);\n-        Verify.checkEQ(f2, f1, false, true);\n-        checkNE(f1, f3, false, true);\n-        checkNE(f1, f4, false, true);\n-        checkNE(f3, f1, false, true);\n-        checkNE(f4, f1, false, true);\n-        checkNE(f3, f4, false, true);\n-        checkNE(f4, f3, false, true);\n+        Verify.checkEQ(f1, f1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(f1, f2, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(f2, f1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(f1, f3, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(f1, f4, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(f3, f1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(f4, f1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(f3, f4, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(f4, f3, new Verify.Options().enableCheckWithArbitraryClasses());\n@@ -633,8 +633,8 @@\n-        Verify.checkEQ(g1, g1, false, true);\n-        Verify.checkEQ(g2, g1, false, true);\n-        Verify.checkEQ(g1, g2, false, true);\n-        Verify.checkEQ(g3, g3, false, true);\n-        Verify.checkEQ(g3, g4, false, true);\n-        Verify.checkEQ(g4, g3, false, true);\n-        checkNE(g1, g3, false, true);\n-        checkNE(g3, g1, false, true);\n+        Verify.checkEQ(g1, g1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(g2, g1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(g1, g2, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(g3, g3, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(g3, g4, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(g4, g3, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(g1, g3, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(g3, g1, new Verify.Options().enableCheckWithArbitraryClasses());\n@@ -644,1 +644,1 @@\n-        Verify.checkEQ(new H2(), new H2(), false, true);\n+        Verify.checkEQ(new H2(), new H2(), new Verify.Options().enableCheckWithArbitraryClasses());\n@@ -655,12 +655,12 @@\n-        Verify.checkEQ(r11, r11, false, true);\n-        Verify.checkEQ(r11, r12, false, true);\n-        Verify.checkEQ(r12, r11, false, true);\n-        checkNE(r11, r21, false, true);\n-        Verify.checkEQ(r31, r31, false, true);\n-        Verify.checkEQ(r31, r32, false, true);\n-        Verify.checkEQ(r32, r31, false, true);\n-        checkNE(r31, r33, false, true);\n-        checkNE(r33, r31, false, true);\n-        checkNE(r31, r34, false, true);\n-        checkNE(r34, r31, false, true);\n-        checkNE(r33, r34, false, true);\n+        Verify.checkEQ(r11, r11, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(r11, r12, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(r12, r11, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(r11, r21, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(r31, r31, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(r31, r32, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(r32, r31, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(r31, r33, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(r33, r31, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(r31, r34, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(r34, r31, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(r33, r34, new Verify.Options().enableCheckWithArbitraryClasses());\n@@ -676,6 +676,6 @@\n-        Verify.checkEQ(r45, r46, false, true);\n-        Verify.checkEQ(r46, r45, false, true);\n-        checkNE(r45, r47, false, true);\n-        checkNE(r47, r45, false, true);\n-        checkNE(r46, r47, false, true);\n-        checkNE(r47, r46, false, true);\n+        Verify.checkEQ(r45, r46, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(r46, r45, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(r45, r47, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(r47, r45, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(r46, r47, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(r47, r46, new Verify.Options().enableCheckWithArbitraryClasses());\n@@ -684,1 +684,1 @@\n-    public static void checkNE(Object a, Object b, boolean isFloatCheckWithRawBits, boolean isCheckWithArbitraryClasses) {\n+    public static void checkNE(Object a, Object b, Verify.Options verifyOptions) {\n@@ -686,1 +686,1 @@\n-            Verify.checkEQ(a, b, isFloatCheckWithRawBits, isCheckWithArbitraryClasses);\n+            Verify.checkEQ(a, b, verifyOptions);\n@@ -692,1 +692,1 @@\n-        checkNE(a, b, false, false);\n+        checkNE(a, b, new Verify.Options());\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/verify\/tests\/TestVerify.java","additions":78,"deletions":78,"binary":false,"changes":156,"status":"modified"}]}