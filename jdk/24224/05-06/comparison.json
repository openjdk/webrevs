{"files":[{"patch":"@@ -36,5 +36,9 @@\n- * The {@link Verify} class provides {@link Verify#checkEQ}, which recursively compares the two\n- * {@link Object}s by value. It deconstruct an array of objects, compares boxed primitive types,\n- * compares the content of arrays and {@link MemorySegment}s, and checks that the messages of two\n- * {@link Exception}s are equal. It also checks for the equivalent content in {@code Vector}s from\n- * the Vector API.\n+ * The {@link Verify} class provide {@link Verify#checkEQ} and {@link Verify#checkEQWithRawBits},\n+ * which recursively compare the two  {@link Object}s by value. They deconstruct an array of objects,\n+ * compare boxed primitive types, compare the content of arrays and {@link MemorySegment}s, and check\n+ * that the messages of two {@link Exception}s are equal. They also checks for the equivalent content\n+ * in {@code Vector}s from the Vector API.\n+ *\n+ * <p>\n+ * Further, they compare Objects from arbitrary classes, using reflection. We check the fields of the\n+ * Objects, and compare their recursive structure. Since we use reflection, this can be slow.\n@@ -48,3 +52,3 @@\n- * have two modes of comparison. By default, different NaN values are regarded as equal. This applies\n- * to the boxed floating types, as well as arrays of floating arrays. With {@link Options#enableFloatCheckWithRawBits},\n- * we compare the raw bits, and so different NaN encodings are not equal.\n+ * have two modes of comparison. With {@link Verify#checkEQ} different NaN values are regarded as equal.\n+ * This applies to the boxed floating types, as well as arrays of floating arrays. With\n+ * {@link Verify#checkEQWithRawBits} we compare the raw bits, and so different NaN encodings are not equal.\n@@ -52,5 +56,0 @@\n- *\n- * <p>\n- * By default, we only support comparison of the types mentioned above. However, in some cases one\n- * might want to compare Objects of arbitrary classes by value, i.e. the recursive structure given\n- * by their field values. This feature can be enabled with {@link Options#enableCheckWithArbitraryClasses}.\n@@ -59,38 +58,1 @@\n-\n-    \/**\n-     * The {@link Options} class allows the specification of further verification options.\n-     *\/\n-    public final static class Options {\n-        boolean isFloatCheckWithRawBits;\n-        boolean isCheckWithArbitraryClasses;\n-\n-        \/**\n-         * Generates an {@link Options} object with default settings.\n-         *\/\n-        public Options() {}\n-\n-        \/**\n-         * By default, different NaN values are regarded as equal, but with this option enabled,\n-         * we compare the raw bits, and different NaN encodings are regarded as not equal.\n-         *\n-         * @return The {@code this} reference for chaining.\n-         *\/\n-        public Options enableFloatCheckWithRawBits() {\n-            isFloatCheckWithRawBits = true;\n-            return this;\n-        }\n-\n-        \/**\n-         * By default, we only support the comparison of a limited set of types, but with this option\n-         * enabled, we can compare arbitrary classes by value, and we compare the Objects by\n-         * the recursive structure given by their field values.\n-         *\n-         * @return The {@code this} reference for chaining.\n-         *\/\n-        public Options enableCheckWithArbitraryClasses() {\n-            isCheckWithArbitraryClasses = true;\n-            return this;\n-        }\n-    }\n-\n-    private final Options verifyOptions;\n+    private final boolean isFloatCheckWithRawBits;\n@@ -100,2 +62,2 @@\n-    private Verify(Options verifyOptions) {\n-        this.verifyOptions = verifyOptions;\n+    private Verify(boolean isFloatCheckWithRawBits) {\n+        this.isFloatCheckWithRawBits = isFloatCheckWithRawBits;\n@@ -106,0 +68,2 @@\n+     * Different NaN encodins are considered non-qual, since we compare\n+     * floating number by their raw bits.\n@@ -109,1 +73,0 @@\n-     * @param verifyOptions Allows specification of further options.\n@@ -112,2 +75,2 @@\n-    public static void checkEQ(Object a, Object b, Options verifyOptions) {\n-        Verify v = new Verify(verifyOptions);\n+    public static void checkEQWithRawBits(Object a, Object b) {\n+        Verify v = new Verify(true);\n@@ -119,1 +82,0 @@\n-     * Only limited types are implemented (no arbitrary classes).\n@@ -127,1 +89,2 @@\n-        checkEQ(a, b, new Options());\n+        Verify v = new Verify(false);\n+        v.checkEQdispatch(a, b, \"<root>\", null, null);\n@@ -202,8 +165,2 @@\n-                if (verifyOptions.isCheckWithArbitraryClasses) {\n-                    checkEQArbitraryClasses(a, b);\n-                    return;\n-                } else {\n-                    System.err.println(\"ERROR: Verify.checkEQ failed: type not supported: \" + ca.getName());\n-                    print(a, b, field, aParent, bParent);\n-                    throw new VerifyException(\"Object type not supported: \" + ca.getName() + \" -- did you mean to 'enableCheckWithArbitraryClasses'?\");\n-                }\n+                checkEQArbitraryClasses(a, b);\n+                return;\n@@ -280,2 +237,2 @@\n-        return verifyOptions.isFloatCheckWithRawBits ? Float.floatToRawIntBits(a) != Float.floatToRawIntBits(b)\n-                                                     : Float.floatToIntBits(a) != Float.floatToIntBits(b);\n+        return isFloatCheckWithRawBits ? Float.floatToRawIntBits(a) != Float.floatToRawIntBits(b)\n+                                       : Float.floatToIntBits(a) != Float.floatToIntBits(b);\n@@ -288,2 +245,2 @@\n-        return verifyOptions.isFloatCheckWithRawBits ? Double.doubleToRawLongBits(a) != Double.doubleToRawLongBits(b)\n-                                                     : Double.doubleToLongBits(a) != Double.doubleToLongBits(b);\n+        return isFloatCheckWithRawBits ? Double.doubleToRawLongBits(a) != Double.doubleToRawLongBits(b)\n+                                       : Double.doubleToLongBits(a) != Double.doubleToLongBits(b);\n@@ -297,1 +254,1 @@\n-            System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch. check raw: \" + verifyOptions.isFloatCheckWithRawBits);\n+            System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch. check raw: \" + isFloatCheckWithRawBits);\n@@ -310,1 +267,1 @@\n-            System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch. check raw: \" + verifyOptions.isFloatCheckWithRawBits);\n+            System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch. check raw: \" + isFloatCheckWithRawBits);\n@@ -422,1 +379,1 @@\n-                System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch at \" + i + \": \" + a[i] + \" vs \" + b[i] + \". check raw: \" + verifyOptions.isFloatCheckWithRawBits);\n+                System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch at \" + i + \": \" + a[i] + \" vs \" + b[i] + \". check raw: \" + isFloatCheckWithRawBits);\n@@ -441,1 +398,1 @@\n-                System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch at \" + i + \": \" + a[i] + \" vs \" + b[i] + \". check raw: \" + verifyOptions.isFloatCheckWithRawBits);\n+                System.err.println(\"ERROR: Verify.checkEQ failed: value mismatch at \" + i + \": \" + a[i] + \" vs \" + b[i] + \". check raw: \" + isFloatCheckWithRawBits);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/verify\/Verify.java","additions":31,"deletions":74,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -334,1 +334,1 @@\n-        Verify.checkEQ(nanF1, nanF1, new Verify.Options().enableFloatCheckWithRawBits());\n+        Verify.checkEQWithRawBits(nanF1, nanF1);\n@@ -338,1 +338,1 @@\n-        Verify.checkEQ(nanD1, nanD1, new Verify.Options().enableFloatCheckWithRawBits());\n+        Verify.checkEQWithRawBits(nanD1, nanD1);\n@@ -342,1 +342,1 @@\n-        Verify.checkEQ(arrF1, arrF1, new Verify.Options().enableFloatCheckWithRawBits());\n+        Verify.checkEQWithRawBits(arrF1, arrF1);\n@@ -345,1 +345,1 @@\n-        Verify.checkEQ(arrD1, arrD1, new Verify.Options().enableFloatCheckWithRawBits());\n+        Verify.checkEQWithRawBits(arrD1, arrD1);\n@@ -348,2 +348,2 @@\n-        checkNE(nanF1, nanF2, new Verify.Options().enableFloatCheckWithRawBits());\n-        checkNE(nanD1, nanD2, new Verify.Options().enableFloatCheckWithRawBits());\n+        checkNEWithRawBits(nanF1, nanF2);\n+        checkNEWithRawBits(nanD1, nanD2);\n@@ -351,2 +351,2 @@\n-        checkNE(arrF1, arrF2, new Verify.Options().enableFloatCheckWithRawBits());\n-        checkNE(arrD1, arrD2, new Verify.Options().enableFloatCheckWithRawBits());\n+        checkNEWithRawBits(arrF1, arrF2);\n+        checkNEWithRawBits(arrD1, arrD2);\n@@ -465,1 +465,1 @@\n-            checkNE(Float.intBitsToFloat(v1), Float.intBitsToFloat(v2), new Verify.Options().enableFloatCheckWithRawBits());\n+            checkNEWithRawBits(Float.intBitsToFloat(v1), Float.intBitsToFloat(v2));\n@@ -471,1 +471,1 @@\n-            checkNE(Double.longBitsToDouble(v1), Double.longBitsToDouble(v2), new Verify.Options().enableFloatCheckWithRawBits());\n+            checkNEWithRawBits(Double.longBitsToDouble(v1), Double.longBitsToDouble(v2));\n@@ -558,3 +558,0 @@\n-        \/\/ Throws exception because arbitrary classes are not allowed.\n-        checkNE(a1, a1);\n-\n@@ -562,6 +559,6 @@\n-        Verify.checkEQ(a1, a1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(a1, a2, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(b1, b1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(b1, b2, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(c1, c1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(c1, c2, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(a1, a1);\n+        Verify.checkEQ(a1, a2);\n+        Verify.checkEQ(b1, b1);\n+        Verify.checkEQ(b1, b2);\n+        Verify.checkEQ(c1, c1);\n+        Verify.checkEQ(c1, c2);\n@@ -570,6 +567,6 @@\n-        checkNE(a1, b1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(b1, a1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(a1, c1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(c1, a1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(b1, c1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(c1, b1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        checkNE(a1, b1);\n+        checkNE(b1, a1);\n+        checkNE(a1, c1);\n+        checkNE(c1, a1);\n+        checkNE(b1, c1);\n+        checkNE(c1, b1);\n@@ -581,5 +578,5 @@\n-        Verify.checkEQ(d1, d1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(d1, d2, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(d2, d1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(d1, d3, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(d3, d1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(d1, d1);\n+        Verify.checkEQ(d1, d2);\n+        Verify.checkEQ(d2, d1);\n+        checkNE(d1, d3);\n+        checkNE(d3, d1);\n@@ -600,11 +597,11 @@\n-        Verify.checkEQ(e1, e1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(e1, e2, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(e2, e1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(e1, e3, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(e3, e1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(e6, e6, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(e6, e7, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(e7, e6, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(e8, e8, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(e8, e9, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(e9, e8, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(e1, e1);\n+        Verify.checkEQ(e1, e2);\n+        Verify.checkEQ(e2, e1);\n+        checkNE(e1, e3);\n+        checkNE(e3, e1);\n+        Verify.checkEQ(e6, e6);\n+        Verify.checkEQ(e6, e7);\n+        Verify.checkEQ(e7, e6);\n+        Verify.checkEQ(e8, e8);\n+        checkNE(e8, e9);\n+        checkNE(e9, e8);\n@@ -618,9 +615,9 @@\n-        Verify.checkEQ(f1, f1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(f1, f2, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(f2, f1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(f1, f3, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(f1, f4, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(f3, f1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(f4, f1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(f3, f4, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(f4, f3, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(f1, f1);\n+        Verify.checkEQ(f1, f2);\n+        Verify.checkEQ(f2, f1);\n+        checkNE(f1, f3);\n+        checkNE(f1, f4);\n+        checkNE(f3, f1);\n+        checkNE(f4, f1);\n+        checkNE(f3, f4);\n+        checkNE(f4, f3);\n@@ -633,8 +630,8 @@\n-        Verify.checkEQ(g1, g1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(g2, g1, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(g1, g2, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(g3, g3, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(g3, g4, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(g4, g3, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(g1, g3, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(g3, g1, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(g1, g1);\n+        Verify.checkEQ(g2, g1);\n+        Verify.checkEQ(g1, g2);\n+        Verify.checkEQ(g3, g3);\n+        Verify.checkEQ(g3, g4);\n+        Verify.checkEQ(g4, g3);\n+        checkNE(g1, g3);\n+        checkNE(g3, g1);\n@@ -644,1 +641,1 @@\n-        Verify.checkEQ(new H2(), new H2(), new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(new H2(), new H2());\n@@ -655,12 +652,12 @@\n-        Verify.checkEQ(r11, r11, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(r11, r12, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(r12, r11, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(r11, r21, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(r31, r31, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(r31, r32, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(r32, r31, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(r31, r33, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(r33, r31, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(r31, r34, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(r34, r31, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(r33, r34, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(r11, r11);\n+        Verify.checkEQ(r11, r12);\n+        Verify.checkEQ(r12, r11);\n+        checkNE(r11, r21);\n+        Verify.checkEQ(r31, r31);\n+        Verify.checkEQ(r31, r32);\n+        Verify.checkEQ(r32, r31);\n+        checkNE(r31, r33);\n+        checkNE(r33, r31);\n+        checkNE(r31, r34);\n+        checkNE(r34, r31);\n+        checkNE(r33, r34);\n@@ -676,6 +673,6 @@\n-        Verify.checkEQ(r45, r46, new Verify.Options().enableCheckWithArbitraryClasses());\n-        Verify.checkEQ(r46, r45, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(r45, r47, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(r47, r45, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(r46, r47, new Verify.Options().enableCheckWithArbitraryClasses());\n-        checkNE(r47, r46, new Verify.Options().enableCheckWithArbitraryClasses());\n+        Verify.checkEQ(r45, r46);\n+        Verify.checkEQ(r46, r45);\n+        checkNE(r45, r47);\n+        checkNE(r47, r45);\n+        checkNE(r46, r47);\n+        checkNE(r47, r46);\n@@ -684,1 +681,1 @@\n-    public static void checkNE(Object a, Object b, Verify.Options verifyOptions) {\n+    public static void checkNE(Object a, Object b) {\n@@ -686,1 +683,1 @@\n-            Verify.checkEQ(a, b, verifyOptions);\n+            Verify.checkEQ(a, b);\n@@ -691,2 +688,5 @@\n-    public static void checkNE(Object a, Object b) {\n-        checkNE(a, b, new Verify.Options());\n+    public static void checkNEWithRawBits(Object a, Object b) {\n+         try {\n+            Verify.checkEQWithRawBits(a, b);\n+            throw new RuntimeException(\"Should have thrown: \" + a + \" vs \" + b);\n+        } catch (VerifyException e) {}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/verify\/tests\/TestVerify.java","additions":81,"deletions":81,"binary":false,"changes":162,"status":"modified"}]}