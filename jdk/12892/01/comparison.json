{"files":[{"patch":"@@ -1468,2 +1468,3 @@\n-void java_lang_Thread_FieldHolder::set_daemon(oop holder) {\n-  holder->bool_field_put(_daemon_offset, true);\n+void java_lang_Thread_FieldHolder::set_daemon(oop holder, bool val) {\n+  assert(val, \"daemon status is never turned off\");\n+  holder->bool_field_put(_daemon_offset, val);\n@@ -1602,1 +1603,2 @@\n-    return java_thread->obj_field(_holder_offset);\n+  \/\/ Note: may be null if the thread is still attaching\n+  return java_thread->obj_field(_holder_offset);\n@@ -1633,0 +1635,23 @@\n+\/\/ Convenience macros for setting and getting Thread fields that\n+\/\/ are actually stored in the FieldHolder object of the thread.\n+\/\/ The FieldHolder can be null whilst a thread is attaching via JNI.\n+\n+\/\/ The default value should be the default\/zero initialized value\n+\/\/ of the field as it would be in java.lang.Thread.FieldHolder.\n+#define GET_FIELDHOLDER_FIELD(java_thread, field, default_val)  \\\n+  {                                                             \\\n+    oop holder = java_lang_Thread::holder(java_thread);         \\\n+    if (holder != nullptr)                                      \\\n+      return java_lang_Thread_FieldHolder::field(holder);       \\\n+    else                                                        \\\n+      return default_val;                                       \\\n+  }\n+\n+\/\/ We should never be trying to set a field of an attaching thread.\n+#define SET_FIELDHOLDER_FIELD(java_thread, field, value)        \\\n+  {                                                             \\\n+    oop holder = java_lang_Thread::holder(java_thread);         \\\n+    assert(holder != nullptr, \"Thread not fully initialized\");  \\\n+    java_lang_Thread_FieldHolder::set_##field(holder, value);   \\\n+  }\n+\n@@ -1635,3 +1660,1 @@\n-  oop holder = java_lang_Thread::holder(java_thread);\n-  assert(holder != nullptr, \"Java Thread not initialized\");\n-  return java_lang_Thread_FieldHolder::priority(holder);\n+  GET_FIELDHOLDER_FIELD(java_thread, priority, (ThreadPriority)0);\n@@ -1642,3 +1665,1 @@\n-  oop holder = java_lang_Thread::holder(java_thread);\n-  assert(holder != nullptr, \"Java Thread not initialized\");\n-  java_lang_Thread_FieldHolder::set_priority(holder, priority);\n+  SET_FIELDHOLDER_FIELD(java_thread, priority, priority)\n@@ -1649,3 +1670,1 @@\n-  oop holder = java_lang_Thread::holder(java_thread);\n-  assert(holder != nullptr, \"Java Thread not initialized\");\n-  return java_lang_Thread_FieldHolder::threadGroup(holder);\n+  GET_FIELDHOLDER_FIELD(java_thread, threadGroup, nullptr);\n@@ -1662,3 +1681,1 @@\n-  oop holder = java_lang_Thread::holder(java_thread);\n-  assert(holder != nullptr, \"Java Thread not initialized\");\n-  return java_lang_Thread_FieldHolder::is_daemon(holder);\n+  GET_FIELDHOLDER_FIELD(java_thread, is_daemon, false);\n@@ -1669,3 +1686,1 @@\n-  oop holder = java_lang_Thread::holder(java_thread);\n-  assert(holder != nullptr, \"Java Thread not initialized\");\n-  java_lang_Thread_FieldHolder::set_daemon(holder);\n+  SET_FIELDHOLDER_FIELD(java_thread, daemon, true);\n@@ -1684,3 +1699,1 @@\n-  oop holder = java_lang_Thread::holder(java_thread);\n-  assert(holder != nullptr, \"Java Thread not initialized\");\n-  return java_lang_Thread_FieldHolder::stackSize(holder);\n+  GET_FIELDHOLDER_FIELD(java_thread, stackSize, 0);\n@@ -1691,3 +1704,1 @@\n-  oop holder = java_lang_Thread::holder(java_thread);\n-  assert(holder != nullptr, \"Java Thread not initialized\");\n-  java_lang_Thread_FieldHolder::set_thread_status(holder, status);\n+  SET_FIELDHOLDER_FIELD(java_thread, thread_status, status);\n@@ -1703,6 +1714,1 @@\n-  oop holder = java_lang_Thread::holder(java_thread);\n-  if (holder == nullptr) {\n-    return JavaThreadStatus::NEW;  \/\/ Java Thread not initialized\n-  } else {\n-    return java_lang_Thread_FieldHolder::get_thread_status(holder);\n-  }\n+  GET_FIELDHOLDER_FIELD(java_thread, get_thread_status, JavaThreadStatus::NEW;  \/* not initialized *\/);\n@@ -1844,3 +1850,1 @@\n-  oop holder = java_lang_Thread::holder(java_thread);\n-  assert(holder != nullptr, \"Java Thread not initialized\");\n-  JavaThreadStatus status = java_lang_Thread_FieldHolder::get_thread_status(holder);\n+  JavaThreadStatus status = get_thread_status(java_thread);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":37,"deletions":33,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -456,1 +456,1 @@\n-  static void set_daemon(oop holder);\n+  static void set_daemon(oop holder, bool val);\n@@ -458,1 +458,1 @@\n-  static void set_thread_status(oop holder, JavaThreadStatus);\n+  static void set_thread_status(oop holder, JavaThreadStatus status);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-                            THREAD);\n+                            CHECK);\n@@ -249,1 +249,1 @@\n-                            THREAD);\n+                            CHECK);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}