{"files":[{"patch":"@@ -741,25 +741,13 @@\n-        if (fmt instanceof NumberFormat) {\n-            \/\/ Add any instances returned from the NumberFormat factory methods\n-            if (fmt.equals(NumberFormat.getInstance(locale))) {\n-                return \",number\";\n-            } else if (fmt.equals(NumberFormat.getCurrencyInstance(locale))) {\n-                return \",number,currency\";\n-            } else if (fmt.equals(NumberFormat.getPercentInstance(locale))) {\n-                return \",number,percent\";\n-            } else if (fmt.equals(NumberFormat.getIntegerInstance(locale))) {\n-                return \",number,integer\";\n-            } else if (fmt.equals(NumberFormat.getCompactNumberInstance(locale,\n-                    NumberFormat.Style.SHORT))) {\n-                return \",number,compact_short\";\n-            } else if (fmt.equals(NumberFormat.getCompactNumberInstance(locale,\n-                    NumberFormat.Style.LONG))) {\n-                return \",number,compact_long\";\n-            } else {\n-                \/\/ No pre-defined styles match, return the SubformatPattern\n-                if (fmt instanceof DecimalFormat dFmt) {\n-                    \/\/ Quote eligible mFmt pattern characters: '{' and '}'\n-                    \/\/ Here, and in other subformatPattern instances\n-                    return \",number,\" + copyAndQuoteBraces(dFmt.toPattern());\n-                } else if (fmt instanceof ChoiceFormat cFmt) {\n-                    return \",choice,\" + copyAndQuoteBraces(cFmt.toPattern());\n-                }\n+        if (fmt instanceof NumberFormat nFmt) {\n+            \/\/ Check nFmt factory instances\n+            String nStyle = NumberFormat.matchToStyle(nFmt, locale);\n+            if (nStyle != null) {\n+                return \",number\" + (nStyle.equals(\"\") ? nStyle : \",\" + nStyle);\n+            }\n+            \/\/ Check SubformatPattern\n+            if (fmt instanceof DecimalFormat dFmt) {\n+                \/\/ Quote eligible mFmt pattern characters: '{' and '}'\n+                \/\/ Here, and in other subformatPattern instances\n+                return \",number,\" + copyAndQuoteBraces(dFmt.toPattern());\n+            } else if (fmt instanceof ChoiceFormat cFmt) {\n+                return \",choice,\" + copyAndQuoteBraces(cFmt.toPattern());\n@@ -768,1 +756,1 @@\n-            \/\/ Match to any pre-defined DateFormat styles\n+            \/\/ Check dFmt factory instances\n@@ -779,1 +767,1 @@\n-            \/\/ If no styles match, return the SubformatPattern\n+            \/\/ Check SubformatPattern\n@@ -784,0 +772,1 @@\n+            \/\/ Check lFmt factory instances\n@@ -1997,1 +1986,1 @@\n-                if (!style.equals(FormatStyle.SUBFORMATPATTERN) &&\n+                if (style != FormatStyle.SUBFORMATPATTERN &&\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":17,"deletions":28,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -680,0 +680,27 @@\n+    \/**\n+     * This method compares the passed NumberFormat to a number of pre-defined\n+     * style NumberFormat instances, (created with the passed locale). Returns a\n+     * matching FormatStyle string if found, otherwise null.\n+     * This method is used by MessageFormat to provide string pattens for NumberFormat\n+     * Subformats. Any future pre-defined NumberFormat styles should be added to this method.\n+     *\/\n+    static String matchToStyle(NumberFormat fmt, Locale locale) {\n+        if (fmt.equals(NumberFormat.getInstance(locale))) {\n+            return \"\";\n+        } else if (fmt.equals(NumberFormat.getCurrencyInstance(locale))) {\n+            return \"currency\";\n+        } else if (fmt.equals(NumberFormat.getPercentInstance(locale))) {\n+            return \"percent\";\n+        } else if (fmt.equals(NumberFormat.getIntegerInstance(locale))) {\n+            return \"integer\";\n+        } else if (fmt.equals(NumberFormat.getCompactNumberInstance(locale,\n+                NumberFormat.Style.SHORT))) {\n+            return \"compact_short\";\n+        } else if (fmt.equals(NumberFormat.getCompactNumberInstance(locale,\n+                NumberFormat.Style.LONG))) {\n+            return \"compact_long\";\n+        } else {\n+            return null;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"}]}