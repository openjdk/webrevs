{"files":[{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2024, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#if defined(__ARM_NEON__) || defined(__ARM_NEON)\n+\n+#include <stdint.h>\n+#include <arm_neon.h>\n+\n+#include \"..\/generated\/misc.h\"\n+#include \"..\/generated\/sleefinline_advsimd.h\"\n+\n+\n+#include <jni.h>\n+\n+#define DEFINE_VECTOR_MATH_UNARY(op, type) \\\n+JNIEXPORT                                  \\\n+type op##advsimd(type input) {             \\\n+  return Sleef_##op##advsimd(input);       \\\n+}\n+\n+#define DEFINE_VECTOR_MATH_BINARY(op, type)   \\\n+JNIEXPORT                                     \\\n+type op##advsimd(type input1, type input2) {  \\\n+  return Sleef_##op##advsimd(input1, input2); \\\n+}\n+\n+DEFINE_VECTOR_MATH_UNARY(tanf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(tanhf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(sinf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(sinhf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(cosf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(coshf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(asinf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(acosf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(atanf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(cbrtf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(logf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(log10f4_u10, float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(log1pf4_u10, float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(expf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(expm1f4_u10, float32x4_t)\n+\n+DEFINE_VECTOR_MATH_UNARY(tand2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(tanhd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(sind2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(sinhd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(cosd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(coshd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(asind2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(acosd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(atand2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(cbrtd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(logd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(log10d2_u10, float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(log1pd2_u10, float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(expd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(expm1d2_u10, float64x2_t)\n+\n+DEFINE_VECTOR_MATH_BINARY(atan2f4_u10, float32x4_t)\n+DEFINE_VECTOR_MATH_BINARY(powf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_BINARY(hypotf4_u05, float32x4_t)\n+\n+DEFINE_VECTOR_MATH_BINARY(atan2d2_u10, float64x2_t)\n+DEFINE_VECTOR_MATH_BINARY(powd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_BINARY(hypotd2_u05, float64x2_t)\n+\n+#undef DEFINE_VECTOR_MATH_UNARY\n+\n+#undef DEFINE_VECTOR_MATH_BINARY\n+\n+#endif \/\/ defined(__ARM_NEON__) || defined(__ARM_NEON)\n","filename":"src\/jdk.incubator.vector\/linux\/native\/libsleef\/lib\/vector_math_neon.c","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2024, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#if defined(__ARM_FEATURE_SVE)\n+\n+#include <stdint.h>\n+#include <arm_sve.h>\n+\n+#include \"..\/generated\/misc.h\"\n+#include \"..\/generated\/sleefinline_sve.h\"\n+\n+\n+#include <jni.h>\n+\n+#define DEFINE_VECTOR_MATH_UNARY_SVE(op, type) \\\n+JNIEXPORT                                      \\\n+type op##sve(type input) {                     \\\n+  return Sleef_##op##sve(input);               \\\n+}\n+\n+#define DEFINE_VECTOR_MATH_BINARY_SVE(op, type) \\\n+JNIEXPORT                                       \\\n+type op##sve(type input1, type input2) {        \\\n+  return Sleef_##op##sve(input1, input2);       \\\n+}\n+\n+DEFINE_VECTOR_MATH_UNARY_SVE(tanfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sinfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sinhfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cosfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(coshfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(asinfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(acosfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(atanfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cbrtfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(logfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log10fx_u10, svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log1pfx_u10, svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expm1fx_u10, svfloat32_t)\n+\n+DEFINE_VECTOR_MATH_UNARY_SVE(tandx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sindx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sinhdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cosdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(coshdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(asindx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(acosdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(atandx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cbrtdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(logdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log10dx_u10, svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log1pdx_u10, svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expm1dx_u10, svfloat64_t)\n+\n+DEFINE_VECTOR_MATH_BINARY_SVE(atan2fx_u10, svfloat32_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(powfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(hypotfx_u05, svfloat32_t)\n+\n+DEFINE_VECTOR_MATH_BINARY_SVE(atan2dx_u10, svfloat64_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(powdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(hypotdx_u05, svfloat64_t)\n+\n+#undef DEFINE_VECTOR_MATH_UNARY_SVE\n+\n+#undef DEFINE_VECTOR_MATH_BINARY_SVE\n+\n+#endif \/\/ __ARM_FEATURE_SVE\n","filename":"src\/jdk.incubator.vector\/linux\/native\/libsleef\/lib\/vector_math_sve.c","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}