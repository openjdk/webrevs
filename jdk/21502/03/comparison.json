{"files":[{"patch":"@@ -915,0 +915,30 @@\n+\n+  # Check whether the compiler supports the Arm C Language Extensions (ACLE)\n+  # for SVE. Set SVE_CFLAGS to -march=armv8-a+sve if it does.\n+  # ACLE and this flag are required to build the aarch64 SVE related functions in\n+  # libvectormath.\n+  if test \"x$OPENJDK_TARGET_CPU\" = \"xaarch64\"; then\n+    if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang; then\n+      AC_LANG_PUSH(C)\n+      OLD_CFLAGS=\"$CFLAGS\"\n+      CFLAGS=\"$CFLAGS -march=armv8-a+sve\"\n+      AC_MSG_CHECKING([if Arm SVE ACLE is supported])\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include <arm_sve.h>],\n+          [\n+            svint32_t r = svdup_n_s32(1);\n+            return 0;\n+          ])],\n+          [\n+            AC_MSG_RESULT([yes])\n+            $2SVE_CFLAGS=\"-march=armv8-a+sve\"\n+          ],\n+          [\n+            AC_MSG_RESULT([no])\n+            $2SVE_CFLAGS=\"\"\n+          ]\n+      )\n+      CFLAGS=\"$OLD_CFLAGS\"\n+      AC_LANG_POP(C)\n+    fi\n+  fi\n+  AC_SUBST($2SVE_CFLAGS)\n","filename":"make\/autoconf\/flags-cflags.m4","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -830,0 +830,3 @@\n+# Arm SVE\n+SVE_CFLAGS := @SVE_CFLAGS@\n+\n","filename":"make\/autoconf\/spec.gmk.template","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,0 +58,14 @@\n+\n+ifeq ($(call isTargetOs, linux)+$(call isTargetCpu, aarch64)+$(INCLUDE_COMPILER2), true+true+true)\n+  $(eval $(call SetupJdkLibrary, BUILD_LIBSLEEF, \\\n+      NAME := sleef, \\\n+      OPTIMIZATION := HIGH, \\\n+      SRC := libsleef\/lib, \\\n+      EXTRA_SRC := libsleef\/generated, \\\n+      DISABLED_WARNINGS_gcc := unused-function sign-compare tautological-compare ignored-qualifiers, \\\n+      DISABLED_WARNINGS_clang := unused-function sign-compare tautological-compare ignored-qualifiers, \\\n+      CFLAGS := $(SVE_CFLAGS), \\\n+  ))\n+\n+  TARGETS += $(BUILD_LIBSLEEF)\n+endif\n","filename":"make\/modules\/jdk.incubator.vector\/Lib.gmk","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2310,1 +2310,0 @@\n-\/\/ Vector calling convention not yet implemented.\n@@ -2312,1 +2311,1 @@\n-  return false;\n+  return EnableVectorSupport && UseVectorStubs;\n@@ -2316,2 +2315,7 @@\n-  Unimplemented();\n-  return OptoRegPair(0, 0);\n+  assert(EnableVectorSupport && UseVectorStubs, \"sanity\");\n+  int lo = V0_num;\n+  int hi = V0_H_num;\n+  if (ideal_reg == Op_VecX || ideal_reg == Op_VecA) {\n+    hi = V0_K_num;\n+  }\n+  return OptoRegPair(hi, lo);\n@@ -16112,0 +16116,16 @@\n+\/\/ Call Runtime Instruction without safepoint and with vector arguments\n+instruct CallLeafDirectVector(method meth)\n+%{\n+  match(CallLeafVector);\n+\n+  effect(USE meth);\n+\n+  ins_cost(CALL_COST);\n+\n+  format %{ \"CALL, runtime leaf vector $meth\" %}\n+\n+  ins_encode(aarch64_enc_java_to_runtime(meth));\n+\n+  ins_pipe(pipe_class_call);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -874,1 +874,14 @@\n-  Unimplemented();\n+  \/\/ More than 8 argument inputs are not supported now.\n+  assert(total_args_passed <= Argument::n_float_register_parameters_c, \"unsupported\");\n+  assert(num_bits >= 64 && num_bits <= 2048 && is_power_of_2(num_bits), \"unsupported\");\n+\n+  static const FloatRegister VEC_ArgReg[Argument::n_float_register_parameters_c] = {\n+    v0, v1, v2, v3, v4, v5, v6, v7\n+  };\n+\n+  \/\/ On SVE, we use the same vector registers with 128-bit vector registers on NEON.\n+  int next_reg_val = num_bits == 64 ? 1 : 3;\n+  for (uint i = 0; i < total_args_passed; i++) {\n+    VMReg vmreg = VEC_ArgReg[i]->as_VMReg();\n+    regs[i].set_pair(vmreg->next(next_reg_val), vmreg);\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"runtime\/arguments.hpp\"\n@@ -8171,0 +8172,72 @@\n+  void generate_vector_math_stubs() {\n+    \/\/ Get native vector math stub routine addresses\n+    void* libsleef = nullptr;\n+    char ebuf[1024];\n+    char dll_name[JVM_MAXPATHLEN];\n+    if (os::dll_locate_lib(dll_name, sizeof(dll_name), Arguments::get_dll_dir(), \"sleef\")) {\n+      libsleef = os::dll_load(dll_name, ebuf, sizeof ebuf);\n+    }\n+    if (libsleef == nullptr) {\n+      log_info(library)(\"Failed to load native vector math library, %s!\", ebuf);\n+      return;\n+    }\n+    \/\/ Method naming convention\n+    \/\/   All the methods are named as <OP><T><N>_<U><suffix>\n+    \/\/   Where:\n+    \/\/     <OP>     is the operation name, e.g. sin\n+    \/\/     <T>      is optional to indicate float\/double\n+    \/\/              \"f\/d\" for vector float\/double operation\n+    \/\/     <N>      is the number of elements in the vector\n+    \/\/              \"2\/4\" for neon, and \"x\" for sve\n+    \/\/     <U>      is the precision level\n+    \/\/              \"u10\/u05\" represents 1.0\/0.5 ULP error bounds\n+    \/\/               We use \"u10\" for all operations by default\n+    \/\/               But for those functions do not have u10 support, we use \"u05\" instead\n+    \/\/     <suffix> indicates neon\/sve\n+    \/\/              \"sve\/advsimd\" for sve\/neon implementations\n+    \/\/     e.g. sinfx_u10sve is the method for computing vector float sin using SVE instructions\n+    \/\/          cosd2_u10advsimd is the method for computing 2 elements vector double cos using NEON instructions\n+    \/\/\n+    log_info(library)(\"Loaded library %s, handle \" INTPTR_FORMAT, JNI_LIB_PREFIX \"sleef\" JNI_LIB_SUFFIX, p2i(libsleef));\n+\n+    \/\/ Math vector stubs implemented with SVE for scalable vector size.\n+    if (UseSVE > 0) {\n+      for (int op = 0; op < VectorSupport::NUM_VECTOR_OP_MATH; op++) {\n+        int vop = VectorSupport::VECTOR_OP_MATH_START + op;\n+        \/\/ Skip \"tanh\" because there is performance regression\n+        if (vop == VectorSupport::VECTOR_OP_TANH) {\n+          continue;\n+        }\n+\n+        \/\/ The native library does not support u10 level of \"hypot\".\n+        const char* ulf = (vop == VectorSupport::VECTOR_OP_HYPOT) ? \"u05\" : \"u10\";\n+\n+        snprintf(ebuf, sizeof(ebuf), \"%sfx_%ssve\", VectorSupport::mathname[op], ulf);\n+        StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_SCALABLE][op] = (address)os::dll_lookup(libsleef, ebuf);\n+\n+        snprintf(ebuf, sizeof(ebuf), \"%sdx_%ssve\", VectorSupport::mathname[op], ulf);\n+        StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_SCALABLE][op] = (address)os::dll_lookup(libsleef, ebuf);\n+      }\n+    }\n+\n+    \/\/ Math vector stubs implemented with NEON for 64\/128 bits vector size.\n+    for (int op = 0; op < VectorSupport::NUM_VECTOR_OP_MATH; op++) {\n+      int vop = VectorSupport::VECTOR_OP_MATH_START + op;\n+      \/\/ Skip \"tanh\" because there is performance regression\n+      if (vop == VectorSupport::VECTOR_OP_TANH) {\n+        continue;\n+      }\n+\n+      \/\/ The native library does not support u10 level of \"hypot\".\n+      const char* ulf = (vop == VectorSupport::VECTOR_OP_HYPOT) ? \"u05\" : \"u10\";\n+\n+      snprintf(ebuf, sizeof(ebuf), \"%sf4_%sadvsimd\", VectorSupport::mathname[op], ulf);\n+      StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_64][op] = (address)os::dll_lookup(libsleef, ebuf);\n+\n+      snprintf(ebuf, sizeof(ebuf), \"%sf4_%sadvsimd\", VectorSupport::mathname[op], ulf);\n+      StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_128][op] = (address)os::dll_lookup(libsleef, ebuf);\n+\n+      snprintf(ebuf, sizeof(ebuf), \"%sd2_%sadvsimd\", VectorSupport::mathname[op], ulf);\n+      StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_128][op] = (address)os::dll_lookup(libsleef, ebuf);\n+    }\n+  }\n@@ -8324,0 +8397,3 @@\n+\n+    generate_vector_math_stubs();\n+\n@@ -8379,0 +8455,1 @@\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":77,"deletions":0,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2024, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#if defined(__ARM_NEON__) || defined(__ARM_NEON)\n+\n+#include <stdint.h>\n+#include <arm_neon.h>\n+\n+#include \"..\/generated\/misc.h\"\n+#include \"..\/generated\/sleefinline_advsimd.h\"\n+\n+\n+#include <jni.h>\n+\n+#define DEFINE_VECTOR_MATH_UNARY(op, type) \\\n+JNIEXPORT                                  \\\n+type op##advsimd(type input) {             \\\n+  return Sleef_##op##advsimd(input);       \\\n+}\n+\n+#define DEFINE_VECTOR_MATH_BINARY(op, type)   \\\n+JNIEXPORT                                     \\\n+type op##advsimd(type input1, type input2) {  \\\n+  return Sleef_##op##advsimd(input1, input2); \\\n+}\n+\n+DEFINE_VECTOR_MATH_UNARY(tanf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(tanhf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(sinf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(sinhf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(cosf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(coshf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(asinf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(acosf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(atanf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(cbrtf4_u10,  float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(logf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(log10f4_u10, float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(log1pf4_u10, float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(expf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_UNARY(expm1f4_u10, float32x4_t)\n+\n+DEFINE_VECTOR_MATH_UNARY(tand2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(tanhd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(sind2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(sinhd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(cosd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(coshd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(asind2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(acosd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(atand2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(cbrtd2_u10,  float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(logd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(log10d2_u10, float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(log1pd2_u10, float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(expd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_UNARY(expm1d2_u10, float64x2_t)\n+\n+DEFINE_VECTOR_MATH_BINARY(atan2f4_u10, float32x4_t)\n+DEFINE_VECTOR_MATH_BINARY(powf4_u10,   float32x4_t)\n+DEFINE_VECTOR_MATH_BINARY(hypotf4_u05, float32x4_t)\n+\n+DEFINE_VECTOR_MATH_BINARY(atan2d2_u10, float64x2_t)\n+DEFINE_VECTOR_MATH_BINARY(powd2_u10,   float64x2_t)\n+DEFINE_VECTOR_MATH_BINARY(hypotd2_u05, float64x2_t)\n+\n+#undef DEFINE_VECTOR_MATH_UNARY\n+\n+#undef DEFINE_VECTOR_MATH_BINARY\n+\n+#endif \/\/ defined(__ARM_NEON__) || defined(__ARM_NEON)\n","filename":"src\/jdk.incubator.vector\/linux\/native\/libsleef\/lib\/vector_math_neon.c","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2024, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#if defined(__ARM_FEATURE_SVE)\n+\n+#include <stdint.h>\n+#include <arm_sve.h>\n+\n+#include \"..\/generated\/misc.h\"\n+#include \"..\/generated\/sleefinline_sve.h\"\n+\n+\n+#include <jni.h>\n+\n+#define DEFINE_VECTOR_MATH_UNARY_SVE(op, type) \\\n+JNIEXPORT                                      \\\n+type op##sve(type input) {                     \\\n+  return Sleef_##op##sve(input);               \\\n+}\n+\n+#define DEFINE_VECTOR_MATH_BINARY_SVE(op, type) \\\n+JNIEXPORT                                       \\\n+type op##sve(type input1, type input2) {        \\\n+  return Sleef_##op##sve(input1, input2);       \\\n+}\n+\n+DEFINE_VECTOR_MATH_UNARY_SVE(tanfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sinfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sinhfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cosfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(coshfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(asinfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(acosfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(atanfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cbrtfx_u10,  svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(logfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log10fx_u10, svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log1pfx_u10, svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expm1fx_u10, svfloat32_t)\n+\n+DEFINE_VECTOR_MATH_UNARY_SVE(tandx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sindx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(sinhdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cosdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(coshdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(asindx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(acosdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(atandx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(cbrtdx_u10,  svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(logdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log10dx_u10, svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(log1pdx_u10, svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_UNARY_SVE(expm1dx_u10, svfloat64_t)\n+\n+DEFINE_VECTOR_MATH_BINARY_SVE(atan2fx_u10, svfloat32_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(powfx_u10,   svfloat32_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(hypotfx_u05, svfloat32_t)\n+\n+DEFINE_VECTOR_MATH_BINARY_SVE(atan2dx_u10, svfloat64_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(powdx_u10,   svfloat64_t)\n+DEFINE_VECTOR_MATH_BINARY_SVE(hypotdx_u05, svfloat64_t)\n+\n+#undef DEFINE_VECTOR_MATH_UNARY_SVE\n+\n+#undef DEFINE_VECTOR_MATH_BINARY_SVE\n+\n+#endif \/\/ __ARM_FEATURE_SVE\n","filename":"src\/jdk.incubator.vector\/linux\/native\/libsleef\/lib\/vector_math_sve.c","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}