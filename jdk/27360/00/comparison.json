{"files":[{"patch":"@@ -75,1 +75,1 @@\n-\/\/ Add a symbol entry to the temporary hash table\n+\/\/ Add an entry to the temporary hash table\n@@ -110,1 +110,1 @@\n-\/\/ Write the compact table's buckets\n+\/\/ Write the compact table's buckets and entries\n@@ -117,1 +117,0 @@\n-      \/\/ bucket with one entry is compacted and only has the symbol offset\n@@ -121,0 +120,1 @@\n+      \/\/ bucket with one entry is value_only and only has the value\n@@ -124,1 +124,2 @@\n-      \/\/ regular bucket, each entry is a symbol (hash, offset) pair\n+      \/\/ regular bucket, it could contain zero or more than one entry,\n+      \/\/ each entry is a (hash, value) pair\n@@ -130,1 +131,1 @@\n-        _compact_entries->at_put(offset++, ent.value());\n+        _compact_entries->at_put(offset++, ent.value());    \/\/ write entry value\n@@ -194,1 +195,2 @@\n-  size_t bytes = sizeof(intptr_t) * 5;\n+  constexpr size_t bytes = sizeof(intptr_t) * 5;\n+  static_assert(bytes >= sizeof(SimpleCompactHashtable), \"must\");\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -66,1 +66,2 @@\n-\/\/ symbol\/string table and adds them to a new temporary hash table. The hash\n+\/\/ a table (the table could be in any form of a collection of <hash, value> pair)\n+\/\/ and adds them to a new temporary hash table (_buckets). The hash\n@@ -79,4 +80,4 @@\n-\/\/ (regular or compact) are encoded in bit[31, 30]. For buckets with more\n-\/\/ than one entry, both hash and entry offset are written to the\n-\/\/ table. For buckets with only one entry, only the entry offset is written\n-\/\/ to the table and the buckets are tagged as compact in their type bits.\n+\/\/ (regular or value_only) are encoded in bit[31, 30]. For buckets with more\n+\/\/ than one entry, both hash and entry value are written to the\n+\/\/ table. For buckets with only one entry, only the entry value is written\n+\/\/ to the table and the buckets are tagged as value_only in their type bits.\n@@ -125,0 +126,1 @@\n+  void dump(SimpleCompactHashtable *cht, const char* table_name);\n@@ -134,3 +136,0 @@\n-\n-public:\n-  void dump(SimpleCompactHashtable *cht, const char* table_name);\n@@ -151,1 +150,2 @@\n-\/\/ CompactHashtable is used to store the CDS archive's symbol\/string tables.\n+\/\/ CompactHashtable is used to store the CDS archive's tables.\n+\/\/ A table could be in any form of a collection of <hash, value> pair.\n@@ -168,3 +168,3 @@\n-\/\/ There are two types of buckets, regular buckets and value_only buckets. The\n-\/\/ value_only buckets have '01' in their highest 2-bit, and regular buckets have\n-\/\/ '00' in their highest 2-bit.\n+\/\/ There are three types of buckets, regular buckets and value_only buckets and table_end\n+\/\/ bucket. The value_only buckets have '01' in their highest 2-bit, and regular buckets have\n+\/\/ '00' in their highest 2-bit, and table_end bucket has '11' in its highest 2-bit.\n@@ -172,6 +172,7 @@\n-\/\/ For normal buckets, each entry is 8 bytes in the entries[]:\n-\/\/   u4 hash;    \/* symbol\/string hash *\/\n-\/\/   union {\n-\/\/     u4 offset;  \/* Symbol* sym = (Symbol*)(base_address + offset) *\/\n-\/\/     narrowOop str; \/* String narrowOop encoding *\/\n-\/\/   }\n+\/\/ For regular buckets, each entry is 8 bytes in the entries[]:\n+\/\/   u4 hash;    \/\/ entry hash\n+\/\/   u4 value;   \/\/ it could be offset or index or any payload.\n+\/\/               \/\/ e.g. if it's an offset, can be used like below:\n+\/\/               \/\/   YourEntryType* entry = (YourEntryType*)(base_address + offset)\n+\/\/               \/\/ check StringTable, SymbolTable and AdapterHandlerLibrary for its usage examples.\n+\/\/ A regular bucket could also contains zero entry for empty bucket.\n@@ -179,0 +180,1 @@\n+\/\/ For value_only buckets, each entry has only the 4-byte 'value' in the entries[].\n@@ -180,1 +182,1 @@\n-\/\/ For value_only buckets, each entry has only the 4-byte 'offset' in the entries[].\n+\/\/ For table_end bucket, there is no corresponding entry, i.e. it always contains zero entry.\n@@ -183,8 +185,9 @@\n-\/\/            is skipped.\n-\/\/ buckets[0, 4, 5, ....]\n-\/\/         |  |  |\n-\/\/         |  |  +---+\n-\/\/         |  |      |\n-\/\/         |  +----+ |\n-\/\/         v       v v\n-\/\/ entries[H,O,H,O,O,H,O,H,O.....]\n+\/\/            is skipped, and third bucket is an empty REGULAR_BUCKET_TYPE, the last is\n+\/\/            the TABLEEND_BUCKET_TYPE.\n+\/\/ buckets[0, 4, 5(empty regular), 5, ...., N(table_end)]\n+\/\/         |  |  |                 |        |\n+\/\/         |  |  +--------+--------+        |\n+\/\/         |  |           |                 |\n+\/\/         |  +----+ +----+                 |\n+\/\/         v       v v                      v\n+\/\/ entries[H,O,H,O,O,H,O,H,O.................]\n@@ -240,1 +243,1 @@\n-  V (*DECODE)(address base_address, u4 offset),\n+  V (*DECODE)(address base_address, u4 value),\n@@ -246,2 +249,2 @@\n-  V decode(u4 offset) const {\n-    return DECODE(_base_address, offset);\n+  V decode(u4 value) const {\n+    return DECODE(_base_address, value);\n@@ -267,1 +270,1 @@\n-        \/\/ entries. Each entry is a pair of entry (hash, offset).\n+        \/\/ entries. Each entry is a (hash, value) pair.\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.hpp","additions":34,"deletions":31,"binary":false,"changes":65,"status":"modified"}]}