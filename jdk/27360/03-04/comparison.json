{"files":[{"patch":"@@ -76,1 +76,1 @@\n-void CompactHashtableWriter::add(unsigned int hash, u4 value) {\n+void CompactHashtableWriter::add(unsigned int hash, u4 encoded_value) {\n@@ -78,1 +78,1 @@\n-  _buckets[index]->append_if_missing(Entry(hash, value));\n+  _buckets[index]->append_if_missing(Entry(hash, encoded_value));\n@@ -120,2 +120,2 @@\n-      \/\/ bucket with one entry is value_only and only has the value\n-      _compact_entries->at_put(offset++, ent.value());\n+      \/\/ bucket with one entry is value_only and only has the encoded_value\n+      _compact_entries->at_put(offset++, ent.encoded_value());\n@@ -125,1 +125,1 @@\n-      \/\/ each entry is a (hash, value) pair\n+      \/\/ each entry is a <hash, encoded_value> pair\n@@ -130,2 +130,2 @@\n-        _compact_entries->at_put(offset++, u4(ent.hash())); \/\/ write entry hash\n-        _compact_entries->at_put(offset++, ent.value());    \/\/ write entry value\n+        _compact_entries->at_put(offset++, u4(ent.hash()));      \/\/ write entry hash\n+        _compact_entries->at_put(offset++, ent.encoded_value()); \/\/ write entry encoded_value\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-\/\/ At dump time, the CompactHashtableWriter obtains all entries from the\n-\/\/ a table (the table could be in any form of a collection of <hash, value> pair)\n+\/\/ At dump time, the CompactHashtableWriter obtains all entries from\n+\/\/ a table (the table could be in any form of a collection of <hash, encoded_value> pair)\n@@ -81,2 +81,2 @@\n-\/\/ than one entry, both hash and entry value are written to the\n-\/\/ table. For buckets with only one entry, only the entry value is written\n+\/\/ than one entry, both hash and encoded_value are written to the\n+\/\/ table. For buckets with only one entry, only the encoded_value is written\n@@ -95,1 +95,1 @@\n-    Entry(unsigned int hash, u4 val) : _hash(hash), _encoded_value(val) {}\n+    Entry(unsigned int hash, u4 encoded_value) : _hash(hash), _encoded_value(encoded_value) {}\n@@ -97,1 +97,1 @@\n-    u4 value() {\n+    u4 encoded_value() {\n@@ -125,1 +125,1 @@\n-  void add(unsigned int hash, u4 value);\n+  void add(unsigned int hash, u4 encoded_value);\n@@ -151,1 +151,1 @@\n-\/\/ A table could be in any form of a collection of <hash, value> pair.\n+\/\/ A table could be in any form of a collection of <hash, encoded_value> pair.\n@@ -179,1 +179,1 @@\n-\/\/ For value_only buckets, each entry has only the 4-byte 'value' in the entries[].\n+\/\/ For value_only buckets, each entry has only the 4-byte 'encoded_value' in the entries[].\n@@ -195,3 +195,3 @@\n-\/\/   - The 0-th bucket is a REGULAR_BUCKET_TYPE with two entries\n-\/\/   - The 1-st bucket is a VALUE_ONLY_BUCKET_TYPE with one entry.\n-\/\/   - The 2-th bucket is a REGULAR_BUCKET_TYPE with zeo entries.\n+\/\/   - Bucket #0 is a REGULAR_BUCKET_TYPE with two entries\n+\/\/   - Bucket #1 is a VALUE_ONLY_BUCKET_TYPE with one entry.\n+\/\/   - Bucket #2 is a REGULAR_BUCKET_TYPE with zero entries.\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}