{"files":[{"patch":"@@ -40,1 +40,16 @@\n- * Models an annotation on a declaration.\n+ * Models an {@code annotation} structure (JVMS {@jvms 4.7.16}) or part of a {@code\n+ * type_annotation} structure (JVMS {@jvms 4.7.20}). This model indicates the\n+ * interface of the annotation and a set of element-value pairs.\n+ * <p>\n+ * This model can reconstruct an annotation, given the location of the modeled structure\n+ * in the class file and the definition of the annotation interface.\n+ * <p>\n+ * Two {@code Annotation} objects should be compared using the {@link\n+ * Object#equals(Object) equals} method.\n+ *\n+ * @apiNote\n+ * For Java programs, the location of the modeled structure indicates the source code\n+ * element or type (JLS {@jls 9.7.4}) on which the reconstructed annotation appears,\n+ * and the annotation interface definition determines whether the reconstructed annotation has\n+ * elements with default values (JLS {@jls 9.6.2}), and whether the reconstructed annotation\n+ * is a container annotation for multiple annotations (JLS {@jls 9.7.5}).\n@@ -44,0 +59,1 @@\n+ * @see TypeAnnotation\n@@ -49,1 +65,0 @@\n- * @sealedGraph\n@@ -54,1 +69,1 @@\n-        permits TypeAnnotation, AnnotationImpl {\n+        permits AnnotationImpl {\n@@ -57,1 +72,2 @@\n-     * {@return the class of the annotation}\n+     * {@return the constant pool entry holding the {@linkplain Class#descriptorString\n+     * descriptor string} of the annotation interface}\n@@ -62,1 +78,1 @@\n-     * {@return the class of the annotation, as a symbolic descriptor}\n+     * {@return the annotation interface, as a symbolic descriptor}\n@@ -69,1 +85,1 @@\n-     * {@return the elements of the annotation}\n+     * {@return the element-value pairs of the annotation}\n@@ -75,2 +91,3 @@\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n+     * @param annotationClass the constant pool entry holding the descriptor string\n+     *                        of the annotation interface\n+     * @param elements the element-value pairs of the annotation\n@@ -85,2 +102,3 @@\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n+     * @param annotationClass the constant pool entry holding the descriptor string\n+     *                        of the annotation interface\n+     * @param elements the element-value pairs of the annotation\n@@ -95,2 +113,2 @@\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n+     * @param annotationClass the descriptor of the annotation interface\n+     * @param elements the element-value pairs of the annotation\n@@ -105,2 +123,2 @@\n-     * @param annotationClass the class of the annotation\n-     * @param elements the elements of the annotation\n+     * @param annotationClass the descriptor of the annotation interface\n+     * @param elements the element-value pairs of the annotation\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Annotation.java","additions":32,"deletions":14,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -35,1 +35,7 @@\n- * Models a key-value pair of an annotation.\n+ * Models an element-value pair in the {@code element_value_pairs}\n+ * table in the {@code annotation} structure defined in JVMS\n+ * {@jvms 4.7.16} or the {@code type_annotation} structure defined\n+ * in JVMS {@jvms 4.7.20}.\n+ * <p>\n+ * Two {@code AnnotationElement} objects should be compared using the\n+ * {@link Object#equals(Object) equals} method.\n@@ -48,0 +54,6 @@\n+     *\n+     * @apiNote\n+     * In Java source code, by convention, the name of the sole element in a\n+     * single-element annotation interface is {@code value}. (JLS {@jls 9.6.1})\n+     * This is the case for single-element annotations (JLS {@jls 9.7.3}) and\n+     * container annotations for multiple annotations (JLS {@jls 9.6.3}).\n@@ -57,1 +69,1 @@\n-     * {@return an annotation key-value pair}\n+     * {@return an element-value pair}\n@@ -67,1 +79,1 @@\n-     * {@return an annotation key-value pair}\n+     * {@return an element-value pair}\n@@ -77,1 +89,1 @@\n-     * {@return an annotation key-value pair for a class-valued annotation}\n+     * {@return an element-value pair for a class-valued element}\n@@ -80,0 +92,1 @@\n+     * @see AnnotationValue#ofClass(ClassDesc) AnnotationValue::ofClass\n@@ -87,1 +100,1 @@\n-     * {@return an annotation key-value pair for a string-valued annotation}\n+     * {@return an element-value pair for a string-valued element}\n@@ -90,0 +103,1 @@\n+     * @see AnnotationValue#ofString(String) AnnotationValue::ofString\n@@ -97,1 +111,1 @@\n-     * {@return an annotation key-value pair for a long-valued annotation}\n+     * {@return an element-value pair for a long-valued element}\n@@ -100,0 +114,1 @@\n+     * @see AnnotationValue#ofLong(long) AnnotationValue::ofLong\n@@ -107,1 +122,1 @@\n-     * {@return an annotation key-value pair for an int-valued annotation}\n+     * {@return an element-value pair for an int-valued element}\n@@ -110,0 +125,1 @@\n+     * @see AnnotationValue#ofInt(int) AnnotationValue::ofInt\n@@ -117,1 +133,1 @@\n-     * {@return an annotation key-value pair for a char-valued annotation}\n+     * {@return an element-value pair for a char-valued element}\n@@ -120,0 +136,1 @@\n+     * @see AnnotationValue#ofChar(char) AnnotationValue::ofChar\n@@ -127,1 +144,1 @@\n-     * {@return an annotation key-value pair for a short-valued annotation}\n+     * {@return an element-value pair for a short-valued element}\n@@ -130,0 +147,1 @@\n+     * @see AnnotationValue#ofShort(short) AnnotationValue::ofShort\n@@ -137,1 +155,1 @@\n-     * {@return an annotation key-value pair for a byte-valued annotation}\n+     * {@return an element-value pair for a byte-valued element}\n@@ -140,0 +158,1 @@\n+     * @see AnnotationValue#ofByte(byte) AnnotationValue::ofByte\n@@ -142,1 +161,1 @@\n-                                      byte value) {\n+                                    byte value) {\n@@ -147,1 +166,1 @@\n-     * {@return an annotation key-value pair for a boolean-valued annotation}\n+     * {@return an element-value pair for a boolean-valued element}\n@@ -150,0 +169,1 @@\n+     * @see AnnotationValue#ofBoolean(boolean) AnnotationValue::ofBoolean\n@@ -152,1 +172,1 @@\n-                                      boolean value) {\n+                                       boolean value) {\n@@ -157,1 +177,1 @@\n-     * {@return an annotation key-value pair for a double-valued annotation}\n+     * {@return an element-value pair for a double-valued element}\n@@ -160,0 +180,1 @@\n+     * @see AnnotationValue#ofDouble(double) AnnotationValue::ofDouble\n@@ -167,1 +188,1 @@\n-     * {@return an annotation key-value pair for a float-valued annotation}\n+     * {@return an element-value pair for a float-valued element}\n@@ -170,0 +191,1 @@\n+     * @see AnnotationValue#ofFloat(float) AnnotationValue::ofFloat\n@@ -177,1 +199,1 @@\n-     * {@return an annotation key-value pair for an annotation-valued annotation}\n+     * {@return an element-value pair for an annotation-valued element}\n@@ -180,0 +202,1 @@\n+     * @see AnnotationValue#ofAnnotation AnnotationValue::ofAnnotation\n@@ -187,1 +210,1 @@\n-     * {@return an annotation key-value pair for an array-valued annotation}\n+     * {@return an element-value pair for an array-valued element}\n@@ -190,0 +213,1 @@\n+     * @see AnnotationValue#ofArray(AnnotationValue...) AnnotationValue::ofArray\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationElement.java","additions":41,"deletions":17,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -44,1 +44,5 @@\n- * Models the value of a key-value pair of an annotation.\n+ * Models an {@code element_value} structure, or a value of an element-value\n+ * pair of an annotation, as defined in JVMS {@jvms 4.7.16.1}.\n+ * <p>\n+ * Two {@code AnnotationValue} objects should be compared using the {@link\n+ * Object#equals(Object) equals} method.\n@@ -56,2 +60,2 @@\n-     * Models an annotation-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_ANNOTATION}.\n+     * Models an annotation value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_ANNOTATION}.\n@@ -69,2 +73,2 @@\n-     * Models an array-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_ARRAY}.\n+     * Models an array value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_ARRAY}.\n@@ -82,1 +86,3 @@\n-         * which must not be an array type. ({@jls 9.6.1})\n+         * which must not be an array type. (JLS {@jls 9.6.1}) If such elements are\n+         * annotations, they have the same annotation interface; if such elements\n+         * are enum, they belong to the same enum class.\n@@ -88,1 +94,1 @@\n-     * Models a constant-valued element.\n+     * Models a constant value of an element-value pair.\n@@ -126,2 +132,2 @@\n-     * Models a string-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_STRING}.\n+     * Models a string value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_STRING}.\n@@ -154,2 +160,2 @@\n-     * Models a double-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_DOUBLE}.\n+     * Models a double value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_DOUBLE}.\n@@ -182,2 +188,2 @@\n-     * Models a float-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_FLOAT}.\n+     * Models a float value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_FLOAT}.\n@@ -210,2 +216,2 @@\n-     * Models a long-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_LONG}.\n+     * Models a long value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_LONG}.\n@@ -238,2 +244,2 @@\n-     * Models an int-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_INT}.\n+     * Models an int value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_INT}.\n@@ -266,2 +272,2 @@\n-     * Models a short-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_SHORT}.\n+     * Models a short value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_SHORT}.\n@@ -297,2 +303,2 @@\n-     * Models a char-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_CHAR}.\n+     * Models a char value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_CHAR}.\n@@ -328,2 +334,2 @@\n-     * Models a byte-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_BYTE}.\n+     * Models a byte value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_BYTE}.\n@@ -359,2 +365,2 @@\n-     * Models a boolean-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_BOOLEAN}.\n+     * Models a boolean value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_BOOLEAN}.\n@@ -390,2 +396,2 @@\n-     * Models a class-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_CLASS}.\n+     * Models a class value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_CLASS}.\n@@ -408,2 +414,2 @@\n-     * Models an enum-valued element.\n-     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_ENUM}.\n+     * Models an enum value of an element-value pair.\n+     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_ENUM}.\n@@ -429,1 +435,2 @@\n-     * {@return the tag character for this type as per {@jvms 4.7.16.1}}\n+     * {@return the tag character for this value as per JVMS {@jvms 4.7.16.1}}\n+     * The tag characters have a one-to-one mapping to the types of annotation element values.\n@@ -434,1 +441,1 @@\n-     * {@return an annotation element for a enum-valued element}\n+     * {@return an enum value for an element-value pair}\n@@ -444,1 +451,1 @@\n-     * {@return an annotation element for a enum-valued element}\n+     * {@return an enum value for an element-value pair}\n@@ -454,1 +461,1 @@\n-     * {@return an annotation element for a class-valued element}\n+     * {@return a class value for an element-value pair}\n@@ -462,1 +469,1 @@\n-     * {@return an annotation element for a class-valued element}\n+     * {@return a class value for an element-value pair}\n@@ -470,1 +477,1 @@\n-     * {@return an annotation element for a string-valued element}\n+     * {@return a string value for an element-value pair}\n@@ -478,1 +485,1 @@\n-     * {@return an annotation element for a string-valued element}\n+     * {@return a string value for an element-value pair}\n@@ -486,1 +493,1 @@\n-     * {@return an annotation element for a double-valued element}\n+     * {@return a double value for an element-value pair}\n@@ -494,1 +501,1 @@\n-     * {@return an annotation element for a double-valued element}\n+     * {@return a double value for an element-value pair}\n@@ -502,1 +509,1 @@\n-     * {@return an annotation element for a float-valued element}\n+     * {@return a float value for an element-value pair}\n@@ -510,1 +517,1 @@\n-     * {@return an annotation element for a float-valued element}\n+     * {@return a float value for an element-value pair}\n@@ -518,1 +525,1 @@\n-     * {@return an annotation element for a long-valued element}\n+     * {@return a long value for an element-value pair}\n@@ -526,1 +533,1 @@\n-     * {@return an annotation element for a long-valued element}\n+     * {@return a long value for an element-value pair}\n@@ -534,1 +541,1 @@\n-     * {@return an annotation element for an int-valued element}\n+     * {@return an int value for an element-value pair}\n@@ -542,1 +549,1 @@\n-     * {@return an annotation element for an int-valued element}\n+     * {@return an int value for an element-value pair}\n@@ -550,1 +557,1 @@\n-     * {@return an annotation element for a short-valued element}\n+     * {@return a short value for an element-value pair}\n@@ -558,1 +565,1 @@\n-     * {@return an annotation element for a short-valued element}\n+     * {@return a short value for an element-value pair}\n@@ -566,1 +573,1 @@\n-     * {@return an annotation element for a char-valued element}\n+     * {@return a char value for an element-value pair}\n@@ -574,1 +581,1 @@\n-     * {@return an annotation element for a char-valued element}\n+     * {@return a char value for an element-value pair}\n@@ -582,1 +589,1 @@\n-     * {@return an annotation element for a byte-valued element}\n+     * {@return a byte value for an element-value pair}\n@@ -590,1 +597,1 @@\n-     * {@return an annotation element for a byte-valued element}\n+     * {@return a byte value for an element-value pair}\n@@ -598,1 +605,1 @@\n-     * {@return an annotation element for a boolean-valued element}\n+     * {@return a boolean value for an element-value pair}\n@@ -606,1 +613,1 @@\n-     * {@return an annotation element for a boolean-valued element}\n+     * {@return a boolean value for an element-value pair}\n@@ -615,1 +622,1 @@\n-     * {@return an annotation element for an annotation-valued element}\n+     * {@return an annotation value for an element-value pair}\n@@ -623,1 +630,6 @@\n-     * {@return an annotation element for an array-valued element}\n+     * {@return an array value for an element-value pair}\n+     *\n+     * @apiNote\n+     * See {@link AnnotationValue.OfArray#values() values()} for conventions\n+     * on array values derived from Java source code.\n+     *\n@@ -631,1 +643,6 @@\n-     * {@return an annotation element for an array-valued element}\n+     * {@return an array value for an element-value pair}\n+     *\n+     * @apiNote\n+     * See {@link AnnotationValue.OfArray#values() values()} for conventions\n+     * on array values derived from Java source code.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":72,"deletions":55,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.lang.constant.ClassDesc;\n@@ -33,1 +32,0 @@\n-import java.lang.classfile.constantpool.Utf8Entry;\n@@ -59,1 +57,0 @@\n-import jdk.internal.classfile.impl.TemporaryConstantPool;\n@@ -63,1 +60,11 @@\n- * Models an annotation on a type use, as defined in {@jvms 4.7.19} and {@jvms 4.7.20}.\n+ * Models a {@code type_annotation} structure (JVMS {@jvms 4.7.20}). This model\n+ * indicates the annotated type within a declaration or expression and the part\n+ * of the indicated type that is annotated, in addition to what is {@linkplain\n+ * #annotation() available} in an {@code Annotation}.\n+ * <p>\n+ * This model can reconstruct an annotation on a type or a part of a type, given\n+ * the location of the {@code type_annotation} structure in the class file and\n+ * the definition of the annotation interface.\n+ * <p>\n+ * Two {@code TypeAnnotation} objects should be compared using the {@link\n+ * Object#equals(Object) equals} method.\n@@ -65,0 +72,1 @@\n+ * @see Annotation\n@@ -72,1 +80,0 @@\n-        extends Annotation\n@@ -173,1 +180,1 @@\n-     * is annotated}\n+     * is annotated} This models the {@code target_type} and {@code target_info} items.\n@@ -183,19 +190,4 @@\n-     * {@return a type annotation}\n-     * @param targetInfo which type in a declaration or expression is annotated\n-     * @param targetPath which part of the type is annotated\n-     * @param annotationClassUtf8Entry the annotation class\n-     * @param annotationElements the annotation elements\n-     *\/\n-    static TypeAnnotation of(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n-                             Utf8Entry annotationClassUtf8Entry,\n-                             List<AnnotationElement> annotationElements) {\n-        return new UnboundAttribute.UnboundTypeAnnotation(targetInfo, targetPath,\n-                annotationClassUtf8Entry, annotationElements);\n-    }\n-\n-    \/**\n-     * {@return a type annotation}\n-     * @param targetInfo which type in a declaration or expression is annotated\n-     * @param targetPath which part of the type is annotated\n-     * @param annotationClass the annotation class\n-     * @param annotationElements the annotation elements\n+     * {@return the annotation applied to the part indicated by {@link #targetPath()}}\n+     * This models the interface of the annotation and the set of element-value pairs,\n+     * the subset of the {@code type_annotation} structure that is identical to the\n+     * {@code annotation} structure.\n@@ -203,19 +195,1 @@\n-    static TypeAnnotation of(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n-                             ClassDesc annotationClass,\n-                             AnnotationElement... annotationElements) {\n-        return of(targetInfo, targetPath, annotationClass, List.of(annotationElements));\n-    }\n-\n-    \/**\n-     * {@return a type annotation}\n-     * @param targetInfo which type in a declaration or expression is annotated\n-     * @param targetPath which part of the type is annotated\n-     * @param annotationClass the annotation class\n-     * @param annotationElements the annotation elements\n-     *\/\n-    static TypeAnnotation of(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n-                             ClassDesc annotationClass,\n-                             List<AnnotationElement> annotationElements) {\n-        return of(targetInfo, targetPath,\n-                TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), annotationElements);\n-    }\n+    Annotation annotation();\n@@ -224,1 +198,1 @@\n-     * {@return a type annotation}\n+     * {@return a {@code type_annotation} structure}\n@@ -227,2 +201,1 @@\n-     * @param annotationClassUtf8Entry the annotation class\n-     * @param annotationElements the annotation elements\n+     * @param annotation the annotation\n@@ -231,3 +204,2 @@\n-                             Utf8Entry annotationClassUtf8Entry,\n-                             AnnotationElement... annotationElements) {\n-        return of(targetInfo, targetPath, annotationClassUtf8Entry, List.of(annotationElements));\n+                             Annotation annotation) {\n+        return new UnboundAttribute.UnboundTypeAnnotation(targetInfo, targetPath, annotation);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeAnnotation.java","additions":23,"deletions":51,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -660,1 +660,1 @@\n-            AnnotationReader.writeAnnotations(buf, attr.annotations());\n+            AnnotationReader.writeTypeAnnotations(buf, attr.annotations());\n@@ -717,1 +717,1 @@\n-            AnnotationReader.writeAnnotations(buf, attr.annotations());\n+            AnnotationReader.writeTypeAnnotations(buf, attr.annotations());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractAttributeMapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -244,4 +244,2 @@\n-        Utf8Entry type = classReader.readEntry(p, Utf8Entry.class);\n-        p += 2;\n-        return TypeAnnotation.of(targetInfo, List.of(typePath), type,\n-                                 readAnnotationElementValuePairs(classReader, p));\n+        var anno = readAnnotation(classReader, p);\n+        return TypeAnnotation.of(targetInfo, List.of(typePath), anno);\n@@ -286,1 +284,0 @@\n-        \/\/ handles annotations and type annotations\n@@ -291,2 +288,1 @@\n-    public static void writeAnnotations(BufWriter buf, List<? extends Annotation> list) {\n-        \/\/ handles annotations and type annotations\n+    public static void writeAnnotations(BufWriter buf, List<Annotation> list) {\n@@ -300,0 +296,60 @@\n+    private static int labelToBci(LabelContext lr, Label label, TypeAnnotation ta) {\n+        \/\/helper method to avoid NPE\n+        if (lr == null) throw new IllegalArgumentException(\"Illegal targetType '%s' in TypeAnnotation outside of Code attribute\".formatted(ta.targetInfo().targetType()));\n+        return lr.labelToBci(label);\n+    }\n+\n+    public static void writeTypeAnnotation(BufWriterImpl buf, TypeAnnotation ta) {\n+        LabelContext lr = buf.labelContext();\n+        \/\/ target_type\n+        buf.writeU1(ta.targetInfo().targetType().targetTypeValue());\n+\n+        \/\/ target_info\n+        switch (ta.targetInfo()) {\n+            case TypeAnnotation.TypeParameterTarget tpt -> buf.writeU1(tpt.typeParameterIndex());\n+            case TypeAnnotation.SupertypeTarget st -> buf.writeU2(st.supertypeIndex());\n+            case TypeAnnotation.TypeParameterBoundTarget tpbt -> {\n+                buf.writeU1(tpbt.typeParameterIndex());\n+                buf.writeU1(tpbt.boundIndex());\n+            }\n+            case TypeAnnotation.EmptyTarget _ -> {\n+                \/\/ nothing to write\n+            }\n+            case TypeAnnotation.FormalParameterTarget fpt -> buf.writeU1(fpt.formalParameterIndex());\n+            case TypeAnnotation.ThrowsTarget tt -> buf.writeU2(tt.throwsTargetIndex());\n+            case TypeAnnotation.LocalVarTarget lvt -> {\n+                buf.writeU2(lvt.table().size());\n+                for (var e : lvt.table()) {\n+                    int startPc = labelToBci(lr, e.startLabel(), ta);\n+                    buf.writeU2(startPc);\n+                    buf.writeU2(labelToBci(lr, e.endLabel(), ta) - startPc);\n+                    buf.writeU2(e.index());\n+                }\n+            }\n+            case TypeAnnotation.CatchTarget ct -> buf.writeU2(ct.exceptionTableIndex());\n+            case TypeAnnotation.OffsetTarget ot -> buf.writeU2(labelToBci(lr, ot.target(), ta));\n+            case TypeAnnotation.TypeArgumentTarget tat -> {\n+                buf.writeU2(labelToBci(lr, tat.target(), ta));\n+                buf.writeU1(tat.typeArgumentIndex());\n+            }\n+        }\n+\n+        \/\/ target_path\n+        buf.writeU1(ta.targetPath().size());\n+        for (TypeAnnotation.TypePathComponent component : ta.targetPath()) {\n+            buf.writeU1(component.typePathKind().tag());\n+            buf.writeU1(component.typeArgumentIndex());\n+        }\n+\n+        \/\/ annotation data\n+        writeAnnotation(buf, ta.annotation());\n+    }\n+\n+    public static void writeTypeAnnotations(BufWriter buf, List<TypeAnnotation> list) {\n+        var internalBuf = (BufWriterImpl) buf;\n+        internalBuf.writeU2(list.size());\n+        for (var e : list) {\n+            writeTypeAnnotation(internalBuf, e);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":63,"deletions":7,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -1041,1 +1041,1 @@\n-                        .with(leaf(\"annotation class\", a.className().stringValue()),\n+                        .with(leaf(\"annotation class\", a.annotation().className().stringValue()),\n@@ -1043,1 +1043,1 @@\n-                        .with(elementValuePairsToTree(a.elements()))));\n+                        .with(elementValuePairsToTree(a.annotation().elements()))));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -404,3 +404,1 @@\n-                a.targetPath(), map(a.classSymbol()),\n-                a.elements().stream().map(el -> AnnotationElement.of(el.name(),\n-                        mapAnnotationValue(el.value()))).toList())).toList();\n+                a.targetPath(), mapAnnotation(a.annotation()))).toList();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.classfile.AnnotationElement;\n@@ -39,1 +38,0 @@\n-import java.lang.classfile.Label;\n@@ -761,52 +759,1 @@\n-                                        Utf8Entry className,\n-                                        List<AnnotationElement> elements) implements TypeAnnotation, Util.Writable {\n-\n-        public UnboundTypeAnnotation(TargetInfo targetInfo, List<TypePathComponent> targetPath,\n-                                     Utf8Entry className, List<AnnotationElement> elements) {\n-            this.targetInfo = targetInfo;\n-            this.targetPath = List.copyOf(targetPath);\n-            this.className = className;\n-            this.elements = List.copyOf(elements);\n-        }\n-\n-        private int labelToBci(LabelContext lr, Label label) {\n-            \/\/helper method to avoid NPE\n-            if (lr == null) throw new IllegalArgumentException(\"Illegal targetType '%s' in TypeAnnotation outside of Code attribute\".formatted(targetInfo.targetType()));\n-            return lr.labelToBci(label);\n-        }\n-\n-        @Override\n-        public void writeTo(BufWriterImpl buf) {\n-            LabelContext lr = buf.labelContext();\n-            \/\/ target_type\n-            buf.writeU1(targetInfo.targetType().targetTypeValue());\n-\n-            \/\/ target_info\n-            switch (targetInfo) {\n-                case TypeParameterTarget tpt -> buf.writeU1(tpt.typeParameterIndex());\n-                case SupertypeTarget st -> buf.writeU2(st.supertypeIndex());\n-                case TypeParameterBoundTarget tpbt -> {\n-                    buf.writeU1(tpbt.typeParameterIndex());\n-                    buf.writeU1(tpbt.boundIndex());\n-                }\n-                case EmptyTarget et -> {\n-                    \/\/ nothing to write\n-                }\n-                case FormalParameterTarget fpt -> buf.writeU1(fpt.formalParameterIndex());\n-                case ThrowsTarget tt -> buf.writeU2(tt.throwsTargetIndex());\n-                case LocalVarTarget lvt -> {\n-                    buf.writeU2(lvt.table().size());\n-                    for (var e : lvt.table()) {\n-                        int startPc = labelToBci(lr, e.startLabel());\n-                        buf.writeU2(startPc);\n-                        buf.writeU2(labelToBci(lr, e.endLabel()) - startPc);\n-                        buf.writeU2(e.index());\n-                    }\n-                }\n-                case CatchTarget ct -> buf.writeU2(ct.exceptionTableIndex());\n-                case OffsetTarget ot -> buf.writeU2(labelToBci(lr, ot.target()));\n-                case TypeArgumentTarget tat -> {\n-                    buf.writeU2(labelToBci(lr, tat.target()));\n-                    buf.writeU1(tat.typeArgumentIndex());\n-                }\n-            }\n+                                        Annotation annotation) implements TypeAnnotation {\n@@ -814,16 +761,2 @@\n-            \/\/ target_path\n-            buf.writeU1(targetPath().size());\n-            for (TypePathComponent component : targetPath()) {\n-                buf.writeU1(component.typePathKind().tag());\n-                buf.writeU1(component.typeArgumentIndex());\n-            }\n-\n-            \/\/ type_index\n-            buf.writeIndex(className);\n-\n-            \/\/ element_value_pairs\n-            buf.writeU2(elements.size());\n-            for (AnnotationElement pair : elements()) {\n-                buf.writeIndex(pair.name());\n-                AnnotationReader.writeAnnotationValue(buf, pair.value());\n-            }\n+        public UnboundTypeAnnotation {\n+            targetPath = List.copyOf(targetPath);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":3,"deletions":70,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -396,1 +396,1 @@\n-            l += 2 + an.targetInfo().size() + 2 * an.targetPath().size() + annotationSize(an);\n+            l += 2 + an.targetInfo().size() + 2 * an.targetPath().size() + annotationSize(an.annotation());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/ParserVerifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,1 @@\n-        write(annot, true);\n+        write(annot.annotation(), true);\n@@ -104,1 +104,1 @@\n-        write(annot, resolveIndices);\n+        write(annot.annotation(), resolveIndices);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AnnotationWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-                                                  ClassDesc.of(\"Boo\"), List.of()))))))\n+                                                  Annotation.of(ClassDesc.of(\"Boo\"), List.of())))))))\n@@ -104,1 +104,1 @@\n-                                                ClassDesc.of(\"Boo\"), List.of())));\n+                                                Annotation.of(ClassDesc.of(\"Boo\"), List.of()))));\n@@ -119,1 +119,1 @@\n-                                          ClassDesc.of(\"Fee\"), List.of(AnnotationElement.ofBoolean(\"yes\", false)))))\n+                                          Annotation.of(ClassDesc.of(\"Fee\"), List.of(AnnotationElement.ofBoolean(\"yes\", false))))))\n","filename":"test\/jdk\/jdk\/classfile\/ClassPrinterTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8336010 8336588\n+ * @bug 8335935 8336588\n","filename":"test\/jdk\/jdk\/classfile\/TransformTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -831,1 +831,1 @@\n-                    AnnotationRecord.ofAnnotation(ann));\n+                    AnnotationRecord.ofAnnotation(ann.annotation()));\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ClassRecord.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,2 +182,1 @@\n-                        ta.classSymbol(),\n-                        ta.elements().stream().map(ae -> AnnotationElement.of(ae.name().stringValue(), transformAnnotationValue(ae.value()))).toList())).toArray(TypeAnnotation[]::new);\n+                        transformAnnotation(ta.annotation()))).toArray(TypeAnnotation[]::new);\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -606,1 +606,1 @@\n-            boolean matches = checkMatch((Annotation) anno);\n+            boolean matches = checkMatch(anno.annotation());\n@@ -1200,2 +1200,2 @@\n-                    for(Annotation anno : rvattr.annotations()) {\n-                        expected.matchAnnotation(anno);\n+                    for(var anno : rvattr.annotations()) {\n+                        expected.matchAnnotation(anno.annotation());\n","filename":"test\/langtools\/lib\/annotations\/annotations\/classfile\/ClassfileInspector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-            name = annotation.classSymbol().descriptorString();\n+            name = annotation.annotation().classSymbol().descriptorString();\n@@ -230,1 +230,1 @@\n-                annotationValueDebugString(cm, annotation),\n+                annotationValueDebugString(cm, annotation.annotation()),\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/AnonymousClassTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,1 +100,1 @@\n-            tad.annotation = anno.className().stringValue();\n+            tad.annotation = anno.annotation().className().stringValue();\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/ReferenceInfoUtil.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-                    actual.append(ta.className().stringValue() + \" pos: [\" + ta.targetInfo().targetType());\n+                    actual.append(ta.annotation().className().stringValue() + \" pos: [\" + ta.targetInfo().targetType());\n","filename":"test\/langtools\/tools\/javac\/patterns\/Annotations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1618,1 +1618,1 @@\n-        String annotationName = tAnno.classSymbol().displayName();\n+        String annotationName = tAnno.annotation().classSymbol().displayName();\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}