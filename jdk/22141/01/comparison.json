{"files":[{"patch":"@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -82,4 +80,0 @@\n-        \/*\n-         * GetPropertyAction.privilegedGetProperty cannot be used here, Using VM.getSavedProperty to avoid a bootstrap\n-         * circularity issue in the java\/lang\/String\/concat\/WithSecurityManager.java test\n-         *\/\n@@ -135,1 +129,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -137,16 +130,12 @@\n-        AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override public Void run() {\n-                try {\n-                    Files.createDirectories(path.getParent());\n-                    Files.write(path, bytes);\n-                } catch (Exception ex) {\n-                    if (VM.isModuleSystemInited()) {\n-                        \/\/ log only when lambda is ready to use\n-                        System.getLogger(ClassFileDumper.class.getName())\n-                              .log(System.Logger.Level.WARNING, \"Exception writing to \" +\n-                                        path + \" \" + ex.getMessage());\n-                    }\n-                    \/\/ simply don't care if this operation failed\n-                }\n-                return null;\n-            }});\n+        try {\n+            Files.createDirectories(path.getParent());\n+            Files.write(path, bytes);\n+        } catch (Exception ex) {\n+            if (VM.isModuleSystemInited()) {\n+                \/\/ log only when lambda is ready to use\n+                System.getLogger(ClassFileDumper.class.getName())\n+                        .log(System.Logger.Level.WARNING, \"Exception writing to \" +\n+                                path + \" \" + ex.getMessage());\n+            }\n+            \/\/ simply don't care if this operation failed\n+        }\n@@ -158,1 +147,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -160,17 +148,6 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Path run() {\n-                Path path = Path.of(dir);\n-                if (Files.notExists(path)) {\n-                    try {\n-                        Files.createDirectories(path);\n-                    } catch (IOException ex) {\n-                        throw new IllegalArgumentException(\"Fail to create \" + path, ex);\n-                    }\n-                }\n-                if (!Files.isDirectory(path)) {\n-                    throw new IllegalArgumentException(\"Path \" + path + \" is not a directory\");\n-                } else if (!Files.isWritable(path)) {\n-                    throw new IllegalArgumentException(\"Directory \" + path + \" is not writable\");\n-                }\n-                return path;\n+        Path path = Path.of(dir);\n+        if (Files.notExists(path)) {\n+            try {\n+                Files.createDirectories(path);\n+            } catch (IOException ex) {\n+                throw new IllegalArgumentException(\"Fail to create \" + path, ex);\n@@ -178,1 +155,7 @@\n-        });\n+        }\n+        if (!Files.isDirectory(path)) {\n+            throw new IllegalArgumentException(\"Path \" + path + \" is not a directory\");\n+        } else if (!Files.isWritable(path)) {\n+            throw new IllegalArgumentException(\"Directory \" + path + \" is not writable\");\n+        }\n+        return path;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ClassFileDumper.java","additions":25,"deletions":42,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -35,3 +35,0 @@\n- * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n- * in these access methods. The caller of these methods should take care to ensure\n- * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -42,1 +39,1 @@\n-    \/\/ fields during init Phase 1 and before a security manager is set.\n+    \/\/ fields during init Phase 1.\n@@ -146,4 +143,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -157,4 +150,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -168,4 +157,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -179,4 +164,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -190,4 +171,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -201,4 +178,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -212,4 +185,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -224,4 +193,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -236,4 +201,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -247,4 +208,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -258,4 +215,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -269,3 +222,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method.<\/strong>\n@@ -279,4 +229,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -290,4 +236,0 @@\n-     *\n-     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-     * in this method. The caller of this method should take care to ensure\n-     * that the returned property is not made accessible to untrusted code.<\/strong>\n@@ -301,2 +243,0 @@\n-      * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-      * in this method. This property is not considered security sensitive.<\/strong>\n@@ -310,2 +250,0 @@\n-      * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-      * in this method. This property is not considered security sensitive.<\/strong>\n@@ -319,2 +257,0 @@\n-      * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n-      * in this method. This property is not considered security sensitive.<\/strong>\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":1,"deletions":65,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -728,5 +728,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String pp = java.security.AccessController.doPrivileged(\n-                new sun.security.action.GetPropertyAction(\n-                        \"java.util.secureRandomSeed\"));\n-        return (pp != null && pp.equalsIgnoreCase(\"true\"));\n+        return Boolean.getBoolean(\"java.util.secureRandomSeed\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}