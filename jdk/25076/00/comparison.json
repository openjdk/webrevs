{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -733,0 +733,1 @@\n+                    tpix = (byte) decoder.saved_model.getTransparentPixel();\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/GifImageDecoder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8356320\n+ * @summary This test verifies that we enforce the transparent background\n+ * when the disposal code is DISPOSAL_BGCOLOR and the transparent pixel\n+ * index changes.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorModel;\n+import java.awt.image.ImageConsumer;\n+import java.awt.image.IndexColorModel;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Hashtable;\n+import java.util.concurrent.Semaphore;\n+\n+public class GifErasureTest {\n+    public static void main(String[] args) throws Exception {\n+        URL srcURL = GifErasureTest.class.getResource(\"leo.gif\");\n+        BufferedImage[] frames = getFrames(srcURL, 3);\n+\n+        if (new Color(frames[2].getRGB(20, 20), true).getAlpha() != 0) {\n+            throw new Error(\"The pixel at (20, 20) should be transparent.\");\n+        }\n+    }\n+\n+    private static BufferedImage[] getFrames(URL gifURL, int numberOfFrames) {\n+        Image image = Toolkit.getDefaultToolkit().createImage(gifURL);\n+        ArrayList<BufferedImage> returnValue = new ArrayList<>(numberOfFrames);\n+\n+        Semaphore semaphore = new Semaphore(1);\n+        semaphore.acquireUninterruptibly();\n+        image.getSource().startProduction(new ImageConsumer() {\n+            BufferedImage bi;\n+            int frameCtr = 0;\n+\n+            @Override\n+            public void setDimensions(int width, int height) {\n+                bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n+            }\n+\n+            @Override\n+            public void setProperties(Hashtable<?, ?> props) {}\n+\n+            @Override\n+            public void setColorModel(ColorModel model) {}\n+\n+            @Override\n+            public void setHints(int hintflags) {}\n+\n+            @Override\n+            public void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize) {\n+                try {\n+                    final int yMax = y + h;\n+                    final int xMax = x + w;\n+\n+                    IndexColorModel icm = (IndexColorModel) model;\n+                    int[] colorModelRGBs = new int[icm.getMapSize()];\n+                    icm.getRGBs(colorModelRGBs);\n+                    int[] argbRow = new int[bi.getWidth()];\n+\n+                    for (int y_ = y; y_ < yMax; y_++) {\n+                        int i = y_ * scansize + off;\n+                        for (int x_ = x; x_ < xMax; x_++, i++) {\n+                            int pixel = pixels[i] & 0xff;\n+                            argbRow[x_ - x] = colorModelRGBs[pixel];\n+                        }\n+                        bi.getRaster().setDataElements(x, y_, w, 1, argbRow);\n+                    }\n+                } catch (RuntimeException e) {\n+                    \/\/ we don't expect this to happen, but if something goes\n+                    \/\/ wrong nobody else will print our stacktrace for us:\n+                    e.printStackTrace();\n+                    throw e;\n+                }\n+            }\n+\n+            @Override\n+            public void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize) {}\n+\n+            @Override\n+            public void imageComplete(int status) {\n+                try {\n+                    frameCtr++;\n+\n+                    BufferedImage copy = new BufferedImage(bi.getWidth(),\n+                            bi.getHeight(), BufferedImage.TYPE_INT_ARGB);\n+                    Graphics2D g = copy.createGraphics();\n+                    g.drawImage(bi, 0, 0, null);\n+                    g.dispose();\n+                    returnValue.add(copy);\n+\n+                    if (frameCtr == numberOfFrames) {\n+                        semaphore.release();\n+                        \/\/ if we don't detach this consumer the producer will\n+                        \/\/ loop forever\n+                        image.getSource().removeConsumer(this);\n+                        image.flush();\n+                    }\n+                } catch(Exception e) {\n+                    e.printStackTrace();\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        });\n+\n+        semaphore.acquireUninterruptibly();\n+\n+        return returnValue.toArray(new BufferedImage[0]);\n+    }\n+}\n","filename":"test\/jdk\/sun\/awt\/image\/gif\/bug8356320\/GifErasureTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"filename":"test\/jdk\/sun\/awt\/image\/gif\/bug8356320\/leo.gif","binary":true,"status":"added"}]}