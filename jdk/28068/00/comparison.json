{"files":[{"patch":"@@ -1,195 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import static jdk.jpackage.internal.util.function.ThrowingConsumer.toConsumer;\n-\n-import java.nio.file.Path;\n-import jdk.jpackage.test.Annotations.Parameter;\n-import jdk.jpackage.test.Annotations.Test;\n-import jdk.jpackage.test.ApplicationLayout;\n-import jdk.jpackage.test.JPackageCommand;\n-import jdk.jpackage.test.MacHelper;\n-import jdk.jpackage.test.MacSign;\n-import jdk.jpackage.test.PackageTest;\n-import jdk.jpackage.test.PackageType;\n-import jdk.jpackage.test.TKit;\n-\n-\/**\n- * Tests generation of dmg and pkg from signed predefined app image which was\n- * signed using two step process (generate app image and then signed using\n- * --app-image and --mac-sign). Test will generate pkg and verifies its\n- * signature. It verifies that dmg is not signed, but app image inside dmg\n- * is signed. This test requires that the machine is configured with test\n- * certificate for \"Developer ID Installer: jpackage.openjdk.java.net\" in\n- * jpackagerTest keychain with always allowed access to this keychain for user\n- * which runs test.\n- * note:\n- * \"jpackage.openjdk.java.net\" can be over-ridden by system property\n- * \"jpackage.mac.signing.key.user.name\", and\n- * \"jpackagerTest\" can be over-ridden by system property\n- * \"jpackage.mac.signing.keychain\"\n- *\/\n-\n-\/*\n- * @test\n- * @summary jpackage with --type pkg,dmg --app-image\n- * @library \/test\/jdk\/tools\/jpackage\/helpers\n- * @library base\n- * @key jpackagePlatformPackage\n- * @build SigningBase\n- * @build jdk.jpackage.test.*\n- * @build SigningPackageFromTwoStepAppImageTest\n- * @requires (jpackage.test.MacSignTests == \"run\")\n- * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n- *  --jpt-run=SigningPackageFromTwoStepAppImageTest\n- *  --jpt-before-run=SigningBase.verifySignTestEnvReady\n- *\/\n-public class SigningPackageFromTwoStepAppImageTest {\n-\n-    private static void verifyPKG(JPackageCommand cmd) {\n-        if (!cmd.hasArgument(\"--mac-sign\")) {\n-            return; \/\/ Nothing to check if not signed\n-        }\n-\n-        Path outputBundle = cmd.outputBundle();\n-        SigningBase.verifyPkgutil(outputBundle, true, SigningBase.DEFAULT_INDEX);\n-        SigningBase.verifySpctl(outputBundle, \"install\", SigningBase.DEFAULT_INDEX);\n-    }\n-\n-    private static void verifyDMG(JPackageCommand cmd) {\n-        \/\/ DMG always unsigned, so we will check it\n-        Path outputBundle = cmd.outputBundle();\n-        SigningBase.verifyDMG(outputBundle);\n-    }\n-\n-    private static void verifyAppImageInDMG(JPackageCommand cmd) {\n-        MacHelper.withExplodedDmg(cmd, dmgImage -> {\n-            \/\/ We will be called with all folders in DMG since JDK-8263155, but\n-            \/\/ we only need to verify app.\n-            if (dmgImage.endsWith(cmd.name() + \".app\")) {\n-                Path launcherPath = ApplicationLayout.platformAppImage()\n-                    .resolveAt(dmgImage).launchersDirectory().resolve(cmd.name());\n-                SigningBase.verifyCodesign(launcherPath, true, SigningBase.DEFAULT_INDEX);\n-                SigningBase.verifyCodesign(dmgImage, true, SigningBase.DEFAULT_INDEX);\n-                SigningBase.verifySpctl(dmgImage, \"exec\", SigningBase.DEFAULT_INDEX);\n-            }\n-        });\n-    }\n-\n-    @Test\n-    \/\/ ({\"sign or not\", \"signing-key or sign-identity\"})\n-    \/\/ Sign and signing-key\n-    @Parameter({\"true\", \"true\"})\n-    \/\/ Sign and sign-identity\n-    @Parameter({\"true\", \"false\"})\n-    \/\/ Unsigned\n-    @Parameter({\"false\", \"true\"})\n-    public void test(boolean signAppImage, boolean signingKey) throws Exception {\n-        MacSign.withKeychain(toConsumer(keychain -> {\n-            test(keychain, signAppImage, signingKey);\n-        }), SigningBase.StandardKeychain.MAIN.keychain());\n-    }\n-\n-    private void test(MacSign.ResolvedKeychain keychain, boolean signAppImage, boolean signingKey) throws Exception {\n-\n-        Path appimageOutput = TKit.createTempDirectory(\"appimage\");\n-\n-        \/\/ Generate app image. Signed or unsigned based on test\n-        \/\/ parameter. We should able to sign predfined app images\n-        \/\/ which are signed or unsigned.\n-        JPackageCommand appImageCmd = JPackageCommand.helloAppImage()\n-                .setArgumentValue(\"--dest\", appimageOutput);\n-        if (signAppImage) {\n-            appImageCmd.addArguments(\"--mac-sign\",\n-                    \"--mac-signing-keychain\", keychain.name());\n-            if (signingKey) {\n-                appImageCmd.addArguments(\"--mac-signing-key-user-name\",\n-                    SigningBase.getDevName(SigningBase.DEFAULT_INDEX));\n-            } else {\n-                appImageCmd.addArguments(\"--mac-app-image-sign-identity\",\n-                    SigningBase.getAppCert(SigningBase.DEFAULT_INDEX));\n-            }\n-        }\n-\n-        \/\/ Generate app image\n-        appImageCmd.executeAndAssertHelloAppImageCreated();\n-\n-        \/\/ Double check if it is signed or unsigned based on signAppImage\n-        SigningBase.verifyAppImageSignature(appImageCmd, signAppImage);\n-\n-        \/\/ Sign app image\n-        JPackageCommand appImageSignedCmd = new JPackageCommand();\n-        appImageSignedCmd.setPackageType(PackageType.IMAGE)\n-            .addArguments(\"--app-image\", appImageCmd.outputBundle().toAbsolutePath())\n-            .addArguments(\"--mac-sign\")\n-            .addArguments(\"--mac-signing-keychain\", keychain.name());\n-        if (signingKey) {\n-            appImageSignedCmd.addArguments(\"--mac-signing-key-user-name\",\n-                SigningBase.getDevName(SigningBase.DEFAULT_INDEX));\n-        } else {\n-            appImageSignedCmd.addArguments(\"--mac-app-image-sign-identity\",\n-                SigningBase.getAppCert(SigningBase.DEFAULT_INDEX));\n-        }\n-        appImageSignedCmd.executeAndAssertImageCreated();\n-\n-        \/\/ Should be signed app image\n-        SigningBase.verifyAppImageSignature(appImageCmd, true);\n-\n-        new PackageTest()\n-                .forTypes(PackageType.MAC)\n-                .addInitializer(cmd -> {\n-                    cmd.addArguments(\"--app-image\", appImageCmd.outputBundle());\n-                    cmd.removeArgumentWithValue(\"--input\");\n-                    if (signAppImage) {\n-                        cmd.addArguments(\"--mac-sign\",\n-                                \"--mac-signing-keychain\",\n-                                keychain.name());\n-                        if (signingKey) {\n-                           cmd.addArguments(\"--mac-signing-key-user-name\",\n-                               SigningBase.getDevName(SigningBase.DEFAULT_INDEX));\n-                        } else {\n-                            cmd.addArguments(\"--mac-installer-sign-identity\",\n-                                SigningBase.getInstallerCert(SigningBase.DEFAULT_INDEX));\n-                        }\n-                    }\n-                })\n-                .forTypes(PackageType.MAC_PKG)\n-                .addBundleVerifier(\n-                    SigningPackageFromTwoStepAppImageTest::verifyPKG)\n-                .forTypes(PackageType.MAC_DMG)\n-                .addInitializer(cmd -> {\n-                    if (signAppImage && !signingKey) {\n-                        \/\/ jpackage throws expected error with\n-                        \/\/ --mac-installer-sign-identity and DMG type\n-                        cmd.removeArgument(\"--mac-sign\");\n-                        cmd.removeArgumentWithValue(\"--mac-signing-keychain\");\n-                        cmd.removeArgumentWithValue(\"--mac-installer-sign-identity\");\n-                    }\n-                })\n-                .addBundleVerifier(\n-                    SigningPackageFromTwoStepAppImageTest::verifyDMG)\n-                .addBundleVerifier(\n-                    SigningPackageFromTwoStepAppImageTest::verifyAppImageInDMG)\n-                .run();\n-    }\n-}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageFromTwoStepAppImageTest.java","additions":0,"deletions":195,"binary":false,"changes":195,"status":"deleted"}]}