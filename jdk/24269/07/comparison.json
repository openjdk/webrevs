{"files":[{"patch":"@@ -991,0 +991,4 @@\n+      if (java_lang_VirtualThread::is_instance(thread_oop)) {\n+        oop carrier_thread = java_lang_VirtualThread::carrier_thread(thread_oop);\n+        java_thread = carrier_thread == nullptr ? nullptr : java_lang_Thread::thread(carrier_thread);\n+      }\n@@ -1117,0 +1121,4 @@\n+    if (java_lang_VirtualThread::is_instance(thread_oop)) {\n+      oop carrier_thread = java_lang_VirtualThread::carrier_thread(thread_oop);\n+      java_thread = carrier_thread == nullptr ? nullptr : java_lang_Thread::thread(carrier_thread);\n+    }\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1401,2 +1401,1 @@\n-  }\n-  if (vt_oop->is_a(vmClasses::BoundVirtualThread_klass())) {\n+  } else if (vt_oop->is_a(vmClasses::BoundVirtualThread_klass())) {\n@@ -1760,26 +1759,1 @@\n-  if (is_virtual) {\n-    if (single_suspend) {\n-      if (JvmtiVTSuspender::is_vthread_suspended(thread_h())) {\n-        return JVMTI_ERROR_THREAD_SUSPENDED;\n-      }\n-      JvmtiVTSuspender::register_vthread_suspend(thread_h());\n-      \/\/ Check if virtual thread is mounted and there is a java_thread.\n-      \/\/ A non-null java_thread is always passed in the !single_suspend case.\n-      oop carrier_thread = java_lang_VirtualThread::carrier_thread(thread_h());\n-      java_thread = carrier_thread == nullptr ? nullptr : java_lang_Thread::thread(carrier_thread);\n-    }\n-    \/\/ The java_thread can be still blocked in VTMS transition after a previous JVMTI resume call.\n-    \/\/ There is no need to suspend the java_thread in this case. After vthread unblocking,\n-    \/\/ it will check for ext_suspend request and suspend itself if necessary.\n-    if (java_thread == nullptr || java_thread->is_suspended()) {\n-      \/\/ We are done if the virtual thread is unmounted or\n-      \/\/ the java_thread is externally suspended.\n-      return JVMTI_ERROR_NONE;\n-    }\n-    \/\/ The virtual thread is mounted: suspend the java_thread.\n-  }\n-  \/\/ Don't allow hidden thread suspend request.\n-  if (java_thread->is_hidden_from_external_view()) {\n-    return JVMTI_ERROR_NONE;\n-  }\n-  bool is_thread_carrying = is_thread_carrying_vthread(java_thread, thread_h());\n+  \/\/ Unmounted vthread case.\n@@ -1787,5 +1761,3 @@\n-  \/\/ A case of non-virtual thread.\n-  if (!is_virtual) {\n-    \/\/ Thread.suspend() is used in some tests. It sets jt->is_suspended() only.\n-    if (java_thread->is_carrier_thread_suspended() ||\n-        (!is_thread_carrying && java_thread->is_suspended())) {\n+  if (is_virtual && java_thread == nullptr) {\n+    assert(single_suspend, \"sanity check\");\n+    if (JvmtiVTSuspender::is_vthread_suspended(thread_h())) {\n@@ -1794,1 +1766,2 @@\n-    java_thread->set_carrier_thread_suspended();\n+    JvmtiVTSuspender::register_vthread_suspend(thread_h());\n+    return JVMTI_ERROR_NONE;\n@@ -1796,0 +1769,4 @@\n+\n+  \/\/ Platform thread or mounted vthread cases.\n+\n+  assert(java_thread != nullptr, \"sanity check\");\n@@ -1798,3 +1775,4 @@\n-  assert(!single_suspend || (!is_virtual && java_thread->is_carrier_thread_suspended()) ||\n-          (is_virtual && JvmtiVTSuspender::is_vthread_suspended(thread_h())),\n-         \"sanity check\");\n+  \/\/ Don't allow hidden thread suspend request.\n+  if (java_thread->is_hidden_from_external_view()) {\n+    return JVMTI_ERROR_NONE;\n+  }\n@@ -1804,2 +1782,6 @@\n-  \/\/ and it will be actually suspended at virtual thread unmount transition.\n-  if (!is_thread_carrying) {\n+  \/\/ and it will be actually suspended at virtual thread unmount transition. \n+  bool is_thread_carrying = is_thread_carrying_vthread(java_thread, thread_h());\n+  if (is_thread_carrying) {\n+    return java_thread->set_carrier_thread_suspended() ? JVMTI_ERROR_NONE : JVMTI_ERROR_THREAD_SUSPENDED;\n+  } else {\n+    \/\/ Platform thread (not carrying vthread) or mounted vthread cases.\n@@ -1809,2 +1791,8 @@\n-    \/\/ Case of mounted virtual or attached carrier thread.\n-    if (!java_thread->java_suspend()) {\n+\n+    \/\/ Ideally we would just need to check java_thread->is_suspended(), but we have to\n+    \/\/ consider the case of trying to suspend a thread that was previously suspended while\n+    \/\/ carrying a vthread but has already unmounted it.\n+    if (java_thread->is_suspended() || (!is_virtual && java_thread->is_carrier_thread_suspended())) {\n+      return JVMTI_ERROR_THREAD_SUSPENDED;\n+    }\n+    if (!java_thread->java_suspend(is_virtual && single_suspend)) {\n@@ -1818,0 +1806,1 @@\n+    return JVMTI_ERROR_NONE;\n@@ -1819,1 +1808,0 @@\n-  return JVMTI_ERROR_NONE;\n@@ -1830,20 +1818,9 @@\n-  if (is_virtual) {\n-    if (single_resume) {\n-      if (!JvmtiVTSuspender::is_vthread_suspended(thread_h())) {\n-        return JVMTI_ERROR_THREAD_NOT_SUSPENDED;\n-      }\n-      JvmtiVTSuspender::register_vthread_resume(thread_h());\n-      \/\/ Check if virtual thread is mounted and there is a java_thread.\n-      \/\/ A non-null java_thread is always passed in the !single_resume case.\n-      oop carrier_thread = java_lang_VirtualThread::carrier_thread(thread_h());\n-      java_thread = carrier_thread == nullptr ? nullptr : java_lang_Thread::thread(carrier_thread);\n-    }\n-    \/\/ The java_thread can be still blocked in VTMS transition after a previous JVMTI suspend call.\n-    \/\/ There is no need to resume the java_thread in this case. After vthread unblocking,\n-    \/\/ it will check for is_vthread_suspended request and remain resumed if necessary.\n-    if (java_thread == nullptr || !java_thread->is_suspended()) {\n-      \/\/ We are done if the virtual thread is unmounted or\n-      \/\/ the java_thread is not externally suspended.\n-      return JVMTI_ERROR_NONE;\n-    }\n-    \/\/ The virtual thread is mounted and java_thread is supended: resume the java_thread.\n+  \/\/ Unmounted vthread case.\n+\n+  if (is_virtual && java_thread == nullptr) {\n+    assert(single_resume, \"sanity check\");\n+    if (!JvmtiVTSuspender::is_vthread_suspended(thread_h())) {\n+      return JVMTI_ERROR_THREAD_NOT_SUSPENDED;\n+    } \n+    JvmtiVTSuspender::register_vthread_resume(thread_h());\n+    return JVMTI_ERROR_NONE;\n@@ -1851,0 +1828,6 @@\n+\n+  \/\/ Platform thread or mounted vthread cases.\n+\n+  assert(java_thread != nullptr, \"sanity check\");\n+  assert(!java_thread->is_in_VTMS_transition(), \"sanity check\");\n+ \n@@ -1855,11 +1838,0 @@\n-  bool is_thread_carrying = is_thread_carrying_vthread(java_thread, thread_h());\n-\n-  \/\/ A case of a non-virtual thread.\n-  if (!is_virtual) {\n-    if (!java_thread->is_carrier_thread_suspended() &&\n-        (is_thread_carrying || !java_thread->is_suspended())) {\n-      return JVMTI_ERROR_THREAD_NOT_SUSPENDED;\n-    }\n-    java_thread->clear_carrier_thread_suspended();\n-  }\n-  assert(!java_thread->is_in_VTMS_transition(), \"sanity check\");\n@@ -1867,1 +1839,6 @@\n-  if (!is_thread_carrying) {\n+  bool is_thread_carrying = is_thread_carrying_vthread(java_thread, thread_h());\n+  if (is_thread_carrying) {\n+    return java_thread->clear_carrier_thread_suspended() ? JVMTI_ERROR_NONE : JVMTI_ERROR_THREAD_NOT_SUSPENDED;\n+  } else {\n+    \/\/ Platform thread (not carrying vthread) or mounted vthread cases.\n+ \n@@ -1871,4 +1848,8 @@\n-    if (java_thread->is_suspended()) {\n-      if (!java_thread->java_resume()) {\n-        return JVMTI_ERROR_THREAD_NOT_SUSPENDED;\n-      }\n+\n+    \/\/ Ideally we would not have to check this but we have to consider the case\n+    \/\/ of trying to resume a thread that was previously suspended while carrying\n+    \/\/ a vthread but has already unmounted it.\n+    if (!is_virtual && java_thread->is_carrier_thread_suspended()) {\n+      bool res = java_thread->clear_carrier_thread_suspended();\n+      assert(res, \"resume operations running concurrently?\");\n+      return JVMTI_ERROR_NONE;\n@@ -1876,0 +1857,5 @@\n+\n+    if (!java_thread->java_resume(is_virtual && single_resume)) {\n+      return JVMTI_ERROR_THREAD_NOT_SUSPENDED;\n+    }\n+    return JVMTI_ERROR_NONE;\n@@ -1877,1 +1863,0 @@\n-  return JVMTI_ERROR_NONE;\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":64,"deletions":79,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -661,1 +661,1 @@\n-  if (!(_self || _thread->is_carrier_thread_suspended())) {\n+  if (!_self && !_thread->is_suspended() && !_thread->is_carrier_thread_suspended()) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -257,1 +257,4 @@\n-  : _is_SR(false), _thread(thread)\n+  : _is_SR(false),\n+    _is_virtual(false),\n+    _is_self(false),\n+    _thread(thread)\n@@ -265,0 +268,10 @@\n+  JavaThread* current = JavaThread::current();\n+  oop thread_oop = JNIHandles::resolve_external_guard(thread);\n+  _is_virtual = java_lang_VirtualThread::is_instance(thread_oop);\n+\n+  if (thread == nullptr ||\n+      (!_is_virtual && thread_oop == current->threadObj()) ||\n+      (_is_virtual && thread_oop == current->vthread())) {\n+    _is_self = true;\n+    return; \/\/ no need for current thread to disable and enable transitions for itself\n+  }\n@@ -268,1 +281,0 @@\n-  oop thread_oop = JNIHandles::resolve_external_guard(thread);\n@@ -275,5 +287,1 @@\n-  if (!java_lang_VirtualThread::is_instance(thread_oop)) {\n-    _thread = nullptr; \/\/ target is a platform thread, switch to disabling VTMS transitions for all threads\n-  }\n-\n-  if (_thread != nullptr) {\n+  if (_is_virtual) {\n@@ -288,1 +296,4 @@\n-  : _is_SR(is_SR), _thread(nullptr)\n+  : _is_SR(is_SR),\n+    _is_virtual(false),\n+    _is_self(false),\n+    _thread(nullptr)\n@@ -312,1 +323,4 @@\n-  if (_thread != nullptr) {\n+  if (_is_self) {\n+    return; \/\/ no need for current thread to disable and enable transitions for itself\n+  }\n+  if (_is_virtual) {\n@@ -687,1 +701,1 @@\n-  MonitorLocker ml(JvmtiVTMSTransition_lock);\n+  MutexLocker ml(JvmtiVThreadSuspend_lock, Mutex::_no_safepoint_check_flag);\n@@ -696,1 +710,1 @@\n-  MonitorLocker ml(JvmtiVTMSTransition_lock);\n+  MutexLocker ml(JvmtiVThreadSuspend_lock, Mutex::_no_safepoint_check_flag);\n@@ -706,1 +720,1 @@\n-  MonitorLocker ml(JvmtiVTMSTransition_lock);\n+  MutexLocker ml(JvmtiVThreadSuspend_lock, Mutex::_no_safepoint_check_flag);\n@@ -723,1 +737,1 @@\n-  MonitorLocker ml(JvmtiVTMSTransition_lock);\n+  MutexLocker ml(JvmtiVThreadSuspend_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":27,"deletions":13,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,0 +89,2 @@\n+  bool _is_virtual;                                      \/\/ target thread is virtual\n+  bool _is_self;                                         \/\/ JvmtiVTMSTransitionDisabler is a no-op for current platform, carrier or virtual thread\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"prims\/jvmtiThreadState.hpp\"\n@@ -732,1 +733,1 @@\n-bool HandshakeState::suspend_with_handshake() {\n+bool HandshakeState::suspend_with_handshake(bool register_vthread_SR) {\n@@ -747,1 +748,1 @@\n-      set_suspended(true);\n+      set_suspended(true, register_vthread_SR);\n@@ -755,1 +756,1 @@\n-  set_suspended(true);\n+  set_suspended(true, register_vthread_SR);\n@@ -765,0 +766,1 @@\n+  bool _register_vthread_SR;\n@@ -767,1 +769,2 @@\n-  SuspendThreadHandshake() : HandshakeClosure(\"SuspendThread\"), _did_suspend(false) {}\n+  SuspendThreadHandshake(bool register_vthread_SR) : HandshakeClosure(\"SuspendThread\"),\n+    _register_vthread_SR(register_vthread_SR), _did_suspend(false) {}\n@@ -770,1 +773,1 @@\n-    _did_suspend = target->handshake_state()->suspend_with_handshake();\n+    _did_suspend = target->handshake_state()->suspend_with_handshake(_register_vthread_SR);\n@@ -775,1 +778,1 @@\n-bool HandshakeState::suspend() {\n+bool HandshakeState::suspend(bool register_vthread_SR) {\n@@ -783,1 +786,1 @@\n-    set_suspended(true);\n+    set_suspended(true, register_vthread_SR);\n@@ -787,1 +790,1 @@\n-    SuspendThreadHandshake st;\n+    SuspendThreadHandshake st(register_vthread_SR);\n@@ -793,4 +796,1 @@\n-bool HandshakeState::resume() {\n-  if (!is_suspended()) {\n-    return false;\n-  }\n+bool HandshakeState::resume(bool register_vthread_SR) {\n@@ -803,1 +803,1 @@\n-  set_suspended(false);\n+  set_suspended(false, register_vthread_SR);\n@@ -808,0 +808,14 @@\n+void HandshakeState::set_suspended(bool is_suspend, bool register_vthread_SR) {\n+#if INCLUDE_JVMTI\n+  if (register_vthread_SR) {\n+    assert(_handshakee->is_vthread_mounted(), \"sanity check\");\n+    if (is_suspend) {\n+      JvmtiVTSuspender::register_vthread_suspend(_handshakee->vthread());\n+    } else {\n+      JvmtiVTSuspender::register_vthread_resume(_handshakee->vthread());\n+    }\n+  }\n+#endif\n+  Atomic::store(&_suspended, is_suspend);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":27,"deletions":13,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-  bool suspend_with_handshake();\n+  bool suspend_with_handshake(bool register_vthread_SR);\n@@ -182,1 +182,1 @@\n-  void set_suspended(bool to)               { return Atomic::store(&_suspended, to); }\n+  void set_suspended(bool to, bool register_vthread_SR);\n@@ -186,2 +186,2 @@\n-  bool suspend();\n-  bool resume();\n+  bool suspend(bool register_vthread_SR);\n+  bool resume(bool register_vthread_SR);\n","filename":"src\/hotspot\/share\/runtime\/handshake.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1196,1 +1196,1 @@\n-bool JavaThread::java_suspend() {\n+bool JavaThread::java_suspend(bool register_vthread_SR) {\n@@ -1205,1 +1205,1 @@\n-  return this->handshake_state()->suspend();\n+  return this->handshake_state()->suspend(register_vthread_SR);\n@@ -1208,1 +1208,1 @@\n-bool JavaThread::java_resume() {\n+bool JavaThread::java_resume(bool register_vthread_SR) {\n@@ -1211,1 +1211,1 @@\n-  return this->handshake_state()->resume();\n+  return this->handshake_state()->resume(register_vthread_SR);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -701,2 +701,2 @@\n-  bool java_suspend();\n-  bool java_resume();\n+  bool java_suspend(bool register_vthread_SR);\n+  bool java_resume(bool register_vthread_SR);\n@@ -713,2 +713,2 @@\n-  inline void set_carrier_thread_suspended();\n-  inline void clear_carrier_thread_suspended();\n+  inline bool set_carrier_thread_suspended();\n+  inline bool clear_carrier_thread_suspended();\n@@ -717,1 +717,1 @@\n-    return _carrier_thread_suspended;\n+    return Atomic::load(&_carrier_thread_suspended);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,2 +74,2 @@\n-inline void JavaThread::set_carrier_thread_suspended() {\n-  _carrier_thread_suspended = true;\n+inline bool JavaThread::set_carrier_thread_suspended() {\n+  return Atomic::cmpxchg(&_carrier_thread_suspended, false, true) == false;\n@@ -77,2 +77,2 @@\n-inline void JavaThread::clear_carrier_thread_suspended() {\n-  _carrier_thread_suspended = false;\n+inline bool JavaThread::clear_carrier_thread_suspended() {\n+  return Atomic::cmpxchg(&_carrier_thread_suspended, true, false) == true;\n","filename":"src\/hotspot\/share\/runtime\/javaThread.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+Mutex*   JvmtiVThreadSuspend_lock     = nullptr;\n@@ -263,0 +264,1 @@\n+  MUTEX_DEFN(JvmtiVThreadSuspend_lock        , PaddedMutex,   nosafepoint-1);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+extern Mutex*   JvmtiVThreadSuspend_lock;        \/\/ a lock for virtual threads suspension\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -111,1 +111,0 @@\n-runtime\/handshake\/HandshakeSuspendExitTest.java 8294313 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}