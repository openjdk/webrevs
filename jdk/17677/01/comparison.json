{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-DISABLED_WARNINGS_java += this-escape restricted\n+DISABLED_WARNINGS_java += this-escape\n","filename":"make\/modules\/java.base\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -208,0 +208,1 @@\n+    @SuppressWarnings(\"restricted\")\n@@ -230,1 +231,1 @@\n-                                    .reinterpret(loaderArena, null));\n+                                .reinterpret(loaderArena, null)); \/\/ restricted\n@@ -303,0 +304,1 @@\n+    @SuppressWarnings(\"restricted\")\n@@ -330,1 +332,1 @@\n-                            .reinterpret(libArena, null));\n+                                .reinterpret(libArena, null));  \/\/ restricted\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,0 +104,1 @@\n+            @SuppressWarnings(\"restricted\")\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,0 +259,1 @@\n+    @SuppressWarnings(\"restricted\")\n@@ -267,1 +268,1 @@\n-                    .map(tl -> al.withoutName().withTargetLayout(stripNames(tl)))\n+                    .map(tl -> al.withoutName().withTargetLayout(stripNames(tl))) \/\/ restricted\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -752,0 +752,1 @@\n+        @SuppressWarnings(\"restricted\")\n@@ -756,1 +757,1 @@\n-                segment = segment.reinterpret((Arena) allocator, null);\n+                segment = segment.reinterpret((Arena) allocator, null); \/\/ restricted\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,0 +84,1 @@\n+    @SuppressWarnings(\"restricted\")\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+    @SuppressWarnings(\"restricted\")\n@@ -61,1 +62,1 @@\n-        return MemorySegment.ofAddress(entry).reinterpret(arena, null);\n+        return MemorySegment.ofAddress(entry).reinterpret(arena, null); \/\/ restricted\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallStubs.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,0 +221,1 @@\n+    @SuppressWarnings(\"restricted\")\n@@ -228,1 +229,1 @@\n-                ? retPtr.reinterpret(retLayout.byteSize(), upcallArena, null)\n+                ? retPtr.reinterpret(retLayout.byteSize(), upcallArena, null) \/\/ restricted\n@@ -235,1 +236,1 @@\n-                        .reinterpret(argLayout.byteSize(), upcallArena, null);\n+                        .reinterpret(argLayout.byteSize(), upcallArena, null); \/\/ restricted\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FallbackLinker.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,0 +163,1 @@\n+    @SuppressWarnings(\"restricted\")\n@@ -175,1 +176,2 @@\n-        return MemorySegment.ofAddress(execPtr).reinterpret(arena, unused -> freeClosure(closurePtr, globalTarget));\n+        return MemorySegment.ofAddress(execPtr)\n+            .reinterpret(arena, unused -> freeClosure(closurePtr, globalTarget)); \/\/ restricted\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/LibFallback.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}