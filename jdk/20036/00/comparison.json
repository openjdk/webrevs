{"files":[{"patch":"@@ -175,5 +175,0 @@\n-  if (!bs_nm->is_armed(nm)) {\n-    return 0;\n-  }\n-\n-  assert(!nm->is_osr_method(), \"Should not reach here\");\n@@ -182,0 +177,1 @@\n+  assert(!nm->is_osr_method() || may_enter, \"OSR nmethods should always be entrant after migration\");\n@@ -191,1 +187,1 @@\n-  \/\/ Diagnostic option to force deoptimization 1 in 3 times. It is otherwise\n+  \/\/ Diagnostic option to force deoptimization 1 in 10 times. It is otherwise\n@@ -193,1 +189,1 @@\n-  if (DeoptimizeNMethodBarriersALot) {\n+  if (DeoptimizeNMethodBarriersALot && !nm->is_osr_method()) {\n@@ -195,1 +191,1 @@\n-    if (Atomic::add(&counter, 1u) % 3 == 0) {\n+    if (Atomic::add(&counter, 1u) % 10 == 0) {\n@@ -208,9 +204,0 @@\n-  \/\/ This check depends on the invariant that all nmethods that are deoptimized \/ made not entrant\n-  \/\/ are NOT disarmed.\n-  \/\/ This invariant is important because a method can be deoptimized after the method have been\n-  \/\/ resolved \/ looked up by OSR by another thread. By not deoptimizing them we guarantee that\n-  \/\/ a deoptimized method will always hit the barrier and come to the same conclusion - deoptimize\n-  if (!is_armed(nm)) {\n-    return true;\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"}]}