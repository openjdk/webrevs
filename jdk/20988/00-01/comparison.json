{"files":[{"patch":"@@ -480,2 +480,1 @@\n-  uint mask = 0;\n-  return selection_list.triggers_default(&mask) ? LogDecorators(mask) : LogDecorators();\n+  return LogDecorators(selection_list.get_defaults_mask());\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+const LogTagType AnyTag     = LogTagType::__NO_TAG;\n@@ -31,1 +32,2 @@\n-  DEFAULT_VALUE(mask_from_decorators(NoDecorators), AnyLevel, LOG_TAGS(jit, inlining))\n+  DEFAULT_VALUE(mask_from_decorators(NoDecorators), AnyLevel, LOG_TAGS(jit, inlining)) \\\n+  DEFAULT_VALUE(mask_from_decorators(uptime_decorator, level_decorator, tags_decorator), AnyLevel, AnyTag)\n@@ -109,1 +111,1 @@\n-bool LogDecorators::has_default_decorator(const LogSelection& selection, uint* mask, const DefaultDecorator* defaults, size_t defaults_count) {\n+void LogDecorators::get_default_decorators(const LogSelection& selection, uint* mask, const DefaultDecorator* defaults, size_t defaults_count) {\n@@ -111,0 +113,1 @@\n+  uint tmp_mask = 0;\n@@ -121,1 +124,1 @@\n-      *mask = current_default.mask();\n+      tmp_mask = current_default.mask();\n@@ -124,1 +127,1 @@\n-      *mask |= current_default.mask();\n+      tmp_mask |= current_default.mask();\n@@ -127,1 +130,1 @@\n-  return max_specificity > 0;\n+  *mask |= tmp_mask;\n","filename":"src\/hotspot\/share\/logging\/logDecorators.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -104,1 +104,0 @@\n-  static const uint defaultsMask = (1 << uptime_decorator) | (1 << level_decorator) | (1 << tags_decorator);\n@@ -119,1 +118,1 @@\n-  LogDecorators() : _decorators(defaultsMask) {}\n+  LogDecorators() {}\n@@ -146,1 +145,1 @@\n-  static bool has_default_decorator(const LogSelection& selection, uint* mask, const DefaultDecorator* defaults = default_decorators, size_t defaults_count = number_of_default_decorators);\n+  static void get_default_decorators(const LogSelection& selection, uint* mask, const DefaultDecorator* defaults = default_decorators, size_t defaults_count = number_of_default_decorators);\n","filename":"src\/hotspot\/share\/logging\/logDecorators.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,0 +73,3 @@\n+  \/\/ Every set contains the empty set, so if other is empty we return true\n+  if (other._tags[0] == LogTag::__NO_TAG) return true;\n+  \n","filename":"src\/hotspot\/share\/logging\/logSelection.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-bool LogSelectionList::triggers_default(uint* mask) const {\n-  bool match = false;\n+uint LogSelectionList::get_defaults_mask() const {\n+  uint mask = 0;\n@@ -59,7 +59,1 @@\n-    if (LogDecorators::has_default_decorator(_selections[i], mask)) {\n-      if (match) {\n-        \/\/ None to be applied if several selections have conflicting defaults\n-        return false;\n-      }\n-      match = true;\n-    }\n+    LogDecorators::get_default_decorators(_selections[i], &mask);\n@@ -67,1 +61,1 @@\n-  return match;\n+  return mask;\n","filename":"src\/hotspot\/share\/logging\/logSelectionList.cpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  bool triggers_default(uint* mask) const;\n+  uint get_defaults_mask() const;\n","filename":"src\/hotspot\/share\/logging\/logSelectionList.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    uint out_mask;\n+    uint out_mask = 0;\n@@ -53,2 +53,1 @@\n-    bool result = LD::has_default_decorator(LogSelection(tags, false, LogLevelType::Trace), &out_mask, defaults, defaults_cnt);\n-    EXPECT_TRUE(result);\n+    LD::get_default_decorators(LogSelection(tags, false, LogLevelType::Trace), &out_mask, defaults, defaults_cnt);\n@@ -59,3 +58,4 @@\n-    tags[0] = LogTag::__NO_TAG;\n-    result = LD::has_default_decorator(LogSelection(tags, true, LogLevelType::Trace), &out_mask, defaults, defaults_cnt);\n-    EXPECT_FALSE(result);\n+    tags[0] = LogTag::_compilation;\n+    out_mask = 0;\n+    LD::get_default_decorators(LogSelection(tags, true, LogLevelType::Debug), &out_mask, defaults, defaults_cnt);\n+    EXPECT_EQ(LD::mask_from_decorators(LD::pid_decorator), out_mask);\n@@ -66,2 +66,2 @@\n-    result = LD::has_default_decorator(LogSelection(tags, false, LogLevelType::Trace), &out_mask, defaults, defaults_cnt);\n-    EXPECT_TRUE(result);\n+    out_mask = 0;\n+    LD::get_default_decorators(LogSelection(tags, false, LogLevelType::Trace), &out_mask, defaults, defaults_cnt);\n@@ -74,2 +74,2 @@\n-    result = LD::has_default_decorator(LogSelection(tags, false, LogLevelType::Debug), &out_mask, defaults, defaults_cnt);\n-    EXPECT_TRUE(result);\n+    out_mask = 0;\n+    LD::get_default_decorators(LogSelection(tags, false, LogLevelType::Debug), &out_mask, defaults, defaults_cnt);\n@@ -82,2 +82,2 @@\n-    result = LD::has_default_decorator(LogSelection(tags, false, LogLevelType::Info), &out_mask, defaults, defaults_cnt);\n-    EXPECT_TRUE(result);\n+    out_mask = 0;\n+    LD::get_default_decorators(LogSelection(tags, false, LogLevelType::Info), &out_mask, defaults, defaults_cnt);\n@@ -85,2 +85,2 @@\n-    result = LD::has_default_decorator(LogSelection(tags, false, LogLevelType::Trace), &out_mask, defaults, defaults_cnt);\n-    EXPECT_TRUE(result);\n+    out_mask = 0;\n+    LD::get_default_decorators(LogSelection(tags, false, LogLevelType::Trace), &out_mask, defaults, defaults_cnt);\n@@ -93,2 +93,2 @@\n-    result = LD::has_default_decorator(LogSelection(tags, false, LogLevelType::Debug), &out_mask, defaults, defaults_cnt);\n-    EXPECT_TRUE(result);\n+    out_mask = 0;\n+    LD::get_default_decorators(LogSelection(tags, false, LogLevelType::Debug), &out_mask, defaults, defaults_cnt);\n","filename":"test\/hotspot\/gtest\/logging\/test_logDefaultDecorators.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"}]}