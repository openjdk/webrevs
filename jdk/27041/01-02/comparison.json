{"files":[{"patch":"@@ -768,9 +768,7 @@\n-\/\/ LightweightSynchronizer::inflate_locked_or_imse is used to to get an inflated\n-\/\/ ObjectMonitor*. It is used from contexts which require an inflatedmonitor,\n-\/\/ and expects to throw a java.lang.IllegalMonitorStateException if it is not\n-\/\/ held by the current thread. Such as notify\/wait and jni_exit.\n-\/\/ Lightweight locking keeps it invariant that it only inflates if it is already\n-\/\/ locked by the current thread or the current thread is in the process of entering.\n-\/\/ To maintain this invariant we need to throw a java.lang.IllegalMonitorStateException\n-\/\/ before inflating if the current thread is not the owner.\n-\/\/ LightweightSynchronizer::inflate_locked_or_imse facilitates this.\n+\/\/ LightweightSynchronizer::inflate_locked_or_imse is used to to get an\n+\/\/ inflated ObjectMonitor* from contexts which require that, such as\n+\/\/ notify\/wait and jni_exit. Lightweight locking keeps the invariant that it\n+\/\/ only inflates if it is already locked by the current thread or the current\n+\/\/ thread is in the process of entering. To maintain this invariant we need to\n+\/\/ throw a java.lang.IllegalMonitorStateException before inflating if the\n+\/\/ current thread is not the owner.\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"}]}