{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,1 +100,7 @@\n-    \/\/ ## Override bulk get methods for better performance\n+    @Override\n+    CharBuffer getArray(int index, char[] dst, int dstOffset, int length) {\n+        \/\/ Note: the variable \"offset\" is defined and set in the superclass\n+        int srcOffset = offset + index;\n+        str.getChars(srcOffset, srcOffset + length, dst, dstOffset);\n+        return this;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/StringCharBuffer.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -953,1 +953,1 @@\n-    private $Type$Buffer getArray(int index, $type$[] dst, int offset, int length) {\n+    $Type$Buffer getArray(int index, $type$[] dst, int offset, int length) {\n@@ -1153,3 +1153,7 @@\n-            int posMax = pos + n;\n-            for (int i = pos, j = srcPos; i < posMax; i++, j++)\n-                put(i, src.get(j));\n+            if (this.hb != null && src instanceof StringCharBuffer scb) {\n+                scb.getArray(srcPos, this.hb, pos, n);\n+            } else {\n+                int posMax = pos + n;\n+                for (int i = pos, j = srcPos; i < posMax; i++, j++)\n+                    put(i, src.get(j));\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio;\n+\n+import java.nio.CharBuffer;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+\/**\n+ * Benchmark for bulk get methods of a {@code CharBuffer} created from a\n+ * {@code CharSequence}.\n+ *\/\n+\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Fork(1)\n+public class StringCharBufferBulkTransfer {\n+    private static final int LENGTH = 16384;\n+\n+    char[] buf = new char[LENGTH];\n+    CharBuffer cb = CharBuffer.wrap(new String(buf));\n+    char[] dst = new char[LENGTH];\n+    CharBuffer cbw = CharBuffer.allocate(LENGTH);\n+\n+    @Benchmark\n+    public void absoluteBulkGet() {\n+        cb.get(0, dst, 0, dst.length);\n+    }\n+\n+    @Benchmark\n+    public void relativeBulkGet() {\n+        cb.get(dst, 0, dst.length);\n+        cb.position(0);\n+    }\n+\n+    @Benchmark\n+    public void getChars() {\n+        cb.getChars(0, LENGTH, dst, 0);\n+    }\n+\n+    @Benchmark\n+    public void absoluteBulkPut() {\n+        cbw.put(0, cb, 0, dst.length);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/StringCharBufferBulkTransfer.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}