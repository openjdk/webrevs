{"files":[{"patch":"@@ -1832,0 +1832,43 @@\n+static void float_to_float16_slow_path(C2_MacroAssembler& masm, C2GeneralStub<Register, FloatRegister, Register>& stub) {\n+#define __ masm.\n+  Register dst = stub.data<0>();\n+  FloatRegister src = stub.data<1>();\n+  Register tmp = stub.data<2>();\n+  __ bind(stub.entry());\n+\n+  __ fmv_x_w(dst, src);\n+\n+  \/\/ preserve the payloads of non-canonical NaNs.\n+  __ srai(dst, dst, 13);\n+  \/\/ preserve the sign bit.\n+  __ srai(tmp, dst, 13);\n+  __ slli(tmp, tmp, 10);\n+  __ mv(t0, 0x3ff);\n+  __ orr(tmp, tmp, t0);\n+\n+  \/\/ get the result by merging sign bit and payloads of preserved non-canonical NaNs.\n+  __ andr(dst, dst, tmp);\n+\n+  __ j(stub.continuation());\n+#undef __\n+}\n+\n+\/\/ j.l.Float.floatToFloat16\n+void C2_MacroAssembler::float_to_float16(Register dst, FloatRegister src, FloatRegister ftmp, Register xtmp) {\n+  auto stub = C2CodeStub::make<Register, FloatRegister, Register>(dst, src, xtmp, 130, float_to_float16_slow_path);\n+\n+  \/\/ in riscv, NaN needs a special process as fcvt does not work in that case.\n+\n+  \/\/ check whether it's a NaN.\n+  fclass_s(t0, src);\n+  andi(t0, t0, fclass_mask::nan);\n+  \/\/ jump to stub processing NaN cases.\n+  bnez(t0, stub->entry());\n+\n+  \/\/ non-NaN cases, just use built-in instructions.\n+  fcvt_h_s(ftmp, src);\n+  fmv_x_h(dst, ftmp);\n+\n+  bind(stub->continuation());\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -176,0 +176,1 @@\n+  void float_to_float16(Register dst, FloatRegister src, FloatRegister ftmp, Register xtmp);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1937,0 +1937,1 @@\n+    case Op_ConvF2HF:\n@@ -8295,0 +8296,12 @@\n+instruct convF2HF_reg_reg(iRegINoSp dst, fRegF src, fRegF ftmp, iRegINoSp xtmp) %{\n+  match(Set dst (ConvF2HF src));\n+  effect(TEMP_DEF dst, TEMP ftmp, TEMP xtmp);\n+  format %{ \"fcvt.h.s $ftmp, $src\\t# convert single precision to half\\n\\t\"\n+            \"fmv.x.h $dst, $ftmp\\t# move result from $ftmp to $dst\"\n+  %}\n+  ins_encode %{\n+    __ float_to_float16($dst$$Register, $src$$FloatRegister, $ftmp$$FloatRegister, $xtmp$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}