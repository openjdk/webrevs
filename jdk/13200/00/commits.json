[{"commit":{"message":"8301739: AArch64: Add optimized rules for vector compare with immediate for SVE\n\nWe can use SVE compare-with-integer-immediate instructions like\ncmpgt(immediate)[1] to avoid the extra scalar2vector\noperations.\n\nThe following instruction sequence\n\n```\nmovi    v17.16b, #12\ncmpgt   p0.b, p7\/z, z16.b, z17.b\n```\n\ncan be optimized to:\n\n```\ncmpgt   p0.b, p7\/z, z16.b, #12\n```\n\nThis patch does the following:\n1. Add SVE compare-with-7bit-unsigned-immediate instructions to C2's backend.\n\nSVE cmp<cc>(immediate) instructions can support vector comparing with\n7bit unsigned integer immediate (range from 0 to 127) or 5bit signed\ninteger immediate (range from -16 to 15).\n\n2. Add optimized match rules to generate the compare-with-immediate\ninstructions.\n\n[1]: https:\/\/developer.arm.com\/documentation\/ddi0596\/2021-12\/SVE-Instructions\/CMP-cc---immediate---Compare-vector-to-immediate-\n\nTEST_LABEL: v1 || n2, aarch64&&ubuntu&&conformance-enabled\nJDK_SCOPE: hotspot:compiler\/vectorapi, jdk:jdk\/incubator\/vector\/\n\nJira: ENTLLT-5294\nChange-Id: I6b915864308faf9a8ec6e35ca1b4948666d75dca"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"},{"filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCompareWithImmTest.java"}],"sha":"dd190608f4337bbdf4085415e04e1188217d98a8"}]