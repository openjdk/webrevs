{"files":[{"patch":"@@ -2881,1 +2881,1 @@\n-  __ mov(rscratch1, runtime_entry);\n+  __ lea(rscratch1, RuntimeAddress(runtime_entry));\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,0 +66,6 @@\n+const char* aot_code_entry_kind_name[] = {\n+#define DECL_KIND_STRING(kind) XSTR(kind),\n+  DO_AOTCODEENTRY_KIND(DECL_KIND_STRING)\n+#undef DECL_KIND_STRING\n+};\n+\n@@ -117,8 +123,0 @@\n-const char* AOTCodeEntry::_kind_string[] = {\n-  \"None\",\n-  \"Adapter\",\n-  \"SharedBlob\",\n-  \"C1Blob\",\n-  \"C2Blob\"\n-};\n-\n@@ -360,0 +358,1 @@\n+  _compressedOopBase     = CompressedOops::base();\n@@ -412,1 +411,1 @@\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with CompressedOops::shift() = %d vs current %d\", _compressedOopShift, CompressedOops::shift());\n+    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with different CompressedOops::shift(): %d vs current %d\", _compressedOopShift, CompressedOops::shift());\n@@ -427,0 +426,7 @@\n+\n+  \/\/ This should be the last check as it only disables AOTStubCaching\n+  if ((_compressedOopBase == nullptr || CompressedOops::base() == nullptr) && (_compressedOopBase != CompressedOops::base())) {\n+    log_debug(aot, codecache, init)(\"AOTStubCaching is disabled: incompatible CompressedOops::base(): %p vs current %p\", _compressedOopBase, CompressedOops::base());\n+    AOTStubCaching = false;\n+  }\n+\n@@ -764,1 +770,1 @@\n-  if (AOTCodeEntry::is_adapter(entry_kind) && !AOTAdapterCaching) {\n+  if (AOTCodeEntry::is_adapter(entry_kind) && !is_dumping_adapters()) {\n@@ -767,1 +773,1 @@\n-  if (AOTCodeEntry::is_blob(entry_kind) && !AOTStubCaching) {\n+  if (AOTCodeEntry::is_blob(entry_kind) && !is_dumping_stubs()) {\n@@ -770,1 +776,1 @@\n-  log_debug(aot, codecache, stubs)(\"Writing blob '%s' (id=%u, kind=%s) to AOT Code Cache\", name, id, AOTCodeEntry::kind_string(entry_kind));\n+  log_debug(aot, codecache, stubs)(\"Writing blob '%s' (id=%u, kind=%s) to AOT Code Cache\", name, id, aot_code_entry_kind_name[entry_kind]);\n@@ -850,1 +856,1 @@\n-  log_debug(aot, codecache, stubs)(\"Wrote code blob '%s' (id=%u, kind=%s) to AOT Code Cache\", name, id, AOTCodeEntry::kind_string(entry_kind));\n+  log_debug(aot, codecache, stubs)(\"Wrote code blob '%s' (id=%u, kind=%s) to AOT Code Cache\", name, id, aot_code_entry_kind_name[entry_kind]);\n@@ -861,1 +867,1 @@\n-  if (AOTCodeEntry::is_adapter(entry_kind) && !AOTAdapterCaching) {\n+  if (AOTCodeEntry::is_adapter(entry_kind) && !is_using_adapters()) {\n@@ -864,1 +870,1 @@\n-  if (AOTCodeEntry::is_blob(entry_kind) && !AOTStubCaching) {\n+  if (AOTCodeEntry::is_blob(entry_kind) && !is_using_stubs()) {\n@@ -867,1 +873,1 @@\n-  log_debug(aot, codecache, stubs)(\"Reading blob '%s' (id=%u, kind=%s) from AOT Code Cache\", name, id, AOTCodeEntry::kind_string(entry_kind));\n+  log_debug(aot, codecache, stubs)(\"Reading blob '%s' (id=%u, kind=%s) from AOT Code Cache\", name, id, aot_code_entry_kind_name[entry_kind]);\n@@ -876,1 +882,1 @@\n-  log_debug(aot, codecache, stubs)(\"Read blob '%s' (id=%u, kind=%s) from AOT Code Cache\", name, id, AOTCodeEntry::kind_string(entry_kind));\n+  log_debug(aot, codecache, stubs)(\"Read blob '%s' (id=%u, kind=%s) from AOT Code Cache\", name, id, aot_code_entry_kind_name[entry_kind]);\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -47,0 +47,7 @@\n+#define DO_AOTCODEENTRY_KIND(Fn) \\\n+  Fn(None) \\\n+  Fn(Adapter) \\\n+  Fn(SharedBlob) \\\n+  Fn(C1Blob) \\\n+  Fn(C2Blob) \\\n+\n@@ -50,8 +57,5 @@\n-  enum Kind {\n-    None    = 0,\n-    First_kind = 1,\n-    Adapter = 1,\n-    SharedBlob = 2,\n-    C1Blob = 3,\n-    C2Blob = 4,\n-    Last_kind = 4\n+  enum Kind : s1 {\n+#define DECL_KIND_ENUM(kind) kind,\n+    DO_AOTCODEENTRY_KIND(DECL_KIND_ENUM)\n+#undef DECL_KIND_ENUM\n+    Kind_count\n@@ -61,2 +65,0 @@\n-  static const char* _kind_string[Last_kind+1];\n-\n@@ -111,2 +113,1 @@\n-  static const char* kind_string(Kind kind) { return _kind_string[(int)kind]; }\n-  static bool is_valid_entry_kind(Kind kind) { return kind >= First_kind && kind <= Last_kind; }\n+  static bool is_valid_entry_kind(Kind kind) { return kind > None && kind < Kind_count; }\n@@ -168,0 +169,1 @@\n+    address _compressedOopBase;\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Sanity test of AOT Code Cache with compressed oops configurations\n+ * @requires vm.cds\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @requires vm.flagless\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib \/test\/setup_aot\n+ * @build AOTCodeCompressedOopsTest JavacBenchApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar\n+ *             JavacBenchApp\n+ *             JavacBenchApp$ClassFile\n+ *             JavacBenchApp$FileManager\n+ *             JavacBenchApp$SourceFile\n+ * @run driver AOTCodeCompressedOopsTest \n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class AOTCodeCompressedOopsTest {\n+    private enum Base {\n+        ZERO,\n+        NON_ZERO\n+    }\n+    private enum Shift {\n+        ZERO,\n+        NON_ZERO\n+    }\n+    public static void main(String... args) throws Exception {\n+        {\n+            Tester t = new Tester();\n+            t.setHeapConfig(Tester.RunMode.ASSEMBLY, true, true);\n+            t.runAOTAssemblyWorkflow();\n+            t.setHeapConfig(Tester.RunMode.PRODUCTION, true, true);\n+            t.productionRun();\n+            t.setHeapConfig(Tester.RunMode.PRODUCTION, true, false);\n+            t.productionRun();\n+            t.setHeapConfig(Tester.RunMode.PRODUCTION, false, false);\n+            t.productionRun();\n+        }\n+        {\n+            Tester t = new Tester();\n+            t.setHeapConfig(Tester.RunMode.ASSEMBLY, true, false);\n+            t.runAOTAssemblyWorkflow();\n+            t.setHeapConfig(Tester.RunMode.PRODUCTION, true, true);\n+            t.productionRun();\n+            t.setHeapConfig(Tester.RunMode.PRODUCTION, true, false);\n+            t.productionRun();\n+            t.setHeapConfig(Tester.RunMode.PRODUCTION, false, false);\n+            t.productionRun();\n+        }\n+        {\n+            Tester t = new Tester();\n+            t.setHeapConfig(Tester.RunMode.ASSEMBLY, false, false);\n+            t.runAOTAssemblyWorkflow();\n+            t.setHeapConfig(Tester.RunMode.PRODUCTION, true, true);\n+            t.productionRun();\n+            t.setHeapConfig(Tester.RunMode.PRODUCTION, true, false);\n+            t.productionRun();\n+            t.setHeapConfig(Tester.RunMode.PRODUCTION, false, false);\n+            t.productionRun();\n+        }\n+    }\n+    static class Tester extends CDSAppTester {\n+        Base baseInAsmPhase, baseInProdPhase;\n+        Shift shiftInAsmPhase, shiftInProdPhase;\n+        boolean zeroBaseInAsmPhase, zeroBaseInProdPhase;\n+        boolean zeroShiftInAsmPhase, zeroShiftInProdPhase;\n+\n+        public Tester() {\n+            super(\"AOTCodeCompressedOopsTest\");\n+        }\n+\n+        public void setHeapConfig(RunMode runMode, boolean isBaseZero, boolean isShiftZero) {\n+            if (runMode == RunMode.ASSEMBLY) {\n+                zeroBaseInAsmPhase = isBaseZero;\n+                zeroShiftInAsmPhase = isShiftZero;\n+            } else if (runMode == RunMode.PRODUCTION) {\n+                zeroBaseInProdPhase = isBaseZero;\n+                zeroShiftInProdPhase = isShiftZero;\n+            }\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return \"app.jar\";\n+        }\n+\n+        List<String> getVMArgsForHeapConfig(boolean isBaseZero, boolean isShiftZero) {\n+            List<String> list = new ArrayList<String>();\n+            if (isBaseZero && isShiftZero) {\n+                list.add(\"-Xmx1g\"); \/\/ Set max heap < 4G\n+            } else if (isBaseZero && !isShiftZero) {\n+                list.add(\"-Xmx6g\"); \/\/ Set max heap > 4G\n+            } else if (!isBaseZero && !isShiftZero) {\n+                list.add(\"-Xmx6g\");\n+                list.add(\"-XX:HeapBaseMinAddress=32g\");\n+            }\n+            return list;\n+       }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            switch (runMode) {\n+            case RunMode.ASSEMBLY: {\n+                    List<String> args = getVMArgsForHeapConfig(zeroBaseInAsmPhase, zeroShiftInAsmPhase);\n+                    args.addAll(List.of(\"-XX:+UnlockDiagnosticVMOptions\",\n+                                        \"-Xlog:cds=info\",\n+                                        \"-Xlog:aot+codecache+init=debug\",\n+                                        \"-Xlog:aot+codecache+exit=debug\"));\n+                    return args.toArray(new String[0]);\n+                }\n+            case RunMode.PRODUCTION: {\n+                    List<String> args = getVMArgsForHeapConfig(zeroBaseInProdPhase, zeroShiftInProdPhase);\n+                    args.addAll(List.of(\"-XX:+UnlockDiagnosticVMOptions\",\n+                                        \"-Xlog:cds=info\",\n+                                        \"-Xlog:aot+codecache+init=debug\",\n+                                        \"-Xlog:aot+codecache+exit=debug\"));\n+                    return args.toArray(new String[0]);\n+                }\n+            }\n+            return new String[] {};\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {\n+                \"JavacBenchApp\", \"10\"\n+            };\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n+            if (runMode == RunMode.PRODUCTION) {\n+                 if (zeroShiftInAsmPhase != zeroShiftInProdPhase) {\n+                     out.shouldContain(\"AOT Code Cache disabled: it was created with different CompressedOops::shift()\");\n+                 } else if (zeroBaseInAsmPhase != zeroBaseInProdPhase) {\n+                     out.shouldContain(\"AOTStubCaching is disabled: incompatible CompressedOops::base()\");\n+                 } else {\n+                     out.shouldMatch(\"Read \\\\d+ entries table at offset \\\\d+ from AOT Code Cache\");\n+                 }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCode\/AOTCodeCompressedOopsTest.java","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"},{"patch":"@@ -350,1 +350,1 @@\n-    private OutputAnalyzer productionRun() throws Exception {\n+    public OutputAnalyzer productionRun() throws Exception {\n@@ -434,0 +434,7 @@\n+\n+    \/\/ See JEP 483; stop at the assembly run; do not execute production run\n+    public void runAOTAssemblyWorkflow() throws Exception {\n+        this.workflow = Workflow.AOT;\n+        recordAOTConfiguration();\n+        createAOTCache();\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}