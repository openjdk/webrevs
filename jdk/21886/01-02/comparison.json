{"files":[{"patch":"@@ -82,4 +82,3 @@\n-                if (!followLinks &&\n-                    UnixFileAttributes.get(file, false).isSymbolicLink()) {\n-                    useUtimensat = utimensatSupported();\n-                    if (!useUtimensat)\n+                if (!followLinks) {\n+                    \/\/ these path-based syscalls also work if following links\n+                    if (!(useUtimensat = utimensatSupported())) {\n@@ -87,0 +86,1 @@\n+                    }\n@@ -98,2 +98,2 @@\n-                if (!(x.errno() == UnixConstants.ENXIO ||\n-                     (x.errno() == UnixConstants.ELOOP && useLutimes))) {\n+                if (!(x.errno() == ENXIO ||\n+                     (x.errno() == ELOOP && (useUtimensat || useLutimes)))) {\n@@ -137,1 +137,2 @@\n-                        utimensat(AT_FDCWD, file, accessValue, modValue, AT_SYMLINK_NOFOLLOW);\n+                        utimensat(AT_FDCWD, file, accessValue, modValue,\n+                                  followLinks ? 0 : AT_SYMLINK_NOFOLLOW);\n@@ -144,1 +145,1 @@\n-                    if (x.errno() == UnixConstants.EINVAL &&\n+                    if (x.errno() == EINVAL &&\n@@ -162,1 +163,2 @@\n-                            utimensat(AT_FDCWD, file, accessValue, modValue, AT_SYMLINK_NOFOLLOW);\n+                            utimensat(AT_FDCWD, file, accessValue, modValue,\n+                                      followLinks ? 0 : AT_SYMLINK_NOFOLLOW);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.List;\n@@ -135,13 +136,17 @@\n-            var symlinkView = Files.getFileAttributeView\n-                (symlink, BasicFileAttributeView.class, NOFOLLOW_LINKS);\n-            symlinkView.setTimes(newTime, newTime, null);\n-            var symlinkAttrs = symlinkView.readAttributes();\n-\n-            if (!symlinkAttrs.lastAccessTime().equals(newTime))\n-                throw new RuntimeException(\"Last access time \"\n-                                           + symlinkAttrs.lastAccessTime()\n-                                           + \" != \" + newTime);\n-            if (!symlinkAttrs.lastAccessTime().equals(newTime))\n-                throw new RuntimeException(\"Last modified time \"\n-                                           + symlinkAttrs.lastModifiedTime()\n-                                           + \" != \" + newTime);\n+            for (Path p : List.of(target, symlink)) {\n+                System.out.println(\"p: \" + p);\n+\n+                var view = Files.getFileAttributeView(p,\n+                    BasicFileAttributeView.class, NOFOLLOW_LINKS);\n+                view.setTimes(newTime, newTime, null);\n+                var attrs = view.readAttributes();\n+\n+                if (!attrs.lastAccessTime().equals(newTime))\n+                    throw new RuntimeException(\"Last access time \"\n+                                               + attrs.lastAccessTime()\n+                                               + \" != \" + newTime);\n+                if (!attrs.lastAccessTime().equals(newTime))\n+                    throw new RuntimeException(\"Last modified time \"\n+                                               + attrs.lastModifiedTime()\n+                                               + \" != \" + newTime);\n+            }\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/SetTimesNanos.java","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"}]}