{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,1 @@\n+            boolean useUtimensat = false;\n@@ -81,3 +82,5 @@\n-                if (!followLinks) {\n-                    useLutimes = lutimesSupported() &&\n-                        UnixFileAttributes.get(file, false).isSymbolicLink();\n+                if (!followLinks &&\n+                    UnixFileAttributes.get(file, false).isSymbolicLink()) {\n+                    useUtimensat = utimensatSupported();\n+                    if (!useUtimensat)\n+                        useLutimes = lutimesSupported();\n@@ -85,1 +88,1 @@\n-                if (!useLutimes) {\n+                if (!useUtimensat && !useLutimes) {\n@@ -120,1 +123,1 @@\n-                TimeUnit timeUnit = useFutimens ?\n+                TimeUnit timeUnit = (useFutimens || useUtimensat) ?\n@@ -133,0 +136,2 @@\n+                    } else if (useUtimensat) {\n+                        utimensat(file, accessValue, modValue);\n@@ -156,0 +161,2 @@\n+                        } else if (useUtimensat) {\n+                            utimensat(file, accessValue, modValue);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -394,0 +394,16 @@\n+    \/**\n+     * utimensat(int fd, const char* path,\n+     *           const struct timeval times[2], int flags)\n+     *\n+     * We hard code fd to FD_ATCWD and flags to AT_SYMLINK_NOFOLLOW.\n+     *\/\n+    static void utimensat(UnixPath path, long times0, long times1)\n+        throws UnixException\n+    {\n+        try (NativeBuffer buffer = copyToNativeBuffer(path)) {\n+            utimensat0(buffer.address(), times0, times1);\n+        }\n+    }\n+    private static native void utimensat0(long pathAddress, long times0, long times1)\n+        throws UnixException;\n+\n@@ -560,1 +576,2 @@\n-    private static final int SUPPORTS_XATTR         = 1 << 5;\n+    private static final int SUPPORTS_UTIMENSAT     = 1 << 5;\n+    private static final int SUPPORTS_XATTR         = 1 << 6;\n@@ -592,0 +609,7 @@\n+    \/**\n+     * Supports utimensat\n+     *\/\n+    static boolean utimensatSupported() {\n+        return (capabilities & SUPPORTS_UTIMENSAT) != 0;\n+    }\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -214,0 +214,2 @@\n+typedef int utimensat_func(int dirfd, const char *pathname,\n+                           const struct timespec[2], int flags);\n@@ -226,0 +228,1 @@\n+static utimensat_func* my_utimensat_func = NULL;\n@@ -435,0 +438,4 @@\n+    my_utimensat_func = (utimensat_func*) dlsym(RTLD_DEFAULT, \"utimensat\");\n+    if (my_utimensat_func != NULL) {\n+        capabilities |= sun_nio_fs_UnixNativeDispatcher_SUPPORTS_UTIMENSAT;\n+    }\n@@ -979,0 +986,28 @@\n+JNIEXPORT void JNICALL\n+Java_sun_nio_fs_UnixNativeDispatcher_utimensat0(JNIEnv* env, jclass this,\n+    jlong pathAddress, jlong accessTime, jlong modificationTime) {\n+#if defined(__linux__)\n+    int err;\n+    struct timespec times[2];\n+    const char* path = (const char*)jlong_to_ptr(pathAddress);\n+\n+    times[0].tv_sec = accessTime \/ 1000000000;\n+    times[0].tv_nsec = accessTime % 1000000000;\n+\n+    times[1].tv_sec = modificationTime \/ 1000000000;\n+    times[1].tv_nsec = modificationTime % 1000000000;\n+\n+    if (my_utimensat_func == NULL) {\n+        JNU_ThrowInternalError(env, \"my_utimensat_func is NULL\");\n+        return;\n+    }\n+    RESTARTABLE((*my_utimensat_func)(AT_FDCWD, path, &times[0], AT_SYMLINK_NOFOLLOW), err);\n+\n+    if (err == -1) {\n+        throwUnixException(env, errno);\n+    }\n+#else\n+    JNU_ThrowInternalError(env, \"should not reach here\");\n+#endif\n+}\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 8181493 8231174\n+ * @bug 8181493 8231174 8343417\n@@ -28,0 +28,2 @@\n+ * @library ..\/.. \/test\/lib\n+ * @build jdk.test.lib.Platform\n@@ -29,0 +31,1 @@\n+ * @run main SetTimesNanos\n@@ -40,1 +43,6 @@\n-import java.util.concurrent.TimeUnit;\n+\n+import static java.nio.file.LinkOption.*;\n+import static java.util.concurrent.TimeUnit.*;\n+\n+import jdk.test.lib.Platform;\n+import jtreg.SkippedException;\n@@ -43,2 +51,0 @@\n-    private static final boolean IS_WINDOWS =\n-        System.getProperty(\"os.name\").startsWith(\"Windows\");\n@@ -47,1 +53,1 @@\n-        if (!IS_WINDOWS) {\n+        if (!Platform.isWindows()) {\n@@ -55,2 +61,1 @@\n-                System.err.println(\"futimens() not supported; skipping test\");\n-                return;\n+                throw new SkippedException(\"futimens() not supported\");\n@@ -66,1 +71,1 @@\n-        Set<String> testedTypes = IS_WINDOWS ?\n+        Set<String> testedTypes = Platform.isWindows() ?\n@@ -69,2 +74,1 @@\n-            System.err.format(\"%s not in %s; skipping test\", store.type(), testedTypes);\n-            return;\n+            throw new SkippedException(store.type() + \" not in \" + testedTypes);\n@@ -77,0 +81,5 @@\n+\n+        if (Platform.isLinux()) {\n+            testNanosLink(false);\n+            testNanosLink(true);\n+        }\n@@ -83,1 +92,1 @@\n-        FileTime pathTime = FileTime.from(timeNanos, TimeUnit.NANOSECONDS);\n+        FileTime pathTime = FileTime.from(timeNanos, NANOSECONDS);\n@@ -89,1 +98,1 @@\n-        if (IS_WINDOWS) {\n+        if (Platform.isWindows()) {\n@@ -102,1 +111,1 @@\n-            long nanos = times[i].to(TimeUnit.NANOSECONDS);\n+            long nanos = times[i].to(NANOSECONDS);\n@@ -110,0 +119,34 @@\n+\n+    private static void testNanosLink(boolean absolute) throws IOException {\n+        System.out.println(\"absolute: \" + absolute);\n+\n+        var target = Path.of(\"target\");\n+        var symlink = Path.of(\"symlink\");\n+        if (absolute)\n+            symlink = symlink.toAbsolutePath();\n+\n+        try {\n+            Files.createFile(target);\n+            Files.createSymbolicLink(symlink, target);\n+\n+            var newTime = FileTime.from(1730417633157646106L, NANOSECONDS);\n+            System.out.println(\"newTime: \" + newTime.to(NANOSECONDS));\n+\n+            var symlinkView = Files.getFileAttributeView\n+                (symlink, BasicFileAttributeView.class, NOFOLLOW_LINKS);\n+            symlinkView.setTimes(newTime, newTime, null);\n+            var symlinkAttrs = symlinkView.readAttributes();\n+\n+            if (!symlinkAttrs.lastAccessTime().equals(newTime))\n+                throw new RuntimeException(\"Last access time \"\n+                                           + symlinkAttrs.lastAccessTime()\n+                                           + \" != \" + newTime);\n+            if (!symlinkAttrs.lastAccessTime().equals(newTime))\n+                throw new RuntimeException(\"Last modified time \"\n+                                           + symlinkAttrs.lastModifiedTime()\n+                                           + \" != \" + newTime);\n+        } finally {\n+            Files.deleteIfExists(target);\n+            Files.deleteIfExists(symlink);\n+        }\n+    }\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/SetTimesNanos.java","additions":57,"deletions":14,"binary":false,"changes":71,"status":"modified"}]}