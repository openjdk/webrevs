{"files":[{"patch":"@@ -267,1 +267,1 @@\n-  \/\/ increasing order.\n+  \/\/ increasing (decreasing for reverse iteration) order.\n@@ -279,2 +279,2 @@\n-  \/\/ greater than the current index will affect which further indices the\n-  \/\/ operation will be applied to.\n+  \/\/ greater than (less than for reverse iteration) the current index will\n+  \/\/ affect which further indices the operation will be applied to.\n@@ -299,0 +299,16 @@\n+  template<typename Function>\n+  bool reverse_iterate(Function function, idx_t beg, idx_t end) const;\n+\n+  template<typename BitMapClosureType>\n+  bool reverse_iterate(BitMapClosureType* cl, idx_t beg, idx_t end) const;\n+\n+  template<typename Function>\n+  bool reverse_iterate(Function function) const {\n+    return reverse_iterate(function, 0, size());\n+  }\n+\n+  template<typename BitMapClosureType>\n+  bool reverse_iterate(BitMapClosureType* cl) const {\n+    return reverse_iterate(cl, 0, size());\n+  }\n+\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -354,0 +354,19 @@\n+template <typename Function>\n+inline bool BitMap::reverse_iterate(Function function, idx_t beg, idx_t end) const {\n+  auto invoke = IterateInvoker<decltype(function(beg))>();\n+  for (idx_t index; true; end = index) {\n+    index = find_last_set_bit(beg, end);\n+    if (index >= end) {\n+      return true;\n+    } else if (!invoke(function, index)) {\n+      return false;\n+    }\n+  }\n+}\n+\n+template <typename BitMapClosureType>\n+inline bool BitMap::reverse_iterate(BitMapClosureType* cl, idx_t beg, idx_t end) const {\n+  auto function = [&](idx_t index) { return cl->do_bit(index); };\n+  return reverse_iterate(function, beg, end);\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/bitMap.inline.hpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -62,0 +62,34 @@\n+static void test_reverse_iterate_lambda(const BitMap& map,\n+                                        const idx_t* positions,\n+                                        size_t positions_size) {\n+  SCOPED_TRACE(\"reverse iterate with lambda\");\n+  size_t positions_index = positions_size;\n+  auto f = [&](idx_t i) {\n+    test_iterate_step(map, i, positions, --positions_index, positions_size);\n+  };\n+  ASSERT_TRUE(map.reverse_iterate(f));\n+  ASSERT_EQ(positions_index, 0u);\n+}\n+\n+\n+struct TestBitMapIterationData {\n+  const BitMap& _map;\n+  const idx_t* _positions;\n+  size_t _positions_index;\n+  size_t _positions_size;\n+\n+  TestBitMapIterationData(const BitMap& map,\n+                          const idx_t* positions,\n+                          size_t positions_index,\n+                          size_t positions_size)\n+    : _map(map),\n+      _positions(positions),\n+      _positions_index(positions_index),\n+      _positions_size(positions_size)\n+  {}\n+\n+  void test(idx_t index) const {\n+    test_iterate_step(_map, index, _positions, _positions_index, _positions_size);\n+  }\n+};\n+\n@@ -68,4 +102,1 @@\n-    const BitMap& _map;\n-    const idx_t* _positions;\n-    size_t _positions_index;\n-    size_t _positions_size;\n+    TestBitMapIterationData _data;\n@@ -74,4 +105,1 @@\n-      : _map(map),\n-        _positions(positions),\n-        _positions_index(0),\n-        _positions_size(positions_size)\n+      : _data(map, positions, 0, positions_size)\n@@ -81,1 +109,2 @@\n-      test_iterate_step(_map, i, _positions, _positions_index++, _positions_size);\n+      _data.test(i);\n+      _data._positions_index += 1;\n@@ -86,1 +115,22 @@\n-  ASSERT_EQ(closure._positions_index, positions_size);\n+  ASSERT_EQ(closure._data._positions_index, positions_size);\n+}\n+\n+static void test_reverse_iterate_closure(const BitMap& map,\n+                                         const idx_t* positions,\n+                                         size_t positions_size) {\n+  SCOPED_TRACE(\"reverse iterate with BitMapClosure\");\n+  struct Closure : public BitMapClosure {\n+    TestBitMapIterationData _data;\n+\n+    Closure(const BitMap& map, const idx_t* positions, size_t positions_size)\n+      : _data(map, positions, positions_size, positions_size)\n+    {}\n+\n+    bool do_bit(idx_t i) override {\n+      _data._positions_index -= 1;\n+      _data.test(i);\n+      return true;\n+    }\n+  } closure{map, positions, positions_size};\n+  ASSERT_TRUE(map.reverse_iterate(&closure));\n+  ASSERT_EQ(closure._data._positions_index, 0u);\n@@ -95,5 +145,1 @@\n-    const BitMap& _map;\n-    const idx_t* _positions;\n-    size_t _positions_index;\n-    size_t _positions_size;\n-\n+    TestBitMapIterationData _data;\n@@ -101,4 +147,1 @@\n-      : _map(map),\n-        _positions(positions),\n-        _positions_index(0),\n-        _positions_size(positions_size)\n+      : _data(map, positions, 0, positions_size)\n@@ -108,1 +151,2 @@\n-      test_iterate_step(_map, i, _positions, _positions_index++, _positions_size);\n+      _data.test(i);\n+      _data._positions_index += 1;\n@@ -112,1 +156,20 @@\n-  ASSERT_EQ(closure._positions_index, positions_size);\n+  ASSERT_EQ(closure._data._positions_index, positions_size);\n+}\n+\n+static void test_reverse_iterate_non_closure(const BitMap& map,\n+                                             const idx_t* positions,\n+                                             size_t positions_size) {\n+  SCOPED_TRACE(\"reverse iterate with non-BitMapClosure\");\n+  struct Closure {\n+    TestBitMapIterationData _data;\n+    Closure(const BitMap& map, const idx_t* positions, size_t positions_size)\n+      : _data(map, positions, positions_size, positions_size)\n+    {}\n+\n+    void do_bit(idx_t i) {\n+      _data._positions_index -= 1;\n+      _data.test(i);\n+    }\n+  } closure{map, positions, positions_size};\n+  ASSERT_TRUE(map.reverse_iterate(&closure));\n+  ASSERT_EQ(closure._data._positions_index, 0u);\n@@ -128,0 +191,1 @@\n+\n@@ -131,0 +195,4 @@\n+\n+  test_reverse_iterate_lambda(map, positions, positions_size);\n+  test_reverse_iterate_closure(map, positions, positions_size);\n+  test_reverse_iterate_non_closure(map, positions, positions_size);\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap_iterate.cpp","additions":89,"deletions":21,"binary":false,"changes":110,"status":"modified"}]}