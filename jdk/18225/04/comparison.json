{"files":[{"patch":"@@ -33,0 +33,1 @@\n+ * @modules java.base\/jdk.internal.platform\n@@ -47,0 +48,1 @@\n+import jdk.internal.platform.Metrics;\n@@ -55,0 +57,1 @@\n+    private static boolean isCgroupV1 = false;\n@@ -62,0 +65,8 @@\n+        \/\/ If cgroups is not configured, report success.\n+        Metrics metrics = Metrics.systemMetrics();\n+        if (metrics == null) {\n+            System.out.println(\"TEST PASSED!!!\");\n+            return;\n+        }\n+        isCgroupV1 = \"cgroupv1\".equals(metrics.getProvider());\n+\n@@ -220,6 +231,10 @@\n-         OutputAnalyzer out = DockerTestUtils.dockerRunJava(\n-                                      commonDockerOpts()\n-                                      .addDockerOpts(\"--memory=\" + memValueToSet)\n-                                      .addDockerOpts(\"--memory-swap=\" + swapValueToSet)\n-                                      .addClassOptions(\"jdk.SwapSpace\"));\n-         out.shouldHaveExitValue(0)\n+        DockerRunOptions opts = commonDockerOpts();\n+        opts.addDockerOpts(\"--memory=\" + memValueToSet)\n+            .addDockerOpts(\"--memory-swap=\" + swapValueToSet)\n+            .addClassOptions(\"jdk.SwapSpace\");\n+        if (isCgroupV1) {\n+            \/\/ With Cgroupv1, The default memory-swappiness vaule is inherited from the host machine, which maybe 0\n+            opts.addDockerOpts(\"--memory-swappiness=60\");\n+        }\n+        OutputAnalyzer out = DockerTestUtils.dockerRunJava(opts);\n+        out.shouldHaveExitValue(0)\n@@ -228,18 +243,18 @@\n-         List<String> ls = out.asLinesWithoutVMWarnings();\n-         for (String cur : ls) {\n-             int idx = cur.indexOf(\"freeSize = \");\n-             if (idx != -1) {\n-                 int startNbr = idx+11;\n-                 int endNbr = cur.indexOf(' ', startNbr);\n-                 if (endNbr == -1) endNbr = cur.length();\n-                 String freeSizeStr = cur.substring(startNbr, endNbr);\n-                 long freeval = Long.parseLong(freeSizeStr);\n-                 long totalval = Long.parseLong(expectedTotalValue);\n-                 if (0 <= freeval && freeval <= totalval) {\n-                     System.out.println(\"Found freeSize value \" + freeval + \" is fine\");\n-                 } else {\n-                     System.out.println(\"Found freeSize value \" + freeval + \" is bad\");\n-                     throw new Exception(\"Found free size value is bad\");\n-                 }\n-             }\n-         }\n+        List<String> ls = out.asLinesWithoutVMWarnings();\n+        for (String cur : ls) {\n+            int idx = cur.indexOf(\"freeSize = \");\n+            if (idx != -1) {\n+                int startNbr = idx+11;\n+                int endNbr = cur.indexOf(' ', startNbr);\n+                if (endNbr == -1) endNbr = cur.length();\n+                String freeSizeStr = cur.substring(startNbr, endNbr);\n+                long freeval = Long.parseLong(freeSizeStr);\n+                long totalval = Long.parseLong(expectedTotalValue);\n+                if (0 <= freeval && freeval <= totalval) {\n+                    System.out.println(\"Found freeSize value \" + freeval + \" is fine\");\n+                } else {\n+                    System.out.println(\"Found freeSize value \" + freeval + \" is bad\");\n+                    throw new Exception(\"Found free size value is bad\");\n+                }\n+            }\n+        }\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJFREvents.java","additions":39,"deletions":24,"binary":false,"changes":63,"status":"modified"}]}