{"files":[{"patch":"@@ -2201,6 +2201,4 @@\n-\/\/ these operations must happen atomically to avoid races. For example, if Thread_1 were to uncommit a region, but\n-\/\/ before Thread_1 can update NMT accounting, Thead_2 commits overlapping the same region and updates NMT,\n-\/\/ then Thread_1 finishes updating NMT. This would result in NMT perceiving part of the region being uncommited,\n-\/\/ when it is actually committed. The opposite scenario is not guarded against. pd_commit_memory and\n-\/\/ record_virtual_memory_commit do not happen atomically. We assume that there is some external synchronization\n-\/\/ that prevents a region from being uncommitted before it is finished being committed.\n+\/\/ these operations must happen atomically to avoid races causing NMT to fall out os sync with the OS reality.\n+\/\/ We do not have the same lock protection for pd_commit_memory and record_virtual_memory_commit.\n+\/\/ We assume that there is some external synchronization that prevents a region from being uncommitted\n+\/\/ before it is finished being committed.\n@@ -2230,6 +2228,4 @@\n-\/\/ these operations must happen atomically to avoid races. For example, Thread_1 releases a range, but before\n-\/\/ Thread_1 can update NMT accounting, Thread_2 reserves the same range and accounts it with NMT,\n-\/\/ then Thread_1 finishes updating NMT.  This would cause NMT to perceive the range as released, when it is\n-\/\/ actually reserved. The opposite scenario is not guarded against. pd_reserve_memory and\n-\/\/ record_virtual_memory_reserve do not happen atomically. We assume that there is some external synchronization\n-\/\/ that prevents a region from being released before it is finished being reserved.\n+\/\/ these operations must happen atomically to avoid races causing NMT to fall out os sync with the OS reality.\n+\/\/ We do not have the same lock protection for pd_reserve_memory and record_virtual_memory_reserve.\n+\/\/ We assume that there is some external synchronization that prevents a region from being released\n+\/\/ before it is finished being reserved.\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"testutils.hpp\"\n@@ -1144,4 +1145,2 @@\n-  EXPECT_TRUE(result != nullptr);\n-\n-  EXPECT_TRUE(strcmp(letters, result) == 0);\n-\n+  ASSERT_NOT_NULL(result);\n+  EXPECT_EQ(strcmp(letters, result), 0);\n@@ -1163,2 +1162,2 @@\n-  EXPECT_TRUE(result != nullptr);\n-  EXPECT_TRUE(strcmp(letters, result) == 0);\n+  ASSERT_NOT_NULL(result);\n+  EXPECT_EQ(strcmp(letters, result), 0);\n@@ -1178,4 +1177,2 @@\n-  EXPECT_TRUE(result != nullptr);\n-\n-  EXPECT_TRUE(strcmp(letters, result) == 0);\n-\n+  ASSERT_NOT_NULL(result);\n+  EXPECT_EQ(strcmp(letters, result), 0);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"}]}