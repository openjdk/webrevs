{"files":[{"patch":"@@ -2200,0 +2200,5 @@\n+\/\/ The scope of NmtVirtualMemoryLocker covers both pd_uncommit_memory and record_virtual_memory_uncommit because\n+\/\/ these operations must happen atomically to avoid races causing NMT to fall out os sync with the OS reality.\n+\/\/ We do not have the same lock protection for pd_commit_memory and record_virtual_memory_commit.\n+\/\/ We assume that there is some external synchronization that prevents a region from being uncommitted\n+\/\/ before it is finished being committed.\n@@ -2222,0 +2227,5 @@\n+\/\/ The scope of NmtVirtualMemoryLocker covers both pd_release_memory and record_virtual_memory_release because\n+\/\/ these operations must happen atomically to avoid races causing NMT to fall out os sync with the OS reality.\n+\/\/ We do not have the same lock protection for pd_reserve_memory and record_virtual_memory_reserve.\n+\/\/ We assume that there is some external synchronization that prevents a region from being released\n+\/\/ before it is finished being reserved.\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"testutils.hpp\"\n@@ -1116,0 +1117,67 @@\n+\n+TEST_VM(os, commit_memory_or_exit) {\n+  const size_t page_sz = os::vm_page_size();\n+  const size_t size = 16 * page_sz;\n+  const char* letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+\n+  char* base = os::reserve_memory(size, false, mtTest);\n+  ASSERT_NOT_NULL(base);\n+  os::commit_memory_or_exit(base, size, false, \"Commit failed.\");\n+  strcpy(base, letters);\n+  ASSERT_TRUE(os::uncommit_memory(base, size, false));\n+  os::commit_memory_or_exit(base, size, page_sz, false, \"Commit with alignment hint failed.\");\n+  strcpy(base, letters);\n+  ASSERT_TRUE(os::uncommit_memory(base, size, false));\n+  EXPECT_TRUE(os::release_memory(base, size));\n+}\n+\n+#if !defined(_AIX)\n+\n+TEST_VM(os, map_memory_to_file) {\n+  const char* letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+  const size_t size = strlen(letters) +1;\n+\n+  int fd = os::open(\"map_memory_to_file.txt\", O_RDWR | O_CREAT, 0666);\n+  EXPECT_TRUE(fd > 0);\n+  EXPECT_TRUE(os::write(fd, letters, size));\n+\n+  char* result = os::map_memory_to_file(size, fd, mtTest);\n+  ASSERT_NOT_NULL(result);\n+  EXPECT_EQ(strcmp(letters, result), 0);\n+  EXPECT_TRUE(os::unmap_memory(result, size));\n+  ::close(fd);\n+}\n+\n+TEST_VM(os, map_unmap_memory) {\n+  const char* letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+  const char* path = \"map_unmap_memory.txt\";\n+  const size_t size = strlen(letters) + 1;\n+  int fd = os::open(path, O_RDWR | O_CREAT, 0666);\n+  EXPECT_TRUE(fd > 0);\n+  EXPECT_TRUE(os::write(fd, letters, size));\n+  ::close(fd);\n+\n+  fd = os::open(path, O_RDONLY, 0666);\n+  char* result = os::map_memory(fd, path, 0, nullptr, size, true, false, mtTest);\n+  ASSERT_NOT_NULL(result);\n+  EXPECT_EQ(strcmp(letters, result), 0);\n+  EXPECT_TRUE(os::unmap_memory(result, size));\n+  ::close(fd);\n+}\n+\n+TEST_VM(os, map_memory_to_file_aligned) {\n+  const char* letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n+  const size_t size = strlen(letters) + 1;\n+\n+  int fd = os::open(\"map_memory_to_file.txt\", O_RDWR | O_CREAT, 0666);\n+  EXPECT_TRUE(fd > 0);\n+  EXPECT_TRUE(os::write(fd, letters, size));\n+\n+  char* result = os::map_memory_to_file_aligned(os::vm_allocation_granularity(), os::vm_allocation_granularity(), fd, mtTest);\n+  ASSERT_NOT_NULL(result);\n+  EXPECT_EQ(strcmp(letters, result), 0);\n+  EXPECT_TRUE(os::unmap_memory(result, os::vm_allocation_granularity()));\n+  ::close(fd);\n+}\n+\n+#endif \/\/ !defined(_AIX)\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":68,"deletions":0,"binary":false,"changes":68,"status":"modified"}]}