{"files":[{"patch":"@@ -280,3 +280,3 @@\n-\n-  if (is_power_of_2(c - 1)) {\n-    __ shift_left(left, exact_log2(c - 1), tmp);\n+  juint u_value = (juint)c;\n+  if (is_power_of_2(u_value - 1)) {\n+    __ shift_left(left, exact_log2(u_value - 1), tmp);\n@@ -285,2 +285,2 @@\n-  } else if (is_power_of_2(c + 1)) {\n-    __ shift_left(left, exact_log2(c + 1), tmp);\n+  } else if (is_power_of_2(u_value + 1)) {\n+    __ shift_left(left, exact_log2(u_value + 1), tmp);\n@@ -289,2 +289,3 @@\n-  } else {\n-    return false;\n+  } else if (c == -1) {\n+    __ negate(left, result);\n+    return true;\n@@ -292,0 +293,1 @@\n+  return false;\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -331,2 +331,3 @@\n-  if (is_power_of_2(c + 1)) {\n-    LIR_Address::Scale scale = (LIR_Address::Scale) log2i_exact(c + 1);\n+  juint u_value = (juint)c;\n+  if (is_power_of_2(u_value + 1)) {\n+    LIR_Address::Scale scale = (LIR_Address::Scale) log2i_exact(u_value + 1);\n@@ -336,2 +337,2 @@\n-  } else if (is_power_of_2(c - 1)) {\n-    LIR_Address::Scale scale = (LIR_Address::Scale) log2i_exact(c - 1);\n+  } else if (is_power_of_2(u_value - 1)) {\n+    LIR_Address::Scale scale = (LIR_Address::Scale) log2i_exact(u_value - 1);\n@@ -341,0 +342,3 @@\n+  } else if (c == -1) {\n+    __ negate(left, result);\n+    return true;\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -299,2 +299,5 @@\n-  if (is_power_of_2(c + 1)) {\n-    __ shift_left(left, log2i_exact(c + 1), result);\n+  \/\/ Using unsigned arithmetics to avoid undefined behavior due to integer overflow.\n+  \/\/ The involved operations are not sensitive to signedness.\n+  juint u_value = (juint)c;\n+  if (is_power_of_2(u_value + 1)) {\n+    __ shift_left(left, log2i_exact(u_value + 1), result);\n@@ -303,2 +306,2 @@\n-  } else if (is_power_of_2(c - 1)) {\n-    __ shift_left(left, log2i_exact(c - 1), result);\n+  } else if (is_power_of_2(u_value - 1)) {\n+    __ shift_left(left, log2i_exact(u_value - 1), result);\n@@ -307,0 +310,3 @@\n+  } else if (c == -1) {\n+    __ negate(left, result);\n+    return true;\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -230,0 +230,1 @@\n+  juint u_value = (juint)c;\n@@ -231,1 +232,1 @@\n-    if (is_power_of_2(c + 1)) {\n+    if (is_power_of_2(u_value + 1)) {\n@@ -233,1 +234,1 @@\n-      __ shift_left(left, log2i_exact(c + 1), left);\n+      __ shift_left(left, log2i_exact(u_value + 1), left);\n@@ -236,1 +237,1 @@\n-    } else if (is_power_of_2(c - 1)) {\n+    } else if (is_power_of_2(u_value - 1)) {\n@@ -238,1 +239,1 @@\n-      __ shift_left(left, log2i_exact(c - 1), left);\n+      __ shift_left(left, log2i_exact(u_value - 1), left);\n@@ -243,0 +244,5 @@\n+\n+  if (c == -1) {\n+    __ negate(left, result);\n+    return true;\n+  }\n@@ -499,2 +505,2 @@\n-        int iconst = right_arg->get_jint_constant();\n-        if (is_power_of_2(iconst - 1) || is_power_of_2(iconst + 1)) {\n+        juint u_const = (juint)right_arg->get_jint_constant();\n+        if (is_power_of_2(u_const - 1) || is_power_of_2(u_const + 1)) {\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2024 IBM Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @author Amit Kumar\n+ * @bug 8344026\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xcomp -Xbatch -XX:TieredStopAtLevel=1 compiler.c1.StrengthReduceCheck\n+ *\/\n+\n+package compiler.c1;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class StrengthReduceCheck {\n+\n+    static int test1(int x) {\n+        \/\/ Multiply by 2 ^ 30 - 1\n+        x = x * 1073741823;\n+        return x;\n+    }\n+\n+    static int test2(int x) {\n+        \/\/ Multiply by 2 ^ 30 + 1\n+        x = x * 1073741825;\n+        return x;\n+    }\n+\n+    static int test3(int x) {\n+        \/\/ Multiply by INT_MIN\n+        x = x * -2147483648;\n+        return x;\n+    }\n+\n+    static int test4(int x) {\n+        x = x * -1;\n+        return x;\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i =0; i < 1000; ++i) {\n+            Asserts.assertEQ(test1(26071999), -1099813823);\n+            Asserts.assertEQ(test2(26071999), -1047669825);\n+            Asserts.assertEQ(test3(26071999), -2147483648);\n+            Asserts.assertEQ(test4(26071999), -26071999);\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/StrengthReduceCheck.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}