{"files":[{"patch":"@@ -1320,7 +1320,0 @@\n-        \/\/ TAB\/SHIFT-TAB should transfer focus and ENTER should select an item.\n-        \/\/ We don't want them to navigate within the table\n-        ActionMap am = SwingUtilities.getUIActionMap(detailsTable);\n-        am.remove(\"selectNextRowCell\");\n-        am.remove(\"selectPreviousRowCell\");\n-        am.remove(\"selectNextColumnCell\");\n-        am.remove(\"selectPreviousColumnCell\");\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/FilePane.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Point;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.AbstractButton;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.JTable;\n+import javax.swing.JToggleButton;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+import javax.swing.UIManager;\n+import javax.swing.table.DefaultTableModel;\n+\n+import java.util.function.Predicate;\n+\n+\/*\n+ * @test\n+ * @bug 6967482\n+ * @key headful\n+ * @summary Test to check if TAB is working on JTable after JFileChooser is\n+ *          closed\n+ * @run main TABTestONFCExit\n+ *\/\n+\n+public class TABTestONFCExit {\n+    private static JTable table = null;\n+    private static JFileChooser fc;\n+    private static JFrame frame;\n+    private static Robot robot;\n+    private static volatile Point loc;\n+    private static volatile Rectangle rect;\n+    private static volatile int selectedColumnBeforeTabPress;\n+    private static volatile int selectedColumnAfterTabPress;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(50);\n+        UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n+        try {\n+            SwingUtilities.invokeAndWait(TABTestONFCExit::initialize);\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            SwingUtilities.invokeAndWait(TABTestONFCExit::clickDetails);\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                loc = table.getLocationOnScreen();\n+                rect = table.getCellRect(0, 0, true);\n+            });\n+\n+            onClick(loc, rect);\n+\n+            SwingUtilities.invokeAndWait(() ->\n+                    selectedColumnBeforeTabPress = table.getSelectedColumn());\n+\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            SwingUtilities.invokeAndWait(() ->\n+                    selectedColumnAfterTabPress = table.getSelectedColumn());\n+            robot.waitForIdle();\n+            robot.delay(100);\n+\n+            if (selectedColumnAfterTabPress == selectedColumnBeforeTabPress) {\n+                throw new RuntimeException(\"TAB failed to move cell!\");\n+            }\n+            System.out.println(\"Test Passed\" );\n+\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void onClick(Point loc, Rectangle cellRect) {\n+        robot.mouseMove(loc.x + cellRect.x + cellRect.width \/ 2,\n+                loc.y + cellRect.y + cellRect.height \/ 2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle();\n+        robot.delay(100);\n+    }\n+\n+    private static void initialize() {\n+        frame = new JFrame(\"Tab Test\");\n+        fc = new JFileChooser();\n+        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        frame.add(getJTable(), BorderLayout.NORTH);\n+        frame.add(fc, BorderLayout.SOUTH);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    private static JTable getJTable() {\n+        if (table == null) {\n+            table = new JTable();\n+            table.setModel(new DefaultTableModel(5, 5));\n+        }\n+        return table;\n+    }\n+    private static void clickDetails() {\n+        AbstractButton details = findDetailsButton(fc);\n+        if (details == null) {\n+            throw new Error(\"Couldn't find 'Details' button in JFileChooser\");\n+        }\n+        details.doClick();\n+    }\n+\n+    private static AbstractButton findDetailsButton(final Container container) {\n+        Component result = findComponent(container,\n+                c -> c instanceof JToggleButton button\n+                        && \"Details\".equals(button.getToolTipText()));\n+        return (AbstractButton) result;\n+    }\n+\n+    private static Component findComponent(final Container container,\n+                                           final Predicate<Component> predicate) {\n+        for (Component child : container.getComponents()) {\n+            if (predicate.test(child)) {\n+                return child;\n+            }\n+            if (child instanceof Container cont && cont.getComponentCount() > 0) {\n+                Component result = findComponent(cont, predicate);\n+                if (result != null) {\n+                    return result;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/TABTestONFCExit.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"}]}