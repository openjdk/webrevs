{"files":[{"patch":"@@ -1582,0 +1582,5 @@\n+    \/\/ Avoid Thread.yield() loops without safepoint polls (see 8335269).\n+    if (SafepointMechanism::should_process(current)) {\n+      cont.done(); \/\/ allow safepoint\n+      ThreadInVMfromJava tivmfj(current);\n+    }\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=default\n+ * @bug 8335269\n+ * @summary Test that Thread.yield loop polls for safepoints\n+ * @requires vm.continuations\n+ * @library \/test\/lib\n+ * @run junit\/othervm ThreadYield\n+ *\/\n+\n+\/*\n+ * @test id=c2\n+ * @bug 8335269\n+ * @summary Test that Thread.yield loop polls for safepoints\n+ * @requires vm.continuations\n+ * @library \/test\/lib\n+ * @run junit\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileCommand=inline,*::yield* -XX:CompileCommand=inline,*::*Yield ThreadYield\n+ *\/\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import jdk.test.lib.thread.VThreadPinner;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ThreadYield {\n+    static void foo(AtomicBoolean done) {\n+        while (!done.get()) {\n+            Thread.yield();\n+        }\n+    }\n+\n+    @Test\n+    void testThreadYieldPolls() throws Exception {\n+        AtomicBoolean done = new AtomicBoolean();\n+        var vthread = Thread.ofVirtual().start(() -> {\n+            VThreadPinner.runPinned(() -> foo(done));\n+        });\n+        Thread.sleep(5000);\n+        done.set(true);\n+        vthread.join();\n+\n+        System.out.println(\"First vthread done\");\n+\n+        AtomicBoolean done2 = new AtomicBoolean();\n+        vthread = Thread.ofVirtual().start(() -> {\n+            VThreadPinner.runPinned(() -> foo(done2));\n+        });\n+        long start = System.currentTimeMillis();\n+        while (System.currentTimeMillis() - start < 5000) {\n+            Thread.sleep(250);\n+            System.gc();\n+        }\n+        done2.set(true);\n+        vthread.join();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadYield.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}