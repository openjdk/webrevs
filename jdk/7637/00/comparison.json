{"files":[{"patch":"@@ -150,0 +150,11 @@\n+    \/**\n+     * {@return {@code true} if this is a kind of declared type, a\n+     * {@linkplain #isClass() class} or an {@linkplain #isInterface()\n+     * interface}, and {@code false} otherwise}\n+     *\n+     * @since 19\n+     *\/\n+    public boolean isDeclaredType() {\n+        return isClass() || isInterface();\n+    }\n+\n@@ -159,0 +170,46 @@\n+\n+    \/**\n+     * Returns {@code true} if this is a kind of executable: either\n+     * {@code METHOD} or {@code CONSTRUCTOR} or {@code STATIC_INIT} or\n+     * {@code INSTANCE_INIT}.\n+     *\n+     * @return {@code true} if this is a kind of executable\n+     * @since 19\n+     *\/\n+    public boolean isExecutable() {\n+        return switch(this) {\n+        case METHOD, CONSTRUCTOR, STATIC_INIT, INSTANCE_INIT -> true;\n+        default -> false;\n+        };\n+    }\n+\n+    \/**\n+     * Returns {@code true} if this is a kind of initializer: either\n+     * {@code STATIC_INIT} or {@code INSTANCE_INIT}.\n+     *\n+     * @return {@code true} if this is a kind of initializer\n+     * @since 19\n+     *\/\n+    public boolean isInitializer() {\n+        return switch(this) {\n+        case STATIC_INIT, INSTANCE_INIT -> true;\n+        default -> false;\n+        };\n+    }\n+    \/**\n+     * Returns {@code true} if this is a kind of variable: including\n+     * {@code ENUM_CONSTANT}, {@code FIELD}, {@code PARAMETER},\n+     * {@code LOCAL_VARIABLE}, {@code EXCEPTION_PARAMETER},\n+     * {@code RESOURCE_VARIABLE}, and {@code BINDING_VARIABLE}.\n+     *\n+     * @return {@code true} if this is a kind of variable\n+     * @since 19\n+     *\/\n+    public boolean isVariable() {\n+        return switch(this) {\n+        case ENUM_CONSTANT, FIELD, PARAMETER,\n+             LOCAL_VARIABLE, EXCEPTION_PARAMETER, RESOURCE_VARIABLE,\n+             BINDING_VARIABLE -> true;\n+        default -> false;\n+        };\n+    }\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ElementKind.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8222430\n+ * @bug 8222430 8282411\n@@ -41,1 +41,1 @@\n-        \/\/ isClass: Returns true if this is a kind of class: either CLASS or ENUM.\n+        \/\/ isClass: Returns true if this is a kind of class:CLASS, ENUM, or RECORD.\n@@ -48,1 +48,2 @@\n-        \/\/ isField: Returns true if this is a kind of field: either FIELD or ENUM_CONSTANT.\n+        \/\/ isField: Returns true if this is a kind of field: one of\n+        \/\/ FIELD or ENUM_CONSTANT.\n@@ -54,1 +55,2 @@\n-        \/\/ isInterface: Returns true if this is a kind of interface: either INTERFACE or ANNOTATION_TYPE.\n+        \/\/ isInterface: Returns true if this is a kind of interface:\n+        \/\/ either INTERFACE or ANNOTATION_TYPE.\n@@ -59,0 +61,38 @@\n+\n+        \/\/ isDeclaredType: Returns true if this is a kind of class or interface\n+        test(ALL_KINDS,\n+             (ElementKind k) -> Set.of(ElementKind.CLASS,\n+                                       ElementKind.ENUM,\n+                                       ElementKind.RECORD,\n+                                       ElementKind.INTERFACE,\n+                                       ElementKind.ANNOTATION_TYPE).contains(k),\n+             (ElementKind k) -> k.isDeclaredType(), \"isDeclaredType\");\n+\n+        \/\/ isExecutable: Returns true if this is a kind of executable: one of\n+        \/\/ METHOD, CONSTRUCTOR, STATIC_INIT, INSTANCE_INIT\n+        test(ALL_KINDS,\n+             (ElementKind k) -> Set.of(ElementKind.METHOD,\n+                                       ElementKind.CONSTRUCTOR,\n+                                       ElementKind.STATIC_INIT,\n+                                       ElementKind.INSTANCE_INIT).contains(k),\n+             (ElementKind k) -> k.isExecutable(), \"isExecutable\");\n+\n+        \/\/ isInitializer: Returns true if this is a kind of initializer: one of\n+        \/\/ STATIC_INIT, INSTANCE_INIT\n+        test(ALL_KINDS,\n+             (ElementKind k) -> Set.of(ElementKind.STATIC_INIT,\n+                                       ElementKind.INSTANCE_INIT).contains(k),\n+             (ElementKind k) -> k.isInitializer(), \"isInitializer\");\n+\n+        \/\/ isVariable: Returns true if this is a kind of variable: one of\n+        \/\/ ENUM_CONSTANT, FIELD, PARAMETER, LOCAL_VARIABLE, EXCEPTION_PARAMETER\n+        \/\/ RESOURCE_VARIABLE, BINDING_VARIABLE\n+        test(ALL_KINDS,\n+             (ElementKind k) -> Set.of(ElementKind.ENUM_CONSTANT,\n+                                       ElementKind.FIELD,\n+                                       ElementKind.PARAMETER,\n+                                       ElementKind.LOCAL_VARIABLE,\n+                                       ElementKind.EXCEPTION_PARAMETER,\n+                                       ElementKind.RESOURCE_VARIABLE,\n+                                       ElementKind.BINDING_VARIABLE).contains(k),\n+             (ElementKind k) -> k.isVariable(), \"isVariable\");\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestElementKindPredicates.java","additions":45,"deletions":5,"binary":false,"changes":50,"status":"modified"}]}