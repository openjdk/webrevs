{"files":[{"patch":"@@ -607,1 +607,1 @@\n-            dp = decodeUTF8_UTF16(latin1, sp, length, utf16, dp, true);\n+            dp = decodeUTF8_UTF16(latin1, sp, length, utf16, dp);\n@@ -614,1 +614,1 @@\n-            int dp = decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0, true);\n+            int dp = decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0);\n@@ -692,3 +692,14 @@\n-     * Throws iae, instead of replacing, if malformed or unmappable.\n-     * The byte array can be exclusively used to construct\n-     * the string and is not modified or used for any other purpose.\n+     * {@return a new string by decoding from the given UTF-8 bytes array}\n+     * <p>\n+     * <b>WARNING: The caller of this method is assumed to have relinquished\n+     * and transferred the ownership of the byte array<\/b>. It can thus be\n+     * exclusively used to construct the {@code String}.\n+     *\n+     * @param bytes byte array containing UTF-8 encoded characters\n+     * @param offset the index of the first byte to decode\n+     * @param length the number of bytes to decode\n+     * @throws NullPointerException If {@code bytes} is null\n+     * @throws StringIndexOutOfBoundsException If {@code offset} is negative,\n+     *         {@code length} is negative, or {@code offset} is greater than\n+     *         {@code bytes.length - length}\n+     * @throws CharacterCodingException for malformed input or unmappable characters\n@@ -696,2 +707,3 @@\n-    private static String newStringUTF8NoRepl(byte[] bytes, int offset, int length) {\n-        checkBoundsOffCount(offset, length, bytes.length);\n+    private static String newStringUTF8OrThrow(byte[] bytes, int offset, int length)\n+            throws CharacterCodingException {\n+        checkBoundsOffCount(offset, length, bytes.length);  \/\/ Implicit null check on `bytes`\n@@ -748,1 +760,1 @@\n-            dp = decodeUTF8_UTF16(bytes, offset, sl, dst, dp, false);\n+            dp = decodeUTF8_UTF16OrThrow(bytes, offset, sl, dst, dp);\n@@ -751,1 +763,1 @@\n-            dp = decodeUTF8_UTF16(bytes, offset, offset + length, dst, 0, false);\n+            dp = decodeUTF8_UTF16OrThrow(bytes, offset, offset + length, dst, 0);\n@@ -787,14 +799,1 @@\n-    static String newStringNoRepl(byte[] src, Charset cs) throws CharacterCodingException {\n-        try {\n-            return newStringNoRepl1(src, cs);\n-        } catch (IllegalArgumentException e) {\n-            \/\/newStringNoRepl1 throws IAE with MalformedInputException or CCE as the cause\n-            Throwable cause = e.getCause();\n-            if (cause instanceof MalformedInputException mie) {\n-                throw mie;\n-            }\n-            throw (CharacterCodingException)cause;\n-        }\n-    }\n-\n-    private static String newStringNoRepl1(byte[] src, Charset cs) {\n+    static String newStringOrThrow(byte[] src, Charset cs) throws CharacterCodingException {\n@@ -806,1 +805,1 @@\n-            return newStringUTF8NoRepl(src, 0, src.length);\n+            return newStringUTF8OrThrow(src, 0, src.length);\n@@ -819,1 +818,1 @@\n-                throwMalformed(src);\n+                throw malformedASCII(src);\n@@ -834,7 +833,1 @@\n-        int caLen;\n-        try {\n-            caLen = decodeWithDecoder(cd, ca, src, 0, src.length);\n-        } catch (CharacterCodingException x) {\n-            \/\/ throw via IAE\n-            throw new IllegalArgumentException(x);\n-        }\n+        int caLen = decodeWithDecoder(cd, ca, src, 0, src.length);\n@@ -877,1 +870,1 @@\n-            return encodeUTF8(coder, val, true);\n+            return encodeUTF8(coder, val);\n@@ -885,1 +878,1 @@\n-        return encodeWithEncoder(cs, coder, val, true);\n+        return encodeWithEncoder(cs, coder, val, null);\n@@ -888,1 +881,17 @@\n-    private static byte[] encodeWithEncoder(Charset cs, byte coder, byte[] val, boolean doReplace) {\n+    \/**\n+     * {@return the byte array obtained by first decoding {@code val} with\n+     * {@code coder}, and then encoding the result with the encoder of {@code\n+     * cs}}\n+     *\n+     * @param cs a charset to obtain the encoder from\n+     * @param coder a coder to decode {@code val} with\n+     * @param val a string byte array encoded with {@code coder}\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting replaced.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n+    private static <E extends Exception> byte[] encodeWithEncoder(\n+            Charset cs, byte coder, byte[] val, Class<E> exClass)\n+            throws E {\n@@ -892,0 +901,1 @@\n+        boolean doReplace = exClass == null;\n@@ -933,1 +943,3 @@\n-                throw new IllegalArgumentException(x);\n+                @SuppressWarnings(\"unchecked\")\n+                E cce = (E) x;\n+                throw cce;\n@@ -941,2 +953,6 @@\n-    \/*\n-     * Throws iae, instead of replacing, if unmappable.\n+    \/**\n+     * {@return the sequence of bytes obtained by encoding the given string in UTF-8}\n+     *\n+     * @param s the string to encode\n+     * @throws NullPointerException If {@code s} is null\n+     * @throws CharacterCodingException For malformed input or unmappable characters\n@@ -944,2 +960,2 @@\n-    static byte[] getBytesUTF8NoRepl(String s) {\n-        return encodeUTF8(s.coder(), s.value(), false);\n+    static byte[] getBytesUTF8OrThrow(String s) throws CharacterCodingException {\n+        return encodeUTF8OrThrow(s.coder(), s.value());  \/\/ Implicit null check on `s`\n@@ -952,2 +968,12 @@\n-    \/*\n-     * Throws CCE, instead of replacing, if unmappable.\n+    \/**\n+     * {@return the sequence of bytes obtained by encoding the given string in\n+     * the specified {@code Charset}}\n+     * <p>\n+     * <b>WARNING: This method returns the {@code byte[]} backing the provided\n+     * {@code String}, if the input is ASCII. Hence, the returned byte array\n+     * must not be modified.<\/b>\n+     *\n+     * @param s the string to encode\n+     * @param cs the charset\n+     * @throws NullPointerException If {@code s} or {@code cs} is null\n+     * @throws CharacterCodingException For malformed input or unmappable characters\n@@ -955,15 +981,3 @@\n-    static byte[] getBytesNoRepl(String s, Charset cs) throws CharacterCodingException {\n-        try {\n-            return getBytesNoRepl1(s, cs);\n-        } catch (IllegalArgumentException e) {\n-            \/\/getBytesNoRepl1 throws IAE with UnmappableCharacterException or CCE as the cause\n-            Throwable cause = e.getCause();\n-            if (cause instanceof UnmappableCharacterException) {\n-                throw (UnmappableCharacterException)cause;\n-            }\n-            throw (CharacterCodingException)cause;\n-        }\n-    }\n-\n-    private static byte[] getBytesNoRepl1(String s, Charset cs) {\n-        byte[] val = s.value();\n+    static byte[] getBytesOrThrow(String s, Charset cs) throws CharacterCodingException {\n+        Objects.requireNonNull(cs);\n+        byte[] val = s.value();     \/\/ Implicit null check on `s`\n@@ -975,1 +989,1 @@\n-            return encodeUTF8(coder, val, false);\n+            return encodeUTF8OrThrow(coder, val);\n@@ -981,1 +995,1 @@\n-            return encode8859_1(coder, val, false);\n+            return encode8859_1OrThrow(coder, val);\n@@ -988,1 +1002,1 @@\n-                    throwUnmappable(val);\n+                    throw unmappableASCII(val);\n@@ -992,1 +1006,1 @@\n-        return encodeWithEncoder(cs, coder, val, false);\n+        return encodeWithEncoder(cs, coder, val, CharacterCodingException.class);\n@@ -995,0 +1009,7 @@\n+    \/**\n+     * {@return the byte array obtained by first decoding {@code val} with\n+     * {@code coder}, and then encoding the result with US-ASCII}\n+     *\n+     * @param coder a coder to decode {@code val} with\n+     * @param val a string byte array encoded with {@code coder}\n+     *\/\n@@ -1034,1 +1055,1 @@\n-        return encode8859_1(coder, val, true);\n+        return encode8859_1(coder, val, null);\n@@ -1037,1 +1058,17 @@\n-    private static byte[] encode8859_1(byte coder, byte[] val, boolean doReplace) {\n+    private static byte[] encode8859_1OrThrow(byte coder, byte[] val) throws UnmappableCharacterException {\n+        return encode8859_1(coder, val, UnmappableCharacterException.class);\n+    }\n+\n+    \/**\n+     * {@return the byte array obtained by first decoding {@code val} with\n+     * {@code coder}, and then encoding the result with ISO-8859-1}\n+     *\n+     * @param coder a coder to decode {@code val} with\n+     * @param val a string byte array encoded with {@code coder}\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting replaced.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n+    private static <E extends Exception> byte[] encode8859_1(byte coder, byte[] val, Class<E> exClass) throws E {\n@@ -1051,2 +1088,2 @@\n-                if (!doReplace) {\n-                    throwUnmappable(sp);\n+                if (exClass != null) {\n+                    throw String.<E>unmappableCharacterException(sp);\n@@ -1146,1 +1183,20 @@\n-    private static int decodeUTF8_UTF16(byte[] src, int sp, int sl, byte[] dst, int dp, boolean doReplace) {\n+    private static int decodeUTF8_UTF16(byte[] src, int sp, int sl, byte[] dst, int dp) {\n+        return decodeUTF8_UTF16(src, sp, sl, dst, dp, null);\n+    }\n+\n+    private static int decodeUTF8_UTF16OrThrow(\n+            byte[] src, int sp, int sl, byte[] dst, int dp)\n+            throws MalformedInputException {\n+        return decodeUTF8_UTF16(src, sp, sl, dst, dp, MalformedInputException.class);\n+    }\n+\n+    \/**\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting replaced.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n+    private static <E extends Exception> int decodeUTF8_UTF16(\n+            byte[] src, int sp, int sl, byte[] dst, int dp, Class <E> exClass)\n+            throws E {\n@@ -1155,2 +1211,2 @@\n-                        if (!doReplace) {\n-                            throwMalformed(sp - 1, 1);\n+                        if (exClass != null) {\n+                            throw String.<E>malformedInputException(sp - 1, 1);\n@@ -1165,2 +1221,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp, 1);  \/\/ underflow()\n+                if (exClass != null) {\n+                    throw String.<E>malformedInputException(sp, 1);  \/\/ underflow()\n@@ -1175,2 +1231,2 @@\n-                        if (!doReplace) {\n-                            throwMalformed(sp - 3, 3);\n+                        if (exClass != null) {\n+                            throw String.<E>malformedInputException(sp - 3, 3);\n@@ -1184,2 +1240,2 @@\n-                            if (!doReplace) {\n-                                throwMalformed(sp - 3, 3);\n+                            if (exClass != null) {\n+                                throw String.<E>malformedInputException(sp - 3, 3);\n@@ -1195,2 +1251,2 @@\n-                    if (!doReplace) {\n-                        throwMalformed(sp - 1, 2);\n+                    if (exClass != null) {\n+                        throw String.<E>malformedInputException(sp - 1, 2);\n@@ -1201,2 +1257,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp, 1);\n+                if (exClass != null) {\n+                    throw String.<E>malformedInputException(sp, 1);\n@@ -1214,2 +1270,2 @@\n-                        if (!doReplace) {\n-                            throwMalformed(sp - 4, 4);\n+                        if (exClass != null) {\n+                            throw String.<E>malformedInputException(sp - 4, 4);\n@@ -1228,2 +1284,2 @@\n-                    if (!doReplace) {\n-                        throwMalformed(sp - 1, 1);  \/\/ or 2\n+                    if (exClass != null) {\n+                        throw String.<E>malformedInputException(sp - 1, 1);  \/\/ or 2\n@@ -1234,2 +1290,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp - 1, 1);\n+                if (exClass != null) {\n+                    throw String.<E>malformedInputException(sp - 1, 1);\n@@ -1244,2 +1300,2 @@\n-                if (!doReplace) {\n-                    throwMalformed(sp - 1, 1);\n+                if (exClass != null) {\n+                    throw String.<E>malformedInputException(sp - 1, 1);\n@@ -1287,3 +1343,13 @@\n-    private static void throwMalformed(int off, int nb) {\n-        String msg = \"malformed input off : \" + off + \", length : \" + nb;\n-        throw new IllegalArgumentException(msg, new MalformedInputException(nb));\n+    \/**\n+     * {@return a new {@link MalformedInputException} for the sub-range denoted\n+     * by specified {@code offset} and {@code length}}\n+     *\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    private static <E extends Exception> E malformedInputException(int offset, int length) {\n+        MalformedInputException mie = new MalformedInputException(length);\n+        String msg = \"malformed input offset : \" + offset + \", length : \" + length;\n+        mie.initCause(new IllegalArgumentException(msg));\n+        return (E) mie;\n@@ -1292,1 +1358,5 @@\n-    private static void throwMalformed(byte[] val) {\n+    \/**\n+     * {@return a new {@link MalformedInputException} for the given malformed\n+     * ASCII string}\n+     *\/\n+    private static MalformedInputException malformedASCII(byte[] val) {\n@@ -1294,1 +1364,1 @@\n-        throwMalformed(dp, 1);\n+        return malformedInputException(dp, 1);\n@@ -1297,3 +1367,12 @@\n-    private static void throwUnmappable(int off) {\n-        String msg = \"malformed input off : \" + off + \", length : 1\";\n-        throw new IllegalArgumentException(msg, new UnmappableCharacterException(1));\n+    \/**\n+     * {@return a new {@link UnmappableCharacterException} at given {@code offset}}\n+     *\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    private static <E extends Exception> E unmappableCharacterException(int offset) {\n+        UnmappableCharacterException uce = new UnmappableCharacterException(1);\n+        String msg = \"malformed input offset : \" + offset + \", length : 1\";\n+        uce.initCause(new IllegalArgumentException(msg, uce));\n+        return (E) uce;\n@@ -1302,1 +1381,5 @@\n-    private static void throwUnmappable(byte[] val) {\n+    \/**\n+     * {@return a new {@link UnmappableCharacterException} for the given\n+     * malformed ASCII string}\n+     *\/\n+    private static UnmappableCharacterException unmappableASCII(byte[] val) {\n@@ -1304,1 +1387,5 @@\n-        throwUnmappable(dp);\n+        return unmappableCharacterException(dp);\n+    }\n+\n+    private static byte[] encodeUTF8(byte coder, byte[] val) {\n+        return encodeUTF8(coder, val, null);\n@@ -1307,1 +1394,17 @@\n-    private static byte[] encodeUTF8(byte coder, byte[] val, boolean doReplace) {\n+    private static byte[] encodeUTF8OrThrow(byte coder, byte[] val) throws UnmappableCharacterException {\n+        return encodeUTF8(coder, val, UnmappableCharacterException.class);\n+    }\n+\n+    \/**\n+     * {@return the byte array obtained by first decoding {@code val} with\n+     * {@code coder}, and then encoding the result with UTF-8}\n+     *\n+     * @param coder a coder to decode {@code val} with\n+     * @param val a string byte array encoded with {@code coder}\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting replaced.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n+    private static <E extends Exception> byte[] encodeUTF8(byte coder, byte[] val, Class<E> exClass) throws E {\n@@ -1309,1 +1412,1 @@\n-            return encodeUTF8_UTF16(val, doReplace);\n+            return encodeUTF8_UTF16(val, exClass);\n@@ -1337,1 +1440,12 @@\n-    private static byte[] encodeUTF8_UTF16(byte[] val, boolean doReplace) {\n+    \/**\n+     * {@return the byte array obtained by first decoding {@code val} with\n+     * UTF-16, and then encoding the result with UTF-8}\n+     *\n+     * @param val a string byte array encoded with UTF-16\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting replaced.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n+     *\/\n+    private static <E extends Exception> byte[] encodeUTF8_UTF16(byte[] val, Class<E> exClass) throws E {\n@@ -1343,1 +1457,1 @@\n-        long allocLen = (sl * 3 < 0) ? computeSizeUTF8_UTF16(val, doReplace) : sl * 3;\n+        long allocLen = (sl * 3 < 0) ? computeSizeUTF8_UTF16(val, exClass) : sl * 3;\n@@ -1372,1 +1486,1 @@\n-                    if (doReplace) {\n+                    if (exClass == null) {\n@@ -1375,1 +1489,1 @@\n-                        throwUnmappable(sp - 1);\n+                        throw String.<E>unmappableCharacterException(sp - 1);\n@@ -1399,2 +1513,6 @@\n-     * @param val UTF16 encoded byte array\n-     * @param doReplace true to replace unmappable characters\n+     *\n+     * @param exClass The exception class where any non-null value indicates\n+     *                malformed or unmappable bytes will result in an exception\n+     *                to be thrown instead of getting discarded.\n+     * @param <E> The exception type parameter to enable callers to avoid\n+     *           having to declare the exception\n@@ -1402,1 +1520,1 @@\n-    private static long computeSizeUTF8_UTF16(byte[] val, boolean doReplace) {\n+    private static <E extends Exception> long computeSizeUTF8_UTF16(byte[] val, Class<E> exClass) throws E {\n@@ -1421,1 +1539,1 @@\n-                    if (doReplace) {\n+                    if (exClass == null) {\n@@ -1424,1 +1542,1 @@\n-                        throwUnmappable(sp - 1);\n+                        throw String.<E>unmappableCharacterException(sp - 1);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":225,"deletions":107,"binary":false,"changes":332,"status":"modified"},{"patch":"@@ -2127,0 +2127,1 @@\n+\n@@ -2135,2 +2136,2 @@\n-            public String uncheckedNewStringNoRepl(byte[] bytes, Charset cs) throws CharacterCodingException  {\n-                return String.newStringNoRepl(bytes, cs);\n+            public String uncheckedNewStringOrThrow(byte[] bytes, Charset cs) throws CharacterCodingException  {\n+                return String.newStringOrThrow(bytes, cs);\n@@ -2138,0 +2139,1 @@\n+\n@@ -2141,0 +2143,1 @@\n+\n@@ -2144,2 +2147,3 @@\n-            public byte[] uncheckedGetBytesNoRepl(String s, Charset cs) throws CharacterCodingException {\n-                return String.getBytesNoRepl(s, cs);\n+\n+            public byte[] uncheckedGetBytesOrThrow(String s, Charset cs) throws CharacterCodingException {\n+                return String.getBytesOrThrow(s, cs);\n@@ -2148,2 +2152,2 @@\n-            public byte[] getBytesUTF8NoRepl(String s) {\n-                return String.getBytesUTF8NoRepl(s);\n+            public byte[] getBytesUTF8OrThrow(String s) throws CharacterCodingException {\n+                return String.getBytesUTF8OrThrow(s);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3046,1 +3046,1 @@\n-        return JLA.uncheckedNewStringNoRepl(ba, cs);\n+        return JLA.uncheckedNewStringOrThrow(ba, cs);\n@@ -3365,1 +3365,1 @@\n-        byte[] bytes = JLA.uncheckedGetBytesNoRepl(String.valueOf(csq), cs);\n+        byte[] bytes = JLA.uncheckedGetBytesOrThrow(String.valueOf(csq), cs);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Files.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-                return JLA.uncheckedNewStringNoRepl(bytes, StandardCharsets.UTF_8);\n+                return JLA.uncheckedNewStringOrThrow(bytes, StandardCharsets.UTF_8);\n@@ -267,1 +267,5 @@\n-            return JLA.getBytesUTF8NoRepl(s);\n+            try {\n+                return JLA.getBytesUTF8OrThrow(s);\n+            } catch (CharacterCodingException cce) {\n+                throw new IllegalArgumentException(cce);\n+            }\n@@ -281,2 +285,0 @@\n-                \/\/ We use the JLA.newStringUTF8NoRepl variant to throw\n-                \/\/ exceptions eagerly when opening ZipFiles\n@@ -299,1 +301,1 @@\n-                byte[] encoded = JLA.uncheckedGetBytesNoRepl(str, UTF_8.INSTANCE);\n+                byte[] encoded = JLA.uncheckedGetBytesOrThrow(str, UTF_8.INSTANCE);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipCoder.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import java.util.function.BiFunction;\n@@ -335,1 +334,1 @@\n-     * using the specified {@linkplain java.nio.charset.Charset charset}.\n+     * using the specified {@code Charset}.\n@@ -346,1 +345,1 @@\n-    String uncheckedNewStringNoRepl(byte[] bytes, Charset cs) throws CharacterCodingException;\n+    String uncheckedNewStringOrThrow(byte[] bytes, Charset cs) throws CharacterCodingException;\n@@ -349,2 +348,2 @@\n-     * Encode the given string into a sequence of bytes using the specified\n-     * {@linkplain java.nio.charset.Charset charset}.\n+     * {@return the sequence of bytes obtained by encoding the given string in\n+     * the specified {@code Charset}}\n@@ -355,3 +354,0 @@\n-     * <p>\n-     * This method throws {@code CharacterCodingException} instead of replacing\n-     * when malformed input or unmappable characters are encountered.\n@@ -361,1 +357,1 @@\n-     * @return the encoded bytes\n+     * @throws NullPointerException If {@code s} or {@code cs} is null\n@@ -364,1 +360,1 @@\n-    byte[] uncheckedGetBytesNoRepl(String s, Charset cs) throws CharacterCodingException;\n+    byte[] uncheckedGetBytesOrThrow(String s, Charset cs) throws CharacterCodingException;\n@@ -390,1 +386,1 @@\n-     * Encode the given string into a sequence of bytes using utf8.\n+     * {@return the sequence of bytes obtained by encoding the given string in UTF-8}\n@@ -393,2 +389,2 @@\n-     * @return the encoded bytes in utf8\n-     * @throws IllegalArgumentException for malformed surrogates\n+     * @throws NullPointerException If {@code s} is null\n+     * @throws CharacterCodingException For malformed input or unmappable characters\n@@ -396,1 +392,1 @@\n-    byte[] getBytesUTF8NoRepl(String s);\n+    byte[] getBytesUTF8OrThrow(String s) throws CharacterCodingException;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-            return JAVA_LANG_ACCESS.uncheckedNewStringNoRepl(bytes, charset);\n+            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n@@ -95,1 +95,1 @@\n-            return JAVA_LANG_ACCESS.uncheckedNewStringNoRepl(bytes, charset);\n+            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n@@ -114,1 +114,1 @@\n-            return JAVA_LANG_ACCESS.uncheckedNewStringNoRepl(bytes, charset);\n+            return JAVA_LANG_ACCESS.uncheckedNewStringOrThrow(bytes, charset);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/StringSupport.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-            return JLA.uncheckedGetBytesNoRepl(input, Util.jnuEncoding());\n+            return JLA.uncheckedGetBytesOrThrow(input, Util.jnuEncoding());\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8286287 8288589\n- * @summary Tests for *NoRepl() shared secret methods.\n- * @run testng NoReplTest\n- * @modules jdk.charsets\n- *\/\n-\n-import java.io.IOException;\n-import java.nio.charset.CharacterCodingException;\n-import java.nio.charset.Charset;\n-import java.nio.file.Files;\n-import java.util.HexFormat;\n-import static java.nio.charset.StandardCharsets.UTF_16;\n-\n-import org.testng.annotations.Test;\n-\n-@Test\n-public class NoReplTest {\n-    private final static byte[] MALFORMED_UTF16 = {(byte)0x00, (byte)0x20, (byte)0x00};\n-    private final static String MALFORMED_WINDOWS_1252 = \"\\u0080\\u041e\";\n-    private final static Charset WINDOWS_1252 = Charset.forName(\"windows-1252\");\n-\n-    \/**\n-     * Verifies newStringNoRepl() throws a CharacterCodingException.\n-     * The method is invoked by `Files.readString()` method.\n-     *\/\n-    @Test\n-    public void newStringNoReplTest() throws IOException {\n-        var f = Files.createTempFile(null, null);\n-        try (var fos = Files.newOutputStream(f)) {\n-            fos.write(MALFORMED_UTF16);\n-            var read = Files.readString(f, UTF_16);\n-            throw new RuntimeException(\"Exception should be thrown for a malformed input. Bytes read: \" +\n-                    HexFormat.of()\n-                            .withPrefix(\"x\")\n-                            .withUpperCase()\n-                            .formatHex(read.getBytes(UTF_16)));\n-        } catch (CharacterCodingException cce) {\n-            \/\/ success\n-        } finally {\n-            Files.delete(f);\n-        }\n-    }\n-\n-    \/**\n-     * Verifies getBytesNoRepl() throws a CharacterCodingException.\n-     * The method is invoked by `Files.writeString()` method.\n-     *\/\n-    @Test\n-    public void getBytesNoReplTest() throws IOException {\n-        var f = Files.createTempFile(null, null);\n-        try {\n-            Files.writeString(f, MALFORMED_WINDOWS_1252, WINDOWS_1252);\n-            throw new RuntimeException(\"Exception should be thrown\");\n-        } catch (CharacterCodingException cce) {\n-            \/\/ success\n-        } finally {\n-            Files.delete(f);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/String\/NoReplTest.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8286287 8288589\n+ * @summary Tests for *OrThrow() shared secret methods.\n+ * @run testng OrThrowTest\n+ * @modules jdk.charsets\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.util.HexFormat;\n+import static java.nio.charset.StandardCharsets.UTF_16;\n+\n+import org.testng.annotations.Test;\n+\n+@Test\n+public class OrThrowTest {\n+    private final static byte[] MALFORMED_UTF16 = {(byte)0x00, (byte)0x20, (byte)0x00};\n+    private final static String MALFORMED_WINDOWS_1252 = \"\\u0080\\u041e\";\n+    private final static Charset WINDOWS_1252 = Charset.forName(\"windows-1252\");\n+\n+    \/**\n+     * Verifies {@code uncheckedNewStringOrThrow()} throws a {@link CharacterCodingException}.\n+     * The method is invoked by {@code Files.readString()} method.\n+     *\/\n+    @Test\n+    public void uncheckedNewStringOrThrowTest() throws IOException {\n+        var f = Files.createTempFile(null, null);\n+        try (var fos = Files.newOutputStream(f)) {\n+            fos.write(MALFORMED_UTF16);\n+            var read = Files.readString(f, UTF_16);\n+            throw new RuntimeException(\"Exception should be thrown for a malformed input. Bytes read: \" +\n+                    HexFormat.of()\n+                            .withPrefix(\"x\")\n+                            .withUpperCase()\n+                            .formatHex(read.getBytes(UTF_16)));\n+        } catch (CharacterCodingException cce) {\n+            \/\/ success\n+        } finally {\n+            Files.delete(f);\n+        }\n+    }\n+\n+    \/**\n+     * Verifies {@code uncheckedGetBytesOrThrow()} throws a {@link CharacterCodingException}.\n+     * The method is invoked by {@code Files.writeString()} method.\n+     *\/\n+    @Test\n+    public void uncheckedGetBytesOrThrowTest() throws IOException {\n+        var f = Files.createTempFile(null, null);\n+        try {\n+            Files.writeString(f, MALFORMED_WINDOWS_1252, WINDOWS_1252);\n+            throw new RuntimeException(\"Exception should be thrown\");\n+        } catch (CharacterCodingException cce) {\n+            \/\/ success\n+        } finally {\n+            Files.delete(f);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/String\/OrThrowTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}