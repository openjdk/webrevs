{"files":[{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import jdk.internal.org.objectweb.asm.ClassReader;\n+import jdk.internal.org.objectweb.asm.ClassVisitor;\n+import jdk.internal.org.objectweb.asm.ClassWriter;\n+import jdk.internal.org.objectweb.asm.MethodVisitor;\n+import jdk.internal.org.objectweb.asm.Opcodes;\n+\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.Instrumentation;\n+import java.security.ProtectionDomain;\n+\n+\/**\n+ * This agent removes the isHeadless method from java.awt.GraphicsEnvironment.\n+ *\/\n+public class HeadlessMalfunctionAgent {\n+\n+    public static void premain(String agentArgs, Instrumentation inst) {\n+        inst.addTransformer(new ClassFileTransformer() {\n+\n+            @Override\n+            public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n+                                    ProtectionDomain pd, byte[] cb) {\n+                if (\"java\/awt\/GraphicsEnvironment\".equals(className)) {\n+                    System.out.println(\"Transforming java.awt.GraphicsEnvironment.\");\n+                    try {\n+                        final ClassReader cr = new ClassReader(cb);\n+                        final ClassWriter cw = new ClassWriter(cr, 0);\n+                        cr.accept(new ClassVisitor(Opcodes.ASM9, cw) {\n+\n+                            @Override\n+                            public MethodVisitor visitMethod(int access, String name, String descriptor, String signature,\n+                                                             String[] exceptions) {\n+                                if (\"isHeadless\".equals(name) && \"()Z\".equals(descriptor)) {\n+                                    System.out.println(\"isHeadless removed from java.awt.GraphicsEnvironment.\");\n+                                    \/\/ WHACK! Remove the isHeadless method.\n+                                    return null;\n+                                }\n+                                return super.visitMethod(access, name, descriptor, signature, exceptions);\n+                            }\n+                        }, 0);\n+                        return cw.toByteArray();\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+                return null;\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Headless\/HeadlessMalfunctionAgent.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+\/*\n+ * @test\n+ * @bug 8336382\n+ * @summary Test to ensure GraphicsEnvironment's isHeadless method is removed by the agent\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.org.objectweb.asm\n+ * @build HeadlessMalfunctionAgent\n+ * @run driver  jdk.test.lib.helpers.ClassFileInstaller\n+ *              HeadlessMalfunctionAgent\n+ *              HeadlessMalfunctionAgent$1\n+ *              HeadlessMalfunctionAgent$1$1\n+ * @run driver HeadlessMalfunctionTest\n+ *\/\n+public class HeadlessMalfunctionTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Package agent\n+        Files.writeString(Path.of(\"MANIFEST.MF\"), \"Premain-Class: HeadlessMalfunctionAgent\\n\");\n+        final ProcessBuilder pbJar = new ProcessBuilder()\n+                .command(JDKToolFinder.getJDKTool(\"jar\"), \"cmf\", \"MANIFEST.MF\", \"agent.jar\",\n+                        \"HeadlessMalfunctionAgent.class\",\n+                        \"HeadlessMalfunctionAgent$1.class\",\n+                        \"HeadlessMalfunctionAgent$1$1.class\");\n+        ProcessTools.executeProcess(pbJar).shouldHaveExitValue(0);\n+\n+        \/\/ Run test\n+        final ProcessBuilder pbJava = ProcessTools.createTestJavaProcessBuilder(\n+                \"--add-opens\",\n+                \"java.base\/jdk.internal.org.objectweb.asm=ALL-UNNAMED\",\n+                \"-javaagent:agent.jar\",\n+                \"HeadlessMalfunctionTest$Runner\"\n+        );\n+        final OutputAnalyzer output = ProcessTools.executeProcess(pbJava);\n+        \/\/ Unpatched JDK logs: \"FATAL ERROR in native method: Could not allocate library name\"\n+        output.shouldContain(\"FATAL ERROR in native method: isHeadless method not found\");\n+        output.shouldNotHaveExitValue(0);\n+    }\n+\n+    public static class Runner {\n+        public static void main(String[] args) {\n+            System.out.println(java.awt.GraphicsEnvironment\n+                    .getLocalGraphicsEnvironment()\n+                    .getMaximumWindowBounds());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Headless\/HeadlessMalfunctionTest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}