{"files":[{"patch":"@@ -426,0 +426,6 @@\n+    \/*\n+     * If a similar query is ever added to javax.lang.model, use that instead.\n+     *\/\n+    public static boolean isImplicitlyDeclaredClass(Element e) {\n+        return e instanceof ClassSymbol c && c.isImplicit();\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/WorkArounds.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -115,1 +115,0 @@\n-import com.sun.source.tree.Tree;\n@@ -314,11 +313,0 @@\n-    \/*\n-     * If a similar query is added to javax.lang.model, use that instead.\n-     *\/\n-    public static boolean isImplicitlyDeclaredClass(Tree e) {\n-        if (e.getKind() != Tree.Kind.CLASS)\n-            return false;\n-        if (!(e instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl classDecl))\n-            return false; \/\/ this should probably never happen with jdk.compiler\n-        return (classDecl.mods.flags & com.sun.tools.javac.code.Flags.IMPLICIT_CLASS) != 0;\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n@@ -197,1 +196,1 @@\n-                        && !Utils.isImplicitlyDeclaredClass(env.currPath.getLeaf())) {\n+                        && !isImplicitlyDeclaredClass(env.currPath.getLeaf())) {\n@@ -1280,1 +1279,1 @@\n-            case CLASS -> !Utils.isImplicitlyDeclaredClass(p.getLeaf());\n+            case CLASS -> !isImplicitlyDeclaredClass(p.getLeaf());\n@@ -1285,0 +1284,9 @@\n+    \/*\n+     * If a similar query is ever added to com.sun.source.tree, use that instead.\n+     *\/\n+    private boolean isImplicitlyDeclaredClass(Tree t) {\n+        return t.getKind() == Tree.Kind.CLASS\n+                && t instanceof com.sun.tools.javac.tree.JCTree.JCClassDecl classDecl\n+                && (classDecl.mods.flags & com.sun.tools.javac.code.Flags.IMPLICIT_CLASS) != 0;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n+import jdk.javadoc.internal.doclets.toolkit.WorkArounds;\n@@ -997,1 +997,1 @@\n-                    if (!accessFilter.checkModifier(e) && !isImplicitlyDeclaredClass(e)) {\n+                    if (!accessFilter.checkModifier(e) && !WorkArounds.isImplicitlyDeclaredClass(e)) {\n@@ -1019,1 +1019,1 @@\n-                        return isImplicitlyDeclaredClass(e.getEnclosingElement())\n+                        return WorkArounds.isImplicitlyDeclaredClass(e.getEnclosingElement())\n@@ -1034,10 +1034,0 @@\n-    private boolean isImplicitlyDeclaredClass(Element e) {\n-        var tree = toolEnv.docTrees.getTree(e);\n-        if (tree == null) {\n-            \/\/ `false` is always the correct answer: javadoc cannot\n-            \/\/ document a class whose source is unavailable\n-            return false;\n-        }\n-        return Utils.isImplicitlyDeclaredClass(tree);\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ElementsTable.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                String index = String.valueOf(i++);\n+                var index = String.valueOf(i++);\n@@ -117,1 +117,1 @@\n-                checking(\"\");\n+                checking(\"uncommented class warning\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testImplicitlyDeclaredClasses\/TestImplicitlyDeclaredClasses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}