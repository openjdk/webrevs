{"files":[{"patch":"@@ -1543,0 +1543,1 @@\n+    log_info(cds)(\"Full module graph = %s\", CDSConfig::is_dumping_full_module_graph() ? \"enabled\" : \"disabled\");\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -544,27 +544,10 @@\n-char* Modules::_archived_main_module_name = nullptr;\n-char* Modules::_archived_addmods_names = nullptr;\n-char* Modules::_archived_native_access_flags = nullptr;\n-\n-void Modules::dump_main_module_name() {\n-  const char* module_name = Arguments::get_property(\"jdk.module.main\");\n-  if (module_name != nullptr) {\n-    _archived_main_module_name = ArchiveBuilder::current()->ro_strdup(module_name);\n-  }\n-}\n-\n-void Modules::check_archived_flag_consistency(char* archived_flag, const char* runtime_flag, const char* property) {\n-  log_info(cds)(\"%s %s\", property,\n-    archived_flag != nullptr ? archived_flag : \"(null)\");\n-  bool disable = false;\n-  if (runtime_flag == nullptr) {\n-    if (archived_flag != nullptr) {\n-      log_info(cds)(\"Mismatched values for property %s: %s specified during dump time but not during runtime\", property, archived_flag);\n-      disable = true;\n-    }\n-  } else {\n-    if (archived_flag == nullptr) {\n-      log_info(cds)(\"Mismatched values for property %s: %s specified during runtime but not during dump time\", property, runtime_flag);\n-      disable = true;\n-    } else if (strcmp(runtime_flag, archived_flag) != 0) {\n-      log_info(cds)(\"Mismatched values for property %s: runtime %s dump time %s\", property, runtime_flag, archived_flag);\n-      disable = true;\n+class Modules::ArchivedProperty {\n+  const char* _prop;\n+  const bool _numbered;\n+  const char* _archived_value;\n+\n+  const char* get_flattened_value() const {\n+    if (_numbered) {\n+      return get_numbered_property_as_sorted_string();\n+    } else {\n+      return Arguments::get_property(_prop);\n@@ -574,29 +557,2 @@\n-  if (disable) {\n-    log_info(cds)(\"Disabling optimized module handling\");\n-    CDSConfig::stop_using_optimized_module_handling();\n-  }\n-  log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n-  log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n-}\n-\n-void Modules::dump_archived_module_info() {\n-  \/\/ Write module name into archive\n-  CDS_JAVA_HEAP_ONLY(Modules::dump_main_module_name();)\n-  \/\/ Write module names from --add-modules into archive\n-  CDS_JAVA_HEAP_ONLY(Modules::dump_addmods_names();)\n-  \/\/ Write native enable-native-access flag into archive\n-  CDS_JAVA_HEAP_ONLY(Modules::dump_native_access_flag());\n-}\n-\n-void Modules::serialize_archived_module_info(SerializeClosure* soc) {\n-  CDS_JAVA_HEAP_ONLY(Modules::serialize(soc);)\n-  CDS_JAVA_HEAP_ONLY(Modules::serialize_addmods_names(soc);)\n-  CDS_JAVA_HEAP_ONLY(Modules::serialize_native_access_flags(soc);)\n-}\n-\n-void Modules::serialize(SerializeClosure* soc) {\n-  soc->do_ptr(&_archived_main_module_name);\n-  if (soc->reading()) {\n-    const char* runtime_main_module = Arguments::get_property(\"jdk.module.main\");\n-    log_info(cds)(\"_archived_main_module_name %s\",\n-      _archived_main_module_name != nullptr ? _archived_main_module_name : \"(null)\");\n+  void runtime_check() const;\n+  const char* get_numbered_property_as_sorted_string() const;\n@@ -604,1 +560,3 @@\n-    check_archived_flag_consistency(_archived_main_module_name, runtime_main_module, \"jdk.module.main\");\n+public:\n+  ArchivedProperty(const char* prop, bool numbered)\n+    : _prop(prop), _numbered(numbered), _archived_value(nullptr) {}\n@@ -606,2 +564,6 @@\n-    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n-    _archived_main_module_name = nullptr;\n+  void dump() {\n+    ResourceMark rm;\n+    const char* str = get_flattened_value();\n+    if (str != nullptr) {\n+      _archived_value = ArchiveBuilder::current()->ro_strdup(str);\n+    }\n@@ -609,1 +571,0 @@\n-}\n@@ -611,5 +572,7 @@\n-void Modules::dump_native_access_flag() {\n-  ResourceMark rm;\n-  const char* native_access_names = get_native_access_flags_as_sorted_string();\n-  if (native_access_names != nullptr) {\n-    _archived_native_access_flags = ArchiveBuilder::current()->ro_strdup(native_access_names);\n+  void serialize(SerializeClosure* soc) {\n+    soc->do_ptr(&_archived_value);\n+    if (soc->reading()) {\n+      runtime_check();\n+      \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n+      _archived_value = nullptr;\n+    }\n@@ -617,1 +580,1 @@\n-}\n+};\n@@ -619,4 +582,3 @@\n-\/\/ Caller needs ResourceMark\n-const char* Modules::get_native_access_flags_as_sorted_string() {\n-  return get_numbered_property_as_sorted_string(\"jdk.module.enable.native.access\");\n-}\n+Modules::ArchivedProperty Modules::_archived_props[] = {\n+  \/\/ numbered\n+  {\"jdk.module.main\", false},\n@@ -624,5 +586,5 @@\n-void Modules::serialize_native_access_flags(SerializeClosure* soc) {\n-  soc->do_ptr(&_archived_native_access_flags);\n-  if (soc->reading()) {\n-    ResourceMark rm;\n-    check_archived_flag_consistency(_archived_native_access_flags, get_native_access_flags_as_sorted_string(), \"jdk.module.enable.native.access\");\n+  \/\/ non-numbered\n+  {\"jdk.module.addexports\", true},             \/\/ --add-exports\n+  {\"jdk.module.addmods\", true},                \/\/ --add-modules\n+  {\"jdk.module.enable.native.access\", true},   \/\/ --enable-native-access\n+};\n@@ -630,3 +592,2 @@\n-    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n-    _archived_native_access_flags = nullptr;\n-  }\n+constexpr size_t Modules::num_archived_props() {\n+  return sizeof(_archived_props) \/ sizeof(_archived_props[0]);\n@@ -635,6 +596,3 @@\n-void Modules::dump_addmods_names() {\n-  ResourceMark rm;\n-  const char* addmods_names = get_addmods_names_as_sorted_string();\n-  if (addmods_names != nullptr) {\n-    _archived_addmods_names = ArchiveBuilder::current()->ro_strdup(addmods_names);\n-  }\n+Modules::ArchivedProperty& Modules::archived_prop(size_t i) {\n+  assert(i < num_archived_props(), \"oob\");\n+  return _archived_props[i];\n@@ -643,4 +601,5 @@\n-\/\/ Caller needs ResourceMark\n-const char* Modules::get_addmods_names_as_sorted_string() {\n-  return get_numbered_property_as_sorted_string(\"jdk.module.addmods\");\n-}\n+void Modules::ArchivedProperty::runtime_check() const {\n+  ResourceMark rm;\n+  const char* runtime_value = get_flattened_value();\n+  log_info(cds)(\"archived module property %s: %s\", _prop,\n+                _archived_value != nullptr ? _archived_value : \"(null)\");\n@@ -648,5 +607,15 @@\n-void Modules::serialize_addmods_names(SerializeClosure* soc) {\n-  soc->do_ptr(&_archived_addmods_names);\n-  if (soc->reading()) {\n-    ResourceMark rm;\n-    check_archived_flag_consistency(_archived_addmods_names, get_addmods_names_as_sorted_string(), \"jdk.module.addmods\");\n+  bool disable = false;\n+  if (runtime_value == nullptr) {\n+    if (_archived_value != nullptr) {\n+      log_info(cds)(\"Mismatched values for property %s: %s specified during dump time but not during runtime\", _prop, _archived_value);\n+      disable = true;\n+    }\n+  } else {\n+    if (_archived_value == nullptr) {\n+      log_info(cds)(\"Mismatched values for property %s: %s specified during runtime but not during dump time\", _prop, runtime_value);\n+      disable = true;\n+    } else if (strcmp(runtime_value, _archived_value) != 0) {\n+      log_info(cds)(\"Mismatched values for property %s: runtime %s dump time %s\", _prop, runtime_value, _archived_value);\n+      disable = true;\n+    }\n+  }\n@@ -654,2 +623,3 @@\n-    \/\/ Don't hold onto the pointer, in case we might decide to unmap the archive.\n-    _archived_addmods_names = nullptr;\n+  if (disable) {\n+    log_info(cds)(\"Disabling optimized module handling\");\n+    CDSConfig::stop_using_optimized_module_handling();\n@@ -660,1 +630,2 @@\n-const char* Modules::get_numbered_property_as_sorted_string(const char* property) {\n+const char* Modules::ArchivedProperty::get_numbered_property_as_sorted_string() const {\n+  assert(_numbered, \"sanity\");\n@@ -665,1 +636,1 @@\n-  size_t prop_len = strlen(property) + max_digits + extra_symbols_count;\n+  size_t prop_len = strlen(_prop) + max_digits + extra_symbols_count;\n@@ -669,1 +640,1 @@\n-    jio_snprintf(prop_name, prop_len, \"%s.%d\", property, i);\n+    jio_snprintf(prop_name, prop_len, \"%s.%d\", _prop, i);\n@@ -716,0 +687,16 @@\n+void Modules::dump_archived_module_info() {\n+  for (size_t i = 0; i < num_archived_props(); i++) {\n+    archived_prop(i).dump();\n+  }\n+}\n+\n+void Modules::serialize_archived_module_info(SerializeClosure* soc) {\n+  for (size_t i = 0; i < num_archived_props(); i++) {\n+    archived_prop(i).serialize(soc);\n+  }\n+  if (soc->reading()) {\n+    log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n+    log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":85,"deletions":98,"binary":false,"changes":183,"status":"modified"},{"patch":"@@ -62,3 +62,0 @@\n-  static void dump_main_module_name() NOT_CDS_JAVA_HEAP_RETURN;\n-  static void serialize(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n-  static void check_archived_flag_consistency(char* archived_flag, const char* runtime_flag, const char* property) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -66,9 +63,0 @@\n-  static void dump_native_access_flag() NOT_CDS_JAVA_HEAP_RETURN;\n-  static const char* get_native_access_flags_as_sorted_string() NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n-  static void serialize_native_access_flags(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n-\n-  static void dump_addmods_names() NOT_CDS_JAVA_HEAP_RETURN;\n-  static const char* get_addmods_names_as_sorted_string() NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n-  static void serialize_addmods_names(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n-\n-  static const char* get_numbered_property_as_sorted_string(const char* property) NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n@@ -76,3 +64,7 @@\n-  static char* _archived_main_module_name;\n-  static char* _archived_addmods_names;\n-  static char* _archived_native_access_flags;\n+private:\n+  class ArchivedProperty;\n+\n+  static ArchivedProperty _archived_props[];\n+  static constexpr size_t num_archived_props();\n+  static ArchivedProperty& archived_prop(size_t i);\n+public:\n","filename":"src\/hotspot\/share\/classfile\/modules.hpp","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -334,2 +334,1 @@\n-    if (matches_property_suffix(property_suffix, ADDEXPORTS, ADDEXPORTS_LEN) ||\n-        matches_property_suffix(property_suffix, ADDREADS, ADDREADS_LEN) ||\n+    if (matches_property_suffix(property_suffix, ADDREADS, ADDREADS_LEN) ||\n@@ -346,1 +345,2 @@\n-      if (matches_property_suffix(property_suffix, PATH, PATH_LEN) ||\n+      if (matches_property_suffix(property_suffix, ADDEXPORTS, ADDEXPORTS_LEN) ||\n+          matches_property_suffix(property_suffix, PATH, PATH_LEN) ||\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -146,1 +146,0 @@\n-               getProperty(\"jdk.module.addexports.0\") == null &&  \/\/ --add-exports\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -415,0 +415,2 @@\n+ -runtime\/cds\/appcds\/jigsaw\/ExactOptionMatch.java \\\n+ -runtime\/cds\/appcds\/jigsaw\/modulepath\/AddExports.java \\\n@@ -530,0 +532,1 @@\n+ -runtime\/cds\/appcds\/jigsaw\/ExactOptionMatch.java \\\n@@ -531,0 +534,1 @@\n+ -runtime\/cds\/appcds\/jigsaw\/modulepath\/AddExports.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary FMG are supported if the exact values are used for training\/assembly\/run for\n+ *          --add-exports, --add-modules, and -enable-native-access.\n+ * @bug 8352437\n+ * @modules java.logging\n+ * @requires vm.cds.write.archived.java.heap\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @run driver ExactOptionMatch\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class ExactOptionMatch {\n+    record Option(String cmdLine, String property, String valueA, String valueB) {}\n+\n+    static Option[] allOptions = new Option[] {\n+        new Option(\"--add-exports\",\n+                   \"jdk.module.addexports\",\n+                   \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                   \"java.base\/jdk.internal.misc=ALL-SYSTEM\"),\n+        new Option(\"--add-modules\",\n+                   \"jdk.module.addmods\",\n+                   \"java.base\",\n+                   \"java.logging\"),\n+        new Option(\"--enable-native-access\",\n+                   \"jdk.module.enable.native.access\",\n+                   \"java.base\",\n+                   \"java.logging\"),\n+    };\n+\n+    static final String FMG_DISABLED = \"initial full module graph: disabled\";\n+    static final String FMG_ENABLED = \"use_full_module_graph = true\";\n+\n+    public static void main(String[] args) throws Exception {\n+        OutputAnalyzer out;\n+\n+        for (Option o : allOptions) {\n+            TestCommon.startNewArchiveName();\n+            String archiveName = TestCommon.getCurrentArchiveName();\n+\n+            \/\/ (1) Dump = specified, Run = not specified\n+            TestCommon.dumpBaseArchive(archiveName, o.cmdLine(), o.valueA())\n+                .shouldHaveExitValue(0);\n+\n+            TestCommon.execCommon(\"-Xlog:cds\", \"--version\")\n+                .shouldMatch(\"Mismatched values for property \" + o.property() + \": j.*specified during dump time but not during runtime\")\n+                .shouldContain(FMG_DISABLED);\n+\n+            \/\/ (2) Dump = not specified, Run = specified\n+            TestCommon.dumpBaseArchive(archiveName)\n+                .shouldHaveExitValue(0);\n+\n+            TestCommon.execCommon(\"-Xlog:cds\", o.cmdLine(), o.valueA(), \"--version\")\n+                .shouldMatch(\"Mismatched values for property \" + o.property() + \": j.*specified during runtime but not during dump time\")\n+                .shouldContain(FMG_DISABLED);\n+\n+            \/\/ (3) Dump = specified twice\n+            TestCommon.dumpBaseArchive(archiveName, o.cmdLine(), o.valueA(), o.cmdLine(), o.valueB())\n+                .shouldHaveExitValue(0);\n+\n+            \/\/ (3.1) Run = specified once\n+            TestCommon.execCommon(\"-Xlog:cds\", o.cmdLine(), o.valueA(), \"--version\")\n+                .shouldMatch(\"Mismatched values for property \" + o.property() + \": runtime.*dump time\")\n+                .shouldContain(FMG_DISABLED);\n+\n+            \/\/ (3.2) Run = specified twice (same order)\n+            \/\/       Should still be able to use FMG.\n+            TestCommon.execCommon(\"-Xlog:cds\", o.cmdLine(), o.valueA(), o.cmdLine(), o.valueB(), \"--version\")\n+                .shouldContain(FMG_ENABLED);\n+\n+            \/\/ (3.3) Run = specified twice (but in different order)\n+            \/\/       Should still be able to use FMG (values are sorted by CDS).\n+            TestCommon.execCommon(\"-Xlog:cds\", o.cmdLine(), o.valueB(), o.cmdLine(), o.valueA(), \"--version\")\n+                .shouldContain(FMG_ENABLED);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/ExactOptionMatch.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Identical --add-exports switches can be used across training\/assembly\/production\n+ * @bug 8352437\n+ * @requires vm.cds\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @run driver AddExports\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import jdk.test.lib.cds.CDSJarUtils;\n+import jdk.test.lib.cds.CDSModulePackager;\n+import jdk.test.lib.cds.SimpleCDSAppTester;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class AddExports {\n+    static final Path SRC = Paths.get(System.getProperty(\"test.src\")).resolve(\"src\");\n+    static final Path nonModuleNeedsJdkAddExportDir = SRC.resolve(\"com.nomodule.needsjdkaddexport\");\n+    static final String nonModuleNeedsJdkAddExportJar = \"nonModuleNeedsJdkAddExport.jar\";\n+\n+    static String modulePath;\n+\n+    private static void buildJars() throws Exception {\n+        \/\/ non-module needs jdk.internal.misc\n+        CDSJarUtils.buildFromSourceDirectory(nonModuleNeedsJdkAddExportJar,\n+                                             nonModuleNeedsJdkAddExportDir.toString(),\n+                                             \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+\n+        CDSModulePackager modulePackager = new CDSModulePackager(SRC);\n+        modulePath = modulePackager.getOutputDir().toString();\n+\n+        \/\/ module needs jdk.internal.misc\n+        modulePackager.createModularJar(\"com.needsjdkaddexport\",\n+                                        \"--add-exports\", \"java.base\/jdk.internal.misc=com.needsjdkaddexport\");\n+\n+        \/\/ module needs com.foos.internal\n+        modulePackager.createModularJar(\"com.foos\");\n+        modulePackager.createModularJar(\"com.needsfoosaddexport\",\n+                                        \"--add-exports\", \"com.foos\/com.foos.internal=com.needsfoosaddexport\");\n+    }\n+\n+    static int testCount = 0;\n+    static void printComment(String comment) {\n+        testCount ++;\n+        System.out.println(\"======================================================================\");\n+        System.out.println(\"TESTCASE \" + testCount + \": \" + comment);\n+        System.out.println(\"======================================================================\");\n+    }\n+\n+    static SimpleCDSAppTester test(String comment, SimpleCDSAppTester tester) throws Exception {\n+        printComment(comment);\n+        return tester\n+            .setAssemblyChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(\"Full module graph = enabled\");\n+                    })\n+            .setProductionChecker((OutputAnalyzer out) -> {\n+                    out.shouldContain(\"use_full_module_graph = true; java.base\");\n+                    })\n+            .runStaticWorkflow()\n+            .runAOTWorkflow();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        buildJars();\n+\n+        test(\"FMG should be enabled with '--add-exports java.base\/jdk.internal.misc=ALL-UNNAMED'\",\n+             SimpleCDSAppTester.of(\"nonModuleNeedsJdkAddExport\")\n+                 .classpath(nonModuleNeedsJdkAddExportJar)\n+                 .addVmArgs(\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\", \"-Xlog:cds\")\n+                 .appCommandLine(\"com.nomodule.needsjdkaddexport.Main\"));\n+\n+        test(\"FMG should be enabled with '--add-exports java.base\/jdk.internal.misc=com.needsjdkaddexport'\",\n+             SimpleCDSAppTester.of(\"moduleNeedsJdkAddExport\")\n+                 .modulepath(modulePath)\n+                 .addVmArgs(\"--add-modules\", \"com.needsjdkaddexport\",\n+                            \"--add-exports\", \"java.base\/jdk.internal.misc=com.needsjdkaddexport\", \"-Xlog:cds\")\n+                 .appCommandLine(\"-m\", \"com.needsjdkaddexport\/com.needsjdkaddexport.Main\"));\n+\n+        test(\"FMG should be enabled with '--add-exports com.foos\/com.foos.internal=com.needsfoosaddexport'\",\n+             SimpleCDSAppTester.of(\"moduleNeedsFoosAddExport\")\n+                 .modulepath(modulePath)\n+                 .addVmArgs(\"--add-modules\", \"com.needsfoosaddexport\",\n+                            \"--add-exports\", \"com.foos\/com.foos.internal=com.needsfoosaddexport\", \"-Xlog:cds\")\n+                 .appCommandLine(\"-m\", \"com.needsfoosaddexport\/com.needsfoosaddexport.Main\"));\n+\n+        test(\"FMG should be enabled with multiple --add-exports\",\n+             SimpleCDSAppTester.of(\"moduleNeedsFoosAddExport\")\n+                 .modulepath(modulePath)\n+                 .addVmArgs(\"--add-modules\", \"com.needsfoosaddexport\",\n+                            \"--add-exports\", \"com.foos\/com.foos.internal=com.needsfoosaddexport\",\n+                            \"--add-exports\", \"com.foos\/com.foos.internal=ALL-UNNAMED\",\n+                            \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                            \"--add-exports\", \"java.base\/jdk.internal.misc=com.foos\",\n+                            \"-Xlog:cds\")\n+                 .appCommandLine(\"-m\", \"com.needsfoosaddexport\/com.needsfoosaddexport.Main\"));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/AddExports.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package com.foos.internal;\n+\n+public class FoosInternal {\n+    public static String test() {\n+      return \"FoosInternal\";\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/src\/com.foos\/com\/foos\/internal\/FoosInternal.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+    \/\/ exports com.foos.internal; \/* do not export this package *\/\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/src\/com.foos\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package com.needsfoosaddexport;\n+\n+import com.foos.internal.FoosInternal;\n+\n+public class Main {\n+    public static void main(String ... args) {\n+        System.out.println(\"FoosInternal.test() = \" + FoosInternal.test());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/src\/com.needsfoosaddexport\/com\/needsfoosaddexport\/Main.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+module com.needsfoosaddexport {\n+    requires com.foos;\n+    exports com.needsfoosaddexport;\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/src\/com.needsfoosaddexport\/module-info.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package com.needsjdkaddexport;\n+\n+import jdk.internal.misc.CDS;\n+\n+public class Main {\n+    public static void main(String ... args) {\n+        System.out.println(\"CDS.isDumpingArchive() = \" + CDS.isDumpingArchive());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/src\/com.needsjdkaddexport\/com\/needsjdkaddexport\/Main.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,27 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+module com.needsjdkaddexport {\n+    exports com.needsjdkaddexport;\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/src\/com.needsjdkaddexport\/module-info.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package com.nomodule.needsjdkaddexport;\n+\n+import jdk.internal.misc.CDS;\n+\n+public class Main {\n+    public static void main(String ... args) {\n+        System.out.println(\"CDS.isDumpingArchive() = \" + CDS.isDumpingArchive());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/modulepath\/src\/com.nomodule.needsjdkaddexport\/com\/nomodule\/needsjdkaddexport\/Main.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"}]}