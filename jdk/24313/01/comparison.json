{"files":[{"patch":"@@ -269,0 +269,5 @@\n+    @Override\n+    protected boolean withAppImageFile(Map<String, ? super Object> params) {\n+        return !withPackageFile;\n+    }\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageBuilder.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -176,3 +176,2 @@\n-            \/\/ Create PackageFile if predefined app image is not signed\n-            if (!StandardBundlerParam.isRuntimeInstaller(params) &&\n-                    !AppImageFile.load(predefinedImage).isSigned()) {\n+            \/\/ Alter app image if predefined app image is not signed\n+            if (!AppImageFile.load(predefinedImage).isSigned()) {\n@@ -181,0 +180,1 @@\n+                Files.deleteIfExists(AppImageFile.getPathInAppImage(appDir));\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,0 +69,4 @@\n+    protected boolean withAppImageFile(Map<String, ? super Object> params) {\n+        return true;\n+    }\n+\n@@ -99,1 +103,3 @@\n-        AppImageFile.save(root, params);\n+        if (withAppImageFile(params)) {\n+            AppImageFile.save(root, params);\n+        }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AbstractAppImageBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-            } else if (hasArgument(\"--app-image\") && hasArgument(\"--mac-sign\")) {\n+            } else if (MacHelper.signPredefinedAppImage(this)) {\n@@ -939,0 +939,21 @@\n+    private boolean expectAppImageFile() {\n+        if (isRuntime()) {\n+            return false;\n+        }\n+\n+        if (TKit.isOSX()) {\n+            if (MacHelper.signPredefinedAppImage(this)) {\n+                \/\/ Request to sign external app image, \".jpackage.xml\" file should exist.\n+                return true;\n+            }\n+\n+            if (!isImagePackageType() && hasArgument(\"--app-image\")) {\n+                \/\/ Build native macOS package from an external app image.\n+                \/\/ If the external app image is signed, \".jpackage.xml\" file should be kept, otherwise removed.\n+                return AppImageFile.load(Path.of(getArgumentValue(\"--app-image\"))).macSigned();\n+            }\n+        }\n+\n+        return isImagePackageType();\n+    }\n+\n@@ -946,1 +967,1 @@\n-        if (isRuntime() || (!isImagePackageType() && !TKit.isOSX())) {\n+        if (!expectAppImageFile()) {\n@@ -948,2 +969,0 @@\n-        } else if (!TKit.isOSX()) {\n-            assertFileInAppImage(lookupPath, lookupPath);\n@@ -953,4 +972,1 @@\n-            \/\/ If file exist validated important values based on arguments\n-            \/\/ Exclude validation when we generating packages from predefined\n-            \/\/ app images, since we do not know if image is signed or not.\n-            if (isImagePackageType() || !hasArgument(\"--app-image\")) {\n+            if (TKit.isOSX()) {\n@@ -962,1 +978,1 @@\n-                boolean expectedValue = hasArgument(\"--mac-sign\");\n+                boolean expectedValue = MacHelper.appImageSigned(this);\n@@ -964,2 +980,2 @@\n-                TKit.assertEquals(Boolean.toString(expectedValue), Boolean.toString(actualValue),\n-                    \"Check for unexptected value in app image file for <signed>\");\n+                TKit.assertEquals(expectedValue, actualValue,\n+                    \"Check for unexpected value of <signed> property in app image file\");\n@@ -969,2 +985,2 @@\n-                TKit.assertEquals(Boolean.toString(expectedValue), Boolean.toString(actualValue),\n-                    \"Check for unexptected value in app image file for <app-store>\");\n+                TKit.assertEquals(expectedValue, actualValue,\n+                    \"Check for unexpected value of <app-store> property in app image file\");\n@@ -1040,0 +1056,3 @@\n+        if (!TKit.isWindows()) {\n+            throw new UnsupportedOperationException();\n+        }\n@@ -1045,0 +1064,3 @@\n+        if (!TKit.isWindows()) {\n+            throw new UnsupportedOperationException();\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":35,"deletions":13,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Objects;\n@@ -152,0 +153,26 @@\n+    public static boolean signPredefinedAppImage(JPackageCommand cmd) {\n+        Objects.requireNonNull(cmd);\n+        if (!TKit.isOSX()) {\n+            throw new UnsupportedOperationException();\n+        }\n+        return cmd.hasArgument(\"--mac-sign\") && cmd.hasArgument(\"--app-image\");\n+    }\n+\n+    public static boolean appImageSigned(JPackageCommand cmd) {\n+        Objects.requireNonNull(cmd);\n+        if (!TKit.isOSX()) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        if (Optional.ofNullable(cmd.getArgumentValue(\"--app-image\")).map(Path::of).map(AppImageFile::load).map(AppImageFile::macSigned).orElse(false)) {\n+            \/\/ The external app image is signed, so the app image is signed too.\n+            return true;\n+        }\n+\n+        if (!cmd.hasArgument(\"--mac-sign\")) {\n+            return false;\n+        }\n+\n+        return (cmd.hasArgument(\"--mac-signing-key-user-name\") || cmd.hasArgument(\"--mac-app-image-sign-identity\"));\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}