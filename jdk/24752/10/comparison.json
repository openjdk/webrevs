{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+import java.awt.Window;\n@@ -77,1 +78,1 @@\n-            throw new SkippedException(\"You have only one monitor in your system - test passed\");\n+            throw new SkippedException(\"You have only one monitor in your system\");\n@@ -85,1 +86,1 @@\n-                \"test failed otherwise it passed.\";;\n+                \"test failed otherwise it passed.\";\n@@ -88,1 +89,0 @@\n-                .title(\"MultiScreenTest Instruction\")\n@@ -90,1 +90,0 @@\n-                .rows((int) INSTRUCTIONS.lines().count() + 2)\n@@ -93,0 +92,1 @@\n+                .positionTestUI(MultiScreenTest::positionTestWindows)\n@@ -97,0 +97,4 @@\n+    private static void positionTestWindows(List<Window> windows, PassFailJFrame.InstructionUI instructionUI) {\n+        \/\/ Do nothing - the location of each window is set when they're created\n+    }\n+\n@@ -102,4 +106,4 @@\n-                for (int i = 0; i < gc.length \/ 2; i++) {\n-                    JFrame f = new JFrame(gc[i]); \/\/test JFrame( gc )\n-                    GCCanvas c = new GCCanvas(gc[i]);\/\/test canvas( gc )\n-                    Rectangle gcBounds = gc[i].getBounds(); \/\/test getBounds()\n+                for (int i = 0; i < gc.length && i < 10; i++) {\n+                    JFrame f = new JFrame(gc[i]);\n+                    GCCanvas c = new GCCanvas(gc[i]);\n+                    Rectangle gcBounds = gc[i].getBounds();\n@@ -110,1 +114,1 @@\n-                    f.setTitle(\"Screen# \" + Integer.toString(j) + \", GC#\" + Integer.toString(i));\n+                    f.setTitle(\"Screen# \" + j + \", GC#\" + i);\n@@ -112,1 +116,2 @@\n-                    f.setLocation(400 + xoffs, (i * 150) + yoffs);\/\/test displaying in right location\n+                    \/\/ test displaying in right location\n+                    f.setLocation(400 + xoffs, (i * 150) + yoffs);\n@@ -115,2 +120,2 @@\n-                    Frame ditherfs = new Frame(\"DitherTest GC#\" + Integer.toString(i), gc[i]);\n-                    ditherfs.setLayout(new BorderLayout()); \/\/showDitherTest\n+                    Frame ditherfs = new Frame(\"DitherTest GC#\" + i, gc[i]);\n+                    ditherfs.setLayout(new BorderLayout());\n@@ -129,16 +134,0 @@\n-}\n-\n-class GCCanvas extends Canvas {\n-\n-    GraphicsConfiguration gc;\n-    Rectangle bounds;\n-    Graphics g = this.getGraphics();\n-    Dimension size = getSize();\n-\n-    public GCCanvas(GraphicsConfiguration gc) {\n-        super(gc);\n-        this.gc = gc;\n-        bounds = gc.getBounds();\n-    }\n-\n-    public void paint( Graphics _g ) {\n@@ -146,1 +135,0 @@\n-        Graphics2D g = (Graphics2D) _g;\n@@ -148,3 +136,1 @@\n-        g.drawRect(0, 0, size.width-1, size.height-1);\n-        g.setColor(Color.lightGray);\n-        g.draw3DRect(1, 1, size.width-3, size.height-3, true);\n+    static class GCCanvas extends Canvas {\n@@ -152,2 +138,3 @@\n-        g.setColor(Color.red);\n-        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n+        GraphicsConfiguration gc;\n+        Rectangle bounds;\n+        Dimension size = getSize();\n@@ -155,1 +142,5 @@\n-        g.drawString(\"HELLO!\", 110, 10);\n+        public GCCanvas(GraphicsConfiguration gc) {\n+            super(gc);\n+            this.gc = gc;\n+            bounds = gc.getBounds();\n+        }\n@@ -157,6 +148,2 @@\n-        g.setColor(Color.blue);\n-        g.drawString(\"ScreenSize=\"+Integer.toString(bounds.width)+\"X\"+\n-                     Integer.toString(bounds.height), 10, 20);\n-        g.setColor(Color.green);\n-        g.drawString(gc.toString(), 10, 30);\n-        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n+        @Override\n+        public void paint( Graphics _g ) {\n@@ -164,2 +151,1 @@\n-        g.setColor(Color.orange);\n-        g.fillRect(40, 20, 50, 50);\n+            Graphics2D g = (Graphics2D) _g;\n@@ -167,2 +153,3 @@\n-        g.setColor(Color.red);\n-        g.drawRect(100, 20, 30, 30);\n+            g.drawRect(0, 0, size.width-1, size.height-1);\n+            g.setColor(Color.lightGray);\n+            g.draw3DRect(1, 1, size.width-3, size.height-3, true);\n@@ -170,2 +157,2 @@\n-        g.setColor(Color.gray);\n-        g.drawLine(220, 20, 280, 40);\n+            g.setColor(Color.red);\n+            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n@@ -173,3 +160,1 @@\n-        g.setColor(Color.cyan);\n-        g.fillArc(150, 30, 30, 30, 0, 200);\n-    }\n+            g.drawString(\"HELLO!\", 110, 10);\n@@ -177,4 +162,6 @@\n-    public Dimension getPreferredSize(){\n-         return new Dimension(300, 200);\n-    }\n-}\n+            g.setColor(Color.blue);\n+            g.drawString(\"ScreenSize=\"+Integer.toString(bounds.width)+\"X\"+\n+                    Integer.toString(bounds.height), 10, 20);\n+            g.setColor(Color.green);\n+            g.drawString(gc.toString(), 10, 30);\n+            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n@@ -182,3 +169,2 @@\n-class DitherCanvas extends Canvas {\n-    Image img;\n-    static String calcString = \"Calculating...\";\n+            g.setColor(Color.orange);\n+            g.fillRect(40, 20, 50, 50);\n@@ -186,1 +172,2 @@\n-    GraphicsConfiguration mGC;\n+            g.setColor(Color.red);\n+            g.drawRect(100, 20, 30, 30);\n@@ -188,4 +175,2 @@\n-    public DitherCanvas(GraphicsConfiguration gc) {\n-        super(gc);\n-        mGC = gc;\n-    }\n+            g.setColor(Color.gray);\n+            g.drawLine(220, 20, 280, 40);\n@@ -193,3 +178,3 @@\n-    public GraphicsConfiguration getGraphicsConfig() {\n-        return mGC;\n-    }\n+            g.setColor(Color.cyan);\n+            g.fillArc(150, 30, 30, 30, 0, 200);\n+        }\n@@ -197,12 +182,3 @@\n-    public void paint(Graphics g) {\n-        int w = getSize().width;\n-        int h = getSize().height;\n-        if (img == null) {\n-            super.paint(g);\n-            g.setColor(Color.black);\n-            FontMetrics fm = g.getFontMetrics();\n-            int x = (w - fm.stringWidth(calcString)) \/ 2;\n-            int y = h \/ 2;\n-            g.drawString(calcString, x, y);\n-        } else {\n-            g.drawImage(img, 0, 0, w, h, this);\n+        @Override\n+        public Dimension getPreferredSize(){\n+            return new Dimension(300, 200);\n@@ -212,3 +188,3 @@\n-    public void update(Graphics g) {\n-        paint(g);\n-    }\n+    static class DitherCanvas extends Canvas {\n+        Image img;\n+        static String calcString = \"Calculating...\";\n@@ -216,3 +192,1 @@\n-    public Dimension getMinimumSize() {\n-        return new Dimension(20, 20);\n-    }\n+        GraphicsConfiguration mGC;\n@@ -220,3 +194,4 @@\n-    public Dimension getPreferredSize() {\n-        return new Dimension(200, 200);\n-    }\n+        public DitherCanvas(GraphicsConfiguration gc) {\n+            super(gc);\n+            mGC = gc;\n+        }\n@@ -224,3 +199,3 @@\n-    public Image getImage() {\n-        return img;\n-    }\n+        public GraphicsConfiguration getGraphicsConfig() {\n+            return mGC;\n+        }\n@@ -228,5 +203,15 @@\n-    public void setImage(Image img) {\n-        this.img = img;\n-        paint(getGraphics());\n-    }\n-}\n+        @Override\n+        public void paint(Graphics g) {\n+            int w = getSize().width;\n+            int h = getSize().height;\n+            if (img == null) {\n+                super.paint(g);\n+                g.setColor(Color.black);\n+                FontMetrics fm = g.getFontMetrics();\n+                int x = (w - fm.stringWidth(calcString)) \/ 2;\n+                int y = h \/ 2;\n+                g.drawString(calcString, x, y);\n+            } else {\n+                g.drawImage(img, 0, 0, w, h, this);\n+            }\n+        }\n@@ -234,34 +219,4 @@\n-class DitherTest extends Panel implements Runnable {\n-    final static int NOOP = 0;\n-    final static int RED = 1;\n-    final static int GREEN = 2;\n-    final static int BLUE = 3;\n-    final static int ALPHA = 4;\n-    final static int SATURATION = 5;\n-\n-    Thread runner;\n-\n-    DitherControls XControls;\n-    DitherControls YControls;\n-    DitherCanvas canvas;\n-\n-    public DitherTest(GraphicsConfiguration gc) {\n-        String xspec, yspec;\n-        int xvals[] = new int[2];\n-        int yvals[] = new int[2];\n-\n-        xspec = \"red\";\n-        yspec = \"blue\";\n-        int xmethod = colormethod(xspec, xvals);\n-        int ymethod = colormethod(yspec, yvals);\n-\n-        setLayout(new BorderLayout());\n-        XControls = new DitherControls(this, xvals[0], xvals[1],\n-                xmethod, false);\n-        YControls = new DitherControls(this, yvals[0], yvals[1],\n-                ymethod, true);\n-        YControls.addRenderButton();\n-        add(\"North\", XControls);\n-        add(\"South\", YControls);\n-        add(\"Center\", canvas = new DitherCanvas(gc));\n-    }\n+        @Override\n+        public void update(Graphics g) {\n+            paint(g);\n+        }\n@@ -269,4 +224,4 @@\n-    public void start() {\n-        runner = new Thread(this);\n-        runner.start();\n-    }\n+        @Override\n+        public Dimension getMinimumSize() {\n+            return new Dimension(20, 20);\n+        }\n@@ -274,2 +229,4 @@\n-    int colormethod(String s, int vals[]) {\n-        int method = NOOP;\n+        @Override\n+        public Dimension getPreferredSize() {\n+            return new Dimension(200, 200);\n+        }\n@@ -277,2 +234,2 @@\n-        if (s == null) {\n-            s = \"\";\n+        public Image getImage() {\n+            return img;\n@@ -281,17 +238,3 @@\n-        String lower = s.toLowerCase();\n-        int len = 0;\n-        if (lower.startsWith(\"red\")) {\n-            method = RED;\n-            lower = lower.substring(3);\n-        } else if (lower.startsWith(\"green\")) {\n-            method = GREEN;\n-            lower = lower.substring(5);\n-        } else if (lower.startsWith(\"blue\")) {\n-            method = BLUE;\n-            lower = lower.substring(4);\n-        } else if (lower.startsWith(\"alpha\")) {\n-            method = ALPHA;\n-            lower = lower.substring(4);\n-        } else if (lower.startsWith(\"saturation\")) {\n-            method = SATURATION;\n-            lower = lower.substring(10);\n+        public void setImage(Image img) {\n+            this.img = img;\n+            paint(getGraphics());\n@@ -299,0 +242,1 @@\n+    }\n@@ -300,4 +244,33 @@\n-        if (method == NOOP) {\n-            vals[0] = 0;\n-            vals[1] = 0;\n-            return method;\n+    static class DitherTest extends Panel implements Runnable {\n+        final static int NOOP = 0;\n+        final static int RED = 1;\n+        final static int GREEN = 2;\n+        final static int BLUE = 3;\n+        final static int ALPHA = 4;\n+        final static int SATURATION = 5;\n+\n+        Thread runner;\n+\n+        DitherControls XControls;\n+        DitherControls YControls;\n+        DitherCanvas canvas;\n+\n+        public DitherTest(GraphicsConfiguration gc) {\n+            String xspec, yspec;\n+            int xvals[] = new int[2];\n+            int yvals[] = new int[2];\n+\n+            xspec = \"red\";\n+            yspec = \"blue\";\n+            int xmethod = colormethod(xspec, xvals);\n+            int ymethod = colormethod(yspec, yvals);\n+\n+            setLayout(new BorderLayout());\n+            XControls = new DitherControls(this, xvals[0], xvals[1],\n+                    xmethod, false);\n+            YControls = new DitherControls(this, yvals[0], yvals[1],\n+                    ymethod, true);\n+            YControls.addRenderButton();\n+            add(\"North\", XControls);\n+            add(\"South\", YControls);\n+            add(\"Center\", canvas = new DitherCanvas(gc));\n@@ -306,2 +279,4 @@\n-        int begval = 0;\n-        int endval = 255;\n+        public void start() {\n+            runner = new Thread(this);\n+            runner.start();\n+        }\n@@ -309,7 +284,5 @@\n-        try {\n-            int dash = lower.indexOf('-');\n-            if (dash < 0) {\n-                begval = endval = Integer.parseInt(lower);\n-            } else {\n-                begval = Integer.parseInt(lower.substring(0, dash));\n-                endval = Integer.parseInt(lower.substring(dash + 1));\n+        int colormethod(String s, int vals[]) {\n+            int method = NOOP;\n+\n+            if (s == null) {\n+                s = \"\";\n@@ -317,2 +290,0 @@\n-        } catch (Exception e) {\n-        }\n@@ -320,12 +291,18 @@\n-        if (begval < 0) {\n-            begval = 0;\n-        }\n-        if (endval < 0) {\n-            endval = 0;\n-        }\n-        if (begval > 255) {\n-            begval = 255;\n-        }\n-        if (endval > 255) {\n-            endval = 255;\n-        }\n+            String lower = s.toLowerCase();\n+            int len = 0;\n+            if (lower.startsWith(\"red\")) {\n+                method = RED;\n+                lower = lower.substring(3);\n+            } else if (lower.startsWith(\"green\")) {\n+                method = GREEN;\n+                lower = lower.substring(5);\n+            } else if (lower.startsWith(\"blue\")) {\n+                method = BLUE;\n+                lower = lower.substring(4);\n+            } else if (lower.startsWith(\"alpha\")) {\n+                method = ALPHA;\n+                lower = lower.substring(4);\n+            } else if (lower.startsWith(\"saturation\")) {\n+                method = SATURATION;\n+                lower = lower.substring(10);\n+            }\n@@ -333,2 +310,5 @@\n-        vals[0] = begval;\n-        vals[1] = endval;\n+            if (method == NOOP) {\n+                vals[0] = 0;\n+                vals[1] = 0;\n+                return method;\n+            }\n@@ -336,2 +316,2 @@\n-        return method;\n-    }\n+            int begval = 0;\n+            int endval = 255;\n@@ -339,30 +319,7 @@\n-    void applymethod(int c[], int method, int step, int total, int vals[]) {\n-        if (method == NOOP)\n-            return;\n-        int val = ((total < 2)\n-                ? vals[0]\n-                : vals[0] + ((vals[1] - vals[0]) * step \/ (total - 1)));\n-        switch (method) {\n-            case RED:\n-                c[0] = val;\n-                break;\n-            case GREEN:\n-                c[1] = val;\n-                break;\n-            case BLUE:\n-                c[2] = val;\n-                break;\n-            case ALPHA:\n-                c[3] = val;\n-                break;\n-            case SATURATION:\n-                int max = Math.max(Math.max(c[0], c[1]), c[2]);\n-                int min = max * (255 - val) \/ 255;\n-                if (c[0] == 0) {\n-                    c[0] = min;\n-                }\n-                if (c[1] == 0) {\n-                    c[1] = min;\n-                }\n-                if (c[2] == 0) {\n-                    c[2] = min;\n+            try {\n+                int dash = lower.indexOf('-');\n+                if (dash < 0) {\n+                    begval = endval = Integer.parseInt(lower);\n+                } else {\n+                    begval = Integer.parseInt(lower.substring(0, dash));\n+                    endval = Integer.parseInt(lower.substring(dash + 1));\n@@ -370,1 +327,20 @@\n-                break;\n+            } catch (Exception e) {\n+            }\n+\n+            if (begval < 0) {\n+                begval = 0;\n+            }\n+            if (endval < 0) {\n+                endval = 0;\n+            }\n+            if (begval > 255) {\n+                begval = 255;\n+            }\n+            if (endval > 255) {\n+                endval = 255;\n+            }\n+\n+            vals[0] = begval;\n+            vals[1] = endval;\n+\n+            return method;\n@@ -372,1 +348,0 @@\n-    }\n@@ -374,6 +349,32 @@\n-    public void run() {\n-        canvas.setImage(null);  \/\/ Wipe previous image\n-        Image img = calculateImage();\n-        synchronized (this) {\n-            if (img != null && runner == Thread.currentThread()) {\n-                canvas.setImage(img);\n+        void applymethod(int c[], int method, int step, int total, int vals[]) {\n+            if (method == NOOP)\n+                return;\n+            int val = ((total < 2)\n+                    ? vals[0]\n+                    : vals[0] + ((vals[1] - vals[0]) * step \/ (total - 1)));\n+            switch (method) {\n+                case RED:\n+                    c[0] = val;\n+                    break;\n+                case GREEN:\n+                    c[1] = val;\n+                    break;\n+                case BLUE:\n+                    c[2] = val;\n+                    break;\n+                case ALPHA:\n+                    c[3] = val;\n+                    break;\n+                case SATURATION:\n+                    int max = Math.max(Math.max(c[0], c[1]), c[2]);\n+                    int min = max * (255 - val) \/ 255;\n+                    if (c[0] == 0) {\n+                        c[0] = min;\n+                    }\n+                    if (c[1] == 0) {\n+                        c[1] = min;\n+                    }\n+                    if (c[2] == 0) {\n+                        c[2] = min;\n+                    }\n+                    break;\n@@ -382,1 +383,0 @@\n-    }\n@@ -384,27 +384,7 @@\n-    \/**\n-     * Calculates and returns the image.  Halts the calculation and returns\n-     * null if stopped during the calculation.\n-     *\/\n-    Image calculateImage() {\n-        Thread me = Thread.currentThread();\n-\n-        int width = canvas.getSize().width;\n-        int height = canvas.getSize().height;\n-        int xvals[] = new int[2];\n-        int yvals[] = new int[2];\n-        int xmethod = XControls.getParams(xvals);\n-        int ymethod = YControls.getParams(yvals);\n-        int pixels[] = new int[width * height];\n-        int c[] = new int[4];\n-        int index = 0;\n-\n-        for (int j = 0; j < height; j++) {\n-            for (int i = 0; i < width; i++) {\n-                c[0] = c[1] = c[2] = 0;\n-                c[3] = 255;\n-                if (xmethod < ymethod) {\n-                    applymethod(c, xmethod, i, width, xvals);\n-                    applymethod(c, ymethod, j, height, yvals);\n-                } else {\n-                    applymethod(c, ymethod, j, height, yvals);\n-                    applymethod(c, xmethod, i, width, xvals);\n+        @Override\n+        public void run() {\n+            canvas.setImage(null);  \/\/ Wipe previous image\n+            Image img = calculateImage();\n+            synchronized (this) {\n+                if (img != null && runner == Thread.currentThread()) {\n+                    canvas.setImage(img);\n@@ -412,9 +392,0 @@\n-                pixels[index++] = ((c[3] << 24) |\n-                        (c[0] << 16) |\n-                        (c[1] << 8) |\n-                        (c[2] << 0));\n-\n-            }\n-            \/\/ Poll once per row to see if we've been told to stop.\n-            if (runner != me) {\n-                return null;\n@@ -424,3 +395,32 @@\n-        return createImage(new MemoryImageSource(width, height,\n-                ColorModel.getRGBdefault(), pixels, 0, width));\n-    }\n+        \/**\n+         * Calculates and returns the image.  Halts the calculation and returns\n+         * null if stopped during the calculation.\n+         *\/\n+        Image calculateImage() {\n+            Thread me = Thread.currentThread();\n+\n+            int width = canvas.getSize().width;\n+            int height = canvas.getSize().height;\n+            int xvals[] = new int[2];\n+            int yvals[] = new int[2];\n+            int xmethod = XControls.getParams(xvals);\n+            int ymethod = YControls.getParams(yvals);\n+            int pixels[] = new int[width * height];\n+            int c[] = new int[4];\n+            int index = 0;\n+\n+            for (int j = 0; j < height; j++) {\n+                for (int i = 0; i < width; i++) {\n+                    c[0] = c[1] = c[2] = 0;\n+                    c[3] = 255;\n+                    if (xmethod < ymethod) {\n+                        applymethod(c, xmethod, i, width, xvals);\n+                        applymethod(c, ymethod, j, height, yvals);\n+                    } else {\n+                        applymethod(c, ymethod, j, height, yvals);\n+                        applymethod(c, xmethod, i, width, xvals);\n+                    }\n+                    pixels[index++] = ((c[3] << 24) |\n+                            (c[0] << 16) |\n+                            (c[1] << 8) |\n+                            (c[2] << 0));\n@@ -428,3 +428,6 @@\n-    public String getInfo() {\n-        return \"An interactive demonstration of dithering.\";\n-    }\n+                }\n+                \/\/ Poll once per row to see if we've been told to stop.\n+                if (runner != me) {\n+                    return null;\n+                }\n+            }\n@@ -432,10 +435,3 @@\n-    public String[][] getParameterInfo() {\n-        String[][] info = {\n-                {\"xaxis\", \"{RED, GREEN, BLUE, PINK, ORANGE, MAGENTA, CYAN, WHITE, YELLOW, GRAY, DARKGRAY}\",\n-                 \"The color of the Y axis.  Default is RED.\"},\n-                {\"yaxis\", \"{RED, GREEN, BLUE, PINK, ORANGE, MAGENTA, CYAN, WHITE, YELLOW, GRAY, DARKGRAY}\",\n-                 \"The color of the X axis.  Default is BLUE.\"}\n-        };\n-        return info;\n-    }\n-}\n+            return createImage(new MemoryImageSource(width, height,\n+                    ColorModel.getRGBdefault(), pixels, 0, width));\n+        }\n@@ -443,25 +439,3 @@\n-class DitherControls extends Panel implements ActionListener {\n-    TextField start;\n-    TextField end;\n-    Button button;\n-    Choice choice;\n-    DitherTest dt;\n-\n-    static LayoutManager dcLayout = new FlowLayout(FlowLayout.CENTER, 10, 5);\n-\n-    public DitherControls(DitherTest app, int s, int e, int type,\n-                          boolean vertical) {\n-        dt = app;\n-        setLayout(dcLayout);\n-        add(new Label(vertical ? \"Vertical\" : \"Horizontal\"));\n-        add(choice = new Choice());\n-        choice.addItem(\"Noop\");\n-        choice.addItem(\"Red\");\n-        choice.addItem(\"Green\");\n-        choice.addItem(\"Blue\");\n-        choice.addItem(\"Alpha\");\n-        choice.addItem(\"Saturation\");\n-        choice.select(type);\n-        add(start = new TextField(Integer.toString(s), 4));\n-        add(end = new TextField(Integer.toString(e), 4));\n-    }\n+        public String getInfo() {\n+            return \"An interactive demonstration of dithering.\";\n+        }\n@@ -469,3 +443,9 @@\n-    public void addRenderButton() {\n-        add(button = new Button(\"New Image\"));\n-        button.addActionListener(this);\n+        public String[][] getParameterInfo() {\n+            String[][] info = {\n+                    {\"xaxis\", \"{RED, GREEN, BLUE, PINK, ORANGE, MAGENTA, CYAN, WHITE, YELLOW, GRAY, DARKGRAY}\",\n+                            \"The color of the Y axis.  Default is RED.\"},\n+                    {\"yaxis\", \"{RED, GREEN, BLUE, PINK, ORANGE, MAGENTA, CYAN, WHITE, YELLOW, GRAY, DARKGRAY}\",\n+                            \"The color of the X axis.  Default is BLUE.\"}\n+            };\n+            return info;\n+        }\n@@ -474,5 +454,30 @@\n-    public int getParams(int vals[]) {\n-        vals[0] = Integer.parseInt(start.getText());\n-        vals[1] = Integer.parseInt(end.getText());\n-        return choice.getSelectedIndex();\n-    }\n+    static class DitherControls extends Panel implements ActionListener {\n+        TextField start;\n+        TextField end;\n+        Button button;\n+        Choice choice;\n+        DitherTest dt;\n+\n+        static LayoutManager dcLayout = new FlowLayout(FlowLayout.CENTER, 10, 5);\n+\n+        public DitherControls(DitherTest app, int s, int e, int type,\n+                              boolean vertical) {\n+            dt = app;\n+            setLayout(dcLayout);\n+            add(new Label(vertical ? \"Vertical\" : \"Horizontal\"));\n+            add(choice = new Choice());\n+            choice.addItem(\"Noop\");\n+            choice.addItem(\"Red\");\n+            choice.addItem(\"Green\");\n+            choice.addItem(\"Blue\");\n+            choice.addItem(\"Alpha\");\n+            choice.addItem(\"Saturation\");\n+            choice.select(type);\n+            add(start = new TextField(Integer.toString(s), 4));\n+            add(end = new TextField(Integer.toString(e), 4));\n+        }\n+\n+        public void addRenderButton() {\n+            add(button = new Button(\"New Image\"));\n+            button.addActionListener(this);\n+        }\n@@ -480,3 +485,11 @@\n-    public void actionPerformed(ActionEvent e) {\n-        if (e.getSource() == button) {\n-            dt.start();\n+        public int getParams(int vals[]) {\n+            vals[0] = Integer.parseInt(start.getText());\n+            vals[1] = Integer.parseInt(end.getText());\n+            return choice.getSelectedIndex();\n+        }\n+\n+        @Override\n+        public void actionPerformed(ActionEvent e) {\n+            if (e.getSource() == button) {\n+                dt.start();\n+            }\n@@ -486,0 +499,1 @@\n+\n","filename":"test\/jdk\/java\/awt\/Frame\/MultiScreenTest.java","additions":326,"deletions":312,"binary":false,"changes":638,"status":"modified"}]}