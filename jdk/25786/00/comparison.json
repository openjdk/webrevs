{"files":[{"patch":"@@ -1267,1 +1267,1 @@\n-                        tree.vartype = make.Erroneous();\n+                        tree.vartype = make.at(tree.pos()).Erroneous();\n@@ -1274,1 +1274,1 @@\n-                            tree.vartype = make.Erroneous();\n+                            tree.vartype = make.at(tree.pos()).Erroneous();\n@@ -5720,0 +5720,3 @@\n+        } else if (tree.declaredUsingVar()) {\n+            Assert.check(tree.typePos != Position.NOPOS);\n+            tree.vartype = make.at(tree.typePos).Type(type);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1008,0 +1008,1 @@\n+            int varTypePos = Position.NOPOS;\n@@ -1012,0 +1013,1 @@\n+                    varTypePos = e.pos;\n@@ -1049,1 +1051,3 @@\n-                JCVariableDecl var = toP(F.at(varPos).VarDef(mods, name, e, null));\n+                JCVariableDecl var = toP(F.at(varPos).VarDef(mods, name, e, null,\n+                  varTypePos != Position.NOPOS ? JCVariableDecl.DeclKind.VAR : JCVariableDecl.DeclKind.EXPLICIT,\n+                  varTypePos));\n@@ -1051,1 +1055,0 @@\n-                    var.startPos = pos;\n@@ -2193,1 +2196,2 @@\n-                    param.startPos = TreeInfo.getStartPos(param.vartype);\n+                    param.declKind = JCVariableDecl.DeclKind.VAR;\n+                    param.typePos = TreeInfo.getStartPos(param.vartype);\n@@ -3833,1 +3837,1 @@\n-        int startPos = Position.NOPOS;\n+        int varTypePos = Position.NOPOS;\n@@ -3845,0 +3849,1 @@\n+                    varTypePos = elemType.pos;\n@@ -3848,3 +3853,0 @@\n-                    startPos = TreeInfo.getStartPos(mods);\n-                    if (startPos == Position.NOPOS)\n-                        startPos = TreeInfo.getStartPos(type);\n@@ -3856,2 +3858,2 @@\n-        JCVariableDecl result = toP(F.at(pos).VarDef(mods, name, type, init, declaredUsingVar));\n-        result.startPos = startPos;\n+        JCVariableDecl result = toP(F.at(pos).VarDef(mods, name, type, init,\n+          declaredUsingVar ? JCVariableDecl.DeclKind.VAR : JCVariableDecl.DeclKind.EXPLICIT, varTypePos));\n@@ -3971,2 +3973,5 @@\n-        return toP(F.at(pos).VarDef(mods, name, type, null,\n-                type != null && type.hasTag(IDENT) && ((JCIdent)type).name == names.var));\n+        boolean declaredUsingVar = type != null && type.hasTag(IDENT) && ((JCIdent)type).name == names.var;\n+        JCVariableDecl.DeclKind declKind = declaredUsingVar ? JCVariableDecl.DeclKind.VAR :\n+          type != null ? JCVariableDecl.DeclKind.EXPLICIT : JCVariableDecl.DeclKind.IMPLICIT;\n+        int typePos = type != null ? type.pos : pos;\n+        return toP(F.at(pos).VarDef(mods, name, type, null, declKind, typePos));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1005,0 +1005,7 @@\n+\n+        public enum DeclKind {\n+            EXPLICIT,       \/\/ \"SomeType name\"\n+            IMPLICIT,       \/\/ \"name\"\n+            VAR,            \/\/ \"var name\"\n+        }\n+\n@@ -1017,4 +1024,4 @@\n-        \/** explicit start pos *\/\n-        public int startPos = Position.NOPOS;\n-        \/** declared using `var` *\/\n-        private boolean declaredUsingVar;\n+        \/** how the variable's type was declared *\/\n+        public DeclKind declKind;\n+        \/** a source code position to use for \"vartype\" when null (can happen if declKind != EXPLICIT) *\/\n+        public int typePos;\n@@ -1027,1 +1034,1 @@\n-            this(mods, name, vartype, init, sym, false);\n+            this(mods, name, vartype, init, sym, DeclKind.EXPLICIT, Position.NOPOS);\n@@ -1035,1 +1042,2 @@\n-                                 boolean declaredUsingVar) {\n+                                 DeclKind declKind,\n+                                 int typePos) {\n@@ -1041,1 +1049,2 @@\n-            this.declaredUsingVar = declaredUsingVar;\n+            this.declKind = declKind;\n+            this.typePos = typePos;\n@@ -1047,1 +1056,1 @@\n-            this(mods, null, vartype, null, null, false);\n+            this(mods, null, vartype, null, null, DeclKind.EXPLICIT, Position.NOPOS);\n@@ -1062,1 +1071,1 @@\n-            return declaredUsingVar;\n+            return declKind == DeclKind.VAR;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -727,1 +727,4 @@\n-                    printExpr(tree.vartype);\n+                    if (tree.vartype == null && tree.declaredUsingVar())\n+                        print(\"var\");\n+                    else\n+                        printExpr(tree.vartype);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/Pretty.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -554,1 +554,1 @@\n-            return M.at(t.pos).VarDef(mods, t.name, vartype, init);\n+            return M.at(t.pos).VarDef(mods, t.name, vartype, init, t.declKind, t.typePos);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeCopier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -613,3 +613,1 @@\n-                if (node.startPos != Position.NOPOS) {\n-                    return node.startPos;\n-                } else if (node.mods.pos != Position.NOPOS) {\n+                if (node.mods.pos != Position.NOPOS) {\n@@ -617,5 +615,1 @@\n-                } else if (node.vartype == null || node.vartype.pos == Position.NOPOS) {\n-                    \/\/if there's no type (partially typed lambda parameter)\n-                    \/\/simply return node position\n-                    return node.pos;\n-                } else {\n+                } else if (node.vartype != null) {\n@@ -623,0 +617,2 @@\n+                } else if (node.typePos != Position.NOPOS) {\n+                    return node.typePos;\n@@ -624,0 +620,1 @@\n+                break;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -240,2 +240,3 @@\n-    public JCVariableDecl VarDef(JCModifiers mods, Name name, JCExpression vartype, JCExpression init, boolean declaredUsingVar) {\n-        JCVariableDecl tree = new JCVariableDecl(mods, name, vartype, init, null, declaredUsingVar);\n+    public JCVariableDecl VarDef(JCModifiers mods, Name name, JCExpression vartype, JCExpression init,\n+      JCVariableDecl.DeclKind declKind, int typePos) {\n+        JCVariableDecl tree = new JCVariableDecl(mods, name, vartype, init, null, declKind, typePos);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    public static void checkEndPosition(Class<? extends JCTree> nodeType, String input, String marker) throws IOException {\n+    public static void checkPositions(Class<? extends JCTree> nodeType, String input, String markers) throws IOException {\n@@ -74,3 +74,9 @@\n-                    int actual = TreeInfo.getEndPos(tree, unit.endPositions);\n-                    int expected = marker.indexOf('^') + 1;\n-                    if (actual != expected) {\n+\n+                    \/\/ Verify declaration start and end positions\n+                    int start = tree.getStartPosition();\n+                    if (markers.charAt(start) != '<') {\n+                        throw new AssertionError(String.format(\n+                          \"wrong %s pos %d for \\\"%s\\\" in \\\"%s\\\"\", \"start\", start, tree, input));\n+                    }\n+                    int end = TreeInfo.getEndPos(tree, unit.endPositions);\n+                    if (markers.charAt(end - 1) != '>') {\n@@ -78,1 +84,10 @@\n-                          \"wrong end pos %d != %d for \\\"%s\\\" @ %d\", actual, expected, input, tree.pos));\n+                          \"wrong %s pos %d for \\\"%s\\\" in \\\"%s\\\"\", \"end\", end, tree, input));\n+                    }\n+\n+                    \/\/ For variable declarations using \"var\", verify the \"var\" position\n+                    if (tree instanceof JCVariableDecl varDecl && varDecl.declaredUsingVar()) {\n+                        int vpos = varDecl.typePos;\n+                        if (!input.substring(vpos).startsWith(\"var\")) {\n+                            throw new AssertionError(String.format(\n+                              \"wrong %s pos %d for \\\"%s\\\" in \\\"%s\\\"\", \"var\", vpos, tree, input));\n+                        }\n@@ -89,1 +104,1 @@\n-        checkEndPosition(JCModuleDecl.class,\n+        checkPositions(JCModuleDecl.class,\n@@ -91,1 +106,1 @@\n-           \"                                          ^              \");\n+           \"              <--------------------------->              \");\n@@ -94,1 +109,1 @@\n-        checkEndPosition(JCPackageDecl.class,\n+        checkPositions(JCPackageDecl.class,\n@@ -96,1 +111,1 @@\n-           \"                          ^              \");\n+           \"              <----------->              \");\n@@ -99,1 +114,1 @@\n-        checkEndPosition(JCClassDecl.class,\n+        checkPositions(JCClassDecl.class,\n@@ -101,1 +116,1 @@\n-           \"                                         ^              \");\n+           \"              <-------------------------->              \");\n@@ -104,1 +119,1 @@\n-        checkEndPosition(JCMethodDecl.class,\n+        checkPositions(JCMethodDecl.class,\n@@ -106,1 +121,1 @@\n-           \"                                                    ^                \");\n+           \"                           <------------------------>                \");\n@@ -109,1 +124,1 @@\n-        checkEndPosition(JCVariableDecl.class,\n+        checkPositions(JCVariableDecl.class,\n@@ -111,2 +126,2 @@\n-           \"                                ^                \");\n-        checkEndPosition(JCVariableDecl.class,\n+           \"                           <---->                \");\n+        checkPositions(JCVariableDecl.class,\n@@ -114,4 +129,41 @@\n-           \"                                      ^                \");\n-        checkEndPosition(JCVariableDecl.class,\n-           \"\/* comment *\/ class A { try {} catch (Error err) {} } \/* comment *\/\",\n-           \"                                              ^                    \");\n+           \"                           <---------->                \");\n+        checkPositions(JCVariableDecl.class,\n+           \"\/* comment *\/ class Fred { final int x = 123; } \/* comment *\/\",\n+           \"                           <---------------->                \");\n+        checkPositions(JCVariableDecl.class,\n+           \"\/* comment *\/ class Fred { final int x = 123, y = 456; } \/* comment *\/\",\n+           \"                           <---------------->-------->                \");\n+        checkPositions(JCVariableDecl.class,\n+           \"\/* comment *\/ class A { void m() { try {} catch (Error err) {} } } \/* comment *\/\",\n+           \"                                                 <------->                    \");\n+\n+        \/\/ JCVariableDecl with \"var\" declarations\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { var foo; } }\",\n+           \"                     <------>    \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { var foo = 42; } }\",\n+           \"                     <----------->    \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { final var foo = 42; } }\",\n+           \"                     <----------------->    \");\n+\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { java.util.function.Consumer<Byte> = foo -> { } } }\",\n+           \"                                                         <->           \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { java.util.function.Consumer<Byte> = (foo) -> { } } }\",\n+           \"                                                          <->            \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { java.util.function.Consumer<Byte> = (var foo) -> { } } }\",\n+           \"                                                          <----->            \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { void m() { java.util.function.Consumer<Byte> = (final var foo) -> { } } }\",\n+           \"                                                          <----------->            \");\n+\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { record R(int x) { } void m() { switch (null) { case R(var x) -> {} default -> {} } } }\",\n+           \"                   <--->                                        <--->                           \");\n+        checkPositions(JCVariableDecl.class,\n+           \"class A { record R(int x) { } void m() { switch (null) { case R(final var x) -> {} default -> {} } } }\",\n+           \"                   <--->                                        <--------->                           \");\n","filename":"test\/langtools\/tools\/javac\/parser\/DeclarationEndPositions.java","additions":72,"deletions":20,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -75,3 +75,3 @@\n-                        b = o instanceof R(\/*missing*\/ s);\n-                        b = o instanceof R2(R(\/*missing*\/ s), String t);\n-                        b = o instanceof R2(R(\/*missing*\/ s), \/*missing*\/ t);\n+                        b = o instanceof R(var s);\n+                        b = o instanceof R2(R(var s), String t);\n+                        b = o instanceof R2(R(var s), var t);\n@@ -79,2 +79,2 @@\n-                        b = o instanceof R2(R(\/*missing*\/ _), \/*missing*\/ _);\n-                        b = o instanceof R2(R(_), \/*missing*\/ t);\n+                        b = o instanceof R2(R(var _), var _);\n+                        b = o instanceof R2(R(_), var t);\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrettyTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -70,0 +70,6 @@\n+        test.run(\"java.util.function.Consumer<String> c = (|final var testVar|) -> {};\",\n+                 \"final java.lang.String testVar\");\n+        test.run(\"record Rec(int x) { }; switch (null) { case Rec(|var testVar|) -> {} default -> {} };\",\n+                 \"int testVar\");\n+        test.run(\"record Rec(int x) { }; switch (null) { case Rec(|final var testVar|) -> {} default -> {} };\",\n+                 \"final int testVar\");\n","filename":"test\/langtools\/tools\/javac\/tree\/VarTree.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\n+        \/\/ Test 4\n+        Consumer<Depr> c3 = (final var d) -> { };\n","filename":"test\/langtools\/tools\/javac\/tree\/VarWarnPosition.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -6,1 +6,3 @@\n-5 warnings\n+VarWarnPosition.java:27:18: compiler.warn.has.been.deprecated: Depr, compiler.misc.unnamed.package\n+VarWarnPosition.java:27:36: compiler.warn.has.been.deprecated: Depr, compiler.misc.unnamed.package\n+7 warnings\n","filename":"test\/langtools\/tools\/javac\/tree\/VarWarnPosition.out","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}