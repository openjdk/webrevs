{"files":[{"patch":"@@ -0,0 +1,515 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(value = 1, jvmArgs = {\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\"})\n+public class MergeLoadBench {\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    final static VarHandle\n+            INT_L  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.LITTLE_ENDIAN),\n+            INT_B  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.BIG_ENDIAN),\n+            LONG_L = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.LITTLE_ENDIAN),\n+            LONG_B = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.BIG_ENDIAN),\n+            CHAR_L = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.LITTLE_ENDIAN),\n+            CHAR_B = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.BIG_ENDIAN);\n+\n+    final static int NUMBERS = 8192;\n+\n+    final byte[] bytes4 = new byte[NUMBERS * 4];\n+    final byte[] bytes8 = new byte[NUMBERS * 8];\n+    final int [] ints   = new int [NUMBERS    ];\n+    final long[] longs  = new long[NUMBERS    ];\n+\n+    @Setup\n+    public void setup() {\n+        Random r = new Random();\n+        for (int i = 0; i < ints.length; i++) {\n+            ints[i] = r.nextInt();\n+            INT_L.set(bytes4, i * 4, i);\n+        }\n+\n+        for (int i = 0; i < longs.length; i++) {\n+            longs[i] = r.nextLong();\n+            LONG_L.set(bytes8, i * 8, i);\n+        }\n+    }\n+\n+    \/*\n+     * The names of these cases have the following `B\/L\/V\/U` suffixes, which are:\n+     * ```\n+     * B BigEndian\n+     * L LittleEndian\n+     * V VarHandle\n+     * U Unsafe\n+     * R ReverseBytes\n+     * C Unsafe.getChar & putChar\n+     * S Unsafe.getShort & putShort\n+     * ```\n+     *\/\n+\n+    @Benchmark\n+    public void getIntB(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntB(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntBU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntBU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntBV(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (int) INT_B.get(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntL(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntL(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntLU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntLU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntLV(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (int) INT_L.get(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRB(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRB(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRBU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRBU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRL(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRL(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRLU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRLU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += Integer.reverseBytes(\n+                    UNSAFE.getInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4));\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += UNSAFE.getInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongB(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongBU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongBV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (long) LONG_B.get(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongL(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongLU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongLV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (long) LONG_L.get(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRB(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRBU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRL(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRLU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += Long.reverseBytes(\n+                    UNSAFE.getLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8));\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += UNSAFE.getLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharB(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharBV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = (char) CHAR_B.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharBU(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharL(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+    @Benchmark\n+    public void getCharLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharLU(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+\n+    @Benchmark\n+    public void getCharLV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = (char) CHAR_L.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharC(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = UNSAFE.getChar(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    static int getIntB(byte[] array, int offset) {\n+        return ((array[offset    ] & 0xff) << 24)\n+             | ((array[offset + 1] & 0xff) << 16)\n+             | ((array[offset + 2] & 0xff) <<  8)\n+             | ((array[offset + 3] & 0xff)      );\n+    }\n+\n+    static int getIntBU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return ((UNSAFE.getByte(array, address    ) & 0xff) << 24)\n+             | ((UNSAFE.getByte(array, address + 1) & 0xff) << 16)\n+             | ((UNSAFE.getByte(array, address + 2) & 0xff) <<  8)\n+             | ((UNSAFE.getByte(array, address + 3) & 0xff)      );\n+    }\n+\n+    static int getIntL(byte[] array, int offset) {\n+        return ((array[offset       ] & 0xff)      )\n+                | ((array[offset + 1] & 0xff) <<  8)\n+                | ((array[offset + 2] & 0xff) << 16)\n+                | ((array[offset + 3] & 0xff) << 24);\n+    }\n+\n+    static int getIntRB(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntB(array, offset));\n+    }\n+\n+    static int getIntRBU(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntBU(array, offset));\n+    }\n+\n+    static int getIntRL(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntL(array, offset));\n+    }\n+\n+    static int getIntRLU(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntLU(array, offset));\n+    }\n+\n+    static long getLongB(byte[] array, int offset) {\n+        return (((long) array[offset    ] & 0xff) << 56)\n+             | (((long) array[offset + 1] & 0xff) << 48)\n+             | (((long) array[offset + 2] & 0xff) << 40)\n+             | (((long) array[offset + 3] & 0xff) << 32)\n+             | (((long) array[offset + 4] & 0xff) << 24)\n+             | (((long) array[offset + 5] & 0xff) << 16)\n+             | (((long) array[offset + 6] & 0xff) << 8)\n+             | (((long) array[offset + 7] & 0xff)     );\n+    }\n+\n+    static long getLongBU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return (((long)(UNSAFE.getByte(array, address)     & 0xff)) << 56)\n+             | (((long)(UNSAFE.getByte(array, address + 1) & 0xff)) << 48)\n+             | (((long)(UNSAFE.getByte(array, address + 2) & 0xff)) << 40)\n+             | (((long)(UNSAFE.getByte(array, address + 3) & 0xff)) << 32)\n+             | (((long)(UNSAFE.getByte(array, address + 4) & 0xff)) << 24)\n+             | (((long)(UNSAFE.getByte(array, address + 5) & 0xff)) << 16)\n+             | (((long)(UNSAFE.getByte(array, address + 6) & 0xff)) <<  8)\n+             | (((long)(UNSAFE.getByte(array, address + 7) & 0xff))      );\n+    }\n+\n+    public static long getLongL(byte[] array, int offset) {\n+        return (((long) array[offset    ] & 0xff)      )\n+             | (((long) array[offset + 1] & 0xff) <<  8)\n+             | (((long) array[offset + 2] & 0xff) << 16)\n+             | (((long) array[offset + 3] & 0xff) << 24)\n+             | (((long) array[offset + 4] & 0xff) << 32)\n+             | (((long) array[offset + 5] & 0xff) << 40)\n+             | (((long) array[offset + 6] & 0xff) << 48)\n+             | (((long) array[offset + 7] & 0xff) << 56);\n+    }\n+\n+    static long getLongLU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return (((long)(UNSAFE.getByte(array, address    ) & 0xff))      )\n+             | (((long)(UNSAFE.getByte(array, address + 1) & 0xff)) <<  8)\n+             | (((long)(UNSAFE.getByte(array, address + 2) & 0xff)) << 16)\n+             | (((long)(UNSAFE.getByte(array, address + 3) & 0xff)) << 24)\n+             | (((long)(UNSAFE.getByte(array, address + 4) & 0xff)) << 32)\n+             | (((long)(UNSAFE.getByte(array, address + 5) & 0xff)) << 40)\n+             | (((long)(UNSAFE.getByte(array, address + 6) & 0xff)) << 48)\n+             | (((long)(UNSAFE.getByte(array, address + 7) & 0xff)) << 56);\n+    }\n+\n+    static long getLongRB(byte[] array, int offset) {\n+        return getLongB(array, offset);\n+    }\n+\n+    static long getLongRBU(byte[] array, int offset) {\n+        return getLongBU(array, offset);\n+    }\n+\n+    static long getLongRL(byte[] array, int offset) {\n+        return getLongL(array, offset);\n+    }\n+\n+    static long getLongRLU(byte[] array, int offset) {\n+        return getLongLU(array, offset);\n+    }\n+\n+    public static int getIntLU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return ((UNSAFE.getByte(array, address    ) & 0xff)      )\n+             | ((UNSAFE.getByte(array, address + 1) & 0xff) <<  8)\n+             | ((UNSAFE.getByte(array, address + 2) & 0xff) << 16)\n+             | ((UNSAFE.getByte(array, address + 3) & 0xff) << 24);\n+    }\n+\n+    public static char getCharB(byte[] val, int index) {\n+        index <<= 1;\n+        return (char)(((val[index    ] & 0xff) << 8)\n+                    | ((val[index + 1] & 0xff)));\n+    }\n+\n+    public static char getCharBR(byte[] val, int index) {\n+        return Character.reverseBytes(getCharB(val, index));\n+    }\n+\n+    public static char getCharL(byte[] val, int index) {\n+        index <<= 1;\n+        return (char)(((val[index    ] & 0xff))\n+                    | ((val[index + 1] & 0xff) << 8));\n+    }\n+\n+    public static char getCharLR(byte[] val, int index) {\n+        return Character.reverseBytes(getCharL(val, index));\n+    }\n+\n+    public static char getCharBU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        return (char) (((UNSAFE.getByte(array, address    ) & 0xff) << 8)\n+                     | ((UNSAFE.getByte(array, address + 1) & 0xff)     ));\n+    }\n+\n+    public static char getCharLU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        return (char) (((UNSAFE.getByte(array, address    ) & 0xff)     )\n+                     | ((UNSAFE.getByte(array, address + 1) & 0xff) << 8));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MergeLoadBench.java","additions":515,"deletions":0,"binary":false,"changes":515,"status":"added"},{"patch":"@@ -89,109 +89,0 @@\n-    @Benchmark\n-    public void getIntB(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntB(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntBU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntBU(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntBV(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += (int) INT_B.get(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntL(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntL(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntLU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntLU(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntLV(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += (int) INT_L.get(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntRB(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntRB(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntRBU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntRBU(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntRL(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntRL(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntRLU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntRLU(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntRU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += Integer.reverseBytes(\n-                    UNSAFE.getInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4));\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += UNSAFE.getInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n@@ -319,109 +210,0 @@\n-    @Benchmark\n-    public void getLongB(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongB(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongBU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongBU(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongBV(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += (long) LONG_B.get(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongL(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongL(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongLU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongLU(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongLV(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += (long) LONG_L.get(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongRB(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongRB(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongRBU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongRBU(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongRL(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongRL(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongRLU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongRLU(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongRU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += Long.reverseBytes(\n-                    UNSAFE.getLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8));\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += UNSAFE.getLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n@@ -548,70 +330,0 @@\n-    @Benchmark\n-    public void getCharB(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = getCharB(bytes4, i);\n-            sum += c;\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getCharBV(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = (char) CHAR_B.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n-            sum += c;\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getCharBU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = getCharBU(bytes4, i);\n-            sum += c;\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getCharL(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = getCharL(bytes4, i);\n-            sum += c;\n-        }\n-        BH.consume(sum);\n-    }\n-    @Benchmark\n-    public void getCharLU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = getCharLU(bytes4, i);\n-            sum += c;\n-        }\n-        BH.consume(sum);\n-    }\n-\n-\n-    @Benchmark\n-    public void getCharLV(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = (char) CHAR_L.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n-            sum += c;\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getCharC(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = UNSAFE.getChar(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n-            sum += c;\n-        }\n-        BH.consume(sum);\n-    }\n-\n@@ -782,38 +494,0 @@\n-    static int getIntB(byte[] array, int offset) {\n-        return ((array[offset    ] & 0xff) << 24)\n-             | ((array[offset + 1] & 0xff) << 16)\n-             | ((array[offset + 2] & 0xff) <<  8)\n-             | ((array[offset + 3] & 0xff)      );\n-    }\n-\n-    static int getIntBU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n-        return ((UNSAFE.getByte(array, address    ) & 0xff) << 24)\n-             | ((UNSAFE.getByte(array, address + 1) & 0xff) << 16)\n-             | ((UNSAFE.getByte(array, address + 2) & 0xff) <<  8)\n-             | ((UNSAFE.getByte(array, address + 3) & 0xff)      );\n-    }\n-\n-    static int getIntL(byte[] array, int offset) {\n-        return ((array[offset       ] & 0xff)      )\n-                | ((array[offset + 1] & 0xff) <<  8)\n-                | ((array[offset + 2] & 0xff) << 16)\n-                | ((array[offset + 3] & 0xff) << 24);\n-    }\n-\n-    static int getIntRB(byte[] array, int offset) {\n-        return Integer.reverseBytes(getIntB(array, offset));\n-    }\n-\n-    static int getIntRBU(byte[] array, int offset) {\n-        return Integer.reverseBytes(getIntBU(array, offset));\n-    }\n-\n-    static int getIntRL(byte[] array, int offset) {\n-        return Integer.reverseBytes(getIntL(array, offset));\n-    }\n-\n-    static int getIntRLU(byte[] array, int offset) {\n-        return Integer.reverseBytes(getIntLU(array, offset));\n-    }\n-\n@@ -870,62 +544,0 @@\n-    static long getLongB(byte[] array, int offset) {\n-        return (((long) array[offset    ] & 0xff) << 56)\n-             | (((long) array[offset + 1] & 0xff) << 48)\n-             | (((long) array[offset + 2] & 0xff) << 40)\n-             | (((long) array[offset + 3] & 0xff) << 32)\n-             | (((long) array[offset + 4] & 0xff) << 24)\n-             | (((long) array[offset + 5] & 0xff) << 16)\n-             | (((long) array[offset + 6] & 0xff) << 8)\n-             | (((long) array[offset + 7] & 0xff)     );\n-    }\n-\n-    static long getLongBU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n-        return (((long)(UNSAFE.getByte(array, address)     & 0xff)) << 56)\n-             | (((long)(UNSAFE.getByte(array, address + 1) & 0xff)) << 48)\n-             | (((long)(UNSAFE.getByte(array, address + 2) & 0xff)) << 40)\n-             | (((long)(UNSAFE.getByte(array, address + 3) & 0xff)) << 32)\n-             | (((long)(UNSAFE.getByte(array, address + 4) & 0xff)) << 24)\n-             | (((long)(UNSAFE.getByte(array, address + 5) & 0xff)) << 16)\n-             | (((long)(UNSAFE.getByte(array, address + 6) & 0xff)) <<  8)\n-             | (((long)(UNSAFE.getByte(array, address + 7) & 0xff))      );\n-    }\n-\n-    public static long getLongL(byte[] array, int offset) {\n-        return (((long) array[offset    ] & 0xff)      )\n-             | (((long) array[offset + 1] & 0xff) <<  8)\n-             | (((long) array[offset + 2] & 0xff) << 16)\n-             | (((long) array[offset + 3] & 0xff) << 24)\n-             | (((long) array[offset + 4] & 0xff) << 32)\n-             | (((long) array[offset + 5] & 0xff) << 40)\n-             | (((long) array[offset + 6] & 0xff) << 48)\n-             | (((long) array[offset + 7] & 0xff) << 56);\n-    }\n-\n-    static long getLongLU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n-        return (((long)(UNSAFE.getByte(array, address    ) & 0xff))      )\n-             | (((long)(UNSAFE.getByte(array, address + 1) & 0xff)) <<  8)\n-             | (((long)(UNSAFE.getByte(array, address + 2) & 0xff)) << 16)\n-             | (((long)(UNSAFE.getByte(array, address + 3) & 0xff)) << 24)\n-             | (((long)(UNSAFE.getByte(array, address + 4) & 0xff)) << 32)\n-             | (((long)(UNSAFE.getByte(array, address + 5) & 0xff)) << 40)\n-             | (((long)(UNSAFE.getByte(array, address + 6) & 0xff)) << 48)\n-             | (((long)(UNSAFE.getByte(array, address + 7) & 0xff)) << 56);\n-    }\n-\n-    static long getLongRB(byte[] array, int offset) {\n-        return getLongB(array, offset);\n-    }\n-\n-    static long getLongRBU(byte[] array, int offset) {\n-        return getLongBU(array, offset);\n-    }\n-\n-    static long getLongRL(byte[] array, int offset) {\n-        return getLongL(array, offset);\n-    }\n-\n-    static long getLongRLU(byte[] array, int offset) {\n-        return getLongLU(array, offset);\n-    }\n-\n@@ -998,40 +610,0 @@\n-    public static int getIntLU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n-        return ((UNSAFE.getByte(array, address    ) & 0xff)      )\n-             | ((UNSAFE.getByte(array, address + 1) & 0xff) <<  8)\n-             | ((UNSAFE.getByte(array, address + 2) & 0xff) << 16)\n-             | ((UNSAFE.getByte(array, address + 3) & 0xff) << 24);\n-    }\n-\n-    public static char getCharB(byte[] val, int index) {\n-        index <<= 1;\n-        return (char)(((val[index    ] & 0xff) << 8)\n-                    | ((val[index + 1] & 0xff)));\n-    }\n-\n-    public static char getCharBR(byte[] val, int index) {\n-        return Character.reverseBytes(getCharB(val, index));\n-    }\n-\n-    public static char getCharL(byte[] val, int index) {\n-        index <<= 1;\n-        return (char)(((val[index    ] & 0xff))\n-                    | ((val[index + 1] & 0xff) << 8));\n-    }\n-\n-    public static char getCharLR(byte[] val, int index) {\n-        return Character.reverseBytes(getCharL(val, index));\n-    }\n-\n-    public static char getCharBU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n-        return (char) (((UNSAFE.getByte(array, address    ) & 0xff) << 8)\n-                     | ((UNSAFE.getByte(array, address + 1) & 0xff)     ));\n-    }\n-\n-    public static char getCharLU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n-        return (char) (((UNSAFE.getByte(array, address    ) & 0xff)     )\n-                     | ((UNSAFE.getByte(array, address + 1) & 0xff) << 8));\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MergeStoreBench.java","additions":0,"deletions":428,"binary":false,"changes":428,"status":"modified"}]}