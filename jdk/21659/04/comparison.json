{"files":[{"patch":"@@ -0,0 +1,515 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 3, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(value = 1, jvmArgs = {\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\"})\n+public class MergeLoadBench {\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    final static VarHandle\n+            INT_L  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.LITTLE_ENDIAN),\n+            INT_B  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.BIG_ENDIAN),\n+            LONG_L = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.LITTLE_ENDIAN),\n+            LONG_B = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.BIG_ENDIAN),\n+            CHAR_L = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.LITTLE_ENDIAN),\n+            CHAR_B = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.BIG_ENDIAN);\n+\n+    final static int NUMBERS = 8192;\n+\n+    final byte[] bytes4 = new byte[NUMBERS * 4];\n+    final byte[] bytes8 = new byte[NUMBERS * 8];\n+    final int [] ints   = new int [NUMBERS    ];\n+    final long[] longs  = new long[NUMBERS    ];\n+\n+    @Setup\n+    public void setup() {\n+        Random r = new Random();\n+        for (int i = 0; i < ints.length; i++) {\n+            ints[i] = r.nextInt();\n+            INT_L.set(bytes4, i * 4, i);\n+        }\n+\n+        for (int i = 0; i < longs.length; i++) {\n+            longs[i] = r.nextLong();\n+            LONG_L.set(bytes8, i * 8, i);\n+        }\n+    }\n+\n+    \/*\n+     * The names of these cases have the following `B\/L\/V\/U` suffixes, which are:\n+     * ```\n+     * B BigEndian\n+     * L LittleEndian\n+     * V VarHandle\n+     * U Unsafe\n+     * R ReverseBytes\n+     * C Unsafe.getChar & putChar\n+     * S Unsafe.getShort & putShort\n+     * ```\n+     *\/\n+\n+    @Benchmark\n+    public void getIntB(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntB(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntBU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntBU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntBV(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (int) INT_B.get(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntL(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntL(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntLU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntLU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntLV(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (int) INT_L.get(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRB(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRB(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRBU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRBU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRL(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRL(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRLU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += getIntRLU(bytes4, i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntRU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += Integer.reverseBytes(\n+                    UNSAFE.getInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4));\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getIntU(Blackhole BH) {\n+        int sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += UNSAFE.getInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongB(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongBU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongBV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (long) LONG_B.get(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongL(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongLU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongLV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < ints.length; i++) {\n+            sum += (long) LONG_L.get(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRB(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRBU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRL(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += getLongRLU(bytes8, i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongRU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += Long.reverseBytes(\n+                    UNSAFE.getLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8));\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getLongU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            sum += UNSAFE.getLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8);\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharB(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharB(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharBV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = (char) CHAR_B.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharBU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharBU(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharL(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharL(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+    @Benchmark\n+    public void getCharLU(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = getCharLU(bytes4, i);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+\n+    @Benchmark\n+    public void getCharLV(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = (char) CHAR_L.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void getCharC(Blackhole BH) {\n+        long sum = 0;\n+        for (int i = 0; i < longs.length; i++) {\n+            char c = UNSAFE.getChar(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n+            sum += c;\n+        }\n+        BH.consume(sum);\n+    }\n+\n+    static int getIntB(byte[] array, int offset) {\n+        return ((array[offset    ] & 0xff) << 24)\n+             | ((array[offset + 1] & 0xff) << 16)\n+             | ((array[offset + 2] & 0xff) <<  8)\n+             | ((array[offset + 3] & 0xff)      );\n+    }\n+\n+    static int getIntBU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return ((UNSAFE.getByte(array, address    ) & 0xff) << 24)\n+             | ((UNSAFE.getByte(array, address + 1) & 0xff) << 16)\n+             | ((UNSAFE.getByte(array, address + 2) & 0xff) <<  8)\n+             | ((UNSAFE.getByte(array, address + 3) & 0xff)      );\n+    }\n+\n+    static int getIntL(byte[] array, int offset) {\n+        return ((array[offset       ] & 0xff)      )\n+                | ((array[offset + 1] & 0xff) <<  8)\n+                | ((array[offset + 2] & 0xff) << 16)\n+                | ((array[offset + 3] & 0xff) << 24);\n+    }\n+\n+    static int getIntRB(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntB(array, offset));\n+    }\n+\n+    static int getIntRBU(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntBU(array, offset));\n+    }\n+\n+    static int getIntRL(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntL(array, offset));\n+    }\n+\n+    static int getIntRLU(byte[] array, int offset) {\n+        return Integer.reverseBytes(getIntLU(array, offset));\n+    }\n+\n+    static long getLongB(byte[] array, int offset) {\n+        return (((long) array[offset    ] & 0xff) << 56)\n+             | (((long) array[offset + 1] & 0xff) << 48)\n+             | (((long) array[offset + 2] & 0xff) << 40)\n+             | (((long) array[offset + 3] & 0xff) << 32)\n+             | (((long) array[offset + 4] & 0xff) << 24)\n+             | (((long) array[offset + 5] & 0xff) << 16)\n+             | (((long) array[offset + 6] & 0xff) << 8)\n+             | (((long) array[offset + 7] & 0xff)     );\n+    }\n+\n+    static long getLongBU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return (((long)(UNSAFE.getByte(array, address)     & 0xff)) << 56)\n+             | (((long)(UNSAFE.getByte(array, address + 1) & 0xff)) << 48)\n+             | (((long)(UNSAFE.getByte(array, address + 2) & 0xff)) << 40)\n+             | (((long)(UNSAFE.getByte(array, address + 3) & 0xff)) << 32)\n+             | (((long)(UNSAFE.getByte(array, address + 4) & 0xff)) << 24)\n+             | (((long)(UNSAFE.getByte(array, address + 5) & 0xff)) << 16)\n+             | (((long)(UNSAFE.getByte(array, address + 6) & 0xff)) <<  8)\n+             | (((long)(UNSAFE.getByte(array, address + 7) & 0xff))      );\n+    }\n+\n+    public static long getLongL(byte[] array, int offset) {\n+        return (((long) array[offset    ] & 0xff)      )\n+             | (((long) array[offset + 1] & 0xff) <<  8)\n+             | (((long) array[offset + 2] & 0xff) << 16)\n+             | (((long) array[offset + 3] & 0xff) << 24)\n+             | (((long) array[offset + 4] & 0xff) << 32)\n+             | (((long) array[offset + 5] & 0xff) << 40)\n+             | (((long) array[offset + 6] & 0xff) << 48)\n+             | (((long) array[offset + 7] & 0xff) << 56);\n+    }\n+\n+    static long getLongLU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return (((long)(UNSAFE.getByte(array, address    ) & 0xff))      )\n+             | (((long)(UNSAFE.getByte(array, address + 1) & 0xff)) <<  8)\n+             | (((long)(UNSAFE.getByte(array, address + 2) & 0xff)) << 16)\n+             | (((long)(UNSAFE.getByte(array, address + 3) & 0xff)) << 24)\n+             | (((long)(UNSAFE.getByte(array, address + 4) & 0xff)) << 32)\n+             | (((long)(UNSAFE.getByte(array, address + 5) & 0xff)) << 40)\n+             | (((long)(UNSAFE.getByte(array, address + 6) & 0xff)) << 48)\n+             | (((long)(UNSAFE.getByte(array, address + 7) & 0xff)) << 56);\n+    }\n+\n+    static long getLongRB(byte[] array, int offset) {\n+        return getLongB(array, offset);\n+    }\n+\n+    static long getLongRBU(byte[] array, int offset) {\n+        return getLongBU(array, offset);\n+    }\n+\n+    static long getLongRL(byte[] array, int offset) {\n+        return getLongL(array, offset);\n+    }\n+\n+    static long getLongRLU(byte[] array, int offset) {\n+        return getLongLU(array, offset);\n+    }\n+\n+    public static int getIntLU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        return ((UNSAFE.getByte(array, address    ) & 0xff)      )\n+             | ((UNSAFE.getByte(array, address + 1) & 0xff) <<  8)\n+             | ((UNSAFE.getByte(array, address + 2) & 0xff) << 16)\n+             | ((UNSAFE.getByte(array, address + 3) & 0xff) << 24);\n+    }\n+\n+    public static char getCharB(byte[] val, int index) {\n+        index <<= 1;\n+        return (char)(((val[index    ] & 0xff) << 8)\n+                    | ((val[index + 1] & 0xff)));\n+    }\n+\n+    public static char getCharBR(byte[] val, int index) {\n+        return Character.reverseBytes(getCharB(val, index));\n+    }\n+\n+    public static char getCharL(byte[] val, int index) {\n+        index <<= 1;\n+        return (char)(((val[index    ] & 0xff))\n+                    | ((val[index + 1] & 0xff) << 8));\n+    }\n+\n+    public static char getCharLR(byte[] val, int index) {\n+        return Character.reverseBytes(getCharL(val, index));\n+    }\n+\n+    public static char getCharBU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        return (char) (((UNSAFE.getByte(array, address    ) & 0xff) << 8)\n+                     | ((UNSAFE.getByte(array, address + 1) & 0xff)     ));\n+    }\n+\n+    public static char getCharLU(byte[] array, int offset) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+        return (char) (((UNSAFE.getByte(array, address    ) & 0xff)     )\n+                     | ((UNSAFE.getByte(array, address + 1) & 0xff) << 8));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MergeLoadBench.java","additions":515,"deletions":0,"binary":false,"changes":515,"status":"added"},{"patch":"@@ -28,3 +28,0 @@\n-import org.openjdk.jmh.runner.Runner;\n-import org.openjdk.jmh.runner.options.Options;\n-import org.openjdk.jmh.runner.options.OptionsBuilder;\n@@ -34,1 +31,0 @@\n-import java.lang.reflect.Field;\n@@ -44,1 +40,1 @@\n-@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 3, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n@@ -46,1 +42,1 @@\n-@Fork(value = 3, jvmArgs = {\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\"})\n+@Fork(value = 1, jvmArgs = {\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\"})\n@@ -50,6 +46,7 @@\n-    final static VarHandle INT_L  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.LITTLE_ENDIAN);\n-    final static VarHandle INT_B  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.BIG_ENDIAN);\n-    final static VarHandle LONG_L = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.LITTLE_ENDIAN);\n-    final static VarHandle LONG_B = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.BIG_ENDIAN);\n-    final static VarHandle CHAR_L = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.LITTLE_ENDIAN);\n-    final static VarHandle CHAR_B = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.BIG_ENDIAN);\n+    final static VarHandle\n+            INT_L  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.LITTLE_ENDIAN),\n+            INT_B  = MethodHandles.byteArrayViewVarHandle(int[].class , ByteOrder.BIG_ENDIAN),\n+            LONG_L = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.LITTLE_ENDIAN),\n+            LONG_B = MethodHandles.byteArrayViewVarHandle(long[].class, ByteOrder.BIG_ENDIAN),\n+            CHAR_L = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.LITTLE_ENDIAN),\n+            CHAR_B = MethodHandles.byteArrayViewVarHandle(char[].class, ByteOrder.BIG_ENDIAN);\n@@ -92,109 +89,0 @@\n-    @Benchmark\n-    public void getIntB(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntB(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntBU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntBU(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntBV(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += (int) INT_B.get(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntL(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntL(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntLU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntLU(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntLV(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += (int) INT_L.get(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntRB(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntRB(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntRBU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntRBU(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntRL(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntRL(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntRLU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += getIntRLU(bytes4, i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntRU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += Integer.reverseBytes(\n-                    UNSAFE.getInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4));\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getIntU(Blackhole BH) {\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += UNSAFE.getInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4);\n-        }\n-        BH.consume(sum);\n-    }\n-\n@@ -214,5 +102,4 @@\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            int v = ints[i];\n-            setIntBU(bytes4, i * 4, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = ints.length - 1; i >= 0; i--) {\n+            setIntBU(bytes4, off, ints[i]);\n+            off += 4;\n@@ -220,1 +107,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -225,5 +112,4 @@\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            int v = ints[i];\n-            INT_B.set(bytes4, i * 4, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = ints.length - 1; i >= 0; i--) {\n+            INT_B.set(bytes4, off, ints[i]);\n+            off += 4;\n@@ -231,1 +117,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -236,5 +122,4 @@\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            int v = ints[i];\n-            setIntL(bytes4, i * 4, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = ints.length - 1; i >= 0; i--) {\n+            setIntL(bytes4, off, ints[i]);\n+            off += 4;\n@@ -242,1 +127,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -247,5 +132,4 @@\n-        int sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            int v = ints[i];\n-            setIntLU(bytes4, i * 4, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = ints.length - 1; i >= 0; i--) {\n+            setIntLU(bytes4, off, ints[i]);\n+            off += 4;\n@@ -253,1 +137,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -258,5 +142,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            int v = ints[i];\n-            INT_L.set(bytes4, i * 4, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = ints.length - 1; i >= 0; i--) {\n+            INT_L.set(bytes4, off, ints[i]);\n+            off += 4;\n@@ -264,1 +147,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -269,5 +152,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            int v = ints[i];\n-            setIntRB(bytes4, i * 4, ints[i]);\n-            sum += v;\n+        int off = 0;\n+        for (int i = ints.length - 1; i >= 0; i--) {\n+            setIntRB(bytes4, off, ints[i]);\n+            off += 4;\n@@ -275,1 +157,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -280,5 +162,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            int v = ints[i];\n-            setIntRBU(bytes4, i * 4, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = ints.length - 1; i >= 0; i--) {\n+            setIntRBU(bytes4, off, ints[i]);\n+            off += 4;\n@@ -286,1 +167,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -291,5 +172,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            int v = ints[i];\n-            setIntRL(bytes4, i * 4, ints[i]);\n-            sum += v;\n+        int off = 0;\n+        for (int i = ints.length - 1; i >= 0; i--) {\n+            setIntRL(bytes4, off, ints[i]);\n+            off += 4;\n@@ -297,1 +177,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -302,5 +182,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            int v = ints[i];\n-            setIntRLU(bytes4, i * 4, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = ints.length - 1; i >= 0; i--) {\n+            setIntRLU(bytes4, off, ints[i]);\n+            off += 4;\n@@ -308,1 +187,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -313,6 +192,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            int v = ints[i];\n-            v = Integer.reverseBytes(v);\n-            UNSAFE.putInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = ints.length - 1; i >= 0; i--) {\n+            UNSAFE.putInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, Integer.reverseBytes(ints[i]));\n+            off += 4;\n@@ -320,1 +197,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -325,59 +202,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            int v = ints[i];\n-            UNSAFE.putInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 4, v);\n-            sum += v;\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongB(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongB(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongBU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongBU(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongBV(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += (long) LONG_B.get(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongL(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongL(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongLU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongLU(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongLV(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < ints.length; i++) {\n-            sum += (long) LONG_L.get(bytes8, i * 8);\n+        int off = 0;\n+        for (int i = ints.length - 1; i >= 0; i--) {\n+            UNSAFE.putInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, ints[i]);\n+            off += 4;\n@@ -385,56 +207,1 @@\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongRB(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongRB(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongRBU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongRBU(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongRL(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongRL(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongRLU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += getLongRLU(bytes8, i * 8);\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongRU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += Long.reverseBytes(\n-                    UNSAFE.getLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8));\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getLongU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            sum += UNSAFE.getLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8);\n-        }\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -445,5 +212,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            setLongB(bytes8, i * 8, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            setLongB(bytes8, off, longs[i]);\n+            off += 8;\n@@ -451,1 +217,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -456,5 +222,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            setLongBU(bytes8, i * 8, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            setLongBU(bytes8, off, longs[i]);\n+            off += 8;\n@@ -462,1 +227,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -467,5 +232,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            LONG_B.set(bytes8, i * 8, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            LONG_B.set(bytes8, off, longs[i]);\n+            off += 8;\n@@ -473,1 +237,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -478,5 +242,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            setLongL(bytes8, i * 8, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            setLongL(bytes8, off, longs[i]);\n+            off += 8;\n@@ -484,1 +247,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -489,5 +252,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            setLongLU(bytes8, i * 8, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            setLongLU(bytes8, off, longs[i]);\n+            off += 8;\n@@ -495,1 +257,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -500,5 +262,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            LONG_L.set(bytes8, i * 8, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            LONG_L.set(bytes8, off, longs[i]);\n+            off += 8;\n@@ -506,1 +267,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -511,5 +272,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            setLongRB(bytes8, i * 8, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            setLongRB(bytes8, off, longs[i]);\n+            off += 8;\n@@ -517,1 +277,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -522,5 +282,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            setLongRBU(bytes8, i * 8, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            setLongRBU(bytes8, off, longs[i]);\n+            off += 8;\n@@ -528,1 +287,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -533,5 +292,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            setLongRL(bytes8, i * 8, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            setLongRL(bytes8, off, longs[i]);\n+            off += 8;\n@@ -539,1 +297,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -544,5 +302,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            setLongRLU(bytes8, i * 8, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            setLongRLU(bytes8, off, longs[i]);\n+            off += 8;\n@@ -550,1 +307,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -555,6 +312,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            v = Long.reverseBytes(v);\n-            UNSAFE.putLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8, v);\n-            sum += v;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            UNSAFE.putLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, Long.reverseBytes(longs[i]));\n+            off += 8;\n@@ -562,1 +317,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -567,15 +322,4 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            long v = longs[i];\n-            UNSAFE.putLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 8, v);\n-            sum += v;\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getCharB(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = getCharB(bytes4, i);\n-            sum += c;\n+        int off = 0;\n+        for (int i = longs.length - 1; i >= 0; i--) {\n+            UNSAFE.putLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, longs[i]);\n+            off += 8;\n@@ -583,1 +327,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -587,15 +331,5 @@\n-    public void getCharBV(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = (char) CHAR_B.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n-            sum += c;\n-        }\n-        BH.consume(sum);\n-    }\n-\n-    @Benchmark\n-    public void getCharBU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = getCharBU(bytes4, i);\n-            sum += c;\n+    public void setCharBS(Blackhole BH) {\n+        int off = 0;\n+        for (int i = chars.length - 1; i >= 0; i--) {\n+            putShortB(bytes4, off, chars[i]);\n+            off += 2;\n@@ -603,1 +337,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -607,14 +341,5 @@\n-    public void getCharL(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = getCharL(bytes4, i);\n-            sum += c;\n-        }\n-        BH.consume(sum);\n-    }\n-    @Benchmark\n-    public void getCharLU(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = getCharLU(bytes4, i);\n-            sum += c;\n+    public void setCharBV(Blackhole BH) {\n+        int off = 0;\n+        for (int i = chars.length - 1; i >= 0; i--) {\n+            CHAR_B.set(bytes4, off, chars[i]);\n+            off += 2;\n@@ -622,1 +347,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -625,1 +350,0 @@\n-\n@@ -627,5 +351,5 @@\n-    public void getCharLV(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = (char) CHAR_L.get(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n-            sum += c;\n+    public void setCharLS(Blackhole BH) {\n+        int off = 0;\n+        for (int i = chars.length - 1; i >= 0; i--) {\n+            putShortL(bytes4, off, chars[i]);\n+            off += 2;\n@@ -633,1 +357,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -637,5 +361,5 @@\n-    public void getCharC(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            char c = UNSAFE.getChar(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2);\n-            sum += c;\n+    public void setCharLV(Blackhole BH) {\n+        int off = 0;\n+        for (int i = chars.length - 1; i >= 0; i--) {\n+            CHAR_L.set(bytes4, off, chars[i]);\n+            off += 2;\n@@ -643,1 +367,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -647,6 +371,5 @@\n-    public void setCharBS(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < chars.length; i++) {\n-            char c = chars[i];\n-            putShortB(bytes4, i * 2, c);\n-            sum += c;\n+    public void setCharC(Blackhole BH) {\n+        int off = 0;\n+        for (int i = chars.length - 1; i >= 0; i--) {\n+            UNSAFE.putChar(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, chars[i]);\n+            off += 2;\n@@ -654,1 +377,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -657,0 +380,4 @@\n+    \/*\n+     * putChars4 and putBytes4 Test whether four constant chars can be MergeStored\n+     *\n+     *\/\n@@ -658,6 +385,4 @@\n-    public void setCharBV(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < chars.length; i++) {\n-            char c = chars[i];\n-            CHAR_B.set(bytes4, i * 2, c);\n-            sum += c;\n+    public void putBytes4(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            off = putBytes4(bytes4, off, 'n', 'u', 'l', 'l');\n@@ -665,1 +390,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -669,6 +394,4 @@\n-    public void setCharLS(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < chars.length; i++) {\n-            char c = chars[i];\n-            putShortL(bytes4, i * 2, c);\n-            sum += c;\n+    public void putBytes4X(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            off = putBytes4X(bytes4, off, 'n', 'u', 'l', 'l');\n@@ -676,1 +399,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -680,6 +403,4 @@\n-    public void setCharLV(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < chars.length; i++) {\n-            char c = chars[i];\n-            CHAR_L.set(bytes4, i * 2, c);\n-            sum += c;\n+    public void putBytes4U(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            off = putBytes4U(bytes4, off, 'n', 'u', 'l', 'l');\n@@ -687,1 +408,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -691,6 +412,6 @@\n-    public void setCharC(Blackhole BH) {\n-        long sum = 0;\n-        for (int i = 0; i < chars.length; i++) {\n-            char c = chars[i];\n-            UNSAFE.putChar(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + i * 2, c);\n-            sum += c;\n+    @SuppressWarnings(\"deprecation\")\n+    public void putBytes4GetBytes(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            \"null\".getBytes(0, 4, bytes4, off);\n+            off += 4;\n@@ -698,1 +419,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -701,4 +422,0 @@\n-    \/*\n-     * putChars4 Test whether four constant chars can be MergeStored\n-     *\n-     *\/\n@@ -707,4 +424,3 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            putChars4B(bytes8, i * 4);\n-            sum += longs[i];\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            off = putChars4B(bytes8, off, 'n', 'u', 'l', 'l');\n@@ -712,1 +428,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -717,4 +433,3 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            putChars4BU(bytes8, i * 4);\n-            sum += longs[i];\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            off = putChars4BU(bytes8, off, 'n', 'u', 'l', 'l');\n@@ -722,1 +437,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -727,4 +442,3 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            putChars4BV(bytes8, i * 4);\n-            sum += longs[i];\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            off = putChars4BV(bytes8, off, 'n', 'u', 'l', 'l');\n@@ -732,1 +446,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -737,4 +451,3 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            putChars4L(bytes8, i * 4);\n-            sum += longs[i];\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            off = putChars4L(bytes8, off, 'n', 'u', 'l', 'l');\n@@ -742,1 +455,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -747,4 +460,3 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            putChars4LU(bytes8, i * 4);\n-            sum += longs[i];\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            off = putChars4LU(bytes8, off, 'n', 'u', 'l', 'l');\n@@ -752,1 +464,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -757,4 +469,3 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            putChars4LV(bytes8, i * 4);\n-            sum += longs[i];\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            off = putChars4LV(bytes8, off, 'n', 'u', 'l', 'l');\n@@ -762,1 +473,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -767,4 +478,3 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            putChars4C(bytes8, i * 4);\n-            sum += longs[i];\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            off = putChars4C(bytes8, off, 'n', 'u', 'l', 'l');\n@@ -772,1 +482,1 @@\n-        BH.consume(sum);\n+        BH.consume(off);\n@@ -777,4 +487,3 @@\n-        long sum = 0;\n-        for (int i = 0; i < longs.length; i++) {\n-            putChars4S(bytes8, i * 4);\n-            sum += longs[i];\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            off = putChars4S(bytes8, off, 'n', 'u', 'l', 'l');\n@@ -782,39 +491,1 @@\n-        BH.consume(sum);\n-    }\n-\n-    static int getIntB(byte[] array, int offset) {\n-        return ((array[offset    ] & 0xff) << 24)\n-             | ((array[offset + 1] & 0xff) << 16)\n-             | ((array[offset + 2] & 0xff) <<  8)\n-             | ((array[offset + 3] & 0xff)      );\n-    }\n-\n-    static int getIntBU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n-        return ((UNSAFE.getByte(array, address    ) & 0xff) << 24)\n-             | ((UNSAFE.getByte(array, address + 1) & 0xff) << 16)\n-             | ((UNSAFE.getByte(array, address + 2) & 0xff) <<  8)\n-             | ((UNSAFE.getByte(array, address + 3) & 0xff)      );\n-    }\n-\n-    static int getIntL(byte[] array, int offset) {\n-        return ((array[offset       ] & 0xff)      )\n-                | ((array[offset + 1] & 0xff) <<  8)\n-                | ((array[offset + 2] & 0xff) << 16)\n-                | ((array[offset + 3] & 0xff) << 24);\n-    }\n-\n-    static int getIntRB(byte[] array, int offset) {\n-        return Integer.reverseBytes(getIntB(array, offset));\n-    }\n-\n-    static int getIntRBU(byte[] array, int offset) {\n-        return Integer.reverseBytes(getIntBU(array, offset));\n-    }\n-\n-    static int getIntRL(byte[] array, int offset) {\n-        return Integer.reverseBytes(getIntL(array, offset));\n-    }\n-\n-    static int getIntRLU(byte[] array, int offset) {\n-        return Integer.reverseBytes(getIntLU(array, offset));\n+        BH.consume(off);\n@@ -873,62 +544,0 @@\n-    static long getLongB(byte[] array, int offset) {\n-        return (((long) array[offset    ] & 0xff) << 56)\n-             | (((long) array[offset + 1] & 0xff) << 48)\n-             | (((long) array[offset + 2] & 0xff) << 40)\n-             | (((long) array[offset + 3] & 0xff) << 32)\n-             | (((long) array[offset + 4] & 0xff) << 24)\n-             | (((long) array[offset + 5] & 0xff) << 16)\n-             | (((long) array[offset + 6] & 0xff) << 8)\n-             | (((long) array[offset + 7] & 0xff)     );\n-    }\n-\n-    static long getLongBU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n-        return (((long)(UNSAFE.getByte(array, address)     & 0xff)) << 56)\n-             | (((long)(UNSAFE.getByte(array, address + 1) & 0xff)) << 48)\n-             | (((long)(UNSAFE.getByte(array, address + 2) & 0xff)) << 40)\n-             | (((long)(UNSAFE.getByte(array, address + 3) & 0xff)) << 32)\n-             | (((long)(UNSAFE.getByte(array, address + 4) & 0xff)) << 24)\n-             | (((long)(UNSAFE.getByte(array, address + 5) & 0xff)) << 16)\n-             | (((long)(UNSAFE.getByte(array, address + 6) & 0xff)) <<  8)\n-             | (((long)(UNSAFE.getByte(array, address + 7) & 0xff))      );\n-    }\n-\n-    public static long getLongL(byte[] array, int offset) {\n-        return (((long) array[offset    ] & 0xff)      )\n-             | (((long) array[offset + 1] & 0xff) <<  8)\n-             | (((long) array[offset + 2] & 0xff) << 16)\n-             | (((long) array[offset + 3] & 0xff) << 24)\n-             | (((long) array[offset + 4] & 0xff) << 32)\n-             | (((long) array[offset + 5] & 0xff) << 40)\n-             | (((long) array[offset + 6] & 0xff) << 48)\n-             | (((long) array[offset + 7] & 0xff) << 56);\n-    }\n-\n-    static long getLongLU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n-        return (((long)(UNSAFE.getByte(array, address    ) & 0xff))      )\n-             | (((long)(UNSAFE.getByte(array, address + 1) & 0xff)) <<  8)\n-             | (((long)(UNSAFE.getByte(array, address + 2) & 0xff)) << 16)\n-             | (((long)(UNSAFE.getByte(array, address + 3) & 0xff)) << 24)\n-             | (((long)(UNSAFE.getByte(array, address + 4) & 0xff)) << 32)\n-             | (((long)(UNSAFE.getByte(array, address + 5) & 0xff)) << 40)\n-             | (((long)(UNSAFE.getByte(array, address + 6) & 0xff)) << 48)\n-             | (((long)(UNSAFE.getByte(array, address + 7) & 0xff)) << 56);\n-    }\n-\n-    static long getLongRB(byte[] array, int offset) {\n-        return getLongB(array, offset);\n-    }\n-\n-    static long getLongRBU(byte[] array, int offset) {\n-        return getLongBU(array, offset);\n-    }\n-\n-    static long getLongRL(byte[] array, int offset) {\n-        return getLongL(array, offset);\n-    }\n-\n-    static long getLongRLU(byte[] array, int offset) {\n-        return getLongLU(array, offset);\n-    }\n-\n@@ -1001,22 +610,6 @@\n-    public static int getIntLU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n-        return ((UNSAFE.getByte(array, address    ) & 0xff)      )\n-             | ((UNSAFE.getByte(array, address + 1) & 0xff) <<  8)\n-             | ((UNSAFE.getByte(array, address + 2) & 0xff) << 16)\n-             | ((UNSAFE.getByte(array, address + 3) & 0xff) << 24);\n-    }\n-\n-    public static char getCharB(byte[] val, int index) {\n-        index <<= 1;\n-        return (char)(((val[index    ] & 0xff) << 8)\n-                    | ((val[index + 1] & 0xff)));\n-    }\n-\n-    public static char getCharBR(byte[] val, int index) {\n-        return Character.reverseBytes(getCharB(val, index));\n-    }\n-\n-    public static char getCharL(byte[] val, int index) {\n-        index <<= 1;\n-        return (char)(((val[index    ] & 0xff))\n-                    | ((val[index + 1] & 0xff) << 8));\n+    public int putBytes4(byte[] bytes, int offset, int c0, int c1, int c2, int c3) {\n+        bytes[offset    ] = (byte) c0;\n+        bytes[offset + 1] = (byte) c1;\n+        bytes[offset + 2] = (byte) c2;\n+        bytes[offset + 3] = (byte) c3;\n+        return offset + 4;\n@@ -1025,2 +618,6 @@\n-    public static char getCharLR(byte[] val, int index) {\n-        return Character.reverseBytes(getCharL(val, index));\n+    public int putBytes4X(byte[] bytes, int offset, int c0, int c1, int c2, int c3) {\n+        bytes[offset++] = (byte) c0;\n+        bytes[offset++] = (byte) c1;\n+        bytes[offset++] = (byte) c2;\n+        bytes[offset++] = (byte) c3;\n+        return offset;\n@@ -1029,10 +626,7 @@\n-    public static char getCharBU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n-        return (char) (((UNSAFE.getByte(array, address    ) & 0xff) << 8)\n-                     | ((UNSAFE.getByte(array, address + 1) & 0xff)     ));\n-    }\n-\n-    public static char getCharLU(byte[] array, int offset) {\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n-        return (char) (((UNSAFE.getByte(array, address    ) & 0xff)     )\n-                     | ((UNSAFE.getByte(array, address + 1) & 0xff) << 8));\n+    public int putBytes4U(byte[] bytes, int offset, int c0, int c1, int c2, int c3) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n+        UNSAFE.putByte(bytes, address    , (byte) c0);\n+        UNSAFE.putByte(bytes, address + 1, (byte) c1);\n+        UNSAFE.putByte(bytes, address + 2, (byte) c2);\n+        UNSAFE.putByte(bytes, address + 3, (byte) c3);\n+        return offset + 4;\n@@ -1041,2 +635,1 @@\n-    public void putChars4B(byte[] bytes, int offset) {\n-        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+    public int putChars4B(byte[] bytes, int offset, char c0, char c1, char c2, char c3) {\n@@ -1047,0 +640,1 @@\n+        return offset + 4;\n@@ -1049,2 +643,1 @@\n-    public void putChars4BU(byte[] bytes, int offset) {\n-        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+    public int putChars4BU(byte[] bytes, int offset, char c0, char c1, char c2, char c3) {\n@@ -1055,0 +648,1 @@\n+        return offset + 4;\n@@ -1057,4 +651,2 @@\n-    public void putChars4BV(byte[] bytes, int offset) {\n-        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n-        offset <<= 1;\n-        CHAR_B.set(bytes, offset    , c0);\n+    public int putChars4BV(byte[] bytes, int offset, char c0, char c1, char c2, char c3) {\n+        CHAR_B.set(bytes, offset     , c0);\n@@ -1064,0 +656,1 @@\n+        return offset + 8;\n@@ -1066,2 +659,1 @@\n-    public void putChars4L(byte[] bytes, int offset) {\n-        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+    public int putChars4L(byte[] bytes, int offset, char c0, char c1, char c2, char c3) {\n@@ -1072,0 +664,1 @@\n+        return offset + 4;\n@@ -1074,3 +667,1 @@\n-    public void putChars4LV(byte[] bytes, int offset) {\n-        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n-        offset <<= 1;\n+    public int putChars4LV(byte[] bytes, int offset, char c0, char c1, char c2, char c3) {\n@@ -1081,0 +672,1 @@\n+        return offset + 8;\n@@ -1083,2 +675,1 @@\n-    public void putChars4LU(byte[] bytes, int offset) {\n-        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n+    public int putChars4LU(byte[] bytes, int offset, char c0, char c1, char c2, char c3) {\n@@ -1089,0 +680,1 @@\n+        return offset + 4;\n@@ -1091,3 +683,2 @@\n-    public void putChars4C(byte[] bytes, int offset) {\n-        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+    public int putChars4C(byte[] bytes, int offset, char c0, char c1, char c2, char c3) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n@@ -1098,0 +689,1 @@\n+        return offset + 8;\n@@ -1100,3 +692,2 @@\n-    public void putChars4S(byte[] bytes, int offset) {\n-        char c0 = 'n', c1 = 'u', c2 = 'l', c3 = 'l';\n-        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + (offset << 1);\n+    public int putChars4S(byte[] bytes, int offset, char c0, char c1, char c2, char c3) {\n+        final long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + offset;\n@@ -1107,0 +698,1 @@\n+        return offset + 8;\n@@ -1132,0 +724,5 @@\n+\n+    @Fork(value = 1, jvmArgs = {\n+            \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-MergeStores\"\n+    })\n+    public static class MergeStoresDisabled extends MergeStoreBench {}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MergeStoreBench.java","additions":255,"deletions":658,"binary":false,"changes":913,"status":"modified"}]}