{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/threads.hpp\"\n@@ -64,1 +65,1 @@\n-  \/\/ This may be called on a detached thread during VM init, so we should check is_bootstrapping_done() first.\n+  \/\/ This may be called on a detached thread during VM init, so we should check that first.\n@@ -66,1 +67,1 @@\n-    assert(!Mutex::is_bootstrapping_done() || NmtVirtualMemory_lock->owned_by_self(),\n+    assert(Threads::is_single_threaded() || NmtVirtualMemory_lock->owned_by_self(),\n@@ -295,1 +296,1 @@\n-    NmtVirtualMemoryLocker(): _cml(NmtVirtualMemory_lock, Mutex::is_bootstrapping_done(), Mutex::_no_safepoint_check_flag){}\n+    NmtVirtualMemoryLocker(): _cml(NmtVirtualMemory_lock, !Threads::is_single_threaded(), Mutex::_no_safepoint_check_flag){}\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/threads.hpp\"\n@@ -630,1 +631,1 @@\n-    if (Mutex::is_bootstrapping_done()) {\n+    if (!Threads::is_single_threaded()) {\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-bool Mutex::_bootstrapping_done;\n-\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -213,14 +213,0 @@\n-\n-  \/\/ Returns true if it is safe to start use mutexes.\n-  static inline bool is_bootstrapping_done()  {\n-    return _bootstrapping_done;\n-  }\n-\n-  \/\/ Set in Threads::create_vm once threads and mutexes have been initialized.\n-  static inline void set_bootstrapping_done()  {\n-    _bootstrapping_done = true;\n-  }\n-\n- private:\n-  \/\/ _bootstrapping_done means that both mutex_init() has been called and current thread has been set in Threads::create_vm.\n-  static bool _bootstrapping_done;\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -545,2 +545,1 @@\n-  \/\/ Once mutexes are ready, we can use NMT locks.\n-  Mutex::set_bootstrapping_done();\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include \"logging\/logAsyncWriter.hpp\"\n+#include \"runtime\/vmThread.hpp\"\n@@ -148,0 +150,11 @@\n+  \/\/ <=1 because during VM init before Thread::add is called, or any other threads are started, it is single threaded.\n+  static bool is_single_threaded() {\n+    int count = number_of_threads();\n+    for (NonJavaThread::Iterator njti; !njti.end(); njti.step()) {\n+      if (++count > 1) {\n+        return false;\n+      }\n+    }\n+    return count <= 1;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -653,1 +653,1 @@\n-      Mutex::is_bootstrapping_done() &&\n+      NmtVirtualMemory_lock != nullptr &&\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}