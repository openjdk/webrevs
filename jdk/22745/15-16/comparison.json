{"files":[{"patch":"@@ -55,0 +55,2 @@\n+bool MemTracker::NmtVirtualMemoryLocker::_safe_to_use;\n+\n","filename":"src\/hotspot\/share\/nmt\/memTracker.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"runtime\/threads.hpp\"\n@@ -67,1 +66,1 @@\n-    assert(Threads::is_single_threaded() || NmtVirtualMemory_lock->owned_by_self(),\n+    assert(!NmtVirtualMemoryLocker::is_safe_to_use() || NmtVirtualMemory_lock->owned_by_self(),\n@@ -294,0 +293,2 @@\n+    \/\/ Returns true if it is safe to start using this locker.\n+    static bool _safe_to_use;\n@@ -295,0 +296,1 @@\n+\n@@ -296,1 +298,10 @@\n-    NmtVirtualMemoryLocker(): _cml(NmtVirtualMemory_lock, !Threads::is_single_threaded(), Mutex::_no_safepoint_check_flag){}\n+    NmtVirtualMemoryLocker(): _cml(NmtVirtualMemory_lock, _safe_to_use, Mutex::_no_safepoint_check_flag){}\n+\n+    static inline bool is_safe_to_use()  {\n+      return _safe_to_use;\n+    }\n+\n+    \/\/ Set in Threads::create_vm once threads and mutexes have been initialized.\n+    static inline void set_safe_to_use()  {\n+      _safe_to_use = true;\n+    }\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"runtime\/threads.hpp\"\n@@ -631,1 +630,1 @@\n-    if (!Threads::is_single_threaded()) {\n+    if (MemTracker::NmtVirtualMemoryLocker::is_safe_to_use()) {\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -217,0 +217,2 @@\n+  register_thread_stack_with_NMT();\n+\n@@ -228,3 +230,0 @@\n-  \/\/ Must be after NonJavaThread::add_to_the_list() so that this thread is detectable by Threads::is_single_threaded().\n-  register_thread_stack_with_NMT();\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -545,0 +545,2 @@\n+  \/\/ Once mutexes and main_thread are ready, we can use NmtVirtualMemoryLocker.\n+  MemTracker::NmtVirtualMemoryLocker::set_safe_to_use();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-#include \"logging\/logAsyncWriter.hpp\"\n-#include \"runtime\/vmThread.hpp\"\n@@ -150,11 +148,0 @@\n-  \/\/ VM initialization is single-threaded until the first NJT is created\n-  \/\/ by the main thread, but that thread disappears during VM exit so we can't just\n-  \/\/ check for it. To reduce the overhead we check for > 1 JavaThreads first.\n-  static bool is_single_threaded() {\n-    if (number_of_threads() > 0) {\n-        return false;\n-    }\n-    NonJavaThread::Iterator njti;\n-    return njti.end();\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/threads.hpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"}]}