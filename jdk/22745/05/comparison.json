{"files":[{"patch":"@@ -1089,1 +1089,1 @@\n-    ThreadCritical tc;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3623,1 +3623,2 @@\n-      os::print_memory_mappings((char*)start, bytes, tty);\n+      fileStream fs(defaultStream::output_stream());\n+      os::print_memory_mappings((char*)start, bytes, &fs);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1806,1 +1806,1 @@\n-    ThreadCritical tc;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/share\/nmt\/memBaseline.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"nmt\/memTracker.hpp\"\n@@ -468,1 +469,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+bool MemTracker::_done_bootstrap;\n+\n","filename":"src\/hotspot\/share\/nmt\/memTracker.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -65,0 +64,9 @@\n+  \/\/ We need this to avoid attempting to lock NmtVirtualMemory_lock during VM init (before mutexes are ready or current thread has been assigned).\n+  static inline bool is_done_bootstrap()  {\n+    return _done_bootstrap;\n+  }\n+\n+  static inline void set_done_bootstrap()  {\n+    _done_bootstrap = true;\n+  }\n+\n@@ -128,1 +136,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker nvml;\n@@ -154,1 +162,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker nvml;\n@@ -165,1 +173,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker nvml;\n@@ -173,1 +181,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker nvml;\n@@ -181,1 +189,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker nvml;\n@@ -190,1 +198,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker nvml;\n@@ -199,1 +207,1 @@\n-    MemoryFileTracker::Instance::Locker lock;\n+    NmtVirtualMemoryLocker nvml;\n@@ -213,1 +221,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker nvml;\n@@ -222,1 +230,1 @@\n-      ThreadCritical tc;\n+      NmtVirtualMemoryLocker nvml;\n@@ -272,0 +280,8 @@\n+  \/\/ Same as MutexLocker but can be used during VM init while single threaded and before mutexes are ready or current thread has been assigned.\n+  \/\/ Performs no action during VM init.\n+  class NmtVirtualMemoryLocker: StackObj {\n+      ConditionalMutexLocker _cml;\n+  public:\n+      NmtVirtualMemoryLocker(): _cml(NmtVirtualMemory_lock, _done_bootstrap, Mutex::_no_safepoint_check_flag){}\n+  };\n+\n@@ -280,2 +296,1 @@\n-  \/\/ Query lock\n-  static Mutex*           _query_lock;\n+  static bool             _done_bootstrap;\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":27,"deletions":12,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/mutex.hpp\"\n@@ -38,1 +37,0 @@\n-PlatformMutex* MemoryFileTracker::Instance::_mutex = nullptr;\n@@ -135,1 +133,0 @@\n-  _mutex = new PlatformMutex();\n@@ -192,8 +189,0 @@\n-\n-MemoryFileTracker::Instance::Locker::Locker() {\n-  MemoryFileTracker::Instance::_mutex->lock();\n-}\n-\n-MemoryFileTracker::Instance::Locker::~Locker() {\n-  MemoryFileTracker::Instance::_mutex->unlock();\n-}\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"runtime\/mutex.hpp\"\n@@ -96,1 +95,0 @@\n-    static PlatformMutex* _mutex;\n@@ -99,5 +97,0 @@\n-    class Locker : public StackObj {\n-    public:\n-      Locker();\n-      ~Locker();\n-    };\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"nmt\/memTracker.hpp\"\n@@ -97,1 +98,1 @@\n-    MFT::Locker lock;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -56,1 +55,1 @@\n-  ThreadCritical tc;\n+  MemTracker::MemTracker::NmtVirtualMemoryLocker nvml;\n@@ -66,1 +65,1 @@\n-  ThreadCritical tc;\n+  MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/share\/nmt\/threadStackTracker.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -341,0 +340,2 @@\n+  assert(!MemTracker::is_done_bootstrap() || NmtVirtualMemory_lock->owned_by_self() , \"Should have acquired NmtVirtualMemory_lock\");\n+\n@@ -419,0 +420,1 @@\n+  assert(!MemTracker::is_done_bootstrap() || NmtVirtualMemory_lock->owned_by_self() , \"Should have acquired NmtVirtualMemory_lock\");\n@@ -437,0 +439,2 @@\n+  \/\/ This may be called on a detached thread during VM init, so we should check is_done_bootstrap() first.\n+  assert(!MemTracker::is_done_bootstrap() || NmtVirtualMemory_lock->owned_by_self() , \"Should have acquired NmtVirtualMemory_lock\");\n@@ -457,0 +461,1 @@\n+  assert(!MemTracker::is_done_bootstrap() || NmtVirtualMemory_lock->owned_by_self() , \"Should have acquired NmtVirtualMemory_lock\");\n@@ -472,0 +477,1 @@\n+  assert(!MemTracker::is_done_bootstrap() || NmtVirtualMemory_lock->owned_by_self() , \"Should have acquired NmtVirtualMemory_lock\");\n@@ -493,0 +499,1 @@\n+  assert(!MemTracker::is_done_bootstrap() || NmtVirtualMemory_lock->owned_by_self() , \"Should have acquired NmtVirtualMemory_lock\");\n@@ -624,0 +631,1 @@\n+    assert_lock_strong(NmtVirtualMemory_lock);\n@@ -664,1 +672,1 @@\n-  ThreadCritical tc;\n+  MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3793,1 +3793,0 @@\n-  thread->register_thread_stack_with_NMT();\n@@ -3795,0 +3794,1 @@\n+  thread->register_thread_stack_with_NMT();\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,0 +138,1 @@\n+Mutex*   NmtVirtualMemory_lock          = nullptr;\n@@ -287,1 +288,0 @@\n-  MUTEX_DEFN(SharedDecoder_lock              , PaddedMutex  , tty-1);\n@@ -291,0 +291,1 @@\n+  MUTEX_DEFN(NmtVirtualMemory_lock           , PaddedMutex  , service-4); \/\/ Must be lower than G1Mapper_lock used from G1RegionsSmallerThanCommitSizeMapper::commit_regions\n@@ -348,0 +349,1 @@\n+  MUTEX_DEFL(SharedDecoder_lock             , PaddedMutex  , NmtVirtualMemory_lock); \/\/ Must be lower than NmtVirtualMemory_lock due to MemTracker::print_containing_region\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -120,0 +120,1 @@\n+extern Mutex*   NmtVirtualMemory_lock;           \/\/ guards NMT virtual memory updates\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2206,1 +2206,1 @@\n-    ThreadCritical tc;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n@@ -2228,1 +2228,1 @@\n-    ThreadCritical tc;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n@@ -2313,1 +2313,1 @@\n-    ThreadCritical tc;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n@@ -2352,1 +2352,1 @@\n-    ThreadCritical tc;\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -545,0 +545,2 @@\n+  \/\/ Once mutexes are ready, we can use NMT locks.\n+  MemTracker::set_done_bootstrap();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -652,0 +652,4 @@\n+  if (MemTracker::enabled() && NmtVirtualMemory_lock != nullptr  && MemTracker::is_done_bootstrap() && NmtVirtualMemory_lock->owned_by_self()) {\n+    \/\/ Manually unlock to avoid reentrancy due to mallocs in detailed mode.\n+    NmtVirtualMemory_lock->unlock();\n+  }\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+\n@@ -96,0 +97,2 @@\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n+\n@@ -169,0 +172,1 @@\n+\n@@ -170,0 +174,2 @@\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n+\n@@ -256,0 +262,1 @@\n+\n@@ -257,0 +264,2 @@\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n+\n@@ -425,1 +434,0 @@\n-\n@@ -427,0 +435,1 @@\n+\n@@ -428,0 +437,2 @@\n+    MemTracker::NmtVirtualMemoryLocker nvml;\n+\n","filename":"test\/hotspot\/gtest\/runtime\/test_virtualMemoryTracker.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"}]}