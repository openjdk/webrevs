{"files":[{"patch":"@@ -3269,3 +3269,1 @@\n-            if (range == null) {\n-                throw new NullPointerException();\n-            }\n+            Objects.requireNonNull(range);\n@@ -3281,2 +3279,2 @@\n-            if (isSubtagIllFormed(subtags[0], true)\n-                || range.endsWith(\"-\")) {\n+            if (range.endsWith(\"-\") ||\n+                    isSubtagIllFormed(subtags[0], true)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8349883\n+ * @summary Ensure IAE is thrown on ill-formed language ranges\n+ * @run junit IllformedRangeTest\n+ *\/\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class IllformedRangeTest {\n+\n+    \/\/ Test the endpoints that accept a language range\n+    @ParameterizedTest\n+    @MethodSource(\"illegalRanges\")\n+    public void illformedRangeTest(String range) {\n+        \/\/ static parses\n+        assertThrows(IllegalArgumentException.class,\n+                () -> Locale.LanguageRange.parse(range));\n+        assertThrows(IllegalArgumentException.class,\n+                () -> Locale.LanguageRange.parse(range, new HashMap<>()));\n+        \/\/ ctors\n+        assertThrows(IllegalArgumentException.class,\n+                () -> new Locale.LanguageRange(range));\n+        assertThrows(IllegalArgumentException.class,\n+                () -> new Locale.LanguageRange(range, Locale.LanguageRange.MIN_WEIGHT));\n+    }\n+\n+    private static Stream<String> illegalRanges() {\n+        return Stream.of(\n+                \/\/ 8349883 offending range\n+                \"-\",\n+                \/\/ Other general ill-formed test cases\n+                \"-foo\",\n+                \"foo-\",\n+                \"foo1\",\n+                \"foo-123456789\",\n+                \"*-*-\",\n+                \"\"\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/IllformedRangeTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}