{"files":[{"patch":"@@ -3269,3 +3269,1 @@\n-            if (range == null) {\n-                throw new NullPointerException();\n-            }\n+            Objects.requireNonNull(range);\n@@ -3281,2 +3279,2 @@\n-            if (isSubtagIllFormed(subtags[0], true)\n-                || range.endsWith(\"-\")) {\n+            if (range.endsWith(\"-\") ||\n+                    isSubtagIllFormed(subtags[0], true)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8026766\n- * @summary Confirm that LanguageRange.toString() returns an expected result.\n- * @run junit LRToString\n- *\/\n-\n-import java.util.Locale.LanguageRange;\n-import java.util.stream.Stream;\n-\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class LRToString {\n-\n-    \/**\n-     * This test ensures that the output of LanguageRange.toString()\n-     * returns an expected result, that is, the weight is hidden if it is\n-     * equal to 1.0.\n-     *\/\n-    @ParameterizedTest\n-    @MethodSource(\"ranges\")\n-    public void toStringTest(String range, double weight) {\n-        LanguageRange lr = new LanguageRange(range, weight);\n-        String expected = weight == 1.0\n-                ? range\n-                : range+\";q=\"+weight;\n-        assertEquals(lr.toString(), expected);\n-    }\n-\n-    private static Stream<Arguments> ranges() {\n-        return Stream.of(\n-                Arguments.of(\"ja\", 1.0),\n-                Arguments.of(\"de\", 0.5),\n-                Arguments.of(\"fr\", 0.0)\n-        );\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/LRToString.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,2 @@\n-\/**\n+\n+\/*\n@@ -25,3 +26,4 @@\n- * @bug 8253321\n- * @summary test LanguageRange class\n- * @run testng LanguageRangeTest\n+ * @bug 8026766 8253321 8349883\n+ * @summary LanguageRange tests: toString(), hashCode()\/equals(), checking\n+ *          for IAE on ill-formed ranges\n+ * @run junit LanguageRangeTest\n@@ -32,2 +34,11 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -35,1 +46,0 @@\n-@Test\n@@ -38,0 +48,31 @@\n+    \/\/ 8349883: Test endpoints w\/ ill-formed language range fail with IAE\n+    @ParameterizedTest\n+    @MethodSource(\"illegalRanges\")\n+    public void illformedRangeTest(String range) {\n+        \/\/ static parses\n+        assertThrows(IllegalArgumentException.class,\n+                () -> Locale.LanguageRange.parse(range));\n+        assertThrows(IllegalArgumentException.class,\n+                () -> Locale.LanguageRange.parse(range, new HashMap<>()));\n+        \/\/ ctors\n+        assertThrows(IllegalArgumentException.class,\n+                () -> new Locale.LanguageRange(range));\n+        assertThrows(IllegalArgumentException.class,\n+                () -> new Locale.LanguageRange(range, Locale.LanguageRange.MIN_WEIGHT));\n+    }\n+\n+    private static Stream<String> illegalRanges() {\n+        return Stream.of(\n+                \/\/ 8349883 offending range\n+                \"-\",\n+                \/\/ Other general ill-formed test cases\n+                \"-foo\",\n+                \"foo-\",\n+                \"foo1\",\n+                \"foo-123456789\",\n+                \"*-*-\",\n+                \"\"\n+        );\n+    }\n+\n+    \/\/ 8253321: Ensure invoking hashCode does not affect equals result\n@@ -48,0 +89,19 @@\n+\n+    \/\/ 8026766: toString() should hide weight if equal to MAX_WEIGHT (1.0)\n+    @ParameterizedTest\n+    @MethodSource(\"ranges\")\n+    public void toStringTest(String range, double weight) {\n+        LanguageRange lr = new LanguageRange(range, weight);\n+        String expected = weight == 1.0\n+                ? range\n+                : range+\";q=\"+weight;\n+        assertEquals(lr.toString(), expected);\n+    }\n+\n+    private static Stream<Arguments> ranges() {\n+        return Stream.of(\n+                Arguments.of(\"ja\", 1.0),\n+                Arguments.of(\"de\", 0.5),\n+                Arguments.of(\"fr\", 0.0)\n+        );\n+    }\n","filename":"test\/jdk\/java\/util\/Locale\/LanguageRangeTest.java","additions":68,"deletions":8,"binary":false,"changes":76,"status":"modified"}]}