{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -783,1 +783,1 @@\n-    testbit(method2_(R_method, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n+    testbit_ushort(method2_(R_method, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1018,0 +1018,12 @@\n+\/\/ Test a bit in memory for 2 byte datatype.\n+void MacroAssembler::testbit_ushort(const Address &a, unsigned int bit) {\n+  assert(a.index() == noreg, \"no index reg allowed in testbit\");\n+  if (bit <= 7) {\n+    z_tm(a.disp() + 1, a.base(), 1 << bit);\n+  } else if (bit <= 15) {\n+    z_tm(a.disp() + 0, a.base(), 1 << (bit - 8));\n+  } else {\n+    ShouldNotReachHere();\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,0 +202,1 @@\n+  void testbit_ushort(const Address &a, unsigned int bit);\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2398,1 +2398,1 @@\n-      __ testbit(Address(Z_method, Method::access_flags_offset()), JVM_ACC_STATIC_BIT);\n+      __ testbit_ushort(Address(Z_method, Method::access_flags_offset()), JVM_ACC_STATIC_BIT);\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,1 +167,1 @@\n-    __ testbit(method2_(method, access_flags), JVM_ACC_STATIC_BIT);\n+    __ testbit_ushort(method2_(method, access_flags), JVM_ACC_STATIC_BIT);\n@@ -886,1 +886,1 @@\n-    __ testbit(method2_(method, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n+    __ testbit_ushort(method2_(method, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n@@ -900,1 +900,1 @@\n-    __ testbit(method2_(method, access_flags), JVM_ACC_STATIC_BIT);\n+    __ testbit_ushort(method2_(method, access_flags), JVM_ACC_STATIC_BIT);\n@@ -1352,0 +1352,2 @@\n+  \/\/ _access_flags must be a 16 bit value.\n+  assert(sizeof(AccessFlags) == 2, \"testbit_ushort will fail\");\n@@ -1354,1 +1356,1 @@\n-    __ testbit(method_(access_flags), JVM_ACC_NATIVE_BIT);\n+    __ testbit_ushort(method_(access_flags), JVM_ACC_NATIVE_BIT);\n@@ -1360,1 +1362,1 @@\n-    __ testbit(method_(access_flags), JVM_ACC_ABSTRACT_BIT);\n+    __ testbit_ushort(method_(access_flags), JVM_ACC_ABSTRACT_BIT);\n@@ -1406,1 +1408,1 @@\n-      __ testbit(method2_(Z_R1_scratch, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n+      __ testbit_ushort(method2_(Z_R1_scratch, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n@@ -1464,1 +1466,1 @@\n-    __ testbit(method2_(Rmethod, access_flags), JVM_ACC_STATIC_BIT);\n+    __ testbit_ushort(method2_(Rmethod, access_flags), JVM_ACC_STATIC_BIT);\n@@ -1722,1 +1724,1 @@\n-    __ testbit(method_(access_flags), JVM_ACC_NATIVE_BIT);\n+    __ testbit_ushort(method_(access_flags), JVM_ACC_NATIVE_BIT);\n@@ -1728,1 +1730,1 @@\n-    __ testbit(method_(access_flags), JVM_ACC_ABSTRACT_BIT);\n+    __ testbit_ushort(method_(access_flags), JVM_ACC_ABSTRACT_BIT);\n@@ -1778,1 +1780,1 @@\n-      __ testbit(method2_(Z_R1_scratch, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n+      __ testbit_ushort(method2_(Z_R1_scratch, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"}]}