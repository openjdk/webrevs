{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-  st->print(\" flags=%x\", _flags);\n+  st->print(\" flags=%x\", _flags.as_unsigned_short());\n","filename":"src\/hotspot\/share\/ci\/ciFlags.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"jvm_constants.h\"\n@@ -42,1 +41,1 @@\n-  jint _flags;\n+  AccessFlags _flags;\n@@ -44,1 +43,1 @@\n-  bool _intialized_final_update;\n+  bool _initialized_final_update;\n@@ -46,1 +45,1 @@\n-  ciFlags() :_flags(0), _stable(false), _intialized_final_update(false) { }\n+  ciFlags() :_flags(0), _stable(false), _initialized_final_update(false) { }\n@@ -48,1 +47,1 @@\n-    _flags(flags.as_int()), _stable(is_stable), _intialized_final_update(is_initialized_final_update) { }\n+    _flags(flags), _stable(is_stable), _initialized_final_update(is_initialized_final_update) { }\n@@ -52,12 +51,12 @@\n-  bool is_public               () const { return (_flags & JVM_ACC_PUBLIC                    ) != 0; }\n-  bool is_private              () const { return (_flags & JVM_ACC_PRIVATE                   ) != 0; }\n-  bool is_protected            () const { return (_flags & JVM_ACC_PROTECTED                 ) != 0; }\n-  bool is_static               () const { return (_flags & JVM_ACC_STATIC                    ) != 0; }\n-  bool is_final                () const { return (_flags & JVM_ACC_FINAL                     ) != 0; }\n-  bool is_synchronized         () const { return (_flags & JVM_ACC_SYNCHRONIZED              ) != 0; }\n-  bool is_super                () const { return (_flags & JVM_ACC_SUPER                     ) != 0; }\n-  bool is_volatile             () const { return (_flags & JVM_ACC_VOLATILE                  ) != 0; }\n-  bool is_transient            () const { return (_flags & JVM_ACC_TRANSIENT                 ) != 0; }\n-  bool is_native               () const { return (_flags & JVM_ACC_NATIVE                    ) != 0; }\n-  bool is_interface            () const { return (_flags & JVM_ACC_INTERFACE                 ) != 0; }\n-  bool is_abstract             () const { return (_flags & JVM_ACC_ABSTRACT                  ) != 0; }\n+  bool is_public               () const { return _flags.is_public();       }\n+  bool is_private              () const { return _flags.is_private();      }\n+  bool is_protected            () const { return _flags.is_protected();    }\n+  bool is_static               () const { return _flags.is_static();       }\n+  bool is_final                () const { return _flags.is_final();        }\n+  bool is_synchronized         () const { return _flags.is_synchronized(); }\n+  bool is_super                () const { return _flags.is_super();        }\n+  bool is_volatile             () const { return _flags.is_volatile();     }\n+  bool is_transient            () const { return _flags.is_transient();    }\n+  bool is_native               () const { return _flags.is_native();       }\n+  bool is_interface            () const { return _flags.is_interface();    }\n+  bool is_abstract             () const { return _flags.is_abstract();     }\n@@ -69,1 +68,1 @@\n-  bool has_initialized_final_update() const { return _intialized_final_update; };\n+  bool has_initialized_final_update() const { return _initialized_final_update; };\n@@ -72,1 +71,1 @@\n-  jint   as_int()                      { return _flags; }\n+  jint   as_int()                      { return _flags.as_unsigned_short(); }\n","filename":"src\/hotspot\/share\/ci\/ciFlags.hpp","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-    return get_Klass()->access_flags().as_int();\n+    return get_Klass()->access_flags().as_unsigned_short();\n","filename":"src\/hotspot\/share\/ci\/ciKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3001,1 +3001,1 @@\n-    inner_classes->at_put(index++, inner_access_flags.as_int());\n+    inner_classes->at_put(index++, inner_access_flags.as_unsigned_short());\n@@ -5339,1 +5339,1 @@\n-  assert(0 == _access_flags.as_int(), \"invariant\");\n+  assert(0 == _access_flags.as_unsigned_short(), \"invariant\");\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3172,1 +3172,1 @@\n-  int flags = (jushort)( m->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS );\n+  int flags = m->access_flags().as_method_flags();\n@@ -5540,1 +5540,1 @@\n-    tty->print_cr(\"  name: %s, sig: %s, flags: %08x\", fs.name()->as_C_string(), fs.signature()->as_C_string(), fs.access_flags().as_int());\n+    tty->print_cr(\"  name: %s, sig: %s, flags: %08x\", fs.name()->as_C_string(), fs.signature()->as_C_string(), fs.access_flags().as_unsigned_short());\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -586,1 +586,1 @@\n-    jint new_flags = flags.as_int();\n+    u2 new_flags = flags.as_unsigned_short();\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        *modifiers = jfs.access_flags().as_int();\n+        *modifiers = jfs.access_flags().as_unsigned_short();\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-static s4 get_flags(const T* ptr) {\n+static u2 get_flags(const T* ptr) {\n@@ -232,1 +232,1 @@\n-  return ptr->access_flags().as_int();\n+  return ptr->access_flags().as_unsigned_short();\n@@ -971,1 +971,1 @@\n-  writer->write(static_cast<u2>(get_flags(method)));\n+  writer->write(get_flags(method));\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1003,1 +1003,1 @@\n-  JVMCIENV->put_int_at(info, 0, fd.access_flags().as_int());\n+  JVMCIENV->put_int_at(info, 0, fd.access_flags().as_unsigned_short());\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1595,1 +1595,1 @@\n-    HotSpotJVMCI::FieldInfo::set_classfileFlags(JVMCIENV, obj_h(), (jint)fieldinfo->access_flags().as_int());\n+    HotSpotJVMCI::FieldInfo::set_classfileFlags(JVMCIENV, obj_h(), (jint)fieldinfo->access_flags().as_unsigned_short());\n@@ -1606,1 +1606,1 @@\n-                                      (jint)fieldinfo->access_flags().as_int(),\n+                                      (jint)fieldinfo->access_flags().as_unsigned_short(),\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-                access_flags().as_int(),\n+                access_flags().as_unsigned_short(),\n@@ -100,1 +100,1 @@\n-    assert(fi_ref->access_flags().as_int() == fi.access_flags().as_int(), \"Must be\");\n+    assert(fi_ref->access_flags().as_unsigned_short() == fi.access_flags().as_unsigned_short(), \"Must be\");\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-  _consumer->accept_uint(fi.access_flags().as_int());\n+  _consumer->accept_uint(fi.access_flags().as_unsigned_short());\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3343,1 +3343,1 @@\n-  u2 access = access_flags().as_int();\n+  u2 access = access_flags().as_unsigned_short();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -394,1 +394,1 @@\n-  int     field_access_flags(int index) const { return field(index).access_flags().as_int(); }\n+  int     field_access_flags(int index) const { return field(index).access_flags().as_unsigned_short(); }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1655,1 +1655,1 @@\n-  jshort flags = access_flags().as_int();\n+  jshort flags = checked_cast<jshort>(access_flags().as_unsigned_short());\n@@ -2303,1 +2303,1 @@\n-  st->print   (\" - access:            0x%x  \", access_flags().as_int()); access_flags().print_on(st); st->cr();\n+  st->print   (\" - access:            0x%x  \", access_flags().as_unsigned_short()); access_flags().print_on(st); st->cr();\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1820,1 +1820,1 @@\n-  return k->access_flags().as_int();\n+  return k->access_flags().as_unsigned_short();\n@@ -2463,1 +2463,1 @@\n-  return method->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS;\n+  return method->access_flags().as_method_flags();\n@@ -2470,1 +2470,4 @@\n-  return InstanceKlass::cast(k)->field_access_flags(field_index) & JVM_RECOGNIZED_FIELD_MODIFIERS;\n+  u2 field_access_flags = InstanceKlass::cast(k)->field_access_flags(field_index);\n+  \/\/ This & should be unnecessary.\n+  assert((field_access_flags & JVM_RECOGNIZED_FIELD_MODIFIERS) == field_access_flags, \"already masked\");\n+  return field_access_flags;\n@@ -2660,1 +2663,1 @@\n-          return fs.access_flags().as_int() & JVM_RECOGNIZED_FIELD_MODIFIERS;\n+          return fs.access_flags().as_field_flags();\n@@ -2689,1 +2692,1 @@\n-            return method->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS;\n+            return method->access_flags().as_method_flags();\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    write_u2(access_flags.as_int() & JVM_RECOGNIZED_FIELD_MODIFIERS);\n+    write_u2(access_flags.as_field_flags());\n@@ -707,1 +707,1 @@\n-  write_u2(access_flags.as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS);\n+  write_u2(access_flags.as_method_flags());\n@@ -922,1 +922,1 @@\n-  write_u2(ik()->access_flags().as_int() & JVM_RECOGNIZED_CLASS_MODIFIERS);\n+  write_u2(ik()->access_flags().as_class_flags());\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3152,1 +3152,1 @@\n-  jint result = resultFlags.as_int();\n+  jint result = resultFlags.as_unsigned_short();\n@@ -3231,1 +3231,1 @@\n-  (*modifiers_ptr) = method->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS;\n+  (*modifiers_ptr) = method->access_flags().as_method_flags();\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1008,2 +1008,2 @@\n-  jushort old_flags = (jushort) the_class->access_flags().as_int();\n-  jushort new_flags = (jushort) scratch_class->access_flags().as_int();\n+  u2 old_flags = the_class->access_flags().as_unsigned_short();\n+  u2 new_flags = scratch_class->access_flags().as_unsigned_short();\n@@ -1043,3 +1043,3 @@\n-    old_flags = old_fs.access_flags().as_int();\n-    new_flags = new_fs.access_flags().as_int();\n-    if ((old_flags ^ new_flags) & JVM_RECOGNIZED_FIELD_MODIFIERS) {\n+    old_flags = old_fs.access_flags().as_field_flags();\n+    new_flags = new_fs.access_flags().as_field_flags();\n+    if (old_flags != new_flags) {\n@@ -1150,2 +1150,2 @@\n-      old_flags = k_old_method->access_flags().as_int();\n-      new_flags = k_new_method->access_flags().as_int();\n+      old_flags = k_old_method->access_flags().as_unsigned_short();\n+      new_flags = k_new_method->access_flags().as_unsigned_short();\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-  int flags = (m->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS );\n+  int flags = (m->access_flags().as_method_flags());\n@@ -355,1 +355,1 @@\n-  int flags = ( fd.access_flags().as_int() & JVM_RECOGNIZED_FIELD_MODIFIERS );\n+  int flags = fd.access_flags().as_field_flags();\n@@ -407,1 +407,1 @@\n-    int flags = m->access_flags().as_int();\n+    int flags = m->access_flags().as_unsigned_short();\n@@ -420,1 +420,1 @@\n-    int flags = m->access_flags().as_int();\n+    int flags = m->access_flags().as_unsigned_short();\n@@ -525,1 +525,1 @@\n-      int flags = m->access_flags().as_int();\n+      int flags = m->access_flags().as_unsigned_short();\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -781,1 +781,1 @@\n-  const int modifiers = method->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS;\n+  const int modifiers = method->access_flags().as_method_flags();\n@@ -822,1 +822,1 @@\n-  const int modifiers = method->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS;\n+  const int modifiers = method->access_flags().as_method_flags();\n@@ -862,1 +862,1 @@\n-  java_lang_reflect_Field::set_modifiers(rh(), fd->access_flags().as_int() & JVM_RECOGNIZED_FIELD_MODIFIERS);\n+  java_lang_reflect_Field::set_modifiers(rh(), fd->access_flags().as_field_flags());\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-  \/\/ get .class file flags\n-  u2 as_int           () const         { return _flags; }\n+  \/\/ get as integral value\n+  u2 as_unsigned_short() const         { return _flags; }\n@@ -86,0 +86,4 @@\n+  u2 as_method_flags() const { return _flags & JVM_RECOGNIZED_METHOD_MODIFIERS; }\n+  u2 as_field_flags() const  { return _flags & JVM_RECOGNIZED_FIELD_MODIFIERS; }\n+  u2 as_class_flags() const  { return _flags & JVM_RECOGNIZED_CLASS_MODIFIERS; }\n+\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}