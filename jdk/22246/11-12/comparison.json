{"files":[{"patch":"@@ -5540,1 +5540,1 @@\n-    tty->print_cr(\"  name: %s, sig: %s, flags: %08x\", fs.name()->as_C_string(), fs.signature()->as_C_string(), fs.access_flags().as_unsigned_short());\n+    tty->print_cr(\"  name: %s, sig: %s, flags: %08x\", fs.name()->as_C_string(), fs.signature()->as_C_string(), fs.access_flags().as_field_flags());\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -586,1 +586,1 @@\n-    u2 new_flags = flags.as_unsigned_short();\n+    u2 new_flags = flags.as_method_flags();\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        *modifiers = jfs.access_flags().as_unsigned_short();\n+        *modifiers = jfs.access_flags().as_field_flags();\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1003,1 +1003,1 @@\n-  JVMCIENV->put_int_at(info, 0, fd.access_flags().as_unsigned_short());\n+  JVMCIENV->put_int_at(info, 0, fd.access_flags().as_field_flags());\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1595,1 +1595,1 @@\n-    HotSpotJVMCI::FieldInfo::set_classfileFlags(JVMCIENV, obj_h(), (jint)fieldinfo->access_flags().as_unsigned_short());\n+    HotSpotJVMCI::FieldInfo::set_classfileFlags(JVMCIENV, obj_h(), (jint)fieldinfo->access_flags().as_field_flags());\n@@ -1606,1 +1606,1 @@\n-                                      (jint)fieldinfo->access_flags().as_unsigned_short(),\n+                                      (jint)fieldinfo->access_flags().as_field_flags(),\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3343,1 +3343,1 @@\n-  u2 access = access_flags().as_class_flags();\n+  u2 access = access_flags().as_unsigned_short();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -394,1 +394,1 @@\n-  int     field_access_flags(int index) const { return field(index).access_flags().as_unsigned_short(); }\n+  int     field_access_flags(int index) const { return field(index).access_flags().as_field_flags(); }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2303,1 +2303,1 @@\n-  st->print   (\" - access:            0x%x  \", access_flags().as_unsigned_short()); access_flags().print_on(st); st->cr();\n+  st->print   (\" - access:            0x%x  \", access_flags().as_method_flags()); access_flags().print_on(st); st->cr();\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1985,1 +1985,1 @@\n-    assert(this->Opcode() == Op_LoadUS, \"must load an unsigned short from _access_flags\");\n+    assert(Opcode() == Op_LoadUS, \"must load an unsigned short from _access_flags\");\n@@ -1991,1 +1991,1 @@\n-    assert(this->Opcode() == Op_LoadUB, \"must load an unsigned byte from _misc_flags\");\n+    assert(Opcode() == Op_LoadUB, \"must load an unsigned byte from _misc_flags\");\n@@ -1996,1 +1996,1 @@\n-    assert(this->Opcode() == Op_LoadI, \"must load an int from _layout_helper\");\n+    assert(Opcode() == Op_LoadI, \"must load an int from _layout_helper\");\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2470,4 +2470,1 @@\n-  u2 field_access_flags = InstanceKlass::cast(k)->field_access_flags(field_index);\n-  \/\/ This & should be unnecessary.\n-  assert((field_access_flags & JVM_RECOGNIZED_FIELD_MODIFIERS) == field_access_flags, \"already masked\");\n-  return field_access_flags;\n+  return InstanceKlass::cast(k)->field_access_flags(field_index);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}