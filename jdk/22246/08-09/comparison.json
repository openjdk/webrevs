{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-                access_flags().as_unsigned_short(),\n+                access_flags().as_field_flags(),\n@@ -100,1 +100,1 @@\n-    assert(fi_ref->access_flags().as_unsigned_short() == fi.access_flags().as_unsigned_short(), \"Must be\");\n+    assert(fi_ref->access_flags().as_field_flags() == fi.access_flags().as_field_flags(), \"Must be\");\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-  _consumer->accept_uint(fi.access_flags().as_unsigned_short());\n+  _consumer->accept_uint(fi.access_flags().as_field_flags());\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3343,1 +3343,1 @@\n-  u2 access = access_flags().as_unsigned_short();\n+  u2 access = access_flags().as_class_flags();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1656,1 +1656,1 @@\n-  u2 flags = access_flags().as_unsigned_short();\n+  u2 flags = access_flags().as_method_flags();\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1820,1 +1820,1 @@\n-  return k->access_flags().as_unsigned_short();\n+  return k->access_flags().as_class_flags();\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -3152,1 +3152,1 @@\n-  jint result = resultFlags.as_unsigned_short();\n+  jint result = resultFlags.as_field_flags();\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1008,2 +1008,2 @@\n-  u2 old_flags = the_class->access_flags().as_unsigned_short();\n-  u2 new_flags = scratch_class->access_flags().as_unsigned_short();\n+  u2 old_flags = the_class->access_flags().as_class_flags();\n+  u2 new_flags = scratch_class->access_flags().as_class_flags();\n@@ -1150,2 +1150,2 @@\n-      old_flags = k_old_method->access_flags().as_unsigned_short();\n-      new_flags = k_new_method->access_flags().as_unsigned_short();\n+      old_flags = k_old_method->access_flags().as_method_flags();\n+      new_flags = k_new_method->access_flags().as_method_flags();\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -407,1 +407,1 @@\n-    int flags = m->access_flags().as_unsigned_short();\n+    int flags = m->access_flags().as_method_flags();\n@@ -420,1 +420,1 @@\n-    int flags = m->access_flags().as_unsigned_short();\n+    int flags = m->access_flags().as_method_flags();\n@@ -525,1 +525,1 @@\n-      int flags = m->access_flags().as_unsigned_short();\n+      int flags = m->access_flags().as_method_flags();\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,5 +67,0 @@\n-  \/\/ Initialization\n-  void set_field_flags(u2 flags)      {\n-    assert((flags & JVM_RECOGNIZED_FIELD_MODIFIERS) == flags, \"only recognized flags\");\n-    _flags = (flags & JVM_RECOGNIZED_FIELD_MODIFIERS);\n-  }\n@@ -86,3 +81,14 @@\n-  u2 as_method_flags() const { return _flags & JVM_RECOGNIZED_METHOD_MODIFIERS; }\n-  u2 as_field_flags() const  { return _flags & JVM_RECOGNIZED_FIELD_MODIFIERS; }\n-  u2 as_class_flags() const  { return _flags & JVM_RECOGNIZED_CLASS_MODIFIERS; }\n+  u2 as_method_flags() const {\n+    assert((_flags & JVM_RECOGNIZED_METHOD_MODIFIERS) == _flags, \"only recognized flags\");\n+    return _flags;\n+  }\n+\n+  u2 as_field_flags() const  {\n+    assert((_flags & JVM_RECOGNIZED_FIELD_MODIFIERS) == _flags, \"only recognized flags\");\n+    return _flags;\n+  }\n+\n+  u2 as_class_flags() const  {\n+    assert((_flags & JVM_RECOGNIZED_CLASS_MODIFIERS) == _flags, \"only recognized flags\");\n+    return _flags;\n+  }\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.hpp","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"}]}