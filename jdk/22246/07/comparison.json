{"files":[{"patch":"@@ -506,1 +506,1 @@\n-  ldr(r2, Address(r1, Method::access_flags_offset()));\n+  ldrh(r2, Address(r1, Method::access_flags_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -763,1 +763,1 @@\n-      __ ldrw(rscratch1, Address(rmethod, Method::access_flags_offset()));\n+      __ ldrh(rscratch1, Address(rmethod, Method::access_flags_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -812,1 +812,1 @@\n-    __ ldrw(r0, access_flags);\n+    __ ldrh(r0, access_flags);\n@@ -823,1 +823,1 @@\n-    __ ldrw(r0, access_flags);\n+    __ ldrh(r0, access_flags);\n@@ -1228,1 +1228,1 @@\n-  __ ldrw(r0, access_flags);\n+  __ ldrh(r0, access_flags);\n@@ -1280,1 +1280,1 @@\n-      __ ldrw(r0, access_flags);\n+      __ ldrh(r0, access_flags);\n@@ -1357,1 +1357,1 @@\n-    __ ldrw(t, Address(rmethod, Method::access_flags_offset()));\n+    __ ldrh(t, Address(rmethod, Method::access_flags_offset()));\n@@ -1567,1 +1567,1 @@\n-    __ ldrw(t, Address(rmethod, Method::access_flags_offset()));\n+    __ ldrh(t, Address(rmethod, Method::access_flags_offset()));\n@@ -1698,1 +1698,1 @@\n-  __ ldrw(r0, access_flags);\n+  __ ldrh(r0, access_flags);\n@@ -1754,1 +1754,1 @@\n-      __ ldrw(r0, access_flags);\n+      __ ldrh(r0, access_flags);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -739,1 +739,1 @@\n-  ldr_u32(Raccess_flags, Address(Rmethod, Method::access_flags_offset()));\n+  ldrh(Raccess_flags, Address(Rmethod, Method::access_flags_offset()));\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -582,1 +582,1 @@\n-      __ ldr_u32(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n+      __ ldrh(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n@@ -591,1 +591,1 @@\n-    __ ldr_u32(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n+    __ ldrh(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n@@ -854,1 +854,1 @@\n-  __ ldr_u32(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n+  __ ldrh(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n@@ -896,1 +896,1 @@\n-        __ ldr_u32(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n+        __ ldrh(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n@@ -978,1 +978,1 @@\n-    __ ldr_u32(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n+    __ ldrh(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n@@ -1207,1 +1207,1 @@\n-  __ ldr_u32(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n+  __ ldrh(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n@@ -1252,1 +1252,1 @@\n-        __ ldr_u32(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n+        __ ldrh(Rtemp, Address(Rmethod, Method::access_flags_offset()));\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -684,1 +684,1 @@\n-    lwz(Raccess_flags, in_bytes(Method::access_flags_offset()), R19_method);\n+    lhz(Raccess_flags, in_bytes(Method::access_flags_offset()), R19_method);\n@@ -691,1 +691,1 @@\n-    rldicl_(R0, Raccess_flags, 64-JVM_ACC_SYNCHRONIZED_BIT, 63); \/\/ Extract bit and compare to 0.\n+    testbitdi(CCR0, R0, Raccess_flags, JVM_ACC_SYNCHRONIZED_BIT);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1205,1 +1205,1 @@\n-      __ lwz(R0, in_bytes(Method::access_flags_offset()), R19_method);\n+      __ lhz(R0, in_bytes(Method::access_flags_offset()), R19_method);\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -147,3 +147,3 @@\n-    \/\/ _access_flags must be a 32 bit value.\n-    assert(sizeof(AccessFlags) == 4, \"wrong size\");\n-    __ lwa(R11_scratch1\/*access_flags*\/, method_(access_flags));\n+    \/\/ _access_flags must be a 16 bit value.\n+    assert(sizeof(AccessFlags) == 2, \"wrong size\");\n+    __ lhz(R11_scratch1\/*access_flags*\/, method_(access_flags));\n@@ -826,1 +826,1 @@\n-      __ lwz(Rflags, method_(access_flags));\n+      __ lhz(Rflags, method_(access_flags));\n@@ -1304,2 +1304,2 @@\n-  assert(4 == sizeof(AccessFlags), \"unexpected field size\");\n-  __ lwz(access_flags, method_(access_flags));\n+  assert(2 == sizeof(AccessFlags), \"unexpected field size\");\n+  __ lhz(access_flags, method_(access_flags));\n@@ -1772,1 +1772,1 @@\n-    __ lwz(R0, in_bytes(Method::access_flags_offset()), R19_method);\n+    __ lhz(R0, in_bytes(Method::access_flags_offset()), R19_method);\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -547,1 +547,1 @@\n-  ld(x12, Address(x11, Method::access_flags_offset()));\n+  load_unsigned_short(x12, Address(x11, Method::access_flags_offset()));\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -644,1 +644,1 @@\n-      __ lwu(t0, Address(xmethod, Method::access_flags_offset()));\n+      __ load_unsigned_short(t0, Address(xmethod, Method::access_flags_offset()));\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -717,1 +717,1 @@\n-  __ lwu(x10, access_flags);\n+  __ load_unsigned_short(x10, access_flags);\n@@ -724,1 +724,1 @@\n-    __ lwu(x10, access_flags);\n+    __ load_unsigned_short(x10, access_flags);\n@@ -1031,1 +1031,1 @@\n-  __ lwu(x10, access_flags);\n+  __ load_unsigned_short(x10, access_flags);\n@@ -1069,1 +1069,1 @@\n-    __ lwu(x10, access_flags);\n+    __ load_unsigned_short(x10, access_flags);\n@@ -1133,1 +1133,1 @@\n-    __ lwu(t, Address(xmethod, Method::access_flags_offset()));\n+    __ load_unsigned_short(t, Address(xmethod, Method::access_flags_offset()));\n@@ -1349,1 +1349,1 @@\n-    __ lwu(t, Address(xmethod, Method::access_flags_offset()));\n+    __ load_unsigned_short(t, Address(xmethod, Method::access_flags_offset()));\n@@ -1475,1 +1475,1 @@\n-  __ lwu(x10, access_flags);\n+  __ load_unsigned_short(x10, access_flags);\n@@ -1522,1 +1522,1 @@\n-    __ lwu(x10, access_flags);\n+    __ load_unsigned_short(x10, access_flags);\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -783,1 +783,1 @@\n-    testbit(method2_(R_method, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n+    testbit_ushort(method2_(R_method, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1018,0 +1018,12 @@\n+\/\/ Test a bit in memory for 2 byte datatype.\n+void MacroAssembler::testbit_ushort(const Address &a, unsigned int bit) {\n+  assert(a.index() == noreg, \"no index reg allowed in testbit\");\n+  if (bit <= 7) {\n+    z_tm(a.disp() + 1, a.base(), 1 << bit);\n+  } else if (bit <= 15) {\n+    z_tm(a.disp() + 0, a.base(), 1 << (bit - 8));\n+  } else {\n+    ShouldNotReachHere();\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,0 +202,1 @@\n+  void testbit_ushort(const Address &a, unsigned int bit);\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -2398,1 +2398,1 @@\n-      __ testbit(Address(Z_method, Method::access_flags_offset()), JVM_ACC_STATIC_BIT);\n+      __ testbit_ushort(Address(Z_method, Method::access_flags_offset()), JVM_ACC_STATIC_BIT);\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,1 +167,1 @@\n-    __ testbit(method2_(method, access_flags), JVM_ACC_STATIC_BIT);\n+    __ testbit_ushort(method2_(method, access_flags), JVM_ACC_STATIC_BIT);\n@@ -886,1 +886,1 @@\n-    __ testbit(method2_(method, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n+    __ testbit_ushort(method2_(method, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n@@ -900,1 +900,1 @@\n-    __ testbit(method2_(method, access_flags), JVM_ACC_STATIC_BIT);\n+    __ testbit_ushort(method2_(method, access_flags), JVM_ACC_STATIC_BIT);\n@@ -1352,0 +1352,2 @@\n+  \/\/ _access_flags must be a 16 bit value.\n+  assert(sizeof(AccessFlags) == 2, \"testbit_ushort will fail\");\n@@ -1354,1 +1356,1 @@\n-    __ testbit(method_(access_flags), JVM_ACC_NATIVE_BIT);\n+    __ testbit_ushort(method_(access_flags), JVM_ACC_NATIVE_BIT);\n@@ -1360,1 +1362,1 @@\n-    __ testbit(method_(access_flags), JVM_ACC_ABSTRACT_BIT);\n+    __ testbit_ushort(method_(access_flags), JVM_ACC_ABSTRACT_BIT);\n@@ -1406,1 +1408,1 @@\n-      __ testbit(method2_(Z_R1_scratch, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n+      __ testbit_ushort(method2_(Z_R1_scratch, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n@@ -1464,1 +1466,1 @@\n-    __ testbit(method2_(Rmethod, access_flags), JVM_ACC_STATIC_BIT);\n+    __ testbit_ushort(method2_(Rmethod, access_flags), JVM_ACC_STATIC_BIT);\n@@ -1722,1 +1724,1 @@\n-    __ testbit(method_(access_flags), JVM_ACC_NATIVE_BIT);\n+    __ testbit_ushort(method_(access_flags), JVM_ACC_NATIVE_BIT);\n@@ -1728,1 +1730,1 @@\n-    __ testbit(method_(access_flags), JVM_ACC_ABSTRACT_BIT);\n+    __ testbit_ushort(method_(access_flags), JVM_ACC_ABSTRACT_BIT);\n@@ -1778,1 +1780,1 @@\n-      __ testbit(method2_(Z_R1_scratch, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n+      __ testbit_ushort(method2_(Z_R1_scratch, access_flags), JVM_ACC_SYNCHRONIZED_BIT);\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1033,1 +1033,1 @@\n-  movl(rcx, Address(rcx, Method::access_flags_offset()));\n+  load_unsigned_short(rcx, Address(rcx, Method::access_flags_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1102,1 +1102,1 @@\n-      __ movl(flags, Address(method, Method::access_flags_offset()));\n+      __ load_unsigned_short(flags, Address(method, Method::access_flags_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -599,1 +599,1 @@\n-    __ movl(rax, access_flags);\n+    __ load_unsigned_short(rax, access_flags);\n@@ -610,1 +610,1 @@\n-    __ movl(rax, access_flags);\n+    __ load_unsigned_short(rax, access_flags);\n@@ -858,1 +858,1 @@\n-  __ movl(rax, access_flags);\n+  __ load_unsigned_short(rax, access_flags);\n@@ -912,1 +912,1 @@\n-      __ movl(rax, access_flags);\n+      __ load_unsigned_short(rax, access_flags);\n@@ -1002,1 +1002,1 @@\n-    __ movl(t, Address(method, Method::access_flags_offset()));\n+    __ load_unsigned_short(t, Address(method, Method::access_flags_offset()));\n@@ -1283,1 +1283,1 @@\n-    __ movl(t, Address(method, Method::access_flags_offset()));\n+    __ load_unsigned_short(t, Address(method, Method::access_flags_offset()));\n@@ -1435,1 +1435,1 @@\n-  __ movl(rax, access_flags);\n+  __ load_unsigned_short(rax, access_flags);\n@@ -1492,1 +1492,1 @@\n-      __ movl(rax, access_flags);\n+      __ load_unsigned_short(rax, access_flags);\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        __ movl(rscratch1, Address(rbx, Method::access_flags_offset()));\n+        __ load_unsigned_short(rscratch1, Address(rbx, Method::access_flags_offset()));\n@@ -162,1 +162,1 @@\n-  __ movl(c_rarg3, Address(rbx, Method::access_flags_offset()));\n+  __ load_unsigned_short(c_rarg3, Address(rbx, Method::access_flags_offset()));\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1340,1 +1340,1 @@\n-  __ move(new LIR_Address(klass, in_bytes(Klass::modifier_flags_offset()), T_INT), result);\n+  __ move(new LIR_Address(klass, in_bytes(Klass::modifier_flags_offset()), T_CHAR), result);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-  st->print(\" flags=%x\", _flags);\n+  st->print(\" flags=%x\", _flags.as_unsigned_short());\n","filename":"src\/hotspot\/share\/ci\/ciFlags.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"jvm_constants.h\"\n@@ -42,1 +41,1 @@\n-  jint _flags;\n+  AccessFlags _flags;\n@@ -44,1 +43,1 @@\n-  bool _intialized_final_update;\n+  bool _initialized_final_update;\n@@ -46,1 +45,1 @@\n-  ciFlags() :_flags(0), _stable(false), _intialized_final_update(false) { }\n+  ciFlags() :_flags(0), _stable(false), _initialized_final_update(false) { }\n@@ -48,1 +47,1 @@\n-    _flags(flags.as_int()), _stable(is_stable), _intialized_final_update(is_initialized_final_update) { }\n+    _flags(flags), _stable(is_stable), _initialized_final_update(is_initialized_final_update) { }\n@@ -52,12 +51,12 @@\n-  bool is_public               () const { return (_flags & JVM_ACC_PUBLIC                    ) != 0; }\n-  bool is_private              () const { return (_flags & JVM_ACC_PRIVATE                   ) != 0; }\n-  bool is_protected            () const { return (_flags & JVM_ACC_PROTECTED                 ) != 0; }\n-  bool is_static               () const { return (_flags & JVM_ACC_STATIC                    ) != 0; }\n-  bool is_final                () const { return (_flags & JVM_ACC_FINAL                     ) != 0; }\n-  bool is_synchronized         () const { return (_flags & JVM_ACC_SYNCHRONIZED              ) != 0; }\n-  bool is_super                () const { return (_flags & JVM_ACC_SUPER                     ) != 0; }\n-  bool is_volatile             () const { return (_flags & JVM_ACC_VOLATILE                  ) != 0; }\n-  bool is_transient            () const { return (_flags & JVM_ACC_TRANSIENT                 ) != 0; }\n-  bool is_native               () const { return (_flags & JVM_ACC_NATIVE                    ) != 0; }\n-  bool is_interface            () const { return (_flags & JVM_ACC_INTERFACE                 ) != 0; }\n-  bool is_abstract             () const { return (_flags & JVM_ACC_ABSTRACT                  ) != 0; }\n+  bool is_public               () const { return _flags.is_public();       }\n+  bool is_private              () const { return _flags.is_private();      }\n+  bool is_protected            () const { return _flags.is_protected();    }\n+  bool is_static               () const { return _flags.is_static();       }\n+  bool is_final                () const { return _flags.is_final();        }\n+  bool is_synchronized         () const { return _flags.is_synchronized(); }\n+  bool is_super                () const { return _flags.is_super();        }\n+  bool is_volatile             () const { return _flags.is_volatile();     }\n+  bool is_transient            () const { return _flags.is_transient();    }\n+  bool is_native               () const { return _flags.is_native();       }\n+  bool is_interface            () const { return _flags.is_interface();    }\n+  bool is_abstract             () const { return _flags.is_abstract();     }\n@@ -69,1 +68,1 @@\n-  bool has_initialized_final_update() const { return _intialized_final_update; };\n+  bool has_initialized_final_update() const { return _initialized_final_update; };\n@@ -72,1 +71,1 @@\n-  jint   as_int()                      { return _flags; }\n+  jint   as_int()                      { return _flags.as_unsigned_short(); }\n","filename":"src\/hotspot\/share\/ci\/ciFlags.hpp","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-    return get_Klass()->access_flags().as_int();\n+    return get_Klass()->access_flags().as_unsigned_short();\n","filename":"src\/hotspot\/share\/ci\/ciKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2984,1 +2984,1 @@\n-    jint flags;\n+    u2 flags;\n@@ -3001,1 +3001,1 @@\n-    inner_classes->at_put(index++, inner_access_flags.as_short());\n+    inner_classes->at_put(index++, inner_access_flags.as_unsigned_short());\n@@ -3753,1 +3753,1 @@\n-  int computed_modifiers = this_klass->compute_modifier_flags();\n+  u2 computed_modifiers = this_klass->compute_modifier_flags();\n@@ -5339,1 +5339,1 @@\n-  assert(0 == _access_flags.as_int(), \"invariant\");\n+  assert(0 == _access_flags.as_unsigned_short(), \"invariant\");\n@@ -5491,1 +5491,1 @@\n-  jint flags;\n+  u2 flags;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3172,1 +3172,1 @@\n-  int flags = (jushort)( m->access_flags().as_short() & JVM_RECOGNIZED_METHOD_MODIFIERS );\n+  int flags = m->access_flags().as_method_flags();\n@@ -5540,1 +5540,1 @@\n-    tty->print_cr(\"  name: %s, sig: %s, flags: %08x\", fs.name()->as_C_string(), fs.signature()->as_C_string(), fs.access_flags().as_int());\n+    tty->print_cr(\"  name: %s, sig: %s, flags: %08x\", fs.name()->as_C_string(), fs.signature()->as_C_string(), fs.access_flags().as_unsigned_short());\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-inline bool match_F_R(jshort flags) {\n+inline bool match_F_R(u2 flags) {\n@@ -45,1 +45,1 @@\n-inline bool match_F_Y(jshort flags) {\n+inline bool match_F_Y(u2 flags) {\n@@ -51,1 +51,1 @@\n-inline bool match_F_RN(jshort flags) {\n+inline bool match_F_RN(u2 flags) {\n@@ -57,1 +57,1 @@\n-inline bool match_F_S(jshort flags) {\n+inline bool match_F_S(u2 flags) {\n@@ -63,1 +63,1 @@\n-inline bool match_F_SN(jshort flags) {\n+inline bool match_F_SN(u2 flags) {\n@@ -714,1 +714,1 @@\n-                                            jshort flags) {\n+                                            u2 flags) {\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1497,1 +1497,1 @@\n-                         jshort flags);\n+                         u2 flags);\n@@ -1508,1 +1508,1 @@\n-                    jshort flags) {\n+                    u2 flags) {\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -586,1 +586,1 @@\n-    jint new_flags = flags.as_int();\n+    u2 new_flags = flags.as_unsigned_short();\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-        *modifiers = jfs.access_flags().as_short();\n+        *modifiers = jfs.access_flags().as_unsigned_short();\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeUtils.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-static s4 get_flags(const T* ptr) {\n+static u2 get_flags(const T* ptr) {\n@@ -232,1 +232,1 @@\n-  return ptr->access_flags().get_flags();\n+  return ptr->access_flags().as_unsigned_short();\n@@ -971,1 +971,1 @@\n-  writer->write(static_cast<u2>(get_flags(method)));\n+  writer->write(get_flags(method));\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1003,1 +1003,1 @@\n-  JVMCIENV->put_int_at(info, 0, fd.access_flags().as_int());\n+  JVMCIENV->put_int_at(info, 0, fd.access_flags().as_unsigned_short());\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1595,1 +1595,1 @@\n-    HotSpotJVMCI::FieldInfo::set_classfileFlags(JVMCIENV, obj_h(), (jint)fieldinfo->access_flags().as_int());\n+    HotSpotJVMCI::FieldInfo::set_classfileFlags(JVMCIENV, obj_h(), (jint)fieldinfo->access_flags().as_unsigned_short());\n@@ -1606,1 +1606,1 @@\n-                                      (jint)fieldinfo->access_flags().as_int(),\n+                                      (jint)fieldinfo->access_flags().as_unsigned_short(),\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -276,1 +276,1 @@\n-  nonstatic_field(Klass,                       _modifier_flags,                               jint)                                  \\\n+  nonstatic_field(Klass,                       _modifier_flags,                               u2)                                    \\\n@@ -491,1 +491,0 @@\n-  declare_constant(JVM_ACC_WRITTEN_FLAGS)                                 \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-                access_flags().as_int(),\n+                access_flags().as_unsigned_short(),\n@@ -100,1 +100,1 @@\n-    assert(fi_ref->access_flags().as_int() == fi.access_flags().as_int(), \"Must be\");\n+    assert(fi_ref->access_flags().as_unsigned_short() == fi.access_flags().as_unsigned_short(), \"Must be\");\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-  _consumer->accept_uint(fi.access_flags().as_int());\n+  _consumer->accept_uint(fi.access_flags().as_unsigned_short());\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3342,2 +3342,2 @@\n-jint InstanceKlass::compute_modifier_flags() const {\n-  jint access = access_flags().as_int();\n+u2 InstanceKlass::compute_modifier_flags() const {\n+  u2 access = access_flags().as_unsigned_short();\n@@ -3363,1 +3363,1 @@\n-  return (access & (~JVM_ACC_SUPER)) & JVM_ACC_WRITTEN_FLAGS;\n+  return (access & (~JVM_ACC_SUPER));\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -394,1 +394,1 @@\n-  int     field_access_flags(int index) const { return field(index).access_flags().as_int(); }\n+  int     field_access_flags(int index) const { return field(index).access_flags().as_unsigned_short(); }\n@@ -685,2 +685,0 @@\n-  \/\/ The flag is in access_flags so that it can be set and reset using atomic\n-  \/\/ operations, and not be reset by other misc_flag settings.\n@@ -1130,1 +1128,1 @@\n-  jint compute_modifier_flags() const;\n+  u2 compute_modifier_flags() const;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-  enum KlassKind {\n+  enum KlassKind : u2 {\n@@ -116,1 +116,1 @@\n-  jint        _layout_helper;\n+  jint _layout_helper;\n@@ -123,0 +123,3 @@\n+  AccessFlags _access_flags;    \/\/ Access flags. The class\/interface distinction is stored here.\n+                                \/\/ Some flags created by the JVM, not in the class file itself,\n+                                \/\/ are in _misc_flags below.\n@@ -124,1 +127,3 @@\n-  jint        _modifier_flags;\n+  u2          _modifier_flags;\n+\n+  KlassFlags  _misc_flags;\n@@ -160,0 +165,2 @@\n+  markWord _prototype_header;   \/\/ Used to initialize objects' header\n+\n@@ -164,12 +171,0 @@\n-  markWord _prototype_header;   \/\/ Used to initialize objects' header\n-\n-  int _vtable_len;              \/\/ vtable length. This field may be read very often when we\n-                                \/\/ have lots of itable dispatches (e.g., lambdas and streams).\n-                                \/\/ Keep it away from the beginning of a Klass to avoid cacheline\n-                                \/\/ contention that may happen when a nearby object is modified.\n-  AccessFlags _access_flags;    \/\/ Access flags. The class\/interface distinction is stored here.\n-                                \/\/ Some flags created by the JVM, not in the class file itself,\n-                                \/\/ are in _misc_flags below.\n-\n-  JFR_ONLY(DEFINE_TRACE_ID_FIELD;)\n-\n@@ -203,1 +198,4 @@\n-  KlassFlags  _misc_flags;\n+  int _vtable_len;              \/\/ vtable length. This field may be read very often when we\n+                                \/\/ have lots of itable dispatches (e.g., lambdas and streams).\n+                                \/\/ Keep it away from the beginning of a Klass to avoid cacheline\n+                                \/\/ contention that may happen when a nearby object is modified.\n@@ -207,0 +205,4 @@\n+public:\n+\n+  JFR_ONLY(DEFINE_TRACE_ID_FIELD;)\n+\n@@ -295,2 +297,2 @@\n-  jint modifier_flags() const          { return _modifier_flags; }\n-  void set_modifier_flags(jint flags)  { _modifier_flags = flags; }\n+  u2 modifier_flags() const          { return _modifier_flags; }\n+  void set_modifier_flags(u2 flags)  { _modifier_flags = flags; }\n@@ -759,1 +761,1 @@\n-  virtual jint compute_modifier_flags() const = 0;\n+  virtual u2 compute_modifier_flags() const = 0;\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":21,"deletions":19,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1655,1 +1655,0 @@\n-  jshort flags = access_flags().as_short();\n@@ -1657,0 +1656,1 @@\n+  u2 flags = access_flags().as_unsigned_short();\n@@ -2303,1 +2303,1 @@\n-  st->print   (\" - access:            0x%x  \", access_flags().as_int()); access_flags().print_on(st); st->cr();\n+  st->print   (\" - access:            0x%x  \", access_flags().as_unsigned_short()); access_flags().print_on(st); st->cr();\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -78,1 +78,0 @@\n-  AccessFlags       _access_flags;               \/\/ Access flags\n@@ -80,0 +79,1 @@\n+  AccessFlags       _access_flags;               \/\/ Access flags\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -344,1 +344,1 @@\n-jint ObjArrayKlass::compute_modifier_flags() const {\n+u2 ObjArrayKlass::compute_modifier_flags() const {\n@@ -349,1 +349,1 @@\n-  jint element_flags = bottom_klass()->compute_modifier_flags();\n+  u2 element_flags = bottom_klass()->compute_modifier_flags();\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,1 +146,1 @@\n-  jint compute_modifier_flags() const;\n+  u2 compute_modifier_flags() const;\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-jint TypeArrayKlass::compute_modifier_flags() const {\n+u2 TypeArrayKlass::compute_modifier_flags() const {\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  jint compute_modifier_flags() const;\n+  u2 compute_modifier_flags() const;\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3874,1 +3874,1 @@\n-                                    Klass::access_flags_offset(), TypeInt::INT, T_INT);\n+                                    Klass::access_flags_offset(), TypeInt::CHAR, T_CHAR);\n@@ -3907,2 +3907,1 @@\n-    assert(is_power_of_2((int)JVM_ACC_WRITTEN_FLAGS+1), \"change next line\");\n-    return_type = TypeInt::make(0, JVM_ACC_WRITTEN_FLAGS, Type::WidenMin);\n+    return_type = TypeInt::CHAR;\n@@ -3930,1 +3929,1 @@\n-    return_type = TypeInt::INT;  \/\/ not bool!  6297094\n+    return_type = TypeInt::CHAR;\n@@ -3991,1 +3990,1 @@\n-    query_value = make_load(nullptr, p, TypeInt::INT, T_INT, MemNode::unordered);\n+    query_value = make_load(nullptr, p, TypeInt::CHAR, T_CHAR, MemNode::unordered);\n@@ -4056,1 +4055,1 @@\n-    query_value = make_load(nullptr, p, TypeInt::INT, T_INT, MemNode::unordered);\n+    query_value = make_load(nullptr, p, TypeInt::CHAR, T_CHAR, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1979,1 +1979,1 @@\n-    assert(this->Opcode() == Op_LoadI, \"must load an int from _modifier_flags\");\n+    assert(Opcode() == Op_LoadUS, \"must load an unsigned short from _modifier_flags\");\n@@ -1985,1 +1985,1 @@\n-    assert(this->Opcode() == Op_LoadI, \"must load an int from _access_flags\");\n+    assert(this->Opcode() == Op_LoadUS, \"must load an unsigned short from _access_flags\");\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1309,1 +1309,1 @@\n-  debug_only(int computed_modifiers = k->compute_modifier_flags());\n+  debug_only(u2 computed_modifiers = k->compute_modifier_flags());\n@@ -1820,1 +1820,1 @@\n-  return k->access_flags().as_int() & JVM_ACC_WRITTEN_FLAGS;\n+  return k->access_flags().as_unsigned_short();\n@@ -2463,1 +2463,1 @@\n-  return method->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS;\n+  return method->access_flags().as_method_flags();\n@@ -2470,1 +2470,4 @@\n-  return InstanceKlass::cast(k)->field_access_flags(field_index) & JVM_RECOGNIZED_FIELD_MODIFIERS;\n+  u2 field_access_flags = InstanceKlass::cast(k)->field_access_flags(field_index);\n+  \/\/ This & should be unnecessary.\n+  assert((field_access_flags & JVM_RECOGNIZED_FIELD_MODIFIERS) == field_access_flags, \"already masked\");\n+  return field_access_flags;\n@@ -2660,1 +2663,1 @@\n-          return fs.access_flags().as_short() & JVM_RECOGNIZED_FIELD_MODIFIERS;\n+          return fs.access_flags().as_field_flags();\n@@ -2689,1 +2692,1 @@\n-            return method->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS;\n+            return method->access_flags().as_method_flags();\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    write_u2(access_flags.get_flags() & JVM_RECOGNIZED_FIELD_MODIFIERS);\n+    write_u2(access_flags.as_field_flags());\n@@ -707,1 +707,1 @@\n-  write_u2(access_flags.get_flags() & JVM_RECOGNIZED_METHOD_MODIFIERS);\n+  write_u2(access_flags.as_method_flags());\n@@ -922,1 +922,1 @@\n-  write_u2(ik()->access_flags().get_flags() & JVM_RECOGNIZED_CLASS_MODIFIERS);\n+  write_u2(ik()->access_flags().as_class_flags());\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3152,1 +3152,1 @@\n-  jint result = resultFlags.as_int();\n+  jint result = resultFlags.as_unsigned_short();\n@@ -3231,1 +3231,1 @@\n-  (*modifiers_ptr) = method->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS;\n+  (*modifiers_ptr) = method->access_flags().as_method_flags();\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1008,2 +1008,2 @@\n-  jushort old_flags = (jushort) the_class->access_flags().get_flags();\n-  jushort new_flags = (jushort) scratch_class->access_flags().get_flags();\n+  u2 old_flags = the_class->access_flags().as_unsigned_short();\n+  u2 new_flags = scratch_class->access_flags().as_unsigned_short();\n@@ -1043,3 +1043,3 @@\n-    old_flags = old_fs.access_flags().as_short();\n-    new_flags = new_fs.access_flags().as_short();\n-    if ((old_flags ^ new_flags) & JVM_RECOGNIZED_FIELD_MODIFIERS) {\n+    old_flags = old_fs.access_flags().as_field_flags();\n+    new_flags = new_fs.access_flags().as_field_flags();\n+    if (old_flags != new_flags) {\n@@ -1150,2 +1150,2 @@\n-      old_flags = (jushort) k_old_method->access_flags().get_flags();\n-      new_flags = (jushort) k_new_method->access_flags().get_flags();\n+      old_flags = k_old_method->access_flags().as_unsigned_short();\n+      new_flags = k_new_method->access_flags().as_unsigned_short();\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-  int flags = (jushort)( m->access_flags().as_short() & JVM_RECOGNIZED_METHOD_MODIFIERS );\n+  int flags = (m->access_flags().as_method_flags());\n@@ -355,1 +355,1 @@\n-  int flags = (jushort)( fd.access_flags().as_short() & JVM_RECOGNIZED_FIELD_MODIFIERS );\n+  int flags = fd.access_flags().as_field_flags();\n@@ -407,1 +407,1 @@\n-    int flags = m->access_flags().as_int();\n+    int flags = m->access_flags().as_unsigned_short();\n@@ -420,1 +420,1 @@\n-    int flags = m->access_flags().as_int();\n+    int flags = m->access_flags().as_unsigned_short();\n@@ -525,1 +525,1 @@\n-      int flags = m->access_flags().as_int();\n+      int flags = m->access_flags().as_unsigned_short();\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -781,1 +781,1 @@\n-  const int modifiers = method->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS;\n+  const int modifiers = method->access_flags().as_method_flags();\n@@ -822,1 +822,1 @@\n-  const int modifiers = method->access_flags().as_int() & JVM_RECOGNIZED_METHOD_MODIFIERS;\n+  const int modifiers = method->access_flags().as_method_flags();\n@@ -862,1 +862,1 @@\n-  java_lang_reflect_Field::set_modifiers(rh(), fd->access_flags().as_int() & JVM_RECOGNIZED_FIELD_MODIFIERS);\n+  java_lang_reflect_Field::set_modifiers(rh(), fd->access_flags().as_field_flags());\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -266,1 +266,1 @@\n-  nonstatic_field(Klass,                       _modifier_flags,                               jint)                                  \\\n+  nonstatic_field(Klass,                       _modifier_flags,                               u2)                                    \\\n@@ -1020,1 +1020,1 @@\n-  nonstatic_field(AccessFlags,                 _flags,                                        jint)                                  \\\n+  nonstatic_field(AccessFlags,                 _flags,                                        u2)                                    \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-  assert(sizeof(AccessFlags) == sizeof(jint), \"just checking size of flags\");\n+  assert(sizeof(AccessFlags) == sizeof(u2), \"just checking size of flags\");\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-\/\/ AccessFlags is an abstraction over Java access flags.\n+\/\/ AccessFlags is an abstraction over Java ACC flags.\n+\/\/ See generated file classfile_constants.h for shared JVM_ACC_XXX access flags\n@@ -37,10 +38,0 @@\n-enum {\n-  \/\/ See jvm.h for shared JVM_ACC_XXX access flags\n-\n-  \/\/ flags actually put in .class file\n-  JVM_ACC_WRITTEN_FLAGS           = 0x00007FFF,\n-\n-  \/\/ Do not add new ACC flags here.\n-};\n-\n-\n@@ -50,1 +41,1 @@\n-  jint _flags;  \/\/ TODO: move 4 access flags above to Klass and change to u2\n+  u2 _flags;\n@@ -54,1 +45,1 @@\n-  explicit AccessFlags(jint flags) : _flags(flags) {}\n+  explicit AccessFlags(u2 flags) : _flags(flags) {}\n@@ -73,2 +64,2 @@\n-  \/\/ get .class file flags\n-  jint get_flags               () const { return (_flags & JVM_ACC_WRITTEN_FLAGS); }\n+  \/\/ get as integral value\n+  u2 as_unsigned_short() const         { return _flags; }\n@@ -77,1 +68,1 @@\n-  void set_field_flags(jint flags)      {\n+  void set_field_flags(u2 flags)      {\n@@ -81,1 +72,1 @@\n-  void set_flags(jint flags)            { _flags = (flags & JVM_ACC_WRITTEN_FLAGS); }\n+  void set_flags(u2 flags)            { _flags = flags; }\n@@ -93,3 +84,1 @@\n-  \/\/ Conversion\n-  jshort as_short() const              { return (jshort)_flags; }\n-  jint   as_int() const                { return _flags; }\n+  inline friend AccessFlags accessFlags_from(u2 flags);\n@@ -97,1 +86,3 @@\n-  inline friend AccessFlags accessFlags_from(jint flags);\n+  u2 as_method_flags() const { return _flags & JVM_RECOGNIZED_METHOD_MODIFIERS; }\n+  u2 as_field_flags() const  { return _flags & JVM_RECOGNIZED_FIELD_MODIFIERS; }\n+  u2 as_class_flags() const  { return _flags & JVM_RECOGNIZED_CLASS_MODIFIERS; }\n@@ -107,1 +98,1 @@\n-inline AccessFlags accessFlags_from(jint flags) {\n+inline AccessFlags accessFlags_from(u2 flags) {\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.hpp","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    return (int) (flags & JVM_ACC_WRITTEN_FLAGS);\n+    return (int)flags;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/AccessFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,8 +101,0 @@\n-    \/\/ from accessFlags.hpp - hotspot internal flags\n-\n-    \/\/ flags actually put in .class file\n-    public static final long JVM_ACC_WRITTEN_FLAGS = 0x00007FFF;\n-\n-    \/\/ flags accepted by set_field_flags\n-    public static final long JVM_ACC_FIELD_FLAGS = 0x00008000 | JVM_ACC_WRITTEN_FLAGS;\n-\n@@ -110,1 +102,0 @@\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/ClassConstants.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}