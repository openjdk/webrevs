{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1412,1 +1412,1 @@\n-            container.onStart(this);  \/\/ may throw\n+            container.add(this);  \/\/ may throw\n@@ -1421,1 +1421,1 @@\n-                    container.onExit(this);\n+                    container.remove(this);\n@@ -1490,1 +1490,1 @@\n-                container.onExit(this);\n+                container.remove(this);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -667,1 +667,1 @@\n-            threadContainer().onExit(this);\n+            threadContainer().remove(this);\n@@ -695,1 +695,1 @@\n-            container.onStart(this);  \/\/ may throw\n+            container.add(this);  \/\/ may throw\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.internal.vm.Continuation;\n@@ -148,13 +147,0 @@\n-    private boolean tryDisablePreempt() {\n-        if (Thread.currentThread().isVirtual() && ContinuationSupport.isSupported()) {\n-            Continuation.pin();\n-            return true;\n-        } else {\n-            return false;\n-        }\n-    }\n-\n-    private void enablePreempt() {\n-        Continuation.unpin();\n-    }\n-\n@@ -176,1 +162,1 @@\n-        boolean disabled = tryDisablePreempt();\n+        ContinuationSupport.pinIfSupported();\n@@ -182,1 +168,1 @@\n-            if (disabled) enablePreempt();\n+            ContinuationSupport.unpinIfSupported();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/ReferenceQueue.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,18 @@\n+    \/**\n+     * Pins the current continuation if the VM has continuations support.\n+     *\/\n+    public static void pinIfSupported() {\n+        if (isSupported()) {\n+            Continuation.pin();\n+        }\n+    }\n+\n+    \/**\n+     * Unpins the current continuation if the VM has continuations support.\n+     *\/\n+    public static void unpinIfSupported() {\n+        if (isSupported()) {\n+            Continuation.unpin();\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ContinuationSupport.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-     * Invoked by Thread::start before the given Thread is started.\n+     * Invoked by {@code add} to add a thread to this container before it starts.\n@@ -81,2 +81,1 @@\n-    public void onStart(Thread thread) {\n-        \/\/ do nothing\n+    protected void onStart(Thread thread) {\n@@ -86,8 +85,2 @@\n-     * Invoked when a Thread terminates or starting it fails.\n-     *\n-     * For a platform thread, this method is invoked by the thread itself when it\n-     * terminates. For a virtual thread, this method is invoked on its carrier\n-     * after the virtual thread has terminated.\n-     *\n-     * If starting the Thread failed then this method is invoked on the thread\n-     * that invoked onStart.\n+     * Invoked by {@code remove} to remove a thread from this container when it\n+     * terminates (or failed to start).\n@@ -95,2 +88,34 @@\n-    public void onExit(Thread thread) {\n-        \/\/ do nothing\n+    protected void onExit(Thread thread) {\n+    }\n+\n+    \/**\n+     * Adds a thread to this container. This method should be invoked before the\n+     * thread executes.\n+     *\/\n+    public final void add(Thread thread) {\n+        \/\/ Prevent a virtual thread from being preempted as this could potentially\n+        \/\/ deadlock when scheduled to continue and all carriers are blocked adding\n+        \/\/ or removing virtual threads.\n+        ContinuationSupport.pinIfSupported();\n+        try {\n+            onStart(thread);\n+        } finally {\n+            ContinuationSupport.unpinIfSupported();\n+        }\n+    }\n+\n+    \/**\n+     * Remove a thread from this container. This method can be invoked by the thread\n+     * itself as it terminates, or it can be invoked by another thread after the given\n+     * thread has terminated (or failed to start).\n+     *\/\n+    public final void remove(Thread thread) {\n+        \/\/ Prevent a virtual thread from being preempted as this could potentially\n+        \/\/ deadlock when scheduled to continue and all carriers are blocked adding\n+        \/\/ or removing virtual threads.\n+        ContinuationSupport.pinIfSupported();\n+        try {\n+            onExit(thread);\n+        } finally {\n+            ContinuationSupport.unpinIfSupported();\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ThreadContainer.java","additions":39,"deletions":14,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import jdk.internal.vm.Continuation;\n@@ -109,3 +108,1 @@\n-        if (ContinuationSupport.isSupported())\n-            Continuation.pin();\n-\n+        ContinuationSupport.pinIfSupported();\n@@ -129,2 +126,1 @@\n-                if (ContinuationSupport.isSupported())\n-                    Continuation.unpin();\n+                ContinuationSupport.unpinIfSupported();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsSecurity.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"}]}