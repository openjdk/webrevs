{"files":[{"patch":"@@ -836,0 +836,3 @@\n+                                                                            \\\n+  develop(bool, StressLoopPeeling, false,                                   \\\n+          \"Randomize peeling decision\")                                     \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -732,1 +732,2 @@\n-      StressIncrementalInlining || StressMacroExpansion || StressUnstableIfTraps || StressBailout) {\n+      StressIncrementalInlining || StressMacroExpansion || StressUnstableIfTraps || StressBailout ||\n+      StressLoopPeeling) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -494,1 +494,1 @@\n-  if (_body.size() > 255) {\n+  if (_body.size() > 255 && !StressLoopPeeling) {\n@@ -509,0 +509,1 @@\n+      \/\/ Peeling is not legal here (cf. assert in do_peeling), we don't even stress peel!\n@@ -513,0 +514,15 @@\n+#ifndef PRODUCT\n+  \/\/ It is now safe to peel or not.\n+  if (StressLoopPeeling) {\n+    LoopNode* loop_head = _head->as_Loop();\n+    static constexpr uint max_peeling_opportunities = 5;\n+    if (loop_head->_peeling_opportunities_count < max_peeling_opportunities) {\n+      loop_head->_peeling_opportunities_count++;\n+      \/\/ In case of stress, let's just pick randomly...\n+      return phase->C->random() % 2 == 0 ? estimate : 0;\n+    }\n+    return 0;\n+  }\n+  \/\/ ...otherwise, let's apply our heuristic.\n+#endif\n+\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -136,0 +136,4 @@\n+#ifndef PRODUCT\n+  uint _peeling_opportunities_count = 0;\n+#endif\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}