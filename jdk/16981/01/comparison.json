{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.lang.ref.ReferenceQueue;\n@@ -502,1 +503,26 @@\n-    @NativeImageReinitialize private HashMap<Long, WeakReference<ResolvedJavaType>> resolvedJavaTypes;\n+\n+    \/**\n+     * A weak reference that also tracks the key used to insert the value into {@link #resolvedJavaTypes} so that\n+     * it can be removed when the referent is cleared.\n+     *\/\n+    static class KlassWeakReference extends WeakReference<HotSpotResolvedObjectTypeImpl> {\n+\n+        private final Long klassPointer;\n+\n+        public KlassWeakReference(Long klassPointer, HotSpotResolvedObjectTypeImpl referent, ReferenceQueue<HotSpotResolvedObjectTypeImpl> q) {\n+            super(referent, q);\n+            this.klassPointer = klassPointer;\n+        }\n+    }\n+\n+    \/**\n+     * A mapping from the {@code Klass*} to the corresponding {@link HotSpotResolvedObjectTypeImpl}.  The value is\n+     * held weakly through a {@link KlassWeakReference} so that unused types can be unloaded when the compiler no longer needs them.\n+     *\/\n+    @NativeImageReinitialize private HashMap<Long, KlassWeakReference> resolvedJavaTypes;\n+\n+    \/**\n+     * A {@link ReferenceQueue} to track when {@link KlassWeakReference}s have been freed so that the corresponding\n+     * entry in {@link #resolvedJavaTypes} can be cleared.\n+     *\/\n+    @NativeImageReinitialize private ReferenceQueue<HotSpotResolvedObjectTypeImpl> resolvedJavaTypesQueue;\n@@ -665,1 +691,1 @@\n-    synchronized HotSpotResolvedObjectTypeImpl fromMetaspace(long klassPointer) {\n+    synchronized HotSpotResolvedObjectTypeImpl fromMetaspace(Long klassPointer) {\n@@ -668,0 +694,1 @@\n+            resolvedJavaTypesQueue = new ReferenceQueue<>();\n@@ -670,1 +697,1 @@\n-        WeakReference<ResolvedJavaType> klassReference = resolvedJavaTypes.get(klassPointer);\n+        KlassWeakReference klassReference = resolvedJavaTypes.get(klassPointer);\n@@ -673,1 +700,1 @@\n-            javaType = (HotSpotResolvedObjectTypeImpl) klassReference.get();\n+            javaType = klassReference.get();\n@@ -678,1 +705,1 @@\n-            resolvedJavaTypes.put(klassPointer, new WeakReference<>(javaType));\n+            resolvedJavaTypes.put(klassPointer, new KlassWeakReference(klassPointer, javaType, resolvedJavaTypesQueue));\n@@ -680,0 +707,1 @@\n+        expungeStaleKlassEntries();\n@@ -683,0 +711,15 @@\n+\n+    \/**\n+     * Clean up WeakReferences whose referents have been cleared.  This should be called from a synchronized context.\n+     *\/\n+    private void expungeStaleKlassEntries() {\n+        KlassWeakReference current = (KlassWeakReference) resolvedJavaTypesQueue.poll();\n+        while (current != null) {\n+            \/\/ Make sure the entry is still mapped to the weak reference\n+            if (resolvedJavaTypes.get(current.klassPointer) == current) {\n+                resolvedJavaTypes.remove(current.klassPointer);\n+            }\n+            current = (KlassWeakReference) resolvedJavaTypesQueue.poll();\n+        }\n+    }\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":48,"deletions":5,"binary":false,"changes":53,"status":"modified"}]}