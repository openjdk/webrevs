{"files":[{"patch":"@@ -5515,0 +5515,4 @@\n+opclass memory_noindex(indirect, indOffI, indOffL,\n+                       indirectN, indOffIN,\n+                       indOffLN, indirectX2P, indOffX2P);\n+\n@@ -6451,1 +6455,1 @@\n-instruct loadNKlassCompactHeaders(iRegNNoSp dst, memory mem)\n+instruct loadNKlassCompactHeaders(iRegNNoSp dst, memory_noindex mem)\n@@ -6457,1 +6461,1 @@\n-  format %{ \"ldrw  $dst, $mem\\t# compressed class ptr\" %}\n+  format %{ \"load_nklass_compact  $dst, $mem\\t# compressed class ptr\" %}\n@@ -6459,1 +6463,2 @@\n-    __ load_nklass_compact_c2($dst$$Register, $mem$$base$$Register, $mem$$index$$Register, $mem$$scale, $mem$$disp);\n+    assert($mem$$index$$Register == noreg, \"must not have indexed address\");\n+    __ load_nklass_compact_c2($dst$$Register, $mem$$base$$Register, $mem$$disp);\n@@ -6461,1 +6466,1 @@\n-  ins_pipe(pipe_slow);\n+  ins_pipe(iload_reg_mem);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2561,1 +2561,1 @@\n-void C2_MacroAssembler::load_nklass_compact_c2(Register dst, Register obj, Register index, int scale, int disp) {\n+void C2_MacroAssembler::load_nklass_compact_c2(Register dst, Register obj, int disp) {\n@@ -2572,6 +2572,1 @@\n-  if (index == noreg) {\n-    ldr(dst, Address(obj, offset));\n-  } else {\n-    lea(dst, Address(obj, index, Address::lsl(scale)));\n-    ldr(dst, Address(dst, offset));\n-  }\n+  ldr(dst, Address(obj, offset));\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-  void load_nklass_compact_c2(Register dst, Register obj, Register index, int scale, int disp);\n+  void load_nklass_compact_c2(Register dst, Register obj, int disp);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}