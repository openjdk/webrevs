{"files":[{"patch":"@@ -37,0 +37,1 @@\n+#include \"gc\/shared\/fullGCForwarding.hpp\"\n@@ -38,1 +39,0 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -251,1 +251,1 @@\n-  GCForwarding::initialize_flags(heap_reserved_size_bytes());\n+  FullGCForwarding::initialize_flags(heap_reserved_size_bytes());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+#include \"gc\/shared\/fullGCForwarding.hpp\"\n@@ -81,1 +82,0 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -1438,1 +1438,1 @@\n-  GCForwarding::initialize();\n+  FullGCForwarding::initialize();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.inline.hpp\"\n@@ -45,1 +45,1 @@\n-  if (GCForwarding::is_forwarded(obj)) {\n+  if (FullGCForwarding::is_forwarded(obj)) {\n@@ -56,2 +56,2 @@\n-  assert(GCForwarding::is_forwarded(obj), \"Sanity!\");\n-  assert(GCForwarding::forwardee(obj) != obj, \"Object must have a new location\");\n+  assert(FullGCForwarding::is_forwarded(obj), \"Sanity!\");\n+  assert(FullGCForwarding::forwardee(obj) != obj, \"Object must have a new location\");\n@@ -62,1 +62,1 @@\n-  HeapWord* destination = cast_from_oop<HeapWord*>(GCForwarding::forwardee(obj));\n+  HeapWord* destination = cast_from_oop<HeapWord*>(FullGCForwarding::forwardee(obj));\n@@ -125,1 +125,1 @@\n-  HeapWord* destination = cast_from_oop<HeapWord*>(GCForwarding::forwardee(obj));\n+  HeapWord* destination = cast_from_oop<HeapWord*>(FullGCForwarding::forwardee(obj));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.inline.hpp\"\n@@ -110,2 +110,2 @@\n-    GCForwarding::forward_to(object, cast_to_oop(_compaction_top));\n-    assert(GCForwarding::is_forwarded(object), \"must be forwarded\");\n+    FullGCForwarding::forward_to(object, cast_to_oop(_compaction_top));\n+    assert(FullGCForwarding::is_forwarded(object), \"must be forwarded\");\n@@ -113,1 +113,1 @@\n-    assert(!GCForwarding::is_forwarded(object), \"must not be forwarded\");\n+    assert(!FullGCForwarding::is_forwarded(object), \"must not be forwarded\");\n@@ -176,2 +176,2 @@\n-  GCForwarding::forward_to(obj, cast_to_oop(dest_hr->bottom()));\n-  assert(GCForwarding::is_forwarded(obj), \"Object must be forwarded!\");\n+  FullGCForwarding::forward_to(obj, cast_to_oop(dest_hr->bottom()));\n+  assert(FullGCForwarding::is_forwarded(obj), \"Object must be forwarded!\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.inline.hpp\"\n@@ -69,2 +69,2 @@\n-  if (GCForwarding::is_forwarded(obj)) {\n-    oop forwardee = GCForwarding::forwardee(obj);\n+  if (FullGCForwarding::is_forwarded(obj)) {\n+    oop forwardee = FullGCForwarding::forwardee(obj);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.inline.hpp\"\n@@ -118,1 +118,1 @@\n-  if (GCForwarding::is_forwarded(obj)) {\n+  if (FullGCForwarding::is_forwarded(obj)) {\n@@ -121,1 +121,1 @@\n-    if (cast_from_oop<HeapWord*>(GCForwarding::forwardee(obj)) < _dense_prefix_top) {\n+    if (cast_from_oop<HeapWord*>(FullGCForwarding::forwardee(obj)) < _dense_prefix_top) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -472,6 +472,6 @@\n-  \/\/ NOTE: With compact headers, it is not safe to load the Klass* from o, because\n-  \/\/ that would access the mark-word, and the mark-word might change at any time by\n-  \/\/ concurrent promotion. The promoted mark-word would point to the forwardee, which\n-  \/\/ may not yet have completed copying. Therefore we must load the Klass* from\n-  \/\/ the mark-word that we have already loaded. This is safe, because we have checked\n-  \/\/ that this is not yet forwarded in the caller.\n+  \/\/ NOTE: With compact headers, it is not safe to load the Klass* from old, because\n+  \/\/ that would access the mark-word, that might change at any time by concurrent\n+  \/\/ workers.\n+  \/\/ This mark word would refer to a forwardee, which may not yet have completed\n+  \/\/ copying. Therefore we must load the Klass* from the mark-word that we already\n+  \/\/ loaded. This is safe, because we only enter here if not yet forwarded.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-      assert(obj->forwardee() != obj, \"must not be self-forwarded\");\n+      assert(!obj->is_self_forwarded(), \"must not be self-forwarded\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/fullGCForwarding.hpp\"\n@@ -31,1 +32,0 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -131,1 +131,1 @@\n-  GCForwarding::initialize_flags(heap_reserved_size_bytes());\n+  FullGCForwarding::initialize_flags(heap_reserved_size_bytes());\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelArguments.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.inline.hpp\"\n@@ -133,1 +133,1 @@\n-  GCForwarding::initialize();\n+  FullGCForwarding::initialize();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#include \"gc\/shared\/fullGCForwarding.inline.hpp\"\n@@ -48,1 +49,0 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n@@ -1600,1 +1600,1 @@\n-              GCForwarding::forward_to(obj, cast_to_oop(new_addr));\n+              FullGCForwarding::forward_to(obj, cast_to_oop(new_addr));\n@@ -1643,1 +1643,1 @@\n-        assert(GCForwarding::forwardee(obj) == cast_to_oop(bump_ptr), \"inv\");\n+        assert(FullGCForwarding::forwardee(obj) == cast_to_oop(bump_ptr), \"inv\");\n@@ -2406,2 +2406,2 @@\n-    assert(GCForwarding::is_forwarded(cast_to_oop(source())), \"inv\");\n-    assert(GCForwarding::forwardee(cast_to_oop(source())) == cast_to_oop(destination()), \"inv\");\n+    assert(FullGCForwarding::is_forwarded(cast_to_oop(source())), \"inv\");\n+    assert(FullGCForwarding::forwardee(cast_to_oop(source())) == cast_to_oop(destination()), \"inv\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.inline.hpp\"\n@@ -83,1 +83,1 @@\n-    oop new_obj = GCForwarding::forwardee(obj);\n+    oop new_obj = FullGCForwarding::forwardee(obj);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -169,6 +169,6 @@\n-  \/\/ NOTE: With compact headers, it is not safe to load the Klass* from o, because\n-  \/\/ that would access the mark-word, and the mark-word might change at any time by\n-  \/\/ concurrent promotion. The promoted mark-word would point to the forwardee, which\n-  \/\/ may not yet have completed copying. Therefore we must load the Klass* from\n-  \/\/ the mark-word that we have already loaded. This is safe, because we have checked\n-  \/\/ that this is not yet forwarded in the caller.)\n+  \/\/ NOTE: With compact headers, it is not safe to load the Klass* from old, because\n+  \/\/ that would access the mark-word, that might change at any time by concurrent\n+  \/\/ workers.\n+  \/\/ This mark word would refer to a forwardee, which may not yet have completed\n+  \/\/ copying. Therefore we must load the Klass* from the mark-word that we already\n+  \/\/ loaded. This is safe, because we only enter here if not yet forwarded.\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.hpp\"\n@@ -33,1 +33,1 @@\n-  GCForwarding::initialize_flags(MaxHeapSize);\n+  FullGCForwarding::initialize_flags(MaxHeapSize);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialArguments.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.inline.hpp\"\n@@ -234,1 +234,1 @@\n-      GCForwarding::forward_to(obj, cast_to_oop(new_addr));\n+      FullGCForwarding::forward_to(obj, cast_to_oop(new_addr));\n@@ -259,1 +259,1 @@\n-    oop new_obj = GCForwarding::forwardee(obj);\n+    oop new_obj = FullGCForwarding::forwardee(obj);\n@@ -356,1 +356,1 @@\n-      if (!GCForwarding::is_forwarded(cast_to_oop(cur_addr))) {\n+      if (!FullGCForwarding::is_forwarded(cast_to_oop(cur_addr))) {\n@@ -362,1 +362,1 @@\n-        if (!GCForwarding::is_forwarded(cast_to_oop(cur_addr))) {\n+        if (!FullGCForwarding::is_forwarded(cast_to_oop(cur_addr))) {\n@@ -628,2 +628,2 @@\n-    if (GCForwarding::is_forwarded(obj)) {\n-      oop new_obj = GCForwarding::forwardee(obj);\n+    if (FullGCForwarding::is_forwarded(obj)) {\n+      oop new_obj = FullGCForwarding::forwardee(obj);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialFullGC.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.hpp\"\n@@ -204,1 +204,1 @@\n-  GCForwarding::initialize();\n+  FullGCForwarding::initialize();\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -709,1 +709,1 @@\n-  \/\/ 8  - 32-bit VM\n+  \/\/ 8  - 32-bit VM or 64-bit VM, compact headers\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -232,3 +232,7 @@\n-  \/\/ With compact headers, we can't safely access the class, due\n-  \/\/ to possibly forwarded objects.\n-  if (!UseCompactObjectHeaders && !Metaspace::contains(object->klass_without_asserts())) {\n+  \/\/ With compact headers, we can't safely access the Klass* when\n+  \/\/ the object has been forwarded, because non-full-GC-forwarding\n+  \/\/ temporarily overwrites the mark-word, and thus the Klass*, with\n+  \/\/ the forwarding pointer, and here we have no way to make a\n+  \/\/ distinction between Full-GC and regular GC forwarding.\n+  bool can_access_klass = !UseCompactObjectHeaders || !object->is_forwarded();\n+  if (can_access_klass && !Metaspace::contains(object->klass_without_asserts())) {\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.hpp\"\n+#include \"memory\/memRegion.hpp\"\n+#include \"runtime\/globals_extension.hpp\"\n+\n+HeapWord* FullGCForwarding::_heap_base = nullptr;\n+int FullGCForwarding::_num_low_bits = 0;\n+\n+void FullGCForwarding::initialize_flags(size_t max_heap_size) {\n+#ifdef _LP64\n+  size_t max_narrow_heap_size = right_n_bits(NumLowBitsNarrow - Shift);\n+  if (UseCompactObjectHeaders && max_heap_size > max_narrow_heap_size * HeapWordSize) {\n+    warning(\"Compact object headers require a java heap size smaller than \" SIZE_FORMAT\n+            \"%s (given: \" SIZE_FORMAT \"%s). Disabling compact object headers.\",\n+            byte_size_in_proper_unit(max_narrow_heap_size * HeapWordSize),\n+            proper_unit_for_byte_size(max_narrow_heap_size * HeapWordSize),\n+            byte_size_in_proper_unit(max_heap_size),\n+            proper_unit_for_byte_size(max_heap_size));\n+    FLAG_SET_ERGO(UseCompactObjectHeaders, false);\n+  }\n+#endif\n+}\n+\n+void FullGCForwarding::initialize() {\n+#ifdef _LP64\n+  if (UseCompactObjectHeaders) {\n+    _num_low_bits = NumLowBitsNarrow;\n+  } else {\n+    _num_low_bits = NumLowBitsWide;\n+  }\n+#endif\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/fullGCForwarding.cpp","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -25,2 +25,2 @@\n-#ifndef SHARE_GC_SHARED_GCFORWARDING_HPP\n-#define SHARE_GC_SHARED_GCFORWARDING_HPP\n+#ifndef SHARE_GC_SHARED_FULLGCFORWARDING_HPP\n+#define SHARE_GC_SHARED_FULLGCFORWARDING_HPP\n@@ -34,1 +34,1 @@\n- * Implements forwarding for the full-GCs of Serial, Parallel, G1 and Shenandoah in\n+ * Implements forwarding for the Full GCs of Serial, Parallel, G1 and Shenandoah in\n@@ -44,1 +44,1 @@\n-class GCForwarding : public AllStatic {\n+class FullGCForwarding : public AllStatic {\n@@ -59,1 +59,1 @@\n-#endif \/\/ SHARE_GC_SHARED_GCFORWARDING_HPP\n+#endif \/\/ SHARE_GC_SHARED_FULLGCFORWARDING_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/fullGCForwarding.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.hpp","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.hpp\"\n@@ -33,1 +33,1 @@\n-void GCForwarding::forward_to(oop from, oop to) {\n+void FullGCForwarding::forward_to(oop from, oop to) {\n@@ -46,1 +46,1 @@\n-oop GCForwarding::forwardee(oop from) {\n+oop FullGCForwarding::forwardee(oop from) {\n@@ -56,1 +56,1 @@\n-bool GCForwarding::is_forwarded(oop obj) {\n+bool FullGCForwarding::is_forwarded(oop obj) {\n","filename":"src\/hotspot\/share\/gc\/shared\/fullGCForwarding.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.inline.hpp","status":"renamed"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/shared\/gcForwarding.hpp\"\n-#include \"memory\/memRegion.hpp\"\n-#include \"runtime\/globals_extension.hpp\"\n-\n-HeapWord* GCForwarding::_heap_base = nullptr;\n-int GCForwarding::_num_low_bits = 0;\n-\n-void GCForwarding::initialize_flags(size_t max_heap_size) {\n-#ifdef _LP64\n-  size_t max_narrow_heap_size = right_n_bits(NumLowBitsNarrow - Shift);\n-  if (UseCompactObjectHeaders && max_heap_size > max_narrow_heap_size * HeapWordSize) {\n-    warning(\"Compact object headers require a java heap size smaller than \" SIZE_FORMAT\n-            \"%s (given: \" SIZE_FORMAT \"%s). Disabling compact object headers.\",\n-            byte_size_in_proper_unit(max_narrow_heap_size * HeapWordSize),\n-            proper_unit_for_byte_size(max_narrow_heap_size * HeapWordSize),\n-            byte_size_in_proper_unit(max_heap_size),\n-            proper_unit_for_byte_size(max_heap_size));\n-    FLAG_SET_ERGO(UseCompactObjectHeaders, false);\n-  }\n-#endif\n-}\n-\n-void GCForwarding::initialize() {\n-#ifdef _LP64\n-  if (UseCompactObjectHeaders) {\n-    _num_low_bits = NumLowBitsNarrow;\n-  } else {\n-    _num_low_bits = NumLowBitsWide;\n-  }\n-#endif\n-}\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.cpp","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.inline.hpp\"\n@@ -46,2 +46,2 @@\n-  if (GCForwarding::is_forwarded(obj)) {\n-    elem->set_oop(GCForwarding::forwardee(obj));\n+  if (FullGCForwarding::is_forwarded(obj)) {\n+    elem->set_oop(FullGCForwarding::forwardee(obj));\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/shared\/fullGCForwarding.hpp\"\n@@ -27,1 +28,0 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -204,1 +204,1 @@\n-  GCForwarding::initialize_flags(MaxHeapSize);\n+  FullGCForwarding::initialize_flags(MaxHeapSize);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.inline.hpp\"\n@@ -373,1 +373,1 @@\n-      GCForwarding::forward_to(p, cast_to_oop(_compact_point));\n+      FullGCForwarding::forward_to(p, cast_to_oop(_compact_point));\n@@ -496,1 +496,1 @@\n-        GCForwarding::forward_to(old_obj, cast_to_oop(heap->get_region(start)->bottom()));\n+        FullGCForwarding::forward_to(old_obj, cast_to_oop(heap->get_region(start)->bottom()));\n@@ -756,2 +756,2 @@\n-      if (GCForwarding::is_forwarded(obj)) {\n-        oop forw = GCForwarding::forwardee(obj);\n+      if (FullGCForwarding::is_forwarded(obj)) {\n+        oop forw = FullGCForwarding::forwardee(obj);\n@@ -867,1 +867,1 @@\n-    if (GCForwarding::is_forwarded(p)) {\n+    if (FullGCForwarding::is_forwarded(p)) {\n@@ -869,1 +869,1 @@\n-      HeapWord* compact_to = cast_from_oop<HeapWord*>(GCForwarding::forwardee(p));\n+      HeapWord* compact_to = cast_from_oop<HeapWord*>(FullGCForwarding::forwardee(p));\n@@ -974,1 +974,1 @@\n-      if (!GCForwarding::is_forwarded(old_obj)) {\n+      if (!FullGCForwarding::is_forwarded(old_obj)) {\n@@ -983,1 +983,1 @@\n-      size_t new_start = heap->heap_region_index_containing(GCForwarding::forwardee(old_obj));\n+      size_t new_start = heap->heap_region_index_containing(FullGCForwarding::forwardee(old_obj));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/shared\/fullGCForwarding.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -426,1 +426,1 @@\n-  GCForwarding::initialize();\n+  FullGCForwarding::initialize();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -330,2 +330,5 @@\n-    Klass* klass = ShenandoahForwarding::klass(obj);\n-    obj->oop_iterate_backwards(this, klass);\n+    \/\/ oop_iterate() can not deal with forwarded objects, because\n+    \/\/ it needs to load klass(), which may be overridden by the\n+    \/\/ forwarding pointer.\n+    oop fwd = ShenandoahForwarding::get_forwardee_raw(obj);\n+    fwd->oop_iterate(this);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -82,2 +82,3 @@\n-  \/\/ declared nonstatic fields in arrayOopDesc if not compressed, otherwise\n-  \/\/ it occupies the second half of the _klass field in oopDesc.\n+  \/\/ mark-word when using compact headers (+UseCompactObjectHeaders), otherwise\n+  \/\/ after the compressed Klass* when running with compressed class-pointers\n+  \/\/ (+UseCompressedClassPointers), or else after the full Klass*.\n","filename":"src\/hotspot\/share\/oops\/arrayOop.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  static int _tiny_cp; \/\/ -1, 0=true, 1=false\n+  static int _tiny_cp; \/\/ -1 = uninitialized, 0 = true, 1 = false\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-  \/\/ If compressed, the offset of the fields of the instance may not be aligned.\n","filename":"src\/hotspot\/share\/oops\/instanceOop.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -73,2 +73,1 @@\n-  \/\/ In this assert, we cannot safely access the Klass* with compact headers.\n-  assert (UseCompactObjectHeaders || obj->is_array(), \"obj must be array\");\n+  assert(obj->is_array(), \"obj must be array\");\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -156,2 +156,2 @@\n-  \/\/ Only has a klass gap when compressed class pointers are used.\n-  \/\/ Except when using compact headers.\n+  \/\/ Only has a klass gap when compressed class pointers are used and not\n+  \/\/ using compact headers.\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-  \/\/ size of object header, aligned to platform wordSize\n+  \/\/ Size of object header, aligned to platform wordSize\n@@ -108,1 +108,1 @@\n-      return sizeof(oopDesc) \/ HeapWordSize;\n+      return sizeof(oopDesc)  \/ HeapWordSize;\n@@ -340,1 +340,1 @@\n-      return mark_offset_in_bytes() + sizeof(markWord) \/ 2;\n+      return 4;\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -295,0 +295,2 @@\n+  assert(cast_from_oop<oopDesc*>(p) != this,\n+         \"must not be used for self-forwarding, use forward_to_self() instead\");\n@@ -315,0 +317,2 @@\n+  assert(cast_from_oop<oopDesc*>(p) != this,\n+         \"must not be used for self-forwarding, use forward_to_self_atomic() instead\");\n@@ -401,1 +405,1 @@\n-  assert(UseCompactObjectHeaders || k == klass(), \"wrong klass\");\n+  assert(k == klass(), \"wrong klass\");\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,2 +38,1 @@\n-  \/\/ In this assert, we cannot safely access the Klass* with compact headers.\n-  assert(UseCompactObjectHeaders || obj->is_typeArray(),\"must be a type array\");\n+  assert(obj->is_typeArray(),\"must be a type array\");\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/fullGCForwarding.inline.hpp\"\n@@ -40,1 +40,1 @@\n-  GCForwarding::initialize();\n+  FullGCForwarding::initialize();\n@@ -64,4 +64,4 @@\n-  GCForwarding::forward_to(o1, o3);\n-  GCForwarding::forward_to(o2, o4);\n-  ASSERT_EQ(GCForwarding::forwardee(o1), o3);\n-  ASSERT_EQ(GCForwarding::forwardee(o2), o4);\n+  FullGCForwarding::forward_to(o1, o3);\n+  FullGCForwarding::forward_to(o2, o4);\n+  ASSERT_EQ(FullGCForwarding::forwardee(o1), o3);\n+  ASSERT_EQ(FullGCForwarding::forwardee(o2), o4);\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_preservedMarks.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}