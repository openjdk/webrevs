{"files":[{"patch":"@@ -3631,6 +3631,3 @@\n-    if (UseCompactObjectHeaders) {\n-      assert(is_aligned(oopDesc::base_offset_in_bytes(), BytesPerLong), \"oop base offset must be 8-byte-aligned\");\n-      __ sub(r3, r3, oopDesc::base_offset_in_bytes());\n-    } else {\n-      __ sub(r3, r3, sizeof(oopDesc));\n-    }\n+    int header_size = oopDesc::header_size() * HeapWordSize;\n+    assert(is_aligned(header_size, BytesPerLong), \"oop header size must be 8-byte-aligned\");\n+    __ sub(r3, r3, header_size);\n@@ -3641,6 +3638,1 @@\n-      if (UseCompactObjectHeaders) {\n-        assert(is_aligned(oopDesc::base_offset_in_bytes(), BytesPerLong), \"oop base offset must be 8-byte-aligned\");\n-        __ add(r2, r0, oopDesc::base_offset_in_bytes());\n-      } else {\n-        __ add(r2, r0, sizeof(oopDesc));\n-      }\n+      __ add(r2, r0, header_size);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -4113,9 +4113,4 @@\n-    if (UseCompactObjectHeaders) {\n-      assert(is_aligned(oopDesc::base_offset_in_bytes(), BytesPerLong), \"oop base offset must be 8-byte-aligned\");\n-      int header_size = oopDesc::base_offset_in_bytes();\n-      __ movptr(Address(rax, rdx, Address::times_8, header_size - 1*oopSize), rcx);\n-      NOT_LP64(__ movptr(Address(rax, rdx, Address::times_8, header_size - 2*oopSize), rcx));\n-    } else {\n-      __ movptr(Address(rax, rdx, Address::times_8, sizeof(oopDesc) - 1*oopSize), rcx);\n-      NOT_LP64(__ movptr(Address(rax, rdx, Address::times_8, sizeof(oopDesc) - 2*oopSize), rcx));\n-    }\n+    int header_size_bytes = oopDesc::header_size() * HeapWordSize;\n+    assert(is_aligned(header_size_bytes, BytesPerLong), \"oop header size must be 8-byte-aligned\");\n+    __ movptr(Address(rax, rdx, Address::times_8, header_size_bytes - 1*oopSize), rcx);\n+    NOT_LP64(__ movptr(Address(rax, rdx, Address::times_8, header_size_bytes - 2*oopSize), rcx));\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -150,1 +150,3 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" },\n+        \/\/ This test fails with compact headers, but only with UseSSE<=3.\n+        applyIf = { \"UseCompactObjectHeaders\", \"false\" })\n@@ -163,1 +165,3 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" },\n+        \/\/ This test fails with compact headers, but only with UseSSE<=3.\n+        applyIf = { \"UseCompactObjectHeaders\", \"false\" })\n@@ -176,1 +180,3 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" },\n+        \/\/ This test fails with compact headers, but only with UseSSE<=3.\n+        applyIf = { \"UseCompactObjectHeaders\", \"false\" })\n@@ -205,1 +211,3 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" },\n+        \/\/ This test fails with compact headers, but only with UseSSE<=3.\n+        applyIf = { \"UseCompactObjectHeaders\", \"false\" })\n@@ -219,1 +227,3 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" },\n+        \/\/ This test fails with compact headers, but only with UseSSE<=3.\n+        applyIf = { \"UseCompactObjectHeaders\", \"false\" })\n@@ -232,1 +242,3 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" },\n+        \/\/ This test fails with compact headers, but only with UseSSE<=3.\n+        applyIf = { \"UseCompactObjectHeaders\", \"false\" })\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizationMismatchedAccess.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -54,1 +54,3 @@\n-    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" },\n+        \/\/ This test fails with compact headers, but only with UseSSE<=3.\n+        applyIf = { \"UseCompactObjectHeaders\", \"false\" })\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizationNotRun.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -687,1 +687,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \">=32\", \"AlignVector\", \"false\", \"UseCompactObjectHeaders\", \"false\"},\n+        applyIfAnd = {\"MaxVectorSize\", \">=32\", \"AlignVector\", \"false\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestSplitPacks.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -226,0 +226,2 @@\n+        \/\/ This test fails with compact headers, but only with UseSSE<=3.\n+        applyIf = { \"UseCompactObjectHeaders\", \"false\" },\n@@ -239,0 +241,2 @@\n+        \/\/ This test fails with compact headers, but only with UseSSE<=3.\n+        applyIf = { \"UseCompactObjectHeaders\", \"false\" },\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/LoopCombinedOpTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}