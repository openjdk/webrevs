{"files":[{"patch":"@@ -164,2 +164,1 @@\n-  \/\/ If the block would be reusable for a Klass, add to class arena, otherwise to\n-  \/\/ then non-class arena.\n+  \/\/ Add to class arena only if block is usable for encodable Klass storage.\n","filename":"src\/hotspot\/share\/memory\/classLoaderMetaspace.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -654,4 +654,0 @@\n-    \/\/ Adjust size of the compressed class space.\n-\n-    const size_t res_align = reserve_alignment();\n-\n@@ -665,2 +661,1 @@\n-    \/\/ Sanity check: The max. Klass Range allowed by the narrowKlass geometry must cover\n-    \/\/ at least a root chunk (16MB). That is of course given.\n+    \/\/ Sanity check.\n@@ -668,1 +663,1 @@\n-    assert(max_klass_range >= res_align,\n+    assert(max_klass_range >= reserve_alignment(),\n@@ -670,1 +665,1 @@\n-           max_klass_range, res_align);\n+           max_klass_range, reserve_alignment());\n@@ -675,2 +670,3 @@\n-    \/\/  root chunk. But impose a miminum size of 1 root chunk (16MB).\n-    adjusted_ccs_size = MAX2(align_down(adjusted_ccs_size, res_align), res_align);\n+    \/\/  root chunk.\n+    adjusted_ccs_size = align_up(adjusted_ccs_size, reserve_alignment());\n+    adjusted_ccs_size = MAX2(adjusted_ccs_size, reserve_alignment());\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  \/\/ Minimum allocation alignment, in bytes. All MetaData shall be aligned correclty\n+  \/\/ Minimum allocation alignment, in bytes. All MetaData shall be aligned correctly\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-class MetaspaceContext;\n@@ -46,0 +45,1 @@\n+class MetaspaceContext;\n@@ -84,0 +84,1 @@\n+  \/\/ Allocation alignment specific to this arena\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -252,1 +252,0 @@\n-    check_init(_base);\n@@ -258,2 +257,2 @@\n-    return is_aligned(addr, klass_alignment_in_bytes()) &&\n-        (address)addr >= _klass_range_start && (address)addr < _klass_range_end;\n+    return (address)addr >= _klass_range_start && (address)addr < _klass_range_end &&\n+        is_aligned(addr, klass_alignment_in_bytes());\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,0 +53,12 @@\n+TEST_VM(CompressedKlass, ccp_off) {\n+  if (UseCompressedClassPointers) {\n+    return;\n+  }\n+  ASSERT_EQ(CompressedKlassPointers::klass_range_start(), (address)nullptr);\n+  ASSERT_EQ(CompressedKlassPointers::klass_range_end(), (address)nullptr);\n+  \/\/ We should be able to call CompressedKlassPointers::is_encodable, and it should\n+  \/\/ always return false\n+  ASSERT_FALSE(CompressedKlassPointers::is_encodable((address)0x12345));\n+}\n+\n+\n","filename":"test\/hotspot\/gtest\/oops\/test_compressedKlass.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,0 +41,7 @@\n+\/* @test id=ccp_off\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.xml\n+ * @run main\/native GTestWrapper --gtest_filter=CompressedKlass* -XX:-UseCompressedClassPointers -Xlog:metaspace* -Xmx6g -Xms128m\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gtest\/CompressedKlassGtest.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}