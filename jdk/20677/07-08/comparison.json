{"files":[{"patch":"@@ -190,1 +190,1 @@\n-  Klass* k = Universe::objectArrayKlass(); \/\/ already relocated to point to archived klass\n+  Klass* k = Universe::objectArrayKlass();\n@@ -209,2 +209,1 @@\n-      narrowKlass nk = ArchiveBuilder::current()->get_requested_narrow_klass(k);\n-      oopDesc::release_set_mark(mem, markWord::prototype().set_narrow_klass(nk));\n+      oopDesc::release_set_mark(mem, k->prototype_header());\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2496,1 +2496,1 @@\n-    log_info(cds)(\"Unable to use shared archive.\\nThe saved state of UseCompressedOops and UseCompressedClassPointers is \"\n+    log_warning(cds)(\"Unable to use shared archive.\\nThe saved state of UseCompressedOops and UseCompressedClassPointers is \"\n@@ -2507,4 +2507,4 @@\n-    log_info(cds)(\"The shared archive file's UseCompactObjectHeaders setting (%s)\"\n-                  \" does not equal the current UseCompactObjectHeaders setting (%s).\",\n-                  _compact_headers          ? \"enabled\" : \"disabled\",\n-                  UseCompactObjectHeaders   ? \"enabled\" : \"disabled\");\n+    log_warning(cds)(\"Unable to use shared archive.\\nThe shared archive file's UseCompactObjectHeaders setting (%s)\"\n+                     \" does not equal the current UseCompactObjectHeaders setting (%s).\",\n+                     _compact_headers          ? \"enabled\" : \"disabled\",\n+                     UseCompactObjectHeaders   ? \"enabled\" : \"disabled\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1438,1 +1438,1 @@\n-  GCForwarding::initialize(heap_rs.region());\n+  GCForwarding::initialize();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-  GCForwarding::initialize(heap_rs.region());\n+  GCForwarding::initialize();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-  GCForwarding::initialize(_reserved);\n+  GCForwarding::initialize();\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,6 @@\n-    warning(\"Compact object headers require a java heap size smaller than %zu (given: %zu). \"\n-            \"Disabling compact object headers.\", max_narrow_heap_size * HeapWordSize, max_heap_size);\n+    warning(\"Compact object headers require a java heap size smaller than \" SIZE_FORMAT\n+            \"%s (given: \" SIZE_FORMAT \"%s). Disabling compact object headers.\",\n+            byte_size_in_proper_unit(max_narrow_heap_size * HeapWordSize),\n+            proper_unit_for_byte_size(max_narrow_heap_size * HeapWordSize),\n+            byte_size_in_proper_unit(max_heap_size),\n+            proper_unit_for_byte_size(max_heap_size));\n@@ -44,1 +48,1 @@\n-void GCForwarding::initialize(MemRegion heap) {\n+void GCForwarding::initialize() {\n@@ -46,2 +50,1 @@\n-  _heap_base = heap.start();\n-  if (heap.word_size() <= right_n_bits(NumLowBitsNarrow - Shift)) {\n+  if (UseCompactObjectHeaders) {\n@@ -50,1 +53,0 @@\n-    assert(!UseCompactObjectHeaders, \"Compact object headers should be turned off for large heaps\");\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -40,0 +40,3 @@\n+ * With compact-headers, we have 40 bits to encode forwarding pointers. This is\n+ * enough to address 8TB of heap. If the heap size exceeds that limit, we turn off\n+ * compact headers.\n@@ -50,1 +53,1 @@\n-  static void initialize(MemRegion heap);\n+  static void initialize();\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-  Klass* obj_klass = obj->forward_safe_klass();\n+  Klass* obj_klass = ShenandoahForwarding::klass(obj);\n@@ -238,1 +238,1 @@\n-    if (obj_klass != fwd->forward_safe_klass()) {\n+    if (obj_klass != ShenandoahForwarding::klass(fwd)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+  static inline size_t size(oop obj);\n+  static inline Klass* klass(oop obj);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahForwarding.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,0 +93,17 @@\n+inline Klass* ShenandoahForwarding::klass(oop obj) {\n+  if (UseCompactObjectHeaders) {\n+    markWord mark = obj->mark();\n+    if (mark.is_marked()) {\n+      oop fwd = cast_to_oop(mark.clear_lock_bits().to_pointer());\n+      mark = fwd->mark();\n+    }\n+    return mark.klass();\n+  } else {\n+    return obj->klass();\n+  }\n+}\n+\n+inline size_t ShenandoahForwarding::size(oop obj) {\n+  return obj->size_given_klass(klass(obj));\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahForwarding.inline.hpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -426,1 +426,1 @@\n-  GCForwarding::initialize(_heap_region);\n+  GCForwarding::initialize();\n@@ -1136,1 +1136,1 @@\n-  size_t size = p->forward_safe_size();\n+  size_t size = ShenandoahForwarding::size(p);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -437,1 +437,1 @@\n-    size_t size = obj->forward_safe_size();\n+    size_t size = ShenandoahForwarding::size(obj);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-      if (is_instance_ref_klass(obj->forward_safe_klass())) {\n+      if (is_instance_ref_klass(ShenandoahForwarding::klass(obj))) {\n@@ -132,1 +132,1 @@\n-    Klass* obj_klass = obj->forward_safe_klass();\n+    Klass* obj_klass = ShenandoahForwarding::klass(obj);\n@@ -147,1 +147,1 @@\n-        check(ShenandoahAsserts::_safe_unknown, obj, (obj_addr + obj->forward_safe_size()) <= obj_reg->top(),\n+        check(ShenandoahAsserts::_safe_unknown, obj, (obj_addr + ShenandoahForwarding::size(obj)) <= obj_reg->top(),\n@@ -151,1 +151,1 @@\n-        size_t humongous_end = humongous_start + (obj->forward_safe_size() >> ShenandoahHeapRegion::region_size_words_shift());\n+        size_t humongous_end = humongous_start + (ShenandoahForwarding::size(obj) >> ShenandoahHeapRegion::region_size_words_shift());\n@@ -168,1 +168,1 @@\n-          Atomic::add(&_ld[obj_reg->index()], (uint) obj->forward_safe_size(), memory_order_relaxed);\n+          Atomic::add(&_ld[obj_reg->index()], (uint) ShenandoahForwarding::size(obj), memory_order_relaxed);\n@@ -212,1 +212,1 @@\n-      check(ShenandoahAsserts::_safe_oop, obj, (fwd_addr + fwd->forward_safe_size()) <= fwd_reg->top(),\n+      check(ShenandoahAsserts::_safe_oop, obj, (fwd_addr + ShenandoahForwarding::size(fwd)) <= fwd_reg->top(),\n@@ -330,1 +330,1 @@\n-    Klass* klass = obj->forward_safe_klass();\n+    Klass* klass = ShenandoahForwarding::klass(obj);\n@@ -595,1 +595,1 @@\n-        addr += cast_to_oop(addr)->forward_safe_size();\n+        addr += ShenandoahForwarding::size(cast_to_oop(addr));\n@@ -611,1 +611,1 @@\n-    if (!is_instance_ref_klass(obj->forward_safe_klass())) {\n+    if (!is_instance_ref_klass(ShenandoahForwarding::klass(obj))) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -122,14 +122,0 @@\n-  \/\/ The following set of methods is used to access the mark-word and related\n-  \/\/ properties when the object may be forwarded. Be careful where and when\n-  \/\/ using this method. It assumes that the forwardee is installed in\n-  \/\/ the header as a plain pointer (or self-forwarded). In particular,\n-  \/\/ those methods can not deal with the encoded forwarding that is used\n-  \/\/ in Serial, Parallel, G1 and Shenandoah full-GCs.\n-private:\n-  inline Klass*   forward_safe_klass_impl(markWord m) const;\n-public:\n-  inline Klass*   forward_safe_klass() const;\n-  inline Klass*   forward_safe_klass(markWord m) const;\n-  inline size_t   forward_safe_size();\n-  inline void     forward_safe_init_mark();\n-\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -94,5 +94,1 @@\n-  if (UseCompactObjectHeaders) {\n-    set_mark(prototype_mark());\n-  } else {\n-    set_mark(markWord::prototype());\n-  }\n+  set_mark(prototype_mark());\n@@ -228,47 +224,0 @@\n-#ifdef _LP64\n-Klass* oopDesc::forward_safe_klass_impl(markWord m) const {\n-  assert(UseCompactObjectHeaders, \"Only get here with compact headers\");\n-  if (m.is_marked()) {\n-    oop fwd = forwardee(m);\n-    markWord m2 = fwd->mark();\n-    assert(!m2.is_marked() || m2.is_self_forwarded(), \"no double forwarding: this: \" PTR_FORMAT \" (\" INTPTR_FORMAT \"), fwd: \" PTR_FORMAT \" (\" INTPTR_FORMAT \")\", p2i(this), m.value(), p2i(fwd), m2.value());\n-    m = m2;\n-  }\n-  return m.klass();\n-}\n-#endif\n-\n-Klass* oopDesc::forward_safe_klass(markWord m) const {\n-#ifdef _LP64\n-  if (UseCompactObjectHeaders) {\n-    return forward_safe_klass_impl(m);\n-  } else\n-#endif\n-  {\n-    return klass();\n-  }\n-}\n-\n-Klass* oopDesc::forward_safe_klass() const {\n-#ifdef _LP64\n-  if (UseCompactObjectHeaders) {\n-    return forward_safe_klass_impl(mark());\n-  } else\n-#endif\n-  {\n-    return klass();\n-  }\n-}\n-\n-size_t oopDesc::forward_safe_size() {\n-  return size_given_klass(forward_safe_klass());\n-}\n-\n-void oopDesc::forward_safe_init_mark() {\n-  if (UseCompactObjectHeaders) {\n-    set_mark(forward_safe_klass()->prototype_header());\n-  } else {\n-    set_mark(markWord::prototype());\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":1,"deletions":52,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -84,5 +84,0 @@\n-  private static Klass getKlass(Mark mark) {\n-    assert(VM.getVM().isCompactObjectHeadersEnabled());\n-    return mark.getKlass();\n-  }\n-\n@@ -92,1 +87,1 @@\n-      return getKlass(getMark());\n+      return getMark().getKlass();\n@@ -227,1 +222,1 @@\n-      return getKlass(mark);\n+      return mark.getKlass();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Oop.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  GCForwarding::initialize(MemRegion(&heap[0], &heap[16]));\n+  GCForwarding::initialize();\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_preservedMarks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}