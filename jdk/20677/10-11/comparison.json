{"files":[{"patch":"@@ -232,7 +232,14 @@\n-  \/\/ With compact headers, we can't safely access the Klass* when\n-  \/\/ the object has been forwarded, because non-full-GC-forwarding\n-  \/\/ temporarily overwrites the mark-word, and thus the Klass*, with\n-  \/\/ the forwarding pointer, and here we have no way to make a\n-  \/\/ distinction between Full-GC and regular GC forwarding.\n-  bool can_access_klass = !UseCompactObjectHeaders || !object->is_forwarded();\n-  if (can_access_klass && !Metaspace::contains(object->klass_without_asserts())) {\n+  if (UseCompactObjectHeaders) {\n+    \/\/ With compact headers, we can't safely access the Klass* when\n+    \/\/ the object has been forwarded, because non-full-GC-forwarding\n+    \/\/ temporarily overwrites the mark-word, and thus the Klass*, with\n+    \/\/ the forwarding pointer, and here we have no way to make a\n+    \/\/ distinction between Full-GC and regular GC forwarding.\n+    markWord mark = object->mark();\n+    if (!mark.is_forwarded()) {\n+      Klass* klass = mark.klass();\n+      if (!Metaspace::contains(mark.klass_without_asserts())) {\n+        return false;\n+      }\n+    }\n+  } else if (!Metaspace::contains(object->klass_without_asserts())) {\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":14,"deletions":7,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-  product(bool, UseCompactObjectHeaders, false, EXPERIMENTAL,               \\\n+  product(bool, UseCompactObjectHeaders, true, EXPERIMENTAL,                \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,2 +150,1 @@\n-    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n-        counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -164,2 +163,1 @@\n-    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n-        counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -178,2 +176,1 @@\n-    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n-        counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -208,2 +205,1 @@\n-    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n-        counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -223,2 +219,1 @@\n-    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n-        counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n@@ -237,2 +232,1 @@\n-    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n-        counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizationMismatchedAccess.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -54,2 +54,1 @@\n-    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n-        counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n+    @IR(counts = { IRNode.LOAD_VECTOR_L, \">=1\", IRNode.STORE_VECTOR, \">=1\" })\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizationNotRun.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -271,2 +271,1 @@\n-    @IR(applyIf = {\"UseCompactObjectHeaders\", \"false\"},\n-        counts = {IRNode.ADD_VI, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.ADD_VF, \"> 0\"},\n+    @IR(counts = {IRNode.ADD_VI, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.ADD_VF, \"> 0\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestIndependentPacksWithCyclicDependency.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-        applyIfAnd = {\"MaxVectorSize\", \"16\", \"UseCompactObjectHeaders\", \"false\" }, \/\/ AD file requires vector_length = 16\n+        applyIfAnd = {\"MaxVectorSize\", \"16\", \"UseCompactObjectHeaders\", \"false\"}, \/\/ AD file requires vector_length = 16\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestMulAddS2I.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}