{"files":[{"patch":"@@ -694,1 +694,2 @@\n-             test \"x$OPENJDK_TARGET_CPU\" != \"xppc64le\"; then\n+             test \"x$OPENJDK_TARGET_CPU\" != \"xppc64le\" &&\n+             test \"x$OPENJDK_TARGET_CPU\" != \"xriscv64\"; then\n","filename":"make\/autoconf\/jdk-options.m4","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -197,1 +197,4 @@\n-    if (UseCompressedClassPointers) {\n+    if (UseCompactObjectHeaders) {\n+      __ load_narrow_klass_compact(tmp, src);\n+      __ load_narrow_klass_compact(t0, dst);\n+    } else if (UseCompressedClassPointers) {\n@@ -247,1 +250,0 @@\n-\n@@ -264,12 +266,2 @@\n-      if (UseCompressedClassPointers) {\n-        __ lwu(t0, Address(dst, oopDesc::klass_offset_in_bytes()));\n-      } else {\n-        __ ld(t0, Address(dst, oopDesc::klass_offset_in_bytes()));\n-      }\n-      __ bne(tmp, t0, halt);\n-      if (UseCompressedClassPointers) {\n-        __ lwu(t0, Address(src, oopDesc::klass_offset_in_bytes()));\n-      } else {\n-        __ ld(t0, Address(src, oopDesc::klass_offset_in_bytes()));\n-      }\n-      __ beq(tmp, t0, known_ok);\n+      __ cmp_klass_compressed(dst, tmp, t0, halt, false);\n+      __ cmp_klass_compressed(src, tmp, t0, known_ok, true);\n@@ -277,6 +269,1 @@\n-      if (UseCompressedClassPointers) {\n-        __ lwu(t0, Address(dst, oopDesc::klass_offset_in_bytes()));\n-      } else {\n-        __ ld(t0, Address(dst, oopDesc::klass_offset_in_bytes()));\n-      }\n-      __ beq(tmp, t0, known_ok);\n+      __ cmp_klass_compressed(dst, tmp, t0, known_ok, true);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arraycopy_riscv.cpp","additions":7,"deletions":20,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1528,6 +1528,1 @@\n-  if (UseCompressedClassPointers) {\n-    __ lwu(result, Address(obj, oopDesc::klass_offset_in_bytes()));\n-    __ decode_klass_not_null(result);\n-  } else {\n-    __ ld(result, Address(obj, oopDesc::klass_offset_in_bytes()));\n-  }\n+  __ load_klass(result, obj);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -167,7 +167,3 @@\n-  \/\/ This assumes that all prototype bits fitr in an int32_t\n-  mv(tmp1, (int32_t)(intptr_t)markWord::prototype().value());\n-  sd(tmp1, Address(obj, oopDesc::mark_offset_in_bytes()));\n-\/\/ Todo UseCompactObjectHeaders\n-  if (UseCompressedClassPointers) { \/\/ Take care not to kill klass\n-    encode_klass_not_null(tmp1, klass, tmp2);\n-    sw(tmp1, Address(obj, oopDesc::klass_offset_in_bytes()));\n+  if (UseCompactObjectHeaders) {\n+    ld(tmp1, Address(klass, Klass::prototype_header_offset()));\n+    sd(tmp1, Address(obj, oopDesc::mark_offset_in_bytes()));\n@@ -175,1 +171,9 @@\n-    sd(klass, Address(obj, oopDesc::klass_offset_in_bytes()));\n+    \/\/ This assumes that all prototype bits fitr in an int32_t\n+    mv(tmp1, checked_cast<int32_t>(markWord::prototype().value()));\n+    sd(tmp1, Address(obj, oopDesc::mark_offset_in_bytes()));\n+    if (UseCompressedClassPointers) { \/\/ Take care not to kill klass\n+      encode_klass_not_null(tmp1, klass, tmp2);\n+      sw(tmp1, Address(obj, oopDesc::klass_offset_in_bytes()));\n+    } else {\n+      sd(klass, Address(obj, oopDesc::klass_offset_in_bytes()));\n+    }\n@@ -186,1 +190,1 @@\n-  } else if (UseCompressedClassPointers) {\n+  } else if (UseCompressedClassPointers && !UseCompactObjectHeaders) {\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -3122,0 +3122,10 @@\n+\n+void C2_MacroAssembler::load_narrow_klass_compact_c2(Register dst, Address src) {\n+  \/\/ The incoming address is pointing into obj-start + klass_offset_in_bytes. We need to extract\n+  \/\/ obj-start, so that we can load from the object's mark-word instead. Usually the address\n+  \/\/ comes as obj-start in obj and klass_offset_in_bytes in disp.\n+  assert(UseCompactObjectHeaders, \"must\");\n+  int offset = oopDesc::mark_offset_in_bytes() - oopDesc::klass_offset_in_bytes();\n+  ld(dst, Address(src.base(), src.offset() + offset));\n+  srli(dst, dst, markWord::klass_shift);\n+}\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -280,0 +280,2 @@\n+  void load_narrow_klass_compact_c2(Register dst, Address src);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2487,10 +2487,5 @@\n-void MacroAssembler::cmp_klass(Register oop, Register trial_klass, Register tmp1, Register tmp2, Label &L) {\n-  assert_different_registers(oop, trial_klass, tmp1, tmp2);\n-  if (UseCompressedClassPointers) {\n-    lwu(tmp1, Address(oop, oopDesc::klass_offset_in_bytes()));\n-    if (CompressedKlassPointers::base() == nullptr) {\n-      slli(tmp1, tmp1, CompressedKlassPointers::shift());\n-      beq(trial_klass, tmp1, L);\n-      return;\n-    }\n-    decode_klass_not_null(tmp1, tmp2);\n+void MacroAssembler::cmp_klass_compressed(Register oop, Register trial_klass, Register tmp, Label &L, bool equal) {\n+  if (UseCompactObjectHeaders) {\n+    load_narrow_klass_compact(tmp, oop);\n+  } else if (UseCompressedClassPointers) {\n+    lwu(tmp, Address(oop, oopDesc::klass_offset_in_bytes()));\n@@ -2498,1 +2493,6 @@\n-    ld(tmp1, Address(oop, oopDesc::klass_offset_in_bytes()));\n+    ld(tmp, Address(oop, oopDesc::klass_offset_in_bytes()));\n+  }\n+  if (equal) {\n+    beq(trial_klass, tmp, L);\n+  } else {\n+    bne(trial_klass, tmp, L);\n@@ -2500,1 +2500,0 @@\n-  beq(trial_klass, tmp1, L);\n@@ -2727,0 +2726,6 @@\n+void MacroAssembler::load_narrow_klass_compact(Register dst, Register src) {\n+  assert(UseCompactObjectHeaders, \"expects UseCompactObjectHeaders\");\n+  ld(dst, Address(src, oopDesc::mark_offset_in_bytes()));\n+  srli(dst, dst, markWord::klass_shift);\n+}\n+\n@@ -2730,1 +2735,4 @@\n-  if (UseCompressedClassPointers) {\n+  if (UseCompactObjectHeaders) {\n+    load_narrow_klass_compact(dst, src);\n+    decode_klass_not_null(dst, tmp);\n+  } else if (UseCompressedClassPointers) {\n@@ -2741,0 +2749,1 @@\n+  assert(!UseCompactObjectHeaders, \"not with compact headers\");\n@@ -2750,0 +2759,1 @@\n+  assert(!UseCompactObjectHeaders, \"not with compact headers\");\n@@ -2782,2 +2792,3 @@\n-    assert_different_registers(t0, xbase);\n-    shadd(dst, src, xbase, t0, CompressedKlassPointers::shift());\n+    Register t = src == dst ? dst : t0;\n+    assert_different_registers(t, xbase);\n+    shadd(dst, src, xbase, t, CompressedKlassPointers::shift());\n@@ -4316,1 +4327,1 @@\n-          far_branch_size();\n+          far_branch_size() + (UseCompactObjectHeaders ? MacroAssembler::instruction_size * 1 : 0);\n@@ -4336,1 +4347,4 @@\n-  if (UseCompressedClassPointers) {\n+  if (UseCompactObjectHeaders) {\n+    load_narrow_klass_compact(tmp1, receiver);\n+    lwu(tmp2, Address(data, CompiledICData::speculated_klass_offset()));\n+  } else if (UseCompressedClassPointers) {\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":31,"deletions":17,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -198,0 +198,1 @@\n+  void load_narrow_klass_compact(Register dst, Register src);\n@@ -199,1 +200,1 @@\n-  void cmp_klass(Register oop, Register trial_klass, Register tmp1, Register tmp2, Label &L);\n+  void cmp_klass_compressed(Register oop, Register trial_klass, Register tmp, Label &L, bool equal);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4824,0 +4824,1 @@\n+  predicate(!UseCompactObjectHeaders);\n@@ -4836,0 +4837,15 @@\n+instruct loadNKlassCompactHeaders(iRegNNoSp dst, memory mem)\n+%{\n+  predicate(UseCompactObjectHeaders);\n+  match(Set dst (LoadNKlass mem));\n+\n+  ins_cost(LOAD_COST);\n+  format %{ \"lwu  $dst, $mem\\t# loadNKlass, compressed class ptr, #@loadNKlass\" %}\n+\n+  ins_encode %{\n+    __ load_narrow_klass_compact_c2(as_Register($dst$$reg), Address(as_Register($mem$$base), $mem$$disp));\n+  %}\n+\n+  ins_pipe(iload_reg_mem);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3568,1 +3568,6 @@\n-    __ sub(x13, x13, sizeof(oopDesc));\n+    if (UseCompactObjectHeaders) {\n+      assert(is_aligned(oopDesc::base_offset_in_bytes(), BytesPerLong), \"oop base offset must be 8-byte-aligned\");\n+      __ sub(x13, x13, oopDesc::base_offset_in_bytes());\n+    } else {\n+      __ sub(x13, x13, sizeof(oopDesc));\n+    }\n@@ -3573,1 +3578,6 @@\n-      __ add(x12, x10, sizeof(oopDesc));\n+      if (UseCompactObjectHeaders) {\n+        assert(is_aligned(oopDesc::base_offset_in_bytes(), BytesPerLong), \"oop base offset must be 8-byte-aligned\");\n+        __ add(x12, x10, oopDesc::base_offset_in_bytes());\n+      } else {\n+        __ add(x12, x10, sizeof(oopDesc));\n+      }\n@@ -3584,4 +3594,9 @@\n-    __ mv(t0, (intptr_t)markWord::prototype().value());\n-    __ sd(t0, Address(x10, oopDesc::mark_offset_in_bytes()));\n-    __ store_klass_gap(x10, zr);   \/\/ zero klass gap for compressed oops\n-    __ store_klass(x10, x14);      \/\/ store klass last\n+    if (UseCompactObjectHeaders) {\n+      __ ld(t0, Address(x14, Klass::prototype_header_offset()));\n+      __ sd(t0, Address(x10, oopDesc::mark_offset_in_bytes()));\n+    } else {\n+      __ mv(t0, (intptr_t)markWord::prototype().value());\n+      __ sd(t0, Address(x10, oopDesc::mark_offset_in_bytes()));\n+      __ store_klass_gap(x10, zr);   \/\/ zero klass gap for compressed oops\n+      __ store_klass(x10, x14);      \/\/ store klass last\n+    }\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"}]}