{"files":[{"patch":"@@ -1395,1 +1395,1 @@\n-      \/\/ encoding base since the archived heap objects contain nKlass IDs pre-calculated toward the start\n+      \/\/ encoding base since the archived heap objects contain narrow Klass IDs pre-calculated toward the start\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  \/\/ shifted nKlass to spill over into the third quadrant of the 64-bit target\n+  \/\/ shifted narrow Klass to spill over into the third quadrant of the 64-bit target\n@@ -72,1 +72,1 @@\n-      \" base \" PTR_FORMAT \", shift %d, lowest\/highest valid nKlass %u\/%u\",\n+      \" base \" PTR_FORMAT \", shift %d, lowest\/highest valid narrowKlass %u\/%u\",\n@@ -142,1 +142,1 @@\n-  \/\/ A Klass will never be placed at the Encoding range start, since that would translate to an nKlass=0, which\n+  \/\/ A Klass will never be placed at the Encoding range start, since that would translate to a narrowKlass=0, which\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-  \/\/ Returns the maximum encoding range, given the current geometry (nklass bit size and shift)\n+  \/\/ Returns the maximum encoding range, given the current geometry (narrow klass bit size and shift)\n@@ -227,1 +227,1 @@\n-  \/\/ Returns the highest possible nKlass value given the current Klass range\n+  \/\/ Returns the highest possible narrowKlass value given the current Klass range\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-\/\/  nklass:22 hash:31 -->| unused_gap:4  age:4  self-fwd:1  lock:2 (normal object)\n+\/\/  klass:22  hash:31 -->| unused_gap:4  age:4  self-fwd:1  lock:2 (normal object)\n@@ -133,1 +133,1 @@\n-  \/\/ We store nKlass in the bits 43 to 64.\n+  \/\/ We store the (narrow) Klass* in the bits 43 to 64.\n@@ -135,1 +135,1 @@\n-  \/\/ These are for bit-precise extraction of the nKlass from the 64-bit Markword\n+  \/\/ These are for bit-precise extraction of the narrow Klass* from the 64-bit Markword\n@@ -288,1 +288,1 @@\n-  inline markWord set_narrow_klass(narrowKlass nklass) const;\n+  inline markWord set_narrow_klass(narrowKlass narrow_klass) const;\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-markWord markWord::set_narrow_klass(narrowKlass nklass) const {\n+markWord markWord::set_narrow_klass(narrowKlass narrow_klass) const {\n@@ -44,1 +44,1 @@\n-  return markWord((value() & ~klass_mask_in_place) | ((uintptr_t) nklass << klass_shift));\n+  return markWord((value() & ~klass_mask_in_place) | ((uintptr_t) narrow_klass << klass_shift));\n","filename":"src\/hotspot\/share\/oops\/markWord.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -121,2 +121,2 @@\n-    narrowKlass nklass = Atomic::load_acquire(&_metadata._compressed_klass);\n-    return CompressedKlassPointers::decode(nklass);\n+    narrowKlass narrow_klass = Atomic::load_acquire(&_metadata._compressed_klass);\n+    return CompressedKlassPointers::decode(narrow_klass);\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}