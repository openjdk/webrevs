{"files":[{"patch":"@@ -130,18 +130,0 @@\n-    private static final int RED_MASK = 0x00ff0000;\n-    private static final int GREEN_MASK = 0x0000ff00;\n-    private static final int BLUE_MASK = 0x000000ff;\n-\n-    private static final int RED_SHIFT = 16;\n-    private static final int GREEN_SHIFT = 8;\n-    private static final int BLUE_SHIFT = 0;\n-\n-    private static final int LOWNIBBLE_MASK = 0x0000000f;\n-    private static final int HINIBBLE_MASK =  0x000000f0;\n-    private static final int HINIBBLE_SHIFT = 4;\n-    private static final byte[] hexDigits = {\n-        (byte)'0', (byte)'1', (byte)'2', (byte)'3',\n-        (byte)'4', (byte)'5', (byte)'6', (byte)'7',\n-        (byte)'8', (byte)'9', (byte)'A', (byte)'B',\n-        (byte)'C', (byte)'D', (byte)'E', (byte)'F'\n-    };\n-\n@@ -270,8 +252,0 @@\n-   \/* non-null if printing EPS for Java Plugin *\/\n-   private EPSPrinter epsPrinter = null;\n-\n-   \/**\n-    * The metrics for the font currently set.\n-    *\/\n-   FontMetrics mCurMetrics;\n-\n@@ -516,10 +490,24 @@\n-        if (epsPrinter == null) {\n-            if (getPrintService() instanceof PSStreamPrintService) {\n-                StreamPrintService sps = (StreamPrintService)getPrintService();\n-                mDestType = RasterPrinterJob.STREAM;\n-                if (sps.isDisposed()) {\n-                    throw new PrinterException(\"service is disposed\");\n-                }\n-                output = sps.getOutputStream();\n-                if (output == null) {\n-                    throw new PrinterException(\"Null output stream\");\n+        if (getPrintService() instanceof PSStreamPrintService) {\n+            StreamPrintService sps = (StreamPrintService)getPrintService();\n+            mDestType = RasterPrinterJob.STREAM;\n+            if (sps.isDisposed()) {\n+                throw new PrinterException(\"service is disposed\");\n+            }\n+            output = sps.getOutputStream();\n+            if (output == null) {\n+                throw new PrinterException(\"Null output stream\");\n+            }\n+        } else {\n+            \/* REMIND: This needs to be more maintainable *\/\n+            mNoJobSheet = super.noJobSheet;\n+            if (super.destinationAttr != null) {\n+                mDestType = RasterPrinterJob.FILE;\n+                mDestination = super.destinationAttr;\n+            }\n+            if (mDestType == RasterPrinterJob.FILE) {\n+                try {\n+                    spoolFile = new File(mDestination);\n+                    output = new FileOutputStream(spoolFile);\n+                } catch (IOException ex) {\n+                    abortDoc();\n+                    throw new PrinterIOException(ex);\n@@ -528,21 +516,4 @@\n-                \/* REMIND: This needs to be more maintainable *\/\n-                mNoJobSheet = super.noJobSheet;\n-                if (super.destinationAttr != null) {\n-                    mDestType = RasterPrinterJob.FILE;\n-                    mDestination = super.destinationAttr;\n-                }\n-                if (mDestType == RasterPrinterJob.FILE) {\n-                    try {\n-                        spoolFile = new File(mDestination);\n-                        output =  new FileOutputStream(spoolFile);\n-                    } catch (IOException ex) {\n-                        abortDoc();\n-                        throw new PrinterIOException(ex);\n-                    }\n-                } else {\n-                    PrinterOpener po = new PrinterOpener();\n-                    po.run();\n-                    if (po.pex != null) {\n-                        throw po.pex;\n-                    }\n-                    output = po.result;\n+                PrinterOpener po = new PrinterOpener();\n+                po.run();\n+                if (po.pex != null) {\n+                    throw po.pex;\n@@ -550,0 +521,1 @@\n+                output = po.result;\n@@ -551,3 +523,0 @@\n-\n-            mPSStream = new PrintStream(new BufferedOutputStream(output));\n-            mPSStream.println(ADOBE_PS_STR);\n@@ -556,0 +525,2 @@\n+        mPSStream = new PrintStream(new BufferedOutputStream(output));\n+        mPSStream.println(ADOBE_PS_STR);\n@@ -622,5 +593,4 @@\n-        if (epsPrinter == null) {\n-            \/\/ Set Page Size using first page's format.\n-            PageFormat pageFormat = getPageable().getPageFormat(0);\n-            double paperHeight = pageFormat.getPaper().getHeight();\n-            double paperWidth = pageFormat.getPaper().getWidth();\n+        \/\/ Set Page Size using first page's format.\n+        PageFormat pageFormat = getPageable().getPageFormat(0);\n+        double paperHeight = pageFormat.getPaper().getHeight();\n+        double paperWidth = pageFormat.getPaper().getWidth();\n@@ -628,4 +598,4 @@\n-            \/* PostScript printers can always generate uncollated copies.\n-             *\/\n-            mPSStream.print(\"<< \/PageSize [\" +\n-                                           paperWidth + \" \"+ paperHeight+\"]\");\n+        \/* PostScript printers can always generate uncollated copies.\n+         *\/\n+        mPSStream.print(\"<< \/PageSize [\" +\n+                                       paperWidth + \" \"+ paperHeight+\"]\");\n@@ -633,13 +603,8 @@\n-            final PrintService pservice = getPrintService();\n-            Boolean isPS = Boolean.TRUE;\n-            try {\n-                Class<?> psClass = Class.forName(\"sun.print.IPPPrintService\");\n-                if (psClass.isInstance(pservice)) {\n-                    Method isPSMethod = psClass.getMethod(\"isPostscript\",\n-                                                          (Class[])null);\n-                    isPS = (Boolean)isPSMethod.invoke(pservice, (Object[])null);\n-                }\n-            } catch (Throwable t) {\n-            }\n-            if (isPS) {\n-                mPSStream.print(\" \/DeferredMediaSelection true\");\n+        final PrintService pservice = getPrintService();\n+        Boolean isPS = Boolean.TRUE;\n+        try {\n+            Class<?> psClass = Class.forName(\"sun.print.IPPPrintService\");\n+            if (psClass.isInstance(pservice)) {\n+                Method isPSMethod = psClass.getMethod(\"isPostscript\",\n+                                                      (Class[])null);\n+                isPS = (Boolean)isPSMethod.invoke(pservice, (Object[])null);\n@@ -647,0 +612,5 @@\n+        } catch (Throwable t) {\n+        }\n+        if (isPS) {\n+            mPSStream.print(\" \/DeferredMediaSelection true\");\n+        }\n@@ -648,3 +618,3 @@\n-            mPSStream.print(\" \/ImagingBBox null \/ManualFeed false\");\n-            mPSStream.print(isCollated() ? \" \/Collate true\":\"\");\n-            mPSStream.print(\" \/NumCopies \" +getCopiesInt());\n+        mPSStream.print(\" \/ImagingBBox null \/ManualFeed false\");\n+        mPSStream.print(isCollated() ? \" \/Collate true\":\"\");\n+        mPSStream.print(\" \/NumCopies \" +getCopiesInt());\n@@ -652,6 +622,5 @@\n-            if (sidesAttr != Sides.ONE_SIDED) {\n-                if (sidesAttr == Sides.TWO_SIDED_LONG_EDGE) {\n-                    mPSStream.print(\" \/Duplex true \");\n-                } else if (sidesAttr == Sides.TWO_SIDED_SHORT_EDGE) {\n-                    mPSStream.print(\" \/Duplex true \/Tumble true \");\n-                }\n+        if (sidesAttr != Sides.ONE_SIDED) {\n+            if (sidesAttr == Sides.TWO_SIDED_LONG_EDGE) {\n+                mPSStream.print(\" \/Duplex true \");\n+            } else if (sidesAttr == Sides.TWO_SIDED_SHORT_EDGE) {\n+                mPSStream.print(\" \/Duplex true \/Tumble true \");\n@@ -659,1 +628,0 @@\n-            mPSStream.println(\" >> setpagedevice \");\n@@ -661,0 +629,1 @@\n+        mPSStream.println(\" >> setpagedevice \");\n@@ -1178,30 +1147,0 @@\n-\n-    private static String escapeParens(String str) {\n-        if (str.indexOf('(') == -1 && str.indexOf(')') == -1 ) {\n-            return str;\n-        } else {\n-            int count = 0;\n-            int pos = 0;\n-            while ((pos = str.indexOf('(', pos)) != -1) {\n-                count++;\n-                pos++;\n-            }\n-            pos = 0;\n-            while ((pos = str.indexOf(')', pos)) != -1) {\n-                count++;\n-                pos++;\n-            }\n-            char []inArr = str.toCharArray();\n-            char []outArr = new char[inArr.length+count];\n-            pos = 0;\n-            for (int i=0;i<inArr.length;i++) {\n-                if (inArr[i] == '(' || inArr[i] == ')') {\n-                    outArr[pos++] = '\\\\';\n-                }\n-                outArr[pos++] = inArr[i];\n-            }\n-            return new String(outArr);\n-\n-        }\n-    }\n-\n@@ -2102,194 +2041,0 @@\n-\n-    \/**\n-     * PluginPrinter generates EPSF wrapped with a header and trailer\n-     * comment. This conforms to the new requirements of Mozilla 1.7\n-     * and FireFox 1.5 and later. Earlier versions of these browsers\n-     * did not support plugin printing in the general sense (not just Java).\n-     * A notable limitation of these browsers is that they handle plugins\n-     * which would span page boundaries by scaling plugin content to fit on a\n-     * single page. This means white space is left at the bottom of the\n-     * previous page and its impossible to print these cases as they appear on\n-     * the web page. This is contrast to how the same browsers behave on\n-     * Windows where it renders as on-screen.\n-     * Cases where the content fits on a single page do work fine, and they\n-     * are the majority of cases.\n-     * The scaling that the browser specifies to make the plugin content fit\n-     * when it is larger than a single page can hold is non-uniform. It\n-     * scales the axis in which the content is too large just enough to\n-     * ensure it fits. For content which is extremely long this could lead\n-     * to noticeable distortion. However that is probably rare enough that\n-     * its not worth compensating for that here, but we can revisit that if\n-     * needed, and compensate by making the scale for the other axis the\n-     * same.\n-     *\/\n-    public static class PluginPrinter implements Printable {\n-\n-        private EPSPrinter epsPrinter;\n-        private Component applet;\n-        private PrintStream stream;\n-        private String epsTitle;\n-        private int bx, by, bw, bh;\n-        private int width, height;\n-\n-        \/**\n-         * This is called from the Java Plug-in to print an Applet's\n-         * contents as EPS to a postscript stream provided by the browser.\n-         * @param applet the applet component to print.\n-         * @param stream the print stream provided by the plug-in\n-         * @param x the x location of the applet panel in the browser window\n-         * @param y the y location of the applet panel in the browser window\n-         * @param w the width of the applet panel in the browser window\n-         * @param h the width of the applet panel in the browser window\n-         *\/\n-        @SuppressWarnings(\"deprecation\")\n-        public PluginPrinter(Component applet,\n-                             PrintStream stream,\n-                             int x, int y, int w, int h) {\n-\n-            this.applet = applet;\n-            this.epsTitle = \"Java Plugin Applet\";\n-            this.stream = stream;\n-            bx = x;\n-            by = y;\n-            bw = w;\n-            bh = h;\n-            width = applet.size().width;\n-            height = applet.size().height;\n-            epsPrinter = new EPSPrinter(this, epsTitle, stream,\n-                                        0, 0, width, height);\n-        }\n-\n-        public void printPluginPSHeader() {\n-            stream.println(\"%%BeginDocument: JavaPluginApplet\");\n-        }\n-\n-        public void printPluginApplet() {\n-            try {\n-                epsPrinter.print();\n-            } catch (PrinterException e) {\n-            }\n-        }\n-\n-        public void printPluginPSTrailer() {\n-            stream.println(\"%%EndDocument: JavaPluginApplet\");\n-            stream.flush();\n-        }\n-\n-        public void printAll() {\n-            printPluginPSHeader();\n-            printPluginApplet();\n-            printPluginPSTrailer();\n-        }\n-\n-        public int print(Graphics g, PageFormat pf, int pgIndex) {\n-            if (pgIndex > 0) {\n-                return Printable.NO_SUCH_PAGE;\n-            } else {\n-                \/\/ \"aware\" client code can detect that its been passed a\n-                \/\/ PrinterGraphics and could theoretically print\n-                \/\/ differently. I think this is more likely useful than\n-                \/\/ a problem.\n-                applet.printAll(g);\n-                return Printable.PAGE_EXISTS;\n-            }\n-        }\n-\n-    }\n-\n-    \/*\n-     * This class can take an application-client supplied printable object\n-     * and send the result to a stream.\n-     * The application does not need to send any postscript to this stream\n-     * unless it needs to specify a translation etc.\n-     * It assumes that its importing application obeys all the conventions\n-     * for importation of EPS. See Appendix H - Encapsulated Postscript File\n-     * Format - of the Adobe Postscript Language Reference Manual, 2nd edition.\n-     * This class could be used as the basis for exposing the ability to\n-     * generate EPSF from 2D graphics as a StreamPrintService.\n-     * In that case a MediaPrintableArea attribute could be used to\n-     * communicate the bounding box.\n-     *\/\n-    public static class EPSPrinter implements Pageable {\n-\n-        private PageFormat pf;\n-        private PSPrinterJob job;\n-        private int llx, lly, urx, ury;\n-        private Printable printable;\n-        private PrintStream stream;\n-        private String epsTitle;\n-\n-        public EPSPrinter(Printable printable, String title,\n-                          PrintStream stream,\n-                          int x, int y, int wid, int hgt) {\n-\n-            this.printable = printable;\n-            this.epsTitle = title;\n-            this.stream = stream;\n-            llx = x;\n-            lly = y;\n-            urx = llx+wid;\n-            ury = lly+hgt;\n-            \/\/ construct a PageFormat with zero margins representing the\n-            \/\/ exact bounds of the applet. ie construct a theoretical\n-            \/\/ paper which happens to exactly match applet panel size.\n-            Paper p = new Paper();\n-            p.setSize((double)wid, (double)hgt);\n-            p.setImageableArea(0.0,0.0, (double)wid, (double)hgt);\n-            pf = new PageFormat();\n-            pf.setPaper(p);\n-        }\n-\n-        public void print() throws PrinterException {\n-            stream.println(\"%!PS-Adobe-3.0 EPSF-3.0\");\n-            stream.println(\"%%BoundingBox: \" +\n-                           llx + \" \" + lly + \" \" + urx + \" \" + ury);\n-            stream.println(\"%%Title: \" + epsTitle);\n-            stream.println(\"%%Creator: Java Printing\");\n-            stream.println(\"%%CreationDate: \" + new java.util.Date());\n-            stream.println(\"%%EndComments\");\n-            stream.println(\"\/pluginSave save def\");\n-            stream.println(\"mark\"); \/\/ for restoring stack state on return\n-\n-            job = new PSPrinterJob();\n-            job.epsPrinter = this; \/\/ modifies the behaviour of PSPrinterJob\n-            job.mPSStream = stream;\n-            job.mDestType = RasterPrinterJob.STREAM; \/\/ prevents closure\n-\n-            job.startDoc();\n-            try {\n-                job.printPage(this, 0);\n-            } catch (Throwable t) {\n-                if (t instanceof PrinterException) {\n-                    throw (PrinterException)t;\n-                } else {\n-                    throw new PrinterException(t.toString());\n-                }\n-            } finally {\n-                stream.println(\"cleartomark\"); \/\/ restore stack state\n-                stream.println(\"pluginSave restore\");\n-                job.endDoc();\n-            }\n-            stream.flush();\n-        }\n-\n-        public int getNumberOfPages() {\n-            return 1;\n-        }\n-\n-        public PageFormat getPageFormat(int pgIndex) {\n-            if (pgIndex > 0) {\n-                throw new IndexOutOfBoundsException(\"pgIndex\");\n-            } else {\n-                return pf;\n-            }\n-        }\n-\n-        public Printable getPrintable(int pgIndex) {\n-            if (pgIndex > 0) {\n-                throw new IndexOutOfBoundsException(\"pgIndex\");\n-            } else {\n-            return printable;\n-            }\n-        }\n-\n-    }\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/PSPrinterJob.java","additions":61,"deletions":316,"binary":false,"changes":377,"status":"modified"}]}