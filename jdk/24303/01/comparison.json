{"files":[{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4417964\n+ * @summary tests that drag events continue to arrive to heavyweight\n+ *          when the mouse is moved to lightweight while dragging.\n+ * @key headful\n+ * @library \/lib\/client \/java\/awt\/regtesthelpers\n+ * @build ExtendedRobot Util\n+ * @run main DragToLightweightTest\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.HeadlessException;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+public class DragToLightweightTest {\n+\n+    private static final CountDownLatch latch = new CountDownLatch(1);\n+    private static volatile MouseTest mouseTest;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        EventQueue.invokeAndWait(() -> mouseTest = new MouseTest());\n+\n+        try {\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (mouseTest != null) {\n+                    mouseTest.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void test() throws Exception {\n+        ExtendedRobot robot = new ExtendedRobot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        Rectangle componentBounds = mouseTest.getLightweightComponentBounds();\n+\n+        robot.dragAndDrop(\n+                componentBounds.x + componentBounds.width \/ 2, componentBounds.y + componentBounds.height + 30,\n+                componentBounds.x + componentBounds.width \/ 2, componentBounds.y + 2 * componentBounds.height \/ 3\n+        );\n+\n+        if (!latch.await(5, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"The test failed: no mouse release event received\");\n+        }\n+\n+        System.out.println(\"Mouse release event received, the test PASSED\");\n+    }\n+\n+    private static class MouseTest extends Frame {\n+\n+        final Foo foo;\n+\n+        public MouseTest() throws HeadlessException {\n+            super(\"DragToLightweightTest\");\n+\n+            setLayout(new FlowLayout());\n+\n+            addMouseListener(new MouseAdapter() {\n+                @Override\n+                public void mouseReleased(MouseEvent e) {\n+                    System.out.println(\"mouseReleased\");\n+                    latch.countDown();\n+                }\n+            });\n+\n+            \/\/ Create a Component that will be a child of the Frame and add\n+            \/\/ a MouseListener to it.\n+            foo = new Foo();\n+            foo.setBackground(Color.red);\n+\n+            System.out.println(foo.getPreferredSize());\n+            foo.setPreferredSize(new Dimension(350, 200));\n+            System.out.println(foo.getPreferredSize());\n+\n+            foo.addMouseListener(new DummyAdapter());\n+\n+            add(foo);\n+\n+            setSize(400, 400);\n+            setLocationRelativeTo(null);\n+            setVisible(true);\n+        }\n+\n+        public Rectangle getLightweightComponentBounds() throws Exception {\n+            return Util.invokeOnEDT(() -> {\n+                Point locationOnScreen = foo.getLocationOnScreen();\n+                Dimension size = foo.getSize();\n+                return new Rectangle(locationOnScreen.x, locationOnScreen.y, size.width, size.height);\n+            });\n+        }\n+\n+        private static class Foo extends Container {\n+            public void paint(Graphics g) {\n+                g.setColor(getBackground());\n+                g.fillRect(0, 0, getWidth(), getHeight());\n+                g.setColor(Color.white);\n+                g.drawString(getBounds().toString(), 5, 20);\n+                super.paint(g);\n+            }\n+        }\n+\n+        private static class DummyAdapter extends MouseAdapter {}\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/DragToLightweightTest.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4095172\n+ * @summary Test for no proper mouse coordinates on MOUSE_ENTER\/MOUSE_EXIT events for Win boxes.\n+ * @key headful\n+ * @library \/lib\/client \/java\/awt\/regtesthelpers\n+ * @build ExtendedRobot Util\n+ * @run main MouseEnterTest\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.ArrayList;\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+public class MouseEnterTest {\n+    private static Frame frame;\n+    private static final TestMouseAdapter mouseAdapter = new TestMouseAdapter();\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(MouseEnterTest::initAndShowGUI);\n+        try {\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void initAndShowGUI() {\n+        frame = new Frame(\"MouseEnterTest\");\n+        frame.setLayout(null);\n+        frame.setSize(300, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.addMouseListener(mouseAdapter);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void test() throws Exception {\n+        ExtendedRobot robot = new ExtendedRobot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        Rectangle bounds = Util.invokeOnEDT(frame::getBounds);\n+\n+        java.util.List<Point> points = getBorderGlidePoints(bounds);\n+        for (int i = 0; i < points.size(); i += 2) {\n+            Point p1 = points.get(i);\n+            Point p2 = points.get(i + 1);\n+\n+            System.out.println(\"\\n------------------\\n\");\n+\n+            System.out.printf(\"%s > %s > %s\\n\", p1, p2, p1);\n+            robot.glide(p1, p2);\n+            robot.waitForIdle();\n+            robot.glide(p2, p1);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            mouseAdapter.testEvents();\n+\n+            System.out.println(\"\\n------------------\\n\");\n+\n+            System.out.printf(\"%s > %s > %s\\n\", p2, p1, p2);\n+            robot.glide(p2, p1);\n+            robot.waitForIdle();\n+            robot.glide(p1, p2);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            mouseAdapter.testEvents();\n+        }\n+    }\n+\n+    private static java.util.List<Point> getBorderGlidePoints(Rectangle bounds) {\n+        java.util.List<Point> list = new ArrayList<>();\n+\n+        int d = 10;\n+\n+        \/\/ left\n+        list.add(new Point(bounds.x - d, bounds.y + bounds.height \/ 2));\n+        list.add(new Point(bounds.x + d, bounds.y + bounds.height \/ 2));\n+\n+        \/\/ right\n+        list.add(new Point(bounds.x + bounds.width - d, bounds.y + bounds.height \/ 2));\n+        list.add(new Point(bounds.x + bounds.width + d, bounds.y + bounds.height \/ 2));\n+\n+        \/\/ top\n+        list.add(new Point(bounds.x + bounds.width \/ 2, bounds.y - d));\n+        list.add(new Point(bounds.x + bounds.width \/ 2, bounds.y + d));\n+\n+        \/\/ bottom\n+        list.add(new Point(bounds.x + bounds.width \/ 2, bounds.y + bounds.height - d));\n+        list.add(new Point(bounds.x + bounds.width \/ 2, bounds.y + bounds.height + d));\n+\n+        return list;\n+    }\n+\n+    private static final class TestMouseAdapter extends MouseAdapter {\n+        private static final int THRESHOLD = 5;\n+        private volatile MouseEvent lastEnteredEvent = null;\n+        private volatile MouseEvent lastExitedEvent = null;\n+\n+        @Override\n+        public void mouseEntered(MouseEvent e) {\n+            System.out.println(\"MouseEntered \" + e);\n+            lastEnteredEvent = e;\n+        }\n+\n+        @Override\n+        public void mouseExited(MouseEvent e) {\n+            System.out.println(\"MouseExited \" + e);\n+            lastExitedEvent = e;\n+        }\n+\n+        public void testEvents() {\n+            if (lastEnteredEvent == null || lastExitedEvent == null) {\n+                throw new RuntimeException(\"Missing lastEnteredEvent or lastExitedEvent\");\n+            }\n+\n+            System.out.println(\"\\nTesting:\");\n+            System.out.println(lastEnteredEvent);\n+            System.out.println(lastExitedEvent);\n+            System.out.println();\n+\n+            int diffX = Math.abs(lastEnteredEvent.getX() - lastExitedEvent.getX());\n+            int diffScreenX = Math.abs(lastEnteredEvent.getY() - lastExitedEvent.getY());\n+            int diffY = Math.abs(lastEnteredEvent.getXOnScreen() - lastExitedEvent.getXOnScreen());\n+            int diffScreenY = Math.abs(lastEnteredEvent.getYOnScreen() - lastExitedEvent.getYOnScreen());\n+\n+            System.out.printf(\"THRESHOLD %d, diffX %d diffScreenX %d \" +\n+                            \"diffY %d diffScreenY %d\\n\",\n+                    THRESHOLD,\n+                    diffX, diffScreenX,\n+                    diffY, diffScreenY\n+            );\n+\n+            if (diffX > THRESHOLD\n+                || diffScreenX > THRESHOLD\n+                || diffY > THRESHOLD\n+                || diffScreenY > THRESHOLD) {\n+                throw new RuntimeException(\"Mouse enter vs exit event is too different\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/MouseEnterTest.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"}]}