{"files":[{"patch":"@@ -10300,4 +10300,0 @@\n-\/\/ 32-bit Windows has its own fast-path implementation\n-\/\/ of get_thread\n-#if !defined(WIN32) || defined(_LP64)\n-\n@@ -10338,3 +10334,0 @@\n-\n-#endif \/\/ !WIN32 || _LP64\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,3 +27,0 @@\n-#include \"asm\/macroAssembler.inline.hpp\"\n-#include \"os_windows.hpp\"\n-#include \"runtime\/os.hpp\"\n@@ -34,31 +31,0 @@\n-\n-#ifndef _LP64\n-\/\/  The current scheme to accelerate access to the thread\n-\/\/  pointer is to store the current thread in the os_exception_wrapper\n-\/\/  and reference the current thread from stubs and compiled code\n-\/\/  via the FS register.  FS[0] contains a pointer to the structured\n-\/\/  exception block which is actually a stack address.  The first time\n-\/\/  we call the os exception wrapper, we calculate and store the\n-\/\/  offset from this exception block and use that offset here.\n-\/\/\n-\/\/  The last mechanism we used was problematic in that the\n-\/\/  the offset we had hard coded in the VM kept changing as Microsoft\n-\/\/  evolved the OS.\n-\/\/\n-\/\/ Warning: This mechanism assumes that we only attempt to get the\n-\/\/          thread when we are nested below a call wrapper.\n-\/\/\n-\/\/ movl reg, fs:[0]                        Get exception pointer\n-\/\/ movl reg, [reg + thread_ptr_offset]     Load thread\n-\/\/\n-void MacroAssembler::get_thread(Register thread) {\n-  prefix(FS_segment);\n-  movptr(thread, ExternalAddress(nullptr));\n-  assert(os::win32::get_thread_ptr_offset() != 0,\n-         \"Thread Pointer Offset has not been initialized\");\n-  movl(thread, Address(thread, os::win32::get_thread_ptr_offset()));\n-}\n-\n-\/\/ #else - use shared x86 implementation in cpu\/x86\/vm\/macroAssembler_x86.cpp\n-\n-#endif\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/assembler_windows_x86.cpp","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"}]}