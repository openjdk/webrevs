{"files":[{"patch":"@@ -2034,1 +2034,1 @@\n-  int encode = simd_prefix_and_encode(dst, dst, src, VEX_SIMD_F2, VEX_OPCODE_0F, &attributes);\n+  int encode = simd_prefix_and_encode(dst, src, src, VEX_SIMD_F2, VEX_OPCODE_0F, &attributes);\n@@ -2093,1 +2093,1 @@\n-  int encode = simd_prefix_and_encode(dst, dst, src, VEX_SIMD_F3, VEX_OPCODE_0F, &attributes);\n+  int encode = simd_prefix_and_encode(dst, src, src, VEX_SIMD_F3, VEX_OPCODE_0F, &attributes);\n@@ -11713,1 +11713,1 @@\n-  if (UseAVX > 2) {\n+  if (UseAVX > 2 && !attributes->uses_vl()) {\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -9962,0 +9962,1 @@\n+  predicate(UseAVX == 0);\n@@ -9984,0 +9985,1 @@\n+  predicate(UseAVX == 0);\n@@ -10067,0 +10069,3 @@\n+    if (UseAVX > 0) {\n+      __ pxor($dst$$XMMRegister, $dst$$XMMRegister);\n+    }\n@@ -10074,0 +10079,1 @@\n+  predicate(UseAVX == 0);\n@@ -10090,0 +10096,3 @@\n+    if (UseAVX > 0) {\n+      __ pxor($dst$$XMMRegister, $dst$$XMMRegister);\n+    }\n@@ -10097,0 +10106,1 @@\n+  predicate(UseAVX == 0);\n@@ -10140,0 +10150,3 @@\n+    if (UseAVX > 0) {\n+      __ pxor($dst$$XMMRegister, $dst$$XMMRegister);\n+    }\n@@ -10147,0 +10160,1 @@\n+  predicate(UseAVX == 0);\n@@ -10162,0 +10176,3 @@\n+    if (UseAVX > 0) {\n+      __ pxor($dst$$XMMRegister, $dst$$XMMRegister);\n+    }\n@@ -10169,0 +10186,1 @@\n+  predicate(UseAVX == 0);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8318562\n+ * @run main\/othervm\/timeout=200 -XX:CompileCommand=compileonly,TestConvertImplicitNullCheck::test -XX:-TieredCompilation -Xbatch TestConvertImplicitNullCheck\n+ * @summary Exercise float to double conversion with implicit null check\n+ *\n+ *\/\n+\n+\n+public class TestConvertImplicitNullCheck {\n+\n+    float f = 42;\n+\n+    static double test(TestConvertImplicitNullCheck t) {\n+        return t.f; \/\/ float to double conversion with implicit null check of 't'\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Warmup to trigger C2 compilation\n+        TestConvertImplicitNullCheck t = new TestConvertImplicitNullCheck();\n+        for (int i = 0; i < 50_000; ++i) {\n+            test(t);\n+        }\n+        \/\/ implicit null check\n+        try {\n+            test(null);\n+            throw new RuntimeException(\"Test failed as no NullPointerException is thrown\");\n+        } catch (NullPointerException e) {\n+            \/\/ Expected\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestConvertImplicitNullCheck.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ package org.openjdk.bench.vm.compiler;\n+\n+ import org.openjdk.jmh.annotations.Benchmark;\n+ import org.openjdk.jmh.annotations.BenchmarkMode;\n+ import org.openjdk.jmh.annotations.Fork;\n+ import org.openjdk.jmh.annotations.Measurement;\n+ import org.openjdk.jmh.annotations.Mode;\n+ import org.openjdk.jmh.annotations.OutputTimeUnit;\n+ import org.openjdk.jmh.annotations.Scope;\n+ import org.openjdk.jmh.annotations.Setup;\n+ import org.openjdk.jmh.annotations.State;\n+ import org.openjdk.jmh.annotations.Warmup;\n+\n+ import java.util.concurrent.TimeUnit;\n+\n+ @State(Scope.Thread)\n+ @BenchmarkMode(Mode.AverageTime)\n+ @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+ @Warmup(iterations = 5, time = 5, timeUnit = TimeUnit.SECONDS)\n+ @Measurement(iterations = 5, time = 5, timeUnit = TimeUnit.SECONDS)\n+ @Fork(value = 3)\n+ public class ComputePI {\n+\n+   @Benchmark\n+   public double compute_pi_int_dbl() {\n+     double pi = 4.0;\n+     boolean sign = false;\n+\n+     for (int i = 3; i < 1000; i += 2) {\n+       if (sign) {\n+         pi += 4.0 \/ i;\n+       } else {\n+         pi -= 4.0 \/ i;\n+       }\n+       sign = !sign;\n+     }\n+     return pi;\n+   }\n+\n+   @Benchmark\n+   public double compute_pi_int_flt() {\n+     float pi = 4.0f;\n+     boolean sign = false;\n+\n+     for (int i = 3; i < 1000; i += 2) {\n+       if (sign) {\n+         pi += 4.0f \/ i;\n+       } else {\n+         pi -= 4.0f \/ i;\n+       }\n+       sign = !sign;\n+     }\n+     return pi;\n+   }\n+\n+   @Benchmark\n+   public double compute_pi_long_dbl() {\n+     double pi = 4.0;\n+     boolean sign = false;\n+\n+     for (long i = 3; i < 1000; i += 2) {\n+       if (sign) {\n+         pi += 4.0 \/ i;\n+       } else {\n+         pi -= 4.0 \/ i;\n+       }\n+       sign = !sign;\n+     }\n+     return pi;\n+   }\n+\n+   @Benchmark\n+   public double compute_pi_long_flt() {\n+     float pi = 4.0f;\n+     boolean sign = false;\n+\n+     for (long i = 3; i < 1000; i += 2) {\n+       if (sign) {\n+         pi += 4.0f \/ i;\n+       } else {\n+         pi -= 4.0f \/ i;\n+       }\n+       sign = !sign;\n+     }\n+     return pi;\n+   }\n+\n+   @Benchmark\n+   public double compute_pi_flt_dbl() {\n+     double pi = 4.0;\n+     boolean sign = false;\n+\n+     for (float i = 3.0f; i < 1000.0f; i += 2.0f) {\n+       if (sign) {\n+         pi += 4.0 \/ i;\n+       } else {\n+         pi -= 4.0 \/ i;\n+       }\n+       sign = !sign;\n+     }\n+     return pi;\n+   }\n+\n+   @Benchmark\n+   public double compute_pi_dbl_flt() {\n+     float pi = 4.0f;\n+     boolean sign = false;\n+\n+     for (float i = 3.0f; i < 1000.0f; i += 2.0f) {\n+       if (sign) {\n+         pi += 4.0f \/ i;\n+       } else {\n+         pi -= 4.0f \/ i;\n+       }\n+       sign = !sign;\n+     }\n+     return pi;\n+   }\n+ }\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/x86\/ComputePI.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"}]}