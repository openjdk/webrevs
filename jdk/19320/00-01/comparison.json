{"files":[{"patch":"@@ -3484,0 +3484,1 @@\n+\/\/ Both inline code and stub use specific registers and may jump from inline code\/stub to stub,\n@@ -3485,9 +3486,11 @@\n-#define LOOKUP_SECONDARY_SUPERS_TABLE_REGISTERS                     \\\n-do {                                                                \\\n-  assert(r_super_klass  == x10                                   && \\\n-         r_array_base   == x11                                   && \\\n-         r_array_length == x12                                   && \\\n-         (r_array_index == x13        || r_array_index == noreg) && \\\n-         (r_sub_klass   == x14        || r_sub_klass   == noreg) && \\\n-         (result        == x15        || result        == noreg) && \\\n-         (r_bitmap      == x16        || r_bitmap      == noreg), \"registers must match riscv.ad\"); \\\n+\/\/ And which need to be declared registers in the C2-related instruct first.\n+#define LOOKUP_SECONDARY_SUPERS_TABLE_REGISTERS(r_super_klass, r_array_base, r_array_length,  \\\n+                                                r_array_index, r_sub_klass, result, r_bitmap) \\\n+do {                                                                                          \\\n+  assert(r_super_klass  == x10                             &&                                 \\\n+         r_array_base   == x11                             &&                                 \\\n+         r_array_length == x12                             &&                                 \\\n+         (r_array_index == x13  || r_array_index == noreg) &&                                 \\\n+         (r_sub_klass   == x14  || r_sub_klass   == noreg) &&                                 \\\n+         (result        == x15  || result        == noreg) &&                                 \\\n+         (r_bitmap      == x16  || r_bitmap      == noreg), \"registers must match riscv.ad\"); \\\n@@ -3518,1 +3521,2 @@\n-  LOOKUP_SECONDARY_SUPERS_TABLE_REGISTERS;\n+  LOOKUP_SECONDARY_SUPERS_TABLE_REGISTERS(r_super_klass, r_array_base, r_array_length,\n+                                          r_array_index, r_sub_klass, result, r_bitmap);\n@@ -3522,1 +3526,1 @@\n-  \/\/ Make sure that result is nonzero if the test_bit blow misses.\n+  \/\/ Initialize result value to 1 which means mismatch.\n@@ -3603,1 +3607,2 @@\n-  LOOKUP_SECONDARY_SUPERS_TABLE_REGISTERS;\n+  LOOKUP_SECONDARY_SUPERS_TABLE_REGISTERS(r_super_klass, r_array_base, r_array_length,\n+                                          r_array_index, r_sub_klass, result, r_bitmap);\n@@ -3605,1 +3610,1 @@\n-  Label L_matched, L_fallthrough, L_huge;\n+  Label L_matched, L_fallthrough, L_bitmap_full;\n@@ -3607,1 +3612,1 @@\n-  \/\/ Make sure that result is nonzero\n+  \/\/ Initialize result value to 1 which means mismatch.\n@@ -3617,3 +3622,2 @@\n-  \/\/ The bitmap is full to bursting.\n-  \/\/ Implicit invariant: BITMAP_FULL implies (length > 0)\n-  assert(Klass::SECONDARY_SUPERS_BITMAP_FULL == ~uintx(0), \"\");\n+  \/\/ Check if bitmap is SECONDARY_SUPERS_BITMAP_FULL \n+  assert(Klass::SECONDARY_SUPERS_BITMAP_FULL == ~uintx(0), \"Adjust this code\");\n@@ -3621,1 +3625,1 @@\n-  beqz(t0, L_huge);\n+  beqz(t0, L_bitmap_full);\n@@ -3658,1 +3662,1 @@\n-    bind(L_huge);\n+    bind(L_bitmap_full);\n@@ -3679,2 +3683,2 @@\n-    r_array_base   = tmp1,\n-    r_array_length = tmp2,\n+    r_array_base   = tmp1,  \/\/ X11\n+    r_array_length = tmp2,  \/\/ X12\n@@ -3684,1 +3688,2 @@\n-  LOOKUP_SECONDARY_SUPERS_TABLE_REGISTERS;\n+  LOOKUP_SECONDARY_SUPERS_TABLE_REGISTERS(r_super_klass, r_array_base, r_array_length,\n+                                          r_array_index, r_sub_klass, result, r_bitmap);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":27,"deletions":22,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -10126,1 +10126,0 @@\n-  match(Set result (PartialSubtypeCheck sub (Binary super_reg super_con)));\n@@ -10128,0 +10127,1 @@\n+  match(Set result (PartialSubtypeCheck sub (Binary super_reg super_con)));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}