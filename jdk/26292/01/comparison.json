{"files":[{"patch":"@@ -1434,0 +1434,8 @@\n+\n+        @Override\n+        public Attributes enterRawMode() {\n+            Attributes res = super.enterRawMode();\n+            res.setControlChar(ControlChar.VEOF, 4);\n+            return res;\n+        }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/ConsoleIOContext.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,1 @@\n+import jdk.jshell.execution.impl.RestartableInputStream;\n@@ -118,1 +119,1 @@\n-        this.in = b.in;\n+        this.in = new RestartableInputStream(b.in);\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/JShell.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+import jdk.jshell.execution.impl.RestartableInputStream;\n@@ -65,0 +66,1 @@\n+    private static final int TAG_EOF = 3;\n@@ -125,0 +127,1 @@\n+                            case TAG_EOF: return -1;\n@@ -186,1 +189,5 @@\n-                            inTarget.write(TAG_CLOSED);\n+                            if (in instanceof RestartableInputStream ris && !ris.isClosed()) {\n+                                inTarget.write(TAG_EOF);\n+                            } else {\n+                                inTarget.write(TAG_CLOSED);\n+                            }\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/Util.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jshell.execution.impl;\n+\n+import java.io.FilterInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class RestartableInputStream extends FilterInputStream {\n+\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+\n+    public RestartableInputStream(InputStream delegate) {\n+        super(delegate);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        closed.set(true);\n+        super.close();\n+    }\n+\n+    public boolean isClosed() {\n+        return closed.get();\n+    }\n+}\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/impl\/RestartableInputStream.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -82,2 +82,1 @@\n-                inputSink.write(snippet.getKey() + \"\\n\");\n-                inputSink.close(); \/\/ Does not work: inputSink.write(\"\\u0004\"); \/\/ CTRL + D\n+                inputSink.write(snippet.getKey() + \"\\n\\u0004\");\n@@ -88,0 +87,13 @@\n+\n+    public void testUserInputWithCtrlDAndMultipleSnippets() throws Exception {\n+        doRunTest((inputSink, out) -> {\n+            inputSink.write(\"IO.readln()\\n \" + CTRL_D);\n+            waitOutput(out, patternQuote(\"==> null\"));\n+            inputSink.write(\"IO.readln()\\nAB\\n\");\n+            waitOutput(out, patternQuote(\"==> \\\"AB\\\"\"));\n+            inputSink.write(\"System.in.read()\\n\" + CTRL_D);\n+            waitOutput(out, patternQuote(\"==> -1\"));\n+            inputSink.write(\"System.in.read()\\nA\\n\");\n+            waitOutput(out, patternQuote(\"==> 65\"));\n+        }, false);\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/InputUITest.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+    protected static final String CTRL_D = \"\\u0004\";\n","filename":"test\/langtools\/jdk\/jshell\/UITesting.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}