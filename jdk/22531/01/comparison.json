{"files":[{"patch":"@@ -4086,0 +4086,23 @@\n+\n+        @Override\n+        public void visitLambda(JCLambda tree) {\n+            final boolean constructorPrev = constructor;\n+            final boolean firstStatementPrev = firstStatement;\n+            final JCReturn earlyReturnPrev = earlyReturn;\n+            final Name initCallPrev = initCall;\n+            final int scanDepthPrev = scanDepth;\n+            constructor = false;\n+            firstStatement = false;\n+            earlyReturn = null;\n+            initCall = null;\n+            scanDepth = 0;\n+            try {\n+                super.visitLambda(tree);\n+            } finally {\n+                constructor = constructorPrev;\n+                firstStatement = firstStatementPrev;\n+                earlyReturn = earlyReturnPrev;\n+                initCall = initCallPrev;\n+                scanDepth = scanDepthPrev;\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8345438\n+ * @summary Verify 'return' allowed in a lambda declared in an early construction context\n+ * @enablePreview\n+ *\/\n+public class EarlyLambdaReturn {\n+\n+    public EarlyLambdaReturn() {\n+        Runnable r = () -> {\n+            return;\n+        };\n+        super();\n+        r.run();\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyLambdaReturn();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyLambdaReturn.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -189,0 +189,23 @@\n+\n+    public static class Inner4 {\n+        Inner4() {\n+            Runnable r = () -> {\n+                class A {\n+                    A() {\n+                        return;         \/\/ this should FAIL\n+                        super();\n+                    }\n+                    A(int x) {\n+                        {\n+                            this();     \/\/ this should FAIL\n+                        }\n+                    }\n+                    A(char x) {\n+                        super();\n+                        this();         \/\/ this should FAIL\n+                    }\n+                }\n+            };\n+            super();\n+        };\n+    }\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -22,0 +22,3 @@\n+SuperInitFails.java:195:25: compiler.err.return.before.superclass.initialized\n+SuperInitFails.java:200:33: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:205:29: compiler.err.redundant.superclass.init\n@@ -30,1 +33,1 @@\n-SuperInitFails.java:150:18: compiler.err.ctor.calls.not.allowed.here\n+SuperInitFails.java:150:18: compiler.err.call.must.only.appear.in.ctor\n@@ -33,1 +36,1 @@\n-30 errors\n+33 errors\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitFails.out","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -457,0 +457,35 @@\n+    \/\/ Lambdas within constructors\n+    public static class Test22 {\n+        public Test22() {\n+            Runnable r = () -> System.out.println();\n+            super();\n+            r.run();\n+        }\n+        public Test22(int x) {\n+            Runnable r = () -> System.out.println();\n+            r.run();\n+            super();\n+        }\n+        public Test22(char x) {\n+            Runnable r = () -> {\n+                class A {\n+                    A() {\n+                        return;\n+                    }\n+                    A(int x) {\n+                        Runnable r2 = () -> {\n+                            return;\n+                        };\n+                        this();\n+                        r2.run();\n+                    }\n+                    A(char x) {\n+                        this(0);\n+                    }\n+                }\n+                return;\n+            };\n+            r.run();\n+            super();\n+        }\n+    }\n@@ -502,0 +537,1 @@\n+        new Test22('x');\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/SuperInitGood.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"}]}