{"files":[{"patch":"@@ -25,5 +25,0 @@\n-import java.io.IOException;\n-import java.lang.classfile.ClassFile;\n-import java.lang.classfile.ClassModel;\n-import java.lang.classfile.components.ClassRemapper;\n-import java.lang.constant.ClassDesc;\n@@ -34,1 +29,0 @@\n-import org.openjdk.jmh.annotations.Level;\n@@ -39,1 +33,0 @@\n-import org.openjdk.jmh.annotations.Setup;\n@@ -46,2 +39,0 @@\n-import java.util.HashMap;\n-import java.util.Map;\n@@ -49,1 +40,0 @@\n-import org.openjdk.jmh.infra.Blackhole;\n@@ -52,1 +42,1 @@\n-@Fork(value = 1, jvmArgsAppend = {\"--enable-preview\"})\n+@Fork(1)\n@@ -58,2 +48,0 @@\n-    ClsLoader loader;\n-    Map<String, Class<?>> clsMap;\n@@ -61,11 +49,2 @@\n-    @Setup(Level.Invocation)\n-    public void setup() throws IOException {\n-        ClassModel tempModel = ClassFile.of().parse(ProxyGenBench.class.getResourceAsStream(\"ProxyGenBench$Interfaze.class\").readAllBytes());\n-        ClassDesc tempDesc = ClassDesc.ofDescriptor(Interfaze.class.descriptorString());\n-        loader = new ClsLoader();\n-        clsMap = new HashMap<>(100);\n-        for (int i = 0; i < 100; i++) {\n-            String intfName = Interfaze.class.getName() + i;\n-            loader.defClass(intfName, ClassRemapper.of(Map.of(tempDesc, ClassDesc.of(intfName))).remapClass(ClassFile.of(), tempModel));\n-        }\n-    }\n+    static final Class<?>[] INTF = new Class<?>[]{Interfaze.class};\n+    static final IHandler HANDLER = new IHandler();\n@@ -74,7 +53,3 @@\n-    public void generateProxies(Blackhole bh) {\n-        for (Class<?> intf : clsMap.values()) {\n-            bh.consume(Proxy.newProxyInstance(\n-                    loader,\n-                    new Class<?>[]{intf},\n-                    new IHandler()\n-            ));\n+    public void generate100Proxies() {\n+        for (int i = 0; i < 100; i++) {\n+            Proxy.newProxyInstance(new ClsLoader(), INTF, HANDLER);\n@@ -97,1 +72,1 @@\n-    public class ClsLoader extends ClassLoader {\n+    static class ClsLoader extends ClassLoader {\n@@ -100,7 +75,1 @@\n-            super(ProxyGenBench.class.getClassLoader());\n-        }\n-\n-        Class<?> defClass(String className, byte[] classData) {\n-            Class<?> cls = defineClass(className, classData, 0, classData.length);\n-            clsMap.put(className, cls);\n-            return cls;\n+            super(Interfaze.class.getClassLoader());\n@@ -108,0 +77,1 @@\n+    }\n@@ -109,4 +79,2 @@\n-        @Override\n-        public Class<?> findClass(String name) throws ClassNotFoundException {\n-            return clsMap.get(name);\n-        }\n+    public static void main(String[] args) {\n+        new ProxyGenBench().generate100Proxies();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/Proxy\/ProxyGenBench.java","additions":11,"deletions":43,"binary":false,"changes":54,"status":"modified"}]}