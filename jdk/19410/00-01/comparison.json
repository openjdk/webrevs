{"files":[{"patch":"@@ -48,0 +48,2 @@\n+import java.lang.classfile.attribute.StackMapFrameInfo;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n@@ -125,0 +127,1 @@\n+    private final List<StackMapFrameInfo.VerificationTypeInfo> throwableStack;\n@@ -164,0 +167,1 @@\n+                ClassFile.StackMapsOption.DROP_STACK_MAPS,\n@@ -170,0 +174,1 @@\n+        this.throwableStack = List.of(StackMapFrameInfo.ObjectVerificationTypeInfo.of(cp.classEntry(CD_Throwable)));\n@@ -471,1 +476,1 @@\n-                    pm.generateMethod(clb, classEntry);\n+                    pm.generateMethod(clb, classEntry, throwableStack);\n@@ -577,1 +582,4 @@\n-               .athrow();\n+               .athrow()\n+               .with(StackMapTableAttribute.of(List.of(\n+                      StackMapFrameInfo.of(c1, List.of(), throwableStack),\n+                      StackMapFrameInfo.of(c2, List.of(), throwableStack))));\n@@ -591,17 +599,24 @@\n-                        .withCode(cob -> cob\n-                            .block(blockBuilder -> blockBuilder\n-                                    .aload(cob.parameterSlot(0))\n-                                    .invokevirtual(CD_MethodHandles_Lookup, \"lookupClass\", MTD_Class)\n-                                    .ldc(CD_Proxy)\n-                                    .if_acmpne(blockBuilder.breakLabel())\n-                                    .aload(cob.parameterSlot(0))\n-                                    .invokevirtual(CD_MethodHandles_Lookup, \"hasFullPrivilegeAccess\", MTD_boolean)\n-                                    .ifeq(blockBuilder.breakLabel())\n-                                    .invokestatic(CD_MethodHandles, \"lookup\", MTD_MethodHandles$Lookup)\n-                                    .areturn())\n-                            .new_(CD_IllegalAccessException)\n-                            .dup()\n-                            .aload(cob.parameterSlot(0))\n-                            .invokevirtual(CD_MethodHandles_Lookup, \"toString\", MTD_String)\n-                            .invokespecial(CD_IllegalAccessException, INIT_NAME, MTD_void_String)\n-                            .athrow()));\n+                        .withCode(cob -> {\n+                            Label failLabel = cob.newLabel();\n+                            cob.aload(cob.parameterSlot(0))\n+                               .invokevirtual(CD_MethodHandles_Lookup, \"lookupClass\", MTD_Class)\n+                               .ldc(CD_Proxy)\n+                               .if_acmpne(failLabel)\n+                               .aload(cob.parameterSlot(0))\n+                               .invokevirtual(CD_MethodHandles_Lookup, \"hasFullPrivilegeAccess\", MTD_boolean)\n+                               .ifeq(failLabel)\n+                               .invokestatic(CD_MethodHandles, \"lookup\", MTD_MethodHandles$Lookup)\n+                               .areturn()\n+                               .labelBinding(failLabel)\n+                               .new_(CD_IllegalAccessException)\n+                               .dup()\n+                               .aload(cob.parameterSlot(0))\n+                               .invokevirtual(CD_MethodHandles_Lookup, \"toString\", MTD_String)\n+                               .invokespecial(CD_IllegalAccessException, INIT_NAME, MTD_void_String)\n+                               .athrow()\n+                               .with(StackMapTableAttribute.of(List.of(\n+                                       StackMapFrameInfo.of(failLabel,\n+                                               List.of(StackMapFrameInfo.ObjectVerificationTypeInfo.of(\n+                                                       cob.constantPool().classEntry(CD_MethodHandles_Lookup))),\n+                                               List.of()))));\n+                        }));\n@@ -652,1 +667,1 @@\n-        private void generateMethod(ClassBuilder clb, ClassEntry classEntry) {\n+        private void generateMethod(ClassBuilder clb, ClassEntry classEntry, List<StackMapFrameInfo.VerificationTypeInfo> throwableStack) {\n@@ -704,1 +719,4 @@\n-                               .athrow();\n+                               .athrow()\n+                               .with(StackMapTableAttribute.of(List.of(\n+                                       StackMapFrameInfo.of(c1, List.of(), throwableStack),\n+                                       StackMapFrameInfo.of(c2, List.of(), throwableStack))));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":39,"deletions":21,"binary":false,"changes":60,"status":"modified"}]}