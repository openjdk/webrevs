{"files":[{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.reflect.Proxy;\n+\n+import java.io.IOException;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.components.ClassRemapper;\n+import java.lang.constant.ClassDesc;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.SingleShotTime)\n+@Fork(value = 1, jvmArgsAppend = {\"--enable-preview\"})\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 10, time = 2)\n+@State(Scope.Benchmark)\n+public class ProxyGenBench {\n+    ClsLoader loader;\n+    Map<String, Class<?>> clsMap;\n+\n+    @Setup(Level.Invocation)\n+    public void setup() throws IOException {\n+        ClassModel tempModel = ClassFile.of().parse(ProxyGenBench.class.getResourceAsStream(\"ProxyGenBench$Interfaze.class\").readAllBytes());\n+        ClassDesc tempDesc = ClassDesc.ofDescriptor(Interfaze.class.descriptorString());\n+        loader = new ClsLoader();\n+        clsMap = new HashMap<>(100);\n+        for (int i = 0; i < 100; i++) {\n+            String intfName = Interfaze.class.getName() + i;\n+            loader.defClass(intfName, ClassRemapper.of(Map.of(tempDesc, ClassDesc.of(intfName))).remapClass(ClassFile.of(), tempModel));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void generateProxies(Blackhole bh) {\n+        for (Class<?> intf : clsMap.values()) {\n+            bh.consume(Proxy.newProxyInstance(\n+                    loader,\n+                    new Class<?>[]{intf},\n+                    new IHandler()\n+            ));\n+        }\n+    }\n+\n+    public interface Interfaze {\n+        default int sum(int a, int b, int c) {\n+            return a + b + c;\n+        }\n+    }\n+\n+    static class IHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    public class ClsLoader extends ClassLoader {\n+\n+        public ClsLoader() {\n+            super(ProxyGenBench.class.getClassLoader());\n+        }\n+\n+        Class<?> defClass(String className, byte[] classData) {\n+            Class<?> cls = defineClass(className, classData, 0, classData.length);\n+            clsMap.put(className, cls);\n+            return cls;\n+        }\n+\n+        @Override\n+        public Class<?> findClass(String name) throws ClassNotFoundException {\n+            return clsMap.get(name);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/reflect\/Proxy\/ProxyGenBench.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}