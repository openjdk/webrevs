{"files":[{"patch":"@@ -128,0 +128,6 @@\n+    private final NameAndTypeEntry exInit;\n+    private final ClassEntry object, proxy, ute;\n+    private final FieldRefEntry handlerField;\n+    private final InterfaceMethodRefEntry invoke;\n+    private final MethodRefEntry uteInit;\n+\n@@ -175,0 +181,7 @@\n+        this.exInit = cp.nameAndTypeEntry(INIT_NAME, MTD_void_String);\n+        this.object = cp.classEntry(CD_Object);\n+        this.proxy = cp.classEntry(CD_Proxy);\n+        this.handlerField = cp.fieldRefEntry(proxy, cp.nameAndTypeEntry(NAME_HANDLER_FIELD, CD_InvocationHandler));\n+        this.invoke = cp.interfaceMethodRefEntry(CD_InvocationHandler, \"invoke\", MTD_Object_Object_Method_ObjectArray);\n+        this.ute = cp.classEntry(CD_UndeclaredThrowableException);\n+        this.uteInit = cp.methodRefEntry(ute, cp.nameAndTypeEntry(INIT_NAME, MTD_void_Throwable));\n@@ -465,1 +478,1 @@\n-            clb.withSuperclass(CD_Proxy);\n+            clb.withSuperclass(proxy);\n@@ -476,1 +489,1 @@\n-                    pm.generateMethod(clb, classEntry, throwableStack);\n+                    pm.generateMethod(this, clb);\n@@ -541,1 +554,1 @@\n-    private static void generateConstructor(ClassBuilder clb) {\n+    private void generateConstructor(ClassBuilder clb) {\n@@ -543,3 +556,3 @@\n-               .aload(cob.receiverSlot())\n-               .aload(cob.parameterSlot(0))\n-               .invokespecial(CD_Proxy, INIT_NAME, MTD_void_InvocationHandler)\n+               .aload(0)\n+               .aload(1)\n+               .invokespecial(cp.methodRefEntry(proxy, cp.nameAndTypeEntry(INIT_NAME, MTD_void_InvocationHandler)))\n@@ -567,0 +580,2 @@\n+            ClassEntry nsme = cp.classEntry(CD_NoSuchMethodError);\n+            ClassEntry ncdfe = cp.classEntry(CD_NoClassDefFoundError);\n@@ -569,1 +584,1 @@\n-               .new_(CD_NoSuchMethodError)\n+               .new_(nsme)\n@@ -573,1 +588,1 @@\n-               .invokespecial(CD_NoSuchMethodError, INIT_NAME, MTD_void_String)\n+               .invokespecial(cp.methodRefEntry(nsme, exInit))\n@@ -577,1 +592,1 @@\n-               .new_(CD_NoClassDefFoundError)\n+               .new_(ncdfe)\n@@ -581,1 +596,1 @@\n-               .invokespecial(CD_NoClassDefFoundError, INIT_NAME, MTD_void_String)\n+               .invokespecial(cp.methodRefEntry(ncdfe, exInit))\n@@ -594,1 +609,1 @@\n-    private static void generateLookupAccessor(ClassBuilder clb) {\n+    private void generateLookupAccessor(ClassBuilder clb) {\n@@ -601,0 +616,2 @@\n+                            ClassEntry mhl = cp.classEntry(CD_MethodHandles_Lookup);\n+                            ClassEntry iae = cp.classEntry(CD_IllegalAccessException);\n@@ -602,2 +619,2 @@\n-                               .invokevirtual(CD_MethodHandles_Lookup, \"lookupClass\", MTD_Class)\n-                               .ldc(CD_Proxy)\n+                               .invokevirtual(cp.methodRefEntry(mhl, cp.nameAndTypeEntry(\"lookupClass\", MTD_Class)))\n+                               .ldc(proxy)\n@@ -606,1 +623,1 @@\n-                               .invokevirtual(CD_MethodHandles_Lookup, \"hasFullPrivilegeAccess\", MTD_boolean)\n+                               .invokevirtual(cp.methodRefEntry(mhl, cp.nameAndTypeEntry(\"hasFullPrivilegeAccess\", MTD_boolean)))\n@@ -611,1 +628,1 @@\n-                               .new_(CD_IllegalAccessException)\n+                               .new_(iae)\n@@ -614,2 +631,2 @@\n-                               .invokevirtual(CD_MethodHandles_Lookup, \"toString\", MTD_String)\n-                               .invokespecial(CD_IllegalAccessException, INIT_NAME, MTD_void_String)\n+                               .invokevirtual(cp.methodRefEntry(mhl, cp.nameAndTypeEntry(\"toString\", MTD_String)))\n+                               .invokespecial(cp.methodRefEntry(iae, exInit))\n@@ -619,2 +636,1 @@\n-                                               List.of(StackMapFrameInfo.ObjectVerificationTypeInfo.of(\n-                                                       cob.constantPool().classEntry(CD_MethodHandles_Lookup))),\n+                                               List.of(StackMapFrameInfo.ObjectVerificationTypeInfo.of(mhl)),\n@@ -667,2 +683,2 @@\n-        private void generateMethod(ClassBuilder clb, ClassEntry classEntry, List<StackMapFrameInfo.VerificationTypeInfo> throwableStack) {\n-            var cp = clb.constantPool();\n+        private void generateMethod(ProxyGenerator pg, ClassBuilder clb) {\n+            var cp = pg.cp;\n@@ -681,1 +697,1 @@\n-                           .getfield(CD_Proxy, NAME_HANDLER_FIELD, CD_InvocationHandler)\n+                           .getfield(pg.handlerField)\n@@ -683,1 +699,1 @@\n-                           .getstatic(cp.fieldRefEntry(classEntry, cp.nameAndTypeEntry(methodFieldName, CD_Method)));\n+                           .getstatic(cp.fieldRefEntry(pg.classEntry, cp.nameAndTypeEntry(methodFieldName, CD_Method)));\n@@ -688,1 +704,1 @@\n-                               .anewarray(CD_Object);\n+                               .anewarray(pg.object);\n@@ -699,1 +715,1 @@\n-                        cob.invokeinterface(CD_InvocationHandler, \"invoke\", MTD_Object_Object_Method_ObjectArray);\n+                        cob.invokeinterface(pg.invoke);\n@@ -715,1 +731,1 @@\n-                               .new_(CD_UndeclaredThrowableException)\n+                               .new_(pg.ute)\n@@ -718,1 +734,1 @@\n-                               .invokespecial(CD_UndeclaredThrowableException, INIT_NAME, MTD_void_Throwable)\n+                               .invokespecial(pg.uteInit)\n@@ -721,2 +737,2 @@\n-                                       StackMapFrameInfo.of(c1, List.of(), throwableStack),\n-                                       StackMapFrameInfo.of(c2, List.of(), throwableStack))));\n+                                       StackMapFrameInfo.of(c1, List.of(), pg.throwableStack),\n+                                       StackMapFrameInfo.of(c2, List.of(), pg.throwableStack))));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":45,"deletions":29,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+import java.lang.classfile.BufWriter;\n+import java.lang.classfile.ClassReader;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.MethodModel;\n+import java.lang.classfile.attribute.StackMapFrameInfo;\n+import java.lang.classfile.attribute.StackMapFrameInfo.*;\n+import java.lang.classfile.constantpool.ClassEntry;\n@@ -32,0 +39,1 @@\n+import java.util.Objects;\n@@ -33,6 +41,0 @@\n-import java.lang.classfile.BufWriter;\n-\n-import java.lang.classfile.constantpool.ClassEntry;\n-import java.lang.classfile.attribute.StackMapFrameInfo;\n-import java.lang.classfile.attribute.StackMapFrameInfo.*;\n-import java.lang.classfile.ClassReader;\n@@ -41,2 +43,0 @@\n-import java.lang.classfile.Label;\n-import java.lang.classfile.MethodModel;\n@@ -246,0 +246,14 @@\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o instanceof ObjectVerificationTypeInfoImpl that) {\n+                return Objects.equals(className, that.className);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(className);\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"}]}