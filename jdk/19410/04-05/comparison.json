{"files":[{"patch":"@@ -50,0 +50,1 @@\n+import java.lang.constant.ConstantDescs;\n@@ -51,0 +52,3 @@\n+import java.lang.constant.DirectMethodHandleDesc;\n+import java.lang.constant.DynamicConstantDesc;\n+import java.lang.invoke.MethodType;\n@@ -62,1 +66,0 @@\n-            CD_Class_array = ReferenceClassDescImpl.ofValidated(\"[Ljava\/lang\/Class;\"),\n@@ -80,1 +83,0 @@\n-            MTD_Method_String_ClassArray = MethodTypeDescImpl.ofValidated(CD_Method, new ClassDesc[]{CD_String, CD_Class_array}),\n@@ -109,3 +111,3 @@\n-            HASH_CODE_METHOD = new ProxyMethod(Object.class.getMethod(\"hashCode\"), \"m0\");\n-            EQUALS_METHOD = new ProxyMethod(Object.class.getMethod(\"equals\", Object.class), \"m1\");\n-            TO_STRING_METHOD = new ProxyMethod(Object.class.getMethod(\"toString\"), \"m2\");\n+            HASH_CODE_METHOD = new ProxyMethod(Object.class.getMethod(\"hashCode\"));\n+            EQUALS_METHOD = new ProxyMethod(Object.class.getMethod(\"equals\", Object.class));\n+            TO_STRING_METHOD = new ProxyMethod(Object.class.getMethod(\"toString\"));\n@@ -127,1 +129,2 @@\n-    private final MethodRefEntry getMethod, uteInit;\n+    private final MethodRefEntry uteInit;\n+    private final DirectMethodHandleDesc bsm;\n@@ -152,6 +155,0 @@\n-    \/**\n-     * Ordinal of next ProxyMethod object added to proxyMethods.\n-     * Indexes are reserved for hashcode(0), equals(1), toString(2).\n-     *\/\n-    private int proxyMethodCount = 3;\n-\n@@ -178,1 +175,0 @@\n-        this.getMethod = cp.methodRefEntry(clazz, cp.nameAndTypeEntry(\"getMethod\", MTD_Method_String_ClassArray));\n@@ -185,0 +181,1 @@\n+        this.bsm = ConstantDescs.ofConstantBootstrap(classEntry.asSymbol(), \"$getMethod\", CD_Method, CD_Class, CD_String, CD_MethodType);\n@@ -482,3 +479,0 @@\n-                    \/\/ add static field for the Method object\n-                    clb.withField(pm.methodFieldName, CD_Method, ACC_PRIVATE | ACC_STATIC | ACC_FINAL);\n-\n@@ -490,1 +484,1 @@\n-            generateStaticInitializer(clb);\n+            generateBootstrapMethod(clb);\n@@ -533,1 +527,1 @@\n-                exceptionTypes, fromClass, \"m\" + proxyMethodCount++));\n+                exceptionTypes, fromClass));\n@@ -562,9 +556,8 @@\n-    private void generateStaticInitializer(ClassBuilder clb) {\n-        clb.withMethodBody(CLASS_INIT_NAME, MTD_void, ACC_STATIC, cob -> {\n-            Label ts = cob.newBoundLabel();\n-            for (List<ProxyMethod> sigmethods : proxyMethods.values()) {\n-                for (ProxyMethod pm : sigmethods) {\n-                    pm.codeFieldInitialization(cob, this);\n-                }\n-            }\n-            cob.return_();\n+    private void generateBootstrapMethod(ClassBuilder clb) {\n+        clb.withMethodBody(bsm.methodName(), bsm.invocationType(), ClassFile.ACC_PRIVATE | ClassFile.ACC_STATIC, cob -> {\n+            cob.aload(3) \/\/interface Class\n+               .aload(4) \/\/interface method name String\n+               .aload(5) \/\/interface MethodType\n+               .invokevirtual(CD_MethodType, \"parameterArray\", MethodTypeDesc.of(ConstantDescs.CD_Class.arrayType()))\n+               .invokevirtual(ConstantDescs.CD_Class, \"getMethod\", MethodTypeDesc.of(CD_Method, ConstantDescs.CD_String, ConstantDescs.CD_Class.arrayType()))\n+               .areturn();\n@@ -573,1 +566,1 @@\n-            cob.exceptionCatch(ts, failLabel, failLabel, CD_NoSuchMethodException)\n+            cob.exceptionCatch(cob.startLabel(), failLabel, failLabel, CD_NoSuchMethodException)\n@@ -634,1 +627,0 @@\n-        private final String methodFieldName;\n@@ -639,1 +631,1 @@\n-                            Class<?> fromClass, String methodFieldName) {\n+                            Class<?> fromClass) {\n@@ -646,1 +638,0 @@\n-            this.methodFieldName = methodFieldName;\n@@ -655,1 +646,1 @@\n-        private ProxyMethod(Method method, String methodFieldName) {\n+        private ProxyMethod(Method method) {\n@@ -658,1 +649,1 @@\n-                 method.getSharedExceptionTypes(), method.getDeclaringClass(), methodFieldName);\n+                 method.getSharedExceptionTypes(), method.getDeclaringClass());\n@@ -677,1 +668,1 @@\n-                        cob.aload(cob.receiverSlot())\n+                        cob.aload(0)\n@@ -679,3 +670,5 @@\n-                           .aload(cob.receiverSlot())\n-                           .getstatic(cp.fieldRefEntry(pg.classEntry, cp.nameAndTypeEntry(methodFieldName, CD_Method)));\n-\n+                           .aload(0)\n+                           .ldc(DynamicConstantDesc.of(pg.bsm,\n+                                toClassDesc(fromClass),\n+                                method.getName(),\n+                                MethodType.methodType(method.getReturnType(), method.getParameterTypes()).describeConstable().get()));\n@@ -758,24 +751,0 @@\n-        \/**\n-         * Generate code for initializing the static field that stores\n-         * the Method object for this proxy method. A class loader is\n-         * anticipated at local variable index 0.\n-         *\/\n-        private void codeFieldInitialization(CodeBuilder cob, ProxyGenerator pg) {\n-            var cp = cob.constantPool();\n-            cob.ldc(toClassDesc(fromClass))\n-               .ldc(method.getName())\n-               .loadConstant(parameterTypes.length)\n-               .anewarray(pg.clazz);\n-\n-            \/\/ Construct an array with the parameter types mapping primitives to Wrapper types\n-            for (int i = 0; i < parameterTypes.length; i++) {\n-                cob.dup()\n-                   .loadConstant(i)\n-                   .ldc(toClassDesc(parameterTypes[i]))\n-                   .aastore();\n-            }\n-            \/\/ lookup the method\n-            cob.invokevirtual(pg.getMethod)\n-               .putstatic(cp.fieldRefEntry(pg.classEntry, cp.nameAndTypeEntry(methodFieldName, CD_Method)));\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":30,"deletions":61,"binary":false,"changes":91,"status":"modified"}]}