{"files":[{"patch":"@@ -63,2 +63,0 @@\n-            CD_ClassLoader = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/ClassLoader;\"),\n-            CD_ClassNotFoundException = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/ClassNotFoundException;\"),\n@@ -68,1 +66,0 @@\n-            CD_NoClassDefFoundError = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/NoClassDefFoundError;\"),\n@@ -81,2 +78,0 @@\n-            MTD_Class_String_boolean_ClassLoader = MethodTypeDescImpl.ofValidated(CD_Class, new ClassDesc[]{CD_String, CD_boolean, CD_ClassLoader}),\n-            MTD_ClassLoader = MethodTypeDescImpl.ofValidated(CD_ClassLoader, ConstantUtils.EMPTY_CLASSDESC),\n@@ -132,1 +127,1 @@\n-    private final MethodRefEntry forName, getMethod, uteInit;\n+    private final MethodRefEntry getMethod, uteInit;\n@@ -183,1 +178,0 @@\n-        this.forName = cp.methodRefEntry(clazz, cp.nameAndTypeEntry(\"forName\", MTD_Class_String_boolean_ClassLoader));\n@@ -570,5 +564,0 @@\n-            \/\/ Put ClassLoader at local variable index 0, used by\n-            \/\/ Class.forName(String, boolean, ClassLoader) calls\n-            cob.ldc(classEntry)\n-               .invokevirtual(CD_Class, \"getClassLoader\", MTD_ClassLoader)\n-               .astore(0);\n@@ -582,1 +571,1 @@\n-            Label c1 = cob.newBoundLabel();\n+            Label failLabel = cob.newBoundLabel();\n@@ -584,3 +573,1 @@\n-            ClassEntry ncdfe = cp.classEntry(CD_NoClassDefFoundError);\n-            MethodRefEntry tgm = cp.methodRefEntry(CD_Throwable, \"getMessage\", MTD_String);\n-            cob.exceptionCatch(ts, c1, c1, CD_NoSuchMethodException)\n+            cob.exceptionCatch(ts, failLabel, failLabel, CD_NoSuchMethodException)\n@@ -590,1 +577,1 @@\n-               .invokevirtual(tgm)\n+               .invokevirtual(cp.methodRefEntry(CD_Throwable, \"getMessage\", MTD_String))\n@@ -592,8 +579,0 @@\n-               .athrow();\n-            Label c2 = cob.newBoundLabel();\n-            cob.exceptionCatch(ts, c1, c2, CD_ClassNotFoundException)\n-               .new_(ncdfe)\n-               .dup_x1()\n-               .swap()\n-               .invokevirtual(tgm)\n-               .invokespecial(cp.methodRefEntry(ncdfe, exInit))\n@@ -602,2 +581,1 @@\n-                      StackMapFrameInfo.of(c1, List.of(), throwableStack),\n-                      StackMapFrameInfo.of(c2, List.of(), throwableStack))));\n+                       StackMapFrameInfo.of(failLabel, List.of(), throwableStack))));\n@@ -787,3 +765,2 @@\n-            codeClassForName(cob, fromClass, pg);\n-\n-            cob.ldc(method.getName())\n+            cob.ldc(toClassDesc(fromClass))\n+               .ldc(method.getName())\n@@ -796,8 +773,3 @@\n-                   .loadConstant(i);\n-                if (parameterTypes[i].isPrimitive()) {\n-                    PrimitiveTypeInfo prim = PrimitiveTypeInfo.get(parameterTypes[i]);\n-                    cob.getstatic(prim.typeFieldRef(cob.constantPool()));\n-                } else {\n-                    codeClassForName(cob, parameterTypes[i], pg);\n-                }\n-                cob.aastore();\n+                   .loadConstant(i)\n+                   .ldc(toClassDesc(parameterTypes[i]))\n+                   .aastore();\n@@ -810,18 +782,0 @@\n-        \/*\n-         * =============== Code Generation Utility Methods ===============\n-         *\/\n-\n-        \/**\n-         * Generate code to invoke the Class.forName with the name of the given\n-         * class to get its Class object at runtime.  The code is written to\n-         * the supplied stream.  Note that the code generated by this method\n-         * may cause the checked ClassNotFoundException to be thrown. A class\n-         * loader is anticipated at local variable index 0.\n-         *\/\n-        private void codeClassForName(CodeBuilder cob, Class<?> cl, ProxyGenerator pg) {\n-            cob.ldc(cl.getName())\n-               .iconst_0() \/\/ false\n-               .aload(0)\/\/ classLoader\n-               .invokestatic(pg.forName);\n-        }\n-\n@@ -894,4 +848,0 @@\n-\n-        public FieldRefEntry typeFieldRef(ConstantPoolBuilder cp) {\n-            return cp.fieldRefEntry(wrapperClass, \"TYPE\", CD_Class);\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":10,"deletions":60,"binary":false,"changes":70,"status":"modified"}]}