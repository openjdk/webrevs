{"files":[{"patch":"@@ -380,11 +380,20 @@\n-void DynamicArchive::prepare_for_dump_at_exit() {\n-  EXCEPTION_MARK;\n-  ResourceMark rm(THREAD);\n-  MetaspaceShared::link_shared_classes(false\/*not from jcmd*\/, THREAD);\n-  if (HAS_PENDING_EXCEPTION) {\n-    log_error(cds)(\"Dynamic dump has failed\");\n-    log_error(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(),\n-                   java_lang_String::as_utf8_string(java_lang_Throwable::message(PENDING_EXCEPTION)));\n-    \/\/ We cannot continue to dump the archive anymore.\n-    DynamicDumpSharedSpaces = false;\n-    CLEAR_PENDING_EXCEPTION;\n+void DynamicArchive::dump_at_exit(JavaThread* current, const char* archive_name) {\n+  ExceptionMark em(current);\n+  ResourceMark rm(current);\n+  HandleMark hm(current);\n+\n+  if (!(DynamicDumpSharedSpaces && archive_name != nullptr)) {\n+    return;\n+  }\n+\n+  log_info(cds,dynamic)(\"Preparing for dynamic dump at exit in thread %s\", current->name());\n+\n+  MetaspaceShared::link_shared_classes(false\/*not from jcmd*\/, current);\n+  if (!current->has_pending_exception()) {\n+    \/\/ copy shared path table to saved.\n+    FileMapInfo::clone_shared_path_table(current);\n+    if (!current->has_pending_exception()) {\n+      VM_PopulateDynamicDumpSharedSpace op(archive_name);\n+      VMThread::execute(&op);\n+      return;\n+    }\n@@ -392,0 +401,8 @@\n+\n+  \/\/ One of the prepatory steps failed\n+  oop ex = current->pending_exception();\n+  log_error(cds)(\"Dynamic dump has failed\");\n+  log_error(cds)(\"%s: %s\", ex->klass()->external_name(),\n+                 java_lang_String::as_utf8_string(java_lang_Throwable::message(ex)));\n+  current->clear_pending_exception();\n+  DynamicDumpSharedSpaces = false;  \/\/ Just for good measure\n@@ -400,4 +417,0 @@\n-  dump(archive_name, THREAD);\n-}\n-\n-void DynamicArchive::dump(const char* archive_name, TRAPS) {\n@@ -406,1 +419,0 @@\n-\n@@ -411,4 +423,0 @@\n-bool DynamicArchive::should_dump_at_vm_exit() {\n-  return DynamicDumpSharedSpaces && (ArchiveClassesAtExit != nullptr);\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":28,"deletions":20,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -62,2 +62,0 @@\n-  static bool should_dump_at_vm_exit();\n-  static void prepare_for_dump_at_exit();\n@@ -65,1 +63,1 @@\n-  static void dump(const char* archive_name, TRAPS);\n+  static void dump_at_exit(JavaThread* current, const char* archive_name);\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -429,6 +429,0 @@\n-#if INCLUDE_CDS\n-  \/\/ Link all classes for dynamic CDS dumping before vm exit.\n-  if (DynamicArchive::should_dump_at_vm_exit()) {\n-    DynamicArchive::prepare_for_dump_at_exit();\n-  }\n-#endif\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -442,0 +442,8 @@\n+#if INCLUDE_CDS\n+  \/\/ Dynamic CDS dumping must happen whilst we can still reliably\n+  \/\/ run Java code.\n+  DynamicArchive::dump_at_exit(thread, ArchiveClassesAtExit);\n+  assert(!thread->has_pending_exception(), \"must be\");\n+#endif\n+\n+\n@@ -517,15 +525,0 @@\n-#if INCLUDE_CDS\n-  if (DynamicArchive::should_dump_at_vm_exit()) {\n-    assert(ArchiveClassesAtExit != nullptr, \"Must be already set\");\n-    ExceptionMark em(thread);\n-    DynamicArchive::dump(ArchiveClassesAtExit, thread);\n-    if (thread->has_pending_exception()) {\n-      ResourceMark rm(thread);\n-      oop pending_exception = thread->pending_exception();\n-      log_error(cds)(\"ArchiveClassesAtExit has failed %s: %s\", pending_exception->klass()->external_name(),\n-                     java_lang_String::as_utf8_string(java_lang_Throwable::message(pending_exception)));\n-      thread->clear_pending_exception();\n-    }\n-  }\n-#endif\n-\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2026,3 +2026,1 @@\n-  \/\/ We could get here with a pending exception, if so clear it now or\n-  \/\/ it will cause MetaspaceShared::link_shared_classes to\n-  \/\/ fail for dynamic dump.\n+  \/\/ We could get here with a pending exception, if so clear it now.\n@@ -2033,9 +2031,0 @@\n-#if INCLUDE_CDS\n-  \/\/ Link all classes for dynamic CDS dumping before vm exit.\n-  \/\/ Same operation is being done in JVM_BeforeHalt for handling the\n-  \/\/ case where the application calls System.exit().\n-  if (DynamicArchive::should_dump_at_vm_exit()) {\n-    DynamicArchive::prepare_for_dump_at_exit();\n-  }\n-#endif\n-\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8304147\n+ * @summary Test the exit race for dynamic dumping at exit\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n+ * @build ExitRace jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar exitRace.jar ExitRace ExitRace$1 ExitRace$1$1\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. ExitRaceTest\n+ *\/\n+\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class ExitRaceTest extends DynamicArchiveTestBase {\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(ExitRaceTest::test);\n+    }\n+\n+    static void test() throws Exception {\n+        String topArchiveName = getNewArchiveName();\n+        String appJar = ClassFileInstaller.getJarPath(\"exitRace.jar\");\n+        String mainClass = \"ExitRace\";\n+\n+        dump(topArchiveName,\n+             \"-Xlog:cds+dynamic=debug\",\n+             \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                                output.shouldHaveExitValue(0)\n+                                      .shouldContain(\"Preparing for dynamic dump\")\n+                                      .reportDiagnosticSummary();\n+                              });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/ExitRaceTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ Try to trigger concurrent dynamic-dump-at-exit processing by creating a race\n+\/\/ between normal VM termination by the last non-daemon thread exiting, and a\n+\/\/ call to Runtime.halt().\n+\n+public class ExitRace {\n+\n+    static volatile int terminationPhase = 0;\n+\n+    public static void main(String [] args) {\n+\n+        \/\/ Need to spawn a new non-daemon thread so the main thread will\n+        \/\/ have time to become the DestroyJavaVM thread.\n+        Thread runner = new Thread(\"Runner\") {\n+                public void run() {\n+                    \/\/ This thread will be the one to trigger normal VM termination\n+                    \/\/ when it exits. We first create a daemon thread to call\n+                    \/\/ Runtime.halt() and then wait for it to tell us to exit.\n+\n+                    Thread daemon = new Thread(\"Daemon\") {\n+                            public void run() {\n+                                \/\/ Let main thread go\n+                                terminationPhase = 1;\n+                                \/\/ Spin until main thread is active again\n+                                while (terminationPhase == 1)\n+                                    ;\n+                                Runtime.getRuntime().halt(0); \/\/ Normal exit code\n+                            }\n+                        };\n+                    daemon.setDaemon(true);\n+                    daemon.start();\n+\n+                    \/\/ Wait until daemon is ready\n+                    while (terminationPhase == 0) {\n+                        try {\n+                            Thread.sleep(10);\n+                        } catch (InterruptedException cantHappen) {\n+                        }\n+                    }\n+\n+                    \/\/ Release daemon thread\n+                    terminationPhase++;\n+                    \/\/ Normal exit\n+                }\n+            };\n+        runner.start();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/ExitRace.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}