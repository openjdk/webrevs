{"files":[{"patch":"@@ -322,2 +322,1 @@\n-        java.desktop,\n-        java.security.jgss;\n+        java.desktop;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -179,13 +179,0 @@\n-        if (krb5Principal.isRealmDeduced() && !Realm.AUTODEDUCEREALM) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                try {\n-                    sm.checkPermission(new ServicePermission(\n-                            \"@\" + krb5Principal.getRealmAsString(), \"-\"));\n-                } catch (SecurityException se) {\n-                    \/\/ Swallow the actual exception to hide info\n-                    throw new SecurityException(\"Cannot read realm info\");\n-                }\n-            }\n-        }\n","filename":"src\/java.security.jgss\/share\/classes\/javax\/security\/auth\/kerberos\/KerberosPrincipal.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.security.AccessControlException;\n@@ -213,14 +212,1 @@\n-        try {\n-            return sun.security.krb5.internal.ktab.KeyTab.getInstance(file);\n-        } catch (@SuppressWarnings(\"removal\") AccessControlException ace) {\n-            if (file != null) {\n-                \/\/ It's OK to show the name if caller specified it\n-                throw ace;\n-            } else {\n-                @SuppressWarnings(\"removal\")\n-                AccessControlException ace2 = new AccessControlException(\n-                        \"Access to default keytab denied (modified exception)\");\n-                ace2.setStackTrace(ace.getStackTrace());\n-                throw ace2;\n-            }\n-        }\n+        return sun.security.krb5.internal.ktab.KeyTab.getInstance(file);\n","filename":"src\/java.security.jgss\/share\/classes\/javax\/security\/auth\/kerberos\/KeyTab.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -77,2 +76,1 @@\n-            String pref = GetPropertyAction\n-                    .privilegedGetProperty(\"http.auth.preference\", \"spnego\");\n+            String pref = System.getProperty(\"http.auth.preference\", \"spnego\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/net\/www\/protocol\/http\/spnego\/NegotiatorImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import sun.security.action.GetBooleanAction;\n@@ -40,2 +39,2 @@\n-    private static final Boolean USE_NATIVE = GetBooleanAction\n-            .privilegedGetProperty(\"sun.security.jgss.native\");\n+    private static final Boolean USE_NATIVE =\n+            Boolean.getBoolean(\"sun.security.jgss.native\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/GSSManagerImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -42,3 +41,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.PrivilegedActionException;\n@@ -70,2 +66,2 @@\n-    static final Debug DEBUG = Debug.of(\"jgss\", GetPropertyAction\n-            .privilegedGetProperty(\"sun.security.jgss.debug\"));\n+    static final Debug DEBUG = Debug.of(\"jgss\",\n+            System.getProperty(\"sun.security.jgss.debug\"));\n@@ -271,2 +267,2 @@\n-        String propValue = GetPropertyAction\n-                .privilegedGetProperty(\"javax.security.auth.useSubjectCredsOnly\");\n+        String propValue =\n+            System.getProperty(\"javax.security.auth.useSubjectCredsOnly\");\n@@ -293,1 +289,1 @@\n-         * Don't use GetBooleanAction because the default value in the JRE\n+         * Don't use Boolean.getBoolean() because the default value in the JRE\n@@ -296,2 +292,2 @@\n-        String propValue = GetPropertyAction\n-                .privilegedGetProperty(\"sun.security.spnego.msinterop\", \"true\");\n+        String propValue =\n+                System.getProperty(\"sun.security.spnego.msinterop\", \"true\");\n@@ -323,37 +319,24 @@\n-        try {\n-            @SuppressWarnings(\"removal\")\n-            Vector<T> creds =\n-                AccessController.doPrivilegedWithCombiner\n-                ((PrivilegedExceptionAction<Vector<T>>) () -> {\n-                    Subject currSubj = Subject.current();\n-                    Vector<T> result = null;\n-                    if (currSubj != null) {\n-                        result = new Vector<>();\n-                        Iterator<GSSCredentialImpl> iterator =\n-                            currSubj.getPrivateCredentials\n-                            (GSSCredentialImpl.class).iterator();\n-                        while (iterator.hasNext()) {\n-                            GSSCredentialImpl cred = iterator.next();\n-                            if (DEBUG != null) {\n-                                debug(\"...Found cred\" + cred);\n-                            }\n-                            try {\n-                                GSSCredentialSpi ce =\n-                                    cred.getElement(mech, initiate);\n-                                if (DEBUG != null) {\n-                                    debug(\"......Found element: \" + ce);\n-                                }\n-                                if (ce.getClass().equals(credCls) &&\n-                                    (name == null ||\n-                                     name.equals((Object) ce.getName()))) {\n-                                    result.add(credCls.cast(ce));\n-                                } else {\n-                                    if (DEBUG != null) {\n-                                        debug(\"......Discard element\");\n-                                    }\n-                                }\n-                            } catch (GSSException ge) {\n-                                if (DEBUG != null) {\n-                                    debug(\"...Discard cred (\" + ge + \")\");\n-                                }\n-                            }\n+        Vector<T> creds = null;\n+        Subject currSubj = Subject.current();\n+        if (currSubj != null) {\n+            creds = new Vector<>();\n+            Iterator<GSSCredentialImpl> iterator =\n+                currSubj.getPrivateCredentials\n+                (GSSCredentialImpl.class).iterator();\n+            while (iterator.hasNext()) {\n+                GSSCredentialImpl cred = iterator.next();\n+                if (DEBUG != null) {\n+                    debug(\"...Found cred\" + cred);\n+                }\n+                try {\n+                    GSSCredentialSpi ce = cred.getElement(mech, initiate);\n+                    if (DEBUG != null) {\n+                        debug(\"......Found element: \" + ce);\n+                    }\n+                    if (ce.getClass().equals(credCls) &&\n+                        (name == null ||\n+                         name.equals((Object) ce.getName()))) {\n+                        creds.add(credCls.cast(ce));\n+                    } else {\n+                        if (DEBUG != null) {\n+                            debug(\"......Discard element\");\n@@ -361,2 +344,0 @@\n-                    } else if (DEBUG != null) {\n-                        debug(\"No Subject\");\n@@ -364,7 +345,5 @@\n-                    return result;\n-                });\n-            return creds;\n-        } catch (PrivilegedActionException pae) {\n-            if (DEBUG != null) {\n-                debug(\"Unexpected exception when searching Subject:\");\n-                pae.printStackTrace();\n+                } catch (GSSException ge) {\n+                    if (DEBUG != null) {\n+                        debug(\"...Discard cred (\" + ge + \")\");\n+                    }\n+                }\n@@ -372,1 +351,2 @@\n-            return null;\n+        } else if (DEBUG != null) {\n+            debug(\"No Subject\");\n@@ -374,0 +354,1 @@\n+        return creds;\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/GSSUtil.java","additions":39,"deletions":58,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.PrivilegedAction;\n@@ -33,1 +32,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -52,2 +50,1 @@\n-        String prop = GetPropertyAction\n-                .privilegedGetProperty(\"http.use.global.creds\");\n+        String prop = System.getProperty(\"http.use.global.creds\");\n@@ -65,1 +62,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -75,2 +71,1 @@\n-        config = java.security.AccessController.doPrivileged\n-                ((PrivilegedAction<Configuration>) Configuration::getConfiguration);\n+        config = Configuration.getConfiguration();\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/LoginConfigImpl.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -105,2 +104,1 @@\n-        String defaultOidStr = GetPropertyAction\n-                .privilegedGetProperty(\"sun.security.jgss.mechanism\");\n+        String defaultOidStr = System.getProperty(\"sun.security.jgss.mechanism\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/ProviderList.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -103,1 +101,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -109,9 +106,6 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            putService(new ProviderService(p, \"GssApiMechanism\",\n-                       \"1.2.840.113554.1.2.2\",\n-                       \"sun.security.jgss.krb5.Krb5MechFactory\"));\n-            putService(new ProviderService(p, \"GssApiMechanism\",\n-                       \"1.3.6.1.5.5.2\",\n-                       \"sun.security.jgss.spnego.SpNegoMechFactory\"));\n-            return null;\n-        });\n+        putService(new ProviderService(p, \"GssApiMechanism\",\n+                   \"1.2.840.113554.1.2.2\",\n+                   \"sun.security.jgss.krb5.Krb5MechFactory\"));\n+        putService(new ProviderService(p, \"GssApiMechanism\",\n+                   \"1.3.6.1.5.5.2\",\n+                   \"sun.security.jgss.spnego.SpNegoMechFactory\"));\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/SunProvider.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import sun.security.action.GetBooleanAction;\n@@ -47,2 +46,2 @@\n-        boolean useSubkey = GetBooleanAction\n-                .privilegedGetProperty(\"sun.security.krb5.acceptor.subkey\");\n+        boolean useSubkey = Boolean.getBoolean(\n+            \"sun.security.krb5.acceptor.subkey\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/AcceptSecContextToken.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -56,1 +55,1 @@\n-        String s = GetPropertyAction.privilegedGetProperty(propName, \"initiator\");\n+        String s = System.getProperty(propName, \"initiator\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/InitSecContextToken.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import javax.security.auth.kerberos.DelegationPermission;\n@@ -174,8 +173,0 @@\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null) {\n-                    DelegationPermission perm =\n-                        new DelegationPermission(sb.toString());\n-                    sm.checkPermission(perm);\n-                }\n-\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/InitialToken.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,3 +32,0 @@\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.AccessController;\n@@ -36,0 +33,1 @@\n+import javax.security.auth.login.LoginException;\n@@ -60,1 +58,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -67,1 +64,1 @@\n-        ServiceCreds creds;\n+        ServiceCreds creds = null;\n@@ -69,8 +66,4 @@\n-            creds = AccessController.doPrivilegedWithCombiner(\n-                        new PrivilegedExceptionAction<ServiceCreds>() {\n-                public ServiceCreds run() throws Exception {\n-                    return Krb5Util.getServiceCreds(\n-                        caller == GSSCaller.CALLER_UNKNOWN ? GSSCaller.CALLER_ACCEPT: caller,\n-                        serverPrinc);\n-                }});\n-        } catch (PrivilegedActionException e) {\n+            creds = Krb5Util.getServiceCreds(\n+                caller == GSSCaller.CALLER_UNKNOWN ? GSSCaller.CALLER_ACCEPT: caller,\n+                serverPrinc);\n+        } catch (LoginException e) {\n@@ -80,1 +73,1 @@\n-            ge.initCause(e.getException());\n+            ge.initCause(e);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5AcceptCredential.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import javax.security.auth.kerberos.ServicePermission;\n@@ -634,2 +633,0 @@\n-                    checkPermission(peerName.getKrb5PrincipalName().getName(),\n-                                    \"initiate\");\n@@ -644,27 +641,15 @@\n-                        try {\n-                           \/\/ get service ticket from caller's subject\n-                           @SuppressWarnings(\"removal\")\n-                           var tmp = AccessController.doPrivilegedWithCombiner(\n-                                new PrivilegedExceptionAction<KerberosTicket>() {\n-                                public KerberosTicket run() throws Exception {\n-                                    \/\/ XXX to be cleaned\n-                                    \/\/ highly consider just calling:\n-                                    \/\/ Subject.getSubject\n-                                    \/\/ SubjectComber.find\n-                                    \/\/ instead of Krb5Util.getServiceTicket\n-                                    return Krb5Util.getServiceTicket(\n-                                        GSSCaller.CALLER_UNKNOWN,\n-                                        \/\/ since it's useSubjectCredsOnly here,\n-                                        \/\/ don't worry about the null\n-                                        proxyCreds == null ?\n-                                            myName.getKrb5PrincipalName().getName():\n-                                            proxyCreds.getName().getKrb5PrincipalName().getName(),\n-                                        peerName.getKrb5PrincipalName().getName());\n-                                }});\n-                            kerbTicket = tmp;\n-                        } catch (PrivilegedActionException e) {\n-                            if (DEBUG != null) {\n-                                DEBUG.println(\"Attempt to obtain service\"\n-                                        + \" ticket from the subject failed!\");\n-                            }\n-                        }\n+                        \/\/ get service ticket from caller's subject\n+                        \/\/ XXX to be cleaned\n+                        \/\/ highly consider just calling:\n+                        \/\/ Subject.getSubject\n+                        \/\/ SubjectComber.find\n+                        \/\/ instead of Krb5Util.getServiceTicket\n+                        kerbTicket = Krb5Util.getServiceTicket(\n+                            GSSCaller.CALLER_UNKNOWN,\n+                            \/\/ since it's useSubjectCredsOnly here,\n+                            \/\/ don't worry about the null\n+                            proxyCreds == null ?\n+                                myName.getKrb5PrincipalName().getName():\n+                                proxyCreds.getName().getKrb5PrincipalName().getName(),\n+                            peerName.getKrb5PrincipalName().getName());\n+\n@@ -704,4 +689,1 @@\n-                            @SuppressWarnings(\"removal\")\n-                            final Subject subject =\n-                                AccessController.doPrivilegedWithCombiner(\n-                                        (PrivilegedAction<Subject>) Subject::current);\n+                            Subject subject = Subject.current();\n@@ -717,1 +699,1 @@\n-                                final KerberosTicket kt =\n+                                KerberosTicket kt =\n@@ -719,6 +701,1 @@\n-                                @SuppressWarnings(\"removal\")\n-                                var dummy = AccessController.doPrivileged (\n-                                        (PrivilegedAction<Void>) () -> {\n-                                          subject.getPrivateCredentials().add(kt);\n-                                          return null;\n-                                        });\n+                                subject.getPrivateCredentials().add(kt);\n@@ -819,5 +796,0 @@\n-                \/\/ If there is already a bound name, check now\n-                if (myName != null) {\n-                    Krb5MechFactory.checkAcceptCredPermission(myName, myName);\n-                }\n-\n@@ -833,1 +805,0 @@\n-                    Krb5MechFactory.checkAcceptCredPermission(myName, myName);\n@@ -1325,10 +1296,0 @@\n-    private void checkPermission(String principal, String action) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            ServicePermission perm =\n-                new ServicePermission(principal, action);\n-            sm.checkPermission(perm);\n-        }\n-    }\n-\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5Context.java","additions":18,"deletions":57,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -40,3 +40,1 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.PrivilegedActionException;\n+import javax.security.auth.login.LoginException;\n@@ -351,1 +349,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -369,12 +366,7 @@\n-            final GSSCaller realCaller = (caller == GSSCaller.CALLER_UNKNOWN)\n-                                   ? GSSCaller.CALLER_INITIATE\n-                                   : caller;\n-            return AccessController.doPrivilegedWithCombiner(\n-                new PrivilegedExceptionAction<KerberosTicket>() {\n-                public KerberosTicket run() throws Exception {\n-                    \/\/ It's OK to use null as serverPrincipal. TGT is almost\n-                    \/\/ the first ticket for a principal and we use list.\n-                    return Krb5Util.getInitialTicket(\n-                        realCaller, clientPrincipal);\n-                        }});\n-        } catch (PrivilegedActionException e) {\n+            GSSCaller realCaller = (caller == GSSCaller.CALLER_UNKNOWN)\n+                             ? GSSCaller.CALLER_INITIATE\n+                             : caller;\n+            \/\/ It's OK to use null as serverPrincipal. TGT is almost\n+            \/\/ the first ticket for a principal and we use list.\n+            return Krb5Util.getInitialTicket(realCaller, clientPrincipal);\n+        } catch (LoginException e) {\n@@ -385,1 +377,1 @@\n-            ge.initCause(e.getException());\n+            ge.initCause(e);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5InitCredential.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import javax.security.auth.kerberos.ServicePermission;\n@@ -36,2 +35,0 @@\n-import static sun.security.krb5.internal.Krb5.DEBUG;\n-\n@@ -74,13 +71,2 @@\n-        Krb5CredElement result = ((creds == null || creds.isEmpty()) ?\n-                                  null : creds.firstElement());\n-\n-        \/\/ Force permission check before returning the cred to caller\n-        if (result != null) {\n-            if (initiate) {\n-                checkInitCredPermission((Krb5NameElement) result.getName());\n-            } else {\n-                checkAcceptCredPermission\n-                    ((Krb5NameElement) result.getName(), name);\n-            }\n-        }\n-        return result;\n+        return ((creds == null || creds.isEmpty()) ?\n+                null : creds.firstElement());\n@@ -129,2 +115,0 @@\n-                checkInitCredPermission\n-                    ((Krb5NameElement) credElement.getName());\n@@ -135,2 +119,0 @@\n-                checkAcceptCredPermission\n-                    ((Krb5NameElement) credElement.getName(), name);\n@@ -144,41 +126,0 @@\n-    public static void checkInitCredPermission(Krb5NameElement name) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            String realm = (name.getKrb5PrincipalName()).getRealmAsString();\n-            String tgsPrincipal = \"krbtgt\/\" + realm + '@' + realm;\n-            ServicePermission perm =\n-                new ServicePermission(tgsPrincipal, \"initiate\");\n-            try {\n-                sm.checkPermission(perm);\n-            } catch (SecurityException e) {\n-                if (DEBUG != null) {\n-                    DEBUG.println(\"Permission to initiate \" +\n-                        \"kerberos init credential\" + e.getMessage());\n-                }\n-                throw e;\n-            }\n-        }\n-    }\n-\n-    public static void checkAcceptCredPermission(Krb5NameElement name,\n-                                           GSSNameSpi originalName) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null && name != null) {\n-            ServicePermission perm = new ServicePermission\n-                (name.getKrb5PrincipalName().getName(), \"accept\");\n-            try {\n-                sm.checkPermission(perm);\n-            } catch (SecurityException e) {\n-                if (originalName == null) {\n-                    \/\/ Don't disclose the name of the principal\n-                    e = new SecurityException(\"No permission to acquire \"\n-                                      + \"Kerberos accept credential\");\n-                    \/\/ Don't call e.initCause() with caught exception\n-                }\n-                throw e;\n-            }\n-        }\n-    }\n-\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5MechFactory.java","additions":2,"deletions":61,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import sun.security.krb5.Realm;\n@@ -34,1 +33,0 @@\n-import javax.security.auth.kerberos.ServicePermission;\n@@ -130,13 +128,0 @@\n-        if (principalName.isRealmDeduced() && !Realm.AUTODEDUCEREALM) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                try {\n-                    sm.checkPermission(new ServicePermission(\n-                            \"@\" + principalName.getRealmAsString(), \"-\"));\n-                } catch (SecurityException se) {\n-                    \/\/ Do not chain the actual exception to hide info\n-                    throw new GSSException(GSSException.FAILURE);\n-                }\n-            }\n-        }\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5NameElement.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-        @SuppressWarnings(\"removal\")\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5Util.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import sun.security.action.GetBooleanAction;\n-import sun.security.action.GetPropertyAction;\n@@ -88,2 +86,2 @@\n-    static final Debug DEBUG = Debug.of(\"spnego\", GetPropertyAction\n-            .privilegedGetProperty(\"sun.security.spnego.debug\"));\n+    static final Debug DEBUG = Debug.of(\"spnego\",\n+            System.getProperty(\"sun.security.spnego.debug\"));\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/spnego\/SpNegoContext.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,4 +31,0 @@\n-import sun.security.jgss.krb5.Krb5MechFactory;\n-import sun.security.jgss.krb5.Krb5InitCredential;\n-import sun.security.jgss.krb5.Krb5AcceptCredential;\n-import sun.security.jgss.krb5.Krb5NameElement;\n@@ -78,19 +74,2 @@\n-        SpNegoCredElement result = ((creds == null || creds.isEmpty()) ?\n-                                    null : creds.firstElement());\n-\n-        \/\/ Force permission check before returning the cred to caller\n-        if (result != null) {\n-            GSSCredentialSpi cred = result.getInternalCred();\n-            if (GSSUtil.isKerberosMech(cred.getMechanism())) {\n-                if (initiate) {\n-                    Krb5InitCredential krbCred = (Krb5InitCredential) cred;\n-                    Krb5MechFactory.checkInitCredPermission\n-                        ((Krb5NameElement) krbCred.getName());\n-                } else {\n-                    Krb5AcceptCredential krbCred = (Krb5AcceptCredential) cred;\n-                    Krb5MechFactory.checkAcceptCredPermission\n-                        ((Krb5NameElement) krbCred.getName(), name);\n-                }\n-            }\n-        }\n-        return result;\n+        return ((creds == null || creds.isEmpty()) ?\n+                null : creds.firstElement());\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/spnego\/SpNegoMechFactory.java","additions":3,"deletions":24,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import sun.security.jgss.GSSUtil;\n@@ -48,18 +47,0 @@\n-    \/\/ Perform the necessary ServicePermission check on this cred\n-    @SuppressWarnings(\"removal\")\n-    void doServicePermCheck() throws GSSException {\n-        if (GSSUtil.isKerberosMech(cStub.getMech())) {\n-            if (System.getSecurityManager() != null) {\n-                if (isInitiatorCredential()) {\n-                    String tgsName = Krb5Util.getTGSName(name);\n-                    Krb5Util.checkServicePermission(tgsName, \"initiate\");\n-                }\n-                if (isAcceptorCredential() &&\n-                    name != GSSNameElement.DEF_ACCEPTOR) {\n-                    String krbName = name.getKrbName();\n-                    Krb5Util.checkServicePermission(krbName, \"accept\");\n-                }\n-            }\n-        }\n-    }\n-\n@@ -84,1 +65,0 @@\n-            doServicePermCheck();\n@@ -89,1 +69,0 @@\n-            doServicePermCheck();\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/GSSCredElement.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import javax.security.auth.kerberos.ServicePermission;\n@@ -171,23 +170,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null && !Realm.AUTODEDUCEREALM) {\n-            String krbName = getKrbName();\n-            int atPos = krbName.lastIndexOf('@');\n-            if (atPos != -1) {\n-                String atRealm = krbName.substring(atPos);\n-                \/\/ getNativeNameType() can modify NT_GSS_KRB5_PRINCIPAL to null\n-                if ((nameType == null\n-                            || nameType.equals(GSSUtil.NT_GSS_KRB5_PRINCIPAL))\n-                        && new String(nameBytes).endsWith(atRealm)) {\n-                    \/\/ Created from Kerberos name with realm, no need to check\n-                } else {\n-                    try {\n-                        sm.checkPermission(new ServicePermission(atRealm, \"-\"));\n-                    } catch (SecurityException se) {\n-                        \/\/ Do not chain the actual exception to hide info\n-                        throw new GSSException(GSSException.FAILURE);\n-                    }\n-                }\n-            }\n-        }\n-\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/GSSNameElement.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import javax.security.auth.kerberos.ServicePermission;\n@@ -49,16 +48,0 @@\n-\n-    \/\/ Perform the Service Permission check using the specified\n-    \/\/ <code>target<\/code> and <code>action<\/code>\n-    static void checkServicePermission(String target, String action) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            if (SunNativeProvider.DEBUG) {\n-                SunNativeProvider.debug(\"Checking ServicePermission(\" +\n-                        target + \", \" + action + \")\");\n-            }\n-            ServicePermission perm =\n-                new ServicePermission(target, action);\n-            sm.checkPermission(perm);\n-        }\n-    }\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/Krb5Util.java","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import javax.security.auth.kerberos.DelegationPermission;\n@@ -82,3 +81,0 @@\n-    private boolean skipDelegPermCheck;\n-    private boolean skipServicePermCheck;\n-\n@@ -115,47 +111,0 @@\n-    \/\/ Perform the Service permission check\n-    @SuppressWarnings(\"removal\")\n-    private void doServicePermCheck() throws GSSException {\n-        if (System.getSecurityManager() != null) {\n-            String action = (isInitiator? \"initiate\" : \"accept\");\n-            \/\/ Need to check Service permission for accessing\n-            \/\/ initiator cred for SPNEGO during context establishment\n-            if (GSSUtil.isSpNegoMech(cStub.getMech()) && isInitiator\n-                && !isEstablished) {\n-                if (srcName == null) {\n-                    \/\/ Check by creating default initiator KRB5 cred\n-                    GSSCredElement tempCred =\n-                        new GSSCredElement(null, lifetime,\n-                                           GSSCredential.INITIATE_ONLY,\n-                                           GSSLibStub.getInstance(GSSUtil.GSS_KRB5_MECH_OID));\n-                    tempCred.dispose();\n-                } else {\n-                    String tgsName = Krb5Util.getTGSName(srcName);\n-                    Krb5Util.checkServicePermission(tgsName, action);\n-                }\n-            }\n-            String targetStr = targetName.getKrbName();\n-            Krb5Util.checkServicePermission(targetStr, action);\n-            skipServicePermCheck = true;\n-        }\n-    }\n-\n-    \/\/ Perform the Delegation permission check\n-    private void doDelegPermCheck() throws GSSException {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            String targetStr = targetName.getKrbName();\n-            String tgsStr = Krb5Util.getTGSName(targetName);\n-            String krbPrincPair = \"\\\"\" + targetStr + \"\\\" \\\"\" +\n-                    tgsStr + '\\\"';\n-            if (SunNativeProvider.DEBUG) {\n-                SunNativeProvider.debug(\"Checking DelegationPermission (\" +\n-                        krbPrincPair + \")\");\n-            }\n-            DelegationPermission perm =\n-                new DelegationPermission(krbPrincPair);\n-            sm.checkPermission(perm);\n-            skipDelegPermCheck = true;\n-        }\n-    }\n-\n@@ -213,1 +162,0 @@\n-            doServicePermCheck();\n@@ -233,5 +181,0 @@\n-        \/\/ Defer Service permission check for default acceptor cred\n-        \/\/ to acceptSecContext()\n-        if (GSSUtil.isKerberosMech(cStub.getMech()) && targetName != null) {\n-            doServicePermCheck();\n-        }\n@@ -261,7 +204,0 @@\n-\n-        \/\/ Do Service Permission check when importing SPNEGO context\n-        \/\/ just to be safe\n-        Oid mech = cStub.getMech();\n-        if (GSSUtil.isSpNegoMech(mech) || GSSUtil.isKerberosMech(mech)) {\n-            doServicePermCheck();\n-        }\n@@ -288,6 +224,0 @@\n-            if (!getCredDelegState()) skipDelegPermCheck = true;\n-\n-            if (GSSUtil.isKerberosMech(cStub.getMech()) && !skipDelegPermCheck) {\n-                doDelegPermCheck();\n-            }\n-\n@@ -307,5 +237,0 @@\n-\n-                if (GSSUtil.isKerberosMech(actualMech)) {\n-                    if (!skipServicePermCheck) doServicePermCheck();\n-                    if (!skipDelegPermCheck) doDelegPermCheck();\n-                }\n@@ -358,10 +283,0 @@\n-\n-            \/\/ Only inspect token when the permission check has not\n-            \/\/ been performed\n-            if (GSSUtil.isSpNegoMech(cStub.getMech()) &&\n-                (outToken != null) && !skipServicePermCheck) {\n-                if (GSSUtil.isKerberosMech(getMechFromSpNegoToken\n-                                           (outToken, false))) {\n-                    doServicePermCheck();\n-                }\n-            }\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/NativeGSSContext.java","additions":1,"deletions":86,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,7 +68,2 @@\n-        GSSCredElement result = ((creds == null || creds.isEmpty()) ?\n-                                 null : creds.firstElement());\n-        \/\/ Force permission check before returning the cred to caller\n-        if (result != null) {\n-            result.doServicePermCheck();\n-        }\n-        return result;\n+        return ((creds == null || creds.isEmpty()) ?\n+                null : creds.firstElement());\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/NativeGSSFactory.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -37,2 +35,0 @@\n-import sun.security.action.GetBooleanAction;\n-import sun.security.action.PutAllAction;\n@@ -62,1 +58,1 @@\n-        GetBooleanAction.privilegedGetProperty(\"sun.security.nativegss.debug\");\n+        Boolean.getBoolean(\"sun.security.nativegss.debug\");\n@@ -71,64 +67,60 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n-    private static final HashMap<String, String> MECH_MAP =\n-            AccessController.doPrivileged(\n-                new PrivilegedAction<>() {\n-                    public HashMap<String, String> run() {\n-                        try {\n-                            \/\/ Ensure the InetAddress class is loaded before\n-                            \/\/ loading j2gss. The library will access this class\n-                            \/\/ and a deadlock might happen. See JDK-8210373.\n-                            Class.forName(\"java.net.InetAddress\");\n-                            System.loadLibrary(\"j2gss\");\n-                        } catch (ClassNotFoundException | Error err) {\n-                            if (DEBUG) {\n-                                debug(\"No j2gss library found!\");\n-                                err.printStackTrace();\n-                            }\n-                            return null;\n-                        }\n-                        String[] gssLibs;\n-                        String defaultLib\n-                                = System.getProperty(\"sun.security.jgss.lib\");\n-                        if (defaultLib == null || defaultLib.trim().equals(\"\")) {\n-                            gssLibs = switch (OperatingSystem.current()) {\n-                                case LINUX -> new String[]{\n-                                        \"libgssapi.so\",\n-                                        \"libgssapi_krb5.so\",\n-                                        \"libgssapi_krb5.so.2\",\n-                                };\n-                                case MACOS -> new String[]{\n-                                        \"libgssapi_krb5.dylib\",\n-                                        \"\/usr\/lib\/sasl2\/libgssapiv2.2.so\",\n-                                };\n-                                case WINDOWS -> new String[]{\n-                                        \/\/ Full path needed, DLL is in jre\/bin\n-                                        StaticProperty.javaHome() + \"\\\\bin\\\\sspi_bridge.dll\",\n-                                };\n-                                case AIX -> new String[]{\n-                                        \"\/opt\/freeware\/lib64\/libgssapi_krb5.so\",\n-                                };\n-                                default -> new String[0];\n-                            };\n-                        } else {\n-                            gssLibs = new String[]{ defaultLib };\n-                        }\n-                        for (String libName: gssLibs) {\n-                            if (GSSLibStub.init(libName, DEBUG)) {\n-                                if (DEBUG) {\n-                                    debug(\"Loaded GSS library: \" + libName);\n-                                }\n-                                Oid[] mechs = GSSLibStub.indicateMechs();\n-                                HashMap<String,String> map = new HashMap<>();\n-                                for (int i = 0; i < mechs.length; i++) {\n-                                    if (DEBUG) {\n-                                        debug(\"Native MF for \" + mechs[i]);\n-                                    }\n-                                    map.put(\"GssApiMechanism.\" + mechs[i],\n-                                            MF_CLASS);\n-                                }\n-                                return map;\n-                            }\n-                        }\n-                        return null;\n-                    }\n-                });\n+    private static final HashMap<String, String> MECH_MAP = constructMechMap();\n+\n+    @SuppressWarnings(\"restricted\")\n+    private static HashMap<String, String> constructMechMap() {\n+        try {\n+            \/\/ Ensure the InetAddress class is loaded before\n+            \/\/ loading j2gss. The library will access this class\n+            \/\/ and a deadlock might happen. See JDK-8210373.\n+            Class.forName(\"java.net.InetAddress\");\n+            System.loadLibrary(\"j2gss\");\n+        } catch (ClassNotFoundException | Error err) {\n+            if (DEBUG) {\n+                debug(\"No j2gss library found!\");\n+                err.printStackTrace();\n+            }\n+            return null;\n+        }\n+        String[] gssLibs;\n+        String defaultLib = System.getProperty(\"sun.security.jgss.lib\");\n+        if (defaultLib == null || defaultLib.trim().equals(\"\")) {\n+            gssLibs = switch (OperatingSystem.current()) {\n+                case LINUX -> new String[]{\n+                        \"libgssapi.so\",\n+                        \"libgssapi_krb5.so\",\n+                        \"libgssapi_krb5.so.2\",\n+                };\n+                case MACOS -> new String[]{\n+                        \"libgssapi_krb5.dylib\",\n+                        \"\/usr\/lib\/sasl2\/libgssapiv2.2.so\",\n+                };\n+                case WINDOWS -> new String[]{\n+                        \/\/ Full path needed, DLL is in jre\/bin\n+                        StaticProperty.javaHome() + \"\\\\bin\\\\sspi_bridge.dll\",\n+                };\n+                case AIX -> new String[]{\n+                        \"\/opt\/freeware\/lib64\/libgssapi_krb5.so\",\n+                };\n+                default -> new String[0];\n+            };\n+        } else {\n+            gssLibs = new String[]{ defaultLib };\n+        }\n+        for (String libName: gssLibs) {\n+             if (GSSLibStub.init(libName, DEBUG)) {\n+                 if (DEBUG) {\n+                     debug(\"Loaded GSS library: \" + libName);\n+                 }\n+                 Oid[] mechs = GSSLibStub.indicateMechs();\n+                 HashMap<String,String> map = new HashMap<>();\n+                 for (int i = 0; i < mechs.length; i++) {\n+                     if (DEBUG) {\n+                         debug(\"Native MF for \" + mechs[i]);\n+                     }\n+                     map.put(\"GssApiMechanism.\" + mechs[i], MF_CLASS);\n+                 }\n+                 return map;\n+             }\n+         }\n+         return null;\n+     }\n@@ -139,1 +131,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -145,1 +136,1 @@\n-            AccessController.doPrivileged(new PutAllAction(this, MECH_MAP));\n+            putAll(MECH_MAP);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/SunNativeProvider.java","additions":62,"deletions":71,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.security.PrivilegedAction;\n@@ -41,2 +40,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n@@ -49,1 +46,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -167,1 +163,1 @@\n-        String osVersion = GetPropertyAction.privilegedGetProperty(\"os.version\");\n+        String osVersion = System.getProperty(\"os.version\");\n@@ -191,2 +187,1 @@\n-        String tmp = GetPropertyAction\n-                .privilegedGetProperty(\"java.security.krb5.kdc\");\n+        String tmp = System.getProperty(\"java.security.krb5.kdc\");\n@@ -199,2 +194,1 @@\n-        defaultRealm = GetPropertyAction\n-                .privilegedGetProperty(\"java.security.krb5.realm\");\n+        defaultRealm = System.getProperty(\"java.security.krb5.realm\");\n@@ -669,1 +663,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -680,25 +673,7 @@\n-        try {\n-            Path fullp = AccessController.doPrivileged((PrivilegedAction<Path>)\n-                        () -> Paths.get(fileName).toAbsolutePath(),\n-                    null,\n-                    new PropertyPermission(\"user.dir\", \"read\"));\n-            AccessController.doPrivileged(\n-                    new PrivilegedExceptionAction<Void>() {\n-                        @Override\n-                        public Void run() throws IOException {\n-                            Path path = Paths.get(fileName);\n-                            if (!Files.exists(path)) {\n-                                \/\/ This is OK. There are other ways to get\n-                                \/\/ Kerberos 5 settings\n-                                return null;\n-                            } else {\n-                                return readConfigFileLines(\n-                                        fullp, raw, dupsCheck);\n-                            }\n-                        }\n-                    },\n-                    null,\n-                    \/\/ include\/includedir can go anywhere\n-                    new FilePermission(\"<<ALL FILES>>\", \"read\"));\n-        } catch (java.security.PrivilegedActionException pe) {\n-            throw (IOException)pe.getException();\n+        Path fullp = Paths.get(fileName).toAbsolutePath();\n+        Path path = Paths.get(fileName);\n+        if (!Files.exists(path)) {\n+            \/\/ This is OK. There are other ways to get\n+            \/\/ Kerberos 5 settings\n+        } else {\n+            readConfigFileLines(fullp, raw, dupsCheck);\n@@ -706,0 +681,1 @@\n+\n@@ -865,2 +841,1 @@\n-        String name = GetPropertyAction\n-                .privilegedGetProperty(\"java.security.krb5.conf\");\n+        String name = System.getProperty(\"java.security.krb5.conf\");\n@@ -868,1 +843,1 @@\n-            name = GetPropertyAction.privilegedGetProperty(\"java.home\")\n+            name = System.getProperty(\"java.home\")\n@@ -945,1 +920,1 @@\n-        String userHome = GetPropertyAction.privilegedGetProperty(\"user.home\");\n+        String userHome = System.getProperty(\"user.home\");\n@@ -1188,1 +1163,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1204,10 +1178,3 @@\n-            realm = java.security.AccessController.doPrivileged(\n-                    new java.security.PrivilegedAction<String>() {\n-                @Override\n-                public String run() {\n-                    if (OperatingSystem.isWindows()) {\n-                        return System.getenv(\"USERDNSDOMAIN\");\n-                    }\n-                    return null;\n-                }\n-            });\n+            if (OperatingSystem.isWindows()) {\n+                realm = System.getenv(\"USERDNSDOMAIN\");\n+            }\n@@ -1232,1 +1199,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1251,13 +1217,5 @@\n-            kdcs = java.security.AccessController.doPrivileged(\n-                    new java.security.PrivilegedAction<String>() {\n-                @Override\n-                public String run() {\n-                    if (OperatingSystem.isWindows()) {\n-                        String logonServer = System.getenv(\"LOGONSERVER\");\n-                        if (logonServer != null\n-                                && logonServer.startsWith(\"\\\\\\\\\")) {\n-                            logonServer = logonServer.substring(2);\n-                        }\n-                        return logonServer;\n-                    }\n-                    return null;\n+            if (OperatingSystem.isWindows()) {\n+                String logonServer = System.getenv(\"LOGONSERVER\");\n+                if (logonServer != null\n+                        && logonServer.startsWith(\"\\\\\\\\\")) {\n+                    logonServer = logonServer.substring(2);\n@@ -1265,1 +1223,2 @@\n-            });\n+                kdcs = logonServer;\n+            }\n@@ -1384,1 +1343,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1386,16 +1344,1 @@\n-        return java.security.AccessController.doPrivileged(\n-                                new FileExistsAction(name));\n-    }\n-\n-    static class FileExistsAction\n-        implements java.security.PrivilegedAction<Boolean> {\n-\n-        private String fileName;\n-\n-        public FileExistsAction(String fileName) {\n-            this.fileName = fileName;\n-        }\n-\n-        public Boolean run() {\n-            return new File(fileName).exists();\n-        }\n+        return new File(name).exists();\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Config.java","additions":25,"deletions":82,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -527,1 +527,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -529,11 +529,5 @@\n-        java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<Void> () {\n-                        public Void run() {\n-                                if (OperatingSystem.isMacOS()) {\n-                                    System.loadLibrary(\"osxkrb5\");\n-                                } else {\n-                                    System.loadLibrary(\"w2k_lsa_auth\");\n-                                }\n-                                return null;\n-                        }\n-                });\n+        if (OperatingSystem.isMacOS()) {\n+            System.loadLibrary(\"osxkrb5\");\n+        } else {\n+            System.loadLibrary(\"w2k_lsa_auth\");\n+        }\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Credentials.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.security.PrivilegedAction;\n@@ -42,3 +41,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.PrivilegedActionException;\n@@ -101,7 +97,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String value = AccessController.doPrivileged(\n-        new PrivilegedAction<String>() {\n-            public String run() {\n-                return Security.getProperty(\"krb5.kdc.bad.policy\");\n-            }\n-        });\n+        String value = Security.getProperty(\"krb5.kdc.bad.policy\");\n@@ -352,5 +342,4 @@\n-        KdcCommunication kdcCommunication =\n-            new KdcCommunication(kdc, port, useTCP, timeout, retries, obuf);\n-        try {\n-            @SuppressWarnings(\"removal\")\n-            byte[] ibuf = AccessController.doPrivileged(kdcCommunication);\n+        byte[] ibuf = null;\n+\n+        for (int i=1; i <= retries; i++) {\n+            String proto = useTCP?\"TCP\":\"UDP\";\n@@ -358,2 +347,6 @@\n-                DEBUG.println(\">>> KrbKdcReq send: #bytes read=\"\n-                        + (ibuf != null ? ibuf.length : 0));\n+                DEBUG.println(\">>> KDCCommunication: kdc=\" + kdc\n+                        + \" \" + proto + \":\"\n+                        +  port +  \", timeout=\"\n+                        + timeout\n+                        + \",Attempt =\" + i\n+                        + \", #bytes=\" + obuf.length);\n@@ -361,40 +354,6 @@\n-            return ibuf;\n-        } catch (PrivilegedActionException e) {\n-            Exception wrappedException = e.getException();\n-            if (wrappedException instanceof IOException) {\n-                throw (IOException) wrappedException;\n-            } else {\n-                throw (KrbException) wrappedException;\n-            }\n-        }\n-    }\n-\n-    private static class KdcCommunication\n-        implements PrivilegedExceptionAction<byte[]> {\n-\n-        private String kdc;\n-        private int port;\n-        private boolean useTCP;\n-        private int timeout;\n-        private int retries;\n-        private byte[] obuf;\n-\n-        public KdcCommunication(String kdc, int port, boolean useTCP,\n-                                int timeout, int retries, byte[] obuf) {\n-            this.kdc = kdc;\n-            this.port = port;\n-            this.useTCP = useTCP;\n-            this.timeout = timeout;\n-            this.retries = retries;\n-            this.obuf = obuf;\n-        }\n-\n-        \/\/ The caller only casts IOException and KrbException so don't\n-        \/\/ add any new ones!\n-\n-        public byte[] run() throws IOException, KrbException {\n-\n-            byte[] ibuf = null;\n-\n-            for (int i=1; i <= retries; i++) {\n-                String proto = useTCP?\"TCP\":\"UDP\";\n+            try (NetClient kdcClient = NetClient.getInstance(\n+                    proto, kdc, port, timeout)) {\n+                kdcClient.send(obuf);\n+                ibuf = kdcClient.receive();\n+                break;\n+            } catch (SocketTimeoutException se) {\n@@ -402,6 +361,2 @@\n-                    DEBUG.println(\">>> KDCCommunication: kdc=\" + kdc\n-                            + \" \" + proto + \":\"\n-                            +  port +  \", timeout=\"\n-                            + timeout\n-                            + \",Attempt =\" + i\n-                            + \", #bytes=\" + obuf.length);\n+                    DEBUG.println (\"SocketTimeOutException with \" +\n+                            \"attempt: \" + i);\n@@ -409,14 +364,3 @@\n-                try (NetClient kdcClient = NetClient.getInstance(\n-                        proto, kdc, port, timeout)) {\n-                    kdcClient.send(obuf);\n-                    ibuf = kdcClient.receive();\n-                    break;\n-                } catch (SocketTimeoutException se) {\n-                    if (DEBUG != null) {\n-                        DEBUG.println (\"SocketTimeOutException with \" +\n-                                \"attempt: \" + i);\n-                    }\n-                    if (i == retries) {\n-                        ibuf = null;\n-                        throw se;\n-                    }\n+                if (i == retries) {\n+                    ibuf = null;\n+                    throw se;\n@@ -425,1 +369,0 @@\n-            return ibuf;\n@@ -427,0 +370,5 @@\n+        if (DEBUG != null) {\n+            DEBUG.println(\">>> KrbKdcReq send: #bytes read=\"\n+                    + (ibuf != null ? ibuf.length : 0));\n+        }\n+        return ibuf;\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KdcComm.java","additions":27,"deletions":79,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -74,1 +71,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -89,12 +85,2 @@\n-            Attributes attrs = null;\n-            try {\n-                \/\/ both connect and accept are needed since DNS is thru UDP\n-                attrs = AccessController.doPrivileged(\n-                        (PrivilegedExceptionAction<Attributes>)\n-                                () -> ((DirContext)ctx).getAttributes(\n-                                        dnsUrl, SRV_TXT_ATTR),\n-                        null,\n-                        new java.net.SocketPermission(\"*\", \"connect,accept\"));\n-            } catch (PrivilegedActionException e) {\n-                throw (NamingException)e.getCause();\n-            }\n+            Attributes attrs = ((DirContext)ctx).getAttributes(\n+                                 dnsUrl, SRV_TXT_ATTR);\n@@ -147,1 +133,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -163,12 +148,2 @@\n-            Attributes attrs = null;\n-            try {\n-                \/\/ both connect and accept are needed since DNS is thru UDP\n-                attrs = AccessController.doPrivileged(\n-                        (PrivilegedExceptionAction<Attributes>)\n-                                () -> ((DirContext)ctx).getAttributes(\n-                                        dnsUrl, SRV_RR_ATTR),\n-                        null,\n-                        new java.net.SocketPermission(\"*\", \"connect,accept\"));\n-            } catch (PrivilegedActionException e) {\n-                throw (NamingException)e.getCause();\n-            }\n+            Attributes attrs = ((DirContext)ctx).getAttributes(\n+                                 dnsUrl, SRV_RR_ATTR);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbServiceLocator.java","additions":5,"deletions":30,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import sun.security.action.GetBooleanAction;\n@@ -51,2 +50,2 @@\n-    public static final boolean AUTODEDUCEREALM = GetBooleanAction\n-            .privilegedGetProperty(\"sun.security.krb5.autodeducerealm\");\n+    public static final boolean AUTODEDUCEREALM =\n+            Boolean.getBoolean(\"sun.security.krb5.autodeducerealm\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Realm.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,11 +48,1 @@\n-        @SuppressWarnings({\"removal\", \"restricted\"})\n-        boolean isMac = java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Boolean>() {\n-                public Boolean run() {\n-                    if (OperatingSystem.isMacOS()) {\n-                        System.loadLibrary(\"osxkrb5\");\n-                        return true;\n-                    }\n-                    return false;\n-                }\n-            });\n+        boolean isMac = loadLibrary();\n@@ -62,0 +52,9 @@\n+    @SuppressWarnings(\"restricted\")\n+    private static boolean loadLibrary() {\n+        if (OperatingSystem.isMacOS()) {\n+            System.loadLibrary(\"osxkrb5\");\n+            return true;\n+        }\n+        return false;\n+    }\n+\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/SCDynamicStoreConfig.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -320,2 +319,2 @@\n-    public static final Debug DEBUG = Debug.of(\"krb5\", GetPropertyAction\n-            .privilegedGetProperty(\"sun.security.krb5.debug\"));\n+    public static final Debug DEBUG = Debug.of(\"krb5\",\n+            System.getProperty(\"sun.security.krb5.debug\"));\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/Krb5.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -57,2 +56,1 @@\n-        String type = GetPropertyAction\n-                .privilegedGetProperty(\"sun.security.krb5.rcache\");\n+        String type = System.getProperty(\"sun.security.krb5.rcache\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/ReplayCache.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -43,1 +42,0 @@\n-import java.security.PrivilegedAction;\n@@ -455,11 +453,6 @@\n-        @SuppressWarnings(\"removal\")\n-        String name = java.security.AccessController.doPrivileged(\n-                (PrivilegedAction<String>) () -> {\n-                    String cache = System.getenv(\"KRB5CCNAME\");\n-                    if (cache != null &&\n-                            (cache.length() >= 5) &&\n-                            cache.regionMatches(true, 0, \"FILE:\", 0, 5)) {\n-                        cache = cache.substring(5);\n-                    }\n-                    return cache;\n-                });\n+        String name = System.getenv(\"KRB5CCNAME\");\n+        if (name != null &&\n+                (name.length() >= 5) &&\n+                name.regionMatches(true, 0, \"FILE:\", 0, 5)) {\n+            name = name.substring(5);\n+        }\n@@ -505,1 +498,1 @@\n-        String user_name = GetPropertyAction.privilegedGetProperty(\"user.name\");\n+        String user_name = System.getProperty(\"user.name\");\n@@ -507,1 +500,1 @@\n-        String user_home = GetPropertyAction.privilegedGetProperty(\"user.home\");\n+        String user_home = System.getProperty(\"user.home\");\n@@ -510,1 +503,1 @@\n-            user_home = GetPropertyAction.privilegedGetProperty(\"user.dir\");\n+            user_home = System.getProperty(\"user.dir\");\n@@ -559,13 +552,8 @@\n-            @SuppressWarnings(\"removal\")\n-            Process p =\n-                java.security.AccessController.doPrivileged\n-                ((PrivilegedAction<Process>) () -> {\n-                    try {\n-                        return (Runtime.getRuntime().exec(command));\n-                    } catch (IOException e) {\n-                        if (DEBUG != null) {\n-                            e.printStackTrace(DEBUG.getPrintStream());\n-                        }\n-                        return null;\n-                    }\n-                });\n+            Process p = null;\n+            try {\n+                p = Runtime.getRuntime().exec(command);\n+            } catch (IOException e) {\n+                if (DEBUG != null) {\n+                    e.printStackTrace(DEBUG.getPrintStream());\n+                }\n+            }\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/ccache\/FileCredentialsCache.java","additions":17,"deletions":29,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -56,2 +55,2 @@\n-    private static final String CHARSET = GetPropertyAction\n-            .privilegedGetProperty(\"sun.security.krb5.msinterop.des.s2kcharset\");\n+    private static final String CHARSET =\n+            System.getProperty(\"sun.security.krb5.msinterop.des.s2kcharset\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/crypto\/Des.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -214,2 +213,1 @@\n-                String user_home = GetPropertyAction\n-                        .privilegedGetProperty(\"user.home\");\n+                String user_home = System.getProperty(\"user.home\");\n@@ -218,2 +216,1 @@\n-                    user_home = GetPropertyAction\n-                            .privilegedGetProperty(\"user.dir\");\n+                    user_home = System.getProperty(\"user.dir\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/ktab\/KeyTab.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import sun.security.action.GetBooleanAction;\n-\n@@ -43,1 +41,1 @@\n-        if (GetBooleanAction.privilegedGetProperty(\"jdk.krb5.rcache.useMD5\")) {\n+        if (Boolean.getBoolean(\"jdk.krb5.rcache.useMD5\")) {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/rcache\/AuthTimeWithHash.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -119,1 +118,1 @@\n-        return GetPropertyAction.privilegedGetProperty(\"java.io.tmpdir\");\n+        return System.getProperty(\"java.io.tmpdir\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/rcache\/DflCache.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -61,2 +60,2 @@\n-        String prop = GetPropertyAction\n-                .privilegedGetProperty(\"sun.security.krb5.msinterop.kstring\", \"true\");\n+        String prop =\n+            System.getProperty(\"sun.security.krb5.msinterop.kstring\", \"true\");\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/util\/KerberosString.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,6 +44,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(\n-                    new InquireSecContextPermission(type.toString()));\n-        }\n","filename":"src\/jdk.security.jgss\/share\/classes\/com\/sun\/security\/jgss\/ExtendedGSSContextImpl.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -77,1 +75,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -82,9 +79,4 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                putService(new ProviderService(p, \"SaslClientFactory\",\n-                           \"GSSAPI\", \"com.sun.security.sasl.gsskerb.FactoryImpl\"));\n-                putService(new ProviderService(p, \"SaslServerFactory\",\n-                           \"GSSAPI\", \"com.sun.security.sasl.gsskerb.FactoryImpl\"));\n-                return null;\n-            }\n-        });\n+        putService(new ProviderService(p, \"SaslClientFactory\",\n+                   \"GSSAPI\", \"com.sun.security.sasl.gsskerb.FactoryImpl\"));\n+        putService(new ProviderService(p, \"SaslServerFactory\",\n+                   \"GSSAPI\", \"com.sun.security.sasl.gsskerb.FactoryImpl\"));\n","filename":"src\/jdk.security.jgss\/share\/classes\/com\/sun\/security\/sasl\/gsskerb\/JdkSASL.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"}]}