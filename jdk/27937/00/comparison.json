{"files":[{"patch":"@@ -45,5 +45,1 @@\n-\n-typedef BOOL (WINAPI *SetSecurityDescriptorControlFnPtr)(\n-   IN PSECURITY_DESCRIPTOR pSecurityDescriptor,\n-   IN SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,\n-   IN SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet);\n+#include <securitybaseapi.h>\n@@ -955,16 +951,6 @@\n-  \/\/ if running on windows 2000 or later, set the automatic inheritance\n-  \/\/ control flags.\n-  SetSecurityDescriptorControlFnPtr _SetSecurityDescriptorControl;\n-  _SetSecurityDescriptorControl = (SetSecurityDescriptorControlFnPtr)\n-       GetProcAddress(GetModuleHandle(TEXT(\"advapi32.dll\")),\n-                      \"SetSecurityDescriptorControl\");\n-\n-  if (_SetSecurityDescriptorControl != nullptr) {\n-    \/\/ We do not want to further propagate inherited DACLs, so making them\n-    \/\/ protected prevents that.\n-    if (!_SetSecurityDescriptorControl(pSD, SE_DACL_PROTECTED,\n-                                            SE_DACL_PROTECTED)) {\n-      log_debug(perf)(\"SetSecurityDescriptorControl failure: lasterror = %d\", GetLastError());\n-      FREE_C_HEAP_ARRAY(char, newACL);\n-      return false;\n-    }\n+  \/\/ We do not want to further propagate inherited DACLs, so making them\n+  \/\/ protected prevents that.\n+  if (!SetSecurityDescriptorControl(pSD, SE_DACL_PROTECTED, SE_DACL_PROTECTED)) {\n+    log_debug(perf)(\"SetSecurityDescriptorControl failure: lasterror = %d\", GetLastError());\n+    FREE_C_HEAP_ARRAY(char, newACL);\n+    return false;\n@@ -972,5 +958,5 @@\n-   \/\/ Note, the security descriptor maintains a reference to the newACL, not\n-   \/\/ a copy of it. Therefore, the newACL is not freed here. It is freed when\n-   \/\/ the security descriptor containing its reference is freed.\n-   \/\/\n-   return true;\n+\n+  \/\/ Note, the security descriptor maintains a reference to the newACL, not\n+  \/\/ a copy of it. Therefore, the newACL is not freed here. It is freed when\n+  \/\/ the security descriptor containing its reference is freed.\n+  return true;\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":12,"deletions":26,"binary":false,"changes":38,"status":"modified"}]}