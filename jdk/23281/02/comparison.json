{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n@@ -29,1 +31,2 @@\n-import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n@@ -31,1 +34,0 @@\n-import com.sun.tools.javac.tree.EndPosTable;\n@@ -33,0 +35,1 @@\n+import com.sun.tools.javac.tree.JCTree.Tag;\n@@ -35,2 +38,0 @@\n-import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;\n-import com.sun.tools.javac.util.ListBuffer;\n@@ -39,0 +40,16 @@\n+ * Holds pending {@link Lint} warnings until the {@lint Lint} instance associated with the containing\n+ * module, package, class, method, or variable declaration is known so that {@link @SupressWarnings}\n+ * suppressions may be applied.\n+ *\n+ * <p>\n+ * Warnings are regsistered at any time prior to attribution via {@link #report}. The warning will be\n+ * associated with the declaration placed in context by the most recent invocation of {@link #push push()}\n+ * not yet {@link #pop}'d. Warnings are actually emitted later, during attribution, via {@link #flush}.\n+ *\n+ * <p>\n+ * There is also an \"immediate\" mode, where warnings are emitted synchronously; see {@link #pushImmediate}.\n+ *\n+ * <p>\n+ * Deferred warnings are grouped by the innermost containing module, package, class, method, or variable\n+ * declaration (represented by {@link JCTree} nodes), so that the corresponding {@link Lint} configuration\n+ * can be applied when the warning is eventually generated.\n@@ -46,0 +63,1 @@\n+\n@@ -55,3 +73,13 @@\n-    \/** The Lint to use when {@link #immediate(Lint)} is used,\n-     * instead of {@link #setPos(DiagnosticPosition)}. *\/\n-    private Lint immediateLint;\n+    \/**\n+     * Registered {@link LintLogger}s grouped by the innermost containing module, package, class,\n+     * method, or variable declaration.\n+     *\/\n+    private final HashMap<JCTree, ArrayList<LintLogger>> deferralMap = new HashMap<>();\n+\n+    \/**\n+     * The current \"reporter\" stack, reflecting calls to {@link #push} and {@link #pop}.\n+     *\n+     * <p>\n+     * The top of the stack determines how calls to {@link #report} are handled.\n+     *\/\n+    private final ArrayDeque<Consumer<LintLogger>> reporterStack = new ArrayDeque<>();\n@@ -62,2 +90,2 @@\n-        this.currentPos = IMMEDIATE_POSITION;\n-        immediateLint = Lint.instance(context);\n+        Lint rootLint = Lint.instance(context);\n+        pushImmediate(rootLint);            \/\/ default to \"immediate\" mode\n@@ -66,0 +94,2 @@\n+\/\/ LintLogger\n+\n@@ -71,0 +101,6 @@\n+\n+        \/**\n+         * Generate a warning if appropriate.\n+         *\n+         * @param lint the applicable lint configuration\n+         *\/\n@@ -74,2 +110,1 @@\n-    private DiagnosticPosition currentPos;\n-    private Map<DiagnosticPosition, ListBuffer<LintLogger>> loggersQueue = new HashMap<>();\n+\/\/ Reporter Stack\n@@ -77,5 +112,5 @@\n-    \/**Associate the given logger with the current position as set by {@link #setPos(DiagnosticPosition) }.\n-     * Will be invoked when {@link #flush(DiagnosticPosition) } will be invoked with the same position.\n-     * <br>\n-     * Will invoke the logger synchronously if {@link #immediate() } was called\n-     * instead of {@link #setPos(DiagnosticPosition) }.\n+    \/**\n+     * Defer {@link #report}ed warnings until the given declaration is flushed.\n+     *\n+     * @param decl module, package, class, method, or variable declaration\n+     * @see #pop\n@@ -83,10 +118,9 @@\n-    public void report(LintLogger logger) {\n-        if (currentPos == IMMEDIATE_POSITION) {\n-            logger.report(immediateLint);\n-        } else {\n-            ListBuffer<LintLogger> loggers = loggersQueue.get(currentPos);\n-            if (loggers == null) {\n-                loggersQueue.put(currentPos, loggers = new ListBuffer<>());\n-            }\n-            loggers.append(logger);\n-        }\n+    public void push(JCTree decl) {\n+        Assert.check(decl.getTag() == Tag.MODULEDEF\n+                  || decl.getTag() == Tag.PACKAGEDEF\n+                  || decl.getTag() == Tag.CLASSDEF\n+                  || decl.getTag() == Tag.METHODDEF\n+                  || decl.getTag() == Tag.VARDEF);\n+        reporterStack.push(logger -> deferralMap\n+                                        .computeIfAbsent(decl, s -> new ArrayList<>())\n+                                        .add(logger));\n@@ -95,1 +129,4 @@\n-    \/**Invoke all {@link LintLogger}s that were associated with the provided {@code pos}.\n+    \/**\n+     * Enter \"immediate\" mode so that {@link #report}ed warnings are emitted synchonously.\n+     *\n+     * @param lint lint configuration to use for reported warnings\n@@ -97,8 +134,2 @@\n-    public void flush(DiagnosticPosition pos, Lint lint) {\n-        ListBuffer<LintLogger> loggers = loggersQueue.get(pos);\n-        if (loggers != null) {\n-            for (LintLogger lintLogger : loggers) {\n-                lintLogger.report(lint);\n-            }\n-            loggersQueue.remove(pos);\n-        }\n+    public void pushImmediate(Lint lint) {\n+        reporterStack.push(logger -> logger.report(lint));\n@@ -107,3 +138,5 @@\n-    \/**Sets the current position to the provided {@code currentPos}. {@link LintLogger}s\n-     * passed to subsequent invocations of {@link #report(LintLogger) } will be associated\n-     * with the given position.\n+    \/**\n+     * Revert to the previous configuration in effect prior to the most recent invocation\n+     * of {@link #push} or {@link #pushImmediate}.\n+     *\n+     * @see #pop\n@@ -111,4 +144,3 @@\n-    public DiagnosticPosition setPos(DiagnosticPosition currentPos) {\n-        DiagnosticPosition prevPosition = this.currentPos;\n-        this.currentPos = currentPos;\n-        return prevPosition;\n+    public void pop() {\n+        Assert.check(reporterStack.size() > 1);     \/\/ the bottom stack entry should never be popped\n+        reporterStack.pop();\n@@ -117,2 +149,6 @@\n-    \/**{@link LintLogger}s passed to subsequent invocations of\n-     * {@link #report(LintLogger) } will be invoked immediately.\n+    \/**\n+     * Report a warning.\n+     *\n+     * <p>\n+     * In immediate mode, the warning is emitted synchronously. Otherwise, the warning is emitted later\n+     * when the current declaration is flushed.\n@@ -120,3 +156,3 @@\n-    public DiagnosticPosition immediate(Lint lint) {\n-        immediateLint = lint;\n-        return setPos(IMMEDIATE_POSITION);\n+    public void report(LintLogger logger) {\n+        Assert.check(!reporterStack.isEmpty());\n+        reporterStack.peek().accept(logger);\n@@ -125,25 +161,15 @@\n-    private static final DiagnosticPosition IMMEDIATE_POSITION = new DiagnosticPosition() {\n-        @Override\n-        public JCTree getTree() {\n-            Assert.error();\n-            return null;\n-        }\n-\n-        @Override\n-        public int getStartPosition() {\n-            Assert.error();\n-            return -1;\n-        }\n-\n-        @Override\n-        public int getPreferredPosition() {\n-            Assert.error();\n-            return -1;\n-        }\n-\n-        @Override\n-        public int getEndPosition(EndPosTable endPosTable) {\n-            Assert.error();\n-            return -1;\n-        }\n-    };\n+\/\/ Warning Flush\n+\n+    \/**\n+     * Emit deferred warnings encompassed by the given declaration.\n+     *\n+     * @param decl module, package, class, method, or variable declaration\n+     * @param lint lint configuration corresponding to {@code decl}\n+     *\/\n+    public void flush(JCTree decl, Lint lint) {\n+        Optional.of(decl)\n+          .map(deferralMap::remove)\n+          .stream()\n+          .flatMap(ArrayList::stream)\n+          .forEach(logger -> logger.report(lint));\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/DeferredLintHandler.java","additions":99,"deletions":73,"binary":false,"changes":172,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,1 +233,1 @@\n-     * @param deferPos    report errors here\n+     * @param deferDecl   enclosing declaration for DeferredLintHandler, or null for no deferral\n@@ -236,1 +236,1 @@\n-            Symbol s, DiagnosticPosition deferPos)\n+            Symbol s, JCTree deferDecl)\n@@ -254,5 +254,2 @@\n-            DiagnosticPosition prevLintPos =\n-                    deferPos != null\n-                            ? deferredLintHandler.setPos(deferPos)\n-                            : deferredLintHandler.immediate(lint);\n-            Lint prevLint = deferPos != null ? null : chk.setLint(lint);\n+            Assert.check(deferDecl != null);\n+            deferredLintHandler.push(deferDecl);\n@@ -269,3 +266,1 @@\n-                if (prevLint != null)\n-                    chk.setLint(prevLint);\n-                deferredLintHandler.setPos(prevLintPos);\n+                deferredLintHandler.pop();\n@@ -289,1 +284,1 @@\n-            MethodSymbol m, DiagnosticPosition deferPos)\n+            MethodSymbol m, JCTree deferDecl)\n@@ -293,1 +288,1 @@\n-            DiagnosticPosition prevLintPos = deferredLintHandler.setPos(deferPos);\n+            deferredLintHandler.push(deferDecl);\n@@ -297,1 +292,1 @@\n-                deferredLintHandler.setPos(prevLintPos);\n+                deferredLintHandler.pop();\n@@ -679,1 +674,1 @@\n-            queueScanTreeAndTypeAnnotate(tree, env, tree.type.tsym, tree.pos());\n+            queueScanTreeAndTypeAnnotate(tree, env, tree.type.tsym, null);\n@@ -1032,1 +1027,1 @@\n-            Symbol s, DiagnosticPosition deferPos, boolean isTypeParam)\n+            Symbol s, JCTree deferDecl, boolean isTypeParam)\n@@ -1036,1 +1031,0 @@\n-        DiagnosticPosition prevLintPos = null;\n@@ -1038,2 +1032,2 @@\n-        if (deferPos != null) {\n-            prevLintPos = deferredLintHandler.setPos(deferPos);\n+        if (deferDecl != null) {\n+            deferredLintHandler.push(deferDecl);\n@@ -1044,2 +1038,2 @@\n-            if (prevLintPos != null)\n-                deferredLintHandler.setPos(prevLintPos);\n+            if (deferDecl != null)\n+                deferredLintHandler.pop();\n@@ -1053,2 +1047,1 @@\n-    public void queueScanTreeAndTypeAnnotate(JCTree tree, Env<AttrContext> env, Symbol sym,\n-            DiagnosticPosition deferPos)\n+    public void queueScanTreeAndTypeAnnotate(JCTree tree, Env<AttrContext> env, Symbol sym, JCTree deferDecl)\n@@ -1057,1 +1050,1 @@\n-        normal(() -> tree.accept(new TypeAnnotate(env, sym, deferPos)));\n+        normal(() -> tree.accept(new TypeAnnotate(env, sym, deferDecl)));\n@@ -1092,1 +1085,1 @@\n-        private DiagnosticPosition deferPos;\n+        private JCTree deferDecl;\n@@ -1094,1 +1087,1 @@\n-        public TypeAnnotate(Env<AttrContext> env, Symbol sym, DiagnosticPosition deferPos) {\n+        public TypeAnnotate(Env<AttrContext> env, Symbol sym, JCTree deferDecl) {\n@@ -1098,1 +1091,1 @@\n-            this.deferPos = deferPos;\n+            this.deferDecl = deferDecl;\n@@ -1103,1 +1096,1 @@\n-            enterTypeAnnotations(tree.annotations, env, sym, deferPos, false);\n+            enterTypeAnnotations(tree.annotations, env, sym, deferDecl, false);\n@@ -1109,1 +1102,1 @@\n-            enterTypeAnnotations(tree.annotations, env, sym, deferPos, true);\n+            enterTypeAnnotations(tree.annotations, env, sym, deferDecl, true);\n@@ -1115,1 +1108,1 @@\n-            enterTypeAnnotations(tree.annotations, env, sym, deferPos, false);\n+            enterTypeAnnotations(tree.annotations, env, sym, deferDecl, false);\n@@ -1117,1 +1110,1 @@\n-                enterTypeAnnotations(dimAnnos, env, sym, deferPos, false);\n+                enterTypeAnnotations(dimAnnos, env, sym, deferDecl, false);\n@@ -1136,2 +1129,2 @@\n-            DiagnosticPosition prevPos = deferPos;\n-            deferPos = tree.pos();\n+            JCTree prevDecl = deferDecl;\n+            deferDecl = tree;\n@@ -1147,1 +1140,1 @@\n-                deferPos = prevPos;\n+                deferDecl = prevDecl;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":27,"deletions":34,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -857,4 +857,1 @@\n-\n-        DiagnosticPosition prevLintPos\n-                = deferredLintHandler.setPos(variable.pos());\n-\n+        deferredLintHandler.push(variable);\n@@ -876,1 +873,1 @@\n-            deferredLintHandler.setPos(prevLintPos);\n+            deferredLintHandler.pop();\n@@ -1005,1 +1002,1 @@\n-            deferredLintHandler.flush(tree.pos(), lint);\n+            deferredLintHandler.flush(tree, lint);\n@@ -1302,1 +1299,1 @@\n-            deferredLintHandler.flush(tree.pos(), lint);\n+            deferredLintHandler.flush(tree, lint);\n@@ -1346,1 +1343,1 @@\n-            annotate.queueScanTreeAndTypeAnnotate(tree.init, env, tree.sym, tree.pos());\n+            annotate.queueScanTreeAndTypeAnnotate(tree.init, env, tree.sym, tree);\n@@ -4220,1 +4217,1 @@\n-        annotate.annotateLater(tree.var.mods.annotations, env, v, tree.pos());\n+        annotate.annotateLater(tree.var.mods.annotations, env, v, tree.var);\n@@ -4222,1 +4219,1 @@\n-            annotate.queueScanTreeAndTypeAnnotate(tree.var.vartype, env, v, tree.var.pos());\n+            annotate.queueScanTreeAndTypeAnnotate(tree.var.vartype, env, v, tree.var);\n@@ -5335,1 +5332,1 @@\n-            deferredLintHandler.flush(env.tree.pos(), lint);\n+            deferredLintHandler.flush(env.tree, lint);\n@@ -5564,1 +5561,1 @@\n-            deferredLintHandler.flush(tree.pos(), lint);\n+            deferredLintHandler.flush(tree, lint);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1167,1 +1167,0 @@\n-     *  @param pos           Position to be used for error reporting.\n@@ -1170,0 +1169,1 @@\n+     *  @param tree          The declaration\n@@ -1171,1 +1171,2 @@\n-    long checkFlags(DiagnosticPosition pos, long flags, Symbol sym, JCTree tree) {\n+    long checkFlags(long flags, Symbol sym, JCTree tree) {\n+        final DiagnosticPosition pos = tree.pos();\n@@ -1215,1 +1216,1 @@\n-                warnOnExplicitStrictfp(pos);\n+                warnOnExplicitStrictfp(tree);\n@@ -1259,1 +1260,1 @@\n-                warnOnExplicitStrictfp(pos);\n+                warnOnExplicitStrictfp(tree);\n@@ -1323,2 +1324,2 @@\n-    private void warnOnExplicitStrictfp(DiagnosticPosition pos) {\n-        DiagnosticPosition prevLintPos = deferredLintHandler.setPos(pos);\n+    private void warnOnExplicitStrictfp(JCTree tree) {\n+        deferredLintHandler.push(tree);\n@@ -1326,1 +1327,1 @@\n-            deferredLintHandler.report(_ -> lint.logIfEnabled(pos, LintWarnings.Strictfp));\n+            deferredLintHandler.report(_ -> lint.logIfEnabled(tree.pos(), LintWarnings.Strictfp));\n@@ -1328,1 +1329,1 @@\n-            deferredLintHandler.setPos(prevLintPos);\n+            deferredLintHandler.pop();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -506,1 +506,1 @@\n-        c.flags_field = chk.checkFlags(tree.pos(), tree.mods.flags, c, tree) | FROM_SOURCE;\n+        c.flags_field = chk.checkFlags(tree.mods.flags, c, tree) | FROM_SOURCE;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-        m.flags_field = chk.checkFlags(tree.pos(), tree.mods.flags, m, tree);\n+        m.flags_field = chk.checkFlags(tree.mods.flags, m, tree);\n@@ -197,1 +197,1 @@\n-        DiagnosticPosition prevLintPos = deferredLintHandler.setPos(tree.pos());\n+        deferredLintHandler.push(tree);\n@@ -205,1 +205,1 @@\n-            deferredLintHandler.setPos(prevLintPos);\n+            deferredLintHandler.pop();\n@@ -230,1 +230,1 @@\n-        annotate.annotateLater(tree.mods.annotations, localEnv, m, tree.pos());\n+        annotate.annotateLater(tree.mods.annotations, localEnv, m, tree);\n@@ -233,1 +233,1 @@\n-        annotate.queueScanTreeAndTypeAnnotate(tree, localEnv, m, tree.pos());\n+        annotate.queueScanTreeAndTypeAnnotate(tree, localEnv, m, tree);\n@@ -237,1 +237,1 @@\n-            annotate.annotateDefaultValueLater(tree.defaultValue, localEnv, m, tree.pos());\n+            annotate.annotateDefaultValueLater(tree.defaultValue, localEnv, m, tree);\n@@ -266,1 +266,1 @@\n-        DiagnosticPosition prevLintPos = deferredLintHandler.setPos(tree.pos());\n+        deferredLintHandler.push(tree);\n@@ -277,1 +277,1 @@\n-            deferredLintHandler.setPos(prevLintPos);\n+            deferredLintHandler.pop();\n@@ -296,1 +296,1 @@\n-        v.flags_field = chk.checkFlags(tree.pos(), tree.mods.flags, v, tree);\n+        v.flags_field = chk.checkFlags(tree.mods.flags, v, tree);\n@@ -318,1 +318,1 @@\n-        annotate.annotateLater(tree.mods.annotations, localEnv, v, tree.pos());\n+        annotate.annotateLater(tree.mods.annotations, localEnv, v, tree);\n@@ -320,1 +320,1 @@\n-            annotate.queueScanTreeAndTypeAnnotate(tree.vartype, localEnv, v, tree.pos());\n+            annotate.queueScanTreeAndTypeAnnotate(tree.vartype, localEnv, v, tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -749,1 +749,1 @@\n-                DiagnosticPosition prevLintPos = deferredLintHandler.setPos(moduleDecl.pos());\n+                deferredLintHandler.push(moduleDecl);\n@@ -757,1 +757,1 @@\n-                    deferredLintHandler.setPos(prevLintPos);\n+                    deferredLintHandler.pop();\n@@ -994,1 +994,1 @@\n-            DiagnosticPosition prevLintPos = deferredLintHandler.setPos(decl.pos());\n+            deferredLintHandler.push(decl);\n@@ -1000,1 +1000,1 @@\n-                deferredLintHandler.setPos(prevLintPos);\n+                deferredLintHandler.pop();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -277,1 +277,1 @@\n-                DiagnosticPosition prevLintPos = deferredLintHandler.setPos(tree.pos());\n+                deferredLintHandler.push(tree);\n@@ -285,1 +285,1 @@\n-                    deferredLintHandler.setPos(prevLintPos);\n+                    deferredLintHandler.pop();\n@@ -368,1 +368,1 @@\n-            DiagnosticPosition prevLintPos = deferredLintHandler.immediate(lint);\n+            deferredLintHandler.pushImmediate(lint);\n@@ -393,1 +393,1 @@\n-                    DiagnosticPosition prevCheckDeprecatedLintPos = deferredLintHandler.setPos(decl.pos());\n+                    deferredLintHandler.push(decl);\n@@ -398,1 +398,1 @@\n-                        deferredLintHandler.setPos(prevCheckDeprecatedLintPos);\n+                        deferredLintHandler.pop();\n@@ -401,1 +401,1 @@\n-                    annotate.annotateLater(decl.mods.annotations, env, env.toplevel.modle, decl.pos());\n+                    annotate.annotateLater(decl.mods.annotations, env, env.toplevel.modle, decl);\n@@ -406,1 +406,1 @@\n-                deferredLintHandler.setPos(prevLintPos);\n+                deferredLintHandler.pop();\n@@ -439,1 +439,1 @@\n-            annotate.annotateLater(tree.annotations, env, env.toplevel.packge, tree.pos());\n+            annotate.annotateLater(tree.annotations, env, env.toplevel.packge, tree);\n@@ -932,1 +932,1 @@\n-                annotate.queueScanTreeAndTypeAnnotate(tree.extending, baseEnv, sym, tree.pos());\n+                annotate.queueScanTreeAndTypeAnnotate(tree.extending, baseEnv, sym, tree);\n@@ -934,1 +934,1 @@\n-                annotate.queueScanTreeAndTypeAnnotate(impl, baseEnv, sym, tree.pos());\n+                annotate.queueScanTreeAndTypeAnnotate(impl, baseEnv, sym, tree);\n@@ -949,2 +949,1 @@\n-            annotate.annotateLater(tree.mods.annotations, baseEnv,\n-                        sym, tree.pos());\n+            annotate.annotateLater(tree.mods.annotations, baseEnv, sym, tree);\n@@ -954,1 +953,1 @@\n-                annotate.queueScanTreeAndTypeAnnotate(tp, baseEnv, sym, tree.pos());\n+                annotate.queueScanTreeAndTypeAnnotate(tp, baseEnv, sym, tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -651,1 +651,1 @@\n-            var prevPos = deferredLintHandler.setPos(tree);\n+            deferredLintHandler.push(tree);\n@@ -655,1 +655,1 @@\n-                deferredLintHandler.setPos(prevPos);\n+                deferredLintHandler.pop();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}