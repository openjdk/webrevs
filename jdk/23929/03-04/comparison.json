{"files":[{"patch":"@@ -33,1 +33,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -83,2 +83,3 @@\n-                throwException(IllegalArgumentException.class, \"invalid IPv6 address%s\",\n-                               filterNetInfo(str).prefixWith(\": \"));\n+                throw new IllegalArgumentException(\n+                           formatMsg(\"invalid IPv6 address%s\",\n+                                     filterNetInfo(str).prefixWith(\": \")));\n@@ -163,2 +164,2 @@\n-            throwException(IllegalArgumentException.class, \"invalid port range%s\",\n-                           filterNetInfo(portstr).prefixWith(\": \"));\n+            throw new IllegalArgumentException(\n+                formatMsg(\"invalid port range%s\", filterNetInfo(portstr).prefixWith(\": \")));\n","filename":"src\/java.base\/share\/classes\/java\/net\/HostPortrange.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -43,1 +43,1 @@\n-            throwException(UnknownHostException.class, filterLookupInfo(hostname));\n+            throw new UnknownHostException(formatMsg(\"%s\", filterLookupInfo(hostname)));\n","filename":"src\/java.base\/share\/classes\/java\/net\/Inet4AddressImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -586,2 +586,3 @@\n-                throwException(UnknownHostException.class, \"%sinvalid IPv4-mapped address\",\n-                               filterLookupInfo(addressLiteral).suffixWith(\": \"));\n+                throw new UnknownHostException(\n+                    formatMsg(\"%sinvalid IPv4-mapped address\",\n+                              filterLookupInfo(addressLiteral).suffixWith(\": \")));\n","filename":"src\/java.base\/share\/classes\/java\/net\/Inet6Address.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-import static jdk.internal.util.Exceptions.exception;\n@@ -74,1 +73,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -910,1 +909,1 @@\n-                throwException(UnknownHostException.class, filterLookupInfo(host));\n+                throw new UnknownHostException(formatMsg(\"%s\", filterLookupInfo(host)));\n@@ -1103,5 +1102,3 @@\n-                        if (ex == null) {\n-                            throwException(UnknownHostException.class, filterLookupInfo(host));\n-                        } else {\n-                            throw ex;\n-                        }\n+                        throw ex == null\n+                            ? new UnknownHostException(formatMsg(\"%s\", filterLookupInfo(host)))\n+                            : ex;\n@@ -1215,5 +1212,5 @@\n-                throwException(UnknownHostException.class,\n-                               \"Unable to resolve address %s as hosts file %s not found\",\n-                               filterLookupInfo(Arrays.toString(addr)),\n-                               filterLookupInfo(hostsFile)\n-                                   .replaceWith(\"from ${jdk.net.hosts.file} system property\"));\n+                throw new UnknownHostException(\n+                    formatMsg(\"Unable to resolve address %s as hosts file %s not found\",\n+                              filterLookupInfo(Arrays.toString(addr)),\n+                              filterLookupInfo(hostsFile)\n+                                   .replaceWith(\"from ${jdk.net.hosts.file} system property\")));\n@@ -1223,5 +1220,5 @@\n-                throwException(UnknownHostException.class,\n-                               \"Requested address %s resolves to an invalid entry in hosts file %s\",\n-                               filterLookupInfo(Arrays.toString(addr)),\n-                               filterLookupInfo(hostsFile)\n-                                   .replaceWith(\"from ${jdk.net.hosts.file} system property\"));\n+                throw new UnknownHostException(\n+                    formatMsg(\"Requested address %s resolves to an invalid entry in hosts file %s\",\n+                              filterLookupInfo(Arrays.toString(addr)),\n+                              filterLookupInfo(hostsFile)\n+                                   .replaceWith(\"from ${jdk.net.hosts.file} system property\")));\n@@ -1288,4 +1285,4 @@\n-                throwException(UnknownHostException.class,\n-                               \"Unable to resolve host %s as hosts file %s not found\",\n-                               filterLookupInfo(host), filterLookupInfo(hostsFile)\n-                                   .replaceWith(\"from ${jdk.net.hosts.file} system property\"));\n+                throw new UnknownHostException(\n+                    formatMsg(\"Unable to resolve host %s as hosts file %s not found\",\n+                              filterLookupInfo(host), filterLookupInfo(hostsFile)\n+                                   .replaceWith(\"from ${jdk.net.hosts.file} system property\")));\n@@ -1323,3 +1320,4 @@\n-                throwException(UnknownHostException.class, \"Unable to resolve host %s in hosts file %s\",\n-                               filterLookupInfo(hostName), filterLookupInfo(hostsFile)\n-                                   .replaceWith(\"from ${jdk.net.hosts.file} system property\"));\n+                throw new UnknownHostException(\n+                    formatMsg(\"Unable to resolve host %s in hosts file %s\",\n+                              filterLookupInfo(hostName), filterLookupInfo(hostsFile)\n+                                   .replaceWith(\"from ${jdk.net.hosts.file} system property\")));\n@@ -1562,2 +1560,1 @@\n-                    UnknownHostException uhe = exception(UnknownHostException.class,\n-                                                         filterLookupInfo(host));\n+                    var uhe = new UnknownHostException(formatMsg(\"%s\", filterLookupInfo(host)));\n@@ -1590,2 +1587,2 @@\n-        return exception(UnknownHostException.class, \"%sinvalid IPv6 address literal\",\n-                         filterLookupInfo(hostString).suffixWith(\": \"));\n+        return new UnknownHostException(formatMsg(\"%sinvalid IPv6 address literal\",\n+                                                  filterLookupInfo(hostString).suffixWith(\": \")));\n@@ -1729,1 +1726,1 @@\n-            throw ex == null ? exception(UnknownHostException.class, filterLookupInfo(host))\n+            throw ex == null ? new UnknownHostException(formatMsg(\"%s\", filterLookupInfo(host)))\n@@ -1802,2 +1799,3 @@\n-                    UnknownHostException uhe2 = exception(UnknownHostException.class,\n-                        filterLookupInfo(local).suffixWith(\": \") + uhe.getMessage());\n+                    UnknownHostException uhe2 =\n+                        new UnknownHostException(formatMsg(filterLookupInfo(local)\n+                                                               .suffixWith(\": \") + uhe.getMessage()));\n","filename":"src\/java.base\/share\/classes\/java\/net\/InetAddress.java","additions":30,"deletions":32,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -328,2 +328,2 @@\n-            throwException(IllegalArgumentException.class, \"invalid address type%s\",\n-                           filterNetInfo(addr.toString()).prefixWith(\": \"));\n+            throw new IllegalArgumentException(\n+                formatMsg(\"invalid address type%s\", filterNetInfo(addr.toString()).prefixWith(\": \")));\n","filename":"src\/java.base\/share\/classes\/java\/net\/NetworkInterface.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -99,4 +99,4 @@\n-            throwException(IllegalArgumentException.class,\n-                           \"type \" + type + \" is not compatible with address %s\",\n-                           filterNetInfo(sa.toString())\n-                               .replaceWith(\"type \" + sa.getClass().toString()));\n+            throw new IllegalArgumentException(\n+                formatMsg(\"type \" + type + \" is not compatible with address %s\",\n+                          filterNetInfo(sa.toString())\n+                               .replaceWith(\"type \" + sa.getClass().toString())));\n","filename":"src\/java.base\/share\/classes\/java\/net\/Proxy.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -397,2 +397,2 @@\n-                throwException(IllegalArgumentException.class,\n-                               \"invalid host\/port%s\", filterNetInfo(host).prefixWith(\": \"));\n+                throw new IllegalArgumentException(\n+                    formatMsg(\"invalid host\/port%s\", filterNetInfo(host).prefixWith(\": \")));\n@@ -415,2 +415,2 @@\n-                throwException(IllegalArgumentException.class,\n-                               \"invalid port range%s\", filterNetInfo(port).prefixWith(\": \"));\n+                throw new IllegalArgumentException(\n+                    formatMsg(\"invalid port range%s\", filterNetInfo(port).prefixWith(\": \")));\n@@ -789,1 +789,1 @@\n-            throwException(UnknownHostException.class, filterNetInfo(getName()));\n+            throw new UnknownHostException(formatMsg(\"%s\", filterNetInfo(getName())));\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketPermission.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -335,1 +335,1 @@\n-                throwException(UnknownHostException.class, filterSocketInfo(epoint.toString()));\n+                throw new UnknownHostException(formatMsg(\"%s\", filterSocketInfo(epoint.toString())));\n@@ -354,1 +354,1 @@\n-                throwException(UnknownHostException.class, filterSocketInfo(epoint.toString()));\n+                throw new UnknownHostException(formatMsg(\"%s\", filterSocketInfo(epoint.toString())));\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocksSocketImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-import static jdk.internal.util.Exceptions.throwURISyntaxException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -2039,1 +2039,2 @@\n-                throwURISyntaxException(\"%s\", \"Relative path in absolute URI\", -1, filterNetInfo(s));\n+                throw new URISyntaxException(formatMsg(\"%s\", filterNetInfo(s)),\n+                                             \"Relative path in absolute URI\");\n@@ -2995,1 +2996,1 @@\n-            throwURISyntaxException(\"%s\", reason, -1, filterNetInfo(input));\n+            throw new URISyntaxException(formatMsg(\"%s\", filterNetInfo(input)), reason);\n@@ -3002,1 +3003,1 @@\n-            throwURISyntaxException(\"%s\", reason, p, filterNetInfo(input));\n+            throw new URISyntaxException(formatMsg(\"%s\", filterNetInfo(input)), reason, p);\n","filename":"src\/java.base\/share\/classes\/java\/net\/URI.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import static jdk.internal.util.Exceptions.throwURISyntaxException;\n@@ -49,0 +48,1 @@\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -1174,1 +1174,1 @@\n-                throwURISyntaxException(\"%s\", s, -1, filterNetInfo(authority));\n+                throw new URISyntaxException(formatMsg(\"%s\", filterNetInfo(authority)), s);\n","filename":"src\/java.base\/share\/classes\/java\/net\/URL.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -211,2 +211,2 @@\n-                            throwException(IllegalArgumentException.class, \"Invalid host%s\",\n-                                           filterNetInfo(host).prefixWith(\": \"));\n+                            throw new IllegalArgumentException(\n+                                formatMsg(\"Invalid host%s\", filterNetInfo(host).prefixWith(\": \")));\n@@ -225,2 +225,3 @@\n-                                throwException(IllegalArgumentException.class, \"Invalid authority field%s\",\n-                                               filterNetInfo(authority).prefixWith(\": \"));\n+                                throw new IllegalArgumentException(\n+                                    formatMsg(\"Invalid authority field%s\",\n+                                               filterNetInfo(authority).prefixWith(\": \")));\n@@ -230,2 +231,3 @@\n-                        throwException(IllegalArgumentException.class, \"Invalid authority field%s\",\n-                                       filterNetInfo(authority).prefixWith(\": \"));\n+                        throw new IllegalArgumentException(\n+                            formatMsg(\"Invalid authority field%s\",\n+                                       filterNetInfo(authority).prefixWith(\": \")));\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLStreamHandler.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -45,5 +45,3 @@\n- * Code using this mechanism should use one of the static throwException\n- * methods below to generate and throw the exception in one method.\n- * exception() methods are also provided to generate an exception which\n- * then be modified before being thrown or used. Lastly, formatMsg()\n- * can generate a formatted (enhanced or restricted) string only.\n+ * Code using this mechanism should use formatMsg()\n+ * to generate a formatted (enhanced or restricted) string for exception\n+ * messages.\n@@ -145,53 +143,0 @@\n-    \/**\n-     * Throw an exception of the given class (which has a single arg (String) constructor\n-     * with the given format string. For each %s in the format string, there must be a\n-     * SensitiveInfo following that generates a message string in either enhanced or\n-     * restricted mode. The entire string is then passed to the exception constructor\n-     * Format specifiers other than %s are not supported, and will cause a runtime exception.\n-     *\/\n-    public static <X extends Throwable> void throwException(Class<X> exClass, String format,\n-                                                            SensitiveInfo... infos) throws X\n-    {\n-        throw exception(exClass, format, infos);\n-    }\n-\n-    \/**\n-     * Simplified version of above with one SensitiveInfo and a \"%s\" format string\n-     *\/\n-    public static <X extends Throwable> void throwException(Class<X> exClass, SensitiveInfo... infos) throws X\n-    {\n-        throwException(exClass, \"%s\", infos);\n-    }\n-\n-    \/**\n-     * Returns the exception without throwing it\n-     *\/\n-    public static <X extends Throwable> X exception(Class<X> exClass, String format,\n-                                                    SensitiveInfo... infos)\n-    {\n-        try {\n-            Constructor<X> ctor = exClass.getConstructor(String.class);\n-            String msg = formatMsg(format, infos);\n-            return ctor.newInstance(msg);\n-        } catch (ReflectiveOperationException e) {\n-            throw new InternalError();\n-        }\n-    }\n-\n-    public static <X extends Throwable> X exception(Class<X> exClass, SensitiveInfo... infos)\n-    {\n-        return exception(exClass, \"%s\", infos);\n-    }\n-\n-    \/**\n-     * Special case for URISyntaxException (has two additional parameters)\n-     *\/\n-    public static URISyntaxException throwURISyntaxException(String format, String arg2,\n-                                                             int index, SensitiveInfo... infos)\n-    throws URISyntaxException\n-    {\n-        String msg = formatMsg(format, infos);\n-        URISyntaxException ex = new URISyntaxException(msg, arg2, index);\n-        throw ex;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Exceptions.java","additions":3,"deletions":58,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import static jdk.internal.util.Exceptions.exception;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -167,2 +167,2 @@\n-        return exception(IllegalArgumentException.class, \"Invalid IP address literal%s\",\n-                         filterNetInfo(src).prefixWith(\": \"));\n+        return new IllegalArgumentException(\n+            formatMsg(\"Invalid IP address literal%s\", filterNetInfo(src).prefixWith(\": \")));\n","filename":"src\/java.base\/share\/classes\/sun\/net\/util\/IPAddressUtil.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-import static jdk.internal.util.Exceptions.throwURISyntaxException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -507,2 +507,2 @@\n-                throwURISyntaxException(\"%s\", \"Relative path in absolute URI\",\n-                                        -1, filterNetInfo(s));\n+                throw new URISyntaxException(formatMsg(\"%s\", filterNetInfo(s)),\n+                                             \"Relative path in absolute URI\");\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/ParseUtil.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -186,2 +186,3 @@\n-            throwException(NullPointerException.class, \"invalid url: %s %s\",\n-                           filterJarName(spec), filterJarName(e.getMessage())\n+            throw new NullPointerException(\n+                formatMsg(\"invalid url: %s %s\", filterJarName(spec),\n+                                                filterJarName(e.getMessage())\n@@ -189,1 +190,1 @@\n-                                                    .suffixWith(\")\"));\n+                                                    .suffixWith(\")\")));\n@@ -200,2 +201,3 @@\n-                throwException(NullPointerException.class, \"malformed context url%s : no !\/\",\n-                               filterJarName(url.toString()).prefixWith(\": \"));\n+                throw new NullPointerException(\n+                    formatMsg(\"malformed context url%s : no !\/\",\n+                              filterJarName(url.toString()).prefixWith(\": \")));\n@@ -208,2 +210,3 @@\n-                throwException(NullPointerException.class, \"malformed context url%s\",\n-                               filterJarName(url.toString()).prefixWith(\": \"));\n+                throw new NullPointerException(\n+                    formatMsg(\"malformed context url%s\",\n+                              filterJarName(url.toString()).prefixWith(\": \")));\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jar\/Handler.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -113,1 +113,1 @@\n-            throwException(FileNotFoundException.class, filterJarName(url.toString()));\n+            throw new FileNotFoundException(formatMsg(\"%s\", filterJarName(url.toString())));\n@@ -205,1 +205,1 @@\n-            throwException(FileNotFoundException.class, filterJarName(url.toString()));\n+            throw new FileNotFoundException(formatMsg(\"%s\", filterJarName(url.toString())));\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jar\/JarFileFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -132,4 +132,4 @@\n-                    throwException(FileNotFoundException.class,\n-                                   \"JAR entry %s not found in jar file %s\",\n-                                   filterJarName(entryName),\n-                                   filterJarName(jarFile.getName()));\n+                    throw new FileNotFoundException(\n+                        formatMsg(\"JAR entry %s not found in jar file %s\",\n+                                  filterJarName(entryName),\n+                                  filterJarName(jarFile.getName())));\n@@ -173,4 +173,4 @@\n-                throwException(FileNotFoundException.class,\n-                               \"JAR entry %s not found in jar file %s\",\n-                               filterJarName(entryName),\n-                               filterJarName(jarFile.getName()));\n+                throw new FileNotFoundException(\n+                    formatMsg(\"JAR entry %s not found in jar file %s\",\n+                              filterJarName(entryName),\n+                              filterJarName(jarFile.getName())));\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jar\/JarURLConnection.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -49,2 +49,2 @@\n-            throwException(MalformedURLException.class, \"no !\/ found in url spec%s\",\n-                           filterJarName(s).prefixWith(\": \"));\n+            throw new MalformedURLException(\n+                formatMsg(\"no !\/ found in url spec%s\", filterJarName(s).prefixWith(\": \")));\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/jmod\/Handler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -495,2 +495,2 @@\n-            throwException(SocketException.class, \"No network interface found with address %s\",\n-                           filterNetInfo(address));\n+            throw new SocketException(formatMsg(\"No network interface found with address %s\",\n+                                                filterNetInfo(address)));\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramSocketAdaptor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1312,1 +1312,1 @@\n-#  jar     - enables more detailed information in the IOExceptions thrown\n+#  jar      - enables more detailed information in the IOExceptions thrown\n@@ -1321,1 +1321,1 @@\n-# If the property is not set or set to an empty string, then this is the most \n+# If the property is not set or set to an empty string, then this is the most\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -142,2 +142,2 @@\n-            throwException(IOException.class, \"%s \" + x.errorString(),\n-                           filterUserName(name).suffixWith(\": \"));\n+            throw new IOException(formatMsg(\"%s \" + x.errorString(),\n+                                            filterUserName(name).suffixWith(\": \")));\n@@ -150,1 +150,1 @@\n-                throwException(UserPrincipalNotFoundException.class, filterUserName(name));\n+                throw new UserPrincipalNotFoundException(formatMsg(\"%s\", filterUserName(name)));\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixUserPrincipals.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -202,0 +202,1 @@\n+        int n;\n@@ -203,1 +204,1 @@\n-            snprintf(buf, size, \"%s: %s\", hostname, error_string);\n+            n = snprintf(buf, size, \"%s: %s\", hostname, error_string);\n@@ -205,1 +206,1 @@\n-            snprintf(buf, size, \" %s\", error_string);\n+            n = snprintf(buf, size, \" %s\", error_string);\n@@ -207,3 +208,4 @@\n-        s = JNU_NewStringPlatform(env, buf);\n-        if (s != NULL) {\n-            jobject x = JNU_NewObjectByName(env,\n+        if (n >= 0) {\n+            s = JNU_NewStringPlatform(env, buf);\n+            if (s != NULL) {\n+                jobject x = JNU_NewObjectByName(env,\n@@ -212,2 +214,3 @@\n-            if (x != NULL)\n-                (*env)->Throw(env, x);\n+                if (x != NULL)\n+                    (*env)->Throw(env, x);\n+            }\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.c","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -141,2 +141,2 @@\n-                    throwException(IOException.class, \"Failed to get SID %s : \" + x.errorString(),\n-                                   filterUserName(user.getName()).prefixWith(\"for \"));\n+                    throw new IOException(formatMsg(\"Failed to get SID %s : \" + x.errorString(),\n+                                                    filterUserName(user.getName()).prefixWith(\"for \")));\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsSecurityDescriptor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -143,2 +143,2 @@\n-            throwException(IOException.class, \"%s \" + x.errorString(),\n-                           filterUserName(name).suffixWith(\": \"));\n+            throw new IOException(formatMsg(\"%s \" + x.errorString(),\n+                                            filterUserName(name).suffixWith(\": \")));\n@@ -159,2 +159,2 @@\n-            throwException(IOException.class, \"%s \" + x.errorString(),\n-                           filterUserName(name).suffixWith(\": \"));\n+            throw new IOException(formatMsg(\"%s \" + x.errorString(),\n+                                            filterUserName(name).suffixWith(\": \")));\n@@ -162,1 +162,0 @@\n-        return null; \/\/ can't happen. Exception will be thrown\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsUserPrincipals.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -87,2 +87,2 @@\n-            throwException(IllegalArgumentException.class, \"unsupported URI %s\",\n-                           filterNetInfo(uri.toString()));\n+            throw new IllegalArgumentException(\n+                formatMsg(\"unsupported URI %s\", filterNetInfo(uri.toString())));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpRequestBuilderImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-import static jdk.internal.util.Exceptions.throwException;\n+import static jdk.internal.util.Exceptions.formatMsg;\n@@ -341,2 +341,3 @@\n-            throwException(IllegalArgumentException.class, \"URI must contain a host%s\",\n-                           filterNetInfo(uri.toString()).prefixWith(\": \"));\n+            throw new IllegalArgumentException(\n+                formatMsg(\"URI must contain a host%s\",\n+                          filterNetInfo(uri.toString()).prefixWith(\": \")));\n@@ -344,2 +345,3 @@\n-            throwException(IllegalArgumentException.class, \"URI must not contain a fragment%s\",\n-                           filterNetInfo(uri.toString()).prefixWith(\": \"));\n+            throw new IllegalArgumentException(\n+                formatMsg(\"URI must not contain a fragment%s\",\n+                          filterNetInfo(uri.toString()).prefixWith(\": \")));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/OpeningHandshake.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}