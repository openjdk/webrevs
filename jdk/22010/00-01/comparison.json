{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -77,0 +78,14 @@\n+    @Benchmark\n+    public void arraysFillLoop() {\n+        for (int i = 0; i < array.length; i++) {\n+            array[i] = 0;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void bufferFillLoop() {\n+        for (int i = 0; i < array.length; i++) {\n+            buffer.put(i, (byte)0);\n+        }\n+    }\n+\n@@ -89,0 +104,7 @@\n+    @Benchmark\n+    public void heapSegmentFillLoop() {\n+        for (long i = 0; i < heapSegment.byteSize(); i++) {\n+            heapSegment.set(ValueLayout.JAVA_BYTE, i, (byte) 0);\n+        }\n+    }\n+\n@@ -101,0 +123,7 @@\n+    @Benchmark\n+    public void nativeSegmentFillLoop() {\n+        for (long i = 0; i < nativeSegment.byteSize(); i++) {\n+            nativeSegment.set(ValueLayout.JAVA_BYTE, i, (byte) 0);\n+        }\n+    }\n+\n@@ -113,0 +142,7 @@\n+    @Benchmark\n+    public void unalignedSegmentFillLoop() {\n+        for (long i = 0; i < unalignedSegment.byteSize(); i++) {\n+            unalignedSegment.set(ValueLayout.JAVA_BYTE, i, (byte) 0);\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/SegmentBulkFill.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+    private static final MemorySegment[] MIXED_SEGMENTS = new MemorySegment[INSTANCES];\n@@ -69,0 +70,6 @@\n+            MIXED_SEGMENTS[i] = switch (rnd.nextInt(3) % 3) {\n+                case 0 -> HEAP_SEGMENTS[i];\n+                case 1 -> NATIVE_SEGMENTS[i];\n+                case 2 -> UNALIGNED_SEGMENTS[i];\n+                default -> throw new InternalError(\"We cannot end up here: \" + i);\n+            };\n@@ -117,1 +124,1 @@\n-            final long end = HEAP_SEGMENTS[i].byteSize();\n+            final long end = NATIVE_SEGMENTS[i].byteSize();\n@@ -143,1 +150,1 @@\n-            final long end = HEAP_SEGMENTS[i].byteSize();\n+            final long end = UNALIGNED_SEGMENTS[i].byteSize();\n@@ -150,0 +157,26 @@\n+    @Fork(value = 3, jvmArgs = {\"-Djava.lang.foreign.native.threshold.power.fill=31\"})\n+    @Benchmark\n+    public void mixedSegmentFillJava() {\n+        for (int i = 0; i < INSTANCES; i++) {\n+            MIXED_SEGMENTS[i].fill((byte) 0);\n+        }\n+    }\n+\n+    @Fork(value = 3, jvmArgs = {\"-Djava.lang.foreign.native.threshold.power.fill=0\"})\n+    @Benchmark\n+    public void mixedSegmentFillUnsafe() {\n+        for (int i = 0; i < INSTANCES; i++) {\n+            MIXED_SEGMENTS[i].fill((byte) 0);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void mixedSegmentFillLoop() {\n+        for (int i = 0; i < INSTANCES; i++) {\n+            final long end = MIXED_SEGMENTS[i].byteSize();\n+            for (long j = 0; j < end; j++) {\n+                MIXED_SEGMENTS[i].set(ValueLayout.JAVA_BYTE, j, (byte) 0);\n+            }\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/SegmentBulkRandomFill.java","additions":35,"deletions":2,"binary":false,"changes":37,"status":"modified"}]}