{"files":[{"patch":"@@ -193,0 +193,2 @@\n+java\/awt\/dnd\/DnDCursorCrashTest\/DnDCursorCrashTest.java 8242805 macosx-all\n+java\/awt\/dnd\/DnDClipboardDeadlockTest\/DnDClipboardDeadlockTest.java 8079553 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,436 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4388802\n+ * @summary tests that clipboard operations during drag-and-drop don't deadlock\n+ * @key headful\n+ * @run main DnDClipboardDeadlockTest\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.GridLayout;\n+import java.awt.List;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Serializable;\n+\n+public class DnDClipboardDeadlockTest {\n+\n+    public static final int CODE_NOT_RETURNED = -1;\n+    public static final int CODE_OK = 0;\n+    public static final int CODE_FAILURE = 1;\n+\n+    private int returnCode = CODE_NOT_RETURNED;\n+\n+    final Frame frame = new Frame();\n+    Robot robot = null;\n+    Panel panel = null;\n+\n+    public static void main(String[] args) {\n+        DnDClipboardDeadlockTest test = new DnDClipboardDeadlockTest();\n+        if (args.length == 4) {\n+            test.run(args);\n+        } else {\n+            test.start();\n+        }\n+    }\n+\n+    public void run(String[] args) {\n+        try {\n+            if (args.length != 4) {\n+                throw new RuntimeException(\"Incorrect command line arguments.\");\n+            }\n+\n+            int x = Integer.parseInt(args[0]);\n+            int y = Integer.parseInt(args[1]);\n+            int w = Integer.parseInt(args[2]);\n+            int h = Integer.parseInt(args[3]);\n+\n+            Transferable t = new StringSelection(\"TEXT\");\n+            panel = new DragSourcePanel(t);\n+\n+            frame.setTitle(\"DragSource frame\");\n+            frame.setLocation(300, 200);\n+            frame.add(panel);\n+            frame.pack();\n+            frame.setVisible(true);\n+\n+            Util.waitForInit();\n+\n+            Point sourcePoint = panel.getLocationOnScreen();\n+            Dimension d = panel.getSize();\n+            sourcePoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            Point targetPoint = new Point(x + w \/ 2, y + h \/ 2);\n+\n+            robot = new Robot();\n+\n+            if (!Util.pointInComponent(robot, sourcePoint, panel)) {\n+                System.err.println(\"WARNING: Cannot locate source panel\");\n+                System.exit(0);\n+            }\n+\n+            robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (; !sourcePoint.equals(targetPoint);\n+                 sourcePoint.translate(sign(targetPoint.x - sourcePoint.x),\n+                         sign(targetPoint.y - sourcePoint.y))) {\n+                robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+                Thread.sleep(10);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            System.exit(DnDClipboardDeadlockTest.CODE_FAILURE);\n+        }\n+    } \/\/ run()\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void start() {\n+        panel = new DropTargetPanel();\n+\n+        frame.setTitle(\"DropTarget frame\");\n+        frame.setLocation(10, 200);\n+        frame.add(panel);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+\n+        try {\n+            Util.waitForInit();\n+\n+            Point p = panel.getLocationOnScreen();\n+            Dimension d = panel.getSize();\n+\n+            try {\n+                Robot robot = new Robot();\n+                Point center = new Point(p);\n+                center.translate(d.width \/ 2, d.height \/ 2);\n+                if (!Util.pointInComponent(robot, center, panel)) {\n+                    System.err.println(\"WARNING: Cannot locate target panel\");\n+                    return;\n+                }\n+            } catch (AWTException awte) {\n+                awte.printStackTrace();\n+                return;\n+            }\n+\n+            String javaPath = System.getProperty(\"java.home\", \"\");\n+            String command = javaPath + File.separator + \"bin\" +\n+                    File.separator + \"java -cp \"\n+                    + System.getProperty(\"java.class.path\", \".\")\n+                    + \" DnDClipboardDeadlockTest \" +\n+                    p.x + \" \" + p.y + \" \" + d.width + \" \" + d.height;\n+\n+            Process process = Runtime.getRuntime().exec(command);\n+            returnCode = process.waitFor();\n+\n+            InputStream errorStream = process.getErrorStream();\n+            int count = errorStream.available();\n+            if (count > 0) {\n+                byte[] b = new byte[count];\n+                errorStream.read(b);\n+                System.err.println(\"========= Child VM System.err ========\");\n+                System.err.print(new String(b));\n+                System.err.println(\"======================================\");\n+            }\n+\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+        }\n+        switch (returnCode) {\n+            case CODE_NOT_RETURNED:\n+                System.err.println(\"Child VM: failed to start\");\n+                break;\n+            case CODE_OK:\n+                System.err.println(\"Child VM: normal termination\");\n+                break;\n+            case CODE_FAILURE:\n+                System.err.println(\"Child VM: abnormal termination\");\n+                break;\n+        }\n+        if (returnCode != CODE_OK) {\n+            throw new RuntimeException(\"The test failed.\");\n+        }\n+    } \/\/ start()\n+} \/\/ class DnDClipboardDeadlockTest\n+\n+class Util implements AWTEventListener {\n+    private static final Toolkit tk = Toolkit.getDefaultToolkit();\n+    private static final Object SYNC_LOCK = new Object();\n+    private Component clickedComponent = null;\n+    private static final int PAINT_TIMEOUT = 10000;\n+    private static final int MOUSE_RELEASE_TIMEOUT = 10000;\n+    private static final Util util = new Util();\n+\n+    static {\n+        tk.addAWTEventListener(util, 0xFFFFFFFF);\n+    }\n+\n+    private void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component) e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    public static boolean pointInComponent(Robot robot, Point p, Component comp)\n+            throws InterruptedException {\n+        return util.isPointInComponent(robot, p, comp);\n+    }\n+\n+    private boolean isPointInComponent(Robot robot, Point p, Component comp)\n+            throws InterruptedException {\n+        tk.sync();\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+\n+    public static void waitForInit() throws InterruptedException {\n+        final Frame f = new Frame() {\n+            public void paint(Graphics g) {\n+                dispose();\n+                synchronized (SYNC_LOCK) {\n+                    SYNC_LOCK.notifyAll();\n+                }\n+            }\n+        };\n+        f.setBounds(600, 400, 200, 200);\n+        synchronized (SYNC_LOCK) {\n+            f.setVisible(true);\n+            SYNC_LOCK.wait(PAINT_TIMEOUT);\n+        }\n+        tk.sync();\n+    }\n+}\n+\n+class DragSourceButton extends Button implements Serializable,\n+        DragGestureListener,\n+        DragSourceListener {\n+    static final Clipboard systemClipboard =\n+            Toolkit.getDefaultToolkit().getSystemClipboard();\n+    final Transferable transferable;\n+\n+    public DragSourceButton(Transferable t) {\n+        super(\"DragSourceButton\");\n+\n+        this.transferable = t;\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                this);\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, transferable, this);\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {\n+    }\n+\n+    public void dragExit(DragSourceEvent dse) {\n+    }\n+\n+    public void dragOver(DragSourceDragEvent dsde) {\n+        try {\n+            Transferable t = systemClipboard.getContents(null);\n+            if (t.isDataFlavorSupported(DataFlavor.stringFlavor)) {\n+                String str = (String) t.getTransferData(DataFlavor.stringFlavor);\n+            }\n+            systemClipboard.setContents(new StringSelection(\"SOURCE\"), null);\n+        } catch (IOException ioe) {\n+            ioe.printStackTrace();\n+            if (!ioe.getMessage().equals(\"Owner failed to convert data\")) {\n+                System.exit(DnDClipboardDeadlockTest.CODE_FAILURE);\n+            }\n+        } catch (IllegalStateException e) {\n+            \/\/ IllegalStateExceptions do not indicate a bug in this case.\n+            \/\/ They result from concurrent modification of system clipboard\n+            \/\/ contents by the parent and child processes.\n+            \/\/ These exceptions are numerous, so we avoid dumping their\n+            \/\/ backtraces to prevent blocking child process io, which\n+            \/\/ causes test failure on timeout.\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {\n+        System.exit(DnDClipboardDeadlockTest.CODE_OK);\n+    }\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {\n+    }\n+}\n+\n+class DragSourcePanel extends Panel {\n+\n+    final Dimension preferredDimension = new Dimension(200, 200);\n+\n+    public DragSourcePanel(Transferable t) {\n+        setLayout(new GridLayout(1, 1));\n+        add(new DragSourceButton(t));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+    static final Clipboard systemClipboard =\n+            Toolkit.getDefaultToolkit().getSystemClipboard();\n+    final Dimension preferredDimension = new Dimension(200, 200);\n+\n+    public DropTargetPanel() {\n+        setBackground(Color.green);\n+        setDropTarget(new DropTarget(this, this));\n+        setLayout(new GridLayout(1, 1));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+    }\n+\n+    public void dragExit(DropTargetEvent dte) {\n+    }\n+\n+    public void dragOver(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+        try {\n+            Transferable t = systemClipboard.getContents(null);\n+            if (t.isDataFlavorSupported(DataFlavor.stringFlavor)) {\n+                String str = (String) t.getTransferData(DataFlavor.stringFlavor);\n+            }\n+            systemClipboard.setContents(new StringSelection(\"TARGET\"), null);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+            return;\n+        }\n+\n+        removeAll();\n+        final List list = new List();\n+        add(list);\n+\n+        Transferable t = dtde.getTransferable();\n+        DataFlavor[] dfs = t.getTransferDataFlavors();\n+\n+        for (int i = 0; i < dfs.length; i++) {\n+\n+            DataFlavor flavor = dfs[i];\n+            String str = null;\n+\n+            if (DataFlavor.stringFlavor.equals(flavor)) {\n+                try {\n+                    str = (String) t.getTransferData(flavor);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+\n+            list.add(str + \":\" + flavor.getMimeType());\n+        }\n+\n+        dtc.dropComplete(true);\n+        validate();\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DnDClipboardDeadlockTest\/DnDClipboardDeadlockTest.java","additions":436,"deletions":0,"binary":false,"changes":436,"status":"added"},{"patch":"@@ -0,0 +1,231 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4343300\n+ * @summary tests that drag attempt doesn't cause crash when\n+ *          custom cursor is used\n+ * @key headful\n+ * @run main DnDCursorCrashTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Cursor;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+public class DnDCursorCrashTest {\n+    static final Frame frame = new Frame();\n+    static final DragSourcePanel dragSourcePanel = new DragSourcePanel();\n+    static final DropTargetPanel dropTargetPanel = new DropTargetPanel();\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame.setTitle(\"Test frame\");\n+                frame.setLocation(200, 200);\n+                frame.setLayout(new GridLayout(2, 1));\n+                frame.add(dragSourcePanel);\n+                frame.add(dropTargetPanel);\n+                frame.pack();\n+                frame.setVisible(true);\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.delay(1000);\n+            robot.mouseMove(250, 250);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (int y = 250; y < 350; y += 5) {\n+                robot.mouseMove(250, y);\n+                robot.delay(100);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+        } finally {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(() -> frame.dispose());\n+            }\n+        }\n+    }\n+}\n+\n+class DragSourceButton extends Button implements Serializable,\n+                                                 Transferable,\n+                                                 DragGestureListener,\n+                                                 DragSourceListener {\n+    private final DataFlavor dataflavor =\n+        new DataFlavor(Button.class, \"DragSourceButton\");\n+\n+    public DragSourceButton() {\n+        this(\"DragSourceButton\");\n+    }\n+\n+    public DragSourceButton(String str) {\n+        super(str);\n+\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                                              this);\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(new Cursor(Cursor.HAND_CURSOR), this, this);\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {}\n+\n+    public void dragExit(DragSourceEvent dse) {}\n+\n+    public void dragOver(DragSourceDragEvent dsde) {}\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {}\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {}\n+\n+    public Object getTransferData(DataFlavor flavor)\n+      throws UnsupportedFlavorException, IOException {\n+\n+        if (!isDataFlavorSupported(flavor)) {\n+            throw new UnsupportedFlavorException(flavor);\n+        }\n+\n+        Object retObj;\n+\n+        ByteArrayOutputStream baoStream = new ByteArrayOutputStream();\n+        ObjectOutputStream ooStream = new ObjectOutputStream(baoStream);\n+        ooStream.writeObject(this);\n+\n+        ByteArrayInputStream baiStream = new ByteArrayInputStream(baoStream.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(baiStream);\n+        try {\n+            retObj = ois.readObject();\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(e.toString());\n+        }\n+\n+        return retObj;\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] { dataflavor };\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor dflavor) {\n+        return dataflavor.equals(dflavor);\n+    }\n+}\n+\n+class DragSourcePanel extends Panel {\n+\n+    final Dimension preferredDimension = new Dimension(200, 100);\n+\n+    public DragSourcePanel() {\n+        setLayout(new GridLayout(1, 1));\n+        add(new DragSourceButton());\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+    final Dimension preferredDimension = new Dimension(200, 100);\n+\n+    public DropTargetPanel() {\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {}\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {}\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+        }\n+\n+        DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+        Component comp = null;\n+\n+        if (dfs != null && dfs.length >= 1) {\n+            Transferable transfer = dtde.getTransferable();\n+\n+            try {\n+                comp = (Component)transfer.getTransferData(dfs[0]);\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+                dtc.dropComplete(false);\n+            }\n+        }\n+        dtc.dropComplete(true);\n+\n+        add(comp);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DnDCursorCrashTest\/DnDCursorCrashTest.java","additions":231,"deletions":0,"binary":false,"changes":231,"status":"added"},{"patch":"@@ -0,0 +1,232 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4357905\n+ * @summary Tests that removal of the focus owner component during\n+ *          drop processing doesn't cause crash\n+ * @key headful\n+ * @run main DnDRemoveFocusOwnerCrashTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.io.Serializable;\n+\n+public class DnDRemoveFocusOwnerCrashTest {\n+    public static final int FRAME_ACTIVATION_TIMEOUT = 1000;\n+    public static Frame frame;\n+    public static DragSourceButton dragSourceButton;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame();\n+                dragSourceButton = new DragSourceButton();\n+                DropTargetPanel dropTargetPanel =\n+                        new DropTargetPanel(dragSourceButton);\n+                frame.add(new Button(\"Test\"));\n+                frame.setTitle(\"Remove Focus Owner Test Frame\");\n+                frame.setLocation(200, 200);\n+                frame.add(dropTargetPanel);\n+                frame.pack();\n+                frame.setVisible(true);\n+\n+                try {\n+                    Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+                } catch (InterruptedException e) {\n+                    e.printStackTrace();\n+                    throw new RuntimeException(\"The test failed.\");\n+                }\n+\n+                Point p = dragSourceButton.getLocationOnScreen();\n+                p.translate(10, 10);\n+\n+                try {\n+                    Robot robot = new Robot();\n+                    robot.mouseMove(p.x, p.y);\n+                    robot.keyPress(KeyEvent.VK_CONTROL);\n+                    robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                    for (int dy = 0; dy < 50; dy++) {\n+                        robot.mouseMove(p.x, p.y + dy);\n+                        Thread.sleep(10);\n+                    }\n+                    robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                    robot.keyRelease(KeyEvent.VK_CONTROL);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                    throw new RuntimeException(\"The test failed.\");\n+                }\n+            });\n+        } finally {\n+            if (frame != null) {\n+                EventQueue.invokeAndWait(() -> frame.dispose());\n+            }\n+        }\n+    }\n+\n+    static class DragSourceButton extends Button implements Serializable,\n+            Transferable,\n+            DragGestureListener,\n+            DragSourceListener {\n+\n+        private static DataFlavor dataflavor;\n+\n+        static {\n+            try {\n+                dataflavor =\n+                        new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType);\n+                dataflavor.setHumanPresentableName(\"Local Object Flavor\");\n+            } catch (ClassNotFoundException e) {\n+                e.printStackTrace();\n+                throw new ExceptionInInitializerError();\n+            }\n+        }\n+\n+        public DragSourceButton() {\n+            this(\"DragSourceButton\");\n+        }\n+\n+        public DragSourceButton(String str) {\n+            super(str);\n+\n+            DragSource ds = DragSource.getDefaultDragSource();\n+            ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                    this);\n+        }\n+\n+        public void dragGestureRecognized(DragGestureEvent dge) {\n+            dge.startDrag(null, this, this);\n+        }\n+\n+        public void dragEnter(DragSourceDragEvent dsde) {\n+        }\n+\n+        public void dragExit(DragSourceEvent dse) {\n+        }\n+\n+        public void dragOver(DragSourceDragEvent dsde) {\n+        }\n+\n+        public void dragDropEnd(DragSourceDropEvent dsde) {\n+        }\n+\n+        public void dropActionChanged(DragSourceDragEvent dsde) {\n+        }\n+\n+        public Object getTransferData(DataFlavor flavor)\n+                throws UnsupportedFlavorException {\n+\n+            if (!isDataFlavorSupported(flavor)) {\n+                throw new UnsupportedFlavorException(flavor);\n+            }\n+\n+            return this;\n+        }\n+\n+        public DataFlavor[] getTransferDataFlavors() {\n+            return new DataFlavor[]{dataflavor};\n+        }\n+\n+        public boolean isDataFlavorSupported(DataFlavor dflavor) {\n+            return dataflavor.equals(dflavor);\n+        }\n+    }\n+\n+    static class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+        public DropTargetPanel(DragSourceButton button) {\n+            setLayout(new FlowLayout(FlowLayout.CENTER, 50, 50));\n+            add(button);\n+            setDropTarget(new DropTarget(this, this));\n+        }\n+\n+        public void dragEnter(DropTargetDragEvent dtde) {\n+        }\n+\n+        public void dragExit(DropTargetEvent dte) {\n+        }\n+\n+        public void dragOver(DropTargetDragEvent dtde) {\n+        }\n+\n+        public void dropActionChanged(DropTargetDragEvent dtde) {\n+        }\n+\n+        public void drop(DropTargetDropEvent dtde) {\n+            removeAll();\n+\n+            DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+            if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+                dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+            } else {\n+                dtde.rejectDrop();\n+            }\n+\n+            DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+            Component comp = null;\n+\n+            if (dfs != null && dfs.length >= 1) {\n+                Transferable transfer = dtde.getTransferable();\n+\n+                try {\n+                    comp = (Component) transfer.getTransferData(dfs[0]);\n+                } catch (Throwable e) {\n+                    e.printStackTrace();\n+                    dtc.dropComplete(false);\n+                }\n+            }\n+            dtc.dropComplete(true);\n+\n+            add(comp);\n+            validate();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DnDRemoveFocusOwnerCrashTest\/DnDRemoveFocusOwnerCrashTest.java","additions":232,"deletions":0,"binary":false,"changes":232,"status":"added"},{"patch":"@@ -0,0 +1,236 @@\n+\/*\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6362095\n+ * @summary Tests basic DnD functionality to a wordpad\n+ * @library \/open\/test\/jdk\/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DnDToWordpadTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.Panel;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.InvalidDnDOperationException;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javax.imageio.ImageIO;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+\n+public class DnDToWordpadTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                The test window contains a yellow button. Click on the button\n+                to copy image into the clipboard or drag the image.\n+                Paste or drop the image over runned Wordpad (when the mouse\n+                enters the Wordpad during the drag, the application\n+                should change the cursor to indicate that a copy operation is\n+                about to happen; release the mouse button).\n+                An image of a red rectangle should appear inside the document.\n+                You should be able to repeat this operation multiple times.\n+                Please, select \"Pass\" just in case of success or \"Fail\" for another\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(DnDToWordpadTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createUI() {\n+        Frame f = new Frame(\"DnD To WordPad Test\");\n+        Panel mainPanel;\n+        Component dragSource;\n+\n+        mainPanel = new Panel();\n+        mainPanel.setLayout(null);\n+\n+        mainPanel.setBackground(Color.black);\n+        try {\n+            dragSource = new DnDSource(\"Drag ME!\");\n+            mainPanel.add(dragSource);\n+            f.add(mainPanel);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        f.setSize(200, 200);\n+        return f;\n+    }\n+}\n+\n+class DnDSource extends Button implements Transferable,\n+        DragGestureListener,\n+        DragSourceListener {\n+    private DataFlavor m_df;\n+    private transient int m_dropAction;\n+    private Image m_img;\n+\n+    DnDSource(String label) throws IOException {\n+        super(label);\n+\n+        setBackground(Color.yellow);\n+        setForeground(Color.blue);\n+        setSize(200, 120);\n+\n+        m_df = DataFlavor.imageFlavor;\n+\n+        DragSource dragSource = new DragSource();\n+        dragSource.createDefaultDragGestureRecognizer(\n+                this,\n+                DnDConstants.ACTION_COPY_OR_MOVE,\n+                this\n+        );\n+        dragSource.addDragSourceListener(this);\n+\n+        \/\/ Create test gif image to drag\n+        Path p = Path.of(System.getProperty(\"test.classes\", \".\"));\n+        BufferedImage bImg = new BufferedImage(79, 109, TYPE_INT_ARGB);\n+        Graphics2D cg = bImg.createGraphics();\n+        cg.setColor(Color.RED);\n+        cg.fillRect(0, 0, 79, 109);\n+        ImageIO.write(bImg, \"png\", new File(p + java.io.File.separator +\n+                \"DnDSource_Red.gif\"));\n+\n+        m_img = Toolkit.getDefaultToolkit()\n+                .getImage(System.getProperty(\"test.classes\", \".\")\n+                + java.io.File.separator + \"DnDSource_Red.gif\");\n+\n+        addActionListener(\n+                ae -> Toolkit.getDefaultToolkit().getSystemClipboard().setContents(\n+                        (Transferable) DnDSource.this,\n+                        null\n+                )\n+        );\n+    }\n+\n+    public void paint(Graphics g) {\n+        g.drawImage(m_img, 10, 10, null);\n+    }\n+\n+    \/**\n+     * a Drag gesture has been recognized\n+     *\/\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        System.err.println(\"starting Drag\");\n+        try {\n+            dge.startDrag(null, this, this);\n+        } catch (InvalidDnDOperationException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    \/**\n+     * as the hotspot enters a platform dependent drop site\n+     *\/\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {\n+        System.err.println(\"[Source] dragEnter\");\n+    }\n+\n+    \/**\n+     * as the hotspot moves over a platform dependent drop site\n+     *\/\n+\n+    public void dragOver(DragSourceDragEvent dsde) {\n+        System.err.println(\"[Source] dragOver\");\n+        m_dropAction = dsde.getDropAction();\n+        System.out.println(\"m_dropAction = \" + m_dropAction);\n+    }\n+\n+    \/**\n+     * as the operation changes\n+     *\/\n+\n+    public void dragGestureChanged(DragSourceDragEvent dsde) {\n+        System.err.println(\"[Source] dragGestureChanged\");\n+        m_dropAction = dsde.getDropAction();\n+        System.out.println(\"m_dropAction = \" + m_dropAction);\n+    }\n+\n+    \/**\n+     * as the hotspot exits a platform dependent drop site\n+     *\/\n+\n+    public void dragExit(DragSourceEvent dsde) {\n+        System.err.println(\"[Source] dragExit\");\n+    }\n+\n+    \/**\n+     * as the operation completes\n+     *\/\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {\n+        System.err.println(\"[Source] dragDropEnd\");\n+    }\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {\n+        System.err.println(\"[Source] dropActionChanged\");\n+        m_dropAction = dsde.getDropAction();\n+        System.out.println(\"m_dropAction = \" + m_dropAction);\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[]{m_df};\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor sdf) {\n+        System.err.println(\"[Source] isDataFlavorSupported\" + m_df.equals(sdf));\n+        return m_df.equals(sdf);\n+    }\n+\n+    public Object getTransferData(DataFlavor tdf) throws UnsupportedFlavorException {\n+        if (!m_df.equals(tdf)) {\n+            throw new UnsupportedFlavorException(tdf);\n+        }\n+        System.err.println(\"[Source] Ok\");\n+        return m_img;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/dnd\/DnDToWordpadTest\/DnDToWordpadTest.java","additions":236,"deletions":0,"binary":false,"changes":236,"status":"added"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4187490\n+ * @summary Verify that Non-ASCII file names can be dragged and dropped\n+ * @library \/open\/test\/jdk\/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NonAsciiFilenames\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.io.File;\n+import java.util.AbstractList;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+\n+public class NonAsciiFilenames {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                This test must be run on an OS which does not use ISO 8859-1\n+                as its default encoding.\n+\n+                Open a native file browsing application, such as Windows\n+                Explorer. Try to find a file whose name uses non-ISO 8859-1\n+                characters. You will not be verifying the fix for 4187490 unless\n+                you drag a file which contains non-ISO 8859-1 characters. Drag\n+                the file from the native application and drop it on the test\n+                Frame. If the file name appears normally, then the test passes.\n+                If boxes or question marks appear for characters, or if you see\n+                the word \"Error\", then the test fails.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(NonAsciiFilenames::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createUI() {\n+        JFrame frame = new JFrame();\n+        frame.setTitle(\"DropLabel test\");\n+        frame.getContentPane().add(new DropLabel(\"Drop here\"));\n+        frame.setSize(300, 100);\n+        return frame;\n+    }\n+}\n+\n+class DropLabel extends JLabel implements DropTargetListener {\n+    public DropLabel(String s) {\n+        setText(s);\n+        new DropTarget(this, DnDConstants.ACTION_COPY, this, true);\n+        showDrop(false);\n+    }\n+\n+    private void showDrop(boolean b) {\n+        setForeground(b ? Color.white : Color.black);\n+    }\n+\n+    \/**\n+     * Configure to desired flavor of dropped data.\n+     *\/\n+    private DataFlavor getDesiredFlavor() {\n+        return DataFlavor.javaFileListFlavor;\n+    }\n+\n+    \/**\n+     * Check to make sure that the contains the expected object types.\n+     *\/\n+    private void checkDroppedData(Object data) {\n+        System.out.println(\"Got data: \" + data.getClass().getName());\n+        if (data instanceof AbstractList) {\n+            AbstractList files = (AbstractList) data;\n+            if (((File) files.get(0)).isFile())\n+                setText(((File) files.get(0)).toString());\n+            else\n+                setText(\"Error: not valid file: \" +\n+                        ((File) files.get(0)).toString());\n+        } else {\n+            System.out.println(\"Error: wrong type of data dropped\");\n+        }\n+    }\n+\n+    private boolean isDragOk(DropTargetDragEvent e) {\n+        boolean canDrop = false;\n+        try {\n+            canDrop = e.isDataFlavorSupported(getDesiredFlavor());\n+        } catch (Exception ex) {\n+        }\n+\n+        if (canDrop)\n+            e.acceptDrag(DnDConstants.ACTION_COPY);\n+        else\n+            e.rejectDrag();\n+        showDrop(canDrop);\n+        return canDrop;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent e) {\n+        isDragOk(e);\n+    }\n+\n+\n+    public void dragOver(DropTargetDragEvent e) {\n+        isDragOk(e);\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent e) {\n+        isDragOk(e);\n+    }\n+\n+    public void dragExit(DropTargetEvent e) {\n+        showDrop(false);\n+    }\n+\n+    public void drop(DropTargetDropEvent e) {\n+        try {\n+            e.acceptDrop(DnDConstants.ACTION_COPY);\n+            checkDroppedData(e.getTransferable().\n+                    getTransferData(getDesiredFlavor()));\n+        } catch (Exception err) {\n+        }\n+        e.dropComplete(true);\n+        showDrop(false);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/dnd\/NonAsciiFilenames\/NonAsciiFilenames.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"}]}