{"files":[{"patch":"@@ -1707,0 +1707,12 @@\n+\n+#ifdef ASSERT\n+void InterpreterMacroAssembler::verify_field_offset(Register reg) {\n+  \/\/ Verify the field offset falls after the header and Klass pointer. This is a cheap check which\n+  \/\/ is able to detect a regression of JDK-8369506.\n+  Label valid;\n+  subs(zr, reg, oopDesc::base_offset_in_bytes());\n+  br(Assembler::GE, valid);\n+  stop(\"bad field offset\");\n+  bind(valid);\n+}\n+#endif\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -322,0 +322,2 @@\n+\n+  void verify_field_offset(Register reg) NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,0 +171,1 @@\n+  assert_different_registers(bc_reg, temp_reg);\n@@ -235,2 +236,4 @@\n-  \/\/ patch bytecode\n-  __ strb(bc_reg, at_bcp(0));\n+  \/\/ Patch the bytecode using STLR so that the last STLR used in\n+  \/\/ ResolvedFieldEntry::fill_in is observed before the patched bytecode.\n+  __ lea(temp_reg, at_bcp(0));\n+  __ stlrb(bc_reg, temp_reg);\n@@ -3082,0 +3085,1 @@\n+  __ verify_field_offset(r1);\n@@ -3171,0 +3175,2 @@\n+  __ verify_field_offset(r1);\n+\n@@ -3237,0 +3243,1 @@\n+\n@@ -3238,0 +3245,1 @@\n+  __ verify_field_offset(r1);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"}]}