{"files":[{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires vm.continuations\n+ * @bug 8347997\n+ * @library \/test\/lib \/\n+ * @summary Test that Continuation.pin() and unpin() intrinsics work with EA.\n+ * @modules java.base\/jdk.internal.vm\n+ * @run driver compiler.c2.irTests.TestContinuationPinningAndEA\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.internal.vm.Continuation;\n+\n+public class TestContinuationPinningAndEA {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\n+            \"test_FailsEA\", \"test_Crashes\",\n+            \"test_FailsEANoInline\", \"test_CrashesNoInline\",\n+    })\n+    public void runMethod() {\n+        try {\n+            test_FailsEA();\n+        } catch (Throwable _) {\n+        }\n+        try {\n+            test_Crashes();\n+        } catch (Throwable _) {\n+        }\n+        try {\n+            test_FailsEANoInline();\n+        } catch (Throwable _) {\n+        }\n+        try {\n+            test_CrashesNoInline();\n+        } catch (Throwable _) {\n+        }\n+    }\n+\n+    \/\/ ===Cases where allocations are removed===\n+    static class FailsEA {\n+        final Object o;\n+\n+        @ForceInline\n+        public FailsEA() throws Throwable {\n+            o = new Object();\n+            Continuation.pin();\n+            Continuation.unpin();\n+        }\n+    }\n+\n+    static class Crashes {\n+        final Object o;\n+\n+        @ForceInline\n+        public Crashes() throws Throwable {\n+            Continuation.pin();\n+            Continuation.unpin();\n+            o = new Object();\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC})\n+    static void test_FailsEA() throws Throwable {\n+        new FailsEA();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC})\n+    static void test_Crashes() throws Throwable {\n+        new Crashes();\n+    }\n+\n+    \/\/ ===Sanity check that allocations would happen===\n+    static class FailsEANoInline {\n+        final Object o;\n+\n+        @DontInline\n+        public FailsEANoInline() throws Throwable {\n+            o = new Object();\n+            Continuation.pin();\n+            Continuation.unpin();\n+        }\n+    }\n+\n+    static class CrashesNoInline {\n+        final Object o;\n+\n+        @DontInline\n+        public CrashesNoInline() throws Throwable {\n+            Continuation.pin();\n+            Continuation.unpin();\n+            o = new Object();\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ALLOC, \">0\"})\n+    static void test_FailsEANoInline() throws Throwable {\n+        new FailsEANoInline();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.ALLOC, \">0\"})\n+    static void test_CrashesNoInline() throws Throwable {\n+        new CrashesNoInline();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestContinuationPinningAndEA.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"}]}