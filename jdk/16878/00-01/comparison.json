{"files":[{"patch":"@@ -26,0 +26,47 @@\n+\n+#include \"gc\/shared\/gc_globals.hpp\"\n+#include \"gc\/shenandoah\/shenandoahWorkerPolicy.hpp\"\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_init_marking() {\n+  return ParallelGCThreads;\n+}\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_conc_marking() {\n+  return ConcGCThreads;\n+}\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_final_marking() {\n+  return ParallelGCThreads;\n+}\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_conc_refs_processing() {\n+  return ConcGCThreads;\n+}\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_conc_root_processing() {\n+  return ConcGCThreads;\n+}\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_conc_evac() {\n+  return ConcGCThreads;\n+}\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_fullgc() {\n+  return ParallelGCThreads;\n+}\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_stw_degenerated() {\n+  return ParallelGCThreads;\n+}\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_conc_update_ref() {\n+  return ConcGCThreads;\n+}\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_final_update_ref() {\n+  return ParallelGCThreads;\n+}\n+\n+uint ShenandoahWorkerPolicy::calc_workers_for_conc_reset() {\n+  return ConcGCThreads;\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahWorkerPolicy.cpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -32,14 +32,32 @@\n-  \/\/ Normal GC cycle:\n-  static uint calc_workers_for_init_marking()         { return ParallelGCThreads; }\n-  static uint calc_workers_for_conc_marking()         { return ConcGCThreads;     }\n-  static uint calc_workers_for_final_marking()        { return ParallelGCThreads; }\n-  static uint calc_workers_for_conc_refs_processing() { return ConcGCThreads;     }\n-  static uint calc_workers_for_conc_root_processing() { return ConcGCThreads;     }\n-  static uint calc_workers_for_conc_evac()            { return ConcGCThreads;     }\n-  static uint calc_workers_for_conc_update_ref()      { return ConcGCThreads;     }\n-  static uint calc_workers_for_final_update_ref()     { return ParallelGCThreads; }\n-  static uint calc_workers_for_conc_reset()           { return ConcGCThreads;     }\n-\n-  \/\/ STW GC cycles:\n-  static uint calc_workers_for_stw_degenerated()      { return ParallelGCThreads; }\n-  static uint calc_workers_for_fullgc()               { return ParallelGCThreads; }\n+  \/\/ Calculate the number of workers for initial marking\n+  static uint calc_workers_for_init_marking();\n+\n+  \/\/ Calculate the number of workers for concurrent marking\n+  static uint calc_workers_for_conc_marking();\n+\n+  \/\/ Calculate the number of workers for final marking\n+  static uint calc_workers_for_final_marking();\n+\n+  \/\/ Calculate workers for concurrent root processing\n+  static uint calc_workers_for_conc_root_processing();\n+\n+  \/\/ Calculate workers for concurrent refs processing\n+  static uint calc_workers_for_conc_refs_processing();\n+\n+  \/\/ Calculate workers for concurrent evacuation (concurrent GC)\n+  static uint calc_workers_for_conc_evac();\n+\n+  \/\/ Calculate workers for parallel full gc\n+  static uint calc_workers_for_fullgc();\n+\n+  \/\/ Calculate workers for parallel degenerated gc\n+  static uint calc_workers_for_stw_degenerated();\n+\n+  \/\/ Calculate workers for concurrent reference update\n+  static uint calc_workers_for_conc_update_ref();\n+\n+  \/\/ Calculate workers for parallel\/final reference update\n+  static uint calc_workers_for_final_update_ref();\n+\n+  \/\/ Calculate workers for concurrent reset\n+  static uint calc_workers_for_conc_reset();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahWorkerPolicy.hpp","additions":32,"deletions":14,"binary":false,"changes":46,"status":"modified"}]}