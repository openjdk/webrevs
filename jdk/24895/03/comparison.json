{"files":[{"patch":"@@ -120,1 +120,1 @@\n-  if (log_is_enabled(Info, cds, aot, link)) {\n+  if (log_is_enabled(Info, aot, link)) {\n@@ -122,1 +122,1 @@\n-    log_info(cds, aot, link)(\"%s %s %p\", class_category_name(ik), ik->external_name(), ik);\n+    log_info(aot, link)(\"%s %s %p\", class_category_name(ik), ik->external_name(), ik);\n@@ -152,1 +152,1 @@\n-        log_warning(cds, aot, link)(\"%s cannot be aot-linked because it nest host is not aot-linked\", ik->external_name());\n+        log_warning(aot, link)(\"%s cannot be aot-linked because it nest host is not aot-linked\", ik->external_name());\n@@ -235,1 +235,1 @@\n-    log_info(cds, aot, link)(\"wrote %d class(es) for category %s\", list.length(), category);\n+    log_info(aot, link)(\"wrote %d class(es) for category %s\", list.length(), category);\n","filename":"src\/hotspot\/share\/cds\/aotClassLinker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-    if (log_is_enabled(Info, cds, aot, load)) {\n+    if (log_is_enabled(Info, aot, load)) {\n@@ -184,3 +184,3 @@\n-      log_info(cds, aot, load)(\"%-5s %s%s%s\", category_name, ik->external_name(),\n-                               ik->is_loaded() ? \" (already loaded)\" : \"\",\n-                               ik->is_hidden() ? \" (hidden)\" : \"\");\n+      log_info(aot, load)(\"%-5s %s%s%s\", category_name, ik->external_name(),\n+                          ik->is_loaded() ? \" (already loaded)\" : \"\",\n+                          ik->is_hidden() ? \" (hidden)\" : \"\");\n@@ -239,1 +239,1 @@\n-      if (log_is_enabled(Info, cds, aot, load)) {\n+      if (log_is_enabled(Info, aot, load)) {\n@@ -242,2 +242,2 @@\n-        log_info(cds, aot, load)(\"%s %s (initiated, defined by %s)\", category_name, ik->external_name(),\n-                                 defining_loader);\n+        log_info(aot, load)(\"%s %s (initiated, defined by %s)\", category_name, ik->external_name(),\n+                            defining_loader);\n","filename":"src\/hotspot\/share\/cds\/aotLinkedClassBulkLoader.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -410,1 +410,6 @@\n-    \/\/ AOTCache\/AOTConfiguration\/AOTMode not used.\n+    \/\/ AOTCache\/AOTConfiguration\/AOTMode not used -> using the \"classic CDS\" workflow.\n+\n+    \/\/ The old \"cds\" log tags are deprecated, but we keep printing them for now as [cds]\n+    \/\/ for the classic workflow to be backwards compatible with older script. This will be\n+    \/\/ removed as part of JDK-8356317.\n+    PrintCDSLogsAsAOTLogs = false;\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -102,0 +102,3 @@\n+  product(bool, PrintCDSLogsAsAOTLogs, true, DIAGNOSTIC,                    \\\n+          \"Print [cds] logs as [aot] logs when AOT cache is used\")          \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1513,1 +1513,1 @@\n-  log_info(cds)(\"    narrow_klass_base = \" PTR_FORMAT \", arrow_klass_pointer_bits = %d, narrow_klass_shift = %d\",\n+  log_info(cds)(\"    narrow_klass_base = \" PTR_FORMAT \", narrow_klass_pointer_bits = %d, narrow_klass_shift = %d\",\n@@ -1818,1 +1818,7 @@\n-      MetaspaceShared::report_loading_error(\"Loading static archive failed.\");\n+      if (CDSConfig::is_dumping_final_static_archive()) {\n+        MetaspaceShared::report_loading_error(\"Loading AOT configuration failed: %s\", _full_path);\n+      } else if (CDSConfig::new_aot_flags_used()) {\n+        MetaspaceShared::report_loading_error(\"Loading AOT cache failed: %s\", _full_path);\n+      } else {\n+        MetaspaceShared::report_loading_error(\"Loading static archive failed: %s\", _full_path);\n+      }\n@@ -1821,1 +1827,1 @@\n-      MetaspaceShared::report_loading_error(\"Loading dynamic archive failed.\");\n+      MetaspaceShared::report_loading_error(\"Loading dynamic archive failed: %s\", _full_path);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1144,1 +1144,2 @@\n-    ls.print_cr(\"An error has occurred while processing the %s. Run with -Xlog:cds for details.\", CDSConfig::type_of_archive_being_loaded());\n+    ls.print_cr(\"An error has occurred while processing the %s. Run with -Xlog:%s for details.\",\n+                CDSConfig::type_of_archive_being_loaded(), PrintCDSLogsAsAOTLogs ? \"aot\" : \"cds\");\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+\n+#include \"cds\/cds_globals.hpp\"\n@@ -183,1 +185,10 @@\n-  for (size_t i = 0; i < _ntags; i++) {\n+  size_t i = 0;\n+\n+#if INCLUDE_CDS\n+  if (PrintCDSLogsAsAOTLogs && _ntags > 0 && _tags[0] == LogTag::_aot && ts.tag(0) == LogTag::_cds) {\n+    \/\/ Consider it a match\n+    i++;\n+  }\n+#endif\n+\n+  for (; i < _ntags; i++) {\n","filename":"src\/hotspot\/share\/logging\/logSelection.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+\n+#include \"cds\/cds_globals.hpp\"\n@@ -35,0 +37,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -98,1 +101,10 @@\n-  for (size_t i = 0; i < _ntags; i++) {\n+  size_t i = 0;\n+\n+#if INCLUDE_CDS\n+  if (PrintCDSLogsAsAOTLogs && _ntags > 0 && _tag[0] == LogTag::_cds) {\n+    st->print(\"%s\", \"aot\");\n+    i++;\n+  }\n+#endif\n+\n+  for (; i < _ntags; i++) {\n","filename":"src\/hotspot\/share\/logging\/logTagSet.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        out.shouldMatch(\"cds.*hello[.]aot\");\n+        out.shouldMatch(\"hello[.]aot\");\n@@ -145,1 +145,1 @@\n-        out.shouldMatch(\"cds.*hello[.]aot\");\n+        out.shouldMatch(\"hello[.]aot\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/AOTFlags.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,3 +53,3 @@\n-                    out.shouldMatch(\"cds,class.*unreg AppWithCustomLoaders[$]MyLoadeeA\")\n-                       .shouldMatch(\"cds,class.*array \\\\[LAppWithCustomLoaders[$]MyLoadeeA;\")\n-                       .shouldNotMatch(\"cds,class.* ReturnIntegerAsString\");\n+                    out.shouldMatch(\",class.*unreg AppWithCustomLoaders[$]MyLoadeeA\")\n+                       .shouldMatch(\",class.*array \\\\[LAppWithCustomLoaders[$]MyLoadeeA;\")\n+                       .shouldNotMatch(\",class.* ReturnIntegerAsString\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/AOTCacheSupportForCustomLoaders.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @summary when AOT cache options are used, old \"cds\" logs should be aliased to \"aot\".\n+ * @requires vm.cds\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build Hello\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar Hello\n+ * @run driver AOTLoggingTag\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class AOTLoggingTag {\n+    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+    static String aotConfigFile = \"hello.aotconfig\";\n+    static String aotCacheFile = \"hello.aot\";\n+    static String helloClass = \"Hello\";\n+\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer out;\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Training Run\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=record\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-Xlog:aot\",\n+            \"-cp\", appJar, helloClass);\n+\n+        out = CDSTestUtils.executeAndLog(pb, \"train\");\n+        out.shouldContain(\"[info][aot] Writing binary AOTConfiguration file:\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Assembly Phase\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTMode=create\",\n+            \"-XX:AOTConfiguration=\" + aotConfigFile,\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:aot\",\n+            \"-cp\", appJar);\n+        out = CDSTestUtils.executeAndLog(pb, \"asm\");\n+        out.shouldContain(\"[info][aot] Opened AOT configuration file hello.aotconfig\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Production Run with AOTCache\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:aot\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldContain(\"[info][aot] Opened AOT cache hello.aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"-Xlog:aot+heap should alias to -Xlog:cds+heap\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:aot+heap\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldNotContain(\"No tag set matches selection: aot+heap\");\n+        out.shouldContain(\"[info][aot,heap] resolve subgraph java.lang.Integer$IntegerCache\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"When running with AOT cache, -Xlog:cds should be printed using [aot] decoration\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=\" + aotCacheFile,\n+            \"-Xlog:cds\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldContain(\"[info][aot] Opened AOT cache hello.aot\");\n+        out.shouldHaveExitValue(0);\n+\n+        \/\/----------------------------------------------------------------------\n+        printTestCase(\"Production Run: errors should be printed with [aot] decoration\");\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"-XX:AOTCache=nosuchfile.aot\",\n+            \"-XX:AOTMode=on\",\n+            \"-cp\", appJar, helloClass);\n+        out = CDSTestUtils.executeAndLog(pb, \"prod\");\n+        out.shouldContain(\"[error][aot] An error has occurred while processing the AOT cache. Run with -Xlog:aot for details.\");\n+        out.shouldContain(\"[error][aot] Loading AOT cache failed: nosuchfile.aot\");\n+        out.shouldNotHaveExitValue(0);\n+    }\n+\n+    static int testNum = 0;\n+    static void printTestCase(String s) {\n+        System.out.println(\"vvvvvvv TEST CASE \" + testNum + \": \" + s + \" starts here vvvvvvv\");\n+        testNum++;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/AOTLoggingTag.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -140,1 +140,1 @@\n-                \"-Xlog:cds,cds+aot+load,cds+class=debug\",\n+                \"-Xlog:cds,aot+load,cds+class=debug\",\n@@ -161,1 +161,1 @@\n-                out.shouldMatch(\"cds,class.* SimpleCusty\");\n+                out.shouldMatch(\",class.* SimpleCusty\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/BulkLoaderTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -97,3 +97,3 @@\n-                out.shouldMatch(\"cds,class.* FakeCodeLocationApp\");\n-                out.shouldNotMatch(\"cds,class.* ClassNotInJar1\");\n-                out.shouldNotMatch(\"cds,class.* ClassNotInJar2\");\n+                out.shouldMatch(\",class.* FakeCodeLocationApp\");\n+                out.shouldNotMatch(\",class.* ClassNotInJar1\");\n+                out.shouldNotMatch(\",class.* ClassNotInJar2\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/FakeCodeLocation.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}