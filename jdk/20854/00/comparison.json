{"files":[{"patch":"@@ -50,1 +50,1 @@\n-Java_java_nio_MappedMemoryUtils_isLoaded0(JNIEnv *env, jobject obj, jlong address,\n+MMU_isLoaded0(JNIEnv *env, jobject obj, jlong address,\n@@ -97,1 +97,1 @@\n-Java_java_nio_MappedMemoryUtils_load0(JNIEnv *env, jobject obj, jlong address,\n+MMU_load0(JNIEnv *env, jobject obj, jlong address,\n@@ -108,1 +108,1 @@\n-Java_java_nio_MappedMemoryUtils_unload0(JNIEnv *env, jobject obj, jlong address,\n+MMU_unload0(JNIEnv *env, jobject obj, jlong address,\n@@ -202,1 +202,1 @@\n-Java_java_nio_MappedMemoryUtils_force0(JNIEnv *env, jobject obj, jobject fdo,\n+MMU_force0(JNIEnv *env, jobject obj, jobject fdo,\n@@ -221,0 +221,16 @@\n+\n+#define FD \"Ljava\/io\/FileDescriptor;\"\n+\n+static JNINativeMethod methods[] = {\n+    {\"isLoaded0\", \"(JJJ)Z\",             (void *)&MMU_isLoaded0},\n+    {\"load0\",     \"(JJ)V\",              (void *)&MMU_load0},\n+    {\"unload0\",   \"(JJ)V\",              (void *)&MMU_unload0},\n+    {\"force0\",    \"(\" FD \"JJ)V\",        (void *)&MMU_force0},\n+};\n+\n+JNIEXPORT void JNICALL\n+Java_java_nio_MappedMemoryUtils_registerNatives(JNIEnv *env, jclass cls)\n+{\n+    (*env)->RegisterNatives(env, cls,\n+                            methods, sizeof(methods)\/sizeof(methods[0]));\n+}\n","filename":"src\/java.base\/aix\/native\/libnio\/MappedMemoryUtils.c","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2453,1 +2453,2 @@\n-        long addr = findNativeInternal(loader, entryName);\n+        NativeLibraries nativeLibraries = nativeLibrariesFor(loader);\n+        long addr = nativeLibraries.find(entryName);\n@@ -2465,1 +2466,1 @@\n-    static long findNativeInternal(ClassLoader loader, String entryName) {\n+    static NativeLibraries nativeLibrariesFor(ClassLoader loader) {\n@@ -2467,1 +2468,1 @@\n-            return BootLoader.getNativeLibraries().find(entryName);\n+            return BootLoader.getNativeLibraries();\n@@ -2469,1 +2470,1 @@\n-            return loader.libraries.find(entryName);\n+            return loader.libraries;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+import jdk.internal.loader.NativeLibraries;\n@@ -2658,2 +2659,2 @@\n-            public long findNative(ClassLoader loader, String entry) {\n-                return ClassLoader.findNativeInternal(loader, entry);\n+            public NativeLibraries nativeLibrariesFor(ClassLoader loader) {\n+                return ClassLoader.nativeLibrariesFor(loader);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.loader.NativeLibraries;\n@@ -259,1 +260,2 @@\n-            long addr = javaLangAccess.findNative(loader, name);\n+            NativeLibraries nativeLibraries = javaLangAccess.nativeLibrariesFor(loader);\n+            long addr = nativeLibraries.find(name);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,0 +119,12 @@\n+    \/* Register the natives via the static initializer.\n+     *\n+     * This is required, as these native methods are \"scoped methods\" (see ScopedMemoryAccess).\n+     * As such, it's better not to end up doing a full JNI lookup while in a scoped method context,\n+     * as that will make the stack trace too deep.\n+     *\/\n+    private static native void registerNatives();\n+    static {\n+        registerNatives();\n+        isLoaded0(0, 0, 0);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/MappedMemoryUtils.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.foreign.SymbolLookup;\n@@ -49,0 +50,1 @@\n+import jdk.internal.loader.NativeLibraries;\n@@ -471,1 +473,5 @@\n-    long findNative(ClassLoader loader, String entry);\n+    \/**\n+     * Returns the {@link NativeLibraries} object associated with the provided class loader.\n+     * This is used by {@link SymbolLookup#loaderLookup()}.\n+     *\/\n+    NativeLibraries nativeLibrariesFor(ClassLoader loader);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-Java_java_nio_MappedMemoryUtils_isLoaded0(JNIEnv *env, jobject obj, jlong address,\n+MMU_isLoaded0(JNIEnv *env, jobject obj, jlong address,\n@@ -84,1 +84,1 @@\n-Java_java_nio_MappedMemoryUtils_load0(JNIEnv *env, jobject obj, jlong address,\n+MMU_load0(JNIEnv *env, jobject obj, jlong address,\n@@ -95,1 +95,1 @@\n-Java_java_nio_MappedMemoryUtils_unload0(JNIEnv *env, jobject obj, jlong address,\n+MMU_unload0(JNIEnv *env, jobject obj, jlong address,\n@@ -106,1 +106,1 @@\n-Java_java_nio_MappedMemoryUtils_force0(JNIEnv *env, jobject obj, jobject fdo,\n+MMU_force0(JNIEnv *env, jobject obj, jobject fdo,\n@@ -115,0 +115,16 @@\n+\n+#define FD \"Ljava\/io\/FileDescriptor;\"\n+\n+static JNINativeMethod methods[] = {\n+    {\"isLoaded0\", \"(JJJ)Z\",             (void *)&MMU_isLoaded0},\n+    {\"load0\",     \"(JJ)V\",              (void *)&MMU_load0},\n+    {\"unload0\",   \"(JJ)V\",              (void *)&MMU_unload0},\n+    {\"force0\",    \"(\" FD \"JJ)V\",        (void *)&MMU_force0},\n+};\n+\n+JNIEXPORT void JNICALL\n+Java_java_nio_MappedMemoryUtils_registerNatives(JNIEnv *env, jclass cls)\n+{\n+    (*env)->RegisterNatives(env, cls,\n+                            methods, sizeof(methods)\/sizeof(methods[0]));\n+}\n","filename":"src\/java.base\/unix\/native\/libnio\/MappedMemoryUtils.c","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-Java_java_nio_MappedMemoryUtils_isLoaded0(JNIEnv *env, jobject obj, jlong address,\n+MMU_isLoaded0(JNIEnv *env, jobject obj, jlong address,\n@@ -47,1 +47,1 @@\n-Java_java_nio_MappedMemoryUtils_load0(JNIEnv *env, jobject obj, jlong address,\n+MMU_load0(JNIEnv *env, jobject obj, jlong address,\n@@ -54,1 +54,1 @@\n-Java_java_nio_MappedMemoryUtils_unload0(JNIEnv *env, jobject obj, jlong address,\n+MMU_unload0(JNIEnv *env, jobject obj, jlong address,\n@@ -61,1 +61,1 @@\n-Java_java_nio_MappedMemoryUtils_force0(JNIEnv *env, jobject obj, jobject fdo,\n+MMU_force0(JNIEnv *env, jobject obj, jobject fdo,\n@@ -109,0 +109,16 @@\n+\n+#define FD \"Ljava\/io\/FileDescriptor;\"\n+\n+static JNINativeMethod methods[] = {\n+    {\"isLoaded0\", \"(JJJ)Z\",             (void *)&MMU_isLoaded0},\n+    {\"load0\",     \"(JJ)V\",              (void *)&MMU_load0},\n+    {\"unload0\",   \"(JJ)V\",              (void *)&MMU_unload0},\n+    {\"force0\",    \"(\" FD \"JJ)V\",        (void *)&MMU_force0},\n+};\n+\n+JNIEXPORT void JNICALL\n+Java_java_nio_MappedMemoryUtils_registerNatives(JNIEnv *env, jclass cls)\n+{\n+    (*env)->RegisterNatives(env, cls,\n+                            methods, sizeof(methods)\/sizeof(methods[0]));\n+}\n","filename":"src\/java.base\/windows\/native\/libnio\/MappedMemoryUtils.c","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires vm.flavor != \"zero\"\n+ * @modules java.base\/jdk.internal.vm.annotation java.base\/jdk.internal.misc\n+ * @key randomness\n+ * @run testng\/othervm TestMappedHandshake\n+ * @run testng\/othervm -Xint TestMappedHandshake\n+ * @run testng\/othervm -XX:TieredStopAtLevel=1 TestMappedHandshake\n+ * @run testng\/othervm -XX:-TieredCompilation TestMappedHandshake\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.*;\n+\n+public class TestMappedHandshake {\n+\n+    static final int SEGMENT_SIZE = 1_000_000;\n+    static final int ACCESS_START_DELAY_MILLIS = 100;\n+    static final int POST_ACCESS_DELAY_MILLIS = 1;\n+    static final int TIMED_RUN_TIME_SECONDS = 10;\n+    static final int MAX_EXECUTOR_WAIT_SECONDS = 20;\n+\n+    static final int NUM_ACCESSORS = 5;\n+\n+    static final Path tempPath;\n+\n+    static {\n+        try {\n+            File file = File.createTempFile(\"buffer\", \"txt\");\n+            file.deleteOnExit();\n+            tempPath = file.toPath();\n+            Files.write(file.toPath(), new byte[SEGMENT_SIZE], StandardOpenOption.WRITE);\n+\n+        } catch (IOException ex) {\n+            throw new ExceptionInInitializerError(ex);\n+        }\n+    }\n+\n+    @Test\n+    public void testHandshake() throws InterruptedException, IOException {\n+        try (FileChannel fileChannel = FileChannel.open(tempPath, StandardOpenOption.READ, StandardOpenOption.WRITE) ;\n+             Arena arena = Arena.ofShared()) {\n+            MemorySegment segment = fileChannel.map(FileChannel.MapMode.READ_WRITE, 0L, SEGMENT_SIZE, arena);\n+            ExecutorService accessExecutor = Executors.newFixedThreadPool(NUM_ACCESSORS + 1);\n+            \/\/ start handshaker\n+            accessExecutor.execute(new Handshaker());\n+            Thread.sleep(ACCESS_START_DELAY_MILLIS);\n+            \/\/ start accessors\n+            for (int i = 0 ; i < NUM_ACCESSORS ; i++) {\n+                accessExecutor.execute(new MappedSegmentAccessor(segment));\n+            }\n+\n+            accessExecutor.shutdown();\n+            assertTrue(accessExecutor.awaitTermination(MAX_EXECUTOR_WAIT_SECONDS, TimeUnit.SECONDS));\n+        }\n+    }\n+\n+    static abstract class TimedAction implements Runnable {\n+        @Override\n+        public void run() {\n+            long start = System.currentTimeMillis();\n+            while (true) {\n+                try {\n+                    doAction();\n+                } catch (Throwable ex) {\n+                    \/\/ ignore\n+                } finally {\n+                    long elapsed = System.currentTimeMillis() - start;\n+                    if (elapsed > TIMED_RUN_TIME_SECONDS * 1000) {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        abstract void doAction() throws Throwable;\n+    }\n+\n+    static class MappedSegmentAccessor extends TimedAction {\n+\n+        final MemorySegment segment;\n+\n+        MappedSegmentAccessor(MemorySegment segment) {\n+            this.segment = segment;\n+        }\n+\n+        @Override\n+        void doAction() throws Throwable {\n+            segment.load();\n+            Thread.sleep(POST_ACCESS_DELAY_MILLIS);\n+            segment.isLoaded();\n+            Thread.sleep(POST_ACCESS_DELAY_MILLIS);\n+            segment.unload();\n+            Thread.sleep(POST_ACCESS_DELAY_MILLIS);\n+            segment.force();\n+        }\n+    }\n+\n+    static class Handshaker extends TimedAction {\n+\n+        @Override\n+        public void doAction() {\n+            Arena.ofShared().close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestMappedHandshake.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"}]}