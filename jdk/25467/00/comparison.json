{"files":[{"patch":"@@ -82,2 +82,0 @@\n-    -taglet build.tools.taglet.PreviewNote \\\n-    --preview-note-tag previewNote \\\n","filename":"make\/Docs.gmk","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,127 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package build.tools.taglet;\n-\n-import java.util.EnumSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-\n-import javax.lang.model.element.Element;\n-import javax.tools.Diagnostic;\n-\n-\n-import com.sun.source.doctree.DocTree;\n-import com.sun.source.doctree.UnknownInlineTagTree;\n-import jdk.javadoc.doclet.Doclet;\n-import jdk.javadoc.doclet.DocletEnvironment;\n-import jdk.javadoc.doclet.Reporter;\n-import jdk.javadoc.doclet.StandardDoclet;\n-import jdk.javadoc.doclet.Taglet;\n-\n-import static com.sun.source.doctree.DocTree.Kind.UNKNOWN_INLINE_TAG;\n-\n-\/**\n- * An inline tag to insert a note formatted as preview note.\n- * The tag can be used as follows:\n- *\n- * <pre>\n- * {&commat;previewNote jep-number [Preview note heading]}\n- * Preview note content\n- * {&commat;previewNote}\n- * <\/pre>\n- *\n- *\/\n-public class PreviewNote implements Taglet {\n-\n-    static final String TAG_NAME = \"previewNote\";\n-    Reporter reporter = null;\n-\n-    @Override\n-    public void init(DocletEnvironment env, Doclet doclet) {\n-        if (doclet instanceof StandardDoclet stdoclet) {\n-            reporter = stdoclet.getReporter();\n-        }\n-    }\n-\n-    \/**\n-     * Returns the set of locations in which the tag may be used.\n-     *\/\n-    @Override\n-    public Set<Location> getAllowedLocations() {\n-        return EnumSet.allOf(Taglet.Location.class);\n-    }\n-\n-    @Override\n-    public boolean isInlineTag() {\n-        return true;\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return TAG_NAME;\n-    }\n-\n-    @Override\n-    public String toString(List<? extends DocTree> tags, Element elem) {\n-\n-        for (DocTree tag : tags) {\n-            if (tag.getKind() == UNKNOWN_INLINE_TAG) {\n-                UnknownInlineTagTree inlineTag = (UnknownInlineTagTree) tag;\n-                String[] content = inlineTag.getContent().toString().trim().split(\"\\\\s+\", 2);\n-                if (!content[0].isBlank()) {\n-                    StringBuilder sb = new StringBuilder(\"\"\"\n-                       <div class=\"preview-block\" style=\"margin-top:10px; display:block; max-width:max-content;\">\n-                       \"\"\");\n-                    if (content.length == 2) {\n-                        sb.append(\"\"\"\n-                                <div class=\"preview-label\">\n-                                \"\"\")\n-                          .append(content[1])\n-                          .append(\"\"\"\n-                                <\/div>\n-                                \"\"\");\n-                    }\n-                    sb.append(\"\"\"\n-                            <div class=\"preview-comment\">\n-                            \"\"\");\n-                    return sb.toString();\n-                } else {\n-                    return \"\"\"\n-                             <\/div>\n-                             <\/div>\n-                            \"\"\";\n-                }\n-            }\n-        }\n-\n-        if (reporter == null) {\n-            throw new IllegalArgumentException(\"@\" + TAG_NAME + \" taglet content must be begin or end\");\n-        }\n-        reporter.print(Diagnostic.Kind.ERROR, \"@\" + TAG_NAME + \" taglet content must be begin or end\");\n-        return \"\";\n-    }\n-}\n","filename":"make\/jdk\/src\/classes\/build\/tools\/taglet\/PreviewNote.java","additions":0,"deletions":127,"binary":false,"changes":127,"status":"deleted"}]}