{"files":[{"patch":"@@ -89,2 +89,3 @@\n-<li><a href=\"#inline-variables\" id=\"toc-inline-variables\">Inline\n-Variables<\/a><\/li>\n+<li><a href=\"#variable-templates-and-inline-variables\"\n+id=\"toc-variable-templates-and-inline-variables\">Variable Templates and\n+Inline Variables<\/a><\/li>\n@@ -940,6 +941,12 @@\n-<h3 id=\"inline-variables\">Inline Variables<\/h3>\n-<p>Variables with static storage duration may be declared\n-<code>inline<\/code> (<a href=\"https:\/\/wg21.link\/p0386r2\">p0386r2<\/a>).\n-This has similar effects as for declaring a function inline: it can be\n-defined, identically, in multiple translation units, must be defined in\n-every translation unit in which it is <a\n+<h3 id=\"variable-templates-and-inline-variables\">Variable Templates and\n+Inline Variables<\/h3>\n+<p>The use of variable templates (including static data member\n+templates) (<a href=\"https:\/\/wg21.link\/N3651\">N3651<\/a>) is permitted.\n+They provide parameterized variables and constants in a simple and\n+direct form, instead of requiring the use of various workarounds.<\/p>\n+<p>Variables with static storage duration and variable templates may be\n+declared <code>inline<\/code> (<a\n+href=\"https:\/\/wg21.link\/p0386r2\">p0386r2<\/a>), and this usage is\n+permitted. This has similar effects as for declaring a function inline:\n+it can be defined, identically, in multiple translation units, must be\n+defined in every translation unit in which it is <a\n@@ -958,2 +965,2 @@\n-<p>A <code>constexpr<\/code> static data member is implicitly\n-<code>inline<\/code>. As a consequence, an <a\n+<p>A <code>constexpr<\/code> static data member or static data member\n+template is implicitly <code>inline<\/code>. As a consequence, an <a\n@@ -961,7 +968,8 @@\n-title=\"One Definition Rule\">ODR use<\/a> of such a variable doesn't\n-require a definition in some .cpp file. (This is a change from\n-pre-C++17. Beginning with C++17, such a definition is considered a\n-duplicate definition, and is deprecated.)<\/p>\n-<p>Declaring a <code>thread_local<\/code> variable <code>inline<\/code> is\n-forbidden for HotSpot code. <a href=\"#thread_local\">The use of\n-<code>thread_local<\/code><\/a> is already heavily restricted.<\/p>\n+title=\"One Definition Rule\">ODR use<\/a> of such a member doesn't require\n+a definition in some .cpp file. (This is a change from pre-C++17.\n+Beginning with C++17, such a definition is considered a duplicate\n+definition, and is deprecated.)<\/p>\n+<p>Declaring a <code>thread_local<\/code> variable template or\n+<code>inline<\/code> variable is forbidden in HotSpot code. <a\n+href=\"#thread_local\">The use of <code>thread_local<\/code><\/a> is already\n+heavily restricted.<\/p>\n@@ -1856,3 +1864,0 @@\n-<li><p>Variable templates (<a\n-href=\"https:\/\/isocpp.org\/files\/papers\/N3651.pdf\">n3651<\/a>, <a\n-href=\"http:\/\/wg21.link\/p0127r2\">p0127r2<\/a>)<\/p><\/li>\n","filename":"doc\/hotspot-style.html","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -859,1 +859,1 @@\n-### Inline Variables\n+### Variable Templates and Inline Variables\n@@ -861,6 +861,11 @@\n-Variables with static storage duration may be declared `inline`\n-([p0386r2](https:\/\/wg21.link\/p0386r2)). This has similar effects as for\n-declaring a function inline: it can be defined, identically, in multiple\n-translation units, must be defined in every translation unit in which it is\n-[ODR used][ODR], and the behavior of the program is as if there is exactly one\n-variable.\n+The use of variable templates (including static data member templates)\n+([N3651](https:\/\/wg21.link\/N3651)) is permitted. They provide parameterized\n+variables and constants in a simple and direct form, instead of requiring the\n+use of various workarounds.\n+\n+Variables with static storage duration and variable templates may be declared\n+`inline` ([p0386r2](https:\/\/wg21.link\/p0386r2)), and this usage is\n+permitted. This has similar effects as for declaring a function inline: it can\n+be defined, identically, in multiple translation units, must be defined in\n+every translation unit in which it is [ODR used][ODR], and the behavior of the\n+program is as if there is exactly one variable.\n@@ -877,2 +882,3 @@\n-A `constexpr` static data member is implicitly `inline`. As a consequence, an\n-[ODR use][ODR] of such a variable doesn't require a definition in some .cpp\n+A `constexpr` static data member or static data member template\n+is implicitly `inline`. As a consequence, an\n+[ODR use][ODR] of such a member doesn't require a definition in some .cpp\n@@ -882,2 +888,3 @@\n-Declaring a `thread_local` variable `inline` is forbidden for HotSpot code.\n-[The use of `thread_local`](#thread_local) is already heavily restricted.\n+Declaring a `thread_local` variable template or `inline` variable is forbidden\n+in HotSpot code.  [The use of `thread_local`](#thread_local) is already\n+heavily restricted.\n@@ -1852,4 +1859,0 @@\n-* Variable templates\n-([n3651](https:\/\/isocpp.org\/files\/papers\/N3651.pdf),\n-[p0127r2](http:\/\/wg21.link\/p0127r2))\n-\n","filename":"doc\/hotspot-style.md","additions":18,"deletions":15,"binary":false,"changes":33,"status":"modified"}]}