{"files":[{"patch":"@@ -65,0 +65,1 @@\n+#include \"prims\/whitebox.hpp\"\n@@ -66,0 +67,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -2680,0 +2682,26 @@\n+bool ClassFileParser::wb_clinit_removal_check(const Method * const method,\n+                                              const int index,\n+                                              const int length,\n+                                              int & offset,\n+                                              TRAPS) {\n+  auto is_corelib_method = [&]() {\n+      return _class_name->starts_with(\"java\/\", 5) ||\n+             _class_name->starts_with(\"jdk\/\", 4) ||\n+             _class_name->starts_with(\"sun\/\", 4);\n+  };\n+\n+  if (_clinit_loading_disabled && method->name() == vmSymbols::class_initializer_name() && !is_corelib_method()) {\n+    \/\/ As it is not possible to change Array size, we have to create a new one\n+    Array<Method*>* new_methods = MetadataFactory::new_array<Method*>(_loader_data,\n+                  length-1,\n+                  nullptr,\n+                  CHECK_false);\n+    memcpy(new_methods->data(), _methods->data(), index * sizeof(Method*));\n+    MetadataFactory::free_array<Method*>(_loader_data, _methods);\n+    _methods = new_methods;\n+\n+    offset -= 1;\n+    return true;\n+  }\n+  return false;\n+}\n@@ -2705,0 +2733,1 @@\n+    int skipping_offset = 0;\n@@ -2712,0 +2741,7 @@\n+      NOT_PRODUCT(\n+       bool skip_clinit = wb_clinit_removal_check(method, index, length, \/*out*\/ skipping_offset, CHECK);\n+       if (skip_clinit) {\n+            continue;\n+       }\n+      )\n+\n@@ -2721,1 +2757,1 @@\n-      _methods->at_put(index, method);\n+      _methods->at_put(index + skipping_offset, method);\n@@ -2724,1 +2760,1 @@\n-    if (_need_verify && length > 1) {\n+    if (_need_verify && length + skipping_offset > 1) {\n@@ -2729,1 +2765,1 @@\n-      for (int i = 0; i < length; i++) {\n+      for (int i = 0; i < length + skipping_offset; i++) {\n@@ -5304,0 +5340,2 @@\n+  _clinit_loading_disabled(\n+              WhiteBoxAPI ? Atomic::load(&WhiteBox::clinit_loading_disabled) : false),\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":41,"deletions":3,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -196,0 +196,2 @@\n+  bool _clinit_loading_disabled;        \/\/ WhiteBox testing feature\n+\n@@ -281,0 +283,6 @@\n+  bool wb_clinit_removal_check(const Method * const method,\n+                               const int index,\n+                               const int length,\n+                               int & offset,\n+                               TRAPS);\n+\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -153,0 +153,1 @@\n+volatile bool WhiteBox::clinit_loading_disabled = false;\n@@ -292,0 +293,10 @@\n+WB_ENTRY(void, WB_DisableClinitLoading(JNIEnv* env, jobject o)) {\n+    NOT_PRODUCT(Atomic::store(&WhiteBox::clinit_loading_disabled, true));\n+}\n+WB_END\n+\n+WB_ENTRY(void, WB_EnableClinitLoading(JNIEnv* env, jobject o)) {\n+    NOT_PRODUCT(Atomic::store(&WhiteBox::clinit_loading_disabled, false);)\n+}\n+WB_END\n+\n@@ -2714,0 +2725,2 @@\n+  {CC\"disableClinitLoading\",             CC\"()V\",     (void*)&WB_DisableClinitLoading},\n+  {CC\"enableClinitLoading\",              CC\"()V\",     (void*)&WB_EnableClinitLoading},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+  static volatile bool clinit_loading_disabled;\n","filename":"src\/hotspot\/share\/prims\/whitebox.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,0 +75,11 @@\n+  \/**\n+   * Disables clinit loading (does not affect core library classes)\n+   *\/\n+  public native void disableClinitLoading();\n+\n+  \/**\n+   * Restores clinit loading feature (the default Hotspot behaviour)\n+   *\/\n+  public native void enableClinitLoading();\n+\n+\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}