{"files":[{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.DefaultCellEditor;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.table.TableColumn;\n+\n+\/*\n+ * @test\n+ * @bug 4129401\n+ * @summary Tests that keystroking for combobox cell editor in JTable works\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4129401\n+ *\/\n+\n+public class bug4129401 {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1. Move the mouse cursor to the cell \"CELL 2 1\",\n+               which contains JComboBox and click left mouse button\n+               to drop down combobox list.\n+            2. Change selected item in the combobox list\n+               using up and down arrows.\n+            3. Press Esc. JComboBox drop down list should hide.\n+            If all was successful then test passes, else test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4129401::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        Object data[][] = new Object[4][2];\n+        JComboBox cb = new JComboBox();\n+        cb.addItem(\"Item1\");\n+        cb.addItem(\"Item2\");\n+        cb.addItem(\"Item3\");\n+        cb.addItem(\"Item4\");\n+        data[0][0] = \"CELL 0 0\";\n+        data[0][1] = \"CELL 0 1\";\n+        data[1][0] = \"CELL 1 0\";\n+        data[1][1] = \"CELL 1 1\";\n+        data[2][0] = \"CELL 2 0\";\n+        data[2][1] = \"CELL 2 1\";\n+        data[3][0] = \"CELL 3 0\";\n+        data[3][1] = \"CELL 3 1\";\n+        String[] str = {\"Column 0\", \"Column 1\"};\n+        JTable tbl = new JTable(data, str);\n+        JScrollPane sp = new JScrollPane(tbl);\n+\n+        TableColumn col = tbl.getColumn(\"Column 1\");\n+        col.setCellEditor(new DefaultCellEditor(cb));\n+\n+        JFrame f = new JFrame(\"4129401 test\");\n+        f.getContentPane().add(sp);\n+        f.setBounds(100, 100, 300, 300);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4129401.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.FontMetrics;\n+import java.util.Vector;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableColumn;\n+\n+\/*\n+ * @test\n+ * @bug 4193727\n+ * @summary Tests that resizing JTable via TableColumn's\n+ *          setWidth(int) repaints correctly\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4193727\n+ *\/\n+\n+public class bug4193727 {\n+    static EnhancedJTable tblResults;\n+    static JButton bTest = new JButton(\"Resize\");\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Push button \"Resize\".\n+            If either of the following happen, test fails:\n+            1) The size of the columns are wrong\n+            2) The JTable is not repainting correctly\n+\n+            Otherwise test passes.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4193727::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4193727\");\n+        Vector v = new Vector();\n+        Vector data = new Vector();\n+        Vector cols = new Vector();\n+\n+        cols.add(\"Name\");\n+        cols.add(\"Address\");\n+        data.add(\"Steve\");\n+        data.add(\"100 East Main Street\");\n+        v.add(data);\n+\n+        data.add(\"Richard\");\n+        data.add(\"99 Main Road\");\n+        v.add(data);\n+\n+        frame.setLayout(new BorderLayout());\n+        tblResults = new EnhancedJTable(v, cols);\n+        MyTableHeader mth = new MyTableHeader();\n+        for (int i = 0; i < tblResults.getColumnCount(); i++)\n+            tblResults.getColumnModel().getColumn(i).setHeaderRenderer(mth.getTHR());\n+        tblResults.setAutoResizeMode(EnhancedJTable.AUTO_RESIZE_OFF);\n+\n+        JScrollPane pane = new JScrollPane(tblResults);\n+        frame.add(pane, BorderLayout.CENTER);\n+        JPanel panel = new JPanel();\n+        panel.add(bTest);\n+        frame.add(panel, BorderLayout.EAST);\n+        bTest.addActionListener(e -> tblResults.autoSizeColumns());\n+        frame.pack();\n+        return frame;\n+    }\n+}\n+\n+class MyTableHeader extends TableColumn {\n+    public TableCellRenderer getTHR() {\n+        return createDefaultHeaderRenderer();\n+    }\n+}\n+\n+class EnhancedJTable extends JTable {\n+    public EnhancedJTable(Vector data, Vector colNames) {\n+        super(data, colNames);\n+    }\n+\n+    public synchronized void autoSizeColumns() {\n+        setAutoResizeMode(AUTO_RESIZE_OFF);\n+        int colcnt = getColumnCount();\n+        int rowcnt = getRowCount();\n+\n+        for (int i = 0; i < colcnt; i++) {\n+            \/\/ get the max column width needed\n+            Component cell = getColumnModel().getColumn(i).getHeaderRenderer()\n+                    .getTableCellRendererComponent(this, null, false, false, -1, i);\n+            FontMetrics fm = cell.getFontMetrics(cell.getFont());\n+            int max = SwingUtilities.computeStringWidth(fm, getColumnModel().getColumn(i).getHeaderValue()\n+                    .toString() + \"  \");\n+            for (int j = 0; j < rowcnt; j++) {\n+                \/\/ add 2 spaces to account for gutter\n+                int width = SwingUtilities.computeStringWidth(fm, getValueAt(j, i).toString() + \"  \");\n+                if (max < width) max = width;\n+            }\n+            \/\/ set the new column width\n+            getColumnModel().getColumn(i).setWidth(max);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4193727.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.util.ArrayList;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.table.AbstractTableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4242631\n+ * @summary Tests that JTable repaints itself correctly after a record\n+ *          has been removed and added to the table model.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4242631\n+ *\/\n+\n+public class bug4242631 {\n+    private static JButton addButton;\n+    private static JButton removeButton;\n+    private static JButton bothButton;\n+    private static SimpleTableModel tableModel;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            Press Add button to add a record to the table. The record added should\n+            have number 0. Then press Remove\/Add button some times. The record number\n+            should increase as you press. If it does not, test fails.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(50)\n+                .testUI(bug4242631::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4242631\");\n+        GridBagLayout grid = new GridBagLayout();\n+\n+        frame.setLayout(grid);\n+        GridBagConstraints c = new GridBagConstraints();\n+        c.insets = new Insets(2, 2, 2, 2);\n+\n+        \/\/ Add button.\n+        c.gridx = 0;\n+        c.gridy = 0;\n+        grid.setConstraints(addButton = new JButton(\"Add\"), c);\n+        frame.add(addButton);\n+\n+        \/\/ Edit button.\n+        c.gridx = 1;\n+        c.gridy = 0;\n+        grid.setConstraints(removeButton = new JButton(\"Remove\"), c);\n+        frame.add(removeButton);\n+\n+        \/\/ Remove button.\n+        c.gridx = 2;\n+        c.gridy = 0;\n+        grid.setConstraints(bothButton = new JButton(\"Remove\/Add\"), c);\n+        frame.add(bothButton);\n+\n+        \/\/ Table.\n+        c.gridx = 0;\n+        c.gridy = 1;\n+        c.gridwidth = 6;\n+        c.gridheight = 0;\n+        c.anchor = GridBagConstraints.CENTER;\n+        c.fill = GridBagConstraints.BOTH;\n+        c.weightx = 1.0;\n+        c.weighty = 1.0;\n+        JScrollPane scroll = null;\n+        tableModel = new SimpleTableModel();\n+        grid.setConstraints(scroll = new JScrollPane(new JTable(tableModel)), c);\n+        frame.add(scroll);\n+\n+        \/\/ Create some action listeners.\n+        addButton.addActionListener(event -> tableModel.addRow());\n+        removeButton.addActionListener(event -> tableModel.removeRow());\n+        bothButton.addActionListener(event -> tableModel.removeThenAddRow());\n+\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    static class SimpleTableModel extends AbstractTableModel {\n+        int counter = 0;\n+        ArrayList list = new ArrayList();\n+\n+        public SimpleTableModel() {}\n+        public int getColumnCount() { return 1; }\n+        public int getRowCount() { return list.size(); }\n+\n+        public Object getValueAt(int row, int col) {\n+            String str = (String) list.get(row);\n+            return str;\/\/ + \".\" + col;\n+        }\n+\n+        public void addRow() {\n+            list.add(\"\" + counter++);\n+            fireTableRowsInserted(list.size() - 1, list.size() - 1);\n+        }\n+\n+        public void removeRow() {\n+            if (list.size() == 0) return;\n+            list.remove(list.size() - 1);\n+            fireTableRowsDeleted(list.size(), list.size());\n+        }\n+\n+        public void removeThenAddRow() {\n+            if (list.size() == 0) return;\n+            removeRow();\n+            addRow();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4242631.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.MouseEvent;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.ChangeEvent;\n+import javax.swing.event.MenuKeyEvent;\n+import javax.swing.table.DefaultTableModel;\n+import javax.swing.table.TableCellEditor;\n+import javax.swing.table.TableModel;\n+\n+\/*\n+ * @test\n+ * @bug 4460382\n+ * @summary Tests that table editor works\n+ * @key headful\n+ * @run main bug4460382\n+ *\/\n+\n+public class bug4460382 {\n+    static JFrame frame;\n+    static Table table;\n+    static volatile Point tableLoc;\n+    static volatile Point p;\n+    static int row1 = -1;\n+    static int row2 = -1;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(250);\n+            SwingUtilities.invokeAndWait(() -> createTestUI());\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                tableLoc = table.getLocationOnScreen();\n+                p = table.getCellRect(0, 0, true).getLocation();\n+            });\n+\n+            robot.mouseMove(tableLoc.x + p.x + 10, tableLoc.y + p.y + 10);\n+            robot.waitForIdle();\n+\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+\n+            robot.keyPress(MenuKeyEvent.VK_A);\n+            robot.keyRelease(MenuKeyEvent.VK_A);\n+            robot.keyPress(MenuKeyEvent.VK_ENTER);\n+            robot.keyRelease(MenuKeyEvent.VK_ENTER);\n+            robot.waitForIdle();\n+\n+            if (row1 != row2) {\n+                throw new RuntimeException(\"Failed 4460382: editingRow is \" + row2);\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void createTestUI() {\n+        frame = new JFrame(\"bug4460382\");\n+        table = new Table();\n+        frame.add(new JScrollPane(table));\n+        frame.setLocationRelativeTo(null);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    static class Table extends JTable {\n+        public Table() {\n+            String[][] data = {{\"Click and Edit here\"},\n+                    {\"Click and Edit here\"},\n+                    {\"Click and Edit here\"}};\n+            String[] columnNames = {\"Editable Column\"};\n+\n+            TableModel model = new DefaultTableModel(data, columnNames) {\n+                public boolean isCellEditable(int rowIndex, int columnIndex) {\n+                    return true;\n+                }\n+            };\n+\n+            setModel(model);\n+        }\n+\n+        public void editingStopped(ChangeEvent e) {\n+            TableCellEditor editor = getCellEditor();\n+            Object value = editor.getCellEditorValue();\n+            row1 = editingRow;\n+            setValueAt(value, editingRow, editingColumn);\n+            row2 = editingRow;\n+            super.editingStopped(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4460382.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"}]}