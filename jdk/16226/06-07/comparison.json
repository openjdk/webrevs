{"files":[{"patch":"@@ -363,3 +363,3 @@\n-     * non-{@code null} and non-{@linkplain String#isEmpty empty}, then a\n-     * {@code '.'} and then {@code extension} are appended to the path returned\n-     * by {@linkplain #withoutExtension wihoutExtension}, otherwise the path\n+     * non-{@linkplain String#isEmpty empty}, then a {@code '.'} and then\n+     * {@code extension} are appended to the path returned by\n+     * {@linkplain #withoutExtension wihoutExtension}, otherwise the path\n@@ -402,1 +402,1 @@\n-     *        the extension to add, may be {@code null}\n+     *        the extension to append\n@@ -407,0 +407,3 @@\n+     * @throws IllegalArgumentException\n+     *         if {@code extension} starts with a period character\n+     *\n@@ -413,0 +416,5 @@\n+        Objects.requireNonNull(extension);\n+\n+        if (extension.startsWith(\".\"))\n+            throw new IllegalArgumentException(\"extension starts with '.'\");\n+\n@@ -414,1 +422,1 @@\n-        if (extension == null || extension.isEmpty())\n+        if (extension.isEmpty())\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -99,0 +99,10 @@\n+    @Test (expectedExceptions = NullPointerException.class)\n+    public static void withNPE() {\n+        Path.of(\"foo.bar\").withExtension(null);\n+    }\n+\n+    @Test (expectedExceptions = IllegalArgumentException.class)\n+    public static void withIAE() {\n+        Path.of(\"foo.bar\").withExtension(\".gus\");\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/file\/Path\/Extensions.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}