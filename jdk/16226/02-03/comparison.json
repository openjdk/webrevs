{"files":[{"patch":"@@ -415,1 +415,1 @@\n-        return path.resolveSibling(path.getFileName() + \".\" + extension.trim());\n+        return path.resolveSibling(path.getFileName() + \".\" + extension);\n@@ -418,92 +418,0 @@\n-    \/\/ \/**\n-    \/\/  * Removes the file extension from this path's file name. If there is no\n-    \/\/  * file extension ({@linkplain #getExtension getExtension} returns the\n-    \/\/  * empty string), unless that is due to the last character in the file name\n-    \/\/  * being a period, then this path is returned unmodified. Otherwise the\n-    \/\/  * last period and all subsequent characters are removed from this path's\n-    \/\/  * file name and the result is returned.\n-    \/\/  *\n-    \/\/  * @apiNote\n-    \/\/  * Replacing an extension may be accomplished by first removing the current\n-    \/\/  * extension and then appending the new extension. For example, the\n-    \/\/  * extension of an audio track might be changed as:\n-    \/\/  * {@snippet lang=\"java\" :\n-    \/\/  * Path lossless = Path.of(\"library\/audio\/track.flac\");\n-    \/\/  * Path lossy = lossless.removeExtension().addExtension(\"mp3\");\n-    \/\/  * }\n-    \/\/  * where {@code lossy.toString()} would return\n-    \/\/  * {@code \"library\/audio\/track.mp3\"}.\n-    \/\/  *\n-    \/\/  * @implSpec\n-    \/\/  * The default implementation is equivalent for this path to:\n-    \/\/  * {@snippet lang=\"java\" :\n-    \/\/  * String oldName = getFileName().toString();\n-    \/\/  * String newName = oldName.substring(0, oldName.lastIndexOf('.'));\n-    \/\/  * return getParent().resolve(newName);\n-    \/\/  * }\n-    \/\/  *\n-    \/\/  * @return this path without the file extension of its file name\n-    \/\/  *\n-    \/\/  * @see #addExtension\n-    \/\/  * @see #getExtension\n-    \/\/  *\n-    \/\/  * @since 23\n-    \/\/  *\/\n-    \/\/ default Path removeExtension() {\n-    \/\/     Path fileName = getFileName();\n-    \/\/     if (getExtension().isEmpty())\n-    \/\/         return fileName;\n-\n-    \/\/     \/\/ As the extension is non-empty, the file name must be non-null\n-    \/\/     \/\/ and contain a period character\n-    \/\/     String fileNameString = fileName.toString();\n-    \/\/     int lastPeriodIndex = fileNameString.lastIndexOf('.');\n-    \/\/     Path newName = of(fileNameString.substring(0, lastPeriodIndex));\n-\n-    \/\/     Path parent = getParent();\n-    \/\/     return parent == null ? newName : parent.resolve(newName);\n-    \/\/ }\n-\n-    \/\/ \/**\n-    \/\/  * Adds an extension to this path's file name. If the supplied parameter is\n-    \/\/  * {@code null} or empty, or this path's file name is {@code null}, then\n-    \/\/  * this path is returned unmodified. Otherwise, a period character is\n-    \/\/  * appended to this path's file name followed by the supplied extension\n-    \/\/  * parameter and the result is returned.\n-    \/\/  *\n-    \/\/  * @apiNote\n-    \/\/  * No account is taken as to whether this path's file name has a non-empty\n-    \/\/  * extension. The supplied extension is not examined but appended as given.\n-    \/\/  *\n-    \/\/  * @implSpec\n-    \/\/  * The default implementation is equivalent for this path to:\n-    \/\/  *\n-    \/\/  * {@snippet lang=\"java\" :\n-    \/\/  * String oldName = getFileName().toString();\n-    \/\/  * String newName = oldName + \".\" + extension;\n-    \/\/  * return getParent().resolve(newName);\n-    \/\/  * }\n-    \/\/  *\n-    \/\/  * @param extension\n-    \/\/  *        the extension to add\n-    \/\/  *\n-    \/\/  * @return this path with the supplied extension appended to its file name\n-    \/\/  *\n-    \/\/  * @see #getExtension\n-    \/\/  * @see #removeExtension\n-    \/\/  *\n-    \/\/  * @since 23\n-    \/\/  *\/\n-    \/\/ default Path addExtension(String extension) {\n-    \/\/     Path fileName = null;\n-    \/\/     if (extension == null || extension.isEmpty() ||\n-    \/\/         (fileName = getFileName()) == null)\n-    \/\/         return this;\n-\n-    \/\/     String s = fileName.toString();\n-    \/\/     Path name = Path.of(s + \".\" + extension);\n-\n-    \/\/     Path parent = getParent();\n-    \/\/     return parent == null ? name : parent.resolve(name);\n-    \/\/ }\n-\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":1,"deletions":93,"binary":false,"changes":94,"status":"modified"}]}