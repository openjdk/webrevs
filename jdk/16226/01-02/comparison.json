{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,9 +261,3 @@\n-     * or if the first character in the file name string is the only period,\n-     * then the extension is {@linkplain String#isEmpty empty}.\n-     *\n-     * @apiNote\n-     * This method and the methods {@linkplain #removeExtension removeExtension}\n-     * and {@linkplain #addExtension addExtension} must satisfy the invariant:\n-     * {@snippet lang=\"java\" :\n-     * assert equals(removeExtension().addExtension(getExtension()));\n-     * }\n+     * or if the prefix of the file name string is a sequence of periods\n+     * including the last period, then the extension is\n+     * {@linkplain String#isEmpty empty}.\n@@ -272,1 +266,1 @@\n-     * The default implementation is equivalent for this path to:\n+     * The default implementation is in most cases equivalent for this path to:\n@@ -274,4 +268,4 @@\n-     * int lastPeriod = fileName.lastIndexOf('.');\n-     * return lastPeriod <= 0\n-     *    ? \"\"\n-     *    : fileName.substring(lastPeriod + 1);\n+     *     int lastPeriod = fileNameString.lastIndexOf('.');\n+     *     return lastPeriod <= 0\n+     *        ? \"\"\n+     *        : fileNameString.substring(lastPeriod + 1);\n@@ -283,2 +277,2 @@\n-     * @see #addExtension\n-     * @see #removeExtension\n+     * @see #withExtension\n+     * @see #withoutExtension\n@@ -286,1 +280,1 @@\n-     * @since 22\n+     * @since 23\n@@ -299,0 +293,10 @@\n+        boolean prefixIsPeriods = true;\n+        for (int idx = lastPeriodIndex - 1; idx >= 0; idx--) {\n+            if (fileNameString.charAt(idx) != '.') {\n+                prefixIsPeriods = false;\n+                break;\n+            }\n+        }\n+        if (prefixIsPeriods)\n+            return \"\";\n+\n@@ -304,6 +308,12 @@\n-     * Removes the file extension from this path's file name. If there is no\n-     * file extension ({@linkplain #getExtension getExtension} returns the\n-     * empty string), unless that is due to the last character in the file name\n-     * being a period, then this path is returned unmodified. Otherwise the\n-     * last period and all subsequent characters are removed from this path's\n-     * file name and the result is returned.\n+     * Returns a copy of this {@code Path} with the file name extension removed.\n+     * If this path has no extension, then the path is returned unchanged.\n+     *\n+     * <p> A compound extension may be replaced by invoking this method and\n+     * then the {@linkplain #withExtension withExtension} method on the result.\n+     * For example, to convert the {@code \"tar.gz\"} compound extension\n+     * to {@code \"zip\"}:\n+     * {@snippet lang=\"java\" :\n+     *    Path p = Path.of(\"archive.tar.gz\");\n+     *    Path q = p.withoutExtension().withExtension(\"zip\");\n+     * }\n+     * where {@code q.toString()} would return {@code \"archive.zip\"}.\n@@ -312,3 +322,1 @@\n-     * Replacing an extension may be accomplished by first removing the current\n-     * extension and then appending the new extension. For example, the\n-     * extension of an audio track might be changed as:\n+     * This method must satisfy the invariant:\n@@ -316,2 +324,2 @@\n-     * Path lossless = Path.of(\"library\/audio\/track.flac\");\n-     * Path lossy = lossless.removeExtension().addExtension(\"mp3\");\n+     *     assert equals(Path.of(withoutExtension().toString()\n+     *         + (getExtension().isEmpty() ? \"\" : (\".\" + getExtension())));\n@@ -319,2 +327,2 @@\n-     * where {@code lossy.toString()} would return\n-     * {@code \"library\/audio\/track.mp3\"}.\n+     * wherein the {@code Path}-{@code String} conversions are assumed to be\n+     * lossless.\n@@ -325,3 +333,6 @@\n-     * String oldName = getFileName().toString();\n-     * String newName = oldName.substring(0, oldName.lastIndexOf('.'));\n-     * return getParent().resolve(newName);\n+     *     if (getExtension().isEmpty()) {\n+     *         return this;\n+     *     } else {\n+     *         return Path.of(toString().substring(0,\n+     *             toString().length() - getExtension().length() - 1));\n+     *     }\n@@ -330,1 +341,2 @@\n-     * @return this path without the file extension of its file name\n+     * @return the resulting path or this path if it does not contain a file\n+     *         name extension\n@@ -332,1 +344,0 @@\n-     * @see #addExtension\n@@ -334,0 +345,1 @@\n+     * @see #withExtension\n@@ -335,1 +347,1 @@\n-     * @since 22\n+     * @since 23\n@@ -337,13 +349,6 @@\n-    default Path removeExtension() {\n-        Path fileName = getFileName();\n-        if (getExtension().isEmpty())\n-            return fileName;\n-\n-        \/\/ As the extension is non-empty, the file name must be non-null\n-        \/\/ and contain a period character\n-        String fileNameString = fileName.toString();\n-        int lastPeriodIndex = fileNameString.lastIndexOf('.');\n-        Path newName = of(fileNameString.substring(0, lastPeriodIndex));\n-\n-        Path parent = getParent();\n-        return parent == null ? newName : parent.resolve(newName);\n+    default Path withoutExtension() {\n+        String ext = getExtension();\n+        if (ext.isEmpty())\n+            return this;\n+        String str = toString();\n+        return Path.of(str.substring(0, str.length() - ext.length() - 1));\n@@ -353,5 +358,23 @@\n-     * Adds an extension to this path's file name. If the supplied parameter is\n-     * {@code null} or empty, or this path's file name is {@code null}, then\n-     * this path is returned unmodified. Otherwise, a period character is\n-     * appended to this path's file name followed by the supplied extension\n-     * parameter and the result is returned.\n+     * Returns a copy of this {@code Path} with the file name extension altered.\n+     * If the specified extension is non-{@code null},\n+     * non-{@linkplain String#isEmpty empty}, and not\n+     * {@linkplain String#isBlank blank}, then a {@code '.'} and then\n+     * {@code extension} are appended to the path returned by\n+     * {@linkplain #withoutExtension wihoutExtension}, otherwise the path\n+     * returned by {@linkplain #withoutExtension wihoutExtension} is returned.\n+     *\n+     * <p> For example, an audio track's extension might be changed as:\n+     * {@snippet lang=\"java\" :\n+     *     Path lossless = Path.of(\"library\/audio\/track.flac\");\n+     *     Path lossy = lossless.withExtension(\"mp3\");\n+     * }\n+     * where {@code lossy.toString()} would return\n+     * {@code \"library\/audio\/track.mp3\"}.\n+     *\n+     * <p> An additional extension may be appended so as to form a compound\n+     * extension as:\n+     * {@snippet lang=\"java\" :\n+     *     Path p = Path.of(\"archive.tar\");\n+     *     Path q = p.withExtension(p.getExtension() + \".\" + \"gz\");\n+     * }\n+     * where {@code q.toString()} would return {@code \"archive.tar.gz\"}.\n@@ -360,2 +383,4 @@\n-     * No account is taken as to whether this path's file name has a non-empty\n-     * extension. The supplied extension is not examined but appended as given.\n+     * This method must satisfy the invariant:\n+     * {@snippet lang=\"java\" :\n+     *     assert equals(withExtension(getExtension()));\n+     * }\n@@ -367,3 +392,6 @@\n-     * String oldName = getFileName().toString();\n-     * String newName = oldName + \".\" + extension;\n-     * return getParent().resolve(newName);\n+     *     Path p = withoutExtension();\n+     *     if (extension == null || extension.isEmpty() || extension.isBlank()) {\n+     *         return p;\n+     *     } else {\n+     *         return p.resolveSibling(p.getFileName() + \".\" + extension);\n+     *     }\n@@ -371,1 +399,0 @@\n-     *\n@@ -373,1 +400,1 @@\n-     *        the extension to add\n+     *        the extension to add, may be {@code null}\n@@ -375,1 +402,2 @@\n-     * @return this path with the supplied extension appended to its file name\n+     * @return a {@code Path} with the requested extension replacing the\n+     *         existing extension, if any\n@@ -378,1 +406,1 @@\n-     * @see #removeExtension\n+     * @see #withoutExtension\n@@ -380,1 +408,1 @@\n-     * @since 22\n+     * @since 23\n@@ -382,8 +410,4 @@\n-    default Path addExtension(String extension) {\n-        Path fileName = null;\n-        if (extension == null || extension.isEmpty() ||\n-            (fileName = getFileName()) == null)\n-            return this;\n-\n-        String s = fileName.toString();\n-        Path name = Path.of(s + \".\" + extension);\n+    default Path withExtension(String extension) {\n+        Path path = withoutExtension();\n+        if (extension == null || extension.isEmpty() || extension.isBlank())\n+            return path;\n@@ -391,2 +415,1 @@\n-        Path parent = getParent();\n-        return parent == null ? name : parent.resolve(name);\n+        return path.resolveSibling(path.getFileName() + \".\" + extension.trim());\n@@ -395,0 +418,92 @@\n+    \/\/ \/**\n+    \/\/  * Removes the file extension from this path's file name. If there is no\n+    \/\/  * file extension ({@linkplain #getExtension getExtension} returns the\n+    \/\/  * empty string), unless that is due to the last character in the file name\n+    \/\/  * being a period, then this path is returned unmodified. Otherwise the\n+    \/\/  * last period and all subsequent characters are removed from this path's\n+    \/\/  * file name and the result is returned.\n+    \/\/  *\n+    \/\/  * @apiNote\n+    \/\/  * Replacing an extension may be accomplished by first removing the current\n+    \/\/  * extension and then appending the new extension. For example, the\n+    \/\/  * extension of an audio track might be changed as:\n+    \/\/  * {@snippet lang=\"java\" :\n+    \/\/  * Path lossless = Path.of(\"library\/audio\/track.flac\");\n+    \/\/  * Path lossy = lossless.removeExtension().addExtension(\"mp3\");\n+    \/\/  * }\n+    \/\/  * where {@code lossy.toString()} would return\n+    \/\/  * {@code \"library\/audio\/track.mp3\"}.\n+    \/\/  *\n+    \/\/  * @implSpec\n+    \/\/  * The default implementation is equivalent for this path to:\n+    \/\/  * {@snippet lang=\"java\" :\n+    \/\/  * String oldName = getFileName().toString();\n+    \/\/  * String newName = oldName.substring(0, oldName.lastIndexOf('.'));\n+    \/\/  * return getParent().resolve(newName);\n+    \/\/  * }\n+    \/\/  *\n+    \/\/  * @return this path without the file extension of its file name\n+    \/\/  *\n+    \/\/  * @see #addExtension\n+    \/\/  * @see #getExtension\n+    \/\/  *\n+    \/\/  * @since 23\n+    \/\/  *\/\n+    \/\/ default Path removeExtension() {\n+    \/\/     Path fileName = getFileName();\n+    \/\/     if (getExtension().isEmpty())\n+    \/\/         return fileName;\n+\n+    \/\/     \/\/ As the extension is non-empty, the file name must be non-null\n+    \/\/     \/\/ and contain a period character\n+    \/\/     String fileNameString = fileName.toString();\n+    \/\/     int lastPeriodIndex = fileNameString.lastIndexOf('.');\n+    \/\/     Path newName = of(fileNameString.substring(0, lastPeriodIndex));\n+\n+    \/\/     Path parent = getParent();\n+    \/\/     return parent == null ? newName : parent.resolve(newName);\n+    \/\/ }\n+\n+    \/\/ \/**\n+    \/\/  * Adds an extension to this path's file name. If the supplied parameter is\n+    \/\/  * {@code null} or empty, or this path's file name is {@code null}, then\n+    \/\/  * this path is returned unmodified. Otherwise, a period character is\n+    \/\/  * appended to this path's file name followed by the supplied extension\n+    \/\/  * parameter and the result is returned.\n+    \/\/  *\n+    \/\/  * @apiNote\n+    \/\/  * No account is taken as to whether this path's file name has a non-empty\n+    \/\/  * extension. The supplied extension is not examined but appended as given.\n+    \/\/  *\n+    \/\/  * @implSpec\n+    \/\/  * The default implementation is equivalent for this path to:\n+    \/\/  *\n+    \/\/  * {@snippet lang=\"java\" :\n+    \/\/  * String oldName = getFileName().toString();\n+    \/\/  * String newName = oldName + \".\" + extension;\n+    \/\/  * return getParent().resolve(newName);\n+    \/\/  * }\n+    \/\/  *\n+    \/\/  * @param extension\n+    \/\/  *        the extension to add\n+    \/\/  *\n+    \/\/  * @return this path with the supplied extension appended to its file name\n+    \/\/  *\n+    \/\/  * @see #getExtension\n+    \/\/  * @see #removeExtension\n+    \/\/  *\n+    \/\/  * @since 23\n+    \/\/  *\/\n+    \/\/ default Path addExtension(String extension) {\n+    \/\/     Path fileName = null;\n+    \/\/     if (extension == null || extension.isEmpty() ||\n+    \/\/         (fileName = getFileName()) == null)\n+    \/\/         return this;\n+\n+    \/\/     String s = fileName.toString();\n+    \/\/     Path name = Path.of(s + \".\" + extension);\n+\n+    \/\/     Path parent = getParent();\n+    \/\/     return parent == null ? name : parent.resolve(name);\n+    \/\/ }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":190,"deletions":75,"binary":false,"changes":265,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,3 +54,4 @@\n-            {\"..a\",            \"a\"},\n-            {\"...a\",           \"a\"},\n-            {\"....a\",          \"a\"},\n+            {\"..a\",            \"\"},\n+            {\"...a\",           \"\"},\n+            {\"....a\",          \"\"},\n+            {\"a...gus\",        \"gus\"},\n@@ -60,1 +61,2 @@\n-            {\"..foo\",          \"foo\"},\n+            {\".foo\",           \"\"},\n+            {\"..foo\",          \"\"},\n@@ -62,0 +64,2 @@\n+            {\"foo..\",          \"\"},\n+            {\"foo..b\",         \"b\"},\n@@ -72,0 +76,1 @@\n+            {\"foo.bar\",        \"bar\"},\n@@ -87,1 +92,1 @@\n-    public static void replace(String pathname, String extension) {\n+    public static void with(String pathname, String extension) {\n@@ -90,1 +95,11 @@\n-        Path actual = p.removeExtension().addExtension(extension);\n+        Path actual = p.withExtension(extension);\n+        Assert.assertEquals(actual, expected);\n+    }\n+\n+    @Test(dataProvider = \"pathExtProvider\")\n+    public static void without(String pathname, String extension) {\n+        Path p = Path.of(pathname);\n+        Path expected = p;\n+        String ext = p.getExtension();\n+        Path actual = Path.of(p.withoutExtension().toString()\n+                              + (ext.isEmpty() ? \"\" : (\".\" + extension)));\n","filename":"test\/jdk\/java\/nio\/file\/Path\/Extensions.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"}]}