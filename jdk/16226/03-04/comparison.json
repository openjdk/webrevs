{"files":[{"patch":"@@ -53,1 +53,4 @@\n- * elements, and {@link #getExtension() getExtension} to obtain its extension.\n+ * elements, {@link #getExtension() getExtension} to obtain its file name\n+ * extension, and {@link #withoutExtension withoutExtension} and\n+ * {@link #withExtension withExtension} to remove or alter the extension,\n+ * respectively.\n@@ -265,0 +268,11 @@\n+     * <p> A typical case is where a file name string contains a single\n+     * period character followed by an extension which usually indicates\n+     * the contents or purpose of the file. For example, a file named\n+     * {@code \"archive.zip\"} has extension {@code \"zip\"} which signals that\n+     * the file is in the <i>ZIP<\/i> losslessly compressed archive file format.\n+     *\n+     * <p> A compound file name extension has two or more concatenated extension\n+     * strings such as in {@code \"archive.tar.gz\"}, which signifies that\n+     * the file is an archive file ({@code \"tar\"}) losslessly compressed\n+     * according to the <i>gzip<\/i> format.\n+     *\n@@ -308,2 +322,11 @@\n-     * Returns a copy of this {@code Path} with the file name extension removed.\n-     * If this path has no extension, then the path is returned unchanged.\n+     * Returns a {@code Path} with the same sequence of elements as this\n+     * path, but with no file name extension. If this path has no extension,\n+     * then the path is returned unchanged.\n+     *\n+     * <p> For example, an audio track's extension might be removed as:\n+     * {@snippet lang=\"java\" :\n+     *     Path music = Path.of(\"library\/audio\/track.flac\");\n+     *     Path noise = lossless.withoutExtension();\n+     * }\n+     * where {@code noise.toString()} would return\n+     * {@code \"library\/audio\/track\"}.\n@@ -321,9 +344,0 @@\n-     * @apiNote\n-     * This method must satisfy the invariant:\n-     * {@snippet lang=\"java\" :\n-     *     assert equals(Path.of(withoutExtension().toString()\n-     *         + (getExtension().isEmpty() ? \"\" : (\".\" + getExtension())));\n-     * }\n-     * wherein the {@code Path}-{@code String} conversions are assumed to be\n-     * lossless.\n-     *\n@@ -341,0 +355,8 @@\n+     * This method must satisfy the invariant:\n+     * {@snippet lang=\"java\" :\n+     *     assert equals(Path.of(withoutExtension().toString()\n+     *         + (getExtension().isEmpty() ? \"\" : (\".\" + getExtension())));\n+     * }\n+     * wherein the {@code Path}-{@code String} conversions are assumed to be\n+     * lossless.\n+     *\n@@ -354,1 +376,1 @@\n-        return Path.of(str.substring(0, str.length() - ext.length() - 1));\n+        return resolveSibling(str.substring(0, str.length() - ext.length() - 1));\n@@ -358,6 +380,5 @@\n-     * Returns a copy of this {@code Path} with the file name extension altered.\n-     * If the specified extension is non-{@code null},\n-     * non-{@linkplain String#isEmpty empty}, and not\n-     * {@linkplain String#isBlank blank}, then a {@code '.'} and then\n-     * {@code extension} are appended to the path returned by\n-     * {@linkplain #withoutExtension wihoutExtension}, otherwise the path\n+     * Returns a {@code Path} with the same sequence of elements as this path,\n+     * but with an altered file name extension. If the specified extension is\n+     * non-{@code null} and non-{@linkplain String#isEmpty empty}, then a\n+     * {@code '.'} and then {@code extension} are appended to the path returned\n+     * by {@linkplain #withoutExtension wihoutExtension}, otherwise the path\n@@ -374,1 +395,1 @@\n-     * <p> An additional extension may be appended so as to form a compound\n+     * <p> A compound extension may be formed by appending an additional\n@@ -382,6 +403,0 @@\n-     * @apiNote\n-     * This method must satisfy the invariant:\n-     * {@snippet lang=\"java\" :\n-     *     assert equals(withExtension(getExtension()));\n-     * }\n-     *\n@@ -393,1 +408,1 @@\n-     *     if (extension == null || extension.isEmpty() || extension.isBlank()) {\n+     *     if (extension == null || extension.isEmpty()) {\n@@ -399,0 +414,6 @@\n+     *\n+     * This method must satisfy the invariant:\n+     * {@snippet lang=\"java\" :\n+     *     assert equals(withExtension(getExtension()));\n+     * }\n+     *\n@@ -412,1 +433,1 @@\n-        if (extension == null || extension.isEmpty() || extension.isBlank())\n+        if (extension == null || extension.isEmpty())\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":49,"deletions":28,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/nio\/file\/Path\/Extensions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}