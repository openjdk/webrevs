{"files":[{"patch":"@@ -53,1 +53,1 @@\n- * elements.\n+ * elements, and {@link #getExtension() getExtension} to obtain its extension.\n@@ -252,0 +252,143 @@\n+    \/**\n+     * Returns the file extension of this path's file name as a {@code String}.\n+     * The extension is acquired from this {@code Path} by obtaining the\n+     * {@linkplain #getFileName file name element}, deriving its {@linkplain\n+     * #toString string representation}, and then extracting a substring\n+     * determined by the position of the last period character ('.', U+002E\n+     * FULL STOP) within the file name string. If the file name element is\n+     * {@code null}, or if the file name string does not contain a period\n+     * character, or if the last character in the file name string is a period,\n+     * or if the first character in the file name string is the only period,\n+     * then the extension is {@linkplain String#isEmpty empty}.\n+     *\n+     * @apiNote\n+     * This method and the methods {@linkplain #removeExtension removeExtension}\n+     * and {@linkplain #addExtension addExtension} must satisfy the invariant:\n+     * {@snippet lang=\"java\" :\n+     * assert equals(removeExtension().addExtension(getExtension()));\n+     * }\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent for this path to:\n+     * {@snippet lang=\"java\" :\n+     * int lastPeriod = fileName.lastIndexOf('.');\n+     * return lastPeriod <= 0\n+     *    ? \"\"\n+     *    : fileName.substring(lastPeriod + 1);\n+     * }\n+     *\n+     * @return  the file name extension of this path, which might be the\n+     *          empty string\n+     *\n+     * @see #addExtension\n+     * @see #removeExtension\n+     *\n+     * @since 22\n+     *\/\n+    default String getExtension() {\n+        Path fileName = getFileName();\n+        if (fileName == null)\n+            return \"\";\n+\n+        String fileNameString = fileName.toString();\n+        int lastPeriodIndex = fileNameString.lastIndexOf('.');\n+\n+        if (lastPeriodIndex <= 0)\n+            return \"\";\n+\n+        \/\/ If lastPeriodIndex == fileNameString.length() - 1 then \"\" is returned\n+        return fileNameString.substring(lastPeriodIndex + 1);\n+    }\n+\n+    \/**\n+     * Removes the file extension from this path's file name. If there is no\n+     * file extension ({@linkplain #getExtension getExtension} returns the\n+     * empty string), unless that is due to the last character in the file name\n+     * being a period, then this path is returned unmodified. Otherwise the\n+     * last period and all subsequent characters are removed from this path's\n+     * file name and the result is returned.\n+     *\n+     * @apiNote\n+     * Replacing an extension may be accomplished by first removing the current\n+     * extension and then appending the new extension. For example, the\n+     * extension of an audio track might be changed as:\n+     * {@snippet lang=\"java\" :\n+     * Path lossless = Path.of(\"library\/audio\/track.flac\");\n+     * Path lossy = lossless.removeExtension().addExtension(\"mp3\");\n+     * }\n+     * where {@code lossy.toString()} would return\n+     * {@code \"library\/audio\/track.mp3\"}.\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent for this path to:\n+     * {@snippet lang=\"java\" :\n+     * String oldName = getFileName().toString();\n+     * String newName = oldName.substring(0, oldName.lastIndexOf('.'));\n+     * return getParent().resolve(newName);\n+     * }\n+     *\n+     * @return this path without the file extension of its file name\n+     *\n+     * @see #addExtension\n+     * @see #getExtension\n+     *\n+     * @since 22\n+     *\/\n+    default Path removeExtension() {\n+        Path fileName = getFileName();\n+        if (getExtension().isEmpty())\n+            return fileName;\n+\n+        \/\/ As the extension is non-empty, the file name must be non-null\n+        \/\/ and contain a period character\n+        String fileNameString = fileName.toString();\n+        int lastPeriodIndex = fileNameString.lastIndexOf('.');\n+        Path newName = of(fileNameString.substring(0, lastPeriodIndex));\n+\n+        Path parent = getParent();\n+        return parent == null ? newName : parent.resolve(newName);\n+    }\n+\n+    \/**\n+     * Adds an extension to this path's file name. If the supplied parameter is\n+     * {@code null} or empty, or this path's file name is {@code null}, then\n+     * this path is returned unmodified. Otherwise, a period character is\n+     * appended to this path's file name followed by the supplied extension\n+     * parameter and the result is returned.\n+     *\n+     * @apiNote\n+     * No account is taken as to whether this path's file name has a non-empty\n+     * extension. The supplied extension is not examined but appended as given.\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent for this path to:\n+     *\n+     * {@snippet lang=\"java\" :\n+     * String oldName = getFileName().toString();\n+     * String newName = oldName + \".\" + extension;\n+     * return getParent().resolve(newName);\n+     * }\n+     *\n+     * @param extension\n+     *        the extension to add\n+     *\n+     * @return this path with the supplied extension appended to its file name\n+     *\n+     * @see #getExtension\n+     * @see #removeExtension\n+     *\n+     * @since 22\n+     *\/\n+    default Path addExtension(String extension) {\n+        Path fileName = null;\n+        if (extension == null || extension.isEmpty() ||\n+            (fileName = getFileName()) == null)\n+            return this;\n+\n+        String s = fileName.toString();\n+        Path name = Path.of(s + \".\" + extension);\n+\n+        Path parent = getParent();\n+        return parent == null ? name : parent.resolve(name);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":144,"deletions":1,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8057113\n+ * @summary Verify getExtension method\n+ * @run testng Extensions\n+ *\/\n+public class Extensions {\n+    \/**\n+     * Returns path name string and expected extension pairs.\n+     *\n+     * @return {@code {{\"pathname\", \"extension\"},...}}\n+     *\/\n+    @DataProvider\n+    static Object[][] pathExtProvider() {\n+        Object[][] pairs = {\n+            {\"\",               \"\"},\n+            {\".\",              \"\"},\n+            {\"..\",             \"\"},\n+            {\"...\",            \"\"},\n+            {\"....\",           \"\"},\n+            {\".....\",          \"\"},\n+            {\"aa\",             \"\"},\n+            {\"a.\",             \"\"},\n+            {\".a\",             \"\"},\n+            {\"..a\",            \"a\"},\n+            {\"...a\",           \"a\"},\n+            {\"....a\",          \"a\"},\n+            {\".a.b\",           \"b\"},\n+            {\"...a.b\",         \"b\"},\n+            {\"...a.b.\",        \"\"},\n+            {\"..foo\",          \"foo\"},\n+            {\"foo.\",           \"\"},\n+            {\"test.\",          \"\"},\n+            {\"test..\",         \"\"},\n+            {\"test...\",        \"\"},\n+            {\"test.rb\",        \"rb\"},\n+            {\"a\/b\/d\/test.rb\" , \"rb\"},\n+            {\".a\/b\/d\/test.rb\", \"rb\"},\n+            {\"test\",           \"\"},\n+            {\".profile\",       \"\"},\n+            {\".profile.sh\",    \"sh\"},\n+            {\"foo.tar.gz\",     \"gz\"},\n+            {\"foo.bar.\",       \"\"},\n+            {\"archive.zip\",    \"zip\"},\n+            {\"compress.gzip\",  \"gzip\"},\n+            {\"waitwhat.&$!#%\", \"&$!#%\"},\n+            {\"6.283185307\",    \"283185307\"}\n+        };\n+        return pairs;\n+    }\n+\n+    @Test(dataProvider = \"pathExtProvider\")\n+    public static void get(String pathname, String extension) {\n+        Assert.assertEquals(Path.of(pathname).getExtension(), extension);\n+    }\n+\n+    @Test(dataProvider = \"pathExtProvider\")\n+    public static void replace(String pathname, String extension) {\n+        Path p = Path.of(pathname);\n+        Path expected = p;\n+        Path actual = p.removeExtension().addExtension(extension);\n+        Assert.assertEquals(actual, expected);\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/Path\/Extensions.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}