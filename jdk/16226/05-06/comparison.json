{"files":[{"patch":"@@ -257,9 +257,7 @@\n-     * The extension is acquired from this {@code Path} by obtaining the\n-     * {@linkplain #getFileName file name element}, deriving its {@linkplain\n-     * #toString string representation}, and then extracting a substring\n-     * determined by the position of the last period character ('.', U+002E\n-     * FULL STOP) within the file name string. If the file name element is\n-     * {@code null}, or if the file name string does not contain a period\n-     * character, or if the last character in the file name string is a period,\n-     * or if the prefix of the file name string is a sequence of periods\n-     * including the last period, then the extension is\n+     * The extension is acquired from this {@code Path} by obtaining the file\n+     * name element, locating the position of the last period character\n+     * ('.', U+002E FULL STOP) within the file name element, and then extracting\n+     * the portion of the file name element after the last period as a string.\n+     * If the file name element is {@code null}, the file name does not contain\n+     * a period, the last character in the file name is a period, or the content\n+     * of the file name before the last period is empty, then the extension is\n@@ -268,5 +266,5 @@\n-     * <p> A typical case is where a file name string contains a single\n-     * period character followed by an extension which usually indicates\n-     * the contents or purpose of the file. For example, a file named\n-     * {@code \"archive.zip\"} has extension {@code \"zip\"} which signals that\n-     * the file is in the <i>ZIP<\/i> losslessly compressed archive file format.\n+     * <p> A typical case is where a file name contains a single period\n+     * character followed by an extension which usually indicates the contents\n+     * or purpose of the file. For example, a file named {@code \"archive.zip\"}\n+     * has extension {@code \"zip\"} which signals that the file is in the\n+     * <i>ZIP<\/i> losslessly compressed archive file format.\n@@ -274,2 +272,2 @@\n-     * <p> A compound file name extension has two or more concatenated extension\n-     * strings such as in {@code \"archive.tar.gz\"}, which signifies that\n+     * <p> A compound file name extension has two or more concatenated\n+     * extensions such as in {@code \"archive.tar.gz\"}, which signifies that\n@@ -289,1 +287,1 @@\n-     *          empty string\n+     *          {@linkplain String#isEmpty empty string}\n@@ -307,10 +305,0 @@\n-        boolean prefixIsPeriods = true;\n-        for (int idx = lastPeriodIndex - 1; idx >= 0; idx--) {\n-            if (fileNameString.charAt(idx) != '.') {\n-                prefixIsPeriods = false;\n-                break;\n-            }\n-        }\n-        if (prefixIsPeriods)\n-            return \"\";\n-\n@@ -356,8 +344,0 @@\n-     * This method must satisfy the invariant:\n-     * {@snippet lang=\"java\" :\n-     *     assert toString().equals(withoutExtension().toString()\n-     *         + (getExtension().isEmpty() ? \"\" : (\".\" + getExtension())));\n-     * }\n-     * wherein the {@code Path}-{@code String} conversions are assumed to be\n-     * lossless.\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/Path.java","additions":15,"deletions":35,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -54,3 +54,3 @@\n-            {\"..a\",            \"\"},\n-            {\"...a\",           \"\"},\n-            {\"....a\",          \"\"},\n+            {\"..a\",            \"a\"},\n+            {\"...a\",           \"a\"},\n+            {\"....a\",          \"a\"},\n@@ -62,1 +62,1 @@\n-            {\"..foo\",          \"\"},\n+            {\"..foo\",          \"foo\"},\n","filename":"test\/jdk\/java\/nio\/file\/Path\/Extensions.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}