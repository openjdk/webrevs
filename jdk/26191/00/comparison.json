{"files":[{"patch":"@@ -2837,1 +2837,1 @@\n-            if (cdef == null && !isSpeculativeDiamondInferenceRound && \/\/ class body may be nulled out in speculative tree copy\n+            if (cdef == null && !tree.classDeclRemoved() && !isSpeculativeDiamondInferenceRound && \/\/ class body may be nulled out in speculative tree copy\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8361214\n+ * @summary An anonymous class is erroneously being classify as an abstract class\n+ * @compile AnonymousLabeledAsAbstractTest.java\n+ *\/\n+\n+class AnonymousLabeledAsAbstractTest {\n+    abstract class Base<T> {}\n+    abstract class Derived1<T> extends Base<T> {}\n+    abstract class Derived2<T> extends Base<T> {\n+        Derived2(Derived1<T> obj){}\n+    }\n+    abstract class Derived3<T> extends Base<T> {\n+        Derived3(Derived2<T> obj){}\n+    }\n+\n+    Base<String> obj = new Derived2<>(new Derived1<>(){}){};\n+    Base<String> obj2 = new Derived3<String>(new Derived2<>(new Derived1<>(){}){}){};\n+    Base<String> obj3 = new Derived3<>(new Derived2<>(new Derived1<>(){}){}){};\n+}\n","filename":"test\/langtools\/tools\/javac\/generics\/diamond\/AnonymousLabeledAsAbstractTest.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"}]}