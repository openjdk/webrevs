{"files":[{"patch":"@@ -3969,1 +3969,1 @@\n-            ListBuffer<VarSymbol> componentLocalVariables = new ListBuffer<>();\n+            ListBuffer<JCVariableDecl> componentLocalVariableDeclaration = new ListBuffer<>();\n@@ -3983,1 +3983,1 @@\n-                    componentLocalVariables.append(outgoing);\n+                    componentLocalVariableDeclaration.append(make.at(tree).VarDef(outgoing, null));\n@@ -3988,1 +3988,1 @@\n-            tree.componentLocalVariables = componentLocalVariables.toList();\n+            tree.componentLocalVariableDeclarations = componentLocalVariableDeclaration.toList();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4992,1 +4992,4 @@\n-                seenVariables.addAll(tree.componentLocalVariables);\n+                tree.componentLocalVariableDeclarations\n+                    .stream()\n+                    .map(var -> var.sym)\n+                    .forEach(seenVariables::add);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2114,2 +2114,1 @@\n-        \/** A mapping from addresses to variable symbols, and their diagnostic\n-         *  position.\n+        \/** A mapping from addresses to variable symbols.\n@@ -2117,1 +2116,1 @@\n-        protected VarAndDeclarationTree[] vars;\n+        protected JCVariableDecl[] vardecls;\n@@ -2185,1 +2184,1 @@\n-                    if (!(isFinalUninitializedStaticField(vars[address].variable()))) {\n+                    if (!(isFinalUninitializedStaticField(vardecls[address].sym))) {\n@@ -2220,9 +2219,2 @@\n-            newVar(varDecl, varDecl.sym);\n-        }\n-\n-        \/** Initialize new trackable variable by setting its address field\n-         *  to the next available sequence number and entering it under that\n-         *  index into the vars array.\n-         *\/\n-        void newVar(JCTree pos,VarSymbol sym) {\n-            vars = ArrayUtils.ensureCapacity(vars, nextadr);\n+            VarSymbol sym = varDecl.sym;\n+            vardecls = ArrayUtils.ensureCapacity(vardecls, nextadr);\n@@ -2233,1 +2225,1 @@\n-            vars[nextadr] = new VarAndDeclarationTree(sym, pos);\n+            vardecls[nextadr] = varDecl;\n@@ -2309,1 +2301,1 @@\n-                (sym.flags_field & (CLASH | COMPONENT_LOCAL_VARIABLE)) == 0) {\n+                (sym.flags_field & CLASH) == 0) {\n@@ -2442,1 +2434,2 @@\n-                        VarSymbol var = vars[i].variable();\n+                        JCVariableDecl vardecl = vardecls[i];\n+                        VarSymbol var = vardecl.sym;\n@@ -2444,1 +2437,0 @@\n-                            JCTree vardecl = vars[i].declarationTree();\n@@ -2529,2 +2521,2 @@\n-                            VarSymbol var = vars[i].variable();\n-                            JCTree vardecl = vars[i].declarationTree();\n+                            JCVariableDecl vardecl = vardecls[i];\n+                            VarSymbol var = vardecl.sym;\n@@ -2587,1 +2579,1 @@\n-                        checkInit(exit.tree.pos(), vars[i].variable());\n+                        checkInit(exit.tree.pos(), vardecls[i].sym);\n@@ -3055,1 +3047,1 @@\n-                        VarSymbol sym = vars[address].variable();\n+                        VarSymbol sym = vardecls[address].sym;\n@@ -3221,3 +3213,3 @@\n-            for (VarSymbol component : tree.componentLocalVariables) {\n-                newVar(tree, component);\n-                letInit(tree.pos(), component);\n+            for (JCVariableDecl component : tree.componentLocalVariableDeclarations) {\n+                newVar(component);\n+                letInit(tree.pos(), component.sym);\n@@ -3256,2 +3248,2 @@\n-                if (vars == null)\n-                    vars = new VarAndDeclarationTree[32];\n+                if (vardecls == null)\n+                    vardecls = new JCVariableDecl[32];\n@@ -3259,2 +3251,2 @@\n-                    for (int i=0; i<vars.length; i++)\n-                        vars[i] = null;\n+                    for (int i=0; i<vardecls.length; i++)\n+                        vardecls[i] = null;\n@@ -3273,3 +3265,3 @@\n-                if (vars != null) {\n-                    for (int i=0; i<vars.length; i++)\n-                        vars[i] = null;\n+                if (vardecls != null) {\n+                    for (int i=0; i<vardecls.length; i++)\n+                        vardecls[i] = null;\n@@ -3285,2 +3277,0 @@\n-\n-        record VarAndDeclarationTree(VarSymbol variable, JCTree declarationTree) {}\n@@ -3476,1 +3466,4 @@\n-                tree.componentLocalVariables.forEach(declaredInsideGuard::enter);\n+                tree.componentLocalVariableDeclarations\n+                    .stream()\n+                    .map(var -> var.sym)\n+                    .forEach(declaredInsideGuard::enter);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":27,"deletions":34,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -4445,0 +4445,14 @@\n+        \/\/for record R(C1, C2, ..., Cn), and a derived record creation expression:\n+        \/\/expr with { ...body... }\n+        \/\/generate let expression:\n+        \/\/{\n+        \/\/    R $temp = expr; \/\/skipped if \"expr\" is a local variable\n+        \/\/    typeof(C1) c1 = $temp.c1();\n+        \/\/    typeof(C2) c2 = $temp.c2();\n+        \/\/    ...\n+        \/\/    typeof(Cn) cn = $temp.cn();\n+        \/\/\n+        \/\/    { ...body...}\n+        \/\/\n+        \/\/    \"yield\" new R(c1, c2, ..., cn);\n+        \/\/}\n@@ -4462,1 +4476,1 @@\n-        List<VarSymbol> outgoingBindingsIt = tree.componentLocalVariables;\n+        List<JCVariableDecl> outgoingBindingsIt = tree.componentLocalVariableDeclarations;\n@@ -4467,4 +4481,6 @@\n-            newBlock.add(make.VarDef(outgoingBindingsIt.head,\n-                                     make.App(make.Select(make.Ident(temp),\n-                                                          recordComponentsIt.head.accessor))\n-                                         .setType(erasedComponentType)));\n+            JCVariableDecl var = outgoingBindingsIt.head;\n+\n+            var.init = make.App(make.Select(make.Ident(temp),\n+                                            recordComponentsIt.head.accessor))\n+                           .setType(erasedComponentType);\n+            newBlock.append(var);\n@@ -4480,1 +4496,1 @@\n-                                             tree.componentLocalVariables.map(make::Ident),\n+                                             tree.componentLocalVariableDeclarations.map(decl -> make.Ident(decl.sym)),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2059,1 +2059,1 @@\n-        public List<VarSymbol> componentLocalVariables;\n+        public List<JCVariableDecl> componentLocalVariableDeclarations;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,0 +108,6 @@\n+        R3<String> r3 = new R3<>(\"\");\n+        if (r3 with {\n+                t = \"new\";\n+            } instanceof R3(var t) && !\"new\".equals(t)) {\n+            throw new AssertionError(\"Incorrect value: \" + t);\n+        }\n@@ -112,0 +118,1 @@\n+    record R3<T>(T t) {}\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/SimpleWithers.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}