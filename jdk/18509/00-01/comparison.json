{"files":[{"patch":"@@ -3225,1 +3225,1 @@\n-                newVar(null, component);\n+                newVar(tree, component);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1403,2 +1403,13 @@\n-        createNew.constructor = recordClass.members()\n-                                           .findFirst(names.init, s -> (s.flags() & Flags.RECORD) != 0);\n+\n+        List<Type> canonicalConstructorTypes =\n+                recordClass.getRecordComponents()\n+                           .stream()\n+                           .map(c -> types.erasure(c.type))\n+                           .collect(List.collector());\n+        MethodSymbol init = rs.resolveInternalMethod(tree.pos(),\n+                                                     env,\n+                                                     tree.type,\n+                                                     names.init,\n+                                                     canonicalConstructorTypes,\n+                                                     List.nil());\n+        createNew.constructor = init;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1494,0 +1494,11 @@\n+    @Override\n+    public void visitReconstruction(JCDerivedInstance tree) {\n+        try {\n+            printExpr(tree.expr);\n+            print(\" with \");\n+            printExpr(tree.block);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/Pretty.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -594,0 +594,4 @@\n+            case DERIVEDRECORDCREATION: {\n+                JCDerivedInstance node = (JCDerivedInstance) tree;\n+                return getStartPos(node.expr);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+        \"var v = a with { i = 0; };\",\n@@ -93,1 +94,2 @@\n-        \"\\\"\\\\{0}\\\"\"\n+        \"\\\"\\\\{0}\\\"\",\n+        \"a with { i = 0; }\",\n@@ -136,0 +138,1 @@\n+        \"var v = a with { i = 0; }\",\n@@ -233,0 +236,1 @@\n+        \"a with {\",\n","filename":"test\/langtools\/jdk\/jshell\/CompletenessTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import com.sun.source.util.SourcePositions;\n@@ -51,0 +52,1 @@\n+import java.io.IOException;\n@@ -72,0 +74,1 @@\n+        SourcePositions sp = trees.getSourcePositions();\n@@ -78,0 +81,6 @@\n+                    int start = (int) sp.getStartPosition(cut, node);\n+                    int end = (int) sp.getEndPosition(cut, node);\n+                    System.err.println(node.toString());\n+                    System.err.println(cut.getSourceFile()\n+                                          .getCharContent(true)\n+                                          .subSequence(start, end));\n@@ -79,0 +88,2 @@\n+                } catch (IOException ex) {\n+                    throw new RuntimeException(ex);\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/Model.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,0 +2,8 @@\n+r with {\n+    val1 = \"a\";\n+    val2 = -1;\n+}\n+r with {\n+            val1 = \"a\";\n+            val2 = -1;\n+        }\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/Model.out","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+ * @bug 8324651\n+ * @summary Support for derived record creation expression\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/SimpleWithers.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+ * @bug 8324651\n+ * @summary Support for derived record creation expression\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/SourceLevelCheck.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+ * @bug 8324651\n+ * @summary Support for derived record creation expression\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/WithErrors.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+ * @bug 8324651\n+ * @summary Support for derived record creation expression\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/WithPriority.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}