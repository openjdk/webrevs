{"files":[{"patch":"@@ -1,23 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n@@ -25,1 +2,1 @@\n- * @test\n+ * @test \/nodynamiccopyright\/\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/SourceLevelCheck.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-SourceLevelCheck.java:31:15: compiler.err.preview.feature.disabled: (compiler.misc.feature.derived.instance)\n+SourceLevelCheck.java:10:15: compiler.err.preview.feature.disabled: (compiler.misc.feature.derived.instance)\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/SourceLevelCheck.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,23 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n@@ -25,1 +2,1 @@\n- * @test\n+ * @test \/nodynamiccopyright\/\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/WithErrors.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,30 +1,30 @@\n-WithErrors.java:43:13: compiler.err.with.assignment.not.allowed: i\n-WithErrors.java:43:19: compiler.err.with.assignment.not.allowed: i\n-WithErrors.java:43:23: compiler.err.with.assignment.not.allowed: i\n-WithErrors.java:43:31: compiler.err.with.assignment.not.allowed: i\n-WithErrors.java:43:35: compiler.err.with.assignment.not.allowed: i\n-WithErrors.java:44:13: compiler.err.with.assignment.not.allowed: i\n-WithErrors.java:45:13: compiler.err.with.assignment.not.allowed: field\n-WithErrors.java:56:17: compiler.err.with.assignment.not.allowed: i\n-WithErrors.java:57:17: compiler.err.with.assignment.not.allowed: i\n-WithErrors.java:58:17: compiler.err.with.assignment.not.allowed: field\n-WithErrors.java:111:23: compiler.err.derived.expression.no.record\n-WithErrors.java:112:19: compiler.err.derived.expression.no.record\n-WithErrors.java:118:17: compiler.err.with.return.not.allowed\n-WithErrors.java:124:17: compiler.err.with.break.not.allowed\n-WithErrors.java:136:17: compiler.err.with.break.not.allowed\n-WithErrors.java:148:17: compiler.err.with.break.not.allowed\n-WithErrors.java:160:17: compiler.err.with.break.not.allowed\n-WithErrors.java:173:21: compiler.err.with.break.not.allowed\n-WithErrors.java:186:21: compiler.err.with.continue.not.allowed\n-WithErrors.java:202:21: compiler.err.with.continue.not.allowed\n-WithErrors.java:218:21: compiler.err.with.continue.not.allowed\n-WithErrors.java:234:21: compiler.err.with.continue.not.allowed\n-WithErrors.java:250:21: compiler.err.with.yield.not.allowed\n-WithErrors.java:55:17: compiler.err.cant.ref.non.effectively.final.var: value, (compiler.misc.lambda)\n-WithErrors.java:60:17: compiler.err.cant.ref.non.effectively.final.var: l1, (compiler.misc.lambda)\n-WithErrors.java:67:28: compiler.err.cant.ref.non.effectively.final.var: value, (compiler.misc.lambda)\n-WithErrors.java:84:21: compiler.err.cant.ref.non.effectively.final.var: value, (compiler.misc.inner.cls)\n-WithErrors.java:85:21: compiler.err.cant.ref.non.effectively.final.var: i, (compiler.misc.inner.cls)\n-WithErrors.java:88:21: compiler.err.cant.ref.non.effectively.final.var: l1, (compiler.misc.inner.cls)\n-WithErrors.java:97:32: compiler.err.cant.ref.non.effectively.final.var: value, (compiler.misc.inner.cls)\n+WithErrors.java:22:13: compiler.err.with.assignment.not.allowed: i\n+WithErrors.java:22:19: compiler.err.with.assignment.not.allowed: i\n+WithErrors.java:22:23: compiler.err.with.assignment.not.allowed: i\n+WithErrors.java:22:31: compiler.err.with.assignment.not.allowed: i\n+WithErrors.java:22:35: compiler.err.with.assignment.not.allowed: i\n+WithErrors.java:23:13: compiler.err.with.assignment.not.allowed: i\n+WithErrors.java:24:13: compiler.err.with.assignment.not.allowed: field\n+WithErrors.java:35:17: compiler.err.with.assignment.not.allowed: i\n+WithErrors.java:36:17: compiler.err.with.assignment.not.allowed: i\n+WithErrors.java:37:17: compiler.err.with.assignment.not.allowed: field\n+WithErrors.java:90:23: compiler.err.derived.expression.no.record\n+WithErrors.java:91:19: compiler.err.derived.expression.no.record\n+WithErrors.java:97:17: compiler.err.with.return.not.allowed\n+WithErrors.java:103:17: compiler.err.with.break.not.allowed\n+WithErrors.java:115:17: compiler.err.with.break.not.allowed\n+WithErrors.java:127:17: compiler.err.with.break.not.allowed\n+WithErrors.java:139:17: compiler.err.with.break.not.allowed\n+WithErrors.java:152:21: compiler.err.with.break.not.allowed\n+WithErrors.java:165:21: compiler.err.with.continue.not.allowed\n+WithErrors.java:181:21: compiler.err.with.continue.not.allowed\n+WithErrors.java:197:21: compiler.err.with.continue.not.allowed\n+WithErrors.java:213:21: compiler.err.with.continue.not.allowed\n+WithErrors.java:229:21: compiler.err.with.yield.not.allowed\n+WithErrors.java:34:17: compiler.err.cant.ref.non.effectively.final.var: value, (compiler.misc.lambda)\n+WithErrors.java:39:17: compiler.err.cant.ref.non.effectively.final.var: l1, (compiler.misc.lambda)\n+WithErrors.java:46:28: compiler.err.cant.ref.non.effectively.final.var: value, (compiler.misc.lambda)\n+WithErrors.java:63:21: compiler.err.cant.ref.non.effectively.final.var: value, (compiler.misc.inner.cls)\n+WithErrors.java:64:21: compiler.err.cant.ref.non.effectively.final.var: i, (compiler.misc.inner.cls)\n+WithErrors.java:67:21: compiler.err.cant.ref.non.effectively.final.var: l1, (compiler.misc.inner.cls)\n+WithErrors.java:76:32: compiler.err.cant.ref.non.effectively.final.var: value, (compiler.misc.inner.cls)\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/WithErrors.out","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"}]}