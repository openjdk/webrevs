{"files":[{"patch":"@@ -3265,1 +3265,1 @@\n-                    vardecls = new JCVariableDecl[32];\n+                    vardecls = new JCTree[32];\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8324651\n+ * @summary Support for derived record creation expression in JShell\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jshell\n+ * @build Compiler KullaTesting TestingInputStream ExpectedDiagnostic\n+ * @run testng DerivedRecordCreationTest\n+ *\/\n+\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+\n+@Test\n+public class DerivedRecordCreationTest extends KullaTesting {\n+\n+    public void derivedRecordInVarInit() {\n+        assertEval(\"record A(int i) {}\");\n+        assertEval(\"var v1 = new A(0);\");\n+        assertEval(\"var v2 = v1 with { i = -1; };\");\n+        assertEval(\"v2\", \"A[i=-1]\");\n+    }\n+\n+    public void derivedRecordInClass() {\n+        assertEval(\"record A(int i) {}\");\n+        assertEval(\"\"\"\n+                   class Test {\n+                       public static A test(A arg) {\n+                           A a = arg with {\n+                               i = 32;\n+                           };\n+                           return a;\n+                       }\n+                   }\n+                   \"\"\");\n+    }\n+\n+    @BeforeMethod\n+    public void setUp() {\n+        setUp(bc -> bc.compilerOptions(\"--enable-preview\",\n+                                       \"--source\", System.getProperty(\"java.specification.version\"))\n+                      .remoteVMOptions(\"--enable-preview\"));\n+    }\n+\n+}\n","filename":"test\/langtools\/jdk\/jshell\/DerivedRecordCreationTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8324651\n+ * @summary Verify separate compilation works w.r.t. derived record creation expression\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main SeparateCompilation\n+*\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+import toolbox.ToolBox;\n+\n+public class SeparateCompilation extends TestRunner {\n+\n+    ToolBox tb;\n+\n+    public static void main(String... args) throws Exception {\n+        new SeparateCompilation().runTests();\n+    }\n+\n+    SeparateCompilation() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void testPattern(Path base) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        tb.writeJavaFiles(src,\n+                          \"record A(int i) {}\",\n+                          \"\"\"\n+                          class Test {\n+                              public static A test(A arg) {\n+                                  A a = arg with {\n+                                      i = 32;\n+                                  };\n+                                  return a;\n+                              }\n+                          }\n+                          \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        new JavacTask(tb)\n+            .options(\"--release\", System.getProperty(\"java.specification.version\"))\n+            .outdir(classes)\n+            .files(tb.findJavaFiles(src.resolve(\"A.java\")))\n+            .run()\n+            .writeAll();\n+\n+        new JavacTask(tb)\n+            .options(\"--enable-preview\",\n+                     \"--release\", System.getProperty(\"java.specification.version\"))\n+            .classpath(classes.toString())\n+            .outdir(classes)\n+            .files(tb.findJavaFiles(src.resolve(\"Test.java\")))\n+            .run()\n+            .writeAll();\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/withers\/SeparateCompilation.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}