{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,1 @@\n-    \/\/ Used to ensure that each spun class name is unique\n+    \/\/ Used to ensure that dumped class files for failed definitions have a unique class name\n@@ -122,1 +122,1 @@\n-    private final String lambdaClassName;            \/\/ Generated name for the generated class \"X$$Lambda$1\"\n+    private final String lambdaClassName;            \/\/ Generated name for the generated class \"X$$Lambda\"\n@@ -212,1 +212,1 @@\n-        return name.replace('.', '\/') + \"$$Lambda$\" + counter.incrementAndGet();\n+        return name.replace('.', '\/') + \"$$Lambda\";\n@@ -304,1 +304,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -365,13 +364,0 @@\n-        \/\/ If requested, dump out to a file for debugging purposes\n-        if (dumper != null) {\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                @Override\n-                public Void run() {\n-                    dumper.dumpClass(lambdaClassName, classBytes);\n-                    return null;\n-                }\n-            }, null,\n-            new FilePermission(\"<<ALL FILES>>\", \"read, write\"),\n-            \/\/ createDirectories may need it\n-            new PropertyPermission(\"user.dir\", \"read\"));\n-        }\n@@ -380,6 +366,23 @@\n-            Lookup lookup;\n-            if (useImplMethodHandle) {\n-                lookup = caller.defineHiddenClassWithClassData(classBytes, implementation, !disableEagerInitialization,\n-                                                               NESTMATE, STRONG);\n-            } else {\n-                lookup = caller.defineHiddenClass(classBytes, !disableEagerInitialization, NESTMATE, STRONG);\n+            Lookup lookup = null;\n+            try {\n+                if (useImplMethodHandle) {\n+                    lookup = caller.defineHiddenClassWithClassData(classBytes, implementation, !disableEagerInitialization,\n+                                                                   NESTMATE, STRONG);\n+                } else {\n+                    lookup = caller.defineHiddenClass(classBytes, !disableEagerInitialization, NESTMATE, STRONG);\n+                }\n+                return lookup.lookupClass();\n+            } finally {\n+                \/\/ If requested, dump out to a file for debugging purposes\n+                if (dumper != null) {\n+                    final String name;\n+                    if (lookup != null) {\n+                        final String definedName = lookup.lookupClass().getName();\n+                        final int suffixIdx = definedName.lastIndexOf('\/');\n+                        assert suffixIdx != -1;\n+                        name = lambdaClassName + '.' + definedName.substring(suffixIdx + 1);\n+                    } else {\n+                        name = lambdaClassName + \".failed-\" + counter.incrementAndGet();\n+                    }\n+                    doDump(name, classBytes);\n+                }\n@@ -387,1 +390,0 @@\n-            return lookup.lookupClass();\n@@ -395,0 +397,14 @@\n+    @SuppressWarnings(\"removal\")\n+    private void doDump(final String className, final byte[] classBytes) {\n+        AccessController.doPrivileged(new PrivilegedAction<>() {\n+            @Override\n+            public Void run() {\n+                dumper.dumpClass(className, classBytes);\n+                return null;\n+            }\n+        }, null,\n+        new FilePermission(\"<<ALL FILES>>\", \"read, write\"),\n+        \/\/ createDirectories may need it\n+        new PropertyPermission(\"user.dir\", \"read\"));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":41,"deletions":25,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,1 +99,1 @@\n-     * \"jdk.vm.ci.runtime.test.TypeUniverse$$Lambda$1\/869601985\").\n+     * \"jdk.vm.ci.runtime.test.TypeUniverse$$Lambda\/869601985\").\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.meta\/src\/jdk\/vm\/ci\/meta\/MetaUtil.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-            output.shouldMatch(\"Skipping.LambdaContainsOldInfApp[$][$]Lambda[$].*0x.*:.*Old.class.has.been.linked\");\n+            output.shouldMatch(\"Skipping.LambdaContainsOldInfApp[$][$]Lambda.*0x.*:.*Old.class.has.been.linked\");\n@@ -80,1 +80,1 @@\n-                  .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda[$].*\/0x.*source:.*LambdaContainsOldInf\");\n+                  .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda.*\/0x.*source:.*LambdaContainsOldInf\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaContainsOldInf.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-        \".class.load. java.util.stream.Collectors[$][$]Lambda[$].*\/0x.*source:.*java.*util.*stream.*Collectors\";\n+        \".class.load. java.util.stream.Collectors[$][$]Lambda.*\/0x.*source:.*java.*util.*stream.*Collectors\";\n@@ -67,1 +67,1 @@\n-        \".class.load. java.util.stream.Collectors[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file\";\n+        \".class.load. java.util.stream.Collectors[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaEagerInit.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-              .shouldMatch(\".class.load. LambdaWithOldClassApp[$][$]Lambda[$].*\/0x.*source:.*shared objects file\")\n+              .shouldMatch(\".class.load. LambdaWithOldClassApp[$][$]Lambda.*\/0x.*source:.*shared objects file\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaWithOldClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        String lambdaInArchive = \"klasses.*=.*app.*Hello[$][$]Lambda[$].*hidden\";\n+        String lambdaInArchive = \"klasses.*=.*app.*Hello[$][$]Lambda.*hidden\";\n@@ -54,1 +54,1 @@\n-        String lambdaLoadFromHello = \".class.load. Hello[$][$]Lambda[$].*\/0x.*source.*Hello\";\n+        String lambdaLoadFromHello = \".class.load. Hello[$][$]Lambda.*\/0x.*source.*Hello\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SignedJar.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-             .shouldMatch(\"class.load.*LambHello[$][$]Lambda[$].*0x.*source:.shared.objects.file\")\n+             .shouldMatch(\"class.load.*LambHello[$][$]Lambda.*0x.*source:.shared.objects.file\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/StaticArchiveWithLambda.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-                output.shouldContain(\"Archiving hidden BasicLambdaApp$$Lambda$\")\n+                output.shouldContain(\"Archiving hidden BasicLambdaApp$$Lambda\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/BasicLambdaTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-                          .shouldMatch(\"Skipping.LambdaContainsOldInfApp[$][$]Lambda[$].*0x.*:.*Old.class.has.been.linked\")\n+                          .shouldMatch(\"Skipping.LambdaContainsOldInfApp[$][$]Lambda.*0x.*:.*Old.class.has.been.linked\")\n@@ -81,1 +81,1 @@\n-                          .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda[$].*\/0x.*source:.*LambdaContainsOldInf\")\n+                          .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda.*\/0x.*source:.*LambdaContainsOldInf\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaContainsOldInf.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-                output.shouldMatch(\"Skipping.LambHello[$][$]Lambda[$].*0x.*:.Hidden.class\")\n+                output.shouldMatch(\"Skipping.LambHello[$][$]Lambda.*0x.*:.Hidden.class\")\n@@ -62,1 +62,1 @@\n-                output.shouldMatch(\"class.load.*LambHello[$][$]Lambda[$].*0x.*source:.LambHello\")\n+                output.shouldMatch(\"class.load.*LambHello[$][$]Lambda.*0x.*source:.LambHello\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaCustomLoader.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-                       .shouldMatch(\"Archiving hidden SimpleApp[$][$]Lambda[$][\\\\d+]*\");\n+                       .shouldMatch(\"Archiving hidden SimpleApp[$][$]Lambda\");\n@@ -93,1 +93,1 @@\n-                       .shouldMatch(\".class.load. SimpleApp[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\");\n+                       .shouldMatch(\".class.load. SimpleApp[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaForClassInBaseArchive.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-                       .shouldMatch(\"Archiving hidden LambdaContainsOldInfApp[$][$]Lambda[$][\\\\d+]*\");\n+                       .shouldMatch(\"Archiving hidden LambdaContainsOldInfApp[$][$]Lambda*\");\n@@ -94,1 +94,1 @@\n-                       .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\");\n+                       .shouldMatch(\".class.load. LambdaContainsOldInfApp[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaForOldInfInBaseArchive.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,2 +86,2 @@\n-                      .shouldMatch(\"class.load.*LambHello[$][$]Lambda[$].*0x.*source:.shared.objects.file\")\n-                      .shouldNotMatch(\"class.load.*LambHello[$][$]Lambda[$].*0x.*source:.shared.objects.file.*(top)\");\n+                      .shouldMatch(\"class.load.*LambHello[$][$]Lambda.*0x.*source:.shared.objects.file\")\n+                      .shouldNotMatch(\"class.load.*LambHello[$][$]Lambda.*0x.*source:.shared.objects.file.*(top)\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaInBaseArchive.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-                output.shouldMatch(\"Skipping.LambdaHello_0x.*[$][$]Lambda[$].*:.Hidden.class\")\n+                output.shouldMatch(\"Skipping.LambdaHello_0x.*[$][$]Lambda.*:.Hidden.class\")\n@@ -71,1 +71,1 @@\n-                      .shouldMatch(\"class.load.*LambdaHello_0x.*[$][$]Lambda[$].*source.*LambdaProxyCallerIsHiddenApp\")\n+                      .shouldMatch(\"class.load.*LambdaHello_0x.*[$][$]Lambda.*source.*LambdaProxyCallerIsHiddenApp\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaProxyCallerIsHidden.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-                      .shouldMatch(\"class.load.*Outer[$]Inner[$][$]Lambda[$].*0x.*source:.Outer\")\n+                      .shouldMatch(\"class.load.*Outer[$]Inner[$][$]Lambda.*0x.*source:.Outer\")\n@@ -82,1 +82,1 @@\n-                      .shouldMatch(\"class.load.*Outer[$]Inner[$][$]Lambda[$].*0x.*source:.Outer\")\n+                      .shouldMatch(\"class.load.*Outer[$]Inner[$][$]Lambda.*0x.*source:.Outer\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdaProxyDuringShutdown.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,1 @@\n-                      .shouldMatch(\".class.load. ChildOldInf[$]InnerChild[$][$]Lambda[$].*\/0x.*source:.ChildOldInf\");\n+                      .shouldMatch(\".class.load. ChildOldInf[$]InnerChild[$][$]Lambda.*\/0x.*source:.ChildOldInf\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/NestHostOldInf.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-                output.shouldContain(\"Archiving hidden NestApp$InnerA$InnerInnerA$$Lambda$\")\n+                output.shouldContain(\"Archiving hidden NestApp$InnerA$InnerInnerA$$Lambda\")\n@@ -72,1 +72,1 @@\n-                output.shouldMatch(\".class.load.* NestApp[$]InnerA[$]InnerInnerA[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\")\n+                output.shouldMatch(\".class.load.* NestApp[$]InnerA[$]InnerInnerA[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/NestTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-            \/\/ [info ][class,load] jdk.internal.module.DefaultRoots$$Lambda$1\/0x00007f80c4512048 source: jdk.internal.module.DefaultRoots\n+            \/\/ [info ][class,load] jdk.internal.module.DefaultRoots$$Lambda\/0x00007f80c4512048 source: jdk.internal.module.DefaultRoots\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/NoClassToArchive.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-                output.shouldContain(\"Archiving hidden ParallelLambdaLoad$$Lambda$\")\n+                output.shouldContain(\"Archiving hidden ParallelLambdaLoad$$Lambda\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/ParallelLambdaLoadTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-                output.shouldContain(\"Archiving hidden PredicateApp$$Lambda$\")\n+                output.shouldContain(\"Archiving hidden PredicateApp$$Lambda\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/PredicateTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,1 @@\n-                              .shouldMatch(\"Skipping.SimpleLambda[$][$]Lambda[$].*0x.*:.*Old.class.has.been.linked\");\n+                              .shouldMatch(\"Skipping.SimpleLambda[$][$]Lambda.*0x.*:.*Old.class.has.been.linked\");\n@@ -97,1 +97,1 @@\n-                          .shouldMatch(\".class.load. SimpleLambda[$][$]Lambda[$].*\/0x.*source:.*SimpleLambda\");\n+                          .shouldMatch(\".class.load. SimpleLambda[$][$]Lambda.*\/0x.*source:.*SimpleLambda\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RedefineCallerClassTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-                output.shouldContain(\"Archiving hidden HelloStaticInner$InnerHello$$Lambda$\")\n+                output.shouldContain(\"Archiving hidden HelloStaticInner$InnerHello$$Lambda\")\n@@ -66,1 +66,1 @@\n-                      .shouldMatch(\".class.load. HelloStaticInner[$]InnerHello[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\");\n+                      .shouldMatch(\".class.load. HelloStaticInner[$]InnerHello[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/StaticInnerTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-                output.shouldContain(\"Archiving hidden UsedAllArchivedLambdasApp$$Lambda$\")\n+                output.shouldContain(\"Archiving hidden UsedAllArchivedLambdasApp$$Lambda\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/UsedAllArchivedLambdas.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-        \".class.load. test.java.lang.invoke.$i[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n+        \".class.load. test.java.lang.invoke.$i[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/CDSMHTest_generate.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        \".class.load. test.java.lang.invoke.MethodHandlesAsCollectorTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n+        \".class.load. test.java.lang.invoke.MethodHandlesAsCollectorTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesAsCollectorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        \".class.load. test.java.lang.invoke.MethodHandlesCastFailureTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n+        \".class.load. test.java.lang.invoke.MethodHandlesCastFailureTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesCastFailureTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        \".class.load. test.java.lang.invoke.MethodHandlesGeneralTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n+        \".class.load. test.java.lang.invoke.MethodHandlesGeneralTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesGeneralTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        \".class.load. test.java.lang.invoke.MethodHandlesInvokersTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n+        \".class.load. test.java.lang.invoke.MethodHandlesInvokersTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesInvokersTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        \".class.load. test.java.lang.invoke.MethodHandlesPermuteArgumentsTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n+        \".class.load. test.java.lang.invoke.MethodHandlesPermuteArgumentsTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesPermuteArgumentsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        \".class.load. test.java.lang.invoke.MethodHandlesSpreadArgumentsTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file.*(top)\";\n+        \".class.load. test.java.lang.invoke.MethodHandlesSpreadArgumentsTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file.*(top)\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/methodHandles\/MethodHandlesSpreadArgumentsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-        \/\/ jdk.internal.loader.BuiltinClassLoader$$Lambda$1\/1816757085\n+        \/\/ jdk.internal.loader.BuiltinClassLoader$$Lambda\/1816757085\n@@ -73,1 +73,1 @@\n-        String class_pattern = \".*Lambda([a-z0-9$]+)\/([0-9]+).*\";\n+        String class_pattern = \".*Lambda\/([0-9]+).*\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/AnonVmClassesDuringDump.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,1 +133,1 @@\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.$i[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file\")\n+        output.shouldMatch(\".class.load. test.java.lang.invoke.$i[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/CDSMHTest_generate.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesAsCollectorTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file\")\n+        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesAsCollectorTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesAsCollectorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesCastFailureTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file\")\n+        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesCastFailureTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesCastFailureTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesGeneralTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file\")\n+        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesGeneralTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesGeneralTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesInvokersTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file\")\n+        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesInvokersTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesInvokersTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesPermuteArgumentsTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file\")\n+        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesPermuteArgumentsTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesPermuteArgumentsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesSpreadArgumentsTest[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file\")\n+        output.shouldMatch(\".class.load. test.java.lang.invoke.MethodHandlesSpreadArgumentsTest[$][$]Lambda.*\/0x.*source:.*shared.*objects.*file\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/methodHandles\/MethodHandlesSpreadArgumentsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-\/\/    at pkg2.Child$$Lambda$1\/0x0000000800c01000.accept(Unknown Source)\n+\/\/    at pkg2.Child$$Lambda\/0x0000000800c01000.accept(Unknown Source)\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/pkg2\/Child.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    \/\/ |--DcmdTestClass$$Lambda$1\/4081552\/0xa529fbb0\n+    \/\/ |--DcmdTestClass$$Lambda\/4081552\/0xa529fbb0\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/ClassHierarchyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,1 +143,1 @@\n-                if (name.contains(\"$$Lambda$\") && name.contains(\"App\")) {\n+                if (name.contains(\"$$Lambda\") && name.contains(\"App\")) {\n@@ -196,1 +196,1 @@\n-        \/\/ ModifyAnonymous$InstanceMethodCallSiteApp$$Lambda$18\n+        \/\/ ModifyAnonymous$InstanceMethodCallSiteApp$$Lambda\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/ModifyAnonymous.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-      \/\/ Example: {\"Ljava\/lang\/VirtualThread$VThreadContinuation$$Lambda$31.0x0000000800098340;\"\n+      \/\/ Example: {\"Ljava\/lang\/VirtualThread$VThreadContinuation$$Lambda.0x0000000800098340;\"\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/get_stack_trace.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-    {\"Ljava\/lang\/VirtualThread$VThreadContinuation$$Lambda$31.0x0000000800098810;\", \"run\", \"()V\"},\n+    {\"Ljava\/lang\/VirtualThread$VThreadContinuation$$Lambda.0x0000000800098810;\", \"run\", \"()V\"},\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetStackTrace\/getstacktr03\/libgetstacktr03.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -522,1 +522,1 @@\n-                if (serialClass.getName().contains(\"$$Lambda$\")) {\n+                if (serialClass.getName().contains(\"$$Lambda\")) {\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-        if (cn.contains(\"$$Lambda$\")) {\n+        if (cn.contains(\"$$Lambda\")) {\n","filename":"test\/jdk\/java\/lang\/StackWalker\/HiddenFrames.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -131,1 +131,1 @@\n-            \"2: VerifyStackTrace$$Lambda$1\/0x0000000801001848.run(Unknown Source)\\n\" +\n+            \"2: VerifyStackTrace$$Lambda\/0x0000000801001848.run(Unknown Source)\\n\" +\n","filename":"test\/jdk\/java\/lang\/StackWalker\/VerifyStackTrace.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,1 +165,1 @@\n-            assertTrue(cn.startsWith(LambdaTest.class.getName() + \"$$Lambda$\"), caller + \" should be a lambda proxy class\");\n+            assertTrue(cn.startsWith(LambdaTest.class.getName() + \"$$Lambda\"), caller + \" should be a lambda proxy class\");\n","filename":"test\/jdk\/java\/lang\/invoke\/callerSensitive\/csm\/jdk\/test\/MethodInvokeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -139,1 +139,1 @@\n-                \"A$I$$Lambda$*.class\")) {\n+                \"A$I$$Lambda.*.class\")) {\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaAsm.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-            \/\/  at LambdaStackTrace$$Lambda$1\/1937396743.run(<Unknown>:1000000)\n+            \/\/  at LambdaStackTrace$$Lambda\/1937396743.run(<Unknown>:1000000)\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaStackTrace.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}