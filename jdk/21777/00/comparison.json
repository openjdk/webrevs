{"files":[{"patch":"@@ -45,3 +45,1 @@\n-  __ relocate(safepoint_pc.rspec(), [&] {\n-    __ la(t0, safepoint_pc.target());\n-  });\n+  __ la(t0, safepoint_pc);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -336,2 +336,1 @@\n-  CodeBlob *cb = CodeCache::find_blob(entry);\n-  if (cb != nullptr) {\n+  if (CodeCache::contains(entry)) {\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arraycopy_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1408,3 +1408,1 @@\n-  __ relocate(pc_for_athrow.rspec(), [&] {\n-    __ la(exceptionPC->as_register(), pc_for_athrow.target());\n-  });\n+  __ la(exceptionPC->as_register(), pc_for_athrow);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,2 +84,0 @@\n-  product(bool, NearCpool, true,                                                 \\\n-         \"constant pool is close to instructions\")                               \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -194,4 +194,1 @@\n-  ExternalAddress target((address)Interpreter::dispatch_table());\n-  relocate(target.rspec(), [&] {\n-    la(xdispatch, target.target());\n-  });\n+  la(xdispatch, ExternalAddress((address)Interpreter::dispatch_table()));\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-  __ la(x10, ExternalAddress(Interpreter::result_handler(method()->result_type())));\n+  __ movptr(x10, ExternalAddress(Interpreter::result_handler(method()->result_type())));\n","filename":"src\/hotspot\/cpu\/riscv\/interpreterRT_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,5 +76,0 @@\n-  Address target(SafepointSynchronize::safepoint_counter_addr());\n-  __ relocate(target.rspec(), [&] {\n-    __ la(rcounter_addr, target.target());\n-  });\n-\n@@ -82,2 +77,3 @@\n-  Address safepoint_counter_addr(rcounter_addr, 0);\n-  __ lwu(rcounter, safepoint_counter_addr);\n+  ExternalAddress counter(SafepointSynchronize::safepoint_counter_addr());\n+  __ la(rcounter_addr, counter);\n+  __ lwu(rcounter, Address(rcounter_addr));\n@@ -94,6 +90,1 @@\n-    ExternalAddress target((address) JvmtiExport::get_field_access_count_addr());\n-    __ relocate(target.rspec(), [&] {\n-      int32_t offset;\n-      __ la(result, target.target(), offset);\n-      __ lwu(result, Address(result, offset));\n-    });\n+    __ lwu(result, ExternalAddress(JvmtiExport::get_field_access_count_addr()));\n@@ -146,1 +137,1 @@\n-  __ lw(t0, safepoint_counter_addr);\n+  __ lw(t0, Address(rcounter_addr));\n","filename":"src\/hotspot\/cpu\/riscv\/jniFastGetField_riscv.cpp","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -534,6 +534,1 @@\n-  RuntimeAddress target(StubRoutines::verify_oop_subroutine_entry_address());\n-  relocate(target.rspec(), [&] {\n-    int32_t offset;\n-    la(t1, target.target(), offset);\n-    ld(t1, Address(t1, offset));\n-  });\n+  ld(t1, RuntimeAddress(StubRoutines::verify_oop_subroutine_entry_address()));\n@@ -579,6 +574,1 @@\n-  RuntimeAddress target(StubRoutines::verify_oop_subroutine_entry_address());\n-  relocate(target.rspec(), [&] {\n-    int32_t offset;\n-    la(t1, target.target(), offset);\n-    ld(t1, Address(t1, offset));\n-  });\n+  ld(t1, RuntimeAddress(StubRoutines::verify_oop_subroutine_entry_address()));\n@@ -842,9 +832,4 @@\n-  if (is_32bit_offset_from_codecache((int64_t)addr)) {\n-    int64_t distance = addr - pc();\n-    assert(is_valid_32bit_offset(distance), \"Must be\");\n-    auipc(Rd, (int32_t)distance + 0x800);\n-    offset = ((int32_t)distance << 20) >> 20;\n-  } else {\n-    assert(!CodeCache::contains(addr), \"Must be\");\n-    movptr(Rd, addr, offset);\n-  }\n+  int64_t distance = addr - pc();\n+  assert(is_valid_32bit_offset(distance), \"Must be\");\n+  auipc(Rd, (int32_t)distance + 0x800);\n+  offset = ((int32_t)distance << 20) >> 20;\n@@ -853,0 +838,2 @@\n+\/\/ Materialize with auipc + addi sequence if adr is a literal\n+\/\/ address inside code cache. Emit a movptr sequence otherwise.\n@@ -860,3 +847,9 @@\n-        relocate(adr.rspec(), [&] {\n-          movptr(Rd, adr.target());\n-        });\n+        if (CodeCache::contains(adr.target())) {\n+          relocate(adr.rspec(), [&] {\n+            la(Rd, adr.target());\n+          });\n+        } else {\n+          relocate(adr.rspec(), [&] {\n+            movptr(Rd, adr.target());\n+          });\n+        }\n@@ -978,5 +971,9 @@\n-      relocate(dest.rspec(), [&] {\n-        int32_t offset;\n-        la(temp, dest.target(), offset);\n-        jr(temp, offset);\n-      });\n+      if (CodeCache::contains(dest.target())) {\n+        far_jump(dest, temp);\n+      } else {\n+        relocate(dest.rspec(), [&] {\n+          int32_t offset;\n+          movptr(temp, dest.target(), offset);\n+          jr(temp, offset);\n+        });\n+      }\n@@ -1029,1 +1026,0 @@\n-  CodeBlob *cb = CodeCache::find_blob(dest);\n@@ -1031,1 +1027,1 @@\n-  if (cb) {\n+  if (CodeCache::contains(dest)) {\n@@ -1036,1 +1032,1 @@\n-      la(tmp, target.target(), offset);\n+      movptr(tmp, target.target(), offset);\n@@ -1977,6 +1973,1 @@\n-      ExternalAddress target(CompressedOops::base_addr());\n-      relocate(target.rspec(), [&] {\n-        int32_t offset;\n-        la(xheapbase, target.target(), offset);\n-        ld(xheapbase, Address(xheapbase, offset));\n-      });\n+      ld(xheapbase, ExternalAddress(CompressedOops::base_addr()));\n@@ -1987,0 +1978,7 @@\n+void MacroAssembler::movptr(Register Rd, const Address &addr, Register temp) {\n+  assert(addr.getMode() == Address::literal, \"must be applied to a literal address\");\n+  relocate(addr.rspec(), [&] {\n+    movptr(Rd, addr.target(), temp);\n+  });\n+}\n+\n@@ -2523,1 +2521,1 @@\n-    la(dst, Address((address)obj, rspec));\n+    movptr(dst, Address((address)obj, rspec));\n@@ -2526,1 +2524,1 @@\n-    ld_constant(dst, Address(dummy, rspec));\n+    ld(dst, Address(dummy, rspec));\n@@ -2540,1 +2538,1 @@\n-  la(dst, Address((address)obj, rspec));\n+  movptr(dst, Address((address)obj, rspec));\n@@ -3625,1 +3623,1 @@\n-  assert(CodeCache::find_blob(entry.target()) != nullptr,\n+  assert(CodeCache::contains(entry.target()),\n@@ -3644,1 +3642,1 @@\n-  assert(CodeCache::find_blob(entry.target()) != nullptr,\n+  assert(CodeCache::contains(entry.target()),\n@@ -4496,5 +4494,1 @@\n-  relocate(src2.rspec(), [&] {\n-    int32_t offset;\n-    la(tmp, src2.target(), offset);\n-    ld(tmp, Address(tmp, offset));\n-  });\n+  ld(tmp, src2);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":42,"deletions":48,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -835,1 +835,0 @@\n-  \/\/ la will use movptr instead of GOT when not in reach for auipc.\n@@ -869,0 +868,1 @@\n+  void movptr(Register Rd, const Address &addr, Register tmp = noreg);\n@@ -871,0 +871,1 @@\n+\n@@ -929,2 +930,3 @@\n-    int64_t distance = dest - pc();                                                                \\\n-    if (is_valid_32bit_offset(distance)) {                                                         \\\n+    if (CodeCache::contains(dest)) {                                                               \\\n+      int64_t distance = dest - pc();                                                              \\\n+      assert(is_valid_32bit_offset(distance), \"Must be\");                                          \\\n@@ -986,2 +988,3 @@\n-    int64_t distance = dest - pc();                                                                \\\n-    if (is_valid_32bit_offset(distance)) {                                                         \\\n+    if (CodeCache::contains(dest)) {                                                               \\\n+      int64_t distance = dest - pc();                                                              \\\n+      assert(is_valid_32bit_offset(distance), \"Must be\");                                          \\\n@@ -1047,2 +1050,3 @@\n-    int64_t distance = dest - pc();                                                                \\\n-    if (is_valid_32bit_offset(distance)) {                                                         \\\n+    if (CodeCache::contains(dest)) {                                                               \\\n+      int64_t distance = dest - pc();                                                              \\\n+      assert(is_valid_32bit_offset(distance), \"Must be\");                                          \\\n@@ -1092,2 +1096,3 @@\n-    int64_t distance = dest - pc();                                                                \\\n-    if (is_valid_32bit_offset(distance)) {                                                         \\\n+    if (CodeCache::contains(dest)) {                                                               \\\n+      int64_t distance = dest - pc();                                                              \\\n+      assert(is_valid_32bit_offset(distance), \"Must be\");                                          \\\n@@ -1616,13 +1621,0 @@\n-  void ld_constant(Register dest, const Address &const_addr) {\n-    if (NearCpool) {\n-      ld(dest, const_addr);\n-    } else {\n-      InternalAddress target(const_addr.target());\n-      relocate(target.rspec(), [&] {\n-        int32_t offset;\n-        la(dest, target.target(), offset);\n-        ld(dest, Address(dest, offset));\n-      });\n-    }\n-  }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":14,"deletions":22,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1269,2 +1269,1 @@\n-  CodeBlob *cb = CodeCache::find_blob(_entry_point);\n-  if (cb != nullptr) {\n+  if (CodeCache::contains(_entry_point)) {\n@@ -2497,2 +2496,1 @@\n-    CodeBlob *cb = CodeCache::find_blob(entry);\n-    if (cb != nullptr) {\n+    if (CodeCache::contains(entry)) {\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2468,7 +2468,1 @@\n-    ExternalAddress target(JvmtiExport::get_field_access_count_addr());\n-    __ relocate(target.rspec(), [&] {\n-      int32_t offset;\n-      __ la(t0, target.target(), offset);\n-      __ lwu(x10, Address(t0, offset));\n-    });\n-\n+    __ lwu(x10, ExternalAddress(JvmtiExport::get_field_access_count_addr()));\n@@ -2679,6 +2673,1 @@\n-    ExternalAddress target(JvmtiExport::get_field_modification_count_addr());\n-    __ relocate(target.rspec(), [&] {\n-      int32_t offset;\n-      __ la(t0, target.target(), offset);\n-      __ lwu(x10, Address(t0, offset));\n-    });\n+    __ lwu(x10, ExternalAddress(JvmtiExport::get_field_modification_count_addr()));\n@@ -2972,6 +2961,1 @@\n-    ExternalAddress target(JvmtiExport::get_field_modification_count_addr());\n-    __ relocate(target.rspec(), [&] {\n-      int32_t offset;\n-      __ la(t0, target.target(), offset);\n-      __ lwu(c_rarg3, Address(t0, offset));\n-    });\n+    __ lwu(c_rarg3, ExternalAddress(JvmtiExport::get_field_modification_count_addr()));\n@@ -2979,0 +2963,1 @@\n+\n@@ -3104,6 +3089,1 @@\n-    ExternalAddress target(JvmtiExport::get_field_access_count_addr());\n-    __ relocate(target.rspec(), [&] {\n-      int32_t offset;\n-      __ la(t0, target.target(), offset);\n-      __ lwu(x12, Address(t0, offset));\n-    });\n+    __ lwu(x12, ExternalAddress(JvmtiExport::get_field_access_count_addr()));\n@@ -3111,0 +3091,1 @@\n+\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":6,"deletions":25,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -64,3 +64,0 @@\n-        if (config.nearCpool) {\n-            flags.add(RISCV64.Flag.NearCpool);\n-        }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/riscv64\/RISCV64HotSpotJVMCIBackendFactory.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-    final boolean nearCpool = getFlag(\"NearCpool\", Boolean.class);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/riscv64\/RISCV64HotSpotVMConfig.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -169,1 +169,0 @@\n-        NearCpool,\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/riscv64\/RISCV64.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}