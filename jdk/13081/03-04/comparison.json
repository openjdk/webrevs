{"files":[{"patch":"@@ -58,1 +58,1 @@\n-  constexpr ChunkPool(size_t size) : _first(nullptr), _size(size) {}\n+  ChunkPool(size_t size) : _first(nullptr), _size(size) {}\n@@ -144,2 +144,1 @@\n-\n-   void task() override {\n+   void task() {\n@@ -235,3 +234,3 @@\n-  Chunk* c = this;\n-  while (c != nullptr) {\n-    Chunk* next = c->next();\n+  Chunk *k = this;\n+  while( k ) {\n+    Chunk *tmp = k->next();\n@@ -239,3 +238,3 @@\n-    if (ZapResourceArea) memset(c->bottom(), badResourceValue, c->length());\n-    c->release();\n-    c = next;\n+    if (ZapResourceArea) memset(k->bottom(), badResourceValue, k->length());\n+    k->release();\n+    k = tmp;\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -128,6 +128,3 @@\n-  \/\/ Release this chunk and all subsequent chunks.\n-  void chop();\n-\n-  \/\/ Release all subsequent chunks.\n-  void next_chop();\n-\n+  void chop();                  \/\/ Chop this chunk\n+  void next_chop();             \/\/ Chop next chunk\n+  static size_t aligned_overhead_size(void) { return ARENA_ALIGN(sizeof(Chunk)); }\n@@ -135,1 +132,0 @@\n-  static size_t aligned_overhead_size() { return aligned_overhead_size(sizeof(Chunk)); }\n@@ -138,1 +134,0 @@\n-\n@@ -140,1 +135,0 @@\n-\n@@ -145,5 +139,2 @@\n-\n-  char* bottom() const {\n-    return reinterpret_cast<char*>(reinterpret_cast<uintptr_t>(this) + aligned_overhead_size());\n-  }\n-\n+  \/\/ Boundaries of data area (possibly unused)\n+  char* bottom() const { return ((char*) this) + aligned_overhead_size(); }\n@@ -151,4 +142,1 @@\n-\n-  bool contains(const void* p) const {\n-    return bottom() <= static_cast<const char*>(p) && static_cast<const char*>(p) <= top();\n-  }\n+  bool contains(char* p) const { return bottom() <= p && p <= top(); }\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"}]}