{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.io.IOError;\n@@ -286,0 +287,6 @@\n+        } catch (IOError error) {\n+            Throwable cause = error.getCause();\n+            if (cause instanceof IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+            throw new RuntimeException(cause);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryClassLoader.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,5 @@\n-                    throw (IOException) error.getCause();\n+                    Throwable cause = error.getCause();\n+                    if (cause instanceof IOException e) {\n+                        throw e;\n+                    }\n+                    throw new RuntimeException(cause);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryModuleFinder.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,7 +47,3 @@\n-            ServiceLoader.load(ToolProvider.class, CLTest.class.getClassLoader()).stream()\n-                    .map(ServiceLoader.Provider::get)\n-                    .filter(toolProvider -> toolProvider.name().equals(\"Tool\"))\n-                    .findFirst()\n-                    .orElseThrow();\n-\n-            new CLTest().run();\n+            var test = new CLTest();\n+            test.loadToolProviderByName(); \/\/ run first to create Tool.class\n+            test.getGetResources();\n@@ -60,1 +56,9 @@\n-    void run() throws Exception {\n+    void loadToolProviderByName() {\n+        ServiceLoader.load(ToolProvider.class).stream()\n+                .map(ServiceLoader.Provider::get)\n+                .filter(toolProvider -> toolProvider.name().equals(\"Tool\"))\n+                .findFirst()\n+                .orElseThrow();\n+    }\n+\n+    void getGetResources() throws Exception {\n@@ -62,0 +66,1 @@\n+            \/\/ scheme -> file:\n@@ -63,1 +68,0 @@\n-                \"Tool.class\",\n@@ -65,0 +69,3 @@\n+                \"META-INF\/services\/java.util.spi.ToolProvider\",\n+            \/\/ scheme -> sourcelauncher-memoryclassloaderNNN:\n+                \"Tool.class\",\n@@ -68,0 +75,1 @@\n+            \/\/ scheme -> jrt:\n@@ -69,0 +77,1 @@\n+            \/\/ no scheme applicable\n@@ -115,0 +124,8 @@\n+            if (name.contains(\"META-INF\")) {\n+                if (list.size() == 0) {\n+                    error(\"resource not found: \" + name);\n+                }\n+                \/\/ one or more resources found, as expected\n+                return;\n+            }\n+\n","filename":"test\/langtools\/tools\/javac\/launcher\/src\/p\/q\/CLTest.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"}]}