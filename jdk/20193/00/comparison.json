{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,7 +152,3 @@\n-        var programPath = programDescriptor.sourceRootPath().resolve(name);\n-        if (Files.exists(programPath)) {\n-            try {\n-                return programPath.toUri().toURL();\n-            } catch (MalformedURLException e) {\n-                throw new RuntimeException(e);\n-            }\n+        URL resource = toResourceInRootPath(name);\n+        if (resource != null) {\n+            return resource;\n@@ -236,1 +232,1 @@\n-            return null;\n+            return toResourceInRootPath(name); \/\/ can be null\n@@ -274,0 +270,19 @@\n+    \/**\n+     * Resolves a \"resource name\" (as used in the getResource* methods)\n+     * to an existing file relative to source root path, or null otherwise.\n+     *\n+     * @param name the resource name\n+     * @return the URL of the resource, or null\n+     *\/\n+    private URL toResourceInRootPath(String name) {\n+        var file = programDescriptor.sourceRootPath().resolve(name);\n+        if (!Files.exists(file)) {\n+            return null;\n+        }\n+        try {\n+            return file.toUri().toURL();\n+        } catch (MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryClassLoader.java","additions":24,"deletions":9,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @bug 8210009 8321739\n- * @summary Source Launcher classloader should support getResource and getResourceAsStream\n+ * @bug 8210009 8321739 8336470\n+ * @summary Source Launcher classloader should support getResource\/s and getResourceAsStream\n@@ -48,1 +48,1 @@\n-    public static void main(String... args) throws Exception {\n+    public static void main(String... args) {\n@@ -53,1 +53,1 @@\n-    void run() throws Exception {\n+    void run() {\n@@ -57,1 +57,1 @@\n-            .vmOptions(\"--enable-preview\", \"--source\", String.valueOf(Runtime.version().feature()))\n+            .vmOptions(\"--enable-preview\")\n","filename":"test\/langtools\/tools\/javac\/launcher\/GetResourceTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+                \"p\/q\/CLTest.java\", \/\/ (re)source files part of the multi-file protocol\n@@ -155,0 +156,3 @@\n+        if (!name.endsWith(\".class\")) {\n+            return; \/\/ ignore non-class resources\n+        }\n","filename":"test\/langtools\/tools\/javac\/launcher\/src\/p\/q\/CLTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}