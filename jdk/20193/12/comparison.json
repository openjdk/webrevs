{"files":[{"patch":"@@ -102,0 +102,1 @@\n+          $(TOPDIR)\/src\/$1\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryClassLoader.java \\\n","filename":"make\/CompileInterimLangtools.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -101,0 +101,3 @@\n+            if (!Files.exists(file)) { \/\/ Don't use Files.notExists(file)\n+                return null;\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/Resources.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.io.UncheckedIOException;\n@@ -51,0 +52,2 @@\n+import jdk.internal.module.Resources;\n+\n@@ -152,7 +155,3 @@\n-        var programPath = programDescriptor.sourceRootPath().resolve(name);\n-        if (Files.exists(programPath)) {\n-            try {\n-                return programPath.toUri().toURL();\n-            } catch (MalformedURLException e) {\n-                throw new RuntimeException(e);\n-            }\n+        URL resource = toResourceInRootPath(name);\n+        if (resource != null) {\n+            return resource;\n@@ -236,1 +235,1 @@\n-            return null;\n+            return toResourceInRootPath(name);\n@@ -274,0 +273,16 @@\n+    \/**\n+     * Resolves a \"resource name\" (as used in the getResource* methods)\n+     * to an existing file relative to source root path, or null otherwise.\n+     *\n+     * @param name the resource name\n+     * @return the URL of the resource, or null\n+     *\/\n+    private URL toResourceInRootPath(String name) {\n+        try {\n+            var path = Resources.toFilePath(programDescriptor.sourceRootPath(), name);\n+            return path == null ? null : path.toUri().toURL();\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryClassLoader.java","additions":24,"deletions":9,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @bug 8210009 8321739\n- * @summary Source Launcher classloader should support getResource and getResourceAsStream\n+ * @bug 8210009 8321739 8336470\n+ * @summary Source Launcher classloader should support getResource\/s and getResourceAsStream\n@@ -47,1 +47,1 @@\n-    public static void main(String... args) throws Exception {\n+    public static void main(String... args) {\n@@ -52,1 +52,1 @@\n-    void run() throws Exception {\n+    void run() {\n","filename":"test\/langtools\/tools\/javac\/launcher\/GetResourceTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+Tool\n","filename":"test\/langtools\/tools\/javac\/launcher\/src\/META-INF\/services\/java.util.spi.ToolProvider","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ unnamed package\n+\n+import java.io.PrintWriter;\n+import java.util.spi.ToolProvider;\n+\n+public class Tool implements ToolProvider {\n+    @Override\n+    public String name() {\n+        return \"Tool\";\n+    }\n+\n+    @Override\n+    public int run(PrintWriter out, PrintWriter err, String... args) {\n+        out.println(\"Tool\/out\");\n+        err.println(\"Tool\/err\");\n+        return 0;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/launcher\/src\/Tool.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import java.util.spi.ToolProvider;\n@@ -46,0 +47,6 @@\n+            ServiceLoader.load(ToolProvider.class, CLTest.class.getClassLoader()).stream()\n+                    .map(ServiceLoader.Provider::get)\n+                    .filter(toolProvider -> toolProvider.name().equals(\"Tool\"))\n+                    .findFirst()\n+                    .orElseThrow();\n+\n@@ -55,0 +62,3 @@\n+                \"Tool.java\",\n+                \"Tool.class\",\n+                \"p\/q\/CLTest.java\",\n@@ -153,0 +163,3 @@\n+        if (!name.endsWith(\".class\")) {\n+            return; \/\/ ignore non-class resources\n+        }\n","filename":"test\/langtools\/tools\/javac\/launcher\/src\/p\/q\/CLTest.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"}]}