{"files":[{"patch":"@@ -42,0 +42,1 @@\n+ * @requires vm.continuations\n@@ -47,1 +48,0 @@\n-\n@@ -53,1 +53,0 @@\n-    static Thread[] thr = new Thread[NUMBER_OF_THREADS];\n@@ -74,0 +73,28 @@\n+    static Thread[] startWaitingThreads(boolean isVirtual) {\n+        Thread[] threads = new Thread[NUMBER_OF_WAITING_THREADS];\n+        for (int i = 0; i < NUMBER_OF_WAITING_THREADS; i++) {\n+            \/\/ the WaitingTask has to wait to be notified in lockCheck.wait()\n+            threads[i] = startTask(i, new WaitingTask(), isVirtual, \"Waiting\");\n+        }\n+        return threads;\n+    }\n+\n+    static Thread[] startEnteringThreads(boolean isVirtual) {\n+        Thread[] threads = new Thread[NUMBER_OF_ENTERING_THREADS];\n+        for (int i = 0; i < NUMBER_OF_ENTERING_THREADS; i++) {\n+            \/\/ the EnteringTask has to be blocked at the lockCheck enter\n+            threads[i] = startTask(i, new EnteringTask(), isVirtual, \"Entering\");\n+        }\n+        return threads;\n+    }\n+\n+    static void joinThreads(Thread[] threads) {\n+        try {\n+            for (Thread t : threads) {\n+                t.join();\n+            }\n+        } catch (InterruptedException e) {\n+            throw new Error(\"Unexpected \" + e);\n+        }\n+    }\n+\n@@ -84,4 +111,2 @@\n-        for (int i = 0; i < NUMBER_OF_WAITING_THREADS; i++) {\n-            \/\/ the WaitingTask has to wait to be notified in a lockCheck.wait()\n-            thr[i] = startTask(i, new WaitingTask(), isVirtual, \"Waiting\");\n-        }\n+        Thread[] wThreads = startWaitingThreads(isVirtual);\n+\n@@ -99,7 +124,1 @@\n-        for (int i = 0; i < NUMBER_OF_WAITING_THREADS; i++) {\n-            try {\n-                thr[i].join();\n-            } catch (InterruptedException e) {\n-                throw new Error(\"Unexpected \" + e);\n-            }\n-        }\n+        joinThreads(wThreads);\n@@ -119,0 +138,2 @@\n+        Thread[] eThreads = null;\n+\n@@ -126,4 +147,2 @@\n-            for (int i = 0; i < NUMBER_OF_ENTERING_THREADS; i++) {\n-                \/\/ this EnteringTask has to be blocked on the lockCheck enter\n-                thr[i] = startTask(i, new EnteringTask(), isVirtual, \"Entering\");\n-            }\n+            eThreads = startEnteringThreads(isVirtual);\n+\n@@ -137,0 +156,1 @@\n+\n@@ -138,7 +158,1 @@\n-        for (int i = 0; i < NUMBER_OF_ENTERING_THREADS; i++) {\n-            try {\n-                thr[i].join();\n-            } catch (InterruptedException e) {\n-                throw new Error(\"Unexpected \" + e);\n-            }\n-        }\n+        joinThreads(eThreads);\n@@ -158,4 +172,3 @@\n-        for (int i = 0; i < NUMBER_OF_WAITING_THREADS; i++) {\n-            \/\/ the WaitingTask has to wait to be notified in a lockCheck.wait()\n-            thr[i] = startTask(i, new WaitingTask(), isVirtual, \"Waiting\");\n-        }\n+        Thread[] wThreads = startWaitingThreads(isVirtual);\n+        Thread[] eThreads = null;\n+\n@@ -163,4 +176,2 @@\n-            for (int i = 0; i < NUMBER_OF_ENTERING_THREADS; i++) {\n-                \/\/ this EnteringTask has to be blocked on the lockCheck enter\n-                thr[NUMBER_OF_WAITING_THREADS + i] = startTask(i, new EnteringTask(), isVirtual, \"Entering\");\n-            }\n+            eThreads = startEnteringThreads(isVirtual);\n+\n@@ -177,7 +188,2 @@\n-        for (int i = 0; i < NUMBER_OF_THREADS; i++) {\n-            try {\n-                thr[i].join();\n-            } catch (InterruptedException e) {\n-                throw new Error(\"Unexpected \" + e);\n-            }\n-        }\n+        joinThreads(wThreads);\n+        joinThreads(eThreads);\n@@ -203,4 +209,3 @@\n-        for (int i = 0; i < NUMBER_OF_WAITING_THREADS; i++) {\n-            \/\/ the WaitingTask has to wait to be notified in a lockCheck.wait()\n-            thr[i] = startTask(i, new WaitingTask(), isVirtual, \"Waiting\");\n-        }\n+        Thread[] wThreads = startWaitingThreads(isVirtual);\n+        Thread[] eThreads = null;\n+\n@@ -216,4 +221,1 @@\n-            for (int i = 0; i < NUMBER_OF_ENTERING_THREADS; i++) {\n-                \/\/ this EnteringTask has to be blocked on the lockCheck enter\n-                thr[NUMBER_OF_WAITING_THREADS + i] = startTask(i, new EnteringTask(), isVirtual, \"Entering\");\n-            }\n+            eThreads = startEnteringThreads(isVirtual);\n@@ -230,1 +232,1 @@\n-                lockCheck.notify();\n+                lockCheck.notify(); \/\/ notify waiting threads one by one\n@@ -242,7 +244,2 @@\n-        for (int i = 0; i < NUMBER_OF_THREADS; i++) {\n-            try {\n-                thr[i].join();\n-            } catch (InterruptedException e) {\n-                throw new Error(\"Unexpected \" + e);\n-            }\n-        }\n+        joinThreads(wThreads);\n+        joinThreads(eThreads);\n@@ -252,0 +249,7 @@\n+    static void test(boolean isVirtual) {\n+        test0(isVirtual);\n+        test1(isVirtual);\n+        test2(isVirtual);\n+        test3(isVirtual);\n+    }\n+\n@@ -256,11 +260,2 @@\n-        \/\/ test platform threads\n-        test0(false);\n-        test1(false);\n-        test2(false);\n-        test3(false);\n-\n-        \/\/ test virtual threads\n-        test0(true);\n-        test1(true);\n-        test2(true);\n-        test3(true);\n+        test(false); \/\/ test platform threads\n+        test(true);  \/\/ test virtual threads\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/ObjectMonitorUsage\/ObjectMonitorUsage.java","additions":61,"deletions":66,"binary":false,"changes":127,"status":"modified"}]}