{"files":[{"patch":"@@ -1489,3 +1489,6 @@\n-    nWant = mon->contentions(); \/\/ # of threads contending for monitor\n-    nWait = mon->waiters();     \/\/ # of threads in Object.wait()\n-    wantList =  Threads::get_pending_threads(tlh.list(), nWant + nWait, (address)mon);\n+    nWant = mon->contentions(); \/\/ # of threads contending for monitor entry, but not re-entry\n+    nWait = mon->waiters();     \/\/ # of threads waiting for notification,\n+                                \/\/ or to re-enter monitor, in Object.wait()\n+\n+    \/\/ Get the actual set of threads trying to enter, or re-enter, the monitor.\n+    wantList = Threads::get_pending_threads(tlh.list(), nWant + nWait, (address)mon);\n@@ -1498,11 +1501,9 @@\n-    ObjectWaiter *waiter = mon->first_waiter();\n-    for (int i = 0; i < nWait; i++) {\n-      if (waiter == nullptr || (i != 0 && waiter == mon->first_waiter())) {\n-        \/\/ robustness: the waiting list has gotten smaller\n-        \/\/ The nWait count we got from the mon->waiters() may include the re-entering\n-        \/\/ the monitor threads after being notified. Here we are correcting the actual\n-        \/\/ number of the waiting threads by excluding those re-entering the monitor.\n-        nWait = i;\n-        break;\n-      }\n-      waiter = mon->next_waiter(waiter);\n+    \/\/ Robustness: the actual waiting list can be smaller.\n+    \/\/ The nWait count we got from the mon->waiters() may include the re-entering\n+    \/\/ the monitor threads after being notified. Here we are correcting the actual\n+    \/\/ number of the waiting threads by excluding those re-entering the monitor.\n+    nWait = 0;\n+    for (ObjectWaiter* waiter = mon->first_waiter();\n+         waiter != nullptr && (nWait == 0 || waiter != mon->first_waiter());\n+         waiter = mon->next_waiter(waiter)) {\n+      nWait++;\n@@ -1549,1 +1550,1 @@\n-        assert(w != nullptr, \"DBG: sanity check\");\n+        assert(w != nullptr, \"sanity check\");\n@@ -1551,2 +1552,1 @@\n-        \/\/ it has not been notified. This thread can't change the\n-        \/\/ state of the monitor so it doesn't need to be suspended.\n+        \/\/ it has not been notified.\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- *     the expected values for the owner, entry_count, water_count\n+ *     the expected values for the owner, entry_count, waiter_count\n@@ -34,7 +34,7 @@\n- *       - unowned object without any waitings\n- *       - unowned object with waitings to be notified\n- *       - owned object without any waitings\n- *       - owned object with N waitings to enter the monitor\n- *       - owned object with N waitings to be notified\n- *       - owned object with N waitings to enter, from 0 to N waitings to re-enter,\n- *         from N to 0 waitings to be notified\n+ *       - unowned object without any waiting threads\n+ *       - unowned object with threads waiting to be notified\n+ *       - owned object without any waiting threads\n+ *       - owned object with N threads waiting to enter the monitor\n+ *       - owned object with N threads waiting to be notified\n+ *       - owned object with N threads waiting to enter, from 0 to N threads\n+ *         waiting to re-enter, from N to 0 threads waiting to be notified\n@@ -42,1 +42,0 @@\n- * @requires vm.continuations\n@@ -58,0 +57,1 @@\n+    native static int waitsToBeNotified();\n@@ -91,0 +91,3 @@\n+        while (waitsToBeNotified() < NUMBER_OF_WAITING_THREADS) {\n+            sleep(1);\n+        }\n@@ -126,0 +129,1 @@\n+        setTestedMonitor(lockCheck);\n@@ -134,1 +138,1 @@\n-              NUMBER_OF_ENTERING_THREADS);\n+              NUMBER_OF_WAITING_THREADS);\n@@ -139,0 +143,1 @@\n+        setTestedMonitor(null);\n@@ -315,1 +320,1 @@\n-         public void run() {\n+        public void run() {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/ObjectMonitorUsage\/ObjectMonitorUsage.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+static int waits_to_be_notified = 0;\n@@ -64,0 +65,7 @@\n+JNIEXPORT void JNICALL\n+MonitorWait(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jobject monitor, jlong timeout) {\n+  RawMonitorLocker rml(jvmti, jni, event_lock);\n+  if (is_tested_monitor(jni, monitor)) {\n+    waits_to_be_notified++;\n+  }\n+}\n@@ -65,1 +73,9 @@\n-jint  Agent_Initialize(JavaVM *jvm, char *options, void *reserved) {\n+JNIEXPORT void JNICALL\n+MonitorWaited(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jobject monitor, jboolean timed_out) {\n+  RawMonitorLocker rml(jvmti, jni, event_lock);\n+  if (is_tested_monitor(jni, monitor)) {\n+    waits_to_be_notified--;\n+  }\n+}\n+\n+jint Agent_Initialize(JavaVM *jvm, char *options, void *reserved) {\n@@ -95,0 +111,2 @@\n+  callbacks.MonitorWait = &MonitorWait;\n+  callbacks.MonitorWaited = &MonitorWaited;\n@@ -206,0 +224,6 @@\n+\n+  err = jvmti->SetEventNotificationMode(event_mode, JVMTI_EVENT_MONITOR_WAIT, nullptr);\n+  check_jvmti_status(jni, err, \"setTestedMonitor: error in JVMTI SetEventNotificationMode #3\");\n+\n+  err = jvmti->SetEventNotificationMode(event_mode, JVMTI_EVENT_MONITOR_WAITED, nullptr);\n+  check_jvmti_status(jni, err, \"setTestedMonitor: error in JVMTI SetEventNotificationMode #4\");\n@@ -214,0 +238,6 @@\n+JNIEXPORT jint JNICALL\n+Java_ObjectMonitorUsage_waitsToBeNotified(JNIEnv *jni, jclass cls) {\n+  RawMonitorLocker rml(jvmti, jni, event_lock);\n+  return waits_to_be_notified;\n+}\n+\n@@ -219,1 +249,1 @@\n-} \/\/ exnern \"C\"\n+} \/\/ extern \"C\"\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/ObjectMonitorUsage\/libObjectMonitorUsage.cpp","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"}]}