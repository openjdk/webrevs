{"files":[{"patch":"@@ -55,0 +55,2 @@\n+    native static int waitsToEnter();\n+    native static int setTestedMonitor(Object monitor);\n@@ -66,0 +68,8 @@\n+    static void sleep(long millis) {\n+        try {\n+            Thread.sleep(millis);\n+        } catch (InterruptedException e) {\n+            \/\/ ignore\n+        }\n+    }\n+\n@@ -88,0 +98,3 @@\n+        while (waitsToEnter() < NUMBER_OF_ENTERING_THREADS) {\n+            sleep(1);\n+        }\n@@ -138,0 +151,1 @@\n+        setTestedMonitor(lockCheck);\n@@ -158,0 +172,1 @@\n+        setTestedMonitor(null);\n@@ -172,0 +187,1 @@\n+        setTestedMonitor(lockCheck);\n@@ -188,0 +204,1 @@\n+        setTestedMonitor(null);\n@@ -209,0 +226,1 @@\n+        setTestedMonitor(lockCheck);\n@@ -244,0 +262,1 @@\n+        setTestedMonitor(null);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/ObjectMonitorUsage\/ObjectMonitorUsage.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-static jvmtiCapabilities caps;\n+static jrawMonitorID event_lock = nullptr;\n@@ -38,0 +38,26 @@\n+static int waits_to_enter = 0;\n+static jobject tested_monitor = nullptr;\n+\n+static bool is_tested_monitor(JNIEnv *jni, jobject monitor) {\n+  if (tested_monitor == nullptr) {\n+    return false; \/\/ tested_monitor was not set yet\n+  }\n+  return jni->IsSameObject(monitor, tested_monitor) == JNI_TRUE;\n+}\n+\n+JNIEXPORT void JNICALL\n+MonitorContendedEnter(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jobject monitor) {\n+  RawMonitorLocker rml(jvmti, jni, event_lock);\n+  if (is_tested_monitor(jni, monitor)) {\n+    waits_to_enter++;\n+  }\n+}\n+\n+JNIEXPORT void JNICALL\n+MonitorContendedEntered(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jobject monitor) {\n+  RawMonitorLocker rml(jvmti, jni, event_lock);\n+  if (is_tested_monitor(jni, monitor)) {\n+    waits_to_enter--;\n+  }\n+}\n+\n@@ -42,0 +68,2 @@\n+  jvmtiCapabilities caps;\n+  jvmtiEventCallbacks callbacks;\n@@ -48,1 +76,0 @@\n-\n@@ -50,5 +77,1 @@\n-  if (err != JVMTI_ERROR_NONE) {\n-    LOG(\"(GetPotentialCapabilities) unexpected error: %s (%d)\\n\",\n-        TranslateError(err), err);\n-    return JNI_ERR;\n-  }\n+  check_jvmti_error(err, \"Agent_Initialize: error in JVMTI GetPotentialCapabilities\");\n@@ -57,5 +80,1 @@\n-  if (err != JVMTI_ERROR_NONE) {\n-    LOG(\"(AddCapabilities) unexpected error: %s (%d)\\n\",\n-        TranslateError(err), err);\n-    return JNI_ERR;\n-  }\n+  check_jvmti_error(err, \"Agent_Initialize: error in JVMTI AddCapabilities\");\n@@ -64,5 +83,1 @@\n-  if (err != JVMTI_ERROR_NONE) {\n-    LOG(\"(GetCapabilities) unexpected error: %s (%d)\\n\",\n-        TranslateError(err), err);\n-    return JNI_ERR;\n-  }\n+  check_jvmti_error(err, \"Agent_Initialize: error in JVMTI GetCapabilities\");\n@@ -73,0 +88,12 @@\n+  if (!caps.can_generate_monitor_events) {\n+    LOG(\"Warning: Monitor events are not implemented\\n\");\n+    return JNI_ERR;\n+  }\n+  memset(&callbacks, 0, sizeof(callbacks));\n+  callbacks.MonitorContendedEnter   = &MonitorContendedEnter;\n+  callbacks.MonitorContendedEntered = &MonitorContendedEntered;\n+\n+  err = jvmti->SetEventCallbacks(&callbacks, sizeof(jvmtiEventCallbacks));\n+  check_jvmti_error(err, \"Agent_Initialize: error in JVMTI SetEventCallbacks\");\n+\n+  event_lock = create_raw_monitor(jvmti, \"Events Monitor\");\n@@ -87,3 +114,1 @@\n-JNIEXPORT void JNICALL\n-Java_ObjectMonitorUsage_check(JNIEnv *jni, jclass cls, jobject obj, jthread owner,\n-        jint entryCount, jint waiterCount, jint notifyWaiterCount) {\n+static void print_monitor_info(JNIEnv *jni, jvmtiMonitorUsage &inf) {\n@@ -91,1 +116,0 @@\n-  jvmtiMonitorUsage inf;\n@@ -94,5 +118,1 @@\n-  check_idx++;\n-\n-  err = jvmti->GetObjectMonitorUsage(obj, &inf);\n-  check_jvmti_status(jni, err, \"error in JVMTI GetObjectMonitorUsage\");\n-\n+  LOG(\">>> [%d]\\n\", check_idx);\n@@ -100,1 +120,1 @@\n-    LOG(\">>> [%2d]    owner: none (0x0)\\n\", check_idx);\n+    LOG(\">>>          owner:               none (0x0)\\n\", check_idx);\n@@ -104,2 +124,3 @@\n-    LOG(\">>> [%2d]    owner: %s (0x%p)\\n\",\n-        check_idx, tinf.name, inf.owner);\n+    LOG(\">>>          owner:               %s (0x%p)\\n\",\n+        tinf.name, inf.owner);\n+    deallocate(jvmti, jni, tinf.name);\n@@ -107,2 +128,4 @@\n-  LOG(\">>>   entry_count: %d\\n\", inf.entry_count);\n-  LOG(\">>>  waiter_count: %d\\n\", inf.waiter_count);\n+  LOG(\">>>          entry_count:         %d\\n\", inf.entry_count);\n+  LOG(\">>>          waiter_count:        %d\\n\", inf.waiter_count);\n+  LOG(\">>>          notify_waiter_count: %d\\n\", inf.notify_waiter_count);\n+\n@@ -110,1 +133,1 @@\n-    LOG(\">>>       waiters:\\n\");\n+    LOG(\">>>  waiters:\\n\");\n@@ -116,0 +139,11 @@\n+      deallocate(jvmti, jni, tinf.name);\n+    }\n+  }\n+  if (inf.notify_waiter_count > 0) {\n+    LOG(\">>>  notify_waiters:\\n\");\n+    for (int j = 0; j < inf.notify_waiter_count; j++) {\n+      err = jvmti->GetThreadInfo(inf.notify_waiters[j], &tinf);\n+      check_jvmti_status(jni, err, \"error in JVMTI GetThreadInfo\");\n+      LOG(\">>>                %2d: %s (0x%p)\\n\",\n+          j, tinf.name, inf.notify_waiters[j]);\n+      deallocate(jvmti, jni, tinf.name);\n@@ -118,0 +152,15 @@\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_ObjectMonitorUsage_check(JNIEnv *jni, jclass cls, jobject obj, jthread owner,\n+        jint entryCount, jint waiterCount, jint notifyWaiterCount) {\n+  jvmtiError err;\n+  jvmtiMonitorUsage inf;\n+\n+  check_idx++;\n+\n+  err = jvmti->GetObjectMonitorUsage(obj, &inf);\n+  check_jvmti_status(jni, err, \"error in JVMTI GetObjectMonitorUsage\");\n+\n+  print_monitor_info(jni, inf);\n+\n@@ -139,0 +188,26 @@\n+JNIEXPORT void JNICALL\n+Java_ObjectMonitorUsage_setTestedMonitor(JNIEnv *jni, jclass cls, jobject monitor) {\n+  jvmtiError err;\n+  jvmtiEventMode event_mode = (monitor != nullptr) ? JVMTI_ENABLE : JVMTI_DISABLE;\n+\n+  RawMonitorLocker rml(jvmti, jni, event_lock);\n+\n+  if (tested_monitor != nullptr) {\n+    jni->DeleteGlobalRef(tested_monitor);\n+  }\n+  tested_monitor = (monitor != nullptr) ? jni->NewGlobalRef(monitor) : nullptr;\n+  waits_to_enter = 0;\n+\n+  err = jvmti->SetEventNotificationMode(event_mode, JVMTI_EVENT_MONITOR_CONTENDED_ENTER, nullptr);\n+  check_jvmti_status(jni, err, \"setTestedMonitor: error in JVMTI SetEventNotificationMode #1\");\n+\n+  err = jvmti->SetEventNotificationMode(event_mode, JVMTI_EVENT_MONITOR_CONTENDED_ENTERED, nullptr);\n+  check_jvmti_status(jni, err, \"setTestedMonitor: error in JVMTI SetEventNotificationMode #2\");\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_ObjectMonitorUsage_waitsToEnter(JNIEnv *jni, jclass cls) {\n+  RawMonitorLocker rml(jvmti, jni, event_lock);\n+  return waits_to_enter;\n+}\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/ObjectMonitorUsage\/libObjectMonitorUsage.cpp","additions":107,"deletions":32,"binary":false,"changes":139,"status":"modified"}]}