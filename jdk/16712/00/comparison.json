{"files":[{"patch":"@@ -21,2 +21,2 @@\n-you. The \"make test framework\" is simple to start with, but more complex\n-ad-hoc combination of tests is also possible. You can always invoke the test\n+you. The \"make test framework\" is simple to start with, but more complex ad-hoc\n+combination of tests is also possible. You can always invoke the test\n@@ -36,12 +36,12 @@\n-\"tier1\" and \"tier2\" refer to tiered testing, see further down. \"TEST\" is a\n- test selection argument which the make test framework will use to try to\n- find the tests you want. It iterates over the available test frameworks, and\n- if the test isn't present in one, it tries the next one. The main target\n- `test` uses the jdk-image as the tested product. There is also an alternate\n- target `exploded-test` that uses the exploded image instead. Not all tests\n- will run successfully on the exploded image, but using this target can\n- greatly improve rebuild times for certain workflows.\n-\n-Previously, `make test` was used to invoke an old system for running tests,\n-and `make run-test` was used for the new test framework. For backward\n-compatibility with scripts and muscle memory, `run-test` and variants like\n+\"tier1\" and \"tier2\" refer to tiered testing, see further down. \"TEST\" is a test\n+ selection argument which the make test framework will use to try to find the\n+ tests you want. It iterates over the available test frameworks, and if the\n+ test isn't present in one, it tries the next one. The main target `test` uses\n+ the jdk-image as the tested product. There is also an alternate target\n+ `exploded-test` that uses the exploded image instead. Not all tests will run\n+ successfully on the exploded image, but using this target can greatly improve\n+ rebuild times for certain workflows.\n+\n+Previously, `make test` was used to invoke an old system for running tests, and\n+`make run-test` was used for the new test framework. For backward compatibility\n+with scripts and muscle memory, `run-test` and variants like\n@@ -67,12 +67,13 @@\n-analyze the test failures. Collecting this data involves running various commands\n-(which are listed in files residing in `test\/failure_handler\/src\/share\/conf`)\n-and some of these commands use `sudo`. If the system's `sudoers` file isn't\n-configured to allow running these commands, then it can result in password being\n-prompted during the failure handler execution. Typically, when running locally,\n-collecting this additional data isn't always necessary. To disable running the\n-failure handler, use `--enable-jtreg-failure-handler=no` when running `configure`.\n-If, however, you want to let the failure handler to run and don't want to be\n-prompted for sudo password, then you can configure your `sudoers` file\n-appropriately. Please read the necessary documentation of your operating system\n-to see how to do that; here we only show one possible way of doing that - edit\n-the `\/etc\/sudoers.d\/sudoers` file to include the following line:\n+analyze the test failures. Collecting this data involves running various\n+commands (which are listed in files residing in\n+`test\/failure_handler\/src\/share\/conf`) and some of these commands use `sudo`.\n+If the system's `sudoers` file isn't configured to allow running these\n+commands, then it can result in password being prompted during the failure\n+handler execution. Typically, when running locally, collecting this additional\n+data isn't always necessary. To disable running the failure handler, use\n+`--enable-jtreg-failure-handler=no` when running `configure`. If, however, you\n+want to let the failure handler to run and don't want to be prompted for sudo\n+password, then you can configure your `sudoers` file appropriately. Please read\n+the necessary documentation of your operating system to see how to do that;\n+here we only show one possible way of doing that - edit the\n+`\/etc\/sudoers.d\/sudoers` file to include the following line:\n@@ -85,2 +86,2 @@\n-command (this is one of the commands that is listed in the files\n-at `test\/failure_handler\/src\/share\/conf`), for the user `johndoe`. Here `johndoe`\n+command (this is one of the commands that is listed in the files at\n+`test\/failure_handler\/src\/share\/conf`), for the user `johndoe`. Here `johndoe`\n@@ -117,3 +118,3 @@\n-`TEST.groups` files. There are test groups that cover a specific component,\n-for example `hotspot_gc`. It is a good idea to look into `TEST.groups` files\n-to get a sense what tests are relevant to a particular JDK component.\n+`TEST.groups` files. There are test groups that cover a specific component, for\n+example `hotspot_gc`. It is a good idea to look into `TEST.groups` files to get\n+a sense what tests are relevant to a particular JDK component.\n@@ -123,3 +124,2 @@\n-tests, and therefore\n-_tiered_ test groups exist. Tiered test groups are not component-specific, but\n- rather cover the significant parts of the entire JDK.\n+tests, and therefore _tiered_ test groups exist. Tiered test groups are not\n+component-specific, but rather cover the significant parts of the entire JDK.\n@@ -130,2 +130,1 @@\n-sometimes less stable tests, or the tests that require special\n-configuration.\n+sometimes less stable tests, or the tests that require special configuration.\n@@ -138,15 +137,13 @@\n-- `tier1`: This is the most fundamental test tier.\n-  Roughly speaking, a failure of a test in this tier has the potential\n-  to indicate a problem that would affect many Java programs. Tests in\n-  `tier1` include tests of HotSpot, core APIs in the `java.base`\n-  module, and the `javac` compiler. Multiple developers run these\n-  tests every day. Because of the widespread use, the tests in `tier1`\n-  are carefully selected and optimized to run fast, and to run in the\n-  most stable manner. As a guideline, nearly all individual tests in\n-  `tier1` are expected to run to completion in ten seconds or less\n-  when run on common configurations used for development. Long-running\n-  tests, even of core functionality, should occur in higher tiers or\n-  be covered in other kinds of testing. The test failures in `tier1`\n-  are usually followed up on quickly, either with fixes, or adding\n-  relevant tests to problem list. GitHub Actions workflows, if\n-  enabled, run `tier1` tests.\n+- `tier1`: This is the most fundamental test tier. Roughly speaking, a failure\n+  of a test in this tier has the potential to indicate a problem that would\n+  affect many Java programs. Tests in `tier1` include tests of HotSpot, core\n+  APIs in the `java.base` module, and the `javac` compiler. Multiple developers\n+  run these tests every day. Because of the widespread use, the tests in\n+  `tier1` are carefully selected and optimized to run fast, and to run in the\n+  most stable manner. As a guideline, nearly all individual tests in `tier1`\n+  are expected to run to completion in ten seconds or less when run on common\n+  configurations used for development. Long-running tests, even of core\n+  functionality, should occur in higher tiers or be covered in other kinds of\n+  testing. The test failures in `tier1` are usually followed up on quickly,\n+  either with fixes, or adding relevant tests to problem list. GitHub Actions\n+  workflows, if enabled, run `tier1` tests.\n@@ -161,3 +158,2 @@\n-  such, this suite should either be run with low concurrency\n-  (`TEST_JOBS=1`), or without headful tests(`JTREG_KEYWORDS=\\!headful`), or\n-  both.\n+  such, this suite should either be run with low concurrency (`TEST_JOBS=1`),\n+  or without headful tests(`JTREG_KEYWORDS=\\!headful`), or both.\n@@ -172,4 +168,4 @@\n-JTReg tests can be selected either by picking a JTReg test group, or a selection\n-of files or directories containing JTReg tests. Documentation can be found at\n-[https:\/\/openjdk.org\/jtreg\/](https:\/\/openjdk.org\/jtreg\/), note especially the\n-extensive [FAQ](https:\/\/openjdk.org\/jtreg\/faq.html).\n+JTReg tests can be selected either by picking a JTReg test group, or a\n+selection of files or directories containing JTReg tests. Documentation can be\n+found at [https:\/\/openjdk.org\/jtreg\/](https:\/\/openjdk.org\/jtreg\/), note\n+especially the extensive [FAQ](https:\/\/openjdk.org\/jtreg\/faq.html).\n@@ -180,4 +176,3 @@\n-root can be specified either as an absolute path, or a path relative to the\n-JDK top directory, or the `test` directory. For simplicity, the hotspot\n-JTReg test root, which really is `hotspot\/jtreg` can be abbreviated as\n-just `hotspot`.\n+root can be specified either as an absolute path, or a path relative to the JDK\n+top directory, or the `test` directory. For simplicity, the hotspot JTReg test\n+root, which really is `hotspot\/jtreg` can be abbreviated as just `hotspot`.\n@@ -204,2 +199,2 @@\n-**Note:** To be able to run the Gtest suite, you need to configure your build to\n-be able to find a proper version of the gtest source. For details, see the\n+**Note:** To be able to run the Gtest suite, you need to configure your build\n+to be able to find a proper version of the gtest source. For details, see the\n@@ -225,4 +220,4 @@\n-Which microbenchmarks to run is selected using a regular expression\n-following the `micro:` test descriptor, e.g., `micro:java.lang.reflect`. This\n-delegates the test selection to JMH, meaning package name, class name and even\n-benchmark method names can be used to select tests.\n+Which microbenchmarks to run is selected using a regular expression following\n+the `micro:` test descriptor, e.g., `micro:java.lang.reflect`. This delegates\n+the test selection to JMH, meaning package name, class name and even benchmark\n+method names can be used to select tests.\n@@ -305,5 +300,6 @@\n-(Other ways are possible, e.g. using backslash: `JTREG=JOBS=1\\;TIMEOUT_FACTOR=8`.\n-Also, as a special technique, the string `%20` will be replaced with space for\n-certain options, e.g. `JTREG=JAVA_OPTIONS=-XshowSettings%20-Xlog:gc+ref=debug`.\n-This can be useful if you have layers of scripts and have trouble getting\n-proper quoting of command line arguments through.)\n+(Other ways are possible, e.g. using backslash:\n+`JTREG=JOBS=1\\;TIMEOUT_FACTOR=8`. Also, as a special technique, the string\n+`%20` will be replaced with space for certain options, e.g.\n+`JTREG=JAVA_OPTIONS=-XshowSettings%20-Xlog:gc+ref=debug`. This can be useful if\n+you have layers of scripts and have trouble getting proper quoting of command\n+line arguments through.)\n@@ -322,1 +318,2 @@\n-not to any specific test suites. These are also available as TEST_OPTS keywords.\n+not to any specific test suites. These are also available as TEST_OPTS\n+keywords.\n@@ -376,2 +373,2 @@\n-JOBS, except for Hotspot, where the default is *number of CPU cores\/2*,\n-but never more than *memory size in GB\/2*.\n+JOBS, except for Hotspot, where the default is *number of CPU cores\/2*, but\n+never more than *memory size in GB\/2*.\n@@ -392,6 +389,6 @@\n-Sets the `-testThreadFactory` for JTReg. It should be the fully qualified classname\n-of a class which implements `java.util.concurrent.ThreadFactory`.\n-One such implementation class, named Virtual, is currently part of the JDK build\n-in the `test\/jtreg_test_thread_factory\/` directory. This class gets compiled during\n-the test image build. The implementation of the Virtual class creates a new virtual\n-thread for executing each test class.\n+Sets the `-testThreadFactory` for JTReg. It should be the fully qualified\n+classname of a class which implements `java.util.concurrent.ThreadFactory`. One\n+such implementation class, named Virtual, is currently part of the JDK build in\n+the `test\/jtreg_test_thread_factory\/` directory. This class gets compiled\n+during the test image build. The implementation of the Virtual class creates a\n+new virtual thread for executing each test class.\n@@ -459,3 +456,2 @@\n-Set to `true` or `false`.\n-If `true`, JTReg will use `-match:` option, otherwise `-exclude:` will be used.\n-Default is `false`.\n+Set to `true` or `false`. If `true`, JTReg will use `-match:` option, otherwise\n+`-exclude:` will be used. Default is `false`.\n@@ -495,3 +491,2 @@\n-Retry failed tests up to a set number of times, until they pass.\n-This allows to pass the tests with intermittent failures.\n-Defaults to 0.\n+Retry failed tests up to a set number of times, until they pass. This allows to\n+pass the tests with intermittent failures. Defaults to 0.\n@@ -501,3 +496,2 @@\n-Repeat the tests up to a set number of times, stopping at first failure.\n-This helps to reproduce intermittent test failures.\n-Defaults to 0.\n+Repeat the tests up to a set number of times, stopping at first failure. This\n+helps to reproduce intermittent test failures. Defaults to 0.\n@@ -554,1 +548,2 @@\n-Amount of time to spend in each warmup iteration. Same as specifying `-w <num>`.\n+Amount of time to spend in each warmup iteration. Same as specifying `-w\n+<num>`.\n@@ -595,3 +590,3 @@\n-in the environment before running tests should work. On Windows or MacOS, setting\n-`JTREG=\"VM_OPTIONS=-Duser.language=en -Duser.country=US\"` helps for most, but\n-not all test cases.\n+in the environment before running tests should work. On Windows or MacOS,\n+setting `JTREG=\"VM_OPTIONS=-Duser.language=en -Duser.country=US\"` helps for\n+most, but not all test cases.\n@@ -663,4 +658,4 @@\n-Most automated Client UI tests use `Robot` API to control the UI. Usually,\n-the default operating system settings need to be adjusted for Robot\n-to work correctly. The detailed steps how to access and update these settings\n-for different platforms are provided below.\n+Most automated Client UI tests use `Robot` API to control the UI. Usually, the\n+default operating system settings need to be adjusted for Robot to work\n+correctly. The detailed steps how to access and update these settings for\n+different platforms are provided below.\n@@ -670,5 +665,5 @@\n-`Robot` is not permitted to control your Mac by default since\n-macOS 10.15. To allow it, choose Apple menu -> System Settings, click\n-Privacy & Security; then click Accessibility and ensure the following apps are\n-allowed to control your computer: *Java* and *Terminal*. If the tests are run\n-from an IDE, the IDE should be granted this permission too.\n+`Robot` is not permitted to control your Mac by default since macOS 10.15. To\n+allow it, choose Apple menu -> System Settings, click Privacy & Security; then\n+click Accessibility and ensure the following apps are allowed to control your\n+computer: *Java* and *Terminal*. If the tests are run from an IDE, the IDE\n+should be granted this permission too.\n@@ -681,2 +676,2 @@\n-to the following key: `HKEY_CURRENT_USER\\Control Panel\\Desktop`; make sure\n-the `ForegroundLockTimeout` value is set to 0.\n+to the following key: `HKEY_CURRENT_USER\\Control Panel\\Desktop`; make sure the\n+`ForegroundLockTimeout` value is set to 0.\n@@ -684,2 +679,3 @@\n-Additional information about Client UI tests configuration for various operating\n-systems can be obtained at [Automated client GUI testing system set up\n+Additional information about Client UI tests configuration for various\n+operating systems can be obtained at [Automated client GUI testing system set\n+up\n","filename":"doc\/testing.md","additions":104,"deletions":108,"binary":false,"changes":212,"status":"modified"}]}