{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3411,2 +3411,1 @@\n-      RecordComponent::allocate(_loader_data, name_index, descriptor_index,\n-                                attributes_count, generic_sig_index,\n+      RecordComponent::allocate(_loader_data, name_index, descriptor_index, generic_sig_index,\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-                                           u2 attributes_count,\n@@ -41,1 +40,1 @@\n-         RecordComponent(name_index, descriptor_index, attributes_count,\n+         RecordComponent(name_index, descriptor_index,\n@@ -68,1 +67,0 @@\n-  st->print(\" - attributes_count: %d\", _attributes_count);\n","filename":"src\/hotspot\/share\/oops\/recordComponent.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-    u2 _attributes_count;\n@@ -46,3 +45,2 @@\n-    RecordComponent(u2 name_index, u2 descriptor_index, u2 attributes_count,\n-                    u2 generic_signature_index, AnnotationArray* annotations,\n-                    AnnotationArray* type_annotations):\n+    RecordComponent(u2 name_index, u2 descriptor_index, u2 generic_signature_index,\n+                    AnnotationArray* annotations, AnnotationArray* type_annotations):\n@@ -51,1 +49,0 @@\n-                    _attributes_count(attributes_count),\n@@ -57,1 +54,0 @@\n-                                     u2 attributes_count,\n@@ -72,2 +68,0 @@\n-    u2 attributes_count() const { return _attributes_count; }\n-\n","filename":"src\/hotspot\/share\/oops\/recordComponent.hpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -497,1 +497,0 @@\n-      assert(component->attributes_count() > 0, \"Bad component attributes count\");\n@@ -514,1 +513,4 @@\n-    write_u2(component->attributes_count());\n+    u2 attributes_count = component->generic_signature_index() != 0 ? 1 : 0\n+                        + component->annotations() != nullptr ? 1 : 0\n+                        + component->type_annotations() != nullptr ? 1 : 0;\n+    write_u2(attributes_count);\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315575\n+ * @summary test that records with invisible annotation can be retransformed\n+ *\n+ * @library \/test\/lib\n+ * @run shell MakeJAR.sh retransformAgent\n+ * @run main\/othervm -javaagent:retransformAgent.jar -Xlog:redefine+class=trace RetransformRecordAnnotation\n+ *\/\n+\n+import java.io.File;\n+import java.lang.instrument.ClassFileTransformer;\n+import java.nio.file.Files;\n+import java.security.ProtectionDomain;\n+\n+public class RetransformRecordAnnotation extends AInstrumentationTestCase {\n+\n+    \/\/ RetentionPolicy.CLASS by default\n+    @interface MyAnnotation{}\n+    public record MyRecord(@MyAnnotation Object o, Object other) {}\n+\n+    public static void main (String[] args) throws Throwable {\n+        ATestCaseScaffold test = new RetransformRecordAnnotation();\n+        test.beVerbose();\n+        test.runTest();\n+    }\n+\n+    private String targetClassName = \"RetransformRecordAnnotation$MyRecord\";\n+    private String classFileName = targetClassName + \".class\";\n+    private Class targetClass;\n+    private byte[] originalClassBytes;\n+\n+    private byte[] seenClassBytes;\n+    private byte[] newClassBytes;\n+\n+    public RetransformRecordAnnotation() throws Throwable {\n+        super(\"RetransformRecordAnnotation\");\n+\n+        File origClassFile = new File(System.getProperty(\"test.classes\", \".\"), classFileName);\n+        log(\"Reading test class from \" + origClassFile);\n+        originalClassBytes = Files.readAllBytes(origClassFile.toPath());\n+        log(\"Read \" + originalClassBytes.length + \" bytes.\");\n+    }\n+\n+    private void log(Object o) {\n+        System.out.println(String.valueOf(o));\n+    }\n+\n+    \/\/ Retransforms target class using provided class bytes;\n+    \/\/ Returns class bytes passed to the transformer.\n+    private byte[] retransform(byte[] classBytes) throws Throwable {\n+        seenClassBytes = null;\n+        newClassBytes = classBytes;\n+        fInst.retransformClasses(targetClass);\n+        assertTrue(targetClassName + \" was not seen by transform()\", seenClassBytes != null);\n+        return seenClassBytes;\n+    }\n+\n+    protected final void doRunTest() throws Throwable {\n+        ClassLoader loader = getClass().getClassLoader();\n+        targetClass = loader.loadClass(targetClassName);\n+\n+        fInst.addTransformer(new Transformer(), true);\n+\n+        {\n+            log(\"Sanity: retransform to original class bytes\");\n+            retransform(originalClassBytes);\n+            log(\"\");\n+        }\n+\n+        {\n+            log(\"Test: retransform to null\");\n+            \/\/ Ensure retransformation does not fail with ClassFormatError.\n+            retransform(null);\n+            log(\"\");\n+        }\n+    }\n+\n+\n+    public class Transformer implements ClassFileTransformer {\n+        public Transformer() {\n+        }\n+\n+        public String toString() {\n+            return Transformer.this.getClass().getName();\n+        }\n+\n+        public byte[] transform(ClassLoader loader, String className,\n+            Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) {\n+\n+            if (className.equals(targetClassName)) {\n+                log(this + \".transform() sees '\" + className\n+                        + \"' of \" + classfileBuffer.length + \" bytes.\");\n+                seenClassBytes = classfileBuffer;\n+                if (newClassBytes != null) {\n+                    log(this + \".transform() sets new classbytes for '\" + className\n+                            + \"' of \" + newClassBytes.length + \" bytes.\");\n+                }\n+                return newClassBytes;\n+            }\n+\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/instrument\/RetransformRecordAnnotation.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}