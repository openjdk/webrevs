{"files":[{"patch":"@@ -1019,1 +1019,1 @@\n-        Utils.checkNonNegative(elementCount, \"elementCount\");\n+        Utils.checkNonNegativeArgument(elementCount, \"elementCount\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1499,1 +1499,1 @@\n-     * @throws IllegalArgumentException if either {@code srcOffset},\n+     * @throws IndexOutOfBoundsException if either {@code srcOffset},\n@@ -1565,1 +1565,1 @@\n-     * @throws IllegalArgumentException if either {@code srcOffset}, {@code dstOffset} or {@code elementCount} are {@code < 0}\n+     * @throws IndexOutOfBoundsException if either {@code srcOffset}, {@code dstOffset} or {@code elementCount} are {@code < 0}\n@@ -1595,0 +1595,1 @@\n+     *         or {@code offset < 0}\n@@ -1613,0 +1614,1 @@\n+     *         or {@code offset < 0}\n@@ -1633,0 +1635,1 @@\n+     *         or {@code offset < 0}\n@@ -1651,0 +1654,1 @@\n+     *         or {@code offset < 0}\n@@ -1671,0 +1675,1 @@\n+     *         or {@code offset < 0}\n@@ -1689,0 +1694,1 @@\n+     *         or {@code offset < 0}\n@@ -1709,0 +1715,1 @@\n+     *         or {@code offset < 0}\n@@ -1727,0 +1734,1 @@\n+     *         or {@code offset < 0}\n@@ -1747,0 +1755,1 @@\n+     *         or {@code offset < 0}\n@@ -1765,0 +1774,1 @@\n+     *         or {@code offset < 0}\n@@ -1785,0 +1795,1 @@\n+     *         or {@code offset < 0}\n@@ -1803,0 +1814,1 @@\n+     *         or {@code offset < 0}\n@@ -1823,0 +1835,1 @@\n+     *         or {@code offset < 0}\n@@ -1841,0 +1854,1 @@\n+     *         or {@code offset < 0}\n@@ -1861,0 +1875,1 @@\n+     *         or {@code offset < 0}\n@@ -1879,0 +1894,1 @@\n+     *         or {@code offset < 0}\n@@ -1909,0 +1925,1 @@\n+     *         or {@code offset < 0}\n@@ -1927,0 +1944,1 @@\n+     *         or {@code offset < 0}\n@@ -1955,0 +1973,1 @@\n+     *         or {@code offset < 0}\n@@ -1977,0 +1996,1 @@\n+     *         or {@code offset < 0}\n@@ -1999,0 +2019,1 @@\n+     *         or {@code offset < 0}\n@@ -2021,0 +2042,1 @@\n+     *         or {@code offset < 0}\n@@ -2044,0 +2066,1 @@\n+     *         or {@code offset < 0}\n@@ -2065,0 +2088,1 @@\n+     *         or {@code offset < 0}\n@@ -2088,0 +2112,1 @@\n+     *         or {@code offset < 0}\n@@ -2111,0 +2136,1 @@\n+     *         or {@code offset < 0}\n@@ -2134,0 +2160,1 @@\n+     *         or {@code offset < 0}\n@@ -2156,0 +2183,1 @@\n+     *         or {@code offset < 0}\n@@ -2179,0 +2207,1 @@\n+     *         or {@code offset < 0}\n@@ -2201,0 +2230,1 @@\n+     *         or {@code offset < 0}\n@@ -2224,0 +2254,1 @@\n+     *         or {@code offset < 0}\n@@ -2246,0 +2277,1 @@\n+     *         or {@code offset < 0}\n@@ -2269,0 +2301,1 @@\n+     *         or {@code offset < 0}\n@@ -2291,0 +2324,1 @@\n+     *         or {@code offset < 0}\n@@ -2323,0 +2357,1 @@\n+     *         or {@code offset < 0}\n@@ -2345,0 +2380,1 @@\n+     *         or {@code offset < 0}\n@@ -2425,1 +2461,1 @@\n-     * @throws IllegalArgumentException if either {@code srcOffset}, {@code dstIndex} or {@code elementCount} are {@code < 0}\n+     * @throws IndexOutOfBoundsException if either {@code srcOffset}, {@code dstIndex} or {@code elementCount} are {@code < 0}\n@@ -2476,1 +2512,1 @@\n-     * @throws IllegalArgumentException if either {@code srcIndex}, {@code dstOffset} or {@code elementCount} are {@code < 0}\n+     * @throws IndexOutOfBoundsException if either {@code srcIndex}, {@code dstOffset} or {@code elementCount} are {@code < 0}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":40,"deletions":4,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.foreign.Utils;\n@@ -393,1 +394,1 @@\n-     * @throws IndexOutOfBoundsException if {@code elementCount * sourceElementLayout.byteSize()} overflows\n+     * @throws ArithmeticException if {@code elementCount * sourceElementLayout.byteSize()} overflows\n@@ -395,1 +396,1 @@\n-     * @throws IllegalArgumentException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}\n+     * @throws IndexOutOfBoundsException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}\n@@ -406,0 +407,1 @@\n+        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n@@ -736,6 +738,1 @@\n-        long byteSize;\n-        try {\n-            byteSize = Math.multiplyExact(layout.byteSize(), size);\n-        } catch (ArithmeticException _) {\n-            throw new IndexOutOfBoundsException(\"Overflow for size=\" + size + \" and layout=\" + layout);\n-        }\n+        long byteSize = Math.multiplyExact(layout.byteSize(), size);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-        Utils.checkNonNegative(newSize, \"newSize\");\n+        Utils.checkNonNegativeArgument(newSize, \"newSize\");\n@@ -595,3 +595,3 @@\n-        Utils.checkNonNegative(srcOffset, \"srcOffset\");\n-        Utils.checkNonNegative(dstOffset, \"dstOffset\");\n-        Utils.checkNonNegative(elementCount, \"elementCount\");\n+        Utils.checkNonNegativeIndex(srcOffset, \"srcOffset\");\n+        Utils.checkNonNegativeIndex(dstOffset, \"dstOffset\");\n+        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n@@ -630,3 +630,3 @@\n-        Utils.checkNonNegative(srcOffset, \"srcOffset\");\n-        Utils.checkNonNegative(dstIndex, \"dstIndex\");\n-        Utils.checkNonNegative(elementCount, \"elementCount\");\n+        Utils.checkNonNegativeIndex(srcOffset, \"srcOffset\");\n+        Utils.checkNonNegativeIndex(dstIndex, \"dstIndex\");\n+        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n@@ -659,3 +659,3 @@\n-        Utils.checkNonNegative(srcIndex, \"srcIndex\");\n-        Utils.checkNonNegative(dstOffset, \"dstOffset\");\n-        Utils.checkNonNegative(elementCount, \"elementCount\");\n+        Utils.checkNonNegativeIndex(srcIndex, \"srcIndex\");\n+        Utils.checkNonNegativeIndex(dstOffset, \"dstOffset\");\n+        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-        Utils.checkNonNegative(byteSize, \"allocation size\");\n+        Utils.checkNonNegativeArgument(byteSize, \"allocation size\");\n@@ -216,1 +216,1 @@\n-    public static void checkNonNegative(long value, String name) {\n+    public static void checkNonNegativeArgument(long value, String name) {\n@@ -222,0 +222,6 @@\n+    public static void checkNonNegativeIndex(long value, String name) {\n+        if (value < 0) {\n+            throw new IndexOutOfBoundsException(\"The provided \" + name + \" is negative: \" + value);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -154,9 +154,2 @@\n-        Utils.checkNonNegative(offset, \"offset\");\n-        Utils.checkNonNegative(index, \"index\");\n-        if (offset < 0) {\n-            throw new IllegalArgumentException(\"Negative offset: \" + offset);\n-        }\n-        if (index < 0) {\n-            throw new IllegalArgumentException(\"Negative index: \" + index);\n-        }\n-\n+        Utils.checkNonNegativeArgument(offset, \"offset\");\n+        Utils.checkNonNegativeArgument(index, \"index\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -374,1 +374,1 @@\n-        expectedExceptionsMessageRegExp=\".*Negative offset.*\")\n+        expectedExceptionsMessageRegExp=\".*offset is negative.*\")\n@@ -380,1 +380,1 @@\n-        expectedExceptionsMessageRegExp=\".*Negative index.*\")\n+        expectedExceptionsMessageRegExp=\".*index is negative.*\")\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -248,2 +248,2 @@\n-            \/\/ IndexOutOfBoundsException if {@code elementCount * sourceElementLayout.byteSize()} overflows\n-            assertThrows(IndexOutOfBoundsException.class, () ->\n+            \/\/ ArithmeticException if {@code elementCount * sourceElementLayout.byteSize()} overflows\n+            assertThrows(ArithmeticException.class, () ->\n@@ -258,2 +258,2 @@\n-            \/\/ IllegalArgumentException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}\n-            assertThrows(IllegalArgumentException.class, () ->\n+            \/\/ IndexOutOfBoundsException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}\n+            assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -262,1 +262,1 @@\n-            assertThrows(IllegalArgumentException.class, () ->\n+            assertThrows(IndexOutOfBoundsException.class, () ->\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -155,1 +155,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -158,1 +158,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -167,1 +167,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -170,1 +170,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -173,1 +173,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -182,1 +182,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -185,1 +185,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -188,1 +188,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -197,1 +197,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -200,1 +200,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n@@ -203,1 +203,1 @@\n-        assertThrows(IllegalArgumentException.class, () ->\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n","filename":"test\/jdk\/java\/foreign\/TestSegmentCopy.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n@@ -58,2 +59,1 @@\n-            Arena session = arena;\n-            var segment = session.allocate(0, 1);\n+            var segment = arena.allocate(0, 1);\n@@ -62,1 +62,1 @@\n-            segment = session.allocate(seq);\n+            segment = arena.allocate(seq);\n@@ -65,1 +65,1 @@\n-            segment = session.allocate(0, 4);\n+            segment = arena.allocate(0, 4);\n@@ -136,2 +136,1 @@\n-            Arena scope1 = arena;\n-            MemorySegment segment = scope1.allocate(100, 1);\n+            MemorySegment segment = arena.allocate(100, 1);\n@@ -194,0 +193,32 @@\n+    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n+    public void testNegativeGetOffset() {\n+        try (var arena = Arena.ofConfined()){\n+            var segment = arena.allocate(JAVA_INT);\n+            segment.get(JAVA_INT, -1);\n+        }\n+    }\n+\n+    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n+    public void testNegativeSetOffset() {\n+        try (var arena = Arena.ofConfined()){\n+            var segment = arena.allocate(JAVA_INT);\n+            segment.set(JAVA_INT, -1, 1);\n+        }\n+    }\n+\n+    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n+    public void testNegativeGetAtOffset() {\n+        try (var arena = Arena.ofConfined()){\n+            var segment = arena.allocate(JAVA_INT);\n+            segment.getAtIndex(JAVA_INT, -1);\n+        }\n+    }\n+\n+    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n+    public void testNegativeSetAtOffset() {\n+        try (var arena = Arena.ofConfined()){\n+            var segment = arena.allocate(JAVA_INT);\n+            segment.setAtIndex(JAVA_INT, -1, 1);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":37,"deletions":6,"binary":false,"changes":43,"status":"modified"}]}