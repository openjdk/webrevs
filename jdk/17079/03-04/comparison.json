{"files":[{"patch":"@@ -1973,1 +1973,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -1996,1 +1996,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2019,1 +2019,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2042,1 +2042,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2066,1 +2066,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2088,1 +2088,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2112,1 +2112,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2136,1 +2136,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2160,1 +2160,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2183,1 +2183,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2207,1 +2207,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2230,1 +2230,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2254,1 +2254,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2277,1 +2277,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2301,1 +2301,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2324,1 +2324,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2357,1 +2357,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n@@ -2380,1 +2380,1 @@\n-     *         or {@code offset < 0}\n+     *         or {@code index < 0}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -407,1 +407,0 @@\n-        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -595,2 +595,0 @@\n-        Utils.checkNonNegativeIndex(srcOffset, \"srcOffset\");\n-        Utils.checkNonNegativeIndex(dstOffset, \"dstOffset\");\n@@ -629,3 +627,0 @@\n-\n-        Utils.checkNonNegativeIndex(srcOffset, \"srcOffset\");\n-        Utils.checkNonNegativeIndex(dstIndex, \"dstIndex\");\n@@ -659,3 +654,0 @@\n-        Utils.checkNonNegativeIndex(srcIndex, \"srcIndex\");\n-        Utils.checkNonNegativeIndex(dstOffset, \"dstOffset\");\n-        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -216,0 +216,1 @@\n+    @ForceInline\n@@ -222,0 +223,1 @@\n+    @ForceInline\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -167,0 +167,7 @@\n+    @Test(dataProvider = \"segmentAccessors\")\n+    public <X, L extends ValueLayout> void negativeOffset(String testName, Accessor<X, L> accessor) {\n+        MemorySegment segment = MemorySegment.ofArray(new byte[100]);\n+        assertThrows(IndexOutOfBoundsException.class, () -> accessor.get(segment, -ValueLayout.JAVA_LONG.byteSize()));\n+        assertThrows(IndexOutOfBoundsException.class, () -> accessor.set(segment, -ValueLayout.JAVA_LONG.byteSize(), accessor.value));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.foreign.MemoryLayout;\n@@ -138,0 +139,2 @@\n+        var source = MemorySegment.ofArray(new byte[]{});\n+        ScopedOperation.ofScope(a -> a.allocateFrom(ValueLayout.JAVA_INT, source, JAVA_BYTE, 0, 1), \"Arena::allocateFrom\/5arg\");\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -230,5 +230,1 @@\n-            Arena closedArena = Arena.ofConfined();\n-            closedArena.close();\n-            assertThrows(IllegalStateException.class, () ->\n-                    closedArena.allocateFrom(elementLayout, source, sourceElementLayout, 0, 1)\n-            );\n+            \/\/ This is tested in TestScopedOperations\n@@ -248,1 +244,1 @@\n-            \/\/ ArithmeticException if {@code elementCount * sourceElementLayout.byteSize()} overflows\n+            \/\/ IllegalArgumentException if {@code elementCount * sourceElementLayout.byteSize()} overflows\n@@ -258,1 +254,1 @@\n-            \/\/ IndexOutOfBoundsException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}\n+            \/\/ IndexOutOfBoundsException if {@code sourceOffset < 0}\n@@ -260,1 +256,1 @@\n-                    arena.allocateFrom(elementLayout, source, sourceElementLayout, -1, 1)\n+                    arena.allocateFrom(elementLayout, source, sourceElementLayout, -elementLayout.byteSize(), 1)\n@@ -262,1 +258,3 @@\n-            assertThrows(IndexOutOfBoundsException.class, () ->\n+\n+            \/\/ IllegalArgumentException if {@code elementCount < 0}\n+            assertThrows(IllegalArgumentException.class, () ->\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -193,32 +193,0 @@\n-    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n-    public void testNegativeGetOffset() {\n-        try (var arena = Arena.ofConfined()){\n-            var segment = arena.allocate(JAVA_INT);\n-            segment.get(JAVA_INT, -1);\n-        }\n-    }\n-\n-    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n-    public void testNegativeSetOffset() {\n-        try (var arena = Arena.ofConfined()){\n-            var segment = arena.allocate(JAVA_INT);\n-            segment.set(JAVA_INT, -1, 1);\n-        }\n-    }\n-\n-    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n-    public void testNegativeGetAtOffset() {\n-        try (var arena = Arena.ofConfined()){\n-            var segment = arena.allocate(JAVA_INT);\n-            segment.getAtIndex(JAVA_INT, -1);\n-        }\n-    }\n-\n-    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n-    public void testNegativeSetAtOffset() {\n-        try (var arena = Arena.ofConfined()){\n-            var segment = arena.allocate(JAVA_INT);\n-            segment.setAtIndex(JAVA_INT, -1, 1);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"}]}