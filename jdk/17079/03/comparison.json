{"files":[{"patch":"@@ -1019,1 +1019,1 @@\n-        MemoryLayoutUtil.requireNonNegative(elementCount);\n+        Utils.checkNonNegativeArgument(elementCount, \"elementCount\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.internal.foreign.Utils;\n@@ -1594,0 +1595,1 @@\n+     *         or {@code offset < 0}\n@@ -1612,0 +1614,1 @@\n+     *         or {@code offset < 0}\n@@ -1632,0 +1635,1 @@\n+     *         or {@code offset < 0}\n@@ -1650,0 +1654,1 @@\n+     *         or {@code offset < 0}\n@@ -1670,0 +1675,1 @@\n+     *         or {@code offset < 0}\n@@ -1688,0 +1694,1 @@\n+     *         or {@code offset < 0}\n@@ -1708,0 +1715,1 @@\n+     *         or {@code offset < 0}\n@@ -1726,0 +1734,1 @@\n+     *         or {@code offset < 0}\n@@ -1746,0 +1755,1 @@\n+     *         or {@code offset < 0}\n@@ -1764,0 +1774,1 @@\n+     *         or {@code offset < 0}\n@@ -1784,0 +1795,1 @@\n+     *         or {@code offset < 0}\n@@ -1802,0 +1814,1 @@\n+     *         or {@code offset < 0}\n@@ -1822,0 +1835,1 @@\n+     *         or {@code offset < 0}\n@@ -1840,0 +1854,1 @@\n+     *         or {@code offset < 0}\n@@ -1860,0 +1875,1 @@\n+     *         or {@code offset < 0}\n@@ -1878,0 +1894,1 @@\n+     *         or {@code offset < 0}\n@@ -1908,0 +1925,1 @@\n+     *         or {@code offset < 0}\n@@ -1926,0 +1944,1 @@\n+     *         or {@code offset < 0}\n@@ -1954,0 +1973,1 @@\n+     *         or {@code offset < 0}\n@@ -1976,0 +1996,1 @@\n+     *         or {@code offset < 0}\n@@ -1998,0 +2019,1 @@\n+     *         or {@code offset < 0}\n@@ -2020,0 +2042,1 @@\n+     *         or {@code offset < 0}\n@@ -2043,0 +2066,1 @@\n+     *         or {@code offset < 0}\n@@ -2064,0 +2088,1 @@\n+     *         or {@code offset < 0}\n@@ -2087,0 +2112,1 @@\n+     *         or {@code offset < 0}\n@@ -2110,0 +2136,1 @@\n+     *         or {@code offset < 0}\n@@ -2133,0 +2160,1 @@\n+     *         or {@code offset < 0}\n@@ -2155,0 +2183,1 @@\n+     *         or {@code offset < 0}\n@@ -2178,0 +2207,1 @@\n+     *         or {@code offset < 0}\n@@ -2200,0 +2230,1 @@\n+     *         or {@code offset < 0}\n@@ -2223,0 +2254,1 @@\n+     *         or {@code offset < 0}\n@@ -2245,0 +2277,1 @@\n+     *         or {@code offset < 0}\n@@ -2268,0 +2301,1 @@\n+     *         or {@code offset < 0}\n@@ -2290,0 +2324,1 @@\n+     *         or {@code offset < 0}\n@@ -2322,0 +2357,1 @@\n+     *         or {@code offset < 0}\n@@ -2344,0 +2380,1 @@\n+     *         or {@code offset < 0}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.foreign.Utils;\n@@ -393,1 +394,1 @@\n-     * @throws IndexOutOfBoundsException if {@code elementCount * sourceElementLayout.byteSize()} overflows\n+     * @throws IllegalArgumentException if {@code elementCount * sourceElementLayout.byteSize()} overflows\n@@ -406,0 +407,1 @@\n+        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -156,3 +156,1 @@\n-        if (newSize < 0) {\n-            throw new IllegalArgumentException(\"newSize < 0\");\n-        }\n+        Utils.checkNonNegativeArgument(newSize, \"newSize\");\n@@ -597,0 +595,3 @@\n+        Utils.checkNonNegativeIndex(srcOffset, \"srcOffset\");\n+        Utils.checkNonNegativeIndex(dstOffset, \"dstOffset\");\n+        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n@@ -629,0 +630,3 @@\n+        Utils.checkNonNegativeIndex(srcOffset, \"srcOffset\");\n+        Utils.checkNonNegativeIndex(dstIndex, \"dstIndex\");\n+        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n@@ -655,1 +659,3 @@\n-\n+        Utils.checkNonNegativeIndex(srcIndex, \"srcIndex\");\n+        Utils.checkNonNegativeIndex(dstOffset, \"dstOffset\");\n+        Utils.checkNonNegativeIndex(elementCount, \"elementCount\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -203,5 +203,2 @@\n-        \/\/ size should be >= 0\n-        if (byteSize < 0) {\n-            throw new IllegalArgumentException(\"Invalid allocation size : \" + byteSize);\n-        }\n-\n+        \/\/ byteSize should be >= 0\n+        Utils.checkNonNegativeArgument(byteSize, \"allocation size\");\n@@ -219,0 +216,12 @@\n+    public static void checkNonNegativeArgument(long value, String name) {\n+        if (value < 0) {\n+            throw new IllegalArgumentException(\"The provided \" + name + \" is negative: \" + value);\n+        }\n+    }\n+\n+    public static void checkNonNegativeIndex(long value, String name) {\n+        if (value < 0) {\n+            throw new IndexOutOfBoundsException(\"The provided \" + name + \" is negative: \" + value);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -154,7 +154,2 @@\n-        if (offset < 0) {\n-            throw new IllegalArgumentException(\"Negative offset: \" + offset);\n-        }\n-        if (index < 0) {\n-            throw new IllegalArgumentException(\"Negative index: \" + index);\n-        }\n-\n+        Utils.checkNonNegativeArgument(offset, \"offset\");\n+        Utils.checkNonNegativeArgument(index, \"index\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,7 +33,0 @@\n-    public static long requireNonNegative(long value) {\n-        if (value < 0) {\n-            throw new IllegalArgumentException(\"The provided value was negative: \" + value);\n-        }\n-        return value;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/MemoryLayoutUtil.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -374,1 +374,1 @@\n-        expectedExceptionsMessageRegExp=\".*Negative offset.*\")\n+        expectedExceptionsMessageRegExp=\".*offset is negative.*\")\n@@ -380,1 +380,1 @@\n-        expectedExceptionsMessageRegExp=\".*Negative index.*\")\n+        expectedExceptionsMessageRegExp=\".*index is negative.*\")\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n@@ -192,0 +194,77 @@\n+    \/\/ Invariant checking tests for the SegmentAllocator method:\n+    \/\/ MemorySegment allocateFrom(ValueLayout elementLayout,\n+    \/\/                            MemorySegment source,\n+    \/\/                            ValueLayout sourceElementLayout,\n+    \/\/                            long sourceOffset,\n+    \/\/                            long elementCount) {\n+    @Test\n+    public void testAllocatorAllocateFromArguments() {\n+        try (Arena arena = Arena.ofConfined()) {\n+            var sourceElements = 2;\n+            var source = arena.allocate(ValueLayout.JAVA_LONG, sourceElements);\n+            var elementLayout = ValueLayout.JAVA_INT;\n+            var sourceElementLayout = ValueLayout.JAVA_INT;\n+\n+            \/\/ IllegalArgumentException if {@code elementLayout.byteSize() != sourceElementLayout.byteSize()}\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, ValueLayout.JAVA_BYTE, 0, 1)\n+            );\n+\n+            \/\/ IllegalArgumentException if source segment\/offset\n+            \/\/ are <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a>\n+            \/\/ in the source element layout\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    arena.allocateFrom(elementLayout, source.asSlice(1), sourceElementLayout, 0, 1)\n+            );\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, sourceElementLayout, 1, 1)\n+            );\n+\n+            \/\/ IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    arena.allocateFrom(elementLayout.withByteAlignment(elementLayout.byteAlignment() * 2), source, sourceElementLayout, 1, 1)\n+            );\n+\n+            \/\/ IllegalStateException if the {@linkplain MemorySegment#scope() scope} associated\n+            \/\/ with {@code source} is not {@linkplain MemorySegment.Scope#isAlive() alive}\n+            Arena closedArena = Arena.ofConfined();\n+            closedArena.close();\n+            assertThrows(IllegalStateException.class, () ->\n+                    closedArena.allocateFrom(elementLayout, source, sourceElementLayout, 0, 1)\n+            );\n+\n+            \/\/ WrongThreadException if this method is called from a thread {@code T},\n+            \/\/ such that {@code source.isAccessibleBy(T) == false}\n+            CompletableFuture<Arena> future = CompletableFuture.supplyAsync(Arena::ofConfined);\n+            try {\n+                Arena otherThreadArena = future.get();\n+                assertThrows(WrongThreadException.class, () ->\n+                        otherThreadArena.allocateFrom(elementLayout, source, sourceElementLayout, 0, 1)\n+                );\n+            } catch (ExecutionException | InterruptedException e) {\n+                fail(\"Unable to create arena\", e);\n+            }\n+\n+            \/\/ ArithmeticException if {@code elementCount * sourceElementLayout.byteSize()} overflows\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, sourceElementLayout, 0, Long.MAX_VALUE)\n+            );\n+\n+            \/\/ IndexOutOfBoundsException if {@code sourceOffset > source.byteSize() - (elementCount * sourceElementLayout.byteSize())}\n+            assertThrows(IndexOutOfBoundsException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, sourceElementLayout, source.byteSize() - (1 * sourceElementLayout.byteAlignment()) + elementLayout.byteSize(), 1)\n+            );\n+\n+            \/\/ IndexOutOfBoundsException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}\n+            assertThrows(IndexOutOfBoundsException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, sourceElementLayout, -1, 1)\n+            );\n+            assertThrows(IndexOutOfBoundsException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, sourceElementLayout, 0, -1)\n+            );\n+\n+\n+        }\n+    }\n+\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -148,0 +148,60 @@\n+    @Test\n+    public void testCopy5ArgWithNegativeValues() {\n+        MemorySegment src = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment dst = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, -1, dst, 0, 4)\n+        );\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, 0, dst, -1, 4)\n+        );\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, 0, dst, 0, -1)\n+        );\n+    }\n+\n+    @Test\n+    public void testCopy7ArgWithNegativeValues() {\n+        MemorySegment src = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment dst = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, -1, dst, JAVA_BYTE, 0, 4)\n+        );\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, 0, dst, JAVA_BYTE, -1, 4)\n+        );\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, 0, dst, JAVA_BYTE, 0, -1)\n+        );\n+    }\n+\n+    @Test\n+    public void testCopyFromArrayWithNegativeValues() {\n+        MemorySegment src = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        byte[] dst = new byte[] {1, 2, 3, 4};\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, -1, dst,0, 4)\n+        );\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, 0, dst,-1, 4)\n+        );\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, 0, dst,0, -1)\n+        );\n+    }\n+\n+    @Test\n+    public void testCopyToArrayWithNegativeValues() {\n+        byte[] src = new byte[] {1, 2, 3, 4};\n+        MemorySegment dst = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, -1, dst, JAVA_BYTE, 0, 4)\n+        );\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, 0, dst, JAVA_BYTE, -1, 4)\n+        );\n+        assertThrows(IndexOutOfBoundsException.class, () ->\n+                MemorySegment.copy(src, 0, dst, JAVA_BYTE, 0, -1)\n+        );\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentCopy.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n@@ -58,2 +59,1 @@\n-            Arena session = arena;\n-            var segment = session.allocate(0, 1);\n+            var segment = arena.allocate(0, 1);\n@@ -62,1 +62,1 @@\n-            segment = session.allocate(seq);\n+            segment = arena.allocate(seq);\n@@ -65,1 +65,1 @@\n-            segment = session.allocate(0, 4);\n+            segment = arena.allocate(0, 4);\n@@ -136,2 +136,1 @@\n-            Arena scope1 = arena;\n-            MemorySegment segment = scope1.allocate(100, 1);\n+            MemorySegment segment = arena.allocate(100, 1);\n@@ -194,0 +193,32 @@\n+    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n+    public void testNegativeGetOffset() {\n+        try (var arena = Arena.ofConfined()){\n+            var segment = arena.allocate(JAVA_INT);\n+            segment.get(JAVA_INT, -1);\n+        }\n+    }\n+\n+    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n+    public void testNegativeSetOffset() {\n+        try (var arena = Arena.ofConfined()){\n+            var segment = arena.allocate(JAVA_INT);\n+            segment.set(JAVA_INT, -1, 1);\n+        }\n+    }\n+\n+    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n+    public void testNegativeGetAtOffset() {\n+        try (var arena = Arena.ofConfined()){\n+            var segment = arena.allocate(JAVA_INT);\n+            segment.getAtIndex(JAVA_INT, -1);\n+        }\n+    }\n+\n+    @Test(expectedExceptions = IndexOutOfBoundsException.class)\n+    public void testNegativeSetAtOffset() {\n+        try (var arena = Arena.ofConfined()){\n+            var segment = arena.allocate(JAVA_INT);\n+            segment.setAtIndex(JAVA_INT, -1, 1);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":37,"deletions":6,"binary":false,"changes":43,"status":"modified"}]}