{"files":[{"patch":"@@ -1019,1 +1019,1 @@\n-        MemoryLayoutUtil.requireNonNegative(elementCount);\n+        Utils.checkNonNegative(elementCount, \"elementCount\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.internal.foreign.Utils;\n@@ -1498,1 +1499,1 @@\n-     * @throws IndexOutOfBoundsException if either {@code srcOffset},\n+     * @throws IllegalArgumentException if either {@code srcOffset},\n@@ -1564,1 +1565,1 @@\n-     * @throws IndexOutOfBoundsException if either {@code srcOffset}, {@code dstOffset} or {@code elementCount} are {@code < 0}\n+     * @throws IllegalArgumentException if either {@code srcOffset}, {@code dstOffset} or {@code elementCount} are {@code < 0}\n@@ -2424,1 +2425,1 @@\n-     * @throws IndexOutOfBoundsException if either {@code srcOffset}, {@code dstIndex} or {@code elementCount} are {@code < 0}\n+     * @throws IllegalArgumentException if either {@code srcOffset}, {@code dstIndex} or {@code elementCount} are {@code < 0}\n@@ -2475,1 +2476,1 @@\n-     * @throws IndexOutOfBoundsException if either {@code srcIndex}, {@code dstOffset} or {@code elementCount} are {@code < 0}\n+     * @throws IllegalArgumentException if either {@code srcIndex}, {@code dstOffset} or {@code elementCount} are {@code < 0}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -395,1 +395,1 @@\n-     * @throws IndexOutOfBoundsException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}\n+     * @throws IllegalArgumentException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}\n@@ -736,0 +736,6 @@\n+        long byteSize;\n+        try {\n+            byteSize = Math.multiplyExact(layout.byteSize(), size);\n+        } catch (ArithmeticException _) {\n+            throw new IndexOutOfBoundsException(\"Overflow for size=\" + size + \" and layout=\" + layout);\n+        }\n@@ -737,1 +743,1 @@\n-                arenaImpl.allocateNoInit(layout.byteSize() * size, layout.byteAlignment()) :\n+                arenaImpl.allocateNoInit(byteSize, layout.byteAlignment()) :\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -156,3 +156,1 @@\n-        if (newSize < 0) {\n-            throw new IllegalArgumentException(\"newSize < 0\");\n-        }\n+        Utils.checkNonNegative(newSize, \"newSize\");\n@@ -597,0 +595,3 @@\n+        Utils.checkNonNegative(srcOffset, \"srcOffset\");\n+        Utils.checkNonNegative(dstOffset, \"dstOffset\");\n+        Utils.checkNonNegative(elementCount, \"elementCount\");\n@@ -629,0 +630,3 @@\n+        Utils.checkNonNegative(srcOffset, \"srcOffset\");\n+        Utils.checkNonNegative(dstIndex, \"dstIndex\");\n+        Utils.checkNonNegative(elementCount, \"elementCount\");\n@@ -655,1 +659,3 @@\n-\n+        Utils.checkNonNegative(srcIndex, \"srcIndex\");\n+        Utils.checkNonNegative(dstOffset, \"dstOffset\");\n+        Utils.checkNonNegative(elementCount, \"elementCount\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -203,5 +203,2 @@\n-        \/\/ size should be >= 0\n-        if (byteSize < 0) {\n-            throw new IllegalArgumentException(\"Invalid allocation size : \" + byteSize);\n-        }\n-\n+        \/\/ byteSize should be >= 0\n+        Utils.checkNonNegative(byteSize, \"allocation size\");\n@@ -219,0 +216,6 @@\n+    public static void checkNonNegative(long value, String name) {\n+        if (value < 0) {\n+            throw new IllegalArgumentException(\"The provided \" + name + \" is negative: \" + value);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -154,0 +154,2 @@\n+        Utils.checkNonNegative(offset, \"offset\");\n+        Utils.checkNonNegative(index, \"index\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,7 +33,0 @@\n-    public static long requireNonNegative(long value) {\n-        if (value < 0) {\n-            throw new IllegalArgumentException(\"The provided value was negative: \" + value);\n-        }\n-        return value;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/MemoryLayoutUtil.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n@@ -192,0 +194,77 @@\n+    \/\/ Invariant checking tests for the SegmentAllocator method:\n+    \/\/ MemorySegment allocateFrom(ValueLayout elementLayout,\n+    \/\/                            MemorySegment source,\n+    \/\/                            ValueLayout sourceElementLayout,\n+    \/\/                            long sourceOffset,\n+    \/\/                            long elementCount) {\n+    @Test\n+    public void testAllocatorAllocateFromArguments() {\n+        try (Arena arena = Arena.ofConfined()) {\n+            var sourceElements = 2;\n+            var source = arena.allocate(ValueLayout.JAVA_LONG, sourceElements);\n+            var elementLayout = ValueLayout.JAVA_INT;\n+            var sourceElementLayout = ValueLayout.JAVA_INT;\n+\n+            \/\/ IllegalArgumentException if {@code elementLayout.byteSize() != sourceElementLayout.byteSize()}\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, ValueLayout.JAVA_BYTE, 0, 1)\n+            );\n+\n+            \/\/ IllegalArgumentException if source segment\/offset\n+            \/\/ are <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraint<\/a>\n+            \/\/ in the source element layout\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    arena.allocateFrom(elementLayout, source.asSlice(1), sourceElementLayout, 0, 1)\n+            );\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, sourceElementLayout, 1, 1)\n+            );\n+\n+            \/\/ IllegalArgumentException if {@code elementLayout.byteAlignment() > elementLayout.byteSize()}\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    arena.allocateFrom(elementLayout.withByteAlignment(elementLayout.byteAlignment() * 2), source, sourceElementLayout, 1, 1)\n+            );\n+\n+            \/\/ IllegalStateException if the {@linkplain MemorySegment#scope() scope} associated\n+            \/\/ with {@code source} is not {@linkplain MemorySegment.Scope#isAlive() alive}\n+            Arena closedArena = Arena.ofConfined();\n+            closedArena.close();\n+            assertThrows(IllegalStateException.class, () ->\n+                    closedArena.allocateFrom(elementLayout, source, sourceElementLayout, 0, 1)\n+            );\n+\n+            \/\/ WrongThreadException if this method is called from a thread {@code T},\n+            \/\/ such that {@code source.isAccessibleBy(T) == false}\n+            CompletableFuture<Arena> future = CompletableFuture.supplyAsync(Arena::ofConfined);\n+            try {\n+                Arena otherThreadArena = future.get();\n+                assertThrows(WrongThreadException.class, () ->\n+                        otherThreadArena.allocateFrom(elementLayout, source, sourceElementLayout, 0, 1)\n+                );\n+            } catch (ExecutionException | InterruptedException e) {\n+                fail(\"Unable to create arena\", e);\n+            }\n+\n+            \/\/ IndexOutOfBoundsException if {@code elementCount * sourceElementLayout.byteSize()} overflows\n+            assertThrows(IndexOutOfBoundsException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, sourceElementLayout, 0, Long.MAX_VALUE)\n+            );\n+\n+            \/\/ IndexOutOfBoundsException if {@code sourceOffset > source.byteSize() - (elementCount * sourceElementLayout.byteSize())}\n+            assertThrows(IndexOutOfBoundsException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, sourceElementLayout, source.byteSize() - (1 * sourceElementLayout.byteAlignment()) + elementLayout.byteSize(), 1)\n+            );\n+\n+            \/\/ IllegalArgumentException if either {@code sourceOffset} or {@code elementCount} are {@code < 0}\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, sourceElementLayout, -1, 1)\n+            );\n+            assertThrows(IllegalArgumentException.class, () ->\n+                    arena.allocateFrom(elementLayout, source, sourceElementLayout, 0, -1)\n+            );\n+\n+\n+        }\n+    }\n+\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -148,0 +148,60 @@\n+    @Test\n+    public void testCopy5ArgWithNegativeValues() {\n+        MemorySegment src = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment dst = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, -1, dst, 0, 4)\n+        );\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, 0, dst, -1, 4)\n+        );\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, 0, dst, 0, -1)\n+        );\n+    }\n+\n+    @Test\n+    public void testCopy7ArgWithNegativeValues() {\n+        MemorySegment src = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment dst = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, -1, dst, JAVA_BYTE, 0, 4)\n+        );\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, 0, dst, JAVA_BYTE, -1, 4)\n+        );\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, 0, dst, JAVA_BYTE, 0, -1)\n+        );\n+    }\n+\n+    @Test\n+    public void testCopyFromArrayWithNegativeValues() {\n+        MemorySegment src = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        byte[] dst = new byte[] {1, 2, 3, 4};\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, -1, dst,0, 4)\n+        );\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, 0, dst,-1, 4)\n+        );\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, JAVA_BYTE, 0, dst,0, -1)\n+        );\n+    }\n+\n+    @Test\n+    public void testCopyToArrayWithNegativeValues() {\n+        byte[] src = new byte[] {1, 2, 3, 4};\n+        MemorySegment dst = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, -1, dst, JAVA_BYTE, 0, 4)\n+        );\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, 0, dst, JAVA_BYTE, -1, 4)\n+        );\n+        assertThrows(IllegalArgumentException.class, () ->\n+                MemorySegment.copy(src, 0, dst, JAVA_BYTE, 0, -1)\n+        );\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentCopy.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"}]}