{"files":[{"patch":"@@ -1147,0 +1147,2 @@\n+        \/\/ Process annotations if processing is not disabled and there\n+        \/\/ is at least one Processor available.\n@@ -1152,5 +1154,1 @@\n-\n-            \/\/ Process annotations if processing is requested and there\n-            \/\/ is at least one Processor available.\n-            processAnnotations = procEnvImpl.atLeastOneProcessor() &&\n-                explicitAnnotationProcessingRequested();\n+            processAnnotations = procEnvImpl.atLeastOneProcessor();\n@@ -1159,0 +1157,5 @@\n+                if (!explicitAnnotationProcessingRequested() &&\n+                    !optionsCheckingInitiallyDisabled) {\n+                    log.note(Notes.ImplicitAnnotationProcessing);\n+                }\n+\n@@ -1167,0 +1170,2 @@\n+            } else { \/\/ free resources\n+                procEnvImpl.close();\n@@ -1168,2 +1173,0 @@\n-        } else { \/\/ free resources\n-            procEnvImpl.close();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2015, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,2 @@\n-        OPT_NONE(\"-implicit:none\"),     \/\/ implicit compilation with -implicit:none\n-        OPT_CLASS(\"-implicit:class\");   \/\/ implicit compilation with -implicit:class\n+        OPT_NONE(\"-implicit:none\"),     \/\/ implicit compilation wiith -implicit:none\n+        OPT_CLASS(\"-implicit:class\");   \/\/ implicit compilation wiith -implicit:class\n@@ -70,0 +70,1 @@\n+        SERVICE,        \/\/ implicit annotation processing, via ServiceLoader\n@@ -101,4 +102,1 @@\n-        opts.addAll(Arrays.asList(\"-d\", \".\",\n-                                  \"-sourcepath\", testSrc,\n-                                  \"-classpath\", testClasses,\n-                                  \"-proc:full\"));\n+        opts.addAll(Arrays.asList(\"-d\", \".\", \"-sourcepath\", testSrc, \"-classpath\", testClasses, \"-Xlint:-options\"));\n@@ -109,0 +107,3 @@\n+        case SERVICE:\n+            createProcessorServices(Anno.class.getName());\n+            break;\n@@ -147,0 +148,3 @@\n+                case SERVICE:\n+                    expectKey = \"compiler.warn.proc.use.proc.or.implicit\";\n+                    break;\n","filename":"test\/langtools\/tools\/javac\/6341866\/T6341866.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -220,4 +220,0 @@\n-\n-# Pending removal\n-compiler.note.implicit.annotation.processing\n-compiler.warn.proc.use.proc.or.implicit\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+\/\/ key: compiler.warn.proc.use.proc.or.implicit\n+\/\/ key: compiler.note.implicit.annotation.processing\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProcUseProcOrImplicit\/ProcUseProcOrImplicit.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n- * @bug 8310061 8315534 8306819\n- * @summary Verify behavior around implicit annotation processing\n+ * @bug 8310061 8315534\n+ * @summary Verify a note is issued for implicit annotation processing\n@@ -62,1 +62,1 @@\n- * Does not generates a note and the processor does not run:\n+ * Generates note and the processor runs:\n@@ -65,1 +65,1 @@\n- * Does _not_ generate a note and the processor does run:\n+ * Does _not_ generate a note and the processor runs:\n@@ -70,2 +70,0 @@\n- *\n- * Does _not_ generate a note and the processor does _not_run:\n@@ -77,6 +75,0 @@\n- *\n- * (Previously, annotation processing was implicitly enabled and the\n- * the class path was searched for processors. This test was\n- * originally written to probe around a note warning of a potential\n- * future policy change to disable such implicit processing, a policy\n- * change now implemented and this test has been updated accordingly.)\n@@ -176,2 +168,2 @@\n-        checkForProcessorMessage(javacResult, false);\n-        checkForCompilerNote(javacResult, false);\n+        checkForProcessorMessage(javacResult, true);\n+        checkForCompilerNote(javacResult, true);\n@@ -250,1 +242,1 @@\n-        checkForProcessorMessage(javacResult, false);\n+        checkForProcessorMessage(javacResult, true);\n@@ -265,1 +257,1 @@\n-        checkForProcessorMessage(javacResult, false);\n+        checkForProcessorMessage(javacResult, true);\n@@ -328,1 +320,1 @@\n-                verifyMessages(out, compilerOut, false, false);\n+                verifyMessages(out, compilerOut, true);\n@@ -340,1 +332,1 @@\n-                verifyMessages(out, compilerOut, false, true);\n+                verifyMessages(out, compilerOut, false);\n@@ -350,1 +342,1 @@\n-                verifyMessages(out, compilerOut, false, false);\n+                verifyMessages(out, compilerOut, true);\n@@ -364,1 +356,1 @@\n-                verifyMessages(out, compilerOut, false, true);\n+                verifyMessages(out, compilerOut, false);\n@@ -371,8 +363,3 @@\n-    private void verifyMessages(ByteArrayOutputStream out, StringWriter compilerOut, boolean expectedNotePresent,\n-                                boolean processorRunExpected) {\n-        boolean processorRun = out.toString(StandardCharsets.UTF_8).contains(\"ImplicitProcTestProc run\");\n-\n-        if (processorRun != processorRunExpected) {\n-            throw new RuntimeException(processorRunExpected ?\n-                                       \"Expected processor message not printed\" :\n-                                       \"Unexpected processor message printed\");\n+    private void verifyMessages(ByteArrayOutputStream out, StringWriter compilerOut, boolean expectedNotePresent) {\n+        if (!out.toString(StandardCharsets.UTF_8).contains(\"ImplicitProcTestProc run\")) {\n+            throw new RuntimeException(\"Expected processor message not printed\");\n","filename":"test\/langtools\/tools\/javac\/processing\/options\/TestNoteOnImplicitProcessing.java","additions":15,"deletions":28,"binary":false,"changes":43,"status":"modified"}]}