{"files":[{"patch":"@@ -52,0 +52,1 @@\n+import java.awt.Window;\n@@ -236,1 +237,4 @@\n-        ColorModel model = getColorModel(Transparency.OPAQUE);\n+        int transparency = Transparency.OPAQUE;\n+        if (target instanceof Window window && !window.isOpaque())\n+            transparency = Transparency.TRANSLUCENT;\n+        ColorModel model = getColorModel(transparency);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.awt.Window;\n@@ -255,1 +256,4 @@\n-        ColorModel model = getColorModel(Transparency.OPAQUE);\n+        int transparency = Transparency.OPAQUE;\n+        if (target instanceof Window window && !window.isOpaque())\n+            transparency = Transparency.TRANSLUCENT;\n+        ColorModel model = getColorModel(transparency);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/opengl\/CGLGraphicsConfig.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,17 +28,1 @@\n-import java.awt.AWTEvent;\n-import java.awt.AWTException;\n-import java.awt.BufferCapabilities;\n-import java.awt.Color;\n-import java.awt.Component;\n-import java.awt.Container;\n-import java.awt.Cursor;\n-import java.awt.Dimension;\n-import java.awt.Font;\n-import java.awt.FontMetrics;\n-import java.awt.Graphics;\n-import java.awt.GraphicsConfiguration;\n-import java.awt.Image;\n-import java.awt.Point;\n-import java.awt.Rectangle;\n-import java.awt.Toolkit;\n-import java.awt.Window;\n+import java.awt.*;\n@@ -55,0 +39,2 @@\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BaseMultiResolutionImage;\n@@ -74,0 +60,1 @@\n+import sun.awt.image.OffScreenImage;\n@@ -987,1 +974,19 @@\n-        return getLWGC().createAcceleratedImage(getTarget(), width, height);\n+        GraphicsConfiguration gc = getGraphicsConfiguration();\n+        AffineTransform at = gc.getDefaultTransform();\n+        double ScaleX = at.getScaleX();\n+        double ScaleY = at.getScaleY();\n+        int scaledWidth = Math.round((float)ScaleX  * width);\n+        int scaledHeight = Math.round((float)ScaleY * height);\n+\n+        Image img = getLWGC().createAcceleratedImage(getTarget(), scaledWidth, scaledHeight);\n+        if(ScaleX == 1 || ScaleY == 1)\n+            return img;\n+        return new BaseMultiResolutionImage(img.getScaledInstance(width, height, Image.SCALE_DEFAULT), img) {\n+            @Override\n+            public Graphics getGraphics() {\n+                Graphics graphics = img.getGraphics();\n+                if (graphics instanceof Graphics2D)\n+                    ((Graphics2D) graphics).scale(ScaleX, ScaleY);\n+                return graphics;\n+                }\n+        };\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWComponentPeer.java","additions":23,"deletions":18,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.awt.*;\n+import javax.swing.*;\n+import javax.swing.border.EmptyBorder;\n+\n+\/* @test\n+   @bug 8303904\n+   @requires (os.family == \"mac\")\n+   @summary Images appear pixelated at resolutions higher than 100%\n+            when volatile image buffering is disabled.\n+   @library \/java\/awt\/regtesthelpers\n+   @build PassFailJFrame\n+   @run main\/manual PixelatedImageTest\n+ *\/\n+public class PixelatedImageTest {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+                Verify that the rendered image is not pixelated.\n+                1) Run the test at a resolution higher than 100%.\n+                2) Check that the displayed text is not pixelated.\n+                If the text is not pixelated, press PASS; otherwise, press FAIL.\n+                \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        System.setProperty(\"swing.volatileImageBufferEnabled\", \"false\");\n+        PassFailJFrame.builder()\n+                .title(\"Pixelated image Test\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((5))\n+                .columns(35)\n+                .testUI(PixelatedImageTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static JDialog createTestUI() {\n+        JTextPane textPane = new JTextPane();\n+        textPane.setText(\"This text should appear clear, without any pixelation.\");\n+        textPane.setEditable(false);\n+        textPane.setOpaque(false);\n+        textPane.setBorder(new EmptyBorder(10,10,10,10));\n+\n+        JDialog dialog = new JDialog();\n+        dialog.setUndecorated(true);\n+        dialog.setLocationRelativeTo(null);\n+\n+        JPanel panel = new JPanel() {\n+            @Override\n+            public void paintComponent(Graphics g) {\n+                super.paintComponent(g);\n+                Graphics2D g2 = (Graphics2D) g;\n+                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n+                g2.setColor(new Color(220, 180, 0, 200));\n+                g2.fillRect(5, 5, getWidth(), getHeight());\n+            }\n+        };\n+        panel.setOpaque(false);\n+        panel.setBorder(new EmptyBorder(10,10,10,10));\n+        panel.setLayout(new BorderLayout());\n+        panel.add(textPane, BorderLayout.NORTH);\n+\n+        dialog.getContentPane().add(panel);\n+        dialog.setBackground(new Color(0,0,0,0));\n+        dialog.pack();\n+        return dialog;\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/swing\/JWindow\/NonVolatileTransparentWindows\/PixelatedImageTest.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8303904\n+   @requires (os.family == \"mac\")\n+   @summary when \"swing.volatileImageBufferEnabled\" is \"false\" translucent windows repaint as opaque\n+   @run main TransparentWindowTest\n+*\/\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+public class TransparentWindowTest extends JWindow {\n+\n+    public static void main(String[] args) throws Exception {\n+        System.setProperty(\"swing.volatileImageBufferEnabled\", \"false\");\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+\n+        SwingUtilities.invokeLater(() -> {\n+            TransparentWindowTest t = new TransparentWindowTest();\n+            t.setVisible(true);\n+        });\n+\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+    }\n+\n+    public TransparentWindowTest() {\n+        JPanel p = new JPanel() {\n+            @Override\n+            public void paintComponent(Graphics g) {\n+                super.paintComponent(g);\n+                Graphics2D g2 = (Graphics2D) g;\n+                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n+                g2.setColor(new Color(220, 180, 0, 200));\n+                g2.fillRect(5, 5, getWidth(), getHeight());\n+            }\n+        };\n+        p.setOpaque(false);\n+        p.setLayout(new BorderLayout());\n+        getContentPane().add(p);\n+        setBackground(new Color(0, 0, 0, 0));\n+        setSize(400, 400);\n+        setLocationRelativeTo(null);\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowOpened(WindowEvent e) {\n+                testWindowProperties();\n+            }\n+        });\n+    }\n+\n+    private void testWindowProperties() {\n+        BufferedImage bufferedImage = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);\n+        testTransparency(bufferedImage);\n+        testBlackBorder(bufferedImage);\n+        System.out.println(\"Test PASSED!\");\n+    }\n+\n+    private void testTransparency(BufferedImage img) {\n+        if (img.getTransparency() != Transparency.TRANSLUCENT) {\n+            throw new RuntimeException(\"Test FAILED! The window should be translucent.\");\n+        }\n+    }\n+\n+    private void testBlackBorder(BufferedImage img) {\n+        final int blackRGB = Color.BLACK.getRGB();\n+\n+        if (img.getRGB(0, 0) == blackRGB ||\n+                img.getRGB(img.getWidth() - 1, 0) == blackRGB ||\n+                img.getRGB(0, img.getHeight() - 1) == blackRGB ||\n+                img.getRGB(img.getWidth() - 1, img.getHeight() - 1) == blackRGB) {\n+            throw new RuntimeException(\"Test FAILED! The window should not have a black border.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JWindow\/NonVolatileTransparentWindows\/TransparentWindowTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}