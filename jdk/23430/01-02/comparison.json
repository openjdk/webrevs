{"files":[{"patch":"@@ -55,1 +55,0 @@\n-import java.awt.image.BaseMultiResolutionImage;\n@@ -242,18 +241,3 @@\n-\n-        float scaleFactor = getDevice().getScaleFactor();\n-        int fullResWidth = Math.round( scaleFactor * width);\n-        int fullResHeight = Math.round( scaleFactor * height);\n-        WritableRaster wr = model.createCompatibleWritableRaster(fullResWidth, fullResHeight);\n-        OffScreenImage fullResImage = new OffScreenImage(target, model, wr,\n-                        model.isAlphaPremultiplied());\n-\n-        if (scaleFactor == 1)\n-            return fullResImage;\n-        return new BaseMultiResolutionImage(fullResImage.getScaledInstance(width, height, Image.SCALE_DEFAULT), fullResImage) {\n-            @Override\n-            public Graphics getGraphics() {\n-                Graphics2D returnValue = fullResImage.createGraphics();\n-                returnValue.scale(scaleFactor, scaleFactor);\n-                return returnValue;\n-            }\n-        };\n+        WritableRaster wr = model.createCompatibleWritableRaster(width, height);\n+        return new OffScreenImage(target, model, wr,\n+                model.isAlphaPremultiplied());\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.awt.image.BaseMultiResolutionImage;\n@@ -261,6 +260,2 @@\n-\n-        float scaleFactor = getDevice().getScaleFactor();\n-        int fullResWidth = Math.round( scaleFactor * width);\n-        int fullResHeight = Math.round( scaleFactor * height);\n-        WritableRaster wr = model.createCompatibleWritableRaster(fullResWidth, fullResHeight);\n-        OffScreenImage fullResImage = new OffScreenImage(target, model, wr,\n+        WritableRaster wr = model.createCompatibleWritableRaster(width, height);\n+        return new OffScreenImage(target, model, wr,\n@@ -268,11 +263,0 @@\n-\n-        if (scaleFactor == 1)\n-            return fullResImage;\n-        return new BaseMultiResolutionImage(fullResImage.getScaledInstance(width, height, Image.SCALE_DEFAULT), fullResImage) {\n-            @Override\n-            public Graphics getGraphics() {\n-                Graphics2D returnValue = fullResImage.createGraphics();\n-                returnValue.scale(scaleFactor, scaleFactor);\n-                return returnValue;\n-            }\n-        };\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/opengl\/CGLGraphicsConfig.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,17 +28,1 @@\n-import java.awt.AWTEvent;\n-import java.awt.AWTException;\n-import java.awt.BufferCapabilities;\n-import java.awt.Color;\n-import java.awt.Component;\n-import java.awt.Container;\n-import java.awt.Cursor;\n-import java.awt.Dimension;\n-import java.awt.Font;\n-import java.awt.FontMetrics;\n-import java.awt.Graphics;\n-import java.awt.GraphicsConfiguration;\n-import java.awt.Image;\n-import java.awt.Point;\n-import java.awt.Rectangle;\n-import java.awt.Toolkit;\n-import java.awt.Window;\n+import java.awt.*;\n@@ -55,0 +39,2 @@\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BaseMultiResolutionImage;\n@@ -74,0 +60,1 @@\n+import sun.awt.image.OffScreenImage;\n@@ -987,1 +974,19 @@\n-        return getLWGC().createAcceleratedImage(getTarget(), width, height);\n+        GraphicsConfiguration gc = getGraphicsConfiguration();\n+        AffineTransform at = gc.getDefaultTransform();\n+        double ScaleX = at.getScaleX();\n+        double ScaleY = at.getScaleY();\n+        int scaledWidth = Math.round((float)ScaleX  * width);\n+        int scaledHeight = Math.round((float)ScaleY * height);\n+\n+        Image img = getLWGC().createAcceleratedImage(getTarget(), scaledWidth, scaledHeight);\n+        if(ScaleX == 1 || ScaleY == 1)\n+            return img;\n+        return new BaseMultiResolutionImage(img.getScaledInstance(width, height, Image.SCALE_DEFAULT), img) {\n+            @Override\n+            public Graphics getGraphics() {\n+                Graphics graphics = img.getGraphics();\n+                if (graphics instanceof Graphics2D)\n+                    ((Graphics2D) graphics).scale(ScaleX, ScaleY);\n+                return graphics;\n+                }\n+        };\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWComponentPeer.java","additions":23,"deletions":18,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -79,8 +79,3 @@\n-        BufferedImage image = (BufferedImage) createImage(getWidth(), getHeight());\n-\n-        if (image == null) {\n-            throw new RuntimeException(\"Test FAILED! Unable to capture the window.\");\n-        }\n-\n-        testTransparency(image);\n-        testBlackBorder(image);\n+        BufferedImage bufferedImage = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);\n+        testTransparency(bufferedImage);\n+        testBlackBorder(bufferedImage);\n@@ -92,1 +87,1 @@\n-            throw new RuntimeException(\"Test FAILED! The windows should be translucent.\");\n+            throw new RuntimeException(\"Test FAILED! The window should be translucent.\");\n","filename":"test\/jdk\/javax\/swing\/JWindow\/NonVolatileTransparentWindows\/TransparentWindowTest.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"}]}