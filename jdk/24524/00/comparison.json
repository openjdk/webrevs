{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.List;\n@@ -32,0 +33,5 @@\n+import jdk.jfr.internal.PlatformEventType;\n+import jdk.jfr.internal.PlatformRecorder;\n+import jdk.jfr.internal.PlatformRecording;\n+import jdk.jfr.internal.PrivateAccess;\n+import jdk.jfr.internal.Type;\n@@ -49,0 +55,109 @@\n+    \/\/ Purpose of InternalAccess is to give classes in jdk.jfr.internal\n+    \/\/ access to package private methods in this package (jdk.jfr).\n+    \/\/\n+    \/\/ The initialization could be done in any class in this package,\n+    \/\/ but this one was chosen because it is lightweight.\n+    static {\n+        PrivateAccess.setPrivateAccess(new InternalAccess());\n+    }\n+\n+    private static final class InternalAccess extends PrivateAccess {\n+\n+        @Override\n+        public Type getType(Object o) {\n+            if (o instanceof AnnotationElement ae) {\n+                return ae.getType();\n+            }\n+            if (o instanceof EventType et) {\n+                return et.getType();\n+            }\n+            if (o instanceof ValueDescriptor vd) {\n+                return vd.getType();\n+            }\n+            if (o instanceof SettingDescriptor sd) {\n+                return sd.getType();\n+            }\n+            throw new Error(\"Unknown type \" + o.getClass());\n+        }\n+\n+        @Override\n+        public Configuration newConfiguration(String name, String label, String description, String provider, Map<String, String> settings, String contents) {\n+            return new Configuration(name, label, description, provider, settings, contents);\n+        }\n+\n+        @Override\n+        public EventType newEventType(PlatformEventType platformEventType) {\n+            return new EventType(platformEventType);\n+        }\n+\n+        @Override\n+        public AnnotationElement newAnnotation(Type annotationType, List<Object> values, boolean boot) {\n+            return new AnnotationElement(annotationType, values, boot);\n+        }\n+\n+        @Override\n+        public ValueDescriptor newValueDescriptor(String name, Type fieldType, List<AnnotationElement> annos, int dimension, boolean constantPool, String fieldName) {\n+            return new ValueDescriptor(fieldType, name, annos, dimension, constantPool, fieldName);\n+        }\n+\n+        @Override\n+        public PlatformRecording getPlatformRecording(Recording r) {\n+            return r.getInternal();\n+        }\n+\n+        @Override\n+        public PlatformEventType getPlatformEventType(EventType eventType) {\n+            return eventType.getPlatformEventType();\n+        }\n+\n+        @Override\n+        public boolean isConstantPool(ValueDescriptor v) {\n+            return v.isConstantPool();\n+        }\n+\n+        @Override\n+        public void setAnnotations(ValueDescriptor v, List<AnnotationElement> a) {\n+            v.setAnnotations(a);\n+        }\n+\n+        @Override\n+        public void setAnnotations(SettingDescriptor s, List<AnnotationElement> a) {\n+           s.setAnnotations(a);\n+        }\n+\n+        @Override\n+        public String getFieldName(ValueDescriptor v) {\n+            return v.getJavaFieldName();\n+        }\n+\n+        @Override\n+        public ValueDescriptor newValueDescriptor(Class<?> type, String name) {\n+            return new ValueDescriptor(type, name, List.of(), true);\n+        }\n+\n+        @Override\n+        public SettingDescriptor newSettingDescriptor(Type type, String name, String defaultValue, List<AnnotationElement> annotations) {\n+            return new SettingDescriptor(type, name, defaultValue, annotations);\n+        }\n+\n+        @Override\n+        public boolean isUnsigned(ValueDescriptor v) {\n+            return v.isUnsigned();\n+        }\n+\n+        @Override\n+        public PlatformRecorder getPlatformRecorder() {\n+            return FlightRecorder.getFlightRecorder().getInternal();\n+        }\n+\n+        @Override\n+        public EventSettings newEventSettings(EventSettingsModifier esm) {\n+            return new EventSettings.DelegatedEventSettings(esm);\n+        }\n+\n+        @Override\n+        public boolean isVisible(EventType t) {\n+            return t.isVisible();\n+        }\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventSettings.java","additions":116,"deletions":1,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.util.List;\n-import java.util.Map;\n@@ -32,7 +30,0 @@\n-import jdk.jfr.internal.PlatformEventType;\n-import jdk.jfr.internal.PlatformRecorder;\n-import jdk.jfr.internal.PlatformRecording;\n-import jdk.jfr.internal.PrivateAccess;\n-import jdk.jfr.internal.Type;\n-import jdk.jfr.internal.management.EventSettingsModifier;\n-\n@@ -42,1 +33,1 @@\n- * @apiNote\n+ * @deprecated\n@@ -56,0 +47,1 @@\n+@Deprecated(since=\"25\", forRemoval=true)\n@@ -57,111 +49,0 @@\n-\n-    \/\/ Purpose of InternalAccess is to give classes in jdk.jfr.internal\n-    \/\/ access to package private methods in this package (jdk.jfr).\n-    \/\/\n-    \/\/ The initialization could be done in any class in this package,\n-    \/\/ but this one was chosen because it is light weight and\n-    \/\/ lacks dependencies on other public classes.\n-    static {\n-        PrivateAccess.setPrivateAccess(new InternalAccess());\n-    }\n-\n-    private static final class InternalAccess extends PrivateAccess {\n-\n-        @Override\n-        public Type getType(Object o) {\n-            if (o instanceof AnnotationElement ae) {\n-                return ae.getType();\n-            }\n-            if (o instanceof EventType et) {\n-                return et.getType();\n-            }\n-            if (o instanceof ValueDescriptor vd) {\n-                return vd.getType();\n-            }\n-            if (o instanceof SettingDescriptor sd) {\n-                return sd.getType();\n-            }\n-            throw new Error(\"Unknown type \" + o.getClass());\n-        }\n-\n-        @Override\n-        public Configuration newConfiguration(String name, String label, String description, String provider, Map<String, String> settings, String contents) {\n-            return new Configuration(name, label, description, provider, settings, contents);\n-        }\n-\n-        @Override\n-        public EventType newEventType(PlatformEventType platformEventType) {\n-            return new EventType(platformEventType);\n-        }\n-\n-        @Override\n-        public AnnotationElement newAnnotation(Type annotationType, List<Object> values, boolean boot) {\n-            return new AnnotationElement(annotationType, values, boot);\n-        }\n-\n-        @Override\n-        public ValueDescriptor newValueDescriptor(String name, Type fieldType, List<AnnotationElement> annos, int dimension, boolean constantPool, String fieldName) {\n-            return new ValueDescriptor(fieldType, name, annos, dimension, constantPool, fieldName);\n-        }\n-\n-        @Override\n-        public PlatformRecording getPlatformRecording(Recording r) {\n-            return r.getInternal();\n-        }\n-\n-        @Override\n-        public PlatformEventType getPlatformEventType(EventType eventType) {\n-            return eventType.getPlatformEventType();\n-        }\n-\n-        @Override\n-        public boolean isConstantPool(ValueDescriptor v) {\n-            return v.isConstantPool();\n-        }\n-\n-        @Override\n-        public void setAnnotations(ValueDescriptor v, List<AnnotationElement> a) {\n-            v.setAnnotations(a);\n-        }\n-\n-        @Override\n-        public void setAnnotations(SettingDescriptor s, List<AnnotationElement> a) {\n-           s.setAnnotations(a);\n-        }\n-\n-        @Override\n-        public String getFieldName(ValueDescriptor v) {\n-            return v.getJavaFieldName();\n-        }\n-\n-        @Override\n-        public ValueDescriptor newValueDescriptor(Class<?> type, String name) {\n-            return new ValueDescriptor(type, name, List.of(), true);\n-        }\n-\n-        @Override\n-        public SettingDescriptor newSettingDescriptor(Type type, String name, String defaultValue, List<AnnotationElement> annotations) {\n-            return new SettingDescriptor(type, name, defaultValue, annotations);\n-        }\n-\n-        @Override\n-        public boolean isUnsigned(ValueDescriptor v) {\n-            return v.isUnsigned();\n-        }\n-\n-        @Override\n-        public PlatformRecorder getPlatformRecorder() {\n-            return FlightRecorder.getFlightRecorder().getInternal();\n-        }\n-\n-        @Override\n-        public EventSettings newEventSettings(EventSettingsModifier esm) {\n-            return new EventSettings.DelegatedEventSettings(esm);\n-        }\n-\n-        @Override\n-        public boolean isVisible(EventType t) {\n-            return t.isVisible();\n-        }\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/FlightRecorderPermission.java","additions":2,"deletions":121,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-            \/\/ FlightRecorderPermission.<clinit>\n+            \/\/ EventSettings.<clinit>\n@@ -61,1 +61,1 @@\n-            new FlightRecorderPermission(\"accessFlightRecorder\");\n+            SecuritySupport.ensureClassIsInitialized(EventSettings.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PrivateAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}