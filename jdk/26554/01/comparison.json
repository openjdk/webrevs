{"files":[{"patch":"@@ -80,1 +80,11 @@\n-        for (int i = 0; i < n; i++) acc += i;\n+        int[] arr1 = new int[n];\n+        int[] arr2 = new int[n];\n+        int[] arr3 = new int[n];\n+        int[] arr4 = new int[n];\n+        for (int i = 0; i < n; i++) {\n+            acc += i;\n+            arr1[i] = i;\n+            arr2[i] = acc;\n+            arr3[i] = i * n;\n+            arr4[i] = acc * n;\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestStress.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/* Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\/\n+\n+package compiler.debug;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n+import java.util.Set;\n+import java.util.HashSet;\n+import java.util.Arrays;\n+\n+\/*\n+ * @test\n+ * @key stress randomness\n+ * @requires vm.debug == true & vm.compiler2.enabled & vm.flagless\n+ * @summary Tests that stress compilations with the N different seeds yield different\n+ *          IGVN, CCP, macro elimination, and macro expansion traces.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.debug.TestStressDistinctSeed\n+ *\/\n+\n+public class TestStressDistinctSeed {\n+\n+    private static int counter = 0;\n+\n+    static String phaseTrace(String stressOption, String traceOption,\n+            int stressSeed) throws Exception {\n+        String className = TestStressDistinctSeed.class.getName();\n+        String[] procArgs = {\n+                \"-Xcomp\", \"-XX:-TieredCompilation\", \"-XX:-Inline\", \"-XX:+CICountNative\",\n+                \"-XX:CompileOnly=\" + className + \"::sum\", \"-XX:\" + traceOption,\n+                \"-XX:+\" + stressOption, \"-XX:StressSeed=\" + stressSeed,\n+                className, \"5\" };\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(procArgs);\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        out.shouldHaveExitValue(0);\n+        return out.getStdout();\n+    }\n+\n+    static String igvnTrace(int stressSeed) throws Exception {\n+        return phaseTrace(\"StressIGVN\", \"+TraceIterativeGVN\", stressSeed);\n+    }\n+\n+    static String ccpTrace(int stressSeed) throws Exception {\n+        return phaseTrace(\"StressCCP\", \"+TracePhaseCCP\", stressSeed);\n+    }\n+\n+    static String macroExpansionTrace(int stressSeed) throws Exception {\n+        return phaseTrace(\"StressMacroExpansion\",\n+                \"CompileCommand=PrintIdealPhase,*::*,AFTER_MACRO_EXPANSION_STEP\",\n+                stressSeed);\n+    }\n+\n+    static String macroEliminationTrace(int stressSeed) throws Exception {\n+        return phaseTrace(\"StressMacroElimination\",\n+                \"CompileCommand=PrintIdealPhase,*::*,AFTER_MACRO_ELIMINATION_STEP\",\n+                stressSeed);\n+    }\n+\n+    static void sum(int n) {\n+        int[] arr1 = new int[n];\n+        for (int i = 0; i < n; i++) {\n+            synchronized (TestStressDistinctSeed.class) {\n+                counter += i;\n+                arr1[i] = counter;\n+            }\n+        }\n+        System.out.println(counter);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Set<String> igvnTraceSet = new HashSet<>();\n+        Set<String> ccpTraceSet = new HashSet<>();\n+        Set<String> macroExpansionTraceSet = new HashSet<>();\n+        Set<String> macroEliminationTraceSet = new HashSet<>();\n+        String igvntrace, ccptrace, macroexpansiontrace, macroeliminationtrace;\n+        if (args.length == 0) {\n+            for (int s = 0; s < 5; s++) {\n+                igvntrace = igvnTrace(s);\n+                ccptrace = ccpTrace(s);\n+                macroexpansiontrace = macroExpansionTrace(s);\n+                macroeliminationtrace = macroEliminationTrace(s);\n+                \/\/ Test same seed produce same result to test that different traces come from different seed and\n+                \/\/ not indeterminism with the test.\n+                Asserts.assertEQ(igvntrace, igvnTrace(s),\n+                        \"got different IGVN traces for the same seed\");\n+                Asserts.assertEQ(ccptrace, ccpTrace(s),\n+                        \"got different CCP traces for the same seed\");\n+                Asserts.assertEQ(macroexpansiontrace, macroExpansionTrace(s),\n+                        \"got different macro expansion traces for the same seed\");\n+                Asserts.assertEQ(macroeliminationtrace, macroEliminationTrace(s),\n+                        \"got different macro elimination traces for the same seed\");\n+\n+                igvnTraceSet.add(igvntrace);\n+                ccpTraceSet.add(ccptrace);\n+                macroExpansionTraceSet.add(macroexpansiontrace);\n+                macroEliminationTraceSet.add(macroeliminationtrace);\n+            }\n+            Asserts.assertGT(igvnTraceSet.size(), 1,\n+                    \"got same IGVN traces for 5 different seeds\");\n+            Asserts.assertGT(ccpTraceSet.size(), 1,\n+                    \"got same CCP traces for 5 different seeds\");\n+            Asserts.assertGT(macroExpansionTraceSet.size(), 1,\n+                    \"got same macro expansion traces for 5 different seeds\");\n+            Asserts.assertGT(macroEliminationTraceSet.size(), 1,\n+                    \"got same macro elimination traces for 5 different seeds\");\n+        } else if (args.length > 0) {\n+            sum(Integer.parseInt(args[0]));\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestStressDistinctSeed.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"}]}