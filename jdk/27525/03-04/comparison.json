{"files":[{"patch":"@@ -54,0 +54,23 @@\n+    enum ObjectType { TYPE_ARRAY, OBJ_ARRAY }\n+    enum ReferencePolicy { KEEP, DROP }\n+    enum AllocationTiming { BEFORE_MARK_START, AFTER_MARK_START}\n+\n+    enum ExpectedState {\n+        MARKED_CANDIDATE_RECLAIMED(true, true, true),\n+        MARKED_CANDIDATE_NOT_RECLAIMED(true, true, false),\n+        MARKED_NOTCANDIDATE_NOTRECLAIMED(true, false, false),\n+        NOTMARKED_CANDIDATE_RECLAIMED(false, true, true),\n+        NOTMARKED_CANDIDATE_NOTRECLAIMED(false, true, false),\n+        NOTMARKED_NOTCANDIDATE_NOTRECLAIMED(false, false, false);\n+\n+        final boolean marked;\n+        final boolean candidate;\n+        final boolean reclaimed;\n+\n+        ExpectedState(boolean marked, boolean candidate, boolean reclaimed) {\n+            this.marked = marked;\n+            this.candidate = candidate;\n+            this.reclaimed = reclaimed;\n+        }\n+    }\n+\n@@ -64,1 +87,6 @@\n-    private static String runHelperVM(boolean useTypeArray, boolean keepReference, boolean allocateAfter, String phase) throws Exception {\n+    private static String runHelperVM(ObjectType type, ReferencePolicy refPolicy, AllocationTiming timing, String phase) throws Exception {\n+\n+        boolean useTypeArray = (type == ObjectType.TYPE_ARRAY);\n+        boolean keepReference = (refPolicy == ReferencePolicy.KEEP);\n+        boolean allocateAfter = (timing == AllocationTiming.AFTER_MARK_START);\n+\n@@ -90,3 +118,6 @@\n-    private static void runTest(boolean useTypeArray, boolean keepReference, boolean allocateAfter, String phase,\n-                                boolean expectedMarked, boolean expectedCandidate, boolean expectedReclaim) throws Exception {\n-        String log = runHelperVM(useTypeArray, keepReference, allocateAfter, phase);\n+    private static void runTest(ObjectType type,\n+                                ReferencePolicy refPolicy,\n+                                AllocationTiming timing,\n+                                String phase,\n+                                ExpectedState expected) throws Exception {\n+        String log = runHelperVM(type, refPolicy, timing, phase);\n@@ -110,1 +141,1 @@\n-          Asserts.assertTrue(!allocateAfter, \"Should only have two messages if allocating the object before mark start\");\n+          Asserts.assertTrue(timing == AllocationTiming.BEFORE_MARK_START, \"Should only have two messages if allocating the object before mark start\");\n@@ -117,2 +148,2 @@\n-        Asserts.assertTrue(mr.group(1).equals(boolToInt(expectedMarked)), \"Expected that region was \" + (expectedMarked ? \"\" : \"not \") + \" marked but is \" + mr.group());\n-        Asserts.assertTrue(mr.group(2).equals(boolToInt(expectedCandidate)), \"Expected that region was \" + (expectedMarked ? \"\" : \"not \") + \" candidate but is \" + mr.group());\n+        Asserts.assertTrue(mr.group(1).equals(boolToInt(expected.marked)), \"Expected that region was \" + (expected.marked ? \"\" : \"not \") + \" marked but is \" + mr.group());\n+        Asserts.assertTrue(mr.group(2).equals(boolToInt(expected.candidate)), \"Expected that region was \" + (expected.candidate ? \"\" : \"not \") + \" candidate but is \" + mr.group());\n@@ -120,2 +151,2 @@\n-        pattern = Pattern.compile(\"Reclaimed humongous region .*\");\n-        Asserts.assertTrue(expectedReclaim == pattern.matcher(log).find(), \"Wrong log output reclaiming humongous region\");\n+        boolean reclaimed = Pattern.compile(\"Reclaimed humongous region .*\").matcher(log).find();\n+        Asserts.assertTrue(expected.reclaimed == reclaimed, \"Wrong log output reclaiming humongous region\");\n@@ -125,4 +156,4 @@\n-        System.out.println(\"Tests checking eager reclaim for when the object is allocated before the concurrent mark.\");\n-        runTest(true \/* useTypeArray *\/, false \/* keepReference *\/, false \/* allocateAfter *\/, WB.BEFORE_MARKING_COMPLETED, true \/* expectedMarked *\/, true \/* expectedCandidate *\/, true \/* expectedReclaim *\/);\n-        runTest(true \/* useTypeArray *\/, false \/* keepReference *\/, false \/* allocateAfter *\/, WB.G1_BEFORE_REBUILD_COMPLETED, true \/* expectedMarked *\/, true \/* expectedCandidate *\/, true \/* expectedReclaim *\/);\n-        runTest(true \/* useTypeArray *\/, false \/* keepReference *\/, false \/* allocateAfter *\/, WB.G1_BEFORE_CLEANUP_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, true \/* expectedReclaim *\/);\n+        System.out.println(\"Tests checking eager reclaim for when the object is allocated before mark start.\");\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.DROP, AllocationTiming.BEFORE_MARK_START, WB.BEFORE_MARKING_COMPLETED, ExpectedState.MARKED_CANDIDATE_RECLAIMED);\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.DROP, AllocationTiming.BEFORE_MARK_START, WB.G1_BEFORE_REBUILD_COMPLETED, ExpectedState.MARKED_CANDIDATE_RECLAIMED);\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.DROP, AllocationTiming.BEFORE_MARK_START, WB.G1_BEFORE_CLEANUP_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_RECLAIMED);\n@@ -130,3 +161,3 @@\n-        runTest(true \/* useTypeArray *\/, true \/* keepReference *\/, false \/* allocateAfter *\/, WB.BEFORE_MARKING_COMPLETED, true \/* expectedMarked *\/, true \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n-        runTest(true \/* useTypeArray *\/, true \/* keepReference *\/, false \/* allocateAfter *\/, WB.G1_BEFORE_REBUILD_COMPLETED, true \/* expectedMarked *\/, true \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n-        runTest(true \/* useTypeArray *\/, true \/* keepReference *\/, false \/* allocateAfter *\/, WB.G1_BEFORE_CLEANUP_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.KEEP, AllocationTiming.BEFORE_MARK_START, WB.BEFORE_MARKING_COMPLETED, ExpectedState.MARKED_CANDIDATE_NOT_RECLAIMED);\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.KEEP, AllocationTiming.BEFORE_MARK_START, WB.G1_BEFORE_REBUILD_COMPLETED, ExpectedState.MARKED_CANDIDATE_NOT_RECLAIMED);\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.KEEP, AllocationTiming.BEFORE_MARK_START, WB.G1_BEFORE_CLEANUP_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_NOTRECLAIMED);\n@@ -134,3 +165,3 @@\n-        runTest(false \/* useTypeArray *\/, false \/* keepReference *\/, false \/* allocateAfter *\/, WB.BEFORE_MARKING_COMPLETED, true \/* expectedMarked *\/, false \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n-        runTest(false \/* useTypeArray *\/, false \/* keepReference *\/, false \/* allocateAfter *\/, WB.G1_BEFORE_REBUILD_COMPLETED, true \/* expectedMarked *\/, true \/* expectedCandidate *\/, true \/* expectedReclaim *\/);\n-        runTest(false \/* useTypeArray *\/, false \/* keepReference *\/, false \/* allocateAfter *\/, WB.G1_BEFORE_CLEANUP_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, true \/* expectedReclaim *\/);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.DROP, AllocationTiming.BEFORE_MARK_START, WB.BEFORE_MARKING_COMPLETED, ExpectedState.MARKED_NOTCANDIDATE_NOTRECLAIMED);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.DROP, AllocationTiming.BEFORE_MARK_START, WB.G1_BEFORE_REBUILD_COMPLETED, ExpectedState.MARKED_CANDIDATE_RECLAIMED);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.DROP, AllocationTiming.BEFORE_MARK_START, WB.G1_BEFORE_CLEANUP_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_RECLAIMED);\n@@ -138,3 +169,3 @@\n-        runTest(false \/* useTypeArray *\/, true \/* keepReference *\/, false \/* allocateAfter *\/, WB.BEFORE_MARKING_COMPLETED, true \/* expectedMarked *\/, false \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n-        runTest(false \/* useTypeArray *\/, true \/* keepReference *\/, false \/* allocateAfter *\/, WB.G1_BEFORE_REBUILD_COMPLETED, true \/* expectedMarked *\/, true \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n-        runTest(false \/* useTypeArray *\/, true \/* keepReference *\/, false \/* allocateAfter *\/, WB.G1_BEFORE_CLEANUP_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.KEEP, AllocationTiming.BEFORE_MARK_START, WB.BEFORE_MARKING_COMPLETED, ExpectedState.MARKED_NOTCANDIDATE_NOTRECLAIMED);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.KEEP, AllocationTiming.BEFORE_MARK_START, WB.G1_BEFORE_REBUILD_COMPLETED, ExpectedState.MARKED_CANDIDATE_NOT_RECLAIMED);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.KEEP, AllocationTiming.BEFORE_MARK_START, WB.G1_BEFORE_CLEANUP_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_NOTRECLAIMED);\n@@ -142,1 +173,1 @@\n-        System.out.println(\"Tests checking eager reclaim for when the object is allocated after the given phase.\");\n+        System.out.println(\"Tests checking eager reclaim for when the object is allocated after mark start.\");\n@@ -144,3 +175,3 @@\n-        runTest(true \/* useTypeArray *\/, false \/* keepReference *\/, true \/* allocateAfter *\/, WB.BEFORE_MARKING_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, true \/* expectedReclaim *\/);\n-        runTest(true \/* useTypeArray *\/, false \/* keepReference *\/, true \/* allocateAfter *\/, WB.G1_BEFORE_REBUILD_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, true \/* expectedReclaim *\/);\n-        runTest(true \/* useTypeArray *\/, false \/* keepReference *\/, true \/* allocateAfter *\/, WB.G1_BEFORE_CLEANUP_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, true \/* expectedReclaim *\/);\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.DROP, AllocationTiming.AFTER_MARK_START, WB.BEFORE_MARKING_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_RECLAIMED);\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.DROP, AllocationTiming.AFTER_MARK_START, WB.G1_BEFORE_REBUILD_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_RECLAIMED);\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.DROP, AllocationTiming.AFTER_MARK_START, WB.G1_BEFORE_CLEANUP_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_RECLAIMED);\n@@ -148,3 +179,3 @@\n-        runTest(true \/* useTypeArray *\/, true \/* keepReference *\/, true \/* allocateAfter *\/, WB.BEFORE_MARKING_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n-        runTest(true \/* useTypeArray *\/, true \/* keepReference *\/, true \/* allocateAfter *\/, WB.G1_BEFORE_REBUILD_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n-        runTest(true \/* useTypeArray *\/, true \/* keepReference *\/, true \/* allocateAfter *\/, WB.G1_BEFORE_CLEANUP_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.KEEP, AllocationTiming.AFTER_MARK_START, WB.BEFORE_MARKING_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_NOTRECLAIMED);\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.KEEP, AllocationTiming.AFTER_MARK_START, WB.G1_BEFORE_REBUILD_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_NOTRECLAIMED);\n+        runTest(ObjectType.TYPE_ARRAY, ReferencePolicy.KEEP, AllocationTiming.AFTER_MARK_START, WB.G1_BEFORE_CLEANUP_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_NOTRECLAIMED);\n@@ -152,3 +183,3 @@\n-        runTest(false \/* useTypeArray *\/, false \/* keepReference *\/, true \/* allocateAfter *\/, WB.BEFORE_MARKING_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, true \/* expectedReclaim *\/);\n-        runTest(false \/* useTypeArray *\/, false \/* keepReference *\/, true \/* allocateAfter *\/, WB.G1_BEFORE_REBUILD_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, true \/* expectedReclaim *\/);\n-        runTest(false \/* useTypeArray *\/, false \/* keepReference *\/, true \/* allocateAfter *\/, WB.G1_BEFORE_CLEANUP_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, true \/* expectedReclaim *\/);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.DROP, AllocationTiming.AFTER_MARK_START, WB.BEFORE_MARKING_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_RECLAIMED);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.DROP, AllocationTiming.AFTER_MARK_START, WB.G1_BEFORE_REBUILD_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_RECLAIMED);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.DROP, AllocationTiming.AFTER_MARK_START, WB.G1_BEFORE_CLEANUP_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_RECLAIMED);\n@@ -156,3 +187,3 @@\n-        runTest(false \/* useTypeArray *\/, true \/* keepReference *\/, true \/* allocateAfter *\/, WB.BEFORE_MARKING_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n-        runTest(false \/* useTypeArray *\/, true \/* keepReference *\/, true \/* allocateAfter *\/, WB.G1_BEFORE_REBUILD_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n-        runTest(false \/* useTypeArray *\/, true \/* keepReference *\/, true \/* allocateAfter *\/, WB.G1_BEFORE_CLEANUP_COMPLETED, false \/* expectedMarked *\/, true \/* expectedCandidate *\/, false \/* expectedReclaim *\/);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.KEEP, AllocationTiming.AFTER_MARK_START, WB.BEFORE_MARKING_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_NOTRECLAIMED);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.KEEP, AllocationTiming.AFTER_MARK_START, WB.G1_BEFORE_REBUILD_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_NOTRECLAIMED);\n+        runTest(ObjectType.OBJ_ARRAY, ReferencePolicy.KEEP, AllocationTiming.AFTER_MARK_START, WB.G1_BEFORE_CLEANUP_COMPLETED, ExpectedState.NOTMARKED_CANDIDATE_NOTRECLAIMED);\n@@ -202,1 +233,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegions.java","additions":66,"deletions":36,"binary":false,"changes":102,"status":"modified"}]}