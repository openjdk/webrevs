{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,12 +24,9 @@\n-\/*\n-  @test\n-  @bug 4236095\n-  @summary  Confirm that the you get three pages of output, one\n-            each in portrait, landscape, and reverse landscape\n-            orientations.\n-  @key printer\n-  @run main\/manual Orient\n-*\/\n-\n-\n-\/\/*** global search and replace Orient with name of the test ***\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.geom.Ellipse2D;\n+import java.awt.print.Book;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n@@ -37,4 +34,10 @@\n-\/**\n- * Orient.java\n- *\n- * summary:\n+\/*\n+ * @test\n+ * @bug 4236095\n+ * @summary  Confirm that you get three pages of output, one\n+ *           each in portrait, landscape, and reverse landscape\n+ *           orientations.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @key printer\n+ * @run main\/manual Orient\n@@ -42,9 +45,0 @@\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.geom.*;\n-import java.awt.print.*;\n-\n-\/\/ This test is a \"main\" test as applets would need Runtime permission\n-\/\/ \"queuePrintJob\".\n-\n@@ -52,26 +46,12 @@\n-\n-   private static void init()\n-    {\n-        \/\/*** Create instructions for the user here ***\n-\n-        String[] instructions =\n-        {\n-         \"On-screen inspection is not possible for this printing-specific\",\n-         \"test therefore its only output is three printed pages.\",\n-         \"To be able to run this test it is required to have a default\",\n-         \"printer configured in your user environment.\",\n-         \"\",\n-         \"Visual inspection of the printed page is needed. A passing\",\n-         \"test will print three pages each containing a large oval \",\n-         \"with the text describing the orientation: PORTRAIT, LANDSCAPE\",\n-         \"or REVERSE_LANDSCAPE, inside of it. The first page will \",\n-         \"be emitted in portait orientation, the second page in landscape \",\n-         \"orientation and the third page in reverse-landscape orientation. \",\n-         \"On each page the oval will be wholly within the imageable area \",\n-         \"of the page. In a failing test the oval on the third page \",\n-         \"will be clipped against the imageable area.\",\n-         \"Axes will indicate the direction of increasing X and Y\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n+    private static final String INSTRUCTIONS =\n+            \"This test will automatically initiate a print.\\n\\n\" +\n+            \"A passing test will print three pages each containing a large oval\\n\" +\n+            \"with the text describing the orientation: PORTRAIT, LANDSCAPE\\n\" +\n+            \"or REVERSE_LANDSCAPE, inside of it. The first page will\\n\" +\n+            \"be emitted in portrait orientation, the second page in landscape\\n\" +\n+            \"orientation and the third page in reverse-landscape orientation.\\n\\n\" +\n+            \"On each page the oval will be wholly within the imageable area of the page.\\n\" +\n+            \"Axes will indicate the direction of increasing X and Y\\n\\n\" +\n+            \"Test failed if the oval on the page clipped against the imageable area.\";\n+\n+    private static void init() throws PrinterException {\n@@ -79,1 +59,0 @@\n-\n@@ -81,1 +60,0 @@\n-\n@@ -98,5 +76,0 @@\n-        try {\n-            pjob.print();\n-        } catch (PrinterException e) {\n-            e.printStackTrace();\n-        }\n@@ -104,1 +77,2 @@\n-    }\/\/End  init()\n+        pjob.print();\n+    }\n@@ -106,0 +80,1 @@\n+    @Override\n@@ -107,2 +82,1 @@\n-\n-        Graphics2D g2d = (Graphics2D)g;\n+        Graphics2D g2d = (Graphics2D) g;\n@@ -115,3 +89,6 @@\n-        double iw = pf.getImageableWidth();\n-        double ih = pf.getImageableHeight();\n-\n+        String orientation = switch (pf.getOrientation()) {\n+            case PageFormat.PORTRAIT -> \"PORTRAIT\";\n+            case PageFormat.LANDSCAPE -> \"LANDSCAPE\";\n+            case PageFormat.REVERSE_LANDSCAPE -> \"REVERSE_LANDSCAPE\";\n+            default -> \"INVALID\";\n+        };\n@@ -119,11 +96,0 @@\n-        String orientation;\n-        switch (pf.getOrientation()) {\n-           case PageFormat.PORTRAIT  : orientation = \"PORTRAIT\";\n-                                       break;\n-           case PageFormat.LANDSCAPE : orientation = \"LANDSCAPE\";\n-                                       break;\n-           case PageFormat.REVERSE_LANDSCAPE :\n-                                       orientation = \"REVERSE_LANDSCAPE\";\n-                                       break;\n-           default                   : orientation = \"INVALID\";\n-        }\n@@ -131,217 +97,7 @@\n-        g.draw(new Ellipse2D.Double(0, 0, iw, ih));\n-        g.drawString(\"(0,0)\", 5,15);\n-        g.drawLine(0,0,300,0);\n-        g.drawString(\"X\", 300,15);\n-        g.drawLine(0,0,0,300);\n-        g.drawString(\"Y\",5,300);\n-    }\n-\n-\n-   \/*****************************************************\n-     Standard Test Machinery Section\n-      DO NOT modify anything in this section -- it's a\n-      standard chunk of code which has all of the\n-      synchronisation necessary for the test harness.\n-      By keeping it the same in all tests, it is easier\n-      to read and understand someone else's test, as\n-      well as insuring that all tests behave correctly\n-      with the test harness.\n-     There is a section following this for test-defined\n-      classes\n-   ******************************************************\/\n-   private static boolean theTestPassed = false;\n-   private static boolean testGeneratedInterrupt = false;\n-   private static String failureMessage = \"\";\n-\n-   private static Thread mainThread = null;\n-\n-   private static int sleepTime = 300000;\n-\n-   public static void main( String args[] ) throws InterruptedException\n-    {\n-      mainThread = Thread.currentThread();\n-      try\n-       {\n-         init();\n-       }\n-      catch( TestPassedException e )\n-       {\n-         \/\/The test passed, so just return from main and harness will\n-         \/\/ interepret this return as a pass\n-         return;\n-       }\n-      \/\/At this point, neither test passed nor test failed has been\n-      \/\/ called -- either would have thrown an exception and ended the\n-      \/\/ test, so we know we have multiple threads.\n-\n-      \/\/Test involves other threads, so sleep and wait for them to\n-      \/\/ called pass() or fail()\n-      try\n-       {\n-         Thread.sleep( sleepTime );\n-         \/\/Timed out, so fail the test\n-         throw new RuntimeException( \"Timed out after \" + sleepTime\/1000 + \" seconds\" );\n-       }\n-      catch (InterruptedException e)\n-       {\n-         if( ! testGeneratedInterrupt ) throw e;\n-\n-         \/\/reset flag in case hit this code more than once for some reason (just safety)\n-         testGeneratedInterrupt = false;\n-         if ( theTestPassed == false )\n-          {\n-            throw new RuntimeException( failureMessage );\n-          }\n-       }\n-\n-    }\/\/main\n-\n-   public static synchronized void setTimeoutTo( int seconds )\n-    {\n-      sleepTime = seconds * 1000;\n-    }\n-\n-   public static synchronized void pass()\n-    {\n-      Sysout.println( \"The test passed.\" );\n-      Sysout.println( \"The test is over, hit  Ctl-C to stop Java VM\" );\n-      \/\/first check if this is executing in main thread\n-      if ( mainThread == Thread.currentThread() )\n-       {\n-         \/\/Still in the main thread, so set the flag just for kicks,\n-         \/\/ and throw a test passed exception which will be caught\n-         \/\/ and end the test.\n-         theTestPassed = true;\n-         throw new TestPassedException();\n-       }\n-      \/\/pass was called from a different thread, so set the flag and interrupt\n-      \/\/ the main thead.\n-      theTestPassed = true;\n-      testGeneratedInterrupt = true;\n-      mainThread.interrupt();\n-    }\/\/pass()\n-\n-   public static synchronized void fail()\n-    {\n-      \/\/test writer didn't specify why test failed, so give generic\n-      fail( \"it just plain failed! :-)\" );\n-    }\n-\n-   public static synchronized void fail( String whyFailed )\n-    {\n-      Sysout.println( \"The test failed: \" + whyFailed );\n-      Sysout.println( \"The test is over, hit  Ctl-C to stop Java VM\" );\n-      \/\/check if this called from main thread\n-      if ( mainThread == Thread.currentThread() )\n-       {\n-         \/\/If main thread, fail now 'cause not sleeping\n-         throw new RuntimeException( whyFailed );\n-       }\n-      theTestPassed = false;\n-      testGeneratedInterrupt = true;\n-      failureMessage = whyFailed;\n-      mainThread.interrupt();\n-    }\/\/fail()\n-\n- }\/\/ class Orient\n-\n-\/\/This exception is used to exit from any level of call nesting\n-\/\/ when it's determined that the test has passed, and immediately\n-\/\/ end the test.\n-class TestPassedException extends RuntimeException\n- {\n- }\n-\n-\/\/*********** End Standard Test Machinery Section **********\n-\n-\n-\/\/************ Begin classes defined for the test ****************\n-\n-\/\/ make listeners in a class defined here, and instantiate them in init()\n-\n-\/* Example of a class which may be written as part of a test\n-class NewClass implements anInterface\n- {\n-   static int newVar = 0;\n-\n-   public void eventDispatched(AWTEvent e)\n-    {\n-      \/\/Counting events to see if we get enough\n-      eventCount++;\n-\n-      if( eventCount == 20 )\n-       {\n-         \/\/got enough events, so pass\n-\n-         Orient.pass();\n-       }\n-      else if( tries == 20 )\n-       {\n-         \/\/tried too many times without getting enough events so fail\n-\n-         Orient.fail();\n-       }\n-\n-    }\/\/ eventDispatched()\n-\n- }\/\/ NewClass class\n-\n-*\/\n-\n-\n-\/\/************** End classes defined for the test *******************\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n+        g.draw(new Ellipse2D.Double(0, 0,\n+                pf.getImageableWidth(), pf.getImageableHeight()));\n+        g.drawString(\"(0,0)\", 5, 15);\n+        g.drawLine(0, 0, 300, 0);\n+        g.drawString(\"X\", 300, 15);\n+        g.drawLine(0, 0, 0, 300);\n+        g.drawString(\"Y\", 5, 300);\n@@ -350,94 +106,4 @@\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog implements ActionListener\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-   Panel  buttonP = new Panel();\n-   Button passB = new Button( \"pass\" );\n-   Button failB = new Button( \"fail\" );\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      passB = new Button( \"pass\" );\n-      passB.setActionCommand( \"pass\" );\n-      passB.addActionListener( this );\n-      buttonP.add( \"East\", passB );\n-\n-      failB = new Button( \"fail\" );\n-      failB.setActionCommand( \"fail\" );\n-      failB.addActionListener( this );\n-      buttonP.add( \"West\", failB );\n-\n-      add( \"South\", buttonP );\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n+    public static void main(String args[]) throws Exception {\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new RuntimeException(\"Printer not configured or available.\");\n+        }\n@@ -445,13 +111,7 @@\n-   \/\/catch presses of the passed and failed buttons.\n-   \/\/simply call the standard pass() or fail() static methods of\n-   \/\/Orient\n-   public void actionPerformed( ActionEvent e )\n-    {\n-      if( e.getActionCommand() == \"pass\" )\n-       {\n-         Orient.pass();\n-       }\n-      else\n-       {\n-         Orient.fail();\n-       }\n+        PassFailJFrame passFailJFrame = PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build();\n+        init();\n+        passFailJFrame.awaitAndCheck();\n@@ -459,2 +119,1 @@\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PageFormat\/Orient.java","additions":61,"deletions":402,"binary":false,"changes":463,"status":"modified"}]}