{"files":[{"patch":"@@ -4575,2 +4575,1 @@\n-    method = (method->is_deleted()) ? Universe::throw_no_such_method_error() :\n-                                      method->get_new_method();\n+    method = method->get_new_method();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -646,1 +646,0 @@\n-      assert(!old_method->is_deleted(), \"cannot delete these methods\");\n@@ -660,5 +659,0 @@\n-      if (old_method->is_deleted()) {\n-        \/\/ clean up entries with deleted methods\n-        method_entry->reset_entry();\n-        continue;\n-      }\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3477,1 +3477,0 @@\n-      assert(!old_method->is_deleted(), \"default methods may not be deleted\");\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1025,2 +1025,0 @@\n-    assert(!old_method->is_deleted(), \"vtable methods may not be deleted\");\n-\n@@ -1386,1 +1384,0 @@\n-    assert(!old_method->is_deleted(), \"itable methods may not be deleted\");\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1227,1 +1227,0 @@\n-  assert(!is_deleted(), \"must be\");\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-   status(is_deleted                  , 1 << 4) \/* RedefineClasses() has deleted this method *\/  \\\n+   status(RESERVED                    , 1 << 4) \\\n","filename":"src\/hotspot\/share\/oops\/methodFlags.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,2 +75,0 @@\n-Method**  VM_RedefineClasses::_deleted_methods      = nullptr;\n-Method**  VM_RedefineClasses::_added_methods        = nullptr;\n@@ -78,2 +76,0 @@\n-int       VM_RedefineClasses::_deleted_methods_length  = 0;\n-int       VM_RedefineClasses::_added_methods_length    = 0;\n@@ -929,6 +925,0 @@\n-static bool can_add_or_delete(Method* m) {\n-      \/\/ Compatibility mode\n-  return (AllowRedefinitionToAddDeleteMethods &&\n-          (m->is_private() && (m->is_static() || m->is_final())));\n-}\n-\n@@ -1187,33 +1177,5 @@\n-      \/\/ method added, see if it is OK\n-      if (!can_add_or_delete(k_new_method)) {\n-        log_info(redefine, class, normalize)\n-          (\"redefined class %s methods error: added method: %s [%d]\",\n-           the_class->external_name(), k_new_method->name_and_sig_as_C_string(), ni);\n-        return JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED;\n-      }\n-      {\n-        u2 num = the_class->next_method_idnum();\n-        if (num == ConstMethod::UNSET_IDNUM) {\n-          \/\/ cannot add any more methods\n-          log_info(redefine, class, normalize)\n-            (\"redefined class %s methods error: can't create ID for new method %s [%d]\",\n-             the_class->external_name(), k_new_method->name_and_sig_as_C_string(), ni);\n-          return JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED;\n-        }\n-        u2 new_num = k_new_method->method_idnum();\n-        Method* idnum_owner = scratch_class->method_with_idnum(num);\n-        if (idnum_owner != nullptr) {\n-          \/\/ There is already a method assigned this idnum -- switch them\n-          \/\/ Take current and original idnum from the new_method\n-          idnum_owner->set_method_idnum(new_num);\n-          idnum_owner->set_orig_method_idnum(k_new_method->orig_method_idnum());\n-        }\n-        k_new_method->set_method_idnum(num);\n-        k_new_method->set_orig_method_idnum(num);\n-        if (thread->has_pending_exception()) {\n-          return JVMTI_ERROR_OUT_OF_MEMORY;\n-        }\n-      }\n-      log_trace(redefine, class, normalize)\n-        (\"Method added: new: %s [%d]\", k_new_method->name_and_sig_as_C_string(), ni);\n-      ++ni; \/\/ advance to next new method\n+      \/\/ method added, report the error\n+      log_info(redefine, class, normalize)\n+        (\"redefined class %s methods error: added method: %s [%d]\",\n+         the_class->external_name(), k_new_method->name_and_sig_as_C_string(), ni);\n+      return JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED;\n@@ -1222,10 +1184,5 @@\n-      \/\/ method deleted, see if it is OK\n-      if (!can_add_or_delete(k_old_method)) {\n-        log_info(redefine, class, normalize)\n-          (\"redefined class %s methods error: deleted method %s [%d]\",\n-           the_class->external_name(), k_old_method->name_and_sig_as_C_string(), oi);\n-        return JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED;\n-      }\n-      log_trace(redefine, class, normalize)\n-        (\"Method deleted: old: %s [%d]\", k_old_method->name_and_sig_as_C_string(), oi);\n-      ++oi; \/\/ advance to next old method\n+      \/\/ method deleted, report the error\n+      log_info(redefine, class, normalize)\n+        (\"redefined class %s methods error: deleted method %s [%d]\",\n+         the_class->external_name(), k_old_method->name_and_sig_as_C_string(), oi);\n+      return JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED;\n@@ -3921,20 +3878,0 @@\n-  for (int i = 0; i < _deleted_methods_length; ++i) {\n-    Method* old_method = _deleted_methods[i];\n-\n-    assert(!old_method->has_vtable_index(),\n-           \"cannot delete methods with vtable entries\");;\n-\n-    \/\/ Mark all deleted methods as old, obsolete and deleted\n-    old_method->set_is_deleted();\n-    old_method->set_is_old();\n-    old_method->set_is_obsolete();\n-    ++obsolete_count;\n-    \/\/ With tracing we try not to \"yack\" too much. The position of\n-    \/\/ this trace assumes there are fewer obsolete methods than\n-    \/\/ EMCP methods.\n-    if (log_is_enabled(Trace, redefine, class, obsolete, mark)) {\n-      ResourceMark rm;\n-      log_trace(redefine, class, obsolete, mark)\n-        (\"mark deleted %s(%s) as obsolete\", old_method->name()->as_C_string(), old_method->signature()->as_C_string());\n-    }\n-  }\n@@ -4054,1 +3991,1 @@\n-  \/\/ Attempt to transfer any of the old or deleted methods that are native\n+  \/\/ Attempt to transfer any of the old methods that are native\n@@ -4076,1 +4013,0 @@\n-  transfer.transfer_registrations(_deleted_methods, _deleted_methods_length);\n@@ -4117,1 +4053,1 @@\n-void VM_RedefineClasses::compute_added_deleted_matching_methods() {\n+void VM_RedefineClasses::compute_matching_methods() {\n@@ -4123,2 +4059,0 @@\n-  _added_methods        = NEW_RESOURCE_ARRAY(Method*, _new_methods->length());\n-  _deleted_methods      = NEW_RESOURCE_ARRAY(Method*, _old_methods->length());\n@@ -4127,2 +4061,0 @@\n-  _deleted_methods_length  = 0;\n-  _added_methods_length    = 0;\n@@ -4138,3 +4070,1 @@\n-      new_method = _new_methods->at(nj);\n-      _added_methods[_added_methods_length++] = new_method;\n-      ++nj;\n+      assert(false, \"unexpected added method at the end\");\n@@ -4143,3 +4073,1 @@\n-      old_method = _old_methods->at(oj);\n-      _deleted_methods[_deleted_methods_length++] = old_method;\n-      ++oj;\n+      assert(false, \"unexpected deleted method at the end\");\n@@ -4158,2 +4086,1 @@\n-          _deleted_methods[_deleted_methods_length++] = old_method;\n-          ++oj;\n+          assert(false, \"unexpected deleted overloaded method\");\n@@ -4164,2 +4091,1 @@\n-          _added_methods[_added_methods_length++] = new_method;\n-          ++nj;\n+          assert(false, \"unexpected added method\");\n@@ -4168,2 +4094,1 @@\n-          _deleted_methods[_deleted_methods_length++] = old_method;\n-          ++oj;\n+          assert(false, \"unexpected deleted method\");\n@@ -4174,2 +4099,2 @@\n-  assert(_matching_methods_length + _deleted_methods_length == _old_methods->length(), \"sanity\");\n-  assert(_matching_methods_length + _added_methods_length == _new_methods->length(), \"sanity\");\n+  assert(_matching_methods_length == _old_methods->length(), \"sanity\");\n+  assert(_matching_methods_length == _new_methods->length(), \"sanity\");\n@@ -4221,1 +4146,1 @@\n-  compute_added_deleted_matching_methods();\n+  compute_matching_methods();\n@@ -4576,20 +4501,0 @@\n-  log_trace(redefine, class, dump)(\"_deleted_methods --\");\n-  for (j = 0; j < _deleted_methods_length; ++j) {\n-    LogStreamHandle(Trace, redefine, class, dump) log_stream;\n-    Method* m = _deleted_methods[j];\n-    log_stream.print(\"%4d  (%5d)  \", j, m->vtable_index());\n-    m->access_flags().print_on(&log_stream);\n-    log_stream.print(\" --  \");\n-    m->print_name(&log_stream);\n-    log_stream.cr();\n-  }\n-  log_trace(redefine, class, dump)(\"_added_methods --\");\n-  for (j = 0; j < _added_methods_length; ++j) {\n-    LogStreamHandle(Trace, redefine, class, dump) log_stream;\n-    Method* m = _added_methods[j];\n-    log_stream.print(\"%4d  (%5d)  \", j, m->vtable_index());\n-    m->access_flags().print_on(&log_stream);\n-    log_stream.print(\" --  \");\n-    m->print_name(&log_stream);\n-    log_stream.cr();\n-  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":20,"deletions":115,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -340,2 +340,0 @@\n-  static Method**        _deleted_methods;\n-  static Method**        _added_methods;\n@@ -343,2 +341,0 @@\n-  static int             _deleted_methods_length;\n-  static int             _added_methods_length;\n@@ -406,3 +402,2 @@\n-  \/\/ Figure out which new methods match old methods in name and signature,\n-  \/\/ which methods have been added, and which are no longer present\n-  void compute_added_deleted_matching_methods();\n+  \/\/ Figure out which new methods match old methods in name and signature.\n+  void compute_matching_methods();\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -361,3 +361,1 @@\n-      Method* new_method = (old_method->is_deleted()) ?\n-                            Universe::throw_no_such_method_error() :\n-                            old_method->get_new_method();\n+      Method* new_method = old_method->get_new_method();\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -525,1 +525,0 @@\n-  { \"AllowRedefinitionToAddDeleteMethods\", JDK_Version::jdk(13), JDK_Version::undefined(), JDK_Version::undefined() },\n@@ -535,0 +534,1 @@\n+  { \"AllowRedefinitionToAddDeleteMethods\", JDK_Version::jdk(13), JDK_Version::jdk(26), JDK_Version::jdk(27) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -876,4 +876,0 @@\n-  product(bool, AllowRedefinitionToAddDeleteMethods, false,                 \\\n-          \"(Deprecated) Allow redefinition to add and delete private \"      \\\n-          \"static or final methods for compatibility with old releases\")    \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,3 +59,0 @@\n-            \/\/ deprecated non-alias flags:\n-            {\"AllowRedefinitionToAddDeleteMethods\", \"true\"},\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMDeprecatedOptions.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8193524\n- * @summary Redefine a class' public static method that contains a lambda expression\n- * @requires vm.jvmti\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- * @modules java.compiler\n- *          java.instrument\n- *          jdk.jartool\/sun.tools.jar\n- * @run main RedefineClassHelper\n- * @run main\/othervm -javaagent:redefineagent.jar -XX:+AllowRedefinitionToAddDeleteMethods -Xlog:redefine+class*=trace RedefineAddLambdaExpression\n- *\/\n-\n-interface MathOperation {\n-    public int operation(int a, int b);\n-}\n-\n-class B {\n-    public static int operate(int a, int b, MathOperation mathOperation) {\n-        return mathOperation.operation(a, b);\n-    }\n-    static int test_math(String p) {\n-        MathOperation addition = (int a, int b) -> a + b;\n-        return operate(10, 5, addition);\n-    }\n-}\n-\n-public class RedefineAddLambdaExpression {\n-\n-    public static String newB = \"\"\"\n-        class B {\n-            public static int operate(int a, int b, MathOperation mathOperation) {\n-                return mathOperation.operation(a, b);\n-            }\n-            static int test_math(String p) {\n-                MathOperation addition = (int a, int b) -> a + b;\n-                System.out.println(p + \" from class B's test_math method\");\n-                MathOperation subtraction = (int a, int b) -> a - b;\n-                return operate(10, 5, subtraction);\n-            }\n-        }\n-        \"\"\";\n-\n-    public static void main(String[] args) throws Exception {\n-        int res = B.test_math(\"Hello\");\n-        System.out.println(\"Result = \" + res);\n-        if (res != 15) {\n-            throw new Error(\"test_math returned \" + res + \" expected \" + 15);\n-        }\n-        RedefineClassHelper.redefineClass(B.class, newB);\n-\n-        res = B.test_math(\"Hello\");\n-        if (res != 5)\n-            throw new Error(\"test_math returned \" + res + \" expected \" + 5);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineAddLambdaExpression.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8193524\n- * @summary Redefine a class' public static method that contains a lambda expression\n- * @requires vm.jvmti\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- * @modules java.compiler\n- *          java.instrument\n- *          jdk.jartool\/sun.tools.jar\n- * @run main RedefineClassHelper\n- * @run main\/othervm -javaagent:redefineagent.jar -XX:+AllowRedefinitionToAddDeleteMethods -Xlog:redefine+class*=trace RedefineSubtractLambdaExpression\n- *\/\n-\n-interface MathOperation {\n-    public int operation(int a, int b);\n-}\n-\n-class B {\n-    public static int operate(int a, int b, MathOperation mathOperation) {\n-        return mathOperation.operation(a, b);\n-    }\n-    static int test_math(String p) {\n-        System.out.println(p + \" from class B's test_math method\");\n-        MathOperation subtraction = (int a, int b) -> a - b;\n-        MathOperation addition = (int a, int b) -> a + b;\n-        return operate(10, 5, addition);\n-    }\n-}\n-\n-public class RedefineSubtractLambdaExpression {\n-\n-    public static String newB = \"\"\"\n-        class B {\n-            public static int operate(int a, int b, MathOperation mathOperation) {\n-                return mathOperation.operation(a, b);\n-            }\n-            static int test_math(String p) {\n-                MathOperation subtraction = (int a, int b) -> a - b;\n-                return operate(10, 5, subtraction);\n-            }\n-        }\n-        \"\"\";\n-\n-    public static void main(String[] args) throws Exception {\n-        int res = B.test_math(\"Hello\");\n-        System.out.println(\"Result = \" + res);\n-        if (res != 15) {\n-            throw new Error(\"test_math returned \" + res + \" expected \" + 15);\n-        }\n-        RedefineClassHelper.redefineClass(B.class, newB);\n-\n-        res = B.test_math(\"Hello\");\n-        if (res != 5)\n-            throw new Error(\"test_math returned \" + res + \" expected \" + 5);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineSubtractLambdaExpression.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -1,208 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8192936\n- * @summary RI does not follow the JVMTI RedefineClasses spec; need to disallow adding and deleting methods\n- * @requires vm.jvmti\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- * @modules java.compiler\n- *          java.instrument\n- *          jdk.jartool\/sun.tools.jar\n- * @run main RedefineClassHelper\n- * @run main\/othervm -javaagent:redefineagent.jar TestAddDeleteMethods AllowAddDelete=no\n- * @run main\/othervm -javaagent:redefineagent.jar -XX:+AllowRedefinitionToAddDeleteMethods TestAddDeleteMethods AllowAddDelete=yes\n- *\/\n-\n-import static jdk.test.lib.Asserts.assertEquals;\n-import java.lang.Runnable;\n-\n-\/\/ package access top-level class to avoid problem with RedefineClassHelper\n-\/\/ and nested types.\n-class A implements Runnable {\n-    private        void foo()       { System.out.println(\" OLD foo called\"); }\n-    public         void publicFoo() { System.out.println(\" OLD publicFoo called\"); }\n-    private final  void finalFoo()  { System.out.println(\" OLD finalFoo called\");  }\n-    private static void staticFoo() { System.out.println(\" OLD staticFoo called\"); }\n-    public         void run()       { foo(); publicFoo(); finalFoo(); staticFoo(); }\n-}\n-\n-class B implements Runnable {\n-    public         void run() { }\n-}\n-\n-public class TestAddDeleteMethods {\n-    static private boolean allowAddDeleteMethods = false;\n-\n-    static private A a;\n-    static private B b;\n-\n-    \/\/ This redefinition is expected to always succeed.\n-    public static String newA =\n-        \"class A implements Runnable {\" +\n-            \"private        void foo()       { System.out.println(\\\" NEW foo called\\\"); }\" +\n-            \"public         void publicFoo() { System.out.println(\\\" NEW publicFoo called\\\"); }\" +\n-            \"private final  void finalFoo()  { System.out.println(\\\" NEW finalFoo called\\\");  }\" +\n-            \"private static void staticFoo() { System.out.println(\\\" NEW staticFoo called\\\"); }\" +\n-            \"public         void run()       { foo(); publicFoo(); finalFoo(); staticFoo(); }\" +\n-        \"}\";\n-\n-    \/\/ This redefinition is expected to always fail.\n-    public static String ADeleteFoo =\n-        \"class A implements Runnable {\" +\n-            \"public         void publicFoo() { System.out.println(\\\" NEW publicFoo called\\\"); }\" +\n-            \"private final  void finalFoo()  { System.out.println(\\\" NEW finalFoo called\\\");  }\" +\n-            \"private static void staticFoo() { System.out.println(\\\" NEW staticFoo called\\\"); }\" +\n-            \"public         void run()       { publicFoo(); finalFoo(); staticFoo(); }\" +\n-        \"}\";\n-\n-    \/\/ This redefinition is expected to always fail.\n-    public static String ADeletePublicFoo =\n-        \"class A implements Runnable {\" +\n-            \"private        void foo()       { System.out.println(\\\" NEW foo called\\\"); }\" +\n-            \"private final  void finalFoo()  { System.out.println(\\\" NEW finalFoo called\\\");  }\" +\n-            \"private static void staticFoo() { System.out.println(\\\" NEW staticFoo called\\\"); }\" +\n-            \"public         void run()       { foo(); finalFoo(); staticFoo(); }\" +\n-        \"}\";\n-\n-    \/\/ This redefinition is expected to succeed with option -XX:+AllowRedefinitionToAddDeleteMethods.\n-    public static String ADeleteFinalFoo =\n-        \"class A implements Runnable {\" +\n-            \"private        void foo()       { System.out.println(\\\" NEW foo called\\\"); }\" +\n-            \"public         void publicFoo() { System.out.println(\\\" NEW publicFoo called\\\"); }\" +\n-            \"private static void staticFoo() { System.out.println(\\\" NEW staticFoo called\\\"); }\" +\n-            \"public         void run()       { foo(); publicFoo(); staticFoo(); }\" +\n-        \"}\";\n-\n-    \/\/ This redefinition is expected to succeed with option -XX:+AllowRedefinitionToAddDeleteMethods.\n-    \/\/ With compatibility option redefinition ADeleteFinalFoo already deleted finalFoo method.\n-    \/\/ So, this redefinition will add it back which is expected to work.\n-    public static String ADeleteStaticFoo =\n-        \"class A implements Runnable {\" +\n-            \"private        void foo()       { System.out.println(\\\" NEW foo called\\\"); }\" +\n-            \"public         void publicFoo() { System.out.println(\\\" NEW publicFoo called\\\"); }\" +\n-            \"private final  void finalFoo()  { System.out.println(\\\" NEW finalFoo called\\\");  }\" +\n-            \"public         void run()       { foo(); publicFoo(); finalFoo(); }\" +\n-        \"}\";\n-\n-    \/\/ This redefinition is expected to always fail.\n-    public static String BAddBar =\n-        \"class B implements Runnable {\" +\n-            \"private        void bar()       { System.out.println(\\\" bar called\\\"); }\" +\n-            \"public         void run()       { bar(); }\" +\n-        \"}\";\n-\n-    \/\/ This redefinition is expected to always fail.\n-    public static String BAddPublicBar =\n-        \"class B implements Runnable {\" +\n-            \"public         void publicBar() { System.out.println(\\\" publicBar called\\\"); }\" +\n-            \"public         void run()       { publicBar(); }\" +\n-        \"}\";\n-\n-    \/\/ This redefinition is expected to succeed with option -XX:+AllowRedefinitionToAddDeleteMethods.\n-    public static String BAddFinalBar =\n-        \"class B implements Runnable {\" +\n-            \"private final  void finalBar()  { System.out.println(\\\" finalBar called\\\"); }\" +\n-            \"public         void run()       { finalBar(); }\" +\n-        \"}\";\n-\n-    \/\/ This redefinition is expected to succeed with option -XX:+AllowRedefinitionToAddDeleteMethods.\n-    \/\/ With compatibility option redefinition BAddFinalBar added finalBar method.\n-    \/\/ So, this redefinition will deleate it back which is expected to work.\n-    public static String BAddStaticBar =\n-        \"class B implements Runnable {\" +\n-            \"private static void staticBar() { System.out.println(\\\" staticBar called\\\"); }\" +\n-            \"public         void run()       { staticBar(); }\" +\n-        \"}\";\n-\n-    static private final String ExpMsgPrefix = \"attempted to \";\n-    static private final String ExpMsgPostfix = \" a method\";\n-\n-    static private void log(String msg) { System.out.println(msg); }\n-\n-    public static void test(Runnable obj, String newBytes, String expSuffix, String methodName,\n-                            boolean expectedRedefToPass) throws Exception {\n-        String expectedMessage = ExpMsgPrefix + expSuffix + ExpMsgPostfix;\n-        Class klass = obj.getClass();\n-        String className = klass.getName();\n-        String expResult = expectedRedefToPass ? \"PASS\" : \"FAIL\";\n-\n-        log(\"\");\n-        log(\"## Test \" + expSuffix + \" method \\'\" + methodName + \"\\' in class \" + className +\n-            \"; redefinition expected to \" + expResult);\n-\n-        try {\n-            RedefineClassHelper.redefineClass(klass, newBytes);\n-\n-            if (expectedRedefToPass) {\n-                log(\" Did not get UOE at redefinition as expected\");\n-            } else {\n-                throw new RuntimeException(\"Failed, expected UOE\");\n-            }\n-            obj.run();\n-            log(\"\");\n-        } catch (UnsupportedOperationException uoe) {\n-            String message = uoe.getMessage();\n-\n-            if (expectedRedefToPass) {\n-                throw new RuntimeException(\"Failed, unexpected UOE: \" + message);\n-            } else {\n-                log(\" Got expected UOE: \" + message);\n-                if (!message.endsWith(expectedMessage)) {\n-                    throw new RuntimeException(\"Expected UOE error message to end with: \" + expectedMessage);\n-                }\n-            }\n-        }\n-    }\n-\n-    static {\n-        a = new A();\n-        b = new B();\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length > 0 && args[0].equals(\"AllowAddDelete=yes\")) {\n-            allowAddDeleteMethods = true;\n-        }\n-\n-        log(\"## Test original class A\");\n-        a.run();\n-        log(\"\");\n-\n-        log(\"## Test with modified method bodies in class A; redefinition expected to pass: true\");\n-        RedefineClassHelper.redefineClass(A.class, newA);\n-        a.run();\n-\n-        test(a, ADeleteFoo,       \"delete\", \"foo\",       false);\n-        test(a, ADeletePublicFoo, \"delete\", \"publicFoo\", false);\n-        test(a, ADeleteFinalFoo,  \"delete\", \"finalFoo\",  allowAddDeleteMethods);\n-        test(a, ADeleteStaticFoo, \"delete\", \"staticFoo\", allowAddDeleteMethods);\n-\n-        test(b, BAddBar,          \"add\", \"bar\",       false);\n-        test(b, BAddPublicBar,    \"add\", \"publicBar\", false);\n-        test(b, BAddFinalBar,     \"add\", \"finalBar\",  allowAddDeleteMethods);\n-        test(b, BAddStaticBar,    \"add\", \"staticBar\", allowAddDeleteMethods);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/TestAddDeleteMethods.java","additions":0,"deletions":208,"binary":false,"changes":208,"status":"deleted"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8149743\n- * @summary crash when adding a breakpoint after redefining to add a private static method\n- * @comment converted from test\/jdk\/com\/sun\/jdi\/RedefineAddPrivateMethod.sh\n- *\n- * @library \/test\/lib\n- * @compile -g RedefineAddPrivateMethod.java\n- * @run main\/othervm RedefineAddPrivateMethod\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import lib.jdb.JdbCommand;\n-import lib.jdb.JdbTest;\n-\n-class RedefineAddPrivateMethodTarg {\n-    static public void main(String[] args) {\n-        System.out.println(\"@1 breakpoint\");\n-        System.out.println(\"@2 breakpoint\");\n-    }\n-\n-    \/\/ @1 uncomment private static void test() {}\n-}\n-\n-public class RedefineAddPrivateMethod extends JdbTest {\n-    static private final String ALLOW_ADD_DELETE_OPTION = \"-XX:+AllowRedefinitionToAddDeleteMethods\";\n-\n-    public static void main(String argv[]) {\n-        RedefineAddPrivateMethod test = new RedefineAddPrivateMethod();\n-        test.launchOptions.addVMOptions(ALLOW_ADD_DELETE_OPTION);\n-        test.run();\n-    }\n-\n-    private RedefineAddPrivateMethod() {\n-        super(DEBUGGEE_CLASS, SOURCE_FILE);\n-    }\n-\n-    private static final String DEBUGGEE_CLASS = RedefineAddPrivateMethodTarg.class.getName();\n-    private static final String SOURCE_FILE = \"RedefineAddPrivateMethod.java\";\n-\n-    @Override\n-    protected void runCases() {\n-        setBreakpoints(1);\n-        jdb.command(JdbCommand.run());\n-\n-        redefineClass(1, \"-g\");\n-        \/\/ ensure \"test()\" method has been added successfully\n-        execCommand(JdbCommand.eval(DEBUGGEE_CLASS + \".test()\"))\n-                .shouldNotContain(\"ParseException\");\n-\n-        setBreakpoints(2);\n-        jdb.command(JdbCommand.run());\n-\n-        jdb.quit();\n-\n-        new OutputAnalyzer(getDebuggeeOutput())\n-                .shouldNotContain(\"Internal exception:\");\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/jdi\/RedefineAddPrivateMethod.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8181171\n- * @summary Break ResolvedMethodTable with redefined nest class.\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- * @modules java.compiler\n- *          java.instrument\n- * @compile ..\/..\/NamedBuffer.java\n- * @compile redef\/Xost.java\n- * @run main RedefineClassHelper\n- * @run main\/othervm -XX:+AllowRedefinitionToAddDeleteMethods -javaagent:redefineagent.jar -Xlog:redefine+class+update*=debug,membername+table=debug MethodHandleDeletedMethod\n- *\/\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.lang.invoke.*;\n-\n-class Host {\n-    static MethodHandle fooMH;\n-\n-    static class A {\n-        private static void foo() { System.out.println(\"OLD foo called\"); }\n-    }\n-    static void bar() throws NoSuchMethodError {\n-        A.foo();\n-    }\n-    static void barMH() throws Throwable {\n-        fooMH.invokeExact();\n-    }\n-\n-    public static void reresolve() throws Throwable {\n-        fooMH = MethodHandles.lookup().findStatic(A.class, \"foo\", MethodType.methodType(void.class));\n-    }\n-\n-    static {\n-        try {\n-          fooMH = MethodHandles.lookup().findStatic(A.class, \"foo\", MethodType.methodType(void.class));\n-        } catch (ReflectiveOperationException ex) {\n-        }\n-    }\n-}\n-\n-public class MethodHandleDeletedMethod {\n-\n-    static final String DEST = System.getProperty(\"test.classes\");\n-    static final boolean VERBOSE = false;\n-\n-    private static byte[] bytesForHostClass(char replace) throws Throwable {\n-        return NamedBuffer.bytesForHostClass(replace, \"Host$A\");\n-    }\n-\n-    public static void main(java.lang.String[] unused) throws Throwable {\n-        Host h = new Host();\n-        h.bar();\n-        h.barMH();\n-        byte[] buf = bytesForHostClass('X');\n-        RedefineClassHelper.redefineClass(Host.A.class, buf);\n-        try {\n-            h.bar();    \/\/ call deleted Method directly\n-            throw new RuntimeException(\"Failed, expected NSME\");\n-        } catch (NoSuchMethodError nsme) {\n-            System.out.println(\"Received expected NSME\");\n-        }\n-        try {\n-            h.barMH();  \/\/ call through MethodHandle for deleted Method\n-            throw new RuntimeException(\"Failed, expected NSME\");\n-        } catch (NoSuchMethodError nsme) {\n-            System.out.println(\"Received expected NSME\");\n-        }\n-        System.out.println(\"Passed.\");\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineAddDeleteMethod\/DeleteMethodHandle\/MethodHandleDeletedMethod.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-#\n-# Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 6667089\n-# @summary Reflexive invocation of newly added methods broken.\n-# @author Daniel D. Daugherty\n-#\n-# @run shell MakeJAR3.sh RedefineMethodAddInvokeAgent 'Can-Redefine-Classes: true'\n-# @run build RedefineMethodAddInvokeApp\n-# @run shell RedefineMethodAddInvoke.sh\n-#\n-\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"${COMPILEJAVA}\" = \"\" ]\n-then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo \"COMPILEJAVA=${COMPILEJAVA}\"\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-JAVAC=\"${COMPILEJAVA}\"\/bin\/javac\n-JAVA=\"${TESTJAVA}\"\/bin\/java\n-\n-cp \"${TESTSRC}\"\/RedefineMethodAddInvokeTarget_1.java \\\n-    RedefineMethodAddInvokeTarget.java\n-\"${JAVAC}\" ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d . RedefineMethodAddInvokeTarget.java\n-mv RedefineMethodAddInvokeTarget.java RedefineMethodAddInvokeTarget_1.java\n-mv RedefineMethodAddInvokeTarget.class RedefineMethodAddInvokeTarget_1.class\n-\n-cp \"${TESTSRC}\"\/RedefineMethodAddInvokeTarget_2.java \\\n-    RedefineMethodAddInvokeTarget.java\n-\"${JAVAC}\" ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d . RedefineMethodAddInvokeTarget.java\n-mv RedefineMethodAddInvokeTarget.java RedefineMethodAddInvokeTarget_2.java\n-mv RedefineMethodAddInvokeTarget.class RedefineMethodAddInvokeTarget_2.class\n-\n-\"${JAVA}\" ${TESTVMOPTS} ${TESTJAVAOPTS} -javaagent:RedefineMethodAddInvokeAgent.jar \\\n-    -XX:+AllowRedefinitionToAddDeleteMethods \\\n-    -classpath \"${TESTCLASSES}\" RedefineMethodAddInvokeApp > output.log 2>&1\n-cat output.log\n-\n-MESG=\"Exception\"\n-grep \"$MESG\" output.log\n-result=$?\n-if [ \"$result\" = 0 ]; then\n-    echo \"FAIL: found '$MESG' in the test output\"\n-    result=1\n-else\n-    echo \"PASS: did NOT find '$MESG' in the test output\"\n-    result=0\n-fi\n-\n-exit $result\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodAddInvoke.sh","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.instrument.Instrumentation;\n-\n-public class RedefineMethodAddInvokeAgent {\n-    private static Instrumentation instrumentation;\n-\n-    private RedefineMethodAddInvokeAgent() {\n-    }\n-\n-    public static void premain(String agentArgs, Instrumentation inst) {\n-        System.out.println(\"Hello from RedefineMethodAddInvokeAgent!\");\n-        System.out.println(\"isRedefineClassesSupported()=\" +\n-            inst.isRedefineClassesSupported());\n-\n-        instrumentation = inst;\n-    }\n-\n-    public static Instrumentation getInstrumentation() {\n-        return instrumentation;\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodAddInvokeAgent.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.*;\n-import java.lang.instrument.*;\n-\n-public class RedefineMethodAddInvokeApp {\n-    public static void main(String args[]) throws Exception {\n-        System.out.println(\"Hello from RedefineMethodAddInvokeApp!\");\n-\n-        new RedefineMethodAddInvokeApp().doTest();\n-\n-        System.exit(0);\n-    }\n-\n-    private void doTest() throws Exception {\n-        RedefineMethodAddInvokeTarget target =\n-            new RedefineMethodAddInvokeTarget();\n-\n-        System.out.println(\"RedefineMethodAddInvokeApp: invoking myMethod()\");\n-        target.test(0);  \/\/ invoke the original myMethod()\n-\n-        \/\/ add myMethod1()\n-        do_redefine(1);\n-\n-        System.out.println(\"RedefineMethodAddInvokeApp: invoking myMethod1()\");\n-        target.test(1);  \/\/ invoke myMethod1()\n-\n-        \/\/ add myMethod2()\n-        do_redefine(2);\n-\n-        System.out.println(\"RedefineMethodAddInvokeApp: invoking myMethod2()\");\n-        target.test(2);  \/\/ invoke myMethod2()\n-    }\n-\n-    private static void do_redefine(int counter) throws Exception {\n-        File f = new File(\"RedefineMethodAddInvokeTarget_\" + counter +\n-            \".class\");\n-        System.out.println(\"Reading test class from \" + f);\n-        InputStream redefineStream = new FileInputStream(f);\n-\n-        byte[] redefineBuffer = NamedBuffer.loadBufferFromStream(redefineStream);\n-\n-        ClassDefinition redefineParamBlock = new ClassDefinition(\n-            RedefineMethodAddInvokeTarget.class, redefineBuffer);\n-\n-        RedefineMethodAddInvokeAgent.getInstrumentation().redefineClasses(\n-            new ClassDefinition[] {redefineParamBlock});\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodAddInvokeApp.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.reflect.Method;\n-\n-public class RedefineMethodAddInvokeTarget {\n-    public void test(int counter) throws Exception {\n-        Method method = getClass().getDeclaredMethod(\"myMethod\" +\n-            (counter == 0 ? \"\" : counter));\n-        method.setAccessible(true);\n-        method.invoke(this);\n-    }\n-\n-    public void myMethod() {\n-        System.out.println(\"Hello from the original myMethod()!\");\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodAddInvokeTarget.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.reflect.Method;\n-\n-public class RedefineMethodAddInvokeTarget {\n-    public void test(int counter) throws Exception {\n-        Method method = getClass().getDeclaredMethod(\"myMethod\" +\n-            (counter == 0 ? \"\" : counter));\n-        method.setAccessible(true);\n-        method.invoke(this);\n-    }\n-\n-    public void myMethod() {\n-        System.out.println(\"Hello from the non-EMCP myMethod()!\");\n-    }\n-\n-    private final void myMethod1() {\n-        System.out.println(\"Hello from myMethod1()!\");\n-        System.out.println(\"Calling myMethod() from myMethod1():\");\n-        myMethod();\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodAddInvokeTarget_1.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2008, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.reflect.Method;\n-\n-public class RedefineMethodAddInvokeTarget {\n-    public void test(int counter) throws Exception {\n-        Method method = getClass().getDeclaredMethod(\"myMethod\" +\n-            (counter == 0 ? \"\" : counter));\n-        method.setAccessible(true);\n-        method.invoke(this);\n-    }\n-\n-    public void myMethod() {\n-        System.out.println(\"Hello from the non-EMCP again myMethod()!\");\n-    }\n-\n-    private final void myMethod1() {\n-        System.out.println(\"Hello from myMethod1()!\");\n-        System.out.println(\"Calling myMethod() from myMethod1():\");\n-        myMethod();\n-    }\n-\n-    private final void myMethod2() {\n-        System.out.println(\"Hello from myMethod2()!\");\n-        System.out.println(\"Calling myMethod1() from myMethod2():\");\n-        myMethod1();\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodAddInvokeTarget_2.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-#\n-# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 8042796\n-# @summary jvmtiRedefineClasses.cpp: guarantee(false) failed: OLD and\/or OBSOLETE method(s) found\n-# @author Daniel D. Daugherty\n-# @author Serguei Spitsyn\n-#\n-# @run shell MakeJAR3.sh RedefineMethodDelInvokeAgent 'Can-Redefine-Classes: true'\n-# @run build RedefineMethodDelInvokeApp\n-# @run shell RedefineMethodDelInvoke.sh\n-#\n-\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"${COMPILEJAVA}\" = \"\" ]\n-then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo \"COMPILEJAVA=${COMPILEJAVA}\"\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-JAVAC=\"${COMPILEJAVA}\"\/bin\/javac\n-JAVA=\"${TESTJAVA}\"\/bin\/java\n-\n-cp \"${TESTSRC}\"\/RedefineMethodDelInvokeTarget_1.java \\\n-    RedefineMethodDelInvokeTarget.java\n-\"${JAVAC}\" ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d . RedefineMethodDelInvokeTarget.java\n-mv RedefineMethodDelInvokeTarget.java RedefineMethodDelInvokeTarget_1.java\n-mv RedefineMethodDelInvokeTarget.class RedefineMethodDelInvokeTarget_1.class\n-\n-cp \"${TESTSRC}\"\/RedefineMethodDelInvokeTarget_2.java \\\n-    RedefineMethodDelInvokeTarget.java\n-\"${JAVAC}\" ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d . RedefineMethodDelInvokeTarget.java\n-mv RedefineMethodDelInvokeTarget.java RedefineMethodDelInvokeTarget_2.java\n-mv RedefineMethodDelInvokeTarget.class RedefineMethodDelInvokeTarget_2.class\n-\n-\"${JAVA}\" ${TESTVMOPTS} ${TESTJAVAOPTS} -javaagent:RedefineMethodDelInvokeAgent.jar \\\n-    -XX:+AllowRedefinitionToAddDeleteMethods \\\n-    -classpath \"${TESTCLASSES}\" RedefineMethodDelInvokeApp > output.log 2>&1\n-\n-result=$?\n-if [ \"$result\" = 0 ]; then\n-    echo \"The test returned expected exit code: $result\"\n-else\n-    echo \"FAIL: the test returned unexpected exit code: $result\"\n-    exit $result\n-fi\n-\n-cat output.log\n-\n-MESG=\"Exception\"\n-grep \"$MESG\" output.log\n-result=$?\n-if [ \"$result\" = 0 ]; then\n-    echo \"FAIL: found '$MESG' in the test output\"\n-    result=1\n-else\n-    echo \"PASS: did NOT find '$MESG' in the test output\"\n-    result=0\n-fi\n-\n-exit $result\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodDelInvoke.sh","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.instrument.Instrumentation;\n-\n-public class RedefineMethodDelInvokeAgent {\n-    private static Instrumentation instrumentation;\n-\n-    private RedefineMethodDelInvokeAgent() {\n-    }\n-\n-    public static void premain(String agentArgs, Instrumentation inst) {\n-        System.out.println(\"Hello from RedefineMethodDelInvokeAgent!\");\n-        System.out.println(\"isRedefineClassesSupported()=\" +\n-            inst.isRedefineClassesSupported());\n-\n-        instrumentation = inst;\n-    }\n-\n-    public static Instrumentation getInstrumentation() {\n-        return instrumentation;\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodDelInvokeAgent.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.*;\n-import java.lang.instrument.*;\n-\n-public class RedefineMethodDelInvokeApp {\n-    public static void main(String args[]) {\n-        System.out.println(\"Hello from RedefineMethodDelInvokeApp!\");\n-\n-        try {\n-            new RedefineMethodDelInvokeApp().doTest();\n-        } catch (Exception ex) {\n-            System.out.println(\"Exception has been caught\");\n-            ex.printStackTrace();\n-            System.exit(1);\n-        }\n-        System.exit(0);\n-    }\n-\n-    private void doTest() throws Exception {\n-        RedefineMethodDelInvokeTarget target =\n-            new RedefineMethodDelInvokeTarget();\n-\n-        System.out.println(\"RedefineMethodDelInvokeApp: invoking myMethod0(), myMethod1(), myMethod2()\");\n-        target.test();\n-\n-        \/\/ delete myMethod2()\n-        do_redefine(1);\n-\n-        System.out.println(\"RedefineMethodDelInvokeApp: invoking myMethod0(), myMethod1()\");\n-        target.test();\n-\n-        \/\/ delete myMethod1()\n-        do_redefine(2);\n-\n-        System.out.println(\"RedefineMethodDelInvokeApp: invoking myMethod0()\");\n-        target.test();\n-    }\n-\n-    private static void do_redefine(int counter) throws Exception {\n-        File f = new File(\"RedefineMethodDelInvokeTarget_\" + counter +\n-            \".class\");\n-        System.out.println(\"Reading test class from \" + f);\n-        InputStream redefineStream = new FileInputStream(f);\n-\n-        byte[] redefineBuffer = NamedBuffer.loadBufferFromStream(redefineStream);\n-\n-        ClassDefinition redefineParamBlock = new ClassDefinition(\n-            RedefineMethodDelInvokeTarget.class, redefineBuffer);\n-\n-        RedefineMethodDelInvokeAgent.getInstrumentation().redefineClasses(\n-            new ClassDefinition[] {redefineParamBlock});\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodDelInvokeApp.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class RedefineMethodDelInvokeTarget {\n-    public void test() {\n-        myMethod0();\n-    }\n-\n-    public static void myMethod0() {\n-        System.out.println(\"Target 0: myMethod0: Calling myMethod1()\");\n-        myMethod1();\n-    }\n-\n-    private static void myMethod1() {\n-        System.out.println(\"Target 0: myMethod1: Calling myMethod2()\");\n-        myMethod2();\n-    }\n-\n-    private static void myMethod2() {\n-        System.out.println(\"Target 0: myMethod2\");\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodDelInvokeTarget.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class RedefineMethodDelInvokeTarget {\n-    public void test() {\n-        myMethod0();\n-    }\n-\n-    public static void myMethod0() {\n-        System.out.println(\"Target 1: myMethod0: Calling myMethod1()\");\n-        myMethod1();\n-    }\n-\n-    private static void myMethod1() {\n-        System.out.println(\"Target 1: myMethod1\");\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodDelInvokeTarget_1.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-public class RedefineMethodDelInvokeTarget {\n-    public void test() {\n-        myMethod0();\n-    }\n-\n-    public static void myMethod0() {\n-        System.out.println(\"Target 2: myMethod0\");\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodDelInvokeTarget_2.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,94 +0,0 @@\n-#\n-# Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 7174978\n-# @summary Redefine a class with a method stored in a backtrace.\n-# @author Stefan Karlsson\n-#\n-# @modules java.instrument\n-#          jdk.management\n-# @run shell MakeJAR3.sh RedefineMethodInBacktraceAgent 'Can-Redefine-Classes: true'\n-# @run build RedefineMethodInBacktraceTarget RedefineMethodInBacktraceApp\n-# @run shell RedefineMethodInBacktrace.sh\n-#\n-\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"${COMPILEJAVA}\" = \"\" ]\n-then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo \"COMPILEJAVA=${COMPILEJAVA}\"\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-JAVAC=\"${COMPILEJAVA}\"\/bin\/javac\n-JAVA=\"${TESTJAVA}\"\/bin\/java\n-\n-cp \"${TESTSRC}\"\/RedefineMethodInBacktraceTarget_2.java \\\n-    RedefineMethodInBacktraceTarget.java\n-\"${JAVAC}\" ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d . RedefineMethodInBacktraceTarget.java\n-\n-cp \"${TESTSRC}\"\/RedefineMethodInBacktraceTargetB_2.java \\\n-    RedefineMethodInBacktraceTargetB.java\n-\"${JAVAC}\" ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d . RedefineMethodInBacktraceTargetB.java\n-\n-\"${JAVA}\" ${TESTVMOPTS} ${TESTJAVAOPTS} -javaagent:RedefineMethodInBacktraceAgent.jar \\\n-    -XX:+AllowRedefinitionToAddDeleteMethods \\\n-    -classpath \"${TESTCLASSES}\" RedefineMethodInBacktraceApp > output.log 2>&1\n-RUN_RESULT=$?\n-\n-if [ $RUN_RESULT != 0 ]; then\n-    echo \"FAIL: the run failed with exit code '$RUN_RESULT'\"\n-\texit $RUN_RESULT\n-fi\n-\n-cat output.log\n-\n-MESG=\"Test failed\"\n-grep \"$MESG\" output.log\n-result=$?\n-if [ \"$result\" = 0 ]; then\n-    echo \"FAIL: found '$MESG' in the test output\"\n-    result=1\n-else\n-    echo \"PASS: did NOT find '$MESG' in the test output\"\n-    result=0\n-fi\n-\n-exit $result\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodInBacktrace.sh","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.instrument.Instrumentation;\n-\n-public class RedefineMethodInBacktraceAgent {\n-    private static Instrumentation instrumentation;\n-\n-    private RedefineMethodInBacktraceAgent() {}\n-\n-    public static void premain(String agentArgs, Instrumentation inst) {\n-        System.out.println(\"Hello from RedefineMethodInBacktraceAgent!\");\n-        System.out.println(\"isRedefineClassesSupported()=\" +\n-                inst.isRedefineClassesSupported());\n-\n-        instrumentation = inst;\n-    }\n-\n-    public static Instrumentation getInstrumentation() {\n-        return instrumentation;\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodInBacktraceAgent.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -1,200 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import com.sun.management.DiagnosticCommandMBean;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.InputStream;\n-import java.lang.instrument.ClassDefinition;\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.ThreadInfo;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.util.concurrent.CountDownLatch;\n-import javax.management.JMX;\n-import javax.management.ObjectName;\n-\n-\/**\n- * When an exception is thrown, the JVM collects just enough information\n- * about the stack trace to be able to create a full fledged stack trace\n- * (StackTraceElement[]). The backtrace contains this information and the\n- * JVM  must make sure that the data in the backtrace is still usable after\n- * a class redefinition.\n- *\n- * After the PermGen removal there was a bug when the last reference to a Method\n- * was in the backtrace. The class of the method was kept alive, because of the\n- * mirror stored in the backtrace, but the old versions of the redefined method\n- * could be freed, since class redefinition didn't know about the backtraces.\n- *\/\n-public class RedefineMethodInBacktraceApp {\n-    static boolean failed = false;\n-\n-    public static void main(String args[]) throws Exception {\n-        System.out.println(\"Hello from RedefineMethodInBacktraceApp!\");\n-        new RedefineMethodInBacktraceApp().doTest();\n-\n-        if (failed) {\n-            throw new Exception(\"ERROR: RedefineMethodInBacktraceApp failed.\");\n-        }\n-    }\n-\n-    public static CountDownLatch stop = new CountDownLatch(1);\n-    public static CountDownLatch called = new CountDownLatch(1);\n-\n-    private void doTest() throws Exception {\n-        doMethodInBacktraceTest();\n-        doMethodInBacktraceTestB();\n-    }\n-\n-    private void doMethodInBacktraceTest() throws Exception {\n-        Throwable t1 = getThrowableFromMethodToRedefine();\n-        Throwable t2 = getThrowableFromMethodToDelete();\n-\n-        doRedefine(RedefineMethodInBacktraceTarget.class);\n-\n-        doClassUnloading();\n-\n-        System.out.println(\"checking backtrace for throwable from methodToRedefine\");\n-        touchRedefinedMethodInBacktrace(t1);\n-\n-        System.out.println(\"checking backtrace for throwable from methodToDelete\");\n-        touchRedefinedMethodInBacktrace(t2);\n-    }\n-\n-    private void doMethodInBacktraceTestB() throws Exception {\n-        \/\/ Start a thread which blocks in method\n-        Thread t = new Thread(RedefineMethodInBacktraceTargetB::methodToRedefine);\n-        t.setDaemon(true);\n-        t.start();\n-\n-        \/\/ Wait here until the new thread is in the method we want to redefine\n-        called.await();\n-\n-        \/\/ Now redefine the class while the method is still on the stack of the new thread\n-        doRedefine(RedefineMethodInBacktraceTargetB.class);\n-\n-        \/\/ Do thread dumps in two different ways (to exercise different code paths)\n-        \/\/ while the old class is still on the stack\n-\n-        ThreadInfo[] tis = ManagementFactory.getThreadMXBean().dumpAllThreads(false, false);\n-        for(ThreadInfo ti : tis) {\n-            System.out.println(ti);\n-        }\n-\n-        String[] threadPrintArgs = {};\n-        Object[] dcmdArgs = {threadPrintArgs};\n-        String[] signature = {String[].class.getName()};\n-        System.out.println(ManagementFactory.getPlatformMBeanServer().invoke(\n-                ObjectName.getInstance(\"com.sun.management:type=DiagnosticCommand\"),\n-                \"threadPrint\",\n-                dcmdArgs,\n-                signature));\n-\n-        \/\/ release the thread\n-        stop.countDown();\n-    }\n-\n-    private static Throwable getThrowableFromMethodToRedefine() throws Exception {\n-        Class<RedefineMethodInBacktraceTarget> c =\n-                RedefineMethodInBacktraceTarget.class;\n-        Method method = c.getMethod(\"methodToRedefine\");\n-\n-        Throwable thrownFromMethodToRedefine = null;\n-        try {\n-            method.invoke(null);\n-        } catch (InvocationTargetException e) {\n-            thrownFromMethodToRedefine = e.getCause();\n-            if (!(thrownFromMethodToRedefine instanceof RuntimeException)) {\n-                throw e;\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            System.out.println(\"\\nTest failed: unexpected exception: \" + e.toString());\n-            failed = true;\n-        }\n-        method = null;\n-        c = null;\n-\n-        return thrownFromMethodToRedefine;\n-    }\n-\n-    private static Throwable getThrowableFromMethodToDelete() throws Exception {\n-        Class<RedefineMethodInBacktraceTarget> c =\n-                RedefineMethodInBacktraceTarget.class;\n-        Method method = c.getMethod(\"callMethodToDelete\");\n-\n-        Throwable thrownFromMethodToDelete = null;\n-        try {\n-            method.invoke(null);\n-        } catch (InvocationTargetException e) {\n-            thrownFromMethodToDelete = e.getCause();\n-            if (!(thrownFromMethodToDelete instanceof RuntimeException)) {\n-                throw e;\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            System.out.println(\"\\nTest failed: unexpected exception: \" + e.toString());\n-            failed = true;\n-        }\n-        return thrownFromMethodToDelete;\n-    }\n-\n-\n-    private static void doClassUnloading() {\n-        \/\/ This will clean out old, unused redefined methods.\n-        System.gc();\n-    }\n-\n-    private static void touchRedefinedMethodInBacktrace(Throwable throwable) {\n-        throwable.printStackTrace();\n-        \/\/ Make sure that we can convert the backtrace, which is referring to\n-        \/\/ the redefined method, to a  StrackTraceElement[] without crashing.\n-        StackTraceElement[] stackTrace = throwable.getStackTrace();\n-        for (int i = 0; i < stackTrace.length; i++) {\n-          StackTraceElement frame = stackTrace[i];\n-          if (frame.getClassName() == null) {\n-              System.out.println(\"\\nTest failed: trace[\" + i + \"].getClassName() returned null\");\n-              failed = true;\n-          }\n-          if (frame.getMethodName() == null) {\n-              System.out.println(\"\\nTest failed: trace[\" + i + \"].getMethodName() returned null\");\n-              failed = true;\n-          }\n-        }\n-    }\n-\n-    private static void doRedefine(Class<?> clazz) throws Exception {\n-        \/\/ Load the second version of this class.\n-        File f = new File(clazz.getName() + \".class\");\n-        System.out.println(\"Reading test class from \" + f.getAbsolutePath());\n-        InputStream redefineStream = new FileInputStream(f);\n-\n-        byte[] redefineBuffer = NamedBuffer.loadBufferFromStream(redefineStream);\n-\n-        ClassDefinition redefineParamBlock = new ClassDefinition(\n-                clazz, redefineBuffer);\n-\n-        RedefineMethodInBacktraceAgent.getInstrumentation().redefineClasses(\n-                new ClassDefinition[] {redefineParamBlock});\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodInBacktraceApp.java","additions":0,"deletions":200,"binary":false,"changes":200,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * The first version of this class. The second version is in\n- * RedefineMethodInBacktraceTarget_2.java.\n- *\/\n-public class RedefineMethodInBacktraceTarget {\n-    public static void methodToRedefine() {\n-        throw new RuntimeException(\"Test exception\");\n-    }\n-\n-    public static void callMethodToDelete() {\n-        methodToDelete();\n-    }\n-\n-    private static void methodToDelete() {\n-        throw new RuntimeException(\"Test exception in methodToDelete\");\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodInBacktraceTarget.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * The first version of this class. The second version is in\n- * RedefineMethodInBacktraceTargetB_2.java.\n- *\/\n-public class RedefineMethodInBacktraceTargetB {\n-    public static void methodToRedefine() {\n-        try {\n-            \/\/ signal that we are here\n-            RedefineMethodInBacktraceApp.called.countDown();\n-\n-            \/\/ wait until test is done\n-            RedefineMethodInBacktraceApp.stop.await();\n-        } catch (InterruptedException ex) {\n-            \/\/ ignore, test will fail\n-        }\n-    }\n-\n-    public static void callMethodToDelete() {\n-        try {\n-            \/\/ signal that we are here\n-            RedefineMethodInBacktraceApp.called.countDown();\n-\n-            \/\/ wait until test is done\n-            RedefineMethodInBacktraceApp.stop.await();\n-        } catch (InterruptedException ex) {\n-            \/\/ ignore, test will fail\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodInBacktraceTargetB.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * This is the second version of this class. The first version is in\n- * RedefineMethodInBacktraceTargetB.java.\n- *\/\n-public class RedefineMethodInBacktraceTargetB {\n-    public static void methodToRedefine() {\n-    }\n-\n-    public static void callMethodToDelete() {\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodInBacktraceTargetB_2.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * This is the second version of this class. The first version is in\n- * RedefineMethodInBacktraceTarget.java.\n- *\/\n-public class RedefineMethodInBacktraceTarget {\n-    public static void methodToRedefine() {\n-        throw new RuntimeException(\"Test exception 2\");\n-    }\n-\n-    public static void callMethodToDelete() {\n-        throw new RuntimeException(\"Test exception 2 in callMethodToDelete\");\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineMethodInBacktraceTarget_2.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"}]}