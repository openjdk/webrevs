{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,26 @@\n+    \/**\n+     * Creates a new output stream with the specified compressor,\n+     * buffer size and flush mode.\n+     *\n+     * @param out the output stream\n+     * @param def the compressor (\"deflater\")\n+     * @param size the output buffer size\n+     * @param syncFlush\n+     *        if {@code true} invocation of the inherited\n+     *        {@link DeflaterOutputStream#flush() flush()} method of\n+     *        this instance flushes the compressor with flush mode\n+     *        {@link Deflater#SYNC_FLUSH} before flushing the output\n+     *        stream, otherwise only flushes the output stream\n+     * @throws    IOException If an I\/O error has occurred.\n+     * @throws    IllegalArgumentException if {@code size <= 0}\n+     *\n+     * @since 25\n+     *\/\n+    public GZIPOutputStream(OutputStream out, Deflater def, int size, boolean syncFlush)\n+        throws IOException\n+    {\n+        super(out, def, size, syncFlush);\n+        writeHeader();\n+        crc.reset();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPOutputStream.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.OutputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PipedOutputStream;\n+import java.util.stream.Stream;\n+import java.util.zip.Deflater;\n+import java.util.zip.GZIPOutputStream;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.function.Executable;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+\/*\n+ * @test\n+ * @summary Basic API verification tests for GZIPOutputStream\n+ * @run junit BasicGZIPOutputStreamTest\n+ *\/\n+public class BasicGZIPOutputStreamTest {\n+\n+    \/\/ Verify that the GZIPOutputStream constructors throw the expected NullPointerException\n+    private static Stream<Arguments> npeFromConstructors() {\n+        return Stream.of(\n+            ctorTestCase(() -> new GZIPOutputStream(null)),\n+            ctorTestCase(() -> new GZIPOutputStream(null, 1)),\n+            ctorTestCase(() -> new GZIPOutputStream(newValidOutput(), null, 1, true)),\n+            ctorTestCase(() -> new GZIPOutputStream(null, new Deflater(), 1, true)),\n+            ctorTestCase(() -> new GZIPOutputStream(null, null, 1, true)));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"npeFromConstructors\")\n+    public void testNPEFromConstructors(final Executable constructor) {\n+        Assertions.assertThrows(NullPointerException.class, constructor,\n+                \"GZIPOutputStream constructor did not throw NullPointerException\");\n+    }\n+\n+    \/\/ Verify that the GZIPOutputStream constructors throw the expected IllegalArgumentException\n+    private static Stream<Arguments> iaeFromConstructors() {\n+        return Stream.of(\n+            ctorTestCase(() -> new GZIPOutputStream(newValidOutput(), 0)),\n+            ctorTestCase(() -> new GZIPOutputStream(newValidOutput(), 0, true)),\n+            ctorTestCase(() -> new GZIPOutputStream(newValidOutput(), new Deflater(), 0, true)));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"iaeFromConstructors\")\n+    public void testIAEFromConstructors(final Executable constructor) {\n+        Assertions.assertThrows(IllegalArgumentException.class, constructor,\n+                \"GZIPOutputStream constructor did not throw IllegalArgumentException\");\n+    }\n+\n+    \/\/ Verify that the GZIPOutputStream constructors throw the expected IOException\n+    private static Stream<Arguments> ioeFromConstructors() {\n+        return Stream.of(\n+            ctorTestCase(() -> new GZIPOutputStream(newInvalidOutput())),\n+            ctorTestCase(() -> new GZIPOutputStream(newInvalidOutput(), true)),\n+            ctorTestCase(() -> new GZIPOutputStream(newInvalidOutput(), 1024)),\n+            ctorTestCase(() -> new GZIPOutputStream(newInvalidOutput(), 1024, true)),\n+            ctorTestCase(() -> new GZIPOutputStream(newInvalidOutput(), new Deflater(), 1024, true)));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"ioeFromConstructors\")\n+    public void testIOEFromConstructors(final Executable constructor) {\n+        Assertions.assertThrows(IOException.class, constructor,\n+                \"GZIPOutputStream constructor did not throw IOException\");\n+    }\n+\n+\/\/ Helpers\n+\n+    \/\/ This helps reduce clutter\n+    private static Arguments ctorTestCase(Executable ctor) {\n+        return Arguments.of(ctor);\n+    }\n+\n+    \/\/ Create an OutputStream that always throws IOException\n+    private static OutputStream newInvalidOutput() {\n+        return new PipedOutputStream();         \/\/ unconnected, so it will always throw IOException\n+    }\n+\n+    \/\/ Create a normal OutputStream\n+    private static OutputStream newValidOutput() {\n+        return new ByteArrayOutputStream();\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/BasicGZIPOutputStreamTest.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}