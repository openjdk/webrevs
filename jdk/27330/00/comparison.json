{"files":[{"patch":"@@ -28,1 +28,2 @@\n-\/\/ These tests of Atomic only verify functionality.  They don't verify atomicity.\n+\/\/ These tests of AtomicAccess only verify functionality.  They don't verify\n+\/\/ atomicity.\n@@ -31,1 +32,1 @@\n-struct AtomicAddTestSupport {\n+struct AtomicAccessAddTestSupport {\n@@ -34,1 +35,1 @@\n-  AtomicAddTestSupport() : _test_value{} {}\n+  AtomicAccessAddTestSupport() : _test_value{} {}\n@@ -55,2 +56,2 @@\n-TEST_VM(AtomicAddTest, int32) {\n-  using Support = AtomicAddTestSupport<int32_t>;\n+TEST_VM(AtomicAccessAddTest, int32) {\n+  using Support = AtomicAccessAddTestSupport<int32_t>;\n@@ -61,2 +62,2 @@\n-TEST_VM(AtomicAddTest, int64) {\n-  using Support = AtomicAddTestSupport<int64_t>;\n+TEST_VM(AtomicAccessAddTest, int64) {\n+  using Support = AtomicAccessAddTestSupport<int64_t>;\n@@ -67,1 +68,1 @@\n-TEST_VM(AtomicAddTest, ptr) {\n+TEST_VM(AtomicAccessAddTest, ptr) {\n@@ -87,1 +88,1 @@\n-struct AtomicXchgTestSupport {\n+struct AtomicAccessXchgTestSupport {\n@@ -90,1 +91,1 @@\n-  AtomicXchgTestSupport() : _test_value{} {}\n+  AtomicAccessXchgTestSupport() : _test_value{} {}\n@@ -102,2 +103,2 @@\n-TEST_VM(AtomicXchgTest, int32) {\n-  using Support = AtomicXchgTestSupport<int32_t>;\n+TEST_VM(AtomicAccessXchgTest, int32) {\n+  using Support = AtomicAccessXchgTestSupport<int32_t>;\n@@ -107,2 +108,2 @@\n-TEST_VM(AtomicXchgTest, int64) {\n-  using Support = AtomicXchgTestSupport<int64_t>;\n+TEST_VM(AtomicAccessXchgTest, int64) {\n+  using Support = AtomicAccessXchgTestSupport<int64_t>;\n@@ -113,1 +114,1 @@\n-struct AtomicCmpxchgTestSupport {\n+struct AtomicAccessCmpxchgTestSupport {\n@@ -116,1 +117,1 @@\n-  AtomicCmpxchgTestSupport() : _test_value{} {}\n+  AtomicAccessCmpxchgTestSupport() : _test_value{} {}\n@@ -132,2 +133,2 @@\n-TEST_VM(AtomicCmpxchgTest, int32) {\n-  using Support = AtomicCmpxchgTestSupport<int32_t>;\n+TEST_VM(AtomicAccessCmpxchgTest, int32) {\n+  using Support = AtomicAccessCmpxchgTestSupport<int32_t>;\n@@ -137,1 +138,1 @@\n-TEST_VM(AtomicCmpxchgTest, int64) {\n+TEST_VM(AtomicAccessCmpxchgTest, int64) {\n@@ -141,1 +142,1 @@\n-  using Support = AtomicCmpxchgTestSupport<int64_t>;\n+  using Support = AtomicAccessCmpxchgTestSupport<int64_t>;\n@@ -145,1 +146,1 @@\n-struct AtomicCmpxchg1ByteStressSupport {\n+struct AtomicAccessCmpxchg1ByteStressSupport {\n@@ -150,1 +151,1 @@\n-  AtomicCmpxchg1ByteStressSupport() : _default_val(0x7a), _base(7), _array{} {}\n+  AtomicAccessCmpxchg1ByteStressSupport() : _default_val(0x7a), _base(7), _array{} {}\n@@ -185,2 +186,2 @@\n-TEST_VM(AtomicCmpxchg1Byte, stress) {\n-  AtomicCmpxchg1ByteStressSupport support;\n+TEST_VM(AtomicAccessCmpxchg1Byte, stress) {\n+  AtomicAccessCmpxchg1ByteStressSupport support;\n@@ -191,1 +192,1 @@\n-struct AtomicEnumTestSupport {\n+struct AtomicAccessEnumTestSupport {\n@@ -194,1 +195,1 @@\n-  AtomicEnumTestSupport() : _test_value{} {}\n+  AtomicAccessEnumTestSupport() : _test_value{} {}\n@@ -219,1 +220,1 @@\n-namespace AtomicEnumTestUnscoped {       \/\/ Scope the enumerators.\n+namespace AtomicAccessEnumTestUnscoped {       \/\/ Scope the enumerators.\n@@ -223,3 +224,3 @@\n-TEST_VM(AtomicEnumTest, unscoped_enum) {\n-  using namespace AtomicEnumTestUnscoped;\n-  using Support = AtomicEnumTestSupport<TestEnum>;\n+TEST_VM(AtomicAccessEnumTest, unscoped_enum) {\n+  using namespace AtomicAccessEnumTestUnscoped;\n+  using Support = AtomicAccessEnumTestSupport<TestEnum>;\n@@ -232,1 +233,1 @@\n-enum class AtomicEnumTestScoped { A, B, C };\n+enum class AtomicAccessEnumTestScoped { A, B, C };\n@@ -234,4 +235,4 @@\n-TEST_VM(AtomicEnumTest, scoped_enum) {\n-  const AtomicEnumTestScoped B = AtomicEnumTestScoped::B;\n-  const AtomicEnumTestScoped C = AtomicEnumTestScoped::C;\n-  using Support = AtomicEnumTestSupport<AtomicEnumTestScoped>;\n+TEST_VM(AtomicAccessEnumTest, scoped_enum) {\n+  const AtomicAccessEnumTestScoped B = AtomicAccessEnumTestScoped::B;\n+  const AtomicAccessEnumTestScoped C = AtomicAccessEnumTestScoped::C;\n+  using Support = AtomicAccessEnumTestSupport<AtomicAccessEnumTestScoped>;\n@@ -245,1 +246,1 @@\n-struct AtomicBitopsTestSupport {\n+struct AtomicAccessBitopsTestSupport {\n@@ -252,1 +253,1 @@\n-  AtomicBitopsTestSupport() : _test_value(0) {}\n+  AtomicAccessBitopsTestSupport() : _test_value(0) {}\n@@ -323,1 +324,1 @@\n-const T AtomicBitopsTestSupport<T>::_old_value;\n+const T AtomicAccessBitopsTestSupport<T>::_old_value;\n@@ -326,1 +327,1 @@\n-const T AtomicBitopsTestSupport<T>::_change_value;\n+const T AtomicAccessBitopsTestSupport<T>::_change_value;\n@@ -328,2 +329,2 @@\n-TEST_VM(AtomicBitopsTest, int8) {\n-  AtomicBitopsTestSupport<int8_t>()();\n+TEST_VM(AtomicAccessBitopsTest, int8) {\n+  AtomicAccessBitopsTestSupport<int8_t>()();\n@@ -332,2 +333,2 @@\n-TEST_VM(AtomicBitopsTest, uint8) {\n-  AtomicBitopsTestSupport<uint8_t>()();\n+TEST_VM(AtomicAccessBitopsTest, uint8) {\n+  AtomicAccessBitopsTestSupport<uint8_t>()();\n@@ -336,2 +337,2 @@\n-TEST_VM(AtomicBitopsTest, int32) {\n-  AtomicBitopsTestSupport<int32_t>()();\n+TEST_VM(AtomicAccessBitopsTest, int32) {\n+  AtomicAccessBitopsTestSupport<int32_t>()();\n@@ -340,2 +341,2 @@\n-TEST_VM(AtomicBitopsTest, uint32) {\n-  AtomicBitopsTestSupport<uint32_t>()();\n+TEST_VM(AtomicAccessBitopsTest, uint32) {\n+  AtomicAccessBitopsTestSupport<uint32_t>()();\n@@ -344,2 +345,2 @@\n-TEST_VM(AtomicBitopsTest, int64) {\n-  AtomicBitopsTestSupport<int64_t>()();\n+TEST_VM(AtomicAccessBitopsTest, int64) {\n+  AtomicAccessBitopsTestSupport<int64_t>()();\n@@ -348,2 +349,2 @@\n-TEST_VM(AtomicBitopsTest, uint64) {\n-  AtomicBitopsTestSupport<uint64_t>()();\n+TEST_VM(AtomicAccessBitopsTest, uint64) {\n+  AtomicAccessBitopsTestSupport<uint64_t>()();\n","filename":"test\/hotspot\/gtest\/runtime\/test_atomicAccess.cpp","additions":52,"deletions":51,"binary":false,"changes":103,"status":"modified"}]}