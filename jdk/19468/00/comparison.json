{"files":[{"patch":"@@ -39,1 +39,1 @@\n-  const idx_t bits = bits_required(covered_region);\n+  const idx_t bits = words_to_bits(covered_region.word_size());\n@@ -58,2 +58,2 @@\n-    _region_start = covered_region.start();\n-    _region_size = covered_region.word_size();\n+    _heap_start = covered_region.start();\n+    _heap_size = covered_region.word_size();\n@@ -65,2 +65,2 @@\n-  _region_start = 0;\n-  _region_size = 0;\n+  _heap_start = 0;\n+  _heap_size = 0;\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -77,2 +77,2 @@\n-  HeapWord*       _region_start;\n-  size_t          _region_size;\n+  HeapWord*       _heap_start;\n+  size_t          _heap_size;\n@@ -83,5 +83,0 @@\n-  \/\/ Return the number of bits required to represent the specified number of\n-  \/\/ HeapWords, or the specified region.\n-  static inline idx_t bits_required(size_t words);\n-  static inline idx_t bits_required(MemRegion covered_region);\n-\n@@ -97,3 +92,3 @@\n-  inline HeapWord* region_start() const;\n-  inline HeapWord* region_end() const;\n-  inline size_t    region_size() const;\n+  inline HeapWord* heap_start() const;\n+  inline HeapWord* heap_end() const;\n+  inline size_t    heap_size() const;\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.hpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-  _region_start(nullptr), _region_size(0), _beg_bits(), _virtual_space(nullptr), _reserved_byte_size(0)\n+  _heap_start(nullptr), _heap_size(0), _beg_bits(), _virtual_space(nullptr), _reserved_byte_size(0)\n@@ -43,2 +43,2 @@\n-inline ParMarkBitMap::idx_t ParMarkBitMap::bits_required(size_t words) {\n-  return words_to_bits(words);\n+inline HeapWord* ParMarkBitMap::heap_start() const {\n+  return _heap_start;\n@@ -47,2 +47,2 @@\n-inline ParMarkBitMap::idx_t ParMarkBitMap::bits_required(MemRegion covered_region) {\n-  return bits_required(covered_region.word_size());\n+inline HeapWord* ParMarkBitMap::heap_end() const {\n+  return heap_start() + heap_size();\n@@ -51,10 +51,2 @@\n-inline HeapWord* ParMarkBitMap::region_start() const {\n-  return _region_start;\n-}\n-\n-inline HeapWord* ParMarkBitMap::region_end() const {\n-  return region_start() + region_size();\n-}\n-\n-inline size_t ParMarkBitMap::region_size() const {\n-  return _region_size;\n+inline size_t ParMarkBitMap::heap_size() const {\n+  return _heap_size;\n@@ -101,1 +93,1 @@\n-  return words_to_bits(pointer_delta(addr, region_start()));\n+  return words_to_bits(pointer_delta(addr, heap_start()));\n@@ -106,1 +98,1 @@\n-  return region_start() + bits_to_words(bit);\n+  return heap_start() + bits_to_words(bit);\n@@ -139,4 +131,4 @@\n-  assert(addr >= region_start(),\n-         \"addr too small, addr: \" PTR_FORMAT \" region start: \" PTR_FORMAT, p2i(addr), p2i(region_start()));\n-  assert(addr <= region_end(),\n-         \"addr too big, addr: \" PTR_FORMAT \" region end: \" PTR_FORMAT, p2i(addr), p2i(region_end()));\n+  assert(addr >= heap_start(),\n+         \"addr too small, addr: \" PTR_FORMAT \" heap start: \" PTR_FORMAT, p2i(addr), p2i(heap_start()));\n+  assert(addr <= heap_end(),\n+         \"addr too big, addr: \" PTR_FORMAT \" heap end: \" PTR_FORMAT, p2i(addr), p2i(heap_end()));\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.inline.hpp","additions":13,"deletions":21,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-  \/\/ would mistakenly return 0 for _region_end\n+  \/\/ would mistakenly return 0 for _heap_end\n@@ -531,2 +531,2 @@\n-  assert(addr >= _heap_start, \"bad addr \" PTR_FORMAT \" _region_start \" PTR_FORMAT, p2i(addr), p2i(_heap_start));\n-  assert(addr <= _heap_end, \"bad addr \" PTR_FORMAT \" _region_end \" PTR_FORMAT, p2i(addr), p2i(_heap_end));\n+  assert(addr >= _heap_start, \"bad addr \" PTR_FORMAT \" _heap_start \" PTR_FORMAT, p2i(addr), p2i(_heap_start));\n+  assert(addr <= _heap_end, \"bad addr \" PTR_FORMAT \" _heap_end \" PTR_FORMAT, p2i(addr), p2i(_heap_end));\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}