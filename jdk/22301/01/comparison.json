{"files":[{"patch":"@@ -230,5 +230,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new SSLPermission(\"setHostnameVerifier\"));\n-        }\n@@ -309,5 +304,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkSetFactory();\n-        }\n@@ -356,5 +346,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkSetFactory();\n-        }\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/HttpsURLConnection.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.Security;\n@@ -65,1 +64,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -67,3 +65,1 @@\n-        String type;\n-        type = AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-            Security.getProperty(\"ssl.KeyManagerFactory.algorithm\"));\n+        String type = Security.getProperty(\"ssl.KeyManagerFactory.algorithm\");\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/KeyManagerFactory.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -132,5 +132,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new SSLPermission(\"setDefaultSSLContext\"));\n-        }\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLContext.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-import sun.security.action.GetPropertyAction;\n-\n@@ -49,1 +47,1 @@\n-        String s = GetPropertyAction.privilegedGetProperty(\n+        String s = System.getProperty(\n@@ -89,1 +87,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -91,7 +88,5 @@\n-        return AccessController.doPrivileged((PrivilegedAction<String>) () -> {\n-            String s = Security.getProperty(name);\n-            if (s != null) {\n-                s = s.trim();\n-                if (s.isEmpty()) {\n-                    s = null;\n-                }\n+        String s = Security.getProperty(name);\n+        if (s != null) {\n+            s = s.trim();\n+            if (s.isEmpty()) {\n+                s = null;\n@@ -99,2 +94,2 @@\n-            return s;\n-        });\n+        }\n+        return s;\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLSocketFactory.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.Security;\n@@ -77,1 +76,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -79,3 +77,1 @@\n-        String type;\n-        type = AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-            Security.getProperty( \"ssl.TrustManagerFactory.algorithm\"));\n+        String type = Security.getProperty(\"ssl.TrustManagerFactory.algorithm\");\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/TrustManagerFactory.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.action;\n-\n-import java.io.*;\n-\n-import java.security.PrivilegedExceptionAction;\n-\n-\/**\n- * A convenience class for opening a FileInputStream as a privileged action.\n- *\n- * @author Andreas Sterbenz\n- *\/\n-public class OpenFileInputStreamAction\n-        implements PrivilegedExceptionAction<FileInputStream> {\n-\n-    private final File file;\n-\n-    public OpenFileInputStreamAction(File file) {\n-        this.file = file;\n-    }\n-\n-    public OpenFileInputStreamAction(String filename) {\n-        this.file = new File(filename);\n-    }\n-\n-    public FileInputStream run() throws Exception {\n-        return new FileInputStream(file);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/action\/OpenFileInputStreamAction.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -66,4 +64,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String alpnCharsetString = AccessController.doPrivileged(\n-                (PrivilegedAction<String>) ()\n-                        -> Security.getProperty(\"jdk.tls.alpnCharset\"));\n+        String alpnCharsetString = Security.getProperty(\"jdk.tls.alpnCharset\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/AlpnExtension.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -264,2 +263,1 @@\n-            String property = GetPropertyAction.privilegedGetProperty(\n-                    \"jdk.tls.ephemeralDHKeySize\");\n+            String property = System.getProperty(\"jdk.tls.ephemeralDHKeySize\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DHKeyExchange.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -755,2 +754,1 @@\n-            String property = GetPropertyAction\n-                    .privilegedGetProperty(\"jdk.tls.namedGroups\");\n+            String property = System.getProperty(\"jdk.tls.namedGroups\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/NamedGroup.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,7 +233,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String property = AccessController.doPrivileged(\n-            new PrivilegedAction<String>() {\n-                public String run() {\n-                    return Security.getProperty(PROPERTY_NAME);\n-                }\n-            });\n+        String property = Security.getProperty(PROPERTY_NAME);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PredefinedDHParameterSpecs.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.security.AccessController;\n@@ -45,1 +44,0 @@\n-import java.security.PrivilegedAction;\n@@ -383,8 +381,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String prop = AccessController.doPrivileged(\n-                new PrivilegedAction<String>() {\n-            @Override\n-            public String run() {\n-                return Security.getProperty(\"jdk.tls.keyLimits\");\n-            }\n-        });\n+        String prop = Security.getProperty(\"jdk.tls.keyLimits\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLCipher.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -41,2 +39,0 @@\n-import sun.security.action.GetIntegerAction;\n-import sun.security.action.GetPropertyAction;\n@@ -81,3 +77,1 @@\n-    @SuppressWarnings(\"removal\")\n-    HashMap<HandshakeCompletedListener, AccessControlContext>\n-                                handshakeListeners;\n+    HashSet<HandshakeCompletedListener> handshakeListeners;\n@@ -108,1 +102,1 @@\n-    static final int maxHandshakeMessageSize = GetIntegerAction.privilegedGetProperty(\n+    static final int maxHandshakeMessageSize = Integer.getInteger(\n@@ -150,1 +144,1 @@\n-        Integer maxCertificateChainLength = GetIntegerAction.privilegedGetProperty(\n+        Integer maxCertificateChainLength = Integer.getInteger(\n@@ -167,1 +161,1 @@\n-        Integer inboundClientLen = GetIntegerAction.privilegedGetProperty(\n+        Integer inboundClientLen = Integer.getInteger(\n@@ -189,1 +183,1 @@\n-        Integer inboundServerLen = GetIntegerAction.privilegedGetProperty(\n+        Integer inboundServerLen = Integer.getInteger(\n@@ -206,1 +200,1 @@\n-        Integer nstServerCount = GetIntegerAction.privilegedGetProperty(\n+        Integer nstServerCount = Integer.getInteger(\n@@ -387,1 +381,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -392,1 +385,1 @@\n-            handshakeListeners = new HashMap<>(4);\n+            handshakeListeners = new HashSet<>(4);\n@@ -395,1 +388,1 @@\n-        handshakeListeners.put(listener, AccessController.getContext());\n+        handshakeListeners.add(listener);\n@@ -406,1 +399,1 @@\n-        if (handshakeListeners.remove(listener) == null) {\n+        if (!handshakeListeners.remove(listener)) {\n@@ -535,1 +528,1 @@\n-    @SuppressWarnings({\"removal\",\"unchecked\", \"CloneDeclaresCloneNotSupported\"})\n+    @SuppressWarnings({\"unchecked\", \"CloneDeclaresCloneNotSupported\"})\n@@ -542,1 +535,1 @@\n-                    (HashMap<HandshakeCompletedListener, AccessControlContext>)\n+                    (HashSet<HandshakeCompletedListener>)\n@@ -576,1 +569,1 @@\n-        String property = GetPropertyAction.privilegedGetProperty(propertyName);\n+        String property = System.getProperty(propertyName);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLConfiguration.java","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -412,1 +411,1 @@\n-        String property = GetPropertyAction.privilegedGetProperty(propertyName);\n+        String property = System.getProperty(propertyName);\n@@ -745,1 +744,1 @@\n-            String property = GetPropertyAction.privilegedGetProperty(propname);\n+            String property = System.getProperty(propname);\n@@ -960,1 +959,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -963,19 +961,12 @@\n-            final Map<String,String> props = new HashMap<>();\n-            AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<Object>() {\n-                @Override\n-                public Object run() {\n-                    props.put(\"keyStore\",  System.getProperty(\n-                                \"javax.net.ssl.keyStore\", \"\"));\n-                    props.put(\"keyStoreType\", System.getProperty(\n-                                \"javax.net.ssl.keyStoreType\",\n-                                KeyStore.getDefaultType()));\n-                    props.put(\"keyStoreProvider\", System.getProperty(\n-                                \"javax.net.ssl.keyStoreProvider\", \"\"));\n-                    props.put(\"keyStorePasswd\", System.getProperty(\n-                                \"javax.net.ssl.keyStorePassword\", \"\"));\n-                    return null;\n-                }\n-            });\n-\n-            final String defaultKeyStore = props.get(\"keyStore\");\n+            Map<String,String> props = new HashMap<>();\n+            props.put(\"keyStore\",  System.getProperty(\n+                        \"javax.net.ssl.keyStore\", \"\"));\n+            props.put(\"keyStoreType\", System.getProperty(\n+                        \"javax.net.ssl.keyStoreType\",\n+                        KeyStore.getDefaultType()));\n+            props.put(\"keyStoreProvider\", System.getProperty(\n+                        \"javax.net.ssl.keyStoreProvider\", \"\"));\n+            props.put(\"keyStorePasswd\", System.getProperty(\n+                        \"javax.net.ssl.keyStorePassword\", \"\"));\n+\n+            String defaultKeyStore = props.get(\"keyStore\");\n@@ -1004,7 +995,1 @@\n-                    fs = AccessController.doPrivileged(\n-                            new PrivilegedExceptionAction<FileInputStream>() {\n-                        @Override\n-                        public FileInputStream run() throws Exception {\n-                            return new FileInputStream(defaultKeyStore);\n-                        }\n-                    });\n+                    fs = new FileInputStream(defaultKeyStore);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLContextImpl.java","additions":16,"deletions":31,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -1205,4 +1202,13 @@\n-                    @SuppressWarnings(\"removal\")\n-                    var dummy = AccessController.doPrivileged(\n-                            new DelegatedAction(hc), engine.conContext.acc);\n-                } catch (PrivilegedActionException pae) {\n+                    while (!hc.delegatedActions.isEmpty()) {\n+                        Map.Entry<Byte, ByteBuffer> me =\n+                            hc.delegatedActions.poll();\n+                        if (me != null) {\n+                            try {\n+                                hc.dispatch(me.getKey(), me.getValue());\n+                            } catch (Exception e) {\n+                                throw hc.conContext.fatal(Alert.INTERNAL_ERROR,\n+                                        \"Unhandled exception\", e);\n+                            }\n+                        }\n+                    }\n+                } catch (SSLException se) {\n@@ -1211,1 +1217,0 @@\n-                    Exception reportedException = pae.getException();\n@@ -1215,1 +1220,1 @@\n-                        engine.conContext.delegatedThrown = reportedException;\n+                        engine.conContext.delegatedThrown = se;\n@@ -1223,1 +1228,1 @@\n-                        hc.delegatedThrown = reportedException;\n+                        hc.delegatedThrown = se;\n@@ -1226,2 +1231,1 @@\n-                        engine.conContext.closeReason =\n-                                getTaskThrown(reportedException);\n+                        engine.conContext.closeReason = getTaskThrown(se);\n@@ -1260,25 +1264,0 @@\n-\n-        private static class DelegatedAction\n-                implements PrivilegedExceptionAction<Void> {\n-            final HandshakeContext context;\n-            DelegatedAction(HandshakeContext context) {\n-                this.context = context;\n-            }\n-\n-            @Override\n-            public Void run() throws Exception {\n-                while (!context.delegatedActions.isEmpty()) {\n-                    Map.Entry<Byte, ByteBuffer> me =\n-                            context.delegatedActions.poll();\n-                    if (me != null) {\n-                        try {\n-                            context.dispatch(me.getKey(), me.getValue());\n-                        } catch (Exception e) {\n-                            throw context.conContext.fatal(Alert.INTERNAL_ERROR,\n-                                    \"Unhandled exception\", e);\n-                        }\n-                    }\n-                }\n-                return null;\n-            }\n-        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLEngineImpl.java","additions":17,"deletions":38,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -823,1 +822,1 @@\n-        String property = GetPropertyAction.privilegedGetProperty(propertyName);\n+        String property = System.getProperty(propertyName);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLExtension.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -67,1 +66,1 @@\n-        String p = GetPropertyAction.privilegedGetProperty(\"javax.net.debug\");\n+        String p = System.getProperty(\"javax.net.debug\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLLogger.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import sun.security.action.GetIntegerAction;\n-import sun.security.action.GetPropertyAction;\n@@ -327,1 +325,1 @@\n-                st = GetPropertyAction.privilegedGetProperty(\n+                st = System.getProperty(\n@@ -330,1 +328,1 @@\n-                st = GetPropertyAction.privilegedGetProperty(\n+                st = System.getProperty(\n@@ -340,1 +338,1 @@\n-            String s = GetPropertyAction.privilegedGetProperty(\n+            String s = System.getProperty(\n@@ -367,1 +365,1 @@\n-            int defaultCacheLimit = GetIntegerAction.privilegedGetProperty(\n+            int defaultCacheLimit = Integer.getInteger(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSessionContextImpl.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-import javax.net.ssl.SSLPermission;\n@@ -916,1 +915,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -919,15 +917,0 @@\n-        \/*\n-         * An interim security policy until we can do something\n-         * more specific in 1.2. Only allow trusted code (code which\n-         * can set system properties) to get an\n-         * SSLSessionContext. This is to limit the ability of code to\n-         * look up specific sessions or enumerate over them. Otherwise,\n-         * code can only get session objects from successful SSL\n-         * connections which implies that they must have had permission\n-         * to make the network connection in the first place.\n-         *\/\n-        SecurityManager sm;\n-        if ((sm = System.getSecurityManager()) != null) {\n-            sm.checkPermission(new SSLPermission(\"getSSLSessionContext\"));\n-        }\n-\n@@ -1239,2 +1222,1 @@\n-     * key and the calling security context. This is important since\n-     * sessions can be shared across different protection domains.\n+     * key.\n@@ -1242,1 +1224,1 @@\n-    private final ConcurrentHashMap<SecureKey, Object> boundValues;\n+    private final ConcurrentHashMap<String, Object> boundValues;\n@@ -1254,2 +1236,1 @@\n-        SecureKey secureKey = new SecureKey(key);\n-        Object oldValue = boundValues.put(secureKey, value);\n+        Object oldValue = boundValues.put(key, value);\n@@ -1283,2 +1264,1 @@\n-        SecureKey secureKey = new SecureKey(key);\n-        return boundValues.get(secureKey);\n+        return boundValues.get(key);\n@@ -1298,2 +1278,1 @@\n-        SecureKey secureKey = new SecureKey(key);\n-        Object value = boundValues.remove(secureKey);\n+        Object value = boundValues.remove(key);\n@@ -1318,9 +1297,1 @@\n-        ArrayList<Object> v = new ArrayList<>();\n-        Object securityCtx = SecureKey.getCurrentSecurityContext();\n-        for (SecureKey key : boundValues.keySet()) {\n-            if (securityCtx.equals(key.getSecurityContext())) {\n-                v.add(key.getAppKey());\n-            }\n-        }\n-\n-        return v.toArray(new String[0]);\n+        return boundValues.keySet().toArray(new String[0]);\n@@ -1525,46 +1496,0 @@\n-\n-\/**\n- * This \"struct\" class serves as a Hash Key that combines an\n- * application-specific key and a security context.\n- *\/\n-class SecureKey {\n-    private static final Object     nullObject = new Object();\n-    private final Object            appKey;\n-    private final Object            securityCtx;\n-\n-    static Object getCurrentSecurityContext() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        Object context = null;\n-\n-        if (sm != null)\n-            context = sm.getSecurityContext();\n-        if (context == null)\n-            context = nullObject;\n-        return context;\n-    }\n-\n-    SecureKey(Object key) {\n-        this.appKey = key;\n-        this.securityCtx = getCurrentSecurityContext();\n-    }\n-\n-    Object getAppKey() {\n-        return appKey;\n-    }\n-\n-    Object getSecurityContext() {\n-        return securityCtx;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return appKey.hashCode() ^ securityCtx.hashCode();\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        return o instanceof SecureKey && ((SecureKey)o).appKey.equals(appKey)\n-                        && ((SecureKey)o).securityCtx.equals(securityCtx);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSessionImpl.java","additions":6,"deletions":81,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.security.AccessController;\n@@ -32,1 +31,0 @@\n-import sun.security.action.GetLongAction;\n@@ -64,4 +62,3 @@\n-        @SuppressWarnings(\"removal\")\n-        long respTimeOut = AccessController.doPrivileged(\n-                    new GetLongAction(\"jdk.tls.stapling.responseTimeout\",\n-                        DEFAULT_STATUS_RESP_DELAY));\n+        long respTimeOut = Long.getLong(\n+                    \"jdk.tls.stapling.responseTimeout\",\n+                    DEFAULT_STATUS_RESP_DELAY);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerHandshakeContext.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -81,2 +80,1 @@\n-        String s = GetPropertyAction.privilegedGetProperty(\n-                \"jdk.tls.server.statelessKeyTimeout\");\n+        String s = System.getProperty(\"jdk.tls.server.statelessKeyTimeout\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SessionTicketExtension.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.security.AccessController;\n@@ -35,3 +34,0 @@\n-import sun.security.action.GetBooleanAction;\n-import sun.security.action.GetIntegerAction;\n-import sun.security.action.GetPropertyAction;\n@@ -66,4 +62,3 @@\n-        @SuppressWarnings(\"removal\")\n-        int cap = AccessController.doPrivileged(\n-                new GetIntegerAction(\"jdk.tls.stapling.cacheSize\",\n-                    DEFAULT_CACHE_SIZE));\n+        int cap = Integer.getInteger(\n+                \"jdk.tls.stapling.cacheSize\",\n+                DEFAULT_CACHE_SIZE);\n@@ -72,4 +67,3 @@\n-        @SuppressWarnings(\"removal\")\n-        int life = AccessController.doPrivileged(\n-                new GetIntegerAction(\"jdk.tls.stapling.cacheLifetime\",\n-                    DEFAULT_CACHE_LIFETIME));\n+        int life = Integer.getInteger(\n+                \"jdk.tls.stapling.cacheLifetime\",\n+                DEFAULT_CACHE_LIFETIME);\n@@ -78,2 +72,1 @@\n-        String uriStr = GetPropertyAction\n-                .privilegedGetProperty(\"jdk.tls.stapling.responderURI\");\n+        String uriStr = System.getProperty(\"jdk.tls.stapling.responderURI\");\n@@ -89,4 +82,3 @@\n-        respOverride = GetBooleanAction\n-                .privilegedGetProperty(\"jdk.tls.stapling.responderOverride\");\n-        ignoreExtensions = GetBooleanAction\n-                .privilegedGetProperty(\"jdk.tls.stapling.ignoreExtensions\");\n+        respOverride = Boolean.getBoolean(\"jdk.tls.stapling.responderOverride\");\n+        ignoreExtensions = Boolean.getBoolean\n+                (\"jdk.tls.stapling.ignoreExtensions\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/StatusResponseManager.java","additions":10,"deletions":18,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.security.*;\n+import java.security.Provider;\n@@ -49,8 +49,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private void registerAlgorithms() {\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            doRegister();\n-            return null;\n-        });\n-    }\n-\n@@ -62,1 +54,1 @@\n-    private void doRegister() {\n+    private void registerAlgorithms() {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SunJSSE.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -52,2 +49,0 @@\n-    @SuppressWarnings(\"removal\")\n-    final AccessControlContext      acc;\n@@ -137,1 +132,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -157,1 +151,0 @@\n-        this.acc = AccessController.getContext();\n@@ -680,3 +673,2 @@\n-        @SuppressWarnings(\"removal\")\n-        private final Set<Map.Entry<HandshakeCompletedListener,\n-                AccessControlContext>> targets;         \/\/ who gets notified\n+        private final Set<HandshakeCompletedListener>\n+                                       targets;         \/\/ who gets notified\n@@ -686,2 +678,1 @@\n-                @SuppressWarnings(\"removal\")\n-                Map<HandshakeCompletedListener,AccessControlContext> listeners,\n+                Set<HandshakeCompletedListener> listeners,\n@@ -689,1 +680,1 @@\n-            this.targets = new HashSet<>(listeners.entrySet());     \/\/ clone\n+            this.targets = new HashSet<>(listeners);     \/\/ clone\n@@ -693,1 +684,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -697,11 +687,2 @@\n-            for (Map.Entry<HandshakeCompletedListener,\n-                    AccessControlContext> entry : targets) {\n-                final HandshakeCompletedListener listener = entry.getKey();\n-                AccessControlContext acc = entry.getValue();\n-                AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                    @Override\n-                    public Void run() {\n-                        listener.handshakeCompleted(event);\n-                        return null;\n-                    }\n-                }, acc);\n+            for (HandshakeCompletedListener listener : targets) {\n+                listener.handshakeCompleted(event);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TransportContext.java","additions":6,"deletions":25,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-import java.security.*;\n+import java.security.KeyStore;\n@@ -34,1 +34,0 @@\n-import sun.security.action.*;\n@@ -78,1 +77,1 @@\n-                GetPropertyAction.privilegedGetProperty(\"java.home\") +\n+                System.getProperty(\"java.home\") +\n@@ -125,1 +124,1 @@\n-        @SuppressWarnings({\"removal\",\"Convert2Lambda\"})\n+        @SuppressWarnings(\"Convert2Lambda\")\n@@ -127,42 +126,25 @@\n-             return AccessController.doPrivileged(\n-                    new PrivilegedAction<TrustStoreDescriptor>() {\n-\n-                @Override\n-                public TrustStoreDescriptor run() {\n-                    \/\/ Get the system properties for trust store.\n-                    String storePropName = System.getProperty(\n-                            \"javax.net.ssl.trustStore\", jsseDefaultStore);\n-                    String storePropType = System.getProperty(\n-                            \"javax.net.ssl.trustStoreType\",\n-                            KeyStore.getDefaultType());\n-                    String storePropProvider = System.getProperty(\n-                            \"javax.net.ssl.trustStoreProvider\", \"\");\n-                    String storePropPassword = System.getProperty(\n-                            \"javax.net.ssl.trustStorePassword\", \"\");\n-\n-                    String temporaryName = \"\";\n-                    File temporaryFile = null;\n-                    long temporaryTime = 0L;\n-                    if (!\"NONE\".equals(storePropName)) {\n-                        String[] fileNames =\n-                                new String[] {storePropName, defaultStore};\n-                        for (String fileName : fileNames) {\n-                            File f = new File(fileName);\n-                            if (f.isFile() && f.canRead()) {\n-                                temporaryName = fileName;\n-                                temporaryFile = f;\n-                                temporaryTime = f.lastModified();\n-\n-                                break;\n-                            }\n-\n-                            \/\/ Not break, the file is inaccessible.\n-                            if (SSLLogger.isOn &&\n-                                    SSLLogger.isOn(\"trustmanager\")) {\n-                                SSLLogger.fine(\n-                                        \"Inaccessible trust store: \" +\n-                                        fileName);\n-                            }\n-                        }\n-                    } else {\n-                        temporaryName = storePropName;\n+            \/\/ Get the system properties for trust store.\n+            String storePropName = System.getProperty(\n+                    \"javax.net.ssl.trustStore\", jsseDefaultStore);\n+            String storePropType = System.getProperty(\n+                    \"javax.net.ssl.trustStoreType\",\n+                    KeyStore.getDefaultType());\n+            String storePropProvider = System.getProperty(\n+                    \"javax.net.ssl.trustStoreProvider\", \"\");\n+            String storePropPassword = System.getProperty(\n+                    \"javax.net.ssl.trustStorePassword\", \"\");\n+\n+            String temporaryName = \"\";\n+            File temporaryFile = null;\n+            long temporaryTime = 0L;\n+            if (!\"NONE\".equals(storePropName)) {\n+                String[] fileNames =\n+                        new String[] {storePropName, defaultStore};\n+                for (String fileName : fileNames) {\n+                    File f = new File(fileName);\n+                    if (f.isFile() && f.canRead()) {\n+                        temporaryName = fileName;\n+                        temporaryFile = f;\n+                        temporaryTime = f.lastModified();\n+\n+                        break;\n@@ -171,3 +153,7 @@\n-                    return new TrustStoreDescriptor(\n-                            temporaryName, storePropType, storePropProvider,\n-                            storePropPassword, temporaryFile, temporaryTime);\n+                    \/\/ Not break, the file is inaccessible.\n+                    if (SSLLogger.isOn &&\n+                            SSLLogger.isOn(\"trustmanager\")) {\n+                        SSLLogger.fine(\n+                                \"Inaccessible trust store: \" +\n+                                fileName);\n+                    }\n@@ -175,1 +161,7 @@\n-            });\n+            } else {\n+                temporaryName = storePropName;\n+            }\n+\n+            return new TrustStoreDescriptor(\n+                    temporaryName, storePropType, storePropProvider,\n+                    storePropPassword, temporaryFile, temporaryTime);\n@@ -387,2 +379,2 @@\n-                try (@SuppressWarnings(\"removal\") FileInputStream fis = AccessController.doPrivileged(\n-                        new OpenFileInputStreamAction(descriptor.storeFile))) {\n+                try (FileInputStream fis =\n+                        new FileInputStream(descriptor.storeFile)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TrustStoreManager.java","additions":45,"deletions":53,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -131,2 +130,0 @@\n-     *\n-     * Note use of privileged action. Do NOT make accessible to applications.\n@@ -136,1 +133,1 @@\n-        String b = GetPropertyAction.privilegedGetProperty(propName);\n+        String b = System.getProperty(propName);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/Utilities.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.io.*;\n@@ -77,9 +76,0 @@\n-\n-        File f = new File(System.getProperty(\"test.src\", \".\"), \"Generify.java\");\n-        FileInputStream fis = AccessController.doPrivileged\n-                        (new OpenFileInputStreamAction(f));\n-        if (fis != null) {\n-            System.out.println(\"file test passed\");\n-        } else {\n-            throw new SecurityException(\"file test failed\");\n-        }\n","filename":"test\/jdk\/sun\/security\/action\/Generify.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"}]}