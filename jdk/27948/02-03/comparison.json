{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import static jdk.jpackage.internal.util.function.ThrowingFunction.toFunction;\n@@ -33,0 +34,1 @@\n+import java.nio.file.NoSuchFileException;\n@@ -57,0 +59,1 @@\n+import jdk.jpackage.test.PackageType;\n@@ -211,1 +214,1 @@\n-                            if (!(verifier instanceof DirectoryVerifier)) {\n+                            if (!(verifier instanceof DirectoryVerifier dirVerifier)) {\n@@ -214,3 +217,14 @@\n-                                try (var files = Files.list(verifier.path())) {\n-                                    \/\/ Run the directory verifier if the directory is empty. Otherwise, it just pollutes the test log.\n-                                    return files.findAny().isEmpty();\n+                                try {\n+                                    \/\/ Run the directory verifier if the directory is empty.\n+                                    \/\/ Otherwise, it just pollutes the test log.\n+                                    return isDirectoryEmpty(verifier.path());\n+                                } catch (NoSuchFileException ex) {\n+                                    \/\/ If an MSI contains an empty directory, it will be installed but not created when the MSI is unpacked.\n+                                    \/\/ In the latter the control flow will reach this point.\n+                                    if (dirVerifier.isEmpty()\n+                                            && PackageType.WINDOWS.contains(cmd.packageType())\n+                                            && cmd.isPackageUnpacked(String.format(\n+                                                    \"Expected empty directory [%s] is missing\", verifier.path()))) {\n+                                        return false;\n+                                    }\n+                                    throw new UncheckedIOException(ex);\n@@ -307,0 +321,10 @@\n+    private static boolean isDirectoryEmpty(Path path) throws IOException {\n+        if (Files.exists(path) && !Files.isDirectory(path)) {\n+            throw new IllegalArgumentException();\n+        }\n+\n+        try (var files = Files.list(path)) {\n+            return files.findAny().isEmpty();\n+        }\n+    }\n+\n@@ -339,1 +363,1 @@\n-    private record DirectoryVerifier(Path path, IdentityWrapper<Content> origin) implements PathVerifier {\n+    private record DirectoryVerifier(Path path, boolean isEmpty, IdentityWrapper<Content> origin) implements PathVerifier {\n@@ -346,1 +370,5 @@\n-            TKit.assertDirectoryExists(path);\n+            if (isEmpty) {\n+                TKit.assertDirectoryEmpty(path);\n+            } else {\n+                TKit.assertDirectoryExists(path);\n+            }\n@@ -400,1 +428,3 @@\n-                            return new DirectoryVerifier(dstFile, new IdentityWrapper<>(this));\n+                            return new DirectoryVerifier(dstFile,\n+                                    toFunction(AppContentTest::isDirectoryEmpty).apply(srcFile),\n+                                    new IdentityWrapper<>(this));\n@@ -416,1 +446,1 @@\n-                    verifiers.add(new DirectoryVerifier(cur, new IdentityWrapper<>(this)));\n+                    verifiers.add(new DirectoryVerifier(cur, false, new IdentityWrapper<>(this)));\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":38,"deletions":8,"binary":false,"changes":46,"status":"modified"}]}