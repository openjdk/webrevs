{"files":[{"patch":"@@ -634,1 +634,2 @@\n-        return page;\n+\n+        return FlipPageFormat.flipPage(page);\n@@ -734,1 +735,1 @@\n-                painter.print(pathGraphics, page, pageIndex);\n+                painter.print(pathGraphics, FlipPageFormat.getOriginal(page), pageIndex);\n@@ -761,1 +762,1 @@\n-                PageFormat pageFormat = pageable.getPageFormat(pageIndex);\n+                PageFormat pageFormat = getPageFormat(pageIndex);\n@@ -874,0 +875,71 @@\n+\n+    \/\/ MacOS NSPrintInfo class has one to one correspondence\n+    \/\/ between a paper size and its orientation.\n+    \/\/ NSPrintInfo with paper width less than height\n+    \/\/ has portrait orientation.\n+    \/\/ NSPrintInfo with paper width greater than height\n+    \/\/ has landscape orientation.\n+    \/\/ (w < h) <-> portrait\n+    \/\/ (w > h) <-> landscape\n+    \/\/\n+    \/\/ Java PageFormat class has the following relation with NSPrintInfo:\n+    \/\/ 1. PageFormat:\n+    \/\/      page size: width < height\n+    \/\/      orientation: portrait\n+    \/\/    NSPrintInfo: width < height (portrait orientation)\n+    \/\/ 2. PageFormat:\n+    \/\/      page size: width < height\n+    \/\/      orientation: landscape\n+    \/\/    NSPrintInfo: width > height (landscape orientation)\n+    \/\/\n+    \/\/ FlipPageFormat class establishes correspondence between\n+    \/\/ Java PageFormat class which page width is greater than height\n+    \/\/ with NSPrintInfo in the following way:\n+    \/\/ 3. PageFormat:\n+    \/\/      page size: width > height\n+    \/\/      orientation: portrait\n+    \/\/    FlipPageFormat\n+    \/\/      page size: width < height\n+    \/\/      orientation: landscape\n+    \/\/    NSPrintInfo: width > height (landscape orientation)\n+    \/\/ 4. PageFormat:\n+    \/\/      page size: width > height\n+    \/\/      orientation: landscape\n+    \/\/    FlipPageFormat\n+    \/\/      page size: width < height\n+    \/\/      orientation: portrait\n+    \/\/    NSPrintInfo: width < height (portrait orientation)\n+    \/\/\n+    \/\/ FlipPageFormat preserves the original PageFormat class\n+    \/\/ to pass it to Printable.print(Graphics, PageFormat, int)\n+    \/\/ method overridden by a user.\n+    private static class FlipPageFormat extends PageFormat {\n+\n+        private final PageFormat original;\n+\n+        private FlipPageFormat(PageFormat original) {\n+            this.original = original;\n+            Paper paper = original.getPaper();\n+            Paper copyPaper = this.getPaper();\n+            copyPaper.setSize(paper.getHeight(), paper.getWidth());\n+            copyPaper.setImageableArea(\n+                    paper.getImageableY(), paper.getImageableX(),\n+                    paper.getImageableHeight(), paper.getImageableWidth());\n+            this.setPaper(copyPaper);\n+            this.setOrientation((original.getOrientation() == PageFormat.PORTRAIT)\n+                    ? PageFormat.LANDSCAPE\n+                    : PageFormat.PORTRAIT);\n+        }\n+\n+        private static PageFormat getOriginal(PageFormat page) {\n+            return (page instanceof FlipPageFormat) ? ((FlipPageFormat) page).original : page;\n+        }\n+\n+        private static PageFormat flipPage(PageFormat page) {\n+            if (page == null) {\n+                return null;\n+            }\n+            Paper paper = page.getPaper();\n+            return (paper.getWidth() > paper.getHeight()) ? new FlipPageFormat(page) : page;\n+        }\n+    }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":75,"deletions":3,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -0,0 +1,355 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8295737\n+ * @summary macOS: Print content cut off when width > height with portrait orientation\n+ * @run main\/othervm\/manual PaperA5OrientationTest\n+ *\/\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.font.FontRenderContext;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import java.awt.print.Book;\n+import java.awt.image.BufferedImage;\n+import java.awt.print.Paper;\n+\n+import javax.print.PrintServiceLookup;\n+import javax.print.attribute.Size2DSyntax;\n+import javax.print.attribute.standard.MediaSize;\n+import javax.print.attribute.standard.MediaSizeName;\n+\n+\n+public class PaperA5OrientationTest {\n+\n+    private static final String DESCRIPTION =\n+\n+            \" 1. To run the test it is required to have a virtual PDF printer\" +\n+                    \" or any other printer supporting A4 paper size.\\n\" +\n+                    \" 2. Press Print button to print 4 rectangles.\\n\" +\n+                    \"    - rectangle with paper width is less than height, orientation portrait\\n\" +\n+                    \"    - rectangle with paper width is less than height, orientation landscape\\n\" +\n+                    \"    - rectangle with paper width is greater than height, orientation portrait\\n\" +\n+                    \"    - rectangle with paper width is greater than height, orientation landscape\\n\" +\n+                    \"  Note: PageFormat size returns transformed Paper size according to the set orientation value.\\n\" +\n+                    \" 3. Check that 4 printed rectangles have fully drawn 8 vertical areas labeled from 1 to 8.\\n\" +\n+                    \" 4. If so, press PASS button, otherwise press FAIL button.\\n\";\n+\n+\n+    private static final CountDownLatch testEndedSignal = new CountDownLatch(1);\n+    private static final int testTimeout = 300000;\n+    private static volatile String testFailureMsg;\n+    private static volatile boolean testPassed;\n+    private static volatile boolean testFinished;\n+\n+    private static final double DOC_WIDTH;\n+    private static final double DOC_HEIGHT;\n+\n+    static {\n+        MediaSize isoA4Size = MediaSize.getMediaSizeForName(MediaSizeName.ISO_A4);\n+        float[] size = isoA4Size.getSize(Size2DSyntax.INCH);\n+\n+        DOC_WIDTH = size[0] * 72.0;\n+        DOC_HEIGHT = size[1] * 72.0;\n+    }\n+\n+    private static void paintImage(Graphics2D g, PageFormat page, int pageIndex) {\n+        BufferedImage img = createImage(page, pageIndex);\n+        g.drawImage(img, 0, 0, null);\n+    }\n+\n+    private static void appendToBook(PrinterJob job, Book book, double width, double height, int orientation) {\n+\n+        PageFormat page = job.getPageFormat(null);\n+        page.setOrientation(orientation);\n+        Paper paper = page.getPaper();\n+\n+        paper.setSize(width, height);\n+        paper.setImageableArea(0, 0, width, height);\n+\n+        page.setPaper(paper);\n+        page.setOrientation(orientation);\n+        book.append(new TestPrintable(), page);\n+    }\n+\n+    private static void print(double width, double height) throws PrinterException {\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setPrintService(PrintServiceLookup.lookupDefaultPrintService());\n+\n+        Book book = new Book();\n+        appendToBook(job, book, width, height, PageFormat.PORTRAIT);\n+        appendToBook(job, book, width, height, PageFormat.LANDSCAPE);\n+        appendToBook(job, book, height, width, PageFormat.PORTRAIT);\n+        appendToBook(job, book, height, width, PageFormat.LANDSCAPE);\n+\n+        job.setPageable(book);\n+\n+        if (job.printDialog()) {\n+            job.print();\n+        } else {\n+            throw new RuntimeException(\"Printing was canceled!\");\n+        }\n+    }\n+\n+    private static String getOrientation(int orientation) {\n+        switch (orientation) {\n+            case PageFormat.LANDSCAPE:\n+                return \"LANDSCAPE\";\n+            case PageFormat.PORTRAIT:\n+                return \"PORTRAIT\";\n+            case PageFormat.REVERSE_LANDSCAPE:\n+                return \"REVERSE_LANDSCAPE\";\n+            default:\n+                return \"UNKNOWN\";\n+        }\n+    }\n+\n+    private static BufferedImage createImage(PageFormat page, int pageIndex) {\n+\n+        int w = (int) page.getWidth();\n+        int h = (int) page.getHeight();\n+\n+        int x = 0;\n+        int y = 0;\n+\n+        BufferedImage img = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g = img.createGraphics();\n+\n+        g.setClip(null);\n+\n+        g.setColor(Color.ORANGE);\n+        g.fillRect(x, y, w, h);\n+\n+        g.setColor(Color.BLUE);\n+        g.drawRect(x, y, w, h);\n+        g.drawRect(x + 1, y + 1, w - 2, h - 2);\n+        g.drawLine(x, y, x + w, y + h);\n+        g.drawLine(x, y + h, x + w, y);\n+\n+        g.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));\n+\n+        int N = 8;\n+        int dx = w \/ N;\n+\n+        for (int i = 0; i < N; i++) {\n+            int xx = i * dx + x;\n+            g.setColor(Color.BLUE);\n+            g.drawLine(xx, y, xx, y + h);\n+            g.setColor(Color.BLUE);\n+            g.drawString(\"\" + (i + 1), xx + 3, y + h \/ 2);\n+        }\n+\n+        int NN = 5;\n+        int arrX = x + w \/ 2 - 4;\n+        g.setColor(Color.RED);\n+        for (int i = 0; i < NN; i++) {\n+            g.drawLine(arrX + i, y + h \/ 3, arrX + i, y + 2 * h \/ 3);\n+        }\n+\n+        int r = 7;\n+        g.fillOval(arrX + NN \/ 2 - r, y + h \/ 3 - r - 5, 2 * r, 2 * r);\n+\n+        g.setColor(Color.RED);\n+        g.setFont(g.getFont().deriveFont(Font.BOLD, 16.0f));\n+\n+        int textX = x + w \/ 18;\n+        int textY = y + h \/ 3;\n+        int textDelta = h \/ 16;\n+\n+        Paper paper = page.getPaper();\n+        String paperSize = String.format(\"Paper      size: %dx%d\",\n+                (int) paper.getWidth(), (int) paper.getHeight());\n+        g.drawString(paperSize, textX, textY);\n+\n+        String pageFormatSize = String.format(\"PageFormat size: %dx%d\", w, h);\n+        g.drawString(pageFormatSize, textX, textY + textDelta);\n+\n+        String orientation = String.format(\"Orientation: %s\",\n+                getOrientation(page.getOrientation()));\n+        g.drawString(orientation, textX, textY + 2 * textDelta);\n+\n+        g.setColor(Color.BLACK);\n+        g.setFont(g.getFont().deriveFont(28.0f));\n+        g.drawString(String.format(\"P:%d\", pageIndex + 1), x + w \/ 2, y + 2 * h \/ 3);\n+\n+        g.dispose();\n+        return img;\n+    }\n+\n+    private static class TestPrintable implements Printable {\n+\n+        @Override\n+        public int print(Graphics graphics, PageFormat pageFormat, int index) {\n+            paintImage((Graphics2D) graphics, pageFormat, index);\n+            return PAGE_EXISTS;\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        SwingUtilities.invokeLater(() -> createAndShowTestDialog());\n+\n+        try {\n+            if (!testEndedSignal.await(testTimeout, TimeUnit.MILLISECONDS)) {\n+                throw new RuntimeException(String.format(\n+                        \"Test timeout '%d ms' elapsed.\", testTimeout));\n+            }\n+            if (!testPassed) {\n+                String failureMsg = testFailureMsg;\n+                if ((failureMsg != null) && (!failureMsg.trim().isEmpty())) {\n+                    throw new RuntimeException(failureMsg);\n+                } else {\n+                    throw new RuntimeException(\"Test failed.\");\n+                }\n+            }\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(ie);\n+        } finally {\n+            testFinished = true;\n+        }\n+    }\n+\n+    private static void pass() {\n+        testPassed = true;\n+        testEndedSignal.countDown();\n+    }\n+\n+    private static void fail(String failureMsg) {\n+        testFailureMsg = failureMsg;\n+        testPassed = false;\n+        testEndedSignal.countDown();\n+    }\n+\n+    private static String convertMillisToTimeStr(int millis) {\n+        if (millis < 0) {\n+            return \"00:00:00\";\n+        }\n+        int hours = millis \/ 3600000;\n+        int minutes = (millis - hours * 3600000) \/ 60000;\n+        int seconds = (millis - hours * 3600000 - minutes * 60000) \/ 1000;\n+        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n+    }\n+\n+    private static void createAndShowTestDialog() {\n+\n+        final JDialog dialog = new JDialog();\n+        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                dialog.dispose();\n+                fail(\"Main dialog was closed.\");\n+            }\n+        });\n+\n+        final JLabel testTimeoutLabel = new JLabel(String.format(\n+                \"Test timeout: %s\", convertMillisToTimeStr(testTimeout)));\n+        final long startTime = System.currentTimeMillis();\n+        final Timer timer = new Timer(0, null);\n+        timer.setDelay(1000);\n+        timer.addActionListener((e) -> {\n+            int leftTime = testTimeout - (int) (System.currentTimeMillis() - startTime);\n+            if ((leftTime < 0) || testFinished) {\n+                timer.stop();\n+                dialog.dispose();\n+            }\n+            testTimeoutLabel.setText(String.format(\n+                    \"Test timeout: %s\", convertMillisToTimeStr(leftTime)));\n+        });\n+        timer.start();\n+\n+        JTextArea textArea = new JTextArea(DESCRIPTION);\n+        textArea.setEditable(false);\n+\n+        final JButton testButton = new JButton(\"Print\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        final JButton failButton = new JButton(\"FAIL\");\n+\n+        testButton.addActionListener((e) -> {\n+            testButton.setEnabled(false);\n+            new Thread(() -> {\n+                try {\n+                    doTest();\n+\n+                    SwingUtilities.invokeLater(() -> {\n+                        passButton.setEnabled(true);\n+                        failButton.setEnabled(true);\n+                    });\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                    dialog.dispose();\n+                    fail(\"Exception occurred in a thread executing the test.\");\n+                }\n+            }).start();\n+        });\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            pass();\n+        });\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            fail(\"TitledBorder label is cut off\");\n+        });\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+\n+        JPanel labelPanel = new JPanel(new FlowLayout());\n+        labelPanel.add(testTimeoutLabel);\n+        mainPanel.add(labelPanel, BorderLayout.NORTH);\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(testButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+\n+        dialog.pack();\n+        dialog.setVisible(true);\n+    }\n+\n+    private static void doTest() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                print(DOC_WIDTH, DOC_HEIGHT);\n+            } catch (PrinterException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PageFormat\/PaperA5OrientationTest.java","additions":355,"deletions":0,"binary":false,"changes":355,"status":"added"}]}