{"files":[{"patch":"@@ -755,0 +755,1 @@\n+  template(decodeAndThrowThrowable_signature,          \"(JZ)V\")                                                   \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -395,1 +395,1 @@\n-                                buffer);\n+                                buffer, false);\n@@ -417,0 +417,1 @@\n+    jargs.push_int(true);\n@@ -421,1 +422,1 @@\n-                            vmSymbols::long_void_signature(), &jargs, THREAD);\n+                            vmSymbols::decodeAndThrowThrowable_signature(), &jargs, THREAD);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-    jvmci_method(CallStaticVoidMethod, GetStaticMethodID, call_static, void, VMSupport, decodeAndThrowThrowable, long_void_signature, (jlong buffer)) \\\n+    jvmci_method(CallStaticVoidMethod, GetStaticMethodID, call_static, void, VMSupport, decodeAndThrowThrowable, decodeAndThrowThrowable_signature, (jlong buffer)) \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-     * Decodes the exception encoded in {@code buffer} and throws it.\n+     * Decodes the exception encoded in {@code errorOrBuffer} and throws it.\n@@ -118,1 +118,9 @@\n-     * @param buffer a native byte buffer containing an exception encoded by\n+     * @param errorOrBuffer an error code or a native byte errorOrBuffer containing an exception encoded by\n+     *            {@link #encodeThrowable}. Error code values and their meanings are:\n+     *\n+     *            <pre>\n+     *             0: native memory for the errorOrBuffer could not be allocated\n+     *            -1: an OutOfMemoryError was thrown while encoding the exception\n+     *            -2: some other throwable was thrown while encoding the exception\n+     *            <\/pre>\n+     * @param errorOrBuffer a native byte errorOrBuffer containing an exception encoded by\n@@ -120,0 +128,1 @@\n+     * @param inJVMHeap [@code true} if executing in the JVM heap, {@code false} otherwise\n@@ -121,2 +130,13 @@\n-    public static void decodeAndThrowThrowable(long buffer) throws Throwable {\n-        int encodingLength = U.getInt(buffer);\n+    public static void decodeAndThrowThrowable(long errorOrBuffer, boolean inJVMHeap) throws Throwable {\n+        if (errorOrBuffer >= -2L && errorOrBuffer <= 0) {\n+            String context = String.format(\"while encoding an exception to translate it %s the JVM heap\",\n+                    inJVMHeap ? \"to\" : \"from\");\n+            if (errorOrBuffer == 0) {\n+                throw new InternalError(\"native errorOrBuffer could not be allocated \" + context);\n+            }\n+            if (errorOrBuffer == -1L) {\n+                throw new OutOfMemoryError(\"OutOfMemoryError occurred \" + context);\n+            }\n+            throw new InternalError(\"unexpected problem occurred \" + context);\n+        }\n+        int encodingLength = U.getInt(errorOrBuffer);\n@@ -124,1 +144,1 @@\n-        U.copyMemory(null, buffer + 4, encoding, Unsafe.ARRAY_BYTE_BASE_OFFSET, encodingLength);\n+        U.copyMemory(null, errorOrBuffer + 4, encoding, Unsafe.ARRAY_BYTE_BASE_OFFSET, encodingLength);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/VMSupport.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-                        VMSupport.decodeAndThrowThrowable(buffer);\n+                        VMSupport.decodeAndThrowThrowable(buffer, true);\n","filename":"test\/jdk\/jdk\/internal\/vm\/TestTranslatedException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}