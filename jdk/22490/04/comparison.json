{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,4 +24,0 @@\n-import java.awt.*;\n-import java.awt.datatransfer.*;\n-import java.awt.event.*;\n-import java.util.Properties;\n@@ -32,0 +28,1 @@\n+ * @requires (os.family == \"linux\")\n@@ -33,2 +30,0 @@\n- * @author Jitender(jitender.singh@eng.sun.com) area=AWT\n- * @author dmitriy.ermashov@oracle.com\n@@ -40,1 +35,17 @@\n-public class IndependenceAWTTest {\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.HeadlessException;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.TextField;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n@@ -42,4 +53,10 @@\n-    Frame frame;\n-    Panel panel;\n-    TextField tf1, tf2, tf3;\n-    Clipboard sClip, pClip;\n+public class IndependenceAWTTest {\n+    private static Frame frame;\n+    private static TextField tf1;\n+    private static TextField tf2;\n+    private static TextField tf3;\n+    private static Clipboard systemClip;\n+    private static Clipboard primaryClip;\n+    private static ExtendedRobot robot;\n+    private static volatile Point ttf1Center;\n+    private static volatile Point glideStartLocation;\n@@ -48,1 +65,9 @@\n-        new IndependenceAWTTest().doTest();\n+        try {\n+            robot = new ExtendedRobot();\n+            EventQueue.invokeAndWait(IndependenceAWTTest::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(frame::dispose);\n+        }\n@@ -51,3 +76,2 @@\n-    public IndependenceAWTTest() {\n-\n-        frame = new Frame();\n+    private static void createAndShowUI() {\n+        frame = new Frame(\"IndependenceAWTTest\");\n@@ -60,1 +84,1 @@\n-                tf1.setText(\"Clipboards_Independance_Testing\");\n+                tf1.setText(\"Clipboards_Independence_Testing\");\n@@ -68,1 +92,1 @@\n-        panel = new Panel();\n+        Panel panel = new Panel();\n@@ -76,0 +100,1 @@\n+        frame.setLocationRelativeTo(null);\n@@ -82,3 +107,1 @@\n-    private void getPrimaryClipboard() {\n-        Properties ps = System.getProperties();\n-        String operSys = ps.getProperty(\"os.name\");\n+    private static void getPrimaryClipboard() {\n@@ -86,7 +109,6 @@\n-            pClip = Toolkit.getDefaultToolkit().getSystemSelection();\n-            if (pClip == null)\n-                if ((operSys.substring(0,3)).equalsIgnoreCase(\"Win\") || operSys.toLowerCase().contains(\"os x\"))\n-                    System.out.println(operSys + \"Operating system does not support system selection \");\n-                else\n-                    throw new RuntimeException(\"Method getSystemSelection() is returning null on X11 platform\");\n-        } catch(HeadlessException e) {\n+            primaryClip = Toolkit.getDefaultToolkit().getSystemSelection();\n+            if (primaryClip == null) {\n+                throw new RuntimeException(\"Method getSystemSelection() is returning null\"\n+                                           + \" on Linux platform\");\n+            }\n+        } catch (HeadlessException e) {\n@@ -98,2 +120,2 @@\n-    public void getClipboardsContent() throws Exception {\n-        sClip = Toolkit.getDefaultToolkit().getSystemClipboard();\n+    private static void getClipboardsContent() throws Exception {\n+        systemClip = Toolkit.getDefaultToolkit().getSystemClipboard();\n@@ -104,1 +126,1 @@\n-        sClip.setContents(content,content);\n+        systemClip.setContents(content, content);\n@@ -106,2 +128,2 @@\n-        tp = pClip.getContents(this);\n-        ts = sClip.getContents(this);\n+        tp = primaryClip.getContents(null);\n+        ts = systemClip.getContents(null);\n@@ -125,1 +147,1 @@\n-    public void compareText (boolean mustEqual) {\n+    private static void compareText (boolean mustEqual) {\n@@ -139,1 +161,1 @@\n-    public void doTest() throws Exception {\n+    private static void test() throws Exception {\n@@ -141,33 +163,32 @@\n-        ExtendedRobot robot = new ExtendedRobot();\n-        robot.waitForIdle(1000);\n-        frame.setLocation(100, 100);\n-        robot.waitForIdle(1000);\n-\n-        if (pClip != null) {\n-            Point ttf1Center = tf1.getLocationOnScreen();\n-            ttf1Center.translate(tf1.getWidth()\/2, tf1.getHeight()\/2);\n-\n-            robot.glide(new Point(0, 0), ttf1Center);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.waitForIdle(20);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.waitForIdle(20);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.waitForIdle(20);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.waitForIdle(2000);\n-\n-            getClipboardsContent();\n-            compareText(true);\n-\n-            \/\/Change the text selection to update the contents of primary clipboard\n-            robot.mouseMove(ttf1Center);\n-            robot.mousePress(MouseEvent.BUTTON1_MASK);\n-            robot.delay(200);\n-            robot.mouseMove(ttf1Center.x + 15, ttf1Center.y);\n-            robot.mouseRelease(MouseEvent.BUTTON1_MASK);\n-            robot.waitForIdle(2000);\n-\n-            getClipboardsContent();\n-            compareText(false);\n-        }\n+        robot.waitForIdle(500);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            Point center = tf1.getLocationOnScreen();\n+            center.translate(tf1.getWidth() \/ 2, tf1.getHeight() \/ 2);\n+            ttf1Center = center;\n+\n+            glideStartLocation = frame.getLocationOnScreen();\n+            glideStartLocation.x -= 10;\n+        });\n+\n+        robot.glide(glideStartLocation, ttf1Center);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle(20);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle(500);\n+\n+        getClipboardsContent();\n+        compareText(true);\n+\n+        \/\/Change the text selection to update the contents of primary clipboard\n+        robot.mouseMove(ttf1Center);\n+        robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(20);\n+        robot.mouseMove(ttf1Center.x + 15, ttf1Center.y);\n+        robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle(500);\n+\n+        getClipboardsContent();\n+        compareText(false);\n","filename":"test\/jdk\/java\/awt\/datatransfer\/Independence\/IndependenceAWTTest.java","additions":89,"deletions":68,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,15 @@\n-import javax.swing.*;\n-import java.awt.*;\n+\/*\n+ * @test\n+ * @key headful\n+ * @requires (os.family == \"linux\")\n+ * @summary To make sure that System & Primary clipboards should behave independently\n+ * @library \/lib\/client\n+ * @build ExtendedRobot\n+ * @run main IndependenceSwingTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.HeadlessException;\n+import java.awt.Point;\n+import java.awt.Toolkit;\n@@ -34,1 +47,0 @@\n-import java.util.Properties;\n@@ -36,10 +48,4 @@\n-\/*\n- * @test\n- * @key headful\n- * @summary To make sure that System & Primary clipboards should behave independently\n- * @author Jitender(jitender.singh@eng.sun.com) area=AWT\n- * @author dmitriy.ermashov@oracle.com\n- * @library \/lib\/client\n- * @build ExtendedRobot\n- * @run main IndependenceSwingTest\n- *\/\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n@@ -48,5 +54,9 @@\n-\n-    JFrame frame;\n-    JPanel panel;\n-    JTextField tf1, tf2, tf3;\n-    Clipboard sClip, pClip;\n+    private static JFrame frame;\n+    private static JTextField tf1;\n+    private static JTextField tf2;\n+    private static JTextField tf3;\n+    private static Clipboard systemClip;\n+    private static Clipboard primaryClip;\n+    private static ExtendedRobot robot;\n+    private static volatile Point ttf1Center;\n+    private static volatile Point glideStartLocation;\n@@ -55,1 +65,9 @@\n-        new IndependenceSwingTest().doTest();\n+        try {\n+            robot = new ExtendedRobot();\n+            SwingUtilities.invokeAndWait(IndependenceSwingTest::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            test();\n+        } finally {\n+            SwingUtilities.invokeAndWait(frame::dispose);\n+        }\n@@ -58,3 +76,2 @@\n-    public IndependenceSwingTest() {\n-\n-        frame = new JFrame();\n+    private static void createAndShowUI() {\n+        frame = new JFrame(\"IndependenceSwingTest\");\n@@ -67,1 +84,1 @@\n-                tf1.setText(\"Clipboards_Independance_Testing\");\n+                tf1.setText(\"Clipboards_Independence_Testing\");\n@@ -75,1 +92,1 @@\n-        panel = new JPanel();\n+        JPanel panel = new JPanel();\n@@ -83,0 +100,1 @@\n+        frame.setLocationRelativeTo(null);\n@@ -89,3 +107,1 @@\n-    private void getPrimaryClipboard() {\n-        Properties ps = System.getProperties();\n-        String operSys = ps.getProperty(\"os.name\");\n+    private static void getPrimaryClipboard() {\n@@ -93,7 +109,6 @@\n-            pClip = Toolkit.getDefaultToolkit().getSystemSelection();\n-            if (pClip == null)\n-                if ((operSys.substring(0,3)).equalsIgnoreCase(\"Win\") || operSys.toLowerCase().contains(\"os x\"))\n-                    System.out.println(operSys + \"Operating system does not support system selection \");\n-                else\n-                    throw new RuntimeException(\"Method getSystemSelection() is returning null on X11 platform\");\n-        } catch(HeadlessException e) {\n+            primaryClip = Toolkit.getDefaultToolkit().getSystemSelection();\n+            if (primaryClip == null) {\n+                throw new RuntimeException(\"Method getSystemSelection() is returning null\"\n+                                           + \" on Linux platform\");\n+            }\n+        } catch (HeadlessException e) {\n@@ -105,2 +120,2 @@\n-    public void getClipboardsContent() throws Exception {\n-        sClip = Toolkit.getDefaultToolkit().getSystemClipboard();\n+    private static void getClipboardsContent() throws Exception {\n+        systemClip = Toolkit.getDefaultToolkit().getSystemClipboard();\n@@ -111,1 +126,1 @@\n-        sClip.setContents(content,content);\n+        systemClip.setContents(content, content);\n@@ -113,2 +128,2 @@\n-        tp = pClip.getContents(this);\n-        ts = sClip.getContents(this);\n+        tp = primaryClip.getContents(null);\n+        ts = systemClip.getContents(null);\n@@ -132,1 +147,1 @@\n-    public void compareText (boolean mustEqual) {\n+    private static void compareText (boolean mustEqual) {\n@@ -146,1 +161,1 @@\n-    public void doTest() throws Exception {\n+    private static void test() throws Exception {\n@@ -148,33 +163,32 @@\n-        ExtendedRobot robot = new ExtendedRobot();\n-        robot.waitForIdle(1000);\n-        frame.setLocation(100, 100);\n-        robot.waitForIdle(1000);\n-\n-        if (pClip != null) {\n-            Point ttf1Center = tf1.getLocationOnScreen();\n-            ttf1Center.translate(tf1.getWidth()\/2, tf1.getHeight()\/2);\n-\n-            robot.glide(new Point(0, 0), ttf1Center);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.waitForIdle(20);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.waitForIdle(20);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.waitForIdle(20);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.waitForIdle(2000);\n-\n-            getClipboardsContent();\n-            compareText(true);\n-\n-            \/\/Change the text selection to update the contents of primary clipboard\n-            robot.mouseMove(ttf1Center);\n-            robot.mousePress(MouseEvent.BUTTON1_MASK);\n-            robot.delay(200);\n-            robot.mouseMove(ttf1Center.x + 15, ttf1Center.y);\n-            robot.mouseRelease(MouseEvent.BUTTON1_MASK);\n-            robot.waitForIdle(2000);\n-\n-            getClipboardsContent();\n-            compareText(false);\n-        }\n+        robot.waitForIdle(500);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            Point center = tf1.getLocationOnScreen();\n+            center.translate(tf1.getWidth() \/ 2, tf1.getHeight() \/ 2);\n+            ttf1Center = center;\n+\n+            glideStartLocation = frame.getLocationOnScreen();\n+            glideStartLocation.x -= 10;\n+        });\n+\n+        robot.glide(glideStartLocation, ttf1Center);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle(20);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle(500);\n+\n+        getClipboardsContent();\n+        compareText(true);\n+\n+        \/\/Change the text selection to update the contents of primary clipboard\n+        robot.mouseMove(ttf1Center);\n+        robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(20);\n+        robot.mouseMove(ttf1Center.x + 15, ttf1Center.y);\n+        robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+        robot.waitForIdle(500);\n+\n+        getClipboardsContent();\n+        compareText(false);\n","filename":"test\/jdk\/java\/awt\/datatransfer\/Independence\/IndependenceSwingTest.java","additions":89,"deletions":75,"binary":false,"changes":164,"status":"modified"}]}