{"files":[{"patch":"@@ -43,4 +43,4 @@\n-        \"clzCompareInt\", \"clzDiv8Int\",\n-        \"clzCompareLong\", \"clzDiv8Long\",\n-        \"ctzCompareInt\", \"ctzDiv8Int\",\n-        \"ctzCompareLong\", \"ctzDiv8Long\",\n+        \"clzConstInt\", \"clzCompareInt\", \"clzDiv8Int\",\n+        \"clzConstLong\", \"clzCompareLong\", \"clzDiv8Long\",\n+        \"ctzConstInt\", \"ctzCompareInt\", \"ctzDiv8Int\",\n+        \"ctzConstLong\", \"ctzCompareLong\", \"ctzDiv8Long\",\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestCountBitsRange.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2025 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(value = 3)\n+@Warmup(iterations = 10, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@State(Scope.Thread)\n+public class CountLeadingZeros {\n+    private long[] longArray = new long[1000];\n+\n+    @Setup\n+    public void setup() {\n+        for (int i = 0; i < longArray.length; i++) {\n+            longArray[i] = ThreadLocalRandom.current().nextLong();\n+        }\n+    }\n+\n+    @Benchmark\n+    public int benchNumberOfNibbles() {\n+        int sum = 0;\n+        for (long l : longArray) {\n+            sum += numberOfNibbles((int) l);\n+        }\n+        return sum;\n+    }\n+\n+    public static int numberOfNibbles(int i) {\n+        int mag = Integer.SIZE - Integer.numberOfLeadingZeros(i);\n+        return Math.max((mag + 3) \/ 4, 1);\n+    }\n+\n+    @Benchmark\n+    public int benchClzLongConstrained() {\n+        int sum = 0;\n+        for (long l : longArray) {\n+            sum += clzLongConstrained(l);\n+        }\n+        return sum;\n+    }\n+\n+    public static int clzLongConstrained(long param) {\n+        long constrainedParam = Math.min(175, Math.max(param, 160));\n+        return Long.numberOfLeadingZeros(constrainedParam);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/CountLeadingZeros.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}