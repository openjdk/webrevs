{"files":[{"patch":"@@ -49,1 +49,1 @@\n-  return TypeInt::INT;\n+  return TypeInt::make(0, sizeof(jint) * BitsPerByte, Type::WidenMax);\n@@ -72,1 +72,1 @@\n-  return TypeInt::INT;\n+  return TypeInt::make(0, sizeof(jlong) * BitsPerByte, Type::WidenMax);\n@@ -94,1 +94,1 @@\n-  return TypeInt::INT;\n+  return TypeInt::make(0, sizeof(jint) * BitsPerByte, Type::WidenMax);\n@@ -117,1 +117,1 @@\n-  return TypeInt::INT;\n+  return TypeInt::make(0, sizeof(jlong) * BitsPerByte, Type::WidenMax);\n","filename":"src\/hotspot\/share\/opto\/countbitsnode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2025 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8360192\n+ * @summary Tests that count bits nodes are handled correctly.\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.c2.irTests.TestCountBitsRange\n+ *\/\n+public class TestCountBitsRange {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    static int i = RunInfo.getRandom().nextInt();\n+    static long l = RunInfo.getRandom().nextLong();\n+\n+    @Test\n+    @IR(failOn = IRNode.COUNT_LEADING_ZEROS_I)\n+    public boolean clzCompareInt() {\n+        return Integer.numberOfLeadingZeros(i) < 0 || Integer.numberOfLeadingZeros(i) > 32;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COUNT_LEADING_ZEROS_I, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int clzDiv8Int() {\n+        return Integer.numberOfLeadingZeros(i) \/ 8;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.COUNT_LEADING_ZEROS_L)\n+    public boolean clzCompareLong() {\n+        return Long.numberOfLeadingZeros(l) < 0 || Long.numberOfLeadingZeros(l) > 64;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COUNT_LEADING_ZEROS_L, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int clzDiv8Long() {\n+        return Long.numberOfLeadingZeros(l) \/ 8;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.COUNT_TRAILING_ZEROS_I)\n+    public boolean ctzCompareInt() {\n+        return Integer.numberOfTrailingZeros(i) < 0 || Integer.numberOfTrailingZeros(i) > 32;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COUNT_TRAILING_ZEROS_I, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int ctzDiv8Int() {\n+        return Integer.numberOfTrailingZeros(i) \/ 8;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.COUNT_TRAILING_ZEROS_L)\n+    public boolean ctzCompareLong() {\n+        return Long.numberOfTrailingZeros(l) < 0 || Long.numberOfTrailingZeros(l) > 64;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COUNT_TRAILING_ZEROS_L, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int ctzDiv8Long() {\n+        return Long.numberOfTrailingZeros(l) \/ 8;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestCountBitsRange.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -1610,0 +1610,10 @@\n+    public static final String COUNT_TRAILING_ZEROS_I = PREFIX + \"COUNT_TRAILING_ZEROS_I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_TRAILING_ZEROS_I, \"CountTrailingZerosI\");\n+    }\n+\n+    public static final String COUNT_TRAILING_ZEROS_L = PREFIX + \"COUNT_TRAILING_ZEROS_L\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_TRAILING_ZEROS_L, \"CountTrailingZerosL\");\n+    }\n+\n@@ -1620,0 +1630,10 @@\n+    public static final String COUNT_LEADING_ZEROS_I = PREFIX + \"COUNT_LEADING_ZEROS_I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_LEADING_ZEROS_I, \"CountLeadingZerosI\");\n+    }\n+\n+    public static final String COUNT_LEADING_ZEROS_L = PREFIX + \"COUNT_LEADING_ZEROS_L\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_LEADING_ZEROS_L, \"CountLeadingZerosL\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}