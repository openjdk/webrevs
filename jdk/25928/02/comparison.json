{"files":[{"patch":"@@ -29,0 +29,18 @@\n+#include \"utilities\/count_leading_zeros.hpp\"\n+#include \"utilities\/count_trailing_zeros.hpp\"\n+\n+static int count_leading_zeros_int(jint i) {\n+  return i == 0 ? BitsPerInt : count_leading_zeros(i);\n+}\n+\n+static int count_leading_zeros_long(jlong l) {\n+  return l == 0 ? BitsPerLong : count_leading_zeros(l);\n+}\n+\n+static int count_trailing_zeros_int(jint i) {\n+  return i == 0 ? BitsPerInt : count_trailing_zeros(i);\n+}\n+\n+static int count_trailing_zeros_long(jlong l) {\n+  return l == 0 ? BitsPerLong : count_trailing_zeros(l);\n+}\n@@ -35,13 +53,7 @@\n-  if (ti && ti->is_con()) {\n-    jint i = ti->get_con();\n-    \/\/ HD, Figure 5-6\n-    if (i == 0)\n-    return TypeInt::make(BitsPerInt);\n-    int n = 1;\n-    unsigned int x = i;\n-    if (x >> 16 == 0) { n += 16; x <<= 16; }\n-    if (x >> 24 == 0) { n +=  8; x <<=  8; }\n-    if (x >> 28 == 0) { n +=  4; x <<=  4; }\n-    if (x >> 30 == 0) { n +=  2; x <<=  2; }\n-    n -= x >> 31;\n-    return TypeInt::make(n);\n+  if (ti) {\n+    if (ti->is_con()) {\n+      return TypeInt::make(count_leading_zeros_int(ti->get_con()));\n+    }\n+    return TypeInt::make(count_leading_zeros_int(~ti->_bits._zeros),\n+                         count_leading_zeros_int(ti->_bits._ones),\n+                         ti->_widen);\n@@ -57,14 +69,7 @@\n-  if (tl && tl->is_con()) {\n-    jlong l = tl->get_con();\n-    \/\/ HD, Figure 5-6\n-    if (l == 0)\n-    return TypeInt::make(BitsPerLong);\n-    int n = 1;\n-    unsigned int x = (((julong) l) >> 32);\n-    if (x == 0) { n += 32; x = (int) l; }\n-    if (x >> 16 == 0) { n += 16; x <<= 16; }\n-    if (x >> 24 == 0) { n +=  8; x <<=  8; }\n-    if (x >> 28 == 0) { n +=  4; x <<=  4; }\n-    if (x >> 30 == 0) { n +=  2; x <<=  2; }\n-    n -= x >> 31;\n-    return TypeInt::make(n);\n+  if (tl) {\n+    if (tl->is_con()) {\n+      return TypeInt::make(count_leading_zeros_long(tl->get_con()));\n+    }\n+    return TypeInt::make(count_leading_zeros_long(~tl->_bits._zeros),\n+                         count_leading_zeros_long(tl->_bits._ones),\n+                         tl->_widen);\n@@ -80,13 +85,7 @@\n-  if (ti && ti->is_con()) {\n-    jint i = ti->get_con();\n-    \/\/ HD, Figure 5-14\n-    int y;\n-    if (i == 0)\n-    return TypeInt::make(BitsPerInt);\n-    int n = 31;\n-    y = i << 16; if (y != 0) { n = n - 16; i = y; }\n-    y = i <<  8; if (y != 0) { n = n -  8; i = y; }\n-    y = i <<  4; if (y != 0) { n = n -  4; i = y; }\n-    y = i <<  2; if (y != 0) { n = n -  2; i = y; }\n-    y = i <<  1; if (y != 0) { n = n -  1; }\n-    return TypeInt::make(n);\n+  if (ti) {\n+    if (ti->is_con()) {\n+      return TypeInt::make(count_trailing_zeros_int(ti->get_con()));\n+    }\n+    return TypeInt::make(count_trailing_zeros_int(~ti->_bits._zeros),\n+                         count_trailing_zeros_int(ti->_bits._ones),\n+                         ti->_widen);\n@@ -102,14 +101,7 @@\n-  if (tl && tl->is_con()) {\n-    jlong l = tl->get_con();\n-    \/\/ HD, Figure 5-14\n-    int x, y;\n-    if (l == 0)\n-    return TypeInt::make(BitsPerLong);\n-    int n = 63;\n-    y = (int) l; if (y != 0) { n = n - 32; x = y; } else x = (((julong) l) >> 32);\n-    y = x << 16; if (y != 0) { n = n - 16; x = y; }\n-    y = x <<  8; if (y != 0) { n = n -  8; x = y; }\n-    y = x <<  4; if (y != 0) { n = n -  4; x = y; }\n-    y = x <<  2; if (y != 0) { n = n -  2; x = y; }\n-    y = x <<  1; if (y != 0) { n = n -  1; }\n-    return TypeInt::make(n);\n+  if (tl) {\n+    if (tl->is_con()) {\n+      return TypeInt::make(count_trailing_zeros_long(tl->get_con()));\n+    }\n+    return TypeInt::make(count_trailing_zeros_long(~tl->_bits._zeros),\n+                         count_trailing_zeros_long(tl->_bits._ones),\n+                         tl->_widen);\n","filename":"src\/hotspot\/share\/opto\/countbitsnode.cpp","additions":46,"deletions":54,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2025 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8360192\n+ * @summary Tests that count bits nodes are handled correctly.\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.c2.irTests.TestCountBitsRange\n+ *\/\n+public class TestCountBitsRange {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    static int i = RunInfo.getRandom().nextInt();\n+    static long l = RunInfo.getRandom().nextLong();\n+\n+    @Test\n+    @IR(failOn = IRNode.COUNT_LEADING_ZEROS_I)\n+    public boolean clzCompareInt() {\n+        return Integer.numberOfLeadingZeros(i) < 0 || Integer.numberOfLeadingZeros(i) > 32;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COUNT_LEADING_ZEROS_I, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int clzDiv8Int() {\n+        return Integer.numberOfLeadingZeros(i) \/ 8;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.COUNT_LEADING_ZEROS_L)\n+    public boolean clzCompareLong() {\n+        return Long.numberOfLeadingZeros(l) < 0 || Long.numberOfLeadingZeros(l) > 64;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COUNT_LEADING_ZEROS_L, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int clzDiv8Long() {\n+        return Long.numberOfLeadingZeros(l) \/ 8;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.COUNT_TRAILING_ZEROS_I)\n+    public boolean ctzCompareInt() {\n+        return Integer.numberOfTrailingZeros(i) < 0 || Integer.numberOfTrailingZeros(i) > 32;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COUNT_TRAILING_ZEROS_I, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int ctzDiv8Int() {\n+        return Integer.numberOfTrailingZeros(i) \/ 8;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.COUNT_TRAILING_ZEROS_L)\n+    public boolean ctzCompareLong() {\n+        return Long.numberOfTrailingZeros(l) < 0 || Long.numberOfTrailingZeros(l) > 64;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.COUNT_TRAILING_ZEROS_L, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int ctzDiv8Long() {\n+        return Long.numberOfTrailingZeros(l) \/ 8;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestCountBitsRange.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -1610,0 +1610,10 @@\n+    public static final String COUNT_TRAILING_ZEROS_I = PREFIX + \"COUNT_TRAILING_ZEROS_I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_TRAILING_ZEROS_I, \"CountTrailingZerosI\");\n+    }\n+\n+    public static final String COUNT_TRAILING_ZEROS_L = PREFIX + \"COUNT_TRAILING_ZEROS_L\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_TRAILING_ZEROS_L, \"CountTrailingZerosL\");\n+    }\n+\n@@ -1620,0 +1630,10 @@\n+    public static final String COUNT_LEADING_ZEROS_I = PREFIX + \"COUNT_LEADING_ZEROS_I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_LEADING_ZEROS_I, \"CountLeadingZerosI\");\n+    }\n+\n+    public static final String COUNT_LEADING_ZEROS_L = PREFIX + \"COUNT_LEADING_ZEROS_L\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_LEADING_ZEROS_L, \"CountLeadingZerosL\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}