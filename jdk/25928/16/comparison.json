{"files":[{"patch":"@@ -29,0 +29,2 @@\n+#include \"utilities\/count_leading_zeros.hpp\"\n+#include \"utilities\/count_trailing_zeros.hpp\"\n@@ -31,0 +33,16 @@\n+static int count_leading_zeros_int(jint i) {\n+  return i == 0 ? BitsPerInt : count_leading_zeros(i);\n+}\n+\n+static int count_leading_zeros_long(jlong l) {\n+  return l == 0 ? BitsPerLong : count_leading_zeros(l);\n+}\n+\n+static int count_trailing_zeros_int(jint i) {\n+  return i == 0 ? BitsPerInt : count_trailing_zeros(i);\n+}\n+\n+static int count_trailing_zeros_long(jlong l) {\n+  return l == 0 ? BitsPerLong : count_trailing_zeros(l);\n+}\n+\n@@ -34,15 +52,2 @@\n-  if (t == Type::TOP) return Type::TOP;\n-  const TypeInt* ti = t->isa_int();\n-  if (ti && ti->is_con()) {\n-    jint i = ti->get_con();\n-    \/\/ HD, Figure 5-6\n-    if (i == 0)\n-    return TypeInt::make(BitsPerInt);\n-    int n = 1;\n-    unsigned int x = i;\n-    if (x >> 16 == 0) { n += 16; x <<= 16; }\n-    if (x >> 24 == 0) { n +=  8; x <<=  8; }\n-    if (x >> 28 == 0) { n +=  4; x <<=  4; }\n-    if (x >> 30 == 0) { n +=  2; x <<=  2; }\n-    n -= x >> 31;\n-    return TypeInt::make(n);\n+  if (t == Type::TOP) {\n+    return Type::TOP;\n@@ -50,1 +55,21 @@\n-  return TypeInt::INT;\n+\n+  \/\/ To minimize `count_leading_zeros(x)`, we should make the highest 1 bit in x\n+  \/\/ as far to the left as possible. A bit in x can be 1 iff this bit is not\n+  \/\/ forced to be 0, i.e. the corresponding bit in `x._bits._zeros` is 0. Thus:\n+  \/\/   min(clz(x)) = number of bits to the left of the highest 0 bit in x._bits._zeros\n+  \/\/               = count_leading_ones(x._bits._zeros) = clz(~x._bits._zeros)\n+  \/\/\n+  \/\/ To maximize `count_leading_zeros(x)`, we should make the leading zeros as\n+  \/\/ many as possible. A bit in x can be 0 iff this bit is not forced to be 1,\n+  \/\/ i.e. the corresponding bit in `x._bits._ones` is 0. Thus:\n+  \/\/   max(clz(x)) = clz(x._bits._ones)\n+  \/\/\n+  \/\/ Therefore, the range of `count_leading_zeros(x)` is:\n+  \/\/   [clz(~x._bits._zeros), clz(x._bits._ones)]\n+  \/\/\n+  \/\/ A more detailed proof using Z3 can be found at:\n+  \/\/   https:\/\/github.com\/openjdk\/jdk\/pull\/25928#discussion_r2256750507\n+  const TypeInt* ti = t->is_int();\n+  return TypeInt::make(count_leading_zeros_int(~ti->_bits._zeros),\n+                       count_leading_zeros_int(ti->_bits._ones),\n+                       ti->_widen);\n@@ -56,16 +81,2 @@\n-  if (t == Type::TOP) return Type::TOP;\n-  const TypeLong* tl = t->isa_long();\n-  if (tl && tl->is_con()) {\n-    jlong l = tl->get_con();\n-    \/\/ HD, Figure 5-6\n-    if (l == 0)\n-    return TypeInt::make(BitsPerLong);\n-    int n = 1;\n-    unsigned int x = (((julong) l) >> 32);\n-    if (x == 0) { n += 32; x = (int) l; }\n-    if (x >> 16 == 0) { n += 16; x <<= 16; }\n-    if (x >> 24 == 0) { n +=  8; x <<=  8; }\n-    if (x >> 28 == 0) { n +=  4; x <<=  4; }\n-    if (x >> 30 == 0) { n +=  2; x <<=  2; }\n-    n -= x >> 31;\n-    return TypeInt::make(n);\n+  if (t == Type::TOP) {\n+    return Type::TOP;\n@@ -73,1 +84,7 @@\n-  return TypeInt::INT;\n+\n+  \/\/ The proof of correctness is same as the above comments\n+  \/\/ in `CountLeadingZerosINode::Value`.\n+  const TypeLong* tl = t->is_long();\n+  return TypeInt::make(count_leading_zeros_long(~tl->_bits._zeros),\n+                       count_leading_zeros_long(tl->_bits._ones),\n+                       tl->_widen);\n@@ -79,15 +96,2 @@\n-  if (t == Type::TOP) return Type::TOP;\n-  const TypeInt* ti = t->isa_int();\n-  if (ti && ti->is_con()) {\n-    jint i = ti->get_con();\n-    \/\/ HD, Figure 5-14\n-    int y;\n-    if (i == 0)\n-    return TypeInt::make(BitsPerInt);\n-    int n = 31;\n-    y = i << 16; if (y != 0) { n = n - 16; i = y; }\n-    y = i <<  8; if (y != 0) { n = n -  8; i = y; }\n-    y = i <<  4; if (y != 0) { n = n -  4; i = y; }\n-    y = i <<  2; if (y != 0) { n = n -  2; i = y; }\n-    y = i <<  1; if (y != 0) { n = n -  1; }\n-    return TypeInt::make(n);\n+  if (t == Type::TOP) {\n+    return Type::TOP;\n@@ -95,1 +99,21 @@\n-  return TypeInt::INT;\n+\n+  \/\/ To minimize `count_trailing_zeros(x)`, we should make the lowest 1 bit in x\n+  \/\/ as far to the right as possible. A bit in x can be 1 iff this bit is not\n+  \/\/ forced to be 0, i.e. the corresponding bit in `x._bits._zeros` is 0. Thus:\n+  \/\/   min(ctz(x)) = number of bits to the right of the lowest 0 bit in x._bits._zeros\n+  \/\/               = count_trailing_ones(x._bits._zeros) = ctz(~x._bits._zeros)\n+  \/\/\n+  \/\/ To maximize `count_trailing_zeros(x)`, we should make the trailing zeros as\n+  \/\/ many as possible. A bit in x can be 0 iff this bit is not forced to be 1,\n+  \/\/ i.e. the corresponding bit in `x._bits._ones` is 0. Thus:\n+  \/\/   max(ctz(x)) = ctz(x._bits._ones)\n+  \/\/\n+  \/\/ Therefore, the range of `count_trailing_zeros(x)` is:\n+  \/\/   [ctz(~x._bits._zeros), ctz(x._bits._ones)]\n+  \/\/\n+  \/\/ A more detailed proof using Z3 can be found at:\n+  \/\/   https:\/\/github.com\/openjdk\/jdk\/pull\/25928#discussion_r2256750507\n+  const TypeInt* ti = t->is_int();\n+  return TypeInt::make(count_trailing_zeros_int(~ti->_bits._zeros),\n+                       count_trailing_zeros_int(ti->_bits._ones),\n+                       ti->_widen);\n@@ -101,16 +125,2 @@\n-  if (t == Type::TOP) return Type::TOP;\n-  const TypeLong* tl = t->isa_long();\n-  if (tl && tl->is_con()) {\n-    jlong l = tl->get_con();\n-    \/\/ HD, Figure 5-14\n-    int x, y;\n-    if (l == 0)\n-    return TypeInt::make(BitsPerLong);\n-    int n = 63;\n-    y = (int) l; if (y != 0) { n = n - 32; x = y; } else x = (((julong) l) >> 32);\n-    y = x << 16; if (y != 0) { n = n - 16; x = y; }\n-    y = x <<  8; if (y != 0) { n = n -  8; x = y; }\n-    y = x <<  4; if (y != 0) { n = n -  4; x = y; }\n-    y = x <<  2; if (y != 0) { n = n -  2; x = y; }\n-    y = x <<  1; if (y != 0) { n = n -  1; }\n-    return TypeInt::make(n);\n+  if (t == Type::TOP) {\n+    return Type::TOP;\n@@ -118,1 +128,7 @@\n-  return TypeInt::INT;\n+\n+  \/\/ The proof of correctness is same as the above comments\n+  \/\/ in `CountTrailingZerosINode::Value`.\n+  const TypeLong* tl = t->is_long();\n+  return TypeInt::make(count_trailing_zeros_long(~tl->_bits._zeros),\n+                       count_trailing_zeros_long(tl->_bits._ones),\n+                       tl->_widen);\n@@ -120,0 +136,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/countbitsnode.cpp","additions":83,"deletions":66,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -0,0 +1,570 @@\n+\/*\n+ * Copyright (c) 2025 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.gvn;\n+\n+import compiler.lib.generators.Generator;\n+import compiler.lib.generators.Generators;\n+import compiler.lib.generators.RestrictableGenerator;\n+import compiler.lib.ir_framework.*;\n+import java.util.function.Function;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8360192\n+ * @summary Tests that count bits nodes are handled correctly.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.gvn.TestCountBitsRange\n+ *\/\n+public class TestCountBitsRange {\n+    private static final Generator<Integer> INTS = Generators.G.ints();\n+    private static final Generator<Long> LONGS = Generators.G.longs();\n+\n+    private static final RestrictableGenerator<Integer> INTS_32 = Generators.G.ints().restricted(0, 32);\n+    private static final RestrictableGenerator<Integer> INTS_64 = Generators.G.ints().restricted(0, 64);\n+\n+    private static final int LIMITS_32_0 = INTS_32.next();\n+    private static final int LIMITS_32_1 = INTS_32.next();\n+    private static final int LIMITS_32_2 = INTS_32.next();\n+    private static final int LIMITS_32_3 = INTS_32.next();\n+    private static final int LIMITS_32_4 = INTS_32.next();\n+    private static final int LIMITS_32_5 = INTS_32.next();\n+    private static final int LIMITS_32_6 = INTS_32.next();\n+    private static final int LIMITS_32_7 = INTS_32.next();\n+\n+    private static final int LIMITS_64_0 = INTS_64.next();\n+    private static final int LIMITS_64_1 = INTS_64.next();\n+    private static final int LIMITS_64_2 = INTS_64.next();\n+    private static final int LIMITS_64_3 = INTS_64.next();\n+    private static final int LIMITS_64_4 = INTS_64.next();\n+    private static final int LIMITS_64_5 = INTS_64.next();\n+    private static final int LIMITS_64_6 = INTS_64.next();\n+    private static final int LIMITS_64_7 = INTS_64.next();\n+\n+    private static final IntRange RANGE_INT = IntRange.generate(INTS);\n+    private static final LongRange RANGE_LONG = LongRange.generate(LONGS);\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\n+        \"clzConstInts\", \"clzCompareInt\", \"clzDiv8Int\", \"clzRandLimitInt\",\n+        \"clzConstLongs\", \"clzCompareLong\", \"clzDiv8Long\", \"clzRandLimitLong\",\n+        \"ctzConstInts\", \"ctzCompareInt\", \"ctzDiv8Int\", \"ctzRandLimitInt\",\n+        \"ctzConstLongs\", \"ctzCompareLong\", \"ctzDiv8Long\", \"ctzRandLimitLong\",\n+    })\n+    public void runTest() {\n+        int randInt = INTS.next();\n+        long randLong = LONGS.next();\n+        assertResult(randInt, randLong);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int randInt, long randLong) {\n+        checkConstResults(clzConstInts(), x -> Integer.numberOfLeadingZeros(x.intValue()));\n+        Asserts.assertEQ(Integer.numberOfLeadingZeros(randInt) < 0\n+                         || Integer.numberOfLeadingZeros(randInt) > 32,\n+                         clzCompareInt(randInt));\n+        Asserts.assertEQ(Integer.numberOfLeadingZeros(randInt) \/ 8,\n+                         clzDiv8Int(randInt));\n+        Asserts.assertEQ(clzRandLimitInterpretedInt(randInt), clzRandLimitInt(randInt));\n+\n+        checkConstResults(clzConstLongs(), x -> Long.numberOfLeadingZeros(x.longValue()));\n+        Asserts.assertEQ(Long.numberOfLeadingZeros(randLong) < 0\n+                         || Long.numberOfLeadingZeros(randLong) > 64,\n+                         clzCompareLong(randLong));\n+        Asserts.assertEQ(Long.numberOfLeadingZeros(randLong) \/ 8,\n+                         clzDiv8Long(randLong));\n+        Asserts.assertEQ(clzRandLimitInterpretedLong(randLong), clzRandLimitLong(randLong));\n+\n+        checkConstResults(ctzConstInts(), x -> Integer.numberOfTrailingZeros(x.intValue()));\n+        Asserts.assertEQ(Integer.numberOfTrailingZeros(randInt) < 0\n+                         || Integer.numberOfTrailingZeros(randInt) > 32,\n+                         ctzCompareInt(randInt));\n+        Asserts.assertEQ(Integer.numberOfTrailingZeros(randInt) \/ 8,\n+                         ctzDiv8Int(randInt));\n+        Asserts.assertEQ(ctzRandLimitInterpretedInt(randInt), ctzRandLimitInt(randInt));\n+\n+        checkConstResults(ctzConstLongs(), x -> Long.numberOfTrailingZeros(x.longValue()));\n+        Asserts.assertEQ(Long.numberOfTrailingZeros(randLong) < 0\n+                         || Long.numberOfTrailingZeros(randLong) > 64,\n+                         ctzCompareLong(randLong));\n+        Asserts.assertEQ(Long.numberOfTrailingZeros(randLong) \/ 8,\n+                         ctzDiv8Long(randLong));\n+        Asserts.assertEQ(ctzRandLimitInterpretedLong(randLong), ctzRandLimitLong(randLong));\n+    }\n+\n+    @DontCompile\n+    public void checkConstResults(int[] results, Function<Long, Integer> op) {\n+        Asserts.assertEQ(op.apply(Long.valueOf(0)), results[0]);\n+        for (int i = 0; i < results.length - 1; ++i) {\n+            Asserts.assertEQ(op.apply(Long.valueOf(1l << i)), results[i + 1]);\n+        }\n+    }\n+\n+    \/\/ Test CLZ with constant integer inputs.\n+    \/\/ All CLZs in this test are expected to be optimized away.\n+    @Test\n+    @IR(failOn = IRNode.COUNT_LEADING_ZEROS_I)\n+    public int[] clzConstInts() {\n+        return new int[] {\n+            Integer.numberOfLeadingZeros(0),\n+            Integer.numberOfLeadingZeros(1 << 0),\n+            Integer.numberOfLeadingZeros(1 << 1),\n+            Integer.numberOfLeadingZeros(1 << 2),\n+            Integer.numberOfLeadingZeros(1 << 3),\n+            Integer.numberOfLeadingZeros(1 << 4),\n+            Integer.numberOfLeadingZeros(1 << 5),\n+            Integer.numberOfLeadingZeros(1 << 6),\n+            Integer.numberOfLeadingZeros(1 << 7),\n+            Integer.numberOfLeadingZeros(1 << 8),\n+            Integer.numberOfLeadingZeros(1 << 9),\n+            Integer.numberOfLeadingZeros(1 << 10),\n+            Integer.numberOfLeadingZeros(1 << 11),\n+            Integer.numberOfLeadingZeros(1 << 12),\n+            Integer.numberOfLeadingZeros(1 << 13),\n+            Integer.numberOfLeadingZeros(1 << 14),\n+            Integer.numberOfLeadingZeros(1 << 15),\n+            Integer.numberOfLeadingZeros(1 << 16),\n+            Integer.numberOfLeadingZeros(1 << 17),\n+            Integer.numberOfLeadingZeros(1 << 18),\n+            Integer.numberOfLeadingZeros(1 << 19),\n+            Integer.numberOfLeadingZeros(1 << 20),\n+            Integer.numberOfLeadingZeros(1 << 21),\n+            Integer.numberOfLeadingZeros(1 << 22),\n+            Integer.numberOfLeadingZeros(1 << 23),\n+            Integer.numberOfLeadingZeros(1 << 24),\n+            Integer.numberOfLeadingZeros(1 << 25),\n+            Integer.numberOfLeadingZeros(1 << 26),\n+            Integer.numberOfLeadingZeros(1 << 27),\n+            Integer.numberOfLeadingZeros(1 << 28),\n+            Integer.numberOfLeadingZeros(1 << 29),\n+            Integer.numberOfLeadingZeros(1 << 30),\n+            Integer.numberOfLeadingZeros(1 << 31),\n+        };\n+    }\n+\n+    \/\/ Test the range of CLZ with random integer input.\n+    \/\/ The result of CLZ should be in range [0, 32], so CLZs in this test are\n+    \/\/ expected to be optimized away, and the test should always return false.\n+    @Test\n+    @IR(failOn = IRNode.COUNT_LEADING_ZEROS_I)\n+    public boolean clzCompareInt(int randInt) {\n+        return Integer.numberOfLeadingZeros(randInt) < 0\n+               || Integer.numberOfLeadingZeros(randInt) > 32;\n+    }\n+\n+    \/\/ Test the combination of CLZ and division by 8.\n+    \/\/ The result of CLZ should be positive, so the division by 8 should be\n+    \/\/ optimized to a simple right shift without rounding.\n+    @Test\n+    @IR(counts = {IRNode.COUNT_LEADING_ZEROS_I, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int clzDiv8Int(int randInt) {\n+        return Integer.numberOfLeadingZeros(randInt) \/ 8;\n+    }\n+\n+    \/\/ Test the output range of CLZ with random input range.\n+    @Test\n+     public int clzRandLimitInt(int randInt) {\n+        randInt = RANGE_INT.clamp(randInt);\n+        int result = Integer.numberOfLeadingZeros(randInt);\n+        return getResultChecksum32(result);\n+    }\n+\n+    @DontCompile\n+    public int clzRandLimitInterpretedInt(int randInt) {\n+        randInt = RANGE_INT.clamp(randInt);\n+        int result = Integer.numberOfLeadingZeros(randInt);\n+        return getResultChecksum32(result);\n+    }\n+\n+    \/\/ Test CLZ with constant long inputs.\n+    \/\/ All CLZs in this test are expected to be optimized away.\n+    @Test\n+    @IR(failOn = IRNode.COUNT_LEADING_ZEROS_L)\n+    public int[] clzConstLongs() {\n+        return new int[] {\n+            Long.numberOfLeadingZeros(0),\n+            Long.numberOfLeadingZeros(1l << 0),\n+            Long.numberOfLeadingZeros(1l << 1),\n+            Long.numberOfLeadingZeros(1l << 2),\n+            Long.numberOfLeadingZeros(1l << 3),\n+            Long.numberOfLeadingZeros(1l << 4),\n+            Long.numberOfLeadingZeros(1l << 5),\n+            Long.numberOfLeadingZeros(1l << 6),\n+            Long.numberOfLeadingZeros(1l << 7),\n+            Long.numberOfLeadingZeros(1l << 8),\n+            Long.numberOfLeadingZeros(1l << 9),\n+            Long.numberOfLeadingZeros(1l << 10),\n+            Long.numberOfLeadingZeros(1l << 11),\n+            Long.numberOfLeadingZeros(1l << 12),\n+            Long.numberOfLeadingZeros(1l << 13),\n+            Long.numberOfLeadingZeros(1l << 14),\n+            Long.numberOfLeadingZeros(1l << 15),\n+            Long.numberOfLeadingZeros(1l << 16),\n+            Long.numberOfLeadingZeros(1l << 17),\n+            Long.numberOfLeadingZeros(1l << 18),\n+            Long.numberOfLeadingZeros(1l << 19),\n+            Long.numberOfLeadingZeros(1l << 20),\n+            Long.numberOfLeadingZeros(1l << 21),\n+            Long.numberOfLeadingZeros(1l << 22),\n+            Long.numberOfLeadingZeros(1l << 23),\n+            Long.numberOfLeadingZeros(1l << 24),\n+            Long.numberOfLeadingZeros(1l << 25),\n+            Long.numberOfLeadingZeros(1l << 26),\n+            Long.numberOfLeadingZeros(1l << 27),\n+            Long.numberOfLeadingZeros(1l << 28),\n+            Long.numberOfLeadingZeros(1l << 29),\n+            Long.numberOfLeadingZeros(1l << 30),\n+            Long.numberOfLeadingZeros(1l << 31),\n+            Long.numberOfLeadingZeros(1l << 32),\n+            Long.numberOfLeadingZeros(1l << 33),\n+            Long.numberOfLeadingZeros(1l << 34),\n+            Long.numberOfLeadingZeros(1l << 35),\n+            Long.numberOfLeadingZeros(1l << 36),\n+            Long.numberOfLeadingZeros(1l << 37),\n+            Long.numberOfLeadingZeros(1l << 38),\n+            Long.numberOfLeadingZeros(1l << 39),\n+            Long.numberOfLeadingZeros(1l << 40),\n+            Long.numberOfLeadingZeros(1l << 41),\n+            Long.numberOfLeadingZeros(1l << 42),\n+            Long.numberOfLeadingZeros(1l << 43),\n+            Long.numberOfLeadingZeros(1l << 44),\n+            Long.numberOfLeadingZeros(1l << 45),\n+            Long.numberOfLeadingZeros(1l << 46),\n+            Long.numberOfLeadingZeros(1l << 47),\n+            Long.numberOfLeadingZeros(1l << 48),\n+            Long.numberOfLeadingZeros(1l << 49),\n+            Long.numberOfLeadingZeros(1l << 50),\n+            Long.numberOfLeadingZeros(1l << 51),\n+            Long.numberOfLeadingZeros(1l << 52),\n+            Long.numberOfLeadingZeros(1l << 53),\n+            Long.numberOfLeadingZeros(1l << 54),\n+            Long.numberOfLeadingZeros(1l << 55),\n+            Long.numberOfLeadingZeros(1l << 56),\n+            Long.numberOfLeadingZeros(1l << 57),\n+            Long.numberOfLeadingZeros(1l << 58),\n+            Long.numberOfLeadingZeros(1l << 59),\n+            Long.numberOfLeadingZeros(1l << 60),\n+            Long.numberOfLeadingZeros(1l << 61),\n+            Long.numberOfLeadingZeros(1l << 62),\n+            Long.numberOfLeadingZeros(1l << 63),\n+        };\n+    }\n+\n+    \/\/ Test the range of CLZ with random long input.\n+    \/\/ The result of CLZ should be in range [0, 64], so CLZs in this test are\n+    \/\/ expected to be optimized away, and the test should always return false.\n+    @Test\n+    @IR(failOn = IRNode.COUNT_LEADING_ZEROS_L)\n+    public boolean clzCompareLong(long randLong) {\n+        return Long.numberOfLeadingZeros(randLong) < 0\n+               || Long.numberOfLeadingZeros(randLong) > 64;\n+    }\n+\n+    \/\/ Test the combination of CLZ and division by 8.\n+    \/\/ The result of CLZ should be positive, so the division by 8 should be\n+    \/\/ optimized to a simple right shift without rounding.\n+    @Test\n+    @IR(counts = {IRNode.COUNT_LEADING_ZEROS_L, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int clzDiv8Long(long randLong) {\n+        return Long.numberOfLeadingZeros(randLong) \/ 8;\n+    }\n+\n+    \/\/ Test the output range of CLZ with random input range.\n+    @Test\n+    public int clzRandLimitLong(long randLong) {\n+        randLong = RANGE_LONG.clamp(randLong);\n+        int result = Long.numberOfLeadingZeros(randLong);\n+        return getResultChecksum64(result);\n+    }\n+\n+    @DontCompile\n+    public int clzRandLimitInterpretedLong(long randLong) {\n+        randLong = RANGE_LONG.clamp(randLong);\n+        int result = Long.numberOfLeadingZeros(randLong);\n+        return getResultChecksum64(result);\n+    }\n+\n+    \/\/ Test CTZ with constant integer inputs.\n+    \/\/ All CTZs in this test are expected to be optimized away.\n+    @Test\n+    @IR(failOn = IRNode.COUNT_TRAILING_ZEROS_I)\n+    public int[] ctzConstInts() {\n+        return new int[] {\n+            Integer.numberOfTrailingZeros(0),\n+            Integer.numberOfTrailingZeros(1 << 0),\n+            Integer.numberOfTrailingZeros(1 << 1),\n+            Integer.numberOfTrailingZeros(1 << 2),\n+            Integer.numberOfTrailingZeros(1 << 3),\n+            Integer.numberOfTrailingZeros(1 << 4),\n+            Integer.numberOfTrailingZeros(1 << 5),\n+            Integer.numberOfTrailingZeros(1 << 6),\n+            Integer.numberOfTrailingZeros(1 << 7),\n+            Integer.numberOfTrailingZeros(1 << 8),\n+            Integer.numberOfTrailingZeros(1 << 9),\n+            Integer.numberOfTrailingZeros(1 << 10),\n+            Integer.numberOfTrailingZeros(1 << 11),\n+            Integer.numberOfTrailingZeros(1 << 12),\n+            Integer.numberOfTrailingZeros(1 << 13),\n+            Integer.numberOfTrailingZeros(1 << 14),\n+            Integer.numberOfTrailingZeros(1 << 15),\n+            Integer.numberOfTrailingZeros(1 << 16),\n+            Integer.numberOfTrailingZeros(1 << 17),\n+            Integer.numberOfTrailingZeros(1 << 18),\n+            Integer.numberOfTrailingZeros(1 << 19),\n+            Integer.numberOfTrailingZeros(1 << 20),\n+            Integer.numberOfTrailingZeros(1 << 21),\n+            Integer.numberOfTrailingZeros(1 << 22),\n+            Integer.numberOfTrailingZeros(1 << 23),\n+            Integer.numberOfTrailingZeros(1 << 24),\n+            Integer.numberOfTrailingZeros(1 << 25),\n+            Integer.numberOfTrailingZeros(1 << 26),\n+            Integer.numberOfTrailingZeros(1 << 27),\n+            Integer.numberOfTrailingZeros(1 << 28),\n+            Integer.numberOfTrailingZeros(1 << 29),\n+            Integer.numberOfTrailingZeros(1 << 30),\n+            Integer.numberOfTrailingZeros(1 << 31),\n+        };\n+    }\n+\n+    \/\/ Test the range of CTZ with random integer input.\n+    \/\/ The result of CTZ should be in range [0, 32], so CTZs in this test are\n+    \/\/ expected to be optimized away, and the test should always return false.\n+    @Test\n+    @IR(failOn = IRNode.COUNT_TRAILING_ZEROS_I)\n+    public boolean ctzCompareInt(int randInt) {\n+        return Integer.numberOfTrailingZeros(randInt) < 0\n+               || Integer.numberOfTrailingZeros(randInt) > 32;\n+    }\n+\n+    \/\/ Test the combination of CTZ and division by 8.\n+    \/\/ The result of CTZ should be positive, so the division by 8 should be\n+    \/\/ optimized to a simple right shift without rounding.\n+    @Test\n+    @IR(counts = {IRNode.COUNT_TRAILING_ZEROS_I, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int ctzDiv8Int(int randInt) {\n+        return Integer.numberOfTrailingZeros(randInt) \/ 8;\n+    }\n+\n+    \/\/ Test the output range of CTZ with random input range.\n+    @Test\n+    public int ctzRandLimitInt(int randInt) {\n+        randInt = RANGE_INT.clamp(randInt);\n+        int result = Integer.numberOfTrailingZeros(randInt);\n+        return getResultChecksum32(result);\n+    }\n+\n+    @DontCompile\n+    public int ctzRandLimitInterpretedInt(int randInt) {\n+        randInt = RANGE_INT.clamp(randInt);\n+        int result = Integer.numberOfTrailingZeros(randInt);\n+        return getResultChecksum32(result);\n+    }\n+\n+    \/\/ Test CTZ with constant long inputs.\n+    \/\/ All CTZs in this test are expected to be optimized away.\n+    @Test\n+    @IR(failOn = IRNode.COUNT_TRAILING_ZEROS_L)\n+    public int[] ctzConstLongs() {\n+        return new int[] {\n+            Long.numberOfTrailingZeros(0),\n+            Long.numberOfTrailingZeros(1l << 0),\n+            Long.numberOfTrailingZeros(1l << 1),\n+            Long.numberOfTrailingZeros(1l << 2),\n+            Long.numberOfTrailingZeros(1l << 3),\n+            Long.numberOfTrailingZeros(1l << 4),\n+            Long.numberOfTrailingZeros(1l << 5),\n+            Long.numberOfTrailingZeros(1l << 6),\n+            Long.numberOfTrailingZeros(1l << 7),\n+            Long.numberOfTrailingZeros(1l << 8),\n+            Long.numberOfTrailingZeros(1l << 9),\n+            Long.numberOfTrailingZeros(1l << 10),\n+            Long.numberOfTrailingZeros(1l << 11),\n+            Long.numberOfTrailingZeros(1l << 12),\n+            Long.numberOfTrailingZeros(1l << 13),\n+            Long.numberOfTrailingZeros(1l << 14),\n+            Long.numberOfTrailingZeros(1l << 15),\n+            Long.numberOfTrailingZeros(1l << 16),\n+            Long.numberOfTrailingZeros(1l << 17),\n+            Long.numberOfTrailingZeros(1l << 18),\n+            Long.numberOfTrailingZeros(1l << 19),\n+            Long.numberOfTrailingZeros(1l << 20),\n+            Long.numberOfTrailingZeros(1l << 21),\n+            Long.numberOfTrailingZeros(1l << 22),\n+            Long.numberOfTrailingZeros(1l << 23),\n+            Long.numberOfTrailingZeros(1l << 24),\n+            Long.numberOfTrailingZeros(1l << 25),\n+            Long.numberOfTrailingZeros(1l << 26),\n+            Long.numberOfTrailingZeros(1l << 27),\n+            Long.numberOfTrailingZeros(1l << 28),\n+            Long.numberOfTrailingZeros(1l << 29),\n+            Long.numberOfTrailingZeros(1l << 30),\n+            Long.numberOfTrailingZeros(1l << 31),\n+            Long.numberOfTrailingZeros(1l << 32),\n+            Long.numberOfTrailingZeros(1l << 33),\n+            Long.numberOfTrailingZeros(1l << 34),\n+            Long.numberOfTrailingZeros(1l << 35),\n+            Long.numberOfTrailingZeros(1l << 36),\n+            Long.numberOfTrailingZeros(1l << 37),\n+            Long.numberOfTrailingZeros(1l << 38),\n+            Long.numberOfTrailingZeros(1l << 39),\n+            Long.numberOfTrailingZeros(1l << 40),\n+            Long.numberOfTrailingZeros(1l << 41),\n+            Long.numberOfTrailingZeros(1l << 42),\n+            Long.numberOfTrailingZeros(1l << 43),\n+            Long.numberOfTrailingZeros(1l << 44),\n+            Long.numberOfTrailingZeros(1l << 45),\n+            Long.numberOfTrailingZeros(1l << 46),\n+            Long.numberOfTrailingZeros(1l << 47),\n+            Long.numberOfTrailingZeros(1l << 48),\n+            Long.numberOfTrailingZeros(1l << 49),\n+            Long.numberOfTrailingZeros(1l << 50),\n+            Long.numberOfTrailingZeros(1l << 51),\n+            Long.numberOfTrailingZeros(1l << 52),\n+            Long.numberOfTrailingZeros(1l << 53),\n+            Long.numberOfTrailingZeros(1l << 54),\n+            Long.numberOfTrailingZeros(1l << 55),\n+            Long.numberOfTrailingZeros(1l << 56),\n+            Long.numberOfTrailingZeros(1l << 57),\n+            Long.numberOfTrailingZeros(1l << 58),\n+            Long.numberOfTrailingZeros(1l << 59),\n+            Long.numberOfTrailingZeros(1l << 60),\n+            Long.numberOfTrailingZeros(1l << 61),\n+            Long.numberOfTrailingZeros(1l << 62),\n+            Long.numberOfTrailingZeros(1l << 63),\n+        };\n+    }\n+\n+    \/\/ Test the range of CTZ with random long input.\n+    \/\/ The result of CTZ should be in range [0, 64], so CTZs in this test are\n+    \/\/ expected to be optimized away, and the test should always return false.\n+    @Test\n+    @IR(failOn = IRNode.COUNT_TRAILING_ZEROS_L)\n+    public boolean ctzCompareLong(long randLong) {\n+        return Long.numberOfTrailingZeros(randLong) < 0\n+               || Long.numberOfTrailingZeros(randLong) > 64;\n+    }\n+\n+    \/\/ Test the combination of CTZ and division by 8.\n+    \/\/ The result of CTZ should be positive, so the division by 8 should be\n+    \/\/ optimized to a simple right shift without rounding.\n+    @Test\n+    @IR(counts = {IRNode.COUNT_TRAILING_ZEROS_L, \"1\",\n+                  IRNode.RSHIFT_I, \"1\",\n+                  IRNode.URSHIFT_I, \"0\",\n+                  IRNode.ADD_I, \"0\"})\n+    public int ctzDiv8Long(long randLong) {\n+        return Long.numberOfTrailingZeros(randLong) \/ 8;\n+    }\n+\n+    \/\/ Test the output range of CTZ with random input range.\n+    @Test\n+    public int ctzRandLimitLong(long randLong) {\n+        randLong = RANGE_LONG.clamp(randLong);\n+        int result = Long.numberOfLeadingZeros(randLong);\n+        return getResultChecksum64(result);\n+    }\n+\n+    @DontCompile\n+    public int ctzRandLimitInterpretedLong(long randLong) {\n+        randLong = RANGE_LONG.clamp(randLong);\n+        int result = Long.numberOfLeadingZeros(randLong);\n+        return getResultChecksum64(result);\n+    }\n+\n+    record IntRange(int lo, int hi) {\n+        IntRange {\n+            if (lo > hi) {\n+                throw new IllegalArgumentException(\"lo > hi\");\n+            }\n+        }\n+\n+        @ForceInline\n+        int clamp(int v) {\n+            return v < lo ? lo : v > hi ? hi : v;\n+        }\n+\n+        static IntRange generate(Generator<Integer> g) {\n+            int a = g.next(), b = g.next();\n+            return a < b ? new IntRange(a, b) : new IntRange(b, a);\n+        }\n+    }\n+\n+    record LongRange(long lo, long hi) {\n+        LongRange {\n+            if (lo > hi) {\n+                throw new IllegalArgumentException(\"lo > hi\");\n+            }\n+        }\n+\n+        @ForceInline\n+        long clamp(long v) {\n+            return v < lo ? lo : v > hi ? hi : v;\n+        }\n+\n+        static LongRange generate(Generator<Long> g) {\n+            long a = g.next(), b = g.next();\n+            return a < b ? new LongRange(a, b) : new LongRange(b, a);\n+        }\n+    }\n+\n+    @ForceInline\n+    int getResultChecksum32(int result) {\n+        int sum = 0;\n+        if (result < LIMITS_32_0) sum += 1;\n+        if (result < LIMITS_32_1) sum += 2;\n+        if (result < LIMITS_32_2) sum += 4;\n+        if (result < LIMITS_32_3) sum += 8;\n+        if (result > LIMITS_32_4) sum += 16;\n+        if (result > LIMITS_32_5) sum += 32;\n+        if (result > LIMITS_32_6) sum += 64;\n+        if (result > LIMITS_32_7) sum += 128;\n+        return sum;\n+    }\n+\n+    @ForceInline\n+    int getResultChecksum64(int result) {\n+        int sum = 0;\n+        if (result < LIMITS_64_0) sum += 1;\n+        if (result < LIMITS_64_1) sum += 2;\n+        if (result < LIMITS_64_2) sum += 4;\n+        if (result < LIMITS_64_3) sum += 8;\n+        if (result > LIMITS_64_4) sum += 16;\n+        if (result > LIMITS_64_5) sum += 32;\n+        if (result > LIMITS_64_6) sum += 64;\n+        if (result > LIMITS_64_7) sum += 128;\n+        return sum;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestCountBitsRange.java","additions":570,"deletions":0,"binary":false,"changes":570,"status":"added"},{"patch":"@@ -1658,0 +1658,10 @@\n+    public static final String COUNT_TRAILING_ZEROS_I = PREFIX + \"COUNT_TRAILING_ZEROS_I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_TRAILING_ZEROS_I, \"CountTrailingZerosI\");\n+    }\n+\n+    public static final String COUNT_TRAILING_ZEROS_L = PREFIX + \"COUNT_TRAILING_ZEROS_L\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_TRAILING_ZEROS_L, \"CountTrailingZerosL\");\n+    }\n+\n@@ -1668,0 +1678,10 @@\n+    public static final String COUNT_LEADING_ZEROS_I = PREFIX + \"COUNT_LEADING_ZEROS_I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_LEADING_ZEROS_I, \"CountLeadingZerosI\");\n+    }\n+\n+    public static final String COUNT_LEADING_ZEROS_L = PREFIX + \"COUNT_LEADING_ZEROS_L\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(COUNT_LEADING_ZEROS_L, \"CountLeadingZerosL\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2025 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(value = 3)\n+@Warmup(iterations = 10, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@State(Scope.Thread)\n+public class CountLeadingZeros {\n+    private long[] longArray = new long[1000];\n+\n+    @Setup\n+    public void setup() {\n+        for (int i = 0; i < longArray.length; i++) {\n+            longArray[i] = ThreadLocalRandom.current().nextLong();\n+        }\n+    }\n+\n+    @Benchmark\n+    public int benchNumberOfNibbles() {\n+        int sum = 0;\n+        for (long l : longArray) {\n+            sum += numberOfNibbles((int) l);\n+        }\n+        return sum;\n+    }\n+\n+    public static int numberOfNibbles(int i) {\n+        int mag = Integer.SIZE - Integer.numberOfLeadingZeros(i);\n+        return Math.max((mag + 3) \/ 4, 1);\n+    }\n+\n+    @Benchmark\n+    public int benchClzLongConstrained() {\n+        int sum = 0;\n+        for (long l : longArray) {\n+            sum += clzLongConstrained(l);\n+        }\n+        return sum;\n+    }\n+\n+    public static int clzLongConstrained(long param) {\n+        long constrainedParam = Math.min(175, Math.max(param, 160));\n+        return Long.numberOfLeadingZeros(constrainedParam);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/CountLeadingZeros.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}