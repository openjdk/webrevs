{"files":[{"patch":"@@ -50,0 +50,1 @@\n+  \/\/ If the input is TOP, the result is also TOP.\n@@ -51,9 +52,2 @@\n-  if (t == Type::TOP) return Type::TOP;\n-  const TypeInt* ti = t->isa_int();\n-  if (ti != nullptr) {\n-    if (ti->is_con()) {\n-      return TypeInt::make(count_leading_zeros_int(ti->get_con()));\n-    }\n-    return TypeInt::make(count_leading_zeros_int(~ti->_bits._zeros),\n-                         count_leading_zeros_int(ti->_bits._ones),\n-                         ti->_widen);\n+  if (t == Type::TOP) {\n+    return Type::TOP;\n@@ -61,1 +55,13 @@\n-  return TypeInt::INT;\n+\n+  \/\/ If the input is BOTTOM, the result is the local BOTTOM.\n+  if (t == Type::BOTTOM) {\n+    return bottom_type();\n+  }\n+\n+  const TypeInt* ti = t->is_int();\n+  if (ti->is_con()) {\n+    return TypeInt::make(count_leading_zeros_int(ti->get_con()));\n+  }\n+  return TypeInt::make(count_leading_zeros_int(~ti->_bits._zeros),\n+                       count_leading_zeros_int(ti->_bits._ones),\n+                       ti->_widen);\n@@ -66,0 +72,1 @@\n+  \/\/ If the input is TOP, the result is also TOP.\n@@ -67,9 +74,12 @@\n-  if (t == Type::TOP) return Type::TOP;\n-  const TypeLong* tl = t->isa_long();\n-  if (tl != nullptr) {\n-    if (tl->is_con()) {\n-      return TypeInt::make(count_leading_zeros_long(tl->get_con()));\n-    }\n-    return TypeInt::make(count_leading_zeros_long(~tl->_bits._zeros),\n-                         count_leading_zeros_long(tl->_bits._ones),\n-                         tl->_widen);\n+  if (t == Type::TOP) {\n+    return Type::TOP;\n+  }\n+\n+  \/\/ If the input is BOTTOM, the result is the local BOTTOM.\n+  if (t == Type::BOTTOM) {\n+    return bottom_type();\n+  }\n+\n+  const TypeLong* tl = t->is_long();\n+  if (tl->is_con()) {\n+    return TypeInt::make(count_leading_zeros_long(tl->get_con()));\n@@ -77,1 +87,3 @@\n-  return TypeInt::INT;\n+  return TypeInt::make(count_leading_zeros_long(~tl->_bits._zeros),\n+                       count_leading_zeros_long(tl->_bits._ones),\n+                       tl->_widen);\n@@ -82,0 +94,1 @@\n+  \/\/ If the input is TOP, the result is also TOP.\n@@ -83,9 +96,2 @@\n-  if (t == Type::TOP) return Type::TOP;\n-  const TypeInt* ti = t->isa_int();\n-  if (ti != nullptr) {\n-    if (ti->is_con()) {\n-      return TypeInt::make(count_trailing_zeros_int(ti->get_con()));\n-    }\n-    return TypeInt::make(count_trailing_zeros_int(~ti->_bits._zeros),\n-                         count_trailing_zeros_int(ti->_bits._ones),\n-                         ti->_widen);\n+  if (t == Type::TOP) {\n+    return Type::TOP;\n@@ -93,1 +99,13 @@\n-  return TypeInt::INT;\n+\n+  \/\/ If the input is BOTTOM, the result is the local BOTTOM.\n+  if (t == Type::BOTTOM) {\n+    return bottom_type();\n+  }\n+\n+  const TypeInt* ti = t->is_int();\n+  if (ti->is_con()) {\n+    return TypeInt::make(count_trailing_zeros_int(ti->get_con()));\n+  }\n+  return TypeInt::make(count_trailing_zeros_int(~ti->_bits._zeros),\n+                       count_trailing_zeros_int(ti->_bits._ones),\n+                       ti->_widen);\n@@ -98,0 +116,1 @@\n+  \/\/ If the input is TOP, the result is also TOP.\n@@ -99,9 +118,12 @@\n-  if (t == Type::TOP) return Type::TOP;\n-  const TypeLong* tl = t->isa_long();\n-  if (tl != nullptr) {\n-    if (tl->is_con()) {\n-      return TypeInt::make(count_trailing_zeros_long(tl->get_con()));\n-    }\n-    return TypeInt::make(count_trailing_zeros_long(~tl->_bits._zeros),\n-                         count_trailing_zeros_long(tl->_bits._ones),\n-                         tl->_widen);\n+  if (t == Type::TOP) {\n+    return Type::TOP;\n+  }\n+\n+  \/\/ If the input is BOTTOM, the result is the local BOTTOM.\n+  if (t == Type::BOTTOM) {\n+    return bottom_type();\n+  }\n+\n+  const TypeLong* tl = t->is_long();\n+  if (tl->is_con()) {\n+    return TypeInt::make(count_trailing_zeros_long(tl->get_con()));\n@@ -109,1 +131,3 @@\n-  return TypeInt::INT;\n+  return TypeInt::make(count_trailing_zeros_long(~tl->_bits._zeros),\n+                       count_trailing_zeros_long(tl->_bits._ones),\n+                       tl->_widen);\n","filename":"src\/hotspot\/share\/opto\/countbitsnode.cpp","additions":64,"deletions":40,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.test.lib.Asserts;\n@@ -41,2 +42,31 @@\n-    static int i = RunInfo.getRandom().nextInt();\n-    static long l = RunInfo.getRandom().nextLong();\n+    @Run(test = {\n+        \"clzCompareInt\", \"clzDiv8Int\",\n+        \"clzCompareLong\", \"clzDiv8Long\",\n+        \"ctzCompareInt\", \"ctzDiv8Int\",\n+        \"ctzCompareLong\", \"ctzDiv8Long\",\n+    })\n+    public void runTest() {\n+        int i = RunInfo.getRandom().nextInt();\n+        long l = RunInfo.getRandom().nextLong();\n+        assertResult(i, l);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int i, long l) {\n+        Asserts.assertEQ(Integer.numberOfLeadingZeros(i) < 0 || Integer.numberOfLeadingZeros(i) > 32,\n+                         clzCompareInt(i));\n+        Asserts.assertEQ(Integer.numberOfLeadingZeros(i) \/ 8,\n+                         clzDiv8Int(i));\n+        Asserts.assertEQ(Long.numberOfLeadingZeros(l) < 0 || Long.numberOfLeadingZeros(l) > 64,\n+                         clzCompareLong(l));\n+        Asserts.assertEQ(Long.numberOfLeadingZeros(l) \/ 8,\n+                         clzDiv8Long(l));\n+        Asserts.assertEQ(Integer.numberOfTrailingZeros(i) < 0 || Integer.numberOfTrailingZeros(i) > 32,\n+                         ctzCompareInt(i));\n+        Asserts.assertEQ(Integer.numberOfTrailingZeros(i) \/ 8,\n+                         ctzDiv8Int(i));\n+        Asserts.assertEQ(Long.numberOfTrailingZeros(l) < 0 || Long.numberOfTrailingZeros(l) > 64,\n+                         ctzCompareLong(l));\n+        Asserts.assertEQ(Long.numberOfTrailingZeros(l) \/ 8,\n+                         ctzDiv8Long(l));\n+    }\n@@ -46,1 +76,1 @@\n-    public boolean clzCompareInt() {\n+    public boolean clzCompareInt(int i) {\n@@ -55,1 +85,1 @@\n-    public int clzDiv8Int() {\n+    public int clzDiv8Int(int i) {\n@@ -61,1 +91,1 @@\n-    public boolean clzCompareLong() {\n+    public boolean clzCompareLong(long l) {\n@@ -70,1 +100,1 @@\n-    public int clzDiv8Long() {\n+    public int clzDiv8Long(long l) {\n@@ -76,1 +106,1 @@\n-    public boolean ctzCompareInt() {\n+    public boolean ctzCompareInt(int i) {\n@@ -85,1 +115,1 @@\n-    public int ctzDiv8Int() {\n+    public int ctzDiv8Int(int i) {\n@@ -91,1 +121,1 @@\n-    public boolean ctzCompareLong() {\n+    public boolean ctzCompareLong(long l) {\n@@ -100,1 +130,1 @@\n-    public int ctzDiv8Long() {\n+    public int ctzDiv8Long(long l) {\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestCountBitsRange.java","additions":40,"deletions":10,"binary":false,"changes":50,"status":"modified"}]}