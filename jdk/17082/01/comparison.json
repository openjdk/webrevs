{"files":[{"patch":"@@ -26,0 +26,1 @@\n+ * @modules java.base\/java.util.concurrent:open\n@@ -30,0 +31,2 @@\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n@@ -31,0 +34,1 @@\n+import java.util.concurrent.LinkedTransferQueue;\n@@ -36,2 +40,20 @@\n-    private static void testFairness(boolean fair,\n-                                     final BlockingQueue<Integer> q)\n+    private final static VarHandle underlyingTransferQueueAccess;\n+\n+    static {\n+        try {\n+            underlyingTransferQueueAccess =\n+                MethodHandles.privateLookupIn(\n+                    SynchronousQueue.class,\n+                    MethodHandles.lookup()\n+                ).findVarHandle(\n+                    SynchronousQueue.class,\n+                    \"transferer\",\n+                    Class.forName(SynchronousQueue.class.getName() + \"$Transferer\")\n+            );\n+        } catch (Exception ex) {\n+            throw new ExceptionInInitializerError(ex);\n+        }\n+    }\n+\n+\n+    private static void testFairness(boolean fair, final SynchronousQueue<Integer> q)\n@@ -40,0 +62,3 @@\n+        final LinkedTransferQueue<Integer> underlying =\n+            (LinkedTransferQueue<Integer>)underlyingTransferQueueAccess.get(q);\n+\n@@ -56,2 +81,2 @@\n-            \/\/ Probably unnecessary, but should be bullet-proof\n-            while (t.getState() == Thread.State.RUNNABLE)\n+            \/\/ Wait until previous put:ing thread is provably parked\n+            while (underlying.size() < (i + 1))\n@@ -59,0 +84,3 @@\n+\n+            if (underlying.size() > (i + 1))\n+                throw new Error(\"Unexpected number of waiting producers: \" + i);\n@@ -71,3 +99,3 @@\n-        testFairness(false, new SynchronousQueue<Integer>());\n-        testFairness(false, new SynchronousQueue<Integer>(false));\n-        testFairness(true,  new SynchronousQueue<Integer>(true));\n+        testFairness(false, new SynchronousQueue<>());\n+        testFairness(false, new SynchronousQueue<>(false));\n+        testFairness(true,  new SynchronousQueue<>(true));\n","filename":"test\/jdk\/java\/util\/concurrent\/SynchronousQueue\/Fairness.java","additions":35,"deletions":7,"binary":false,"changes":42,"status":"modified"}]}