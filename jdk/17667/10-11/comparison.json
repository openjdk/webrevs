{"files":[{"patch":"@@ -30,2 +30,1 @@\n- *                   -XX:CompileOnly=compiler.c1.TestNullArrayClone::test -XX:+UnlockExperimentalVMOptions\n- *                   -XX:CompileCommand=blackhole,compiler.c1.TestNullArrayClone::blackhole\n+ *                   -XX:CompileOnly=compiler.c1.TestNullArrayClone::testClone* -XX:+UnlockExperimentalVMOptions\n@@ -39,0 +38,3 @@\n+    static final int ITER = 2000; \/\/ ~ Tier3CompileThreshold\n+    static final int ARRAY_SIZE = 999;\n+\n@@ -40,4 +42,34 @@\n-        final int size = 10;\n-        final int[] ints = new int[size];\n-        for (int i = 0; i < ints.length; i++) {\n-            ints[i] = ThreadLocalRandom.current().nextInt();\n+        testInts();\n+        testLongs();\n+        testBytes();\n+    }\n+\n+    private static void testInts() {\n+        final int[] arr = new int[ARRAY_SIZE];\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = ThreadLocalRandom.current().nextInt();\n+        }\n+\n+        for (int i = 0; i < ITER; i++) {\n+            int[] result = testClonePrimitiveInt(arr);\n+            if (result.length != arr.length) {\n+                throw new RuntimeException(\"Unexpected clone length: source array length \" + arr.length + \" != clone array length \" + result.length);\n+            }\n+            for (int j = 0; j < arr.length; j++) {\n+                if (result[j] != arr[j]) {\n+                    throw new RuntimeException(\"Unexpected result: \" + result[j] + \" != \" + j);\n+                }\n+            }\n+        }\n+\n+        try {\n+            testClonePrimitiveInt(null);\n+            throw new RuntimeException(\"Expected NullPointerException to be thrown\");\n+        } catch (NullPointerException e) {\n+        }\n+    }\n+\n+    private static void testLongs() {\n+        final long[] arr = new long[ARRAY_SIZE];\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = ThreadLocalRandom.current().nextLong();\n@@ -46,3 +78,10 @@\n-        for (int i = 0; i < 1_000; i++) {\n-            int[] result = test(ints);\n-            blackhole(result);\n+        for (int i = 0; i < ITER; i++) {\n+            long[] result = testClonePrimitiveLong(arr);\n+            if (result.length != arr.length) {\n+                throw new RuntimeException(\"Unexpected clone length: source array length \" + arr.length + \" != clone array length \" + result.length);\n+            }\n+            for (int j = 0; j < arr.length; j++) {\n+                if (result[j] != arr[j]) {\n+                    throw new RuntimeException(\"Unexpected result: \" + result[j] + \" != \" + j);\n+                }\n+            }\n@@ -52,1 +91,1 @@\n-            test(null);\n+            testClonePrimitiveLong(null);\n@@ -58,1 +97,26 @@\n-    static int[] test(int[] ints) {\n+    private static void testBytes() {\n+        final byte[] arr = new byte[ARRAY_SIZE];\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = (byte) ThreadLocalRandom.current().nextInt();\n+        }\n+\n+        for (int i = 0; i < ITER; i++) {\n+            byte[] result = testClonePrimitiveBytes(arr);\n+            if (result.length != arr.length) {\n+                throw new RuntimeException(\"Unexpected clone length: source array length \" + arr.length + \" != clone array length \" + result.length);\n+            }\n+            for (int j = 0; j < arr.length; j++) {\n+                if (result[j] != arr[j]) {\n+                    throw new RuntimeException(\"Unexpected result: \" + result[j] + \" != \" + j);\n+                }\n+            }\n+        }\n+\n+        try {\n+            testClonePrimitiveBytes(null);\n+            throw new RuntimeException(\"Expected NullPointerException to be thrown\");\n+        } catch (NullPointerException e) {\n+        }\n+    }\n+\n+    static int[] testClonePrimitiveInt(int[] ints) {\n@@ -62,1 +126,7 @@\n-    static void blackhole(Object obj) {}\n+    static long[] testClonePrimitiveLong(long[] longs) {\n+        return longs.clone();\n+    }\n+\n+    static byte[] testClonePrimitiveBytes(byte[] bytes) {\n+        return bytes.clone();\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestNullArrayClone.java","additions":82,"deletions":12,"binary":false,"changes":94,"status":"modified"}]}