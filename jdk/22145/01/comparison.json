{"files":[{"patch":"@@ -31,2 +31,0 @@\n-import sun.security.util.SecurityConstants;\n-\n@@ -97,5 +95,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(SecurityConstants.GET_PROXYSELECTOR_PERMISSION);\n-        }\n@@ -117,5 +110,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(SecurityConstants.SET_PROXYSELECTOR_PERMISSION);\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/net\/ProxySelector.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -96,6 +94,1 @@\n-        @SuppressWarnings(\"removal\")\n-        Boolean b = AccessController.doPrivileged(\n-            new PrivilegedAction<Boolean>() {\n-                public Boolean run() {\n-                    return NetProperties.getBoolean(key);\n-                }});\n+        Boolean b = NetProperties.getBoolean(key);\n@@ -108,1 +101,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -110,6 +102,1 @@\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<Integer>() {\n-                    @Override public Integer run() {\n-                        return NetProperties.getInteger(SOCKS_PROXY_VERSION, 5);\n-                    }\n-                });\n+        return NetProperties.getInteger(SOCKS_PROXY_VERSION, 5);\n@@ -190,1 +177,1 @@\n-        NonProxyInfo pinfo = null;\n+        NonProxyInfo nonProxyInfo = null;\n@@ -193,1 +180,1 @@\n-            pinfo = NonProxyInfo.httpNonProxyInfo;\n+            nonProxyInfo = NonProxyInfo.httpNonProxyInfo;\n@@ -197,1 +184,1 @@\n-            pinfo = NonProxyInfo.httpNonProxyInfo;\n+            nonProxyInfo = NonProxyInfo.httpNonProxyInfo;\n@@ -199,1 +186,1 @@\n-            pinfo = NonProxyInfo.ftpNonProxyInfo;\n+            nonProxyInfo = NonProxyInfo.ftpNonProxyInfo;\n@@ -201,1 +188,1 @@\n-            pinfo = NonProxyInfo.socksNonProxyInfo;\n+            nonProxyInfo = NonProxyInfo.socksNonProxyInfo;\n@@ -203,6 +190,0 @@\n-\n-        \/**\n-         * Let's check the System properties for that protocol\n-         *\/\n-        final String proto = protocol;\n-        final NonProxyInfo nprop = pinfo;\n@@ -210,0 +191,11 @@\n+        \/\/ determine the proxies\n+        final Proxy[] proxyArray = determineProxies(urlhost, protocol, nonProxyInfo);\n+        if (proxyArray != null) {\n+            \/\/ Remove duplicate entries, while preserving order.\n+            return Stream.of(proxyArray).distinct().collect(\n+                    collectingAndThen(toList(), Collections::unmodifiableList));\n+        }\n+        \/\/ If no specific proxy was found, return a standard list containing\n+        \/\/ only one NO_PROXY entry.\n+        return NO_PROXY_LIST;\n+    }\n@@ -211,87 +203,7 @@\n-        \/**\n-         * This is one big doPrivileged call, but we're trying to optimize\n-         * the code as much as possible. Since we're checking quite a few\n-         * System properties it does help having only 1 call to doPrivileged.\n-         * Be mindful what you do in here though!\n-         *\/\n-        @SuppressWarnings(\"removal\")\n-        Proxy[] proxyArray = AccessController.doPrivileged(\n-            new PrivilegedAction<Proxy[]>() {\n-                public Proxy[] run() {\n-                    int i, j;\n-                    String phost =  null;\n-                    int pport = 0;\n-                    String nphosts =  null;\n-                    InetSocketAddress saddr = null;\n-\n-                    \/\/ Then let's walk the list of protocols in our array\n-                    for (i=0; i<props.length; i++) {\n-                        if (props[i][0].equalsIgnoreCase(proto)) {\n-                            for (j = 1; j < props[i].length; j++) {\n-                                \/* System.getProp() will give us an empty\n-                                 * String, \"\" for a defined but \"empty\"\n-                                 * property.\n-                                 *\/\n-                                phost =  NetProperties.get(props[i][j]+\"Host\");\n-                                if (phost != null && phost.length() != 0)\n-                                    break;\n-                            }\n-                            if (phost == null || phost.isEmpty()) {\n-                                \/**\n-                                 * No system property defined for that\n-                                 * protocol. Let's check System Proxy\n-                                 * settings (Gnome, MacOsX & Windows) if\n-                                 * we were instructed to.\n-                                 *\/\n-                                if (hasSystemProxies) {\n-                                    String sproto;\n-                                    if (proto.equalsIgnoreCase(\"socket\"))\n-                                        sproto = \"socks\";\n-                                    else\n-                                        sproto = proto;\n-                                    return getSystemProxies(sproto, urlhost);\n-                                }\n-                                return null;\n-                            }\n-                            \/\/ If a Proxy Host is defined for that protocol\n-                            \/\/ Let's get the NonProxyHosts property\n-                            if (nprop != null) {\n-                                nphosts = NetProperties.get(nprop.property);\n-                                synchronized (nprop) {\n-                                    if (nphosts == null) {\n-                                        if (nprop.defaultVal != null) {\n-                                            nphosts = nprop.defaultVal;\n-                                        } else {\n-                                            nprop.hostsSource = null;\n-                                            nprop.pattern = null;\n-                                        }\n-                                    } else if (!nphosts.isEmpty()) {\n-                                        \/\/ add the required default patterns\n-                                        \/\/ but only if property no set. If it\n-                                        \/\/ is empty, leave empty.\n-                                        nphosts += \"|\" + NonProxyInfo\n-                                                         .defStringVal;\n-                                    }\n-                                    if (nphosts != null) {\n-                                        if (!nphosts.equals(nprop.hostsSource)) {\n-                                            nprop.pattern = toPattern(nphosts);\n-                                            nprop.hostsSource = nphosts;\n-                                        }\n-                                    }\n-                                    if (shouldNotUseProxyFor(nprop.pattern, urlhost)) {\n-                                        return null;\n-                                    }\n-                                }\n-                            }\n-                            \/\/ We got a host, let's check for port\n-\n-                            pport = NetProperties.getInteger(props[i][j]+\"Port\", 0).intValue();\n-                            if (pport == 0 && j < (props[i].length - 1)) {\n-                                \/\/ Can't find a port with same prefix as Host\n-                                \/\/ AND it's not a SOCKS proxy\n-                                \/\/ Let's try the other prefixes for that proto\n-                                for (int k = 1; k < (props[i].length - 1); k++) {\n-                                    if ((k != j) && (pport == 0))\n-                                        pport = NetProperties.getInteger(props[i][k]+\"Port\", 0).intValue();\n-                                }\n-                            }\n+    private Proxy[] determineProxies(final String urlhost, final String protocol,\n+                                     final NonProxyInfo nonProxyInfo) {\n+        int i, j;\n+        String phost = null;\n+        int pport = 0;\n+        String nphosts = null;\n+        InetSocketAddress saddr = null;\n@@ -299,6 +211,40 @@\n-                            \/\/ Still couldn't find a port, let's use default\n-                            if (pport == 0) {\n-                                if (j == (props[i].length - 1)) \/\/ SOCKS\n-                                    pport = defaultPort(\"socket\");\n-                                else\n-                                    pport = defaultPort(proto);\n+        \/\/ Then let's walk the list of protocols in our array\n+        for (i = 0; i < props.length; i++) {\n+            if (props[i][0].equalsIgnoreCase(protocol)) {\n+                for (j = 1; j < props[i].length; j++) {\n+                    \/* System.getProp() will give us an empty\n+                     * String, \"\" for a defined but \"empty\"\n+                     * property.\n+                     *\/\n+                    phost = NetProperties.get(props[i][j] + \"Host\");\n+                    if (phost != null && phost.length() != 0)\n+                        break;\n+                }\n+                if (phost == null || phost.isEmpty()) {\n+                    \/**\n+                     * No system property defined for that\n+                     * protocol. Let's check System Proxy\n+                     * settings (Gnome, MacOsX & Windows) if\n+                     * we were instructed to.\n+                     *\/\n+                    if (hasSystemProxies) {\n+                        String sproto;\n+                        if (protocol.equalsIgnoreCase(\"socket\"))\n+                            sproto = \"socks\";\n+                        else\n+                            sproto = protocol;\n+                        return getSystemProxies(sproto, urlhost);\n+                    }\n+                    return null;\n+                }\n+                \/\/ If a Proxy Host is defined for that protocol\n+                \/\/ Let's get the NonProxyHosts property\n+                if (nonProxyInfo != null) {\n+                    nphosts = NetProperties.get(nonProxyInfo.property);\n+                    synchronized (nonProxyInfo) {\n+                        if (nphosts == null) {\n+                            if (nonProxyInfo.defaultVal != null) {\n+                                nphosts = nonProxyInfo.defaultVal;\n+                            } else {\n+                                nonProxyInfo.hostsSource = null;\n+                                nonProxyInfo.pattern = null;\n@@ -306,7 +252,11 @@\n-                            \/\/ We did find a proxy definition.\n-                            \/\/ Let's create the address, but don't resolve it\n-                            \/\/ as this will be done at connection time\n-                            saddr = InetSocketAddress.createUnresolved(phost, pport);\n-                            \/\/ Socks is *always* the last on the list.\n-                            if (j == (props[i].length - 1)) {\n-                                return new Proxy[] {SocksProxy.create(saddr, socksProxyVersion())};\n+                        } else if (!nphosts.isEmpty()) {\n+                            \/\/ add the required default patterns\n+                            \/\/ but only if property no set. If it\n+                            \/\/ is empty, leave empty.\n+                            nphosts += \"|\" + NonProxyInfo\n+                                    .defStringVal;\n+                        }\n+                        if (nphosts != null) {\n+                            if (!nphosts.equals(nonProxyInfo.hostsSource)) {\n+                                nonProxyInfo.pattern = toPattern(nphosts);\n+                                nonProxyInfo.hostsSource = nphosts;\n@@ -314,1 +264,3 @@\n-                            return new Proxy[] {new Proxy(Proxy.Type.HTTP, saddr)};\n+                        }\n+                        if (shouldNotUseProxyFor(nonProxyInfo.pattern, urlhost)) {\n+                            return null;\n@@ -317,2 +269,2 @@\n-                    return null;\n-                }});\n+                }\n+                \/\/ We got a host, let's check for port\n@@ -320,0 +272,10 @@\n+                pport = NetProperties.getInteger(props[i][j] + \"Port\", 0).intValue();\n+                if (pport == 0 && j < (props[i].length - 1)) {\n+                    \/\/ Can't find a port with same prefix as Host\n+                    \/\/ AND it's not a SOCKS proxy\n+                    \/\/ Let's try the other prefixes for that proto\n+                    for (int k = 1; k < (props[i].length - 1); k++) {\n+                        if ((k != j) && (pport == 0))\n+                            pport = NetProperties.getInteger(props[i][k] + \"Port\", 0).intValue();\n+                    }\n+                }\n@@ -321,4 +283,17 @@\n-        if (proxyArray != null) {\n-            \/\/ Remove duplicate entries, while preserving order.\n-            return Stream.of(proxyArray).distinct().collect(\n-                    collectingAndThen(toList(), Collections::unmodifiableList));\n+                \/\/ Still couldn't find a port, let's use default\n+                if (pport == 0) {\n+                    if (j == (props[i].length - 1)) \/\/ SOCKS\n+                        pport = defaultPort(\"socket\");\n+                    else\n+                        pport = defaultPort(protocol);\n+                }\n+                \/\/ We did find a proxy definition.\n+                \/\/ Let's create the address, but don't resolve it\n+                \/\/ as this will be done at connection time\n+                saddr = InetSocketAddress.createUnresolved(phost, pport);\n+                \/\/ Socks is *always* the last on the list.\n+                if (j == (props[i].length - 1)) {\n+                    return new Proxy[]{SocksProxy.create(saddr, socksProxyVersion())};\n+                }\n+                return new Proxy[]{new Proxy(Proxy.Type.HTTP, saddr)};\n+            }\n@@ -326,4 +301,1 @@\n-\n-        \/\/ If no specific proxy was found, return a standard list containing\n-        \/\/ only one NO_PROXY entry.\n-        return NO_PROXY_LIST;\n+        return null;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/spi\/DefaultProxySelector.java","additions":110,"deletions":138,"binary":false,"changes":248,"status":"modified"},{"patch":"@@ -75,8 +75,0 @@\n-    \/\/ java.net.ProxySelector\n-    public static final NetPermission SET_PROXYSELECTOR_PERMISSION =\n-       new NetPermission(\"setProxySelector\");\n-\n-    \/\/ java.net.ProxySelector\n-    public static final NetPermission GET_PROXYSELECTOR_PERMISSION =\n-       new NetPermission(\"getProxySelector\");\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityConstants.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -204,1 +204,0 @@\n-            perms.add(new NetPermission(\"setProxySelector\"));\n","filename":"test\/jdk\/java\/net\/URLPermission\/nstest\/LookupTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}