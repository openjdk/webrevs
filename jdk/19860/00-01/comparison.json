{"files":[{"patch":"@@ -2676,0 +2676,1 @@\n+        boolean forceLocal = false;\n@@ -2683,1 +2684,2 @@\n-            boolean local = !currentOwner.owner.members().includes(currentOwner, LookupKind.NON_RECURSIVE);\n+            boolean local = forceLocal =\n+                    !currentOwner.owner.members().includes(currentOwner, LookupKind.NON_RECURSIVE);\n@@ -2704,1 +2706,1 @@\n-        adjustParameterAnnotations(m, descriptorType);\n+        adjustParameterAnnotations(m, descriptorType, forceLocal);\n@@ -2843,1 +2845,2 @@\n-    void adjustParameterAnnotations(MethodSymbol sym, Type methodDescriptor) {\n+    void adjustParameterAnnotations(MethodSymbol sym, Type methodDescriptor,\n+                                    boolean forceLocal) {\n@@ -2942,1 +2945,1 @@\n-        } else if (sym.owner.isDirectlyOrIndirectlyLocal()) {\n+        } else if (sym.owner.isDirectlyOrIndirectlyLocal() || forceLocal) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -308,0 +308,84 @@\n+        doTest(base,\n+               \"\"\"\n+               import java.lang.annotation.*;\n+               public class T {\n+                   {\n+                       int i = 0;\n+                       class I {\n+                           public I(@Visible @Invisible long l) {}\n+                           public String toString() {\n+                               return T.this.toString() + i; \/\/force outer this capture\n+                           }\n+                       }\n+                   }\n+               }\n+               @Retention(RetentionPolicy.RUNTIME)\n+               @interface Visible {}\n+               @interface Invisible {}\n+               \"\"\",\n+               \"T$1I\",\n+                MethodTransform.ACCEPT_ALL,\n+               \"@Invisible @Visible long\");\n+        doTest(base,\n+               \"\"\"\n+               import java.lang.annotation.*;\n+               public class T {\n+                   {\n+                       int i = 0;\n+                       class I {\n+                           public <T> I(@Visible @Invisible long l) {}\n+                           public String toString() {\n+                               return T.this.toString() + i; \/\/force outer this capture\n+                           }\n+                       }\n+                   }\n+               }\n+               @Retention(RetentionPolicy.RUNTIME)\n+               @interface Visible {}\n+               @interface Invisible {}\n+               \"\"\",\n+               \"T$1I\",\n+                MethodTransform.ACCEPT_ALL,\n+               \"@Invisible @Visible long\");\n+        doTest(base,\n+               \"\"\"\n+               import java.lang.annotation.*;\n+               public class T {\n+                   {\n+                       int i = 0;\n+                       class I {\n+                           public I(@Visible @Invisible long l) {}\n+                           public String toString() {\n+                               return T.this.toString() + i; \/\/force outer this capture\n+                           }\n+                       }\n+                   }\n+               }\n+               @Retention(RetentionPolicy.RUNTIME)\n+               @interface Visible {}\n+               @interface Invisible {}\n+               \"\"\",\n+               \"T$1I\",\n+                NO_SIGNATURE,\n+               \"T, @Invisible @Visible long, int\");\n+        doTest(base,\n+               \"\"\"\n+               import java.lang.annotation.*;\n+               public class T {\n+                   {\n+                       int i = 0;\n+                       class I {\n+                           public I(@Visible @Invisible long l) {}\n+                           public String toString() {\n+                               return T.this.toString() + i; \/\/force outer this capture\n+                           }\n+                       }\n+                   }\n+               }\n+               @Retention(RetentionPolicy.RUNTIME)\n+               @interface Visible {}\n+               @interface Invisible {}\n+               \"\"\",\n+               \"T$1I\",\n+                NO_SIGNATURE_NO_METHOD_PARAMETERS,\n+               \"T, @Invisible @Visible long, int\");\n@@ -441,7 +525,83 @@\n-    private MethodTransform NO_SIGNATURE = (builder, element) -> {\n-        if (element instanceof SignatureAttribute) {\n-            \/\/ignore\n-        } else {\n-            builder.with(element);\n-        }\n-    };\n+    @Test\n+    public void testRecord(Path base) throws Exception {\n+        \/\/implicit constructor:\n+        doTest(base,\n+               \"\"\"\n+               import java.lang.annotation.*;\n+               public record R(int i, @Visible @Invisible long l, String s) {\n+               }\n+               @Retention(RetentionPolicy.RUNTIME)\n+               @interface Visible {}\n+               @interface Invisible {}\n+               \"\"\",\n+               \"R\",\n+                MethodTransform.ACCEPT_ALL,\n+               \"int, @Invisible @Visible long, java.lang.String\");\n+        doTest(base,\n+               \"\"\"\n+               import java.lang.annotation.*;\n+               public record R(int i, @Visible @Invisible long l, String s) {\n+               }\n+               @Retention(RetentionPolicy.RUNTIME)\n+               @interface Visible {}\n+               @interface Invisible {}\n+               \"\"\",\n+               \"R\",\n+                NO_SIGNATURE,\n+               \"int, @Invisible @Visible long, java.lang.String\");\n+        doTest(base,\n+               \"\"\"\n+               import java.lang.annotation.*;\n+               public record R(int i, @Visible @Invisible long l, String s) {\n+               }\n+               @Retention(RetentionPolicy.RUNTIME)\n+               @interface Visible {}\n+               @interface Invisible {}\n+               \"\"\",\n+               \"R\",\n+                NO_SIGNATURE_NO_METHOD_PARAMETERS,\n+               \"int, @Invisible @Visible long, java.lang.String\");\n+        \/\/compact constructor:\n+        doTest(base,\n+               \"\"\"\n+               import java.lang.annotation.*;\n+               public record R(int i, @Visible @Invisible long l, String s) {\n+                   public R {}\n+               }\n+               @Retention(RetentionPolicy.RUNTIME)\n+               @interface Visible {}\n+               @interface Invisible {}\n+               \"\"\",\n+               \"R\",\n+                MethodTransform.ACCEPT_ALL,\n+               \"int, @Invisible @Visible long, java.lang.String\");\n+        doTest(base,\n+               \"\"\"\n+               import java.lang.annotation.*;\n+               public record R(int i, @Visible @Invisible long l, String s) {\n+                   public R {}\n+               }\n+               @Retention(RetentionPolicy.RUNTIME)\n+               @interface Visible {}\n+               @interface Invisible {}\n+               \"\"\",\n+               \"R\",\n+                NO_SIGNATURE,\n+               \"int, @Invisible @Visible long, java.lang.String\");\n+        doTest(base,\n+               \"\"\"\n+               import java.lang.annotation.*;\n+               public record R(int i, @Visible @Invisible long l, String s) {\n+                   public R {}\n+               }\n+               @Retention(RetentionPolicy.RUNTIME)\n+               @interface Visible {}\n+               @interface Invisible {}\n+               \"\"\",\n+               \"R\",\n+                NO_SIGNATURE_NO_METHOD_PARAMETERS,\n+               \"int, @Invisible @Visible long, java.lang.String\");\n+    }\n+\n+    private MethodTransform NO_SIGNATURE =\n+            MethodTransform.dropping(element -> element instanceof SignatureAttribute);\n@@ -449,8 +609,3 @@\n-    private MethodTransform NO_SIGNATURE_NO_METHOD_PARAMETERS = (builder, element) -> {\n-        if (element instanceof SignatureAttribute ||\n-            element instanceof MethodParametersAttribute) {\n-            \/\/ignore\n-        } else {\n-            builder.with(element);\n-        }\n-    };\n+    private MethodTransform NO_SIGNATURE_NO_METHOD_PARAMETERS =\n+            MethodTransform.dropping(element -> element instanceof SignatureAttribute ||\n+                                     element instanceof MethodParametersAttribute);\n","filename":"test\/langtools\/tools\/javac\/annotations\/parameter\/ParameterAnnotations.java","additions":170,"deletions":15,"binary":false,"changes":185,"status":"modified"}]}