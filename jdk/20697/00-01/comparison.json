{"files":[{"patch":"@@ -773,6 +773,1 @@\n-      \/\/ during dump time. Check if it is included in the runtime classpath.\n-      assert(strlen(shared_path(j)->name()) > (size_t)dumptime_prefix_len, \"sanity\");\n-      assert(strlen(rp_array->at(i)) > (size_t)runtime_prefix_len, \"sanity\");\n-      if (os::same_files(shared_path(j)->name() + dumptime_prefix_len, rp_array->at(i)  + runtime_prefix_len)) {\n-        i++;\n-      }\n+      \/\/ during dump time. It's not included in the -classpath VM argument.\n@@ -781,3 +776,0 @@\n-    if (i == num_paths) {\n-      break;\n-    }\n@@ -864,1 +856,1 @@\n-bool FileMapInfo::validate_app_class_paths(int shared_app_paths_len, int total_shared_app_paths_len) {\n+bool FileMapInfo::validate_app_class_paths(int shared_app_paths_len) {\n@@ -869,3 +861,1 @@\n-  if ((rp_len < shared_app_paths_len)) {\n-    log_info(class, path)(\"App classpath lengths (dumptime: %d expanded(including jars in Class-Path attribute) %d, runtime: %d)\",\n-        shared_app_paths_len, total_shared_app_paths_len, rp_len);\n+  if (rp_len < shared_app_paths_len) {\n@@ -878,2 +868,1 @@\n-    int array_len = rp_array->length();\n-    if (array_len == 0) {\n+    if (rp_array->length() == 0) {\n@@ -883,1 +872,1 @@\n-    if (array_len < shared_app_paths_len) {\n+    if (rp_array->length() < shared_app_paths_len) {\n@@ -887,2 +876,0 @@\n-      log_info(class, path)(\"App classpath lengths (dumptime: %d expanded(including jars in Class-Path attribute) %d, runtime: %d)\",\n-          shared_app_paths_len, total_shared_app_paths_len, array_len);\n@@ -902,2 +889,1 @@\n-    int num_paths = MIN2(array_len, total_shared_app_paths_len);\n-    mismatch = check_paths(j, num_paths, rp_array, 0, 0);\n+    mismatch = check_paths(j, shared_app_paths_len, rp_array, 0, 0);\n@@ -915,1 +901,1 @@\n-        mismatch = check_paths(j, num_paths, rp_array,\n+        mismatch = check_paths(j, shared_app_paths_len, rp_array,\n@@ -986,1 +972,0 @@\n-  int total_shared_app_paths_len = 0;\n@@ -993,5 +978,2 @@\n-        if (i >= header()->app_class_paths_start_index()) {\n-          if (!shared_path(i)->from_class_path_attr()) {\n-            shared_app_paths_len++;\n-          }\n-          total_shared_app_paths_len++;\n+        if (!shared_path(i)->from_class_path_attr() && i >= header()->app_class_paths_start_index()) {\n+          shared_app_paths_len++;\n@@ -1022,1 +1004,1 @@\n-    if (!validate_boot_class_paths() || !validate_app_class_paths(shared_app_paths_len, total_shared_app_paths_len)) {\n+    if (!validate_boot_class_paths() || !validate_app_class_paths(shared_app_paths_len)) {\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":10,"deletions":28,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -558,1 +558,1 @@\n-  bool  validate_app_class_paths(int shared_app_paths_len, int total_shared_app_paths_len) NOT_CDS_RETURN_(false);\n+  bool  validate_app_class_paths(int shared_app_paths_len) NOT_CDS_RETURN_(false);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -837,1 +837,2 @@\n-      if (strcmp(e->name(), entry->name()) == 0) {\n+      if (strcmp(e->name(), entry->name()) == 0 &&\n+          e->from_class_path_attr() == entry->from_class_path_attr()) {\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -140,2 +140,1 @@\n-    TestCommon.testDump(cp, TestCommon.list(\"Hello\"),\n-        \"-Xlog:class+path\");\n+    TestCommon.testDump(cp, TestCommon.list(\"Hello\"), \"-Xlog:class+path\");\n@@ -145,10 +144,8 @@\n-    TestCommon.run(\n-        \"-Xlog:class+path,class+load\",\n-        \"-cp\", cp,\n-        \"Hello\")\n-      .assertNormalExit(output -> {\n-          output.shouldContain(\"Hello source: shared objects file\");\n-        });\n-\n-    \/\/ Run with -cp apattr1.jar:cpattr2.jar:hello.jar. The Hello class should be\n-    \/\/ loaded from the archive.\n+    TestCommon.run(\"-Xlog:class+path,class+load\",\n+                   \"-cp\", cp,\n+                   \"Hello\")\n+              .assertNormalExit(output -> {\n+                  output.shouldContain(\"Hello source: shared objects file\");\n+                });\n+\n+    \/\/ Run with -cp apattr1.jar:cpattr2.jar:hello.jar. App classpath mismatch should be detected.\n@@ -157,7 +154,7 @@\n-    TestCommon.run(\n-        \"-Xlog:class+path,class+load\",\n-        \"-cp\", cp,\n-        \"Hello\")\n-      .assertNormalExit(output -> {\n-          output.shouldContain(\"Hello source: shared objects file\");\n-        });\n+    TestCommon.run(\"-Xlog:class+path,class+load\",\n+                   \"-cp\", cp,\n+                   \"Hello\")\n+              .assertAbnormalExit(output -> {\n+                  output.shouldMatch(\".*APP classpath mismatch, actual: -Djava.class.path=.*cpattr1.jar.*cpattr2.jar.*hello.jar\")\n+              .shouldContain(\"Unable to use shared archive.\");\n+                });\n@@ -167,8 +164,21 @@\n-    TestCommon.run(\n-        \"-Xlog:class+path,class+load\",\n-        \"-cp\", cp,\n-        \"Hello\")\n-      .assertAbnormalExit(output -> {\n-          output.shouldMatch(\".*APP classpath mismatch, actual: -Djava.class.path=.*cpattr2.jar.*hello.jar\")\n-                .shouldContain(\"Unable to use shared archive.\");\n-        });\n+    TestCommon.run(\"-Xlog:class+path,class+load\",\n+                   \"-cp\", cp,\n+                   \"Hello\")\n+              .assertAbnormalExit(output -> {\n+                  output.shouldMatch(\".*APP classpath mismatch, actual: -Djava.class.path=.*cpattr2.jar.*hello.jar\")\n+              .shouldContain(\"Unable to use shared archive.\");\n+                });\n+\n+    \/\/ Dumping with -cp cpattr1.jar:cpattr2.jar:hello.jar\n+    \/\/ The cpattr2.jar is from the Class-Path: attribute of cpattr1.jar.\n+    cp = jar1 + File.pathSeparator + jar2 + File.pathSeparator + helloJar;\n+    TestCommon.testDump(cp, TestCommon.list(\"Hello\"), \"-Xlog:class+path\");\n+\n+    \/\/ Run with the same -cp as dump time. The Hello class should be loaded from the archive.\n+    TestCommon.run(\"-Xlog:class+path,class+load\",\n+                   \"-cp\", cp,\n+                   \"Hello\")\n+              .assertNormalExit(output -> {\n+                  output.shouldContain(\"Hello source: shared objects file\");\n+                });\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassPathAttr.java","additions":37,"deletions":27,"binary":false,"changes":64,"status":"modified"}]}