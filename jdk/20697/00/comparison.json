{"files":[{"patch":"@@ -773,1 +773,6 @@\n-      \/\/ during dump time. It's not included in the -classpath VM argument.\n+      \/\/ during dump time. Check if it is included in the runtime classpath.\n+      assert(strlen(shared_path(j)->name()) > (size_t)dumptime_prefix_len, \"sanity\");\n+      assert(strlen(rp_array->at(i)) > (size_t)runtime_prefix_len, \"sanity\");\n+      if (os::same_files(shared_path(j)->name() + dumptime_prefix_len, rp_array->at(i)  + runtime_prefix_len)) {\n+        i++;\n+      }\n@@ -776,0 +781,3 @@\n+    if (i == num_paths) {\n+      break;\n+    }\n@@ -856,1 +864,1 @@\n-bool FileMapInfo::validate_app_class_paths(int shared_app_paths_len) {\n+bool FileMapInfo::validate_app_class_paths(int shared_app_paths_len, int total_shared_app_paths_len) {\n@@ -861,1 +869,3 @@\n-  if (rp_len < shared_app_paths_len) {\n+  if ((rp_len < shared_app_paths_len)) {\n+    log_info(class, path)(\"App classpath lengths (dumptime: %d expanded(including jars in Class-Path attribute) %d, runtime: %d)\",\n+        shared_app_paths_len, total_shared_app_paths_len, rp_len);\n@@ -868,1 +878,2 @@\n-    if (rp_array->length() == 0) {\n+    int array_len = rp_array->length();\n+    if (array_len == 0) {\n@@ -872,1 +883,1 @@\n-    if (rp_array->length() < shared_app_paths_len) {\n+    if (array_len < shared_app_paths_len) {\n@@ -876,0 +887,2 @@\n+      log_info(class, path)(\"App classpath lengths (dumptime: %d expanded(including jars in Class-Path attribute) %d, runtime: %d)\",\n+          shared_app_paths_len, total_shared_app_paths_len, array_len);\n@@ -889,1 +902,2 @@\n-    mismatch = check_paths(j, shared_app_paths_len, rp_array, 0, 0);\n+    int num_paths = MIN2(array_len, total_shared_app_paths_len);\n+    mismatch = check_paths(j, num_paths, rp_array, 0, 0);\n@@ -901,1 +915,1 @@\n-        mismatch = check_paths(j, shared_app_paths_len, rp_array,\n+        mismatch = check_paths(j, num_paths, rp_array,\n@@ -972,0 +986,1 @@\n+  int total_shared_app_paths_len = 0;\n@@ -978,2 +993,5 @@\n-        if (!shared_path(i)->from_class_path_attr() && i >= header()->app_class_paths_start_index()) {\n-          shared_app_paths_len++;\n+        if (i >= header()->app_class_paths_start_index()) {\n+          if (!shared_path(i)->from_class_path_attr()) {\n+            shared_app_paths_len++;\n+          }\n+          total_shared_app_paths_len++;\n@@ -1004,1 +1022,1 @@\n-    if (!validate_boot_class_paths() || !validate_app_class_paths(shared_app_paths_len)) {\n+    if (!validate_boot_class_paths() || !validate_app_class_paths(shared_app_paths_len, total_shared_app_paths_len)) {\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":28,"deletions":10,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -558,1 +558,1 @@\n-  bool  validate_app_class_paths(int shared_app_paths_len) NOT_CDS_RETURN_(false);\n+  bool  validate_app_class_paths(int shared_app_paths_len, int total_shared_app_paths_len) NOT_CDS_RETURN_(false);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @compile test-classes\/Hello.java\n@@ -47,0 +48,1 @@\n+    testClassPathAttrJarOnCP();\n@@ -129,0 +131,46 @@\n+  static void testClassPathAttrJarOnCP() throws Exception {\n+    String helloJar = JarBuilder.getOrCreateHelloJar();\n+    String jar1 = TestCommon.getTestJar(\"cpattr1.jar\");\n+    String cp = jar1 + File.pathSeparator + helloJar;\n+\n+    \/\/ The cpattr1.jar contains \"Class-Path: cpattr2.jar\".\n+    \/\/ The cpattr2.jar contains \"Class-Path: cpattr3.jar cpattr5_123456789_223456789_323456789_42345678.jar\".\n+    \/\/ With -cp cpattr1:hello.jar, the following shared paths should be stored in the CDS archive:\n+    \/\/ cpattr1.jar:cpattr2.jar:cpattr3.jar:cpattr5_123456789_223456789_323456789_42345678.jari:hello.jar\n+    TestCommon.testDump(cp, TestCommon.list(\"Hello\"),\n+        \"-Xlog:class+path\");\n+\n+    \/\/ Run with the same -cp apattr1.jar:hello.jar. The Hello class should be\n+    \/\/ loaded from the archive.\n+    TestCommon.run(\n+        \"-Xlog:class+path,class+load\",\n+        \"-cp\", cp,\n+        \"Hello\")\n+      .assertNormalExit(output -> {\n+          output.shouldContain(\"Hello source: shared objects file\");\n+        });\n+\n+    \/\/ Run with -cp apattr1.jar:cpattr2.jar:hello.jar. The Hello class should be\n+    \/\/ loaded from the archive.\n+    String jar2 = TestCommon.getTestJar(\"cpattr2.jar\");\n+    cp = jar1 + File.pathSeparator + jar2 + File.pathSeparator + helloJar;\n+    TestCommon.run(\n+        \"-Xlog:class+path,class+load\",\n+        \"-cp\", cp,\n+        \"Hello\")\n+      .assertNormalExit(output -> {\n+          output.shouldContain(\"Hello source: shared objects file\");\n+        });\n+\n+    \/\/ Run with different -cp cpattr2.jar:hello.jar. App classpath mismatch should be detected.\n+    cp = jar2 + File.pathSeparator + helloJar;\n+    TestCommon.run(\n+        \"-Xlog:class+path,class+load\",\n+        \"-cp\", cp,\n+        \"Hello\")\n+      .assertAbnormalExit(output -> {\n+          output.shouldMatch(\".*APP classpath mismatch, actual: -Djava.class.path=.*cpattr2.jar.*hello.jar\")\n+                .shouldContain(\"Unable to use shared archive.\");\n+        });\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassPathAttr.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"}]}