{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Intel Corporation. All rights reserved.\n+ * Copyright (c) 2023, 2024 Intel Corporation. All rights reserved.\n@@ -27,1 +27,0 @@\n-#ifdef COMPILER2\n@@ -31,1 +30,1 @@\n-\/\/ #include <functional>\n+#include \"opto\/intrinsicnode.hpp\"\n@@ -177,0 +176,3 @@\n+static void generate_string_indexof_stubs(StubGenerator *stubgen, address *fnptrs,\n+                                          StrIntrinsicNode::ArgEncoding ae, MacroAssembler *_masm);\n+\n@@ -187,3 +189,3 @@\n-  generate_string_indexof_stubs(fnptrs, StrIntrinsicNode::LL);\n-  generate_string_indexof_stubs(fnptrs, StrIntrinsicNode::UU);\n-  generate_string_indexof_stubs(fnptrs, StrIntrinsicNode::UL);\n+  generate_string_indexof_stubs(this, fnptrs, StrIntrinsicNode::LL, _masm);\n+  generate_string_indexof_stubs(this, fnptrs, StrIntrinsicNode::UU, _masm);\n+  generate_string_indexof_stubs(this, fnptrs, StrIntrinsicNode::UL, _masm);\n@@ -195,2 +197,3 @@\n-void StubGenerator::generate_string_indexof_stubs(address *fnptrs, StrIntrinsicNode::ArgEncoding ae) {\n-  StubCodeMark mark(this, \"StubRoutines\", \"stringIndexOf\");\n+static void generate_string_indexof_stubs(StubGenerator *stubgen, address *fnptrs,\n+                                          StrIntrinsicNode::ArgEncoding ae, MacroAssembler *_masm) {\n+  StubCodeMark mark(stubgen, \"StubRoutines\", \"stringIndexOf\");\n@@ -987,1 +990,0 @@\n-\n@@ -1144,13 +1146,0 @@\n-  \/\/ \/\/ Set up lambdas for performing correctly-sized comparisons\n-  \/\/ std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n-\n-  \/\/ if (isU) {\n-  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-  \/\/     __ vpcmpeqw(dst, src, adr, vector_len);\n-  \/\/   };\n-  \/\/ } else {\n-  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-  \/\/     __ vpcmpeqb(dst, src, adr, vector_len);\n-  \/\/   };\n-  \/\/ }\n-\n@@ -1240,13 +1229,0 @@\n-  \/\/ \/\/ Set up lambdas for performing correctly-sized comparisons\n-  \/\/ std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n-\n-  \/\/ if (isU) {\n-  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-  \/\/     __ vpcmpeqw(dst, src, adr, vector_len);\n-  \/\/   };\n-  \/\/ } else {\n-  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-  \/\/     __ vpcmpeqb(dst, src, adr, vector_len);\n-  \/\/   };\n-  \/\/ }\n-\n@@ -1357,13 +1333,0 @@\n-  \/\/ \/\/ Set up lambdas for performing correctly-sized comparisons\n-  \/\/ std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n-\n-  \/\/ if (isU) {\n-  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-  \/\/     __ vpcmpeqw(dst, src, adr, vector_len);\n-  \/\/   };\n-  \/\/ } else {\n-  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-  \/\/     __ vpcmpeqb(dst, src, adr, vector_len);\n-  \/\/   };\n-  \/\/ }\n-\n@@ -1621,13 +1584,0 @@\n-  \/\/ \/\/ Set up lambdas for performing correctly-sized comparisons\n-  \/\/ std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n-\n-  \/\/ if (isU) {\n-  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-  \/\/     __ vpcmpeqw(dst, src, adr, vector_len);\n-  \/\/   };\n-  \/\/ } else {\n-  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-  \/\/     __ vpcmpeqb(dst, src, adr, vector_len);\n-  \/\/   };\n-  \/\/ }\n-\n@@ -1905,1 +1855,0 @@\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/c2_stubGenerator_x86_64_string.cpp","additions":11,"deletions":62,"binary":false,"changes":73,"previous_filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_string.cpp","status":"renamed"},{"patch":"@@ -4250,1 +4250,2 @@\n-  if ((UseAVX == 2) && EnableX86ECoreOpts && VM_Version::supports_avx2()) {\n+#ifdef COMPILER2\n+  if ((UseAVX == 2) && EnableX86ECoreOpts) {\n@@ -4253,0 +4254,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-#ifdef COMPILER2\n-#include \"opto\/intrinsicnode.hpp\"\n-#endif\n@@ -582,1 +579,0 @@\n-  void generate_string_indexof_stubs(address *fnptrs, StrIntrinsicNode::ArgEncoding ae);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}