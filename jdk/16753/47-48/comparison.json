{"files":[{"patch":"@@ -24,0 +24,7 @@\n+\/* @test\n+ * @bug 4162796 4162796\n+ * @summary Test indexOf and lastIndexOf\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation -XX:CompileCommand=dontinline,ECoreIndexOf.indexOfKernel ECoreIndexOf\n+ * @key randomness\n+ *\/\n+\n","filename":"test\/jdk\/java\/lang\/StringBuffer\/ECoreIndexOf.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,159 +30,159 @@\n- import java.util.Random;\n-\n- public class IndexOf {\n-\n-     static Random generator = new Random();\n-     private static boolean failure = false;\n-\n-     public static void main(String[] args) throws Exception {\n-         simpleTest();\n-         compareIndexOfLastIndexOf();\n-         compareStringStringBuffer();\n-\n-         if (failure)\n-            throw new RuntimeException(\"One or more BitSet failures.\");\n-     }\n-\n-     private static void report(String testName, int failCount) {\n-         System.err.println(testName+\": \" +\n-                          (failCount==0 ? \"Passed\":\"Failed(\"+failCount+\")\"));\n-         if (failCount > 0)\n-             failure = true;\n-     }\n-\n-     private static String generateTestString(int min, int max) {\n-         StringBuffer aNewString = new StringBuffer(120);\n-         int aNewLength = getRandomIndex(min, max);\n-         for(int y=0; y<aNewLength; y++) {\n-             int achar = generator.nextInt(30)+30;\n-             char test = (char)(achar);\n-             aNewString.append(test);\n-         }\n-         return aNewString.toString();\n-     }\n-\n-     private static int getRandomIndex(int constraint1, int constraint2) {\n-         int range = constraint2 - constraint1;\n-         int x = generator.nextInt(range);\n-         return constraint1 + x;\n-     }\n-\n-     private static void simpleTest() {\n-         int failCount = 0;\n-         String sourceString;\n-         StringBuffer sourceBuffer;\n-         String targetString;\n-\n-         for (int i=0; i<10000; i++) {\n-             do {\n-                 sourceString = generateTestString(99, 100);\n-                 sourceBuffer = new StringBuffer(sourceString);\n-                 targetString = generateTestString(10, 11);\n-             } while (sourceString.indexOf(targetString) != -1);\n-\n-             int index1 = generator.nextInt(90) + 5;\n-             sourceBuffer = sourceBuffer.replace(index1, index1, targetString);\n-\n-             if (sourceBuffer.indexOf(targetString) != index1)\n-                 failCount++;\n-             if (sourceBuffer.indexOf(targetString, 5) != index1)\n-                 failCount++;\n-             if (sourceBuffer.indexOf(targetString, 99) == index1)\n-                 failCount++;\n-         }\n-\n-         report(\"Basic Test                   \", failCount);\n-     }\n-\n-     \/\/ Note: it is possible although highly improbable that failCount will\n-     \/\/ be > 0 even if everthing is working ok\n-     private static void compareIndexOfLastIndexOf() {\n-         int failCount = 0;\n-         String sourceString;\n-         StringBuffer sourceBuffer;\n-         String targetString;\n-\n-         for (int i=0; i<10000; i++) {\n-             do {\n-                 sourceString = generateTestString(99, 100);\n-                 sourceBuffer = new StringBuffer(sourceString);\n-                 targetString = generateTestString(10, 11);\n-             } while (sourceString.indexOf(targetString) != -1);\n-\n-             int index1 = generator.nextInt(100);\n-             sourceBuffer = sourceBuffer.replace(index1, index1, targetString);\n-\n-             \/\/ extremely remote possibility of > 1 match\n-             int matches = 0;\n-             int index2 = -1;\n-             while((index2 = sourceBuffer.indexOf(targetString,index2+1)) != -1)\n-                 matches++;\n-             if (matches > 1)\n-                 continue;\n-\n-             if (sourceBuffer.indexOf(targetString) !=\n-                 sourceBuffer.lastIndexOf(targetString))\n-                 failCount++;\n-             sourceString = sourceBuffer.toString();\n-             if (sourceString.indexOf(targetString) !=\n-                 sourceString.lastIndexOf(targetString))\n-                 failCount++;\n-         }\n-\n-         report(\"IndexOf vs LastIndexOf       \", failCount);\n-     }\n-\n-     private static void compareStringStringBuffer() {\n-         int failCount = 0;\n-\n-         for (int x=0; x<10000; x++) {\n-             String testString = generateTestString(1, 100);\n-             int len = testString.length();\n-\n-             StringBuffer testBuffer = new StringBuffer(len);\n-             testBuffer.append(testString);\n-             if (!testString.equals(testBuffer.toString()))\n-                 throw new RuntimeException(\"Initial equality failure\");\n-\n-             int x1 = 0;\n-             int x2 = 1000;\n-             while(x2 > testString.length()) {\n-                 x1 = generator.nextInt(len);\n-                 x2 = generator.nextInt(100);\n-                 x2 = x1 + x2;\n-             }\n-             String fragment = testString.substring(x1,x2);\n-\n-             int sAnswer = testString.indexOf(fragment);\n-             int sbAnswer = testBuffer.indexOf(fragment);\n-\n-             if (sAnswer != sbAnswer)\n-                 failCount++;\n-\n-             int testIndex = getRandomIndex(-100, 100);\n-\n-             sAnswer = testString.indexOf(fragment, testIndex);\n-             sbAnswer = testBuffer.indexOf(fragment, testIndex);\n-\n-             if (sAnswer != sbAnswer)\n-                 failCount++;\n-\n-             sAnswer = testString.lastIndexOf(fragment);\n-             sbAnswer = testBuffer.lastIndexOf(fragment);\n-\n-             if (sAnswer != sbAnswer)\n-                 failCount++;\n-\n-             testIndex = getRandomIndex(-100, 100);\n-\n-             sAnswer = testString.lastIndexOf(fragment, testIndex);\n-             sbAnswer = testBuffer.lastIndexOf(fragment, testIndex);\n-\n-             if (sAnswer != sbAnswer)\n-                 failCount++;\n-         }\n-\n-         report(\"String vs StringBuffer       \", failCount);\n-     }\n-\n- }\n\\ No newline at end of file\n+import java.util.Random;\n+\n+public class IndexOf {\n+\n+    static Random generator = new Random();\n+    private static boolean failure = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        simpleTest();\n+        compareIndexOfLastIndexOf();\n+        compareStringStringBuffer();\n+\n+        if (failure)\n+          throw new RuntimeException(\"One or more BitSet failures.\");\n+    }\n+\n+    private static void report(String testName, int failCount) {\n+        System.err.println(testName+\": \" +\n+                        (failCount==0 ? \"Passed\":\"Failed(\"+failCount+\")\"));\n+        if (failCount > 0)\n+            failure = true;\n+    }\n+\n+    private static String generateTestString(int min, int max) {\n+        StringBuffer aNewString = new StringBuffer(120);\n+        int aNewLength = getRandomIndex(min, max);\n+        for(int y=0; y<aNewLength; y++) {\n+            int achar = generator.nextInt(30)+30;\n+            char test = (char)(achar);\n+            aNewString.append(test);\n+        }\n+        return aNewString.toString();\n+    }\n+\n+    private static int getRandomIndex(int constraint1, int constraint2) {\n+        int range = constraint2 - constraint1;\n+        int x = generator.nextInt(range);\n+        return constraint1 + x;\n+    }\n+\n+    private static void simpleTest() {\n+        int failCount = 0;\n+        String sourceString;\n+        StringBuffer sourceBuffer;\n+        String targetString;\n+\n+        for (int i=0; i<10000; i++) {\n+            do {\n+                sourceString = generateTestString(99, 100);\n+                sourceBuffer = new StringBuffer(sourceString);\n+                targetString = generateTestString(10, 11);\n+            } while (sourceString.indexOf(targetString) != -1);\n+\n+            int index1 = generator.nextInt(90) + 5;\n+            sourceBuffer = sourceBuffer.replace(index1, index1, targetString);\n+\n+            if (sourceBuffer.indexOf(targetString) != index1)\n+                failCount++;\n+            if (sourceBuffer.indexOf(targetString, 5) != index1)\n+                failCount++;\n+            if (sourceBuffer.indexOf(targetString, 99) == index1)\n+                failCount++;\n+        }\n+\n+        report(\"Basic Test                   \", failCount);\n+    }\n+\n+    \/\/ Note: it is possible although highly improbable that failCount will\n+    \/\/ be > 0 even if everthing is working ok\n+    private static void compareIndexOfLastIndexOf() {\n+        int failCount = 0;\n+        String sourceString;\n+        StringBuffer sourceBuffer;\n+        String targetString;\n+\n+        for (int i=0; i<10000; i++) {\n+            do {\n+                sourceString = generateTestString(99, 100);\n+                sourceBuffer = new StringBuffer(sourceString);\n+                targetString = generateTestString(10, 11);\n+            } while (sourceString.indexOf(targetString) != -1);\n+\n+            int index1 = generator.nextInt(100);\n+            sourceBuffer = sourceBuffer.replace(index1, index1, targetString);\n+\n+            \/\/ extremely remote possibility of > 1 match\n+            int matches = 0;\n+            int index2 = -1;\n+            while((index2 = sourceBuffer.indexOf(targetString,index2+1)) != -1)\n+                matches++;\n+            if (matches > 1)\n+                continue;\n+\n+            if (sourceBuffer.indexOf(targetString) !=\n+                sourceBuffer.lastIndexOf(targetString))\n+                failCount++;\n+            sourceString = sourceBuffer.toString();\n+            if (sourceString.indexOf(targetString) !=\n+                sourceString.lastIndexOf(targetString))\n+                failCount++;\n+        }\n+\n+        report(\"IndexOf vs LastIndexOf       \", failCount);\n+    }\n+\n+    private static void compareStringStringBuffer() {\n+        int failCount = 0;\n+\n+        for (int x=0; x<10000; x++) {\n+            String testString = generateTestString(1, 100);\n+            int len = testString.length();\n+\n+            StringBuffer testBuffer = new StringBuffer(len);\n+            testBuffer.append(testString);\n+            if (!testString.equals(testBuffer.toString()))\n+                throw new RuntimeException(\"Initial equality failure\");\n+\n+            int x1 = 0;\n+            int x2 = 1000;\n+            while(x2 > testString.length()) {\n+                x1 = generator.nextInt(len);\n+                x2 = generator.nextInt(100);\n+                x2 = x1 + x2;\n+            }\n+            String fragment = testString.substring(x1,x2);\n+\n+            int sAnswer = testString.indexOf(fragment);\n+            int sbAnswer = testBuffer.indexOf(fragment);\n+\n+            if (sAnswer != sbAnswer)\n+                failCount++;\n+\n+            int testIndex = getRandomIndex(-100, 100);\n+\n+            sAnswer = testString.indexOf(fragment, testIndex);\n+            sbAnswer = testBuffer.indexOf(fragment, testIndex);\n+\n+            if (sAnswer != sbAnswer)\n+                failCount++;\n+\n+            sAnswer = testString.lastIndexOf(fragment);\n+            sbAnswer = testBuffer.lastIndexOf(fragment);\n+\n+            if (sAnswer != sbAnswer)\n+                failCount++;\n+\n+            testIndex = getRandomIndex(-100, 100);\n+\n+            sAnswer = testString.lastIndexOf(fragment, testIndex);\n+            sbAnswer = testBuffer.lastIndexOf(fragment, testIndex);\n+\n+            if (sAnswer != sbAnswer)\n+                failCount++;\n+        }\n+\n+        report(\"String vs StringBuffer       \", failCount);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/StringBuffer\/IndexOf.java","additions":159,"deletions":159,"binary":false,"changes":318,"status":"modified"}]}