{"files":[{"patch":"@@ -82,1 +82,1 @@\n-\n+\/\/\n@@ -85,1 +85,1 @@\n-\n+\/\/\n@@ -88,1 +88,1 @@\n-\n+\/\/\n@@ -93,1 +93,1 @@\n-\n+\/\/\n@@ -96,1 +96,1 @@\n-\n+\/\/\n@@ -98,1 +98,1 @@\n-\n+\/\/\n@@ -107,1 +107,1 @@\n-\n+\/\/\n@@ -113,1 +113,1 @@\n-\n+\/\/\n@@ -121,0 +121,15 @@\n+  const Register haystack     = rbx;\n+  const Register hs_temp      = rcx;\n+  const Register needle       = r14;\n+  const Register termAddr     = rax;\n+  const Register length       = rsi;\n+  const Register eq_mask      = rsi;\n+  const Register incr         = rdx;\n+  const Register r_temp       = rcx;\n+\n+  const XMMRegister byte_0    = xmm0;\n+  const XMMRegister byte_k    = xmm1;\n+  const XMMRegister cmp_0     = xmm2;\n+  const XMMRegister cmp_k     = xmm3;\n+  const XMMRegister result    = xmm2;\n+\n@@ -122,1 +137,1 @@\n-  __ testq(rsi, rsi);\n+  __ testq(length, length);\n@@ -125,3 +140,3 @@\n-  __ vpbroadcastb(xmm0, Address(r14, 0), Assembler::AVX_256bit);\n-  __ vpbroadcastb(xmm1, Address(r14, size - 1), Assembler::AVX_256bit);\n-  __ leaq(rax, Address(r14, rsi, Address::times_1));\n+  __ vpbroadcastb(byte_0, Address(needle, 0), Assembler::AVX_256bit);\n+  __ vpbroadcastb(byte_k, Address(needle, size - 1), Assembler::AVX_256bit);\n+  __ leaq(termAddr, Address(needle, rsi, Address::times_1));\n@@ -129,6 +144,6 @@\n-  __ leal(rcx, Address(rsi, 33 - size));\n-  __ andl(rcx, 0x1f);\n-  __ cmpl(rsi, 0x21);\n-  __ movl(rdx, 0x20);\n-  __ cmovl(Assembler::aboveEqual, rdx, rcx);\n-  __ movq(rcx, rbx);\n+  __ leal(r_temp, Address(length, 33 - size));\n+  __ andl(r_temp, 0x1f);\n+  __ cmpl(length, 0x21);\n+  __ movl(incr, 0x20);\n+  __ cmovl(Assembler::aboveEqual, incr, r_temp);\n+  __ movq(hs_temp, haystack);\n@@ -138,3 +153,3 @@\n-  __ addq(rcx, rdx);\n-  __ movl(rdx, 0x20);\n-  __ cmpq(rcx, rax);\n+  __ addq(hs_temp, incr);\n+  __ movl(incr, 0x20);\n+  __ cmpq(hs_temp, termAddr);\n@@ -145,1 +160,1 @@\n-  __ vpcmpeqb(xmm2, xmm0, Address(rcx, 0), Assembler::AVX_256bit);\n+  __ vpcmpeqb(cmp_0, byte_0, Address(hs_temp, 0), Assembler::AVX_256bit);\n@@ -147,4 +162,4 @@\n-  __ vpcmpeqb(xmm3, xmm1, Address(rcx, size - 1), Assembler::AVX_256bit);\n-  __ vpand(xmm2, xmm3, xmm2, Assembler::AVX_256bit);\n-  __ vpmovmskb(rsi, xmm2, Assembler::AVX_256bit);\n-  __ testl(rsi, rsi);\n+  __ vpcmpeqb(cmp_k, byte_k, Address(hs_temp, size - 1), Assembler::AVX_256bit);\n+  __ vpand(result, cmp_k, cmp_0, Assembler::AVX_256bit);\n+  __ vpmovmskb(eq_mask, result, Assembler::AVX_256bit);\n+  __ testl(eq_mask, eq_mask);\n@@ -174,1 +189,1 @@\n-\n+\/\/\n@@ -181,0 +196,4 @@\n+  const Register haystack     = rbx;\n+  const Register needle       = r14;\n+  const Register index        = rax;\n+  const Register length       = rsi;\n@@ -182,1 +201,1 @@\n-  __ addq(rsi, -(size - 1));\n+  __ addq(length, -(size - 1));\n@@ -184,2 +203,2 @@\n-  __ movzbl(rcx, Address(r14, 0));\n-  __ xorq(rax, rax);\n+  __ movzbl(rcx, Address(needle, 0));\n+  __ xorq(index, index);\n@@ -189,2 +208,2 @@\n-  __ incq(rax);\n-  __ cmpq(rsi, rax);\n+  __ incq(index);\n+  __ cmpq(length, index);\n@@ -194,1 +213,1 @@\n-  __ cmpb(Address(rbx, rax, Address::times_1), rcx);\n+  __ cmpb(Address(haystack, index, Address::times_1), rcx);\n@@ -196,2 +215,2 @@\n-  __ movzbl(rdx, Address(rbx, rax, Address::times_1, size - 1));\n-  __ cmpb(rdx, Address(r14, size - 1));\n+  __ movzbl(rdx, Address(haystack, index, Address::times_1, size - 1));\n+  __ cmpb(rdx, Address(needle, size - 1));\n@@ -210,0 +229,18 @@\n+  const Register haystack     = rdi;\n+  const Register haystack_len = rsi;\n+  const Register needle       = rdx;\n+  const Register needle_len   = rcx;\n+\n+  const Register save_ndl_len = r12;\n+\n+  const XMMRegister save_r12  = xmm4;\n+  const XMMRegister save_r13  = xmm5;\n+  const XMMRegister save_r14  = xmm6;\n+  const XMMRegister save_r15  = xmm7;\n+  const XMMRegister save_rbx  = xmm8;\n+  const XMMRegister save_rsi  = xmm9;\n+  const XMMRegister save_rdi  = xmm10;\n+  const XMMRegister save_rcx  = xmm11;\n+  const XMMRegister save_r8   = xmm12;\n+  const XMMRegister save_r9   = xmm13;\n+\n@@ -311,74 +348,0 @@\n-    small_hs_jmp_table[1] = __ pc();\n-    {\n-      Label L_loopTop;\n-      string_indexof_small_loop_helper(2, L_checkRangeAndReturn, L_loopTop);\n-      __ jmp(L_returnRAX);\n-    }\n-\/\/ Small case 3:\n-    small_hs_jmp_table[2] = __ pc();\n-    {\n-      Label L_loopTop;\n-      string_indexof_small_loop_helper(3, L_checkRangeAndReturn, L_loopTop);\n-      __ movzbl(rdx, Address(rbx, rax, Address::times_1, 1));\n-      __ cmpb(rdx, Address(r14, 1));\n-      __ jne(L_loopTop);\n-      __ jmp(L_returnRAX);\n-    }\n-\/\/ Small case 4:\n-    small_hs_jmp_table[3] = __ pc();\n-    {\n-      Label L_loopTop;\n-      string_indexof_small_loop_helper(4, L_checkRangeAndReturn, L_loopTop);\n-      __ movzwl(rdx, Address(rbx, rax, Address::times_1, 1));\n-      __ cmpw(Address(r14, 1), rdx);\n-      __ jne(L_loopTop);\n-      __ jmp(L_returnRAX);\n-    }\n-\/\/ Small case 5:\n-    small_hs_jmp_table[4] = __ pc();\n-    {\n-      Label L_loopTop;\n-      string_indexof_small_loop_helper(5, L_checkRangeAndReturn, L_loopTop);\n-      __ movl(rdx, Address(rbx, rax, Address::times_1, 1));\n-      __ cmpl(rdx, Address(r14, 1));\n-      __ jne(L_loopTop);\n-      __ jmp(L_returnRAX);\n-    }\n-\/\/ Small case 6:\n-    small_hs_jmp_table[5] = __ pc();\n-    {\n-      Label L_loopTop;\n-      string_indexof_small_loop_helper(6, L_checkRangeAndReturn, L_loopTop);\n-      __ movl(rdx, Address(rbx, rax, Address::times_1, 1));\n-      __ cmpl(rdx, Address(r14, 1));\n-      __ jne(L_loopTop);\n-      __ jmp(L_returnRAX);\n-    }\n-\/\/ Small case 7:\n-    small_hs_jmp_table[6] = __ pc();\n-    {\n-      Label L_loopTop;\n-      string_indexof_small_loop_helper(7, L_checkRangeAndReturn, L_loopTop);\n-      __ movl(rdx, Address(rbx, rax, Address::times_1, 1));\n-      __ cmpl(rdx, Address(r14, 1));\n-      __ jne(L_loopTop);\n-      __ movzbl(rdx, Address(rbx, rax, Address::times_1, 5));\n-      __ cmpb(rdx, Address(r14, 5));\n-      __ jne(L_loopTop);\n-      __ jmp(L_returnRAX);\n-    }\n-\/\/ Small case 8:\n-    small_hs_jmp_table[7] = __ pc();\n-    {\n-      Label L_loopTop;\n-      string_indexof_small_loop_helper(8, L_checkRangeAndReturn, L_loopTop);\n-      __ movl(rdx, Address(rbx, rax, Address::times_1, 1));\n-      __ cmpl(rdx, Address(r14, 1));\n-      __ jne(L_loopTop);\n-      __ movzwl(rdx, Address(rbx, rax, Address::times_1, 5));\n-      __ cmpw(Address(r14, 5), rdx);\n-      __ jne(L_loopTop);\n-      __ jmp(L_returnRAX);\n-    }\n-\/\/ Small case 9:\n-    small_hs_jmp_table[8] = __ pc();\n@@ -386,16 +349,97 @@\n-      Label L_loopTop;\n-      string_indexof_small_loop_helper(9, L_checkRangeAndReturn, L_loopTop);\n-      __ movq(rdx, Address(rbx, rax, Address::times_1, 1));\n-      __ cmpq(rdx, Address(r14, 1));\n-      __ jne(L_loopTop);\n-      __ jmp(L_returnRAX);\n-    }\n-\/\/ Small case 10:\n-    small_hs_jmp_table[9] = __ pc();\n-    {\n-      Label L_loopTop;\n-      string_indexof_small_loop_helper(10, L_checkRangeAndReturn, L_loopTop);\n-      __ movq(rdx, Address(rbx, rax, Address::times_1, 1));\n-      __ cmpq(rdx, Address(r14, 1));\n-      __ jne(L_loopTop);\n-      __ jmp(L_returnRAX);\n+    const Register haystack     = rbx;\n+    const Register needle       = r14;\n+    const Register index        = rax;\n+    const Register r_temp       = rdx;\n+\n+      small_hs_jmp_table[1] = __ pc();\n+      {\n+        Label L_loopTop;\n+        string_indexof_small_loop_helper(2, L_checkRangeAndReturn, L_loopTop);\n+        __ jmp(L_returnRAX);\n+      }\n+  \/\/ Small case 3:\n+      small_hs_jmp_table[2] = __ pc();\n+      {\n+        Label L_loopTop;\n+        string_indexof_small_loop_helper(3, L_checkRangeAndReturn, L_loopTop);\n+        __ movzbl(r_temp, Address(haystack, index, Address::times_1, 1));\n+        __ cmpb(r_temp, Address(needle, 1));\n+        __ jne(L_loopTop);\n+        __ jmp(L_returnRAX);\n+      }\n+  \/\/ Small case 4:\n+      small_hs_jmp_table[3] = __ pc();\n+      {\n+        Label L_loopTop;\n+        string_indexof_small_loop_helper(4, L_checkRangeAndReturn, L_loopTop);\n+        __ movzwl(r_temp, Address(haystack, index, Address::times_1, 1));\n+        __ cmpw(Address(needle, 1), r_temp);\n+        __ jne(L_loopTop);\n+        __ jmp(L_returnRAX);\n+      }\n+  \/\/ Small case 5:\n+      small_hs_jmp_table[4] = __ pc();\n+      {\n+        Label L_loopTop;\n+        string_indexof_small_loop_helper(5, L_checkRangeAndReturn, L_loopTop);\n+        __ movl(r_temp, Address(haystack, index, Address::times_1, 1));\n+        __ cmpl(r_temp, Address(needle, 1));\n+        __ jne(L_loopTop);\n+        __ jmp(L_returnRAX);\n+      }\n+  \/\/ Small case 6:\n+      small_hs_jmp_table[5] = __ pc();\n+      {\n+        Label L_loopTop;\n+        string_indexof_small_loop_helper(6, L_checkRangeAndReturn, L_loopTop);\n+        __ movl(r_temp, Address(haystack, index, Address::times_1, 1));\n+        __ cmpl(r_temp, Address(needle, 1));\n+        __ jne(L_loopTop);\n+        __ jmp(L_returnRAX);\n+      }\n+  \/\/ Small case 7:\n+      small_hs_jmp_table[6] = __ pc();\n+      {\n+        Label L_loopTop;\n+        string_indexof_small_loop_helper(7, L_checkRangeAndReturn, L_loopTop);\n+        __ movl(r_temp, Address(haystack, index, Address::times_1, 1));\n+        __ cmpl(r_temp, Address(needle, 1));\n+        __ jne(L_loopTop);\n+        __ movzbl(r_temp, Address(haystack, index, Address::times_1, 5));\n+        __ cmpb(r_temp, Address(needle, 5));\n+        __ jne(L_loopTop);\n+        __ jmp(L_returnRAX);\n+      }\n+  \/\/ Small case 8:\n+      small_hs_jmp_table[7] = __ pc();\n+      {\n+        Label L_loopTop;\n+        string_indexof_small_loop_helper(8, L_checkRangeAndReturn, L_loopTop);\n+        __ movl(r_temp, Address(haystack, index, Address::times_1, 1));\n+        __ cmpl(r_temp, Address(needle, 1));\n+        __ jne(L_loopTop);\n+        __ movzwl(r_temp, Address(haystack, index, Address::times_1, 5));\n+        __ cmpw(Address(needle, 5), r_temp);\n+        __ jne(L_loopTop);\n+        __ jmp(L_returnRAX);\n+      }\n+  \/\/ Small case 9:\n+      small_hs_jmp_table[8] = __ pc();\n+      {\n+        Label L_loopTop;\n+        string_indexof_small_loop_helper(9, L_checkRangeAndReturn, L_loopTop);\n+        __ movq(r_temp, Address(haystack, index, Address::times_1, 1));\n+        __ cmpq(r_temp, Address(needle, 1));\n+        __ jne(L_loopTop);\n+        __ jmp(L_returnRAX);\n+      }\n+  \/\/ Small case 10:\n+      small_hs_jmp_table[9] = __ pc();\n+      {\n+        Label L_loopTop;\n+        string_indexof_small_loop_helper(10, L_checkRangeAndReturn, L_loopTop);\n+        __ movq(r_temp, Address(haystack, index, Address::times_1, 1));\n+        __ cmpq(r_temp, Address(needle, 1));\n+        __ jne(L_loopTop);\n+        __ jmp(L_returnRAX);\n+      }\n@@ -500,3 +544,0 @@\n-\n-\/\/ Big case 3:\n-    large_hs_jmp_table[2] = __ pc();\n@@ -504,158 +545,181 @@\n-      Label L_loopTop, L_innerLoop;\n-\n-      string_indexof_big_loop_helper(3, L_checkRangeAndReturn, L_loopTop);\n-      __ movzbl(rdi, Address(r14, 1));\n-      __ align(16);\n-      __ bind(L_innerLoop);\n-      __ tzcntl(r8, rsi);\n-      __ cmpb(Address(rcx, r8, Address::times_1, 1), rdi);\n-      __ je(L_bigCaseFixupAndReturn);\n-      __ blsrl(rsi, rsi);\n-      __ jne(L_innerLoop);\n-      __ jmp(L_loopTop);\n-    }\n-\n-\n-\n-\/\/ Big case 4:\n-    large_hs_jmp_table[3] = __ pc();\n-    {\n-      Label L_loopTop, L_innerLoop;\n-\n-      string_indexof_big_loop_helper(4, L_checkRangeAndReturn, L_loopTop);\n-      __ movzwl(rdi, Address(r14, 1));\n-      __ align(16);\n-      __ bind(L_innerLoop);\n-      __ tzcntl(r8, rsi);\n-      __ cmpw(Address(rcx, r8, Address::times_1, 1), rdi);\n-      __ je(L_bigCaseFixupAndReturn);\n-      __ blsrl(rsi, rsi);\n-      __ jne(L_innerLoop);\n-      __ jmp(L_loopTop);\n-    }\n-\n-\n-\n-\/\/ Big case 5:\n-    large_hs_jmp_table[4] = __ pc();\n-    {\n-      Label L_loopTop, L_innerLoop;\n-\n-      string_indexof_big_loop_helper(5, L_checkRangeAndReturn, L_loopTop);\n-      __ movl(rdi, Address(r14, 1));\n-      __ align(16);\n-      __ bind(L_innerLoop);\n-      __ tzcntl(r8, rsi);\n-      __ cmpl(Address(rcx, r8, Address::times_1, 1), rdi);\n-      __ je(L_bigCaseFixupAndReturn);\n-      __ blsrl(rsi, rsi);\n-      __ jne(L_innerLoop);\n-      __ jmp(L_loopTop);\n-    }\n-\n-\n-\n-\/\/ Big case 6:\n-    large_hs_jmp_table[5] = __ pc();\n-    {\n-      Label L_loopTop, L_innerLoop;\n-\n-      string_indexof_big_loop_helper(6, L_checkRangeAndReturn, L_loopTop);\n-      __ movl(rdi, Address(r14, 1));\n-      __ align(16);\n-      __ bind(L_innerLoop);\n-      __ tzcntl(r8, rsi);\n-      __ cmpl(Address(rcx, r8, Address::times_1, 1), rdi);\n-      __ je(L_bigCaseFixupAndReturn);\n-      __ blsrl(rsi, rsi);\n-      __ jne(L_innerLoop);\n-      __ jmp(L_loopTop);\n-    }\n-\n-\n-\n-\/\/ Big case 7:\n-    large_hs_jmp_table[6] = __ pc();\n-    {\n-      Label L_loopTop, L_innerLoop, L_tmp;\n-\n-      string_indexof_big_loop_helper(7, L_checkRangeAndReturn, L_loopTop);\n-      __ movl(rdi, Address(r14, 1));\n-      __ jmpb(L_tmp);\n-      __ align(16);\n-      __ bind(L_innerLoop);\n-      __ blsrl(rsi, rsi);\n-      __ je(L_loopTop);\n-      __ bind(L_tmp);\n-      __ tzcntl(r8, rsi);\n-      __ cmpl(Address(rcx, r8, Address::times_1, 1), rdi);\n-      __ jne(L_innerLoop);\n-      __ movzbl(r9, Address(rcx, r8, Address::times_1, 5));\n-      __ cmpb(r9, Address(r14, 5));\n-      __ jne(L_innerLoop);\n-      __ jmp(L_small7_8_fixup);\n-    }\n-\n-\n-\n-\/\/ Big case 8:\n-    large_hs_jmp_table[7] = __ pc();\n-    {\n-      Label L_loopTop, L_innerLoop, L_tmp;\n-\n-      string_indexof_big_loop_helper(8, L_checkRangeAndReturn, L_loopTop);\n-      __ movl(rdi, Address(r14, 1));\n-      __ jmpb(L_tmp);\n-      __ align(16);\n-      __ bind(L_innerLoop);\n-      __ blsrl(rsi, rsi);\n-      __ je(L_loopTop);\n-      __ bind(L_tmp);\n-      __ tzcntl(r8, rsi);\n-      __ cmpl(Address(rcx, r8, Address::times_1, 1), rdi);\n-      __ jne(L_innerLoop);\n-      __ movzwl(r9, Address(rcx, r8, Address::times_1, 5));\n-      __ cmpw(Address(r14, 5), r9);\n-      __ jne(L_innerLoop);\n-      __ bind(L_small7_8_fixup);\n-      __ subq(rcx, rbx);\n-      __ addq(rcx, r8);\n-      __ jmp(L_checkRangeAndReturnRCX);\n-    }\n-\n-\n-\n-\/\/ Big case 9:\n-    large_hs_jmp_table[8] = __ pc();\n-    {\n-      Label L_loopTop, L_innerLoop;\n-\n-      string_indexof_big_loop_helper(9, L_checkRangeAndReturn, L_loopTop);\n-      __ movq(rdi, Address(r14, 1));\n-      __ align(16);\n-      __ bind(L_innerLoop);\n-      __ tzcntl(r8, rsi);\n-      __ cmpq(Address(rcx, r8, Address::times_1, 1), rdi);\n-      __ je(L_bigCaseFixupAndReturn);\n-      __ blsrl(rsi, rsi);\n-      __ jne(L_innerLoop);\n-      __ jmp(L_loopTop);\n-    }\n-\n-\n-\n-\/\/ Big case 10:\n-    large_hs_jmp_table[9] = __ pc();\n-    {\n-      Label L_loopTop, L_innerLoop;\n-\n-      string_indexof_big_loop_helper(10, L_checkRangeAndReturn, L_loopTop);\n-      __ movq(rdi, Address(r14, 1));\n-      __ align(16);\n-      __ bind(L_innerLoop);\n-      __ tzcntl(r8, rsi);\n-      __ cmpq(Address(rcx, r8, Address::times_1, 1), rdi);\n-      __ je(L_bigCaseFixupAndReturn);\n-      __ blsrl(rsi, rsi);\n-      __ jne(L_innerLoop);\n-      __ jmp(L_loopTop);\n+      const Register haystack     = rbx;\n+      const Register hs_ptr       = rcx;\n+      const Register needle       = r14;\n+      const Register needle_val   = rdi;\n+      const Register eq_mask      = rsi;\n+      const Register set_bit      = r8;\n+      const Register hs_val       = r9;\n+\n+  \/\/ Big case 3:\n+      large_hs_jmp_table[2] = __ pc();\n+      {\n+        Label L_loopTop, L_innerLoop;\n+\n+        string_indexof_big_loop_helper(3, L_checkRangeAndReturn, L_loopTop);\n+        __ movzbl(needle_val, Address(needle, 1));\n+\n+        __ align(16);\n+        __ bind(L_innerLoop);\n+        __ tzcntl(set_bit, eq_mask);\n+        __ cmpb(Address(hs_ptr, set_bit, Address::times_1, 1), needle_val);\n+        __ je(L_bigCaseFixupAndReturn);\n+        __ blsrl(eq_mask, eq_mask);\n+        __ jne(L_innerLoop);\n+        __ jmp(L_loopTop);\n+      }\n+\n+\n+\n+  \/\/ Big case 4:\n+      large_hs_jmp_table[3] = __ pc();\n+      {\n+        Label L_loopTop, L_innerLoop;\n+\n+        string_indexof_big_loop_helper(4, L_checkRangeAndReturn, L_loopTop);\n+        __ movzwl(needle_val, Address(needle, 1));\n+\n+        __ align(16);\n+        __ bind(L_innerLoop);\n+        __ tzcntl(set_bit, eq_mask);\n+        __ cmpw(Address(hs_ptr, set_bit, Address::times_1, 1), needle_val);\n+        __ je(L_bigCaseFixupAndReturn);\n+        __ blsrl(eq_mask, eq_mask);\n+        __ jne(L_innerLoop);\n+        __ jmp(L_loopTop);\n+      }\n+\n+\n+\n+  \/\/ Big case 5:\n+      large_hs_jmp_table[4] = __ pc();\n+      {\n+        Label L_loopTop, L_innerLoop;\n+\n+        string_indexof_big_loop_helper(5, L_checkRangeAndReturn, L_loopTop);\n+        __ movl(needle_val, Address(needle, 1));\n+\n+        __ align(16);\n+        __ bind(L_innerLoop);\n+        __ tzcntl(set_bit, eq_mask);\n+        __ cmpl(Address(hs_ptr, set_bit, Address::times_1, 1), needle_val);\n+        __ je(L_bigCaseFixupAndReturn);\n+        __ blsrl(eq_mask, eq_mask);\n+        __ jne(L_innerLoop);\n+        __ jmp(L_loopTop);\n+      }\n+\n+\n+\n+  \/\/ Big case 6:\n+      large_hs_jmp_table[5] = __ pc();\n+      {\n+        Label L_loopTop, L_innerLoop;\n+\n+        string_indexof_big_loop_helper(6, L_checkRangeAndReturn, L_loopTop);\n+        __ movl(needle_val, Address(needle, 1));\n+\n+        __ align(16);\n+        __ bind(L_innerLoop);\n+        __ tzcntl(set_bit, eq_mask);\n+        __ cmpl(Address(hs_ptr, set_bit, Address::times_1, 1), needle_val);\n+        __ je(L_bigCaseFixupAndReturn);\n+        __ blsrl(eq_mask, eq_mask);\n+        __ jne(L_innerLoop);\n+        __ jmp(L_loopTop);\n+      }\n+\n+\n+\n+  \/\/ Big case 7:\n+      large_hs_jmp_table[6] = __ pc();\n+      {\n+        Label L_loopTop, L_innerLoop, L_tmp;\n+\n+        string_indexof_big_loop_helper(7, L_checkRangeAndReturn, L_loopTop);\n+        __ movl(needle_val, Address(needle, 1));\n+        __ jmpb(L_tmp);\n+\n+        __ align(16);\n+        __ bind(L_innerLoop);\n+        __ blsrl(eq_mask, eq_mask);\n+        __ je(L_loopTop);\n+\n+        __ bind(L_tmp);\n+        __ tzcntl(set_bit, eq_mask);\n+        __ cmpl(Address(hs_ptr, set_bit, Address::times_1, 1), needle_val);\n+        __ jne(L_innerLoop);\n+        __ movzbl(hs_val, Address(hs_ptr, set_bit, Address::times_1, 5));\n+        __ cmpb(hs_val, Address(needle, 5));\n+        __ jne(L_innerLoop);\n+        __ jmp(L_small7_8_fixup);\n+      }\n+\n+\n+\n+  \/\/ Big case 8:\n+      large_hs_jmp_table[7] = __ pc();\n+      {\n+        Label L_loopTop, L_innerLoop, L_tmp;\n+\n+        string_indexof_big_loop_helper(8, L_checkRangeAndReturn, L_loopTop);\n+        __ movl(needle_val, Address(needle, 1));\n+        __ jmpb(L_tmp);\n+\n+        __ align(16);\n+        __ bind(L_innerLoop);\n+        __ blsrl(eq_mask, eq_mask);\n+        __ je(L_loopTop);\n+\n+        __ bind(L_tmp);\n+        __ tzcntl(set_bit, eq_mask);\n+        __ cmpl(Address(hs_ptr, set_bit, Address::times_1, 1), needle_val);\n+        __ jne(L_innerLoop);\n+        __ movzwl(hs_val, Address(hs_ptr, set_bit, Address::times_1, 5));\n+        __ cmpw(Address(needle, 5), hs_val);\n+        __ jne(L_innerLoop);\n+\n+        __ bind(L_small7_8_fixup);\n+        __ subq(hs_ptr, haystack);\n+        __ addq(hs_ptr, set_bit);\n+        __ jmp(L_checkRangeAndReturnRCX);\n+      }\n+\n+\n+\n+  \/\/ Big case 9:\n+      large_hs_jmp_table[8] = __ pc();\n+      {\n+        Label L_loopTop, L_innerLoop;\n+\n+        string_indexof_big_loop_helper(9, L_checkRangeAndReturn, L_loopTop);\n+        __ movq(needle_val, Address(needle, 1));\n+\n+        __ align(16);\n+        __ bind(L_innerLoop);\n+        __ tzcntl(set_bit, eq_mask);\n+        __ cmpq(Address(hs_ptr, set_bit, Address::times_1, 1), needle_val);\n+        __ je(L_bigCaseFixupAndReturn);\n+        __ blsrl(eq_mask, eq_mask);\n+        __ jne(L_innerLoop);\n+        __ jmp(L_loopTop);\n+      }\n+\n+\n+\n+  \/\/ Big case 10:\n+      large_hs_jmp_table[9] = __ pc();\n+      {\n+        Label L_loopTop, L_innerLoop;\n+\n+        string_indexof_big_loop_helper(10, L_checkRangeAndReturn, L_loopTop);\n+        __ movq(needle_val, Address(needle, 1));\n+\n+        __ align(16);\n+        __ bind(L_innerLoop);\n+        __ tzcntl(set_bit, eq_mask);\n+        __ cmpq(Address(hs_ptr, set_bit, Address::times_1, 1), needle_val);\n+        __ je(L_bigCaseFixupAndReturn);\n+        __ blsrl(eq_mask, eq_mask);\n+        __ jne(L_innerLoop);\n+        __ jmp(L_loopTop);\n+      }\n@@ -840,0 +904,1 @@\n+#ifdef PUSH_REGS\n@@ -845,0 +910,6 @@\n+#else\n+    __ movdq(rsi, save_rsi);\n+    __ movdq(rdi, save_rdi);\n+    __ movdq(rcx, save_rcx);\n+    __ movdq(r8, save_r8);\n+    __ movdq(r9, save_r9);\n@@ -846,1 +917,2 @@\n-    __ pop(rbp);\n+#endif\n+#ifdef PUSH_REGS\n@@ -852,0 +924,7 @@\n+#else\n+    __ movdq(r12, save_r12);\n+    __ movdq(r13, save_r13);\n+    __ movdq(r14, save_r14);\n+    __ movdq(r15, save_r15);\n+    __ movdq(rbx, save_rbx);\n+#endif\n@@ -863,0 +942,1 @@\n+#ifdef PUSH_REGS\n@@ -868,1 +948,7 @@\n-    __ push(rbp);\n+#else\n+    __ movdq(save_r12, r12);\n+    __ movdq(save_r13, r13);\n+    __ movdq(save_r14, r14);\n+    __ movdq(save_r15, r15);\n+    __ movdq(save_rbx, rbx);\n+#endif\n@@ -870,0 +956,1 @@\n+#ifdef PUSH_REGS\n@@ -875,0 +962,7 @@\n+#else\n+    __ movdq(save_rsi, rsi);\n+    __ movdq(save_rdi, rdi);\n+    __ movdq(save_rcx, rcx);\n+    __ movdq(save_r8, r8);\n+    __ movdq(save_r9, r9);\n+#endif\n@@ -887,2 +981,2 @@\n-    __ movq(r10, rsi);\n-    __ subq(r10, rcx);\n+    __ movq(r10, haystack_len);\n+    __ subq(r10, needle_len);\n@@ -890,2 +984,2 @@\n-    __ movq(r12, rcx);\n-    __ testq(rcx, rcx);\n+    __ movq(save_ndl_len, needle_len);\n+    __ testq(needle_len, needle_len);\n@@ -893,3 +987,3 @@\n-    __ movq(r14, rdx);\n-    __ movq(rbx, rdi);\n-    __ cmpq(rsi, 0x20);\n+    __ movq(r14, needle);\n+    __ movq(rbx, haystack);\n+    __ cmpq(haystack_len, 0x20);\n@@ -898,1 +992,1 @@\n-    __ cmpq(r10, 0xb);      \/\/ ASGASG\n+    __ cmpq(r10, 0xb);      \/\/ Only copy to stack when loop iteration is less than 11\n@@ -900,1 +994,0 @@\n-    \/\/ __ jmpb(L_copyToStack);\n@@ -903,1 +996,1 @@\n-    __ leaq(r13, Address(r12, -1));\n+    __ leaq(r13, Address(save_ndl_len, -1));\n@@ -914,2 +1007,2 @@\n-    __ leaq(rax, Address(r12, 0x1f));\n-    __ cmpq(rax, rsi);\n+    __ leaq(rax, Address(save_ndl_len, 0x1f));\n+    __ cmpq(rax, haystack_len);\n@@ -917,1 +1010,1 @@\n-    __ cmpq(rsi, 0x20);\n+    __ cmpq(haystack_len, 0x20);\n@@ -920,1 +1013,1 @@\n-    __ cmpq(r10, 0xa);\n+    __ cmpq(r10, 0xa);      \/\/ Only copy to stack when loop iteration is less than 11\n@@ -924,1 +1017,1 @@\n-    __ leal(rdx, Address(rsi, -1));\n+    __ leal(rdx, Address(haystack_len, -1));\n@@ -926,1 +1019,1 @@\n-    __ movl(rax, rsi);\n+    __ movl(rax, haystack_len);\n@@ -943,0 +1036,1 @@\n+\n@@ -944,1 +1038,1 @@\n-    __ leaq(rax, Address(r12, -1));\n+    __ leaq(rax, Address(save_ndl_len, -1));\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_string.cpp","additions":399,"deletions":305,"binary":false,"changes":704,"status":"modified"},{"patch":"@@ -1206,1 +1206,1 @@\n-  bool do_intrinsic =\n+  bool call_opt_stub =\n@@ -1210,1 +1210,1 @@\n-  if (!do_intrinsic) {\n+  if (!call_opt_stub) {\n@@ -1221,1 +1221,1 @@\n-  if (do_intrinsic) {\n+  if (call_opt_stub) {\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1344,2 +1344,0 @@\n-  fields[argp++] = TypePtr::NOTNULL;    \/\/ needle array\n-  fields[argp++] = TypeInt::INT;        \/\/ needle length\n@@ -1348,0 +1346,2 @@\n+  fields[argp++] = TypePtr::NOTNULL;    \/\/ needle array\n+  fields[argp++] = TypeInt::INT;        \/\/ needle length\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}