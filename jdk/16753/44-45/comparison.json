{"files":[{"patch":"@@ -258,1 +258,1 @@\n-  Label L_checkRangeAndReturn, L_returnError, L_bigCaseFixupAndReturn;\n+  Label L_returnError, L_bigCaseFixupAndReturn;\n@@ -260,1 +260,1 @@\n-  Label L_nextCheck, L_checksPassed, L_zeroCheckFailed, L_return;\n+  Label L_nextCheck, L_checksPassed, L_return;\n@@ -275,1 +275,0 @@\n-  \/\/ haystack length == 0?\n@@ -277,3 +276,0 @@\n-  __ testq(haystack_len_p, haystack_len_p);\n-  __ je(L_zeroCheckFailed);\n-\n@@ -285,1 +281,0 @@\n-  __ bind(L_zeroCheckFailed);\n@@ -315,2 +310,2 @@\n-  setup_jump_tables(ae, L_returnError, L_checkRangeAndReturn, L_bigCaseFixupAndReturn,\n-                    &big_jump_table, &small_jump_table, _masm);\n+  setup_jump_tables(ae, L_returnError, L_returnR11, L_bigCaseFixupAndReturn, &big_jump_table,\n+                    &small_jump_table, _masm);\n@@ -476,6 +471,1 @@\n-  \/\/ Ensure that the index where a match was found is within valid range.\n-  \/\/ r11 contains -1 or the index where match was found.\n-  __ bind(L_checkRangeAndReturn);\n-  __ movq(rax, -1);\n-  __ cmpq(r11, nMinusK);\n-  __ ja_b(L_return);\n+  \/\/ r11 will contain the valid index.\n@@ -568,3 +558,3 @@\n-    \/\/ helper jumps to L_checkRangeAndReturn with a (-1) return value.\n-    big_case_loop_helper(false, 0, L_checkRangeAndReturn, L_loopTop, mask, hsPtrRet, needleLen,\n-                         needle, haystack, hsLength, tmp1, tmp2, tmp3, rScratch, ae, _masm);\n+    \/\/ helper jumps to L_returnError.\n+    big_case_loop_helper(false, 0, L_returnError, L_loopTop, mask, hsPtrRet, needleLen, needle,\n+                         haystack, hsLength, tmp1, tmp2, tmp3, rScratch, ae, _masm);\n@@ -609,1 +599,1 @@\n-    __ jmp(L_checkRangeAndReturn);\n+    __ jmp(L_returnR11);\n@@ -875,1 +865,1 @@\n-      __ cmpq(nMinusK, 0x20);\n+      __ cmpq(nMinusK, 0x1f);\n@@ -892,3 +882,3 @@\n-      \/\/ helper jumps to L_checkRangeAndReturn with a (-1) return value.\n-      big_case_loop_helper(false, 0, L_checkRangeAndReturn, L_loopTop, mask, hsPtrRet, needleLen,\n-                           needle, haystack, hsLength, tmp1, tmp2, tmp3, rScratch, ae, _masm);\n+      \/\/ helper jumps to L_returnError.\n+      big_case_loop_helper(false, 0, L_returnError, L_loopTop, mask, hsPtrRet, needleLen, needle,\n+                           haystack, hsLength, tmp1, tmp2, tmp3, rScratch, ae, _masm);\n@@ -938,1 +928,1 @@\n-      __ jmp(L_checkRangeAndReturn);\n+      __ jmp(L_returnR11);\n@@ -967,1 +957,1 @@\n-      __ jmp(L_checkRangeAndReturn);\n+      __ jmp(L_returnR11);\n@@ -1302,1 +1292,1 @@\n-  Label L_midLoop, L_greaterThanOrEqual32, L_out;\n+  Label L_midLoop, L_greaterThan32, L_out;\n@@ -1320,2 +1310,2 @@\n-  __ cmpq(nMinusK, 32);\n-  __ jae_b(L_greaterThanOrEqual32);\n+  __ cmpq(nMinusK, 31);\n+  __ jae_b(L_greaterThan32);\n@@ -1326,1 +1316,1 @@\n-  \/\/ back 32 characters, shift the result compare and check that way.\n+  \/\/ back 32 characters, shift the result, compare and check that way.\n@@ -1374,1 +1364,1 @@\n-  __ bind(L_greaterThanOrEqual32);\n+  __ bind(L_greaterThan32);\n@@ -1711,0 +1701,21 @@\n+  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+  \/\/  On entry to each case, the register state is:\n+  \/\/\n+  \/\/  rax = unused\n+  \/\/  rbx = &haystack\n+  \/\/  rcx = haystack length\n+  \/\/  rdx = &needle\n+  \/\/  rsi = haystack length\n+  \/\/  rdi = &haystack\n+  \/\/  rbp = unused\n+  \/\/  r8  = unused\n+  \/\/  r9  = unused\n+  \/\/  r10 = hs_len - needle len\n+  \/\/  r11 = unused\n+  \/\/  r12 = needle length\n+  \/\/  r13 = (needle length - 1)\n+  \/\/  r14 = &needle\n+  \/\/  r15 = unused\n+  \/\/  XMM_BYTE_0 - first element of needle, broadcast\n+  \/\/  XMM_BYTE_K - last element of needle, broadcast\n+\n@@ -1720,20 +1731,0 @@\n-    \/\/  On entry to each case of small_hs, the register state is:\n-    \/\/\n-    \/\/  rax = unused\n-    \/\/  rbx = &haystack\n-    \/\/  rcx = haystack length\n-    \/\/  rdx = &needle\n-    \/\/  rsi = haystack length\n-    \/\/  rdi = &haystack\n-    \/\/  rbp = unused\n-    \/\/  r8  = unused\n-    \/\/  r9  = unused\n-    \/\/  r10 = hs_len - needle len\n-    \/\/  r11 = unused\n-    \/\/  r12 = needle length\n-    \/\/  r13 = (needle length - 1)\n-    \/\/  r14 = &needle\n-    \/\/  r15 = unused\n-    \/\/  XMM_BYTE_0 - first element of needle, broadcast\n-    \/\/  XMM_BYTE_K - last element of needle, broadcast\n-    \/\/\n@@ -1778,1 +1769,0 @@\n-\n@@ -1780,20 +1770,0 @@\n-    \/\/  On entry to each case of large_hs, the register state is:\n-    \/\/\n-    \/\/  rax = unused\n-    \/\/  rbx = &haystack\n-    \/\/  rcx = haystack length\n-    \/\/  rdx = &needle\n-    \/\/  rsi = haystack length\n-    \/\/  rdi = &haystack\n-    \/\/  rbp = unused\n-    \/\/  r8  = unused\n-    \/\/  r9  = unused\n-    \/\/  r10 = hs_len - needle len\n-    \/\/  r11 = unused\n-    \/\/  r12 = needle length\n-    \/\/  r13 = (needle length - 1)\n-    \/\/  r14 = &needle\n-    \/\/  r15 = unused\n-    \/\/  XMM_BYTE_0 - first element of needle, broadcast\n-    \/\/  XMM_BYTE_K - last element of needle, broadcast\n-    \/\/\n","filename":"src\/hotspot\/cpu\/x86\/c2_stubGenerator_x86_64_string.cpp","additions":41,"deletions":71,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  _compiler_stubs_code_size     = 20000 LP64_ONLY(+45000) WINDOWS_ONLY(+2000),\n+  _compiler_stubs_code_size     = 20000 LP64_ONLY(+46000) WINDOWS_ONLY(+2000),\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1249,0 +1249,2 @@\n+\n+  assert(arrayOopDesc::base_offset_in_bytes(T_BYTE) >= 16, \"Needed for indexOf\");\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}