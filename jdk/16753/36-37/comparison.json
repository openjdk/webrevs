{"files":[{"patch":"@@ -27,0 +27,2 @@\n+ * @run main\/othervm IndexOf\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xcomp -XX:-TieredCompilation -XX:UseAVX=2 -XX:+UnlockDiagnosticVMOptions -XX:+EnableX86ECoreOpts IndexOf\n@@ -42,4 +44,4 @@\n-  \/\/ \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-  \/\/ \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-  char[] haystack = new char[128];\n-  char[] haystack_16 = new char[128];\n+    \/\/ \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+    \/\/ \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+    char[] haystack = new char[128];\n+    char[] haystack_16 = new char[128];\n@@ -47,3 +49,3 @@\n-  for (int i = 0; i < 128; i++) {\n-    haystack[i] = (char) i;\n-  }\n+    for (int i = 0; i < 128; i++) {\n+      haystack[i] = (char) i;\n+    }\n@@ -51,3 +53,3 @@\n-  for (int i = 0; i < 128; i++) {\n-    haystack_16[i] = (char) (i + 256);\n-  }\n+    for (int i = 0; i < 128; i++) {\n+      haystack_16[i] = (char) (i + 256);\n+    }\n@@ -56,32 +58,22 @@\n-  Charset hs_charset = StandardCharsets.UTF_16;\n-  Charset needleCharset = StandardCharsets.ISO_8859_1;\n-\n-  int l_offset = 0;\n-  int needleSize = 65;\n-  int haystackSize = 66;\n-  int result = 0;\n-\n-  String needle = new String(Arrays.copyOfRange((needleCharset == StandardCharsets.UTF_16) ? haystack_16 : haystack, l_offset, l_offset + needleSize));\n-  int hsSize = (haystackSize - l_offset) >= 0 ? haystackSize - l_offset : 0;\n-  int midStart = hsSize \/ 2;\n-  int endStart = (hsSize > needleSize) ? hsSize - needleSize : 0;\n-  String midNeedle = new String(\n-      Arrays.copyOfRange((needleCharset == StandardCharsets.UTF_16) ? haystack_16 : haystack, midStart + l_offset, midStart + needleSize + l_offset));\n-  String endNeedle = new String(\n-      Arrays.copyOfRange((needleCharset == StandardCharsets.UTF_16) ? haystack_16 : haystack, endStart + l_offset, endStart + needleSize + l_offset));\n-  \/\/ String shs = new String(Arrays.copyOfRange((hs_charset == StandardCharsets.UTF_16) ? haystack_16 : haystack, 0, haystackSize));\n-  String shs = (new String((hs_charset == StandardCharsets.UTF_16) ? haystack_16 : haystack)).substring(0, haystackSize);\n-\n-  endNeedle = \"\/'!(\\\"3\/\/\";\n-  shs = \");:(\/!-+ %*\/'!(\\\"3\/\/;9\";\n-  l_offset = 0;\n-  StringBuffer bshs = new StringBuffer(shs);\n-\n-  \/\/ printStringBytes(shs.getBytes(hs_charset));\n-  for (int i = 0; i < 200000; i++) {\n-    if(shs.indexOf(endNeedle, l_offset) != -1) {\n-      \/\/ System.out.println(\"result=\"+bshs.indexOf(endNeedle, l_offset));\n-    }\n-    result += bshs.indexOf(endNeedle, l_offset);\n-    \/\/ System.out.print(result + \" \" + needle + \" \" + shs);\n-  }\n+    Charset hs_charset = StandardCharsets.UTF_16;\n+    Charset needleCharset = StandardCharsets.ISO_8859_1;\n+\n+    int l_offset = 0;\n+    int needleSize = 65;\n+    int haystackSize = 66;\n+    int result = 0;\n+\n+    String needle = new String(Arrays.copyOfRange((needleCharset == StandardCharsets.UTF_16) ? haystack_16 : haystack, l_offset, l_offset + needleSize));\n+    int hsSize = (haystackSize - l_offset) >= 0 ? haystackSize - l_offset : 0;\n+    int midStart = hsSize \/ 2;\n+    int endStart = (hsSize > needleSize) ? hsSize - needleSize : 0;\n+    String midNeedle = new String(\n+        Arrays.copyOfRange((needleCharset == StandardCharsets.UTF_16) ? haystack_16 : haystack, midStart + l_offset, midStart + needleSize + l_offset));\n+    String endNeedle = new String(\n+        Arrays.copyOfRange((needleCharset == StandardCharsets.UTF_16) ? haystack_16 : haystack, endStart + l_offset, endStart + needleSize + l_offset));\n+    String shs = (new String((hs_charset == StandardCharsets.UTF_16) ? haystack_16 : haystack)).substring(0, haystackSize);\n+\n+    endNeedle = \"\/'!(\\\"3\/\/\";\n+    shs = \");:(\/!-+ %*\/'!(\\\"3\/\/;9\";\n+    l_offset = 0;\n+    StringBuffer bshs = new StringBuffer(shs);\n@@ -89,2 +81,2 @@\n-  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n","filename":"test\/jdk\/java\/lang\/StringBuffer\/IndexOf.java","additions":36,"deletions":44,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -68,0 +68,7 @@\n+  private String Amdahl_1;\n+  private String Amdahl_2;\n+  private String Amdahl_3;\n+  private String Amdahl_4;\n+  private String Amdahl_5;\n+  private String Amdahl_6;\n+\n@@ -91,0 +98,7 @@\n+\n+    Amdahl_1 = \"B\".repeat(30) + \"X\" + \"A\".repeat(30);\n+    Amdahl_2 = \"A\".repeat(32) + \"F\" + \"B\".repeat(32);\n+    Amdahl_3 = \"A\".repeat(32) + \"B\".repeat(32) + \"XbB\";\n+    Amdahl_4 = \"B\".repeat(30) + \"\\u01ef\" + \"A\".repeat(30);\n+    Amdahl_5 = \"A\".repeat(32) + \"\\u01ef\" + \"B\".repeat(32);\n+    Amdahl_6 = \"A\".repeat(32) + \"B\".repeat(32) + \"\\u01fe\\u01eeB\";\n@@ -132,1 +146,1 @@\n-      return dataStringHuge.indexOf(\"B\".repeat(30) + \"X\" + \"A\".repeat(30), 74);\n+      return dataStringHuge.indexOf(Amdahl_1, 74);\n@@ -137,1 +151,1 @@\n-      return dataStringHuge.indexOf(\"A\".repeat(32) + \"F\" + \"B\".repeat(32), 64);\n+      return dataStringHuge.indexOf(Amdahl_2, 64);\n@@ -147,1 +161,1 @@\n-      return dataStringHuge.indexOf(\"A\".repeat(32) + \"B\".repeat(32) + \"XbB\");\n+      return dataStringHuge.indexOf(Amdahl_3);\n@@ -187,1 +201,1 @@\n-    return dataStringHuge16.indexOf(\"B\".repeat(30) + \"X\" + \"A\".repeat(30), 74);\n+    return dataStringHuge16.indexOf(Amdahl_1, 74);\n@@ -192,1 +206,1 @@\n-    return dataStringHuge16.indexOf(\"A\".repeat(32) + \"F\" + \"B\".repeat(32), 64);\n+    return dataStringHuge16.indexOf(Amdahl_2, 64);\n@@ -202,1 +216,1 @@\n-    return dataStringHuge16.indexOf(\"A\".repeat(32) + \"B\".repeat(32) + \"XbB\");\n+    return dataStringHuge16.indexOf(Amdahl_3);\n@@ -242,1 +256,1 @@\n-    return dataStringHuge16.indexOf(\"B\".repeat(30) + \"\\\\u01ef\" + \"A\".repeat(30), 74);\n+    return dataStringHuge16.indexOf(Amdahl_4, 74);\n@@ -247,1 +261,1 @@\n-    return dataStringHuge16.indexOf(\"A\".repeat(32) + \"\\u01ef\" + \"B\".repeat(32), 64);\n+    return dataStringHuge16.indexOf(Amdahl_5, 64);\n@@ -257,1 +271,1 @@\n-    return dataStringHuge16.indexOf(\"A\".repeat(32) + \"B\".repeat(32) + \"\\u01fe\\u01eeB\");\n+    return dataStringHuge16.indexOf(Amdahl_6);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringIndexOfHuge.java","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"}]}