{"files":[{"patch":"@@ -31,1 +31,1 @@\n-#include <functional>\n+\/\/ #include <functional>\n@@ -144,3 +144,3 @@\n-                                       bool isU, Register eq_mask, Register needleLen,\n-                                       Register rTmp, XMMRegister rxTmp1, XMMRegister rxTmp2,\n-                                       MacroAssembler *_masm);\n+                                       Register eq_mask, Register needleLen, Register rTmp,\n+                                       XMMRegister rxTmp1, XMMRegister rxTmp2,\n+                                       StrIntrinsicNode::ArgEncoding ae, MacroAssembler *_masm);\n@@ -168,0 +168,9 @@\n+static void vpcmpeq(XMMRegister dst, XMMRegister src, Address adr, int vector_len,\n+                    StrIntrinsicNode::ArgEncoding ae, MacroAssembler *_masm) {\n+  if ((ae == StrIntrinsicNode::UL) || (ae == StrIntrinsicNode::UU)) {\n+      __ vpcmpeqw(dst, src, adr, vector_len);\n+  } else {\n+      __ vpcmpeqb(dst, src, adr, vector_len);\n+  }\n+}\n+\n@@ -687,2 +696,2 @@\n-    compare_haystack_to_needle(false, 0, L_returnRBP, haystack, isU, mask, needleLen, rTmp3,\n-                               XMM_TMP1, XMM_TMP2, _masm);\n+    compare_haystack_to_needle(false, 0, L_returnRBP, haystack, mask, needleLen, rTmp3, XMM_TMP1,\n+                               XMM_TMP2, ae, _masm);\n@@ -1135,2 +1144,2 @@\n-  \/\/ Set up lambdas for performing correctly-sized comparisons\n-  std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n+  \/\/ \/\/ Set up lambdas for performing correctly-sized comparisons\n+  \/\/ std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n@@ -1138,9 +1147,9 @@\n-  if (isU) {\n-    vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-      __ vpcmpeqw(dst, src, adr, vector_len);\n-    };\n-  } else {\n-    vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-      __ vpcmpeqb(dst, src, adr, vector_len);\n-    };\n-  }\n+  \/\/ if (isU) {\n+  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n+  \/\/     __ vpcmpeqw(dst, src, adr, vector_len);\n+  \/\/   };\n+  \/\/ } else {\n+  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n+  \/\/     __ vpcmpeqb(dst, src, adr, vector_len);\n+  \/\/   };\n+  \/\/ }\n@@ -1161,1 +1170,1 @@\n-     vpcmpeq(cmp_0, XMM_BYTE_0, Address(haystack, 0), Assembler::AVX_256bit);\n+     vpcmpeq(cmp_0, XMM_BYTE_0, Address(haystack, 0), Assembler::AVX_256bit, ae, _masm);\n@@ -1168,1 +1177,1 @@\n-    vpcmpeq(cmp_k, XMM_BYTE_K, kThByte, Assembler::AVX_256bit);\n+    vpcmpeq(cmp_k, XMM_BYTE_K, kThByte, Assembler::AVX_256bit, ae, _masm);\n@@ -1173,1 +1182,1 @@\n-      vpcmpeq(cmp_k, XMM_BYTE_1, Address(haystack, 1 * sizeIncr), Assembler::AVX_256bit);\n+      vpcmpeq(cmp_k, XMM_BYTE_1, Address(haystack, 1 * sizeIncr), Assembler::AVX_256bit, ae, _masm);\n@@ -1216,3 +1225,3 @@\n-                                       bool isU, Register eq_mask, Register needleLen,\n-                                       Register rTmp, XMMRegister rxTmp1, XMMRegister rxTmp2,\n-                                       MacroAssembler *_masm) {\n+                                       Register eq_mask, Register needleLen, Register rTmp,\n+                                       XMMRegister rxTmp1, XMMRegister rxTmp2,\n+                                       StrIntrinsicNode::ArgEncoding ae, MacroAssembler *_masm) {\n@@ -1227,2 +1236,3 @@\n-  \/\/ Set up lambdas for performing correctly-sized comparisons\n-  std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n+  bool isUL = (ae == StrIntrinsicNode::UL);\n+  bool isUU = (ae == StrIntrinsicNode::UU);\n+  bool isU = isUL || isUU;  \/\/ At least one is UTF-16\n@@ -1230,9 +1240,12 @@\n-  if (isU) {\n-    vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-      __ vpcmpeqw(dst, src, adr, vector_len);\n-    };\n-  } else {\n-    vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-      __ vpcmpeqb(dst, src, adr, vector_len);\n-    };\n-  }\n+  \/\/ \/\/ Set up lambdas for performing correctly-sized comparisons\n+  \/\/ std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n+\n+  \/\/ if (isU) {\n+  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n+  \/\/     __ vpcmpeqw(dst, src, adr, vector_len);\n+  \/\/   };\n+  \/\/ } else {\n+  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n+  \/\/     __ vpcmpeqb(dst, src, adr, vector_len);\n+  \/\/   };\n+  \/\/ }\n@@ -1258,1 +1271,1 @@\n-     vpcmpeq(cmp_0, XMM_BYTE_0, Address(haystack, 0), Assembler::AVX_256bit);\n+     vpcmpeq(cmp_0, XMM_BYTE_0, Address(haystack, 0), Assembler::AVX_256bit, ae, _masm);\n@@ -1261,1 +1274,1 @@\n-    vpcmpeq(cmp_k, XMM_BYTE_K, kThByte, Assembler::AVX_256bit);\n+    vpcmpeq(cmp_k, XMM_BYTE_K, kThByte, Assembler::AVX_256bit, ae, _masm);\n@@ -1266,1 +1279,1 @@\n-      vpcmpeq(cmp_k, XMM_BYTE_1, Address(haystack, 1 * sizeIncr), Assembler::AVX_256bit);\n+      vpcmpeq(cmp_k, XMM_BYTE_1, Address(haystack, 1 * sizeIncr), Assembler::AVX_256bit, ae, _masm);\n@@ -1344,2 +1357,2 @@\n-  \/\/ Set up lambdas for performing correctly-sized comparisons\n-  std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n+  \/\/ \/\/ Set up lambdas for performing correctly-sized comparisons\n+  \/\/ std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n@@ -1347,9 +1360,9 @@\n-  if (isU) {\n-    vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-      __ vpcmpeqw(dst, src, adr, vector_len);\n-    };\n-  } else {\n-    vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-      __ vpcmpeqb(dst, src, adr, vector_len);\n-    };\n-  }\n+  \/\/ if (isU) {\n+  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n+  \/\/     __ vpcmpeqw(dst, src, adr, vector_len);\n+  \/\/   };\n+  \/\/ } else {\n+  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n+  \/\/     __ vpcmpeqb(dst, src, adr, vector_len);\n+  \/\/   };\n+  \/\/ }\n@@ -1380,1 +1393,1 @@\n-    vpcmpeq(XMM_TMP3, XMM_BYTE_0, Address(haystack, 0), Assembler::AVX_256bit);\n+    vpcmpeq(XMM_TMP3, XMM_BYTE_0, Address(haystack, 0), Assembler::AVX_256bit, ae, _masm);\n@@ -1502,0 +1515,29 @@\n+  \/\/ Pre-load the needle bytes to compare here\n+  switch (bytesLeftToCompare) {\n+  case 1:\n+  case 2:\n+    \/\/ Load for needle size of 4 and 5 bytes\n+    __ movl(needleVal, Address(needle, (offsetOfFirstByteToCompare - 2)));\n+    break;\n+\n+  case 3:\n+  case 4:\n+    \/\/ Load for needle size of 6 and 7 bytes\n+    __ movl(needleVal, Address(needle, offsetOfFirstByteToCompare));\n+    break;\n+\n+  case 5:\n+  case 6:\n+    \/\/ Load for needle size of 8 and 9 bytes\n+    __ movq(needleVal, Address(needle, (offsetOfFirstByteToCompare - 2)));\n+    break;\n+\n+  case 7:\n+    \/\/ Load for needle size of 10 bytes\n+    __ movq(needleVal, Address(needle, offsetOfFirstByteToCompare));\n+    break;\n+\n+  default:\n+    break;\n+  }\n+\n@@ -1510,1 +1552,0 @@\n-    __ movl(needleVal, Address(needle, (offsetOfFirstByteToCompare - 2)));\n@@ -1519,1 +1560,0 @@\n-    __ movl(needleVal, Address(needle, offsetOfFirstByteToCompare));\n@@ -1527,1 +1567,0 @@\n-    __ movq(needleVal, Address(needle, (offsetOfFirstByteToCompare - 2)));\n@@ -1535,1 +1574,0 @@\n-    __ movq(needleVal, Address(needle, offsetOfFirstByteToCompare));\n@@ -1583,2 +1621,2 @@\n-  \/\/ Set up lambdas for performing correctly-sized comparisons\n-  std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n+  \/\/ \/\/ Set up lambdas for performing correctly-sized comparisons\n+  \/\/ std::function<void(XMMRegister dst, XMMRegister src, Address adr, int vector_len)> vpcmpeq;\n@@ -1586,9 +1624,9 @@\n-  if (isU) {\n-    vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-      __ vpcmpeqw(dst, src, adr, vector_len);\n-    };\n-  } else {\n-    vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n-      __ vpcmpeqb(dst, src, adr, vector_len);\n-    };\n-  }\n+  \/\/ if (isU) {\n+  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n+  \/\/     __ vpcmpeqw(dst, src, adr, vector_len);\n+  \/\/   };\n+  \/\/ } else {\n+  \/\/   vpcmpeq = [_masm](XMMRegister dst, XMMRegister src, Address adr, int vector_len) {\n+  \/\/     __ vpcmpeqb(dst, src, adr, vector_len);\n+  \/\/   };\n+  \/\/ }\n@@ -1660,1 +1698,1 @@\n-    vpcmpeq(XMM1, XMM0, Address(haystack, haystack_position), Assembler::AVX_256bit);\n+    vpcmpeq(XMM1, XMM0, Address(haystack, haystack_position), Assembler::AVX_256bit, ae, _masm);\n@@ -1770,2 +1808,2 @@\n-        compare_haystack_to_needle(true, i + 1, L_error, haystack, isU, eq_mask, noreg, rTmp,\n-                                   XMM_TMP1, XMM_TMP2, _masm);\n+        compare_haystack_to_needle(true, i + 1, L_error, haystack, eq_mask, noreg, rTmp, XMM_TMP1,\n+                                   XMM_TMP2, ae, _masm);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_string.cpp","additions":105,"deletions":67,"binary":false,"changes":172,"status":"modified"}]}