{"files":[{"patch":"@@ -333,1 +333,98 @@\n-public:\n+protected:\n+\n+  static int zfa_zli_lookup_double(uint64_t value) {\n+    switch(value) {\n+      case 0xbff0000000000000 : return   0;\n+      case 0x0010000000000000 : return   1;\n+      case 0x3ef0000000000000 : return   2;\n+      case 0x3f00000000000000 : return   3;\n+      case 0x3f70000000000000 : return   4;\n+      case 0x3f80000000000000 : return   5;\n+      case 0x3fb0000000000000 : return   6;\n+      case 0x3fc0000000000000 : return   7;\n+      case 0x3fd0000000000000 : return   8;\n+      case 0x3fd4000000000000 : return   9;\n+      case 0x3fd8000000000000 : return  10;\n+      case 0x3fdc000000000000 : return  11;\n+      case 0x3fe0000000000000 : return  12;\n+      case 0x3fe4000000000000 : return  13;\n+      case 0x3fe8000000000000 : return  14;\n+      case 0x3fec000000000000 : return  15;\n+      case 0x3ff0000000000000 : return  16;\n+      case 0x3ff4000000000000 : return  17;\n+      case 0x3ff8000000000000 : return  18;\n+      case 0x3ffc000000000000 : return  19;\n+      case 0x4000000000000000 : return  20;\n+      case 0x4004000000000000 : return  21;\n+      case 0x4008000000000000 : return  22;\n+      case 0x4010000000000000 : return  23;\n+      case 0x4020000000000000 : return  24;\n+      case 0x4030000000000000 : return  25;\n+      case 0x4060000000000000 : return  26;\n+      case 0x4070000000000000 : return  27;\n+      case 0x40e0000000000000 : return  28;\n+      case 0x40f0000000000000 : return  29;\n+      case 0x7ff0000000000000 : return  30;\n+      case 0x7ff8000000000000 : return  31;\n+      default: break;\n+    }\n+    return -1;\n+  }\n+\n+\n+  static int zfa_zli_lookup_float(uint32_t value) {\n+    switch(value) {\n+      case 0xbf800000 : return  0;\n+      case 0x00800000 : return  1;\n+      case 0x37800000 : return  2;\n+      case 0x38000000 : return  3;\n+      case 0x3b800000 : return  4;\n+      case 0x3c000000 : return  5;\n+      case 0x3d800000 : return  6;\n+      case 0x3e000000 : return  7;\n+      case 0x3e800000 : return  8;\n+      case 0x3ea00000 : return  9;\n+      case 0x3ec00000 : return 10;\n+      case 0x3ee00000 : return 11;\n+      case 0x3f000000 : return 12;\n+      case 0x3f200000 : return 13;\n+      case 0x3f400000 : return 14;\n+      case 0x3f600000 : return 15;\n+      case 0x3f800000 : return 16;\n+      case 0x3fa00000 : return 17;\n+      case 0x3fc00000 : return 18;\n+      case 0x3fe00000 : return 19;\n+      case 0x40000000 : return 20;\n+      case 0x40200000 : return 21;\n+      case 0x40400000 : return 22;\n+      case 0x40800000 : return 23;\n+      case 0x41000000 : return 24;\n+      case 0x41800000 : return 25;\n+      case 0x43000000 : return 26;\n+      case 0x43800000 : return 27;\n+      case 0x47000000 : return 28;\n+      case 0x47800000 : return 29;\n+      case 0x7f800000 : return 30;\n+      case 0x7fc00000 : return 31;\n+      default: break;\n+    }\n+    return -1;\n+  }\n+\n+ public:\n+\n+  static bool can_zfa_zli_float(jfloat f) {\n+    if (!UseZfa) {\n+      return false;\n+    }\n+    uint32_t f_bits = (uint32_t)jint_cast(f);\n+    return zfa_zli_lookup_float(f_bits) != -1;\n+  }\n+\n+  static bool can_zfa_zli_double(jdouble d) {\n+    if (!UseZfa) {\n+      return false;\n+    }\n+    uint64_t d_bits = (uint64_t)julong_cast(d);\n+    return zfa_zli_lookup_double(d_bits) != -1;\n+  }\n@@ -975,0 +1072,7 @@\n+  template <FmtPrecision Fmt, uint8_t funct5>\n+  void fp_base(FloatRegister Rd, uint8_t Rs1, uint8_t Rs2, int8_t rm) {\n+    guarantee(is_uimm5(Rs1), \"Rs1 is out of validity\");\n+    guarantee(is_uimm5(Rs2), \"Rs2 is out of validity\");\n+    fp_base<Fmt, funct5>(Rd->raw_encoding(), Rs1, Rs2, (RoundingMode)rm);\n+  }\n+\n@@ -1296,0 +1400,12 @@\n+\/\/ --------------  ZFA Instruction Definitions  --------------\n+\/\/ Zfa Extension for Additional Floating-Point Instructions\n+  void _fli_s(FloatRegister Rd, uint8_t Rs1) {\n+    assert_cond(UseZfa);\n+    fp_base<S_32_sp, 0b11110>(Rd, Rs1, 0b00001, 0b000);\n+  }\n+\n+  void _fli_d(FloatRegister Rd, uint8_t Rs1) {\n+    assert_cond(UseZfa);\n+    fp_base<D_64_dp, 0b11110>(Rd, Rs1, 0b00001, 0b000);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":117,"deletions":1,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -428,0 +428,2 @@\n+  jfloat fconst;\n+  jdouble dconst;\n@@ -463,3 +465,8 @@\n-      const_addr = float_constant(c->as_jfloat());\n-      assert(const_addr != nullptr, \"must create float constant in the constant table\");\n-      __ flw(dest->as_float_reg(), InternalAddress(const_addr));\n+      fconst = c->as_jfloat();\n+      if (MacroAssembler::can_fp_imm_load(fconst)) {\n+        __ fli_s(dest->as_float_reg(), fconst);\n+      } else {\n+        const_addr = float_constant(fconst);\n+        assert(const_addr != nullptr, \"must create float constant in the constant table\");\n+        __ flw(dest->as_float_reg(), InternalAddress(const_addr));\n+      }\n@@ -469,3 +476,8 @@\n-      const_addr = double_constant(c->as_jdouble());\n-      assert(const_addr != nullptr, \"must create double constant in the constant table\");\n-      __ fld(dest->as_double_reg(), InternalAddress(const_addr));\n+      dconst = c->as_jdouble();\n+      if (MacroAssembler::can_dp_imm_load(dconst)) {\n+        __ fli_d(dest->as_double_reg(), dconst);\n+      } else {\n+        const_addr = double_constant(c->as_jdouble());\n+        assert(const_addr != nullptr, \"must create double constant in the constant table\");\n+        __ fld(dest->as_double_reg(), InternalAddress(const_addr));\n+      }\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+  product(bool, UseZfa, false, EXPERIMENTAL, \"Use Zfa instructions\")             \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2596,0 +2596,39 @@\n+\/\/ floating point imm move\n+bool MacroAssembler::can_fp_imm_load(float imm) {\n+  jint f_bits = jint_cast(imm);\n+  if (f_bits == 0) {\n+    return true;\n+  }\n+  return can_zfa_zli_float(imm);\n+}\n+\n+bool MacroAssembler::can_dp_imm_load(double imm) {\n+  julong d_bits = julong_cast(imm);\n+  if (d_bits == 0) {\n+    return true;\n+  }\n+  return can_zfa_zli_double(imm);\n+}\n+\n+void MacroAssembler::fli_s(FloatRegister Rd, float imm) {\n+  jint f_bits = jint_cast(imm);\n+  if (f_bits == 0) {\n+    fmv_w_x(Rd, zr);\n+    return;\n+  }\n+  int Rs = zfa_zli_lookup_float(f_bits);\n+  assert(Rs != -1, \"Must be\");\n+  _fli_s(Rd, Rs);\n+}\n+\n+void MacroAssembler::fli_d(FloatRegister Rd, double imm) {\n+  uint64_t d_bits = (uint64_t)julong_cast(imm);\n+  if (d_bits == 0) {\n+    fmv_d_x(Rd, zr);\n+    return;\n+  }\n+  int Rs = zfa_zli_lookup_double(d_bits);\n+  assert(Rs != -1, \"Must be\");\n+  _fli_d(Rd, Rs);\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -923,0 +923,5 @@\n+  \/\/ float imm move\n+  static bool can_fp_imm_load(float imm);\n+  static bool can_dp_imm_load(double imm);\n+  void fli_s(FloatRegister Rd, float imm);\n+  void fli_d(FloatRegister Rd, double imm);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4923,1 +4923,5 @@\n-    __ flw(as_FloatRegister($dst$$reg), $constantaddress($con));\n+      if (MacroAssembler::can_fp_imm_load($con$$constant)) {\n+        __ fli_s(as_FloatRegister($dst$$reg), $con$$constant);\n+      } else {\n+        __ flw(as_FloatRegister($dst$$reg), $constantaddress($con));\n+      }\n@@ -4953,1 +4957,5 @@\n-    __ fld(as_FloatRegister($dst$$reg), $constantaddress($con));\n+      if (MacroAssembler::can_dp_imm_load($con$$constant)) {\n+        __ fli_d(as_FloatRegister($dst$$reg), $con$$constant);\n+      } else {\n+        __ fld(as_FloatRegister($dst$$reg), $constantaddress($con));\n+      }\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -160,0 +160,1 @@\n+  decl(ext_Zfa         , \"Zfa\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfa))         \\\n@@ -229,0 +230,1 @@\n+    RV_ENABLE_EXTENSION(UseZfa)                     \\\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}