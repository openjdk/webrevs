{"files":[{"patch":"@@ -333,1 +333,100 @@\n-public:\n+private:\n+\n+  static bool zfa_zli_lookup_double(uint64_t value, int* Rs) {\n+    (*Rs) = -1;\n+    switch(value) {\n+      case 0xbff0000000000000 : (*Rs) =   0; return true;\n+      case 0x0010000000000000 : (*Rs) =   1; return true;\n+      case 0x3ef0000000000000 : (*Rs) =   2; return true;\n+      case 0x3f00000000000000 : (*Rs) =   3; return true;\n+      case 0x3f70000000000000 : (*Rs) =   4; return true;\n+      case 0x3f80000000000000 : (*Rs) =   5; return true;\n+      case 0x3fb0000000000000 : (*Rs) =   6; return true;\n+      case 0x3fc0000000000000 : (*Rs) =   7; return true;\n+      case 0x3fd0000000000000 : (*Rs) =   8; return true;\n+      case 0x3fd4000000000000 : (*Rs) =   9; return true;\n+      case 0x3fd8000000000000 : (*Rs) =  10; return true;\n+      case 0x3fdc000000000000 : (*Rs) =  11; return true;\n+      case 0x3fe0000000000000 : (*Rs) =  12; return true;\n+      case 0x3fe4000000000000 : (*Rs) =  13; return true;\n+      case 0x3fe8000000000000 : (*Rs) =  14; return true;\n+      case 0x3fec000000000000 : (*Rs) =  15; return true;\n+      case 0x3ff0000000000000 : (*Rs) =  16; return true;\n+      case 0x3ff4000000000000 : (*Rs) =  17; return true;\n+      case 0x3ff8000000000000 : (*Rs) =  18; return true;\n+      case 0x3ffc000000000000 : (*Rs) =  19; return true;\n+      case 0x4000000000000000 : (*Rs) =  20; return true;\n+      case 0x4004000000000000 : (*Rs) =  21; return true;\n+      case 0x4008000000000000 : (*Rs) =  22; return true;\n+      case 0x4010000000000000 : (*Rs) =  23; return true;\n+      case 0x4020000000000000 : (*Rs) =  24; return true;\n+      case 0x4030000000000000 : (*Rs) =  25; return true;\n+      case 0x4060000000000000 : (*Rs) =  26; return true;\n+      case 0x4070000000000000 : (*Rs) =  27; return true;\n+      case 0x40e0000000000000 : (*Rs) =  28; return true;\n+      case 0x40f0000000000000 : (*Rs) =  29; return true;\n+      case 0x7ff0000000000000 : (*Rs) =  30; return true;\n+      case 0x7ff8000000000000 : (*Rs) =  31; return true;\n+      default: break;\n+    }\n+    return false;\n+  }\n+\n+\n+  static bool zfa_zli_lookup_float(uint32_t value, int* Rs = nullptr) {\n+    (*Rs) = -1;\n+    switch(value) {\n+      case 0xbf800000 : (*Rs) =  0; return true;\n+      case 0x00800000 : (*Rs) =  1; return true;\n+      case 0x37800000 : (*Rs) =  2; return true;\n+      case 0x38000000 : (*Rs) =  3; return true;\n+      case 0x3b800000 : (*Rs) =  4; return true;\n+      case 0x3c000000 : (*Rs) =  5; return true;\n+      case 0x3d800000 : (*Rs) =  6; return true;\n+      case 0x3e000000 : (*Rs) =  7; return true;\n+      case 0x3e800000 : (*Rs) =  8; return true;\n+      case 0x3ea00000 : (*Rs) =  9; return true;\n+      case 0x3ec00000 : (*Rs) = 10; return true;\n+      case 0x3ee00000 : (*Rs) = 11; return true;\n+      case 0x3f000000 : (*Rs) = 12; return true;\n+      case 0x3f200000 : (*Rs) = 13; return true;\n+      case 0x3f400000 : (*Rs) = 14; return true;\n+      case 0x3f600000 : (*Rs) = 15; return true;\n+      case 0x3f800000 : (*Rs) = 16; return true;\n+      case 0x3fa00000 : (*Rs) = 17; return true;\n+      case 0x3fc00000 : (*Rs) = 18; return true;\n+      case 0x3fe00000 : (*Rs) = 19; return true;\n+      case 0x40000000 : (*Rs) = 20; return true;\n+      case 0x40200000 : (*Rs) = 21; return true;\n+      case 0x40400000 : (*Rs) = 22; return true;\n+      case 0x40800000 : (*Rs) = 23; return true;\n+      case 0x41000000 : (*Rs) = 24; return true;\n+      case 0x41800000 : (*Rs) = 25; return true;\n+      case 0x43000000 : (*Rs) = 26; return true;\n+      case 0x43800000 : (*Rs) = 27; return true;\n+      case 0x47000000 : (*Rs) = 28; return true;\n+      case 0x47800000 : (*Rs) = 29; return true;\n+      case 0x7f800000 : (*Rs) = 30; return true;\n+      case 0x7fc00000 : (*Rs) = 31; return true;\n+      default: break;\n+    }\n+    return false;\n+  }\n+\n+ public:\n+\n+  static bool can_zfa_zli_float(jfloat f, int* Rs) {\n+    if (!UseZfa) {\n+      return false;\n+    }\n+    uint32_t f_bits = (uint32_t)jint_cast(f);\n+    return zfa_zli_lookup_float(f_bits, Rs);\n+  }\n+\n+  static bool can_zfa_zli_double(jdouble d, int* Rs) {\n+    if (!UseZfa) {\n+      return false;\n+    }\n+    uint64_t d_bits = (uint64_t)julong_cast(d);\n+    return zfa_zli_lookup_double(d_bits, Rs);\n+  }\n@@ -1094,0 +1193,24 @@\n+  void _fli_s(FloatRegister Rd, uint8_t Rs1) {\n+    guarantee(is_uimm5(Rs1), \"uimm is invalid\");\n+    unsigned insn = 0;\n+    patch((address)&insn,   6, 0, 0b1010011);\n+    patch_reg((address)&insn,  7, Rd);\n+    patch((address)&insn, 14, 12, 0b000);\n+    patch((address)&insn, 19, 15, Rs1);\n+    patch((address)&insn,     20, 0b00001);\n+    patch((address)&insn, 31, 25, 0b1111000);\n+    emit(insn);\n+  }\n+\n+  void _fli_d(FloatRegister Rd, uint8_t Rs1) {\n+    guarantee(is_uimm5(Rs1), \"uimm is invalid\");\n+    unsigned insn = 0;\n+    patch((address)&insn,   6, 0, 0b1010011);\n+    patch_reg((address)&insn,  7, Rd);\n+    patch((address)&insn, 14, 12, 0b000);\n+    patch((address)&insn, 19, 15, Rs1);\n+    patch((address)&insn,     20, 0b00001);\n+    patch((address)&insn, 31, 25, 0b1111001);\n+    emit(insn);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":124,"deletions":1,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -429,0 +429,2 @@\n+  jfloat fconst;\n+  jdouble dconst;\n@@ -464,3 +466,8 @@\n-      const_addr = float_constant(c->as_jfloat());\n-      assert(const_addr != nullptr, \"must create float constant in the constant table\");\n-      __ flw(dest->as_float_reg(), InternalAddress(const_addr));\n+      fconst = c->as_jfloat();\n+      if (MacroAssembler::can_fp_imm_load(fconst)) {\n+        __ fli_s(dest->as_float_reg(), fconst);\n+      } else {\n+        const_addr = float_constant(fconst);\n+        assert(const_addr != nullptr, \"must create float constant in the constant table\");\n+        __ flw(dest->as_float_reg(), InternalAddress(const_addr));\n+      }\n@@ -470,3 +477,8 @@\n-      const_addr = double_constant(c->as_jdouble());\n-      assert(const_addr != nullptr, \"must create double constant in the constant table\");\n-      __ fld(dest->as_double_reg(), InternalAddress(const_addr));\n+      dconst = c->as_jdouble();\n+      if (MacroAssembler::can_dp_imm_load(dconst)) {\n+        __ fli_d(dest->as_double_reg(), dconst);\n+      } else {\n+        const_addr = double_constant(c->as_jdouble());\n+        assert(const_addr != nullptr, \"must create double constant in the constant table\");\n+        __ fld(dest->as_double_reg(), InternalAddress(const_addr));\n+      }\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+  product(bool, UseZfa, false, DIAGNOSTIC, \"Use Zfa instructions\")               \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2608,0 +2608,41 @@\n+\/\/ floating point imm move\n+bool MacroAssembler::can_fp_imm_load(float imm) {\n+  jint f_bits = jint_cast(imm);\n+  if (f_bits == 0) {\n+    return true;\n+  }\n+  int dummy;\n+  return can_zfa_zli_float(imm, &dummy);\n+}\n+\n+bool MacroAssembler::can_dp_imm_load(double imm) {\n+  julong d_bits = julong_cast(imm);\n+  if (d_bits == 0) {\n+    return true;\n+  }\n+  int dummy;\n+  return can_zfa_zli_double(imm, &dummy);\n+}\n+\n+void MacroAssembler::fli_s(FloatRegister Rd, float imm) {\n+  jint f_bits = jint_cast(imm);\n+  if (f_bits == 0) {\n+    fmv_w_x(Rd, zr);\n+    return;\n+  }\n+  int Rs = -1;\n+  can_zfa_zli_float(imm, &Rs);\n+  _fli_s(Rd, Rs);\n+}\n+\n+void MacroAssembler::fli_d(FloatRegister Rd, double imm) {\n+  uint64_t d_bits = (uint64_t)julong_cast(imm);\n+  if (d_bits == 0) {\n+    fmv_d_x(Rd, zr);\n+    return;\n+  }\n+  int Rs = -1;\n+  can_zfa_zli_double(imm, &Rs);\n+  _fli_d(Rd, Rs);\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -922,0 +922,5 @@\n+  \/\/ float imm move\n+  static bool can_fp_imm_load(float imm);\n+  static bool can_dp_imm_load(double imm);\n+  void fli_s(FloatRegister Rd, float imm);\n+  void fli_d(FloatRegister Rd, double imm);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4923,1 +4923,5 @@\n-    __ flw(as_FloatRegister($dst$$reg), $constantaddress($con));\n+      if (MacroAssembler::can_fp_imm_load($con$$constant)) {\n+        __ fli_s(as_FloatRegister($dst$$reg), $con$$constant);\n+      } else {\n+        __ flw(as_FloatRegister($dst$$reg), $constantaddress($con));\n+      }\n@@ -4953,1 +4957,5 @@\n-    __ fld(as_FloatRegister($dst$$reg), $constantaddress($con));\n+      if (MacroAssembler::can_dp_imm_load($con$$constant)) {\n+        __ fli_d(as_FloatRegister($dst$$reg), $con$$constant);\n+      } else {\n+        __ fld(as_FloatRegister($dst$$reg), $constantaddress($con));\n+      }\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -159,0 +159,1 @@\n+  decl(ext_Zfa         , \"Zfa\"         , RV_NO_FLAG_BIT, true , UPDATE_DEFAULT(UseZfa))         \\\n@@ -226,0 +227,1 @@\n+    RV_ENABLE_EXTENSION(UseZfa)                     \\\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}