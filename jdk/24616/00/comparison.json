{"files":[{"patch":"@@ -456,4 +456,4 @@\n-    <Field type=\"ulong\" contentType=\"bytes\" name=\"directAllocated\" label=\"Allocated (direct)\" description=\"Total memory allocated using direct allocation outside of PLABs\" \/>\n-    <Field type=\"ulong\" name=\"numDirectAllocated\" label=\"Direct allocations\" description=\"Number of direct allocations\" \/>\n-    <Field type=\"ulong\" contentType=\"bytes\" name=\"failureUsed\" label=\"Used (failure)\" description=\"Total memory occupied by objects in regions where evacuation failed\" \/>\n-    <Field type=\"ulong\" contentType=\"bytes\" name=\"failureWaste\" label=\"Wasted (failure)\" description=\"Total memory left unused in regions where evacuation failed\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"directAllocated\" label=\"Allocated (Direct)\" description=\"Total memory allocated using direct allocation outside of PLABs\" \/>\n+    <Field type=\"ulong\" name=\"numDirectAllocated\" label=\"Direct Allocations\" description=\"Number of direct allocations\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"failureUsed\" label=\"Used (Failure)\" description=\"Total memory occupied by objects in regions where evacuation failed\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"failureWaste\" label=\"Wasted (Failure)\" description=\"Total memory left unused in regions where evacuation failed\" \/>\n@@ -526,1 +526,1 @@\n-    <Field type=\"Thread\" name=\"thread\" label=\"Running thread\" \/>\n+    <Field type=\"Thread\" name=\"thread\" label=\"Running Thread\" \/>\n@@ -1010,1 +1010,1 @@\n-    <Field type=\"long\" contentType=\"millis\" name=\"totalTimeSpent\" label=\"Total time\" \/>\n+    <Field type=\"long\" contentType=\"millis\" name=\"totalTimeSpent\" label=\"Total Time\" \/>\n@@ -1033,1 +1033,1 @@\n-    <Field type=\"ulong\" contentType=\"bytes\" name=\"nonNMethodSize\" label=\"Non-nmethod Size\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"nonNMethodSize\" label=\"Non-Nmethod Size\" \/>\n@@ -1035,2 +1035,2 @@\n-    <Field type=\"ulong\" contentType=\"bytes\" name=\"nonProfiledSize\" label=\"Non-profiled Size\" \/>\n-    <Field type=\"ulong\" contentType=\"bytes\" name=\"expansionSize\" label=\"Expansion size\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"nonProfiledSize\" label=\"Non-Profiled Size\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"expansionSize\" label=\"Expansion Size\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.util.Arrays;\n@@ -54,1 +55,1 @@\n-     * as \"id\" and \"field\" in trace.xml-files and @Name in the Java API. If it is\n+     * as \"name\" in metadata.xml and @Name in the Java API. If it is\n@@ -64,4 +65,4 @@\n-     * Abbreviations should be avoided, but may be acceptable if the name\n-     * becomes long, or if it is a well established acronym. Write whole words,\n-     * i.e. \"allocation\" instead of \"alloc\". The name should not be a reserved\n-     * Java keyword, i.e \"void\" or \"class\".\n+     * Abbreviations, such as info, alloc, num, gen, conf, stat, and evac, should\n+     * be avoided. For example, use \"allocation\" instead of \"alloc\". Acronyms should be\n+     * avoided unless they are well-established. The name should not be a reserved\n+     * Java keyword, such as \"void\" or \"class\".\n@@ -87,2 +88,2 @@\n-     * Do not forget to set proper units for fields, i.e \"NANOS\", \"MILLS\",\n-     * \"TICKSPAN\" ,\"BYETS\", \"PECENTAGE\" etc. in native and @Timespan, @Timespan\n+     * Do not forget to set proper units for fields, such as \"NANOS\", \"MILLIS\",\n+     * \"TICKSPAN\", \"BYTES\", and \"PERCENTAGE\", in native and @Timespan, @Timespan\n@@ -164,0 +165,1 @@\n+        System.out.println(\"Verifying label: \" + label);\n@@ -165,8 +167,30 @@\n-        Asserts.assertTrue(label.length() > 1, \"Name must be at least two characters\");\n-        Asserts.assertTrue(label.length() < 45, \"Label should not exceed 45 characters, use description to explain \" + label);\n-        Asserts.assertTrue(label.length() == label.trim().length(), \"Label should not have trim character at start and end\");\n-        Asserts.assertTrue(Character.isUpperCase(label.charAt(0)), \"Label should start with upper case letter\");\n-        for (int i = 0; i < label.length(); i++) {\n-            char c = label.charAt(i);\n-            Asserts.assertTrue(Character.isDigit(c) || Character.isAlphabetic(label.charAt(i)) || c == ' ' || c == '(' || c == ')' || c == '-', \"Label should only consist of letters or space, found '\" + label.charAt(i)\n-                    + \"'\");\n+        Asserts.assertTrue(label.length() > 1, \"Label must be at least two characters\");\n+        Asserts.assertTrue(label.length() <= 45, \"Label should not exceed 45 characters, use description to explain\");\n+        Asserts.assertTrue(label.length() == label.trim().length(), \"Label should not have superfluous whitespace at start or end\");\n+\n+        String[] words = label.split(\" \");\n+        String[] middleWords = words.length > 2 ? Arrays.copyOfRange(words, 1, words.length - 1) : new String[0];\n+        String firstWord = words[0];\n+        String lastWord = words[words.length - 1];\n+        Asserts.assertTrue(isCapitalized(firstWord), \"Label should capitalize first word\");\n+\n+        \/\/ The isNumeric check is a workaround so \"GC Phase Pause Level 1\" doesn't fail.\n+        if (!isNumeric(lastWord)) {\n+            Asserts.assertTrue(isCapitalized(lastWord), \"Label should capitalize last word\");\n+        }\n+        for (String word : words) {\n+            Asserts.assertFalse(word.endsWith(\"-\") || word.startsWith(\"-\"), \"Word in label should not start or end with hyphen\");\n+            Asserts.assertTrue(word.length() != 0, \"Label should not contain superfluous whitespace\");\n+            if (isCapitalized(word)) {\n+                for (String w : word.split(\"-\")) {\n+                    Asserts.assertTrue(isCapitalized(w), \"Label should capitalize all words in a hyphenated word\");\n+                }\n+            }\n+        }\n+        for (String word : middleWords) {\n+            if (isShortCommonPreposition(word)) {\n+                Asserts.assertFalse(isCapitalized(word), \"Preposition in label should be lower case, unless first and last word\");\n+            }\n+        }\n+        for (char c : label.toCharArray()) {\n+            Asserts.assertTrue(isAllowedCharacter(c), \"Label should only consist of letters, numbers, hyphens, parentheses or whitespace, found '\" + c + \"'\");\n@@ -176,0 +200,22 @@\n+    private static boolean isAllowedCharacter(char c) {\n+        return Character.isDigit(c) || Character.isAlphabetic(c) || c == ' ' || c == '(' || c == ')' || c == '-';\n+    }\n+\n+    private static boolean isCapitalized(String word) {\n+        String w = word.replace(\"(\", \"\").replace(\")\", \"\");\n+        return !w.isEmpty() && Character.isUpperCase(w.charAt(0));\n+    }\n+\n+    private static boolean isNumeric(String word) {\n+        return word.chars().allMatch(Character::isDigit);\n+    }\n+\n+    private static boolean isShortCommonPreposition(String word) {\n+        String[] prepositions = { \"in\", \"on\", \"at\", \"by\", \"to\", \"of\" };\n+        return containsWord(prepositions, word);\n+    }\n+\n+    private static boolean containsWord(String[] words, String match) {\n+        return Arrays.asList(words).contains(match);\n+    }\n+\n@@ -185,1 +231,1 @@\n-          char firstChar = name.charAt(0);\n+        char firstChar = name.charAt(0);\n@@ -201,6 +247,1 @@\n-        for (int i = 0; i < keywords.length; i++) {\n-            if (s.equals(keywords[i])) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return containsWord(keywords, s);\n","filename":"test\/jdk\/jdk\/jfr\/event\/metadata\/TestEventMetadata.java","additions":63,"deletions":22,"binary":false,"changes":85,"status":"modified"}]}