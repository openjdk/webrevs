{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -160,0 +161,8 @@\n+template <typename T, typename A>\n+static void test_fail_alignment() {\n+  A alignment = max_alignment<A>();\n+  T value = std::numeric_limits<T>::max() - checked_cast<T>(alignment) + 10;\n+  \/\/ Aligning up would overflow, as there isnt enough room for alignment\n+  T aligned = align_up(value, alignment);\n+}\n+\n@@ -198,0 +207,20 @@\n+\n+TEST_VM_ASSERT(Align, fail_alignments_same_size) {\n+  test_fail_alignment<uint64_t, uint64_t>();\n+}\n+\n+TEST_VM_ASSERT(Align, fail_alignments_unsigned_signed) {\n+  test_fail_alignment<uint32_t, int32_t>();\n+}\n+\n+TEST_VM_ASSERT(Align, fail_alignments_signed_unsigned) {\n+  test_fail_alignment<int64_t, int32_t>();\n+}\n+\n+TEST_VM_ASSERT(Align, fail_alignments_small_large) {\n+  test_fail_alignment<uint8_t, uint64_t>();\n+}\n+\n+TEST_VM_ASSERT(Align, fail_alignments_large_small) {\n+  test_fail_alignment<uint64_t, uint8_t>();\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/gtest\/utilities\/test_align.cpp","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"}]}