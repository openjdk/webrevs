{"files":[{"patch":"@@ -75,1 +75,3 @@\n-  T adjusted = checked_cast<T>(size + alignment_mask(alignment));\n+  T mask = checked_cast<T>(alignment_mask(alignment));\n+  assert(size <= std::numeric_limits<T>::max() - mask, \"overflow\");\n+  T adjusted = size + mask;\n","filename":"src\/hotspot\/share\/utilities\/align.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -307,1 +307,1 @@\n-  test_attempt_reserve_memory_between((char*)SIZE_MAX, (char*)SIZE_MAX, ps, ag, false, Expect::failure(), __LINE__);\n+  test_attempt_reserve_memory_between((char*)SIZE_MAX-ag, (char*)SIZE_MAX-ag, ps, ag, false, Expect::failure(), __LINE__);\n@@ -312,1 +312,1 @@\n-  test_attempt_reserve_memory_between((char*)SIZE_MAX, (char*)SIZE_MAX, ps, ag, true, Expect::failure(), __LINE__);\n+  test_attempt_reserve_memory_between((char*)SIZE_MAX-ag, (char*)SIZE_MAX-ag, ps, ag, true, Expect::failure(), __LINE__);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_reserve_between.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include \"utilities\/checkedCast.hpp\"\n@@ -33,1 +34,1 @@\n-static constexpr uint64_t values[] = {1, 3, 10, 345, 1023, 1024, 1025, 23909034, INT_MAX, uint64_t(-1) \/ 2, uint64_t(-1) \/ 2 + 100, uint64_t(-1)};\n+static constexpr uint64_t values[] = {1, 3, 10, 345, 1023, 1024, 1025, 23909034, INT_MAX, uint64_t(-1) \/ 2, uint64_t(-1) \/ 2 + 100, ~(uint64_t(1) << 62)};\n@@ -198,0 +199,30 @@\n+\n+#ifdef ASSERT\n+template <typename T, typename A>\n+static void test_fail_alignment() {\n+  A alignment = max_alignment<A>();\n+  T value = align_down(std::numeric_limits<T>::max(), alignment) + 1;\n+  \/\/ Aligning up would overflow, as there is not enough room for alignment\n+  T aligned = align_up(value, alignment);\n+}\n+\n+TEST_VM_ASSERT(Align, fail_alignments_same_size) {\n+  test_fail_alignment<uint64_t, uint64_t>();\n+}\n+\n+TEST_VM_ASSERT(Align, fail_alignments_unsigned_signed) {\n+  test_fail_alignment<uint32_t, int32_t>();\n+}\n+\n+TEST_VM_ASSERT(Align, fail_alignments_signed_unsigned) {\n+  test_fail_alignment<int64_t, int32_t>();\n+}\n+\n+TEST_VM_ASSERT(Align, fail_alignments_small_large) {\n+  test_fail_alignment<uint8_t, uint64_t>();\n+}\n+\n+TEST_VM_ASSERT(Align, fail_alignments_large_small) {\n+  test_fail_alignment<uint64_t, uint8_t>();\n+}\n+#endif \/\/ ASSERT\n","filename":"test\/hotspot\/gtest\/utilities\/test_align.cpp","additions":33,"deletions":2,"binary":false,"changes":35,"status":"modified"}]}