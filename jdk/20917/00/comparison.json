{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * The interface for an annotation processor.\n+ * The interface for an <dfn>{@index \"annotation processor\"}<\/dfn>.\n@@ -37,6 +37,7 @@\n- * <p>Annotation processing happens in a sequence of {@linkplain\n- * javax.annotation.processing.RoundEnvironment rounds}.  On each\n- * round, a processor may be asked to {@linkplain #process process} a\n- * subset of the annotations found on the source and class files\n- * produced by a prior round.  The inputs to the first round of\n- * processing are the initial inputs to a run of the tool; these\n+ * <p>Annotation processing happens in a sequence of <dfn>rounds<\/dfn>.\n+ * On each\n+ * {@linkplain RoundEnvironment round}, a processor may be asked to {@linkplain #process process} a\n+ * subset of the annotations found on the\n+ * {@linkplain RoundEnvironment#getRootElements() source and class files\n+ * produced by a prior round}.  The inputs to the first round of\n+ * processing are the <dfn>{@index \"initial inputs\"}<\/dfn> to a run of the tool; these\n@@ -80,1 +81,1 @@\n- * <p> The tool uses a <i>discovery process<\/i> to find annotation\n+ * <p> The tool uses a <dfn>{@index \"discovery process\"}<\/dfn> to find annotation\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Processor.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,2 @@\n- * <em>declaration annotation<\/em> and an annotation on a type is a\n- * <em>type annotation<\/em>.\n+ * <dfn>{@index \"declaration annotation\"}<\/dfn> and an annotation on a type is a\n+ * <dfn>{@index \"type annotation\"}<\/dfn>.\n@@ -57,1 +57,1 @@\n- * <p>Annotation <i>A<\/i> is <em>directly present<\/em> on a construct\n+ * <p>Annotation <i>A<\/i> is <dfn>{@index \"directly present\"}<\/dfn> on a construct\n@@ -90,1 +90,1 @@\n- * <p>An annotation <i>A<\/i> is <em>present<\/em> on a\n+ * <p>An annotation <i>A<\/i> is <dfn>{@index \"present\"}<\/dfn> on a\n@@ -102,1 +102,1 @@\n- * An annotation <i>A<\/i> is <em>indirectly present<\/em> on a construct\n+ * An annotation <i>A<\/i> is <dfn>{@index \"indirectly present\"}<\/dfn> on a construct\n@@ -117,1 +117,1 @@\n- * An annotation <i>A<\/i> is <em>associated<\/em> with a construct\n+ * An annotation <i>A<\/i> is <dfn>{@index \"associated\"}<\/dfn> with a construct\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/AnnotatedConstruct.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * The <i>nesting kind<\/i> of a type element.\n+ * The <dfn>nesting kind<\/dfn> of a type element.\n@@ -110,1 +110,1 @@\n-     * A <i>nested<\/i> type element is any that is not top-level.\n+     * A <dfn>nested<\/dfn> type element is any that is not top-level.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/NestingKind.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-     * That is, <i>boxing conversion<\/i> is applied.\n+     * That is, <dfn>boxing conversion<\/dfn> is applied.\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Types.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}