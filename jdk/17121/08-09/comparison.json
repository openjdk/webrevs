{"files":[{"patch":"@@ -49,0 +49,1 @@\n+import java.util.function.IntFunction;\n@@ -111,2 +112,1 @@\n-    private static final ClassEntry CE_Object;\n-    private static final ClassEntry CE_NoSuchMethodError;\n+    private static final ClassEntry CE_ClassNotFoundException;\n@@ -114,2 +114,1 @@\n-    private static final ClassEntry CE_UndeclaredThrowableException;\n-    private static final ClassEntry CE_Throwable;\n+    private static final ClassEntry CE_NoSuchMethodError;\n@@ -117,1 +116,3 @@\n-    private static final ClassEntry CE_ClassNotFoundException;\n+    private static final ClassEntry CE_Object;\n+    private static final ClassEntry CE_Throwable;\n+    private static final ClassEntry CE_UndeclaredThrowableException;\n@@ -123,0 +124,1 @@\n+    private static final MethodRefEntry MRE_Class_forName;\n@@ -124,1 +126,1 @@\n-    private static final MethodRefEntry MRE_NoSuchMethodError_init;\n+    private static final MethodRefEntry MRE_Class_getMethod;\n@@ -126,0 +128,1 @@\n+    private static final MethodRefEntry MRE_NoSuchMethodError_init;\n@@ -127,2 +130,0 @@\n-    private static final MethodRefEntry MRE_Class_forName;\n-    private static final MethodRefEntry MRE_Class_getMethod;\n@@ -135,0 +136,5 @@\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T extends PoolEntry> T entryByIndex(int index) {\n+        return (T) TEMPLATE.constantPool().entryByIndex(index);\n+    }\n+\n@@ -136,9 +142,0 @@\n-        var cc = ClassFile.of();\n-        var q = new Object() {\n-            PoolEntry[] entries;\n-            int i;\n-            @SuppressWarnings(\"unchecked\")\n-            <T extends PoolEntry> T next() {\n-                return (T) TEMPLATE.constantPool().entryByIndex(entries[i++].index());\n-            }\n-        };\n@@ -148,0 +145,2 @@\n+        var cc = ClassFile.of();\n+        var ei = new int[21];\n@@ -153,23 +152,27 @@\n-            q.entries = new PoolEntry[] {\n-                cp.utf8Entry(\"m0\"),\n-                cp.utf8Entry(\"m1\"),\n-                cp.utf8Entry(\"m2\"),\n-                cp.utf8Entry(CD_Method),\n-                cp.methodRefEntry(CD_Class, \"getClassLoader\", MTD_ClassLoader),\n-                cp.classEntry(CD_NoSuchMethodError),\n-                cp.methodRefEntry(CD_NoSuchMethodError, INIT_NAME, MTD_void_String),\n-                cp.fieldRefEntry(CD_Proxy, handlerFieldName, CD_InvocationHandler),\n-                cp.classEntry(CD_NoClassDefFoundError),\n-                cp.methodRefEntry(CD_NoClassDefFoundError, INIT_NAME, MTD_void_String),\n-                cp.methodRefEntry(CD_Throwable, \"getMessage\", MTD_String),\n-                cp.methodRefEntry(CD_Class, \"forName\", MTD_Class_String_boolean_ClassLoader),\n-                cp.classEntry(CD_Class),\n-                cp.methodRefEntry(CD_Class, \"getMethod\", MTD_Method_String_ClassArray),\n-                cp.classEntry(CD_Object),\n-                cp.interfaceMethodRefEntry(CD_InvocationHandler, \"invoke\", MTD_Object_Object_Method_ObjectArray),\n-                cp.methodRefEntry(CD_UndeclaredThrowableException, INIT_NAME, MTD_void_Throwable),\n-                cp.classEntry(CD_UndeclaredThrowableException),\n-                cp.classEntry(CD_NoSuchMethodException),\n-                cp.classEntry(CD_ClassNotFoundException),\n-                cp.classEntry(CD_Throwable)\n-            };\n+\n+            ei[0] = cp.classEntry(CD_Class).index();\n+            ei[1] = cp.classEntry(CD_ClassNotFoundException).index();\n+            ei[2] = cp.classEntry(CD_NoClassDefFoundError).index();\n+            ei[3] = cp.classEntry(CD_NoSuchMethodError).index();\n+            ei[4] = cp.classEntry(CD_NoSuchMethodException).index();\n+            ei[5] = cp.classEntry(CD_Object).index();\n+            ei[6] = cp.classEntry(CD_Throwable).index();\n+            ei[7] = cp.classEntry(CD_UndeclaredThrowableException).index();\n+\n+            ei[8] = cp.fieldRefEntry(CD_Proxy, handlerFieldName, CD_InvocationHandler).index();\n+\n+            ei[9] = cp.interfaceMethodRefEntry(CD_InvocationHandler, \"invoke\", MTD_Object_Object_Method_ObjectArray).index();\n+\n+            ei[10] = cp.methodRefEntry(CD_Class, \"forName\", MTD_Class_String_boolean_ClassLoader).index();\n+            ei[11] = cp.methodRefEntry(CD_Class, \"getClassLoader\", MTD_ClassLoader).index();\n+            ei[12] = cp.methodRefEntry(CD_Class, \"getMethod\", MTD_Method_String_ClassArray).index();\n+            ei[13] = cp.methodRefEntry(CD_NoClassDefFoundError, INIT_NAME, MTD_void_String).index();\n+            ei[14] = cp.methodRefEntry(CD_NoSuchMethodError, INIT_NAME, MTD_void_String).index();\n+            ei[15] = cp.methodRefEntry(CD_Throwable, \"getMessage\", MTD_String).index();\n+            ei[16] = cp.methodRefEntry(CD_UndeclaredThrowableException, INIT_NAME, MTD_void_Throwable).index();\n+\n+            ei[17] = cp.utf8Entry(CD_Method).index();\n+\n+            ei[18] = cp.utf8Entry(\"m0\").index();\n+            ei[19] = cp.utf8Entry(\"m1\").index();\n+            ei[20] = cp.utf8Entry(\"m2\").index();\n@@ -178,0 +181,23 @@\n+        CE_Class = entryByIndex(ei[0]);\n+        CE_ClassNotFoundException = entryByIndex(ei[1]);\n+        CE_NoClassDefFoundError = entryByIndex(ei[2]);\n+        CE_NoSuchMethodError = entryByIndex(ei[3]);\n+        CE_NoSuchMethodException = entryByIndex(ei[4]);\n+        CE_Object = entryByIndex(ei[5]);\n+        CE_Throwable = entryByIndex(ei[6]);\n+        CE_UndeclaredThrowableException = entryByIndex(ei[7]);\n+\n+        FRE_Proxy_h = entryByIndex(ei[8]);\n+\n+        IMRE_InvocationHandler_invoke = entryByIndex(ei[9]);\n+\n+        MRE_Class_forName = entryByIndex(ei[10]);\n+        MRE_Class_getClassLoader = entryByIndex(ei[11]);\n+        MRE_Class_getMethod = entryByIndex(ei[12]);\n+        MRE_NoClassDefFoundError_init = entryByIndex(ei[13]);\n+        MRE_NoSuchMethodError_init = entryByIndex(ei[14]);\n+        MRE_Throwable_getMessage = entryByIndex(ei[15]);\n+        MRE_UndeclaredThrowableException_init = entryByIndex(ei[16]);\n+\n+        UE_Method = entryByIndex(ei[17]);\n+\n@@ -179,3 +205,3 @@\n-            hashCodeMethod = new ProxyMethod(Object.class.getMethod(\"hashCode\"), q.next());\n-            equalsMethod = new ProxyMethod(Object.class.getMethod(\"equals\", Object.class), q.next());\n-            toStringMethod = new ProxyMethod(Object.class.getMethod(\"toString\"), q.next());\n+            hashCodeMethod = new ProxyMethod(Object.class.getMethod(\"hashCode\"), entryByIndex(ei[18]));\n+            equalsMethod = new ProxyMethod(Object.class.getMethod(\"equals\", Object.class), entryByIndex(ei[19]));\n+            toStringMethod = new ProxyMethod(Object.class.getMethod(\"toString\"), entryByIndex(ei[20]));\n@@ -185,18 +211,1 @@\n-        UE_Method = q.next();\n-        MRE_Class_getClassLoader = q.next();\n-        CE_NoSuchMethodError = q.next();\n-        MRE_NoSuchMethodError_init = q.next();\n-        FRE_Proxy_h = q.next();\n-        CE_NoClassDefFoundError = q.next();\n-        MRE_NoClassDefFoundError_init = q.next();\n-        MRE_Throwable_getMessage = q.next();\n-        MRE_Class_forName = q.next();\n-        CE_Class = q.next();\n-        MRE_Class_getMethod = q.next();\n-        CE_Object = q.next();\n-        IMRE_InvocationHandler_invoke = q.next();\n-        MRE_UndeclaredThrowableException_init = q.next();\n-        CE_UndeclaredThrowableException = q.next();\n-        CE_NoSuchMethodException = q.next();\n-        CE_ClassNotFoundException = q.next();\n-        CE_Throwable = q.next();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":70,"deletions":61,"binary":false,"changes":131,"status":"modified"}]}