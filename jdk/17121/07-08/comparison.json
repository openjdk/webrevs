{"files":[{"patch":"@@ -34,0 +34,3 @@\n+import static java.lang.classfile.ClassFile.*;\n+import java.lang.classfile.attribute.StackMapFrameInfo;\n+import java.lang.classfile.attribute.StackMapTableAttribute;\n@@ -47,5 +50,0 @@\n-import static java.lang.classfile.ClassFile.*;\n-import java.lang.classfile.attribute.StackMapFrameInfo;\n-import java.lang.classfile.attribute.StackMapTableAttribute;\n-import java.util.StringJoiner;\n-\n@@ -112,3 +110,2 @@\n-    private static final Utf8Entry UE_Method;\n-    private static final MethodRefEntry MRE_Class_getClassLoader;\n-    private static final MethodRefEntry MRE_NoSuchMethodError_init;\n+    private static final ClassEntry CE_Class;\n+    private static final ClassEntry CE_Object;\n@@ -116,1 +113,0 @@\n-    private static final FieldRefEntry FRE_Proxy_h;\n@@ -118,0 +114,11 @@\n+    private static final ClassEntry CE_UndeclaredThrowableException;\n+    private static final ClassEntry CE_Throwable;\n+    private static final ClassEntry CE_NoSuchMethodException;\n+    private static final ClassEntry CE_ClassNotFoundException;\n+\n+    private static final FieldRefEntry FRE_Proxy_h;\n+\n+    private static final InterfaceMethodRefEntry IMRE_InvocationHandler_invoke;\n+\n+    private static final MethodRefEntry MRE_Class_getClassLoader;\n+    private static final MethodRefEntry MRE_NoSuchMethodError_init;\n@@ -121,1 +128,0 @@\n-    private static final ClassEntry CE_Class;\n@@ -123,2 +129,0 @@\n-    private static final ClassEntry CE_Object;\n-    private static final InterfaceMethodRefEntry IMRE_InvocationHandler_invoke;\n@@ -126,4 +130,3 @@\n-    private static final ClassEntry CE_UndeclaredThrowableException;\n-    private static final ClassEntry CE_Throwable;\n-    private static final ClassEntry CE_NoSuchMethodException;\n-    private static final ClassEntry CE_ClassNotFoundException;\n+\n+    private static final Utf8Entry UE_Method;\n+\n@@ -134,1 +137,0 @@\n-        var entries = new ArrayList<PoolEntry>(20);\n@@ -143,0 +145,3 @@\n+        \/\/static template ClassModel holds pre-defined constant pool entries\n+        \/\/proxy transformed from the template shares the template constant pool\n+        \/\/each direct use of the template pool entry is significantly faster\n@@ -299,1 +304,1 @@\n-     * @param type the {@code Class} objects, no primitives nor arrays\n+     * @param types the {@code Class} objects, not primitive types nor array types\n@@ -303,1 +308,1 @@\n-        for (int i = 0; i< ces.length; i++)\n+        for (int i = 0; i < ces.length; i++)\n@@ -737,4 +742,2 @@\n-            var desc = new StringJoiner(\"\", \"(\", \")\" + returnType.descriptorString());\n-            for (var pt : parameterTypes) {\n-                desc.add(pt.descriptorString());\n-            }\n+            MethodTypeDesc desc = MethodTypeDesc.of(toClassDesc(returnType),\n+                    Arrays.stream(parameterTypes).map(ProxyGenerator::toClassDesc).toArray(ClassDesc[]::new));\n@@ -744,1 +747,1 @@\n-            clb.withMethod(cp.utf8Entry(method.getName()), cp.utf8Entry(desc.toString()), accessFlags, mb ->\n+            clb.withMethod(method.getName(), desc, accessFlags, mb ->\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":27,"deletions":24,"binary":false,"changes":51,"status":"modified"}]}