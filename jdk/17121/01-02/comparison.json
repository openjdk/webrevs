{"files":[{"patch":"@@ -297,0 +297,11 @@\n+    \/**\n+     * {@return the entries of the given type}\n+     * @param type the {@code Class} objects, no primitives nor arrays\n+     *\/\n+    private static ClassEntry[] toClassEntries(ConstantPoolBuilder cp, List<Class<?>> types) {\n+        var ces = new ClassEntry[types.size()];\n+        for (int i = 0; i< ces.length; i++)\n+            ces[i] = cp.classEntry(cp.utf8Entry(types.get(i).getName().replace('.', '\/')));\n+        return ces;\n+    }\n+\n@@ -420,1 +431,1 @@\n-    private static List<ClassDesc> computeUniqueCatchList(Class<?>[] exceptions) {\n+    private static List<Class<?>> computeUniqueCatchList(Class<?>[] exceptions) {\n@@ -468,1 +479,1 @@\n-        return uniqueList.stream().map(ProxyGenerator::toClassDesc).toList();\n+        return uniqueList;\n@@ -533,1 +544,1 @@\n-            clb.withInterfaceSymbols(interfaces.stream().map(ProxyGenerator::toClassDesc).toList());\n+            clb.withInterfaces(toClassEntries(cp, interfaces));\n@@ -733,22 +744,20 @@\n-            clb.withMethod(cp.utf8Entry(method.getName()), cp.utf8Entry(desc.toString()), accessFlags, mb -> {\n-                List<ClassEntry> exceptionClassEntries = Arrays.asList(exceptionTypes)\n-                        .stream()\n-                        .map(ProxyGenerator::toClassDesc)\n-                        .map(cp::classEntry)\n-                        .toList();\n-                mb.with(ExceptionsAttribute.of(exceptionClassEntries));\n-                mb.withCode(cob -> {\n-                    cob.aload(cob.receiverSlot())\n-                       .getfield(FRE_Proxy_h)\n-                       .aload(cob.receiverSlot())\n-                       .getstatic(cp.fieldRefEntry(className, cp.nameAndTypeEntry(methodFieldName, UE_Method)));\n-\n-                    if (parameterTypes.length > 0) {\n-                        \/\/ Create an array and fill with the parameters converting primitives to wrappers\n-                        cob.constantInstruction(parameterTypes.length)\n-                           .anewarray(CE_Object);\n-                        for (int i = 0; i < parameterTypes.length; i++) {\n-                            cob.dup()\n-                               .constantInstruction(i);\n-                            codeWrapArgument(cob, parameterTypes[i], cob.parameterSlot(i));\n-                            cob.aastore();\n+            clb.withMethod(cp.utf8Entry(method.getName()), cp.utf8Entry(desc.toString()), accessFlags, mb ->\n+                  mb.with(ExceptionsAttribute.of(toClassEntries(cp, List.of(exceptionTypes))))\n+                    .withCode(cob -> {\n+                        cob.aload(cob.receiverSlot())\n+                           .getfield(FRE_Proxy_h)\n+                           .aload(cob.receiverSlot())\n+                           .getstatic(cp.fieldRefEntry(className, cp.nameAndTypeEntry(methodFieldName, UE_Method)));\n+\n+                        if (parameterTypes.length > 0) {\n+                            \/\/ Create an array and fill with the parameters converting primitives to wrappers\n+                            cob.constantInstruction(parameterTypes.length)\n+                               .anewarray(CE_Object);\n+                            for (int i = 0; i < parameterTypes.length; i++) {\n+                                cob.dup()\n+                                   .constantInstruction(i);\n+                                codeWrapArgument(cob, parameterTypes[i], cob.parameterSlot(i));\n+                                cob.aastore();\n+                            }\n+                        } else {\n+                            cob.aconst_null();\n@@ -756,3 +765,0 @@\n-                    } else {\n-                        cob.aconst_null();\n-                    }\n@@ -760,1 +766,1 @@\n-                    cob.invokeinterface(IMRE_InvocationHandler_invoke);\n+                        cob.invokeinterface(IMRE_InvocationHandler_invoke);\n@@ -762,10 +768,5 @@\n-                    if (returnType == void.class) {\n-                        cob.pop()\n-                           .return_();\n-                    } else {\n-                        codeUnwrapReturnValue(cob, returnType);\n-                    }\n-                    if (!catchList.isEmpty()) {\n-                        var c1 = cob.newBoundLabel();\n-                        for (var exc : catchList) {\n-                            cob.exceptionCatch(cob.startLabel(), c1, c1, exc);\n+                        if (returnType == void.class) {\n+                            cob.pop()\n+                               .return_();\n+                        } else {\n+                            codeUnwrapReturnValue(cob, returnType);\n@@ -773,14 +774,18 @@\n-                        cob.athrow();   \/\/ just rethrow the exception\n-                        var c2 = cob.newBoundLabel();\n-                        cob.exceptionCatchAll(cob.startLabel(), c1, c2)\n-                           .new_(CE_UndeclaredThrowableException)\n-                           .dup_x1()\n-                           .swap()\n-                           .invokespecial(MRE_UndeclaredThrowableException_init)\n-                           .athrow()\n-                           .with(StackMapTableAttribute.of(List.of(\n-                                StackMapFrameInfo.of(c1, List.of(), THROWABLE_STACK),\n-                                StackMapFrameInfo.of(c2, List.of(), THROWABLE_STACK))));\n-                    }\n-                });\n-            });\n+                        if (!catchList.isEmpty()) {\n+                            var c1 = cob.newBoundLabel();\n+                            for (var exc : catchList) {\n+                                cob.exceptionCatch(cob.startLabel(), c1, c1, toClassDesc(exc));\n+                            }\n+                            cob.athrow();   \/\/ just rethrow the exception\n+                            var c2 = cob.newBoundLabel();\n+                            cob.exceptionCatchAll(cob.startLabel(), c1, c2)\n+                               .new_(CE_UndeclaredThrowableException)\n+                               .dup_x1()\n+                               .swap()\n+                               .invokespecial(MRE_UndeclaredThrowableException_init)\n+                               .athrow()\n+                               .with(StackMapTableAttribute.of(List.of(\n+                                    StackMapFrameInfo.of(c1, List.of(), THROWABLE_STACK),\n+                                    StackMapFrameInfo.of(c2, List.of(), THROWABLE_STACK))));\n+                        }\n+                    }));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":58,"deletions":53,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+        this.doneFullScan = true;\n@@ -192,1 +193,1 @@\n-            for (int i=1; i<parentSize; i++) {\n+            for (int i=1; i<parentSize;) {\n@@ -194,1 +195,4 @@\n-                if (cpi != null)\n+                if (cpi == null) {\n+                    doneFullScan = false;\n+                    i++;\n+                } else {\n@@ -196,0 +200,2 @@\n+                    i += cpi.width();\n+                }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}