{"files":[{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary test case for Markdown positions\n+ * @run main\/othervm --limit-modules jdk.compiler MarkdownTransformerPositionTest\n+ * @run main MarkdownTransformerPositionTest\n+ *\/\n+\n+import com.sun.source.doctree.DocCommentTree;\n+import com.sun.source.doctree.RawTextTree;\n+import com.sun.source.tree.*;\n+import com.sun.source.util.*;\n+\n+import java.net.URI;\n+import java.util.*;\n+import javax.lang.model.element.Element;\n+import javax.tools.*;\n+\n+\/*\n+ * Custom test case for positions of RawTextTree nodes after passing through\n+ * main MarkdownTransformer, or not.\n+ * See https:\/\/github.com\/openjdk\/jdk\/pull\/16388#discussion_r1479306878\n+ *\/\n+public class MarkdownTransformerPositionTest {\n+\n+    public static void main(String... args) throws Exception {\n+        String source = \"\"\"\n+                        \/\/\/ Markdown test\n+                        \/\/\/\n+                        \/\/\/ @author testAuthor\n+                        public class Test {\n+                        }\n+                        \"\"\";\n+        JavaCompiler comp = ToolProvider.getSystemJavaCompiler();\n+        JavacTask task = (JavacTask)comp.getTask(null, null, null, null, null, Arrays.asList(new JavaSource(source)));\n+        CompilationUnitTree cu = task.parse().iterator().next();\n+        task.analyze();\n+        DocTrees trees = DocTrees.instance(task);\n+        List<String> rawSpans = new ArrayList<>();\n+        TreePath clazzTP = new TreePath(new TreePath(cu), cu.getTypeDecls().get(0));\n+        Element clazz = trees.getElement(clazzTP);\n+        DocCommentTree docComment = trees.getDocCommentTree(clazz);\n+\n+        new DocTreeScanner<Void, Void>() {\n+            @Override\n+            public Void visitRawText(RawTextTree node, Void p) {\n+                int start = (int) trees.getSourcePositions().getStartPosition(cu, docComment, node);\n+                int end = (int) trees.getSourcePositions().getEndPosition(cu, docComment, node);\n+                rawSpans.add(source.substring(start, end));\n+                return super.visitRawText(node, p);\n+            }\n+        }.scan(docComment, null);\n+\n+        List<String> expectedRawSpans = List.of(\"Markdown test\", \"testAuthor\");\n+\n+        if (!expectedRawSpans.equals(rawSpans)) {\n+            throw new AssertionError(\"Incorrect raw text spans, should be: \" +\n+                    expectedRawSpans + \", but is: \" + rawSpans);\n+        }\n+\n+        System.err.println(\"Test result: success, boot modules: \" + ModuleLayer.boot().modules());\n+    }\n+\n+    static class JavaSource extends SimpleJavaFileObject {\n+\n+        private final String source;\n+\n+        public JavaSource(String source) {\n+            super(URI.create(\"myfo:\/Test.java\"), JavaFileObject.Kind.SOURCE);\n+            this.source = source;\n+        }\n+\n+        @Override\n+        public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n+            return source;\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/doctree\/MarkdownTransformerPositionTest.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}