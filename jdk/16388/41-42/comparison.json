{"files":[{"patch":"@@ -30,1 +30,1 @@\n- * @build    toolbox.ToolBox javadoc.tester.* DivTaglet SpanTaglet\n+ * @build    toolbox.ToolBox javadoc.tester.*\n@@ -69,29 +69,0 @@\n-    @Test\n-    public void testFirstSentence(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    public class C {\n-                        \/\/\/ This is the _first_ sentence.\n-                        \/\/\/ This is the _second_ sentence.\n-                         public void m() { }\n-                    }\n-                    \"\"\");\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOrder(\"p\/C.html\",\n-                \"\"\"\n-                    <section class=\"method-summary\" id=\"method-summary\">\"\"\",\n-                \"\"\"\n-                    <div class=\"block\">This is the <em>first<\/em> sentence.<\/div>\"\"\",\n-                \"\"\"\n-                    <section class=\"method-details\" id=\"method-detail\">\"\"\",\n-                \"\"\"\n-                    <div class=\"block\">This is the <em>first<\/em> sentence.\n-                    This is the <em>second<\/em> sentence.<\/div>\"\"\");\n-    }\n-\n@@ -181,321 +152,0 @@\n-    @Test\n-    public void testInherit_md_md(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    public class Base {\n-                        \/\/\/ Markdown comment.\n-                        \/\/\/ @throws Exception Base _Markdown_\n-                        public void m() throws Exception { }\n-                    }\"\"\",\n-                \"\"\"\n-                    package p;\n-                    public class Derived extends Base {\n-                        \/\/\/ Markdown comment.\n-                        \/\/\/ @throws {@inheritDoc}\n-                        public void m() throws Exception { }\n-                    }\n-                    \"\"\");\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--no-platform-links\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/Derived.html\", true,\n-                \"\"\"\n-                    <dt>Throws:<\/dt>\n-                    <dd><code>java.lang.Exception<\/code> - Base <em>Markdown<\/em><\/dd>\n-                    \"\"\");\n-    }\n-\n-    @Test\n-    public void testInherit_md_plain(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    public class Base {\n-                        \/\/\/ Markdown comment.\n-                        \/\/\/ @throws Exception Base _Markdown_\n-                        public void m() throws Exception { }\n-                    }\"\"\",\n-                \"\"\"\n-                    package p;\n-                    public class Derived extends Base {\n-                        \/**\n-                         * Plain comment.\n-                         * @throws {@inheritDoc}\n-                         *\/\n-                         public void m() throws Exception { }\n-                    }\n-                    \"\"\");\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--no-platform-links\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/Derived.html\", true,\n-                \"\"\"\n-                    <dt>Throws:<\/dt>\n-                    <dd><code>java.lang.Exception<\/code> - Base <em>Markdown<\/em><\/dd>\n-                    \"\"\");\n-    }\n-\n-    @Test\n-    public void testInherit_plain_md(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    public class Base {\n-                        \/**\n-                         * Plain comment.\n-                         * @throws Exception Base _Not Markdown_\n-                         *\/\n-                         public void m() throws Exception { }\n-                    }\"\"\",\n-                \"\"\"\n-                    package p;\n-                    public class Derived extends Base {\n-                        \/\/\/ Markdown comment.\n-                        \/\/\/ @throws {@inheritDoc}\n-                        public void m() throws Exception { }\n-                    }\n-                    \"\"\");\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--no-platform-links\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/Derived.html\", true,\n-                \"\"\"\n-                    <dt>Throws:<\/dt>\n-                    <dd><code>java.lang.Exception<\/code> - Base _Not Markdown_<\/dd>\n-                    \"\"\");\n-    }\n-\n-    @Test\n-    public void testSimpleLink(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    public class C {\n-                        \/\/\/ Method m1.\n-                        \/\/\/ This is different from {@link #m2()}.\n-                        public void m1() { }\n-                        \/\/\/ Method m2.\n-                        \/\/\/ This is different from {@link #m1()}.\n-                        public void m2() { }\n-                    }\n-                    \"\"\");\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/C.html\", true,\n-                \"\"\"\n-                    Method m1.\n-                    This is different from <a href=\"#m2()\"><code>m2()<\/code><\/a>.\"\"\");\n-\n-    }\n-\n-    @Test\n-    public void testSimpleRefLink(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    public class C {\n-                        \/\/\/ Method m1.\n-                        \/\/\/ This is different from [#m2()].\n-                        public void m1() { }\n-                        \/\/\/ Method m2.\n-                        \/\/\/ This is different from [#m1()].\n-                        public void m2() { }\n-                    }\n-                    \"\"\");\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/C.html\", true,\n-                \"\"\"\n-                    Method m1.\n-                    This is different from <a href=\"#m2()\"><code>m2()<\/code><\/a>.\"\"\");\n-\n-    }\n-\n-    @Test\n-    public void testLinkWithDescription(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    public class C {\n-                        \/\/\/ Method m1.\n-                        \/\/\/ This is different from {@linkplain #m2() _Markdown_ m2}.\n-                        public void m1() { }\n-                        \/\/\/ Method m2.\n-                        \/\/\/ This is different from {@linkplain #m1() _Markdown_ m1}.\n-                        public void m2() { }\n-                    }\n-                    \"\"\");\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/C.html\", true,\n-                \"\"\"\n-                    Method m1.\n-                    This is different from <a href=\"#m2()\"><em>Markdown<\/em> m2\"\"\");\n-\n-    }\n-\n-    @Test\n-    public void testRefLinkWithDescription(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    public class C {\n-                        \/\/\/ Method m1.\n-                        \/\/\/ This is different from [_Markdown_ m2][#m2()].\n-                        public void m1() { }\n-                        \/\/\/ Method m2.\n-                        \/\/\/ This is different from [_Markdown_ m1][#m1()]}.\n-                        public void m2() { }\n-                    }\n-                    \"\"\");\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/C.html\", true,\n-                \"\"\"\n-                    Method m1.\n-                    This is different from <a href=\"#m2()\"><em>Markdown<\/em> m2\"\"\");\n-\n-    }\n-\n-    @Test\n-    public void testLinkElementKinds(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                        package p;\n-                        \/\/\/ First sentence.\n-                        \/\/\/\n-                        \/\/\/ * module [java.base\/]\n-                        \/\/\/ * package [java.util]\n-                        \/\/\/ * class [String] or interface [Runnable]\n-                        \/\/\/ * a field [String#CASE_INSENSITIVE_ORDER]\n-                        \/\/\/ * a constructor [String#String()]\n-                        \/\/\/ * a method [String#chars()]\n-                        public class C { }\"\"\");\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        \/\/ in the following carefully avoid checking the URL host, which is of less importance and may vary over time;\n-        \/\/ the interesting part is the tail of the path after the host\n-        new OutputChecker(\"p\/C.html\")\n-                .setExpectOrdered(true)\n-                .check(\"module <a href=\\\"https:\/\/\",\n-                        \"\/api\/java.base\/module-summary.html\\\" class=\\\"external-link\\\"><code>java.base<\/code><\/a>\",\n-\n-                        \"package <a href=\\\"https:\/\/\",\n-                        \"\/api\/java.base\/java\/util\/package-summary.html\\\" class=\\\"external-link\\\"><code>java.util<\/code><\/a>\",\n-\n-                        \"class <a href=\\\"https:\/\/\",\n-                        \"\/api\/java.base\/java\/lang\/String.html\\\" title=\\\"class or interface in java.lang\\\" class=\\\"external-link\\\"><code>String<\/code><\/a>\",\n-\n-                        \"interface <a href=\\\"https:\/\/\",\n-                        \"\/api\/java.base\/java\/lang\/Runnable.html\\\" title=\\\"class or interface in java.lang\\\" class=\\\"external-link\\\"><code>Runnable<\/code><\/a>\",\n-\n-                        \"a field <a href=\\\"https:\/\/\",\n-                        \"\/api\/java.base\/java\/lang\/String.html#CASE_INSENSITIVE_ORDER\\\" title=\\\"class or interface in java.lang\\\" class=\\\"external-link\\\"><code>String.CASE_INSENSITIVE_ORDER<\/code><\/a>\",\n-\n-                        \"a constructor <a href=\\\"https:\/\/\",\n-                        \"\/api\/java.base\/java\/lang\/String.html#%3Cinit%3E()\\\" title=\\\"class or interface in java.lang\\\" class=\\\"external-link\\\"><code>String()<\/code><\/a><\/li>\",\n-\n-                        \"a method <a href=\\\"https:\/\/\",\n-                        \"\/api\/java.base\/java\/lang\/String.html#chars()\\\" title=\\\"class or interface in java.lang\\\" class=\\\"external-link\\\"><code>String.chars()<\/code><\/a>\");\n-    }\n-\n-    @Test\n-    public void testSee(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    \/\/\/ First sentence.\n-                    \/\/\/ @see \"A reference\"\n-                    \/\/\/ @see <a href=\"http:\/\/www.example.com\">Example<\/a>\n-                    \/\/\/ @see D a _Markdown_ description\n-                    public class C { }\n-                    \"\"\",\n-                \"\"\"\n-                    package p;\n-                    public class D { }\"\"\");\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/C.html\", true,\n-                \"\"\"\n-                    <dt>See Also:<\/dt>\n-                    <dd>\n-                    <ul class=\"tag-list\">\n-                    <li>\"A reference\"<\/li>\n-                    <li><a href=\"http:\/\/www.example.com\">Example<\/a><\/li>\n-                    <li><a href=\"D.html\" title=\"class in p\">a <em>Markdown<\/em> description<\/a><\/li>\n-                    <\/ul>\n-                    <\/dd>\"\"\");\n-\n-    }\n-\n-    @Test\n-    public void testIndentedInlineReturn(Path base) throws Exception {\n-        \/\/this is a Markdown-specific test, because leading whitespace is ignored in HTML comments\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    \/\/\/ Class description.\n-                    public class C {\n-                        \/\/\/    {@return an int}\n-                        \/\/\/ More description.\n-                        public int m() { return 0; }\n-                    }\n-                    \"\"\");\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/C.html\", true,\n-                \"\"\"\n-                    <section class=\"detail\" id=\"m()\">\n-                    <h3>m<\/h3>\n-                    <div class=\"horizontal-scroll\">\n-                    <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span class=\"return-type\">int<\/span>&nbsp;<span class=\"element-name\">m<\/span>()<\/div>\n-                    <div class=\"block\">Returns an int.\n-                    More description.<\/div>\n-                    <dl class=\"notes\">\n-                    <dt>Returns:<\/dt>\n-                    <dd>an int<\/dd>\n-                    <\/dl>\n-                    <\/div>\n-                    <\/section>\"\"\");\n-    }\n-\n@@ -522,505 +172,0 @@\n-    @Test\n-    public void testDocFile(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                package p;\n-                \/\/\/ First sentence.\n-                public class C { }\n-                \"\"\");\n-        tb.writeFile(src.resolve(\"p\").resolve(\"doc-files\").resolve(\"markdown.md\"),\n-                \"\"\"\n-                # This is a _Markdown_ heading\n-\n-                Lorem ipsum\"\"\");\n-\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/doc-files\/markdown.html\", true,\n-                \"\"\"\n-                    <title>This is a Markdown heading<\/title>\n-                    \"\"\",\n-                \"\"\"\n-                    <main role=\"main\"><h1 id=\"this-is-a-markdown-heading-heading1\">This is a <em>Markdown<\/em> heading<\/h1>\n-                    <p>Lorem ipsum<\/p>\n-                    <\/main>\n-                    \"\"\");\n-    }\n-\n-    @Test\n-    public void testOverview(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                package p;\n-                \/\/\/ First sentence.\n-                public class C { }\n-                \"\"\");\n-        var overviewFile = src.resolve(\"overview.md\");\n-        tb.writeFile(overviewFile,\n-                \"\"\"\n-                This is a _Markdown_ overview.\n-                Lorem ipsum\"\"\");\n-\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"-overview\", overviewFile.toString(),\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"index.html\", true,\n-                \"\"\"\n-                    <div class=\"block\">This is a <em>Markdown<\/em> overview.\n-                    Lorem ipsum<\/div>\"\"\");\n-    }\n-\n-    \/\/ The following test checks whether the output of system taglets\n-    \/\/ is or is not wrapped in <p> tags, depending on the context within\n-    \/\/ the doc comment and the output generated by the taglet.\n-    \/\/\n-    \/\/ {@code ...} is used as an example of a tag that generates phrasing content.\n-    \/\/ {@snippet ...} is used as an example of a tag that generates block content.\n-    \/\/\n-    \/\/ See also: testUserTaglets\n-    @Test\n-    public void testSystemTaglets(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    public class C {\n-                        \/\/\/ First sentence.\n-                        \/\/\/\n-                        \/\/\/ {@code this is code_standalone}\n-                        \/\/\/\n-                        \/\/\/ Lorem ipsum.\n-                        public void code_standalone() { }\n-\n-                        \/\/\/ First sentence.\n-                        \/\/\/\n-                        \/\/\/ Before.\n-                        \/\/\/ {@code this is code_wrapped}\n-                        \/\/\/ After.\n-                        \/\/\/\n-                        \/\/\/ Lorem ipsum.\n-                        public void code_wrapped() { }\n-\n-                        \/\/\/ First sentence.\n-                        \/\/\/\n-                        \/\/\/ {@snippet :\n-                        \/\/\/    this is snippet_standalone\n-                        \/\/\/ }\n-                        \/\/\/\n-                        \/\/\/ Lorem ipsum.\n-                        public void snippet_standalone() { }\n-\n-                        \/\/\/ First sentence.\n-                        \/\/\/\n-                        \/\/\/ Before.\n-                        \/\/\/ {@snippet :\n-                        \/\/\/    this is a snippet_wrapped\n-                        \/\/\/ }\n-                        \/\/\/ After.\n-                        \/\/\/\n-                        \/\/\/ Lorem ipsum.\n-                        public void snippet_wrapped() { }\n-                    }\"\"\");\n-\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/C.html\", true,\n-                \"\"\"\n-                    <div class=\"block\"><p>First sentence.<\/p>\n-                    <p><code>this is code_standalone<\/code><\/p>\n-                    <p>Lorem ipsum.<\/p>\n-                    <\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"block\"><p>First sentence.<\/p>\n-                    <p>Before.\n-                    <code>this is code_wrapped<\/code>\n-                    After.<\/p>\n-                    <p>Lorem ipsum.<\/p>\n-                    <\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"block\"><p>First sentence.<\/p>\n-                    <div class=\"snippet-container\"><button class=\"copy snippet-copy\" aria-label=\"Copy snippet\" \\\n-                    onclick=\"copySnippet(this)\"><span data-copied=\"Copied!\">Copy<\/span>\\\n-                    <img src=\"..\/resource-files\/copy.svg\" alt=\"Copy snippet\"><\/button>\n-                    <pre class=\"snippet\"><code>   this is snippet_standalone\n-                    <\/code><\/pre>\n-                    <\/div>\n-\n-                    <p>Lorem ipsum.<\/p>\n-                    <\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"block\"><p>First sentence.<\/p>\n-                    <p>Before.<\/p>\n-                    <div class=\"snippet-container\"><button class=\"copy snippet-copy\" aria-label=\"Copy snippet\" onclick=\"copySnippet(this)\"><span data-copied=\"Copied!\">Copy<\/span><img src=\"..\/resource-files\/copy.svg\" alt=\"Copy snippet\"><\/button>\n-                    <pre class=\"snippet\"><code>   this is a snippet_wrapped\n-                    <\/code><\/pre>\n-                    <\/div>\n-\n-                    <p>After.<\/p>\n-                    <p>Lorem ipsum.<\/p>\n-                    <\/div>\"\"\");\n-    }\n-\n-    \/\/ The following test checks whether the output of user-defined taglets\n-    \/\/ is or is not wrapped in <p> tags, depending on the context within\n-    \/\/ the doc comment and the output generated by the taglet.\n-    \/\/\n-    \/\/ {@span ...} is used as an example of a taglet that generates phrasing content.\n-    \/\/ {@div ...} is used as an example of a taglet that generates block content.\n-    \/\/\n-    \/\/ See also: testSystemTaglets\n-    @Test\n-    public void testUserTaglets(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    public class C {\n-                        \/\/\/ First sentence.\n-                        \/\/\/\n-                        \/\/\/ {@span this is phrasing_standalone}\n-                        \/\/\/\n-                        \/\/\/ Lorem ipsum.\n-                        public void phrasing_standalone() { }\n-\n-                        \/\/\/ First sentence.\n-                        \/\/\/\n-                        \/\/\/ Before.\n-                        \/\/\/ {@span this is phrasing_wrapped}\n-                        \/\/\/ After.\n-                        \/\/\/\n-                        \/\/\/ Lorem ipsum.\n-                        public void phrasing_wrapped() { }\n-\n-                        \/\/\/ First sentence.\n-                        \/\/\/\n-                        \/\/\/ {@div this is block_standalone}\n-                        \/\/\/\n-                        \/\/\/ Lorem ipsum.\n-                        public void block_standalone() { }\n-\n-                        \/\/\/ First sentence.\n-                        \/\/\/\n-                        \/\/\/ Before.\n-                        \/\/\/ {@div this is block_wrapped}\n-                        \/\/\/ After.\n-                        \/\/\/\n-                        \/\/\/ Lorem ipsum.\n-                        public void block_wrapped() { }\n-                    }\"\"\");\n-\n-        String testClasses = System.getProperty(\"test.classes\");\n-\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-tagletpath\", testClasses,\n-                \"-taglet\", \"DivTaglet\",\n-                \"-taglet\", \"SpanTaglet\",\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-\n-        checkOutput(\"p\/C.html\", true, \"\"\"\n-                    <div class=\"block\"><p>First sentence.<\/p>\n-                    <p><span>this is phrasing_standalone<\/span><\/p>\n-                    <p>Lorem ipsum.<\/p>\n-                    <\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"block\"><p>First sentence.<\/p>\n-                    <p>Before.\n-                    <span>this is phrasing_wrapped<\/span>\n-                    After.<\/p>\n-                    <p>Lorem ipsum.<\/p>\n-                    <\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"block\"><p>First sentence.<\/p>\n-                    <div>this is block_standalone<\/div>\n-                    <p>Lorem ipsum.<\/p>\n-                    <\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"block\"><p>First sentence.<\/p>\n-                    <p>Before.<\/p>\n-                    <div>this is block_wrapped<\/div>\n-                    <p>After.<\/p>\n-                    <p>Lorem ipsum.<\/p>\n-                    <\/div>\"\"\");\n-    }\n-\n-    \/\/\/ Test the ability to include array elements in method signatures for\n-    \/\/\/ automatic links to program elements.\n-    @Test\n-    public void testReferenceWithArrays(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-\n-        \/\/ in the following,\n-        \/\/\n-        \/\/ * Link 0 is a simple control for a shortcut reference link (without any arrays)\n-        \/\/ * Link 1a and Link 2a are negative controls, in that they are _not_ valid links\n-        \/\/   because of the unescaped [] pair\n-        \/\/ * Link 1b and 2b are the positive tests, showing that the square brackets\n-        \/\/   need to be escaped in the source code, and that they are not escaped in\n-        \/\/   the generated HTML\n-\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    \/\/\/ First sentence.\n-                    \/\/\/ * Link 0 to [util.Arrays]\n-                    \/\/\/ * Link 1a to [Arrays-equals][util.Arrays#equals(Object[],Object[])]\n-                    \/\/\/ * Link 1b to [Arrays-equals][util.Arrays#equals(Object\\\\[\\\\],Object\\\\[\\\\])]\n-                    \/\/\/ * Link 2a to [util.Arrays#equals(Object[],Object[])]\n-                    \/\/\/ * Link 2b to [util.Arrays#equals(Object\\\\[\\\\],Object\\\\[\\\\])]\n-                    public class C { }\"\"\",\n-                \/\/ simulate java.util.Arrays.equals, to avoid links to platform references\n-                \"\"\"\n-                    package util;\n-                    public class Arrays {\n-                        public boolean equals(Object[] a, Object[] a2);\n-                    }\"\"\");\n-\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\", \"util\");\n-\n-        checkExit(Exit.OK);\n-        checkOutput(\"p\/C.html\", true,\n-                \"\"\"\n-                    Link 0 to <a href=\"..\/util\/Arrays.html\" title=\"class in util\"><code>Arrays<\/code><\/a>\"\"\",\n-                \"\"\"\n-                    Link 1a to [Arrays-equals][util.Arrays#equals(Object[],Object[])]\"\"\",\n-                \"\"\"\n-                    Link 1b to <a href=\"..\/util\/Arrays.html#equals(java.lang.Object%5B%5D,\\\n-                    java.lang.Object%5B%5D)\">Arrays-equals<\/a>\"\"\",\n-                \"\"\"\n-                    Link 2a to [util.Arrays#equals(Object[],Object[])]\"\"\",\n-                \"\"\"\n-                    Link 2b to <a href=\"..\/util\/Arrays.html#equals(java.lang.Object%5B%5D,\\\n-                    java.lang.Object%5B%5D)\"><code>Arrays.equals(Object[],Object[])<\/code><\/a>\"\"\"\n-                );\n-    }\n-\n-    \/\/ Test the ability to put links in the first sentence of a description.\n-    \/\/ Note that we user-defined reference links cannot be used in the first\n-    \/\/ sentence, and so in that case we verify the behavior is \"as expected\".\n-    @Test\n-    public void testFirstSentenceLinks(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-\n-        \/\/ Apart from the (control) case, the other cases exercise\n-        \/\/ various kinds of links in the first sentence of a description.\n-        \/\/ Note the last case is an explicit test of a link that is\n-        \/\/ _not_ currently supported, since the link reference definition\n-        \/\/ is not part of the first sentence.\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    import q.MyObject;\n-                    public class C {\n-                        \/\/\/ First sentence.\n-                        \/\/\/ Control: [MyObject]\n-                        public void m1() { }\n-\n-                        \/\/\/ Simple autoref in first sentence [MyObject].\n-                        \/\/\/ More.\n-                        public void m2() { }\n-\n-                        \/\/\/ Qualified autoref in first sentence [q.MyObject].\n-                        \/\/\/ More.\n-                        public void m3() { }\n-\n-                        \/\/\/ Standard link with periods [example.com](http:\/\/example.com).\n-                        \/\/\/ More.\n-                        public void m4() { }\n-\n-                        \/\/\/ Manual ref link [foo].\n-                        \/\/\/ More.\n-                        \/\/\/\n-                        \/\/\/ [foo]: http:example.com\n-                        public void m5() { }\n-                    }\"\"\",\n-                \/\/ use a simple class in a different package, to avoid platform links to system classes\n-                \"\"\"\n-                    package q;\n-                    public class MyObject { }\"\"\");\n-\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--source-path\", src.toString(),\n-                \"p\", \"q\");\n-        checkExit(Exit.OK);\n-\n-        \/\/ use checkOrder and the delimiter comments to ensure that\n-        \/\/ we check the strings in the method summary table, and not\n-        \/\/ subsequently in the method details section.\n-        checkOrder(\"p\/C.html\",\n-                \"<!-- ========== METHOD SUMMARY =========== -->\",\n-                \"\"\"\n-                    <div class=\"block\">Simple autoref in first sentence <a href=\"..\/q\/MyObject.html\" \\\n-                    title=\"class in q\"><code>MyObject<\/code><\/a>.<\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"block\">Qualified autoref in first sentence <a href=\"..\/q\/MyObject.html\" \\\n-                    title=\"class in q\"><code>MyObject<\/code><\/a>.<\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"block\">Standard link with periods \\\n-                    <a href=\"http:\/\/example.com\">example.com<\/a>.<\/div>\"\"\",\n-                \/\/ The following is a test of the regrettably expected behavior,\n-                \/\/ because the link reference definition is not carried into\n-                \/\/ the first sentence.\n-                \"\"\"\n-                    <div class=\"block\">Manual ref link [foo].<\/div>\"\"\",\n-                \"<!-- ============ METHOD DETAIL ========== -->\"\n-                );\n-    }\n-\n-    \/\/ Test that periods within certain constructs do not prematurely terminate\n-    \/\/ the first sentence.\n-    @Test\n-    public void testFirstSentencePeriods(Path base) throws Exception {\n-        testFirstSentencePeriods(base.resolve(\"no-bi\"), false);\n-        testFirstSentencePeriods(base.resolve(\"bi\"), true);\n-    }\n-\n-    void testFirstSentencePeriods(Path base, boolean useBreakIterator) throws Exception {\n-        Path src = base.resolve(\"src\");\n-\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                        package p;\n-                        public class C {\n-                            \/\/\/ Code span `1.0` end.\n-                            \/\/\/ More.\n-                            public void m1() { }\n-                            \/\/\/ Complex code span ``` `1.0` ``` end.\n-                            \/\/\/ More.\n-                            public void m2() { }\n-                            \/\/\/ Period space `1.  2.  3.` end.\n-                            \/\/\/ More.\n-                            public void m3() { }\n-                            \/\/\/ Link [example.com](http:\/\/example.com) end.\n-                            \/\/\/ More.\n-                            public void m4() { }\n-                        }\n-                        \"\"\");\n-\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                (useBreakIterator ? \"-breakiterator\" : \"-XDdummy\"),\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-        checkExit(Exit.OK);\n-\n-        \/\/ use checkOrder and the delimiter comments to ensure that\n-        \/\/ we check the strings in the method summary table, and not\n-        \/\/ subsequently in the method details section.\n-        checkOrder(\"p\/C.html\",\n-                \"<!-- ========== METHOD SUMMARY =========== -->\",\n-                \"\"\"\n-                    <div class=\"block\">Code span <code>1.0<\/code> end.<\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"block\">Complex code span <code>`1.0`<\/code> end.<\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"block\">Period space <code>1.  2.  3.<\/code> end.<\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"block\">Link <a href=\"http:\/\/example.com\">example.com<\/a> end.<\/div>\"\"\",\n-                \"<!-- ============ METHOD DETAIL ========== -->\"\n-        );\n-    }\n-\n-    @Test\n-    public void testDeprecated(Path base) throws Exception {\n-        Path src = base.resolve(\"src\");\n-\n-        tb.writeJavaFiles(src,\n-                \"\"\"\n-                    package p;\n-                    public class Control {\n-                        \/**\n-                         * First sentence. Second sentence.\n-                         *\/\n-                         @Deprecated\n-                         public void anno_noTag() { }\n-                        \/**\n-                         * First sentence. Second sentence.\n-                         * @deprecated deprecated-text\n-                         *\/\n-                         public void noAnno_tag() { }\n-                        \/**\n-                         * First sentence. Second sentence.\n-                         * @deprecated deprecated-text\n-                         *\/\n-                        @Deprecated\n-                        public void anno_tag() { }\n-                    }\"\"\",\n-                \"\"\"\n-                    package p;\n-                    public class MarkdownComments {\n-                        \/\/\/ First sentence. Second sentence.\n-                        @Deprecated\n-                        public void anno_noTag() { }\n-                        \/\/\/ First sentence. Second sentence.\n-                        \/\/\/ @deprecated deprecated-text.\n-                        public void noAnno_tag() { }\n-                        \/\/\/ First sentence. Second sentence.\n-                        \/\/\/ @deprecated deprecated-text\n-                        @Deprecated\n-                        public void anno_tag() { }\n-                    }\"\"\");\n-\n-        javadoc(\"-d\", base.resolve(\"api\").toString(),\n-                \"-Xdoclint:none\",\n-                \"--no-platform-links\",\n-                \"--source-path\", src.toString(),\n-                \"p\");\n-        checkExit(Exit.OK);\n-\n-        \/\/ Note: javadoc does not generate warnings about any mismatch\n-        \/\/ between @Deprecated annotations and @deprecated tags:\n-        \/\/ the mismatch is detected and reported by javac Attr phase,\n-        \/\/ when enabled by -Xlint:dep-ann.\n-\n-        \/\/ the output for these two files should be the same, except where it is not\n-        for (var f : List.of(\"p\/Control.html\", \"p\/MarkdownComments.html\")) {\n-            \/\/ in the following checks we check from the signature,\n-            \/\/ beginning at the name, through to the end of the main description.\n-            checkOutput(f, true,\n-                    \"\"\"\n-                        <span class=\"element-name\">anno_noTag<\/span>()<\/div>\n-                        <div class=\"deprecation-block\"><span class=\"deprecated-label\">Deprecated.<\/span><\/div>\n-                        <div class=\"block\">First sentence. Second sentence.<\/div>\"\"\",\n-\n-                    switch (f) {\n-                        \/\/ @deprecated but no annotation in a traditional comment implies deprecation\n-                        case \"p\/Control.html\" -> \"\"\"\n-                            <span class=\"element-name\">noAnno_tag<\/span>()<\/div>\n-                            <div class=\"deprecation-block\"><span class=\"deprecated-label\">Deprecated.<\/span>\n-                            <div class=\"deprecation-comment\">deprecated-text<\/div>\n-                            <\/div>\n-                            <div class=\"block\">First sentence. Second sentence.<\/div>\"\"\";\n-\n-                        \/\/ @deprecated but no annotation in a Markdown comment does not imply deprecation\n-                        case \"p\/MarkdownComments.html\" -> \"\"\"\n-                            <span class=\"element-name\">noAnno_tag<\/span>()<\/div>\n-                            <div class=\"block\">First sentence. Second sentence.<\/div>\"\"\";\n-\n-                        default -> throw new Error();\n-                    },\n-\n-                    \"\"\"\n-                        <span class=\"element-name\">anno_tag<\/span>()<\/div>\n-                        <div class=\"deprecation-block\"><span class=\"deprecated-label\">Deprecated.<\/span>\n-                        <div class=\"deprecation-comment\">deprecated-text<\/div>\n-                        <\/div>\n-                        <div class=\"block\">First sentence. Second sentence.<\/div>\"\"\");\n-        }\n-    }\n-\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdown.java","additions":1,"deletions":856,"binary":false,"changes":857,"status":"modified"},{"patch":"@@ -341,1 +341,0 @@\n-\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownCodeSpans.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8298405\n+ * @summary  Markdown support in the standard doclet\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestMarkdownDeprecated\n+ *\/\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+public class TestMarkdownDeprecated extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestMarkdownDeprecated();\n+        tester.runTests();\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testDeprecated(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class Control {\n+                        \/**\n+                         * First sentence. Second sentence.\n+                         *\/\n+                         @Deprecated\n+                         public void anno_noTag() { }\n+                        \/**\n+                         * First sentence. Second sentence.\n+                         * @deprecated deprecated-text\n+                         *\/\n+                         public void noAnno_tag() { }\n+                        \/**\n+                         * First sentence. Second sentence.\n+                         * @deprecated deprecated-text\n+                         *\/\n+                        @Deprecated\n+                        public void anno_tag() { }\n+                    }\"\"\",\n+                \"\"\"\n+                    package p;\n+                    public class MarkdownComments {\n+                        \/\/\/ First sentence. Second sentence.\n+                        @Deprecated\n+                        public void anno_noTag() { }\n+                        \/\/\/ First sentence. Second sentence.\n+                        \/\/\/ @deprecated deprecated-text.\n+                        public void noAnno_tag() { }\n+                        \/\/\/ First sentence. Second sentence.\n+                        \/\/\/ @deprecated deprecated-text\n+                        @Deprecated\n+                        public void anno_tag() { }\n+                    }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--no-platform-links\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ Note: javadoc does not generate warnings about any mismatch\n+        \/\/ between @Deprecated annotations and @deprecated tags:\n+        \/\/ the mismatch is detected and reported by javac Attr phase,\n+        \/\/ when enabled by -Xlint:dep-ann.\n+\n+        \/\/ the output for these two files should be the same, except where it is not\n+        for (var f : List.of(\"p\/Control.html\", \"p\/MarkdownComments.html\")) {\n+            \/\/ in the following checks we check from the signature,\n+            \/\/ beginning at the name, through to the end of the main description.\n+            checkOutput(f, true,\n+                    \"\"\"\n+                        <span class=\"element-name\">anno_noTag<\/span>()<\/div>\n+                        <div class=\"deprecation-block\"><span class=\"deprecated-label\">Deprecated.<\/span><\/div>\n+                        <div class=\"block\">First sentence. Second sentence.<\/div>\"\"\",\n+\n+                    switch (f) {\n+                        \/\/ @deprecated but no annotation in a traditional comment implies deprecation\n+                        case \"p\/Control.html\" -> \"\"\"\n+                            <span class=\"element-name\">noAnno_tag<\/span>()<\/div>\n+                            <div class=\"deprecation-block\"><span class=\"deprecated-label\">Deprecated.<\/span>\n+                            <div class=\"deprecation-comment\">deprecated-text<\/div>\n+                            <\/div>\n+                            <div class=\"block\">First sentence. Second sentence.<\/div>\"\"\";\n+\n+                        \/\/ @deprecated but no annotation in a Markdown comment does not imply deprecation\n+                        case \"p\/MarkdownComments.html\" -> \"\"\"\n+                            <span class=\"element-name\">noAnno_tag<\/span>()<\/div>\n+                            <div class=\"block\">First sentence. Second sentence.<\/div>\"\"\";\n+\n+                        default -> throw new Error();\n+                    },\n+\n+                    \"\"\"\n+                        <span class=\"element-name\">anno_tag<\/span>()<\/div>\n+                        <div class=\"deprecation-block\"><span class=\"deprecated-label\">Deprecated.<\/span>\n+                        <div class=\"deprecation-comment\">deprecated-text<\/div>\n+                        <\/div>\n+                        <div class=\"block\">First sentence. Second sentence.<\/div>\"\"\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownDeprecated.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8298405\n+ * @summary  Markdown support in the standard doclet\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestMarkdownFiles\n+ *\/\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+public class TestMarkdownFiles extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestMarkdownFiles();\n+        tester.runTests();\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testDocFile(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                package p;\n+                \/\/\/ First sentence.\n+                public class C { }\n+                \"\"\");\n+        tb.writeFile(src.resolve(\"p\").resolve(\"doc-files\").resolve(\"markdown.md\"),\n+                \"\"\"\n+                # This is a _Markdown_ heading\n+\n+                Lorem ipsum\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/doc-files\/markdown.html\", true,\n+                \"\"\"\n+                    <title>This is a Markdown heading<\/title>\n+                    \"\"\",\n+                \"\"\"\n+                    <main role=\"main\"><h1 id=\"this-is-a-markdown-heading-heading1\">This is a <em>Markdown<\/em> heading<\/h1>\n+                    <p>Lorem ipsum<\/p>\n+                    <\/main>\n+                    \"\"\");\n+    }\n+\n+    @Test\n+    public void testOverview(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                package p;\n+                \/\/\/ First sentence.\n+                public class C { }\n+                \"\"\");\n+        var overviewFile = src.resolve(\"overview.md\");\n+        tb.writeFile(overviewFile,\n+                \"\"\"\n+                This is a _Markdown_ overview.\n+                Lorem ipsum\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"-overview\", overviewFile.toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"index.html\", true,\n+                \"\"\"\n+                    <div class=\"block\">This is a <em>Markdown<\/em> overview.\n+                    Lorem ipsum<\/div>\"\"\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownFiles.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,238 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8298405\n+ * @summary  Markdown support in the standard doclet\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestMarkdownFirstSentence\n+ *\/\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+public class TestMarkdownFirstSentence extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestMarkdownFirstSentence();\n+        tester.runTests();\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testFirstSentence(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        \/\/\/ This is the _first_ sentence.\n+                        \/\/\/ This is the _second_ sentence.\n+                         public void m() { }\n+                    }\n+                    \"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOrder(\"p\/C.html\",\n+                \"\"\"\n+                    <section class=\"method-summary\" id=\"method-summary\">\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">This is the <em>first<\/em> sentence.<\/div>\"\"\",\n+                \"\"\"\n+                    <section class=\"method-details\" id=\"method-detail\">\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">This is the <em>first<\/em> sentence.\n+                    This is the <em>second<\/em> sentence.<\/div>\"\"\");\n+    }\n+\n+    \/\/ Test the ability to put links in the first sentence of a description.\n+    \/\/ Note that user-defined reference links cannot be used in the first\n+    \/\/ sentence, and so in that case we verify the behavior is \"as expected\".\n+    @Test\n+    public void testFirstSentenceLinks(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+\n+        \/\/ Apart from the (control) case, the other cases exercise\n+        \/\/ various kinds of links in the first sentence of a description.\n+        \/\/ Note the last case is an explicit test of a link that is\n+        \/\/ _not_ currently supported, since the link reference definition\n+        \/\/ is not part of the first sentence.\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    import q.MyObject;\n+                    public class C {\n+                        \/\/\/ First sentence.\n+                        \/\/\/ Control: [MyObject]\n+                        public void m1() { }\n+\n+                        \/\/\/ Simple autoref in first sentence [MyObject].\n+                        \/\/\/ More.\n+                        public void m2() { }\n+\n+                        \/\/\/ Qualified autoref in first sentence [q.MyObject].\n+                        \/\/\/ More.\n+                        public void m3() { }\n+\n+                        \/\/\/ Standard link with periods [example.com](http:\/\/example.com).\n+                        \/\/\/ More.\n+                        public void m4() { }\n+\n+                        \/\/\/ Manual ref link [foo].\n+                        \/\/\/ More.\n+                        \/\/\/\n+                        \/\/\/ [foo]: http:example.com\n+                        public void m5() { }\n+                    }\"\"\",\n+                \/\/ use a simple class in a different package, to avoid platform links to system classes\n+                \"\"\"\n+                    package q;\n+                    public class MyObject { }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\", \"q\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ use checkOrder and the delimiter comments to ensure that\n+        \/\/ we check the strings in the method summary table, and not\n+        \/\/ subsequently in the method details section.\n+        checkOrder(\"p\/C.html\",\n+                \"<!-- ========== METHOD SUMMARY =========== -->\",\n+                \"\"\"\n+                    <div class=\"block\">Simple autoref in first sentence <a href=\"..\/q\/MyObject.html\" \\\n+                    title=\"class in q\"><code>MyObject<\/code><\/a>.<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">Qualified autoref in first sentence <a href=\"..\/q\/MyObject.html\" \\\n+                    title=\"class in q\"><code>MyObject<\/code><\/a>.<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">Standard link with periods \\\n+                    <a href=\"http:\/\/example.com\">example.com<\/a>.<\/div>\"\"\",\n+                \/\/ The following is a test of the regrettably expected behavior,\n+                \/\/ because the link reference definition is not carried into\n+                \/\/ the first sentence.\n+                \"\"\"\n+                    <div class=\"block\">Manual ref link [foo].<\/div>\"\"\",\n+                \"<!-- ============ METHOD DETAIL ========== -->\"\n+        );\n+    }\n+\n+    \/\/ Test that periods within certain constructs do not prematurely terminate\n+    \/\/ the first sentence.\n+    @Test\n+    public void testFirstSentencePeriods(Path base) throws Exception {\n+        testFirstSentencePeriods(base.resolve(\"no-bi\"), false);\n+        testFirstSentencePeriods(base.resolve(\"bi\"), true);\n+    }\n+\n+    void testFirstSentencePeriods(Path base, boolean useBreakIterator) throws Exception {\n+        Path src = base.resolve(\"src\");\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                        package p;\n+                        public class C {\n+                            \/\/\/ Code span `1.0` end.\n+                            \/\/\/ More.\n+                            public void m1() { }\n+                            \/\/\/ Complex code span ``` `1.0` ``` end.\n+                            \/\/\/ More.\n+                            public void m2() { }\n+                            \/\/\/ Period space `1.  2.  3.` end.\n+                            \/\/\/ More.\n+                            public void m3() { }\n+                            \/\/\/ Link [example.com](http:\/\/example.com) end.\n+                            \/\/\/ More.\n+                            public void m4() { }\n+                        }\n+                        \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                (useBreakIterator ? \"-breakiterator\" : \"-XDdummy\"),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ use checkOrder and the delimiter comments to ensure that\n+        \/\/ we check the strings in the method summary table, and not\n+        \/\/ subsequently in the method details section.\n+        checkOrder(\"p\/C.html\",\n+                \"<!-- ========== METHOD SUMMARY =========== -->\",\n+                \"\"\"\n+                    <div class=\"block\">Code span <code>1.0<\/code> end.<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">Complex code span <code>`1.0`<\/code> end.<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">Period space <code>1.  2.  3.<\/code> end.<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">Link <a href=\"http:\/\/example.com\">example.com<\/a> end.<\/div>\"\"\",\n+                \"<!-- ============ METHOD DETAIL ========== -->\"\n+        );\n+    }\n+\n+    @Test\n+    public void testIndentedInlineReturn(Path base) throws Exception {\n+        \/\/this is a Markdown-specific test, because leading whitespace is ignored in HTML comments\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    \/\/\/ Class description.\n+                    public class C {\n+                        \/\/\/    {@return an int}\n+                        \/\/\/ More description.\n+                        public int m() { return 0; }\n+                    }\n+                    \"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <section class=\"detail\" id=\"m()\">\n+                    <h3>m<\/h3>\n+                    <div class=\"horizontal-scroll\">\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span class=\"return-type\">int<\/span>&nbsp;<span class=\"element-name\">m<\/span>()<\/div>\n+                    <div class=\"block\">Returns an int.\n+                    More description.<\/div>\n+                    <dl class=\"notes\">\n+                    <dt>Returns:<\/dt>\n+                    <dd>an int<\/dd>\n+                    <\/dl>\n+                    <\/div>\n+                    <\/section>\"\"\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownFirstSentence.java","additions":238,"deletions":0,"binary":false,"changes":238,"status":"added"},{"patch":"@@ -187,1 +187,0 @@\n-\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownHeadings.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8298405\n+ * @summary  Markdown support in the standard doclet\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestMarkdownInheritDoc\n+ *\/\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+public class TestMarkdownInheritDoc extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestMarkdownInheritDoc();\n+        tester.runTests();\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testInherit_md_md(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class Base {\n+                        \/\/\/ Markdown comment.\n+                        \/\/\/ @throws Exception Base _Markdown_\n+                        public void m() throws Exception { }\n+                    }\"\"\",\n+                \"\"\"\n+                    package p;\n+                    public class Derived extends Base {\n+                        \/\/\/ Markdown comment.\n+                        \/\/\/ @throws {@inheritDoc}\n+                        public void m() throws Exception { }\n+                    }\n+                    \"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--no-platform-links\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/Derived.html\", true,\n+                \"\"\"\n+                    <dt>Throws:<\/dt>\n+                    <dd><code>java.lang.Exception<\/code> - Base <em>Markdown<\/em><\/dd>\n+                    \"\"\");\n+    }\n+\n+    @Test\n+    public void testInherit_md_plain(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class Base {\n+                        \/\/\/ Markdown comment.\n+                        \/\/\/ @throws Exception Base _Markdown_\n+                        public void m() throws Exception { }\n+                    }\"\"\",\n+                \"\"\"\n+                    package p;\n+                    public class Derived extends Base {\n+                        \/**\n+                         * Plain comment.\n+                         * @throws {@inheritDoc}\n+                         *\/\n+                         public void m() throws Exception { }\n+                    }\n+                    \"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--no-platform-links\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/Derived.html\", true,\n+                \"\"\"\n+                    <dt>Throws:<\/dt>\n+                    <dd><code>java.lang.Exception<\/code> - Base <em>Markdown<\/em><\/dd>\n+                    \"\"\");\n+    }\n+\n+    @Test\n+    public void testInherit_plain_md(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class Base {\n+                        \/**\n+                         * Plain comment.\n+                         * @throws Exception Base _Not Markdown_\n+                         *\/\n+                         public void m() throws Exception { }\n+                    }\"\"\",\n+                \"\"\"\n+                    package p;\n+                    public class Derived extends Base {\n+                        \/\/\/ Markdown comment.\n+                        \/\/\/ @throws {@inheritDoc}\n+                        public void m() throws Exception { }\n+                    }\n+                    \"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--no-platform-links\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/Derived.html\", true,\n+                \"\"\"\n+                    <dt>Throws:<\/dt>\n+                    <dd><code>java.lang.Exception<\/code> - Base _Not Markdown_<\/dd>\n+                    \"\"\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownInheritDoc.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -0,0 +1,289 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8298405\n+ * @summary  Markdown support in the standard doclet\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestMarkdownLinks\n+ *\/\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+public class TestMarkdownLinks extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestMarkdownLinks();\n+        tester.runTests();\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testSimpleLink(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        \/\/\/ Method m1.\n+                        \/\/\/ This is different from {@link #m2()}.\n+                        public void m1() { }\n+                        \/\/\/ Method m2.\n+                        \/\/\/ This is different from {@link #m1()}.\n+                        public void m2() { }\n+                    }\n+                    \"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    Method m1.\n+                    This is different from <a href=\"#m2()\"><code>m2()<\/code><\/a>.\"\"\");\n+\n+    }\n+\n+    @Test\n+    public void testSimpleRefLink(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        \/\/\/ Method m1.\n+                        \/\/\/ This is different from [#m2()].\n+                        public void m1() { }\n+                        \/\/\/ Method m2.\n+                        \/\/\/ This is different from [#m1()].\n+                        public void m2() { }\n+                    }\n+                    \"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    Method m1.\n+                    This is different from <a href=\"#m2()\"><code>m2()<\/code><\/a>.\"\"\");\n+\n+    }\n+\n+    @Test\n+    public void testLinkWithDescription(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        \/\/\/ Method m1.\n+                        \/\/\/ This is different from {@linkplain #m2() _Markdown_ m2}.\n+                        public void m1() { }\n+                        \/\/\/ Method m2.\n+                        \/\/\/ This is different from {@linkplain #m1() _Markdown_ m1}.\n+                        public void m2() { }\n+                    }\n+                    \"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    Method m1.\n+                    This is different from <a href=\"#m2()\"><em>Markdown<\/em> m2\"\"\");\n+\n+    }\n+\n+    @Test\n+    public void testRefLinkWithDescription(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        \/\/\/ Method m1.\n+                        \/\/\/ This is different from [_Markdown_ m2][#m2()].\n+                        public void m1() { }\n+                        \/\/\/ Method m2.\n+                        \/\/\/ This is different from [_Markdown_ m1][#m1()]}.\n+                        public void m2() { }\n+                    }\n+                    \"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    Method m1.\n+                    This is different from <a href=\"#m2()\"><em>Markdown<\/em> m2\"\"\");\n+\n+    }\n+\n+    @Test\n+    public void testLinkElementKinds(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                        package p;\n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ * module [java.base\/]\n+                        \/\/\/ * package [java.util]\n+                        \/\/\/ * class [String] or interface [Runnable]\n+                        \/\/\/ * a field [String#CASE_INSENSITIVE_ORDER]\n+                        \/\/\/ * a constructor [String#String()]\n+                        \/\/\/ * a method [String#chars()]\n+                        public class C { }\"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        \/\/ in the following carefully avoid checking the URL host, which is of less importance and may vary over time;\n+        \/\/ the interesting part is the tail of the path after the host\n+        new OutputChecker(\"p\/C.html\")\n+                .setExpectOrdered(true)\n+                .check(\"module <a href=\\\"https:\/\/\",\n+                        \"\/api\/java.base\/module-summary.html\\\" class=\\\"external-link\\\"><code>java.base<\/code><\/a>\",\n+\n+                        \"package <a href=\\\"https:\/\/\",\n+                        \"\/api\/java.base\/java\/util\/package-summary.html\\\" class=\\\"external-link\\\"><code>java.util<\/code><\/a>\",\n+\n+                        \"class <a href=\\\"https:\/\/\",\n+                        \"\/api\/java.base\/java\/lang\/String.html\\\" title=\\\"class or interface in java.lang\\\" class=\\\"external-link\\\"><code>String<\/code><\/a>\",\n+\n+                        \"interface <a href=\\\"https:\/\/\",\n+                        \"\/api\/java.base\/java\/lang\/Runnable.html\\\" title=\\\"class or interface in java.lang\\\" class=\\\"external-link\\\"><code>Runnable<\/code><\/a>\",\n+\n+                        \"a field <a href=\\\"https:\/\/\",\n+                        \"\/api\/java.base\/java\/lang\/String.html#CASE_INSENSITIVE_ORDER\\\" title=\\\"class or interface in java.lang\\\" class=\\\"external-link\\\"><code>String.CASE_INSENSITIVE_ORDER<\/code><\/a>\",\n+\n+                        \"a constructor <a href=\\\"https:\/\/\",\n+                        \"\/api\/java.base\/java\/lang\/String.html#%3Cinit%3E()\\\" title=\\\"class or interface in java.lang\\\" class=\\\"external-link\\\"><code>String()<\/code><\/a><\/li>\",\n+\n+                        \"a method <a href=\\\"https:\/\/\",\n+                        \"\/api\/java.base\/java\/lang\/String.html#chars()\\\" title=\\\"class or interface in java.lang\\\" class=\\\"external-link\\\"><code>String.chars()<\/code><\/a>\");\n+    }\n+\n+    \/\/\/ Test the ability to include array elements in method signatures for\n+    \/\/\/ automatic links to program elements.\n+    @Test\n+    public void testReferenceWithArrays(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+\n+        \/\/ in the following,\n+        \/\/\n+        \/\/ * Link 0 is a simple control for a shortcut reference link (without any arrays)\n+        \/\/ * Link 1a and Link 2a are negative controls, in that they are _not_ valid links\n+        \/\/   because of the unescaped [] pair\n+        \/\/ * Link 1b and 2b are the positive tests, showing that the square brackets\n+        \/\/   need to be escaped in the source code, and that they are not escaped in\n+        \/\/   the generated HTML\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    \/\/\/ First sentence.\n+                    \/\/\/ * Link 0 to [util.Arrays]\n+                    \/\/\/ * Link 1a to [Arrays-equals][util.Arrays#equals(Object[],Object[])]\n+                    \/\/\/ * Link 1b to [Arrays-equals][util.Arrays#equals(Object\\\\[\\\\],Object\\\\[\\\\])]\n+                    \/\/\/ * Link 2a to [util.Arrays#equals(Object[],Object[])]\n+                    \/\/\/ * Link 2b to [util.Arrays#equals(Object\\\\[\\\\],Object\\\\[\\\\])]\n+                    public class C { }\"\"\",\n+                \/\/ simulate java.util.Arrays.equals, to avoid links to platform references\n+                \"\"\"\n+                    package util;\n+                    public class Arrays {\n+                        public boolean equals(Object[] a, Object[] a2);\n+                    }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\", \"util\");\n+\n+        checkExit(Exit.OK);\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    Link 0 to <a href=\"..\/util\/Arrays.html\" title=\"class in util\"><code>Arrays<\/code><\/a>\"\"\",\n+                \"\"\"\n+                    Link 1a to [Arrays-equals][util.Arrays#equals(Object[],Object[])]\"\"\",\n+                \"\"\"\n+                    Link 1b to <a href=\"..\/util\/Arrays.html#equals(java.lang.Object%5B%5D,\\\n+                    java.lang.Object%5B%5D)\">Arrays-equals<\/a>\"\"\",\n+                \"\"\"\n+                    Link 2a to [util.Arrays#equals(Object[],Object[])]\"\"\",\n+                \"\"\"\n+                    Link 2b to <a href=\"..\/util\/Arrays.html#equals(java.lang.Object%5B%5D,\\\n+                    java.lang.Object%5B%5D)\"><code>Arrays.equals(Object[],Object[])<\/code><\/a>\"\"\"\n+        );\n+    }\n+\n+    @Test\n+    public void testSee(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    \/\/\/ First sentence.\n+                    \/\/\/ @see \"A reference\"\n+                    \/\/\/ @see <a href=\"http:\/\/www.example.com\">Example<\/a>\n+                    \/\/\/ @see D a _Markdown_ description\n+                    public class C { }\n+                    \"\"\",\n+                \"\"\"\n+                    package p;\n+                    public class D { }\"\"\");\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <dt>See Also:<\/dt>\n+                    <dd>\n+                    <ul class=\"tag-list\">\n+                    <li>\"A reference\"<\/li>\n+                    <li><a href=\"http:\/\/www.example.com\">Example<\/a><\/li>\n+                    <li><a href=\"D.html\" title=\"class in p\">a <em>Markdown<\/em> description<\/a><\/li>\n+                    <\/ul>\n+                    <\/dd>\"\"\");\n+\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownLinks.java","additions":289,"deletions":0,"binary":false,"changes":289,"status":"added"},{"patch":"@@ -0,0 +1,226 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8298405\n+ * @summary  Markdown support in the standard doclet\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.* DivTaglet SpanTaglet\n+ * @run main TestMarkdownTaglets\n+ *\/\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+public class TestMarkdownTaglets extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestMarkdownTaglets();\n+        tester.runTests();\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    \/\/ The following test checks whether the output of system taglets\n+    \/\/ is or is not wrapped in <p> tags, depending on the context within\n+    \/\/ the doc comment and the output generated by the taglet.\n+    \/\/\n+    \/\/ {@code ...} is used as an example of a tag that generates phrasing content.\n+    \/\/ {@snippet ...} is used as an example of a tag that generates block content.\n+    \/\/\n+    \/\/ See also: testUserTaglets\n+    @Test\n+    public void testSystemTaglets(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ {@code this is code_standalone}\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void code_standalone() { }\n+\n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ Before.\n+                        \/\/\/ {@code this is code_wrapped}\n+                        \/\/\/ After.\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void code_wrapped() { }\n+\n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ {@snippet :\n+                        \/\/\/    this is snippet_standalone\n+                        \/\/\/ }\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void snippet_standalone() { }\n+\n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ Before.\n+                        \/\/\/ {@snippet :\n+                        \/\/\/    this is a snippet_wrapped\n+                        \/\/\/ }\n+                        \/\/\/ After.\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void snippet_wrapped() { }\n+                    }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p><code>this is code_standalone<\/code><\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p>Before.\n+                    <code>this is code_wrapped<\/code>\n+                    After.<\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <div class=\"snippet-container\"><button class=\"copy snippet-copy\" aria-label=\"Copy snippet\" \\\n+                    onclick=\"copySnippet(this)\"><span data-copied=\"Copied!\">Copy<\/span>\\\n+                    <img src=\"..\/resource-files\/copy.svg\" alt=\"Copy snippet\"><\/button>\n+                    <pre class=\"snippet\"><code>   this is snippet_standalone\n+                    <\/code><\/pre>\n+                    <\/div>\n+\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p>Before.<\/p>\n+                    <div class=\"snippet-container\"><button class=\"copy snippet-copy\" aria-label=\"Copy snippet\" onclick=\"copySnippet(this)\"><span data-copied=\"Copied!\">Copy<\/span><img src=\"..\/resource-files\/copy.svg\" alt=\"Copy snippet\"><\/button>\n+                    <pre class=\"snippet\"><code>   this is a snippet_wrapped\n+                    <\/code><\/pre>\n+                    <\/div>\n+\n+                    <p>After.<\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\");\n+    }\n+\n+    \/\/ The following test checks whether the output of user-defined taglets\n+    \/\/ is or is not wrapped in <p> tags, depending on the context within\n+    \/\/ the doc comment and the output generated by the taglet.\n+    \/\/\n+    \/\/ {@span ...} is used as an example of a taglet that generates phrasing content.\n+    \/\/ {@div ...} is used as an example of a taglet that generates block content.\n+    \/\/\n+    \/\/ See also: testSystemTaglets\n+    @Test\n+    public void testUserTaglets(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ {@span this is phrasing_standalone}\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void phrasing_standalone() { }\n+\n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ Before.\n+                        \/\/\/ {@span this is phrasing_wrapped}\n+                        \/\/\/ After.\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void phrasing_wrapped() { }\n+\n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ {@div this is block_standalone}\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void block_standalone() { }\n+\n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ Before.\n+                        \/\/\/ {@div this is block_wrapped}\n+                        \/\/\/ After.\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void block_wrapped() { }\n+                    }\"\"\");\n+\n+        String testClasses = System.getProperty(\"test.classes\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-tagletpath\", testClasses,\n+                \"-taglet\", \"DivTaglet\",\n+                \"-taglet\", \"SpanTaglet\",\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/C.html\", true, \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p><span>this is phrasing_standalone<\/span><\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p>Before.\n+                    <span>this is phrasing_wrapped<\/span>\n+                    After.<\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <div>this is block_standalone<\/div>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p>Before.<\/p>\n+                    <div>this is block_wrapped<\/div>\n+                    <p>After.<\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdownTaglets.java","additions":226,"deletions":0,"binary":false,"changes":226,"status":"added"}]}