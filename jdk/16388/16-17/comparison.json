{"files":[{"patch":"@@ -295,63 +295,0 @@\n-\n-    \/**\n-     * A functional interface to transform a {@code DocCommentTree}.\n-     *\n-     * <p>An implementation may detect specific patterns within a documentation\n-     * comment and replace them with alternate forms, perhaps involving the\n-     * tree nodes for instances of {@link InlineTagTree} or {@link BlockTagTree}.\n-     *\n-     * <p>Implementations may be located by using the\n-     * {@linkplain java.util.ServiceLoader service loader}.\n-     *\n-     * @apiNote\n-     * The standard implementation of this interface supports an extended form\n-     * of reference links in Markdown comments, such that if the label for a\n-     * reference link is undefined and matches a reference to a program\n-     * element, the link is replaced by an equivalent {@link LinkTree} node.\n-     * The standard implementation is used by {@linkplain jdk.javadoc <em>javadoc<\/em>}\n-     * and related tools.\n-     *\n-     * <p>The standard implementation returns the string {@code \"standard\"}\n-     * from {@link DocCommentTreeTransformer#name()}.\n-     *\n-     * @since 23\n-     *\/\n-    public interface DocCommentTreeTransformer {\n-        \/**\n-         * {@return the name of this transformer}\n-         * @implSpec this implementation returns an empty string\n-         *\/\n-        default String name() { return \"\"; }\n-\n-        \/**\n-         * Transforms a documentation comment tree.\n-         *\n-         * @param trees an instance of the {@link Trees} utility interface.\n-         * @param tree the tree to be transformed\n-         * @return the transformed tree\n-         *\/\n-        DocCommentTree transform(DocTrees trees, DocCommentTree tree);\n-    }\n-\n-    \/**\n-     * {@return the transformer to be used after a documentation comment has been parsed,\n-     * or {@code null} if no transformer is to be used}\n-     *\n-     * @since 23\n-     *\/\n-    public abstract DocCommentTreeTransformer getDocCommentTreeTransformer();\n-\n-    \/**\n-     * Sets the transformer to be used after a documentation comment has been parsed,\n-     * or {@code null} if no transformer is to be used.\n-     *\n-     * @apiNote\n-     * This should normally be called before accessing any {@code DocCommentTree}\n-     * through this class. The effects are undefined if this method is invoked\n-     * after any {@code DocCommentTree} has been accessed.\n-     *\n-     * @param transformer the transformer\n-     *\n-     * @since 23\n-     *\/\n-    public abstract void setDocCommentTreeTransformer(DocCommentTreeTransformer transformer);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTrees.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.ServiceLoader;\n@@ -1122,10 +1123,0 @@\n-    @Override @DefinedBy(Api.COMPILER_TREE)\n-    public DocCommentTreeTransformer getDocCommentTreeTransformer() {\n-        return docCommentTreeTransformer;\n-    }\n-\n-    @Override @DefinedBy(Api.COMPILER_TREE)\n-    public void setDocCommentTreeTransformer(DocTrees.DocCommentTreeTransformer transformer) {\n-        docCommentTreeTransformer = transformer;\n-    }\n-\n@@ -1144,3 +1135,68 @@\n-     * Transforms the given tree using the current\n-     * {@linkplain #setDocCommentTreeTransformer(DocCommentTreeTransformer) transformer}.\n-     * If there is no current transformer, the tree is returned unmodified.\n+     * An interface for transforming a {@code DocCommentTree}.\n+     * It is primarily used as the service-provider interface for an implementation\n+     * that embodies the JDK extensions to CommonMark, such as reference links to\n+     * program elements.\n+     *\/\n+    public interface DocCommentTreeTransformer {\n+        \/**\n+         * The name used by the implementation that embodies the JDK extensions to CommonMark.\n+         *\/\n+        public final String STANDARD = \"standard\";\n+\n+        \/**\n+         * {@return the name of this transformer}\n+         *\/\n+        String name();\n+\n+        \/**\n+         * Transforms a documentation comment tree.\n+         *\n+         * @param trees an instance of the {@link DocTrees} utility interface.\n+         * @param tree the tree to be transformed\n+         * @return the transformed tree\n+         *\/\n+        DocCommentTree transform(DocTrees trees, DocCommentTree tree);\n+    }\n+\n+    \/**\n+     * A class that provides the identity transform on instances of {@code DocCommentTree}.\n+     *\/\n+    public static class IdentityTransformer implements DocCommentTreeTransformer {\n+        @Override\n+        public String name() {\n+            return \"identity\";\n+        }\n+\n+        @Override\n+        public DocCommentTree transform(DocTrees trees, DocCommentTree tree) {\n+            return tree;\n+        }\n+    }\n+\n+    public DocCommentTreeTransformer getDocCommentTreeTransformer() {\n+        return docCommentTreeTransformer;\n+    }\n+\n+    public void setDocCommentTreeTransformer(DocCommentTreeTransformer transformer) {\n+        docCommentTreeTransformer = transformer;\n+    }\n+\n+    \/**\n+     * Initialize {@link #docCommentTreeTransformer} if it is {@code null},\n+     * using a service provider to look up an implementation with the name \"standard\".\n+     * If none is found, an identity transformer is used, with the name \"identity\".\n+     *\/\n+    public void initDocCommentTreeTransformer() {\n+        if (docCommentTreeTransformer == null) {\n+            var sl = ServiceLoader.load(DocCommentTreeTransformer.class);\n+            docCommentTreeTransformer = sl.stream()\n+                    .map(ServiceLoader.Provider::get)\n+                    .filter(t -> t.name().equals(DocCommentTreeTransformer.STANDARD))\n+                    .findFirst()\n+                    .orElseGet(() -> new IdentityTransformer());\n+        }\n+    }\n+\n+    \/**\n+     * Transforms the given tree using the current {@linkplain #getDocCommentTreeTransformer() transformer},\n+     * after ensuring it has been {@linkplain #initDocCommentTreeTransformer() initialized}.\n@@ -1152,1 +1208,2 @@\n-        return docCommentTreeTransformer == null ? tree : docCommentTreeTransformer.transform(this, tree);\n+        initDocCommentTreeTransformer();\n+        return docCommentTreeTransformer.transform(this, tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":71,"deletions":14,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -276,0 +276,1 @@\n+    uses com.sun.tools.javac.api.JavacTrees.DocCommentTreeTransformer;\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-public class MarkdownTransformer implements DocTrees.DocCommentTreeTransformer {\n+public class MarkdownTransformer implements JavacTrees.DocCommentTreeTransformer {\n","filename":"src\/jdk.internal.md\/share\/classes\/jdk\/internal\/markdown\/MarkdownTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    provides com.sun.source.util.DocTrees.DocCommentTreeTransformer\n+    provides com.sun.tools.javac.api.JavacTrees.DocCommentTreeTransformer\n","filename":"src\/jdk.internal.md\/share\/classes\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -327,6 +327,0 @@\n-        if (doclint == null) {\n-            var trees = docEnv.getDocTrees();\n-            if (trees.getDocCommentTreeTransformer()== null) {\n-                trees.setDocCommentTreeTransformer(new MarkdownTransformer());\n-            }\n-        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -139,3 +139,0 @@\n-        if (this.trees.getDocCommentTreeTransformer()== null) {\n-            this.trees.setDocCommentTreeTransformer(new MarkdownTransformer());\n-        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Env.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import com.sun.tools.javac.util.ModuleHelper;\n@@ -564,0 +565,11 @@\n+        \/\/ Allow doclets to access internal API if the appropriate\n+        \/\/ option is given on the command line.\n+        \/\/ A better solution would be to modify the javadoc API to\n+        \/\/ permit an instance of an appropriately configured instance\n+        \/\/ of a doclet to be specified instead of the name of the\n+        \/\/ doclet class and optional doclet path.\n+        \/\/ See https:\/\/bugs.openjdk.org\/browse\/JDK-8263219\n+        if (options.compilerOptions().isSet(\"accessInternalAPI\")) {\n+            ModuleHelper.addExports(ModuleHelper.class.getModule(), doclet.getClass().getModule());\n+        }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/Start.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -55,4 +55,0 @@\n- * @uses com.sun.source.util.DocTrees.DocCommentTreeTransformer\n- *     By default, this module uses the {@linkplain com.sun.source.util.DocTrees.DocCommentTreeTransformer standard}\n- *     tree transformer to handle some Markdown constructs.\n- *\n@@ -63,2 +59,0 @@\n-    requires java.xml;\n-    requires jdk.internal.md;\n@@ -68,0 +62,2 @@\n+\n+    requires jdk.internal.md;\n@@ -83,2 +79,0 @@\n-\n-    uses com.sun.source.util.DocTrees.DocCommentTreeTransformer;\n","filename":"src\/jdk.javadoc\/share\/classes\/module-info.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+import com.sun.tools.javac.api.JavacTrees;\n+\n@@ -65,1 +67,1 @@\n-        var sl = ServiceLoader.load(DocTrees.DocCommentTreeTransformer.class);\n+        var sl = ServiceLoader.load(JavacTrees.DocCommentTreeTransformer.class);\n@@ -92,2 +94,2 @@\n-    private Optional<DocTrees.DocCommentTreeTransformer> getTransformer(String name) {\n-        var sl = ServiceLoader.load(DocTrees.DocCommentTreeTransformer.class);\n+    private Optional<JavacTrees.DocCommentTreeTransformer> getTransformer(String name) {\n+        var sl = ServiceLoader.load(JavacTrees.DocCommentTreeTransformer.class);\n@@ -100,1 +102,1 @@\n-    public static class MyTransformer implements DocTrees.DocCommentTreeTransformer {\n+    public static class MyTransformer implements JavacTrees.DocCommentTreeTransformer {\n@@ -137,1 +139,1 @@\n-            docEnv.getDocTrees().setDocCommentTreeTransformer(new MyTransformer());\n+            ((JavacTrees) docEnv.getDocTrees()).setDocCommentTreeTransformer(new MyTransformer());\n@@ -159,0 +161,1 @@\n+                \"-XDaccessInternalAPI\", \/\/ required to access JavacTrees\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/testTransformer\/TestTransformer.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+import com.sun.tools.javac.api.JavacTrees;\n@@ -143,1 +144,4 @@\n-        final DocTrees trees = DocTrees.instance(t);\n+        final JavacTrees trees = (JavacTrees) DocTrees.instance(t);\n+        \/\/ disable default use of the \"standard\" transformer, so that we can examine\n+        \/\/ the trees as created by DocCommentParser.\n+        trees.setDocCommentTreeTransformer(new JavacTrees.IdentityTransformer());\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}