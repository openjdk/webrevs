{"files":[{"patch":"@@ -835,0 +835,3 @@\n+        \/\/ Returns a string in which any periods that should not be considered\n+        \/\/ as ending a sentence are replaced by dashes.  This specifically\n+        \/\/ includes periods in code spans and links.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -970,0 +970,2 @@\n+    \/\/\/ Test the ability to include array elements in method signatures for\n+    \/\/\/ automatic links to program elements.\n@@ -1020,0 +1022,105 @@\n+    }\n+\n+    \/\/ Test the ability to put links in the first sentence of a description.\n+    \/\/ Note that we user-defined reference links cannot be used in the first\n+    \/\/ sentence, and so in that case we verify the behavior is \"as expected\".\n+    @Test\n+    public void testFirstSentenceLinks(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+\n+        \/\/ Apart from the (control) case, the other cases exercise\n+        \/\/ various kinds of links in the first sentence of a description.\n+        \/\/ Note the last case is an explicit test of a link that is\n+        \/\/ _not_ currently supported, since the link reference definition\n+        \/\/ is not part of the first sentence.\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    import q.MyObject;\n+                    public class C {\n+                        \/\/\/ First sentence.\n+                        \/\/\/ Control: [MyObject]\n+                        public void m1() { }\n+                                            \n+                        \/\/\/ Simple autoref in first sentence [MyObject].\n+                        \/\/\/ More.\n+                        public void m2() { }\n+                                            \n+                        \/\/\/ Qualified autoref in first sentence [q.MyObject].\n+                        \/\/\/ More.\n+                        public void m3() { }\n+                                            \n+                        \/\/\/ Standard link with periods [example.com](http:\/\/example.com).\n+                        \/\/\/ More.\n+                        public void m4() { }\n+                                            \n+                        \/\/\/ Manual ref link [foo].\n+                        \/\/\/ More.\n+                        \/\/\/\n+                        \/\/\/ [foo]: http:example.com\n+                        public void m5() { }\n+                    }\"\"\",\n+                \/\/ use a simple class in a different package, to avoid platform links to system classes\n+                \"\"\"\n+                    package q;\n+                    public class MyObject { }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\", \"q\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ use checkOrder and the delimiter comments to ensure that\n+        \/\/ we check the strings in the method summary table, and not\n+        \/\/ subsequently in the method details section.\n+        checkOrder(\"p\/C.html\",\n+                \"<!-- ========== METHOD SUMMARY =========== -->\",\n+                \"\"\"\n+                    <div class=\"block\">Simple autoref in first sentence <a href=\"..\/q\/MyObject.html\" \\\n+                    title=\"class in q\"><code>MyObject<\/code><\/a>.<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">Qualified autoref in first sentence <a href=\"..\/q\/MyObject.html\" \\\n+                    title=\"class in q\"><code>MyObject<\/code><\/a>.<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">Standard link with periods \\\n+                    <a href=\"http:\/\/example.com\">example.com<\/a>.<\/div>\"\"\",\n+                \/\/ The following is a test of the regrettably expected behavior,\n+                \/\/ because the link reference definition is not carried into\n+                \/\/ the first sentence.\n+                \"\"\"\n+                    <div class=\"block\">Manual ref link [foo].<\/div>\"\"\",\n+                \"<!-- ============ METHOD DETAIL ========== -->\"\n+                );\n+    }\n+\n+    \/\/ Test that periods within certain constructs do not prematurely terminate\n+    \/\/ the first sentence.\n+    @Test\n+    public void testFirstSentencePeriods(Path base) throws Exception {\n+        testFirstSentencePeriods(base.resolve(\"no-bi\"), false);\n+        testFirstSentencePeriods(base.resolve(\"bi\"), true);\n+    }\n+\n+    void testFirstSentencePeriods(Path base, boolean useBreakIterator) throws Exception {\n+        Path src = base.resolve(\"src\");\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                        package p;\n+                        public class C {\n+                            \/\/\/ Code span `1.0` end.\n+                            \/\/\/ More.\n+                            public void m1() { }\n+                            \/\/\/ Complex code span ``` `1.0` ``` end.\n+                            \/\/\/ More.\n+                            public void m2() { }\n+                            \/\/\/ Period space `1.  2.  3.` end.\n+                            \/\/\/ More.\n+                            public void m3() { }\n+                            \/\/\/ Link [example.com](http:\/\/example.com) end.\n+                            \/\/\/ More.\n+                            public void m4() { }\n+                        }\n+                        \"\"\");\n+\n@@ -1021,0 +1128,23 @@\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                (useBreakIterator ? \"-breakiterator\" : \"-XDdummy\"),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        \/\/ use checkOrder and the delimiter comments to ensure that\n+        \/\/ we check the strings in the method summary table, and not\n+        \/\/ subsequently in the method details section.\n+        checkOrder(\"p\/C.html\",\n+                \"<!-- ========== METHOD SUMMARY =========== -->\",\n+                \"\"\"\n+                    <div class=\"block\">Code span <code>1.0<\/code> end.<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">Complex code span <code>`1.0`<\/code> end.<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">Period space <code>1.  2.  3.<\/code> end.<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\">Link <a href=\"http:\/\/example.com\">example.com<\/a> end.<\/div>\"\"\",\n+                \"<!-- ============ METHOD DETAIL ========== -->\"\n+        );\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdown.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"modified"}]}