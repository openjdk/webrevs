{"files":[{"patch":"@@ -33,0 +33,2 @@\n+import java.util.stream.Collectors;\n+\n@@ -160,1 +162,4 @@\n-            String tagText = contents.toString().trim();\n+            String tagText = contents.stream()\n+                    .map(Object::toString)\n+                    .collect(Collectors.joining())\n+                    .trim();\n","filename":"make\/jdk\/src\/classes\/build\/tools\/taglet\/JSpec.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import java.util.stream.Collectors;\n+\n@@ -108,2 +110,5 @@\n-            UnknownBlockTagTree blockTag = (UnknownBlockTagTree)tag;\n-            String tagText = blockTag.getContent().toString().trim();\n+            UnknownBlockTagTree blockTag = (UnknownBlockTagTree) tag;\n+            String tagText = blockTag.getContent().stream()\n+                    .map(Object::toString)\n+                    .collect(Collectors.joining())\n+                    .trim();\n","filename":"make\/jdk\/src\/classes\/build\/tools\/taglet\/ToolGuide.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -48,0 +49,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.RawHtml;\n@@ -50,0 +52,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.TextBuilder;\n@@ -125,1 +128,1 @@\n-                textOf(specTreeLabel).replaceAll(\"\\\\s+\", \" \"), label);\n+                textOf(label).replaceAll(\"\\\\s+\", \" \"), label);\n@@ -128,5 +131,26 @@\n-    private String textOf(List<? extends DocTree> trees) {\n-        return trees.stream()\n-                .filter(dt -> dt instanceof TextTree)\n-                .map(dt -> ((TextTree) dt).getBody().trim())\n-                .collect(Collectors.joining(\" \"));\n+    \/\/ this is here, for now, but might be a useful addition elsewhere,\n+    \/\/ perhaps as a method on Content\n+    private String textOf(Content c) {\n+        return appendText(new StringBuilder(), c).toString();\n+    }\n+\n+    private StringBuilder appendText(StringBuilder sb, Content c) {\n+        if (c instanceof ContentBuilder cb) {\n+            appendText(sb, cb.getContents());\n+        } else if (c instanceof HtmlTree ht) {\n+            appendText(sb, ht.getContents());\n+        } else if (c instanceof RawHtml rh) {\n+            sb.append(rh.toString().replaceAll(\"<[^>]*>\", \"\"));\n+        } else if (c instanceof TextBuilder tb) {\n+            sb.append(tb.toString());\n+        } else if (c instanceof Text t) {\n+            sb.append(t.toString());\n+        } else if (c instanceof Entity e) {\n+            sb.append(e.toString());\n+        }\n+        return sb;\n+    }\n+\n+    private StringBuilder appendText(StringBuilder sb, List<? extends Content> contents) {\n+        contents.forEach(c -> appendText(sb, c));\n+        return sb;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/SpecTaglet.java","additions":30,"deletions":6,"binary":false,"changes":36,"status":"modified"}]}