{"files":[{"patch":"@@ -44,1 +44,0 @@\n-\n@@ -46,0 +45,1 @@\n+\n","filename":"src\/jdk.internal.md\/share\/classes\/jdk\/internal\/markdown\/MarkdownTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,3 @@\n+    exports jdk.internal.org.commonmark.renderer to\n+            jdk.javadoc,\n+            jdk.jshell;\n","filename":"src\/jdk.internal.md\/share\/classes\/module-info.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import javax.lang.model.element.ElementKind;\n@@ -85,0 +86,3 @@\n+import jdk.internal.org.commonmark.node.AbstractVisitor;\n+import jdk.internal.org.commonmark.node.Code;\n+import jdk.internal.org.commonmark.node.Heading;\n@@ -87,0 +91,3 @@\n+import jdk.internal.org.commonmark.renderer.NodeRenderer;\n+import jdk.internal.org.commonmark.renderer.html.HtmlNodeRendererContext;\n+import jdk.internal.org.commonmark.renderer.html.HtmlNodeRendererFactory;\n@@ -88,0 +95,2 @@\n+import jdk.internal.org.commonmark.renderer.html.HtmlWriter;\n+\n@@ -1344,1 +1353,1 @@\n-        var markdownHandler = useMarkdown ? new MarkdownHandler() : null;\n+        var markdownHandler = useMarkdown ? new MarkdownHandler(element) : null;\n@@ -1370,1 +1379,0 @@\n-\n@@ -1389,2 +1397,2 @@\n-        StringBuilder markdownInput = new StringBuilder() ;\n-        ArrayList<Content> fffcObjects = new ArrayList<>();\n+        private final StringBuilder markdownInput = new StringBuilder() ;\n+        private final ArrayList<Content> fffcObjects = new ArrayList<>();\n@@ -1392,3 +1400,4 @@\n-        List<Extension> extns = List.of(\n-                TablesExtension.create()\n-        );\n+        private final Extension tablesExtn = TablesExtension.create();\n+        private final HtmlNodeRendererFactory headingRendererFactory = HeadingNodeRenderer::new;\n+\n+        private final Element element;\n@@ -1396,2 +1405,2 @@\n-        Parser parser = Parser.builder()\n-                .extensions(extns)\n+        private final Parser parser = Parser.builder()\n+                .extensions(List.of(tablesExtn))\n@@ -1399,2 +1408,3 @@\n-        HtmlRenderer renderer = HtmlRenderer.builder()\n-                .extensions(extns)\n+        private final HtmlRenderer renderer = HtmlRenderer.builder()\n+                .nodeRendererFactory(headingRendererFactory)\n+                .extensions(List.of(tablesExtn\/*, headingIdsExtn*\/))\n@@ -1403,0 +1413,4 @@\n+        MarkdownHandler(Element element) {\n+            this.element = element;\n+        }\n+\n@@ -1467,0 +1481,74 @@\n+\n+        \/**\n+         * A renderer for Markdown {@code Heading} nodes, which represent\n+         * both ATX headings (using {@code ####}) and Setext (using underlines).\n+         * The mapping to HTML takes into account the context within the overall\n+         * generated page, and automatically includes an id, to allow the heading\n+         * to be referenced from elsewhere.\n+         *\/\n+        private class HeadingNodeRenderer extends AbstractVisitor implements NodeRenderer {\n+            private final HtmlWriter htmlWriter;\n+            private final HtmlNodeRendererContext context;\n+\n+            HeadingNodeRenderer(HtmlNodeRendererContext context) {\n+                this.htmlWriter = context.getWriter();\n+                this.context = context;\n+            }\n+\n+            @Override\n+            public Set<Class<? extends Node>> getNodeTypes() {\n+                return Set.of(Heading.class);\n+            }\n+\n+            @Override\n+            public void render(Node node) {\n+                node.accept(this);\n+            }\n+\n+            @Override\n+            public void visit(Heading heading) {\n+                var htag = getTag(heading);\n+                var id = getId(heading);\n+\n+                htmlWriter.line();\n+                htmlWriter.tag(htag, Map.of(\"id\", id.name()));\n+                visitChildren(heading);\n+                htmlWriter.tag('\/' + htag);\n+                htmlWriter.line();\n+            }\n+\n+            @Override\n+            protected void visitChildren(Node parent) {\n+                Node node = parent.getFirstChild();\n+                while (node != null) {\n+                    Node next = node.getNext();\n+                    context.render(node);\n+                    node = next;\n+                }\n+            }\n+\n+            private String getTag(Heading heading) {\n+                \/\/ offset the heading level to allow for its position in the overall page\n+                var eKind = element.getKind();\n+                var offset = eKind.isField() || eKind.isExecutable() ? 3 \/\/ members\n+                        : eKind != ElementKind.OTHER ? 1   \/\/ module, package, class, interface\n+                        : 0; \/\/ doc file\n+                return \"h\" + Math.min(heading.getLevel() + offset, 6);\n+            }\n+\n+            private HtmlId getId(Heading heading) {\n+                var list = new ArrayList<String>();\n+                heading.accept(new AbstractVisitor() {\n+                    @Override\n+                    public void visit(jdk.internal.org.commonmark.node.Text text) {\n+                        list.add(text.getLiteral());\n+                    }\n+\n+                    @Override\n+                    public void visit(Code code) {\n+                        list.add(code.getLiteral());\n+                    }\n+                });\n+                return htmlIds.forHeading(String.join(\" \", list), headingIds);\n+            }\n+        }\n@@ -1709,0 +1797,2 @@\n+            } else if (docTree instanceof RawTextTree raw) {\n+                sb.append(raw.getContent().replaceAll(\"[^A-Za-z0-9]+\", \" \"));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":101,"deletions":11,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -544,0 +544,5 @@\n+                    \"\"\",\n+                \"\"\"\n+                    <main role=\"main\"><h1 id=\"this-is-a-markdown-heading-heading1\">This is a <em>Markdown<\/em> heading<\/h1>\n+                    <p>Lorem ipsum<\/p>\n+                    <\/main>\n@@ -573,0 +578,154 @@\n+\n+    @Test\n+    public void testHeading_ATX(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    \/\/\/ First sentence.\n+                    \/\/\/\n+                    \/\/\/ # ATX-style heading for package\n+                    \/\/\/\n+                    \/\/\/ Lorem ipsum.\n+                    \/\/\/\n+                    \/\/\/ ## ATX-style subheading for package\n+                    \/\/\/\n+                    \/\/\/ Lorem ipsum.\n+                    package p;\n+                    \"\"\",\n+                \"\"\"\n+                    package p;\n+                    \/\/\/ First sentence.\n+                    \/\/\/\n+                    \/\/\/ # ATX-style heading for class\n+                    \/\/\/\n+                    \/\/\/ Lorum ipsum.\n+                    \/\/\/\n+                    \/\/\/ ## ATX-style subheading for class\n+                    \/\/\/\n+                    \/\/\/ Lorem ipsum.\n+                    public class C {\n+                        \/\/\/ Constructor.\n+                        \/\/\/\n+                        \/\/\/ # ATX-style heading for executable\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        \/\/\/\n+                        \/\/\/ ## ATX-style subheading for executable\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public C() { }\n+                    }\n+                    \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/package-summary.html\", true,\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <h2 id=\"atx-style-heading-for-package-heading\">ATX-style heading for package<\/h2>\n+                    <p>Lorem ipsum.<\/p>\n+                    <h3 id=\"atx-style-subheading-for-package-heading\">ATX-style subheading for package<\/h3>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <h2 id=\"atx-style-heading-for-class-heading\">ATX-style heading for class<\/h2>\n+                    <p>Lorum ipsum.<\/p>\n+                    <h3 id=\"atx-style-subheading-for-class-heading\">ATX-style subheading for class<\/h3>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\n+                    \"\"\", \"\"\"\n+                    <div class=\"block\"><p>Constructor.<\/p>\n+                    <h4 id=\"atx-style-heading-for-executable-heading\">ATX-style heading for executable<\/h4>\n+                    <p>Lorem ipsum.<\/p>\n+                    <h5 id=\"atx-style-subheading-for-executable-heading\">ATX-style subheading for executable<\/h5>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\n+                    \"\"\");\n+\n+    }\n+\n+    @Test\n+    public void testHeading_Setext(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    \/\/\/ First sentence.\n+                    \/\/\/\n+                    \/\/\/ Setext-style heading for package\n+                    \/\/\/ ================================\n+                    \/\/\/\n+                    \/\/\/ Lorem ipsum.\n+                    \/\/\/\n+                    \/\/\/ Setext-style subheading for package\n+                    \/\/\/ -----------------------------------\n+                    \/\/\/\n+                    \/\/\/ Lorem ipsum.\n+                    package p;\n+                    \"\"\",\n+                \"\"\"\n+                    package p;\n+                    \/\/\/ First sentence.\n+                    \/\/\/\n+                    \/\/\/ Setext-style heading for class\n+                    \/\/\/ ==============================\n+                    \/\/\/\n+                    \/\/\/ Lorum ipsum.\n+                    \/\/\/\n+                    \/\/\/ Setext-style subheading for class\n+                    \/\/\/ ---------------------------------\n+                    \/\/\/\n+                    \/\/\/ Lorem ipsum.\n+                    public class C {\n+                        \/\/\/ Constructor.\n+                        \/\/\/\n+                        \/\/\/ Setext-style heading for executable\n+                        \/\/\/ ===================================\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        \/\/\/\n+                        \/\/\/ Setext-style subheading for executable\n+                        \/\/\/ --------------------------------------\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public C() { }\n+                    }\n+                    \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+\n+        checkOutput(\"p\/package-summary.html\", true,\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <h2 id=\"setext-style-heading-for-package-heading\">Setext-style heading for package<\/h2>\n+                    <p>Lorem ipsum.<\/p>\n+                    <h3 id=\"setext-style-subheading-for-package-heading\">Setext-style subheading for package<\/h3>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <h2 id=\"setext-style-heading-for-class-heading\">Setext-style heading for class<\/h2>\n+                    <p>Lorum ipsum.<\/p>\n+                    <h3 id=\"setext-style-subheading-for-class-heading\">Setext-style subheading for class<\/h3>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\n+                    \"\"\", \"\"\"\n+                    <div class=\"block\"><p>Constructor.<\/p>\n+                    <h4 id=\"setext-style-heading-for-executable-heading\">Setext-style heading for executable<\/h4>\n+                    <p>Lorem ipsum.<\/p>\n+                    <h5 id=\"setext-style-subheading-for-executable-heading\">Setext-style subheading for executable<\/h5>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\n+                    \"\"\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdown.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"modified"}]}