{"files":[{"patch":"@@ -545,0 +545,7 @@\n+                    \/\/ In CommonMark, square brackets characters need to be escaped within a link label.\n+                    \/\/ See https:\/\/spec.commonmark.org\/0.30\/#link-label\n+                    \/\/   Unescaped square bracket characters are not allowed inside the opening\n+                    \/\/   and closing square brackets of link labels.\n+                    \/\/ The escape characters are still present here in the label,\n+                    \/\/ so we remove them before creating the autoref URL.\n+                    \/\/ Note that the characters always appear together as a pair in API references.\n","filename":"src\/jdk.internal.md\/share\/classes\/jdk\/internal\/markdown\/MarkdownTransformer.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -969,0 +969,53 @@\n+\n+    @Test\n+    public void testReferenceWithArrays(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+\n+        \/\/ in the following,\n+        \/\/\n+        \/\/ * Link 0 is a simple control for a shortcut reference link (without any arrays)\n+        \/\/ * Link 1a and Link 2a are negative controls, in that they are _not_ valid links\n+        \/\/   because of the unescaped [] pair\n+        \/\/ * Link 1b and 2b are the positive tests, showing that the square brackets\n+        \/\/   need to be escaped in the source code, and that they are not escaped in\n+        \/\/   the generated HTML\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    \/\/\/ First sentence.\n+                    \/\/\/ * Link 0 to [util.Arrays]\n+                    \/\/\/ * Link 1a to [Arrays-equals][util.Arrays#equals(Object[],Object[])]\n+                    \/\/\/ * Link 1b to [Arrays-equals][util.Arrays#equals(Object\\\\[\\\\],Object\\\\[\\\\])]\n+                    \/\/\/ * Link 2a to [util.Arrays#equals(Object[],Object[])]\n+                    \/\/\/ * Link 2b to [util.Arrays#equals(Object\\\\[\\\\],Object\\\\[\\\\])]\n+                    public class C { }\"\"\",\n+                \/\/ simulate java.util.Arrays.equals, to avoid links to platform references\n+                \"\"\"\n+                    package util;\n+                    public class Arrays {\n+                        public boolean equals(Object[] a, Object[] a2);\n+                    }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\", \"util\");\n+\n+        checkExit(Exit.OK);\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    Link 0 to <a href=\"..\/util\/Arrays.html\" title=\"class in util\"><code>Arrays<\/code><\/a>\"\"\",\n+                \"\"\"\n+                    Link 1a to [Arrays-equals][util.Arrays#equals(Object[],Object[])]\"\"\",\n+                \"\"\"\n+                    Link 1b to <a href=\"..\/util\/Arrays.html#equals(java.lang.Object%5B%5D,\\\n+                    java.lang.Object%5B%5D)\">Arrays-equals<\/a>\"\"\",\n+                \"\"\"\n+                    Link 2a to [util.Arrays#equals(Object[],Object[])]\"\"\",\n+                \"\"\"\n+                    Link 2b to <a href=\"..\/util\/Arrays.html#equals(java.lang.Object%5B%5D,\\\n+                    java.lang.Object%5B%5D)\"><code>Arrays.equals(Object[],Object[])<\/code><\/a>\"\"\"\n+                );\n+\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdown.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"modified"}]}