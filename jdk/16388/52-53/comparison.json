{"files":[{"patch":"@@ -384,0 +384,2 @@\n+    DISABLE_LINE_DOC_COMMENTS(\"--disable-line-doc-comments\", \"opt.lineDocComments\", EXTENDED, BASIC),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Option.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,0 +77,5 @@\n+    \/**\n+     * Whether \"\/\/\/\" comments are recognized as documentation comments.\n+     *\/\n+    protected final boolean enableLineDocComments;\n+\n@@ -184,0 +189,1 @@\n+        this.enableLineDocComments = fac.enableLineDocComments;\n@@ -1059,1 +1065,1 @@\n-                        if (accept('\/')) { \/\/ JavaDoc line comment\n+                        if (enableLineDocComments && accept('\/')) { \/\/ JavaDoc line comment\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavaTokenizer.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import com.sun.tools.javac.main.Option;\n@@ -36,0 +37,1 @@\n+import com.sun.tools.javac.util.Options;\n@@ -64,0 +66,1 @@\n+    final boolean enableLineDocComments;\n@@ -75,0 +78,2 @@\n+        var options = Options.instance(context);\n+        this.enableLineDocComments = !options.isSet(Option.DISABLE_LINE_DOC_COMMENTS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/ScannerFactory.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -381,0 +381,2 @@\n+javac.opt.lineDocComments=\\\n+    Disable support for documentation comments with lines beginning '\/\/\/'\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -566,0 +566,3 @@\n+\\f[V]--disable-line-doc-comments\\f[R]\n+Disables support for documentation comments with lines beginning \/\/\/.\n+.TP\n","filename":"src\/jdk.compiler\/share\/man\/javac.1","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -405,0 +405,7 @@\n+            new ToolOption(\"--disable-line-doc-comments\", EXTENDED) {\n+                @Override\n+                public void process() throws InvalidValueException {\n+                    processCompilerOption(Option.DISABLE_LINE_DOC_COMMENTS, primaryName);\n+                }\n+            },\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ToolOptions.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -273,0 +273,4 @@\n+main.opt.disable.line.doc.comments.desc=\\\n+    Disable support for documentation comments with lines\\n\\\n+    beginning '\/\/\/'\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/resources\/javadoc.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-.TH \"JAVADOC\" \"1\" \"2024\" \"JDK 23-internal\" \"JDK Commands\"\n+.TH \"JAVADOC\" \"1\" \"2024\" \"JDK 23-ea\" \"JDK Commands\"\n@@ -141,0 +141,2 @@\n+\\f[V]--disable-line-doc-comments\\f[R]\n+.IP \\[bu] 2\n","filename":"src\/jdk.javadoc\/share\/man\/javadoc.1","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8298405\n+ * @summary  Markdown support in the standard doclet\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestLineCommentOption\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.stream.StreamSupport;\n+\n+import com.sun.source.doctree.DocCommentTree;\n+import com.sun.source.doctree.DocTree;\n+import com.sun.source.doctree.RawTextTree;\n+import com.sun.source.doctree.TextTree;\n+import com.sun.source.util.DocTreeFactory;\n+import com.sun.source.util.DocTrees;\n+\n+import com.sun.tools.javac.api.JavacTrees;\n+\n+import javadoc.tester.JavadocTester;\n+import jdk.javadoc.doclet.DocletEnvironment;\n+import jdk.javadoc.doclet.StandardDoclet;\n+import toolbox.ToolBox;\n+\n+public class TestLineCommentOption extends JavadocTester {\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestLineCommentOption();\n+        tester.runTests();\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+\n+    \/\/ This is a somewhat worthless test case, given all the test cases for\n+    \/\/ Markdown content in line comments.\n+    @Test\n+    public void testNoOption(Path base) throws Exception {\n+        \/\/ for now, use a dummy option\n+        \/\/ in the future, this could be a test for -Xlint:dangling-comment\n+        test(base, \"-XDdummy\", \"Line comment\");\n+        \/\/ in the future, check for diagnostic output about a dangling comment\n+    }\n+\n+    @Test\n+    public void testOption(Path base) throws Exception {\n+        test(base, \"--disable-line-doc-comments\", \"Traditional comment\");\n+    }\n+\n+    void test(Path base, String option, String expect) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+            package p;\n+            \/**\n+             * Traditional comment.\n+             *\/\n+            \/\/\/ Line comment\n+            public class C {\n+                private C() { }\n+            }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"--source-path\", src.toString(),\n+                option,\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                expect);\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/testLineCommentOption\/TestLineCommentOption.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}