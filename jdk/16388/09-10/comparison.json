{"files":[{"patch":"@@ -303,1 +303,1 @@\n-    RawTextTree newRawTextTree(DocTree.Kind kind, String code) throws IllegalArgumentException;\n+    RawTextTree newRawTextTree(DocTree.Kind kind, String code);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-        \/** The style of comments whose lines are prefixed by{@code \/\/\/}. *\/\n+        \/** The style of comments whose lines are prefixed by {@code \/\/\/}. *\/\n@@ -104,1 +104,1 @@\n-     * {@return the style of the documentation comment associated with a tree node.}\n+     * {@return the style of the documentation comment associated with a tree node}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTrees.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,0 +81,11 @@\n+    \/**\n+     * An indication of the part of documentation comment or file being read.\n+     * A documentation comment and a Markdown file just have a {@code BODY}.\n+     * An HTML file has a {@code PREAMBLE}, {@code BODY} and {@code POSTAMBLE}.\n+     * While parsing a {@code BODY}, text within {@code {@tag ... }} may be\n+     * read as {@code INLINE}.\n+     * One of the primary characteristics of each \"phase\" is the termination\n+     * condition, indicating when the current phase is complete, and either\n+     * the previous one resumed (in the case of {@code INLINE}) or the\n+     * next phase started.\n+     *\/\n@@ -178,1 +189,1 @@\n-        int pos = textKind == DocTree.Kind.MARKDOWN  ? 0\n+        int pos = textKind == DocTree.Kind.MARKDOWN ? 0\n@@ -223,1 +234,8 @@\n-        while (ch == ' ' && bp < buflen) {\n+        \/\/ The whitespace after a tag name is typically problematic:\n+        \/\/ should it be included in the content or not?\n+        \/\/ The problem is made worse by Markdown, in which leading\n+        \/\/ whitespace in Markdown content may be significant.\n+        \/\/ While generally in traditional comments, whitespace\n+        \/\/ after a tag name is skipped, to allow for Markdown we just\n+        \/\/ skip horizontal whitespace.\n+        while (isHorizontalWhitespace(ch) && bp < buflen) {\n@@ -241,1 +259,1 @@\n-     * <li>{@code BODY}: the beginning of a block tag, or when readung from\n+     * <li>{@code BODY}: the beginning of a block tag, or when reading from\n@@ -243,1 +261,1 @@\n-     *       as determined by {@link #isEndBody()}\n+     *      as determined by {@link #isEndBody()}\n@@ -247,3 +265,0 @@\n-     *\n-     *\n-     *\n@@ -268,4 +283,0 @@\n-\/\/                        \/\/ FIXME?\n-\/\/                        if (textStart == -1) {\n-\/\/                            textStart = bp;\n-\/\/                        }\n@@ -1000,1 +1011,0 @@\n-     *  or\n@@ -1165,1 +1175,0 @@\n-\n@@ -1336,1 +1345,1 @@\n-                            if (lineKind == LineKind.CODE_FENCE && ch == term && count(ch) == count) {\n+                            if (lineKind == LineKind.CODE_FENCE && ch == term && count(ch) >= count) {\n@@ -1370,0 +1379,20 @@\n+    \/**\n+     * The kinds of line, used when reading a Markdown documentation comment.\n+     * The values are loosely ordered by a combination of the specificity of\n+     * the associated pattern, and the likelihood of use in a doc comment.\n+     *\n+     * Note that some of the patterns overlap, such as SETEXT_UNDERLINE and\n+     * THEMATIC_BREAK. The CommonMark spec resolves the ambiguities with\n+     * priority rules, such as the following:\n+     *\n+     * * If a line of dashes that meets the above conditions for being a\n+     *   thematic break could also be interpreted as the underline of a\n+     *   setext heading, the interpretation as a setext heading takes precedence.\n+     *\n+     * * When both a thematic break and a list item are possible interpretations\n+     *   of a line, the thematic break takes precedence.\n+     *\n+     * Here in this context, the primary purpose of these kinds is to help\n+     * determine when a block boundary terminates literal text, such as a\n+     * code span, and so the exact nature of the line kind does not matter.\n+     *\/\n@@ -1374,1 +1403,1 @@\n-         * ATX header: starts with 1 to 6 # characters, followed by space or end of line.\n+         * ATX header: starts with 1 to 6 # characters, followed by space or tab or end of line.\n@@ -1377,1 +1406,1 @@\n-        ATX_HEADER(Pattern.compile(\"#{1,6}( .*|$)\")),\n+        ATX_HEADER(Pattern.compile(\"#{1,6}([ \\t].*|$)\")),\n@@ -1379,2 +1408,3 @@\n-        \/** Setext header: underline is sequence of = or - followed by optional spaces and tabs.\n-         *  @see <a href=\"https:\/\/spec.commonmark.org\/0.30\/#setext-headings\">Setext Headings<\/a>\n+        \/**\n+         * Setext header: underline is sequence of = or - followed by optional spaces and tabs.\n+         * @see <a href=\"https:\/\/spec.commonmark.org\/0.30\/#setext-headings\">Setext Headings<\/a>\n@@ -1382,1 +1412,1 @@\n-        SETEXT_UNDERLINE(Pattern.compile(\"[=-]+[ \\t]*\")),\n+        SETEXT_UNDERLINE(Pattern.compile(\"(=+|-+)[ \\t]*\")),\n@@ -1385,1 +1415,1 @@\n-         * Thematic break: a line of + - _ interspersed with optional spaces and tabs\n+         * Thematic break: a line of * - _ interspersed with optional spaces and tabs\n@@ -1388,1 +1418,1 @@\n-        THEMATIC_BREAK(Pattern.compile(\"((\\\\+[ \\t]*+){3,})|((-[ \\t]*+){3,})|((_[ \\t]*+){3,})\")),\n+        THEMATIC_BREAK(Pattern.compile(\"((\\\\*[ \\t]*+){3,})|((-[ \\t]*+){3,})|((_[ \\t]*+){3,})\")),\n@@ -1407,0 +1437,2 @@\n+         *\n+         * This entry must come last, since it matches \"none of the above\".\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":53,"deletions":21,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -1065,1 +1065,1 @@\n-                        if (accept('\/')) { \/\/ Markdown comment\n+                        if (accept('\/')) { \/\/ JavaDoc line comment\n@@ -1437,1 +1437,1 @@\n-        CommentStyle cs;\n+        final CommentStyle cs;\n@@ -1530,1 +1530,1 @@\n-         * Trim the first part of the JavaDoc comment.\n+         * Trim the first part of the JavaDoc block comment.\n@@ -1553,1 +1553,1 @@\n-         * Determine how much indent to remove from markdown comment.\n+         * Determine how much indent to remove from a JavaDoc line comment.\n@@ -1557,1 +1557,1 @@\n-        int getMarkdownIndent() {\n+        int getJavadocLineCommentIndent() {\n@@ -1577,1 +1577,1 @@\n-         * Trim the first part of the Markdown comment.\n+         * Trim the first part of a JavaDoc line comment.\n@@ -1584,2 +1584,1 @@\n-        UnicodeReader trimMarkdownComment(UnicodeReader line, int indent) {\n-            int pos = line.position();\n+        UnicodeReader trimJavadocLineComment(UnicodeReader line, int indent) {\n@@ -1612,1 +1611,1 @@\n-                boolean isMarkdown = false;\n+                CommentStyle style;\n@@ -1617,0 +1616,1 @@\n+                    style = CommentStyle.JAVADOC_BLOCK;\n@@ -1628,1 +1628,1 @@\n-                    isMarkdown = true;\n+                    style = CommentStyle.JAVADOC_LINE;\n@@ -1630,1 +1630,1 @@\n-                    indent = getMarkdownIndent();\n+                    indent = getJavadocLineCommentIndent();\n@@ -1637,1 +1637,3 @@\n-                    line = isMarkdown ? trimMarkdownComment(line, indent) : trimJavadocComment(line);\n+                    line = (style == CommentStyle.JAVADOC_LINE)\n+                            ? trimJavadocLineComment(line, indent)\n+                            : trimJavadocComment(line);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavaTokenizer.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import com.sun.source.util.DocTrees;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/ParserFactory.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import com.sun.source.util.DocTreeScanner;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocPretty.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -789,2 +789,5 @@\n-        \/\/ end of paragraph is newline, followed by a blank line or the beginning of the next block\n-        private static final Pattern endPara = Pattern.compile(\"\\n(([ \\t]*\\n)|( {0,3}[-+*#=]))\");\n+        \/\/ End of paragraph is newline, followed by a blank line or the beginning of the next block.\n+        \/\/ - + * are list markers\n+        \/\/ # = - are for headings\n+        \/\/ - _ * are for thematic breaks\n+        private static final Pattern endPara = Pattern.compile(\"\\n(([ \\t]*\\n)|( {0,3}[-+*#=_]))\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-                        \/\/ handle the (unlikely) case of FFFC characters existing in the code\n+                        \/\/ handle the (unlikely) case of any U+FFFC characters existing in the code\n@@ -225,2 +225,0 @@\n-                            sourceBuilder.append(code, start, pos);\n-                            sourceBuilder.append(PLACEHOLDER);\n@@ -230,1 +228,1 @@\n-                        sourceBuilder.append(code.substring(start));\n+                        sourceBuilder.append(code);\n@@ -559,1 +557,1 @@\n-                var ref = refParser.parse(s, ReferenceParser.Mode.MEMBER_OPTIONAL);\n+                refParser.parse(s, ReferenceParser.Mode.MEMBER_OPTIONAL);\n@@ -750,1 +748,1 @@\n-         * Visits a {@code Link} node.\n+         * Visits a CommonMark {@code Link} node.\n@@ -753,1 +751,1 @@\n-         * convert it to {@code {@link ...}} or {@linkplain ...}} node.\n+         * convert it to {@code {@link ...}} or {@code {@linkplain ...}} DocTree node.\n@@ -755,1 +753,1 @@\n-         * the link is the same as the reference found after the {@code code:}};\n+         * the link is the same as the reference found after the {@code code:};\n@@ -778,1 +776,1 @@\n-                    \/\/ determine whether to use {@link... } or {@linkplain ...}\n+                    \/\/ determine whether to use {@link ... } or {@linkplain ...}\n@@ -840,1 +838,1 @@\n-         * Process a node and any children.\n+         * Processes a node and any children.\n@@ -882,1 +880,1 @@\n-            var firstSpan = spans.get(0);\n+            var firstSpan = spans.getFirst();\n@@ -894,1 +892,1 @@\n-            var lastSpan = spans.get(spans.size() - 1);\n+            var lastSpan = spans.getLast();\n@@ -949,2 +947,0 @@\n-\n-\n","filename":"src\/jdk.internal.md\/share\/classes\/jdk\/internal\/markdown\/MarkdownTransformer.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"}]}