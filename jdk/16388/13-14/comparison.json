{"files":[{"patch":"@@ -274,2 +274,0 @@\n-        if (DEBUG) System.err.println(\"starting content \" + showPos(bp) + \" \" + newline);\n-\n@@ -278,1 +276,0 @@\n-            if (DEBUG) System.err.println(\"   in content \" + showPos(bp) + \" \" + newline);\n@@ -385,1 +382,0 @@\n-                    if (DEBUG) System.err.println(\"  content @\");\n@@ -391,1 +387,0 @@\n-                        if (DEBUG) System.err.println(\"  content @ newline\");\n@@ -394,1 +389,0 @@\n-                            if (DEBUG) System.err.println(\"  content @ newline escape1 \" + peek);\n@@ -403,1 +397,0 @@\n-                            if (DEBUG) System.err.println(\"  content @ newline BODY will break loop\");\n@@ -408,1 +401,0 @@\n-                        if (DEBUG) System.err.println(\"  content @ newline escape2\");\n@@ -417,1 +409,0 @@\n-                    if (DEBUG) System.err.println(\"  content @ final default\");\n@@ -502,1 +493,0 @@\n-                    if (DEBUG) System.err.println(\"blockTag \" + tp + \" \" + showPos(bp) + \" \" + textStart);\n@@ -520,4 +510,2 @@\n-    private static final boolean DEBUG = false;\n-\n-    \/\/DEBUG\n-    String showPos(int p) {\n+    \/\/ unused, but useful when debugging\n+    private String showPos(int p) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.regex.MatchResult;\n@@ -32,0 +33,1 @@\n+import java.util.stream.Stream;\n@@ -678,1 +680,1 @@\n-        Iterator<?> replaceIter;\n+        private final Iterator<?> replaceIter;\n@@ -739,7 +741,6 @@\n-            var offsets = new ArrayList<Integer>();\n-            offsets.add(0);\n-            var m = lineBreak.matcher(source);\n-            while (m.find()) {\n-                offsets.add(m.end());\n-            }\n-            sourceLineOffsets = offsets.stream().mapToInt(Integer::intValue).toArray();\n+            sourceLineOffsets = Stream.concat(\n+                            Stream.of(0),\n+                            lineBreak.matcher(source).results().map(MatchResult::end))\n+                    .mapToInt(Integer::intValue)\n+                    .toArray();\n+\n@@ -844,1 +845,1 @@\n-         * using {@link #replaceAdjustPos}}.\n+         * using {@link #replaceAdjustPos}}\n@@ -952,1 +953,1 @@\n-         * Flush any text in the {@code text} buffer, by creating a new\n+         * Flushes any text in the {@code text} buffer, by creating a new\n","filename":"src\/jdk.internal.md\/share\/classes\/jdk\/internal\/markdown\/MarkdownTransformer.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"}]}