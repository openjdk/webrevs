{"files":[{"patch":"@@ -144,0 +144,11 @@\n+\n+    \/**\n+     * {@return true if the content is \"phrasing content\"}\n+     *\n+     * Phrasing content is content that may appear in a paragraph, such as text, or certain HTML elements.\n+     *\n+     * @see <a href=\"https:\/\/html.spec.whatwg.org\/multipage\/dom.html#phrasing-content\">Phrasing content<\/a>\n+     *\/\n+    public boolean isPhrasingContent() {\n+        return false;\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Content.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1396,1 +1396,14 @@\n-        private static final char PLACEHOLDER = '\\uFFFC'; \/\/ Unicode Object Replacement Character\n+        \/**\n+         * Placeholder for non-HTML nodes that are phrasing content.\n+         * The character (\\uFFFC) is the Unicode Object Replacement Character, {@code U+FFFC}.\n+         *\/\n+        private static final char PLACEHOLDER_CHAR = '\\uFFFC';\n+        \/**\n+         * Placeholder for non-HTML nodes that are not phrasing content.\n+         * The placeholder is an HTML block, according to CommonMark 4.6 rule 2,\n+         * and so will not be wrapped into with {@code <p>...<\/p>} tags.\n+         * @see <a href=\"https:\/\/spec.commonmark.org\/0.30\/#html-blocks\">HTML blocks<\/a>\n+         *\/\n+        private static final String PLACEHOLDER_BLOCK = \"<!--\\uFFFC-->\";\n+        private static final Pattern PLACEHOLDERS = Pattern.compile(PLACEHOLDER_CHAR + \"|\" + PLACEHOLDER_BLOCK);\n+\n@@ -1427,1 +1440,1 @@\n-                while ((pos = code.indexOf(PLACEHOLDER, start)) != -1) {\n+                while ((pos = code.indexOf(PLACEHOLDER_CHAR, start)) != -1) {\n@@ -1429,2 +1442,2 @@\n-                    markdownInput.append(PLACEHOLDER);\n-                    fffcObjects.add(Text.of(String.valueOf(PLACEHOLDER)));\n+                    markdownInput.append(PLACEHOLDER_CHAR);\n+                    fffcObjects.add(Text.of(String.valueOf(PLACEHOLDER_CHAR)));\n@@ -1439,1 +1452,8 @@\n-                markdownInput.append(PLACEHOLDER);\n+                if (embeddedContent.isPhrasingContent()) {\n+                    markdownInput.append(PLACEHOLDER_CHAR);\n+                } else {\n+                    if (!markdownInput.isEmpty() && markdownInput.charAt(markdownInput.length() - 1) != '\\n') {\n+                        markdownInput.append('\\n');\n+                    }\n+                    markdownInput.append(PLACEHOLDER_BLOCK);\n+                }\n@@ -1447,1 +1467,1 @@\n-\n+            Matcher m = PLACEHOLDERS.matcher(markdownOutput);\n@@ -1451,2 +1471,2 @@\n-            while ((pos = markdownOutput.indexOf(PLACEHOLDER, start)) != -1) {\n-                result.add(RawHtml.markdown(markdownOutput.substring(start, pos)));\n+            while (m.find()) {\n+                result.add(RawHtml.markdown(markdownOutput.substring(start, m.start())));\n@@ -1454,1 +1474,1 @@\n-                start = pos + 1;\n+                start = m.end();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":29,"deletions":9,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -110,0 +110,5 @@\n+    @Override\n+    public boolean isPhrasingContent() {\n+        return contents.stream().allMatch(Content::isPhrasingContent);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/ContentBuilder.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -69,0 +69,5 @@\n+    @Override\n+    public boolean isPhrasingContent() {\n+        return true;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Entity.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1002,0 +1002,5 @@\n+    @Override\n+    public boolean isPhrasingContent() {\n+        return tagName.phrasingContent;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlTree.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import java.util.Locale;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -142,0 +145,18 @@\n+    Pattern tag = Pattern.compile(\"<(?<tag>[A-Za-z0-9]+)(\\\\s|>)\");\n+    @Override\n+    public boolean isPhrasingContent() {\n+        Matcher m = tag.matcher(rawHtmlContent);\n+        while (m.find()) {\n+            try {\n+                var tn = TagName.of(m.group(\"tag\"));\n+                if (!tn.phrasingContent) {\n+                    return false;\n+                }\n+            } catch (IllegalArgumentException e) {\n+                \/\/ unknown tag\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/RawHtml.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.Locale;\n+\n@@ -37,2 +39,2 @@\n-    A,\n-    BUTTON,\n+    A(true),\n+    BUTTON(true),\n@@ -41,1 +43,1 @@\n-    BR,\n+    BR(true),\n@@ -43,1 +45,1 @@\n-    CODE,\n+    CODE(true),\n@@ -49,1 +51,1 @@\n-    EM,\n+    EM(true),\n@@ -62,4 +64,4 @@\n-    I,\n-    IMG,\n-    INPUT,\n-    LABEL,\n+    I(true),\n+    IMG(true),\n+    INPUT(true),\n+    LABEL(true),\n@@ -68,1 +70,1 @@\n-    LINK,\n+    LINK(true),\n@@ -73,1 +75,1 @@\n-    NOSCRIPT,\n+    NOSCRIPT(true),\n@@ -77,1 +79,1 @@\n-    SCRIPT,\n+    SCRIPT(true),\n@@ -79,4 +81,4 @@\n-    SMALL,\n-    SPAN,\n-    STRONG,\n-    SUB,\n+    SMALL(true),\n+    SPAN(true),\n+    STRONG(true),\n+    SUB(true),\n@@ -84,1 +86,1 @@\n-    SUP,\n+    SUP(true),\n@@ -93,1 +95,1 @@\n-    WBR;\n+    WBR(true);\n@@ -96,0 +98,5 @@\n+    public final boolean phrasingContent;\n+\n+    static TagName of(String s) {\n+        return valueOf(s.toUpperCase(Locale.ROOT));\n+    }\n@@ -98,0 +105,4 @@\n+        this(false);\n+    }\n+\n+    TagName(boolean phrasingContent) {\n@@ -99,0 +110,1 @@\n+        this.phrasingContent = phrasingContent;\n@@ -104,0 +116,1 @@\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/TagName.java","additions":31,"deletions":18,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -69,0 +69,5 @@\n+    @Override\n+    public boolean isPhrasingContent() {\n+        return true;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Text.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-     * Constructor to construct StringContent object.\n+     * Constructor to construct an empty TextBuilder object.\n@@ -51,1 +51,1 @@\n-     * Constructor to construct StringContent object with some initial content.\n+     * Constructor to construct a TextBuilder object with some initial content.\n@@ -61,1 +61,1 @@\n-     * Adds content for the StringContent object.\n+     * Adds content for the TextBuilder object.\n@@ -77,0 +77,5 @@\n+    @Override\n+    public boolean isPhrasingContent() {\n+        return true;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/TextBuilder.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.lang.model.element.Element;\n+\n+import com.sun.source.doctree.DocTree;\n+import com.sun.source.doctree.UnknownInlineTagTree;\n+\n+import jdk.javadoc.doclet.Taglet;\n+\n+\/**\n+ * An inline taglet that generates output in a {@code <div>} element.\n+ *\/\n+public class DivTaglet implements Taglet {\n+    @Override\n+    public String getName() {\n+        return \"div\";\n+    }\n+\n+    @Override\n+    public Set<Location> getAllowedLocations() {\n+        return Set.of(Location.values());\n+    }\n+\n+    @Override\n+    public boolean isInlineTag() {\n+        return true;\n+    }\n+\n+    @Override\n+    public String toString(List<? extends DocTree> trees, Element e) {\n+        var children = ((UnknownInlineTagTree) trees.get(0)).getContent();\n+        return \"<div>\"\n+                + children.stream().map(DocTree::toString).collect(Collectors.joining())\n+                + \"<\/div>\";\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/DivTaglet.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.lang.model.element.Element;\n+\n+import com.sun.source.doctree.DocTree;\n+import com.sun.source.doctree.UnknownInlineTagTree;\n+\n+import jdk.javadoc.doclet.Taglet;\n+\n+\/**\n+ * An inline taglet that generates output in a {@code <span>} element.\n+ *\/\n+public class SpanTaglet implements Taglet {\n+    @Override\n+    public String getName() {\n+        return \"span\";\n+    }\n+\n+    @Override\n+    public Set<Location> getAllowedLocations() {\n+        return Set.of(Location.values());\n+    }\n+\n+    @Override\n+    public boolean isInlineTag() {\n+        return true;\n+    }\n+\n+    @Override\n+    public String toString(List<? extends DocTree> trees, Element e) {\n+        var children = ((UnknownInlineTagTree) trees.get(0)).getContent();\n+        return \"<span>\"\n+                + children.stream().map(DocTree::toString).collect(Collectors.joining())\n+                + \"<\/span>\";\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/SpanTaglet.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -30,1 +30,1 @@\n- * @build    toolbox.ToolBox javadoc.tester.*\n+ * @build    toolbox.ToolBox javadoc.tester.* DivTaglet SpanTaglet\n@@ -732,0 +732,181 @@\n+\n+    \/\/ The following test checks whether the output of system taglets\n+    \/\/ is or is not wrapped in <p> tags, depending on the context within\n+    \/\/ the doc comment and the output generated by the taglet.\n+    \/\/\n+    \/\/ {@code ...} is used as an example of a tag that generates phrasing content.\n+    \/\/ {@snippet ...} is used as an example of a tag that generates block content.\n+    \/\/\n+    \/\/ See also: testUserTaglets\n+    @Test\n+    public void testSystemTaglets(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ {@code this is code_standalone}\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void code_standalone() { }\n+                        \n+                        \n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ Before.\n+                        \/\/\/ {@code this is code_wrapped}\n+                        \/\/\/ After.\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void code_wrapped() { }\n+                        \n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ {@snippet :\n+                        \/\/\/    this is snippet_standalone\n+                        \/\/\/ }\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void snippet_standalone() { }\n+                        \n+                        \n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ Before.\n+                        \/\/\/ {@snippet :\n+                        \/\/\/    this is a snippet_wrapped\n+                        \/\/\/ }\n+                        \/\/\/ After.\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void snippet_wrapped() { }\n+                    }\"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p><code>this is code_standalone<\/code><\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p>Before.\n+                    <code>this is code_wrapped<\/code>\n+                    After.<\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <div class=\"snippet-container\"><button class=\"copy snippet-copy\" aria-label=\"Copy snippet\" \\\n+                    onclick=\"copySnippet(this)\"><span data-copied=\"Copied!\">Copy<\/span>\\\n+                    <img src=\"..\/resource-files\/copy.svg\" alt=\"Copy snippet\"><\/button>\n+                    <pre class=\"snippet\"><code>   this is snippet_standalone\n+                    <\/code><\/pre>\n+                    <\/div>\n+                                        \n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p>Before.<\/p>\n+                    <div class=\"snippet-container\"><button class=\"copy snippet-copy\" aria-label=\"Copy snippet\" onclick=\"copySnippet(this)\"><span data-copied=\"Copied!\">Copy<\/span><img src=\"..\/resource-files\/copy.svg\" alt=\"Copy snippet\"><\/button>\n+                    <pre class=\"snippet\"><code>   this is a snippet_wrapped\n+                    <\/code><\/pre>\n+                    <\/div>\n+                                        \n+                    <p>After.<\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\");\n+    }\n+\n+    \/\/ The following test checks whether the output of user-defined taglets\n+    \/\/ is or is not wrapped in <p> tags, depending on the context within\n+    \/\/ the doc comment and the output generated by the taglet.\n+    \/\/\n+    \/\/ {@span ...} is used as an example of a taglet that generates phrasing content.\n+    \/\/ {@div ...} is used as an example of a taglet that generates block content.\n+    \/\/\n+    \/\/ See also: testSystemTaglets\n+    @Test\n+    public void testUserTaglets(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ {@span this is phrasing_standalone}\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void phrasing_standalone() { }\n+                        \n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ Before.\n+                        \/\/\/ {@span this is phrasing_wrapped}\n+                        \/\/\/ After.\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        \n+                        public void phrasing_wrapped() { }\n+                        \n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ {@div this is block_standalone}\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void block_standalone() { }\n+                        \n+                        \/\/\/ First sentence.\n+                        \/\/\/\n+                        \/\/\/ Before.\n+                        \/\/\/ {@div this is block_wrapped}\n+                        \/\/\/ After.\n+                        \/\/\/\n+                        \/\/\/ Lorem ipsum.\n+                        public void block_wrapped() { }\n+                    }\"\"\");\n+\n+        String testClasses = System.getProperty(\"test.classes\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-tagletpath\", testClasses,\n+                \"-taglet\", \"DivTaglet\",\n+                \"-taglet\", \"SpanTaglet\",\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+\n+        checkOutput(\"p\/C.html\", true, \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p><span>this is phrasing_standalone<\/span><\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p>Before.\n+                    <span>this is phrasing_wrapped<\/span>\n+                    After.<\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <div>this is block_standalone<\/div>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"block\"><p>First sentence.<\/p>\n+                    <p>Before.<\/p>\n+                    <div>this is block_wrapped<\/div>\n+                    <p>After.<\/p>\n+                    <p>Lorem ipsum.<\/p>\n+                    <\/div>\"\"\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMarkdown\/TestMarkdown.java","additions":182,"deletions":1,"binary":false,"changes":183,"status":"modified"}]}