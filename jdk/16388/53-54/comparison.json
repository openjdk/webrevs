{"files":[{"patch":"@@ -283,8 +283,8 @@\n-     * <p> A documentation comment of an element is a comment that\n-     * begins with \"{@code \/**}\", ends with a separate\n-     * \"<code>*&#47;<\/code>\", and immediately precedes the element,\n-     * ignoring white space, annotations, end-of-line-comments ({@code\n-     * \"\/\/\"} comments), and intermediate traditional comments\n-     * (<code>\"\/* ... *&#47;\"<\/code> comments) that are not doc comments.\n-     * Therefore, a documentation comment\n-     * contains at least three \"{@code *}\" characters.  The text\n+     * <p>A documentation comment of an element is a particular kind\n+     * of comment that immediately precedes the element, ignoring\n+     * white space, annotations and any other comments that are\n+     * not themselves documentation comments.\n+     *\n+     * <p>There are two kinds of documentation comments, either based on\n+     * <em>traditional comments<\/em> or based on a series of\n+     * <em>end-of-line comments<\/em>. For both kinds, the text\n@@ -292,1 +292,8 @@\n-     * the comment as it appears in source code:\n+     * the comment as it appears in source code, as described below.\n+     *\n+     * <p>A {@linkplain CommentKind#TRADITIONAL traditional\n+     * documentation comment} is a traditional comment that begins\n+     * with \"{@code \/**}\", and ends with a separate \"<code>*&#47;<\/code>\".\n+     * (Therefore, such a comment contains at least three \"{@code *}\"\n+     * characters.)\n+     * The lines of such a comment are processed as follows:\n@@ -300,2 +307,2 @@\n-     * if the lines start with <em>zero<\/em> or more whitespace characters followed by\n-     * <em>one<\/em> or more \"{@code *}\" characters,\n+     * if the lines start with <em>zero<\/em> or more whitespace characters\n+     * followed by <em>one<\/em> or more \"{@code *}\" characters,\n@@ -309,3 +316,25 @@\n-     * space and \"{@code *}\" character removal as described above. If all the characters\n-     * of the line are removed, it makes no contribution to the\n-     * returned comment.\n+     * space and \"{@code *}\" character removal as described above.\n+     * <li>The processed lines are then concatenated together,\n+     * separated by newline (\"{@code \\n}\") characters, and returned.\n+     * <\/ul>\n+     *\n+     * <p>An {@linkplain CommentKind#END_OF_LINE end-of-line\n+     * documentation comment} is a series of adjacent end-of-line\n+     * comments, each on a line by itself, ignoring any whitespace\n+     * characters at the beginning of the line, and each beginning\n+     * with \"{@code \/\/\/}\".\n+     * The lines of such a comment are processed as follows:\n+     * <ul>\n+     * <li>Any leading whitespace and the three initial \"{@code \/}\"\n+     * characters are removed from each line.\n+     * <li>The lines are shifted left, by removing leading whitespace\n+     * characters, until the non-blank line with the least leading\n+     * whitespace characters has no remaining leading whitespace\n+     * characters.\n+     * <li>Additional leading whitespace characters and any trailing\n+     * whitespace characters in each line are preserved.\n+     * <li>\n+     * The processed lines are then concatenated together,\n+     * separated by newline (\"{@code \\n}\") characters, and returned.\n+     * If the last line is not blank, the returned value will not be\n+     * terminated by a newline character.\n@@ -313,3 +342,0 @@\n-     * The processed lines are then\n-     * concatenated together (including line terminators) and\n-     * returned.\n@@ -325,0 +351,26 @@\n+    \/**\n+     * {@return the kind of the documentation comment for the given element,\n+     * or {@code null} if there is no comment or the kind is not known}\n+     *\n+     * @implSpec The default implementation of this method returns\n+     * {@code null}.\n+     *\n+     * @param e the element being examined\n+     * @since 23\n+     *\/\n+    default CommentKind getDocCommentKind(Element e) {\n+        return null;\n+    }\n+\n+    \/**\n+     * The kind of documentation comment.\n+     *\n+     * @since 23\n+     *\/\n+    enum CommentKind {\n+        \/** The kind of comments whose lines are prefixed by {@code \/\/\/}. *\/\n+        END_OF_LINE,\n+        \/** The kind of comments that begin with {@code \/**}. *\/\n+        TRADITIONAL\n+    }\n+\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":69,"deletions":17,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import javax.lang.model.util.Elements.CommentKind;\n@@ -40,1 +41,0 @@\n-import com.sun.source.doctree.BlockTagTree;\n@@ -44,2 +44,0 @@\n-import com.sun.source.doctree.InlineTagTree;\n-import com.sun.source.doctree.LinkTree;\n@@ -91,12 +89,0 @@\n-    \/**\n-     * The style of a documentation comment.\n-     *\n-     * @since 23\n-     *\/\n-    public enum CommentKind {\n-        \/** The style of comments whose lines are prefixed by {@code \/\/\/}. *\/\n-        LINE,\n-        \/** The style of comments that begin with {@code \/**}. *\/\n-        BLOCK\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTrees.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import javax.lang.model.util.Elements.CommentKind;\n@@ -733,2 +734,2 @@\n-                case JAVADOC_BLOCK -> DocTrees.CommentKind.BLOCK;\n-                case JAVADOC_LINE -> DocTrees.CommentKind.LINE;\n+                case JAVADOC_BLOCK -> CommentKind.TRADITIONAL;\n+                case JAVADOC_LINE -> CommentKind.END_OF_LINE;\n@@ -1369,0 +1370,5 @@\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public CommentKind getCommentKind(JCTree tree) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.function.BiFunction;\n@@ -64,0 +65,1 @@\n+import com.sun.tools.javac.tree.DocCommentTable;\n@@ -436,0 +438,9 @@\n+        return  getDocCommentItem(e, ((docCommentTable, tree) -> docCommentTable.getCommentText(tree)));\n+    }\n+\n+    @DefinedBy(Api.LANGUAGE_MODEL)\n+    public CommentKind getDocCommentKind(Element e) {\n+        return  getDocCommentItem(e, ((docCommentTable, tree) -> docCommentTable.getCommentKind(tree)));\n+    }\n+\n+    private <R> R getDocCommentItem(Element e, BiFunction<DocCommentTable, JCTree, R> f) {\n@@ -447,1 +458,1 @@\n-        return toplevel.docComments.getCommentText(tree);\n+        return f.apply(toplevel.docComments, tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import javax.lang.model.util.Elements.CommentKind;\n+\n@@ -76,0 +78,10 @@\n+    @Override\n+    public CommentKind getCommentKind(JCTree tree) {\n+        Comment c = getComment(tree);\n+        return (c == null) ? null : switch (c.getStyle()) {\n+            case JAVADOC_BLOCK -> CommentKind.TRADITIONAL;\n+            case JAVADOC_LINE -> CommentKind.END_OF_LINE;\n+            default -> throw new IllegalStateException(c.getStyle().toString());\n+        };\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/LazyDocCommentTable.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import javax.lang.model.util.Elements.CommentKind;\n+\n@@ -52,0 +54,5 @@\n+    \/**\n+     * Get the plain text of the doc comment, if any, for a tree node.\n+     *\/\n+    CommentKind getCommentKind(JCTree tree);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocCommentTable.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import javax.lang.model.util.Elements.CommentKind;\n+\n@@ -55,0 +57,9 @@\n+    public CommentKind getCommentKind(JCTree tree) {\n+        Comment c = getComment(tree);\n+        return c == null ? null : switch (c.getStyle()) {\n+            case JAVADOC_BLOCK -> CommentKind.TRADITIONAL;\n+            case JAVADOC_LINE -> CommentKind.END_OF_LINE;\n+            default -> throw new IllegalStateException(c.getStyle().toString());\n+        };\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/sampleapi\/lib\/sampleapi\/util\/PoorDocCommentTable.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import javax.lang.model.util.Elements;\n@@ -993,2 +994,2 @@\n-            DocTrees.CommentKind ck = trees.getDocCommentKind(path);\n-            boolean isLineComment = ck == DocTrees.CommentKind.LINE;\n+            Elements.CommentKind ck = trees.getDocCommentKind(path);\n+            boolean isLineComment = ck == Elements.CommentKind.END_OF_LINE;\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.io.Writer;\n@@ -35,1 +34,0 @@\n-import java.util.function.*;\n@@ -38,0 +36,1 @@\n+import javax.lang.model.util.Elements.CommentKind;\n@@ -42,1 +41,1 @@\n- * Test basic workings of Elements.getDocComments\n+ * Test basic workings of Elements.getDocComments for block comments\n@@ -63,0 +62,6 @@\n+\n+                        CommentKind expectedCommentKind = CommentKind.TRADITIONAL;\n+                        CommentKind actualCommentKind = elements.getDocCommentKind(element);\n+                        if (expectedCommentKind != actualCommentKind) {\n+                            messager.printError(\"Unexpected doc comment kind found: \" + actualCommentKind, element);\n+                        }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/TestGetDocComments.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,180 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8307184\n+ * @summary Test basic operation of Elements.getDocComments\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @build   toolbox.ToolBox JavacTestingAbstractProcessor TestGetDocCommentsLine\n+ * @compile -processor TestGetDocCommentsLine -proc:only TestGetDocCommentsLine.java\n+ *\/\n+\n+import java.util.Set;\n+\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.util.ElementFilter;\n+import javax.lang.model.util.Elements.CommentKind;\n+\n+import toolbox.ToolBox;\n+\n+\/**\n+ * Test basic workings of Elements.getDocComments for line comments\n+ *\/\n+public class TestGetDocCommentsLine extends JavacTestingAbstractProcessor {\n+    public boolean process(Set<? extends TypeElement> annotations,\n+                           RoundEnvironment roundEnv) {\n+        if (!roundEnv.processingOver()) {\n+            boolean elementSeen = false;\n+\n+            for (TypeElement typeRoot : ElementFilter.typesIn(roundEnv.getRootElements()) ) {\n+                for (Element element : typeRoot.getEnclosedElements()) {\n+                    ExpectedComment expectedComment = element.getAnnotation(ExpectedComment.class);\n+                    if (expectedComment != null ) {\n+                        elementSeen = true;\n+                        String expectedCommentStr = expectedComment.value();\n+                        String actualComment = elements.getDocComment(element);\n+\n+                        if (!expectedCommentStr.equals(actualComment)) {\n+                            messager.printError(\"Unexpected doc comment found\", element);\n+                            System.err.println(\"expect>>\" + expectedCommentStr + \"<<\");\n+                            System.err.println(\"actual>>\" + actualComment + \"<<\");\n+                            (new ToolBox()).checkEqual(expectedCommentStr.lines().toList(),\n+                                                       actualComment.lines().toList());\n+                        }\n+\n+                        CommentKind expectedCommentKind = CommentKind.END_OF_LINE;\n+                        CommentKind actualCommentKind = elements.getDocCommentKind(element);\n+                        if (expectedCommentKind != actualCommentKind) {\n+                            messager.printError(\"Unexpected doc comment kind found: \" + actualCommentKind, element);\n+                        }\n+                    }\n+                }\n+\n+                if (!elementSeen) {\n+                    throw new RuntimeException(\"No elements seen.\");\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @interface ExpectedComment {\n+        String value();\n+    }\n+\n+    \/\/ Basic processing of interior lines\n+    \/\/\/Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n+    \/\/\/eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n+    \/\/\/enim ad minim veniam, quis nostrud exercitation ullamco laboris\n+    \/\/\/nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\n+    \/\/\/in reprehenderit in voluptate velit esse cillum dolore eu\n+    \/\/\/fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n+    \/\/\/proident, sunt in culpa qui officia deserunt mollit anim id est\n+    \/\/\/laborum.\n+    @ExpectedComment(\"\"\"\n+     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n+     eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n+     enim ad minim veniam, quis nostrud exercitation ullamco laboris\n+     nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\n+     in reprehenderit in voluptate velit esse cillum dolore eu\n+     fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n+     proident, sunt in culpa qui officia deserunt mollit anim id est\n+     laborum.\"\"\")\n+    \/\/ End-of-line-style comment\n+    @SuppressWarnings(\"\") \/\/ A second preceding annotation\n+    \/* Traditional comment *\/\n+    private void foo() {return ;}\n+\n+\n+    \/\/ Check removal of space characters;\n+    \/\/ excess \/ characters are not removed\n+    \/\/ use Unicode escape to test tab removal\n+\/\/\/Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n+\/\/\/\/eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n+\/\/\/\/\/enim ad minim veniam, quis nostrud exercitation ullamco laboris\n+\/\/\/\/\/\/nisi ut aliquip ex ea commodo consequat.\n+ \\u0009\/\/\/Duis aute irure dolor in reprehenderit in voluptate velit esse\n+ \/\/\/\/cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n+  \/\/\/\/\/cupidatat non proident, sunt in culpa qui officia deserunt mollit\n+                                            \/\/\/anim id est laborum.\n+    @ExpectedComment(\"\"\"\n+       Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n+       \/eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n+       \/\/enim ad minim veniam, quis nostrud exercitation ullamco laboris\n+       \/\/\/nisi ut aliquip ex ea commodo consequat.\n+       Duis aute irure dolor in reprehenderit in voluptate velit esse\n+       \/cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n+       \/\/cupidatat non proident, sunt in culpa qui officia deserunt mollit\n+       anim id est laborum.\"\"\")\n+    @SuppressWarnings(\"\") \/\/ A second preceding annotation\n+    \/\/ End-of-line-style comment\n+    \/*\n+     * Traditional comment over multiple lines.\n+     *\/\n+    private void bar() {return ;}\n+\n+    \/\/ Incidental whitespace _after_ the \/\/\/ prefix is deleted;\n+    \/\/ additional indentation is _not_ deleted\n+    \/\/\/  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n+    \/\/\/  eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n+    \/\/\/   enim ad minim veniam, quis nostrud exercitation ullamco laboris\n+    \/\/\/    nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\n+    \/\/\/     in reprehenderit in voluptate velit esse cillum dolore eu\n+    \/\/\/  fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n+    \/\/\/  proident, sunt in culpa qui officia deserunt mollit anim id est\n+    \/\/\/  laborum.\n+    @ExpectedComment(\"\"\"\n+     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n+     eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n+      enim ad minim veniam, quis nostrud exercitation ullamco laboris\n+       nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\n+        in reprehenderit in voluptate velit esse cillum dolore eu\n+     fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n+     proident, sunt in culpa qui officia deserunt mollit anim id est\n+     laborum.\"\"\")\n+    private void baz() {return ;}\n+\n+    \/\/ Incidental space after \/\/\/ is removed, but not space at the end of the line\n+    \/\/\/   Totality\\u0020\n+    @ExpectedComment(\"Totality \")\n+    private void quux() {return ;}\n+\n+    \/\/\/\n+    @ExpectedComment(\"\")\n+    private void empty() {return ;}\n+\n+    \/\/\/ tail\\u0020\n+    @ExpectedComment(\"tail \")\n+    private void tail() {return ;}\n+\n+    \/\/ Testing of line terminators, javac implementation normalizes them:\n+    \/\/ * newline: \\u000A\n+    \/\/ * carriage return: \\u000D\n+    \/\/ * * carriage return + newline: \\u000D\\u000A\n+    \/\/\/ Lorem\\u000A\/\/\/ \\u000D\/\/\/ \\u000D\\u000A\/\/\/ ipsum\n+    @ExpectedComment(\"Lorem\\n\\n\\nipsum\")\n+    private void wombat2() {return ;}\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/TestGetDocCommentsLine.java","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"}]}