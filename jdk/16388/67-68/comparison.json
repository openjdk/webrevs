{"files":[{"patch":"@@ -69,2 +69,2 @@\n-        \/\/ for now, use a dummy option\n-        \/\/ in the future, this could be a test for -Xlint:dangling-comment\n+        \/\/ use a dummy option\n+        \/\/ note that we cannot use -Xlint:dangling-doc-comments in javadoc\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/testLineCommentOption\/TestLineCommentOption.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,6 +1,6 @@\n-DanglingDocCommentsClass.java:8:1: compiler.warn.dangling.doc.comment\n-DanglingDocCommentsClass.java:11:1: compiler.warn.dangling.doc.comment\n-DanglingDocCommentsClass.java:12:8: compiler.warn.dangling.doc.comment\n-DanglingDocCommentsClass.java:12:69: compiler.warn.dangling.doc.comment\n-DanglingDocCommentsClass.java:13:5: compiler.warn.dangling.doc.comment\n-DanglingDocCommentsClass.java:17:5: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass.java:10:1: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass.java:13:1: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass.java:14:8: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass.java:14:69: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass.java:15:5: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass.java:19:5: compiler.warn.dangling.doc.comment\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsClass.enabled.out","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -8,0 +8,2 @@\n+\/\/ This is a test of duplicate and misplaced doc comments in a class, using traditional comments\n+\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsClass.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,7 @@\n+DanglingDocCommentsClass_Line.java:11:1: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass_Line.java:15:1: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass_Line.java:17:5: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass_Line.java:19:9: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass_Line.java:21:5: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass_Line.java:26:5: compiler.warn.dangling.doc.comment\n+6 warnings\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsClass_Line.enabled.out","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @compile -Xlint:dangling-doc-comments DanglingDocCommentsClass_Line.java\n+ * @compile\/ref=empty.out -XDrawDiagnostics DanglingDocCommentsClass_Line.java\n+ * @compile\/ref=DanglingDocCommentsClass_Line.enabled.out -XDrawDiagnostics -Xlint:dangling-doc-comments DanglingDocCommentsClass_Line.java\n+ * @compile\/ref=empty.out -XDrawDiagnostics --disable-line-doc-comments -Xlint:dangling-doc-comments DanglingDocCommentsClass_Line.java\n+ *\/\n+\n+\/\/ This is a test of duplicate and misplaced doc comments in a class, using end-of-line comments\n+\n+\/\/\/ Bad\/Extra Class Comment.\n+\n+\/\/\/ Good Class Comment.\n+@Deprecated\n+\/\/\/ Misplaced: after anno.\n+public\n+    \/\/\/ Misplaced: after mods.\n+    class DanglingDocCommentsClass_Line\n+        \/\/\/ Misplaced: after ident\n+    {\n+    \/\/\/ Bad\/Extra Field Comment.\n+\n+    \/\/\/ Good Field Comment.\n+    public int i;\n+\n+    \/\/\/ Bad\/Extra Method Comment.\n+\n+    \/\/\/ Good Method Comment.\n+    public void m1() { }\n+\n+    @SuppressWarnings(\"dangling-doc-comments\")\n+    \/\/\/ Bad\/misplaced\/suppressed comment.\n+    public void m2() { }\n+\n+    public void m3(boolean b) {\n+        \/\/\/------------------\n+        \/\/\/ Box comment\n+        \/\/\/------------------\n+        if (b) return;\n+    }\n+\n+    public void m4a() {\n+        \/\/\/ Not a doc comment.\n+        System.out.println();\n+        \/\/\/ Not a doc comment; not dangling for m4b\n+    }\n+\n+    \/\/\/ Good comment for m4b; no dangling comments.\n+    public void m4b() { }\n+\n+    \/\/\/ Comment ignored here: does not affect decls in block\n+    static {\n+        \/\/\/ Good comment.\n+        int i = 0;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsClass_Line.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+DanglingDocCommentsClass_Mixed.java:13:1: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass_Mixed.java:17:5: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsClass_Mixed.java:21:5: compiler.warn.dangling.doc.comment\n+3 warnings\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsClass_Mixed.enabled.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @compile -Xlint:dangling-doc-comments DanglingDocCommentsClass_Mixed.java\n+ * @compile\/ref=empty.out -XDrawDiagnostics DanglingDocCommentsClass_Mixed.java\n+ * @compile\/ref=DanglingDocCommentsClass_Mixed.enabled.out -XDrawDiagnostics -Xlint:dangling-doc-comments DanglingDocCommentsClass_Mixed.java\n+ * @compile\/ref=empty.out -XDrawDiagnostics --disable-line-doc-comments -Xlint:dangling-doc-comments DanglingDocCommentsClass_Mixed.java\n+ *\/\n+\n+\/\/ This is a test of duplicate doc comments in a class, using a mixture of traditional and end-of-line comments\n+\/\/ It is a useful test case for a real-world scenario in which an end-of-line comment is\n+\/\/ placed between a traditional doc comment and its declaration.\n+\n+\/** First Class Comment. *\/\n+\/\/\/ Second Class Comment.\n+@Deprecated public class DanglingDocCommentsClass_Mixed\n+    {\n+    \/** First Field Comment. *\/\n+    \/\/\/ Second Field Comment.\n+    public int i;\n+\n+    \/** First Method Comment. *\/\n+    \/\/\/ Second Method Comment.\n+    public void m1() { }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsClass_Mixed.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -1,7 +1,7 @@\n-DanglingDocCommentsEnum.java:8:1: compiler.warn.dangling.doc.comment\n-DanglingDocCommentsEnum.java:11:1: compiler.warn.dangling.doc.comment\n-DanglingDocCommentsEnum.java:12:8: compiler.warn.dangling.doc.comment\n-DanglingDocCommentsEnum.java:12:67: compiler.warn.dangling.doc.comment\n-DanglingDocCommentsEnum.java:14:5: compiler.warn.dangling.doc.comment\n-DanglingDocCommentsEnum.java:20:5: compiler.warn.dangling.doc.comment\n-DanglingDocCommentsEnum.java:26:5: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:10:1: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:13:1: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:14:8: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:14:67: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:16:5: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:22:5: compiler.warn.dangling.doc.comment\n+DanglingDocCommentsEnum.java:28:5: compiler.warn.dangling.doc.comment\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsEnum.enabled.out","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -8,0 +8,2 @@\n+\/\/ This is a test of duplicate and misplaced doc comments in an enum class, using traditional comments\n+\n","filename":"test\/langtools\/tools\/javac\/danglingDocComments\/DanglingDocCommentsEnum.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}