{"files":[{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2024 Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.gcbarriers;\n+\n+import compiler.lib.ir_framework.CompilePhase;\n+import compiler.lib.ir_framework.DontInline;\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.IRNode;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+\n+\/**\n+ * @test\n+ * @bug 8231569\n+ * @summary Test that Shenandoah barriers are expanded correctly\n+ * @library \/test\/lib \/\n+ * @requires vm.gc.Shenandoah\n+ * @run main compiler.gcbarriers.TestShenandoahBarrierExpansion\n+ *\/\n+public class TestShenandoahBarrierExpansion {\n+    public static void main(String[] args) {\n+        TestFramework test = new TestFramework(TestShenandoahBarrierExpansion.class);\n+        test.addFlags(\"-XX:+UseShenandoahGC\");\n+        test.start();\n+    }\n+\n+    private static Object staticField;\n+    @Test\n+    @IR(failOn = IRNode.IF, phase = CompilePhase.AFTER_PARSING)\n+    @IR(counts = { IRNode.IF, \"2\" }, phase = CompilePhase.BARRIER_EXPANSION)\n+    public Object testLoadFieldObject() {\n+        return staticField;\n+    }\n+\n+    private static A staticField2 = new A();\n+    @Test\n+    @IR(counts = { IRNode.IF, \"1\" }, phase = CompilePhase.AFTER_PARSING)\n+    @IR(counts = { IRNode.IF, \"3\" }, phase = CompilePhase.BARRIER_EXPANSION)\n+    private static int testLoadObjectFieldWithNullCheck() {\n+        return staticField2.intField;\n+    }\n+\n+    private static A staticField3 = new A();\n+    @Test\n+    @IR(counts = { IRNode.IF, \"2\" }, phase = CompilePhase.AFTER_PARSING)\n+    @IR(counts = { IRNode.IF, \"6\" }, phase = CompilePhase.BARRIER_EXPANSION)\n+    private static int testLoadTwoObjectFieldsWithNullCheck() {\n+        return staticField2.intField + staticField3.intField;\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.IF, phase = CompilePhase.AFTER_PARSING)\n+    @IR(counts = { IRNode.IF, \"3\" }, phase = CompilePhase.BARRIER_EXPANSION)\n+    private static void testLoadTwoFieldObjectAndEscape() {\n+        final A field2 = staticField2;\n+        final A field3 = staticField3;\n+        notInlined(field2, field3);\n+    }\n+\n+    @DontInline\n+    private static void notInlined(A field2, A field3) {\n+        \/\/ noop\n+    }\n+\n+    private static class A {\n+        public int intField;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestShenandoahBarrierExpansion.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}