{"files":[{"patch":"@@ -42,4 +42,0 @@\n-size_t ZAllocatorEden::tlab_used() const {\n-  return _object_allocator.used();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zAllocator.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-  size_t tlab_used() const;\n","filename":"src\/hotspot\/share\/gc\/z\/zAllocator.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -136,0 +136,5 @@\n+  \/\/ Set a small initial TLAB size to avoid depending on the current capacity\n+  if (FLAG_IS_DEFAULT(TLABSize)) {\n+    FLAG_SET_DEFAULT(TLABSize, 8*K);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zArguments.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-  return _heap.max_tlab_size();\n+  return _heap.max_tlab_size() \/ HeapWordSize;\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -840,0 +840,3 @@\n+  \/\/ Reset TLAB usage\n+  ZHeap::heap()->reset_tlab_used();\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+    _tlab_usage(),\n@@ -134,1 +135,1 @@\n-  return capacity();\n+  return _tlab_usage.capacity();\n@@ -138,1 +139,1 @@\n-  return _allocator_eden.tlab_used();\n+  return _tlab_usage.used();\n@@ -160,0 +161,8 @@\n+void ZHeap::increment_tlab_used() {\n+  _tlab_usage.add(ZPageSizeSmall);\n+}\n+\n+void ZHeap::reset_tlab_used() {\n+  _tlab_usage.reset();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"gc\/z\/zTLABUsage.hpp\"\n@@ -58,0 +59,2 @@\n+  ZTLABUsage              _tlab_usage;\n+\n@@ -85,0 +88,3 @@\n+  void increment_tlab_used();\n+  void reset_tlab_used();\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,2 +46,0 @@\n-    _used(0),\n-    _undone(0),\n@@ -61,7 +59,1 @@\n-  ZPage* const page = ZHeap::heap()->alloc_page(type, size, flags, _age);\n-  if (page != nullptr) {\n-    \/\/ Increment used bytes\n-    Atomic::add(_used.addr(), size);\n-  }\n-\n-  return page;\n+  return ZHeap::heap()->alloc_page(type, size, flags, _age);\n@@ -75,3 +67,0 @@\n-  \/\/ Increment undone bytes\n-  Atomic::add(_undone.addr(), page->size());\n-\n@@ -123,0 +112,6 @@\n+      } else {\n+        \/\/ Page successfully installed\n+        if (_age == ZPageAge::eden && page_type == ZPageType::small) {\n+          \/\/ Increment TLAB usage for small eden pages\n+          ZHeap::heap()->increment_tlab_used();\n+        }\n@@ -232,17 +227,0 @@\n-size_t ZObjectAllocator::used() const {\n-  size_t total_used = 0;\n-  size_t total_undone = 0;\n-\n-  ZPerCPUConstIterator<size_t> iter_used(&_used);\n-  for (const size_t* cpu_used; iter_used.next(&cpu_used);) {\n-    total_used += *cpu_used;\n-  }\n-\n-  ZPerCPUConstIterator<size_t> iter_undone(&_undone);\n-  for (const size_t* cpu_undone; iter_undone.next(&cpu_undone);) {\n-    total_undone += *cpu_undone;\n-  }\n-\n-  return total_used - total_undone;\n-}\n-\n@@ -263,4 +241,0 @@\n-  \/\/ Reset used and undone bytes\n-  _used.set_all(0);\n-  _undone.set_all(0);\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.cpp","additions":7,"deletions":33,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n-  ZPerCPU<size_t>    _used;\n-  ZPerCPU<size_t>    _undone;\n@@ -83,1 +81,0 @@\n-  size_t used() const;\n","filename":"src\/hotspot\/share\/gc\/z\/zObjectAllocator.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"gc\/z\/zTLABUsage.hpp\"\n+#include \"logging\/log.hpp\"\n+#include \"runtime\/atomic.hpp\"\n+\n+ZTLABUsage::ZTLABUsage()\n+  : _used(0),\n+    _used_history() {}\n+\n+\n+void ZTLABUsage::add(size_t size) {\n+  Atomic::add(&_used, size, memory_order_relaxed);\n+}\n+\n+void ZTLABUsage::reset() {\n+  size_t current_used = Atomic::xchg(&_used, (size_t) 0);\n+\n+  \/\/ Avoid updates for the second young generation collection of a SystemGC\n+  if (current_used == 0) {\n+    return;\n+  }\n+\n+  \/\/ Save the old values for logging\n+  size_t old_used = used();\n+  size_t old_capacity = capacity();\n+\n+  \/\/ Update the usage history with the current value\n+  _used_history.add(current_used);\n+\n+  log_debug(gc, tlab)(\"TLAB usage update: used %zuM -> %zuM, capacity: %zuM -> %zuM\",\n+                      old_used \/ M,\n+                      used() \/ M,\n+                      old_capacity \/ M,\n+                      capacity() \/ M);\n+  }\n+\n+size_t ZTLABUsage::used() const {\n+  return _used_history.last();\n+}\n+\n+size_t ZTLABUsage::capacity() const {\n+  return _used_history.davg();\n+}\n","filename":"src\/hotspot\/share\/gc\/z\/zTLABUsage.cpp","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZTLABUSAGE_HPP\n+#define SHARE_GC_Z_ZTLABUSAGE_HPP\n+\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/numberSeq.hpp\"\n+\n+\/\/ ZGC is retiring TLABs concurrently with the application running when\n+\/\/ processing the stack watermarks. For the common TLAB heuristic to work we\n+\/\/ need to return consistent TLAB usage information when a TLAB is retired.\n+\/\/ We snapshot the TLAB usage in the mark start pause for the young generation\n+\/\/ and use this information until the next garbage collection cycle.\n+\/\/\n+\/\/ ZGC does not have set generation sizes unlike most other GCs and because of\n+\/\/ this there is no fixed TLAB capacity. For the common TLAB sizing heuristic\n+\/\/ to work properly ZGC estimates the current capacity by using a weighted\n+\/\/ average of the last 10 used values.\n+\n+class ZTLABUsage {\n+private:\n+  volatile size_t _used;\n+  TruncatedSeq    _used_history;\n+\n+public:\n+  ZTLABUsage();\n+\n+  void add(size_t size);\n+  void reset();\n+\n+  size_t used() const;\n+  size_t capacity() const;\n+};\n+\n+#endif \/\/ SHARE_GC_Z_ZTLABUSAGE_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zTLABUsage.hpp","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -119,0 +119,3 @@\n+serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorInterpreterObjectTest.java                8356372 generic-all\n+serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorStatObjectCorrectnessTest.java\t          8356372 generic-all\n+\n","filename":"test\/hotspot\/jtreg\/ProblemList-zgc.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}