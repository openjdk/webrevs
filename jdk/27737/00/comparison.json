{"files":[{"patch":"@@ -3835,1 +3835,1 @@\n-                    new FunctionalReturnContext(checkContext).compatible(resType, returnType,\n+                    new FunctionalReturnContext(checkContext).compatible(types.capture(resType), returnType,\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8369517\n+ * @summary Compilation mismatch for equivalent lambda and method reference\n+ * @compile\/fail\/ref=ResultTypeNotBeingCapturedTest.out -XDrawDiagnostics ResultTypeNotBeingCapturedTest.java\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+class ResultTypeNotBeingCapturedTest {\n+    interface X<T> {\n+        X<T> self();\n+    }\n+\n+    static X<?> makeX() {return null;}\n+\n+    static <R> X<R> create(Supplier<? extends R> supplier) {return null;}\n+\n+    static X<X<?>> methodRef() {\n+        var s = (String)create(Main::makeX);\n+    }\n+\n+    static X<X<?>> lambda() {\n+        var s = (String)create(() -> makeX());\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/ResultTypeNotBeingCapturedTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+ResultTypeNotBeingCapturedTest.java:43:32: compiler.err.cant.resolve.location: kindname.variable, Main, , , (compiler.misc.location: kindname.class, ResultTypeNotBeingCapturedTest, null)\n+ResultTypeNotBeingCapturedTest.java:47:31: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: ResultTypeNotBeingCapturedTest.X<ResultTypeNotBeingCapturedTest.X<compiler.misc.type.captureof: 1, ?>>, java.lang.String)\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/ResultTypeNotBeingCapturedTest.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}