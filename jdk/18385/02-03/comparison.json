{"files":[{"patch":"@@ -63,1 +63,1 @@\n-    private final boolean ignoreTrailingGarbage;\n+    private final boolean ignoreExtraBytes;\n@@ -78,1 +78,1 @@\n-     * allows concatenated compressed streams and ignores trailing garbage.\n+     * allows concatenated compressed streams and ignores extra bytes.\n@@ -95,1 +95,1 @@\n-     * allows concatenated compressed streams and ignores trailing garbage.\n+     * allows concatenated compressed streams and ignores extra bytes.\n@@ -110,1 +110,1 @@\n-     * support for concatenated streams, and tolerance for traliling garbage.\n+     * support for concatenated streams, and tolerance for extra bytes.\n@@ -118,1 +118,1 @@\n-     * frame encountered, and any additional bytes are considered \"trailing garbage\".\n+     * frame encountered, and any additional bytes are considered extraneous.\n@@ -121,4 +121,4 @@\n-     * The {@code ignoreTrailingGarbage} flag controls the behavior when \"trailing garbage\"\n-     * appears, i.e., any data after the GZIP trailer frame (if {@code allowConcatenation} is\n-     * false), or any data other than a valid GZIP header frame after a GZIP trailer frame\n-     * (if {@code allowConcatenation} is true). When {@code ignoreTrailingGarbage} is true,\n+     * The {@code ignoreExtraBytes} flag controls the behavior when extraneous data appears,\n+     * i.e., when any data follows the GZIP trailer frame (if {@code allowConcatenation} is\n+     * false), or when any data other than a valid GZIP header frame follows a GZIP trailer\n+     * frame (if {@code allowConcatenation} is true). When {@code ignoreExtraBytes} is true,\n@@ -126,1 +126,1 @@\n-     * data, are simply discarded, and EOF is returned; when {@code ignoreTrailingGarbage} is\n+     * data, are simply discarded, and EOF is returned; when {@code ignoreExtraBytes} is\n@@ -133,2 +133,2 @@\n-     * {@code allowConcatenation} and {@code ignoreTrailingGarbage} to true. However,\n-     * enabling {@code ignoreTrailingGarbage} is discouraged because of its imprecision in\n+     * {@code allowConcatenation} and {@code ignoreExtraBytes} to true. However,\n+     * enabling {@code ignoreExtraBytes} is discouraged because of its imprecision in\n@@ -142,2 +142,2 @@\n-     * @param ignoreTrailingGarbage true to tolerate and ignore trailing garbage, false to\n-     *                             throw {@link IOException} if trailing garbage is encountered\n+     * @param ignoreExtraBytes true to tolerate and ignore extra bytes, false to throw\n+     *                             {@link IOException} if any extra bytes are encountered\n@@ -152,1 +152,1 @@\n-            boolean allowConcatenation, boolean ignoreTrailingGarbage) throws IOException {\n+            boolean allowConcatenation, boolean ignoreExtraBytes) throws IOException {\n@@ -156,1 +156,1 @@\n-        this.ignoreTrailingGarbage = ignoreTrailingGarbage;\n+        this.ignoreExtraBytes = ignoreExtraBytes;\n@@ -312,2 +312,2 @@\n-        \/\/ Handle concatenation and\/or trailing garbage\n-        if (allowConcatenation && ignoreTrailingGarbage) {  \/\/ i.e., the legacy behavior\n+        \/\/ Handle concatenation and\/or extra bytes\n+        if (allowConcatenation && ignoreExtraBytes) {       \/\/ i.e., the legacy behavior\n@@ -326,1 +326,1 @@\n-            \/\/ There is more data. If we are not allowing concatenation, then we have trailing garbage\n+            \/\/ There is more data; if we are not allowing concatenation, then there are extra bytes\n@@ -328,2 +328,2 @@\n-                if (!ignoreTrailingGarbage)\n-                    throw new ZipException(\"Trailing garbage after GZIP trailer\");\n+                if (!ignoreExtraBytes)\n+                    throw new ZipException(\"Extra bytes after GZIP trailer\");\n@@ -333,1 +333,1 @@\n-            \/\/ We are allowing concatenation and not ignoring trailing garbage; read the next header\n+            \/\/ We are allowing concatenation and not ignoring extra bytes; read the next header\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPInputStream.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private boolean allowTrailingGarbage;\n+    private boolean ignoreExtraBytes;\n@@ -67,1 +67,1 @@\n-        this.allowTrailingGarbage = garbage;\n+        this.ignoreExtraBytes = garbage;\n@@ -94,1 +94,1 @@\n-            testDecomp(input, output, !allowTrailingGarbage ? IOException.class : null);\n+            testDecomp(input, output, !ignoreExtraBytes ? IOException.class : null);\n@@ -100,1 +100,1 @@\n-        testDecomp(input, output, !allowTrailingGarbage ? IOException.class : null);\n+        testDecomp(input, output, !ignoreExtraBytes ? IOException.class : null);\n@@ -105,1 +105,1 @@\n-        testDecomp(input, output, allowConcatenation || !allowTrailingGarbage ? IOException.class : null);\n+        testDecomp(input, output, allowConcatenation || !ignoreExtraBytes ? IOException.class : null);\n@@ -110,1 +110,1 @@\n-        testDecomp(input, output, !allowConcatenation && !allowTrailingGarbage ? ZipException.class : null);\n+        testDecomp(input, output, !allowConcatenation && !ignoreExtraBytes ? ZipException.class : null);\n@@ -115,1 +115,1 @@\n-        testDecomp(input, output, !allowConcatenation && !allowTrailingGarbage ? ZipException.class : null);\n+        testDecomp(input, output, !allowConcatenation && !ignoreExtraBytes ? ZipException.class : null);\n@@ -120,1 +120,1 @@\n-        testDecomp(input, output, !allowTrailingGarbage ? IOException.class : null);\n+        testDecomp(input, output, !ignoreExtraBytes ? IOException.class : null);\n@@ -186,1 +186,1 @@\n-        return new GZIPInputStream(in, bufsize, allowConcatenation, allowTrailingGarbage).readAllBytes();\n+        return new GZIPInputStream(in, bufsize, allowConcatenation, ignoreExtraBytes).readAllBytes();\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZIPInputStreamConcat.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}