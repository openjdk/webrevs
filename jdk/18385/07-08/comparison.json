{"files":[{"patch":"@@ -40,1 +40,1 @@\n- * The GZIP compressed data format is self-delimiting, i.e., it includes an explicit trailer\n+ * The GZIP compressed data format is self-delimiting, i.e., it includes an explicit GZIP trailer\n@@ -43,3 +43,5 @@\n- * some GZIP compression tools will concatenate multiple compressed data streams together.\n- * This class includes configurable support for decompressing multiple concatenated compressed\n- * data streams as a single uncompressed data stream.\n+ * some GZIP compression tools function by partitioning the input, compressing each parttion\n+ * separately, and then concatenating the resulting compressed data streams. To support this kind\n+ * of input, after reading a GZIP trailer frame this class will attempt to read and decode a new\n+ * GZIP header frame. If succesful, it will proceed to decompress the new GZIP stream, otherwise,\n+ * it will return EOF. In the latter case, the number of additional bytes that were read is unspecified.\n@@ -63,2 +65,0 @@\n-    private final boolean allowConcatenation;\n-\n@@ -77,3 +77,1 @@\n-     * Creates a new input stream with the specified buffer size that supports decoding\n-     * concatenated GZIP streams.\n-     *\n+     * Creates a new input stream with the specified buffer size.\n@@ -90,61 +88,0 @@\n-        this(in, size, true);\n-    }\n-\n-    \/**\n-     * Creates a new input stream with the default buffer size that supports decoding\n-     * concatenated GZIP streams.\n-     *\n-     * @param in the input stream\n-     *\n-     * @throws    ZipException if a GZIP format error has occurred or the\n-     *                         compression method used is unsupported\n-     * @throws    NullPointerException if {@code in} is null\n-     * @throws    IOException if an I\/O error has occurred\n-     *\/\n-    public GZIPInputStream(InputStream in) throws IOException {\n-        this(in, 512, true);\n-    }\n-\n-    \/**\n-     * Creates a new input stream with the specified buffer size that optionally\n-     * supports decoding concatenated GZIP streams.\n-     *\n-     * <p>\n-     * When {@code allowConcatenation} is false, decompression stops after the end of\n-     * the first compressed data stream (i.e., after encountering a GZIP trailer frame),\n-     * and the presence of any additional bytes in the input stream will cause an\n-     * {@link IOException} to be thrown.\n-     *\n-     * <p>\n-     * When {@code allowConcatenation} is true, this class will attempt to decode any data that\n-     * follows a GZIP trailer frame as the GZIP header frame of a new compressed data stream and,\n-     * if successful, proceed to decompress it. As a result, arbitrarily many consecutive compressed\n-     * data streams in the underlying input will be read back as a single uncompressed stream.\n-     * If data following a GZIP trailer frame is not a valid GZIP header frame, an {@link IOException}\n-     * is thrown.\n-     *\n-     * <p>\n-     * In either scenario, every byte of the underlying input stream must be part of a complete and valid\n-     * compressed data stream or else an {@link IOException} is guaranteed to be thrown; extraneous\n-     * trailing data is not allowed.\n-     *\n-     * @apiNote The original behavior of this class was to always allow concatenation, but leniently:\n-     * if a GZIP header frame following a GZIP trailer frame was invalid, or reading it generated an\n-     * {@link IOException}, then the extra bytes read were simply discarded and EOF was declared.\n-     * This meant it was indeterminate how many additional bytes of the underlying input stream (if any)\n-     * were read beyond the GZIP trailer frame, and whether reading them was stopped due to EOF, an\n-     * invalid GZIP header frame, or an {@link IOException} from the underlying input stream. As a result,\n-     * {@link IOException}s and\/or data corruption in the underlying input stream could go undetected,\n-     * leading to incorrect results such as truncated data.\n-     *\n-     * @param in the input stream\n-     * @param size the input buffer size\n-     * @param allowConcatenation true to support decoding concatenated GZIP streams\n-     *\n-     * @throws    ZipException if a GZIP format error has occurred or the\n-     *                         compression method used is unsupported\n-     * @throws    NullPointerException if {@code in} is null\n-     * @throws    IOException if an I\/O error has occurred\n-     * @since     24\n-     *\/\n-    public GZIPInputStream(InputStream in, int size, boolean allowConcatenation) throws IOException {\n@@ -152,1 +89,0 @@\n-        this.allowConcatenation = allowConcatenation;\n@@ -155,1 +91,1 @@\n-            readHeader(in, -1);\n+            readHeader(in);\n@@ -177,0 +113,13 @@\n+    \/**\n+     * Creates a new input stream with a default buffer size.\n+     * @param in the input stream\n+     *\n+     * @throws    ZipException if a GZIP format error has occurred or the\n+     *                         compression method used is unsupported\n+     * @throws    NullPointerException if {@code in} is null\n+     * @throws    IOException if an I\/O error has occurred\n+     *\/\n+    public GZIPInputStream(InputStream in) throws IOException {\n+        this(in, 512);\n+    }\n+\n@@ -252,3 +201,1 @@\n-     * of this member header. Use the given value as the first byte\n-     * if not equal to -1 (and include it in the returned byte count).\n-     * Throws EOFException if there's not enough input data.\n+     * of this member header.\n@@ -256,1 +203,1 @@\n-    private int readHeader(InputStream this_in, int firstByte) throws IOException {\n+    private int readHeader(InputStream this_in) throws IOException {\n@@ -260,4 +207,1 @@\n-        int byte1 = firstByte != -1 ? firstByte : readUByte(in);\n-        int byte2 = readUByte(in);\n-        int magic = (byte2 << 8) | byte1;\n-        if (magic != GZIP_MAGIC) {\n+        if (readUShort(in) != GZIP_MAGIC) {\n@@ -326,16 +270,7 @@\n-        \/\/ Keep track of how many bytes of buffered data we may have read\n-        int m = 8;                                          \/\/ this.trailer\n-\n-        \/\/ If there is no more data, the input has terminated at a proper GZIP boundary\n-        int nextByte = in.read();\n-        if (nextByte == -1)\n-            return true;\n-\n-        \/\/ There is more data; verify that we are allowing concatenation\n-        if (!allowConcatenation)\n-            throw new ZipException(\"Extra bytes after GZIP trailer\");\n-\n-        \/\/ Read in the next header\n-        m += readHeader(in, nextByte);                  \/\/ next.header\n-\n-        \/\/ Pass along any remaining buffered data to the new inflater\n+        \/\/ try concatenated case\n+        int m = 8;                  \/\/ this.trailer\n+        try {\n+            m += readHeader(in);    \/\/ next.header\n+        } catch (IOException ze) {\n+            return true;  \/\/ ignore any malformed, do nothing\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPInputStream.java","additions":31,"deletions":96,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Test configurable support for concatenated gzip streams\n+ * @summary Test support for concatenated gzip streams\n@@ -43,1 +43,0 @@\n-    private boolean allowConcatenation;\n@@ -50,4 +49,2 @@\n-        for (boolean allowConcatenation : new boolean[] { false, true }) {\n-            for (int size = 1; size < 1024; size += random.nextInt(32) + 1) {\n-                scenarios.add(List.of(randomData(0, 100), size, allowConcatenation));\n-            }\n+        for (int size = 1; size < 1024; size += random.nextInt(32) + 1) {\n+            scenarios.add(List.of(randomData(0, 100), size));\n@@ -60,1 +57,1 @@\n-    public void testScenario(byte[] uncompressed, int size, boolean allowConcatenation) throws IOException {\n+    public void testScenario(byte[] uncompressed, int size) throws IOException {\n@@ -62,1 +59,0 @@\n-        this.allowConcatenation = allowConcatenation;\n@@ -89,1 +85,1 @@\n-            testDecomp(input, output, IOException.class);\n+            testDecomp(input, output, null);\n@@ -95,1 +91,1 @@\n-        testDecomp(input, output, IOException.class);\n+        testDecomp(input, output, null);\n@@ -104,2 +100,2 @@\n-        output = allowConcatenation ? concat(uncompressed, uncompressed) : uncompressed;\n-        testDecomp(input, output, !allowConcatenation ? ZipException.class : null);\n+        output = concat(uncompressed, uncompressed);\n+        testDecomp(input, output, null);\n@@ -109,2 +105,2 @@\n-        output = allowConcatenation ? concat(uncompressed, uncompressed, uncompressed) : uncompressed;\n-        testDecomp(input, output, !allowConcatenation ? ZipException.class : null);\n+        output = concat(uncompressed, uncompressed, uncompressed);\n+        testDecomp(input, output, null);\n@@ -114,2 +110,2 @@\n-        output = allowConcatenation ? concat(uncompressed, uncompressed, uncompressed) : uncompressed;\n-        testDecomp(input, output, IOException.class);\n+        output = concat(uncompressed, uncompressed, uncompressed);\n+        testDecomp(input, output, null);\n@@ -181,1 +177,1 @@\n-        return new GZIPInputStream(in, bufsize, allowConcatenation).readAllBytes();\n+        return new GZIPInputStream(in, bufsize).readAllBytes();\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZIPInputStreamConcat.java","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    public static Stream<String[]> testScenarios() throws IOException {\n+    public static Stream<String[]> gzipScenarios() throws IOException {\n@@ -47,0 +47,1 @@\n+            # To regenerate the hex data below:\n@@ -80,0 +81,1 @@\n+            # To regenerate the hex data below:\n@@ -96,0 +98,1 @@\n+            # To regenerate the hex data below:\n@@ -115,1 +118,1 @@\n-    @MethodSource(\"testScenarios\")\n+    @MethodSource(\"gzipScenarios\")\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZIPInputStreamGzipCommand.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}