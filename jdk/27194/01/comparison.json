{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -30,0 +31,1 @@\n+import java.security.PEMDecoder;\n@@ -38,2 +40,0 @@\n-import java.security.cert.CertificateFactory;\n-import java.security.cert.CRL;\n@@ -43,1 +43,0 @@\n-import java.io.ByteArrayInputStream;\n@@ -48,0 +47,2 @@\n+    private static final PEMDecoder pemDecoder = PEMDecoder.of();\n+\n@@ -95,1 +96,1 @@\n-    private static X509Certificate getTrustedCertificate() throws Exception {\n+    private static X509Certificate getTrustedCertificate() {\n@@ -107,3 +108,1 @@\n-        CertificateFactory certFactory = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream bytes = new ByteArrayInputStream(sCert.getBytes());\n-        return (X509Certificate)certFactory.generateCertificate(bytes);\n+        return pemDecoder.decode(sCert, X509Certificate.class);\n@@ -112,1 +111,1 @@\n-    private static X509Certificate getUserCertificate1() throws Exception {\n+    private static X509Certificate getUserCertificate1() {\n@@ -126,3 +125,1 @@\n-        CertificateFactory certFactory = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream bytes = new ByteArrayInputStream(sCert.getBytes());\n-        return (X509Certificate)certFactory.generateCertificate(bytes);\n+        return pemDecoder.decode(sCert, X509Certificate.class);\n@@ -131,1 +128,1 @@\n-    private static X509Certificate getUserCertificate2() throws Exception {\n+    private static X509Certificate getUserCertificate2() {\n@@ -143,3 +140,1 @@\n-        CertificateFactory certFactory = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream bytes = new ByteArrayInputStream(sCert.getBytes());\n-        return (X509Certificate)certFactory.generateCertificate(bytes);\n+        return pemDecoder.decode(sCert, X509Certificate.class);\n","filename":"test\/jdk\/java\/security\/cert\/CertPathBuilder\/NoExtensions.java","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+ * @enablePreview\n@@ -39,1 +40,0 @@\n- * @author Xuelei Fan\n@@ -42,3 +42,2 @@\n-import java.io.*;\n-import java.net.SocketException;\n-import java.util.*;\n+import java.security.DEREncodable;\n+import java.security.PEMDecoder;\n@@ -46,2 +45,16 @@\n-import java.security.cert.*;\n-import java.security.cert.CertPathValidatorException.BasicReason;\n+import java.security.cert.CertPathBuilder;\n+import java.security.cert.CertStore;\n+import java.security.cert.Certificate;\n+import java.security.cert.CollectionCertStoreParameters;\n+import java.security.cert.PKIXBuilderParameters;\n+import java.security.cert.PKIXCertPathBuilderResult;\n+import java.security.cert.TrustAnchor;\n+import java.security.cert.X509CRL;\n+import java.security.cert.X509CertSelector;\n+import java.security.cert.X509Certificate;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n@@ -186,4 +199,1 @@\n-    private static Set<TrustAnchor> generateTrustAnchors()\n-            throws CertificateException {\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+    private static final PEMDecoder pemDecoder = PEMDecoder.of();\n@@ -191,3 +201,2 @@\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+    private static Set<TrustAnchor> generateTrustAnchors() {\n+        X509Certificate selfSignedCert = pemDecoder.decode(selfSignedCertStr, X509Certificate.class);\n@@ -197,1 +206,1 @@\n-            new TrustAnchor((X509Certificate)selfSignedCert, null);\n+            new TrustAnchor(selfSignedCert, null);\n@@ -203,4 +212,0 @@\n-        Collection entries = new HashSet();\n-\n-        \/\/ generate certificate from certificate string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n@@ -208,1 +213,1 @@\n-        ByteArrayInputStream is;\n+        Collection<DEREncodable> entries = new HashSet<>();\n@@ -210,2 +215,1 @@\n-        is = new ByteArrayInputStream(targetCertStr.getBytes());\n-        Certificate cert = cf.generateCertificate(is);\n+        DEREncodable cert = pemDecoder.decode(targetCertStr, X509Certificate.class);\n@@ -214,2 +218,1 @@\n-        is = new ByteArrayInputStream(subCaCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n+        cert = pemDecoder.decode(subCaCertStr, X509Certificate.class);\n@@ -218,2 +221,1 @@\n-        is = new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n+        cert = pemDecoder.decode(selfSignedCertStr, X509Certificate.class);\n@@ -222,2 +224,1 @@\n-        is = new ByteArrayInputStream(topCrlIssuerCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n+        cert = pemDecoder.decode(topCrlIssuerCertStr, X509Certificate.class);\n@@ -226,2 +227,1 @@\n-        is = new ByteArrayInputStream(subCrlIssuerCertStr.getBytes());\n-        cert = cf.generateCertificate(is);\n+        cert = pemDecoder.decode(subCrlIssuerCertStr, X509Certificate.class);\n@@ -231,3 +231,2 @@\n-        is = new ByteArrayInputStream(topCrlStr.getBytes());\n-        Collection mixes = cf.generateCRLs(is);\n-        entries.addAll(mixes);\n+        DEREncodable mixes = pemDecoder.decode(topCrlStr, X509CRL.class);\n+        entries.add(mixes);\n@@ -235,3 +234,2 @@\n-        is = new ByteArrayInputStream(subCrlStr.getBytes());\n-        mixes = cf.generateCRLs(is);\n-        entries.addAll(mixes);\n+        mixes = pemDecoder.decode(subCrlStr, X509CRL.class);\n+        entries.add(mixes);\n@@ -240,1 +238,1 @@\n-                            new CollectionCertStoreParameters(entries));\n+                new CollectionCertStoreParameters(entries));\n@@ -248,2 +246,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream is = null;\n+        String cert;\n@@ -251,1 +248,1 @@\n-            is = new ByteArrayInputStream(subCaCertStr.getBytes());\n+            cert = subCaCertStr;\n@@ -253,1 +250,1 @@\n-            is = new ByteArrayInputStream(subCrlIssuerCertStr.getBytes());\n+            cert = subCrlIssuerCertStr;\n@@ -255,1 +252,1 @@\n-            is = new ByteArrayInputStream(targetCertStr.getBytes());\n+            cert = targetCertStr;\n@@ -258,1 +255,1 @@\n-        X509Certificate target = (X509Certificate)cf.generateCertificate(is);\n+        X509Certificate target = pemDecoder.decode(cert, X509Certificate.class);\n@@ -272,3 +269,1 @@\n-    private static boolean match(String name, Certificate cert)\n-                throws Exception {\n-        X509CertSelector selector = new X509CertSelector();\n+    private static boolean match(String name, Certificate cert) {\n@@ -277,2 +272,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        ByteArrayInputStream is = null;\n+        String newCert;\n@@ -280,1 +274,1 @@\n-            is = new ByteArrayInputStream(subCaCertStr.getBytes());\n+            newCert = subCaCertStr;\n@@ -282,1 +276,1 @@\n-            is = new ByteArrayInputStream(subCrlIssuerCertStr.getBytes());\n+            newCert = subCrlIssuerCertStr;\n@@ -284,1 +278,1 @@\n-            is = new ByteArrayInputStream(targetCertStr.getBytes());\n+            newCert = targetCertStr;\n@@ -286,1 +280,1 @@\n-        X509Certificate target = (X509Certificate)cf.generateCertificate(is);\n+        X509Certificate target = pemDecoder.decode(newCert, X509Certificate.class);\n","filename":"test\/jdk\/java\/security\/cert\/CertPathBuilder\/selfIssued\/StatusLoopDependency.java","additions":46,"deletions":52,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+ * @enablePreview\n@@ -39,3 +40,2 @@\n-import java.io.*;\n-import java.net.SocketException;\n-import java.util.*;\n+import java.security.DEREncodable;\n+import java.security.PEMDecoder;\n@@ -43,1 +43,3 @@\n-import java.security.cert.*;\n+import java.security.cert.CertPath;\n+import java.security.cert.CertPathValidator;\n+import java.security.cert.CertPathValidatorException;\n@@ -45,0 +47,16 @@\n+import java.security.cert.CertStore;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CollectionCertStoreParameters;\n+import java.security.cert.PKIXParameters;\n+import java.security.cert.TrustAnchor;\n+import java.security.cert.X509CRL;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n@@ -152,0 +170,2 @@\n+    private static final PEMDecoder pemDecoder = PEMDecoder.of();\n+\n@@ -157,10 +177,3 @@\n-        ByteArrayInputStream is;\n-\n-        is = new ByteArrayInputStream(targetCertStr.getBytes());\n-        Certificate targetCert = cf.generateCertificate(is);\n-\n-        is = new ByteArrayInputStream(subCaCertStr.getBytes());\n-        Certificate subCaCert = cf.generateCertificate(is);\n-\n-        is = new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        Certificate targetCert = pemDecoder.decode(targetCertStr, X509Certificate.class);\n+        Certificate subCaCert =  pemDecoder.decode(subCaCertStr, X509Certificate.class);\n+        Certificate selfSignedCert = pemDecoder.decode(selfSignedCertStr, X509Certificate.class);\n@@ -169,2 +182,1 @@\n-        List<Certificate> list = Arrays.asList(new Certificate[] {\n-                        targetCert, subCaCert, selfSignedCert});\n+        List<Certificate> list = Arrays.asList(targetCert, subCaCert, selfSignedCert);\n@@ -178,1 +190,0 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n@@ -180,3 +191,1 @@\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        final X509Certificate selfSignedCert = pemDecoder.decode(selfSignedCertStr, X509Certificate.class);\n@@ -186,1 +195,1 @@\n-            new TrustAnchor((X509Certificate)selfSignedCert, null);\n+            new TrustAnchor(selfSignedCert, null);\n@@ -192,1 +201,1 @@\n-        Collection entries = new HashSet();\n+        Collection<DEREncodable> entries = new HashSet<>();\n@@ -195,1 +204,0 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n@@ -197,4 +205,2 @@\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(topCrlStr.getBytes());\n-        Collection mixes = cf.generateCRLs(is);\n-        entries.addAll(mixes);\n+        DEREncodable mixes = pemDecoder.decode(topCrlStr, X509CRL.class);\n+        entries.add(mixes);\n@@ -202,3 +208,2 @@\n-        is = new ByteArrayInputStream(subCrlStr.getBytes());\n-        mixes = cf.generateCRLs(is);\n-        entries.addAll(mixes);\n+        mixes = pemDecoder.decode(subCrlStr, X509CRL.class);\n+        entries.add(mixes);\n@@ -207,3 +212,2 @@\n-        is = new ByteArrayInputStream(topCrlIssuerCertStr.getBytes());\n-        mixes = cf.generateCertificates(is);\n-        entries.addAll(mixes);\n+        mixes = pemDecoder.decode(topCrlIssuerCertStr, X509Certificate.class);\n+        entries.add(mixes);\n@@ -211,3 +215,2 @@\n-        is = new ByteArrayInputStream(subCrlIssuerCertStr.getBytes());\n-        mixes = cf.generateCertificates(is);\n-        entries.addAll(mixes);\n+        mixes = pemDecoder.decode(subCrlIssuerCertStr, X509Certificate.class);\n+        entries.add(mixes);\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/indirectCRL\/CircularCRLTwoLevel.java","additions":40,"deletions":37,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+ * @enablePreview\n@@ -39,3 +40,2 @@\n-import java.io.*;\n-import java.net.SocketException;\n-import java.util.*;\n+import java.security.DEREncodable;\n+import java.security.PEMDecoder;\n@@ -43,1 +43,3 @@\n-import java.security.cert.*;\n+import java.security.cert.CertPath;\n+import java.security.cert.CertPathValidator;\n+import java.security.cert.CertPathValidatorException;\n@@ -45,0 +47,16 @@\n+import java.security.cert.CertStore;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.CollectionCertStoreParameters;\n+import java.security.cert.PKIXParameters;\n+import java.security.cert.TrustAnchor;\n+import java.security.cert.X509CRL;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n@@ -153,0 +171,2 @@\n+    private static final PEMDecoder pemDecoder = PEMDecoder.of();\n+\n@@ -158,10 +178,3 @@\n-        ByteArrayInputStream is;\n-\n-        is = new ByteArrayInputStream(targetCertStr.getBytes());\n-        Certificate targetCert = cf.generateCertificate(is);\n-\n-        is = new ByteArrayInputStream(subCaCertStr.getBytes());\n-        Certificate subCaCert = cf.generateCertificate(is);\n-\n-        is = new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        Certificate targetCert = pemDecoder.decode(targetCertStr, X509Certificate.class);\n+        Certificate subCaCert = pemDecoder.decode(subCaCertStr, X509Certificate.class);\n+        Certificate selfSignedCert = pemDecoder.decode(selfSignedCertStr, X509Certificate.class);\n@@ -170,2 +183,1 @@\n-        List<Certificate> list = Arrays.asList(new Certificate[] {\n-                        targetCert, subCaCert, selfSignedCert});\n+        List<Certificate> list = Arrays.asList(targetCert, subCaCert, selfSignedCert);\n@@ -179,5 +191,1 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        final X509Certificate selfSignedCert = pemDecoder.decode(selfSignedCertStr, X509Certificate.class);\n@@ -187,1 +195,1 @@\n-            new TrustAnchor((X509Certificate)selfSignedCert, null);\n+            new TrustAnchor(selfSignedCert, null);\n@@ -193,1 +201,1 @@\n-        Collection entries = new HashSet();\n+        Collection<DEREncodable> entries = new HashSet<>();\n@@ -198,4 +206,2 @@\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(topCrlStr.getBytes());\n-        Collection mixes = cf.generateCRLs(is);\n-        entries.addAll(mixes);\n+        DEREncodable mixes = pemDecoder.decode(topCrlStr, X509CRL.class);\n+        entries.add(mixes);\n@@ -203,3 +209,2 @@\n-        is = new ByteArrayInputStream(subCrlStr.getBytes());\n-        mixes = cf.generateCRLs(is);\n-        entries.addAll(mixes);\n+        mixes = pemDecoder.decode(subCrlStr, X509CRL.class);\n+        entries.add(mixes);\n@@ -208,3 +213,2 @@\n-        is = new ByteArrayInputStream(topCrlIssuerCertStr.getBytes());\n-        mixes = cf.generateCertificates(is);\n-        entries.addAll(mixes);\n+        mixes = pemDecoder.decode(topCrlIssuerCertStr, X509Certificate.class);\n+        entries.add(mixes);\n@@ -212,3 +216,2 @@\n-        is = new ByteArrayInputStream(subCrlIssuerCertStr.getBytes());\n-        mixes = cf.generateCertificates(is);\n-        entries.addAll(mixes);\n+        mixes = pemDecoder.decode(subCrlIssuerCertStr, X509Certificate.class);\n+        entries.add(mixes);\n@@ -217,1 +220,1 @@\n-                            new CollectionCertStoreParameters(entries));\n+                new CollectionCertStoreParameters(entries));\n","filename":"test\/jdk\/java\/security\/cert\/CertPathValidator\/indirectCRL\/CircularCRLTwoLevelRevoked.java","additions":41,"deletions":38,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ * @enablePreview\n@@ -41,4 +42,17 @@\n-import java.net.*;\n-import java.util.*;\n-import java.io.*;\n-import javax.net.ssl.*;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.security.PEMDecoder;\n+import java.security.PEMEncoder;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SNIHostName;\n+import javax.net.ssl.SNIServerName;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManagerFactory;\n@@ -50,3 +64,1 @@\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n+import java.util.ArrayList;\n@@ -54,0 +66,1 @@\n+import java.util.List;\n@@ -77,16 +90,16 @@\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICkjCCAfugAwIBAgIBADANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTIwNDE3MTIwNjA3WhcNMzMwMzI4MTIwNjA3WjA7MQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwgZ8wDQYJ\\n\" +\n-        \"KoZIhvcNAQEBBQADgY0AMIGJAoGBANY+7Enp+1S566kLcKk+qe4Ki6BxaHGZ+v7r\\n\" +\n-        \"vLksx9IQZCbAEf4YLbrZhKzKD3SPIJXyxPFwknAknIh3Knk8mViOZks7T8L3GnJr\\n\" +\n-        \"TBaVvDyTzDJum\/QYiahfO2qpfN\/Oya2UILmqsBAeLyWpzbQsAyWBXfoUtkOUgnzK\\n\" +\n-        \"fk6QAKYrAgMBAAGjgaUwgaIwHQYDVR0OBBYEFEtmQi7jT1ijXOafPsfkrLwSVu9e\\n\" +\n-        \"MGMGA1UdIwRcMFqAFEtmQi7jT1ijXOafPsfkrLwSVu9eoT+kPTA7MQswCQYDVQQG\\n\" +\n-        \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n-        \"Y2WCAQAwDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEE\\n\" +\n-        \"BQADgYEAkKWxMc4+ODk5WwLXXweB8\/IKfVfrizNn0KLEgsZ6xNXFIXDpiPGAFcgl\\n\" +\n-        \"MzFO424JgyvUulsUc\/X16Cnuwwntkk6KUG7vEV7h4o9sAV7Cax3gfQE\/EZFb4ybn\\n\" +\n-        \"aBm1UsujMKd\/ovqbbbxJbmOWzCeo0QfIGleDEyh3NBBZ0i11Kiw=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n+            \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIICkjCCAfugAwIBAgIBADANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n+            \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n+            \"MTIwNDE3MTIwNjA3WhcNMzMwMzI4MTIwNjA3WjA7MQswCQYDVQQGEwJVUzENMAsG\\n\" +\n+            \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwgZ8wDQYJ\\n\" +\n+            \"KoZIhvcNAQEBBQADgY0AMIGJAoGBANY+7Enp+1S566kLcKk+qe4Ki6BxaHGZ+v7r\\n\" +\n+            \"vLksx9IQZCbAEf4YLbrZhKzKD3SPIJXyxPFwknAknIh3Knk8mViOZks7T8L3GnJr\\n\" +\n+            \"TBaVvDyTzDJum\/QYiahfO2qpfN\/Oya2UILmqsBAeLyWpzbQsAyWBXfoUtkOUgnzK\\n\" +\n+            \"fk6QAKYrAgMBAAGjgaUwgaIwHQYDVR0OBBYEFEtmQi7jT1ijXOafPsfkrLwSVu9e\\n\" +\n+            \"MGMGA1UdIwRcMFqAFEtmQi7jT1ijXOafPsfkrLwSVu9eoT+kPTA7MQswCQYDVQQG\\n\" +\n+            \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n+            \"Y2WCAQAwDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEE\\n\" +\n+            \"BQADgYEAkKWxMc4+ODk5WwLXXweB8\/IKfVfrizNn0KLEgsZ6xNXFIXDpiPGAFcgl\\n\" +\n+            \"MzFO424JgyvUulsUc\/X16Cnuwwntkk6KUG7vEV7h4o9sAV7Cax3gfQE\/EZFb4ybn\\n\" +\n+            \"aBm1UsujMKd\/ovqbbbxJbmOWzCeo0QfIGleDEyh3NBBZ0i11Kiw=\\n\" +\n+            \"-----END CERTIFICATE-----\";\n@@ -96,15 +109,15 @@\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICVTCCAb6gAwIBAgIBAjANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTIwNDE3MTIwNjA4WhcNMzIwMTAzMTIwNjA4WjBVMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxGDAWBgNV\\n\" +\n-        \"BAMTD3d3dy5leGFtcGxlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\\n\" +\n-        \"4zFp3PZNzsd3ZwG6FNNWO9eSN+UBymlf8oCwpKJM2tIinmMWvWIXnlx\/2UXIfSAq\\n\" +\n-        \"QEG3aXkAFyEiGGpQlBbqcfrESsHsiz2pnnm5dG2v\/eS0Bwz1jmcuNmwnh3UQw2Vl\\n\" +\n-        \"+BLk8ukdrLjiCT8jARiHExYf1Xg+wUqQ9y8NV26hdaUCAwEAAaNPME0wCwYDVR0P\\n\" +\n-        \"BAQDAgPoMB0GA1UdDgQWBBQwtx+gqzn2w4y82brXlp7tqBYEZDAfBgNVHSMEGDAW\\n\" +\n-        \"gBRLZkIu409Yo1zmnz7H5Ky8ElbvXjANBgkqhkiG9w0BAQQFAAOBgQAJWo8B6Ud+\\n\" +\n-        \"\/OU+UcZLihlfMX02OSlK2ZB7mfqpj2G3JT9yb0A+VbY3uuajmaYYIIxl3kXGz\/n8\\n\" +\n-        \"M2Q\/Ux\/MDxG+IFKHC26Kuj4dAQgzjq2pILVPTE2QnaQTNCsgVZtTaC47SG9FRSoC\\n\" +\n-        \"qvnIvn\/oTpKSqus76I1cR4joDtiV2OEuVw==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n+            \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIICVTCCAb6gAwIBAgIBAjANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n+            \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n+            \"MTIwNDE3MTIwNjA4WhcNMzIwMTAzMTIwNjA4WjBVMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n+            \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxGDAWBgNV\\n\" +\n+            \"BAMTD3d3dy5leGFtcGxlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\\n\" +\n+            \"4zFp3PZNzsd3ZwG6FNNWO9eSN+UBymlf8oCwpKJM2tIinmMWvWIXnlx\/2UXIfSAq\\n\" +\n+            \"QEG3aXkAFyEiGGpQlBbqcfrESsHsiz2pnnm5dG2v\/eS0Bwz1jmcuNmwnh3UQw2Vl\\n\" +\n+            \"+BLk8ukdrLjiCT8jARiHExYf1Xg+wUqQ9y8NV26hdaUCAwEAAaNPME0wCwYDVR0P\\n\" +\n+            \"BAQDAgPoMB0GA1UdDgQWBBQwtx+gqzn2w4y82brXlp7tqBYEZDAfBgNVHSMEGDAW\\n\" +\n+            \"gBRLZkIu409Yo1zmnz7H5Ky8ElbvXjANBgkqhkiG9w0BAQQFAAOBgQAJWo8B6Ud+\\n\" +\n+            \"\/OU+UcZLihlfMX02OSlK2ZB7mfqpj2G3JT9yb0A+VbY3uuajmaYYIIxl3kXGz\/n8\\n\" +\n+            \"M2Q\/Ux\/MDxG+IFKHC26Kuj4dAQgzjq2pILVPTE2QnaQTNCsgVZtTaC47SG9FRSoC\\n\" +\n+            \"qvnIvn\/oTpKSqus76I1cR4joDtiV2OEuVw==\\n\" +\n+            \"-----END CERTIFICATE-----\";\n@@ -114,14 +127,16 @@\n-        \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAOMxadz2Tc7Hd2cB\\n\" +\n-        \"uhTTVjvXkjflAcppX\/KAsKSiTNrSIp5jFr1iF55cf9lFyH0gKkBBt2l5ABchIhhq\\n\" +\n-        \"UJQW6nH6xErB7Is9qZ55uXRtr\/3ktAcM9Y5nLjZsJ4d1EMNlZfgS5PLpHay44gk\/\\n\" +\n-        \"IwEYhxMWH9V4PsFKkPcvDVduoXWlAgMBAAECgYAqX2nuIyXp3fvgA0twXOYlbRRB\\n\" +\n-        \"Rn3qAXM6qFPJsNeCrFR2k+aG1cev6nKR1FkLNTeMGnWZv06MAcr5IML8i7WXyG4C\\n\" +\n-        \"LY\/C0gedn94FDKFlln+bTENwQTGjn4lKysDA+IuNpasTeMCajbic+dPByhIdTOjZ\\n\" +\n-        \"iMCyxbLfpk40zQopVQJBAPyfGmkeHB3GjdbdgujWCGKb2UxBa4O8dy3O4l2yizTn\\n\" +\n-        \"uUqMGcwGY4ciNSVvZQ7jKo4vDmkSuYib4\/woPChaNfMCQQDmO0BQuSWYGNtSwV35\\n\" +\n-        \"lafZfX1dNCLKm1iNA6A12evXgvQiE9WT4mqionig0VZW16HtiY4\/BkHOcos\/K9Um\\n\" +\n-        \"ARQHAkA8mkaRtSF1my5nv1gqVz5Hua+VdZQ\/VDUbDiiL5cszc+ulkJqXsWirAG\/T\\n\" +\n-        \"fTe3LJQG7A7+8fkEZrF4yoY0AAA1AkEAotokezULj5N9iAL5SzL9wIzQYV4ggfny\\n\" +\n-        \"YATBjXXxKccakwQ+ndWZIiMUeoS4ssLialhTgucVI0fIkU2a\/r\/ifwJAc6e+5Pvh\\n\" +\n-        \"MghQj\/U788Od\/v6rgqz\/NGsduZ7uilCMcWiwA73OR2MHMH\/OIuoofuEPrfuV9isV\\n\" +\n-        \"xVXhgpKfP\/pdOA==\";\n+            \"-----BEGIN PRIVATE KEY-----\\n\" +\n+            \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAOMxadz2Tc7Hd2cB\\n\" +\n+            \"uhTTVjvXkjflAcppX\/KAsKSiTNrSIp5jFr1iF55cf9lFyH0gKkBBt2l5ABchIhhq\\n\" +\n+            \"UJQW6nH6xErB7Is9qZ55uXRtr\/3ktAcM9Y5nLjZsJ4d1EMNlZfgS5PLpHay44gk\/\\n\" +\n+            \"IwEYhxMWH9V4PsFKkPcvDVduoXWlAgMBAAECgYAqX2nuIyXp3fvgA0twXOYlbRRB\\n\" +\n+            \"Rn3qAXM6qFPJsNeCrFR2k+aG1cev6nKR1FkLNTeMGnWZv06MAcr5IML8i7WXyG4C\\n\" +\n+            \"LY\/C0gedn94FDKFlln+bTENwQTGjn4lKysDA+IuNpasTeMCajbic+dPByhIdTOjZ\\n\" +\n+            \"iMCyxbLfpk40zQopVQJBAPyfGmkeHB3GjdbdgujWCGKb2UxBa4O8dy3O4l2yizTn\\n\" +\n+            \"uUqMGcwGY4ciNSVvZQ7jKo4vDmkSuYib4\/woPChaNfMCQQDmO0BQuSWYGNtSwV35\\n\" +\n+            \"lafZfX1dNCLKm1iNA6A12evXgvQiE9WT4mqionig0VZW16HtiY4\/BkHOcos\/K9Um\\n\" +\n+            \"ARQHAkA8mkaRtSF1my5nv1gqVz5Hua+VdZQ\/VDUbDiiL5cszc+ulkJqXsWirAG\/T\\n\" +\n+            \"fTe3LJQG7A7+8fkEZrF4yoY0AAA1AkEAotokezULj5N9iAL5SzL9wIzQYV4ggfny\\n\" +\n+            \"YATBjXXxKccakwQ+ndWZIiMUeoS4ssLialhTgucVI0fIkU2a\/r\/ifwJAc6e+5Pvh\\n\" +\n+            \"MghQj\/U788Od\/v6rgqz\/NGsduZ7uilCMcWiwA73OR2MHMH\/OIuoofuEPrfuV9isV\\n\" +\n+            \"xVXhgpKfP\/pdOA==\\n\" +\n+            \"-----END PRIVATE KEY-----\";\n@@ -131,15 +146,15 @@\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICVTCCAb6gAwIBAgIBBDANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTIwNDE3MTIwNjA5WhcNMzIwMTAzMTIwNjA5WjBVMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxGDAWBgNV\\n\" +\n-        \"BAMTD3d3dy5leGFtcGxlLm5ldDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\\n\" +\n-        \"2VlzF1fvWYczDChrUeJiLJ1M\/dIShCaOTfYGiXfQGEZCAWTacUclwr+rVMnZ75\/c\\n\" +\n-        \"wwg5pNdXRijxMil8DBTS1gFcIFQhosLHvzIAe6ULlg\/xB+\/L6KBz+NTWfo\/2KF6t\\n\" +\n-        \"xatmcToNrCcwi7eUOfbzQje65Tizs56jJYem2m7Rk0ECAwEAAaNPME0wCwYDVR0P\\n\" +\n-        \"BAQDAgPoMB0GA1UdDgQWBBQT\/FR0cAWcZQ7h0X79KGki34OSQjAfBgNVHSMEGDAW\\n\" +\n-        \"gBRLZkIu409Yo1zmnz7H5Ky8ElbvXjANBgkqhkiG9w0BAQQFAAOBgQB67cPIT6fz\\n\" +\n-        \"6Ws8fBpYgW2ad4ci66i1WduBD9CpGFE+jRK2feRj6hvYBXocKj0AMWUFIEB2E3hA\\n\" +\n-        \"oIjxcf1GxIpHVl9DjlhxqXbA0Ktl7\/NGNRlDSLTizOTl3FB1mMTlOGvXDVmpcFhl\\n\" +\n-        \"HuoP1hYvhTsBwPx5igGNchuPtDIUzL2mXw==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n+            \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIICVTCCAb6gAwIBAgIBBDANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n+            \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n+            \"MTIwNDE3MTIwNjA5WhcNMzIwMTAzMTIwNjA5WjBVMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n+            \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxGDAWBgNV\\n\" +\n+            \"BAMTD3d3dy5leGFtcGxlLm5ldDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\\n\" +\n+            \"2VlzF1fvWYczDChrUeJiLJ1M\/dIShCaOTfYGiXfQGEZCAWTacUclwr+rVMnZ75\/c\\n\" +\n+            \"wwg5pNdXRijxMil8DBTS1gFcIFQhosLHvzIAe6ULlg\/xB+\/L6KBz+NTWfo\/2KF6t\\n\" +\n+            \"xatmcToNrCcwi7eUOfbzQje65Tizs56jJYem2m7Rk0ECAwEAAaNPME0wCwYDVR0P\\n\" +\n+            \"BAQDAgPoMB0GA1UdDgQWBBQT\/FR0cAWcZQ7h0X79KGki34OSQjAfBgNVHSMEGDAW\\n\" +\n+            \"gBRLZkIu409Yo1zmnz7H5Ky8ElbvXjANBgkqhkiG9w0BAQQFAAOBgQB67cPIT6fz\\n\" +\n+            \"6Ws8fBpYgW2ad4ci66i1WduBD9CpGFE+jRK2feRj6hvYBXocKj0AMWUFIEB2E3hA\\n\" +\n+            \"oIjxcf1GxIpHVl9DjlhxqXbA0Ktl7\/NGNRlDSLTizOTl3FB1mMTlOGvXDVmpcFhl\\n\" +\n+            \"HuoP1hYvhTsBwPx5igGNchuPtDIUzL2mXw==\\n\" +\n+            \"-----END CERTIFICATE-----\";\n@@ -148,14 +163,16 @@\n-        \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBANlZcxdX71mHMwwo\\n\" +\n-        \"a1HiYiydTP3SEoQmjk32Bol30BhGQgFk2nFHJcK\/q1TJ2e+f3MMIOaTXV0Yo8TIp\\n\" +\n-        \"fAwU0tYBXCBUIaLCx78yAHulC5YP8Qfvy+igc\/jU1n6P9ihercWrZnE6DawnMIu3\\n\" +\n-        \"lDn280I3uuU4s7OeoyWHptpu0ZNBAgMBAAECgYEAl19H26sfhD+32rDPxZCgBShs\\n\" +\n-        \"dZ33zVe45i0Bcn4iTLWpxKTDyf7eGps4rO2DvfKdYqt40ggzvSZIjUH9JcDe8GmG\\n\" +\n-        \"d3m0ILB7pg4jsFlpyeHpTO8grPLxA1G9s3o0DoFpz\/rooqgFfe\/DrRDmRoOSkgfV\\n\" +\n-        \"\/gseIbgJHRO\/Ctyvdh0CQQD6uFd0HxhH1jl\/JzvPzIH4LSnPcdEh9zsMEb6uzh75\\n\" +\n-        \"9qL+IHD5N2I\/pYZTKqDFIwhJf701+LKag55AX\/zrDt7rAkEA3e00AbnwanDMa6Wj\\n\" +\n-        \"+gFekUQveSVra38LiihzCkyVvQpFjbiF1rUhSNQ0dpU5\/hmrYF0C6H9VXAesfkUY\\n\" +\n-        \"WhpDgwJAYjgZOop77piDycZK7isFt32p5XSHIzFBVocVFlH1XKM8UyXOXDNQL\/Le\\n\" +\n-        \"XnJSrSf+NRzvuNcG0PVC56Ey6brXpQJAY4M4vcltt5zq3R5CQBmbGRJ1IyKXX3Vx\\n\" +\n-        \"bDslEqoyvri7ZYgnY5aG3UxiVgYmIf3KrgQnCLAIS6MZQumiuMxsFwJAK5pEG063\\n\" +\n-        \"9ngUof4fDMvZphqZjZR1zMKz\/V\/9ge0DWBINaqFgsgebNu+MyImsC8C6WKjGmV\/2\\n\" +\n-        \"f1MY0D7sC2vU\/Q==\";\n+            \"-----BEGIN PRIVATE KEY-----\\n\" +\n+            \"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBANlZcxdX71mHMwwo\\n\" +\n+            \"a1HiYiydTP3SEoQmjk32Bol30BhGQgFk2nFHJcK\/q1TJ2e+f3MMIOaTXV0Yo8TIp\\n\" +\n+            \"fAwU0tYBXCBUIaLCx78yAHulC5YP8Qfvy+igc\/jU1n6P9ihercWrZnE6DawnMIu3\\n\" +\n+            \"lDn280I3uuU4s7OeoyWHptpu0ZNBAgMBAAECgYEAl19H26sfhD+32rDPxZCgBShs\\n\" +\n+            \"dZ33zVe45i0Bcn4iTLWpxKTDyf7eGps4rO2DvfKdYqt40ggzvSZIjUH9JcDe8GmG\\n\" +\n+            \"d3m0ILB7pg4jsFlpyeHpTO8grPLxA1G9s3o0DoFpz\/rooqgFfe\/DrRDmRoOSkgfV\\n\" +\n+            \"\/gseIbgJHRO\/Ctyvdh0CQQD6uFd0HxhH1jl\/JzvPzIH4LSnPcdEh9zsMEb6uzh75\\n\" +\n+            \"9qL+IHD5N2I\/pYZTKqDFIwhJf701+LKag55AX\/zrDt7rAkEA3e00AbnwanDMa6Wj\\n\" +\n+            \"+gFekUQveSVra38LiihzCkyVvQpFjbiF1rUhSNQ0dpU5\/hmrYF0C6H9VXAesfkUY\\n\" +\n+            \"WhpDgwJAYjgZOop77piDycZK7isFt32p5XSHIzFBVocVFlH1XKM8UyXOXDNQL\/Le\\n\" +\n+            \"XnJSrSf+NRzvuNcG0PVC56Ey6brXpQJAY4M4vcltt5zq3R5CQBmbGRJ1IyKXX3Vx\\n\" +\n+            \"bDslEqoyvri7ZYgnY5aG3UxiVgYmIf3KrgQnCLAIS6MZQumiuMxsFwJAK5pEG063\\n\" +\n+            \"9ngUof4fDMvZphqZjZR1zMKz\/V\/9ge0DWBINaqFgsgebNu+MyImsC8C6WKjGmV\/2\\n\" +\n+            \"f1MY0D7sC2vU\/Q==\\n\" +\n+            \"-----END PRIVATE KEY-----\";\n@@ -165,15 +182,15 @@\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICVTCCAb6gAwIBAgIBAzANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTIwNDE3MTIwNjA5WhcNMzIwMTAzMTIwNjA5WjBVMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxGDAWBgNV\\n\" +\n-        \"BAMTD3d3dy5pbnZhbGlkLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\\n\" +\n-        \"q6MyQwzCr2nJ41l0frmHL0qULSyW51MhevBC+1W28i0LE\/efrmpwV3LdnlQEGFak\\n\" +\n-        \"DLDwtnff3iru8dSMcA7KdWVkivsE7ZTP+qFDaWBAy7XXiSsv6yZ2Nh4jJb0YcD28\\n\" +\n-        \"45zk2nAl5Az1\/PuoTi1vpQxzFZKuBm1HGgz3MEZvBvMCAwEAAaNPME0wCwYDVR0P\\n\" +\n-        \"BAQDAgPoMB0GA1UdDgQWBBRRMifrND015Nm8N6gV5X7cg1YjjjAfBgNVHSMEGDAW\\n\" +\n-        \"gBRLZkIu409Yo1zmnz7H5Ky8ElbvXjANBgkqhkiG9w0BAQQFAAOBgQBjkUO6Ri\/B\\n\" +\n-        \"uDC2gDMIyL5+NTe\/1dPPQYM4HhCNa\/KQYvU5lzCKO9Vpa+i+nyrUNNXUu8Tkyq4Y\\n\" +\n-        \"A+aGSm6+FT\/i9rFwkYUdorBtD3KfQiwTIWrVERXBkWI5iZNaVZhx0TFy4vUpf65d\\n\" +\n-        \"QtwkbHpC66fdKc2EdLXkuY9KkmtZZJJ7YA==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n+            \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIICVTCCAb6gAwIBAgIBAzANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n+            \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n+            \"MTIwNDE3MTIwNjA5WhcNMzIwMTAzMTIwNjA5WjBVMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n+            \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxGDAWBgNV\\n\" +\n+            \"BAMTD3d3dy5pbnZhbGlkLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\\n\" +\n+            \"q6MyQwzCr2nJ41l0frmHL0qULSyW51MhevBC+1W28i0LE\/efrmpwV3LdnlQEGFak\\n\" +\n+            \"DLDwtnff3iru8dSMcA7KdWVkivsE7ZTP+qFDaWBAy7XXiSsv6yZ2Nh4jJb0YcD28\\n\" +\n+            \"45zk2nAl5Az1\/PuoTi1vpQxzFZKuBm1HGgz3MEZvBvMCAwEAAaNPME0wCwYDVR0P\\n\" +\n+            \"BAQDAgPoMB0GA1UdDgQWBBRRMifrND015Nm8N6gV5X7cg1YjjjAfBgNVHSMEGDAW\\n\" +\n+            \"gBRLZkIu409Yo1zmnz7H5Ky8ElbvXjANBgkqhkiG9w0BAQQFAAOBgQBjkUO6Ri\/B\\n\" +\n+            \"uDC2gDMIyL5+NTe\/1dPPQYM4HhCNa\/KQYvU5lzCKO9Vpa+i+nyrUNNXUu8Tkyq4Y\\n\" +\n+            \"A+aGSm6+FT\/i9rFwkYUdorBtD3KfQiwTIWrVERXBkWI5iZNaVZhx0TFy4vUpf65d\\n\" +\n+            \"QtwkbHpC66fdKc2EdLXkuY9KkmtZZJJ7YA==\\n\" +\n+            \"-----END CERTIFICATE-----\";\n@@ -182,14 +199,16 @@\n-        \"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAKujMkMMwq9pyeNZ\\n\" +\n-        \"dH65hy9KlC0sludTIXrwQvtVtvItCxP3n65qcFdy3Z5UBBhWpAyw8LZ3394q7vHU\\n\" +\n-        \"jHAOynVlZIr7BO2Uz\/qhQ2lgQMu114krL+smdjYeIyW9GHA9vOOc5NpwJeQM9fz7\\n\" +\n-        \"qE4tb6UMcxWSrgZtRxoM9zBGbwbzAgMBAAECgYASJDK40Y12Wvki1Z6xkkyOnBRj\\n\" +\n-        \"XfYpRykfxGtgA2RN3qLwHlk7Zzaul46DIKA6LlYynTUkJDF+Ww1cdDnP0lBlwcmM\\n\" +\n-        \"iD0ck3zYyYBLhQHuVbkK3SYE+ANRhM0icvvqANP2at\/U4awQcPNEae\/KCiecLNu3\\n\" +\n-        \"CJGqyhPDdrEAqPuJGQJBAN46pQC6l3yrcSYE2s53jSmsm2HVVOFlFXjU6k\/RMTxG\\n\" +\n-        \"FfDJtGUAOQ37rPQ06ugr\/gjLAmmPp+FXozaBdA32D80CQQDFuGRgv3WYqbglIcRL\\n\" +\n-        \"JRs6xlj9w1F97s\/aiUenuwhIPNiUoRbV7mnNuZ\/sGF0svOVE7SazRjuFX6UqL9Y9\\n\" +\n-        \"HzG\/AkEA170pCI8cl4w8eUNHRB9trGKEKjMXhwVCFh7lJf2ZBcGodSzr8w2HVhrZ\\n\" +\n-        \"Ke7hiemDYffrbJ1oxmv05+o+x3r0lQJBAL6adVm2+FyFMFnLZXmzeb59O4jWY5bt\\n\" +\n-        \"Qz6\/HG6bpO5OidMuP99YCHMkQQDOs\/PO3Y5GuAoW6IY4n\/Y9S2B80+0CQBl1\/H9\/\\n\" +\n-        \"0n\/vrb6vW6Azds49tuS82RFAnOhtwTyBEajs08WF8rZQ3WD2RHJnH0+jjfL0anIp\\n\" +\n-        \"dQBSeNN7s7b6rRk=\";\n+            \"-----BEGIN PRIVATE KEY-----\\n\" +\n+            \"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAKujMkMMwq9pyeNZ\\n\" +\n+            \"dH65hy9KlC0sludTIXrwQvtVtvItCxP3n65qcFdy3Z5UBBhWpAyw8LZ3394q7vHU\\n\" +\n+            \"jHAOynVlZIr7BO2Uz\/qhQ2lgQMu114krL+smdjYeIyW9GHA9vOOc5NpwJeQM9fz7\\n\" +\n+            \"qE4tb6UMcxWSrgZtRxoM9zBGbwbzAgMBAAECgYASJDK40Y12Wvki1Z6xkkyOnBRj\\n\" +\n+            \"XfYpRykfxGtgA2RN3qLwHlk7Zzaul46DIKA6LlYynTUkJDF+Ww1cdDnP0lBlwcmM\\n\" +\n+            \"iD0ck3zYyYBLhQHuVbkK3SYE+ANRhM0icvvqANP2at\/U4awQcPNEae\/KCiecLNu3\\n\" +\n+            \"CJGqyhPDdrEAqPuJGQJBAN46pQC6l3yrcSYE2s53jSmsm2HVVOFlFXjU6k\/RMTxG\\n\" +\n+            \"FfDJtGUAOQ37rPQ06ugr\/gjLAmmPp+FXozaBdA32D80CQQDFuGRgv3WYqbglIcRL\\n\" +\n+            \"JRs6xlj9w1F97s\/aiUenuwhIPNiUoRbV7mnNuZ\/sGF0svOVE7SazRjuFX6UqL9Y9\\n\" +\n+            \"HzG\/AkEA170pCI8cl4w8eUNHRB9trGKEKjMXhwVCFh7lJf2ZBcGodSzr8w2HVhrZ\\n\" +\n+            \"Ke7hiemDYffrbJ1oxmv05+o+x3r0lQJBAL6adVm2+FyFMFnLZXmzeb59O4jWY5bt\\n\" +\n+            \"Qz6\/HG6bpO5OidMuP99YCHMkQQDOs\/PO3Y5GuAoW6IY4n\/Y9S2B80+0CQBl1\/H9\/\\n\" +\n+            \"0n\/vrb6vW6Azds49tuS82RFAnOhtwTyBEajs08WF8rZQ3WD2RHJnH0+jjfL0anIp\\n\" +\n+            \"dQBSeNN7s7b6rRk=\\n\" +\n+            \"-----END PRIVATE KEY-----\";\n@@ -198,16 +217,16 @@\n-    static String targetCertStr_D=\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICVDCCAb2gAwIBAgIBBTANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTIwNDE3MTIwNjEwWhcNMzIwMTAzMTIwNjEwWjBUMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxFzAVBgNV\\n\" +\n-        \"BAMTDkludGVyT3AgVGVzdGVyMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDo\\n\" +\n-        \"Q\/KoAIAC2ljFfW2KwjnxTzi4NQJeUuk2seqKpsAY8x4O5dvixzUl6142zmljapqi\\n\" +\n-        \"bJloQVpfB+CEc5\/l4h5gzGRVzkuqP1oPzDrpZ5GsvmvuHenV\/TzCIgX1cLETzQVt\\n\" +\n-        \"6Rk06okoBPnw3hDJEJiEc1Rv7HCE8p\/p+SaiHrskwwIDAQABo08wTTALBgNVHQ8E\\n\" +\n-        \"BAMCA+gwHQYDVR0OBBYEFPr91O33RIGfFSqza2AwQIgE4QswMB8GA1UdIwQYMBaA\\n\" +\n-        \"FEtmQi7jT1ijXOafPsfkrLwSVu9eMA0GCSqGSIb3DQEBBAUAA4GBANIDFYgAhoj3\\n\" +\n-        \"B8u1YpqeoEp2Lt9TwrYBshaIrbmBPCwCGio0JIsoov3n8BCSg5F+8MnOtPl+TjeO\\n\" +\n-        \"0Ug+7guPdCk\/wg8YNxLHgSsQlpcNJDjWiErqmUPVrg5BPPQb65qMund6KTmMN0y6\\n\" +\n-        \"4EbSmxRpZO\/N0\/5oK4umTk0EeXKNekBj\\n\" +\n-        \"-----END CERTIFICATE-----\";\n+    static String targetCertStr_D =\n+            \"-----BEGIN CERTIFICATE-----\\n\" +\n+            \"MIICVDCCAb2gAwIBAgIBBTANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n+            \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n+            \"MTIwNDE3MTIwNjEwWhcNMzIwMTAzMTIwNjEwWjBUMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n+            \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxFzAVBgNV\\n\" +\n+            \"BAMTDkludGVyT3AgVGVzdGVyMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDo\\n\" +\n+            \"Q\/KoAIAC2ljFfW2KwjnxTzi4NQJeUuk2seqKpsAY8x4O5dvixzUl6142zmljapqi\\n\" +\n+            \"bJloQVpfB+CEc5\/l4h5gzGRVzkuqP1oPzDrpZ5GsvmvuHenV\/TzCIgX1cLETzQVt\\n\" +\n+            \"6Rk06okoBPnw3hDJEJiEc1Rv7HCE8p\/p+SaiHrskwwIDAQABo08wTTALBgNVHQ8E\\n\" +\n+            \"BAMCA+gwHQYDVR0OBBYEFPr91O33RIGfFSqza2AwQIgE4QswMB8GA1UdIwQYMBaA\\n\" +\n+            \"FEtmQi7jT1ijXOafPsfkrLwSVu9eMA0GCSqGSIb3DQEBBAUAA4GBANIDFYgAhoj3\\n\" +\n+            \"B8u1YpqeoEp2Lt9TwrYBshaIrbmBPCwCGio0JIsoov3n8BCSg5F+8MnOtPl+TjeO\\n\" +\n+            \"0Ug+7guPdCk\/wg8YNxLHgSsQlpcNJDjWiErqmUPVrg5BPPQb65qMund6KTmMN0y6\\n\" +\n+            \"4EbSmxRpZO\/N0\/5oK4umTk0EeXKNekBj\\n\" +\n+            \"-----END CERTIFICATE-----\";\n@@ -216,14 +235,16 @@\n-        \"MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAOhD8qgAgALaWMV9\\n\" +\n-        \"bYrCOfFPOLg1Al5S6Tax6oqmwBjzHg7l2+LHNSXrXjbOaWNqmqJsmWhBWl8H4IRz\\n\" +\n-        \"n+XiHmDMZFXOS6o\/Wg\/MOulnkay+a+4d6dX9PMIiBfVwsRPNBW3pGTTqiSgE+fDe\\n\" +\n-        \"EMkQmIRzVG\/scITyn+n5JqIeuyTDAgMBAAECgYBw37yIKp4LRONJLnhSq6sO+0n8\\n\" +\n-        \"Mz6waiiN\/Q6XTQwj09pysQAYCGlqwSRrDAqpVsBJWO+Ae+oYLrLMi4hUZnwN75v3\\n\" +\n-        \"pe1nXlrD11RmPLXwBxqFxNSvAs2FgLHZEtwHI7Bn8KybT\/8bGkQ8csLceInYtMDD\\n\" +\n-        \"MuTyy2KRk\/pj60zIKQJBAPgebQiAH6viFQ88AwHaNvQhlUfwmSC1i6f8LVoeqaHC\\n\" +\n-        \"lnP0LJBwlyDeeEInhHrCR2ibnCB6I\/Pig+49XQgabK8CQQDvpJwuGEbsOO+3rkJJ\\n\" +\n-        \"OpOw4toG0QJZdRnT6l8I6BlboQRZSfFh+lGGahvFXkxc4KdUpJ7QPtXU7HHk6Huk\\n\" +\n-        \"8RYtAkA9CW8VGj+wTuuTVdX\/jKjcIa7RhbSFwWNbrcOSWdys+Gt+luCnn6rt4QyA\\n\" +\n-        \"aaxDbquWZkFgE+voQR7nap0KM0XtAkAznd0WAJymHM1lXt9gLoHJQ9N6TGKZKiPa\\n\" +\n-        \"BU1a+cMcfV4WbVrUo7oTnZ9Fr73681iXXq3mZOJh7lvJ1llreZIxAkBEnbiTgEf4\\n\" +\n-        \"tvku68jHcRbRPmdS7CBSWNEBaHLOm4pUSTcxVTKKMHw7vmM5\/UYUxJ8QNKCYxn6O\\n\" +\n-        \"+vtiBwBawwzN\";\n+            \"-----BEGIN PRIVATE KEY-----\\n\" +\n+            \"MIICdQIBADANBgkqhkiG9w0BAQEFAASCAl8wggJbAgEAAoGBAOhD8qgAgALaWMV9\\n\" +\n+            \"bYrCOfFPOLg1Al5S6Tax6oqmwBjzHg7l2+LHNSXrXjbOaWNqmqJsmWhBWl8H4IRz\\n\" +\n+            \"n+XiHmDMZFXOS6o\/Wg\/MOulnkay+a+4d6dX9PMIiBfVwsRPNBW3pGTTqiSgE+fDe\\n\" +\n+            \"EMkQmIRzVG\/scITyn+n5JqIeuyTDAgMBAAECgYBw37yIKp4LRONJLnhSq6sO+0n8\\n\" +\n+            \"Mz6waiiN\/Q6XTQwj09pysQAYCGlqwSRrDAqpVsBJWO+Ae+oYLrLMi4hUZnwN75v3\\n\" +\n+            \"pe1nXlrD11RmPLXwBxqFxNSvAs2FgLHZEtwHI7Bn8KybT\/8bGkQ8csLceInYtMDD\\n\" +\n+            \"MuTyy2KRk\/pj60zIKQJBAPgebQiAH6viFQ88AwHaNvQhlUfwmSC1i6f8LVoeqaHC\\n\" +\n+            \"lnP0LJBwlyDeeEInhHrCR2ibnCB6I\/Pig+49XQgabK8CQQDvpJwuGEbsOO+3rkJJ\\n\" +\n+            \"OpOw4toG0QJZdRnT6l8I6BlboQRZSfFh+lGGahvFXkxc4KdUpJ7QPtXU7HHk6Huk\\n\" +\n+            \"8RYtAkA9CW8VGj+wTuuTVdX\/jKjcIa7RhbSFwWNbrcOSWdys+Gt+luCnn6rt4QyA\\n\" +\n+            \"aaxDbquWZkFgE+voQR7nap0KM0XtAkAznd0WAJymHM1lXt9gLoHJQ9N6TGKZKiPa\\n\" +\n+            \"BU1a+cMcfV4WbVrUo7oTnZ9Fr73681iXXq3mZOJh7lvJ1llreZIxAkBEnbiTgEf4\\n\" +\n+            \"tvku68jHcRbRPmdS7CBSWNEBaHLOm4pUSTcxVTKKMHw7vmM5\/UYUxJ8QNKCYxn6O\\n\" +\n+            \"+vtiBwBawwzN\\n\" +\n+            \"-----END PRIVATE KEY-----\";\n@@ -238,1 +259,1 @@\n-    static char passphrase[] = \"passphrase\".toCharArray();\n+    static char[] passphrase = \"passphrase\".toCharArray();\n@@ -248,1 +269,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -365,2 +386,1 @@\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        final PEMDecoder pemDecoder = PEMDecoder.of();\n@@ -372,5 +392,2 @@\n-        \/\/ import the trused cert\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trustedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n+        \/\/ generate certificate from cert string\n+        Certificate trusedCert = pemDecoder.decode(trustedCertStr, X509Certificate.class);\n@@ -378,0 +395,1 @@\n+        \/\/ import the trused cert\n@@ -393,2 +411,1 @@\n-            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                                Base64.getMimeDecoder().decode(keySpecStr));\n+            PKCS8EncodedKeySpec priKeySpec = pemDecoder.decode(keySpecStr, PKCS8EncodedKeySpec.class);\n@@ -401,3 +418,1 @@\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n+            Certificate keyCert = pemDecoder.decode(keyCertStr, X509Certificate.class);\n@@ -524,14 +539,12 @@\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died, because of \" + e);\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n+            serverThread = new Thread(() -> {\n+                try {\n+                    doServerSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our server thread just died.\n+                     *\n+                     * Release the client, if not active already...\n+                     *\/\n+                    System.err.println(\"Server died, because of \" + e);\n+                    serverReady = true;\n+                    serverException = e;\n@@ -539,1 +552,1 @@\n-            };\n+            });\n@@ -554,11 +567,9 @@\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died, because of \" + e);\n-                        clientException = e;\n-                    }\n+            clientThread = new Thread(() -> {\n+                try {\n+                    doClientSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our client thread just died.\n+                     *\/\n+                    System.err.println(\"Client died, because of \" + e);\n+                    clientException = e;\n@@ -566,1 +577,1 @@\n-            };\n+            });\n","filename":"test\/jdk\/javax\/net\/ssl\/ServerName\/SSLSocketSNISensitive.java","additions":193,"deletions":182,"binary":false,"changes":375,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/javax\/net\/ssl\/interop\/ClientHelloBufferUnderflowException.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/javax\/net\/ssl\/interop\/ClientHelloChromeInterOp.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,4 +24,8 @@\n-import javax.net.ssl.*;\n-import javax.net.ssl.SSLEngineResult.*;\n-import java.io.*;\n-import java.nio.*;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLEngineResult;\n+import javax.net.ssl.SSLEngineResult.HandshakeStatus;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.nio.ByteBuffer;\n@@ -29,0 +33,2 @@\n+import java.security.PEMDecoder;\n+import java.security.PEMRecord;\n@@ -30,1 +36,0 @@\n-import java.security.KeyFactory;\n@@ -32,3 +37,3 @@\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.util.Base64;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.ECPrivateKey;\n+import java.security.interfaces.RSAPrivateKey;\n@@ -182,0 +187,2 @@\n+    private static final PEMDecoder pemDecoder = PEMDecoder.of();\n+\n@@ -254,4 +261,1 @@\n-        char passphrase[] = \"passphrase\".toCharArray();\n-\n-        \/\/ Generate certificate from cert string.\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        char[] passphrase = \"passphrase\".toCharArray();\n@@ -260,1 +264,0 @@\n-        ByteArrayInputStream is;\n@@ -269,7 +272,2 @@\n-\n-                is = new ByteArrayInputStream(trustedCertStr.getBytes());\n-                try {\n-                    trustedCert[i] = cf.generateCertificate(is);\n-                } finally {\n-                    is.close();\n-                }\n+                \/\/ Generate certificate from cert string.\n+                trustedCert[i] = pemDecoder.decode(trustedCertStr, X509Certificate.class);\n@@ -298,5 +296,1 @@\n-                PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                    Base64.getMimeDecoder().decode(keyMaterialKeys[i]));\n-                KeyFactory kf =\n-                    KeyFactory.getInstance(keyMaterialKeyAlgs[i]);\n-                PrivateKey priKey = kf.generatePrivate(priKeySpec);\n+                String keyMaterialStrPEMFormat = new PEMRecord(\"PRIVATE KEY\", keyMaterialKeys[i]).toString();\n@@ -304,8 +298,5 @@\n-                \/\/ generate certificate chain\n-                is = new ByteArrayInputStream(keyCertStr.getBytes());\n-                Certificate keyCert = null;\n-                try {\n-                    keyCert = cf.generateCertificate(is);\n-                } finally {\n-                    is.close();\n-                }\n+                PrivateKey priKey = switch (keyMaterialKeyAlgs[i]) {\n+                    case \"RSA\" -> pemDecoder.decode(keyMaterialStrPEMFormat, RSAPrivateKey.class);\n+                    case \"EC\" -> pemDecoder.decode(keyMaterialStrPEMFormat, ECPrivateKey.class);\n+                    default -> pemDecoder.decode(keyMaterialStrPEMFormat, PrivateKey.class);\n+                };\n@@ -313,0 +304,2 @@\n+                \/\/ generate certificate chain\n+                Certificate keyCert  = pemDecoder.decode(keyCertStr, X509Certificate.class);\n","filename":"test\/jdk\/javax\/net\/ssl\/interop\/ClientHelloInterOp.java","additions":27,"deletions":34,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @enablePreview\n@@ -38,3 +39,2 @@\n-import java.io.*;\n-import java.net.SocketException;\n-import java.util.*;\n+import java.io.ByteArrayInputStream;\n+import java.security.PEMDecoder;\n@@ -42,2 +42,16 @@\n-import java.security.cert.*;\n-import java.security.cert.CertPathValidatorException.*;\n+import java.security.cert.CertPath;\n+import java.security.cert.CertPathValidator;\n+import java.security.cert.CertPathValidatorException;\n+import java.security.cert.CertPathValidatorException.BasicReason;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.PKIXParameters;\n+import java.security.cert.TrustAnchor;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n@@ -47,0 +61,2 @@\n+    private static final PEMDecoder pemDecoder = java.security.PEMDecoder.of();\n+\n@@ -107,2 +123,0 @@\n-        \/\/ generate certificate from cert strings\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n@@ -110,1 +124,1 @@\n-        ByteArrayInputStream is;\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n@@ -112,2 +126,2 @@\n-        is = new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        \/\/ generate certificate from cert strings\n+        Certificate selfSignedCert = pemDecoder.decode(selfSignedCertStr, X509Certificate.class);\n@@ -116,2 +130,1 @@\n-        List<Certificate> list = Arrays.asList(new Certificate[] {\n-                        selfSignedCert});\n+        List<Certificate> list = Collections.singletonList(selfSignedCert);\n@@ -122,4 +135,1 @@\n-    private static Set<TrustAnchor> generateTrustAnchors()\n-            throws CertificateException {\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+    private static Set<TrustAnchor> generateTrustAnchors() {\n@@ -127,3 +137,2 @@\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+        \/\/ generate certificate from cert string\n+        X509Certificate selfSignedCert = pemDecoder.decode(selfSignedCertStr, X509Certificate.class);\n@@ -133,1 +142,1 @@\n-            new TrustAnchor((X509Certificate)selfSignedCert, null);\n+            new TrustAnchor(selfSignedCert, null);\n@@ -167,1 +176,1 @@\n-            throws CertPathValidatorException, Exception {\n+            throws Exception {\n@@ -179,1 +188,5 @@\n-        params.setDate(new Date(109, 9, 1));   \/\/ 2009-09-01\n+        final Calendar calendar = Calendar.getInstance();\n+        calendar.set(Calendar.YEAR, 2009);\n+        calendar.set(Calendar.MONTH, 9);\n+        calendar.set(Calendar.DATE, 1);\n+        params.setDate(calendar.getTime());   \/\/ 2009-09-01\n","filename":"test\/jdk\/sun\/security\/provider\/certpath\/DisabledAlgorithms\/CPValidatorTrustAnchor.java","additions":36,"deletions":23,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @enablePreview\n@@ -29,2 +30,1 @@\n-import java.io.InputStream;\n-import java.io.ByteArrayInputStream;\n+import java.security.PEMDecoder;\n@@ -32,1 +32,0 @@\n-import java.security.cert.CertificateFactory;\n@@ -35,0 +34,1 @@\n+import java.security.cert.X509Certificate;\n@@ -90,3 +90,3 @@\n-    public static void main(String args[]) throws Exception {\n-\n-        Certificate signer = generate(signerCertStr);\n+    public static void main(String[] args) throws Exception {\n+        final PEMDecoder pemDecoder = PEMDecoder.of();\n+        Certificate signer = pemDecoder.decode(signerCertStr, X509Certificate.class);\n@@ -95,1 +95,1 @@\n-        Certificate normal = generate(normalCertStr);\n+        Certificate normal = pemDecoder.decode(normalCertStr, X509Certificate.class);\n@@ -97,1 +97,1 @@\n-        Certificate longer = generate(longerCertStr);\n+        Certificate longer = pemDecoder.decode(longerCertStr, X509Certificate.class);\n@@ -99,1 +99,1 @@\n-        Certificate shorter = generate(shorterCertStr);\n+        Certificate shorter = pemDecoder.decode(shorterCertStr, X509Certificate.class);\n@@ -108,13 +108,0 @@\n-    private static Certificate generate(String certStr) throws Exception {\n-        InputStream is = null;\n-        try {\n-            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-            is = new ByteArrayInputStream(certStr.getBytes());\n-            return cf.generateCertificate(is);\n-        } finally {\n-            if (is != null) {\n-                is.close();\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/sun\/security\/rsa\/InvalidBitString.java","additions":10,"deletions":23,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @enablePreview\n@@ -200,2 +201,3 @@\n-import java.io.*;\n-import java.net.*;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.security.PEMDecoder;\n@@ -206,4 +208,7 @@\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import javax.net.ssl.*;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManagerFactory;\n@@ -211,0 +216,3 @@\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.RSAPrivateKeySpec;\n@@ -315,1 +323,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -389,1 +397,1 @@\n-            String enabledSuites[] = {\n+            String[] enabledSuites = {\n@@ -474,14 +482,12 @@\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\" + e);\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n+            serverThread = new Thread(() -> {\n+                try {\n+                    doServerSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our server thread just died.\n+                     *\n+                     * Release the client, if not active already...\n+                     *\/\n+                    System.err.println(\"Server died...\" + e);\n+                    serverReady = true;\n+                    serverException = e;\n@@ -489,1 +495,1 @@\n-            };\n+            });\n@@ -498,11 +504,9 @@\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n+            clientThread = new Thread(() -> {\n+                try {\n+                    doClientSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our client thread just died.\n+                     *\/\n+                    System.err.println(\"Client died...\");\n+                    clientException = e;\n@@ -510,1 +514,1 @@\n-            };\n+            });\n@@ -520,1 +524,0 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n@@ -522,3 +525,3 @@\n-        ByteArrayInputStream is =\n-                    new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trustedCert = cf.generateCertificate(is);\n+        final PEMDecoder pemDecoder = PEMDecoder.of();\n+\n+        Certificate trustedCert = pemDecoder.decode(trusedCertStr, X509Certificate.class);\n@@ -543,2 +546,1 @@\n-            is = new ByteArrayInputStream(serverCertStr.getBytes());\n-            Certificate serverCert = cf.generateCertificate(is);\n+            Certificate serverCert = pemDecoder.decode(serverCertStr, X509Certificate.class);\n","filename":"test\/jdk\/sun\/security\/ssl\/ClientHandshaker\/RSAExport.java","additions":44,"deletions":42,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+ * @enablePreview\n@@ -38,3 +39,18 @@\n-import java.util.*;\n-import java.io.*;\n-import javax.net.ssl.*;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.security.PEMDecoder;\n+import java.security.cert.CertPath;\n+import java.security.cert.CertPathValidator;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.PKIXParameters;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManagerFactory;\n@@ -43,3 +59,0 @@\n-import java.security.cert.*;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n@@ -47,1 +60,1 @@\n-import java.util.Base64;\n+import java.util.Arrays;\n@@ -99,27 +112,0 @@\n-    static String trustedPrivateKey = \/\/ Private key in the format of PKCS#8\n-        \"MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDUJ3hT\/9jY\/i8i\\n\" +\n-        \"70EEaL6mbrhhdg\/Ys1E0r97n+dZaY0olqkIBhh1r8UkKWtvOkj8WBFQ0sz0HhSjT\\n\" +\n-        \"rkVEisGLW+7zPJiDBPtQrRawvCDpnzUofnQ98zQKUTHji1OqhxgNzsKCy9vIh5Mh\\n\" +\n-        \"tX0CdGUScEDXlYUkAkxMKCVo2V5dRn34D+1rNGEeWxGnQ5vyPi0IwlpEOkYxhPLV\\n\" +\n-        \"dsb5aoLzBc\/rdrrdzCM+svm7O38LhbVuA0F9NHAgdJRKE2F91ztkk1KvY0U9zCh1\\n\" +\n-        \"3u5WV7kl481qDujKGM4UURoEarbV2Xr+jNVGSpJZYCLU\/sxFrL15iPeYtmJlovo2\\n\" +\n-        \"VbFed\/NXAgMBAAECggEAUZvlQ5q1VbNhenTCc+m+\/NK2hncd3WQNJtFIU7\/dXuO2\\n\" +\n-        \"0ApQXbmzc6RbTmppB2tmbRe5NJSGM3BbpiHxb05Y6TyyDEsQ98Vgz0Xl5pJXrsaZ\\n\" +\n-        \"cjxChtoY+KcHI9qikoRpElaoqBu3LcpJJLxlnB4eCxu3NbbEgneH1fvTeCO1kvcp\\n\" +\n-        \"i3DDdyfY7WB9RW1yWAveiuqvtnbsPfJJLKEhFvZL2ArYCRTm\/oIw64yukNe\/QLR5\\n\" +\n-        \"bGzEJMT2ZNQMld1f+CW9tOrUKrnnPCGfMa351T5we+8B6sujWfftPutgEVx5TmHs\\n\" +\n-        \"AOW1SntMapbgg46K9EC\/C5YQa5D1aNOH9ZTEMkgUMQKBgQDrpPQIHFozeeyZ0iiq\\n\" +\n-        \"HtReLPcqpkwr\/9ELc3SjgUypSvpu0l\/m++um0yLinlXMn25km\/BP6Mv3t\/+1uzAc\\n\" +\n-        \"qpopkcyek8X1hzNRhDkWuMv4KDOKk5c6qLx8FGSm6q8PYm5KbsiyeCM7CJoeoqJ5\\n\" +\n-        \"74IZjOIw7UrYLckCb6W8xGQLIwKBgQDmew3vGRR3JmCCSumtJQOqhF6bBYrNb6Qc\\n\" +\n-        \"r4vrng+QhNIquwGqHKPorAI1J8J1jOS+dkDWTxSz2xQKQ83nsOspzVPskpDh5mWL\\n\" +\n-        \"gGk5QCkX87jFsXfhvZFLksZMbIdpWze997Zs2fe\/PWfPaH6o3erqo2zAhQV0eA9q\\n\" +\n-        \"C7tfImREPQKBgQDi2Xq\/8CN52M9IScQx+dnyC5Gqckt0NCKXxn8sBIa7l129oDMI\\n\" +\n-        \"187FXA8CYPEyOu14V5KiKvdos66s0daAUlB04lI8+v+g3ZYuzH50\/FQHwxPTPUBi\\n\" +\n-        \"DRzeyncXJWiAA\/8vErWM8hDgfOh5w5Fsl4EEfdcmyNm7gWA4Qyknr1ysRwKBgQDC\\n\" +\n-        \"JSPepUy09VHUTxA59nT5HRmoEeoTFRizxTfi2LkZrphuwCotxoRXiRUu+3f1lyJU\\n\" +\n-        \"Qb5qCCFTQ5bE8squgTwGcVxhajC66V3ePePlAuPatkWN2ek28X1DoLaDR+Rk3h69\\n\" +\n-        \"Wb2EQbNMl4grkUUoMA8jaVhBb4vhyQSK+qjyAUFerQKBgQDXZPuflfsjH\/d\/O2yw\\n\" +\n-        \"qZbssKe9AKORjv795teblAc3vmsSlNwwVnPdS2aq1LHyoNbetc\/OaZV151hTQ\/9z\\n\" +\n-        \"bsA48oOojgrDD07Ovg3uDcNEIufxR0aGeSSvqhElp1r7wAYj8bAr6W\/RH6MS16WW\\n\" +\n-        \"dRd+PH6hsap8BD2RlVCnrT3vIQ==\";\n@@ -159,27 +145,0 @@\n-    static String caSignerPrivateKey = \/\/ Private key in the format of PKCS#8\n-        \"MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDAvGeLKlW1ljae\\n\" +\n-        \"eu8NvDCjfW5BNK2c0C4ry7Is+1mM4PC7FA4bRpMaQHKIjLsZ5D1hoA9183cv3p1a\\n\" +\n-        \"P75\/ZYMOyx1id\/hXmbd3jp8BR0wbvrKxa53+4lO0S5AL5dOpU2AVhcdeQ7+DwoL6\\n\" +\n-        \"iAuHqNcABg3CijrIcFeZHcPMwaZMd9YxJG6YrnNHMWjbXTGKpma02NMB1UnRxsdN\\n\" +\n-        \"phqfRt2gkUs18l6697sSJ7eblvSWEWw1Bmtrg9No28UUsiF8q0m9i\/G0QzYOrS6v\\n\" +\n-        \"ghum5bpHAixxfA9Z\/ozHrN8gf8gNDTRnG6phDwVb1Uj9nO2f9yTArx7Kz5EtRNmD\\n\" +\n-        \"x9SNMS9rAgMBAAECggEAZk6cF\/8s5+sIqy9OXdgbaW1XbT1tOuQ23gCOX9o8Os\/c\\n\" +\n-        \"eTG4GzpnM3QqV9l8J85D1uKD0nSeO8bLd\/CGSlG0M9IVkwNjy\/xIqyoFtUQHXmLn\\n\" +\n-        \"r84UXAv\/qqDBoc8pf6RGSKZuodcMfgBuTlaQ6D3zgou0GiQN9\/\/KP\/jQyouwnr3A\\n\" +\n-        \"LyXQekxriwPuSYAPak8s5XLfugOebbSRm2UdGEgX3yrT9FVu9rtgeMKdRaCOU8T4\\n\" +\n-        \"G2UdpGaiDfm5yrR+2XEIv4oaH3WFxmmfQCxVcOFJ1iRvfKBbLb1UCgtJuCBD067y\\n\" +\n-        \"dq5PrwUTeAvd7hwZd0lxCSnWY7VvYFNr7iJfyElowQKBgQD8eosot+Th03hpkYDs\\n\" +\n-        \"BIVsw7oqhJmcrPV1bSZ+aQwqqrOGypNmb7nLGTC8Cj1sT+EzfGs7GqxiLOEn4NXr\\n\" +\n-        \"TYV\/\/RUPBSEXVp2y+2dot1a9oq0BJ8FwGTYL0qSwJrIXJfkQFrYhVVz3JLIWJbwV\\n\" +\n-        \"cy4YCQr094BhXTS7joJOUDRsYwKBgQDDbI3Lv+bBK8lLfIBll1RY1k5Gqy\/H+qxp\\n\" +\n-        \"sMN8FmadmIGzHhe9xml6b5EfAZphAUF4vZJhQXloT5Wm+NNIAf6X6dRjvzyw7N9B\\n\" +\n-        \"d48EFJF4ChqNGBocsQRNr2wPRzQ+k2caw9YyYMIjbhktDzO1U\/FJGYW6\/Vgr2v4K\\n\" +\n-        \"siROnXfLWQKBgBOVAZQP5z2opC8z7NbhZuPPrnG7xRpEw+jupUyqoxnwEWqD7bjF\\n\" +\n-        \"M5jQBFqhRLBQ5buTi9GSuQoIRxJLuuu8IH2TyH1YvX9M5YBLRXL2vVCJ\/HcZeURT\\n\" +\n-        \"gECcfs92wNtQw6d+y3N8ZnB4tSNIm\/Th8RJGKUZkp91lWECvxeWDDP3XAoGASfNq\\n\" +\n-        \"NRAJYlAPfGFAtTDu2i8+r79X9XUGiXg6gVp4umpbqkxY75eFkq9lWzZgFRVEkUwr\\n\" +\n-        \"eGIubyquluDSEw2uKg5yMMzNSqZYVY3IsOKXqbUpFvtn5jOWTU90tNNdEdD100sI\\n\" +\n-        \"Y0f6Ly4amNKH3rZFOERQNtJn6zCTsbh3xMgR7QECgYBhQTqxLU5eIu38MKobzRue\\n\" +\n-        \"RoUkMcoY3DePkKPSYjilFhkUDozIXf\/xUGnB8kERZKO+44wUkuPGljiFL1\/P\/RO9\\n\" +\n-        \"zhHAV94Kw2ddtfxy05GVtUZ99miBmsMb2m8vumGJqfR8h2xpfc1Ra0zfrsPgLNru\\n\" +\n-        \"xDTDW+bNbM7XyPvg9mOf7Q==\";\n@@ -219,27 +178,0 @@\n-    static String certIssuerPrivateKey = \/\/ Private key in the format of PKCS#8\n-        \"MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC1lDVpzmzwbKOL\\n\" +\n-        \"yFWkjPjqtX9xLMq7SVqobvhBv+VChMGGjQbNQPbtczOcXNOcuMFyXxY++eXY7c37\\n\" +\n-        \"MzhbdZHv4Y4aWEn+A3EiX2\/fTAbxx165qxKiHbD2EmlKk\/Q6yIvi9M9EXXr\/viEC\\n\" +\n-        \"Y4\/Sdtd4KYtfETa0FpfF5\/ZpZMYQo8I9RqBQOmhfvXL1l\/Lodla5elZtvIUyp5k2\\n\" +\n-        \"nRQe58AxeP5hrilbIgfmEySf9mOkaTalRf2epBE\/wRNA7Qi5Sr2O4pY2x3PPdmMy\\n\" +\n-        \"NL4cZaOJTgdyeDYbEMSW6vpiJW26ma\/qeFgPIXZ8COFJZLSOEu310M4QOdSR1Y2c\\n\" +\n-        \"l3\/V2E0VAgMBAAECggEBAJjfVrjl2kHwtSCSYchQB6FTfSBDnctgTrtP8iMo9FO0\\n\" +\n-        \"gVpOkVNtRndTbjhOzro7smIgPBJ5QlIIpErBLMmTinJza7gybNk2\/KD7yKwuzgnw\\n\" +\n-        \"2IdoyB9E8B+8EHmBZzW2ck953KaqLUvzPsdMG2IOPAomr\/gx\/eRQwScVzBefiEGo\\n\" +\n-        \"sN+rGfUt\/RNAHwWje1KuNDj21S84agQhN6hdYUnIMsvJLu\/9mOwUb9ff+AzTUfFr\\n\" +\n-        \"zyx2MJL4Cx59DkUUMESCfinlHUc21llQjFWmX\/zOoGY0X0qV\/YM\/GRsv1ZDFHw9o\\n\" +\n-        \"hQ6m8Ov7D9wB3TKZBI97sCyggjBfSeuYQlNbs99KWQECgYEA7IKNL0ME7FuIrKYu\\n\" +\n-        \"FCQ\/Duz1N3oQXLzrTGKUSU1qSbrU2Jwk4SfJ8ZYCW1TP6vZkaQsTXmXun3yyCAqZ\\n\" +\n-        \"hcOtDBhI+b7Wpmmyf6nb83oYJtzHMRQZ5qS+9vOBfV9Uf1za8XI4p90EqkFHByCF\\n\" +\n-        \"tHfjVbjK39zN4CvaO3tqpOaYtL0CgYEAxIrTAhGWy9nBsxf8QeqDou0rV5Cw50Kl\\n\" +\n-        \"kQsE7KLmjvrMaFFpUc5lgWoC+pm\/69VpNBUuN\/38YozwxVjVi\/nMJuuK150mhdWI\\n\" +\n-        \"B28FI7ORnFmVeSvTrP4mBX1ct2Tny9zpchXn3rpHR5NZUs7oBhjudHSfRMrHxeBs\\n\" +\n-        \"Kv2pr2s6uzkCgYAtrEh3iAm7WzHZpX3ghd9nknsIa5odTp5h8eeRAFI2Ss4vxneY\\n\" +\n-        \"w4ZMERwDZy1\/wnVBk9H5uNWMFxiKVQGww0j3vPjawe\/R0zeVT8gaDMn9N0WARNF7\\n\" +\n-        \"qPT3265196LptZTSa6xlPllYR6LfzXgEkeJk+3qyIIHheJZ8RikiDyYOQQKBgQC\/\\n\" +\n-        \"rxlegiMNC4KDldf7vanGxAKqcz5lPbXWQOX7mGC+f9HNx+Cs3VxYHDltiXgJnOju\\n\" +\n-        \"191s1HRK9WR5REt5KhY2uzB9WxJQItJ5VYiwqhhQYXqLY\/gdVv1kC0DayDndtMWk\\n\" +\n-        \"88JhklGkeAv83DikgbpGr9sJr6+oyFkWkLDmmfD82QKBgQCMgkZJzrdSNNlB0n5x\\n\" +\n-        \"xC3MzlsQ5aBJuUctnMfuyDi+11yLAuP1oLzGEJ7qEfFoGRO0V8zJWmHAfNhmVYEX\\n\" +\n-        \"ow5g0WbPT16GoRCiOAzq+ewH+TEELMF6HWqnDuTnCg28Jg0dw2kdVTqeyzKOQlLG\\n\" +\n-        \"ua9c2DY3PUTXQPNqLVhz+XxZKA==\";\n@@ -280,0 +212,1 @@\n+        \"-----BEGIN PRIVATE KEY-----\\n\" +\n@@ -305,1 +238,2 @@\n-        \"TiSXLpQ1Q9GvDpzngDzJzzY=\";\n+        \"TiSXLpQ1Q9GvDpzngDzJzzY=\\n\" +\n+        \"-----END PRIVATE KEY-----\";\n@@ -340,0 +274,1 @@\n+        \"-----BEGIN PRIVATE KEY-----\\n\" +\n@@ -365,1 +300,2 @@\n-        \"i1pnyMPaloBOhz3Y07sWXxCz\";\n+        \"i1pnyMPaloBOhz3Y07sWXxCz\\n\" +\n+        \"-----END PRIVATE KEY-----\";\n@@ -367,1 +303,1 @@\n-    static char passphrase[] = \"passphrase\".toCharArray();\n+    static char[] passphrase = \"passphrase\".toCharArray();\n@@ -377,1 +313,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -450,2 +386,1 @@\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        final PEMDecoder pemDecoder = PEMDecoder.of();\n@@ -457,5 +392,1 @@\n-        \/\/ import the trused cert\n-        ByteArrayInputStream is =\n-            new ByteArrayInputStream(trusedCertStr.getBytes());\n-        Certificate trusedCert = cf.generateCertificate(is);\n-        is.close();\n+        \/\/ generate certificate from cert string\n@@ -463,0 +394,3 @@\n+        Certificate trusedCert = pemDecoder.decode(trusedCertStr, X509Certificate.class);\n+\n+        \/\/ import the trused cert\n@@ -468,3 +402,1 @@\n-        is = new ByteArrayInputStream(caSignerStr.getBytes());\n-        Certificate caSignerCert = cf.generateCertificate(is);\n-        is.close();\n+        Certificate caSignerCert =pemDecoder.decode(caSignerStr, X509Certificate.class);\n@@ -473,3 +405,1 @@\n-        is = new ByteArrayInputStream(certIssuerStr.getBytes());\n-        Certificate certIssuerCert = cf.generateCertificate(is);\n-        is.close();\n+        Certificate certIssuerCert =pemDecoder.decode(certIssuerStr, X509Certificate.class);\n@@ -478,1 +408,2 @@\n-        PKCS8EncodedKeySpec priKeySpec = null;\n+        PKCS8EncodedKeySpec priKeySpec;\n+        Certificate keyCert;\n@@ -480,3 +411,2 @@\n-            priKeySpec = new PKCS8EncodedKeySpec(\n-                            Base64.getMimeDecoder().decode(serverPrivateKey));\n-            is = new ByteArrayInputStream(serverCertStr.getBytes());\n+            priKeySpec =pemDecoder.decode(serverPrivateKey, PKCS8EncodedKeySpec.class);\n+            keyCert = pemDecoder.decode(serverCertStr, X509Certificate.class);\n@@ -484,3 +414,2 @@\n-            priKeySpec = new PKCS8EncodedKeySpec(\n-                            Base64.getMimeDecoder().decode(clientPrivateKey));\n-            is = new ByteArrayInputStream(clientCertStr.getBytes());\n+            priKeySpec = pemDecoder.decode(clientPrivateKey, PKCS8EncodedKeySpec.class);\n+            keyCert = pemDecoder.decode(clientCertStr, X509Certificate.class);\n@@ -490,2 +419,0 @@\n-        Certificate keyCert = cf.generateCertificate(is);\n-        is.close();\n@@ -499,1 +426,2 @@\n-        CertPath path = cf.generateCertPath(Arrays.asList(chain));\n+        CertPath path = CertificateFactory.getInstance(\"X.509\")\n+                .generateCertPath(Arrays.asList(chain));\n@@ -534,1 +462,1 @@\n-    public static void main(String args[]) throws Exception {\n+    public static void main(String[] args) throws Exception {\n@@ -589,14 +517,12 @@\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n+            serverThread = new Thread(() -> {\n+                try {\n+                    doServerSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our server thread just died.\n+                     *\n+                     * Release the client, if not active already...\n+                     *\/\n+                    System.err.println(\"Server died...\");\n+                    serverReady = true;\n+                    serverException = e;\n@@ -604,1 +530,1 @@\n-            };\n+            });\n@@ -613,11 +539,9 @@\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n+            clientThread = new Thread(() -> {\n+                try {\n+                    doClientSide();\n+                } catch (Exception e) {\n+                    \/*\n+                     * Our client thread just died.\n+                     *\/\n+                    System.err.println(\"Client died...\");\n+                    clientException = e;\n@@ -625,1 +549,1 @@\n-            };\n+            });\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/BasicConstraints.java","additions":68,"deletions":144,"binary":false,"changes":212,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -32,4 +33,2 @@\n-import java.net.*;\n-import java.util.*;\n-import java.io.*;\n-import javax.net.ssl.*;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n@@ -37,0 +36,1 @@\n+import java.security.PEMDecoder;\n@@ -38,1 +38,0 @@\n-import java.security.cert.CertificateFactory;\n@@ -41,2 +40,0 @@\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n@@ -216,0 +213,2 @@\n+    private static final PEMDecoder pemDecoder = PEMDecoder.of();\n+\n@@ -256,2 +255,0 @@\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n@@ -263,0 +260,2 @@\n+        \/\/ generate certificate from cert string\n+        Certificate trustedCert = pemDecoder.decode(trustedCertStr, X509Certificate.class);\n@@ -264,5 +263,1 @@\n-        try (ByteArrayInputStream is =\n-                new ByteArrayInputStream(trustedCertStr.getBytes())) {\n-            Certificate trustedCert = cf.generateCertificate(is);\n-            ks.setCertificateEntry(\"RSA Export Signer\", trustedCert);\n-        }\n+        ks.setCertificateEntry(\"RSA Export Signer\", trustedCert);\n@@ -279,2 +274,0 @@\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n@@ -282,19 +275,4 @@\n-        try (ByteArrayInputStream is =\n-                new ByteArrayInputStream(targetCertStr.getBytes())) {\n-            chain[0] = (X509Certificate)cf.generateCertificate(is);\n-        }\n-\n-        try (ByteArrayInputStream is =\n-                new ByteArrayInputStream(intermediateCertStr.getBytes())) {\n-            chain[1] = (X509Certificate)cf.generateCertificate(is);\n-        }\n-\n-        try (ByteArrayInputStream is =\n-                new ByteArrayInputStream(compromisedCertStr.getBytes())) {\n-            chain[2] = (X509Certificate)cf.generateCertificate(is);\n-        }\n-\n-        try (ByteArrayInputStream is =\n-                new ByteArrayInputStream(untrustedCrossCertStr.getBytes())) {\n-            chain[3] = (X509Certificate)cf.generateCertificate(is);\n-        }\n+        chain[0] = pemDecoder.decode(targetCertStr, X509Certificate.class);\n+        chain[1] = pemDecoder.decode(intermediateCertStr, X509Certificate.class);\n+        chain[2] = pemDecoder.decode(compromisedCertStr, X509Certificate.class);\n+        chain[3] = pemDecoder.decode(untrustedCrossCertStr, X509Certificate.class);\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/ComodoHacker.java","additions":14,"deletions":36,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -30,3 +31,10 @@\n-import java.io.ByteArrayInputStream;\n-import java.security.*;\n-import java.security.cert.*;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PEMDecoder;\n+import java.security.Provider;\n+import java.security.PublicKey;\n+import java.security.Security;\n+import java.security.SignatureException;\n+import java.security.cert.CRLException;\n+import java.security.cert.X509CRL;\n+import java.security.cert.X509Certificate;\n@@ -147,2 +155,1 @@\n-    private static void setup() throws CertificateException, CRLException {\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+    private static void setup() {\n@@ -150,0 +157,1 @@\n+        final PEMDecoder pemDecoder = PEMDecoder.of();\n@@ -151,3 +159,1 @@\n-        ByteArrayInputStream inputStream =\n-                new ByteArrayInputStream(crlStr.getBytes());\n-        crl = (X509CRL)cf.generateCRL(inputStream);\n+        crl = pemDecoder.decode(crlStr, X509CRL.class);\n@@ -156,4 +162,3 @@\n-        inputStream = new ByteArrayInputStream(crlIssuerCertStr.getBytes());\n-        X509Certificate cert\n-                = (X509Certificate)cf.generateCertificate(inputStream);\n-        crlIssuerCertPubKey = cert.getPublicKey();\n+        crlIssuerCertPubKey = pemDecoder.decode(crlIssuerCertStr, X509Certificate.class)\n+                .getPublicKey();\n+\n@@ -162,2 +167,3 @@\n-        inputStream = new ByteArrayInputStream(selfSignedCertStr.getBytes());\n-        selfSignedCertPubKey = cf.generateCertificate(inputStream).getPublicKey();\n+        selfSignedCertPubKey = pemDecoder.decode(selfSignedCertStr, X509Certificate.class)\n+                .getPublicKey();\n+\n","filename":"test\/jdk\/sun\/security\/x509\/X509CRLImpl\/Verify.java","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"}]}