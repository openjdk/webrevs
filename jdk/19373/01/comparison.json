{"files":[{"patch":"@@ -465,0 +465,14 @@\n+  out->print_cr(\"\\n\");\n+\n+  \/\/ malloc diff\n+  const size_t early_malloced_bytes =\n+    _early_baseline.malloc_memory_snapshot()->total();\n+  const size_t early_count =\n+    _early_baseline.malloc_memory_snapshot()->total_count();\n+  const size_t current_malloced_bytes =\n+    _current_baseline.malloc_memory_snapshot()->total();\n+  const size_t current_count =\n+    _current_baseline.malloc_memory_snapshot()->total_count();\n+  print_malloc_diff(current_malloced_bytes, current_count, early_malloced_bytes,\n+                    early_count, mtNone);\n+  out->print_cr(\"\\n\");\n@@ -466,0 +480,12 @@\n+  \/\/ mmap diff\n+  out->print(\"mmap: \");\n+  const size_t early_reserved =\n+    _early_baseline.virtual_memory_snapshot()->total_reserved();\n+  const size_t early_committed =\n+    _early_baseline.virtual_memory_snapshot()->total_committed();\n+  const size_t current_reserved =\n+    _current_baseline.virtual_memory_snapshot()->total_reserved();\n+  const size_t current_committed =\n+    _current_baseline.virtual_memory_snapshot()->total_committed();\n+  print_virtual_memory_diff(current_reserved, current_committed, early_reserved,\n+                            early_committed);\n","filename":"src\/hotspot\/share\/nmt\/memReporter.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8332125\n+ * @summary Test to verify correctness of total malloc and mmap diffs\n+ * @key randomness\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:NativeMemoryTracking=summary -Xms32m -Xmx32m TotalMallocMmapDiffTest\n+ *\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class TotalMallocMmapDiffTest {\n+    private static final WhiteBox wb = WhiteBox.getWhiteBox();\n+    private static final long ALLOCATE_SIZE = 250 * 1024 * 1024; \/\/ 250MB\n+    private static final double FUDGE_FACTOR = 0.2;\n+    private static final double UPPER_BOUND = ALLOCATE_SIZE * (1 + FUDGE_FACTOR);\n+    private static final double LOWER_BOUND = ALLOCATE_SIZE * (1 - FUDGE_FACTOR);\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Get baseline\n+        OutputAnalyzer output = NMTTestUtils.startJcmdVMNativeMemory(\"baseline=true\");\n+        output.shouldContain(\"Baseline taken\");\n+\n+        \/\/ Allocate some memory via malloc\n+        long addr = wb.NMTMalloc(ALLOCATE_SIZE);\n+\n+        \/\/ Virtually reserve and commit memory\n+        addr = wb.NMTReserveMemory(ALLOCATE_SIZE);\n+        wb.NMTCommitMemory(addr, ALLOCATE_SIZE);\n+\n+        \/\/ Get NMT diff\n+        output = NMTTestUtils.startJcmdVMNativeMemory(\"summary.diff\", \"scale=1\");\n+\n+        \/\/ Verify malloc diff accounts for memory allocation with a fudge factor\n+        long mallocDiff = getMallocDiff(output);\n+        if (mallocDiff < LOWER_BOUND || mallocDiff > UPPER_BOUND) {\n+            throw new Exception(\"Total malloc diff is incorrect. \" +\n+                    \"Expected malloc diff range: [\" + LOWER_BOUND + \" - \" + UPPER_BOUND + \"]\" +\n+                    \"Actual malloc diff: \" + mallocDiff);\n+        }\n+\n+        \/\/ Verify mmap diff accounts for reserve and commit\n+        long reservedDiff = getReservedDiff(output);\n+        long committedDiff = getCommittedDiff(output);\n+        if (reservedDiff < LOWER_BOUND || reservedDiff > UPPER_BOUND) {\n+            throw new Exception(\"mmap reserved diff is incorrect. \" +\n+                    \"Expected reserved diff range: [\" + LOWER_BOUND + \" - \" + UPPER_BOUND + \"]\" +\n+                    \"Actual reserved diff: \" + reservedDiff);\n+        }\n+        if (committedDiff < LOWER_BOUND || committedDiff > UPPER_BOUND) {\n+            throw new Exception(\"mmap committed diff is incorrect. \" +\n+                    \"Expected committed diff range: [\" + LOWER_BOUND + \" - \" + UPPER_BOUND + \"]\" +\n+                    \"Actual committed diff: \" + committedDiff);\n+        }\n+\n+    }\n+\n+    private static long getMallocDiff(OutputAnalyzer output) {\n+        \/\/ First match should be global malloc diff\n+        String malloc = output.firstMatch(\"malloc=\\\\d* \\\\+\\\\d*\");\n+        return Long.parseLong(malloc.substring(malloc.indexOf(\"+\") + 1));\n+    }\n+\n+    private static long getReservedDiff(OutputAnalyzer output) {\n+        \/\/ First match should be global mmap diff\n+        String reservedDiff = output.firstMatch(\"mmap: reserved=\\\\d* \\\\+\\\\d*\");\n+        return Long.parseLong(reservedDiff.substring(reservedDiff.indexOf(\"+\") + 1));\n+    }\n+\n+    private static long getCommittedDiff(OutputAnalyzer output) {\n+        \/\/ First match should be global mmap diff\n+        String committedDiff = output.firstMatch(\"mmap: reserved=\\\\d* \\\\+\\\\d*, committed=\\\\d* \\\\+\\\\d*\");\n+        committedDiff = committedDiff\n+                .substring(committedDiff.indexOf(\"=\", committedDiff.indexOf(\"=\") + 1));\n+        return Long.parseLong(committedDiff.substring(committedDiff.indexOf(\"+\") + 1));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/TotalMallocMmapDiffTest.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}