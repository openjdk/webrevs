{"files":[{"patch":"@@ -34,0 +34,2 @@\n+DEBUG_ONLY(bool AsyncLogWriter::ignore_recursive_logging = false;)\n+\n@@ -116,1 +118,5 @@\n-    DEBUG_ONLY(ShouldNotReachHere();)\n+#ifdef ASSERT\n+    if (!AsyncLogWriter::ignore_recursive_logging) {\n+      ShouldNotReachHere();\n+    }\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -200,1 +200,2 @@\n- public:\n+public:\n+  DEBUG_ONLY(static bool ignore_recursive_logging;)\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,1 +71,2 @@\n-  NOT_PRODUCT(LOG_TAG(deathtest)) \\\n+  DEBUG_ONLY(LOG_TAG(deathtest)) \/* Log Internal death test tag *\/ \\\n+  DEBUG_ONLY(LOG_TAG(deathtest2)) \/* Log Internal death test tag *\/ \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"logging\/logAsyncWriter.hpp\"\n@@ -80,1 +81,7 @@\n-\n+#ifdef ASSERT\n+  \/\/ If we log for tag deathtest2 then we're testing that recursive logging works.\n+  \/\/ In this case, do not crash when detecting recursive logging.\n+  if (this->contains(LogTagType::_deathtest2)) {\n+    AsyncLogWriter::ignore_recursive_logging = true;\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/logging\/logTagSet.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Perform recursive logging in async UL and observe a crash\n+ * @summary Perform recursive logging in async UL on purpose\n@@ -41,0 +41,1 @@\n+        \/\/ For deathtest we expect the VM to reach ShouldNotReachHere() and die\n@@ -42,1 +43,1 @@\n-            ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:async\", \"-Xlog:all=debug\");\n+            ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:async\", \"-Xlog:os,deathtest=debug\" \"-XX:-CreateCoredumpOnCrash\");\n@@ -45,0 +46,5 @@\n+        \/\/ For deathtest2 we expect the VM to ignore that recursive logging has been detected and handle the case anyway.\n+        ProcessBuilder pb =\n+            ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:async\", \"-Xlog:os,deathtest2=debug\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/AsyncDeathTestDebug.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8349755\n- * @summary Perform recursive logging in async UL and do NOT observe a crash (as opposed to AsyncDeathTestDebug)\n- * @requires vm.flagless\n- * @requires !vm.debug\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run driver AsyncDeathTestDebug\n- *\/\n-\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class AsyncDeathNonProduct {\n-    public static void main(String[] args) throws Exception {\n-        ProcessBuilder pb =\n-            ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:async\", \"-Xlog:all=debug\");\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldHaveExitValue(0);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/AsyncDeathTestNonProduct.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"}]}