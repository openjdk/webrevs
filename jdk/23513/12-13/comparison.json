{"files":[{"patch":"@@ -160,2 +160,0 @@\n-  DEBUG_ONLY(log_debug(deathtest)(\"Induce a recursive log for testing (for crashing)\");)\n-  DEBUG_ONLY(log_debug(deathtest2)(\"Induce a recursive log for testing\");)\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-            ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:async\", \"-Xlog:os,deathtest=debug\", \"-XX:-CreateCoredumpOnCrash\");\n+            ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:async\", \"-Xlog:os,deathtest=debug\", \"-XX:-CreateCoredumpOnCrash\", \"--version\");\n@@ -46,1 +46,2 @@\n-        \/\/ For deathtest2 we expect the VM to ignore that recursive logging has been detected and handle the case anyway.\n+        output.shouldNotContain(\"Induce a recursive log for testing\");\n+        \/\/ For deathtest2 we expect the VM to ignore that recursive logging has been detected and is handled by printing synchronously.\n@@ -48,2 +49,2 @@\n-            ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:async\", \"-Xlog:os,deathtest2=debug\");\n-        OutputAnalyzer output2 = new OutputAnalyzer(pb.start());\n+            ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:async\", \"-Xlog:os,deathtest2=debug\", \"--version\");\n+        OutputAnalyzer output2 = new OutputAnalyzer(pb2.start());\n@@ -51,0 +52,1 @@\n+        output2.shouldContain(\"Induce a recursive log for testing\");\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/AsyncDeathTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}