{"files":[{"patch":"@@ -35,1 +35,3 @@\n- public:\n+  static Thread* _holder;\n+public:\n+  static Thread* current_holder() { return _holder; }\n@@ -39,0 +41,1 @@\n+    _holder = Thread::current_or_null();\n@@ -42,0 +45,2 @@\n+    assert(_holder == Thread::current_or_null(), \"must be\");\n+    _holder = nullptr;\n@@ -46,0 +51,2 @@\n+Thread* AsyncLogWriter::AsyncLogLocker::_holder = nullptr;\n+\n@@ -87,1 +94,37 @@\n-void AsyncLogWriter::enqueue(LogFileStreamOutput& output, const LogDecorations& decorations, const char* msg) {\n+\/\/ This function checks for cases where continuing with asynchronous logging may lead to stability issues, such as a deadlock.\n+\/\/ If this returns true then we give up on logging asynchronously and do so synchronously instead.\n+bool AsyncLogWriter::resort_to_synchronous_logging() {\n+  AsyncLogWriter* alw = AsyncLogWriter::instance();\n+  Thread* holding_thread = AsyncLogWriter::AsyncLogLocker::current_holder();\n+  Thread* this_thread = Thread::current_or_null();\n+  if (this_thread == nullptr) {\n+    \/\/ The current thread is unattached.\n+    return true;\n+  }\n+  \n+  if (holding_thread == this_thread) {\n+    \/\/ A thread, while enqueuing a message, has attempted to log something.\n+    \/\/ Do not log while holding the Async log lock.\n+    \/\/ Try to catch possible occurrences in debug builds.\n+    DEBUG_ONLY(ShouldNotReachHere();)\n+    return true;\n+  }\n+  \n+  if (alw == nullptr) {\n+    \/\/ There is no AsyncLogWriter instance yet.\n+    return true;\n+  }\n+  \n+  if (this_thread == alw) {\n+    \/\/ The async log producer is attempting to log, leading to recursive logging.\n+    return true;\n+  }\n+  \n+  return false;\n+}\n+\n+bool AsyncLogWriter::enqueue(LogFileStreamOutput& output, const LogDecorations& decorations, const char* msg) {\n+  if (resort_to_synchronous_logging()) {\n+    return false;\n+  }\n+\n@@ -89,1 +132,2 @@\n-  enqueue_locked(&output, decorations, msg);\n+  AsyncLogWriter::instance()->enqueue_locked(&output, decorations, msg);\n+  return true;\n@@ -94,1 +138,6 @@\n-void AsyncLogWriter::enqueue(LogFileStreamOutput& output, LogMessageBuffer::Iterator msg_iterator) {\n+bool AsyncLogWriter::enqueue(LogFileStreamOutput& output, LogMessageBuffer::Iterator msg_iterator) {\n+  if (resort_to_synchronous_logging()) {\n+    return false;\n+  }\n+  \n+  \/\/ If we get here we know the AsyncLogWriter is initialized.\n@@ -98,1 +147,1 @@\n-    enqueue_locked(&output, msg_iterator.decorations(), msg_iterator.message());\n+    AsyncLogWriter::instance()->enqueue_locked(&output, msg_iterator.decorations(), msg_iterator.message());\n@@ -100,0 +149,1 @@\n+  return true;\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":55,"deletions":5,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -198,0 +198,2 @@\n+  static bool resort_to_synchronous_logging();\n+\n@@ -199,2 +201,2 @@\n-  void enqueue(LogFileStreamOutput& output, const LogDecorations& decorations, const char* msg);\n-  void enqueue(LogFileStreamOutput& output, LogMessageBuffer::Iterator msg_iterator);\n+  static bool enqueue(LogFileStreamOutput& output, const LogDecorations& decorations, const char* msg);\n+  static bool enqueue(LogFileStreamOutput& output, LogMessageBuffer::Iterator msg_iterator);\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -295,3 +295,1 @@\n-  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n-  if (aio_writer != nullptr) {\n-    aio_writer->enqueue(*this, decorations, msg);\n+  if (AsyncLogWriter::enqueue(*this, decorations, msg)) {\n@@ -309,4 +307,1 @@\n-\n-  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n-  if (aio_writer != nullptr) {\n-    aio_writer->enqueue(*this, msg_iterator);\n+  if (AsyncLogWriter::enqueue(*this, msg_iterator)) {\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -176,3 +176,1 @@\n-  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n-  if (aio_writer != nullptr) {\n-    aio_writer->enqueue(*this, decorations, msg);\n+  if (AsyncLogWriter::enqueue(*this, decorations, msg)) {\n@@ -189,3 +187,1 @@\n-  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n-  if (aio_writer != nullptr) {\n-    aio_writer->enqueue(*this, msg_iterator);\n+  if (AsyncLogWriter::enqueue(*this, msg_iterator)) {\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}