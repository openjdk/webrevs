{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include <string.h>\n@@ -118,1 +119,1 @@\n-int LogFileStreamOutput::write_internal(const LogDecorations& decorations, const char* msg) {\n+int LogFileStreamOutput::write_internal_lines(const LogDecorations& decorations, const char* msg, int msg_len) {\n@@ -122,5 +123,0 @@\n-  if (use_decorations) {\n-    WRITE_LOG_WITH_RESULT_CHECK(write_decorations(decorations), written);\n-    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \" \"), written);\n-  }\n-\n@@ -128,1 +124,21 @@\n-    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", msg), written);\n+    const char* base = msg;\n+    int written_msg = 0;\n+    int decorator_padding = 0;\n+    if (use_decorations) {\n+      WRITE_LOG_WITH_RESULT_CHECK(write_decorations(decorations), decorator_padding);\n+      WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \" \"), written);\n+    }\n+    written += decorator_padding;\n+    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", msg), written_msg);\n+    \/\/ If we have not written the whole message lenght by now then we must have a multi-line message.\n+    \/\/ If we have active decorators then pad the line with an empty decorator string so\n+    \/\/ that the output lines up for clear visual reading.\n+    while (written_msg < msg_len) {\n+      msg = base + written_msg;\n+\n+      if (use_decorations) {\n+        WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"[%*c] \", decorator_padding - 2, ' '), written); \/\/ Substracting 2 because decorator_padding includes the brackets\n+      }\n+      WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", msg), written_msg);\n+    }\n+    written += written_msg;\n@@ -130,0 +146,4 @@\n+    if (use_decorations) {\n+      WRITE_LOG_WITH_RESULT_CHECK(write_decorations(decorations), written);\n+      WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \" \"), written);\n+    }\n@@ -149,0 +169,30 @@\n+int LogFileStreamOutput::write_internal(const LogDecorations& decorations, const char* msg) {\n+  int msg_len = checked_cast<int>(strlen(msg));\n+\n+  \/\/ Do not handle multiline messages if foldmultilines has been specified\n+  if (_fold_multilines) return write_internal_lines(decorations, msg, msg_len);\n+\n+  \/\/ Handle multiline strings: split the string replacing newlines with terminators,\n+  \/\/ and then force write_internal_line to print all of them (i.e. not stopping at the\n+  \/\/ first null but until msg_len bytes are printed)\n+  ALLOW_C_FUNCTION(::malloc, char* dupstr = (char*)::malloc((msg_len + 1) * sizeof(char));)\n+  if (dupstr == nullptr) {\n+    return 0;\n+  }\n+  ALLOW_C_FUNCTION(::memcpy, ::memcpy(dupstr, msg, msg_len + 1);)\n+  char* tmp = dupstr;\n+\n+  char* end = dupstr + msg_len;\n+  while (tmp < end) {\n+    if (*tmp == '\\n') {\n+      *tmp = '\\0';\n+    }\n+    ++tmp;\n+  }\n+  int written = write_internal_lines(decorations, dupstr, msg_len);\n+\n+  ALLOW_C_FUNCTION(::free, ::free(dupstr);)\n+\n+  return written;\n+}\n+\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":58,"deletions":8,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+  int write_internal_lines(const LogDecorations& decorations, const char* msg, int msg_len);\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-    private static Pattern NEWLINE_LOG_PATTERN = Pattern.compile(\"line 1\\\\Rline 2\\\\\\\\nstring\", Pattern.MULTILINE);\n+    private static Pattern NEWLINE_LOG_PATTERN = Pattern.compile(\"line 1\\\\R\\\\[\\\\s+\\\\] line 2\\\\\\\\nstring\", Pattern.MULTILINE);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/FoldMultilinesTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}