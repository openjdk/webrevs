{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include <string.h>\n@@ -122,5 +123,0 @@\n-  if (use_decorations) {\n-    WRITE_LOG_WITH_RESULT_CHECK(write_decorations(decorations), written);\n-    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \" \"), written);\n-  }\n-\n@@ -128,1 +124,23 @@\n-    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", msg), written);\n+    const char* base = msg;\n+    int decorator_padding = 0;\n+    if (use_decorations) {\n+      WRITE_LOG_WITH_RESULT_CHECK(write_decorations(decorations), decorator_padding);\n+      WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \" \"), written);\n+    }\n+    written += decorator_padding;\n+\n+    \/\/ Search for newlines in the string and repeatedly print the substrings that end\n+    \/\/ with each newline.\n+    const char* next = strstr(msg, \"\\n\");\n+    while (next != NULL) {  \/\/ We have some newlines to print\n+      int to_print = next - base;\n+      WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%.*s\\n\", to_print, base), written);\n+      if (use_decorations) {\n+        WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"[%*c] \", decorator_padding - 2, ' '), written); \/\/ Substracting 2 because decorator_padding includes the brackets\n+      }\n+      base = next + 1;\n+      next = strstr(base, \"\\n\");\n+    }\n+\n+    \/\/ Print the end of the message\n+    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", base), written);\n@@ -130,0 +148,4 @@\n+    if (use_decorations) {\n+      WRITE_LOG_WITH_RESULT_CHECK(write_decorations(decorations), written);\n+      WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \" \"), written);\n+    }\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-    private static Pattern NEWLINE_LOG_PATTERN = Pattern.compile(\"line 1\\\\Rline 2\\\\\\\\nstring\", Pattern.MULTILINE);\n+    private static Pattern NEWLINE_LOG_PATTERN = Pattern.compile(\"line 1\\\\R\\\\[\\\\s+\\\\] line 2\\\\\\\\nstring\", Pattern.MULTILINE);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/FoldMultilinesTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}