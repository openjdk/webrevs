{"files":[{"patch":"@@ -38,1 +38,0 @@\n-import java.util.Collections;\n@@ -43,1 +42,0 @@\n-import java.util.WeakHashMap;\n@@ -58,0 +56,1 @@\n+import jdk.internal.util.ReferencedKeySet;\n@@ -203,1 +202,1 @@\n-    private static final Set<Class<?>> WRAPPER_TYPES = Collections.newSetFromMap(new WeakHashMap<>());\n+    private static final Set<Class<?>> WRAPPER_TYPES = ReferencedKeySet.create(false, ReferencedKeySet.concurrentHashMapSupplier());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandleProxies;\n@@ -48,0 +49,1 @@\n+import java.util.stream.Stream;\n@@ -58,1 +60,1 @@\n- * @bug 6983726 8206955 8269351\n+ * @bug 6983726 8206955 8269351 8350549\n@@ -254,0 +256,26 @@\n+    \/**\n+     * Verifies {@code isWrapperInstance} works under race and is thread safe\n+     * like {@code Class} objects are.\n+     *\/\n+    @Test\n+    public void testRacyWrapperCheck() {\n+        MethodHandle noop = MethodHandles.zero(void.class);\n+        var lookup = MethodHandles.lookup();\n+        AtomicInteger counter = new AtomicInteger();\n+        Stream.generate(() -> {\n+            String name = \"MHPRaceIface\" + counter.getAndIncrement();\n+            var bytes = ClassFile.of().build(ClassDesc.of(name), clb ->\n+                    clb.withFlags(ACC_PUBLIC | ACC_ABSTRACT | ACC_INTERFACE)\n+                       .withMethod(\"sam\", MTD_void, ACC_PUBLIC | ACC_ABSTRACT, _ -> {}));\n+            try {\n+                return lookup.defineClass(bytes);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }).parallel()\n+                .map(cl -> MethodHandleProxies.asInterfaceInstance(cl, noop))\n+                .limit(100)\n+                .forEach(inst -> assertTrue(MethodHandleProxies.isWrapperInstance(inst),\n+                        () -> Objects.toIdentityString(inst) + \" should pass wrapper test\"));\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandleProxies\/BasicTest.java","additions":30,"deletions":2,"binary":false,"changes":32,"status":"modified"}]}