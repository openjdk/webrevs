{"files":[{"patch":"@@ -196,0 +196,1 @@\n+  _cur_prepare_concurrent_task_time_ms = 0.0;\n@@ -410,4 +411,1 @@\n-  const double pre_concurrent_start_ms = average_time_ms(ResetMarkingState) +\n-                                         average_time_ms(NoteStartOfMark);\n-\n-  const double sum_ms = pre_concurrent_start_ms +\n+  const double sum_ms = _cur_prepare_concurrent_task_time_ms +\n@@ -422,3 +420,6 @@\n-  if (pre_concurrent_start_ms > 0.0) {\n-    debug_phase(_gc_par_phases[ResetMarkingState]);\n-    debug_phase(_gc_par_phases[NoteStartOfMark]);\n+  \/\/ Concurrent tasks of ResetMarkingState and NoteStartOfMark are triggered during\n+  \/\/ young collection. However, their execution time are not included in _gc_pause_time_ms.\n+  if (_cur_prepare_concurrent_task_time_ms > 0.0) {\n+    debug_time(\"Prepare Concurrent Start\", _cur_prepare_concurrent_task_time_ms);\n+    debug_phase(_gc_par_phases[ResetMarkingState], 1);\n+    debug_phase(_gc_par_phases[NoteStartOfMark], 1);\n@@ -548,0 +549,5 @@\n+\/\/ Root-region-scan-wait, verify-before and verify-after are part of young GC,\n+\/\/ but these are not measured by G1Policy. i.e. these are not included in\n+\/\/ G1Policy::record_young_collection_start() and record_young_collection_end().\n+\/\/ In addition, these are not included in G1GCPhaseTimes::_gc_pause_time_ms.\n+\/\/ See G1YoungCollector::collect().\n@@ -562,3 +568,0 @@\n-  accounted_ms += _root_region_scan_wait_time_ms;\n-  accounted_ms += _cur_verify_before_time_ms;\n-\n@@ -570,1 +573,2 @@\n-  accounted_ms += _cur_verify_after_time_ms;\n+  assert(_gc_pause_time_ms >= accounted_ms, \"GC pause time(%.3lfms) cannot be \"\n+         \"smaller than the sum of each phase(%.3lfms).\", _gc_pause_time_ms, accounted_ms);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -180,0 +180,2 @@\n+  \/\/ Included in above merge and optional-merge time.\n+  double _cur_distribute_log_buffers_time_ms;\n@@ -184,2 +186,0 @@\n-  double _cur_distribute_log_buffers_time_ms;\n-\n@@ -195,0 +195,1 @@\n+  \/\/ Not included in _gc_pause_time_ms\n@@ -214,0 +215,1 @@\n+  \/\/ Not included in _gc_pause_time_ms\n@@ -217,0 +219,3 @@\n+  \/\/ Time spent to trigger concurrent tasks of ResetMarkingState and NoteStartOfMark.\n+  double _cur_prepare_concurrent_task_time_ms;\n+\n@@ -321,0 +326,4 @@\n+  void record_prepare_concurrent_task_time_ms(double ms) {\n+    _cur_prepare_concurrent_task_time_ms = ms;\n+  }\n+\n@@ -392,0 +401,1 @@\n+           _cur_prepare_merge_heap_roots_time_ms +\n@@ -393,1 +403,3 @@\n-           _cur_optional_merge_heap_roots_time_ms;\n+           _cur_optional_prepare_merge_heap_roots_time_ms +\n+           _cur_optional_merge_heap_roots_time_ms +\n+           _cur_collection_nmethod_list_cleanup_time_ms;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1448,0 +1448,1 @@\n+  G1GCPhaseTimes* pt = g1h->phase_times();\n@@ -1456,1 +1457,1 @@\n-      g1h->phase_times()->record_prepare_merge_heap_roots_time(total.seconds() * 1000.0);\n+      pt->record_prepare_merge_heap_roots_time(total.seconds() * 1000.0);\n@@ -1458,1 +1459,1 @@\n-      g1h->phase_times()->record_or_add_optional_prepare_merge_heap_roots_time(total.seconds() * 1000.0);\n+      pt->record_or_add_optional_prepare_merge_heap_roots_time(total.seconds() * 1000.0);\n@@ -1468,0 +1469,2 @@\n+  Ticks start = Ticks::now();\n+\n@@ -1486,0 +1489,6 @@\n+\n+  if (initial_evacuation) {\n+    pt->record_merge_heap_roots_time((Ticks::now() - start).seconds() * 1000.0);\n+  } else {\n+    pt->record_or_add_optional_merge_heap_roots_time((Ticks::now() - start).seconds() * 1000.0);\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -489,0 +489,1 @@\n+    Ticks start = Ticks::now();\n@@ -490,0 +491,1 @@\n+    phase_times()->record_prepare_concurrent_task_time_ms((Ticks::now() - start).seconds() * 1000.0);\n@@ -746,5 +748,1 @@\n-  {\n-    Ticks start = Ticks::now();\n-    rem_set()->merge_heap_roots(true \/* initial_evacuation *\/);\n-    p->record_merge_heap_roots_time((Ticks::now() - start).seconds() * 1000.0);\n-  }\n+  rem_set()->merge_heap_roots(true \/* initial_evacuation *\/);\n@@ -815,0 +813,1 @@\n+  p->record_or_add_optional_evac_time(task_time.seconds() * 1000.0);\n@@ -833,5 +832,1 @@\n-    {\n-      Ticks start = Ticks::now();\n-      rem_set()->merge_heap_roots(false \/* initial_evacuation *\/);\n-      phase_times()->record_or_add_optional_merge_heap_roots_time((Ticks::now() - start).seconds() * 1000.0);\n-    }\n+    rem_set()->merge_heap_roots(false \/* initial_evacuation *\/);\n@@ -839,5 +834,1 @@\n-    {\n-      Ticks start = Ticks::now();\n-      evacuate_next_optional_regions(per_thread_states);\n-      phase_times()->record_or_add_optional_evac_time((Ticks::now() - start).seconds() * 1000.0);\n-    }\n+    evacuate_next_optional_regions(per_thread_states);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"}]}