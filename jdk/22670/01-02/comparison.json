{"files":[{"patch":"@@ -312,1 +312,1 @@\n-     * Checks whether or not the specified codepoint is ignorable by default, per the\n+     * <p>Checks whether or not the specified codepoint is ignorable by default, per the\n@@ -316,0 +316,33 @@\n+     *\n+     * <p>See the original Unicode list of default-ignorable codepoints\n+     * <a href=\"https:\/\/www.unicode.org\/Public\/16.0.0\/ucd\/DerivedCoreProperties.txt\">here<\/a>:\n+     *\n+     * <pre>\n+     * 00AD         # Cf       SOFT HYPHEN\n+     * 034F         # Mn       COMBINING GRAPHEME JOINER\n+     * 061C         # Cf       ARABIC LETTER MARK\n+     * 115F..1160   # Lo   [2] HANGUL CHOSEONG FILLER..HANGUL JUNGSEONG FILLER\n+     * 17B4..17B5   # Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA\n+     * 180B..180D   # Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE\n+     * 180E         # Cf       MONGOLIAN VOWEL SEPARATOR\n+     * 180F         # Mn       MONGOLIAN FREE VARIATION SELECTOR FOUR\n+     * 200B..200F   # Cf   [5] ZERO WIDTH SPACE..RIGHT-TO-LEFT MARK\n+     * 202A..202E   # Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE\n+     * 2060..2064   # Cf   [5] WORD JOINER..INVISIBLE PLUS\n+     * 2065         # Cn       <reserved-2065>\n+     * 2066..206F   # Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES\n+     * 3164         # Lo       HANGUL FILLER\n+     * FE00..FE0F   # Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16\n+     * FEFF         # Cf       ZERO WIDTH NO-BREAK SPACE\n+     * FFA0         # Lo       HALFWIDTH HANGUL FILLER\n+     * FFF0..FFF8   # Cn   [9] <reserved-FFF0>..<reserved-FFF8>\n+     * 1BCA0..1BCA3 # Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP\n+     * 1D173..1D17A # Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE\n+     * E0000        # Cn       <reserved-E0000>\n+     * E0001        # Cf       LANGUAGE TAG\n+     * E0002..E001F # Cn  [30] <reserved-E0002>..<reserved-E001F>\n+     * E0020..E007F # Cf  [96] TAG SPACE..CANCEL TAG\n+     * E0080..E00FF # Cn [128] <reserved-E0080>..<reserved-E00FF>\n+     * E0100..E01EF # Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n+     * E01F0..E0FFF # Cn [3600] <reserved-E01F0>..<reserved-E0FFF>\n+     * <\/pre>\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FontUtilities.java","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -50,3 +50,72 @@\n-    \/\/ font created for this test which contains glyphs for 0-9, a-z, A-Z, space, and most\n-    \/\/ characters with Unicode general category = Format (Cf); the tests will pass if these\n-    \/\/ format glyphs and their advances are ignored during text measurement and text drawing\n+    \/**\n+     * <p>Font created for this test which contains glyphs for 0-9, a-z, A-Z, space, and most\n+     * characters with Unicode general category = Format (Cf); the tests will pass if these\n+     * format glyphs and their advances are ignored during text measurement and text drawing.\n+     *\n+     * <p>The following FontForge Python script was used to generate this font:\n+     *\n+     * <pre>\n+     * import fontforge\n+     * import base64\n+     *\n+     * font = fontforge.font()\n+     * font.encoding = 'UnicodeFull'\n+     * font.design_size = 16\n+     * font.em = 2048\n+     * font.ascent = 1638\n+     * font.descent = 410\n+     * font.familyname = 'Test'\n+     * font.fontname = 'Test'\n+     * font.fullname = 'Test'\n+     * font.copyright = ''\n+     * font.autoWidth(0, 0, 2048)\n+     *\n+     * space = font.createChar(0x20)\n+     * space.width = 569\n+     *\n+     * a = font.createChar(ord('a'))\n+     * pen = a.glyphPen()\n+     * pen.moveTo((100, 100))\n+     * pen.lineTo((100, 200))\n+     * pen.lineTo((500, 200))\n+     * pen.lineTo((500, 100))\n+     * pen.closePath()\n+     * a.draw(pen)\n+     * pen = None\n+     * a.width = 600\n+     *\n+     * chars = 'bcdefghijklmnopqrstuvwxyz' \\\n+     *         'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \\\n+     *         '1234567890' \\\n+     *         '\\u00AD\\u0600\\u0601\\u0602\\u0603\\u0604\\u0605\\u061C\\u06DD\\u070F\\u0890\\u0891\\u08E2\\u180E' \\\n+     *         '\\u200B\\u200C\\u200D\\u200E\\u200F\\u202A\\u202B\\u202C\\u202D\\u202E\\u2060\\u2061\\u2062\\u2063\\u2064' \\\n+     *         '\\u2066\\u2067\\u2068\\u2069\\u206A\\u206B\\u206C\\u206D\\u206E\\u206F\\uFEFF\\uFFF9\\uFFFA\\uFFFB' \\\n+     *         '\\U000110BD\\U000110CD\\U00013430\\U00013431\\U00013432\\U00013433\\U00013434\\U00013435\\U00013436' \\\n+     *         '\\U00013437\\U00013438\\U00013439\\U0001343A\\U0001343B\\U0001343C\\U0001343D\\U0001343E\\U0001343F' \\\n+     *         '\\U0001BCA0\\U0001BCA1\\U0001BCA2\\U0001BCA3\\U0001D173\\U0001D174\\U0001D175\\U0001D176\\U0001D177' \\\n+     *         '\\U0001D178\\U0001D179\\U0001D17A\\U000E0001\\U000E0020\\U000E0021\\U000E007E\\U000E007F'\n+     *\n+     * for char in set(chars):\n+     *   glyph = font.createChar(ord(char))\n+     *   glyph.addReference('a')\n+     *   glyph.useRefsMetrics('a')\n+     *\n+     * ttf = 'test.ttf'     # TrueType\n+     * t64 = 'test.ttf.txt' # TrueType Base64\n+     * pfb = 'test.pfb'     # PostScript Type1\n+     * p64 = 'test.pfb.txt' # PostScript Type1 Base64\n+     *\n+     * font.generate(ttf)\n+     * font.generate(pfb)\n+     *\n+     * with open(ttf, 'rb') as f1:\n+     *   encoded = base64.b64encode(f1.read())\n+     *   with open(t64, 'wb') as f2:\n+     *     f2.write(encoded)\n+     *\n+     * with open(pfb, 'rb') as f3:\n+     *   encoded = base64.b64encode(f3.read())\n+     *   with open(p64, 'wb') as f4:\n+     *     f4.write(encoded)\n+     * <\/pre>\n+     *\/\n@@ -55,1 +124,3 @@\n-    \/\/ same font as above, but in PostScript Type1 (PFB) format\n+    \/**\n+     * Same font as above, but in PostScript Type1 (PFB) format.\n+     *\/\n","filename":"test\/jdk\/java\/awt\/font\/TextLayout\/FormatCharAdvanceTest.java","additions":75,"deletions":4,"binary":false,"changes":79,"status":"modified"}]}