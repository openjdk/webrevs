{"files":[{"patch":"@@ -31,2 +31,0 @@\n-\n-com\/sun\/jdi\/ThreadMemoryLeakTest.java 8304436 generic-all\n","filename":"test\/jdk\/ProblemList-zgc.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n- * @comment run with -Xmx6m so any leak will quickly produce OOME\n- * @run main\/othervm -Xmx6m ThreadMemoryLeakTest\n+ * @comment run with -Xmx7m so any leak will quickly produce OOME\n+ * @run main\/othervm -Xmx7m ThreadMemoryLeakTest\n@@ -98,4 +98,2 @@\n-    static int threadStartCount;\n-    static int threadDeathCount;\n-    private static List<ThreadReference> threads =\n-        Collections.synchronizedList(new ArrayList<ThreadReference>());\n+    static LongAdder threadStartCount = new LongAdder();\n+    static LongAdder threadDeathCount = new LongAdder();\n@@ -104,2 +102,2 @@\n-        threadStartCount++;\n-        if ((threadStartCount % 1000) == 0) {\n+        threadStartCount.increment();\n+        if ((threadStartCount.sum() % 1000) == 0) {\n@@ -107,1 +105,1 @@\n-                               \" threads:\" + threads.size());\n+                    \" threads:\" + (threadStartCount.sum() - threadDeathCount.sum()));\n@@ -109,2 +107,0 @@\n-        ThreadStartEvent tse = (ThreadStartEvent)event;\n-        threads.add(tse.thread());\n@@ -114,2 +110,2 @@\n-        threadDeathCount++;\n-        if ((threadDeathCount % 1000) == 0) {\n+        threadDeathCount.increment();\n+        if ((threadDeathCount.sum() % 1000) == 0) {\n@@ -117,1 +113,1 @@\n-                               \" threads:\" + threads.size());\n+                    \" threads:\" + (threadStartCount.sum() - threadDeathCount.sum()));\n@@ -119,3 +115,0 @@\n-        ThreadDeathEvent tde = (ThreadDeathEvent)event;\n-        ThreadReference thread = tde.thread();\n-        threads.remove(thread);\n","filename":"test\/jdk\/com\/sun\/jdi\/ThreadMemoryLeakTest.java","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"}]}