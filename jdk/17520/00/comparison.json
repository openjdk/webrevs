{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n-    jdk.internal.vm.ci \\\n@@ -82,0 +81,1 @@\n+    jdk.internal.vm.ci \\\n","filename":"make\/conf\/module-loader-map.conf","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,1 +129,2 @@\n-  Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::fullClassName(), true, CHECK); \\\n+  Handle cl = Handle(THREAD, SystemDictionary::java_platform_loader());                  \\\n+  Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::fullClassName(), cl, Handle(), true, CHECK); \\\n@@ -518,1 +519,2 @@\n-  Klass* k = SystemDictionary::resolve_or_fail(class_symbol, true, CHECK_EXIT);                                     \\\n+  Handle cl = Handle(THREAD, SystemDictionary::java_platform_loader());                                             \\\n+  Klass* k = SystemDictionary::resolve_or_fail(class_symbol, cl, Handle(), true, CHECK_EXIT);                       \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -263,2 +263,2 @@\n-  Handle loader(THREAD, method->method_holder()->class_loader());\n-  if (loader.is_null()) {\n+  ClassLoaderData* cld = method->method_holder()->class_loader_data();\n+  if (cld->is_boot_class_loader_data()) {\n@@ -274,0 +274,12 @@\n+#if INCLUDE_JVMCI\n+  \/\/ Look for JVMCI natives if the method is loaded by the platform class loader\n+  \/\/ and the JNI name denotes a JVMCI class. JVMCI native methods loaded\n+  \/\/ by any other class loader will fail to link.\n+  if (cld->is_platform_class_loader_data() && strncmp(\"Java_jdk_vm_ci_\", jni_name, strlen(\"Java_jdk_vm_ci_\")) == 0) {\n+    entry = lookup_special_native(jni_name);\n+    if (entry != nullptr) {\n+      return entry;\n+    }\n+  }\n+#endif\n+\n@@ -278,0 +290,1 @@\n+  Handle loader(THREAD, cld->class_loader());\n","filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -166,0 +166,4 @@\n+grant codeBase \"jrt:\/jdk.internal.vm.ci\" {\n+    permission java.security.AllPermission;\n+};\n+\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Tests that it is possible to load JVMCI classes from a custom class loader and\n+ *          that the loaded class is different than the classes loaded by the platform loader.\n+ *          This test also ensures that only JVMCI classes loaded by the platform loader\n+ *          will have their native methods linked to implementations in the JVM.\n+ * @modules java.base\/jdk.internal.loader:+open\n+ * @compile alt\/ResolvedJavaType.java\n+ * @compile alt\/HotSpotJVMCIRuntime.java\n+ * @compile alt\/CompilerToVM.java\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI LoadAlternativeJVMCI\n+ *\/\n+import java.io.File;\n+import java.net.URL;\n+import java.net.URI;\n+import java.net.URLClassLoader;\n+import java.lang.reflect.*;\n+\n+import jdk.internal.loader.ClassLoaders;\n+\n+public class LoadAlternativeJVMCI {\n+    public static void main(String[] args) throws Exception {\n+        String[] testClasses = System.getProperty(\"test.classes\").split(File.pathSeparator);\n+        URL[] cp = new URL[testClasses.length];\n+        for (int i = 0; i < testClasses.length; i++) {\n+            String e = testClasses[i];\n+            if (new File(e).isDirectory()) {\n+                e = e + File.separator;\n+            }\n+            cp[i] = new URI(\"file:\" + e).toURL();\n+        }\n+\n+        Field blField = ClassLoaders.class.getDeclaredField(\"BOOT_LOADER\");\n+        blField.setAccessible(true);\n+        ClassLoader boot = (ClassLoader) blField.get(null);\n+        URLClassLoader ucl = new URLClassLoader(cp, boot);\n+        ClassLoader pcl = ClassLoader.getPlatformClassLoader();\n+\n+        String[] names = {\n+            \"jdk.vm.ci.meta.ResolvedJavaType\",\n+            \"jdk.vm.ci.hotspot.CompilerToVM\",\n+            \"jdk.vm.ci.hotspot.HotSpotJVMCIRuntime\"\n+        };\n+        for (String name : names) {\n+            Class<?> customClass = ucl.loadClass(name);\n+            Class<?> platformClass = pcl.loadClass(name);\n+            if (customClass.equals(platformClass)) {\n+                throw new AssertionError(String.format(\"%s loaded by %s should be distinct from version loaded by %s\",\n+                                name, ucl, pcl));\n+            }\n+            Class<?> customClassAgain = ucl.loadClass(name);\n+            if (!customClassAgain.equals(customClass)) {\n+                throw new AssertionError(String.format(\"%s loaded twice by %s should produce the same class\",\n+                                name, ucl));\n+            }\n+\n+            if (name.equals(\"jdk.vm.ci.hotspot.CompilerToVM\")) {\n+                \/\/ Detect refactoring of CompilerToVM.registerNatives so that alt\/CompilerToVM.java\n+                \/\/ can be adjusted accordingly.\n+                try {\n+                    platformClass.getDeclaredMethod(\"registerNatives\");\n+                } catch (NoSuchMethodException e) {\n+                    throw new AssertionError(\"missing method in platform JVMCI class: \" + e);\n+                }\n+\n+                \/\/ Only JVMCI classes loaded by the platform class loader can link to native\n+                \/\/ method implementations in HotSpot.\n+                try {\n+                    Class.forName(name, true, ucl);\n+                    throw new AssertionError(\"expected UnsatisfiedLinkError\");\n+                } catch (UnsatisfiedLinkError e) {\n+                    if (!e.getMessage().contains(name + \".registerNatives\")) {\n+                        throw new AssertionError(\"unexpected message: \" + e.getMessage());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/LoadAlternativeJVMCI.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.vm.ci.hotspot;\n+\n+\/**\n+ * Alternative version of CompilerToVM\n+ * @see LoadAlternativeJVMCI\n+ *\/\n+public class CompilerToVM {\n+\n+    private static native void registerNatives();\n+\n+    static {\n+        registerNatives();\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/alt\/CompilerToVM.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.vm.ci.hotspot;\n+\n+\/**\n+ * Alternative version of HotSpotJVMCIRuntime\n+ * @see LoadAlternativeJVMCI\n+ *\/\n+public class HotSpotJVMCIRuntime {\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/alt\/HotSpotJVMCIRuntime.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.vm.ci.meta;\n+\n+\/**\n+ * Alternative version of HotSpotJVMCIRuntime\n+ * @see LoadAlternativeJVMCI\n+ *\/\n+public class ResolvedJavaType {\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/alt\/ResolvedJavaType.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"}]}