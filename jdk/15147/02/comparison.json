{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.util.List;\n@@ -91,1 +92,2 @@\n-        for (RecordedEvent re : Events.fromRecording(r)) {\n+        List<RecordedEvent> events = Events.fromRecording(r);\n+        for (RecordedEvent re : events) {\n@@ -130,1 +132,1 @@\n-        for (RecordedEvent re : Events.fromRecording(r)) {\n+        for (RecordedEvent re : events) {\n@@ -134,1 +136,1 @@\n-        RecordedEvent grandpa = findEvent(r, GrandpaEvent.class.getName());\n+        RecordedEvent grandpa = findEvent(events, GrandpaEvent.class.getName());\n@@ -141,1 +143,1 @@\n-        RecordedEvent parent = findEvent(r, ParentEvent.class.getName());\n+        RecordedEvent parent = findEvent(events, ParentEvent.class.getName());\n@@ -151,1 +153,1 @@\n-        RecordedEvent me = findEvent(r, MeEvent.class.getName());\n+        RecordedEvent me = findEvent(events, MeEvent.class.getName());\n@@ -165,2 +167,2 @@\n-    private static RecordedEvent findEvent(Recording r, String name) throws Exception {\n-        for (RecordedEvent re : Events.fromRecording(r)) {\n+    private static RecordedEvent findEvent(List<RecordedEvent> events, String name) throws Exception {\n+        for (RecordedEvent re : events) {\n","filename":"test\/jdk\/jdk\/jfr\/api\/event\/TestExtends.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-            for (RecordedEvent event : Events.fromRecording(recording)) {\n+            for (RecordedEvent event : events) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZAllocationStallEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-            for (RecordedEvent event : Events.fromRecording(recording)) {\n+            for (RecordedEvent event : events) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestZPageAllocationEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,2 @@\n-        if (!checkCollectors(recording, expectedYoungCollector, expectedOldCollector)) {\n+        List<RecordedEvent> allEvents = Events.fromRecording(recording);\n+        if (!checkCollectors(allEvents, expectedYoungCollector, expectedOldCollector)) {\n@@ -54,1 +55,1 @@\n-        List<RecordedEvent> events = GCHelper.removeFirstAndLastGC(Events.fromRecording(recording));\n+        List<RecordedEvent> events = GCHelper.removeFirstAndLastGC(allEvents);\n@@ -193,2 +194,2 @@\n-    private static boolean checkCollectors(Recording recording, String expectedYoung, String expectedOld) throws Exception {\n-        for (RecordedEvent event : Events.fromRecording(recording)) {\n+    private static boolean checkCollectors(List<RecordedEvent> events, String expectedYoung, String expectedOld) throws Exception {\n+        for (RecordedEvent event : events) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/heapsummary\/HeapSummaryEventAllGcs.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,2 @@\n-        for (RecordedEvent event : Events.fromRecording(recording)) {\n+        List<RecordedEvent> events = Events.fromRecording(recording);\n+        for (RecordedEvent event : events) {\n@@ -60,1 +61,0 @@\n-        List<RecordedEvent> events= Events.fromRecording(recording);\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/objectcount\/ObjectCountAfterGCEvent.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,1 +103,1 @@\n-                    Events.hasEvent(recording, EventNames.ClassUnload);\n+                    Events.hasEvent(events, EventNames.ClassUnload);\n@@ -106,1 +106,1 @@\n-                    Events.hasEvent(recording, EventNames.OldObjectSample);\n+                    Events.hasEvent(events, EventNames.OldObjectSample);\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestMetadataRetention.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,1 @@\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n@@ -73,1 +74,1 @@\n-                for (RecordedEvent event : Events.fromRecording(recording)) {\n+                for (RecordedEvent event : events) {\n@@ -84,1 +85,1 @@\n-            for (RecordedEvent event : Events.fromRecording(recording)) {\n+            for (RecordedEvent event : events) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestSafepointEvents.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-        for (RecordedEvent event : Events.fromRecording(recording)) {\n+        for (RecordedEvent event : events) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestSyncOnValueBasedClassEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-        for (RecordedEvent event : Events.fromRecording(recording)) {\n+        for (RecordedEvent event : events) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestVMOperation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.util.List;\n@@ -29,0 +30,1 @@\n+import jdk.jfr.consumer.RecordedEvent;\n@@ -61,2 +63,3 @@\n-        Events.hasEvent(r, SimpleEvent.class.getName());\n-        Events.hasEvent(r, TestEvent.class.getName());\n+        List<RecordedEvent> events = Events.fromRecording(r);\n+        Events.hasEvent(events, SimpleEvent.class.getName());\n+        Events.hasEvent(events, TestEvent.class.getName());\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestRetransform.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -276,0 +276,1 @@\n+    private static long lastId = -1;\n@@ -277,0 +278,4 @@\n+        if (recording.getId() == lastId) {\n+            throw new IOException(\"Recording with id \" + lastId + \" has already been dumped. Store the results in a List<RecordedEvent> instead of dumping the recording again\");\n+        }\n+        lastId = recording.getId();\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/Events.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}