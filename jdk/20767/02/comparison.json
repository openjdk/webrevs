{"files":[{"patch":"@@ -252,0 +252,2 @@\n+            } else {\n+                inflateNonAscii(singleBytes, hash);\n@@ -253,17 +255,29 @@\n-            else {\n-                char[] chararr = new char[rawLen];\n-                int chararr_count = singleBytes;\n-                \/\/ Inflate prefix of bytes to characters\n-                JLA.inflateBytesToChars(rawBytes, offset, chararr, 0, singleBytes);\n-\n-                int px = offset + singleBytes;\n-                int utfend = offset + rawLen;\n-                while (px < utfend) {\n-                    int c = (int) rawBytes[px] & 0xff;\n-                    switch (c >> 4) {\n-                        case 0, 1, 2, 3, 4, 5, 6, 7: {\n-                            \/\/ 0xxx xxxx\n-                            px++;\n-                            chararr[chararr_count++] = (char) c;\n-                            hash = 31 * hash + c;\n-                            break;\n+        }\n+\n+        private void inflateNonAscii(int singleBytes, int hash) throws ConstantPoolException {\n+            char[] chararr = new char[rawLen];\n+            int chararr_count = singleBytes;\n+            \/\/ Inflate prefix of bytes to characters\n+            JLA.inflateBytesToChars(rawBytes, offset, chararr, 0, singleBytes);\n+\n+            int px = offset + singleBytes;\n+            int utfend = offset + rawLen;\n+            while (px < utfend) {\n+                int c = (int) rawBytes[px] & 0xff;\n+                switch (c >> 4) {\n+                    case 0, 1, 2, 3, 4, 5, 6, 7: {\n+                        \/\/ 0xxx xxxx\n+                        px++;\n+                        chararr[chararr_count++] = (char) c;\n+                        hash = 31 * hash + c;\n+                        break;\n+                    }\n+                    case 12, 13: {\n+                        \/\/ 110x xxxx  10xx xxxx\n+                        px += 2;\n+                        if (px > utfend) {\n+                            throw malformedInput(utfend);\n+                        }\n+                        int char2 = rawBytes[px - 1];\n+                        if ((char2 & 0xC0) != 0x80) {\n+                            throw malformedInput(px);\n@@ -271,14 +285,10 @@\n-                        case 12, 13: {\n-                            \/\/ 110x xxxx  10xx xxxx\n-                            px += 2;\n-                            if (px > utfend) {\n-                                throw malformedInput(utfend);\n-                            }\n-                            int char2 = rawBytes[px - 1];\n-                            if ((char2 & 0xC0) != 0x80) {\n-                                throw malformedInput(px);\n-                            }\n-                            char v = (char) (((c & 0x1F) << 6) | (char2 & 0x3F));\n-                            chararr[chararr_count++] = v;\n-                            hash = 31 * hash + v;\n-                            break;\n+                        char v = (char) (((c & 0x1F) << 6) | (char2 & 0x3F));\n+                        chararr[chararr_count++] = v;\n+                        hash = 31 * hash + v;\n+                        break;\n+                    }\n+                    case 14: {\n+                        \/\/ 1110 xxxx  10xx xxxx  10xx xxxx\n+                        px += 3;\n+                        if (px > utfend) {\n+                            throw malformedInput(utfend);\n@@ -286,15 +296,4 @@\n-                        case 14: {\n-                            \/\/ 1110 xxxx  10xx xxxx  10xx xxxx\n-                            px += 3;\n-                            if (px > utfend) {\n-                                throw malformedInput(utfend);\n-                            }\n-                            int char2 = rawBytes[px - 2];\n-                            int char3 = rawBytes[px - 1];\n-                            if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {\n-                                throw malformedInput(px - 1);\n-                            }\n-                            char v = (char) (((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F));\n-                            chararr[chararr_count++] = v;\n-                            hash = 31 * hash + v;\n-                            break;\n+                        int char2 = rawBytes[px - 2];\n+                        int char3 = rawBytes[px - 1];\n+                        if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) {\n+                            throw malformedInput(px - 1);\n@@ -302,3 +301,4 @@\n-                        default:\n-                            \/\/ 10xx xxxx,  1111 xxxx\n-                            throw malformedInput(px);\n+                        char v = (char) (((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | (char3 & 0x3F));\n+                        chararr[chararr_count++] = v;\n+                        hash = 31 * hash + v;\n+                        break;\n@@ -306,0 +306,3 @@\n+                    default:\n+                        \/\/ 10xx xxxx,  1111 xxxx\n+                        throw malformedInput(px);\n@@ -307,4 +310,0 @@\n-                this.contentHash = hash;\n-                charLen = chararr_count;\n-                this.chars = chararr;\n-                state = State.CHAR;\n@@ -312,0 +311,4 @@\n+            this.contentHash = hash;\n+            charLen = chararr_count;\n+            this.chars = chararr;\n+            state = State.CHAR;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":56,"deletions":53,"binary":false,"changes":109,"status":"modified"}]}