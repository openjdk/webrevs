{"files":[{"patch":"@@ -1366,1 +1366,0 @@\n-  SubTasksDone                               _sub_tasks;\n@@ -1370,0 +1369,1 @@\n+  volatile bool                              _code_cache_claimed;\n@@ -1372,5 +1372,4 @@\n-  enum PSAdjustSubTask {\n-    PSAdjustSubTask_code_cache,\n-\n-    PSAdjustSubTask_num_elements\n-  };\n+  bool try_claim_code_cache_task() {\n+    return AtomicAccess::load(&_code_cache_claimed) == false\n+        && AtomicAccess::cmpxchg(&_code_cache_claimed, false, true) == false;\n+  }\n@@ -1382,1 +1381,0 @@\n-    _sub_tasks(PSAdjustSubTask_num_elements),\n@@ -1384,1 +1382,2 @@\n-    _nworkers(nworkers) {\n+    _nworkers(nworkers),\n+    _code_cache_claimed(false) {\n@@ -1390,2 +1389,0 @@\n-    ParCompactionManager* cm = ParCompactionManager::gc_thread_compaction_manager(worker_id);\n-    cm->preserved_marks()->adjust_during_full_gc();\n@@ -1393,1 +1390,4 @@\n-      \/\/ adjust pointers in all spaces\n+      \/\/ Pointers in heap.\n+      ParCompactionManager* cm = ParCompactionManager::gc_thread_compaction_manager(worker_id);\n+      cm->preserved_marks()->adjust_during_full_gc();\n+\n@@ -1396,0 +1396,1 @@\n+\n@@ -1397,5 +1398,1 @@\n-      ResourceMark rm;\n-      Threads::possibly_parallel_oops_do(_nworkers > 1, &pc_adjust_pointer_closure, nullptr);\n-    }\n-    _oop_storage_iter.oops_do(&pc_adjust_pointer_closure);\n-    {\n+      \/\/ All (strong and weak) CLDs.\n@@ -1405,0 +1402,1 @@\n+\n@@ -1406,0 +1404,13 @@\n+      \/\/ Threads stack frames. No need to visit on-stack nmethods, because all\n+      \/\/ nmethods are visited in one go via CodeCache::nmethods_do.\n+      ResourceMark rm;\n+      Threads::possibly_parallel_oops_do(_nworkers > 1, &pc_adjust_pointer_closure, nullptr);\n+      if (try_claim_code_cache_task()) {\n+        NMethodToOopClosure adjust_code(&pc_adjust_pointer_closure, NMethodToOopClosure::FixRelocations);\n+        CodeCache::nmethods_do(&adjust_code);\n+      }\n+    }\n+\n+    {\n+      \/\/ VM internal strong and weak roots.\n+      _oop_storage_iter.oops_do(&pc_adjust_pointer_closure);\n@@ -1409,5 +1420,0 @@\n-    if (_sub_tasks.try_claim_task(PSAdjustSubTask_code_cache)) {\n-      NMethodToOopClosure adjust_code(&pc_adjust_pointer_closure, NMethodToOopClosure::FixRelocations);\n-      CodeCache::nmethods_do(&adjust_code);\n-    }\n-    _sub_tasks.all_tasks_claimed();\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":27,"deletions":21,"binary":false,"changes":48,"status":"modified"}]}