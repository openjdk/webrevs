{"files":[{"patch":"@@ -467,1 +467,1 @@\n-                && (addModules.isEmpty() || addModulesFromRuntimeImage(addModules))\n+                && (addModules.isEmpty() || allJrt(cf, addModules))\n@@ -496,28 +496,0 @@\n-    \/**\n-     * Check if all addModules are from the runtime image.\n-     *\/\n-    private static boolean addModulesFromRuntimeImage(Set<String> addModules) {\n-        for (String mod : addModules) {\n-            if (!isModuleInRuntimeImage(SystemModuleFinders.ofSystem(), mod)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-    \/**\n-     * Check if a module is in the runtime image.\n-     *\/\n-    private static boolean isModuleInRuntimeImage(ModuleFinder finder, String moduleName) {\n-        String scheme = finder.find(moduleName)\n-                              .stream()\n-                              .map(ModuleReference::location)\n-                              .flatMap(Optional::stream)\n-                              .findAny()\n-                              .map(URI::getScheme)\n-                              .orElse(null);\n-        if (\"jrt\".equalsIgnoreCase(scheme))\n-            return true;\n-        else\n-            return false;\n-    }\n-\n@@ -544,0 +516,12 @@\n+    \/**\n+     * Returns true if all modules named in the given set are in the Configuration and\n+     * the run-time image.\n+     *\/\n+    private static boolean allJrt(Configuration cf, Set<String> moduleNames) {\n+        return !moduleNames.stream()\n+                .filter(mn -> !mn.equals(ALL_SYSTEM))\n+                .map(mn -> cf.findModule(mn).orElseThrow())\n+                .map(m -> m.reference().location().orElseThrow())\n+                .anyMatch(uri -> !uri.getScheme().equalsIgnoreCase(\"jrt\"));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":13,"deletions":29,"binary":false,"changes":42,"status":"modified"}]}