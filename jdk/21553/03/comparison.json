{"files":[{"patch":"@@ -239,1 +239,3 @@\n-  if (Arguments::is_internal_module_property(key) && !Arguments::is_module_path_property(key)) {\n+  if (Arguments::is_internal_module_property(key) &&\n+      !Arguments::is_module_path_property(key) &&\n+      !Arguments::is_add_modules_property(key)) {\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -937,1 +937,1 @@\n-  module_paths->sort(ClassLoaderExt::compare_module_path_by_name);\n+  module_paths->sort(ClassLoaderExt::compare_module_names);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -406,0 +406,1 @@\n+  CDS_JAVA_HEAP_ONLY(Modules::serialize_addmods_names(soc);)\n@@ -505,0 +506,2 @@\n+  \/\/ Write module names from --add-modules into archive\n+  CDS_JAVA_HEAP_ONLY(Modules::dump_addmods_names();)\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-int ClassLoaderExt::compare_module_path_by_name(const char** p1, const char** p2) {\n+int ClassLoaderExt::compare_module_names(const char** p1, const char** p2) {\n@@ -124,1 +124,1 @@\n-  module_paths->sort(compare_module_path_by_name);\n+  module_paths->sort(compare_module_names);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  static int compare_module_path_by_name(const char** p1, const char** p2);\n+  static int compare_module_names(const char** p1, const char** p2);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"classfile\/classLoaderExt.hpp\"\n@@ -568,0 +569,1 @@\n+char* Modules::_archived_addmods_names = nullptr;\n@@ -608,0 +610,94 @@\n+void Modules::dump_addmods_names() {\n+  unsigned int count = Arguments::addmods_count();\n+  const char* addmods_names = get_addmods_names_as_sorted_string();\n+  if (addmods_names != nullptr) {\n+    _archived_addmods_names = ArchiveBuilder::current()->ro_strdup(addmods_names);\n+  }\n+  ArchivePtrMarker::mark_pointer(&_archived_addmods_names);\n+}\n+\n+void Modules::serialize_addmods_names(SerializeClosure* soc) {\n+  soc->do_ptr(&_archived_addmods_names);\n+  if (soc->reading()) {\n+    bool disable = false;\n+    if (_archived_addmods_names[0] != '\\0') {\n+      if (Arguments::addmods_count() == 0) {\n+        log_info(cds)(\"--add-modules module name(s) found in archive but not specified during runtime: %s\",\n+            _archived_addmods_names);\n+        disable = true;\n+      } else {\n+        const char* addmods_names = get_addmods_names_as_sorted_string();\n+        if (strcmp((const char*)_archived_addmods_names, addmods_names) != 0) {\n+          log_info(cds)(\"Mismatched --add-modules module name(s).\");\n+          log_info(cds)(\"  dump time: %s runtime: %s\", _archived_addmods_names, addmods_names);\n+          disable = true;\n+        }\n+      }\n+    } else {\n+      if (Arguments::addmods_count() > 0) {\n+        log_info(cds)(\"--add-modules module name(s) specified during runtime but not found in archive: %s\",\n+                      get_addmods_names_as_sorted_string());\n+        disable = true;\n+      }\n+    }\n+    if (disable) {\n+      log_info(cds)(\"Disabling optimized module handling\");\n+      CDSConfig::stop_using_optimized_module_handling();\n+    }\n+    log_info(cds)(\"optimized module handling: %s\", CDSConfig::is_using_optimized_module_handling() ? \"enabled\" : \"disabled\");\n+    log_info(cds)(\"full module graph: %s\", CDSConfig::is_using_full_module_graph() ? \"enabled\" : \"disabled\");\n+  }\n+}\n+\n+const char* Modules::get_addmods_names_as_sorted_string() {\n+  ResourceMark rm;\n+  const int max_digits = 3;\n+  const int extra_symbols_count = 2; \/\/ includes '.', '\\0'\n+  size_t prop_len = strlen(\"jdk.module.addmods\") + max_digits + extra_symbols_count;\n+  char* prop_name = resource_allocate_bytes(prop_len);\n+  GrowableArray<const char*> list;\n+  for (unsigned int i = 0; i < Arguments::addmods_count(); i++) {\n+    jio_snprintf(prop_name, prop_len, \"jdk.module.addmods.%d\", i);\n+    const char* prop_value = Arguments::get_property(prop_name);\n+    char* p = resource_allocate_bytes(strlen(prop_value) + 1);\n+    strcpy(p, prop_value);\n+    while (*p == ',') p++; \/\/ skip leading commas\n+    while (*p) {\n+      char* next = strchr(p, ',');\n+      if (next == nullptr) {\n+        \/\/ no more commas, p is the last element\n+        list.append(p);\n+        break;\n+      } else {\n+        *next = 0;\n+        list.append(p);\n+        p = next + 1;\n+      }\n+    }\n+  }\n+\n+  \/\/ Example:\n+  \/\/ --add-modules=java.compiler --add-modules=java.base,java.base,,\n+  \/\/\n+  \/\/ list[0] = \"java.compiler\"\n+  \/\/ list[1] = \"java.base\"\n+  \/\/ list[2] = \"java.base\"\n+  \/\/ list[3] = \"\"\n+  \/\/ list[4] = \"\"\n+  list.sort(ClassLoaderExt::compare_module_names);\n+\n+  const char* prefix = \"\";\n+  stringStream st;\n+  const char* last_string = \"\"; \/\/ This also filters out all empty strings\n+  for (int i = 0; i < list.length(); i++) {\n+    const char* m = list.at(i);\n+    if (strcmp(m, last_string) != 0) { \/\/ filter out duplicates\n+      st.print(\"%s%s\", prefix, m);\n+      last_string = m;\n+      prefix = \"\\n\";\n+    }\n+  }\n+\n+  return (const char*)os::strdup(st.as_string()); \/\/ Example: \"java.base,java.compiler\"\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":96,"deletions":0,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -64,0 +64,3 @@\n+  static void dump_addmods_names() NOT_CDS_JAVA_HEAP_RETURN;\n+  static void serialize_addmods_names(SerializeClosure* soc) NOT_CDS_JAVA_HEAP_RETURN;\n+  static const char* get_addmods_names_as_sorted_string() NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n@@ -67,0 +70,1 @@\n+  static char* _archived_addmods_names;\n","filename":"src\/hotspot\/share\/classfile\/modules.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+unsigned int Arguments::_addmods_count          = 0;\n@@ -339,0 +340,4 @@\n+bool Arguments::is_add_modules_property(const char* key) {\n+  return (strcmp(key, MODULE_PROPERTY_PREFIX ADDMODS) == 0);\n+}\n+\n@@ -1777,1 +1782,0 @@\n-unsigned int addmods_count = 0;\n@@ -1803,1 +1807,1 @@\n-      if (!create_numbered_module_property(\"jdk.module.addmods\", \"jdk.internal.vm.ci\", addmods_count++)) {\n+      if (!create_numbered_module_property(\"jdk.module.addmods\", \"jdk.internal.vm.ci\", _addmods_count++)) {\n@@ -1812,1 +1816,1 @@\n-    if (!create_numbered_module_property(\"jdk.module.addmods\", \"jdk.jfr\", addmods_count++)) {\n+    if (!create_numbered_module_property(\"jdk.module.addmods\", \"jdk.jfr\", _addmods_count++)) {\n@@ -2239,1 +2243,1 @@\n-      if (!create_numbered_module_property(\"jdk.module.addmods\", tail, addmods_count++)) {\n+      if (!create_numbered_module_property(\"jdk.module.addmods\", tail, _addmods_count++)) {\n@@ -2326,1 +2330,1 @@\n-        if (!create_numbered_module_property(\"jdk.module.addmods\", \"java.instrument\", addmods_count++)) {\n+        if (!create_numbered_module_property(\"jdk.module.addmods\", \"java.instrument\", _addmods_count++)) {\n@@ -2507,1 +2511,1 @@\n-        if (!create_numbered_module_property(\"jdk.module.addmods\", \"jdk.management.agent\", addmods_count++)) {\n+        if (!create_numbered_module_property(\"jdk.module.addmods\", \"jdk.management.agent\", _addmods_count++)) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -199,0 +199,2 @@\n+  \/\/ number of unique modules specified in the --add-modules option\n+  static unsigned int _addmods_count;\n@@ -464,0 +466,2 @@\n+  static bool is_add_modules_property(const char* key);\n+  static unsigned int addmods_count() { return  _addmods_count; }\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Set;\n@@ -46,0 +47,1 @@\n+    private final Set<String> addModules;\n@@ -52,1 +54,2 @@\n-                                String mainModule) {\n+                                String mainModule,\n+                                Set<String> addModules) {\n@@ -59,0 +62,1 @@\n+        this.addModules = addModules;\n@@ -81,0 +85,12 @@\n+    static boolean sameAddModules(Set<String> addModules) {\n+        if (archivedModuleGraph.addModules == null || addModules == null) {\n+            return false;\n+        }\n+\n+        if (archivedModuleGraph.addModules.size() != addModules.size()) {\n+            return false;\n+        }\n+\n+        return archivedModuleGraph.addModules.containsAll(addModules);\n+    }\n+\n@@ -84,1 +100,1 @@\n-    static ArchivedModuleGraph get(String mainModule) {\n+    static ArchivedModuleGraph get(String mainModule, Set<String> addModules) {\n@@ -86,1 +102,1 @@\n-        if ((graph != null) && Objects.equals(graph.mainModule, mainModule)) {\n+        if ((graph != null) && Objects.equals(graph.mainModule, mainModule) && sameAddModules(addModules)) {\n@@ -101,1 +117,2 @@\n-                        String mainModule) {\n+                        String mainModule,\n+                        Set<String> addModules) {\n@@ -107,1 +124,2 @@\n-                                                      mainModule);\n+                                                      mainModule,\n+                                                      addModules);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ArchivedModuleGraph.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -144,1 +144,0 @@\n-               getProperty(\"jdk.module.addmods.0\") == null  &&    \/\/ --add-modules\n@@ -215,1 +214,1 @@\n-        ArchivedModuleGraph archivedModuleGraph = ArchivedModuleGraph.get(mainModule);\n+        ArchivedModuleGraph archivedModuleGraph = ArchivedModuleGraph.get(mainModule, addModules);\n@@ -218,1 +217,0 @@\n-                && addModules.isEmpty()\n@@ -469,1 +467,0 @@\n-                && addModules.isEmpty()\n@@ -481,1 +478,2 @@\n-                                        mainModule);\n+                                        mainModule,\n+                                        addModules);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,231 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8319343\n+ * @summary Test handling of the --add-modules option.\n+ * @requires vm.cds.write.archived.java.heap\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @run driver AddmodsOption\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class AddmodsOption {\n+    public static void main(String[] args) throws Exception {\n+        final String moduleOption = \"jdk.httpserver\/sun.net.httpserver.simpleserver.Main\";\n+        final String incubatorModule = \"jdk.incubator.vector\";\n+        final String jconsoleModule = \"jdk.jconsole\";\n+        final String multiModules = \",,jdk.jconsole,jdk.compiler,,\";\n+        final String allSystem = \"ALL-SYSTEM\";\n+        final String allModulePath = \"ALL-MODULE-PATH\";\n+        final String loggingOption = \"-Xlog:cds=debug,cds+module=debug,cds+heap=info,module=trace\";\n+        final String versionPattern = \"java.[0-9][0-9][-].*\";\n+        final String subgraphCannotBeUsed = \"subgraph jdk.internal.module.ArchivedBootLayer cannot be used because full module graph is disabled\";\n+        final String warningIncubator = \"WARNING: Using incubator modules: jdk.incubator.vector\";\n+        String archiveName = TestCommon.getNewArchiveName(\"addmods-option\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+\n+        \/\/ dump a base archive with --add-modules jdk.jconsole -m jdk.httpserver\n+        OutputAnalyzer oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--add-modules\", jconsoleModule,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ same modules specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-modules\", jconsoleModule,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          \/\/ version of the jdk.httpserver module, e.g. java 22-ea\n+          .shouldMatch(versionPattern)\n+          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.jconsole\")\n+          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n+\n+        \/\/ different --add-modules specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-modules\", incubatorModule,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(\"Mismatched --add-modules module name(s).\")\n+          .shouldContain(\"dump time: jdk.jconsole runtime: jdk.incubator.vector\")\n+          .shouldContain(subgraphCannotBeUsed);\n+\n+        \/\/ no module specified during runtime\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(\"Module jdk.httpserver specified during dump time but not during runtime\")\n+          .shouldContain(subgraphCannotBeUsed);\n+\n+        \/\/ dump an archive without the --add-modules option\n+        archiveName = TestCommon.getNewArchiveName(\"no-addmods-option\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ run with --add-modules option\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-modules\", jconsoleModule,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(\"--add-modules module name(s) specified during runtime but not found in archive: jdk.jconsole\")\n+          \/\/ version of the jdk.httpserver module, e.g. java 22-ea\n+          .shouldMatch(versionPattern)\n+          .shouldContain(subgraphCannotBeUsed);\n+\n+        \/\/ dump an archive with an incubator module, -add-modules jdk.incubator.vector\n+        archiveName = TestCommon.getNewArchiveName(\"incubator-module\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--add-modules\", incubatorModule,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          \/\/ module graph won't be archived with an incubator module\n+          .shouldContain(\"archivedBootLayer not available, disabling full module graph\");\n+\n+        \/\/ run with the same incubator module\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-modules\", incubatorModule,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldContain(\"full module graph: disabled\")\n+          \/\/ module is not restored from archive\n+          .shouldContain(\"define_module(): creation of module: jdk.incubator.vector\")\n+          .shouldContain(\"WARNING: Using incubator modules: jdk.incubator.vector\")\n+          .shouldContain(\"subgraph jdk.internal.module.ArchivedBootLayer is not recorde\")\n+          .shouldHaveExitValue(0);\n+\n+        \/\/ dump an archive with JVMCI option which indirectly adds the\n+        \/\/ jdk.internal.vm.ci module using the --add-modules option\n+        archiveName = TestCommon.getNewArchiveName(\"jvmci-module\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-XX:+EagerJVMCI\", \"-XX:+UseJVMCICompiler\",\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ run with the JVMCI option\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-XX:+EagerJVMCI\", \"-XX:+UseJVMCICompiler\",\n+            \"-version\");\n+        try {\n+            oa.shouldHaveExitValue(0)\n+              .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.internal.vm.ci\");\n+        } catch (RuntimeException re) {\n+            \/\/ JVMCI compile may not be available\n+            oa.shouldHaveExitValue(1)\n+              .shouldContain(\"Cannot use JVMCI compiler: No JVMCI compiler found\");\n+        }\n+\n+        \/\/ dump an archive with multiple modules in -add-modules\n+        archiveName = TestCommon.getNewArchiveName(\"muti-modules\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--add-modules\", multiModules,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ run with the same multiple modules with a duplicate module in --add-modules\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-modules\", multiModules,\n+            \"--add-modules\", jconsoleModule,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.compiler\")\n+          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.jconsole\");\n+\n+        \/\/ dump an archive with ALL-SYSTEM in -add-modules\n+        archiveName = TestCommon.getNewArchiveName(\"muti-modules\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--add-modules\", allSystem,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldContain(warningIncubator);\n+\n+        \/\/ run with the same ALL-SYSTEM in --add-modules\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-modules\", allSystem,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          \/\/ the jdk.incubator.vector was specified indirectly via ALL-SYSTEM\n+          .shouldContain(warningIncubator)\n+          .shouldContain(\"full module graph cannot be loaded: archive was created without full module graph\");\n+\n+        \/\/ dump an archive with ALL-MODULE-PATH in -add-modules\n+        archiveName = TestCommon.getNewArchiveName(\"muti-modules\");\n+        TestCommon.setCurrentArchiveName(archiveName);\n+        oa = TestCommon.dumpBaseArchive(\n+            archiveName,\n+            loggingOption,\n+            \"--add-modules\", allModulePath,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0);\n+\n+        \/\/ run with the same ALL-MODULE-PATH in --add-modules\n+        oa = TestCommon.execCommon(\n+            loggingOption,\n+            \"--add-modules\", allModulePath,\n+            \"-m\", moduleOption,\n+            \"-version\");\n+        oa.shouldHaveExitValue(0)\n+          .shouldMatch(\"cds,module.*Restored from archive: entry.0x.*name jdk.httpserver\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/addmods\/AddmodsOption.java","additions":231,"deletions":0,"binary":false,"changes":231,"status":"added"}]}