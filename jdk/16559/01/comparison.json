{"files":[{"patch":"@@ -74,0 +74,1 @@\n+  friend class GrowableArrayTest;\n@@ -118,0 +119,1 @@\n+  friend class GrowableArrayTest;\n@@ -365,1 +367,0 @@\n-  void grow(int j);\n@@ -368,0 +369,2 @@\n+  void grow(int j);\n+\n@@ -795,2 +798,0 @@\n-  NONCOPYABLE(GrowableArrayCHeap);\n-\n@@ -820,0 +821,20 @@\n+  GrowableArrayCHeap(GrowableArrayCHeap<E,F>& other)\n+  : GrowableArrayWithAllocator<E, GrowableArrayCHeap<E, F>>(allocate(0, F), 0) {\n+    this->grow(other._len);\n+    for (int i = 0; i < other._len; i++) {\n+      this->_data[i] = other._data[i];\n+    }\n+    this->_len = other._len;\n+  }\n+\n+  GrowableArrayCHeap<E,F>& operator=(const GrowableArrayCHeap<E,F>& other) {\n+    assert(&other != this, \"must be different\");\n+    this->clear_and_deallocate();\n+    this->grow(other._len);\n+    for (int i = 0; i < other._len; i++) {\n+      this->_data[i] = other._data[i];\n+    }\n+    this->_len = other._len;\n+    return *this;\n+  }\n+\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -47,0 +47,4 @@\n+  template<typename E>\n+  void* data_array(const GrowableArrayView<E>& array) {\n+    return array._data;\n+  }\n@@ -562,0 +566,57 @@\n+TEST_VM_F(GrowableArrayTest, GrowableArrayCHeapShouldNotShareUnderlyingDataArray) {\n+  GrowableArrayCHeap<int, mtTest> a(0);\n+  GrowableArrayCHeap<int, mtTest> b(a);\n+  ASSERT_TRUE(this->data_array(a) != this->data_array(b))\n+    << \"A copied GrowableArrayCHeap should not share its underlying array with the original one\";\n+}\n+\n+TEST_VM_F(GrowableArrayTest, GrowableArrayCHeapShouldCopyTrivialElementsWhenCopyConstructed) {\n+  GrowableArrayCHeap<int, mtTest> a(4);\n+  a.push(0); a.push(1); a.push(2); a.push(3);\n+  GrowableArrayCHeap<int, mtTest> b(a);\n+  for (int i = 0; i < 4; i++) {\n+    ASSERT_TRUE(a.at(i) == b.at(i)) << \"Should be the same\";\n+  }\n+}\n+\n+TEST_VM_F(GrowableArrayTest, GrowableArrayCHeapShouldCopyTrivialElementsWhenCopyAssigned) {\n+  GrowableArrayCHeap<int, mtTest> a(4);\n+  a.push(0); a.push(1); a.push(2); a.push(3);\n+  GrowableArrayCHeap<int, mtTest> b(0);\n+  b = a;\n+  for (int i = 0; i < 4; i++) {\n+    ASSERT_TRUE(a.at(i) == b.at(i)) << \"Should be the same\";\n+  }\n+}\n+\n+struct IncrementIdOnCopy {\n+  static int current_id;\n+public:\n+  int id;\n+  IncrementIdOnCopy() {\n+    this->id = 0;\n+  }\n+  IncrementIdOnCopy(const IncrementIdOnCopy&) {\n+    this->id = IncrementIdOnCopy::current_id++;\n+  }\n+  IncrementIdOnCopy& operator=(const IncrementIdOnCopy&) {\n+    this->id = IncrementIdOnCopy::current_id++;\n+    return *this;\n+  }\n+};\n+int IncrementIdOnCopy::current_id = 0;\n+TEST_VM_F(GrowableArrayTest, GrowableArrayCHeapShouldCallCopyConstructorWhenCopyConstructed) {\n+  GrowableArrayCHeap<IncrementIdOnCopy, mtTest> a(1);\n+  a.push(IncrementIdOnCopy{});\n+  GrowableArrayCHeap<IncrementIdOnCopy, mtTest> b(a);\n+  ASSERT_TRUE(a.at(0).id != b.at(0).id) << \"The copy constructor should have been called but wasn't\";\n+}\n+\n+TEST_VM_F(GrowableArrayTest, GrowableArrayCHeapShouldCallCopyConstructorWhenCopyAssigned) {\n+  GrowableArrayCHeap<IncrementIdOnCopy, mtTest> a(1);\n+  a.push(IncrementIdOnCopy{});\n+  GrowableArrayCHeap<IncrementIdOnCopy, mtTest> b(0);\n+  b = a;\n+  ASSERT_TRUE(a.at(0).id != b.at(0).id) << \"The copy constructor should have been called but wasn't\";\n+}\n+\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":61,"deletions":0,"binary":false,"changes":61,"status":"modified"}]}