{"files":[{"patch":"@@ -3234,1 +3234,5 @@\n-}\n+C2V_END\n+\n+C2V_VMENTRY_0(jboolean, isCompilerThread, (JNIEnv* env, jobject))\n+  return thread->is_Compiler_thread();\n+C2V_END\n@@ -3399,0 +3403,1 @@\n+  {CC \"isCompilerThread\",                             CC \"()Z\",                                                                             FN_PTR(isCompilerThread)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+    FLAG_SET_ERGO_IF_DEFAULT(EagerJVMCI, true);\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -91,1 +91,2 @@\n-          \"Force eager JVMCI initialization\")                               \\\n+          \"Force eager JVMCI initialization. Defaults to true if \"          \\\n+          \"UseJVMCICompiler is true.\")                                      \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1531,0 +1531,5 @@\n+\n+    \/**\n+     * Returns whether the current thread is a CompilerThread.\n+     *\/\n+    native boolean isCompilerThread();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -54,0 +54,16 @@\n+            if (runtime.getConfig().getFlag(\"EagerJVMCI\", Boolean.class)) {\n+                if (runtime.getCompilerToVM().isCompilerThread()) {\n+                    throw noCompilerError();\n+                } else {\n+                    \/\/ This path will be taken when initializing JVMCI on a non-JIT thread.\n+                    \/\/ Such a usage of JVMCI might never request a compilation so delay the\n+                    \/\/ noCompilerError until such a request is made.\n+                }\n+            }\n+        }\n+\n+        \/**\n+         * Exits the VM due to unavailability of a JVMCI compiler.\n+         *\/\n+        Error noCompilerError() {\n+            throw runtime.exitHotSpotWithMessage(1, \"Cannot use JVMCI compiler: %s%n\", reason);\n@@ -58,1 +74,1 @@\n-            throw runtime.exitHotSpotWithMessage(1, \"Cannot use JVMCI compiler: %s%n\", reason);\n+            throw noCompilerError();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCICompilerConfig.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+            \"-XX:-EagerJVMCI\",\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestJVMCIPrintProperties.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}