{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.security.spec.AlgorithmParameterSpec;\n@@ -310,0 +311,174 @@\n+    \/**\n+     * Returns a {@code MessageDigest} object that implements the specified\n+     * digest algorithm and is initialized with the specified parameters.\n+     *\n+     * <p> A new {@code MessageDigest} object encapsulating the\n+     * {@code MessageDigestSpi} implementation from the specified provider\n+     * is returned.  Note that the specified provider does not\n+     * have to be registered in the provider list.\n+     *\n+     * @param algorithm the name of the algorithm requested.\n+     * See the MessageDigest section in the <a href=\n+     * \"{@docRoot}\/..\/specs\/security\/standard-names.html#messagedigest-algorithms\">\n+     * Java Security Standard Algorithm Names Specification<\/a>\n+     * for information about standard algorithm names.\n+     * @param params the initialization parameters (may be {@code null}).\n+     * @param provider the provider.\n+     *\n+     * @return a {@code MessageDigest} object that implements the\n+     *         specified algorithm\n+     *\n+     * @throws IllegalArgumentException if the specified provider is\n+     *         {@code null}\n+     *\n+     * @throws NoSuchAlgorithmException if a {@code MessageDigestSpi}\n+     *         implementation for the specified algorithm\n+     *         is not available from the specified {@code Provider} object\n+     *\n+     * @throws InvalidAlgorithmParameterException if the specified\n+     *         initialization parameters are inappropriate for this\n+     *         {@code MessageDigest}\n+     *\n+     * @throws NullPointerException if {@code algorithm} is {@code null}\n+     *\n+     * @see Provider\n+     * @since 22\n+     *\/\n+    public static MessageDigest getInstance(String algorithm,\n+            AlgorithmParameterSpec params, Provider provider)\n+            throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {\n+        Objects.requireNonNull(algorithm, \"null algorithm name\");\n+        try {\n+            GetInstance.Instance instance = GetInstance.getInstance(\"MessageDigest\",\n+                    MessageDigestSpi.class, algorithm, params, provider);\n+            return Delegate.of((MessageDigestSpi)instance.impl,\n+                    algorithm, instance.provider);\n+        } catch (NoSuchAlgorithmException e) {\n+            return handleException(e);\n+        }\n+    }\n+\n+    \/**\n+     * Returns a {@code MessageDigest} object that implements the specified\n+     * digest algorithm and is initialized with the specified parameters.\n+     *\n+     * <p> A new {@code MessageDigest} object encapsulating the\n+     * {@code MessageDigestSpi} implementation from the specified provider\n+     * is returned.  The specified provider must be registered\n+     * in the security provider list.\n+     *\n+     * <p> Note that the list of registered providers may be retrieved via\n+     * the {@link Security#getProviders() Security.getProviders()} method.\n+     *\n+     * @param algorithm the name of the algorithm requested.\n+     * See the MessageDigest section in the <a href=\n+     * \"{@docRoot}\/..\/specs\/security\/standard-names.html#messagedigest-algorithms\">\n+     * Java Security Standard Algorithm Names Specification<\/a>\n+     * for information about standard algorithm names.\n+     * @param params the initialization parameters (may be {@code null}).\n+     * @param provider the name of the provider.\n+     *\n+     * @return a {@code MessageDigest} object that implements the\n+     *         specified algorithm\n+     *\n+     * @throws IllegalArgumentException if the provider name is {@code null}\n+     *         or empty\n+     *\n+     * @throws NoSuchAlgorithmException if a {@code MessageDigestSpi}\n+     *         implementation for the specified algorithm\n+     *         is not available from the specified provider\n+     *\n+     * @throws InvalidAlgorithmParameterException if the specified\n+     *         initialization parameters are inappropriate for this\n+     *         {@code MessageDigest}\n+     *\n+     * @throws NoSuchProviderException if the specified provider is not\n+     *         registered in the security provider list\n+     *\n+     * @throws NullPointerException if {@code algorithm} is {@code null}\n+     *\n+     * @see Provider\n+     * @since 22\n+     *\/\n+    public static MessageDigest getInstance(String algorithm,\n+            AlgorithmParameterSpec params, String provider)\n+            throws NoSuchAlgorithmException, InvalidAlgorithmParameterException,\n+                    NoSuchProviderException {\n+        Objects.requireNonNull(algorithm, \"null algorithm name\");\n+        try {\n+            GetInstance.Instance instance = GetInstance.getInstance(\"MessageDigest\",\n+                    MessageDigestSpi.class, algorithm, params, provider);\n+            return Delegate.of((MessageDigestSpi)instance.impl,\n+                    algorithm, instance.provider);\n+        } catch (NoSuchAlgorithmException e) {\n+            return handleException(e);\n+        }\n+    }\n+\n+    \/**\n+     * Returns a {@code MessageDigest} object that implements the specified\n+     * digest algorithm and is initialized with the specified parameters.\n+     *\n+     * <p> This method traverses the list of registered security Providers,\n+     * starting with the most preferred Provider.\n+     * A new {@code MessageDigest} object encapsulating the\n+     * {@code MessageDigestSpi} implementation from the first\n+     * provider that supports the specified algorithm is returned.\n+     *\n+     * <p> Note that the list of registered providers may be retrieved via\n+     * the {@link Security#getProviders() Security.getProviders()} method.\n+     *\n+     * @implNote\n+     * The JDK Reference Implementation additionally uses the\n+     * {@code jdk.security.provider.preferred}\n+     * {@link Security#getProperty(String) Security} property to determine\n+     * the preferred provider order for the specified algorithm. This\n+     * may be different from the order of providers returned by\n+     * {@link Security#getProviders() Security.getProviders()}.\n+     *\n+     * @param algorithm the name of the algorithm requested.\n+     * See the MessageDigest section in the <a href=\n+     * \"{@docRoot}\/..\/specs\/security\/standard-names.html#messagedigest-algorithms\">\n+     * Java Security Standard Algorithm Names Specification<\/a>\n+     * for information about standard algorithm names.\n+     * @param params the initialization parameters (may be {@code null}).\n+     *\n+     * @return a {@code MessageDigest} object that implements the\n+     *         specified algorithm\n+     *\n+     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n+     *         {@code MessageDigestSpi} implementation for the\n+     *         specified algorithm\n+     *\n+     * @throws InvalidAlgorithmParameterException if the specified\n+     *         initialization parameters are inappropriate for this\n+     *         {@code MessageDigest}\n+     *\n+     * @throws NullPointerException if {@code algorithm} is {@code null}\n+     *\n+     * @see Provider\n+     * @since 22\n+     *\/\n+    public static MessageDigest getInstance(String algorithm,\n+            AlgorithmParameterSpec params)\n+            throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {\n+        Objects.requireNonNull(algorithm, \"null algorithm name\");\n+        try {\n+            GetInstance.Instance instance = GetInstance.getInstance(\"MessageDigest\",\n+                    MessageDigestSpi.class, algorithm, params);\n+            return Delegate.of((MessageDigestSpi) instance.impl,\n+                    algorithm, instance.provider);\n+        } catch (NoSuchAlgorithmException e) {\n+            return handleException(e);\n+        }\n+    }\n+\n+    private static MessageDigest handleException(NoSuchAlgorithmException e)\n+            throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {\n+        Throwable cause = e.getCause();\n+        if (cause instanceof InvalidAlgorithmParameterException) {\n+            throw (InvalidAlgorithmParameterException)cause;\n+        }\n+        throw e;\n+    }\n+\n@@ -329,0 +504,23 @@\n+    \/**\n+     * Returns the parameters used with this {@code MessageDigest} object.\n+     *\n+     * <p>The returned parameters may be the same that were used to instantiate\n+     * this {@code MessageDigest} object, or may contain additional default\n+     * parameter values used by the underlying message digest implementation.\n+     * If the required parameters were not supplied and can be generated by\n+     * the {@code MessageDigest} object, the generated parameters are returned;\n+     * otherwise {@code null} is returned.\n+     *\n+     * <p>If the message digest implementation does not support returning\n+     * the parameters as {@code AlgorithmParameters}, {@code null} is always\n+     * returned.\n+     *\n+     * @return the parameters used with this {@code MessageDigest} object,\n+     * or {@code null}.\n+     *\n+     * @since 22\n+     *\/\n+    public AlgorithmParameters getParameters() {\n+        return engineGetParameters();\n+    }\n+\n@@ -688,0 +886,5 @@\n+\n+        @Override\n+        protected AlgorithmParameters engineGetParameters() {\n+            return digestSpi.engineGetParameters();\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/security\/MessageDigest.java","additions":203,"deletions":0,"binary":false,"changes":203,"status":"modified"},{"patch":"@@ -39,0 +39,9 @@\n+ * <p>If an implementation does not require parameters, it must contain\n+ * a public constructor that takes no argument, and an {@code MessageDigest}\n+ * object must be instantiated with one of the {@code getInstance} methods\n+ * without an {@code AlgorithmParameterSpec} argument. Otherwise, if an\n+ * implementation requires parameters, it must contain a public constructor\n+ * that takes an {@code AlgorithmParameterSpec} argument, and an\n+ * {@code MessageDigest} object must be instantiated with one of the\n+ * {@code getInstance} methods with an {@code AlgorithmParameterSpec} argument.\n+ *\n@@ -88,0 +97,24 @@\n+    \/**\n+     * Returns the parameters used with this {@code MessageDigest} object.\n+     *\n+     * <p>The returned parameters may be the same that were used to initialize\n+     * this {@code MessageDigest} object, or may contain additional default\n+     * parameter values used by the underlying message digest implementation.\n+     * If the required parameters were not supplied and can be generated by\n+     * the {@code MessageDigest} object, the generated parameters are returned;\n+     * otherwise {@code null} is returned.\n+     *\n+     * <p>If the message digest implementation does not support returning\n+     * the parameters as {@code AlgorithmParameters}, {@code null} is always\n+     * returned.\n+     *\n+     * @return the parameters used with this {@code MessageDigest} object, or\n+     * {@code null}. If this method is not overridden by a provider,\n+     * {@code null} is returned.\n+     *\n+     * @since 22\n+     *\/\n+    protected AlgorithmParameters engineGetParameters() {\n+        return null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/security\/MessageDigestSpi.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1586,3 +1586,2 @@\n-        addEngine(\"MessageDigest\",                      false, null);\n-        addEngine(\"SecureRandom\",                       false,\n-                \"java.security.SecureRandomParameters\");\n+        addEngine(\"MessageDigest\",                      false, \"java.security.spec.AlgorithmParameterSpec\");\n+        addEngine(\"SecureRandom\",                       false, \"java.security.SecureRandomParameters\");\n@@ -1593,2 +1592,1 @@\n-        addEngine(\"CertStore\",                          false,\n-                            \"java.security.cert.CertStoreParameters\");\n+        addEngine(\"CertStore\",                          false, \"java.security.cert.CertStoreParameters\");\n@@ -1613,2 +1611,1 @@\n-        addEngine(\"Policy\",                             false,\n-                            \"java.security.Policy$Parameters\");\n+        addEngine(\"Policy\",                             false, \"java.security.Policy$Parameters\");\n@@ -1616,2 +1613,1 @@\n-        addEngine(\"Configuration\",                      false,\n-                            \"javax.security.auth.login.Configuration$Parameters\");\n+        addEngine(\"Configuration\",                      false, \"javax.security.auth.login.Configuration$Parameters\");\n@@ -1623,2 +1619,1 @@\n-        addEngine(\"TerminalFactory\",                    false,\n-                            \"java.lang.Object\");\n+        addEngine(\"TerminalFactory\",                    false, \"java.lang.Object\");\n","filename":"src\/java.base\/share\/classes\/java\/security\/Provider.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.security.spec;\n+\n+\/**\n+ * This record class specifies a parameters set that contains an integer.\n+ *\n+ * @param n the integer parameter\n+ * @see AlgorithmParameterSpec\n+ * @since 22\n+ *\/\n+public record IntegerParameterSpec(int n) implements AlgorithmParameterSpec { }\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/IntegerParameterSpec.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -28,1 +28,0 @@\n-import sun.security.provider.SHAKE256;\n@@ -35,1 +34,0 @@\n-import java.io.IOException;\n@@ -50,1 +48,1 @@\n-        Digester createDigester();\n+        MessageDigest createDigester();\n@@ -53,1 +51,1 @@\n-        default Digester createDigester(int len) {\n+        default MessageDigest createDigester(int len) {\n@@ -59,1 +57,1 @@\n-            Digester d = createDigester();\n+            MessageDigest d = createDigester();\n@@ -63,1 +61,5 @@\n-            return d.digest();\n+            try {\n+                return d.digest();\n+            } finally {\n+                d.reset();\n+            }\n@@ -70,1 +72,1 @@\n-        public Digester createDigester() {\n+        public MessageDigest createDigester() {\n@@ -72,2 +74,1 @@\n-                MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n-                return new MessageDigester(md);\n+                return MessageDigest.getInstance(\"SHA-512\");\n@@ -84,34 +85,1 @@\n-        public Digester createDigester() {\n-            return new SHAKE256Digester(114);\n-        }\n-\n-        \/\/ Ed448 uses 64bytes long hash for the signature message\n-        @Override\n-        public Digester createDigester(int len) {\n-            return new SHAKE256Digester(len);\n-        }\n-    }\n-\n-    public interface Digester {\n-        void update(byte data);\n-        void update(byte[] data, int off, int len);\n-        byte[] digest();\n-    }\n-\n-    private static class MessageDigester implements Digester {\n-        private final MessageDigest md;\n-\n-        private MessageDigester(MessageDigest md) {\n-            this.md = md;\n-        }\n-\n-        @Override\n-        public void update(byte data) {\n-            md.update(data);\n-        }\n-        @Override\n-        public void update(byte[] data, int off, int len) {\n-            md.update(data, off, len);\n-        }\n-        @Override\n-        public byte[] digest() {\n+        public MessageDigest createDigester() {\n@@ -119,3 +87,4 @@\n-                return md.digest();\n-            } finally {\n-                md.reset();\n+                return MessageDigest.getInstance(\"SHAKE256-LEN\",\n+                        new IntegerParameterSpec(114 * 8));\n+            } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException ex) {\n+                throw new ProviderException(ex);\n@@ -124,4 +93,0 @@\n-    }\n-\n-    private static class SHAKE256Digester implements Digester {\n-        SHAKE256 md;\n@@ -129,11 +94,1 @@\n-        SHAKE256Digester(int len) {\n-            md = new SHAKE256(len);\n-        }\n-        @Override\n-        public void update(byte data) {\n-            md.update(data);\n-        }\n-        @Override\n-        public void update(byte[] data, int off, int len) {\n-            md.update(data, off, len);\n-        }\n+        \/\/ Ed448 uses 64bytes long hash for the signature message\n@@ -141,1 +96,1 @@\n-        public byte[] digest() {\n+        public MessageDigest createDigester(int len) {\n@@ -143,3 +98,4 @@\n-                return md.digest();\n-            } finally {\n-                md.reset();\n+                return MessageDigest.getInstance(\"SHAKE256-LEN\",\n+                        new IntegerParameterSpec(len * 8));\n+            } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException ex) {\n+                throw new ProviderException(ex);\n@@ -214,1 +170,1 @@\n-    public Digester createDigester() {\n+    public MessageDigest createDigester() {\n@@ -218,1 +174,1 @@\n-    public Digester createDigester(int len) {\n+    public MessageDigest createDigester(int len) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ed\/EdDSAParameters.java","additions":23,"deletions":67,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.security.MessageDigest;\n@@ -58,1 +59,1 @@\n-        private final EdDSAParameters.Digester digester;\n+        private final MessageDigest digester;\n@@ -60,1 +61,1 @@\n-        DigestAccumulator(EdDSAParameters.Digester digester) {\n+        DigestAccumulator(MessageDigest digester) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ed\/EdDSASignature.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package sun.security.provider;\n+\n+import sun.security.util.DerOutputStream;\n+import sun.security.util.DerValue;\n+\n+import java.io.IOException;\n+import java.security.AlgorithmParametersSpi;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.IntegerParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+\n+\/**\n+ * This class implements the parameter set used by the SHAKE256-LEN\n+ * message digest that has a various digest output length. This parameters\n+ * can be initialized with an {@link IntegerParameterSpec}. The integer\n+ * is the length of the digest output length in bits.\n+ *\/\n+public class IntegerParameters extends AlgorithmParametersSpi {\n+    private int n;\n+    @Override\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+            throws InvalidParameterSpecException {\n+        if (paramSpec instanceof IntegerParameterSpec ip) {\n+            n = ip.n();\n+        } else {\n+            throw new InvalidParameterSpecException(\"Unknown spec: \" + paramSpec);\n+        }\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params) throws IOException {\n+        n = new DerValue(params).getInteger();\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params, String format) throws IOException {\n+        engineInit(params);\n+    }\n+\n+    @Override\n+    protected <T extends AlgorithmParameterSpec> T engineGetParameterSpec(\n+            Class<T> paramSpec) throws InvalidParameterSpecException {\n+        if (paramSpec.isAssignableFrom(IntegerParameterSpec.class)) {\n+            return paramSpec.cast(\n+                    new IntegerParameterSpec(n));\n+        } else {\n+            throw new InvalidParameterSpecException\n+                    (\"Inappropriate parameter Specification\");\n+        }\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded() throws IOException {\n+        return new DerOutputStream().putInteger(n).toByteArray();\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded(String format) throws IOException {\n+        return engineGetEncoded();\n+    }\n+\n+    @Override\n+    protected String engineToString() {\n+        return \"len:\" + n + \" bits\";\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/IntegerParameters.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -27,0 +27,5 @@\n+import java.security.*;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.IntegerParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+\n@@ -31,0 +36,39 @@\n+\n+    public static class WithoutLen extends SHA3 {\n+        public WithoutLen(AlgorithmParameterSpec p)\n+                throws InvalidAlgorithmParameterException {\n+            super(\"SHAKE256-LEN\", 64, (byte) 0x1F, 64);\n+        }\n+    }\n+\n+    public static class WithLen extends SHA3 {\n+        public WithLen(AlgorithmParameterSpec p)\n+                throws InvalidAlgorithmParameterException {\n+            super(\"SHAKE256-LEN\", n(p), (byte) 0x1F, 64);\n+        }\n+\n+        private static int n(AlgorithmParameterSpec p)\n+                throws InvalidAlgorithmParameterException {\n+            if (p instanceof IntegerParameterSpec is) {\n+                int bitsLen = is.n();\n+                if (bitsLen <= 0 || (bitsLen & 0x07) != 0) {\n+                    throw new InvalidAlgorithmParameterException(\"Invalid length: \" + bitsLen);\n+                }\n+                return bitsLen \/ 8;\n+            } else {\n+                throw new InvalidAlgorithmParameterException(\"Unknown spec: \" + p);\n+            }\n+        }\n+\n+\n+        @Override\n+        protected AlgorithmParameters engineGetParameters() {\n+            try {\n+                AlgorithmParameters p = AlgorithmParameters.getInstance(\"SHAKE256-LEN\");\n+                p.init(new IntegerParameterSpec(engineGetDigestLength() * 8));\n+                return p;\n+            } catch (NoSuchAlgorithmException | InvalidParameterSpecException e) {\n+                throw new ProviderException(e);\n+            }\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHAKE256.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -255,0 +255,9 @@\n+        addWithAlias(p, \"MessageDigest\", \"SHAKE256\",\n+                \"sun.security.provider.SHAKE256$WithoutLen\", attrs);\n+\n+        addWithAlias(p, \"MessageDigest\", \"SHAKE256-LEN\",\n+                \"sun.security.provider.SHAKE256$WithLen\", attrs);\n+\n+        addWithAlias(p, \"AlgorithmParameters\", \"SHAKE256-LEN\",\n+                \"sun.security.provider.IntegerParameters\", attrs);\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SunEntries.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.IntegerParameterSpec;\n+import java.security.spec.NamedParameterSpec;\n@@ -526,0 +529,1 @@\n+        AlgorithmParameterSpec ips = new IntegerParameterSpec(256);\n@@ -528,1 +532,1 @@\n-        checkNewMethods(clazz, 3);\n+        checkNewMethods(clazz, 6);\n@@ -544,0 +548,18 @@\n+\n+        m = getInstance(clazz, STRING, AlgorithmParameterSpec.class);\n+        run(m, NullPointerException.class, (Object) null, ips);\n+        run(m, NoSuchAlgorithmException.class, \"\", ips);\n+        run(m, InvalidAlgorithmParameterException.class, \"SHAKE256-LEN\", null);\n+\n+        m = getInstance(clazz, STRING, AlgorithmParameterSpec.class, STRING);\n+        run(m, NullPointerException.class, null, ips, \"SUN\");\n+        run(m, NoSuchAlgorithmException.class, \"\", ips, \"SUN\");\n+        run(m, IllegalArgumentException.class, \"FOO\", ips, null);\n+        run(m, IllegalArgumentException.class, \"FOO\", ips, \"\");\n+        run(m, InvalidAlgorithmParameterException.class, \"SHAKE256-LEN\", null, \"SUN\");\n+\n+        m = getInstance(clazz, STRING, AlgorithmParameterSpec.class, PROVIDER);\n+        run(m, NullPointerException.class, null, ips, SUN);\n+        run(m, NoSuchAlgorithmException.class, \"\", ips, SUN);\n+        run(m, IllegalArgumentException.class, \"FOO\", ips, null);\n+        run(m, InvalidAlgorithmParameterException.class, \"SHAKE256-LEN\", null, SUN);\n","filename":"test\/jdk\/java\/security\/misc\/GetInstanceNullsEmpties.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private static void testShake() {\n+    private static void testShake() throws Exception {\n@@ -73,1 +73,2 @@\n-    private static void runShakeTest(int outputLen, String msg, String digest) {\n+    private static void runShakeTest(int outputLen, String msg, String digest)\n+            throws Exception {\n@@ -76,1 +77,2 @@\n-        SHAKE256 md = new SHAKE256(outputLen);\n+        MessageDigest md = MessageDigest.getInstance(\"SHAKE256-LEN\",\n+                new IntegerParameterSpec(outputLen * 8));\n","filename":"test\/jdk\/sun\/security\/ec\/ed\/TestEdOps.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}