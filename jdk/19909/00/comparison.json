{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,3 @@\n+            if (expected > count) {\n+                throw new IOException(\"Premature EOF\");\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/MeteredStream.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,1 +154,1 @@\n-                os.write (reply2.getBytes());\n+                os.write ((reply2+\"HelloAgain\").getBytes());\n","filename":"test\/jdk\/java\/net\/Authenticator\/BasicTest4.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8335135\n+ * @library \/test\/lib\n+ * @summary Check that reading from inputStream throws an IOException\n+ *          if the fixed response stream is closed before reading all bytes.\n+ *\/\n+\n+import jdk.test.lib.net.URIBuilder;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.URL;\n+\n+public class TruncatedFixedResponse implements Runnable {\n+\n+    ServerSocket ss;\n+\n+    \/*\n+     * Our \"http\" server to return a truncated fixed response\n+     *\/\n+    public void run() {\n+        try {\n+            Socket s = ss.accept();\n+\n+            BufferedReader in = new BufferedReader(\n+                    new InputStreamReader(s.getInputStream()));\n+            while (true) {\n+                String req = in.readLine();\n+                if (req.isEmpty()) {\n+                    break;\n+                }\n+            }\n+            PrintStream out = new PrintStream(\n+                    new BufferedOutputStream(s.getOutputStream()));\n+\n+            \/* send the header *\/\n+            out.print(\"HTTP\/1.1 200\\r\\n\");\n+            out.print(\"Content-Length: 100\\r\\n\");\n+            out.print(\"Content-Type: text\/html\\r\\n\");\n+            out.print(\"\\r\\n\");\n+            out.print(\"Some content, but too short\");\n+            out.close();\n+            s.close();\n+            ss.close();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    TruncatedFixedResponse() throws Exception {\n+        \/* start the server *\/\n+        ss = new ServerSocket();\n+        ss.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+        new Thread(this).start();\n+\n+        \/* establish http connection to server *\/\n+        URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(ss.getLocalPort())\n+                .path(\"\/foo\")\n+                .toURL();\n+        HttpURLConnection http = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);\n+\n+        try (InputStream in = http.getInputStream()) {\n+            while (in.read() != -1) {\n+                \/\/ discard response\n+            }\n+            throw new AssertionError(\"Expected IOException was not thrown\");\n+        } catch (IOException ex) {\n+            System.out.println(\"Got expected exception: \" + ex);\n+        }\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        new TruncatedFixedResponse();\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/URLConnection\/TruncatedFixedResponse.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -176,1 +176,1 @@\n-                    is.read ();\n+                    System.out.println(\"client got expected exception: \"+ioe);\n","filename":"test\/jdk\/sun\/net\/www\/http\/KeepAliveStream\/KeepAliveStreamCloseWithWrongContentLength.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}