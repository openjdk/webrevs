{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,0 +120,4 @@\n+    private void complain(String str) {\n+        log.complain(\"EventHandler> \" + str);\n+    }\n+\n@@ -200,1 +204,1 @@\n-                log.complain(\"Exception occured in eventHandler thread: \" + e.getMessage());\n+                complain(\"Exception occured in eventHandler thread: \" + e.getMessage());\n@@ -261,1 +265,1 @@\n-                        log.complain(\"EventHandler>  Unexpected event: \" + event.getClass().getName());\n+                        complain(\"Unexpected event: \" + event);\n@@ -323,1 +327,1 @@\n-         * This listener catches uncaught exceptions and print a message.\n+         * This listener catches uncaught exceptions and prints a message.\n@@ -325,1 +329,1 @@\n-        addListener( new EventListener() {\n+        addListener(new EventListener() {\n@@ -331,8 +335,4 @@\n-                    defaultExceptionRequest.equals(event.request())) {\n-\n-                    if (EventFilters.filtered(event) == false) {\n-                        log.complain(\"EventHandler>  Unexpected Debuggee Exception: \" +\n-                                     (ExceptionEvent)event);\n-                        defaultExceptionCaught = true;\n-                    }\n-\n+                    defaultExceptionRequest.equals(event.request()))\n+                {\n+                    complain(\"Unexpected Debuggee Exception: \" + event);\n+                    defaultExceptionCaught = true;\n@@ -371,0 +371,4 @@\n+    private class EventNotification {\n+        volatile Event event = null;\n+        volatile EventSet set = null;\n+    }\n@@ -373,1 +377,1 @@\n-     * Returns an event which is received for any of given requests.\n+     * Returns an event which was received for one of the specified requests.\n@@ -375,6 +379,4 @@\n-    public Event waitForRequestedEvent( final EventRequest[] requests,\n-            long timeout,\n-            boolean shouldRemoveListeners) {\n-        class EventNotification {\n-            volatile Event event = null;\n-        }\n+    private EventNotification waitForRequestedEventCommon(final EventRequest[] requests,\n+                                                          long timeout,\n+                                                          boolean shouldRemoveListeners)\n+    {\n@@ -383,0 +385,3 @@\n+        \/*\n+         * This listener searches for an Event that matches one of the EventRequests.\n+         *\/\n@@ -384,0 +389,4 @@\n+            public void eventSetReceived(EventSet set) {\n+                en.set = set; \/\/ Save for retrieval when eventReceived() is called.\n+            }\n+\n@@ -385,0 +394,2 @@\n+                EventSet set = en.set;\n+                en.set = null; \/\/ We'll reset it below if the event matches a request.\n@@ -387,1 +398,1 @@\n-                    if (!request.isEnabled())\n+                    if (!request.isEnabled()) {\n@@ -389,0 +400,1 @@\n+                    }\n@@ -390,1 +402,2 @@\n-                        display(\"waitForRequestedEvent: Received event(\" + event + \") for request(\" + request + \")\");\n+                        display(\"waitForRequestedEventCommon: Received event(\" + event +\n+                                \") for request(\" + request + \")\");\n@@ -393,0 +406,1 @@\n+                            en.set = set;\n@@ -402,1 +416,1 @@\n-            display(\"waitForRequestedEvent: enabling remove of listener \" + listener);\n+            display(\"waitForRequestedEventCommon: enabling remove of listener \" + listener);\n@@ -410,0 +424,13 @@\n+        \/*\n+         * This listener logs each EventSet received.\n+         *\/\n+        EventListener eventLogListener = new EventListener() {\n+            public void eventSetReceived(EventSet set) {\n+                display(\"waitForRequestedEventCommon: Received event set: \" + set);\n+            }\n+        };\n+        addListener(eventLogListener);\n+\n+        \/*\n+         * Wait until expected event is recieved.\n+         *\/\n@@ -414,1 +441,1 @@\n-                display(\"waitForRequestedEvent: vm.resume called\");\n+                display(\"waitForRequestedEventCommon: vm.resume called\");\n@@ -417,1 +444,1 @@\n-                while (!isDisconnected() && en.event == null && timeLeft > 0) {\n+                while (!isDisconnected() && en.set == null && timeLeft > 0) {\n@@ -430,0 +457,13 @@\n+        removeListener(eventLogListener);\n+        return en;\n+    }\n+\n+    \/**\n+     * Returns an event which was received for one of the specified requests.\n+     *\/\n+    public Event waitForRequestedEvent(final EventRequest[] requests,\n+                                       long timeout,\n+                                       boolean shouldRemoveListeners)\n+    {\n+        EventNotification en =\n+            waitForRequestedEventCommon(requests, timeout, shouldRemoveListeners);\n@@ -437,1 +477,1 @@\n-     * Returns an event set which is received for any of given requests.\n+     * Returns an event set which was received for one of the specified requests.\n@@ -439,68 +479,6 @@\n-    public EventSet waitForRequestedEventSet( final EventRequest[] requests,\n-            long timeout,\n-            boolean shouldRemoveListeners) {\n-        class EventNotification {\n-            volatile EventSet set = null;\n-        }\n-        final EventNotification en = new EventNotification();\n-\n-        EventListener listener = new EventListener() {\n-            public void eventSetReceived(EventSet set) {\n-\n-                EventIterator eventIterator = set.eventIterator();\n-\n-                while (eventIterator.hasNext()) {\n-\n-                    Event event = eventIterator.nextEvent();\n-\n-                    for (int i = 0; i < requests.length; i++) {\n-                        EventRequest request = requests[i];\n-                        if (!request.isEnabled())\n-                            continue;\n-\n-                        if (request.equals(event.request())) {\n-                            display(\"waitForRequestedEventSet: Received event set for request: \" + request);\n-                            synchronized (EventHandler.this) {\n-                                en.set = set;\n-                                EventHandler.this.notifyAll();\n-                            }\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-\n-            public boolean eventReceived(Event event) {\n-                return (en.set != null);\n-            }\n-        };\n-\n-        if (shouldRemoveListeners) {\n-            display(\"waitForRequestedEventSet: enabling remove of listener \" + listener);\n-            listener.enableRemovingThisListener();\n-        }\n-        for (int i = 0; i < requests.length; i++) {\n-            requests[i].enable();\n-        }\n-        addListener(listener);\n-\n-        try {\n-            long timeToFinish = System.currentTimeMillis() + timeout;\n-            long timeLeft = timeout;\n-            synchronized (EventHandler.this) {\n-                display(\"waitForRequestedEventSet: vm.resume called\");\n-                vm.resume();\n-\n-                while (!isDisconnected() && en.set == null && timeLeft > 0) {\n-                    EventHandler.this.wait(timeLeft);\n-                    timeLeft = timeToFinish - System.currentTimeMillis();\n-                }\n-            }\n-        } catch (InterruptedException e) {\n-            return null;\n-        }\n-        if (shouldRemoveListeners && !isDisconnected()) {\n-            for (int i = 0; i < requests.length; i++) {\n-                requests[i].disable();\n-            }\n-        }\n+    public EventSet waitForRequestedEventSet(final EventRequest[] requests,\n+                                             long timeout,\n+                                             boolean shouldRemoveListeners)\n+    {\n+        EventNotification en =\n+            waitForRequestedEventCommon(requests, timeout, shouldRemoveListeners);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jdi\/EventHandler.java","additions":72,"deletions":94,"binary":false,"changes":166,"status":"modified"}]}