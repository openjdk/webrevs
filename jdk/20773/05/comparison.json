{"files":[{"patch":"@@ -61,1 +61,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_ANNOTATION}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_ANNOTATION}.\n@@ -74,1 +74,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_ARRAY}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_ARRAY}.\n@@ -132,1 +132,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_STRING}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_STRING}.\n@@ -160,1 +160,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_DOUBLE}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_DOUBLE}.\n@@ -188,1 +188,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_FLOAT}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_FLOAT}.\n@@ -216,1 +216,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_LONG}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_LONG}.\n@@ -244,1 +244,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_INT}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_INT}.\n@@ -272,1 +272,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_SHORT}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_SHORT}.\n@@ -303,1 +303,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_CHAR}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_CHAR}.\n@@ -334,1 +334,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_BYTE}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_BYTE}.\n@@ -365,1 +365,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_BOOLEAN}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_BOOLEAN}.\n@@ -396,1 +396,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_CLASS}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_CLASS}.\n@@ -414,1 +414,1 @@\n-     * The {@linkplain #tag tag} of this value is {@value ClassFile#AEV_ENUM}.\n+     * The {@linkplain #tag tag} of this value is {@value TAG_ENUM}.\n@@ -433,0 +433,39 @@\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfByte}. *\/\n+    int TAG_BYTE = 'B';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfChar}. *\/\n+    int TAG_CHAR = 'C';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfDouble}. *\/\n+    int TAG_DOUBLE = 'D';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfFloat}. *\/\n+    int TAG_FLOAT = 'F';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfInt}. *\/\n+    int TAG_INT = 'I';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfLong}. *\/\n+    int TAG_LONG = 'J';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfShort}. *\/\n+    int TAG_SHORT = 'S';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfBoolean}. *\/\n+    int TAG_BOOLEAN = 'Z';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfString}. *\/\n+    int TAG_STRING = 's';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfEnum}. *\/\n+    int TAG_ENUM = 'e';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfClass}. *\/\n+    int TAG_CLASS = 'c';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfAnnotation}. *\/\n+    int TAG_ANNOTATION = '@';\n+\n+    \/** The {@link #tag() tag} indicating the value of an element-value pair is {@link OfArray}. *\/\n+    int TAG_ARRAY = '[';\n+\n@@ -436,0 +475,4 @@\n+     *\n+     * @apiNote\n+     * {@code TAG_}-prefixed constants in this class, such as {@link #TAG_INT},\n+     * describe the possible return values of this method.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":56,"deletions":13,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -515,607 +515,1 @@\n-    \/** The integer value used to encode the NOP instruction. *\/\n-    int NOP             = 0;\n-\n-    \/** The integer value used to encode the ACONST_NULL instruction. *\/\n-    int ACONST_NULL     = 1;\n-\n-    \/** The integer value used to encode the ICONST_M1 instruction. *\/\n-    int ICONST_M1       = 2;\n-\n-    \/** The integer value used to encode the ICONST_0 instruction. *\/\n-    int ICONST_0        = 3;\n-\n-    \/** The integer value used to encode the ICONST_1 instruction. *\/\n-    int ICONST_1        = 4;\n-\n-    \/** The integer value used to encode the ICONST_2 instruction. *\/\n-    int ICONST_2        = 5;\n-\n-    \/** The integer value used to encode the ICONST_3 instruction. *\/\n-    int ICONST_3        = 6;\n-\n-    \/** The integer value used to encode the ICONST_4 instruction. *\/\n-    int ICONST_4        = 7;\n-\n-    \/** The integer value used to encode the ICONST_5 instruction. *\/\n-    int ICONST_5        = 8;\n-\n-    \/** The integer value used to encode the LCONST_0 instruction. *\/\n-    int LCONST_0        = 9;\n-\n-    \/** The integer value used to encode the LCONST_1 instruction. *\/\n-    int LCONST_1        = 10;\n-\n-    \/** The integer value used to encode the FCONST_0 instruction. *\/\n-    int FCONST_0        = 11;\n-\n-    \/** The integer value used to encode the FCONST_1 instruction. *\/\n-    int FCONST_1        = 12;\n-\n-    \/** The integer value used to encode the FCONST_2 instruction. *\/\n-    int FCONST_2        = 13;\n-\n-    \/** The integer value used to encode the DCONST_0 instruction. *\/\n-    int DCONST_0        = 14;\n-\n-    \/** The integer value used to encode the DCONST_1 instruction. *\/\n-    int DCONST_1        = 15;\n-\n-    \/** The integer value used to encode the BIPUSH instruction. *\/\n-    int BIPUSH          = 16;\n-\n-    \/** The integer value used to encode the SIPUSH instruction. *\/\n-    int SIPUSH          = 17;\n-\n-    \/** The integer value used to encode the LDC instruction. *\/\n-    int LDC             = 18;\n-\n-    \/** The integer value used to encode the LDC_W instruction. *\/\n-    int LDC_W           = 19;\n-\n-    \/** The integer value used to encode the LDC2_W instruction. *\/\n-    int LDC2_W          = 20;\n-\n-    \/** The integer value used to encode the ILOAD instruction. *\/\n-    int ILOAD           = 21;\n-\n-    \/** The integer value used to encode the LLOAD instruction. *\/\n-    int LLOAD           = 22;\n-\n-    \/** The integer value used to encode the FLOAD instruction. *\/\n-    int FLOAD           = 23;\n-\n-    \/** The integer value used to encode the DLOAD instruction. *\/\n-    int DLOAD           = 24;\n-\n-    \/** The integer value used to encode the ALOAD instruction. *\/\n-    int ALOAD           = 25;\n-\n-    \/** The integer value used to encode the ILOAD_0 instruction. *\/\n-    int ILOAD_0         = 26;\n-\n-    \/** The integer value used to encode the ILOAD_1 instruction. *\/\n-    int ILOAD_1         = 27;\n-\n-    \/** The integer value used to encode the ILOAD_2 instruction. *\/\n-    int ILOAD_2         = 28;\n-\n-    \/** The integer value used to encode the ILOAD_3 instruction. *\/\n-    int ILOAD_3         = 29;\n-\n-    \/** The integer value used to encode the LLOAD_0 instruction. *\/\n-    int LLOAD_0         = 30;\n-\n-    \/** The integer value used to encode the LLOAD_1 instruction. *\/\n-    int LLOAD_1         = 31;\n-\n-    \/** The integer value used to encode the LLOAD_2 instruction. *\/\n-    int LLOAD_2         = 32;\n-\n-    \/** The integer value used to encode the LLOAD_3 instruction. *\/\n-    int LLOAD_3         = 33;\n-\n-    \/** The integer value used to encode the FLOAD_0 instruction. *\/\n-    int FLOAD_0         = 34;\n-\n-    \/** The integer value used to encode the FLOAD_1 instruction. *\/\n-    int FLOAD_1         = 35;\n-\n-    \/** The integer value used to encode the FLOAD_2 instruction. *\/\n-    int FLOAD_2         = 36;\n-\n-    \/** The integer value used to encode the FLOAD_3 instruction. *\/\n-    int FLOAD_3         = 37;\n-\n-    \/** The integer value used to encode the DLOAD_0 instruction. *\/\n-    int DLOAD_0         = 38;\n-\n-    \/** The integer value used to encode the DLOAD_1 instruction. *\/\n-    int DLOAD_1         = 39;\n-\n-    \/** The integer value used to encode the DLOAD_2 instruction. *\/\n-    int DLOAD_2         = 40;\n-\n-    \/** The integer value used to encode the DLOAD_3 instruction. *\/\n-    int DLOAD_3         = 41;\n-\n-    \/** The integer value used to encode the ALOAD_0 instruction. *\/\n-    int ALOAD_0         = 42;\n-\n-    \/** The integer value used to encode the ALOAD_1 instruction. *\/\n-    int ALOAD_1         = 43;\n-\n-    \/** The integer value used to encode the ALOAD_2 instruction. *\/\n-    int ALOAD_2         = 44;\n-\n-    \/** The integer value used to encode the ALOAD_3 instruction. *\/\n-    int ALOAD_3         = 45;\n-\n-    \/** The integer value used to encode the IALOAD instruction. *\/\n-    int IALOAD          = 46;\n-\n-    \/** The integer value used to encode the LALOAD instruction. *\/\n-    int LALOAD          = 47;\n-\n-    \/** The integer value used to encode the FALOAD instruction. *\/\n-    int FALOAD          = 48;\n-\n-    \/** The integer value used to encode the DALOAD instruction. *\/\n-    int DALOAD          = 49;\n-\n-    \/** The integer value used to encode the AALOAD instruction. *\/\n-    int AALOAD          = 50;\n-\n-    \/** The integer value used to encode the BALOAD instruction. *\/\n-    int BALOAD          = 51;\n-\n-    \/** The integer value used to encode the CALOAD instruction. *\/\n-    int CALOAD          = 52;\n-\n-    \/** The integer value used to encode the SALOAD instruction. *\/\n-    int SALOAD          = 53;\n-\n-    \/** The integer value used to encode the ISTORE instruction. *\/\n-    int ISTORE          = 54;\n-\n-    \/** The integer value used to encode the LSTORE instruction. *\/\n-    int LSTORE          = 55;\n-\n-    \/** The integer value used to encode the FSTORE instruction. *\/\n-    int FSTORE          = 56;\n-\n-    \/** The integer value used to encode the DSTORE instruction. *\/\n-    int DSTORE          = 57;\n-\n-    \/** The integer value used to encode the ASTORE instruction. *\/\n-    int ASTORE          = 58;\n-\n-    \/** The integer value used to encode the ISTORE_0 instruction. *\/\n-    int ISTORE_0        = 59;\n-\n-    \/** The integer value used to encode the ISTORE_1 instruction. *\/\n-    int ISTORE_1        = 60;\n-\n-    \/** The integer value used to encode the ISTORE_2 instruction. *\/\n-    int ISTORE_2        = 61;\n-\n-    \/** The integer value used to encode the ISTORE_3 instruction. *\/\n-    int ISTORE_3        = 62;\n-\n-    \/** The integer value used to encode the LSTORE_0 instruction. *\/\n-    int LSTORE_0        = 63;\n-\n-    \/** The integer value used to encode the LSTORE_1 instruction. *\/\n-    int LSTORE_1        = 64;\n-\n-    \/** The integer value used to encode the LSTORE_2 instruction. *\/\n-    int LSTORE_2        = 65;\n-\n-    \/** The integer value used to encode the LSTORE_3 instruction. *\/\n-    int LSTORE_3        = 66;\n-\n-    \/** The integer value used to encode the FSTORE_0 instruction. *\/\n-    int FSTORE_0        = 67;\n-\n-    \/** The integer value used to encode the FSTORE_1 instruction. *\/\n-    int FSTORE_1        = 68;\n-\n-    \/** The integer value used to encode the FSTORE_2 instruction. *\/\n-    int FSTORE_2        = 69;\n-\n-    \/** The integer value used to encode the FSTORE_3 instruction. *\/\n-    int FSTORE_3        = 70;\n-\n-    \/** The integer value used to encode the DSTORE_0 instruction. *\/\n-    int DSTORE_0        = 71;\n-\n-    \/** The integer value used to encode the DSTORE_1 instruction. *\/\n-    int DSTORE_1        = 72;\n-\n-    \/** The integer value used to encode the DSTORE_2 instruction. *\/\n-    int DSTORE_2        = 73;\n-\n-    \/** The integer value used to encode the DSTORE_3 instruction. *\/\n-    int DSTORE_3        = 74;\n-\n-    \/** The integer value used to encode the ASTORE_0 instruction. *\/\n-    int ASTORE_0        = 75;\n-\n-    \/** The integer value used to encode the ASTORE_1 instruction. *\/\n-    int ASTORE_1        = 76;\n-\n-    \/** The integer value used to encode the ASTORE_2 instruction. *\/\n-    int ASTORE_2        = 77;\n-\n-    \/** The integer value used to encode the ASTORE_3 instruction. *\/\n-    int ASTORE_3        = 78;\n-\n-    \/** The integer value used to encode the IASTORE instruction. *\/\n-    int IASTORE         = 79;\n-\n-    \/** The integer value used to encode the LASTORE instruction. *\/\n-    int LASTORE         = 80;\n-\n-    \/** The integer value used to encode the FASTORE instruction. *\/\n-    int FASTORE         = 81;\n-\n-    \/** The integer value used to encode the DASTORE instruction. *\/\n-    int DASTORE         = 82;\n-\n-    \/** The integer value used to encode the AASTORE instruction. *\/\n-    int AASTORE         = 83;\n-\n-    \/** The integer value used to encode the BASTORE instruction. *\/\n-    int BASTORE         = 84;\n-\n-    \/** The integer value used to encode the CASTORE instruction. *\/\n-    int CASTORE         = 85;\n-\n-    \/** The integer value used to encode the SASTORE instruction. *\/\n-    int SASTORE         = 86;\n-\n-    \/** The integer value used to encode the POP instruction. *\/\n-    int POP             = 87;\n-\n-    \/** The integer value used to encode the POP2 instruction. *\/\n-    int POP2            = 88;\n-\n-    \/** The integer value used to encode the DUP instruction. *\/\n-    int DUP             = 89;\n-\n-    \/** The integer value used to encode the DUP_X1 instruction. *\/\n-    int DUP_X1          = 90;\n-\n-    \/** The integer value used to encode the DUP_X2 instruction. *\/\n-    int DUP_X2          = 91;\n-\n-    \/** The integer value used to encode the DUP2 instruction. *\/\n-    int DUP2            = 92;\n-\n-    \/** The integer value used to encode the DUP2_X1 instruction. *\/\n-    int DUP2_X1         = 93;\n-\n-    \/** The integer value used to encode the DUP2_X2 instruction. *\/\n-    int DUP2_X2         = 94;\n-\n-    \/** The integer value used to encode the SWAP instruction. *\/\n-    int SWAP            = 95;\n-\n-    \/** The integer value used to encode the IADD instruction. *\/\n-    int IADD            = 96;\n-\n-    \/** The integer value used to encode the LADD instruction. *\/\n-    int LADD            = 97;\n-\n-    \/** The integer value used to encode the FADD instruction. *\/\n-    int FADD            = 98;\n-\n-    \/** The integer value used to encode the DADD instruction. *\/\n-    int DADD            = 99;\n-\n-    \/** The integer value used to encode the ISUB instruction. *\/\n-    int ISUB            = 100;\n-\n-    \/** The integer value used to encode the LSUB instruction. *\/\n-    int LSUB            = 101;\n-\n-    \/** The integer value used to encode the FSUB instruction. *\/\n-    int FSUB            = 102;\n-\n-    \/** The integer value used to encode the DSUB instruction. *\/\n-    int DSUB            = 103;\n-\n-    \/** The integer value used to encode the IMUL instruction. *\/\n-    int IMUL            = 104;\n-\n-    \/** The integer value used to encode the LMUL instruction. *\/\n-    int LMUL            = 105;\n-\n-    \/** The integer value used to encode the FMUL instruction. *\/\n-    int FMUL            = 106;\n-\n-    \/** The integer value used to encode the DMUL instruction. *\/\n-    int DMUL            = 107;\n-\n-    \/** The integer value used to encode the IDIV instruction. *\/\n-    int IDIV            = 108;\n-\n-    \/** The integer value used to encode the LDIV instruction. *\/\n-    int LDIV            = 109;\n-\n-    \/** The integer value used to encode the FDIV instruction. *\/\n-    int FDIV            = 110;\n-\n-    \/** The integer value used to encode the DDIV instruction. *\/\n-    int DDIV            = 111;\n-\n-    \/** The integer value used to encode the IREM instruction. *\/\n-    int IREM            = 112;\n-\n-    \/** The integer value used to encode the LREM instruction. *\/\n-    int LREM            = 113;\n-\n-    \/** The integer value used to encode the FREM instruction. *\/\n-    int FREM            = 114;\n-\n-    \/** The integer value used to encode the DREM instruction. *\/\n-    int DREM            = 115;\n-\n-    \/** The integer value used to encode the INEG instruction. *\/\n-    int INEG            = 116;\n-\n-    \/** The integer value used to encode the LNEG instruction. *\/\n-    int LNEG            = 117;\n-\n-    \/** The integer value used to encode the FNEG instruction. *\/\n-    int FNEG            = 118;\n-\n-    \/** The integer value used to encode the DNEG instruction. *\/\n-    int DNEG            = 119;\n-\n-    \/** The integer value used to encode the ISHL instruction. *\/\n-    int ISHL            = 120;\n-\n-    \/** The integer value used to encode the LSHL instruction. *\/\n-    int LSHL            = 121;\n-\n-    \/** The integer value used to encode the ISHR instruction. *\/\n-    int ISHR            = 122;\n-\n-    \/** The integer value used to encode the LSHR instruction. *\/\n-    int LSHR            = 123;\n-\n-    \/** The integer value used to encode the IUSHR instruction. *\/\n-    int IUSHR           = 124;\n-\n-    \/** The integer value used to encode the LUSHR instruction. *\/\n-    int LUSHR           = 125;\n-\n-    \/** The integer value used to encode the IAND instruction. *\/\n-    int IAND            = 126;\n-\n-    \/** The integer value used to encode the LAND instruction. *\/\n-    int LAND            = 127;\n-\n-    \/** The integer value used to encode the IOR instruction. *\/\n-    int IOR             = 128;\n-\n-    \/** The integer value used to encode the LOR instruction. *\/\n-    int LOR             = 129;\n-\n-    \/** The integer value used to encode the IXOR instruction. *\/\n-    int IXOR            = 130;\n-\n-    \/** The integer value used to encode the LXOR instruction. *\/\n-    int LXOR            = 131;\n-\n-    \/** The integer value used to encode the IINC instruction. *\/\n-    int IINC            = 132;\n-\n-    \/** The integer value used to encode the I2L instruction. *\/\n-    int I2L             = 133;\n-\n-    \/** The integer value used to encode the I2F instruction. *\/\n-    int I2F             = 134;\n-\n-    \/** The integer value used to encode the I2D instruction. *\/\n-    int I2D             = 135;\n-\n-    \/** The integer value used to encode the L2I instruction. *\/\n-    int L2I             = 136;\n-\n-    \/** The integer value used to encode the L2F instruction. *\/\n-    int L2F             = 137;\n-\n-    \/** The integer value used to encode the L2D instruction. *\/\n-    int L2D             = 138;\n-\n-    \/** The integer value used to encode the F2I instruction. *\/\n-    int F2I             = 139;\n-\n-    \/** The integer value used to encode the F2L instruction. *\/\n-    int F2L             = 140;\n-\n-    \/** The integer value used to encode the F2D instruction. *\/\n-    int F2D             = 141;\n-\n-    \/** The integer value used to encode the D2I instruction. *\/\n-    int D2I             = 142;\n-\n-    \/** The integer value used to encode the D2L instruction. *\/\n-    int D2L             = 143;\n-\n-    \/** The integer value used to encode the D2F instruction. *\/\n-    int D2F             = 144;\n-\n-    \/** The integer value used to encode the I2B instruction. *\/\n-    int I2B             = 145;\n-\n-    \/** The integer value used to encode the I2C instruction. *\/\n-    int I2C             = 146;\n-\n-    \/** The integer value used to encode the I2S instruction. *\/\n-    int I2S             = 147;\n-\n-    \/** The integer value used to encode the LCMP instruction. *\/\n-    int LCMP            = 148;\n-\n-    \/** The integer value used to encode the FCMPL instruction. *\/\n-    int FCMPL           = 149;\n-\n-    \/** The integer value used to encode the FCMPG instruction. *\/\n-    int FCMPG           = 150;\n-\n-    \/** The integer value used to encode the DCMPL instruction. *\/\n-    int DCMPL           = 151;\n-\n-    \/** The integer value used to encode the DCMPG instruction. *\/\n-    int DCMPG           = 152;\n-\n-    \/** The integer value used to encode the IFEQ instruction. *\/\n-    int IFEQ            = 153;\n-\n-    \/** The integer value used to encode the IFNE instruction. *\/\n-    int IFNE            = 154;\n-\n-    \/** The integer value used to encode the IFLT instruction. *\/\n-    int IFLT            = 155;\n-\n-    \/** The integer value used to encode the IFGE instruction. *\/\n-    int IFGE            = 156;\n-\n-    \/** The integer value used to encode the IFGT instruction. *\/\n-    int IFGT            = 157;\n-\n-    \/** The integer value used to encode the IFLE instruction. *\/\n-    int IFLE            = 158;\n-\n-    \/** The integer value used to encode the IF_ICMPEQ instruction. *\/\n-    int IF_ICMPEQ       = 159;\n-\n-    \/** The integer value used to encode the IF_ICMPNE instruction. *\/\n-    int IF_ICMPNE       = 160;\n-\n-    \/** The integer value used to encode the IF_ICMPLT instruction. *\/\n-    int IF_ICMPLT       = 161;\n-\n-    \/** The integer value used to encode the IF_ICMPGE instruction. *\/\n-    int IF_ICMPGE       = 162;\n-\n-    \/** The integer value used to encode the IF_ICMPGT instruction. *\/\n-    int IF_ICMPGT       = 163;\n-\n-    \/** The integer value used to encode the IF_ICMPLE instruction. *\/\n-    int IF_ICMPLE       = 164;\n-\n-    \/** The integer value used to encode the IF_ACMPEQ instruction. *\/\n-    int IF_ACMPEQ       = 165;\n-\n-    \/** The integer value used to encode the IF_ACMPNE instruction. *\/\n-    int IF_ACMPNE       = 166;\n-\n-    \/** The integer value used to encode the GOTO instruction. *\/\n-    int GOTO            = 167;\n-\n-    \/** The integer value used to encode the JSR instruction. *\/\n-    int JSR             = 168;\n-\n-    \/** The integer value used to encode the RET instruction. *\/\n-    int RET             = 169;\n-\n-    \/** The integer value used to encode the TABLESWITCH instruction. *\/\n-    int TABLESWITCH     = 170;\n-\n-    \/** The integer value used to encode the LOOKUPSWITCH instruction. *\/\n-    int LOOKUPSWITCH    = 171;\n-\n-    \/** The integer value used to encode the IRETURN instruction. *\/\n-    int IRETURN         = 172;\n-\n-    \/** The integer value used to encode the LRETURN instruction. *\/\n-    int LRETURN         = 173;\n-\n-    \/** The integer value used to encode the FRETURN instruction. *\/\n-    int FRETURN         = 174;\n-\n-    \/** The integer value used to encode the DRETURN instruction. *\/\n-    int DRETURN         = 175;\n-\n-    \/** The integer value used to encode the ARETURN instruction. *\/\n-    int ARETURN         = 176;\n-\n-    \/** The integer value used to encode the RETURN instruction. *\/\n-    int RETURN          = 177;\n-\n-    \/** The integer value used to encode the GETSTATIC instruction. *\/\n-    int GETSTATIC       = 178;\n-\n-    \/** The integer value used to encode the PUTSTATIC instruction. *\/\n-    int PUTSTATIC       = 179;\n-\n-    \/** The integer value used to encode the GETFIELD instruction. *\/\n-    int GETFIELD        = 180;\n-\n-    \/** The integer value used to encode the PUTFIELD instruction. *\/\n-    int PUTFIELD        = 181;\n-\n-    \/** The integer value used to encode the INVOKEVIRTUAL instruction. *\/\n-    int INVOKEVIRTUAL   = 182;\n-\n-    \/** The integer value used to encode the INVOKESPECIAL instruction. *\/\n-    int INVOKESPECIAL   = 183;\n-\n-    \/** The integer value used to encode the INVOKESTATIC instruction. *\/\n-    int INVOKESTATIC    = 184;\n-\n-    \/** The integer value used to encode the INVOKEINTERFACE instruction. *\/\n-    int INVOKEINTERFACE = 185;\n-\n-    \/** The integer value used to encode the INVOKEDYNAMIC instruction. *\/\n-    int INVOKEDYNAMIC   = 186;\n-\n-    \/** The integer value used to encode the NEW instruction. *\/\n-    int NEW             = 187;\n-\n-    \/** The integer value used to encode the NEWARRAY instruction. *\/\n-    int NEWARRAY        = 188;\n-\n-    \/** The integer value used to encode the ANEWARRAY instruction. *\/\n-    int ANEWARRAY       = 189;\n-\n-    \/** The integer value used to encode the ARRAYLENGTH instruction. *\/\n-    int ARRAYLENGTH     = 190;\n-\n-    \/** The integer value used to encode the ATHROW instruction. *\/\n-    int ATHROW          = 191;\n-\n-    \/** The integer value used to encode the CHECKCAST instruction. *\/\n-    int CHECKCAST       = 192;\n-\n-    \/** The integer value used to encode the INSTANCEOF instruction. *\/\n-    int INSTANCEOF      = 193;\n-\n-    \/** The integer value used to encode the MONITORENTER instruction. *\/\n-    int MONITORENTER    = 194;\n-\n-    \/** The integer value used to encode the MONITOREXIT instruction. *\/\n-    int MONITOREXIT     = 195;\n-\n-    \/** The integer value used to encode the WIDE instruction. *\/\n-    int WIDE            = 196;\n-\n-    \/** The integer value used to encode the MULTIANEWARRAY instruction. *\/\n-    int MULTIANEWARRAY  = 197;\n-\n-    \/** The integer value used to encode the IFNULL instruction. *\/\n-    int IFNULL          = 198;\n-\n-    \/** The integer value used to encode the IFNONNULL instruction. *\/\n-    int IFNONNULL       = 199;\n-\n-    \/** The integer value used to encode the GOTO_W instruction. *\/\n-    int GOTO_W          = 200;\n-\n-    \/** The integer value used to encode the JSR_W instruction. *\/\n-    int JSR_W           = 201;\n-\n-    \/** The value of PUBLIC access and property modifier. *\/\n+    \/** The bit mask of PUBLIC access and property modifier. *\/\n@@ -1124,1 +518,1 @@\n-    \/** The value of PROTECTED access and property modifier. *\/\n+    \/** The bit mask of PROTECTED access and property modifier. *\/\n@@ -1127,1 +521,1 @@\n-    \/** The value of PRIVATE access and property modifier. *\/\n+    \/** The bit mask of PRIVATE access and property modifier. *\/\n@@ -1130,1 +524,1 @@\n-    \/** The value of INTERFACE access and property modifier. *\/\n+    \/** The bit mask of INTERFACE access and property modifier. *\/\n@@ -1133,1 +527,1 @@\n-    \/** The value of ENUM access and property modifier. *\/\n+    \/** The bit mask of ENUM access and property modifier. *\/\n@@ -1136,1 +530,1 @@\n-    \/** The value of ANNOTATION access and property modifier. *\/\n+    \/** The bit mask of ANNOTATION access and property modifier. *\/\n@@ -1139,1 +533,1 @@\n-    \/** The value of SUPER access and property modifier. *\/\n+    \/** The bit mask of SUPER access and property modifier. *\/\n@@ -1142,1 +536,1 @@\n-    \/** The value of ABSTRACT access and property modifier. *\/\n+    \/** The bit mask of ABSTRACT access and property modifier. *\/\n@@ -1145,1 +539,1 @@\n-    \/** The value of VOLATILE access and property modifier. *\/\n+    \/** The bit mask of VOLATILE access and property modifier. *\/\n@@ -1148,1 +542,1 @@\n-    \/** The value of TRANSIENT access and property modifier. *\/\n+    \/** The bit mask of TRANSIENT access and property modifier. *\/\n@@ -1151,1 +545,1 @@\n-    \/** The value of SYNTHETIC access and property modifier. *\/\n+    \/** The bit mask of SYNTHETIC access and property modifier. *\/\n@@ -1154,1 +548,1 @@\n-    \/** The value of STATIC access and property modifier. *\/\n+    \/** The bit mask of STATIC access and property modifier. *\/\n@@ -1157,1 +551,1 @@\n-    \/** The value of FINAL access and property modifier. *\/\n+    \/** The bit mask of FINAL access and property modifier. *\/\n@@ -1160,1 +554,1 @@\n-    \/** The value of SYNCHRONIZED access and property modifier. *\/\n+    \/** The bit mask of SYNCHRONIZED access and property modifier. *\/\n@@ -1163,1 +557,1 @@\n-    \/** The value of BRIDGE access and property modifier. *\/\n+    \/** The bit mask of BRIDGE access and property modifier. *\/\n@@ -1166,1 +560,1 @@\n-    \/** The value of VARARGS access and property modifier. *\/\n+    \/** The bit mask of VARARGS access and property modifier. *\/\n@@ -1169,1 +563,1 @@\n-    \/** The value of NATIVE access and property modifier. *\/\n+    \/** The bit mask of NATIVE access and property modifier. *\/\n@@ -1172,1 +566,1 @@\n-    \/** The value of STRICT access and property modifier. *\/\n+    \/** The bit mask of STRICT access and property modifier. *\/\n@@ -1175,1 +569,1 @@\n-    \/** The value of MODULE access and property modifier. *\/\n+    \/** The bit mask of MODULE access and property modifier. *\/\n@@ -1178,1 +572,1 @@\n-    \/** The value of OPEN access and property modifier. *\/\n+    \/** The bit mask of OPEN access and property modifier. *\/\n@@ -1181,1 +575,1 @@\n-    \/** The value of MANDATED access and property modifier. *\/\n+    \/** The bit mask of MANDATED access and property modifier. *\/\n@@ -1184,1 +578,1 @@\n-    \/** The value of TRANSITIVE access and property modifier. *\/\n+    \/** The bit mask of TRANSITIVE access and property modifier. *\/\n@@ -1187,1 +581,1 @@\n-    \/** The value of STATIC_PHASE access and property modifier. *\/\n+    \/** The bit mask of STATIC_PHASE access and property modifier. *\/\n@@ -1190,222 +584,0 @@\n-    \/** The value of STATEMENT {@link CharacterRangeInfo} kind. *\/\n-    int CRT_STATEMENT       = 0x0001;\n-\n-    \/** The value of BLOCK {@link CharacterRangeInfo} kind. *\/\n-    int CRT_BLOCK           = 0x0002;\n-\n-    \/** The value of ASSIGNMENT {@link CharacterRangeInfo} kind. *\/\n-    int CRT_ASSIGNMENT      = 0x0004;\n-\n-    \/** The value of FLOW_CONTROLLER {@link CharacterRangeInfo} kind. *\/\n-    int CRT_FLOW_CONTROLLER = 0x0008;\n-\n-    \/** The value of FLOW_TARGET {@link CharacterRangeInfo} kind. *\/\n-    int CRT_FLOW_TARGET     = 0x0010;\n-\n-    \/** The value of INVOKE {@link CharacterRangeInfo} kind. *\/\n-    int CRT_INVOKE          = 0x0020;\n-\n-    \/** The value of CREATE {@link CharacterRangeInfo} kind. *\/\n-    int CRT_CREATE          = 0x0040;\n-\n-    \/** The value of BRANCH_TRUE {@link CharacterRangeInfo} kind. *\/\n-    int CRT_BRANCH_TRUE     = 0x0080;\n-\n-    \/** The value of BRANCH_FALSE {@link CharacterRangeInfo} kind. *\/\n-    int CRT_BRANCH_FALSE    = 0x0100;\n-\n-    \/** The value of constant pool tag CLASS. *\/\n-    int TAG_CLASS = 7;\n-\n-    \/** The value of constant pool tag CONSTANTDYNAMIC. *\/\n-    int TAG_CONSTANTDYNAMIC = 17;\n-\n-    \/** The value of constant pool tag DOUBLE. *\/\n-    int TAG_DOUBLE = 6;\n-\n-    \/** The value of constant pool tag FIELDREF. *\/\n-    int TAG_FIELDREF = 9;\n-\n-    \/** The value of constant pool tag FLOAT. *\/\n-    int TAG_FLOAT = 4;\n-\n-    \/** The value of constant pool tag INTEGER. *\/\n-    int TAG_INTEGER = 3;\n-\n-    \/** The value of constant pool tag INTERFACEMETHODREF. *\/\n-    int TAG_INTERFACEMETHODREF = 11;\n-\n-    \/** The value of constant pool tag INVOKEDYNAMIC. *\/\n-    int TAG_INVOKEDYNAMIC = 18;\n-\n-    \/** The value of constant pool tag LONG. *\/\n-    int TAG_LONG = 5;\n-\n-    \/** The value of constant pool tag METHODHANDLE. *\/\n-    int TAG_METHODHANDLE = 15;\n-\n-    \/** The value of constant pool tag METHODREF. *\/\n-    int TAG_METHODREF = 10;\n-\n-    \/** The value of constant pool tag METHODTYPE. *\/\n-    int TAG_METHODTYPE = 16;\n-\n-    \/** The value of constant pool tag MODULE. *\/\n-    int TAG_MODULE = 19;\n-\n-    \/** The value of constant pool tag NAMEANDTYPE. *\/\n-    int TAG_NAMEANDTYPE = 12;\n-\n-    \/** The value of constant pool tag PACKAGE. *\/\n-    int TAG_PACKAGE = 20;\n-\n-    \/** The value of constant pool tag STRING. *\/\n-    int TAG_STRING = 8;\n-\n-    \/** The value of constant pool tag UNICODE. *\/\n-    int TAG_UNICODE = 2;\n-\n-    \/** The value of constant pool tag UTF8. *\/\n-    int TAG_UTF8 = 1;\n-\n-    \/\/ annotation element values\n-\n-    \/** The value of annotation element value type AEV_BYTE. *\/\n-    int AEV_BYTE = 'B';\n-\n-    \/** The value of annotation element value type AEV_CHAR. *\/\n-    int AEV_CHAR = 'C';\n-\n-    \/** The value of annotation element value type AEV_DOUBLE. *\/\n-    int AEV_DOUBLE = 'D';\n-\n-    \/** The value of annotation element value type AEV_FLOAT. *\/\n-    int AEV_FLOAT = 'F';\n-\n-    \/** The value of annotation element value type AEV_INT. *\/\n-    int AEV_INT = 'I';\n-\n-    \/** The value of annotation element value type AEV_LONG. *\/\n-    int AEV_LONG = 'J';\n-\n-    \/** The value of annotation element value type AEV_SHORT. *\/\n-    int AEV_SHORT = 'S';\n-\n-    \/** The value of annotation element value type AEV_BOOLEAN. *\/\n-    int AEV_BOOLEAN = 'Z';\n-\n-    \/** The value of annotation element value type AEV_STRING. *\/\n-    int AEV_STRING = 's';\n-\n-    \/** The value of annotation element value type AEV_ENUM. *\/\n-    int AEV_ENUM = 'e';\n-\n-    \/** The value of annotation element value type AEV_CLASS. *\/\n-    int AEV_CLASS = 'c';\n-\n-    \/** The value of annotation element value type AEV_ANNOTATION. *\/\n-    int AEV_ANNOTATION = '@';\n-\n-    \/** The value of annotation element value type AEV_ARRAY. *\/\n-    int AEV_ARRAY = '[';\n-\n-    \/\/type annotations\n-\n-    \/** The value of type annotation target type CLASS_TYPE_PARAMETER. *\/\n-    int TAT_CLASS_TYPE_PARAMETER = 0x00;\n-\n-    \/** The value of type annotation target type METHOD_TYPE_PARAMETER. *\/\n-    int TAT_METHOD_TYPE_PARAMETER = 0x01;\n-\n-    \/** The value of type annotation target type CLASS_EXTENDS. *\/\n-    int TAT_CLASS_EXTENDS = 0x10;\n-\n-    \/** The value of type annotation target type CLASS_TYPE_PARAMETER_BOUND. *\/\n-    int TAT_CLASS_TYPE_PARAMETER_BOUND = 0x11;\n-\n-    \/** The value of type annotation target type METHOD_TYPE_PARAMETER_BOUND. *\/\n-    int TAT_METHOD_TYPE_PARAMETER_BOUND = 0x12;\n-\n-    \/** The value of type annotation target type FIELD. *\/\n-    int TAT_FIELD = 0x13;\n-\n-    \/** The value of type annotation target type METHOD_RETURN. *\/\n-    int TAT_METHOD_RETURN = 0x14;\n-\n-    \/** The value of type annotation target type METHOD_RECEIVER. *\/\n-    int TAT_METHOD_RECEIVER = 0x15;\n-\n-    \/** The value of type annotation target type METHOD_FORMAL_PARAMETER. *\/\n-    int TAT_METHOD_FORMAL_PARAMETER = 0x16;\n-\n-    \/** The value of type annotation target type THROWS. *\/\n-    int TAT_THROWS = 0x17;\n-\n-    \/** The value of type annotation target type LOCAL_VARIABLE. *\/\n-    int TAT_LOCAL_VARIABLE = 0x40;\n-\n-    \/** The value of type annotation target type RESOURCE_VARIABLE. *\/\n-    int TAT_RESOURCE_VARIABLE = 0x41;\n-\n-    \/** The value of type annotation target type EXCEPTION_PARAMETER. *\/\n-    int TAT_EXCEPTION_PARAMETER = 0x42;\n-\n-    \/** The value of type annotation target type INSTANCEOF. *\/\n-    int TAT_INSTANCEOF = 0x43;\n-\n-    \/** The value of type annotation target type NEW. *\/\n-    int TAT_NEW = 0x44;\n-\n-    \/** The value of type annotation target type CONSTRUCTOR_REFERENCE. *\/\n-    int TAT_CONSTRUCTOR_REFERENCE = 0x45;\n-\n-    \/** The value of type annotation target type METHOD_REFERENCE. *\/\n-    int TAT_METHOD_REFERENCE = 0x46;\n-\n-    \/** The value of type annotation target type CAST. *\/\n-    int TAT_CAST = 0x47;\n-\n-    \/** The value of type annotation target type CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT. *\/\n-    int TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT = 0x48;\n-\n-    \/** The value of type annotation target type METHOD_INVOCATION_TYPE_ARGUMENT. *\/\n-    int TAT_METHOD_INVOCATION_TYPE_ARGUMENT = 0x49;\n-\n-    \/** The value of type annotation target type CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT. *\/\n-    int TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT = 0x4A;\n-\n-    \/** The value of type annotation target type METHOD_REFERENCE_TYPE_ARGUMENT. *\/\n-    int TAT_METHOD_REFERENCE_TYPE_ARGUMENT = 0x4B;\n-\n-    \/\/stackmap verification types\n-\n-    \/** The value of verification type TOP. *\/\n-    int VT_TOP = 0;\n-\n-    \/** The value of verification type INTEGER. *\/\n-    int VT_INTEGER = 1;\n-\n-    \/** The value of verification type FLOAT. *\/\n-    int VT_FLOAT = 2;\n-\n-    \/** The value of verification type DOUBLE. *\/\n-    int VT_DOUBLE = 3;\n-\n-    \/** The value of verification type LONG. *\/\n-    int VT_LONG = 4;\n-\n-    \/** The value of verification type NULL. *\/\n-    int VT_NULL = 5;\n-\n-    \/** The value of verification type UNINITIALIZED_THIS. *\/\n-    int VT_UNINITIALIZED_THIS = 6;\n-\n-    \/** The value of verification type OBJECT. *\/\n-    int VT_OBJECT = 7;\n-\n-    \/** The value of verification type UNINITIALIZED. *\/\n-    int VT_UNINITIALIZED = 8;\n-\n-    \/** The value of default class access flags *\/\n-    int DEFAULT_CLASS_FLAGS = ACC_PUBLIC;\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassFile.java","additions":23,"deletions":851,"binary":false,"changes":874,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    NOP(ClassFile.NOP, 1, Kind.NOP),\n+    NOP(OpcodeValues.NOP, 1, Kind.NOP),\n@@ -46,1 +46,1 @@\n-    ACONST_NULL(ClassFile.ACONST_NULL, 1, Kind.CONSTANT),\n+    ACONST_NULL(OpcodeValues.ACONST_NULL, 1, Kind.CONSTANT),\n@@ -49,1 +49,1 @@\n-    ICONST_M1(ClassFile.ICONST_M1, 1, Kind.CONSTANT),\n+    ICONST_M1(OpcodeValues.ICONST_M1, 1, Kind.CONSTANT),\n@@ -52,1 +52,1 @@\n-    ICONST_0(ClassFile.ICONST_0, 1, Kind.CONSTANT),\n+    ICONST_0(OpcodeValues.ICONST_0, 1, Kind.CONSTANT),\n@@ -55,1 +55,1 @@\n-    ICONST_1(ClassFile.ICONST_1, 1, Kind.CONSTANT),\n+    ICONST_1(OpcodeValues.ICONST_1, 1, Kind.CONSTANT),\n@@ -58,1 +58,1 @@\n-    ICONST_2(ClassFile.ICONST_2, 1, Kind.CONSTANT),\n+    ICONST_2(OpcodeValues.ICONST_2, 1, Kind.CONSTANT),\n@@ -61,1 +61,1 @@\n-    ICONST_3(ClassFile.ICONST_3, 1, Kind.CONSTANT),\n+    ICONST_3(OpcodeValues.ICONST_3, 1, Kind.CONSTANT),\n@@ -64,1 +64,1 @@\n-    ICONST_4(ClassFile.ICONST_4, 1, Kind.CONSTANT),\n+    ICONST_4(OpcodeValues.ICONST_4, 1, Kind.CONSTANT),\n@@ -67,1 +67,1 @@\n-    ICONST_5(ClassFile.ICONST_5, 1, Kind.CONSTANT),\n+    ICONST_5(OpcodeValues.ICONST_5, 1, Kind.CONSTANT),\n@@ -70,1 +70,1 @@\n-    LCONST_0(ClassFile.LCONST_0, 1, Kind.CONSTANT),\n+    LCONST_0(OpcodeValues.LCONST_0, 1, Kind.CONSTANT),\n@@ -73,1 +73,1 @@\n-    LCONST_1(ClassFile.LCONST_1, 1, Kind.CONSTANT),\n+    LCONST_1(OpcodeValues.LCONST_1, 1, Kind.CONSTANT),\n@@ -76,1 +76,1 @@\n-    FCONST_0(ClassFile.FCONST_0, 1, Kind.CONSTANT),\n+    FCONST_0(OpcodeValues.FCONST_0, 1, Kind.CONSTANT),\n@@ -79,1 +79,1 @@\n-    FCONST_1(ClassFile.FCONST_1, 1, Kind.CONSTANT),\n+    FCONST_1(OpcodeValues.FCONST_1, 1, Kind.CONSTANT),\n@@ -82,1 +82,1 @@\n-    FCONST_2(ClassFile.FCONST_2, 1, Kind.CONSTANT),\n+    FCONST_2(OpcodeValues.FCONST_2, 1, Kind.CONSTANT),\n@@ -85,1 +85,1 @@\n-    DCONST_0(ClassFile.DCONST_0, 1, Kind.CONSTANT),\n+    DCONST_0(OpcodeValues.DCONST_0, 1, Kind.CONSTANT),\n@@ -88,1 +88,1 @@\n-    DCONST_1(ClassFile.DCONST_1, 1, Kind.CONSTANT),\n+    DCONST_1(OpcodeValues.DCONST_1, 1, Kind.CONSTANT),\n@@ -91,1 +91,1 @@\n-    BIPUSH(ClassFile.BIPUSH, 2, Kind.CONSTANT),\n+    BIPUSH(OpcodeValues.BIPUSH, 2, Kind.CONSTANT),\n@@ -94,1 +94,1 @@\n-    SIPUSH(ClassFile.SIPUSH, 3, Kind.CONSTANT),\n+    SIPUSH(OpcodeValues.SIPUSH, 3, Kind.CONSTANT),\n@@ -97,1 +97,1 @@\n-    LDC(ClassFile.LDC, 2, Kind.CONSTANT),\n+    LDC(OpcodeValues.LDC, 2, Kind.CONSTANT),\n@@ -100,1 +100,1 @@\n-    LDC_W(ClassFile.LDC_W, 3, Kind.CONSTANT),\n+    LDC_W(OpcodeValues.LDC_W, 3, Kind.CONSTANT),\n@@ -103,1 +103,1 @@\n-    LDC2_W(ClassFile.LDC2_W, 3, Kind.CONSTANT),\n+    LDC2_W(OpcodeValues.LDC2_W, 3, Kind.CONSTANT),\n@@ -106,1 +106,1 @@\n-    ILOAD(ClassFile.ILOAD, 2, Kind.LOAD),\n+    ILOAD(OpcodeValues.ILOAD, 2, Kind.LOAD),\n@@ -109,1 +109,1 @@\n-    LLOAD(ClassFile.LLOAD, 2, Kind.LOAD),\n+    LLOAD(OpcodeValues.LLOAD, 2, Kind.LOAD),\n@@ -112,1 +112,1 @@\n-    FLOAD(ClassFile.FLOAD, 2, Kind.LOAD),\n+    FLOAD(OpcodeValues.FLOAD, 2, Kind.LOAD),\n@@ -115,1 +115,1 @@\n-    DLOAD(ClassFile.DLOAD, 2, Kind.LOAD),\n+    DLOAD(OpcodeValues.DLOAD, 2, Kind.LOAD),\n@@ -118,1 +118,1 @@\n-    ALOAD(ClassFile.ALOAD, 2, Kind.LOAD),\n+    ALOAD(OpcodeValues.ALOAD, 2, Kind.LOAD),\n@@ -121,1 +121,1 @@\n-    ILOAD_0(ClassFile.ILOAD_0, 1, Kind.LOAD),\n+    ILOAD_0(OpcodeValues.ILOAD_0, 1, Kind.LOAD),\n@@ -124,1 +124,1 @@\n-    ILOAD_1(ClassFile.ILOAD_1, 1, Kind.LOAD),\n+    ILOAD_1(OpcodeValues.ILOAD_1, 1, Kind.LOAD),\n@@ -127,1 +127,1 @@\n-    ILOAD_2(ClassFile.ILOAD_2, 1, Kind.LOAD),\n+    ILOAD_2(OpcodeValues.ILOAD_2, 1, Kind.LOAD),\n@@ -130,1 +130,1 @@\n-    ILOAD_3(ClassFile.ILOAD_3, 1, Kind.LOAD),\n+    ILOAD_3(OpcodeValues.ILOAD_3, 1, Kind.LOAD),\n@@ -133,1 +133,1 @@\n-    LLOAD_0(ClassFile.LLOAD_0, 1, Kind.LOAD),\n+    LLOAD_0(OpcodeValues.LLOAD_0, 1, Kind.LOAD),\n@@ -136,1 +136,1 @@\n-    LLOAD_1(ClassFile.LLOAD_1, 1, Kind.LOAD),\n+    LLOAD_1(OpcodeValues.LLOAD_1, 1, Kind.LOAD),\n@@ -139,1 +139,1 @@\n-    LLOAD_2(ClassFile.LLOAD_2, 1, Kind.LOAD),\n+    LLOAD_2(OpcodeValues.LLOAD_2, 1, Kind.LOAD),\n@@ -142,1 +142,1 @@\n-    LLOAD_3(ClassFile.LLOAD_3, 1, Kind.LOAD),\n+    LLOAD_3(OpcodeValues.LLOAD_3, 1, Kind.LOAD),\n@@ -145,1 +145,1 @@\n-    FLOAD_0(ClassFile.FLOAD_0, 1, Kind.LOAD),\n+    FLOAD_0(OpcodeValues.FLOAD_0, 1, Kind.LOAD),\n@@ -148,1 +148,1 @@\n-    FLOAD_1(ClassFile.FLOAD_1, 1, Kind.LOAD),\n+    FLOAD_1(OpcodeValues.FLOAD_1, 1, Kind.LOAD),\n@@ -151,1 +151,1 @@\n-    FLOAD_2(ClassFile.FLOAD_2, 1, Kind.LOAD),\n+    FLOAD_2(OpcodeValues.FLOAD_2, 1, Kind.LOAD),\n@@ -154,1 +154,1 @@\n-    FLOAD_3(ClassFile.FLOAD_3, 1, Kind.LOAD),\n+    FLOAD_3(OpcodeValues.FLOAD_3, 1, Kind.LOAD),\n@@ -157,1 +157,1 @@\n-    DLOAD_0(ClassFile.DLOAD_0, 1, Kind.LOAD),\n+    DLOAD_0(OpcodeValues.DLOAD_0, 1, Kind.LOAD),\n@@ -160,1 +160,1 @@\n-    DLOAD_1(ClassFile.DLOAD_1, 1, Kind.LOAD),\n+    DLOAD_1(OpcodeValues.DLOAD_1, 1, Kind.LOAD),\n@@ -163,1 +163,1 @@\n-    DLOAD_2(ClassFile.DLOAD_2, 1, Kind.LOAD),\n+    DLOAD_2(OpcodeValues.DLOAD_2, 1, Kind.LOAD),\n@@ -166,1 +166,1 @@\n-    DLOAD_3(ClassFile.DLOAD_3, 1, Kind.LOAD),\n+    DLOAD_3(OpcodeValues.DLOAD_3, 1, Kind.LOAD),\n@@ -169,1 +169,1 @@\n-    ALOAD_0(ClassFile.ALOAD_0, 1, Kind.LOAD),\n+    ALOAD_0(OpcodeValues.ALOAD_0, 1, Kind.LOAD),\n@@ -172,1 +172,1 @@\n-    ALOAD_1(ClassFile.ALOAD_1, 1, Kind.LOAD),\n+    ALOAD_1(OpcodeValues.ALOAD_1, 1, Kind.LOAD),\n@@ -175,1 +175,1 @@\n-    ALOAD_2(ClassFile.ALOAD_2, 1, Kind.LOAD),\n+    ALOAD_2(OpcodeValues.ALOAD_2, 1, Kind.LOAD),\n@@ -178,1 +178,1 @@\n-    ALOAD_3(ClassFile.ALOAD_3, 1, Kind.LOAD),\n+    ALOAD_3(OpcodeValues.ALOAD_3, 1, Kind.LOAD),\n@@ -181,1 +181,1 @@\n-    IALOAD(ClassFile.IALOAD, 1, Kind.ARRAY_LOAD),\n+    IALOAD(OpcodeValues.IALOAD, 1, Kind.ARRAY_LOAD),\n@@ -184,1 +184,1 @@\n-    LALOAD(ClassFile.LALOAD, 1, Kind.ARRAY_LOAD),\n+    LALOAD(OpcodeValues.LALOAD, 1, Kind.ARRAY_LOAD),\n@@ -187,1 +187,1 @@\n-    FALOAD(ClassFile.FALOAD, 1, Kind.ARRAY_LOAD),\n+    FALOAD(OpcodeValues.FALOAD, 1, Kind.ARRAY_LOAD),\n@@ -190,1 +190,1 @@\n-    DALOAD(ClassFile.DALOAD, 1, Kind.ARRAY_LOAD),\n+    DALOAD(OpcodeValues.DALOAD, 1, Kind.ARRAY_LOAD),\n@@ -193,1 +193,1 @@\n-    AALOAD(ClassFile.AALOAD, 1, Kind.ARRAY_LOAD),\n+    AALOAD(OpcodeValues.AALOAD, 1, Kind.ARRAY_LOAD),\n@@ -196,1 +196,1 @@\n-    BALOAD(ClassFile.BALOAD, 1, Kind.ARRAY_LOAD),\n+    BALOAD(OpcodeValues.BALOAD, 1, Kind.ARRAY_LOAD),\n@@ -199,1 +199,1 @@\n-    CALOAD(ClassFile.CALOAD, 1, Kind.ARRAY_LOAD),\n+    CALOAD(OpcodeValues.CALOAD, 1, Kind.ARRAY_LOAD),\n@@ -202,1 +202,1 @@\n-    SALOAD(ClassFile.SALOAD, 1, Kind.ARRAY_LOAD),\n+    SALOAD(OpcodeValues.SALOAD, 1, Kind.ARRAY_LOAD),\n@@ -205,1 +205,1 @@\n-    ISTORE(ClassFile.ISTORE, 2, Kind.STORE),\n+    ISTORE(OpcodeValues.ISTORE, 2, Kind.STORE),\n@@ -208,1 +208,1 @@\n-    LSTORE(ClassFile.LSTORE, 2, Kind.STORE),\n+    LSTORE(OpcodeValues.LSTORE, 2, Kind.STORE),\n@@ -211,1 +211,1 @@\n-    FSTORE(ClassFile.FSTORE, 2, Kind.STORE),\n+    FSTORE(OpcodeValues.FSTORE, 2, Kind.STORE),\n@@ -214,1 +214,1 @@\n-    DSTORE(ClassFile.DSTORE, 2, Kind.STORE),\n+    DSTORE(OpcodeValues.DSTORE, 2, Kind.STORE),\n@@ -217,1 +217,1 @@\n-    ASTORE(ClassFile.ASTORE, 2, Kind.STORE),\n+    ASTORE(OpcodeValues.ASTORE, 2, Kind.STORE),\n@@ -220,1 +220,1 @@\n-    ISTORE_0(ClassFile.ISTORE_0, 1, Kind.STORE),\n+    ISTORE_0(OpcodeValues.ISTORE_0, 1, Kind.STORE),\n@@ -223,1 +223,1 @@\n-    ISTORE_1(ClassFile.ISTORE_1, 1, Kind.STORE),\n+    ISTORE_1(OpcodeValues.ISTORE_1, 1, Kind.STORE),\n@@ -226,1 +226,1 @@\n-    ISTORE_2(ClassFile.ISTORE_2, 1, Kind.STORE),\n+    ISTORE_2(OpcodeValues.ISTORE_2, 1, Kind.STORE),\n@@ -229,1 +229,1 @@\n-    ISTORE_3(ClassFile.ISTORE_3, 1, Kind.STORE),\n+    ISTORE_3(OpcodeValues.ISTORE_3, 1, Kind.STORE),\n@@ -232,1 +232,1 @@\n-    LSTORE_0(ClassFile.LSTORE_0, 1, Kind.STORE),\n+    LSTORE_0(OpcodeValues.LSTORE_0, 1, Kind.STORE),\n@@ -235,1 +235,1 @@\n-    LSTORE_1(ClassFile.LSTORE_1, 1, Kind.STORE),\n+    LSTORE_1(OpcodeValues.LSTORE_1, 1, Kind.STORE),\n@@ -238,1 +238,1 @@\n-    LSTORE_2(ClassFile.LSTORE_2, 1, Kind.STORE),\n+    LSTORE_2(OpcodeValues.LSTORE_2, 1, Kind.STORE),\n@@ -241,1 +241,1 @@\n-    LSTORE_3(ClassFile.LSTORE_3, 1, Kind.STORE),\n+    LSTORE_3(OpcodeValues.LSTORE_3, 1, Kind.STORE),\n@@ -244,1 +244,1 @@\n-    FSTORE_0(ClassFile.FSTORE_0, 1, Kind.STORE),\n+    FSTORE_0(OpcodeValues.FSTORE_0, 1, Kind.STORE),\n@@ -247,1 +247,1 @@\n-    FSTORE_1(ClassFile.FSTORE_1, 1, Kind.STORE),\n+    FSTORE_1(OpcodeValues.FSTORE_1, 1, Kind.STORE),\n@@ -250,1 +250,1 @@\n-    FSTORE_2(ClassFile.FSTORE_2, 1, Kind.STORE),\n+    FSTORE_2(OpcodeValues.FSTORE_2, 1, Kind.STORE),\n@@ -253,1 +253,1 @@\n-    FSTORE_3(ClassFile.FSTORE_3, 1, Kind.STORE),\n+    FSTORE_3(OpcodeValues.FSTORE_3, 1, Kind.STORE),\n@@ -256,1 +256,1 @@\n-    DSTORE_0(ClassFile.DSTORE_0, 1, Kind.STORE),\n+    DSTORE_0(OpcodeValues.DSTORE_0, 1, Kind.STORE),\n@@ -259,1 +259,1 @@\n-    DSTORE_1(ClassFile.DSTORE_1, 1, Kind.STORE),\n+    DSTORE_1(OpcodeValues.DSTORE_1, 1, Kind.STORE),\n@@ -262,1 +262,1 @@\n-    DSTORE_2(ClassFile.DSTORE_2, 1, Kind.STORE),\n+    DSTORE_2(OpcodeValues.DSTORE_2, 1, Kind.STORE),\n@@ -265,1 +265,1 @@\n-    DSTORE_3(ClassFile.DSTORE_3, 1, Kind.STORE),\n+    DSTORE_3(OpcodeValues.DSTORE_3, 1, Kind.STORE),\n@@ -268,1 +268,1 @@\n-    ASTORE_0(ClassFile.ASTORE_0, 1, Kind.STORE),\n+    ASTORE_0(OpcodeValues.ASTORE_0, 1, Kind.STORE),\n@@ -271,1 +271,1 @@\n-    ASTORE_1(ClassFile.ASTORE_1, 1, Kind.STORE),\n+    ASTORE_1(OpcodeValues.ASTORE_1, 1, Kind.STORE),\n@@ -274,1 +274,1 @@\n-    ASTORE_2(ClassFile.ASTORE_2, 1, Kind.STORE),\n+    ASTORE_2(OpcodeValues.ASTORE_2, 1, Kind.STORE),\n@@ -277,1 +277,1 @@\n-    ASTORE_3(ClassFile.ASTORE_3, 1, Kind.STORE),\n+    ASTORE_3(OpcodeValues.ASTORE_3, 1, Kind.STORE),\n@@ -280,1 +280,1 @@\n-    IASTORE(ClassFile.IASTORE, 1, Kind.ARRAY_STORE),\n+    IASTORE(OpcodeValues.IASTORE, 1, Kind.ARRAY_STORE),\n@@ -283,1 +283,1 @@\n-    LASTORE(ClassFile.LASTORE, 1, Kind.ARRAY_STORE),\n+    LASTORE(OpcodeValues.LASTORE, 1, Kind.ARRAY_STORE),\n@@ -286,1 +286,1 @@\n-    FASTORE(ClassFile.FASTORE, 1, Kind.ARRAY_STORE),\n+    FASTORE(OpcodeValues.FASTORE, 1, Kind.ARRAY_STORE),\n@@ -289,1 +289,1 @@\n-    DASTORE(ClassFile.DASTORE, 1, Kind.ARRAY_STORE),\n+    DASTORE(OpcodeValues.DASTORE, 1, Kind.ARRAY_STORE),\n@@ -292,1 +292,1 @@\n-    AASTORE(ClassFile.AASTORE, 1, Kind.ARRAY_STORE),\n+    AASTORE(OpcodeValues.AASTORE, 1, Kind.ARRAY_STORE),\n@@ -295,1 +295,1 @@\n-    BASTORE(ClassFile.BASTORE, 1, Kind.ARRAY_STORE),\n+    BASTORE(OpcodeValues.BASTORE, 1, Kind.ARRAY_STORE),\n@@ -298,1 +298,1 @@\n-    CASTORE(ClassFile.CASTORE, 1, Kind.ARRAY_STORE),\n+    CASTORE(OpcodeValues.CASTORE, 1, Kind.ARRAY_STORE),\n@@ -301,1 +301,1 @@\n-    SASTORE(ClassFile.SASTORE, 1, Kind.ARRAY_STORE),\n+    SASTORE(OpcodeValues.SASTORE, 1, Kind.ARRAY_STORE),\n@@ -304,1 +304,1 @@\n-    POP(ClassFile.POP, 1, Kind.STACK),\n+    POP(OpcodeValues.POP, 1, Kind.STACK),\n@@ -307,1 +307,1 @@\n-    POP2(ClassFile.POP2, 1, Kind.STACK),\n+    POP2(OpcodeValues.POP2, 1, Kind.STACK),\n@@ -310,1 +310,1 @@\n-    DUP(ClassFile.DUP, 1, Kind.STACK),\n+    DUP(OpcodeValues.DUP, 1, Kind.STACK),\n@@ -313,1 +313,1 @@\n-    DUP_X1(ClassFile.DUP_X1, 1, Kind.STACK),\n+    DUP_X1(OpcodeValues.DUP_X1, 1, Kind.STACK),\n@@ -316,1 +316,1 @@\n-    DUP_X2(ClassFile.DUP_X2, 1, Kind.STACK),\n+    DUP_X2(OpcodeValues.DUP_X2, 1, Kind.STACK),\n@@ -319,1 +319,1 @@\n-    DUP2(ClassFile.DUP2, 1, Kind.STACK),\n+    DUP2(OpcodeValues.DUP2, 1, Kind.STACK),\n@@ -322,1 +322,1 @@\n-    DUP2_X1(ClassFile.DUP2_X1, 1, Kind.STACK),\n+    DUP2_X1(OpcodeValues.DUP2_X1, 1, Kind.STACK),\n@@ -325,1 +325,1 @@\n-    DUP2_X2(ClassFile.DUP2_X2, 1, Kind.STACK),\n+    DUP2_X2(OpcodeValues.DUP2_X2, 1, Kind.STACK),\n@@ -328,1 +328,1 @@\n-    SWAP(ClassFile.SWAP, 1, Kind.STACK),\n+    SWAP(OpcodeValues.SWAP, 1, Kind.STACK),\n@@ -331,1 +331,1 @@\n-    IADD(ClassFile.IADD, 1, Kind.OPERATOR),\n+    IADD(OpcodeValues.IADD, 1, Kind.OPERATOR),\n@@ -334,1 +334,1 @@\n-    LADD(ClassFile.LADD, 1, Kind.OPERATOR),\n+    LADD(OpcodeValues.LADD, 1, Kind.OPERATOR),\n@@ -337,1 +337,1 @@\n-    FADD(ClassFile.FADD, 1, Kind.OPERATOR),\n+    FADD(OpcodeValues.FADD, 1, Kind.OPERATOR),\n@@ -340,1 +340,1 @@\n-    DADD(ClassFile.DADD, 1, Kind.OPERATOR),\n+    DADD(OpcodeValues.DADD, 1, Kind.OPERATOR),\n@@ -343,1 +343,1 @@\n-    ISUB(ClassFile.ISUB, 1, Kind.OPERATOR),\n+    ISUB(OpcodeValues.ISUB, 1, Kind.OPERATOR),\n@@ -346,1 +346,1 @@\n-    LSUB(ClassFile.LSUB, 1, Kind.OPERATOR),\n+    LSUB(OpcodeValues.LSUB, 1, Kind.OPERATOR),\n@@ -349,1 +349,1 @@\n-    FSUB(ClassFile.FSUB, 1, Kind.OPERATOR),\n+    FSUB(OpcodeValues.FSUB, 1, Kind.OPERATOR),\n@@ -352,1 +352,1 @@\n-    DSUB(ClassFile.DSUB, 1, Kind.OPERATOR),\n+    DSUB(OpcodeValues.DSUB, 1, Kind.OPERATOR),\n@@ -355,1 +355,1 @@\n-    IMUL(ClassFile.IMUL, 1, Kind.OPERATOR),\n+    IMUL(OpcodeValues.IMUL, 1, Kind.OPERATOR),\n@@ -358,1 +358,1 @@\n-    LMUL(ClassFile.LMUL, 1, Kind.OPERATOR),\n+    LMUL(OpcodeValues.LMUL, 1, Kind.OPERATOR),\n@@ -361,1 +361,1 @@\n-    FMUL(ClassFile.FMUL, 1, Kind.OPERATOR),\n+    FMUL(OpcodeValues.FMUL, 1, Kind.OPERATOR),\n@@ -364,1 +364,1 @@\n-    DMUL(ClassFile.DMUL, 1, Kind.OPERATOR),\n+    DMUL(OpcodeValues.DMUL, 1, Kind.OPERATOR),\n@@ -367,1 +367,1 @@\n-    IDIV(ClassFile.IDIV, 1, Kind.OPERATOR),\n+    IDIV(OpcodeValues.IDIV, 1, Kind.OPERATOR),\n@@ -370,1 +370,1 @@\n-    LDIV(ClassFile.LDIV, 1, Kind.OPERATOR),\n+    LDIV(OpcodeValues.LDIV, 1, Kind.OPERATOR),\n@@ -373,1 +373,1 @@\n-    FDIV(ClassFile.FDIV, 1, Kind.OPERATOR),\n+    FDIV(OpcodeValues.FDIV, 1, Kind.OPERATOR),\n@@ -376,1 +376,1 @@\n-    DDIV(ClassFile.DDIV, 1, Kind.OPERATOR),\n+    DDIV(OpcodeValues.DDIV, 1, Kind.OPERATOR),\n@@ -379,1 +379,1 @@\n-    IREM(ClassFile.IREM, 1, Kind.OPERATOR),\n+    IREM(OpcodeValues.IREM, 1, Kind.OPERATOR),\n@@ -382,1 +382,1 @@\n-    LREM(ClassFile.LREM, 1, Kind.OPERATOR),\n+    LREM(OpcodeValues.LREM, 1, Kind.OPERATOR),\n@@ -385,1 +385,1 @@\n-    FREM(ClassFile.FREM, 1, Kind.OPERATOR),\n+    FREM(OpcodeValues.FREM, 1, Kind.OPERATOR),\n@@ -388,1 +388,1 @@\n-    DREM(ClassFile.DREM, 1, Kind.OPERATOR),\n+    DREM(OpcodeValues.DREM, 1, Kind.OPERATOR),\n@@ -391,1 +391,1 @@\n-    INEG(ClassFile.INEG, 1, Kind.OPERATOR),\n+    INEG(OpcodeValues.INEG, 1, Kind.OPERATOR),\n@@ -394,1 +394,1 @@\n-    LNEG(ClassFile.LNEG, 1, Kind.OPERATOR),\n+    LNEG(OpcodeValues.LNEG, 1, Kind.OPERATOR),\n@@ -397,1 +397,1 @@\n-    FNEG(ClassFile.FNEG, 1, Kind.OPERATOR),\n+    FNEG(OpcodeValues.FNEG, 1, Kind.OPERATOR),\n@@ -400,1 +400,1 @@\n-    DNEG(ClassFile.DNEG, 1, Kind.OPERATOR),\n+    DNEG(OpcodeValues.DNEG, 1, Kind.OPERATOR),\n@@ -403,1 +403,1 @@\n-    ISHL(ClassFile.ISHL, 1, Kind.OPERATOR),\n+    ISHL(OpcodeValues.ISHL, 1, Kind.OPERATOR),\n@@ -406,1 +406,1 @@\n-    LSHL(ClassFile.LSHL, 1, Kind.OPERATOR),\n+    LSHL(OpcodeValues.LSHL, 1, Kind.OPERATOR),\n@@ -409,1 +409,1 @@\n-    ISHR(ClassFile.ISHR, 1, Kind.OPERATOR),\n+    ISHR(OpcodeValues.ISHR, 1, Kind.OPERATOR),\n@@ -412,1 +412,1 @@\n-    LSHR(ClassFile.LSHR, 1, Kind.OPERATOR),\n+    LSHR(OpcodeValues.LSHR, 1, Kind.OPERATOR),\n@@ -415,1 +415,1 @@\n-    IUSHR(ClassFile.IUSHR, 1, Kind.OPERATOR),\n+    IUSHR(OpcodeValues.IUSHR, 1, Kind.OPERATOR),\n@@ -418,1 +418,1 @@\n-    LUSHR(ClassFile.LUSHR, 1, Kind.OPERATOR),\n+    LUSHR(OpcodeValues.LUSHR, 1, Kind.OPERATOR),\n@@ -421,1 +421,1 @@\n-    IAND(ClassFile.IAND, 1, Kind.OPERATOR),\n+    IAND(OpcodeValues.IAND, 1, Kind.OPERATOR),\n@@ -424,1 +424,1 @@\n-    LAND(ClassFile.LAND, 1, Kind.OPERATOR),\n+    LAND(OpcodeValues.LAND, 1, Kind.OPERATOR),\n@@ -427,1 +427,1 @@\n-    IOR(ClassFile.IOR, 1, Kind.OPERATOR),\n+    IOR(OpcodeValues.IOR, 1, Kind.OPERATOR),\n@@ -430,1 +430,1 @@\n-    LOR(ClassFile.LOR, 1, Kind.OPERATOR),\n+    LOR(OpcodeValues.LOR, 1, Kind.OPERATOR),\n@@ -433,1 +433,1 @@\n-    IXOR(ClassFile.IXOR, 1, Kind.OPERATOR),\n+    IXOR(OpcodeValues.IXOR, 1, Kind.OPERATOR),\n@@ -436,1 +436,1 @@\n-    LXOR(ClassFile.LXOR, 1, Kind.OPERATOR),\n+    LXOR(OpcodeValues.LXOR, 1, Kind.OPERATOR),\n@@ -439,1 +439,1 @@\n-    IINC(ClassFile.IINC, 3, Kind.INCREMENT),\n+    IINC(OpcodeValues.IINC, 3, Kind.INCREMENT),\n@@ -442,1 +442,1 @@\n-    I2L(ClassFile.I2L, 1, Kind.CONVERT),\n+    I2L(OpcodeValues.I2L, 1, Kind.CONVERT),\n@@ -445,1 +445,1 @@\n-    I2F(ClassFile.I2F, 1, Kind.CONVERT),\n+    I2F(OpcodeValues.I2F, 1, Kind.CONVERT),\n@@ -448,1 +448,1 @@\n-    I2D(ClassFile.I2D, 1, Kind.CONVERT),\n+    I2D(OpcodeValues.I2D, 1, Kind.CONVERT),\n@@ -451,1 +451,1 @@\n-    L2I(ClassFile.L2I, 1, Kind.CONVERT),\n+    L2I(OpcodeValues.L2I, 1, Kind.CONVERT),\n@@ -454,1 +454,1 @@\n-    L2F(ClassFile.L2F, 1, Kind.CONVERT),\n+    L2F(OpcodeValues.L2F, 1, Kind.CONVERT),\n@@ -457,1 +457,1 @@\n-    L2D(ClassFile.L2D, 1, Kind.CONVERT),\n+    L2D(OpcodeValues.L2D, 1, Kind.CONVERT),\n@@ -460,1 +460,1 @@\n-    F2I(ClassFile.F2I, 1, Kind.CONVERT),\n+    F2I(OpcodeValues.F2I, 1, Kind.CONVERT),\n@@ -463,1 +463,1 @@\n-    F2L(ClassFile.F2L, 1, Kind.CONVERT),\n+    F2L(OpcodeValues.F2L, 1, Kind.CONVERT),\n@@ -466,1 +466,1 @@\n-    F2D(ClassFile.F2D, 1, Kind.CONVERT),\n+    F2D(OpcodeValues.F2D, 1, Kind.CONVERT),\n@@ -469,1 +469,1 @@\n-    D2I(ClassFile.D2I, 1, Kind.CONVERT),\n+    D2I(OpcodeValues.D2I, 1, Kind.CONVERT),\n@@ -472,1 +472,1 @@\n-    D2L(ClassFile.D2L, 1, Kind.CONVERT),\n+    D2L(OpcodeValues.D2L, 1, Kind.CONVERT),\n@@ -475,1 +475,1 @@\n-    D2F(ClassFile.D2F, 1, Kind.CONVERT),\n+    D2F(OpcodeValues.D2F, 1, Kind.CONVERT),\n@@ -478,1 +478,1 @@\n-    I2B(ClassFile.I2B, 1, Kind.CONVERT),\n+    I2B(OpcodeValues.I2B, 1, Kind.CONVERT),\n@@ -481,1 +481,1 @@\n-    I2C(ClassFile.I2C, 1, Kind.CONVERT),\n+    I2C(OpcodeValues.I2C, 1, Kind.CONVERT),\n@@ -484,1 +484,1 @@\n-    I2S(ClassFile.I2S, 1, Kind.CONVERT),\n+    I2S(OpcodeValues.I2S, 1, Kind.CONVERT),\n@@ -487,1 +487,1 @@\n-    LCMP(ClassFile.LCMP, 1, Kind.OPERATOR),\n+    LCMP(OpcodeValues.LCMP, 1, Kind.OPERATOR),\n@@ -490,1 +490,1 @@\n-    FCMPL(ClassFile.FCMPL, 1, Kind.OPERATOR),\n+    FCMPL(OpcodeValues.FCMPL, 1, Kind.OPERATOR),\n@@ -493,1 +493,1 @@\n-    FCMPG(ClassFile.FCMPG, 1, Kind.OPERATOR),\n+    FCMPG(OpcodeValues.FCMPG, 1, Kind.OPERATOR),\n@@ -496,1 +496,1 @@\n-    DCMPL(ClassFile.DCMPL, 1, Kind.OPERATOR),\n+    DCMPL(OpcodeValues.DCMPL, 1, Kind.OPERATOR),\n@@ -499,1 +499,1 @@\n-    DCMPG(ClassFile.DCMPG, 1, Kind.OPERATOR),\n+    DCMPG(OpcodeValues.DCMPG, 1, Kind.OPERATOR),\n@@ -502,1 +502,1 @@\n-    IFEQ(ClassFile.IFEQ, 3, Kind.BRANCH),\n+    IFEQ(OpcodeValues.IFEQ, 3, Kind.BRANCH),\n@@ -505,1 +505,1 @@\n-    IFNE(ClassFile.IFNE, 3, Kind.BRANCH),\n+    IFNE(OpcodeValues.IFNE, 3, Kind.BRANCH),\n@@ -508,1 +508,1 @@\n-    IFLT(ClassFile.IFLT, 3, Kind.BRANCH),\n+    IFLT(OpcodeValues.IFLT, 3, Kind.BRANCH),\n@@ -511,1 +511,1 @@\n-    IFGE(ClassFile.IFGE, 3, Kind.BRANCH),\n+    IFGE(OpcodeValues.IFGE, 3, Kind.BRANCH),\n@@ -514,1 +514,1 @@\n-    IFGT(ClassFile.IFGT, 3, Kind.BRANCH),\n+    IFGT(OpcodeValues.IFGT, 3, Kind.BRANCH),\n@@ -517,1 +517,1 @@\n-    IFLE(ClassFile.IFLE, 3, Kind.BRANCH),\n+    IFLE(OpcodeValues.IFLE, 3, Kind.BRANCH),\n@@ -520,1 +520,1 @@\n-    IF_ICMPEQ(ClassFile.IF_ICMPEQ, 3, Kind.BRANCH),\n+    IF_ICMPEQ(OpcodeValues.IF_ICMPEQ, 3, Kind.BRANCH),\n@@ -523,1 +523,1 @@\n-    IF_ICMPNE(ClassFile.IF_ICMPNE, 3, Kind.BRANCH),\n+    IF_ICMPNE(OpcodeValues.IF_ICMPNE, 3, Kind.BRANCH),\n@@ -526,1 +526,1 @@\n-    IF_ICMPLT(ClassFile.IF_ICMPLT, 3, Kind.BRANCH),\n+    IF_ICMPLT(OpcodeValues.IF_ICMPLT, 3, Kind.BRANCH),\n@@ -529,1 +529,1 @@\n-    IF_ICMPGE(ClassFile.IF_ICMPGE, 3, Kind.BRANCH),\n+    IF_ICMPGE(OpcodeValues.IF_ICMPGE, 3, Kind.BRANCH),\n@@ -532,1 +532,1 @@\n-    IF_ICMPGT(ClassFile.IF_ICMPGT, 3, Kind.BRANCH),\n+    IF_ICMPGT(OpcodeValues.IF_ICMPGT, 3, Kind.BRANCH),\n@@ -535,1 +535,1 @@\n-    IF_ICMPLE(ClassFile.IF_ICMPLE, 3, Kind.BRANCH),\n+    IF_ICMPLE(OpcodeValues.IF_ICMPLE, 3, Kind.BRANCH),\n@@ -538,1 +538,1 @@\n-    IF_ACMPEQ(ClassFile.IF_ACMPEQ, 3, Kind.BRANCH),\n+    IF_ACMPEQ(OpcodeValues.IF_ACMPEQ, 3, Kind.BRANCH),\n@@ -541,1 +541,1 @@\n-    IF_ACMPNE(ClassFile.IF_ACMPNE, 3, Kind.BRANCH),\n+    IF_ACMPNE(OpcodeValues.IF_ACMPNE, 3, Kind.BRANCH),\n@@ -544,1 +544,1 @@\n-    GOTO(ClassFile.GOTO, 3, Kind.BRANCH),\n+    GOTO(OpcodeValues.GOTO, 3, Kind.BRANCH),\n@@ -550,1 +550,1 @@\n-    JSR(ClassFile.JSR, 3, Kind.DISCONTINUED_JSR),\n+    JSR(OpcodeValues.JSR, 3, Kind.DISCONTINUED_JSR),\n@@ -556,1 +556,1 @@\n-    RET(ClassFile.RET, 2, Kind.DISCONTINUED_RET),\n+    RET(OpcodeValues.RET, 2, Kind.DISCONTINUED_RET),\n@@ -559,1 +559,1 @@\n-    TABLESWITCH(ClassFile.TABLESWITCH, -1, Kind.TABLE_SWITCH),\n+    TABLESWITCH(OpcodeValues.TABLESWITCH, -1, Kind.TABLE_SWITCH),\n@@ -562,1 +562,1 @@\n-    LOOKUPSWITCH(ClassFile.LOOKUPSWITCH, -1, Kind.LOOKUP_SWITCH),\n+    LOOKUPSWITCH(OpcodeValues.LOOKUPSWITCH, -1, Kind.LOOKUP_SWITCH),\n@@ -565,1 +565,1 @@\n-    IRETURN(ClassFile.IRETURN, 1, Kind.RETURN),\n+    IRETURN(OpcodeValues.IRETURN, 1, Kind.RETURN),\n@@ -568,1 +568,1 @@\n-    LRETURN(ClassFile.LRETURN, 1, Kind.RETURN),\n+    LRETURN(OpcodeValues.LRETURN, 1, Kind.RETURN),\n@@ -571,1 +571,1 @@\n-    FRETURN(ClassFile.FRETURN, 1, Kind.RETURN),\n+    FRETURN(OpcodeValues.FRETURN, 1, Kind.RETURN),\n@@ -574,1 +574,1 @@\n-    DRETURN(ClassFile.DRETURN, 1, Kind.RETURN),\n+    DRETURN(OpcodeValues.DRETURN, 1, Kind.RETURN),\n@@ -577,1 +577,1 @@\n-    ARETURN(ClassFile.ARETURN, 1, Kind.RETURN),\n+    ARETURN(OpcodeValues.ARETURN, 1, Kind.RETURN),\n@@ -580,1 +580,1 @@\n-    RETURN(ClassFile.RETURN, 1, Kind.RETURN),\n+    RETURN(OpcodeValues.RETURN, 1, Kind.RETURN),\n@@ -583,1 +583,1 @@\n-    GETSTATIC(ClassFile.GETSTATIC, 3, Kind.FIELD_ACCESS),\n+    GETSTATIC(OpcodeValues.GETSTATIC, 3, Kind.FIELD_ACCESS),\n@@ -586,1 +586,1 @@\n-    PUTSTATIC(ClassFile.PUTSTATIC, 3, Kind.FIELD_ACCESS),\n+    PUTSTATIC(OpcodeValues.PUTSTATIC, 3, Kind.FIELD_ACCESS),\n@@ -589,1 +589,1 @@\n-    GETFIELD(ClassFile.GETFIELD, 3, Kind.FIELD_ACCESS),\n+    GETFIELD(OpcodeValues.GETFIELD, 3, Kind.FIELD_ACCESS),\n@@ -592,1 +592,1 @@\n-    PUTFIELD(ClassFile.PUTFIELD, 3, Kind.FIELD_ACCESS),\n+    PUTFIELD(OpcodeValues.PUTFIELD, 3, Kind.FIELD_ACCESS),\n@@ -595,1 +595,1 @@\n-    INVOKEVIRTUAL(ClassFile.INVOKEVIRTUAL, 3, Kind.INVOKE),\n+    INVOKEVIRTUAL(OpcodeValues.INVOKEVIRTUAL, 3, Kind.INVOKE),\n@@ -601,1 +601,1 @@\n-    INVOKESPECIAL(ClassFile.INVOKESPECIAL, 3, Kind.INVOKE),\n+    INVOKESPECIAL(OpcodeValues.INVOKESPECIAL, 3, Kind.INVOKE),\n@@ -604,1 +604,1 @@\n-    INVOKESTATIC(ClassFile.INVOKESTATIC, 3, Kind.INVOKE),\n+    INVOKESTATIC(OpcodeValues.INVOKESTATIC, 3, Kind.INVOKE),\n@@ -607,1 +607,1 @@\n-    INVOKEINTERFACE(ClassFile.INVOKEINTERFACE, 5, Kind.INVOKE),\n+    INVOKEINTERFACE(OpcodeValues.INVOKEINTERFACE, 5, Kind.INVOKE),\n@@ -610,1 +610,1 @@\n-    INVOKEDYNAMIC(ClassFile.INVOKEDYNAMIC, 5, Kind.INVOKE_DYNAMIC),\n+    INVOKEDYNAMIC(OpcodeValues.INVOKEDYNAMIC, 5, Kind.INVOKE_DYNAMIC),\n@@ -613,1 +613,1 @@\n-    NEW(ClassFile.NEW, 3, Kind.NEW_OBJECT),\n+    NEW(OpcodeValues.NEW, 3, Kind.NEW_OBJECT),\n@@ -616,1 +616,1 @@\n-    NEWARRAY(ClassFile.NEWARRAY, 2, Kind.NEW_PRIMITIVE_ARRAY),\n+    NEWARRAY(OpcodeValues.NEWARRAY, 2, Kind.NEW_PRIMITIVE_ARRAY),\n@@ -619,1 +619,1 @@\n-    ANEWARRAY(ClassFile.ANEWARRAY, 3, Kind.NEW_REF_ARRAY),\n+    ANEWARRAY(OpcodeValues.ANEWARRAY, 3, Kind.NEW_REF_ARRAY),\n@@ -622,1 +622,1 @@\n-    ARRAYLENGTH(ClassFile.ARRAYLENGTH, 1, Kind.OPERATOR),\n+    ARRAYLENGTH(OpcodeValues.ARRAYLENGTH, 1, Kind.OPERATOR),\n@@ -625,1 +625,1 @@\n-    ATHROW(ClassFile.ATHROW, 1, Kind.THROW_EXCEPTION),\n+    ATHROW(OpcodeValues.ATHROW, 1, Kind.THROW_EXCEPTION),\n@@ -628,1 +628,1 @@\n-    CHECKCAST(ClassFile.CHECKCAST, 3, Kind.TYPE_CHECK),\n+    CHECKCAST(OpcodeValues.CHECKCAST, 3, Kind.TYPE_CHECK),\n@@ -631,1 +631,1 @@\n-    INSTANCEOF(ClassFile.INSTANCEOF, 3, Kind.TYPE_CHECK),\n+    INSTANCEOF(OpcodeValues.INSTANCEOF, 3, Kind.TYPE_CHECK),\n@@ -634,1 +634,1 @@\n-    MONITORENTER(ClassFile.MONITORENTER, 1, Kind.MONITOR),\n+    MONITORENTER(OpcodeValues.MONITORENTER, 1, Kind.MONITOR),\n@@ -637,1 +637,1 @@\n-    MONITOREXIT(ClassFile.MONITOREXIT, 1, Kind.MONITOR),\n+    MONITOREXIT(OpcodeValues.MONITOREXIT, 1, Kind.MONITOR),\n@@ -640,1 +640,1 @@\n-    MULTIANEWARRAY(ClassFile.MULTIANEWARRAY, 4, Kind.NEW_MULTI_ARRAY),\n+    MULTIANEWARRAY(OpcodeValues.MULTIANEWARRAY, 4, Kind.NEW_MULTI_ARRAY),\n@@ -643,1 +643,1 @@\n-    IFNULL(ClassFile.IFNULL, 3, Kind.BRANCH),\n+    IFNULL(OpcodeValues.IFNULL, 3, Kind.BRANCH),\n@@ -646,1 +646,1 @@\n-    IFNONNULL(ClassFile.IFNONNULL, 3, Kind.BRANCH),\n+    IFNONNULL(OpcodeValues.IFNONNULL, 3, Kind.BRANCH),\n@@ -649,1 +649,1 @@\n-    GOTO_W(ClassFile.GOTO_W, 5, Kind.BRANCH),\n+    GOTO_W(OpcodeValues.GOTO_W, 5, Kind.BRANCH),\n@@ -655,1 +655,1 @@\n-    JSR_W(ClassFile.JSR_W, 5, Kind.DISCONTINUED_JSR),\n+    JSR_W(OpcodeValues.JSR_W, 5, Kind.DISCONTINUED_JSR),\n@@ -658,1 +658,1 @@\n-    ILOAD_W((ClassFile.WIDE << 8) | ClassFile.ILOAD, 4, Kind.LOAD),\n+    ILOAD_W((OpcodeValues.WIDE << 8) | OpcodeValues.ILOAD, 4, Kind.LOAD),\n@@ -661,1 +661,1 @@\n-    LLOAD_W((ClassFile.WIDE << 8) | ClassFile.LLOAD, 4, Kind.LOAD),\n+    LLOAD_W((OpcodeValues.WIDE << 8) | OpcodeValues.LLOAD, 4, Kind.LOAD),\n@@ -664,1 +664,1 @@\n-    FLOAD_W((ClassFile.WIDE << 8) | ClassFile.FLOAD, 4, Kind.LOAD),\n+    FLOAD_W((OpcodeValues.WIDE << 8) | OpcodeValues.FLOAD, 4, Kind.LOAD),\n@@ -667,1 +667,1 @@\n-    DLOAD_W((ClassFile.WIDE << 8) | ClassFile.DLOAD, 4, Kind.LOAD),\n+    DLOAD_W((OpcodeValues.WIDE << 8) | OpcodeValues.DLOAD, 4, Kind.LOAD),\n@@ -670,1 +670,1 @@\n-    ALOAD_W((ClassFile.WIDE << 8) | ClassFile.ALOAD, 4, Kind.LOAD),\n+    ALOAD_W((OpcodeValues.WIDE << 8) | OpcodeValues.ALOAD, 4, Kind.LOAD),\n@@ -673,1 +673,1 @@\n-    ISTORE_W((ClassFile.WIDE << 8) | ClassFile.ISTORE, 4, Kind.STORE),\n+    ISTORE_W((OpcodeValues.WIDE << 8) | OpcodeValues.ISTORE, 4, Kind.STORE),\n@@ -676,1 +676,1 @@\n-    LSTORE_W((ClassFile.WIDE << 8) | ClassFile.LSTORE, 4, Kind.STORE),\n+    LSTORE_W((OpcodeValues.WIDE << 8) | OpcodeValues.LSTORE, 4, Kind.STORE),\n@@ -679,1 +679,1 @@\n-    FSTORE_W((ClassFile.WIDE << 8) | ClassFile.FSTORE, 4, Kind.STORE),\n+    FSTORE_W((OpcodeValues.WIDE << 8) | OpcodeValues.FSTORE, 4, Kind.STORE),\n@@ -682,1 +682,1 @@\n-    DSTORE_W((ClassFile.WIDE << 8) | ClassFile.DSTORE, 4, Kind.STORE),\n+    DSTORE_W((OpcodeValues.WIDE << 8) | OpcodeValues.DSTORE, 4, Kind.STORE),\n@@ -685,1 +685,1 @@\n-    ASTORE_W((ClassFile.WIDE << 8) | ClassFile.ASTORE, 4, Kind.STORE),\n+    ASTORE_W((OpcodeValues.WIDE << 8) | OpcodeValues.ASTORE, 4, Kind.STORE),\n@@ -691,1 +691,1 @@\n-    RET_W((ClassFile.WIDE << 8) | ClassFile.RET, 4, Kind.DISCONTINUED_RET),\n+    RET_W((OpcodeValues.WIDE << 8) | OpcodeValues.RET, 4, Kind.DISCONTINUED_RET),\n@@ -694,1 +694,1 @@\n-    IINC_W((ClassFile.WIDE << 8) | ClassFile.IINC, 6, Kind.INCREMENT);\n+    IINC_W((OpcodeValues.WIDE << 8) | OpcodeValues.IINC, 6, Kind.INCREMENT);\n@@ -1088,2 +1088,6 @@\n-     * first 2 bytes of the instruction, which are the {@code wide} opcode and the functional\n-     * local variable opcode, as a U2 value.\n+     * first 2 bytes of the instruction, which are the {@link OpcodeValues#WIDE wide} opcode\n+     * and the functional opcode, as a U2 value.\n+     *\n+     * @apiNote\n+     * Constants in {@link OpcodeValues}, such as {@link OpcodeValues#NOP}, describe the\n+     * non-wide opcode values returned by this method.\n@@ -1094,1 +1098,1 @@\n-     * {@return true if this is a pseudo-opcode modified by {@code wide}}\n+     * {@return true if this is a pseudo-opcode modified by {@link OpcodeValues#WIDE wide}}\n@@ -1121,0 +1125,1224 @@\n+\n+    \/**\n+     * Holds the constant values of the Opcodes.\n+     *\n+     * @see Opcode#bytecode() Opcode::bytecode\n+     * @since 24\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+    public static final class OpcodeValues {\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#NOP nop} instruction.\n+         *\/\n+        public static final int NOP = 0;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ACONST_NULL aconst_null} instruction.\n+         *\/\n+        public static final int ACONST_NULL = 1;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ICONST_M1 iconst_m1} instruction.\n+         *\/\n+        public static final int ICONST_M1 = 2;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ICONST_0 iconst_0} instruction.\n+         *\/\n+        public static final int ICONST_0 = 3;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ICONST_1 iconst_1} instruction.\n+         *\/\n+        public static final int ICONST_1 = 4;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ICONST_2 iconst_2} instruction.\n+         *\/\n+        public static final int ICONST_2 = 5;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ICONST_3 iconst_3} instruction.\n+         *\/\n+        public static final int ICONST_3 = 6;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ICONST_4 iconst_4} instruction.\n+         *\/\n+        public static final int ICONST_4 = 7;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ICONST_5 iconst_5} instruction.\n+         *\/\n+        public static final int ICONST_5 = 8;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LCONST_0 lconst_0} instruction.\n+         *\/\n+        public static final int LCONST_0 = 9;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LCONST_1 lconst_1} instruction.\n+         *\/\n+        public static final int LCONST_1 = 10;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FCONST_0 fconst_0} instruction.\n+         *\/\n+        public static final int FCONST_0 = 11;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FCONST_1 fconst_1} instruction.\n+         *\/\n+        public static final int FCONST_1 = 12;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FCONST_2 fconst_2} instruction.\n+         *\/\n+        public static final int FCONST_2 = 13;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DCONST_0 dconst_0} instruction.\n+         *\/\n+        public static final int DCONST_0 = 14;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DCONST_1 dconst_1} instruction.\n+         *\/\n+        public static final int DCONST_1 = 15;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#BIPUSH bipush} instruction.\n+         *\/\n+        public static final int BIPUSH = 16;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#SIPUSH sipush} instruction.\n+         *\/\n+        public static final int SIPUSH = 17;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LDC ldc} instruction.\n+         *\/\n+        public static final int LDC = 18;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LDC_W ldc_w} instruction.\n+         *\/\n+        public static final int LDC_W = 19;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LDC2_W ldc2_w} instruction.\n+         *\/\n+        public static final int LDC2_W = 20;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ILOAD iload} instruction.\n+         *\/\n+        public static final int ILOAD = 21;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LLOAD lload} instruction.\n+         *\/\n+        public static final int LLOAD = 22;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FLOAD fload} instruction.\n+         *\/\n+        public static final int FLOAD = 23;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DLOAD dload} instruction.\n+         *\/\n+        public static final int DLOAD = 24;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ALOAD aload} instruction.\n+         *\/\n+        public static final int ALOAD = 25;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ILOAD_0 iload_0} instruction.\n+         *\/\n+        public static final int ILOAD_0 = 26;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ILOAD_1 iload_1} instruction.\n+         *\/\n+        public static final int ILOAD_1 = 27;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ILOAD_2 iload_2} instruction.\n+         *\/\n+        public static final int ILOAD_2 = 28;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ILOAD_3 iload_3} instruction.\n+         *\/\n+        public static final int ILOAD_3 = 29;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LLOAD_0 lload_0} instruction.\n+         *\/\n+        public static final int LLOAD_0 = 30;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LLOAD_1 lload_1} instruction.\n+         *\/\n+        public static final int LLOAD_1 = 31;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LLOAD_2 lload_2} instruction.\n+         *\/\n+        public static final int LLOAD_2 = 32;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LLOAD_3 lload_3} instruction.\n+         *\/\n+        public static final int LLOAD_3 = 33;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FLOAD_0 fload_0} instruction.\n+         *\/\n+        public static final int FLOAD_0 = 34;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FLOAD_1 fload_1} instruction.\n+         *\/\n+        public static final int FLOAD_1 = 35;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FLOAD_2 fload_2} instruction.\n+         *\/\n+        public static final int FLOAD_2 = 36;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FLOAD_3 fload_3} instruction.\n+         *\/\n+        public static final int FLOAD_3 = 37;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DLOAD_0 dload_0} instruction.\n+         *\/\n+        public static final int DLOAD_0 = 38;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DLOAD_1 dload_1} instruction.\n+         *\/\n+        public static final int DLOAD_1 = 39;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DLOAD_2 dload_2} instruction.\n+         *\/\n+        public static final int DLOAD_2 = 40;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DLOAD_3 dload_3} instruction.\n+         *\/\n+        public static final int DLOAD_3 = 41;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ALOAD_0 aload_0} instruction.\n+         *\/\n+        public static final int ALOAD_0 = 42;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ALOAD_1 aload_1} instruction.\n+         *\/\n+        public static final int ALOAD_1 = 43;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ALOAD_2 aload_2} instruction.\n+         *\/\n+        public static final int ALOAD_2 = 44;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ALOAD_3 aload_3} instruction.\n+         *\/\n+        public static final int ALOAD_3 = 45;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IALOAD iaload} instruction.\n+         *\/\n+        public static final int IALOAD = 46;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LALOAD laload} instruction.\n+         *\/\n+        public static final int LALOAD = 47;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FALOAD faload} instruction.\n+         *\/\n+        public static final int FALOAD = 48;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DALOAD daload} instruction.\n+         *\/\n+        public static final int DALOAD = 49;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#AALOAD aaload} instruction.\n+         *\/\n+        public static final int AALOAD = 50;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#BALOAD baload} instruction.\n+         *\/\n+        public static final int BALOAD = 51;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#CALOAD caload} instruction.\n+         *\/\n+        public static final int CALOAD = 52;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#SALOAD saload} instruction.\n+         *\/\n+        public static final int SALOAD = 53;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ISTORE istore} instruction.\n+         *\/\n+        public static final int ISTORE = 54;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LSTORE lstore} instruction.\n+         *\/\n+        public static final int LSTORE = 55;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FSTORE fstore} instruction.\n+         *\/\n+        public static final int FSTORE = 56;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DSTORE dstore} instruction.\n+         *\/\n+        public static final int DSTORE = 57;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ASTORE astore} instruction.\n+         *\/\n+        public static final int ASTORE = 58;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ISTORE_0 istore_0} instruction.\n+         *\/\n+        public static final int ISTORE_0 = 59;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ISTORE_1 istore_1} instruction.\n+         *\/\n+        public static final int ISTORE_1 = 60;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ISTORE_2 istore_2} instruction.\n+         *\/\n+        public static final int ISTORE_2 = 61;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ISTORE_3 istore_3} instruction.\n+         *\/\n+        public static final int ISTORE_3 = 62;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LSTORE_0 lstore_0} instruction.\n+         *\/\n+        public static final int LSTORE_0 = 63;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LSTORE_1 lstore_1} instruction.\n+         *\/\n+        public static final int LSTORE_1 = 64;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LSTORE_2 lstore_2} instruction.\n+         *\/\n+        public static final int LSTORE_2 = 65;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LSTORE_3 lstore_3} instruction.\n+         *\/\n+        public static final int LSTORE_3 = 66;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FSTORE_0 fstore_0} instruction.\n+         *\/\n+        public static final int FSTORE_0 = 67;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FSTORE_1 fstore_1} instruction.\n+         *\/\n+        public static final int FSTORE_1 = 68;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FSTORE_2 fstore_2} instruction.\n+         *\/\n+        public static final int FSTORE_2 = 69;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FSTORE_3 fstore_3} instruction.\n+         *\/\n+        public static final int FSTORE_3 = 70;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DSTORE_0 dstore_0} instruction.\n+         *\/\n+        public static final int DSTORE_0 = 71;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DSTORE_1 dstore_1} instruction.\n+         *\/\n+        public static final int DSTORE_1 = 72;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DSTORE_2 dstore_2} instruction.\n+         *\/\n+        public static final int DSTORE_2 = 73;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DSTORE_3 dstore_3} instruction.\n+         *\/\n+        public static final int DSTORE_3 = 74;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ASTORE_0 astore_0} instruction.\n+         *\/\n+        public static final int ASTORE_0 = 75;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ASTORE_1 astore_1} instruction.\n+         *\/\n+        public static final int ASTORE_1 = 76;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ASTORE_2 astore_2} instruction.\n+         *\/\n+        public static final int ASTORE_2 = 77;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ASTORE_3 astore_3} instruction.\n+         *\/\n+        public static final int ASTORE_3 = 78;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IASTORE iastore} instruction.\n+         *\/\n+        public static final int IASTORE = 79;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LASTORE lastore} instruction.\n+         *\/\n+        public static final int LASTORE = 80;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FASTORE fastore} instruction.\n+         *\/\n+        public static final int FASTORE = 81;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DASTORE dastore} instruction.\n+         *\/\n+        public static final int DASTORE = 82;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#AASTORE aastore} instruction.\n+         *\/\n+        public static final int AASTORE = 83;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#BASTORE bastore} instruction.\n+         *\/\n+        public static final int BASTORE = 84;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#CASTORE castore} instruction.\n+         *\/\n+        public static final int CASTORE = 85;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#SASTORE sastore} instruction.\n+         *\/\n+        public static final int SASTORE = 86;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#POP pop} instruction.\n+         *\/\n+        public static final int POP = 87;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#POP2 pop2} instruction.\n+         *\/\n+        public static final int POP2 = 88;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DUP dup} instruction.\n+         *\/\n+        public static final int DUP = 89;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DUP_X1 dup_x1} instruction.\n+         *\/\n+        public static final int DUP_X1 = 90;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DUP_X2 dup_x2} instruction.\n+         *\/\n+        public static final int DUP_X2 = 91;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DUP2 dup2} instruction.\n+         *\/\n+        public static final int DUP2 = 92;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DUP2_X1 dup2_x1} instruction.\n+         *\/\n+        public static final int DUP2_X1 = 93;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DUP2_X2 dup2_x2} instruction.\n+         *\/\n+        public static final int DUP2_X2 = 94;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#SWAP swap} instruction.\n+         *\/\n+        public static final int SWAP = 95;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IADD iadd} instruction.\n+         *\/\n+        public static final int IADD = 96;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LADD ladd} instruction.\n+         *\/\n+        public static final int LADD = 97;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FADD fadd} instruction.\n+         *\/\n+        public static final int FADD = 98;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DADD dadd} instruction.\n+         *\/\n+        public static final int DADD = 99;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ISUB isub} instruction.\n+         *\/\n+        public static final int ISUB = 100;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LSUB lsub} instruction.\n+         *\/\n+        public static final int LSUB = 101;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FSUB fsub} instruction.\n+         *\/\n+        public static final int FSUB = 102;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DSUB dsub} instruction.\n+         *\/\n+        public static final int DSUB = 103;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IMUL imul} instruction.\n+         *\/\n+        public static final int IMUL = 104;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LMUL lmul} instruction.\n+         *\/\n+        public static final int LMUL = 105;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FMUL fmul} instruction.\n+         *\/\n+        public static final int FMUL = 106;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DMUL dmul} instruction.\n+         *\/\n+        public static final int DMUL = 107;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IDIV idiv} instruction.\n+         *\/\n+        public static final int IDIV = 108;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LDIV ldiv} instruction.\n+         *\/\n+        public static final int LDIV = 109;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FDIV fdiv} instruction.\n+         *\/\n+        public static final int FDIV = 110;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DDIV ddiv} instruction.\n+         *\/\n+        public static final int DDIV = 111;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IREM irem} instruction.\n+         *\/\n+        public static final int IREM = 112;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LREM lrem} instruction.\n+         *\/\n+        public static final int LREM = 113;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FREM frem} instruction.\n+         *\/\n+        public static final int FREM = 114;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DREM drem} instruction.\n+         *\/\n+        public static final int DREM = 115;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#INEG ineg} instruction.\n+         *\/\n+        public static final int INEG = 116;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LNEG lneg} instruction.\n+         *\/\n+        public static final int LNEG = 117;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FNEG fneg} instruction.\n+         *\/\n+        public static final int FNEG = 118;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DNEG dneg} instruction.\n+         *\/\n+        public static final int DNEG = 119;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ISHL ishl} instruction.\n+         *\/\n+        public static final int ISHL = 120;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LSHL lshl} instruction.\n+         *\/\n+        public static final int LSHL = 121;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ISHR ishr} instruction.\n+         *\/\n+        public static final int ISHR = 122;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LSHR lshr} instruction.\n+         *\/\n+        public static final int LSHR = 123;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IUSHR iushr} instruction.\n+         *\/\n+        public static final int IUSHR = 124;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LUSHR lushr} instruction.\n+         *\/\n+        public static final int LUSHR = 125;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IAND iand} instruction.\n+         *\/\n+        public static final int IAND = 126;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LAND land} instruction.\n+         *\/\n+        public static final int LAND = 127;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IOR ior} instruction.\n+         *\/\n+        public static final int IOR = 128;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LOR lor} instruction.\n+         *\/\n+        public static final int LOR = 129;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IXOR ixor} instruction.\n+         *\/\n+        public static final int IXOR = 130;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LXOR lxor} instruction.\n+         *\/\n+        public static final int LXOR = 131;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IINC iinc} instruction.\n+         *\/\n+        public static final int IINC = 132;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#I2L i2l} instruction.\n+         *\/\n+        public static final int I2L = 133;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#I2F i2f} instruction.\n+         *\/\n+        public static final int I2F = 134;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#I2D i2d} instruction.\n+         *\/\n+        public static final int I2D = 135;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#L2I l2i} instruction.\n+         *\/\n+        public static final int L2I = 136;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#L2F l2f} instruction.\n+         *\/\n+        public static final int L2F = 137;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#L2D l2d} instruction.\n+         *\/\n+        public static final int L2D = 138;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#F2I f2i} instruction.\n+         *\/\n+        public static final int F2I = 139;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#F2L f2l} instruction.\n+         *\/\n+        public static final int F2L = 140;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#F2D f2d} instruction.\n+         *\/\n+        public static final int F2D = 141;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#D2I d2i} instruction.\n+         *\/\n+        public static final int D2I = 142;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#D2L d2l} instruction.\n+         *\/\n+        public static final int D2L = 143;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#D2F d2f} instruction.\n+         *\/\n+        public static final int D2F = 144;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#I2B i2b} instruction.\n+         *\/\n+        public static final int I2B = 145;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#I2C i2c} instruction.\n+         *\/\n+        public static final int I2C = 146;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#I2S i2s} instruction.\n+         *\/\n+        public static final int I2S = 147;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LCMP lcmp} instruction.\n+         *\/\n+        public static final int LCMP = 148;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FCMPL fcmpl} instruction.\n+         *\/\n+        public static final int FCMPL = 149;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FCMPG fcmpg} instruction.\n+         *\/\n+        public static final int FCMPG = 150;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DCMPL dcmpl} instruction.\n+         *\/\n+        public static final int DCMPL = 151;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DCMPG dcmpg} instruction.\n+         *\/\n+        public static final int DCMPG = 152;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IFEQ ifeq} instruction.\n+         *\/\n+        public static final int IFEQ = 153;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IFNE ifne} instruction.\n+         *\/\n+        public static final int IFNE = 154;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IFLT iflt} instruction.\n+         *\/\n+        public static final int IFLT = 155;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IFGE ifge} instruction.\n+         *\/\n+        public static final int IFGE = 156;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IFGT ifgt} instruction.\n+         *\/\n+        public static final int IFGT = 157;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IFLE ifle} instruction.\n+         *\/\n+        public static final int IFLE = 158;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IF_ICMPEQ if_icmpeq} instruction.\n+         *\/\n+        public static final int IF_ICMPEQ = 159;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IF_ICMPNE if_icmpne} instruction.\n+         *\/\n+        public static final int IF_ICMPNE = 160;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IF_ICMPLT if_icmplt} instruction.\n+         *\/\n+        public static final int IF_ICMPLT = 161;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IF_ICMPGE if_icmpge} instruction.\n+         *\/\n+        public static final int IF_ICMPGE = 162;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IF_ICMPGT if_icmpgt} instruction.\n+         *\/\n+        public static final int IF_ICMPGT = 163;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IF_ICMPLE if_icmple} instruction.\n+         *\/\n+        public static final int IF_ICMPLE = 164;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IF_ACMPEQ if_acmpeq} instruction.\n+         *\/\n+        public static final int IF_ACMPEQ = 165;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IF_ACMPNE if_acmpne} instruction.\n+         *\/\n+        public static final int IF_ACMPNE = 166;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#GOTO goto} instruction.\n+         *\/\n+        public static final int GOTO = 167;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#JSR jsr} instruction.\n+         *\/\n+        public static final int JSR = 168;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#RET ret} instruction.\n+         *\/\n+        public static final int RET = 169;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#TABLESWITCH tableswitch} instruction.\n+         *\/\n+        public static final int TABLESWITCH = 170;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LOOKUPSWITCH lookupswitch} instruction.\n+         *\/\n+        public static final int LOOKUPSWITCH = 171;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IRETURN ireturn} instruction.\n+         *\/\n+        public static final int IRETURN = 172;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#LRETURN lreturn} instruction.\n+         *\/\n+        public static final int LRETURN = 173;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#FRETURN freturn} instruction.\n+         *\/\n+        public static final int FRETURN = 174;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#DRETURN dreturn} instruction.\n+         *\/\n+        public static final int DRETURN = 175;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ARETURN areturn} instruction.\n+         *\/\n+        public static final int ARETURN = 176;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#RETURN return} instruction.\n+         *\/\n+        public static final int RETURN = 177;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#GETSTATIC getstatic} instruction.\n+         *\/\n+        public static final int GETSTATIC = 178;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#PUTSTATIC putstatic} instruction.\n+         *\/\n+        public static final int PUTSTATIC = 179;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#GETFIELD getfield} instruction.\n+         *\/\n+        public static final int GETFIELD = 180;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#PUTFIELD putfield} instruction.\n+         *\/\n+        public static final int PUTFIELD = 181;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#INVOKEVIRTUAL invokevirtual} instruction.\n+         *\/\n+        public static final int INVOKEVIRTUAL = 182;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#INVOKESPECIAL invokespecial} instruction.\n+         *\/\n+        public static final int INVOKESPECIAL = 183;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#INVOKESTATIC invokestatic} instruction.\n+         *\/\n+        public static final int INVOKESTATIC = 184;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#INVOKEINTERFACE invokeinterface} instruction.\n+         *\/\n+        public static final int INVOKEINTERFACE = 185;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#INVOKEDYNAMIC invokedynamic} instruction.\n+         *\/\n+        public static final int INVOKEDYNAMIC = 186;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#NEW new} instruction.\n+         *\/\n+        public static final int NEW = 187;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#NEWARRAY newarray} instruction.\n+         *\/\n+        public static final int NEWARRAY = 188;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ANEWARRAY anewarray} instruction.\n+         *\/\n+        public static final int ANEWARRAY = 189;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ARRAYLENGTH arraylength} instruction.\n+         *\/\n+        public static final int ARRAYLENGTH = 190;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#ATHROW athrow} instruction.\n+         *\/\n+        public static final int ATHROW = 191;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#CHECKCAST checkcast} instruction.\n+         *\/\n+        public static final int CHECKCAST = 192;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#INSTANCEOF instanceof} instruction.\n+         *\/\n+        public static final int INSTANCEOF = 193;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#MONITORENTER monitorenter} instruction.\n+         *\/\n+        public static final int MONITORENTER = 194;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#MONITOREXIT monitorexit} instruction.\n+         *\/\n+        public static final int MONITOREXIT = 195;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#isWide() wide} instruction.\n+         *\/\n+        public static final int WIDE = 196;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#MULTIANEWARRAY multianewarray} instruction.\n+         *\/\n+        public static final int MULTIANEWARRAY = 197;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IFNULL ifnull} instruction.\n+         *\/\n+        public static final int IFNULL = 198;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#IFNONNULL ifnonnull} instruction.\n+         *\/\n+        public static final int IFNONNULL = 199;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#GOTO_W goto_w} instruction.\n+         *\/\n+        public static final int GOTO_W = 200;\n+\n+        \/**\n+         * The integer {@linkplain Opcode#bytecode() value} used to encode the {@link\n+         * Opcode#JSR_W jsr_w} instruction.\n+         *\/\n+        public static final int JSR_W = 201;\n+\n+        private OpcodeValues() {}\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Opcode.java","additions":1444,"deletions":216,"binary":false,"changes":1660,"status":"modified"},{"patch":"@@ -34,23 +34,0 @@\n-\n-import static java.lang.classfile.ClassFile.TAT_CAST;\n-import static java.lang.classfile.ClassFile.TAT_CLASS_EXTENDS;\n-import static java.lang.classfile.ClassFile.TAT_CLASS_TYPE_PARAMETER;\n-import static java.lang.classfile.ClassFile.TAT_CLASS_TYPE_PARAMETER_BOUND;\n-import static java.lang.classfile.ClassFile.TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT;\n-import static java.lang.classfile.ClassFile.TAT_CONSTRUCTOR_REFERENCE;\n-import static java.lang.classfile.ClassFile.TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT;\n-import static java.lang.classfile.ClassFile.TAT_EXCEPTION_PARAMETER;\n-import static java.lang.classfile.ClassFile.TAT_FIELD;\n-import static java.lang.classfile.ClassFile.TAT_INSTANCEOF;\n-import static java.lang.classfile.ClassFile.TAT_LOCAL_VARIABLE;\n-import static java.lang.classfile.ClassFile.TAT_METHOD_FORMAL_PARAMETER;\n-import static java.lang.classfile.ClassFile.TAT_METHOD_INVOCATION_TYPE_ARGUMENT;\n-import static java.lang.classfile.ClassFile.TAT_METHOD_RECEIVER;\n-import static java.lang.classfile.ClassFile.TAT_METHOD_REFERENCE;\n-import static java.lang.classfile.ClassFile.TAT_METHOD_REFERENCE_TYPE_ARGUMENT;\n-import static java.lang.classfile.ClassFile.TAT_METHOD_RETURN;\n-import static java.lang.classfile.ClassFile.TAT_METHOD_TYPE_PARAMETER;\n-import static java.lang.classfile.ClassFile.TAT_METHOD_TYPE_PARAMETER_BOUND;\n-import static java.lang.classfile.ClassFile.TAT_NEW;\n-import static java.lang.classfile.ClassFile.TAT_RESOURCE_VARIABLE;\n-import static java.lang.classfile.ClassFile.TAT_THROWS;\n@@ -59,0 +36,2 @@\n+import static java.lang.classfile.TypeAnnotation.TargetInfo.*;\n+\n@@ -90,1 +69,1 @@\n-        CLASS_TYPE_PARAMETER(TAT_CLASS_TYPE_PARAMETER, 1),\n+        CLASS_TYPE_PARAMETER(TARGET_CLASS_TYPE_PARAMETER, 1),\n@@ -93,1 +72,1 @@\n-        METHOD_TYPE_PARAMETER(TAT_METHOD_TYPE_PARAMETER, 1),\n+        METHOD_TYPE_PARAMETER(TARGET_METHOD_TYPE_PARAMETER, 1),\n@@ -96,1 +75,1 @@\n-        CLASS_EXTENDS(TAT_CLASS_EXTENDS, 2),\n+        CLASS_EXTENDS(TARGET_CLASS_EXTENDS, 2),\n@@ -99,1 +78,1 @@\n-        CLASS_TYPE_PARAMETER_BOUND(TAT_CLASS_TYPE_PARAMETER_BOUND, 2),\n+        CLASS_TYPE_PARAMETER_BOUND(TARGET_CLASS_TYPE_PARAMETER_BOUND, 2),\n@@ -102,1 +81,1 @@\n-        METHOD_TYPE_PARAMETER_BOUND(TAT_METHOD_TYPE_PARAMETER_BOUND, 2),\n+        METHOD_TYPE_PARAMETER_BOUND(TARGET_METHOD_TYPE_PARAMETER_BOUND, 2),\n@@ -105,1 +84,1 @@\n-        FIELD(TAT_FIELD, 0),\n+        FIELD(TARGET_FIELD, 0),\n@@ -108,1 +87,1 @@\n-        METHOD_RETURN(TAT_METHOD_RETURN, 0),\n+        METHOD_RETURN(TARGET_METHOD_RETURN, 0),\n@@ -111,1 +90,1 @@\n-        METHOD_RECEIVER(TAT_METHOD_RECEIVER, 0),\n+        METHOD_RECEIVER(TARGET_METHOD_RECEIVER, 0),\n@@ -114,1 +93,1 @@\n-        METHOD_FORMAL_PARAMETER(TAT_METHOD_FORMAL_PARAMETER, 1),\n+        METHOD_FORMAL_PARAMETER(TARGET_METHOD_FORMAL_PARAMETER, 1),\n@@ -117,1 +96,1 @@\n-        THROWS(TAT_THROWS, 2),\n+        THROWS(TARGET_THROWS, 2),\n@@ -120,1 +99,1 @@\n-        LOCAL_VARIABLE(TAT_LOCAL_VARIABLE, -1),\n+        LOCAL_VARIABLE(TARGET_LOCAL_VARIABLE, -1),\n@@ -123,1 +102,1 @@\n-        RESOURCE_VARIABLE(TAT_RESOURCE_VARIABLE, -1),\n+        RESOURCE_VARIABLE(TARGET_RESOURCE_VARIABLE, -1),\n@@ -126,1 +105,1 @@\n-        EXCEPTION_PARAMETER(TAT_EXCEPTION_PARAMETER, 2),\n+        EXCEPTION_PARAMETER(TARGET_EXCEPTION_PARAMETER, 2),\n@@ -129,1 +108,1 @@\n-        INSTANCEOF(TAT_INSTANCEOF, 2),\n+        INSTANCEOF(TARGET_INSTANCEOF, 2),\n@@ -132,1 +111,1 @@\n-        NEW(TAT_NEW, 2),\n+        NEW(TARGET_NEW, 2),\n@@ -135,1 +114,1 @@\n-        CONSTRUCTOR_REFERENCE(TAT_CONSTRUCTOR_REFERENCE, 2),\n+        CONSTRUCTOR_REFERENCE(TARGET_CONSTRUCTOR_REFERENCE, 2),\n@@ -138,1 +117,1 @@\n-        METHOD_REFERENCE(TAT_METHOD_REFERENCE, 2),\n+        METHOD_REFERENCE(TARGET_METHOD_REFERENCE, 2),\n@@ -141,1 +120,1 @@\n-        CAST(TAT_CAST, 3),\n+        CAST(TARGET_CAST, 3),\n@@ -144,1 +123,1 @@\n-        CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT(TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT, 3),\n+        CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT(TARGET_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT, 3),\n@@ -147,1 +126,1 @@\n-        METHOD_INVOCATION_TYPE_ARGUMENT(TAT_METHOD_INVOCATION_TYPE_ARGUMENT, 3),\n+        METHOD_INVOCATION_TYPE_ARGUMENT(TARGET_METHOD_INVOCATION_TYPE_ARGUMENT, 3),\n@@ -150,1 +129,1 @@\n-        CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT(TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT, 3),\n+        CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT(TARGET_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT, 3),\n@@ -153,1 +132,1 @@\n-        METHOD_REFERENCE_TYPE_ARGUMENT(TAT_METHOD_REFERENCE_TYPE_ARGUMENT, 3);\n+        METHOD_REFERENCE_TYPE_ARGUMENT(TARGET_METHOD_REFERENCE_TYPE_ARGUMENT, 3);\n@@ -165,0 +144,5 @@\n+         *\n+         * @apiNote\n+         * {@code TARGET_}-prefixed constants in {@link TargetInfo}, such as {@link\n+         * TargetInfo#TARGET_CLASS_TYPE_PARAMETER}, describe the possible return\n+         * values of this method.\n@@ -217,0 +201,140 @@\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#CLASS_TYPE_PARAMETER CLASS_TYPE_PARAMETER}.\n+         *\/\n+        int TARGET_CLASS_TYPE_PARAMETER = 0x00;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#METHOD_TYPE_PARAMETER METHOD_TYPE_PARAMETER}.\n+         *\/\n+        int TARGET_METHOD_TYPE_PARAMETER = 0x01;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#CLASS_EXTENDS CLASS_EXTENDS}.\n+         *\/\n+        int TARGET_CLASS_EXTENDS = 0x10;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#CLASS_TYPE_PARAMETER_BOUND\n+         * CLASS_TYPE_PARAMETER_BOUND}.\n+         *\/\n+        int TARGET_CLASS_TYPE_PARAMETER_BOUND = 0x11;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#METHOD_TYPE_PARAMETER_BOUND\n+         * METHOD_TYPE_PARAMETER_BOUND}.\n+         *\/\n+        int TARGET_METHOD_TYPE_PARAMETER_BOUND = 0x12;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#FIELD FIELD}.\n+         *\/\n+        int TARGET_FIELD = 0x13;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#METHOD_RETURN METHOD_RETURN}.\n+         *\/\n+        int TARGET_METHOD_RETURN = 0x14;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#METHOD_RECEIVER METHOD_RECEIVER}.\n+         *\/\n+        int TARGET_METHOD_RECEIVER = 0x15;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#METHOD_FORMAL_PARAMETER\n+         * METHOD_FORMAL_PARAMETER}.\n+         *\/\n+        int TARGET_METHOD_FORMAL_PARAMETER = 0x16;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#THROWS THROWS}.\n+         *\/\n+        int TARGET_THROWS = 0x17;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#LOCAL_VARIABLE LOCAL_VARIABLE}.\n+         *\/\n+        int TARGET_LOCAL_VARIABLE = 0x40;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#RESOURCE_VARIABLE RESOURCE_VARIABLE}.\n+         *\/\n+        int TARGET_RESOURCE_VARIABLE = 0x41;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#EXCEPTION_PARAMETER EXCEPTION_PARAMETER}.\n+         *\/\n+        int TARGET_EXCEPTION_PARAMETER = 0x42;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#INSTANCEOF INSTANCEOF}.\n+         *\/\n+        int TARGET_INSTANCEOF = 0x43;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#NEW NEW}.\n+         *\/\n+        int TARGET_NEW = 0x44;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#CONSTRUCTOR_REFERENCE\n+         * CONSTRUCTOR_REFERENCE}.\n+         *\/\n+        int TARGET_CONSTRUCTOR_REFERENCE = 0x45;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#METHOD_REFERENCE METHOD_REFERENCE}.\n+         *\/\n+        int TARGET_METHOD_REFERENCE = 0x46;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#CAST CAST}.\n+         *\/\n+        int TARGET_CAST = 0x47;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT\n+         * CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT}.\n+         *\/\n+        int TARGET_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT = 0x48;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#METHOD_INVOCATION_TYPE_ARGUMENT\n+         * METHOD_INVOCATION_TYPE_ARGUMENT}.\n+         *\/\n+        int TARGET_METHOD_INVOCATION_TYPE_ARGUMENT = 0x49;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT\n+         * CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT}.\n+         *\/\n+        int TARGET_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT = 0x4A;\n+\n+        \/**\n+         * The {@linkplain TargetType#targetTypeValue() value} of type annotation {@linkplain\n+         * #targetType target type} {@link TargetType#METHOD_REFERENCE_TYPE_ARGUMENT\n+         * METHOD_REFERENCE_TYPE_ARGUMENT}.\n+         *\/\n+        int TARGET_METHOD_REFERENCE_TYPE_ARGUMENT = 0x4B;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/TypeAnnotation.java","additions":169,"deletions":45,"binary":false,"changes":214,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.lang.classfile.instruction.CharacterRange;\n+\n@@ -73,1 +75,1 @@\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_STATEMENT} Range is a Statement\n+     * <li>{@link CharacterRange#FLAG_STATEMENT} Range is a Statement\n@@ -78,1 +80,1 @@\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_BLOCK} Range is a Block in the\n+     * <li>{@link CharacterRange#FLAG_BLOCK} Range is a Block in the\n@@ -80,1 +82,1 @@\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_ASSIGNMENT} Range is an assignment\n+     * <li>{@link CharacterRange#FLAG_ASSIGNMENT} Range is an assignment\n@@ -83,1 +85,1 @@\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_FLOW_CONTROLLER} An expression\n+     * <li>{@link CharacterRange#FLAG_FLOW_CONTROLLER} An expression\n@@ -95,1 +97,1 @@\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_FLOW_TARGET} Statement or\n+     * <li>{@link CharacterRange#FLAG_FLOW_TARGET} Statement or\n@@ -106,1 +108,1 @@\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_INVOKE} Method invocation. For\n+     * <li>{@link CharacterRange#FLAG_INVOKE} Method invocation. For\n@@ -108,1 +110,1 @@\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_CREATE} New object creation. For\n+     * <li>{@link CharacterRange#FLAG_CREATE} New object creation. For\n@@ -110,1 +112,1 @@\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_BRANCH_TRUE} A condition encoded\n+     * <li>{@link CharacterRange#FLAG_BRANCH_TRUE} A condition encoded\n@@ -122,1 +124,1 @@\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_BRANCH_FALSE} A condition encoded\n+     * <li>{@link CharacterRange#FLAG_BRANCH_FALSE} A condition encoded\n@@ -137,0 +139,1 @@\n+     * @see CharacterRange#flags()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/CharacterRangeInfo.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import static java.lang.classfile.ClassFile.*;\n@@ -88,0 +87,27 @@\n+        \/** The {@link #tag() tag} for verification type info {@link SimpleVerificationTypeInfo#TOP TOP}. *\/\n+        int ITEM_TOP = 0;\n+\n+        \/** The {@link #tag() tag} for verification type info {@link SimpleVerificationTypeInfo#INTEGER INTEGER}. *\/\n+        int ITEM_INTEGER = 1;\n+\n+        \/** The {@link #tag() tag} for verification type info {@link SimpleVerificationTypeInfo#FLOAT FLOAT}. *\/\n+        int ITEM_FLOAT = 2;\n+\n+        \/** The {@link #tag() tag} for verification type info {@link SimpleVerificationTypeInfo#DOUBLE DOUBLE}. *\/\n+        int ITEM_DOUBLE = 3;\n+\n+        \/** The {@link #tag() tag} for verification type info {@link SimpleVerificationTypeInfo#LONG LONG}. *\/\n+        int ITEM_LONG = 4;\n+\n+        \/** The {@link #tag() tag} for verification type info {@link SimpleVerificationTypeInfo#NULL NULL}. *\/\n+        int ITEM_NULL = 5;\n+\n+        \/** The {@link #tag() tag} for verification type info {@link SimpleVerificationTypeInfo#UNINITIALIZED_THIS UNINITIALIZED_THIS}. *\/\n+        int ITEM_UNINITIALIZED_THIS = 6;\n+\n+        \/** The {@link #tag() tag} for verification type info {@link ObjectVerificationTypeInfo OBJECT}. *\/\n+        int ITEM_OBJECT = 7;\n+\n+        \/** The {@link #tag() tag} for verification type info {@link UninitializedVerificationTypeInfo UNINITIALIZED}. *\/\n+        int ITEM_UNINITIALIZED = 8;\n+\n@@ -90,0 +116,4 @@\n+         *\n+         * @apiNote\n+         * {@code ITEM_}-prefixed constants in this class, such as {@link #ITEM_TOP}, describe the\n+         * possible return values of this method.\n@@ -103,1 +133,1 @@\n-        ITEM_TOP(VT_TOP),\n+        TOP(ITEM_TOP),\n@@ -106,1 +136,1 @@\n-        ITEM_INTEGER(VT_INTEGER),\n+        INTEGER(ITEM_INTEGER),\n@@ -109,1 +139,1 @@\n-        ITEM_FLOAT(VT_FLOAT),\n+        FLOAT(ITEM_FLOAT),\n@@ -112,1 +142,1 @@\n-        ITEM_DOUBLE(VT_DOUBLE),\n+        DOUBLE(ITEM_DOUBLE),\n@@ -115,1 +145,1 @@\n-        ITEM_LONG(VT_LONG),\n+        LONG(ITEM_LONG),\n@@ -118,1 +148,1 @@\n-        ITEM_NULL(VT_NULL),\n+        NULL(ITEM_NULL),\n@@ -121,1 +151,1 @@\n-        ITEM_UNINITIALIZED_THIS(VT_UNINITIALIZED_THIS);\n+        UNINITIALIZED_THIS(ITEM_UNINITIALIZED_THIS);\n@@ -137,1 +167,1 @@\n-     * A stack value for an object type.\n+     * A stack value for an object type. Its {@link #tag() tag} is {@value #ITEM_OBJECT}.\n@@ -176,1 +206,1 @@\n-     * An uninitialized stack value.\n+     * An uninitialized stack value. Its {@link #tag() tag} is {@value #ITEM_UNINITIALIZED}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/StackMapFrameInfo.java","additions":40,"deletions":10,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -41,0 +41,51 @@\n+    \/** The {@linkplain #tag tag} for {@link ClassEntry CONSTANT_Class} constant kind. *\/\n+    int TAG_CLASS = 7;\n+\n+    \/** The {@linkplain #tag tag} for {@link DoubleEntry CONSTANT_Double} constant kind. *\/\n+    int TAG_DOUBLE = 6;\n+\n+    \/** The {@linkplain #tag tag} for {@link ConstantDynamicEntry CONSTANT_Dynamic} constant kind. *\/\n+    int TAG_DYNAMIC = 17;\n+\n+    \/** The {@linkplain #tag tag} for {@link FieldRefEntry CONSTANT_Fieldref} constant kind. *\/\n+    int TAG_FIELDREF = 9;\n+\n+    \/** The {@linkplain #tag tag} for {@link FloatEntry CONSTANT_Float} constant kind. *\/\n+    int TAG_FLOAT = 4;\n+\n+    \/** The {@linkplain #tag tag} for {@link IntegerEntry CONSTANT_Integer} constant kind. *\/\n+    int TAG_INTEGER = 3;\n+\n+    \/** The {@linkplain #tag tag} for {@link InterfaceMethodRefEntry CONSTANT_InterfaceMethodref} constant kind. *\/\n+    int TAG_INTERFACE_METHODREF = 11;\n+\n+    \/** The {@linkplain #tag tag} for {@link InvokeDynamicEntry CONSTANT_InvokeDynamic} constant kind. *\/\n+    int TAG_INVOKE_DYNAMIC = 18;\n+\n+    \/** The {@linkplain #tag tag} for {@link LongEntry CONSTANT_Long} constant kind. *\/\n+    int TAG_LONG = 5;\n+\n+    \/** The {@linkplain #tag tag} for {@link MethodHandleEntry CONSTANT_MethodHandle} constant kind. *\/\n+    int TAG_METHOD_HANDLE = 15;\n+\n+    \/** The {@linkplain #tag tag} for {@link MethodRefEntry CONSTANT_Methodref} constant kind. *\/\n+    int TAG_METHODREF = 10;\n+\n+    \/** The {@linkplain #tag tag} for {@link MethodTypeEntry CONSTANT_MethodType} constant kind. *\/\n+    int TAG_METHOD_TYPE = 16;\n+\n+    \/** The {@linkplain #tag tag} for {@link ModuleEntry CONSTANT_Module} constant kind. *\/\n+    int TAG_MODULE = 19;\n+\n+    \/** The {@linkplain #tag tag} for {@link NameAndTypeEntry CONSTANT_NameAndType} constant kind. *\/\n+    int TAG_NAME_AND_TYPE = 12;\n+\n+    \/** The {@linkplain #tag tag} for {@link PackageEntry CONSTANT_Package} constant kind. *\/\n+    int TAG_PACKAGE = 20;\n+\n+    \/** The {@linkplain #tag tag} for {@link StringEntry CONSTANT_String} constant kind. *\/\n+    int TAG_STRING = 8;\n+\n+    \/** The {@linkplain #tag tag} for {@link Utf8Entry CONSTANT_Utf8} constant kind. *\/\n+    int TAG_UTF8 = 1;\n+\n@@ -48,0 +99,4 @@\n+     *\n+     * @apiNote\n+     * {@code TAG_}-prefixed constants in this class, such as {@link #TAG_UTF8},\n+     * describe the possible return values of this method.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/PoolEntry.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.lang.classfile.attribute.CharacterRangeInfo;\n@@ -48,0 +49,28 @@\n+\n+    \/** The bit mask of STATEMENT {@link CharacterRangeInfo} kind. *\/\n+    int FLAG_STATEMENT = 0x0001;\n+\n+    \/** The bit mask of BLOCK {@link CharacterRangeInfo} kind. *\/\n+    int FLAG_BLOCK = 0x0002;\n+\n+    \/** The bit mask of ASSIGNMENT {@link CharacterRangeInfo} kind. *\/\n+    int FLAG_ASSIGNMENT = 0x0004;\n+\n+    \/** The bit mask of FLOW_CONTROLLER {@link CharacterRangeInfo} kind. *\/\n+    int FLAG_FLOW_CONTROLLER = 0x0008;\n+\n+    \/** The bit mask of FLOW_TARGET {@link CharacterRangeInfo} kind. *\/\n+    int FLAG_FLOW_TARGET = 0x0010;\n+\n+    \/** The bit mask of INVOKE {@link CharacterRangeInfo} kind. *\/\n+    int FLAG_INVOKE = 0x0020;\n+\n+    \/** The bit mask of CREATE {@link CharacterRangeInfo} kind. *\/\n+    int FLAG_CREATE = 0x0040;\n+\n+    \/** The bit mask of BRANCH_TRUE {@link CharacterRangeInfo} kind. *\/\n+    int FLAG_BRANCH_TRUE = 0x0080;\n+\n+    \/** The bit mask of BRANCH_FALSE {@link CharacterRangeInfo} kind. *\/\n+    int FLAG_BRANCH_FALSE = 0x0100;\n+\n@@ -78,9 +107,9 @@\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_STATEMENT}\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_BLOCK}\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_ASSIGNMENT}\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_FLOW_CONTROLLER}\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_FLOW_TARGET}\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_INVOKE}\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_CREATE}\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_BRANCH_TRUE}\n-     * <li>{@link java.lang.classfile.ClassFile#CRT_BRANCH_FALSE}\n+     * <li>{@link #FLAG_STATEMENT}\n+     * <li>{@link #FLAG_BLOCK}\n+     * <li>{@link #FLAG_ASSIGNMENT}\n+     * <li>{@link #FLAG_FLOW_CONTROLLER}\n+     * <li>{@link #FLAG_FLOW_TARGET}\n+     * <li>{@link #FLAG_INVOKE}\n+     * <li>{@link #FLAG_CREATE}\n+     * <li>{@link #FLAG_BRANCH_TRUE}\n+     * <li>{@link #FLAG_BRANCH_FALSE}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/CharacterRange.java","additions":39,"deletions":10,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -31,1 +32,0 @@\n-import java.lang.classfile.ClassFile;\n@@ -424,1 +424,1 @@\n-            return method().tag() == ClassFile.TAG_INTERFACEMETHODREF;\n+            return method().tag() == PoolEntry.TAG_INTERFACE_METHODREF;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.classfile.ClassFile;\n@@ -58,0 +57,3 @@\n+import static java.lang.classfile.constantpool.PoolEntry.TAG_DOUBLE;\n+import static java.lang.classfile.constantpool.PoolEntry.TAG_LONG;\n+\n@@ -122,1 +124,1 @@\n-        return (tag == ClassFile.TAG_LONG || tag == ClassFile.TAG_DOUBLE) ? 2 : 1;\n+        return (tag == TAG_LONG || tag == TAG_DOUBLE) ? 2 : 1;\n@@ -158,1 +160,1 @@\n-            super(cpm, ClassFile.TAG_UTF8, index, 0);\n+            super(cpm, TAG_UTF8, index, 0);\n@@ -170,1 +172,1 @@\n-            super(cpm, ClassFile.TAG_UTF8, index, 0);\n+            super(cpm, TAG_UTF8, index, 0);\n@@ -181,1 +183,1 @@\n-            super(cpm, ClassFile.TAG_UTF8, index, 0);\n+            super(cpm, TAG_UTF8, index, 0);\n@@ -498,1 +500,1 @@\n-            super(cpm, ClassFile.TAG_CLASS, index, name);\n+            super(cpm, TAG_CLASS, index, name);\n@@ -536,1 +538,1 @@\n-            super(cpm, ClassFile.TAG_PACKAGE, index, name);\n+            super(cpm, TAG_PACKAGE, index, name);\n@@ -562,1 +564,1 @@\n-            super(cpm, ClassFile.TAG_MODULE, index, name);\n+            super(cpm, TAG_MODULE, index, name);\n@@ -591,1 +593,1 @@\n-            super(cpm, ClassFile.TAG_NAMEANDTYPE, index, name, type);\n+            super(cpm, TAG_NAME_AND_TYPE, index, name, type);\n@@ -682,1 +684,1 @@\n-            super(cpm, ClassFile.TAG_FIELDREF, index, owner, nameAndType);\n+            super(cpm, TAG_FIELDREF, index, owner, nameAndType);\n@@ -695,1 +697,1 @@\n-            super(cpm, ClassFile.TAG_METHODREF, index, owner, nameAndType);\n+            super(cpm, TAG_METHODREF, index, owner, nameAndType);\n@@ -708,1 +710,1 @@\n-            super(cpm, ClassFile.TAG_INTERFACEMETHODREF, index, owner, nameAndType);\n+            super(cpm, TAG_INTERFACE_METHODREF, index, owner, nameAndType);\n@@ -793,1 +795,1 @@\n-            super(cpm, ClassFile.TAG_INVOKEDYNAMIC, index, hash, bootstrapMethod, nameAndType);\n+            super(cpm, TAG_INVOKE_DYNAMIC, index, hash, bootstrapMethod, nameAndType);\n@@ -798,1 +800,1 @@\n-            super(cpm, ClassFile.TAG_INVOKEDYNAMIC, index, hash2(ClassFile.TAG_INVOKEDYNAMIC, bsmIndex, nameAndType.index()),\n+            super(cpm, TAG_INVOKE_DYNAMIC, index, hash2(TAG_INVOKE_DYNAMIC, bsmIndex, nameAndType.index()),\n@@ -813,1 +815,1 @@\n-            super(cpm, ClassFile.TAG_CONSTANTDYNAMIC, index, hash, bootstrapMethod, nameAndType);\n+            super(cpm, TAG_DYNAMIC, index, hash, bootstrapMethod, nameAndType);\n@@ -818,1 +820,1 @@\n-            super(cpm, ClassFile.TAG_CONSTANTDYNAMIC, index, hash2(ClassFile.TAG_CONSTANTDYNAMIC, bsmIndex, nameAndType.index()),\n+            super(cpm, TAG_DYNAMIC, index, hash2(TAG_DYNAMIC, bsmIndex, nameAndType.index()),\n@@ -836,1 +838,1 @@\n-            super(cpm, ClassFile.TAG_METHODHANDLE, index, hash);\n+            super(cpm, TAG_METHOD_HANDLE, index, hash);\n@@ -843,1 +845,1 @@\n-            super(cpm, ClassFile.TAG_METHODHANDLE, index, hash2(ClassFile.TAG_METHODHANDLE, refKind, reference.index()));\n+            super(cpm, TAG_METHOD_HANDLE, index, hash2(TAG_METHOD_HANDLE, refKind, reference.index()));\n@@ -903,1 +905,1 @@\n-            super(cpm, ClassFile.TAG_METHODTYPE, index, descriptor);\n+            super(cpm, TAG_METHOD_TYPE, index, descriptor);\n@@ -946,1 +948,1 @@\n-            super(cpm, ClassFile.TAG_STRING, index, utf8);\n+            super(cpm, TAG_STRING, index, utf8);\n@@ -992,1 +994,1 @@\n-            super(cpm, ClassFile.TAG_INTEGER, index, hash1(ClassFile.TAG_INTEGER, Integer.hashCode(i)));\n+            super(cpm, TAG_INTEGER, index, hash1(TAG_INTEGER, Integer.hashCode(i)));\n@@ -1033,1 +1035,1 @@\n-            super(cpm, ClassFile.TAG_FLOAT, index, hash1(ClassFile.TAG_FLOAT, Float.hashCode(f)));\n+            super(cpm, TAG_FLOAT, index, hash1(TAG_FLOAT, Float.hashCode(f)));\n@@ -1073,1 +1075,1 @@\n-            super(cpm, ClassFile.TAG_LONG, index, hash1(ClassFile.TAG_LONG, Long.hashCode(l)));\n+            super(cpm, TAG_LONG, index, hash1(TAG_LONG, Long.hashCode(l)));\n@@ -1113,1 +1115,1 @@\n-            super(cpm, ClassFile.TAG_DOUBLE, index, hash1(ClassFile.TAG_DOUBLE, Double.hashCode(d)));\n+            super(cpm, TAG_DOUBLE, index, hash1(TAG_DOUBLE, Double.hashCode(d)));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import static java.lang.classfile.ClassFile.*;\n-\n@@ -65,1 +63,1 @@\n-            return AEV_STRING;\n+            return TAG_STRING;\n@@ -78,1 +76,1 @@\n-            return AEV_DOUBLE;\n+            return TAG_DOUBLE;\n@@ -91,1 +89,1 @@\n-            return AEV_FLOAT;\n+            return TAG_FLOAT;\n@@ -104,1 +102,1 @@\n-            return AEV_LONG;\n+            return TAG_LONG;\n@@ -117,1 +115,1 @@\n-            return AEV_INT;\n+            return TAG_INT;\n@@ -130,1 +128,1 @@\n-            return AEV_SHORT;\n+            return TAG_SHORT;\n@@ -143,1 +141,1 @@\n-            return AEV_CHAR;\n+            return TAG_CHAR;\n@@ -156,1 +154,1 @@\n-            return AEV_BYTE;\n+            return TAG_BYTE;\n@@ -169,1 +167,1 @@\n-            return AEV_BOOLEAN;\n+            return TAG_BOOLEAN;\n@@ -186,1 +184,1 @@\n-            return AEV_ARRAY;\n+            return TAG_ARRAY;\n@@ -194,1 +192,1 @@\n-            return AEV_ENUM;\n+            return TAG_ENUM;\n@@ -202,1 +200,1 @@\n-            return AEV_ANNOTATION;\n+            return TAG_ANNOTATION;\n@@ -210,1 +208,1 @@\n-            return AEV_CLASS;\n+            return TAG_CLASS;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-import static java.lang.classfile.ClassFile.*;\n+\n+import static java.lang.classfile.AnnotationValue.*;\n@@ -62,10 +63,10 @@\n-            case AEV_BYTE -> new AnnotationImpl.OfByteImpl(classReader.readEntry(p, IntegerEntry.class));\n-            case AEV_CHAR -> new AnnotationImpl.OfCharImpl(classReader.readEntry(p, IntegerEntry.class));\n-            case AEV_DOUBLE -> new AnnotationImpl.OfDoubleImpl(classReader.readEntry(p, DoubleEntry.class));\n-            case AEV_FLOAT -> new AnnotationImpl.OfFloatImpl(classReader.readEntry(p, FloatEntry.class));\n-            case AEV_INT -> new AnnotationImpl.OfIntImpl(classReader.readEntry(p, IntegerEntry.class));\n-            case AEV_LONG -> new AnnotationImpl.OfLongImpl(classReader.readEntry(p, LongEntry.class));\n-            case AEV_SHORT -> new AnnotationImpl.OfShortImpl(classReader.readEntry(p, IntegerEntry.class));\n-            case AEV_BOOLEAN -> new AnnotationImpl.OfBooleanImpl(classReader.readEntry(p, IntegerEntry.class));\n-            case AEV_STRING -> new AnnotationImpl.OfStringImpl(classReader.readEntry(p, Utf8Entry.class));\n-            case AEV_ENUM -> new AnnotationImpl.OfEnumImpl(classReader.readEntry(p, Utf8Entry.class),\n+            case TAG_BYTE -> new AnnotationImpl.OfByteImpl(classReader.readEntry(p, IntegerEntry.class));\n+            case TAG_CHAR -> new AnnotationImpl.OfCharImpl(classReader.readEntry(p, IntegerEntry.class));\n+            case TAG_DOUBLE -> new AnnotationImpl.OfDoubleImpl(classReader.readEntry(p, DoubleEntry.class));\n+            case TAG_FLOAT -> new AnnotationImpl.OfFloatImpl(classReader.readEntry(p, FloatEntry.class));\n+            case TAG_INT -> new AnnotationImpl.OfIntImpl(classReader.readEntry(p, IntegerEntry.class));\n+            case TAG_LONG -> new AnnotationImpl.OfLongImpl(classReader.readEntry(p, LongEntry.class));\n+            case TAG_SHORT -> new AnnotationImpl.OfShortImpl(classReader.readEntry(p, IntegerEntry.class));\n+            case TAG_BOOLEAN -> new AnnotationImpl.OfBooleanImpl(classReader.readEntry(p, IntegerEntry.class));\n+            case TAG_STRING -> new AnnotationImpl.OfStringImpl(classReader.readEntry(p, Utf8Entry.class));\n+            case TAG_ENUM -> new AnnotationImpl.OfEnumImpl(classReader.readEntry(p, Utf8Entry.class),\n@@ -73,3 +74,3 @@\n-            case AEV_CLASS -> new AnnotationImpl.OfClassImpl(classReader.readEntry(p, Utf8Entry.class));\n-            case AEV_ANNOTATION -> new AnnotationImpl.OfAnnotationImpl(readAnnotation(classReader, p));\n-            case AEV_ARRAY -> {\n+            case TAG_CLASS -> new AnnotationImpl.OfClassImpl(classReader.readEntry(p, Utf8Entry.class));\n+            case TAG_ANNOTATION -> new AnnotationImpl.OfAnnotationImpl(readAnnotation(classReader, p));\n+            case TAG_ARRAY -> {\n@@ -182,1 +183,1 @@\n-            case TAT_CLASS_TYPE_PARAMETER ->\n+            case TARGET_CLASS_TYPE_PARAMETER ->\n@@ -184,1 +185,1 @@\n-            case TAT_METHOD_TYPE_PARAMETER ->\n+            case TARGET_METHOD_TYPE_PARAMETER ->\n@@ -186,1 +187,1 @@\n-            case TAT_CLASS_EXTENDS ->\n+            case TARGET_CLASS_EXTENDS ->\n@@ -188,1 +189,1 @@\n-            case TAT_CLASS_TYPE_PARAMETER_BOUND ->\n+            case TARGET_CLASS_TYPE_PARAMETER_BOUND ->\n@@ -190,1 +191,1 @@\n-            case TAT_METHOD_TYPE_PARAMETER_BOUND ->\n+            case TARGET_METHOD_TYPE_PARAMETER_BOUND ->\n@@ -192,1 +193,1 @@\n-            case TAT_FIELD ->\n+            case TARGET_FIELD ->\n@@ -194,1 +195,1 @@\n-            case TAT_METHOD_RETURN ->\n+            case TARGET_METHOD_RETURN ->\n@@ -196,1 +197,1 @@\n-            case TAT_METHOD_RECEIVER ->\n+            case TARGET_METHOD_RECEIVER ->\n@@ -198,1 +199,1 @@\n-            case TAT_METHOD_FORMAL_PARAMETER ->\n+            case TARGET_METHOD_FORMAL_PARAMETER ->\n@@ -200,1 +201,1 @@\n-            case TAT_THROWS ->\n+            case TARGET_THROWS ->\n@@ -202,1 +203,1 @@\n-            case TAT_LOCAL_VARIABLE ->\n+            case TARGET_LOCAL_VARIABLE ->\n@@ -204,1 +205,1 @@\n-            case TAT_RESOURCE_VARIABLE ->\n+            case TARGET_RESOURCE_VARIABLE ->\n@@ -206,1 +207,1 @@\n-            case TAT_EXCEPTION_PARAMETER ->\n+            case TARGET_EXCEPTION_PARAMETER ->\n@@ -208,1 +209,1 @@\n-            case TAT_INSTANCEOF ->\n+            case TARGET_INSTANCEOF ->\n@@ -210,1 +211,1 @@\n-            case TAT_NEW ->\n+            case TARGET_NEW ->\n@@ -212,1 +213,1 @@\n-            case TAT_CONSTRUCTOR_REFERENCE ->\n+            case TARGET_CONSTRUCTOR_REFERENCE ->\n@@ -214,1 +215,1 @@\n-            case TAT_METHOD_REFERENCE ->\n+            case TARGET_METHOD_REFERENCE ->\n@@ -216,1 +217,1 @@\n-            case TAT_CAST ->\n+            case TARGET_CAST ->\n@@ -218,1 +219,1 @@\n-            case TAT_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT ->\n+            case TARGET_CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT ->\n@@ -220,1 +221,1 @@\n-            case TAT_METHOD_INVOCATION_TYPE_ARGUMENT ->\n+            case TARGET_METHOD_INVOCATION_TYPE_ARGUMENT ->\n@@ -222,1 +223,1 @@\n-            case TAT_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT ->\n+            case TARGET_CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT ->\n@@ -224,1 +225,1 @@\n-            case TAT_METHOD_REFERENCE_TYPE_ARGUMENT ->\n+            case TARGET_METHOD_REFERENCE_TYPE_ARGUMENT ->\n@@ -365,1 +366,1 @@\n-            case AEV_BOOLEAN, AEV_BYTE, AEV_CHAR, AEV_DOUBLE, AEV_FLOAT, AEV_INT, AEV_LONG, AEV_SHORT, AEV_STRING ->\n+            case TAG_BOOLEAN, TAG_BYTE, TAG_CHAR, TAG_DOUBLE, TAG_FLOAT, TAG_INT, TAG_LONG, TAG_SHORT, TAG_STRING ->\n@@ -367,2 +368,2 @@\n-            case AEV_CLASS -> buf.writeIndex(((AnnotationValue.OfClass) value).className());\n-            case AEV_ENUM -> {\n+            case TAG_CLASS -> buf.writeIndex(((AnnotationValue.OfClass) value).className());\n+            case TAG_ENUM -> {\n@@ -373,2 +374,2 @@\n-            case AEV_ANNOTATION -> writeAnnotation(buf, ((AnnotationValue.OfAnnotation) value).annotation());\n-            case AEV_ARRAY -> {\n+            case TAG_ANNOTATION -> writeAnnotation(buf, ((AnnotationValue.OfAnnotation) value).annotation());\n+            case TAG_ARRAY -> {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":42,"deletions":41,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-import static java.lang.classfile.ClassFile.*;\n+import static java.lang.classfile.Opcode.OpcodeValues.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import static java.lang.classfile.constantpool.PoolEntry.*;\n@@ -177,4 +178,4 @@\n-                        case TAG_STRING, TAG_METHODTYPE, TAG_MODULE, TAG_PACKAGE -> in.skipBytes(2);\n-                        case TAG_METHODHANDLE -> in.skipBytes(3);\n-                        case TAG_INTEGER, TAG_FLOAT, TAG_FIELDREF, TAG_METHODREF, TAG_INTERFACEMETHODREF,\n-                                TAG_NAMEANDTYPE, TAG_CONSTANTDYNAMIC, TAG_INVOKEDYNAMIC -> in.skipBytes(4);\n+                        case TAG_STRING, TAG_METHOD_TYPE, TAG_MODULE, TAG_PACKAGE -> in.skipBytes(2);\n+                        case TAG_METHOD_HANDLE -> in.skipBytes(3);\n+                        case TAG_INTEGER, TAG_FLOAT, TAG_FIELDREF, TAG_METHODREF, TAG_INTERFACE_METHODREF,\n+                             TAG_NAME_AND_TYPE, TAG_DYNAMIC, TAG_INVOKE_DYNAMIC -> in.skipBytes(4);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-import static java.lang.classfile.ClassFile.*;\n@@ -64,0 +63,1 @@\n+import static java.lang.classfile.constantpool.PoolEntry.*;\n@@ -539,1 +539,1 @@\n-                        case ITEM_DOUBLE -> {\n+                        case DOUBLE -> {\n@@ -543,1 +543,1 @@\n-                        case ITEM_FLOAT ->\n+                        case FLOAT ->\n@@ -545,1 +545,1 @@\n-                        case ITEM_INTEGER ->\n+                        case INTEGER ->\n@@ -547,1 +547,1 @@\n-                        case ITEM_LONG ->  {\n+                        case LONG ->  {\n@@ -551,3 +551,3 @@\n-                        case ITEM_NULL -> ret.accept(\"null\");\n-                        case ITEM_TOP -> ret.accept(\"?\");\n-                        case ITEM_UNINITIALIZED_THIS -> ret.accept(\"THIS\");\n+                        case NULL -> ret.accept(\"null\");\n+                        case TOP -> ret.accept(\"?\");\n+                        case UNINITIALIZED_THIS -> ret.accept(\"THIS\");\n@@ -606,6 +606,6 @@\n-                            case TAG_INTERFACEMETHODREF -> \"InterfaceMethodref\";\n-                            case TAG_NAMEANDTYPE -> \"NameAndType\";\n-                            case TAG_METHODHANDLE -> \"MethodHandle\";\n-                            case TAG_METHODTYPE -> \"MethodType\";\n-                            case TAG_CONSTANTDYNAMIC -> \"Dynamic\";\n-                            case TAG_INVOKEDYNAMIC -> \"InvokeDynamic\";\n+                            case TAG_INTERFACE_METHODREF -> \"InterfaceMethodref\";\n+                            case TAG_NAME_AND_TYPE -> \"NameAndType\";\n+                            case TAG_METHOD_HANDLE -> \"MethodHandle\";\n+                            case TAG_METHOD_TYPE -> \"MethodType\";\n+                            case TAG_DYNAMIC -> \"Dynamic\";\n+                            case TAG_INVOKE_DYNAMIC -> \"InvokeDynamic\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -39,17 +39,1 @@\n-import static java.lang.classfile.ClassFile.TAG_CLASS;\n-import static java.lang.classfile.ClassFile.TAG_CONSTANTDYNAMIC;\n-import static java.lang.classfile.ClassFile.TAG_DOUBLE;\n-import static java.lang.classfile.ClassFile.TAG_FIELDREF;\n-import static java.lang.classfile.ClassFile.TAG_FLOAT;\n-import static java.lang.classfile.ClassFile.TAG_INTEGER;\n-import static java.lang.classfile.ClassFile.TAG_INTERFACEMETHODREF;\n-import static java.lang.classfile.ClassFile.TAG_INVOKEDYNAMIC;\n-import static java.lang.classfile.ClassFile.TAG_LONG;\n-import static java.lang.classfile.ClassFile.TAG_METHODHANDLE;\n-import static java.lang.classfile.ClassFile.TAG_METHODREF;\n-import static java.lang.classfile.ClassFile.TAG_METHODTYPE;\n-import static java.lang.classfile.ClassFile.TAG_MODULE;\n-import static java.lang.classfile.ClassFile.TAG_NAMEANDTYPE;\n-import static java.lang.classfile.ClassFile.TAG_PACKAGE;\n-import static java.lang.classfile.ClassFile.TAG_STRING;\n-import static java.lang.classfile.ClassFile.TAG_UTF8;\n+import static java.lang.classfile.constantpool.PoolEntry.*;\n@@ -101,1 +85,1 @@\n-                case TAG_CLASS, TAG_METHODTYPE, TAG_MODULE, TAG_STRING, TAG_PACKAGE -> p += 2;\n+                case TAG_CLASS, TAG_METHOD_TYPE, TAG_MODULE, TAG_STRING, TAG_PACKAGE -> p += 2;\n@@ -104,1 +88,1 @@\n-                case TAG_METHODHANDLE -> p += 3;\n+                case TAG_METHOD_HANDLE -> p += 3;\n@@ -107,3 +91,3 @@\n-                case TAG_CONSTANTDYNAMIC, TAG_FIELDREF, TAG_FLOAT, TAG_INTEGER,\n-                     TAG_INTERFACEMETHODREF, TAG_INVOKEDYNAMIC, TAG_METHODREF,\n-                     TAG_NAMEANDTYPE -> p += 4;\n+                case TAG_DYNAMIC, TAG_FIELDREF, TAG_FLOAT, TAG_INTEGER,\n+                     TAG_INTERFACE_METHODREF, TAG_INVOKE_DYNAMIC, TAG_METHODREF,\n+                     TAG_NAME_AND_TYPE -> p += 4;\n@@ -357,6 +341,6 @@\n-            case TAG_INTERFACEMETHODREF -> AbstractPoolEntry.InterfaceMethodRefEntryImpl.class;\n-            case TAG_NAMEANDTYPE -> AbstractPoolEntry.NameAndTypeEntryImpl.class;\n-            case TAG_METHODHANDLE -> AbstractPoolEntry.MethodHandleEntryImpl.class;\n-            case TAG_METHODTYPE -> AbstractPoolEntry.MethodTypeEntryImpl.class;\n-            case TAG_CONSTANTDYNAMIC -> AbstractPoolEntry.ConstantDynamicEntryImpl.class;\n-            case TAG_INVOKEDYNAMIC -> AbstractPoolEntry.InvokeDynamicEntryImpl.class;\n+            case TAG_INTERFACE_METHODREF -> AbstractPoolEntry.InterfaceMethodRefEntryImpl.class;\n+            case TAG_NAME_AND_TYPE -> AbstractPoolEntry.NameAndTypeEntryImpl.class;\n+            case TAG_METHOD_HANDLE -> AbstractPoolEntry.MethodHandleEntryImpl.class;\n+            case TAG_METHOD_TYPE -> AbstractPoolEntry.MethodTypeEntryImpl.class;\n+            case TAG_DYNAMIC -> AbstractPoolEntry.ConstantDynamicEntryImpl.class;\n+            case TAG_INVOKE_DYNAMIC -> AbstractPoolEntry.InvokeDynamicEntryImpl.class;\n@@ -405,1 +389,1 @@\n-                case TAG_INTERFACEMETHODREF -> new AbstractPoolEntry.InterfaceMethodRefEntryImpl(this, index, readEntry(q, AbstractPoolEntry.ClassEntryImpl.class),\n+                case TAG_INTERFACE_METHODREF -> new AbstractPoolEntry.InterfaceMethodRefEntryImpl(this, index, readEntry(q, AbstractPoolEntry.ClassEntryImpl.class),\n@@ -407,1 +391,1 @@\n-                case TAG_NAMEANDTYPE -> new AbstractPoolEntry.NameAndTypeEntryImpl(this, index, readEntry(q, AbstractPoolEntry.Utf8EntryImpl.class),\n+                case TAG_NAME_AND_TYPE -> new AbstractPoolEntry.NameAndTypeEntryImpl(this, index, readEntry(q, AbstractPoolEntry.Utf8EntryImpl.class),\n@@ -409,1 +393,1 @@\n-                case TAG_METHODHANDLE -> new AbstractPoolEntry.MethodHandleEntryImpl(this, index, readU1(q),\n+                case TAG_METHOD_HANDLE -> new AbstractPoolEntry.MethodHandleEntryImpl(this, index, readU1(q),\n@@ -411,3 +395,3 @@\n-                case TAG_METHODTYPE -> new AbstractPoolEntry.MethodTypeEntryImpl(this, index, readEntry(q, AbstractPoolEntry.Utf8EntryImpl.class));\n-                case TAG_CONSTANTDYNAMIC -> new AbstractPoolEntry.ConstantDynamicEntryImpl(this, index, readU2(q), readEntry(q + 2, AbstractPoolEntry.NameAndTypeEntryImpl.class));\n-                case TAG_INVOKEDYNAMIC -> new AbstractPoolEntry.InvokeDynamicEntryImpl(this, index, readU2(q), readEntry(q + 2, AbstractPoolEntry.NameAndTypeEntryImpl.class));\n+                case TAG_METHOD_TYPE -> new AbstractPoolEntry.MethodTypeEntryImpl(this, index, readEntry(q, AbstractPoolEntry.Utf8EntryImpl.class));\n+                case TAG_DYNAMIC -> new AbstractPoolEntry.ConstantDynamicEntryImpl(this, index, readU2(q), readEntry(q + 2, AbstractPoolEntry.NameAndTypeEntryImpl.class));\n+                case TAG_INVOKE_DYNAMIC -> new AbstractPoolEntry.InvokeDynamicEntryImpl(this, index, readU2(q), readEntry(q + 2, AbstractPoolEntry.NameAndTypeEntryImpl.class));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":18,"deletions":34,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-import static java.lang.classfile.ClassFile.*;\n+import static java.lang.classfile.Opcode.OpcodeValues.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+    \/** The value of default class access flags *\/\n+    static final int DEFAULT_CLASS_FLAGS = ClassFile.ACC_PUBLIC;\n@@ -70,1 +72,1 @@\n-        this.flags = ClassFile.DEFAULT_CLASS_FLAGS;\n+        this.flags = DEFAULT_CLASS_FLAGS;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -485,3 +485,5 @@\n-        if (opcode.isWide())\n-            bytecodesBufWriter.writeU1(ClassFile.WIDE);\n-        bytecodesBufWriter.writeU1(opcode.bytecode() & 0xFF);\n+        if (opcode.isWide()) {\n+            bytecodesBufWriter.writeU2(opcode.bytecode());\n+        } else {\n+            bytecodesBufWriter.writeU1(opcode.bytecode());\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static java.lang.classfile.ClassFile.*;\n+import static java.lang.classfile.Opcode.OpcodeValues.*;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/RawBytecodeHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.constant.ConstantDesc;\n@@ -34,1 +33,0 @@\n-import java.lang.classfile.ClassFile;\n@@ -40,16 +38,1 @@\n-import static java.lang.classfile.ClassFile.TAG_CLASS;\n-import static java.lang.classfile.ClassFile.TAG_CONSTANTDYNAMIC;\n-import static java.lang.classfile.ClassFile.TAG_DOUBLE;\n-import static java.lang.classfile.ClassFile.TAG_FIELDREF;\n-import static java.lang.classfile.ClassFile.TAG_FLOAT;\n-import static java.lang.classfile.ClassFile.TAG_INTEGER;\n-import static java.lang.classfile.ClassFile.TAG_INTERFACEMETHODREF;\n-import static java.lang.classfile.ClassFile.TAG_INVOKEDYNAMIC;\n-import static java.lang.classfile.ClassFile.TAG_LONG;\n-import static java.lang.classfile.ClassFile.TAG_METHODHANDLE;\n-import static java.lang.classfile.ClassFile.TAG_METHODREF;\n-import static java.lang.classfile.ClassFile.TAG_METHODTYPE;\n-import static java.lang.classfile.ClassFile.TAG_MODULE;\n-import static java.lang.classfile.ClassFile.TAG_NAMEANDTYPE;\n-import static java.lang.classfile.ClassFile.TAG_PACKAGE;\n-import static java.lang.classfile.ClassFile.TAG_STRING;\n+import static java.lang.classfile.constantpool.PoolEntry.*;\n@@ -381,1 +364,1 @@\n-            if (e.tag() == ClassFile.TAG_UTF8\n+            if (e.tag() == TAG_UTF8\n@@ -398,1 +381,1 @@\n-            if (e.tag() == ClassFile.TAG_UTF8\n+            if (e.tag() == TAG_UTF8\n@@ -450,1 +433,1 @@\n-        var e = (AbstractPoolEntry.NameAndTypeEntryImpl) findEntry(TAG_NAMEANDTYPE, ne, te);\n+        var e = (AbstractPoolEntry.NameAndTypeEntryImpl) findEntry(TAG_NAME_AND_TYPE, ne, te);\n@@ -486,1 +469,1 @@\n-        var e = (AbstractPoolEntry.InterfaceMethodRefEntryImpl) findEntry(TAG_INTERFACEMETHODREF, oe, ne);\n+        var e = (AbstractPoolEntry.InterfaceMethodRefEntryImpl) findEntry(TAG_INTERFACE_METHODREF, oe, ne);\n@@ -500,1 +483,1 @@\n-        var e = (AbstractPoolEntry.MethodTypeEntryImpl) findEntry(TAG_METHODTYPE, de);\n+        var e = (AbstractPoolEntry.MethodTypeEntryImpl) findEntry(TAG_METHOD_TYPE, de);\n@@ -510,1 +493,1 @@\n-                case TAG_INTERFACEMETHODREF -> interfaceMethodRefEntry(reference.owner(), reference.nameAndType());\n+                case TAG_INTERFACE_METHODREF -> interfaceMethodRefEntry(reference.owner(), reference.nameAndType());\n@@ -515,1 +498,1 @@\n-        int hash = AbstractPoolEntry.hash2(TAG_METHODHANDLE, refKind, reference.index());\n+        int hash = AbstractPoolEntry.hash2(TAG_METHOD_HANDLE, refKind, reference.index());\n@@ -519,1 +502,1 @@\n-            if (e.tag() == TAG_METHODHANDLE\n+            if (e.tag() == TAG_METHOD_HANDLE\n@@ -540,1 +523,1 @@\n-        int hash = AbstractPoolEntry.hash2(TAG_INVOKEDYNAMIC,\n+        int hash = AbstractPoolEntry.hash2(TAG_INVOKE_DYNAMIC,\n@@ -545,1 +528,1 @@\n-            if (e.tag() == TAG_INVOKEDYNAMIC\n+            if (e.tag() == TAG_INVOKE_DYNAMIC\n@@ -571,1 +554,1 @@\n-        int hash = AbstractPoolEntry.hash2(TAG_CONSTANTDYNAMIC,\n+        int hash = AbstractPoolEntry.hash2(TAG_DYNAMIC,\n@@ -576,1 +559,1 @@\n-            if (e.tag() == TAG_CONSTANTDYNAMIC\n+            if (e.tag() == TAG_DYNAMIC\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":13,"deletions":30,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+import static java.lang.classfile.Opcode.OpcodeValues.*;\n+import static java.lang.classfile.constantpool.PoolEntry.*;\n@@ -123,2 +125,2 @@\n-                    if (vti == StackMapFrameInfo.SimpleVerificationTypeInfo.ITEM_LONG\n-                     || vti == StackMapFrameInfo.SimpleVerificationTypeInfo.ITEM_DOUBLE) frameStack++;\n+                    if (vti == StackMapFrameInfo.SimpleVerificationTypeInfo.LONG\n+                     || vti == StackMapFrameInfo.SimpleVerificationTypeInfo.DOUBLE) frameStack++;\n@@ -379,1 +381,1 @@\n-            case TAG_UTF8, TAG_STRING, TAG_CLASS, TAG_INTEGER, TAG_FLOAT, TAG_METHODHANDLE, TAG_METHODTYPE ->\n+            case TAG_UTF8, TAG_STRING, TAG_CLASS, TAG_INTEGER, TAG_FLOAT, TAG_METHOD_HANDLE, TAG_METHOD_TYPE ->\n@@ -383,1 +385,1 @@\n-            case TAG_CONSTANTDYNAMIC ->\n+            case TAG_DYNAMIC ->\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackCounter.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import static java.lang.classfile.attribute.StackMapFrameInfo.VerificationTypeInfo.*;\n@@ -78,1 +79,1 @@\n-                vtis[i++] = SimpleVerificationTypeInfo.ITEM_UNINITIALIZED_THIS;\n+                vtis[i++] = SimpleVerificationTypeInfo.UNINITIALIZED_THIS;\n@@ -88,4 +89,4 @@\n-                case 'I', 'S', 'C' ,'B', 'Z' -> SimpleVerificationTypeInfo.ITEM_INTEGER;\n-                case 'J' -> SimpleVerificationTypeInfo.ITEM_LONG;\n-                case 'F' -> SimpleVerificationTypeInfo.ITEM_FLOAT;\n-                case 'D' -> SimpleVerificationTypeInfo.ITEM_DOUBLE;\n+                case 'I', 'S', 'C' ,'B', 'Z' -> SimpleVerificationTypeInfo.INTEGER;\n+                case 'J' -> SimpleVerificationTypeInfo.LONG;\n+                case 'F' -> SimpleVerificationTypeInfo.FLOAT;\n+                case 'D' -> SimpleVerificationTypeInfo.DOUBLE;\n@@ -172,1 +173,2 @@\n-            case VT_TOP, VT_INTEGER, VT_FLOAT, VT_DOUBLE, VT_LONG, VT_NULL, VT_UNINITIALIZED_THIS ->\n+            case ITEM_TOP, ITEM_INTEGER, ITEM_FLOAT, ITEM_DOUBLE, ITEM_LONG, ITEM_NULL,\n+                 ITEM_UNINITIALIZED_THIS ->\n@@ -174,1 +176,1 @@\n-            case VT_OBJECT ->\n+            case ITEM_OBJECT ->\n@@ -176,1 +178,1 @@\n-            case VT_UNINITIALIZED ->\n+            case ITEM_UNINITIALIZED ->\n@@ -235,9 +237,9 @@\n-            case VT_TOP -> SimpleVerificationTypeInfo.ITEM_TOP;\n-            case VT_INTEGER -> SimpleVerificationTypeInfo.ITEM_INTEGER;\n-            case VT_FLOAT -> SimpleVerificationTypeInfo.ITEM_FLOAT;\n-            case VT_DOUBLE -> SimpleVerificationTypeInfo.ITEM_DOUBLE;\n-            case VT_LONG -> SimpleVerificationTypeInfo.ITEM_LONG;\n-            case VT_NULL -> SimpleVerificationTypeInfo.ITEM_NULL;\n-            case VT_UNINITIALIZED_THIS -> SimpleVerificationTypeInfo.ITEM_UNINITIALIZED_THIS;\n-            case VT_OBJECT -> new ObjectVerificationTypeInfoImpl(classReader.entryByIndex(u2(), ClassEntry.class));\n-            case VT_UNINITIALIZED -> new UninitializedVerificationTypeInfoImpl(ctx.getLabel(u2()));\n+            case ITEM_TOP -> SimpleVerificationTypeInfo.TOP;\n+            case ITEM_INTEGER -> SimpleVerificationTypeInfo.INTEGER;\n+            case ITEM_FLOAT -> SimpleVerificationTypeInfo.FLOAT;\n+            case ITEM_DOUBLE -> SimpleVerificationTypeInfo.DOUBLE;\n+            case ITEM_LONG -> SimpleVerificationTypeInfo.LONG;\n+            case ITEM_NULL -> SimpleVerificationTypeInfo.NULL;\n+            case ITEM_UNINITIALIZED_THIS -> SimpleVerificationTypeInfo.UNINITIALIZED_THIS;\n+            case ITEM_OBJECT -> new ObjectVerificationTypeInfoImpl(classReader.entryByIndex(u2(), ClassEntry.class));\n+            case ITEM_UNINITIALIZED -> new UninitializedVerificationTypeInfoImpl(ctx.getLabel(u2()));\n@@ -252,1 +254,1 @@\n-        public int tag() { return VT_OBJECT; }\n+        public int tag() { return ITEM_OBJECT; }\n@@ -277,1 +279,1 @@\n-        public int tag() { return VT_UNINITIALIZED; }\n+        public int tag() { return ITEM_UNINITIALIZED; }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":21,"deletions":19,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+import static java.lang.classfile.Opcode.OpcodeValues.*;\n+import static java.lang.classfile.constantpool.PoolEntry.*;\n@@ -697,1 +699,1 @@\n-            case TAG_METHODHANDLE ->\n+            case TAG_METHOD_HANDLE ->\n@@ -699,1 +701,1 @@\n-            case TAG_METHODTYPE ->\n+            case TAG_METHOD_TYPE ->\n@@ -701,1 +703,1 @@\n-            case TAG_CONSTANTDYNAMIC ->\n+            case TAG_DYNAMIC ->\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static java.lang.classfile.ClassFile.*;\n+\n@@ -50,1 +50,1 @@\n-            this.targetType = checkValid(targetType, TAT_CLASS_TYPE_PARAMETER, TAT_METHOD_TYPE_PARAMETER);\n+            this.targetType = checkValid(targetType, TARGET_CLASS_TYPE_PARAMETER, TARGET_METHOD_TYPE_PARAMETER);\n@@ -66,1 +66,1 @@\n-            this.targetType = checkValid(targetType, TAT_CLASS_TYPE_PARAMETER_BOUND, TAT_METHOD_TYPE_PARAMETER_BOUND);\n+            this.targetType = checkValid(targetType, TARGET_CLASS_TYPE_PARAMETER_BOUND, TARGET_METHOD_TYPE_PARAMETER_BOUND);\n@@ -75,1 +75,1 @@\n-            this.targetType = checkValid(targetType, TAT_FIELD, TAT_METHOD_RECEIVER);\n+            this.targetType = checkValid(targetType, TARGET_FIELD, TARGET_METHOD_RECEIVER);\n@@ -97,1 +97,1 @@\n-            this.targetType = checkValid(targetType, TAT_LOCAL_VARIABLE, TAT_RESOURCE_VARIABLE);\n+            this.targetType = checkValid(targetType, TARGET_LOCAL_VARIABLE, TARGET_RESOURCE_VARIABLE);\n@@ -125,1 +125,1 @@\n-            this.targetType = checkValid(targetType, TAT_INSTANCEOF, TAT_METHOD_REFERENCE);\n+            this.targetType = checkValid(targetType, TARGET_INSTANCEOF, TARGET_METHOD_REFERENCE);\n@@ -134,1 +134,1 @@\n-            this.targetType = checkValid(targetType, TAT_CAST, TAT_METHOD_REFERENCE_TYPE_ARGUMENT);\n+            this.targetType = checkValid(targetType, TARGET_CAST, TARGET_METHOD_REFERENCE_TYPE_ARGUMENT);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TargetInfoImpl.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.classfile.ClassFile;\n+import static java.lang.classfile.Opcode.OpcodeValues.*;\n@@ -86,1 +86,1 @@\n-        return (ClassFile.ISTORE <= code && code <= ClassFile.ASTORE_3);\n+        return (ISTORE <= code && code <= ASTORE_3);\n@@ -90,0 +90,3 @@\n+            case ClassFile.WIDE:\n+            case ClassFile.TABLESWITCH:\n+            case ClassFile.LOOKUPSWITCH:\n@@ -107,202 +110,202 @@\n-        def(ClassFile.NOP, \"nop\", \"b\", null, T_VOID, 0);\n-        def(ClassFile.ACONST_NULL, \"aconst_null\", \"b\", null, T_OBJECT, 1);\n-        def(ClassFile.ICONST_M1, \"iconst_m1\", \"b\", null, T_INT, 1);\n-        def(ClassFile.ICONST_0, \"iconst_0\", \"b\", null, T_INT, 1);\n-        def(ClassFile.ICONST_1, \"iconst_1\", \"b\", null, T_INT, 1);\n-        def(ClassFile.ICONST_2, \"iconst_2\", \"b\", null, T_INT, 1);\n-        def(ClassFile.ICONST_3, \"iconst_3\", \"b\", null, T_INT, 1);\n-        def(ClassFile.ICONST_4, \"iconst_4\", \"b\", null, T_INT, 1);\n-        def(ClassFile.ICONST_5, \"iconst_5\", \"b\", null, T_INT, 1);\n-        def(ClassFile.LCONST_0, \"lconst_0\", \"b\", null, T_LONG, 2);\n-        def(ClassFile.LCONST_1, \"lconst_1\", \"b\", null, T_LONG, 2);\n-        def(ClassFile.FCONST_0, \"fconst_0\", \"b\", null, T_FLOAT, 1);\n-        def(ClassFile.FCONST_1, \"fconst_1\", \"b\", null, T_FLOAT, 1);\n-        def(ClassFile.FCONST_2, \"fconst_2\", \"b\", null, T_FLOAT, 1);\n-        def(ClassFile.DCONST_0, \"dconst_0\", \"b\", null, T_DOUBLE, 2);\n-        def(ClassFile.DCONST_1, \"dconst_1\", \"b\", null, T_DOUBLE, 2);\n-        def(ClassFile.BIPUSH, \"bipush\", \"bc\", null, T_INT, 1);\n-        def(ClassFile.SIPUSH, \"sipush\", \"bcc\", null, T_INT, 1);\n-        def(ClassFile.LDC, \"ldc\", \"bk\", null, T_ILLEGAL, 1);\n-        def(ClassFile.LDC_W, \"ldc_w\", \"bkk\", null, T_ILLEGAL, 1);\n-        def(ClassFile.LDC2_W, \"ldc2_w\", \"bkk\", null, T_ILLEGAL, 2);\n-        def(ClassFile.ILOAD, \"iload\", \"bi\", \"wbii\", T_INT, 1);\n-        def(ClassFile.LLOAD, \"lload\", \"bi\", \"wbii\", T_LONG, 2);\n-        def(ClassFile.FLOAD, \"fload\", \"bi\", \"wbii\", T_FLOAT, 1);\n-        def(ClassFile.DLOAD, \"dload\", \"bi\", \"wbii\", T_DOUBLE, 2);\n-        def(ClassFile.ALOAD, \"aload\", \"bi\", \"wbii\", T_OBJECT, 1);\n-        def(ClassFile.ILOAD_0, \"iload_0\", \"b\", null, T_INT, 1);\n-        def(ClassFile.ILOAD_1, \"iload_1\", \"b\", null, T_INT, 1);\n-        def(ClassFile.ILOAD_2, \"iload_2\", \"b\", null, T_INT, 1);\n-        def(ClassFile.ILOAD_3, \"iload_3\", \"b\", null, T_INT, 1);\n-        def(ClassFile.LLOAD_0, \"lload_0\", \"b\", null, T_LONG, 2);\n-        def(ClassFile.LLOAD_1, \"lload_1\", \"b\", null, T_LONG, 2);\n-        def(ClassFile.LLOAD_2, \"lload_2\", \"b\", null, T_LONG, 2);\n-        def(ClassFile.LLOAD_3, \"lload_3\", \"b\", null, T_LONG, 2);\n-        def(ClassFile.FLOAD_0, \"fload_0\", \"b\", null, T_FLOAT, 1);\n-        def(ClassFile.FLOAD_1, \"fload_1\", \"b\", null, T_FLOAT, 1);\n-        def(ClassFile.FLOAD_2, \"fload_2\", \"b\", null, T_FLOAT, 1);\n-        def(ClassFile.FLOAD_3, \"fload_3\", \"b\", null, T_FLOAT, 1);\n-        def(ClassFile.DLOAD_0, \"dload_0\", \"b\", null, T_DOUBLE, 2);\n-        def(ClassFile.DLOAD_1, \"dload_1\", \"b\", null, T_DOUBLE, 2);\n-        def(ClassFile.DLOAD_2, \"dload_2\", \"b\", null, T_DOUBLE, 2);\n-        def(ClassFile.DLOAD_3, \"dload_3\", \"b\", null, T_DOUBLE, 2);\n-        def(ClassFile.ALOAD_0, \"aload_0\", \"b\", null, T_OBJECT, 1);\n-        def(ClassFile.ALOAD_1, \"aload_1\", \"b\", null, T_OBJECT, 1);\n-        def(ClassFile.ALOAD_2, \"aload_2\", \"b\", null, T_OBJECT, 1);\n-        def(ClassFile.ALOAD_3, \"aload_3\", \"b\", null, T_OBJECT, 1);\n-        def(ClassFile.IALOAD, \"iaload\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LALOAD, \"laload\", \"b\", null, T_LONG, 0);\n-        def(ClassFile.FALOAD, \"faload\", \"b\", null, T_FLOAT, -1);\n-        def(ClassFile.DALOAD, \"daload\", \"b\", null, T_DOUBLE, 0);\n-        def(ClassFile.AALOAD, \"aaload\", \"b\", null, T_OBJECT, -1);\n-        def(ClassFile.BALOAD, \"baload\", \"b\", null, T_INT, -1);\n-        def(ClassFile.CALOAD, \"caload\", \"b\", null, T_INT, -1);\n-        def(ClassFile.SALOAD, \"saload\", \"b\", null, T_INT, -1);\n-        def(ClassFile.ISTORE, \"istore\", \"bi\", \"wbii\", T_VOID, -1);\n-        def(ClassFile.LSTORE, \"lstore\", \"bi\", \"wbii\", T_VOID, -2);\n-        def(ClassFile.FSTORE, \"fstore\", \"bi\", \"wbii\", T_VOID, -1);\n-        def(ClassFile.DSTORE, \"dstore\", \"bi\", \"wbii\", T_VOID, -2);\n-        def(ClassFile.ASTORE, \"astore\", \"bi\", \"wbii\", T_VOID, -1);\n-        def(ClassFile.ISTORE_0, \"istore_0\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.ISTORE_1, \"istore_1\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.ISTORE_2, \"istore_2\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.ISTORE_3, \"istore_3\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.LSTORE_0, \"lstore_0\", \"b\", null, T_VOID, -2);\n-        def(ClassFile.LSTORE_1, \"lstore_1\", \"b\", null, T_VOID, -2);\n-        def(ClassFile.LSTORE_2, \"lstore_2\", \"b\", null, T_VOID, -2);\n-        def(ClassFile.LSTORE_3, \"lstore_3\", \"b\", null, T_VOID, -2);\n-        def(ClassFile.FSTORE_0, \"fstore_0\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.FSTORE_1, \"fstore_1\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.FSTORE_2, \"fstore_2\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.FSTORE_3, \"fstore_3\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.DSTORE_0, \"dstore_0\", \"b\", null, T_VOID, -2);\n-        def(ClassFile.DSTORE_1, \"dstore_1\", \"b\", null, T_VOID, -2);\n-        def(ClassFile.DSTORE_2, \"dstore_2\", \"b\", null, T_VOID, -2);\n-        def(ClassFile.DSTORE_3, \"dstore_3\", \"b\", null, T_VOID, -2);\n-        def(ClassFile.ASTORE_0, \"astore_0\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.ASTORE_1, \"astore_1\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.ASTORE_2, \"astore_2\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.ASTORE_3, \"astore_3\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.IASTORE, \"iastore\", \"b\", null, T_VOID, -3);\n-        def(ClassFile.LASTORE, \"lastore\", \"b\", null, T_VOID, -4);\n-        def(ClassFile.FASTORE, \"fastore\", \"b\", null, T_VOID, -3);\n-        def(ClassFile.DASTORE, \"dastore\", \"b\", null, T_VOID, -4);\n-        def(ClassFile.AASTORE, \"aastore\", \"b\", null, T_VOID, -3);\n-        def(ClassFile.BASTORE, \"bastore\", \"b\", null, T_VOID, -3);\n-        def(ClassFile.CASTORE, \"castore\", \"b\", null, T_VOID, -3);\n-        def(ClassFile.SASTORE, \"sastore\", \"b\", null, T_VOID, -3);\n-        def(ClassFile.POP, \"pop\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.POP2, \"pop2\", \"b\", null, T_VOID, -2);\n-        def(ClassFile.DUP, \"dup\", \"b\", null, T_VOID, 1);\n-        def(ClassFile.DUP_X1, \"dup_x1\", \"b\", null, T_VOID, 1);\n-        def(ClassFile.DUP_X2, \"dup_x2\", \"b\", null, T_VOID, 1);\n-        def(ClassFile.DUP2, \"dup2\", \"b\", null, T_VOID, 2);\n-        def(ClassFile.DUP2_X1, \"dup2_x1\", \"b\", null, T_VOID, 2);\n-        def(ClassFile.DUP2_X2, \"dup2_x2\", \"b\", null, T_VOID, 2);\n-        def(ClassFile.SWAP, \"swap\", \"b\", null, T_VOID, 0);\n-        def(ClassFile.IADD, \"iadd\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LADD, \"ladd\", \"b\", null, T_LONG, -2);\n-        def(ClassFile.FADD, \"fadd\", \"b\", null, T_FLOAT, -1);\n-        def(ClassFile.DADD, \"dadd\", \"b\", null, T_DOUBLE, -2);\n-        def(ClassFile.ISUB, \"isub\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LSUB, \"lsub\", \"b\", null, T_LONG, -2);\n-        def(ClassFile.FSUB, \"fsub\", \"b\", null, T_FLOAT, -1);\n-        def(ClassFile.DSUB, \"dsub\", \"b\", null, T_DOUBLE, -2);\n-        def(ClassFile.IMUL, \"imul\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LMUL, \"lmul\", \"b\", null, T_LONG, -2);\n-        def(ClassFile.FMUL, \"fmul\", \"b\", null, T_FLOAT, -1);\n-        def(ClassFile.DMUL, \"dmul\", \"b\", null, T_DOUBLE, -2);\n-        def(ClassFile.IDIV, \"idiv\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LDIV, \"ldiv\", \"b\", null, T_LONG, -2);\n-        def(ClassFile.FDIV, \"fdiv\", \"b\", null, T_FLOAT, -1);\n-        def(ClassFile.DDIV, \"ddiv\", \"b\", null, T_DOUBLE, -2);\n-        def(ClassFile.IREM, \"irem\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LREM, \"lrem\", \"b\", null, T_LONG, -2);\n-        def(ClassFile.FREM, \"frem\", \"b\", null, T_FLOAT, -1);\n-        def(ClassFile.DREM, \"drem\", \"b\", null, T_DOUBLE, -2);\n-        def(ClassFile.INEG, \"ineg\", \"b\", null, T_INT, 0);\n-        def(ClassFile.LNEG, \"lneg\", \"b\", null, T_LONG, 0);\n-        def(ClassFile.FNEG, \"fneg\", \"b\", null, T_FLOAT, 0);\n-        def(ClassFile.DNEG, \"dneg\", \"b\", null, T_DOUBLE, 0);\n-        def(ClassFile.ISHL, \"ishl\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LSHL, \"lshl\", \"b\", null, T_LONG, -1);\n-        def(ClassFile.ISHR, \"ishr\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LSHR, \"lshr\", \"b\", null, T_LONG, -1);\n-        def(ClassFile.IUSHR, \"iushr\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LUSHR, \"lushr\", \"b\", null, T_LONG, -1);\n-        def(ClassFile.IAND, \"iand\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LAND, \"land\", \"b\", null, T_LONG, -2);\n-        def(ClassFile.IOR, \"ior\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LOR, \"lor\", \"b\", null, T_LONG, -2);\n-        def(ClassFile.IXOR, \"ixor\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LXOR, \"lxor\", \"b\", null, T_LONG, -2);\n-        def(ClassFile.IINC, \"iinc\", \"bic\", \"wbiicc\", T_VOID, 0);\n-        def(ClassFile.I2L, \"i2l\", \"b\", null, T_LONG, 1);\n-        def(ClassFile.I2F, \"i2f\", \"b\", null, T_FLOAT, 0);\n-        def(ClassFile.I2D, \"i2d\", \"b\", null, T_DOUBLE, 1);\n-        def(ClassFile.L2I, \"l2i\", \"b\", null, T_INT, -1);\n-        def(ClassFile.L2F, \"l2f\", \"b\", null, T_FLOAT, -1);\n-        def(ClassFile.L2D, \"l2d\", \"b\", null, T_DOUBLE, 0);\n-        def(ClassFile.F2I, \"f2i\", \"b\", null, T_INT, 0);\n-        def(ClassFile.F2L, \"f2l\", \"b\", null, T_LONG, 1);\n-        def(ClassFile.F2D, \"f2d\", \"b\", null, T_DOUBLE, 1);\n-        def(ClassFile.D2I, \"d2i\", \"b\", null, T_INT, -1);\n-        def(ClassFile.D2L, \"d2l\", \"b\", null, T_LONG, 0);\n-        def(ClassFile.D2F, \"d2f\", \"b\", null, T_FLOAT, -1);\n-        def(ClassFile.I2B, \"i2b\", \"b\", null, T_BYTE, 0);\n-        def(ClassFile.I2C, \"i2c\", \"b\", null, T_CHAR, 0);\n-        def(ClassFile.I2S, \"i2s\", \"b\", null, T_SHORT, 0);\n-        def(ClassFile.LCMP, \"lcmp\", \"b\", null, T_VOID, -3);\n-        def(ClassFile.FCMPL, \"fcmpl\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.FCMPG, \"fcmpg\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.DCMPL, \"dcmpl\", \"b\", null, T_VOID, -3);\n-        def(ClassFile.DCMPG, \"dcmpg\", \"b\", null, T_VOID, -3);\n-        def(ClassFile.IFEQ, \"ifeq\", \"boo\", null, T_VOID, -1);\n-        def(ClassFile.IFNE, \"ifne\", \"boo\", null, T_VOID, -1);\n-        def(ClassFile.IFLT, \"iflt\", \"boo\", null, T_VOID, -1);\n-        def(ClassFile.IFGE, \"ifge\", \"boo\", null, T_VOID, -1);\n-        def(ClassFile.IFGT, \"ifgt\", \"boo\", null, T_VOID, -1);\n-        def(ClassFile.IFLE, \"ifle\", \"boo\", null, T_VOID, -1);\n-        def(ClassFile.IF_ICMPEQ, \"if_icmpeq\", \"boo\", null, T_VOID, -2);\n-        def(ClassFile.IF_ICMPNE, \"if_icmpne\", \"boo\", null, T_VOID, -2);\n-        def(ClassFile.IF_ICMPLT, \"if_icmplt\", \"boo\", null, T_VOID, -2);\n-        def(ClassFile.IF_ICMPGE, \"if_icmpge\", \"boo\", null, T_VOID, -2);\n-        def(ClassFile.IF_ICMPGT, \"if_icmpgt\", \"boo\", null, T_VOID, -2);\n-        def(ClassFile.IF_ICMPLE, \"if_icmple\", \"boo\", null, T_VOID, -2);\n-        def(ClassFile.IF_ACMPEQ, \"if_acmpeq\", \"boo\", null, T_VOID, -2);\n-        def(ClassFile.IF_ACMPNE, \"if_acmpne\", \"boo\", null, T_VOID, -2);\n-        def(ClassFile.GOTO, \"goto\", \"boo\", null, T_VOID, 0);\n-        def(ClassFile.JSR, \"jsr\", \"boo\", null, T_INT, 0);\n-        def(ClassFile.RET, \"ret\", \"bi\", \"wbii\", T_VOID, 0);\n-        def(ClassFile.TABLESWITCH, \"tableswitch\", \"\", null, T_VOID, -1); \/\/ may have backward branches\n-        def(ClassFile.LOOKUPSWITCH, \"lookupswitch\", \"\", null, T_VOID, -1); \/\/ rewriting in interpreter\n-        def(ClassFile.IRETURN, \"ireturn\", \"b\", null, T_INT, -1);\n-        def(ClassFile.LRETURN, \"lreturn\", \"b\", null, T_LONG, -2);\n-        def(ClassFile.FRETURN, \"freturn\", \"b\", null, T_FLOAT, -1);\n-        def(ClassFile.DRETURN, \"dreturn\", \"b\", null, T_DOUBLE, -2);\n-        def(ClassFile.ARETURN, \"areturn\", \"b\", null, T_OBJECT, -1);\n-        def(ClassFile.RETURN, \"return\", \"b\", null, T_VOID, 0);\n-        def(ClassFile.GETSTATIC, \"getstatic\", \"bJJ\", null, T_ILLEGAL, 1);\n-        def(ClassFile.PUTSTATIC, \"putstatic\", \"bJJ\", null, T_ILLEGAL, -1);\n-        def(ClassFile.GETFIELD, \"getfield\", \"bJJ\", null, T_ILLEGAL, 0);\n-        def(ClassFile.PUTFIELD, \"putfield\", \"bJJ\", null, T_ILLEGAL, -2);\n-        def(ClassFile.INVOKEVIRTUAL, \"invokevirtual\", \"bJJ\", null, T_ILLEGAL, -1);\n-        def(ClassFile.INVOKESPECIAL, \"invokespecial\", \"bJJ\", null, T_ILLEGAL, -1);\n-        def(ClassFile.INVOKESTATIC, \"invokestatic\", \"bJJ\", null, T_ILLEGAL, 0);\n-        def(ClassFile.INVOKEINTERFACE, \"invokeinterface\", \"bJJ__\", null, T_ILLEGAL, -1);\n-        def(ClassFile.INVOKEDYNAMIC, \"invokedynamic\", \"bJJJJ\", null, T_ILLEGAL, 0);\n-        def(ClassFile.NEW, \"new\", \"bkk\", null, T_OBJECT, 1);\n-        def(ClassFile.NEWARRAY, \"newarray\", \"bc\", null, T_OBJECT, 0);\n-        def(ClassFile.ANEWARRAY, \"anewarray\", \"bkk\", null, T_OBJECT, 0);\n-        def(ClassFile.ARRAYLENGTH, \"arraylength\", \"b\", null, T_VOID, 0);\n-        def(ClassFile.ATHROW, \"athrow\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.CHECKCAST, \"checkcast\", \"bkk\", null, T_OBJECT, 0);\n-        def(ClassFile.INSTANCEOF, \"instanceof\", \"bkk\", null, T_INT, 0);\n-        def(ClassFile.MONITORENTER, \"monitorenter\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.MONITOREXIT, \"monitorexit\", \"b\", null, T_VOID, -1);\n-        def(ClassFile.WIDE, \"wide\", \"\", null, T_VOID, 0);\n-        def(ClassFile.MULTIANEWARRAY, \"multianewarray\", \"bkkc\", null, T_OBJECT, 1);\n-        def(ClassFile.IFNULL, \"ifnull\", \"boo\", null, T_VOID, -1);\n-        def(ClassFile.IFNONNULL, \"ifnonnull\", \"boo\", null, T_VOID, -1);\n-        def(ClassFile.GOTO_W, \"goto_w\", \"boooo\", null, T_VOID, 0);\n-        def(ClassFile.JSR_W, \"jsr_w\", \"boooo\", null, T_INT, 0);\n+        def(NOP, \"nop\", \"b\", null, T_VOID, 0);\n+        def(ACONST_NULL, \"aconst_null\", \"b\", null, T_OBJECT, 1);\n+        def(ICONST_M1, \"iconst_m1\", \"b\", null, T_INT, 1);\n+        def(ICONST_0, \"iconst_0\", \"b\", null, T_INT, 1);\n+        def(ICONST_1, \"iconst_1\", \"b\", null, T_INT, 1);\n+        def(ICONST_2, \"iconst_2\", \"b\", null, T_INT, 1);\n+        def(ICONST_3, \"iconst_3\", \"b\", null, T_INT, 1);\n+        def(ICONST_4, \"iconst_4\", \"b\", null, T_INT, 1);\n+        def(ICONST_5, \"iconst_5\", \"b\", null, T_INT, 1);\n+        def(LCONST_0, \"lconst_0\", \"b\", null, T_LONG, 2);\n+        def(LCONST_1, \"lconst_1\", \"b\", null, T_LONG, 2);\n+        def(FCONST_0, \"fconst_0\", \"b\", null, T_FLOAT, 1);\n+        def(FCONST_1, \"fconst_1\", \"b\", null, T_FLOAT, 1);\n+        def(FCONST_2, \"fconst_2\", \"b\", null, T_FLOAT, 1);\n+        def(DCONST_0, \"dconst_0\", \"b\", null, T_DOUBLE, 2);\n+        def(DCONST_1, \"dconst_1\", \"b\", null, T_DOUBLE, 2);\n+        def(BIPUSH, \"bipush\", \"bc\", null, T_INT, 1);\n+        def(SIPUSH, \"sipush\", \"bcc\", null, T_INT, 1);\n+        def(LDC, \"ldc\", \"bk\", null, T_ILLEGAL, 1);\n+        def(LDC_W, \"ldc_w\", \"bkk\", null, T_ILLEGAL, 1);\n+        def(LDC2_W, \"ldc2_w\", \"bkk\", null, T_ILLEGAL, 2);\n+        def(ILOAD, \"iload\", \"bi\", \"wbii\", T_INT, 1);\n+        def(LLOAD, \"lload\", \"bi\", \"wbii\", T_LONG, 2);\n+        def(FLOAD, \"fload\", \"bi\", \"wbii\", T_FLOAT, 1);\n+        def(DLOAD, \"dload\", \"bi\", \"wbii\", T_DOUBLE, 2);\n+        def(ALOAD, \"aload\", \"bi\", \"wbii\", T_OBJECT, 1);\n+        def(ILOAD_0, \"iload_0\", \"b\", null, T_INT, 1);\n+        def(ILOAD_1, \"iload_1\", \"b\", null, T_INT, 1);\n+        def(ILOAD_2, \"iload_2\", \"b\", null, T_INT, 1);\n+        def(ILOAD_3, \"iload_3\", \"b\", null, T_INT, 1);\n+        def(LLOAD_0, \"lload_0\", \"b\", null, T_LONG, 2);\n+        def(LLOAD_1, \"lload_1\", \"b\", null, T_LONG, 2);\n+        def(LLOAD_2, \"lload_2\", \"b\", null, T_LONG, 2);\n+        def(LLOAD_3, \"lload_3\", \"b\", null, T_LONG, 2);\n+        def(FLOAD_0, \"fload_0\", \"b\", null, T_FLOAT, 1);\n+        def(FLOAD_1, \"fload_1\", \"b\", null, T_FLOAT, 1);\n+        def(FLOAD_2, \"fload_2\", \"b\", null, T_FLOAT, 1);\n+        def(FLOAD_3, \"fload_3\", \"b\", null, T_FLOAT, 1);\n+        def(DLOAD_0, \"dload_0\", \"b\", null, T_DOUBLE, 2);\n+        def(DLOAD_1, \"dload_1\", \"b\", null, T_DOUBLE, 2);\n+        def(DLOAD_2, \"dload_2\", \"b\", null, T_DOUBLE, 2);\n+        def(DLOAD_3, \"dload_3\", \"b\", null, T_DOUBLE, 2);\n+        def(ALOAD_0, \"aload_0\", \"b\", null, T_OBJECT, 1);\n+        def(ALOAD_1, \"aload_1\", \"b\", null, T_OBJECT, 1);\n+        def(ALOAD_2, \"aload_2\", \"b\", null, T_OBJECT, 1);\n+        def(ALOAD_3, \"aload_3\", \"b\", null, T_OBJECT, 1);\n+        def(IALOAD, \"iaload\", \"b\", null, T_INT, -1);\n+        def(LALOAD, \"laload\", \"b\", null, T_LONG, 0);\n+        def(FALOAD, \"faload\", \"b\", null, T_FLOAT, -1);\n+        def(DALOAD, \"daload\", \"b\", null, T_DOUBLE, 0);\n+        def(AALOAD, \"aaload\", \"b\", null, T_OBJECT, -1);\n+        def(BALOAD, \"baload\", \"b\", null, T_INT, -1);\n+        def(CALOAD, \"caload\", \"b\", null, T_INT, -1);\n+        def(SALOAD, \"saload\", \"b\", null, T_INT, -1);\n+        def(ISTORE, \"istore\", \"bi\", \"wbii\", T_VOID, -1);\n+        def(LSTORE, \"lstore\", \"bi\", \"wbii\", T_VOID, -2);\n+        def(FSTORE, \"fstore\", \"bi\", \"wbii\", T_VOID, -1);\n+        def(DSTORE, \"dstore\", \"bi\", \"wbii\", T_VOID, -2);\n+        def(ASTORE, \"astore\", \"bi\", \"wbii\", T_VOID, -1);\n+        def(ISTORE_0, \"istore_0\", \"b\", null, T_VOID, -1);\n+        def(ISTORE_1, \"istore_1\", \"b\", null, T_VOID, -1);\n+        def(ISTORE_2, \"istore_2\", \"b\", null, T_VOID, -1);\n+        def(ISTORE_3, \"istore_3\", \"b\", null, T_VOID, -1);\n+        def(LSTORE_0, \"lstore_0\", \"b\", null, T_VOID, -2);\n+        def(LSTORE_1, \"lstore_1\", \"b\", null, T_VOID, -2);\n+        def(LSTORE_2, \"lstore_2\", \"b\", null, T_VOID, -2);\n+        def(LSTORE_3, \"lstore_3\", \"b\", null, T_VOID, -2);\n+        def(FSTORE_0, \"fstore_0\", \"b\", null, T_VOID, -1);\n+        def(FSTORE_1, \"fstore_1\", \"b\", null, T_VOID, -1);\n+        def(FSTORE_2, \"fstore_2\", \"b\", null, T_VOID, -1);\n+        def(FSTORE_3, \"fstore_3\", \"b\", null, T_VOID, -1);\n+        def(DSTORE_0, \"dstore_0\", \"b\", null, T_VOID, -2);\n+        def(DSTORE_1, \"dstore_1\", \"b\", null, T_VOID, -2);\n+        def(DSTORE_2, \"dstore_2\", \"b\", null, T_VOID, -2);\n+        def(DSTORE_3, \"dstore_3\", \"b\", null, T_VOID, -2);\n+        def(ASTORE_0, \"astore_0\", \"b\", null, T_VOID, -1);\n+        def(ASTORE_1, \"astore_1\", \"b\", null, T_VOID, -1);\n+        def(ASTORE_2, \"astore_2\", \"b\", null, T_VOID, -1);\n+        def(ASTORE_3, \"astore_3\", \"b\", null, T_VOID, -1);\n+        def(IASTORE, \"iastore\", \"b\", null, T_VOID, -3);\n+        def(LASTORE, \"lastore\", \"b\", null, T_VOID, -4);\n+        def(FASTORE, \"fastore\", \"b\", null, T_VOID, -3);\n+        def(DASTORE, \"dastore\", \"b\", null, T_VOID, -4);\n+        def(AASTORE, \"aastore\", \"b\", null, T_VOID, -3);\n+        def(BASTORE, \"bastore\", \"b\", null, T_VOID, -3);\n+        def(CASTORE, \"castore\", \"b\", null, T_VOID, -3);\n+        def(SASTORE, \"sastore\", \"b\", null, T_VOID, -3);\n+        def(POP, \"pop\", \"b\", null, T_VOID, -1);\n+        def(POP2, \"pop2\", \"b\", null, T_VOID, -2);\n+        def(DUP, \"dup\", \"b\", null, T_VOID, 1);\n+        def(DUP_X1, \"dup_x1\", \"b\", null, T_VOID, 1);\n+        def(DUP_X2, \"dup_x2\", \"b\", null, T_VOID, 1);\n+        def(DUP2, \"dup2\", \"b\", null, T_VOID, 2);\n+        def(DUP2_X1, \"dup2_x1\", \"b\", null, T_VOID, 2);\n+        def(DUP2_X2, \"dup2_x2\", \"b\", null, T_VOID, 2);\n+        def(SWAP, \"swap\", \"b\", null, T_VOID, 0);\n+        def(IADD, \"iadd\", \"b\", null, T_INT, -1);\n+        def(LADD, \"ladd\", \"b\", null, T_LONG, -2);\n+        def(FADD, \"fadd\", \"b\", null, T_FLOAT, -1);\n+        def(DADD, \"dadd\", \"b\", null, T_DOUBLE, -2);\n+        def(ISUB, \"isub\", \"b\", null, T_INT, -1);\n+        def(LSUB, \"lsub\", \"b\", null, T_LONG, -2);\n+        def(FSUB, \"fsub\", \"b\", null, T_FLOAT, -1);\n+        def(DSUB, \"dsub\", \"b\", null, T_DOUBLE, -2);\n+        def(IMUL, \"imul\", \"b\", null, T_INT, -1);\n+        def(LMUL, \"lmul\", \"b\", null, T_LONG, -2);\n+        def(FMUL, \"fmul\", \"b\", null, T_FLOAT, -1);\n+        def(DMUL, \"dmul\", \"b\", null, T_DOUBLE, -2);\n+        def(IDIV, \"idiv\", \"b\", null, T_INT, -1);\n+        def(LDIV, \"ldiv\", \"b\", null, T_LONG, -2);\n+        def(FDIV, \"fdiv\", \"b\", null, T_FLOAT, -1);\n+        def(DDIV, \"ddiv\", \"b\", null, T_DOUBLE, -2);\n+        def(IREM, \"irem\", \"b\", null, T_INT, -1);\n+        def(LREM, \"lrem\", \"b\", null, T_LONG, -2);\n+        def(FREM, \"frem\", \"b\", null, T_FLOAT, -1);\n+        def(DREM, \"drem\", \"b\", null, T_DOUBLE, -2);\n+        def(INEG, \"ineg\", \"b\", null, T_INT, 0);\n+        def(LNEG, \"lneg\", \"b\", null, T_LONG, 0);\n+        def(FNEG, \"fneg\", \"b\", null, T_FLOAT, 0);\n+        def(DNEG, \"dneg\", \"b\", null, T_DOUBLE, 0);\n+        def(ISHL, \"ishl\", \"b\", null, T_INT, -1);\n+        def(LSHL, \"lshl\", \"b\", null, T_LONG, -1);\n+        def(ISHR, \"ishr\", \"b\", null, T_INT, -1);\n+        def(LSHR, \"lshr\", \"b\", null, T_LONG, -1);\n+        def(IUSHR, \"iushr\", \"b\", null, T_INT, -1);\n+        def(LUSHR, \"lushr\", \"b\", null, T_LONG, -1);\n+        def(IAND, \"iand\", \"b\", null, T_INT, -1);\n+        def(LAND, \"land\", \"b\", null, T_LONG, -2);\n+        def(IOR, \"ior\", \"b\", null, T_INT, -1);\n+        def(LOR, \"lor\", \"b\", null, T_LONG, -2);\n+        def(IXOR, \"ixor\", \"b\", null, T_INT, -1);\n+        def(LXOR, \"lxor\", \"b\", null, T_LONG, -2);\n+        def(IINC, \"iinc\", \"bic\", \"wbiicc\", T_VOID, 0);\n+        def(I2L, \"i2l\", \"b\", null, T_LONG, 1);\n+        def(I2F, \"i2f\", \"b\", null, T_FLOAT, 0);\n+        def(I2D, \"i2d\", \"b\", null, T_DOUBLE, 1);\n+        def(L2I, \"l2i\", \"b\", null, T_INT, -1);\n+        def(L2F, \"l2f\", \"b\", null, T_FLOAT, -1);\n+        def(L2D, \"l2d\", \"b\", null, T_DOUBLE, 0);\n+        def(F2I, \"f2i\", \"b\", null, T_INT, 0);\n+        def(F2L, \"f2l\", \"b\", null, T_LONG, 1);\n+        def(F2D, \"f2d\", \"b\", null, T_DOUBLE, 1);\n+        def(D2I, \"d2i\", \"b\", null, T_INT, -1);\n+        def(D2L, \"d2l\", \"b\", null, T_LONG, 0);\n+        def(D2F, \"d2f\", \"b\", null, T_FLOAT, -1);\n+        def(I2B, \"i2b\", \"b\", null, T_BYTE, 0);\n+        def(I2C, \"i2c\", \"b\", null, T_CHAR, 0);\n+        def(I2S, \"i2s\", \"b\", null, T_SHORT, 0);\n+        def(LCMP, \"lcmp\", \"b\", null, T_VOID, -3);\n+        def(FCMPL, \"fcmpl\", \"b\", null, T_VOID, -1);\n+        def(FCMPG, \"fcmpg\", \"b\", null, T_VOID, -1);\n+        def(DCMPL, \"dcmpl\", \"b\", null, T_VOID, -3);\n+        def(DCMPG, \"dcmpg\", \"b\", null, T_VOID, -3);\n+        def(IFEQ, \"ifeq\", \"boo\", null, T_VOID, -1);\n+        def(IFNE, \"ifne\", \"boo\", null, T_VOID, -1);\n+        def(IFLT, \"iflt\", \"boo\", null, T_VOID, -1);\n+        def(IFGE, \"ifge\", \"boo\", null, T_VOID, -1);\n+        def(IFGT, \"ifgt\", \"boo\", null, T_VOID, -1);\n+        def(IFLE, \"ifle\", \"boo\", null, T_VOID, -1);\n+        def(IF_ICMPEQ, \"if_icmpeq\", \"boo\", null, T_VOID, -2);\n+        def(IF_ICMPNE, \"if_icmpne\", \"boo\", null, T_VOID, -2);\n+        def(IF_ICMPLT, \"if_icmplt\", \"boo\", null, T_VOID, -2);\n+        def(IF_ICMPGE, \"if_icmpge\", \"boo\", null, T_VOID, -2);\n+        def(IF_ICMPGT, \"if_icmpgt\", \"boo\", null, T_VOID, -2);\n+        def(IF_ICMPLE, \"if_icmple\", \"boo\", null, T_VOID, -2);\n+        def(IF_ACMPEQ, \"if_acmpeq\", \"boo\", null, T_VOID, -2);\n+        def(IF_ACMPNE, \"if_acmpne\", \"boo\", null, T_VOID, -2);\n+        def(GOTO, \"goto\", \"boo\", null, T_VOID, 0);\n+        def(JSR, \"jsr\", \"boo\", null, T_INT, 0);\n+        def(RET, \"ret\", \"bi\", \"wbii\", T_VOID, 0);\n+        def(TABLESWITCH, \"tableswitch\", \"\", null, T_VOID, -1); \/\/ may have backward branches\n+        def(LOOKUPSWITCH, \"lookupswitch\", \"\", null, T_VOID, -1); \/\/ rewriting in interpreter\n+        def(IRETURN, \"ireturn\", \"b\", null, T_INT, -1);\n+        def(LRETURN, \"lreturn\", \"b\", null, T_LONG, -2);\n+        def(FRETURN, \"freturn\", \"b\", null, T_FLOAT, -1);\n+        def(DRETURN, \"dreturn\", \"b\", null, T_DOUBLE, -2);\n+        def(ARETURN, \"areturn\", \"b\", null, T_OBJECT, -1);\n+        def(RETURN, \"return\", \"b\", null, T_VOID, 0);\n+        def(GETSTATIC, \"getstatic\", \"bJJ\", null, T_ILLEGAL, 1);\n+        def(PUTSTATIC, \"putstatic\", \"bJJ\", null, T_ILLEGAL, -1);\n+        def(GETFIELD, \"getfield\", \"bJJ\", null, T_ILLEGAL, 0);\n+        def(PUTFIELD, \"putfield\", \"bJJ\", null, T_ILLEGAL, -2);\n+        def(INVOKEVIRTUAL, \"invokevirtual\", \"bJJ\", null, T_ILLEGAL, -1);\n+        def(INVOKESPECIAL, \"invokespecial\", \"bJJ\", null, T_ILLEGAL, -1);\n+        def(INVOKESTATIC, \"invokestatic\", \"bJJ\", null, T_ILLEGAL, 0);\n+        def(INVOKEINTERFACE, \"invokeinterface\", \"bJJ__\", null, T_ILLEGAL, -1);\n+        def(INVOKEDYNAMIC, \"invokedynamic\", \"bJJJJ\", null, T_ILLEGAL, 0);\n+        def(NEW, \"new\", \"bkk\", null, T_OBJECT, 1);\n+        def(NEWARRAY, \"newarray\", \"bc\", null, T_OBJECT, 0);\n+        def(ANEWARRAY, \"anewarray\", \"bkk\", null, T_OBJECT, 0);\n+        def(ARRAYLENGTH, \"arraylength\", \"b\", null, T_VOID, 0);\n+        def(ATHROW, \"athrow\", \"b\", null, T_VOID, -1);\n+        def(CHECKCAST, \"checkcast\", \"bkk\", null, T_OBJECT, 0);\n+        def(INSTANCEOF, \"instanceof\", \"bkk\", null, T_INT, 0);\n+        def(MONITORENTER, \"monitorenter\", \"b\", null, T_VOID, -1);\n+        def(MONITOREXIT, \"monitorexit\", \"b\", null, T_VOID, -1);\n+        def(WIDE, \"wide\", \"\", null, T_VOID, 0);\n+        def(MULTIANEWARRAY, \"multianewarray\", \"bkkc\", null, T_OBJECT, 1);\n+        def(IFNULL, \"ifnull\", \"boo\", null, T_VOID, -1);\n+        def(IFNONNULL, \"ifnonnull\", \"boo\", null, T_VOID, -1);\n+        def(GOTO_W, \"goto_w\", \"boooo\", null, T_VOID, 0);\n+        def(JSR_W, \"jsr_w\", \"boooo\", null, T_INT, 0);\n@@ -310,35 +313,35 @@\n-        def(_fast_agetfield, \"fast_agetfield\", \"bJJ\", null, T_OBJECT, 0, ClassFile.GETFIELD);\n-        def(_fast_bgetfield, \"fast_bgetfield\", \"bJJ\", null, T_INT, 0, ClassFile.GETFIELD);\n-        def(_fast_cgetfield, \"fast_cgetfield\", \"bJJ\", null, T_CHAR, 0, ClassFile.GETFIELD);\n-        def(_fast_dgetfield, \"fast_dgetfield\", \"bJJ\", null, T_DOUBLE, 0, ClassFile.GETFIELD);\n-        def(_fast_fgetfield, \"fast_fgetfield\", \"bJJ\", null, T_FLOAT, 0, ClassFile.GETFIELD);\n-        def(_fast_igetfield, \"fast_igetfield\", \"bJJ\", null, T_INT, 0, ClassFile.GETFIELD);\n-        def(_fast_lgetfield, \"fast_lgetfield\", \"bJJ\", null, T_LONG, 0, ClassFile.GETFIELD);\n-        def(_fast_sgetfield, \"fast_sgetfield\", \"bJJ\", null, T_SHORT, 0, ClassFile.GETFIELD);\n-        def(_fast_aputfield, \"fast_aputfield\", \"bJJ\", null, T_OBJECT, 0, ClassFile.PUTFIELD);\n-        def(_fast_bputfield, \"fast_bputfield\", \"bJJ\", null, T_INT, 0, ClassFile.PUTFIELD);\n-        def(_fast_zputfield, \"fast_zputfield\", \"bJJ\", null, T_INT, 0, ClassFile.PUTFIELD);\n-        def(_fast_cputfield, \"fast_cputfield\", \"bJJ\", null, T_CHAR, 0, ClassFile.PUTFIELD);\n-        def(_fast_dputfield, \"fast_dputfield\", \"bJJ\", null, T_DOUBLE, 0, ClassFile.PUTFIELD);\n-        def(_fast_fputfield, \"fast_fputfield\", \"bJJ\", null, T_FLOAT, 0, ClassFile.PUTFIELD);\n-        def(_fast_iputfield, \"fast_iputfield\", \"bJJ\", null, T_INT, 0, ClassFile.PUTFIELD);\n-        def(_fast_lputfield, \"fast_lputfield\", \"bJJ\", null, T_LONG, 0, ClassFile.PUTFIELD);\n-        def(_fast_sputfield, \"fast_sputfield\", \"bJJ\", null, T_SHORT, 0, ClassFile.PUTFIELD);\n-        def(_fast_aload_0, \"fast_aload_0\", \"b\", null, T_OBJECT, 1, ClassFile.ALOAD_0);\n-        def(_fast_iaccess_0, \"fast_iaccess_0\", \"b_JJ\", null, T_INT, 1, ClassFile.ALOAD_0);\n-        def(_fast_aaccess_0, \"fast_aaccess_0\", \"b_JJ\", null, T_OBJECT, 1, ClassFile.ALOAD_0);\n-        def(_fast_faccess_0, \"fast_faccess_0\", \"b_JJ\", null, T_OBJECT, 1, ClassFile.ALOAD_0);\n-        def(_fast_iload, \"fast_iload\", \"bi\", null, T_INT, 1, ClassFile.ILOAD);\n-        def(_fast_iload2, \"fast_iload2\", \"bi_i\", null, T_INT, 2, ClassFile.ILOAD);\n-        def(_fast_icaload, \"fast_icaload\", \"bi_\", null, T_INT, 0, ClassFile.ILOAD);\n-        def(_fast_invokevfinal, \"fast_invokevfinal\", \"bJJ\", null, T_ILLEGAL, -1, ClassFile.INVOKEVIRTUAL);\n-        def(_fast_linearswitch, \"fast_linearswitch\", \"\", null, T_VOID, -1, ClassFile.LOOKUPSWITCH);\n-        def(_fast_binaryswitch, \"fast_binaryswitch\", \"\", null, T_VOID, -1, ClassFile.LOOKUPSWITCH);\n-        def(_return_register_finalizer, \"return_register_finalizer\", \"b\", null, T_VOID, 0, ClassFile.RETURN);\n-        def(_invokehandle, \"invokehandle\", \"bJJ\", null, T_ILLEGAL, -1, ClassFile.INVOKEVIRTUAL);\n-        def(_fast_aldc, \"fast_aldc\", \"bj\", null, T_OBJECT, 1, ClassFile.LDC);\n-        def(_fast_aldc_w, \"fast_aldc_w\", \"bJJ\", null, T_OBJECT, 1, ClassFile.LDC_W);\n-        def(_nofast_getfield, \"nofast_getfield\", \"bJJ\", null, T_ILLEGAL, 0, ClassFile.GETFIELD);\n-        def(_nofast_putfield, \"nofast PUTFIELD\", \"bJJ\", null, T_ILLEGAL, -2, ClassFile.PUTFIELD);\n-        def(_nofast_aload_0, \"nofast_aload_0\", \"b\", null, T_ILLEGAL, 1, ClassFile.ALOAD_0);\n-        def(_nofast_iload, \"nofast_iload\", \"bi\", null, T_ILLEGAL, 1, ClassFile.ILOAD);\n+        def(_fast_agetfield, \"fast_agetfield\", \"bJJ\", null, T_OBJECT, 0, GETFIELD);\n+        def(_fast_bgetfield, \"fast_bgetfield\", \"bJJ\", null, T_INT, 0, GETFIELD);\n+        def(_fast_cgetfield, \"fast_cgetfield\", \"bJJ\", null, T_CHAR, 0, GETFIELD);\n+        def(_fast_dgetfield, \"fast_dgetfield\", \"bJJ\", null, T_DOUBLE, 0, GETFIELD);\n+        def(_fast_fgetfield, \"fast_fgetfield\", \"bJJ\", null, T_FLOAT, 0, GETFIELD);\n+        def(_fast_igetfield, \"fast_igetfield\", \"bJJ\", null, T_INT, 0, GETFIELD);\n+        def(_fast_lgetfield, \"fast_lgetfield\", \"bJJ\", null, T_LONG, 0, GETFIELD);\n+        def(_fast_sgetfield, \"fast_sgetfield\", \"bJJ\", null, T_SHORT, 0, GETFIELD);\n+        def(_fast_aputfield, \"fast_aputfield\", \"bJJ\", null, T_OBJECT, 0, PUTFIELD);\n+        def(_fast_bputfield, \"fast_bputfield\", \"bJJ\", null, T_INT, 0, PUTFIELD);\n+        def(_fast_zputfield, \"fast_zputfield\", \"bJJ\", null, T_INT, 0, PUTFIELD);\n+        def(_fast_cputfield, \"fast_cputfield\", \"bJJ\", null, T_CHAR, 0, PUTFIELD);\n+        def(_fast_dputfield, \"fast_dputfield\", \"bJJ\", null, T_DOUBLE, 0, PUTFIELD);\n+        def(_fast_fputfield, \"fast_fputfield\", \"bJJ\", null, T_FLOAT, 0, PUTFIELD);\n+        def(_fast_iputfield, \"fast_iputfield\", \"bJJ\", null, T_INT, 0, PUTFIELD);\n+        def(_fast_lputfield, \"fast_lputfield\", \"bJJ\", null, T_LONG, 0, PUTFIELD);\n+        def(_fast_sputfield, \"fast_sputfield\", \"bJJ\", null, T_SHORT, 0, PUTFIELD);\n+        def(_fast_aload_0, \"fast_aload_0\", \"b\", null, T_OBJECT, 1, ALOAD_0);\n+        def(_fast_iaccess_0, \"fast_iaccess_0\", \"b_JJ\", null, T_INT, 1, ALOAD_0);\n+        def(_fast_aaccess_0, \"fast_aaccess_0\", \"b_JJ\", null, T_OBJECT, 1, ALOAD_0);\n+        def(_fast_faccess_0, \"fast_faccess_0\", \"b_JJ\", null, T_OBJECT, 1, ALOAD_0);\n+        def(_fast_iload, \"fast_iload\", \"bi\", null, T_INT, 1, ILOAD);\n+        def(_fast_iload2, \"fast_iload2\", \"bi_i\", null, T_INT, 2, ILOAD);\n+        def(_fast_icaload, \"fast_icaload\", \"bi_\", null, T_INT, 0, ILOAD);\n+        def(_fast_invokevfinal, \"fast_invokevfinal\", \"bJJ\", null, T_ILLEGAL, -1, INVOKEVIRTUAL);\n+        def(_fast_linearswitch, \"fast_linearswitch\", \"\", null, T_VOID, -1, LOOKUPSWITCH);\n+        def(_fast_binaryswitch, \"fast_binaryswitch\", \"\", null, T_VOID, -1, LOOKUPSWITCH);\n+        def(_return_register_finalizer, \"return_register_finalizer\", \"b\", null, T_VOID, 0, RETURN);\n+        def(_invokehandle, \"invokehandle\", \"bJJ\", null, T_ILLEGAL, -1, INVOKEVIRTUAL);\n+        def(_fast_aldc, \"fast_aldc\", \"bj\", null, T_OBJECT, 1, LDC);\n+        def(_fast_aldc_w, \"fast_aldc_w\", \"bJJ\", null, T_OBJECT, 1, LDC_W);\n+        def(_nofast_getfield, \"nofast_getfield\", \"bJJ\", null, T_ILLEGAL, 0, GETFIELD);\n+        def(_nofast_putfield, \"nofast PUTFIELD\", \"bJJ\", null, T_ILLEGAL, -2, PUTFIELD);\n+        def(_nofast_aload_0, \"nofast_aload_0\", \"b\", null, T_ILLEGAL, 1, ALOAD_0);\n+        def(_nofast_iload, \"nofast_iload\", \"bi\", null, T_ILLEGAL, 1, ILOAD);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerificationBytecodes.java","additions":242,"deletions":239,"binary":false,"changes":481,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.lang.classfile.ClassFile;\n@@ -37,0 +36,1 @@\n+import static java.lang.classfile.Opcode.OpcodeValues.*;\n@@ -343,6 +343,6 @@\n-                    if (opcode != ClassFile.IINC && opcode != ClassFile.ILOAD\n-                        && opcode != ClassFile.ALOAD && opcode != ClassFile.LLOAD\n-                        && opcode != ClassFile.ISTORE && opcode != ClassFile.ASTORE\n-                        && opcode != ClassFile.LSTORE && opcode != ClassFile.FLOAD\n-                        && opcode != ClassFile.DLOAD && opcode != ClassFile.FSTORE\n-                        && opcode != ClassFile.DSTORE) {\n+                    if (opcode != IINC && opcode != ILOAD\n+                        && opcode != ALOAD && opcode != LLOAD\n+                        && opcode != ISTORE && opcode != ASTORE\n+                        && opcode != LSTORE && opcode != FLOAD\n+                        && opcode != DLOAD && opcode != FSTORE\n+                        && opcode != DSTORE) {\n@@ -357,1 +357,1 @@\n-                    case ClassFile.NOP :\n+                    case NOP :\n@@ -359,1 +359,1 @@\n-                    case ClassFile.ACONST_NULL :\n+                    case ACONST_NULL :\n@@ -363,7 +363,7 @@\n-                    case ClassFile.ICONST_M1 :\n-                    case ClassFile.ICONST_0 :\n-                    case ClassFile.ICONST_1 :\n-                    case ClassFile.ICONST_2 :\n-                    case ClassFile.ICONST_3 :\n-                    case ClassFile.ICONST_4 :\n-                    case ClassFile.ICONST_5 :\n+                    case ICONST_M1 :\n+                    case ICONST_0 :\n+                    case ICONST_1 :\n+                    case ICONST_2 :\n+                    case ICONST_3 :\n+                    case ICONST_4 :\n+                    case ICONST_5 :\n@@ -373,2 +373,2 @@\n-                    case ClassFile.LCONST_0 :\n-                    case ClassFile.LCONST_1 :\n+                    case LCONST_0 :\n+                    case LCONST_1 :\n@@ -379,3 +379,3 @@\n-                    case ClassFile.FCONST_0 :\n-                    case ClassFile.FCONST_1 :\n-                    case ClassFile.FCONST_2 :\n+                    case FCONST_0 :\n+                    case FCONST_1 :\n+                    case FCONST_2 :\n@@ -385,2 +385,2 @@\n-                    case ClassFile.DCONST_0 :\n-                    case ClassFile.DCONST_1 :\n+                    case DCONST_0 :\n+                    case DCONST_1 :\n@@ -391,2 +391,2 @@\n-                    case ClassFile.SIPUSH :\n-                    case ClassFile.BIPUSH :\n+                    case SIPUSH :\n+                    case BIPUSH :\n@@ -396,1 +396,1 @@\n-                    case ClassFile.LDC :\n+                    case LDC :\n@@ -401,2 +401,2 @@\n-                    case ClassFile.LDC_W :\n-                    case ClassFile.LDC2_W :\n+                    case LDC_W :\n+                    case LDC2_W :\n@@ -407,1 +407,1 @@\n-                    case ClassFile.ILOAD :\n+                    case ILOAD :\n@@ -410,5 +410,5 @@\n-                    case ClassFile.ILOAD_0 :\n-                    case ClassFile.ILOAD_1 :\n-                    case ClassFile.ILOAD_2 :\n-                    case ClassFile.ILOAD_3 :\n-                        index = opcode - ClassFile.ILOAD_0;\n+                    case ILOAD_0 :\n+                    case ILOAD_1 :\n+                    case ILOAD_2 :\n+                    case ILOAD_3 :\n+                        index = opcode - ILOAD_0;\n@@ -417,1 +417,1 @@\n-                    case ClassFile.LLOAD :\n+                    case LLOAD :\n@@ -420,5 +420,5 @@\n-                    case ClassFile.LLOAD_0 :\n-                    case ClassFile.LLOAD_1 :\n-                    case ClassFile.LLOAD_2 :\n-                    case ClassFile.LLOAD_3 :\n-                        index = opcode - ClassFile.LLOAD_0;\n+                    case LLOAD_0 :\n+                    case LLOAD_1 :\n+                    case LLOAD_2 :\n+                    case LLOAD_3 :\n+                        index = opcode - LLOAD_0;\n@@ -427,1 +427,1 @@\n-                    case ClassFile.FLOAD :\n+                    case FLOAD :\n@@ -430,5 +430,5 @@\n-                    case ClassFile.FLOAD_0 :\n-                    case ClassFile.FLOAD_1 :\n-                    case ClassFile.FLOAD_2 :\n-                    case ClassFile.FLOAD_3 :\n-                        index = opcode - ClassFile.FLOAD_0;\n+                    case FLOAD_0 :\n+                    case FLOAD_1 :\n+                    case FLOAD_2 :\n+                    case FLOAD_3 :\n+                        index = opcode - FLOAD_0;\n@@ -437,1 +437,1 @@\n-                    case ClassFile.DLOAD :\n+                    case DLOAD :\n@@ -440,5 +440,5 @@\n-                    case ClassFile.DLOAD_0 :\n-                    case ClassFile.DLOAD_1 :\n-                    case ClassFile.DLOAD_2 :\n-                    case ClassFile.DLOAD_3 :\n-                        index = opcode - ClassFile.DLOAD_0;\n+                    case DLOAD_0 :\n+                    case DLOAD_1 :\n+                    case DLOAD_2 :\n+                    case DLOAD_3 :\n+                        index = opcode - DLOAD_0;\n@@ -447,1 +447,1 @@\n-                    case ClassFile.ALOAD :\n+                    case ALOAD :\n@@ -450,5 +450,5 @@\n-                    case ClassFile.ALOAD_0 :\n-                    case ClassFile.ALOAD_1 :\n-                    case ClassFile.ALOAD_2 :\n-                    case ClassFile.ALOAD_3 :\n-                        index = opcode - ClassFile.ALOAD_0;\n+                    case ALOAD_0 :\n+                    case ALOAD_1 :\n+                    case ALOAD_2 :\n+                    case ALOAD_3 :\n+                        index = opcode - ALOAD_0;\n@@ -457,1 +457,1 @@\n-                    case ClassFile.IALOAD :\n+                    case IALOAD :\n@@ -468,1 +468,1 @@\n-                    case ClassFile.BALOAD :\n+                    case BALOAD :\n@@ -479,1 +479,1 @@\n-                    case ClassFile.CALOAD :\n+                    case CALOAD :\n@@ -490,1 +490,1 @@\n-                    case ClassFile.SALOAD :\n+                    case SALOAD :\n@@ -501,1 +501,1 @@\n-                    case ClassFile.LALOAD :\n+                    case LALOAD :\n@@ -513,1 +513,1 @@\n-                    case ClassFile.FALOAD :\n+                    case FALOAD :\n@@ -524,1 +524,1 @@\n-                    case ClassFile.DALOAD :\n+                    case DALOAD :\n@@ -536,1 +536,1 @@\n-                    case ClassFile.AALOAD : {\n+                    case AALOAD : {\n@@ -554,1 +554,1 @@\n-                    case ClassFile.ISTORE :\n+                    case ISTORE :\n@@ -557,5 +557,5 @@\n-                    case ClassFile.ISTORE_0 :\n-                    case ClassFile.ISTORE_1 :\n-                    case ClassFile.ISTORE_2 :\n-                    case ClassFile.ISTORE_3 :\n-                        index = opcode - ClassFile.ISTORE_0;\n+                    case ISTORE_0 :\n+                    case ISTORE_1 :\n+                    case ISTORE_2 :\n+                    case ISTORE_3 :\n+                        index = opcode - ISTORE_0;\n@@ -564,1 +564,1 @@\n-                    case ClassFile.LSTORE :\n+                    case LSTORE :\n@@ -567,5 +567,5 @@\n-                    case ClassFile.LSTORE_0 :\n-                    case ClassFile.LSTORE_1 :\n-                    case ClassFile.LSTORE_2 :\n-                    case ClassFile.LSTORE_3 :\n-                        index = opcode - ClassFile.LSTORE_0;\n+                    case LSTORE_0 :\n+                    case LSTORE_1 :\n+                    case LSTORE_2 :\n+                    case LSTORE_3 :\n+                        index = opcode - LSTORE_0;\n@@ -574,1 +574,1 @@\n-                    case ClassFile.FSTORE :\n+                    case FSTORE :\n@@ -577,5 +577,5 @@\n-                    case ClassFile.FSTORE_0 :\n-                    case ClassFile.FSTORE_1 :\n-                    case ClassFile.FSTORE_2 :\n-                    case ClassFile.FSTORE_3 :\n-                        index = opcode - ClassFile.FSTORE_0;\n+                    case FSTORE_0 :\n+                    case FSTORE_1 :\n+                    case FSTORE_2 :\n+                    case FSTORE_3 :\n+                        index = opcode - FSTORE_0;\n@@ -584,1 +584,1 @@\n-                    case ClassFile.DSTORE :\n+                    case DSTORE :\n@@ -587,5 +587,5 @@\n-                    case ClassFile.DSTORE_0 :\n-                    case ClassFile.DSTORE_1 :\n-                    case ClassFile.DSTORE_2 :\n-                    case ClassFile.DSTORE_3 :\n-                        index = opcode - ClassFile.DSTORE_0;\n+                    case DSTORE_0 :\n+                    case DSTORE_1 :\n+                    case DSTORE_2 :\n+                    case DSTORE_3 :\n+                        index = opcode - DSTORE_0;\n@@ -594,1 +594,1 @@\n-                    case ClassFile.ASTORE :\n+                    case ASTORE :\n@@ -597,5 +597,5 @@\n-                    case ClassFile.ASTORE_0 :\n-                    case ClassFile.ASTORE_1 :\n-                    case ClassFile.ASTORE_2 :\n-                    case ClassFile.ASTORE_3 :\n-                        index = opcode - ClassFile.ASTORE_0;\n+                    case ASTORE_0 :\n+                    case ASTORE_1 :\n+                    case ASTORE_2 :\n+                    case ASTORE_3 :\n+                        index = opcode - ASTORE_0;\n@@ -604,1 +604,1 @@\n-                    case ClassFile.IASTORE :\n+                    case IASTORE :\n@@ -615,1 +615,1 @@\n-                    case ClassFile.BASTORE :\n+                    case BASTORE :\n@@ -626,1 +626,1 @@\n-                    case ClassFile.CASTORE :\n+                    case CASTORE :\n@@ -637,1 +637,1 @@\n-                    case ClassFile.SASTORE :\n+                    case SASTORE :\n@@ -648,1 +648,1 @@\n-                    case ClassFile.LASTORE :\n+                    case LASTORE :\n@@ -660,1 +660,1 @@\n-                    case ClassFile.FASTORE :\n+                    case FASTORE :\n@@ -671,1 +671,1 @@\n-                    case ClassFile.DASTORE :\n+                    case DASTORE :\n@@ -683,1 +683,1 @@\n-                    case ClassFile.AASTORE :\n+                    case AASTORE :\n@@ -695,1 +695,1 @@\n-                    case ClassFile.POP :\n+                    case POP :\n@@ -699,1 +699,1 @@\n-                    case ClassFile.POP2 :\n+                    case POP2 :\n@@ -711,1 +711,1 @@\n-                    case ClassFile.DUP :\n+                    case DUP :\n@@ -717,1 +717,1 @@\n-                    case ClassFile.DUP_X1 :\n+                    case DUP_X1 :\n@@ -726,1 +726,1 @@\n-                    case ClassFile.DUP_X2 :\n+                    case DUP_X2 :\n@@ -747,1 +747,1 @@\n-                    case ClassFile.DUP2 :\n+                    case DUP2 :\n@@ -763,1 +763,1 @@\n-                    case ClassFile.DUP2_X1 :\n+                    case DUP2_X1 :\n@@ -785,1 +785,1 @@\n-                    case ClassFile.DUP2_X2 :\n+                    case DUP2_X2 :\n@@ -814,1 +814,1 @@\n-                    case ClassFile.SWAP :\n+                    case SWAP :\n@@ -822,11 +822,11 @@\n-                    case ClassFile.IADD :\n-                    case ClassFile.ISUB :\n-                    case ClassFile.IMUL :\n-                    case ClassFile.IDIV :\n-                    case ClassFile.IREM :\n-                    case ClassFile.ISHL :\n-                    case ClassFile.ISHR :\n-                    case ClassFile.IUSHR :\n-                    case ClassFile.IOR :\n-                    case ClassFile.IXOR :\n-                    case ClassFile.IAND :\n+                    case IADD :\n+                    case ISUB :\n+                    case IMUL :\n+                    case IDIV :\n+                    case IREM :\n+                    case ISHL :\n+                    case ISHR :\n+                    case IUSHR :\n+                    case IOR :\n+                    case IXOR :\n+                    case IAND :\n@@ -836,1 +836,1 @@\n-                    case ClassFile.INEG :\n+                    case INEG :\n@@ -842,8 +842,8 @@\n-                    case ClassFile.LADD :\n-                    case ClassFile.LSUB :\n-                    case ClassFile.LMUL :\n-                    case ClassFile.LDIV :\n-                    case ClassFile.LREM :\n-                    case ClassFile.LAND :\n-                    case ClassFile.LOR :\n-                    case ClassFile.LXOR :\n+                    case LADD :\n+                    case LSUB :\n+                    case LMUL :\n+                    case LDIV :\n+                    case LREM :\n+                    case LAND :\n+                    case LOR :\n+                    case LXOR :\n@@ -854,1 +854,1 @@\n-                    case ClassFile.LNEG :\n+                    case LNEG :\n@@ -862,3 +862,3 @@\n-                    case ClassFile.LSHL :\n-                    case ClassFile.LSHR :\n-                    case ClassFile.LUSHR :\n+                    case LSHL :\n+                    case LSHR :\n+                    case LUSHR :\n@@ -874,5 +874,5 @@\n-                    case ClassFile.FADD :\n-                    case ClassFile.FSUB :\n-                    case ClassFile.FMUL :\n-                    case ClassFile.FDIV :\n-                    case ClassFile.FREM :\n+                    case FADD :\n+                    case FSUB :\n+                    case FMUL :\n+                    case FDIV :\n+                    case FREM :\n@@ -882,1 +882,1 @@\n-                    case ClassFile.FNEG :\n+                    case FNEG :\n@@ -888,5 +888,5 @@\n-                    case ClassFile.DADD :\n-                    case ClassFile.DSUB :\n-                    case ClassFile.DMUL :\n-                    case ClassFile.DDIV :\n-                    case ClassFile.DREM :\n+                    case DADD :\n+                    case DSUB :\n+                    case DMUL :\n+                    case DDIV :\n+                    case DREM :\n@@ -897,1 +897,1 @@\n-                    case ClassFile.DNEG :\n+                    case DNEG :\n@@ -905,1 +905,1 @@\n-                                case ClassFile.IINC :\n+                                case IINC :\n@@ -908,1 +908,1 @@\n-                                case ClassFile.I2L :\n+                                case I2L :\n@@ -915,1 +915,1 @@\n-                             case ClassFile.L2I :\n+                             case L2I :\n@@ -922,1 +922,1 @@\n-                                case ClassFile.I2F :\n+                                case I2F :\n@@ -928,1 +928,1 @@\n-                    case ClassFile.I2D :\n+                    case I2D :\n@@ -935,1 +935,1 @@\n-                    case ClassFile.L2F :\n+                    case L2F :\n@@ -942,1 +942,1 @@\n-                    case ClassFile.L2D :\n+                    case L2D :\n@@ -950,1 +950,1 @@\n-                    case ClassFile.F2I :\n+                    case F2I :\n@@ -956,1 +956,1 @@\n-                    case ClassFile.F2L :\n+                    case F2L :\n@@ -963,1 +963,1 @@\n-                    case ClassFile.F2D :\n+                    case F2D :\n@@ -970,1 +970,1 @@\n-                    case ClassFile.D2I :\n+                    case D2I :\n@@ -977,1 +977,1 @@\n-                    case ClassFile.D2L :\n+                    case D2L :\n@@ -985,1 +985,1 @@\n-                    case ClassFile.D2F :\n+                    case D2F :\n@@ -992,3 +992,3 @@\n-                    case ClassFile.I2B :\n-                    case ClassFile.I2C :\n-                    case ClassFile.I2S :\n+                    case I2B :\n+                    case I2C :\n+                    case I2S :\n@@ -1000,1 +1000,1 @@\n-                    case ClassFile.LCMP :\n+                    case LCMP :\n@@ -1010,2 +1010,2 @@\n-                    case ClassFile.FCMPL :\n-                    case ClassFile.FCMPG :\n+                    case FCMPL :\n+                    case FCMPG :\n@@ -1019,2 +1019,2 @@\n-                    case ClassFile.DCMPL :\n-                    case ClassFile.DCMPG :\n+                    case DCMPL :\n+                    case DCMPG :\n@@ -1030,6 +1030,6 @@\n-                    case ClassFile.IF_ICMPEQ:\n-                    case ClassFile.IF_ICMPNE:\n-                    case ClassFile.IF_ICMPLT:\n-                    case ClassFile.IF_ICMPGE:\n-                    case ClassFile.IF_ICMPGT:\n-                    case ClassFile.IF_ICMPLE:\n+                    case IF_ICMPEQ:\n+                    case IF_ICMPNE:\n+                    case IF_ICMPLT:\n+                    case IF_ICMPGE:\n+                    case IF_ICMPGT:\n+                    case IF_ICMPLE:\n@@ -1039,6 +1039,6 @@\n-                    case ClassFile.IFEQ:\n-                    case ClassFile.IFNE:\n-                    case ClassFile.IFLT:\n-                    case ClassFile.IFGE:\n-                    case ClassFile.IFGT:\n-                    case ClassFile.IFLE:\n+                    case IFEQ:\n+                    case IFNE:\n+                    case IFLT:\n+                    case IFGE:\n+                    case IFGT:\n+                    case IFLE:\n@@ -1051,2 +1051,2 @@\n-                    case ClassFile.IF_ACMPEQ :\n-                    case ClassFile.IF_ACMPNE :\n+                    case IF_ACMPEQ :\n+                    case IF_ACMPNE :\n@@ -1056,2 +1056,2 @@\n-                    case ClassFile.IFNULL :\n-                    case ClassFile.IFNONNULL :\n+                    case IFNULL :\n+                    case IFNONNULL :\n@@ -1064,1 +1064,1 @@\n-                    case ClassFile.GOTO :\n+                    case GOTO :\n@@ -1069,1 +1069,1 @@\n-                    case ClassFile.GOTO_W :\n+                    case GOTO_W :\n@@ -1074,2 +1074,2 @@\n-                    case ClassFile.TABLESWITCH :\n-                    case ClassFile.LOOKUPSWITCH :\n+                    case TABLESWITCH :\n+                    case LOOKUPSWITCH :\n@@ -1080,1 +1080,1 @@\n-                    case ClassFile.IRETURN :\n+                    case IRETURN :\n@@ -1086,1 +1086,1 @@\n-                    case ClassFile.LRETURN :\n+                    case LRETURN :\n@@ -1094,1 +1094,1 @@\n-                    case ClassFile.FRETURN :\n+                    case FRETURN :\n@@ -1100,1 +1100,1 @@\n-                    case ClassFile.DRETURN :\n+                    case DRETURN :\n@@ -1108,1 +1108,1 @@\n-                    case ClassFile.ARETURN :\n+                    case ARETURN :\n@@ -1114,1 +1114,1 @@\n-                    case ClassFile.RETURN:\n+                    case RETURN:\n@@ -1123,2 +1123,2 @@\n-                    case ClassFile.GETSTATIC :\n-                    case ClassFile.PUTSTATIC :\n+                    case GETSTATIC :\n+                    case PUTSTATIC :\n@@ -1127,2 +1127,2 @@\n-                    case ClassFile.GETFIELD :\n-                    case ClassFile.PUTFIELD :\n+                    case GETFIELD :\n+                    case PUTFIELD :\n@@ -1131,3 +1131,3 @@\n-                    case ClassFile.INVOKEVIRTUAL :\n-                    case ClassFile.INVOKESPECIAL :\n-                    case ClassFile.INVOKESTATIC :\n+                    case INVOKEVIRTUAL :\n+                    case INVOKESPECIAL :\n+                    case INVOKESTATIC :\n@@ -1136,2 +1136,2 @@\n-                    case ClassFile.INVOKEINTERFACE :\n-                    case ClassFile.INVOKEDYNAMIC :\n+                    case INVOKEINTERFACE :\n+                    case INVOKEDYNAMIC :\n@@ -1140,1 +1140,1 @@\n-                    case ClassFile.NEW :\n+                    case NEW :\n@@ -1153,1 +1153,1 @@\n-                    case ClassFile.NEWARRAY :\n+                    case NEWARRAY :\n@@ -1159,1 +1159,1 @@\n-                    case ClassFile.ANEWARRAY :\n+                    case ANEWARRAY :\n@@ -1162,1 +1162,1 @@\n-                    case ClassFile.ARRAYLENGTH :\n+                    case ARRAYLENGTH :\n@@ -1171,1 +1171,1 @@\n-                    case ClassFile.CHECKCAST :\n+                    case CHECKCAST :\n@@ -1181,1 +1181,1 @@\n-                    case ClassFile.INSTANCEOF : {\n+                    case INSTANCEOF : {\n@@ -1189,2 +1189,2 @@\n-                    case ClassFile.MONITORENTER :\n-                    case ClassFile.MONITOREXIT :\n+                    case MONITORENTER :\n+                    case MONITOREXIT :\n@@ -1194,1 +1194,1 @@\n-                    case ClassFile.MULTIANEWARRAY :\n+                    case MULTIANEWARRAY :\n@@ -1214,1 +1214,1 @@\n-                    case ClassFile.ATHROW :\n+                    case ATHROW :\n@@ -1238,1 +1238,1 @@\n-                if (bcs.opcode() == ClassFile.NEW) {\n+                if (bcs.opcode() == NEW) {\n@@ -1371,1 +1371,1 @@\n-        if (opcode == ClassFile.LDC || opcode == ClassFile.LDC_W) {\n+        if (opcode == LDC || opcode == LDC_W) {\n@@ -1378,1 +1378,1 @@\n-            if (opcode != ClassFile.LDC2_W) verifyError(\"must be ldc2_w\");\n+            if (opcode != LDC2_W) verifyError(\"must be ldc2_w\");\n@@ -1398,1 +1398,1 @@\n-                int opcode_n = (opcode == ClassFile.LDC2_W ? 2 : 1);\n+                int opcode_n = (opcode == LDC2_W ? 2 : 1);\n@@ -1427,1 +1427,1 @@\n-        if (bcs.opcode() == ClassFile.TABLESWITCH) {\n+        if (bcs.rawCode == ClassFile.TABLESWITCH) {\n@@ -1480,1 +1480,1 @@\n-            case ClassFile.GETSTATIC ->  {\n+            case GETSTATIC ->  {\n@@ -1485,1 +1485,1 @@\n-            case ClassFile.PUTSTATIC ->  {\n+            case PUTSTATIC ->  {\n@@ -1490,1 +1490,1 @@\n-            case ClassFile.GETFIELD ->  {\n+            case GETFIELD ->  {\n@@ -1497,1 +1497,1 @@\n-            case ClassFile.PUTFIELD ->  {\n+            case PUTFIELD ->  {\n@@ -1551,1 +1551,1 @@\n-            if (new_offset > (code_length - 3) || (_method.codeArray()[new_offset] & 0xff) != ClassFile.NEW) {\n+            if (new_offset > (code_length - 3) || (_method.codeArray()[new_offset] & 0xff) != NEW) {\n@@ -1588,1 +1588,1 @@\n-            case ClassFile.INVOKEINTERFACE:\n+            case INVOKEINTERFACE:\n@@ -1591,1 +1591,1 @@\n-            case ClassFile.INVOKEDYNAMIC:\n+            case INVOKEDYNAMIC:\n@@ -1594,2 +1594,2 @@\n-            case ClassFile.INVOKESPECIAL:\n-            case ClassFile.INVOKESTATIC:\n+            case INVOKESPECIAL:\n+            case INVOKESTATIC:\n@@ -1608,1 +1608,1 @@\n-        if (opcode == ClassFile.INVOKEDYNAMIC) {\n+        if (opcode == INVOKEDYNAMIC) {\n@@ -1622,1 +1622,1 @@\n-        if (opcode == ClassFile.INVOKEINTERFACE) {\n+        if (opcode == INVOKEINTERFACE) {\n@@ -1630,1 +1630,1 @@\n-        if (opcode == ClassFile.INVOKEDYNAMIC) {\n+        if (opcode == INVOKEDYNAMIC) {\n@@ -1636,1 +1636,1 @@\n-            if (opcode != ClassFile.INVOKESPECIAL ||\n+            if (opcode != INVOKESPECIAL ||\n@@ -1640,1 +1640,1 @@\n-        } else if (opcode == ClassFile.INVOKESPECIAL\n+        } else if (opcode == INVOKESPECIAL\n@@ -1658,2 +1658,2 @@\n-        if (opcode != ClassFile.INVOKESTATIC &&\n-            opcode != ClassFile.INVOKEDYNAMIC) {\n+        if (opcode != INVOKESTATIC &&\n+            opcode != INVOKEDYNAMIC) {\n@@ -1665,1 +1665,1 @@\n-                    case ClassFile.INVOKESPECIAL ->\n+                    case INVOKESPECIAL ->\n@@ -1667,1 +1667,1 @@\n-                    case ClassFile.INVOKEVIRTUAL -> {\n+                    case INVOKEVIRTUAL -> {\n@@ -1675,1 +1675,1 @@\n-                        if (opcode != ClassFile.INVOKEINTERFACE)\n+                        if (opcode != INVOKEINTERFACE)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerifierImpl.java","additions":239,"deletions":239,"binary":false,"changes":478,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import static java.lang.classfile.instruction.CharacterRange.*;\n@@ -147,1 +148,1 @@\n-                    if ((e.flags() & CRT_STATEMENT) != 0)\n+                    if ((e.flags() & FLAG_STATEMENT) != 0)\n@@ -149,1 +150,1 @@\n-                    if ((e.flags() & CRT_BLOCK) != 0)\n+                    if ((e.flags() & FLAG_BLOCK) != 0)\n@@ -151,1 +152,1 @@\n-                    if ((e.flags() & CRT_ASSIGNMENT) != 0)\n+                    if ((e.flags() & FLAG_ASSIGNMENT) != 0)\n@@ -153,1 +154,1 @@\n-                    if ((e.flags() & CRT_FLOW_CONTROLLER) != 0)\n+                    if ((e.flags() & FLAG_FLOW_CONTROLLER) != 0)\n@@ -155,1 +156,1 @@\n-                    if ((e.flags() & CRT_FLOW_TARGET) != 0)\n+                    if ((e.flags() & FLAG_FLOW_TARGET) != 0)\n@@ -157,1 +158,1 @@\n-                    if ((e.flags() & CRT_INVOKE) != 0)\n+                    if ((e.flags() & FLAG_INVOKE) != 0)\n@@ -159,1 +160,1 @@\n-                    if ((e.flags() & CRT_CREATE) != 0)\n+                    if ((e.flags() & FLAG_CREATE) != 0)\n@@ -161,1 +162,1 @@\n-                    if ((e.flags() & CRT_BRANCH_TRUE) != 0)\n+                    if ((e.flags() & FLAG_BRANCH_TRUE) != 0)\n@@ -163,1 +164,1 @@\n-                    if ((e.flags() & CRT_BRANCH_FALSE) != 0)\n+                    if ((e.flags() & FLAG_BRANCH_FALSE) != 0)\n@@ -708,7 +709,7 @@\n-            case ITEM_TOP -> \"top\";\n-            case ITEM_INTEGER -> \"int\";\n-            case ITEM_FLOAT -> \"float\";\n-            case ITEM_LONG -> \"long\";\n-            case ITEM_DOUBLE -> \"double\";\n-            case ITEM_NULL -> \"null\";\n-            case ITEM_UNINITIALIZED_THIS -> \"this\";\n+            case TOP -> \"top\";\n+            case INTEGER -> \"int\";\n+            case FLOAT -> \"float\";\n+            case LONG -> \"long\";\n+            case DOUBLE -> \"double\";\n+            case NULL -> \"null\";\n+            case UNINITIALIZED_THIS -> \"this\";\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -744,1 +744,1 @@\n-            case ClassFile.TAG_INTEGER: {\n+            case PoolEntry.TAG_INTEGER: {\n@@ -758,1 +758,1 @@\n-            case ClassFile.TAG_STRING:\n+            case PoolEntry.TAG_STRING:\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-import static java.lang.classfile.ClassFile.*;\n+\n+import static java.lang.classfile.constantpool.PoolEntry.*;\n@@ -159,2 +160,2 @@\n-            case TAG_METHODHANDLE -> \"MethodHandle\";\n-            case TAG_METHODTYPE -> \"MethodType\";\n+            case TAG_METHOD_HANDLE -> \"MethodHandle\";\n+            case TAG_METHOD_TYPE -> \"MethodType\";\n@@ -162,4 +163,4 @@\n-            case TAG_INTERFACEMETHODREF -> \"InterfaceMethodref\";\n-            case TAG_INVOKEDYNAMIC -> \"InvokeDynamic\";\n-            case TAG_CONSTANTDYNAMIC -> \"Dynamic\";\n-            case TAG_NAMEANDTYPE -> \"NameAndType\";\n+            case TAG_INTERFACE_METHODREF -> \"InterfaceMethodref\";\n+            case TAG_INVOKE_DYNAMIC -> \"InvokeDynamic\";\n+            case TAG_DYNAMIC -> \"Dynamic\";\n+            case TAG_NAME_AND_TYPE -> \"NameAndType\";\n@@ -180,2 +181,2 @@\n-            case TAG_METHODHANDLE -> \"MethodHandle\";\n-            case TAG_METHODTYPE -> \"MethodType\";\n+            case TAG_METHOD_HANDLE -> \"MethodHandle\";\n+            case TAG_METHOD_TYPE -> \"MethodType\";\n@@ -183,4 +184,4 @@\n-            case TAG_INTERFACEMETHODREF -> \"InterfaceMethod\";\n-            case TAG_INVOKEDYNAMIC -> \"InvokeDynamic\";\n-            case TAG_CONSTANTDYNAMIC -> \"Dynamic\";\n-            case TAG_NAMEANDTYPE -> \"NameAndType\";\n+            case TAG_INTERFACE_METHODREF -> \"InterfaceMethod\";\n+            case TAG_INVOKE_DYNAMIC -> \"InvokeDynamic\";\n+            case TAG_DYNAMIC -> \"Dynamic\";\n+            case TAG_NAME_AND_TYPE -> \"NameAndType\";\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ConstantWriter.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-                    case ITEM_TOP ->\n+                    case TOP ->\n@@ -128,1 +128,1 @@\n-                    case ITEM_INTEGER ->\n+                    case INTEGER ->\n@@ -131,1 +131,1 @@\n-                    case ITEM_FLOAT ->\n+                    case FLOAT ->\n@@ -134,1 +134,1 @@\n-                    case ITEM_LONG ->\n+                    case LONG ->\n@@ -137,1 +137,1 @@\n-                    case ITEM_DOUBLE ->\n+                    case DOUBLE ->\n@@ -140,1 +140,1 @@\n-                    case ITEM_NULL ->\n+                    case NULL ->\n@@ -143,1 +143,1 @@\n-                    case ITEM_UNINITIALIZED_THIS ->\n+                    case UNINITIALIZED_THIS ->\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/StackMapWriter.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+\n+import static java.lang.classfile.constantpool.PoolEntry.*;\n@@ -44,1 +46,1 @@\n-import static java.lang.classfile.ClassFile.*;\n+\n@@ -303,1 +305,1 @@\n-                     TAG_METHODTYPE,\n+                     TAG_METHOD_TYPE,\n@@ -306,1 +308,1 @@\n-                case TAG_METHODHANDLE -> offset += 4;\n+                case TAG_METHOD_HANDLE -> offset += 4;\n@@ -311,4 +313,4 @@\n-                     TAG_INTERFACEMETHODREF,\n-                     TAG_NAMEANDTYPE,\n-                     TAG_CONSTANTDYNAMIC,\n-                     TAG_INVOKEDYNAMIC -> offset += 5;\n+                     TAG_INTERFACE_METHODREF,\n+                     TAG_NAME_AND_TYPE,\n+                     TAG_DYNAMIC,\n+                     TAG_INVOKE_DYNAMIC -> offset += 5;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/IncludeLocalesPlugin.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+import static java.lang.classfile.constantpool.PoolEntry.*;\n+\n@@ -217,1 +219,1 @@\n-                    case ClassFile.TAG_UTF8: {\n+                    case TAG_UTF8: {\n@@ -241,2 +243,2 @@\n-                    case ClassFile.TAG_LONG:\n-                    case ClassFile.TAG_DOUBLE:\n+                    case TAG_LONG:\n+                    case TAG_DOUBLE:\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StringSharingPlugin.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -39,1 +40,0 @@\n-import java.lang.classfile.attribute.LocalVariableInfo;\n@@ -44,1 +44,0 @@\n-import java.lang.classfile.instruction.LocalVariable;\n@@ -116,1 +115,1 @@\n-            0, 0, 0, 0, 0, 2, ClassFile.TAG_METHODREF, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}).thisClass());\n+            0, 0, 0, 0, 0, 2, PoolEntry.TAG_METHODREF, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}).thisClass());\n@@ -122,1 +121,1 @@\n-            0, 0, 0, 0, 0, 3, ClassFile.TAG_INTEGER, 0, 0, 0, 0, ClassFile.TAG_NAMEANDTYPE, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}).constantPool();\n+            0, 0, 0, 0, 0, 3, PoolEntry.TAG_INTEGER, 0, 0, 0, 0, PoolEntry.TAG_NAME_AND_TYPE, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}).constantPool();\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -388,1 +388,1 @@\n-                                            List.of(StackMapFrameInfo.SimpleVerificationTypeInfo.ITEM_LONG)),\n+                                            List.of(StackMapFrameInfo.SimpleVerificationTypeInfo.LONG)),\n@@ -390,1 +390,1 @@\n-                                            List.of(StackMapFrameInfo.SimpleVerificationTypeInfo.ITEM_LONG),\n+                                            List.of(StackMapFrameInfo.SimpleVerificationTypeInfo.LONG),\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.classfile.constantpool.PoolEntry;\n@@ -119,1 +120,1 @@\n-            0, 0, 0, 0, 0, 2, ClassFile.TAG_INTEGER, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});\n+            0, 0, 0, 0, 0, 2, PoolEntry.TAG_INTEGER, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});\n","filename":"test\/jdk\/jdk\/classfile\/VerifierSelfTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import java.io.IOException;\n-import java.io.StringWriter;\n@@ -31,4 +29,0 @@\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -36,1 +30,0 @@\n-import java.util.Iterator;\n@@ -39,1 +32,0 @@\n-import java.util.NoSuchElementException;\n@@ -56,1 +48,1 @@\n-import static java.lang.classfile.ClassFile.*;\n+import static java.lang.classfile.Opcode.OpcodeValues.*;\n@@ -58,0 +50,1 @@\n+import static java.lang.classfile.constantpool.PoolEntry.*;\n@@ -919,1 +912,1 @@\n-                case TAG_INTERFACEMETHODREF ->\n+                case TAG_INTERFACE_METHODREF ->\n@@ -921,1 +914,1 @@\n-                case TAG_NAMEANDTYPE ->\n+                case TAG_NAME_AND_TYPE ->\n@@ -923,1 +916,1 @@\n-                case TAG_METHODHANDLE ->\n+                case TAG_METHOD_HANDLE ->\n@@ -925,1 +918,1 @@\n-                case TAG_METHODTYPE ->\n+                case TAG_METHOD_TYPE ->\n@@ -927,1 +920,1 @@\n-                case TAG_CONSTANTDYNAMIC ->\n+                case TAG_DYNAMIC ->\n@@ -929,1 +922,1 @@\n-                case TAG_INVOKEDYNAMIC ->\n+                case TAG_INVOKE_DYNAMIC ->\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ClassRecord.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"}]}