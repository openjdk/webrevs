{"files":[{"patch":"@@ -2379,1 +2379,1 @@\n-        Position pos = subparseNumber(text, position, digits, true, isExponent, status);\n+        NumericPosition pos = subparseNumber(text, position, digits, true, isExponent, status);\n@@ -2444,2 +2444,12 @@\n-    \/\/ To track the full parse index as well as the integer portion\n-    record Position(int intPos, int fullPos) {}\n+    \/**\n+     * NumericPosition is a helper record class that stores two indices of interest.\n+     * {@code fullPos} is either the first unparseable character or -1 in case\n+     * of no valid number parsed. {@code intPos} reflects the position of\n+     * a parsed decimal symbol, if one exists. When parsing with {@code isParseIntegerOnly()},\n+     * {@code fullPos} is used to match the suffix, and reset the {@code ParsePosition}\n+     * index to {@code intPos}.\n+     *\n+     * @param fullPos an index that reflects the full traversal of the numerical String\n+     * @param intPos an index that reflects the position of a parsed decimal symbol.\n+     *\/\n+    record NumericPosition(int fullPos, int intPos) {}\n@@ -2459,2 +2469,2 @@\n-     * @return returns the position of the first unparseable character or\n-     *         -1 in case of no valid number parsed\n+     * @return returns a {@code NumericPosition} that stores both a full\n+     *         traversal index, and an int only index.\n@@ -2462,3 +2472,3 @@\n-    Position subparseNumber(String text, int position,\n-                       DigitList digits, boolean checkExponent,\n-                       boolean isExponent, boolean[] status) {\n+    NumericPosition subparseNumber(String text, int position,\n+                                   DigitList digits, boolean checkExponent,\n+                                   boolean isExponent, boolean[] status) {\n@@ -2527,1 +2537,1 @@\n-                    return new Position(intIndex, position);\n+                    return new NumericPosition(position, intIndex);\n@@ -2565,1 +2575,2 @@\n-                        return new Position(intIndex, groupingViolationIndex(position, prevSeparatorIndex));\n+                        return new NumericPosition(\n+                                groupingViolationIndex(position, prevSeparatorIndex), intIndex);\n@@ -2579,1 +2590,1 @@\n-                            return new Position(intIndex, startPos);\n+                            return new NumericPosition(startPos, intIndex);\n@@ -2584,1 +2595,2 @@\n-                            return new Position(intIndex, groupingViolationIndex(position, prevSeparatorIndex));\n+                            return new NumericPosition(\n+                                    groupingViolationIndex(position, prevSeparatorIndex), intIndex);\n@@ -2637,1 +2649,2 @@\n-                    return new Position(intIndex, groupingViolationIndex(position - 1, prevSeparatorIndex));\n+                    return new NumericPosition(\n+                            groupingViolationIndex(position - 1, prevSeparatorIndex), intIndex);\n@@ -2663,1 +2676,1 @@\n-                return new Position(intIndex, -1);\n+                return new NumericPosition(-1, intIndex);\n@@ -2666,1 +2679,1 @@\n-        return new Position(intIndex, position);\n+        return new NumericPosition(position, intIndex);\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":28,"deletions":15,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -320,2 +320,2 @@\n-    \/\/ Overloaded method used for integer only parsing, where the expected\n-    \/\/ index should occur at the decimal point, if one exists\n+    \/\/ Overloaded method that allows for an expected ParsePosition index value\n+    \/\/ that is not the string length.\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/StrictParseTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}