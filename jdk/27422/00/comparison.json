{"files":[{"patch":"@@ -168,1 +168,1 @@\n-     * @param invocationName unused\n+     * @param invocationName unused, {@code null} is permitted\n@@ -175,1 +175,1 @@\n-     * @throws NullPointerException     if any argument is {@code null}\n+     * @throws NullPointerException     if any argument is {@code null}, unless noted otherwise\n@@ -178,1 +178,1 @@\n-     *                                  second parameter of type {@code int} and with {@code int} as its return type,\n+     *                                  second parameter of type {@code int} and with {@code int} as its return type\n@@ -181,1 +181,1 @@\n-     *                                  {@code Class} or {@code EnumDesc}.\n+     *                                  {@code Class} or {@code EnumDesc}\n@@ -183,1 +183,1 @@\n-     *                                  when {@code target} is a {@code Boolean.class}.\n+     *                                  when {@code target} is a {@code Boolean.class}\n@@ -258,2 +258,3 @@\n-     * If no element in the {@code labels} array matches the target, then\n-     * the method of the call site return the length of the {@code labels} array.\n+     * If for a given {@code target} there is no element in the {@code labels}\n+     * fulfilling one of the above conditions, then the method of the call\n+     * site returns the length of the {@code labels} array.\n@@ -263,1 +264,4 @@\n-     * both  or an {@link IndexOutOfBoundsException} is thrown.\n+     * or an {@link IndexOutOfBoundsException} is thrown.\n+     *\n+     * @apiNote It is permissible for the {@code labels} array to contain {@code String}\n+     * values that do not represent any enum constants at runtime.\n@@ -268,1 +272,1 @@\n-     * @param invocationName unused\n+     * @param invocationName unused, {@code null} is permitted\n@@ -275,6 +279,9 @@\n-     * @throws NullPointerException if any argument is {@code null}\n-     * @throws IllegalArgumentException if any element in the labels array is null, if the\n-     * invocation type is not a method type whose first parameter type is an enum type,\n-     * second parameter of type {@code int} and whose return type is {@code int},\n-     * or if {@code labels} contains an element that is not of type {@code String} or\n-     * {@code Class} of the target enum type.\n+     * @throws NullPointerException     if any argument is {@code null}, unless noted otherwise\n+     * @throws IllegalArgumentException if any element in the labels array is null\n+     * @throws IllegalArgumentException if any element in the labels array is an empty {@code String}\n+     * @throws IllegalArgumentException if the invocation type is not a method type\n+     *                                  whose first parameter type is an enum type,\n+     *                                  second parameter of type {@code int} and\n+     *                                  whose return type is {@code int}\n+     * @throws IllegalArgumentException if {@code labels} contains an element that is not of type {@code String} or\n+     *                                  {@code Class} equal to the target enum type\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":22,"deletions":15,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -158,1 +158,1 @@\n-            testEnum(E1.B, 1, 3, \"B\", \"C\", \"A\", E2.class);\n+            testEnum(E1.B, 0, -1, E2.class);\n@@ -164,1 +164,1 @@\n-            testEnum(E1.B, 1, 3, \"B\", \"C\", \"A\", String.class);\n+            testEnum(E1.B, 0, -1, String.class);\n@@ -169,0 +169,30 @@\n+        try {\n+            testEnum(E1.B, 0, -1, 10);\n+            fail(\"Didn't get the expected exception.\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/OK\n+        }\n+        try {\n+            testEnum(E1.B, 0, -1, new Object());\n+            fail(\"Didn't get the expected exception.\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/OK\n+        }\n+        try {\n+            testEnum(E1.B, 0, -1, new Object[] { null });\n+            fail(\"Didn't get the expected exception.\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/OK\n+        }\n+        try {\n+            testEnum(E1.B, 0, -1, \"\");\n+            fail(\"Didn't get the expected exception.\");\n+        } catch (IllegalArgumentException ex) {\n+            \/\/OK\n+        }\n+        try {\n+            testEnum(E1.B, 0, -1, (Object[]) null);\n+            fail(\"Didn't get the expected exception.\");\n+        } catch (NullPointerException ex) {\n+            \/\/OK\n+        }\n@@ -175,0 +205,7 @@\n+        testEnum(E1.B, 0, 2, \"A\", \"OLD_REMOVED_CONSTANT\", \"B\", E1.class);\n+        testEnum(E1.B, 1, 2, \"A\", \"OLD_REMOVED_CONSTANT\", \"B\", E1.class);\n+\n+        \/\/null invocation name:\n+        MethodType switchType = MethodType.methodType(int.class, E1.class, int.class);\n+        MethodHandle indy = ((CallSite) BSM_ENUM_SWITCH.invoke(MethodHandles.lookup(), null, switchType)).dynamicInvoker();\n+        assertEquals((int) indy.invoke(E1.A, 0), 0);\n@@ -200,0 +237,3 @@\n+        testEnum(E.class, E.C, 0, 2, \"A\", \"B\");\n+        testEnum(E.class, E.C, 1, 2, \"A\", \"B\");\n+        testEnum(E.class, E.C, 2, 2, \"A\", \"B\");\n@@ -282,0 +322,3 @@\n+        \/\/null invocationName is OK:\n+        BSM_TYPE_SWITCH.invoke(MethodHandles.lookup(), null, switchType,\n+                               new Object[] {Object.class});\n","filename":"test\/jdk\/java\/lang\/runtime\/SwitchBootstrapsTest.java","additions":46,"deletions":3,"binary":false,"changes":49,"status":"modified"}]}