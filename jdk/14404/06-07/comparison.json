{"files":[{"patch":"@@ -162,4 +162,3 @@\n-        \/\/ Obtain the \"normalized\" BaseLocale, using un-normalized\n-        \/\/ BaseLocale as the key. The returned \"normalized\" instance\n-        \/\/ can subsequently be used by the Locale instance which\n-        \/\/ guarantees the locale components are properly cased\/interned.\n+        \/\/ Obtain the \"interned\" BaseLocale from the cache. The returned\n+        \/\/ \"interned\" instance can subsequently be used by the Locale\n+        \/\/ instance which guarantees the locale components are properly cased\/interned.\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/BaseLocale.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.util;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Fork;\n-import org.openjdk.jmh.annotations.Measurement;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n-\n-import java.util.Locale;\n-import java.util.concurrent.TimeUnit;\n-\n-\/*\n- * This benchmark tests if caching of Locale objects works\n- * correctly.\n- *\/\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@State(Scope.Benchmark)\n-@Warmup(iterations = 4, time = 2)\n-@Measurement(iterations = 4, time = 2)\n-@Fork(value = 5)\n-public class LocaleCache {\n-    @Benchmark\n-    public void testForLanguageTag() {\n-        Locale previous = null;\n-        for (int count = 100; count > 0; count--) {\n-            var l = Locale.forLanguageTag(\"foo\");\n-            if (previous != null && previous != l) {\n-                throw new RuntimeException(\"Different Locale was created\");\n-            }\n-            previous = l;\n-        }\n-    }\n-\n-    @Benchmark\n-    public void testLocaleOf() {\n-        Locale previous = null;\n-        for (int count = 100; count > 0; count--) {\n-            var l = Locale.of(\"foo\");\n-            if (previous != null && previous != l) {\n-                throw new RuntimeException(\"Different Locale was created\");\n-            }\n-            previous = l;\n-        }\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/LocaleCache.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"}]}