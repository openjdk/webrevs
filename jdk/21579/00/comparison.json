{"files":[{"patch":"@@ -28,0 +28,3 @@\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n+#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n+#include \"gc\/shenandoah\/shenandoahUtils.hpp\"\n@@ -29,2 +32,1 @@\n-#include \"oops\/accessDecorators.hpp\"\n-#include \"runtime\/handshake.hpp\"\n+#include \"runtime\/javaThread.hpp\"\n@@ -36,2 +38,1 @@\n-class ShenandoahHeapRegionSet;\n-class Thread;\n+class ShenandoahReferenceProcessor;\n@@ -39,1 +40,60 @@\n-class ShenandoahForwardedIsAliveClosure: public BoolObjectClosure {\n+\/\/\n+\/\/ ========= Super\n+\/\/\n+\n+class ShenandoahSuperClosure : public MetadataVisitingOopIterateClosure {\n+protected:\n+  ShenandoahHeap* const _heap;\n+\n+public:\n+  inline ShenandoahSuperClosure();\n+  inline ShenandoahSuperClosure(ShenandoahReferenceProcessor* rp);\n+  inline void do_nmethod(nmethod* nm);\n+};\n+\n+\/\/\n+\/\/ ========= Marking\n+\/\/\n+\n+class ShenandoahMarkRefsSuperClosure : public ShenandoahSuperClosure {\n+private:\n+  ShenandoahObjToScanQueue* _queue;\n+  ShenandoahMarkingContext* const _mark_context;\n+  bool _weak;\n+\n+protected:\n+  template <class T, ShenandoahGenerationType GENERATION>\n+  void work(T *p);\n+\n+public:\n+  inline ShenandoahMarkRefsSuperClosure(ShenandoahObjToScanQueue* q, ShenandoahReferenceProcessor* rp);\n+\n+  bool is_weak() const {\n+    return _weak;\n+  }\n+\n+  void set_weak(bool weak) {\n+    _weak = weak;\n+  }\n+\n+  virtual void do_nmethod(nmethod* nm) {\n+    assert(!is_weak(), \"Can't handle weak marking of nmethods\");\n+    ShenandoahSuperClosure::do_nmethod(nm);\n+  }\n+};\n+\n+template <ShenandoahGenerationType GENERATION>\n+class ShenandoahMarkRefsClosure : public ShenandoahMarkRefsSuperClosure {\n+private:\n+  template <class T>\n+  inline void do_oop_work(T* p)     { work<T, GENERATION>(p); }\n+\n+public:\n+  ShenandoahMarkRefsClosure(ShenandoahObjToScanQueue* q, ShenandoahReferenceProcessor* rp) :\n+          ShenandoahMarkRefsSuperClosure(q, rp) {};\n+\n+  virtual void do_oop(narrowOop* p) { do_oop_work(p); }\n+  virtual void do_oop(oop* p)       { do_oop_work(p); }\n+};\n+\n+class ShenandoahForwardedIsAliveClosure : public BoolObjectClosure {\n@@ -47,1 +107,1 @@\n-class ShenandoahIsAliveClosure: public BoolObjectClosure {\n+class ShenandoahIsAliveClosure : public BoolObjectClosure {\n@@ -66,5 +126,0 @@\n-public:\n-  inline ShenandoahKeepAliveClosure();\n-  inline void do_oop(oop* p);\n-  inline void do_oop(narrowOop* p);\n-private:\n@@ -73,1 +128,0 @@\n-};\n@@ -75,1 +129,0 @@\n-class ShenandoahOopClosureBase : public MetadataVisitingOopIterateClosure {\n@@ -77,1 +130,3 @@\n-  inline void do_nmethod(nmethod* nm);\n+  inline ShenandoahKeepAliveClosure();\n+  inline void do_oop(oop* p)       { do_oop_work(p); }\n+  inline void do_oop(narrowOop* p) { do_oop_work(p); }\n@@ -80,2 +135,7 @@\n-template <bool concurrent, bool stable_thread>\n-class ShenandoahEvacuateUpdateRootClosureBase : public ShenandoahOopClosureBase {\n+\n+\/\/\n+\/\/ ========= Evacuating + Roots\n+\/\/\n+\n+template <bool CONCURRENT, bool STABLE_THREAD>\n+class ShenandoahEvacuateUpdateRootClosureBase : public ShenandoahSuperClosure {\n@@ -83,1 +143,0 @@\n-  ShenandoahHeap* const _heap;\n@@ -86,1 +145,4 @@\n-  inline ShenandoahEvacuateUpdateRootClosureBase();\n+  inline ShenandoahEvacuateUpdateRootClosureBase() :\n+    ShenandoahSuperClosure(),\n+    _thread(STABLE_THREAD ? Thread::current() : nullptr) {}\n+\n@@ -94,2 +156,2 @@\n-using ShenandoahEvacuateUpdateMetadataClosure = ShenandoahEvacuateUpdateRootClosureBase<false, true>;\n-using ShenandoahEvacuateUpdateRootsClosure = ShenandoahEvacuateUpdateRootClosureBase<true, false>;\n+using ShenandoahEvacuateUpdateMetadataClosure     = ShenandoahEvacuateUpdateRootClosureBase<false, true>;\n+using ShenandoahEvacuateUpdateRootsClosure        = ShenandoahEvacuateUpdateRootClosureBase<true, false>;\n@@ -98,0 +160,1 @@\n+\n@@ -110,1 +173,1 @@\n-class ShenandoahNMethodAndDisarmClosure: public NMethodToOopClosure {\n+class ShenandoahNMethodAndDisarmClosure : public NMethodToOopClosure {\n@@ -119,0 +182,48 @@\n+\n+\/\/\n+\/\/ ========= Update References\n+\/\/\n+\n+template <ShenandoahGenerationType GENERATION>\n+class ShenandoahMarkUpdateRefsClosure : public ShenandoahMarkRefsSuperClosure {\n+private:\n+  template <class T>\n+  inline void work(T* p);\n+\n+public:\n+  ShenandoahMarkUpdateRefsClosure(ShenandoahObjToScanQueue* q, ShenandoahReferenceProcessor* rp) :\n+          ShenandoahMarkRefsSuperClosure(q, rp) {\n+    assert(_heap->is_stw_gc_in_progress(), \"Can only be used for STW GC\");\n+  }\n+\n+  virtual void do_oop(narrowOop* p) { work(p); }\n+  virtual void do_oop(oop* p)       { work(p); }\n+};\n+\n+class ShenandoahUpdateRefsSuperClosure : public ShenandoahSuperClosure {};\n+\n+class ShenandoahNonConcUpdateRefsClosure : public ShenandoahUpdateRefsSuperClosure {\n+private:\n+  template<class T>\n+  inline void work(T* p);\n+\n+public:\n+  virtual void do_oop(narrowOop* p) { work(p); }\n+  virtual void do_oop(oop* p)       { work(p); }\n+};\n+\n+class ShenandoahConcUpdateRefsClosure : public ShenandoahUpdateRefsSuperClosure {\n+private:\n+  template<class T>\n+  inline void work(T* p);\n+\n+public:\n+  virtual void do_oop(narrowOop* p) { work(p); }\n+  virtual void do_oop(oop* p)       { work(p); }\n+};\n+\n+\n+\/\/\n+\/\/ ========= Utilities\n+\/\/\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.hpp","additions":132,"deletions":21,"binary":false,"changes":153,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+#include \"gc\/shenandoah\/shenandoahMark.inline.hpp\"\n+#include \"gc\/shenandoah\/shenandoahReferenceProcessor.hpp\"\n@@ -41,2 +43,27 @@\n-ShenandoahForwardedIsAliveClosure::ShenandoahForwardedIsAliveClosure() :\n-  _mark_context(ShenandoahHeap::heap()->marking_context()) {\n+\/\/\n+\/\/ ========= Super\n+\/\/\n+\n+ShenandoahSuperClosure::ShenandoahSuperClosure() :\n+  MetadataVisitingOopIterateClosure(), _heap(ShenandoahHeap::heap()) {}\n+\n+ShenandoahSuperClosure::ShenandoahSuperClosure(ShenandoahReferenceProcessor* rp) :\n+  MetadataVisitingOopIterateClosure(rp), _heap(ShenandoahHeap::heap()) {}\n+\n+void ShenandoahSuperClosure::do_nmethod(nmethod* nm) {\n+  nm->run_nmethod_entry_barrier();\n+}\n+\n+\/\/\n+\/\/ ========= Marking\n+\/\/\n+\n+ShenandoahMarkRefsSuperClosure::ShenandoahMarkRefsSuperClosure(ShenandoahObjToScanQueue* q, ShenandoahReferenceProcessor* rp) :\n+        ShenandoahSuperClosure(rp),\n+        _queue(q),\n+        _mark_context(ShenandoahHeap::heap()->marking_context()),\n+        _weak(false) {}\n+\n+template<class T, ShenandoahGenerationType GENERATION>\n+inline void ShenandoahMarkRefsSuperClosure::work(T* p) {\n+  ShenandoahMark::mark_through_ref<T, GENERATION>(p, _queue, _mark_context, _weak);\n@@ -45,0 +72,3 @@\n+ShenandoahForwardedIsAliveClosure::ShenandoahForwardedIsAliveClosure() :\n+  _mark_context(ShenandoahHeap::heap()->marking_context()) {}\n+\n@@ -55,2 +85,1 @@\n-  _mark_context(ShenandoahHeap::heap()->marking_context()) {\n-}\n+  _mark_context(ShenandoahHeap::heap()->marking_context()) {}\n@@ -72,4 +101,0 @@\n-void ShenandoahOopClosureBase::do_nmethod(nmethod* nm) {\n-  nm->run_nmethod_entry_barrier();\n-}\n-\n@@ -77,10 +102,1 @@\n-  _bs(ShenandoahBarrierSet::barrier_set()) {\n-}\n-\n-void ShenandoahKeepAliveClosure::do_oop(oop* p) {\n-  do_oop_work(p);\n-}\n-\n-void ShenandoahKeepAliveClosure::do_oop(narrowOop* p) {\n-  do_oop_work(p);\n-}\n+  _bs(ShenandoahBarrierSet::barrier_set()) {}\n@@ -100,4 +116,0 @@\n-template <bool concurrent, bool stable_thread>\n-ShenandoahEvacuateUpdateRootClosureBase<concurrent, stable_thread>::ShenandoahEvacuateUpdateRootClosureBase() :\n-  _heap(ShenandoahHeap::heap()), _thread(stable_thread ? Thread::current() : nullptr) {\n-}\n@@ -105,3 +117,7 @@\n-template <bool concurrent, bool stable_thread>\n-void ShenandoahEvacuateUpdateRootClosureBase<concurrent, stable_thread>::do_oop(oop* p) {\n-  if (concurrent) {\n+\/\/\n+\/\/ ========= Evacuating + Roots\n+\/\/\n+\n+template <bool CONCURRENT, bool STABLE_THREAD>\n+void ShenandoahEvacuateUpdateRootClosureBase<CONCURRENT, STABLE_THREAD>::do_oop(oop* p) {\n+  if (CONCURRENT) {\n@@ -115,3 +131,3 @@\n-template <bool concurrent, bool stable_thread>\n-void ShenandoahEvacuateUpdateRootClosureBase<concurrent, stable_thread>::do_oop(narrowOop* p) {\n-  if (concurrent) {\n+template <bool CONCURRENT, bool STABLE_THREAD>\n+void ShenandoahEvacuateUpdateRootClosureBase<CONCURRENT, STABLE_THREAD>::do_oop(narrowOop* p) {\n+  if (CONCURRENT) {\n@@ -125,1 +141,1 @@\n-template <bool atomic, bool stable_thread>\n+template <bool CONCURRENT, bool STABLE_THREAD>\n@@ -127,1 +143,1 @@\n-void ShenandoahEvacuateUpdateRootClosureBase<atomic, stable_thread>::do_oop_work(T* p) {\n+void ShenandoahEvacuateUpdateRootClosureBase<CONCURRENT, STABLE_THREAD>::do_oop_work(T* p) {\n@@ -140,1 +156,1 @@\n-        Thread* thr = stable_thread ? _thread : Thread::current();\n+        Thread* thr = STABLE_THREAD ? _thread : Thread::current();\n@@ -145,1 +161,1 @@\n-      if (atomic) {\n+      if (CONCURRENT) {\n@@ -195,0 +211,30 @@\n+\n+\/\/\n+\/\/ ========= Update References\n+\/\/\n+\n+template<ShenandoahGenerationType GENERATION>\n+template<class T>\n+inline void ShenandoahMarkUpdateRefsClosure<GENERATION>::work(T* p) {\n+  \/\/ Update the location\n+  _heap->non_conc_update_with_forwarded(p);\n+\n+  \/\/ ...then do the usual thing\n+  ShenandoahMarkRefsSuperClosure::work<T, GENERATION>(p);\n+}\n+\n+template<class T>\n+inline void ShenandoahNonConcUpdateRefsClosure::work(T* p) {\n+  _heap->non_conc_update_with_forwarded(p);\n+}\n+\n+template<class T>\n+inline void ShenandoahConcUpdateRefsClosure::work(T* p) {\n+  _heap->conc_update_with_forwarded(p);\n+}\n+\n+\n+\/\/\n+\/\/ ========= Utilities\n+\/\/\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.inline.hpp","additions":78,"deletions":32,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n@@ -38,1 +39,0 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n@@ -47,1 +48,0 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGC.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n@@ -37,7 +36,0 @@\n-ShenandoahMarkRefsSuperClosure::ShenandoahMarkRefsSuperClosure(ShenandoahObjToScanQueue* q,  ShenandoahReferenceProcessor* rp) :\n-  MetadataVisitingOopIterateClosure(rp),\n-  _queue(q),\n-  _mark_context(ShenandoahHeap::heap()->marking_context()),\n-  _weak(false)\n-{ }\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n@@ -35,1 +36,0 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,129 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2022, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHOOPCLOSURES_HPP\n-#define SHARE_GC_SHENANDOAH_SHENANDOAHOOPCLOSURES_HPP\n-\n-#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n-#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n-#include \"gc\/shenandoah\/shenandoahGenerationType.hpp\"\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n-#include \"gc\/shenandoah\/shenandoahTaskqueue.hpp\"\n-#include \"gc\/shenandoah\/shenandoahUtils.hpp\"\n-#include \"memory\/iterator.hpp\"\n-#include \"runtime\/javaThread.hpp\"\n-\n-class ShenandoahMarkRefsSuperClosure : public MetadataVisitingOopIterateClosure {\n-private:\n-  ShenandoahObjToScanQueue* _queue;\n-  ShenandoahMarkingContext* const _mark_context;\n-  bool _weak;\n-\n-protected:\n-  template <class T, ShenandoahGenerationType GENERATION>\n-  void work(T *p);\n-\n-public:\n-  ShenandoahMarkRefsSuperClosure(ShenandoahObjToScanQueue* q, ShenandoahReferenceProcessor* rp);\n-\n-  bool is_weak() const {\n-    return _weak;\n-  }\n-\n-  void set_weak(bool weak) {\n-    _weak = weak;\n-  }\n-\n-  virtual void do_nmethod(nmethod* nm) {\n-    assert(!is_weak(), \"Can't handle weak marking of nmethods\");\n-    nm->run_nmethod_entry_barrier();\n-  }\n-};\n-\n-template <ShenandoahGenerationType GENERATION>\n-class ShenandoahMarkUpdateRefsClosure : public ShenandoahMarkRefsSuperClosure {\n-private:\n-  ShenandoahHeap* const _heap;\n-\n-  template <class T>\n-  inline void work(T* p);\n-\n-public:\n-  ShenandoahMarkUpdateRefsClosure(ShenandoahObjToScanQueue* q, ShenandoahReferenceProcessor* rp) :\n-    ShenandoahMarkRefsSuperClosure(q, rp),\n-    _heap(ShenandoahHeap::heap()) {\n-    assert(_heap->is_stw_gc_in_progress(), \"Can only be used for STW GC\");\n-  }\n-\n-  virtual void do_oop(narrowOop* p) { work(p); }\n-  virtual void do_oop(oop* p)       { work(p); }\n-};\n-\n-template <ShenandoahGenerationType GENERATION>\n-class ShenandoahMarkRefsClosure : public ShenandoahMarkRefsSuperClosure {\n-private:\n-  template <class T>\n-  inline void do_oop_work(T* p)     { work<T, GENERATION>(p); }\n-\n-public:\n-  ShenandoahMarkRefsClosure(ShenandoahObjToScanQueue* q, ShenandoahReferenceProcessor* rp) :\n-    ShenandoahMarkRefsSuperClosure(q, rp) {};\n-\n-  virtual void do_oop(narrowOop* p) { do_oop_work(p); }\n-  virtual void do_oop(oop* p)       { do_oop_work(p); }\n-};\n-\n-class ShenandoahUpdateRefsSuperClosure : public ShenandoahOopClosureBase {\n-protected:\n-  ShenandoahHeap* _heap;\n-\n-public:\n-  ShenandoahUpdateRefsSuperClosure() :  _heap(ShenandoahHeap::heap()) {}\n-};\n-\n-class ShenandoahNonConcUpdateRefsClosure : public ShenandoahUpdateRefsSuperClosure {\n-private:\n-  template<class T>\n-  inline void work(T* p);\n-\n-public:\n-  ShenandoahNonConcUpdateRefsClosure() : ShenandoahUpdateRefsSuperClosure() {}\n-\n-  virtual void do_oop(narrowOop* p) { work(p); }\n-  virtual void do_oop(oop* p)       { work(p); }\n-};\n-\n-class ShenandoahConcUpdateRefsClosure : public ShenandoahUpdateRefsSuperClosure {\n-private:\n-  template<class T>\n-  inline void work(T* p);\n-\n-public:\n-  ShenandoahConcUpdateRefsClosure() : ShenandoahUpdateRefsSuperClosure() {}\n-\n-  virtual void do_oop(narrowOop* p) { work(p); }\n-  virtual void do_oop(oop* p)       { work(p); }\n-};\n-\n-#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHOOPCLOSURES_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp","additions":0,"deletions":129,"binary":false,"changes":129,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2021, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHOOPCLOSURES_INLINE_HPP\n-#define SHARE_GC_SHENANDOAH_SHENANDOAHOOPCLOSURES_INLINE_HPP\n-\n-#include \"gc\/shenandoah\/shenandoahOopClosures.hpp\"\n-\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n-#include \"gc\/shenandoah\/shenandoahMark.inline.hpp\"\n-\n-template<class T, ShenandoahGenerationType GENERATION>\n-inline void ShenandoahMarkRefsSuperClosure::work(T* p) {\n-  ShenandoahMark::mark_through_ref<T, GENERATION>(p, _queue, _mark_context, _weak);\n-}\n-\n-template<ShenandoahGenerationType GENERATION>\n-template<class T>\n-inline void ShenandoahMarkUpdateRefsClosure<GENERATION>::work(T* p) {\n-  \/\/ Update the location\n-  _heap->non_conc_update_with_forwarded(p);\n-\n-  \/\/ ...then do the usual thing\n-  ShenandoahMarkRefsSuperClosure::work<T, GENERATION>(p);\n-}\n-\n-template<class T>\n-inline void ShenandoahNonConcUpdateRefsClosure::work(T* p) {\n-  _heap->non_conc_update_with_forwarded(p);\n-}\n-\n-template<class T>\n-inline void ShenandoahConcUpdateRefsClosure::work(T* p) {\n-  _heap->conc_update_with_forwarded(p);\n-}\n-\n-#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHOOPCLOSURES_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n+#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-#include \"gc\/shenandoah\/shenandoahMark.inline.hpp\"\n-#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVMOperations.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}