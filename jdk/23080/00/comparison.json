{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-                        plainConnection.close();\n+                        plainConnection.close(ex);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/AsyncSSLConnection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-                        plainConnection.close();\n+                        plainConnection.close(ex);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/AsyncSSLTunnelConnection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -41,0 +42,1 @@\n+import jdk.internal.net.http.HttpClientImpl.DelegatingExecutor;\n@@ -66,1 +68,1 @@\n-    private volatile IOException failed;\n+    private final AtomicReference<IOException> failed = new AtomicReference<>();\n@@ -68,1 +70,1 @@\n-    final Executor parentExecutor;\n+    final DelegatingExecutor parentExecutor;\n@@ -94,1 +96,1 @@\n-    Executor executor() {\n+    DelegatingExecutor executor() {\n@@ -239,1 +241,9 @@\n-        ExchangeImpl<?> impl = exchImpl;\n+        ExchangeImpl<?> impl;\n+        IOException closeReason = null;\n+        synchronized (this) {\n+            impl =  exchImpl;\n+            if (impl == null) {\n+                \/\/ no impl yet. record the exception\n+                failed.compareAndSet(null, cause);\n+            }\n+        }\n@@ -245,12 +255,1 @@\n-            \/\/ no impl yet. record the exception\n-            IOException failed = this.failed;\n-            if (failed == null) {\n-                synchronized (this) {\n-                    failed = this.failed;\n-                    if (failed == null) {\n-                        failed = this.failed = cause;\n-                    }\n-                }\n-            }\n-\n-            \/\/ abort\/close the connection if setting up the exchange. This can\n+             \/\/ abort\/close the connection if setting up the exchange. This can\n@@ -258,1 +257,4 @@\n-            connectionAborter.closeConnection(failed);\n+            closeReason = failed.get();\n+            if (closeReason != null) {\n+                connectionAborter.closeConnection(closeReason);\n+            }\n@@ -277,1 +279,1 @@\n-        if (failed != null) {\n+        if (failed.get() != null) {\n@@ -279,1 +281,1 @@\n-                cause = failed;\n+                cause = failed.get();\n@@ -289,1 +291,5 @@\n-            failed = null;\n+            synchronized (this) {\n+                if (impl == exchImpl) {\n+                    failed.compareAndSet(cause, null);\n+                }\n+            }\n@@ -316,1 +322,1 @@\n-                            connection.close();\n+                            connection.close(t);\n@@ -333,0 +339,5 @@\n+    synchronized IOException failed(IOException io) {\n+        IOException cause = failed.compareAndExchange(null, io);\n+        return cause == null ? io : cause;\n+    }\n+\n@@ -334,1 +345,1 @@\n-        return failed;\n+        return failed.get();\n@@ -412,0 +423,5 @@\n+    private CompletableFuture<Response> startSendingBody(DelegatingExecutor executor) {\n+        return exchImpl.sendBodyAsync()\n+                        .thenCompose(exIm -> exIm.getResponseAsync(executor));\n+    }\n+\n@@ -433,3 +449,1 @@\n-                        CompletableFuture<Response> cf =\n-                                exchImpl.sendBodyAsync()\n-                                        .thenCompose(exIm -> exIm.getResponseAsync(parentExecutor));\n+                        CompletableFuture<Response> cf = startSendingBody(parentExecutor);\n@@ -447,3 +461,1 @@\n-                        CompletableFuture<Response> cf =\n-                                exchImpl.sendBodyAsync()\n-                                        .thenCompose(exIm -> exIm.getResponseAsync(parentExecutor));\n+                        CompletableFuture<Response> cf = startSendingBody(parentExecutor);\n@@ -474,2 +486,1 @@\n-        CompletableFuture<Response> cf = ex.sendBodyAsync()\n-                .thenCompose(exIm -> exIm.getResponseAsync(parentExecutor));\n+        CompletableFuture<Response> cf = startSendingBody(parentExecutor);\n@@ -672,1 +683,1 @@\n-                                t = failed;\n+                                t = failed.get();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Exchange.java","additions":43,"deletions":32,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,2 +262,4 @@\n-            Throwable x = error;\n-            if (x == null) error = t; \/\/ will be handled in the finally block\n+            synchronized (this) {\n+                Throwable x = error;\n+                if (x == null) error = t; \/\/ will be handled in the finally block\n+            }\n@@ -315,1 +317,1 @@\n-                if (exchg != null) exchg.connection().close();\n+                if (exchg != null) exchg.connection().close(x);\n@@ -349,1 +351,1 @@\n-            debug.log(\"downstream subscription demand is %s\", demand);\n+            debug.log(\"downstream subscription demand is %s for %s\", demand, delegate);\n@@ -576,1 +578,1 @@\n-                        debug.log(\"Http1TubeSubscriber: requesting one more from upstream\");\n+                        debug.log(\"Http1TubeSubscriber: requesting one more from upstream: \" + s);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1AsyncReceiver.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import jdk.internal.net.http.HttpClientImpl.DelegatingExecutor;\n@@ -66,1 +67,1 @@\n-    final Executor executor;\n+    final DelegatingExecutor executor;\n@@ -73,1 +74,2 @@\n-    private final List<CompletableFuture<?>> operations; \/\/ used for cancel\n+    private final ConcurrentLinkedDeque<CompletableFuture<?>> operations =\n+            new ConcurrentLinkedDeque<>(); \/\/ used for cancel\n@@ -239,1 +241,0 @@\n-        this.operations = new LinkedList<>();\n@@ -259,1 +260,1 @@\n-        if (debug.on()) debug.log(\"%s connecting flows\", tube);\n+        if (debug.on()) debug.log(\"%s connecting flows %s\", tube, writePublisher);\n@@ -362,1 +363,1 @@\n-                        connection.close();\n+                        connection.close(t);\n@@ -421,1 +422,1 @@\n-            cause = failedRef.compareAndExchange(failedRef.get(), null);\n+            cause = failedRef.get();\n@@ -529,1 +530,1 @@\n-        Throwable error = null;\n+        Throwable error;\n@@ -601,1 +602,1 @@\n-                connection.close();\n+                connection.close(error);\n@@ -658,1 +659,0 @@\n-        final Executor exec = client.theExecutor();\n@@ -661,1 +661,1 @@\n-            exec.execute(bodySubscriber::cancelSubscription);\n+            executor.execute(bodySubscriber::cancelSubscription);\n@@ -671,1 +671,1 @@\n-        final Executor exec = client.theExecutor();\n+        final Executor exec = executor;\n@@ -689,1 +689,1 @@\n-                connection.close();\n+                connection.close(dp.throwable);\n@@ -802,1 +802,1 @@\n-                if (debug.on()) debug.log(\"WriteTask\");\n+                if (debug.on()) debug.log(\"WriteTask for \" + request);\n@@ -862,1 +862,1 @@\n-                writeScheduler.runOrSchedule(client.theExecutor());\n+                writeScheduler.runOrSchedule(executor);\n@@ -867,1 +867,1 @@\n-                if (debug.on()) debug.log(\"subscription cancelled\");\n+                if (debug.on()) debug.log(\"subscription cancelled for \" + request);\n@@ -871,1 +871,1 @@\n-                writeScheduler.runOrSchedule(client.theExecutor());\n+                writeScheduler.runOrSchedule(executor);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Exchange.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -288,1 +288,1 @@\n-        if (t != null) connection.close();\n+        if (t != null) connection.close(t);\n@@ -334,1 +334,1 @@\n-                    connection.close();\n+                    connection.close(cf.exceptionNow());\n@@ -355,1 +355,1 @@\n-                                connection.close();\n+                                connection.close(t);\n@@ -474,1 +474,1 @@\n-        connection.close();\n+        connection.close(t);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Response.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -694,1 +694,1 @@\n-                        aconn.close();\n+                        aconn.close(t);\n@@ -913,1 +913,1 @@\n-        connection.close();\n+        connection.close(cause.get());\n@@ -974,1 +974,2 @@\n-            if (stream == null && pushContinuationState == null) {\n+            PushContinuationState pcs = pushContinuationState;\n+            if (stream == null && pcs == null) {\n@@ -1019,1 +1020,0 @@\n-            PushContinuationState pcs = pushContinuationState;\n@@ -1963,1 +1963,2 @@\n-                            \"connection window exceeded\");\n+                            \"connection window exceeded (%s > %s)\"\n+                                    .formatted(received, windowSize));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http2Connection.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -61,0 +62,1 @@\n+    private final AtomicReference<Throwable> errorRef = new AtomicReference<>();\n@@ -110,0 +112,5 @@\n+    Throwable getError(Throwable cause) {\n+        if (errorRef.compareAndSet(null, cause)) return cause;\n+        return errorRef.get();\n+    }\n+\n@@ -152,1 +159,1 @@\n-                Throwable t = Utils.toConnectException(e);\n+                Throwable t = getError(Utils.toConnectException(e));\n@@ -155,1 +162,1 @@\n-                close();\n+                close(t);\n@@ -161,0 +168,1 @@\n+            Throwable cause = getError(ioe);\n@@ -162,2 +170,2 @@\n-            client().theExecutor().execute( () -> cf.completeExceptionally(ioe));\n-            close();\n+            client().theExecutor().execute( () -> cf.completeExceptionally(cause));\n+            close(cause);\n@@ -208,1 +216,1 @@\n-                } else throw new ConnectException(\"connection closed\");\n+                } else throw getError(new ConnectException(\"connection closed\"));\n@@ -215,1 +223,2 @@\n-            cf.completeExceptionally(Utils.toConnectException(throwable));\n+            var cause = getError(Utils.toConnectException(throwable));\n+            cf.completeExceptionally(cause);\n@@ -220,1 +229,1 @@\n-                close();\n+                close(cause);\n@@ -226,1 +235,1 @@\n-        return cf.handle((r,t) -> checkRetryConnect(r, t,exchange))\n+        return cf.handle((r,t) -> checkRetryConnect(r, t, exchange))\n@@ -405,0 +414,1 @@\n+            Throwable reason = getError(cause);\n@@ -406,2 +416,8 @@\n-            if (debug.on())\n-                debug.log(\"Closing channel: \" + client().debugInterestOps(chan));\n+            if (debug.on()) {\n+                String interestOps = client().debugInterestOps(chan);\n+                if (reason == null) {\n+                    debug.log(\"Closing channel: \" + interestOps);\n+                } else {\n+                    debug.log(\"Closing channel: %s due to %s\", interestOps, reason);\n+                }\n+            }\n@@ -415,0 +431,1 @@\n+                tube.signalClosed(errorRef.get());\n@@ -416,1 +433,0 @@\n-                tube.signalClosed(cause);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/PlainHttpConnection.java","additions":28,"deletions":12,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -728,1 +728,4 @@\n-            requestBodyCF.completeExceptionally(new IOException(\"RST_STREAM received\"));\n+            var exception = new IOException(\"RST_STREAM received \" +\n+                    ResetFrame.stringForCode(frame.getErrorCode()));\n+            requestBodyCF.completeExceptionally(exception);\n+            cancelImpl(exception, frame.getErrorCode());\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,2 @@\n+    private final AtomicReference<Throwable> errorRef\n+            = new AtomicReference<>();\n@@ -160,0 +162,7 @@\n+    private Throwable error(Throwable error) {\n+        if (errorRef.compareAndSet(null, error)) {\n+            return error;\n+        }\n+        return errorRef.get();\n+    }\n+\n@@ -300,2 +309,0 @@\n-        private final AtomicReference<Throwable> errorRef\n-                = new AtomicReference<>();\n@@ -338,1 +345,1 @@\n-                handleNow = this.errorRef.get() != null || onCompleteReceived;\n+                handleNow = errorRef.get() != null || onCompleteReceived;\n@@ -471,1 +478,1 @@\n-                failed = this.errorRef.get();\n+                failed = errorRef.get();\n@@ -668,1 +675,1 @@\n-        sslDelegate.upstreamWriter().onError(throwable);\n+        sslDelegate.upstreamWriter().onError(error(throwable));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/SSLTube.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -43,2 +40,0 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n@@ -76,1 +71,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -482,4 +476,6 @@\n-\n-                    if (thrower.test(where, throwable)) {\n-                        System.out.println(now() + \"Got expected exception: \" + throwable);\n-                    } else throw causeNotFound(where, t);\n+                    Throwable cause = findCause(where, throwable, thrower);\n+                    if (cause == null) {\n+                        throw causeNotFound(where, t);\n+                    } else {\n+                        System.out.println(now() + \"Got expected exception: \" + cause);\n+                    }\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractThrowingPublishers.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -236,2 +236,6 @@\n-        if (!t.getMessage().contains(contains)) {\n-            String error = \"Exception message:[\" + t.toString() + \"] doesn't contain [\" + contains + \"]\";\n+        Throwable cause = t;\n+        do {\n+            if (cause.getMessage().contains(contains)) break;\n+        } while ((cause = cause.getCause()) != null);\n+        if (cause == null) {\n+            String error = \"Exception message:[\" + t + \"] doesn't contain [\" + contains + \"]\";\n","filename":"test\/jdk\/java\/net\/httpclient\/FlowAdapterPublisherTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -223,0 +223,1 @@\n+        client.close();\n@@ -243,2 +244,2 @@\n-        boolean inTest;\n-        String expectedMethod;\n+        volatile boolean inTest;\n+        volatile String expectedMethod;\n@@ -275,0 +276,1 @@\n+                inTest = false; \/\/ next request should be new test\n@@ -280,0 +282,2 @@\n+                \/\/ set inTest before sending responses\n+                inTest = true;\n@@ -289,1 +293,0 @@\n-                inTest = true;\n@@ -291,0 +294,2 @@\n+                \/\/ set inTest before sending responses\n+                inTest = false;\n@@ -310,1 +315,0 @@\n-                inTest = false;\n","filename":"test\/jdk\/java\/net\/httpclient\/RedirectMethodChange.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -179,0 +179,17 @@\n+    static void checkCause(Throwable cause) {\n+        Throwable t = cause;\n+        boolean found = false;\n+        while (t != null && !found) {\n+            check(t instanceof IOException, t,\n+                    \"Expected cause IOException, but got: \", t);\n+            String msg = t.getMessage();\n+            found =  (msg != null && (msg.contains(\"Too many\") || msg.contains(\"Too few\")));\n+            t = t.getCause();\n+        }\n+        if (!found) {\n+            String msg = cause.getMessage();\n+            check(msg.contains(\"Too many\") || msg.contains(\"Too few\"),\n+                    cause, \"Expected Too many|Too few, got: \", cause);\n+        }\n+    }\n+\n@@ -197,6 +214,1 @@\n-            Throwable t = expected.getCause();\n-            check(t instanceof IOException, t,\n-                  \"Expected cause IOException, but got: \", t);\n-            String msg = t.getMessage();\n-            check(msg.contains(\"Too many\") || msg.contains(\"Too few\"),\n-                    t, \"Expected Too many|Too few, got: \", t);\n+            checkCause(expected.getCause());\n@@ -222,3 +234,1 @@\n-            String msg = expected.getMessage();\n-            check(msg.contains(\"Too many\") || msg.contains(\"Too few\"),\n-                    expected,\"Expected Too many|Too few, got: \", expected);\n+            checkCause(expected);\n","filename":"test\/jdk\/java\/net\/httpclient\/ShortRequestBody.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,1 @@\n+    static PrintStream out = System.out;\n@@ -91,0 +92,1 @@\n+        out.printf(\"\\nTesting with Version: %s, URI: %s\\n\", HTTP_2, uri.toASCIIString());\n@@ -94,0 +96,1 @@\n+        Exception exception = null;\n@@ -98,0 +101,1 @@\n+            exception = e;\n@@ -100,0 +104,1 @@\n+        assertNotNull(exception, \"Request should have completed exceptionally but exception is null\");\n@@ -180,1 +185,1 @@\n-            exchange.sendResponseHeaders(100, 0);\n+            exchange.sendResponseHeaders(100, -1);\n@@ -200,1 +205,1 @@\n-            exchange.sendResponseHeaders(100, 0);\n+            exchange.sendResponseHeaders(100, -1);\n@@ -202,0 +207,1 @@\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ExpectContinueResetTest.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}