{"files":[{"patch":"@@ -334,1 +334,1 @@\n-                    connection.close(cf.exceptionNow());\n+                    connection.close(Utils.exceptionNow(cf));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Response.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+import java.util.concurrent.CancellationException;\n@@ -1136,0 +1137,27 @@\n+\n+    \/**\n+     * {@return the exception the given {@code cf} was completed with,\n+     * or a {@link CancellationException} if the given {@code cf} was\n+     * cancelled}\n+     *\n+     * @param cf a {@code CompletableFuture} exceptionally completed\n+     * @throws IllegalArgumentException if the given cf was not\n+     *    {@linkplain CompletableFuture#isCompletedExceptionally()\n+     *    completed exceptionally}\n+     *\/\n+    public static Throwable exceptionNow(CompletableFuture<?> cf) {\n+        if (cf.isCompletedExceptionally()) {\n+            if (cf.isCancelled()) {\n+                try {\n+                    cf.join();\n+                } catch (CancellationException x) {\n+                    return x;\n+                } catch (CompletionException x) {\n+                    return x.getCause();\n+                }\n+            } else {\n+                return cf.exceptionNow();\n+            }\n+        }\n+        throw new IllegalArgumentException(\"cf is not completed exceptionally\");\n+    }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -96,2 +96,1 @@\n-        Exception exception = null;\n-        Throwable testThrowable = null;\n+        Exception expectedException = null;\n@@ -100,0 +99,1 @@\n+            throw new AssertionError(\"Expected exception not raised for \" + uri);\n@@ -101,2 +101,1 @@\n-            exception = e;\n-            testThrowable = e.getCause();\n+            expectedException = e;\n@@ -104,3 +103,7 @@\n-        assertNotNull(exception, \"Request should have completed exceptionally but exception is null\");\n-        assertNotNull(testThrowable, \"Request should have completed exceptionally but testThrowable is null\");\n-        assertEquals(testThrowable.getClass(), IOException.class, \"Test should have closed with an IOException\");\n+        Throwable testThrowable = expectedException.getCause();\n+        if (testThrowable == null) {\n+            throw new AssertionError(\"Unexpected null cause for \" + expectedException,\n+                    expectedException);\n+        }\n+        assertEquals(testThrowable.getClass(), IOException.class,\n+                \"Test should have closed with an IOException\");\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ExpectContinueResetTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}