{"files":[{"patch":"@@ -2477,4 +2477,12 @@\n-  \/\/ share global compressor, local DumpWriter is not responsible for its life cycle\n-  DumpWriter segment_writer(DumpMerger::get_writer_path(writer()->get_file_path(), dumper_id),\n-                            writer()->is_overwrite(), writer()->compressor());\n-  if (!segment_writer.has_error()) {\n+  \/\/ For serial heap dump, write everything directly to global writer.\n+  DumpWriter* local_writer = writer();\n+  \/\/ For parallel heap dump, create a segment writer for a separte file\n+  \/\/ containing a segment of the dump.\n+  if (is_parallel_dump()) {\n+    \/\/ share global compressor, local DumpWriter is not responsible for its life cycle\n+    local_writer = new DumpWriter(\n+        DumpMerger::get_writer_path(writer()->get_file_path(), dumper_id),\n+        writer()->is_overwrite(), writer()->compressor());\n+  }\n+\n+  if (!local_writer->has_error()) {\n@@ -2485,1 +2493,1 @@\n-      ClassDumper class_dumper(&segment_writer);\n+      ClassDumper class_dumper(local_writer);\n@@ -2489,1 +2497,1 @@\n-      dump_threads(&segment_writer);\n+      dump_threads(local_writer);\n@@ -2492,1 +2500,1 @@\n-      JNIGlobalsDumper jni_dumper(&segment_writer);\n+      JNIGlobalsDumper jni_dumper(local_writer);\n@@ -2500,1 +2508,1 @@\n-      StickyClassDumper stiky_class_dumper(&segment_writer);\n+      StickyClassDumper stiky_class_dumper(local_writer);\n@@ -2513,1 +2521,1 @@\n-    HeapObjectDumper obj_dumper(&segment_writer, this);\n+    HeapObjectDumper obj_dumper(local_writer, this);\n@@ -2521,2 +2529,2 @@\n-    segment_writer.finish_dump_segment();\n-    segment_writer.flush();\n+    local_writer->finish_dump_segment();\n+    local_writer->flush();\n@@ -2525,1 +2533,3 @@\n-  _dumper_controller->dumper_complete(&segment_writer, writer());\n+  if (is_parallel_dump()) {\n+    _dumper_controller->dumper_complete(local_writer, writer());\n+    delete local_writer;\n@@ -2527,2 +2537,2 @@\n-  if (is_vm_dumper(dumper_id)) {\n-    _dumper_controller->wait_all_dumpers_complete();\n+    if (is_vm_dumper(dumper_id)) {\n+      _dumper_controller->wait_all_dumpers_complete();\n@@ -2530,2 +2540,2 @@\n-    \/\/ flush global writer\n-    writer()->flush();\n+      \/\/ flush global writer\n+      writer()->flush();\n@@ -2533,2 +2543,3 @@\n-    \/\/ At this point, all fragments of the heapdump have been written to separate files.\n-    \/\/ We need to merge them into a complete heapdump and write HPROF_HEAP_DUMP_END at that time.\n+      \/\/ At this point, all fragments of the heapdump have been written to separate files.\n+      \/\/ We need to merge them into a complete heapdump and write HPROF_HEAP_DUMP_END at that time.\n+    }\n@@ -2639,13 +2650,18 @@\n-  \/\/ Heap dump process is done in two phases\n-  \/\/\n-  \/\/ Phase 1: Concurrent threads directly write heap data to multiple heap files.\n-  \/\/          This is done by VM_HeapDumper, which is performed within safepoint.\n-  \/\/\n-  \/\/ Phase 2: Merge multiple heap files into one complete heap dump file.\n-  \/\/          This is done by DumpMerger, which is performed outside safepoint\n-\n-  DumpMerger merger(path, &writer, dumper.dump_seq());\n-  \/\/ Perform heapdump file merge operation in the current thread prevents us\n-  \/\/ from occupying the VM Thread, which in turn affects the occurrence of\n-  \/\/ GC and other VM operations.\n-  merger.do_merge();\n+  if (!dumper.is_parallel_dump()) {\n+    DumperSupport::end_of_dump(&writer);\n+    writer.flush();\n+  } else {\n+    \/\/ Heap dump process is done in two phases\n+    \/\/\n+    \/\/ Phase 1: Concurrent threads directly write heap data to multiple heap files.\n+    \/\/          This is done by VM_HeapDumper, which is performed within safepoint.\n+    \/\/\n+    \/\/ Phase 2: Merge multiple heap files into one complete heap dump file.\n+    \/\/          This is done by DumpMerger, which is performed outside safepoint\n+\n+    DumpMerger merger(path, &writer, dumper.dump_seq());\n+    \/\/ Perform heapdump file merge operation in the current thread prevents us\n+    \/\/ from occupying the VM Thread, which in turn affects the occurrence of\n+    \/\/ GC and other VM operations.\n+    merger.do_merge();\n+  }\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":47,"deletions":31,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -57,0 +57,8 @@\n+\/**\n+ * @test id=default-serial\n+ * @requires vm.jvmti\n+ * @requires vm.continuations\n+ * @library \/test\/lib\n+ * @run main VThreadInHeapDump -XX:ActiveProcessorCount=1 -XX:+ErrorFileToStderr\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/HeapDump\/VThreadInHeapDump.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}