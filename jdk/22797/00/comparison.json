{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @compile ..\/..\/nio\/file\/spi\/TestProvider.java AddressTest.java\n+ * @compile ..\/..\/nio\/file\/spi\/testfsp\/testfsp\/TestProvider.java AddressTest.java\n@@ -54,2 +54,2 @@\n-        TestProvider prov = new TestProvider(FileSystems.getDefault().provider());\n-        Path path = prov.getPath(URI.create(\"file:\/\"));\n+        var fsp = new testfsp.TestProvider(FileSystems.getDefault().provider());\n+        Path path = fsp.getPath(URI.create(\"file:\/\"));\n","filename":"test\/jdk\/java\/net\/UnixDomainSocketAddress\/AddressTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -27,1 +27,1 @@\n- * @modules jdk.jartool\n+ * @modules jdk.jartool jdk.jlink\n@@ -29,2 +29,2 @@\n- * @build SetDefaultProvider TestProvider m\/* jdk.test.lib.process.ProcessTools\n- * @run testng\/othervm SetDefaultProvider\n+ * @build testfsp\/* testapp\/*\n+ * @run junit SetDefaultProvider\n@@ -40,0 +40,1 @@\n+import java.util.Arrays;\n@@ -46,0 +47,4 @@\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.BeforeAll;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -47,5 +52,1 @@\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n-\n-@Test\n-public class SetDefaultProvider {\n+class SetDefaultProvider {\n@@ -54,1 +55,1 @@\n-        \"-Djava.nio.file.spi.DefaultFileSystemProvider=TestProvider\";\n+        \"-Djava.nio.file.spi.DefaultFileSystemProvider=testfsp.TestProvider\";\n@@ -61,3 +62,14 @@\n-    private static Path createTempDirectory(String prefix) throws IOException {\n-        Path testDir = Paths.get(System.getProperty(\"test.dir\", \".\"));\n-        return Files.createTempDirectory(testDir, prefix);\n+    private static final String TESTFSP = \"testfsp\";\n+    private static final String TESTAPP = \"testapp\";\n+    private static final String TESTAPP_MAIN = TESTAPP + \".Main\";\n+\n+    \/\/ directory containing testfsp class files\n+    private static String TESTFSP_CLASSES;\n+\n+    \/\/ directory containing testapp class files\n+    private static String TESTAPP_CLASSES;\n+\n+    @BeforeAll\n+    static void setup() {\n+        TESTFSP_CLASSES = classes(TESTFSP);\n+        TESTAPP_CLASSES = classes(TESTAPP);\n@@ -67,2 +79,1 @@\n-     * Test override of default FileSystemProvider with the main application\n-     * on the class path.\n+     * Test file system provider exploded on the class path.\n@@ -70,6 +81,5 @@\n-    public void testClassPath() throws Exception {\n-        String moduleClasses = moduleClasses();\n-        String testClasses = System.getProperty(\"test.classes\");\n-        String classpath = moduleClasses + File.pathSeparator + testClasses;\n-        int exitValue = exec(SET_DEFAULT_FSP, \"-cp\", classpath, \"p.Main\");\n-        assertEquals(exitValue, 0);\n+    @Test\n+    void testFspOnClassPath1() throws Exception {\n+        exec(SET_DEFAULT_FSP,\n+                \"-cp\", ofClasspath(TESTFSP_CLASSES, TESTAPP_CLASSES),\n+                TESTAPP_MAIN);\n@@ -79,2 +89,1 @@\n-     * Test override of default FileSystemProvider with a\n-     * FileSystemProvider jar and the main application on the class path.\n+     * Test file system provider in JAR file on the class path.\n@@ -82,9 +91,6 @@\n-    public void testClassPathWithFileSystemProviderJar() throws Exception {\n-        String testClasses = System.getProperty(\"test.classes\");\n-        Path jar = Path.of(\"testFileSystemProvider.jar\");\n-        Files.deleteIfExists(jar);\n-        createFileSystemProviderJar(jar, Path.of(testClasses));\n-        String classpath = jar + File.pathSeparator + testClasses\n-                + File.separator + \"modules\" + File.separator + \"m\";\n-        int exitValue = exec(SET_DEFAULT_FSP, \"-cp\", classpath, \"p.Main\");\n-        assertEquals(exitValue, 0);\n+    @Test\n+    void testFspOnClassPath2() throws Exception {\n+        String jarFile = createJar(\"fsp.jar\", TESTFSP_CLASSES);\n+        exec(SET_DEFAULT_FSP,\n+                \"-cp\", ofClasspath(jarFile, TESTAPP_CLASSES),\n+                TESTAPP_MAIN);\n@@ -94,2 +100,1 @@\n-     * Creates a JAR containing the FileSystemProvider used to override the\n-     * default FileSystemProvider\n+     * Test file system provider in exploded module on the module path.\n@@ -97,1 +102,8 @@\n-    private void createFileSystemProviderJar(Path jar, Path dir) throws IOException {\n+    @Test\n+    void testFspOnModulePath1() throws Exception {\n+        exec(SET_DEFAULT_FSP,\n+                \"-p\", TESTFSP_CLASSES,\n+                \"--add-modules\", TESTFSP,\n+                \"-cp\", TESTAPP_CLASSES,\n+                TESTAPP_MAIN);\n+    }\n@@ -99,16 +111,11 @@\n-        List<String>  args = new ArrayList<>();\n-        args.add(\"--create\");\n-        args.add(\"--file=\" + jar);\n-        try (Stream<Path> stream = Files.list(dir)) {\n-            List<String> paths = stream\n-                    .map(path -> path.getFileName().toString())\n-                    .filter(f -> f.startsWith(\"TestProvider\"))\n-                    .toList();\n-            for(var p : paths) {\n-                args.add(\"-C\");\n-                args.add(dir.toString());\n-                args.add(p);\n-            }\n-        }\n-        int ret = JAR_TOOL.run(System.out, System.out, args.toArray(new String[0]));\n-        assertEquals(ret, 0);\n+    \/**\n+     * Test file system provider in modular JAR on the module path.\n+     *\/\n+    @Test\n+    void testFspOnModulePath2() throws Exception {\n+        String jarFile = createJar(\"fsp.jar\", TESTFSP_CLASSES);\n+        exec(SET_DEFAULT_FSP,\n+                \"-p\", jarFile,\n+                \"--add-modules\", TESTFSP,\n+                \"-cp\", TESTAPP_CLASSES,\n+                TESTAPP_MAIN);\n@@ -118,2 +125,1 @@\n-     * Test override of default FileSystemProvider with the main application\n-     * on the module path as an exploded module.\n+     * Test file system provider linked into run-time image.\n@@ -121,4 +127,26 @@\n-    public void testExplodedModule() throws Exception {\n-        String modulePath = System.getProperty(\"jdk.module.path\");\n-        int exitValue = exec(SET_DEFAULT_FSP, \"-p\", modulePath, \"-m\", \"m\/p.Main\");\n-        assertEquals(exitValue, 0);\n+    @Disabled\n+    @Test\n+    void testFspInRuntimeImage() throws Exception {\n+        String image = \"image\";\n+\n+        ToolProvider jlink = ToolProvider.findFirst(\"jlink\").orElseThrow();\n+        String[] jlinkCmd = {\n+                \"--module-path\", TESTFSP_CLASSES,\n+                \"--add-modules\", TESTFSP,\n+                \"--output\", image\n+        };\n+        int exitCode = jlink.run(System.out, System.err, jlinkCmd);\n+        assertEquals(0, exitCode);\n+\n+        String[] javaCmd = {\n+                Path.of(image, \"bin\", \"java\").toString(),\n+                SET_DEFAULT_FSP,\n+                \"--add-modules\", TESTFSP,\n+                \"-cp\", TESTAPP_CLASSES,\n+                TESTAPP_MAIN\n+        };\n+        var pb = new ProcessBuilder(javaCmd);\n+        ProcessTools.executeProcess(pb)\n+                .outputTo(System.out)\n+                .errorTo(System.err)\n+                .shouldHaveExitValue(0);\n@@ -128,2 +156,1 @@\n-     * Test override of default FileSystemProvider with the main application\n-     * on the module path as a modular JAR.\n+     * Test file system provider on class path, application in exploded module on module path.\n@@ -131,4 +158,6 @@\n-    public void testModularJar() throws Exception {\n-        String jarFile = createModularJar();\n-        int exitValue = exec(SET_DEFAULT_FSP, \"-p\", jarFile, \"-m\", \"m\/p.Main\");\n-        assertEquals(exitValue, 0);\n+    @Test\n+    void testAppOnModulePath1() throws Exception {\n+        exec(SET_DEFAULT_FSP,\n+                \"-p\", TESTAPP_CLASSES,\n+                \"-cp\", TESTFSP_CLASSES,\n+                \"-m\", TESTAPP + \"\/\" + TESTAPP_MAIN);\n@@ -138,2 +167,1 @@\n-     * Test override of default FileSystemProvider where the main application\n-     * is a module that is patched by an exploded patch.\n+     * Test file system provider on class path, application in modular JAR on module path.\n@@ -141,1 +169,15 @@\n-    public void testExplodedModuleWithExplodedPatch() throws Exception {\n+    @Test\n+    void testAppOnModulePath2() throws Exception {\n+        String jarFile = createJar(\"testapp.jar\", TESTAPP_CLASSES);\n+        exec(SET_DEFAULT_FSP,\n+                \"-cp\", TESTFSP_CLASSES,\n+                \"-p\", jarFile,\n+                \"-m\", TESTAPP + \"\/\" + TESTAPP_MAIN);\n+    }\n+\n+    \/**\n+     * Test file system provider on class path, application in modular JAR on module path\n+     * that is patched with exploded patch.\n+     *\/\n+    @Test\n+    void testPatchedAppOnModulePath1() throws Exception {\n@@ -143,6 +185,6 @@\n-        String modulePath = System.getProperty(\"jdk.module.path\");\n-        int exitValue = exec(SET_DEFAULT_FSP,\n-                             \"--patch-module\", \"m=\" + patchdir,\n-                             \"-p\", modulePath,\n-                             \"-m\", \"m\/p.Main\");\n-        assertEquals(exitValue, 0);\n+        Files.createFile(patchdir.resolve(\"aoo.properties\"));\n+        exec(SET_DEFAULT_FSP,\n+                \"--patch-module\", TESTAPP + \"=\" + patchdir,\n+                \"-p\", TESTAPP_CLASSES,\n+                \"-cp\", TESTFSP_CLASSES,\n+                \"-m\", TESTAPP + \"\/\" + TESTAPP_MAIN);\n@@ -152,2 +194,2 @@\n-     * Test override of default FileSystemProvider where the main application\n-     * is a module that is patched by an exploded patch.\n+     * Test file system provider on class path, application in modular JAR on module path\n+     * that is patched with patch in JAR file.\n@@ -155,1 +197,2 @@\n-    public void testExplodedModuleWithJarPatch() throws Exception {\n+    @Test\n+    void testPatchedAppOnModulePath2() throws Exception {\n@@ -157,8 +200,7 @@\n-        Files.createDirectory(patchdir.resolve(\"m.properties\"));\n-        Path patch = createJarFile(patchdir);\n-        String modulePath = System.getProperty(\"jdk.module.path\");\n-        int exitValue = exec(SET_DEFAULT_FSP,\n-                             \"--patch-module\", \"m=\" + patch,\n-                             \"-p\", modulePath,\n-                             \"-m\", \"m\/p.Main\");\n-        assertEquals(exitValue, 0);\n+        Files.createFile(patchdir.resolve(\"app.properties\"));\n+        String jarFile = createJar(\"patch.jar\", patchdir.toString());\n+        exec(SET_DEFAULT_FSP,\n+                \"--patch-module\", TESTAPP + \"=\" + jarFile,\n+                \"-p\", TESTAPP_CLASSES,\n+                \"-cp\", TESTFSP_CLASSES,\n+                \"-m\", TESTAPP + \"\/\" + TESTAPP_MAIN);\n@@ -168,1 +210,1 @@\n-     * Returns the directory containing the classes for module \"m\".\n+     * Returns the directory containing the classes for the given module.\n@@ -170,1 +212,1 @@\n-    private String moduleClasses() {\n+    private static String classes(String mn) {\n@@ -172,6 +214,6 @@\n-        for (String dir : mp.split(File.pathSeparator)) {\n-            Path m = Paths.get(dir, \"m\");\n-            if (Files.exists(m)) return m.toString();\n-        }\n-        fail();\n-        return null;\n+        return Arrays.stream(mp.split(File.pathSeparator))\n+                .map(e -> Path.of(e, mn))\n+                .filter(Files::isDirectory)\n+                .findAny()\n+                .map(Path::toString)\n+                .orElseThrow();\n@@ -181,1 +223,1 @@\n-     * Creates a modular JAR containing module \"m\".\n+     * Returns a class path from the given paths.\n@@ -183,4 +225,2 @@\n-    private String createModularJar() throws Exception {\n-        Path dir = Paths.get(moduleClasses());\n-        Path jar = createJarFile(dir);\n-        return jar.toString();\n+    private String ofClasspath(String... paths) {\n+        return String.join(File.pathSeparator, paths);\n@@ -190,1 +230,1 @@\n-     * Creates a JAR file containing the entries in the given file tree.\n+     * Creates a JAR file from the contains of the given directory.\n@@ -192,4 +232,8 @@\n-    private Path createJarFile(Path dir) throws Exception {\n-        Path jar = createTempDirectory(\"tmp\").resolve(\"m.jar\");\n-        String[] args = { \"--create\", \"--file=\" + jar, \"-C\", dir.toString(), \".\" };\n-        int ret = JAR_TOOL.run(System.out, System.out, args);\n+    private String createJar(String jar, String dir) throws IOException {\n+        List<String> args = new ArrayList<>();\n+        args.add(\"--create\");\n+        args.add(\"--file=\" + jar);\n+        args.add(\"-C\");\n+        args.add(dir);\n+        args.add(\".\");\n+        int ret = JAR_TOOL.run(System.err, System.err, args.toArray(new String[0]));\n@@ -201,1 +245,1 @@\n-     * Invokes the java launcher with the given arguments, returning the exit code.\n+     * Create a temporary directory with the given prefix in the current directory.\n@@ -203,5 +247,12 @@\n-    private int exec(String... args) throws Exception {\n-       return ProcessTools.executeTestJava(args)\n-                .outputTo(System.out)\n-                .errorTo(System.out)\n-                .getExitValue();\n+    private static Path createTempDirectory(String prefix) throws IOException {\n+        return Files.createTempDirectory(Path.of(\".\"), prefix);\n+    }\n+\n+    \/**\n+     * Invokes the java launcher with the given arguments, throws if the non-0 is returned.\n+     *\/\n+    private void exec(String... args) throws Exception {\n+        ProcessTools.executeTestJava(args)\n+                .outputTo(System.err)\n+                .errorTo(System.err)\n+                .shouldHaveExitValue(0);\n","filename":"test\/jdk\/java\/nio\/file\/spi\/SetDefaultProvider.java","additions":158,"deletions":107,"binary":false,"changes":265,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,2 @@\n- * @build TestDelegation TestProvider\n- * @run testng\/othervm  TestDelegation\n+ * @compile testfsp\/testfsp\/TestProvider.java\n+ * @run testng TestDelegation\n@@ -58,1 +58,0 @@\n-\n@@ -185,1 +184,1 @@\n-    static class MyProvider extends TestProvider {\n+    static class MyProvider extends testfsp.TestProvider {\n","filename":"test\/jdk\/java\/nio\/file\/spi\/TestDelegation.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,24 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-module m {\n-}\n","filename":"test\/jdk\/java\/nio\/file\/spi\/m\/module-info.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,2 +23,1 @@\n-\n-module test {\n+module testapp {\n","filename":"test\/jdk\/java\/nio\/file\/spi\/testapp\/module-info.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/src\/test\/module-info.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-package p;\n+package testapp;\n","filename":"test\/jdk\/java\/nio\/file\/spi\/testapp\/testapp\/Main.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/nio\/file\/spi\/m\/p\/Main.java","status":"renamed"},{"patch":"@@ -23,1 +23,0 @@\n-module org.singlejar {\n@@ -25,0 +24,2 @@\n+module testfsp {\n+    exports testfsp to java.base;\n","filename":"test\/jdk\/java\/nio\/file\/spi\/testfsp\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/langtools\/tools\/jnativescan\/cases\/modules\/org.singlejar\/module-info.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+package testfsp;\n+\n","filename":"test\/jdk\/java\/nio\/file\/spi\/testfsp\/testfsp\/TestProvider.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/nio\/file\/spi\/TestProvider.java","status":"renamed"}]}