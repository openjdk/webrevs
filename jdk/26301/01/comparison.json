{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-@State(Scope.Thread)\n+@State(Scope.Benchmark)\n@@ -52,1 +52,0 @@\n-\n@@ -54,1 +53,1 @@\n-    public int numberOfClasses;\n+    static int numberOfClasses;\n@@ -57,28 +56,18 @@\n-    public int numberOfCodeSources;\n-\n-    static byte[][] compiledClasses;\n-    static Class[] loadedClasses;\n-    static String[] classNames;\n-    static int index = 0;\n-    static CodeSource[] cs;\n-\n-    static String B(int count) {\n-        return \"public class B\" + count + \" {\"\n-                + \"   static int intField;\"\n-                + \"   public static void compiledMethod() { \"\n-                + \"       intField++;\"\n-                + \"   }\"\n-                + \"}\";\n-    }\n-\n-    @Setup(Level.Trial)\n-    public void setupClasses() throws Exception {\n-        compiledClasses = new byte[numberOfClasses][];\n-        loadedClasses = new Class[numberOfClasses];\n-        classNames = new String[numberOfClasses];\n-        cs = new CodeSource[numberOfCodeSources];\n-\n-        for (int i = 0; i < numberOfCodeSources; i++) {\n-            @SuppressWarnings(\"deprecation\")\n-            URL u = new URL(\"file:\/tmp\/duke\" + i);\n-            cs[i] = new CodeSource(u, (java.security.cert.Certificate[]) null);\n+    static int numberOfCodeSources;\n+\n+    @State(Scope.Thread)\n+    public static class MyState {\n+\n+        byte[][] compiledClasses;\n+        Class[] loadedClasses;\n+        String[] classNames;\n+        int index = 0;\n+        CodeSource[] cs;\n+\n+        String B(int count, long n) {\n+            return \"public class B\" + count + n +\" {\"\n+                    + \"   static int intField;\"\n+                    + \"   public static void compiledMethod() { \"\n+                    + \"       intField++;\"\n+                    + \"   }\"\n+                    + \"}\";\n@@ -87,4 +76,14 @@\n-        for (int i = 0; i < numberOfClasses; i++) {\n-            classNames[i] = \"B\" + i;\n-            compiledClasses[i] = InMemoryJavaCompiler.compile(classNames[i], B(i));\n-        }\n+        @Setup\n+        public void setupClasses() throws Exception {\n+            compiledClasses = new byte[numberOfClasses][];\n+            loadedClasses = new Class[numberOfClasses];\n+            classNames = new String[numberOfClasses];\n+            cs = new CodeSource[numberOfCodeSources];\n+            long n = Thread.currentThread().threadId();\n+\n+            for (int i = 0; i < numberOfCodeSources; i++) {\n+                @SuppressWarnings(\"deprecation\")\n+                URL u = new URL(\"file:\/tmp\/duke\" + i);\n+                cs[i] = new CodeSource(u,\n+                        (java.security.cert.Certificate[]) null);\n+            }\n@@ -92,0 +91,6 @@\n+            for (int i = 0; i < numberOfClasses; i++) {\n+                classNames[i] = \"B\" + i + n;\n+                compiledClasses[i] =\n+                        InMemoryJavaCompiler.compile(classNames[i], B(i, n));\n+            }\n+        }\n@@ -104,5 +109,7 @@\n-        @Override\n-        protected Class<?> findClass(String name) throws ClassNotFoundException {\n-            if (name.equals(classNames[index] \/* \"B\" + index *\/)) {\n-                assert compiledClasses[index]  != null;\n-                return defineClass(name, compiledClasses[index] , 0, (compiledClasses[index]).length, cs[index % cs.length] );\n+        protected Class<?> findClass(MyState state, String name)\n+                throws ClassNotFoundException {\n+            if (name.equals(state.classNames[state.index] \/* \"B\" + index *\/)) {\n+                assert state.compiledClasses[state.index] != null;\n+                return defineClass(name, state.compiledClasses[state.index], 0,\n+                        (state.compiledClasses[state.index]).length,\n+                        state.cs[state.index % state.cs.length] );\n@@ -115,1 +122,1 @@\n-    void work() throws ClassNotFoundException {\n+    void work(MyState state) throws ClassNotFoundException {\n@@ -119,3 +126,4 @@\n-        for (index = 0; index < compiledClasses.length; index++) {\n-            Class c = loader1.findClass(classNames[index]);\n-            loadedClasses[index] = c;\n+        for (state.index = 0; state.index < state.compiledClasses.length;\n+                state.index++) {\n+            Class c = loader1.findClass(state, state.classNames[state.index]);\n+            state.loadedClasses[state.index] = c;\n@@ -127,2 +135,2 @@\n-    public void noSecurityManager()  throws ClassNotFoundException {\n-        work();\n+    public void noSecurityManager(MyState state) throws ClassNotFoundException {\n+        work(state);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/ProtectionDomainBench.java","additions":55,"deletions":47,"binary":false,"changes":102,"status":"modified"}]}