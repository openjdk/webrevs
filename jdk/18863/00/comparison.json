{"files":[{"patch":"@@ -230,2 +230,2 @@\n-    if (m.is_marked()) {\n-      forwardee = cast_to_oop(m.decode_pointer());\n+    if (obj->is_forwarded(m)) {\n+      forwardee = obj->forwardee(m);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -214,2 +214,2 @@\n-  if (m.is_marked()) {\n-    obj = cast_to_oop(m.decode_pointer());\n+  if (obj->is_forwarded(m)) {\n+    obj = obj->forwardee(m);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-  if (!m.is_marked()) {\n+  if (!o->is_forwarded(m)) {\n@@ -156,1 +156,1 @@\n-    return cast_to_oop(m.decode_pointer());\n+    return o->forwardee(m);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  assert(!m.is_marked(), \"precondition\");\n+  assert(!m.is_forwarded(), \"precondition\");\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -146,0 +146,3 @@\n+  bool is_forwarded()   const {\n+    return (mask_bits(value(), lock_mask_in_place) == marked_value);\n+  }\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -259,0 +259,1 @@\n+  inline bool is_forwarded(markWord m) const;\n@@ -269,0 +270,1 @@\n+  inline oop forwardee(markWord m) const;\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -265,3 +265,6 @@\n-  \/\/ The extra heap check is needed since the obj might be locked, in which case the\n-  \/\/ mark would point to a stack location and have the sentinel bit cleared\n-  return mark().is_marked();\n+  return is_forwarded(mark());\n+}\n+\n+\/\/ Non-racy version.\n+bool oopDesc::is_forwarded(markWord m) const {\n+  return m.is_forwarded();\n@@ -292,2 +295,6 @@\n-  assert(is_forwarded(), \"only decode when actually forwarded\");\n-  return cast_to_oop(mark().decode_pointer());\n+  return forwardee(mark());\n+}\n+\n+oop oopDesc::forwardee(markWord m) const {\n+  assert(is_forwarded(m), \"only decode when actually forwarded\");\n+  return cast_to_oop(m.decode_pointer());\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"}]}