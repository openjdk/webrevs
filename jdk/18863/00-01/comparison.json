{"files":[{"patch":"@@ -230,2 +230,2 @@\n-    if (obj->is_forwarded(m)) {\n-      forwardee = obj->forwardee(m);\n+    if (m.is_forwarded()) {\n+      forwardee = m.forwardee();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -214,2 +214,2 @@\n-  if (obj->is_forwarded(m)) {\n-    obj = obj->forwardee(m);\n+  if (m.is_forwarded()) {\n+    obj = m.forwardee();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-  if (!o->is_forwarded(m)) {\n+  if (!m.is_forwarded()) {\n@@ -156,1 +156,1 @@\n-    return o->forwardee(m);\n+    return m.forwardee();\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-  markWord clear_lock_bits() { return markWord(value() & ~lock_mask_in_place); }\n+  markWord clear_lock_bits() const { return markWord(value() & ~lock_mask_in_place); }\n@@ -265,1 +265,5 @@\n-  inline void* decode_pointer() { return (void*)clear_lock_bits().value(); }\n+  inline void* decode_pointer() const { return (void*)clear_lock_bits().value(); }\n+\n+  inline oop forwardee() const {\n+    return cast_to_oop(decode_pointer());\n+  }\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -259,1 +259,0 @@\n-  inline bool is_forwarded(markWord m) const;\n@@ -270,1 +269,0 @@\n-  inline oop forwardee(markWord m) const;\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -265,6 +265,1 @@\n-  return is_forwarded(mark());\n-}\n-\n-\/\/ Non-racy version.\n-bool oopDesc::is_forwarded(markWord m) const {\n-  return m.is_forwarded();\n+  return mark().is_forwarded();\n@@ -295,6 +290,1 @@\n-  return forwardee(mark());\n-}\n-\n-oop oopDesc::forwardee(markWord m) const {\n-  assert(is_forwarded(m), \"only decode when actually forwarded\");\n-  return cast_to_oop(m.decode_pointer());\n+  return mark().forwardee();\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"}]}