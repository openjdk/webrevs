[{"commit":{"message":"cleanup: formatting"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"b55d4baaab02ed394e356ff6ebfe4fff287bed51"},{"commit":{"message":"Add and use Add Wide insts instead of pairs of Extend\/Shift + Add"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"03849d62254d3bbf23b01659d8fd4a27fa1c019e"},{"commit":{"message":"cleanup: add a description for intpow()\n\nCo-authored-by: Andrew Haley <aph-open@littlepinkcloud.com>"},"files":[{"filename":"src\/hotspot\/share\/utilities\/intpow.hpp"}],"sha":"6f2bec34728f1838ae430e49a88ebd7d13dff267"},{"commit":{"message":"cleanup: explain how this deals with the correct number of leftover elements modulo vf"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"142fa5d0822910ca979de60aef62ba390365afc3"},{"commit":{"message":"cleanup: current implementation should never end up with T4H load arrangement"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"e2d1f711a093826c618242b291dc90195c027872"},{"commit":{"message":"cleanup: remove obsolete method declarations"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"}],"sha":"0a0ab92a1e6f722bc0feaaa6787d15d734fed392"},{"commit":{"message":"cleanup: hoist a common statement out of the if\/else block"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"}],"sha":"a28bbcd3bbe7555e715b107b71c18efaf72a7ce7"},{"commit":{"message":"cleanup: fix a comment typo\n\nCo-authored-by: Andrew Haley <aph-open@littlepinkcloud.com>"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"}],"sha":"b56be3770bf60cb9dd65c1c728302c491c721d45"},{"commit":{"message":"Add Assembler::load() and Assembler::store() methods"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"091eecc5c2fd809ded7484baf9fea319732d9408"},{"commit":{"message":"fixup: make Windows happy there's no potentially lossfull conversion"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"0fe8bd61d0fb649feddc2e5501f5f294b63c0b12"},{"commit":{"message":"cleanup: extend the description of lrf()\n\nCo-authored-by: Andrew Haley <aph-open@littlepinkcloud.com>"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"}],"sha":"66b07903d95427e3616a326780047f0472a20c16"},{"commit":{"message":"Add asm tests for Neon Vector - Scalar insts"},"files":[{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"132baf86e4c2418ba4e9f337612f6a38e37da777"},{"commit":{"message":"fixup: restrict Vm to V0-V15 for mulvs when esize is H"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"}],"sha":"3d7af279cd33b842ea332404005bbb54e2cd1d0b"},{"commit":{"message":"cleanup: use switch-case instead of if-else statements and ternary operators"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"a824a74263ce9309fca50a90b3d0f09e9b56a5c4"},{"commit":{"message":"Don't try align basic blocks as it brings no measurable performance benefits"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"9f4ae8554106d3e1290ee127b848d7f48952e5fb"},{"commit":{"message":"fixup: rename the newly added Vector-Scalar mulv to mulvs"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"419f39473b53099b7bd42c33380a6ccb3917ab16"},{"commit":{"message":"fixup: fix Windows build by not using RELATIVE as an identifier"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"aa1e3550cf842697bbc3d0eddebe95fb9ea6dec7"},{"commit":{"message":"Merge branch 'master' into 8322770"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"}],"sha":"f5918cca0811ccf6f0424c2498db100b77a954c5"},{"commit":{"message":"cleanup: adjust a comment in the light of the latest change"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"}],"sha":"6b8eb78c22c5f5644596d6a6a51bc143da77f41e"},{"commit":{"message":"cleanup: fix comment formatting\n\nCo-authored-by: Andrew Haley <aph-open@littlepinkcloud.com>"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"03821dfd55b9ffc45a82d2d1d1d77bb6a4f9a886"},{"commit":{"message":"Optimize both the stub and inlined parts of the implementation\n\nProcess T_CHAR\/T_SHORT elements using T8H arrangement instead of T4H.\nAdd a non-unrolled vectorized loop to the stub to handle vectorizable\ntail portions of arrays multiple to 4\/8 elements (for ints \/ other\ntypes). Make the stub process array as a whole instead of relying on\nthe inlined part to process an unvectorizable tail."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"bfa93695b7813678936d4d25ed02866353eaae81"},{"commit":{"message":"cleanup: add comments and simplify the orr ins"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"}],"sha":"31dc32813542ecd72aacf81667b7b066f577cbef"},{"commit":{"message":"cleanup: remove redundant copyright notice"},"files":[{"filename":"src\/hotspot\/share\/utilities\/intpow.hpp"}],"sha":"04119db326cff45b98f535af177b139d6082d96e"},{"commit":{"message":"cleanup: use a constexpr function for intpow instead of a templated class"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/share\/utilities\/intpow.hpp"}],"sha":"eb9708c9bec44523e256d9ea662ce2c3deac02fb"},{"commit":{"message":"cleanup: address review comments"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubRoutines_aarch64.hpp"}],"sha":"7ddae523ca474fdfda29daefa3223a916fd913a1"},{"commit":{"message":"cleanup: remove a redundant parameter"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"}],"sha":"8e9f8d0ca98569ed7d69ceaff63b1a41ca9affaf"},{"commit":{"message":"8322770: AArch64: C2: Implement VectorizedHashCode\n\nThe code to calculate a hash code consists of two parts: a stub method that\nimplements a vectorized loop using Neon instruction which processes 16 or 32\nelements per iteration depending on the data type; and an unrolled inlined\nscalar loop that processes remaining tail elements.\n\n[Performance]\n\n[[Neoverse V2]]\n```\n                                                            |  328a053 (master) |  dc2909f (this)  |\n----------------------------------------------------------------------------------------------------------\n  Benchmark                               (size)  Mode  Cnt |    Score    Error |    Score   Error | Units\n----------------------------------------------------------------------------------------------------------\n  ArraysHashCode.bytes                         1  avgt   15 |    0.805 ?  0.206 |    0.815 ? 0.141 | ns\/op\n  ArraysHashCode.bytes                        10  avgt   15 |    4.362 ?  0.013 |    3.522 ? 0.124 | ns\/op\n  ArraysHashCode.bytes                       100  avgt   15 |   78.374 ?  0.136 |   12.935 ? 0.016 | ns\/op\n  ArraysHashCode.bytes                     10000  avgt   15 | 9247.335 ? 13.691 | 1344.770 ? 1.898 | ns\/op\n  ArraysHashCode.chars                         1  avgt   15 |    0.731 ?  0.035 |    0.723 ? 0.046 | ns\/op\n  ArraysHashCode.chars                        10  avgt   15 |    4.359 ?  0.007 |    3.385 ? 0.004 | ns\/op\n  ArraysHashCode.chars                       100  avgt   15 |   78.374 ?  0.117 |   11.903 ? 0.023 | ns\/op\n  ArraysHashCode.chars                     10000  avgt   15 | 9248.328 ? 13.644 | 1344.007 ? 1.795 | ns\/op\n  ArraysHashCode.ints                          1  avgt   15 |    0.746 ?  0.083 |    0.631 ? 0.020 | ns\/op\n  ArraysHashCode.ints                         10  avgt   15 |    4.357 ?  0.009 |    3.387 ? 0.005 | ns\/op\n  ArraysHashCode.ints                        100  avgt   15 |   78.391 ?  0.103 |   10.934 ? 0.015 | ns\/op\n  ArraysHashCode.ints                      10000  avgt   15 | 9248.125 ? 12.583 | 1340.644 ? 1.869 | ns\/op\n  ArraysHashCode.multibytes                    1  avgt   15 |    0.555 ?  0.020 |    0.559 ? 0.020 | ns\/op\n  ArraysHashCode.multibytes                   10  avgt   15 |    2.681 ?  0.020 |    2.175 ? 0.045 | ns\/op\n  ArraysHashCode.multibytes                  100  avgt   15 |   36.954 ?  0.051 |   12.870 ? 0.021 | ns\/op\n  ArraysHashCode.multibytes                10000  avgt   15 | 4862.703 ?  6.909 |  720.774 ? 3.487 | ns\/op\n  ArraysHashCode.multichars                    1  avgt   15 |    0.551 ?  0.017 |    0.552 ? 0.018 | ns\/op\n  ArraysHashCode.multichars                   10  avgt   15 |    2.683 ?  0.018 |    2.182 ? 0.086 | ns\/op\n  ArraysHashCode.multichars                  100  avgt   15 |   36.988 ?  0.054 |    8.830 ? 0.013 | ns\/op\n  ArraysHashCode.multichars                10000  avgt   15 | 4862.279 ?  6.839 |  756.074 ? 6.754 | ns\/op\n  ArraysHashCode.multiints                     1  avgt   15 |    0.555 ?  0.018 |    0.557 ? 0.019 | ns\/op\n  ArraysHashCode.multiints                    10  avgt   15 |    2.689 ?  0.029 |    2.184 ? 0.074 | ns\/op\n  ArraysHashCode.multiints                   100  avgt   15 |   36.992 ?  0.044 |    8.098 ? 0.012 | ns\/op\n  ArraysHashCode.multiints                 10000  avgt   15 | 4873.863 ?  6.689 |  783.540 ? 9.151 | ns\/op\n  ArraysHashCode.multishorts                   1  avgt   15 |    0.563 ?  0.021 |    0.561 ? 0.021 | ns\/op\n  ArraysHashCode.multishorts                  10  avgt   15 |    2.679 ?  0.020 |    2.164 ? 0.054 | ns\/op\n  ArraysHashCode.multishorts                 100  avgt   15 |   36.976 ?  0.053 |    8.828 ? 0.013 | ns\/op\n  ArraysHashCode.multishorts               10000  avgt   15 | 4861.118 ?  7.057 |  748.952 ? 6.040 | ns\/op\n  ArraysHashCode.shorts                        1  avgt   15 |    0.631 ?  0.020 |    0.643 ? 0.033 | ns\/op\n  ArraysHashCode.shorts                       10  avgt   15 |    4.362 ?  0.005 |    3.400 ? 0.025 | ns\/op\n  ArraysHashCode.shorts                      100  avgt   15 |   78.324 ?  0.151 |   11.892 ? 0.017 | ns\/op\n  ArraysHashCode.shorts                    10000  avgt   15 | 9246.323 ? 13.126 | 1344.304 ? 1.906 | ns\/op\n  StringHashCode.Algorithm.defaultLatin1       1  avgt   15 |    0.946 ?  0.061 |    0.924 ? 0.001 | ns\/op\n  StringHashCode.Algorithm.defaultLatin1      10  avgt   15 |    4.334 ?  0.046 |    3.447 ? 0.051 | ns\/op\n  StringHashCode.Algorithm.defaultLatin1     100  avgt   15 |   78.136 ?  0.105 |   12.950 ? 0.048 | ns\/op\n  StringHashCode.Algorithm.defaultLatin1   10000  avgt   15 | 9266.117 ? 13.184 | 1345.097 ? 1.963 | ns\/op\n  StringHashCode.Algorithm.defaultUTF16        1  avgt   15 |    0.692 ?  0.035 |    0.687 ? 0.034 | ns\/op\n  StringHashCode.Algorithm.defaultUTF16       10  avgt   15 |    4.323 ?  0.023 |    3.394 ? 0.015 | ns\/op\n  StringHashCode.Algorithm.defaultUTF16      100  avgt   15 |   78.317 ?  0.109 |   11.911 ? 0.017 | ns\/op\n  StringHashCode.Algorithm.defaultUTF16    10000  avgt   15 | 9249.620 ? 14.594 | 1344.533 ? 1.908 | ns\/op\n  StringHashCode.cached                      N\/A  avgt   15 |    0.518 ?  0.017 |    0.530 ? 0.031 | ns\/op\n  StringHashCode.empty                       N\/A  avgt   15 |    0.733 ?  0.086 |    0.849 ? 0.168 | ns\/op\n  StringHashCode.notCached                   N\/A  avgt   15 |    0.687 ?  0.084 |    0.630 ? 0.018 | ns\/op\n```\n\n[Test]\n\njtreg::tier1 passed on AArch64 and x86."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubRoutines_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/stubRoutines_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"},{"filename":"src\/hotspot\/share\/utilities\/intpow.hpp"}],"sha":"4c6812f63bf9a6d5cf17c7899fe4a77e390c1645"}]