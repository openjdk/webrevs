{"files":[{"patch":"@@ -2885,1 +2885,1 @@\n-  INSN(mulv, 0, 0b1000);\n+  INSN(mulvs, 0, 0b1000);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  Label TAIL, STUB_SWITCH, STUB_SWITCH_OUT, LOOP, RELATIVE, LARGE, DONE;\n+  Label TAIL, STUB_SWITCH, STUB_SWITCH_OUT, LOOP, BR_BASE, LARGE, DONE;\n@@ -105,1 +105,1 @@\n-  adr(tmp1, RELATIVE);\n+  adr(tmp1, BR_BASE);\n@@ -115,1 +115,1 @@\n-  bind(RELATIVE);\n+  bind(BR_BASE);\n@@ -127,1 +127,1 @@\n-    DEBUG_ONLY(reset_labels(TAIL, RELATIVE));\n+    DEBUG_ONLY(reset_labels(TAIL, BR_BASE));\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -5355,1 +5355,1 @@\n-    Label SMALL_LOOP, LARGE_LOOP_PREHEADER, LARGE_LOOP, TAIL, TAIL_SHORTCUT, RELATIVE;\n+    Label SMALL_LOOP, LARGE_LOOP_PREHEADER, LARGE_LOOP, TAIL, TAIL_SHORTCUT, BR_BASE;\n@@ -5357,6 +5357,24 @@\n-    \/\/ Vectorization factor\n-    const size_t vf = eltype == T_BOOLEAN || eltype == T_BYTE ? 8\n-                      : eltype == T_CHAR || eltype == T_SHORT ? 8\n-                      : eltype == T_INT                       ? 4\n-                                                              : 0;\n-    guarantee(vf, \"unsupported eltype\");\n+    size_t vf; \/\/ vectorization factor\n+    int multiply_by_halves;\n+    Assembler::SIMD_Arrangement load_arrangement;\n+    switch (eltype) {\n+    case T_BOOLEAN:\n+    case T_BYTE:\n+      load_arrangement = Assembler::T8B;\n+      multiply_by_halves = true;\n+      vf = 8;\n+      break;\n+    case T_CHAR:\n+    case T_SHORT:\n+      load_arrangement = Assembler::T8H;\n+      multiply_by_halves = true;\n+      vf = 8;\n+      break;\n+    case T_INT:\n+      load_arrangement = Assembler::T4S;\n+      multiply_by_halves = false;\n+      vf = 4;\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+    }\n@@ -5399,20 +5417,0 @@\n-    Assembler::SIMD_Arrangement load_arrangement =\n-        eltype == T_BOOLEAN || eltype == T_BYTE ? Assembler::T8B\n-        : eltype == T_CHAR || eltype == T_SHORT ? Assembler::T8H\n-        : eltype == T_INT                       ? Assembler::T4S\n-                                                : Assembler::INVALID_ARRANGEMENT;\n-    guarantee(load_arrangement != Assembler::INVALID_ARRANGEMENT, \"invalid arrangement\");\n-\n-    const int multiply_by_halves =\n-        load_arrangement == Assembler::T4S || load_arrangement == Assembler::T4H   ? false\n-        : load_arrangement == Assembler::T8B || load_arrangement == Assembler::T8H ? true\n-                                                                                   : -1;\n-    guarantee(multiply_by_halves != -1, \"unknown multiplication algorithm\");\n-\n-    const int small_loop_size = load_arrangement == Assembler::T4S   ? 20  \/\/ 5 insts\n-                                : load_arrangement == Assembler::T4H ? 24  \/\/ 6 insts\n-                                : load_arrangement == Assembler::T8H ? 36  \/\/ 9 insts\n-                                : load_arrangement == Assembler::T8B ? 40  \/\/ 10 insts\n-                                                                     : -1; \/\/ invalid\n-    guarantee(small_loop_size != -1, \"invalid small_loop_size\");\n-\n@@ -5440,5 +5438,1 @@\n-    if (small_loop_size % 32 > 32 - __ offset() % 32) {\n-      __ align(32);\n-    }\n-\n-    auto start = __ offset();\n+    \/\/ SMALL LOOP\n@@ -5448,1 +5442,1 @@\n-    __ mulv(vmul0, Assembler::T4S, vmul0, vpowm, 0);\n+    __ mulvs(vmul0, Assembler::T4S, vmul0, vpowm, 0);\n@@ -5462,1 +5456,2 @@\n-    if (load_arrangement == Assembler::T4S) {\n+    switch (load_arrangement) {\n+    case Assembler::T4S:\n@@ -5464,2 +5459,4 @@\n-    } else if (load_arrangement == Assembler::T8B || load_arrangement == Assembler::T4H ||\n-               load_arrangement == Assembler::T8H) {\n+      break;\n+    case Assembler::T8B:\n+    case Assembler::T4H:\n+    case Assembler::T8H:\n@@ -5473,1 +5470,2 @@\n-    } else {\n+      break;\n+    default:\n@@ -5479,1 +5477,1 @@\n-      __ mulv(vmul0, Assembler::T4S, vmul0, vpowm, 0);\n+      __ mulvs(vmul0, Assembler::T4S, vmul0, vpowm, 0);\n@@ -5489,1 +5487,0 @@\n-    guarantee(__ offset() - start == small_loop_size, \"Incorrect small_loop_size\");\n@@ -5492,1 +5489,0 @@\n-\n@@ -5501,6 +5497,0 @@\n-\n-    const int tail_size = (8 + (vf - 1) * 2) * 4; \/\/ 14 or 22 insts\n-    if (tail_size % 32 > 32 - __ offset() % 32) {\n-      __ align(32);\n-    }\n-\n@@ -5508,1 +5498,1 @@\n-    start = __ offset();\n+\n@@ -5512,1 +5502,1 @@\n-    __ adr(rscratch1, RELATIVE);\n+    __ adr(rscratch1, BR_BASE);\n@@ -5522,1 +5512,1 @@\n-    __ bind(RELATIVE);\n+    __ bind(BR_BASE);\n@@ -5526,1 +5516,0 @@\n-    guarantee(__ offset() - start == tail_size, \"unexptected size of the tail code block\");\n@@ -5529,2 +5518,0 @@\n-\n-    __ align(32);\n@@ -5552,12 +5539,0 @@\n-    const int large_loop_size = load_arrangement == Assembler::T4S   ? 44  \/\/ 11 insts\n-                                : load_arrangement == Assembler::T4H ? 60  \/\/ 15 insts\n-                                : load_arrangement == Assembler::T8H ? 108 \/\/ 27 insts\n-                                : load_arrangement == Assembler::T8B ? 124 \/\/ 31 insts\n-                                                                     : -1; \/\/ invalid\n-    guarantee(large_loop_size != -1, \"invalid small_loop_size\");\n-\n-    if (large_loop_size % 32 > 32 - __ offset() % 32) {\n-      __ align(32);\n-    }\n-\n-    start = __ offset();\n@@ -5566,4 +5541,4 @@\n-    __ mulv(vmul3, Assembler::T4S, vmul3, vpowm, 0);\n-    __ mulv(vmul2, Assembler::T4S, vmul2, vpowm, 0);\n-    __ mulv(vmul1, Assembler::T4S, vmul1, vpowm, 0);\n-    __ mulv(vmul0, Assembler::T4S, vmul0, vpowm, 0);\n+    __ mulvs(vmul3, Assembler::T4S, vmul3, vpowm, 0);\n+    __ mulvs(vmul2, Assembler::T4S, vmul2, vpowm, 0);\n+    __ mulvs(vmul1, Assembler::T4S, vmul1, vpowm, 0);\n+    __ mulvs(vmul0, Assembler::T4S, vmul0, vpowm, 0);\n@@ -5591,1 +5566,2 @@\n-    if (load_arrangement == Assembler::T4S) {\n+    switch (load_arrangement) {\n+    case Assembler::T4S:\n@@ -5596,2 +5572,4 @@\n-    } else if (load_arrangement == Assembler::T8B || load_arrangement == Assembler::T4H ||\n-               load_arrangement == Assembler::T8H) {\n+      break;\n+    case Assembler::T8B:\n+    case Assembler::T4H:\n+    case Assembler::T8H:\n@@ -5614,1 +5592,2 @@\n-    } else {\n+      break;\n+    default:\n@@ -5620,4 +5599,4 @@\n-      __ mulv(vmul3, Assembler::T4S, vmul3, vpowm, 1);\n-      __ mulv(vmul2, Assembler::T4S, vmul2, vpowm, 1);\n-      __ mulv(vmul1, Assembler::T4S, vmul1, vpowm, 1);\n-      __ mulv(vmul0, Assembler::T4S, vmul0, vpowm, 1);\n+      __ mulvs(vmul3, Assembler::T4S, vmul3, vpowm, 1);\n+      __ mulvs(vmul2, Assembler::T4S, vmul2, vpowm, 1);\n+      __ mulvs(vmul1, Assembler::T4S, vmul1, vpowm, 1);\n+      __ mulvs(vmul0, Assembler::T4S, vmul0, vpowm, 1);\n@@ -5643,1 +5622,0 @@\n-    guarantee(__ offset() - start == large_loop_size, \"Incorrect large_loop_size\");\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":55,"deletions":77,"binary":false,"changes":132,"status":"modified"}]}