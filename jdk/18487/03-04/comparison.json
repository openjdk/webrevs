{"files":[{"patch":"@@ -5379,1 +5379,1 @@\n-      __ movw(rscratch1, intpow<uint32_t, 31, 16>::value);\n+      __ movw(rscratch1, intpow(31U, 16));\n@@ -5383,1 +5383,1 @@\n-      __ movw(rscratch1, intpow<uint32_t, 31, 4>::value);\n+      __ movw(rscratch1, intpow(31U, 4));\n@@ -5386,1 +5386,1 @@\n-      __ movw(rscratch1, intpow<uint32_t, 31, 28>::value);\n+      __ movw(rscratch1, intpow(31U, 28));\n@@ -5478,2 +5478,2 @@\n-    __ movw(rscratch1, intpow<uint32_t, 31, 3>::value);\n-    __ movw(rscratch2, intpow<uint32_t, 31, 2>::value);\n+    __ movw(rscratch1, intpow(31U, 3));\n+    __ movw(rscratch2, intpow(31U, 2));\n@@ -5482,2 +5482,2 @@\n-    __ movw(rscratch1, intpow<uint32_t, 31, 1>::value);\n-    __ movw(rscratch2, intpow<uint32_t, 31, 0>::value);\n+    __ movw(rscratch1, intpow(31U, 1));\n+    __ movw(rscratch2, intpow(31U, 0));\n@@ -5493,1 +5493,1 @@\n-      __ movw(rscratch1, intpow<uint32_t, 31, 4>::value);\n+      __ movw(rscratch1, intpow(31U, 4));\n@@ -5497,1 +5497,1 @@\n-      __ movw(rscratch1, intpow<uint32_t, 31, 8>::value);\n+      __ movw(rscratch1, intpow(31U, 8));\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,4 +33,5 @@\n-template <typename T, T v, unsigned p, bool no_overflow = false,\n-          typename = std::enable_if_t<std::is_integral<T>::value && std::is_unsigned<T>::value>>\n-struct intpow {\n-  static_assert(v || p, \"0^0 is not defined\");\n+template <typename T, ENABLE_IF(std::is_integral<T>::value && std::is_unsigned<T>::value)>\n+static constexpr T intpow(T v, unsigned p) {\n+  if (p == 0) {\n+    return 1;\n+  }\n@@ -38,1 +39,0 @@\n- private:\n@@ -40,2 +40,2 @@\n-  static const T _a = intpow<T, v, p \/ 2, no_overflow>::value;\n-  static const T _b = (p % 2) ? v : 1;\n+  T a = intpow(v, p \/ 2);\n+  T b = (p % 2) ? v : 1;\n@@ -43,2 +43,2 @@\n-  static_assert(!no_overflow || _a <= std::numeric_limits<T>::max() \/ _a, \"Integer overflow\");\n-  static_assert(!no_overflow || _a * _a <= std::numeric_limits<T>::max() \/ _b, \"Integer overflow\");\n+  return a * a * b;\n+}\n@@ -46,13 +46,0 @@\n- public:\n-  static const T value = _a * _a * _b;\n-};\n-\n-template <typename T, T v, bool no_overflow>\n-struct intpow<T, v, 0, no_overflow> {\n-  static const T value = 1;\n-};\n-\n-template <typename T, T v, bool no_overflow>\n-struct intpow<T, v, 1, no_overflow> {\n-  static const T value = v;\n-};\n","filename":"src\/hotspot\/share\/utilities\/intpow.hpp","additions":9,"deletions":22,"binary":false,"changes":31,"status":"modified"}]}