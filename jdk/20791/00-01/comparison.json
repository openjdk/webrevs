{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import java.awt.Dimension;\n@@ -27,2 +28,0 @@\n-import java.awt.SecondaryLoop;\n-import java.awt.Toolkit;\n@@ -30,1 +29,1 @@\n-import java.util.concurrent.CountDownLatch;\n+\n@@ -34,7 +33,3 @@\n-\n-import static javax.swing.SwingUtilities.convertPointToScreen;\n-import static javax.swing.SwingUtilities.invokeLater;\n-import static javax.swing.UIManager.getLookAndFeel;\n-import static javax.swing.UIManager.getInstalledLookAndFeels;\n-import static javax.swing.UIManager.LookAndFeelInfo;\n-import static javax.swing.UIManager.setLookAndFeel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n@@ -49,1 +44,1 @@\n-public class Test8007563 implements Runnable {\n+public class Test8007563 {\n@@ -51,3 +46,5 @@\n-    private static final LookAndFeelInfo[] INFO = getInstalledLookAndFeels();\n-    private static final CountDownLatch LATCH = new CountDownLatch(INFO.length);\n-    private static Robot ROBOT;\n+    private static JFrame frame;\n+    private static JTabbedPane pane;\n+    private static Robot robot;\n+    private static volatile Dimension dim;\n+    private static volatile Point loc;\n@@ -56,3 +53,38 @@\n-        ROBOT = new Robot();\n-        invokeLater(new Test8007563());\n-        LATCH.await();\n+        robot = new Robot();\n+        robot.setAutoDelay(200);\n+\n+        for (UIManager.LookAndFeelInfo laf :\n+                UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Testing: \" + laf.getName());\n+            setLookAndFeel(laf);\n+\n+            try {\n+                SwingUtilities.invokeAndWait(Test8007563::createAndShowUI);\n+                robot.waitForIdle();\n+                robot.delay(500);\n+\n+                SwingUtilities.invokeAndWait(() -> {\n+                    loc = pane.getLocationOnScreen();\n+                    dim = pane.getSize();\n+                });\n+\n+                loc = new Point(loc.x + dim.width - 2, loc.y + 2);\n+                doTesting(loc, laf);\n+\n+                if (!pane.isOpaque()) {\n+                    pane.setOpaque(true);\n+                    pane.repaint();\n+                }\n+                robot.waitForIdle();\n+                robot.delay(500);\n+\n+                doTesting(loc, laf);\n+\n+            } finally {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    if (frame != null) {\n+                        frame.dispose();\n+                    }\n+                });\n+            }\n+        }\n@@ -60,1 +92,1 @@\n-            throw new Error(LIST.toString());\n+            throw new RuntimeException(LIST.toString());\n@@ -64,2 +96,9 @@\n-    private static void addOpaqueError(boolean opaque) {\n-        LIST.add(getLookAndFeel().getName() + \" opaque=\" + opaque);\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LAF: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -68,11 +107,6 @@\n-    private static boolean updateLookAndFeel() {\n-        int index = (int) LATCH.getCount() - 1;\n-        if (index >= 0) {\n-            try {\n-                LookAndFeelInfo info = INFO[index];\n-                System.out.println(\"L&F: \" + info.getName());\n-                setLookAndFeel(info.getClassName());\n-                return true;\n-            } catch (Exception exception) {\n-                exception.printStackTrace();\n-            }\n+    private static void createAndShowUI() {\n+        pane = new JTabbedPane();\n+        pane.setOpaque(false);\n+        pane.setBackground(Color.RED);\n+        for (int i = 0; i < 3; i++) {\n+            pane.addTab(\"Tab \" + i, new JLabel(\"Content area \" + i));\n@@ -80,1 +114,7 @@\n-        return false;\n+        frame = new JFrame(\"Test Background Color\");\n+        frame.getContentPane().setBackground(Color.BLUE);\n+        frame.add(pane);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.setSize(400, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n@@ -83,43 +123,6 @@\n-    private JFrame frame;\n-    private JTabbedPane pane;\n-\n-    public void run() {\n-        if (this.frame == null) {\n-            if (!updateLookAndFeel()) {\n-                return;\n-            }\n-            this.pane = new JTabbedPane();\n-            this.pane.setOpaque(false);\n-            this.pane.setBackground(Color.RED);\n-            for (int i = 0; i < 3; i++) {\n-                this.pane.addTab(\"Tab \" + i, new JLabel(\"Content area \" + i));\n-            }\n-            this.frame = new JFrame(getClass().getSimpleName());\n-            this.frame.getContentPane().setBackground(Color.BLUE);\n-            this.frame.add(this.pane);\n-            this.frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n-            this.frame.setSize(400, 200);\n-            this.frame.setLocationRelativeTo(null);\n-            this.frame.setVisible(true);\n-        } else {\n-            Point point = new Point(this.pane.getWidth() - 2, 2);\n-            convertPointToScreen(point, this.pane);\n-            Color actual = ROBOT.getPixelColor(point.x, point.y);\n-\n-            boolean opaque = this.pane.isOpaque();\n-            Color expected = opaque\n-                    ? this.pane.getBackground()\n-                    : this.frame.getContentPane().getBackground();\n-\n-            if (!expected.equals(actual)){\n-                addOpaqueError(opaque);\n-            }\n-            if (!opaque) {\n-                this.pane.setOpaque(true);\n-                this.pane.repaint();\n-            } else {\n-                this.frame.dispose();\n-                this.frame = null;\n-                this.pane = null;\n-                LATCH.countDown();\n-            }\n+    private static void doTesting(Point p, UIManager.LookAndFeelInfo laf) {\n+        boolean isOpaque = pane.isOpaque();\n+        Color actual = robot.getPixelColor(p.x, p.y);\n+        Color expected = isOpaque\n+                ? pane.getBackground()\n+                : frame.getContentPane().getBackground();\n@@ -127,0 +130,2 @@\n+        if (!expected.equals(actual)) {\n+            addOpaqueError(laf.getName(), isOpaque);\n@@ -128,15 +133,4 @@\n-        SecondaryLoop secondaryLoop =\n-                Toolkit.getDefaultToolkit().getSystemEventQueue()\n-                        .createSecondaryLoop();\n-        new Thread() {\n-            @Override\n-            public void run() {\n-                try {\n-                    Thread.sleep(500);\n-                } catch (InterruptedException e) {\n-                }\n-                secondaryLoop.exit();\n-                invokeLater(Test8007563.this);\n-            }\n-        }.start();\n-        secondaryLoop.enter();\n+    }\n+\n+    private static void addOpaqueError(String lafName, boolean opaque) {\n+        LIST.add(lafName + \" opaque=\" + opaque);\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/Test8007563.java","additions":84,"deletions":90,"binary":false,"changes":174,"status":"modified"}]}