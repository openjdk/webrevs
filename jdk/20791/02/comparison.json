{"files":[{"patch":"@@ -662,1 +662,0 @@\n-javax\/swing\/JTabbedPane\/8007563\/Test8007563.java 8051591 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.*;\n-import java.util.ArrayList;\n-import java.util.concurrent.CountDownLatch;\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JTabbedPane;\n-\n-import static javax.swing.UIManager.*;\n-import static javax.swing.SwingUtilities.*;\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 8007563\n- * @summary Tests JTabbedPane background\n- * @author Sergey Malenkov\n- *\/\n-\n-public class Test8007563 implements Runnable {\n-    private static final ArrayList<String> LIST = new ArrayList<>();\n-    private static final LookAndFeelInfo[] INFO = getInstalledLookAndFeels();\n-    private static final CountDownLatch LATCH = new CountDownLatch(INFO.length);\n-    private static Robot ROBOT;\n-\n-    public static void main(String[] args) throws Exception {\n-        ROBOT = new Robot();\n-        invokeLater(new Test8007563());\n-        LATCH.await();\n-        if (!LIST.isEmpty()) {\n-            throw new Error(LIST.toString());\n-        }\n-    }\n-\n-    private static void addOpaqueError(boolean opaque) {\n-        LIST.add(getLookAndFeel().getName() + \" opaque=\" + opaque);\n-    }\n-\n-    private static boolean updateLookAndFeel() {\n-        int index = (int) LATCH.getCount() - 1;\n-        if (index >= 0) {\n-            try {\n-                LookAndFeelInfo info = INFO[index];\n-                System.err.println(\"L&F: \" + info.getName());\n-                setLookAndFeel(info.getClassName());\n-                return true;\n-            } catch (Exception exception) {\n-                exception.printStackTrace();\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private JFrame frame;\n-    private JTabbedPane pane;\n-\n-    public void run() {\n-        if (this.frame == null) {\n-            if (!updateLookAndFeel()) {\n-                return;\n-            }\n-            this.pane = new JTabbedPane();\n-            this.pane.setOpaque(false);\n-            this.pane.setBackground(Color.RED);\n-            for (int i = 0; i < 3; i++) {\n-                this.pane.addTab(\"Tab \" + i, new JLabel(\"Content area \" + i));\n-            }\n-            this.frame = new JFrame(getClass().getSimpleName());\n-            this.frame.getContentPane().setBackground(Color.BLUE);\n-            this.frame.add(this.pane);\n-            this.frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n-            this.frame.setSize(400, 200);\n-            this.frame.setLocationRelativeTo(null);\n-            this.frame.setVisible(true);\n-        } else {\n-            Point point = new Point(this.pane.getWidth() - 2, 2);\n-            convertPointToScreen(point, this.pane);\n-            Color actual = ROBOT.getPixelColor(point.x, point.y);\n-\n-            boolean opaque = this.pane.isOpaque();\n-            Color expected = opaque\n-                    ? this.pane.getBackground()\n-                    : this.frame.getContentPane().getBackground();\n-\n-            if (!expected.equals(actual)){\n-                addOpaqueError(opaque);\n-            }\n-            if (!opaque) {\n-                this.pane.setOpaque(true);\n-                this.pane.repaint();\n-            } else {\n-                this.frame.dispose();\n-                this.frame = null;\n-                this.pane = null;\n-                LATCH.countDown();\n-            }\n-\n-        }\n-        SecondaryLoop secondaryLoop =\n-                Toolkit.getDefaultToolkit().getSystemEventQueue()\n-                        .createSecondaryLoop();\n-        new Thread() {\n-            @Override\n-            public void run() {\n-                try {\n-                    Thread.sleep(200);\n-                } catch (InterruptedException e) {\n-                }\n-                secondaryLoop.exit();\n-                invokeLater(Test8007563.this);\n-            }\n-        }.start();\n-        secondaryLoop.enter();\n-    }\n-}\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/8007563\/Test8007563.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.util.ArrayList;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8007563\n+ * @summary Tests JTabbedPane background\n+ *\/\n+\n+public class TestJTabbedPaneBackgroundColor {\n+    private static final ArrayList<String> LIST = new ArrayList<>();\n+    private static JFrame frame;\n+    private static JTabbedPane pane;\n+    private static Robot robot;\n+    private static volatile Dimension dim;\n+    private static volatile Point loc;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(200);\n+\n+        for (UIManager.LookAndFeelInfo laf :\n+                UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Testing: \" + laf.getName());\n+            setLookAndFeel(laf);\n+\n+            try {\n+                SwingUtilities.invokeAndWait(TestJTabbedPaneBackgroundColor::createAndShowUI);\n+                robot.waitForIdle();\n+                robot.delay(500);\n+\n+                SwingUtilities.invokeAndWait(() -> {\n+                    loc = pane.getLocationOnScreen();\n+                    dim = pane.getSize();\n+                });\n+\n+                loc = new Point(loc.x + dim.width - 2, loc.y + 2);\n+                doTesting(loc, laf);\n+\n+                if (!pane.isOpaque()) {\n+                    pane.setOpaque(true);\n+                    pane.repaint();\n+                }\n+                robot.waitForIdle();\n+                robot.delay(500);\n+\n+                doTesting(loc, laf);\n+\n+            } finally {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    if (frame != null) {\n+                        frame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+        if (!LIST.isEmpty()) {\n+            throw new RuntimeException(LIST.toString());\n+        }\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported LAF: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        pane = new JTabbedPane();\n+        pane.setOpaque(false);\n+        pane.setBackground(Color.RED);\n+        for (int i = 0; i < 3; i++) {\n+            pane.addTab(\"Tab \" + i, new JLabel(\"Content area \" + i));\n+        }\n+        frame = new JFrame(\"Test Background Color\");\n+        frame.getContentPane().setBackground(Color.BLUE);\n+        frame.add(pane);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.setSize(400, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void doTesting(Point p, UIManager.LookAndFeelInfo laf) {\n+        boolean isOpaque = pane.isOpaque();\n+        Color actual = robot.getPixelColor(p.x, p.y);\n+        Color expected = isOpaque\n+                ? pane.getBackground()\n+                : frame.getContentPane().getBackground();\n+\n+        if (!expected.equals(actual)) {\n+            addOpaqueError(laf.getName(), isOpaque);\n+        }\n+    }\n+\n+    private static void addOpaqueError(String lafName, boolean opaque) {\n+        LIST.add(lafName + \" opaque=\" + opaque);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/TestJTabbedPaneBackgroundColor.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}