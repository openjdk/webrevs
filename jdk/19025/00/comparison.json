{"files":[{"patch":"@@ -612,17 +612,1 @@\n-    if (caller != nullptr) {\n-      stringStream bciStream;\n-      ciMethod* last = nullptr;\n-      int last_bci;\n-      while(caller) {\n-        if (caller->has_method()) {\n-          last = caller->method();\n-          last_bci = caller->bci();\n-        }\n-        bciStream.print(\"%d \", caller->bci());\n-        caller = caller->caller();\n-      }\n-      print_prop(\"bci\", bciStream.freeze());\n-      if (last != nullptr && last->has_linenumber_table() && last_bci >= 0) {\n-        print_prop(\"line\", last->line_number_from_bci(last_bci));\n-      }\n-    }\n+    print_bci_and_line_number(caller);\n@@ -657,0 +641,29 @@\n+void IdealGraphPrinter::print_bci_and_line_number(JVMState* caller) {\n+  if (caller != nullptr) {\n+    ResourceMark rm;\n+    stringStream bciStream;\n+    stringStream lineStream;\n+\n+    \/\/ Print line and bci numbers for the callee and all entries in the call stack until we reach the root method.\n+    while (caller) {\n+      const int bci = caller->bci();\n+      bool appended_line = false;\n+      if (caller->has_method()) {\n+        ciMethod* method = caller->method();\n+        if (method->has_linenumber_table() && bci >= 0) {\n+          lineStream.print(\"%d \", method->line_number_from_bci(bci));\n+          appended_line = true;\n+        }\n+      }\n+      if (!appended_line) {\n+        lineStream.print(\"%s \", \"_\");\n+      }\n+      bciStream.print(\"%d \", bci);\n+      caller = caller->caller();\n+    }\n+\n+    print_prop(\"bci\", bciStream.freeze());\n+    print_prop(\"line\", lineStream.freeze());\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":30,"deletions":17,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+class JVMState;\n@@ -99,3 +100,4 @@\n-  void print_method(ciMethod *method, int bci, InlineTree *tree);\n-  void print_inline_tree(InlineTree *tree);\n-  void visit_node(Node *n, bool edges, VectorSet* temp_set);\n+  void print_method(ciMethod* method, int bci, InlineTree* tree);\n+  void print_inline_tree(InlineTree* tree);\n+  void visit_node(Node* n, bool edges, VectorSet* temp_set);\n+  void print_bci_and_line_number(JVMState* caller);\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}