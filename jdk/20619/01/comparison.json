{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -189,2 +189,2 @@\n- * The following is an example doclet that displays information of a class\n- * and its members, supporting an option.\n+ * The following is an example doclet that displays name of a class\n+ * and its source file, supporting an option.\n@@ -192,1 +192,1 @@\n- * {@snippet lang=java id=\"Example.java\" :\n+ * {@snippet lang = java id = \"Example.java\":\n@@ -194,1 +194,0 @@\n- * import com.sun.source.doctree.DocCommentTree;\n@@ -196,0 +195,1 @@\n+ * import com.sun.source.util.TreePath;\n@@ -203,4 +203,2 @@\n- * import javax.lang.model.util.ElementFilter;\n- * import javax.tools.Diagnostic.Kind;\n- * import java.io.IOException;\n- * import java.io.PrintWriter;\n+ * import javax.tools.Diagnostic;\n+ * import javax.tools.JavaFileObject;\n@@ -213,0 +211,2 @@\n+ * \/\/ A minimal doclet that displays the class name, the associated source file\n+ * \/\/ (if available), and the class kind for any types that it encounters.\n@@ -214,52 +214,0 @@\n- *     private Reporter reporter;\n- *     private PrintWriter stdout;\n- *\n- *     @Override\n- *     public void init(Locale locale, Reporter reporter) {\n- *         reporter.print(Kind.NOTE, \"Doclet using locale: \" + locale);\n- *         this.reporter = reporter;\n- *         stdout = reporter.getStandardWriter();\n- *     }\n- *\n- *     public void printElement(DocTrees trees, Element e) {\n- *         DocCommentTree docCommentTree = trees.getDocCommentTree(e);\n- *         if (docCommentTree != null) {\n- *             stdout.println(\"Element (\" + e.getKind() + \": \"\n- *                     + e + \") has the following comments:\");\n- *             stdout.println(\"Entire body: \" + docCommentTree.getFullBody());\n- *             stdout.println(\"Block tags: \" + docCommentTree.getBlockTags());\n- *         }\n- *     }\n- *\n- *     @Override\n- *     public boolean run(DocletEnvironment docEnv) {\n- *         reporter.print(Kind.NOTE, \"overviewFile: \" + overviewFile);\n- *\n- *         \/\/ get the DocTrees utility class to access document comments\n- *         DocTrees docTrees = docEnv.getDocTrees();\n- *\n- *         \/\/ location of an element in the same directory as overview.html\n- *         try {\n- *             Element e = ElementFilter.typesIn(docEnv.getSpecifiedElements()).iterator().next();\n- *             DocCommentTree docCommentTree\n- *                     = docTrees.getDocCommentTree(e, overviewFile);\n- *             if (docCommentTree != null) {\n- *                 stdout.println(\"Overview html: \" + docCommentTree.getFullBody());\n- *             }\n- *         } catch (IOException missing) {\n- *             reporter.print(Kind.ERROR, \"No overview.html found.\");\n- *         }\n- *\n- *         for (TypeElement t : ElementFilter.typesIn(docEnv.getIncludedElements())) {\n- *             stdout.println(t.getKind() + \":\" + t);\n- *             for (Element e : t.getEnclosedElements()) {\n- *                 printElement(docTrees, e);\n- *             }\n- *         }\n- *         return true;\n- *     }\n- *\n- *     @Override\n- *     public String getName() {\n- *         return \"Example\";\n- *     }\n@@ -267,5 +215,19 @@\n- *     private String overviewFile;\n- *\n- *     @Override\n- *     public Set<? extends Option> getSupportedOptions() {\n- *         Option[] options = {\n+ *    private static final boolean OK = true;\n+ *    private DocTrees treeUtils;\n+ *    private Reporter reporter;\n+ *    private String delimiter;\n+ *\n+ *    @Override\n+ *    public void init(Locale locale, Reporter reporter) {\n+ *        this.reporter = reporter;\n+ *    }\n+ *\n+ *    @Override\n+ *    public String getName() {\n+ *        return getClass().getSimpleName();\n+ *    }\n+ *\n+ *    \/\/ Declaring doclet-specific options.\n+ *    @Override\n+ *    public Set<? extends Option> getSupportedOptions() {\n+ *        Option[] options = {\n@@ -274,3 +236,2 @@\n- *                         \"--overview-file\",\n- *                         \"-overviewfile\",\n- *                         \"-o\"\n+ *                         \"-delimiter\",\n+ *                         \"-d\"\n@@ -286,1 +247,1 @@\n- *                     return \"an option with aliases\";\n+ *                     return \"delimiter to separate the class name and type in the output\";\n@@ -301,1 +262,1 @@\n- *                     return \"file\";\n+ *                     return \"delimiter\";\n@@ -306,1 +267,1 @@\n- *                     overviewFile = arguments.get(0);\n+ *                     delimiter = arguments.get(0);\n@@ -315,6 +276,35 @@\n- *     @Override\n- *     public SourceVersion getSupportedSourceVersion() {\n- *         \/\/ support the latest release\n- *         return SourceVersion.latest();\n- *     }\n- * }\n+ *    @Override\n+ *    public SourceVersion getSupportedSourceVersion() {\n+ *        return SourceVersion.latest();\n+ *    }\n+ *\n+ *    @Override\n+ *    public boolean run(DocletEnvironment environment) {\n+ *        treeUtils = environment.getDocTrees();\n+ *        new ShowFileObjects(reporter).show(environment.getSpecifiedElements());\n+ *        return OK;\n+ *    }\n+ *\n+ *    \/\/ A scanner to loop through specified elements\n+ *    class ShowFileObjects {\n+ *        final Reporter out;\n+ *\n+ *        ShowFileObjects(Reporter out) {\n+ *            this.out = out;\n+ *        }\n+ *\n+ *        void show(Set<? extends Element> elements) {\n+ *            for (Element element : elements) {\n+ *                if (element instanceof TypeElement te) {\n+ *                    TreePath dct = treeUtils.getPath(te);\n+ *                    if (dct == null) {\n+ *                        out.print(Diagnostic.Kind.ERROR, te + \": no source file found\");\n+ *                    } else {\n+ *                        JavaFileObject fo = dct.getCompilationUnit().getSourceFile();\n+ *                        String output = te + \" \" + (delimiter != null ? delimiter : \"\") + \" \" + fo.getName() + \" \" + te.getKind();\n+ *                        out.print(Diagnostic.Kind.NOTE, output);\n+ *                    }\n+ *                }\n+ *            }\n+ *        }\n+ *    }\n@@ -322,0 +312,1 @@\n+ *}\n@@ -328,1 +319,1 @@\n- *       --overview-file overview.html \\\n+ *       -delimiter -> \\\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/doclet\/package-info.java","additions":70,"deletions":79,"binary":false,"changes":149,"status":"modified"}]}