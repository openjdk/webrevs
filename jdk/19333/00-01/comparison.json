{"files":[{"patch":"@@ -35,1 +35,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:NativeMemoryTracking=summary -Xms8m -Xmx8m -Xint PeakMallocTest\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:NativeMemoryTracking=summary -Xms32m -Xmx32m -Xint PeakMallocTest\n@@ -39,0 +39,2 @@\n+\/\/ Note we run the test with -Xint to keep compilers from running and reduce malloc noise.\n+\n@@ -45,1 +47,2 @@\n-    public static WhiteBox wb = WhiteBox.getWhiteBox();\n+    private static WhiteBox wb = WhiteBox.getWhiteBox();\n+    private static final double FUDGE_FACTOR = 0.2;\n@@ -50,1 +53,1 @@\n-        OutputAnalyzer output = NMTTestUtils.startJcmdVMNativeMemory();\n+        OutputAnalyzer output = NMTTestUtils.startJcmdVMNativeMemory(\"scale=1\");\n@@ -56,1 +59,0 @@\n-\n@@ -58,1 +60,1 @@\n-        long allocSize = Math.max(8 * earlyPeak, 1000000000); \/\/ MAX(earlyPeak * 8, 1GB)\n+        long allocSize = Math.max(8 * earlyPeak, 250 * 1024 * 1024); \/\/ MAX(earlyPeak * 8, 250MB)\n@@ -64,1 +66,1 @@\n-        output = NMTTestUtils.startJcmdVMNativeMemory();\n+        output = NMTTestUtils.startJcmdVMNativeMemory(\"scale=1\");\n@@ -70,4 +72,7 @@\n-        \/\/ Verify total global malloc is similar\n-        \/\/ Fudge factor of 10% to account for noise\n-        if ((currTotal < earlyTotal * 0.9) || (currTotal > earlyTotal * 1.1)) {\n-            throw new Exception(\"Global malloc measurement is incorrect\");\n+        \/\/ Verify total global malloc is similar with a fudge factor\n+        double mallocLowerBound = earlyTotal * (1 - FUDGE_FACTOR);\n+        double mallocUpperBound = earlyTotal * (1 + FUDGE_FACTOR);\n+        if (currTotal < mallocLowerBound || currTotal > mallocUpperBound) {\n+            throw new Exception(\"Global malloc measurement is incorrect. \" +\n+                    \"Expected range: [\" + mallocLowerBound + \" - \" + mallocUpperBound + \"]. \" +\n+                    \"Actual malloc total: \" + currTotal);\n@@ -76,5 +81,8 @@\n-        \/\/ Verify global malloc peak reflects large allocation\n-        long peakDiff = (currPeak - earlyPeak) * 1000; \/\/ Note, KB to Bytes conversion\n-        System.out.println(\"Peak diff: \" + peakDiff);\n-        if ((peakDiff < allocSize * 0.9) || (peakDiff > allocSize * 1.1)) {\n-            throw new Exception(\"Global malloc peak measurement is incorrect\");\n+        \/\/ Verify global malloc peak reflects large allocation with a fudge factor\n+        long peakDiff = currPeak - earlyPeak;\n+        double peakLowerBound = allocSize * (1 - FUDGE_FACTOR);\n+        double peakUpperBound = allocSize * (1 + FUDGE_FACTOR);\n+        if (peakDiff < peakLowerBound || peakDiff > peakUpperBound) {\n+            throw new Exception(\"Global malloc peak measurement is incorrect. \" +\n+                    \"Expected peak diff range: [\" + peakLowerBound + \" - \" + peakUpperBound + \"]. \" +\n+                    \"Actual peak diff: \" + peakDiff);\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/PeakMallocTest.java","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"}]}