{"files":[{"patch":"@@ -578,1 +578,1 @@\n-            if (options.showDisassembled) {\n+            if (options.showDisassembled || options.showLineAndLocalVariableTables) {\n@@ -581,3 +581,0 @@\n-            if (options.showLineAndLocalVariableTables) {\n-                codeWriter.writeLineAndLocalVariableTables(code, options.showDisassembled);\n-            }\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -77,13 +77,0 @@\n-    void writeLineAndLocalVariableTables(CodeAttribute attr, boolean indent) {\n-        if (indent) {\n-            indent(+1);\n-        }\n-        attr.findAttribute(Attributes.lineNumberTable())\n-            .ifPresent(a -> attrWriter.write(a, attr));\n-        attr.findAttribute(Attributes.localVariableTable())\n-            .ifPresent(a -> attrWriter.write(a, attr));\n-        if (indent) {\n-            indent(-1);\n-        }\n-    }\n-\n@@ -273,2 +260,16 @@\n-        if (!minimal) {\n-            writeVerboseHeader(attr);\n+        if (minimal) {\n+            writeMinimalMode(attr);\n+        } else {\n+            writeVerboseMode(attr);\n+        }\n+        indent(-1);\n+    }\n+\n+    private void writeMinimalMode(CodeAttribute attr) {\n+        if (options.showDisassembled) {\n+            writeInstrs(attr);\n+            writeExceptionTable(attr);\n+        }\n+\n+        if (options.showLineAndLocalVariableTables) {\n+            writeLineAndLocalVariableTables(attr);\n@@ -276,0 +277,4 @@\n+    }\n+\n+    private void writeVerboseMode(CodeAttribute attr) {\n+        writeVerboseHeader(attr);\n@@ -278,4 +283,8 @@\n-        if (!minimal) {\n-            attrWriter.write(attr.attributes(), attr);\n-        }\n-        indent(-1);\n+        attrWriter.write(attr.attributes(), attr);\n+    }\n+\n+    private void writeLineAndLocalVariableTables(CodeAttribute attr) {\n+        attr.findAttribute(Attributes.lineNumberTable())\n+            .ifPresent(a -> attrWriter.write(a, attr));\n+        attr.findAttribute(Attributes.localVariableTable())\n+            .ifPresent(a -> attrWriter.write(a, attr));\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/CodeWriter.java","additions":28,"deletions":19,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -43,9 +43,0 @@\n-        runJavapWithCodeBlock();\n-        runJavapWithoutCodeBlock();\n-\n-        if (errors > 0) {\n-            throw new Error(errors + \" found.\");\n-        }\n-    }\n-\n-    private void runJavapWithCodeBlock() {\n@@ -58,3 +49,1 @@\n-         *         0: iconst_0\n-         *         ...\n-         *         14: return\n+         *       ...\n@@ -66,2 +55,2 @@\n-        List<String[]> runArgsList = List.of(new String[] {\"-c\", \"-l\"}, new String[] {\"-v\"});\n-        for (String[] runArgs: runArgsList) {\n+        List<String[]> runArgsList = List.of(new String[]{\"-c\", \"-l\"}, new String[]{\"-v\"}, new String[]{\"-l\"});\n+        for (String[] runArgs : runArgsList) {\n@@ -72,1 +61,0 @@\n-            int bytecodeIndent = findNthMatchPrecedingSpaces(output, \"0: iconst_0\", 0);\n@@ -78,4 +66,0 @@\n-            if (bytecodeIndent - codeHeaderIndent != 5) {\n-                indentError(5, bytecodeIndent - codeHeaderIndent, \"Bytecode\", \"code header\", runArgs);\n-            }\n-\n@@ -90,19 +74,2 @@\n-    }\n-\n-    private void runJavapWithoutCodeBlock() {\n-        \/*\n-         * Partial expected output within a larger file. There exists another \"LineNumberTable: \" section above, and\n-         * thus we select the second occurrence in `findNthMatchPrecedingSpaces(output, \"LineNumberTable:\", 1);`\n-         * ...\n-         *  public void emptyLoop();\n-         *    LineNumberTable:\n-         *      line 143: 0\n-         *      line 145: 14\n-         * ...\n-         *\/\n-        String output = javap(\"-l\");\n-        int methodIntent = findNthMatchPrecedingSpaces(output, \"public void emptyLoop();\", 0);\n-        int detailIndent = findNthMatchPrecedingSpaces(output, \"LineNumberTable:\", 1);\n-\n-        if (detailIndent - methodIntent != 2) {\n-            indentError(2, detailIndent - methodIntent, \"LineNumberTable\", \"method header\");\n+        if (errors > 0) {\n+            throw new Error(errors + \" found.\");\n","filename":"test\/langtools\/tools\/javap\/ClassWriterTableIndentTest.java","additions":5,"deletions":38,"binary":false,"changes":43,"status":"modified"}]}