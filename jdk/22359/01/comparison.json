{"files":[{"patch":"@@ -578,1 +578,1 @@\n-            if (options.showDisassembled) {\n+            if (options.showDisassembled || options.showLineAndLocalVariableTables) {\n@@ -581,7 +581,0 @@\n-\n-            if (options.showLineAndLocalVariableTables) {\n-                code.findAttribute(Attributes.lineNumberTable())\n-                        .ifPresent(a -> attrWriter.write(a, code));\n-                code.findAttribute(Attributes.localVariableTable())\n-                        .ifPresent(a -> attrWriter.write(a, code));\n-            }\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.*;\n@@ -33,2 +34,0 @@\n-import java.lang.classfile.ClassFile;\n-import java.lang.classfile.Opcode;\n@@ -36,2 +35,0 @@\n-import java.lang.classfile.Instruction;\n-import java.lang.classfile.MethodModel;\n@@ -263,2 +260,4 @@\n-        if (!minimal) {\n-            writeVerboseHeader(attr);\n+        if (minimal) {\n+            writeMinimalMode(attr);\n+        } else {\n+            writeVerboseMode(attr);\n@@ -266,0 +265,16 @@\n+        indent(-1);\n+    }\n+\n+    private void writeMinimalMode(CodeAttribute attr) {\n+        if (options.showDisassembled) {\n+            writeInstrs(attr);\n+            writeExceptionTable(attr);\n+        }\n+\n+        if (options.showLineAndLocalVariableTables) {\n+            writeLineAndLocalVariableTables(attr);\n+        }\n+    }\n+\n+    private void writeVerboseMode(CodeAttribute attr) {\n+        writeVerboseHeader(attr);\n@@ -268,4 +283,8 @@\n-        if (!minimal) {\n-            attrWriter.write(attr.attributes(), attr);\n-        }\n-        indent(-1);\n+        attrWriter.write(attr.attributes(), attr);\n+    }\n+\n+    private void writeLineAndLocalVariableTables(CodeAttribute attr) {\n+        attr.findAttribute(Attributes.lineNumberTable())\n+            .ifPresent(a -> attrWriter.write(a, attr));\n+        attr.findAttribute(Attributes.localVariableTable())\n+            .ifPresent(a -> attrWriter.write(a, attr));\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/CodeWriter.java","additions":29,"deletions":10,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8035271\n+ * @summary javap incorrect indentation when LineNumberTable and LocalVariableTable written via ClassWriter\n+ * @run main ClassWriterTableIndentTest\n+ * @modules jdk.jdeps\/com.sun.tools.javap\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class ClassWriterTableIndentTest {\n+    public static void main(String[] args) {\n+        new ClassWriterTableIndentTest().run();\n+    }\n+\n+    public void run() {\n+        \/*\n+         * Partial expected output within a larger file. There exists another \"Code: \" section above, and thus we\n+         * select the second occurrence in `findNthMatchPrecedingSpaces(output, \"Code:\", 1);`\n+         * ...\n+         *  public void emptyLoop();\n+         *    Code:\n+         *       ...\n+         *      LineNumberTable:\n+         *        line 143: 0\n+         *        line 145: 14\n+         * ...\n+         *\/\n+        List<String[]> runArgsList = List.of(new String[]{\"-c\", \"-l\"}, new String[]{\"-v\"}, new String[]{\"-l\"});\n+        for (String[] runArgs : runArgsList) {\n+            String output = javap(runArgs);\n+            int methodIntent = findNthMatchPrecedingSpaces(output, \"public void emptyLoop();\", 0);\n+            int codeHeaderIndent = findNthMatchPrecedingSpaces(output, \"Code:\", 1);\n+            int detailIndent = findNthMatchPrecedingSpaces(output, \"LineNumberTable:\", 1);\n+\n+            if (codeHeaderIndent - methodIntent != 2) {\n+                indentError(2, codeHeaderIndent - methodIntent, \"Code block\", \"method header\", runArgs);\n+            }\n+\n+            if (detailIndent - codeHeaderIndent != 2) {\n+                indentError(2, detailIndent - codeHeaderIndent, \"LineNumberTable\", \"code header\", runArgs);\n+            }\n+\n+            if (detailIndent - methodIntent != 4) {\n+                indentError(4, detailIndent - methodIntent, \"LineNumberTable\", \"method header\");\n+            }\n+        }\n+        if (errors > 0) {\n+            throw new Error(errors + \" found.\");\n+        }\n+    }\n+\n+    private String javap(String... args) {\n+        StringWriter sw = new StringWriter();\n+        PrintWriter out = new PrintWriter(sw);\n+\n+        String[] fullArgs = new String[args.length + 1];\n+        System.arraycopy(args, 0, fullArgs, 0, args.length);\n+        fullArgs[args.length] = System.getProperty(\"test.classes\") + \"\/EmptyLoop8035271.class\";\n+\n+        int rc = com.sun.tools.javap.Main.run(fullArgs, out);\n+        if (rc != 0)\n+            throw new Error(\"javap failed. rc=\" + rc);\n+        out.close();\n+        System.out.println(sw);\n+        return sw.toString();\n+    }\n+\n+    public static int findNthMatchPrecedingSpaces(String inputString, String searchString, int occurrence) {\n+        String[] lines = inputString.split(System.lineSeparator());\n+        int count = 0;\n+        for (String line : lines) {\n+            if (line.trim().startsWith(searchString)) {\n+                if (count == occurrence) {\n+                    return line.indexOf(searchString);\n+                }\n+                count++;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Could not find \" + searchString + \" in \" + inputString);\n+    }\n+\n+    void indentError(int expected, int actual, String toCompare, String referencePoint, String... args) {\n+        System.err.println(toCompare + \" is not indented correctly with respect to \" + referencePoint + \". Expected \"\n+            + expected + \" but got \" + actual + \" for args: \" + Arrays.toString(args));\n+        errors++;\n+    }\n+\n+    int errors;\n+}\n+\n+class EmptyLoop8035271 {\n+    public void emptyLoop() {\n+        for (int i = 0; i < 10; i++) {\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javap\/ClassWriterTableIndentTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"}]}