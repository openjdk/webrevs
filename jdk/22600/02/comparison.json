{"files":[{"patch":"@@ -30,1 +30,0 @@\n-#include \"nmt\/memTracker.hpp\"\n@@ -33,0 +32,6 @@\n+#include \"runtime\/os.hpp\"\n+\n+size_t G1BlockOffsetTable::compute_size(size_t mem_region_words) {\n+  size_t number_of_slots = (mem_region_words \/ CardTable::card_size_in_words());\n+  return os::align_up_vm_allocation_granularity(number_of_slots);\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"memory\/virtualspace.hpp\"\n@@ -93,4 +92,1 @@\n-  static size_t compute_size(size_t mem_region_words) {\n-    size_t number_of_slots = (mem_region_words \/ CardTable::card_size_in_words());\n-    return ReservedSpace::allocation_align_size_up(number_of_slots);\n-  }\n+  static size_t compute_size(size_t mem_region_words);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -50,0 +51,5 @@\n+size_t G1CardTable::compute_size(size_t mem_region_size_in_words) {\n+  size_t number_of_slots = (mem_region_size_in_words \/ _card_size_in_words);\n+  return os::align_up_vm_allocation_granularity(number_of_slots);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,4 +110,1 @@\n-  static size_t compute_size(size_t mem_region_size_in_words) {\n-    size_t number_of_slots = (mem_region_size_in_words \/ _card_size_in_words);\n-    return ReservedSpace::allocation_align_size_up(number_of_slots);\n-  }\n+  static size_t compute_size(size_t mem_region_size_in_words);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -993,1 +993,1 @@\n-  size_t aligned_expand_bytes = ReservedSpace::page_align_size_up(expand_bytes);\n+  size_t aligned_expand_bytes = os::align_up_vm_page_size(expand_bytes);\n@@ -1036,2 +1036,1 @@\n-  size_t aligned_shrink_bytes =\n-    ReservedSpace::page_align_size_down(shrink_bytes);\n+  size_t aligned_shrink_bytes = os::align_down_vm_page_size(shrink_bytes);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,0 +35,10 @@\n+#include \"runtime\/os.hpp\"\n+\n+\/\/ Return the number of slots needed for an offset array\n+\/\/ that covers mem_region_words words.\n+size_t SerialBlockOffsetTable::compute_size(size_t mem_region_words) {\n+  assert(mem_region_words % CardTable::card_size_in_words() == 0, \"precondition\");\n+\n+  size_t number_of_slots = mem_region_words \/ CardTable::card_size_in_words();\n+  return os::align_up_vm_allocation_granularity(number_of_slots);\n+}\n@@ -64,1 +74,1 @@\n-    delta = ReservedSpace::page_align_size_up(new_size - old_size);\n+    delta = os::align_up_vm_page_size(new_size - old_size);\n@@ -71,1 +81,1 @@\n-    delta = ReservedSpace::page_align_size_down(old_size - new_size);\n+    delta = os::align_down_vm_page_size(old_size - new_size);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -58,6 +58,1 @@\n-  static size_t compute_size(size_t mem_region_words) {\n-    assert(mem_region_words % CardTable::card_size_in_words() == 0, \"precondition\");\n-\n-    size_t number_of_slots = mem_region_words \/ CardTable::card_size_in_words();\n-    return ReservedSpace::allocation_align_size_up(number_of_slots);\n-  }\n+  static size_t compute_size(size_t mem_region_words);\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  size_t aligned_bytes  = ReservedSpace::page_align_size_up(bytes);\n+  size_t aligned_bytes = os::align_up_vm_page_size(bytes);\n@@ -91,1 +91,1 @@\n-    aligned_bytes = ReservedSpace::page_align_size_down(bytes);\n+    aligned_bytes = os::align_down_vm_page_size(bytes);\n@@ -93,1 +93,1 @@\n-  size_t aligned_expand_bytes = ReservedSpace::page_align_size_up(expand_bytes);\n+  size_t aligned_expand_bytes = os::align_up_vm_page_size(expand_bytes);\n@@ -125,1 +125,1 @@\n-  size_t size = ReservedSpace::page_align_size_down(bytes);\n+  size_t size = os::align_down_vm_page_size(bytes);\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-#include \"memory\/virtualspace.hpp\"\n@@ -35,1 +34,1 @@\n-  return ReservedSpace::allocation_align_size_up(heap_size \/ mark_distance());\n+  return os::align_up_vm_allocation_granularity(heap_size \/ mark_distance());\n","filename":"src\/hotspot\/share\/gc\/shared\/markBitMap.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -40,1 +41,1 @@\n-  return ReservedSpace::allocation_align_size_up(heap_size \/ mark_distance());\n+  return os::align_up_vm_allocation_granularity(heap_size \/ mark_distance());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -423,1 +423,1 @@\n-  reservation_size_request_bytes = ReservedSpace::allocation_align_size_up(reservation_size_request_bytes);\n+  reservation_size_request_bytes = os::align_up_vm_allocation_granularity(reservation_size_request_bytes);\n@@ -427,1 +427,1 @@\n-  block_size_request_bytes = ReservedSpace::allocation_align_size_up(block_size_request_bytes);\n+  block_size_request_bytes = os::align_up_vm_allocation_granularity(block_size_request_bytes);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrVirtualMemory.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -332,14 +332,0 @@\n-size_t ReservedSpace::page_align_size_up(size_t size) {\n-  return align_up(size, os::vm_page_size());\n-}\n-\n-\n-size_t ReservedSpace::page_align_size_down(size_t size) {\n-  return align_down(size, os::vm_page_size());\n-}\n-\n-\n-size_t ReservedSpace::allocation_align_size_up(size_t size) {\n-  return align_up(size, os::vm_allocation_granularity());\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -106,4 +106,0 @@\n-  \/\/ Alignment\n-  static size_t page_align_size_up(size_t size);\n-  static size_t page_align_size_down(size_t size);\n-  static size_t allocation_align_size_up(size_t size);\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/align.hpp\"\n@@ -407,0 +408,3 @@\n+  static size_t align_up_vm_page_size(size_t size)   { return align_up  (size, os::vm_page_size()); }\n+  static size_t align_down_vm_page_size(size_t size) { return align_down(size, os::vm_page_size()); }\n+\n@@ -447,0 +451,2 @@\n+  static size_t align_up_vm_allocation_granularity(size_t size) { return align_up(size, os::vm_allocation_granularity()); }\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}