{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import jdk.jfr.internal.util.Utils;\n@@ -188,6 +189,1 @@\n-        } else {\n-            for (ValueDescriptor v : getFields()) {\n-                if (name.equals(v.getName())) {\n-                    return v;\n-                }\n-            }\n+            return null;\n@@ -195,1 +191,1 @@\n-        return null;\n+        return Utils.findField(getFields(), name);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Type.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,3 @@\n+import jdk.jfr.internal.PrivateAccess;\n+import jdk.jfr.internal.Type;\n+import jdk.jfr.internal.util.Utils;\n@@ -63,1 +66,0 @@\n-    private final ValueDescriptor descriptor;\n@@ -66,0 +68,1 @@\n+    private ValueDescriptor descriptor;\n@@ -80,0 +83,1 @@\n+        configureAliases();\n@@ -85,1 +89,3 @@\n-            field.valueGetter = valueGetter(field.name);\n+            if (field.valueGetter == null) {\n+                field.valueGetter = valueGetter(field.name);\n+            }\n@@ -116,16 +122,0 @@\n-        if (fieldName.equals(\"stackTrace.topApplicationFrame\")) {\n-            configureTopApplicationFrameField();\n-            return true;\n-        }\n-        if (fieldName.equals(\"stackTrace.notInit\")) {\n-            configureNotInitFrameField();\n-            return true;\n-        }\n-        if (fieldName.equals(\"stackTrace.topFrame.class\")) {\n-            configureTopFrameClassField();\n-            return true;\n-        }\n-        if (fieldName.equals(\"stackTrace.topFrame\")) {\n-            configureTopFrameField();\n-            return true;\n-        }\n@@ -147,0 +137,67 @@\n+    private void configureAliases() {\n+        configureFrame(\"topFrame\", FieldBuilder::topFrame);\n+        configureFrame(\"topApplicationFrame\", FieldBuilder::topApplicationFrame);\n+        configureFrame(\"topNotInitFrame\", FieldBuilder::topNotInitFrame);\n+    }\n+\n+    private void configureFrame(String frameName, Function<RecordedEvent, Object> getter) {\n+        String name = \"stackTrace.\" + frameName;\n+        if (!fieldName.startsWith(name)) {\n+            return;\n+        }\n+        ValueDescriptor stackTrace = Utils.findField(field.type.getFields(), \"stackTrace\");\n+        if (stackTrace == null) {\n+            return;\n+        }\n+        ValueDescriptor frames = Utils.findField(stackTrace.getFields(), \"frames\");\n+        if (frames == null) {\n+            return;\n+        }\n+        int length = name.length();\n+        if (fieldName.length() == length) {\n+            descriptor = frames; \/\/ Use array descriptor for now\n+            field.valueGetter = getter;\n+            return;\n+        }\n+        String subName = fieldName.substring(length + 1);\n+        Type type = PrivateAccess.getInstance().getType(frames);\n+        ValueDescriptor subField = type.getField(subName);\n+        if (subField != null) {\n+            descriptor = subField;\n+            field.valueGetter = e -> {\n+                if (getter.apply(e) instanceof RecordedFrame frame) {\n+                    return frame.getValue(subName);\n+                }\n+                return null;\n+            };\n+        }\n+    }\n+\n+    private static RecordedFrame topFrame(RecordedEvent event) {\n+        return findJavaFrame(event,  x -> true);\n+    }\n+\n+    private static RecordedFrame topApplicationFrame(RecordedEvent event) {\n+        return findJavaFrame(event, frame -> {\n+            RecordedClass cl = frame.getMethod().getType();\n+            RecordedClassLoader classLoader = cl.getClassLoader();\n+            return classLoader != null && !\"bootstrap\".equals(classLoader.getName());\n+        });\n+    }\n+\n+    private static Object topNotInitFrame(RecordedEvent event) {\n+        return findJavaFrame(event, frame -> !frame.getMethod().getName().equals(\"<init>\"));\n+    }\n+\n+    private static RecordedFrame findJavaFrame(RecordedEvent event, Predicate<RecordedFrame> condition) {\n+        RecordedStackTrace st = event.getStackTrace();\n+        if (st != null) {\n+            for (RecordedFrame frame : st.getFrames()) {\n+                if (frame.isJavaFrame() && condition.test(frame)) {\n+                    return frame;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n@@ -169,59 +226,0 @@\n-    private void configureTopFrameField() {\n-        field.alignLeft = true;\n-        field.label = \"Method\";\n-        field.dataType = \"jdk.types.Method\";\n-        field.valueGetter = e -> {\n-            RecordedStackTrace t = e.getStackTrace();\n-            return t != null ? t.getFrames().getFirst() : null;\n-        };\n-        field.lexicalSort = true;\n-    }\n-\n-    private void configureTopFrameClassField() {\n-        field.alignLeft = true;\n-        field.label = \"Class\";\n-        field.dataType = \"java.lang.Class\";\n-        field.valueGetter = e -> {\n-            RecordedStackTrace t = e.getStackTrace();\n-            if (t == null) {\n-                return null;\n-            }\n-            return t.getFrames().getFirst().getMethod().getType();\n-        };\n-        field.lexicalSort = true;\n-    }\n-\n-    private void configureCustomFrame(Predicate<RecordedFrame> condition) {\n-        field.alignLeft = true;\n-        field.dataType = \"jdk.types.Frame\";\n-        field.label = \"Method\";\n-        field.lexicalSort = true;\n-        field.valueGetter = e -> {\n-            RecordedStackTrace t = e.getStackTrace();\n-            if (t != null) {\n-                for (RecordedFrame f : t.getFrames()) {\n-                    if (f.isJavaFrame()) {\n-                        if (condition.test(f)) {\n-                            return f;\n-                        }\n-                    }\n-                }\n-            }\n-            return null;\n-        };\n-    }\n-\n-    private void configureNotInitFrameField() {\n-        configureCustomFrame(frame -> {\n-            return !frame.getMethod().getName().equals(\"<init>\");\n-        });\n-    }\n-\n-    private void configureTopApplicationFrameField() {\n-        configureCustomFrame(frame -> {\n-            RecordedClass cl = frame.getMethod().getType();\n-            RecordedClassLoader classLoader = cl.getClassLoader();\n-            return classLoader != null && !\"bootstrap\".equals(classLoader.getName());\n-        });\n-    }\n-\n@@ -237,0 +235,3 @@\n+        if (v.getTypeName().equals(\"jdk.types.StackFrame\")) {\n+            return \"Method\";\n+        }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/FieldBuilder.java","additions":79,"deletions":78,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-         SELECT method AS m, SET(stackTrace.topFrame.class)\n+         SELECT method AS m, SET(stackTrace.topFrame.method.type)\n@@ -269,1 +269,1 @@\n-         SELECT stackTrace.notInit AS S, COUNT(startTime) AS C\n+         SELECT stackTrace.topNotInitFrame AS S, COUNT(startTime) AS C\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/view.ini","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import jdk.jfr.ValueDescriptor;\n@@ -441,0 +442,9 @@\n+\n+    public static ValueDescriptor findField(List<ValueDescriptor> fields, String name) {\n+        for (ValueDescriptor v : fields) {\n+            if (v.getName().equals(name)) {\n+                return v;\n+            }\n+        }\n+        return null;\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/Utils.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}