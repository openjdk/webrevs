{"files":[{"patch":"@@ -58,1 +58,1 @@\n-    assert(cb->stubs()->remaining() >= MacroAssembler::NativeShortCall::trampoline_size, \"pre-allocated trampolines\");\n+    assert(cb->stubs()->remaining() >= MacroAssembler::max_patchable_far_call_stub_size(), \"pre-allocated trampolines\");\n@@ -74,1 +74,1 @@\n-  const int total_requested_size = MacroAssembler::NativeShortCall::trampoline_size * requests->number_of_entries();\n+  const int total_requested_size = MacroAssembler::max_patchable_far_call_stub_size() * requests->number_of_entries();\n","filename":"src\/hotspot\/cpu\/riscv\/codeBuffer_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3718,9 +3718,1 @@\n-  Address stub = RuntimeAddress(StubRoutines::lookup_secondary_supers_table_slow_path_stub());\n-  if (stub_is_near) {\n-    jump_link(stub, t0);\n-  } else {\n-    address call = trampoline_call(stub);\n-    if (call == nullptr) {\n-      return false; \/\/ trampoline allocation failed\n-    }\n-  }\n+  rt_call(StubRoutines::lookup_secondary_supers_table_slow_path_stub());\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -10130,1 +10130,1 @@\n-      address call = __ trampoline_call(RuntimeAddress(StubRoutines::lookup_secondary_supers_table_stub(super_klass_slot)));\n+      address call = __ patchable_far_call(RuntimeAddress(StubRoutines::lookup_secondary_supers_table_stub(super_klass_slot)));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}