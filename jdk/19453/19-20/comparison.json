{"files":[{"patch":"@@ -321,1 +321,1 @@\n-  address call = __ patchable_far_call(resolve);\n+  address call = __ reloc_call(resolve);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1349,1 +1349,1 @@\n-  address call = __ patchable_far_call(Address(op->addr(), rtype));\n+  address call = __ reloc_call(Address(op->addr(), rtype));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1043,1 +1043,1 @@\n-  address call = patchable_far_call(stub);\n+  address call = reloc_call(stub);\n@@ -1481,1 +1481,1 @@\n-  address call = patchable_far_call(stub);\n+  address call = reloc_call(stub);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    assert(cb->stubs()->remaining() >= MacroAssembler::max_patchable_far_call_stub_size(), \"pre-allocated trampolines\");\n+    assert(cb->stubs()->remaining() >= MacroAssembler::max_reloc_call_stub_size(), \"pre-allocated trampolines\");\n@@ -74,1 +74,1 @@\n-  const int total_requested_size = MacroAssembler::max_patchable_far_call_stub_size() * requests->number_of_entries();\n+  const int total_requested_size = MacroAssembler::max_reloc_call_stub_size() * requests->number_of_entries();\n","filename":"src\/hotspot\/cpu\/riscv\/codeBuffer_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  return MacroAssembler::max_patchable_far_call_stub_size();\n+  return MacroAssembler::max_reloc_call_stub_size();\n","filename":"src\/hotspot\/cpu\/riscv\/compiledIC_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4231,1 +4231,1 @@\n-  return patchable_far_call(Address(entry, rh));\n+  return reloc_call(Address(entry, rh));\n@@ -4277,1 +4277,1 @@\n-  address stub = start_a_stub(max_patchable_far_call_stub_size());\n+  address stub = start_a_stub(max_reloc_call_stub_size());\n@@ -4318,1 +4318,1 @@\n-  address stub = start_a_stub(max_patchable_far_call_stub_size());\n+  address stub = start_a_stub(max_reloc_call_stub_size());\n@@ -4359,1 +4359,1 @@\n-int MacroAssembler::max_patchable_far_call_stub_size() {\n+int MacroAssembler::max_reloc_call_stub_size() {\n@@ -5083,1 +5083,1 @@\n-      address tpc = patchable_far_call(zero_blocks);\n+      address tpc = reloc_call(zero_blocks);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -469,1 +469,1 @@\n-  static int max_patchable_far_call_stub_size();\n+  static int max_reloc_call_stub_size();\n@@ -1214,1 +1214,1 @@\n-  \/\/   - patchable far call:\n+  \/\/   - reloc call:\n@@ -1228,1 +1228,1 @@\n-  \/\/ - trampoline call (old patchable far call \/ -XX:+UseTrampolines):\n+  \/\/ - trampoline call (old reloc call \/ -XX:+UseTrampolines):\n@@ -1267,1 +1267,1 @@\n-  \/\/ otherwise a patchable far call.\n+  \/\/ otherwise a reloc call.\n@@ -1275,1 +1275,1 @@\n-  address patchable_far_call(Address entry) {\n+  address reloc_call(Address entry) {\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-\/\/ Implements the trampoline part of patchable far call - trampoline call.\n+\/\/ Implements the trampoline part of reloc call - trampoline call.\n@@ -113,1 +113,1 @@\n-\/\/ Implements the trampoline call, a short call with a trampoline, version of patchable far call.\n+\/\/ Implements the trampoline call, a short call with a trampoline, version of reloc call.\n@@ -305,1 +305,1 @@\n-\/\/ Implements direct far calling loading an address from the stub section version of patchable far call.\n+\/\/ Implements direct far calling loading an address from the stub section version of reloc call.\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2416,1 +2416,1 @@\n-      call = __ patchable_far_call(Address(addr, relocInfo::runtime_call_type));\n+      call = __ reloc_call(Address(addr, relocInfo::runtime_call_type));\n@@ -2434,1 +2434,1 @@\n-      call = __ patchable_far_call(Address(addr, rspec));\n+      call = __ reloc_call(Address(addr, rspec));\n@@ -2486,1 +2486,1 @@\n-      address call = __ patchable_far_call(Address(entry, relocInfo::runtime_call_type));\n+      address call = __ reloc_call(Address(entry, relocInfo::runtime_call_type));\n@@ -10103,1 +10103,1 @@\n-      address call = __ patchable_far_call(RuntimeAddress(StubRoutines::lookup_secondary_supers_table_stub(super_klass_slot)));\n+      address call = __ reloc_call(RuntimeAddress(StubRoutines::lookup_secondary_supers_table_stub(super_klass_slot)));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1008,1 +1008,1 @@\n-    const address tr_call = __ patchable_far_call(resolve);\n+    const address tr_call = __ reloc_call(resolve);\n@@ -1040,1 +1040,1 @@\n-  const address tr_call = __ patchable_far_call(resolve);\n+  const address tr_call = __ reloc_call(resolve);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}