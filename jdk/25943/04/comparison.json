{"files":[{"patch":"@@ -94,1 +94,1 @@\n-  size_t capacity    = _space_info->soft_max_capacity();\n+  size_t capacity    = ShenandoahHeap::heap()->soft_max_capacity();\n@@ -236,1 +236,1 @@\n-  size_t capacity = _space_info->soft_max_capacity();\n+  size_t capacity = ShenandoahHeap::heap()->soft_max_capacity();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  size_t capacity = _space_info->soft_max_capacity();\n+  size_t capacity = ShenandoahHeap::heap()->soft_max_capacity();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-  virtual size_t soft_max_capacity() const = 0;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahSpaceInfo.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  size_t capacity = _space_info->soft_max_capacity();\n+  size_t capacity = ShenandoahHeap::heap()->soft_max_capacity();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-  const size_t v_soft_max_capacity = soft_max_capacity();\n+  const size_t v_soft_max_capacity = ShenandoahHeap::heap()->soft_max_capacity();\n@@ -802,2 +802,1 @@\n-                                           size_t max_capacity,\n-                                           size_t soft_max_capacity) :\n+                                           size_t max_capacity) :\n@@ -809,1 +808,1 @@\n-  _max_capacity(max_capacity), _soft_max_capacity(soft_max_capacity),\n+  _max_capacity(max_capacity),\n@@ -955,1 +954,1 @@\n-  return available(soft_max_capacity());\n+  return available(ShenandoahHeap::heap()->soft_max_capacity());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -74,1 +74,0 @@\n-  size_t _soft_max_capacity;\n@@ -108,2 +107,1 @@\n-                       size_t max_capacity,\n-                       size_t soft_max_capacity);\n+                       size_t max_capacity);\n@@ -129,1 +127,0 @@\n-  size_t soft_max_capacity() const override { return _soft_max_capacity; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,15 +56,0 @@\n-\n-  void print_heap() override {\n-    ShenandoahInitLogger::print_heap();\n-\n-    ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n-\n-    ShenandoahYoungGeneration* young = heap->young_generation();\n-    log_info(gc, init)(\"Young Generation Soft Size: \" EXACTFMT, EXACTFMTARGS(young->soft_max_capacity()));\n-    log_info(gc, init)(\"Young Generation Max: \" EXACTFMT, EXACTFMTARGS(young->max_capacity()));\n-\n-    ShenandoahOldGeneration* old = heap->old_generation();\n-    log_info(gc, init)(\"Old Generation Soft Size: \" EXACTFMT, EXACTFMTARGS(old->soft_max_capacity()));\n-    log_info(gc, init)(\"Old Generation Max: \" EXACTFMT, EXACTFMTARGS(old->max_capacity()));\n-  }\n-\n@@ -144,2 +129,2 @@\n-  _young_generation = new ShenandoahYoungGeneration(max_workers(), max_capacity_young, initial_capacity_young);\n-  _old_generation = new ShenandoahOldGeneration(max_workers(), max_capacity_old, initial_capacity_old);\n+  _young_generation = new ShenandoahYoungGeneration(max_workers(), max_capacity_young);\n+  _old_generation = new ShenandoahOldGeneration(max_workers(), max_capacity_old);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -53,4 +53,0 @@\n-size_t ShenandoahGlobalGeneration::soft_max_capacity() const {\n-  return ShenandoahHeap::heap()->soft_max_capacity();\n-}\n-\n@@ -68,2 +64,2 @@\n-  assert(max_capacity() >= soft_max_capacity(), \"Max capacity must be greater than soft max capacity.\");\n-  size_t soft_tail = max_capacity() - soft_max_capacity();\n+  assert(max_capacity() >= ShenandoahHeap::heap()->soft_max_capacity(), \"Max capacity must be greater than soft max capacity.\");\n+  size_t soft_tail = max_capacity() - ShenandoahHeap::heap()->soft_max_capacity();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-  ShenandoahGlobalGeneration(bool generational, uint max_queues, size_t max_capacity, size_t soft_max_capacity)\n-  : ShenandoahGeneration(generational ? GLOBAL : NON_GEN, max_queues, max_capacity, soft_max_capacity) { }\n+  ShenandoahGlobalGeneration(bool generational, uint max_queues, size_t max_capacity)\n+  : ShenandoahGeneration(generational ? GLOBAL : NON_GEN, max_queues, max_capacity) { }\n@@ -42,1 +42,0 @@\n-  size_t soft_max_capacity() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -204,2 +205,1 @@\n-  \/\/ Default to max heap size.\n-  _soft_max_size = _num_regions * reg_size_bytes;\n+  _soft_max_size = SoftMaxHeapSize;\n@@ -527,1 +527,1 @@\n-  _global_generation = new ShenandoahGlobalGeneration(mode()->is_generational(), max_workers(), max_capacity(), max_capacity());\n+  _global_generation = new ShenandoahGlobalGeneration(mode()->is_generational(), max_workers(), max_capacity());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+  log_info(gc, init)(\"Soft Max Heap Size: \" EXACTFMT, EXACTFMTARGS(ShenandoahHeap::heap()->soft_max_capacity()));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahInitLogger.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -199,2 +199,2 @@\n-ShenandoahOldGeneration::ShenandoahOldGeneration(uint max_queues, size_t max_capacity, size_t soft_max_capacity)\n-  : ShenandoahGeneration(OLD, max_queues, max_capacity, soft_max_capacity),\n+ShenandoahOldGeneration::ShenandoahOldGeneration(uint max_queues, size_t max_capacity)\n+  : ShenandoahGeneration(OLD, max_queues, max_capacity),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-  ShenandoahOldGeneration(uint max_queues, size_t max_capacity, size_t soft_max_capacity);\n+  ShenandoahOldGeneration(uint max_queues, size_t max_capacity);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-ShenandoahYoungGeneration::ShenandoahYoungGeneration(uint max_queues, size_t max_capacity, size_t soft_max_capacity) :\n-  ShenandoahGeneration(YOUNG, max_queues, max_capacity, soft_max_capacity),\n+ShenandoahYoungGeneration::ShenandoahYoungGeneration(uint max_queues, size_t max_capacity) :\n+  ShenandoahGeneration(YOUNG, max_queues, max_capacity),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  ShenandoahYoungGeneration(uint max_queues, size_t max_capacity, size_t max_soft_capacity);\n+  ShenandoahYoungGeneration(uint max_queues, size_t max_capacity);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    old = new ShenandoahOldGeneration(8, 1024 * 1024, 1024);\n+    old = new ShenandoahOldGeneration(8, 1024 * 1024);\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahOldGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-\/*\n- * @test id=passive\n+\/**\n+ * @test id=satb-adaptive\n@@ -31,2 +31,3 @@\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive\n+ * @run main\/othervm -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000\n+ *      -XX:ShenandoahGCMode=satb\n@@ -34,1 +35,1 @@\n- *      -Dtarget=10000\n+ *      -XX:ShenandoahGCHeuristics=adaptive\n@@ -37,5 +38,0 @@\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive\n- *      -XX:-ShenandoahDegeneratedGC\n- *      -Dtarget=10000\n- *      TestDynamicSoftMaxHeapSize\n@@ -44,2 +40,2 @@\n-\/*\n- * @test id=aggressive\n+\/**\n+ * @test id=satb-aggressive\n@@ -49,3 +45,5 @@\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n- *      -Dtarget=1000\n+ * @run main\/othervm -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000\n+ *      -XX:ShenandoahGCMode=satb\n+ *      -XX:+ShenandoahDegeneratedGC\n+ *      -XX:ShenandoahGCHeuristics=aggressive\n@@ -53,0 +51,1 @@\n+ *\n@@ -55,2 +54,2 @@\n-\/*\n- * @test id=adaptive\n+\/**\n+ * @test id=satb-compact\n@@ -60,3 +59,5 @@\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive\n- *      -Dtarget=10000\n+ * @run main\/othervm -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000\n+ *      -XX:ShenandoahGCMode=satb\n+ *      -XX:+ShenandoahDegeneratedGC\n+ *      -XX:ShenandoahGCHeuristics=compact\n@@ -64,0 +65,1 @@\n+ *\n@@ -66,2 +68,2 @@\n-\/*\n- * @test id=generational\n+\/**\n+ * @test id=satb-static\n@@ -71,3 +73,5 @@\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n- *      -Dtarget=10000\n+ * @run main\/othervm -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000\n+ *      -XX:ShenandoahGCMode=satb\n+ *      -XX:+ShenandoahDegeneratedGC\n+ *      -XX:ShenandoahGCHeuristics=static\n@@ -75,0 +79,1 @@\n+ *\n@@ -77,2 +82,2 @@\n-\/*\n- * @test id=static\n+\/**\n+ * @test id=passive\n@@ -83,1 +88,8 @@\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=static\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive\n+ *      -XX:+ShenandoahDegeneratedGC\n+ *      -Dtarget=10000\n+ *      TestDynamicSoftMaxHeapSize\n+ *\n+ * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive\n+ *      -XX:-ShenandoahDegeneratedGC\n@@ -88,2 +100,2 @@\n-\/*\n- * @test id=compact\n+\/**\n+ * @test id=generational\n@@ -93,4 +105,6 @@\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=compact\n- *      -Dtarget=1000\n- *     TestDynamicSoftMaxHeapSize\n+ * @run main\/othervm -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000\n+ *      -XX:ShenandoahGCMode=generational\n+ *      -XX:ShenandoahGCHeuristics=adaptive\n+ *      TestDynamicSoftMaxHeapSize\n+ *\n@@ -99,1 +113,12 @@\n-import java.util.Random;\n+\/**\n+ * @test id=generational-softMaxHeapSizeValidation\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -DvalidateSoftMaxHeap=true\n+ *      TestDynamicSoftMaxHeapSize\n+ *      -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000 -DverifySoftMaxHeapValue=true\n+ *      -XX:ShenandoahGCMode=generational\n+ *      -XX:ShenandoahGCHeuristics=adaptive\n+ *\/\n@@ -105,0 +130,5 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n@@ -106,0 +136,7 @@\n+    static final int K = 1024;\n+    static final int XMS_MB = 100;\n+    static final int XMX_MB = 512;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (\"true\".equals(System.getProperty(\"validateSoftMaxHeap\"))) {\n+            List<String> flagArgs = new ArrayList<>(Arrays.asList(args));\n@@ -107,2 +144,4 @@\n-    static final long TARGET_MB = Long.getLong(\"target\", 10_000); \/\/ 10 Gb allocation\n-    static final long STRIDE = 10_000_000;\n+            int softMaxInMb = Utils.getRandomInstance().nextInt(XMS_MB, XMX_MB);\n+            flagArgs.add(\"-DsoftMaxCapacity=\" + softMaxInMb * K * K);\n+            flagArgs.add(\"-Dtest.jdk=\" + System.getProperty(\"test.jdk\"));\n+            flagArgs.add(\"-Dcompile.jdk=\" + System.getProperty(\"compile.jdk\"));\n@@ -110,1 +149,1 @@\n-    static volatile Object sink;\n+            flagArgs.add(SoftMaxWithExpectationTest.class.getName());\n@@ -112,10 +151,27 @@\n-    public static void main(String[] args) throws Exception {\n-        long count = TARGET_MB * 1024 * 1024 \/ 16;\n-        Random r = Utils.getRandomInstance();\n-        PidJcmdExecutor jcmd = new PidJcmdExecutor();\n-\n-        for (long c = 0; c < count; c += STRIDE) {\n-            \/\/ Sizes specifically include heaps below Xms and above Xmx to test saturation code.\n-            jcmd.execute(\"VM.set_flag SoftMaxHeapSize \" + r.nextInt(768*1024*1024), true);\n-            for (long s = 0; s < STRIDE; s++) {\n-                sink = new Object();\n+            ProcessBuilder genShenPbValidateFlag = ProcessTools.createLimitedTestJavaProcessBuilder(flagArgs);\n+            OutputAnalyzer output = new OutputAnalyzer(genShenPbValidateFlag.start());\n+            output.shouldHaveExitValue(0);\n+            output.shouldContain(String.format(\"Soft Max Heap Size: %dM -> %dM\", XMX_MB, softMaxInMb)); \/\/ By default, the soft max heap size is Xmx\n+        } else {\n+            SoftMaxSetFlagOnlyTest.test();\n+        }\n+    }\n+\n+    public static class SoftMaxSetFlagOnlyTest {\n+        static final long TARGET_MB = Long.getLong(\"target\", 10_000); \/\/ 10 Gb allocation\n+        static final long STRIDE = 10_000_000;\n+\n+        static volatile Object sink;\n+\n+        public static void test() throws Exception {\n+            long count = TARGET_MB * 1024 * 1024 \/ 16;\n+            Random r = Utils.getRandomInstance();\n+            PidJcmdExecutor jcmd = new PidJcmdExecutor();\n+\n+            for (long c = 0; c < count; c += STRIDE) {\n+                \/\/ Sizes specifically include heaps below Xms and above Xmx to test saturation code.\n+                jcmd.execute(\"VM.set_flag SoftMaxHeapSize \" + r.nextInt(768*1024*1024), true);\n+                for (long s = 0; s < STRIDE; s++) {\n+                    sink = new Object();\n+                }\n+                Thread.sleep(1);\n@@ -123,1 +179,0 @@\n-            Thread.sleep(1);\n@@ -127,0 +182,15 @@\n+    public static class SoftMaxWithExpectationTest {\n+        static final long TOTAL = 100_000_000;\n+\n+        static volatile Object sink;\n+\n+        public static void main(String[] args) throws Exception {\n+            int expectedSoftMaxHeapSize = Integer.getInteger(\"softMaxCapacity\", 0);\n+            PidJcmdExecutor jcmd = new PidJcmdExecutor();\n+            jcmd.execute(\"VM.set_flag SoftMaxHeapSize \" + expectedSoftMaxHeapSize, false);\n+\n+            for (long s = 0; s < TOTAL; s++) {\n+                sink = new Object();\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestDynamicSoftMaxHeapSize.java","additions":119,"deletions":49,"binary":false,"changes":168,"status":"modified"}]}