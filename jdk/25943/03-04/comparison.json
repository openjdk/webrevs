{"files":[{"patch":"@@ -26,2 +26,30 @@\n-\/*\n- * @test id=dynamicSoftMaxHeapSize\n+\/**\n+ * @test id=satb-adaptive\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000\n+ *      -XX:ShenandoahGCMode=satb\n+ *      -XX:+ShenandoahDegeneratedGC\n+ *      -XX:ShenandoahGCHeuristics=adaptive\n+ *      TestDynamicSoftMaxHeapSize\n+ *\n+ *\/\n+\n+\/**\n+ * @test id=satb-aggressive\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000\n+ *      -XX:ShenandoahGCMode=satb\n+ *      -XX:+ShenandoahDegeneratedGC\n+ *      -XX:ShenandoahGCHeuristics=aggressive\n+ *      TestDynamicSoftMaxHeapSize\n+ *\n+ *\/\n+\n+\/**\n+ * @test id=satb-compact\n@@ -31,1 +59,39 @@\n- * @run driver TestDynamicSoftMaxHeapSize\n+ * @run main\/othervm -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000\n+ *      -XX:ShenandoahGCMode=satb\n+ *      -XX:+ShenandoahDegeneratedGC\n+ *      -XX:ShenandoahGCHeuristics=compact\n+ *      TestDynamicSoftMaxHeapSize\n+ *\n+ *\/\n+\n+\/**\n+ * @test id=satb-static\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000\n+ *      -XX:ShenandoahGCMode=satb\n+ *      -XX:+ShenandoahDegeneratedGC\n+ *      -XX:ShenandoahGCHeuristics=static\n+ *      TestDynamicSoftMaxHeapSize\n+ *\n+ *\/\n+\n+\/**\n+ * @test id=passive\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive\n+ *      -XX:+ShenandoahDegeneratedGC\n+ *      -Dtarget=10000\n+ *      TestDynamicSoftMaxHeapSize\n+ *\n+ * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive\n+ *      -XX:-ShenandoahDegeneratedGC\n+ *      -Dtarget=10000\n+ *      TestDynamicSoftMaxHeapSize\n@@ -34,0 +100,25 @@\n+\/**\n+ * @test id=generational\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000\n+ *      -XX:ShenandoahGCMode=generational\n+ *      -XX:ShenandoahGCHeuristics=adaptive\n+ *      TestDynamicSoftMaxHeapSize\n+ *\n+ *\/\n+\n+\/**\n+ * @test id=generational-softMaxHeapSizeValidation\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -DvalidateSoftMaxHeap=true\n+ *      TestDynamicSoftMaxHeapSize\n+ *      -Xms100m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n+ *      -XX:+UseShenandoahGC -Xlog:gc=info -Dtarget=10000 -DverifySoftMaxHeapValue=true\n+ *      -XX:ShenandoahGCMode=generational\n+ *      -XX:ShenandoahGCHeuristics=adaptive\n+ *\/\n@@ -48,12 +139,0 @@\n-    static final List<String> COMMON_COMMANDS = Arrays.asList(\"-Xms\" + XMS_MB + \"m\",\n-            \"-Xmx\" + XMX_MB + \"m\",\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:+UnlockExperimentalVMOptions\",\n-            \"-XX:+UseShenandoahGC\",\n-            \"-Xlog:gc=info\",\n-            \"-Dtest.jdk=\" + System.getProperty(\"test.jdk\"),\n-            \"-Dcompile.jdk=\" + System.getProperty(\"compile.jdk\"),\n-            \"-Dtarget=10000\"\n-    );\n-    static final List<String> HEURISTICS = Arrays.asList(\"adaptive\", \"aggressive\", \"compact\", \"static\");\n-\n@@ -62,10 +141,16 @@\n-        \/\/ satb gc mode\n-        List<String> satbGCModeArgsNoDegeneratedGC = new ArrayList<>(COMMON_COMMANDS);\n-        satbGCModeArgsNoDegeneratedGC.add(\"-XX:ShenandoahGCMode=satb\");\n-\n-        for (String heuristic : HEURISTICS) {\n-            satbGCModeArgsNoDegeneratedGC.add(\"-XX:ShenandoahGCHeuristics=\" + heuristic);\n-            satbGCModeArgsNoDegeneratedGC.add(SoftMaxSetFlagOnlyTest.class.getName());\n-\n-            ProcessBuilder satbPb = ProcessTools.createLimitedTestJavaProcessBuilder(satbGCModeArgsNoDegeneratedGC);\n-            new OutputAnalyzer(satbPb.start()).shouldHaveExitValue(0);\n+        if (\"true\".equals(System.getProperty(\"validateSoftMaxHeap\"))) {\n+            List<String> flagArgs = new ArrayList<>(Arrays.asList(args));\n+\n+            int softMaxInMb = Utils.getRandomInstance().nextInt(XMS_MB, XMX_MB);\n+            flagArgs.add(\"-DsoftMaxCapacity=\" + softMaxInMb * K * K);\n+            flagArgs.add(\"-Dtest.jdk=\" + System.getProperty(\"test.jdk\"));\n+            flagArgs.add(\"-Dcompile.jdk=\" + System.getProperty(\"compile.jdk\"));\n+\n+            flagArgs.add(SoftMaxWithExpectationTest.class.getName());\n+\n+            ProcessBuilder genShenPbValidateFlag = ProcessTools.createLimitedTestJavaProcessBuilder(flagArgs);\n+            OutputAnalyzer output = new OutputAnalyzer(genShenPbValidateFlag.start());\n+            output.shouldHaveExitValue(0);\n+            output.shouldContain(String.format(\"Soft Max Heap Size: %dM -> %dM\", XMX_MB, softMaxInMb)); \/\/ By default, the soft max heap size is Xmx\n+        } else {\n+            SoftMaxSetFlagOnlyTest.test();\n@@ -73,37 +158,0 @@\n-\n-        \/\/ passive gc mode\n-        List<String> degeneratedJvmArgs = Arrays.asList(\"-XX:+ShenandoahDegeneratedGC\", \"-XX:-ShenandoahDegeneratedGC\");\n-\n-        List<String> passiveGCModeArgs = new ArrayList<>(COMMON_COMMANDS);\n-        passiveGCModeArgs.add(\"-XX:ShenandoahGCMode=passive\");\n-\n-        for (String degeneratedJvmArg : degeneratedJvmArgs) {\n-            passiveGCModeArgs.add(degeneratedJvmArg);\n-            passiveGCModeArgs.add(SoftMaxSetFlagOnlyTest.class.getName());\n-\n-            ProcessBuilder passivePb = ProcessTools.createLimitedTestJavaProcessBuilder(passiveGCModeArgs);\n-            new OutputAnalyzer(passivePb.start()).shouldHaveExitValue(0);\n-        }\n-\n-        \/\/ generational gc mode. gen shen only works in pair with adaptive heuristic\n-        List<String> genShenGCModeSetFlagOnlyArgs = new ArrayList<>(COMMON_COMMANDS);\n-        genShenGCModeSetFlagOnlyArgs.add(\"-XX:ShenandoahGCMode=generational\");\n-\n-        genShenGCModeSetFlagOnlyArgs.add(SoftMaxSetFlagOnlyTest.class.getName());\n-\n-        ProcessBuilder genShenPbSetFlagOnly = ProcessTools.createLimitedTestJavaProcessBuilder(genShenGCModeSetFlagOnlyArgs);\n-        new OutputAnalyzer(genShenPbSetFlagOnly.start()).shouldHaveExitValue(0);\n-\n-        \/\/ generational gc mode. Verify if it can detect soft max heap change when app is running\n-        int softMaxInMb = Utils.getRandomInstance().nextInt(XMS_MB, XMX_MB + 1);\n-\n-        List<String> genShenGCModeValidateFlagArgs = new ArrayList<>(COMMON_COMMANDS);\n-        genShenGCModeValidateFlagArgs.add(\"-XX:ShenandoahGCMode=generational\");\n-        genShenGCModeValidateFlagArgs.add(\"-DsoftMaxCapacity=\" + softMaxInMb * K * K);\n-\n-        genShenGCModeValidateFlagArgs.add(SoftMaxWithExpectationTest.class.getName());\n-\n-        ProcessBuilder genShenPbValidateFlag = ProcessTools.createLimitedTestJavaProcessBuilder(genShenGCModeValidateFlagArgs);\n-        OutputAnalyzer output = new OutputAnalyzer(genShenPbValidateFlag.start());\n-        output.shouldHaveExitValue(0);\n-        output.shouldContain(String.format(\"Soft Max Heap Size: %dM -> %dM\", XMX_MB, softMaxInMb)); \/\/ By default, the soft max heap size is Xmx\n@@ -118,1 +166,1 @@\n-        public static void main(String[] args) throws Exception {\n+        public static void test() throws Exception {\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestDynamicSoftMaxHeapSize.java","additions":111,"deletions":63,"binary":false,"changes":174,"status":"modified"}]}