{"files":[{"patch":"@@ -809,1 +809,1 @@\n-  _max_capacity(max_capacity), _soft_max_capacity(soft_max_capacity),\n+  _max_capacity(max_capacity),\n@@ -1014,0 +1014,6 @@\n+\n+size_t ShenandoahGeneration::soft_max_capacity() const {\n+  size_t capacity = ShenandoahGenerationalHeap::heap()->soft_max_capacity();\n+  log_debug(gc)(\"soft_max_capacity: %zu\", capacity); \/\/ TestDynamicSoftMaxHeapSize needs the log line to validate\n+  return capacity;\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -74,1 +74,0 @@\n-  size_t _soft_max_capacity;\n@@ -129,1 +128,1 @@\n-  size_t soft_max_capacity() const override { return _soft_max_capacity; }\n+  size_t soft_max_capacity() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -204,2 +205,1 @@\n-  \/\/ Default to max heap size.\n-  _soft_max_size = _num_regions * reg_size_bytes;\n+  _soft_max_size = SoftMaxHeapSize;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @test id=passive\n+ * @test id=dynamicSoftMaxHeapSize\n@@ -31,11 +31,1 @@\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive\n- *      -XX:+ShenandoahDegeneratedGC\n- *      -Dtarget=10000\n- *      TestDynamicSoftMaxHeapSize\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive\n- *      -XX:-ShenandoahDegeneratedGC\n- *      -Dtarget=10000\n- *      TestDynamicSoftMaxHeapSize\n+ * @run driver TestDynamicSoftMaxHeapSize\n@@ -43,0 +33,4 @@\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -44,10 +38,4 @@\n-\/*\n- * @test id=aggressive\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive\n- *      -Dtarget=1000\n- *      TestDynamicSoftMaxHeapSize\n- *\/\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n@@ -55,10 +43,13 @@\n-\/*\n- * @test id=adaptive\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive\n- *      -Dtarget=10000\n- *      TestDynamicSoftMaxHeapSize\n- *\/\n+public class TestDynamicSoftMaxHeapSize {\n+    static final int K = 1024;\n+    static final List<String> COMMON_COMMANDS = Arrays.asList(\"-Xms16m\",\n+            \"-Xmx512m\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-XX:+UseShenandoahGC\",\n+            \"-Xlog:gc=debug\",\n+            \"-Dtest.jdk=\" + System.getProperty(\"test.jdk\"),\n+            \"-Dcompile.jdk=\" + System.getProperty(\"compile.jdk\"),\n+            \"-Dtarget=10000\"\n+            );\n+    static final List<String> HEURISTICS = Arrays.asList(\"adaptive\", \"aggressive\", \"compact\", \"static\");\n@@ -66,10 +57,0 @@\n-\/*\n- * @test id=generational\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=adaptive -XX:ShenandoahGCMode=generational\n- *      -Dtarget=10000\n- *      TestDynamicSoftMaxHeapSize\n- *\/\n@@ -77,10 +58,4 @@\n-\/*\n- * @test id=static\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=static\n- *      -Dtarget=10000\n- *      TestDynamicSoftMaxHeapSize\n- *\/\n+    public static void main(String[] args) throws Exception {\n+        \/\/ satb gc mode\n+        List<String> satbGCModeArgsNoDegeneratedGC = new ArrayList<>(COMMON_COMMANDS);\n+        satbGCModeArgsNoDegeneratedGC.add(\"-XX:ShenandoahGCMode=satb\");\n@@ -88,10 +63,3 @@\n-\/*\n- * @test id=compact\n- * @requires vm.gc.Shenandoah\n- * @library \/test\/lib\n- *\n- * @run main\/othervm -Xms16m -Xmx512m -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions\n- *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=compact\n- *      -Dtarget=1000\n- *     TestDynamicSoftMaxHeapSize\n- *\/\n+        for (String heuristic : HEURISTICS) {\n+            satbGCModeArgsNoDegeneratedGC.add(\"-XX:ShenandoahGCHeuristics=\" + heuristic);\n+            satbGCModeArgsNoDegeneratedGC.add(SoftMaxSetFlagOnlyTest.class.getName());\n@@ -99,5 +67,3 @@\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.dcmd.PidJcmdExecutor;\n+            ProcessBuilder satbPb = ProcessTools.createLimitedTestJavaProcessBuilder(satbGCModeArgsNoDegeneratedGC);\n+            new OutputAnalyzer(satbPb.start()).shouldHaveExitValue(0);\n+        }\n@@ -105,1 +71,2 @@\n-public class TestDynamicSoftMaxHeapSize {\n+        \/\/ passive gc mode\n+        List<String> degeneratedJvmArgs = Arrays.asList(\"-XX:+ShenandoahDegeneratedGC\", \"-XX:-ShenandoahDegeneratedGC\");\n@@ -107,2 +74,2 @@\n-    static final long TARGET_MB = Long.getLong(\"target\", 10_000); \/\/ 10 Gb allocation\n-    static final long STRIDE = 10_000_000;\n+        List<String> passiveGCModeArgs = new ArrayList<>(COMMON_COMMANDS);\n+        passiveGCModeArgs.add(\"-XX:ShenandoahGCMode=passive\");\n@@ -110,1 +77,3 @@\n-    static volatile Object sink;\n+        for (String degeneratedJvmArg : degeneratedJvmArgs) {\n+            passiveGCModeArgs.add(degeneratedJvmArg);\n+            passiveGCModeArgs.add(SoftMaxSetFlagOnlyTest.class.getName());\n@@ -112,10 +81,48 @@\n-    public static void main(String[] args) throws Exception {\n-        long count = TARGET_MB * 1024 * 1024 \/ 16;\n-        Random r = Utils.getRandomInstance();\n-        PidJcmdExecutor jcmd = new PidJcmdExecutor();\n-\n-        for (long c = 0; c < count; c += STRIDE) {\n-            \/\/ Sizes specifically include heaps below Xms and above Xmx to test saturation code.\n-            jcmd.execute(\"VM.set_flag SoftMaxHeapSize \" + r.nextInt(768*1024*1024), true);\n-            for (long s = 0; s < STRIDE; s++) {\n-                sink = new Object();\n+            ProcessBuilder passivePb = ProcessTools.createLimitedTestJavaProcessBuilder(passiveGCModeArgs);\n+            new OutputAnalyzer(passivePb.start()).shouldHaveExitValue(0);\n+        }\n+\n+        \/\/ generational gc mode. gen shen only works in pair with adaptive heuristic\n+        List<String> genShenGCModeSetFlagOnlyArgs = new ArrayList<>(COMMON_COMMANDS);\n+        genShenGCModeSetFlagOnlyArgs.add(\"-XX:ShenandoahGCMode=generational\");\n+\n+        genShenGCModeSetFlagOnlyArgs.add(SoftMaxSetFlagOnlyTest.class.getName());\n+\n+        ProcessBuilder genShenPbSetFlagOnly = ProcessTools.createLimitedTestJavaProcessBuilder(genShenGCModeSetFlagOnlyArgs);\n+        new OutputAnalyzer(genShenPbSetFlagOnly.start()).shouldHaveExitValue(0);\n+\n+        \/\/ generational gc mode. Verify if it can detect soft max heap change when app is running\n+        int xMsHeapInByte = 16 * K * K;\n+        int xMxHeapInByte = 512 * K * K;\n+        int softMaxInByte = Utils.getRandomInstance().nextInt(xMsHeapInByte, xMxHeapInByte + 1);\n+\n+        List<String> genShenGCModeValidateFlagArgs = new ArrayList<>(COMMON_COMMANDS);\n+        genShenGCModeValidateFlagArgs.add(\"-XX:ShenandoahGCMode=generational\");\n+        genShenGCModeValidateFlagArgs.add(\"-DsoftMaxCapacity=\" + softMaxInByte);\n+\n+        genShenGCModeValidateFlagArgs.add(SoftMaxWithExpectationTest.class.getName());\n+\n+        ProcessBuilder genShenPbValidateFlag = ProcessTools.createLimitedTestJavaProcessBuilder(genShenGCModeValidateFlagArgs);\n+        OutputAnalyzer output = new OutputAnalyzer(genShenPbValidateFlag.start());\n+        output.shouldHaveExitValue(0);\n+        output.shouldContain(\"soft_max_capacity: \" + softMaxInByte);\n+    }\n+\n+    public static class SoftMaxSetFlagOnlyTest {\n+        static final long TARGET_MB = Long.getLong(\"target\", 10_000); \/\/ 10 Gb allocation\n+        static final long STRIDE = 10_000_000;\n+\n+        static volatile Object sink;\n+\n+        public static void main(String[] args) throws Exception {\n+            long count = TARGET_MB * 1024 * 1024 \/ 16;\n+            Random r = Utils.getRandomInstance();\n+            PidJcmdExecutor jcmd = new PidJcmdExecutor();\n+\n+            for (long c = 0; c < count; c += STRIDE) {\n+                \/\/ Sizes specifically include heaps below Xms and above Xmx to test saturation code.\n+                jcmd.execute(\"VM.set_flag SoftMaxHeapSize \" + r.nextInt(768*1024*1024), true);\n+                for (long s = 0; s < STRIDE; s++) {\n+                    sink = new Object();\n+                }\n+                Thread.sleep(1);\n@@ -123,1 +130,0 @@\n-            Thread.sleep(1);\n@@ -127,0 +133,15 @@\n+    public static class SoftMaxWithExpectationTest {\n+        static final long TOTAL = 100_000_000;\n+\n+        static volatile Object sink;\n+\n+        public static void main(String[] args) throws Exception {\n+            int expectedSoftMaxHeapSize = Integer.getInteger(\"softMaxCapacity\", 0);\n+            PidJcmdExecutor jcmd = new PidJcmdExecutor();\n+            jcmd.execute(\"VM.set_flag SoftMaxHeapSize \" + expectedSoftMaxHeapSize, false);\n+\n+            for (long s = 0; s < TOTAL; s++) {\n+                sink = new Object();\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/TestDynamicSoftMaxHeapSize.java","additions":103,"deletions":82,"binary":false,"changes":185,"status":"modified"}]}