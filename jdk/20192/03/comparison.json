{"files":[{"patch":"@@ -3055,1 +3055,1 @@\n-  if (m->is_initializer()) {\n+  if (m->is_object_initializer()) {\n@@ -3058,0 +3058,1 @@\n+    \/\/ Note: Static initializers can be here. Record them as plain methods.\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -447,1 +447,1 @@\n-  if (m->is_initializer()) {\n+  if (m->is_object_initializer()) {\n@@ -450,0 +450,1 @@\n+    assert(!m->is_static_initializer(), \"Cannot be static initializer\");\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1829,8 +1829,0 @@\n-static bool select_method(const methodHandle& method, bool want_constructor) {\n-  if (want_constructor) {\n-    return (method->is_initializer() && !method->is_static());\n-  } else {\n-    return  (!method->is_initializer() && !method->is_overpass());\n-  }\n-}\n-\n@@ -1869,0 +1861,1 @@\n+  \/\/ Select methods matching the criteria.\n@@ -1870,6 +1863,8 @@\n-    methodHandle method(THREAD, methods->at(i));\n-    if (select_method(method, want_constructor)) {\n-      if (!publicOnly || method->is_public()) {\n-        idnums->push(method->method_idnum());\n-        ++num_methods;\n-      }\n+    Method* method = methods->at(i);\n+    if (want_constructor && !method->is_object_initializer()) {\n+      continue;\n+    }\n+    if (!want_constructor &&\n+        (method->is_object_initializer() || method->is_static_initializer() ||\n+         method->is_overpass())) {\n+      continue;\n@@ -1877,0 +1872,5 @@\n+    if (publicOnly && !method->is_public()) {\n+      continue;\n+    }\n+    idnums->push(method->method_idnum());\n+    ++num_methods;\n@@ -2178,3 +2178,1 @@\n-  if (!m->is_initializer() || m->is_static()) {\n-    method = Reflection::new_method(m, true, CHECK_NULL);\n-  } else {\n+  if (m->is_object_initializer()) {\n@@ -2182,0 +2180,3 @@\n+  } else {\n+    \/\/ new_method accepts <clinit> as Method here\n+    method = Reflection::new_method(m, true, CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -316,0 +316,1 @@\n+      assert(!m->is_static_initializer(), \"Cannot be static initializer\");\n@@ -317,1 +318,1 @@\n-    } else if (m->is_initializer()) {\n+    } else if (m->is_object_initializer()) {\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -769,4 +769,4 @@\n-  \/\/ Allow sun.reflect.ConstantPool to refer to <clinit> methods as java.lang.reflect.Methods.\n-  assert(!method()->is_initializer() ||\n-         (for_constant_pool_access && method()->is_static()),\n-         \"should call new_constructor instead\");\n+  \/\/ Allow jdk.internal.reflect.ConstantPool to refer to <clinit> methods as java.lang.reflect.Methods.\n+  assert(!method()->is_object_initializer() &&\n+         (for_constant_pool_access || !method()->is_static_initializer()),\n+         \"Should not be the initializer\");\n@@ -820,1 +820,1 @@\n-  assert(method()->is_initializer(), \"should call new_method instead\");\n+  assert(method()->is_object_initializer(), \"Should be the initializer\");\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}