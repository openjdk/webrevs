{"files":[{"patch":"@@ -857,0 +857,6 @@\n+  \/\/ If either input is all ones, the output is all ones.\n+  \/\/ x | ~0 == ~0 <==> x | -1 == -1\n+  if (r0 == TypeInt::MINUS_1 || r1 == TypeInt::MINUS_1) {\n+    return TypeInt::MINUS_1;\n+  }\n+\n@@ -914,0 +920,6 @@\n+  \/\/ If either input is all ones, the output is all ones.\n+  \/\/ x | ~0 == ~0 <==> x | -1 == -1\n+  if (r0 == TypeLong::MINUS_1 || r1 == TypeLong::MINUS_1) {\n+    return TypeLong::MINUS_1;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+ package compiler.integerArithmetic;\n+\n+ import compiler.lib.ir_framework.*;\n+ import jdk.test.lib.Asserts;\n+\n+ \/*\n+  * @test\n+  * @bug 8352893\n+  * @summary Test that an or with all bits set is folded to all bits (x | -1 == -1).\n+  * @library \/ \/test\/lib\n+  * @run driver compiler.integerArithmetic.TestOrSaturate\n+  *\/\n+\n+public class TestOrSaturate {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    private final static int WARMUP = 10_000;\n+\n+    @Run(test = {\"testL\", \"testI\", \"testDelayed\"})\n+    public static void check() {\n+        for (int i = 0; i < WARMUP; i++) {\n+            Asserts.assertEQ(-1L, testL(i));\n+            Asserts.assertEQ(-1, testI(i));\n+            Asserts.assertEQ(-1, testDelayed(i));\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.OR_L })\n+    \/\/ Tests that the OrLNode is folded if one operand is -1.\n+    private static long testL(long x) {\n+        return x | -1L;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.OR_I })\n+    \/\/ Tests that the OrINode is folded if one operand is -1.\n+    private static int testI(int x) {\n+        return x | -1;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.OR_I, \"1\"},\n+        phase = CompilePhase.AFTER_PARSING)\n+    @IR(failOn = { IRNode.OR_I })\n+    \/\/ Tests that the OrI node is folded after parsing if one operand is -1.\n+    private static int testDelayed(int x) {\n+        int min1 = 42;\n+        int limit = 2;\n+\n+        \/\/ Ensure that min1 == -1 is only known after some constant propagation.\n+        for (; limit < 4; limit *= 2) {}\n+        for (int i = 2; i < limit; i++) {\n+            min1 = -1;\n+        }\n+\n+        \/\/ Will only be folded after min1 == -1 is established.\n+        return x | min1;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/integerArithmetic\/TestOrSaturate.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -1443,0 +1443,10 @@\n+    public static final String OR_I = PREFIX + \"OR_I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(OR_I, \"OrI\");\n+    }\n+\n+    public static final String OR_L = PREFIX + \"OR_L\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(OR_L, \"OrL\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}