{"files":[{"patch":"@@ -31,1 +31,0 @@\n-import nsk.share.jpda.*;\n@@ -61,1 +60,1 @@\n-public class BindServer implements Finalizable {\n+public final class BindServer {\n@@ -91,1 +90,0 @@\n-    private ListeningThread listeningThread = null;\n@@ -152,2 +150,0 @@\n-        registerCleanup();\n-\n@@ -181,0 +177,3 @@\n+        try (ListeningThread listeningThread = new ListeningThread(this)) {\n+            listeningThread.bind();\n+            listeningThread.start();\n@@ -182,8 +181,4 @@\n-        listeningThread = new ListeningThread(this);\n-        listeningThread.bind();\n-        listeningThread.start();\n-\n-        System.out.println(\"\\n\"\n-                          + \"BindServer started\" + \"\\n\"\n-                          + \"Type \\\"exit\\\" to shut down BindServer\"\n-                          + \"\\n\");\n+            System.out.println(\"\\n\"\n+                              + \"BindServer started\" + \"\\n\"\n+                              + \"Type \\\"exit\\\" to shut down BindServer\"\n+                              + \"\\n\");\n@@ -191,13 +186,18 @@\n-        for (;;) {\n-            try {\n-                String userInput = stdIn.readLine();\n-                if (userInput == null || userInput.equals(\"exit\")\n-                        || userInput.equals(\"quit\")) {\n-                    logger.display(\"Shutting down BindServer\");\n-                    stdIn.close();\n-                    stdIn = null;\n-                    break;\n-                } else if (userInput.trim().equals(\"\")) {\n-                    continue;\n-                } else {\n-                    System.out.println(\"ERROR: Unknown command: \" + userInput);\n+            for (; ; ) {\n+                try {\n+                    String userInput = stdIn.readLine();\n+                    if (userInput == null || userInput.equals(\"exit\")\n+                            || userInput.equals(\"quit\")) {\n+                        logger.display(\"Shutting down BindServer\");\n+                        stdIn.close();\n+                        stdIn = null;\n+                        break;\n+                    } else if (userInput.trim().equals(\"\")) {\n+                        continue;\n+                    } else {\n+                        System.out.println(\"ERROR: Unknown command: \" + userInput);\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace(log.getOutStream());\n+                    throw new Failure(\"Caught exception while reading console command:\\n\\t\"\n+                            + e);\n@@ -205,4 +205,0 @@\n-            } catch(IOException e) {\n-                e.printStackTrace(log.getOutStream());\n-                throw new Failure(\"Caught exception while reading console command:\\n\\t\"\n-                                    + e);\n@@ -210,1 +206,0 @@\n-        }\n@@ -212,1 +207,1 @@\n-        printSummary(System.out);\n+            printSummary(System.out);\n@@ -214,6 +209,1 @@\n-        logger.trace(TRACE_LEVEL_THREADS, \"BindServer: exiting main thread\");\n-        try {\n-            cleanup();\n-        } catch (Throwable e) {\n-            e.printStackTrace(log.getOutStream());\n-            logger.complain(\"Caught exception while finalization of BindServer:\\n\\t\" + e);\n+            logger.trace(TRACE_LEVEL_THREADS, \"BindServer: exiting main thread\");\n@@ -390,32 +380,0 @@\n-    \/**\n-     * Close <code>BindServer<\/code> by finishing all threads and closing\n-     * all conections.\n-     *\/\n-    public synchronized void close() {\n-        if (listeningThread != null) {\n-            listeningThread.close();\n-            listeningThread = null;\n-        }\n-    }\n-\n-    \/**\n-     * Make finalization of <code>BindServer<\/code> object by invoking\n-     * method <code>close()<\/code>.\n-     *\n-     * @see #close()\n-     *\/\n-    @Override\n-    public void cleanup() {\n-        close();\n-    }\n-\n-    \/**\n-     * Make finalization of <code>BindServer<\/code> object at program exit\n-     * by invoking method <code>cleanup()<\/code>.\n-     *\n-     *\/\n-    public void finalizeAtExit() throws Throwable {\n-        cleanup();\n-        logger.trace(TRACE_LEVEL_THREADS, \"BindServer: finalization at exit completed\");\n-    }\n-\n@@ -430,1 +388,1 @@\n-    private static class ListeningThread extends Thread {\n+    private static class ListeningThread extends Thread implements AutoCloseable {\n@@ -676,1 +634,1 @@\n-         * foor thread finished.\n+         * for thread to finish.\n@@ -680,0 +638,1 @@\n+        @Override\n@@ -684,4 +643,13 @@\n-            closeHostConnection();\n-            if (servingThread != null) {\n-                servingThread.close();\n-                servingThread = null;\n+            try {\n+                closeHostConnection();\n+                if (servingThread != null) {\n+                    servingThread.close();\n+                    servingThread = null;\n+                }\n+                waitForThread(THREAD_TIMEOUT);\n+                closeConnection();\n+                closed = true;\n+                logger.trace(TRACE_LEVEL_THREADS, \"ListeningThread closed\");\n+            } catch (Throwable e) {\n+                e.printStackTrace(log.getOutStream());\n+                logger.complain(\"Caught exception while closing ListeningThread:\\n\\t\" + e);\n@@ -689,4 +657,0 @@\n-            waitForThread(THREAD_TIMEOUT);\n-            closeConnection();\n-            closed = true;\n-            logger.trace(TRACE_LEVEL_THREADS, \"ListeningThread closed\");\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/BindServer.java","additions":44,"deletions":80,"binary":false,"changes":124,"status":"modified"}]}