{"files":[{"patch":"@@ -24,0 +24,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -49,1 +50,1 @@\n-import static org.testng.Assert.assertSame;\n+import static org.testng.Assert.assertEquals;\n@@ -59,0 +60,55 @@\n+    @DataProvider(name = \"validateFields\")\n+    public Object[][] knownFieldsData() {\n+        return new Object[][]{\n+                {CD_Object, Object.class},\n+                {CD_String, String.class},\n+                {CD_Class, Class.class},\n+                {CD_Number, Number.class},\n+                {CD_Integer, Integer.class},\n+                {CD_Long, Long.class},\n+                {CD_Float, Float.class},\n+                {CD_Double, Double.class},\n+                {CD_Short, Short.class},\n+                {CD_Byte, Byte.class},\n+                {CD_Character, Character.class},\n+                {CD_Boolean, Boolean.class},\n+                {CD_Void, Void.class},\n+                {CD_Exception, Exception.class},\n+                {CD_Throwable, Throwable.class},\n+                {CD_Enum, Enum.class},\n+                {CD_VarHandle, VarHandle.class},\n+                {CD_MethodHandles, MethodHandles.class},\n+                {CD_MethodHandles_Lookup, MethodHandles.Lookup.class},\n+                {CD_MethodHandle, MethodHandle.class},\n+                {CD_MethodType, MethodType.class},\n+                {CD_CallSite, CallSite.class},\n+                {CD_Collection, Collection.class},\n+                {CD_List, List.class},\n+                {CD_Set, Set.class},\n+                {CD_Map, Map.class},\n+                {CD_ConstantDesc, ConstantDesc.class},\n+                {CD_ClassDesc, ClassDesc.class},\n+                {CD_EnumDesc, Enum.EnumDesc.class},\n+                {CD_MethodTypeDesc, MethodTypeDesc.class},\n+                {CD_MethodHandleDesc, MethodHandleDesc.class},\n+                {CD_DirectMethodHandleDesc, DirectMethodHandleDesc.class},\n+                {CD_VarHandleDesc, VarHandle.VarHandleDesc.class},\n+                {CD_MethodHandleDesc_Kind, DirectMethodHandleDesc.Kind.class},\n+                {CD_DynamicConstantDesc, DynamicConstantDesc.class},\n+                {CD_DynamicCallSiteDesc, DynamicCallSiteDesc.class},\n+                {CD_ConstantBootstraps, ConstantBootstraps.class},\n+                {CD_int, int.class},\n+                {CD_long, long.class},\n+                {CD_float, float.class},\n+                {CD_double, double.class},\n+                {CD_short, short.class},\n+                {CD_byte, byte.class},\n+                {CD_char, char.class},\n+                {CD_boolean, boolean.class},\n+                {CD_void, void.class},\n+                {NULL, null},\n+                {TRUE, Boolean.TRUE},\n+                {FALSE, Boolean.FALSE},\n+        };\n+    }\n+\n@@ -64,2 +120,2 @@\n-    @Test\n-    public void validateAllFields() throws ReflectiveOperationException {\n+    @Test(dataProvider = \"validateFields\")\n+    public void validateFields(ConstantDesc desc, Object value) throws ReflectiveOperationException {\n@@ -67,51 +123,1 @@\n-        var lookup = MethodHandles.publicLookup();\n-\n-        assertSame(CD_Object.resolveConstantDesc(lookup), Object.class);\n-        assertSame(CD_String.resolveConstantDesc(lookup), String.class);\n-        assertSame(CD_Class.resolveConstantDesc(lookup), Class.class);\n-        assertSame(CD_Number.resolveConstantDesc(lookup), Number.class);\n-        assertSame(CD_Integer.resolveConstantDesc(lookup), Integer.class);\n-        assertSame(CD_Long.resolveConstantDesc(lookup), Long.class);\n-        assertSame(CD_Float.resolveConstantDesc(lookup), Float.class);\n-        assertSame(CD_Double.resolveConstantDesc(lookup), Double.class);\n-        assertSame(CD_Short.resolveConstantDesc(lookup), Short.class);\n-        assertSame(CD_Byte.resolveConstantDesc(lookup), Byte.class);\n-        assertSame(CD_Character.resolveConstantDesc(lookup), Character.class);\n-        assertSame(CD_Boolean.resolveConstantDesc(lookup), Boolean.class);\n-        assertSame(CD_Void.resolveConstantDesc(lookup), Void.class);\n-        assertSame(CD_Exception.resolveConstantDesc(lookup), Exception.class);\n-        assertSame(CD_Throwable.resolveConstantDesc(lookup), Throwable.class);\n-        assertSame(CD_Enum.resolveConstantDesc(lookup), Enum.class);\n-        assertSame(CD_VarHandle.resolveConstantDesc(lookup), VarHandle.class);\n-        assertSame(CD_MethodHandles.resolveConstantDesc(lookup), MethodHandles.class);\n-        assertSame(CD_MethodHandles_Lookup.resolveConstantDesc(lookup), MethodHandles.Lookup.class);\n-        assertSame(CD_MethodHandle.resolveConstantDesc(lookup), MethodHandle.class);\n-        assertSame(CD_MethodType.resolveConstantDesc(lookup), MethodType.class);\n-        assertSame(CD_CallSite.resolveConstantDesc(lookup), CallSite.class);\n-        assertSame(CD_Collection.resolveConstantDesc(lookup), Collection.class);\n-        assertSame(CD_List.resolveConstantDesc(lookup), List.class);\n-        assertSame(CD_Set.resolveConstantDesc(lookup), Set.class);\n-        assertSame(CD_Map.resolveConstantDesc(lookup), Map.class);\n-        assertSame(CD_ConstantDesc.resolveConstantDesc(lookup), ConstantDesc.class);\n-        assertSame(CD_ClassDesc.resolveConstantDesc(lookup), ClassDesc.class);\n-        assertSame(CD_EnumDesc.resolveConstantDesc(lookup), Enum.EnumDesc.class);\n-        assertSame(CD_MethodTypeDesc.resolveConstantDesc(lookup), MethodTypeDesc.class);\n-        assertSame(CD_MethodHandleDesc.resolveConstantDesc(lookup), MethodHandleDesc.class);\n-        assertSame(CD_DirectMethodHandleDesc.resolveConstantDesc(lookup), DirectMethodHandleDesc.class);\n-        assertSame(CD_VarHandleDesc.resolveConstantDesc(lookup), VarHandle.VarHandleDesc.class);\n-        assertSame(CD_MethodHandleDesc_Kind.resolveConstantDesc(lookup), DirectMethodHandleDesc.Kind.class);\n-        assertSame(CD_DynamicConstantDesc.resolveConstantDesc(lookup), DynamicConstantDesc.class);\n-        assertSame(CD_DynamicCallSiteDesc.resolveConstantDesc(lookup), DynamicCallSiteDesc.class);\n-        assertSame(CD_ConstantBootstraps.resolveConstantDesc(lookup), ConstantBootstraps.class);\n-        assertSame(CD_int.resolveConstantDesc(lookup), int.class);\n-        assertSame(CD_long.resolveConstantDesc(lookup), long.class);\n-        assertSame(CD_float.resolveConstantDesc(lookup), float.class);\n-        assertSame(CD_double.resolveConstantDesc(lookup), double.class);\n-        assertSame(CD_short.resolveConstantDesc(lookup), short.class);\n-        assertSame(CD_byte.resolveConstantDesc(lookup), byte.class);\n-        assertSame(CD_char.resolveConstantDesc(lookup), char.class);\n-        assertSame(CD_boolean.resolveConstantDesc(lookup), boolean.class);\n-        assertSame(CD_void.resolveConstantDesc(lookup), void.class);\n-        assertSame(NULL.resolveConstantDesc(lookup), null);\n-        assertSame(TRUE.resolveConstantDesc(lookup), Boolean.TRUE);\n-        assertSame(FALSE.resolveConstantDesc(lookup), Boolean.FALSE);\n+        assertEquals(desc.resolveConstantDesc(MethodHandles.publicLookup()), value);\n","filename":"test\/jdk\/java\/lang\/constant\/ConstantDescsTest.java","additions":60,"deletions":54,"binary":false,"changes":114,"status":"modified"}]}