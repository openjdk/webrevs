{"files":[{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.DirectMethodHandleDesc;\n+import java.lang.constant.DynamicCallSiteDesc;\n+import java.lang.constant.DynamicConstantDesc;\n+import java.lang.constant.MethodHandleDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.invoke.CallSite;\n+import java.lang.invoke.ConstantBootstraps;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.invoke.VarHandle;\n+import java.lang.reflect.AccessFlag;\n+import java.lang.reflect.Field;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import static java.lang.constant.ConstantDescs.*;\n+import static org.testng.Assert.assertEquals;\n+\n+\/*\n+ * @test\n+ * @compile ConstantDescsTest.java\n+ * @run testng ConstantDescsTest\n+ * @summary unit tests for java.lang.constant.ConstantDescs\n+ *\/\n+public class ConstantDescsTest {\n+\n+    @DataProvider(name = \"validateFields\")\n+    public Object[][] knownFieldsData() {\n+        return new Object[][]{\n+                {CD_Object, Object.class},\n+                {CD_String, String.class},\n+                {CD_Class, Class.class},\n+                {CD_Number, Number.class},\n+                {CD_Integer, Integer.class},\n+                {CD_Long, Long.class},\n+                {CD_Float, Float.class},\n+                {CD_Double, Double.class},\n+                {CD_Short, Short.class},\n+                {CD_Byte, Byte.class},\n+                {CD_Character, Character.class},\n+                {CD_Boolean, Boolean.class},\n+                {CD_Void, Void.class},\n+                {CD_Exception, Exception.class},\n+                {CD_Throwable, Throwable.class},\n+                {CD_Enum, Enum.class},\n+                {CD_VarHandle, VarHandle.class},\n+                {CD_MethodHandles, MethodHandles.class},\n+                {CD_MethodHandles_Lookup, MethodHandles.Lookup.class},\n+                {CD_MethodHandle, MethodHandle.class},\n+                {CD_MethodType, MethodType.class},\n+                {CD_CallSite, CallSite.class},\n+                {CD_Collection, Collection.class},\n+                {CD_List, List.class},\n+                {CD_Set, Set.class},\n+                {CD_Map, Map.class},\n+                {CD_ConstantDesc, ConstantDesc.class},\n+                {CD_ClassDesc, ClassDesc.class},\n+                {CD_EnumDesc, Enum.EnumDesc.class},\n+                {CD_MethodTypeDesc, MethodTypeDesc.class},\n+                {CD_MethodHandleDesc, MethodHandleDesc.class},\n+                {CD_DirectMethodHandleDesc, DirectMethodHandleDesc.class},\n+                {CD_VarHandleDesc, VarHandle.VarHandleDesc.class},\n+                {CD_MethodHandleDesc_Kind, DirectMethodHandleDesc.Kind.class},\n+                {CD_DynamicConstantDesc, DynamicConstantDesc.class},\n+                {CD_DynamicCallSiteDesc, DynamicCallSiteDesc.class},\n+                {CD_ConstantBootstraps, ConstantBootstraps.class},\n+                {CD_int, int.class},\n+                {CD_long, long.class},\n+                {CD_float, float.class},\n+                {CD_double, double.class},\n+                {CD_short, short.class},\n+                {CD_byte, byte.class},\n+                {CD_char, char.class},\n+                {CD_boolean, boolean.class},\n+                {CD_void, void.class},\n+                {NULL, null},\n+                {TRUE, Boolean.TRUE},\n+                {FALSE, Boolean.FALSE},\n+        };\n+    }\n+\n+    \/**\n+     * Checks that ConstantDescs descriptor fields resolve to the right\n+     * constants.\n+     * @throws ReflectiveOperationException if the test fails\n+     *\/\n+    @Test(dataProvider = \"validateFields\")\n+    public void validateFields(ConstantDesc desc, Object value) throws ReflectiveOperationException {\n+        \/\/ Use a minimally-trusted lookup\n+        assertEquals(desc.resolveConstantDesc(MethodHandles.publicLookup()), value);\n+    }\n+\n+    \/**\n+     * Ensures all public static final descriptor fields in ConstantDescs\n+     * are resolvable.\n+     * @throws ReflectiveOperationException if the test fails\n+     *\/\n+    @Test\n+    public void checkFieldsResolvable() throws ReflectiveOperationException {\n+        \/\/ minimally trusted lookup\n+        var lookup = MethodHandles.publicLookup();\n+        var fields = Stream.of(ConstantDescs.class.getFields())\n+                .filter(f -> f.accessFlags().contains(AccessFlag.STATIC)\n+                        && ConstantDesc.class.isAssignableFrom(f.getType()))\n+                .toArray(Field[]::new);\n+        for (var field : fields) {\n+            var desc = (ConstantDesc) field.get(null);\n+            desc.resolveConstantDesc(lookup);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/constant\/ConstantDescsTest.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"}]}