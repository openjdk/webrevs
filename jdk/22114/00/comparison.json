{"files":[{"patch":"@@ -630,3 +630,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String s = java.security.AccessController.doPrivileged(\n-                                                               new GetPropertyAction(\"awt.image.incrementaldraw\"));\n+        String s = System.getProperty(\"awt.image.incrementaldraw\");\n@@ -635,3 +633,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String s2 = java.security.AccessController.doPrivileged(\n-                                                        new GetPropertyAction(\"awt.image.redrawrate\"));\n+        String s2 = System.getProperty(\"awt.image.redrawrate\");\n@@ -1434,9 +1430,1 @@\n-        @SuppressWarnings(\"removal\")\n-        PointerInfo pi = java.security.AccessController.doPrivileged(\n-                                                                     new java.security.PrivilegedAction<PointerInfo>() {\n-                                                                         public PointerInfo run() {\n-                                                                             return MouseInfo.getPointerInfo();\n-                                                                         }\n-                                                                     }\n-                                                                     );\n-\n+        PointerInfo pi = MouseInfo.getPointerInfo();\n@@ -6256,8 +6244,1 @@\n-             @SuppressWarnings(\"removal\")\n-             Boolean enabled = java.security.AccessController.doPrivileged(\n-                 new java.security.PrivilegedAction<Boolean>() {\n-                     public Boolean run() {\n-                         return isCoalesceEventsOverriden(clazz);\n-                     }\n-                 }\n-                 );\n+             Boolean enabled = isCoalesceEventsOverriden(clazz);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Component.java","additions":4,"deletions":23,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1579,4 +1579,2 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean isJavaAwtSmartInvalidate\n-            = AccessController.doPrivileged(\n-                new GetBooleanAction(\"java.awt.smartInvalidate\"));\n+    private static final boolean isJavaAwtSmartInvalidate =\n+        Boolean.getBoolean(\"java.awt.smartInvalidate\");\n@@ -2635,8 +2633,1 @@\n-        @SuppressWarnings(\"removal\")\n-        PointerInfo pi = java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<PointerInfo>() {\n-                public PointerInfo run() {\n-                    return MouseInfo.getPointerInfo();\n-                }\n-            }\n-        );\n+        PointerInfo pi = MouseInfo.getPointerInfo();\n@@ -4741,1 +4732,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -4744,11 +4734,4 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Object>() {\n-                public Object run() {\n-                    nativeContainer.getToolkit().addAWTEventListener(\n-                        LightweightDispatcher.this,\n-                        AWTEvent.MOUSE_EVENT_MASK |\n-                        AWTEvent.MOUSE_MOTION_EVENT_MASK);\n-                    return null;\n-                }\n-            }\n-        );\n+        nativeContainer.getToolkit().addAWTEventListener(\n+            LightweightDispatcher.this,\n+            AWTEvent.MOUSE_EVENT_MASK |\n+            AWTEvent.MOUSE_MOTION_EVENT_MASK);\n@@ -4757,1 +4740,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -4760,8 +4742,1 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Object>() {\n-                public Object run() {\n-                    nativeContainer.getToolkit().removeAWTEventListener(LightweightDispatcher.this);\n-                    return null;\n-                }\n-            }\n-        );\n+        nativeContainer.getToolkit().removeAWTEventListener(LightweightDispatcher.this);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Container.java","additions":8,"deletions":33,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n@@ -335,5 +333,1 @@\n-            @SuppressWarnings(\"removal\")\n-            final InputStream in = AccessController.doPrivileged(\n-                    (PrivilegedAction<InputStream>) () -> {\n-                        return Cursor.class.getResourceAsStream(file);\n-                    });\n+            final InputStream in = Cursor.class.getResourceAsStream(file);\n@@ -431,1 +425,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -440,8 +433,2 @@\n-                AccessController.doPrivileged(\n-                        (PrivilegedExceptionAction<Object>) () -> {\n-                            try (InputStream is = Cursor.class\n-                                    .getResourceAsStream(PROPERTIES_FILE)) {\n-                                systemCustomCursorProperties.load(is);\n-                            }\n-                            return null;\n-                        });\n+                InputStream is = Cursor.class.getResourceAsStream(PROPERTIES_FILE);\n+                systemCustomCursorProperties.load(is);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Cursor.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -89,1 +87,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -95,1 +92,1 @@\n-                }\n+               }\n@@ -97,7 +94,1 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-            public Object run() {\n-                fxAppThreadIsDispatchThread =\n-                        \"true\".equals(System.getProperty(\"javafx.embed.singleThread\"));\n-                return null;\n-            }\n-        });\n+        fxAppThreadIsDispatchThread = \"true\".equals(System.getProperty(\"javafx.embed.singleThread\"));\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/DefaultKeyboardFocusManager.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -45,2 +45,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -939,5 +937,1 @@\n-        final File finalFile = file;\n-        AccessController.doPrivileged((PrivilegedAction<?>) () -> {\n-            checkFileValidation(finalFile);\n-            return null;\n-        });\n+        checkFileValidation(file);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Desktop.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -1055,3 +1053,1 @@\n-                        @SuppressWarnings(\"removal\")\n-                        final EventQueue eventQueue = AccessController.doPrivileged(\n-                                (PrivilegedAction<EventQueue>) Toolkit.getDefaultToolkit()::getSystemEventQueue);\n+                        EventQueue eventQueue = Toolkit.getDefaultToolkit().getSystemEventQueue();\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Dialog.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,3 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -48,5 +45,0 @@\n-import java.security.AccessControlContext;\n-\n-import jdk.internal.access.SharedSecrets;\n-import jdk.internal.access.JavaSecurityAccess;\n-\n@@ -232,1 +224,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -234,5 +225,1 @@\n-            AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\n-                public Boolean run() {\n-                    return \"true\".equals(System.getProperty(\"javafx.embed.singleThread\"));\n-                }\n-            });\n+            \"true\".equals(System.getProperty(\"javafx.embed.singleThread\"));\n@@ -671,3 +658,0 @@\n-    private static final JavaSecurityAccess javaSecurityAccess =\n-        SharedSecrets.getJavaSecurityAccess();\n-\n@@ -714,29 +698,5 @@\n-        final PrivilegedAction<Void> action = new PrivilegedAction<Void>() {\n-            public Void run() {\n-                \/\/ In case fwDispatcher is installed and we're already on the\n-                \/\/ dispatch thread (e.g. performing DefaultKeyboardFocusManager.sendMessage),\n-                \/\/ dispatch the event straight away.\n-                if (fwDispatcher == null || isDispatchThreadImpl()) {\n-                    dispatchEventImpl(event, src);\n-                } else {\n-                    fwDispatcher.scheduleDispatch(new Runnable() {\n-                        @Override\n-                        public void run() {\n-                            if (dispatchThread.filterAndCheckEvent(event)) {\n-                                dispatchEventImpl(event, src);\n-                            }\n-                        }\n-                    });\n-                }\n-                return null;\n-            }\n-        };\n-\n-        @SuppressWarnings(\"removal\")\n-        final AccessControlContext stack = AccessController.getContext();\n-        @SuppressWarnings(\"removal\")\n-        final AccessControlContext srcAcc = getAccessControlContextFrom(src);\n-        @SuppressWarnings(\"removal\")\n-        final AccessControlContext eventAcc = event.getAccessControlContext();\n-        if (srcAcc == null) {\n-            javaSecurityAccess.doIntersectionPrivilege(action, stack, eventAcc);\n+        \/\/ In case fwDispatcher is installed and we're already on the\n+        \/\/ dispatch thread (e.g. performing DefaultKeyboardFocusManager.sendMessage),\n+        \/\/ dispatch the event straight away.\n+        if (fwDispatcher == null || isDispatchThreadImpl()) {\n+            dispatchEventImpl(event, src);\n@@ -744,5 +704,5 @@\n-            javaSecurityAccess.doIntersectionPrivilege(\n-                new PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        javaSecurityAccess.doIntersectionPrivilege(action, eventAcc);\n-                        return null;\n+            fwDispatcher.scheduleDispatch(new Runnable() {\n+                @Override\n+                public void run() {\n+                    if (dispatchThread.filterAndCheckEvent(event)) {\n+                        dispatchEventImpl(event, src);\n@@ -750,1 +710,2 @@\n-                }, stack, srcAcc);\n+                }\n+            });\n@@ -754,11 +715,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static AccessControlContext getAccessControlContextFrom(Object src) {\n-        return src instanceof Component ?\n-            ((Component)src).getAccessControlContext() :\n-            src instanceof MenuComponent ?\n-                ((MenuComponent)src).getAccessControlContext() :\n-                src instanceof TrayIcon ?\n-                    ((TrayIcon)src).getAccessControlContext() :\n-                    null;\n-    }\n-\n@@ -766,1 +716,1 @@\n-     * Called from dispatchEvent() under a correct AccessControlContext\n+     * Called from dispatchEvent()\n@@ -1116,15 +1066,6 @@\n-                dispatchThread = AccessController.doPrivileged(\n-                    new PrivilegedAction<EventDispatchThread>() {\n-                        public EventDispatchThread run() {\n-                            EventDispatchThread t =\n-                                new EventDispatchThread(threadGroup,\n-                                                        name,\n-                                                        EventQueue.this);\n-                            t.setContextClassLoader(classLoader);\n-                            t.setPriority(Thread.NORM_PRIORITY + 1);\n-                            t.setDaemon(false);\n-                            AWTAutoShutdown.getInstance().notifyThreadBusy(t);\n-                            return t;\n-                        }\n-                    }\n-                );\n+                EventDispatchThread t = new EventDispatchThread(threadGroup, name, EventQueue.this);\n+                t.setContextClassLoader(classLoader);\n+                t.setPriority(Thread.NORM_PRIORITY + 1);\n+                t.setDaemon(false);\n+                AWTAutoShutdown.getInstance().notifyThreadBusy(t);\n+                dispatchThread = t;\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/EventQueue.java","additions":20,"deletions":79,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -47,2 +47,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n@@ -1098,1 +1096,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1110,7 +1107,1 @@\n-            final File tFile = AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<File>() {\n-                    public File run() throws IOException {\n-                        return Files.createTempFile(\"+~JF\", \".tmp\").toFile();\n-                    }\n-                }\n-            );\n+            final File tFile = Files.createTempFile(\"+~JF\", \".tmp\").toFile();\n@@ -1123,8 +1114,1 @@\n-                final OutputStream outStream =\n-                    AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<OutputStream>() {\n-                            public OutputStream run() throws IOException {\n-                                return new FileOutputStream(tFile);\n-                            }\n-                        }\n-                    );\n+                final OutputStream outStream = new FileOutputStream(tFile);\n@@ -1184,8 +1168,1 @@\n-                    AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<Void>() {\n-                            public Void run() {\n-                                tFile.delete();\n-                                return null;\n-                            }\n-                        }\n-                    );\n+                    tFile.delete();\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Font.java","additions":3,"deletions":26,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -140,1 +138,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -143,11 +140,8 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                String nm = System.getProperty(\"java.awt.headless\");\n-\n-                if (nm == null) {\n-                    headless = defaultHeadless =\n-                        PlatformGraphicsInfo.getDefaultHeadlessProperty();\n-                } else {\n-                    headless = Boolean.valueOf(nm);\n-                }\n-                return null;\n-            });\n+            String nm = System.getProperty(\"java.awt.headless\");\n+\n+            if (nm == null) {\n+                headless = defaultHeadless =\n+                    PlatformGraphicsInfo.getDefaultHeadlessProperty();\n+            } else {\n+                headless = Boolean.valueOf(nm);\n+            }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/GraphicsEnvironment.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -43,3 +43,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -604,1 +601,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -606,6 +602,1 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                clearGlobalFocusOwner();\n-                return null;\n-            }\n-        });\n+        clearGlobalFocusOwner();\n@@ -1197,1 +1188,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1199,6 +1189,1 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                setGlobalCurrentFocusCycleRoot(newFocusCycleRoot);\n-                return null;\n-            }\n-        });\n+        setGlobalCurrentFocusCycleRoot(newFocusCycleRoot);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/KeyboardFocusManager.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -83,7 +81,1 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-            public Object run() {\n-                fxAppThreadIsDispatchThread =\n-                        \"true\".equals(System.getProperty(\"javafx.embed.singleThread\"));\n-                return null;\n-            }\n-        });\n+        fxAppThreadIsDispatchThread = \"true\".equals(System.getProperty(\"javafx.embed.singleThread\"));\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/SequencedEvent.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -132,7 +132,1 @@\n-                java.security.AccessController.doPrivileged(\n-                    new java.security.PrivilegedAction<Void>() {\n-                        public Void run() {\n-                            System.loadLibrary(\"splashscreen\");\n-                            return null;\n-                        }\n-                    });\n+                System.loadLibrary(\"splashscreen\");\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/SplashScreen.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,2 +59,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -399,1 +397,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -406,5 +403,0 @@\n-\n-        atNames = java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<String>() {\n-            public String run() {\n-\n@@ -462,3 +454,1 @@\n-                return classNames;\n-            }\n-        });\n+                atNames = classNames;\n@@ -515,1 +505,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -524,8 +513,6 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                try {\n-                    for (AccessibilityProvider p : ServiceLoader.load(AccessibilityProvider.class, cl)) {\n-                        String name = p.getName();\n-                        if (names.contains(name) && !providers.containsKey(name)) {\n-                            p.activate();\n-                            providers.put(name, p);\n-                        }\n+            try {\n+                for (AccessibilityProvider p : ServiceLoader.load(AccessibilityProvider.class, cl)) {\n+                    String name = p.getName();\n+                    if (names.contains(name) && !providers.containsKey(name)) {\n+                        p.activate();\n+                        providers.put(name, p);\n@@ -533,2 +520,0 @@\n-                } catch (java.util.ServiceConfigurationError | Exception e) {\n-                    newAWTError(e, \"Could not load or activate service provider\");\n@@ -536,2 +521,3 @@\n-                return null;\n-            });\n+            } catch (java.util.ServiceConfigurationError | Exception e) {\n+                newAWTError(e, \"Could not load or activate service provider\");\n+            }\n@@ -1305,1 +1291,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -1308,7 +1294,1 @@\n-            java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        System.loadLibrary(\"awt\");\n-                        return null;\n-                    }\n-                });\n+            System.loadLibrary(\"awt\");\n@@ -1323,1 +1303,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1333,11 +1312,5 @@\n-        java.security.AccessController.doPrivileged(\n-                                 new java.security.PrivilegedAction<Void>() {\n-            public Void run() {\n-                try {\n-                    resources = ResourceBundle.getBundle(\"sun.awt.resources.awt\");\n-                } catch (MissingResourceException e) {\n-                    \/\/ No resource file; defaults will be used.\n-                }\n-                return null;\n-            }\n-        });\n+        try {\n+            resources = ResourceBundle.getBundle(\"sun.awt.resources.awt\");\n+        } catch (MissingResourceException e) {\n+            \/\/ No resource file; defaults will be used.\n+        }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Toolkit.java","additions":17,"deletions":44,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -32,3 +32,0 @@\n-import java.security.PrivilegedAction;\n-import java.security.AccessController;\n-\n@@ -233,7 +230,1 @@\n-                \/\/ Event pump should be privileged. See 6300270.\n-                AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        run.run();\n-                        return null;\n-                    }\n-                });\n+                run.run();\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/WaitDispatchSupport.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import java.security.AccessController;\n@@ -417,3 +416,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String s = java.security.AccessController.doPrivileged(\n-            new GetPropertyAction(\"java.awt.syncLWRequests\"));\n+        String s = System.getProperty(\"java.awt.syncLWRequests\");\n@@ -421,3 +418,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String s2 = java.security.AccessController.doPrivileged(\n-            new GetPropertyAction(\"java.awt.Window.locationByPlatform\"));\n+        String s2 = System.getProperty(\"java.awt.Window.locationByPlatform\");\n@@ -508,1 +503,0 @@\n-        setWarningString();\n@@ -1379,18 +1373,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private void setWarningString() {\n-        warningString = null;\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            try {\n-                sm.checkPermission(AWTPermissions.TOPLEVEL_WINDOW_PERMISSION);\n-            } catch (SecurityException se) {\n-                \/\/ make sure the privileged action is only\n-                \/\/ for getting the property! We don't want the\n-                \/\/ above checkPermission call to always succeed!\n-                warningString = AccessController.doPrivileged(\n-                      new GetPropertyAction(\"awt.appletWarning\",\n-                                            \"Java Applet Window\"));\n-            }\n-        }\n-    }\n-\n@@ -2981,1 +2957,0 @@\n-        setWarningString();\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Window.java","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -51,2 +51,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -1344,1 +1342,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1346,5 +1343,1 @@\n-        return AccessController.doPrivileged(\n-            (PrivilegedAction<InputStream>) () -> {\n-                return PCMM.class.getResourceAsStream(\"profiles\/\" + fileName);\n-            }, null, new FilePermission(\"<<ALL FILES>>\", \"read\"),\n-                     new RuntimePermission(\"accessSystemModules\"));\n+        return PCMM.class.getResourceAsStream(\"profiles\/\" + fileName);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/color\/ICC_Profile.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.security.AccessController;\n@@ -49,1 +48,0 @@\n-import sun.security.action.GetIntegerAction;\n@@ -911,2 +909,1 @@\n-        int ts = AccessController.doPrivileged(\n-                new GetIntegerAction(\"awt.dnd.drag.threshold\", 0)).intValue();\n+        int ts = Integer.getInteger(\"awt.dnd.drag.threshold\", 0);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/dnd\/DragSource.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -57,7 +57,1 @@\n-        java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<Void>() {\n-                public Void run() {\n-                    System.loadLibrary(\"awt\");\n-                    return null;\n-                }\n-            });\n+        System.loadLibrary(\"awt\");\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/event\/NativeLibLoader.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -803,1 +801,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -809,7 +806,1 @@\n-        final PrivilegedAction<Boolean> checkClassLoadersAction =\n-                new PrivilegedAction<Boolean>()\n-        {\n-\n-            @Override\n-            public Boolean run() {\n-                final ClassLoader std = System.class.getClassLoader();\n+        final ClassLoader std = System.class.getClassLoader();\n@@ -817,6 +808,3 @@\n-                return (cmClass.getClassLoader() == std) &&\n-                        (smClass.getClassLoader() == std) &&\n-                        (wrClass.getClassLoader() == std);\n-            }\n-        };\n-        return AccessController.doPrivileged(checkClassLoadersAction);\n+        return (cmClass.getClassLoader() == std) &&\n+                (smClass.getClassLoader() == std) &&\n+                (wrClass.getClassLoader() == std);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/BufferedImage.java","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-    @SuppressWarnings({\"removal\", \"restricted\"})\n+    @SuppressWarnings(\"restricted\")\n@@ -208,7 +208,1 @@\n-            java.security.AccessController.doPrivileged(\n-                new java.security.PrivilegedAction<Void>() {\n-                    public Void run() {\n-                        System.loadLibrary(\"awt\");\n-                        return null;\n-                    }\n-                });\n+            System.loadLibrary(\"awt\");\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/ColorModel.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -284,2 +281,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n@@ -424,1 +419,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -426,12 +420,0 @@\n-        AccessControlContext acc = this.acc;\n-        if ((acc == null) && (System.getSecurityManager() != null)) {\n-            throw new SecurityException(\"AccessControlContext is not set\");\n-        }\n-        return AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-            public Object run() {\n-                return invokeInternal(proxy, method, arguments);\n-            }\n-        }, acc);\n-    }\n-\n-    private Object invokeInternal(Object proxy, Method method, Object[] arguments) {\n@@ -692,1 +674,1 @@\n-    @SuppressWarnings(\"removal\")\n+    @SuppressWarnings(\"unchecked\")\n@@ -708,6 +690,1 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<T>() {\n-            @SuppressWarnings(\"unchecked\")\n-            public T run() {\n-                return (T) Proxy.newProxyInstance(loader, interfaces, handler);\n-            }\n-        });\n+        return (T) Proxy.newProxyInstance(loader, interfaces, handler);\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/EventHandler.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -44,3 +44,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -1322,1 +1319,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1329,15 +1325,10 @@\n-            field = AccessController.doPrivileged(new PrivilegedAction<Field>() {\n-                public Field run() {\n-                    try {\n-                        Field field = Class.forName(className).getDeclaredField(fieldName);\n-                        field.setAccessible(true);\n-                        return field;\n-                    }\n-                    catch (ClassNotFoundException exception) {\n-                        throw new IllegalStateException(\"Could not find class\", exception);\n-                    }\n-                    catch (NoSuchFieldException exception) {\n-                        throw new IllegalStateException(\"Could not find field\", exception);\n-                    }\n-                }\n-            });\n+            try {\n+                field = Class.forName(className).getDeclaredField(fieldName);\n+                field.setAccessible(true);\n+            }\n+            catch (ClassNotFoundException exception) {\n+                throw new IllegalStateException(\"Could not find class\", exception);\n+            }\n+            catch (NoSuchFieldException exception) {\n+                throw new IllegalStateException(\"Could not find field\", exception);\n+            }\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/MetaData.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -157,1 +155,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -159,2 +156,1 @@\n-        return AccessController.doPrivileged(\n-                (PrivilegedAction<Image>) () -> loadImage(resourceName));\n+        return loadImage(resourceName);\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/SimpleBeanInfo.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,4 +32,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -72,2 +68,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n@@ -177,1 +171,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -179,20 +172,0 @@\n-        AccessControlContext acc = this.acc;\n-        if ((acc == null) && (System.getSecurityManager() != null)) {\n-            throw new SecurityException(\"AccessControlContext is not set\");\n-        }\n-        try {\n-            return AccessController.doPrivileged(\n-                    new PrivilegedExceptionAction<Object>() {\n-                        public Object run() throws Exception {\n-                            return invokeInternal();\n-                        }\n-                    },\n-                    acc\n-            );\n-        }\n-        catch (PrivilegedActionException exception) {\n-            throw exception.getException();\n-        }\n-    }\n-\n-    private Object invokeInternal() throws Exception {\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/Statement.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -32,3 +32,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -67,2 +64,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n@@ -192,1 +187,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -198,9 +192,1 @@\n-            if ((this.acc == null) && (null != System.getSecurityManager())) {\n-                throw new SecurityException(\"AccessControlContext is not set\");\n-            }\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                public Void run() {\n-                    XMLDecoder.this.handler.parse(XMLDecoder.this.input);\n-                    return null;\n-                }\n-            }, this.acc);\n+            XMLDecoder.this.handler.parse(XMLDecoder.this.input);\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/XMLDecoder.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"}]}