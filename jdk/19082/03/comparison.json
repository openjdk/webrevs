{"files":[{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331646\n+ * @summary confirm that Calendar.add() works correctly with leap year calculations\n+ * @run junit CalendarLeapYearAddTest\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.Calendar;\n+import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import static java.util.Calendar.APRIL;\n+import static java.util.Calendar.DATE;\n+import static java.util.Calendar.DAY_OF_MONTH;\n+import static java.util.Calendar.DAY_OF_WEEK;\n+import static java.util.Calendar.DAY_OF_WEEK_IN_MONTH;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Calendar.FEBRUARY;\n+import static java.util.Calendar.LONG;\n+import static java.util.Calendar.MARCH;\n+import static java.util.Calendar.MONTH;\n+import static java.util.Calendar.WEEK_OF_YEAR;\n+import static java.util.Calendar.YEAR;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CalendarLeapYearAddTest {\n+\n+    \/**\n+     * 8331646 Calendar add for leap year\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"calendarAddSource\")\n+    public void testAddLeapYear(String testName, int calendarDate, int calendarMonth, int calendarYear,\n+                                int value, int calendarField, int expectedDate, int expectedMonth,\n+                                int expectedYear) {\n+        Calendar calendar = new GregorianCalendar(calendarYear, calendarMonth, calendarDate);\n+        calendar.add(calendarField, value);\n+        assertEquals(expectedDate, calendar.get(DATE), testName\n+                + \" Expected \" + expectedDate + \" of \" + expectedMonth + expectedYear + \" but got \" + calendar.getTime());\n+        assertEquals(expectedMonth, calendar.get(MONTH), testName\n+                + \" Expected \" + expectedMonth + \" but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar month and year add\/subtract for leap\/non-leap year\n+     *\/\n+    @Test\n+    public void testMonthYearAddSubtractNonLeapYear() {\n+        Calendar calendar = new GregorianCalendar(2024, FEBRUARY, 29);\n+        calendar.add(MONTH, 1);\n+        calendar.add(YEAR, -1);\n+        calendar.add(MONTH, -1);\n+        \/* When month added date jumps to 29th of March 2024, after year subtracted date jumps to 29th of March 2023\n+           after month subtracted date jumps to 28th of Feb 2023 as non leap year\n+         *\/\n+        assertEquals(28, calendar.get(DATE),\n+                \"testMonthYearAddSubtractNonLeapYear Expected 28th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH),\n+                \" testMonthYearAddSubtractNonLeapYear Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar add\/subtract for leap year\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"calendarAddSubtractSource\")\n+    public void testAddSubtractLeapYear(String testName, int calendarDate, int calendarMonth, int calendarYear,\n+                                        int firstValue, int secondValue, int calendarField, int expectedDate,\n+                                        int expectedMonth, int expectedYear) {\n+        Calendar calendar = new GregorianCalendar(calendarYear, calendarMonth, calendarDate);\n+        calendar.add(calendarField, firstValue);\n+        calendar.add(calendarField, secondValue);\n+        assertEquals(expectedDate, calendar.get(DATE), testName\n+                + \" Expected \" + expectedDate + \" of \" + expectedMonth + expectedYear + \" but got \" + calendar.getTime());\n+        assertEquals(expectedMonth, calendar.get(MONTH), testName\n+                + \" Expected \" + expectedMonth + \" but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    private static Stream<Arguments> calendarAddSubtractSource() {\n+        return Stream.of(\n+                Arguments.of(\"testMonthAddSubtractLeapYearReversed\", 31, MARCH, 2024, -1, 1, MONTH, 29, MARCH, 2024),\n+                Arguments.of(\"testMonthAddSubtractLeapYear\", 29, FEBRUARY, 2024, 1, -1, MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testYearAddSubtractLeapYear\", 29, FEBRUARY, 2024, 1, -1, YEAR, 28, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfYearAddSubtractLeapYear\", 29, FEBRUARY, 2024, 365, -365, DAY_OF_YEAR, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDateAddSubtractLeapYear\", 29, FEBRUARY, 2024, 365, -365, DATE, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testWeekOfYearAddSubtractLeapYear\", 29, FEBRUARY, 2024, 52, -52, WEEK_OF_YEAR, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDateOfMonthAddSubtractLeapYear\", 29, FEBRUARY, 2024, 31, -31, DAY_OF_MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfWeekInMonthAddSubtractLeapYear\", 29, FEBRUARY, 2024, 6, -6, DAY_OF_WEEK_IN_MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfWeekAddSubtractLeapYear\", 29, FEBRUARY, 2024, 6, -6, DAY_OF_WEEK, 29, FEBRUARY, 2024)\n+        );\n+    }\n+\n+    private static Stream<Arguments> calendarAddSource() {\n+        return Stream.of(\n+                Arguments.of(\"testMonthAddLeapYear\", 29, FEBRUARY, 2024, 1, MONTH, 29, MARCH, 2024),\n+                Arguments.of(\"testOneMonthSubtractLeapYear\", 31, MARCH, 2024, -1, MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testTwoMonthSubtractLeapYear\", 30, APRIL, 2024, -2, MONTH, 29, FEBRUARY, 2024)\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Calendar\/CalendarLeapYearAddTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}