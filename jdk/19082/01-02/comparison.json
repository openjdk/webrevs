{"files":[{"patch":"@@ -31,2 +31,1 @@\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +33,2 @@\n-import org.junit.jupiter.params.provider.ValueSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -38,0 +38,1 @@\n+import java.util.stream.Stream;\n@@ -45,55 +46,0 @@\n-    private TestInfo testInfo;\n-\n-    @BeforeEach\n-    void init(TestInfo testInfo) {\n-        this.testInfo = testInfo;\n-    }\n-\n-    \/**\n-     * 8331646 Calendar month add for leap year\n-     *\/\n-    @ParameterizedTest(name = \"testMonthAddLeapYear\")\n-    @ValueSource(ints = {1})\n-    public void testMonthAddLeapYear(int value) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(2024, 1, 29, 15, 0, 0);\n-        calendar.add(Calendar.MONTH, value);\n-        \/* when added a month date jumps to 29th of March 2024 *\/\n-        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of March 2024 but got \" + calendar.getTime());\n-        assertEquals(MARCH, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected March but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n-    }\n-\n-    \/**\n-     * 8331646 Calendar 1 month subtract for leap year\n-     *\/\n-    @ParameterizedTest(name = \"testOneMonthSubtractLeapYear\")\n-    @ValueSource(ints = {-1})\n-    public void testOneMonthSubtractLeapYear(int value) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(2024, 2, 31, 15, 0, 0);\n-        calendar.add(Calendar.MONTH, value);\n-        \/* when added a month date jumps to 29th of March 2024 *\/\n-        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n-    }\n-\n-    \/**\n-     * 8331646 Calendar 2 month subtract for leap year\n-     *\/\n-    @ParameterizedTest(name = \"testTwoMonthSubtractLeapYear\")\n-    @ValueSource(ints = {-2})\n-    public void testTwoMonthSubtractLeapYear(int value) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(2024, 3, 30, 15, 0, 0);\n-        calendar.add(Calendar.MONTH, value);\n-        \/* when added a month date jumps to 29th of March 2024 *\/\n-        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n-    }\n-\n@@ -101,1 +47,1 @@\n-     * 8331646 Calendar month add\/subtract for leap year\n+     * 8331646 Calendar add for leap year\n@@ -103,3 +49,5 @@\n-    @ParameterizedTest(name = \"testMonthAddSubtractLeapYear\")\n-    @ValueSource(ints = {1})\n-    public void testMonthAddSubtractLeapYear(int value) {\n+    @ParameterizedTest\n+    @MethodSource(\"calendarAddSource\")\n+    public void testAddLeapYear(String testName, int calendarDate, int calendarMonth, int calendarYear,\n+                                int value, int calendarField, int expectedDate, int expectedMonth,\n+                                int expectedYear) {\n@@ -107,9 +55,6 @@\n-        calendar.set(2024, 1, 29, 15, 0, 0);\n-        calendar.add(Calendar.MONTH, value);\n-        \/* when added a month date jumps to 29th of March 2024,\n-           subtracting month in a leap year returns 29th of February 2024  *\/\n-        calendar.add(Calendar.MONTH, -value);\n-        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+        calendar.set(calendarYear, calendarMonth, calendarDate);\n+        calendar.add(calendarField, value);\n+        assertEquals(expectedDate, calendar.get(DATE), testName\n+                + \" Expected \" + expectedDate + \" of \" + expectedMonth + expectedYear + \" but got \" + calendar.getTime());\n+        assertEquals(expectedMonth, calendar.get(MONTH), testName\n+                + \" Expected \" + expectedMonth + \" but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n@@ -121,3 +66,2 @@\n-    @ParameterizedTest(name = \"testMonthYearAddSubtractNonLeapYear\")\n-    @ValueSource(ints = {1})\n-    public void testMonthYearAddSubtractNonLeapYear(int value) {\n+    @Test\n+    public void testMonthYearAddSubtractNonLeapYear() {\n@@ -126,3 +70,3 @@\n-        calendar.add(Calendar.MONTH, value);\n-        calendar.add(YEAR, -value);\n-        calendar.add(Calendar.MONTH, -value);\n+        calendar.add(Calendar.MONTH, 1);\n+        calendar.add(YEAR, -1);\n+        calendar.add(Calendar.MONTH, -1);\n@@ -132,23 +76,4 @@\n-        assertEquals(28, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 28th of February 2024 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n-    }\n-\n-    \/**\n-     * 8331646 Calendar month add\/subtract for leap year jumping from March 31st to February 29th and back to March 29th\n-     *\/\n-    @ParameterizedTest(name = \"testMonthAddSubtractLeapYearReversed\")\n-    @ValueSource(ints = {1})\n-    public void testMonthAddSubtractLeapYearReversed(int value) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(2024, 2, 31, 15, 0, 0);\n-        calendar.add(MONTH, -value);\n-        calendar.add(MONTH, value);\n-        \/* when month removed date jumps to 29th of February,\n-           adding a month results in 29th of March 2024 as it's leap year\n-        *\/\n-        assertEquals(29,calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of March 2024 but got \" + calendar.getTime());\n-        assertEquals(MARCH, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected March but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+        assertEquals(28, calendar.get(DATE),\n+                \"testMonthYearAddSubtractNonLeapYear Expected 28th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH),\n+                \" testMonthYearAddSubtractNonLeapYear Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n@@ -158,1 +83,1 @@\n-     * 8331646 Calendar year add\/subtract for leap year\n+     * 8331646 Calendar add\/subtract for leap year\n@@ -160,3 +85,5 @@\n-    @ParameterizedTest(name = \"testYearAddSubtractLeapYear\")\n-    @ValueSource(ints = {1})\n-    public void testYearAddSubtractLeapYear(int value) {\n+    @ParameterizedTest\n+    @MethodSource(\"calendarAddSubtractSource\")\n+    public void testAddSubtractLeapYear(String testName, int calendarDate, int calendarMonth, int calendarYear,\n+                                        int firstValue, int secondValue, int calendarField, int expectedDate,\n+                                        int expectedMonth, int expectedYear) {\n@@ -164,8 +91,7 @@\n-        calendar.set(2024, 1, 29, 15, 0, 0);\n-        calendar.add(YEAR, value);\n-        calendar.add(YEAR, -value);\n-        \/* when evaluated to no leap year date jumps to 28 of Feb 2023, removing year results in 28th of Feb 2024 *\/\n-        assertEquals(28, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 28th of February 2024 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+        calendar.set(calendarYear, calendarMonth, calendarDate);\n+        calendar.add(calendarField, firstValue);\n+        calendar.add(calendarField, secondValue);\n+        assertEquals(expectedDate, calendar.get(DATE), testName\n+                + \" Expected \" + expectedDate + \" of \" + expectedMonth + expectedYear + \" but got \" + calendar.getTime());\n+        assertEquals(expectedMonth, calendar.get(MONTH), testName\n+                + \" Expected \" + expectedMonth + \" but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n@@ -174,19 +100,12 @@\n-    \/**\n-     * 8331646 Calendar year add\/subtract for leap year\n-     *\/\n-    @ParameterizedTest(name = \"testYearDayAddSubtractLeapYearReversed\")\n-    @ValueSource(ints = {1})\n-    public void testYearDayAddSubtractLeapYearReversed(int value) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(2023, 1, 28, 15, 0, 0);\n-        calendar.add(YEAR, value);\n-        calendar.add(DATE, value);\n-        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n-        calendar.add(YEAR, -value);\n-        \/* when evaluated to leap year + 1 day the date jumps to 29th of Feb 2024,\n-         removing year results in 28th of Feb 2023 *\/\n-        assertEquals(28, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 28th of February 2023 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    private static Stream<Arguments> calendarAddSubtractSource() {\n+        return Stream.of(\n+                Arguments.of(\"testMonthAddSubtractLeapYearReversed\", 31, 2, 2024, -1, 1, MONTH, 29, MARCH, 2024),\n+                Arguments.of(\"testMonthAddSubtractLeapYear\", 29, 1, 2024, 1, -1, MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testYearAddSubtractLeapYear\", 29, 1, 2024, 1, -1, YEAR, 28, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfYearAddSubtractLeapYear\", 29, 1, 2024, 365, -365, DAY_OF_YEAR, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDateAddSubtractLeapYear\", 29, 1, 2024, 365, -365, DATE, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testWeekOfYearAddSubtractLeapYear\", 29, 1, 2024, 52, -52, WEEK_OF_YEAR, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDateOfMonthAddSubtractLeapYear\", 29, 1, 2024, 31, -31, DAY_OF_MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfWeekInMonthAddSubtractLeapYear\", 29, 1, 2024, 6, -6, DAY_OF_WEEK_IN_MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfWeekAddSubtractLeapYear\", 29, 1, 2024, 6, -6, DAY_OF_WEEK, 29, FEBRUARY, 2024)\n+        );\n@@ -195,97 +114,6 @@\n-    \/**\n-     * 8331646 Calendar day of year add\/subtract for leap year\n-     *\/\n-    @ParameterizedTest(name = \"testDayOfYearAddSubtractLeapYear\")\n-    @ValueSource(ints = {365})\n-    public void testDayOfYearAddSubtractLeapYear(int value) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(2024, 1, 29, 15, 0, 0);\n-        calendar.add(DAY_OF_YEAR, value);\n-        calendar.add(DAY_OF_YEAR, -value);\n-        \/* adding\/subtracting same amount of days should land on the same day in leap year*\/\n-        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n-    }\n-\n-    \/**\n-     * 8331646 Calendar date add\/subtract for leap year\n-     *\/\n-    @ParameterizedTest(name = \"testDateAddSubtractLeapYear\")\n-    @ValueSource(ints = {365})\n-    public void testDateAddSubtractLeapYear(int value) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(2024, 1, 29, 15, 0, 0);\n-        calendar.add(DATE, value);\n-        calendar.add(DATE, -value);\n-        \/* DATE behaves as date DAY_OF_YEAR *\/\n-        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n-    }\n-\n-    \/**\n-     * 8331646 Calendar week of the year add\/subtract for leap year\n-     *\/\n-    @ParameterizedTest(name = \"testWeekOfYearAddSubtractLeapYear\")\n-    @ValueSource(ints = {52})\n-    public void testWeekOfYearAddSubtractLeapYear(int value) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(2024, 1, 29, 15, 0, 0);\n-        calendar.add(WEEK_OF_YEAR, value);\n-        calendar.add(WEEK_OF_YEAR, -value);\n-        \/* adding year in weeks should not mess the date*\/\n-        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n-    }\n-\n-    \/**\n-     * 8331646 Calendar day of month add\/subtract for leap year\n-     *\/\n-    @ParameterizedTest(name = \"testDateOfMonthAddSubtractLeapYear\")\n-    @ValueSource(ints = {31})\n-    public void testDateOfMonthAddSubtractLeapYear(int value) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(2024, 1, 29, 15, 0, 0);\n-        calendar.add(DAY_OF_MONTH, value);\n-        calendar.add(DAY_OF_MONTH, -value);\n-        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n-    }\n-\n-    \/**\n-     * 8331646 Calendar day of week add\/subtract for leap year\n-     *\/\n-    @ParameterizedTest(name = \"testDayOfWeekAddSubtractLeapYear\")\n-    @ValueSource(ints = {6})\n-    public void testDayOfWeekAddSubtractLeapYear(int value) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(2024, 1, 29, 15, 0, 0);\n-        calendar.add(DAY_OF_WEEK, value);\n-        calendar.add(DAY_OF_WEEK, -value);\n-        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n-    }\n-\n-    \/**\n-     * 8331646 Calendar day of week in month add\/subtract for leap year\n-     *\/\n-    @ParameterizedTest(name = \"testDayOfWeekInMonthAddSubtractLeapYear\")\n-    @ValueSource(ints = {6})\n-    public void testDayOfWeekInMonthAddSubtractLeapYear(int value) {\n-        Calendar calendar = Calendar.getInstance();\n-        calendar.set(2024, 1, 29, 15, 0, 0);\n-        calendar.add(DAY_OF_WEEK_IN_MONTH, value);\n-        calendar.add(DAY_OF_WEEK_IN_MONTH, -value);\n-        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n-                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n-        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n-                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    private static Stream<Arguments> calendarAddSource() {\n+        return Stream.of(\n+                Arguments.of(\"testMonthAddLeapYear\", 29, 1, 2024, 1, MONTH, 29, MARCH, 2024),\n+                Arguments.of(\"testOneMonthSubtractLeapYear\", 31, 2, 2024, -1, MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testTwoMonthSubtractLeapYear\", 30, 3, 2024, -2, MONTH, 29, FEBRUARY, 2024)\n+        );\n","filename":"test\/jdk\/java\/util\/Calendar\/CalendarLeapYearAddTest.java","additions":56,"deletions":228,"binary":false,"changes":284,"status":"modified"}]}