{"files":[{"patch":"@@ -0,0 +1,270 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331646\n+ * @summary confirm that Calendar.add() works correctly with leap year calculations\n+ * @run junit CalendarLeapYearAddTest\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+\n+import java.util.Calendar;\n+import java.util.Locale;\n+\n+import static java.util.Calendar.*;\n+import static java.util.Calendar.MONTH;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CalendarLeapYearAddTest {\n+\n+    \/**\n+     * 8331646 Calendar month add for leap year\n+     *\/\n+    @Test\n+    public void testMonthAddLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 1, 29, 15, 0, 0);\n+        calendar.add(Calendar.MONTH, 1);\n+        \/* when added a month date jumps to 29th of March 2024 *\/\n+        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of March 2024 but got \" + calendar.getTime());\n+        assertEquals(MARCH, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected March but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar 1 month subtract for leap year\n+     *\/\n+    @Test\n+    public void testOneMonthSubtractLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 2, 31, 15, 0, 0);\n+        calendar.add(Calendar.MONTH, -1);\n+        \/* when added a month date jumps to 29th of March 2024 *\/\n+        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar 2 month subtract for leap year\n+     *\/\n+    @Test\n+    public void testTwoMonthSubtractLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 3, 30, 15, 0, 0);\n+        calendar.add(Calendar.MONTH, -2);\n+        \/* when added a month date jumps to 29th of March 2024 *\/\n+        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar month add\/subtract for leap year\n+     *\/\n+    @Test\n+    public void testMonthAddSubtractLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 1, 29, 15, 0, 0);\n+        calendar.add(Calendar.MONTH, 1);\n+        \/* when added a month date jumps to 29th of March 2024,\n+           subtracting month in a leap year returns 29th of February 2024  *\/\n+        calendar.add(Calendar.MONTH, -1);\n+        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar month and year add\/subtract for leap\/non-leap year\n+     *\/\n+    @Test\n+    public void testMonthYearAddSubtractNonLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 1, 29, 15, 0, 0);\n+        calendar.add(Calendar.MONTH, 1);\n+        calendar.add(YEAR, -1);\n+        calendar.add(Calendar.MONTH, -1);\n+        \/* When month added date jumps to 29th of March 2024, after year subtracted date jumps to 29th of March 2023\n+           after month subtracted date jumps to 28th of Feb 2023 as non leap year\n+         *\/\n+        assertEquals(28, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 28th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar month add\/subtract for leap year jumping from March 31st to February 29th and back to March 29th\n+     *\/\n+    @Test\n+    public void testMonthAddSubtractLeapYearReversed(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 2, 31, 15, 0, 0);\n+        calendar.add(MONTH, -1);\n+        calendar.add(MONTH, 1);\n+        \/* when month removed date jumps to 29th of February,\n+           adding a month results in 29th of March 2024 as it's leap year\n+        *\/\n+        assertEquals(29,calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of March 2024 but got \" + calendar.getTime());\n+        assertEquals(MARCH, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected March but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar year add\/subtract for leap year\n+     *\/\n+    @Test\n+    public void testYearAddSubtractLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 1, 29, 15, 0, 0);\n+        calendar.add(YEAR, 1);\n+        calendar.add(YEAR, -1);\n+        \/* when evaluated to no leap year date jumps to 28 of Feb 2023, removing year results in 28th of Feb 2024 *\/\n+        assertEquals(28, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 28th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar year add\/subtract for leap year\n+     *\/\n+    @Test\n+    public void testYearDayAddSubtractLeapYearReversed(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2023, 1, 28, 15, 0, 0);\n+        calendar.add(YEAR, 1);\n+        calendar.add(DATE, 1);\n+        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n+        calendar.add(YEAR, -1);\n+        \/* when evaluated to leap year + 1 day the date jumps to 29th of Feb 2024,\n+         removing year results in 28th of Feb 2023 *\/\n+        assertEquals(28, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 28th of February 2023 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar day of year add\/subtract for leap year\n+     *\/\n+    @Test\n+    public void testDayOfYearAddSubtractLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 1, 29, 15, 0, 0);\n+        calendar.add(DAY_OF_YEAR, 365);\n+        calendar.add(DAY_OF_YEAR, -365);\n+        \/* adding\/subtracting same amount of days should land on the same day in leap year*\/\n+        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar date add\/subtract for leap year\n+     *\/\n+    @Test\n+    public void testDateAddSubtractLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 1, 29, 15, 0, 0);\n+        calendar.add(DATE, 365);\n+        calendar.add(DATE, -365);\n+        \/* DATE behaves as date DAY_OF_YEAR *\/\n+        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar week of the year add\/subtract for leap year\n+     *\/\n+    @Test\n+    public void testWeekOfYearAddSubtractLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 1, 29, 15, 0, 0);\n+        calendar.add(WEEK_OF_YEAR, 52);\n+        calendar.add(WEEK_OF_YEAR, -52);\n+        \/* adding year in weeks should not mess the date*\/\n+        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar day of month add\/subtract for leap year\n+     *\/\n+    @Test\n+    public void testDateOfMonthAddSubtractLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 1, 29, 15, 0, 0);\n+        calendar.add(DAY_OF_MONTH, 31);\n+        calendar.add(DAY_OF_MONTH, -31);\n+        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar day of week add\/subtract for leap year\n+     *\/\n+    @Test\n+    public void testDayOfWeekAddSubtractLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 1, 29, 15, 0, 0);\n+        calendar.add(DAY_OF_WEEK, 6);\n+        calendar.add(DAY_OF_WEEK, -6);\n+        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+\n+    \/**\n+     * 8331646 Calendar day of week in month add\/subtract for leap year\n+     *\/\n+    @Test\n+    public void testDayOfWeekInMonthAddSubtractLeapYear(TestInfo testInfo) {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2024, 1, 29, 15, 0, 0);\n+        calendar.add(DAY_OF_WEEK_IN_MONTH, 6);\n+        calendar.add(DAY_OF_WEEK_IN_MONTH, -6);\n+        assertEquals(29, calendar.get(DATE), testInfo.getDisplayName()\n+                + \" Expected 29th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH), testInfo.getDisplayName()\n+                + \" Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Calendar\/CalendarLeapYearAddTest.java","additions":270,"deletions":0,"binary":false,"changes":270,"status":"added"}]}