{"files":[{"patch":"@@ -74,0 +74,1 @@\n+\/\/ without the AuthEncap and AuthDecap functions\n@@ -93,2 +94,1 @@\n-                           PrivateKey skS, PublicKey pkS, \/\/ sender keys\n-                           PrivateKey skR, PublicKey pkR) \/\/ receiver keys\n+                           PrivateKey skR, PublicKey pkR)\n@@ -106,0 +106,1 @@\n+            byte[] kem_context = concat(pkEm, pkRm);\n@@ -107,11 +108,2 @@\n-                SecretKey key;\n-                if (skS == null) {\n-                    byte[] kem_context = concat(pkEm, pkRm);\n-                    key = params.deriveKey(algorithm, from, to, kem_context,\n-                            params.DH(skE, pkR));\n-                } else {\n-                    byte[] pkSm = params.SerializePublicKey(pkS);\n-                    byte[] kem_context = concat(pkEm, pkRm, pkSm);\n-                    key = params.deriveKey(algorithm, from, to, kem_context,\n-                            params.DH(skE, pkR), params.DH(skS, pkR));\n-                }\n+                SecretKey key = params.deriveKey(algorithm, from, to, kem_context,\n+                        params.DH(skE, pkR));\n@@ -138,10 +130,3 @@\n-                if (pkS == null) {\n-                    byte[] kem_context = concat(encapsulation, pkRm);\n-                    return params.deriveKey(algorithm, from, to, kem_context,\n-                            params.DH(skR, pkE));\n-                } else {\n-                    byte[] pkSm = params.SerializePublicKey(pkS);\n-                    byte[] kem_context = concat(encapsulation, pkRm, pkSm);\n-                    return params.deriveKey(algorithm, from, to, kem_context,\n-                            params.DH(skR, pkE), params.DH(skR, pkS));\n-                }\n+                byte[] kem_context = concat(encapsulation, pkRm);\n+                return params.deriveKey(algorithm, from, to, kem_context,\n+                        params.DH(skR, pkE));\n@@ -297,1 +282,1 @@\n-                byte[] kem_context, SecretKey... dhs)\n+                byte[] kem_context, SecretKey dh)\n@@ -300,1 +285,1 @@\n-                return ExtractAndExpand(kem_context, alg, dhs);\n+                return ExtractAndExpand(kem_context, alg, dh);\n@@ -304,1 +289,1 @@\n-                var fullKey = ExtractAndExpand(kem_context, \"Generic\", dhs);\n+                var fullKey = ExtractAndExpand(kem_context, \"Generic\", dh);\n@@ -321,1 +306,1 @@\n-        private SecretKey ExtractAndExpand(byte[] kem_context, String alg, SecretKey... dhs)\n+        private SecretKey ExtractAndExpand(byte[] kem_context, String alg, SecretKey dh)\n@@ -325,1 +310,1 @@\n-            for (var dh : dhs) builder.addIKM(dh);\n+            builder.addIKM(dh);\n@@ -411,16 +396,1 @@\n-        return new Handler(params, getSecureRandom(secureRandom), null, null, null, pk);\n-    }\n-\n-    \/\/ AuthEncap is not public KEM API\n-    public EncapsulatorSpi engineNewAuthEncapsulator(PublicKey pkR, PrivateKey skS,\n-            AlgorithmParameterSpec spec, SecureRandom secureRandom)\n-            throws InvalidAlgorithmParameterException, InvalidKeyException {\n-        if (pkR == null || skS == null) {\n-            throw new InvalidKeyException(\"input key is null\");\n-        }\n-        if (spec != null) {\n-            throw new InvalidAlgorithmParameterException(\"no spec needed\");\n-        }\n-        Params params = paramsFromKey(pkR);\n-        return new Handler(params, getSecureRandom(secureRandom),\n-                skS, params.getPublicKey(skS), null, pkR);\n+        return new Handler(params, getSecureRandom(secureRandom), null, pk);\n@@ -439,15 +409,1 @@\n-        return new Handler(params, null, null, null, sk, params.getPublicKey(sk));\n-    }\n-\n-    \/\/ AuthDecap is not public KEM API\n-    public DecapsulatorSpi engineNewAuthDecapsulator(\n-            PrivateKey skR, PublicKey pkS, AlgorithmParameterSpec spec)\n-            throws InvalidAlgorithmParameterException, InvalidKeyException {\n-        if (skR == null || pkS == null) {\n-            throw new InvalidKeyException(\"input key is null\");\n-        }\n-        if (spec != null) {\n-            throw new InvalidAlgorithmParameterException(\"no spec needed\");\n-        }\n-        Params params = paramsFromKey(skR);\n-        return new Handler(params, null, null, pkS, skR, params.getPublicKey(skR));\n+        return new Handler(params, null, sk, params.getPublicKey(sk));\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DHKEM.java","additions":15,"deletions":59,"binary":false,"changes":74,"status":"modified"}]}