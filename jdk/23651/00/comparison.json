{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,0 @@\n-import sun.security.ec.point.AffinePoint;\n-import sun.security.ec.point.MutablePoint;\n@@ -210,7 +208,0 @@\n-        ECParameterSpec ecParams = getParams();\n-        ECOperations ops = ECOperations.forParameters(ecParams)\n-                .orElseThrow(ProviderException::new);\n-        MutablePoint pub = ops.multiply(ecParams.getGenerator(), getArrayS0());\n-        AffinePoint affPub = pub.asAffine();\n-        ECPoint w = new ECPoint(affPub.getX().asBigInteger(),\n-                affPub.getY().asBigInteger());\n@@ -218,1 +209,1 @@\n-            return new ECPublicKeyImpl(w, ecParams);\n+            return ECUtil.sArrayToPublicKey(getArrayS0(), getParams());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECPrivateKeyImpl.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-     * ECKeyFactory.\n+     * ECKeyFactory and ECUtil.\n@@ -63,1 +63,1 @@\n-    ECPublicKeyImpl(ECPoint w, ECParameterSpec params)\n+    public ECPublicKeyImpl(ECPoint w, ECParameterSpec params)\n@@ -145,1 +145,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECPublicKeyImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,4 @@\n+import sun.security.ec.ECOperations;\n+import sun.security.ec.ECPublicKeyImpl;\n+import sun.security.ec.point.AffinePoint;\n+import sun.security.ec.point.MutablePoint;\n@@ -378,0 +382,12 @@\n+    \/\/ Calculate an ECPublicKey from the private sArray component\n+    public static ECPublicKey sArrayToPublicKey(byte[] sArray, ECParameterSpec params)\n+            throws InvalidKeyException {\n+        ECOperations ops = ECOperations.forParameters(params)\n+                .orElseThrow(ProviderException::new);\n+        MutablePoint pub = ops.multiply(params.getGenerator(), sArray);\n+        AffinePoint affPub = pub.asAffine();\n+        ECPoint w = new ECPoint(affPub.getX().asBigInteger(),\n+                affPub.getY().asBigInteger());\n+        return new ECPublicKeyImpl(w, params);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ECUtil.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,0 +270,6 @@\n+            PublicKey pk = null;\n+            try {\n+                pk = ECUtil.sArrayToPublicKey(ECUtil.sArray(s, params), params);\n+            } catch (Exception e) {\n+                \/\/ Happens when params is not supported. Ignore it.\n+            }\n@@ -271,1 +277,1 @@\n-                (session, keyID, \"EC\", params.getCurve().getField().getFieldSize(), attributes);\n+                    (session, keyID, \"EC\", params.getCurve().getField().getFieldSize(), attributes, pk);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11ECKeyFactory.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import sun.security.util.InternalPrivateKey;\n@@ -402,0 +403,7 @@\n+        return privateKey(session, keyID, algorithm, keyLength, attrs, null);\n+    }\n+\n+    \/\/ Create a PrivateKey with an optional PublicKey. The PublicKey is only\n+    \/\/ added to EC keys at the moment.\n+    static PrivateKey privateKey(Session session, long keyID, String algorithm,\n+            int keyLength, CK_ATTRIBUTE[] attrs, PublicKey pk) {\n@@ -420,1 +428,1 @@\n-                    keyLength, attrs, keySensitive);\n+                    keyLength, attrs, keySensitive, pk);\n@@ -1204,1 +1212,2 @@\n-    static class P11ECPrivateKeyInternal extends P11PrivateKey {\n+    static class P11ECPrivateKeyInternal extends P11PrivateKey\n+            implements InternalPrivateKey {\n@@ -1209,0 +1218,1 @@\n+        private final PublicKey pk;\n@@ -1213,1 +1223,1 @@\n-                boolean keySensitive) {\n+                boolean keySensitive, PublicKey pk) {\n@@ -1216,1 +1226,1 @@\n-                        keyLength, attrs);\n+                        keyLength, attrs, pk);\n@@ -1219,1 +1229,1 @@\n-                        keyLength, attrs);\n+                        keyLength, attrs, pk);\n@@ -1224,1 +1234,1 @@\n-                String algorithm, int keyLength, CK_ATTRIBUTE[] attrs) {\n+                String algorithm, int keyLength, CK_ATTRIBUTE[] attrs, PublicKey pk) {\n@@ -1226,0 +1236,1 @@\n+            this.pk = pk;\n@@ -1248,0 +1259,5 @@\n+\n+        @Override\n+        public PublicKey calculatePublicKey() {\n+            return pk;\n+        }\n@@ -1258,2 +1274,2 @@\n-                int keyLength, CK_ATTRIBUTE[] attrs) {\n-            super(session, keyID, algorithm, keyLength, attrs);\n+                int keyLength, CK_ATTRIBUTE[] attrs, PublicKey pk) {\n+            super(session, keyID, algorithm, keyLength, attrs, pk);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Key.java","additions":24,"deletions":8,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -430,1 +430,1 @@\n-                (session, keyIDs[1], algorithm, keySize, privateKeyTemplate);\n+                (session, keyIDs[1], algorithm, keySize, privateKeyTemplate, publicKey);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyPairGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -316,1 +316,1 @@\n-                    return loadPkey(session, h.handle);\n+                    return loadPkey(session, h.handle, aliasInfo.cert.getPublicKey());\n@@ -971,1 +971,0 @@\n-                    PrivateKey pkey = loadPkey(session, h.handle);\n@@ -973,0 +972,1 @@\n+                    PrivateKey pkey = loadPkey(session, h.handle, chain[0].getPublicKey());\n@@ -1308,1 +1308,1 @@\n-    private PrivateKey loadPkey(Session session, long oHandle)\n+    private PrivateKey loadPkey(Session session, long oHandle, PublicKey pk)\n@@ -1388,1 +1388,1 @@\n-            return P11Key.privateKey(session, oHandle, \"EC\", keyLength, null);\n+            return P11Key.privateKey(session, oHandle, \"EC\", keyLength, null, pk);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyStore.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -798,0 +798,1 @@\n+                    \/\/ in this case, there is no way to get the associated public key\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyWrapCipher.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4938185\n+ * @bug 4938185 8350134\n@@ -36,0 +36,4 @@\n+ * @modules jdk.crypto.cryptoki\n+ *          java.base\/sun.security.tools.keytool\n+ *          java.base\/sun.security.util\n+ *          java.base\/sun.security.x509\n@@ -65,0 +69,3 @@\n+import sun.security.tools.keytool.CertAndKeyGen;\n+import sun.security.util.InternalPrivateKey;\n+import sun.security.x509.X500Name;\n@@ -242,0 +249,1 @@\n+                testnum = Basic.calculatePublicKey(testnum);\n@@ -916,0 +924,22 @@\n+    private static int calculatePublicKey(int testnum) throws Exception {\n+        System.out.println(\"check calculatePublicKey in keystore\");\n+        var kag = new CertAndKeyGen(\"EC\", \"SHA256withECDSA\");\n+        kag.generate(-1);\n+\n+        ks.setKeyEntry(\"a2\", kag.getPrivateKey(), null,\n+                new Certificate[] {kag.getSelfCertificate(new X500Name(\"CN=Me\"), 1000)});\n+        var sk = ks.getKey(\"a2\", null);\n+        if (sk instanceof InternalPrivateKey ipk) {\n+            var pk = ipk.calculatePublicKey();\n+            var cert = ks.getCertificate(\"a2\");\n+            if (!cert.getPublicKey().equals(pk)) {\n+                throw new SecurityException(\"Associated public key is not correct\");\n+            }\n+        } else {\n+            throw new SecurityException(\"Not an InternalPrivateKey\");\n+        }\n+        System.out.println(\"test \" + testnum++ + \" passed\");\n+\n+        return testnum;\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/Basic.java","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8350134\n+ * @summary Verify that pkcs11 EC keys has public key associated\n+ * @library \/test\/lib ..\n+ * @modules jdk.crypto.cryptoki\n+ *          java.base\/sun.security.util\n+ * @run main\/othervm CalculatePublicKey p11-nss.txt\n+ * @run main\/othervm CalculatePublicKey p11-nss-sensitive.txt\n+ *\/\n+\n+import sun.security.util.InternalPrivateKey;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.KeyGenerator;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.security.*;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+\n+public class CalculatePublicKey extends PKCS11Test {\n+\n+    public static void main(String[] args) throws Exception {\n+        main(new CalculatePublicKey(args[0]), args);\n+    }\n+\n+    public CalculatePublicKey(String conf) throws IOException {\n+        copyNssCertKeyToClassesDir();\n+        setCommonSystemProps();\n+        System.setProperty(\"CUSTOM_P11_CONFIG\",\n+                Path.of(System.getProperty(\"test.src\", \".\"), \"..\/nss\/\" + conf).toString());\n+        System.setProperty(\"TOKEN\", \"nss\");\n+        System.setProperty(\"TEST\", \"basic\");\n+    }\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+\n+        \/\/ Newly generated\n+        var kp = KeyPairGenerator.getInstance(\"EC\", p).generateKeyPair();\n+        check(kp.getPrivate());\n+\n+        \/\/ Translate from another key\n+        var kp2 = KeyPairGenerator.getInstance(\"EC\", \"SunEC\").generateKeyPair();\n+        check((PrivateKey) KeyFactory.getInstance(\"EC\", p).translateKey(kp2.getPrivate()));\n+\n+        \/\/ Generate from PKCS8\n+        check(KeyFactory.getInstance(\"EC\", p).generatePrivate(\n+                new PKCS8EncodedKeySpec(kp2.getPrivate().getEncoded())));\n+\n+        \/\/ Unwrapped: not supported yet.\n+        KeyGenerator kg = KeyGenerator.getInstance(\"AES\", p);\n+        kg.init(256);\n+        var k = kg.generateKey();\n+        var cipher = Cipher.getInstance(\"AES_256\/KW\/PKCS5Padding\", p);\n+        cipher.init(Cipher.WRAP_MODE, k);\n+        var wrapped = cipher.wrap(kp.getPrivate());\n+        cipher.init(Cipher.UNWRAP_MODE, k);\n+\n+        \/\/ check((PrivateKey) cipher.unwrap(wrapped, \"EC\", Cipher.PRIVATE_KEY));\n+    }\n+\n+    static void check(PrivateKey sk) throws Exception {\n+        System.out.println(sk);\n+        if (sk instanceof InternalPrivateKey ipk) {\n+            if (ipk.calculatePublicKey() == null) {\n+                throw new Exception(\"Associated public key is null\");\n+            }\n+        } else {\n+            throw new Exception(\"Not an InternalPrivateKey\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/CalculatePublicKey.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}