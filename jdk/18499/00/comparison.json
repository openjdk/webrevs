{"files":[{"patch":"@@ -137,10 +137,0 @@\n- * @apiNote A subclass could perform more consistent pattern validation by\n- * throwing an {@code IllegalArgumentException} for all incorrect cases.\n- * @implNote Given an incorrect pattern, this implementation may either\n- * throw an exception or succeed and discard the incorrect portion. A {@code\n- * NumberFormatException} is thrown if a {@code limit} can not be\n- * parsed as a numeric value and an {@code IllegalArgumentException} is thrown\n- * if a {@code SubPattern} is missing, or the intervals are not ascending.\n- * Discarding the incorrect portion may result in a ChoiceFormat with\n- * empty {@code limits} and {@code formats}.\n- *\n@@ -227,0 +217,15 @@\n+ * @apiNote A subclass could perform more consistent pattern validation by\n+ * throwing an {@code IllegalArgumentException} for all incorrect cases.\n+ * See the {@code Implementation Note} for this implementation's behavior regarding\n+ * incorrect patterns.\n+ * <p>This class inherits instance methods from {@code NumberFormat} it does\n+ * not utilize; a subclass could override and throw {@code\n+ * UnsupportedOperationException} for such methods.\n+ * @implNote Given an incorrect pattern, this implementation may either\n+ * throw an exception or succeed and discard the incorrect portion. A {@code\n+ * NumberFormatException} is thrown if a {@code limit} can not be\n+ * parsed as a numeric value and an {@code IllegalArgumentException} is thrown\n+ * if a {@code SubPattern} is missing, or the intervals are not ascending.\n+ * Discarding the incorrect portion may result in a ChoiceFormat with\n+ * empty {@code limits} and {@code formats}.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"}]}