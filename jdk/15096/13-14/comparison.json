{"files":[{"patch":"@@ -532,21 +532,17 @@\n-    {\n-        HWND parentID = AwtPrintControl::getParentID(env, self);\n-        if (parentID != NULL && ::IsWindow(parentID)) {\n-            \/\/ windows native modality is requested (used by JavaFX).\n-            setup.hwndOwner = parentID;\n-        }\n-        \/*\n-          Fix for 6488834.\n-          To disable Win32 native parent modality we have to set\n-          hwndOwner field to either NULL or some hidden window. For\n-          parentless dialogs we use NULL to show them in the taskbar,\n-          and for all other dialogs AwtToolkit's HWND is used.\n-        *\/\n-        else if (awtParent != NULL)\n-        {\n-            setup.hwndOwner = AwtToolkit::GetInstance().GetHWnd();\n-        }\n-        else\n-        {\n-            setup.hwndOwner = NULL;\n-        }\n+    HWND parentID = AwtPrintControl::getParentID(env, self);\n+    if (parentID != NULL && ::IsWindow(parentID)) {\n+        \/\/ windows native modality is requested (used by JavaFX).\n+        setup.hwndOwner = parentID;\n+    }\n+    \/*\n+      Fix for 6488834.\n+      To disable Win32 native parent modality we have to set\n+      hwndOwner field to either NULL or some hidden window. For\n+      parentless dialogs we use NULL to show them in the taskbar,\n+      and for all other dialogs AwtToolkit's HWND is used.\n+    *\/\n+    else if (awtParent != NULL) {\n+        setup.hwndOwner = AwtToolkit::GetInstance().GetHWnd();\n+    } else {\n+        setup.hwndOwner = NULL;\n+    }\n@@ -554,20 +550,26 @@\n-        setup.hDevMode = NULL;\n-        setup.hDevNames = NULL;\n-        setup.Flags = PSD_RETURNDEFAULT | PSD_DEFAULTMINMARGINS;\n-        \/\/ setup.ptPaperSize =\n-        \/\/ setup.rtMinMargin =\n-        \/\/ setup.rtMargin =\n-        setup.hInstance = NULL;\n-        setup.lCustData = (LPARAM)peerGlobalRef;\n-        setup.lpfnPageSetupHook = reinterpret_cast<LPPAGESETUPHOOK>(pageDlgHook);\n-        setup.lpfnPagePaintHook = NULL;\n-        setup.lpPageSetupTemplateName = NULL;\n-        setup.hPageSetupTemplate = NULL;\n-\n-\n-        \/* Because the return default flag is set, this first call\n-         * will not display the dialog but will return default values, inc\n-         * including hDevMode, hDevName, ptPaperSize, and rtMargin values.\n-         * We can use the devmode to set the orientation of the page\n-         * and the size of the page.\n-         * The units used by the user is also needed.\n+    setup.hDevMode = NULL;\n+    setup.hDevNames = NULL;\n+    setup.Flags = PSD_RETURNDEFAULT | PSD_DEFAULTMINMARGINS;\n+    \/\/ setup.ptPaperSize =\n+    \/\/ setup.rtMinMargin =\n+    \/\/ setup.rtMargin =\n+    setup.hInstance = NULL;\n+    setup.lCustData = (LPARAM)peerGlobalRef;\n+    setup.lpfnPageSetupHook = reinterpret_cast<LPPAGESETUPHOOK>(pageDlgHook);\n+    setup.lpfnPagePaintHook = NULL;\n+    setup.lpPageSetupTemplateName = NULL;\n+    setup.hPageSetupTemplate = NULL;\n+\n+\n+    \/* Because the return default flag is set, this first call\n+     * will not display the dialog but will return default values, inc\n+     * including hDevMode, hDevName, ptPaperSize, and rtMargin values.\n+     * We can use the devmode to set the orientation of the page\n+     * and the size of the page.\n+     * The units used by the user is also needed.\n+     *\/\n+    if (AwtPrintControl::getPrintHDMode(env, self) == NULL ||\n+        AwtPrintControl::getPrintHDName(env,self) == NULL) {\n+        static_cast<void>(::PageSetupDlg(&setup));\n+        \/* check if hDevMode and hDevNames are set.\n+         * If both are null, then there is no default printer.\n@@ -575,13 +577,11 @@\n-        if (AwtPrintControl::getPrintHDMode(env, self) == NULL ||\n-            AwtPrintControl::getPrintHDName(env,self) == NULL) {\n-            (void)::PageSetupDlg(&setup);\n-            \/* check if hDevMode and hDevNames are set.\n-             * If both are null, then there is no default printer.\n-             *\/\n-            if ((setup.hDevMode == NULL) && (setup.hDevNames == NULL)) {\n-                doIt = JNI_FALSE;\n-                goto done;\n-            }\n-        } else {\n-            int measure = PSD_INTHOUSANDTHSOFINCHES;\n-            int sz = GetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_IMEASURE, NULL, 0);\n+        if ((setup.hDevMode == NULL) && (setup.hDevNames == NULL)) {\n+            doIt = JNI_FALSE;\n+            goto done;\n+        }\n+    } else {\n+        int measure = PSD_INTHOUSANDTHSOFINCHES;\n+        int sz = GetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_IMEASURE, NULL, 0);\n+        if (sz > 0) {\n+          LPTSTR str = (LPTSTR)SAFE_SIZE_ARRAY_ALLOC(safe_Malloc, sizeof(TCHAR), sz);\n+          if (str != NULL) {\n+            sz = GetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_IMEASURE, str, sz);\n@@ -589,9 +589,2 @@\n-              LPTSTR str = (LPTSTR)SAFE_SIZE_ARRAY_ALLOC(safe_Malloc, sizeof(TCHAR), sz);\n-              if (str != NULL) {\n-                sz = GetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_IMEASURE, str, sz);\n-                if (sz > 0) {\n-                  if (_tcscmp(TEXT(\"0\"), str) == 0) {\n-                    measure = PSD_INHUNDREDTHSOFMILLIMETERS;\n-                  }\n-                }\n-                free((LPTSTR)str);\n+              if (_tcscmp(TEXT(\"0\"), str) == 0) {\n+                measure = PSD_INHUNDREDTHSOFMILLIMETERS;\n@@ -600,12 +593,2 @@\n-            setup.Flags |= measure;\n-            setup.hDevMode = AwtPrintControl::getPrintHDMode(env, self);\n-            setup.hDevNames = AwtPrintControl::getPrintHDName(env, self);\n-        }\n-        \/* Move page size and orientation from the PageFormat object\n-         * into the Windows setup structure so that the format can\n-         * be displayed in the dialog.\n-         *\/\n-        pageFormatToSetup(env, self, page, &setup, AwtPrintControl::getPrintDC(env, self));\n-        if (env->ExceptionCheck()) {\n-            doIt = JNI_FALSE;\n-            goto done;\n+            free((LPTSTR)str);\n+          }\n@@ -613,0 +596,13 @@\n+        setup.Flags |= measure;\n+        setup.hDevMode = AwtPrintControl::getPrintHDMode(env, self);\n+        setup.hDevNames = AwtPrintControl::getPrintHDName(env, self);\n+    }\n+    \/* Move page size and orientation from the PageFormat object\n+     * into the Windows setup structure so that the format can\n+     * be displayed in the dialog.\n+     *\/\n+    pageFormatToSetup(env, self, page, &setup, AwtPrintControl::getPrintDC(env, self));\n+    if (env->ExceptionCheck()) {\n+        doIt = JNI_FALSE;\n+        goto done;\n+    }\n@@ -614,2 +610,2 @@\n-        setup.lpfnPageSetupHook = reinterpret_cast<LPPAGESETUPHOOK>(pageDlgHook);\n-        setup.Flags = PSD_ENABLEPAGESETUPHOOK | PSD_MARGINS;\n+    setup.lpfnPageSetupHook = reinterpret_cast<LPPAGESETUPHOOK>(pageDlgHook);\n+    setup.Flags = PSD_ENABLEPAGESETUPHOOK | PSD_MARGINS;\n@@ -617,1 +613,1 @@\n-        AwtDialog::CheckInstallModalHook();\n+    AwtDialog::CheckInstallModalHook();\n@@ -619,2 +615,3 @@\n-        BOOL ret = ::PageSetupDlg(&setup);\n-        if (ret) {\n+    BOOL result;\n+    result = ::PageSetupDlg(&setup);\n+    if (result) {\n@@ -622,28 +619,27 @@\n-            jobject paper = getPaper(env, page);\n-            if (paper == NULL) {\n-                doIt = JNI_FALSE;\n-                goto done;\n-            }\n-            int units = setup.Flags & PSD_INTHOUSANDTHSOFINCHES ?\n-                                                    MM_HIENGLISH :\n-                                                    MM_HIMETRIC;\n-            POINT paperSize;\n-            RECT margins;\n-            jint orientation;\n-\n-            \/* The printer may have been changed, and we track that change,\n-             * but then need to get a new DC for the current printer so that\n-             * we validate the paper size correctly\n-             *\/\n-            if (setup.hDevNames != NULL) {\n-                DEVNAMES* names = (DEVNAMES*)::GlobalLock(setup.hDevNames);\n-                if (names != NULL) {\n-                    LPTSTR printer = (LPTSTR)names+names->wDeviceOffset;\n-                    SAVE_CONTROLWORD\n-                    HDC newDC = ::CreateDC(TEXT(\"WINSPOOL\"), printer, NULL, NULL);\n-                    RESTORE_CONTROLWORD\n-                    if (newDC != NULL) {\n-                        HDC oldDC = AwtPrintControl::getPrintDC(env, self);\n-                        if (oldDC != NULL) {\n-                             ::DeleteDC(oldDC);\n-                        }\n+        jobject paper = getPaper(env, page);\n+        if (paper == NULL) {\n+            doIt = JNI_FALSE;\n+            goto done;\n+        }\n+        int units = setup.Flags & PSD_INTHOUSANDTHSOFINCHES ?\n+                                                MM_HIENGLISH :\n+                                                MM_HIMETRIC;\n+        POINT paperSize;\n+        RECT margins;\n+        jint orientation;\n+\n+        \/* The printer may have been changed, and we track that change,\n+         * but then need to get a new DC for the current printer so that\n+         * we validate the paper size correctly\n+         *\/\n+        if (setup.hDevNames != NULL) {\n+            DEVNAMES* names = (DEVNAMES*)::GlobalLock(setup.hDevNames);\n+            if (names != NULL) {\n+                LPTSTR printer = (LPTSTR)names+names->wDeviceOffset;\n+                SAVE_CONTROLWORD\n+                HDC newDC = ::CreateDC(TEXT(\"WINSPOOL\"), printer, NULL, NULL);\n+                RESTORE_CONTROLWORD\n+                if (newDC != NULL) {\n+                    HDC oldDC = AwtPrintControl::getPrintDC(env, self);\n+                    if (oldDC != NULL) {\n+                         ::DeleteDC(oldDC);\n@@ -651,1 +647,0 @@\n-                    AwtPrintControl::setPrintDC(env, self, newDC);\n@@ -653,1 +648,1 @@\n-                ::GlobalUnlock(setup.hDevNames);\n+                AwtPrintControl::setPrintDC(env, self, newDC);\n@@ -655,0 +650,2 @@\n+            ::GlobalUnlock(setup.hDevNames);\n+        }\n@@ -656,4 +653,4 @@\n-            \/* Get the Windows paper and margins description.\n-            *\/\n-            retrievePaperInfo(&setup, &paperSize, &margins, &orientation,\n-                              AwtPrintControl::getPrintDC(env, self));\n+        \/* Get the Windows paper and margins description.\n+        *\/\n+        retrievePaperInfo(&setup, &paperSize, &margins, &orientation,\n+                          AwtPrintControl::getPrintDC(env, self));\n@@ -661,31 +658,30 @@\n-            \/* Convert the Windows' paper and margins description\n-             * and place them into a Paper instance.\n-             *\/\n-            setPaperValues(env, paper, &paperSize, &margins, units);\n-             if (env->ExceptionCheck()) {\n-                 doIt = JNI_FALSE;\n-                 goto done;\n-             }\n-            \/*\n-             * Put the updated Paper instance and the orientation into\n-             * the PageFormat.\n-             *\/\n-            setPaper(env, page, paper);\n-            if (env->ExceptionCheck()) {\n-                 doIt = JNI_FALSE;\n-                 goto done;\n-            }\n-            setPageFormatOrientation(env, page, orientation);\n-            if (env->ExceptionCheck()) {\n-                 doIt = JNI_FALSE;\n-                 goto done;\n-            }\n-            if (setup.hDevMode != NULL) {\n-                DEVMODE *devmode = (DEVMODE *)::GlobalLock(setup.hDevMode);\n-                if (devmode != NULL) {\n-                    if (devmode->dmFields & DM_PAPERSIZE) {\n-                        jboolean err = setPrintPaperSize(env, self, devmode->dmPaperSize);\n-                        if (err) {\n-                            doIt = JNI_FALSE;\n-                            goto done;\n-                        }\n+        \/* Convert the Windows' paper and margins description\n+         * and place them into a Paper instance.\n+         *\/\n+        setPaperValues(env, paper, &paperSize, &margins, units);\n+         if (env->ExceptionCheck()) {\n+             doIt = JNI_FALSE;\n+             goto done;\n+         }\n+        \/*\n+         * Put the updated Paper instance and the orientation into\n+         * the PageFormat.\n+         *\/\n+        setPaper(env, page, paper);\n+        if (env->ExceptionCheck()) {\n+             doIt = JNI_FALSE;\n+             goto done;\n+        }\n+        setPageFormatOrientation(env, page, orientation);\n+        if (env->ExceptionCheck()) {\n+             doIt = JNI_FALSE;\n+             goto done;\n+        }\n+        if (setup.hDevMode != NULL) {\n+            DEVMODE *devmode = (DEVMODE *)::GlobalLock(setup.hDevMode);\n+            if (devmode != NULL) {\n+                if (devmode->dmFields & DM_PAPERSIZE) {\n+                    jboolean err = setPrintPaperSize(env, self, devmode->dmPaperSize);\n+                    if (err) {\n+                        doIt = JNI_FALSE;\n+                        goto done;\n@@ -694,1 +690,0 @@\n-                ::GlobalUnlock(setup.hDevMode);\n@@ -696,1 +691,1 @@\n-            doIt = JNI_TRUE;\n+            ::GlobalUnlock(setup.hDevMode);\n@@ -698,0 +693,2 @@\n+        doIt = JNI_TRUE;\n+    }\n@@ -699,1 +696,1 @@\n-        AwtDialog::CheckUninstallModalHook();\n+    AwtDialog::CheckUninstallModalHook();\n@@ -701,1 +698,1 @@\n-        AwtDialog::ModalActivateNextWindow(NULL, target, peer);\n+    AwtDialog::ModalActivateNextWindow(NULL, target, peer);\n@@ -703,4 +700,5 @@\n-        HGLOBAL oldG = AwtPrintControl::getPrintHDMode(env, self);\n-        if (setup.hDevMode != oldG) {\n-            AwtPrintControl::setPrintHDMode(env, self, setup.hDevMode);\n-        }\n+    HGLOBAL oldG;\n+    oldG = AwtPrintControl::getPrintHDMode(env, self);\n+    if (setup.hDevMode != oldG) {\n+        AwtPrintControl::setPrintHDMode(env, self, setup.hDevMode);\n+    }\n@@ -708,4 +706,3 @@\n-        oldG = AwtPrintControl::getPrintHDName(env, self);\n-        if (setup.hDevNames != oldG) {\n-            AwtPrintControl::setPrintHDName(env, self, setup.hDevNames);\n-        }\n+    oldG = AwtPrintControl::getPrintHDName(env, self);\n+    if (setup.hDevNames != oldG) {\n+        AwtPrintControl::setPrintHDName(env, self, setup.hDevNames);\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_PrintJob.cpp","additions":154,"deletions":157,"binary":false,"changes":311,"status":"modified"}]}