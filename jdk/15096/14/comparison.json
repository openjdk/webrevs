{"files":[{"patch":"@@ -566,1 +566,1 @@\n-    TOOLCHAIN_CFLAGS_JDK=\"-nologo -MD -Zc:preprocessor -Zc:strictStrings -Zc:inline -utf-8 -Zc:wchar_t-\"\n+    TOOLCHAIN_CFLAGS_JDK=\"-nologo -MD -Zc:preprocessor -Zc:strictStrings -Zc:inline -permissive- -utf-8 -Zc:wchar_t-\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-void D3DGlyphCache_FlushGlyphVertexCache();\n+static void D3DGlyphCache_FlushGlyphVertexCache();\n","filename":"src\/java.desktop\/windows\/native\/libawt\/java2d\/d3d\/D3DGlyphCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -217,1 +217,2 @@\n-    AwtCanvas *c = (AwtCanvas*)pData;\n+    AwtCanvas *c;\n+    c = (AwtCanvas*) pData;\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Canvas.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -6376,2 +6376,4 @@\n-        HWND selfWnd = awtComponent->GetHWnd();\n-        HWND parentWnd = awtParent->GetHWnd();\n+        HWND selfWnd;\n+        HWND parentWnd;\n+        selfWnd = awtComponent->GetHWnd();\n+        parentWnd = awtParent->GetHWnd();\n@@ -6550,1 +6552,2 @@\n-    AwtComponent *component = (AwtComponent *)pData;\n+    AwtComponent *component;\n+    component = (AwtComponent *) pData;\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Component.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#include <awt.h>\n@@ -45,0 +44,4 @@\n+\/\/ Moved here as we don't want to pull in the redefined allocation functions\n+#include \"awt_ole.h\"\n+#include \"awt_DCHolder.h\"\n+\n@@ -46,0 +49,1 @@\n+#include \"awt.h\"\n@@ -57,3 +61,0 @@\n-#include \"awt_ole.h\"\n-#include \"awt_DCHolder.h\"\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_DnDDS.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"awt_ole.h\"\n@@ -34,1 +35,0 @@\n-#include \"awt_ole.h\"\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_DnDDT.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1352,3 +1352,3 @@\n-    HWND hwnd = f->GetHWnd();\n-    if (::IsWindow(hwnd))\n-    {\n+    HWND hwnd;\n+    hwnd = f->GetHWnd();\n+    if (::IsWindow(hwnd)) {\n@@ -1357,3 +1357,6 @@\n-        BOOL iconify = (state & java_awt_Frame_ICONIFIED) != 0;\n-        BOOL zoom = (state & java_awt_Frame_MAXIMIZED_BOTH)\n-                        == java_awt_Frame_MAXIMIZED_BOTH;\n+        BOOL iconify;\n+        BOOL zoom;\n+\n+        iconify = (state & java_awt_Frame_ICONIFIED) != 0;\n+        zoom = (state & java_awt_Frame_MAXIMIZED_BOTH)\n+                   == java_awt_Frame_MAXIMIZED_BOTH;\n@@ -1368,1 +1371,2 @@\n-            BOOL focusable = f->IsFocusableWindow();\n+            BOOL focusable;\n+            focusable = f->IsFocusableWindow();\n@@ -1581,1 +1585,2 @@\n-    AwtFrame *f = (AwtFrame *)pData;\n+    AwtFrame *f;\n+    f = (AwtFrame *) pData;\n@@ -1586,1 +1591,2 @@\n-    AwtDialog *d = (AwtDialog *)pData;\n+    AwtDialog *d;\n+    d = (AwtDialog *) pData;\n@@ -1588,2 +1594,1 @@\n-    if ((f != NULL) && ::IsWindow(f->GetHWnd()))\n-    {\n+    if ((f != NULL) && ::IsWindow(f->GetHWnd())) {\n@@ -1591,1 +1596,2 @@\n-        HWND fHWnd = f->GetHWnd();\n+        HWND fHWnd;\n+        fHWnd = f->GetHWnd();\n@@ -1603,1 +1609,2 @@\n-            DWORD fThread = ::GetWindowThreadProcessId(fHWnd, NULL);\n+            DWORD fThread;\n+            fThread = ::GetWindowThreadProcessId(fHWnd, NULL);\n@@ -1606,1 +1613,2 @@\n-                BlockedThreadStruct *blockedThread = (BlockedThreadStruct *)sm_BlockedThreads.get((void *)((intptr_t)fThread));\n+                BlockedThreadStruct *blockedThread;\n+                blockedThread = (BlockedThreadStruct *) sm_BlockedThreads.get((void *)((intptr_t)fThread));\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Frame.cpp","additions":22,"deletions":14,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -38,4 +38,4 @@\n-    static jfieldID AwtPrintDialog::controlID;\n-    static jfieldID AwtPrintDialog::parentID;\n-    static jfieldID AwtPrintDialog::pageID;\n-    static jmethodID AwtPrintDialog::setHWndMID;\n+    static jfieldID controlID;\n+    static jfieldID parentID;\n+    static jfieldID pageID;\n+    static jmethodID setHWndMID;\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_PrintDialog.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+jfieldID AwtPrintDialog::pageID;\n+\n@@ -212,1 +214,0 @@\n-jfieldID AwtPrintDialog::pageID;\n@@ -543,2 +544,1 @@\n-    else if (awtParent != NULL)\n-    {\n+    else if (awtParent != NULL) {\n@@ -546,3 +546,1 @@\n-    }\n-    else\n-    {\n+    } else {\n@@ -575,1 +573,1 @@\n-        (void)::PageSetupDlg(&setup);\n+        static_cast<void>(::PageSetupDlg(&setup));\n@@ -617,2 +615,3 @@\n-    BOOL ret = ::PageSetupDlg(&setup);\n-    if (ret) {\n+    BOOL result;\n+    result = ::PageSetupDlg(&setup);\n+    if (result) {\n@@ -701,1 +700,2 @@\n-    HGLOBAL oldG = AwtPrintControl::getPrintHDMode(env, self);\n+    HGLOBAL oldG;\n+    oldG = AwtPrintControl::getPrintHDMode(env, self);\n@@ -922,1 +922,2 @@\n-    JNI_CHECK_NULL_GOTO(printDC, \"Invalid printDC\", done);\n+    {\n+        JNI_CHECK_NULL_GOTO(printDC, \"Invalid printDC\", done);\n@@ -924,82 +925,82 @@\n-    \/* We try to mitigate the effects of floating point rounding errors\n-     * by only setting a value if it would differ from the value in the\n-     * target by at least 0.10 points = 1\/720 inches.\n-     * eg if the values present in the target are close to the calculated\n-     * values then we accept the target.\n-     *\/\n-    const double epsilon = 0.10;\n-\n-    jdouble paperWidth, paperHeight;\n-    jboolean err;\n-    WORD dmPaperSize = getPrintPaperSize(env, &err, self);\n-    if (err) goto done;\n-\n-    double ix, iy, iw, ih, pw, ph;\n-\n-    DASSERT(AwtToolkit::MainThread() != ::GetCurrentThreadId());\n-    jmethodID getID;\n-\n-    jclass paperClass = env->GetObjectClass(origPaper);\n-    JNI_CHECK_NULL_GOTO(paperClass, \"paper class not found\", done);\n-    getID = env->GetMethodID(paperClass, GETWIDTH_STR, GETWIDTH_SIG);\n-    JNI_CHECK_NULL_GOTO(getID, \"no getWidth method\", done);\n-    pw = env->CallDoubleMethod(origPaper, getID);\n-    getID = env->GetMethodID(paperClass, GETHEIGHT_STR, GETHEIGHT_SIG);\n-    JNI_CHECK_NULL_GOTO(getID, \"no getHeight method\", done);\n-    ph = env->CallDoubleMethod(origPaper, getID);\n-    getID = env->GetMethodID(paperClass, GETIMG_X_STR, GETIMG_X_SIG);\n-    JNI_CHECK_NULL_GOTO(getID, \"no getX method\", done);\n-    ix = env->CallDoubleMethod(origPaper, getID);\n-    getID = env->GetMethodID(paperClass, GETIMG_Y_STR, GETIMG_Y_SIG);\n-    JNI_CHECK_NULL_GOTO(getID, \"no getY method\", done);\n-    iy = env->CallDoubleMethod(origPaper, getID);\n-    getID = env->GetMethodID(paperClass, GETIMG_W_STR, GETIMG_W_SIG);\n-    JNI_CHECK_NULL_GOTO(getID, \"no getW method\", done);\n-    iw = env->CallDoubleMethod(origPaper, getID);\n-    getID = env->GetMethodID(paperClass, GETIMG_H_STR, GETIMG_H_SIG);\n-    JNI_CHECK_NULL_GOTO(getID, \"no getH method\", done);\n-    ih = env->CallDoubleMethod(origPaper, getID);\n-\n-    matchPaperSize(printDC, hDevMode, hDevNames, pw, ph,\n-                   &paperWidth, &paperHeight, &dmPaperSize);\n-\n-    \/* Validate margins and imageable area *\/\n-\n-    \/\/ pixels per inch in x and y direction\n-    jint xPixelRes = GetDeviceCaps(printDC, LOGPIXELSX);\n-    jint yPixelRes = GetDeviceCaps(printDC, LOGPIXELSY);\n-\n-    \/\/ x & y coord of printable area in pixels\n-    jint xPixelOrg = GetDeviceCaps(printDC, PHYSICALOFFSETX);\n-    jint yPixelOrg = GetDeviceCaps(printDC, PHYSICALOFFSETY);\n-\n-    \/\/ width & height of printable area in pixels\n-    jint imgPixelWid = GetDeviceCaps(printDC, HORZRES);\n-    jint imgPixelHgt = GetDeviceCaps(printDC, VERTRES);\n-\n-    \/\/ The DC may be obtained when we first selected the printer as a\n-    \/\/ result of a call to setNativePrintService.\n-    \/\/ If the Devmode was obtained later on from the DocumentProperties dialog\n-    \/\/ the DC won't have been updated and its settings may be for PORTRAIT.\n-    \/\/ This may happen in other cases too, but was observed for the above.\n-    \/\/ To get a DC compatible with this devmode we should really call\n-    \/\/ CreateDC() again to get a DC for the devmode we are using.\n-    \/\/ The changes for that are a lot more risk, so to minimize that\n-    \/\/ risk, assume its not LANDSCAPE unless width > height, even if the\n-    \/\/ devmode says its LANDSCAPE.\n-    \/\/ if the values were obtained from a rotated device, swap.\n-    if ((getOrientationFromDevMode2(hDevMode) == DMORIENT_LANDSCAPE) &&\n-        (imgPixelWid > imgPixelHgt)) {\n-      jint tmp;\n-      tmp = xPixelRes;\n-      xPixelRes = yPixelRes;\n-      yPixelRes = tmp;\n-\n-      tmp = xPixelOrg;\n-      xPixelOrg = yPixelOrg;\n-      yPixelOrg = tmp;\n-\n-      tmp = imgPixelWid;\n-      imgPixelWid = imgPixelHgt;\n-      imgPixelHgt = tmp;\n-    }\n+        \/* We try to mitigate the effects of floating point rounding errors\n+         * by only setting a value if it would differ from the value in the\n+         * target by at least 0.10 points = 1\/720 inches.\n+         * eg if the values present in the target are close to the calculated\n+         * values then we accept the target.\n+         *\/\n+        const double epsilon = 0.10;\n+\n+        jdouble paperWidth, paperHeight;\n+        jboolean err;\n+        WORD dmPaperSize = getPrintPaperSize(env, &err, self);\n+        if (err) goto done;\n+\n+        double ix, iy, iw, ih, pw, ph;\n+\n+        DASSERT(AwtToolkit::MainThread() != ::GetCurrentThreadId());\n+        jmethodID getID;\n+\n+        jclass paperClass = env->GetObjectClass(origPaper);\n+        JNI_CHECK_NULL_GOTO(paperClass, \"paper class not found\", done);\n+        getID = env->GetMethodID(paperClass, GETWIDTH_STR, GETWIDTH_SIG);\n+        JNI_CHECK_NULL_GOTO(getID, \"no getWidth method\", done);\n+        pw = env->CallDoubleMethod(origPaper, getID);\n+        getID = env->GetMethodID(paperClass, GETHEIGHT_STR, GETHEIGHT_SIG);\n+        JNI_CHECK_NULL_GOTO(getID, \"no getHeight method\", done);\n+        ph = env->CallDoubleMethod(origPaper, getID);\n+        getID = env->GetMethodID(paperClass, GETIMG_X_STR, GETIMG_X_SIG);\n+        JNI_CHECK_NULL_GOTO(getID, \"no getX method\", done);\n+        ix = env->CallDoubleMethod(origPaper, getID);\n+        getID = env->GetMethodID(paperClass, GETIMG_Y_STR, GETIMG_Y_SIG);\n+        JNI_CHECK_NULL_GOTO(getID, \"no getY method\", done);\n+        iy = env->CallDoubleMethod(origPaper, getID);\n+        getID = env->GetMethodID(paperClass, GETIMG_W_STR, GETIMG_W_SIG);\n+        JNI_CHECK_NULL_GOTO(getID, \"no getW method\", done);\n+        iw = env->CallDoubleMethod(origPaper, getID);\n+        getID = env->GetMethodID(paperClass, GETIMG_H_STR, GETIMG_H_SIG);\n+        JNI_CHECK_NULL_GOTO(getID, \"no getH method\", done);\n+        ih = env->CallDoubleMethod(origPaper, getID);\n+\n+        matchPaperSize(printDC, hDevMode, hDevNames, pw, ph,\n+                       &paperWidth, &paperHeight, &dmPaperSize);\n+\n+        \/* Validate margins and imageable area *\/\n+\n+        \/\/ pixels per inch in x and y direction\n+        jint xPixelRes = GetDeviceCaps(printDC, LOGPIXELSX);\n+        jint yPixelRes = GetDeviceCaps(printDC, LOGPIXELSY);\n+\n+        \/\/ x & y coord of printable area in pixels\n+        jint xPixelOrg = GetDeviceCaps(printDC, PHYSICALOFFSETX);\n+        jint yPixelOrg = GetDeviceCaps(printDC, PHYSICALOFFSETY);\n+\n+        \/\/ width & height of printable area in pixels\n+        jint imgPixelWid = GetDeviceCaps(printDC, HORZRES);\n+        jint imgPixelHgt = GetDeviceCaps(printDC, VERTRES);\n+\n+        \/\/ The DC may be obtained when we first selected the printer as a\n+        \/\/ result of a call to setNativePrintService.\n+        \/\/ If the Devmode was obtained later on from the DocumentProperties dialog\n+        \/\/ the DC won't have been updated and its settings may be for PORTRAIT.\n+        \/\/ This may happen in other cases too, but was observed for the above.\n+        \/\/ To get a DC compatible with this devmode we should really call\n+        \/\/ CreateDC() again to get a DC for the devmode we are using.\n+        \/\/ The changes for that are a lot more risk, so to minimize that\n+        \/\/ risk, assume its not LANDSCAPE unless width > height, even if the\n+        \/\/ devmode says its LANDSCAPE.\n+        \/\/ if the values were obtained from a rotated device, swap.\n+        if ((getOrientationFromDevMode2(hDevMode) == DMORIENT_LANDSCAPE) &&\n+            (imgPixelWid > imgPixelHgt)) {\n+          jint tmp;\n+          tmp = xPixelRes;\n+          xPixelRes = yPixelRes;\n+          yPixelRes = tmp;\n+\n+          tmp = xPixelOrg;\n+          xPixelOrg = yPixelOrg;\n+          yPixelOrg = tmp;\n+\n+          tmp = imgPixelWid;\n+          imgPixelWid = imgPixelHgt;\n+          imgPixelHgt = tmp;\n+        }\n@@ -1007,5 +1008,5 @@\n-    \/\/ page imageable area in 1\/72\"\n-    jdouble imgX = (jdouble)((xPixelOrg * 72)\/(jdouble)xPixelRes);\n-    jdouble imgY = (jdouble)((yPixelOrg * 72)\/(jdouble)yPixelRes);\n-    jdouble imgWid = (jdouble)((imgPixelWid * 72)\/(jdouble)xPixelRes);\n-    jdouble imgHgt = (jdouble)((imgPixelHgt * 72)\/(jdouble)yPixelRes);\n+        \/\/ page imageable area in 1\/72\"\n+        jdouble imgX = (jdouble)((xPixelOrg * 72)\/(jdouble)xPixelRes);\n+        jdouble imgY = (jdouble)((yPixelOrg * 72)\/(jdouble)yPixelRes);\n+        jdouble imgWid = (jdouble)((imgPixelWid * 72)\/(jdouble)xPixelRes);\n+        jdouble imgHgt = (jdouble)((imgPixelHgt * 72)\/(jdouble)yPixelRes);\n@@ -1013,4 +1014,4 @@\n-    \/* Check each of the individual values is within range.\n-     * Then make sure imageable area is placed within imageable area.\n-     * Allow for a small floating point error in the comparisons\n-     *\/\n+        \/* Check each of the individual values is within range.\n+         * Then make sure imageable area is placed within imageable area.\n+         * Allow for a small floating point error in the comparisons\n+         *\/\n@@ -1018,30 +1019,30 @@\n-    if (ix < 0.0 ) {\n-        ix = 0.0;\n-    }\n-    if (iy < 0.0 ) {\n-        iy = 0.0;\n-    }\n-    if (iw < 0.0) {\n-        iw = 0.0;\n-    }\n-    if (ih < 0.0) {\n-        ih = 0.0;\n-    }\n-    if ((ix + epsilon) < imgX) {\n-         ix = imgX;\n-    }\n-    if ((iy + epsilon) < imgY) {\n-         iy = imgY;\n-    }\n-    if (iw + epsilon > imgWid) {\n-        iw = imgWid;\n-    }\n-    if (ih + epsilon > imgHgt) {\n-        ih = imgHgt;\n-    }\n-    if ((ix + iw + epsilon) > (imgX+imgWid)) {\n-        ix = (imgX+imgWid) - iw;\n-    }\n-    if ((iy + ih + epsilon) > (imgY+imgHgt)) {\n-        iy = (imgY+imgHgt) - ih;\n-    }\n+        if (ix < 0.0 ) {\n+            ix = 0.0;\n+        }\n+        if (iy < 0.0 ) {\n+            iy = 0.0;\n+        }\n+        if (iw < 0.0) {\n+            iw = 0.0;\n+        }\n+        if (ih < 0.0) {\n+            ih = 0.0;\n+        }\n+        if ((ix + epsilon) < imgX) {\n+             ix = imgX;\n+        }\n+        if ((iy + epsilon) < imgY) {\n+             iy = imgY;\n+        }\n+        if (iw + epsilon > imgWid) {\n+            iw = imgWid;\n+        }\n+        if (ih + epsilon > imgHgt) {\n+            ih = imgHgt;\n+        }\n+        if ((ix + iw + epsilon) > (imgX+imgWid)) {\n+            ix = (imgX+imgWid) - iw;\n+        }\n+        if ((iy + ih + epsilon) > (imgY+imgHgt)) {\n+            iy = (imgY+imgHgt) - ih;\n+        }\n@@ -1049,1 +1050,1 @@\n-    DASSERT(AwtToolkit::MainThread() != ::GetCurrentThreadId());\n+        DASSERT(AwtToolkit::MainThread() != ::GetCurrentThreadId());\n@@ -1051,1 +1052,1 @@\n-    jmethodID setSizeID = env->GetMethodID(paperClass,\n+        jmethodID setSizeID = env->GetMethodID(paperClass,\n@@ -1053,1 +1054,1 @@\n-    JNI_CHECK_NULL_GOTO(setSizeID, \"no setSize method\", done);\n+        JNI_CHECK_NULL_GOTO(setSizeID, \"no setSize method\", done);\n@@ -1055,3 +1056,3 @@\n-    jmethodID setImageableID = env->GetMethodID(paperClass,\n-                                        SETIMAGEABLE_STR, SETIMAGEABLE_SIG);\n-    JNI_CHECK_NULL_GOTO(setImageableID, \"no setImageable method\", done);\n+        jmethodID setImageableID = env->GetMethodID(paperClass,\n+                                            SETIMAGEABLE_STR, SETIMAGEABLE_SIG);\n+        JNI_CHECK_NULL_GOTO(setImageableID, \"no setImageable method\", done);\n@@ -1059,2 +1060,3 @@\n-    env->CallVoidMethod(newPaper, setSizeID, paperWidth, paperHeight);\n-    env->CallVoidMethod(newPaper, setImageableID, ix, iy, iw, ih);\n+        env->CallVoidMethod(newPaper, setSizeID, paperWidth, paperHeight);\n+        env->CallVoidMethod(newPaper, setImageableID, ix, iy, iw, ih);\n+    }\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_PrintJob.cpp","additions":142,"deletions":140,"binary":false,"changes":282,"status":"modified"},{"patch":"@@ -56,0 +56,4 @@\n+jmethodID AwtTextComponent::canAccessClipboardMID;\n+AwtTextComponent::OleCallback AwtTextComponent::sm_oleCallback;\n+WNDPROC AwtTextComponent::sm_pDefWindowProc = NULL;\n+\n@@ -60,2 +64,0 @@\n-jmethodID AwtTextComponent::canAccessClipboardMID;\n-\n@@ -914,2 +916,0 @@\n-AwtTextComponent::OleCallback AwtTextComponent::sm_oleCallback;\n-\n@@ -1043,2 +1043,0 @@\n-WNDPROC AwtTextComponent::sm_pDefWindowProc = NULL;\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_TextComponent.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1025,3 +1025,4 @@\n-    PDATA pData;\n-    JNI_CHECK_PEER_GOTO(self, ret);\n-    AwtWindow *window = (AwtWindow *)pData;\n+    {\n+        PDATA pData;\n+        JNI_CHECK_PEER_GOTO(self, ret);\n+        AwtWindow *window = (AwtWindow *)pData;\n@@ -1029,1 +1030,2 @@\n-    window->RepositionSecurityWarning(env);\n+        window->RepositionSecurityWarning(env);\n+    }\n@@ -3126,7 +3128,8 @@\n-    JNI_CHECK_NULL_GOTO(self, \"peer\", ret);\n-    PDATA pData = JNI_GET_PDATA(self);\n-    if (pData == NULL) {\n-        env->DeleteGlobalRef(self);\n-        delete mds;\n-        return;\n-    }\n+    {\n+        JNI_CHECK_NULL_GOTO(self, \"peer\", ret);\n+        PDATA pData = JNI_GET_PDATA(self);\n+        if (pData == NULL) {\n+            env->DeleteGlobalRef(self);\n+            delete mds;\n+            return;\n+        }\n@@ -3134,4 +3137,5 @@\n-    window = (AwtWindow *)pData;\n-    windowHWnd = window->GetHWnd();\n-    if (::IsWindow(windowHWnd)) {\n-        AwtWindow::SetAndActivateModalBlocker(windowHWnd, blockerHWnd);\n+        window = (AwtWindow *)pData;\n+        windowHWnd = window->GetHWnd();\n+        if (::IsWindow(windowHWnd)) {\n+            AwtWindow::SetAndActivateModalBlocker(windowHWnd, blockerHWnd);\n+        }\n@@ -3155,6 +3159,7 @@\n-    JNI_CHECK_NULL_GOTO(self, \"peer\", ret);\n-    PDATA pData = JNI_GET_PDATA(self);\n-    if (pData == NULL) {\n-        env->DeleteGlobalRef(self);\n-        return;\n-    }\n+    {\n+        JNI_CHECK_NULL_GOTO(self, \"peer\", ret);\n+        PDATA pData = JNI_GET_PDATA(self);\n+        if (pData == NULL) {\n+            env->DeleteGlobalRef(self);\n+            return;\n+        }\n@@ -3162,4 +3167,5 @@\n-    window = (AwtWindow *)pData;\n-    windowHWnd = window->GetHWnd();\n-    if (::IsWindow(windowHWnd)) {\n-        AwtWindow::SetModalBlocker(windowHWnd, NULL);\n+        window = (AwtWindow *)pData;\n+        windowHWnd = window->GetHWnd();\n+        if (::IsWindow(windowHWnd)) {\n+            AwtWindow::SetModalBlocker(windowHWnd, NULL);\n+        }\n@@ -3180,3 +3186,4 @@\n-    PDATA pData;\n-    JNI_CHECK_PEER_GOTO(self, ret);\n-    AwtWindow *window = (AwtWindow *)pData;\n+    {\n+        PDATA pData;\n+        JNI_CHECK_PEER_GOTO(self, ret);\n+        AwtWindow *window = (AwtWindow *)pData;\n@@ -3184,1 +3191,2 @@\n-    window->SetTranslucency(iOpacity, window->isOpaque());\n+        window->SetTranslucency(iOpacity, window->isOpaque());\n+    }\n@@ -3199,3 +3207,4 @@\n-    PDATA pData;\n-    JNI_CHECK_PEER_GOTO(self, ret);\n-    AwtWindow *window = (AwtWindow *)pData;\n+    {\n+        PDATA pData;\n+        JNI_CHECK_PEER_GOTO(self, ret);\n+        AwtWindow *window = (AwtWindow *)pData;\n@@ -3203,1 +3212,2 @@\n-    window->SetTranslucency(window->getOpacity(), isOpaque);\n+        window->SetTranslucency(window->getOpacity(), isOpaque);\n+    }\n@@ -3218,3 +3228,4 @@\n-    PDATA pData;\n-    JNI_CHECK_PEER_GOTO(self, ret);\n-    AwtWindow *window = (AwtWindow *)pData;\n+    {\n+        PDATA pData;\n+        JNI_CHECK_PEER_GOTO(self, ret);\n+        AwtWindow *window = (AwtWindow *)pData;\n@@ -3222,2 +3233,3 @@\n-    window->UpdateWindow(env, data, (int)uws->width, (int)uws->height,\n-                         uws->hBitmap);\n+        window->UpdateWindow(env, data, (int)uws->width, (int)uws->height,\n+                             uws->hBitmap);\n+    }\n@@ -3242,3 +3254,4 @@\n-    PDATA pData;\n-    JNI_CHECK_PEER_GOTO(self, ret);\n-    AwtWindow *window = (AwtWindow *)pData;\n+    {\n+        PDATA pData;\n+        JNI_CHECK_PEER_GOTO(self, ret);\n+        AwtWindow *window = (AwtWindow *)pData;\n@@ -3246,1 +3259,2 @@\n-    window->setFullScreenExclusiveModeState(state != 0);\n+        window->setFullScreenExclusiveModeState(state != 0);\n+    }\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Window.cpp","additions":56,"deletions":42,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -1028,1 +1028,1 @@\n-        EXCEPTION_CHECK(\"Getting ParentWithRole - call to CallObjectMethod()\", (AccessibleContext)0);\n+        EXCEPTION_CHECK(\"Getting ParentWithRole - call to CallObjectMethod()\", reinterpret_cast<jobject>((AccessibleContext) 0));\n@@ -1098,1 +1098,1 @@\n-        EXCEPTION_CHECK(\"Getting ParentWithRoleElseRoot - call to CallObjectMethod()\", (AccessibleContext)0);\n+        EXCEPTION_CHECK(\"Getting ParentWithRoleElseRoot - call to CallObjectMethod()\", reinterpret_cast<jobject>((AccessibleContext) 0));\n@@ -1155,1 +1155,1 @@\n-        EXCEPTION_CHECK(\"Getting ActiveDescendent - call to CallObjectMethod()\", (AccessibleContext)0);\n+        EXCEPTION_CHECK(\"Getting ActiveDescendent - call to CallObjectMethod()\", reinterpret_cast<jobject>((AccessibleContext) 0));\n@@ -1164,1 +1164,1 @@\n-        return (AccessibleContext)0;\n+        return reinterpret_cast<jobject>((AccessibleContext) 0);\n","filename":"src\/jdk.accessibility\/windows\/native\/libjavaaccessbridge\/AccessBridgeJavaEntryPoints.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}