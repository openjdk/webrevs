{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,0 +96,8 @@\n+    final String xsl8349699 = \"\"\"\n+                <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+                <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\">\n+                  <xsl:output encoding=\"UTF-8\" method=\"text\" \/>\n+                  <xsl:template match=\"\/\"><xsl:apply-templates select=\"node()\" \/><\/xsl:template>\n+                <\/xsl:stylesheet>\n+                \"\"\";\n+\n@@ -104,0 +112,49 @@\n+    \/*\n+     * Data for verifying the patch for JDK8349699\n+     * @see testBug8349699\n+     *\/\n+    @DataProvider(name = \"surrogatePair\")\n+    public Object[][] getDataFor8349699() {\n+        return new Object[][]{\n+            \/\/ a surrogate pair in an XML element placed anywhere in a string\n+            {getXML(1024, 1024, \"<b>\\uD835\\uDF00<\/b>\"), getString(1024, 1024, \"\\uD835\\uDF00\")},\n+            {getXML(1023, 1023, \"<b>\\uD835\\uDF00<\/b>\"), getString(1023, 1023, \"\\uD835\\uDF00\")},\n+            {getXML(1023,0, \"<b>\\uD835\\uDF00<\/b>\"), getString(1023,0, \"\\uD835\\uDF00\")},\n+            {getXML(1023,120, \"<b>\\uD835\\uDF00<\/b>\"), getString(1023,120, \"\\uD835\\uDF00\")},\n+            \/\/ this is the original test as demonstrated in the bug report\n+            {getXML(1017,1017, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00<b>\\uD835\\uDF00<\/b>\\uD835\\uDF00\"),\n+                    getString(1017,1017, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00\\uD835\\uDF00\\uD835\\uDF00\")},\n+            {getXML(1017,0, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00<b>\\uD835\\uDF00<\/b>\\uD835\\uDF00\"),\n+                    getString(1017,0, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00\\uD835\\uDF00\\uD835\\uDF00\")},\n+            {getXML(1017,120, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00<b>\\uD835\\uDF00<\/b>\\uD835\\uDF00\"),\n+                    getString(1017,120, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00\\uD835\\uDF00\\uD835\\uDF00\")},\n+        };\n+    }\n+\n+    \/*\n+     * Data for verifying the patch for JDK8349699\n+     * @see testBug8349699N\n+     *\/\n+    @DataProvider(name = \"invalidSurrogatePair\")\n+    public Object[][] getDataFor8349699N() {\n+        return new Object[][]{\n+                \/\/ invalid pair: high\/high\n+                {getXML(1024, 1024, \"<b>\\uD835\\uD835<\/b>\")},\n+                {getXML(1023, 1023, \"<b>\\uD835\\uD835<\/b>\")},\n+                {getXML(1023,0, \"<b>\\uD835\\uD835<\/b>\")},\n+                {getXML(1023,120, \"<b>\\uD835\\uD835<\/b>\")},\n+                \/\/ invalid pair: low\/low\n+                {getXML(1024, 1024, \"<b>\\uDF00\\uDF00<\/b>\")},\n+                {getXML(1023, 1023, \"<b>\\uDF00\\uDF00<\/b>\")},\n+                {getXML(1023,0, \"<b>\\uDF00\\uDF00<\/b>\")},\n+                {getXML(1023,120, \"<b>\\uDF00\\uDF00<\/b>\")},\n+                \/\/ invalid pair in the original test string\n+                {getXML(1017,1017, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00<b>\\uD835\\uD835<\/b>\\uD835\\uDF00\")},\n+                {getXML(1017,0, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00<b>\\uD835\\uD835<\/b>\\uD835\\uDF00\")},\n+                {getXML(1017,120, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00<b>\\uD835\\uD835<\/b>\\uD835\\uDF00\")},\n+                {getXML(1017,1017, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00<b>\\uDF00\\uDF00<\/b>\\uD835\\uDF00\")},\n+                {getXML(1017,0, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00<b>\\uDF00\\uDF00<\/b>\\uD835\\uDF00\")},\n+                {getXML(1017,120, \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00<b>\\uDF00\\uDF00<\/b>\\uD835\\uDF00\")},\n+        };\n+    }\n+\n@@ -109,14 +166,2 @@\n-    @Test\n-    public final void testBug8349699() throws Exception {\n-        String xs = \"x\".repeat(1017);\n-        String expected = xs + \"\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00\\uD835\\uDF00\\uD835\\uDF00\";\n-        String xml = \"<?xml version=\\\"1.0\\\" ?><a>{1017x}\\uD835\\uDF03\\uD835\\uDF00\\uD835\\uDF00<b>\\uD835\\uDF00<\/b>\\uD835\\uDF00<\/a> \"\n-                .replace(\"{1017x}\", xs);\n-        String xsl = \"\"\"\n-                <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-                <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\">\n-                  <xsl:output encoding=\"UTF-8\" method=\"text\" \/>\n-                  <xsl:template match=\"\/\"><xsl:apply-templates select=\"node()\" \/><\/xsl:template>\n-                <\/xsl:stylesheet>\n-                \"\"\";\n-\n+    @Test(dataProvider = \"surrogatePair\")\n+    public final void testBug8349699(String xml, String expected) throws Exception {\n@@ -124,1 +169,1 @@\n-                new ByteArrayInputStream(xsl.getBytes(StandardCharsets.UTF_8)));\n+                new ByteArrayInputStream(xsl8349699.getBytes(StandardCharsets.UTF_8)));\n@@ -130,0 +175,48 @@\n+    \/*\n+     * @bug 8349699\n+     * Verifies that invalid surrogate pairs are caught.\n+     *\/\n+    @Test(dataProvider = \"invalidSurrogatePair\")\n+    public final void testBug8349699N(String xml) throws Exception {\n+        Assert.assertThrows(TransformerException.class, () -> {\n+            Transformer t = createTransformerFromInputstream(\n+                    new ByteArrayInputStream(xsl8349699.getBytes(StandardCharsets.UTF_8)));\n+            StringWriter sw = new StringWriter();\n+            t.transform(new StreamSource(new StringReader(xml)), new StreamResult(sw));\n+        });\n+    }\n+\n+    \/**\n+     * Returns an XML with the input string inserted in a text of length 'len' at\n+     * the position 'pos'.\n+     * @param len the length of the text to be placed in the XML\n+     * @param pos the position at which the input string will be inserted into the text\n+     * @param input the input string\n+     * @return an XML\n+     *\/\n+    private String getXML(int len, int pos, String input) {\n+        StringBuilder sb = new StringBuilder(\"<?xml version=\\\"1.0\\\" ?><a>\");\n+        sb.append(getString(len, pos, input));\n+        sb.append(\"<\/a>\");\n+        return sb.toString();\n+    }\n+\n+    \/**\n+     * Returns a text string with the input string inserted at the specified position.\n+     * @param len the length of the text to be returned\n+     * @param pos the position at which the input string will be inserted into the text\n+     * @param input the input string\n+     * @return a text string\n+     *\/\n+    private String getString(int len, int pos, String input) {\n+        StringBuilder sb = new StringBuilder();\n+        if (pos == 0) {\n+            sb.append(input).append(\"x\".repeat(len));\n+        } else if (pos == len) {\n+            sb.append(\"x\".repeat(len)).append(input);\n+        } else {\n+            sb.append(\"x\".repeat(pos)).append(input).append(\"x\".repeat(len - pos));\n+        }\n+        return sb.toString();\n+    }\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/JDK8207760.java","additions":109,"deletions":16,"binary":false,"changes":125,"status":"modified"}]}