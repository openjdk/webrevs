{"files":[{"patch":"@@ -5294,0 +5294,92 @@\n+        ldrb(tmp2, a2);\n+        eorw(tmp5, tmp1, tmp2);\n+        cbnzw(tmp5, DONE);\n+      }\n+    }\n+  } else if (UseNewCode) {\n+    Label NEXT_64BYTE, NEXT_16BYTE, TAIL_1BYTE, TAIL_2BYTE, TAIL_4BYTE, TAIL_8BYTE;\n+    mov(result, false);\n+    \/\/ if (a1 == null || a2 == null)\n+    \/\/     return false;\n+    cbz(a1, DONE);\n+    cbz(a2, DONE);\n+    \/\/ if (a1.length != a2.length)\n+    \/\/      return false;\n+    ldrw(cnt1, Address(a1, length_offset));\n+    ldrw(cnt2, Address(a2, length_offset));\n+    cmpw(cnt2, cnt1);\n+    br(NE, DONE);\n+    \/\/ if (a1.length == 0)\n+    \/\/      return true;\n+    cbz(cnt1, SAME);\n+    lea(a1, Address(a1, base_offset));\n+    lea(a2, Address(a2, base_offset));\n+\n+    cmpw(cnt1, elem_per_word * 8 * 1); \/\/ 1x vector width\n+    br(LT, NEXT_16BYTE);\n+\n+    \/\/ 64 byte comparison loop(vector)\n+    bind(NEXT_64BYTE);\n+    cmpw(cnt1, elem_per_word * 8);\n+    br(LT, NEXT_16BYTE);\n+    ld1(v0, v1, v2, v3, T16B, Address(post(a1, wordSize * 8)));\n+    ld1(v4, v5, v6, v7, T16B, Address(post(a2, wordSize * 8)));\n+    sub(cnt1, cnt1, 8 * elem_per_word);\n+    eor(v0, T16B, v0, v4);\n+    eor(v1, T16B, v1, v5);\n+    eor(v2, T16B, v2, v6);\n+    eor(v3, T16B, v3, v7);\n+    orr(v0, T16B, v0, v1);\n+    orr(v0, T16B, v0, v2);\n+    orr(v0, T16B, v0, v3);\n+    umov(tmp1, v0, D, 0);\n+    cbnz(tmp1, DONE);\n+    umov(tmp1, v0, D, 1);\n+    cbnz(tmp1, DONE);\n+    b(NEXT_64BYTE);\n+\n+    \/\/ 16 byte comparison loop\n+    bind(NEXT_16BYTE);\n+    cmpw(cnt1, elem_per_word * 2);\n+    br(LT, TAIL_8BYTE);\n+    ldp(tmp1, tmp2, Address(post(a1, wordSize * 2)));\n+    ldp(tmp3, tmp4, Address(post(a2, wordSize * 2)));\n+    sub(cnt1, cnt1, 2 * elem_per_word);\n+    eor(tmp1, tmp1, tmp3);\n+    cbnz(tmp1, DONE);\n+    eor(tmp2, tmp2, tmp4);\n+    cbnz(tmp2, DONE);\n+    b(NEXT_16BYTE);\n+\n+    bind(TAIL_8BYTE);\n+    tbz(cnt1, 3 - log_elem_size, TAIL_4BYTE);\n+    {\n+      ldr(tmp1, Address(post(a1, 8)));\n+      ldr(tmp2, Address(post(a2, 8)));\n+      eor(tmp5, tmp1, tmp2);\n+      cbnz(tmp5, DONE);\n+    }\n+\n+    bind(TAIL_4BYTE);\n+    tbz(cnt1, 2 - log_elem_size, TAIL_2BYTE);\n+    {\n+      ldrw(tmp1, Address(post(a1, 4)));\n+      ldrw(tmp2, Address(post(a2, 4)));\n+      eorw(tmp5, tmp1, tmp2);\n+      cbnzw(tmp5, DONE);\n+    }\n+\n+    bind(TAIL_2BYTE);\n+    tbz(cnt1, 1 - log_elem_size, TAIL_1BYTE);\n+    {\n+      ldrh(tmp3, Address(post(a1, 2)));\n+      ldrh(tmp4, Address(post(a2, 2)));\n+      eorw(tmp5, tmp3, tmp4);\n+      cbnzw(tmp5, DONE);\n+    }\n+\n+    bind(TAIL_1BYTE);\n+    if (elem_size == 1) { \/\/ Only needed when comparing byte arrays.\n+      tbz(cnt1, 0, SAME);\n+      {\n+        ldrb(tmp1, a1);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":92,"deletions":0,"binary":false,"changes":92,"status":"modified"}]}