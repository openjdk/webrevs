{"files":[{"patch":"@@ -79,1 +79,1 @@\n-  product(bool, AOTStreamableObjects, false,                                \\\n+  product(bool, AOTStreamableObjects, false, DIAGNOSTIC,                    \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+        vmArgs.add(\"-XX:+UnlockDiagnosticVMOptions\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/AOTMapTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+                              \"-XX:+UnlockDiagnosticVMOptions\",\n@@ -86,1 +87,1 @@\n-        System.out.println(\"1. Exec with \" + execGC + \", \" + coops + \", \" + coh + \", \" + stream);\n+        System.out.println(\"1. Exec with \" + execGC + \", \" + coops + \", \" + coh);\n@@ -112,1 +113,1 @@\n-        System.out.println(\"2. Exec with \" + execGC + \", \" + coops + \", \" + coh + \", \" + stream);\n+        System.out.println(\"2. Exec with \" + execGC + \", \" + coops + \", \" + coh);\n@@ -133,1 +134,1 @@\n-            System.out.println(\"3. Exec with \" + execGC + \", \" + coops + \", \" + coh + \", \" + stream + \", \" + eagerLoading);\n+            System.out.println(\"3. Exec with \" + execGC + \", \" + coops + \", \" + coh + \", \" + eagerLoading);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestZGCWithAOTHeap.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -490,1 +490,1 @@\n-     *         if -XX:-UseCompressedClassPointers is specified,\n+     *         if -XX:-UseCompressedClassPointers is specified.\n@@ -493,2 +493,1 @@\n-        return \"\" + (\"true\".equals(vmCDS()) && WB.canWriteJavaHeapArchive()\n-                     && isCDSRuntimeOptionsCompatible());\n+        return \"\" + (\"true\".equals(vmCDS()) && WB.canWriteJavaHeapArchive());\n@@ -500,1 +499,1 @@\n-     *         if -XX:-UseCompressedClassPointers is specified or G1 is not used,\n+     *         if -XX:-UseCompressedClassPointers is specified.\n@@ -503,2 +502,1 @@\n-        return \"\" + (\"true\".equals(vmCDS()) && WB.canWriteMappedJavaHeapArchive()\n-                     && isCDSRuntimeOptionsCompatible());\n+        return \"\" + (\"true\".equals(vmCDS()) && WB.canWriteMappedJavaHeapArchive());\n@@ -510,1 +508,1 @@\n-     *         if -XX:-UseCompressedClassPointers is specified,\n+     *         if -XX:-UseCompressedClassPointers is specified.\n@@ -513,2 +511,1 @@\n-        return \"\" + (\"true\".equals(vmCDS()) && WB.canWriteStreamedJavaHeapArchive()\n-                     && isCDSRuntimeOptionsCompatible());\n+        return \"\" + (\"true\".equals(vmCDS()) && WB.canWriteStreamedJavaHeapArchive());\n@@ -539,25 +536,0 @@\n-    \/**\n-     * @return true if the VM options specified via the \"test.cds.runtime.options\"\n-     * property is compatible with writing Java heap objects into the CDS archive\n-     *\/\n-    protected boolean isCDSRuntimeOptionsCompatible() {\n-        String jtropts = System.getProperty(\"test.cds.runtime.options\");\n-        if (jtropts == null) {\n-            return true;\n-        }\n-        String CCP_DISABLED = \"-XX:-UseCompressedClassPointers\";\n-        String G1GC_ENABLED = \"-XX:+UseG1GC\";\n-        String PARALLELGC_ENABLED = \"-XX:+UseParallelGC\";\n-        String SERIALGC_ENABLED = \"-XX:+UseSerialGC\";\n-        for (String opt : jtropts.split(\",\")) {\n-            if (opt.equals(CCP_DISABLED)) {\n-                return false;\n-            }\n-            if (opt.startsWith(GC_PREFIX) && opt.endsWith(GC_SUFFIX) &&\n-                !opt.equals(G1GC_ENABLED) && !opt.equals(PARALLELGC_ENABLED) && !opt.equals(SERIALGC_ENABLED)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":6,"deletions":34,"binary":false,"changes":40,"status":"modified"}]}