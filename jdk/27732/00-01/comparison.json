{"files":[{"patch":"@@ -65,1 +65,1 @@\n-bool AOTStreamedHeapLoader::_is_loaded;\n+bool AOTStreamedHeapLoader::_is_in_use;\n@@ -916,5 +916,0 @@\n-  if (!_is_loaded) {\n-    \/\/ No roots to materialize\n-    return;\n-  }\n-\n@@ -962,1 +957,1 @@\n-  _is_loaded = true;\n+  _is_in_use = true;\n@@ -1156,1 +1151,1 @@\n-  assert(_is_loaded, \"printing before initial loading?\");\n+  assert(_is_in_use, \"printing before initializing?\");\n","filename":"src\/hotspot\/share\/cds\/aotStreamedHeapLoader.cpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-  static bool _is_loaded;\n+  static bool _is_in_use;\n@@ -236,1 +236,1 @@\n-  static bool is_loaded() { return _is_loaded; }\n+  static bool is_in_use() { return _is_in_use; }\n","filename":"src\/hotspot\/share\/cds\/aotStreamedHeapLoader.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-    return AOTStreamedHeapLoader::is_loaded();\n+    return AOTStreamedHeapLoader::is_in_use();\n@@ -381,0 +381,4 @@\n+\n+    \/\/ We use FLAG_IS_CMDLINE below because we are specifically looking to warn\n+    \/\/ a user that explicitly sets the flag on the command line for a JVM that is\n+    \/\/ not dumping an archive.\n@@ -383,1 +387,2 @@\n-                    \"AOTStreamableObjects is only used for dumping\",\n+                    \"AOTStreamableObjects is only used for writing \"\n+                    \"the AOT cache.\",\n@@ -390,0 +395,4 @@\n+  \/\/ The below check uses !FLAG_IS_DEFAULT instead of FLAG_IS_CMDLINE\n+  \/\/ because the one step AOT cache creation transfers the AOTStreamableObjects\n+  \/\/ flag value from the training JVM to the assembly JVM using an environment\n+  \/\/ variable that sets the flag as ERGO in the assembly JVM.\n@@ -399,1 +408,1 @@\n-      FLAG_SET_ERGO(AOTStreamableObjects, false);\n+      FLAG_SET_ERGO(AOTStreamableObjects, true);\n@@ -475,2 +484,3 @@\n-  if (!HeapShared::is_loading_streaming_mode()) {\n-    return;\n+  if (HeapShared::is_loading_streaming_mode()) {\n+    \/\/ Finish materializing objects\n+    AOTStreamedHeapLoader::finish_materialize_objects();\n@@ -478,3 +488,0 @@\n-\n-  \/\/ Materialize roots\n-  AOTStreamedHeapLoader::finish_materialize_objects();\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        String regex = \"Average bucket size     :     ([0-9]\\\\.[0-9]+).*\";\n+        String regex = \"Average bucket size     :     ([0-9]+\\\\.[0-9]+).*\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/SharedSymbolTableBucketSize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,4 @@\n+\/\/ This test requires the vm.cds.write.mapped.java.heap specifically as it has expectations\n+\/\/ about using the mechanism for dumping the entire string table, which the streaming solution\n+\/\/ does not do.\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/InternSharedString.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,4 @@\n+\/\/ This test requires the vm.cds.write.mapped.java.heap specifically as it has expectations\n+\/\/ about using the mechanism for dumping the entire string table, which the streaming solution\n+\/\/ does not do.\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsBasic.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,4 @@\n+\/\/ This test requires the vm.cds.write.mapped.java.heap specifically as it has expectations\n+\/\/ about using the mechanism for dumping the entire string table, which the streaming solution\n+\/\/ does not do.\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsBasicPlus.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,4 @@\n+\n+\/\/ The problem with humongous strings, or humongous objects in general, does not\n+\/\/ exist with the streaming heap loader. Therefore, this test requres the mapping mode.\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsHumongous.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,5 @@\n+\n+\/\/ This test requires the vm.cds.write.mapped.java.heap specifically as it has expectations\n+\/\/ about using the mechanism for dumping the entire string table, which the streaming solution\n+\/\/ does not do.\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsStress.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,0 +35,4 @@\n+\/\/ This test requires the vm.cds.write.mapped.java.heap specifically as it has expectations\n+\/\/ about using the mechanism for dumping the entire string table, which the streaming solution\n+\/\/ does not do.\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsWbTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}