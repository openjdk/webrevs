{"files":[{"patch":"@@ -392,1 +392,1 @@\n-  assert(HeapShared::is_archived_heap_in_use(), \"must be\");\n+  assert(is_in_use(), \"must be\");\n","filename":"src\/hotspot\/share\/cds\/aotMappedHeapLoader.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-  static void finish_initialization(FileMapInfo* info) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -89,0 +88,2 @@\n+  static void finish_initialization(FileMapInfo* info) NOT_CDS_JAVA_HEAP_RETURN;\n+\n","filename":"src\/hotspot\/share\/cds\/aotMappedHeapLoader.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n@@ -340,1 +340,1 @@\n-    if (HeapShared::is_loading_mapping_mode()) {\n+    if (HeapShared::is_loading() && HeapShared::is_loading_mapping_mode()) {\n@@ -1696,1 +1696,0 @@\n-        HeapShared::initialize_loading_mode(HeapArchiveMode::_none);\n@@ -1998,3 +1997,1 @@\n-    if (HeapShared::is_loading_mode_uninitialized() || HeapShared::is_loading_mapping_mode()) {\n-      mapinfo->unmap_region(AOTMetaspace::bm);\n-    }\n+    mapinfo->unmap_region(AOTMetaspace::bm);\n@@ -2032,9 +2029,3 @@\n-  \/\/ Initialize the heap dump mode used in the archive\n-  if (HeapShared::is_loading_streaming_mode()) {\n-    \/\/ Heap initialization can be done only after vtables are initialized by ReadClosure.\n-    static_mapinfo->stream_heap_region();\n-  } else {\n-    \/\/ Finish up archived heap initialization. These must be\n-    \/\/ done after ReadClosure.\n-    AOTMappedHeapLoader::finish_initialization(static_mapinfo);\n-  }\n+  \/\/ Finish initializing the heap dump mode used in the archive\n+  \/\/ Heap initialization can be done only after vtables are initialized by ReadClosure.\n+  HeapShared::finalize_initialization(static_mapinfo);\n@@ -2042,0 +2033,1 @@\n+\n","filename":"src\/hotspot\/share\/cds\/aotMetaspace.cpp","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -917,0 +917,4 @@\n+void AOTStreamedHeapLoader::materialize_thread_object() {\n+  AOTThread::materialize_thread_object();\n+}\n+\n@@ -928,1 +932,0 @@\n-    assert(!AOTThread::aot_thread_initialized(), \"sanity\");\n@@ -1073,0 +1076,4 @@\n+void AOTStreamedHeapLoader::finish_initialization(FileMapInfo* static_mapinfo) {\n+  static_mapinfo->stream_heap_region();\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/aotStreamedHeapLoader.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -231,0 +231,1 @@\n+  static void materialize_thread_object();\n@@ -237,0 +238,1 @@\n+  static void finish_initialization(FileMapInfo* info);\n","filename":"src\/hotspot\/share\/cds\/aotStreamedHeapLoader.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"cds\/aotMappedHeapWriter.hpp\"\n@@ -31,1 +30,0 @@\n-#include \"cds\/aotStreamedHeapWriter.hpp\"\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cdsEnumKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n@@ -1506,0 +1506,2 @@\n+  assert(object_streaming_mode(), \"This should only be done for the streaming approach\");\n+\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -295,4 +295,6 @@\n-  if (HeapShared::is_loading_streaming_mode()) {\n-    return AOTStreamedHeapLoader::is_in_use();\n-  } else {\n-    return AOTMappedHeapLoader::is_in_use();\n+  if (HeapShared::is_loading()) {\n+    if (HeapShared::is_loading_streaming_mode()) {\n+      return AOTStreamedHeapLoader::is_in_use();\n+    } else {\n+      return AOTMappedHeapLoader::is_in_use();\n+    }\n@@ -300,0 +302,2 @@\n+\n+  return false;\n@@ -341,24 +345,0 @@\n-bool HeapShared::is_loading_streaming_mode() {\n-  assert(_heap_load_mode != HeapArchiveMode::_uninitialized, \"not initialized yet\");\n-  return _heap_load_mode == HeapArchiveMode::_streaming;\n-}\n-\n-bool HeapShared::is_writing_streaming_mode() {\n-  assert(_heap_write_mode != HeapArchiveMode::_uninitialized, \"not initialized yet\");\n-  return _heap_write_mode == HeapArchiveMode::_streaming;\n-}\n-\n-bool HeapShared::is_loading_mode_uninitialized() {\n-  return _heap_load_mode == HeapArchiveMode::_uninitialized;\n-}\n-\n-bool HeapShared::is_loading_mapping_mode() {\n-  assert(_heap_load_mode != HeapArchiveMode::_uninitialized, \"not initialized yet\");\n-  return _heap_load_mode == HeapArchiveMode::_mapping;\n-}\n-\n-bool HeapShared::is_writing_mapping_mode() {\n-  assert(_heap_write_mode != HeapArchiveMode::_uninitialized, \"not initialized yet\");\n-  return _heap_write_mode == HeapArchiveMode::_mapping;\n-}\n-\n@@ -367,0 +347,1 @@\n+  assert(mode != HeapArchiveMode::_uninitialized, \"sanity\");\n@@ -370,6 +351,0 @@\n-void HeapShared::initialize_loading_mode_if_not_set() {\n-  if (_heap_load_mode == HeapArchiveMode::_uninitialized) {\n-    _heap_load_mode = HeapArchiveMode::_none;\n-  }\n-}\n-\n@@ -379,0 +354,12 @@\n+  if (!CDSConfig::is_dumping_archive()) {\n+    \/\/ We use FLAG_IS_CMDLINE below because we are specifically looking to warn\n+    \/\/ a user that explicitly sets the flag on the command line for a JVM that is\n+    \/\/ not dumping an archive.\n+    if (FLAG_IS_CMDLINE(AOTStreamableObjects)) {\n+      log_warning(cds)(\"-XX:%cAOTStreamableObjects was specified, \"\n+                       \"AOTStreamableObjects is only used for writing \"\n+                       \"the AOT cache.\",\n+                       AOTStreamableObjects ? '+' : '-');\n+    }\n+  }\n+\n@@ -388,1 +375,3 @@\n-    log_warning(cds)(\"Heap archiving without streaming not supported for -XX:+UseZGC\");\n+    if (CDSConfig::is_dumping_archive()) {\n+      log_warning(cds)(\"Heap archiving without streaming not supported for -XX:+UseZGC\");\n+    }\n@@ -392,1 +381,2 @@\n-  if (!CDSConfig::is_dumping_archive()) {\n+  if (CDSConfig::is_dumping_archive()) {\n+    \/\/ Select default mode\n@@ -394,12 +384,1 @@\n-\n-    \/\/ We use FLAG_IS_CMDLINE below because we are specifically looking to warn\n-    \/\/ a user that explicitly sets the flag on the command line for a JVM that is\n-    \/\/ not dumping an archive.\n-    if (FLAG_IS_CMDLINE(AOTStreamableObjects)) {\n-      log_info(cds)(\"-XX:%cAOTStreamableObjects was specified, \"\n-                    \"AOTStreamableObjects is only used for writing \"\n-                    \"the AOT cache.\",\n-                    AOTStreamableObjects ? '+' : '-');\n-    }\n-    _heap_write_mode = HeapArchiveMode::_none;\n-    return;\n+    _heap_write_mode = AOTStreamableObjects ? HeapArchiveMode::_streaming : HeapArchiveMode::_mapping;\n@@ -407,3 +386,0 @@\n-\n-  \/\/ Select default mode\n-  _heap_write_mode = AOTStreamableObjects ? HeapArchiveMode::_streaming : HeapArchiveMode::_mapping;\n@@ -420,1 +396,1 @@\n-  if (HeapShared::is_loading_streaming_mode()) {\n+  if (AOTStreamedHeapLoader::is_in_use()) {\n@@ -425,0 +401,24 @@\n+void HeapShared::materialize_thread_object() {\n+  if (AOTStreamedHeapLoader::is_in_use()) {\n+    AOTStreamedHeapLoader::materialize_thread_object();\n+  }\n+}\n+\n+void HeapShared::add_to_dumped_interned_strings(oop string) {\n+  assert(HeapShared::is_writing_mapping_mode(), \"Only used by this mode\");\n+  AOTMappedHeapWriter::add_to_dumped_interned_strings(string);\n+}\n+\n+void HeapShared::finalize_initialization(FileMapInfo* static_mapinfo) {\n+  if (HeapShared::is_loading()) {\n+    if (HeapShared::is_loading_streaming_mode()) {\n+      \/\/ Heap initialization can be done only after vtables are initialized by ReadClosure.\n+      AOTStreamedHeapLoader::finish_initialization(static_mapinfo);\n+    } else {\n+      \/\/ Finish up archived heap initialization. These must be\n+      \/\/ done after ReadClosure.\n+      AOTMappedHeapLoader::finish_initialization(static_mapinfo);\n+    }\n+  }\n+}\n+\n@@ -469,2 +469,1 @@\n-  if (HeapShared::is_loading_streaming_mode()) {\n-    \/\/ Finish materializing objects\n+  if (AOTStreamedHeapLoader::is_in_use()) {\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":53,"deletions":54,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -142,2 +142,1 @@\n-  _streaming,\n-  _none\n+  _streaming\n@@ -273,7 +272,0 @@\n-  static bool is_loading_streaming_mode() NOT_CDS_JAVA_HEAP_RETURN_(false);\n-  static bool is_loading_mapping_mode() NOT_CDS_JAVA_HEAP_RETURN_(false);\n-  static bool is_loading_mode_uninitialized() NOT_CDS_JAVA_HEAP_RETURN_(false);\n-  static bool is_writing_streaming_mode() NOT_CDS_JAVA_HEAP_RETURN_(false);\n-  static bool is_writing_mapping_mode() NOT_CDS_JAVA_HEAP_RETURN_(false);\n-\n-  static void initialize_writing_mode() NOT_CDS_JAVA_HEAP_RETURN;\n@@ -281,1 +273,11 @@\n-  static void initialize_loading_mode_if_not_set() NOT_CDS_JAVA_HEAP_RETURN;\n+  static void initialize_writing_mode() NOT_CDS_JAVA_HEAP_RETURN;\n+\n+  inline static bool is_loading() NOT_CDS_JAVA_HEAP_RETURN_(false);\n+\n+  inline static bool is_loading_streaming_mode() NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  inline static bool is_loading_mapping_mode() NOT_CDS_JAVA_HEAP_RETURN_(false);\n+\n+  inline static bool is_writing() NOT_CDS_JAVA_HEAP_RETURN_(false);\n+\n+  inline static bool is_writing_streaming_mode() NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  inline static bool is_writing_mapping_mode() NOT_CDS_JAVA_HEAP_RETURN_(false);\n@@ -297,2 +299,5 @@\n-  static void initialize_streaming() NOT_CDS_JAVA_HEAP_RETURN;;\n-  static void enable_gc() NOT_CDS_JAVA_HEAP_RETURN;;\n+  static void initialize_streaming() NOT_CDS_JAVA_HEAP_RETURN;\n+  static void enable_gc() NOT_CDS_JAVA_HEAP_RETURN;\n+  static void materialize_thread_object() NOT_CDS_JAVA_HEAP_RETURN;\n+  static void add_to_dumped_interned_strings(oop string) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void finalize_initialization(FileMapInfo* static_mapinfo) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -538,1 +543,1 @@\n-  static oop maybe_remap_referent(bool is_java_lang_ref, size_t field_offset, oop referent);\n+  inline static oop maybe_remap_referent(bool is_java_lang_ref, size_t field_offset, oop referent);\n@@ -565,1 +570,0 @@\n-  static void finish_materialize_objects();\n@@ -575,0 +579,2 @@\n+  static void finish_materialize_objects() NOT_CDS_JAVA_HEAP_RETURN;\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -37,0 +37,28 @@\n+inline bool HeapShared::is_loading() {\n+  return _heap_load_mode != HeapArchiveMode::_uninitialized;\n+}\n+\n+inline bool HeapShared::is_loading_streaming_mode() {\n+  assert(_heap_load_mode != HeapArchiveMode::_uninitialized, \"not initialized yet\");\n+  return _heap_load_mode == HeapArchiveMode::_streaming;\n+}\n+\n+inline bool HeapShared::is_loading_mapping_mode() {\n+  assert(_heap_load_mode != HeapArchiveMode::_uninitialized, \"not initialized yet\");\n+  return _heap_load_mode == HeapArchiveMode::_mapping;\n+}\n+\n+inline bool HeapShared::is_writing() {\n+  return _heap_write_mode != HeapArchiveMode::_uninitialized;\n+}\n+\n+inline bool HeapShared::is_writing_streaming_mode() {\n+  assert(_heap_write_mode != HeapArchiveMode::_uninitialized, \"not initialized yet\");\n+  return _heap_write_mode == HeapArchiveMode::_streaming;\n+}\n+\n+inline bool HeapShared::is_writing_mapping_mode() {\n+  assert(_heap_write_mode != HeapArchiveMode::_uninitialized, \"not initialized yet\");\n+  return _heap_write_mode == HeapArchiveMode::_mapping;\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.inline.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"cds\/aotMappedHeapWriter.hpp\"\n@@ -29,1 +28,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n@@ -83,1 +82,1 @@\n-  assert(HeapShared::is_archived_heap_in_use(), \"sanity\");\n+  assert(AOTMappedHeapLoader::is_in_use(), \"sanity\");\n@@ -940,1 +939,1 @@\n-  if (!HeapShared::is_loading_mapping_mode()) {\n+  if (!AOTMappedHeapLoader::is_in_use()) {\n@@ -950,1 +949,1 @@\n-  if (!HeapShared::is_loading_mapping_mode()) {\n+  if (!AOTMappedHeapLoader::is_in_use()) {\n@@ -1062,1 +1061,0 @@\n-  assert(HeapShared::is_writing_mapping_mode(), \"should not reach here\");\n@@ -1064,0 +1062,1 @@\n+  assert(HeapShared::is_writing_mapping_mode(), \"should not reach here\");\n@@ -1073,1 +1072,1 @@\n-      \/\/ - If there are no other refernences to it, it won't be stored into the archive,\n+      \/\/ - If there are no other references to it, it won't be stored into the archive,\n@@ -1075,1 +1074,1 @@\n-      \/\/ - If there's a referece to it, we will report an error inside HeapShared.cpp and\n+      \/\/ - If there's a reference to it, we will report an error inside HeapShared.cpp and\n@@ -1077,1 +1076,1 @@\n-      AOTMappedHeapWriter::add_to_dumped_interned_strings(string);\n+      HeapShared::add_to_dumped_interned_strings(string);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n@@ -137,1 +137,2 @@\n-    if (HeapShared::is_loading_mapping_mode()) {\n+#if INCLUDE_CDS_JAVA_HEAP\n+    if (HeapShared::is_loading() && HeapShared::is_loading_mapping_mode()) {\n@@ -145,1 +146,1 @@\n-      \/\/ ArchiveHeapLoader::fixup_regions fills the empty\n+      \/\/ AOTMappedHeapLoader::fixup_regions fills the empty\n@@ -153,1 +154,0 @@\n-#if INCLUDE_CDS_JAVA_HEAP\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -25,1 +25,2 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/aotMappedHeapLoader.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n@@ -615,1 +616,1 @@\n-  if (HeapShared::is_loading_mapping_mode() &&\n+  if (AOTMappedHeapLoader::is_in_use() &&\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupTable.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -748,1 +748,0 @@\n-  HeapShared::initialize_loading_mode_if_not_set();\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n@@ -2216,3 +2216,0 @@\n-  if (!HeapShared::is_loading_mapping_mode()) {\n-    return false;\n-  }\n@@ -2232,3 +2229,0 @@\n-  if (!HeapShared::is_loading_mapping_mode()) {\n-    return false;\n-  }\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"cds\/aotThread.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"cds\/aotThread.hpp\"\n@@ -31,1 +30,1 @@\n-#include \"cds\/heapShared.hpp\"\n+#include \"cds\/heapShared.inline.hpp\"\n@@ -387,3 +386,1 @@\n-  if (HeapShared::is_loading_streaming_mode()) {\n-    AOTThread::materialize_thread_object();\n-  }\n+  HeapShared::materialize_thread_object();\n@@ -705,5 +702,2 @@\n-#if INCLUDE_CDS_JAVA_HEAP\n-  if (HeapShared::is_archived_heap_in_use()) {\n-    HeapShared::enable_gc();\n-  }\n-#endif\n+  \/\/ Prepare AOT heap loader for GC.\n+  HeapShared::enable_gc();\n@@ -902,5 +896,2 @@\n-#if INCLUDE_CDS_JAVA_HEAP\n-  if (HeapShared::is_archived_heap_in_use()) {\n-    HeapShared::finish_materialize_objects();\n-  }\n-#endif\n+  \/\/ Finish materializing AOT objects\n+  HeapShared::finish_materialize_objects();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"}]}