{"files":[{"patch":"@@ -151,1 +151,0 @@\n-  # Only G1 supports dumping both streamed and mapped heaps.\n","filename":"make\/Images.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -711,1 +711,1 @@\n-bool AOTStreamedHeapLoader::materialize_early() {\n+bool AOTStreamedHeapLoader::materialize_early(TRAPS) {\n@@ -713,2 +713,0 @@\n-  \/\/ We cannot handle any exception when materializing roots. Exits the VM.\n-  EXCEPTION_MARK\n@@ -743,1 +741,1 @@\n-void AOTStreamedHeapLoader::materialize_late() {\n+void AOTStreamedHeapLoader::materialize_late(TRAPS) {\n@@ -748,3 +746,0 @@\n-  \/\/ We cannot handle any exception when materializing roots. Exits the VM.\n-  EXCEPTION_MARK\n-\n@@ -834,1 +829,3 @@\n-  JavaThread* thread = JavaThread::current();\n+  \/\/ We cannot handle any exception when materializing roots. Exits the VM.\n+  EXCEPTION_MARK\n+\n@@ -836,1 +833,2 @@\n-  HandleMark hm(thread);\n+  HandleMark hm(THREAD);\n+\n@@ -839,1 +837,2 @@\n-  materialize_early();\n+\n+  materialize_early(CHECK);\n@@ -841,1 +840,1 @@\n-  materialize_late();\n+  materialize_late(CHECK);\n@@ -864,0 +863,3 @@\n+  \/\/ We cannot handle any exception when materializing roots. Exits the VM.\n+  EXCEPTION_MARK\n+\n@@ -910,1 +912,1 @@\n-    materialize_late();\n+    materialize_late(CHECK);\n@@ -1001,0 +1003,1 @@\n+\n@@ -1003,1 +1006,2 @@\n-    bool finished_before_gc_allowed = materialize_early();\n+\n+    bool finished_before_gc_allowed = materialize_early(CHECK);\n","filename":"src\/hotspot\/share\/cds\/aotStreamedHeapLoader.cpp","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -192,2 +192,2 @@\n-  static bool materialize_early();\n-  static void materialize_late();\n+  static bool materialize_early(TRAPS);\n+  static void materialize_late(TRAPS);\n","filename":"src\/hotspot\/share\/cds\/aotStreamedHeapLoader.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  product(bool, AOTStreamableObjects, true,                                 \\\n+  product(bool, AOTStreamableObjects, false,                                \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -379,0 +379,13 @@\n+  \/\/ The below checks use !FLAG_IS_DEFAULT instead of FLAG_IS_CMDLINE\n+  \/\/ because the one step AOT cache creation transfers the AOTStreamableObjects\n+  \/\/ flag value from the training JVM to the assembly JVM using an environment\n+  \/\/ variable that sets the flag as ERGO in the assembly JVM.\n+  if (FLAG_IS_DEFAULT(AOTStreamableObjects)) {\n+    \/\/ By default, the value of AOTStreamableObjects should match !UseCompressedOops.\n+    FLAG_SET_DEFAULT(AOTStreamableObjects, !UseCompressedOops);\n+  } else if (!AOTStreamableObjects && UseZGC) {\n+    \/\/ Never write mapped heap with ZGC\n+    log_warning(cds)(\"Heap archiving without streaming not supported for -XX:+UseZGC\");\n+    FLAG_SET_ERGO(AOTStreamableObjects, true);\n+  }\n+\n@@ -395,22 +408,0 @@\n-  \/\/ The below check uses !FLAG_IS_DEFAULT instead of FLAG_IS_CMDLINE\n-  \/\/ because the one step AOT cache creation transfers the AOTStreamableObjects\n-  \/\/ flag value from the training JVM to the assembly JVM using an environment\n-  \/\/ variable that sets the flag as ERGO in the assembly JVM.\n-  if (!FLAG_IS_DEFAULT(AOTStreamableObjects)) {\n-    \/\/ Mode explicitly selected\n-    if (AOTStreamableObjects) {\n-      _heap_write_mode = HeapArchiveMode::_streaming;\n-      return;\n-    }\n-\n-    if (!UseG1GC) {\n-      log_warning(cds)(\"Heap archiving without streaming only supported for -XX:+UseG1GC\");\n-      FLAG_SET_ERGO(AOTStreamableObjects, true);\n-      _heap_write_mode = HeapArchiveMode::_streaming;\n-      return;\n-    }\n-\n-    _heap_write_mode = HeapArchiveMode::_mapping;\n-    return;\n-  }\n-\n@@ -418,7 +409,1 @@\n-  if (UseG1GC && UseCompressedOops) {\n-    FLAG_SET_DEFAULT(AOTStreamableObjects, false);\n-    _heap_write_mode = HeapArchiveMode::_mapping;\n-  } else {\n-    assert(AOTStreamableObjects, \"Unexpected default value\");\n-    _heap_write_mode = HeapArchiveMode::_streaming;\n-  }\n+  _heap_write_mode = AOTStreamableObjects ? HeapArchiveMode::_streaming : HeapArchiveMode::_mapping;\n@@ -887,1 +872,1 @@\n-    if (HeapShared::is_writing_mapping_mode()) {\n+    if (HeapShared::is_writing_mapping_mode() && (UseG1GC || UseCompressedOops)) {\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":15,"deletions":30,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2201,1 +2201,1 @@\n-  if (HeapShared::is_loading_streaming_mode()) {\n+  if (!HeapShared::is_loading_mapping_mode()) {\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,3 +10,0 @@\n-runtime\/7167069\/PrintAsFlag.java                      0000000 generic-all\n-serviceability\/sa\/ClhsdbPrintAll.java                 0000000 generic-all\n-serviceability\/sa\/ClhsdbJstackWithConcurrentLock.java 0000000 generic-all\n@@ -14,4 +11,0 @@\n-gc\/TestPLABAdaptToMinTLABSize.java#G1                 0000000 generic-all\n-gc\/TestPLABAdaptToMinTLABSize.java#Parallel           0000000 generic-all\n-runtime\/Thread\/ThreadObjAccessAtExit.java             0000000 generic-all\n-runtime\/cds\/appcds\/LotsOfSyntheticClasses.java        0000000 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-AotJdk.txt","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -117,1 +117,0 @@\n-                              \"-XX:-AOTStreamableObjects\",\n@@ -144,4 +143,2 @@\n-        if (dumpWithSerial == false && execWithSerial == true) {\n-            \/\/ Regardless of which GC dumped the heap, there will be an object archive, either\n-            \/\/ created with mapping if dumped with G1, or streaming if dumped with serial GC.\n-            \/\/ At exec time, try to load them into a small SerialGC heap that may be too small.\n+        if (execWithSerial == true) {\n+            \/\/ At exec time, try to load archived objects into a small SerialGC heap that may be too small.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestSerialGCWithCDS.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.gc == null\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/InternSharedString.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @requires vm.gc.G1\n@@ -40,0 +41,1 @@\n+\/\/ Further more, humongous regions are a bit specific to G1, so G1 is needed.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsHumongous.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,5 +37,0 @@\n-# The test uses small heap\n-jdk\/java\/lang\/ProcessBuilder\/CloseRace.java#Default             0000000 generic-all\n-java\/lang\/ScopedValue\/UnboundValueAfterOOME.java                0000000 generic-all\n-java\/lang\/ref\/EnqueuePollRace.java                              0000000 generic-all\n-\n","filename":"test\/jdk\/ProblemList-AotJdk.txt","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}