{"files":[{"patch":"@@ -1685,7 +1685,3 @@\n-        if (r->used() == 0) {\n-          AOTMetaspace::report_loading_error(\"Cannot use CDS heap data. No objects were archived.\");\n-        } else if (static_mapinfo->object_streaming_mode()) {\n-          AOTMetaspace::report_loading_error(\"Cannot use CDS heap data.\");\n-        } else {\n-          if (!UseCompressedOops && !AOTMappedHeapLoader::can_map()) {\n-            AOTMetaspace::report_loading_error(\"Cannot use CDS heap data. Selected GC not compatible -XX:-UseCompressedOops\");\n+        if (r->used() > 0) {\n+          if (static_mapinfo->object_streaming_mode()) {\n+            AOTMetaspace::report_loading_error(\"Cannot use CDS heap data.\");\n@@ -1693,1 +1689,5 @@\n-            AOTMetaspace::report_loading_error(\"Cannot use CDS heap data. UseEpsilonGC, UseG1GC, UseSerialGC, UseParallelGC, or UseShenandoahGC are required.\");\n+            if (!UseCompressedOops && !AOTMappedHeapLoader::can_map()) {\n+              AOTMetaspace::report_loading_error(\"Cannot use CDS heap data. Selected GC not compatible -XX:-UseCompressedOops\");\n+            } else {\n+              AOTMetaspace::report_loading_error(\"Cannot use CDS heap data. UseEpsilonGC, UseG1GC, UseSerialGC, UseParallelGC, or UseShenandoahGC are required.\");\n+            }\n","filename":"src\/hotspot\/share\/cds\/aotMetaspace.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+bool AOTThread::_started;\n@@ -57,1 +58,2 @@\n-  _aot_thread = new AOTThread(&aot_thread_entry);\n+  AOTThread* thread = new AOTThread(&aot_thread_entry);\n+  _aot_thread = thread;\n@@ -64,1 +66,1 @@\n-  _aot_thread->toggle_is_disable_suspend();\n+  thread->toggle_is_disable_suspend();\n@@ -67,1 +69,2 @@\n-  JavaThread::vm_exit_on_osthread_failure(_aot_thread);\n+  JavaThread::vm_exit_on_osthread_failure(thread);\n+  _started = true;\n@@ -76,1 +79,1 @@\n-  _aot_thread->set_monitor_owner_id(tid);\n+  thread->set_monitor_owner_id(tid);\n@@ -80,1 +83,1 @@\n-    Threads::add(_aot_thread);\n+    Threads::add(thread);\n@@ -83,1 +86,1 @@\n-  JFR_ONLY(Jfr::on_java_thread_start(THREAD, _aot_thread);)\n+  JFR_ONLY(Jfr::on_java_thread_start(THREAD, thread);)\n@@ -85,1 +88,1 @@\n-  os::start_thread(_aot_thread);\n+  os::start_thread(thread);\n@@ -91,1 +94,1 @@\n-  if (_aot_thread == nullptr) {\n+  if (!_started) {\n@@ -109,0 +112,1 @@\n+  _aot_thread = nullptr; \/\/ AOT thread will get destroyed after this point\n","filename":"src\/hotspot\/share\/cds\/aotThread.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+  static bool _started;\n@@ -47,2 +48,2 @@\n-  static bool aot_thread_initialized() { return NOT_CDS(false) CDS_ONLY(_aot_thread != nullptr); };\n-  static bool is_aot_thread(JavaThread* thread) { return NOT_CDS(false) CDS_ONLY(aot_thread_initialized() && _aot_thread == thread); };\n+  static bool aot_thread_initialized() { return _started; };\n+  bool is_aot_thread() const { return true; };\n","filename":"src\/hotspot\/share\/cds\/aotThread.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1471,1 +1471,1 @@\n-  if (AOTThread::is_aot_thread(thread)) {\n+  if (thread->is_aot_thread()) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    assert(thread == current_java_thread || AOTThread::is_aot_thread(thread),\n+    assert(thread == current_java_thread || thread->is_aot_thread(),\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-    if (!AOTThread::is_aot_thread(javathread)) {                           \\\n+    if (!javathread->is_aot_thread()) {                                    \\\n@@ -763,1 +763,1 @@\n-  assert(_threadObj.peek() != nullptr || AOTThread::is_aot_thread(this), \"just checking\");\n+  assert(_threadObj.peek() != nullptr || is_aot_thread(), \"just checking\");\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -316,0 +316,1 @@\n+  virtual bool is_aot_thread() const                 { return false; }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -17,0 +17,1 @@\n+runtime\/cds\/appcds\/LotsOfSyntheticClasses.java        0000000 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-AotJdk.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+        String unlockDiagnostic = \"-XX:+UnlockDiagnosticVMOptions\";\n@@ -88,0 +89,1 @@\n+                              unlockDiagnostic,\n@@ -94,5 +96,8 @@\n-            \/\/ Only when dumping without streaming and executing with ZGC\n-            \/\/ do we expect there to be a problem.\n-            out.shouldContain(HELLO);\n-            out.shouldContain(generalErrMsg);\n-            out.shouldHaveExitValue(0);\n+            \/\/ Only when dumping without streaming and executing with ZGC do we expect there\n+            \/\/ to be a problem. With -XX:+AOTClassLinking, the problem is worse.\n+            if (out.getExitValue() == 0) {\n+                out.shouldContain(HELLO);\n+                out.shouldContain(generalErrMsg);\n+            } else {\n+                out.shouldHaveExitValue(1);\n+            }\n@@ -110,0 +115,1 @@\n+                              unlockDiagnostic,\n@@ -122,0 +128,2 @@\n+        } else {\n+            out.shouldHaveExitValue(1);\n@@ -128,0 +136,1 @@\n+                                  unlockDiagnostic,\n@@ -135,5 +144,8 @@\n-                \/\/ Only when dumping without streaming and executing with ZGC\n-                \/\/ do we expect there to be a problem.\n-                out.shouldContain(HELLO);\n-                out.shouldContain(generalErrMsg);\n-                out.shouldHaveExitValue(0);\n+                \/\/ Only when dumping without streaming and executing with ZGC do we expect there\n+                \/\/ to be a problem. With -XX:+AOTClassLinking, the problem is worse.\n+                if (out.getExitValue() == 0) {\n+                    out.shouldContain(HELLO);\n+                    out.shouldContain(generalErrMsg);\n+                } else {\n+                    out.shouldHaveExitValue(1);\n+                }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestZGCWithAOTHeap.java","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -37,0 +37,5 @@\n+# The test uses small heap\n+jdk\/java\/lang\/ProcessBuilder\/CloseRace.java#Default             0000000 generic-all\n+java\/lang\/ScopedValue\/UnboundValueAfterOOME.java                0000000 generic-all\n+java\/lang\/ref\/EnqueuePollRace.java                              0000000 generic-all\n+\n","filename":"test\/jdk\/ProblemList-AotJdk.txt","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}