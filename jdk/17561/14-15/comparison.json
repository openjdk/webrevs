{"files":[{"patch":"@@ -420,0 +420,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -879,1 +879,1 @@\n-        \/\/ of the heap.  Typically, these are the more recently engaged regions, as the objects in these regions have not\n+        \/\/ of the heap.  Typically, these are the more recently engaged regions and the objects in these regions have not\n@@ -896,1 +896,1 @@\n-        _alloc_bias_weight = 256;\n+        _alloc_bias_weight = _InitialAllocBiasWeight;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,8 @@\n+\/\/ The API and internal implementation of ShenandoahSimpleBitMap and ShenandoahRegionPartitions uses ssize_t to\n+\/\/ represent index, even though index is \"inherently\" unsigned.  There are several reasons for this choice:\n+\/\/  1. We use -1 as a sentinel value to represent empty partitions.\n+\/\/  2. Certain loops are written most naturally if the iterator, which may hold the sentinel -1 value, can be\n+\/\/     declared as signed and the terminating condition can be < 0.\n+\n+\n+\n@@ -375,1 +383,3 @@\n-  ssize_t _alloc_bias_weight;\n+  \/\/ Mutator allocations are biased from left-to-right or from right-to-left based on which end of mutator range\n+  \/\/ is most likely to hold partially used regions.  In general, we want to finish consuming partially used\n+  \/\/ regions and retire them in order to reduce the regions that must be searched for each allocation request.\n@@ -378,0 +388,7 @@\n+  \/\/ We re-evaluate the left-to-right allocation bias whenever _alloc_bias_weight is less than zero.  Each time\n+  \/\/ we allocate an object, we decrement the count of this value.  Each time we re-evaluate whether to allocate\n+  \/\/ from right-to-left or left-to-right, we reset the value of this counter to _InitialAllocBiasWeight.\n+  ssize_t _alloc_bias_weight;\n+\n+  const ssize_t _InitialAllocBiasWeight = 256;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  static const size_t MaxSelections = 256;\n+  static const size_t MaxSelections = 320;\n","filename":"src\/hotspot\/share\/logging\/logSelectionList.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}