{"files":[{"patch":"@@ -105,0 +105,24 @@\n+void ShenandoahRegionPartitions::establish_intervals(size_t mutator_leftmost, size_t mutator_rightmost,\n+                                                     size_t mutator_leftmost_empty, size_t mutator_rightmost_empty,\n+                                                     size_t mutator_region_count, size_t mutator_used) {\n+  _region_counts[Mutator] = mutator_region_count;\n+  _leftmosts[Mutator] = mutator_leftmost;\n+  _rightmosts[Mutator] = mutator_rightmost;\n+  _leftmosts_empty[Mutator] = mutator_leftmost_empty;\n+  _rightmosts_empty[Mutator] = mutator_rightmost_empty;\n+\n+  _region_counts[Mutator] = mutator_region_count;\n+  _used[Mutator] = mutator_used;\n+  _capacity[Mutator] = mutator_region_count * _region_size_bytes;\n+\n+  _leftmosts[Collector] = _max;\n+  _rightmosts[Collector] = 0;\n+  _leftmosts_empty[Collector] = _max;\n+  _rightmosts_empty[Collector] = 0;\n+\n+  _region_counts[Collector] = 0;\n+  _used[Collector] = 0;\n+  _capacity[Collector] = 0;\n+}\n+\n+\n@@ -675,3 +699,4 @@\n-\/\/ This function places all regions that have allocation capacity into the mutator_partition.  Subsequently, we will\n-\/\/ move some of the mutator regions into the collector partition with the intent of packing collector memory into the\n-\/\/  highest (rightmost) addresses of the heap, with mutator memory consuming the lowest addresses of the heap.\n+\/\/ This function places all regions that have allocation capacity into the mutator_partition, identifying regions\n+\/\/ that have no allocation capacity as NotFree.  Subsequently, we will move some of the mutator regions into the\n+\/\/ collector partition with the intent of packing collector memory into the highest (rightmost) addresses of the\n+\/\/ heap, with mutator memory consuming the lowest addresses of the heap.\n@@ -680,0 +705,12 @@\n+  \n+  size_t mutator_regions = 0;\n+  size_t mutator_used = 0;\n+\n+  size_t max_regions = _partitions.max_regions();\n+  size_t region_size_bytes = _partitions.region_size_bytes();\n+\n+  size_t mutator_leftmost = max_regions;\n+  size_t mutator_rightmost = 0;\n+  size_t mutator_leftmost_empty = max_regions;\n+  size_t mutator_rightmost_empty = 0;\n+\n@@ -688,2 +725,0 @@\n-      assert(!region->is_cset(), \"Shouldn't be adding cset regions to the free partition\");\n-      assert(_partitions.partition_id_matches(idx, NotFree), \"We are about to make region free; it should not be free already\");\n@@ -694,1 +729,19 @@\n-        _partitions.make_free(idx, Mutator, ac);\n+        _partitions.raw_set_membership(idx, Mutator);\n+\n+        if (idx < mutator_leftmost) {\n+          mutator_leftmost = idx;\n+        }\n+        if (idx > mutator_rightmost) {\n+          mutator_rightmost = idx;\n+        }\n+        if (ac == region_size_bytes) {\n+          if (idx < mutator_leftmost_empty) {\n+            mutator_leftmost_empty = idx;\n+          }\n+          if (idx > mutator_rightmost_empty) {\n+            mutator_rightmost_empty = idx;\n+          }\n+        }\n+        mutator_regions++;\n+        mutator_used += (region_size_bytes - ac);\n+\n@@ -700,2 +753,2 @@\n-        assert(_partitions.membership(idx) == NotFree,\n-               \"Region \" SIZE_FORMAT \" should not be in free partition because capacity is \" SIZE_FORMAT, idx, ac);\n+        \/\/ Region has some capacity, but it's too small to be useful.\n+        _partitions.raw_set_membership(idx, NotFree);\n@@ -704,2 +757,2 @@\n-      assert(_partitions.membership(idx) == NotFree,\n-             \"Region \" SIZE_FORMAT \" should not be in free partition because alloc is not allowed and not is trash\", idx);\n+      \/\/ Region has no capacity.\n+      _partitions.raw_set_membership(idx, NotFree);\n@@ -708,0 +761,3 @@\n+\n+  _partitions.establish_intervals(mutator_leftmost, mutator_rightmost, mutator_leftmost_empty, mutator_rightmost_empty,\n+                                  mutator_regions, mutator_used);\n@@ -758,2 +814,0 @@\n-  \/\/ Clear() resets all state information, marking every region as NotFree.\n-  clear();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":66,"deletions":12,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -90,0 +90,11 @@\n+  \/\/ Set the partition id for a particular region without adjusting interval bounds or usage\/capacity tallies\n+  inline void raw_set_membership(size_t idx, ShenandoahFreeSetPartitionId p) {\n+    _membership[idx] = p;\n+  }\n+\n+  \/\/ Set the Mutator intervals, usage, and capacity according to arguments.  Reset the Collector intervals, used, capacity\n+  \/\/ to represent empty Collector free set.\n+  void establish_intervals(size_t mutator_leftmost, size_t mutator_rightmost,\n+                           size_t mutator_leftmost_empty, size_t mutator_rightmost_empty,\n+                           size_t mutator_region_count, size_t mutator_used);\n+\n@@ -109,0 +120,4 @@\n+  inline size_t max_regions() const { return _max; }\n+\n+  inline size_t region_size_bytes() const { return _region_size_bytes; };\n+\n@@ -193,1 +208,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -893,1 +893,0 @@\n-    _heap->free_set()->clear();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}