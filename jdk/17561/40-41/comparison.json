{"files":[{"patch":"@@ -66,22 +66,25 @@\n-  assert((start_idx >= 0) && (start_idx < _num_bits), \"precondition: start_idx: \" SSIZE_FORMAT \", count: \" SSIZE_FORMAT,\n-         start_idx, count);\n-  assert(start_idx + count <= (ssize_t) _num_bits, \"precondition\");\n-  size_t array_idx = start_idx >> LogBitsPerWord;\n-  uintx bit_number = start_idx & right_n_bits(LogBitsPerWord);\n-  uintx element_bits = _bitmap[array_idx];\n-  uintx bits_to_examine  = BitsPerWord - bit_number;\n-  element_bits >>= bit_number;\n-  uintx complement = ~element_bits;\n-  uintx trailing_ones;\n-  if (complement) {\n-    trailing_ones = count_trailing_zeros<uintx>(complement);\n-  } else {\n-    trailing_ones = bits_to_examine;\n-  }\n-  if (trailing_ones >= (uintx) count) {\n-    return true;\n-  } else if (trailing_ones == bits_to_examine) {\n-     \/\/ Tail recursion\n-    return is_forward_consecutive_ones(start_idx + bits_to_examine, count - bits_to_examine);\n-  } else {\n-    return false;\n+  while (count > 0) {\n+    assert((start_idx >= 0) && (start_idx < _num_bits), \"precondition: start_idx: \" SSIZE_FORMAT \", count: \" SSIZE_FORMAT,\n+           start_idx, count);\n+    assert(start_idx + count <= (ssize_t) _num_bits, \"precondition\");\n+    size_t array_idx = start_idx >> LogBitsPerWord;\n+    uintx bit_number = start_idx & right_n_bits(LogBitsPerWord);\n+    uintx element_bits = _bitmap[array_idx];\n+    uintx bits_to_examine  = BitsPerWord - bit_number;\n+    element_bits >>= bit_number;\n+    uintx complement = ~element_bits;\n+    uintx trailing_ones;\n+    if (complement != 0) {\n+      trailing_ones = count_trailing_zeros<uintx>(complement);\n+    } else {\n+      trailing_ones = bits_to_examine;\n+    }\n+    if (trailing_ones >= (uintx) count) {\n+      return true;\n+    } else if (trailing_ones == bits_to_examine) {\n+      start_idx += bits_to_examine;\n+      count -= bits_to_examine;\n+      \/\/ Repeat search with smaller goal\n+    } else {\n+      return false;\n+    }\n@@ -89,0 +92,1 @@\n+  return true;\n@@ -92,21 +96,24 @@\n-  assert((last_idx >= 0) && (last_idx < _num_bits), \"precondition\");\n-  assert(last_idx - count >= -1, \"precondition\");\n-  size_t array_idx = last_idx >> LogBitsPerWord;\n-  uintx bit_number = last_idx & right_n_bits(LogBitsPerWord);\n-  uintx element_bits = _bitmap[array_idx];\n-  uintx bits_to_examine = bit_number + 1;\n-  element_bits <<= (BitsPerWord - bits_to_examine);\n-  uintx complement = ~element_bits;\n-  uintx leading_ones;\n-  if (complement) {\n-    leading_ones = count_leading_zeros<uintx>(complement);\n-  } else {\n-    leading_ones = bits_to_examine;\n-  }\n-  if (leading_ones >= (uintx) count) {\n-    return true;\n-  } else if (leading_ones == bits_to_examine) {\n-    \/\/ Tail recursion\n-    return is_backward_consecutive_ones(last_idx - leading_ones, count - leading_ones);\n-  } else {\n-    return false;\n+  while (count > 0) {\n+    assert((last_idx >= 0) && (last_idx < _num_bits), \"precondition\");\n+    assert(last_idx - count >= -1, \"precondition\");\n+    size_t array_idx = last_idx >> LogBitsPerWord;\n+    uintx bit_number = last_idx & right_n_bits(LogBitsPerWord);\n+    uintx element_bits = _bitmap[array_idx];\n+    uintx bits_to_examine = bit_number + 1;\n+    element_bits <<= (BitsPerWord - bits_to_examine);\n+    uintx complement = ~element_bits;\n+    uintx leading_ones;\n+    if (complement != 0) {\n+      leading_ones = count_leading_zeros<uintx>(complement);\n+    } else {\n+      leading_ones = bits_to_examine;\n+    }\n+    if (leading_ones >= (uintx) count) {\n+      return true;\n+    } else if (leading_ones == bits_to_examine) {\n+      last_idx -= leading_ones;\n+      count -= leading_ones;\n+      \/\/ Repeat search with smaller goal\n+    } else {\n+      return false;\n+    }\n@@ -114,0 +121,1 @@\n+  return true;\n@@ -132,1 +140,1 @@\n-    if (!element_bits) {\n+    if (element_bits == 0) {\n@@ -187,1 +195,1 @@\n-    if (!element_bits) {\n+    if (element_bits == 0) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.cpp","additions":53,"deletions":45,"binary":false,"changes":98,"status":"modified"}]}