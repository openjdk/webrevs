{"files":[{"patch":"@@ -347,1 +347,1 @@\n-  log_infl(gc)(\"%6s: %10s %10s %10s\", \"index\", \"Mutator Bits\", \"Collector Bits\", \"NotFree Bits\");\n+  log_info(gc)(\"%6s: %10s %10s %10s\", \"index\", \"Mutator Bits\", \"Collector Bits\", \"NotFree Bits\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,0 +63,4 @@\n+      } else {\n+        \/\/ If we've exhausted set_bits array, there should be no more set_bits\n+        BitMapAssertEqual(is_set, false);\n+        BitMapAssertEqual(set_bit_index, num_set_bits);\n@@ -66,0 +70,1 @@\n+    BitMapAssertEqual(set_bit_index, num_set_bits);\n@@ -173,1 +178,0 @@\n-\n@@ -191,1 +195,2 @@\n-          probe_point = bm.find_next_consecutive_bits(cluster_size, probe_point);\n+          ssize_t orig_probe_point = probe_point;\n+          probe_point = bm.find_next_consecutive_bits(cluster_size, orig_probe_point);\n@@ -395,0 +400,16 @@\n+    \/\/ Look for large island of contiguous surrounded by smaller islands of contiguous\n+    bm_large.set_bit(1024);\n+    bm_large.set_bit(1025);  \/\/ size-5 island from 1021 to 1025\n+    bm_large.set_bit(1027);\n+    bm_large.set_bit(1028);\n+    bm_large.set_bit(1029);\n+    bm_large.set_bit(1030);\n+    bm_large.set_bit(1031);\n+    bm_large.set_bit(1032);  \/\/ size-6 island from 1027 to 1032\n+    bm_large.set_bit(1034);\n+    bm_large.set_bit(1035);\n+    bm_large.set_bit(1036);  \/\/ size-3 island from 1034 to 1036\n+    ssize_t set_bits_6[23] = {  140,  142, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030,\n+                               1031, 1032, 1034, 1035, 1036, 1051, 1280, 1281, 1282, 1300, 1301, 1302 };\n+    verifyBitMapState(bm_large, LARGE_BITMAP_SIZE, set_bits_6, 23);\n+\n@@ -396,6 +417,6 @@\n-    ssize_t set_bits_6[11+65];\n-    set_bits_6[0] = 140;\n-    set_bits_6[1] = 142;\n-    set_bits_6[2] = 1021;\n-    set_bits_6[3] = 1022;\n-    set_bits_6[4] = 1023;\n+    ssize_t set_bits_7[76];\n+    set_bits_7[0] = 140;\n+    set_bits_7[1] = 142;\n+    set_bits_7[2] = 1021;\n+    set_bits_7[3] = 1022;\n+    set_bits_7[4] = 1023;\n@@ -405,1 +426,1 @@\n-      set_bits_6[bit_idx++] = i;\n+      set_bits_7[bit_idx++] = i;\n@@ -407,7 +428,7 @@\n-    set_bits_6[bit_idx++] = 1280;\n-    set_bits_6[bit_idx++] = 1281;\n-    set_bits_6[bit_idx++] = 1282;\n-    set_bits_6[bit_idx++] = 1300;\n-    set_bits_6[bit_idx++] = 1301;\n-    set_bits_6[bit_idx++] = 1302;\n-    verifyBitMapState(bm_large, LARGE_BITMAP_SIZE, set_bits_6, bit_idx);\n+    set_bits_7[bit_idx++] = 1280;\n+    set_bits_7[bit_idx++] = 1281;\n+    set_bits_7[bit_idx++] = 1282;\n+    set_bits_7[bit_idx++] = 1300;\n+    set_bits_7[bit_idx++] = 1301;\n+    set_bits_7[bit_idx++] = 1302;\n+    verifyBitMapState(bm_large, LARGE_BITMAP_SIZE, set_bits_7, bit_idx);\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahSimpleBitMap.cpp","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"}]}