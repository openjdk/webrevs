{"files":[{"patch":"@@ -53,6 +53,0 @@\n-#undef KELVIN_DEBUG\n-#ifdef KELVIN_DEBUG\n-  printf(\" count_leading_ones(\" SSIZE_FORMAT \"), array_idx: \" SIZE_FORMAT \", element_bits: \" SIZE_FORMAT_X\n-         \", mask: \" SIZE_FORMAT_X \", bit_number: \" SIZE_FORMAT \"\\n\",\n-         start_idx, array_idx, element_bits, mask, bit_number);\n-#endif\n@@ -61,3 +55,0 @@\n-#ifdef KELVIN_DEBUG\n-    printf(\"  count_leading_ones() recursing after counting \" SIZE_FORMAT \"\\n\", counted_ones);\n-#endif\n@@ -69,6 +60,0 @@\n-#ifdef KELVIN_DEBUG\n-    size_t result = count_trailing_zeros<uintx>(complement);\n-    printf(\"  count_leading_ones() aligned: \" SIZE_FORMAT_X \", complement: \" SIZE_FORMAT_X \" returning \" SIZE_FORMAT \"\\n\",\n-           aligned, complement, result);\n-    return result;\n-#endif\n@@ -86,5 +71,0 @@\n-#ifdef KELVIN_DEBUG\n-  printf(\" count_trailing_ones(\" SSIZE_FORMAT \"), array_idx: \" SIZE_FORMAT \", element_bits: \" SIZE_FORMAT_X\n-         \", mask: \" SIZE_FORMAT_X \", bit_number: \" SIZE_FORMAT \"\\n\",\n-         last_idx, array_idx, element_bits, mask, bit_number);\n-#endif\n@@ -93,3 +73,0 @@\n-#ifdef KELVIN_DEBUG\n-    printf(\"  count_trailing_ones() recursing after counting \" SIZE_FORMAT \"\\n\", counted_ones);\n-#endif\n@@ -101,6 +78,0 @@\n-#ifdef KELVIN_DEBUG\n-    size_t result = count_leading_zeros<uintx>(complement);\n-    printf(\"  count_trailing_ones() aligned: \" SIZE_FORMAT_X \", complement: \" SIZE_FORMAT_X \" returning \" SIZE_FORMAT \"\\n\",\n-           aligned, complement, result);\n-    return result;\n-#endif\n@@ -119,3 +90,0 @@\n-#ifdef KELVIN_DEBUG\n-  uintx orig_element_bits = element_bits;\n-#endif\n@@ -130,5 +98,0 @@\n-#ifdef KELVIN_DEBUG\n-  printf(\" is_forward_consecutive_ones(\" SSIZE_FORMAT \", \" SSIZE_FORMAT \"), orig_element_bits: \" SIZE_FORMAT_X\n-         \", element_bits: \" SIZE_FORMAT_X \", bits_to_examine: \" SIZE_FORMAT \", trailing_ones: \" SIZE_FORMAT,\n-         start_idx, count, orig_element_bits, element_bits, bits_to_examine, trailing_ones);\n-#endif\n@@ -152,3 +115,0 @@\n-#ifdef KELVIN_DEBUG\n-  uintx orig_element_bits = element_bits;\n-#endif\n@@ -163,5 +123,0 @@\n-#ifdef KELVIN_DEBUG\n-  printf(\" is_forward_consecutive_ones(\" SSIZE_FORMAT \", \" SSIZE_FORMAT \"), orig_element_bits: \" SIZE_FORMAT_X\n-         \", element_bits: \" SIZE_FORMAT_X \", bits_to_examine: \" SIZE_FORMAT \", leading_ones: \" SIZE_FORMAT,\n-         last_idx, count, orig_element_bits, element_bits, bits_to_examine, leading_ones);\n-#endif\n@@ -189,3 +144,0 @@\n-#ifdef KELVIN_DEBUG\n-  uintx orig_element_bits = element_bits;\n-#endif\n@@ -196,5 +148,0 @@\n-#ifdef KELVIN_DEBUG\n-  printf(\"find_next_consecutive_bits(\" SIZE_FORMAT \", \" SSIZE_FORMAT \", \" SSIZE_FORMAT \"), orig_bits: \" SIZE_FORMAT_X\n-         \", bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", bit_number: \" SIZE_FORMAT \"\\n\",\n-         num_bits, start_idx, boundary_idx, orig_element_bits, element_bits, array_idx, bit_number);\n-#endif\n@@ -212,5 +159,0 @@\n-#ifdef KELVIN_DEBUG\n-      printf(\" find_next_consecutive_bits() move to next element, \"\n-             \"bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", start_idx: \" SSIZE_FORMAT \", bit_number: \" SIZE_FORMAT \"\\n\",\n-             element_bits, array_idx, start_idx, bit_number);\n-#endif\n@@ -218,3 +160,0 @@\n-#ifdef KELVIN_DEBUG\n-      printf(\" find_next_consecutive_bits() found consecutive ones, returning \" SSIZE_FORMAT \"\\n\", start_idx);\n-#endif\n@@ -239,3 +178,0 @@\n-#ifdef KELVIN_DEBUG\n-      uintx orig_element_bits = element_bits;\n-#endif\n@@ -246,6 +182,0 @@\n-#ifdef KELVIN_DEBUG\n-      printf(\" find_next_consecutive_bits() shifting focus to \"\n-             \"original bits: \" SIZE_FORMAT_X \", bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", start_idx: \" SSIZE_FORMAT\n-             \", bit_number: \" SIZE_FORMAT \"\\n\",\n-             orig_element_bits, element_bits, array_idx, start_idx, bit_number);\n-#endif\n@@ -269,3 +199,0 @@\n-#ifdef KELVIN_DEBUG\n-  uintx orig_element_bits = element_bits;\n-#endif\n@@ -276,5 +203,0 @@\n-#ifdef KELVIN_DEBUG\n-  printf(\"find_prev_consecutive_bits(\" SIZE_FORMAT \", \" SSIZE_FORMAT \", \" SSIZE_FORMAT \"), orig_bits: \" SIZE_FORMAT_X\n-         \", bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", bit_number: \" SIZE_FORMAT \"\\n\",\n-         num_bits, last_idx, boundary_idx, orig_element_bits, element_bits, array_idx, bit_number);\n-#endif\n@@ -292,5 +214,0 @@\n-#ifdef KELVIN_DEBUG\n-      printf(\" find_prev_consecutive_bits() move to prev element, \"\n-             \"bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", start_idx: \" SSIZE_FORMAT \", bit_number: \" SIZE_FORMAT \"\\n\",\n-             element_bits, array_idx, last_idx, bit_number);\n-#endif\n@@ -298,3 +215,0 @@\n-#ifdef KELVIN_DEBUG\n-      printf(\" find_prev_consecutive_bits() found consecutive ones, returning \" SSIZE_FORMAT \"\\n\", last_idx);\n-#endif\n@@ -319,3 +233,0 @@\n-#ifdef KELVIN_DEBUG\n-      uintx orig_element_bits = element_bits;\n-#endif\n@@ -326,6 +237,0 @@\n-#ifdef KELVIN_DEBUG\n-      printf(\" find_prev_consecutive_bits() shifting focus to \"\n-             \"original bits: \" SIZE_FORMAT_X \", bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", last_idx: \" SSIZE_FORMAT\n-             \", bit_number: \" SIZE_FORMAT \"\\n\",\n-             orig_element_bits, element_bits, array_idx, last_idx, bit_number);\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":0,"deletions":95,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -34,4 +34,0 @@\n-#undef KELVIN_INLINE_DEBUG\n-#ifdef KELVIN_INLINE_DEBUG\n-  printf(\"find_next_set_bit(\" SSIZE_FORMAT \", \" SSIZE_FORMAT \")\\n\", start_idx, boundary_idx);\n-#endif\n@@ -42,3 +38,0 @@\n-#ifdef KELVIN_INLINE_DEBUG\n-    uintx orig_element_bits = element_bits;\n-#endif\n@@ -54,5 +47,0 @@\n-#ifdef KELVIN_INLINE_DEBUG\n-      printf(\" find_next_set_bit(), orig_bits: \" SIZE_FORMAT_X \", bits: \" SIZE_FORMAT_X \", aligned: \" SIZE_FORMAT_X\n-             \", first_set_bit: \" SIZE_FORMAT \", returning candidate: \" SSIZE_FORMAT \"\\n\",\n-             orig_element_bits, element_bits, aligned, first_set_bit, candidate_result);\n-#endif\n@@ -63,3 +51,0 @@\n-#ifdef KELVIN_INLINE_DEBUG\n-      printf(\" find_next_set_bit() is not here, trying next element, start_idx: \" SSIZE_FORMAT \"\\n\", start_idx);\n-#endif\n@@ -68,3 +53,0 @@\n-#ifdef KELVIN_INLINE_DEBUG\n-  printf(\" find_next_set_bit() returning failure: \" SSIZE_FORMAT \"\\n\", boundary_idx);\n-#endif\n@@ -82,3 +64,0 @@\n-#ifdef KELVIN_INLINE_DEBUG\n-  printf(\"find_prev_set_bit(\" SSIZE_FORMAT \", \" SSIZE_FORMAT \")\\n\", last_idx, boundary_idx);\n-#endif\n@@ -89,3 +68,0 @@\n-#ifdef KELVIN_INLINE_DEBUG\n-    uintx orig_element_bits = element_bits;\n-#endif\n@@ -101,5 +77,0 @@\n-#ifdef KELVIN_INLINE_DEBUG\n-      printf(\" find_prev_set_bit(), orig_bits: \" SIZE_FORMAT_X \", bits: \" SIZE_FORMAT_X \", aligned: \" SIZE_FORMAT_X\n-             \", first_set_bit: \" SIZE_FORMAT \", returning candidate: \" SSIZE_FORMAT \"\\n\",\n-             orig_element_bits, element_bits, aligned, first_set_bit, candidate_result);\n-#endif\n@@ -110,3 +81,0 @@\n-#ifdef KELVIN_INLINE_DEBUG\n-      printf(\" find_next_set_bit() is not here, trying prev element, las_idx: \" SSIZE_FORMAT \"\\n\", last_idx);\n-#endif\n@@ -115,3 +83,0 @@\n-#ifdef KELVIN_INLINE_DEBUG\n-  printf(\" find_prev_set_bit() returning failure: \" SSIZE_FORMAT \"\\n\", boundary_idx);\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.inline.hpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"}]}