{"files":[{"patch":"@@ -130,2 +130,2 @@\n-inline idx_t ShenandoahRegionPartitions:: leftmost(ShenandoahFreeSetPartitionId which_partition) const {\n-  assert (int(which_partition) < NumPartitions, \"selected free partition must be valid\");\n+inline idx_t ShenandoahRegionPartitions::leftmost(ShenandoahFreeSetPartitionId which_partition) const {\n+  assert (which_partition < NumPartitions, \"selected free partition must be valid\");\n@@ -142,1 +142,1 @@\n-  assert (int(which_partition) < NumPartitions, \"selected free partition must be valid\");\n+  assert (which_partition < NumPartitions, \"selected free partition must be valid\");\n@@ -149,1 +149,1 @@\n-  for (size_t partition_id = 0; partition_id < NumPartitions; partition_id++) {\n+  for (size_t partition_id = 0; partition_id < IntNumPartitions; partition_id++) {\n@@ -185,1 +185,1 @@\n-  assert (int(which_partition) < NumPartitions, \"Partition must be valid\");\n+  assert (which_partition < NumPartitions, \"Partition must be valid\");\n@@ -285,1 +285,1 @@\n-  assert (int(partition) < NumPartitions, \"Cannot remove from free partitions if not already free\");\n+  assert (partition < NumPartitions, \"Cannot remove from free partitions if not already free\");\n@@ -299,1 +299,1 @@\n-  assert (int(partition) < NumPartitions, \"Cannot remove from free partitions if not already free\");\n+  assert (partition < NumPartitions, \"Cannot remove from free partitions if not already free\");\n@@ -314,1 +314,1 @@\n-  assert (int(which_partition) < NumPartitions, \"selected free partition must be valid\");\n+  assert (which_partition < NumPartitions, \"selected free partition must be valid\");\n@@ -328,2 +328,2 @@\n-  assert (int(orig_partition) < NumPartitions, \"Original partition must be valid\");\n-  assert (int(new_partition) < NumPartitions, \"New partition must be valid\");\n+  assert (orig_partition < NumPartitions, \"Original partition must be valid\");\n+  assert (new_partition < NumPartitions, \"New partition must be valid\");\n@@ -365,1 +365,1 @@\n-  for (uint partition_id = 0; partition_id < NumPartitions; partition_id++) {\n+  for (uint partition_id = 0; partition_id < UIntNumPartitions; partition_id++) {\n@@ -379,1 +379,1 @@\n-  for (uint partition_id = 0; partition_id < NumPartitions; partition_id++) {\n+  for (uint partition_id = 0; partition_id < UIntNumPartitions; partition_id++) {\n@@ -397,1 +397,1 @@\n-  assert (int(which_partition) < NumPartitions, \"selected free partition must be valid\");\n+  assert (which_partition < NumPartitions, \"selected free partition must be valid\");\n@@ -445,1 +445,1 @@\n-  assert (int(which_partition) < NumPartitions, \"selected free partition must be valid\");\n+  assert (which_partition < NumPartitions, \"selected free partition must be valid\");\n@@ -465,1 +465,1 @@\n-  assert (int(which_partition) < NumPartitions, \"selected free partition must be valid\");\n+  assert (which_partition < NumPartitions, \"selected free partition must be valid\");\n@@ -487,4 +487,4 @@\n-  idx_t leftmosts[NumPartitions];\n-  idx_t rightmosts[NumPartitions];\n-  idx_t empty_leftmosts[NumPartitions];\n-  idx_t empty_rightmosts[NumPartitions];\n+  idx_t leftmosts[UIntNumPartitions];\n+  idx_t rightmosts[UIntNumPartitions];\n+  idx_t empty_leftmosts[UIntNumPartitions];\n+  idx_t empty_rightmosts[UIntNumPartitions];\n@@ -492,1 +492,1 @@\n-  for (int i = 0; i < NumPartitions; i++) {\n+  for (uint i = 0; i < UIntNumPartitions; i++) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -42,1 +42,3 @@\n-#define NumPartitions int(ShenandoahFreeSetPartitionId::NotFree)\n+#define NumPartitions           (ShenandoahFreeSetPartitionId::NotFree)\n+#define IntNumPartitions     int(ShenandoahFreeSetPartitionId::NotFree)\n+#define UIntNumPartitions   uint(ShenandoahFreeSetPartitionId::NotFree)\n@@ -55,1 +57,1 @@\n-  ShenandoahSimpleBitMap _membership[NumPartitions];\n+  ShenandoahSimpleBitMap _membership[UIntNumPartitions];\n@@ -61,2 +63,2 @@\n-  ssize_t _leftmosts[NumPartitions];\n-  ssize_t _rightmosts[NumPartitions];\n+  ssize_t _leftmosts[UIntNumPartitions];\n+  ssize_t _rightmosts[UIntNumPartitions];\n@@ -68,2 +70,2 @@\n-  ssize_t _leftmosts_empty[NumPartitions];\n-  ssize_t _rightmosts_empty[NumPartitions];\n+  ssize_t _leftmosts_empty[UIntNumPartitions];\n+  ssize_t _rightmosts_empty[UIntNumPartitions];\n@@ -77,3 +79,3 @@\n-  size_t _capacity[NumPartitions];\n-  size_t _used[NumPartitions];\n-  size_t _region_counts[NumPartitions];\n+  size_t _capacity[UIntNumPartitions];\n+  size_t _used[UIntNumPartitions];\n+  size_t _region_counts[UIntNumPartitions];\n@@ -177,1 +179,1 @@\n-    assert (int(which_partition) < NumPartitions, \"selected free set must be valid\");\n+    assert (which_partition < NumPartitions, \"selected free set must be valid\");\n@@ -182,1 +184,1 @@\n-    assert (int(which_partition) < NumPartitions, \"selected free set must be valid\");\n+    assert (which_partition < NumPartitions, \"selected free set must be valid\");\n@@ -187,1 +189,1 @@\n-    assert (int(which_partition) < NumPartitions, \"selected free set must be valid\");\n+    assert (which_partition < NumPartitions, \"selected free set must be valid\");\n@@ -192,1 +194,1 @@\n-    assert (int(which_partition) < NumPartitions, \"selected free set must be valid\");\n+    assert (which_partition < NumPartitions, \"selected free set must be valid\");\n@@ -197,1 +199,1 @@\n-    assert (int(which_partition) < NumPartitions, \"selected free set must be valid\");\n+    assert (which_partition < NumPartitions, \"selected free set must be valid\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"}]}