{"files":[{"patch":"@@ -51,1 +51,0 @@\n-  uintx the_bit = nth_bit(bit_number);\n@@ -54,1 +53,6 @@\n-\n+#undef KELVIN_DEBUG\n+#ifdef KELVIN_DEBUG\n+  printf(\" count_leading_ones(\" SSIZE_FORMAT \"), array_idx: \" SIZE_FORMAT \", element_bits: \" SIZE_FORMAT_X\n+         \", mask: \" SIZE_FORMAT_X \", bit_number: \" SIZE_FORMAT \"\\n\",\n+         start_idx, array_idx, element_bits, mask, bit_number);\n+#endif\n@@ -57,0 +61,3 @@\n+#ifdef KELVIN_DEBUG\n+    printf(\"  count_leading_ones() recursing after counting \" SIZE_FORMAT \"\\n\", counted_ones);\n+#endif\n@@ -62,1 +69,7 @@\n-    return count_leading_zeros<uintx>(complement);\n+#ifdef KELVIN_DEBUG\n+    size_t result = count_trailing_zeros<uintx>(complement);\n+    printf(\"  count_leading_ones() aligned: \" SIZE_FORMAT_X \", complement: \" SIZE_FORMAT_X \" returning \" SIZE_FORMAT \"\\n\",\n+           aligned, complement, result);\n+    return result;\n+#endif\n+    return count_trailing_zeros<uintx>(complement);\n@@ -71,2 +84,0 @@\n-  uintx the_bit = nth_bit(bit_number);\n-\n@@ -75,0 +86,5 @@\n+#ifdef KELVIN_DEBUG\n+  printf(\" count_trailing_ones(\" SSIZE_FORMAT \"), array_idx: \" SIZE_FORMAT \", element_bits: \" SIZE_FORMAT_X\n+         \", mask: \" SIZE_FORMAT_X \", bit_number: \" SIZE_FORMAT \"\\n\",\n+         last_idx, array_idx, element_bits, mask, bit_number);\n+#endif\n@@ -77,0 +93,3 @@\n+#ifdef KELVIN_DEBUG\n+    printf(\"  count_trailing_ones() recursing after counting \" SIZE_FORMAT \"\\n\", counted_ones);\n+#endif\n@@ -82,0 +101,6 @@\n+#ifdef KELVIN_DEBUG\n+    size_t result = count_leading_zeros<uintx>(complement);\n+    printf(\"  count_trailing_ones() aligned: \" SIZE_FORMAT_X \", complement: \" SIZE_FORMAT_X \" returning \" SIZE_FORMAT \"\\n\",\n+           aligned, complement, result);\n+    return result;\n+#endif\n@@ -94,0 +119,3 @@\n+#ifdef KELVIN_DEBUG\n+  uintx orig_element_bits = element_bits;\n+#endif\n@@ -102,0 +130,5 @@\n+#ifdef KELVIN_DEBUG\n+  printf(\" is_forward_consecutive_ones(\" SSIZE_FORMAT \", \" SSIZE_FORMAT \"), orig_element_bits: \" SIZE_FORMAT_X\n+         \", element_bits: \" SIZE_FORMAT_X \", bits_to_examine: \" SIZE_FORMAT \", trailing_ones: \" SIZE_FORMAT,\n+         start_idx, count, orig_element_bits, element_bits, bits_to_examine, trailing_ones);\n+#endif\n@@ -105,1 +138,1 @@\n-    \/\/ Tail recursion\n+     \/\/ Tail recursion\n@@ -119,0 +152,3 @@\n+#ifdef KELVIN_DEBUG\n+  uintx orig_element_bits = element_bits;\n+#endif\n@@ -127,0 +163,5 @@\n+#ifdef KELVIN_DEBUG\n+  printf(\" is_forward_consecutive_ones(\" SSIZE_FORMAT \", \" SSIZE_FORMAT \"), orig_element_bits: \" SIZE_FORMAT_X\n+         \", element_bits: \" SIZE_FORMAT_X \", bits_to_examine: \" SIZE_FORMAT \", leading_ones: \" SIZE_FORMAT,\n+         last_idx, count, orig_element_bits, element_bits, bits_to_examine, leading_ones);\n+#endif\n@@ -148,0 +189,3 @@\n+#ifdef KELVIN_DEBUG\n+  uintx orig_element_bits = element_bits;\n+#endif\n@@ -152,1 +196,5 @@\n-\n+#ifdef KELVIN_DEBUG\n+  printf(\"find_next_consecutive_bits(\" SIZE_FORMAT \", \" SSIZE_FORMAT \", \" SSIZE_FORMAT \"), orig_bits: \" SIZE_FORMAT_X\n+         \", bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", bit_number: \" SIZE_FORMAT \"\\n\",\n+         num_bits, start_idx, boundary_idx, orig_element_bits, element_bits, array_idx, bit_number);\n+#endif\n@@ -164,0 +212,5 @@\n+#ifdef KELVIN_DEBUG\n+      printf(\" find_next_consecutive_bits() move to next element, \"\n+             \"bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", start_idx: \" SSIZE_FORMAT \", bit_number: \" SIZE_FORMAT \"\\n\",\n+             element_bits, array_idx, start_idx, bit_number);\n+#endif\n@@ -165,0 +218,3 @@\n+#ifdef KELVIN_DEBUG\n+      printf(\" find_next_consecutive_bits() found consecutive ones, returning \" SSIZE_FORMAT \"\\n\", start_idx);\n+#endif\n@@ -183,0 +239,3 @@\n+#ifdef KELVIN_DEBUG\n+      uintx orig_element_bits = element_bits;\n+#endif\n@@ -187,0 +246,6 @@\n+#ifdef KELVIN_DEBUG\n+      printf(\" find_next_consecutive_bits() shifting focus to \"\n+             \"original bits: \" SIZE_FORMAT_X \", bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", start_idx: \" SSIZE_FORMAT\n+             \", bit_number: \" SIZE_FORMAT \"\\n\",\n+             orig_element_bits, element_bits, array_idx, start_idx, bit_number);\n+#endif\n@@ -204,0 +269,3 @@\n+#ifdef KELVIN_DEBUG\n+  uintx orig_element_bits = element_bits;\n+#endif\n@@ -208,0 +276,5 @@\n+#ifdef KELVIN_DEBUG\n+  printf(\"find_prev_consecutive_bits(\" SIZE_FORMAT \", \" SSIZE_FORMAT \", \" SSIZE_FORMAT \"), orig_bits: \" SIZE_FORMAT_X\n+         \", bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", bit_number: \" SIZE_FORMAT \"\\n\",\n+         num_bits, last_idx, boundary_idx, orig_element_bits, element_bits, array_idx, bit_number);\n+#endif\n@@ -219,0 +292,5 @@\n+#ifdef KELVIN_DEBUG\n+      printf(\" find_prev_consecutive_bits() move to prev element, \"\n+             \"bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", start_idx: \" SSIZE_FORMAT \", bit_number: \" SIZE_FORMAT \"\\n\",\n+             element_bits, array_idx, last_idx, bit_number);\n+#endif\n@@ -220,0 +298,3 @@\n+#ifdef KELVIN_DEBUG\n+      printf(\" find_prev_consecutive_bits() found consecutive ones, returning \" SSIZE_FORMAT \"\\n\", last_idx);\n+#endif\n@@ -238,0 +319,3 @@\n+#ifdef KELVIN_DEBUG\n+      uintx orig_element_bits = element_bits;\n+#endif\n@@ -242,0 +326,6 @@\n+#ifdef KELVIN_DEBUG\n+      printf(\" find_prev_consecutive_bits() shifting focus to \"\n+             \"original bits: \" SIZE_FORMAT_X \", bits: \" SIZE_FORMAT_X \", array_idx: \" SIZE_FORMAT \", last_idx: \" SSIZE_FORMAT\n+             \", bit_number: \" SIZE_FORMAT \"\\n\",\n+             orig_element_bits, element_bits, array_idx, last_idx, bit_number);\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":97,"deletions":7,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -34,0 +34,4 @@\n+#undef KELVIN_INLINE_DEBUG\n+#ifdef KELVIN_INLINE_DEBUG\n+  printf(\"find_next_set_bit(\" SSIZE_FORMAT \", \" SSIZE_FORMAT \")\\n\", start_idx, boundary_idx);\n+#endif\n@@ -38,0 +42,3 @@\n+#ifdef KELVIN_INLINE_DEBUG\n+    uintx orig_element_bits = element_bits;\n+#endif\n@@ -47,0 +54,5 @@\n+#ifdef KELVIN_INLINE_DEBUG\n+      printf(\" find_next_set_bit(), orig_bits: \" SIZE_FORMAT_X \", bits: \" SIZE_FORMAT_X \", aligned: \" SIZE_FORMAT_X\n+             \", first_set_bit: \" SIZE_FORMAT \", returning candidate: \" SSIZE_FORMAT \"\\n\",\n+             orig_element_bits, element_bits, aligned, first_set_bit, candidate_result);\n+#endif\n@@ -51,0 +63,3 @@\n+#ifdef KELVIN_INLINE_DEBUG\n+      printf(\" find_next_set_bit() is not here, trying next element, start_idx: \" SSIZE_FORMAT \"\\n\", start_idx);\n+#endif\n@@ -53,0 +68,3 @@\n+#ifdef KELVIN_INLINE_DEBUG\n+  printf(\" find_next_set_bit() returning failure: \" SSIZE_FORMAT \"\\n\", boundary_idx);\n+#endif\n@@ -64,0 +82,3 @@\n+#ifdef KELVIN_INLINE_DEBUG\n+  printf(\"find_prev_set_bit(\" SSIZE_FORMAT \", \" SSIZE_FORMAT \")\\n\", last_idx, boundary_idx);\n+#endif\n@@ -68,0 +89,3 @@\n+#ifdef KELVIN_INLINE_DEBUG\n+    uintx orig_element_bits = element_bits;\n+#endif\n@@ -77,0 +101,5 @@\n+#ifdef KELVIN_INLINE_DEBUG\n+      printf(\" find_prev_set_bit(), orig_bits: \" SIZE_FORMAT_X \", bits: \" SIZE_FORMAT_X \", aligned: \" SIZE_FORMAT_X\n+             \", first_set_bit: \" SIZE_FORMAT \", returning candidate: \" SSIZE_FORMAT \"\\n\",\n+             orig_element_bits, element_bits, aligned, first_set_bit, candidate_result);\n+#endif\n@@ -81,0 +110,3 @@\n+#ifdef KELVIN_INLINE_DEBUG\n+      printf(\" find_next_set_bit() is not here, trying prev element, las_idx: \" SSIZE_FORMAT \"\\n\", last_idx);\n+#endif\n@@ -83,0 +115,3 @@\n+#ifdef KELVIN_INLINE_DEBUG\n+  printf(\" find_prev_set_bit() returning failure: \" SSIZE_FORMAT \"\\n\", boundary_idx);\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.inline.hpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -395,0 +395,20 @@\n+    \/\/ Test that entire bitmap word (from 1024 to 1088) is 1's\n+    ssize_t set_bits_6[11+65];\n+    set_bits_6[0] = 140;\n+    set_bits_6[1] = 142;\n+    set_bits_6[2] = 1021;\n+    set_bits_6[3] = 1022;\n+    set_bits_6[4] = 1023;\n+    size_t bit_idx = 5;\n+    for (ssize_t i = 1024; i <= 1088; i++) {\n+      bm_large.set_bit(i);\n+      set_bits_6[bit_idx++] = i;\n+    }\n+    set_bits_6[bit_idx++] = 1280;\n+    set_bits_6[bit_idx++] = 1281;\n+    set_bits_6[bit_idx++] = 1282;\n+    set_bits_6[bit_idx++] = 1300;\n+    set_bits_6[bit_idx++] = 1301;\n+    set_bits_6[bit_idx++] = 1302;\n+    verifyBitMapState(bm_large, LARGE_BITMAP_SIZE, set_bits_6, bit_idx);\n+\n","filename":"test\/hotspot\/gtest\/gc\/shenandoah\/test_shenandoahSimpleBitMap.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}