{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.io.UncheckedIOException;\n@@ -59,1 +60,0 @@\n-import jdk.tools.jlink.internal.runtimelink.RuntimeImageLinkException;\n@@ -94,1 +94,0 @@\n-    private final TaskHelper helper;\n@@ -97,2 +96,1 @@\n-                             boolean generateRuntimeImage,\n-                             TaskHelper taskHelper) {\n+                             boolean generateRuntimeImage) {\n@@ -101,1 +99,0 @@\n-        this.helper = taskHelper;\n@@ -121,2 +118,1 @@\n-            boolean generateRuntimeImage,\n-            TaskHelper taskHelper)\n+            boolean generateRuntimeImage)\n@@ -126,2 +122,1 @@\n-                                                      generateRuntimeImage,\n-                                                      taskHelper);\n+                                                      generateRuntimeImage);\n@@ -132,7 +127,5 @@\n-        } catch (RuntimeImageLinkException e) {\n-            \/\/ readAllEntries() might throw this exception.\n-            \/\/ Propagate as IOException with appropriate message for\n-            \/\/ jlink runs from the run-time image. This handles better\n-            \/\/ error messages for the case of modified files in the run-time\n-            \/\/ image.\n-            throw image.newIOException(e);\n+        } catch (UncheckedIOException e) {\n+            \/\/ When linking from the run-time image, readAllEntries() might\n+            \/\/ throw this exception for a modified runtime. Unpack and\n+            \/\/ re-throw as IOException.\n+            throw e.getCause();\n@@ -203,5 +196,0 @@\n-        } catch (RuntimeImageLinkException e) {\n-            \/\/ Propagate as IOException with appropriate message for\n-            \/\/ jlink runs from the run-time image. This handles better\n-            \/\/ error messages for the case of --patch-module.\n-            throw newIOException(e);\n@@ -221,12 +209,0 @@\n-    private IOException newIOException(RuntimeImageLinkException e) throws IOException {\n-        if (JlinkTask.DEBUG) {\n-            e.printStackTrace();\n-        }\n-        String message = switch (e.getReason()) {\n-            case PATCH_MODULE -> helper.getMessage(\"err.runtime.link.patched.module\", e.getFile());\n-            case MODIFIED_FILE -> helper.getMessage(\"err.runtime.link.modified.file\", e.getFile());\n-            default -> throw new AssertionError(\"Unexpected value: \" + e.getReason());\n-        };\n-        throw new IOException(message);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageFileCreator.java","additions":9,"deletions":33,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import static jdk.tools.jlink.internal.runtimelink.RuntimeImageLinkException.Reason.MODIFIED_FILE;\n-import static jdk.tools.jlink.internal.runtimelink.RuntimeImageLinkException.Reason.PATCH_MODULE;\n@@ -40,1 +38,0 @@\n-import java.nio.file.NoSuchFileException;\n@@ -59,1 +56,0 @@\n-import jdk.tools.jlink.internal.runtimelink.RuntimeImageLinkException;\n@@ -226,1 +222,3 @@\n-                                throw new RuntimeImageLinkException(path.toString(), MODIFIED_FILE);\n+                                String msg = taskHelper.getMessage(\"err.runtime.link.modified.file\", path.toString());\n+                                IOException cause = new IOException(msg);\n+                                throw new UncheckedIOException(cause);\n@@ -463,10 +461,1 @@\n-                            try {\n-                                return Files.size(archive.getPath().resolve(resPath));\n-                            } catch (NoSuchFileException file) {\n-                                \/\/ This indicates that we don't find the class in the\n-                                \/\/ modules image using the JRT FS provider. Yet, we find\n-                                \/\/ the class using the system module finder. Therefore,\n-                                \/\/ we have a patched module. Mention that module patching\n-                                \/\/ is not supported.\n-                                throw new RuntimeImageLinkException(file.getFile(), PATCH_MODULE);\n-                            }\n+                            return Files.size(archive.getPath().resolve(resPath));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JRTArchive.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+import jdk.internal.module.ModuleBootstrap;\n@@ -76,1 +77,0 @@\n-import jdk.tools.jlink.internal.runtimelink.RuntimeImageLinkException;\n@@ -312,1 +312,1 @@\n-        } catch (IllegalArgumentException | ResolutionException | RuntimeImageLinkException e) {\n+        } catch (IllegalArgumentException | ResolutionException e) {\n@@ -623,0 +623,6 @@\n+            \/\/ Do not permit linking from run-time image when the current image\n+            \/\/ is being patched.\n+            if (ModuleBootstrap.patcher().hasPatches()) {\n+                String msg = taskHelper.getMessage(\"err.runtime.link.patched.module\");\n+                throw new IllegalArgumentException(msg);\n+            }\n@@ -1042,1 +1048,1 @@\n-                    targetPlatform.arch().byteOrder(), stack, generateRuntimeImage, taskHelper);\n+                    targetPlatform.arch().byteOrder(), stack, generateRuntimeImage);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Red Hat, Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.tools.jlink.internal.runtimelink;\n-\n-import java.util.Objects;\n-\n-\/**\n- * Exception thrown when linking from the run-time image\n- *\/\n-public class RuntimeImageLinkException extends RuntimeException {\n-\n-    private static final long serialVersionUID = -1848914673073119403L;\n-\n-    public static enum Reason {\n-        PATCH_MODULE,  \/* link exception due to patched module *\/\n-        MODIFIED_FILE, \/* link exception due to modified file  *\/\n-    }\n-\n-    private final String file;\n-    private final Reason reason;\n-\n-    public RuntimeImageLinkException(String file, Reason reason) {\n-        this.file = Objects.requireNonNull(file);\n-        this.reason = Objects.requireNonNull(reason);\n-    }\n-\n-    public String getFile() {\n-        return file;\n-    }\n-\n-    public Reason getReason() {\n-        return reason;\n-    }\n-\n-    @Override\n-    public String getMessage() {\n-        return reason + \", file: \" + file;\n-    }\n-}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/runtimelink\/RuntimeImageLinkException.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -128,2 +128,2 @@\n-err.runtime.link.patched.module=File {0} not found in the modules image.\\\n-\\ --patch-module is not supported when linking from the run-time image\n+err.runtime.link.patched.module=jlink does not support linking from the run-time image\\\n+\\ when running on a patched runtime with --patch-module\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-        ImageFileCreator.create(archives, ByteOrder.nativeOrder(), stack, false, null);\n+        ImageFileCreator.create(archives, ByteOrder.nativeOrder(), stack, false);\n","filename":"test\/jdk\/tools\/jlink\/ImageFileCreatorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        analyzer.stdoutShouldNotContain(\"jdk.tools.jlink.internal.RunImageLinkException\");\n+        analyzer.stdoutShouldNotContain(\"IOException\");\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/ModifiedFilesExitTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-        out.stdoutShouldNotContain(\"jdk.tools.jlink.internal.RunImageLinkException\");\n+        out.stdoutShouldNotContain(\"IOException\");\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/ModifiedFilesWarningTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,2 +100,2 @@\n-        analyzer.stdoutShouldContain(\"MyJlinkPatchInteger.class not found in the modules image.\");\n-        analyzer.stdoutShouldContain(\"--patch-module is not supported\");\n+        analyzer.stdoutShouldContain(\"jlink does not support linking from the run-time image\");\n+        analyzer.stdoutShouldContain(\" when running on a patched runtime with --patch-module\");\n@@ -103,1 +103,1 @@\n-        analyzer.stdoutShouldNotContain(\"jdk.tools.jlink.internal.RunImageLinkException\");\n+        analyzer.stdoutShouldNotContain(\"IOException\");\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/PatchedJDKModuleJlinkTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}