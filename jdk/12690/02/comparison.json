{"files":[{"patch":"@@ -319,4 +319,6 @@\n-                \/\/ restore old state\n-                ZONES.put(zoneId, old);\n-                provider.provideZoneIds().stream()\n-                    .forEach(id -> ZONES.remove(id, provider));\n+                if(!old.equals(provider)) {\n+                    \/\/ restore old state\n+                    ZONES.put(zoneId, old);\n+                    provider.provideZoneIds().stream()\n+                        .forEach(id -> ZONES.remove(id, provider));\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/time\/zone\/ZoneRulesProvider.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import static org.testng.Assert.assertNotNull;\n@@ -38,0 +39,1 @@\n+import static org.testng.Assert.fail;\n@@ -41,1 +43,1 @@\n- * @bug 8299571\n+ * @bug 8299571 8302983\n@@ -45,2 +47,0 @@\n-    private static final Set<String> MY_ZONE_IDS =\n-        new LinkedHashSet(Arrays.asList(new String[] {\"MyID_1\", \"MyID_2\", \"CET\", \"MyID_3\"}));\n@@ -51,0 +51,1 @@\n+     * @bug 8299571\n@@ -54,0 +55,1 @@\n+        Set<String> myZoneIds = new LinkedHashSet<>(Arrays.asList(new String[] {\"MyID_1\", \"MyID_2\", \"CET\", \"MyID_3\"}));\n@@ -55,16 +57,1 @@\n-            ZoneRulesProvider.registerProvider(new ZoneRulesProvider() {\n-                @Override\n-                protected Set<String> provideZoneIds() {\n-                    return MY_ZONE_IDS;\n-                }\n-\n-                @Override\n-                protected ZoneRules provideRules(String zoneId, boolean forCaching) {\n-                    return null;\n-                }\n-\n-                @Override\n-                protected NavigableMap<String, ZoneRules> provideVersions(String zoneId) {\n-                    return null;\n-                }\n-            });\n+            ZoneRulesProvider.registerProvider(new IdsOnlyZoneRulesProvider(myZoneIds));\n@@ -76,1 +63,1 @@\n-        MY_ZONE_IDS.stream().forEach(id -> {\n+        myZoneIds.stream().forEach(id -> {\n@@ -94,0 +81,58 @@\n+\n+    \/**\n+     * Tests whether registering a provider twice will still leave it registered.\n+     * @bug 8302983\n+     *\/\n+    @Test\n+    public void test_registerTwice() {\n+        String zone = \"MyID\";\n+        var provider = new IdsOnlyZoneRulesProvider(Set.of(zone));\n+        assertFalse(ZoneId.getAvailableZoneIds().contains(zone), \"Unexpected availability for \" + zone);\n+        ZoneRulesProvider.registerProvider(provider);\n+        assertTrue(ZoneId.getAvailableZoneIds().contains(zone), \"Unexpected non-availability for \" + zone);\n+        try {\n+            ZoneId.of(zone);\n+        } catch (ZoneRulesException e) {\n+            fail(\"ZoneId instance for \" + zone + \" should be obtainable\");\n+        }\n+\n+        try {\n+            ZoneRulesProvider.registerProvider(provider);\n+            fail(\"Registering an already registered provider should throw an exception\");\n+        } catch (ZoneRulesException e) {\n+            \/\/ Ignore. Failure on duplicate registration is expected.\n+        }\n+\n+        \/\/ availability check\n+        assertTrue(ZoneId.getAvailableZoneIds().contains(zone), \"Unexpected non-availability for \" + zone);\n+        \/\/ instantiation check\n+        try {\n+            ZoneId.of(zone);\n+        } catch (ZoneRulesException e) {\n+            fail(\"ZoneId instance for \" + zone + \" should still be obtainable\", e);\n+        }\n+    }\n+\n+    private static class IdsOnlyZoneRulesProvider extends ZoneRulesProvider {\n+\n+        private final Set<String> zones;\n+\n+        IdsOnlyZoneRulesProvider(Set<String> zones) {\n+            this.zones = zones;\n+        }\n+\n+        @Override\n+        protected Set<String> provideZoneIds() {\n+            return zones;\n+        }\n+\n+        @Override\n+        protected ZoneRules provideRules(String zoneId, boolean forCaching) {\n+            return null;\n+        }\n+\n+        @Override\n+        protected NavigableMap<String, ZoneRules> provideVersions(String zoneId) {\n+            return null;\n+        }\n+    }\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/zone\/TestZoneRulesProvider.java","additions":65,"deletions":20,"binary":false,"changes":85,"status":"modified"}]}