{"files":[{"patch":"@@ -43,2 +43,1 @@\n- * @bug 8299571\n- * @bug 8302983\n+ * @bug 8299571 8302983\n@@ -48,2 +47,0 @@\n-    private static final Set<String> MY_ZONE_IDS =\n-        new LinkedHashSet(Arrays.asList(new String[] {\"MyID_1\", \"MyID_2\", \"CET\", \"MyID_3\"}));\n@@ -54,0 +51,1 @@\n+     * @bug 8299571\n@@ -57,0 +55,1 @@\n+        Set<String> myZoneIds = new LinkedHashSet<>(Arrays.asList(new String[] {\"MyID_1\", \"MyID_2\", \"CET\", \"MyID_3\"}));\n@@ -58,16 +57,1 @@\n-            ZoneRulesProvider.registerProvider(new ZoneRulesProvider() {\n-                @Override\n-                protected Set<String> provideZoneIds() {\n-                    return MY_ZONE_IDS;\n-                }\n-\n-                @Override\n-                protected ZoneRules provideRules(String zoneId, boolean forCaching) {\n-                    return null;\n-                }\n-\n-                @Override\n-                protected NavigableMap<String, ZoneRules> provideVersions(String zoneId) {\n-                    return null;\n-                }\n-            });\n+            ZoneRulesProvider.registerProvider(new IdsOnlyZoneRulesProvider(myZoneIds));\n@@ -79,1 +63,1 @@\n-        MY_ZONE_IDS.stream().forEach(id -> {\n+        myZoneIds.stream().forEach(id -> {\n@@ -100,0 +84,1 @@\n+     * @bug 8302983\n@@ -104,16 +89,1 @@\n-        var provider = new ZoneRulesProvider() {\n-            @Override\n-            protected Set<String> provideZoneIds() {\n-                return Set.of(zone);\n-            }\n-\n-            @Override\n-            protected ZoneRules provideRules(String zoneId, boolean forCaching) {\n-                return null;\n-            }\n-\n-            @Override\n-            protected NavigableMap<String, ZoneRules> provideVersions(String zoneId) {\n-                return null;\n-            }\n-        }\n+        var provider = new IdsOnlyZoneRulesProvider(Set.of(zone));\n@@ -123,1 +93,5 @@\n-        assertNotNull(ZoneId.of(zone), \"ZoneId instance for \" + zone + \" should be obtainable\");\n+        try {\n+            ZoneId.of(zone);\n+        } catch (ZoneRulesException e) {\n+            fail(\"ZoneId instance for \" + zone + \" should be obtainable\");\n+        }\n@@ -127,1 +101,1 @@\n-            throw new RuntimeException(\"Registering an already registered provider should throw an exception\");\n+            fail(\"Registering an already registered provider should throw an exception\");\n@@ -136,1 +110,1 @@\n-            assertNotNull(ZoneId.of(zone), \"ZoneId instance for \" + zone + \" should still be obtainable\");\n+            ZoneId.of(zone);\n@@ -141,0 +115,24 @@\n+\n+    private static class IdsOnlyZoneRulesProvider extends ZoneRulesProvider {\n+\n+        private final Set<String> zones;\n+\n+        IdsOnlyZoneRulesProvider(Set<String> zones) {\n+            this.zones = zones;\n+        }\n+\n+        @Override\n+        protected Set<String> provideZoneIds() {\n+            return zones;\n+        }\n+\n+        @Override\n+        protected ZoneRules provideRules(String zoneId, boolean forCaching) {\n+            return null;\n+        }\n+\n+        @Override\n+        protected NavigableMap<String, ZoneRules> provideVersions(String zoneId) {\n+            return null;\n+        }\n+    }\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/zone\/TestZoneRulesProvider.java","additions":38,"deletions":40,"binary":false,"changes":78,"status":"modified"}]}