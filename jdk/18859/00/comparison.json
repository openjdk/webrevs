{"files":[{"patch":"@@ -1,135 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n-\n- Redistribution and use in source and binary forms, with or without\n- modification, are permitted provided that the following conditions\n- are met:\n-\n-   - Redistributions of source code must retain the above copyright\n-     notice, this list of conditions and the following disclaimer.\n-\n-   - Redistributions in binary form must reproduce the above copyright\n-     notice, this list of conditions and the following disclaimer in the\n-     documentation and\/or other materials provided with the distribution.\n-\n-   - Neither the name of Oracle nor the names of its\n-     contributors may be used to endorse or promote products derived\n-     from this software without specific prior written permission.\n-\n- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n- IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n- PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--->\n-\n-<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"\n-         xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 https:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n-    <modelVersion>4.0.0<\/modelVersion>\n-    <parent>\n-        <artifactId>IdealGraphVisualizer-parent<\/artifactId>\n-        <groupId>com.sun.hotspot.igv<\/groupId>\n-        <version>1.0-SNAPSHOT<\/version>\n-    <\/parent>\n-    <artifactId>ControlFlow<\/artifactId>\n-    <version>1.0-SNAPSHOT<\/version>\n-    <packaging>nbm<\/packaging>\n-    <name>ControlFlow<\/name>\n-    <properties>\n-        <maven.compiler.release>17<\/maven.compiler.release>\n-        <project.build.sourceEncoding>UTF-8<\/project.build.sourceEncoding>\n-    <\/properties>\n-    <dependencies>\n-        <dependency>\n-            <groupId>com.sun.hotspot.igv<\/groupId>\n-            <artifactId>Data<\/artifactId>\n-            <version>${project.version}<\/version>\n-        <\/dependency>\n-        <dependency>\n-            <groupId>com.sun.hotspot.igv<\/groupId>\n-            <artifactId>Util<\/artifactId>\n-            <version>${project.version}<\/version>\n-        <\/dependency>\n-        <dependency>\n-            <groupId>com.sun.hotspot.igv<\/groupId>\n-            <artifactId>Layout<\/artifactId>\n-            <version>${project.version}<\/version>\n-        <\/dependency>\n-        <dependency>\n-            <groupId>com.sun.hotspot.igv<\/groupId>\n-            <artifactId>HierarchicalLayout<\/artifactId>\n-            <version>${project.version}<\/version>\n-        <\/dependency>\n-        <dependency>\n-            <groupId>org.netbeans.api<\/groupId>\n-            <artifactId>org-netbeans-api-visual<\/artifactId>\n-            <version>${netbeans.version}<\/version>\n-        <\/dependency>\n-        <dependency>\n-            <groupId>net.java.dev.swing-layout<\/groupId>\n-            <artifactId>swing-layout<\/artifactId>\n-            <version>${swinglayouts.version}<\/version>\n-        <\/dependency>\n-        <dependency>\n-            <groupId>org.netbeans.api<\/groupId>\n-            <artifactId>org-openide-util<\/artifactId>\n-            <version>${netbeans.version}<\/version>\n-        <\/dependency>\n-        <dependency>\n-            <groupId>org.netbeans.api<\/groupId>\n-            <artifactId>org-openide-util-lookup<\/artifactId>\n-            <version>${netbeans.version}<\/version>\n-        <\/dependency>\n-        <dependency>\n-            <groupId>org.netbeans.api<\/groupId>\n-            <artifactId>org-openide-util-ui<\/artifactId>\n-            <version>${netbeans.version}<\/version>\n-        <\/dependency>\n-        <dependency>\n-            <groupId>org.netbeans.api<\/groupId>\n-            <artifactId>org-openide-windows<\/artifactId>\n-            <version>${netbeans.version}<\/version>\n-        <\/dependency>\n-    <\/dependencies>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.codehaus.mojo<\/groupId>\n-                <artifactId>nbm-maven-plugin<\/artifactId>\n-                <version>${nbmmvnplugin.version}<\/version>\n-                <extensions>true<\/extensions>\n-            <\/plugin>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins<\/groupId>\n-                <artifactId>maven-compiler-plugin<\/artifactId>\n-                <version>${mvncompilerplugin.version}<\/version>\n-                <configuration>\n-                    <release>17<\/release>\n-                <\/configuration>\n-            <\/plugin>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins<\/groupId>\n-                <artifactId>maven-jar-plugin<\/artifactId>\n-                <version>${mvnjarplugin.version}<\/version>\n-                <configuration>\n-                    <!-- to have the jar plugin pickup the nbm generated manifest -->\n-                    <archive>\n-                        <manifestFile>${project.build.outputDirectory}\/META-INF\/MANIFEST.MF<\/manifestFile>\n-                    <\/archive>\n-                <\/configuration>\n-            <\/plugin>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins<\/groupId>\n-                <artifactId>maven-enforcer-plugin<\/artifactId>\n-            <\/plugin>\n-        <\/plugins>\n-    <\/build>\n-<\/project>\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/pom.xml","additions":0,"deletions":135,"binary":false,"changes":135,"status":"deleted"},{"patch":"@@ -1,124 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.controlflow;\n-\n-import com.sun.hotspot.igv.data.InputBlockEdge;\n-import com.sun.hotspot.igv.layout.Cluster;\n-import com.sun.hotspot.igv.layout.Link;\n-import com.sun.hotspot.igv.layout.Port;\n-import java.awt.BasicStroke;\n-import java.awt.Point;\n-import java.awt.Stroke;\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.netbeans.api.visual.widget.ConnectionWidget;\n-\n-\/**\n- *\n- * @author Thomas Wuerthinger\n- *\/\n-public class BlockConnectionWidget extends ConnectionWidget implements Link {\n-\n-    private static final Stroke NORMAL_STROKE = new BasicStroke(1.0f);\n-    private static final Stroke BOLD_STROKE = new BasicStroke(2.5f);\n-    private static final Stroke DASHED_STROKE = new BasicStroke(1.0f, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_MITER, 10.0f, new float[]{5, 5}, 0);\n-    private static final Stroke BOLD_DASHED_STROKE = new BasicStroke(2.5f, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_MITER, 10.0f, new float[]{5, 5}, 0);\n-\n-    private final BlockWidget from;\n-    private final BlockWidget to;\n-    private final Port inputSlot;\n-    private final Port outputSlot;\n-    private List<Point> points;\n-    private boolean isDashed = false;\n-    private boolean isBold = false;\n-\n-    public BlockConnectionWidget(ControlFlowScene scene, InputBlockEdge edge) {\n-        super(scene);\n-\n-        this.from = (BlockWidget) scene.findWidget(edge.getFrom());\n-        this.to = (BlockWidget) scene.findWidget(edge.getTo());\n-        inputSlot = to.getInputSlot();\n-        outputSlot = from.getOutputSlot();\n-        points = new ArrayList<>();\n-    }\n-\n-    public Port getTo() {\n-        return inputSlot;\n-    }\n-\n-    public Port getFrom() {\n-        return outputSlot;\n-    }\n-\n-    public Cluster getFromCluster() {\n-        return null;\n-    }\n-\n-    public Cluster getToCluster() {\n-        return null;\n-    }\n-\n-    public void setBold(boolean bold) {\n-        this.isBold = bold;\n-        updateStroke();\n-    }\n-\n-    public void setDashed(boolean dashed) {\n-        this.isDashed = dashed;\n-        updateStroke();\n-    }\n-\n-    private void updateStroke() {\n-        Stroke stroke = NORMAL_STROKE;\n-        if (isBold) {\n-            if (isDashed) {\n-                stroke = BOLD_DASHED_STROKE;\n-            } else {\n-                stroke = BOLD_STROKE;\n-            }\n-        } else if (isDashed) {\n-            stroke = DASHED_STROKE;\n-        }\n-        setStroke(stroke);\n-    }\n-\n-    public void setControlPoints(List<Point> p) {\n-        this.points = p;\n-    }\n-\n-    @Override\n-    public List<Point> getControlPoints() {\n-        return points;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"Connection[ \" + from.toString() + \" - \" + to.toString() + \"]\";\n-    }\n-\n-    @Override\n-    public boolean isVIP() {\n-        return isBold;\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/BlockConnectionWidget.java","additions":0,"deletions":124,"binary":false,"changes":124,"status":"deleted"},{"patch":"@@ -1,148 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.controlflow;\n-\n-import com.sun.hotspot.igv.data.InputBlock;\n-import com.sun.hotspot.igv.layout.Cluster;\n-import com.sun.hotspot.igv.layout.Port;\n-import com.sun.hotspot.igv.layout.Vertex;\n-import java.awt.*;\n-import org.netbeans.api.visual.border.BorderFactory;\n-import org.netbeans.api.visual.model.ObjectState;\n-import org.netbeans.api.visual.widget.LabelWidget;\n-\n-\/**\n- *\n- * @author Thomas Wuerthinger\n- *\/\n-public class BlockWidget extends LabelWidget implements Vertex {\n-\n-    public static final Dimension MIN_SIZE = new Dimension(20, 20);\n-    private final InputBlock block;\n-    private final Port inputSlot;\n-    private final Port outputSlot;\n-    private Cluster cluster;\n-    private static final Font font = new Font(Font.SANS_SERIF, Font.PLAIN, 12);\n-    private static final Font boldFont = font.deriveFont(Font.BOLD);\n-    public static final Color NORMAL_FOREGROUND_COLOR = Color.BLACK;\n-    public static final Color HOVER_FOREGROUND_COLOR = Color.BLUE;\n-\n-    \/** Creates a new instance of BlockWidget *\/\n-    public BlockWidget(ControlFlowScene scene, InputBlock block) {\n-        super(scene);\n-        this.block = block;\n-        this.setLabel(block.getName());\n-        this.setForeground(NORMAL_FOREGROUND_COLOR);\n-        this.setBorder(BorderFactory.createLineBorder(1, NORMAL_FOREGROUND_COLOR));\n-        this.setMinimumSize(MIN_SIZE);\n-\n-        this.setFont(font);\n-        this.setAlignment(Alignment.CENTER);\n-\n-        final BlockWidget widget = this;\n-        inputSlot = new Port() {\n-            public Point getRelativePosition() {\n-                return new Point((int) (getSize().getWidth() \/ 2), (int) (getSize().getHeight() \/ 2));\n-            }\n-            public Vertex getVertex() {\n-                return widget;\n-            }\n-        };\n-        outputSlot = new Port() {\n-            public Point getRelativePosition() {\n-                return new Point((int) (getSize().getWidth() \/ 2), (int) (getSize().getHeight() \/ 2));\n-            }\n-            public Vertex getVertex() {\n-                return widget;\n-            }\n-        };\n-    }\n-\n-    public Port getInputSlot() {\n-        return inputSlot;\n-    }\n-\n-    public Port getOutputSlot() {\n-        return outputSlot;\n-    }\n-\n-    public InputBlock getBlock() {\n-        return block;\n-    }\n-\n-    public Dimension getSize() {\n-        Rectangle bounds = getBounds();\n-        if (bounds != null) {\n-            return bounds.getSize();\n-        } else {\n-            return MIN_SIZE;\n-        }\n-    }\n-\n-    public void setPosition(Point p) {\n-        this.setPreferredLocation(p);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return block.getName();\n-    }\n-\n-    public Point getPosition() {\n-        return this.getPreferredLocation();\n-    }\n-\n-    public Cluster getCluster() {\n-        return cluster;\n-    }\n-\n-    public boolean isRoot() {\n-        return false;\n-    }\n-\n-    public int compareTo(Vertex o) {\n-        return toString().compareTo(o.toString());\n-    }\n-\n-    @Override\n-    protected void notifyStateChanged(ObjectState previousState, ObjectState state) {\n-        super.notifyStateChanged(previousState, state);\n-\n-        if (previousState.isHovered() != state.isHovered()) {\n-            if (state.isHovered()) {\n-                this.setBorder(BorderFactory.createLineBorder(1, HOVER_FOREGROUND_COLOR));\n-            } else {\n-                this.setBorder(BorderFactory.createLineBorder(1, NORMAL_FOREGROUND_COLOR));\n-            }\n-        }\n-\n-        if (previousState.isSelected() != state.isSelected()) {\n-            if (state.isSelected()) {\n-                this.setFont(boldFont);\n-            } else {\n-                this.setFont(font);\n-            }\n-        }\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/BlockWidget.java","additions":0,"deletions":148,"binary":false,"changes":148,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.controlflow;\n-\n-import java.awt.event.ActionEvent;\n-import javax.swing.AbstractAction;\n-import org.openide.util.NbBundle;\n-import org.openide.windows.TopComponent;\n-\n-\/**\n- *\n- * @author Thomas Wuerthinger\n- *\/\n-public class ControlFlowAction extends AbstractAction {\n-\n-    public ControlFlowAction() {\n-        super(NbBundle.getMessage(ControlFlowAction.class, \"CTL_ControlFlowAction\"));\n-    }\n-\n-    public void actionPerformed(ActionEvent evt) {\n-        TopComponent win = ControlFlowTopComponent.findInstance();\n-        win.open();\n-        win.requestActive();\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowAction.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,311 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.controlflow;\n-\n-import com.sun.hotspot.igv.data.InputBlock;\n-import com.sun.hotspot.igv.data.InputBlockEdge;\n-import com.sun.hotspot.igv.data.InputGraph;\n-import com.sun.hotspot.igv.data.InputNode;\n-import com.sun.hotspot.igv.data.services.InputGraphProvider;\n-import com.sun.hotspot.igv.util.LookupHistory;\n-import java.awt.Color;\n-import java.awt.Point;\n-import java.awt.Rectangle;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.Set;\n-import javax.swing.BorderFactory;\n-import org.netbeans.api.visual.action.*;\n-import org.netbeans.api.visual.anchor.AnchorFactory;\n-import org.netbeans.api.visual.anchor.AnchorShape;\n-import org.netbeans.api.visual.graph.GraphScene;\n-import org.netbeans.api.visual.graph.layout.GraphLayout;\n-import org.netbeans.api.visual.layout.LayoutFactory;\n-import org.netbeans.api.visual.layout.SceneLayout;\n-import org.netbeans.api.visual.router.RouterFactory;\n-import org.netbeans.api.visual.widget.ConnectionWidget;\n-import org.netbeans.api.visual.widget.LayerWidget;\n-import org.netbeans.api.visual.widget.Widget;\n-\n-\/**\n- *\n- * @author Thomas Wuerthinger\n- *\/\n-public class ControlFlowScene extends GraphScene<InputBlock, InputBlockEdge> implements SelectProvider, MoveProvider, RectangularSelectDecorator, RectangularSelectProvider {\n-\n-    private final HashSet<BlockWidget> selection;\n-    private InputGraph oldGraph;\n-    private final LayerWidget edgeLayer;\n-    private final LayerWidget mainLayer;\n-    private final WidgetAction hoverAction = createWidgetHoverAction();\n-    private final WidgetAction selectAction = new DoubleClickSelectAction(this);\n-    private final WidgetAction moveAction = ActionFactory.createMoveAction(null, this);\n-\n-    public ControlFlowScene() {\n-        selection = new HashSet<>();\n-\n-        getInputBindings().setZoomActionModifiers(0);\n-        setLayout(LayoutFactory.createAbsoluteLayout());\n-\n-        mainLayer = new LayerWidget(this);\n-        addChild(mainLayer);\n-\n-        edgeLayer = new LayerWidget(this);\n-        addChild(edgeLayer);\n-\n-        LayerWidget selectLayer = new LayerWidget(this);\n-        addChild(selectLayer);\n-\n-        getActions().addAction(hoverAction);\n-        getActions().addAction(selectAction);\n-        getActions().addAction(ActionFactory.createRectangularSelectAction(this, selectLayer, this));\n-        getActions().addAction(ActionFactory.createMouseCenteredZoomAction(1.1));\n-    }\n-\n-    public void setGraph(InputGraph g) {\n-        if (g == oldGraph) {\n-            return;\n-        }\n-        oldGraph = g;\n-\n-        ArrayList<InputBlock> blocks = new ArrayList<>(getNodes());\n-        for (InputBlock b : blocks) {\n-            removeNode(b);\n-        }\n-\n-        ArrayList<InputBlockEdge> edges = new ArrayList<>(getEdges());\n-        for (InputBlockEdge e : edges) {\n-            removeEdge(e);\n-        }\n-\n-        edgeLayer.removeChildren();\n-        mainLayer.removeChildren();\n-\n-        for (InputBlock b : g.getBlocks()) {\n-            addNode(b);\n-        }\n-\n-        for (InputBlockEdge e : g.getBlockEdges()) {\n-            addEdge(e);\n-            assert g.getBlocks().contains(e.getFrom());\n-            assert g.getBlocks().contains(e.getTo());\n-            setEdgeSource(e, e.getFrom());\n-            setEdgeTarget(e, e.getTo());\n-        }\n-\n-        GraphLayout<InputBlock, InputBlockEdge> layout = new HierarchicalGraphLayout<>();\n-        SceneLayout sceneLayout = LayoutFactory.createSceneGraphLayout(this, layout);\n-        sceneLayout.invokeLayout();\n-\n-        validate();\n-    }\n-\n-    private void clearSelection() {\n-        for (BlockWidget w : selection) {\n-            w.setState(w.getState().deriveSelected(false));\n-        }\n-        selection.clear();\n-        selectionChanged();\n-    }\n-\n-    private void selectionChanged() {\n-        InputGraphProvider p = LookupHistory.getLast(InputGraphProvider.class);\n-        if (p != null) {\n-            Set<InputNode> inputNodes = new HashSet<>();\n-            for (BlockWidget w : selection) {\n-                inputNodes.addAll(w.getBlock().getNodes());\n-            }\n-            p.clearSelectedNodes();\n-            p.addSelectedNodes(inputNodes, true);\n-            p.centerSelectedNodes();\n-        }\n-    }\n-\n-    private void addToSelection(BlockWidget widget) {\n-        widget.setState(widget.getState().deriveSelected(true));\n-        selection.add(widget);\n-        selectionChanged();\n-    }\n-\n-    private void removeFromSelection(BlockWidget widget) {\n-        widget.setState(widget.getState().deriveSelected(false));\n-        selection.remove(widget);\n-        selectionChanged();\n-    }\n-\n-    @Override\n-    public boolean isAimingAllowed(Widget widget, Point point, boolean b) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isSelectionAllowed(Widget widget, Point point, boolean b) {\n-        return true;\n-    }\n-\n-    @Override\n-    public void select(Widget widget, Point point, boolean change) {\n-        if (widget == this) {\n-            clearSelection();\n-        } else {\n-\n-            assert widget instanceof BlockWidget;\n-            BlockWidget bw = (BlockWidget) widget;\n-            if (change) {\n-                if (selection.contains(bw)) {\n-                    removeFromSelection(bw);\n-                } else {\n-                    addToSelection(bw);\n-                }\n-            } else {\n-                if (!selection.contains(bw)) {\n-                    clearSelection();\n-                    addToSelection(bw);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void movementStarted(Widget widget) {}\n-\n-    @Override\n-\n-    public void movementFinished(Widget widget) {}\n-\n-    @Override\n-    public Point getOriginalLocation(Widget widget) {\n-        return widget.getPreferredLocation();\n-    }\n-\n-    @Override\n-    public void setNewLocation(Widget widget, Point location) {\n-        assert widget instanceof BlockWidget;\n-        if (selection.contains((BlockWidget) widget)) {\n-            \/\/ move entire selection\n-            Point originalLocation = getOriginalLocation(widget);\n-            int xOffset = location.x - originalLocation.x;\n-            int yOffset = location.y - originalLocation.y;\n-            for (Widget w : selection) {\n-                Point p = new Point(w.getPreferredLocation());\n-                p.translate(xOffset, yOffset);\n-                w.setPreferredLocation(p);\n-            }\n-        } else {\n-            widget.setPreferredLocation(location);\n-        }\n-    }\n-\n-    @Override\n-    public Widget createSelectionWidget() {\n-        Widget widget = new Widget(this);\n-        widget.setOpaque(false);\n-        widget.setBorder(BorderFactory.createLineBorder(Color.black, 2));\n-        widget.setForeground(Color.red);\n-        return widget;\n-    }\n-\n-    @Override\n-    public void performSelection(Rectangle rectangle) {\n-\n-        if (rectangle.width < 0) {\n-            rectangle.x += rectangle.width;\n-            rectangle.width *= -1;\n-        }\n-\n-        if (rectangle.height < 0) {\n-            rectangle.y += rectangle.height;\n-            rectangle.height *= -1;\n-        }\n-\n-        boolean changed = false;\n-        for (InputBlock b : getNodes()) {\n-            BlockWidget w = (BlockWidget) findWidget(b);\n-            Rectangle r = new Rectangle(w.getBounds());\n-            r.setLocation(w.getLocation());\n-            if (r.intersects(rectangle)) {\n-                if (!selection.contains(w)) {\n-                    changed = true;\n-                    selection.add(w);\n-                    w.setState(w.getState().deriveSelected(true));\n-                }\n-            } else {\n-                if (selection.contains(w)) {\n-                    changed = true;\n-                    selection.remove(w);\n-                    w.setState(w.getState().deriveSelected(false));\n-                }\n-            }\n-        }\n-\n-        if (changed) {\n-            selectionChanged();\n-        }\n-\n-    }\n-\n-    @Override\n-    protected Widget attachNodeWidget(InputBlock node) {\n-        BlockWidget w = new BlockWidget(this, node);\n-        mainLayer.addChild(w);\n-        w.getActions().addAction(hoverAction);\n-        w.getActions().addAction(selectAction);\n-        w.getActions().addAction(moveAction);\n-        return w;\n-    }\n-\n-    @Override\n-    protected Widget attachEdgeWidget(InputBlockEdge edge) {\n-        BlockConnectionWidget w = new BlockConnectionWidget(this, edge);\n-        switch (edge.getState()) {\n-            case NEW:\n-                w.setBold(true);\n-                break;\n-            case DELETED:\n-                w.setDashed(true);\n-                break;\n-        }\n-        w.setRouter(RouterFactory.createDirectRouter());\n-        w.setTargetAnchorShape(AnchorShape.TRIANGLE_FILLED);\n-        edgeLayer.addChild(w);\n-        return w;\n-    }\n-\n-    @Override\n-    protected void attachEdgeSourceAnchor(InputBlockEdge edge, InputBlock oldSourceNode, InputBlock sourceNode) {\n-        Widget w = findWidget(edge);\n-        assert w instanceof ConnectionWidget;\n-        ConnectionWidget cw = (ConnectionWidget) w;\n-        cw.setSourceAnchor(AnchorFactory.createRectangularAnchor(findWidget(sourceNode)));\n-\n-    }\n-\n-    @Override\n-    protected void attachEdgeTargetAnchor(InputBlockEdge edge, InputBlock oldTargetNode, InputBlock targetNode) {\n-        Widget w = findWidget(edge);\n-        assert w instanceof ConnectionWidget;\n-        ConnectionWidget cw = (ConnectionWidget) w;\n-        cw.setTargetAnchor(AnchorFactory.createRectangularAnchor(findWidget(targetNode)));\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowScene.java","additions":0,"deletions":311,"binary":false,"changes":311,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n-\n-<Form version=\"1.3\" maxVersion=\"1.3\" type=\"org.netbeans.modules.form.forminfo.JPanelFormInfo\">\n-  <AuxValues>\n-    <AuxValue name=\"FormSettings_autoResourcing\" type=\"java.lang.Integer\" value=\"0\"\/>\n-    <AuxValue name=\"FormSettings_autoSetComponentName\" type=\"java.lang.Boolean\" value=\"false\"\/>\n-    <AuxValue name=\"FormSettings_generateFQN\" type=\"java.lang.Boolean\" value=\"true\"\/>\n-    <AuxValue name=\"FormSettings_generateMnemonicsCode\" type=\"java.lang.Boolean\" value=\"true\"\/>\n-    <AuxValue name=\"FormSettings_i18nAutoMode\" type=\"java.lang.Boolean\" value=\"false\"\/>\n-    <AuxValue name=\"FormSettings_layoutCodeTarget\" type=\"java.lang.Integer\" value=\"2\"\/>\n-    <AuxValue name=\"FormSettings_listenerGenerationStyle\" type=\"java.lang.Integer\" value=\"0\"\/>\n-    <AuxValue name=\"FormSettings_variablesLocal\" type=\"java.lang.Boolean\" value=\"false\"\/>\n-    <AuxValue name=\"FormSettings_variablesModifier\" type=\"java.lang.Integer\" value=\"2\"\/>\n-  <\/AuxValues>\n-\n-  <Layout>\n-    <DimensionLayout dim=\"0\">\n-      <Group type=\"103\" groupAlignment=\"0\" attributes=\"0\">\n-          <EmptySpace min=\"0\" pref=\"400\" max=\"32767\" attributes=\"0\"\/>\n-      <\/Group>\n-    <\/DimensionLayout>\n-    <DimensionLayout dim=\"1\">\n-      <Group type=\"103\" groupAlignment=\"0\" attributes=\"0\">\n-          <EmptySpace min=\"0\" pref=\"300\" max=\"32767\" attributes=\"0\"\/>\n-      <\/Group>\n-    <\/DimensionLayout>\n-  <\/Layout>\n-<\/Form>\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowTopComponent.form","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,150 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.controlflow;\n-\n-import com.sun.hotspot.igv.data.ChangedListener;\n-import com.sun.hotspot.igv.data.InputGraph;\n-import com.sun.hotspot.igv.data.services.InputGraphProvider;\n-import com.sun.hotspot.igv.util.LookupHistory;\n-import java.awt.BorderLayout;\n-import javax.swing.JScrollPane;\n-import javax.swing.SwingUtilities;\n-import org.openide.ErrorManager;\n-import org.openide.util.NbBundle;\n-import org.openide.windows.TopComponent;\n-import org.openide.windows.WindowManager;\n-\n-\/**\n- *\n- * @author Thomas Wuerthinger\n- *\/\n-final class ControlFlowTopComponent extends TopComponent implements ChangedListener<InputGraphProvider> {\n-\n-    private static ControlFlowTopComponent instance;\n-    private static final String PREFERRED_ID = \"ControlFlowTopComponent\";\n-    private final ControlFlowScene scene;\n-\n-    private ControlFlowTopComponent() {\n-        initComponents();\n-        setName(NbBundle.getMessage(ControlFlowTopComponent.class, \"CTL_ControlFlowTopComponent\"));\n-        setToolTipText(NbBundle.getMessage(ControlFlowTopComponent.class, \"HINT_ControlFlowTopComponent\"));\n-\n-        scene = new ControlFlowScene();\n-        setLayout(new BorderLayout());\n-        associateLookup(scene.getLookup());\n-\n-        JScrollPane panel = new JScrollPane(scene.createView());\n-        add(panel, BorderLayout.CENTER);\n-    }\n-\n-    \/**\n-     * Gets default instance. Do not use directly: reserved for *.settings files only,\n-     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.\n-     * To obtain the singleton instance, use {@link #findInstance()}.\n-     *\/\n-    public static synchronized ControlFlowTopComponent getDefault() {\n-        if (instance == null) {\n-            instance = new ControlFlowTopComponent();\n-        }\n-        return instance;\n-    }\n-\n-    \/**\n-     * Obtain the ControlFlowTopComponent instance. Never call {@link #getDefault} directly!\n-     *\/\n-    public static synchronized ControlFlowTopComponent findInstance() {\n-        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);\n-        if (win == null) {\n-            ErrorManager.getDefault().log(ErrorManager.WARNING, \"Cannot find ControlFlow component. It will not be located properly in the window system.\");\n-            return getDefault();\n-        }\n-        if (win instanceof ControlFlowTopComponent) {\n-            return (ControlFlowTopComponent) win;\n-        }\n-        ErrorManager.getDefault().log(ErrorManager.WARNING, \"There seem to be multiple components with the '\" + PREFERRED_ID + \"' ID. That is a potential source of errors and unexpected behavior.\");\n-        return getDefault();\n-    }\n-\n-    @Override\n-    public int getPersistenceType() {\n-        return TopComponent.PERSISTENCE_ALWAYS;\n-    }\n-\n-    @Override\n-    public void componentOpened() {\n-        LookupHistory.addListener(InputGraphProvider.class, this);\n-    }\n-\n-    @Override\n-    public void componentClosed() {\n-        LookupHistory.removeListener(InputGraphProvider.class, this);\n-    }\n-\n-    @Override\n-    public void changed(InputGraphProvider lastProvider) {\n-        SwingUtilities.invokeLater(() -> {\n-            if (lastProvider != null) {\n-                InputGraph graph = lastProvider.getGraph();\n-                if (graph != null) {\n-                    scene.setGraph(graph);\n-                    return;\n-                }\n-            }\n-            scene.setGraph(new InputGraph(\"\"));\n-        });\n-    }\n-\n-    @Override\n-    protected String preferredID() {\n-        return PREFERRED_ID;\n-    }\n-\n-    @Override\n-    public void requestActive() {\n-        super.requestActive();\n-        scene.getView().requestFocus();\n-    }\n-\n-    \/** This method is called from within the constructor to\n-     * initialize the form.\n-     * WARNING: Do NOT modify this code. The content of this method is\n-     * always regenerated by the Form Editor.\n-     *\/\n-    \/\/ <editor-fold defaultstate=\"collapsed\" desc=\" Generated Code \">\/\/GEN-BEGIN:initComponents\n-    private void initComponents() {\n-\n-        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);\n-        this.setLayout(layout);\n-        layout.setHorizontalGroup(\n-                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n-                        .add(0, 400, Short.MAX_VALUE)\n-        );\n-        layout.setVerticalGroup(\n-                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)\n-                        .add(0, 300, Short.MAX_VALUE)\n-        );\n-    }\/\/ <\/editor-fold>\/\/GEN-END:initComponents\n-    \/\/ Variables declaration - do not modify\/\/GEN-BEGIN:variables\n-    \/\/ End of variables declaration\/\/GEN-END:variables\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowTopComponent.java","additions":0,"deletions":150,"binary":false,"changes":150,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.controlflow;\n-\n-import java.awt.Point;\n-import java.awt.event.MouseEvent;\n-import org.netbeans.api.visual.action.SelectProvider;\n-import org.netbeans.api.visual.action.WidgetAction;\n-import org.netbeans.api.visual.widget.Widget;\n-import org.openide.util.Utilities;\n-\n-\/**\n- * Selection action that acts on double-click only. Does not support aiming.\n- *\n- * @author Peter Hofer\n- *\/\n-public class DoubleClickSelectAction extends WidgetAction.LockedAdapter {\n-\n-    private final SelectProvider provider;\n-\n-    public DoubleClickSelectAction(SelectProvider provider) {\n-        this.provider = provider;\n-    }\n-\n-    protected int getModifierMask () {\n-        return Utilities.isMac() ? MouseEvent.META_DOWN_MASK : MouseEvent.CTRL_DOWN_MASK;\n-    }\n-\n-    protected boolean isLocked() {\n-        return false;\n-    }\n-\n-    @Override\n-    public State mousePressed(Widget widget, WidgetMouseEvent event) {\n-        if (event.getClickCount() >= 2 && (event.getButton() == MouseEvent.BUTTON1 || event.getButton() == MouseEvent.BUTTON2)) {\n-            boolean invert = (event.getModifiersEx() & getModifierMask()) != 0;\n-            Point point = event.getPoint();\n-            if (provider.isSelectionAllowed(widget, point, invert)) {\n-                provider.select(widget, point, invert);\n-                return State.CHAIN_ONLY;\n-            }\n-        }\n-        return State.REJECTED;\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/DoubleClickSelectAction.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,170 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package com.sun.hotspot.igv.controlflow;\n-\n-import com.sun.hotspot.igv.hierarchicallayout.HierarchicalLayoutManager;\n-import com.sun.hotspot.igv.layout.*;\n-import java.awt.Dimension;\n-import java.awt.Point;\n-import java.util.*;\n-import org.netbeans.api.visual.graph.layout.GraphLayout;\n-import org.netbeans.api.visual.graph.layout.UniversalGraph;\n-import org.netbeans.api.visual.widget.Widget;\n-\n-\/**\n- *\n- * @author Thomas Wuerthinger\n- *\/\n-public class HierarchicalGraphLayout<N, E> extends GraphLayout<N, E> {\n-\n-    public HierarchicalGraphLayout() {}\n-\n-    private class LinkWrapper implements Link {\n-\n-        private final VertexWrapper from;\n-        private final VertexWrapper to;\n-\n-        public LinkWrapper(VertexWrapper from, VertexWrapper to) {\n-            this.from = from;\n-            this.to = to;\n-        }\n-\n-        public Port getFrom() {\n-            return from.getSlot();\n-        }\n-\n-        public Port getTo() {\n-            return to.getSlot();\n-        }\n-\n-        public Cluster getFromCluster() {\n-            return null;\n-        }\n-\n-        public Cluster getToCluster() {\n-            return null;\n-        }\n-\n-        public List<Point> getControlPoints() {\n-            return new ArrayList<>();\n-        }\n-\n-        public void setControlPoints(List<Point> list) {\n-        \/\/ Do nothing for now\n-        }\n-\n-        public boolean isVIP() {\n-            return false;\n-        }\n-    }\n-\n-    private class VertexWrapper implements Vertex {\n-\n-        private final N node;\n-        private final UniversalGraph<N, E> graph;\n-        private final Port slot;\n-        private Point position;\n-\n-        public VertexWrapper(N node, UniversalGraph<N, E> graph) {\n-            this.node = node;\n-            this.graph = graph;\n-            final VertexWrapper vertex = this;\n-            this.slot = new Port() {\n-\n-                public Vertex getVertex() {\n-                    return vertex;\n-                }\n-\n-                public Point getRelativePosition() {\n-                    return new Point((int) (vertex.getSize().getWidth() \/ 2), (int) (vertex.getSize().getHeight() \/ 2));\n-                }\n-            };\n-\n-            Widget w = graph.getScene().findWidget(node);\n-            this.position = w.getPreferredLocation();\n-        }\n-\n-        public Cluster getCluster() {\n-            return null;\n-        }\n-\n-        public Dimension getSize() {\n-            Widget w = graph.getScene().findWidget(node);\n-            assert w.getBounds() != null;\n-            return w.getBounds().getSize();\n-        }\n-\n-        public Point getPosition() {\n-            return position;\n-        }\n-\n-        public void setPosition(Point p) {\n-            HierarchicalGraphLayout.this.setResolvedNodeLocation(graph, node, p);\n-            position = p;\n-        }\n-\n-        public boolean isRoot() {\n-            return false;\n-        }\n-\n-        public int compareTo(Vertex o) {\n-            @SuppressWarnings(\"unchecked\")\n-            VertexWrapper vw = (VertexWrapper) o;\n-            return node.toString().compareTo(vw.node.toString());\n-        }\n-\n-        public Port getSlot() {\n-            return slot;\n-        }\n-    }\n-\n-    protected void performGraphLayout(UniversalGraph<N, E> graph) {\n-\n-        Set<LinkWrapper> links = new LinkedHashSet<>();\n-        Set<VertexWrapper> vertices = new LinkedHashSet<>();\n-        Map<N, VertexWrapper> vertexMap = new HashMap<>();\n-\n-        for (N node : graph.getNodes()) {\n-            VertexWrapper v = new VertexWrapper(node, graph);\n-            vertexMap.put(node, v);\n-            vertices.add(v);\n-        }\n-\n-        for (E edge : graph.getEdges()) {\n-            N source = graph.getEdgeSource(edge);\n-            N target = graph.getEdgeTarget(edge);\n-            LinkWrapper l = new LinkWrapper(vertexMap.get(source), vertexMap.get(target));\n-            links.add(l);\n-        }\n-\n-        HierarchicalLayoutManager m = new HierarchicalLayoutManager(HierarchicalLayoutManager.Combine.NONE);\n-\n-        LayoutGraph layoutGraph = new LayoutGraph(links, vertices);\n-        m.doLayout(layoutGraph);\n-    }\n-\n-    protected void performNodesLayout(UniversalGraph<N, E> graph, Collection<N> nodes) {\n-        throw new UnsupportedOperationException();\n-    }\n-}\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/java\/com\/sun\/hotspot\/igv\/controlflow\/HierarchicalGraphLayout.java","additions":0,"deletions":170,"binary":false,"changes":170,"status":"deleted"},{"patch":"@@ -1,6 +0,0 @@\n-Manifest-Version: 1.0\n-OpenIDE-Module: com.sun.hotspot.igv.controlflow\n-OpenIDE-Module-Layer: com\/sun\/hotspot\/igv\/controlflow\/layer.xml\n-OpenIDE-Module-Localizing-Bundle: com\/sun\/hotspot\/igv\/controlflow\/Bundle.properties\n-OpenIDE-Module-Specification-Version: 1.0\n-\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/nbm\/manifest.mf","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-CTL_ControlFlowAction=Control Flow\n-CTL_ControlFlowTopComponent=Control Flow\n-HINT_ControlFlowTopComponent=Shows the blocks of the current graph.\n-OpenIDE-Module-Name=ControlFlow\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/resources\/com\/sun\/hotspot\/igv\/controlflow\/Bundle.properties","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,8 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!DOCTYPE settings PUBLIC \"-\/\/NetBeans\/\/DTD Session settings 1.0\/\/EN\" \"https:\/\/www.netbeans.org\/dtds\/sessionsettings-1_0.dtd\">\n-<settings version=\"1.0\">\n-    <module name=\"com.sun.hotspot.igv.controlflow\" spec=\"1.0\"\/>\n-    <instanceof class=\"org.openide.windows.TopComponent\"\/>\n-    <instanceof class=\"com.sun.hotspot.igv.controlflow.ControlFlowTopComponent\"\/>\n-    <instance class=\"com.sun.hotspot.igv.controlflow.ControlFlowTopComponent\" method=\"getDefault\"\/>\n-<\/settings>\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/resources\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowTopComponentSettings.xml","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!DOCTYPE tc-ref PUBLIC \"-\/\/NetBeans\/\/DTD Top Component in Mode Properties 2.0\/\/EN\" \"https:\/\/www.netbeans.org\/dtds\/tc-ref2_0.dtd\">\n-<tc-ref version=\"2.0\" >\n-    <module name=\"com.sun.hotspot.igv.controlflow\" spec=\"1.0\"\/>\n-    <tc-id id=\"ControlFlowTopComponent\"\/>\n-    <state opened=\"true\"\/>\n-<\/tc-ref>\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/resources\/com\/sun\/hotspot\/igv\/controlflow\/ControlFlowTopComponentWstcref.xml","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,27 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!DOCTYPE filesystem PUBLIC \"-\/\/NetBeans\/\/DTD Filesystem 1.1\/\/EN\" \"https:\/\/www.netbeans.org\/dtds\/filesystem-1_1.dtd\">\n-<filesystem>\n-    <folder name=\"Actions\">\n-        <folder name=\"Window\">\n-            <file name=\"com-sun-hotspot-igv-controlflow-ControlFlowAction.instance\"\/>\n-        <\/folder>\n-    <\/folder>\n-    <folder name=\"Menu\">\n-        <folder name=\"Window\">\n-            <file name=\"ControlFlowAction.shadow\">\n-                <attr name=\"originalFile\" stringvalue=\"Actions\/Window\/com-sun-hotspot-igv-controlflow-ControlFlowAction.instance\"\/>\n-                <attr name=\"position\" intvalue=\"2\"\/>\n-            <\/file>\n-        <\/folder>\n-    <\/folder>\n-    <folder name=\"Windows2\">\n-        <folder name=\"Components\">\n-            <file name=\"ControlFlowTopComponent.settings\" url=\"ControlFlowTopComponentSettings.xml\"\/>\n-        <\/folder>\n-        <folder name=\"Modes\">\n-            <folder name=\"customRightTopMode\">\n-                <file name=\"ControlFlowTopComponent.wstcref\" url=\"ControlFlowTopComponentWstcref.xml\"\/>\n-            <\/folder>\n-        <\/folder>\n-    <\/folder>\n-<\/filesystem>\n","filename":"src\/utils\/IdealGraphVisualizer\/ControlFlow\/src\/main\/resources\/com\/sun\/hotspot\/igv\/controlflow\/layer.xml","additions":0,"deletions":27,"binary":false,"changes":27,"status":"deleted"},{"patch":"@@ -118,5 +118,0 @@\n-        <dependency>\n-            <groupId>${project.groupId}<\/groupId>\n-            <artifactId>ControlFlow<\/artifactId>\n-            <version>${project.version}<\/version>\n-        <\/dependency>\n","filename":"src\/utils\/IdealGraphVisualizer\/application\/pom.xml","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n-        <module>ControlFlow<\/module>\n","filename":"src\/utils\/IdealGraphVisualizer\/pom.xml","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}