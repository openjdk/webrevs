{"files":[{"patch":"@@ -2004,1 +2004,0 @@\n-  const int num_8bit_elems_in_vec_reg = MaxVectorSize;\n@@ -2006,1 +2005,1 @@\n-  const int ints_in_vec_reg = num_8bit_elems_in_vec_reg\/sizeof(jint);\n+  const int ints_in_vec_reg = MaxVectorSize\/sizeof(jint);\n@@ -2014,7 +2013,7 @@\n-  case T_BOOLEAN: BLOCK_COMMENT(\"arrays_hashcode_v(unsigned byte) {\"); break;\n-  case T_CHAR:    BLOCK_COMMENT(\"arrays_hashcode_v(char) {\");          break;\n-  case T_BYTE:    BLOCK_COMMENT(\"arrays_hashcode_v(byte) {\");          break;\n-  case T_SHORT:   BLOCK_COMMENT(\"arrays_hashcode_v(short) {\");         break;\n-  case T_INT:     BLOCK_COMMENT(\"arrays_hashcode_v(int) {\");           break;\n-  default:\n-    ShouldNotReachHere();\n+    case T_BOOLEAN: BLOCK_COMMENT(\"arrays_hashcode_v(unsigned byte) {\"); break;\n+    case T_CHAR:    BLOCK_COMMENT(\"arrays_hashcode_v(char) {\");          break;\n+    case T_BYTE:    BLOCK_COMMENT(\"arrays_hashcode_v(byte) {\");          break;\n+    case T_SHORT:   BLOCK_COMMENT(\"arrays_hashcode_v(short) {\");         break;\n+    case T_INT:     BLOCK_COMMENT(\"arrays_hashcode_v(int) {\");           break;\n+    default:\n+      ShouldNotReachHere();\n@@ -2028,1 +2027,0 @@\n-\n@@ -2032,1 +2030,0 @@\n-  const VectorRegister v_zred = v_tmp;\n@@ -2041,2 +2038,2 @@\n-  andi(t1, cnt, MAX_VEC_MASK);\n-  beqz(t1, SCALAR_TAIL);\n+  andi(t0, cnt, MAX_VEC_MASK);\n+  beqz(t0, SCALAR_TAIL);\n@@ -2044,1 +2041,1 @@\n-  vsetvli(t0, x0, Assembler::e32, Assembler::m2);\n+  vsetvli(t1, x0, Assembler::e32, Assembler::m2);\n@@ -2054,1 +2051,1 @@\n-  arrays_hashcode_vec_elload(v_src, v_tmp, ary, eltype);\n+  arrays_hashcode_elload_v(v_src, v_tmp, ary, eltype);\n@@ -2061,1 +2058,1 @@\n-  bne(t1, x0, VEC_LOOP);\n+  bnez(t1, VEC_LOOP);\n@@ -2063,2 +2060,2 @@\n-  vmv_s_x(v_zred, x0);\n-  vredsum_vs(v_sum, v_sum, v_zred);\n+  vmv_s_x(v_tmp, x0);\n+  vredsum_vs(v_sum, v_sum, v_tmp);\n@@ -2110,5 +2107,5 @@\n-void C2_MacroAssembler::arrays_hashcode_vec_elload(VectorRegister varr,\n-                                                   VectorRegister vtmp,\n-                                                   Register array,\n-                                                   BasicType eltype) {\n-  assert((T_INT == eltype) || (varr != vtmp), \"should be\");\n+void C2_MacroAssembler::arrays_hashcode_elload_v(VectorRegister vdst,\n+                                                 VectorRegister vtmp,\n+                                                 Register src,\n+                                                 BasicType eltype) {\n+  assert((T_INT == eltype) || (vdst != vtmp), \"should be\");\n@@ -2116,21 +2113,21 @@\n-  case T_BOOLEAN:\n-    vle8_v(vtmp, array);\n-    vzext_vf4(varr, vtmp);\n-    break;\n-  case T_BYTE:\n-    vle8_v(vtmp, array);\n-    vsext_vf4(varr, vtmp);\n-    break;\n-  case T_CHAR:\n-    vle16_v(vtmp, array);\n-    vzext_vf2(varr, vtmp);\n-    break;\n-  case T_SHORT:\n-    vle16_v(vtmp, array);\n-    vsext_vf2(varr, vtmp);\n-    break;\n-  case T_INT:\n-    vle32_v(varr, array);\n-    break;\n-  default:\n-    ShouldNotReachHere();\n+    case T_BOOLEAN:\n+      vle8_v(vtmp, src);\n+      vzext_vf4(vdst, vtmp);\n+      break;\n+    case T_BYTE:\n+      vle8_v(vtmp, src);\n+      vsext_vf4(vdst, vtmp);\n+      break;\n+    case T_CHAR:\n+      vle16_v(vtmp, src);\n+      vzext_vf2(vdst, vtmp);\n+      break;\n+    case T_SHORT:\n+      vle16_v(vtmp, src);\n+      vsext_vf2(vdst, vtmp);\n+      break;\n+    case T_INT:\n+      vle32_v(vdst, src);\n+      break;\n+    default:\n+      ShouldNotReachHere();\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":41,"deletions":44,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -100,0 +100,3 @@\n+  int arrays_hashcode_elsize(BasicType eltype);\n+  void arrays_hashcode_elload(Register dst, Address src, BasicType eltype);\n+\n@@ -103,4 +106,2 @@\n-  \/\/ helper functions for arrays_hashcode\n-  int arrays_hashcode_elsize(BasicType eltype);\n-  void arrays_hashcode_elload(Register dst, Address src, BasicType eltype);\n-  void arrays_hashcode_vec_elload(VectorRegister varr, VectorRegister vtmp, Register array, BasicType eltype);\n+  void arrays_hashcode_elload_v(VectorRegister vdst, VectorRegister vtmp,\n+                                Register src, BasicType eltype);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -4092,1 +4092,1 @@\n-         TEMP  v2, TEMP  v3, TEMP  v4, TEMP  v5, TEMP  v6, TEMP  v7, TEMP v8, TEMP v9,\n+         TEMP v2, TEMP v3, TEMP v4, TEMP v5, TEMP v6, TEMP v7, TEMP v8, TEMP v9,\n@@ -4095,1 +4095,1 @@\n-  format %{ \"Array HashCode array[] $ary,$cnt,$result,$basic_type -> $result   \/\/ KILL all\" %}\n+  format %{ \"Array HashCode array[] $ary,$cnt,$result,$basic_type -> $result\\t#varrays_hashcode\" %}\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6586,2 +6586,1 @@\n-    const int num_8bit_elems_in_vec_reg = MaxVectorSize;\n-    const int ints_in_vec_reg = num_8bit_elems_in_vec_reg\/sizeof(jint);\n+    const int ints_in_vec_reg = MaxVectorSize\/sizeof(jint);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}