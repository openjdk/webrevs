{"files":[{"patch":"@@ -1997,1 +1997,0 @@\n-                                          Register tmp4, Register tmp5, Register tmp6,\n@@ -2001,0 +2000,1 @@\n+  assert(MaxVectorSize >= 16, \"sanity\");\n@@ -2002,1 +2002,6 @@\n-  assert_different_registers(ary, cnt, result, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, t0, t1);\n+  assert_different_registers(ary, cnt, result, tmp1, tmp2, tmp3, t0, t1);\n+\n+  \/\/ The MaxVectorSize should have been set by detecting RVV max vector register\n+  \/\/ size when check UseRVV (i.e. MaxVectorSize == VM_Version::_initial_vector_length).\n+  \/\/ Let's use T_INT as all hashCode calculations eventually deal with ints.\n+  const int ints_in_vec_reg = MaxVectorSize\/arrays_hashcode_elsize(T_INT);\n@@ -2004,1 +2009,0 @@\n-  const int nof_vec_elems = MaxVectorSize;\n@@ -2007,3 +2011,3 @@\n-  const int vec_step_bytes = nof_vec_elems << elsize_shift;\n-  const address adr_pows31 = StubRoutines::riscv::arrays_hashcode_powers_of_31()\n-                           + sizeof(jint);\n+  const int lmul = 4;\n+  const int max_vec_len = ints_in_vec_reg * lmul;\n+  const int MAX_VEC_MASK = ~(max_vec_len-1);\n@@ -2021,6 +2025,3 @@\n-  const int scalar_stride = 4;\n-  const Register pow31_4 = tmp1;\n-  const Register pow31_3 = tmp2;\n-  const Register pow31_2 = tmp3;\n-  const Register chunks  = tmp4;\n-  const Register chunks_end = chunks;\n+  const Register pow31_highest  = tmp1;\n+  const Register ary_end = tmp2;\n+  const Register consumed = tmp3;\n@@ -2028,1 +2029,0 @@\n-  const Register pows31  = tmp1;\n@@ -2037,3 +2037,3 @@\n-  Label DONE, TAIL, TAIL_LOOP, WIDE_TAIL, WIDE_LOOP, VEC_LOOP;\n-\n-  \/\/ result has a value initially\n+  const address adr_pows31 = StubRoutines::riscv::arrays_hashcode_powers_of_31()\n+                           + sizeof(jint);\n+  Label VEC_LOOP, DONE, SCALAR_TAIL, SCALAR_TAIL_LOOP;\n@@ -2041,1 +2041,2 @@\n-  beqz(cnt, DONE);\n+  \/\/ NB: at this point (a) 'result' already has some value,\n+  \/\/ (b) 'cnt' is not 0 or 1, see java code for details.\n@@ -2043,2 +2044,2 @@\n-  andi(chunks, cnt, ~(nof_vec_elems-1));\n-  beqz(chunks, WIDE_TAIL);\n+  andi(t1, cnt, MAX_VEC_MASK);\n+  beqz(t1, SCALAR_TAIL);\n@@ -2046,3 +2047,5 @@\n-  subw(cnt, cnt, chunks);\n-  slli(chunks_end, chunks, elsize_shift);\n-  add(chunks_end, ary, chunks_end);\n+  vsetvli(t0, x0, Assembler::e64, Assembler::m8);\n+  vmv_v_x(v0, x0);\n+  vmv_v_x(v8, x0);\n+  vmv_v_x(v16, x0);\n+  vmv_v_x(v24, x0);\n@@ -2050,12 +2053,5 @@\n-  \/\/ load pre-calculated powers of 31:\n-  \/\/   31^^MaxVectorSize             ==> scalar register\n-  \/\/   31^^(MaxVectorSize-1)...31^^0 ==> vector registers\n-  la(tmp3, ExternalAddress(adr_pows31));\n-  lw(pows31, Address(tmp3, -1 * sizeof(jint)));\n-  mv(t1, nof_vec_elems);\n-  vsetvli(t0, t1, Assembler::e32, Assembler::m4);\n-  vle32_v(v_coeffs, tmp3);\n-  \/\/ clear vector registers used in intermediate calculations\n-  vmv_v_i(v_sum, 0);\n-  vmv_v_i(v_powmax, 0);\n-  vmv_v_i(v_result, 0);\n+  \/\/ load pre-calculated data\n+  la(t1, ExternalAddress(adr_pows31));\n+  lw(pow31_highest, Address(t1, -1 * sizeof(jint)));\n+  vsetvli(x0, x0, Assembler::e32, Assembler::m4);\n+  vle32_v(v_coeffs, t1); \/\/ 31^^(MaxVectorSize-1)...31^^0\n@@ -2063,1 +2059,0 @@\n-  vmv_s_x(v_powmax, pows31);\n@@ -2065,1 +2060,3 @@\n-  vmv_s_x(v_zred, x0);\n+  vmv_s_x(v_powmax, pow31_highest);\n+\n+  vsetvli(consumed, cnt, Assembler::e32, Assembler::m4);\n@@ -2073,3 +2070,5 @@\n-  addi(ary, ary, vec_step_bytes);\n-  bne(ary, chunks_end, VEC_LOOP);\n-  \/\/ finally remember calculated result value in scalar register\n+  shadd(ary, consumed, ary, t0, elsize_shift);\n+  subw(cnt, cnt, consumed);\n+  andi(t1, cnt, MAX_VEC_MASK);\n+  bne(t1, x0, VEC_LOOP);\n+\n@@ -2079,10 +2078,4 @@\n-  bind(WIDE_TAIL);\n-  andi(chunks, cnt, ~(scalar_stride-1));\n-  beqz(chunks, TAIL);\n-\n-  mv(pow31_4, 923521);           \/\/ [31^^4]\n-  mv(pow31_3,  29791);           \/\/ [31^^3]\n-  mv(pow31_2,    961);           \/\/ [31^^2]\n-\n-  shadd(chunks_end, chunks, ary, chunks, elsize_shift);\n-  andi(cnt, cnt, scalar_stride-1);      \/\/ don't forget about tail!\n+  mv(t1, max_vec_len - 1);\n+  subw(t1, t1, cnt);\n+  vslidedown_vx(v_coeffs, v_coeffs, t1);\n+  vmv_x_s(pow31_highest, v_coeffs);\n@@ -2090,7 +2083,6 @@\n-  bind(WIDE_LOOP);\n-  mulw(result, result, pow31_4); \/\/ 31^^4 * h\n-  arrays_hashcode_elload(t0,   Address(ary, 0 * elsize_bytes), eltype);\n-  arrays_hashcode_elload(t1,   Address(ary, 1 * elsize_bytes), eltype);\n-  arrays_hashcode_elload(tmp5, Address(ary, 2 * elsize_bytes), eltype);\n-  arrays_hashcode_elload(tmp6, Address(ary, 3 * elsize_bytes), eltype);\n-  mulw(t0, t0, pow31_3);         \/\/ 31^^3 * ary[i+0]\n+  mulw(result, result, pow31_highest);\n+  vslidedown_vi(v_coeffs, v_coeffs, 1);\n+  arrays_hashcode_vec_elload(v_src, v_tmp, ary, eltype);\n+  vmul_vv(v_src, v_src, v_coeffs);\n+  vredsum_vs(v_sum, v_src, v_zred);\n+  vmv_x_s(t0, v_sum);\n@@ -2098,10 +2090,1 @@\n-  mulw(t1, t1, pow31_2);         \/\/ 31^^2 * ary[i+1]\n-  addw(result, result, t1);\n-  slli(t0, tmp5, 5);             \/\/ optimize 31^^1 * ary[i+2]\n-  subw(tmp5, t0, tmp5);          \/\/ with ary[i+2]<<5 - ary[i+2]\n-  addw(result, result, tmp5);\n-  addw(result, result, tmp6);    \/\/ 31^^4 * h + 31^^3 * ary[i+0] + 31^^2 * ary[i+1]\n-                                 \/\/           + 31^^1 * ary[i+2] + 31^^0 * ary[i+3]\n-  addi(ary, ary, elsize_bytes * scalar_stride);\n-  bne(ary, chunks_end, WIDE_LOOP);\n-  beqz(cnt, DONE);\n+  j(DONE);\n@@ -2109,2 +2092,2 @@\n-  bind(TAIL);\n-  shadd(chunks_end, cnt, ary, chunks, elsize_shift);\n+  bind(SCALAR_TAIL);\n+  shadd(ary_end, cnt, ary, t0, elsize_shift);\n@@ -2112,1 +2095,1 @@\n-  bind(TAIL_LOOP);\n+  bind(SCALAR_TAIL_LOOP);\n@@ -2118,1 +2101,1 @@\n-  bne(ary, chunks_end, TAIL_LOOP);\n+  bne(ary, ary_end, SCALAR_TAIL_LOOP);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":53,"deletions":70,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -101,3 +101,1 @@\n-                         Register tmp1, Register tmp2,\n-                         Register tmp3, Register tmp4,\n-                         Register tmp5, Register tmp6,\n+                         Register tmp1, Register tmp2, Register tmp3,\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3966,1 +3966,1 @@\n-                          iRegLNoSp tmp4, iRegLNoSp tmp5, iRegLNoSp tmp6, rFlagsReg cr)\n+                          rFlagsReg cr)\n@@ -3974,2 +3974,1 @@\n-         TEMP v28, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6,\n-         KILL cr);\n+         TEMP v28, TEMP tmp1, TEMP tmp2, TEMP tmp3, KILL cr);\n@@ -3981,1 +3980,0 @@\n-                         $tmp4$$Register, $tmp5$$Register, $tmp6$$Register,\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -6462,1 +6462,1 @@\n-    const int num_8b_elems_in_vec = MaxVectorSize;\n+    const int num_8bit_elems_in_vec_reg = MaxVectorSize;\n@@ -6466,1 +6466,1 @@\n-    for (int i = num_8b_elems_in_vec; i >= 0; i--) {\n+    for (int i = num_8bit_elems_in_vec_reg; i >= 0; i--) {\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}