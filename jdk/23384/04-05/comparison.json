{"files":[{"patch":"@@ -3051,1 +3051,1 @@\n-        protected final void printValueWidth1NotNegative(StringBuilder buf, int value) {\n+        protected void printValueWidth1NotNegative(StringBuilder buf, int value) {\n@@ -3059,1 +3059,1 @@\n-        protected final void printValueFixedWidth2NotNegative(StringBuilder buf, int value) {\n+        protected void printValueFixedWidth2NotNegative(StringBuilder buf, int value) {\n@@ -3063,1 +3063,1 @@\n-        protected final void printValueFixWidth3NotNegative(StringBuilder buf, int value) {\n+        protected void printValueFixWidth3NotNegative(StringBuilder buf, int value) {\n@@ -3073,1 +3073,1 @@\n-        protected final void printValueFixWidth4NotNegative(StringBuilder buf, int value) {\n+        protected void printValueFixWidth4NotNegative(StringBuilder buf, int value) {\n@@ -3098,8 +3098,0 @@\n-        protected final void printNanoFixWidth3(StringBuilder buf, int value) {\n-            int nano3 = value \/ 1_000_000;\n-            if (nano3 < 100) {\n-                buf.repeat('0', nano3 < 10 ? 2 : 1);\n-            }\n-            buf.append(nano3);\n-        }\n-\n@@ -3741,0 +3733,22 @@\n+        protected void printValueWidth1NotNegative(StringBuilder buf, int value) {\n+            buf.append(value \/ 100_000_000);\n+        }\n+\n+        protected void printValueFixedWidth2NotNegative(StringBuilder buf, int value) {\n+            JLA.appendPair(buf, value \/ 10_000_000);\n+        }\n+\n+        protected void printValueFixWidth3NotNegative(StringBuilder buf, int value) {\n+            value \/= 1000_000;\n+            if (value < 100) {\n+                buf.repeat('0', value < 10 ? 2 : 1);\n+            }\n+            buf.append(value);\n+        }\n+\n+        protected void printValueFixWidth4NotNegative(StringBuilder buf, int value) {\n+            value \/= 100_000;\n+            JLA.appendPair(buf, value \/ 100);\n+            JLA.appendPair(buf, value % 100);\n+        }\n+\n@@ -6414,1 +6428,1 @@\n-                 *      case NANO_OF_SECOND   -> printNanoFixWidth3(buf, temporal.getNanoOfSecond()); \/\/\n+                 *      case NANO_OF_SECOND   -> printValueFixWidth3NotNegative(buf, temporal.getNanoOfSecond());\n@@ -6486,2 +6500,0 @@\n-                            } else if (pp.field == ChronoField.NANO_OF_SECOND) {\n-                                method = \"printNanoFixWidth3\";\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":27,"deletions":15,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -909,0 +909,106 @@\n+    @Test\n+    public void test_out_twice_1() {\n+        int[] powers = new int[] {\n+                1000000000,\n+                100000000,\n+                10000000,\n+                1000000,\n+                100000,\n+                10000,\n+                1000,\n+                100,\n+                10,\n+                1,\n+        };\n+        int patternCount = 10;\n+        String[] dateTimePatterns = new String[patternCount];\n+        String[] timePatterns = new String[patternCount];\n+        for (int i = 0; i < patternCount; i++) {\n+            String nano = i == 0 ? \"\" : \".\" + \"S\".repeat(i);\n+            String dateTimePattern = \"yyyy-MM-dd HH:mm:ss\" + nano;\n+            dateTimePatterns[i] = dateTimePattern + \" \" + dateTimePattern;\n+\n+            String timePattern = \"HH:mm:ss\" + nano;\n+            timePatterns[i] = timePattern + \" \" + timePattern;\n+        }\n+        DateTimeFormatter[] dateTimeFormatters = new DateTimeFormatter[patternCount];\n+        DateTimeFormatter[] timeFormatters = new DateTimeFormatter[patternCount];\n+        for (int i = 0; i < patternCount; i++) {\n+            dateTimeFormatters[i] = DateTimeFormatter.ofPattern(dateTimePatterns[i], Locale.US);\n+            timeFormatters[i] = DateTimeFormatter.ofPattern(timePatterns[i], Locale.US);\n+        }\n+        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd yyyy-MM-dd\", Locale.US);\n+        LocalDateTime dateTime = LocalDateTime.now();\n+\n+        String dateStr = new StringBuilder().append(dateTime.getYear())\n+                .append(dateTime.getMonthValue() < 10 ? \"-0\" : \"-\").append(dateTime.getMonthValue())\n+                .append(dateTime.getDayOfMonth() < 10 ? \"-0\" : \"-\").append(dateTime.getDayOfMonth()).toString();\n+\n+        String dateExpected = dateStr + \" \" + dateStr;\n+        assertEquals(dateExpected, dateFormatter.format(dateTime));\n+        assertEquals(dateExpected, dateFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n+        assertEquals(dateExpected, dateFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n+\n+        for (int i = 0; i < patternCount; i++) {\n+            StringBuilder buf = new StringBuilder()\n+                    .append(dateTime.getHour() < 10 ? \"0\" : \"\").append(dateTime.getHour())\n+                    .append(dateTime.getMinute() < 10 ? \":0\" : \":\").append(dateTime.getMinute())\n+                    .append(dateTime.getSecond() < 10 ? \":0\" : \":\").append(dateTime.getSecond());\n+            if (i > 0) {\n+                buf.append('.');\n+                int power = powers[i];\n+                int value = dateTime.getNano() \/ power;\n+                buf.append((\"%0\" + i + \"d\").formatted(value));\n+            }\n+            String timeStr = buf.toString();\n+            String dateTimeExpected = dateStr + \" \" + timeStr + \" \" + dateStr + \" \" + timeStr;\n+            DateTimeFormatter dateTimeFormatter = dateTimeFormatters[i];\n+            assertEquals(dateTimeExpected, dateTimeFormatter.format(dateTime));\n+            assertEquals(dateTimeExpected, dateTimeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n+            assertEquals(dateTimeExpected, dateTimeFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n+\n+            String timeExpected = timeStr + \" \" + timeStr;\n+            DateTimeFormatter timeFormatter = timeFormatters[i];\n+            assertEquals(timeExpected, timeFormatter.format(dateTime));\n+            assertEquals(timeExpected, timeFormatter.format(dateTime.toLocalTime()));\n+            assertEquals(timeExpected, timeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n+            assertEquals(timeExpected, timeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC).toOffsetTime()));\n+            assertEquals(timeExpected, timeFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n+        }\n+    }\n+\n+    @Test\n+    public void test_out_twice_2() {\n+        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"yyyy-M-d yyyy-M-d\", Locale.US);\n+        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(\"H:m:s H:m:s\", Locale.US);\n+        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-M-d H:m:s yyyy-M-d H:m:s\", Locale.US);\n+\n+        LocalDateTime dateTime = LocalDateTime.now();\n+\n+        String dateStr = new StringBuilder().append(dateTime.getYear())\n+                .append('-').append(dateTime.getMonthValue())\n+                .append('-').append(dateTime.getDayOfMonth())\n+                .toString();\n+\n+        String dateExpected = dateStr + \" \" + dateStr;\n+        assertEquals(dateExpected, dateFormatter.format(dateTime));\n+        assertEquals(dateExpected, dateFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n+        assertEquals(dateExpected, dateFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n+\n+        StringBuilder buf = new StringBuilder().append(dateTime.getHour())\n+                .append(':').append(dateTime.getMinute())\n+                .append(':').append(dateTime.getSecond());\n+        String timeStr = buf.toString();\n+\n+        String dateTimeExpected = dateStr + \" \" + timeStr + \" \" + dateStr + \" \" + timeStr;\n+        assertEquals(dateTimeExpected, dateTimeFormatter.format(dateTime));\n+        assertEquals(dateTimeExpected, dateTimeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n+        assertEquals(dateTimeExpected, dateTimeFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n+\n+        String timeExpected = timeStr + \" \" + timeStr;\n+        assertEquals(timeExpected, timeFormatter.format(dateTime));\n+        assertEquals(timeExpected, timeFormatter.format(dateTime.toLocalTime()));\n+        assertEquals(timeExpected, timeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n+        assertEquals(timeExpected, timeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC).toOffsetTime()));\n+        assertEquals(timeExpected, timeFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n+    }\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/format\/TCKDateTimeFormatter.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"modified"}]}