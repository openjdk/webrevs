{"files":[{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -98,0 +99,1 @@\n+import java.time.temporal.ChronoField;\n@@ -103,0 +105,1 @@\n+import java.util.ArrayList;\n@@ -105,0 +108,1 @@\n+import java.util.List;\n@@ -910,1 +914,38 @@\n-    public void test_out_twice_1() {\n+    public void test_output_twice() {\n+        List<LocalDateTime> dateTimes = new ArrayList<>();\n+        int[] years = {\n+                -1, -10, -100, -1000, -10000, -100000, -1000000, -10000000, -100000000, -999999999,\n+                0, 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 999999999\n+        };\n+        int[] months = {1, 12};\n+        int[] days = {1, 28};\n+        int[] hours = {0, 9, 23};\n+        int[] minutes = {0, 9, 59};\n+        int[] seconds = {0, 9, 59};\n+        int[] nanos = {\n+                0, 9,\n+                10, 99,\n+                100, 999,\n+                1000, 9999,\n+                10000, 99999,\n+                100000, 999999,\n+                1000000, 9999999,\n+                10000000, 99999999,\n+                10000000, 999999999\n+        };\n+        for (int year : years) {\n+            for (int month : months) {\n+                for (int day : days) {\n+                    for (int hour : hours) {\n+                        for (int minute : minutes) {\n+                            for (int second : seconds) {\n+                                for (int nano : nanos) {\n+                                    dateTimes.add(LocalDateTime.of(year, month, day, hour, minute, second, nano));\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -941,1 +982,0 @@\n-        LocalDateTime dateTime = LocalDateTime.now();\n@@ -943,8 +983,42 @@\n-        String dateStr = new StringBuilder().append(dateTime.getYear())\n-                .append(dateTime.getMonthValue() < 10 ? \"-0\" : \"-\").append(dateTime.getMonthValue())\n-                .append(dateTime.getDayOfMonth() < 10 ? \"-0\" : \"-\").append(dateTime.getDayOfMonth()).toString();\n-\n-        String dateExpected = dateStr + \" \" + dateStr;\n-        assertEquals(dateExpected, dateFormatter.format(dateTime));\n-        assertEquals(dateExpected, dateFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n-        assertEquals(dateExpected, dateFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n+        for (LocalDateTime dateTime : dateTimes) {\n+            String dateStr = new StringBuilder()\n+                    .append(dateTime.get(ChronoField.YEAR_OF_ERA) < 10000 ? \"\" : \"+\")\n+                    .append(\"%04d\".formatted(dateTime.get(ChronoField.YEAR_OF_ERA)))\n+                    .append(dateTime.getMonthValue() < 10 ? \"-0\" : \"-\").append(dateTime.getMonthValue())\n+                    .append(dateTime.getDayOfMonth() < 10 ? \"-0\" : \"-\").append(dateTime.getDayOfMonth()).toString();\n+\n+            String dateExpected = dateStr + \" \" + dateStr;\n+            assertEquals(dateExpected, dateFormatter.format(dateTime));\n+            assertEquals(dateExpected, dateFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n+            assertEquals(dateExpected, dateFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n+\n+            for (int i = 0; i < patternCount; i++) {\n+                StringBuilder buf = new StringBuilder()\n+                        .append(dateTime.getHour() < 10 ? \"0\" : \"\").append(dateTime.getHour())\n+                        .append(dateTime.getMinute() < 10 ? \":0\" : \":\").append(dateTime.getMinute())\n+                        .append(dateTime.getSecond() < 10 ? \":0\" : \":\").append(dateTime.getSecond());\n+                if (i > 0) {\n+                    buf.append('.');\n+                    int power = powers[i];\n+                    int value = dateTime.getNano() \/ power;\n+                    buf.append((\"%0\" + i + \"d\").formatted(value));\n+                }\n+                String timeStr = buf.toString();\n+                String dateTimeExpected = dateStr + \" \" + timeStr + \" \" + dateStr + \" \" + timeStr;\n+                DateTimeFormatter dateTimeFormatter = dateTimeFormatters[i];\n+                assertEquals(dateTimeExpected, dateTimeFormatter.format(dateTime));\n+                assertEquals(dateTimeExpected, dateTimeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n+                assertEquals(dateTimeExpected, dateTimeFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n+                assertEquals(dateTimeExpected, dateTimeFormatter.withZone(ZoneOffset.UTC).format(dateTime.toInstant(ZoneOffset.UTC)));\n+\n+                String timeExpected = timeStr + \" \" + timeStr;\n+                DateTimeFormatter timeFormatter = timeFormatters[i];\n+                assertEquals(timeExpected, timeFormatter.format(dateTime));\n+                assertEquals(timeExpected, timeFormatter.format(dateTime.toLocalTime()));\n+                assertEquals(timeExpected, timeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n+                assertEquals(timeExpected, timeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC).toOffsetTime()));\n+                assertEquals(timeExpected, timeFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n+                assertEquals(timeExpected, timeFormatter.withZone(ZoneOffset.UTC).format(dateTime.toInstant(ZoneOffset.UTC)));\n+            }\n+        }\n+    }\n@@ -952,10 +1026,23 @@\n-        for (int i = 0; i < patternCount; i++) {\n-            StringBuilder buf = new StringBuilder()\n-                    .append(dateTime.getHour() < 10 ? \"0\" : \"\").append(dateTime.getHour())\n-                    .append(dateTime.getMinute() < 10 ? \":0\" : \":\").append(dateTime.getMinute())\n-                    .append(dateTime.getSecond() < 10 ? \":0\" : \":\").append(dateTime.getSecond());\n-            if (i > 0) {\n-                buf.append('.');\n-                int power = powers[i];\n-                int value = dateTime.getNano() \/ power;\n-                buf.append((\"%0\" + i + \"d\").formatted(value));\n+    @Test\n+    public void test_output() {\n+        List<LocalDateTime> dateTimes = new ArrayList<>();\n+        int[] years = {\n+                -1, -10, -100, -1000, -10000, -100000, -1000000, -10000000, -100000000, -999999999,\n+                0, 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 999999999\n+        };\n+        int[] months = {1, 12};\n+        int[] days = {1, 28};\n+        int[] hours = {0, 9, 23};\n+        int[] minutes = {0, 9, 59};\n+        int[] seconds = {0, 9, 59};\n+        for (int year : years) {\n+            for (int month : months) {\n+                for (int day : days) {\n+                    for (int hour : hours) {\n+                        for (int minute : minutes) {\n+                            for (int second : seconds) {\n+                                dateTimes.add(LocalDateTime.of(year, month, day, hour, minute, second));\n+                            }\n+                        }\n+                    }\n+                }\n@@ -963,3 +1050,22 @@\n-            String timeStr = buf.toString();\n-            String dateTimeExpected = dateStr + \" \" + timeStr + \" \" + dateStr + \" \" + timeStr;\n-            DateTimeFormatter dateTimeFormatter = dateTimeFormatters[i];\n+        }\n+\n+        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"u-M-d'T'H:m:s\", Locale.US);\n+        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"u-M-d\", Locale.US);\n+        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(\"H:m:s\", Locale.US);\n+\n+        for (LocalDateTime dateTime : dateTimes) {\n+            String dateExpected = new StringBuilder().append(dateTime.getYear())\n+                    .append('-').append(dateTime.getMonthValue())\n+                    .append('-').append(dateTime.getDayOfMonth())\n+                    .toString();\n+\n+            assertEquals(dateExpected, dateFormatter.format(dateTime));\n+            assertEquals(dateExpected, dateFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n+            assertEquals(dateExpected, dateFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n+\n+            String timeExpected = new StringBuilder().append(dateTime.getHour())\n+                    .append(':').append(dateTime.getMinute())\n+                    .append(':').append(dateTime.getSecond())\n+                    .toString();\n+\n+            String dateTimeExpected = dateExpected + \"T\" + timeExpected;\n@@ -969,1 +1075,0 @@\n-            assertEquals(dateTimeExpected, dateTimeFormatter.withZone(ZoneOffset.UTC).format(dateTime.toInstant(ZoneOffset.UTC)));\n@@ -971,2 +1076,0 @@\n-            String timeExpected = timeStr + \" \" + timeStr;\n-            DateTimeFormatter timeFormatter = timeFormatters[i];\n@@ -978,1 +1081,0 @@\n-            assertEquals(timeExpected, timeFormatter.withZone(ZoneOffset.UTC).format(dateTime.toInstant(ZoneOffset.UTC)));\n@@ -981,37 +1083,0 @@\n-\n-    @Test\n-    public void test_out_twice_2() {\n-        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"yyyy-M-d yyyy-M-d\", Locale.US);\n-        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(\"H:m:s H:m:s\", Locale.US);\n-        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-M-d H:m:s yyyy-M-d H:m:s\", Locale.US);\n-\n-        LocalDateTime dateTime = LocalDateTime.now();\n-\n-        String dateStr = new StringBuilder().append(dateTime.getYear())\n-                .append('-').append(dateTime.getMonthValue())\n-                .append('-').append(dateTime.getDayOfMonth())\n-                .toString();\n-\n-        String dateExpected = dateStr + \" \" + dateStr;\n-        assertEquals(dateExpected, dateFormatter.format(dateTime));\n-        assertEquals(dateExpected, dateFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n-        assertEquals(dateExpected, dateFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n-\n-        String timeStr = new StringBuilder()\n-                .append(dateTime.getHour())\n-                .append(':').append(dateTime.getMinute())\n-                .append(':').append(dateTime.getSecond())\n-                .toString();\n-\n-        String dateTimeExpected = dateStr + \" \" + timeStr + \" \" + dateStr + \" \" + timeStr;\n-        assertEquals(dateTimeExpected, dateTimeFormatter.format(dateTime));\n-        assertEquals(dateTimeExpected, dateTimeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n-        assertEquals(dateTimeExpected, dateTimeFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n-\n-        String timeExpected = timeStr + \" \" + timeStr;\n-        assertEquals(timeExpected, timeFormatter.format(dateTime));\n-        assertEquals(timeExpected, timeFormatter.format(dateTime.toLocalTime()));\n-        assertEquals(timeExpected, timeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC)));\n-        assertEquals(timeExpected, timeFormatter.format(OffsetDateTime.of(dateTime, ZoneOffset.UTC).toOffsetTime()));\n-        assertEquals(timeExpected, timeFormatter.format(ZonedDateTime.of(dateTime, ZoneOffset.UTC)));\n-    }\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/format\/TCKDateTimeFormatter.java","additions":130,"deletions":65,"binary":false,"changes":195,"status":"modified"}]}