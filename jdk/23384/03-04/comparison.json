{"files":[{"patch":"@@ -104,0 +104,2 @@\n+import java.time.OffsetDateTime;\n+import java.time.OffsetTime;\n@@ -106,0 +108,1 @@\n+import java.time.ZonedDateTime;\n@@ -6025,1 +6028,1 @@\n-    private static final class PrinterParserFactory {\n+    static final class PrinterParserFactory {\n@@ -6049,1 +6052,2 @@\n-                CD_TemporalQuery               = ClassDesc.ofDescriptor(\"Ljava\/time\/temporal\/TemporalQuery;\");\n+                CD_TemporalQuery               = ClassDesc.ofDescriptor(\"Ljava\/time\/temporal\/TemporalQuery;\"),\n+                CD_TemporalAccessorWrapper     = ClassDesc.ofDescriptor(\"Ljava\/time\/format\/DateTimeFormatterBuilder$PrinterParserFactory$TemporalAccessorWrapper;\");\n@@ -6051,30 +6055,31 @@\n-                MTD_StringBuilder_char        = MethodTypeDesc.of(CD_StringBuilder, CD_char),\n-                MTD_void_int                  = MethodTypeDesc.of(CD_void, CD_int),\n-                MTD_boolean                   = MethodTypeDesc.of(CD_boolean),\n-                MTD_char                      = MethodTypeDesc.of(CD_char),\n-                MTD_int                       = MethodTypeDesc.of(CD_int),\n-                MTD_int_int                   = MethodTypeDesc.of(CD_int, CD_int),\n-                MTD_int_long                  = MethodTypeDesc.of(CD_int, CD_long),\n-                MTD_long                      = MethodTypeDesc.of(CD_long),\n-                MTD_DecimalStyle              = MethodTypeDesc.of(CD_DecimalStyle),\n-                MTD_int_TemporalField         = MethodTypeDesc.of(CD_int, CD_TemporalField),\n-                MTD_Long_TemporalField        = MethodTypeDesc.of(CD_Long, CD_TemporalField),\n-                MTD_long_TemporalField        = MethodTypeDesc.of(CD_long, CD_TemporalField),\n-                MTD_boolean_TemporalField     = MethodTypeDesc.of(CD_boolean, CD_TemporalField),\n-                MTD_TemporalAccessor          = MethodTypeDesc.of(CD_TemporalAccessor),\n-                MTD_OBJECT_TemporalAccessor   = MethodTypeDesc.of(CD_Object, CD_TemporalAccessor),\n-                MTD_long_CharSequence_int     = MethodTypeDesc.of(CD_long, CD_CharSequence, CD_int),\n-                MTD_int_CharSequence_long     = MethodTypeDesc.of(CD_int, CD_CharSequence, CD_long),\n-                MTD_int_CharSequence_int_char = MethodTypeDesc.of(CD_int, CD_CharSequence, CD_int, CD_char),\n-                MTD_constructor               = MethodTypeDesc.of(CD_void, CD_DateTimePrinterParser_array, CD_boolean),\n-                MTD_format                    = MethodTypeDesc.of(CD_boolean, CD_DateTimePrintContext, CD_StringBuilder),\n-                MTD_formatValue_int           = MethodTypeDesc.of(CD_void, CD_StringBuilder, CD_int),\n-                MTD_formatValue_long          = MethodTypeDesc.of(CD_void, CD_StringBuilder, CD_long),\n-                MTD_parse                     = MethodTypeDesc.of(CD_Object, CD_CharSequence, CD_DateTimeFormatter, CD_TemporalQuery),\n-                MTD_parseValue                = MethodTypeDesc.of(CD_int, CD_DateTimeParseContext, CD_CharSequence, CD_int),\n-                MTD_LocalDateTime_Of          = MethodTypeDesc.of(CD_LocalDateTime, CD_int, CD_int, CD_int, CD_int, CD_int, CD_int, CD_int),\n-                MTD_OffsetDateTime_Of         = MethodTypeDesc.of(CD_OffsetDateTime, CD_int, CD_int, CD_int, CD_int, CD_int, CD_int, CD_int, CD_ZoneOffset),\n-                MTD_ZoneOffset_ofTotalSeconds = MethodTypeDesc.of(CD_ZoneOffset, CD_int),\n-                MTD_LocalDate_Of              = MethodTypeDesc.of(CD_LocalDate, CD_int, CD_int, CD_int),\n-                MTD_LocalTime_Of              = MethodTypeDesc.of(CD_LocalTime, CD_int, CD_int, CD_int, CD_int),\n-                MTD_OffsetTime_Of             = MethodTypeDesc.of(CD_OffsetTime, CD_int, CD_int, CD_int, CD_int, CD_ZoneOffset);\n+                MTD_StringBuilder_char         = MethodTypeDesc.of(CD_StringBuilder, CD_char),\n+                MTD_void_int                   = MethodTypeDesc.of(CD_void, CD_int),\n+                MTD_boolean                    = MethodTypeDesc.of(CD_boolean),\n+                MTD_char                       = MethodTypeDesc.of(CD_char),\n+                MTD_int                        = MethodTypeDesc.of(CD_int),\n+                MTD_int_int                    = MethodTypeDesc.of(CD_int, CD_int),\n+                MTD_int_long                   = MethodTypeDesc.of(CD_int, CD_long),\n+                MTD_long                       = MethodTypeDesc.of(CD_long),\n+                MTD_DecimalStyle               = MethodTypeDesc.of(CD_DecimalStyle),\n+                MTD_int_TemporalField          = MethodTypeDesc.of(CD_int, CD_TemporalField),\n+                MTD_Long_TemporalField         = MethodTypeDesc.of(CD_Long, CD_TemporalField),\n+                MTD_long_TemporalField         = MethodTypeDesc.of(CD_long, CD_TemporalField),\n+                MTD_boolean_TemporalField      = MethodTypeDesc.of(CD_boolean, CD_TemporalField),\n+                MTD_TemporalAccessor           = MethodTypeDesc.of(CD_TemporalAccessor),\n+                MTD_OBJECT_TemporalAccessor    = MethodTypeDesc.of(CD_Object, CD_TemporalAccessor),\n+                MTD_long_CharSequence_int      = MethodTypeDesc.of(CD_long, CD_CharSequence, CD_int),\n+                MTD_int_CharSequence_long      = MethodTypeDesc.of(CD_int, CD_CharSequence, CD_long),\n+                MTD_int_CharSequence_int_char  = MethodTypeDesc.of(CD_int, CD_CharSequence, CD_int, CD_char),\n+                MTD_constructor                = MethodTypeDesc.of(CD_void, CD_DateTimePrinterParser_array, CD_boolean),\n+                MTD_format                     = MethodTypeDesc.of(CD_boolean, CD_DateTimePrintContext, CD_StringBuilder),\n+                MTD_formatValue_int            = MethodTypeDesc.of(CD_void, CD_StringBuilder, CD_int),\n+                MTD_formatValue_long           = MethodTypeDesc.of(CD_void, CD_StringBuilder, CD_long),\n+                MTD_parse                      = MethodTypeDesc.of(CD_Object, CD_CharSequence, CD_DateTimeFormatter, CD_TemporalQuery),\n+                MTD_parseValue                 = MethodTypeDesc.of(CD_int, CD_DateTimeParseContext, CD_CharSequence, CD_int),\n+                MTD_LocalDateTime_Of           = MethodTypeDesc.of(CD_LocalDateTime, CD_int, CD_int, CD_int, CD_int, CD_int, CD_int, CD_int),\n+                MTD_OffsetDateTime_Of          = MethodTypeDesc.of(CD_OffsetDateTime, CD_int, CD_int, CD_int, CD_int, CD_int, CD_int, CD_int, CD_ZoneOffset),\n+                MTD_ZoneOffset_ofTotalSeconds  = MethodTypeDesc.of(CD_ZoneOffset, CD_int),\n+                MTD_LocalDate_Of               = MethodTypeDesc.of(CD_LocalDate, CD_int, CD_int, CD_int),\n+                MTD_LocalTime_Of               = MethodTypeDesc.of(CD_LocalTime, CD_int, CD_int, CD_int, CD_int),\n+                MTD_OffsetTime_Of              = MethodTypeDesc.of(CD_OffsetTime, CD_int, CD_int, CD_int, CD_int, CD_ZoneOffset),\n+                MTD_TemporalAccessorWrapper_Of = MethodTypeDesc.of(CD_TemporalAccessorWrapper, CD_TemporalAccessor);\n@@ -6279,1 +6284,2 @@\n-                    temporalSlot;\n+                    temporalSlot,\n+                    wrapperSlot;\n@@ -6288,0 +6294,1 @@\n+                    wrapperSlot  = cb.allocateLocal(TypeKind.REFERENCE);\n@@ -6321,0 +6328,7 @@\n+                    \/*\n+                     * TemporalAccessorWrapper wrapper = TemporalAccessorWrapper.wrapper(temporal);\n+                     *\/\n+                    cb.aload(temporalSlot)\n+                      .invokestatic(CD_TemporalAccessorWrapper, \"wrapper\", MTD_TemporalAccessorWrapper_Of)\n+                      .astore(wrapperSlot);\n+\n@@ -6423,14 +6437,22 @@\n-                      .aload(temporalSlot);\n-                    getfield(cb, pp, index);\n-\n-                    String formatMethod = \"format\";\n-                    MethodTypeDesc mtd = MTD_formatValue_long;\n-                    boolean formatInt = pp.field != ChronoField.NANO_OF_DAY\n-                                     && pp.field != ChronoField.MICRO_OF_DAY\n-                                     && pp.field != ChronoField.INSTANT_SECONDS;\n-                    if (formatInt) {\n-                        cb.invokeinterface(CD_TemporalAccessor, \"get\", MTD_int_TemporalField)\n-                          .invokevirtual(CD_NumberPrinterParser, formatMethod(pp), MTD_formatValue_int);\n-                    } else {\n-                        cb.invokeinterface(CD_TemporalAccessor, \"getLong\", MTD_long_TemporalField)\n-                          .invokevirtual(CD_NumberPrinterParser, \"format\", MTD_formatValue_long);\n+                      .aload(wrapperSlot);\n+                    if (pp.field instanceof ChronoField chronoField) {\n+                        String methodName = switch (chronoField) {\n+                            case YEAR,YEAR_OF_ERA -> \"getYear\";\n+                            case MONTH_OF_YEAR    -> \"getMonthValue\";\n+                            case DAY_OF_YEAR      -> \"getDayOfYear\";\n+                            case DAY_OF_MONTH     -> \"getDayOfMonth\";\n+                            case HOUR_OF_DAY      -> \"getHour\";\n+                            case MINUTE_OF_HOUR   -> \"getMinute\";\n+                            case SECOND_OF_MINUTE -> \"getSecond\";\n+                            case NANO_OF_SECOND   -> \"getNano\";\n+                            default               -> null;\n+                        };\n+                        if (methodName != null) {\n+                            cb.invokevirtual(CD_TemporalAccessorWrapper, methodName, MTD_int);\n+                            if (chronoField == ChronoField.YEAR_OF_ERA) {\n+                                \/\/ year = yearOfEra(year)\n+                                cb.invokestatic(CD_NumberPrinterParser, \"yearOfEra\", MTD_int_int);\n+                            }\n+                            cb.invokevirtual(CD_NumberPrinterParser, formatMethod(pp), MTD_formatValue_int);\n+                            return;\n+                        }\n@@ -6438,0 +6460,4 @@\n+\n+                    getfield(cb, pp, index);\n+                    cb.invokevirtual(CD_TemporalAccessorWrapper, \"getLong\", MTD_long_TemporalField)\n+                      .invokevirtual(CD_NumberPrinterParser, \"format\", MTD_formatValue_long);\n@@ -6822,0 +6848,54 @@\n+\n+        \/\/-----------------------------------------------------------------------\n+        \/\/ Wrapper for speeding up access to TemporalField\n+        \/\/-----------------------------------------------------------------------\n+        static record TemporalAccessorWrapper(TemporalAccessor ta, LocalDate localDate, LocalTime localTime) {\n+            public long getLong(TemporalField field) {\n+                return ta.getLong(field);\n+            }\n+            public int getYear() {\n+                return localDate != null ? localDate.getYear() : ta.get(ChronoField.YEAR);\n+            }\n+            public int getMonthValue() {\n+                return localDate != null ? localDate.getMonthValue() : ta.get(ChronoField.MONTH_OF_YEAR);\n+            }\n+            public int getDayOfYear() {\n+                return localDate != null ? localDate.getDayOfYear() : ta.get(ChronoField.DAY_OF_YEAR);\n+            }\n+            public int getDayOfMonth() {\n+                return localDate != null ? localDate.getDayOfMonth() : ta.get(ChronoField.DAY_OF_MONTH);\n+            }\n+            public int getHour() {\n+                return localTime != null ? localTime.getHour() : ta.get(ChronoField.HOUR_OF_DAY);\n+            }\n+            public int getMinute() {\n+                return localTime != null ? localTime.getMinute() : ta.get(ChronoField.MINUTE_OF_HOUR);\n+            }\n+            public int getSecond() {\n+                return localTime != null ? localTime.getSecond() : ta.get(ChronoField.SECOND_OF_MINUTE);\n+            }\n+            public int getNano() {\n+                return localTime != null ? localTime.getNano() : ta.get(ChronoField.NANO_OF_SECOND);\n+            }\n+            static TemporalAccessorWrapper wrapper(TemporalAccessor ta) {\n+                LocalDate localDate = null;\n+                LocalTime localTime = null;\n+                if (ta instanceof LocalDate) {\n+                    localDate = (LocalDate) ta;\n+                } else if (ta instanceof LocalTime) {\n+                    localTime = (LocalTime) ta;\n+                } else if (ta instanceof LocalDateTime localDateTime) {\n+                    localDate = localDateTime.toLocalDate();\n+                    localTime = localDateTime.toLocalTime();\n+                } else if (ta instanceof OffsetDateTime odt) {\n+                    localDate = odt.toLocalDate();\n+                    localTime = odt.toLocalTime();\n+                } else if (ta instanceof OffsetTime) {\n+                    localTime = ((OffsetTime) ta).toLocalTime();\n+                } else if (ta instanceof ZonedDateTime zdt) {\n+                    localDate = zdt.toLocalDate();\n+                    localTime = zdt.toLocalTime();\n+                }\n+                return new TemporalAccessorWrapper(ta, localDate, localTime);\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":127,"deletions":47,"binary":false,"changes":174,"status":"modified"},{"patch":"@@ -316,1 +316,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/time\/temporal\/TemporalAccessor.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}