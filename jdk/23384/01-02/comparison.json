{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -491,1 +491,1 @@\n-    public int getDayOfYear() {\n+    private int getDayOfYear() {\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/HijrahDate.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,0 @@\n- * Copyright (c) 2025, Alibaba Group Holding Limited. All Rights Reserved.\n@@ -3686,1 +3685,1 @@\n-            format(buf, context.getDecimalStyle(), context.getTemporal().getNano());\n+            format(buf, context.getDecimalStyle(), context.getTemporal().get(ChronoField.NANO_OF_SECOND));\n@@ -6424,0 +6423,2 @@\n+                    getfield(cb, pp, index);\n+                    cb.invokeinterface(CD_TemporalAccessor, \"getLong\", MTD_long_TemporalField);\n@@ -6425,0 +6426,2 @@\n+                    String formatMethod = \"format\";\n+                    MethodTypeDesc mtd = MTD_formatValue_long;\n@@ -6426,10 +6429,11 @@\n-                        String methodName = switch (chronoField) {\n-                            case YEAR,YEAR_OF_ERA -> \"getYear\";\n-                            case MONTH_OF_YEAR    -> \"getMonthValue\";\n-                            case DAY_OF_YEAR      -> \"getDayOfYear\";\n-                            case DAY_OF_MONTH     -> \"getDayOfMonth\";\n-                            case HOUR_OF_DAY      -> \"getHour\";\n-                            case MINUTE_OF_HOUR   -> \"getMinute\";\n-                            case SECOND_OF_MINUTE -> \"getSecond\";\n-                            case NANO_OF_SECOND   -> \"getNano\";\n-                            default               -> null;\n+                        boolean formatInt = switch (chronoField) {\n+                            case YEAR,\n+                                 YEAR_OF_ERA,\n+                                 MONTH_OF_YEAR,\n+                                 DAY_OF_YEAR,\n+                                 DAY_OF_MONTH,\n+                                 HOUR_OF_DAY,\n+                                 MINUTE_OF_HOUR,\n+                                 SECOND_OF_MINUTE,\n+                                 NANO_OF_SECOND -> true;\n+                            default             -> false;\n@@ -6437,8 +6441,4 @@\n-                        if (methodName != null) {\n-                            cb.invokeinterface(CD_TemporalAccessor, methodName, MTD_int);\n-                            if (chronoField == ChronoField.YEAR_OF_ERA) {\n-                                \/\/ year = yearOfEra(year)\n-                                cb.invokestatic(CD_NumberPrinterParser, \"yearOfEra\", MTD_int_int);\n-                            }\n-                            cb.invokevirtual(CD_NumberPrinterParser, formatMethod(pp), MTD_formatValue_int);\n-                            return;\n+                        if (formatInt) {\n+                            cb.l2i();\n+                            formatMethod = formatMethod(pp);\n+                            mtd = MTD_formatValue_int;\n@@ -6447,4 +6447,1 @@\n-\n-                    getfield(cb, pp, index);\n-                    cb.invokeinterface(CD_TemporalAccessor, \"getLong\", MTD_long_TemporalField)\n-                      .invokevirtual(CD_NumberPrinterParser, \"format\", MTD_formatValue_long);\n+                    cb.invokevirtual(CD_NumberPrinterParser, formatMethod, mtd);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":21,"deletions":24,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -317,81 +317,0 @@\n-    \/**\n-     * Gets the year field.\n-     * <p>\n-     * This method returns the primitive {@code int} value for the year.\n-     * <p>\n-     * The year returned by this method is proleptic as per {@code get(YEAR)}.\n-     * To obtain the year-of-era, use {@code get(YEAR_OF_ERA)}.\n-     *\n-     * @return the year, from MIN_YEAR to MAX_YEAR\n-     *\/\n-    default int getYear() {\n-        return get(ChronoField.YEAR);\n-    }\n-\n-    \/**\n-     * Gets the month-of-year field using the {@code Month} enum.\n-     *\n-     * @return the month-of-year, not null\n-     * @see #getMonthValue()\n-     *\/\n-    default int getMonthValue() {\n-        return get(ChronoField.MONTH_OF_YEAR);\n-    }\n-\n-    \/**\n-     * Gets the day-of-year field.\n-     * <p>\n-     * This method returns the primitive {@code int} value for the day-of-year.\n-     *\n-     * @return the day-of-year, from 1 to 365, or 366 in a leap year\n-     *\/\n-    default int getDayOfYear() {\n-        return get(ChronoField.DAY_OF_YEAR);\n-    }\n-\n-    \/**\n-     * Gets the day-of-month field.\n-     * <p>\n-     * This method returns the primitive {@code int} value for the day-of-month.\n-     *\n-     * @return the day-of-month, from 1 to 31\n-     *\/\n-    default int getDayOfMonth() {\n-        return get(ChronoField.DAY_OF_MONTH);\n-    }\n-\n-    \/**\n-     * Gets the hour-of-day field.\n-     *\n-     * @return the hour-of-day, from 0 to 23\n-     *\/\n-    default int getHour() {\n-        return get(ChronoField.HOUR_OF_DAY);\n-    }\n-\n-    \/**\n-     * Gets the minute-of-hour field.\n-     *\n-     * @return the minute-of-hour, from 0 to 59\n-     *\/\n-    default int getMinute() {\n-        return get(ChronoField.MINUTE_OF_HOUR);\n-    }\n-\n-    \/**\n-     * Gets the second-of-minute field.\n-     *\n-     * @return the second-of-minute, from 0 to 59\n-     *\/\n-    default int getSecond() {\n-        return get(ChronoField.SECOND_OF_MINUTE);\n-    }\n-\n-    \/**\n-     * Gets the nano-of-second field.\n-     *\n-     * @return the nano-of-second, from 0 to 999,999,999\n-     *\/\n-    default int getNano() {\n-        return get(ChronoField.NANO_OF_SECOND);\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/time\/temporal\/TemporalAccessor.java","additions":1,"deletions":82,"binary":false,"changes":83,"status":"modified"}]}