{"files":[{"patch":"@@ -1112,1 +1112,1 @@\n-      st.print_cr(PTR_FORMAT \": Heap roots segment [\" SIZE_FORMAT \"]\",\n+      st.print_cr(PTR_FORMAT \": Heap roots segment [%d]\",\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -380,1 +380,1 @@\n-    HeapShared::init_roots_segment_max_size(max_size);\n+    HeapShared::init_root_segment_max_size(max_size);\n@@ -383,1 +383,1 @@\n-      HeapShared::add_heap_roots(cast_to_oop(base_roots_oop + (c * max_size)));\n+      HeapShared::add_root_segment(cast_to_oop(base_roots_oop + (c * max_size)));\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -185,3 +185,10 @@\n-void ArchiveHeapWriter::copy_roots_to_buffer(GrowableArrayCHeap<oop, mtClassShared>* roots) {\n-  Klass* k = Universe::objectArrayKlass(); \/\/ already relocated to point to archived klass\n-  int length = roots->length();\n+objArrayOop ArchiveHeapWriter::manifest_root_segment(size_t offset, int element_count) {\n+  HeapWord* mem = offset_to_buffered_address<HeapWord *>(offset);\n+  memset(mem, 0, objArrayOopDesc::object_size(element_count));\n+\n+  \/\/ The initialization code is copied from MemAllocator::finish and ObjArrayAllocator::initialize.\n+  oopDesc::set_mark(mem, markWord::prototype());\n+  oopDesc::release_set_klass(mem, Universe::objectArrayKlass());\n+  arrayOopDesc::set_length(mem, element_count);\n+  return objArrayOop(cast_to_oop(mem));\n+}\n@@ -189,0 +196,10 @@\n+void ArchiveHeapWriter::root_segment_at_put(objArrayOop segment, int index, oop root) {\n+  \/\/ Do not use arrayOop->obj_at_put(i, o) as arrayOop is outside the real heap!\n+  if (UseCompressedOops) {\n+    *segment->obj_at_addr<narrowOop>(index) = CompressedOops::encode(root);\n+  } else {\n+    *segment->obj_at_addr<oop>(index) = root;\n+  }\n+}\n+\n+void ArchiveHeapWriter::copy_roots_to_buffer(GrowableArrayCHeap<oop, mtClassShared>* roots) {\n@@ -210,4 +227,2 @@\n-  int segment_beg = 0;\n-  while (segment_beg < length) {\n-    \/\/ Guess the size of next segment.\n-    int elem_count = MIN2(max_elem_count, length - segment_beg);\n+  for (size_t seg_idx = 0; seg_idx < heap_roots.segment_count(); seg_idx++) {\n+    int elem_count = heap_roots.length_for_segment(seg_idx);\n@@ -224,13 +239,2 @@\n-    \/\/ Fill out the segment.\n-    HeapWord* mem = offset_to_buffered_address<HeapWord *>(oop_offset);\n-    memset(mem, 0, objArrayOopDesc::object_size(elem_count));\n-    {\n-      \/\/ This is copied from MemAllocator::finish\n-      oopDesc::set_mark(mem, markWord::prototype());\n-      oopDesc::release_set_klass(mem, k);\n-    }\n-    {\n-      \/\/ This is copied from ObjArrayAllocator::initialize\n-      arrayOopDesc::set_length(mem, elem_count);\n-    }\n-    objArrayOop segment_oop = objArrayOop(cast_to_oop(mem));\n+    int seg_start = heap_roots.segment_start_elems(seg_idx);\n+    objArrayOop seg_oop = manifest_root_segment(oop_offset, elem_count);\n@@ -238,7 +242,1 @@\n-      oop val = roots->at(segment_beg + i);\n-      \/\/ Do not use arrayOop->obj_at_put(i, o) as arrayOop is outside of the real heap!\n-      if (UseCompressedOops) {\n-        *segment_oop->obj_at_addr<narrowOop>(i) = CompressedOops::encode(val);\n-      } else {\n-        *segment_oop->obj_at_addr<oop>(i) = val;\n-      }\n+      root_segment_at_put(seg_oop, i, roots->at(seg_start + i));\n@@ -246,1 +244,0 @@\n-    segment_beg += elem_count;\n@@ -248,3 +245,2 @@\n-    heap_roots.inc_segment_count();\n-    log_info(cds, heap)(\"archived obj root segment [%d] = \" SIZE_FORMAT \" bytes, klass = %p, obj = \" PTR_FORMAT,\n-                        elem_count, bytes_size, k, p2i(segment_oop));\n+    log_info(cds, heap)(\"archived obj root segment [%d] = \" SIZE_FORMAT \" bytes, obj = \" PTR_FORMAT,\n+                        elem_count, bytes_size, p2i(seg_oop));\n@@ -623,2 +619,2 @@\n-  for (size_t s = 0; s < _heap_roots.segment_count(); s++) {\n-    size_t segment_offset = _heap_roots.base_offset() + (s * MIN_GC_REGION_ALIGNMENT);\n+  for (size_t seg_idx = 0; seg_idx < _heap_roots.segment_count(); seg_idx++) {\n+    size_t seg_offset = _heap_roots.base_offset() + (seg_idx * MIN_GC_REGION_ALIGNMENT);\n@@ -626,2 +622,1 @@\n-    objArrayOop requested_obj = (objArrayOop)requested_obj_from_buffer_offset(segment_offset);\n-    address buffered_obj = offset_to_buffered_address<address>(segment_offset);\n+    objArrayOop requested_obj = (objArrayOop)requested_obj_from_buffer_offset(seg_offset);\n@@ -629,2 +624,2 @@\n-\n-    int length = (int)_heap_roots.length_for_segment(s);\n+    address buffered_obj = offset_to_buffered_address<address>(seg_offset);\n+    int length = _heap_roots.length_for_segment(seg_idx);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":32,"deletions":37,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -193,0 +193,2 @@\n+  static void root_segment_at_put(objArrayOop segment, int index, oop root);\n+  static objArrayOop manifest_root_segment(size_t offset, int element_count);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -374,1 +374,1 @@\n-  return objArrayOopDesc::object_size((int) length_for_segment(seg_idx)) * HeapWordSize;\n+  return objArrayOopDesc::object_size(length_for_segment(seg_idx)) * HeapWordSize;\n@@ -377,1 +377,1 @@\n-size_t HeapRoots::length_for_segment(size_t seg_idx) {\n+int HeapRoots::length_for_segment(size_t seg_idx) {\n@@ -380,1 +380,1 @@\n-    return _segment_max_size_elems;\n+    return (int)_segment_max_size_elems;\n@@ -383,1 +383,1 @@\n-    return (_roots_count % _segment_max_size_elems);\n+    return (int)(_roots_count % _segment_max_size_elems);\n@@ -387,0 +387,5 @@\n+int HeapRoots::segment_start_elems(size_t seg_idx) {\n+  assert(seg_idx < _segment_count, \"In range\");\n+  return (int)(seg_idx * _segment_max_size_elems);\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -267,1 +267,2 @@\n-  size_t length_for_segment(size_t seg_idx);\n+  int length_for_segment(size_t seg_idx);\n+  int segment_start_elems(size_t seg_idx);\n@@ -273,1 +274,1 @@\n-          _segment_count(0),\n+          _segment_count((root_count + segment_max_size_elems - 1) \/ segment_max_size_elems),\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -136,2 +136,2 @@\n-GrowableArrayCHeap<OopHandle, mtClassShared>* HeapShared::_roots;\n-size_t HeapShared::_roots_segment_max_size;\n+GrowableArrayCHeap<OopHandle, mtClassShared>* HeapShared::_root_segments;\n+size_t HeapShared::_root_segment_max_size;\n@@ -229,1 +229,1 @@\n-objArrayOop HeapShared::roots(int segment_idx) {\n+objArrayOop HeapShared::root_segment(int segment_idx) {\n@@ -239,1 +239,1 @@\n-  objArrayOop roots = (objArrayOop)_roots->at(segment_idx).resolve();\n+  objArrayOop roots = (objArrayOop)_root_segments->at(segment_idx).resolve();\n@@ -246,1 +246,1 @@\n-  assert(_roots_segment_max_size > 0, \"sanity\");\n+  assert(_root_segment_max_size > 0, \"sanity\");\n@@ -249,4 +249,4 @@\n-  assert(!_roots->is_empty(), \"must have loaded shared heap\");\n-  int seg_idx = index \/ (int)_roots_segment_max_size;\n-  int int_idx = index % (int)_roots_segment_max_size;\n-  oop result = roots(seg_idx)->obj_at(int_idx);\n+  assert(!_root_segments->is_empty(), \"must have loaded shared heap\");\n+  int seg_idx = index \/ (int)_root_segment_max_size;\n+  int int_idx = index % (int)_root_segment_max_size;\n+  oop result = root_segment(seg_idx)->obj_at(int_idx);\n@@ -263,3 +263,3 @@\n-    assert(_roots_segment_max_size > 0, \"sanity\");\n-    int seg_idx = index \/ (int)_roots_segment_max_size;\n-    int int_idx = index % (int)_roots_segment_max_size;\n+    assert(_root_segment_max_size > 0, \"sanity\");\n+    int seg_idx = index \/ (int)_root_segment_max_size;\n+    int int_idx = index % (int)_root_segment_max_size;\n@@ -267,1 +267,1 @@\n-      oop old = roots(seg_idx)->obj_at(int_idx);\n+      oop old = root_segment(seg_idx)->obj_at(int_idx);\n@@ -270,1 +270,1 @@\n-    roots(seg_idx)->obj_at_put(int_idx, nullptr);\n+    root_segment(seg_idx)->obj_at_put(int_idx, nullptr);\n@@ -774,2 +774,2 @@\n-void HeapShared::add_heap_roots(oop roots_oop) {\n-  if (roots_oop != nullptr) {\n+void HeapShared::add_root_segment(oop segment_oop) {\n+  if (segment_oop != nullptr) {\n@@ -777,2 +777,2 @@\n-    if (_roots == nullptr) {\n-      _roots = new GrowableArrayCHeap<OopHandle, mtClassShared>(10);\n+    if (_root_segments == nullptr) {\n+      _root_segments = new GrowableArrayCHeap<OopHandle, mtClassShared>(10);\n@@ -780,1 +780,1 @@\n-    _roots->push(OopHandle(Universe::vm_global(), roots_oop));\n+    _root_segments->push(OopHandle(Universe::vm_global(), segment_oop));\n@@ -784,2 +784,2 @@\n-void HeapShared::init_roots_segment_max_size(size_t size) {\n-  _roots_segment_max_size = size;\n+void HeapShared::init_root_segment_max_size(size_t size) {\n+  _root_segment_max_size = size;\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -293,2 +293,2 @@\n-  static GrowableArrayCHeap<OopHandle, mtClassShared>* _roots;\n-  static size_t _roots_segment_max_size;\n+  static GrowableArrayCHeap<OopHandle, mtClassShared>* _root_segments;\n+  static size_t _root_segment_max_size;\n@@ -403,1 +403,1 @@\n-  static objArrayOop roots(int segment_idx);\n+  static objArrayOop root_segment(int segment_idx);\n@@ -426,2 +426,2 @@\n-  static void add_heap_roots(oop roots_oop) NOT_CDS_JAVA_HEAP_RETURN;\n-  static void init_roots_segment_max_size(size_t size) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void add_root_segment(oop segment_oop) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void init_root_segment_max_size(size_t size) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}