{"files":[{"patch":"@@ -1107,2 +1107,2 @@\n-    HeapRoots roots = heap_info->heap_roots();\n-    assert(roots.base_offset() == 0, \"Sanity\");\n+    HeapRootSegments segments = heap_info->heap_root_segments();\n+    assert(segments.base_offset() == 0, \"Sanity\");\n@@ -1110,1 +1110,1 @@\n-    for (size_t seg_idx = 0; seg_idx < roots.segments_count(); seg_idx++) {\n+    for (size_t seg_idx = 0; seg_idx < segments.count(); seg_idx++) {\n@@ -1113,2 +1113,2 @@\n-               p2i(requested_start), roots.length_for_segment(seg_idx));\n-      start += roots.byte_size_for_segment(seg_idx);\n+                  p2i(requested_start), segments.size_in_elems(seg_idx));\n+      start += segments.size_in_bytes(seg_idx);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -378,6 +378,10 @@\n-    HeapRoots roots = FileMapInfo::current_info()->heap_roots();\n-    int max_size = roots.segment_max_size_bytes();\n-    HeapShared::init_root_segment_max_size(max_size);\n-    intptr_t base_roots_oop = bottom + roots.base_offset();\n-    for (size_t c = 0; c < roots.segments_count(); c++) {\n-      HeapShared::add_root_segment(cast_to_oop(base_roots_oop + (c * max_size)));\n+    \/\/ The heap roots are stored in one or more segments that are laid out consecutively.\n+    \/\/ The byte size of each segment (except for the last one) is max_size.\n+    HeapRootSegments segments = FileMapInfo::current_info()->heap_root_segments();\n+    int max_size = segments.max_size_in_bytes();\n+    HeapShared::init_root_segment_sizes(max_size);\n+    intptr_t first_segment_addr = bottom + segments.base_offset();\n+    for (size_t c = 0; c < segments.count(); c++) {\n+      oop segment_oop = cast_to_oop(first_segment_addr + (c * max_size));\n+      assert(segment_oop->is_objArray(), \"Must be\");\n+      HeapShared::add_root_segment((objArrayOop)segment_oop);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-HeapRoots ArchiveHeapWriter::_heap_roots;\n+HeapRootSegments ArchiveHeapWriter::_heap_root_segments;\n@@ -222,4 +222,4 @@\n-  HeapRoots heap_roots(_buffer_used,\n-                       roots->length(),\n-                       MIN_GC_REGION_ALIGNMENT,\n-                       max_elem_count);\n+  HeapRootSegments segments(_buffer_used,\n+                            roots->length(),\n+                            MIN_GC_REGION_ALIGNMENT,\n+                            max_elem_count);\n@@ -227,3 +227,3 @@\n-  for (size_t seg_idx = 0; seg_idx < heap_roots.segments_count(); seg_idx++) {\n-    int elem_count = heap_roots.length_for_segment(seg_idx);\n-    size_t bytes_size = objArrayOopDesc::object_size(elem_count) * HeapWordSize;\n+  for (size_t seg_idx = 0; seg_idx < segments.count(); seg_idx++) {\n+    int size_elems = segments.size_in_elems(seg_idx);\n+    size_t size_bytes = segments.size_in_bytes(seg_idx);\n@@ -232,1 +232,1 @@\n-    _buffer_used = oop_offset + bytes_size;\n+    _buffer_used = oop_offset + size_bytes;\n@@ -237,1 +237,1 @@\n-           heap_roots.segments_count(), oop_offset);\n+           segments.count(), oop_offset);\n@@ -239,3 +239,3 @@\n-    int seg_start = heap_roots.roots_offset_for_segment(seg_idx);\n-    objArrayOop seg_oop = manifest_root_segment(oop_offset, elem_count);\n-    for (int i = 0; i < elem_count; i++) {\n+    int seg_start = segments.roots_offset(seg_idx);\n+    objArrayOop seg_oop = manifest_root_segment(oop_offset, size_elems);\n+    for (int i = 0; i < size_elems; i++) {\n@@ -246,1 +246,1 @@\n-                        elem_count, bytes_size, p2i(seg_oop));\n+                        size_elems, size_bytes, p2i(seg_oop));\n@@ -249,1 +249,1 @@\n-  _heap_roots = heap_roots;\n+  _heap_root_segments = segments;\n@@ -480,1 +480,1 @@\n-  info->set_heap_roots(_heap_roots);\n+  info->set_heap_root_segments(_heap_root_segments);\n@@ -619,2 +619,2 @@\n-  for (size_t seg_idx = 0; seg_idx < _heap_roots.segments_count(); seg_idx++) {\n-    size_t seg_offset = _heap_roots.segment_offset(seg_idx);\n+  for (size_t seg_idx = 0; seg_idx < _heap_root_segments.count(); seg_idx++) {\n+    size_t seg_offset = _heap_root_segments.segment_offset(seg_idx);\n@@ -625,1 +625,1 @@\n-    int length = _heap_roots.length_for_segment(seg_idx);\n+    int length = _heap_root_segments.size_in_elems(seg_idx);\n@@ -629,1 +629,1 @@\n-        narrowOop* addr = (narrowOop*)(buffered_obj + requested_obj->obj_at_offset<narrowOop>(i));\n+        narrowOop* addr = (narrowOop*)(buffered_obj + objArrayOopDesc::obj_at_offset<narrowOop>(i));\n@@ -634,1 +634,1 @@\n-        oop* addr = (oop*)(buffered_obj + requested_obj->obj_at_offset<oop>(i));\n+        oop* addr = (oop*)(buffered_obj + objArrayOopDesc::obj_at_offset<oop>(i));\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  HeapRoots _heap_roots;\n+  HeapRootSegments _heap_root_segments;\n@@ -59,2 +59,2 @@\n-  void set_heap_roots(HeapRoots roots) { _heap_roots = roots; };\n-  HeapRoots heap_roots() { return _heap_roots; }\n+  void set_heap_root_segments(HeapRootSegments segments) { _heap_root_segments = segments; };\n+  HeapRootSegments heap_root_segments() { return _heap_root_segments; }\n@@ -132,2 +132,2 @@\n-  \/\/ The bottom of the copy of Heap::roots() inside this->_buffer.\n-  static HeapRoots _heap_roots;\n+  \/\/ The heap root segments information.\n+  static HeapRootSegments _heap_root_segments;\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -373,2 +373,2 @@\n-size_t HeapRoots::byte_size_for_segment(size_t seg_idx) {\n-  return objArrayOopDesc::object_size(length_for_segment(seg_idx)) * HeapWordSize;\n+size_t HeapRootSegments::size_in_bytes(size_t seg_idx) {\n+  return objArrayOopDesc::object_size(size_in_elems(seg_idx)) * HeapWordSize;\n@@ -377,4 +377,4 @@\n-int HeapRoots::length_for_segment(size_t seg_idx) {\n-  assert(seg_idx < _segments_count, \"In range\");\n-  if (seg_idx != _segments_count - 1) {\n-    return _segment_max_size_elems;\n+int HeapRootSegments::size_in_elems(size_t seg_idx) {\n+  assert(seg_idx < _count, \"In range\");\n+  if (seg_idx != _count - 1) {\n+    return _max_size_in_elems;\n@@ -383,1 +383,1 @@\n-    return _roots_count % _segment_max_size_elems;\n+    return _roots_count % _max_size_in_elems;\n@@ -387,3 +387,3 @@\n-int HeapRoots::roots_offset_for_segment(size_t seg_idx) {\n-  assert(seg_idx < _segments_count, \"In range\");\n-  return (int)(seg_idx * _segment_max_size_elems);\n+int HeapRootSegments::roots_offset(size_t seg_idx) {\n+  assert(seg_idx < _count, \"In range\");\n+  return (int)(seg_idx * _max_size_in_elems);\n@@ -392,2 +392,2 @@\n-size_t HeapRoots::segment_offset(size_t seg_idx) {\n-  return _base_offset + seg_idx * _segment_max_size_bytes;\n+size_t HeapRootSegments::segment_offset(size_t seg_idx) {\n+  return _base_offset + seg_idx * _max_size_in_bytes;\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -253,1 +253,1 @@\n-class HeapRoots {\n+class HeapRootSegments {\n@@ -255,1 +255,0 @@\n-  int _roots_count;\n@@ -257,3 +256,4 @@\n-  size_t _segments_count;\n-  int _segment_max_size_bytes;\n-  int _segment_max_size_elems;\n+  size_t _count;\n+  int _roots_count;\n+  int _max_size_in_bytes;\n+  int _max_size_in_elems;\n@@ -262,1 +262,0 @@\n-  int roots_count() { return _roots_count; }\n@@ -264,3 +263,4 @@\n-  size_t segments_count() { return _segments_count; }\n-  int segment_max_size_bytes() { return _segment_max_size_bytes; }\n-  int segment_max_size_elems() { return _segment_max_size_elems; }\n+  size_t count() { return _count; }\n+  int roots_count() { return _roots_count; }\n+  int max_size_in_bytes() { return _max_size_in_bytes; }\n+  int max_size_in_elems() { return _max_size_in_elems; }\n@@ -268,3 +268,3 @@\n-  size_t byte_size_for_segment(size_t seg_idx);\n-  int length_for_segment(size_t seg_idx);\n-  int roots_offset_for_segment(size_t seg_idx);\n+  size_t size_in_bytes(size_t seg_idx);\n+  int size_in_elems(size_t seg_idx);\n+  int roots_offset(size_t seg_idx);\n@@ -273,3 +273,2 @@\n-  HeapRoots() {}\n-  HeapRoots(size_t base_offset, int roots_count, int segment_max_size_bytes, int segment_max_size_elems) :\n-          _roots_count(roots_count),\n+  HeapRootSegments() {}\n+  HeapRootSegments(size_t base_offset, int roots_count, int max_size_in_bytes, int max_size_in_elems) :\n@@ -277,3 +276,6 @@\n-          _segments_count((roots_count + segment_max_size_elems - 1) \/ segment_max_size_elems),\n-          _segment_max_size_bytes(segment_max_size_bytes),\n-          _segment_max_size_elems(segment_max_size_elems) {}\n+          _count((roots_count + max_size_in_elems - 1) \/ max_size_in_elems),\n+          _roots_count(roots_count),\n+          _max_size_in_bytes(max_size_in_bytes),\n+          _max_size_in_elems(max_size_in_elems) {\n+    assert(is_power_of_2(_max_size_in_bytes), \"must be\");\n+  }\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -292,5 +292,5 @@\n-  st->print_cr(\"- heap_roots.roots_count:         %d\" , _heap_roots.roots_count());\n-  st->print_cr(\"- heap_roots.base_offset:         \" SIZE_FORMAT, _heap_roots.base_offset());\n-  st->print_cr(\"- heap_roots.segments_count:      \" SIZE_FORMAT, _heap_roots.segments_count());\n-  st->print_cr(\"- heap_roots.seg_max_size_elems:  %d\", _heap_roots.segment_max_size_bytes());\n-  st->print_cr(\"- heap_roots.seg_max_size_bytes:  %d\", _heap_roots.segment_max_size_elems());\n+  st->print_cr(\"- heap_root_segments.roots_count:         %d\" , _heap_root_segments.roots_count());\n+  st->print_cr(\"- heap_root_segments.base_offset:         \" SIZE_FORMAT, _heap_root_segments.base_offset());\n+  st->print_cr(\"- heap_root_segments.count:      \" SIZE_FORMAT, _heap_root_segments.count());\n+  st->print_cr(\"- heap_root_segments.seg_max_size_elems:  %d\", _heap_root_segments.max_size_in_bytes());\n+  st->print_cr(\"- heap_root_segments.seg_max_size_bytes:  %d\", _heap_root_segments.max_size_in_elems());\n@@ -1654,1 +1654,1 @@\n-  header()->set_heap_roots(heap_info->heap_roots());\n+  header()->set_heap_root_segments(heap_info->heap_root_segments());\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-  HeapRoots _heap_roots;                \/\/ Heap roots info\n+  HeapRootSegments _heap_root_segments; \/\/ Heap root segments info\n@@ -273,1 +273,1 @@\n-  HeapRoots heap_roots()                   const { return _heap_roots; }\n+  HeapRootSegments heap_root_segments()    const { return _heap_root_segments; }\n@@ -288,1 +288,1 @@\n-  void set_heap_roots(HeapRoots roots)           { _heap_roots = roots; }\n+  void set_heap_root_segments(HeapRootSegments segments) { _heap_root_segments = segments; }\n@@ -388,1 +388,1 @@\n-  HeapRoots heap_roots()       const { return header()->heap_roots(); }\n+  HeapRootSegments heap_root_segments() const { return header()->heap_root_segments(); }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -137,1 +137,2 @@\n-int HeapShared::_root_segment_max_size;\n+int HeapShared::_root_segment_max_size_shift;\n+int HeapShared::_root_segment_max_size_mask;\n@@ -239,3 +240,3 @@\n-  objArrayOop roots = (objArrayOop)_root_segments->at(segment_idx).resolve();\n-  assert(roots != nullptr, \"should have been initialized\");\n-  return roots;\n+  objArrayOop segment = (objArrayOop)_root_segments->at(segment_idx).resolve();\n+  assert(segment != nullptr, \"should have been initialized\");\n+  return segment;\n@@ -246,1 +247,2 @@\n-  assert(_root_segment_max_size > 0, \"sanity\");\n+  assert(_root_segment_max_size_shift > 0, \"sanity\");\n+  assert(_root_segment_max_size_mask  > 0, \"sanity\");\n@@ -250,2 +252,2 @@\n-  int seg_idx = index \/ (int)_root_segment_max_size;\n-  int int_idx = index % (int)_root_segment_max_size;\n+  int seg_idx = index >> _root_segment_max_size_shift;\n+  int int_idx = index &  _root_segment_max_size_mask;\n@@ -263,3 +265,4 @@\n-    assert(_root_segment_max_size > 0, \"sanity\");\n-    int seg_idx = index \/ (int)_root_segment_max_size;\n-    int int_idx = index % (int)_root_segment_max_size;\n+    assert(_root_segment_max_size_shift > 0, \"sanity\");\n+    assert(_root_segment_max_size_mask  > 0, \"sanity\");\n+    int seg_idx = index >> _root_segment_max_size_shift;\n+    int int_idx = index &  _root_segment_max_size_mask;\n@@ -774,7 +777,5 @@\n-void HeapShared::add_root_segment(oop segment_oop) {\n-  if (segment_oop != nullptr) {\n-    assert(ArchiveHeapLoader::is_in_use(), \"must be\");\n-    if (_root_segments == nullptr) {\n-      _root_segments = new GrowableArrayCHeap<OopHandle, mtClassShared>(10);\n-    }\n-    _root_segments->push(OopHandle(Universe::vm_global(), segment_oop));\n+void HeapShared::add_root_segment(objArrayOop segment_oop) {\n+  assert(segment_oop != nullptr, \"must be\");\n+  assert(ArchiveHeapLoader::is_in_use(), \"must be\");\n+  if (_root_segments == nullptr) {\n+    _root_segments = new GrowableArrayCHeap<OopHandle, mtClassShared>(10);\n@@ -782,0 +783,1 @@\n+  _root_segments->push(OopHandle(Universe::vm_global(), segment_oop));\n@@ -784,2 +786,4 @@\n-void HeapShared::init_root_segment_max_size(int size) {\n-  _root_segment_max_size = size;\n+void HeapShared::init_root_segment_sizes(int max_size) {\n+  assert(is_power_of_2(max_size), \"must be\");\n+  _root_segment_max_size_shift = log2i_exact(max_size);\n+  _root_segment_max_size_mask = max_size - 1;\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -294,1 +294,2 @@\n-  static int _root_segment_max_size;\n+  static int _root_segment_max_size_shift;\n+  static int _root_segment_max_size_mask;\n@@ -426,2 +427,2 @@\n-  static void add_root_segment(oop segment_oop) NOT_CDS_JAVA_HEAP_RETURN;\n-  static void init_root_segment_max_size(int size) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void add_root_segment(objArrayOop segment_oop) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void init_root_segment_sizes(int max_size) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}