{"files":[{"patch":"@@ -185,1 +185,1 @@\n-objArrayOop ArchiveHeapWriter::manifest_root_segment(size_t offset, int element_count) {\n+objArrayOop ArchiveHeapWriter::allocate_root_segment(size_t offset, int element_count) {\n@@ -239,2 +239,2 @@\n-    int seg_start = segments.roots_offset(seg_idx);\n-    objArrayOop seg_oop = manifest_root_segment(oop_offset, size_elems);\n+    int root_index = 0;\n+    objArrayOop seg_oop = allocate_root_segment(oop_offset, size_elems);\n@@ -242,1 +242,1 @@\n-      root_segment_at_put(seg_oop, i, roots->at(seg_start + i));\n+      root_segment_at_put(seg_oop, i, roots->at(root_index++));\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-  static objArrayOop manifest_root_segment(size_t offset, int element_count);\n+  static objArrayOop allocate_root_segment(size_t offset, int element_count);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -387,5 +387,0 @@\n-int HeapRootSegments::roots_offset(size_t seg_idx) {\n-  assert(seg_idx < _count, \"In range\");\n-  return (int)(seg_idx * _max_size_in_elems);\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -270,1 +270,0 @@\n-  int roots_offset(size_t seg_idx);\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -292,5 +292,5 @@\n-  st->print_cr(\"- heap_root_segments.roots_count:         %d\" , _heap_root_segments.roots_count());\n-  st->print_cr(\"- heap_root_segments.base_offset:         \" SIZE_FORMAT, _heap_root_segments.base_offset());\n-  st->print_cr(\"- heap_root_segments.count:      \" SIZE_FORMAT, _heap_root_segments.count());\n-  st->print_cr(\"- heap_root_segments.seg_max_size_elems:  %d\", _heap_root_segments.max_size_in_bytes());\n-  st->print_cr(\"- heap_root_segments.seg_max_size_bytes:  %d\", _heap_root_segments.max_size_in_elems());\n+  st->print_cr(\"- heap_root_segments.roots_count: %d\" , _heap_root_segments.roots_count());\n+  st->print_cr(\"- heap_root_segments.base_offset: \" SIZE_FORMAT, _heap_root_segments.base_offset());\n+  st->print_cr(\"- heap_root_segments.count:       \" SIZE_FORMAT, _heap_root_segments.count());\n+  st->print_cr(\"- heap_root_segments.max_size_elems: %d\", _heap_root_segments.max_size_in_bytes());\n+  st->print_cr(\"- heap_root_segments.max_size_bytes: %d\", _heap_root_segments.max_size_in_elems());\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -183,0 +183,7 @@\n+  FileMapHeader() : CDSFileMapHeaderBase() {\n+    \/\/ Make sure the entire header is deterministically initialized,\n+    \/\/ otherwise header CRC would be different due to garbage in layout gaps.\n+    \/\/ TODO: This is actually JDK-8339830, remove after testing.\n+    memset(this, 0, sizeof(FileMapHeader));\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}