{"files":[{"patch":"@@ -1110,1 +1110,1 @@\n-    for (size_t seg_idx = 0; seg_idx < roots.segment_count(); seg_idx++) {\n+    for (size_t seg_idx = 0; seg_idx < roots.segments_count(); seg_idx++) {\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -379,1 +379,1 @@\n-    size_t max_size = roots.segment_max_size_bytes();\n+    int max_size = roots.segment_max_size_bytes();\n@@ -382,1 +382,1 @@\n-    for (size_t c = 0; c < roots.segment_count(); c++) {\n+    for (size_t c = 0; c < roots.segments_count(); c++) {\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-  for (size_t seg_idx = 0; seg_idx < heap_roots.segment_count(); seg_idx++) {\n+  for (size_t seg_idx = 0; seg_idx < heap_roots.segments_count(); seg_idx++) {\n@@ -237,1 +237,1 @@\n-           heap_roots.segment_count(), oop_offset);\n+           heap_roots.segments_count(), oop_offset);\n@@ -239,1 +239,1 @@\n-    int seg_start = heap_roots.segment_start_elems(seg_idx);\n+    int seg_start = heap_roots.roots_offset_for_segment(seg_idx);\n@@ -619,2 +619,2 @@\n-  for (size_t seg_idx = 0; seg_idx < _heap_roots.segment_count(); seg_idx++) {\n-    size_t seg_offset = _heap_roots.base_offset() + (seg_idx * MIN_GC_REGION_ALIGNMENT);\n+  for (size_t seg_idx = 0; seg_idx < _heap_roots.segments_count(); seg_idx++) {\n+    size_t seg_offset = _heap_roots.segment_offset(seg_idx);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -117,1 +117,2 @@\n-  static constexpr int MIN_GC_REGION_ALIGNMENT = 256 * K; \/\/ FIXME: Testing\n+  \/\/ (TODO: Perhaps change to 256K to be compatible with Shenandoah)\n+  static constexpr int MIN_GC_REGION_ALIGNMENT = 1 * M;\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -378,3 +378,3 @@\n-  assert(seg_idx < _segment_count, \"In range\");\n-  if (seg_idx != _segment_count - 1) {\n-    return (int)_segment_max_size_elems;\n+  assert(seg_idx < _segments_count, \"In range\");\n+  if (seg_idx != _segments_count - 1) {\n+    return _segment_max_size_elems;\n@@ -383,1 +383,1 @@\n-    return (int)(_roots_count % _segment_max_size_elems);\n+    return _roots_count % _segment_max_size_elems;\n@@ -387,2 +387,2 @@\n-int HeapRoots::segment_start_elems(size_t seg_idx) {\n-  assert(seg_idx < _segment_count, \"In range\");\n+int HeapRoots::roots_offset_for_segment(size_t seg_idx) {\n+  assert(seg_idx < _segments_count, \"In range\");\n@@ -392,0 +392,4 @@\n+size_t HeapRoots::segment_offset(size_t seg_idx) {\n+  return _base_offset + seg_idx * _segment_max_size_bytes;\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -255,0 +255,1 @@\n+  int _roots_count;\n@@ -256,4 +257,3 @@\n-  size_t _roots_count;\n-  size_t _segment_count;\n-  size_t _segment_max_size_bytes;\n-  size_t _segment_max_size_elems;\n+  size_t _segments_count;\n+  int _segment_max_size_bytes;\n+  int _segment_max_size_elems;\n@@ -262,1 +262,1 @@\n-  size_t segment_count() { return _segment_count; }\n+  size_t segments_count() { return _segments_count; }\n@@ -264,1 +264,1 @@\n-  size_t segment_max_size_bytes() { return _segment_max_size_bytes; }\n+  int segment_max_size_bytes() { return _segment_max_size_bytes; }\n@@ -268,1 +268,2 @@\n-  int segment_start_elems(size_t seg_idx);\n+  int roots_offset_for_segment(size_t seg_idx);\n+  size_t segment_offset(size_t seg_idx);\n@@ -271,1 +272,2 @@\n-  HeapRoots(size_t base_offset, int root_count, int segment_max_size_bytes, int segment_max_size_elems) :\n+  HeapRoots(size_t base_offset, int roots_count, int segment_max_size_bytes, int segment_max_size_elems) :\n+          _roots_count(roots_count),\n@@ -273,2 +275,1 @@\n-          _roots_count(root_count),\n-          _segment_count((root_count + segment_max_size_elems - 1) \/ segment_max_size_elems),\n+          _segments_count((roots_count + segment_max_size_elems - 1) \/ segment_max_size_elems),\n@@ -277,2 +278,0 @@\n-\n-   void inc_segment_count() { _segment_count++; }\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -288,1 +288,1 @@\n-  void set_heap_roots(HeapRoots roots)      { _heap_roots = roots; }\n+  void set_heap_roots(HeapRoots roots)           { _heap_roots = roots; }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-size_t HeapShared::_root_segment_max_size;\n+int HeapShared::_root_segment_max_size;\n@@ -784,1 +784,1 @@\n-void HeapShared::init_root_segment_max_size(size_t size) {\n+void HeapShared::init_root_segment_max_size(int size) {\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-  static size_t _root_segment_max_size;\n+  static int _root_segment_max_size;\n@@ -427,1 +427,1 @@\n-  static void init_root_segment_max_size(size_t size) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void init_root_segment_max_size(int size) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}