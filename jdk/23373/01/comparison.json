{"files":[{"patch":"@@ -32,0 +32,1 @@\n+#include \"gc\/shenandoah\/shenandoahCardTable.hpp\"\n@@ -190,0 +191,5 @@\n+  if (GCCardSizeInBytes < ShenandoahMinCardSizeInBytes) {\n+    vm_exit_during_initialization(\n+      err_msg(\"GCCardSizeInBytes ( %u ) must be >= %u\\n\", GCCardSizeInBytes, (unsigned int) ShenandoahMinCardSizeInBytes));\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+#define ShenandoahMinCardSizeInBytes 128\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardTable.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -950,5 +950,19 @@\n-  \/\/ Concurrent weak root processing\n-  ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_roots_work);\n-  ShenandoahGCWorkerPhase worker_phase(ShenandoahPhaseTimings::conc_weak_roots_work);\n-  ShenandoahConcurrentWeakRootsEvacUpdateTask task(ShenandoahPhaseTimings::conc_weak_roots_work);\n-  heap->workers()->run_task(&task);\n+  {\n+    \/\/ Concurrent weak root processing\n+    ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_roots_work);\n+    ShenandoahGCWorkerPhase worker_phase(ShenandoahPhaseTimings::conc_weak_roots_work);\n+    ShenandoahConcurrentWeakRootsEvacUpdateTask task(ShenandoahPhaseTimings::conc_weak_roots_work);\n+    heap->workers()->run_task(&task);\n+  }\n+\n+  {\n+    \/\/ It is possible for mutators executing the load reference barrier to have\n+    \/\/ loaded an oop through a weak handle that has since been nulled out by\n+    \/\/ weak root processing. Handshaking here forces them to complete the\n+    \/\/ barrier before the GC cycle continues and does something that would\n+    \/\/ change the evaluation of the barrier (for example, resetting the TAMS\n+    \/\/ on trashed regions could make an oop appear to be marked _after_ the\n+    \/\/ region has been recycled).\n+    ShenandoahTimingsTracker t(ShenandoahPhaseTimings::conc_weak_roots_rendezvous);\n+    heap->rendezvous_threads(\"Shenandoah Concurrent Weak Roots\");\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -730,1 +730,0 @@\n-\n@@ -776,0 +775,1 @@\n+  assert (num_groups <= _maximum_groups, \"Cannot have more than %zu groups\", _maximum_groups);\n@@ -787,1 +787,1 @@\n-  \/\/ The first group gets special handling because the first chunk size can be no larger than _largest_chunk_size_words\n+  \/\/ The first group gets special handling because the first chunk size can be no larger than _maximum_chunk_size_words\n@@ -791,0 +791,1 @@\n+    uint coalesced_groups = 0;\n@@ -792,0 +793,1 @@\n+      \/\/ Each iteration of this loop subsumes one original group into a new rebalanced initial group.\n@@ -796,0 +798,1 @@\n+      coalesced_groups++;\n@@ -797,0 +800,4 @@\n+    assert(effective_chunk_size * 2 == _maximum_chunk_size_words,\n+           \"We assume _first_group_chunk_size_b4_rebalance is _maximum_chunk_size_words * a power of two\");\n+    _largest_chunk_size_words = _maximum_chunk_size_words;\n+    _adjusted_num_groups = _num_groups - (coalesced_groups - 1);\n@@ -800,0 +807,2 @@\n+    _largest_chunk_size_words = current_group_span \/ num_chunks;\n+    _adjusted_num_groups = _num_groups;\n@@ -802,0 +811,1 @@\n+\n@@ -859,1 +869,0 @@\n-#endif\n@@ -862,2 +871,4 @@\n-  assert(smallest_chunk_size_words() << (_maximum_groups - 1) == _maximum_chunk_size_words,\n-         \"Maximum number of groups needs to span maximum chunk size to smallest chunk size\");\n+  assert(smallest_chunk_size_words() << (_adjusted_num_groups - 1) == _largest_chunk_size_words,\n+         \"The number of groups (%zu) needs to span smallest chunk size (%zu) to largest chunk size (%zu)\",\n+         _adjusted_num_groups, smallest_chunk_size_words(), _largest_chunk_size_words);\n+#endif\n@@ -886,1 +897,1 @@\n-  for (size_t i = 1; i < _num_groups; i++) {\n+  for (size_t i = 1; i < _adjusted_num_groups; i++) {\n@@ -896,2 +907,2 @@\n-  if (_group_entries[_num_groups-1] < _total_chunks) {\n-    assert((_total_chunks - _group_entries[_num_groups-1]) * _group_chunk_size[_num_groups-1] + previous_group_span ==\n+  if (_group_entries[_adjusted_num_groups-1] < _total_chunks) {\n+    assert((_total_chunks - _group_entries[_adjusted_num_groups-1]) * _group_chunk_size[_adjusted_num_groups-1] + previous_group_span ==\n@@ -900,2 +911,2 @@\n-    previous_group_span += (_total_chunks - _group_entries[_num_groups-1]) * _group_chunk_size[_num_groups-1];\n-    _group_entries[_num_groups-1] = _total_chunks;\n+    previous_group_span += (_total_chunks - _group_entries[_adjusted_num_groups-1]) * _group_chunk_size[_adjusted_num_groups-1];\n+    _group_entries[_adjusted_num_groups-1] = _total_chunks;\n@@ -908,1 +919,1 @@\n-  for (size_t i = _num_groups; i < _maximum_groups; i++) {\n+  for (size_t i = _adjusted_num_groups; i < _maximum_groups; i++) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":22,"deletions":11,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -199,2 +199,2 @@\n-  \/\/  CardTable::card_size = 512;\n-  \/\/  CardTable::card_size_in_words = 64;\n+  \/\/  CardTable::card_size = 512;  (default value 512, a power of 2 >= 128)\n+  \/\/  CardTable::card_size_in_words = 64; (default value 64, a power of 2 >= 16)\n@@ -204,0 +204,3 @@\n+  \/\/ See shenandoahCardTable.hpp\n+  \/\/  ShenandoahMinCardSizeInBytes 128\n+\n@@ -891,1 +894,0 @@\n-\n@@ -894,0 +896,2 @@\n+  size_t _largest_chunk_size_words;\n+\n@@ -897,2 +901,1 @@\n-      return _clusters_in_smallest_chunk * CardTable::card_size_in_words() *\n-             ShenandoahCardCluster::CardsPerCluster;\n+      return _clusters_in_smallest_chunk * CardTable::card_size_in_words() * ShenandoahCardCluster::CardsPerCluster;\n@@ -913,7 +916,17 @@\n-  \/\/ group[0] is 4 MiB chunk size (_maximum_chunk_size_words)\n-  \/\/ group[1] is 2 MiB chunk size\n-  \/\/ group[2] is 1 MiB chunk size\n-  \/\/ group[3] is 512 KiB chunk size\n-  \/\/ group[4] is 256 KiB chunk size\n-  \/\/ group[5] is 128 Kib shunk size (_smallest_chunk_size_words = 4 * 64 * 64\n-  static const size_t _maximum_groups = 6;\n+  \/\/ group[ 0] is 4 MiB chunk size (_maximum_chunk_size_words)\n+  \/\/ group[ 1] is 2 MiB chunk size\n+  \/\/ group[ 2] is 1 MiB chunk size\n+  \/\/ group[ 3] is 512 KiB chunk size\n+  \/\/ group[ 4] is 256 KiB chunk size\n+  \/\/ group[ 5] is 128 KiB chunk size\n+  \/\/ group[ 6] is  64 KiB chunk size\n+  \/\/ group[ 7] is  32 KiB chunk size\n+  \/\/ group[ 8] is  16 KiB chunk size\n+  \/\/ group[ 9] is   8 KiB chunk size\n+  \/\/ group[10] is   4 KiB chunk size\n+  \/\/   Note: 4 KiB is smallest possible chunk_size, computed from:\n+  \/\/         _clusters_in_smallest_chunk * MinimumCardSizeInWords * ShenandoahCardCluster::CardsPerCluster, which is\n+  \/\/         4 * 16 * 64 = 4096\n+\n+  \/\/ We set aside arrays to represent the maximum number of groups that may be required for any heap configuration\n+  static const size_t _maximum_groups = 11;\n@@ -926,0 +939,1 @@\n+  size_t _adjusted_num_groups;                     \/\/ Rebalancing may coalesce groups\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.hpp","additions":26,"deletions":12,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -235,0 +235,26 @@\n+\/*\n+ * @test id=generational-small-card-size\n+ * @summary Test clone barriers work correctly\n+ * @requires vm.gc.Shenandoah\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:GCCardSizeInBytes=128\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:GCCardSizeInBytes=128\n+ *                   -Xint\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:GCCardSizeInBytes=128\n+ *                   -XX:-TieredCompilation\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:GCCardSizeInBytes=128\n+ *                   -XX:TieredStopAtLevel=1\n+ *                   TestClone\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xms1g -Xmx1g\n+ *                   -XX:+UseShenandoahGC -XX:ShenandoahGCMode=generational -XX:GCCardSizeInBytes=128\n+ *                   -XX:TieredStopAtLevel=4\n+ *                   TestClone\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestClone.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}