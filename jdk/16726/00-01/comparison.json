{"files":[{"patch":"@@ -119,1 +119,1 @@\n-                String method  = null;\n+                String method = null;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-            recording.enable(EVENT_NAME);\n+            recording.enable(EVENT_NAME).withStackTrace();\n@@ -77,0 +77,1 @@\n+                Events.assertTopFrame(event, TestProcessStart.class, \"main\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/os\/TestProcessStart.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,7 +59,1 @@\n-            Thread virtualThread  = Thread.ofVirtual().start(() -> {\n-                try {\n-                    Thread.sleep(SLEEP_TIME_MS);\n-                } catch (InterruptedException ie) {\n-                    throw new RuntimeException(ie);\n-                }\n-            });\n+            Thread virtualThread = Thread.ofVirtual().start(TestThreadSleepEvent::virtualSleep);\n@@ -77,0 +71,1 @@\n+                    Events.assertTopFrame(event, TestThreadSleepEvent.class, \"main\");\n@@ -81,0 +76,1 @@\n+                    Events.assertTopFrame(event, TestThreadSleepEvent.class, \"virtualSleep\");\n@@ -87,0 +83,8 @@\n+\n+    private static void virtualSleep() {\n+        try {\n+            Thread.sleep(SLEEP_TIME_MS);\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(ie);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestThreadSleepEvent.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-            recording.enable(EventNames.SecurityProperty);\n+            recording.enable(EventNames.SecurityProperty).withStackTrace();\n@@ -81,0 +81,1 @@\n+                Events.assertTopFrame(e, TestSecurityPropertyModificationEvent.class, \"main\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/security\/TestSecurityPropertyModificationEvent.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,2 @@\n-                \"SunEC\", \"Cipher\", 1, Collections.emptyList());\n+                \"SunEC\", \"Cipher\", 1, Collections.emptyList(),\n+                javax.crypto.Cipher.class.getName(), \"getInstance\");\n@@ -57,1 +58,2 @@\n-                \"SunEC\", \"Signature\", 2, List.of(\"MessageDigest\"));\n+                \"SunEC\", \"Signature\", 2, List.of(\"MessageDigest\"),\n+                \"sun.security.jca.GetInstance\", \"getService\");\n@@ -59,1 +61,2 @@\n-                \"SunEC\", \"MessageDigest\", 1, Collections.emptyList());\n+                \"SunEC\", \"MessageDigest\", 1, Collections.emptyList(),\n+                \"sun.security.jca.GetInstance\", \"getService\");\n@@ -61,1 +64,2 @@\n-                \"SunEC\", \"KeyStore\", 1, Collections.emptyList());\n+                \"SunEC\", \"KeyStore\", 1, Collections.emptyList(),\n+                \"sun.security.jca.GetInstance\", \"getService\");\n@@ -63,1 +67,2 @@\n-                \"SunEC\", \"CertPathBuilder\", 2, List.of(\"CertificateFactory\"));\n+                \"SunEC\", \"CertPathBuilder\", 2, List.of(\"CertificateFactory\"),\n+                \"sun.security.jca.GetInstance\", \"getService\");\n@@ -68,1 +73,2 @@\n-                                int expected, List<String> other) throws Exception {\n+                                int expected, List<String> other,\n+                                String clazz, String method) throws Exception {\n@@ -73,1 +79,1 @@\n-            recording.enable(EventNames.SecurityProviderService);\n+            recording.enable(EventNames.SecurityProviderService).withStackTrace();\n@@ -80,1 +86,1 @@\n-            assertEvent(events, algType, alg, p.getName(), other);\n+            assertEvent(events, algType, alg, p.getName(), other, clazz, method);\n@@ -140,1 +146,2 @@\n-            String alg, String workingProv, List<String> other) {\n+            String alg, String workingProv, List<String> other, String clazz,\n+            String method) {\n@@ -151,0 +158,2 @@\n+            System.out.println(e);\n+            Events.assertTopFrame(e, clazz, method);\n@@ -155,1 +164,0 @@\n-\n","filename":"test\/jdk\/jdk\/jfr\/event\/security\/TestSecurityProviderServiceEvent.java","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-            recording.enable(EventNames.TLSHandshake);\n+            recording.enable(EventNames.TLSHandshake).withStackTrace();\n@@ -66,0 +66,4 @@\n+                var method = e.getStackTrace().getFrames().get(0).getMethod();\n+                if (method.getName().equals(\"recordEvent\")) {\n+                    throw new Exception(\"Didn't expected recordEvent as top frame\");\n+                }\n","filename":"test\/jdk\/jdk\/jfr\/event\/security\/TestTLSHandshakeEvent.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -368,0 +368,15 @@\n+    public static void assertTopFrame(RecordedEvent event, Class<?> expectedClass, String expectedMethodName) {\n+        assertTopFrame(event, expectedClass.getName(), expectedMethodName);\n+    }\n+\n+    public static void assertTopFrame(RecordedEvent event, String expectedClass, String expectedMethodName) {\n+        RecordedStackTrace stackTrace = event.getStackTrace();\n+        Asserts.assertNotNull(stackTrace, \"Missing stack trace\");\n+        RecordedFrame topFrame =  stackTrace.getFrames().get(0);\n+        if (isFrame(topFrame, expectedClass, expectedMethodName)) {\n+            return;\n+        }\n+        String expected = expectedClass + \"::\" + expectedMethodName;\n+        Asserts.fail(\"Expected top frame \" + expected + \". Found \" + topFrame);\n+    }\n+\n@@ -372,8 +387,2 @@\n-            if (frame.isJavaFrame()) {\n-                RecordedMethod method = frame.getMethod();\n-                RecordedClass type = method.getType();\n-                if (expectedClass.getName().equals(type.getName())) {\n-                    if (expectedMethodName.equals(method.getName())) {\n-                        return;\n-                    }\n-                }\n+            if (isFrame(frame, expectedClass.getName(), expectedMethodName)) {\n+                return;\n@@ -384,0 +393,13 @@\n+\n+    private static boolean isFrame(RecordedFrame frame, String expectedClass, String expectedMethodName) {\n+        if (frame.isJavaFrame()) {\n+            RecordedMethod method = frame.getMethod();\n+            RecordedClass type = method.getType();\n+            if (expectedClass.equals(type.getName())) {\n+                if (expectedMethodName.equals(method.getName())) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/Events.java","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"}]}