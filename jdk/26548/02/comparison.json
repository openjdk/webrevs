{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -294,2 +294,7 @@\n-        \/\/ ------------------------------\n-        \/\/ ------------------------------\n+        if (object == null) {\n+            final RuntimeException wrapped =\n+                new IllegalArgumentException(\"Object cannot be null\");\n+            throw new RuntimeOperationsException(wrapped,\n+                      \"Exception occurred trying to register the MBean\");\n+        }\n+\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/interceptor\/DefaultMBeanServerInterceptor.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,196 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8364227\n+ * @summary Test various null parameters and verify Exceptions thrown\n+ * @modules java.management.rmi\n+ * @run main ExceptionTestNulls\n+ *\/\n+\n+import java.lang.management.ManagementFactory;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.ObjectName;\n+import javax.management.InstanceAlreadyExistsException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.InvalidAttributeValueException;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServer;\n+import javax.management.MBeanServerConnection;\n+import javax.management.MBeanServerFactory;\n+import javax.management.NotCompliantMBeanException;\n+import javax.management.NotificationListener;\n+import javax.management.ReflectionException;\n+import javax.management.RuntimeOperationsException;\n+\n+public class ExceptionTestNulls {\n+\n+    public interface MyMBean {\n+    }\n+\n+    public class My implements MyMBean {\n+    }\n+\n+    private int count;\n+\n+    public static void main(String args[]) throws Exception {\n+        ExceptionTestNulls test = new ExceptionTestNulls();\n+        test.run();\n+    }\n+\n+    public ExceptionTestNulls() {\n+        count = 0; \/\/ Simple index for printing tests, for readability.\n+    }\n+\n+    public void run() {\n+\n+        try {\n+        ObjectName name = new ObjectName(\"a:b=c\");\n+        ObjectName namePattern = new ObjectName(\"*:type=Foo\");\n+        My myMy = new My();\n+            MBeanServer mbs = MBeanServerFactory.newMBeanServer();\n+\n+            try {\n+                \/\/ createMBean with null className\n+                mbs.createMBean((String) null, name, name, new Object[0], new String[0]);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+            try {\n+                \/\/ createMBean with ObjectName as a pattern\n+                mbs.createMBean(\"myMy\", namePattern, name, new Object[0], new String[0]);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+            try {\n+                \/\/ registerMBean with null Object\n+                mbs.registerMBean(null, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+            try {\n+                \/\/ registerMBean with no name available\n+                mbs.registerMBean(myMy, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+            try {\n+                \/\/ unregisterMBean with null ObjectName\n+                mbs.unregisterMBean(null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+            try {\n+                mbs.isRegistered(null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+            try {\n+                mbs.getAttribute(null, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+            try {\n+                mbs.getAttribute(name, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+           try {\n+                mbs.getAttributes(null, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+           try {\n+                mbs.getAttributes(name, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+           try {\n+                mbs.setAttribute(null, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+           try {\n+                mbs.setAttribute(name, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+           try {\n+                mbs.setAttributes(null, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+           try {\n+                mbs.setAttributes(name, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+           try {\n+                mbs.addNotificationListener(null, (NotificationListener) null, null, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+           try {\n+                mbs.registerMBean(myMy, name);\n+                mbs.addNotificationListener(null, name, null, null);\n+            } catch (RuntimeOperationsException e) {\n+                checkROEContainsIAE(e);\n+            }\n+\n+        } catch (MBeanException | MalformedObjectNameException | InstanceAlreadyExistsException\n+                 | NotCompliantMBeanException | InstanceNotFoundException | ReflectionException\n+                 | AttributeNotFoundException | InvalidAttributeValueException e) {\n+            \/\/ Should not reach here.  Known Exceptions thrown by methods above.\n+            \/\/ These would be a failure, as would other exceptions not caught (e.g. NullPointerException).\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void checkROEContainsIAE(RuntimeOperationsException e) {\n+        System.out.println(++count);\n+        System.out.println(\"Checking: \" + e);\n+        if (e.getCause() instanceof IllegalArgumentException) {\n+            System.out.println(\"Got expected cause: \" + e.getCause());\n+            System.out.println();\n+        } else {\n+            throw new RuntimeException(\"Not the expected cause: \" + e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/management\/MBeanServer\/ExceptionTestNulls.java","additions":196,"deletions":0,"binary":false,"changes":196,"status":"added"}]}