{"files":[{"patch":"@@ -221,11 +221,0 @@\n-\n-#ifdef ASSERT\n-bool oopDesc::size_might_change() {\n-  \/\/ UseParallelGC and UseG1GC can change the length field\n-  \/\/ of an \"old copy\" of an object array in the young gen so it indicates\n-  \/\/ the grey portion of an already copied array. This will cause the first\n-  \/\/ disjunct below to fail if the two comparands are computed across such\n-  \/\/ a concurrent change.\n-  return Universe::heap()->is_stw_gc_active() && is_objArray() && is_forwarded() && (UseParallelGC || UseG1GC);\n-}\n-#endif\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -322,2 +322,0 @@\n-\n-  DEBUG_ONLY(bool size_might_change();)\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-      assert(s == klass->oop_size(this) || size_might_change(), \"wrong array object size\");\n+      assert(s == klass->oop_size(this), \"wrong array object size\");\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}