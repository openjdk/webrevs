{"files":[{"patch":"@@ -40,0 +40,2 @@\n+import java.util.Set;\n+import java.util.HashSet;\n@@ -125,3 +127,17 @@\n-        ClassUnloadCommon.triggerUnloading();  \/\/ should unload these classes\n-        for (String className : classNames) {\n-          ClassUnloadCommon.failIf(wb.isClassAlive(className), \"should be unloaded\");\n+\n+        Set<String> loadedClasses = new HashSet<>(Set.of(classNames));\n+        int attempt = 0;\n+        while (!loadedClasses.isEmpty() && attempt < 20) {\n+            ClassUnloadCommon.triggerUnloading();\n+            for (String className : classNames) {\n+                if (loadedClasses.contains(className)) {\n+                    if (wb.isClassAlive(className)) {\n+                        \/\/ Parallel threads cleaning types in profiles might need more time,\n+                        \/\/ especially when TypeProfileWidth is 8 (default for UseJVMCICompiler).\n+                        Thread.sleep(100);\n+                    } else {\n+                        loadedClasses.remove(className);\n+                    }\n+                }\n+            }\n+            attempt++;\n@@ -129,0 +145,2 @@\n+        ClassUnloadCommon.failIf(!loadedClasses.isEmpty(), \"should be unloaded: \" + loadedClasses);\n+        System.err.printf(\"Classes unloaded after %d attempts%n\", attempt);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/InitExceptionUnloadTest.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"}]}