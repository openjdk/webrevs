{"files":[{"patch":"@@ -53,1 +53,1 @@\n-    final PhantomCleanableList activeList;\n+    final CleanableList activeList;\n@@ -85,1 +85,1 @@\n-        activeList = new PhantomCleanableList();\n+        activeList = new CleanableList();\n@@ -230,1 +230,1 @@\n-    static final class PhantomCleanableList {\n+    static final class CleanableList {\n@@ -243,1 +243,8 @@\n-        public PhantomCleanableList() {\n+        public CleanableList() {\n+            reset();\n+        }\n+\n+        \/**\n+         * Testing support: reset list to initial state.\n+         *\/\n+        synchronized void reset() {\n@@ -253,1 +260,2 @@\n-            return (head.next == null && head.size == 0);\n+            \/\/ Head node size is zero only when the entire list is empty.\n+            return head.size == 0;\n@@ -303,2 +311,4 @@\n-            \/\/ Remove the last element from the head.\n-            \/\/ If head node becomes empty after this, yank it.\n+            \/\/ Remove the last element from the head node.\n+            \/\/ If head node becomes empty after this, and there are\n+            \/\/ nodes that follow it, replace the head node with another\n+            \/\/ full one.\n@@ -307,1 +317,1 @@\n-            if (head.size == 0) {\n+            if (head.size == 0 && head.next != null) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/CleanerImpl.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    private final CleanerImpl.PhantomCleanableList list;\n+    private final CleanerImpl.CleanableList list;\n@@ -55,1 +55,1 @@\n-    CleanerImpl.PhantomCleanableList.Node node;\n+    CleanerImpl.CleanableList.Node node;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/PhantomCleanable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8343704\n+ * @library \/test\/lib\n+ * @compile\/module=java.base jdk\/internal\/ref\/CleanableListTestHelper.java jdk\/internal\/ref\/TestCleanable.java\n+ * @modules java.base\/jdk.internal.ref\n+ * @run testng\/othervm -ea -esa --add-exports java.base\/jdk.internal.ref=ALL-UNNAMED CleanableListTest\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.List;\n+import java.util.Random;\n+import jdk.internal.ref.CleanableListTestHelper;\n+import jdk.internal.ref.TestCleanable;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.Ignore;\n+\n+public class CleanableListTest {\n+\n+    static final int SINGLE_NODE_CAPACITY = CleanableListTestHelper.NODE_CAPACITY - 1;\n+    static final int MULTI_NODE_CAPACITY = CleanableListTestHelper.NODE_CAPACITY * 4;\n+\n+    static final int RANDOM_ITERATIONS = 10_000_000;\n+\n+    @Test\n+    public void testSingle() {\n+        CleanableListTestHelper list = new CleanableListTestHelper();\n+        Assert.assertTrue(list.isEmpty());\n+        TestCleanable tc = list.newCleanable();\n+        Assert.assertFalse(list.isEmpty());\n+        Assert.assertTrue(list.remove(tc));\n+        Assert.assertTrue(list.isEmpty());\n+        Assert.assertFalse(list.remove(tc));\n+    }\n+\n+    @Test\n+    public void testSequential_Single() {\n+        doSequential(SINGLE_NODE_CAPACITY);\n+    }\n+\n+    @Test\n+    public void testSequential_Multi() {\n+        doSequential(MULTI_NODE_CAPACITY);\n+    }\n+\n+    private void doSequential(int size) {\n+        CleanableListTestHelper list = new CleanableListTestHelper();\n+        Assert.assertTrue(list.isEmpty());\n+\n+        List<TestCleanable> tcs = new ArrayList<>();\n+        for (int c = 0; c < size; c++) {\n+            tcs.add(list.newCleanable());\n+        }\n+        Assert.assertFalse(list.isEmpty());\n+\n+        for (TestCleanable tc : tcs) {\n+            Assert.assertTrue(list.remove(tc));\n+        }\n+        Assert.assertTrue(list.isEmpty());\n+    }\n+\n+    @Test\n+    public void testRandom_Single() {\n+        doRandom(SINGLE_NODE_CAPACITY);\n+    }\n+\n+    @Test\n+    public void testRandom_Multi() {\n+        doRandom(MULTI_NODE_CAPACITY);\n+    }\n+\n+    private void doRandom(int size) {\n+        CleanableListTestHelper list = new CleanableListTestHelper();\n+        Assert.assertTrue(list.isEmpty());\n+\n+        Random r = new Random(42);\n+        BitSet bs = new BitSet(size);\n+\n+        List<TestCleanable> tcs = new ArrayList<>();\n+        for (int c = 0; c < size; c++) {\n+            tcs.add(list.newCleanable());\n+            bs.set(c, true);\n+        }\n+        Assert.assertFalse(list.isEmpty());\n+\n+        for (int t = 0; t < RANDOM_ITERATIONS; t++) {\n+            int idx = r.nextInt(size);\n+            TestCleanable tc = tcs.get(idx);\n+            if (bs.get(idx)) {\n+                Assert.assertTrue(list.remove(tc));\n+                bs.set(idx, false);\n+            } else {\n+                Assert.assertFalse(list.remove(tc));\n+                list.insert(tc);\n+                bs.set(idx, true);\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/internal\/ref\/Cleaner\/CleanableListTest.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.ref;\n+\n+import java.lang.ref.Cleaner;\n+import jdk.internal.ref.PhantomCleanable;\n+import jdk.internal.ref.CleanerImpl;\n+import jdk.internal.ref.CleanerImpl.CleanableList;\n+\n+\/**\n+ * This class provides package-private access to CleanableList internals.\n+ *\/\n+public class CleanableListTestHelper {\n+\n+    public static final int NODE_CAPACITY = CleanableList.NODE_CAPACITY;\n+\n+    final Cleaner cleaner;\n+    final CleanableList list;\n+\n+    public CleanableListTestHelper() {\n+        cleaner = Cleaner.create();\n+        list = CleanerImpl.getCleanerImpl(cleaner).activeList;\n+\n+        \/\/ List contains CleanerCleanable for Cleaner itself.\n+        \/\/ For testing empty list paths, we want to drop it.\n+        list.reset();\n+    }\n+\n+    public TestCleanable newCleanable() {\n+        return new TestCleanable(cleaner);\n+    }\n+\n+    public void insert(PhantomCleanable cl) {\n+        list.insert(cl);\n+    }\n+\n+    public boolean remove(PhantomCleanable cl) {\n+        return list.remove(cl);\n+    }\n+\n+    public boolean isEmpty() {\n+        return list.isEmpty();\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/internal\/ref\/Cleaner\/java.base\/jdk\/internal\/ref\/CleanableListTestHelper.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.ref;\n+\n+import java.lang.ref.Cleaner;\n+\n+public class TestCleanable extends PhantomCleanable<Object> {\n+    static final Object TARGET = new Object();\n+\n+    public TestCleanable(Cleaner cleaner) {\n+        super(TARGET, cleaner);\n+    }\n+\n+    @Override\n+    protected void performCleanup() {\n+        \/\/ no action\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/ref\/Cleaner\/java.base\/jdk\/internal\/ref\/TestCleanable.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}