{"files":[{"patch":"@@ -1163,16 +1163,0 @@\n-  \/\/ Helper to allow two closure to be applied when\n-  \/\/ iterating through the collection set.\n-  class G1CombinedClosure : public G1HeapRegionClosure {\n-    G1HeapRegionClosure* _closure1;\n-    G1HeapRegionClosure* _closure2;\n-  public:\n-    G1CombinedClosure(G1HeapRegionClosure* cl1, G1HeapRegionClosure* cl2) :\n-      _closure1(cl1),\n-      _closure2(cl2) { }\n-\n-    bool do_heap_region(G1HeapRegion* hr) {\n-      return _closure1->do_heap_region(hr) ||\n-             _closure2->do_heap_region(hr);\n-    }\n-  };\n-\n@@ -1279,0 +1263,1 @@\n+  G1HeapRegionClaimer _hr_claimer;\n@@ -1308,0 +1293,1 @@\n+    _hr_claimer(num_workers),\n@@ -1397,2 +1383,0 @@\n-        G1ClearBitmapClosure clear(g1h);\n-        G1CombinedClosure combined(&merge, &clear);\n@@ -1404,3 +1388,1 @@\n-        g1h->collection_set_iterate_increment_from(&combined, nullptr, worker_id);\n-        G1MergeCardSetStats stats = merge.stats();\n-\n+        g1h->collection_set_iterate_increment_from(&merge, worker_id);\n@@ -1408,1 +1390,1 @@\n-          p->record_or_add_thread_work_item(merge_remset_phase, worker_id, stats.merged(i), i);\n+          p->record_or_add_thread_work_item(merge_remset_phase, worker_id, merge.stats().merged(i), i);\n@@ -1413,0 +1395,6 @@\n+    \/\/ Preparation for evacuation failure handling.\n+    {\n+      G1ClearBitmapClosure clear(g1h);\n+      g1h->collection_set_iterate_increment_from(&clear, &_hr_claimer, worker_id);\n+    }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":10,"deletions":22,"binary":false,"changes":32,"status":"modified"}]}