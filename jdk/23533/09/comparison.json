{"files":[{"patch":"@@ -56,0 +56,47 @@\n+#include <type_traits>\n+\n+\/\/ Virtual methods are not allowed in code blobs to simplify caching compiled code.\n+\/\/ Check all \"leaf\" subclasses of CodeBlob class.\n+\n+static_assert(!std::is_polymorphic<nmethod>::value,            \"no virtual methods are allowed in nmethod\");\n+static_assert(!std::is_polymorphic<AdapterBlob>::value,        \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<VtableBlob>::value,         \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<MethodHandlesAdapterBlob>::value, \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<RuntimeStub>::value,        \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<DeoptimizationBlob>::value, \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<SafepointBlob>::value,      \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<UpcallStub>::value,         \"no virtual methods are allowed in code blobs\");\n+#ifdef COMPILER2\n+static_assert(!std::is_polymorphic<ExceptionBlob>::value,      \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<UncommonTrapBlob>::value,   \"no virtual methods are allowed in code blobs\");\n+#endif\n+\n+\/\/ Add proxy vtables.\n+\/\/ We need only few for now - they are used only from prints.\n+const nmethod::Vptr                  nmethod::_vptr;\n+const BufferBlob::Vptr               BufferBlob::_vptr;\n+const RuntimeStub::Vptr              RuntimeStub::_vptr;\n+const SingletonBlob::Vptr            SingletonBlob::_vptr;\n+const DeoptimizationBlob::Vptr       DeoptimizationBlob::_vptr;\n+const UpcallStub::Vptr               UpcallStub::_vptr;\n+\n+const CodeBlob::Vptr* CodeBlob::vptr() const {\n+  constexpr const CodeBlob::Vptr* array[(size_t)CodeBlobKind::Number_Of_Kinds] = {\n+      nullptr\/* None *\/,\n+      &nmethod::_vptr,\n+      &BufferBlob::_vptr,\n+      &AdapterBlob::_vptr,\n+      &VtableBlob::_vptr,\n+      &MethodHandlesAdapterBlob::_vptr,\n+      &RuntimeStub::_vptr,\n+      &DeoptimizationBlob::_vptr,\n+      &SafepointBlob::_vptr,\n+#ifdef COMPILER2\n+      &ExceptionBlob::_vptr,\n+      &UncommonTrapBlob::_vptr,\n+#endif\n+      &UpcallStub::_vptr\n+  };\n+\n+  return array[(size_t)_kind];\n+}\n@@ -389,1 +436,1 @@\n-: RuntimeBlob(name, CodeBlobKind::Runtime_Stub, cb, size, sizeof(RuntimeStub),\n+: RuntimeBlob(name, CodeBlobKind::RuntimeStub, cb, size, sizeof(RuntimeStub),\n@@ -485,0 +532,1 @@\n+#ifdef COMPILER2\n@@ -489,1 +537,0 @@\n-#ifdef COMPILER2\n@@ -496,1 +543,1 @@\n-: SingletonBlob(\"UncommonTrapBlob\", CodeBlobKind::Uncommon_Trap, cb,\n+: SingletonBlob(\"UncommonTrapBlob\", CodeBlobKind::UncommonTrap, cb,\n@@ -519,4 +566,0 @@\n-\n-#endif \/\/ COMPILER2\n-\n-\n@@ -526,1 +569,0 @@\n-#ifdef COMPILER2\n@@ -556,1 +598,0 @@\n-\n@@ -559,1 +600,0 @@\n-\n@@ -647,0 +687,6 @@\n+void CodeBlob::verify() {\n+  if (is_nmethod()) {\n+    as_nmethod()->verify();\n+  }\n+}\n+\n@@ -648,2 +694,1 @@\n-  st->print_cr(\"[CodeBlob (\" INTPTR_FORMAT \")]\", p2i(this));\n-  st->print_cr(\"Framesize: %d\", _frame_size);\n+  vptr()->print_on(this, st);\n@@ -655,0 +700,9 @@\n+  vptr()->print_value_on(this, st);\n+}\n+\n+void CodeBlob::print_on_impl(outputStream* st) const {\n+  st->print_cr(\"[CodeBlob (\" INTPTR_FORMAT \")]\", p2i(this));\n+  st->print_cr(\"Framesize: %d\", _frame_size);\n+}\n+\n+void CodeBlob::print_value_on_impl(outputStream* st) const {\n@@ -658,0 +712,14 @@\n+void CodeBlob::print_block_comment(outputStream* stream, address block_begin) const {\n+#if defined(SUPPORT_ASSEMBLY) || defined(SUPPORT_ABSTRACT_ASSEMBLY)\n+  if (is_nmethod()) {\n+    as_nmethod()->print_nmethod_labels(stream, block_begin);\n+  }\n+#endif\n+\n+#ifndef PRODUCT\n+  ptrdiff_t offset = block_begin - code_begin();\n+  assert(offset >= 0, \"Expecting non-negative offset!\");\n+  _asm_remarks.print(uint(offset), stream);\n+#endif\n+  }\n+\n@@ -711,1 +779,1 @@\n-      nm->print(st);\n+      nm->print_on(st);\n@@ -719,2 +787,3 @@\n-void BufferBlob::verify() {\n-  \/\/ unimplemented\n+void BufferBlob::print_on_impl(outputStream* st) const {\n+  RuntimeBlob::print_on_impl(st);\n+  print_value_on_impl(st);\n@@ -723,6 +792,1 @@\n-void BufferBlob::print_on(outputStream* st) const {\n-  RuntimeBlob::print_on(st);\n-  print_value_on(st);\n-}\n-\n-void BufferBlob::print_value_on(outputStream* st) const {\n+void BufferBlob::print_value_on_impl(outputStream* st) const {\n@@ -732,5 +796,1 @@\n-void RuntimeStub::verify() {\n-  \/\/ unimplemented\n-}\n-\n-void RuntimeStub::print_on(outputStream* st) const {\n+void RuntimeStub::print_on_impl(outputStream* st) const {\n@@ -738,1 +798,1 @@\n-  RuntimeBlob::print_on(st);\n+  RuntimeBlob::print_on_impl(st);\n@@ -744,1 +804,1 @@\n-void RuntimeStub::print_value_on(outputStream* st) const {\n+void RuntimeStub::print_value_on_impl(outputStream* st) const {\n@@ -748,5 +808,1 @@\n-void SingletonBlob::verify() {\n-  \/\/ unimplemented\n-}\n-\n-void SingletonBlob::print_on(outputStream* st) const {\n+void SingletonBlob::print_on_impl(outputStream* st) const {\n@@ -754,1 +810,1 @@\n-  RuntimeBlob::print_on(st);\n+  RuntimeBlob::print_on_impl(st);\n@@ -759,1 +815,1 @@\n-void SingletonBlob::print_value_on(outputStream* st) const {\n+void SingletonBlob::print_value_on_impl(outputStream* st) const {\n@@ -763,1 +819,1 @@\n-void DeoptimizationBlob::print_value_on(outputStream* st) const {\n+void DeoptimizationBlob::print_value_on_impl(outputStream* st) const {\n@@ -767,7 +823,3 @@\n-void UpcallStub::verify() {\n-  \/\/ unimplemented\n-}\n-\n-void UpcallStub::print_on(outputStream* st) const {\n-  RuntimeBlob::print_on(st);\n-  print_value_on(st);\n+void UpcallStub::print_on_impl(outputStream* st) const {\n+  RuntimeBlob::print_on_impl(st);\n+  print_value_on_impl(st);\n@@ -781,1 +833,1 @@\n-void UpcallStub::print_value_on(outputStream* st) const {\n+void UpcallStub::print_value_on_impl(outputStream* st) const {\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":96,"deletions":44,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,0 @@\n-\/\/    ExceptionBlob      : Used for stack unrolling\n@@ -66,0 +65,1 @@\n+\/\/    ExceptionBlob      : Used for stack unrolling\n@@ -83,2 +83,2 @@\n-  MH_Adapter,\n-  Runtime_Stub,\n+  MHAdapter,\n+  RuntimeStub,\n@@ -86,1 +86,0 @@\n-  Exception,\n@@ -88,1 +87,4 @@\n-  Uncommon_Trap,\n+#ifdef COMPILER2\n+  Exception,\n+  UncommonTrap,\n+#endif\n@@ -131,0 +133,11 @@\n+  void print_on_impl(outputStream* st) const;\n+  void print_value_on_impl(outputStream* st) const;\n+\n+  class Vptr {\n+   public:\n+    virtual void print_on(const CodeBlob* instance, outputStream* st) const = 0;\n+    virtual void print_value_on(const CodeBlob* instance, outputStream* st) const = 0;\n+  };\n+\n+  const Vptr* vptr() const;\n+\n@@ -141,1 +154,1 @@\n-  virtual ~CodeBlob() {\n+  ~CodeBlob() {\n@@ -155,1 +168,1 @@\n-  bool is_runtime_stub() const                { return _kind == CodeBlobKind::Runtime_Stub; }\n+  bool is_runtime_stub() const                { return _kind == CodeBlobKind::RuntimeStub; }\n@@ -157,1 +170,2 @@\n-  bool is_uncommon_trap_stub() const          { return _kind == CodeBlobKind::Uncommon_Trap; }\n+#ifdef COMPILER2\n+  bool is_uncommon_trap_stub() const          { return _kind == CodeBlobKind::UncommonTrap; }\n@@ -159,0 +173,4 @@\n+#else\n+  bool is_uncommon_trap_stub() const          { return false; }\n+  bool is_exception_stub() const              { return false; }\n+#endif\n@@ -162,1 +180,1 @@\n-  bool is_method_handles_adapter_blob() const { return _kind == CodeBlobKind::MH_Adapter; }\n+  bool is_method_handles_adapter_blob() const { return _kind == CodeBlobKind::MHAdapter; }\n@@ -166,3 +184,3 @@\n-  nmethod* as_nmethod_or_null()               { return is_nmethod() ? (nmethod*) this : nullptr; }\n-  nmethod* as_nmethod()                       { assert(is_nmethod(), \"must be nmethod\"); return (nmethod*) this; }\n-  CodeBlob* as_codeblob_or_null() const       { return (CodeBlob*) this; }\n+  nmethod* as_nmethod_or_null() const         { return is_nmethod() ? (nmethod*) this : nullptr; }\n+  nmethod* as_nmethod() const                 { assert(is_nmethod(), \"must be nmethod\"); return (nmethod*) this; }\n+  CodeBlob* as_codeblob() const               { return (CodeBlob*) this; }\n@@ -236,4 +254,5 @@\n-  virtual void verify() = 0;\n-  virtual void print() const;\n-  virtual void print_on(outputStream* st) const;\n-  virtual void print_value_on(outputStream* st) const;\n+  void verify();\n+  void print() const;\n+  void print_on(outputStream* st) const;\n+  void print_value_on(outputStream* st) const;\n+\n@@ -244,7 +263,1 @@\n-  virtual void print_block_comment(outputStream* stream, address block_begin) const {\n-#ifndef PRODUCT\n-    ptrdiff_t offset = block_begin - code_begin();\n-    assert(offset >= 0, \"Expecting non-negative offset!\");\n-    _asm_remarks.print(uint(offset), stream);\n-#endif\n-  }\n+  void print_block_comment(outputStream* stream, address block_begin) const;\n@@ -293,0 +306,3 @@\n+\n+  class Vptr : public CodeBlob::Vptr {\n+  };\n@@ -321,2 +337,11 @@\n-  \/\/ Verification support\n-  void verify() override;\n+  void print_on_impl(outputStream* st) const;\n+  void print_value_on_impl(outputStream* st) const;\n+\n+  class Vptr : public RuntimeBlob::Vptr {\n+    void print_on(const CodeBlob* instance, outputStream* st) const override {\n+      ((const BufferBlob*)instance)->print_on_impl(st);\n+    }\n+    void print_value_on(const CodeBlob* instance, outputStream* st) const override {\n+      ((const BufferBlob*)instance)->print_value_on_impl(st);\n+    }\n+  };\n@@ -324,2 +349,1 @@\n-  void print_on(outputStream* st) const override;\n-  void print_value_on(outputStream* st) const override;\n+  static const Vptr _vptr;\n@@ -358,1 +382,1 @@\n-  MethodHandlesAdapterBlob(int size): BufferBlob(\"MethodHandles adapters\", CodeBlobKind::MH_Adapter, size) {}\n+  MethodHandlesAdapterBlob(int size): BufferBlob(\"MethodHandles adapters\", CodeBlobKind::MHAdapter, size) {}\n@@ -399,1 +423,1 @@\n-  address entry_point() const                    { return code_begin(); }\n+  address entry_point() const         { return code_begin(); }\n@@ -401,2 +425,2 @@\n-  \/\/ Verification support\n-  void verify() override;\n+  void print_on_impl(outputStream* st) const;\n+  void print_value_on_impl(outputStream* st) const;\n@@ -404,2 +428,10 @@\n-  void print_on(outputStream* st) const override;\n-  void print_value_on(outputStream* st) const override;\n+  class Vptr : public RuntimeBlob::Vptr {\n+    void print_on(const CodeBlob* instance, outputStream* st) const override {\n+      instance->as_runtime_stub()->print_on_impl(st);\n+    }\n+    void print_value_on(const CodeBlob* instance, outputStream* st) const override {\n+      instance->as_runtime_stub()->print_value_on_impl(st);\n+    }\n+  };\n+\n+  static const Vptr _vptr;\n@@ -433,2 +465,11 @@\n-  \/\/ Verification support\n-  void verify() override; \/\/ does nothing\n+  void print_on_impl(outputStream* st) const;\n+  void print_value_on_impl(outputStream* st) const;\n+\n+  class Vptr : public RuntimeBlob::Vptr {\n+    void print_on(const CodeBlob* instance, outputStream* st) const override {\n+      ((const SingletonBlob*)instance)->print_on_impl(st);\n+    }\n+    void print_value_on(const CodeBlob* instance, outputStream* st) const override {\n+      ((const SingletonBlob*)instance)->print_value_on_impl(st);\n+    }\n+  };\n@@ -436,2 +477,1 @@\n-  void print_on(outputStream* st) const override;\n-  void print_value_on(outputStream* st) const override;\n+  static const Vptr _vptr;\n@@ -482,3 +522,0 @@\n-  \/\/ Printing\n-  void print_value_on(outputStream* st) const override;\n-\n@@ -514,0 +551,10 @@\n+\n+  void print_value_on_impl(outputStream* st) const;\n+\n+  class Vptr : public SingletonBlob::Vptr {\n+    void print_value_on(const CodeBlob* instance, outputStream* st) const override {\n+      ((const DeoptimizationBlob*)instance)->print_value_on_impl(st);\n+    }\n+  };\n+\n+  static const Vptr _vptr;\n@@ -626,1 +673,1 @@\n-  \/\/ GC\/Verification support\n+  \/\/ GC support\n@@ -628,1 +675,0 @@\n-  void verify() override;\n@@ -630,3 +676,13 @@\n-  \/\/ Misc.\n-  void print_on(outputStream* st) const override;\n-  void print_value_on(outputStream* st) const override;\n+  void print_on_impl(outputStream* st) const;\n+  void print_value_on_impl(outputStream* st) const;\n+\n+  class Vptr : public RuntimeBlob::Vptr {\n+    void print_on(const CodeBlob* instance, outputStream* st) const override {\n+      instance->as_upcall_stub()->print_on_impl(st);\n+    }\n+    void print_value_on(const CodeBlob* instance, outputStream* st) const override {\n+      instance->as_upcall_stub()->print_value_on_impl(st);\n+    }\n+  };\n+\n+  static const Vptr _vptr;\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":102,"deletions":46,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-      nm->print_on(tty, \"nmethod\");\n+      nm->print_on_with_msg(tty, \"nmethod\");\n","filename":"src\/hotspot\/share\/code\/dependencyContext.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1622,1 +1622,1 @@\n-void nmethod::print_on(outputStream* st, const char* msg) const {\n+void nmethod::print_on_with_msg(outputStream* st, const char* msg) const {\n@@ -1974,1 +1974,1 @@\n-    print_on(tty, \"made not entrant\");\n+    print_on_with_msg(tty, \"made not entrant\");\n@@ -3032,6 +3032,1 @@\n-void nmethod::print() const {\n-  ttyLocker ttyl;   \/\/ keep the following output all in one block\n-  print(tty);\n-}\n-\n-void nmethod::print(outputStream* st) const {\n+void nmethod::print_on_impl(outputStream* st) const {\n@@ -3052,1 +3047,1 @@\n-  print_on(st, nullptr);\n+  print_on_with_msg(st, nullptr);\n@@ -3403,1 +3398,1 @@\n-  this->print(st);\n+  this->print_on(st);\n@@ -3952,0 +3947,2 @@\n+void nmethod::print_value_on_impl(outputStream* st) const {\n+  st->print_cr(\"nmethod\");\n@@ -3953,4 +3950,1 @@\n-void nmethod::print_value_on(outputStream* st) const {\n-  st->print(\"nmethod\");\n-  print_on(st, nullptr);\n-}\n+  print_on_with_msg(st, nullptr);\n@@ -3958,0 +3952,1 @@\n+}\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -903,1 +903,1 @@\n-  void verify() override;\n+  void verify();\n@@ -915,2 +915,1 @@\n-  void print()                 const override;\n-  void print(outputStream* st) const;\n+  void print_on_impl(outputStream* st) const;\n@@ -918,0 +917,1 @@\n+  void print_value_on_impl(outputStream* st) const;\n@@ -925,1 +925,0 @@\n-  void print_value_on(outputStream* st) const override;\n@@ -944,3 +943,1 @@\n-  \/\/ need to re-define this from CodeBlob else the overload hides it\n-  void print_on(outputStream* st) const override { CodeBlob::print_on(st); }\n-  void print_on(outputStream* st, const char* msg) const;\n+  void print_on_with_msg(outputStream* st, const char* msg) const;\n@@ -954,7 +951,0 @@\n-  void print_block_comment(outputStream* stream, address block_begin) const override {\n-#if defined(SUPPORT_ASSEMBLY) || defined(SUPPORT_ABSTRACT_ASSEMBLY)\n-    print_nmethod_labels(stream, block_begin);\n-    CodeBlob::print_block_comment(stream, block_begin);\n-#endif\n-  }\n-\n@@ -998,0 +988,12 @@\n+\n+  class Vptr : public CodeBlob::Vptr {\n+    void print_on(const CodeBlob* instance, outputStream* st) const override {\n+      ttyLocker ttyl;\n+      instance->as_nmethod()->print_on_impl(st);\n+    }\n+    void print_value_on(const CodeBlob* instance, outputStream* st) const override {\n+      instance->as_nmethod()->print_value_on_impl(st);\n+    }\n+  };\n+\n+  static const Vptr _vptr;\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -552,0 +552,1 @@\n+  nonstatic_field(CodeBlob,                    _kind,                                         CodeBlobKind)                          \\\n@@ -1919,0 +1920,1 @@\n+  declare_integer_type(CodeBlobKind)                                      \\\n@@ -2376,0 +2378,17 @@\n+  \/****************\/                                                      \\\n+  \/* CodeBlobKind *\/                                                      \\\n+  \/****************\/                                                      \\\n+                                                                          \\\n+  declare_constant(CodeBlobKind::Nmethod)                                 \\\n+  declare_constant(CodeBlobKind::Buffer)                                  \\\n+  declare_constant(CodeBlobKind::Adapter)                                 \\\n+  declare_constant(CodeBlobKind::Vtable)                                  \\\n+  declare_constant(CodeBlobKind::MHAdapter)                               \\\n+  declare_constant(CodeBlobKind::RuntimeStub)                             \\\n+  declare_constant(CodeBlobKind::Deoptimization)                          \\\n+  declare_constant(CodeBlobKind::Safepoint)                               \\\n+  COMPILER2_PRESENT(declare_constant(CodeBlobKind::Exception))            \\\n+  COMPILER2_PRESENT(declare_constant(CodeBlobKind::UncommonTrap))         \\\n+  declare_constant(CodeBlobKind::Upcall)                                  \\\n+  declare_constant(CodeBlobKind::Number_Of_Kinds)                         \\\n+                                                                          \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-    return VM.getVM().getCodeCache().createCodeBlobWrapper(blobAddr);\n+    return VM.getVM().getCodeCache().createCodeBlobWrapper(blobAddr, blobAddr);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/c1\/Runtime1.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,4 +53,0 @@\n-  public boolean isAdapterBlob() {\n-    return true;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/AdapterBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,4 +52,0 @@\n-\n-  public boolean isBufferBlob() {\n-    return true;\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/BufferBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+  private static CIntegerField kindField;\n@@ -55,0 +56,16 @@\n+  \/\/ Kinds of Codeblob\n+  private static int NMethodKind;\n+  private static int BufferKind;\n+  private static int AdapterKind;\n+  private static int VtableKind;\n+  private static int MHAdapterKind;\n+  private static int RuntimeStubKind;\n+  private static int DeoptimizationKind;\n+  private static int ExceptionKind;\n+  private static int SafepointKind;\n+  private static int UncommonTrapKind;\n+  private static int UpcallKind;\n+  private static int NumberOfKinds;\n+\n+  private static Class[] wrapperClasses;\n+\n@@ -66,0 +83,1 @@\n+    kindField                = type.getCIntegerField(\"_kind\");\n@@ -79,0 +97,34 @@\n+\n+    NMethodKind        = db.lookupIntConstant(\"CodeBlobKind::Nmethod\").intValue();\n+    BufferKind         = db.lookupIntConstant(\"CodeBlobKind::Buffer\").intValue();\n+    AdapterKind        = db.lookupIntConstant(\"CodeBlobKind::Adapter\").intValue();\n+    VtableKind         = db.lookupIntConstant(\"CodeBlobKind::Vtable\").intValue();\n+    MHAdapterKind      = db.lookupIntConstant(\"CodeBlobKind::MHAdapter\").intValue();\n+    RuntimeStubKind    = db.lookupIntConstant(\"CodeBlobKind::RuntimeStub\").intValue();\n+    DeoptimizationKind = db.lookupIntConstant(\"CodeBlobKind::Deoptimization\").intValue();\n+    SafepointKind      = db.lookupIntConstant(\"CodeBlobKind::Safepoint\").intValue();\n+    UpcallKind         = db.lookupIntConstant(\"CodeBlobKind::Upcall\").intValue();\n+    NumberOfKinds      = db.lookupIntConstant(\"CodeBlobKind::Number_Of_Kinds\").intValue();\n+    if (VM.getVM().isServerCompiler()) {\n+        ExceptionKind    = db.lookupIntConstant(\"CodeBlobKind::Exception\").intValue();\n+        UncommonTrapKind = db.lookupIntConstant(\"CodeBlobKind::UncommonTrap\").intValue();\n+    } else {\n+        \/\/ Set invalid value to not match default.\n+        ExceptionKind    = NumberOfKinds + 1;\n+        UncommonTrapKind = NumberOfKinds + 1;\n+    }\n+\n+    wrapperClasses                     = new Class[NumberOfKinds];\n+    wrapperClasses[NMethodKind]        = NMethod.class;\n+    wrapperClasses[BufferKind]         = BufferBlob.class;\n+    wrapperClasses[AdapterKind]        = AdapterBlob.class;\n+    wrapperClasses[VtableKind]         = VtableBlob.class;\n+    wrapperClasses[MHAdapterKind]      = MethodHandlesAdapterBlob.class;\n+    wrapperClasses[RuntimeStubKind]    = RuntimeStub.class;\n+    wrapperClasses[DeoptimizationKind] = DeoptimizationBlob.class;\n+    wrapperClasses[SafepointKind]      = SafepointBlob.class;\n+    wrapperClasses[UpcallKind]         = UpcallStub.class;\n+    if (VM.getVM().isServerCompiler()) {\n+      wrapperClasses[ExceptionKind]    = ExceptionBlob.class;\n+      wrapperClasses[UncommonTrapKind] = UncommonTrapBlob.class;\n+    }\n@@ -89,0 +141,5 @@\n+  public static Class<?> getClassFor(Address addr) {\n+      CodeBlob cb = new CodeBlob(addr);\n+      return wrapperClasses[cb.getKind()];\n+  }\n+\n@@ -127,0 +184,4 @@\n+  public int getKind() {\n+    return (int) kindField.getValue(addr);\n+  }\n+\n@@ -138,1 +199,3 @@\n-  public boolean isBufferBlob()         { return false; }\n+  public boolean isBufferBlob()         { return getKind() == BufferKind; }\n+\n+  public boolean isNMethod()            { return getKind() == NMethodKind; }\n@@ -140,1 +203,1 @@\n-  public boolean isCompiled()           { return false; }\n+  public boolean isRuntimeStub()        { return getKind() == RuntimeStubKind; }\n@@ -142,1 +205,1 @@\n-  public boolean isNMethod()            { return false; }\n+  public boolean isUpcallStub()         { return getKind() == UpcallKind; }\n@@ -144,1 +207,1 @@\n-  public boolean isRuntimeStub()        { return false; }\n+  public boolean isDeoptimizationBlob() { return getKind() == DeoptimizationKind; }\n@@ -146,1 +209,1 @@\n-  public boolean isUpcallStub()         { return false; }\n+  public boolean isUncommonTrapBlob()   { return getKind() == UncommonTrapKind; }\n@@ -148,1 +211,1 @@\n-  public boolean isDeoptimizationStub() { return false; }\n+  public boolean isExceptionBlob()      { return getKind() == ExceptionKind; }\n@@ -150,1 +213,1 @@\n-  public boolean isUncommonTrapStub()   { return false; }\n+  public boolean isSafepointBlob()      { return getKind() == SafepointKind; }\n@@ -152,1 +215,1 @@\n-  public boolean isExceptionStub()      { return false; }\n+  public boolean isAdapterBlob()        { return getKind() == AdapterKind; }\n@@ -154,1 +217,1 @@\n-  public boolean isSafepointStub()      { return false; }\n+  public boolean isMHAdapterBlob()      { return getKind() == MHAdapterKind; }\n@@ -156,1 +219,1 @@\n-  public boolean isAdapterBlob()        { return false; }\n+  public boolean isVtableBlob()         { return getKind() == VtableKind; }\n@@ -158,1 +221,1 @@\n-  \/\/ Fine grain nmethod support: isNmethod() == isJavaMethod() || isNativeMethod() || isOSRMethod()\n+  \/\/ Fine grain nmethod support: isNMethod() == isJavaMethod() || isNativeMethod() || isOSRMethod()\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/CodeBlob.java","additions":75,"deletions":12,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-  private static VirtualConstructor virtualConstructor;\n@@ -54,16 +53,0 @@\n-\n-    virtualConstructor = new VirtualConstructor(db);\n-    \/\/ Add mappings for all possible CodeBlob subclasses\n-    virtualConstructor.addMapping(\"BufferBlob\", BufferBlob.class);\n-    virtualConstructor.addMapping(\"nmethod\", NMethod.class);\n-    virtualConstructor.addMapping(\"RuntimeStub\", RuntimeStub.class);\n-    virtualConstructor.addMapping(\"AdapterBlob\", AdapterBlob.class);\n-    virtualConstructor.addMapping(\"MethodHandlesAdapterBlob\", MethodHandlesAdapterBlob.class);\n-    virtualConstructor.addMapping(\"VtableBlob\", VtableBlob.class);\n-    virtualConstructor.addMapping(\"UpcallStub\", UpcallStub.class);\n-    virtualConstructor.addMapping(\"SafepointBlob\", SafepointBlob.class);\n-    virtualConstructor.addMapping(\"DeoptimizationBlob\", DeoptimizationBlob.class);\n-    if (VM.getVM().isServerCompiler()) {\n-      virtualConstructor.addMapping(\"ExceptionBlob\", ExceptionBlob.class);\n-      virtualConstructor.addMapping(\"UncommonTrapBlob\", UncommonTrapBlob.class);\n-    }\n@@ -83,2 +66,2 @@\n-  public CodeBlob findBlob(Address start) {\n-    CodeBlob result = findBlobUnsafe(start);\n+  public CodeBlob findBlob(Address addr) {\n+    CodeBlob result = findBlobUnsafe(addr);\n@@ -94,2 +77,1 @@\n-  public CodeBlob findBlobUnsafe(Address start) {\n-    CodeBlob result = null;\n+  public CodeBlob findBlobUnsafe(Address addr) {\n@@ -98,1 +80,1 @@\n-      if (heapArray.at(i).contains(start)) {\n+      if (heapArray.at(i).contains(addr)) {\n@@ -107,11 +89,2 @@\n-    try {\n-      result = (CodeBlob) virtualConstructor.instantiateWrapperFor(containing_heap.findStart(start));\n-    }\n-    catch (WrongTypeException wte) {\n-      Address cbAddr = null;\n-      try {\n-        cbAddr = containing_heap.findStart(start);\n-      }\n-      catch (Exception findEx) {\n-        findEx.printStackTrace();\n-      }\n+    Address cbStart = containing_heap.findStart(addr);\n+    if (cbStart == null) return null;\n@@ -119,0 +92,8 @@\n+    return createCodeBlobWrapper(cbStart, addr);\n+  }\n+\n+  \/\/ cbStart - address of a code blob\n+  \/\/ addr    - address inside of a code blob\n+  public CodeBlob createCodeBlobWrapper(Address cbStart, Address addr) {\n+    Class<?> cbClass = CodeBlob.getClassFor(cbStart);\n+    if (cbClass == null) {\n@@ -120,4 +101,2 @@\n-      if (cbAddr != null) {\n-        message = message + \"@\" + cbAddr + \" \";\n-      }\n-      message = message + \"for PC=\" + start;\n+      message = message + \"@\" + cbStart + \" \";\n+      message = message + \"for PC=\" + addr;\n@@ -125,1 +104,1 @@\n-      throw new RuntimeException(message, wte);\n+      throw new RuntimeException(message);\n@@ -127,1 +106,1 @@\n-    if (result == null) return null;\n+    CodeBlob result = (CodeBlob) VMObjectFactory.newObject(cbClass, cbStart);\n@@ -133,2 +112,2 @@\n-      Assert.that(result.blobContains(start) ||\n-                  result.blobContains(start.addOffsetTo(2 * VM.getVM().getAddressSize())),\n+      Assert.that(result.blobContains(addr) ||\n+                  result.blobContains(addr.addOffsetTo(2 * VM.getVM().getAddressSize())),\n@@ -140,2 +119,2 @@\n-  public NMethod findNMethod(Address start) {\n-    CodeBlob cb = findBlob(start);\n+  public NMethod findNMethod(Address addr) {\n+    CodeBlob cb = findBlob(addr);\n@@ -148,2 +127,2 @@\n-  public NMethod findNMethodUnsafe(Address start) {\n-    CodeBlob cb = findBlobUnsafe(start);\n+  public NMethod findNMethodUnsafe(Address addr) {\n+    CodeBlob cb = findBlobUnsafe(addr);\n@@ -156,21 +135,0 @@\n-  \/** Routine for instantiating appropriately-typed wrapper for a\n-      CodeBlob. Used by CodeCache, Runtime1, etc. *\/\n-  public CodeBlob createCodeBlobWrapper(Address codeBlobAddr) {\n-    try {\n-      return (CodeBlob) virtualConstructor.instantiateWrapperFor(codeBlobAddr);\n-    }\n-    catch (Exception e) {\n-      String message = \"Unable to deduce type of CodeBlob from address \" + codeBlobAddr +\n-                       \" (expected type nmethod, RuntimeStub, VtableBlob, \";\n-      if (VM.getVM().isClientCompiler()) {\n-        message = message + \" or \";\n-      }\n-      message = message + \"SafepointBlob\";\n-      if (VM.getVM().isServerCompiler()) {\n-        message = message + \", DeoptimizationBlob, or ExceptionBlob\";\n-      }\n-      message = message + \")\";\n-      throw new RuntimeException(message);\n-    }\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/CodeCache.java","additions":25,"deletions":67,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,4 +52,0 @@\n-\n-  public boolean isDeoptimizationStub() {\n-    return true;\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/DeoptimizationBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,4 +55,0 @@\n-\n-  public boolean isExceptionStub() {\n-    return true;\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/ExceptionBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,4 +53,0 @@\n-  public boolean isMethodHandlesAdapterBlob() {\n-    return true;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/MethodHandlesAdapterBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,0 @@\n-  public boolean isNMethod()      { return true;                    }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/NMethod.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,4 +56,0 @@\n-  public boolean isRuntimeStub() {\n-    return true;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/RuntimeStub.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,4 +54,0 @@\n-\n-  public boolean isSafepointStub() {\n-    return true;\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/SafepointBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,2 +52,0 @@\n-\n-  public boolean isSingletonBlob()      { return true; }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/SingletonBlob.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,4 +54,0 @@\n-\n-  public boolean isUncommonTrapStub() {\n-    return true;\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/UncommonTrapBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,4 +88,0 @@\n-  public boolean isUpcallStub() {\n-    return true;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/UpcallStub.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,4 +36,0 @@\n-    public boolean isVtableBlob() {\n-        return true;\n-    }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/VtableBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-        CodeBlob blob = cache.createCodeBlobWrapper(findStart(ptr));\n+        CodeBlob blob = cache.createCodeBlobWrapper(findStart(ptr), ptr);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/CodeHeap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,0 +165,6 @@\n+                            } else if (cb.isAdapterBlob()) {\n+                               out.println(\"<AdapterBlob>\");\n+                            } else if (cb.isVtableBlob()) {\n+                               out.println(\"<VtableBlob>\");\n+                            } else if (cb.isMHAdapterBlob()) {\n+                               out.println(\"<MethodHandlesAdapterBlob>\");\n@@ -167,8 +173,10 @@\n-                            } else if (cb.isDeoptimizationStub()) {\n-                               out.println(\"<DeoptimizationStub>\");\n-                            } else if (cb.isUncommonTrapStub()) {\n-                               out.println(\"<UncommonTrap>\");\n-                            } else if (cb.isExceptionStub()) {\n-                               out.println(\"<ExceptionStub>\");\n-                            } else if (cb.isSafepointStub()) {\n-                               out.println(\"<SafepointStub>\");\n+                            } else if (cb.isUpcallStub()) {\n+                               out.println(\"<UpcallStub>\");\n+                            } else if (cb.isDeoptimizationBlob()) {\n+                               out.println(\"<DeoptimizationBlob>\");\n+                            } else if (cb.isUncommonTrapBlob()) {\n+                               out.println(\"<UncommonTrapBlob>\");\n+                            } else if (cb.isExceptionBlob()) {\n+                               out.println(\"<ExceptionBlob>\");\n+                            } else if (cb.isSafepointBlob()) {\n+                               out.println(\"<SafepointBlob>\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/PStack.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"}]}