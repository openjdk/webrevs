{"files":[{"patch":"@@ -56,0 +56,32 @@\n+#include <type_traits>\n+\n+\/\/ Virtual methods are not allowed in code blobs to simplify caching compiled code.\n+\/\/ Check all \"leaf\" subclasses of CodeBlob class.\n+\n+static_assert(!std::is_polymorphic<nmethod>::value,            \"no virtual methods are allowed in nmethod\");\n+static_assert(!std::is_polymorphic<AdapterBlob>::value,        \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<VtableBlob>::value,         \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<MethodHandlesAdapterBlob>::value, \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<RuntimeStub>::value,        \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<DeoptimizationBlob>::value, \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<SafepointBlob>::value,      \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<UpcallStub>::value,         \"no virtual methods are allowed in code blobs\");\n+#ifdef COMPILER2\n+static_assert(!std::is_polymorphic<ExceptionBlob>::value,      \"no virtual methods are allowed in code blobs\");\n+static_assert(!std::is_polymorphic<UncommonTrapBlob>::value,   \"no virtual methods are allowed in code blobs\");\n+#endif\n+\n+\/\/ CodeBlob\n+\/\/  nmethod              : JIT Compiled Java methods\n+\/\/  RuntimeBlob          : Non-compiled method code; generated glue code\n+\/\/   BufferBlob          : Used for non-relocatable code such as interpreter, stubroutines, etc.\n+\/\/    AdapterBlob        : Used to hold C2I\/I2C adapters\n+\/\/    VtableBlob         : Used for holding vtable chunks\n+\/\/    MethodHandlesAdapterBlob : Used to hold MethodHandles adapters\n+\/\/   RuntimeStub         : Call to VM runtime methods\n+\/\/   SingletonBlob       : Super-class for all blobs that exist in only one instance\n+\/\/    DeoptimizationBlob : Used for deoptimization\n+\/\/    ExceptionBlob      : Used for stack unrolling\n+\/\/    SafepointBlob      : Used to handle illegal instruction exceptions\n+\/\/    UncommonTrapBlob   : Used to handle uncommon traps\n+\/\/   UpcallStub  : Used for upcalls from native code\n@@ -647,0 +679,56 @@\n+void CodeBlob::verify() {\n+  if (is_nmethod()) {\n+    as_nmethod()->verify();\n+  }\n+}\n+\n+void CodeBlob::print() const {\n+  if (is_nmethod()) {\n+    ttyLocker ttyl;   \/\/ keep the following output all in one block\n+    as_nmethod()->print_on2(tty);\n+  } else {\n+    print_on(tty);\n+  }\n+}\n+\n+void CodeBlob::print_value_on(outputStream* st) const {\n+  switch (_kind) {\n+    case CodeBlobKind::Nmethod: {\n+      st->print_cr(\"nmethod (\" INTPTR_FORMAT  \")\", p2i(this));\n+#if defined(SUPPORT_DATA_STRUCTS)\n+      as_nmethod()->print_on_with_msg(st, nullptr);\n+#endif\n+    }\n+    case CodeBlobKind::MH_Adapter: \/\/ fall through for subclasses\n+    case CodeBlobKind::Adapter:\n+    case CodeBlobKind::Vtable:\n+    case CodeBlobKind::Buffer: {\n+      st->print_cr(\"BufferBlob (\" INTPTR_FORMAT  \") used for %s\", p2i(this), name());;\n+      break;\n+    }\n+    case CodeBlobKind::Runtime_Stub: {\n+      st->print(\"RuntimeStub (\" INTPTR_FORMAT \"): %s\", p2i(this), name());\n+      break;\n+    }\n+    case CodeBlobKind::Deoptimization: {\n+      st->print_cr(\"DeoptimizationBlob (frame not available) (\" INTPTR_FORMAT  \")\", p2i(this));\n+      break;\n+    }\n+#ifdef COMPILER2\n+    case CodeBlobKind::Uncommon_Trap: \/\/ fall through for subclasses\n+    case CodeBlobKind::Exception:\n+#endif\n+    case CodeBlobKind::Safepoint: {\n+      st->print_cr(\"%s (\" INTPTR_FORMAT  \")\", name(), p2i(this));\n+      break;\n+    }\n+    case CodeBlobKind::Upcall: {\n+      st->print_cr(\"UpcallStub (\" INTPTR_FORMAT  \") used for %s\", p2i(this), name());\n+      break;\n+    }\n+    default: {\n+      assert(false, \"Unknown kind of CodeBlob %d (\" INTPTR_FORMAT  \")\", (int)_kind, p2i(this));\n+    }\n+  }\n+}\n+\n@@ -648,0 +736,2 @@\n+  ttyLocker ttyl;\n+\n@@ -650,1 +740,0 @@\n-}\n@@ -652,1 +741,1 @@\n-void CodeBlob::print() const { print_on(tty); }\n+  print_value_on(st);\n@@ -654,2 +743,36 @@\n-void CodeBlob::print_value_on(outputStream* st) const {\n-  st->print_cr(\"[CodeBlob]\");\n+  switch (_kind) {\n+    case CodeBlobKind::Nmethod: {\n+      break; \/\/ do nothing - print_value_on() produces output for nmethod\n+    }\n+    case CodeBlobKind::MH_Adapter: \/\/ fall through for subclasses\n+    case CodeBlobKind::Adapter:\n+    case CodeBlobKind::Vtable:\n+    case CodeBlobKind::Buffer: {\n+      break;\n+    }\n+    case CodeBlobKind::Runtime_Stub: {\n+      Disassembler::decode((RuntimeBlob*)this, st);\n+      break;\n+    }\n+    case CodeBlobKind::Deoptimization: \/\/ fall through for subclasses\n+#ifdef COMPILER2\n+    case CodeBlobKind::Uncommon_Trap:\n+    case CodeBlobKind::Exception:\n+#endif\n+    case CodeBlobKind::Safepoint: {\n+      Disassembler::decode((RuntimeBlob*)this, st);\n+      break;\n+    }\n+    case CodeBlobKind::Upcall: {\n+      UpcallStub* upcall = this->as_upcall_stub();\n+      st->print_cr(\"Frame data offset: %d\", (int) upcall->frame_data_offset());\n+      oop recv = JNIHandles::resolve(upcall->receiver());\n+      st->print(\"Receiver MH=\");\n+      recv->print_on(st);\n+      Disassembler::decode((RuntimeBlob*)this, st);\n+      break;\n+    }\n+    default: {\n+      assert(false, \"Unknown kind of CodeBlob %d (\" INTPTR_FORMAT  \")\", (int)_kind, p2i(this));\n+    }\n+  }\n@@ -658,0 +781,14 @@\n+void CodeBlob::print_block_comment(outputStream* stream, address block_begin) const {\n+#if defined(SUPPORT_ASSEMBLY) || defined(SUPPORT_ABSTRACT_ASSEMBLY)\n+  if (is_nmethod()) {\n+    as_nmethod()->print_nmethod_labels(stream, block_begin);\n+  }\n+#endif\n+\n+#ifndef PRODUCT\n+  ptrdiff_t offset = block_begin - code_begin();\n+  assert(offset >= 0, \"Expecting non-negative offset!\");\n+  _asm_remarks.print(uint(offset), stream);\n+#endif\n+  }\n+\n@@ -711,1 +848,1 @@\n-      nm->print(st);\n+      nm->print_on2(st);\n@@ -719,65 +856,0 @@\n-void BufferBlob::verify() {\n-  \/\/ unimplemented\n-}\n-\n-void BufferBlob::print_on(outputStream* st) const {\n-  RuntimeBlob::print_on(st);\n-  print_value_on(st);\n-}\n-\n-void BufferBlob::print_value_on(outputStream* st) const {\n-  st->print_cr(\"BufferBlob (\" INTPTR_FORMAT  \") used for %s\", p2i(this), name());\n-}\n-\n-void RuntimeStub::verify() {\n-  \/\/ unimplemented\n-}\n-\n-void RuntimeStub::print_on(outputStream* st) const {\n-  ttyLocker ttyl;\n-  RuntimeBlob::print_on(st);\n-  st->print(\"Runtime Stub (\" INTPTR_FORMAT \"): \", p2i(this));\n-  st->print_cr(\"%s\", name());\n-  Disassembler::decode((RuntimeBlob*)this, st);\n-}\n-\n-void RuntimeStub::print_value_on(outputStream* st) const {\n-  st->print(\"RuntimeStub (\" INTPTR_FORMAT \"): \", p2i(this)); st->print(\"%s\", name());\n-}\n-\n-void SingletonBlob::verify() {\n-  \/\/ unimplemented\n-}\n-\n-void SingletonBlob::print_on(outputStream* st) const {\n-  ttyLocker ttyl;\n-  RuntimeBlob::print_on(st);\n-  st->print_cr(\"%s\", name());\n-  Disassembler::decode((RuntimeBlob*)this, st);\n-}\n-\n-void SingletonBlob::print_value_on(outputStream* st) const {\n-  st->print_cr(\"%s\", name());\n-}\n-\n-void DeoptimizationBlob::print_value_on(outputStream* st) const {\n-  st->print_cr(\"Deoptimization (frame not available)\");\n-}\n-\n-void UpcallStub::verify() {\n-  \/\/ unimplemented\n-}\n-\n-void UpcallStub::print_on(outputStream* st) const {\n-  RuntimeBlob::print_on(st);\n-  print_value_on(st);\n-  st->print_cr(\"Frame data offset: %d\", (int) _frame_data_offset);\n-  oop recv = JNIHandles::resolve(_receiver);\n-  st->print(\"Receiver MH=\");\n-  recv->print_on(st);\n-  Disassembler::decode((RuntimeBlob*)this, st);\n-}\n-\n-void UpcallStub::print_value_on(outputStream* st) const {\n-  st->print_cr(\"UpcallStub (\" INTPTR_FORMAT  \") used for %s\", p2i(this), name());\n-}\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":142,"deletions":70,"binary":false,"changes":212,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,1 +141,1 @@\n-  virtual ~CodeBlob() {\n+  ~CodeBlob() {\n@@ -166,2 +166,2 @@\n-  nmethod* as_nmethod_or_null()               { return is_nmethod() ? (nmethod*) this : nullptr; }\n-  nmethod* as_nmethod()                       { assert(is_nmethod(), \"must be nmethod\"); return (nmethod*) this; }\n+  nmethod* as_nmethod_or_null() const         { return is_nmethod() ? (nmethod*) this : nullptr; }\n+  nmethod* as_nmethod() const                 { assert(is_nmethod(), \"must be nmethod\"); return (nmethod*) this; }\n@@ -236,4 +236,4 @@\n-  virtual void verify() = 0;\n-  virtual void print() const;\n-  virtual void print_on(outputStream* st) const;\n-  virtual void print_value_on(outputStream* st) const;\n+  void verify();\n+  void print() const;\n+  void print_on(outputStream* st) const;\n+  void print_value_on(outputStream* st) const;\n@@ -244,7 +244,1 @@\n-  virtual void print_block_comment(outputStream* stream, address block_begin) const {\n-#ifndef PRODUCT\n-    ptrdiff_t offset = block_begin - code_begin();\n-    assert(offset >= 0, \"Expecting non-negative offset!\");\n-    _asm_remarks.print(uint(offset), stream);\n-#endif\n-  }\n+  void print_block_comment(outputStream* stream, address block_begin) const;\n@@ -320,6 +314,0 @@\n-\n-  \/\/ Verification support\n-  void verify() override;\n-\n-  void print_on(outputStream* st) const override;\n-  void print_value_on(outputStream* st) const override;\n@@ -400,6 +388,0 @@\n-\n-  \/\/ Verification support\n-  void verify() override;\n-\n-  void print_on(outputStream* st) const override;\n-  void print_value_on(outputStream* st) const override;\n@@ -432,6 +414,0 @@\n-\n-  \/\/ Verification support\n-  void verify() override; \/\/ does nothing\n-\n-  void print_on(outputStream* st) const override;\n-  void print_value_on(outputStream* st) const override;\n@@ -482,3 +458,0 @@\n-  \/\/ Printing\n-  void print_value_on(outputStream* st) const override;\n-\n@@ -622,1 +595,2 @@\n-  jobject receiver() { return _receiver; }\n+  jobject  receiver()          { return _receiver; }\n+  ByteSize frame_data_offset() { return _frame_data_offset; }\n@@ -626,1 +600,1 @@\n-  \/\/ GC\/Verification support\n+  \/\/ GC support\n@@ -628,5 +602,0 @@\n-  void verify() override;\n-\n-  \/\/ Misc.\n-  void print_on(outputStream* st) const override;\n-  void print_value_on(outputStream* st) const override;\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":12,"deletions":43,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-      nm->print_on(tty, \"nmethod\");\n+      nm->print_on_with_msg(tty, \"nmethod\");\n","filename":"src\/hotspot\/share\/code\/dependencyContext.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1622,1 +1622,1 @@\n-void nmethod::print_on(outputStream* st, const char* msg) const {\n+void nmethod::print_on_with_msg(outputStream* st, const char* msg) const {\n@@ -1974,1 +1974,1 @@\n-    print_on(tty, \"made not entrant\");\n+    print_on_with_msg(tty, \"made not entrant\");\n@@ -3031,7 +3031,1 @@\n-\n-void nmethod::print() const {\n-  ttyLocker ttyl;   \/\/ keep the following output all in one block\n-  print(tty);\n-}\n-\n-void nmethod::print(outputStream* st) const {\n+void nmethod::print_on2(outputStream* st) const {\n@@ -3052,1 +3046,1 @@\n-  print_on(st, nullptr);\n+  print_on_with_msg(st, nullptr);\n@@ -3403,1 +3397,1 @@\n-  this->print(st);\n+  this->print_on2(st);\n@@ -3952,7 +3946,0 @@\n-#if defined(SUPPORT_DATA_STRUCTS)\n-void nmethod::print_value_on(outputStream* st) const {\n-  st->print(\"nmethod\");\n-  print_on(st, nullptr);\n-}\n-#endif\n-\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -903,1 +903,1 @@\n-  void verify() override;\n+  void verify();\n@@ -915,2 +915,1 @@\n-  void print()                 const override;\n-  void print(outputStream* st) const;\n+  void print_on2(outputStream* st) const;\n@@ -925,1 +924,0 @@\n-  void print_value_on(outputStream* st) const override;\n@@ -944,3 +942,1 @@\n-  \/\/ need to re-define this from CodeBlob else the overload hides it\n-  void print_on(outputStream* st) const override { CodeBlob::print_on(st); }\n-  void print_on(outputStream* st, const char* msg) const;\n+  void print_on_with_msg(outputStream* st, const char* msg) const;\n@@ -954,7 +950,0 @@\n-  void print_block_comment(outputStream* stream, address block_begin) const override {\n-#if defined(SUPPORT_ASSEMBLY) || defined(SUPPORT_ABSTRACT_ASSEMBLY)\n-    print_nmethod_labels(stream, block_begin);\n-    CodeBlob::print_block_comment(stream, block_begin);\n-#endif\n-  }\n-\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -553,0 +553,1 @@\n+  nonstatic_field(CodeBlob,                    _kind,                                         CodeBlobKind)                          \\\n@@ -1920,0 +1921,1 @@\n+  declare_integer_type(CodeBlobKind)                                      \\\n@@ -2377,0 +2379,16 @@\n+  \/****************\/                                                      \\\n+  \/* CodeBlobKind *\/                                                      \\\n+  \/****************\/                                                      \\\n+                                                                          \\\n+  declare_constant(CodeBlobKind::Nmethod)                                 \\\n+  declare_constant(CodeBlobKind::Buffer)                                  \\\n+  declare_constant(CodeBlobKind::Adapter)                                 \\\n+  declare_constant(CodeBlobKind::Vtable)                                  \\\n+  declare_constant(CodeBlobKind::MH_Adapter)                              \\\n+  declare_constant(CodeBlobKind::Runtime_Stub)                            \\\n+  declare_constant(CodeBlobKind::Deoptimization)                          \\\n+  declare_constant(CodeBlobKind::Exception)                               \\\n+  declare_constant(CodeBlobKind::Safepoint)                               \\\n+  declare_constant(CodeBlobKind::Uncommon_Trap)                           \\\n+  declare_constant(CodeBlobKind::Upcall)                                  \\\n+                                                                          \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-    return VM.getVM().getCodeCache().createCodeBlobWrapper(blobAddr);\n+    return VM.getVM().getCodeCache().createCodeBlobWrapper(blobAddr, blobAddr);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/c1\/Runtime1.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,4 +53,0 @@\n-  public boolean isAdapterBlob() {\n-    return true;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/AdapterBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,4 +52,0 @@\n-\n-  public boolean isBufferBlob() {\n-    return true;\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/BufferBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+  private static CIntegerField kindField;\n@@ -55,0 +56,13 @@\n+  \/\/ Kinds of Codeblob\n+  private static int NMethodKind;\n+  private static int BufferKind;\n+  private static int AdapterKind;\n+  private static int VtableKind;\n+  private static int MHAdapterKind;\n+  private static int RuntimeStubKind;\n+  private static int DeoptimizationKind;\n+  private static int ExceptionKind;\n+  private static int SafepointKind;\n+  private static int UncommonTrapKind;\n+  private static int UpcallKind;\n+\n@@ -66,0 +80,1 @@\n+    kindField                = type.getCIntegerField(\"_kind\");\n@@ -79,0 +94,14 @@\n+\n+    NMethodKind        = db.lookupIntConstant(\"CodeBlobKind::Nmethod\").intValue();\n+    BufferKind         = db.lookupIntConstant(\"CodeBlobKind::Buffer\").intValue();\n+    AdapterKind        = db.lookupIntConstant(\"CodeBlobKind::Adapter\").intValue();\n+    VtableKind         = db.lookupIntConstant(\"CodeBlobKind::Vtable\").intValue();\n+    MHAdapterKind      = db.lookupIntConstant(\"CodeBlobKind::MH_Adapter\").intValue();\n+    RuntimeStubKind    = db.lookupIntConstant(\"CodeBlobKind::Runtime_Stub\").intValue();\n+    DeoptimizationKind = db.lookupIntConstant(\"CodeBlobKind::Deoptimization\").intValue();\n+    SafepointKind      = db.lookupIntConstant(\"CodeBlobKind::Safepoint\").intValue();\n+    UpcallKind         = db.lookupIntConstant(\"CodeBlobKind::Upcall\").intValue();\n+    if (VM.getVM().isServerCompiler()) {\n+      ExceptionKind    = db.lookupIntConstant(\"CodeBlobKind::Exception\").intValue();\n+      UncommonTrapKind = db.lookupIntConstant(\"CodeBlobKind::Uncommon_Trap\").intValue();\n+    }\n@@ -89,0 +118,31 @@\n+  public static Class<?> getClassFor(Address addr) {\n+      CodeBlob cb = new CodeBlob(addr);\n+      if (cb.isNMethod()) {\n+          return NMethod.class;\n+      } else if (cb.isBufferBlob()) {\n+          return BufferBlob.class;\n+      } else if (cb.isAdapterBlob()) {\n+          return AdapterBlob.class;\n+      } else if (cb.isVtableBlob()) {\n+          return VtableBlob.class;\n+      } else if (cb.isMHAdapterBlob()) {\n+          return MethodHandlesAdapterBlob.class;\n+      } else if (cb.isRuntimeStub()) {\n+          return RuntimeStub.class;\n+      } else if (cb.isDeoptimizationBlob()) {\n+          return DeoptimizationBlob.class;\n+      } else if (cb.isSafepointBlob()) {\n+          return SafepointBlob.class;\n+      } else if (cb.isUpcallStub()) {\n+          return UpcallStub.class;\n+      }\n+      if (VM.getVM().isServerCompiler()) {\n+        if (cb.isExceptionBlob()) {\n+            return ExceptionBlob.class;\n+        } else if (cb.isUncommonTrapBlob()) {\n+            return UncommonTrapBlob.class;\n+        }\n+      }\n+      return null;\n+  }\n+\n@@ -127,0 +187,4 @@\n+  public int getKind() {\n+    return (int) kindField.getValue(addr);\n+  }\n+\n@@ -138,1 +202,3 @@\n-  public boolean isBufferBlob()         { return false; }\n+  public boolean isBufferBlob()         { return getKind() == BufferKind; }\n+\n+  public boolean isNMethod()            { return getKind() == NMethodKind; }\n@@ -140,1 +206,1 @@\n-  public boolean isCompiled()           { return false; }\n+  public boolean isRuntimeStub()        { return getKind() == RuntimeStubKind; }\n@@ -142,1 +208,1 @@\n-  public boolean isNMethod()            { return false; }\n+  public boolean isUpcallStub()         { return getKind() == UpcallKind; }\n@@ -144,1 +210,1 @@\n-  public boolean isRuntimeStub()        { return false; }\n+  public boolean isDeoptimizationBlob() { return getKind() == DeoptimizationKind; }\n@@ -146,1 +212,1 @@\n-  public boolean isUpcallStub()         { return false; }\n+  public boolean isUncommonTrapBlob()   { return getKind() == UncommonTrapKind; }\n@@ -148,1 +214,1 @@\n-  public boolean isDeoptimizationStub() { return false; }\n+  public boolean isExceptionBlob()      { return getKind() == ExceptionKind; }\n@@ -150,1 +216,1 @@\n-  public boolean isUncommonTrapStub()   { return false; }\n+  public boolean isSafepointBlob()      { return getKind() == SafepointKind; }\n@@ -152,1 +218,1 @@\n-  public boolean isExceptionStub()      { return false; }\n+  public boolean isAdapterBlob()        { return getKind() == AdapterKind; }\n@@ -154,1 +220,1 @@\n-  public boolean isSafepointStub()      { return false; }\n+  public boolean isMHAdapterBlob()      { return getKind() == MHAdapterKind; }\n@@ -156,1 +222,1 @@\n-  public boolean isAdapterBlob()        { return false; }\n+  public boolean isVtableBlob()         { return getKind() == VtableKind; }\n@@ -158,1 +224,1 @@\n-  \/\/ Fine grain nmethod support: isNmethod() == isJavaMethod() || isNativeMethod() || isOSRMethod()\n+  \/\/ Fine grain nmethod support: isNMethod() == isJavaMethod() || isNativeMethod() || isOSRMethod()\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/CodeBlob.java","additions":78,"deletions":12,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-  private static VirtualConstructor virtualConstructor;\n@@ -54,16 +53,0 @@\n-\n-    virtualConstructor = new VirtualConstructor(db);\n-    \/\/ Add mappings for all possible CodeBlob subclasses\n-    virtualConstructor.addMapping(\"BufferBlob\", BufferBlob.class);\n-    virtualConstructor.addMapping(\"nmethod\", NMethod.class);\n-    virtualConstructor.addMapping(\"RuntimeStub\", RuntimeStub.class);\n-    virtualConstructor.addMapping(\"AdapterBlob\", AdapterBlob.class);\n-    virtualConstructor.addMapping(\"MethodHandlesAdapterBlob\", MethodHandlesAdapterBlob.class);\n-    virtualConstructor.addMapping(\"VtableBlob\", VtableBlob.class);\n-    virtualConstructor.addMapping(\"UpcallStub\", UpcallStub.class);\n-    virtualConstructor.addMapping(\"SafepointBlob\", SafepointBlob.class);\n-    virtualConstructor.addMapping(\"DeoptimizationBlob\", DeoptimizationBlob.class);\n-    if (VM.getVM().isServerCompiler()) {\n-      virtualConstructor.addMapping(\"ExceptionBlob\", ExceptionBlob.class);\n-      virtualConstructor.addMapping(\"UncommonTrapBlob\", UncommonTrapBlob.class);\n-    }\n@@ -95,1 +78,0 @@\n-    CodeBlob result = null;\n@@ -107,11 +89,2 @@\n-    try {\n-      result = (CodeBlob) virtualConstructor.instantiateWrapperFor(containing_heap.findStart(start));\n-    }\n-    catch (WrongTypeException wte) {\n-      Address cbAddr = null;\n-      try {\n-        cbAddr = containing_heap.findStart(start);\n-      }\n-      catch (Exception findEx) {\n-        findEx.printStackTrace();\n-      }\n+    Address cbAddr = containing_heap.findStart(start);\n+    if (cbAddr == null) return null;\n@@ -119,0 +92,6 @@\n+    return createCodeBlobWrapper(cbAddr, start);\n+  }\n+\n+  public CodeBlob createCodeBlobWrapper(Address cbAddr, Address start) {\n+    Class<?> cbClass = CodeBlob.getClassFor(cbAddr);\n+    if (cbClass == null) {\n@@ -120,3 +99,1 @@\n-      if (cbAddr != null) {\n-        message = message + \"@\" + cbAddr + \" \";\n-      }\n+      message = message + \"@\" + cbAddr + \" \";\n@@ -125,1 +102,1 @@\n-      throw new RuntimeException(message, wte);\n+      throw new RuntimeException(message);\n@@ -127,1 +104,1 @@\n-    if (result == null) return null;\n+    CodeBlob result = (CodeBlob) VMObjectFactory.newObject(cbClass, cbAddr);\n@@ -156,21 +133,0 @@\n-  \/** Routine for instantiating appropriately-typed wrapper for a\n-      CodeBlob. Used by CodeCache, Runtime1, etc. *\/\n-  public CodeBlob createCodeBlobWrapper(Address codeBlobAddr) {\n-    try {\n-      return (CodeBlob) virtualConstructor.instantiateWrapperFor(codeBlobAddr);\n-    }\n-    catch (Exception e) {\n-      String message = \"Unable to deduce type of CodeBlob from address \" + codeBlobAddr +\n-                       \" (expected type nmethod, RuntimeStub, VtableBlob, \";\n-      if (VM.getVM().isClientCompiler()) {\n-        message = message + \" or \";\n-      }\n-      message = message + \"SafepointBlob\";\n-      if (VM.getVM().isServerCompiler()) {\n-        message = message + \", DeoptimizationBlob, or ExceptionBlob\";\n-      }\n-      message = message + \")\";\n-      throw new RuntimeException(message);\n-    }\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/CodeCache.java","additions":12,"deletions":56,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,4 +52,0 @@\n-\n-  public boolean isDeoptimizationStub() {\n-    return true;\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/DeoptimizationBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,4 +55,0 @@\n-\n-  public boolean isExceptionStub() {\n-    return true;\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/ExceptionBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,4 +53,0 @@\n-  public boolean isMethodHandlesAdapterBlob() {\n-    return true;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/MethodHandlesAdapterBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,0 @@\n-  public boolean isNMethod()      { return true;                    }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/NMethod.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,4 +56,0 @@\n-  public boolean isRuntimeStub() {\n-    return true;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/RuntimeStub.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,4 +54,0 @@\n-\n-  public boolean isSafepointStub() {\n-    return true;\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/SafepointBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,2 +52,0 @@\n-\n-  public boolean isSingletonBlob()      { return true; }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/SingletonBlob.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,4 +54,0 @@\n-\n-  public boolean isUncommonTrapStub() {\n-    return true;\n-  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/UncommonTrapBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,4 +88,0 @@\n-  public boolean isUpcallStub() {\n-    return true;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/UpcallStub.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,4 +36,0 @@\n-    public boolean isVtableBlob() {\n-        return true;\n-    }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/VtableBlob.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-        CodeBlob blob = cache.createCodeBlobWrapper(findStart(ptr));\n+        CodeBlob blob = cache.createCodeBlobWrapper(findStart(ptr), ptr);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/CodeHeap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,0 +165,6 @@\n+                            } else if (cb.isAdapterBlob()) {\n+                               out.println(\"<AdapterBlob>\");\n+                            } else if (cb.isVtableBlob()) {\n+                               out.println(\"<VtableBlob>\");\n+                            } else if (cb.isMHAdapterBlob()) {\n+                               out.println(\"<MethodHandlesAdapterBlob>\");\n@@ -167,8 +173,10 @@\n-                            } else if (cb.isDeoptimizationStub()) {\n-                               out.println(\"<DeoptimizationStub>\");\n-                            } else if (cb.isUncommonTrapStub()) {\n-                               out.println(\"<UncommonTrap>\");\n-                            } else if (cb.isExceptionStub()) {\n-                               out.println(\"<ExceptionStub>\");\n-                            } else if (cb.isSafepointStub()) {\n-                               out.println(\"<SafepointStub>\");\n+                            } else if (cb.isUpcallStub()) {\n+                               out.println(\"<UpcallStub>\");\n+                            } else if (cb.isDeoptimizationBlob()) {\n+                               out.println(\"<DeoptimizationBlob>\");\n+                            } else if (cb.isUncommonTrapBlob()) {\n+                               out.println(\"<UncommonTrapBlob>\");\n+                            } else if (cb.isExceptionBlob()) {\n+                               out.println(\"<ExceptionBlob>\");\n+                            } else if (cb.isSafepointBlob()) {\n+                               out.println(\"<SafepointBlob>\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/PStack.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"}]}