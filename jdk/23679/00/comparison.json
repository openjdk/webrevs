{"files":[{"patch":"@@ -1,1 +1,1 @@\n-compiler.jvmci.TestUncaughtErrorInCompileMethod\n+compiler.jvmci.TestUncaughtErrorInCompileMethod$Locator\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestUncaughtErrorInCompileMethod.config","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-public class TestUncaughtErrorInCompileMethod extends JVMCIServiceLocator {\n+public class TestUncaughtErrorInCompileMethod {\n@@ -89,0 +89,1 @@\n+            \"-XX:-UseJVMCINativeLibrary\",\n@@ -127,1 +128,1 @@\n-                \"at compiler.jvmci.TestUncaughtErrorInCompileMethod$1.createCompiler(TestUncaughtErrorInCompileMethod.java\",\n+                \"at compiler.jvmci.TestUncaughtErrorInCompileMethod$Locator$1.createCompiler(TestUncaughtErrorInCompileMethod.java\",\n@@ -175,9 +176,1 @@\n-    @Override\n-    public <S> S getProvider(Class<S> service) {\n-        if (service == JVMCICompilerFactory.class) {\n-            return service.cast(new JVMCICompilerFactory() {\n-                final AtomicInteger counter = new AtomicInteger();\n-                @Override\n-                public String getCompilerName() {\n-                    return \"ErrorCompiler\";\n-                }\n+    public static class Locator extends JVMCIServiceLocator {\n@@ -185,9 +178,8 @@\n-                @Override\n-                public JVMCICompiler createCompiler(JVMCIRuntime runtime) {\n-                    int attempt = counter.incrementAndGet();\n-                    CompilerCreationError e = new CompilerCreationError(attempt);\n-                    e.printStackTrace();\n-                    if (attempt >= 10) {\n-                        \/\/ Delay notifying the loop in main so that compilation failures\n-                        \/\/ have time to be reported by -XX:+PrintCompilation.\n-                        compilerCreationErrorOccurred = true;\n+        @Override\n+        public <S> S getProvider(Class<S> service) {\n+            if (service == JVMCICompilerFactory.class) {\n+                return service.cast(new JVMCICompilerFactory() {\n+                    final AtomicInteger counter = new AtomicInteger();\n+                    @Override\n+                    public String getCompilerName() {\n+                        return \"ErrorCompiler\";\n@@ -195,3 +187,16 @@\n-                    throw e;\n-                }\n-            });\n+\n+                    @Override\n+                    public JVMCICompiler createCompiler(JVMCIRuntime runtime) {\n+                        int attempt = counter.incrementAndGet();\n+                        CompilerCreationError e = new CompilerCreationError(attempt);\n+                        e.printStackTrace();\n+                        if (attempt >= 10) {\n+                            \/\/ Delay notifying the loop in main so that compilation failures\n+                            \/\/ have time to be reported by -XX:+PrintCompilation.\n+                            compilerCreationErrorOccurred = true;\n+                        }\n+                        throw e;\n+                    }\n+                });\n+            }\n+            return null;\n@@ -199,1 +204,0 @@\n-        return null;\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/TestUncaughtErrorInCompileMethod.java","additions":28,"deletions":24,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-compiler.jvmci.events.JvmciNotifyBootstrapFinishedEventTest\n+compiler.jvmci.events.JvmciNotifyBootstrapFinishedEventTest$Locator\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/events\/JvmciNotifyBootstrapFinishedEventTest.config","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-public class JvmciNotifyBootstrapFinishedEventTest extends JVMCIServiceLocator implements HotSpotVMEventListener {\n+public class JvmciNotifyBootstrapFinishedEventTest {\n@@ -68,1 +68,1 @@\n-    private static volatile int gotBoostrapNotification = 0;\n+    private static volatile int gotBootstrapNotification = 0;\n@@ -72,1 +72,1 @@\n-            Asserts.assertEQ(gotBoostrapNotification, 1, \"Did not receive expected number of bootstrap events\");\n+            Asserts.assertEQ(gotBootstrapNotification, 1, \"Did not receive expected number of bootstrap events\");\n@@ -74,1 +74,1 @@\n-            Asserts.assertEQ(gotBoostrapNotification, 0, \"Got unexpected bootstrap event\");\n+            Asserts.assertEQ(gotBootstrapNotification, 0, \"Got unexpected bootstrap event\");\n@@ -78,4 +78,10 @@\n-    @Override\n-    public <S> S getProvider(Class<S> service) {\n-        if (service == HotSpotVMEventListener.class) {\n-            return service.cast(this);\n+    public static class Locator extends JVMCIServiceLocator implements HotSpotVMEventListener {\n+        public Locator() {\n+            Thread.dumpStack();\n+        }\n+        @Override\n+        public <S> S getProvider(Class<S> service) {\n+            if (service == HotSpotVMEventListener.class) {\n+                return service.cast(this);\n+            }\n+            return null;\n@@ -83,2 +89,0 @@\n-        return null;\n-    }\n@@ -86,3 +90,4 @@\n-    @Override\n-    public void notifyBootstrapFinished() {\n-        gotBoostrapNotification++;\n+        @Override\n+        public void notifyBootstrapFinished() {\n+            gotBootstrapNotification++;\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/events\/JvmciNotifyBootstrapFinishedEventTest.java","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"}]}