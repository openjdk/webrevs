{"files":[{"patch":"@@ -568,0 +568,2 @@\n+                        \/\/ NarrowMem     - newly created projection (type includes instance_id) from projection created\n+                        \/\/                 before EA\n","filename":"src\/hotspot\/share\/opto\/escape.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -587,1 +587,1 @@\n-      MemNode::dump_adr_type(node, node->adr_type(), &s2);\n+      MemNode::dump_adr_type(node->adr_type(), &s2);\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1606,0 +1606,1 @@\n+      \/\/ See comment below in this if's other branch that explains why a raw memory MemBar is good enough.\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  dump_adr_type(this, _adr_type, st);\n+  dump_adr_type(_adr_type, st);\n@@ -111,1 +111,1 @@\n-void MemNode::dump_adr_type(const Node* mem, const TypePtr* adr_type, outputStream *st) {\n+void MemNode::dump_adr_type(const TypePtr* adr_type, outputStream* st) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-  static void dump_adr_type(const Node* mem, const TypePtr* adr_type, outputStream *st);\n+  static void dump_adr_type(const TypePtr* adr_type, outputStream* st);\n@@ -1383,0 +1383,2 @@\n+  \/\/ Used during matching: find the MachProj memory projection if there's one. Expectation is that there should be at\n+  \/\/ most one.\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -265,12 +265,0 @@\n-void NarrowMemProjNode::dump_adr_type(outputStream* st) const {\n-  st->print(\" @\"); _adr_type->dump_on(st);\n-  Compile* C = Compile::current();\n-  Compile::AliasType* atp = C->alias_type(_adr_type);\n-  ciField* field = atp->field();\n-  if (field != nullptr) {\n-    st->print(\", name=\");\n-    field->print_name_on(st);\n-  }\n-  st->print(\", idx=%d;\", atp->index());\n-}\n-\n@@ -279,1 +267,1 @@\n-  dump_adr_type(st);\n+  MemNode::dump_adr_type(_adr_type, st);\n@@ -284,1 +272,1 @@\n-  dump_adr_type(st);\n+  MemNode::dump_adr_type(_adr_type, st);\n","filename":"src\/hotspot\/share\/opto\/multnode.cpp","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -227,1 +227,0 @@\n-  void dump_adr_type(outputStream* st) const;\n","filename":"src\/hotspot\/share\/opto\/multnode.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2594,1 +2594,1 @@\n-    MemNode::dump_adr_type(this, adr_type(), st);\n+    MemNode::dump_adr_type(adr_type(), st);\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2595,0 +2595,4 @@\n+  auto enqueue_init_mem_projs = [&](ProjNode* proj) {\n+    add_users_to_worklist0(proj, worklist);\n+    return MultiNode::CONTINUE;\n+  };\n@@ -2599,5 +2603,1 @@\n-      auto enqueue = [&](ProjNode* proj) {\n-        add_users_to_worklist0(proj, worklist);\n-        return MultiNode::CONTINUE;\n-      };\n-      init->apply_to_projs(enqueue, TypeFunc::Memory);\n+      init->apply_to_projs(enqueue_init_mem_projs, TypeFunc::Memory);\n@@ -2618,5 +2618,1 @@\n-    auto enqueue = [&](ProjNode* proj) {\n-      add_users_to_worklist0(proj, worklist);\n-      return MultiNode::CONTINUE;\n-    };\n-    init->apply_to_projs(enqueue, TypeFunc::Memory);\n+    init->apply_to_projs(enqueue_init_mem_projs, TypeFunc::Memory);\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @run main\/othervm -XX:-BackgroundCompilation TestEarlyEliminationOfAllocationWithoutUse\n- * @run main\/othervm TestEarlyEliminationOfAllocationWithoutUse\n+ * @run main\/othervm -XX:-BackgroundCompilation compiler.macronodes.TestEarlyEliminationOfAllocationWithoutUse\n+ * @run main\/othervm compiler.macronodes.TestEarlyEliminationOfAllocationWithoutUse\n@@ -32,0 +32,1 @@\n+package compiler.macronodes;\n","filename":"test\/hotspot\/jtreg\/compiler\/macronodes\/TestEarlyEliminationOfAllocationWithoutUse.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}