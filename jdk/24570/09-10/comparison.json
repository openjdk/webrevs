{"files":[{"patch":"@@ -1309,11 +1309,1 @@\n-    \/\/ Remove NarrowMemProjs and only keep a single Proj: NarrowMemProjs are only useful as long as the Allocate node\n-    \/\/ exists and can be removed.\n-    \/\/ To make this logic straightforward, create a new Proj. ProjNode constructor needs a proper input.\n-    Node* new_mem_proj = new ProjNode(init, TypeFunc::Memory);\n-    \/\/ clear input so new Proj is not one of the uses of init\n-    new_mem_proj->set_req(0, nullptr);\n-    \/\/ replace uses (the existing Proj and all NarrowMemProj) with the new Proj\n-    init->replace_mem_projs_by(new_mem_proj, &_igvn);\n-    \/\/ make Proj a use of the Initialize node again\n-    new_mem_proj->set_req(0, init);\n-    transform_later(new_mem_proj);\n+    init->remove_narrow_mem_projs(_igvn);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -4625,0 +4625,22 @@\n+void InitializeNode::remove_narrow_mem_projs(PhaseIterGVN &igvn) {\n+  \/\/ Remove NarrowMemProjs and only keep a single Proj: NarrowMemProjs are only useful as long as the Allocate node\n+  \/\/ exists and can be removed.\n+  auto find_raw_mem_proj = [&](ProjNode* proj) {\n+    if (proj->Opcode() == Op_Proj) {\n+      assert(proj->adr_type() == TypeRawPtr::BOTTOM, \"one mem Proj with raw memory tpe\");\n+      return BREAK_AND_RETURN_CURRENT_PROJ;\n+    }\n+    assert(proj->adr_type() != TypeRawPtr::BOTTOM && proj->is_NarrowMemProj(), \"other projs are NarrowMemProjs for fields\/array elements\");\n+    return CONTINUE;\n+  };\n+  Node* raw_mem_proj = apply_to_projs(find_raw_mem_proj, TypeFunc::Memory);\n+  DUIterator_Fast imax, i = fast_outs(imax);\n+  auto remove_narrow_mem_projs = [&](NarrowMemProjNode* proj) {\n+    igvn.replace_node(proj, raw_mem_proj);\n+    --i; --imax;\n+    return CONTINUE;\n+  };\n+\n+  apply_to_narrow_mem_projs(imax, i, remove_narrow_mem_projs);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1387,0 +1387,6 @@\n+  template <class Callback> ProjNode* apply_to_narrow_mem_projs(DUIterator_Fast& imax, DUIterator_Fast& i, Callback callback) const {\n+    return apply_to_narrow_mem_projs_any_iterator<Callback, UsesIteratorFast>(UsesIteratorFast(imax, i, this), callback);\n+  }\n+\n+  void remove_narrow_mem_projs(PhaseIterGVN& igvn);\n+\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}