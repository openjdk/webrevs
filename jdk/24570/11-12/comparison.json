{"files":[{"patch":"@@ -3645,1 +3645,1 @@\n-    \/\/ Add an edge in the MergeMem for the header fields so an access to one of those has correct memory state\n+    \/\/ Add an edge in the MergeMem for the header fields so an access to one of those has correct memory state.\n@@ -3647,1 +3647,1 @@\n-    \/\/ multiple projection as a result.\n+    \/\/ multiple projections as a result.\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1623,1 +1623,1 @@\n-      \/\/ What we want is to prevent the compiler and the cpu from re-ordering the stores that initialize this object\n+      \/\/ What we want is to prevent the compiler and the CPU from re-ordering the stores that initialize this object\n@@ -1628,1 +1628,1 @@\n-      \/\/ object reference is indirectly control dependent on the Initialize node), preventing reordering by the cpu is\n+      \/\/ object reference is indirectly control dependent on the Initialize node), preventing reordering by the CPU is\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-      return _node->fast_out(_i);;\n+      return _node->fast_out(_i);\n@@ -90,1 +90,1 @@\n-      return _node->out(_i);;\n+      return _node->out(_i);\n","filename":"src\/hotspot\/share\/opto\/multnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- *          through the MergeMem and sees the initial stae. That way, also the linked array slice\n+ *          through the MergeMem and sees the initial state. That way, also the linked array slice\n","filename":"test\/hotspot\/jtreg\/compiler\/macronodes\/TestEliminationOfAllocationWithoutUse.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}