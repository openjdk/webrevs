{"files":[{"patch":"@@ -47,4 +47,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -85,4 +81,2 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean isWindows = AccessController.doPrivileged(\n-        (PrivilegedAction<Boolean>)()->System.getProperty(\"os.name\")\n-                                             .startsWith(\"Windows\"));\n+    private static final boolean isWindows = System.getProperty(\"os.name\")\n+                                             .startsWith(\"Windows\");\n@@ -171,3 +165,1 @@\n-        @SuppressWarnings(\"removal\")\n-        boolean writeable = AccessController.doPrivileged(\n-            (PrivilegedAction<Boolean>)()->Files.isWritable(zfpath));\n+        boolean writeable = Files.isWritable(zfpath);\n@@ -252,12 +244,4 @@\n-                PrivilegedExceptionAction<UserPrincipal> pa = ()->Files.getOwner(zfpath);\n-                return AccessController.doPrivileged(pa);\n-            } catch (UnsupportedOperationException | PrivilegedActionException e) {\n-                if (e instanceof UnsupportedOperationException ||\n-                    e.getCause() instanceof NoSuchFileException)\n-                {\n-                    PrivilegedAction<String> pa = ()->System.getProperty(\"user.name\");\n-                    String userName = AccessController.doPrivileged(pa);\n-                    return ()->userName;\n-                } else {\n-                    throw new IOException(e);\n-                }\n+                return Files.getOwner(zfpath);\n+            } catch (UnsupportedOperationException | NoSuchFileException e) {\n+                String userName = System.getProperty(\"user.name\");\n+                return ()->userName;\n@@ -294,10 +278,3 @@\n-                PrivilegedExceptionAction<GroupPrincipal> pa = ()->zfpv.readAttributes().group();\n-                return AccessController.doPrivileged(pa);\n-            } catch (UnsupportedOperationException | PrivilegedActionException e) {\n-                if (e instanceof UnsupportedOperationException ||\n-                    e.getCause() instanceof NoSuchFileException)\n-                {\n-                    return defaultOwner::getName;\n-                } else {\n-                    throw new IOException(e);\n-                }\n+                return zfpv.readAttributes().group();\n+            } catch (UnsupportedOperationException | NoSuchFileException e) {\n+                return defaultOwner::getName;\n@@ -483,3 +460,1 @@\n-            AccessController.doPrivileged((PrivilegedExceptionAction<Void>)() -> {\n-                sync(); return null;\n-            });\n+            sync();\n@@ -488,2 +463,0 @@\n-        } catch (PrivilegedActionException e) {\n-            throw (IOException)e.getException();\n@@ -515,4 +488,2 @@\n-                    AccessController.doPrivileged(\n-                        (PrivilegedExceptionAction<Boolean>)() -> Files.deleteIfExists(p));\n-                } catch (PrivilegedActionException e) {\n-                    IOException x = (IOException)e.getException();\n+                    Files.deleteIfExists(p);\n+                } catch (IOException x) {\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":13,"deletions":42,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,3 +42,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -323,8 +320,1 @@\n-            Path tempPath = zfpath;\n-            PrivilegedExceptionAction<Path> action = tempPath::toRealPath;\n-            try {\n-                zfpath = AccessController.doPrivileged(action);\n-            } catch (PrivilegedActionException e) {\n-                throw (IOException) e.getException();\n-            }\n-            filesystems.remove(zfpath, zfs);\n+            filesystems.remove(zfpath.toRealPath(), zfs);\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystemProvider.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,4 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -222,9 +218,5 @@\n-            try {\n-                PrivilegedExceptionAction<String> pa = ()->Files.getOwner(zf).getName();\n-                return AccessController.doPrivileged(pa);\n-            } catch (UnsupportedOperationException e) {\n-                \/\/ if we can't get the owner of the file, we fall back to system property user.name\n-                PrivilegedAction<String> pa = ()->System.getProperty(\"user.name\");\n-                return AccessController.doPrivileged(pa);\n-            }\n-        } catch (PrivilegedActionException | SecurityException e) {\n+            return Files.getOwner(zf).getName();\n+        } catch (UnsupportedOperationException | NoSuchFileException e) {\n+            \/\/ if we can't get the owner of the file, we fall back to system property user.name\n+            return System.getProperty(\"user.name\");\n+        } catch (IOException e) {\n@@ -232,1 +224,1 @@\n-                \") when running a privileged operation to get the default owner.\");\n+                    \") when running a privileged operation to get the default owner.\");\n@@ -239,8 +231,2 @@\n-            try {\n-                PosixFileAttributeView zfpv = Files.getFileAttributeView(zf, PosixFileAttributeView.class);\n-                if (zfpv == null) {\n-                    return defaultOwner;\n-                }\n-                PrivilegedExceptionAction<String> pa = ()->zfpv.readAttributes().group().getName();\n-                return AccessController.doPrivileged(pa);\n-            } catch (UnsupportedOperationException e) {\n+            PosixFileAttributeView zfpv = Files.getFileAttributeView(zf, PosixFileAttributeView.class);\n+            if (zfpv == null) {\n@@ -249,1 +235,4 @@\n-        } catch (PrivilegedActionException | SecurityException e) {\n+            return zfpv.readAttributes().group().getName();\n+        } catch (UnsupportedOperationException | NoSuchFileException e) {\n+            return defaultOwner;\n+        } catch (IOException e) {\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestPosix.java","additions":12,"deletions":23,"binary":false,"changes":35,"status":"modified"}]}