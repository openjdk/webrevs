{"files":[{"patch":"@@ -385,2 +385,1 @@\n-    if (os::release_memory(extra_base, begin_offset))\n-    {\n+    if (os::release_memory(extra_base, begin_offset)) {\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1092,1 +1092,1 @@\n-    if (class_space_rs.is_reserved()) {\n+    if (Metaspace::using_class_space() && class_space_rs.is_reserved()) {\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,2 +62,0 @@\n-  \/\/  * _alignment       - Not to be changed after initialization\n-  \/\/  * _executable      - Not to be changed after initialization\n@@ -75,2 +73,0 @@\n-  MEMFLAGS nmt_flag() const { assert(is_reserved(), \"Memory region is not reserved.\"); assert(_flag != mtNone, \"Memory flag is not set.\"); return _flag; }\n-\n@@ -92,7 +88,9 @@\n-  size_t size()            const { assert(is_reserved(), \"Memory region is not reserved.\"); return _size;      }\n-  char*  end()             const { assert(is_reserved(), \"Memory region is not reserved.\"); return _base + _size; }\n-  size_t alignment()       const { assert(is_reserved(), \"Memory region is not reserved.\"); return _alignment; }\n-  size_t page_size()       const { assert(is_reserved(), \"Memory region is not reserved.\"); return _page_size; }\n-  bool   special()         const { assert(is_reserved(), \"Memory region is not reserved.\"); return _special;   }\n-  bool   executable()      const { assert(is_reserved(), \"Memory region is not reserved.\"); return _executable;   }\n-  size_t noaccess_prefix() const { assert(is_reserved(), \"Memory region is not reserved.\"); return _noaccess_prefix;   }\n+  size_t size()            const { assert(is_reserved(), \"Fields not intialized\"); return _size;      }\n+  char*  end()             const { assert(is_reserved(), \"Fields not intialized\"); return _base + _size; }\n+  size_t alignment()       const { assert(is_reserved(), \"Fields not intialized\"); return _alignment; }\n+  size_t page_size()       const { assert(is_reserved(), \"Fields not intialized\"); return _page_size; }\n+  bool   special()         const { assert(is_reserved(), \"Fields not intialized\"); return _special;   }\n+  bool   executable()      const { assert(is_reserved(), \"Fields not intialized\"); return _executable;   }\n+  size_t noaccess_prefix() const { assert(is_reserved(), \"Fields not intialized\"); return _noaccess_prefix;   }\n+  MEMFLAGS nmt_flag()      const { assert(is_reserved(), \"Fields not intialized\"); assert(_flag != mtNone, \"Memory flag is not set.\"); return _flag; }\n+\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"}]}