{"files":[{"patch":"@@ -72,1 +72,1 @@\n-    result = os::attempt_reserve_memory_at((char*)immediate, size, false);\n+    result = os::attempt_reserve_memory_at((char*)immediate, size, false, mtClass);\n@@ -115,1 +115,1 @@\n-    result = os::reserve_memory_aligned(size, alignment, false);\n+    result = os::reserve_memory_aligned(size, alignment, !ExecMem, mtClass);\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedKlass_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1808,1 +1808,1 @@\n-void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint) {\n+void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag) {\n@@ -1850,1 +1850,1 @@\n-char* os::pd_reserve_memory(size_t bytes, bool exec) {\n+char* os::pd_reserve_memory(size_t bytes, bool exec, MEMFLAGS flag) {\n@@ -1999,1 +1999,1 @@\n-char* os::pd_reserve_memory_special(size_t bytes, size_t alignment, size_t page_size, char* req_addr, bool exec) {\n+char* os::pd_reserve_memory_special(size_t bytes, size_t alignment, size_t page_size, char* req_addr, bool exec, MEMFLAGS flag) {\n@@ -2018,1 +2018,1 @@\n-char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc, MEMFLAGS flag) {\n@@ -2036,1 +2036,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec) {\n+char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec, MEMFLAGS flag) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-  _base = (uintptr_t)os::reserve_memory(max_capacity);\n+  _base = (uintptr_t)os::reserve_memory(max_capacity, !ExecMem, mtJavaHeap);\n","filename":"src\/hotspot\/os\/bsd\/gc\/x\/xPhysicalMemoryBacking_bsd.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-  _base = (uintptr_t)os::reserve_memory(max_capacity);\n+  _base = (uintptr_t)os::reserve_memory(max_capacity, !ExecMem, mtJavaHeap);\n@@ -106,1 +106,1 @@\n-                      untype(offset) \/ M, untype(to_zoffset_end(offset, length)) \/ M, length \/ M);\n+                      untype(offset) \/ M, untype(offset) + length \/ M, length \/ M);\n@@ -153,1 +153,1 @@\n-                      untype(offset) \/ M, untype(to_zoffset_end(offset, length)) \/ M, length \/ M);\n+                      untype(offset) \/ M, untype(offset) + length \/ M, length \/ M);\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zPhysicalMemoryBacking_bsd.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1671,1 +1671,1 @@\n-void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint) {\n+void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag) {\n@@ -1769,1 +1769,1 @@\n-  return os::commit_memory(addr, size, !ExecMem);\n+  return os::commit_memory(addr, size, !ExecMem, mtThreadStack);\n@@ -1775,1 +1775,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem, mtThreadStack);\n@@ -1812,1 +1812,1 @@\n-char* os::pd_reserve_memory(size_t bytes, bool exec) {\n+char* os::pd_reserve_memory(size_t bytes, bool exec, MEMFLAGS flag) {\n@@ -1872,1 +1872,1 @@\n-char* os::pd_reserve_memory_special(size_t bytes, size_t alignment, size_t page_size, char* req_addr, bool exec) {\n+char* os::pd_reserve_memory_special(size_t bytes, size_t alignment, size_t page_size, char* req_addr, bool exec, MEMFLAGS flag) {\n@@ -1891,1 +1891,1 @@\n-char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc, MEMFLAGS flag) {\n@@ -1893,1 +1893,1 @@\n-  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes, !ExecMem);\n+  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes, !ExecMem, flag);\n@@ -1905,1 +1905,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec) {\n+char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec, MEMFLAGS flag) {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3026,1 +3026,1 @@\n-void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint) {\n+void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag) {\n@@ -3033,1 +3033,1 @@\n-    commit_memory(addr, bytes, alignment_hint, !ExecMem);\n+    commit_memory(addr, bytes, alignment_hint, !ExecMem, flag);\n@@ -3640,1 +3640,1 @@\n-  return os::commit_memory(addr, size, !ExecMem);\n+  return os::commit_memory(addr, size, !ExecMem, mtThreadStack);\n@@ -3656,1 +3656,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem, mtThreadStack);\n@@ -3760,1 +3760,1 @@\n-char* os::pd_reserve_memory(size_t bytes, bool exec) {\n+char* os::pd_reserve_memory(size_t bytes, bool exec, MEMFLAGS flag) {\n@@ -4217,1 +4217,1 @@\n-                                    char* req_addr, bool exec) {\n+                                    char* req_addr, bool exec, MEMFLAGS flag) {\n@@ -4252,1 +4252,1 @@\n-char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc, MEMFLAGS flag) {\n@@ -4254,1 +4254,1 @@\n-  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes, !ExecMem);\n+  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes, !ExecMem, flag);\n@@ -4266,1 +4266,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec) {\n+char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, bool exec, MEMFLAGS flag) {\n@@ -4658,1 +4658,1 @@\n-  char* codebuf = os::attempt_reserve_memory_at(hint, page_size);\n+  char* codebuf = os::attempt_reserve_memory_at(hint, page_size, !ExecMem, mtInternal);\n@@ -4666,1 +4666,1 @@\n-    codebuf = os::attempt_reserve_memory_at(hint, page_size);\n+    codebuf = os::attempt_reserve_memory_at(hint, page_size, !ExecMem, mtInternal);\n@@ -4669,1 +4669,1 @@\n-  if ((codebuf == nullptr) || (!os::commit_memory(codebuf, page_size, true))) {\n+  if ((codebuf == nullptr) || (!os::commit_memory(codebuf, page_size, ExecMem, mtInternal))) {\n@@ -4673,2 +4673,0 @@\n-  MemTracker::record_virtual_memory_type((address)codebuf, mtInternal);\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -385,1 +385,5 @@\n-      os::release_memory(extra_base, begin_offset);\n+    if (os::release_memory(extra_base, begin_offset))\n+    {\n+      ThreadCritical tc;\n+      MemTracker::record_virtual_memory_release((address)extra_base, begin_offset, true \/*extra memory*\/);\n+    }\n@@ -389,1 +393,4 @@\n-      os::release_memory(extra_base + begin_offset + size, end_offset);\n+    if (os::release_memory(extra_base + begin_offset + size, end_offset)) {\n+      ThreadCritical tc;\n+      MemTracker::record_virtual_memory_release((address)(extra_base + begin_offset + size), end_offset, true \/*extra memory*\/);\n+    }\n@@ -398,1 +405,1 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec, MEMFLAGS flag) {\n@@ -400,1 +407,1 @@\n-  char* extra_base = os::reserve_memory(extra_size, exec);\n+  char* extra_base = os::reserve_memory(extra_size, exec, flag);\n@@ -424,1 +431,1 @@\n-  MemTracker::record_virtual_memory_commit((address)aligned_base, size, CALLER_PC);\n+  MemTracker::record_virtual_memory_commit((address)aligned_base, size, CALLER_PC, flag);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-  char* mapAddress = os::reserve_memory(size);\n+  char* mapAddress = os::reserve_memory(size, !ExecMem, mtInternal);\n@@ -75,1 +75,1 @@\n-  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n+  if (!os::commit_memory(mapAddress, size, !ExecMem, mtInternal)) {\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2758,1 +2758,1 @@\n-                            !ExecMem);\n+                            !ExecMem, mtThreadStack);\n@@ -3120,1 +3120,1 @@\n-static char* allocate_pages_individually(size_t bytes, char* addr, DWORD flags,\n+static char* allocate_pages_individually(size_t bytes, char* addr, DWORD alloc_type,\n@@ -3122,0 +3122,1 @@\n+                                         MEMFLAGS flag,\n@@ -3145,1 +3146,1 @@\n-  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC);\n+  MemTracker::record_virtual_memory_reserve((address)p_buf, size_of_reserve, CALLER_PC, flag);\n@@ -3187,1 +3188,1 @@\n-                                      flags,\n+                                      alloc_type,\n@@ -3193,1 +3194,1 @@\n-        p_new = (char *)virtualAllocExNuma(hProc, next_alloc_addr, bytes_to_rq, flags, prot, node);\n+        p_new = (char *)virtualAllocExNuma(hProc, next_alloc_addr, bytes_to_rq, alloc_type, prot, node);\n@@ -3206,1 +3207,1 @@\n-                                                  bytes_to_release, CALLER_PC);\n+                                                  bytes_to_release, CALLER_PC, flag);\n@@ -3223,2 +3224,2 @@\n-  if ((flags & MEM_COMMIT) != 0) {\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC);\n+  if ((alloc_type & MEM_COMMIT) != 0) {\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)p_buf, bytes, CALLER_PC, flag);\n@@ -3226,1 +3227,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve((address)p_buf, bytes, CALLER_PC, flag);\n@@ -3354,1 +3355,1 @@\n-static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int file_desc, MEMFLAGS flag = mtNone) {\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int file_desc, MEMFLAGS flag) {\n@@ -3368,1 +3369,1 @@\n-                                         os::reserve_memory(extra_size, false, flag);\n+                                         os::reserve_memory(extra_size, !ExecMem, flag);\n@@ -3385,1 +3386,1 @@\n-                                     os::attempt_reserve_memory_at(aligned_base, size, false, flag);\n+                                     os::attempt_reserve_memory_at(aligned_base, size, !ExecMem, flag);\n@@ -3393,1 +3394,1 @@\n-char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec) {\n+char* os::reserve_memory_aligned(size_t size, size_t alignment, bool exec, MEMFLAGS flag) {\n@@ -3395,1 +3396,1 @@\n-  return map_or_reserve_memory_aligned(size, alignment, -1 \/* file_desc *\/);\n+  return map_or_reserve_memory_aligned(size, alignment, -1 \/* file_desc *\/, flag);\n@@ -3402,2 +3403,2 @@\n-char* os::pd_reserve_memory(size_t bytes, bool exec) {\n-  return pd_attempt_reserve_memory_at(nullptr \/* addr *\/, bytes, exec);\n+char* os::pd_reserve_memory(size_t bytes, bool exec, MEMFLAGS flag) {\n+  return pd_attempt_reserve_memory_at(nullptr \/* addr *\/, bytes, exec, flag);\n@@ -3408,1 +3409,1 @@\n-char* os::pd_attempt_reserve_memory_at(char* addr, size_t bytes, bool exec) {\n+char* os::pd_attempt_reserve_memory_at(char* addr, size_t bytes, bool exec, MEMFLAGS flag) {\n@@ -3423,1 +3424,1 @@\n-    res = allocate_pages_individually(bytes, addr, MEM_RESERVE, PAGE_READWRITE);\n+    res = allocate_pages_individually(bytes, addr, MEM_RESERVE, PAGE_READWRITE, flag);\n@@ -3444,1 +3445,1 @@\n-char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc) {\n+char* os::pd_attempt_map_memory_to_file_at(char* requested_addr, size_t bytes, int file_desc, MEMFLAGS flag) {\n@@ -3460,1 +3461,1 @@\n-static char* reserve_large_pages_individually(size_t size, char* req_addr, bool exec) {\n+static char* reserve_large_pages_individually(size_t size, char* req_addr, bool exec, MEMFLAGS flag) {\n@@ -3464,1 +3465,1 @@\n-  const DWORD flags = MEM_RESERVE | MEM_COMMIT | MEM_LARGE_PAGES;\n+  const DWORD alloc_type = MEM_RESERVE | MEM_COMMIT | MEM_LARGE_PAGES;\n@@ -3466,1 +3467,1 @@\n-  char * p_buf = allocate_pages_individually(size, req_addr, flags, prot, LargePagesIndividualAllocationInjectError);\n+  char * p_buf = allocate_pages_individually(size, req_addr, alloc_type, prot, flag, LargePagesIndividualAllocationInjectError);\n@@ -3490,1 +3491,1 @@\n-static char* reserve_large_pages(size_t size, char* req_addr, bool exec) {\n+static char* reserve_large_pages(size_t size, char* req_addr, bool exec, MEMFLAGS flag) {\n@@ -3495,1 +3496,1 @@\n-    return reserve_large_pages_individually(size, req_addr, exec);\n+    return reserve_large_pages_individually(size, req_addr, exec, flag);\n@@ -3512,1 +3513,1 @@\n-static char* reserve_large_pages_aligned(size_t size, size_t alignment, bool exec) {\n+static char* reserve_large_pages_aligned(size_t size, size_t alignment, bool exec, MEMFLAGS flag) {\n@@ -3525,1 +3526,1 @@\n-    aligned_address = reserve_large_pages(size, aligned_address, exec);\n+    aligned_address = reserve_large_pages(size, aligned_address, exec, flag);\n@@ -3538,1 +3539,1 @@\n-                                    bool exec) {\n+                                    bool exec, MEMFLAGS flag) {\n@@ -3554,1 +3555,1 @@\n-    return reserve_large_pages_aligned(bytes, alignment, exec);\n+    return reserve_large_pages_aligned(bytes, alignment, exec, flag);\n@@ -3558,1 +3559,1 @@\n-  return reserve_large_pages(bytes, addr, exec);\n+  return reserve_large_pages(bytes, addr, exec, flag);\n@@ -3724,1 +3725,1 @@\n-  return os::commit_memory(addr, size, !ExecMem);\n+  return os::commit_memory(addr, size, !ExecMem, mtThreadStack);\n@@ -3728,1 +3729,1 @@\n-  return os::uncommit_memory(addr, size);\n+  return os::uncommit_memory(addr, size, !ExecMem, mtThreadStack);\n@@ -3779,1 +3780,1 @@\n-                          \"cannot commit protection page\");\n+                          mtInternal, \"cannot commit protection page\");\n@@ -3819,1 +3820,1 @@\n-void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint) { }\n+void os::pd_free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag) { }\n@@ -5107,3 +5108,0 @@\n-    \/\/ Record virtual memory allocation\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)addr, bytes, CALLER_PC);\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":34,"deletions":36,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-  char* mapAddress = os::reserve_memory(size);\n+  char* mapAddress = os::reserve_memory(size, !ExecMem, mtInternal);\n@@ -65,1 +65,1 @@\n-  if (!os::commit_memory(mapAddress, size, !ExecMem)) {\n+  if (!os::commit_memory(mapAddress, size, !ExecMem, mtInternal)) {\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -329,1 +329,1 @@\n-  ReservedSpace rs(buffer_size, MetaspaceShared::core_region_alignment(), os::vm_page_size());\n+  ReservedSpace rs(buffer_size, MetaspaceShared::core_region_alignment(), os::vm_page_size(), mtClassShared);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1713,3 +1713,3 @@\n-static char* map_memory(int fd, const char* file_name, size_t file_offset,\n-                        char *addr, size_t bytes, bool read_only,\n-                        bool allow_exec, MEMFLAGS flags = mtNone) {\n+static char* map_and_pretouch_memory(int fd, const char* file_name, size_t file_offset,\n+                                     char *addr, size_t bytes, bool read_only,\n+                                     bool allow_exec, MEMFLAGS flags) {\n@@ -1744,1 +1744,1 @@\n-                              r->allow_exec());\n+                              r->allow_exec(), mtClassShared);\n@@ -1803,1 +1803,1 @@\n-    if (!os::commit_memory(base, size, r->allow_exec())) {\n+    if (!os::commit_memory(base, size, r->allow_exec(), mtClassShared)) {\n@@ -1863,3 +1863,3 @@\n-    char* base = map_memory(_fd, _full_path, r->file_offset(),\n-                            requested_addr, size, r->read_only(),\n-                            r->allow_exec(), mtClassShared);\n+    char* base = map_and_pretouch_memory(_fd, _full_path, r->file_offset(),\n+                                         requested_addr, size, r->read_only(),\n+                                         r->allow_exec(), mtClassShared);\n@@ -1892,2 +1892,2 @@\n-  char* bitmap_base = map_memory(_fd, _full_path, r->file_offset(),\n-                                 requested_addr, r->used_aligned(), read_only, allow_exec, mtClassShared);\n+  char* bitmap_base = map_and_pretouch_memory(_fd, _full_path, r->file_offset(),\n+                                              requested_addr, r->used_aligned(), read_only, allow_exec, mtClassShared);\n@@ -2179,0 +2179,1 @@\n+  \/\/ So we pass the mtJavaHeap to tell MemTracker the type of the already tracked memory.\n@@ -2180,3 +2181,3 @@\n-  char* base = map_memory(_fd, _full_path, r->file_offset(),\n-                          addr, _mapped_heap_memregion.byte_size(), r->read_only(),\n-                          r->allow_exec());\n+  char* base = map_and_pretouch_memory(_fd, _full_path, r->file_offset(),\n+                                       addr, _mapped_heap_memregion.byte_size(), r->read_only(),\n+                                       r->allow_exec(), mtJavaHeap);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-  _symbol_rs = ReservedSpace(symbol_rs_size);\n+  _symbol_rs = ReservedSpace(symbol_rs_size, mtClassShared);\n@@ -1088,4 +1088,8 @@\n-    log_info(cds)(\"Reserved archive_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n-                   p2i(archive_space_rs.base()), p2i(archive_space_rs.end()), archive_space_rs.size());\n-    log_info(cds)(\"Reserved class_space_rs   [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n-                   p2i(class_space_rs.base()), p2i(class_space_rs.end()), class_space_rs.size());\n+    if (archive_space_rs.is_reserved()) {\n+      log_info(cds)(\"Reserved archive_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n+                    p2i(archive_space_rs.base()), p2i(archive_space_rs.end()), archive_space_rs.size());\n+    }\n+    if (class_space_rs.is_reserved()) {\n+      log_info(cds)(\"Reserved class_space_rs   [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n+                    p2i(class_space_rs.base()), p2i(class_space_rs.end()), class_space_rs.size());\n+    }\n@@ -1165,0 +1169,1 @@\n+          assert(class_space_rs.is_reserved(), \"Memory region should be reserved.\");\n@@ -1280,1 +1285,1 @@\n-                                     os::vm_page_size(), (char*)base_address);\n+                                     os::vm_page_size(), mtClassShared, (char*)base_address);\n@@ -1284,2 +1289,0 @@\n-      \/\/ Register archive space with NMT.\n-      MemTracker::record_virtual_memory_type(archive_space_rs.base(), mtClassShared);\n@@ -1328,1 +1331,1 @@\n-                                       os::vm_page_size(), (char*)base_address);\n+                                       os::vm_page_size(), mtClassShared, (char*)base_address);\n@@ -1330,1 +1333,1 @@\n-                                       os::vm_page_size(), (char*)ccs_base);\n+                                       os::vm_page_size(), mtClass, (char*)ccs_base);\n@@ -1336,3 +1339,0 @@\n-    \/\/ NMT: fix up the space tags\n-    MemTracker::record_virtual_memory_type(archive_space_rs.base(), mtClassShared);\n-    MemTracker::record_virtual_memory_type(class_space_rs.base(), mtClass);\n@@ -1341,2 +1341,2 @@\n-      total_space_rs = ReservedSpace(total_range_size, base_address_alignment,\n-                                     os::vm_page_size(), (char*) base_address);\n+      total_space_rs = ReservedSpace(total_range_size, archive_space_alignment,\n+                                     os::vm_page_size(), mtClassShared, (char*) base_address);\n@@ -1370,0 +1370,2 @@\n+  assert(archive_space_rs.is_reserved(), \"Archive space is not reserved.\");\n+  assert(class_space_rs.is_reserved(), \"Class space is not reserved.\");\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,1 +243,1 @@\n-  _base = os::map_memory(_fd, filename, 0, nullptr, _size, true, false);\n+  _base = os::map_memory(_fd, filename, 0, nullptr, _size, true, false, mtClassShared);\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1211,1 +1211,1 @@\n-  ReservedSpace rs(size, preferred_page_size);\n+  ReservedSpace rs(size, preferred_page_size, mtGC);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,1 +138,1 @@\n-  os::commit_memory_or_exit(start_addr, size, _page_size, false, \"G1 virtual space\");\n+  os::commit_memory_or_exit(start_addr, size, _page_size, !ExecMem, mtGC, \"G1 virtual space\");\n@@ -145,1 +145,1 @@\n-  os::commit_memory_or_exit(aligned_end_address, _tail_size, os::vm_page_size(), false, \"G1 virtual space\");\n+  os::commit_memory_or_exit(aligned_end_address, _tail_size, os::vm_page_size(), !ExecMem, mtGC, \"G1 virtual space\");\n@@ -204,1 +204,1 @@\n-  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)));\n+  os::uncommit_memory(start_addr, pointer_delta(bounded_end_addr(end_page), start_addr, sizeof(char)), !ExecMem, mtGC);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PageBasedVirtualSpace.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-  _region_commit_map(rs.size() * commit_factor \/ region_granularity, mtGC),\n+  _region_commit_map(rs.size() * commit_factor \/ region_granularity, type),\n@@ -50,2 +50,0 @@\n-\n-  MemTracker::record_virtual_memory_type((address)rs.base(), type);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -216,1 +216,1 @@\n-    os::free_memory((char*)aligned_region.start(), aligned_region.byte_size(), os_align);\n+    os::free_memory((char*)aligned_region.start(), aligned_region.byte_size(), os_align, mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-        os::free_memory((char*)start, size, page_size);\n+        os::free_memory((char*)start, size, page_size, mtJavaHeap);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  ReservedSpace backing_store(bytes_to_reserve);\n+  ReservedSpace backing_store(bytes_to_reserve, mtGC);\n@@ -54,1 +54,0 @@\n-  MemTracker::record_virtual_memory_type(backing_store.base(), mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz);\n+  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz, mtGC);\n@@ -57,2 +57,0 @@\n-  MemTracker::record_virtual_memory_type((address)rs.base(), mtGC);\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -443,1 +443,1 @@\n-  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz);\n+  ReservedSpace rs(_reserved_byte_size, rs_align, page_sz, mtGC);\n@@ -447,2 +447,0 @@\n-  MemTracker::record_virtual_memory_type((address)rs.base(), mtGC);\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-         os::commit_memory(base_addr, bytes, alignment(), !ExecMem);\n+         os::commit_memory(base_addr, bytes, alignment(), !ExecMem, mtGC);\n@@ -98,1 +98,1 @@\n-  bool result = special() || os::uncommit_memory(base_addr, bytes);\n+  bool result = special() || os::uncommit_memory(base_addr, bytes, !ExecMem, mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psVirtualspace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  ReservedSpace rs(size);\n+  ReservedSpace rs(size, mtGC);\n@@ -45,2 +45,0 @@\n-  MemTracker::record_virtual_memory_type((address)rs.base(), mtGC);\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialBlockOffsetTable.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,3 +85,1 @@\n-  ReservedSpace heap_rs(_byte_map_size, rs_align, _page_size);\n-\n-  MemTracker::record_virtual_memory_type((address)heap_rs.base(), mtGC);\n+  ReservedSpace heap_rs(_byte_map_size, rs_align, _page_size, mtGC);\n@@ -169,0 +167,1 @@\n+                              mtGCCardSet,\n@@ -177,1 +176,3 @@\n-                                   delta.byte_size());\n+                                   delta.byte_size(),\n+                                   !ExecMem,\n+                                   mtGCCardSet);\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -60,2 +60,0 @@\n-  MemTracker::record_virtual_memory_type(_map_space.base(), mtGC);\n-\n@@ -68,2 +66,2 @@\n-    os::commit_memory_or_exit(bot_addr, pointer_delta(top_addr, bot_addr, 1), false,\n-                              \"Unable to commit collection set bitmap: heap\");\n+    os::commit_memory_or_exit(bot_addr, pointer_delta(top_addr, bot_addr, 1), !ExecMem,\n+                              mtGC, \"Unable to commit collection set bitmap: heap\");\n@@ -73,2 +71,2 @@\n-      os::commit_memory_or_exit(_biased_cset_map, page_size, false,\n-                                \"Unable to commit collection set bitmap: zero page\");\n+      os::commit_memory_or_exit(_biased_cset_map, page_size, !ExecMem,\n+                                mtGC, \"Unable to commit collection set bitmap: zero page\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -216,2 +216,2 @@\n-    os::commit_memory_or_exit(sh_rs.base(), _initial_size, heap_alignment, false,\n-                              \"Cannot commit heap memory\");\n+    os::commit_memory_or_exit(sh_rs.base(), _initial_size, heap_alignment, !ExecMem,\n+                              mtGC, \"Cannot commit heap memory\");\n@@ -250,1 +250,1 @@\n-  ReservedSpace bitmap(_bitmap_size, bitmap_page_size);\n+  ReservedSpace bitmap(_bitmap_size, bitmap_page_size, mtGC);\n@@ -255,1 +255,0 @@\n-  MemTracker::record_virtual_memory_type(bitmap.base(), mtGC);\n@@ -263,2 +262,2 @@\n-    os::commit_memory_or_exit((char *) _bitmap_region.start(), bitmap_init_commit, bitmap_page_size, false,\n-                              \"Cannot commit bitmap memory\");\n+    os::commit_memory_or_exit((char *) _bitmap_region.start(), bitmap_init_commit, bitmap_page_size, !ExecMem,\n+                              mtGC, \"Cannot commit bitmap memory\");\n@@ -270,1 +269,1 @@\n-    ReservedSpace verify_bitmap(_bitmap_size, bitmap_page_size);\n+    ReservedSpace verify_bitmap(_bitmap_size, bitmap_page_size, mtGC);\n@@ -276,2 +275,2 @@\n-      os::commit_memory_or_exit(verify_bitmap.base(), verify_bitmap.size(), bitmap_page_size, false,\n-                                \"Cannot commit verification bitmap memory\");\n+      os::commit_memory_or_exit(verify_bitmap.base(), verify_bitmap.size(), bitmap_page_size, !ExecMem,\n+                                mtGC, \"Cannot commit verification bitmap memory\");\n@@ -279,1 +278,0 @@\n-    MemTracker::record_virtual_memory_type(verify_bitmap.base(), mtGC);\n@@ -295,1 +293,1 @@\n-  ReservedSpace aux_bitmap(_bitmap_size, aux_bitmap_page_size);\n+  ReservedSpace aux_bitmap(_bitmap_size, aux_bitmap_page_size, mtGC);\n@@ -300,1 +298,0 @@\n-  MemTracker::record_virtual_memory_type(aux_bitmap.base(), mtGC);\n@@ -313,1 +310,1 @@\n-  ReservedSpace region_storage(region_storage_size, region_page_size);\n+  ReservedSpace region_storage(region_storage_size, region_page_size, mtGC);\n@@ -318,1 +315,0 @@\n-  MemTracker::record_virtual_memory_type(region_storage.base(), mtGC);\n@@ -320,2 +316,2 @@\n-    os::commit_memory_or_exit(region_storage.base(), region_storage_size, region_page_size, false,\n-                              \"Cannot commit region memory\");\n+    os::commit_memory_or_exit(region_storage.base(), region_storage_size, region_page_size, !ExecMem,\n+                              mtGC, \"Cannot commit region memory\");\n@@ -339,1 +335,1 @@\n-      cset_rs = ReservedSpace(cset_size, cset_align, cset_page_size, req_addr);\n+      cset_rs = ReservedSpace(cset_size, cset_align, cset_page_size, mtGC, req_addr);\n@@ -348,1 +344,1 @@\n-      cset_rs = ReservedSpace(cset_size, cset_align, os::vm_page_size());\n+      cset_rs = ReservedSpace(cset_size, cset_align, os::vm_page_size(), mtGC);\n@@ -1501,1 +1497,1 @@\n-  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), false)) {\n+  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), !ExecMem, mtGC)) {\n@@ -1521,1 +1517,1 @@\n-  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size())) {\n+  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), !ExecMem, mtGC)) {\n@@ -2338,1 +2334,1 @@\n-  if (!os::commit_memory(start, len, false)) {\n+  if (!os::commit_memory(start, len, !ExecMem, mtGC)) {\n@@ -2367,1 +2363,1 @@\n-  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len)) {\n+  if (!os::uncommit_memory((char*)_bitmap_region.start() + off, len, !ExecMem, mtGC)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -623,1 +623,1 @@\n-  if (!heap->is_heap_region_special() && !os::commit_memory((char *) bottom(), RegionSizeBytes, false)) {\n+  if (!heap->is_heap_region_special() && !os::commit_memory((char *) bottom(), RegionSizeBytes, !ExecMem, mtJavaHeap)) {\n@@ -637,1 +637,1 @@\n-  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes)) {\n+  if (!heap->is_heap_region_special() && !os::uncommit_memory((char *) bottom(), RegionSizeBytes, !ExecMem, mtJavaHeap)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-  os::commit_memory_or_exit((char*)_end, expand_size, false \/* executable *\/, \"Mark stack space\");\n+  os::commit_memory_or_exit((char*)_end, expand_size, !ExecMem, mtGC, \"Mark stack space\");\n@@ -108,1 +108,1 @@\n-    os::uncommit_memory((char*)shrink_start, shrink_size, false \/* executable *\/);\n+    os::uncommit_memory((char*)shrink_start, shrink_size, !ExecMem, mtGC);\n","filename":"src\/hotspot\/share\/gc\/x\/xMarkStackAllocator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -282,1 +282,1 @@\n-  MemTracker::record_virtual_memory_commit((void*)addr, size, CALLER_PC);\n+  MemTracker::record_virtual_memory_commit((void*)addr, size, CALLER_PC, mtGC);\n@@ -288,1 +288,1 @@\n-  MemTracker::record_virtual_memory_uncommit((address)addr, size);\n+  MemTracker::record_virtual_memory_uncommit((address)addr, size, mtGC);\n","filename":"src\/hotspot\/share\/gc\/x\/xPhysicalMemory.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,2 +184,1 @@\n-  MemTracker::record_virtual_memory_reserve((void*)start, size, CALLER_PC);\n-  MemTracker::record_virtual_memory_type((void*)start, mtJavaHeap);\n+  MemTracker::record_virtual_memory_reserve((void*)start, size, CALLER_PC, mtJavaHeap);\n","filename":"src\/hotspot\/share\/gc\/x\/xVirtualMemory.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-  os::commit_memory_or_exit((char*)_end, expand_size, false \/* executable *\/, \"Mark stack space\");\n+  os::commit_memory_or_exit((char*)_end, expand_size, !ExecMem, mtGC, \"Mark stack space\");\n@@ -107,1 +107,1 @@\n-    os::uncommit_memory((char*)shrink_start, shrink_size, false \/* executable *\/);\n+    os::uncommit_memory((char*)shrink_start, shrink_size, !ExecMem, mtGC);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-      MemTracker::record_virtual_memory_commit((void*)sub_range_addr, sub_range_size, CALLER_PC);\n+      MemTracker::record_virtual_memory_commit((void*)sub_range_addr, sub_range_size, CALLER_PC, mtGC);\n@@ -77,1 +77,1 @@\n-      MemTracker::record_virtual_memory_uncommit((address)sub_range_addr, sub_range_size);\n+      MemTracker::record_virtual_memory_uncommit((address)sub_range_addr, sub_range_size, mtGC);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMT.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,2 @@\n-                      os::vm_page_size());\n+                      os::vm_page_size(),\n+                      mtTracing);\n@@ -120,1 +121,0 @@\n-  MemTracker::record_virtual_memory_type((address)_rs.base(), mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrVirtualMemory.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-  if (os::commit_memory(addr, size, !ExecMem)) {\n+  if (os::commit_memory(addr, size, !ExecMem, flags)) {\n@@ -83,1 +83,1 @@\n-  os::commit_memory_or_exit(addr, size, !ExecMem, \"Allocator (commit)\");\n+  os::commit_memory_or_exit(addr, size, !ExecMem, flags, \"Allocator (commit)\");\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -230,1 +230,1 @@\n-  ReservedSpace seg_rs(reserved_segments_size);\n+  ReservedSpace seg_rs(reserved_segments_size, mtCode);\n@@ -235,2 +235,0 @@\n-  MemTracker::record_virtual_memory_type((address)_segmap.low_boundary(), mtCode);\n-\n","filename":"src\/hotspot\/share\/memory\/heap.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -592,1 +592,1 @@\n-    result = os::reserve_memory_aligned(size, Metaspace::reserve_alignment(), false);\n+    result = os::reserve_memory_aligned(size, Metaspace::reserve_alignment(), !ExecMem, mtClass);\n@@ -601,1 +601,1 @@\n-                                                      os::vm_page_size(), false, false);\n+                                                      os::vm_page_size(), false, false, mtClass);\n@@ -742,1 +742,1 @@\n-                         os::vm_page_size() \/* large *\/, (char*)base);\n+                         os::vm_page_size() \/* large *\/, mtClass, (char*)base);\n@@ -770,3 +770,0 @@\n-    \/\/ Mark class space as such\n-    MemTracker::record_virtual_memory_type((address)rs.base(), mtClass);\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size());\n+    _rs = ReservedSpace(reserve_limit * BytesPerWord, Metaspace::reserve_alignment(), os::vm_page_size(), mtMetaspace);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/testHelpers.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  if (os::commit_memory((char*)p, word_size * BytesPerWord, false) == false) {\n+  if (os::commit_memory((char*)p, word_size * BytesPerWord, !ExecMem, _rs.nmt_flag()) == false) {\n@@ -191,1 +191,1 @@\n-  if (os::uncommit_memory((char*)p, word_size * BytesPerWord) == false) {\n+  if (os::uncommit_memory((char*)p, word_size * BytesPerWord, !ExecMem, _rs.nmt_flag()) == false) {\n@@ -258,1 +258,1 @@\n-                   os::vm_page_size());\n+                   os::vm_page_size(), mtMetaspace);\n@@ -262,1 +262,0 @@\n-  MemTracker::record_virtual_memory_type(rs.base(), mtMetaspace);\n","filename":"src\/hotspot\/share\/memory\/metaspace\/virtualSpaceNode.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    _alignment(0), _special(false), _fd_for_heap(-1), _executable(false) {\n+    _alignment(0), _fd_for_heap(-1), _special(false), _executable(false), _flag(mtNone) {\n@@ -48,1 +48,1 @@\n-ReservedSpace::ReservedSpace(size_t size) : _fd_for_heap(-1) {\n+ReservedSpace::ReservedSpace(size_t size, MEMFLAGS flag) : _fd_for_heap(-1), _flag(flag) {\n@@ -57,1 +57,1 @@\n-ReservedSpace::ReservedSpace(size_t size, size_t preferred_page_size) : _fd_for_heap(-1) {\n+ReservedSpace::ReservedSpace(size_t size, size_t preferred_page_size, MEMFLAGS flag) : _fd_for_heap(-1), _flag(flag) {\n@@ -72,1 +72,2 @@\n-                             char* requested_address) : _fd_for_heap(-1) {\n+                             MEMFLAGS flag,\n+                             char* requested_address) : _fd_for_heap(-1), _flag(flag) {\n@@ -77,1 +78,1 @@\n-                             bool special, bool executable) : _fd_for_heap(-1) {\n+                             bool special, bool executable, MEMFLAGS flag) : _fd_for_heap(-1), _flag(flag) {\n@@ -84,1 +85,1 @@\n-static char* attempt_map_or_reserve_memory_at(char* base, size_t size, int fd, bool executable) {\n+static char* attempt_map_or_reserve_memory_at(char* base, size_t size, int fd, bool executable, MEMFLAGS flag) {\n@@ -86,1 +87,1 @@\n-    return os::attempt_map_memory_to_file_at(base, size, fd);\n+    return os::attempt_map_memory_to_file_at(base, size, fd, flag);\n@@ -88,1 +89,1 @@\n-  return os::attempt_reserve_memory_at(base, size, executable);\n+  return os::attempt_reserve_memory_at(base, size, executable, flag);\n@@ -92,1 +93,1 @@\n-static char* map_or_reserve_memory(size_t size, int fd, bool executable) {\n+static char* map_or_reserve_memory(size_t size, int fd, bool executable, MEMFLAGS flag) {\n@@ -94,1 +95,1 @@\n-    return os::map_memory_to_file(size, fd);\n+    return os::map_memory_to_file(size, fd, flag);\n@@ -96,1 +97,1 @@\n-  return os::reserve_memory(size, executable);\n+  return os::reserve_memory(size, executable, flag);\n@@ -100,1 +101,1 @@\n-static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd, bool executable) {\n+static char* map_or_reserve_memory_aligned(size_t size, size_t alignment, int fd, bool executable, MEMFLAGS flag) {\n@@ -102,1 +103,1 @@\n-    return os::map_memory_to_file_aligned(size, alignment, fd);\n+    return os::map_memory_to_file_aligned(size, alignment, fd, flag);\n@@ -104,1 +105,1 @@\n-  return os::reserve_memory_aligned(size, alignment, executable);\n+  return os::reserve_memory_aligned(size, alignment, executable, flag);\n@@ -157,1 +158,1 @@\n-                            const size_t alignment, int fd, bool exec) {\n+                            const size_t alignment, int fd, bool exec, MEMFLAGS flag) {\n@@ -166,1 +167,1 @@\n-    base = attempt_map_or_reserve_memory_at(requested_address, size, fd, exec);\n+    base = attempt_map_or_reserve_memory_at(requested_address, size, fd, exec, flag);\n@@ -171,1 +172,1 @@\n-    base = map_or_reserve_memory(size, fd, exec);\n+    base = map_or_reserve_memory(size, fd, exec, flag);\n@@ -178,1 +179,1 @@\n-      base = map_or_reserve_memory_aligned(size, alignment, fd, exec);\n+      base = map_or_reserve_memory_aligned(size, alignment, fd, exec, flag);\n@@ -186,1 +187,1 @@\n-                                    const size_t alignment, const size_t page_size, bool exec) {\n+                                    const size_t alignment, const size_t page_size, bool exec, MEMFLAGS flag) {\n@@ -193,1 +194,1 @@\n-  char* base = os::reserve_memory_special(size, alignment, page_size, requested_address, exec);\n+  char* base = os::reserve_memory_special(size, alignment, page_size, requested_address, exec, flag);\n@@ -212,1 +213,2 @@\n-  _alignment = alignment;\n+  _noaccess_prefix = 0;\n+\n@@ -215,0 +217,2 @@\n+\n+  _alignment = alignment;\n@@ -216,1 +220,0 @@\n-  _noaccess_prefix = 0;\n@@ -238,1 +241,1 @@\n-    char* base = reserve_memory(requested_address, size, alignment, _fd_for_heap, executable);\n+    char* base = reserve_memory(requested_address, size, alignment, _fd_for_heap, executable, _flag);\n@@ -253,1 +256,1 @@\n-      char* base = reserve_memory_special(requested_address, size, alignment, page_size, executable);\n+      char* base = reserve_memory_special(requested_address, size, alignment, page_size, executable, _flag);\n@@ -269,1 +272,1 @@\n-  char* base = reserve_memory(requested_address, size, alignment, -1, executable);\n+  char* base = reserve_memory(requested_address, size, alignment, -1, executable, _flag);\n@@ -313,1 +316,1 @@\n-  ReservedSpace result(base(), partition_size, alignment, page_size(), special(), executable());\n+  ReservedSpace result(base(), partition_size, alignment, page_size(), special(), executable(), nmt_flag());\n@@ -320,1 +323,1 @@\n-                       alignment, page_size(), special(), executable());\n+                       alignment, page_size(), special(), executable(), nmt_flag());\n@@ -326,1 +329,1 @@\n-  ReservedSpace result(base() + offset, partition_size, alignment, page_size(), special(), executable());\n+  ReservedSpace result(base() + offset, partition_size, alignment, page_size(), special(), executable(), nmt_flag());\n@@ -363,1 +366,1 @@\n-                                             size_t page_size, bool special, bool executable) {\n+                                             size_t page_size, bool special, bool executable, MEMFLAGS flag) {\n@@ -367,3 +370,1 @@\n-  ReservedSpace space;\n-  space.initialize_members(base, size, alignment, page_size, special, executable);\n-  return space;\n+  return ReservedSpace(base, size, alignment, page_size, special, executable, flag);\n@@ -610,1 +611,1 @@\n-      initialize(size + noaccess_prefix, alignment, page_size, nullptr, false);\n+      initialize(size + noaccess_prefix, alignment, page_size, nullptr, !ExecMem);\n@@ -616,1 +617,0 @@\n-\n@@ -620,0 +620,2 @@\n+  \/\/ _flag is used internally by initialize_compressed_heap\n+  _flag = mtJavaHeap;\n@@ -655,3 +657,0 @@\n-  if (base() != nullptr) {\n-    MemTracker::record_virtual_memory_type((address)base(), mtJavaHeap);\n-  }\n@@ -673,0 +672,1 @@\n+  _flag = mtCode;\n@@ -674,1 +674,0 @@\n-  MemTracker::record_virtual_memory_type((address)base(), mtCode);\n@@ -695,0 +694,1 @@\n+  _flag                   = mtNone;\n@@ -716,0 +716,1 @@\n+  _flag = rs.nmt_flag();\n@@ -774,0 +775,1 @@\n+  _flag                   = mtNone;\n@@ -839,2 +841,2 @@\n-static bool commit_expanded(char* start, size_t size, size_t alignment, bool pre_touch, bool executable) {\n-  if (os::commit_memory(start, size, alignment, executable)) {\n+static bool commit_expanded(char* start, size_t size, size_t alignment, bool pre_touch, bool executable, MEMFLAGS flag) {\n+  if (os::commit_memory(start, size, alignment, executable, flag)) {\n@@ -929,1 +931,1 @@\n-    if (!commit_expanded(lower_high(), lower_needs, _lower_alignment, pre_touch, _executable)) {\n+    if (!commit_expanded(lower_high(), lower_needs, _lower_alignment, pre_touch, _executable, _flag)) {\n@@ -937,1 +939,1 @@\n-    if (!commit_expanded(middle_high(), middle_needs, _middle_alignment, pre_touch, _executable)) {\n+    if (!commit_expanded(middle_high(), middle_needs, _middle_alignment, pre_touch, _executable, _flag)) {\n@@ -945,1 +947,1 @@\n-    if (!commit_expanded(upper_high(), upper_needs, _upper_alignment, pre_touch, _executable)) {\n+    if (!commit_expanded(upper_high(), upper_needs, _upper_alignment, pre_touch, _executable, _flag)) {\n@@ -1017,1 +1019,1 @@\n-    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs, _executable)) {\n+    if (!os::uncommit_memory(aligned_upper_new_high, upper_needs, _executable, _flag)) {\n@@ -1028,1 +1030,1 @@\n-    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs, _executable)) {\n+    if (!os::uncommit_memory(aligned_middle_new_high, middle_needs, _executable, _flag)) {\n@@ -1039,1 +1041,1 @@\n-    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs, _executable)) {\n+    if (!os::uncommit_memory(aligned_lower_new_high, lower_needs, _executable, _flag)) {\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":48,"deletions":46,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,7 +38,9 @@\n-  char*  _base;\n-  size_t _size;\n-  size_t _noaccess_prefix;\n-  size_t _alignment;\n-  size_t _page_size;\n-  bool   _special;\n-  int    _fd_for_heap;\n+  char*    _base;\n+  size_t   _size;\n+  size_t   _noaccess_prefix;\n+  size_t   _alignment;\n+  size_t   _page_size;\n+  int      _fd_for_heap;\n+  bool     _special;\n+  bool     _executable;\n+  MEMFLAGS _flag;\n@@ -46,1 +48,0 @@\n-  bool   _executable;\n@@ -50,1 +51,1 @@\n-                size_t page_size, bool special, bool executable);\n+                size_t page_size, bool special, bool executable, MEMFLAGS flag);\n@@ -52,1 +53,1 @@\n-  \/\/ Helpers to clear and set members during initialization. Two members\n+  \/\/ Helpers to clear and set members during initialization. These members\n@@ -59,0 +60,4 @@\n+  \/\/  * _flag            - Used for NMT memory type. Once set in ctor,\n+  \/\/                       it should not change after.\n+  \/\/  * _alignment       - Not to be changed after initialization\n+  \/\/  * _executable      - Not to be changed after initialization\n@@ -69,0 +74,3 @@\n+\n+  MEMFLAGS nmt_flag() const { assert(is_reserved(), \"Memory region is not reserved.\"); assert(_flag != mtNone, \"Memory flag is not set.\"); return _flag; }\n+\n@@ -73,1 +81,1 @@\n-  explicit ReservedSpace(size_t size);\n+  explicit ReservedSpace(size_t size, MEMFLAGS flag);\n@@ -78,2 +86,2 @@\n-  ReservedSpace(size_t size, size_t preferred_page_size);\n-  ReservedSpace(size_t size, size_t alignment, size_t page_size,\n+  ReservedSpace(size_t size, size_t preferred_page_size, MEMFLAGS flag);\n+  ReservedSpace(size_t size, size_t alignment, size_t page_size, MEMFLAGS flag,\n@@ -84,7 +92,7 @@\n-  size_t size()            const { return _size;      }\n-  char*  end()             const { return _base + _size; }\n-  size_t alignment()       const { return _alignment; }\n-  size_t page_size()       const { return _page_size; }\n-  bool   special()         const { return _special;   }\n-  bool   executable()      const { return _executable;   }\n-  size_t noaccess_prefix() const { return _noaccess_prefix;   }\n+  size_t size()            const { assert(is_reserved(), \"Memory region is not reserved.\"); return _size;      }\n+  char*  end()             const { assert(is_reserved(), \"Memory region is not reserved.\"); return _base + _size; }\n+  size_t alignment()       const { assert(is_reserved(), \"Memory region is not reserved.\"); return _alignment; }\n+  size_t page_size()       const { assert(is_reserved(), \"Memory region is not reserved.\"); return _page_size; }\n+  bool   special()         const { assert(is_reserved(), \"Memory region is not reserved.\"); return _special;   }\n+  bool   executable()      const { assert(is_reserved(), \"Memory region is not reserved.\"); return _executable;   }\n+  size_t noaccess_prefix() const { assert(is_reserved(), \"Memory region is not reserved.\"); return _noaccess_prefix;   }\n@@ -115,1 +123,1 @@\n-                                       size_t page_size, bool special, bool executable);\n+                                       size_t page_size, bool special, bool executable, MEMFLAGS flag);\n@@ -182,0 +190,2 @@\n+  MEMFLAGS _flag;\n+\n","filename":"src\/hotspot\/share\/memory\/virtualspace.hpp","additions":32,"deletions":22,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-    MEMFLAGS flag = mtNone) {\n+    MEMFLAGS flag) {\n@@ -132,1 +132,1 @@\n-  static inline void record_virtual_memory_release(address addr, size_t size) {\n+  static inline void record_virtual_memory_release(address addr, size_t size, bool extra_memory = false) {\n@@ -136,1 +136,1 @@\n-      VirtualMemoryTracker::remove_released_region((address)addr, size);\n+      VirtualMemoryTracker::remove_released_region((address)addr, size, extra_memory);\n@@ -140,1 +140,1 @@\n-  static inline void record_virtual_memory_uncommit(address addr, size_t size) {\n+  static inline void record_virtual_memory_uncommit(address addr, size_t size, MEMFLAGS flag) {\n@@ -144,1 +144,1 @@\n-      VirtualMemoryTracker::remove_uncommitted_region((address)addr, size);\n+      VirtualMemoryTracker::remove_uncommitted_region((address)addr, size, flag);\n@@ -149,1 +149,1 @@\n-    const NativeCallStack& stack, MEMFLAGS flag = mtNone) {\n+    const NativeCallStack& stack, MEMFLAGS flag) {\n@@ -155,1 +155,1 @@\n-      VirtualMemoryTracker::add_committed_region((address)addr, size, stack);\n+      VirtualMemoryTracker::add_committed_region((address)addr, size, stack, flag);\n@@ -160,1 +160,1 @@\n-    const NativeCallStack& stack) {\n+    const NativeCallStack& stack, MEMFLAGS flag) {\n@@ -165,1 +165,1 @@\n-      VirtualMemoryTracker::add_committed_region((address)addr, size, stack);\n+      VirtualMemoryTracker::add_committed_region((address)addr, size, stack, flag);\n","filename":"src\/hotspot\/share\/nmt\/memTracker.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -424,2 +424,2 @@\n-      assert(reserved_rgn->flag() == mtNone, \"Overwrite memory type (should be mtNone, is: \\\"%s\\\")\",\n-             NMTUtil::flag_to_name(reserved_rgn->flag()));\n+      assert(reserved_rgn->flag() == mtNone, \"Overwrite memory type (should be mtNone, is: \\\"%s\\\") wants to change to \\\"%s\\\"\",\n+             NMTUtil::flag_to_name(reserved_rgn->flag()), NMTUtil::flag_to_name(flag));\n@@ -432,1 +432,1 @@\n-  const NativeCallStack& stack) {\n+  const NativeCallStack& stack, MEMFLAGS flag) {\n@@ -437,1 +437,1 @@\n-  ReservedMemoryRegion  rgn(addr, size);\n+  ReservedMemoryRegion  rgn(addr, size, stack, flag);\n@@ -452,1 +452,1 @@\n-bool VirtualMemoryTracker::remove_uncommitted_region(address addr, size_t size) {\n+bool VirtualMemoryTracker::remove_uncommitted_region(address addr, size_t size, MEMFLAGS flag) {\n@@ -488,1 +488,1 @@\n-bool VirtualMemoryTracker::remove_released_region(address addr, size_t size) {\n+bool VirtualMemoryTracker::remove_released_region(address addr, size_t size, bool extra_memory) {\n@@ -496,1 +496,1 @@\n-  if (reserved_rgn == nullptr) {\n+  if (reserved_rgn == nullptr && extra_memory) {\n@@ -499,0 +499,1 @@\n+    return true;\n@@ -501,0 +502,5 @@\n+  if (extra_memory) {\n+    if (reserved_rgn->flag() != mtClassShared)\n+      return true;\n+    assert(reserved_rgn->end() == rgn.end() || reserved_rgn->base() == rgn.base(), \"extra memory should be at either end of the region.\");\n+  }\n@@ -515,1 +521,4 @@\n-      return true;\n+\n+      if (!extra_memory) {\n+        return true;\n+      }\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.cpp","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -299,1 +299,1 @@\n-    MEMFLAGS flag = mtNone) :\n+    MEMFLAGS flag) :\n@@ -306,0 +306,3 @@\n+  ReservedMemoryRegion(address base, size_t size, MEMFLAGS flag) :\n+    VirtualMemoryRegion(base, size), _stack(NativeCallStack::empty_stack()), _flag(flag) { }\n+\n@@ -382,1 +385,1 @@\n-  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MEMFLAGS flag = mtNone);\n+  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MEMFLAGS flag);\n@@ -384,3 +387,3 @@\n-  static bool add_committed_region      (address base_addr, size_t size, const NativeCallStack& stack);\n-  static bool remove_uncommitted_region (address base_addr, size_t size);\n-  static bool remove_released_region    (address base_addr, size_t size);\n+  static bool add_committed_region      (address base_addr, size_t size, const NativeCallStack& stack, MEMFLAGS flag);\n+  static bool remove_uncommitted_region (address base_addr, size_t size, MEMFLAGS flag);\n+  static bool remove_released_region    (address base_addr, size_t size, bool extra_memory = false);\n","filename":"src\/hotspot\/share\/nmt\/virtualMemoryTracker.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-  return os::attempt_reserve_memory_between((char*)from, (char*)to, size, alignment, aslr);\n+  return os::attempt_reserve_memory_between((char*)from, (char*)to, size, alignment, aslr, mtMetaspace);\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2399,1 +2399,1 @@\n-    bad_address = os::reserve_memory(size);\n+    bad_address = os::reserve_memory(size, !ExecMem, mtInternal);\n@@ -2403,1 +2403,0 @@\n-      MemTracker::record_virtual_memory_type((void*)bad_address, mtInternal);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -700,4 +700,1 @@\n-\n-  addr = (jlong)(uintptr_t)os::reserve_memory(size);\n-  MemTracker::record_virtual_memory_type((address)addr, mtTest);\n-\n+  addr = (jlong)(uintptr_t)os::reserve_memory(size, !ExecMem, mtTest);\n@@ -708,3 +705,1 @@\n-  addr = (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size);\n-  MemTracker::record_virtual_memory_type((address)addr, mtTest);\n-\n+  addr = (jlong)(uintptr_t)os::attempt_reserve_memory_at((char*)(uintptr_t)addr, (size_t)size, !ExecMem, mtTest);\n@@ -715,2 +710,1 @@\n-  os::commit_memory((char *)(uintptr_t)addr, size, !ExecMem);\n-  MemTracker::record_virtual_memory_type((address)(uintptr_t)addr, mtTest);\n+  os::commit_memory((char *)(uintptr_t)addr, size, !ExecMem, mtTest);\n@@ -720,1 +714,1 @@\n-  os::uncommit_memory((char *)(uintptr_t)addr, size);\n+  os::uncommit_memory((char *)(uintptr_t)addr, size, !ExecMem, mtTest);\n@@ -1489,1 +1483,1 @@\n-  p = os::reserve_memory(os::vm_allocation_granularity());\n+  p = os::reserve_memory(os::vm_allocation_granularity(), !ExecMem, mtTest);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1824,1 +1824,1 @@\n-  char* result = pd_reserve_memory(bytes, executable);\n+  char* result = pd_reserve_memory(bytes, executable, flags);\n@@ -1835,1 +1835,1 @@\n-  char* result = SimulateFullAddressSpace ? nullptr : pd_attempt_reserve_memory_at(addr, bytes, executable);\n+  char* result = SimulateFullAddressSpace ? nullptr : pd_attempt_reserve_memory_at(addr, bytes, executable, flag);\n@@ -1882,1 +1882,1 @@\n-char* os::attempt_reserve_memory_between(char* min, char* max, size_t bytes, size_t alignment, bool randomize) {\n+char* os::attempt_reserve_memory_between(char* min, char* max, size_t bytes, size_t alignment, bool randomize, MEMFLAGS flag) {\n@@ -2020,1 +2020,1 @@\n-    result = SimulateFullAddressSpace ? nullptr : os::pd_attempt_reserve_memory_at(candidate, bytes, false);\n+    result = SimulateFullAddressSpace ? nullptr : os::pd_attempt_reserve_memory_at(candidate, bytes, !ExecMem, flag);\n@@ -2037,1 +2037,1 @@\n-    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve((address)result, bytes, CALLER_PC, flag);\n@@ -2053,1 +2053,1 @@\n-bool os::commit_memory(char* addr, size_t bytes, bool executable) {\n+bool os::commit_memory(char* addr, size_t bytes, bool executable, MEMFLAGS flag) {\n@@ -2057,1 +2057,1 @@\n-    MemTracker::record_virtual_memory_commit((address)addr, bytes, CALLER_PC);\n+    MemTracker::record_virtual_memory_commit((address)addr, bytes, CALLER_PC, flag);\n@@ -2066,1 +2066,1 @@\n-                              bool executable) {\n+                              bool executable, MEMFLAGS flag) {\n@@ -2070,1 +2070,1 @@\n-    MemTracker::record_virtual_memory_commit((address)addr, size, CALLER_PC);\n+    MemTracker::record_virtual_memory_commit((address)addr, size, CALLER_PC, flag);\n@@ -2079,1 +2079,1 @@\n-                               const char* mesg) {\n+                               MEMFLAGS flag, const char* mesg) {\n@@ -2082,1 +2082,1 @@\n-  MemTracker::record_virtual_memory_commit((address)addr, bytes, CALLER_PC);\n+  MemTracker::record_virtual_memory_commit((address)addr, bytes, CALLER_PC, flag);\n@@ -2086,1 +2086,1 @@\n-                               bool executable, const char* mesg) {\n+                               bool executable, MEMFLAGS flag, const char* mesg) {\n@@ -2089,1 +2089,1 @@\n-  MemTracker::record_virtual_memory_commit((address)addr, size, CALLER_PC);\n+  MemTracker::record_virtual_memory_commit((address)addr, size, CALLER_PC, flag);\n@@ -2092,1 +2092,1 @@\n-bool os::uncommit_memory(char* addr, size_t bytes, bool executable) {\n+bool os::uncommit_memory(char* addr, size_t bytes, bool executable, MEMFLAGS flag) {\n@@ -2099,1 +2099,1 @@\n-      MemTracker::record_virtual_memory_uncommit((address)addr, bytes);\n+      MemTracker::record_virtual_memory_uncommit((address)addr, bytes, flag);\n@@ -2183,1 +2183,1 @@\n-  char* result = pd_attempt_map_memory_to_file_at(addr, bytes, file_desc);\n+  char* result = pd_attempt_map_memory_to_file_at(addr, bytes, file_desc, flag);\n@@ -2191,2 +2191,2 @@\n-                           char *addr, size_t bytes, bool read_only,\n-                           bool allow_exec, MEMFLAGS flags) {\n+                     char *addr, size_t bytes, bool read_only,\n+                     bool allow_exec, MEMFLAGS flags) {\n@@ -2214,2 +2214,2 @@\n-void os::free_memory(char *addr, size_t bytes, size_t alignment_hint) {\n-  pd_free_memory(addr, bytes, alignment_hint);\n+void os::free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag) {\n+  pd_free_memory(addr, bytes, alignment_hint, flag);\n@@ -2223,1 +2223,1 @@\n-                                 char* addr, bool executable) {\n+                                 char* addr, bool executable, MEMFLAGS flag) {\n@@ -2227,1 +2227,1 @@\n-  char* result = pd_reserve_memory_special(size, alignment, page_size, addr, executable);\n+  char* result = pd_reserve_memory_special(size, alignment, page_size, addr, executable, flag);\n@@ -2230,1 +2230,1 @@\n-    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC);\n+    MemTracker::record_virtual_memory_reserve_and_commit((address)result, size, CALLER_PC, flag);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-  static char*  pd_reserve_memory(size_t bytes, bool executable);\n+  static char*  pd_reserve_memory(size_t bytes, bool executable, MEMFLAGS flag);\n@@ -213,1 +213,1 @@\n-  static char*  pd_attempt_reserve_memory_at(char* addr, size_t bytes, bool executable);\n+  static char*  pd_attempt_reserve_memory_at(char* addr, size_t bytes, bool executable, MEMFLAGS flag);\n@@ -228,1 +228,1 @@\n-  static char*  pd_attempt_map_memory_to_file_at(char* addr, size_t bytes, int file_desc);\n+  static char*  pd_attempt_map_memory_to_file_at(char* addr, size_t bytes, int file_desc, MEMFLAGS flag);\n@@ -231,2 +231,2 @@\n-                           char *addr, size_t bytes, bool read_only = false,\n-                           bool allow_exec = false);\n+                              char *addr, size_t bytes, bool read_only = false,\n+                              bool allow_exec = false);\n@@ -234,1 +234,1 @@\n-  static void   pd_free_memory(char *addr, size_t bytes, size_t alignment_hint);\n+  static void   pd_free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag);\n@@ -242,2 +242,1 @@\n-\n-                                          char* addr, bool executable);\n+                                          char* addr, bool executable, MEMFLAGS flag);\n@@ -451,1 +450,1 @@\n-  static char*  reserve_memory(size_t bytes, bool executable = false, MEMFLAGS flags = mtNone);\n+  static char*  reserve_memory(size_t bytes, bool executable, MEMFLAGS flags);\n@@ -454,1 +453,1 @@\n-  static char*  reserve_memory_aligned(size_t size, size_t alignment, bool executable = false);\n+  static char*  reserve_memory_aligned(size_t size, size_t alignment, bool executable, MEMFLAGS flag);\n@@ -458,1 +457,1 @@\n-  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable = false, MEMFLAGS flag = mtNone);\n+  static char*  attempt_reserve_memory_at(char* addr, size_t bytes, bool executable, MEMFLAGS flag);\n@@ -462,1 +461,1 @@\n-  static char* attempt_reserve_memory_between(char* min, char* max, size_t bytes, size_t alignment, bool randomize);\n+  static char* attempt_reserve_memory_between(char* min, char* max, size_t bytes, size_t alignment, bool randomize, MEMFLAGS flag);\n@@ -464,1 +463,1 @@\n-  static bool   commit_memory(char* addr, size_t bytes, bool executable);\n+  static bool   commit_memory(char* addr, size_t bytes, bool executable, MEMFLAGS flag);\n@@ -466,1 +465,1 @@\n-                              bool executable);\n+                              bool executable, MEMFLAGS flag);\n@@ -470,1 +469,1 @@\n-                                      bool executable, const char* mesg);\n+                                      bool executable, MEMFLAGS flag, const char* mesg);\n@@ -473,2 +472,2 @@\n-                                      bool executable, const char* mesg);\n-  static bool   uncommit_memory(char* addr, size_t bytes, bool executable = false);\n+                                      bool executable, MEMFLAGS flag, const char* mesg);\n+  static bool   uncommit_memory(char* addr, size_t bytes, bool executable, MEMFLAGS flag);\n@@ -510,2 +509,2 @@\n-  static char* map_memory_to_file(size_t size, int fd, MEMFLAGS flag = mtNone);\n-  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MEMFLAGS flag = mtNone);\n+  static char* map_memory_to_file(size_t size, int fd, MEMFLAGS flag);\n+  static char* map_memory_to_file_aligned(size_t size, size_t alignment, int fd, MEMFLAGS flag);\n@@ -513,1 +512,1 @@\n-  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MEMFLAGS flag = mtNone);\n+  static char* attempt_map_memory_to_file_at(char* base, size_t size, int fd, MEMFLAGS flag);\n@@ -518,2 +517,2 @@\n-                           char *addr, size_t bytes, bool read_only = false,\n-                           bool allow_exec = false, MEMFLAGS flags = mtNone);\n+                           char *addr, size_t bytes, bool read_only,\n+                           bool allow_exec, MEMFLAGS flag);\n@@ -521,1 +520,1 @@\n-  static void   free_memory(char *addr, size_t bytes, size_t alignment_hint);\n+  static void   free_memory(char *addr, size_t bytes, size_t alignment_hint, MEMFLAGS flag);\n@@ -543,1 +542,1 @@\n-                                       char* addr, bool executable);\n+                                       char* addr, bool executable, MEMFLAGS flag);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,3 +61,2 @@\n-    char* polling_page = os::reserve_memory(allocation_size);\n-    os::commit_memory_or_exit(polling_page, allocation_size, false, \"Unable to commit Safepoint polling page\");\n-    MemTracker::record_virtual_memory_type((address)polling_page, mtSafepoint);\n+    char* polling_page = os::reserve_memory(allocation_size, !ExecMem, mtSafepoint);\n+    os::commit_memory_or_exit(polling_page, allocation_size, !ExecMem, mtSafepoint, \"Unable to commit Safepoint polling page\");\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -712,1 +712,1 @@\n-  char* page = os::reserve_memory(os::vm_page_size());\n+  char* page = os::reserve_memory(os::vm_page_size(), !ExecMem, mtInternal);\n@@ -714,2 +714,1 @@\n-    MemTracker::record_virtual_memory_type(page, mtInternal);\n-    if (os::commit_memory(page, os::vm_page_size(), false) &&\n+    if (os::commit_memory(page, os::vm_page_size(), !ExecMem, mtInternal) &&\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  ReservedSpace bot_rs(G1BlockOffsetTable::compute_size(heap.word_size()));\n+  ReservedSpace bot_rs(G1BlockOffsetTable::compute_size(heap.word_size()), mtTest);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  ReservedSpace rs(size, os::vm_page_size());\n+  ReservedSpace rs(size, os::vm_page_size(), mtTest);\n@@ -108,1 +108,1 @@\n-  ReservedSpace rs(size, page_size);\n+  ReservedSpace rs(size, page_size, mtTest);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_stressCommitUncommit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize, false \/* executable *\/);\n+      char* const reserved = os::attempt_reserve_memory_at((char*)ZAddressHeapBase + start, ZGranuleSize, !ExecMem \/* executable *\/, mtTest);\n@@ -103,1 +103,1 @@\n-    os::commit_memory((char*)_reserved, ZGranuleSize, false \/* executable *\/);\n+    os::commit_memory((char*)_reserved, ZGranuleSize, !ExecMem \/* executable *\/, mtTest);\n@@ -114,1 +114,1 @@\n-      os::uncommit_memory((char*)_reserved, ZGranuleSize, false \/* executable *\/);\n+      os::uncommit_memory((char*)_reserved, ZGranuleSize, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zForwarding.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -81,1 +81,1 @@\n-    ReservedSpace rs(size, alignment, page_size, (char *) nullptr);\n+    ReservedSpace rs(size, alignment, page_size, mtTest, (char *) nullptr);\n@@ -109,1 +109,1 @@\n-    ReservedSpace rs(size, alignment, page_size);\n+    ReservedSpace rs(size, alignment, page_size, mtTest);\n@@ -218,1 +218,1 @@\n-        return ReservedSpace(reserve_size_aligned);\n+        return ReservedSpace(reserve_size_aligned, mtTest);\n@@ -223,1 +223,2 @@\n-                             os::vm_page_size());\n+                             os::vm_page_size(),\n+                             mtTest);\n@@ -302,1 +303,1 @@\n-  ReservedSpace reserved(large_page_size, large_page_size, large_page_size);\n+  ReservedSpace reserved(large_page_size, large_page_size, large_page_size, mtTest);\n@@ -372,0 +373,1 @@\n+                     mtTest, \/\/ NMT MEM Flag\n@@ -390,1 +392,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -415,1 +417,1 @@\n-    ReservedSpace rs(size, alignment, page_size);\n+    ReservedSpace rs(size, alignment, page_size, mtTest);\n@@ -519,1 +521,1 @@\n-      return ReservedSpace(reserve_size_aligned);\n+      return ReservedSpace(reserve_size_aligned, mtTest);\n@@ -524,1 +526,1 @@\n-                           os::vm_page_size());\n+                           os::vm_page_size(), mtTest);\n@@ -579,1 +581,1 @@\n-    ReservedSpace reserved(large_page_size, large_page_size, large_page_size);\n+    ReservedSpace reserved(large_page_size, large_page_size, large_page_size, mtTest);\n","filename":"test\/hotspot\/gtest\/memory\/test_virtualspace.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-  char* addr = os::reserve_memory(sz, false, mtTest);\n+  char* addr = os::reserve_memory(sz, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_locationprinting.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    bool result = os::commit_memory(base, size, !ExecMem);\n+    bool result = os::commit_memory(base, size, !ExecMem, mtThreadStack);\n@@ -135,1 +135,1 @@\n-    os::free_memory(base, size, page_sz);\n+    os::free_memory(base, size, page_sz, mtThreadStack);\n@@ -165,1 +165,1 @@\n-    result = os::commit_memory(base, size, !ExecMem);\n+    result = os::commit_memory(base, size, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_committed_virtualmemory.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-  char* p = os::reserve_memory(len, executable);\n+  char* p = os::reserve_memory(len, executable, mtTest);\n@@ -408,1 +408,1 @@\n-    p = (address)os::reserve_memory(total_range_len);\n+    p = (address)os::reserve_memory(total_range_len, !ExecMem, mtTest);\n@@ -422,1 +422,1 @@\n-      q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable);\n+      q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable, mtTest);\n@@ -429,1 +429,1 @@\n-        EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, executable));\n+        EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, executable, mtTest));\n@@ -442,1 +442,1 @@\n-  address p = (address)os::reserve_memory(total_range_len);\n+  address p = (address)os::reserve_memory(total_range_len, !ExecMem, mtTest);\n@@ -447,1 +447,1 @@\n-      EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, false));\n+      EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, !ExecMem, mtTest));\n@@ -509,1 +509,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)p_middle_stripes, middle_stripe_len, !ExecMem, mtTest);\n@@ -532,1 +532,1 @@\n-  char* p = os::reserve_memory(4 * M);\n+  char* p = os::reserve_memory(4 * M, !ExecMem, mtTest);\n@@ -567,1 +567,1 @@\n-  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len);\n+  address p2 = (address)os::attempt_reserve_memory_at((char*)border, stripe_len, !ExecMem, mtTest);\n@@ -608,1 +608,1 @@\n-  char* p = os::reserve_memory(1 * M, false, mtInternal);\n+  char* p = os::reserve_memory(1 * M, !ExecMem, mtInternal);\n@@ -610,1 +610,1 @@\n-    if (os::commit_memory(p, 1 * M, false)) {\n+    if (os::commit_memory(p, 1 * M, !ExecMem, mtTest)) {\n@@ -632,1 +632,1 @@\n-    address p = (address)os::reserve_memory(total_range_len);\n+    address p = (address)os::reserve_memory(total_range_len, !ExecMem, mtTest);\n@@ -937,1 +937,1 @@\n-  char* p1 = os::reserve_memory(M, false, mtTest);\n+  char* p1 = os::reserve_memory(M, !ExecMem, mtTest);\n@@ -939,1 +939,1 @@\n-  char* p2 = os::attempt_reserve_memory_at(p1, M);\n+  char* p2 = os::attempt_reserve_memory_at(p1, M, !ExecMem, mtTest);\n@@ -947,1 +947,1 @@\n-    char* p1 = os::reserve_memory_aligned(lpsz, lpsz, false);\n+    char* p1 = os::reserve_memory_aligned(lpsz, lpsz, !ExecMem, mtTest);\n@@ -949,1 +949,1 @@\n-    char* p2 = os::reserve_memory_special(lpsz, lpsz, lpsz, p1, false);\n+    char* p2 = os::reserve_memory_special(lpsz, lpsz, lpsz, p1, !ExecMem, mtTest);\n@@ -961,1 +961,1 @@\n-    char* p = os::attempt_reserve_memory_at((char*)0x1f00000, M);\n+    char* p = os::attempt_reserve_memory_at((char*)0x1f00000, M, !ExecMem, mtTest);\n@@ -963,1 +963,1 @@\n-    p = os::attempt_reserve_memory_at((char*)((64 * G) + M), M);\n+    p = os::attempt_reserve_memory_at((char*)((64 * G) + M), M, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-      return os::reserve_memory_special(bytes, alignment, page_size, req_addr, exec);\n+      return os::reserve_memory_special(bytes, alignment, page_size, req_addr, exec, mtTest);\n@@ -227,1 +227,1 @@\n-    char* addr = os::reserve_memory_special(size, alignment, page_size, nullptr, false);\n+    char* addr = os::reserve_memory_special(size, alignment, page_size, nullptr, !ExecMem, mtTest);\n@@ -284,1 +284,1 @@\n-        char* p = os::reserve_memory_special(size, alignment, lp, nullptr, false);\n+        char* p = os::reserve_memory_special(size, alignment, lp, nullptr, !ExecMem, mtTest);\n@@ -299,1 +299,1 @@\n-        char* p = os::reserve_memory_special(size, alignment, lp, req_addr, false);\n+        char* p = os::reserve_memory_special(size, alignment, lp, req_addr, !ExecMem, mtTest);\n@@ -314,1 +314,1 @@\n-        char* p = os::reserve_memory_special(size, alignment, lp, req_addr, false);\n+        char* p = os::reserve_memory_special(size, alignment, lp, req_addr, !ExecMem, mtTest);\n@@ -358,1 +358,1 @@\n-  char* const heap = os::reserve_memory(size, false, mtInternal);\n+  char* const heap = os::reserve_memory(size, !ExecMem, mtInternal);\n@@ -360,1 +360,1 @@\n-  EXPECT_TRUE(os::commit_memory(heap, size, false));\n+  EXPECT_TRUE(os::commit_memory(heap, size, !ExecMem, mtInternal));\n@@ -382,1 +382,1 @@\n-  EXPECT_TRUE(os::uncommit_memory(heap, size, false));\n+  EXPECT_TRUE(os::uncommit_memory(heap, size, !ExecMem, mtInternal));\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-  char* const  addr = os::attempt_reserve_memory_between(min, max, bytes, alignment, randomized);\n+  char* const  addr = os::attempt_reserve_memory_between(min, max, bytes, alignment, randomized, mtTest);\n@@ -161,1 +161,1 @@\n-        _base = os::attempt_reserve_memory_at((char*)candidate, _len);\n+        _base = os::attempt_reserve_memory_at((char*)candidate, _len, !ExecMem, mtTest);\n@@ -169,2 +169,2 @@\n-    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size);\n-    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size);\n+    _p1 = os::attempt_reserve_memory_at(_base + _p1_offset, _p1_size, !ExecMem, mtTest);\n+    _p2 = os::attempt_reserve_memory_at(_base + _p2_offset, _p2_size, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_reserve_between.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  char* result = os::reserve_memory_special(large_allocation_size, os::large_page_size(), os::large_page_size(), nullptr, false);\n+  char* result = os::reserve_memory_special(large_allocation_size, os::large_page_size(), os::large_page_size(), nullptr, !ExecMem, mtTest);\n@@ -80,1 +80,1 @@\n-  char* actual_location = os::reserve_memory_special(expected_allocation_size, os::large_page_size(), os::large_page_size(), expected_location, false);\n+  char* actual_location = os::reserve_memory_special(expected_allocation_size, os::large_page_size(), os::large_page_size(), expected_location, !ExecMem, mtTest);\n@@ -85,1 +85,1 @@\n-  actual_location = os::reserve_memory_special(expected_allocation_size, os::large_page_size(), os::large_page_size(), expected_location, false);\n+  actual_location = os::reserve_memory_special(expected_allocation_size, os::large_page_size(), os::large_page_size(), expected_location, !ExecMem, mtTest);\n@@ -93,1 +93,1 @@\n-  char* aligned_request = os::reserve_memory_special(new_large_size, alignment, os::large_page_size(), nullptr, false);\n+  char* aligned_request = os::reserve_memory_special(new_large_size, alignment, os::large_page_size(), nullptr, !ExecMem, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_windows.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -170,1 +170,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -257,1 +257,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n@@ -428,1 +428,1 @@\n-    ReservedSpace rs(size);\n+    ReservedSpace rs(size, mtTest);\n","filename":"test\/hotspot\/gtest\/runtime\/test_virtualMemoryTracker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}