{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2016, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2024 SAP SE. All rights reserved.\n@@ -989,0 +989,3 @@\n+#define BCT_ZOPC    (unsigned  int)(70 << 24)\n+#define BCTR_ZOPC   (unsigned  int)(6 << 8)\n+#define BCTG_ZOPC   (unsigned  int)(227L << 40 | 70)\n@@ -1890,1 +1893,8 @@\n-  inline void z_bctgr(Register r1, Register r2);         \/\/ branch on count r1 -= 1; (r1!=0) ? pc = r2  ; r1 is int64\n+\n+  \/\/ branch on count Instructions\n+  inline void z_bct(  Register r1, int64_t d2, Register x2, Register b2); \/\/ branch on count r1 -= 1; (r1!=0) ? pc = (d2_uimm12+x2+b2) ; r1 is int32\n+  inline void z_bct(  Register r1, const Address &a);                     \/\/ branch on count r1 -= 1; (r1!=0) ? pc = *(a); r1 is int32\n+  inline void z_bctr( Register r1, Register r2);                          \/\/ branch on count r1 -= 1; (r1!=0) ? pc = r2  ; r1 is int32\n+  inline void z_bctgr(Register r1, Register r2);                          \/\/ branch on count r1 -= 1; (r1!=0) ? pc = r2  ; r1 is int64\n+  inline void z_bctg( Register r1, const Address &a);                     \/\/ branch on count r1 -= 1; (r1!=0) ? pc = *(a); r1 is int64\n+  inline void z_bctg( Register r1, int64_t d2, Register x2, Register b2); \/\/ branch on count r1 -= 1; (r1!=0) ? pc = (d2_imm20+x2+b2)  ; r1 is int64\n@@ -3064,0 +3074,4 @@\n+  \/\/ Branch on count;\n+  inline void z_bct( Register r1, int64_t d2, Register b2);\n+  inline void z_bctg(Register r1, int64_t d2, Register b2);\n+\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.hpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2016, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024 SAP SE. All rights reserved.\n@@ -727,1 +727,8 @@\n-inline void Assembler::z_bctgr(Register r1, Register r2)        { emit_32( BCTGR_ZOPC | reg( r1, 24, 32) | reg( r2, 28, 32)); };\n+\n+\/\/ branch on count\n+inline void Assembler::z_bct(  Register r1, const Address &a)                     { z_bct(   r1, a.disp(), a.indexOrR0(), a.baseOrR0()); }\n+inline void Assembler::z_bct(  Register r1, int64_t d2, Register x2, Register b2) { emit_32( BCT_ZOPC  | reg(r1, 8, 32) | rxmask_32(d2, x2, b2)); }\n+inline void Assembler::z_bctr (Register r1, Register r2)                          { emit_16( BCTR_ZOPC  | reg( r1,  8, 16) | reg( r2, 12, 16)); };\n+inline void Assembler::z_bctgr(Register r1, Register r2)                          { emit_32( BCTGR_ZOPC | reg( r1, 24, 32) | reg( r2, 28, 32)); };\n+inline void Assembler::z_bctg( Register r1, const Address &a)                     { z_bctg(  r1, a.disp(), a.indexOrR0(), a.baseOrR0()); }\n+inline void Assembler::z_bctg( Register r1, int64_t d2, Register x2, Register b2) { emit_48( BCTG_ZOPC | reg(r1, 8, 48) | rxymask_48(d2, x2, b2)); }\n@@ -1399,0 +1406,2 @@\n+inline void Assembler::z_bct( Register r1, int64_t d2, Register b2) { z_bct( r1, d2, Z_R0, b2);}\n+inline void Assembler::z_bctg(Register r1, int64_t d2, Register b2) { z_bctg(r1, d2, Z_R0, b2);}\n","filename":"src\/hotspot\/cpu\/s390\/assembler_s390.inline.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"}]}