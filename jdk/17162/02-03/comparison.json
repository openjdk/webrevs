{"files":[{"patch":"@@ -126,24 +126,1 @@\n-Node* ConstraintCastNode::make_cast(int opcode, Node* c, Node* n, const Type* t, DependencyType dependency,\n-                                    const TypeTuple* extra_types) {\n-  switch(opcode) {\n-  case Op_CastII:\n-    return new CastIINode(c, n, t, dependency, false, extra_types);\n-  case Op_CastLL:\n-    return new CastLLNode(c, n, t, dependency, extra_types);\n-  case Op_CastPP:\n-    return new CastPPNode(c, n, t, dependency, extra_types);\n-  case Op_CastFF:\n-    return new CastFFNode(c, n, t, dependency, extra_types);\n-  case Op_CastDD:\n-    return new CastDDNode(c, n, t, dependency, extra_types);\n-  case Op_CastVV:\n-    return new CastVVNode(c, n, t, dependency, extra_types);\n-  case Op_CheckCastPP:\n-    return new CheckCastPPNode(c, n, t, dependency, extra_types);\n-  default:\n-    fatal(\"Bad opcode %d\", opcode);\n-  }\n-  return nullptr;\n-}\n-\n-Node* ConstraintCastNode::make(Node* c, Node *n, const Type *t, DependencyType dependency, BasicType bt) {\n+Node* ConstraintCastNode::make_cast_for_basic_type(Node* c, Node *n, const Type *t, DependencyType dependency, BasicType bt) {\n@@ -151,6 +128,4 @@\n-  case T_INT: {\n-    return make_cast(Op_CastII, c, n, t, dependency, nullptr);\n-  }\n-  case T_LONG: {\n-    return make_cast(Op_CastLL, c, n, t, dependency, nullptr);\n-  }\n+  case T_INT:\n+    return new CastIINode(c, n, t, dependency);\n+  case T_LONG:\n+    return new CastLLNode(c, n, t, dependency);\n@@ -253,1 +228,1 @@\n-  Node* n = ConstraintCastNode::make(control, parent, type, dependency, bt);\n+  Node* n = ConstraintCastNode::make_cast_for_basic_type(control, parent, type, dependency, bt);\n@@ -473,1 +448,0 @@\n-  Node* cast= nullptr;\n@@ -475,1 +449,1 @@\n-    cast = make_cast(Op_CastII, c, in, type, dependency, types);\n+    return new CastIINode(c, in, type, dependency, false, types);\n@@ -477,1 +451,1 @@\n-    cast = make_cast(Op_CastLL, c, in, type, dependency, types);\n+    return new CastLLNode(c, in, type, dependency, types);\n@@ -479,1 +453,1 @@\n-    cast = make_cast(Op_CastFF, c, in, type, dependency, types);\n+    return new CastFFNode(c, in, type, dependency, types);\n@@ -481,1 +455,1 @@\n-    cast = make_cast(Op_CastDD, c, in, type, dependency, types);\n+    return new CastDDNode(c, in, type, dependency, types);\n@@ -483,1 +457,1 @@\n-    cast = make_cast(Op_CastVV, c, in, type, dependency, types);\n+    return new CastVVNode(c, in, type, dependency, types);\n@@ -485,1 +459,1 @@\n-    cast = make_cast(Op_CastPP, c, in, type, dependency, types);\n+    return new CastPPNode(c, in, type, dependency, types);\n@@ -487,1 +461,1 @@\n-  return cast;\n+  fatal(\"unreachable. Invalid cast type.\");\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":13,"deletions":39,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -72,2 +72,1 @@\n-  static Node* make_cast(int opcode, Node* c, Node* n, const Type* t, DependencyType dependency, const TypeTuple* extra_types);\n-  static Node* make(Node* c, Node *n, const Type *t, DependencyType dependency, BasicType bt);\n+  static Node* make_cast_for_basic_type(Node* c, Node *n, const Type *t, DependencyType dependency, BasicType bt);\n","filename":"src\/hotspot\/share\/opto\/castnode.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2151,2 +2151,1 @@\n-          cast = ConstraintCastNode::make_cast(Op_CastPP, r, uin, phi_type, ConstraintCastNode::StrongDependency,\n-                                               extra_types);\n+          cast = new CastPPNode(r, uin, phi_type, ConstraintCastNode::StrongDependency, extra_types);\n@@ -2162,2 +2161,1 @@\n-            cast = ConstraintCastNode::make_cast(Op_CastPP, r, uin, TypePtr::NOTNULL,\n-                                                 ConstraintCastNode::StrongDependency, extra_types);\n+            cast = new CastPPNode(r, uin, TypePtr::NOTNULL, ConstraintCastNode::StrongDependency, extra_types);\n@@ -2175,2 +2173,1 @@\n-            cast = ConstraintCastNode::make_cast(Op_CheckCastPP, r, n, phi_type, ConstraintCastNode::StrongDependency,\n-                                                 extra_types);\n+            cast = new CheckCastPPNode(r, uin, phi_type, ConstraintCastNode::StrongDependency, extra_types);\n@@ -2179,2 +2176,1 @@\n-            cast = ConstraintCastNode::make_cast(Op_CastPP, r, uin, phi_type, ConstraintCastNode::StrongDependency,\n-                                                 extra_types);\n+            cast = new CastPPNode(r, uin, phi_type, ConstraintCastNode::StrongDependency, extra_types);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1142,1 +1142,3 @@\n-  Node* casted_length = ConstraintCastNode::make(control(), length, TypeInteger::make(0, upper_bound, Type::WidenMax, bt), ConstraintCastNode::RegularDependency, bt);\n+  Node *casted_length = ConstraintCastNode::make_cast_for_basic_type(\n+      control(), length, TypeInteger::make(0, upper_bound, Type::WidenMax, bt),\n+      ConstraintCastNode::RegularDependency, bt);\n@@ -1170,1 +1172,3 @@\n-  Node* result = ConstraintCastNode::make(control(), index, TypeInteger::make(0, upper_bound, Type::WidenMax, bt), ConstraintCastNode::RegularDependency, bt);\n+  Node *result = ConstraintCastNode::make_cast_for_basic_type(\n+      control(), index, TypeInteger::make(0, upper_bound, Type::WidenMax, bt),\n+      ConstraintCastNode::RegularDependency, bt);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3423,1 +3423,4 @@\n-  Node* cast_ii = ConstraintCastNode::make(cl->in(LoopNode::EntryControl), exact_limit, phase->_igvn.type(exact_limit), ConstraintCastNode::UnconditionalDependency, T_INT);\n+  Node *cast_ii = ConstraintCastNode::make_cast_for_basic_type(\n+      cl->in(LoopNode::EntryControl), exact_limit,\n+      phase->_igvn.type(exact_limit),\n+      ConstraintCastNode::UnconditionalDependency, T_INT);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}