{"files":[{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @summary Test that medium weight submenus are not hidden by a heavyweight canvas.\n+ * @bug 4188832\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4188832\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Panel;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPopupMenu;\n+\n+public class bug4188832 {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        Select the File menu, then select the \"Save As...\" submenu.\n+        If you can see the submenu items displayed, press PASS, else press FAIL\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(40)\n+            .testUI(bug4188832::createUI)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        \/\/ for Medium Weight menus\n+        JPopupMenu.setDefaultLightWeightPopupEnabled(false);\n+        JFrame frame = new JFrame(\"bug4188832\");\n+\n+        \/\/ Create the menus\n+        JMenuBar menuBar = new JMenuBar();\n+        JMenu fileMenu = new JMenu(\"File\");\n+        menuBar.add(fileMenu);\n+        fileMenu.add(new JMenuItem(\"New\"));\n+        fileMenu.add(new JMenuItem(\"Open\"));\n+        fileMenu.add(new JMenuItem(\"Save\"));\n+        JMenu sm = new JMenu(\"Save As...\");\n+        \/\/ these guys don't show up\n+        sm.add(new JMenuItem(\"This\"));\n+        sm.add(new JMenuItem(\"That\"));\n+        fileMenu.add(sm);\n+        fileMenu.add(new JMenuItem(\"Exit\"));\n+        frame.setJMenuBar(menuBar);\n+\n+        Panel field = new Panel(); \/\/ a heavyweight container\n+        field.setBackground(Color.blue);\n+        frame.add(field);\n+        frame.setSize(400, 400);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4188832.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4212464\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Verify popup menu borders are drawn correctly when switching L&Fs\n+ * @run main\/manual bug4212464\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.FlowLayout;\n+import java.awt.Font;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import javax.swing.JApplet;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class bug4212464 extends JFrame implements ActionListener {\n+\n+    static String strMotif = \"Motif\";\n+    static String motifClassName = \"com.sun.java.swing.plaf.motif.MotifLookAndFeel\";\n+\n+    static String strMetal = \"Metal\";\n+    static String metalClassName = \"javax.swing.plaf.metal.MetalLookAndFeel\";\n+\n+    static bug4212464 frame;\n+    static JPopupMenu popup;\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        This test is to see whether popup menu borders behave properly when switching\n+        back and forth between Motif and Metal L&F.  The initial L&F is Metal.\n+\n+        Pressing the mouse button on the label in the center of the test window brings\n+        up a popup menu.\n+\n+        In order to test, use the labeled buttons to switch the look and feel.\n+        Clicking a button will cause the menu to be hidden. This is OK. Just click the label again.\n+        Switch back and forth and verify that the popup menu border changes consistently\n+        and there is a title for the menu when using Motif L&F (Metal won't have a title).\n+\n+        Make sure you switch back and forth several times.\n+        If the change is consistent, press PASS otherwise press FAIL.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(50)\n+            .testUI(bug4212464::createUI)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        try {\n+            UIManager.setLookAndFeel(metalClassName); \/\/ initialize to Metal.\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+        frame = new bug4212464(\"bug4212464\");\n+        popup = new JPopupMenu(\"Test\");\n+        popup.add(\"Item 1\");\n+        popup.add(\"Item 2\");\n+        popup.add(\"Item 3\");\n+        popup.add(\"Item 4\");\n+\n+        JPanel p = new JPanel();\n+        p.setLayout(new FlowLayout());\n+        JButton motif = (JButton)p.add(new JButton(strMotif));\n+        JButton metal = (JButton)p.add(new JButton(strMetal));\n+        motif.setActionCommand(motifClassName);\n+        metal.setActionCommand(metalClassName);\n+        motif.addActionListener(frame);\n+        metal.addActionListener(frame);\n+        frame.add(BorderLayout.NORTH, p);\n+\n+        JLabel l = new JLabel(\"Click any mouse button on this big label\");\n+        l.setFont(new Font(Font.DIALOG, Font.PLAIN, 20));\n+        l.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent e) {\n+                popup.show(e.getComponent(), e.getX(), e.getY());\n+            }\n+        });\n+        frame.add(BorderLayout.CENTER, l);\n+        frame.setSize(500, 400);\n+        return frame;\n+    }\n+\n+     public bug4212464(String title) {\n+         super(title);\n+     }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        String str = e.getActionCommand();\n+        if (str.equals(metalClassName) || str.equals(motifClassName)) {\n+            changeLNF(str);\n+        } else {\n+            System.out.println(\"ActionEvent: \" + str);\n+        }\n+    }\n+\n+    public void changeLNF(String str) {\n+        System.out.println(\"Changing LNF to \" + str);\n+        try {\n+            UIManager.setLookAndFeel(str);\n+            SwingUtilities.updateComponentTreeUI(frame);\n+            SwingUtilities.updateComponentTreeUI(popup);\n+        } catch (Exception e) {\n+           throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4212464.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"},{"patch":"@@ -0,0 +1,242 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 4234793\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary PopupMenuListener popupMenuCanceled is never called\n+ * @run main\/manual bug4234793\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+import javax.swing.AbstractAction;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.JPopupMenu;\n+import javax.swing.JSeparator;\n+import javax.swing.KeyStroke;\n+import javax.swing.event.PopupMenuEvent;\n+import javax.swing.event.PopupMenuListener;\n+\n+\/**\n+ * For all 3 components (JPopupMenu, JComboBox, JPopup) when the popup is visible,\n+ * the popupMenuCanceled should be invoked in these two circumstances:\n+ *\n+ * 1. The ESCAPE key is pressed while the popup is open.\n+ *\n+ * 2. The mouse is clicked on another component.\n+ *\n+ *\/\n+\n+public class bug4234793 extends JFrame implements PopupMenuListener {\n+\n+    static final String INSTRUCTIONS = \"\"\"\n+        The test window will contain several kinds of menus.\n+\n+        * A menu bar with two menus labeled \"1 - First Menu\" and \"2 - Second Menu\"\n+        * A drop down combo box - ie a button which pops up a menu when clicked\n+        * Clicking any where on the background of the window will display a popup menu\n+\n+        That is 4 menus in total.\n+\n+        For each case, verify that the menu can be cancelled (hidden) in two ways\n+        1) Click to display the menu, then to hide it, press the ESCAPE key.\n+        2) Click to display the menu, then to hide it, LEFT click on the window background.\n+        Note : the popup menu must be displayed using RIGHT click, the others use LEFT click.\n+\n+        Notice each time you perform a hide\/cancel action an appropriate message should\n+        appear in the log area\n+        If this is true for all 8 combinations of menus + hide actions the test PASSES\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .instructions(INSTRUCTIONS)\n+            .columns(60)\n+            .testUI(bug4234793::createUI)\n+            .logArea()\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    private static String[] numData =  {\n+        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\n+    };\n+\n+    private static String[] dayData =  {\n+        \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"\n+    };\n+\n+    private static char[] mnDayData =  {\n+        'M', 'T', 'W', 'R', 'F', 'S', 'U'\n+    };\n+\n+    bug4234793(String title) {\n+        super(title);\n+    }\n+\n+    static volatile JPopupMenu popupMenu;\n+    static volatile bug4234793 frame;\n+\n+    static JFrame createUI() {\n+        frame = new bug4234793(\"bug4234793\");\n+        frame.setJMenuBar(createMenuBar());\n+        JPanel panel = createContentPane();\n+        frame.add(panel);\n+\n+        \/\/ CTRL-down will show the popup.\n+        panel.getInputMap().put(KeyStroke.getKeyStroke(\n+                   KeyEvent.VK_DOWN, InputEvent.CTRL_MASK), \"OPEN_POPUP\");\n+        panel.getActionMap().put(\"OPEN_POPUP\", new PopupHandler());\n+        panel.addMouseListener(new PopupListener(popupMenu));\n+        panel.setPreferredSize(new Dimension(400, 300));\n+        frame.setSize(400, 300);\n+        return frame;\n+    }\n+\n+    static class PopupListener extends MouseAdapter {\n+        private JPopupMenu popup;\n+\n+        public PopupListener(JPopupMenu popup) {\n+            this.popup = popup;\n+        }\n+\n+        public void mousePressed(MouseEvent e) {\n+            maybeShowPopup(e);\n+        }\n+\n+        public void mouseReleased(MouseEvent e) {\n+            maybeShowPopup(e);\n+        }\n+\n+        public void mouseClicked(MouseEvent ex) {\n+        }\n+\n+        private void maybeShowPopup(MouseEvent e) {\n+            if (e.isPopupTrigger()) {\n+                popup.show(e.getComponent(), e.getX(), e.getY());\n+            }\n+        }\n+    }\n+\n+    static class PopupHandler extends AbstractAction {\n+        public void actionPerformed(ActionEvent e) {\n+            if (!popupMenu.isVisible())\n+                popupMenu.show((Component)e.getSource(), 40, 40);\n+        }\n+    }\n+\n+    static JPanel createContentPane() {\n+        popupMenu = new JPopupMenu();\n+        JMenuItem item;\n+        for (int i = 0; i < dayData.length; i++) {\n+            item = popupMenu.add(new JMenuItem(dayData[i], mnDayData[i]));\n+        }\n+        popupMenu.addPopupMenuListener(frame);\n+\n+        JComboBox combo = new JComboBox(numData);\n+        combo.addPopupMenuListener(frame);\n+        JPanel comboPanel = new JPanel();\n+        comboPanel.add(combo);\n+\n+        JPanel panel = new JPanel(new BorderLayout());\n+\n+        panel.add(new JLabel(\"Right click on the panel to show the PopupMenu\"), BorderLayout.NORTH);\n+        panel.add(comboPanel, BorderLayout.CENTER);\n+\n+        return panel;\n+    }\n+\n+    static JMenuBar createMenuBar() {\n+        JMenuBar menubar = new JMenuBar();\n+        JMenuItem menuitem;\n+\n+        JMenu menu = new JMenu(\"1 - First Menu\");\n+        menu.setMnemonic('1');\n+        menu.getPopupMenu().addPopupMenuListener(frame);\n+\n+        menubar.add(menu);\n+        for (int i = 0; i < 10; i ++) {\n+            menuitem = new JMenuItem(\"1 JMenuItem\" + i);\n+            menuitem.setMnemonic('0' + i);\n+            menu.add(menuitem);\n+        }\n+\n+        \/\/ second menu\n+        menu = new JMenu(\"2 - Second Menu\");\n+        menu.getPopupMenu().addPopupMenuListener(frame);\n+        menu.setMnemonic('2');\n+\n+        menubar.add(menu);\n+        for (int i = 0; i < 5; i++) {\n+            menuitem = new JMenuItem(\"2 JMenuItem\" + i);\n+            menuitem.setMnemonic('0' + i);\n+            menu.add(menuitem);\n+        }\n+\n+        JMenu submenu = new JMenu(\"Sub Menu\");\n+        submenu.setMnemonic('S');\n+        submenu.getPopupMenu().addPopupMenuListener(frame);\n+        for (int i = 0; i < 5; i++) {\n+            menuitem = new JMenuItem(\"S JMenuItem\" + i);\n+            menuitem.setMnemonic('0' + i);\n+            submenu.add(menuitem);\n+        }\n+        menu.add(new JSeparator());\n+        menu.add(submenu);\n+\n+        return menubar;\n+    }\n+\n+    \/\/ PopupMenuListener methods.\n+\n+    public void popupMenuWillBecomeVisible(PopupMenuEvent e) {\n+        Object source = e.getSource();\n+        PassFailJFrame.log(\"popupmenu visible: \" + source.getClass().getName());\n+    }\n+\n+    public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {\n+        Object source = e.getSource();\n+        PassFailJFrame.log(\"popupMenuWillBecomeInvisible: \" + source.getClass().getName());\n+    }\n+\n+    public void popupMenuCanceled(PopupMenuEvent e) {\n+        Object source = e.getSource();\n+        PassFailJFrame.log(\"POPUPMENU CANCELED: \" + source.getClass().getName());\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/bug4234793.java","additions":242,"deletions":0,"binary":false,"changes":242,"status":"added"}]}