{"files":[{"patch":"@@ -91,6 +91,12 @@\n-            Throwable targetException = ite.getTargetException();\n-            if (targetException instanceof OutOfMemoryError) {\n-                System.out.println(\"OutOfMemoryError thrown as expected.\");\n-                System.out.println(\"Test passed.\");\n-            } else {\n-                throw new RuntimeException(\"Unexpected InvocationTargetException: \" + targetException);\n+            \/\/ We may not directly get OOME but it could have caused\n+            \/\/ secondary exceptions, so walk the chain of exceptions\n+            \/\/ and see if there is an OOME somewhere.\n+            for (Throwable cause = ite.getTargetException();\n+                 cause != null;\n+                 cause = cause.getCause()) {\n+                if (cause instanceof OutOfMemoryError) {\n+                    System.out.println(\"OutOfMemoryError thrown as expected.\");\n+                    ite.printStackTrace(System.out);\n+                    System.out.println(\"Test passed.\");\n+                    return;\n+                }\n@@ -98,0 +104,3 @@\n+\n+            throw new RuntimeException(\"Unexpected InvocationTargetException: \",\n+                                       ite.getTargetException());\n@@ -99,1 +108,1 @@\n-            throw new RuntimeException(\"Unexpected exception: \" + exception);\n+            throw new RuntimeException(\"Unexpected exception: \", exception);\n","filename":"test\/hotspot\/jtreg\/runtime\/reflect\/ReflectOutOfMemoryError.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"}]}