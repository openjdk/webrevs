{"files":[{"patch":"@@ -463,0 +463,2 @@\n+    private static final long HKEY_CURRENT_USER = 0x80000001L;\n+\n@@ -488,1 +490,15 @@\n-            finalPath = getFinalPath(canonicalPath);\n+            String fp = getFinalPath(canonicalPath);\n+\n+            \/\/ if getFinalPath converted a drive letter to a UNC-style path,\n+            \/\/ then fall back to using the result of canonicalize0 because\n+            \/\/ there does not appear to be a reliable way to map the prefix\n+            \/\/ of the result of getFinalPath back to a drive letter\n+            if (fp.charAt(0) == '\\\\' &&\n+                fp.charAt(1) == '\\\\' &&\n+                isLetter(canonicalPath.charAt(0)) &&\n+                canonicalPath.charAt(1) == ':' &&\n+                canonicalPath.charAt(2) == '\\\\') {\n+                finalPath = canonicalPath;\n+            } else {\n+                finalPath = fp;\n+            }\n@@ -505,0 +521,5 @@\n+    private String queryUNCPath(char drive) {\n+        return queryUNCPath0(drive);\n+    }\n+\n+    private native String queryUNCPath0(char drive);\n","filename":"src\/java.base\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4899022 8003887\n+ * @bug 4899022 8003887 8355342\n@@ -36,0 +36,1 @@\n+import java.util.Set;\n@@ -130,0 +131,46 @@\n+    @Test\n+    @EnabledOnOs(OS.WINDOWS)\n+    void mappedDrive() throws IOException {\n+        \/\/ find the first unused drive letter\n+        char drive = '[';\n+        var roots = Set.of(new File(\".\").listRoots());\n+        for (int i = 4; i < 26; i++) {\n+            char c = (char)('A' + i);\n+            if (!roots.contains(new File(c + \":\\\\\"))) {\n+                drive = c;\n+                break;\n+            }\n+        }\n+        assertFalse(drive == '['); \/\/ '[' is next after 'Z'\n+\n+        \/\/ map the first unused drive letter to the cwd\n+        String cwd = System.getProperty(\"user.dir\");\n+        Runtime rt = Runtime.getRuntime();\n+        String share =\n+            \"\\\\\\\\localhost\\\\\" + cwd.charAt(0) + \"$\" + cwd.substring(2);\n+        try {\n+            Process p = rt.exec(new String[] {\"net\", \"use\", drive + \":\", share});\n+            assertEquals(0, p.waitFor());\n+        } catch (InterruptedException x) {\n+            fail(x);\n+        }\n+\n+        \/\/ check that the canonical path name and its content are as expected\n+        try {\n+            final String filename = \"file.txt\";\n+            final String text = \"This is some text\";\n+            Files.writeString(Path.of(share, filename), text);\n+            File file = new File(drive + \":\\\\\" + filename);\n+            String canonicalPath = file.getCanonicalPath();\n+            assertEquals(drive + \":\\\\\" + filename, canonicalPath);\n+            assertEquals(text, Files.readString(Path.of(canonicalPath)));\n+        } finally {\n+            try {\n+                Process p = rt.exec(new String[] {\"net\", \"use\", drive + \":\", \"\/Delete\"});\n+                assertEquals(0, p.waitFor());\n+            } catch (InterruptedException x) {\n+                fail(x);\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/io\/File\/GetCanonicalPath.java","additions":49,"deletions":2,"binary":false,"changes":51,"status":"modified"}]}