{"files":[{"patch":"@@ -463,0 +463,2 @@\n+    private static final long HKEY_CURRENT_USER = 0x80000001L;\n+\n@@ -489,0 +491,22 @@\n+\n+            \/\/ if getFinalPath converted a drive letter to a UNC-style path,\n+            \/\/ then obtain the mapping for the drive and replace it in the\n+            \/\/ final path with the original drive letter\n+            if (finalPath.charAt(0) == '\\\\' &&\n+                finalPath.charAt(1) == '\\\\' &&\n+                isLetter(canonicalPath.charAt(0)) &&\n+                canonicalPath.charAt(1) == ':' &&\n+                canonicalPath.charAt(2) == '\\\\') {\n+                char driveLetter = canonicalPath.charAt(0);\n+                String uncPath = queryUNCPath(driveLetter);\n+                if (uncPath != null &&\n+                    finalPath.substring(0, uncPath.length()).equalsIgnoreCase(uncPath)) {\n+                    int fpLen = finalPath.length();\n+                    int uncLen = uncPath.length();\n+                    StringBuilder sb = new StringBuilder(fpLen - uncLen + 2);\n+                    sb.append(driveLetter);\n+                    sb.append(':');\n+                    sb.append(finalPath, uncLen, fpLen);\n+                    finalPath = sb.toString();\n+                }\n+            }\n@@ -505,0 +529,5 @@\n+    private String queryUNCPath(char drive) {\n+        return queryUNCPath0(drive);\n+    }\n+\n+    private native String queryUNCPath0(char drive);\n","filename":"src\/java.base\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -353,0 +353,36 @@\n+\/**\n+ * Returns the value of the registry key HKEY_CURRENT_USER\\Network\\<drive>,\n+ * which contains the UNC path to which \"drive\" is mapped. If there is no\n+ * such registry key, or an error occurs, then NULL is returned.\n+ *\/\n+JNIEXPORT jstring JNICALL\n+Java_java_io_WinNTFileSystem_queryUNCPath0(JNIEnv* env, jclass this,\n+    jchar drive)\n+{\n+    WCHAR subKey[10];\n+    swprintf(subKey, 10, L\"Network\\\\%c\", drive);\n+\n+    HKEY hKey;\n+    LSTATUS errorCode = RegOpenKeyExW(HKEY_CURRENT_USER,\n+                                      subKey, 0, KEY_READ, &hKey);\n+\n+    jstring remotePath = NULL;\n+    if (errorCode == ERROR_SUCCESS) {\n+        DWORD type;\n+        BYTE data[MAX_PATH_LENGTH + 1];\n+        DWORD size = sizeof(data);\n+\n+        errorCode = RegQueryValueExW(hKey, L\"RemotePath\", NULL, &type,\n+                                     (LPBYTE)&data, &size);\n+\n+        if (errorCode == ERROR_SUCCESS && type == REG_SZ) {\n+            jsize len = (jsize)wcslen((WCHAR*)data);\n+            remotePath = (*env)->NewString(env, (const jchar*)&data, len);\n+        }\n+    }\n+\n+    RegCloseKey(hKey);\n+\n+    return remotePath;\n+}\n+\n","filename":"src\/java.base\/windows\/native\/libjava\/WinNTFileSystem_md.c","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4899022 8003887\n+ * @bug 4899022 8003887 8355342\n@@ -36,0 +36,1 @@\n+import java.util.Set;\n@@ -130,0 +131,46 @@\n+    @Test\n+    @EnabledOnOs(OS.WINDOWS)\n+    void mappedDrive() throws IOException {\n+        \/\/ find the first unused drive letter\n+        char drive = '[';\n+        var roots = Set.of(new File(\".\").listRoots());\n+        for (int i = 4; i < 26; i++) {\n+            char c = (char)('A' + i);\n+            if (!roots.contains(new File(c + \":\\\\\"))) {\n+                drive = c;\n+                break;\n+            }\n+        }\n+        assertFalse(drive == '['); \/\/ '[' is next after 'Z'\n+\n+        \/\/ map the first unused drive letter to the cwd\n+        String cwd = System.getProperty(\"user.dir\");\n+        Runtime rt = Runtime.getRuntime();\n+        String share =\n+            \"\\\\\\\\localhost\\\\\" + cwd.charAt(0) + \"$\" + cwd.substring(2);\n+        try {\n+            Process p = rt.exec(new String[] {\"net\", \"use\", drive + \":\", share});\n+            assertEquals(0, p.waitFor());\n+        } catch (InterruptedException x) {\n+            fail(x);\n+        }\n+\n+        \/\/ check that the canonical path name and its content are as expected\n+        try {\n+            final String filename = \"file.txt\";\n+            final String text = \"This is some text\";\n+            Files.writeString(Path.of(share, filename), text);\n+            File file = new File(drive + \":\\\\\" + filename);\n+            String canonicalPath = file.getCanonicalPath();\n+            assertEquals(drive + \":\\\\\" + filename, canonicalPath);\n+            assertEquals(text, Files.readString(Path.of(canonicalPath)));\n+        } finally {\n+            try {\n+                Process p = rt.exec(new String[] {\"net\", \"use\", drive + \":\", \"\/Delete\"});\n+                assertEquals(0, p.waitFor());\n+            } catch (InterruptedException x) {\n+                fail(x);\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/io\/File\/GetCanonicalPath.java","additions":49,"deletions":2,"binary":false,"changes":51,"status":"modified"}]}