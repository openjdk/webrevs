{"files":[{"patch":"@@ -978,1 +978,1 @@\n-        int initialState = state();\n+        int initialState = state() & ~SUSPENDED;\n@@ -983,1 +983,1 @@\n-            case RUNNING, PINNED -> {\n+            case RUNNING, PINNED, TIMED_PINNED -> {\n@@ -995,1 +995,1 @@\n-            default -> throw new InternalError();\n+            default -> throw new InternalError(\"\" + initialState);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8322818\n+ * @summary Stress test Thread.getStackTrace on a virtual thread that is pinned\n+ * @requires vm.debug != true\n+ * @run main GetStackTraceALotWhenPinned 100000\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires vm.debug == true\n+ * @run main\/timeout=300 GetStackTraceALotWhenPinned 10000\n+ *\/\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.LockSupport;\n+\n+public class GetStackTraceALotWhenPinned {\n+\n+    public static void main(String[] args) throws Exception {\n+        var counter = new AtomicInteger(Integer.parseInt(args[0]));\n+\n+        \/\/ Start a virtual thread that loops doing Thread.yield and parking while pinned.\n+        \/\/ This loop creates the conditions for the main thread to sample the stack trace\n+        \/\/ as it transitions from being unmounted to parking while pinned.\n+        var thread = Thread.startVirtualThread(() -> {\n+            boolean timed = false;\n+            while (counter.decrementAndGet() > 0) {\n+                Thread.yield();\n+                synchronized (GetStackTraceALotWhenPinned.class) {\n+                    if (timed) {\n+                        LockSupport.parkNanos(Long.MAX_VALUE);\n+                    } else {\n+                        LockSupport.park();\n+                    }\n+                }\n+                timed = !timed;\n+            }\n+        });\n+\n+        long lastTimestamp = System.currentTimeMillis();\n+        while (thread.isAlive()) {\n+            thread.getStackTrace();\n+            LockSupport.unpark(thread);\n+            long currentTime = System.currentTimeMillis();\n+            if ((currentTime - lastTimestamp) > 500) {\n+                System.out.println(counter.get() + \" remaining ...\");\n+                lastTimestamp = currentTime;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/stress\/GetStackTraceALotWhenPinned.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}