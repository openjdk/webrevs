{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.io.Closeable;\n@@ -45,0 +46,1 @@\n+import java.util.function.Consumer;\n@@ -76,1 +78,1 @@\n-        setSourceOrder(Source.values());\n+        setSourceOrder(Source.values()).setLogger(Log::verbose);\n@@ -135,0 +137,5 @@\n+    OverridableResource setLogger(Consumer<String> v) {\n+        logger = v;\n+        return this;\n+    }\n+\n@@ -225,0 +232,14 @@\n+    final class NoLogging implements Closeable {\n+        NoLogging() {\n+            logger = OverridableResource.this.logger;\n+            OverridableResource.this.setLogger(v -> {});\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            OverridableResource.this.setLogger(logger);\n+        }\n+\n+        private final Consumer<String> logger;\n+    }\n+\n@@ -244,1 +265,1 @@\n-            Log.verbose(MessageFormat.format(I18N.getString(\n+            logger.accept(MessageFormat.format(I18N.getString(\n@@ -273,1 +294,1 @@\n-                Log.verbose(MessageFormat.format(I18N.getString(\n+                logger.accept((MessageFormat.format(I18N.getString(\n@@ -275,1 +296,1 @@\n-                        logResourceName));\n+                        logResourceName)));\n@@ -294,1 +315,1 @@\n-            Log.verbose(MessageFormat.format(\n+            logger.accept((MessageFormat.format(\n@@ -296,1 +317,1 @@\n-                    defaultName, getPrintableCategory(), resourceName));\n+                    defaultName, getPrintableCategory(), resourceName)));\n@@ -383,0 +404,1 @@\n+    private Consumer<String> logger;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/OverridableResource.java","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.io.ByteArrayOutputStream;\n@@ -28,0 +29,2 @@\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n@@ -35,0 +38,1 @@\n+import java.util.function.Consumer;\n@@ -37,0 +41,1 @@\n+import jdk.jpackage.internal.OverridableResource.NoLogging;\n@@ -194,0 +199,32 @@\n+    @Test\n+    public void testNoLogging() throws IOException {\n+        var log = new StringWriter();\n+        Log.setPrintWriter(new PrintWriter(log), new PrintWriter(log));\n+        Log.setVerbose();\n+\n+        OverridableResource resource = new OverridableResource(DEFAULT_NAME).setPublicName(\"foo\");\n+        Log.flush();\n+        assertTrue(log.getBuffer().toString().isEmpty());\n+\n+        Consumer<Boolean> runTest = expectLogMessageAppended -> {\n+            var buf = log.getBuffer();\n+            buf.delete(0, buf.length());\n+            try {\n+                resource.saveToStream(new ByteArrayOutputStream());\n+                Log.flush();\n+            } catch (IOException ex) {\n+                throw new RuntimeException(ex);\n+            }\n+            var logMsg = buf.toString();\n+            assertEquals(expectLogMessageAppended, !logMsg.isEmpty());\n+        };\n+\n+        runTest.accept(true);\n+\n+        try (var suppressLogging = resource.new NoLogging()) {\n+            runTest.accept(false);\n+        }\n+\n+        runTest.accept(true);\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk.jpackage\/jdk\/jpackage\/internal\/OverridableResourceTest.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"}]}