{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -169,1 +169,1 @@\n-      ClassFileStream st((u1*)buf, len, nullptr, ClassFileStream::verify);\n+      ClassFileStream st((u1*)buf, len, nullptr);\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5318,1 +5318,1 @@\n-  stream->set_check_truncation(_need_verify);\n+  stream->set_need_verify(_need_verify);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-                                 bool check_truncation,\n@@ -44,1 +43,1 @@\n-  _check_truncation(check_truncation),\n+  _need_verify(true),  \/\/ may be reset by ClassFileParser when this stream is parsed.\n@@ -73,1 +72,0 @@\n-                             check_truncation(),\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  bool _check_truncation;        \/\/ True if we should check truncation of stream bytes.\n+  bool _need_verify;             \/\/ True if we need to verify and check truncation of stream bytes.\n@@ -55,2 +55,0 @@\n-  constexpr static bool verify = true;\n-\n@@ -60,1 +58,0 @@\n-                  bool check_truncation = verify,\n@@ -79,2 +76,2 @@\n-  bool check_truncation() const { return _check_truncation; }\n-  void set_check_truncation(bool flag) { _check_truncation = flag; }\n+  bool need_verify() const { return _need_verify; }\n+  void set_need_verify(bool flag) { _need_verify = flag; }\n@@ -100,1 +97,1 @@\n-    if (_check_truncation) {\n+    if (_need_verify) {\n@@ -115,1 +112,1 @@\n-    if (_check_truncation) {\n+    if (_need_verify) {\n@@ -139,1 +136,1 @@\n-    if (_check_truncation) {\n+    if (_need_verify) {\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.hpp","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -300,2 +300,1 @@\n-                                   _dir,\n-                                   ClassFileStream::verify);\n+                                   _dir);\n@@ -369,2 +368,1 @@\n-                             _zip_name,\n-                             ClassFileStream::verify);\n+                             _zip_name);\n@@ -452,1 +450,0 @@\n-                               ClassFileStream::verify,\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -80,2 +80,1 @@\n-                                                    cfs->source(),\n-                                                    ClassFileStream::verify);\n+                                                    cfs->source());\n@@ -160,2 +159,1 @@\n-                                   stream->source(),\n-                                   stream->check_truncation());\n+                                   stream->source());\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -828,1 +828,0 @@\n-  assert(st->check_truncation(), \"invariant\");\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1205,1 +1205,1 @@\n-  return new ClassFileStream(new_buffer, orig_stream_length, nullptr, ClassFileStream::verify);\n+  return new ClassFileStream(new_buffer, orig_stream_length, nullptr);\n@@ -1513,1 +1513,1 @@\n-  return new ClassFileStream(new_bytes, size_of_new_bytes, nullptr, ClassFileStream::verify);\n+  return new ClassFileStream(new_bytes, size_of_new_bytes, nullptr);\n@@ -1550,1 +1550,1 @@\n-  return new ClassFileStream(new_bytes, size_of_new_bytes, nullptr, ClassFileStream::verify);\n+  return new ClassFileStream(new_bytes, size_of_new_bytes, nullptr);\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-  ClassFileStream st((u1*)buf, bufLen, nullptr, ClassFileStream::verify);\n+  ClassFileStream st((u1*)buf, bufLen, nullptr);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -920,1 +920,1 @@\n-  ClassFileStream st((u1*)buf, len, source, ClassFileStream::verify);\n+  ClassFileStream st((u1*)buf, len, source);\n@@ -1006,1 +1006,1 @@\n-  ClassFileStream st((u1*)buf, len, source, ClassFileStream::verify);\n+  ClassFileStream st((u1*)buf, len, source);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1365,2 +1365,1 @@\n-                       \"__VM_RedefineClasses__\",\n-                       ClassFileStream::verify);\n+                       \"__VM_RedefineClasses__\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}