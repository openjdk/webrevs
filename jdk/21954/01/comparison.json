{"files":[{"patch":"@@ -4662,1 +4662,1 @@\n-  if (!_need_verify || _relax_verify) { return; }\n+  if (!_need_verify) { return; }\n@@ -4702,1 +4702,1 @@\n-  if (!_need_verify || _relax_verify) { return; }\n+  if (!_need_verify) { return; }\n@@ -4735,1 +4735,1 @@\n-  if (!_need_verify || _relax_verify) { return; }\n+  if (!_need_verify) { return; }\n@@ -5239,11 +5239,0 @@\n-static bool relax_format_check_for(ClassLoaderData* loader_data) {\n-  bool trusted = loader_data->is_boot_class_loader_data() ||\n-                 loader_data->is_platform_class_loader_data();\n-  bool need_verify =\n-    \/\/ verifyAll\n-    (BytecodeVerificationLocal && BytecodeVerificationRemote) ||\n-    \/\/ verifyRemote\n-    (!BytecodeVerificationLocal && BytecodeVerificationRemote && !trusted);\n-  return !need_verify;\n-}\n-\n@@ -5306,1 +5295,0 @@\n-  _relax_verify(false),\n@@ -5327,14 +5315,1 @@\n-  if (CDSConfig::is_dumping_static_archive()) {\n-    \/\/ verify == true means it's a 'remote' class (i.e., non-boot class)\n-    \/\/ Verification decision is based on BytecodeVerificationRemote flag\n-    \/\/ for those classes.\n-    _need_verify = (stream->need_verify()) ? BytecodeVerificationRemote :\n-                                              BytecodeVerificationLocal;\n-  }\n-  else {\n-    _need_verify = Verifier::should_verify_for(_loader_data->class_loader(),\n-                                               stream->need_verify());\n-  }\n-\n-  \/\/ synch back verification state to stream\n-  stream->set_verify(_need_verify);\n+  _need_verify = Verifier::should_verify_for(_loader_data->class_loader());\n@@ -5342,3 +5317,2 @@\n-  \/\/ Check if verification needs to be relaxed for this class file\n-  \/\/ Do not restrict it to jdk1.0 or jdk1.1 to maintain backward compatibility (4982376)\n-  _relax_verify = relax_format_check_for(_loader_data);\n+  \/\/ synch back verification state to stream to check for truncation.\n+  stream->set_check_truncation(_need_verify);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":6,"deletions":32,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -188,1 +188,0 @@\n-  bool _relax_verify;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-const bool ClassFileStream::verify = true;\n-\n@@ -40,1 +38,1 @@\n-                                 bool verify_stream,\n+                                 bool check_truncation,\n@@ -46,1 +44,1 @@\n-  _need_verify(verify_stream),\n+  _check_truncation(check_truncation),\n@@ -75,1 +73,1 @@\n-                             need_verify(),\n+                             check_truncation(),\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-  bool _need_verify;             \/\/ True if verification is on for the class file\n+  bool _check_truncation;        \/\/ True if we should check truncation of stream bytes.\n@@ -55,1 +55,1 @@\n-  static const bool verify;\n+  constexpr static bool verify = true;\n@@ -60,1 +60,1 @@\n-                  bool verify_stream = verify,  \/\/ to be verified by default\n+                  bool check_truncation = verify,\n@@ -79,2 +79,2 @@\n-  bool need_verify() const { return _need_verify; }\n-  void set_verify(bool flag) { _need_verify = flag; }\n+  bool check_truncation() const { return _check_truncation; }\n+  void set_check_truncation(bool flag) { _check_truncation = flag; }\n@@ -100,1 +100,1 @@\n-    if (_need_verify) {\n+    if (_check_truncation) {\n@@ -115,1 +115,1 @@\n-    if (_need_verify) {\n+    if (_check_truncation) {\n@@ -139,1 +139,1 @@\n-    if (_need_verify) {\n+    if (_check_truncation) {\n","filename":"src\/hotspot\/share\/classfile\/classFileStream.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1201,2 +1201,0 @@\n-  stream->set_verify(ClassLoaderExt::should_verify(classpath_index));\n-\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,5 +36,0 @@\n-  static bool should_verify(int classpath_index) {\n-    CDS_ONLY(return (classpath_index >= _app_class_paths_start_index);)\n-    NOT_CDS(return false;)\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,1 +161,1 @@\n-                                   stream->need_verify());\n+                                   stream->check_truncation());\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -828,1 +828,1 @@\n-  assert(st->need_verify(), \"invariant\");\n+  assert(st->check_truncation(), \"invariant\");\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,2 +108,2 @@\n-bool Verifier::should_verify_for(oop class_loader, bool should_verify_class) {\n-  return (class_loader == nullptr || !should_verify_class) ?\n+bool Verifier::should_verify_for(oop class_loader) {\n+  return class_loader == nullptr ?\n@@ -279,1 +279,1 @@\n-  return (should_verify_for(klass->class_loader(), should_verify_class) &&\n+  return (should_verify_class &&\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-  static bool should_verify_for(oop class_loader, bool should_verify_class);\n+  static bool should_verify_for(oop class_loader);\n","filename":"src\/hotspot\/share\/classfile\/verifier.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}