{"files":[{"patch":"@@ -4662,1 +4662,1 @@\n-  if (!_need_verify || _relax_verify) { return; }\n+  if (!_need_verify) { return; }\n@@ -4702,1 +4702,1 @@\n-  if (!_need_verify || _relax_verify) { return; }\n+  if (!_need_verify) { return; }\n@@ -4735,1 +4735,1 @@\n-  if (!_need_verify || _relax_verify) { return; }\n+  if (!_need_verify) { return; }\n@@ -5239,11 +5239,0 @@\n-static bool relax_format_check_for(ClassLoaderData* loader_data) {\n-  bool trusted = loader_data->is_boot_class_loader_data() ||\n-                 loader_data->is_platform_class_loader_data();\n-  bool need_verify =\n-    \/\/ verifyAll\n-    (BytecodeVerificationLocal && BytecodeVerificationRemote) ||\n-    \/\/ verifyRemote\n-    (!BytecodeVerificationLocal && BytecodeVerificationRemote && !trusted);\n-  return !need_verify;\n-}\n-\n@@ -5306,1 +5295,0 @@\n-  _relax_verify(false),\n@@ -5327,11 +5315,2 @@\n-  if (CDSConfig::is_dumping_static_archive()) {\n-    \/\/ verify == true means it's a 'remote' class (i.e., non-boot class)\n-    \/\/ Verification decision is based on BytecodeVerificationRemote flag\n-    \/\/ for those classes.\n-    _need_verify = (stream->need_verify()) ? BytecodeVerificationRemote :\n-                                              BytecodeVerificationLocal;\n-  }\n-  else {\n-    _need_verify = Verifier::should_verify_for(_loader_data->class_loader(),\n-                                               stream->need_verify());\n-  }\n+  _need_verify = Verifier::should_verify_for(_loader_data->class_loader(),\n+                                             stream->need_verify());\n@@ -5339,1 +5318,1 @@\n-  \/\/ synch back verification state to stream\n+  \/\/ synch back verification state to stream to check for truncation.\n@@ -5342,4 +5321,0 @@\n-  \/\/ Check if verification needs to be relaxed for this class file\n-  \/\/ Do not restrict it to jdk1.0 or jdk1.1 to maintain backward compatibility (4982376)\n-  _relax_verify = relax_format_check_for(_loader_data);\n-\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":6,"deletions":31,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -188,1 +188,0 @@\n-  bool _relax_verify;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1201,1 +1201,3 @@\n-  stream->set_verify(ClassLoaderExt::should_verify(classpath_index));\n+  \/\/ Set stream verification to false for the null class loader.  Verifier::should_verify_for() will\n+  \/\/ change it to true for -Xverify:all if given.\n+  stream->set_verify(false);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,5 +36,0 @@\n-  static bool should_verify(int classpath_index) {\n-    CDS_ONLY(return (classpath_index >= _app_class_paths_start_index);)\n-    NOT_CDS(return false;)\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}