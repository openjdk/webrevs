{"files":[{"patch":"@@ -1879,1 +1879,1 @@\n-  uint length = stub.data<2>();\n+  uint vector_length = stub.data<2>();\n@@ -1889,1 +1889,1 @@\n-  __ vsetvli_helper(T_FLOAT, length, Assembler::m1);\n+  __ vsetvli_helper(T_FLOAT, vector_length, Assembler::m1);\n@@ -1902,1 +1902,1 @@\n-void C2_MacroAssembler::float16_to_float_v(VectorRegister dst, VectorRegister src, uint length) {\n+void C2_MacroAssembler::float16_to_float_v(VectorRegister dst, VectorRegister src, uint vector_length) {\n@@ -1904,1 +1904,1 @@\n-              (dst, src, length, 24, float16_to_float_v_slow_path);\n+              (dst, src, vector_length, 24, float16_to_float_v_slow_path);\n@@ -1914,1 +1914,1 @@\n-  vsetvli_helper(BasicType::T_SHORT, length, Assembler::mf2);\n+  vsetvli_helper(BasicType::T_SHORT, vector_length, Assembler::mf2);\n@@ -1923,1 +1923,1 @@\n-  \/\/ non-NaN or non-Inf cases, just use built-in instructions.\n+  \/\/ For non-NaN or non-Inf cases, just use built-in instructions.\n@@ -1927,1 +1927,1 @@\n-  bgtz(t0, stub->entry());\n+  bnez(t0, stub->entry());\n@@ -1933,1 +1933,1 @@\n-                                         C2GeneralStub<VectorRegister, VectorRegister, VectorRegister, uint>& stub) {\n+                                         C2GeneralStub<VectorRegister, VectorRegister, VectorRegister>& stub) {\n@@ -1938,1 +1938,0 @@\n-  uint length = stub.data<3>();\n@@ -1960,2 +1959,3 @@\n-void C2_MacroAssembler::float_to_float16_v(VectorRegister dst, VectorRegister src, VectorRegister tmp, uint length) {\n-  assert_different_registers(dst, src, tmp);\n+void C2_MacroAssembler::float_to_float16_v(VectorRegister dst, VectorRegister src, VectorRegister vtmp,\n+                                           Register tmp, uint vector_length) {\n+  assert_different_registers(dst, src, vtmp);\n@@ -1963,2 +1963,2 @@\n-  auto stub = C2CodeStub::make<VectorRegister, VectorRegister, VectorRegister, uint>\n-              (dst, src, tmp, length, 36, float_to_float16_v_slow_path);\n+  auto stub = C2CodeStub::make<VectorRegister, VectorRegister, VectorRegister>\n+              (dst, src, vtmp, 28, float_to_float16_v_slow_path);\n@@ -1968,1 +1968,1 @@\n-  vsetvli_helper(BasicType::T_FLOAT, length, Assembler::m1);\n+  vsetvli_helper(BasicType::T_FLOAT, vector_length, Assembler::m1);\n@@ -1973,4 +1973,0 @@\n-\n-  \/\/ move vsetvli_helper forward here, as t0 is used as default temp register in vsetvli_helper in some situations.\n-  \/\/ and also moving vsetvli_helper(..., mf2) here does not impact vcpop_m.\n-  vsetvli_helper(BasicType::T_SHORT, length, Assembler::mf2);\n@@ -1979,1 +1975,3 @@\n-  \/\/ non-NaN cases, just use built-in instructions.\n+  vsetvli_helper(BasicType::T_SHORT, vector_length, Assembler::mf2, tmp);\n+\n+  \/\/ For non-NaN cases, just use built-in instructions.\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -190,2 +190,2 @@\n-  void float16_to_float_v(VectorRegister dst, VectorRegister src, uint length);\n-  void float_to_float16_v(VectorRegister dst, VectorRegister src, VectorRegister tmp, uint length);\n+  void float16_to_float_v(VectorRegister dst, VectorRegister src, uint vector_length);\n+  void float_to_float16_v(VectorRegister dst, VectorRegister src, VectorRegister vtmp, Register tmp, uint vector_length);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3701,1 +3701,1 @@\n-instruct vconvF2HF(vReg dst, vReg src, vReg tmp, vRegMask_V0 v0) %{\n+instruct vconvF2HF(vReg dst, vReg src, vReg vtmp, vRegMask_V0 v0, iRegINoSp tmp) %{\n@@ -3704,1 +3704,1 @@\n-  effect(TEMP_DEF dst, TEMP v0, TEMP tmp);\n+  effect(TEMP_DEF dst, TEMP v0, TEMP vtmp, TEMP tmp);\n@@ -3708,1 +3708,2 @@\n-                          as_VectorRegister($tmp$$reg), Matcher::vector_length(this));\n+                          as_VectorRegister($vtmp$$reg), $tmp$$Register,\n+                          Matcher::vector_length(this));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}