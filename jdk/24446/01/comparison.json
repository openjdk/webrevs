{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n- *\n- * @hidden\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/Event.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -160,3 +160,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n@@ -175,3 +172,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n@@ -184,3 +178,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n@@ -192,3 +183,1 @@\n-    \/**\n-     * @hidden\n-     *\/\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-            if (!(utils.isPublic(inheritedClass) || utils.isLinkable(inheritedClass))) {\n+            if (!utils.isVisible(inheritedClass)) {\n@@ -275,3 +275,0 @@\n-            if (utils.hasHiddenTag(inheritedClass)) {\n-                continue;\n-            }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -131,11 +131,7 @@\n-                if (parent != intf) {\n-                    if (utils.isPublic(intf) || utils.isLinkable(intf)) {\n-                        if (isFirst) {\n-                            isFirst = false;\n-                            if (utils.isPlainInterface(typeElement)) {\n-                                content.add(\" (\");\n-                                content.add(contents.also);\n-                                content.add(\" extends \");\n-                            } else {\n-                                content.add(\" (implements \");\n-                            }\n+                if (parent != intf && utils.isVisible(intf)) {\n+                    if (isFirst) {\n+                        isFirst = false;\n+                        if (utils.isPlainInterface(typeElement)) {\n+                            content.add(\" (\");\n+                            content.add(contents.also);\n+                            content.add(\" extends \");\n@@ -143,1 +139,1 @@\n-                            content.add(\", \");\n+                            content.add(\" (implements \");\n@@ -145,1 +141,2 @@\n-                        addPreQualifiedClassLink(HtmlLinkInfo.Kind.SHOW_TYPE_PARAMS, intf, content);\n+                    } else {\n+                        content.add(\", \");\n@@ -147,0 +144,1 @@\n+                    addPreQualifiedClassLink(HtmlLinkInfo.Kind.SHOW_TYPE_PARAMS, intf, content);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractTreeWriter.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-            if (utils.hasHiddenTag(typeElement) || !utils.isCoreClass(typeElement)) {\n+            if (utils.isHidden(typeElement) || !utils.isCoreClass(typeElement)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AllClassesIndexWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -412,1 +412,1 @@\n-            if (utils.hasHiddenTag(te) ||\n+            if (utils.isHidden(te) ||\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDoclet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -295,1 +295,1 @@\n-            if (configuration.isGeneratedDoc(typeElement) && !utils.hasHiddenTag(typeElement)) {\n+            if (configuration.isGeneratedDoc(typeElement) && !utils.isHidden(typeElement)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -241,3 +241,1 @@\n-            if (holder.equals(typeElement) ||\n-                    !(utils.isPublic(holder) ||\n-                    utils.isLinkable(holder))) {\n+            if (holder.equals(typeElement) || !utils.isVisible(holder)) {\n@@ -246,1 +244,1 @@\n-                if (!utils.hasHiddenTag(holder) && !utils.hasHiddenTag(method)) {\n+                if (!utils.isHidden(holder) && !utils.isHidden(method)) {\n@@ -352,1 +350,1 @@\n-        if (!(utils.isPublic(holder) || utils.isLinkable(holder))) {\n+        if (!utils.isVisible(holder) || utils.isHidden(method)) {\n@@ -361,3 +359,0 @@\n-        if (utils.hasHiddenTag(holder) || utils.hasHiddenTag(method)) {\n-            return;\n-        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriter.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,0 @@\n-import jdk.javadoc.internal.html.HtmlTag;\n@@ -407,1 +406,1 @@\n-            case TypeElement type -> (configuration.isGeneratedDoc(type) && !configuration.utils.hasHiddenTag(type))\n+            case TypeElement type -> (configuration.isGeneratedDoc(type) && !configuration.utils.isHidden(type))\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Navigation.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -202,2 +202,1 @@\n-            if (holder.equals(typeElement) ||\n-                    (!utils.isPublic(holder) || utils.isLinkable(holder))) {\n+            if (holder.equals(typeElement) || !utils.isVisible(holder)) {\n@@ -206,1 +205,1 @@\n-                if (!utils.hasHiddenTag(holder) && !utils.hasHiddenTag(property)) {\n+                if (!utils.isHidden(holder) && !utils.isHidden(property)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PropertyWriter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -611,1 +611,1 @@\n-                && !utils.hasHiddenTag(typeElement);\n+                && !utils.isHidden(typeElement);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SerializedFormWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,1 +165,1 @@\n-                        if (!(utils.isPublic(tDoc) || utils.isLinkable(tDoc))) {\n+                        if (!utils.isVisible(tDoc)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -251,2 +251,1 @@\n-            if (refSignature.trim().startsWith(\"#\") &&\n-                    ! (utils.isPublic(containing) || utils.isLinkable(containing))) {\n+            if (refSignature.trim().startsWith(\"#\") && !utils.isVisible(containing)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/LinkTaglet.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -236,1 +236,1 @@\n-            if (utils.hasHiddenTag(te)) {\n+            if (utils.isHidden(te)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/ClassTree.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,1 +249,1 @@\n-        if (utils.hasHiddenTag(element)) {\n+        if (utils.isHidden(element)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/IndexBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-                    || hasHiddenTag(enclosingTypeElement))\n+                    || isHidden(enclosingTypeElement))\n@@ -789,1 +789,1 @@\n-                if (isPublic(e) || isLinkable(e)) {\n+                if (isVisible(e)) {\n@@ -852,1 +852,1 @@\n-                    !hasHiddenTag(typeElem)) ||\n+                    !isHidden(typeElem)) ||\n@@ -877,1 +877,1 @@\n-        if (isIncluded(elem) && !hasHiddenTag(elem)) {\n+        if (isIncluded(elem) && !isHidden(elem)) {\n@@ -1009,1 +1009,1 @@\n-            if (!hasHiddenTag(te) && (isPublic(te) || isLinkable(te))) {\n+            if (isVisible(te)) {\n@@ -1240,3 +1240,15 @@\n-     * Returns true if the element is included or selected, contains &#64;hidden tag,\n-     * or if javafx flag is present and element contains &#64;treatAsPrivate\n-     * tag.\n+     * Returns {@code true} if the type element is visible. This means that it is not hidden,\n+     * and is either public or linkable (either internally or externally).\n+     *\n+     * @param typeElement the type element\n+     * @return {@code true} if the type element is visible\n+     *\/\n+    public boolean isVisible(TypeElement typeElement) {\n+        return !isHidden(typeElement) && (isPublic(typeElement) || isLinkable(typeElement));\n+    }\n+\n+    \/**\n+     * Returns true if the element is hidden. An element is hidden if it contains a\n+     * &#64;hidden tag, or if javafx flag is present and the element contains a\n+     * &#64;treatAsPrivate tag, or the element is a type and is not included and\n+     * not exported unconditionally by its module.\n@@ -1244,1 +1256,1 @@\n-     * @return true if it exists, false otherwise\n+     * @return true if element is hidden, false otherwise\n@@ -1246,3 +1258,2 @@\n-    public boolean hasHiddenTag(Element e) {\n-        \/\/ Non-included elements may still be visible via \"transclusion\" from undocumented enclosures,\n-        \/\/ but we don't want to run doclint on them, possibly causing warnings or errors.\n+    public boolean isHidden(Element e) {\n+        \/\/ Non-included elements may still be visible through the type hierarchy\n@@ -1250,0 +1261,5 @@\n+            \/\/ Treat types that are not included and not unconditionally exported as hidden\n+            if (isClassOrInterface(e) && isUnexportedType((TypeElement) e)) {\n+                return true;\n+            }\n+            \/\/ Use unchecked method to avoid running doclint, causing warnings or errors.\n@@ -1259,0 +1275,15 @@\n+    \/**\n+     * {@return true if typeElement is in a package that is not unconditionally exported\n+     * by its module}\n+     * @param typeElement a type element\n+     *\/\n+    private boolean isUnexportedType(TypeElement typeElement) {\n+        var pkg = elementUtils.getPackageOf(typeElement);\n+        var mdl = elementUtils.getModuleOf(typeElement);\n+        return mdl != null && !mdl.isUnnamed()\n+                && mdl.getDirectives().stream()\n+                .filter(d -> d.getKind() == ModuleElement.DirectiveKind.EXPORTS)\n+                .map(d -> (ModuleElement.ExportsDirective) d)\n+                .noneMatch(e -> e.getPackage().equals(pkg) && e.getTargetModules() == null);\n+    }\n+\n@@ -1296,1 +1327,1 @@\n-                if (!hasHiddenTag(te)) {\n+                if (!isHidden(te)) {\n@@ -1303,1 +1334,1 @@\n-            if (isPrivate(e) || isPackagePrivate(e) || hasHiddenTag(e)) {\n+            if (isPrivate(e) || isPackagePrivate(e) || isHidden(e)) {\n@@ -2834,1 +2865,1 @@\n-                if (isPlainInterface(peek) && !isPublic(peek) && !isLinkable(peek)) {\n+                if (isPlainInterface(peek) && !isVisible(peek)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":46,"deletions":15,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -505,1 +505,1 @@\n-        return utils.shouldDocument(e) && !utils.hasHiddenTag(e);\n+        return utils.shouldDocument(e) && !utils.isHidden(e);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8073100 8182765 8196202 8261079 8261976\n+ * @bug 8073100 8182765 8196202 8261079 8261976 8254622\n@@ -142,1 +142,2 @@\n-                \"invisibleDefaultMethod\");\n+                \"invisibleDefaultMethod\",\n+                \"InvisibleInterface\");\n@@ -154,1 +155,1 @@\n-        checkOutput(\"pkg1\/package-tree.html\", false, \"InvisibleParent.html\");\n+        checkOutput(\"pkg1\/package-tree.html\", false, \"InvisibleParent.html\", \"InvisibleInterface\");\n@@ -160,1 +161,2 @@\n-                \"pkg1\/InvisibleParent.InvisibleInner.html\");\n+                \"pkg1\/InvisibleParent.InvisibleInner.html\",\n+                \"pkg1\/InvisibleParent.InvisibleInterface.html\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHiddenTag\/TestHiddenTag.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,3 @@\n+ *\n+ * @see #invisibleInterfaceDefaultMethod()\n+ * @see #invisibleInterfaceInterfaceMethod()\n@@ -31,1 +34,1 @@\n-public class Child extends UndocumentedParent<Child> {\n+public class Child extends UndocumentedParent<Child> implements InvisibleParent.InvisibleInterface {\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHiddenTag\/pkg1\/Child.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,16 @@\n+    \/**\n+     * An invisible interface.\n+     * @hidden\n+     *\/\n+    public static interface InvisibleInterface {\n+        \/**\n+         * Default method in invisible interface.\n+         *\/\n+        default void invisibleInterfaceDefaultMethod() {}\n+\n+        \/**\n+         * Interface method in invisible interface.\n+         *\/\n+        void invisibleInterfaceInterfaceMethod();\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHiddenTag\/pkg1\/InvisibleParent.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,297 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8254622\n+ * @summary Hide superclasses from conditionally exported packages\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build javadoc.tester.* toolbox.ToolBox\n+ * @run main TestUnexported\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import toolbox.ModuleBuilder;\n+import toolbox.ToolBox;\n+\n+import javadoc.tester.JavadocTester;\n+\n+public class TestUnexported extends JavadocTester {\n+\n+    final ToolBox tb;\n+    final Path src;\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestUnexported();\n+        tester.runTests();\n+    }\n+\n+    TestUnexported() throws IOException {\n+        tb = new ToolBox();\n+        src = Path.of(\"src\");\n+        new ModuleBuilder(tb, \"ma\")\n+                .classes(\"\"\"\n+                           package pa;\n+\n+                           import pa.internal.*;\n+\n+                           \/**\n+                            * Class with unexported super types.\n+                            *\/\n+                           public abstract class A extends InternalClass implements InternalInterface {}\n+                           \"\"\",\n+                        \"\"\"\n+                             package pa.internal;\n+\n+                             \/**\n+                              * Conditionally exported class.\n+                              *\/\n+                             public class InternalClass {\n+                                \/**\n+                                 * Method in internal class.\n+                                 *\/\n+                                 public void p() {}\n+                             }\n+                             \"\"\",\n+                        \"\"\"\n+                            package pa.internal;\n+\n+                            \/**\n+                             * Conditionally exported interface.\n+                             *\/\n+                            public interface InternalInterface {\n+                               \/**\n+                                * Method in internal interface.\n+                                *\/\n+                                public void m();\n+                            }\n+                            \"\"\")\n+                .exports(\"pa\")\n+                .exportsTo(\"pa.internal\", \"mb\")\n+                .write(src);\n+\n+        new ModuleBuilder(tb, \"mb\")\n+                .classes(\"\"\"\n+                           package pb;\n+\n+                           import pa.internal.*;\n+\n+                           \/**\n+                            * Class with conditionally exported super types.\n+                            *\/\n+                           public abstract class B extends InternalClass implements InternalInterface {}\n+                           \"\"\",\n+                       \"\"\"\n+                           package pb;\n+\n+                           import pa.internal.*;\n+\n+                           \/**\n+                            * Interface with conditionally exported super interface.\n+                            *\/\n+                           public interface I extends InternalInterface {}\n+                           \"\"\")\n+                .requires(\"ma\")\n+                .exports(\"pb\")\n+                .write(src);\n+    }\n+\n+    \/\/ Types in packages that are exported conditionally are hidden in public API documentation.\n+    @Test\n+    public void test(Path base) throws Exception {\n+\n+        Path outDir = base.resolve(\"out\");\n+\n+        javadoc(\"-d\", outDir.toString(),\n+                \"--no-platform-links\",\n+                \"--module-source-path\", src.toString(),\n+                \"--show-packages\", \"exported\",\n+                \"--module\", \"ma,mb\");\n+\n+        checkExit(Exit.OK);\n+\n+        checkFiles(false, \"ma\/pa\/internal\/InternalClass.html\", \"ma\/pa\/internal\/InternalInterface.html\");\n+\n+        checkOutput(\"ma\/pa\/A.html\", false, \"InternalInterface\", \"InternalClass\");\n+        checkOutput(\"mb\/pb\/B.html\", false, \"InternalInterface\", \"InternalClass\");\n+        checkOutput(\"mb\/pb\/I.html\", false, \"InternalInterface\");\n+\n+        checkOrder(\"ma\/pa\/A.html\", \"\"\"\n+                    <div class=\"inheritance\" title=\"Inheritance Tree\">java.lang.Object\n+                    <div class=\"inheritance\">pa.A<\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public abstract class <\/spa\\\n+                    n><span class=\"element-name type-name-label\">A<\/span>\n+                    <span class=\"extends-implements\">extends java.lang.Object<\/span><\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <section class=\"detail\" id=\"m()\">\n+                    <h3>m<\/h3>\n+                    <div class=\"horizontal-scroll\">\n+                    <div class=\"member-signature\"><span class=\"return-type\">void<\/span>&nbsp;<span \\\n+                    class=\"element-name\">m<\/span>()<\/div>\n+                    <div class=\"block\">Method in internal interface.<\/div>\n+                    <\/div>\n+                    <\/section>\n+                    \"\"\",\n+                \"\"\"\n+                    <section class=\"detail\" id=\"p()\">\n+                    <h3>p<\/h3>\n+                    <div class=\"horizontal-scroll\">\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span \\\n+                    class=\"return-type\">void<\/span>&nbsp;<span class=\"element-name\">p<\/span>()<\/div>\n+                    <div class=\"block\">Method in internal class.<\/div>\n+                    <\/div>\n+                    <\/section>\n+                    \"\"\");\n+\n+        checkOrder(\"mb\/pb\/B.html\", \"\"\"\n+                    <div class=\"inheritance\" title=\"Inheritance Tree\">java.lang.Object\n+                    <div class=\"inheritance\">pb.B<\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public abstract class <\/spa\\\n+                    n><span class=\"element-name type-name-label\">B<\/span>\n+                    <span class=\"extends-implements\">extends java.lang.Object<\/span><\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <section class=\"detail\" id=\"m()\">\n+                    <h3>m<\/h3>\n+                    <div class=\"horizontal-scroll\">\n+                    <div class=\"member-signature\"><span class=\"return-type\">void<\/span>&nbsp;<span \\\n+                    class=\"element-name\">m<\/span>()<\/div>\n+                    <div class=\"block\">Method in internal interface.<\/div>\n+                    <\/div>\n+                    <\/section>\n+                    \"\"\",\n+                \"\"\"\n+                    <section class=\"detail\" id=\"p()\">\n+                    <h3>p<\/h3>\n+                    <div class=\"horizontal-scroll\">\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span \\\n+                    class=\"return-type\">void<\/span>&nbsp;<span class=\"element-name\">p<\/span>()<\/div>\n+                    <div class=\"block\">Method in internal class.<\/div>\n+                    <\/div>\n+                    <\/section>\n+                    \"\"\");\n+\n+        checkOrder(\"mb\/pb\/I.html\", \"\"\"\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public interface <\/span><sp\\\n+                    an class=\"element-name type-name-label\">I<\/span><\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <section class=\"detail\" id=\"m()\">\n+                    <h3>m<\/h3>\n+                    <div class=\"horizontal-scroll\">\n+                    <div class=\"member-signature\"><span class=\"return-type\">void<\/span>&nbsp;<span \\\n+                    class=\"element-name\">m<\/span>()<\/div>\n+                    <div class=\"block\">Method in internal interface.<\/div>\n+                    <\/div>\n+                    <\/section>\n+                    \"\"\");\n+    }\n+\n+    \/\/ Types in packages that are exported conditionally are shown when documenting\n+    \/\/ all module packages including internal ones.\n+    @Test\n+    public void testIncluded(Path base) throws Exception {\n+\n+        Path outDir = base.resolve(\"out\");\n+\n+        javadoc(\"-d\", outDir.toString(),\n+                \"--no-platform-links\",\n+                \"--module-source-path\", src.toString(),\n+                \"--show-module-contents\", \"all\",\n+                \"--show-packages\", \"all\",\n+                \"--module\", \"ma,mb\");\n+\n+        checkExit(Exit.OK);\n+\n+        checkFiles(true, \"ma\/pa\/internal\/InternalClass.html\", \"ma\/pa\/internal\/InternalInterface.html\");\n+\n+        checkOutput(\"ma\/pa\/A.html\", true, \"InternalInterface\", \"InternalClass\");\n+        checkOutput(\"mb\/pb\/B.html\", true, \"InternalInterface\", \"InternalClass\");\n+        checkOutput(\"mb\/pb\/I.html\", true, \"InternalInterface\");\n+\n+        checkOrder(\"ma\/pa\/A.html\",\n+                \"\"\"\n+                    <div class=\"inheritance\" title=\"Inheritance Tree\">java.lang.Object\n+                    <div class=\"inheritance\"><a href=\"internal\/InternalClass.html\" title=\"class in \\\n+                    pa.internal\">pa.internal.InternalClass<\/a>\n+                    <div class=\"inheritance\">pa.A<\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public abstract class <\/spa\\\n+                    n><span class=\"element-name type-name-label\">A<\/span>\n+                    <span class=\"extends-implements\">extends <a href=\"internal\/InternalClass.html\" \\\n+                    title=\"class in pa.internal\">InternalClass<\/a>\n+                    implements <a href=\"internal\/InternalInterface.html\" title=\"interface in pa.int\\\n+                    ernal\">InternalInterface<\/a><\/span><\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <h3 id=\"methods-inherited-from-class-pa.internal.InternalClass\">Methods inherit\\\n+                    ed from class&nbsp;<a href=\"internal\/InternalClass.html#method-summary\" title=\"\\\n+                    class in pa.internal\">InternalClass<\/a><\/h3>\n+                    <code><a href=\"internal\/InternalClass.html#p()\" title=\"p()\">p<\/a><\/code><\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <h3 id=\"methods-inherited-from-class-pa.internal.InternalInterface\">Methods inh\\\n+                    erited from interface&nbsp;<a href=\"internal\/InternalInterface.html#method-summ\\\n+                    ary\" title=\"interface in pa.internal\">InternalInterface<\/a><\/h3>\n+                    <code><a href=\"internal\/InternalInterface.html#m()\" title=\"m()\">m<\/a><\/code><\/div>\n+                    \"\"\");\n+\n+        checkOrder(\"mb\/pb\/B.html\",\n+                \"\"\"\n+                    <div class=\"inheritance\" title=\"Inheritance Tree\">java.lang.Object\n+                    <div class=\"inheritance\"><a href=\"..\/..\/ma\/pa\/internal\/InternalClass.html\" titl\\\n+                    e=\"class in pa.internal\">pa.internal.InternalClass<\/a>\n+                    <div class=\"inheritance\">pb.B<\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <div class=\"type-signature\"><span class=\"modifiers\">public abstract class <\/spa\\\n+                    n><span class=\"element-name type-name-label\">B<\/span>\n+                    <span class=\"extends-implements\">extends <a href=\"..\/..\/ma\/pa\/internal\/Internal\\\n+                    Class.html\" title=\"class in pa.internal\">InternalClass<\/a>\n+                    implements <a href=\"..\/..\/ma\/pa\/internal\/InternalInterface.html\" title=\"interfa\\\n+                    ce in pa.internal\">InternalInterface<\/a><\/span><\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <h3 id=\"methods-inherited-from-class-pa.internal.InternalClass\">Methods inherit\\\n+                    ed from class&nbsp;<a href=\"..\/..\/ma\/pa\/internal\/InternalClass.html#method-summ\\\n+                    ary\" title=\"class in pa.internal\">InternalClass<\/a><\/h3>\n+                    <code><a href=\"..\/..\/ma\/pa\/internal\/InternalClass.html#p()\" title=\"p()\">p<\/a><\/code><\/div>\n+                    \"\"\",\n+                \"\"\"\n+                    <h3 id=\"methods-inherited-from-class-pa.internal.InternalInterface\">Methods inh\\\n+                    erited from interface&nbsp;<a href=\"..\/..\/ma\/pa\/internal\/InternalInterface.html\\\n+                    #method-summary\" title=\"interface in pa.internal\">InternalInterface<\/a><\/h3>\n+                    <code><a href=\"..\/..\/ma\/pa\/internal\/InternalInterface.html#m()\" title=\"m()\">m<\/a><\/code><\/div>\n+                    \"\"\");\n+\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testUnexported\/TestUnexported.java","additions":297,"deletions":0,"binary":false,"changes":297,"status":"added"}]}