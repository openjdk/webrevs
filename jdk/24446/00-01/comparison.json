{"files":[{"patch":"@@ -269,1 +269,1 @@\n-            if (!(utils.isPublic(inheritedClass) || utils.isLinkable(inheritedClass))) {\n+            if (!utils.isVisible(inheritedClass)) {\n@@ -275,3 +275,0 @@\n-            if (utils.isHidden(inheritedClass)) {\n-                continue;\n-            }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -131,11 +131,7 @@\n-                if (parent != intf) {\n-                    if (utils.isPublic(intf) || utils.isLinkable(intf)) {\n-                        if (isFirst) {\n-                            isFirst = false;\n-                            if (utils.isPlainInterface(typeElement)) {\n-                                content.add(\" (\");\n-                                content.add(contents.also);\n-                                content.add(\" extends \");\n-                            } else {\n-                                content.add(\" (implements \");\n-                            }\n+                if (parent != intf && utils.isVisible(intf)) {\n+                    if (isFirst) {\n+                        isFirst = false;\n+                        if (utils.isPlainInterface(typeElement)) {\n+                            content.add(\" (\");\n+                            content.add(contents.also);\n+                            content.add(\" extends \");\n@@ -143,1 +139,1 @@\n-                            content.add(\", \");\n+                            content.add(\" (implements \");\n@@ -145,1 +141,2 @@\n-                        addPreQualifiedClassLink(HtmlLinkInfo.Kind.SHOW_TYPE_PARAMS, intf, content);\n+                    } else {\n+                        content.add(\", \");\n@@ -147,0 +144,1 @@\n+                    addPreQualifiedClassLink(HtmlLinkInfo.Kind.SHOW_TYPE_PARAMS, intf, content);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractTreeWriter.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -241,3 +241,1 @@\n-            if (holder.equals(typeElement) ||\n-                    !(utils.isPublic(holder) ||\n-                    utils.isLinkable(holder))) {\n+            if (holder.equals(typeElement) || !utils.isVisible(holder)) {\n@@ -352,1 +350,1 @@\n-        if (!(utils.isPublic(holder) || utils.isLinkable(holder))) {\n+        if (!utils.isVisible(holder) || utils.isHidden(method)) {\n@@ -361,3 +359,0 @@\n-        if (utils.isHidden(holder) || utils.isHidden(method)) {\n-            return;\n-        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriter.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -202,2 +202,1 @@\n-            if (holder.equals(typeElement) ||\n-                    (!utils.isPublic(holder) || utils.isLinkable(holder))) {\n+            if (holder.equals(typeElement) || !utils.isVisible(holder)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PropertyWriter.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-                        if (!(utils.isPublic(tDoc) || utils.isLinkable(tDoc)) || utils.isHidden(tDoc)) {\n+                        if (!utils.isVisible(tDoc)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Signatures.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -251,2 +251,1 @@\n-            if (refSignature.trim().startsWith(\"#\") &&\n-                    ! (utils.isPublic(containing) || utils.isLinkable(containing))) {\n+            if (refSignature.trim().startsWith(\"#\") && !utils.isVisible(containing)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/LinkTaglet.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -789,1 +789,1 @@\n-                if ((isPublic(e) || isLinkable(e)) && !isHidden(e)) {\n+                if (isVisible(e)) {\n@@ -1009,1 +1009,1 @@\n-            if (!isHidden(te) && (isPublic(te) || isLinkable(te))) {\n+            if (isVisible(te)) {\n@@ -1239,0 +1239,11 @@\n+    \/**\n+     * Returns {@code true} if the type element is visible. This means that it is not hidden,\n+     * and is either public or linkable (either internally or externally).\n+     *\n+     * @param typeElement the type element\n+     * @return {@code true} if the type element is visible\n+     *\/\n+    public boolean isVisible(TypeElement typeElement) {\n+        return !isHidden(typeElement) && (isPublic(typeElement) || isLinkable(typeElement));\n+    }\n+\n@@ -2854,1 +2865,1 @@\n-                if (isPlainInterface(peek) && !isPublic(peek) && !isLinkable(peek)) {\n+                if (isPlainInterface(peek) && !isVisible(peek)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-                \"InvisibleParent.InvisibleInterface\");\n+                \"InvisibleInterface\");\n@@ -155,1 +155,1 @@\n-        checkOutput(\"pkg1\/package-tree.html\", false, \"InvisibleParent.html\");\n+        checkOutput(\"pkg1\/package-tree.html\", false, \"InvisibleParent.html\", \"InvisibleInterface\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHiddenTag\/TestHiddenTag.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+ *\n+ * @see #invisibleInterfaceDefaultMethod()\n+ * @see #invisibleInterfaceInterfaceMethod()\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHiddenTag\/pkg1\/Child.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,1 +62,11 @@\n-    public static interface InvisibleInterface {}\n+    public static interface InvisibleInterface {\n+        \/**\n+         * Default method in invisible interface.\n+         *\/\n+        default void invisibleInterfaceDefaultMethod() {}\n+\n+        \/**\n+         * Interface method in invisible interface.\n+         *\/\n+        void invisibleInterfaceInterfaceMethod();\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testHiddenTag\/pkg1\/InvisibleParent.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}