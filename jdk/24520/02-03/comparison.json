{"files":[{"patch":"@@ -480,0 +480,18 @@\n+    \/\/ Rethrows the IAPE thrown by an implementation, adding an explanation\n+    \/\/ on in which situation it fails.\n+    private void rethrow(InvalidAlgorithmParameterException e)\n+            throws InvalidAlgorithmParameterException {\n+        var source = serviceIterator == null\n+                ? \"specified\" : \"previously selected\";\n+        if (!skipDebug && pdebug != null) {\n+            pdebug.println(\"A \" + this.getAlgorithm()\n+                    + \" derivation cannot be performed \"\n+                    + \"using the supplied derivation \"\n+                    + \"inputs, using the \" + source + \" \"\n+                    + theOne.provider().getName()\n+                    + \".\");\n+        }\n+        throw new InvalidAlgorithmParameterException(\"The \" + source + \" provider \"\n+                + theOne.provider.getName() + \" does not support this input\", e);\n+    }\n+\n@@ -524,1 +542,6 @@\n-            return theOne.spi().engineDeriveKey(alg, derivationSpec);\n+            try {\n+                return theOne.spi().engineDeriveKey(alg, derivationSpec);\n+            } catch (InvalidAlgorithmParameterException e) {\n+                rethrow(e);\n+                return null; \/\/ will not be called\n+            }\n@@ -555,1 +578,6 @@\n-            return theOne.spi().engineDeriveData(derivationSpec);\n+            try {\n+                return theOne.spi().engineDeriveData(derivationSpec);\n+            } catch (InvalidAlgorithmParameterException e) {\n+                rethrow(e);\n+                return null; \/\/ will not be called\n+            }\n@@ -614,0 +642,5 @@\n+                        if (!skipDebug && pdebug != null) {\n+                            pdebug.println(\"The provider \"\n+                                    + currOne.provider().getName()\n+                                    + \" is selected\");\n+                        }\n@@ -650,1 +683,2 @@\n-                throw new InvalidAlgorithmParameterException(lastException);\n+                throw new InvalidAlgorithmParameterException(\n+                        \"No provider supports this input\", lastException);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":37,"deletions":3,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8353888\n+ * @library \/test\/lib \/test\/jdk\/security\/unsignedjce\n+ * @build java.base\/javax.crypto.ProviderVerifier\n+ * @run main\/othervm KDFDelayedProviderException\n+ * @summary check delayed provider selection exception messages\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+import javax.crypto.KDF;\n+import javax.crypto.KDFParameters;\n+import javax.crypto.KDFSpi;\n+import javax.crypto.SecretKey;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.Provider;\n+import java.security.Security;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.NamedParameterSpec;\n+\n+public class KDFDelayedProviderException {\n+    public static void main(String[] args) throws Exception {\n+\n+        Security.addProvider(new P1()); \/\/ only accepts NamedParameterSpec.ED25519\n+        Security.addProvider(new P2()); \/\/ only accepts NamedParameterSpec.ED448\n+\n+        checkMessage(\"No provider supports this input\",\n+                () -> KDF.getInstance(\"K\").deriveData(NamedParameterSpec.X25519));\n+\n+        checkMessage(\"The specified provider P1 does not support this input\",\n+                () -> KDF.getInstance(\"K\", \"P1\").deriveData(NamedParameterSpec.ED448));\n+\n+        \/\/ ED448 is supported by one provider\n+        KDF.getInstance(\"K\").deriveData(NamedParameterSpec.ED448);\n+\n+        \/\/ After P1 has been selected, ED448 is no longer supported\n+        var k = KDF.getInstance(\"K\");\n+        k.deriveData(NamedParameterSpec.ED25519);\n+        checkMessage(\"The previously selected provider P1 does not support this input\",\n+                () -> k.deriveData(NamedParameterSpec.ED448));\n+\n+    }\n+\n+    public static void checkMessage(String msg, Asserts.TestMethod testMethod) {\n+        var exc = Asserts.assertThrows(InvalidAlgorithmParameterException.class, testMethod);\n+        Asserts.assertEquals(msg, exc.getMessage());\n+    }\n+\n+    public static class P1 extends Provider {\n+        public P1() {\n+            super(\"P1\", \"1\", \"\");\n+            put(\"KDF.K\", K1.class.getName());\n+        }\n+    }\n+\n+    public static class P2 extends Provider {\n+        public P2() {\n+            super(\"P2\", \"1\", \"\");\n+            put(\"KDF.K\", K2.class.getName());\n+        }\n+    }\n+\n+    public static class K1 extends KDFSpi {\n+        public K1(KDFParameters p) throws InvalidAlgorithmParameterException {\n+            super(p);\n+        }\n+        protected byte[] engineDeriveData(AlgorithmParameterSpec derivationSpec)\n+                throws InvalidAlgorithmParameterException {\n+            if (derivationSpec != NamedParameterSpec.ED25519) {\n+                throw new InvalidAlgorithmParameterException(\"Not Ed25519\");\n+            }\n+            return new byte[0];\n+        }\n+        protected KDFParameters engineGetParameters() {\n+            return null;\n+        }\n+        protected SecretKey engineDeriveKey(String alg, AlgorithmParameterSpec derivationSpec) {\n+            return null;\n+        }\n+    }\n+\n+    public static class K2 extends KDFSpi {\n+        public K2(KDFParameters p) throws InvalidAlgorithmParameterException {\n+            super(p);\n+        }\n+        protected byte[] engineDeriveData(AlgorithmParameterSpec derivationSpec)\n+                throws InvalidAlgorithmParameterException {\n+            if (derivationSpec != NamedParameterSpec.ED448) {\n+                throw new InvalidAlgorithmParameterException(\"Not Ed448\");\n+            }\n+            return new byte[0];\n+        }\n+        protected KDFParameters engineGetParameters() {\n+            return null;\n+        }\n+        protected SecretKey engineDeriveKey(String alg, AlgorithmParameterSpec derivationSpec) {\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/KDF\/KDFDelayedProviderException.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"}]}