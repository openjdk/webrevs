{"files":[{"patch":"@@ -87,8 +87,1 @@\n-#ifdef _WIN64\n-const juint  float_sign_mask  = 0x7FFFFFFF;\n-const juint  float_infinity   = 0x7F800000;\n-const julong double_sign_mask = CONST64(0x7FFFFFFFFFFFFFFF);\n-const julong double_infinity  = CONST64(0x7FF0000000000000);\n-#endif\n-\n-#if !defined(_WINDOWS) || defined(_WIN64)\n+#ifndef _WIN64\n@@ -96,13 +89,0 @@\n-#ifdef _WIN64\n-  \/\/ 64-bit Windows on amd64 returns the wrong values for\n-  \/\/ infinity operands.\n-  union { jfloat f; juint i; } xbits, ybits;\n-  xbits.f = x;\n-  ybits.f = y;\n-  \/\/ x Mod Infinity == x unless x is infinity\n-  if (((xbits.i & float_sign_mask) != float_infinity) &&\n-       ((ybits.i & float_sign_mask) == float_infinity) ) {\n-    return x;\n-  }\n-  return ((jfloat)fmod_winx64((double)x, (double)y));\n-#else\n@@ -121,1 +101,0 @@\n-#endif\n@@ -125,11 +104,0 @@\n-#ifdef _WIN64\n-  union { jdouble d; julong l; } xbits, ybits;\n-  xbits.d = x;\n-  ybits.d = y;\n-  \/\/ x Mod Infinity == x unless x is infinity\n-  if (((xbits.l & double_sign_mask) != double_infinity) &&\n-       ((ybits.l & double_sign_mask) == double_infinity) ) {\n-    return x;\n-  }\n-  return ((jdouble)fmod_winx64((double)x, (double)y));\n-#else\n@@ -148,1 +116,0 @@\n-#endif\n@@ -150,1 +117,1 @@\n-#endif \/\/ !defined(_WINDOWS) || defined(_WIN64)\n+#endif \/\/ !_WIN64\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86.cpp","additions":2,"deletions":35,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -231,1 +231,8 @@\n-#if !defined(X86) || (defined(_WINDOWS) && !defined(_WIN64))\n+#ifdef _WIN64\n+const juint  float_sign_mask  = 0x7FFFFFFF;\n+const juint  float_infinity   = 0x7F800000;\n+const julong double_sign_mask = CONST64(0x7FFFFFFFFFFFFFFF);\n+const julong double_infinity  = CONST64(0x7FF0000000000000);\n+#endif\n+\n+#if !defined(X86) || defined(_WIN64)\n@@ -233,0 +240,13 @@\n+#ifdef _WIN64\n+  \/\/ 64-bit Windows on amd64 returns the wrong values for\n+  \/\/ infinity operands.\n+  union { jfloat f; juint i; } xbits, ybits;\n+  xbits.f = x;\n+  ybits.f = y;\n+  \/\/ x Mod Infinity == x unless x is infinity\n+  if (((xbits.i & float_sign_mask) != float_infinity) &&\n+       ((ybits.i & float_sign_mask) == float_infinity) ) {\n+    return x;\n+  }\n+  return ((jfloat)fmod_winx64((double)x, (double)y));\n+#else\n@@ -234,0 +254,1 @@\n+#endif\n@@ -237,0 +258,11 @@\n+#ifdef _WIN64\n+  union { jdouble d; julong l; } xbits, ybits;\n+  xbits.d = x;\n+  ybits.d = y;\n+  \/\/ x Mod Infinity == x unless x is infinity\n+  if (((xbits.l & double_sign_mask) != double_infinity) &&\n+       ((ybits.l & double_sign_mask) == double_infinity) ) {\n+    return x;\n+  }\n+  return ((jdouble)fmod_winx64((double)x, (double)y));\n+#else\n@@ -238,1 +270,0 @@\n-JRT_END\n@@ -240,0 +271,2 @@\n+JRT_END\n+#endif \/\/ !X86 || _WIN64\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":35,"deletions":2,"binary":false,"changes":37,"status":"modified"}]}