{"files":[{"patch":"@@ -47,1 +47,1 @@\n-  size_t start_size_log_2 = MAX2(ceil_log2(table_size), 2); \/\/ 2 is minimum size even though some dictionaries only have one entry\n+  size_t start_size_log_2 = MAX2(log2i_ceil(table_size), 2); \/\/ 2 is minimum size even though some dictionaries only have one entry\n","filename":"src\/hotspot\/share\/classfile\/dictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-  size_t start_size_log_2 = ceil_log2(StringTableSize);\n+  size_t start_size_log_2 = log2i_ceil(StringTableSize);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-  size_t start_size_log_2 = ceil_log2(SymbolTableSize);\n+  size_t start_size_log_2 = log2i_ceil(SymbolTableSize);\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-  const size_t start_size_log_2 = ceil_log2(DEFAULT_TABLE_SIZE);\n+  const size_t start_size_log_2 = log2i_ceil(DEFAULT_TABLE_SIZE);\n","filename":"src\/hotspot\/share\/services\/finalizerService.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-  size_t size_log = ceil_log2(size);\n+  size_t size_log = log2i_ceil(size);\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,0 +82,7 @@\n+\/\/ Ceiling of log2 of a positive, integral value, i.e., smallest i such that value <= 2^i.\n+template <typename T, ENABLE_IF(std::is_integral<T>::value)>\n+inline int log2i_ceil(T value) {\n+  assert(value > 0, \"Invalid value\");\n+  return log2i_graceful(value - 1) + 1;\n+}\n+\n@@ -123,7 +130,0 @@\n-\/\/ Find log2 value greater than this input\n-template <typename T, ENABLE_IF(std::is_integral<T>::value)>\n-inline int ceil_log2(T value) {\n-  assert(value > 0, \"Invalid value\");\n-  return log2i_graceful(value - 1) + 1;\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/powerOfTwo.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -309,11 +309,11 @@\n-template <typename T> void test_ceil_log2() {\n-  EXPECT_EQ(ceil_log2(T(1)), 0) << \"value = \" << T(1);\n-  EXPECT_EQ(ceil_log2(T(2)), 1) << \"value = \" << T(2);\n-  EXPECT_EQ(ceil_log2(T(3)), 2) << \"value = \" << T(3);\n-  EXPECT_EQ(ceil_log2(T(4)), 2) << \"value = \" << T(4);\n-  EXPECT_EQ(ceil_log2(T(5)), 3) << \"value = \" << T(5);\n-  EXPECT_EQ(ceil_log2(T(6)), 3) << \"value = \" << T(6);\n-  EXPECT_EQ(ceil_log2(T(7)), 3) << \"value = \" << T(7);\n-  EXPECT_EQ(ceil_log2(T(8)), 3) << \"value = \" << T(8);\n-  EXPECT_EQ(ceil_log2(T(9)), 4) << \"value = \" << T(9);\n-  EXPECT_EQ(ceil_log2(T(10)), 4) << \"value = \" << T(10);\n+template <typename T> void test_log2i_ceil() {\n+  EXPECT_EQ(log2i_ceil(T(1)), 0) << \"value = \" << T(1);\n+  EXPECT_EQ(log2i_ceil(T(2)), 1) << \"value = \" << T(2);\n+  EXPECT_EQ(log2i_ceil(T(3)), 2) << \"value = \" << T(3);\n+  EXPECT_EQ(log2i_ceil(T(4)), 2) << \"value = \" << T(4);\n+  EXPECT_EQ(log2i_ceil(T(5)), 3) << \"value = \" << T(5);\n+  EXPECT_EQ(log2i_ceil(T(6)), 3) << \"value = \" << T(6);\n+  EXPECT_EQ(log2i_ceil(T(7)), 3) << \"value = \" << T(7);\n+  EXPECT_EQ(log2i_ceil(T(8)), 3) << \"value = \" << T(8);\n+  EXPECT_EQ(log2i_ceil(T(9)), 4) << \"value = \" << T(9);\n+  EXPECT_EQ(log2i_ceil(T(10)), 4) << \"value = \" << T(10);\n@@ -323,1 +323,1 @@\n-    EXPECT_EQ(ceil_log2(std::numeric_limits<T>::max()),\n+    EXPECT_EQ(log2i_ceil(std::numeric_limits<T>::max()),\n@@ -326,1 +326,1 @@\n-    EXPECT_EQ(ceil_log2(std::numeric_limits<T>::max()),\n+    EXPECT_EQ(log2i_ceil(std::numeric_limits<T>::max()),\n@@ -331,9 +331,9 @@\n-TEST(power_of_2, ceil_log2) {\n-  test_ceil_log2<int8_t>();\n-  test_ceil_log2<int16_t>();\n-  test_ceil_log2<int32_t>();\n-  test_ceil_log2<int64_t>();\n-  test_ceil_log2<uint8_t>();\n-  test_ceil_log2<uint16_t>();\n-  test_ceil_log2<uint32_t>();\n-  test_ceil_log2<uint64_t>();\n+TEST(power_of_2, log2i_ceil) {\n+  test_log2i_ceil<int8_t>();\n+  test_log2i_ceil<int16_t>();\n+  test_log2i_ceil<int32_t>();\n+  test_log2i_ceil<int64_t>();\n+  test_log2i_ceil<uint8_t>();\n+  test_log2i_ceil<uint16_t>();\n+  test_log2i_ceil<uint32_t>();\n+  test_log2i_ceil<uint64_t>();\n@@ -343,1 +343,1 @@\n-TEST_VM_ASSERT_MSG(power_of_2, ceil_log2_invalid,\n+TEST_VM_ASSERT_MSG(power_of_2, log2i_ceil_invalid,\n@@ -345,1 +345,1 @@\n-  ceil_log2(0);\n+  log2i_ceil(0);\n","filename":"test\/hotspot\/gtest\/utilities\/test_powerOfTwo.cpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"}]}