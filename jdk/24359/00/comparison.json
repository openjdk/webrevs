{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @library \/tools\/lib ..\/..\/lib\n- * @library \/test\/lib\n+ * @library \/tools\/lib ..\/..\/lib \/test\/lib\n@@ -36,1 +35,1 @@\n- * @build jdk.test.lib.Platform\n+ * @build jdk.test.lib.Platform jdk.test.lib.net.SimpleSSLContext jdk.test.lib.net.URIBuilder\n@@ -42,1 +41,0 @@\n-import java.io.InputStream;\n@@ -47,0 +45,1 @@\n+import java.net.URISyntaxException;\n@@ -52,1 +51,0 @@\n-import java.security.KeyStore;\n@@ -58,1 +56,0 @@\n-import javax.net.ssl.KeyManagerFactory;\n@@ -61,1 +58,0 @@\n-import javax.net.ssl.TrustManagerFactory;\n@@ -69,0 +65,2 @@\n+import jdk.test.lib.net.SimpleSSLContext;\n+import jdk.test.lib.net.URIBuilder;\n@@ -76,0 +74,3 @@\n+    \/\/ represents the HTTP response body length when the response contains no body\n+    private static final int NO_RESPONSE_BODY = -1;\n+\n@@ -209,1 +210,1 @@\n-        InetAddress localHost = InetAddress.getLoopbackAddress();\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -211,2 +212,6 @@\n-            oldServer = HttpServer.create(new InetSocketAddress(localHost, 0), 0);\n-            String oldURL = \"http:\/\" + oldServer.getAddress();\n+            oldServer = HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n+            String oldURL = URIBuilder.newBuilder()\n+                    .scheme(\"http\")\n+                    .loopback()\n+                    .port(oldServer.getAddress().getPort())\n+                    .build().toString();\n@@ -218,2 +223,9 @@\n-            newServer = HttpsServer.create(new InetSocketAddress(localHost, 0), 0);\n-            String newURL = \"https:\/\" + newServer.getAddress();\n+            if (sslContext == null) {\n+                throw new AssertionError(\"Could not create a SSLContext\");\n+            }\n+            newServer = HttpsServer.create(new InetSocketAddress(loopback, 0), 0);\n+            String newURL = URIBuilder.newBuilder()\n+                    .scheme(\"https\")\n+                    .loopback()\n+                    .port(newServer.getAddress().getPort())\n+                    .build().toString();\n@@ -243,1 +255,1 @@\n-                        \"-link\", \"http:\/\" + oldServer.getAddress(),\n+                        \"-link\", oldURL,\n@@ -284,1 +296,10 @@\n-        String redirectTo = newProtocol + \":\/\" + newServer.getAddress() + x.getRequestURI();\n+        String redirectTo = null;\n+        try {\n+            redirectTo = URIBuilder.newBuilder().scheme(newProtocol)\n+                    .host(newServer.getAddress().getAddress())\n+                    .port(newServer.getAddress().getPort())\n+                    .path(x.getRequestURI().getPath())\n+                    .build().toString();\n+        } catch (URISyntaxException e) {\n+            throw new IOException(e);\n+        }\n@@ -287,1 +308,1 @@\n-        x.sendResponseHeaders(HttpURLConnection.HTTP_MOVED_PERM, 0);\n+        x.sendResponseHeaders(HttpURLConnection.HTTP_MOVED_PERM, NO_RESPONSE_BODY);\n@@ -308,1 +329,1 @@\n-            x.sendResponseHeaders(HttpURLConnection.HTTP_NOT_FOUND, 0);\n+            x.sendResponseHeaders(HttpURLConnection.HTTP_NOT_FOUND, NO_RESPONSE_BODY);\n@@ -312,56 +333,0 @@\n-\n-    \/**\n-     * Creates a simple usable SSLContext for an HttpsServer using\n-     * a default keystore in the test tree.\n-     * <p>\n-     * This class is based on\n-     * test\/jdk\/java\/net\/httpclient\/whitebox\/java.net.http\/jdk\/internal\/net\/http\/SimpleSSLContext.java\n-     *\/\n-    static class SimpleSSLContext {\n-\n-        private final SSLContext ssl;\n-\n-        \/**\n-         * Loads default keystore.\n-         *\/\n-        SimpleSSLContext() throws Exception {\n-            Path p = Path.of(System.getProperty(\"test.src\", \".\")).toAbsolutePath();\n-            while (!Files.exists(p.resolve(\"TEST.ROOT\"))) {\n-                p = p.getParent();\n-                if (p == null) {\n-                    throw new IOException(\"can't find TEST.ROOT\");\n-                }\n-            }\n-\n-            System.err.println(\"Test suite root: \" + p);\n-            Path testKeys = p.resolve(\"..\/lib\/jdk\/test\/lib\/net\/testkeys\").normalize();\n-            if (!Files.exists(testKeys)) {\n-                throw new IOException(\"can't find testkeys\");\n-            }\n-            System.err.println(\"Test keys: \" + testKeys);\n-\n-            try (InputStream fis = Files.newInputStream(testKeys)) {\n-                ssl = init(fis);\n-            }\n-        }\n-\n-        private SSLContext init(InputStream i) throws Exception {\n-            char[] passphrase = \"passphrase\".toCharArray();\n-            KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n-            ks.load(i, passphrase);\n-\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"PKIX\");\n-            kmf.init(ks, passphrase);\n-\n-            TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-            tmf.init(ks);\n-\n-            SSLContext ssl = SSLContext.getInstance(\"TLS\");\n-            ssl.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-            return ssl;\n-        }\n-\n-        SSLContext get() {\n-            return ssl;\n-        }\n-    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLinkOption\/TestRedirectLinks.java","additions":38,"deletions":73,"binary":false,"changes":111,"status":"modified"}]}