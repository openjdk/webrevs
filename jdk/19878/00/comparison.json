{"files":[{"patch":"@@ -2923,1 +2923,1 @@\n-                    case NULL: case IDENTIFIER: case TRUE: case FALSE:\n+                    case NULL: case IDENTIFIER: case UNDERSCORE: case TRUE: case FALSE:\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8335136\n+ * @summary Underscore as parameter name in one-parameter functional types fails to compile in yield statement if not enclosed in parentheses\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.JavacTask toolbox.ToolBox toolbox.Task\n+ * @run main ExpressionSwitchUnderscoreAfterYield\n+ *\/\n+\n+import toolbox.*;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+public class ExpressionSwitchUnderscoreAfterYield extends TestRunner {\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    private final Path ROOT = Path.of(\".\");\n+\n+    public ExpressionSwitchUnderscoreAfterYield() {\n+        super(System.err);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new ExpressionSwitchUnderscoreAfterYield().runTests();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(f -> {\n+            if (f.getName().endsWith(\"_ShouldFailToCompile\")) {\n+                return new Object[]{\n+                        List.of(\n+                                FailParams.UNDERSCORE_YIELDED,\n+                                FailParams.ASSIGNMENT_TO_UNDERSCORE_IN_YIELD\n+                        )\n+                };\n+            }\n+            return new Object[0];\n+        });\n+    }\n+\n+    @Test\n+    public void testUnderscoreAsParameterNameInLambda_ShouldCompileFine() throws Exception {\n+        var code = \"\"\"\n+                        import java.util.function.*;\n+                        \\s\n+                        public class Test {\n+                            public static void main(String[] args) {\n+                                Consumer<Object> result = switch (1) {\n+                                    case 1 -> {\n+                                        yield _ -> {};\n+                                    }\n+                                    default -> null;\n+                                };\n+                            }\n+                        }\n+                        \"\"\";\n+        tb.writeJavaFiles(ROOT, code);\n+        new toolbox.JavacTask(tb)\n+                .files(tb.findJavaFiles(ROOT))\n+                .run(Task.Expect.SUCCESS);\n+    }\n+\n+    public record FailParams(String code, List<String> expectedDiagnosticMessage) {\n+        public static FailParams UNDERSCORE_YIELDED = new FailParams(\n+                \"\"\"\n+                        public class Test {\n+                            public static void main(String[] args) {\n+                                Object result = switch (1) {\n+                                    case 1 -> {\n+                                        yield _;\n+                                    }\n+                                    default -> null;\n+                                };\n+                            }\n+                        }\n+                        \"\"\",\n+                List.of(\"Test.java:5:23: compiler.err.use.of.underscore.not.allowed.non.variable\", \"1 error\")\n+        );\n+\n+        public static FailParams ASSIGNMENT_TO_UNDERSCORE_IN_YIELD = new FailParams(\n+                \"\"\"\n+                        public class Test {\n+                            public static void main(String[] args) {\n+                                Object result = switch (1) {\n+                                    case 1 -> {\n+                                        yield _ = 1;\n+                                    }\n+                                    default -> null;\n+                                };\n+                            }\n+                        }\n+                        \"\"\",\n+                List.of(\"Test.java:5:23: compiler.err.use.of.underscore.not.allowed.non.variable\", \"1 error\")\n+        );\n+    }\n+\n+    @Test\n+    public void testUnderscoreAsParameterNameInLambda_ShouldFailToCompile(List<FailParams> params) throws Exception {\n+        for (var param : params) {\n+            tb.writeJavaFiles(ROOT, param.code);\n+            Task.Result result = new JavacTask(tb)\n+                    .options(\"-XDrawDiagnostics\")\n+                    .files(tb.findJavaFiles(ROOT))\n+                    .run(Task.Expect.FAIL);\n+            tb.checkEqual(param.expectedDiagnosticMessage, result.getOutputLines(Task.OutputKind.DIRECT));\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchUnderscoreAfterYield.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"}]}