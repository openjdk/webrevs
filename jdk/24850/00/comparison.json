{"files":[{"patch":"@@ -192,0 +192,3 @@\n+java\/awt\/datatransfer\/ClipboardPerformanceTest.java 8029022 windows-all\n+java\/awt\/datatransfer\/HTMLTransferConsoleOutputTest.java 8237254 macosx-all\n+java\/awt\/datatransfer\/ImageTransferCrashTest.java 8237253 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4463560\n+ * @requires (os.family == \"windows\")\n+ * @summary Tests that datatransfer doesn't take too much time to complete\n+ * @key headful\n+ * @library \/test\/lib\n+ * @run main\/timeout=300 ClipboardPerformanceTest\n+ *\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ClipboardPerformanceTest {\n+    public static final int CODE_FAILURE = 1;\n+    public static final int CODE_OTHER_FAILURE = 2;\n+    static String eoln;\n+    static char[] text;\n+    public static final int ARRAY_SIZE = 100000;\n+    public static final int RATIO_THRESHOLD = 10;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            ClipboardPerformanceTest clipboardPerformanceTest = new ClipboardPerformanceTest();\n+            clipboardPerformanceTest.initialize();\n+            return;\n+        }\n+\n+        long before, after, oldTime, newTime;\n+        float ratio;\n+\n+        try {\n+            Transferable t = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);\n+            before = System.currentTimeMillis();\n+            String ss = (String) t.getTransferData(new DataFlavor(\"text\/plain; class=java.lang.String\"));\n+            after = System.currentTimeMillis();\n+\n+            System.err.println(\"Size: \" + ss.length());\n+            newTime = after - before;\n+            System.err.println(\"Time consumed: \" + newTime);\n+\n+            initArray();\n+\n+            StringBuffer buf = new StringBuffer(new String(text));\n+            int eoln_len = eoln.length();\n+            before = System.currentTimeMillis();\n+\n+            for (int i = 0; i + eoln_len <= buf.length(); i++) {\n+                if (eoln.equals(buf.substring(i, i + eoln_len))) {\n+                    buf.replace(i, i + eoln_len, \"\\n\");\n+                }\n+            }\n+\n+            after = System.currentTimeMillis();\n+            oldTime = after - before;\n+            System.err.println(\"Old algorithm: \" + oldTime);\n+            ratio = oldTime \/ newTime;\n+            System.err.println(\"Ratio: \" + ratio);\n+\n+            if (ratio < RATIO_THRESHOLD) {\n+                System.out.println(\"Time ratio failure!!\");\n+                System.exit(CODE_FAILURE);\n+            }\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            System.exit(CODE_OTHER_FAILURE);\n+        }\n+        System.out.println(\"Test Pass!\");\n+    }\n+\n+    public static void initArray() {\n+        text = new char[ARRAY_SIZE + 2];\n+\n+        for (int i = 0; i < ARRAY_SIZE; i += 3) {\n+            text[i] = '\\r';\n+            text[i + 1] = '\\n';\n+            text[i + 2] = 'a';\n+        }\n+        eoln = \"\\r\\n\";\n+    }\n+\n+    public void initialize() throws Exception {\n+        initArray();\n+        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        cb.setContents(new StringSelection(new String(text)), null);\n+\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                ClipboardPerformanceTest.class.getName(),\n+                \"child\"\n+        );\n+\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            process.destroyForcibly();\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n+        }\n+\n+        outputAnalyzer.shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/datatransfer\/ClipboardPerformanceTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4638351\n+ * @summary tests that HTML transfer doesn't cause console output\n+ * @key headful\n+ * @library \/test\/lib\n+ * @run main HTMLTransferConsoleOutputTest\n+ *\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class HTMLTransferConsoleOutputTest implements ClipboardOwner {\n+    static final Clipboard clipboard =\n+            Toolkit.getDefaultToolkit().getSystemClipboard();\n+    static final DataFlavor dataFlavor =\n+            new DataFlavor(\"text\/html; class=java.lang.String\", null);\n+    static final String magic = \"TESTMAGICSTRING\";\n+    static final Transferable transferable = new Transferable() {\n+        final DataFlavor[] flavors = new DataFlavor[]{dataFlavor};\n+        final String data = \"<html><body>\" + magic + \"<\/html><\/body>\";\n+\n+        public DataFlavor[] getTransferDataFlavors() {\n+            return flavors;\n+        }\n+\n+        public boolean isDataFlavorSupported(DataFlavor df) {\n+            return dataFlavor.equals(df);\n+        }\n+\n+        public Object getTransferData(DataFlavor df)\n+                throws UnsupportedFlavorException {\n+            if (!isDataFlavorSupported(df)) {\n+                throw new UnsupportedFlavorException(df);\n+            }\n+            return data;\n+        }\n+    };\n+    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    public static final int CLIPBOARD_DELAY = 1000;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            HTMLTransferConsoleOutputTest htmlTransferConsoleOutputTest = new HTMLTransferConsoleOutputTest();\n+            htmlTransferConsoleOutputTest.initialize();\n+            return;\n+        }\n+        final ClipboardOwner clipboardOwner = new ClipboardOwner() {\n+            public void lostOwnership(Clipboard clip,\n+                                      Transferable contents) {\n+                System.exit(0);\n+            }\n+        };\n+        clipboard.setContents(transferable, clipboardOwner);\n+        final Object o = new Object();\n+        synchronized (o) {\n+            try {\n+                o.wait();\n+            } catch (InterruptedException ie) {\n+                ie.printStackTrace();\n+            }\n+        }\n+        System.out.println(\"Test Pass!\");\n+    }\n+\n+    public void initialize() throws Exception {\n+        clipboard.setContents(transferable, this);\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                HTMLTransferConsoleOutputTest.class.getName(),\n+                \"child\"\n+        );\n+\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            process.destroyForcibly();\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n+        }\n+\n+        byte[] bytes = baos.toByteArray();\n+        String string = null;\n+        try {\n+            string = new String(bytes, \"ASCII\");\n+        } catch (UnsupportedEncodingException uee) {\n+            uee.printStackTrace();\n+        }\n+        if (string.lastIndexOf(magic) != -1) {\n+            throw new RuntimeException(\"Test failed. Output contains:\" +\n+                    string);\n+        }\n+\n+        outputAnalyzer.shouldHaveExitValue(0);\n+    }\n+\n+\n+    static class ForkOutputStream extends OutputStream {\n+        final OutputStream outputStream1;\n+        final OutputStream outputStream2;\n+\n+        public ForkOutputStream(OutputStream os1, OutputStream os2) {\n+            outputStream1 = os1;\n+            outputStream2 = os2;\n+        }\n+\n+        public void write(int b) throws IOException {\n+            outputStream1.write(b);\n+            outputStream2.write(b);\n+        }\n+\n+        public void flush() throws IOException {\n+            outputStream1.flush();\n+            outputStream2.flush();\n+        }\n+\n+        public void close() throws IOException {\n+            outputStream1.close();\n+            outputStream2.close();\n+        }\n+    }\n+\n+    public void lostOwnership(Clipboard clip, Transferable contents) {\n+        final Runnable r = () -> {\n+            try {\n+                Thread.sleep(CLIPBOARD_DELAY);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            final PrintStream oldOut = System.out;\n+            final PrintStream newOut =\n+                    new PrintStream(new ForkOutputStream(oldOut, baos));\n+            Transferable t = clipboard.getContents(null);\n+            try {\n+                System.setOut(newOut);\n+                t.getTransferData(dataFlavor);\n+                System.setOut(oldOut);\n+            } catch (IOException | UnsupportedFlavorException ioe) {\n+                ioe.printStackTrace();\n+            }\n+            clipboard.setContents(transferable, null);\n+        };\n+        final Thread t = new Thread(r);\n+        t.start();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/datatransfer\/HTMLTransferConsoleOutputTest.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4513976\n+ * @summary tests that inter-JVM image transfer doesn't cause crash\n+ * @key headful\n+ * @library \/test\/lib\n+ * @run main ImageTransferCrashTest\n+ *\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.WritableRaster;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ImageTransferCrashTest implements ClipboardOwner {\n+    static final Clipboard clipboard =\n+            Toolkit.getDefaultToolkit().getSystemClipboard();\n+    final Transferable textTransferable = new StringSelection(\"TEXT\");\n+    public static final int CLIPBOARD_DELAY = 10;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            ImageTransferCrashTest imageTransferCrashTest = new ImageTransferCrashTest();\n+            imageTransferCrashTest.initialize();\n+            return;\n+        }\n+        final ClipboardOwner clipboardOwner = (clip, contents) -> System.exit(0);\n+        final int width = 100;\n+        final int height = 100;\n+        final BufferedImage bufferedImage =\n+                new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n+        final WritableRaster writableRaster =\n+                bufferedImage.getWritableTile(0, 0);\n+        final int[] color = new int[]{0x80, 0x80, 0x80};\n+        for (int i = 0; i < width; i++) {\n+            for (int j = 0; j < height; j++) {\n+                writableRaster.setPixel(i, j, color);\n+            }\n+        }\n+        bufferedImage.releaseWritableTile(0, 0);\n+\n+        final Transferable imageTransferable = new Transferable() {\n+            final DataFlavor[] flavors = new DataFlavor[]{\n+                    DataFlavor.imageFlavor};\n+\n+            public DataFlavor[] getTransferDataFlavors() {\n+                return flavors;\n+            }\n+\n+            public boolean isDataFlavorSupported(DataFlavor df) {\n+                return DataFlavor.imageFlavor.equals(df);\n+            }\n+\n+            public Object getTransferData(DataFlavor df)\n+                    throws UnsupportedFlavorException {\n+                if (!isDataFlavorSupported(df)) {\n+                    throw new UnsupportedFlavorException(df);\n+                }\n+                return bufferedImage;\n+            }\n+        };\n+        clipboard.setContents(imageTransferable, clipboardOwner);\n+        final Object o = new Object();\n+        synchronized (o) {\n+            try {\n+                o.wait();\n+            } catch (InterruptedException ie) {\n+                ie.printStackTrace();\n+            }\n+        }\n+        System.out.println(\"Test Pass!\");\n+    }\n+\n+    public void initialize() throws Exception {\n+        clipboard.setContents(textTransferable, this);\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                ImageTransferCrashTest.class.getName(),\n+                \"child\"\n+        );\n+\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            process.destroyForcibly();\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n+        }\n+\n+        outputAnalyzer.shouldHaveExitValue(0);\n+    }\n+\n+    public void lostOwnership(Clipboard clip, Transferable contents) {\n+        final Runnable r = () -> {\n+            while (true) {\n+                try {\n+                    Thread.sleep(CLIPBOARD_DELAY);\n+                    Transferable t = clipboard.getContents(null);\n+                    t.getTransferData(DataFlavor.imageFlavor);\n+                } catch (IllegalStateException e) {\n+                    e.printStackTrace();\n+                    System.err.println(\"clipboard is not prepared yet\");\n+                    continue;\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                break;\n+            }\n+            clipboard.setContents(textTransferable, null);\n+        };\n+        final Thread t = new Thread(r);\n+        t.start();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/datatransfer\/ImageTransferCrashTest.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}