{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,2 @@\n+import jdk.jpackage.internal.util.PathUtils;\n+import jdk.jpackage.internal.util.XmlUtils;\n@@ -122,1 +124,1 @@\n-                    + IOUtils.getSuffix(Path.of(DEFAULT_ICON)));\n+                    + PathUtils.getSuffix(Path.of(DEFAULT_ICON)));\n@@ -423,1 +425,1 @@\n-        IOUtils.createXml(mimeInfoFile.srcPath(), xml -> {\n+        XmlUtils.createXml(mimeInfoFile.srcPath(), xml -> {\n@@ -454,1 +456,1 @@\n-                        File.separatorChar, '-') + IOUtils.getSuffix(\n+                        File.separatorChar, '-') + PathUtils.getSuffix(\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/DesktopIntegration.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import jdk.jpackage.internal.util.PathUtils;\n@@ -130,1 +131,1 @@\n-                    APP_NAME.fetchFrom(params) + IOUtils.getSuffix(Path.of(\n+                    APP_NAME.fetchFrom(params) + PathUtils.getSuffix(Path.of(\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxAppImageBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import jdk.jpackage.internal.util.FileUtils;\n@@ -147,1 +148,1 @@\n-                    IOUtils.deleteRecursive(srcAppImageRoot);\n+                    FileUtils.deleteRecursive(srcAppImageRoot);\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxPackageBundler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.ByteArrayOutputStream;\n@@ -30,1 +29,0 @@\n-import java.io.PrintStream;\n@@ -35,2 +33,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -39,2 +35,0 @@\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n@@ -47,0 +41,1 @@\n+import jdk.jpackage.internal.util.FileUtils;\n@@ -190,1 +185,1 @@\n-            IOUtils.copyRecursive(predefinedImage, appDir,\n+            FileUtils.copyRecursive(predefinedImage, appDir,\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+import jdk.jpackage.internal.util.FileUtils;\n@@ -297,1 +298,1 @@\n-            IOUtils.copyRecursive(source, dest);\n+            FileUtils.copyRecursive(source, dest);\n@@ -322,1 +323,1 @@\n-            IOUtils.copyRecursive(path, srcFolder.resolve(path.getFileName()));\n+            FileUtils.copyRecursive(path, srcFolder.resolve(path.getFileName()));\n@@ -384,1 +385,1 @@\n-                IOUtils.copyRecursive(srcFolder, destPath);\n+                FileUtils.copyRecursive(srcFolder, destPath);\n@@ -386,1 +387,1 @@\n-                IOUtils.copyRecursive(srcFolder, mountedRoot);\n+                FileUtils.copyRecursive(srcFolder, mountedRoot);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacDmgBundler.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import jdk.jpackage.internal.util.PathUtils;\n@@ -98,1 +99,1 @@\n-            String label = IOUtils.replaceSuffix(plistFilename.getFileName(), \"\").toString();\n+            String label = PathUtils.replaceSuffix(plistFilename.getFileName(), \"\").toString();\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacLaunchersAsServices.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,2 @@\n+import jdk.jpackage.internal.util.FileUtils;\n+import jdk.jpackage.internal.util.XmlUtils;\n@@ -270,1 +272,1 @@\n-        IOUtils.createXml(f, xml -> {\n+        XmlUtils.createXml(f, xml -> {\n@@ -455,1 +457,1 @@\n-        IOUtils.copyRecursive(source, dest);\n+        FileUtils.copyRecursive(source, dest);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgBundler.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import java.util.Objects;\n-import java.util.stream.Stream;\n@@ -45,0 +43,2 @@\n+import jdk.jpackage.internal.util.FileUtils;\n+import jdk.jpackage.internal.util.PathUtils;\n@@ -95,1 +95,1 @@\n-            IOUtils.copyRecursive(inputPath,\n+            FileUtils.copyRecursive(inputPath,\n@@ -103,1 +103,1 @@\n-            IOUtils.copyRecursive(Path.of(item),\n+            FileUtils.copyRecursive(Path.of(item),\n@@ -118,1 +118,1 @@\n-                + IOUtils.getSuffix(Path.of(defaultIconName));\n+                + PathUtils.getSuffix(Path.of(defaultIconName));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AbstractAppImageBuilder.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jdk.jpackage.internal.util.FileUtils;\n@@ -58,1 +59,1 @@\n-            IOUtils.deleteRecursive(\n+            FileUtils.deleteRecursive(\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AbstractBundler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,1 @@\n+import jdk.jpackage.internal.util.XmlUtils;\n@@ -250,1 +251,1 @@\n-        IOUtils.createXml(getPathInAppImage(appImageDir), xml -> {\n+        XmlUtils.createXml(getPathInAppImage(appImageDir), xml -> {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import jdk.internal.util.OperatingSystem;\n-\n@@ -34,5 +32,0 @@\n-import java.io.Writer;\n-import java.lang.reflect.InvocationHandler;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Proxy;\n-import java.nio.file.FileVisitResult;\n@@ -40,1 +33,0 @@\n-import java.nio.file.CopyOption;\n@@ -42,1 +34,0 @@\n-import java.nio.file.SimpleFileVisitor;\n@@ -44,1 +35,0 @@\n-import java.nio.file.attribute.BasicFileAttributes;\n@@ -46,2 +36,0 @@\n-import java.util.Collection;\n-import java.util.HashMap;\n@@ -49,14 +37,0 @@\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.concurrent.atomic.AtomicReference;\n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.stream.XMLOutputFactory;\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.XMLStreamWriter;\n-import javax.xml.transform.Result;\n-import javax.xml.transform.Source;\n-import javax.xml.transform.TransformerException;\n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.stax.StAXResult;\n@@ -71,101 +45,0 @@\n-    public static void deleteRecursive(Path directory) throws IOException {\n-        final AtomicReference<IOException> exception = new AtomicReference<>();\n-\n-        if (!Files.exists(directory)) {\n-            return;\n-        }\n-\n-        Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {\n-            @Override\n-            public FileVisitResult visitFile(Path file,\n-                            BasicFileAttributes attr) throws IOException {\n-                if (OperatingSystem.isWindows()) {\n-                    Files.setAttribute(file, \"dos:readonly\", false);\n-                }\n-                try {\n-                    Files.delete(file);\n-                } catch (IOException ex) {\n-                    exception.compareAndSet(null, ex);\n-                }\n-                return FileVisitResult.CONTINUE;\n-            }\n-\n-            @Override\n-            public FileVisitResult preVisitDirectory(Path dir,\n-                            BasicFileAttributes attr) throws IOException {\n-                if (OperatingSystem.isWindows()) {\n-                    Files.setAttribute(dir, \"dos:readonly\", false);\n-                }\n-                return FileVisitResult.CONTINUE;\n-            }\n-\n-            @Override\n-            public FileVisitResult postVisitDirectory(Path dir, IOException e)\n-                            throws IOException {\n-                try {\n-                    Files.delete(dir);\n-                } catch (IOException ex) {\n-                    exception.compareAndSet(null, ex);\n-                }\n-                return FileVisitResult.CONTINUE;\n-            }\n-        });\n-        if (exception.get() != null) {\n-            throw exception.get();\n-        }\n-    }\n-\n-    public static void copyRecursive(Path src, Path dest, CopyOption... options)\n-            throws IOException {\n-        copyRecursive(src, dest, List.of(), options);\n-    }\n-\n-    public static void copyRecursive(Path src, Path dest,\n-            final List<Path> excludes, CopyOption... options)\n-            throws IOException {\n-\n-        List<CopyAction> copyActions = new ArrayList<>();\n-\n-        Files.walkFileTree(src, new SimpleFileVisitor<Path>() {\n-            @Override\n-            public FileVisitResult preVisitDirectory(final Path dir,\n-                    final BasicFileAttributes attrs) {\n-                if (isPathMatch(dir, excludes)) {\n-                    return FileVisitResult.SKIP_SUBTREE;\n-                } else {\n-                    copyActions.add(new CopyAction(null, dest.resolve(src.\n-                            relativize(dir))));\n-                    return FileVisitResult.CONTINUE;\n-                }\n-            }\n-\n-            @Override\n-            public FileVisitResult visitFile(final Path file,\n-                    final BasicFileAttributes attrs) {\n-                if (!isPathMatch(file, excludes)) {\n-                    copyActions.add(new CopyAction(file, dest.resolve(src.\n-                            relativize(file))));\n-                }\n-                return FileVisitResult.CONTINUE;\n-            }\n-        });\n-\n-        for (var copyAction : copyActions) {\n-            copyAction.apply(options);\n-        }\n-    }\n-\n-    private static record CopyAction(Path src, Path dest) {\n-        void apply(CopyOption... options) throws IOException {\n-            if (src == null) {\n-                Files.createDirectories(dest);\n-            } else {\n-                Files.copy(src, dest, options);\n-            }\n-        }\n-    }\n-\n-    private static boolean isPathMatch(Path what, List<Path> paths) {\n-        return paths.stream().anyMatch(what::endsWith);\n-    }\n-\n@@ -317,84 +190,0 @@\n-    public static Path replaceSuffix(Path path, String suffix) {\n-        Path parent = path.getParent();\n-        String filename = getFileName(path).toString().replaceAll(\"\\\\.[^.]*$\", \"\")\n-                + Optional.ofNullable(suffix).orElse(\"\");\n-        return parent != null ? parent.resolve(filename) : Path.of(filename);\n-    }\n-\n-    public static Path addSuffix(Path path, String suffix) {\n-        Path parent = path.getParent();\n-        String filename = getFileName(path).toString() + suffix;\n-        return parent != null ? parent.resolve(filename) : Path.of(filename);\n-    }\n-\n-    public static String getSuffix(Path path) {\n-        String filename = replaceSuffix(getFileName(path), null).toString();\n-        return getFileName(path).toString().substring(filename.length());\n-    }\n-\n-    @FunctionalInterface\n-    public static interface XmlConsumer {\n-        void accept(XMLStreamWriter xml) throws IOException, XMLStreamException;\n-    }\n-\n-    public static void createXml(Path dstFile, XmlConsumer xmlConsumer) throws\n-            IOException {\n-        XMLOutputFactory xmlFactory = XMLOutputFactory.newInstance();\n-        Files.createDirectories(getParent(dstFile));\n-        try (Writer w = Files.newBufferedWriter(dstFile)) {\n-            \/\/ Wrap with pretty print proxy\n-            XMLStreamWriter xml = (XMLStreamWriter) Proxy.newProxyInstance(\n-                    XMLStreamWriter.class.getClassLoader(), new Class<?>[]{\n-                XMLStreamWriter.class}, new PrettyPrintHandler(\n-                    xmlFactory.createXMLStreamWriter(w)));\n-\n-            xml.writeStartDocument();\n-            xmlConsumer.accept(xml);\n-            xml.writeEndDocument();\n-            xml.flush();\n-            xml.close();\n-        } catch (XMLStreamException ex) {\n-            throw new IOException(ex);\n-        } catch (IOException ex) {\n-            throw ex;\n-        }\n-    }\n-\n-    public static void mergeXmls(XMLStreamWriter xml, Collection<Source> sources)\n-            throws XMLStreamException, IOException {\n-        xml = (XMLStreamWriter) Proxy.newProxyInstance(\n-                XMLStreamWriter.class.getClassLoader(), new Class<?>[]{\n-            XMLStreamWriter.class}, new SkipDocumentHandler(xml));\n-\n-        try {\n-            TransformerFactory tf = TransformerFactory.newInstance();\n-            Result result = new StAXResult(xml);\n-            for (var src : sources) {\n-                tf.newTransformer().transform(src, result);\n-            }\n-        } catch (TransformerException ex) {\n-            \/\/ Should never happen\n-            throw new RuntimeException(ex);\n-        }\n-    }\n-\n-    public static DocumentBuilderFactory initDocumentBuilderFactory() {\n-        DocumentBuilderFactory dbf = DocumentBuilderFactory.newDefaultInstance();\n-        try {\n-            dbf.setFeature(\n-                    \"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\",\n-                    false);\n-        } catch (ParserConfigurationException ex) {\n-            throw new IllegalStateException(ex);\n-        }\n-        return dbf;\n-    }\n-\n-    public static DocumentBuilder initDocumentBuilder() {\n-        try {\n-            return initDocumentBuilderFactory().newDocumentBuilder();\n-        } catch (ParserConfigurationException ex) {\n-            throw new IllegalStateException(ex);\n-        }\n-    }\n-\n@@ -433,81 +222,0 @@\n-\n-    private static class PrettyPrintHandler implements InvocationHandler {\n-\n-        PrettyPrintHandler(XMLStreamWriter target) {\n-            this.target = target;\n-        }\n-\n-        @Override\n-        public Object invoke(Object proxy, Method method, Object[] args) throws\n-                Throwable {\n-            switch (method.getName()) {\n-                case \"writeStartElement\":\n-                    \/\/ update state of parent node\n-                    if (depth > 0) {\n-                        hasChildElement.put(depth - 1, true);\n-                    }\n-                    \/\/ reset state of current node\n-                    hasChildElement.put(depth, false);\n-                    \/\/ indent for current depth\n-                    target.writeCharacters(EOL);\n-                    target.writeCharacters(repeat(depth, INDENT));\n-                    depth++;\n-                    break;\n-                case \"writeEndElement\":\n-                    depth--;\n-                    if (hasChildElement.get(depth) == true) {\n-                        target.writeCharacters(EOL);\n-                        target.writeCharacters(repeat(depth, INDENT));\n-                    }\n-                    break;\n-                case \"writeProcessingInstruction\":\n-                case \"writeEmptyElement\":\n-                    \/\/ update state of parent node\n-                    if (depth > 0) {\n-                        hasChildElement.put(depth - 1, true);\n-                    }\n-                    \/\/ indent for current depth\n-                    target.writeCharacters(EOL);\n-                    target.writeCharacters(repeat(depth, INDENT));\n-                    break;\n-                default:\n-                    break;\n-            }\n-            method.invoke(target, args);\n-            return null;\n-        }\n-\n-        private static String repeat(int d, String s) {\n-            StringBuilder sb = new StringBuilder();\n-            while (d-- > 0) {\n-                sb.append(s);\n-            }\n-            return sb.toString();\n-        }\n-\n-        private final XMLStreamWriter target;\n-        private int depth = 0;\n-        private final Map<Integer, Boolean> hasChildElement = new HashMap<>();\n-        private static final String INDENT = \"  \";\n-        private static final String EOL = \"\\n\";\n-    }\n-\n-    private static class SkipDocumentHandler implements InvocationHandler {\n-\n-        SkipDocumentHandler(XMLStreamWriter target) {\n-            this.target = target;\n-        }\n-\n-        @Override\n-        public Object invoke(Object proxy, Method method, Object[] args) throws\n-                Throwable {\n-            switch (method.getName()) {\n-                case \"writeStartDocument\", \"writeEndDocument\" -> {\n-                }\n-                default -> method.invoke(target, args);\n-            }\n-            return null;\n-        }\n-\n-        private final XMLStreamWriter target;\n-    }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/IOUtils.java","additions":1,"deletions":293,"binary":false,"changes":294,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import jdk.jpackage.internal.util.FileUtils;\n@@ -235,1 +236,1 @@\n-                    IOUtils.deleteRecursive(srcFile);\n+                    FileUtils.deleteRecursive(srcFile);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/PathGroup.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import jdk.jpackage.internal.util.FileUtils;\n@@ -607,1 +608,1 @@\n-        IOUtils.copyRecursive(topImage, appLayout.runtimeHomeDirectory(),\n+        FileUtils.copyRecursive(topImage, appLayout.runtimeHomeDirectory(),\n@@ -619,1 +620,1 @@\n-                    IOUtils.copyRecursive(mp, dest);\n+                    FileUtils.copyRecursive(mp, dest);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util;\n+\n+import java.io.IOException;\n+import java.nio.file.CopyOption;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.List;\n+import jdk.internal.util.OperatingSystem;\n+import jdk.jpackage.internal.util.function.ExceptionBox;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+\n+public final class FileUtils {\n+\n+    public static void deleteRecursive(Path directory) throws IOException {\n+        if (!Files.exists(directory)) {\n+            return;\n+        }\n+\n+        var callback = new RecursiveDeleter();\n+\n+        Files.walkFileTree(directory, callback);\n+\n+        if (callback.ex != null) {\n+            throw callback.ex;\n+        }\n+    }\n+\n+    public static void copyRecursive(Path src, Path dest, CopyOption... options)\n+            throws IOException {\n+        copyRecursive(src, dest, List.of(), options);\n+    }\n+\n+    public static void copyRecursive(Path src, Path dest,\n+            final List<Path> excludes, CopyOption... options)\n+            throws IOException {\n+\n+        List<CopyAction> copyActions = new ArrayList<>();\n+\n+        Files.walkFileTree(src, new SimpleFileVisitor<Path>() {\n+            @Override\n+            public FileVisitResult preVisitDirectory(final Path dir,\n+                    final BasicFileAttributes attrs) {\n+                if (isPathMatch(dir, excludes)) {\n+                    return FileVisitResult.SKIP_SUBTREE;\n+                } else {\n+                    copyActions.add(new CopyAction(null, dest.resolve(src.\n+                            relativize(dir))));\n+                    return FileVisitResult.CONTINUE;\n+                }\n+            }\n+\n+            @Override\n+            public FileVisitResult visitFile(final Path file,\n+                    final BasicFileAttributes attrs) {\n+                if (!isPathMatch(file, excludes)) {\n+                    copyActions.add(new CopyAction(file, dest.resolve(src.\n+                            relativize(file))));\n+                }\n+                return FileVisitResult.CONTINUE;\n+            }\n+        });\n+\n+        for (var copyAction : copyActions) {\n+            copyAction.apply(options);\n+        }\n+    }\n+\n+    private static boolean isPathMatch(Path what, List<Path> paths) {\n+        return paths.stream().anyMatch(what::endsWith);\n+    }\n+\n+    private static record CopyAction(Path src, Path dest) {\n+\n+        void apply(CopyOption... options) throws IOException {\n+            if (src == null) {\n+                Files.createDirectories(dest);\n+            } else {\n+                Files.copy(src, dest, options);\n+            }\n+        }\n+    }\n+\n+    private static class RecursiveDeleter extends SimpleFileVisitor<Path> {\n+\n+        @Override\n+        public FileVisitResult visitFile(Path file,\n+                BasicFileAttributes attr) throws IOException {\n+            adjustAttributes(file);\n+            runActionOnPath(Files::delete, file);\n+            return FileVisitResult.CONTINUE;\n+        }\n+\n+        @Override\n+        public FileVisitResult preVisitDirectory(Path dir,\n+                BasicFileAttributes attr) throws IOException {\n+            adjustAttributes(dir);\n+            return FileVisitResult.CONTINUE;\n+        }\n+\n+        @Override\n+        public FileVisitResult postVisitDirectory(Path dir, IOException e)\n+                throws IOException {\n+            runActionOnPath(Files::delete, dir);\n+            return FileVisitResult.CONTINUE;\n+        }\n+\n+        private static void adjustAttributes(Path path) throws IOException {\n+            if (OperatingSystem.isWindows()) {\n+                Files.setAttribute(path, \"dos:readonly\", false);\n+            }\n+        }\n+\n+        private void runActionOnPath(ThrowingConsumer<Path> action, Path path) {\n+            try {\n+                action.accept(path);\n+            } catch (IOException ex) {\n+                if (this.ex == null) {\n+                    this.ex = ex;\n+                }\n+            } catch (Throwable t) {\n+                throw ExceptionBox.rethrowUnchecked(t);\n+            }\n+        }\n+\n+        private IOException ex;\n+    }\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/FileUtils.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import jdk.jpackage.internal.IOUtils;\n+\n+public final class PathUtils {\n+\n+    public static String getSuffix(Path path) {\n+        String filename = replaceSuffix(IOUtils.getFileName(path), null).toString();\n+        return IOUtils.getFileName(path).toString().substring(filename.length());\n+    }\n+\n+    public static Path addSuffix(Path path, String suffix) {\n+        Path parent = path.getParent();\n+        String filename = IOUtils.getFileName(path).toString() + suffix;\n+        return parent != null ? parent.resolve(filename) : Path.of(filename);\n+    }\n+\n+    public static Path replaceSuffix(Path path, String suffix) {\n+        Path parent = path.getParent();\n+        String filename = IOUtils.getFileName(path).toString().replaceAll(\"\\\\.[^.]*$\",\n+                \"\") + Optional.ofNullable(suffix).orElse(\"\");\n+        return parent != null ? parent.resolve(filename) : Path.of(filename);\n+    }\n+\n+    public static Path resolveNullablePath(Path base, Path path) {\n+        return Optional.ofNullable(path).map(base::resolve).orElse(null);\n+    }\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/PathUtils.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+final class PrettyPrintHandler implements InvocationHandler {\n+\n+    public PrettyPrintHandler(XMLStreamWriter target) {\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+        switch (method.getName()) {\n+            case \"writeStartElement\":\n+                \/\/ update state of parent node\n+                if (depth > 0) {\n+                    hasChildElement.put(depth - 1, true);\n+                }\n+                \/\/ reset state of current node\n+                hasChildElement.put(depth, false);\n+                \/\/ indent for current depth\n+                target.writeCharacters(EOL);\n+                target.writeCharacters(repeat(depth, INDENT));\n+                depth++;\n+                break;\n+            case \"writeEndElement\":\n+                depth--;\n+                if (hasChildElement.get(depth) == true) {\n+                    target.writeCharacters(EOL);\n+                    target.writeCharacters(repeat(depth, INDENT));\n+                }\n+                break;\n+            case \"writeProcessingInstruction\":\n+            case \"writeEmptyElement\":\n+                \/\/ update state of parent node\n+                if (depth > 0) {\n+                    hasChildElement.put(depth - 1, true);\n+                }\n+                \/\/ indent for current depth\n+                target.writeCharacters(EOL);\n+                target.writeCharacters(repeat(depth, INDENT));\n+                break;\n+            default:\n+                break;\n+        }\n+        method.invoke(target, args);\n+        return null;\n+    }\n+\n+    private static String repeat(int d, String s) {\n+        StringBuilder sb = new StringBuilder();\n+        while (d-- > 0) {\n+            sb.append(s);\n+        }\n+        return sb.toString();\n+    }\n+\n+    private final XMLStreamWriter target;\n+    private int depth = 0;\n+    private final Map<Integer, Boolean> hasChildElement = new HashMap<>();\n+    private static final String INDENT = \"  \";\n+    private static final String EOL = \"\\n\";\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/PrettyPrintHandler.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+final class SkipDocumentHandler implements InvocationHandler {\n+\n+    public SkipDocumentHandler(XMLStreamWriter target) {\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+        switch (method.getName()) {\n+            case \"writeStartDocument\", \"writeEndDocument\" -> {\n+            }\n+            default -> method.invoke(target, args);\n+        }\n+        return null;\n+    }\n+\n+    private final XMLStreamWriter target;\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/SkipDocumentHandler.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util;\n+\n+import java.io.IOException;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n+@FunctionalInterface\n+public interface XmlConsumer {\n+\n+    void accept(XMLStreamWriter xml) throws IOException, XMLStreamException;\n+\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/XmlConsumer.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.lang.reflect.Proxy;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stax.StAXResult;\n+import jdk.jpackage.internal.IOUtils;\n+\n+\n+public final class XmlUtils {\n+\n+    public static void createXml(Path dstFile, XmlConsumer xmlConsumer) throws\n+            IOException {\n+        XMLOutputFactory xmlFactory = XMLOutputFactory.newInstance();\n+        Files.createDirectories(IOUtils.getParent(dstFile));\n+        try (Writer w = Files.newBufferedWriter(dstFile)) {\n+            \/\/ Wrap with pretty print proxy\n+            XMLStreamWriter xml = (XMLStreamWriter) Proxy.newProxyInstance(XMLStreamWriter.class.getClassLoader(),\n+                    new Class<?>[]{XMLStreamWriter.class},\n+                    new PrettyPrintHandler(xmlFactory.createXMLStreamWriter(w)));\n+            xml.writeStartDocument();\n+            xmlConsumer.accept(xml);\n+            xml.writeEndDocument();\n+            xml.flush();\n+            xml.close();\n+        } catch (XMLStreamException ex) {\n+            throw new IOException(ex);\n+        } catch (IOException ex) {\n+            throw ex;\n+        }\n+    }\n+\n+    public static void mergeXmls(XMLStreamWriter xml, Collection<Source> sources)\n+            throws XMLStreamException, IOException {\n+        xml = (XMLStreamWriter) Proxy.newProxyInstance(XMLStreamWriter.class.getClassLoader(),\n+                new Class<?>[]{XMLStreamWriter.class},\n+                new SkipDocumentHandler(xml));\n+        try {\n+            TransformerFactory tf = TransformerFactory.newInstance();\n+            Result result = new StAXResult(xml);\n+            for (Source src : sources) {\n+                tf.newTransformer().transform(src, result);\n+            }\n+        } catch (TransformerException ex) {\n+            \/\/ Should never happen\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    public static DocumentBuilder initDocumentBuilder() {\n+        try {\n+            return initDocumentBuilderFactory().newDocumentBuilder();\n+        } catch (ParserConfigurationException ex) {\n+            throw new IllegalStateException(ex);\n+        }\n+    }\n+\n+    public static DocumentBuilderFactory initDocumentBuilderFactory() {\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newDefaultInstance();\n+        try {\n+            dbf.setFeature(\"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\",\n+                    false);\n+        } catch (ParserConfigurationException ex) {\n+            throw new IllegalStateException(ex);\n+        }\n+        return dbf;\n+    }\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/XmlUtils.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util.function;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ExceptionBox extends RuntimeException {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static RuntimeException rethrowUnchecked(Throwable throwable) {\n+        if (throwable instanceof RuntimeException err) {\n+            throw err;\n+        }\n+\n+        if (throwable instanceof Error err) {\n+            throw err;\n+        }\n+\n+        if (throwable instanceof InvocationTargetException err) {\n+            throw rethrowUnchecked(err.getCause());\n+        }\n+\n+        throw new ExceptionBox(throwable);\n+    }\n+\n+    private ExceptionBox(Throwable throwable) {\n+        super(throwable);\n+    }\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/function\/ExceptionBox.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util.function;\n+\n+import java.util.function.BiConsumer;\n+\n+@FunctionalInterface\n+public interface ThrowingBiConsumer<T, U> {\n+\n+    void accept(T t, U u) throws Throwable;\n+\n+    public static <T, U> BiConsumer<T, U> toBiConsumer(\n+            ThrowingBiConsumer<T, U> v) {\n+        return (t, u) -> {\n+            try {\n+                v.accept(t, u);\n+            } catch (Throwable ex) {\n+                throw ExceptionBox.rethrowUnchecked(ex);\n+            }\n+        };\n+    }\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/function\/ThrowingBiConsumer.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util.function;\n+\n+import java.util.function.BiFunction;\n+\n+@FunctionalInterface\n+public interface ThrowingBiFunction<T, U, R> {\n+\n+    R apply(T t, U u) throws Throwable;\n+\n+    public static <T, U, R> BiFunction<T, U, R> toBiFunction(\n+            ThrowingBiFunction<T, U, R> v) {\n+        return (t, u) -> {\n+            try {\n+                return v.apply(t, u);\n+            } catch (Throwable ex) {\n+                throw ExceptionBox.rethrowUnchecked(ex);\n+            }\n+        };\n+    }\n+\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/function\/ThrowingBiFunction.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util.function;\n+\n+import java.util.function.Consumer;\n+\n+@FunctionalInterface\n+public interface ThrowingConsumer<T> {\n+\n+    void accept(T t) throws Throwable;\n+\n+    public static <T> Consumer<T> toConsumer(ThrowingConsumer<T> v) {\n+        return o -> {\n+            try {\n+                v.accept(o);\n+            } catch (Throwable ex) {\n+                throw ExceptionBox.rethrowUnchecked(ex);\n+            }\n+        };\n+    }\n+\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/function\/ThrowingConsumer.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util.function;\n+\n+import java.util.function.Function;\n+\n+@FunctionalInterface\n+public interface ThrowingFunction<T, R> {\n+\n+    R apply(T t) throws Throwable;\n+\n+    public static <T, R> Function<T, R> toFunction(ThrowingFunction<T, R> v) {\n+        return t -> {\n+            try {\n+                return v.apply(t);\n+            } catch (Throwable ex) {\n+                throw ExceptionBox.rethrowUnchecked(ex);\n+            }\n+        };\n+    }\n+\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/function\/ThrowingFunction.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util.function;\n+\n+@FunctionalInterface\n+public interface ThrowingRunnable {\n+\n+    void run() throws Throwable;\n+\n+    public static Runnable toRunnable(ThrowingRunnable v) {\n+        return () -> {\n+            try {\n+                v.run();\n+            } catch (Throwable ex) {\n+                throw ExceptionBox.rethrowUnchecked(ex);\n+            }\n+        };\n+    }\n+\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/function\/ThrowingRunnable.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util.function;\n+\n+import java.util.function.Supplier;\n+\n+@FunctionalInterface\n+public interface ThrowingSupplier<T> {\n+\n+    T get() throws Throwable;\n+\n+    public static <T> Supplier<T> toSupplier(ThrowingSupplier<T> v) {\n+        return () -> {\n+            try {\n+                return v.get();\n+            } catch (Throwable ex) {\n+                throw ExceptionBox.rethrowUnchecked(ex);\n+            }\n+        };\n+    }\n+\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/function\/ThrowingSupplier.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal.util.function;\n+\n+import java.util.function.UnaryOperator;\n+\n+@FunctionalInterface\n+public interface ThrowingUnaryOperator<T> {\n+\n+    T apply(T t) throws Throwable;\n+\n+    public static <T> UnaryOperator<T> toUnaryOperator(\n+            ThrowingUnaryOperator<T> v) {\n+        return t -> {\n+            try {\n+                return v.apply(t);\n+            } catch (Throwable ex) {\n+                throw ExceptionBox.rethrowUnchecked(ex);\n+            }\n+        };\n+    }\n+\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/function\/ThrowingUnaryOperator.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.jpackage.internal.util.PathUtils;\n@@ -130,1 +131,1 @@\n-        final Path exePath = IOUtils.replaceSuffix(msi, \".exe\");\n+        final Path exePath = PathUtils.replaceSuffix(msi, \".exe\");\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinExeBundler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.util.Arrays;\n@@ -70,1 +69,1 @@\n-import jdk.jpackage.internal.WixToolset.WixToolsetType;\n+import jdk.jpackage.internal.util.FileUtils;\n@@ -370,1 +369,1 @@\n-            IOUtils.copyRecursive(appImage, appDir);\n+            FileUtils.copyRecursive(appImage, appDir);\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinMsiBundler.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import java.util.function.Function;\n@@ -59,1 +58,1 @@\n-import jdk.jpackage.internal.IOUtils.XmlConsumer;\n+import jdk.jpackage.internal.util.XmlConsumer;\n@@ -68,0 +67,2 @@\n+import jdk.jpackage.internal.util.PathUtils;\n+import jdk.jpackage.internal.util.XmlUtils;\n@@ -205,1 +206,1 @@\n-        return IOUtils.addSuffix(path, \".exe\");\n+        return PathUtils.addSuffix(path, \".exe\");\n@@ -527,1 +528,1 @@\n-        String launcherBasename = IOUtils.replaceSuffix(\n+        String launcherBasename = PathUtils.replaceSuffix(\n@@ -777,1 +778,1 @@\n-            var buffer = new DOMResult(IOUtils.initDocumentBuilder().newDocument());\n+            var buffer = new DOMResult(XmlUtils.initDocumentBuilder().newDocument());\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixAppImageFragmentBuilder.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import jdk.jpackage.internal.IOUtils.XmlConsumer;\n+import jdk.jpackage.internal.util.XmlConsumer;\n@@ -47,0 +47,1 @@\n+import jdk.jpackage.internal.util.XmlUtils;\n@@ -162,1 +163,1 @@\n-        IOUtils.createXml(file, xml -> {\n+        XmlUtils.createXml(file, xml -> {\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixFragmentBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import jdk.jpackage.internal.util.XmlUtils;\n@@ -98,1 +99,1 @@\n-            Document doc = IOUtils.initDocumentBuilder().parse(\n+            Document doc = XmlUtils.initDocumentBuilder().parse(\n@@ -112,1 +113,1 @@\n-            IOUtils.mergeXmls(xml, sources);\n+            XmlUtils.mergeXmls(xml, sources);\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixLauncherAsService.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.jpackage.internal.util.PathUtils;\n@@ -183,1 +184,1 @@\n-        Path wixObj = wixObjDir.toAbsolutePath().resolve(IOUtils.replaceSuffix(\n+        Path wixObj = wixObjDir.toAbsolutePath().resolve(PathUtils.replaceSuffix(\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixPipeline.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import jdk.jpackage.internal.util.XmlUtils;\n@@ -101,1 +102,1 @@\n-            inputXmlDom = IOUtils.initDocumentBuilder().parse(new ByteArrayInputStream(buf));\n+            inputXmlDom = XmlUtils.initDocumentBuilder().parse(new ByteArrayInputStream(buf));\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixSourceConverter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.jpackage.internal.util.PathUtils;\n@@ -54,1 +55,1 @@\n-        this.toolFileName = IOUtils.addSuffix(Path.of(commandName), \".exe\");\n+        this.toolFileName = PathUtils.addSuffix(Path.of(commandName), \".exe\");\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixTool.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-import jdk.jpackage.internal.IOUtils.XmlConsumer;\n+import jdk.jpackage.internal.util.XmlConsumer;\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixUiFragmentBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -15,0 +15,2 @@\n+        jdk.jpackage\/jdk.jpackage.internal.util \\\n+        jdk.jpackage\/jdk.jpackage.internal.util.function \\\n","filename":"test\/jdk\/tools\/jpackage\/TEST.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-import static jdk.jpackage.test.Functional.ThrowingSupplier.toSupplier;\n+import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/AnnotationsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,3 +40,3 @@\n-import jdk.jpackage.test.Functional.ThrowingRunnable;\n-import static jdk.jpackage.test.Functional.ThrowingRunnable.toRunnable;\n-import static jdk.jpackage.test.Functional.ThrowingSupplier.toSupplier;\n+import jdk.jpackage.internal.util.function.ThrowingRunnable;\n+import static jdk.jpackage.internal.util.function.ThrowingRunnable.toRunnable;\n+import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n","filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/TKitTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,3 @@\n-import jdk.jpackage.test.Functional.ThrowingBiConsumer;\n-import static jdk.jpackage.test.Functional.ThrowingFunction.toFunction;\n+import static jdk.jpackage.internal.util.function.ExceptionBox.rethrowUnchecked;\n+import jdk.jpackage.internal.util.function.ThrowingBiConsumer;\n+import static jdk.jpackage.internal.util.function.ThrowingFunction.toFunction;\n@@ -51,1 +52,1 @@\n-    final public AdditionalLauncher setDefaultArguments(String... v) {\n+    public final AdditionalLauncher setDefaultArguments(String... v) {\n@@ -56,1 +57,1 @@\n-    final public AdditionalLauncher addDefaultArguments(String... v) {\n+    public final AdditionalLauncher addDefaultArguments(String... v) {\n@@ -65,1 +66,1 @@\n-    final public AdditionalLauncher setJavaOptions(String... v) {\n+    public final AdditionalLauncher setJavaOptions(String... v) {\n@@ -70,1 +71,1 @@\n-    final public AdditionalLauncher addJavaOptions(String... v) {\n+    public final AdditionalLauncher addJavaOptions(String... v) {\n@@ -79,1 +80,1 @@\n-    final public AdditionalLauncher setVerifyUninstalled(boolean value) {\n+    public final AdditionalLauncher setVerifyUninstalled(boolean value) {\n@@ -84,1 +85,1 @@\n-    final public AdditionalLauncher setLauncherAsService() {\n+    public final AdditionalLauncher setLauncherAsService() {\n@@ -88,1 +89,1 @@\n-    final public AdditionalLauncher addRawProperties(\n+    public final AdditionalLauncher addRawProperties(\n@@ -93,1 +94,1 @@\n-    final public AdditionalLauncher addRawProperties(\n+    public final AdditionalLauncher addRawProperties(\n@@ -99,1 +100,1 @@\n-    final public String getRawPropertyValue(\n+    public final String getRawPropertyValue(\n@@ -111,1 +112,1 @@\n-    final public AdditionalLauncher setShortcuts(boolean menu, boolean shortcut) {\n+    public final AdditionalLauncher setShortcuts(boolean menu, boolean shortcut) {\n@@ -117,1 +118,1 @@\n-    final public AdditionalLauncher setIcon(Path iconPath) {\n+    public final AdditionalLauncher setIcon(Path iconPath) {\n@@ -126,1 +127,1 @@\n-    final public AdditionalLauncher setNoIcon() {\n+    public final AdditionalLauncher setNoIcon() {\n@@ -131,1 +132,1 @@\n-    final public AdditionalLauncher setPersistenceHandler(\n+    public final AdditionalLauncher setPersistenceHandler(\n@@ -141,1 +142,1 @@\n-    final public void applyTo(JPackageCommand cmd) {\n+    public final void applyTo(JPackageCommand cmd) {\n@@ -146,1 +147,1 @@\n-    final public void applyTo(PackageTest test) {\n+    public final void applyTo(PackageTest test) {\n@@ -154,1 +155,1 @@\n-    final public void verifyRemovedInUpgrade(PackageTest test) {\n+    public final void verifyRemovedInUpgrade(PackageTest test) {\n@@ -192,1 +193,1 @@\n-                Functional.rethrowUnchecked(ex);\n+                rethrowUnchecked(ex);\n@@ -449,2 +450,2 @@\n-    private final static Path NO_ICON = Path.of(\"\");\n-    private final static Map.Entry<String, String> LAUNCHER_AS_SERVICE = Map.entry(\n+    private static final Path NO_ICON = Path.of(\"\");\n+    private static final Map.Entry<String, String> LAUNCHER_AS_SERVICE = Map.entry(\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-import jdk.jpackage.test.Functional.ThrowingSupplier;\n+import jdk.jpackage.internal.util.function.ThrowingSupplier;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Executor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import jdk.jpackage.internal.IOUtils;\n+import jdk.jpackage.internal.util.PathUtils;\n@@ -38,1 +38,1 @@\n-final public class FileAssociations {\n+public final class FileAssociations {\n@@ -82,1 +82,1 @@\n-        return Path.of(getMime().replace('\/', '-') + IOUtils.getSuffix(icon));\n+        return Path.of(getMime().replace('\/', '-') + PathUtils.getSuffix(icon));\n@@ -246,1 +246,1 @@\n-    final private String suffixName;\n+    private final String suffixName;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/FileAssociations.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,78 +34,0 @@\n-    @FunctionalInterface\n-    public interface ThrowingConsumer<T> {\n-        void accept(T t) throws Throwable;\n-\n-        public static <T> Consumer<T> toConsumer(ThrowingConsumer<T> v) {\n-            return o -> {\n-                try {\n-                    v.accept(o);\n-                } catch (Throwable ex) {\n-                    rethrowUnchecked(ex);\n-                }\n-            };\n-        }\n-    }\n-\n-    @FunctionalInterface\n-    public interface ThrowingBiConsumer<T, U> {\n-        void accept(T t, U u) throws Throwable;\n-\n-        public static <T, U> BiConsumer<T, U> toBiConsumer(ThrowingBiConsumer<T, U> v) {\n-            return (t, u) -> {\n-                try {\n-                    v.accept(t, u);\n-                } catch (Throwable ex) {\n-                    rethrowUnchecked(ex);\n-                }\n-            };\n-        }\n-    }\n-\n-    @FunctionalInterface\n-    public interface ThrowingSupplier<T> {\n-        T get() throws Throwable;\n-\n-        public static <T> Supplier<T> toSupplier(ThrowingSupplier<T> v) {\n-            return () -> {\n-                try {\n-                    return v.get();\n-                } catch (Throwable ex) {\n-                    rethrowUnchecked(ex);\n-                }\n-                \/\/ Unreachable\n-                return null;\n-            };\n-        }\n-    }\n-\n-    @FunctionalInterface\n-    public interface ThrowingFunction<T, R> {\n-        R apply(T t) throws Throwable;\n-\n-        public static <T, R> Function<T, R> toFunction(ThrowingFunction<T, R> v) {\n-            return (t) -> {\n-                try {\n-                    return v.apply(t);\n-                } catch (Throwable ex) {\n-                    rethrowUnchecked(ex);\n-                }\n-                \/\/ Unreachable\n-                return null;\n-            };\n-        }\n-    }\n-\n-    @FunctionalInterface\n-    public interface ThrowingRunnable {\n-        void run() throws Throwable;\n-\n-        public static Runnable toRunnable(ThrowingRunnable v) {\n-            return () -> {\n-                try {\n-                    v.run();\n-                } catch (Throwable ex) {\n-                    rethrowUnchecked(ex);\n-                }\n-            };\n-        }\n-    }\n@@ -144,24 +66,0 @@\n-\n-    public static class ExceptionBox extends RuntimeException {\n-        public ExceptionBox(Throwable throwable) {\n-            super(throwable);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static RuntimeException rethrowUnchecked(Throwable throwable) throws\n-            ExceptionBox {\n-        if (throwable instanceof RuntimeException err) {\n-            throw err;\n-        }\n-\n-        if (throwable instanceof Error err) {\n-            throw err;\n-        }\n-\n-        if (throwable instanceof InvocationTargetException err) {\n-            throw rethrowUnchecked(err.getCause());\n-        }\n-\n-        throw new ExceptionBox(throwable);\n-    }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Functional.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -43,3 +43,3 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n-import jdk.jpackage.test.Functional.ThrowingFunction;\n-import jdk.jpackage.test.Functional.ThrowingSupplier;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingFunction;\n+import jdk.jpackage.internal.util.function.ThrowingSupplier;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/HelloApp.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import jdk.jpackage.internal.IOUtils;\n@@ -52,0 +51,1 @@\n+import jdk.jpackage.internal.util.XmlUtils;\n@@ -53,4 +53,4 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n-import jdk.jpackage.test.Functional.ThrowingFunction;\n-import jdk.jpackage.test.Functional.ThrowingRunnable;\n-import jdk.jpackage.test.Functional.ThrowingSupplier;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingFunction;\n+import jdk.jpackage.internal.util.function.ThrowingRunnable;\n+import jdk.jpackage.internal.util.function.ThrowingSupplier;\n@@ -317,1 +317,1 @@\n-        IOUtils.createXml(jpackageXMLFile, xml -> {\n+        XmlUtils.createXml(jpackageXMLFile, xml -> {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,2 +38,4 @@\n-import jdk.jpackage.internal.IOUtils;\n-import static jdk.jpackage.test.Functional.ThrowingConsumer.toConsumer;\n+import jdk.jpackage.internal.util.PathUtils;\n+import jdk.jpackage.internal.util.function.ThrowingBiConsumer;\n+import static jdk.jpackage.internal.util.function.ThrowingConsumer.toConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingRunnable;\n@@ -190,1 +192,1 @@\n-                Functional.ThrowingBiConsumer.toBiConsumer(\n+                ThrowingBiConsumer.toBiConsumer(\n@@ -338,1 +340,1 @@\n-        var expectedLabel = IOUtils.replaceSuffix(servicePlistFile.getFileName(), \"\").toString();\n+        var expectedLabel = PathUtils.replaceSuffix(servicePlistFile.getFileName(), \"\").toString();\n@@ -345,1 +347,1 @@\n-        Functional.ThrowingRunnable.toRunnable(() -> Thread.sleep(5 * 1000)).run();\n+        ThrowingRunnable.toRunnable(() -> Thread.sleep(5 * 1000)).run();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherAsServiceVerifier.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import static jdk.jpackage.internal.util.function.ExceptionBox.rethrowUnchecked;\n@@ -179,1 +180,1 @@\n-                throw Functional.rethrowUnchecked(ex);\n+                throw rethrowUnchecked(ex);\n@@ -257,1 +258,1 @@\n-                    throw Functional.rethrowUnchecked(ex);\n+                    throw rethrowUnchecked(ex);\n@@ -264,1 +265,1 @@\n-        final static WinIconVerifier instance = new WinIconVerifier();\n+        static final WinIconVerifier instance = new WinIconVerifier();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherIconVerifier.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-import jdk.jpackage.internal.IOUtils;\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n+import jdk.jpackage.internal.util.PathUtils;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n@@ -581,1 +581,1 @@\n-        final String dashMime = IOUtils.replaceSuffix(\n+        final String dashMime = PathUtils.replaceSuffix(\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,3 +46,2 @@\n-import jdk.jpackage.internal.IOUtils;\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n-import jdk.jpackage.test.Functional.ThrowingSupplier;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingSupplier;\n@@ -51,0 +50,1 @@\n+import jdk.jpackage.internal.util.PathUtils;\n@@ -215,1 +215,1 @@\n-                    return \".pkg\".equals(IOUtils.getSuffix(file.getFileName()));\n+                    return \".pkg\".equals(PathUtils.getSuffix(file.getFileName()));\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MethodCall.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,7 +49,7 @@\n-import jdk.jpackage.test.Functional.ThrowingBiConsumer;\n-import static jdk.jpackage.test.Functional.ThrowingBiConsumer.toBiConsumer;\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n-import static jdk.jpackage.test.Functional.ThrowingConsumer.toConsumer;\n-import jdk.jpackage.test.Functional.ThrowingRunnable;\n-import static jdk.jpackage.test.Functional.ThrowingSupplier.toSupplier;\n-import static jdk.jpackage.test.Functional.rethrowUnchecked;\n+import jdk.jpackage.internal.util.function.ThrowingBiConsumer;\n+import static jdk.jpackage.internal.util.function.ThrowingBiConsumer.toBiConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import static jdk.jpackage.internal.util.function.ThrowingConsumer.toConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingRunnable;\n+import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n+import static jdk.jpackage.internal.util.function.ExceptionBox.rethrowUnchecked;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import static jdk.jpackage.internal.util.function.ExceptionBox.rethrowUnchecked;\n@@ -106,1 +107,1 @@\n-            Functional.rethrowUnchecked(ex);\n+            rethrowUnchecked(ex);\n@@ -130,1 +131,1 @@\n-            Functional.rethrowUnchecked(ex);\n+            rethrowUnchecked(ex);\n@@ -139,4 +140,4 @@\n-    public final static Set<PackageType> LINUX = Set.of(LINUX_DEB, LINUX_RPM);\n-    public final static Set<PackageType> WINDOWS = Set.of(WIN_EXE, WIN_MSI);\n-    public final static Set<PackageType> MAC = Set.of(MAC_PKG, MAC_DMG);\n-    public final static Set<PackageType> NATIVE = Stream.concat(\n+    public static final Set<PackageType> LINUX = Set.of(LINUX_DEB, LINUX_RPM);\n+    public static final Set<PackageType> WINDOWS = Set.of(WIN_EXE, WIN_MSI);\n+    public static final Set<PackageType> MAC = Set.of(MAC_PKG, MAC_DMG);\n+    public static final Set<PackageType> NATIVE = Stream.concat(\n@@ -146,2 +147,2 @@\n-    private final static class Inner {\n-        private final static Set<String> DISABLED_PACKAGERS = Optional.ofNullable(\n+    private static final class Inner {\n+        private static final Set<String> DISABLED_PACKAGERS = Optional.ofNullable(\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageType.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -64,4 +64,4 @@\n-import jdk.jpackage.test.Functional.ExceptionBox;\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n-import jdk.jpackage.test.Functional.ThrowingRunnable;\n-import jdk.jpackage.test.Functional.ThrowingSupplier;\n+import jdk.jpackage.internal.util.function.ExceptionBox;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingRunnable;\n+import jdk.jpackage.internal.util.function.ThrowingSupplier;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,3 +43,3 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n-import static jdk.jpackage.test.Functional.ThrowingConsumer.toConsumer;\n-import jdk.jpackage.test.Functional.ThrowingFunction;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import static jdk.jpackage.internal.util.function.ThrowingConsumer.toConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingFunction;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,3 +43,4 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n-import jdk.jpackage.test.Functional.ThrowingFunction;\n-import jdk.jpackage.test.Functional.ThrowingRunnable;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingFunction;\n+import jdk.jpackage.internal.util.function.ThrowingRunnable;\n+import jdk.jpackage.internal.util.function.ThrowingSupplier;\n@@ -261,1 +262,1 @@\n-                return Functional.ThrowingSupplier.toSupplier(() -> Class.forName(\n+                return ThrowingSupplier.toSupplier(() -> Class.forName(\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestInstance.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-import static jdk.jpackage.test.Functional.ThrowingFunction.toFunction;\n-import static jdk.jpackage.test.Functional.ThrowingSupplier.toSupplier;\n+import static jdk.jpackage.internal.util.function.ThrowingFunction.toFunction;\n+import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestMethodSupplier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.jpackage.test.Functional.ThrowingRunnable;\n+import jdk.jpackage.internal.util.function.ThrowingRunnable;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n","filename":"test\/jdk\/tools\/jpackage\/linux\/AppAboutUrlTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import jdk.jpackage.internal.IOUtils;\n-import jdk.jpackage.test.Functional.ThrowingFunction;\n+import jdk.jpackage.internal.util.FileUtils;\n+import jdk.jpackage.internal.util.function.ThrowingFunction;\n@@ -68,1 +68,1 @@\n-    private final static boolean copyInResources = TKit.isOSX();\n+    private static final boolean copyInResources = TKit.isOSX();\n@@ -151,1 +151,1 @@\n-            IOUtils.copyRecursive(srcPath, dstPath);\n+            FileUtils.copyRecursive(srcPath, dstPath);\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n","filename":"test\/jdk\/tools\/jpackage\/share\/BasicTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n-import jdk.jpackage.test.Functional.ThrowingBiConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingBiConsumer;\n@@ -431,1 +431,1 @@\n-        private final static Set<Launcher> PRIMARY = Set.of(Main, Additional);\n+        private static final Set<Launcher> PRIMARY = Set.of(Main, Additional);\n@@ -443,1 +443,1 @@\n-    private final static Path[] ICONS = Stream.of(\"icon\", \"icon2\", \"icon3\",\n+    private static final Path[] ICONS = Stream.of(\"icon\", \"icon2\", \"icon3\",\n","filename":"test\/jdk\/tools\/jpackage\/share\/IconTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n","filename":"test\/jdk\/tools\/jpackage\/share\/InOutPathTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n","filename":"test\/jdk\/tools\/jpackage\/share\/MainClassTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.jpackage.test.Functional.ThrowingConsumer;\n+import jdk.jpackage.internal.util.function.ThrowingConsumer;\n","filename":"test\/jdk\/tools\/jpackage\/share\/PerUserCfgTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-import java.io.IOException;\n@@ -27,4 +26,0 @@\n-import java.util.HashSet;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n@@ -33,3 +28,0 @@\n-import jdk.jpackage.test.PackageTest;\n-import jdk.jpackage.test.PackageType;\n-import jdk.jpackage.test.Functional;\n@@ -37,1 +29,0 @@\n-import jdk.jpackage.test.Annotations.Parameter;\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimeImageSymbolicLinksTest.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.util.Set;\n@@ -39,1 +38,1 @@\n-import jdk.jpackage.internal.IOUtils;\n+import jdk.jpackage.internal.util.XmlUtils;\n@@ -151,1 +150,1 @@\n-            IOUtils.createXml(scriptPath, xml -> {\n+            XmlUtils.createXml(scriptPath, xml -> {\n@@ -197,1 +196,1 @@\n-            Document doc = IOUtils.initDocumentBuilder().parse(\n+            Document doc = XmlUtils.initDocumentBuilder().parse(\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinLongVersionTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n-import java.util.ArrayList;\n-import jdk.jpackage.internal.IOUtils;\n+import jdk.jpackage.internal.util.XmlUtils;\n@@ -150,1 +149,1 @@\n-           IOUtils.createXml(Path.of(cmd.getArgumentValue(\"--resource-dir\"),\n+           XmlUtils.createXml(Path.of(cmd.getArgumentValue(\"--resource-dir\"),\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinScriptTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}