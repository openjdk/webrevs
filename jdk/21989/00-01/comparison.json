{"files":[{"patch":"@@ -32,0 +32,3 @@\n+import static sun.nio.fs.UnixConstants.ELOOP;\n+import static sun.nio.fs.UnixConstants.ENXIO;\n+import static sun.nio.fs.UnixNativeDispatcher.futimens;\n@@ -36,2 +39,2 @@\n-    \/\/ Use setattrlist(2) system call which can set creation, modification,\n-    \/\/ and access times.\n+    \/\/ Use the futimens(2)\/utimensat(2) system calls to set the access and\n+    \/\/ modification times, and setattrlist(2) to set the creation time.\n@@ -53,14 +56,12 @@\n-        \/\/ not all volumes support setattrlist(2), so set the last\n-        \/\/ modified and last access times using utimensat(2)\n-        if (lastModifiedTime != null || lastAccessTime != null) {\n-            \/\/ if not changing both attributes then need existing attributes\n-            if (lastModifiedTime == null || lastAccessTime == null) {\n-                try {\n-                    UnixFileAttributes attrs = UnixFileAttributes.get(path, followLinks);\n-                    if (lastModifiedTime == null)\n-                        lastModifiedTime = attrs.lastModifiedTime();\n-                    if (lastAccessTime == null)\n-                        lastAccessTime = attrs.lastAccessTime();\n-                } catch (UnixException x) {\n-                    x.rethrowAsIOException(path);\n-                }\n+        \/\/ use a file descriptor if possible to avoid a race due to accessing\n+        \/\/ a path more than once as the file at that path could change.\n+        \/\/ if path is a symlink, then the open should fail with ELOOP and\n+        \/\/ the path will be used instead of the file descriptor.\n+        boolean haveFd = false;\n+        int fd = -1;\n+        try {\n+            fd = path.openForAttributeAccess(followLinks);\n+            haveFd = true;\n+        } catch (UnixException x) {\n+            if (!(x.errno() == ENXIO || (x.errno() == ELOOP))) {\n+                x.rethrowAsIOException(path);\n@@ -68,0 +69,20 @@\n+        }\n+\n+        try {\n+            \/\/ not all volumes support setattrlist(2), so set the last\n+            \/\/ modified and last access times use futimens(2)\/utimensat(2)\n+            if (lastModifiedTime != null || lastAccessTime != null) {\n+                \/\/ if not changing both attributes then need existing attributes\n+                if (lastModifiedTime == null || lastAccessTime == null) {\n+                    try {\n+                        UnixFileAttributes attrs = haveFd ?\n+                            UnixFileAttributes.get(fd) :\n+                            UnixFileAttributes.get(path, followLinks);\n+                        if (lastModifiedTime == null)\n+                            lastModifiedTime = attrs.lastModifiedTime();\n+                        if (lastAccessTime == null)\n+                            lastAccessTime = attrs.lastAccessTime();\n+                    } catch (UnixException x) {\n+                        x.rethrowAsIOException(path);\n+                    }\n+                }\n@@ -69,3 +90,3 @@\n-            \/\/ update times\n-            long modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n-            long accessValue= lastAccessTime.to(TimeUnit.NANOSECONDS);\n+                \/\/ update times\n+                long modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n+                long accessValue= lastAccessTime.to(TimeUnit.NANOSECONDS);\n@@ -73,13 +94,31 @@\n-            boolean retry = false;\n-            int flags = followLinks ? 0 : UnixConstants.AT_SYMLINK_NOFOLLOW;\n-            try {\n-                utimensat(UnixConstants.AT_FDCWD, path, accessValue,\n-                          modValue, flags);\n-            } catch (UnixException x) {\n-                \/\/ if utimensat fails with EINVAL and one\/both of the times is\n-                \/\/ negative then we adjust the value to the epoch and retry.\n-                if (x.errno() == UnixConstants.EINVAL &&\n-                    (modValue < 0L || accessValue < 0L)) {\n-                    retry = true;\n-                } else {\n-                    x.rethrowAsIOException(path);\n+                boolean retry = false;\n+                int flags = followLinks ? 0 : UnixConstants.AT_SYMLINK_NOFOLLOW;\n+                try {\n+                    if (haveFd)\n+                        futimens(fd, accessValue, modValue);\n+                    else\n+                        utimensat(UnixConstants.AT_FDCWD, path, accessValue,\n+                                  modValue, flags);\n+                } catch (UnixException x) {\n+                    \/\/ if futimens\/utimensat fails with EINVAL and one\/both of\n+                    \/\/ the times is negative, then we adjust the value to the\n+                    \/\/ epoch and retry.\n+                    if (x.errno() == UnixConstants.EINVAL &&\n+                        (modValue < 0L || accessValue < 0L)) {\n+                        retry = true;\n+                    } else {\n+                        x.rethrowAsIOException(path);\n+                    }\n+                }\n+                if (retry) {\n+                    if (modValue < 0L) modValue = 0L;\n+                    if (accessValue < 0L) accessValue= 0L;\n+                    try {\n+                        if (haveFd)\n+                            futimens(fd, accessValue, modValue);\n+                        else\n+                            utimensat(UnixConstants.AT_FDCWD, path, accessValue,\n+                                      modValue, flags);\n+                    } catch (UnixException x) {\n+                        x.rethrowAsIOException(path);\n+                    }\n@@ -88,3 +127,5 @@\n-            if (retry) {\n-                if (modValue < 0L) modValue = 0L;\n-                if (accessValue < 0L) accessValue= 0L;\n+\n+            \/\/ set the creation time using setattrlist(2)\n+            if (createTime != null) {\n+                long createValue = createTime.to(TimeUnit.NANOSECONDS);\n+                int commonattr = UnixConstants.ATTR_CMN_CRTIME;\n@@ -92,2 +133,6 @@\n-                    utimensat(UnixConstants.AT_FDCWD, path, accessValue,\n-                              modValue, flags);\n+                    if (haveFd)\n+                        fsetattrlist(fd, commonattr, 0L, 0L, createValue,\n+                                     followLinks ?  0 : UnixConstants.FSOPT_NOFOLLOW);\n+                    else\n+                        setattrlist(path, commonattr, 0L, 0L, createValue,\n+                                    followLinks ?  0 : UnixConstants.FSOPT_NOFOLLOW);\n@@ -98,12 +143,2 @@\n-        }\n-\n-        \/\/ set the creation time using setattrlist\n-        if (createTime != null) {\n-            long createValue = createTime.to(TimeUnit.NANOSECONDS);\n-            int commonattr = UnixConstants.ATTR_CMN_CRTIME;\n-            try {\n-                setattrlist(path, commonattr, 0L, 0L, createValue,\n-                    followLinks ?  0 : UnixConstants.FSOPT_NOFOLLOW);\n-            } catch (UnixException x) {\n-                x.rethrowAsIOException(path);\n-            }\n+        } finally {\n+            close(fd, e -> null);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileAttributeViews.java","additions":84,"deletions":49,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -75,10 +75,12 @@\n-            \/\/ if not changing both attributes then need existing attributes\n-            if (lastModifiedTime == null || lastAccessTime == null) {\n-                try {\n-                    UnixFileAttributes attrs =\n-                        UnixFileAttributes.get(file, followLinks);\n-                    if (lastModifiedTime == null)\n-                        lastModifiedTime = attrs.lastModifiedTime();\n-                    if (lastAccessTime == null)\n-                        lastAccessTime = attrs.lastAccessTime();\n-                } catch (UnixException x) {\n+            \/\/ use a file descriptor if possible to avoid a race due to\n+            \/\/ accessing a path more than once as the file at that path could\n+            \/\/ change.\n+            \/\/ if path is a symlink, then the open should fail with ELOOP and\n+            \/\/ the path will be used instead of the file descriptor.\n+            boolean haveFd = false;\n+            int fd = -1;\n+            try {\n+                fd = file.openForAttributeAccess(followLinks);\n+                haveFd = true;\n+            } catch (UnixException x) {\n+                if (!(x.errno() == ENXIO || (x.errno() == ELOOP))) {\n@@ -89,5 +91,0 @@\n-            \/\/ update times\n-            long modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n-            long accessValue= lastAccessTime.to(TimeUnit.NANOSECONDS);\n-\n-            boolean retry = false;\n@@ -95,11 +92,13 @@\n-                utimensat(AT_FDCWD, file, accessValue, modValue,\n-                          followLinks ? 0 : AT_SYMLINK_NOFOLLOW);\n-            } catch (UnixException x) {\n-                \/\/ if utimensat fails with EINVAL and one\/both of\n-                \/\/ the times is negative then we adjust the value to the\n-                \/\/ epoch and retry.\n-                if (x.errno() == EINVAL &&\n-                    (modValue < 0L || accessValue < 0L)) {\n-                    retry = true;\n-                } else {\n-                    x.rethrowAsIOException(file);\n+                \/\/ if not changing both attributes then need existing attributes\n+                if (lastModifiedTime == null || lastAccessTime == null) {\n+                    try {\n+                        UnixFileAttributes attrs = haveFd ?\n+                            UnixFileAttributes.get(fd) :\n+                            UnixFileAttributes.get(file, followLinks);\n+                        if (lastModifiedTime == null)\n+                            lastModifiedTime = attrs.lastModifiedTime();\n+                        if (lastAccessTime == null)\n+                            lastAccessTime = attrs.lastAccessTime();\n+                    } catch (UnixException x) {\n+                        x.rethrowAsIOException(file);\n+                    }\n@@ -107,4 +106,6 @@\n-            }\n-            if (retry) {\n-                if (modValue < 0L) modValue = 0L;\n-                if (accessValue < 0L) accessValue= 0L;\n+\n+                \/\/ update times\n+                long modValue = lastModifiedTime.to(TimeUnit.NANOSECONDS);\n+                long accessValue= lastAccessTime.to(TimeUnit.NANOSECONDS);\n+\n+                boolean retry = false;\n@@ -112,2 +113,5 @@\n-                    utimensat(AT_FDCWD, file, accessValue, modValue,\n-                              followLinks ? 0 : AT_SYMLINK_NOFOLLOW);\n+                    if (haveFd)\n+                        futimens(fd, accessValue, modValue);\n+                    else\n+                        utimensat(AT_FDCWD, file, accessValue, modValue,\n+                                  followLinks ? 0 : AT_SYMLINK_NOFOLLOW);\n@@ -115,1 +119,22 @@\n-                    x.rethrowAsIOException(file);\n+                    \/\/ if utimensat fails with EINVAL and one\/both of\n+                    \/\/ the times is negative then we adjust the value to the\n+                    \/\/ epoch and retry.\n+                    if (x.errno() == EINVAL &&\n+                        (modValue < 0L || accessValue < 0L)) {\n+                        retry = true;\n+                    } else {\n+                        x.rethrowAsIOException(file);\n+                    }\n+                }\n+                if (retry) {\n+                    if (modValue < 0L) modValue = 0L;\n+                    if (accessValue < 0L) accessValue= 0L;\n+                    try {\n+                        if (haveFd)\n+                            futimens(fd, accessValue, modValue);\n+                        else\n+                            utimensat(AT_FDCWD, file, accessValue, modValue,\n+                                      followLinks ? 0 : AT_SYMLINK_NOFOLLOW);\n+                    } catch (UnixException x) {\n+                        x.rethrowAsIOException(file);\n+                    }\n@@ -117,0 +142,2 @@\n+            } finally {\n+                close(fd, e -> null);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":60,"deletions":33,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n- * @requires (os.family == \"linux\") | (os.family == \"mac\") | (os.family == \"windows\")\n+ * @requires (os.family == \"aix\") | (os.family == \"linux\") |\n+ *           (os.family == \"mac\") | (os.family == \"windows\")\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/BasicFileAttributeView\/SetTimesNanos.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}