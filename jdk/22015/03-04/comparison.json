{"files":[{"patch":"@@ -785,3 +785,5 @@\n-  uint region_idx = card_region >> config()->log2_card_regions_per_heap_region();\n-  G1HeapRegion* r = G1CollectedHeap::heap()->region_at(region_idx);\n-  assert(r->rem_set()->card_set() != this, \"must be\");\n+  {\n+    uint region_idx = card_region >> config()->log2_card_regions_per_heap_region();\n+    G1HeapRegion* r = G1CollectedHeap::heap()->region_at(region_idx);\n+    assert(r->rem_set()->card_set() != this, \"must be\");\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1162,2 +1162,1 @@\n-  _young_regions_cardset_mm(card_set_config(), card_set_freelist_pool()),\n-  _young_regions_cardset(card_set_config(), &_young_regions_cardset_mm),\n+  _young_regions_cset_group(card_set_config(), &_card_set_freelist_pool, 1u \/* gid *\/),\n@@ -2706,1 +2705,1 @@\n-  hr->install_group_cardset(young_regions_cardset());\n+  young_regions_cset_group()->add(hr);\n@@ -2917,1 +2916,1 @@\n-      new_alloc_region->install_group_cardset(young_regions_cardset());\n+      young_regions_cset_group()->add(new_alloc_region);\n@@ -3061,1 +3060,1 @@\n-  _young_regions_cardset.reset_table_scanner_for_groups();\n+  young_regions_cardset()->reset_table_scanner_for_groups();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -784,2 +784,1 @@\n-  G1CardSetMemoryManager _young_regions_cardset_mm;\n-  G1CardSet _young_regions_cardset;\n+  G1CSetCandidateGroup _young_regions_cset_group;\n@@ -790,1 +789,2 @@\n-  G1CardSet* young_regions_cardset() { return &_young_regions_cardset; };\n+  G1CSetCandidateGroup* young_regions_cset_group() { return &_young_regions_cset_group; }\n+  G1CardSet* young_regions_cardset() { return _young_regions_cset_group.card_set(); };\n@@ -792,1 +792,1 @@\n-  G1CardSetMemoryManager* young_regions_card_set_mm() { return &_young_regions_cardset_mm; }\n+  G1MonotonicArenaMemoryStats young_regions_card_set_memory_stats() { return _young_regions_cset_group.card_set_memory_stats(); }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  assert(!hr->rem_set()->has_group_cardset(), \"Must not have a group remset\");\n+  assert(!hr->rem_set()->is_added_to_cset_group(), \"Should have already uninstalled group remset\");\n@@ -654,1 +654,1 @@\n-    r->uninstall_group_cardset();\n+    r->uninstall_cset_group();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-  inline void merge_cardsets_for_collection_groups(G1CollectedHeap* g1h, CardOrRangeVisitor& cl, uint worker_id, uint num_workers);\n+  inline void merge_cardsets_for_collection_groups(CardOrRangeVisitor& cl, uint worker_id, uint num_workers);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-inline void G1CollectionSet::merge_cardsets_for_collection_groups(G1CollectedHeap* g1h, CardOrRangeVisitor& cl, uint worker_id, uint num_workers) {\n+inline void G1CollectionSet::merge_cardsets_for_collection_groups(CardOrRangeVisitor& cl, uint worker_id, uint num_workers) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-G1CSetCandidateGroup::G1CSetCandidateGroup(G1CardSetConfiguration* config) :\n+G1CSetCandidateGroup::G1CSetCandidateGroup(G1CardSetConfiguration* config, G1MonotonicArenaFreePool* card_set_freelist_pool, uint gid) :\n@@ -33,1 +33,1 @@\n-  _card_set_mm(config, G1CollectedHeap::heap()->card_set_freelist_pool()),\n+  _card_set_mm(config, card_set_freelist_pool),\n@@ -35,1 +35,3 @@\n-  _gc_efficiency(0.0)\n+  _reclaimable_bytes(size_t(0)),\n+  _gc_efficiency(0.0),\n+  _gid(gid)\n@@ -38,0 +40,2 @@\n+G1CSetCandidateGroup::G1CSetCandidateGroup(G1CardSetConfiguration* config, uint gid): G1CSetCandidateGroup(config, G1CollectedHeap::heap()->card_set_freelist_pool(), gid) {}\n+\n@@ -45,2 +49,0 @@\n-  assert(!hr->is_young(), \"should be flagged as survivor region\");\n-\n@@ -48,1 +50,1 @@\n-  hr->install_group_cardset(&_card_set);\n+  hr->install_cset_group(this);\n@@ -52,1 +54,1 @@\n-  size_t reclaimable_bytes = 0;\n+  _reclaimable_bytes = 0;\n@@ -56,1 +58,1 @@\n-    reclaimable_bytes += hr->reclaimable_bytes();\n+    _reclaimable_bytes += hr->reclaimable_bytes();\n@@ -58,0 +60,2 @@\n+  _gc_efficiency = _reclaimable_bytes \/ predict_group_total_time_ms();\n+}\n@@ -59,2 +63,4 @@\n-  double group_total_time_ms = predict_group_total_time_ms();\n-  _gc_efficiency = reclaimable_bytes \/ group_total_time_ms;\n+size_t G1CSetCandidateGroup::liveness() const {\n+  size_t capacity = length() * G1HeapRegion::GrainBytes;\n+\n+  return (size_t) ceil(((capacity - _reclaimable_bytes) * 100.0) \/ capacity);\n@@ -67,1 +73,1 @@\n-      r->uninstall_group_cardset();\n+      r->uninstall_cset_group();\n@@ -71,8 +77,0 @@\n-#ifdef ASSERT\n-  else {\n-    for (G1CollectionSetCandidateInfo ci : _candidates) {\n-      G1HeapRegion* r = ci._r;\n-      assert(r->rem_set()->card_set() != &_card_set , \"Pre-condition!\");\n-    }\n-  }\n-#endif\n@@ -180,1 +178,1 @@\n-    gr->card_set()->reset_table_scanner();\n+    gr->card_set()->reset_table_scanner_for_groups();\n@@ -295,0 +293,2 @@\n+  \/\/ ids 0 and 1 are reserved for region default group and young regions group respectively.\n+  uint gid = 2;\n@@ -297,1 +297,1 @@\n-  current = new G1CSetCandidateGroup(G1CollectedHeap::heap()->card_set_config());\n+  current = new G1CSetCandidateGroup(G1CollectedHeap::heap()->card_set_config(), gid++);\n@@ -311,1 +311,1 @@\n-      current = new G1CSetCandidateGroup(G1CollectedHeap::heap()->card_set_config());\n+      current = new G1CSetCandidateGroup(G1CollectedHeap::heap()->card_set_config(), gid++);\n@@ -346,1 +346,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.cpp","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+  size_t _reclaimable_bytes;\n@@ -75,1 +76,1 @@\n-\n+  const uint _gid;\n@@ -77,1 +78,2 @@\n-  G1CSetCandidateGroup(G1CardSetConfiguration* config);\n+  G1CSetCandidateGroup(G1CardSetConfiguration* config, uint gid = 0);\n+  G1CSetCandidateGroup(G1CardSetConfiguration* config, G1MonotonicArenaFreePool* card_set_freelist_pool, uint gid);\n@@ -89,0 +91,2 @@\n+  uint gid() const { return _gid; }\n+\n@@ -91,0 +95,1 @@\n+  size_t liveness() const;\n@@ -98,1 +103,1 @@\n-  double gc_efficiency() { return _gc_efficiency; }\n+  double gc_efficiency() const { return _gc_efficiency; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.hpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2984,0 +2984,5 @@\n+#define G1PPRL_GID_H_FORMAT           \"  %5s\"\n+#define G1PPRL_GID_FORMAT             \"  \" UINT32_FORMAT_W(5)\n+#define G1PPRL_LEN_FORMAT             \"  \" UINT32_FORMAT_W(14)\n+#define G1PPRL_LEN_H_FORMAT           \"  %14s\"\n+#define G1PPRL_GID_GCEFF_FORMAT       \"  %14.1f\"\n@@ -3030,1 +3035,2 @@\n-                          G1PPRL_BYTE_H_FORMAT,\n+                          G1PPRL_BYTE_H_FORMAT\n+                          G1PPRL_GID_H_FORMAT,\n@@ -3033,1 +3039,2 @@\n-                          \"remset\", \"state\", \"code-roots\");\n+                          \"remset\", \"state\", \"code-roots\",\n+                          \"gid\");\n@@ -3042,1 +3049,2 @@\n-                          G1PPRL_BYTE_H_FORMAT,\n+                          G1PPRL_BYTE_H_FORMAT\n+                          G1PPRL_GID_H_FORMAT,\n@@ -3045,1 +3053,1 @@\n-                          \"(bytes)\", \"\", \"(bytes)\");\n+                          \"(bytes)\", \"\", \"(bytes)\", \"\");\n@@ -3063,0 +3071,1 @@\n+  uint cset_groud_gid     = r->rem_set()->cset_group()->gid();\n@@ -3090,1 +3099,2 @@\n-                        G1PPRL_BYTE_FORMAT,\n+                        G1PPRL_BYTE_FORMAT\n+                        G1PPRL_GID_FORMAT,\n@@ -3093,1 +3103,2 @@\n-                        remset_bytes, remset_type, code_roots_bytes);\n+                        remset_bytes, remset_type, code_roots_bytes,\n+                        cset_groud_gid);\n@@ -3107,0 +3118,3 @@\n+\n+  do_cset_groups();\n+\n@@ -3124,0 +3138,50 @@\n+\n+void G1PrintRegionLivenessInfoClosure::do_cset_groups() {\n+  log_trace(gc, liveness)(G1PPRL_LINE_PREFIX);\n+  log_trace(gc, liveness)(G1PPRL_LINE_PREFIX\" Collectionset Candidate Groups\");\n+  log_trace(gc, liveness)(G1PPRL_LINE_PREFIX);\n+  log_trace(gc, liveness)(G1PPRL_LINE_PREFIX\n+                          G1PPRL_GID_H_FORMAT\n+                          G1PPRL_LEN_H_FORMAT\n+                          G1PPRL_GCEFF_H_FORMAT\n+                          G1PPRL_BYTE_H_FORMAT\n+                          G1PPRL_BYTE_H_FORMAT,\n+                          \"gid\", \"num-regions\",\n+                          \"gc-eff\", \"liveness\",\n+                          \"remset\");\n+\n+  log_trace(gc, liveness)(G1PPRL_LINE_PREFIX\n+                          G1PPRL_GID_H_FORMAT\n+                          G1PPRL_LEN_H_FORMAT\n+                          G1PPRL_GCEFF_H_FORMAT\n+                          G1PPRL_BYTE_H_FORMAT\n+                          G1PPRL_BYTE_H_FORMAT,\n+                          \"\", \"\",\n+                          \"(bytes\/ms)\", \"%\",\n+                          \"(bytes)\");\n+\n+  G1CollectedHeap* g1h = G1CollectedHeap::heap();\n+  G1CSetCandidateGroup* young_only_cset_group =g1h->young_regions_cset_group();\n+\n+  log_trace(gc, liveness)(G1PPRL_LINE_PREFIX\n+                          G1PPRL_GID_FORMAT\n+                          G1PPRL_LEN_FORMAT\n+                          G1PPRL_GCEFF_FORMAT\n+                          G1PPRL_BYTE_FORMAT\n+                          G1PPRL_BYTE_FORMAT,\n+                          young_only_cset_group->gid(), young_only_cset_group->length(),\n+                          \"-\",\n+                          0l, young_only_cset_group->card_set()->mem_size());\n+\n+  for (G1CSetCandidateGroup* group : g1h->policy()->candidates()->from_marking_groups()) {\n+    log_trace(gc, liveness)(G1PPRL_LINE_PREFIX\n+                            G1PPRL_GID_FORMAT\n+                            G1PPRL_LEN_FORMAT\n+                            G1PPRL_GID_GCEFF_FORMAT\n+                            G1PPRL_BYTE_FORMAT\n+                            G1PPRL_BYTE_FORMAT,\n+                            group->gid(), group->length(),\n+                            group->gc_efficiency(),\n+                            group->liveness(), group->card_set()->mem_size());\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":70,"deletions":6,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -985,0 +985,2 @@\n+  void do_cset_groups();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-  _heap->young_regions_cardset()->clear();\n+  _heap->young_regions_cset_group()->clear();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  hr->uninstall_group_cardset();\n+  hr->uninstall_cset_group();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCResetMetadataTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-  uninstall_group_cardset();\n+  uninstall_cset_group();\n@@ -152,2 +152,8 @@\n-  double region_elapsed_time_ms = policy->predict_region_total_time_ms(this, false \/* for_young_only_phase *\/);\n-  return (double)reclaimable_bytes() \/ region_elapsed_time_ms;\n+  \/\/ If the region will be collected as part of a group, then we cannot\n+  \/\/ rely on the predition for this region.\n+  if (_rem_set->is_added_to_cset_group() && _rem_set->cset_group()->length() > 1) {\n+    return -1.0;\n+  } else {\n+    double region_elapsed_time_ms = policy->predict_region_total_time_ms(this, false \/* for_young_only_phase *\/);\n+    return (double)reclaimable_bytes() \/ region_elapsed_time_ms;\n+  }\n@@ -223,1 +229,1 @@\n-    uninstall_group_cardset();\n+    uninstall_cset_group();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+class G1CSetCandidateGroup;\n@@ -512,2 +513,2 @@\n-  void install_group_cardset(G1CardSet* group_cardset);\n-  void uninstall_group_cardset();\n+  void install_cset_group(G1CSetCandidateGroup* cset_group);\n+  void uninstall_cset_group();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -514,2 +514,2 @@\n-inline void G1HeapRegion::install_group_cardset(G1CardSet* group_cardset) {\n-  _rem_set->install_group_cardset(group_cardset);\n+inline void G1HeapRegion::install_cset_group(G1CSetCandidateGroup* cset_group) {\n+  _rem_set->install_cset_group(cset_group);\n@@ -518,2 +518,2 @@\n-inline void G1HeapRegion::uninstall_group_cardset() {\n-  _rem_set->uninstall_group_cardset();\n+inline void G1HeapRegion::uninstall_cset_group() {\n+  _rem_set->uninstall_cset_group();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -56,5 +56,2 @@\n-void G1HeapRegionRemSet::uninstall_group_cardset() {\n-  if (_saved_card_set != nullptr) {\n-    _card_set = _saved_card_set;\n-    _saved_card_set = nullptr;\n-  }\n+void G1HeapRegionRemSet::uninstall_cset_group() {\n+  _cset_group = _default_cset_group;\n@@ -67,2 +64,2 @@\n-  _card_set(new G1CardSet(config, &_card_set_mm)),\n-  _saved_card_set(nullptr),\n+  _default_cset_group(new G1CSetCandidateGroup(config)),\n+  _cset_group(_default_cset_group),\n@@ -72,0 +69,5 @@\n+G1HeapRegionRemSet::~G1HeapRegionRemSet() {\n+  assert(!is_added_to_cset_group(), \"Still assigned to a CSet group\");\n+  delete _default_cset_group;\n+}\n+\n@@ -77,1 +79,1 @@\n-  assert(_saved_card_set == nullptr, \"pre-condition\");\n+  assert(!is_added_to_cset_group(), \"pre-condition\");\n@@ -82,1 +84,1 @@\n-  _card_set->clear();\n+  card_set()->clear();\n@@ -93,1 +95,1 @@\n-  _card_set->reset_table_scanner();\n+  card_set()->reset_table_scanner();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/g1\/g1CollectionSetCandidates.hpp\"\n@@ -38,0 +39,1 @@\n+class G1CSetCandidateGroup;\n@@ -49,3 +51,6 @@\n-  \/\/ The set of cards in the Java heap\n-  G1CardSet* _card_set;\n-  G1CardSet* _saved_card_set;\n+  \/\/ The collection set groups to which the region owning this RSet is assigned.\n+  \/\/ We maintain a _default_cset_group to handle special cases, such as humongous regions,\n+  \/\/ which are never added to collection set groups. This approach allows us to avoid using\n+  \/\/ nullptr guards before every use of _cset_group.\n+  G1CSetCandidateGroup* _default_cset_group;\n+  G1CSetCandidateGroup* _cset_group;\n@@ -62,1 +67,1 @@\n-  ~G1HeapRegionRemSet() { delete _card_set; }\n+  ~G1HeapRegionRemSet();\n@@ -65,1 +70,1 @@\n-    return _card_set->is_empty();\n+    return card_set()->is_empty();\n@@ -68,3 +73,3 @@\n-  void install_group_cardset(G1CardSet* group_cardset) {\n-    assert(group_cardset != nullptr, \"pre-condition\");\n-    assert(_saved_card_set == nullptr, \"pre-condition\");\n+  void install_cset_group(G1CSetCandidateGroup* cset_group) {\n+    assert(cset_group != nullptr, \"pre-condition\");\n+    assert(_cset_group == _default_cset_group, \"pre-condition\");\n@@ -72,2 +77,1 @@\n-    _saved_card_set = _card_set;\n-    _card_set = group_cardset;\n+    _cset_group = cset_group;\n@@ -76,1 +80,1 @@\n-  void uninstall_group_cardset();\n+  void uninstall_cset_group();\n@@ -78,2 +82,6 @@\n-  bool has_group_cardset() {\n-    return _saved_card_set != nullptr;\n+  bool is_added_to_cset_group() const {\n+    return _cset_group != _default_cset_group;\n+  }\n+\n+  G1CSetCandidateGroup* cset_group() {\n+    return _cset_group;\n@@ -87,1 +95,1 @@\n-    return (code_roots_list_length() == 0) && _card_set->occupancy_less_or_equal_to(occ);\n+    return (code_roots_list_length() == 0) && card_set()->occupancy_less_or_equal_to(occ);\n@@ -100,1 +108,1 @@\n-    return _card_set->occupied();\n+    return card_set()->occupied();\n@@ -103,1 +111,1 @@\n-  G1CardSet* card_set() { return _card_set; }\n+  G1CardSet* card_set() const { return _cset_group->card_set(); }\n@@ -149,1 +157,4 @@\n-    return _card_set->mem_size()\n+    if (is_added_to_cset_group()) {\n+      return sizeof(G1HeapRegionRemSet) + code_roots_mem_size();\n+    }\n+    return card_set()->mem_size()\n@@ -155,1 +166,1 @@\n-    return _card_set->unused_mem_size();\n+    return card_set()->unused_mem_size();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.hpp","additions":29,"deletions":18,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  iterate_for_merge(_card_set, cl);\n+  iterate_for_merge(card_set(), cl);\n@@ -140,1 +140,1 @@\n-  _card_set->add_card(to_card(from));\n+  card_set()->add_card(to_card(from));\n@@ -144,1 +144,1 @@\n-  return _card_set->contains_card(to_card(from));\n+  return card_set()->contains_card(to_card(from));\n@@ -148,1 +148,1 @@\n-  _card_set->print_info(st, to_card(from));\n+  card_set()->print_info(st, to_card(from));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1394,1 +1394,1 @@\n-        g1h->collection_set()->merge_cardsets_for_collection_groups(g1h, merge, worker_id, _num_workers);\n+        g1h->collection_set()->merge_cardsets_for_collection_groups(merge, worker_id, _num_workers);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-        guarantee(!hr->rem_set()->has_group_cardset(), \"Humongous regions should not have group card sets\");\n+        guarantee(!hr->rem_set()->is_added_to_cset_group(), \"Humongous regions should not have group card sets\");\n@@ -520,1 +520,1 @@\n-    sampled_card_set_stats.add(_g1h->young_regions_card_set_mm()->memory_stats());\n+    sampled_card_set_stats.add(_g1h->young_regions_card_set_memory_stats());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -895,1 +895,1 @@\n-    _g1h->young_regions_cardset()->clear();\n+    _g1h->young_regions_cset_group()->clear();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}