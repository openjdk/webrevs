{"files":[{"patch":"@@ -2534,3 +2534,14 @@\n-                Content note1 =\n-                        contents.getContent(\"doclet.PreviewTrailingNote1\",\n-                                            nameCode);\n+                Content note1;\n+                if (utils.isNonPreviewExtendingPreview(forWhat)) {\n+                    HtmlTree referredPreviewAPIs = HtmlTree.CODE();\n+                    utils.getReferredPreviewFeatures(forWhat)\n+                            .forEach(feature ->\n+                                    referredPreviewAPIs.add(\n+                                            HtmlTree.CODE(Text.of(feature.getSimpleName()))));\n+                    note1 = contents.getContent(\"doclet.NonPreviewAsPreview\",\n+                            nameCode,\n+                            referredPreviewAPIs);\n+                } else {\n+                    note1 = contents.getContent(\"doclet.PreviewTrailingNote1\",\n+                            nameCode);\n+                }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -442,0 +442,1 @@\n+doclet.NonPreviewAsPreview=Programs can only use {0} as {1} when preview features are enabled.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2713,0 +2713,34 @@\n+    \/\/ copied and trimmed down version of HtmlDocletWriter.getPreviewNotes\n+    public Set<TypeElement> getReferredPreviewFeatures(Element el) {\n+        PreviewSummary previewAPITypes = declaredUsingPreviewAPIs(el);\n+        Set<TypeElement> previewAPI = new HashSet<>(previewAPITypes.previewAPI);\n+        for (Element enclosed : el.getEnclosedElements()) {\n+            if (!enclosed.getKind().isClass() && !enclosed.getKind().isInterface()) {\n+                PreviewSummary memberAPITypes = declaredUsingPreviewAPIs(enclosed);\n+                previewAPI.addAll(memberAPITypes.previewAPI);\n+            }\n+        }\n+        return previewAPI;\n+    }\n+\n+    public boolean isNonPreviewExtendingPreview(Element el) {\n+        if (!configuration.workArounds.isPreviewAPI(el) && (el.getKind().isDeclaredType())) {\n+            Element enclosingElement = el.getEnclosingElement();\n+            while (enclosingElement != null) {\n+                if (configuration.workArounds.isPreviewAPI(enclosingElement)) {\n+                    return false; \/\/ inner class of preview feature\n+                }\n+                enclosingElement = enclosingElement.getEnclosingElement();  \/\/ deal with nested inner classes\n+            }\n+\n+            TypeElement typeElement = (TypeElement) el;\n+            for (TypeMirror supertype : typeElement.getInterfaces()) {\n+                Element superElement = ((DeclaredType) supertype).asElement();\n+                if (configuration.workArounds.isPreviewAPI(superElement)) {\n+                    return true;  \/\/ non preview extending a preview interface\n+                }\n+            }\n+        }\n+        return false;  \/\/ Either it's a preview API or has no preview parent\n+    }\n+\n@@ -2726,1 +2760,2 @@\n-                   && !hasNoPreviewAnnotation(el);\n+                    && !hasNoPreviewAnnotation(el)\n+                    && !isNonPreviewExtendingPreview(el);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- *           8331947 8281533\n+ *           8331947 8281533 8343239\n@@ -179,0 +179,43 @@\n+    \/\/ 8343239 pre-existing permanent API that is later retrofitted\n+    \/\/ to extend a @PreviewFeature interface should not be flagged as a preview feature\n+    @Test\n+    public void nonPreviewExtendsPreview() {\n+        javadoc(\"-d\", \"out-non-preview-extends-preview\",\n+                \"--add-exports\", \"java.base\/jdk.internal.javac=api2\",\n+                \"--source-path\", Paths.get(testSrc, \"api2\").toAbsolutePath().toString(),\n+                \"--show-packages=all\",\n+                \"api2\/nonpreviewextendspreview\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"api2\/nonpreviewextendspreview\/NonPreviewExtendsPreview.html\", true,\n+                \"\"\"\n+                <div class=\"horizontal-scroll\">\n+                <div class=\"type-signature\"><span class=\"modifiers\">public interface <\/span><span class=\"element-name type-name-label\">NonPreviewExtendsPreview<\/span><span class=\"extends-implements\">\n+                extends <a href=\"CoreInterface.html\" title=\"interface in nonpreviewextendspreview\">CoreInterface<\/a><sup><a href=\"CoreInterface.html#preview-nonpreviewextendspreview.CoreInterface\">PREVIEW<\/a><\/sup><\/span><\/div>\n+                <div class=\"preview-block\" id=\"preview-nonpreviewextendspreview.NonPreviewExtendsPreview\"><span class=\"preview-label\"><code>NonPreviewExtendsPreview<\/code> relies on preview features of the Java platform:<\/span>\n+                <ul class=\"preview-comment\">\n+                <li><code>NonPreviewExtendsPreview<\/code> refers to one or more preview APIs:  <a href=\"CoreInterface.html\" title=\"interface in nonpreviewextendspreview\"><code>CoreInterface<\/code><\/a>.<\/li>\n+                <\/ul>\n+                <div class=\"preview-comment\">Programs can only use <code>NonPreviewExtendsPreview<\/code> as <code><code>CoreInterface<\/code><\/code> when preview features are enabled.<\/div>\n+                <div class=\"preview-comment\">Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.<\/div>\n+                <\/div>\n+                <div class=\"block\">Non preview feature<\/div>\n+                <\/div>\n+                \"\"\");\n+        checkOutput(\"api2\/nonpreviewextendspreview\/NonPreviewExtendsPreview.html\", false,\n+                \"\"\"\n+                <div class=\"preview-comment\">Programs can only use <code>NonPreviewExtendsPreview<\/code> when preview features are enabled.<\/div>\n+                \"\"\");\n+        checkOutput(\"api2\/nonpreviewextendspreview\/CoreInterface.html\", true,\n+                \"\"\"\n+                <div class=\"horizontal-scroll\">\n+                <div class=\"type-signature\"><span class=\"modifiers\">public interface <\/span><span class=\"element-name type-name-label\">CoreInterface<\/span><\/div>\n+                <div class=\"preview-block\" id=\"preview-nonpreviewextendspreview.CoreInterface\"><span class=\"preview-label\"><code>CoreInterface<\/code> is a preview API of the Java platform.<\/span>\n+                <div class=\"preview-comment\">Programs can only use <code>CoreInterface<\/code> when preview features are enabled.<\/div>\n+                <div class=\"preview-comment\">Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.<\/div>\n+                <\/div>\n+                <div class=\"block\">Preview feature<\/div>\n+                <\/div>\n+                \"\"\");\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/TestPreview.java","additions":44,"deletions":1,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package nonpreviewextendspreview;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * Preview feature\n+ *\/\n+@PreviewFeature(feature= PreviewFeature.Feature.TEST)\n+public interface CoreInterface {\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/api2\/nonpreviewextendspreview\/CoreInterface.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package nonpreviewextendspreview;\n+\n+\/**\n+ * Non preview feature\n+ *\/\n+public interface NonPreviewExtendsPreview extends CoreInterface {\n+    default int getNumber() {\n+        return 0;\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/api2\/nonpreviewextendspreview\/NonPreviewExtendsPreview.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -24,4 +24,4 @@\n-module com.foo {\n-    requires jdk.httpserver;\n-    requires net.foo;\n-}\n+\/**\n+ * Non preview package.\n+ *\/\n+package api2.nonpreviewextendspreview;\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/api2\/nonpreviewextendspreview\/package-info.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"test\/jdk\/tools\/jlink\/plugins\/SystemModuleDescriptors\/src\/com.foo\/module-info.java","status":"copied"}]}