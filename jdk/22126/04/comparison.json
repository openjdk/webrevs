{"files":[{"patch":"@@ -2488,1 +2488,0 @@\n-                usedInDeclaration.addAll(types2Classes(te.getInterfaces()));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- *           8331947 8281533 8318416\n+ *           8331947 8281533 8343239 8318416\n@@ -29,1 +29,1 @@\n- * @library  ..\/..\/lib\n+ * @library  \/tools\/lib ..\/..\/lib\n@@ -32,1 +32,1 @@\n- * @build    javadoc.tester.*\n+ * @build    toolbox.ToolBox javadoc.tester.*\n@@ -36,0 +36,1 @@\n+import java.io.IOException;\n@@ -38,0 +39,1 @@\n+\n@@ -39,0 +41,1 @@\n+import toolbox.ToolBox;\n@@ -41,0 +44,1 @@\n+    ToolBox tb = new ToolBox();\n@@ -188,0 +192,54 @@\n+    \/\/ 8343239 pre-existing permanent API that is later retrofitted\n+    \/\/ to extend a @PreviewFeature interface should not be flagged as a preview feature\n+    @Test\n+    public void nonPreviewExtendsPreview(Path base) throws IOException {\n+\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                import jdk.internal.javac.PreviewFeature;\n+\n+                \/**\n+                 * Preview feature\n+                 *\/\n+                @PreviewFeature(feature= PreviewFeature.Feature.TEST)\n+                public interface CoreInterface {\n+                }\n+                \"\"\", \"\"\"\n+                package p;\n+\n+                 \/**\n+                  * Non preview feature\n+                  *\/\n+                 public interface NonPreviewExtendsPreview extends CoreInterface {\n+                     default int getNumber() {\n+                         return 0;\n+                     }\n+                 }\n+                \"\"\");\n+        javadoc(\"-d\", \"out-non-preview-extends-preview\",\n+                \"--add-exports\", \"java.base\/jdk.internal.javac=ALL-UNNAMED\",\n+                \"--source-path\",\n+                src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+        checkOutput(\"p\/NonPreviewExtendsPreview.html\", false,\n+                \"\"\"\n+                 <code>NonPreviewExtendsPreview<\/code> relies on preview features of the Java platform:\n+                \"\"\",\n+                \"\"\"\n+                <code>NonPreviewExtendsPreview<\/code> refers to one or more preview APIs:\n+                \"\"\");\n+        checkOutput(\"p\/CoreInterface.html\", true,\n+                \"\"\"\n+                <div class=\"horizontal-scroll\">\n+                <div class=\"type-signature\"><span class=\"modifiers\">public interface <\/span><span class=\"element-name type-name-label\">CoreInterface<\/span><\/div>\n+                <div class=\"preview-block\" id=\"preview-p.CoreInterface\"><span class=\"preview-label\"><code>CoreInterface<\/code> is a preview API of the Java platform.<\/span>\n+                <div class=\"preview-comment\">Programs can only use <code>CoreInterface<\/code> when preview features are enabled.<\/div>\n+                <div class=\"preview-comment\">Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.<\/div>\n+                <\/div>\n+                <div class=\"block\">Preview feature<\/div>\n+                <\/div>\n+                \"\"\");\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testPreview\/TestPreview.java","additions":61,"deletions":3,"binary":false,"changes":64,"status":"modified"}]}