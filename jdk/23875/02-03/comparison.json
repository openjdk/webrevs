{"files":[{"patch":"@@ -108,0 +108,1 @@\n+    private final boolean nullCheckOuterThis;\n@@ -137,0 +138,2 @@\n+        nullCheckOuterThis = options.getBoolean(\"nullCheckOuterThis\",\n+            target.nullCheckOuterThisByDefault());\n@@ -1797,1 +1800,5 @@\n-    \/** Return tree simulating null checking outer this and assigning. *\/\n+    \/**\n+     * Return tree simulating null checking outer this and\/or assigning. This is\n+     * called when a null check is required (nullCheckOuterThis), or a synthetic\n+     * field is generated (stores).\n+     *\/\n@@ -1801,1 +1808,0 @@\n-        var nullCheck = attr.makeNullCheck(make.Ident(rhs));\n@@ -1806,0 +1812,4 @@\n+            JCExpression sourceExp = make.Ident(rhs);\n+            if (nullCheckOuterThis) {\n+                sourceExp = attr.makeNullCheck(sourceExp);\n+            }\n@@ -1808,1 +1818,1 @@\n-                    nullCheck).setType(lhs.erasure(types));\n+                    sourceExp).setType(lhs.erasure(types));\n@@ -1810,1 +1820,2 @@\n-            expression = nullCheck;\n+            Assert.check(nullCheckOuterThis);\n+            expression = attr.makeNullCheck(make.Ident(rhs));\n@@ -2217,1 +2228,2 @@\n-        \/\/ otherwise just prepend enclosing instance null check code\n+        \/\/ otherwise prepend enclosing instance null check code if required\n+        emitOuter:\n@@ -2223,0 +2235,2 @@\n+            } else if (!nullCheckOuterThis) {\n+                break emitOuter;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -241,0 +241,7 @@\n+\n+    \/**\n+     * Should we emit a null check against incoming outer this argument by default?\n+     *\/\n+    public boolean nullCheckOuterThisByDefault() {\n+        return compareTo(JDK1_25) >= 0;\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Target.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/*\n+ * @test\n+ * @bug 8164714\n+ * @summary No null check for immediate enclosing instance for VM\/reflective\n+ *          invocation of inner classes for older versions or on request\n+ *\n+ * @clean *\n+ * @compile -XDnullCheckOuterThis=false NoOuterThisNullChecks.java\n+ * @run junit NoOuterThisNullChecks\n+ *\n+ * @clean *\n+ * @compile --release 17 NoOuterThisNullChecks.java\n+ * @run junit NoOuterThisNullChecks\n+ *\/\n+class NoOuterThisNullChecks {\n+    static Stream<Class<?>> testClasses() {\n+        return Stream.of(NoOuterThis.class, OuterThisField.class);\n+    }\n+\n+    @MethodSource(\"testClasses\")\n+    @ParameterizedTest\n+    void testNoOuter(Class<?> clz) {\n+        assertDoesNotThrow(() -> clz.getDeclaredConstructor(NoOuterThisNullChecks.class).newInstance((Object) null));\n+\n+        MethodHandle mh = assertDoesNotThrow(() -> MethodHandles.lookup().findConstructor(clz, MethodType.methodType(void.class, NoOuterThisNullChecks.class)))\n+                .asType(MethodType.methodType(Object.class, Object.class));\n+        assertDoesNotThrow(() -> {\n+            Object stub = mh.invokeExact((Object) null);\n+        });\n+    }\n+\n+    class NoOuterThis {}\n+    class OuterThisField {\n+        @Override\n+        public String toString() {\n+            return \"outer this = \" + NoOuterThisNullChecks.this;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/outerThisNull\/NoOuterThisNullChecks.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -38,1 +38,1 @@\n- * @summary No null check for immediate enclosing instance for VM\/reflective\n+ * @summary Null check for immediate enclosing instance for VM\/reflective\n@@ -46,1 +46,1 @@\n- * @compile --release 17 OuterThisNullChecks.java\n+ * @compile --release 17 -XDnullCheckOuterThis=true OuterThisNullChecks.java\n","filename":"test\/langtools\/tools\/javac\/outerThisNull\/OuterThisNullChecks.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}