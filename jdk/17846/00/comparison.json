{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,10 @@\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.ref.Reference;\n+import java.util.HashMap;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+import static java.nio.charset.StandardCharsets.ISO_8859_1;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n@@ -34,1 +44,1 @@\n- * atoms are defined in the Inter client communications converntions manual.\n+ * atoms are defined in the Inter client communications conventions manual.\n@@ -37,1 +47,1 @@\n- * by using a pre-exisiting atom like {@code XA_WM_CLASS}. A {@code display} has to be specified\n+ * by using a pre-existing atom like {@code XA_WM_CLASS}. A {@code display} has to be specified\n@@ -61,7 +71,0 @@\n-import java.util.HashMap;\n-\n-import jdk.internal.misc.Unsafe;\n-\n-import static java.nio.charset.StandardCharsets.ISO_8859_1;\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n@@ -414,0 +417,15 @@\n+    \/**\n+     * Gets uninterpreted set of data from property and stores them in the data segment.\n+     * Property type is the same as current atom, property is current atom.\n+     * Property format is 32. Property 'delete' is false.\n+     * Returns boolean if requested type, format, length match returned values\n+     * and returned data pointer is not null.\n+     *\/\n+    public boolean getAtomData(long window, MemorySegment data) {\n+        try {\n+            return getAtomData(window, data.address(), (int) (data.byteSize() \/ ValueLayout.JAVA_INT.byteSize()));\n+        } finally {\n+            Reference.reachabilityFence(data);\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XAtom.java","additions":28,"deletions":10,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,5 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout.PathElement;\n+import java.lang.foreign.StructLayout;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.VarHandle;\n@@ -79,0 +84,8 @@\n+    static StructLayout X_EMBED_INFO_LAYOUT = MemoryLayout.structLayout(\n+            ValueLayout.JAVA_INT.withName(\"protocol\"),\n+            ValueLayout.JAVA_INT.withName(\"flags\")\n+    );\n+\n+    static VarHandle X_EMBED_INFO_PROTOCOL = X_EMBED_INFO_LAYOUT.varHandle(PathElement.groupElement(\"protocol\"));\n+    static VarHandle X_EMBED_INFO_FLAGS = X_EMBED_INFO_LAYOUT.varHandle(PathElement.groupElement(\"flags\"));\n+\n@@ -80,0 +93,1 @@\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XEmbedHelper.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,4 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.ref.Reference;\n@@ -34,1 +38,1 @@\n-    HashMap<Long, java.awt.peer.ComponentPeer> children = new HashMap<>();\n+    private final HashMap<Long, java.awt.peer.ComponentPeer> children = new HashMap<>();\n@@ -71,5 +75,5 @@\n-        long data = unsafe.allocateMemory(8);\n-        try {\n-            if (XEmbedInfo.getAtomData(child, data, 2)) {\n-                int protocol = unsafe.getInt(data);\n-                int flags = unsafe.getInt(data);\n+        try (Arena arena = Arena.ofConfined()){\n+            MemorySegment data = arena.allocate(X_EMBED_INFO_LAYOUT);\n+            if (XEmbedInfo.getAtomData(child, data)) {\n+                int protocol = (int)X_EMBED_INFO_PROTOCOL.get(data, 0L);\n+                int flags = (int)X_EMBED_INFO_FLAGS.get(data, 0L);\n@@ -78,2 +82,0 @@\n-        } finally {\n-            unsafe.freeMemory(data);\n@@ -133,2 +135,1 @@\n-        long data = Native.toData(bdata);\n-        if (data == 0) {\n+        if (bdata == null) {\n@@ -137,8 +138,14 @@\n-        XKeyEvent ke = new XKeyEvent(data);\n-        ke.set_window(child);\n-        XToolkit.awtLock();\n-        try {\n-            XlibWrapper.XSendEvent(XToolkit.getDisplay(), child, false, XConstants.NoEventMask, data);\n-        }\n-        finally {\n-            XToolkit.awtUnlock();\n+        try (Arena arena = Arena.ofConfined()) {\n+            var data = arena.allocateFrom(ValueLayout.JAVA_BYTE, bdata);\n+            try {\n+                XKeyEvent ke = new XKeyEvent(data.address());\n+                ke.set_window(child);\n+                XToolkit.awtLock();\n+                try {\n+                    XlibWrapper.XSendEvent(XToolkit.getDisplay(), child, false, XConstants.NoEventMask, data.address());\n+                } finally {\n+                    XToolkit.awtUnlock();\n+                }\n+            } finally {\n+                Reference.reachabilityFence(data);\n+            }\n@@ -146,1 +153,0 @@\n-        XlibWrapper.unsafe.freeMemory(data);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XEmbeddingContainer.java","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"}]}