{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.foreign.Arena;\n@@ -297,3 +298,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -314,3 +313,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -328,3 +325,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -345,3 +340,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -363,3 +356,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -395,3 +386,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -424,1 +413,7 @@\n-    public boolean getAtomData(long window, MemorySegment data) {\n+    public boolean getAtomData(long window, Arena arena, MemorySegment data) {\n+        assertAtomInitialized();\n+        checkWindow(window);\n+        int length = Math.toIntExact(data.byteSize() \/ ValueLayout.JAVA_INT.byteSize());\n+        WindowPropertyGetter getter =\n+                new WindowPropertyGetter(window, this, 0, length,\n+                        false, this);\n@@ -426,1 +421,14 @@\n-            return getAtomData(window, data.address(), (int) (data.byteSize() \/ ValueLayout.JAVA_INT.byteSize()));\n+            int status = getter.execute();\n+            if (status != XConstants.Success || getter.getData() == 0) {\n+                return false;\n+            }\n+            if (getter.getActualType() != atom\n+                    || getter.getActualFormat() != 32\n+                    || getter.getNumberOfItems() != length) {\n+                return false;\n+            }\n+            long bytes = (long) length * getAtomSize();\n+            MemorySegment source = MemorySegment.ofAddress(getter.getData())\n+                    .reinterpret(bytes, arena, ms -> {});\n+            MemorySegment.copy(source, 0, data, 0, bytes);\n+            return true;\n@@ -428,1 +436,1 @@\n-            Reference.reachabilityFence(data);\n+            getter.dispose();\n@@ -440,3 +448,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -474,3 +480,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -507,3 +511,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -528,3 +530,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -549,3 +549,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -567,3 +565,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -583,3 +579,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -610,3 +604,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -681,3 +673,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -806,3 +796,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -829,3 +817,1 @@\n-        if (atom == 0) {\n-            throw new IllegalStateException(\"Atom should be initialized\");\n-        }\n+        assertAtomInitialized();\n@@ -849,0 +835,6 @@\n+\n+    private void assertAtomInitialized() {\n+        if (atom == 0) {\n+            throw new IllegalStateException(\"Atom should be initialized\");\n+        }\n+    }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XAtom.java","additions":46,"deletions":54,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-            if (XEmbedInfo.getAtomData(child, data)) {\n+            if (XEmbedInfo.getAtomData(child, arena, data)) {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XEmbeddingContainer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}