{"files":[{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,2 @@\n+import jdk.test.lib.security.DiffieHellmanGroup;\n+import jdk.test.lib.security.SecurityUtils;\n@@ -39,42 +42,0 @@\n-    \/**\n-    * RFC 7919 - ffdhe2048.\n-    *\/\n-    static byte[] DHPrime = {\n-    (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n-    (byte) 0xAD, (byte) 0xF8, (byte) 0x54, (byte) 0x58, (byte) 0xA2, (byte) 0xBB, (byte) 0x4A, (byte) 0x9A,\n-    (byte) 0xAF, (byte) 0xDC, (byte) 0x56, (byte) 0x20, (byte) 0x27, (byte) 0x3D, (byte) 0x3C, (byte) 0xF1,\n-    (byte) 0xD8, (byte) 0xB9, (byte) 0xC5, (byte) 0x83, (byte) 0xCE, (byte) 0x2D, (byte) 0x36, (byte) 0x95,\n-    (byte) 0xA9, (byte) 0xE1, (byte) 0x36, (byte) 0x41, (byte) 0x14, (byte) 0x64, (byte) 0x33, (byte) 0xFB,\n-    (byte) 0xCC, (byte) 0x93, (byte) 0x9D, (byte) 0xCE, (byte) 0x24, (byte) 0x9B, (byte) 0x3E, (byte) 0xF9,\n-    (byte) 0x7D, (byte) 0x2F, (byte) 0xE3, (byte) 0x63, (byte) 0x63, (byte) 0x0C, (byte) 0x75, (byte) 0xD8,\n-    (byte) 0xF6, (byte) 0x81, (byte) 0xB2, (byte) 0x02, (byte) 0xAE, (byte) 0xC4, (byte) 0x61, (byte) 0x7A,\n-    (byte) 0xD3, (byte) 0xDF, (byte) 0x1E, (byte) 0xD5, (byte) 0xD5, (byte) 0xFD, (byte) 0x65, (byte) 0x61,\n-    (byte) 0x24, (byte) 0x33, (byte) 0xF5, (byte) 0x1F, (byte) 0x5F, (byte) 0x06, (byte) 0x6E, (byte) 0xD0,\n-    (byte) 0x85, (byte) 0x63, (byte) 0x65, (byte) 0x55, (byte) 0x3D, (byte) 0xED, (byte) 0x1A, (byte) 0xF3,\n-    (byte) 0xB5, (byte) 0x57, (byte) 0x13, (byte) 0x5E, (byte) 0x7F, (byte) 0x57, (byte) 0xC9, (byte) 0x35,\n-    (byte) 0x98, (byte) 0x4F, (byte) 0x0C, (byte) 0x70, (byte) 0xE0, (byte) 0xE6, (byte) 0x8B, (byte) 0x77,\n-    (byte) 0xE2, (byte) 0xA6, (byte) 0x89, (byte) 0xDA, (byte) 0xF3, (byte) 0xEF, (byte) 0xE8, (byte) 0x72,\n-    (byte) 0x1D, (byte) 0xF1, (byte) 0x58, (byte) 0xA1, (byte) 0x36, (byte) 0xAD, (byte) 0xE7, (byte) 0x35,\n-    (byte) 0x30, (byte) 0xAC, (byte) 0xCA, (byte) 0x4F, (byte) 0x48, (byte) 0x3A, (byte) 0x79, (byte) 0x7A,\n-    (byte) 0xBC, (byte) 0x0A, (byte) 0xB1, (byte) 0x82, (byte) 0xB3, (byte) 0x24, (byte) 0xFB, (byte) 0x61,\n-    (byte) 0xD1, (byte) 0x08, (byte) 0xA9, (byte) 0x4B, (byte) 0xB2, (byte) 0xC8, (byte) 0xE3, (byte) 0xFB,\n-    (byte) 0xB9, (byte) 0x6A, (byte) 0xDA, (byte) 0xB7, (byte) 0x60, (byte) 0xD7, (byte) 0xF4, (byte) 0x68,\n-    (byte) 0x1D, (byte) 0x4F, (byte) 0x42, (byte) 0xA3, (byte) 0xDE, (byte) 0x39, (byte) 0x4D, (byte) 0xF4,\n-    (byte) 0xAE, (byte) 0x56, (byte) 0xED, (byte) 0xE7, (byte) 0x63, (byte) 0x72, (byte) 0xBB, (byte) 0x19,\n-    (byte) 0x0B, (byte) 0x07, (byte) 0xA7, (byte) 0xC8, (byte) 0xEE, (byte) 0x0A, (byte) 0x6D, (byte) 0x70,\n-    (byte) 0x9E, (byte) 0x02, (byte) 0xFC, (byte) 0xE1, (byte) 0xCD, (byte) 0xF7, (byte) 0xE2, (byte) 0xEC,\n-    (byte) 0xC0, (byte) 0x34, (byte) 0x04, (byte) 0xCD, (byte) 0x28, (byte) 0x34, (byte) 0x2F, (byte) 0x61,\n-    (byte) 0x91, (byte) 0x72, (byte) 0xFE, (byte) 0x9C, (byte) 0xE9, (byte) 0x85, (byte) 0x83, (byte) 0xFF,\n-    (byte) 0x8E, (byte) 0x4F, (byte) 0x12, (byte) 0x32, (byte) 0xEE, (byte) 0xF2, (byte) 0x81, (byte) 0x83,\n-    (byte) 0xC3, (byte) 0xFE, (byte) 0x3B, (byte) 0x1B, (byte) 0x4C, (byte) 0x6F, (byte) 0xAD, (byte) 0x73,\n-    (byte) 0x3B, (byte) 0xB5, (byte) 0xFC, (byte) 0xBC, (byte) 0x2E, (byte) 0xC2, (byte) 0x20, (byte) 0x05,\n-    (byte) 0xC5, (byte) 0x8E, (byte) 0xF1, (byte) 0x83, (byte) 0x7D, (byte) 0x16, (byte) 0x83, (byte) 0xB2,\n-    (byte) 0xC6, (byte) 0xF3, (byte) 0x4A, (byte) 0x26, (byte) 0xC1, (byte) 0xB2, (byte) 0xEF, (byte) 0xFA,\n-    (byte) 0x88, (byte) 0x6B, (byte) 0x42, (byte) 0x38, (byte) 0x61, (byte) 0x28, (byte) 0x5C, (byte) 0x97,\n-    (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF\n-    };\n-\n-    static byte[] DHBase = {\n-            (byte) 0x02\n-    };\n-\n@@ -89,2 +50,3 @@\n-        BigInteger p = new BigInteger(1, DHPrime);\n-        BigInteger g = new BigInteger(1, DHBase);\n+        DiffieHellmanGroup dhGroup = SecurityUtils.getTestDHGroup();\n+        BigInteger p = new BigInteger(1, dhGroup.getPrimeBytes());\n+        BigInteger g = new BigInteger(1, dhGroup.getBase().toByteArray());\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/DHGenSharedSecret.java","additions":6,"deletions":44,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -41,0 +42,2 @@\n+import jdk.test.lib.security.DiffieHellmanGroup;\n+import jdk.test.lib.security.SecurityUtils;\n@@ -46,2 +49,1 @@\n- * By default, preconfigured parameters (2048 bit prime modulus and base\n- * generator used by ffdhe2048) are used.\n+ * By default, preconfigured parameters are used.\n@@ -62,1 +64,1 @@\n-            String mode = \"USE_SKIP_DH_PARAMS\";\n+            String mode = \"USE_PRECONFIGURED_DH_PARAMS\";\n@@ -95,4 +97,5 @@\n-            \/\/ use some pre-generated, default DH parameters\n-            System.err.println(\"Using FFDHE2048 Diffie-Hellman parameters\");\n-            ffhde2048ParamSpec = new DHParameterSpec(ffhde2048Modulus,\n-                    ffhde2048Base);\n+            \/\/ use some pre-generated, test default DH parameters\n+            DiffieHellmanGroup dhGroup = SecurityUtils.getTestDHGroup();\n+            System.err.println(\"Using \" + dhGroup.name() + \" Diffie-Hellman parameters\");\n+            ffhde2048ParamSpec = new DHParameterSpec(dhGroup.getModulus(),\n+                    dhGroup.getBase());\n@@ -277,40 +280,0 @@\n-\n-    \/**\n-      * RFC 7919 - ffdhe2048.\n-      *\/\n-    private static byte[] FFDHE2048PrimeBytes = {\n-            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n-            (byte) 0xAD, (byte) 0xF8, (byte) 0x54, (byte) 0x58, (byte) 0xA2, (byte) 0xBB, (byte) 0x4A, (byte) 0x9A,\n-            (byte) 0xAF, (byte) 0xDC, (byte) 0x56, (byte) 0x20, (byte) 0x27, (byte) 0x3D, (byte) 0x3C, (byte) 0xF1,\n-            (byte) 0xD8, (byte) 0xB9, (byte) 0xC5, (byte) 0x83, (byte) 0xCE, (byte) 0x2D, (byte) 0x36, (byte) 0x95,\n-            (byte) 0xA9, (byte) 0xE1, (byte) 0x36, (byte) 0x41, (byte) 0x14, (byte) 0x64, (byte) 0x33, (byte) 0xFB,\n-            (byte) 0xCC, (byte) 0x93, (byte) 0x9D, (byte) 0xCE, (byte) 0x24, (byte) 0x9B, (byte) 0x3E, (byte) 0xF9,\n-            (byte) 0x7D, (byte) 0x2F, (byte) 0xE3, (byte) 0x63, (byte) 0x63, (byte) 0x0C, (byte) 0x75, (byte) 0xD8,\n-            (byte) 0xF6, (byte) 0x81, (byte) 0xB2, (byte) 0x02, (byte) 0xAE, (byte) 0xC4, (byte) 0x61, (byte) 0x7A,\n-            (byte) 0xD3, (byte) 0xDF, (byte) 0x1E, (byte) 0xD5, (byte) 0xD5, (byte) 0xFD, (byte) 0x65, (byte) 0x61,\n-            (byte) 0x24, (byte) 0x33, (byte) 0xF5, (byte) 0x1F, (byte) 0x5F, (byte) 0x06, (byte) 0x6E, (byte) 0xD0,\n-            (byte) 0x85, (byte) 0x63, (byte) 0x65, (byte) 0x55, (byte) 0x3D, (byte) 0xED, (byte) 0x1A, (byte) 0xF3,\n-            (byte) 0xB5, (byte) 0x57, (byte) 0x13, (byte) 0x5E, (byte) 0x7F, (byte) 0x57, (byte) 0xC9, (byte) 0x35,\n-            (byte) 0x98, (byte) 0x4F, (byte) 0x0C, (byte) 0x70, (byte) 0xE0, (byte) 0xE6, (byte) 0x8B, (byte) 0x77,\n-            (byte) 0xE2, (byte) 0xA6, (byte) 0x89, (byte) 0xDA, (byte) 0xF3, (byte) 0xEF, (byte) 0xE8, (byte) 0x72,\n-            (byte) 0x1D, (byte) 0xF1, (byte) 0x58, (byte) 0xA1, (byte) 0x36, (byte) 0xAD, (byte) 0xE7, (byte) 0x35,\n-            (byte) 0x30, (byte) 0xAC, (byte) 0xCA, (byte) 0x4F, (byte) 0x48, (byte) 0x3A, (byte) 0x79, (byte) 0x7A,\n-            (byte) 0xBC, (byte) 0x0A, (byte) 0xB1, (byte) 0x82, (byte) 0xB3, (byte) 0x24, (byte) 0xFB, (byte) 0x61,\n-            (byte) 0xD1, (byte) 0x08, (byte) 0xA9, (byte) 0x4B, (byte) 0xB2, (byte) 0xC8, (byte) 0xE3, (byte) 0xFB,\n-            (byte) 0xB9, (byte) 0x6A, (byte) 0xDA, (byte) 0xB7, (byte) 0x60, (byte) 0xD7, (byte) 0xF4, (byte) 0x68,\n-            (byte) 0x1D, (byte) 0x4F, (byte) 0x42, (byte) 0xA3, (byte) 0xDE, (byte) 0x39, (byte) 0x4D, (byte) 0xF4,\n-            (byte) 0xAE, (byte) 0x56, (byte) 0xED, (byte) 0xE7, (byte) 0x63, (byte) 0x72, (byte) 0xBB, (byte) 0x19,\n-            (byte) 0x0B, (byte) 0x07, (byte) 0xA7, (byte) 0xC8, (byte) 0xEE, (byte) 0x0A, (byte) 0x6D, (byte) 0x70,\n-            (byte) 0x9E, (byte) 0x02, (byte) 0xFC, (byte) 0xE1, (byte) 0xCD, (byte) 0xF7, (byte) 0xE2, (byte) 0xEC,\n-            (byte) 0xC0, (byte) 0x34, (byte) 0x04, (byte) 0xCD, (byte) 0x28, (byte) 0x34, (byte) 0x2F, (byte) 0x61,\n-            (byte) 0x91, (byte) 0x72, (byte) 0xFE, (byte) 0x9C, (byte) 0xE9, (byte) 0x85, (byte) 0x83, (byte) 0xFF,\n-            (byte) 0x8E, (byte) 0x4F, (byte) 0x12, (byte) 0x32, (byte) 0xEE, (byte) 0xF2, (byte) 0x81, (byte) 0x83,\n-            (byte) 0xC3, (byte) 0xFE, (byte) 0x3B, (byte) 0x1B, (byte) 0x4C, (byte) 0x6F, (byte) 0xAD, (byte) 0x73,\n-            (byte) 0x3B, (byte) 0xB5, (byte) 0xFC, (byte) 0xBC, (byte) 0x2E, (byte) 0xC2, (byte) 0x20, (byte) 0x05,\n-            (byte) 0xC5, (byte) 0x8E, (byte) 0xF1, (byte) 0x83, (byte) 0x7D, (byte) 0x16, (byte) 0x83, (byte) 0xB2,\n-            (byte) 0xC6, (byte) 0xF3, (byte) 0x4A, (byte) 0x26, (byte) 0xC1, (byte) 0xB2, (byte) 0xEF, (byte) 0xFA,\n-            (byte) 0x88, (byte) 0x6B, (byte) 0x42, (byte) 0x38, (byte) 0x61, (byte) 0x28, (byte) 0x5C, (byte) 0x97,\n-            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF\n-    };\n-    private static final BigInteger ffhde2048Modulus = new BigInteger(1, FFDHE2048PrimeBytes);\n-    private static final BigInteger ffhde2048Base = BigInteger.valueOf(2);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/DHKeyAgreement2.java","additions":10,"deletions":47,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -40,0 +41,2 @@\n+import jdk.test.lib.security.DiffieHellmanGroup;\n+import jdk.test.lib.security.SecurityUtils;\n@@ -45,2 +48,1 @@\n- * We use the same 1024 bit prime modulus and base generator that are used by\n- * SKIP.\n+ * By default, preconfigured parameters are used.\n@@ -64,3 +66,4 @@\n-        DHParameterSpec ffhde2048ParamSpec;\n-        System.err.println(\"Using FFDHE2048 Diffie-Hellman parameters\");\n-        ffhde2048ParamSpec = new DHParameterSpec(ffhde2048Modulus, ffhde2048Base);\n+        DiffieHellmanGroup dhGroup = SecurityUtils.getTestDHGroup();\n+        DHParameterSpec dhParamSpec;\n+        System.err.println(\"Using \" + dhGroup.name() + \" Diffie-Hellman parameters\");\n+        dhParamSpec = new DHParameterSpec(dhGroup.getModulus(), dhGroup.getBase());\n@@ -71,1 +74,1 @@\n-        aliceKpairGen.initialize(ffhde2048ParamSpec);\n+        aliceKpairGen.initialize(dhParamSpec);\n@@ -77,1 +80,1 @@\n-        bobKpairGen.initialize(ffhde2048ParamSpec);\n+        bobKpairGen.initialize(dhParamSpec);\n@@ -83,1 +86,1 @@\n-        carolKpairGen.initialize(ffhde2048ParamSpec);\n+        carolKpairGen.initialize(dhParamSpec);\n@@ -180,40 +183,0 @@\n-\n-    \/**\n-     * RFC 7919 - ffdhe2048.\n-     *\/\n-    private static byte[] FFDHE2048PrimeBytes = {\n-            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n-            (byte) 0xAD, (byte) 0xF8, (byte) 0x54, (byte) 0x58, (byte) 0xA2, (byte) 0xBB, (byte) 0x4A, (byte) 0x9A,\n-            (byte) 0xAF, (byte) 0xDC, (byte) 0x56, (byte) 0x20, (byte) 0x27, (byte) 0x3D, (byte) 0x3C, (byte) 0xF1,\n-            (byte) 0xD8, (byte) 0xB9, (byte) 0xC5, (byte) 0x83, (byte) 0xCE, (byte) 0x2D, (byte) 0x36, (byte) 0x95,\n-            (byte) 0xA9, (byte) 0xE1, (byte) 0x36, (byte) 0x41, (byte) 0x14, (byte) 0x64, (byte) 0x33, (byte) 0xFB,\n-            (byte) 0xCC, (byte) 0x93, (byte) 0x9D, (byte) 0xCE, (byte) 0x24, (byte) 0x9B, (byte) 0x3E, (byte) 0xF9,\n-            (byte) 0x7D, (byte) 0x2F, (byte) 0xE3, (byte) 0x63, (byte) 0x63, (byte) 0x0C, (byte) 0x75, (byte) 0xD8,\n-            (byte) 0xF6, (byte) 0x81, (byte) 0xB2, (byte) 0x02, (byte) 0xAE, (byte) 0xC4, (byte) 0x61, (byte) 0x7A,\n-            (byte) 0xD3, (byte) 0xDF, (byte) 0x1E, (byte) 0xD5, (byte) 0xD5, (byte) 0xFD, (byte) 0x65, (byte) 0x61,\n-            (byte) 0x24, (byte) 0x33, (byte) 0xF5, (byte) 0x1F, (byte) 0x5F, (byte) 0x06, (byte) 0x6E, (byte) 0xD0,\n-            (byte) 0x85, (byte) 0x63, (byte) 0x65, (byte) 0x55, (byte) 0x3D, (byte) 0xED, (byte) 0x1A, (byte) 0xF3,\n-            (byte) 0xB5, (byte) 0x57, (byte) 0x13, (byte) 0x5E, (byte) 0x7F, (byte) 0x57, (byte) 0xC9, (byte) 0x35,\n-            (byte) 0x98, (byte) 0x4F, (byte) 0x0C, (byte) 0x70, (byte) 0xE0, (byte) 0xE6, (byte) 0x8B, (byte) 0x77,\n-            (byte) 0xE2, (byte) 0xA6, (byte) 0x89, (byte) 0xDA, (byte) 0xF3, (byte) 0xEF, (byte) 0xE8, (byte) 0x72,\n-            (byte) 0x1D, (byte) 0xF1, (byte) 0x58, (byte) 0xA1, (byte) 0x36, (byte) 0xAD, (byte) 0xE7, (byte) 0x35,\n-            (byte) 0x30, (byte) 0xAC, (byte) 0xCA, (byte) 0x4F, (byte) 0x48, (byte) 0x3A, (byte) 0x79, (byte) 0x7A,\n-            (byte) 0xBC, (byte) 0x0A, (byte) 0xB1, (byte) 0x82, (byte) 0xB3, (byte) 0x24, (byte) 0xFB, (byte) 0x61,\n-            (byte) 0xD1, (byte) 0x08, (byte) 0xA9, (byte) 0x4B, (byte) 0xB2, (byte) 0xC8, (byte) 0xE3, (byte) 0xFB,\n-            (byte) 0xB9, (byte) 0x6A, (byte) 0xDA, (byte) 0xB7, (byte) 0x60, (byte) 0xD7, (byte) 0xF4, (byte) 0x68,\n-            (byte) 0x1D, (byte) 0x4F, (byte) 0x42, (byte) 0xA3, (byte) 0xDE, (byte) 0x39, (byte) 0x4D, (byte) 0xF4,\n-            (byte) 0xAE, (byte) 0x56, (byte) 0xED, (byte) 0xE7, (byte) 0x63, (byte) 0x72, (byte) 0xBB, (byte) 0x19,\n-            (byte) 0x0B, (byte) 0x07, (byte) 0xA7, (byte) 0xC8, (byte) 0xEE, (byte) 0x0A, (byte) 0x6D, (byte) 0x70,\n-            (byte) 0x9E, (byte) 0x02, (byte) 0xFC, (byte) 0xE1, (byte) 0xCD, (byte) 0xF7, (byte) 0xE2, (byte) 0xEC,\n-            (byte) 0xC0, (byte) 0x34, (byte) 0x04, (byte) 0xCD, (byte) 0x28, (byte) 0x34, (byte) 0x2F, (byte) 0x61,\n-            (byte) 0x91, (byte) 0x72, (byte) 0xFE, (byte) 0x9C, (byte) 0xE9, (byte) 0x85, (byte) 0x83, (byte) 0xFF,\n-            (byte) 0x8E, (byte) 0x4F, (byte) 0x12, (byte) 0x32, (byte) 0xEE, (byte) 0xF2, (byte) 0x81, (byte) 0x83,\n-            (byte) 0xC3, (byte) 0xFE, (byte) 0x3B, (byte) 0x1B, (byte) 0x4C, (byte) 0x6F, (byte) 0xAD, (byte) 0x73,\n-            (byte) 0x3B, (byte) 0xB5, (byte) 0xFC, (byte) 0xBC, (byte) 0x2E, (byte) 0xC2, (byte) 0x20, (byte) 0x05,\n-            (byte) 0xC5, (byte) 0x8E, (byte) 0xF1, (byte) 0x83, (byte) 0x7D, (byte) 0x16, (byte) 0x83, (byte) 0xB2,\n-            (byte) 0xC6, (byte) 0xF3, (byte) 0x4A, (byte) 0x26, (byte) 0xC1, (byte) 0xB2, (byte) 0xEF, (byte) 0xFA,\n-            (byte) 0x88, (byte) 0x6B, (byte) 0x42, (byte) 0x38, (byte) 0x61, (byte) 0x28, (byte) 0x5C, (byte) 0x97,\n-            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF\n-    };\n-    private static final BigInteger ffhde2048Modulus = new BigInteger(1, FFDHE2048PrimeBytes);\n-    private static final BigInteger ffhde2048Base = BigInteger.valueOf(2);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/DHKeyAgreement3.java","additions":11,"deletions":48,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -39,0 +40,2 @@\n+import jdk.test.lib.security.DiffieHellmanGroup;\n+import jdk.test.lib.security.SecurityUtils;\n@@ -58,3 +61,4 @@\n-        DHParameterSpec ffhde2048ParamSpec;\n-        System.err.println(\"Using FFDHE2048 Diffie-Hellman parameters\");\n-        ffhde2048ParamSpec = new DHParameterSpec(ffhde2048Modulus, ffhde2048Base);\n+        jdk.test.lib.security.DiffieHellmanGroup dhGroup = jdk.test.lib.security.SecurityUtils.getTestDHGroup();\n+        DHParameterSpec dhParamSpec;\n+        System.err.println(\"Using \" + dhGroup.name() + \" Diffie-Hellman parameters\");\n+        dhParamSpec = new DHParameterSpec(dhGroup.getModulus(), dhGroup.getBase());\n@@ -63,1 +67,1 @@\n-        kpgen.initialize(ffhde2048ParamSpec);\n+        kpgen.initialize(dhParamSpec);\n@@ -80,40 +84,0 @@\n-\n-    \/**\n-     * RFC 7919 - ffdhe2048.\n-     *\/\n-    private static byte[] FFDHE2048PrimeBytes = {\n-            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n-            (byte) 0xAD, (byte) 0xF8, (byte) 0x54, (byte) 0x58, (byte) 0xA2, (byte) 0xBB, (byte) 0x4A, (byte) 0x9A,\n-            (byte) 0xAF, (byte) 0xDC, (byte) 0x56, (byte) 0x20, (byte) 0x27, (byte) 0x3D, (byte) 0x3C, (byte) 0xF1,\n-            (byte) 0xD8, (byte) 0xB9, (byte) 0xC5, (byte) 0x83, (byte) 0xCE, (byte) 0x2D, (byte) 0x36, (byte) 0x95,\n-            (byte) 0xA9, (byte) 0xE1, (byte) 0x36, (byte) 0x41, (byte) 0x14, (byte) 0x64, (byte) 0x33, (byte) 0xFB,\n-            (byte) 0xCC, (byte) 0x93, (byte) 0x9D, (byte) 0xCE, (byte) 0x24, (byte) 0x9B, (byte) 0x3E, (byte) 0xF9,\n-            (byte) 0x7D, (byte) 0x2F, (byte) 0xE3, (byte) 0x63, (byte) 0x63, (byte) 0x0C, (byte) 0x75, (byte) 0xD8,\n-            (byte) 0xF6, (byte) 0x81, (byte) 0xB2, (byte) 0x02, (byte) 0xAE, (byte) 0xC4, (byte) 0x61, (byte) 0x7A,\n-            (byte) 0xD3, (byte) 0xDF, (byte) 0x1E, (byte) 0xD5, (byte) 0xD5, (byte) 0xFD, (byte) 0x65, (byte) 0x61,\n-            (byte) 0x24, (byte) 0x33, (byte) 0xF5, (byte) 0x1F, (byte) 0x5F, (byte) 0x06, (byte) 0x6E, (byte) 0xD0,\n-            (byte) 0x85, (byte) 0x63, (byte) 0x65, (byte) 0x55, (byte) 0x3D, (byte) 0xED, (byte) 0x1A, (byte) 0xF3,\n-            (byte) 0xB5, (byte) 0x57, (byte) 0x13, (byte) 0x5E, (byte) 0x7F, (byte) 0x57, (byte) 0xC9, (byte) 0x35,\n-            (byte) 0x98, (byte) 0x4F, (byte) 0x0C, (byte) 0x70, (byte) 0xE0, (byte) 0xE6, (byte) 0x8B, (byte) 0x77,\n-            (byte) 0xE2, (byte) 0xA6, (byte) 0x89, (byte) 0xDA, (byte) 0xF3, (byte) 0xEF, (byte) 0xE8, (byte) 0x72,\n-            (byte) 0x1D, (byte) 0xF1, (byte) 0x58, (byte) 0xA1, (byte) 0x36, (byte) 0xAD, (byte) 0xE7, (byte) 0x35,\n-            (byte) 0x30, (byte) 0xAC, (byte) 0xCA, (byte) 0x4F, (byte) 0x48, (byte) 0x3A, (byte) 0x79, (byte) 0x7A,\n-            (byte) 0xBC, (byte) 0x0A, (byte) 0xB1, (byte) 0x82, (byte) 0xB3, (byte) 0x24, (byte) 0xFB, (byte) 0x61,\n-            (byte) 0xD1, (byte) 0x08, (byte) 0xA9, (byte) 0x4B, (byte) 0xB2, (byte) 0xC8, (byte) 0xE3, (byte) 0xFB,\n-            (byte) 0xB9, (byte) 0x6A, (byte) 0xDA, (byte) 0xB7, (byte) 0x60, (byte) 0xD7, (byte) 0xF4, (byte) 0x68,\n-            (byte) 0x1D, (byte) 0x4F, (byte) 0x42, (byte) 0xA3, (byte) 0xDE, (byte) 0x39, (byte) 0x4D, (byte) 0xF4,\n-            (byte) 0xAE, (byte) 0x56, (byte) 0xED, (byte) 0xE7, (byte) 0x63, (byte) 0x72, (byte) 0xBB, (byte) 0x19,\n-            (byte) 0x0B, (byte) 0x07, (byte) 0xA7, (byte) 0xC8, (byte) 0xEE, (byte) 0x0A, (byte) 0x6D, (byte) 0x70,\n-            (byte) 0x9E, (byte) 0x02, (byte) 0xFC, (byte) 0xE1, (byte) 0xCD, (byte) 0xF7, (byte) 0xE2, (byte) 0xEC,\n-            (byte) 0xC0, (byte) 0x34, (byte) 0x04, (byte) 0xCD, (byte) 0x28, (byte) 0x34, (byte) 0x2F, (byte) 0x61,\n-            (byte) 0x91, (byte) 0x72, (byte) 0xFE, (byte) 0x9C, (byte) 0xE9, (byte) 0x85, (byte) 0x83, (byte) 0xFF,\n-            (byte) 0x8E, (byte) 0x4F, (byte) 0x12, (byte) 0x32, (byte) 0xEE, (byte) 0xF2, (byte) 0x81, (byte) 0x83,\n-            (byte) 0xC3, (byte) 0xFE, (byte) 0x3B, (byte) 0x1B, (byte) 0x4C, (byte) 0x6F, (byte) 0xAD, (byte) 0x73,\n-            (byte) 0x3B, (byte) 0xB5, (byte) 0xFC, (byte) 0xBC, (byte) 0x2E, (byte) 0xC2, (byte) 0x20, (byte) 0x05,\n-            (byte) 0xC5, (byte) 0x8E, (byte) 0xF1, (byte) 0x83, (byte) 0x7D, (byte) 0x16, (byte) 0x83, (byte) 0xB2,\n-            (byte) 0xC6, (byte) 0xF3, (byte) 0x4A, (byte) 0x26, (byte) 0xC1, (byte) 0xB2, (byte) 0xEF, (byte) 0xFA,\n-            (byte) 0x88, (byte) 0x6B, (byte) 0x42, (byte) 0x38, (byte) 0x61, (byte) 0x28, (byte) 0x5C, (byte) 0x97,\n-            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF\n-    };\n-    private static final BigInteger ffhde2048Modulus = new BigInteger(1, FFDHE2048PrimeBytes);\n-    private static final BigInteger ffhde2048Base = BigInteger.valueOf(2);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/DHKeyFactory.java","additions":8,"deletions":44,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,2 @@\n+import jdk.test.lib.security.DiffieHellmanGroup;\n+import jdk.test.lib.security.SecurityUtils;\n@@ -39,42 +42,0 @@\n-    \/**\n-     * RFC 7919 - ffdhe2048.\n-     *\/\n-    static byte[] DHPrime = {\n-            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n-            (byte) 0xAD, (byte) 0xF8, (byte) 0x54, (byte) 0x58, (byte) 0xA2, (byte) 0xBB, (byte) 0x4A, (byte) 0x9A,\n-            (byte) 0xAF, (byte) 0xDC, (byte) 0x56, (byte) 0x20, (byte) 0x27, (byte) 0x3D, (byte) 0x3C, (byte) 0xF1,\n-            (byte) 0xD8, (byte) 0xB9, (byte) 0xC5, (byte) 0x83, (byte) 0xCE, (byte) 0x2D, (byte) 0x36, (byte) 0x95,\n-            (byte) 0xA9, (byte) 0xE1, (byte) 0x36, (byte) 0x41, (byte) 0x14, (byte) 0x64, (byte) 0x33, (byte) 0xFB,\n-            (byte) 0xCC, (byte) 0x93, (byte) 0x9D, (byte) 0xCE, (byte) 0x24, (byte) 0x9B, (byte) 0x3E, (byte) 0xF9,\n-            (byte) 0x7D, (byte) 0x2F, (byte) 0xE3, (byte) 0x63, (byte) 0x63, (byte) 0x0C, (byte) 0x75, (byte) 0xD8,\n-            (byte) 0xF6, (byte) 0x81, (byte) 0xB2, (byte) 0x02, (byte) 0xAE, (byte) 0xC4, (byte) 0x61, (byte) 0x7A,\n-            (byte) 0xD3, (byte) 0xDF, (byte) 0x1E, (byte) 0xD5, (byte) 0xD5, (byte) 0xFD, (byte) 0x65, (byte) 0x61,\n-            (byte) 0x24, (byte) 0x33, (byte) 0xF5, (byte) 0x1F, (byte) 0x5F, (byte) 0x06, (byte) 0x6E, (byte) 0xD0,\n-            (byte) 0x85, (byte) 0x63, (byte) 0x65, (byte) 0x55, (byte) 0x3D, (byte) 0xED, (byte) 0x1A, (byte) 0xF3,\n-            (byte) 0xB5, (byte) 0x57, (byte) 0x13, (byte) 0x5E, (byte) 0x7F, (byte) 0x57, (byte) 0xC9, (byte) 0x35,\n-            (byte) 0x98, (byte) 0x4F, (byte) 0x0C, (byte) 0x70, (byte) 0xE0, (byte) 0xE6, (byte) 0x8B, (byte) 0x77,\n-            (byte) 0xE2, (byte) 0xA6, (byte) 0x89, (byte) 0xDA, (byte) 0xF3, (byte) 0xEF, (byte) 0xE8, (byte) 0x72,\n-            (byte) 0x1D, (byte) 0xF1, (byte) 0x58, (byte) 0xA1, (byte) 0x36, (byte) 0xAD, (byte) 0xE7, (byte) 0x35,\n-            (byte) 0x30, (byte) 0xAC, (byte) 0xCA, (byte) 0x4F, (byte) 0x48, (byte) 0x3A, (byte) 0x79, (byte) 0x7A,\n-            (byte) 0xBC, (byte) 0x0A, (byte) 0xB1, (byte) 0x82, (byte) 0xB3, (byte) 0x24, (byte) 0xFB, (byte) 0x61,\n-            (byte) 0xD1, (byte) 0x08, (byte) 0xA9, (byte) 0x4B, (byte) 0xB2, (byte) 0xC8, (byte) 0xE3, (byte) 0xFB,\n-            (byte) 0xB9, (byte) 0x6A, (byte) 0xDA, (byte) 0xB7, (byte) 0x60, (byte) 0xD7, (byte) 0xF4, (byte) 0x68,\n-            (byte) 0x1D, (byte) 0x4F, (byte) 0x42, (byte) 0xA3, (byte) 0xDE, (byte) 0x39, (byte) 0x4D, (byte) 0xF4,\n-            (byte) 0xAE, (byte) 0x56, (byte) 0xED, (byte) 0xE7, (byte) 0x63, (byte) 0x72, (byte) 0xBB, (byte) 0x19,\n-            (byte) 0x0B, (byte) 0x07, (byte) 0xA7, (byte) 0xC8, (byte) 0xEE, (byte) 0x0A, (byte) 0x6D, (byte) 0x70,\n-            (byte) 0x9E, (byte) 0x02, (byte) 0xFC, (byte) 0xE1, (byte) 0xCD, (byte) 0xF7, (byte) 0xE2, (byte) 0xEC,\n-            (byte) 0xC0, (byte) 0x34, (byte) 0x04, (byte) 0xCD, (byte) 0x28, (byte) 0x34, (byte) 0x2F, (byte) 0x61,\n-            (byte) 0x91, (byte) 0x72, (byte) 0xFE, (byte) 0x9C, (byte) 0xE9, (byte) 0x85, (byte) 0x83, (byte) 0xFF,\n-            (byte) 0x8E, (byte) 0x4F, (byte) 0x12, (byte) 0x32, (byte) 0xEE, (byte) 0xF2, (byte) 0x81, (byte) 0x83,\n-            (byte) 0xC3, (byte) 0xFE, (byte) 0x3B, (byte) 0x1B, (byte) 0x4C, (byte) 0x6F, (byte) 0xAD, (byte) 0x73,\n-            (byte) 0x3B, (byte) 0xB5, (byte) 0xFC, (byte) 0xBC, (byte) 0x2E, (byte) 0xC2, (byte) 0x20, (byte) 0x05,\n-            (byte) 0xC5, (byte) 0x8E, (byte) 0xF1, (byte) 0x83, (byte) 0x7D, (byte) 0x16, (byte) 0x83, (byte) 0xB2,\n-            (byte) 0xC6, (byte) 0xF3, (byte) 0x4A, (byte) 0x26, (byte) 0xC1, (byte) 0xB2, (byte) 0xEF, (byte) 0xFA,\n-            (byte) 0x88, (byte) 0x6B, (byte) 0x42, (byte) 0x38, (byte) 0x61, (byte) 0x28, (byte) 0x5C, (byte) 0x97,\n-            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF\n-    };\n-\n-    static byte[] DHBase = {\n-            (byte) 0x02\n-    };\n-\n@@ -90,2 +51,3 @@\n-        BigInteger p = new BigInteger(1, DHPrime);\n-        BigInteger g = new BigInteger(1, DHBase);\n+        DiffieHellmanGroup dhGroup = SecurityUtils.getTestDHGroup();\n+        BigInteger p = new BigInteger(1, dhGroup.getPrimeBytes());\n+        BigInteger g = new BigInteger(1, dhGroup.getBase().toByteArray());\n@@ -106,1 +68,1 @@\n-        System.out.println(DHPrime.length*8 + \"\\t\\t\" + l);\n+        System.out.println(dhGroup.getPrimeBytes().length*8 + \"\\t\\t\" + l);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/DHKeyGenSpeed.java","additions":7,"deletions":45,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -37,0 +38,2 @@\n+import jdk.test.lib.security.DiffieHellmanGroup;\n+import jdk.test.lib.security.SecurityUtils;\n@@ -48,2 +51,3 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"DSA\", SUN);\n-        kpg.initialize(2048);\n+        String kpgAlgorithmDsa = \"DSA\";\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgorithmDsa, SUN);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithmDsa));\n@@ -70,2 +74,3 @@\n-        kpg = KeyPairGenerator.getInstance(\"RSA\", RSA);\n-        kpg.initialize(2048);\n+        String kpgAlgorithmRsa = \"RSA\";\n+        kpg = KeyPairGenerator.getInstance(kpgAlgorithmRsa, RSA);\n+        kpg.initialize(SecurityUtils.getTestKeySize(kpgAlgorithmRsa));\n@@ -92,0 +97,1 @@\n+        DiffieHellmanGroup dhGroup = SecurityUtils.getTestDHGroup();\n@@ -93,1 +99,1 @@\n-        kpg.initialize(new DHParameterSpec(ffhde2048Modulus, ffhde2048Base));\n+        kpg.initialize(new DHParameterSpec(dhGroup.getModulus(), dhGroup.getBase()));\n@@ -200,40 +206,0 @@\n-\n-    \/**\n-     * RFC 7919 - ffdhe2048.\n-     *\/\n-    private static byte[] FFDHE2048PrimeBytes = {\n-            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n-            (byte) 0xAD, (byte) 0xF8, (byte) 0x54, (byte) 0x58, (byte) 0xA2, (byte) 0xBB, (byte) 0x4A, (byte) 0x9A,\n-            (byte) 0xAF, (byte) 0xDC, (byte) 0x56, (byte) 0x20, (byte) 0x27, (byte) 0x3D, (byte) 0x3C, (byte) 0xF1,\n-            (byte) 0xD8, (byte) 0xB9, (byte) 0xC5, (byte) 0x83, (byte) 0xCE, (byte) 0x2D, (byte) 0x36, (byte) 0x95,\n-            (byte) 0xA9, (byte) 0xE1, (byte) 0x36, (byte) 0x41, (byte) 0x14, (byte) 0x64, (byte) 0x33, (byte) 0xFB,\n-            (byte) 0xCC, (byte) 0x93, (byte) 0x9D, (byte) 0xCE, (byte) 0x24, (byte) 0x9B, (byte) 0x3E, (byte) 0xF9,\n-            (byte) 0x7D, (byte) 0x2F, (byte) 0xE3, (byte) 0x63, (byte) 0x63, (byte) 0x0C, (byte) 0x75, (byte) 0xD8,\n-            (byte) 0xF6, (byte) 0x81, (byte) 0xB2, (byte) 0x02, (byte) 0xAE, (byte) 0xC4, (byte) 0x61, (byte) 0x7A,\n-            (byte) 0xD3, (byte) 0xDF, (byte) 0x1E, (byte) 0xD5, (byte) 0xD5, (byte) 0xFD, (byte) 0x65, (byte) 0x61,\n-            (byte) 0x24, (byte) 0x33, (byte) 0xF5, (byte) 0x1F, (byte) 0x5F, (byte) 0x06, (byte) 0x6E, (byte) 0xD0,\n-            (byte) 0x85, (byte) 0x63, (byte) 0x65, (byte) 0x55, (byte) 0x3D, (byte) 0xED, (byte) 0x1A, (byte) 0xF3,\n-            (byte) 0xB5, (byte) 0x57, (byte) 0x13, (byte) 0x5E, (byte) 0x7F, (byte) 0x57, (byte) 0xC9, (byte) 0x35,\n-            (byte) 0x98, (byte) 0x4F, (byte) 0x0C, (byte) 0x70, (byte) 0xE0, (byte) 0xE6, (byte) 0x8B, (byte) 0x77,\n-            (byte) 0xE2, (byte) 0xA6, (byte) 0x89, (byte) 0xDA, (byte) 0xF3, (byte) 0xEF, (byte) 0xE8, (byte) 0x72,\n-            (byte) 0x1D, (byte) 0xF1, (byte) 0x58, (byte) 0xA1, (byte) 0x36, (byte) 0xAD, (byte) 0xE7, (byte) 0x35,\n-            (byte) 0x30, (byte) 0xAC, (byte) 0xCA, (byte) 0x4F, (byte) 0x48, (byte) 0x3A, (byte) 0x79, (byte) 0x7A,\n-            (byte) 0xBC, (byte) 0x0A, (byte) 0xB1, (byte) 0x82, (byte) 0xB3, (byte) 0x24, (byte) 0xFB, (byte) 0x61,\n-            (byte) 0xD1, (byte) 0x08, (byte) 0xA9, (byte) 0x4B, (byte) 0xB2, (byte) 0xC8, (byte) 0xE3, (byte) 0xFB,\n-            (byte) 0xB9, (byte) 0x6A, (byte) 0xDA, (byte) 0xB7, (byte) 0x60, (byte) 0xD7, (byte) 0xF4, (byte) 0x68,\n-            (byte) 0x1D, (byte) 0x4F, (byte) 0x42, (byte) 0xA3, (byte) 0xDE, (byte) 0x39, (byte) 0x4D, (byte) 0xF4,\n-            (byte) 0xAE, (byte) 0x56, (byte) 0xED, (byte) 0xE7, (byte) 0x63, (byte) 0x72, (byte) 0xBB, (byte) 0x19,\n-            (byte) 0x0B, (byte) 0x07, (byte) 0xA7, (byte) 0xC8, (byte) 0xEE, (byte) 0x0A, (byte) 0x6D, (byte) 0x70,\n-            (byte) 0x9E, (byte) 0x02, (byte) 0xFC, (byte) 0xE1, (byte) 0xCD, (byte) 0xF7, (byte) 0xE2, (byte) 0xEC,\n-            (byte) 0xC0, (byte) 0x34, (byte) 0x04, (byte) 0xCD, (byte) 0x28, (byte) 0x34, (byte) 0x2F, (byte) 0x61,\n-            (byte) 0x91, (byte) 0x72, (byte) 0xFE, (byte) 0x9C, (byte) 0xE9, (byte) 0x85, (byte) 0x83, (byte) 0xFF,\n-            (byte) 0x8E, (byte) 0x4F, (byte) 0x12, (byte) 0x32, (byte) 0xEE, (byte) 0xF2, (byte) 0x81, (byte) 0x83,\n-            (byte) 0xC3, (byte) 0xFE, (byte) 0x3B, (byte) 0x1B, (byte) 0x4C, (byte) 0x6F, (byte) 0xAD, (byte) 0x73,\n-            (byte) 0x3B, (byte) 0xB5, (byte) 0xFC, (byte) 0xBC, (byte) 0x2E, (byte) 0xC2, (byte) 0x20, (byte) 0x05,\n-            (byte) 0xC5, (byte) 0x8E, (byte) 0xF1, (byte) 0x83, (byte) 0x7D, (byte) 0x16, (byte) 0x83, (byte) 0xB2,\n-            (byte) 0xC6, (byte) 0xF3, (byte) 0x4A, (byte) 0x26, (byte) 0xC1, (byte) 0xB2, (byte) 0xEF, (byte) 0xFA,\n-            (byte) 0x88, (byte) 0x6B, (byte) 0x42, (byte) 0x38, (byte) 0x61, (byte) 0x28, (byte) 0x5C, (byte) 0x97,\n-            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF\n-    };\n-    private static final BigInteger ffhde2048Modulus = new BigInteger(1, FFDHE2048PrimeBytes);\n-    private static final BigInteger ffhde2048Base = BigInteger.valueOf(2);\n","filename":"test\/jdk\/java\/security\/KeyRep\/Serial.java","additions":11,"deletions":45,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+import jdk.test.lib.security.DiffieHellmanGroup;\n+import jdk.test.lib.security.SecurityUtils;\n@@ -45,14 +47,0 @@\n-    private final static BigInteger p = new BigInteger\n-    (\"3231700607131100730015351347782516336248805713348907517458843413926\" +\n-            \"9806834136210002792056362640164685458556357935330816928829023080\" +\n-            \"5734726252735547424612457410262025279165729728627063003252634282\" +\n-            \"1314576693141422365422094111134862999165747826803423055308634905\" +\n-            \"0635557712219187890332729569696129743856241741236237225197346402\" +\n-            \"6918557977679768230146253979330580152268587307611975324364674758\" +\n-            \"5546071504389684494036613049769781285429595865959756705128385213\" +\n-            \"2784468522925504568272879113720098931873959143374175837826000278\" +\n-            \"0349731985520606075332341226032546840881200311059074842810039949\" +\n-            \"66956119696956248629032338072839127039\");\n-\n-    private final static BigInteger g = new BigInteger(\"2\");\n-\n@@ -103,2 +91,5 @@\n-            DHPrivateKeySpec privSpecA = new DHPrivateKeySpec(xa, p, g);\n-            DHPublicKeySpec pubSpecA = new DHPublicKeySpec(ya, p, g);\n+            DiffieHellmanGroup dhGroup = SecurityUtils.getTestDHGroup();\n+            DHPrivateKeySpec privSpecA = new DHPrivateKeySpec(xa, dhGroup.getModulus(),\n+                    dhGroup.getBase());\n+            DHPublicKeySpec pubSpecA = new DHPublicKeySpec(ya, dhGroup.getModulus(),\n+                    dhGroup.getBase());\n@@ -108,2 +99,4 @@\n-            DHPrivateKeySpec privSpecB = new DHPrivateKeySpec(xb, p, g);\n-            DHPublicKeySpec pubSpecB = new DHPublicKeySpec(yb, p, g);\n+            DHPrivateKeySpec privSpecB = new DHPrivateKeySpec(xb, dhGroup.getModulus(),\n+                    dhGroup.getBase());\n+            DHPublicKeySpec pubSpecB = new DHPublicKeySpec(yb, dhGroup.getModulus(),\n+                    dhGroup.getBase());\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyAgreement\/TestInterop.java","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.security;\n+\n+import java.math.BigInteger;\n+\n+public enum DiffieHellmanGroup {\n+\n+    \/**\n+     * RFC 7919 - ffdhe2048.\n+     *\/\n+    ffdhe2048 (new byte[]{\n+            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+            (byte) 0xAD, (byte) 0xF8, (byte) 0x54, (byte) 0x58, (byte) 0xA2, (byte) 0xBB, (byte) 0x4A, (byte) 0x9A,\n+            (byte) 0xAF, (byte) 0xDC, (byte) 0x56, (byte) 0x20, (byte) 0x27, (byte) 0x3D, (byte) 0x3C, (byte) 0xF1,\n+            (byte) 0xD8, (byte) 0xB9, (byte) 0xC5, (byte) 0x83, (byte) 0xCE, (byte) 0x2D, (byte) 0x36, (byte) 0x95,\n+            (byte) 0xA9, (byte) 0xE1, (byte) 0x36, (byte) 0x41, (byte) 0x14, (byte) 0x64, (byte) 0x33, (byte) 0xFB,\n+            (byte) 0xCC, (byte) 0x93, (byte) 0x9D, (byte) 0xCE, (byte) 0x24, (byte) 0x9B, (byte) 0x3E, (byte) 0xF9,\n+            (byte) 0x7D, (byte) 0x2F, (byte) 0xE3, (byte) 0x63, (byte) 0x63, (byte) 0x0C, (byte) 0x75, (byte) 0xD8,\n+            (byte) 0xF6, (byte) 0x81, (byte) 0xB2, (byte) 0x02, (byte) 0xAE, (byte) 0xC4, (byte) 0x61, (byte) 0x7A,\n+            (byte) 0xD3, (byte) 0xDF, (byte) 0x1E, (byte) 0xD5, (byte) 0xD5, (byte) 0xFD, (byte) 0x65, (byte) 0x61,\n+            (byte) 0x24, (byte) 0x33, (byte) 0xF5, (byte) 0x1F, (byte) 0x5F, (byte) 0x06, (byte) 0x6E, (byte) 0xD0,\n+            (byte) 0x85, (byte) 0x63, (byte) 0x65, (byte) 0x55, (byte) 0x3D, (byte) 0xED, (byte) 0x1A, (byte) 0xF3,\n+            (byte) 0xB5, (byte) 0x57, (byte) 0x13, (byte) 0x5E, (byte) 0x7F, (byte) 0x57, (byte) 0xC9, (byte) 0x35,\n+            (byte) 0x98, (byte) 0x4F, (byte) 0x0C, (byte) 0x70, (byte) 0xE0, (byte) 0xE6, (byte) 0x8B, (byte) 0x77,\n+            (byte) 0xE2, (byte) 0xA6, (byte) 0x89, (byte) 0xDA, (byte) 0xF3, (byte) 0xEF, (byte) 0xE8, (byte) 0x72,\n+            (byte) 0x1D, (byte) 0xF1, (byte) 0x58, (byte) 0xA1, (byte) 0x36, (byte) 0xAD, (byte) 0xE7, (byte) 0x35,\n+            (byte) 0x30, (byte) 0xAC, (byte) 0xCA, (byte) 0x4F, (byte) 0x48, (byte) 0x3A, (byte) 0x79, (byte) 0x7A,\n+            (byte) 0xBC, (byte) 0x0A, (byte) 0xB1, (byte) 0x82, (byte) 0xB3, (byte) 0x24, (byte) 0xFB, (byte) 0x61,\n+            (byte) 0xD1, (byte) 0x08, (byte) 0xA9, (byte) 0x4B, (byte) 0xB2, (byte) 0xC8, (byte) 0xE3, (byte) 0xFB,\n+            (byte) 0xB9, (byte) 0x6A, (byte) 0xDA, (byte) 0xB7, (byte) 0x60, (byte) 0xD7, (byte) 0xF4, (byte) 0x68,\n+            (byte) 0x1D, (byte) 0x4F, (byte) 0x42, (byte) 0xA3, (byte) 0xDE, (byte) 0x39, (byte) 0x4D, (byte) 0xF4,\n+            (byte) 0xAE, (byte) 0x56, (byte) 0xED, (byte) 0xE7, (byte) 0x63, (byte) 0x72, (byte) 0xBB, (byte) 0x19,\n+            (byte) 0x0B, (byte) 0x07, (byte) 0xA7, (byte) 0xC8, (byte) 0xEE, (byte) 0x0A, (byte) 0x6D, (byte) 0x70,\n+            (byte) 0x9E, (byte) 0x02, (byte) 0xFC, (byte) 0xE1, (byte) 0xCD, (byte) 0xF7, (byte) 0xE2, (byte) 0xEC,\n+            (byte) 0xC0, (byte) 0x34, (byte) 0x04, (byte) 0xCD, (byte) 0x28, (byte) 0x34, (byte) 0x2F, (byte) 0x61,\n+            (byte) 0x91, (byte) 0x72, (byte) 0xFE, (byte) 0x9C, (byte) 0xE9, (byte) 0x85, (byte) 0x83, (byte) 0xFF,\n+            (byte) 0x8E, (byte) 0x4F, (byte) 0x12, (byte) 0x32, (byte) 0xEE, (byte) 0xF2, (byte) 0x81, (byte) 0x83,\n+            (byte) 0xC3, (byte) 0xFE, (byte) 0x3B, (byte) 0x1B, (byte) 0x4C, (byte) 0x6F, (byte) 0xAD, (byte) 0x73,\n+            (byte) 0x3B, (byte) 0xB5, (byte) 0xFC, (byte) 0xBC, (byte) 0x2E, (byte) 0xC2, (byte) 0x20, (byte) 0x05,\n+            (byte) 0xC5, (byte) 0x8E, (byte) 0xF1, (byte) 0x83, (byte) 0x7D, (byte) 0x16, (byte) 0x83, (byte) 0xB2,\n+            (byte) 0xC6, (byte) 0xF3, (byte) 0x4A, (byte) 0x26, (byte) 0xC1, (byte) 0xB2, (byte) 0xEF, (byte) 0xFA,\n+            (byte) 0x88, (byte) 0x6B, (byte) 0x42, (byte) 0x38, (byte) 0x61, (byte) 0x28, (byte) 0x5C, (byte) 0x97,\n+            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF},\n+            1, 2);\n+\n+\n+    public byte[] getPrimeBytes() {\n+        return primeBytes;\n+    }\n+\n+    private final byte[] primeBytes;\n+\n+    public BigInteger getModulus() {\n+        return modulus;\n+    }\n+\n+    private final BigInteger modulus;\n+\n+    public BigInteger getBase() {\n+        return base;\n+    }\n+\n+    private final BigInteger base;\n+\n+    DiffieHellmanGroup(byte[] primeBytes, int signum, int base) {\n+        this.primeBytes = primeBytes;\n+        this.modulus = new BigInteger(signum, primeBytes);\n+        this.base = BigInteger.valueOf(base);\n+    }\n+\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/security\/DiffieHellmanGroup.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.test.lib.security.DiffieHellmanGroup;\n@@ -110,0 +111,19 @@\n+    \/**\n+     * Returns a strong DH predefined group for tests\n+     *\/\n+    public static DiffieHellmanGroup getTestDHGroup() {\n+        return getTestDHGroup(2048);\n+    }\n+\n+    \/**\n+     * Returns a strong DH predefined group for tests, depending on the specified prime size\n+     *\/\n+    public static DiffieHellmanGroup getTestDHGroup(int primeSize) {\n+        DiffieHellmanGroup diffieHellmanGroup;\n+        switch (primeSize) {\n+            case 2048 -> diffieHellmanGroup = DiffieHellmanGroup.ffdhe2048;\n+            default -> throw new RuntimeException(\"Test DH group not defined for \" + primeSize);\n+        }\n+        return diffieHellmanGroup;\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/security\/SecurityUtils.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}