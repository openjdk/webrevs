{"files":[{"patch":"@@ -47,0 +47,1 @@\n+#include \"prims\/jvmtiEnvBase.hpp\"\n@@ -1644,0 +1645,4 @@\n+  static bool is_vthread_mounted(oop vt) {\n+    return JvmtiEnvBase::get_JavaThread_or_null(vt) != nullptr;\n+  }\n+\n@@ -1921,1 +1926,2 @@\n-    if (java_lang_VirtualThread::is_instance(o) && ThreadDumper::should_dump_vthread(o)) {\n+    if (java_lang_VirtualThread::is_instance(o)\n+        && ThreadDumper::should_dump_vthread(o) && !ThreadDumper::is_vthread_mounted(o)) {\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.HashSet;\n@@ -30,0 +31,1 @@\n+import java.util.Set;\n@@ -226,0 +228,3 @@\n+            \/\/ And detect thread object duplicates.\n+            Set<Long> uniqueThreads = new HashSet<>();\n+\n@@ -228,0 +233,2 @@\n+                JavaHeapObject threadObj = snapshot.findThing(thread.getId());\n+                JavaClass threadClass = threadObj.getClazz();\n@@ -230,1 +237,7 @@\n-                log(\"thread \" + thread.getIdString() + \", \" + frames.length + \" frames\");\n+                log(\"thread \" + thread.getIdString() + \" (\" + threadClass.getName() + \"), \" + frames.length + \" frames\");\n+\n+                if (uniqueThreads.contains(thread.getId())) {\n+                    log(\" - ERROR: duplicate\");\n+                } else {\n+                    uniqueThreads.add(thread.getId());\n+                }\n@@ -253,0 +266,4 @@\n+            if (threads.size() != uniqueThreads.size()) {\n+                throw new RuntimeException(\"Thread duplicates detected (\" + (threads.size() - uniqueThreads.size()) + \")\");\n+            }\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/HeapDump\/VThreadInHeapDump.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"}]}