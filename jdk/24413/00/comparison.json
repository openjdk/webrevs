{"files":[{"patch":"@@ -30,1 +30,1 @@\n-void BasicLock::print_on(outputStream* st, oop owner) const {\n+void BasicLock::print_on(outputStream* st, oop owner) {\n","filename":"src\/hotspot\/share\/runtime\/basicLock.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,0 +53,2 @@\n+  BasicLock() : _metadata(0) {}\n+\n@@ -62,1 +64,1 @@\n-  inline ObjectMonitor* object_monitor_cache() const;\n+  inline ObjectMonitor* object_monitor_cache();\n@@ -67,1 +69,1 @@\n-  void print_on(outputStream* st, oop owner) const;\n+  void print_on(outputStream* st, oop owner);\n","filename":"src\/hotspot\/share\/runtime\/basicLock.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/objectMonitor.inline.hpp\"\n@@ -40,1 +41,1 @@\n-inline ObjectMonitor* BasicLock::object_monitor_cache() const {\n+inline ObjectMonitor* BasicLock::object_monitor_cache() {\n@@ -43,1 +44,6 @@\n-  return reinterpret_cast<ObjectMonitor*>(get_metadata());\n+  ObjectMonitor* monitor = reinterpret_cast<ObjectMonitor*>(get_metadata());\n+  if (monitor != nullptr && monitor->is_being_async_deflated()) {\n+    clear_object_monitor_cache();\n+    return nullptr;\n+  }\n+  return monitor;\n","filename":"src\/hotspot\/share\/runtime\/basicLock.inline.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1670,0 +1670,3 @@\n+            if (UseObjectMonitorTable) {\n+              lock->clear_object_monitor_cache();\n+            }\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -636,1 +636,1 @@\n-      monitor = inflate_and_enter(obj(), ObjectSynchronizer::inflate_cause_monitor_enter, locking_thread, current);\n+      monitor = inflate_and_enter(obj(), lock, ObjectSynchronizer::inflate_cause_monitor_enter, locking_thread, current);\n@@ -692,1 +692,1 @@\n-    ObjectMonitor* monitor = inflate_and_enter(obj(), ObjectSynchronizer::inflate_cause_monitor_enter, current, current);\n+    ObjectMonitor* monitor = inflate_and_enter(obj(), lock, ObjectSynchronizer::inflate_cause_monitor_enter, current, current);\n@@ -706,1 +706,1 @@\n-void LightweightSynchronizer::exit(oop object, JavaThread* current) {\n+void LightweightSynchronizer::exit(oop object, BasicLock* lock, JavaThread* current) {\n@@ -741,1 +741,12 @@\n-  ObjectMonitor* monitor = ObjectSynchronizer::read_monitor(current, object, mark);\n+  ObjectMonitor* monitor;\n+  if (UseObjectMonitorTable) {\n+    monitor = lock->object_monitor_cache();\n+    if (monitor == nullptr) {\n+      monitor = current->om_get_from_monitor_cache(object);\n+      if (monitor == nullptr) {\n+        monitor = get_monitor_from_table(current, object);\n+      }\n+    }\n+  } else {\n+    monitor = ObjectSynchronizer::read_monitor(mark);\n+  }\n@@ -980,1 +991,1 @@\n-ObjectMonitor* LightweightSynchronizer::inflate_and_enter(oop object, ObjectSynchronizer::InflateCause cause, JavaThread* locking_thread, JavaThread* current) {\n+ObjectMonitor* LightweightSynchronizer::inflate_and_enter(oop object, BasicLock* lock, ObjectSynchronizer::InflateCause cause, JavaThread* locking_thread, JavaThread* current) {\n@@ -1006,3 +1017,0 @@\n-  \/\/ Lightweight monitors require that hash codes are installed first\n-  ObjectSynchronizer::FastHashCode(locking_thread, object);\n-\n@@ -1013,1 +1021,4 @@\n-    monitor = current->om_get_from_monitor_cache(object);\n+    monitor = lock->object_monitor_cache();\n+    if (monitor == nullptr) {\n+      monitor = current->om_get_from_monitor_cache(object);\n+    }\n@@ -1018,0 +1029,2 @@\n+    \/\/ Lightweight monitors require that hash codes are installed first\n+    ObjectSynchronizer::FastHashCode(locking_thread, object);\n@@ -1165,3 +1178,0 @@\n-  \/\/ If quick_enter succeeds with entering, the cache should be in a valid initialized state.\n-  CacheSetter cache_setter(current, lock);\n-\n@@ -1194,2 +1204,11 @@\n-    ObjectMonitor* const monitor = UseObjectMonitorTable ? current->om_get_from_monitor_cache(obj) :\n-                                                           ObjectSynchronizer::read_monitor(mark);\n+    ObjectMonitor* monitor;\n+    if (UseObjectMonitorTable) {\n+      \/\/ C2 fast-path may have put the monitor in the cache in the BasicLock.\n+      monitor = lock->object_monitor_cache();\n+      if (monitor == nullptr) {\n+        \/\/ Otherwise look up the monitor in the thread's OMCache.\n+        monitor = current->om_get_from_monitor_cache(obj);\n+      }\n+    } else {\n+      monitor = ObjectSynchronizer::read_monitor(mark);\n+    }\n@@ -1202,3 +1221,5 @@\n-    if (monitor->try_enter(current)) {\n-      \/\/ ObjectMonitor enter successful.\n-      cache_setter.set_monitor(monitor);\n+    if (UseObjectMonitorTable) {\n+      lock->set_object_monitor_cache(monitor);\n+    }\n+\n+    if (monitor->spin_enter(current)) {\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":38,"deletions":17,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  static void exit(oop object, JavaThread* current);\n+  static void exit(oop object, BasicLock* lock, JavaThread* current);\n@@ -69,1 +69,1 @@\n-  static ObjectMonitor* inflate_and_enter(oop object, ObjectSynchronizer::InflateCause cause, JavaThread* locking_thread, JavaThread* current);\n+  static ObjectMonitor* inflate_and_enter(oop object, BasicLock* lock, ObjectSynchronizer::InflateCause cause, JavaThread* locking_thread, JavaThread* current);\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -151,0 +151,1 @@\n+  friend class LightweightSynchronizer;\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -681,1 +681,2 @@\n-      entered = LightweightSynchronizer::inflate_and_enter(obj(), inflate_cause_jni_enter, current, current) != nullptr;\n+      BasicLock lock;\n+      entered = LightweightSynchronizer::inflate_and_enter(obj(), &lock, inflate_cause_jni_enter, current, current) != nullptr;\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    LightweightSynchronizer::exit(object, current);\n+    LightweightSynchronizer::exit(object, lock, current);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}