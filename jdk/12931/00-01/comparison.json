{"files":[{"patch":"@@ -54,2 +54,2 @@\n-    SOURCE_FILES := $(TOPDIR)\/src\/java.base\/share\/classes\/jdk\/internal\/misc\/OperatingSystemProps.java.template, \\\n-    OUTPUT_FILE := $(SUPPORT_OUTPUTDIR)\/gensrc\/java.base\/jdk\/internal\/misc\/OperatingSystemProps.java, \\\n+    SOURCE_FILES := $(TOPDIR)\/src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystemProps.java.template, \\\n+    OUTPUT_FILE := $(SUPPORT_OUTPUTDIR)\/gensrc\/java.base\/jdk\/internal\/util\/OperatingSystemProps.java, \\\n","filename":"make\/modules\/java.base\/gensrc\/GensrcMisc.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.misc.OperatingSystem;\n+import jdk.internal.util.OperatingSystem;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.misc.OperatingSystem;\n@@ -67,1 +66,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.util.OperatingSystem;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.misc.OperatingSystem;\n+import jdk.internal.util.OperatingSystem;\n@@ -57,1 +57,1 @@\n-            if (OperatingSystem.isMac()) {\n+            if (OperatingSystem.isMacOS()) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,148 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.misc;\n-\n-import jdk.internal.util.StaticProperty;\n-import jdk.internal.vm.annotation.ForceInline;\n-\n-import java.util.Objects;\n-\n-\/**\n- * Enumeration of operating system types and testing for the current OS.\n- * The enumeration can be used to dispatch to OS specific code or values.\n- * Checking if a specific operating system is current uses a simple\n- * static method for each operating system.\n- * <p>\n- * For example,\n- * {@snippet lang = \"java\":\n- * if (OperatingSystem.isWindows()) {\n- *     \/\/ Windows only code.\n- * } else if (OperatingSystem.isLinux()) {\n- *     \/\/ Linux only code\n- * }\n- *}\n- *\n- * Alternatively, compare with the {@linkplain #current() current} operating system.\n- * For example,\n- * {@snippet lang = \"java\":\n- * if (OperatingSystem.current() == Windows) {\n- *     \/\/ Windows only code.\n- * }\n- *}\n- * Dispatch based on the current operating system or choose a value.\n- * For example,\n- * {@snippet lang = \"java\":\n- * int port() {\n- *      return switch(OperatingSystem.current()) {\n- *          case Linux->32768;\n- *          case AIX->32768;\n- *          case Mac->49152;\n- *          case Windows->49152;\n- *      };\n- * }\n- * }\n- *\/\n-public enum OperatingSystem {\n-\n-    \/**\n-     * The Linux Operating system.\n-     *\/\n-    Linux(\"Linux\"),\n-    \/**\n-     * The Mac OS X Operating system.\n-     *\/\n-    Mac(\"Mac OS X\"),\n-    \/**\n-     * The Windows Operating system.\n-     *\/\n-    Windows(\"Windows\"),\n-    \/**\n-     * The AIX Operating system.\n-     *\/\n-    AIX(\"AIX\"),\n-    ;\n-\n-    \/\/ Cache a copy of the array for lightweight indexing\n-    private static final OperatingSystem[] osValues = OperatingSystem.values();\n-\n-    \/**\n-     * The operating system name.\n-     *\/\n-    private final String name;\n-\n-    \/**\n-     * {@return {@code true} if built for the Linux operating system}\n-     *\/\n-    @ForceInline\n-    public static boolean isLinux() {\n-        return OperatingSystemProps.TARGET_OS_IS_LINUX;\n-    }\n-\n-    \/**\n-     * {@return {@code true} if built for the Mac OS X operating system}\n-     *\/\n-    @ForceInline\n-    public static boolean isMac() {\n-        return OperatingSystemProps.TARGET_OS_IS_MACOSX;\n-    }\n-\n-    \/**\n-     * {@return {@code true} if built for the Windows operating system}\n-     *\/\n-    @ForceInline\n-    public static boolean isWindows() {\n-        return OperatingSystemProps.TARGET_OS_IS_WINDOWS;\n-    }\n-\n-    \/**\n-     * {@return {@code true} if built for the AIX operating system}\n-     *\/\n-    @ForceInline\n-    public static boolean isAix() {\n-        return OperatingSystemProps.TARGET_OS_IS_AIX;\n-    }\n-\n-    \/**\n-     * Construct an operating system enum with the given name.\n-     *\n-     * @param name       the name of the operating system\n-     *\/\n-    OperatingSystem(String name) {\n-        this.name = name;\n-    }\n-\n-    \/**\n-     * {@return the current operating system}\n-     *\/\n-    public static OperatingSystem current() {\n-        return osValues[OperatingSystemProps.TARGET_OS_ORDINAL];\n-    }\n-\n-    \/**\n-     * {@return the name of the operating system}\n-     *\/\n-    public String getName() {\n-        return name;\n-    }\n-\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/OperatingSystem.java","additions":0,"deletions":148,"binary":false,"changes":148,"status":"deleted"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.util;\n+\n+import jdk.internal.util.OperatingSystemProps;\n+import jdk.internal.vm.annotation.ForceInline;\n+\n+\/**\n+ * Enumeration of operating system types and testing for the current OS.\n+ * The enumeration can be used to dispatch to OS specific code or values.\n+ * Checking if a specific operating system is current uses a simple\n+ * static method for each operating system.\n+ * <p>\n+ * For example,\n+ * {@snippet lang = \"java\":\n+ * if (OperatingSystem.isWindows()) {\n+ *     \/\/ Windows only code.\n+ * } else if (OperatingSystem.isLinux()) {\n+ *     \/\/ Linux only code\n+ * }\n+ *}\n+ *\n+ * Alternatively, compare with the {@linkplain #current() current} operating system.\n+ * For example,\n+ * {@snippet lang = \"java\":\n+ * if (OperatingSystem.current() == OperatingSystem.Windows) {\n+ *     \/\/ Windows only code.\n+ * }\n+ *}\n+ * Dispatch based on the current operating system or choose a value.\n+ * For example,\n+ * {@snippet lang = \"java\":\n+ * int port() {\n+ *      return switch(OperatingSystem.current()) {\n+ *          case Linux->32768;\n+ *          case AIX->32768;\n+ *          case MacOS->49152;\n+ *          case Windows->49152;\n+ *      };\n+ * }\n+ *}\n+ *\/\n+public enum OperatingSystem {\n+\n+    \/**\n+     * The Linux Operating system.\n+     *\/\n+    Linux,\n+    \/**\n+     * The Mac OS X Operating system.\n+     *\/\n+    MacOS,\n+    \/**\n+     * The Windows Operating system.\n+     *\/\n+    Windows,\n+    \/**\n+     * The AIX Operating system.\n+     *\/\n+    AIX,\n+    ;\n+\n+    \/\/ Cache a copy of the array for lightweight indexing\n+    private static final OperatingSystem[] osValues = OperatingSystem.values();\n+\n+    \/**\n+     * {@return {@code true} if built for the Linux operating system}\n+     *\/\n+    @ForceInline\n+    public static boolean isLinux() {\n+        return OperatingSystemProps.TARGET_OS_IS_LINUX;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if built for the Mac OS X operating system}\n+     *\/\n+    @ForceInline\n+    public static boolean isMacOS() {\n+        return OperatingSystemProps.TARGET_OS_IS_MACOSX;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if built for the Windows operating system}\n+     *\/\n+    @ForceInline\n+    public static boolean isWindows() {\n+        return OperatingSystemProps.TARGET_OS_IS_WINDOWS;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if built for the AIX operating system}\n+     *\/\n+    @ForceInline\n+    public static boolean isAix() {\n+        return OperatingSystemProps.TARGET_OS_IS_AIX;\n+    }\n+\n+    \/**\n+     * {@return the current operating system}\n+     *\/\n+    public static OperatingSystem current() {\n+        return osValues[OperatingSystemProps.CURRENT_OS_ORDINAL];\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystem.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -23,1 +23,1 @@\n-package jdk.internal.misc;\n+package jdk.internal.util;\n@@ -39,1 +39,1 @@\n-    static final int TARGET_OS_ORDINAL = TARGET_OS_@@OPENJDK_TARGET_OS@@;\n+    static final int CURRENT_OS_ORDINAL = TARGET_OS_@@OPENJDK_TARGET_OS@@;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystemProps.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/OperatingSystemProps.java.template","status":"renamed"},{"patch":"@@ -261,1 +261,1 @@\n-      * {@eturn the {@code os.arch} system property}\n+      * {@return the {@code os.arch} system property}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-import jdk.internal.misc.OperatingSystem;\n+import jdk.internal.util.OperatingSystem;\n@@ -536,1 +536,1 @@\n-        if (OperatingSystem.isMac()) {\n+        if (OperatingSystem.isMacOS()) {\n@@ -749,1 +749,1 @@\n-            if (c == null && OperatingSystem.isMac()\n+            if (c == null && OperatingSystem.isMacOS()\n@@ -793,1 +793,1 @@\n-                if (OperatingSystem.isMac()\n+                if (OperatingSystem.isMacOS()\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.internal.misc.OperatingSystem;\n+import jdk.internal.util.OperatingSystem;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/sdp\/SdpSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.misc.OperatingSystem;\n+import jdk.internal.util.OperatingSystem;\n@@ -106,1 +106,1 @@\n-            LaunchMechanism lm = LaunchMechanism.valueOf(s.toUpperCase(Locale.ENGLISH));\n+            LaunchMechanism lm = LaunchMechanism.valueOf(s.toUpperCase(Locale.ROOT));\n@@ -111,1 +111,1 @@\n-                case Mac:\n+                case MacOS:\n@@ -332,1 +332,1 @@\n-            case Mac:\n+            case MacOS:\n@@ -463,1 +463,1 @@\n-            case Mac:\n+            case MacOS:\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.misc.OperatingSystem;\n+import jdk.internal.util.OperatingSystem;\n@@ -50,1 +50,1 @@\n-            case Mac:\n+            case MacOS:\n","filename":"src\/java.base\/unix\/classes\/sun\/net\/PortConfig.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/TestUnsupportedLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-import java.util.Locale;\n-import java.util.stream.Stream;\n-\n-import jdk.internal.misc.OperatingSystem;\n-\n-import static jdk.internal.misc.OperatingSystem.AIX;\n-import static jdk.internal.misc.OperatingSystem.Linux;\n-import static jdk.internal.misc.OperatingSystem.Mac;\n-import static jdk.internal.misc.OperatingSystem.Windows;\n-\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-\/**\n- * @test\n- * @summary test OperatingSystem enum\n- * @modules java.base\/jdk.internal.misc\n- * @run junit OSTest\n- *\/\n-\n-public class OSTest {\n-    \/**\n-     * Test consistency of System property \"os.name\" with OperatingSystem.current().\n-     *\/\n-    @Test\n-    public void os_nameVsCurrent() {\n-        String osName = System.getProperty(\"os.name\").substring(0, 3).toLowerCase(Locale.ROOT);\n-        OperatingSystem os = switch (osName) {\n-            case \"win\" -> Windows;\n-            case \"lin\" -> Linux;\n-            case \"mac\" -> Mac;\n-            case \"aix\" -> AIX;\n-            default    -> fail(\"Unknown os.name: \" + osName);\n-        };\n-        assertEquals(OperatingSystem.current(), os, \"mismatch in OperatingSystem.current vs \" + osName);\n-    }\n-\n-    \/**\n-     * Test various OperatingSystem enum values vs boolean isXXX() methods.\n-     * @return a stream of arguments for parameterized test\n-     *\/\n-    private static Stream<Arguments> osParams() {\n-        return Stream.of(\n-                Arguments.of(Linux, OperatingSystem.isLinux()),\n-                Arguments.of(Windows, OperatingSystem.isWindows()),\n-                Arguments.of(Mac, OperatingSystem.isMac()),\n-                Arguments.of(AIX, OperatingSystem.isAix())\n-        );\n-    }\n-\n-    @ParameterizedTest\n-    @MethodSource(\"osParams\")\n-    public void isXXX(OperatingSystem os, boolean isXXX) {\n-        OperatingSystem current = OperatingSystem.current();\n-        assertEquals(os == current, isXXX,\n-                \"Mismatch \" + os + \" == \" + current + \" vs is\" + os);\n-    }\n- }\n","filename":"test\/jdk\/jdk\/internal\/misc\/OSTest.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import jdk.internal.util.OperatingSystem;\n+\n+import static jdk.internal.util.OperatingSystem.AIX;\n+import static jdk.internal.util.OperatingSystem.Linux;\n+import static jdk.internal.util.OperatingSystem.MacOS;\n+import static jdk.internal.util.OperatingSystem.Windows;\n+\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/**\n+ * @test\n+ * @summary test OperatingSystem enum\n+ * @modules java.base\/jdk.internal.util\n+ * @run junit OSTest\n+ *\/\n+\n+public class OSTest {\n+    \/**\n+     * Test consistency of System property \"os.name\" with OperatingSystem.current().\n+     *\/\n+    @Test\n+    public void os_nameVsCurrent() {\n+        String osName = System.getProperty(\"os.name\").substring(0, 3).toLowerCase(Locale.ROOT);\n+        OperatingSystem os = switch (osName) {\n+            case \"win\" -> Windows;\n+            case \"lin\" -> Linux;\n+            case \"mac\" -> MacOS;\n+            case \"aix\" -> AIX;\n+            default    -> fail(\"Unknown os.name: \" + osName);\n+        };\n+        assertEquals(OperatingSystem.current(), os, \"mismatch in OperatingSystem.current vs \" + osName);\n+    }\n+\n+    \/**\n+     * Test various OperatingSystem enum values vs boolean isXXX() methods.\n+     * @return a stream of arguments for parameterized test\n+     *\/\n+    private static Stream<Arguments> osParams() {\n+        return Stream.of(\n+                Arguments.of(Linux, OperatingSystem.isLinux()),\n+                Arguments.of(Windows, OperatingSystem.isWindows()),\n+                Arguments.of(MacOS, OperatingSystem.isMacOS()),\n+                Arguments.of(AIX, OperatingSystem.isAix())\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"osParams\")\n+    public void isXXX(OperatingSystem os, boolean isXXX) {\n+        OperatingSystem current = OperatingSystem.current();\n+        assertEquals(os == current, isXXX,\n+                \"Mismatch \" + os + \" == \" + current + \" vs is\" + os);\n+    }\n+ }\n","filename":"test\/jdk\/jdk\/internal\/util\/OSTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}