{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,6 @@\n-TARGETS += $(BUILD_VERSION_JAVA)\n+$(eval $(call SetupTextFileProcessing, BUILD_PLATFORMPROPERTIES_JAVA, \\\n+    SOURCE_FILES := $(TOPDIR)\/src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystemProps.java.template, \\\n+    OUTPUT_FILE := $(SUPPORT_OUTPUTDIR)\/gensrc\/java.base\/jdk\/internal\/util\/OperatingSystemProps.java, \\\n+    REPLACEMENTS := \\\n+        @@OPENJDK_TARGET_OS@@ => $(OPENJDK_TARGET_OS), \\\n+))\n@@ -55,0 +60,1 @@\n+TARGETS += $(BUILD_VERSION_JAVA) $(BUILD_PLATFORMPROPERTIES_JAVA)\n","filename":"make\/modules\/java.base\/gensrc\/GensrcMisc.gmk","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -38,1 +39,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -472,3 +472,2 @@\n-        private static final File NULL_FILE = new File(\n-                (GetPropertyAction.privilegedGetProperty(\"os.name\")\n-                        .startsWith(\"Windows\") ? \"NUL\" : \"\/dev\/null\")\n+        private static final File NULL_FILE =\n+                new File((OperatingSystem.isWindows() ? \"NUL\" : \"\/dev\/null\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.util.OperatingSystem;\n@@ -1088,2 +1088,0 @@\n-    private static boolean isWindows;\n-\n@@ -1136,1 +1134,0 @@\n-        isWindows = VM.getSavedProperty(\"os.name\").contains(\"Windows\");\n@@ -1324,1 +1321,1 @@\n-                if (isWindows) {\n+                if (OperatingSystem.isWindows()) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import jdk.internal.util.OperatingSystem;\n+import jdk.internal.util.StaticProperty;\n+\n@@ -29,1 +32,0 @@\n-import static sun.security.action.GetPropertyAction.privilegedGetProperty;\n@@ -41,1 +43,0 @@\n-    private static final String OS;\n@@ -45,2 +46,1 @@\n-        ARCH = privilegedGetProperty(\"os.arch\");\n-        OS = privilegedGetProperty(\"os.name\");\n+        ARCH = StaticProperty.osArch();\n@@ -51,1 +51,1 @@\n-            if (OS.startsWith(\"Windows\")) {\n+            if (OperatingSystem.isWindows()) {\n@@ -57,1 +57,1 @@\n-            if (OS.startsWith(\"Mac\")) {\n+            if (OperatingSystem.isMacOS()) {\n@@ -59,1 +59,1 @@\n-            } else if (OS.startsWith(\"Windows\")) {\n+            } else if (OperatingSystem.isWindows()) {\n@@ -66,1 +66,1 @@\n-            if (OS.startsWith(\"Linux\")) {\n+            if (OperatingSystem.isLinux()) {\n@@ -81,1 +81,2 @@\n-                    \"Unsupported os, arch, or address size: \" + OS + \", \" + ARCH + \", \" + ADDRESS_SIZE);\n+                    \"Unsupported os, arch, or address size: \" + OperatingSystem.current() +\n+                            \", \" + ARCH + \", \" + ADDRESS_SIZE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.util;\n+\n+import jdk.internal.util.OperatingSystemProps;\n+import jdk.internal.vm.annotation.ForceInline;\n+\n+\/**\n+ * Enumeration of operating system types and testing for the current OS.\n+ * The enumeration can be used to dispatch to OS specific code or values.\n+ * Checking if a specific operating system is current uses a simple\n+ * static method for each operating system.\n+ * <p>\n+ * For example,\n+ * {@snippet lang = \"java\":\n+ * if (OperatingSystem.isWindows()) {\n+ *     \/\/ Windows only code.\n+ * } else if (OperatingSystem.isLinux()) {\n+ *     \/\/ Linux only code\n+ * }\n+ *}\n+ *\n+ * Alternatively, compare with the {@linkplain #current() current} operating system.\n+ * For example,\n+ * {@snippet lang = \"java\":\n+ * if (OperatingSystem.current() == OperatingSystem.WINDOWS) {\n+ *     \/\/ Windows only code.\n+ * }\n+ *}\n+ * Dispatch based on the current operating system or choose a value.\n+ * For example,\n+ * {@snippet lang = \"java\":\n+ * int port() {\n+ *      return switch(OperatingSystem.current()) {\n+ *          case LINUX->32768;\n+ *          case AIX->32768;\n+ *          case MACOS->49152;\n+ *          case WINDOWS->49152;\n+ *      };\n+ * }\n+ *}\n+ *\/\n+public enum OperatingSystem {\n+\n+    \/**\n+     * Operating systems based on the Linux kernel.\n+     *\/\n+    LINUX,\n+    \/**\n+     * The Mac OS X Operating system.\n+     *\/\n+    MACOS,\n+    \/**\n+     * The Windows Operating system.\n+     *\/\n+    WINDOWS,\n+    \/**\n+     * The AIX Operating system.\n+     *\/\n+    AIX,\n+    ;\n+\n+    \/\/ Cache a copy of the array for lightweight indexing\n+    private static final OperatingSystem[] osValues = OperatingSystem.values();\n+\n+    \/**\n+     * {@return {@code true} if built for the Linux operating system}\n+     *\/\n+    @ForceInline\n+    public static boolean isLinux() {\n+        return OperatingSystemProps.TARGET_OS_IS_LINUX;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if built for the Mac OS X operating system}\n+     *\/\n+    @ForceInline\n+    public static boolean isMacOS() {\n+        return OperatingSystemProps.TARGET_OS_IS_MACOSX;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if built for the Windows operating system}\n+     *\/\n+    @ForceInline\n+    public static boolean isWindows() {\n+        return OperatingSystemProps.TARGET_OS_IS_WINDOWS;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if built for the AIX operating system}\n+     *\/\n+    @ForceInline\n+    public static boolean isAix() {\n+        return OperatingSystemProps.TARGET_OS_IS_AIX;\n+    }\n+\n+    \/**\n+     * {@return the current operating system}\n+     *\/\n+    public static OperatingSystem current() {\n+        return osValues[OperatingSystemProps.CURRENT_OS_ORDINAL];\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystem.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.util;\n+\n+\/**\n+ * The corresponding source file is generated by GensrcMisc.gmk for java.base.\n+ * @see OperatingSystem\n+ *\/\n+class OperatingSystemProps {\n+\n+    \/\/ Unique integers named to match the build system naming of the build target\n+    \/\/ The values must match the ordinals of the respective enum\n+    private static final int TARGET_OS_linux   = 0;\n+    private static final int TARGET_OS_macosx  = 1;\n+    private static final int TARGET_OS_windows = 2;\n+    private static final int TARGET_OS_aix     = 3;\n+\n+    \/\/ Index\/ordinal of the current OperatingSystem enum as substituted by the build\n+    static final int CURRENT_OS_ORDINAL = TARGET_OS_@@OPENJDK_TARGET_OS@@;\n+\n+    \/\/ Precomputed booleans for each Operating System\n+    static final boolean TARGET_OS_IS_LINUX   = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_linux;\n+    static final boolean TARGET_OS_IS_MACOSX  = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_macosx;\n+    static final boolean TARGET_OS_IS_WINDOWS = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_windows;\n+    static final boolean TARGET_OS_IS_AIX     = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_aix;\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystemProps.java.template","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -57,0 +57,2 @@\n+    private static final String OS_NAME;\n+    private static final String OS_ARCH;\n@@ -76,0 +78,2 @@\n+        OS_NAME = getProperty(props, \"os.name\");\n+        OS_ARCH = getProperty(props, \"os.arch\");\n@@ -246,0 +250,18 @@\n+\n+     \/**\n+      * {@return the {@code os.name} system property}\n+      * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n+      * in this method. This property is not considered security sensitive.<\/strong>\n+      *\/\n+     public static String osName() {\n+         return OS_NAME;\n+     }\n+\n+     \/**\n+      * {@return the {@code os.arch} system property}\n+      * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n+      * in this method. This property is not considered security sensitive.<\/strong>\n+      *\/\n+     public static String osArch() {\n+         return OS_ARCH;\n+     }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -171,1 +172,1 @@\n-                if (System.getProperty(\"os.name\").contains(\"Linux\")) {\n+                if (OperatingSystem.isLinux()) {\n@@ -179,1 +180,1 @@\n-                if (System.getProperty(\"os.name\").contains(\"Linux\")) {\n+                if (OperatingSystem.isLinux()) {\n@@ -535,1 +536,1 @@\n-        if (System.getProperty(\"os.name\").contains(\"OS X\")) {\n+        if (OperatingSystem.isMacOS()) {\n@@ -748,1 +749,1 @@\n-            if (c == null && System.getProperty(\"os.name\", \"\").contains(\"OS X\")\n+            if (c == null && OperatingSystem.isMacOS()\n@@ -792,1 +793,1 @@\n-                if (System.getProperty(\"os.name\", \"\").contains(\"OS X\")\n+                if (OperatingSystem.isMacOS()\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-import sun.security.action.GetPropertyAction;\n+import jdk.internal.util.OperatingSystem;\n@@ -42,2 +42,1 @@\n-    private static final String os = GetPropertyAction.privilegedGetProperty(\"os.name\");\n-    private static final boolean isSupported = os.equals(\"Linux\");\n+    private static final boolean isSupported = OperatingSystem.isLinux();\n","filename":"src\/java.base\/share\/classes\/sun\/net\/sdp\/SdpSupport.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import java.util.EnumSet;\n@@ -42,1 +41,0 @@\n-import java.util.Set;\n@@ -48,1 +46,0 @@\n-import java.security.PrivilegedAction;\n@@ -53,0 +50,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -95,15 +93,8 @@\n-    private static enum Platform {\n-\n-        LINUX(LaunchMechanism.POSIX_SPAWN, LaunchMechanism.VFORK, LaunchMechanism.FORK),\n-\n-        BSD(LaunchMechanism.POSIX_SPAWN, LaunchMechanism.FORK),\n-\n-        AIX(LaunchMechanism.POSIX_SPAWN, LaunchMechanism.FORK);\n-\n-        final LaunchMechanism defaultLaunchMechanism;\n-        final Set<LaunchMechanism> validLaunchMechanisms;\n-\n-        Platform(LaunchMechanism ... launchMechanisms) {\n-            this.defaultLaunchMechanism = launchMechanisms[0];\n-            this.validLaunchMechanisms =\n-                EnumSet.copyOf(Arrays.asList(launchMechanisms));\n+    \/**\n+     * {@return the default or requested launch mechanism}\n+     * @throws Error if the requested launch mechanism is not found or valid\n+     *\/\n+    private static LaunchMechanism launchMechanism() {\n+        String s = GetPropertyAction.privilegedGetProperty(\"jdk.lang.Process.launchMechanism\");\n+        if (s == null) {\n+            return LaunchMechanism.POSIX_SPAWN;\n@@ -112,23 +103,10 @@\n-        @SuppressWarnings(\"removal\")\n-        LaunchMechanism launchMechanism() {\n-            return AccessController.doPrivileged(\n-                (PrivilegedAction<LaunchMechanism>) () -> {\n-                    String s = System.getProperty(\n-                        \"jdk.lang.Process.launchMechanism\");\n-                    LaunchMechanism lm;\n-                    if (s == null) {\n-                        lm = defaultLaunchMechanism;\n-                        s = lm.name().toLowerCase(Locale.ROOT);\n-                    } else {\n-                        try {\n-                            lm = LaunchMechanism.valueOf(\n-                                s.toUpperCase(Locale.ROOT));\n-                        } catch (IllegalArgumentException e) {\n-                            lm = null;\n-                        }\n-                    }\n-                    if (lm == null || !validLaunchMechanisms.contains(lm)) {\n-                        throw new Error(\n-                            s + \" is not a supported \" +\n-                            \"process launch mechanism on this platform.\"\n-                        );\n+        try {\n+            \/\/ Should be value of a LaunchMechanism enum\n+            LaunchMechanism lm = LaunchMechanism.valueOf(s.toUpperCase(Locale.ROOT));\n+            switch (OperatingSystem.current()) {\n+                case LINUX:\n+                    return lm;      \/\/ All options are valid for Linux\n+                case AIX:\n+                case MACOS:\n+                    if (lm != LaunchMechanism.VFORK) {\n+                        return lm; \/\/ All but VFORK are valid\n@@ -136,3 +114,5 @@\n-                    return lm;\n-                }\n-            );\n+                    break;\n+                case WINDOWS:\n+                    \/\/ fall through to throw to Error\n+            }\n+        } catch (IllegalArgumentException e) {\n@@ -141,9 +121,2 @@\n-        static Platform get() {\n-            String osName = GetPropertyAction.privilegedGetProperty(\"os.name\");\n-\n-            if (osName.equals(\"Linux\")) { return LINUX; }\n-            if (osName.contains(\"OS X\")) { return BSD; }\n-            if (osName.equals(\"AIX\")) { return AIX; }\n-\n-            throw new Error(osName + \" is not a supported OS platform.\");\n-        }\n+        throw new Error(s + \" is not a supported \" +\n+            \"process launch mechanism on this platform: \" + OperatingSystem.current());\n@@ -152,2 +125,1 @@\n-    private static final Platform platform = Platform.get();\n-    private static final LaunchMechanism launchMechanism = platform.launchMechanism();\n+    private static final LaunchMechanism launchMechanism = launchMechanism();\n@@ -357,1 +329,1 @@\n-        switch (platform) {\n+        switch (OperatingSystem.current()) {\n@@ -359,1 +331,1 @@\n-            case BSD:\n+            case MACOS:\n@@ -431,1 +403,3 @@\n-            default: throw new AssertionError(\"Unsupported platform: \" + platform);\n+            default:\n+                throw new AssertionError(\"Unsupported platform: \" +\n+                    OperatingSystem.current());\n@@ -487,1 +461,1 @@\n-        switch (platform) {\n+        switch (OperatingSystem.current()) {\n@@ -489,1 +463,1 @@\n-            case BSD:\n+            case MACOS:\n@@ -509,1 +483,1 @@\n-            default: throw new AssertionError(\"Unsupported platform: \" + platform);\n+            default: throw new AssertionError(\"Unsupported platform: \" + OperatingSystem.current());\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessImpl.java","additions":35,"deletions":61,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import sun.security.action.GetPropertyAction;\n+import jdk.internal.util.OperatingSystem;\n@@ -45,18 +45,20 @@\n-        String os = GetPropertyAction.privilegedGetProperty(\"os.name\");\n-        if (os.startsWith(\"Linux\")) {\n-            defaultLower = 32768;\n-            defaultUpper = 61000;\n-        } else if (os.contains(\"OS X\")) {\n-            defaultLower = 49152;\n-            defaultUpper = 65535;\n-        } else if (os.startsWith(\"AIX\")) {\n-            \/\/ The ephemeral port is OS version dependent on AIX:\n-            \/\/ http:\/\/publib.boulder.ibm.com\/infocenter\/aix\/v7r1\/topic\/com.ibm.aix.rsct315.admin\/bl503_ephport.htm\n-            \/\/ However, on AIX 5.3 \/ 6.1 \/ 7.1 we always see the\n-            \/\/ settings below by using:\n-            \/\/ \/usr\/sbin\/no -a | fgrep ephemeral\n-            defaultLower = 32768;\n-            defaultUpper = 65535;\n-        } else {\n-            throw new InternalError(\n-                \"sun.net.PortConfig: unknown OS\");\n+        switch (OperatingSystem.current()) {\n+            case LINUX:\n+                defaultLower = 32768;\n+                defaultUpper = 61000;\n+                break;\n+            case MACOS:\n+                defaultLower = 49152;\n+                defaultUpper = 65535;\n+                break;\n+            case AIX:\n+                \/\/ The ephemeral port is OS version dependent on AIX:\n+                \/\/ http:\/\/publib.boulder.ibm.com\/infocenter\/aix\/v7r1\/topic\/com.ibm.aix.rsct315.admin\/bl503_ephport.htm\n+                \/\/ However, on AIX 5.3 \/ 6.1 \/ 7.1 we always see the\n+                \/\/ settings below by using:\n+                \/\/ \/usr\/sbin\/no -a | fgrep ephemeral\n+                defaultLower = 32768;\n+                defaultUpper = 65535;\n+                break;\n+            default:\n+                throw new InternalError(\"sun.net.PortConfig: unsupported OS: \" + OperatingSystem.current());\n","filename":"src\/java.base\/unix\/classes\/sun\/net\/PortConfig.java","additions":21,"deletions":19,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- *\n- * @run testng\/othervm -Dos.arch=unknown -Dos.name=unknown --enable-native-access=ALL-UNNAMED TestUnsupportedLinker\n+ * @summary test with unknown architecture override\n+ * @run testng\/othervm -Dos.arch=unknown --enable-native-access=ALL-UNNAMED TestUnsupportedLinker\n","filename":"test\/jdk\/java\/foreign\/TestUnsupportedLinker.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import jdk.internal.util.OperatingSystem;\n+\n+import static jdk.internal.util.OperatingSystem.AIX;\n+import static jdk.internal.util.OperatingSystem.LINUX;\n+import static jdk.internal.util.OperatingSystem.MACOS;\n+import static jdk.internal.util.OperatingSystem.WINDOWS;\n+\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/**\n+ * @test\n+ * @summary test OperatingSystem enum\n+ * @modules java.base\/jdk.internal.util\n+ * @run junit OSTest\n+ *\/\n+\n+public class OSTest {\n+    \/**\n+     * Test consistency of System property \"os.name\" with OperatingSystem.current().\n+     *\/\n+    @Test\n+    public void os_nameVsCurrent() {\n+        String osName = System.getProperty(\"os.name\").substring(0, 3).toLowerCase(Locale.ROOT);\n+        OperatingSystem os = switch (osName) {\n+            case \"win\" -> WINDOWS;\n+            case \"lin\" -> LINUX;\n+            case \"mac\" -> MACOS;\n+            case \"aix\" -> AIX;\n+            default    -> fail(\"Unknown os.name: \" + osName);\n+        };\n+        assertEquals(OperatingSystem.current(), os, \"mismatch in OperatingSystem.current vs \" + osName);\n+    }\n+\n+    \/**\n+     * Test various OperatingSystem enum values vs boolean isXXX() methods.\n+     * @return a stream of arguments for parameterized test\n+     *\/\n+    private static Stream<Arguments> osParams() {\n+        return Stream.of(\n+                Arguments.of(LINUX, OperatingSystem.isLinux()),\n+                Arguments.of(WINDOWS, OperatingSystem.isWindows()),\n+                Arguments.of(MACOS, OperatingSystem.isMacOS()),\n+                Arguments.of(AIX, OperatingSystem.isAix())\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"osParams\")\n+    public void isXXX(OperatingSystem os, boolean isXXX) {\n+        OperatingSystem current = OperatingSystem.current();\n+        assertEquals(os == current, isXXX,\n+                \"Mismatch \" + os + \" == \" + current + \" vs is\" + os);\n+    }\n+ }\n","filename":"test\/jdk\/jdk\/internal\/util\/OSTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}