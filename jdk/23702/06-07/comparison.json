{"files":[{"patch":"@@ -390,12 +390,12 @@\n-     * with submitting threads, using a form of hashing.  The\n-     * ThreadLocalRandom probe value serves as a hash code for\n-     * choosing existing queues, and may be randomly repositioned upon\n-     * contention with other submitters.  In essence, submitters act\n-     * like workers except that they are restricted to executing local\n-     * tasks that they submitted (or when known, subtasks thereof).\n-     * Insertion of tasks in shared mode requires a lock. We use only\n-     * a simple spinlock (as one role of field \"phase\") because\n-     * submitters encountering a busy queue move to a different\n-     * position to use or create other queues.  They (spin) block when\n-     * registering new queues, or indirectly elsewhere, by revisiting\n-     * later.\n+     * with submitting threads (or carriers when using VirtualThreads)\n+     * using a form of hashing.  The ThreadLocalRandom probe value\n+     * serves as a hash code for choosing existing queues, and may be\n+     * randomly repositioned upon contention with other submitters.\n+     * In essence, submitters act like workers except that they are\n+     * restricted to executing local tasks that they submitted (or\n+     * when known, subtasks thereof).  Insertion of tasks in shared\n+     * mode requires a lock. We use only a simple spinlock (as one\n+     * role of field \"phase\") because submitters encountering a busy\n+     * queue move to a different position to use or create other\n+     * queues.  They (spin) block when registering new queues, or\n+     * indirectly elsewhere, by revisiting later.\n@@ -888,1 +888,2 @@\n-     * submitters never run these tasks, even if in the common pool.\n+     * submitters never run these tasks, even if in the common pool\n+     * (as indicated by ForkJoinTask.noUserHelp status bit).\n@@ -1298,1 +1299,1 @@\n-                if ((room == 0 ||        \/\/ pad for InterruptibleTasks\n+                if ((room == 0 ||        \/\/ pad if no caller-run\n@@ -1300,2 +1301,1 @@\n-                                  task.getClass().getSuperclass() !=\n-                                  interruptibleTaskClass) ? 1 : 2))] == null) &&\n+                                  task.noUserHelp() == 0) ? 1 : 2))] == null) &&\n@@ -1640,5 +1640,0 @@\n-    \/**\n-     * Cached for faster type tests.\n-     *\/\n-    static final Class<?> interruptibleTaskClass;\n-\n@@ -2026,0 +2021,1 @@\n+                                int ts = t.status;\n@@ -2029,3 +2025,1 @@\n-                                    ((src != (src = j) ||\n-                                      t.getClass().getSuperclass() ==\n-                                      interruptibleTaskClass) &&\n+                                    ((src != (src = j) || t.noUserHelp() != 0) &&\n@@ -4409,1 +4403,0 @@\n-        interruptibleTaskClass = ForkJoinTask.InterruptibleTask.class;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":18,"deletions":25,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -276,0 +276,1 @@\n+    static final int NO_USER_HELP   = 1 << 24; \/\/ no external caller-run helping\n@@ -295,0 +296,6 @@\n+    final int noUserHelp() {    \/\/ nonvolatile read\n+        return U.getInt(this, STATUS) & NO_USER_HELP;\n+    }\n+    final void setNoUserHelp() { \/\/ for use in constructors only\n+        U.putInt(this, STATUS, NO_USER_HELP);\n+    }\n@@ -479,1 +486,1 @@\n-        Thread t; boolean internal; int s;\n+        Thread t; boolean internal; int s, ss;\n@@ -490,1 +497,1 @@\n-                   (this instanceof InterruptibleTask) && !internal ? status :\n+                   !internal && ((ss = status) & NO_USER_HELP) != 0 ? ss :\n@@ -1158,1 +1165,1 @@\n-        status = 0;\n+        status &= NO_USER_HELP;\n@@ -1637,0 +1644,3 @@\n+        InterruptibleTask() {\n+            setNoUserHelp();\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinTask.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"}]}