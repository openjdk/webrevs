{"files":[{"patch":"@@ -3559,1 +3559,1 @@\n-                unit.toNanos(delay), 0L, false, null,\n+                unit.toNanos(delay), 0L, false, null,  \/\/ implicit null check of unit\n@@ -3612,1 +3612,1 @@\n-                unit.toNanos(initialDelay),\n+                unit.toNanos(initialDelay),  \/\/ implicit null check of unit\n@@ -3661,1 +3661,1 @@\n-                unit.toNanos(initialDelay),\n+                unit.toNanos(initialDelay),  \/\/ implicit null check of unit\n@@ -3735,6 +3735,7 @@\n-     * will be cancelled upon {@link #shutdown}. This method may be\n-     * invoked either before {@link #shutdown} to take effect upon the\n-     * next call, or afterwards to cancel such tasks, which may then\n-     * allow termination. Note that subsequent executions of periodic\n-     * tasks are always disabled upon shutdown, so this method applies\n-     * meaningfully only to non-periodic tasks.\n+     * will be cancelled upon {@link #shutdown} (unless this pool is\n+     * the {@link #commonPool()} which never shuts down). This method\n+     * may be invoked either before {@link #shutdown} to take effect\n+     * upon the next call, or afterwards to cancel such tasks, which\n+     * may then allow termination. Note that subsequent executions of\n+     * periodic tasks are always disabled upon shutdown, so this\n+     * method applies meaningfully only to non-periodic tasks.\n@@ -3926,1 +3927,1 @@\n-     * to submit for execution. The returned value is innacurate when\n+     * to submit for execution. The returned value is innacurate while\n@@ -3932,1 +3933,1 @@\n-    public int getDelayedTaskCount() {\n+    public long getDelayedTaskCount() {\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"}]}