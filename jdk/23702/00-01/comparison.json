{"files":[{"patch":"@@ -58,1 +58,1 @@\n-     * WorkQUeue arrays), tasks are cancelled.\n+     * WorkQueue arrays), tasks are cancelled.\n@@ -287,14 +287,17 @@\n-            while (n > 0 && h.length > 0) { \/\/ submit ready tasks\n-                ScheduledForkJoinTask<?> f; int stat;\n-                if ((f = h[0]) != null) {\n-                    long d = f.when - now();\n-                    if ((stat = f.status) >= 0 && d > 0L) {\n-                        parkTime = d;\n-                        break;\n-                    }\n-                    f.heapIndex = -1;\n-                    if (stat >= 0) {\n-                        if (f.isImmediate)\n-                            f.doExec();\n-                        else\n-                            p.executeReadyScheduledTask(f);\n+            if (n > 0 && h.length > 0) {    \/\/ submit ready tasks\n+                long now = now();\n+                do {\n+                    ScheduledForkJoinTask<?> f; int stat;\n+                    if ((f = h[0]) != null) {\n+                        long d = f.when - now;\n+                        if ((stat = f.status) >= 0 && d > 0L) {\n+                            parkTime = d;\n+                            break;\n+                        }\n+                        f.heapIndex = -1;\n+                        if (stat >= 0) {\n+                            if (f.isImmediate)\n+                                f.doExec();\n+                            else\n+                                p.executeReadyScheduledTask(f);\n+                        }\n@@ -302,2 +305,1 @@\n-                }\n-                n = replace(h, 0, n);\n+                } while ((n = replace(h, 0, n)) > 0);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/DelayScheduler.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n- * tasks, as well as method {#link #submitWithTimeout} to cancel tasks\n+ * tasks, as well as method {@link #submitWithTimeout} to cancel tasks\n@@ -144,15 +144,17 @@\n- * and invoke other {@linkplain ForkJoinTask ForkJoinTasks}. The\n- * schedule methods return {@linkplain ForkJoinTask ForkJoinTasks}\n- * that implement the {@link ScheduledFuture} interface. Resource\n- * exhaustion encountered after initial submission results in task\n- * cancellation. When time-based methods are used, shutdown policies\n- * are based on the default policies of class {@link\n- * ScheduledThreadPoolExecutor}: upon {@link #shutdown}, existing\n- * periodic tasks will not re-execute, and the pool terminates when\n- * quiescent and existing delayed tasks complete. Method {@link\n- * #cancelDelayedTasksOnShutdown} may be used to disable all delayed\n- * tasks upon shutdown, and method {@link #shutdownNow} may be used to\n- * instead unconditionally initiate pool termination. Monitoring\n- * methods such as {@link getQueuedTaskCount} do not include scheduled\n- * tasks that are not yet ready to execute, whcih are reported\n- * separately by method {@link getDelayedTaskCount}.\n+ * and invoke other {@linkplain ForkJoinTask ForkJoinTasks}. Delayed\n+ * actions become <em>enabled<\/em> and behave as ordinary submitted\n+ * tasks when their delays elapse.  schedule methods return\n+ * {@linkplain ForkJoinTask ForkJoinTasks} that implement the {@link\n+ * ScheduledFuture} interface. Resource exhaustion encountered after\n+ * initial submission results in task cancellation. When time-based\n+ * methods are used, shutdown policies are based on the default\n+ * policies of class {@link ScheduledThreadPoolExecutor}: upon {@link\n+ * #shutdown}, existing periodic tasks will not re-execute, and the\n+ * pool terminates when quiescent and existing delayed tasks\n+ * complete. Method {@link #cancelDelayedTasksOnShutdown} may be used\n+ * to disable all delayed tasks upon shutdown, and method {@link\n+ * #shutdownNow} may be used to instead unconditionally initiate pool\n+ * termination. Monitoring methods such as {@link getQueuedTaskCount}\n+ * do not include scheduled tasks that are not yet ready to execute,\n+ * whcih are reported separately by method {@link\n+ * getDelayedTaskCount}.\n@@ -3719,6 +3721,6 @@\n-     * Submits a task executing the given function, cancelling or\n-     * performing a given timeoutAction if not completed within the\n-     * given timeout period. If the optional {@code timeoutAction} is\n-     * null, the task is cancelled (via {@code cancel(true)}.\n-     * Otherwise, the action is applied and the task may be\n-     * interrupted if running. Actions may include {@link\n+     * Submits a task executing the given function, cancelling the\n+     * task or performing a given timeoutAction if not completed\n+     * within the given timeout period. If the optional {@code\n+     * timeoutAction} is null, the task is cancelled (via {@code\n+     * cancel(true)}.  Otherwise, the action is applied and the task\n+     * may be interrupted if running. Actions may include {@link\n@@ -3727,1 +3729,2 @@\n-     * exception.\n+     * exception. Note that these will only succeed if the task has\n+     * not already completed when the timeoutAction executes.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":26,"deletions":23,"binary":false,"changes":49,"status":"modified"}]}