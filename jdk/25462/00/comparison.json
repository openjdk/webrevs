{"files":[{"patch":"@@ -1306,2 +1306,2 @@\n-         * <li>Reacquire by invoking specialized version of\n-         *     {@link #acquire} with saved state as argument.\n+         * <li>Reacquire by invoking underlying version of\n+         *     {@link #acquire(long)} with saved state as argument.\n@@ -1349,2 +1349,2 @@\n-         * <li>Reacquire by invoking specialized version of\n-         *     {@link #acquire} with saved state as argument.\n+         * <li>Reacquire by invoking underlying version of\n+         *     {@link #acquire(long)} with saved state as argument.\n@@ -1401,2 +1401,2 @@\n-         * <li>Reacquire by invoking specialized version of\n-         *     {@link #acquire} with saved state as argument.\n+         * <li>Reacquire by invoking underlying version of\n+         *     {@link #acquire(long)} with saved state as argument.\n@@ -1445,2 +1445,2 @@\n-         * <li>Reacquire by invoking specialized version of\n-         *     {@link #acquire} with saved state as argument.\n+         * <li>Reacquire by invoking underlying version of\n+         *     {@link #acquire(long)} with saved state as argument.\n@@ -1488,2 +1488,2 @@\n-         * <li>Reacquire by invoking specialized version of\n-         *     {@link #acquire} with saved state as argument.\n+         * <li>Reacquire by invoking underlying version of\n+         *     {@link #acquire(long)} with saved state as argument.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/locks\/AbstractQueuedLongSynchronizer.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -89,3 +89,4 @@\n- * this object, and {@link #acquire}, given this saved state value,\n- * eventually restores this object to its previous acquired state.  No\n- * {@code AbstractQueuedSynchronizer} method otherwise creates such a\n+ * this object, and the underlying version of {@link #acquire(int)},\n+ * given this saved state value, eventually restores this object to\n+ * its previous acquired state.\n+ * No {@code AbstractQueuedSynchronizer} method otherwise creates such a\n@@ -1685,2 +1686,2 @@\n-         * <li>Reacquire by invoking specialized version of\n-         *     {@link #acquire} with saved state as argument.\n+         * <li>Reacquire by invoking underlying version of\n+         *     {@link #acquire(int)} with saved state as argument.\n@@ -1728,2 +1729,2 @@\n-         * <li>Reacquire by invoking specialized version of\n-         *     {@link #acquire} with saved state as argument.\n+         * <li>Reacquire by invoking underlying version of\n+         *     {@link #acquire(int)} with saved state as argument.\n@@ -1780,2 +1781,2 @@\n-         * <li>Reacquire by invoking specialized version of\n-         *     {@link #acquire} with saved state as argument.\n+         * <li>Reacquire by invoking underlying version of\n+         *     {@link #acquire(int)} with saved state as argument.\n@@ -1824,2 +1825,2 @@\n-         * <li>Reacquire by invoking specialized version of\n-         *     {@link #acquire} with saved state as argument.\n+         * <li>Reacquire by invoking underlying version of\n+         *     {@link #acquire(int)} with saved state as argument.\n@@ -1867,2 +1868,2 @@\n-         * <li>Reacquire by invoking specialized version of\n-         *     {@link #acquire} with saved state as argument.\n+         * <li>Reacquire by invoking underlying version of\n+         *     {@link #acquire(int)} with saved state as argument.\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/locks\/AbstractQueuedSynchronizer.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"}]}