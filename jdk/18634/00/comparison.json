{"files":[{"patch":"@@ -2230,2 +2230,2 @@\n-    \/\/ Populate the archive regions' G1BlockOffsetTableParts. That ensures\n-    \/\/ fast G1BlockOffsetTablePart::block_start operations for any given address\n+    \/\/ Populate the archive regions' G1BlockOffsetTables. That ensures\n+    \/\/ fast G1BlockOffsetTable::block_start operations for any given address\n@@ -2234,1 +2234,1 @@\n-    G1CollectedHeap::heap()->populate_archive_regions_bot_part(_mapped_heap_memregion);\n+    G1CollectedHeap::heap()->populate_archive_regions_bot(_mapped_heap_memregion);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,3 +34,2 @@\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\/\/ G1BlockOffsetTable\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+MemRegion G1BlockOffsetTable::_reserved;\n+volatile uint8_t* G1BlockOffsetTable::_offset_base;\n@@ -38,11 +37,2 @@\n-G1BlockOffsetTable::G1BlockOffsetTable(MemRegion heap, G1RegionToSpaceMapper* storage) :\n-  _reserved(heap), _offset_base(nullptr) {\n-\n-  MemRegion bot_reserved = storage->reserved();\n-\n-  _offset_base = ((uint8_t*)bot_reserved.start() - (uintptr_t(_reserved.start()) >> CardTable::card_shift()));\n-\n-  log_trace(gc, bot)(\"G1BlockOffsetTable::G1BlockOffsetTable: \");\n-  log_trace(gc, bot)(\"    rs.base(): \" PTR_FORMAT \"  rs.size(): \" SIZE_FORMAT \"  rs end(): \" PTR_FORMAT,\n-                     p2i(bot_reserved.start()), bot_reserved.byte_size(), p2i(bot_reserved.end()));\n-}\n+G1BlockOffsetTable::G1BlockOffsetTable(HeapRegion* hr) :\n+  _hr(hr) {}\n@@ -65,8 +55,0 @@\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\/\/ G1BlockOffsetTablePart\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\n-G1BlockOffsetTablePart::G1BlockOffsetTablePart(G1BlockOffsetTable* array, HeapRegion* hr) :\n-  _bot(array),\n-  _hr(hr) {}\n-\n@@ -105,1 +87,1 @@\n-void G1BlockOffsetTablePart::set_remainder_to_point_to_start_incl(uint8_t* start_card, uint8_t* end_card) {\n+void G1BlockOffsetTable::set_remainder_to_point_to_start_incl(uint8_t* start_card, uint8_t* end_card) {\n@@ -107,2 +89,2 @@\n-  assert(start_card > _bot->entry_for_addr(_hr->bottom()), \"Cannot be first card\");\n-  assert(_bot->offset_array(start_card-1) < CardTable::card_size_in_words(),\n+  assert(start_card > entry_for_addr(_hr->bottom()), \"Cannot be first card\");\n+  assert(offset_array(start_card-1) < CardTable::card_size_in_words(),\n@@ -119,1 +101,1 @@\n-      _bot->set_offset_array(start_card_for_region, end_card, offset);\n+      set_offset_array(start_card_for_region, end_card, offset);\n@@ -123,1 +105,1 @@\n-    _bot->set_offset_array(start_card_for_region, reach, offset);\n+    set_offset_array(start_card_for_region, reach, offset);\n@@ -134,1 +116,1 @@\n-void G1BlockOffsetTablePart::check_all_cards(uint8_t* start_card, uint8_t* end_card) const {\n+void G1BlockOffsetTable::check_all_cards(uint8_t* start_card, uint8_t* end_card) const {\n@@ -138,1 +120,1 @@\n-  guarantee(_bot->offset_array(start_card) == CardTable::card_size_in_words(), \"Wrong value in second card\");\n+  guarantee(offset_array(start_card) == CardTable::card_size_in_words(), \"Wrong value in second card\");\n@@ -140,1 +122,1 @@\n-    uint8_t entry = _bot->offset_array(c);\n+    uint8_t entry = offset_array(c);\n@@ -147,1 +129,1 @@\n-                (uint)entry, (uint)_bot->offset_array(c), CardTable::card_size_in_words());\n+                (uint)entry, (uint)offset_array(c), CardTable::card_size_in_words());\n@@ -153,1 +135,1 @@\n-      guarantee(_bot->offset_array(landing_card) <= entry,\n+      guarantee(offset_array(landing_card) <= entry,\n@@ -156,1 +138,1 @@\n-                (uint)_bot->offset_array(landing_card), (uint)entry);\n+                (uint)offset_array(landing_card), (uint)entry);\n@@ -160,1 +142,1 @@\n-      guarantee(_bot->offset_array(landing_card) < CardTable::card_size_in_words(),\n+      guarantee(offset_array(landing_card) < CardTable::card_size_in_words(),\n@@ -163,1 +145,1 @@\n-                (uint)_bot->offset_array(landing_card), (uint)CardTable::card_size_in_words());\n+                (uint)offset_array(landing_card), (uint)CardTable::card_size_in_words());\n@@ -179,1 +161,1 @@\n-void G1BlockOffsetTablePart::update_for_block_work(HeapWord* blk_start,\n+void G1BlockOffsetTable::update_for_block_work(HeapWord* blk_start,\n@@ -182,1 +164,1 @@\n-  uint8_t* const offset_card =  _bot->entry_for_addr(cur_card_boundary);\n+  uint8_t* const offset_card = entry_for_addr(cur_card_boundary);\n@@ -194,1 +176,1 @@\n-  assert(cur_card_boundary == _bot->addr_for_entry(offset_card),\n+  assert(cur_card_boundary == addr_for_entry(offset_card),\n@@ -198,1 +180,1 @@\n-  _bot->set_offset_array(offset_card, cur_card_boundary, blk_start);\n+  set_offset_array(offset_card, cur_card_boundary, blk_start);\n@@ -203,1 +185,1 @@\n-  uint8_t* end_card = _bot->entry_for_addr(blk_end - 1);\n+  uint8_t* end_card = entry_for_addr(blk_end - 1);\n@@ -213,1 +195,1 @@\n-  HeapWord* new_card_boundary = _bot->addr_for_entry(end_card) + CardTable::card_size_in_words();\n+  HeapWord* new_card_boundary = addr_for_entry(end_card) + CardTable::card_size_in_words();\n@@ -218,4 +200,4 @@\n-  uint8_t* previous_card = _bot->entry_for_addr(blk_start);\n-  HeapWord* boundary = _bot->addr_for_entry(previous_card);\n-  assert((_bot->offset_array(offset_card) == 0 && blk_start == boundary) ||\n-         (_bot->offset_array(offset_card) > 0 && _bot->offset_array(offset_card) < CardTable::card_size_in_words()),\n+  uint8_t* previous_card = entry_for_addr(blk_start);\n+  HeapWord* boundary = addr_for_entry(previous_card);\n+  assert((offset_array(offset_card) == 0 && blk_start == boundary) ||\n+         (offset_array(offset_card) > 0 && offset_array(offset_card) < CardTable::card_size_in_words()),\n@@ -226,1 +208,1 @@\n-         (uint)_bot->offset_array(offset_card),\n+         (uint)offset_array(offset_card),\n@@ -229,3 +211,2 @@\n-    assert(_bot->offset_array(j) > 0 &&\n-           _bot->offset_array(j) <=\n-             (uint8_t) (CardTable::card_size_in_words() + BOTConstants::N_powers - 1),\n+    assert(offset_array(j) > 0 &&\n+           offset_array(j) <= (uint8_t) (CardTable::card_size_in_words() + BOTConstants::N_powers - 1),\n@@ -234,2 +215,2 @@\n-           (uint) _bot->offset_array(j),\n-           (uint) _bot->offset_array(j),\n+           (uint) offset_array(j),\n+           (uint) offset_array(j),\n@@ -241,1 +222,1 @@\n-void G1BlockOffsetTablePart::verify() const {\n+void G1BlockOffsetTable::verify() const {\n@@ -243,2 +224,2 @@\n-  uint8_t* start_card = _bot->entry_for_addr(_hr->bottom());\n-  uint8_t* end_card = _bot->entry_for_addr(_hr->top() - 1);\n+  uint8_t* start_card = entry_for_addr(_hr->bottom());\n+  uint8_t* end_card = entry_for_addr(_hr->top() - 1);\n@@ -247,1 +228,1 @@\n-    uint8_t entry = _bot->offset_array(current_card);\n+    uint8_t entry = offset_array(current_card);\n@@ -252,1 +233,1 @@\n-      HeapWord* card_address = _bot->addr_for_entry(current_card);\n+      HeapWord* card_address = addr_for_entry(current_card);\n@@ -274,1 +255,1 @@\n-      HeapWord* backskip_address = _bot->addr_for_entry(current_card - backskip);\n+      HeapWord* backskip_address = addr_for_entry(current_card - backskip);\n@@ -283,3 +264,3 @@\n-void G1BlockOffsetTablePart::print_on(outputStream* out) {\n-  uint8_t* from_card = _bot->entry_for_addr(_hr->bottom());\n-  uint8_t* to_card = _bot->entry_for_addr(_hr->end());\n+void G1BlockOffsetTable::print_on(outputStream* out) {\n+  uint8_t* from_card = entry_for_addr(_hr->bottom());\n+  uint8_t* to_card = entry_for_addr(_hr->end());\n@@ -291,2 +272,2 @@\n-                  p2i(i), p2i(_bot->addr_for_entry(i)),\n-                  (uint) _bot->offset_array(i));\n+                  p2i(i), p2i(addr_for_entry(i)),\n+                  (uint) offset_array(i));\n@@ -297,1 +278,1 @@\n-void G1BlockOffsetTablePart::set_for_starts_humongous(HeapWord* obj_top, size_t fill_size) {\n+void G1BlockOffsetTable::set_for_starts_humongous(HeapWord* obj_top, size_t fill_size) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":44,"deletions":63,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-class G1BlockOffsetTable;\n@@ -44,1 +43,1 @@\n-\/\/ Each G1BlockOffsetTablePart is owned by a HeapRegion.\n+\/\/ Each G1BlockOffsetTable is owned by a HeapRegion.\n@@ -47,1 +46,0 @@\n-  friend class G1BlockOffsetTablePart;\n@@ -52,1 +50,1 @@\n-  MemRegion _reserved;\n+  static MemRegion _reserved;\n@@ -55,1 +53,4 @@\n-  volatile uint8_t* _offset_base;\n+  static volatile uint8_t* _offset_base;\n+\n+  \/\/ The region that owns this BOT.\n+  HeapRegion* _hr;\n@@ -76,0 +77,17 @@\n+  \/\/ Sets the entries corresponding to the cards starting at \"start\" and ending\n+  \/\/ at \"end\" to point back to the card before \"start\"; [start, end]\n+  void set_remainder_to_point_to_start_incl(uint8_t* start, uint8_t* end);\n+\n+  \/\/ Update BOT entries corresponding to the mem range [blk_start, blk_end).\n+  void update_for_block_work(HeapWord* blk_start, HeapWord* blk_end);\n+\n+  void check_all_cards(uint8_t* left_card, uint8_t* right_card) const NOT_DEBUG_RETURN;\n+\n+  static HeapWord* align_up_by_card_size(HeapWord* const addr) {\n+    return align_up(addr, CardTable::card_size());\n+  }\n+\n+  void update_for_block(HeapWord* blk_start, size_t size) {\n+    update_for_block(blk_start, blk_start + size);\n+  }\n+\n@@ -77,0 +95,1 @@\n+  static void initialize(MemRegion heap, G1RegionToSpaceMapper* storage);\n@@ -90,3 +109,2 @@\n-  \/\/ Initialize the Block Offset Table to cover the memory region passed\n-  \/\/ in the heap parameter.\n-  G1BlockOffsetTable(MemRegion heap, G1RegionToSpaceMapper* storage);\n+  \/\/ Initialize the Block Offset Table to cover the region.\n+  G1BlockOffsetTable(HeapRegion* hr);\n@@ -99,1 +117,0 @@\n-};\n@@ -101,27 +118,0 @@\n-class G1BlockOffsetTablePart {\n-  friend class G1BlockOffsetTable;\n-  friend class VMStructs;\n-private:\n-  \/\/ This is the global BlockOffsetTable.\n-  G1BlockOffsetTable* _bot;\n-\n-  \/\/ The region that owns this part of the BOT.\n-  HeapRegion* _hr;\n-\n-  \/\/ Sets the entries corresponding to the cards starting at \"start\" and ending\n-  \/\/ at \"end\" to point back to the card before \"start\"; [start, end]\n-  void set_remainder_to_point_to_start_incl(uint8_t* start, uint8_t* end);\n-\n-  \/\/ Update BOT entries corresponding to the mem range [blk_start, blk_end).\n-  void update_for_block_work(HeapWord* blk_start, HeapWord* blk_end);\n-\n-  void check_all_cards(uint8_t* left_card, uint8_t* right_card) const NOT_DEBUG_RETURN;\n-\n-  static HeapWord* align_up_by_card_size(HeapWord* const addr) {\n-    return align_up(addr, CardTable::card_size());\n-  }\n-\n-  void update_for_block(HeapWord* blk_start, size_t size) {\n-    update_for_block(blk_start, blk_start + size);\n-  }\n-public:\n@@ -135,3 +125,0 @@\n-  \/\/  The elements of the array are initialized to zero.\n-  G1BlockOffsetTablePart(G1BlockOffsetTable* array, HeapRegion* hr);\n-\n@@ -140,2 +127,1 @@\n-  \/\/ Returns the address of the start of the block reaching into the card containing\n-  \/\/ \"addr\".\n+  \/\/ Returns the address of the start of the block reaching into the card containing \"addr\".\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":27,"deletions":41,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -35,1 +35,11 @@\n-inline HeapWord* G1BlockOffsetTablePart::block_start_reaching_into_card(const void* addr) const {\n+inline void G1BlockOffsetTable::initialize(MemRegion heap, G1RegionToSpaceMapper* storage) {\n+  _reserved = heap;\n+  MemRegion bot_reserved = storage->reserved();\n+  _offset_base = ((uint8_t*)bot_reserved.start() - (uintptr_t(_reserved.start()) >> CardTable::card_shift()));\n+\n+  log_trace(gc, bot)(\"G1BlockOffsetTable::initialize: \");\n+  log_trace(gc, bot)(\"    rs.base(): \" PTR_FORMAT \"  rs.size(): \" SIZE_FORMAT \"  rs end(): \" PTR_FORMAT,\n+                     p2i(bot_reserved.start()), bot_reserved.byte_size(), p2i(bot_reserved.end()));\n+}\n+\n+inline HeapWord* G1BlockOffsetTable::block_start_reaching_into_card(const void* addr) const {\n@@ -41,1 +51,1 @@\n-    uint8_t offset = _bot->offset_array(_bot->entry_for_addr(_hr->bottom()));\n+    uint8_t offset = offset_array(entry_for_addr(_hr->bottom()));\n@@ -47,2 +57,2 @@\n-  uint8_t* entry = _bot->entry_for_addr(addr);\n-  uint8_t offset = _bot->offset_array(entry);\n+  uint8_t* entry = entry_for_addr(addr);\n+  uint8_t offset = offset_array(entry);\n@@ -54,1 +64,1 @@\n-    offset = _bot->offset_array(entry);\n+    offset = offset_array(entry);\n@@ -57,1 +67,1 @@\n-  HeapWord* q = _bot->addr_for_entry(entry);\n+  HeapWord* q = addr_for_entry(entry);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.inline.hpp","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-  return new HeapRegion(hrs_index, bot(), mr, &_card_set_config);\n+  return new HeapRegion(hrs_index, mr, &_card_set_config);\n@@ -535,1 +535,1 @@\n-void G1CollectedHeap::populate_archive_regions_bot_part(MemRegion range) {\n+void G1CollectedHeap::populate_archive_regions_bot(MemRegion range) {\n@@ -1366,1 +1366,1 @@\n-  _bot = new G1BlockOffsetTable(reserved(), bot_storage);\n+  G1BlockOffsetTable::initialize(reserved(), bot_storage);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -720,1 +720,1 @@\n-  \/\/ Populate the G1BlockOffsetTablePart for archived regions with the given\n+  \/\/ Populate the G1BlockOffsetTable for archived regions with the given\n@@ -722,1 +722,1 @@\n-  void populate_archive_regions_bot_part(MemRegion range);\n+  void populate_archive_regions_bot(MemRegion range);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-  _bot_part.set_for_starts_humongous(obj_top, fill_size);\n+  _bot.set_for_starts_humongous(obj_top, fill_size);\n@@ -216,1 +216,0 @@\n-                       G1BlockOffsetTable* bot,\n@@ -222,1 +221,1 @@\n-  _bot_part(bot, this),\n+  _bot(this),\n@@ -681,1 +680,1 @@\n-    _bot_part.verify();\n+    _bot.verify();\n@@ -710,1 +709,1 @@\n-  _bot_part.update_for_block(start, end);\n+  _bot.update_for_block(start, end);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-  G1BlockOffsetTablePart _bot_part;\n+  G1BlockOffsetTable _bot;\n@@ -280,1 +280,0 @@\n-             G1BlockOffsetTable* bot,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-    assert(!G1BlockOffsetTablePart::is_crossing_card_boundary(cur_block, (HeapWord*)addr), \"must be\");\n+    assert(!G1BlockOffsetTable::is_crossing_card_boundary(cur_block, (HeapWord*)addr), \"must be\");\n@@ -108,1 +108,1 @@\n-  HeapWord* first_block = _bot_part.block_start_reaching_into_card(addr);\n+  HeapWord* first_block = _bot.block_start_reaching_into_card(addr);\n@@ -265,1 +265,1 @@\n-  _bot_part.update_for_block(obj_start, obj_end);\n+  _bot.update_for_block(obj_start, obj_end);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  G1BlockOffsetTable bot(heap, bot_storage);\n+  G1BlockOffsetTable::initialize(heap, bot_storage);\n@@ -73,5 +73,5 @@\n-  HeapRegion hr0(0, &bot, mr0, &config);\n-  HeapRegion hr1(1, &bot, mr1, &config);\n-  HeapRegion hr2(2, &bot, mr2, &config);\n-  HeapRegion hr3(3, &bot, mr3, &config);\n-  HeapRegion hr4(4, &bot, mr4, &config);\n+  HeapRegion hr0(0, mr0, &config);\n+  HeapRegion hr1(1, mr1, &config);\n+  HeapRegion hr2(2, mr2, &config);\n+  HeapRegion hr3(3, mr3, &config);\n+  HeapRegion hr4(4, mr4, &config);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}