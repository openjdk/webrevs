{"files":[{"patch":"@@ -34,2 +34,2 @@\n-MemRegion G1BlockOffsetTable::_reserved;\n-volatile uint8_t* G1BlockOffsetTable::_offset_base;\n+G1BlockOffsetTable::G1BlockOffsetTable(MemRegion heap, G1RegionToSpaceMapper* storage) :\n+  _reserved(heap), _offset_base(nullptr) {\n@@ -37,2 +37,8 @@\n-G1BlockOffsetTable::G1BlockOffsetTable(HeapRegion* hr) :\n-  _hr(hr) {}\n+  MemRegion bot_reserved = storage->reserved();\n+\n+  _offset_base = ((uint8_t*)bot_reserved.start() - (uintptr_t(_reserved.start()) >> CardTable::card_shift()));\n+\n+  log_trace(gc, bot)(\"G1BlockOffsetTable::G1BlockOffsetTable: \");\n+  log_trace(gc, bot)(\"    rs.base(): \" PTR_FORMAT \"  rs.size(): \" SIZE_FORMAT \"  rs end(): \" PTR_FORMAT,\n+                     p2i(bot_reserved.start()), bot_reserved.byte_size(), p2i(bot_reserved.end()));\n+}\n@@ -89,1 +95,0 @@\n-  assert(start_card > entry_for_addr(_hr->bottom()), \"Cannot be first card\");\n@@ -222,4 +227,4 @@\n-void G1BlockOffsetTable::verify() const {\n-  assert(_hr->bottom() < _hr->top(), \"Only non-empty regions should be verified.\");\n-  uint8_t* start_card = entry_for_addr(_hr->bottom());\n-  uint8_t* end_card = entry_for_addr(_hr->top() - 1);\n+void G1BlockOffsetTable::verify(const HeapRegion* hr) const {\n+  assert(hr->bottom() < hr->top(), \"Only non-empty regions should be verified.\");\n+  uint8_t* start_card = entry_for_addr(hr->bottom());\n+  uint8_t* end_card = entry_for_addr(hr->top() - 1);\n@@ -237,1 +242,1 @@\n-        size_t obj_size = _hr->block_size(obj);\n+        size_t obj_size = hr->block_size(obj);\n@@ -239,1 +244,1 @@\n-        guarantee(obj_end > obj && obj_end <= _hr->top(),\n+        guarantee(obj_end > obj && obj_end <= hr->top(),\n@@ -241,1 +246,1 @@\n-                  p2i(obj), obj_size, p2i(obj_end), p2i(_hr->top()));\n+                  p2i(obj), obj_size, p2i(obj_end), p2i(hr->top()));\n@@ -256,1 +261,1 @@\n-      guarantee(backskip_address >= _hr->bottom(),\n+      guarantee(backskip_address >= hr->bottom(),\n@@ -258,1 +263,1 @@\n-                p2i(_hr->bottom()), p2i(backskip_address));\n+                p2i(hr->bottom()), p2i(backskip_address));\n@@ -263,17 +268,2 @@\n-#ifndef PRODUCT\n-void G1BlockOffsetTable::print_on(outputStream* out) {\n-  uint8_t* from_card = entry_for_addr(_hr->bottom());\n-  uint8_t* to_card = entry_for_addr(_hr->end());\n-  out->print_cr(\">> BOT for area [\" PTR_FORMAT \",\" PTR_FORMAT \") \"\n-                \"cards [\" SIZE_FORMAT \",\" SIZE_FORMAT \")\",\n-                p2i(_hr->bottom()), p2i(_hr->end()), p2i(from_card), p2i(to_card));\n-  for (uint8_t* i = from_card; i < to_card; ++i) {\n-    out->print_cr(\"  entry \" SIZE_FORMAT_W(8) \" | \" PTR_FORMAT \" : %3u\",\n-                  p2i(i), p2i(addr_for_entry(i)),\n-                  (uint) offset_array(i));\n-  }\n-}\n-#endif \/\/ !PRODUCT\n-\n-void G1BlockOffsetTable::set_for_starts_humongous(HeapWord* obj_top, size_t fill_size) {\n-  update_for_block(_hr->bottom(), obj_top);\n+void G1BlockOffsetTable::set_for_starts_humongous(HeapRegion* hr, HeapWord* obj_top, size_t fill_size) {\n+  update_for_block(hr->bottom(), obj_top);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":21,"deletions":31,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  static MemRegion _reserved;\n+  MemRegion _reserved;\n@@ -53,4 +53,1 @@\n-  static volatile uint8_t* _offset_base;\n-\n-  \/\/ The region that owns this BOT.\n-  HeapRegion* _hr;\n+  volatile uint8_t* _offset_base;\n@@ -95,1 +92,0 @@\n-  static void initialize(MemRegion heap, G1RegionToSpaceMapper* storage);\n@@ -109,2 +105,3 @@\n-  \/\/ Initialize the Block Offset Table to cover the region.\n-  G1BlockOffsetTable(HeapRegion* hr);\n+  \/\/ Initialize the Block Offset Table to cover the memory region passed\n+  \/\/ in the heap parameter.\n+  G1BlockOffsetTable(MemRegion heap, G1RegionToSpaceMapper* storage);\n@@ -125,1 +122,1 @@\n-  void verify() const;\n+  void verify(const HeapRegion* hr) const;\n@@ -127,1 +124,2 @@\n-  \/\/ Returns the address of the start of the block reaching into the card containing \"addr\".\n+  \/\/ Returns the address of the start of the block reaching into the card containing\n+  \/\/ \"addr\".\n@@ -136,3 +134,1 @@\n-  void set_for_starts_humongous(HeapWord* obj_top, size_t fill_size);\n-\n-  void print_on(outputStream* out) PRODUCT_RETURN;\n+  void set_for_starts_humongous(HeapRegion* hr, HeapWord* obj_top, size_t fill_size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -35,10 +35,0 @@\n-inline void G1BlockOffsetTable::initialize(MemRegion heap, G1RegionToSpaceMapper* storage) {\n-  _reserved = heap;\n-  MemRegion bot_reserved = storage->reserved();\n-  _offset_base = ((uint8_t*)bot_reserved.start() - (uintptr_t(_reserved.start()) >> CardTable::card_shift()));\n-\n-  log_trace(gc, bot)(\"G1BlockOffsetTable::initialize: \");\n-  log_trace(gc, bot)(\"    rs.base(): \" PTR_FORMAT \"  rs.size(): \" SIZE_FORMAT \"  rs end(): \" PTR_FORMAT,\n-                     p2i(bot_reserved.start()), bot_reserved.byte_size(), p2i(bot_reserved.end()));\n-}\n-\n@@ -46,10 +36,1 @@\n-  assert(addr >= _hr->bottom() && addr < _hr->top(), \"invalid address\");\n-\n-#ifdef ASSERT\n-  if (!_hr->is_continues_humongous()) {\n-    \/\/ For non-ContinuesHumongous regions, the first obj always starts from bottom.\n-    uint8_t offset = offset_array(entry_for_addr(_hr->bottom()));\n-    assert(offset == 0, \"Found offset %u instead of 0 for region %u %s\",\n-           offset, _hr->hrm_index(), _hr->get_short_type_str());\n-  }\n-#endif\n+  assert(_reserved.contains(addr), \"invalid address\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.inline.hpp","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-  return new HeapRegion(hrs_index, mr, &_card_set_config);\n+  return new HeapRegion(hrs_index, bot(), mr, &_card_set_config);\n@@ -1366,1 +1366,1 @@\n-  G1BlockOffsetTable::initialize(reserved(), bot_storage);\n+  _bot = new G1BlockOffsetTable(reserved(), bot_storage);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-  _bot.set_for_starts_humongous(obj_top, fill_size);\n+  _bot->set_for_starts_humongous(this, obj_top, fill_size);\n@@ -216,0 +216,1 @@\n+                       G1BlockOffsetTable* bot,\n@@ -221,1 +222,1 @@\n-  _bot(this),\n+  _bot(bot),\n@@ -680,1 +681,1 @@\n-    _bot.verify();\n+    _bot->verify(this);\n@@ -709,1 +710,1 @@\n-  _bot.update_for_block(start, end);\n+  _bot->update_for_block(start, end);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-  G1BlockOffsetTable _bot;\n+  G1BlockOffsetTable* _bot;\n@@ -280,0 +280,1 @@\n+             G1BlockOffsetTable* bot,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-  HeapWord* first_block = _bot.block_start_reaching_into_card(addr);\n+  HeapWord* first_block = _bot->block_start_reaching_into_card(addr);\n@@ -265,1 +265,1 @@\n-  _bot.update_for_block(obj_start, obj_end);\n+  _bot->update_for_block(obj_start, obj_end);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  G1BlockOffsetTable::initialize(heap, bot_storage);\n+  G1BlockOffsetTable bot(heap, bot_storage);\n@@ -73,5 +73,5 @@\n-  HeapRegion hr0(0, mr0, &config);\n-  HeapRegion hr1(1, mr1, &config);\n-  HeapRegion hr2(2, mr2, &config);\n-  HeapRegion hr3(3, mr3, &config);\n-  HeapRegion hr4(4, mr4, &config);\n+  HeapRegion hr0(0, &bot, mr0, &config);\n+  HeapRegion hr1(1, &bot, mr1, &config);\n+  HeapRegion hr2(2, &bot, mr2, &config);\n+  HeapRegion hr3(3, &bot, mr3, &config);\n+  HeapRegion hr4(4, &bot, mr4, &config);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}