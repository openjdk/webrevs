{"files":[{"patch":"@@ -1807,2 +1807,1 @@\n-#if INCLUDE_JVMCI\n-address Deoptimization::deoptimize_for_missing_exception_handler(nmethod* nm) {\n+address Deoptimization::deoptimize_for_missing_exception_handler(nmethod* nm, bool make_not_entrant) {\n@@ -1810,1 +1809,3 @@\n-  nm->make_not_entrant(nmethod::InvalidationReason::MISSING_EXCEPTION_HANDLER);\n+  if (make_not_entrant) {\n+    nm->make_not_entrant(nmethod::InvalidationReason::MISSING_EXCEPTION_HANDLER);\n+  }\n@@ -1824,0 +1825,8 @@\n+\n+  Deoptimization::deoptimize(thread, caller_frame, Deoptimization::Reason_not_compiled_exception_handler);\n+\n+  if (!nm->is_compiled_by_jvmci()) {\n+    return SharedRuntime::deopt_blob()->unpack_with_exception_in_tls();\n+  }\n+\n+  \/\/ JVMCI support\n@@ -1839,1 +1848,0 @@\n-  Deoptimization::deoptimize(thread, caller_frame, Deoptimization::Reason_not_compiled_exception_handler);\n@@ -1848,1 +1856,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -187,0 +187,1 @@\n+  static address deoptimize_for_missing_exception_handler(nmethod* nm, bool make_not_entrant);\n@@ -188,1 +189,0 @@\n-  static address deoptimize_for_missing_exception_handler(nmethod* nm);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -790,1 +790,2 @@\n-      return Deoptimization::deoptimize_for_missing_exception_handler(nm);\n+      bool make_not_entrant = true;\n+      return Deoptimization::deoptimize_for_missing_exception_handler(nm, make_not_entrant);\n@@ -846,0 +847,9 @@\n+\n+  \/\/ If the compiler did not anticipate a recursive exception, resulting in an exception\n+  \/\/ thrown from the catch bci, then the compiled exception handler might be missing.\n+  \/\/ This is rare.  Just deoptimize and let the interpreter handle it.\n+  if (t == nullptr && recursive_exception_occurred) {\n+    bool make_not_entrant = false;\n+    return Deoptimization::deoptimize_for_missing_exception_handler(nm, make_not_entrant);\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+super class IllegalAccessInCatch\n+    version 52:0\n+{\n+    \/*\n+      static int test() {\n+        try {\n+          return 1 \/ 0;\n+        } catch (jdk.internal.agent.AgentConfigurationError e1) {\n+          try {\n+            return 0;\n+          } catch (IllegalAccessError e2) {\n+            return 1;\n+          }\n+        }\n+      }\n+    *\/\n+    static Method test:\"()I\"\n+    stack 2 locals 1\n+  {\n+    iconst_1;\n+    iconst_0;\n+    try t0;\n+    idiv;\n+    endtry t0;\n+    ireturn;\n+    catch t0 jdk\/internal\/agent\/AgentConfigurationError; \/\/ loadable but not accessible from unnamed module\n+    stack_frame_type full;\n+    stack_map class java\/lang\/Throwable;\n+    try t1;\n+    iconst_0;\n+    ireturn;\n+    endtry t1;\n+    catch t1 java\/lang\/IllegalAccessError;\n+    stack_frame_type full;\n+    stack_map class java\/lang\/Throwable;\n+    iconst_1;\n+    ireturn;\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/IllegalAccessInCatch.jasm","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8367002\n+ * @summary Compilers might not generate handlers for recursive exceptions\n+ *\n+ * @compile IllegalAccessInCatch.jasm\n+ * @run main\/othervm -Xbatch\n+ *   -XX:CompileCommand=compileonly,IllegalAccessInCatch*::test\n+ *   -XX:-TieredCompilation\n+ *   TestAccessErrorInCatch\n+ * @run main\/othervm -Xbatch\n+ *   -XX:CompileCommand=compileonly,IllegalAccessInCatch*::test\n+ *   -XX:TieredStopAtLevel=3\n+ *   TestAccessErrorInCatch\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+import java.nio.file.Files;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class TestAccessErrorInCatch {\n+\n+    public static void main(String[] args) throws Throwable {\n+        Path TEST_CLASSES_DIR = FileSystems.getDefault().getPath(System.getProperty(\"test.classes\"));\n+        byte[] bytes = Files.readAllBytes(TEST_CLASSES_DIR.resolve(\"IllegalAccessInCatch.class\"));\n+\n+        var l = MethodHandles.lookup().defineHiddenClass(bytes, true);\n+        Class<?> anonClass = l.lookupClass();\n+        MethodHandle mh = l.findStatic(anonClass, \"test\", MethodType.methodType(int.class));\n+        for (int i = 0; i < 16_000; i++) {\n+            invoke(mh);\n+        }\n+        System.out.println(invoke(mh));\n+    }\n+\n+    private static int invoke(MethodHandle mh) throws Throwable {\n+        return (int) mh.invokeExact();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/TestAccessErrorInCatch.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -24,2 +24,3 @@\n-public sealed class SealedSuper permits SealedSub {\n-}\n+super public class LongCountedLoopInInfiniteLoop\n+{\n+  public Method \"<init>\":\"()V\"\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/a","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/SealedSuper.java","status":"copied"}]}