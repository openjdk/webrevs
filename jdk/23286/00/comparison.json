{"files":[{"patch":"@@ -4242,1 +4242,1 @@\n-                if (inferred == null) {\n+                if (inferred == null || inferred.isErroneous()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -931,2 +931,2 @@\n-\n-                                return instantiated != null && types.isCastable(selectorType, instantiated);\n+                                return instantiated != null &&\n+                                        (instantiated.isErroneous() || types.isCastable(selectorType, instantiated));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -740,1 +740,1 @@\n-            return null;\n+            return types.createErrorType(expressionType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2185,0 +2185,30 @@\n+    @Test\n+    public void testNonExhaustiveCapture(Path base) throws Exception {\n+        doTest(base,\n+               new String[]{\"\"\"\n+                            package lib;\n+                            public sealed interface S<T extends S<T>> permits A, B {}\n+                            \"\"\",\n+                            \"\"\"\n+                            package lib;\n+                            public final class A implements S<A> {}\n+                            \"\"\",\n+                            \"\"\"\n+                            package lib;\n+                            public final class B<T extends B<T>> implements S<T> {}\n+                            \"\"\"},\n+               \"\"\"\n+               package test;\n+               import lib.*;\n+               public class Test {\n+                 public static void test(S<?> sealed) {\n+                   switch (sealed) {\n+                     case A one -> {}\n+                   }\n+                 }\n+               }\n+               \"\"\",\n+               \"Test.java:5:5: compiler.err.not.exhaustive.statement\",\n+               \"1 error\");\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Exhaustiveness.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}