{"files":[{"patch":"@@ -394,0 +394,6 @@\n+    private void verifyImageIndex(int imageIndex) {\n+        if (imageIndex < minIndex) {\n+            throw new IndexOutOfBoundsException(\"imageIndex < \" + minIndex);\n+        }\n+    }\n+\n@@ -500,3 +506,1 @@\n-        if (imageIndex < minIndex) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+        verifyImageIndex(imageIndex);\n@@ -845,0 +849,1 @@\n+            verifyImageIndex(imageIndex);\n@@ -859,0 +864,1 @@\n+            verifyImageIndex(imageIndex);\n@@ -889,0 +895,1 @@\n+            verifyImageIndex(imageIndex);\n@@ -907,0 +914,1 @@\n+            verifyImageIndex(imageIndex);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageReader.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8364135\n+ * @summary Test verifies that jpeg image reader throws\n+ *          IndexOutOfBoundsException when \"-1\" image index is used.\n+ * @run main JpegNegativeImageIndexTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageReader;\n+\n+public class JpegNegativeImageIndexTest {\n+\n+    private static boolean failed;\n+\n+    private static void checkException(boolean exceptionReceived,\n+                                       String testName) {\n+        if (!exceptionReceived) {\n+            System.out.println(\"Didn't receive IndexOutOfBoundsException for \"\n+                + testName);\n+            failed = true;\n+        }\n+    }\n+\n+    private static void testMethod(String methodName,\n+                                   RunnableWithException method) {\n+        boolean exceptionReceived = false;\n+        System.out.println(\"Testing \" + methodName);\n+        try {\n+            method.run();\n+        } catch (Exception e) {\n+            if (e instanceof IndexOutOfBoundsException) {\n+                exceptionReceived = true;\n+            }\n+        }\n+        checkException(exceptionReceived, methodName);\n+    }\n+\n+    private interface RunnableWithException {\n+        void run() throws Exception;\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        Iterator<ImageReader> readers =\n+            ImageIO.getImageReadersByFormatName(\"jpeg\");\n+        if (!readers.hasNext()) {\n+            throw new RuntimeException(\"No jpeg image readers found\");\n+        }\n+\n+        ImageReader ir = readers.next();\n+\n+        testMethod(\"getImageTypes()\", () -> ir.getImageTypes(-1));\n+        testMethod(\"getWidth()\", () -> ir.getWidth(-1));\n+        testMethod(\"getHeight()\", () -> ir.getHeight(-1));\n+        testMethod(\"getRawImageType()\", () -> ir.getRawImageType(-1));\n+\n+        if (failed) {\n+            throw new RuntimeException(\"JpegImageReader didn't throw required\" +\n+                \" IndexOutOfBoundsException for -1 image index\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegNegativeImageIndexTest.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}