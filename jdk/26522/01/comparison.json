{"files":[{"patch":"@@ -394,0 +394,6 @@\n+    private void checkNegativeImageIndex(int imageIndex) {\n+        if (imageIndex < minIndex) {\n+            throw new IndexOutOfBoundsException(\"imageIndex < \" + minIndex);\n+        }\n+    }\n+\n@@ -500,3 +506,1 @@\n-        if (imageIndex < minIndex) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+        checkNegativeImageIndex(imageIndex);\n@@ -843,0 +847,1 @@\n+        checkNegativeImageIndex(imageIndex);\n@@ -857,0 +862,1 @@\n+        checkNegativeImageIndex(imageIndex);\n@@ -887,0 +893,1 @@\n+        checkNegativeImageIndex(imageIndex);\n@@ -905,0 +912,1 @@\n+        checkNegativeImageIndex(imageIndex);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageReader.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug     8364135\n+ * @summary Test verifies that jpeg image reader throws\n+ *          IndexOutOfBoundsException when \"-1\" image index is used.\n+ * @run main JpegNegativeImageIndexTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Objects;\n+\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageReader;\n+import javax.imageio.ImageTypeSpecifier;\n+\n+public class JpegNegativeImageIndexTest {\n+\n+    static boolean passed;\n+\n+    public static void main(String[] args) throws IOException {\n+        Iterator<ImageReader> readers =\n+            ImageIO.getImageReadersByFormatName(\"jpeg\");\n+        if (!readers.hasNext()) {\n+            throw new RuntimeException(\"No jpeg image readers found\");\n+        }\n+\n+        ImageReader ir = readers.next();\n+        try {\n+            \/\/ Iterate through all functions where we don't have sufficient\n+            \/\/ checks for -1 index\n+            Iterator<ImageTypeSpecifier> types = ir.getImageTypes(-1);\n+            int width = ir.getWidth(-1);\n+            int height = ir.getHeight(-1);\n+            ImageTypeSpecifier specifier = ir.getRawImageType(-1);\n+        } catch (IndexOutOfBoundsException e) {\n+            if (Objects.equals(e.getMessage(), \"imageIndex < 0\")) {\n+                passed = true;\n+            }\n+        }\n+        if (!passed) {\n+            throw new RuntimeException(\"JpegImageReader didn't throw required\"\n+                + \" IndexOutOfBoundsException for -1 image index\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/JpegNegativeImageIndexTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}