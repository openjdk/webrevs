{"files":[{"patch":"@@ -32,1 +32,1 @@\n-import jdk.internal.access.JavaObjectStreamDefaultSupportAccess;\n+import jdk.internal.access.JavaObjectStreamReflectionAccess;\n@@ -145,1 +145,1 @@\n-    static final class Access implements JavaObjectStreamDefaultSupportAccess {\n+    static final class Access implements JavaObjectStreamReflectionAccess {\n@@ -147,1 +147,1 @@\n-            SharedSecrets.setJavaObjectStreamDefaultSupportAccess(new Access());\n+            SharedSecrets.setJavaObjectStreamReflectionAccess(new Access());\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamReflection.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-public interface JavaObjectStreamDefaultSupportAccess {\n+public interface JavaObjectStreamReflectionAccess {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaObjectStreamReflectionAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaObjectStreamDefaultSupportAccess.java","status":"renamed"},{"patch":"@@ -76,1 +76,1 @@\n-    private static JavaObjectStreamDefaultSupportAccess javaObjectStreamDefaultSupportAccess;\n+    private static JavaObjectStreamReflectionAccess javaObjectStreamReflectionAccess;\n@@ -457,2 +457,2 @@\n-    public static JavaObjectStreamDefaultSupportAccess getJavaObjectStreamDefaultSupportAccess() {\n-        var access = javaObjectStreamDefaultSupportAccess;\n+    public static JavaObjectStreamReflectionAccess getJavaObjectStreamReflectionAccess() {\n+        var access = javaObjectStreamReflectionAccess;\n@@ -461,2 +461,2 @@\n-                Class.forName(\"java.io.ObjectStreamDefaultSupport$Access\", true, null);\n-                access = javaObjectStreamDefaultSupportAccess;\n+                Class.forName(\"java.io.ObjectStreamReflection$Access\", true, null);\n+                access = javaObjectStreamReflectionAccess;\n@@ -468,2 +468,2 @@\n-    public static void setJavaObjectStreamDefaultSupportAccess(JavaObjectStreamDefaultSupportAccess access) {\n-        javaObjectStreamDefaultSupportAccess = access;\n+    public static void setJavaObjectStreamReflectionAccess(JavaObjectStreamReflectionAccess access) {\n+        javaObjectStreamReflectionAccess = access;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-import jdk.internal.access.JavaObjectStreamDefaultSupportAccess;\n+import jdk.internal.access.JavaObjectStreamReflectionAccess;\n@@ -77,1 +77,1 @@\n-    private final JavaObjectStreamDefaultSupportAccess javaObjectStreamDefaultSupportAccess;\n+    private final JavaObjectStreamReflectionAccess javaObjectStreamDefaultSupportAccess;\n@@ -80,1 +80,1 @@\n-        this.javaObjectStreamDefaultSupportAccess = SharedSecrets.getJavaObjectStreamDefaultSupportAccess();\n+        this.javaObjectStreamDefaultSupportAccess = SharedSecrets.getJavaObjectStreamReflectionAccess();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.lang.reflect.Proxy;\n@@ -829,1 +828,0 @@\n-        Assert.assertEquals(factory.serialVersionUID(Ser3.class), -1234752876749422678L);\n@@ -833,15 +831,0 @@\n-        Assert.assertEquals(factory.serialVersionUID(Ext1.class), 7109990719266285013L);\n-        Assert.assertEquals(factory.serialVersionUID(Ext2.class), 0);\n-        Assert.assertEquals(factory.serialVersionUID(Rec1.class), 12349876L);\n-        \/\/ make sure we cannot access the forbidden ones\n-        Assert.assertEquals(factory.serialVersionUID(Object.class), 0);\n-        Assert.assertEquals(factory.serialVersionUID(Enum1.class), 0);\n-        Assert.assertEquals(factory.serialVersionUID(\n-            Proxy.newProxyInstance(\n-                ReflectionFactoryTest.class.getClassLoader(),\n-                new Class<?>[] { Proxy1.class },\n-                (_, _, _) -> null).getClass()\n-            ), 0\n-        );\n-        Assert.assertEquals(factory.serialVersionUID(byte[].class), 0);\n-        Assert.assertEquals(factory.serialVersionUID(Externalizable.class), 0);\n","filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"}]}