[{"commit":{"message":"Merge remote-tracking branch 'upstream-jdk\/master' into serialization"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java"}],"sha":"d57c4346f3784a6c0583ffa023c9d2a60e53869c"},{"commit":{"message":"Round out the documentation of the new methods to explain the supported and unsupported cases"},"files":[{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java"}],"sha":"997dba08646df47e257f1f3b6dde2b158f27879f"},{"commit":{"message":"Move `serialPersistentFields` for a degree of method order consistency"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java"}],"sha":"11bc95e86a97d0464cb4a89922f77a7f6641dede"},{"commit":{"message":"Address review feedback"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamReflection.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"}],"sha":"38f7b79a458c62cac9cd3b7f04026dd3cdcdff36"},{"commit":{"message":"Test fixes and finish renaming"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamReflection.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaObjectStreamReflectionAccess.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java"}],"sha":"34d45238739e19bad4cea7553c9fe845b85a9511"},{"commit":{"message":"Address review feedback"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamReflection.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java"}],"sha":"bf658a394e96f600f509dce80a881b79360e5de0"},{"commit":{"message":"Address review comment"},"files":[],"sha":"2a734c5e683b3b2baa7caa7bc3c4b269a23cbe77"},{"commit":{"message":"Eliminate cache"},"files":[],"sha":"1d8f1b2234ad89b94d94d08530115ba14b9408ba"},{"commit":{"message":"Rework using facilities found in ObjectStreamClass\n\nThis variation has the disadvantage of requiring a couple temporary arrays to be allocated each time the method handles are used."},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java"}],"sha":"7155da158100afb4d51e4c8f030f47c38ba32348"},{"commit":{"message":"More tests"},"files":[{"filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java"}],"sha":"e7334655659c5fad8e9be70303a9720768edb4c3"},{"commit":{"message":"Restrict field set to those defined by serialPersistentFields"},"files":[],"sha":"a02fb6e80ad095ce49206d6e29f5ce281db7c14a"},{"commit":{"message":"More tests and fixes"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java"}],"sha":"b2cc30d867f9e8c793cc5a094088b9296b83b161"},{"commit":{"message":"Add tests for static accessors"},"files":[{"filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java"}],"sha":"e23d01f7bc034a92dafe7509d55205a8c5ea15d9"},{"commit":{"message":"Missed one"},"files":[{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java"}],"sha":"d6f5ccdbdeb869e02c52b217bc9356f579e3b99a"},{"commit":{"message":"Apply review feedback"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java"},{"filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java"}],"sha":"236a0730a569bed3bf8cec65778d17456b8a814c"},{"commit":{"message":"Fix security manager permissions for test"},"files":[],"sha":"d137f43b00e935e9fbcaeaa80fdff93a0a2df44b"},{"commit":{"message":"Neaten if statement"},"files":[],"sha":"0d3def87f1eb310519a8e7ad5e111f9ea99332eb"},{"commit":{"message":"Unused field"},"files":[],"sha":"a9418da77287e953a6f4561605475a2821d8695d"},{"commit":{"message":"Move bytecode gen back to `jdk.internal.reflect`, use unprivileged lookup for class definition"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"}],"sha":"2c9b1c5804dce4d607c6ea35374347e78b68dc1c"},{"commit":{"message":"Move generator to JLI"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java"}],"sha":"8d46c2867cac4fc4d2af3c9b36ec06ae13b5e4e3"},{"commit":{"message":"Avoid security manager error and improve test name"},"files":[{"filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java"}],"sha":"4e68264689bbbf8e5cf2876ac8dc80e4e7f44f6c"},{"commit":{"message":"Interim access solution, plus test"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java"}],"sha":"64d32cc2273d440b26f3bfa1d97a7f8444a83d68"},{"commit":{"message":"Instead of using a public constant bootstrap, define the readObject helper method using a (possibly empty) list of final field setter method handles"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"}],"sha":"b81b1c79d02f091fc1d8ba5d3c6cd2e88d1d4f03"},{"commit":{"message":"Centralize the check for class serializability, add more cases therein, and add methods to get the serialPersistentFields and serialVersionUID of a serializable class"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java"}],"sha":"d88006b67b05e7f7cb578c93dea98b44030db3e3"},{"commit":{"message":"Improve documentation of `findSetterForSerialization`"},"files":[],"sha":"0941a5de440102c229309984862024a29d40aa3a"},{"commit":{"message":"Try a safer access checking strategy"},"files":[],"sha":"11738ffb4058ad025436d7463bf66727e7fdb5e5"},{"commit":{"message":"Minor docs fix, use Modifier.isXxx() on constant bootstrap, use conventional exception mapping"},"files":[],"sha":"48aeac555069d792bdd747399ba4effa57bc306a"},{"commit":{"message":"Copyright"},"files":[],"sha":"12acab0b762406c976bae69dce2177e6a6a19849"},{"commit":{"message":"Use Modifier.isFinal()"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"}],"sha":"d53fc77df03009597092aff301b9baddb812fb03"},{"commit":{"message":"More cleanups, forbid usage on Externalizable classes"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"}],"sha":"a78ad0d736fddea7aa9822a8340066509c09a96b"},{"commit":{"message":"Copyright"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java"}],"sha":"265ef311cd17a9b9c9e8ef10d47b82e177077220"},{"commit":{"message":"Small optimization in `fieldSetterForSerialization`"},"files":[],"sha":"797caca511a439c7562859cff4eef34e337cc1ef"},{"commit":{"message":"Add `@since` tag"},"files":[{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java"}],"sha":"93d02ec6286a7ce82f789d42bae3e33fcb5d22b4"},{"commit":{"message":"Restrict using new methods with enums, records, hidden\nIntroduce constants\nCleanups"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"}],"sha":"d36f05e8627015bf85eba1e85d2ffc72a8c0d808"},{"commit":{"message":"Move bootstrap method to `ConstantBootstraps`"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java"}],"sha":"2f0642a52dc69a798d599ecc9293a483432b2531"},{"commit":{"message":"Use `unreflectGetter` for access checking"},"files":[{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java"}],"sha":"12eb7e84e3f3d8aaa92c99bef76ed83597c7f583"},{"commit":{"message":"WIP: Generate readObject\/writeObject variants"},"files":[{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java"},{"filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java"}],"sha":"430b5d3b618154a66f03acf4d7a095c046a89687"}]