{"files":[{"patch":"@@ -456,22 +456,0 @@\n-    public final ObjectStreamField[] serialPersistentFields(Class<?> cl) {\n-        if (! Serializable.class.isAssignableFrom(cl) || cl.isInterface() || cl.isEnum()) {\n-            return null;\n-        }\n-\n-        try {\n-            Field field = cl.getDeclaredField(\"serialPersistentFields\");\n-            int mods = field.getModifiers();\n-            if (! (Modifier.isStatic(mods) && Modifier.isPrivate(mods) && Modifier.isFinal(mods))) {\n-                return null;\n-            }\n-            if (field.getType() != ObjectStreamField[].class) {\n-                return null;\n-            }\n-            field.setAccessible(true);\n-            ObjectStreamField[] array = (ObjectStreamField[]) field.get(null);\n-            return array != null && array.length > 0 ? array.clone() : array;\n-        } catch (ReflectiveOperationException e) {\n-            return null;\n-        }\n-    }\n-\n@@ -607,0 +585,22 @@\n+    public final ObjectStreamField[] serialPersistentFields(Class<?> cl) {\n+        if (! Serializable.class.isAssignableFrom(cl) || cl.isInterface() || cl.isEnum()) {\n+            return null;\n+        }\n+\n+        try {\n+            Field field = cl.getDeclaredField(\"serialPersistentFields\");\n+            int mods = field.getModifiers();\n+            if (! (Modifier.isStatic(mods) && Modifier.isPrivate(mods) && Modifier.isFinal(mods))) {\n+                return null;\n+            }\n+            if (field.getType() != ObjectStreamField[].class) {\n+                return null;\n+            }\n+            field.setAccessible(true);\n+            ObjectStreamField[] array = (ObjectStreamField[]) field.get(null);\n+            return array != null && array.length > 0 ? array.clone() : array;\n+        } catch (ReflectiveOperationException e) {\n+            return null;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -182,13 +182,0 @@\n-    \/**\n-     * {@return the declared <code>serialPersistentFields<\/code> from a serializable class,\n-     * or <code>null<\/code> if none is declared or the class is not a valid\n-     * serializable class}\n-     *\n-     * @param cl a Serializable class\n-     *\n-     * @since 24\n-     *\/\n-    public final ObjectStreamField[] serialPersistentFields(Class<?> cl) {\n-        return delegate.serialPersistentFields(cl);\n-    }\n-\n@@ -282,0 +269,13 @@\n+\n+    \/**\n+     * {@return the declared <code>serialPersistentFields<\/code> from a serializable class,\n+     * or <code>null<\/code> if none is declared or the class is not a valid\n+     * serializable class}\n+     *\n+     * @param cl a Serializable class\n+     *\n+     * @since 24\n+     *\/\n+    public final ObjectStreamField[] serialPersistentFields(Class<?> cl) {\n+        return delegate.serialPersistentFields(cl);\n+    }\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"}]}