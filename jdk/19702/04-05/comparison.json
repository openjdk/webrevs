{"files":[{"patch":"@@ -74,2 +74,4 @@\n-     * @throws IOException if the call to {@link ObjectInputStream#readFields} or one of its field accessors throws this exception type\n-     * @throws ClassNotFoundException if the call to {@link ObjectInputStream#readFields} or one of its field accessors throws this exception type\n+     * @throws IOException if the call to {@link ObjectInputStream#readFields}\n+     *                     or one of its field accessors throws this exception type\n+     * @throws ClassNotFoundException if the call to {@link ObjectInputStream#readFields}\n+     *                                or one of its field accessors throws this exception type\n@@ -77,1 +79,2 @@\n-    private static void defaultReadObject(ObjectStreamClass streamClass, Object obj, ObjectInputStream ois) throws IOException, ClassNotFoundException {\n+    private static void defaultReadObject(ObjectStreamClass streamClass, Object obj, ObjectInputStream ois)\n+            throws IOException, ClassNotFoundException {\n@@ -97,1 +100,0 @@\n-        streamClass.setPrimFieldValues(obj, bytes);\n@@ -99,0 +101,1 @@\n+        streamClass.setPrimFieldValues(obj, bytes);\n@@ -118,1 +121,2 @@\n-     * @throws IOException if the call to {@link ObjectInputStream#readFields} or one of its field accessors throws this exception type\n+     * @throws IOException if the call to {@link ObjectInputStream#readFields}\n+     *                     or one of its field accessors throws this exception type\n@@ -120,1 +124,2 @@\n-    private static void defaultWriteObject(ObjectStreamClass streamClass, Object obj, ObjectOutputStream oos) throws IOException {\n+    private static void defaultWriteObject(ObjectStreamClass streamClass, Object obj, ObjectOutputStream oos)\n+            throws IOException {\n@@ -151,2 +156,1 @@\n-            ObjectStreamClass streamClass = getStreamClass(clazz);\n-            return streamClass == null ? null : DRO_HANDLE.bindTo(streamClass).asType(MethodType.methodType(void.class, streamClass.forClass(), ObjectInputStream.class));\n+            return handleForClass(DRO_HANDLE, clazz, ObjectInputStream.class);\n@@ -156,2 +160,1 @@\n-            ObjectStreamClass streamClass = getStreamClass(clazz);\n-            return streamClass == null ? null : DWO_HANDLE.bindTo(streamClass).asType(MethodType.methodType(void.class, streamClass.forClass(), ObjectOutputStream.class));\n+            return handleForClass(DWO_HANDLE, clazz, ObjectOutputStream.class);\n@@ -160,1 +163,1 @@\n-        private static ObjectStreamClass getStreamClass(final Class<?> clazz) {\n+        private static MethodHandle handleForClass(final MethodHandle handle, final Class<?> clazz, final Class<?> ioClass) {\n@@ -162,7 +165,8 @@\n-            if (streamClass == null) {\n-                return null;\n-            }\n-            try {\n-                streamClass.checkDefaultSerialize();\n-            } catch (InvalidClassException e) {\n-                return null;\n+            if (streamClass != null) {\n+                try {\n+                    streamClass.checkDefaultSerialize();\n+                    return handle.bindTo(streamClass)\n+                        .asType(MethodType.methodType(void.class, clazz, ioClass));\n+                } catch (InvalidClassException e) {\n+                    \/\/ ignore and return null\n+                }\n@@ -170,1 +174,1 @@\n-            return streamClass;\n+            return null;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamReflection.java","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    private final JavaObjectStreamReflectionAccess javaObjectStreamDefaultSupportAccess;\n+    private final JavaObjectStreamReflectionAccess javaObjectStreamReflectionAccess;\n@@ -80,1 +80,1 @@\n-        this.javaObjectStreamDefaultSupportAccess = SharedSecrets.getJavaObjectStreamReflectionAccess();\n+        this.javaObjectStreamReflectionAccess = SharedSecrets.getJavaObjectStreamReflectionAccess();\n@@ -445,1 +445,1 @@\n-        return javaObjectStreamDefaultSupportAccess.defaultReadObject(cl);\n+        return javaObjectStreamReflectionAccess.defaultReadObject(cl);\n@@ -453,1 +453,1 @@\n-        return javaObjectStreamDefaultSupportAccess.defaultWriteObject(cl);\n+        return javaObjectStreamReflectionAccess.defaultWriteObject(cl);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}