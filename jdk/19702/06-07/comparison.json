{"files":[{"patch":"@@ -164,3 +164,28 @@\n-     * Returns a direct MethodHandle for a variation of {@code readObject}\n-     * which always initializes its fields from the stream\n-     * {@link ObjectInputStream#readFields()} mechanism.\n+     * Generate and return a direct MethodHandle which implements\n+     * the general default behavior for serializable class's {@code readObject}.\n+     * The generated method behaves in accordance with the\n+     * Java Serialization specification's rules for that method.\n+     * <p>\n+     * The generated method will invoke {@link ObjectInputStream#readFields()}\n+     * to acquire the stream field values. The serialization fields of the class will\n+     * then be populated from the stream values.\n+     * <p>\n+     * Only fields which are eligible for default serialization will be populated.\n+     * This includes only fields which are not {@code transient} and not {@code static}\n+     * (even if the field is {@code final} or {@code private}).\n+     * <p>\n+     * Requesting a default serialization method for a class in a disallowed\n+     * category is not supported; {@code null} will be returned for such classes.\n+     * The disallowed categories include (but are not limited to):\n+     * <ul>\n+     *     <li>Classes which do not implement {@code Serializable}<\/li>\n+     *     <li>Classes which implement {@code Externalizable}<\/li>\n+     *     <li>Classes which are specially handled by the Java Serialization specification,\n+     *     including record classes, enum constant classes, {@code Class}, {@code String},\n+     *     array classes, reflection proxy classes, and hidden classes<\/li>\n+     *     <li>Classes which declare a valid {@code serialPersistentFields} value<\/li>\n+     *     <li>Any special types which may possibly be added to the JDK or the Java language\n+     *     in the future which in turn might require special handling by the\n+     *     provisions of the corresponding future version of the Java Serialization\n+     *     specification<\/li>\n+     * <\/ul>\n@@ -174,1 +199,1 @@\n-     *          or {@code null} if the class is not serializable\n+     *          or {@code null} if the class falls in a disallowed category\n@@ -198,3 +223,31 @@\n-     * Returns a direct MethodHandle for a variation of {@code writeObject}\n-     * which always writes its fields to the stream\n-     * {@link ObjectOutputStream#putFields()} mechanism.\n+     * Generate and return a direct MethodHandle which implements\n+     * the general default behavior for serializable class's {@code writeObject}.\n+     * The generated method behaves in accordance with the\n+     * Java Serialization specification's rules for that method.\n+     * <p>\n+     * The generated method will invoke {@link ObjectOutputStream#putFields}\n+     * to acquire the buffer for the stream field values. The buffer will\n+     * be populated from the serialization fields of the class. The buffer\n+     * will then be flushed to the stream using the\n+     * {@link ObjectOutputStream#writeFields()} method.\n+     * <p>\n+     * Only fields which are eligible for default serialization will be written\n+     * to the buffer.\n+     * This includes only fields which are not {@code transient} and not {@code static}\n+     * (even if the field is {@code final} or {@code private}).\n+     * <p>\n+     * Requesting a default serialization method for a class in a disallowed\n+     * category is not supported; {@code null} will be returned for such classes.\n+     * The disallowed categories include (but are not limited to):\n+     * <ul>\n+     *     <li>Classes which do not implement {@code Serializable}<\/li>\n+     *     <li>Classes which implement {@code Externalizable}<\/li>\n+     *     <li>Classes which are specially handled by the Java Serialization specification,\n+     *     including record classes, enum constant classes, {@code Class}, {@code String},\n+     *     array classes, reflection proxy classes, and hidden classes<\/li>\n+     *     <li>Classes which declare a valid {@code serialPersistentFields} value<\/li>\n+     *     <li>Any special types which may possibly be added to the JDK or the Java language\n+     *     in the future which in turn might require special handling by the\n+     *     provisions of the corresponding future version of the Java Serialization\n+     *     specification<\/li>\n+     * <\/ul>\n@@ -208,1 +261,1 @@\n-     *          or {@code null} if the class is not serializable\n+     *          or {@code null} if the class falls in a disallowed category\n@@ -271,3 +324,7 @@\n-     * {@return the declared <code>serialPersistentFields<\/code> from a serializable class,\n-     * or <code>null<\/code> if none is declared or the class is not a valid\n-     * serializable class}\n+     * {@return the declared {@code serialPersistentFields} from a\n+     * serializable class, or {@code null} if none is declared, the field\n+     * is declared but not valid, or the class is not a valid serializable class}\n+     * A class is a valid serializable class if it implements {@code Serializable}\n+     * but not {@code Externalizable}. The {@code serialPersistentFields} field\n+     * is valid if it meets the type and accessibility restrictions defined\n+     * by the Java Serialization specification.\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java","additions":68,"deletions":11,"binary":false,"changes":79,"status":"modified"}]}