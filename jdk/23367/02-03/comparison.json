{"files":[{"patch":"@@ -77,1 +77,1 @@\n-    if (cur->in_critical()) {\n+    if (cur->in_critical_atomic()) {\n@@ -93,1 +93,1 @@\n-  \/\/ in_critical()) variables form a Dekker duality. On the GC side, the\n+  \/\/ in_critical_atomic()) variables form a Dekker duality. On the GC side, the\n@@ -106,1 +106,1 @@\n-    while (cur->in_critical()) {\n+    while (cur->in_critical_atomic()) {\n@@ -125,1 +125,3 @@\n-void GCLocker::enter_slow(JavaThread* thread) {\n+void GCLocker::enter_slow(JavaThread* current_thread) {\n+  assert(current_thread == JavaThread::current(), \"Must be this thread\");\n+\n@@ -134,1 +136,1 @@\n-    thread->enter_critical();\n+    current_thread->enter_critical();\n@@ -143,1 +145,1 @@\n-    thread->exit_critical();\n+    current_thread->exit_critical();\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLocker.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  static void enter_slow(JavaThread* thread);\n+  static void enter_slow(JavaThread* current_thread);\n@@ -65,2 +65,2 @@\n-  inline static void enter(JavaThread* thread);\n-  inline static void exit(JavaThread* thread);\n+  inline static void enter(JavaThread* current_thread);\n+  inline static void exit(JavaThread* current_thread);\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLocker.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-void GCLocker::enter(JavaThread* thread) {\n-  assert(thread == JavaThread::current(), \"Must be this thread\");\n+void GCLocker::enter(JavaThread* current_thread) {\n+  assert(current_thread == JavaThread::current(), \"Must be this thread\");\n@@ -35,2 +35,2 @@\n-  if (!thread->in_critical()) {\n-    thread->enter_critical();\n+  if (!current_thread->in_critical()) {\n+    current_thread->enter_critical();\n@@ -42,1 +42,1 @@\n-      thread->exit_critical();\n+      current_thread->exit_critical();\n@@ -44,1 +44,1 @@\n-      enter_slow(thread);\n+      enter_slow(current_thread);\n@@ -49,1 +49,1 @@\n-    thread->enter_critical();\n+    current_thread->enter_critical();\n@@ -53,2 +53,2 @@\n-void GCLocker::exit(JavaThread* thread) {\n-  assert(thread == JavaThread::current(), \"Must be this thread\");\n+void GCLocker::exit(JavaThread* current_thread) {\n+  assert(current_thread == JavaThread::current(), \"Must be this thread\");\n@@ -57,1 +57,1 @@\n-  if (thread->in_last_critical()) {\n+  if (current_thread->in_last_critical()) {\n@@ -64,1 +64,1 @@\n-  thread->exit_critical();\n+  current_thread->exit_critical();\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLocker.inline.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -938,0 +938,3 @@\n+  \/\/ Atomic version; invoked by a thread other than the owning thread.\n+  bool in_critical_atomic() { return Atomic::load(&_jni_active_critical) > 0; }\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}