{"files":[{"patch":"@@ -351,0 +351,1 @@\n+        Color tabbedPaneBg = new Color(238, 238, 238);\n@@ -1023,0 +1024,3 @@\n+            \"TabbedPane.selected\", tabbedPaneBg,\n+            \"TabbedPane.contentOpaque\", Boolean.TRUE,\n+            \"TabbedPane.contentAreaColor\", tabbedPaneBg,\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKLookAndFeel.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -975,0 +975,3 @@\n+        \/\/ Fill the tab rect area\n+        g.fillRect(x, y, w, h);\n+\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKPainter.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -86,0 +86,3 @@\n+      <uiColor name=\"tabbedPaneContentArea\">\n+         <matte red=\"238\" green=\"238\" blue=\"238\" alpha=\"255\" hueOffset=\"0.0\" saturationOffset=\"0.0\" brightnessOffset=\"0.0\" alphaOffset=\"0\"\/>\n+      <\/uiColor>\n@@ -21649,0 +21652,4 @@\n+               <uiProperty name=\"contentOpaque\" type=\"BOOLEAN\" value=\"true\"\/>\n+               <uiProperty name=\"contentAreaColor\" type=\"COLOR\">\n+                  <matte red=\"238\" green=\"238\" blue=\"238\" alpha=\"255\" uiDefaultParentName=\"tabbedPaneContentArea\" hueOffset=\"0.0\" saturationOffset=\"0.0\" brightnessOffset=\"0.0\" alphaOffset=\"0\"\/>\n+               <\/uiProperty>\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/nimbus\/skin.laf","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.awt.Color;\n@@ -124,0 +125,6 @@\n+    \/\/ Background color for selected tab and content pane\n+    private Color selectColor;\n+    \/\/ Background color for unselected tabs\n+    private Color unselectedBackground;\n+    private boolean contentOpaque = true;\n+\n@@ -149,0 +156,2 @@\n+        selectColor = UIManager.getColor(\"TabbedPane.selected\");\n+        contentOpaque = UIManager.getBoolean(\"TabbedPane.contentOpaque\");\n@@ -639,0 +648,7 @@\n+\n+        if (isSelected) {\n+            g.setColor( selectColor );\n+        } else {\n+            g.setColor(getUnselectedBackgroundAt(tabIndex));\n+        }\n+\n@@ -658,0 +674,2 @@\n+        }\n+    }\n@@ -659,1 +677,4 @@\n-\n+    private Color getUnselectedBackgroundAt(int index) {\n+        Color color = tabPane.getBackgroundAt(index);\n+        if (color instanceof UIResource && unselectedBackground != null) {\n+            return unselectedBackground;\n@@ -661,0 +682,1 @@\n+        return color;\n@@ -740,0 +762,16 @@\n+\n+        if (tabPane.getTabCount() > 0 && (contentOpaque || tabPane.isOpaque())) {\n+            \/\/ Fill region behind content area\n+            Color color = UIManager.getColor(\"TabbedPane.contentAreaColor\");\n+            if (color != null) {\n+                g.setColor(color);\n+            } else if (selectColor == null || selectedIndex == -1) {\n+                g.setColor(tabPane.getBackground());\n+            } else {\n+                g.setColor(selectColor);\n+            }\n+        }\n+\n+        \/\/ fill content area rect for both GTK and Nimbus LAF here\n+        g.fillRect(x, y, w, h);\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthTabbedPaneUI.java","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.GridLayout;\n+import javax.swing.AbstractAction;\n+import javax.swing.AbstractButton;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+\/*\n+ * @test\n+ * @bug 8226990\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test JTabbedPane's contentarea, tab area and tab color\n+ *          for different LAFs when opacity is enabled or disabled.\n+ * @run main\/manual TestJTabbedPaneOpaqueColor\n+ *\/\n+\n+public class TestJTabbedPaneOpaqueColor {\n+    private static JFrame frame;\n+    private static JTabbedPane tabPane;\n+    private static final String INSTRUCTIONS = \"\"\"\n+            The background color of panel (which contains the tabbed pane\n+                    is green.\n+            The background color of the tabbed pane is red.\n+\n+             Check the default behaviour of the tabbed pane:\n+                - the area behind tabs is transparent (it must be green).\n+                - the tabs area is opaque (it must be red, except the selected\n+                    \"tab which must be gray).\n+                - the content area is opaque(it must be gray).\n+\n+             Click to the check box 'opaque'. And be sure that\n+                - the area behind tabs is opaque (it must be red).\n+                - the tabs area is opaque (it must be red, except the selected\n+                    \"tab which must be gray).\n+                - the content area is opaque (it must be gray).\n+\n+             Check this behaviour for other LAFs and tab layout.\n+             NOTE: For Nimbus LAF, tabs color are specific to nimbus style.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"JTabbedPane Tab and Content Area Color Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(10)\n+                .rows(18)\n+                .columns(60)\n+                .build();\n+        SwingUtilities.invokeAndWait(\n+                TestJTabbedPaneOpaqueColor::createAndShowUI);\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    private static void createAndShowUI() {\n+        int NUM_TABS = 5;\n+        frame = new JFrame(\"Test JTabbedPane Opaque Color\");\n+        JTabbedPane tabPane = new JTabbedPane();\n+        tabPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n+        tabPane.setTabPlacement(JTabbedPane.TOP);\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(\n+                frame, PassFailJFrame.Position.HORIZONTAL);\n+        for (int i = 0; i < NUM_TABS; ++i) {\n+            tabPane.addTab(\"Tab \" + i , new JLabel(\"Content Area\"));\n+        }\n+        JPanel panel = new JPanel(new BorderLayout());\n+        panel.add(tabPane, BorderLayout.CENTER);\n+        panel.setBackground(Color.green);\n+        tabPane.setBackground(Color.red);\n+\n+        UIManager.LookAndFeelInfo[] laf = UIManager.getInstalledLookAndFeels();\n+        JPanel lafButtonPanel = new JPanel(new GridLayout(1, 3));\n+        for (int i = 0; i < laf.length; ++i) {\n+            if (laf[i].getName().contains(\"Motif\")\n+                || laf[i].getName().contains(\"Windows\")) {\n+                continue;\n+            }\n+            JButton button = new JButton(laf[i].getName());\n+            button.setText(laf[i].getName());\n+            button.addActionListener(new MyAction());\n+            lafButtonPanel.add(button);\n+        }\n+\n+        JButton scrollButton = new JButton(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                tabPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n+            }\n+        });\n+        scrollButton.setText(\"SCROLL layout\");\n+\n+        JPanel layoutButtonPanel = new JPanel(new GridLayout(1, 2));\n+        JButton wrapButton = new JButton(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                tabPane.setTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);\n+            }\n+        });\n+        wrapButton.setText(\"WRAP layout\");\n+\n+        layoutButtonPanel.add(scrollButton);\n+        layoutButtonPanel.add(wrapButton);\n+\n+        JCheckBox checkBox = new JCheckBox(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                tabPane.setOpaque(((AbstractButton)e.getSource()).isSelected());\n+                tabPane.repaint();\n+            }\n+        });\n+        checkBox.setText(\"Opaque\");\n+\n+        JPanel nestedPanels = new JPanel(new GridLayout(2, 1));\n+        nestedPanels.add(lafButtonPanel);\n+        nestedPanels.add(layoutButtonPanel);\n+        panel.add(checkBox, BorderLayout.NORTH);\n+        panel.add(nestedPanels, BorderLayout.SOUTH);\n+        frame.add(panel);\n+        frame.setSize(500, 500);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+\n+    public static class MyAction implements ActionListener {\n+        public void actionPerformed(ActionEvent ae) {\n+            String lafClassName = null;\n+            UIManager.LookAndFeelInfo lafs[] = UIManager.getInstalledLookAndFeels();\n+            for (int i = 0; i < lafs.length; i++) {\n+                if (ae.getActionCommand().equals(lafs[i].getName())) {\n+                    lafClassName = lafs[i].getClassName();\n+                    break;\n+                }\n+            }\n+            try {\n+                UIManager.setLookAndFeel(lafClassName);\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+                createAndShowUI();\n+            } catch (UnsupportedLookAndFeelException ignored) {\n+                System.out.println(\"Unsupported LAF: \" + lafClassName);\n+            } catch (ClassNotFoundException | InstantiationException\n+                     | IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/TestJTabbedPaneOpaqueColor.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"}]}