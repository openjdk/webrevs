{"files":[{"patch":"@@ -1026,0 +1026,1 @@\n+            \"TabbedPane.tabsOpaque\", Boolean.TRUE,\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKLookAndFeel.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -21653,0 +21653,1 @@\n+               <uiProperty name=\"tabsOpaque\" type=\"BOOLEAN\" value=\"true\"\/>\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/nimbus\/skin.laf","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+    private boolean tabsOpaque = true;\n@@ -158,0 +159,1 @@\n+        tabsOpaque = UIManager.getBoolean(\"TabbedPane.tabsOpaque\");\n@@ -655,2 +657,4 @@\n-        tabContext.getPainter().paintTabbedPaneTabBackground(tabContext, g,\n-                x, y, width, height, tabIndex, placement);\n+        if (tabsOpaque || tabPane.isOpaque()) {\n+            tabContext.getPainter().paintTabbedPaneTabBackground(tabContext, g,\n+                    x, y, width, height, tabIndex, placement);\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/synth\/SynthTabbedPaneUI.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -57,0 +57,3 @@\n+            The TabbedPane is not opaque initially.\n+            For 'Content Opaque' and 'Tabs Opaque' to have effect, tab pane opacity should\n+            be set to false i.e. Opaque checkbox should be unchecked.\n@@ -63,0 +66,2 @@\n+            Test Case 1 (Test TabPane Opaque behaviour):\n+\n@@ -68,0 +73,18 @@\n+            Check this behaviour for other LAFs and tab layout.\n+            NOTE: For Nimbus LAF, tabs color are specific to nimbus style.\n+\n+            Test Case 2 (Test Content Opaque UI property):\n+            To enable Content Opaque checkbox, make Sure \"Opaque checkbox\" is not selected.\n+\n+            Click to the check box 'content opaque' and be sure that\n+              - the content area is transparent (it must be green).\n+              - Select the 'content opaque' and check that content area is opaque\n+                (it must be gray).\n+            Check this behaviour for other LAFs and tab layout.\n+\n+            Test Case 3 (Test Tabs Opaque UI property):\n+            Click to the check box 'tabs opaque' and be sure that\n+              - the tabs are transparent (it must be green).\n+              - Check the 'tabs opaque' and check that tabs are opaque,\n+                (it must be red, except the selected tab which must be gray).\n+\n@@ -76,1 +99,1 @@\n-            .rows(18)\n+            .rows(25)\n@@ -131,1 +154,31 @@\n-        JCheckBox checkBox = new JCheckBox(new AbstractAction() {\n+        JCheckBox contentOpaqueChkBox = new JCheckBox(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                if (((AbstractButton)e.getSource()).isSelected()) {\n+                    UIManager.put(\"TabbedPane.contentOpaque\", Boolean.TRUE);\n+                } else {\n+                    UIManager.put(\"TabbedPane.contentOpaque\", Boolean.FALSE);\n+                }\n+                tabPane.repaint();\n+                SwingUtilities.updateComponentTreeUI(frame);\n+            }\n+        });\n+        contentOpaqueChkBox.setText(\"Content Opaque\");\n+        contentOpaqueChkBox.setSelected(true);\n+        contentOpaqueChkBox.setEnabled(true);\n+\n+        JCheckBox tabOpaqueChkBox = new JCheckBox(new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+                if (((AbstractButton)e.getSource()).isSelected()) {\n+                    UIManager.put(\"TabbedPane.tabsOpaque\", Boolean.TRUE);\n+                } else {\n+                    UIManager.put(\"TabbedPane.tabsOpaque\", Boolean.FALSE);\n+                }\n+                tabPane.repaint();\n+                SwingUtilities.updateComponentTreeUI(frame);\n+            }\n+        });\n+        tabOpaqueChkBox.setText(\"Tabs Opaque\");\n+        tabOpaqueChkBox.setSelected(true);\n+        tabOpaqueChkBox.setEnabled(true);\n+\n+        JCheckBox tabPaneOpaqueChkBox = new JCheckBox(new AbstractAction() {\n@@ -134,0 +187,2 @@\n+                contentOpaqueChkBox.setEnabled(!((AbstractButton)e.getSource()).isSelected());\n+                tabOpaqueChkBox.setEnabled(!((AbstractButton)e.getSource()).isSelected());\n@@ -135,0 +190,1 @@\n+                SwingUtilities.updateComponentTreeUI(frame);\n@@ -137,1 +193,6 @@\n-        checkBox.setText(\"Opaque\");\n+        tabPaneOpaqueChkBox.setText(\"Opaque\");\n+\n+        JPanel checkBoxPanel = new JPanel();\n+        checkBoxPanel.add(tabPaneOpaqueChkBox);\n+        checkBoxPanel.add(contentOpaqueChkBox);\n+        checkBoxPanel.add(tabOpaqueChkBox);\n@@ -142,1 +203,1 @@\n-        panel.add(checkBox, BorderLayout.NORTH);\n+        panel.add(checkBoxPanel, BorderLayout.NORTH);\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/TestJTabbedPaneOpaqueColor.java","additions":65,"deletions":4,"binary":false,"changes":69,"status":"modified"}]}