{"files":[{"patch":"@@ -1,43 +0,0 @@\n-<!--\n- Copyright (c) 2007, 2013, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--\n-  @test\n-  @bug 6525850\n-  @summary Iconified frame gets shown after pack()\n-  @author anthony.petrov@...: area=awt.toplevel\n-  @run applet\/manual=yesno ShownOnPack.html\n-  -->\n-<head>\n-<title> ShownOnPack <\/title>\n-<\/head>\n-<body>\n-\n-<h1>ShownOnPack<br>Bug ID: 6525850<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"ShownOnPack.class\" WIDTH=200 HEIGHT=200><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/Frame\/ShownOnPack\/ShownOnPack.html","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,3 @@\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+\n@@ -25,5 +28,6 @@\n-  test\n-  @bug 6525850\n-  @summary Iconified frame gets shown after pack()\n-  @author anthony.petrov@...: area=awt.toplevel\n-  @run applet\/manual=yesno ShownOnPack.html\n+ * @test\n+ * @bug 6525850\n+ * @summary Iconified frame gets shown after pack()\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ShownOnPack\n@@ -31,195 +35,31 @@\n-\n-\n-\/**\n- * ShownOnPack.java\n- *\n- * summary:\n- *\/\n-\n-import java.applet.Applet;\n-import java.awt.*;\n-\n-public class ShownOnPack extends Applet\n-{\n-    \/\/Declare things used in the test, like buttons and labels here\n-    Frame f;\n-\n-    public void init()\n-    {\n-        \/\/Create instructions for the user here, as well as set up\n-        \/\/ the environment -- set the layout manager, add buttons,\n-        \/\/ etc.\n-        this.setLayout (new BorderLayout ());\n-\n-        String[] instructions =\n-        {\n-            \"This test creates an invisible and iconified frame that should not become visible.\",\n-            \"If you observe the window titled 'Should NOT BE SHOWN' in the taskbar, press FAIL,\",\n-            \"else press PASS\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n-\n-    }\/\/End  init()\n-\n-    public void start ()\n-    {\n-        \/\/Get things going.  Request focus, set size, et cetera\n-        setSize (200,200);\n-        setVisible(true);\n-        validate();\n-\n-        \/\/What would normally go into main() will probably go here.\n-        \/\/Use System.out.println for diagnostic messages that you want\n-        \/\/ to read after the test is done.\n-        \/\/Use Sysout.println for messages you want the tester to read.\n-        f = new Frame(\"Should NOT BE SHOWN\");\n-        f.setExtendedState(Frame.ICONIFIED);\n-        f.pack();\n-    }\/\/ start()\n-\n-    \/\/The rest of this class is the actions which perform the test...\n-\n-    \/\/Use Sysout.println to communicate with the user NOT System.out!!\n-    \/\/Sysout.println (\"Something Happened!\");\n-\n-}\/\/ class ShownOnPack\n-\n-\/* Place other classes related to the test after this line *\/\n-\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n+public class ShownOnPack {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This test creates an invisible and iconified frame that should not become visible.\n+\n+            If you observe the window titled 'Should NOT BE SHOWN' in the taskbar,\n+            press FAIL, otherwise press PASS\n+            \"\"\";\n+\n+    static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame shownOnPackInstructions = PassFailJFrame\n+                .builder()\n+                .title(\"ShownOnPack Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(5)\n+                .columns(50)\n+                .build();\n+\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"Should NOT BE SHOWN\");\n+            frame.setExtendedState(Frame.ICONIFIED);\n+            frame.pack();\n+        });\n+\n+        try {\n+            shownOnPackInstructions.awaitAndCheck();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> frame.dispose());\n+        }\n@@ -227,2 +67,1 @@\n-\n-}\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/ShownOnPack\/ShownOnPack.java","additions":42,"deletions":203,"binary":false,"changes":245,"status":"modified"}]}