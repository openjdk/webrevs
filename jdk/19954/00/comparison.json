{"files":[{"patch":"@@ -215,0 +215,1 @@\n+  LOG_TAG(vmlocks) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3743,0 +3743,7 @@\n+  if (log_is_enabled(Info, perf, vmlocks)) {\n+    if (!UsePerfData) {\n+      warning(\"Disabling -Xlog:perf+vmlocks since UsePerfData is turned off.\");\n+      LogConfiguration::configure_stdout(LogLevel::Off, false, LOG_TAGS(perf, vmlocks));\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -363,0 +364,2 @@\n+\n+  MutexLockerImpl::print_counters_on(tty);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -275,1 +275,1 @@\n-Mutex::Mutex(Rank rank, const char * name, bool allow_vm_block) : _owner(nullptr) {\n+Mutex::Mutex(Rank rank, const char * name, bool allow_vm_block) : _owner(nullptr), _id(-1) {\n@@ -279,0 +279,1 @@\n+  _id = MutexLocker::name2id(name);\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+  int _id;                               \/\/ ID for named mutexes\n@@ -197,0 +198,3 @@\n+  int      id() const { return _id; }\n+  void set_id(int id) { _id = id; }\n+\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/java.hpp\"\n@@ -35,0 +36,1 @@\n+#include \"services\/management.hpp\"\n@@ -188,1 +190,3 @@\n-  _mutex_array[_num_mutex++] = var;\n+  int id = _num_mutex++;\n+  _mutex_array[id] = var;\n+  var->set_id(id);\n@@ -374,0 +378,94 @@\n+static const int MAX_NAMES = 200;\n+static const char* _names[MAX_NAMES] = { nullptr };\n+static bool _is_unique[MAX_NAMES] = { false };\n+static int _num_names = 0;\n+\n+PerfCounter** MutexLockerImpl::_perf_lock_count     = nullptr;\n+PerfCounter** MutexLockerImpl::_perf_lock_wait_time = nullptr;\n+PerfCounter** MutexLockerImpl::_perf_lock_hold_time = nullptr;\n+\n+void MutexLockerImpl::init_counters() {\n+  if (log_is_enabled(Info, perf, vmlocks)) {\n+    ResourceMark rm;\n+    EXCEPTION_MARK;\n+    _perf_lock_count     = NEW_C_HEAP_ARRAY(PerfCounter*, MAX_NAMES + 1, mtInternal);\n+    _perf_lock_wait_time = NEW_C_HEAP_ARRAY(PerfCounter*, MAX_NAMES + 1, mtInternal);\n+    _perf_lock_hold_time = NEW_C_HEAP_ARRAY(PerfCounter*, MAX_NAMES + 1, mtInternal);\n+\n+    NEWPERFEVENTCOUNTER(_perf_lock_count[0],     SUN_RT, PerfDataManager::counter_name(\"Other\", \"Count\"));\n+    NEWPERFEVENTCOUNTER(_perf_lock_wait_time[0], SUN_RT, PerfDataManager::counter_name(\"Other\", \"BeforeTime\"));\n+    NEWPERFEVENTCOUNTER(_perf_lock_hold_time[0], SUN_RT, PerfDataManager::counter_name(\"Other\", \"AfterTime\"));\n+    for (int i = 0; i < MAX_NAMES; i++) {\n+      ResourceMark rm;\n+      const char* counter_name = _names[i];\n+      if (counter_name == nullptr) {\n+        stringStream ss;\n+        ss.print(\"UnnamedMutex#%d\", i);\n+        counter_name = ss.as_string();\n+      }\n+      NEWPERFEVENTCOUNTER(_perf_lock_count[i+1],       SUN_RT, PerfDataManager::counter_name(counter_name, \"Count\"));\n+      NEWPERFEVENTCOUNTER(_perf_lock_wait_time[i + 1], SUN_RT, PerfDataManager::counter_name(counter_name, \"BeforeTime\"));\n+      NEWPERFEVENTCOUNTER(_perf_lock_hold_time[i + 1], SUN_RT, PerfDataManager::counter_name(counter_name, \"AfterTime\"));\n+    }\n+    if (HAS_PENDING_EXCEPTION) {\n+      vm_exit_during_initialization(\"MutexLockerImpl::init_counters() failed unexpectedly\");\n+    }\n+  }\n+}\n+\n+int MutexLockerImpl::name2id(const char* name) {\n+  if (log_is_enabled(Info, perf, vmlocks)) {\n+    for (int i = 0; i < _num_names; i++) {\n+      if (strcmp(_names[i], name) == 0) {\n+        _is_unique[i] = false;\n+        return i;\n+      }\n+    }\n+    if (_num_names < MAX_NAMES) {\n+      int new_id = _num_names++;\n+      _names[new_id] = os::strdup(name, mtInternal);\n+      _is_unique[new_id] = true;\n+      return new_id;\n+    }\n+    log_debug(init)(\"Unnamed: %s\", name); \/\/ no slots left\n+  }\n+  return -1;\n+}\n+\n+void MutexLockerImpl::print_counter_on(outputStream* st, const char* name, bool is_unique, int idx) {\n+  jlong count = _perf_lock_count[idx]->get_value();\n+  if (count > 0) {\n+    st->print_cr(\"  %3d: %s%40s = \" JLONG_FORMAT_W(5) \"ms (\" JLONG_FORMAT_W(5) \"ms) \/ \" JLONG_FORMAT_W(9) \" events\", idx, (is_unique ? \" \" : \"M\"), name,\n+                 Management::ticks_to_ms(_perf_lock_hold_time[idx]->get_value()),\n+                 Management::ticks_to_ms(_perf_lock_wait_time[idx]->get_value()),\n+                 count);\n+  }\n+}\n+\n+static jlong accumulate_lock_counters(PerfCounter** lock_counters) {\n+  jlong acc = 0;\n+  for (int i = 0; i < _num_mutex + 1; i++) { \/\/ 0 slot is reserved for unnamed locks\n+    acc += lock_counters[i]->get_value();\n+  }\n+  return acc;\n+}\n+\n+void MutexLockerImpl::print_counters_on(outputStream* st) {\n+  if (log_is_enabled(Info, perf, vmlocks)) {\n+    jlong total_count     = accumulate_lock_counters(_perf_lock_count);\n+    jlong total_wait_time = accumulate_lock_counters(_perf_lock_wait_time);\n+    jlong total_hold_time = accumulate_lock_counters(_perf_lock_hold_time);\n+\n+    st->print_cr(\"MutexLocker: Total: %d named locks (%d unique names); hold = \"\n+                 \"\" JLONG_FORMAT \"ms (wait = \" JLONG_FORMAT \"ms) \/ \" JLONG_FORMAT \" events for thread \\\"main\\\"\",\n+                 _num_mutex, _num_names,\n+                 Management::ticks_to_ms(total_hold_time),\n+                 Management::ticks_to_ms(total_wait_time),\n+                 total_count);\n+    for (int i = 0; i < _num_names; i++) {\n+      print_counter_on(st, _names[i], _is_unique[i], i+1);\n+    }\n+    print_counter_on(st, \"Unnamed \/ Other\", false \/*is_unique*\/, 0);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":99,"deletions":1,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"logging\/log.hpp\"\n@@ -31,0 +32,2 @@\n+#include \"runtime\/perfData.hpp\"\n+#include \"runtime\/thread.hpp\"\n@@ -191,0 +194,10 @@\n+  bool _prof;\n+  elapsedTimer _before;\n+  elapsedTimer _after;\n+\n+private:\n+  static PerfCounter** _perf_lock_count;\n+  static PerfCounter** _perf_lock_wait_time;\n+  static PerfCounter** _perf_lock_hold_time;\n+\n+public:\n@@ -193,1 +206,2 @@\n-    _mutex(mutex) {\n+    _mutex(mutex), _prof(log_is_enabled(Info, perf, vmlocks) && Thread::current_or_null() != nullptr && Thread::current()->profile_vm_locks()) {\n+\n@@ -196,0 +210,2 @@\n+      if (_prof) { _before.start(); } \/\/ before\n+\n@@ -201,0 +217,2 @@\n+\n+      if (_prof) { _before.stop(); _after.start(); } \/\/ after\n@@ -205,1 +223,4 @@\n-    _mutex(mutex) {\n+    _mutex(mutex), _prof(thread->profile_vm_locks()) {\n+\n+    if (_prof) { _before.start(); } \/\/ before\n+\n@@ -214,0 +235,2 @@\n+\n+    if (_prof) { _before.stop(); _after.start(); } \/\/ after\n@@ -220,0 +243,8 @@\n+\n+      if (_prof) {\n+        assert(UsePerfData, \"required\");\n+        _after.stop();\n+        _perf_lock_count    [_mutex->id() + 1]->inc();\n+        _perf_lock_wait_time[_mutex->id() + 1]->inc(_before.ticks());\n+        _perf_lock_hold_time[_mutex->id() + 1]->inc(_after.ticks());\n+      }\n@@ -223,0 +254,3 @@\n+ private:\n+  static void print_counter_on(outputStream* st, const char* name, bool is_unique, int idx);\n+\n@@ -224,0 +258,2 @@\n+  static int name2id(const char* name);\n+\n@@ -225,0 +261,2 @@\n+  static void init_counters();\n+  static void print_counters_on(outputStream* st);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":40,"deletions":2,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -146,0 +146,2 @@\n+\n+  _profile_vm_locks = false;\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -642,0 +642,5 @@\n+\n+  bool  _profile_vm_locks;\n+ public:\n+   bool     profile_vm_locks() const { return _profile_vm_locks; }\n+   void set_profile_vm_locks()       { _profile_vm_locks = true; }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -533,0 +533,2 @@\n+  MutexLockerImpl::init_counters(); \/\/ depends on mutex_init(), perfMemory_init(), and Thread::initialize_thread_current().\n+\n@@ -830,0 +832,7 @@\n+  if (log_is_enabled(Info, perf, vmlocks)) {\n+    LogStreamHandle(Info, perf, vmlocks) log;\n+    log.print_cr(\"At VM initialization completion\");\n+    MutexLockerImpl::print_counters_on(&log);\n+    main_thread->set_profile_vm_locks();\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}