{"files":[{"patch":"@@ -215,1 +215,0 @@\n-  LOG_TAG(vmlocks) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3743,1 +3743,1 @@\n-  if (log_is_enabled(Info, perf, vmlocks)) {\n+  if (log_is_enabled(Info, perf, vmmutex)) {\n@@ -3745,2 +3745,2 @@\n-      warning(\"Disabling -Xlog:perf+vmlocks since UsePerfData is turned off.\");\n-      LogConfiguration::configure_stdout(LogLevel::Off, false, LOG_TAGS(perf, vmlocks));\n+      warning(\"Disabling -Xlog:perf+vmmutex since UsePerfData is turned off.\");\n+      LogConfiguration::configure_stdout(LogLevel::Off, false, LOG_TAGS(perf, vmmutex));\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -101,1 +101,2 @@\n-  int _id;                               \/\/ ID for named mutexes\n+  int _id;                               \/\/ ID for named mutexes. It is for indexing into the _perf_lock_count,\n+                                         \/\/ _perf_lock_wait_time, and _perf_lock_hold_time arrays in MutexLockerImpl.\n@@ -198,2 +199,1 @@\n-  int      id() const { return _id; }\n-  void set_id(int id) { _id = id; }\n+  int id() const { return _id; }\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -190,3 +190,1 @@\n-  int id = _num_mutex++;\n-  _mutex_array[id] = var;\n-  var->set_id(id);\n+  _mutex_array[_num_mutex++] = var;\n@@ -379,0 +377,1 @@\n+\/\/ _names stores all the names of the mutexes in the order of their creation.\n@@ -380,0 +379,1 @@\n+\/\/ _is_unique is false if the Mutex is not a singleton instance; the ones created from mutex_init() are singleton instances.\n@@ -388,1 +388,1 @@\n-  if (log_is_enabled(Info, perf, vmlocks)) {\n+  if (log_is_enabled(Info, perf, vmmutex)) {\n@@ -396,2 +396,2 @@\n-    NEWPERFEVENTCOUNTER(_perf_lock_wait_time[0], SUN_RT, PerfDataManager::counter_name(\"Other\", \"BeforeTime\"));\n-    NEWPERFEVENTCOUNTER(_perf_lock_hold_time[0], SUN_RT, PerfDataManager::counter_name(\"Other\", \"AfterTime\"));\n+    NEWPERFEVENTCOUNTER(_perf_lock_wait_time[0], SUN_RT, PerfDataManager::counter_name(\"Other\", \"WaitTime\"));\n+    NEWPERFEVENTCOUNTER(_perf_lock_hold_time[0], SUN_RT, PerfDataManager::counter_name(\"Other\", \"HoldTime\"));\n@@ -407,2 +407,2 @@\n-      NEWPERFEVENTCOUNTER(_perf_lock_wait_time[i + 1], SUN_RT, PerfDataManager::counter_name(counter_name, \"BeforeTime\"));\n-      NEWPERFEVENTCOUNTER(_perf_lock_hold_time[i + 1], SUN_RT, PerfDataManager::counter_name(counter_name, \"AfterTime\"));\n+      NEWPERFEVENTCOUNTER(_perf_lock_wait_time[i + 1], SUN_RT, PerfDataManager::counter_name(counter_name, \"WaitTime\"));\n+      NEWPERFEVENTCOUNTER(_perf_lock_hold_time[i + 1], SUN_RT, PerfDataManager::counter_name(counter_name, \"HoldTime\"));\n@@ -417,1 +417,1 @@\n-  if (log_is_enabled(Info, perf, vmlocks)) {\n+  if (log_is_enabled(Info, perf, vmmutex)) {\n@@ -454,1 +454,1 @@\n-  if (log_is_enabled(Info, perf, vmlocks)) {\n+  if (log_is_enabled(Info, perf, vmmutex)) {\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -195,2 +195,2 @@\n-  elapsedTimer _before;\n-  elapsedTimer _after;\n+  elapsedTimer _wait_time; \/\/ time waiting for a mutex locker\n+  elapsedTimer _hold_time; \/\/ time a mutex locker has been held\n@@ -206,1 +206,2 @@\n-    _mutex(mutex), _prof(log_is_enabled(Info, perf, vmlocks) && Thread::current_or_null() != nullptr && Thread::current()->profile_vm_locks()) {\n+    _mutex(mutex),\n+    _prof(log_is_enabled(Info, perf, vmmutex) && Thread::current_or_null() != nullptr && Thread::current()->profile_vm_locks()) {\n@@ -210,1 +211,1 @@\n-      if (_prof) { _before.start(); } \/\/ before\n+      if (_prof) { _wait_time.start(); } \/\/ waiting\n@@ -218,1 +219,1 @@\n-      if (_prof) { _before.stop(); _after.start(); } \/\/ after\n+      if (_prof) { _wait_time.stop(); _hold_time.start(); } \/\/ holding\n@@ -225,1 +226,1 @@\n-    if (_prof) { _before.start(); } \/\/ before\n+    if (_prof) { _wait_time.start(); } \/\/ waiting\n@@ -236,1 +237,1 @@\n-    if (_prof) { _before.stop(); _after.start(); } \/\/ after\n+    if (_prof) { _wait_time.stop(); _hold_time.start(); } \/\/ holding\n@@ -246,1 +247,1 @@\n-        _after.stop();\n+        _hold_time.stop();\n@@ -248,2 +249,2 @@\n-        _perf_lock_wait_time[_mutex->id() + 1]->inc(_before.ticks());\n-        _perf_lock_hold_time[_mutex->id() + 1]->inc(_after.ticks());\n+        _perf_lock_wait_time[_mutex->id() + 1]->inc(_wait_time.ticks());\n+        _perf_lock_hold_time[_mutex->id() + 1]->inc(_hold_time.ticks());\n@@ -254,0 +255,2 @@\n+ protected:\n+  static void init_counters();\n@@ -261,1 +264,0 @@\n-  static void init_counters();\n@@ -278,0 +280,3 @@\n+   static void init_counters() {\n+     MutexLockerImpl::init_counters();\n+   }\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -533,1 +533,1 @@\n-  MutexLockerImpl::init_counters(); \/\/ depends on mutex_init(), perfMemory_init(), and Thread::initialize_thread_current().\n+  MutexLocker::init_counters(); \/\/ depends on mutex_init(), perfMemory_init(), and Thread::initialize_thread_current().\n@@ -832,2 +832,2 @@\n-  if (log_is_enabled(Info, perf, vmlocks)) {\n-    LogStreamHandle(Info, perf, vmlocks) log;\n+  if (log_is_enabled(Info, perf, vmmutex)) {\n+    LogStreamHandle(Info, perf, vmmutex) log;\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}