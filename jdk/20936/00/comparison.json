{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::counter_overflow_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::counter_overflow_id)));\n@@ -69,1 +69,1 @@\n-    address a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+    address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -82,1 +82,1 @@\n-  Runtime1::StubID stub_id;\n+  C1StubId stub_id;\n@@ -84,1 +84,1 @@\n-    stub_id = Runtime1::throw_index_exception_id;\n+    stub_id = C1StubId::throw_index_exception_id;\n@@ -88,1 +88,1 @@\n-    stub_id = Runtime1::throw_range_check_failed_id;\n+    stub_id = C1StubId::throw_range_check_failed_id;\n@@ -103,1 +103,1 @@\n-  address a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+  address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -115,1 +115,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::throw_div0_exception_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::throw_div0_exception_id)));\n@@ -127,1 +127,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, Runtime1::StubID stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n@@ -132,3 +132,3 @@\n-  assert(stub_id == Runtime1::new_instance_id                 ||\n-         stub_id == Runtime1::fast_new_instance_id            ||\n-         stub_id == Runtime1::fast_new_instance_init_check_id,\n+  assert(stub_id == C1StubId::new_instance_id                 ||\n+         stub_id == C1StubId::fast_new_instance_id            ||\n+         stub_id == C1StubId::fast_new_instance_init_check_id,\n@@ -170,1 +170,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::new_type_array_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_type_array_id)));\n@@ -193,1 +193,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::new_object_array_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_object_array_id)));\n@@ -205,1 +205,1 @@\n-  Runtime1::StubID enter_id;\n+  C1StubId enter_id;\n@@ -207,1 +207,1 @@\n-    enter_id = Runtime1::monitorenter_id;\n+    enter_id = C1StubId::monitorenter_id;\n@@ -209,1 +209,1 @@\n-    enter_id = Runtime1::monitorenter_nofpu_id;\n+    enter_id = C1StubId::monitorenter_nofpu_id;\n@@ -226,1 +226,1 @@\n-  Runtime1::StubID exit_id;\n+  C1StubId exit_id;\n@@ -228,1 +228,1 @@\n-    exit_id = Runtime1::monitorexit_id;\n+    exit_id = C1StubId::monitorexit_id;\n@@ -230,1 +230,1 @@\n-    exit_id = Runtime1::monitorexit_nofpu_id;\n+    exit_id = C1StubId::monitorexit_nofpu_id;\n@@ -258,1 +258,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::deoptimize_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::deoptimize_id)));\n@@ -268,1 +268,1 @@\n-    a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+    a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -270,1 +270,1 @@\n-    a = Runtime1::entry_for(Runtime1::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_CodeStubs_aarch64.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -324,1 +324,1 @@\n-    target = Runtime1::entry_for(Runtime1::access_field_patching_id);\n+    target = Runtime1::entry_for(C1StubId::access_field_patching_id);\n@@ -328,1 +328,1 @@\n-    target = Runtime1::entry_for(Runtime1::load_klass_patching_id);\n+    target = Runtime1::entry_for(C1StubId::load_klass_patching_id);\n@@ -332,1 +332,1 @@\n-    target = Runtime1::entry_for(Runtime1::load_mirror_patching_id);\n+    target = Runtime1::entry_for(C1StubId::load_mirror_patching_id);\n@@ -336,1 +336,1 @@\n-    target = Runtime1::entry_for(Runtime1::load_appendix_patching_id);\n+    target = Runtime1::entry_for(C1StubId::load_appendix_patching_id);\n@@ -378,1 +378,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::handle_exception_from_callee_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::handle_exception_from_callee_id)));\n@@ -435,1 +435,1 @@\n-  __ far_jump(RuntimeAddress(Runtime1::entry_for(Runtime1::unwind_exception_id)));\n+  __ far_jump(RuntimeAddress(Runtime1::entry_for(C1StubId::unwind_exception_id)));\n@@ -878,1 +878,1 @@\n-    target = Runtime1::entry_for(Runtime1::access_field_patching_id);\n+    target = Runtime1::entry_for(C1StubId::access_field_patching_id);\n@@ -882,1 +882,1 @@\n-    target = Runtime1::entry_for(Runtime1::load_klass_patching_id);\n+    target = Runtime1::entry_for(C1StubId::load_klass_patching_id);\n@@ -886,1 +886,1 @@\n-    target = Runtime1::entry_for(Runtime1::load_mirror_patching_id);\n+    target = Runtime1::entry_for(C1StubId::load_mirror_patching_id);\n@@ -890,1 +890,1 @@\n-    target = Runtime1::entry_for(Runtime1::load_appendix_patching_id);\n+    target = Runtime1::entry_for(C1StubId::load_appendix_patching_id);\n@@ -1359,1 +1359,1 @@\n-        __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+        __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n@@ -1370,1 +1370,1 @@\n-      __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+      __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n@@ -1449,1 +1449,1 @@\n-    __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+    __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n@@ -2038,1 +2038,1 @@\n-  Runtime1::StubID unwind_id;\n+  C1StubId unwind_id;\n@@ -2057,1 +2057,1 @@\n-    unwind_id = Runtime1::handle_exception_id;\n+    unwind_id = C1StubId::handle_exception_id;\n@@ -2059,1 +2059,1 @@\n-    unwind_id = Runtime1::handle_exception_nofpu_id;\n+    unwind_id = C1StubId::handle_exception_nofpu_id;\n@@ -2340,1 +2340,1 @@\n-      __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+      __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1249,1 +1249,1 @@\n-  __ call_runtime(Runtime1::entry_for(Runtime1::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for(C1StubId::new_multi_array_id),\n@@ -1280,1 +1280,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n+    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n@@ -1287,1 +1287,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_class_cast_exception_id, obj.result(), info_for_exception);\n+    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id, obj.result(), info_for_exception);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -270,1 +270,1 @@\n-    far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::dtrace_object_alloc_id)));\n+    far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n@@ -311,1 +311,1 @@\n-    far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::dtrace_object_alloc_id)));\n+    far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-    } else if (_stub_id == Runtime1::forward_exception_id) {\n+    } else if (_stub_id == (int)C1StubId::forward_exception_id) {\n@@ -106,1 +106,1 @@\n-      far_jump(RuntimeAddress(Runtime1::entry_for(Runtime1::forward_exception_id)));\n+      far_jump(RuntimeAddress(Runtime1::entry_for(C1StubId::forward_exception_id)));\n@@ -361,1 +361,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(StubID id, StubAssembler *sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler *sasm) {\n@@ -373,1 +373,1 @@\n-  case forward_exception_id:\n+  case C1StubId::forward_exception_id:\n@@ -393,2 +393,2 @@\n-  case handle_exception_nofpu_id:\n-  case handle_exception_id:\n+  case C1StubId::handle_exception_nofpu_id:\n+  case C1StubId::handle_exception_id:\n@@ -396,1 +396,1 @@\n-    oop_map = save_live_registers(sasm, id != handle_exception_nofpu_id);\n+    oop_map = save_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);\n@@ -398,1 +398,1 @@\n-  case handle_exception_from_callee_id: {\n+  case C1StubId::handle_exception_from_callee_id: {\n@@ -456,3 +456,3 @@\n-  case forward_exception_id:\n-  case handle_exception_nofpu_id:\n-  case handle_exception_id:\n+  case C1StubId::forward_exception_id:\n+  case C1StubId::handle_exception_nofpu_id:\n+  case C1StubId::handle_exception_id:\n@@ -460,1 +460,1 @@\n-    restore_live_registers(sasm, id != handle_exception_nofpu_id);\n+    restore_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);\n@@ -462,1 +462,1 @@\n-  case handle_exception_from_callee_id:\n+  case C1StubId::handle_exception_from_callee_id:\n@@ -614,1 +614,1 @@\n-OopMapSet* Runtime1::generate_code_for(StubID id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n@@ -631,1 +631,1 @@\n-    case forward_exception_id:\n+    case C1StubId::forward_exception_id:\n@@ -639,1 +639,1 @@\n-    case throw_div0_exception_id:\n+    case C1StubId::throw_div0_exception_id:\n@@ -645,1 +645,1 @@\n-    case throw_null_pointer_exception_id:\n+    case C1StubId::throw_null_pointer_exception_id:\n@@ -651,3 +651,3 @@\n-    case new_instance_id:\n-    case fast_new_instance_id:\n-    case fast_new_instance_init_check_id:\n+    case C1StubId::new_instance_id:\n+    case C1StubId::fast_new_instance_id:\n+    case C1StubId::fast_new_instance_init_check_id:\n@@ -658,1 +658,1 @@\n-        if (id == new_instance_id) {\n+        if (id == C1StubId::new_instance_id) {\n@@ -660,1 +660,1 @@\n-        } else if (id == fast_new_instance_id) {\n+        } else if (id == C1StubId::fast_new_instance_id) {\n@@ -663,1 +663,1 @@\n-          assert(id == fast_new_instance_init_check_id, \"bad StubID\");\n+          assert(id == C1StubId::fast_new_instance_init_check_id, \"bad C1StubId\");\n@@ -682,1 +682,1 @@\n-    case counter_overflow_id:\n+    case C1StubId::counter_overflow_id:\n@@ -700,2 +700,2 @@\n-    case new_type_array_id:\n-    case new_object_array_id:\n+    case C1StubId::new_type_array_id:\n+    case C1StubId::new_object_array_id:\n@@ -707,1 +707,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -720,1 +720,1 @@\n-          int tag = ((id == new_type_array_id)\n+          int tag = ((id == C1StubId::new_type_array_id)\n@@ -735,1 +735,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -753,1 +753,1 @@\n-    case new_multi_array_id:\n+    case C1StubId::new_multi_array_id:\n@@ -773,1 +773,1 @@\n-    case register_finalizer_id:\n+    case C1StubId::register_finalizer_id:\n@@ -805,1 +805,1 @@\n-    case throw_class_cast_exception_id:\n+    case C1StubId::throw_class_cast_exception_id:\n@@ -811,1 +811,1 @@\n-    case throw_incompatible_class_change_error_id:\n+    case C1StubId::throw_incompatible_class_change_error_id:\n@@ -817,1 +817,1 @@\n-    case slow_subtype_check_id:\n+    case C1StubId::slow_subtype_check_id:\n@@ -860,1 +860,1 @@\n-    case monitorenter_nofpu_id:\n+    case C1StubId::monitorenter_nofpu_id:\n@@ -863,1 +863,1 @@\n-    case monitorenter_id:\n+    case C1StubId::monitorenter_id:\n@@ -881,1 +881,1 @@\n-    case monitorexit_nofpu_id:\n+    case C1StubId::monitorexit_nofpu_id:\n@@ -884,1 +884,1 @@\n-    case monitorexit_id:\n+    case C1StubId::monitorexit_id:\n@@ -904,1 +904,1 @@\n-    case deoptimize_id:\n+    case C1StubId::deoptimize_id:\n@@ -921,1 +921,1 @@\n-    case throw_range_check_failed_id:\n+    case C1StubId::throw_range_check_failed_id:\n@@ -927,1 +927,1 @@\n-    case unwind_exception_id:\n+    case C1StubId::unwind_exception_id:\n@@ -935,1 +935,1 @@\n-    case access_field_patching_id:\n+    case C1StubId::access_field_patching_id:\n@@ -942,1 +942,1 @@\n-    case load_klass_patching_id:\n+    case C1StubId::load_klass_patching_id:\n@@ -949,1 +949,1 @@\n-    case load_mirror_patching_id:\n+    case C1StubId::load_mirror_patching_id:\n@@ -956,1 +956,1 @@\n-    case load_appendix_patching_id:\n+    case C1StubId::load_appendix_patching_id:\n@@ -963,2 +963,2 @@\n-    case handle_exception_nofpu_id:\n-    case handle_exception_id:\n+    case C1StubId::handle_exception_nofpu_id:\n+    case C1StubId::handle_exception_id:\n@@ -970,1 +970,1 @@\n-    case handle_exception_from_callee_id:\n+    case C1StubId::handle_exception_from_callee_id:\n@@ -976,1 +976,1 @@\n-    case throw_index_exception_id:\n+    case C1StubId::throw_index_exception_id:\n@@ -982,1 +982,1 @@\n-    case throw_array_store_exception_id:\n+    case C1StubId::throw_array_store_exception_id:\n@@ -990,1 +990,1 @@\n-    case predicate_failed_trap_id:\n+    case C1StubId::predicate_failed_trap_id:\n@@ -1008,1 +1008,1 @@\n-    case dtrace_object_alloc_id:\n+    case C1StubId::dtrace_object_alloc_id:\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":52,"deletions":52,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-  __ call(Runtime1::entry_for(Runtime1::counter_overflow_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(C1StubId::counter_overflow_id), relocInfo::runtime_call_type);\n@@ -60,1 +60,1 @@\n-    __ call(Runtime1::entry_for(Runtime1::predicate_failed_trap_id), relocInfo::runtime_call_type);\n+    __ call(Runtime1::entry_for(C1StubId::predicate_failed_trap_id), relocInfo::runtime_call_type);\n@@ -76,1 +76,1 @@\n-    __ call(Runtime1::entry_for(Runtime1::throw_index_exception_id), relocInfo::runtime_call_type);\n+    __ call(Runtime1::entry_for(C1StubId::throw_index_exception_id), relocInfo::runtime_call_type);\n@@ -79,1 +79,1 @@\n-    __ call(Runtime1::entry_for(Runtime1::throw_range_check_failed_id), relocInfo::runtime_call_type);\n+    __ call(Runtime1::entry_for(C1StubId::throw_range_check_failed_id), relocInfo::runtime_call_type);\n@@ -92,1 +92,1 @@\n-  __ call(Runtime1::entry_for(Runtime1::predicate_failed_trap_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(C1StubId::predicate_failed_trap_id), relocInfo::runtime_call_type);\n@@ -103,1 +103,1 @@\n-  __ call(Runtime1::entry_for(Runtime1::throw_div0_exception_id),\n+  __ call(Runtime1::entry_for(C1StubId::throw_div0_exception_id),\n@@ -112,1 +112,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, Runtime1::StubID stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n@@ -117,3 +117,3 @@\n-  assert(stub_id == Runtime1::new_instance_id                 ||\n-         stub_id == Runtime1::fast_new_instance_id            ||\n-         stub_id == Runtime1::fast_new_instance_init_check_id,\n+  assert(stub_id == C1StubId::new_instance_id                 ||\n+         stub_id == C1StubId::fast_new_instance_id            ||\n+         stub_id == C1StubId::fast_new_instance_init_check_id,\n@@ -151,1 +151,1 @@\n-  __ call(Runtime1::entry_for(Runtime1::new_type_array_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(C1StubId::new_type_array_id), relocInfo::runtime_call_type);\n@@ -173,1 +173,1 @@\n-  __ call(Runtime1::entry_for(Runtime1::new_object_array_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(C1StubId::new_object_array_id), relocInfo::runtime_call_type);\n@@ -192,3 +192,3 @@\n-  Runtime1::StubID enter_id = ce->compilation()->has_fpu_code() ?\n-                              Runtime1::monitorenter_id :\n-                              Runtime1::monitorenter_nofpu_id;\n+  C1StubId enter_id = ce->compilation()->has_fpu_code() ?\n+                              C1StubId::monitorenter_id :\n+                              C1StubId::monitorenter_nofpu_id;\n@@ -213,3 +213,3 @@\n-  Runtime1::StubID exit_id = ce->compilation()->has_fpu_code() ?\n-                             Runtime1::monitorexit_id :\n-                             Runtime1::monitorexit_nofpu_id;\n+  C1StubId exit_id = ce->compilation()->has_fpu_code() ?\n+                             C1StubId::monitorexit_id :\n+                             C1StubId::monitorexit_nofpu_id;\n@@ -325,4 +325,4 @@\n-    case access_field_id:  target = Runtime1::entry_for(Runtime1::access_field_patching_id); break;\n-    case load_klass_id:    target = Runtime1::entry_for(Runtime1::load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n-    case load_mirror_id:   target = Runtime1::entry_for(Runtime1::load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n-    case load_appendix_id: target = Runtime1::entry_for(Runtime1::load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case access_field_id:  target = Runtime1::entry_for(C1StubId::access_field_patching_id); break;\n+    case load_klass_id:    target = Runtime1::entry_for(C1StubId::load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n+    case load_mirror_id:   target = Runtime1::entry_for(C1StubId::load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case load_appendix_id: target = Runtime1::entry_for(C1StubId::load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n@@ -354,1 +354,1 @@\n-  __ call(Runtime1::entry_for(Runtime1::deoptimize_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(C1StubId::deoptimize_id), relocInfo::runtime_call_type);\n@@ -365,1 +365,1 @@\n-    a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+    a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -367,1 +367,1 @@\n-    a = Runtime1::entry_for(Runtime1::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n","filename":"src\/hotspot\/cpu\/arm\/c1_CodeStubs_arm.cpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-  __ call(Runtime1::entry_for(Runtime1::handle_exception_from_callee_id), relocInfo::runtime_call_type);\n+  __ call(Runtime1::entry_for(C1StubId::handle_exception_from_callee_id), relocInfo::runtime_call_type);\n@@ -256,1 +256,1 @@\n-  __ jump(Runtime1::entry_for(Runtime1::unwind_exception_id), relocInfo::runtime_call_type, Rtemp);\n+  __ jump(Runtime1::entry_for(C1StubId::unwind_exception_id), relocInfo::runtime_call_type, Rtemp);\n@@ -1139,1 +1139,1 @@\n-      __ call(Runtime1::entry_for(Runtime1::slow_subtype_check_id), relocInfo::runtime_call_type);\n+      __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type);\n@@ -1213,1 +1213,1 @@\n-          __ call(Runtime1::entry_for(Runtime1::slow_subtype_check_id), relocInfo::runtime_call_type);\n+          __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type);\n@@ -1230,1 +1230,1 @@\n-        __ call(Runtime1::entry_for(Runtime1::slow_subtype_check_id), relocInfo::runtime_call_type);\n+        __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type);\n@@ -1306,1 +1306,1 @@\n-          __ call(Runtime1::entry_for(Runtime1::slow_subtype_check_id), relocInfo::runtime_call_type);\n+          __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type);\n@@ -1337,1 +1337,1 @@\n-        __ call(Runtime1::entry_for(Runtime1::slow_subtype_check_id), relocInfo::runtime_call_type);\n+        __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type);\n@@ -1984,3 +1984,3 @@\n-  Runtime1::StubID handle_id = compilation()->has_fpu_code() ?\n-                               Runtime1::handle_exception_id :\n-                               Runtime1::handle_exception_nofpu_id;\n+  C1StubId handle_id = compilation()->has_fpu_code() ?\n+                               C1StubId::handle_exception_id :\n+                               C1StubId::handle_exception_nofpu_id;\n@@ -2263,1 +2263,1 @@\n-      __ call(Runtime1::entry_for(Runtime1::slow_subtype_check_id), relocInfo::runtime_call_type); \/\/ does not blow any registers except R0, LR and Rtemp\n+      __ call(Runtime1::entry_for(C1StubId::slow_subtype_check_id), relocInfo::runtime_call_type); \/\/ does not blow any registers except R0, LR and Rtemp\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1057,1 +1057,1 @@\n-  __ call_runtime(Runtime1::entry_for(Runtime1::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for(C1StubId::new_multi_array_id),\n@@ -1086,1 +1086,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_incompatible_class_change_error_id,\n+    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id,\n@@ -1094,1 +1094,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_class_cast_exception_id,\n+    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id,\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRGenerator_arm.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  if (_stub_id != Runtime1::forward_exception_id) {\n+  if (_stub_id != (int)C1StubId::forward_exception_id) {\n@@ -84,1 +84,1 @@\n-  if (_stub_id != Runtime1::forward_exception_id) {\n+  if (_stub_id != (int)C1StubId::forward_exception_id) {\n@@ -87,1 +87,1 @@\n-    jump(Runtime1::entry_for(Runtime1::forward_exception_id), relocInfo::runtime_call_type, Rtemp, ne);\n+    jump(Runtime1::entry_for(C1StubId::forward_exception_id), relocInfo::runtime_call_type, Rtemp, ne);\n@@ -283,1 +283,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(StubID id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler* sasm) {\n@@ -293,1 +293,1 @@\n-  case forward_exception_id: {\n+  case C1StubId::forward_exception_id: {\n@@ -302,1 +302,1 @@\n-  case handle_exception_id:\n+  case C1StubId::handle_exception_id:\n@@ -305,1 +305,1 @@\n-  case handle_exception_nofpu_id:\n+  case C1StubId::handle_exception_nofpu_id:\n@@ -309,1 +309,1 @@\n-  case handle_exception_from_callee_id:\n+  case C1StubId::handle_exception_from_callee_id:\n@@ -331,3 +331,3 @@\n-  case forward_exception_id:\n-  case handle_exception_nofpu_id:\n-  case handle_exception_id:\n+  case C1StubId::forward_exception_id:\n+  case C1StubId::handle_exception_nofpu_id:\n+  case C1StubId::handle_exception_id:\n@@ -337,1 +337,1 @@\n-  case handle_exception_from_callee_id:\n+  case C1StubId::handle_exception_from_callee_id:\n@@ -406,1 +406,1 @@\n-OopMapSet* Runtime1::generate_code_for(StubID id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n@@ -414,1 +414,1 @@\n-    case forward_exception_id:\n+    case C1StubId::forward_exception_id:\n@@ -421,3 +421,3 @@\n-    case new_instance_id:\n-    case fast_new_instance_id:\n-    case fast_new_instance_init_check_id:\n+    case C1StubId::new_instance_id:\n+    case C1StubId::fast_new_instance_id:\n+    case C1StubId::fast_new_instance_init_check_id:\n@@ -439,1 +439,1 @@\n-    case counter_overflow_id:\n+    case C1StubId::counter_overflow_id:\n@@ -451,2 +451,2 @@\n-    case new_type_array_id:\n-    case new_object_array_id:\n+    case C1StubId::new_type_array_id:\n+    case C1StubId::new_object_array_id:\n@@ -454,1 +454,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -466,1 +466,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -480,1 +480,1 @@\n-    case new_multi_array_id:\n+    case C1StubId::new_multi_array_id:\n@@ -503,1 +503,1 @@\n-    case register_finalizer_id:\n+    case C1StubId::register_finalizer_id:\n@@ -524,1 +524,1 @@\n-    case throw_range_check_failed_id:\n+    case C1StubId::throw_range_check_failed_id:\n@@ -531,1 +531,1 @@\n-    case throw_index_exception_id:\n+    case C1StubId::throw_index_exception_id:\n@@ -538,1 +538,1 @@\n-    case throw_div0_exception_id:\n+    case C1StubId::throw_div0_exception_id:\n@@ -545,1 +545,1 @@\n-    case throw_null_pointer_exception_id:\n+    case C1StubId::throw_null_pointer_exception_id:\n@@ -552,2 +552,2 @@\n-    case handle_exception_nofpu_id:\n-    case handle_exception_id:\n+    case C1StubId::handle_exception_nofpu_id:\n+    case C1StubId::handle_exception_id:\n@@ -560,1 +560,1 @@\n-    case handle_exception_from_callee_id:\n+    case C1StubId::handle_exception_from_callee_id:\n@@ -567,1 +567,1 @@\n-    case unwind_exception_id:\n+    case C1StubId::unwind_exception_id:\n@@ -574,1 +574,1 @@\n-    case throw_array_store_exception_id:\n+    case C1StubId::throw_array_store_exception_id:\n@@ -581,1 +581,1 @@\n-    case throw_class_cast_exception_id:\n+    case C1StubId::throw_class_cast_exception_id:\n@@ -588,1 +588,1 @@\n-    case throw_incompatible_class_change_error_id:\n+    case C1StubId::throw_incompatible_class_change_error_id:\n@@ -595,1 +595,1 @@\n-    case slow_subtype_check_id:\n+    case C1StubId::slow_subtype_check_id:\n@@ -628,1 +628,1 @@\n-    case monitorenter_nofpu_id:\n+    case C1StubId::monitorenter_nofpu_id:\n@@ -631,1 +631,1 @@\n-    case monitorenter_id:\n+    case C1StubId::monitorenter_id:\n@@ -646,1 +646,1 @@\n-    case monitorexit_nofpu_id:\n+    case C1StubId::monitorexit_nofpu_id:\n@@ -649,1 +649,1 @@\n-    case monitorexit_id:\n+    case C1StubId::monitorexit_id:\n@@ -662,1 +662,1 @@\n-    case deoptimize_id:\n+    case C1StubId::deoptimize_id:\n@@ -678,1 +678,1 @@\n-    case access_field_patching_id:\n+    case C1StubId::access_field_patching_id:\n@@ -685,1 +685,1 @@\n-    case load_klass_patching_id:\n+    case C1StubId::load_klass_patching_id:\n@@ -692,1 +692,1 @@\n-    case load_appendix_patching_id:\n+    case C1StubId::load_appendix_patching_id:\n@@ -699,1 +699,1 @@\n-    case load_mirror_patching_id:\n+    case C1StubId::load_mirror_patching_id:\n@@ -706,1 +706,1 @@\n-    case predicate_failed_trap_id:\n+    case C1StubId::predicate_failed_trap_id:\n","filename":"src\/hotspot\/cpu\/arm\/c1_Runtime1_arm.cpp","additions":46,"deletions":46,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-    address a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+    address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -82,2 +82,2 @@\n-  address stub = _throw_index_out_of_bounds_exception ? Runtime1::entry_for(Runtime1::throw_index_exception_id)\n-                                                      : Runtime1::entry_for(Runtime1::throw_range_check_failed_id);\n+  address stub = _throw_index_out_of_bounds_exception ? Runtime1::entry_for(C1StubId::throw_index_exception_id)\n+                                                      : Runtime1::entry_for(C1StubId::throw_range_check_failed_id);\n@@ -112,1 +112,1 @@\n-  address a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+  address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -136,1 +136,1 @@\n-  address a = Runtime1::entry_for(Runtime1::counter_overflow_id);\n+  address a = Runtime1::entry_for(C1StubId::counter_overflow_id);\n@@ -153,1 +153,1 @@\n-  address stub = Runtime1::entry_for(Runtime1::throw_div0_exception_id);\n+  address stub = Runtime1::entry_for(C1StubId::throw_div0_exception_id);\n@@ -168,1 +168,1 @@\n-    a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+    a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -170,1 +170,1 @@\n-    a = Runtime1::entry_for(Runtime1::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n@@ -202,1 +202,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, Runtime1::StubID stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n@@ -207,3 +207,3 @@\n-  assert(stub_id == Runtime1::new_instance_id                 ||\n-         stub_id == Runtime1::fast_new_instance_id            ||\n-         stub_id == Runtime1::fast_new_instance_init_check_id,\n+  assert(stub_id == C1StubId::new_instance_id                 ||\n+         stub_id == C1StubId::fast_new_instance_id            ||\n+         stub_id == C1StubId::fast_new_instance_init_check_id,\n@@ -239,1 +239,1 @@\n-  address entry = Runtime1::entry_for(Runtime1::new_type_array_id);\n+  address entry = Runtime1::entry_for(C1StubId::new_type_array_id);\n@@ -262,1 +262,1 @@\n-  address entry = Runtime1::entry_for(Runtime1::new_object_array_id);\n+  address entry = Runtime1::entry_for(C1StubId::new_object_array_id);\n@@ -275,1 +275,1 @@\n-  address stub = Runtime1::entry_for(ce->compilation()->has_fpu_code() ? Runtime1::monitorenter_id : Runtime1::monitorenter_nofpu_id);\n+  address stub = Runtime1::entry_for(ce->compilation()->has_fpu_code() ? C1StubId::monitorenter_id : C1StubId::monitorenter_nofpu_id);\n@@ -292,1 +292,1 @@\n-  address stub = Runtime1::entry_for(ce->compilation()->has_fpu_code() ? Runtime1::monitorexit_id : Runtime1::monitorexit_nofpu_id);\n+  address stub = Runtime1::entry_for(ce->compilation()->has_fpu_code() ? C1StubId::monitorexit_id : C1StubId::monitorexit_nofpu_id);\n@@ -406,2 +406,2 @@\n-    case access_field_id:  target = Runtime1::entry_for(Runtime1::access_field_patching_id); break;\n-    case load_klass_id:    target = Runtime1::entry_for(Runtime1::load_klass_patching_id);\n+    case access_field_id:  target = Runtime1::entry_for(C1StubId::access_field_patching_id); break;\n+    case load_klass_id:    target = Runtime1::entry_for(C1StubId::load_klass_patching_id);\n@@ -409,1 +409,1 @@\n-    case load_mirror_id:   target = Runtime1::entry_for(Runtime1::load_mirror_patching_id);\n+    case load_mirror_id:   target = Runtime1::entry_for(C1StubId::load_mirror_patching_id);\n@@ -411,1 +411,1 @@\n-    case load_appendix_id: target = Runtime1::entry_for(Runtime1::load_appendix_patching_id);\n+    case load_appendix_id: target = Runtime1::entry_for(C1StubId::load_appendix_patching_id);\n@@ -437,1 +437,1 @@\n-  address stub = Runtime1::entry_for(Runtime1::deoptimize_id);\n+  address stub = Runtime1::entry_for(C1StubId::deoptimize_id);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_CodeStubs_ppc.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-  address entry_point = CAST_FROM_FN_PTR(address, Runtime1::entry_for(Runtime1::handle_exception_from_callee_id));\n+  address entry_point = CAST_FROM_FN_PTR(address, Runtime1::entry_for(C1StubId::handle_exception_from_callee_id));\n@@ -225,1 +225,1 @@\n-  address unwind_stub = Runtime1::entry_for(Runtime1::unwind_exception_id);\n+  address unwind_stub = Runtime1::entry_for(C1StubId::unwind_exception_id);\n@@ -1803,2 +1803,2 @@\n-  address stub = Runtime1::entry_for(compilation()->has_fpu_code() ? Runtime1::handle_exception_id\n-                                                                   : Runtime1::handle_exception_nofpu_id);\n+  address stub = Runtime1::entry_for(compilation()->has_fpu_code() ? C1StubId::handle_exception_id\n+                                                                   : C1StubId::handle_exception_nofpu_id);\n@@ -2004,1 +2004,1 @@\n-      address slow_stc = Runtime1::entry_for(Runtime1::slow_subtype_check_id);\n+      address slow_stc = Runtime1::entry_for(C1StubId::slow_subtype_check_id);\n@@ -2455,1 +2455,1 @@\n-      address entry = Runtime1::entry_for(Runtime1::slow_subtype_check_id);\n+      address entry = Runtime1::entry_for(C1StubId::slow_subtype_check_id);\n@@ -2546,1 +2546,1 @@\n-    const address slow_path = Runtime1::entry_for(Runtime1::slow_subtype_check_id);\n+    const address slow_path = Runtime1::entry_for(C1StubId::slow_subtype_check_id);\n@@ -2853,2 +2853,2 @@\n-  if (dest == Runtime1::entry_for(Runtime1::register_finalizer_id) ||\n-      dest == Runtime1::entry_for(Runtime1::new_multi_array_id   )) {\n+  if (dest == Runtime1::entry_for(C1StubId::register_finalizer_id) ||\n+      dest == Runtime1::entry_for(C1StubId::new_multi_array_id   )) {\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1035,1 +1035,1 @@\n-  __ call_runtime(Runtime1::entry_for(Runtime1::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for(C1StubId::new_multi_array_id),\n@@ -1070,1 +1070,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_incompatible_class_change_error_id,\n+    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id,\n@@ -1078,1 +1078,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_class_cast_exception_id, obj.result(), info_for_exception);\n+    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id, obj.result(), info_for_exception);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-\/\/    call(CAST_FROM_FN_PTR(address, Runtime1::entry_for(Runtime1::dtrace_object_alloc_id)),\n+\/\/    call(CAST_FROM_FN_PTR(address, Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)),\n@@ -372,1 +372,1 @@\n-    \/\/call(CAST_FROM_FN_PTR(address, Runtime1::entry_for(Runtime1::dtrace_object_alloc_id)),\n+    \/\/call(CAST_FROM_FN_PTR(address, Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)),\n@@ -401,1 +401,1 @@\n-    \/\/const address exception_entry = Runtime1::entry_for(Runtime1::throw_null_pointer_exception_id);\n+    \/\/const address exception_entry = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-    } else if (_stub_id == Runtime1::forward_exception_id) {\n+    } else if (_stub_id == (int)C1StubId::forward_exception_id) {\n@@ -104,2 +104,2 @@\n-      \/\/load_const_optimized(R0, Runtime1::entry_for(Runtime1::forward_exception_id));\n-      add_const_optimized(R0, R29_TOC, MacroAssembler::offset_to_global_toc(Runtime1::entry_for(Runtime1::forward_exception_id)));\n+      \/\/load_const_optimized(R0, Runtime1::entry_for(C1StubId::forward_exception_id));\n+      add_const_optimized(R0, R29_TOC, MacroAssembler::offset_to_global_toc(Runtime1::entry_for(C1StubId::forward_exception_id)));\n@@ -391,1 +391,1 @@\n-OopMapSet* Runtime1::generate_code_for(StubID id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n@@ -400,1 +400,1 @@\n-    case forward_exception_id:\n+    case C1StubId::forward_exception_id:\n@@ -406,3 +406,3 @@\n-    case new_instance_id:\n-    case fast_new_instance_id:\n-    case fast_new_instance_init_check_id:\n+    case C1StubId::new_instance_id:\n+    case C1StubId::fast_new_instance_id:\n+    case C1StubId::fast_new_instance_init_check_id:\n@@ -410,1 +410,1 @@\n-        if (id == new_instance_id) {\n+        if (id == C1StubId::new_instance_id) {\n@@ -412,1 +412,1 @@\n-        } else if (id == fast_new_instance_id) {\n+        } else if (id == C1StubId::fast_new_instance_id) {\n@@ -415,1 +415,1 @@\n-          assert(id == fast_new_instance_init_check_id, \"bad StubID\");\n+          assert(id == C1StubId::fast_new_instance_init_check_id, \"bad C1StubId\");\n@@ -425,1 +425,1 @@\n-    case counter_overflow_id:\n+    case C1StubId::counter_overflow_id:\n@@ -430,2 +430,2 @@\n-    case new_type_array_id:\n-    case new_object_array_id:\n+    case C1StubId::new_type_array_id:\n+    case C1StubId::new_object_array_id:\n@@ -433,1 +433,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -442,1 +442,1 @@\n-          int tag = (id == new_type_array_id) ? Klass::_lh_array_tag_type_value : Klass::_lh_array_tag_obj_value;\n+          int tag = (id == C1StubId::new_type_array_id) ? Klass::_lh_array_tag_type_value : Klass::_lh_array_tag_obj_value;\n@@ -456,1 +456,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -464,1 +464,1 @@\n-    case new_multi_array_id:\n+    case C1StubId::new_multi_array_id:\n@@ -474,1 +474,1 @@\n-    case register_finalizer_id:\n+    case C1StubId::register_finalizer_id:\n@@ -504,1 +504,1 @@\n-    case throw_range_check_failed_id:\n+    case C1StubId::throw_range_check_failed_id:\n@@ -511,1 +511,1 @@\n-    case throw_index_exception_id:\n+    case C1StubId::throw_index_exception_id:\n@@ -518,1 +518,1 @@\n-    case throw_div0_exception_id:\n+    case C1StubId::throw_div0_exception_id:\n@@ -525,1 +525,1 @@\n-    case throw_null_pointer_exception_id:\n+    case C1StubId::throw_null_pointer_exception_id:\n@@ -532,2 +532,2 @@\n-    case handle_exception_nofpu_id:\n-    case handle_exception_id:\n+    case C1StubId::handle_exception_nofpu_id:\n+    case C1StubId::handle_exception_id:\n@@ -540,1 +540,1 @@\n-    case handle_exception_from_callee_id:\n+    case C1StubId::handle_exception_from_callee_id:\n@@ -547,1 +547,1 @@\n-    case unwind_exception_id:\n+    case C1StubId::unwind_exception_id:\n@@ -575,1 +575,1 @@\n-    case throw_array_store_exception_id:\n+    case C1StubId::throw_array_store_exception_id:\n@@ -582,1 +582,1 @@\n-    case throw_class_cast_exception_id:\n+    case C1StubId::throw_class_cast_exception_id:\n@@ -589,1 +589,1 @@\n-    case throw_incompatible_class_change_error_id:\n+    case C1StubId::throw_incompatible_class_change_error_id:\n@@ -596,1 +596,1 @@\n-    case slow_subtype_check_id:\n+    case C1StubId::slow_subtype_check_id:\n@@ -608,2 +608,2 @@\n-    case monitorenter_nofpu_id:\n-    case monitorenter_id:\n+    case C1StubId::monitorenter_nofpu_id:\n+    case C1StubId::monitorenter_id:\n@@ -613,1 +613,1 @@\n-        int save_fpu_registers = (id == monitorenter_id);\n+        int save_fpu_registers = (id == C1StubId::monitorenter_id);\n@@ -627,2 +627,2 @@\n-    case monitorexit_nofpu_id:\n-    case monitorexit_id:\n+    case C1StubId::monitorexit_nofpu_id:\n+    case C1StubId::monitorexit_id:\n@@ -635,1 +635,1 @@\n-        int save_fpu_registers = (id == monitorexit_id);\n+        int save_fpu_registers = (id == C1StubId::monitorexit_id);\n@@ -649,1 +649,1 @@\n-    case deoptimize_id:\n+    case C1StubId::deoptimize_id:\n@@ -665,1 +665,1 @@\n-    case access_field_patching_id:\n+    case C1StubId::access_field_patching_id:\n@@ -672,1 +672,1 @@\n-    case load_klass_patching_id:\n+    case C1StubId::load_klass_patching_id:\n@@ -679,1 +679,1 @@\n-    case load_mirror_patching_id:\n+    case C1StubId::load_mirror_patching_id:\n@@ -686,1 +686,1 @@\n-    case load_appendix_patching_id:\n+    case C1StubId::load_appendix_patching_id:\n@@ -693,1 +693,1 @@\n-    case dtrace_object_alloc_id:\n+    case C1StubId::dtrace_object_alloc_id:\n@@ -713,1 +713,1 @@\n-    case predicate_failed_trap_id:\n+    case C1StubId::predicate_failed_trap_id:\n@@ -757,1 +757,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(StubID id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler* sasm) {\n@@ -767,1 +767,1 @@\n-  case forward_exception_id:\n+  case C1StubId::forward_exception_id:\n@@ -783,2 +783,2 @@\n-  case handle_exception_nofpu_id:\n-  case handle_exception_id:\n+  case C1StubId::handle_exception_nofpu_id:\n+  case C1StubId::handle_exception_id:\n@@ -786,1 +786,1 @@\n-    oop_map = save_live_registers(sasm, id != handle_exception_nofpu_id, Rexception_pc);\n+    oop_map = save_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id, Rexception_pc);\n@@ -788,1 +788,1 @@\n-  case handle_exception_from_callee_id:\n+  case C1StubId::handle_exception_from_callee_id:\n@@ -827,4 +827,4 @@\n-  case forward_exception_id:\n-  case handle_exception_nofpu_id:\n-  case handle_exception_id:\n-    restore_live_registers(sasm, noreg, noreg, id != handle_exception_nofpu_id);\n+  case C1StubId::forward_exception_id:\n+  case C1StubId::handle_exception_nofpu_id:\n+  case C1StubId::handle_exception_id:\n+    restore_live_registers(sasm, noreg, noreg, id != C1StubId::handle_exception_nofpu_id);\n@@ -833,1 +833,1 @@\n-  case handle_exception_from_callee_id: {\n+  case C1StubId::handle_exception_from_callee_id: {\n","filename":"src\/hotspot\/cpu\/ppc\/c1_Runtime1_ppc.cpp","additions":55,"deletions":55,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::counter_overflow_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::counter_overflow_id)));\n@@ -74,1 +74,1 @@\n-    address a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+    address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -87,1 +87,1 @@\n-  Runtime1::StubID stub_id;\n+  C1StubId stub_id;\n@@ -89,1 +89,1 @@\n-    stub_id = Runtime1::throw_index_exception_id;\n+    stub_id = C1StubId::throw_index_exception_id;\n@@ -93,1 +93,1 @@\n-    stub_id = Runtime1::throw_range_check_failed_id;\n+    stub_id = C1StubId::throw_range_check_failed_id;\n@@ -109,1 +109,1 @@\n-  address a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+  address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -121,1 +121,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::throw_div0_exception_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::throw_div0_exception_id)));\n@@ -130,1 +130,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, Runtime1::StubID stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n@@ -135,3 +135,3 @@\n-  assert(stub_id == Runtime1::new_instance_id                 ||\n-         stub_id == Runtime1::fast_new_instance_id            ||\n-         stub_id == Runtime1::fast_new_instance_init_check_id,\n+  assert(stub_id == C1StubId::new_instance_id                 ||\n+         stub_id == C1StubId::fast_new_instance_id            ||\n+         stub_id == C1StubId::fast_new_instance_init_check_id,\n@@ -166,1 +166,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::new_type_array_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_type_array_id)));\n@@ -186,1 +186,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::new_object_array_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_object_array_id)));\n@@ -198,1 +198,1 @@\n-  Runtime1::StubID enter_id;\n+  C1StubId enter_id;\n@@ -200,1 +200,1 @@\n-    enter_id = Runtime1::monitorenter_id;\n+    enter_id = C1StubId::monitorenter_id;\n@@ -202,1 +202,1 @@\n-    enter_id = Runtime1::monitorenter_nofpu_id;\n+    enter_id = C1StubId::monitorenter_nofpu_id;\n@@ -218,1 +218,1 @@\n-  Runtime1::StubID exit_id;\n+  C1StubId exit_id;\n@@ -220,1 +220,1 @@\n-    exit_id = Runtime1::monitorexit_id;\n+    exit_id = C1StubId::monitorexit_id;\n@@ -222,1 +222,1 @@\n-    exit_id = Runtime1::monitorexit_nofpu_id;\n+    exit_id = C1StubId::monitorexit_nofpu_id;\n@@ -247,1 +247,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::deoptimize_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::deoptimize_id)));\n@@ -256,1 +256,1 @@\n-    a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+    a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -258,1 +258,1 @@\n-    a = Runtime1::entry_for(Runtime1::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -226,1 +226,1 @@\n-    __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+    __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arraycopy_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -308,1 +308,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::handle_exception_from_callee_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::handle_exception_from_callee_id)));\n@@ -364,1 +364,1 @@\n-  __ far_jump(RuntimeAddress(Runtime1::entry_for(Runtime1::unwind_exception_id)));\n+  __ far_jump(RuntimeAddress(Runtime1::entry_for(C1StubId::unwind_exception_id)));\n@@ -1091,1 +1091,1 @@\n-      __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+      __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n@@ -1106,1 +1106,1 @@\n-    __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+    __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n@@ -1394,1 +1394,1 @@\n-  Runtime1::StubID unwind_id;\n+  C1StubId unwind_id;\n@@ -1417,1 +1417,1 @@\n-    unwind_id = Runtime1::handle_exception_id;\n+    unwind_id = C1StubId::handle_exception_id;\n@@ -1419,1 +1419,1 @@\n-    unwind_id = Runtime1::handle_exception_nofpu_id;\n+    unwind_id = C1StubId::handle_exception_nofpu_id;\n@@ -2057,1 +2057,1 @@\n-      target = Runtime1::entry_for(Runtime1::access_field_patching_id);\n+      target = Runtime1::entry_for(C1StubId::access_field_patching_id);\n@@ -2060,1 +2060,1 @@\n-      target = Runtime1::entry_for(Runtime1::load_klass_patching_id);\n+      target = Runtime1::entry_for(C1StubId::load_klass_patching_id);\n@@ -2063,1 +2063,1 @@\n-      target = Runtime1::entry_for(Runtime1::load_mirror_patching_id);\n+      target = Runtime1::entry_for(C1StubId::load_mirror_patching_id);\n@@ -2066,1 +2066,1 @@\n-      target = Runtime1::entry_for(Runtime1::load_appendix_patching_id);\n+      target = Runtime1::entry_for(C1StubId::load_appendix_patching_id);\n@@ -2155,1 +2155,1 @@\n-  __ far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+  __ far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1033,1 +1033,1 @@\n-  __ call_runtime(Runtime1::entry_for(Runtime1::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for(C1StubId::new_multi_array_id),\n@@ -1065,1 +1065,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr,\n+    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr,\n@@ -1073,1 +1073,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_class_cast_exception_id, obj.result(), info_for_exception);\n+    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id, obj.result(), info_for_exception);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRGenerator_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-    far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::dtrace_object_alloc_id)));\n+    far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n@@ -319,1 +319,1 @@\n-    far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::dtrace_object_alloc_id)));\n+    far_call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    } else if (_stub_id == Runtime1::forward_exception_id) {\n+    } else if (_stub_id == (int)C1StubId::forward_exception_id) {\n@@ -104,1 +104,1 @@\n-      far_jump(RuntimeAddress(Runtime1::entry_for(Runtime1::forward_exception_id)));\n+      far_jump(RuntimeAddress(Runtime1::entry_for(C1StubId::forward_exception_id)));\n@@ -379,1 +379,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(StubID id, StubAssembler *sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler *sasm) {\n@@ -391,1 +391,1 @@\n-    case forward_exception_id:\n+    case C1StubId::forward_exception_id:\n@@ -410,2 +410,2 @@\n-    case handle_exception_nofpu_id:\n-    case handle_exception_id:\n+    case C1StubId::handle_exception_nofpu_id:\n+    case C1StubId::handle_exception_id:\n@@ -413,1 +413,1 @@\n-      oop_map = save_live_registers(sasm, id != handle_exception_nofpu_id);\n+      oop_map = save_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);\n@@ -415,1 +415,1 @@\n-    case handle_exception_from_callee_id: {\n+    case C1StubId::handle_exception_from_callee_id: {\n@@ -472,3 +472,3 @@\n-    case forward_exception_id:\n-    case handle_exception_nofpu_id:\n-    case handle_exception_id:\n+    case C1StubId::forward_exception_id:\n+    case C1StubId::handle_exception_nofpu_id:\n+    case C1StubId::handle_exception_id:\n@@ -476,1 +476,1 @@\n-      restore_live_registers(sasm, id != handle_exception_nofpu_id);\n+      restore_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);\n@@ -478,1 +478,1 @@\n-    case handle_exception_from_callee_id:\n+    case C1StubId::handle_exception_from_callee_id:\n@@ -624,1 +624,1 @@\n-OopMapSet* Runtime1::generate_code_for(StubID id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n@@ -635,1 +635,1 @@\n-    case forward_exception_id:\n+    case C1StubId::forward_exception_id:\n@@ -643,1 +643,1 @@\n-    case throw_div0_exception_id:\n+    case C1StubId::throw_div0_exception_id:\n@@ -650,1 +650,1 @@\n-    case throw_null_pointer_exception_id:\n+    case C1StubId::throw_null_pointer_exception_id:\n@@ -656,3 +656,3 @@\n-    case new_instance_id:\n-    case fast_new_instance_id:\n-    case fast_new_instance_init_check_id:\n+    case C1StubId::new_instance_id:\n+    case C1StubId::fast_new_instance_id:\n+    case C1StubId::fast_new_instance_init_check_id:\n@@ -663,1 +663,1 @@\n-        if (id == new_instance_id) {\n+        if (id == C1StubId::new_instance_id) {\n@@ -665,1 +665,1 @@\n-        } else if (id == fast_new_instance_id) {\n+        } else if (id == C1StubId::fast_new_instance_id) {\n@@ -668,1 +668,1 @@\n-          assert(id == fast_new_instance_init_check_id, \"bad StubID\");\n+          assert(id == C1StubId::fast_new_instance_init_check_id, \"bad C1StubId\");\n@@ -689,1 +689,1 @@\n-    case counter_overflow_id:\n+    case C1StubId::counter_overflow_id:\n@@ -713,2 +713,2 @@\n-    case new_type_array_id:\n-    case new_object_array_id:\n+    case C1StubId::new_type_array_id:\n+    case C1StubId::new_object_array_id:\n@@ -720,1 +720,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -733,1 +733,1 @@\n-          int tag = ((id == new_type_array_id) ? Klass::_lh_array_tag_type_value : Klass::_lh_array_tag_obj_value);\n+          int tag = ((id == C1StubId::new_type_array_id) ? Klass::_lh_array_tag_type_value : Klass::_lh_array_tag_obj_value);\n@@ -746,1 +746,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -765,1 +765,1 @@\n-    case new_multi_array_id:\n+    case C1StubId::new_multi_array_id:\n@@ -788,1 +788,1 @@\n-    case register_finalizer_id:\n+    case C1StubId::register_finalizer_id:\n@@ -822,1 +822,1 @@\n-    case throw_class_cast_exception_id:\n+    case C1StubId::throw_class_cast_exception_id:\n@@ -829,1 +829,1 @@\n-    case throw_incompatible_class_change_error_id:\n+    case C1StubId::throw_incompatible_class_change_error_id:\n@@ -837,1 +837,1 @@\n-    case slow_subtype_check_id:\n+    case C1StubId::slow_subtype_check_id:\n@@ -877,1 +877,1 @@\n-    case monitorenter_nofpu_id:\n+    case C1StubId::monitorenter_nofpu_id:\n@@ -880,1 +880,1 @@\n-    case monitorenter_id:\n+    case C1StubId::monitorenter_id:\n@@ -899,1 +899,1 @@\n-    case monitorexit_nofpu_id:\n+    case C1StubId::monitorexit_nofpu_id:\n@@ -902,1 +902,1 @@\n-    case monitorexit_id:\n+    case C1StubId::monitorexit_id:\n@@ -923,1 +923,1 @@\n-    case deoptimize_id:\n+    case C1StubId::deoptimize_id:\n@@ -942,1 +942,1 @@\n-    case throw_range_check_failed_id:\n+    case C1StubId::throw_range_check_failed_id:\n@@ -949,1 +949,1 @@\n-    case unwind_exception_id:\n+    case C1StubId::unwind_exception_id:\n@@ -958,1 +958,1 @@\n-    case access_field_patching_id:\n+    case C1StubId::access_field_patching_id:\n@@ -966,1 +966,1 @@\n-    case load_klass_patching_id:\n+    case C1StubId::load_klass_patching_id:\n@@ -974,1 +974,1 @@\n-    case load_mirror_patching_id:\n+    case C1StubId::load_mirror_patching_id:\n@@ -982,1 +982,1 @@\n-    case load_appendix_patching_id:\n+    case C1StubId::load_appendix_patching_id:\n@@ -990,2 +990,2 @@\n-    case handle_exception_nofpu_id:\n-    case handle_exception_id:\n+    case C1StubId::handle_exception_nofpu_id:\n+    case C1StubId::handle_exception_id:\n@@ -998,1 +998,1 @@\n-    case handle_exception_from_callee_id:\n+    case C1StubId::handle_exception_from_callee_id:\n@@ -1005,1 +1005,1 @@\n-    case throw_index_exception_id:\n+    case C1StubId::throw_index_exception_id:\n@@ -1012,1 +1012,1 @@\n-    case throw_array_store_exception_id:\n+    case C1StubId::throw_array_store_exception_id:\n@@ -1021,1 +1021,1 @@\n-    case predicate_failed_trap_id:\n+    case C1StubId::predicate_failed_trap_id:\n@@ -1041,1 +1041,1 @@\n-    case dtrace_object_alloc_id:\n+    case C1StubId::dtrace_object_alloc_id:\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":52,"deletions":52,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    address a = Runtime1::entry_for (Runtime1::predicate_failed_trap_id);\n+    address a = Runtime1::entry_for (C1StubId::predicate_failed_trap_id);\n@@ -67,1 +67,1 @@\n-  Runtime1::StubID stub_id;\n+  C1StubId stub_id;\n@@ -69,1 +69,1 @@\n-    stub_id = Runtime1::throw_index_exception_id;\n+    stub_id = C1StubId::throw_index_exception_id;\n@@ -71,1 +71,1 @@\n-    stub_id = Runtime1::throw_range_check_failed_id;\n+    stub_id = C1StubId::throw_range_check_failed_id;\n@@ -87,1 +87,1 @@\n-  address a = Runtime1::entry_for (Runtime1::predicate_failed_trap_id);\n+  address a = Runtime1::entry_for (C1StubId::predicate_failed_trap_id);\n@@ -105,1 +105,1 @@\n-  ce->emit_call_c(Runtime1::entry_for (Runtime1::counter_overflow_id));\n+  ce->emit_call_c(Runtime1::entry_for (C1StubId::counter_overflow_id));\n@@ -117,1 +117,1 @@\n-  ce->emit_call_c(Runtime1::entry_for (Runtime1::throw_div0_exception_id));\n+  ce->emit_call_c(Runtime1::entry_for (C1StubId::throw_div0_exception_id));\n@@ -127,1 +127,1 @@\n-    a = Runtime1::entry_for (Runtime1::predicate_failed_trap_id);\n+    a = Runtime1::entry_for (C1StubId::predicate_failed_trap_id);\n@@ -129,1 +129,1 @@\n-    a = Runtime1::entry_for (Runtime1::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for (C1StubId::throw_null_pointer_exception_id);\n@@ -154,1 +154,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, Runtime1::StubID stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n@@ -159,3 +159,3 @@\n-  assert(stub_id == Runtime1::new_instance_id                 ||\n-         stub_id == Runtime1::fast_new_instance_id            ||\n-         stub_id == Runtime1::fast_new_instance_init_check_id,\n+  assert(stub_id == C1StubId::new_instance_id                 ||\n+         stub_id == C1StubId::fast_new_instance_id            ||\n+         stub_id == C1StubId::fast_new_instance_init_check_id,\n@@ -189,1 +189,1 @@\n-  address a = Runtime1::entry_for (Runtime1::new_type_array_id);\n+  address a = Runtime1::entry_for (C1StubId::new_type_array_id);\n@@ -209,1 +209,1 @@\n-  address a = Runtime1::entry_for (Runtime1::new_object_array_id);\n+  address a = Runtime1::entry_for (C1StubId::new_object_array_id);\n@@ -220,1 +220,1 @@\n-  Runtime1::StubID enter_id;\n+  C1StubId enter_id;\n@@ -222,1 +222,1 @@\n-    enter_id = Runtime1::monitorenter_id;\n+    enter_id = C1StubId::monitorenter_id;\n@@ -224,1 +224,1 @@\n-    enter_id = Runtime1::monitorenter_nofpu_id;\n+    enter_id = C1StubId::monitorenter_nofpu_id;\n@@ -245,1 +245,1 @@\n-  Runtime1::StubID exit_id;\n+  C1StubId exit_id;\n@@ -247,1 +247,1 @@\n-    exit_id = Runtime1::monitorexit_id;\n+    exit_id = C1StubId::monitorexit_id;\n@@ -249,1 +249,1 @@\n-    exit_id = Runtime1::monitorexit_nofpu_id;\n+    exit_id = C1StubId::monitorexit_nofpu_id;\n@@ -381,4 +381,4 @@\n-    case access_field_id:  target = Runtime1::entry_for (Runtime1::access_field_patching_id); break;\n-    case load_klass_id:    target = Runtime1::entry_for (Runtime1::load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n-    case load_mirror_id:   target = Runtime1::entry_for (Runtime1::load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n-    case load_appendix_id: target = Runtime1::entry_for (Runtime1::load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case access_field_id:  target = Runtime1::entry_for (C1StubId::access_field_patching_id); break;\n+    case load_klass_id:    target = Runtime1::entry_for (C1StubId::load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n+    case load_mirror_id:   target = Runtime1::entry_for (C1StubId::load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case load_appendix_id: target = Runtime1::entry_for (C1StubId::load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n@@ -409,1 +409,1 @@\n-  ce->emit_call_c(Runtime1::entry_for (Runtime1::deoptimize_id));\n+  ce->emit_call_c(Runtime1::entry_for (C1StubId::deoptimize_id));\n","filename":"src\/hotspot\/cpu\/s390\/c1_CodeStubs_s390.cpp","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  address a = Runtime1::entry_for (Runtime1::handle_exception_from_callee_id);\n+  address a = Runtime1::entry_for (C1StubId::handle_exception_from_callee_id);\n@@ -215,1 +215,1 @@\n-    \/\/ Runtime1::monitorexit_id expects lock address in Z_R1_scratch.\n+    \/\/ C1StubId::monitorexit_id expects lock address in Z_R1_scratch.\n@@ -244,1 +244,1 @@\n-  __ load_const_optimized(Z_R5, Runtime1::entry_for (Runtime1::unwind_exception_id));\n+  __ load_const_optimized(Z_R5, Runtime1::entry_for (C1StubId::unwind_exception_id));\n@@ -1913,2 +1913,2 @@\n-  address stub = Runtime1::entry_for (compilation()->has_fpu_code() ? Runtime1::handle_exception_id\n-                                                                    : Runtime1::handle_exception_nofpu_id);\n+  address stub = Runtime1::entry_for (compilation()->has_fpu_code() ? C1StubId::handle_exception_id\n+                                                                    : C1StubId::handle_exception_nofpu_id);\n@@ -2119,1 +2119,1 @@\n-      emit_call_c(Runtime1::entry_for (Runtime1::slow_subtype_check_id));\n+      emit_call_c(Runtime1::entry_for (C1StubId::slow_subtype_check_id));\n@@ -2542,1 +2542,1 @@\n-      address a = Runtime1::entry_for (Runtime1::slow_subtype_check_id);\n+      address a = Runtime1::entry_for (C1StubId::slow_subtype_check_id);\n@@ -2617,1 +2617,1 @@\n-    address a = Runtime1::entry_for (Runtime1::slow_subtype_check_id);\n+    address a = Runtime1::entry_for (C1StubId::slow_subtype_check_id);\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -888,1 +888,1 @@\n-  __ call_runtime(Runtime1::entry_for (Runtime1::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for (C1StubId::new_multi_array_id),\n@@ -919,1 +919,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n+    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n@@ -926,1 +926,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_class_cast_exception_id, obj.result(), info_for_exception);\n+    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id, obj.result(), info_for_exception);\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-  \/\/    call(RuntimeAddress(Runtime1::entry_for (Runtime1::dtrace_object_alloc_id)));\n+  \/\/    call(RuntimeAddress(Runtime1::entry_for (C1StubId::dtrace_object_alloc_id)));\n@@ -318,1 +318,1 @@\n-  \/\/   call(RuntimeAddress(Runtime1::entry_for (Runtime1::dtrace_object_alloc_id)));\n+  \/\/   call(RuntimeAddress(Runtime1::entry_for (C1StubId::dtrace_object_alloc_id)));\n","filename":"src\/hotspot\/cpu\/s390\/c1_MacroAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    } else if (_stub_id == Runtime1::forward_exception_id) {\n+    } else if (_stub_id == (int)C1StubId::forward_exception_id) {\n@@ -104,1 +104,1 @@\n-      load_const_optimized(Z_R1, Runtime1::entry_for (Runtime1::forward_exception_id));\n+      load_const_optimized(Z_R1, Runtime1::entry_for (C1StubId::forward_exception_id));\n@@ -308,1 +308,1 @@\n-OopMapSet* Runtime1::generate_code_for(StubID id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n@@ -321,1 +321,1 @@\n-    case forward_exception_id:\n+    case C1StubId::forward_exception_id:\n@@ -328,3 +328,3 @@\n-    case new_instance_id:\n-    case fast_new_instance_id:\n-    case fast_new_instance_init_check_id:\n+    case C1StubId::new_instance_id:\n+    case C1StubId::fast_new_instance_id:\n+    case C1StubId::fast_new_instance_init_check_id:\n@@ -335,1 +335,1 @@\n-        if (id == new_instance_id) {\n+        if (id == C1StubId::new_instance_id) {\n@@ -337,1 +337,1 @@\n-        } else if (id == fast_new_instance_id) {\n+        } else if (id == C1StubId::fast_new_instance_id) {\n@@ -340,1 +340,1 @@\n-          assert(id == fast_new_instance_init_check_id, \"bad StubID\");\n+          assert(id == C1StubId::fast_new_instance_init_check_id, \"bad C1StubId\");\n@@ -355,1 +355,1 @@\n-    case counter_overflow_id:\n+    case C1StubId::counter_overflow_id:\n@@ -374,2 +374,2 @@\n-    case new_type_array_id:\n-    case new_object_array_id:\n+    case C1StubId::new_type_array_id:\n+    case C1StubId::new_object_array_id:\n@@ -381,1 +381,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -394,1 +394,1 @@\n-          int tag = ((id == new_type_array_id)\n+          int tag = ((id == C1StubId::new_type_array_id)\n@@ -406,1 +406,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -421,1 +421,1 @@\n-    case new_multi_array_id:\n+    case C1StubId::new_multi_array_id:\n@@ -439,1 +439,1 @@\n-    case register_finalizer_id:\n+    case C1StubId::register_finalizer_id:\n@@ -462,1 +462,1 @@\n-    case throw_range_check_failed_id:\n+    case C1StubId::throw_range_check_failed_id:\n@@ -468,1 +468,1 @@\n-    case throw_index_exception_id:\n+    case C1StubId::throw_index_exception_id:\n@@ -473,1 +473,1 @@\n-    case throw_div0_exception_id:\n+    case C1StubId::throw_div0_exception_id:\n@@ -478,1 +478,1 @@\n-    case throw_null_pointer_exception_id:\n+    case C1StubId::throw_null_pointer_exception_id:\n@@ -483,2 +483,2 @@\n-    case handle_exception_nofpu_id:\n-    case handle_exception_id:\n+    case C1StubId::handle_exception_nofpu_id:\n+    case C1StubId::handle_exception_id:\n@@ -489,1 +489,1 @@\n-    case handle_exception_from_callee_id:\n+    case C1StubId::handle_exception_from_callee_id:\n@@ -494,1 +494,1 @@\n-    case unwind_exception_id:\n+    case C1StubId::unwind_exception_id:\n@@ -501,1 +501,1 @@\n-    case throw_array_store_exception_id:\n+    case C1StubId::throw_array_store_exception_id:\n@@ -506,1 +506,1 @@\n-    case throw_class_cast_exception_id:\n+    case C1StubId::throw_class_cast_exception_id:\n@@ -512,1 +512,1 @@\n-    case throw_incompatible_class_change_error_id:\n+    case C1StubId::throw_incompatible_class_change_error_id:\n@@ -517,1 +517,1 @@\n-    case slow_subtype_check_id:\n+    case C1StubId::slow_subtype_check_id:\n@@ -583,2 +583,2 @@\n-    case monitorenter_nofpu_id:\n-    case monitorenter_id:\n+    case C1StubId::monitorenter_nofpu_id:\n+    case C1StubId::monitorenter_id:\n@@ -589,1 +589,1 @@\n-        int save_fpu_registers = (id == monitorenter_id);\n+        int save_fpu_registers = (id == C1StubId::monitorenter_id);\n@@ -603,2 +603,2 @@\n-    case monitorexit_nofpu_id:\n-    case monitorexit_id:\n+    case C1StubId::monitorexit_nofpu_id:\n+    case C1StubId::monitorexit_id:\n@@ -611,1 +611,1 @@\n-        int save_fpu_registers = (id == monitorexit_id);\n+        int save_fpu_registers = (id == C1StubId::monitorexit_id);\n@@ -625,1 +625,1 @@\n-    case deoptimize_id:\n+    case C1StubId::deoptimize_id:\n@@ -642,1 +642,1 @@\n-    case access_field_patching_id:\n+    case C1StubId::access_field_patching_id:\n@@ -648,1 +648,1 @@\n-    case load_klass_patching_id:\n+    case C1StubId::load_klass_patching_id:\n@@ -655,1 +655,1 @@\n-    case load_mirror_patching_id:\n+    case C1StubId::load_mirror_patching_id:\n@@ -661,1 +661,1 @@\n-    case load_appendix_patching_id:\n+    case C1StubId::load_appendix_patching_id:\n@@ -667,1 +667,1 @@\n-    case dtrace_object_alloc_id:\n+    case C1StubId::dtrace_object_alloc_id:\n@@ -682,1 +682,1 @@\n-    case fpu2long_stub_id:\n+    case C1StubId::fpu2long_stub_id:\n@@ -757,1 +757,1 @@\n-    case predicate_failed_trap_id:\n+    case C1StubId::predicate_failed_trap_id:\n@@ -778,1 +778,1 @@\n-        __ should_not_reach_here(FILE_AND_LINE, id);\n+        __ should_not_reach_here(FILE_AND_LINE, (int)id);\n@@ -785,1 +785,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(StubID id, StubAssembler *sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler *sasm) {\n@@ -796,1 +796,1 @@\n-    case forward_exception_id: {\n+    case C1StubId::forward_exception_id: {\n@@ -823,2 +823,2 @@\n-    case handle_exception_nofpu_id:\n-    case handle_exception_id:\n+    case C1StubId::handle_exception_nofpu_id:\n+    case C1StubId::handle_exception_id:\n@@ -827,1 +827,1 @@\n-      oop_map = save_live_registers(sasm, id != handle_exception_nofpu_id, Z_EXC_PC);\n+      oop_map = save_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id, Z_EXC_PC);\n@@ -829,1 +829,1 @@\n-    case handle_exception_from_callee_id: {\n+    case C1StubId::handle_exception_from_callee_id: {\n@@ -878,3 +878,3 @@\n-    case forward_exception_id:\n-    case handle_exception_nofpu_id:\n-    case handle_exception_id:\n+    case C1StubId::forward_exception_id:\n+    case C1StubId::handle_exception_nofpu_id:\n+    case C1StubId::handle_exception_id:\n@@ -883,1 +883,1 @@\n-      restore_live_registers(sasm, id != handle_exception_nofpu_id);  \/\/ Pops as well the frame.\n+      restore_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);  \/\/ Pops as well the frame.\n@@ -886,1 +886,1 @@\n-    case handle_exception_from_callee_id: {\n+    case C1StubId::handle_exception_from_callee_id: {\n","filename":"src\/hotspot\/cpu\/s390\/c1_Runtime1_s390.cpp","additions":56,"deletions":56,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::counter_overflow_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::counter_overflow_id)));\n@@ -122,1 +122,1 @@\n-    address a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+    address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -136,1 +136,1 @@\n-  Runtime1::StubID stub_id;\n+  C1StubId stub_id;\n@@ -138,1 +138,1 @@\n-    stub_id = Runtime1::throw_index_exception_id;\n+    stub_id = C1StubId::throw_index_exception_id;\n@@ -140,1 +140,1 @@\n-    stub_id = Runtime1::throw_range_check_failed_id;\n+    stub_id = C1StubId::throw_range_check_failed_id;\n@@ -155,1 +155,1 @@\n-  address a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+  address a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -167,1 +167,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::throw_div0_exception_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::throw_div0_exception_id)));\n@@ -175,1 +175,1 @@\n-NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, Runtime1::StubID stub_id) {\n+NewInstanceStub::NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id) {\n@@ -180,3 +180,3 @@\n-  assert(stub_id == Runtime1::new_instance_id                 ||\n-         stub_id == Runtime1::fast_new_instance_id            ||\n-         stub_id == Runtime1::fast_new_instance_init_check_id,\n+  assert(stub_id == C1StubId::new_instance_id                 ||\n+         stub_id == C1StubId::fast_new_instance_id            ||\n+         stub_id == C1StubId::fast_new_instance_init_check_id,\n@@ -215,1 +215,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::new_type_array_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_type_array_id)));\n@@ -238,1 +238,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::new_object_array_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::new_object_array_id)));\n@@ -250,1 +250,1 @@\n-  Runtime1::StubID enter_id;\n+  C1StubId enter_id;\n@@ -252,1 +252,1 @@\n-    enter_id = Runtime1::monitorenter_id;\n+    enter_id = C1StubId::monitorenter_id;\n@@ -254,1 +254,1 @@\n-    enter_id = Runtime1::monitorenter_nofpu_id;\n+    enter_id = C1StubId::monitorenter_nofpu_id;\n@@ -271,1 +271,1 @@\n-  Runtime1::StubID exit_id;\n+  C1StubId exit_id;\n@@ -273,1 +273,1 @@\n-    exit_id = Runtime1::monitorexit_id;\n+    exit_id = C1StubId::monitorexit_id;\n@@ -275,1 +275,1 @@\n-    exit_id = Runtime1::monitorexit_nofpu_id;\n+    exit_id = C1StubId::monitorexit_nofpu_id;\n@@ -410,4 +410,4 @@\n-    case access_field_id:  target = Runtime1::entry_for(Runtime1::access_field_patching_id); break;\n-    case load_klass_id:    target = Runtime1::entry_for(Runtime1::load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n-    case load_mirror_id:   target = Runtime1::entry_for(Runtime1::load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n-    case load_appendix_id:      target = Runtime1::entry_for(Runtime1::load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case access_field_id:  target = Runtime1::entry_for(C1StubId::access_field_patching_id); break;\n+    case load_klass_id:    target = Runtime1::entry_for(C1StubId::load_klass_patching_id); reloc_type = relocInfo::metadata_type; break;\n+    case load_mirror_id:   target = Runtime1::entry_for(C1StubId::load_mirror_patching_id); reloc_type = relocInfo::oop_type; break;\n+    case load_appendix_id:      target = Runtime1::entry_for(C1StubId::load_appendix_patching_id); reloc_type = relocInfo::oop_type; break;\n@@ -443,1 +443,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::deoptimize_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::deoptimize_id)));\n@@ -453,1 +453,1 @@\n-    a = Runtime1::entry_for(Runtime1::predicate_failed_trap_id);\n+    a = Runtime1::entry_for(C1StubId::predicate_failed_trap_id);\n@@ -455,1 +455,1 @@\n-    a = Runtime1::entry_for(Runtime1::throw_null_pointer_exception_id);\n+    a = Runtime1::entry_for(C1StubId::throw_null_pointer_exception_id);\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -402,1 +402,1 @@\n-  __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::handle_exception_from_callee_id)));\n+  __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::handle_exception_from_callee_id)));\n@@ -466,1 +466,1 @@\n-  __ jump(RuntimeAddress(Runtime1::entry_for(Runtime1::unwind_exception_id)));\n+  __ jump(RuntimeAddress(Runtime1::entry_for(C1StubId::unwind_exception_id)));\n@@ -1569,1 +1569,1 @@\n-        __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::fpu2long_stub_id)));\n+        __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::fpu2long_stub_id)));\n@@ -1784,1 +1784,1 @@\n-        __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+        __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n@@ -1798,1 +1798,1 @@\n-      __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+      __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n@@ -1877,1 +1877,1 @@\n-    __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+    __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n@@ -2896,1 +2896,1 @@\n-  Runtime1::StubID unwind_id;\n+  C1StubId unwind_id;\n@@ -2908,1 +2908,1 @@\n-    unwind_id = Runtime1::handle_exception_id;\n+    unwind_id = C1StubId::handle_exception_id;\n@@ -2910,1 +2910,1 @@\n-    unwind_id = Runtime1::handle_exception_nofpu_id;\n+    unwind_id = C1StubId::handle_exception_nofpu_id;\n@@ -3265,1 +3265,1 @@\n-      __ call(RuntimeAddress(Runtime1::entry_for(Runtime1::slow_subtype_check_id)));\n+      __ call(RuntimeAddress(Runtime1::entry_for(C1StubId::slow_subtype_check_id)));\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1433,1 +1433,1 @@\n-  __ call_runtime(Runtime1::entry_for(Runtime1::new_multi_array_id),\n+  __ call_runtime(Runtime1::entry_for(C1StubId::new_multi_array_id),\n@@ -1466,1 +1466,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n+    stub = new SimpleExceptionStub(C1StubId::throw_incompatible_class_change_error_id, LIR_OprFact::illegalOpr, info_for_exception);\n@@ -1471,1 +1471,1 @@\n-    stub = new SimpleExceptionStub(Runtime1::throw_class_cast_exception_id, obj.result(), info_for_exception);\n+    stub = new SimpleExceptionStub(C1StubId::throw_class_cast_exception_id, obj.result(), info_for_exception);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRGenerator_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-    call(RuntimeAddress(Runtime1::entry_for(Runtime1::dtrace_object_alloc_id)));\n+    call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n@@ -312,1 +312,1 @@\n-    call(RuntimeAddress(Runtime1::entry_for(Runtime1::dtrace_object_alloc_id)));\n+    call(RuntimeAddress(Runtime1::entry_for(C1StubId::dtrace_object_alloc_id)));\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  align_stack = (stub_id() == Runtime1::handle_exception_from_callee_id);\n+  align_stack = (stub_id() == (int)C1StubId::handle_exception_from_callee_id);\n@@ -127,1 +127,1 @@\n-    } else if (_stub_id == Runtime1::forward_exception_id) {\n+    } else if (_stub_id == (int)C1StubId::forward_exception_id) {\n@@ -130,1 +130,1 @@\n-      jump(RuntimeAddress(Runtime1::entry_for(Runtime1::forward_exception_id)));\n+      jump(RuntimeAddress(Runtime1::entry_for(C1StubId::forward_exception_id)));\n@@ -674,1 +674,1 @@\n-OopMapSet* Runtime1::generate_handle_exception(StubID id, StubAssembler *sasm) {\n+OopMapSet* Runtime1::generate_handle_exception(C1StubId id, StubAssembler *sasm) {\n@@ -687,1 +687,1 @@\n-  case forward_exception_id:\n+  case C1StubId::forward_exception_id:\n@@ -706,2 +706,2 @@\n-  case handle_exception_nofpu_id:\n-  case handle_exception_id:\n+  case C1StubId::handle_exception_nofpu_id:\n+  case C1StubId::handle_exception_id:\n@@ -709,1 +709,1 @@\n-    oop_map = save_live_registers(sasm, 1 \/*thread*\/, id != handle_exception_nofpu_id);\n+    oop_map = save_live_registers(sasm, 1 \/*thread*\/, id != C1StubId::handle_exception_nofpu_id);\n@@ -711,1 +711,1 @@\n-  case handle_exception_from_callee_id: {\n+  case C1StubId::handle_exception_from_callee_id: {\n@@ -778,3 +778,3 @@\n-  case forward_exception_id:\n-  case handle_exception_nofpu_id:\n-  case handle_exception_id:\n+  case C1StubId::forward_exception_id:\n+  case C1StubId::handle_exception_nofpu_id:\n+  case C1StubId::handle_exception_id:\n@@ -782,1 +782,1 @@\n-    restore_live_registers(sasm, id != handle_exception_nofpu_id);\n+    restore_live_registers(sasm, id != C1StubId::handle_exception_nofpu_id);\n@@ -784,1 +784,1 @@\n-  case handle_exception_from_callee_id:\n+  case C1StubId::handle_exception_from_callee_id:\n@@ -938,1 +938,1 @@\n-               RuntimeAddress(Runtime1::entry_for(Runtime1::forward_exception_id)));\n+               RuntimeAddress(Runtime1::entry_for(C1StubId::forward_exception_id)));\n@@ -1010,1 +1010,1 @@\n-OopMapSet* Runtime1::generate_code_for(StubID id, StubAssembler* sasm) {\n+OopMapSet* Runtime1::generate_code_for(C1StubId id, StubAssembler* sasm) {\n@@ -1022,1 +1022,1 @@\n-    case forward_exception_id:\n+    case C1StubId::forward_exception_id:\n@@ -1030,3 +1030,3 @@\n-    case new_instance_id:\n-    case fast_new_instance_id:\n-    case fast_new_instance_init_check_id:\n+    case C1StubId::new_instance_id:\n+    case C1StubId::fast_new_instance_id:\n+    case C1StubId::fast_new_instance_init_check_id:\n@@ -1037,1 +1037,1 @@\n-        if (id == new_instance_id) {\n+        if (id == C1StubId::new_instance_id) {\n@@ -1039,1 +1039,1 @@\n-        } else if (id == fast_new_instance_id) {\n+        } else if (id == C1StubId::fast_new_instance_id) {\n@@ -1042,1 +1042,1 @@\n-          assert(id == fast_new_instance_init_check_id, \"bad StubID\");\n+          assert(id == C1StubId::fast_new_instance_init_check_id, \"bad C1StubId\");\n@@ -1061,1 +1061,1 @@\n-    case counter_overflow_id:\n+    case C1StubId::counter_overflow_id:\n@@ -1079,2 +1079,2 @@\n-    case new_type_array_id:\n-    case new_object_array_id:\n+    case C1StubId::new_type_array_id:\n+    case C1StubId::new_object_array_id:\n@@ -1086,1 +1086,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -1099,1 +1099,1 @@\n-          int tag = ((id == new_type_array_id)\n+          int tag = ((id == C1StubId::new_type_array_id)\n@@ -1113,1 +1113,1 @@\n-        if (id == new_type_array_id) {\n+        if (id == C1StubId::new_type_array_id) {\n@@ -1131,1 +1131,1 @@\n-    case new_multi_array_id:\n+    case C1StubId::new_multi_array_id:\n@@ -1148,1 +1148,1 @@\n-    case register_finalizer_id:\n+    case C1StubId::register_finalizer_id:\n@@ -1188,1 +1188,1 @@\n-    case throw_range_check_failed_id:\n+    case C1StubId::throw_range_check_failed_id:\n@@ -1194,1 +1194,1 @@\n-    case throw_index_exception_id:\n+    case C1StubId::throw_index_exception_id:\n@@ -1200,1 +1200,1 @@\n-    case throw_div0_exception_id:\n+    case C1StubId::throw_div0_exception_id:\n@@ -1206,1 +1206,1 @@\n-    case throw_null_pointer_exception_id:\n+    case C1StubId::throw_null_pointer_exception_id:\n@@ -1212,2 +1212,2 @@\n-    case handle_exception_nofpu_id:\n-    case handle_exception_id:\n+    case C1StubId::handle_exception_nofpu_id:\n+    case C1StubId::handle_exception_id:\n@@ -1219,1 +1219,1 @@\n-    case handle_exception_from_callee_id:\n+    case C1StubId::handle_exception_from_callee_id:\n@@ -1225,1 +1225,1 @@\n-    case unwind_exception_id:\n+    case C1StubId::unwind_exception_id:\n@@ -1233,1 +1233,1 @@\n-    case throw_array_store_exception_id:\n+    case C1StubId::throw_array_store_exception_id:\n@@ -1241,1 +1241,1 @@\n-    case throw_class_cast_exception_id:\n+    case C1StubId::throw_class_cast_exception_id:\n@@ -1247,1 +1247,1 @@\n-    case throw_incompatible_class_change_error_id:\n+    case C1StubId::throw_incompatible_class_change_error_id:\n@@ -1253,1 +1253,1 @@\n-    case slow_subtype_check_id:\n+    case C1StubId::slow_subtype_check_id:\n@@ -1306,1 +1306,1 @@\n-    case monitorenter_nofpu_id:\n+    case C1StubId::monitorenter_nofpu_id:\n@@ -1309,1 +1309,1 @@\n-    case monitorenter_id:\n+    case C1StubId::monitorenter_id:\n@@ -1327,1 +1327,1 @@\n-    case monitorexit_nofpu_id:\n+    case C1StubId::monitorexit_nofpu_id:\n@@ -1330,1 +1330,1 @@\n-    case monitorexit_id:\n+    case C1StubId::monitorexit_id:\n@@ -1350,1 +1350,1 @@\n-    case deoptimize_id:\n+    case C1StubId::deoptimize_id:\n@@ -1367,1 +1367,1 @@\n-    case access_field_patching_id:\n+    case C1StubId::access_field_patching_id:\n@@ -1374,1 +1374,1 @@\n-    case load_klass_patching_id:\n+    case C1StubId::load_klass_patching_id:\n@@ -1381,1 +1381,1 @@\n-    case load_mirror_patching_id:\n+    case C1StubId::load_mirror_patching_id:\n@@ -1388,1 +1388,1 @@\n-    case load_appendix_patching_id:\n+    case C1StubId::load_appendix_patching_id:\n@@ -1395,1 +1395,1 @@\n-    case dtrace_object_alloc_id:\n+    case C1StubId::dtrace_object_alloc_id:\n@@ -1410,1 +1410,1 @@\n-    case fpu2long_stub_id:\n+    case C1StubId::fpu2long_stub_id:\n@@ -1499,1 +1499,1 @@\n-    case predicate_failed_trap_id:\n+    case C1StubId::predicate_failed_trap_id:\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":55,"deletions":55,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -267,1 +267,1 @@\n-  Runtime1::StubID _stub_id;\n+  C1StubId _stub_id;\n@@ -270,1 +270,1 @@\n-  NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, Runtime1::StubID stub_id);\n+  NewInstanceStub(LIR_Opr klass_reg, LIR_Opr result, ciInstanceKlass* klass, CodeEmitInfo* info, C1StubId stub_id);\n@@ -518,1 +518,1 @@\n-  Runtime1::StubID _stub;\n+  C1StubId _stub;\n@@ -522,1 +522,1 @@\n-  SimpleExceptionStub(Runtime1::StubID stub, LIR_Opr obj, CodeEmitInfo* info):\n+  SimpleExceptionStub(C1StubId stub, LIR_Opr obj, CodeEmitInfo* info):\n@@ -549,1 +549,1 @@\n-  ArrayStoreExceptionStub(LIR_Opr obj, CodeEmitInfo* info): SimpleExceptionStub(Runtime1::throw_array_store_exception_id, obj, info) {}\n+  ArrayStoreExceptionStub(LIR_Opr obj, CodeEmitInfo* info): SimpleExceptionStub(C1StubId::throw_array_store_exception_id, obj, info) {}\n","filename":"src\/hotspot\/share\/c1\/c1_CodeStubs.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -662,1 +662,1 @@\n-    Runtime1::StubID stub_id = klass->is_initialized() ? Runtime1::fast_new_instance_id : Runtime1::fast_new_instance_init_check_id;\n+    C1StubId stub_id = klass->is_initialized() ? C1StubId::fast_new_instance_id : C1StubId::fast_new_instance_init_check_id;\n@@ -673,1 +673,1 @@\n-    CodeStub* slow_path = new NewInstanceStub(klass_reg, dst, klass, info, Runtime1::new_instance_id);\n+    CodeStub* slow_path = new NewInstanceStub(klass_reg, dst, klass, info, C1StubId::new_instance_id);\n@@ -1482,1 +1482,1 @@\n-               CAST_FROM_FN_PTR(address, Runtime1::entry_for(Runtime1::register_finalizer_id)),\n+               CAST_FROM_FN_PTR(address, Runtime1::entry_for(C1StubId::register_finalizer_id)),\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,3 @@\n-CodeBlob* Runtime1::_blobs[Runtime1::number_of_ids];\n+CodeBlob* Runtime1::_blobs[(int)C1StubId::NUM_STUBIDS];\n+\n+#define C1_BLOB_NAME_DEFINE(name)  \"C1 Runtime \" # name \"_blob\",\n@@ -114,1 +116,1 @@\n-  RUNTIME1_STUBS(STUB_NAME, LAST_STUB_NAME)\n+  C1_STUBS_DO(C1_BLOB_NAME_DEFINE)\n@@ -116,0 +118,1 @@\n+#undef C1_STUB_NAME_DEFINE\n@@ -193,1 +196,1 @@\n-class StubIDStubAssemblerCodeGenClosure: public StubAssemblerCodeGenClosure {\n+class C1StubIdStubAssemblerCodeGenClosure: public StubAssemblerCodeGenClosure {\n@@ -195,1 +198,1 @@\n-  Runtime1::StubID _id;\n+  C1StubId _id;\n@@ -197,1 +200,1 @@\n-  StubIDStubAssemblerCodeGenClosure(Runtime1::StubID id) : _id(id) {}\n+  C1StubIdStubAssemblerCodeGenClosure(C1StubId id) : _id(id) {}\n@@ -203,1 +206,1 @@\n-CodeBlob* Runtime1::generate_blob(BufferBlob* buffer_blob, int stub_id, const char* name, bool expect_oop_map, StubAssemblerCodeGenClosure* cl) {\n+CodeBlob* Runtime1::generate_blob(BufferBlob* buffer_blob, C1StubId id, const char* name, bool expect_oop_map, StubAssemblerCodeGenClosure* cl) {\n@@ -215,1 +218,1 @@\n-  StubAssembler* sasm = new StubAssembler(&code, name, stub_id);\n+  StubAssembler* sasm = new StubAssembler(&code, name, (int)id);\n@@ -240,2 +243,2 @@\n-void Runtime1::generate_blob_for(BufferBlob* buffer_blob, StubID id) {\n-  assert(0 <= id && id < number_of_ids, \"illegal stub id\");\n+void Runtime1::generate_blob_for(BufferBlob* buffer_blob, C1StubId id) {\n+  assert(C1StubId::NO_STUBID < id && id < C1StubId::NUM_STUBIDS, \"illegal stub id\");\n@@ -247,5 +250,5 @@\n-  case dtrace_object_alloc_id:\n-  case slow_subtype_check_id:\n-  case fpu2long_stub_id:\n-  case unwind_exception_id:\n-  case counter_overflow_id:\n+  case C1StubId::dtrace_object_alloc_id:\n+  case C1StubId::slow_subtype_check_id:\n+  case C1StubId::fpu2long_stub_id:\n+  case C1StubId::unwind_exception_id:\n+  case C1StubId::counter_overflow_id:\n@@ -258,1 +261,1 @@\n-  StubIDStubAssemblerCodeGenClosure cl(id);\n+  C1StubIdStubAssemblerCodeGenClosure cl(id);\n@@ -261,1 +264,1 @@\n-  _blobs[id] = blob;\n+  _blobs[(int)id] = blob;\n@@ -268,1 +271,2 @@\n-  for (int id = 0; id < number_of_ids; id++) generate_blob_for(blob, (StubID)id);\n+  int limit = (int)C1StubId::NUM_STUBIDS;\n+  for (int id = 0; id < limit; id++) generate_blob_for(blob, (C1StubId)id);\n@@ -273,1 +277,1 @@\n-    for (int id = 0; id < number_of_ids; id++) {\n+    for (int id = 0; id < limit; id++) {\n@@ -285,3 +289,3 @@\n-CodeBlob* Runtime1::blob_for(StubID id) {\n-  assert(0 <= id && id < number_of_ids, \"illegal stub id\");\n-  return _blobs[id];\n+CodeBlob* Runtime1::blob_for(C1StubId id) {\n+  assert(C1StubId::NO_STUBID < id && id < C1StubId::NUM_STUBIDS, \"illegal stub id\");\n+  return _blobs[(int)id];\n@@ -291,3 +295,3 @@\n-const char* Runtime1::name_for(StubID id) {\n-  assert(0 <= id && id < number_of_ids, \"illegal stub id\");\n-  return _blob_names[id];\n+const char* Runtime1::name_for(C1StubId id) {\n+  assert(C1StubId::NO_STUBID < id && id < C1StubId::NUM_STUBIDS, \"illegal stub id\");\n+  return _blob_names[(int)id];\n@@ -297,2 +301,4 @@\n-  for (int id = 0; id < number_of_ids; id++) {\n-    if (entry == entry_for((StubID)id)) return name_for((StubID)id);\n+  int limit = (int)C1StubId::NUM_STUBIDS;\n+  for (int i = 0; i < limit; i++) {\n+    C1StubId id = (C1StubId)i;\n+    if (entry == entry_for(id)) return name_for(id);\n@@ -428,2 +434,2 @@\n-JRT_ENTRY(void, Runtime1::unimplemented_entry(JavaThread* current, StubID id))\n-  tty->print_cr(\"Runtime1::entry_for(%d) returned unimplemented entry point\", id);\n+JRT_ENTRY(void, Runtime1::unimplemented_entry(JavaThread* current, C1StubId id))\n+  tty->print_cr(\"Runtime1::entry_for(%d) returned unimplemented entry point\", (int)id);\n@@ -528,2 +534,2 @@\n-  if (current->last_frame().cb() == Runtime1::blob_for(Runtime1::handle_exception_from_callee_id)) {\n-    \/\/ The Runtime1::handle_exception_from_callee_id handler is invoked after the\n+  if (current->last_frame().cb() == Runtime1::blob_for(C1StubId::handle_exception_from_callee_id)) {\n+    \/\/ The C1StubId::handle_exception_from_callee_id handler is invoked after the\n@@ -925,1 +931,1 @@\n-JRT_ENTRY(void, Runtime1::patch_code(JavaThread* current, Runtime1::StubID stub_id ))\n+JRT_ENTRY(void, Runtime1::patch_code(JavaThread* current, C1StubId stub_id ))\n@@ -962,1 +968,1 @@\n-    (stub_id == Runtime1::load_klass_patching_id || stub_id == Runtime1::load_mirror_patching_id);\n+    (stub_id == C1StubId::load_klass_patching_id || stub_id == C1StubId::load_mirror_patching_id);\n@@ -964,1 +970,1 @@\n-  if (stub_id == Runtime1::access_field_patching_id) {\n+  if (stub_id == C1StubId::access_field_patching_id) {\n@@ -1047,1 +1053,1 @@\n-  } else if (stub_id == load_appendix_patching_id) {\n+  } else if (stub_id == C1StubId::load_appendix_patching_id) {\n@@ -1131,1 +1137,1 @@\n-                        p2i(instr_pc), (stub_id == Runtime1::access_field_patching_id) ? \"field\" : \"klass\");\n+                        p2i(instr_pc), (stub_id == C1StubId::access_field_patching_id) ? \"field\" : \"klass\");\n@@ -1147,1 +1153,1 @@\n-        if (stub_id == Runtime1::access_field_patching_id) {\n+        if (stub_id == C1StubId::access_field_patching_id) {\n@@ -1173,1 +1179,1 @@\n-            if (stub_id == Runtime1::load_klass_patching_id) {\n+            if (stub_id == C1StubId::load_klass_patching_id) {\n@@ -1185,1 +1191,1 @@\n-        } else if (stub_id == Runtime1::load_appendix_patching_id) {\n+        } else if (stub_id == C1StubId::load_appendix_patching_id) {\n@@ -1204,1 +1210,1 @@\n-              stub_id == Runtime1::load_appendix_patching_id) &&\n+              stub_id == C1StubId::load_appendix_patching_id) &&\n@@ -1212,2 +1218,2 @@\n-                assert(stub_id == Runtime1::load_mirror_patching_id ||\n-                       stub_id == Runtime1::load_appendix_patching_id, \"wrong stub id\");\n+                assert(stub_id == C1StubId::load_mirror_patching_id ||\n+                       stub_id == C1StubId::load_appendix_patching_id, \"wrong stub id\");\n@@ -1218,1 +1224,1 @@\n-                assert(stub_id == Runtime1::load_klass_patching_id, \"wrong stub id\");\n+                assert(stub_id == C1StubId::load_klass_patching_id, \"wrong stub id\");\n@@ -1241,1 +1247,1 @@\n-              stub_id == Runtime1::load_appendix_patching_id) {\n+              stub_id == C1StubId::load_appendix_patching_id) {\n@@ -1243,1 +1249,1 @@\n-              (stub_id == Runtime1::load_klass_patching_id) ?\n+              (stub_id == C1StubId::load_klass_patching_id) ?\n@@ -1281,3 +1287,3 @@\n-static bool is_patching_needed(JavaThread* current, Runtime1::StubID stub_id) {\n-  if (stub_id == Runtime1::load_klass_patching_id ||\n-      stub_id == Runtime1::load_mirror_patching_id) {\n+static bool is_patching_needed(JavaThread* current, C1StubId stub_id) {\n+  if (stub_id == C1StubId::load_klass_patching_id ||\n+      stub_id == C1StubId::load_mirror_patching_id) {\n@@ -1312,1 +1318,1 @@\n-void Runtime1::patch_code(JavaThread* current, Runtime1::StubID stub_id) {\n+void Runtime1::patch_code(JavaThread* current, C1StubId stub_id) {\n@@ -1367,1 +1373,1 @@\n-    patch_code(current, load_klass_patching_id);\n+    patch_code(current, C1StubId::load_klass_patching_id);\n@@ -1384,1 +1390,1 @@\n-    patch_code(current, load_mirror_patching_id);\n+    patch_code(current, C1StubId::load_mirror_patching_id);\n@@ -1401,1 +1407,1 @@\n-    patch_code(current, load_appendix_patching_id);\n+    patch_code(current, C1StubId::load_appendix_patching_id);\n@@ -1428,1 +1434,1 @@\n-    patch_code(current, access_field_patching_id);\n+    patch_code(current, C1StubId::access_field_patching_id);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":59,"deletions":53,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include \"runtime\/stubDeclarations.hpp\"\n@@ -40,41 +41,0 @@\n-#define RUNTIME1_STUBS(stub, last_entry) \\\n-  stub(dtrace_object_alloc)          \\\n-  stub(unwind_exception)             \\\n-  stub(forward_exception)            \\\n-  stub(throw_range_check_failed)       \/* throws ArrayIndexOutOfBoundsException *\/ \\\n-  stub(throw_index_exception)          \/* throws IndexOutOfBoundsException *\/ \\\n-  stub(throw_div0_exception)         \\\n-  stub(throw_null_pointer_exception) \\\n-  stub(register_finalizer)           \\\n-  stub(new_instance)                 \\\n-  stub(fast_new_instance)            \\\n-  stub(fast_new_instance_init_check) \\\n-  stub(new_type_array)               \\\n-  stub(new_object_array)             \\\n-  stub(new_multi_array)              \\\n-  stub(handle_exception_nofpu)         \/* optimized version that does not preserve fpu registers *\/ \\\n-  stub(handle_exception)             \\\n-  stub(handle_exception_from_callee) \\\n-  stub(throw_array_store_exception)  \\\n-  stub(throw_class_cast_exception)   \\\n-  stub(throw_incompatible_class_change_error)   \\\n-  stub(slow_subtype_check)           \\\n-  stub(monitorenter)                 \\\n-  stub(monitorenter_nofpu)             \/* optimized version that does not preserve fpu registers *\/ \\\n-  stub(monitorexit)                  \\\n-  stub(monitorexit_nofpu)              \/* optimized version that does not preserve fpu registers *\/ \\\n-  stub(deoptimize)                   \\\n-  stub(access_field_patching)        \\\n-  stub(load_klass_patching)          \\\n-  stub(load_mirror_patching)         \\\n-  stub(load_appendix_patching)       \\\n-  stub(fpu2long_stub)                \\\n-  stub(counter_overflow)             \\\n-  stub(predicate_failed_trap)        \\\n-  last_entry(number_of_ids)\n-\n-#define DECLARE_STUB_ID(x)       x ## _id ,\n-#define DECLARE_LAST_STUB_ID(x)  x\n-#define STUB_NAME(x)             #x \" Runtime1 stub\",\n-#define LAST_STUB_NAME(x)        #x \" Runtime1 stub\"\n-\n@@ -86,0 +46,10 @@\n+\/\/ define C1StubId enum tags: unwind_exception_id etc\n+\n+#define C1_STUB_ID_ENUM_DECLARE(name) STUB_ID_NAME(name),\n+enum class C1StubId :int {\n+  NO_STUBID = -1,\n+  C1_STUBS_DO(C1_STUB_ID_ENUM_DECLARE)\n+  NUM_STUBIDS\n+};\n+#undef C1_STUB_ID_ENUM_DECLARE\n+\n@@ -90,5 +60,1 @@\n- public:\n-  enum StubID {\n-    RUNTIME1_STUBS(DECLARE_STUB_ID, DECLARE_LAST_STUB_ID)\n-  };\n-\n+public:\n@@ -118,1 +84,1 @@\n-  static CodeBlob* _blobs[number_of_ids];\n+  static CodeBlob* _blobs[(int)C1StubId::NUM_STUBIDS];\n@@ -123,3 +89,3 @@\n-  static CodeBlob*  generate_blob(BufferBlob* buffer_blob, int stub_id, const char* name, bool expect_oop_map, StubAssemblerCodeGenClosure *cl);\n-  static void       generate_blob_for(BufferBlob* blob, StubID id);\n-  static OopMapSet* generate_code_for(StubID id, StubAssembler* sasm);\n+  static CodeBlob*  generate_blob(BufferBlob* buffer_blob, C1StubId id, const char* name, bool expect_oop_map, StubAssemblerCodeGenClosure *cl);\n+  static void       generate_blob_for(BufferBlob* blob, C1StubId id);\n+  static OopMapSet* generate_code_for(C1StubId id, StubAssembler* sasm);\n@@ -128,1 +94,1 @@\n-  static OopMapSet* generate_handle_exception(StubID id, StubAssembler* sasm);\n+  static OopMapSet* generate_handle_exception(C1StubId id, StubAssembler* sasm);\n@@ -143,1 +109,1 @@\n-  static void unimplemented_entry(JavaThread* current, StubID id);\n+  static void unimplemented_entry(JavaThread* current, C1StubId id);\n@@ -165,1 +131,1 @@\n-  static void patch_code(JavaThread* current, StubID stub_id);\n+  static void patch_code(JavaThread* current, C1StubId stub_id);\n@@ -173,3 +139,3 @@\n-  static CodeBlob* blob_for (StubID id);\n-  static address   entry_for(StubID id)          { return blob_for(id)->code_begin(); }\n-  static const char* name_for (StubID id);\n+  static CodeBlob* blob_for (C1StubId id);\n+  static address   entry_for(C1StubId id)          { return blob_for(id)->code_begin(); }\n+  static const char* name_for (C1StubId id);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.hpp","additions":23,"deletions":57,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -222,1 +222,1 @@\n-  _pre_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, -1, \"g1_pre_barrier_slow\",\n+  _pre_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID, \"g1_pre_barrier_slow\",\n@@ -224,1 +224,1 @@\n-  _post_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, -1, \"g1_post_barrier_slow\",\n+  _post_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID, \"g1_post_barrier_slow\",\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2024, Red Hat, Inc. All rights reserved.\n@@ -266,1 +266,1 @@\n-  _pre_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n+  _pre_barrier_c1_runtime_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID,\n@@ -271,1 +271,1 @@\n-    _load_reference_barrier_strong_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n+    _load_reference_barrier_strong_rt_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID,\n@@ -276,1 +276,1 @@\n-    _load_reference_barrier_strong_native_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n+    _load_reference_barrier_strong_native_rt_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID,\n@@ -281,1 +281,1 @@\n-    _load_reference_barrier_weak_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n+    _load_reference_barrier_weak_rt_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID,\n@@ -286,1 +286,1 @@\n-    _load_reference_barrier_phantom_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n+    _load_reference_barrier_phantom_rt_code_blob = Runtime1::generate_blob(buffer_blob, C1StubId::NO_STUBID,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,1 +228,1 @@\n-  CodeBlob* const code_blob = Runtime1::generate_blob(blob, -1 \/* stub_id *\/, name, false \/* expect_oop_map*\/, &cl);\n+  CodeBlob* const code_blob = Runtime1::generate_blob(blob, C1StubId::NO_STUBID \/* stub_id *\/, name, false \/* expect_oop_map*\/, &cl);\n","filename":"src\/hotspot\/share\/gc\/x\/c1\/xBarrierSetC1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -510,1 +510,1 @@\n-  CodeBlob* const code_blob = Runtime1::generate_blob(blob, -1 \/* stub_id *\/, name, false \/* expect_oop_map*\/, &cl);\n+  CodeBlob* const code_blob = Runtime1::generate_blob(blob, C1StubId::NO_STUBID \/* stub_id *\/, name, false \/* expect_oop_map*\/, &cl);\n@@ -530,1 +530,1 @@\n-  CodeBlob* const code_blob = Runtime1::generate_blob(blob, -1 \/* stub_id *\/, name, false \/* expect_oop_map*\/, &cl);\n+  CodeBlob* const code_blob = Runtime1::generate_blob(blob, C1StubId::NO_STUBID \/* stub_id *\/, name, false \/* expect_oop_map*\/, &cl);\n","filename":"src\/hotspot\/share\/gc\/z\/c1\/zBarrierSetC1.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2046,1 +2046,1 @@\n-      assert(strncmp(name, \"_multianewarray\", 15) == 0, \"TODO: add failed case check\");\n+      assert(strncmp(name, \"Opto Runtime multianewarray\", 27) == 0, \"TODO: add failed case check\");\n@@ -2741,1 +2741,1 @@\n-    assert(strncmp(name, \"_multianewarray\", 15) == 0, \"sanity\");\n+    assert(strncmp(name, \"Opto Runtime multianewarray\", 27) == 0, \"sanity\");\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,28 +91,21 @@\n-\n-\n-\/\/ Compiled code entry points\n-address OptoRuntime::_new_instance_Java                           = nullptr;\n-address OptoRuntime::_new_array_Java                              = nullptr;\n-address OptoRuntime::_new_array_nozero_Java                       = nullptr;\n-address OptoRuntime::_multianewarray2_Java                        = nullptr;\n-address OptoRuntime::_multianewarray3_Java                        = nullptr;\n-address OptoRuntime::_multianewarray4_Java                        = nullptr;\n-address OptoRuntime::_multianewarray5_Java                        = nullptr;\n-address OptoRuntime::_multianewarrayN_Java                        = nullptr;\n-address OptoRuntime::_vtable_must_compile_Java                    = nullptr;\n-address OptoRuntime::_complete_monitor_locking_Java               = nullptr;\n-address OptoRuntime::_monitor_notify_Java                         = nullptr;\n-address OptoRuntime::_monitor_notifyAll_Java                      = nullptr;\n-address OptoRuntime::_rethrow_Java                                = nullptr;\n-\n-address OptoRuntime::_slow_arraycopy_Java                         = nullptr;\n-address OptoRuntime::_register_finalizer_Java                     = nullptr;\n-#if INCLUDE_JVMTI\n-address OptoRuntime::_notify_jvmti_vthread_start                  = nullptr;\n-address OptoRuntime::_notify_jvmti_vthread_end                    = nullptr;\n-address OptoRuntime::_notify_jvmti_vthread_mount                  = nullptr;\n-address OptoRuntime::_notify_jvmti_vthread_unmount                = nullptr;\n-#endif\n-\n-UncommonTrapBlob*   OptoRuntime::_uncommon_trap_blob;\n-ExceptionBlob*      OptoRuntime::_exception_blob;\n+#define OPTO_BLOB_FIELD_DEFINE(name, type) \\\n+  type OptoRuntime:: BLOB_FIELD_NAME(name)  = nullptr;\n+#define OPTO_STUB_FIELD_NAME(name) _ ## name ## _Java\n+#define OPTO_STUB_FIELD_DEFINE(name, f, t, r) \\\n+  address OptoRuntime:: OPTO_STUB_FIELD_NAME(name) = nullptr;\n+#define OPTO_JVMTI_STUB_FIELD_DEFINE(name) \\\n+  address OptoRuntime:: STUB_FIELD_NAME(name) = nullptr;\n+OPTO_STUBS_DO(OPTO_BLOB_FIELD_DEFINE, OPTO_STUB_FIELD_DEFINE, OPTO_JVMTI_STUB_FIELD_DEFINE)\n+#undef OPTO_BLOB_FIELD_DEFINE\n+#undef OPTO_STUB_FIELD_DEFINE\n+#undef OPTO_JVMTI_STUB_FIELD_DEFINE\n+\n+#define OPTO_BLOB_NAME_DEFINE(name, type)  \"Opto Runtime \" # name \"_blob\",\n+#define OPTO_STUB_NAME_DEFINE(name, f, t, r)  \"Opto Runtime \" # name,\n+#define OPTO_JVMTI_STUB_NAME_DEFINE(name)  \"Opto Runtime \" # name,\n+const char* OptoRuntime::_stub_names[] = {\n+  OPTO_STUBS_DO(OPTO_BLOB_NAME_DEFINE, OPTO_STUB_NAME_DEFINE, OPTO_JVMTI_STUB_NAME_DEFINE)\n+};\n+#undef OPTO_BLOB_NAME_DEFINE\n+#undef OPTO_STUB_NAME_DEFINE\n+#undef OPTO_JVMTI_STUB_NAME_DEFINE\n@@ -135,1 +128,1 @@\n-\n+\/*\n@@ -139,0 +132,46 @@\n+*\/\n+\n+#define GEN_OPTO_BLOB(name, type)                    \\\n+  generate_ ## name ## _blob();\n+\n+\/\/ a few helper macros to conjure up generate_stub call arguments\n+#define OPTO_STUB_FIELD_NAME(name) _ ## name ## _Java\n+#define OPTO_STUB_TYPEFUNC(name) name ## _Type\n+#define OPTO_STUB_C_FUNC(name) CAST_FROM_FN_PTR(address, name ## _C)\n+#define OPTO_STUB_NAME(name) stub_name(OptoStubId::name ## _id)\n+\n+\/\/ Almost all the C functions targeted from the generated stubs are\n+\/\/ implemented locally to OptoRuntime with names that can be generated\n+\/\/ from the stub name by appending suffix '_C'. However, in two cases\n+\/\/ a common target method also needs to be called from shared runtime\n+\/\/ stubs. In these two cases the opto stubs rely on method\n+\/\/ imlementations defined in class SharedRuntime. The following\n+\/\/ defines temporarily rebind the generated names to reference the\n+\/\/ relevant implementations.\n+\n+#define complete_monitor_locking_C SharedRuntime::complete_monitor_locking_C\n+#define slow_arraycopy_C SharedRuntime::slow_arraycopy_C\n+\n+#define GEN_OPTO_STUB(name, fancy_jump, pass_tls, pass_retpc  )         \\\n+  OPTO_STUB_FIELD_NAME(name) =                                          \\\n+    generate_stub(env,                                                  \\\n+                  OPTO_STUB_TYPEFUNC(name),                             \\\n+                  OPTO_STUB_C_FUNC(name),                               \\\n+                  OPTO_STUB_NAME(name),                                 \\\n+                  fancy_jump,                                           \\\n+                  pass_tls,                                             \\\n+                  pass_retpc);                                          \\\n+  if (OPTO_STUB_FIELD_NAME(name) == nullptr) { return false; }          \\\n+\n+#define OPTO_JVMTI_STUB_C_FUNC(name) CAST_FROM_FN_PTR(address, SharedRuntime::name)\n+\n+#define GEN_OPTO_JVMTI_STUB(name)                                       \\\n+  STUB_FIELD_NAME(name) =                                               \\\n+    generate_stub(env,                                                  \\\n+                  notify_jvmti_vthread_Type,                            \\\n+                  OPTO_JVMTI_STUB_C_FUNC(name),                         \\\n+                  OPTO_STUB_NAME(name),                                 \\\n+                  0,                                                    \\\n+                  true,                                                 \\\n+                  false);                                               \\\n+  if (STUB_FIELD_NAME(name) == nullptr) { return false; }               \\\n@@ -142,0 +181,3 @@\n+  OPTO_STUBS_DO(GEN_OPTO_BLOB, GEN_OPTO_STUB, GEN_OPTO_JVMTI_STUB)\n+\n+    \/*\n@@ -171,0 +213,1 @@\n+  *\/\n@@ -174,1 +217,14 @@\n-#undef gen\n+#undef GEN_OPTO_BLOB\n+\n+#undef OPTO_STUB_FIELD_NAME\n+#undef OPTO_STUB_TYPEFUNC\n+#undef OPTO_STUB_C_FUNC\n+#undef OPTO_STUB_NAME\n+#undef GEN_OPTO_STUB\n+\n+#undef complete_monitor_locking_C\n+#undef slow_arraycopy_C\n+\n+#undef OPTO_JVMTI_STUB_C_FUNC\n+#undef GEN_OPTO_JVMTI_STUB\n+\/\/ #undef gen\n@@ -532,0 +588,4 @@\n+const TypeFunc *OptoRuntime::new_array_nozero_Type() {\n+  return new_array_Type();\n+}\n+\n@@ -610,0 +670,3 @@\n+const TypeFunc *OptoRuntime::complete_monitor_locking_Type() {\n+  return complete_monitor_enter_Type();\n+}\n@@ -640,0 +703,4 @@\n+const TypeFunc *OptoRuntime::monitor_notifyAll_Type() {\n+  return monitor_notify_Type();\n+}\n+\n@@ -1830,1 +1897,1 @@\n-JRT_ENTRY_NO_ASYNC(void, OptoRuntime::register_finalizer(oopDesc* obj, JavaThread* current))\n+JRT_ENTRY_NO_ASYNC(void, OptoRuntime::register_finalizer_C(oopDesc* obj, JavaThread* current))\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":98,"deletions":31,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/stubDeclarations.hpp\"\n@@ -101,0 +102,14 @@\n+\/\/ define OptoStubId enum tags: uncommon_trap_id etc\n+\n+#define OPTO_BLOB_ID_ENUM_DECLARE(name, type) STUB_ID_NAME(name),\n+#define OPTO_STUB_ID_ENUM_DECLARE(name, f, t, r) STUB_ID_NAME(name),\n+#define OPTO_JVMTI_STUB_ID_ENUM_DECLARE(name) STUB_ID_NAME(name),\n+enum class OptoStubId :int {\n+  NO_STUBID = -1,\n+  OPTO_STUBS_DO(OPTO_BLOB_ID_ENUM_DECLARE, OPTO_STUB_ID_ENUM_DECLARE, OPTO_JVMTI_STUB_ID_ENUM_DECLARE)\n+  NUM_STUBIDS\n+};\n+#undef OPTO_BLOB_ID_ENUM_DECLARE\n+#undef OPTO_STUB_ID_ENUM_DECLARE\n+#undef OPTO_JVMTI_STUB_ID_ENUM_DECLARE\n+\n@@ -105,0 +120,19 @@\n+  \/\/ declare opto stub address\/blob holder static fields\n+#define OPTO_BLOB_FIELD_DECLARE(name, type) \\\n+  static type        BLOB_FIELD_NAME(name);\n+#define OPTO_STUB_FIELD_NAME(name) _ ## name ## _Java\n+#define OPTO_STUB_FIELD_DECLARE(name, f, t, r) \\\n+  static address     OPTO_STUB_FIELD_NAME(name) ;\n+#define OPTO_JVMTI_STUB_FIELD_DECLARE(name) \\\n+  static address     STUB_FIELD_NAME(name);\n+\n+  OPTO_STUBS_DO(OPTO_BLOB_FIELD_DECLARE, OPTO_STUB_FIELD_DECLARE, OPTO_JVMTI_STUB_FIELD_DECLARE)\n+\n+#undef OPTO_BLOB_FIELD_DECLARE\n+#undef OPTO_STUB_FIELD_NAME\n+#undef OPTO_STUB_FIELD_DECLARE\n+#undef OPTO_JVMTI_STUB_FIELD_DECLARE\n+\n+  \/\/ Stub names indexed by sharedStubId\n+  static const char *_stub_names[];\n+\n@@ -108,24 +142,0 @@\n-  \/\/ References to generated stubs\n-  static address _new_instance_Java;\n-  static address _new_array_Java;\n-  static address _new_array_nozero_Java;\n-  static address _multianewarray2_Java;\n-  static address _multianewarray3_Java;\n-  static address _multianewarray4_Java;\n-  static address _multianewarray5_Java;\n-  static address _multianewarrayN_Java;\n-  static address _vtable_must_compile_Java;\n-  static address _complete_monitor_locking_Java;\n-  static address _rethrow_Java;\n-  static address _monitor_notify_Java;\n-  static address _monitor_notifyAll_Java;\n-\n-  static address _slow_arraycopy_Java;\n-  static address _register_finalizer_Java;\n-#if INCLUDE_JVMTI\n-  static address _notify_jvmti_vthread_start;\n-  static address _notify_jvmti_vthread_end;\n-  static address _notify_jvmti_vthread_mount;\n-  static address _notify_jvmti_vthread_unmount;\n-#endif\n-\n@@ -171,3 +181,0 @@\n-  static UncommonTrapBlob*   _uncommon_trap_blob;\n-  static ExceptionBlob*       _exception_blob;\n-\n@@ -177,1 +184,1 @@\n-  static void register_finalizer(oopDesc* obj, JavaThread* current);\n+  static void register_finalizer_C(oopDesc* obj, JavaThread* current);\n@@ -191,0 +198,6 @@\n+  \/\/ Returns the name associated with a given stub id\n+  static const char* stub_name(OptoStubId id) {\n+    assert(id > OptoStubId::NO_STUBID && id < OptoStubId::NUM_STUBIDS, \"stub id out of range\");\n+    return _stub_names[(int)id];\n+  }\n+\n@@ -200,1 +213,0 @@\n-  static address vtable_must_compile_stub()              { return _vtable_must_compile_Java; }\n@@ -230,0 +242,1 @@\n+  static const TypeFunc* new_array_nozero_Type ();   \/\/ [a]newarray (slow case)\n@@ -237,0 +250,1 @@\n+  static const TypeFunc* complete_monitor_locking_Type();\n@@ -239,0 +253,1 @@\n+  static const TypeFunc* monitor_notifyAll_Type();\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":44,"deletions":29,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -73,1 +73,96 @@\n-\/\/ generate a stub id enum tag from a name\n+\/\/ C1 stubs are always generated in a generic CodeBlob\n+\n+#ifdef COMPILER1\n+\/\/ do_blob(name)\n+#define C1_STUBS_DO(do_blob)                                           \\\n+  do_blob(dtrace_object_alloc)                                         \\\n+  do_blob(unwind_exception)                                            \\\n+  do_blob(forward_exception)                                           \\\n+  do_blob(throw_range_check_failed)       \/* throws ArrayIndexOutOfBoundsException *\/ \\\n+  do_blob(throw_index_exception)          \/* throws IndexOutOfBoundsException *\/ \\\n+  do_blob(throw_div0_exception)                                        \\\n+  do_blob(throw_null_pointer_exception)                                \\\n+  do_blob(register_finalizer)                                          \\\n+  do_blob(new_instance)                                                \\\n+  do_blob(fast_new_instance)                                           \\\n+  do_blob(fast_new_instance_init_check)                                \\\n+  do_blob(new_type_array)                                              \\\n+  do_blob(new_object_array)                                            \\\n+  do_blob(new_multi_array)                                             \\\n+  do_blob(handle_exception_nofpu)         \/* optimized version that does not preserve fpu registers *\/ \\\n+  do_blob(handle_exception)                                            \\\n+  do_blob(handle_exception_from_callee)                                \\\n+  do_blob(throw_array_store_exception)                                 \\\n+  do_blob(throw_class_cast_exception)                                  \\\n+  do_blob(throw_incompatible_class_change_error)                       \\\n+  do_blob(slow_subtype_check)                                          \\\n+  do_blob(monitorenter)                                                \\\n+  do_blob(monitorenter_nofpu)             \/* optimized version that does not preserve fpu registers *\/ \\\n+  do_blob(monitorexit)                                                 \\\n+  do_blob(monitorexit_nofpu)              \/* optimized version that does not preserve fpu registers *\/ \\\n+  do_blob(deoptimize)                                                  \\\n+  do_blob(access_field_patching)                                       \\\n+  do_blob(load_klass_patching)                                         \\\n+  do_blob(load_mirror_patching)                                        \\\n+  do_blob(load_appendix_patching)                                      \\\n+  do_blob(fpu2long_stub)                                               \\\n+  do_blob(counter_overflow)                                            \\\n+  do_blob(predicate_failed_trap)                                       \\\n+\n+#else\n+#define C1_STUBS_DO(do_blob)\n+#endif\n+\n+\/\/ Opto stubs can be stored as entries with just an address or as\n+\/\/ blobs of different types. The former may include some JVMTI stubs.\n+\/\/\n+\/\/ n.b. blobs and stub defines are generated in the order defined by\n+\/\/ OPTO_STUBS_DO, allowing dependencies from any givem stub on its\n+\/\/ predecessors to be guaranteed. That explains the initial placement\n+\/\/ of the blob declarations and intermediate placement of the jvmti\n+\/\/ stubs.\n+\n+#ifdef COMPILER2\n+\/\/ do_jvmti_stub(name)\n+#if INCLUDE_JVMTI\n+#define OPTO_JVMTI_STUBS_DO(do_jvmti_stub)                             \\\n+  do_jvmti_stub(notify_jvmti_vthread_start)                            \\\n+  do_jvmti_stub(notify_jvmti_vthread_end)                              \\\n+  do_jvmti_stub(notify_jvmti_vthread_mount)                            \\\n+  do_jvmti_stub(notify_jvmti_vthread_unmount)                          \\\n+\n+#else\n+#define OPTO_JVMTI_STUBS_DO(do_jvmti_stub)\n+#endif \/\/ INCLUDE_JVMTI\n+\n+\/\/ do_blob(name, type)\n+\/\/ do_stub(name, fancy_jump, pass_tls, return_pc)\n+\/\/ do_jvmti_stub(name)\n+\/\/\n+\/\/ n.b. non-jvmti stubs may employ a special type of jump (0, 1 or 2)\n+\/\/ and require access to TLS and the return pc. jvmti stubs always\n+\/\/ employ jump 0, and require no special access\n+#define OPTO_STUBS_DO(do_blob, do_stub, do_jvmti_stub)                 \\\n+  do_blob(uncommon_trap, UncommonTrapBlob*)                            \\\n+  do_blob(exception, ExceptionBlob*)                                   \\\n+  do_stub(new_instance, 0, true, false)                                \\\n+  do_stub(new_array, 0, true, false)                                   \\\n+  do_stub(new_array_nozero, 0, true, false)                            \\\n+  do_stub(multianewarray2, 0, true, false)                             \\\n+  do_stub(multianewarray3, 0, true, false)                             \\\n+  do_stub(multianewarray4, 0, true, false)                             \\\n+  do_stub(multianewarray5, 0, true, false)                             \\\n+  do_stub(multianewarrayN, 0, true, false)                             \\\n+  OPTO_JVMTI_STUBS_DO(do_jvmti_stub)                                   \\\n+  do_stub(complete_monitor_locking, 0, false, false)                   \\\n+  do_stub(monitor_notify, 0, false, false)                             \\\n+  do_stub(monitor_notifyAll, 0, false, false)                          \\\n+  do_stub(rethrow, 2, true, true)                                      \\\n+  do_stub(slow_arraycopy, 0, false, false)                             \\\n+  do_stub(register_finalizer, 0, false, false)                         \\\n+\n+#else\n+#define OPTO_STUBS_DO(do_blob, do_stub, do_jvmti_stub)\n+#endif\n+\n+\/\/ generate a stub or blob id enum tag from a name\n@@ -77,1 +172,1 @@\n-\/\/ generate a blob id enum tag from a name\n+\/\/ generate a stub field name\n@@ -79,1 +174,1 @@\n-#define BLOB_ID_NAME(base) base##_id\n+#define STUB_FIELD_NAME(base) _##base\n","filename":"src\/hotspot\/share\/runtime\/stubDeclarations.hpp","additions":98,"deletions":3,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        String optoRegex = \"(.*precise .*\\\\R((.*(?i:mov|mv|xorl|nop|spill).*|\\\\s*)\\\\R)*.*(?i:call,static).*wrapper for: _new_instance_Java\" + END;\n+        String optoRegex = \"(.*precise .*\\\\R((.*(?i:mov|mv|xorl|nop|spill).*|\\\\s*)\\\\R)*.*(?i:call,static).*wrapper for: Opto Runtime new_instance\" + END;\n@@ -285,1 +285,1 @@\n-        String regex = \"(.*precise .*\" + IS_REPLACED + \":.*\\\\R((.*(?i:mov|mv|xorl|nop|spill).*|\\\\s*)\\\\R)*.*(?i:call,static).*wrapper for: _new_instance_Java\" + END;\n+        String regex = \"(.*precise .*\" + IS_REPLACED + \":.*\\\\R((.*(?i:mov|mv|xorl|nop|spill).*|\\\\s*)\\\\R)*.*(?i:call,static).*wrapper for: Opto Runtime new_instance\" + END;\n@@ -291,1 +291,1 @@\n-        String optoRegex = \"(.*precise \\\\[.*\\\\R((.*(?i:mov|mv|xor|nop|spill).*|\\\\s*|.*(LGHI|LI).*)\\\\R)*.*(?i:call,static).*wrapper for: _new_array_Java\" + END;\n+        String optoRegex = \"(.*precise \\\\[.*\\\\R((.*(?i:mov|mv|xor|nop|spill).*|\\\\s*|.*(LGHI|LI).*)\\\\R)*.*(?i:call,static).*wrapper for: Opto Runtime new_array\" + END;\n@@ -297,1 +297,1 @@\n-        String regex = \"(.*precise \\\\[.*\" + IS_REPLACED + \":.*\\\\R((.*(?i:mov|mv|xorl|nop|spill).*|\\\\s*|.*(LGHI|LI).*)\\\\R)*.*(?i:call,static).*wrapper for: _new_array_Java\" + END;\n+        String regex = \"(.*precise \\\\[.*\" + IS_REPLACED + \":.*\\\\R((.*(?i:mov|mv|xorl|nop|spill).*|\\\\s*|.*(LGHI|LI).*)\\\\R)*.*(?i:call,static).*wrapper for: Opto Runtime new_array\" + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-        String[] allocMatches = { \"MyClass\", \"wrapper for: _new_instance_Java\" };\n+        String[] allocMatches = { \"MyClass\", \"wrapper for: Opto Runtime new_instance\" };\n@@ -117,1 +117,1 @@\n-        String[] allocArrayMatches = { \"MyClass\", \"wrapper for: _new_array_Java\"};\n+        String[] allocArrayMatches = { \"MyClass\", \"wrapper for: Opto Runtime new_array\"};\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}