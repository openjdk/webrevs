{"files":[{"patch":"@@ -27,1 +27,1 @@\n- * @summary Test behaviors with bad EnclosingMethod attribute\n+ * @summary Test behaviors with various bad EnclosingMethod attribute\n@@ -51,0 +51,10 @@\n+    \/**\n+     * Loads a test class that is transformed from the Enclosed local class in\n+     * the Encloser::work method. This local class has its EnclosingMethod\n+     * attribute transformed to the specific name and type, which may be malformed\n+     * strings.\n+     *\n+     * @param name the new enclosing method name, may be malformed\n+     * @param type the new enclosing method type, may be malformed\n+     * @return the loaded test class, for reflective inspection\n+     *\/\n@@ -80,0 +90,4 @@\n+    \/**\n+     * Test reflection behaviors when the EnclosingMethod attribute's type is\n+     * an invalid string.\n+     *\/\n@@ -81,1 +95,1 @@\n-    void testBadTypes() throws Exception {\n+    void testMalformedTypes() throws Exception {\n@@ -84,0 +98,1 @@\n+    }\n@@ -85,0 +100,6 @@\n+    \/**\n+     * Test reflective behaviors when the EnclosingMethod attribute's type is\n+     * valid, but refers to a class or interface that cannot be found.\n+     *\/\n+    @Test\n+    void testAbsentMethods() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Class\/getEnclosingMethod\/BadEnclosingMethodTest.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- *          field fails, parameter passes\n+ *          field fails fast on duplicate annotations, but parameter allows them\n@@ -95,1 +95,1 @@\n-                        \"parameter\", false,\n+                        \"parameter\", false, \/\/ Surprisingly, parameters always allowed duplicate annotations\n@@ -106,0 +106,10 @@\n+    \/**\n+     * A test case represents a declaration that can be annotated.\n+     * Different declarations have different behaviors when multiple annotations\n+     * of the same interface are present (without a container annotation).\n+     *\n+     * @param caseName the type of declaration, for pretty printing in JUnit\n+     * @param fails whether this case should fail upon encountering duplicate annotations\n+     * @param ct transform to install duplicate annotations on the specific declaration\n+     * @param extractor function to access the AnnotatedElement representing that declaration\n+     *\/\n","filename":"test\/jdk\/java\/lang\/annotation\/DuplicateAnnotationsTest.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- *          that should stay in refactors\n@@ -51,0 +50,4 @@\n+    \/**\n+     * An annotation that has elements of the Class type.\n+     * Useful for checking behavior when the string is not a descriptor string.\n+     *\/\n@@ -58,1 +61,2 @@\n-     * {@link GenericSignatureFormatError}.\n+     * {@link GenericSignatureFormatError} and the error message contains the\n+     * malformed descriptor string.\n","filename":"test\/jdk\/java\/lang\/annotation\/MalformedAnnotationTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+        \/\/ Transform that installs malformed signature strings to classes,\n+        \/\/ fields, methods, and record components.\n@@ -103,0 +105,4 @@\n+    \/**\n+     * Ensures the reflective generic inspection of a malformed Class throws\n+     * GenericSignatureFormatError while the non-generic inspection is fine.\n+     *\/\n@@ -113,0 +119,4 @@\n+    \/**\n+     * Ensures the reflective generic inspection of a malformed Field throws\n+     * GenericSignatureFormatError while the non-generic inspection is fine.\n+     *\/\n@@ -121,0 +131,4 @@\n+    \/**\n+     * Ensures the reflective generic inspection of a malformed Constructor throws\n+     * GenericSignatureFormatError while the non-generic inspection is fine.\n+     *\/\n@@ -132,0 +146,4 @@\n+    \/**\n+     * Ensures the reflective generic inspection of a malformed Method throws\n+     * GenericSignatureFormatError while the non-generic inspection is fine.\n+     *\/\n@@ -146,0 +164,4 @@\n+    \/**\n+     * Ensures the reflective generic inspection of a malformed RecordComponent throws\n+     * GenericSignatureFormatError while the non-generic inspection is fine.\n+     *\/\n@@ -170,0 +192,3 @@\n+    \/**\n+     * Ensures that particular strings are invalid as method signature strings.\n+     *\/\n","filename":"test\/jdk\/java\/lang\/reflect\/Generics\/MalformedSignatureTest.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- *          class or interface\n+ *          class or interface (the string is of valid format)\n@@ -63,0 +63,2 @@\n+        \/\/ Transforms all references to RuntimeException to an absent class or\n+        \/\/ interface does.not.Exist. The signature string format is still valid.\n@@ -81,1 +83,5 @@\n-\n+    \/**\n+     * Ensures the reflective generic inspection of a Class with missing class\n+     * or interface throws TypeNotPresentException while the non-generic\n+     * inspection is fine.\n+     *\/\n@@ -92,0 +98,5 @@\n+    \/**\n+     * Ensures the reflective generic inspection of a Field with missing class\n+     * or interface throws TypeNotPresentException while the non-generic\n+     * inspection is fine.\n+     *\/\n@@ -100,0 +111,5 @@\n+    \/**\n+     * Ensures the reflective generic inspection of a Constructor with missing class\n+     * or interface throws TypeNotPresentException while the non-generic\n+     * inspection is fine.\n+     *\/\n@@ -112,0 +128,5 @@\n+    \/**\n+     * Ensures the reflective generic inspection of a Method with missing class\n+     * or interface throws TypeNotPresentException while the non-generic\n+     * inspection is fine.\n+     *\/\n@@ -127,0 +148,5 @@\n+    \/**\n+     * Ensures the reflective generic inspection of a RecordComponent with missing class\n+     * or interface throws TypeNotPresentException while the non-generic\n+     * inspection is fine.\n+     *\/\n","filename":"test\/jdk\/java\/lang\/reflect\/Generics\/TypeNotPresentInSignatureTest.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"}]}