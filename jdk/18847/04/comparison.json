{"files":[{"patch":"@@ -1398,1 +1398,0 @@\n-              name == vmSymbols::java_lang_VirtualMachineError() ||\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2012,1 +2012,1 @@\n-  \/\/ Throw VirtualMachineError or the pending exception in the JavaThread\n+  \/\/ Throw OOM or the pending exception in the JavaThread\n@@ -2014,1 +2014,1 @@\n-    THROW_MSG_NULL(vmSymbols::java_lang_VirtualMachineError(),\n+    THROW_MSG_NULL(vmSymbols::java_lang_OutOfMemoryError(),\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -258,1 +258,1 @@\n-        THROW_OOP_(Universe::virtual_machine_error_instance(), false);\n+        THROW_OOP_(Universe::class_init_stack_overflow_error(), false);\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -232,1 +232,0 @@\n-static BuiltinException _virtual_machine_error;\n@@ -249,1 +248,0 @@\n-oop Universe::virtual_machine_error_instance()    { return _virtual_machine_error.instance(); }\n@@ -305,1 +303,0 @@\n-  _virtual_machine_error.store_in_cds();\n@@ -321,1 +318,0 @@\n-    _virtual_machine_error.load_from_cds();\n@@ -337,1 +333,0 @@\n-  _virtual_machine_error.serialize(f);\n@@ -1094,9 +1089,0 @@\n-  \/\/ Virtual Machine Error for when we get into a situation we can't resolve\n-  Klass* k = vmClasses::VirtualMachineError_klass();\n-  bool linked = InstanceKlass::cast(k)->link_class_or_fail(CHECK_false);\n-  if (!linked) {\n-     tty->print_cr(\"Unable to link\/verify VirtualMachineError class\");\n-     return false; \/\/ initialization failed\n-  }\n-  _virtual_machine_error.init_if_empty(vmSymbols::java_lang_VirtualMachineError(), CHECK_false);\n-\n@@ -1107,1 +1093,1 @@\n-  k = SystemDictionary::resolve_or_fail(vmSymbols::java_lang_StackOverflowError(), true, CHECK_false);\n+  Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::java_lang_StackOverflowError(), true, CHECK_false);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -232,2 +232,0 @@\n-  static oop          virtual_machine_error_instance();\n-  static oop          vm_exception()                  { return virtual_machine_error_instance(); }\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-\/\/ VirtualMachineErrors are propagated with a null return.\n+\/\/ VirtualMachineErrors (subclasses) are propagated with a null return.\n@@ -1512,0 +1512,1 @@\n+  assert(!is_abstract() && !is_interface(), \"Should not create this object\");\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1279,1 +1279,1 @@\n-      THROW_MSG_NULL(vmSymbols::java_lang_VirtualMachineError(), \"Out of space in CodeCache for adapters\");\n+      THROW_MSG_NULL(vmSymbols::java_lang_OutOfMemoryError(), \"Out of space in CodeCache for adapters\");\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2017,1 +2017,1 @@\n-            return nullptr; \/\/ propagate VMEs\n+            return nullptr; \/\/ propagate VME subclasses\n@@ -2093,1 +2093,1 @@\n-          return nullptr; \/\/ propagate VMEs\n+          return nullptr; \/\/ propagate VME subclasses\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-                        Universe::vm_exception()->print_value_string());\n+                        Universe::null_ptr_exception_instance()->print_value_string());\n@@ -127,1 +127,1 @@\n-    thread->set_pending_exception(Universe::vm_exception(), file, line);\n+    thread->set_pending_exception(Universe::null_ptr_exception_instance(), file, line);\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}