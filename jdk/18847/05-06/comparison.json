{"files":[{"patch":"@@ -1398,0 +1398,1 @@\n+              name == vmSymbols::java_lang_InternalError() ||\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -232,0 +232,1 @@\n+static BuiltinException _internal_error;\n@@ -248,0 +249,1 @@\n+oop Universe::internal_error_instance()           { return _internal_error.instance(); }\n@@ -303,0 +305,1 @@\n+  _internal_error.store_in_cds();\n@@ -318,0 +321,1 @@\n+    _internal_error.load_from_cds();\n@@ -333,0 +337,1 @@\n+  _internal_error.serialize(f);\n@@ -1089,0 +1094,9 @@\n+  \/\/ Virtual Machine Error for when we get into a situation we can't resolve\n+  Klass* k = vmClasses::InternalError_klass();\n+  bool linked = InstanceKlass::cast(k)->link_class_or_fail(CHECK_false);\n+  if (!linked) {\n+     tty->print_cr(\"Unable to link\/verify InternalError class\");\n+     return false; \/\/ initialization failed\n+  }\n+  _internal_error.init_if_empty(vmSymbols::java_lang_InternalError(), CHECK_false);\n+\n@@ -1093,1 +1107,1 @@\n-  Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::java_lang_StackOverflowError(), true, CHECK_false);\n+  k = SystemDictionary::resolve_or_fail(vmSymbols::java_lang_StackOverflowError(), true, CHECK_false);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -232,0 +232,2 @@\n+  static oop          internal_error_instance();\n+  static oop          vm_exception()                  { return internal_error_instance(); }\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-\/\/ VirtualMachineErrors (subclasses) are propagated with a null return.\n+\/\/ VirtualMachineErrors are propagated with a null return.\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2017,1 +2017,1 @@\n-            return nullptr; \/\/ propagate VME subclasses\n+            return nullptr; \/\/ propagate VMEs\n@@ -2093,1 +2093,1 @@\n-          return nullptr; \/\/ propagate VME subclasses\n+          return nullptr; \/\/ propagate VMEs\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-                        Universe::null_ptr_exception_instance()->print_value_string());\n+                        Universe::vm_exception()->print_value_string());\n@@ -126,3 +126,2 @@\n-    \/\/ is compiling.  We just install a dummy exception object of NPE, since that object has\n-    \/\/ been preallocated.\n-    thread->set_pending_exception(Universe::null_ptr_exception_instance(), file, line);\n+    \/\/ is compiling.  We just install a dummy exception object\n+    thread->set_pending_exception(Universe::vm_exception(), file, line);\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}