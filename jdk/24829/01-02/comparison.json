{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestBufferStack\n+ * @run junit\/othervm --enable-native-access=ALL-UNNAMED TestBufferStack\n@@ -32,2 +32,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -44,0 +43,1 @@\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -46,0 +46,1 @@\n+\n@@ -54,2 +55,2 @@\n-            Assert.assertEquals(segment11.scope(), frame1.scope());\n-            Assert.assertEquals(segment11.byteSize(), JAVA_INT.byteSize());\n+            assertEquals(frame1.scope(), segment11.scope());\n+            assertEquals(JAVA_INT.byteSize(), segment11.byteSize());\n@@ -60,3 +61,3 @@\n-            Assert.assertEquals(segment12.address(), segment11.address() + JAVA_INT.byteSize());\n-            Assert.assertEquals(segment12.byteSize(), JAVA_INT.byteSize());\n-            Assert.assertEquals(segment12.scope(), frame1.scope());\n+            assertEquals(segment11.address() + JAVA_INT.byteSize(), segment12.address());\n+            assertEquals(JAVA_INT.byteSize(), segment12.byteSize());\n+            assertEquals(frame1.scope(), segment12.scope());\n@@ -67,1 +68,1 @@\n-                Assert.assertNotEquals(frame2.scope(), frame1.scope());\n+                assertNotEquals(frame1.scope(), frame2.scope());\n@@ -70,3 +71,3 @@\n-                Assert.assertEquals(segment2.address(), segment12.address() + \/*segment12 size + frame 1 spare + alignment constraint*\/ 3 * JAVA_INT.byteSize());\n-                Assert.assertEquals(segment2.byteSize(), JAVA_LONG.byteSize());\n-                Assert.assertEquals(segment2.scope(), frame2.scope());\n+                assertEquals( segment12.address() + \/*segment12 size + frame 1 spare + alignment constraint*\/ 3 * JAVA_INT.byteSize(), segment2.address());\n+                assertEquals(JAVA_LONG.byteSize(), segment2.byteSize());\n+                assertEquals(frame2.scope(), segment2.scope());\n@@ -76,1 +77,1 @@\n-                Assert.assertThrows(IllegalStateException.class, frame1::close);\n+                assertThrows(IllegalStateException.class, frame1::close);\n@@ -79,1 +80,1 @@\n-            Assert.assertThrows(IllegalStateException.class, () -> segment2.get(JAVA_INT, 0));\n+            assertThrows(IllegalStateException.class, () -> segment2.get(JAVA_INT, 0));\n@@ -83,2 +84,2 @@\n-                Assert.assertEquals(segment3.scope(), frame3.scope());\n-                Assert.assertEquals(segment3.address(), segment12.address() + 2 * JAVA_INT.byteSize());\n+                assertEquals(frame3.scope(), segment3.scope());\n+                assertEquals(segment12.address() + 2 * JAVA_INT.byteSize(), segment3.address());\n@@ -91,2 +92,2 @@\n-                Assert.assertEquals(outOfStack.scope(), hugeFrame.scope());\n-                Assert.assertTrue(outOfStack.asOverlappingSlice(stackSegment).isEmpty());\n+                assertEquals(hugeFrame.scope(), outOfStack.scope());\n+                assertTrue(outOfStack.asOverlappingSlice(stackSegment).isEmpty());\n@@ -94,1 +95,1 @@\n-            Assert.assertThrows(IllegalStateException.class, () -> outOfStack.get(JAVA_INT, 0));\n+            assertThrows(IllegalStateException.class, () -> outOfStack.get(JAVA_INT, 0));\n@@ -123,3 +124,3 @@\n-        Assert.assertEquals(point.getAtIndex(C_DOUBLE, 0), 12.0);\n-        Assert.assertEquals(point.getAtIndex(C_DOUBLE, 1), 11.0);\n-        Assert.assertEquals(point.getAtIndex(C_DOUBLE, 2), 10.0);\n+        assertEquals( 12.0, point.getAtIndex(C_DOUBLE, 0));\n+        assertEquals(11.0, point.getAtIndex(C_DOUBLE, 1));\n+        assertEquals( 10.0, point.getAtIndex(C_DOUBLE, 2));\n","filename":"test\/jdk\/java\/foreign\/TestBufferStack.java","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestBufferStackStress\n+ * @run junit\/othervm --enable-native-access=ALL-UNNAMED TestBufferStackStress\n@@ -32,2 +32,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Test;\n@@ -43,0 +42,1 @@\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -58,1 +58,1 @@\n-                                Assert.assertEquals(threadId, (long) JAVA_LONG.varHandle().getVolatile(segment, 0L));\n+                                assertEquals(threadId, (long) JAVA_LONG.varHandle().getVolatile(segment, 0L));\n@@ -67,1 +67,1 @@\n-                    Assert.assertTrue(thread.isAlive());\n+                    assertTrue(thread.isAlive());\n","filename":"test\/jdk\/java\/foreign\/TestBufferStackStress.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}