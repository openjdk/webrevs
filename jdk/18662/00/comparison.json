{"files":[{"patch":"@@ -100,1 +100,1 @@\n-    private static SupplementDataParseHandler handlerSuppl;\n+    private static SupplementalDataParseHandler handlerSuppl;\n@@ -474,1 +474,1 @@\n-        handlerSuppl = new SupplementDataParseHandler();\n+        handlerSuppl = new SupplementalDataParseHandler();\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/CLDRConverter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,203 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package build.tools.cldrconverter;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.SortedSet;\n-import java.util.TreeSet;\n-import java.util.stream.Collectors;\n-import org.xml.sax.Attributes;\n-import org.xml.sax.InputSource;\n-import org.xml.sax.SAXException;\n-\n-\/**\n- * Handles parsing of files in Locale Data Markup Language for SupplementData.xml\n- * and produces a map that uses the keys and values of JRE locale data.\n- *\/\n-\n-class SupplementDataParseHandler extends AbstractLDMLHandler<Object> {\n-    \/\/UNM49 region and composition code used in supplementalData.xml\n-    private static final String WORLD = \"001\";\n-\n-    private static final String JAVA_FIRSTDAY = \"firstDayOfWeek\";\n-    private static final String JAVA_MINDAY = \"minimalDaysInFirstWeek\";\n-\n-    \/\/ The weekData is now in supplementalData.xml,\n-    \/\/ which is not a locale specific file.\n-    \/\/ Map for JRE is created locale specific way.\n-    \/\/ When parsing the locale neutral file (supplementalData.xml),\n-    \/\/ we need to rely on the country code because\n-    \/\/ the weekData is listed using country code.\n-    \/\/\n-    \/\/ weekData are generated per each country\n-    private final Map<String, Object> firstDayMap;\n-    private final Map<String, Object> minDaysMap;\n-\n-    \/\/ Parent locales. These information will only be\n-    \/\/ generated towards the base meta info, with the format of\n-    \/\/\n-    \/\/ parentLocale.<parent_locale_id>=<child_locale_id>(\" \"<child_locale_id>)+\n-    private final Map<String, String> parentLocalesMap;\n-\n-    \/\/ Input Skeleton map for \"preferred\" and \"allowed\"\n-    \/\/ Map<\"preferred\"\/\"allowed\", Map<\"skeleton\", SortedSet<\"regions\">>>\n-    private final Map<String, Map<String, SortedSet<String>>> inputSkeletonMap;\n-\n-    \/\/ \"component\" specific to this parent locale chain\n-    private String currentParentLocaleComponent;\n-\n-    SupplementDataParseHandler() {\n-        firstDayMap = new HashMap<>();\n-        minDaysMap = new HashMap<>();\n-        parentLocalesMap = new HashMap<>();\n-        inputSkeletonMap = new HashMap<>();\n-    }\n-\n-    \/**\n-     * It returns Map that contains the firstDay and minDays information for\n-     * the country. The Map is created in JRE format after obtaining the data\n-     * from two Maps, firstDayMap and minDaysMap.\n-     *\n-     * It returns null when there is no firstDay and minDays for the country\n-     * although this should not happen because supplementalData.xml includes\n-     * default value for the world (\"001\") for firstDay and minDays.\n-     *\n-     * This method also returns Maps for \"preferred\" and \"allowed\" skeletons,\n-     * which are grouped by regions. E.g, \"h:XX YY ZZ;\" which means 'h' pattern\n-     * is \"preferred\"\/\"allowed\" in \"XX\", \"YY\", and \"ZZ\" regions.\n-     *\/\n-    Map<String, Object> getData(String id) {\n-        Map<String, Object> values = new HashMap<>();\n-        if (\"root\".equals(id)) {\n-            parentLocalesMap.forEach((k, v) -> values.put(CLDRConverter.PARENT_LOCALE_PREFIX + k, v));\n-            firstDayMap.forEach((k, v) -> values.put(CLDRConverter.CALENDAR_FIRSTDAY_PREFIX + v, k));\n-            minDaysMap.forEach((k, v) -> values.put(CLDRConverter.CALENDAR_MINDAYS_PREFIX + v, k));\n-            inputSkeletonMap.get(\"preferred\").forEach((k, v) ->\n-                    values.merge(Bundle.DATEFORMATITEM_INPUT_REGIONS_PREFIX + \"preferred\",\n-                            k + \":\" + v.stream().collect(Collectors.joining(\" \")) + \";\",\n-                            (old, newVal) -> old + (String)newVal));\n-            inputSkeletonMap.get(\"allowed\").forEach((k, v) ->\n-                    values.merge(Bundle.DATEFORMATITEM_INPUT_REGIONS_PREFIX + \"allowed\",\n-                            k + \":\" + v.stream().collect(Collectors.joining(\" \")) + \";\",\n-                            (old, newVal) -> old + (String)newVal));\n-        }\n-        return values.isEmpty() ? null : values;\n-    }\n-\n-    @Override\n-    public InputSource resolveEntity(String publicID, String systemID) throws IOException, SAXException {\n-        \/\/ avoid HTTP traffic to unicode.org\n-        if (systemID.startsWith(CLDRConverter.SPPL_LDML_DTD_SYSTEM_ID)) {\n-            return new InputSource((new File(CLDRConverter.LOCAL_SPPL_LDML_DTD)).toURI().toString());\n-        }\n-        return null;\n-    }\n-\n-    \/**\n-     * JRE requires all the data to be organized by the locale while CLDR 1.4 list\n-     * Calendar related data (weekData)in SupplementalData.xml.\n-     * startElement stores JRE required data into two Maps,\n-     * firstDayMap and minDaysMap.\n-     *\/\n-    @Override\n-    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n-        \/\/ elements we need to actively ignore\n-        switch (qName) {\n-        case \"firstDay\":\n-            if (!isIgnored(attributes)) {\n-                String fd;\n-\n-                switch (attributes.getValue(\"day\")) {\n-                    case \"sun\":\n-                        fd = \"1\";\n-                        break;\n-                    default:\n-                    case \"mon\":\n-                        fd = \"2\";\n-                        break;\n-                    case \"tue\":\n-                        fd = \"3\";\n-                        break;\n-                    case \"wed\":\n-                        fd = \"4\";\n-                        break;\n-                    case \"thu\":\n-                        fd = \"5\";\n-                        break;\n-                    case \"fri\":\n-                        fd = \"6\";\n-                        break;\n-                    case \"sat\":\n-                        fd = \"7\";\n-                        break;\n-                }\n-                firstDayMap.put(attributes.getValue(\"territories\"), fd);\n-            }\n-            break;\n-        case \"minDays\":\n-            if (!isIgnored(attributes)) {\n-                minDaysMap.put(attributes.getValue(\"territories\"), attributes.getValue(\"count\"));\n-            }\n-            break;\n-        case \"parentLocales\":\n-            currentParentLocaleComponent = attributes.getValue(\"component\");\n-            pushContainer(qName, attributes);\n-            break;\n-        case \"parentLocale\":\n-            if (!isIgnored(attributes)) {\n-                \/\/ Ignore component for now, otherwise \"zh-Hant\" falling back to \"zh\" would happen\n-                \/\/ https:\/\/github.com\/unicode-org\/cldr\/pull\/2664\n-                if (currentParentLocaleComponent == null) {\n-                    parentLocalesMap.put(\n-                        attributes.getValue(\"parent\").replaceAll(\"_\", \"-\"),\n-                        attributes.getValue(\"locales\").replaceAll(\"_\", \"-\"));\n-                }\n-            }\n-            break;\n-        case \"hours\":\n-            if (!isIgnored(attributes)) {\n-                var preferred = attributes.getValue(\"preferred\");\n-                var allowed = attributes.getValue(\"allowed\").replaceFirst(\" .*\", \"\").replaceFirst(\"b\", \"B\"); \/\/ take only the first one, \"b\" -> \"B\"\n-                var regions = Arrays.stream(attributes.getValue(\"regions\").split(\" \"))\n-                        .map(r -> r.replaceAll(\"_\", \"-\"))\n-                        .collect(Collectors.toSet());\n-                var pmap = inputSkeletonMap.computeIfAbsent(\"preferred\", k -> new HashMap<>());\n-                var amap = inputSkeletonMap.computeIfAbsent(\"allowed\", k -> new HashMap<>());\n-                pmap.computeIfAbsent(preferred, k -> new TreeSet<>()).addAll(regions);\n-                amap.computeIfAbsent(allowed, k -> new TreeSet<>()).addAll(regions);\n-            }\n-            break;\n-        default:\n-            \/\/ treat anything else as a container\n-            pushContainer(qName, attributes);\n-            break;\n-        }\n-    }\n-}\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/SupplementDataParseHandler.java","additions":0,"deletions":203,"binary":false,"changes":203,"status":"deleted"},{"patch":"@@ -0,0 +1,186 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package build.tools.cldrconverter;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+\/**\n+ * Handles parsing of files in Locale Data Markup Language for supplementalData.xml\n+ * and produces a map that uses the keys and values of JRE locale data.\n+ *\/\n+\n+class SupplementalDataParseHandler extends AbstractLDMLHandler<Object> {\n+    \/\/UNM49 region and composition code used in supplementalData.xml\n+    private static final String WORLD = \"001\";\n+\n+    private static final String JAVA_FIRSTDAY = \"firstDayOfWeek\";\n+    private static final String JAVA_MINDAY = \"minimalDaysInFirstWeek\";\n+\n+    \/\/ The weekData is now in supplementalData.xml,\n+    \/\/ which is not a locale specific file.\n+    \/\/ Map for JRE is created locale specific way.\n+    \/\/ When parsing the locale neutral file (supplementalData.xml),\n+    \/\/ we need to rely on the country code because\n+    \/\/ the weekData is listed using country code.\n+    \/\/\n+    \/\/ weekData are generated per each country\n+    private final Map<String, Object> firstDayMap;\n+    private final Map<String, Object> minDaysMap;\n+\n+    \/\/ Parent locales. These information will only be\n+    \/\/ generated towards the base meta info, with the format of\n+    \/\/\n+    \/\/ parentLocale.<parent_locale_id>=<child_locale_id>(\" \"<child_locale_id>)+\n+    private final Map<String, String> parentLocalesMap;\n+\n+    \/\/ Input Skeleton map for \"preferred\" and \"allowed\"\n+    \/\/ Map<\"preferred\"\/\"allowed\", Map<\"skeleton\", SortedSet<\"regions\">>>\n+    private final Map<String, Map<String, SortedSet<String>>> inputSkeletonMap;\n+\n+    \/\/ \"component\" specific to this parent locale chain\n+    private String currentParentLocaleComponent;\n+\n+    SupplementalDataParseHandler() {\n+        firstDayMap = new HashMap<>();\n+        minDaysMap = new HashMap<>();\n+        parentLocalesMap = new HashMap<>();\n+        inputSkeletonMap = new HashMap<>();\n+    }\n+\n+    \/**\n+     * It returns Map that contains the firstDay and minDays information for\n+     * the country. The Map is created in JRE format after obtaining the data\n+     * from two Maps, firstDayMap and minDaysMap.\n+     *\n+     * It returns null when there is no firstDay and minDays for the country\n+     * although this should not happen because supplementalData.xml includes\n+     * default value for the world (\"001\") for firstDay and minDays.\n+     *\n+     * This method also returns Maps for \"preferred\" and \"allowed\" skeletons,\n+     * which are grouped by regions. E.g, \"h:XX YY ZZ;\" which means 'h' pattern\n+     * is \"preferred\"\/\"allowed\" in \"XX\", \"YY\", and \"ZZ\" regions.\n+     *\/\n+    Map<String, Object> getData(String id) {\n+        Map<String, Object> values = new HashMap<>();\n+        if (\"root\".equals(id)) {\n+            parentLocalesMap.forEach((k, v) -> values.put(CLDRConverter.PARENT_LOCALE_PREFIX + k, v));\n+            firstDayMap.forEach((k, v) -> values.put(CLDRConverter.CALENDAR_FIRSTDAY_PREFIX + v, k));\n+            minDaysMap.forEach((k, v) -> values.put(CLDRConverter.CALENDAR_MINDAYS_PREFIX + v, k));\n+            inputSkeletonMap.get(\"preferred\").forEach((k, v) ->\n+                    values.merge(Bundle.DATEFORMATITEM_INPUT_REGIONS_PREFIX + \"preferred\",\n+                            k + \":\" + v.stream().collect(Collectors.joining(\" \")) + \";\",\n+                            (old, newVal) -> old + (String)newVal));\n+            inputSkeletonMap.get(\"allowed\").forEach((k, v) ->\n+                    values.merge(Bundle.DATEFORMATITEM_INPUT_REGIONS_PREFIX + \"allowed\",\n+                            k + \":\" + v.stream().collect(Collectors.joining(\" \")) + \";\",\n+                            (old, newVal) -> old + (String)newVal));\n+        }\n+        return values.isEmpty() ? null : values;\n+    }\n+\n+    @Override\n+    public InputSource resolveEntity(String publicID, String systemID) throws IOException, SAXException {\n+        \/\/ avoid HTTP traffic to unicode.org\n+        if (systemID.startsWith(CLDRConverter.SPPL_LDML_DTD_SYSTEM_ID)) {\n+            return new InputSource((new File(CLDRConverter.LOCAL_SPPL_LDML_DTD)).toURI().toString());\n+        }\n+        return null;\n+    }\n+\n+    \/**\n+     * JRE requires all the data to be organized by the locale while CLDR 1.4 list\n+     * Calendar related data (weekData)in SupplementalData.xml.\n+     * startElement stores JRE required data into two Maps,\n+     * firstDayMap and minDaysMap.\n+     *\/\n+    @Override\n+    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n+        \/\/ elements we need to actively ignore\n+        switch (qName) {\n+        case \"firstDay\":\n+            if (!isIgnored(attributes)) {\n+                String fd = switch (attributes.getValue(\"day\")) {\n+                    case \"sun\" -> \"1\";\n+                    case \"tue\" -> \"3\";\n+                    case \"wed\" -> \"4\";\n+                    case \"thu\" -> \"5\";\n+                    case \"fri\" -> \"6\";\n+                    case \"sat\" -> \"7\";\n+                    default -> \"2\"; \/\/ Mon\n+                };\n+                firstDayMap.put(attributes.getValue(\"territories\"), fd);\n+            }\n+            break;\n+        case \"minDays\":\n+            if (!isIgnored(attributes)) {\n+                minDaysMap.put(attributes.getValue(\"territories\"), attributes.getValue(\"count\"));\n+            }\n+            break;\n+        case \"parentLocales\":\n+            currentParentLocaleComponent = attributes.getValue(\"component\");\n+            pushContainer(qName, attributes);\n+            break;\n+        case \"parentLocale\":\n+            if (!isIgnored(attributes)) {\n+                \/\/ Ignore component for now, otherwise \"zh-Hant\" falling back to \"zh\" would happen\n+                \/\/ https:\/\/github.com\/unicode-org\/cldr\/pull\/2664\n+                if (currentParentLocaleComponent == null) {\n+                    parentLocalesMap.put(\n+                        attributes.getValue(\"parent\").replaceAll(\"_\", \"-\"),\n+                        attributes.getValue(\"locales\").replaceAll(\"_\", \"-\"));\n+                }\n+            }\n+            break;\n+        case \"hours\":\n+            if (!isIgnored(attributes)) {\n+                var preferred = attributes.getValue(\"preferred\");\n+                var allowed = attributes.getValue(\"allowed\").replaceFirst(\" .*\", \"\").replaceFirst(\"b\", \"B\"); \/\/ take only the first one, \"b\" -> \"B\"\n+                var regions = Arrays.stream(attributes.getValue(\"regions\").split(\" \"))\n+                        .map(r -> r.replaceAll(\"_\", \"-\"))\n+                        .collect(Collectors.toSet());\n+                var pmap = inputSkeletonMap.computeIfAbsent(\"preferred\", k -> new HashMap<>());\n+                var amap = inputSkeletonMap.computeIfAbsent(\"allowed\", k -> new HashMap<>());\n+                pmap.computeIfAbsent(preferred, k -> new TreeSet<>()).addAll(regions);\n+                amap.computeIfAbsent(allowed, k -> new TreeSet<>()).addAll(regions);\n+            }\n+            break;\n+        default:\n+            \/\/ treat anything else as a container\n+            pushContainer(qName, attributes);\n+            break;\n+        }\n+    }\n+}\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/SupplementalDataParseHandler.java","additions":186,"deletions":0,"binary":false,"changes":186,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * SupplementalMetadata.xml\n+ * supplementalMetadata.xml\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/SupplementalMetadataParseHandler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}