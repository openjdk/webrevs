{"files":[{"patch":"@@ -167,1 +167,1 @@\n-  narrowOop* patching_start = (narrowOop*)region.start() + MetaspaceShared::oopmap_start_pos();\n+  narrowOop* patching_start = (narrowOop*)region.start() + FileMapInfo::current_info()->header()->heap_oopmap_start_pos();\n@@ -193,1 +193,1 @@\n-    PatchUncompressedEmbeddedPointers patcher((oop*)region.start() + MetaspaceShared::oopmap_start_pos());\n+    PatchUncompressedEmbeddedPointers patcher((oop*)region.start() + FileMapInfo::current_info()->header()->heap_oopmap_start_pos());\n@@ -313,1 +313,1 @@\n-  PatchLoadedRegionPointers patcher((narrowOop*)load_address + MetaspaceShared::oopmap_start_pos(), loaded_region);\n+  PatchLoadedRegionPointers patcher((narrowOop*)load_address + FileMapInfo::current_info()->header()->heap_oopmap_start_pos(), loaded_region);\n@@ -446,1 +446,1 @@\n-    PatchNativePointers patcher((Metadata**)r->mapped_base() + MetaspaceShared::ptrmap_start_pos());\n+    PatchNativePointers patcher((Metadata**)r->mapped_base() + FileMapInfo::current_info()->header()->heap_ptrmap_start_pos());\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -638,1 +638,2 @@\n-  if (idx < MetaspaceShared::ptrmap_start_pos()) {\n+  size_t start_pos = FileMapInfo::current_info()->header()->heap_ptrmap_start_pos();\n+  if (idx < start_pos) {\n@@ -641,1 +642,1 @@\n-    idx -= MetaspaceShared::ptrmap_start_pos();\n+    idx -= start_pos;\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -292,2 +292,2 @@\n-  st->print_cr(\"- _heap_oopmap_start_pos:      \" SIZE_FORMAT, _heap_oopmap_start_pos);\n-  st->print_cr(\"- _heap_ptrmap_start_pos:      \" SIZE_FORMAT, _heap_ptrmap_start_pos);\n+  st->print_cr(\"- _heap_oopmap_start_pos:         \" SIZE_FORMAT, _heap_oopmap_start_pos);\n+  st->print_cr(\"- _heap_ptrmap_start_pos:         \" SIZE_FORMAT, _heap_ptrmap_start_pos);\n@@ -1570,0 +1570,3 @@\n+\/\/ The start of the archived heap has many primitive arrays (String\n+\/\/ bodies) that are not marked by the oop\/ptr maps. So we must have\n+\/\/ lots of leading zeros.\n@@ -1575,1 +1578,1 @@\n-  map->slice(old_zeros);\n+  map->truncate(old_zeros);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -103,2 +103,2 @@\n-void GrowableBitMap<BitMapWithAllocator>::slice(idx_t start_bit, idx_t end_bit, bool clear) {\n-  assert(start_bit < end_bit, \"End bit must come after start bit\");\n+bm_word_t* GrowableBitMap<BitMapWithAllocator>::slice(idx_t start_bit, idx_t end_bit, bool clear) {\n+  assert(start_bit < end_bit, \"End bit must come after start bit: %ld, %ld\", start_bit, end_bit);\n@@ -111,1 +111,3 @@\n-  \/\/ Shift over elements to avoid allocating a new array\n+  BitMapWithAllocator* derived = static_cast<BitMapWithAllocator*>(this);\n+\n+  bm_word_t* new_map = derived->allocate(end_word - start_word);\n@@ -113,2 +115,2 @@\n-    set_word(word - start_word, old_map[word]);\n-    assert(old_map[word-start_word] == old_map[word], \"sanity\");\n+    new_map[word-start_word] = old_map[word];\n+    assert(new_map[word-start_word] == old_map[word], \"sanity\");\n@@ -117,1 +119,20 @@\n-  resize(new_size_in_bits, clear);\n+  return new_map;\n+}\n+\n+template <class BitMapWithAllocator>\n+bm_word_t* GrowableBitMap<BitMapWithAllocator>::slice(idx_t start_bit, bool clear) {\n+  return slice(start_bit, size(), clear);\n+}\n+\n+template <class BitMapWithAllocator>\n+void GrowableBitMap<BitMapWithAllocator>::truncate(idx_t start_bit, idx_t end_bit, bool clear) {\n+  const size_t old_size_in_words = calc_size_in_words(size());\n+  idx_t start_word = to_words_align_down(start_bit);\n+  idx_t end_word = to_words_align_up(end_bit);\n+  const idx_t new_size_in_bits = (end_word - start_word) * BitsPerWord;\n+  bm_word_t* const old_map = map();\n+  bm_word_t* new_map = slice(start_bit, end_bit, clear);\n+\n+  BitMapWithAllocator* derived = static_cast<BitMapWithAllocator*>(this);\n+  derived->free(old_map, old_size_in_words);\n+  update(new_map, new_size_in_bits);\n@@ -121,2 +142,2 @@\n-void GrowableBitMap<BitMapWithAllocator>::slice(idx_t start_bit, bool clear) {\n-  slice(start_bit, size(), clear);\n+void GrowableBitMap<BitMapWithAllocator>::truncate(idx_t start_bit, bool clear) {\n+  truncate(start_bit, size(), clear);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":29,"deletions":8,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -589,3 +589,6 @@\n-  \/\/ Old bits are shifted to the front and then the map is resized\n-  void slice(idx_t start_bit, idx_t end_bit, bool clear = true);\n-  void slice(idx_t start_bit, bool clear = true);\n+  \/\/ Bits in the selected range are copied to a new map\n+  bm_word_t* slice(idx_t start_bit, idx_t end_bit, bool clear = true);\n+  bm_word_t* slice(idx_t start_bit, bool clear = true);\n+  \/\/ Overwrite bitmap with result from slicing\n+  void truncate(idx_t start_bit, idx_t end_bit, bool clear = true);\n+  void truncate(idx_t start_bit, bool clear = true);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}