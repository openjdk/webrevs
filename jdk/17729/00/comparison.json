{"files":[{"patch":"@@ -3001,1 +3001,1 @@\n-                            .TypeTest(tree.expr, make.Type(types.boxedClass(tree.pattern.type).type))\n+                            .TypeTest(make.Ident(dollar_s), make.Type(types.boxedClass(tree.pattern.type).type))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 8304487\n+ * @bug 8304487 8325257\n@@ -52,0 +52,11 @@\n+    public void testInstanceOfObjectToPrimitive() {\n+        assertEval(\"Object o = 1L;\");\n+        assertEval(\"o instanceof long\");\n+        assertEval(\"o instanceof Long\");\n+    }\n+\n+    public void testInstanceOfPrimitiveToPrimitiveInvokingExactnessMethod() {\n+        assertEval(\"int b = 1024;\");\n+        assertEval(\"b instanceof byte\");\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/PrimitiveInstanceOfTest.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8304487\n+ * @bug 8304487 8325257\n@@ -33,0 +33,1 @@\n+    public static final int qualI = 42;\n@@ -35,0 +36,1 @@\n+        assertEquals(true,  qualifiedExprConversion());\n@@ -54,0 +56,4 @@\n+    public static boolean qualifiedExprConversion() {\n+        return PrimitiveInstanceOfTypeComparisonOp.qualI instanceof int;\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfTypeComparisonOp.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}