{"files":[{"patch":"@@ -50,3 +50,0 @@\n-import static com.sun.tools.javac.code.Flags.RECORD;\n-import static com.sun.tools.javac.code.Flags.SEALED;\n-import static com.sun.tools.javac.code.Flags.NON_SEALED;\n@@ -87,1 +84,1 @@\n-    private static final Context.Key<Preview> previewKey = new Context.Key<>();\n+    protected static final Context.Key<Preview> previewKey = new Context.Key<>();\n@@ -97,1 +94,2 @@\n-    Preview(Context context) {\n+    @SuppressWarnings(\"this-escape\")\n+    protected Preview(Context context) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import com.sun.tools.javac.code.Preview;\n@@ -33,0 +34,2 @@\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Context.Factory;\n@@ -123,1 +126,3 @@\n-        var task = compiler.getTask(out, memoryFileManager, null, opts, null, units);\n+        var context = new Context();\n+        MemoryPreview.registerInstance(context);\n+        var task = compiler.getTask(out, memoryFileManager, null, opts, null, units, context);\n@@ -141,3 +146,1 @@\n-                var name = element.isUnnamed()\n-                        ? element.getSimpleName().toString()\n-                        : element.getQualifiedName().toString();\n+                var name = element.getQualifiedName().toString();\n@@ -226,2 +229,2 @@\n-            var modulePathConfiguration = bootLayer.configuration().resolveAndBind(ModuleFinder.of(), modulePathFinder, Set.copyOf(modulePathModules));\n-            var modulePathLayer = bootLayer.defineModulesWithOneLoader(modulePathConfiguration, parent);\n+            var modulePathConfiguration = bootLayer.configuration().resolveAndBind(modulePathFinder, ModuleFinder.of(), Set.copyOf(modulePathModules));\n+            var modulePathLayer = ModuleLayer.defineModulesWithOneLoader(modulePathConfiguration, List.of(bootLayer), parent).layer();\n@@ -256,0 +259,15 @@\n+\n+    static class MemoryPreview extends Preview {\n+        static void registerInstance(Context context) {\n+            context.put(previewKey, (Factory<Preview>)MemoryPreview::new);\n+        }\n+\n+        MemoryPreview(Context context) {\n+            super(context);\n+        }\n+\n+        @Override\n+        public void reportDeferredDiagnostics() {\n+            \/\/ suppress diagnostics like \"Note: Recompile with -Xlint:preview for details.\"\n+        }\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryContext.java","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryModuleFinder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-                while ((n = r.read(buf, 0, buf.length)) != -1)  {\n+                while ((n = r.read(buf, 0, buf.length)) != -1) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/ProgramFileObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,2 +44,1 @@\n-import jdk.internal.misc.MainMethodFinder;\n-import jdk.internal.misc.PreviewFeatures;\n+import jdk.internal.misc.MethodFinder;\n@@ -209,4 +208,2 @@\n-        Method mainMethod;\n-        try {\n-            mainMethod = MainMethodFinder.findMainMethod(firstClass);\n-        } catch (NoSuchMethodException e) {\n+        Method mainMethod = MethodFinder.findMainMethod(firstClass);\n+        if (mainMethod == null) {\n@@ -225,1 +222,1 @@\n-            }  catch (ClassNotFoundException ignore) {\n+            } catch (ClassNotFoundException ignore) {\n@@ -228,3 +225,2 @@\n-            try {\n-                mainMethod = MainMethodFinder.findMainMethod(actualClass);\n-            } catch (NoSuchMethodException ignore) {\n+            mainMethod = MethodFinder.findMainMethod(actualClass);\n+            if (mainMethod == null) {\n@@ -239,12 +235,1 @@\n-        int mods = mainMethod.getModifiers();\n-        boolean isStatic = Modifier.isStatic(mods);\n-        boolean isPublic = Modifier.isPublic(mods);\n-        boolean noArgs = mainMethod.getParameterCount() == 0;\n-\n-        if (!PreviewFeatures.isEnabled() && (!isStatic || !isPublic)) {\n-            throw new Fault(Errors.MainNotPublicStatic);\n-        }\n-\n-        if (!mainMethod.getReturnType().equals(void.class)) {\n-            throw new Fault(Errors.MainNotVoid);\n-        }\n+        var isStatic = Modifier.isStatic(mainMethod.getModifiers());\n@@ -276,1 +261,1 @@\n-            if (noArgs) {\n+            if (mainMethod.getParameterCount() == 0) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/SourceLauncher.java","additions":8,"deletions":23,"binary":false,"changes":31,"status":"modified"}]}