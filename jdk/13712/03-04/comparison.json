{"files":[{"patch":"@@ -197,1 +197,1 @@\n-     * Load main entry-point class.\n+     * Create a new class load for the main entry-point class.\n@@ -201,1 +201,1 @@\n-     * @return class object representing the desired class\n+     * @return class loader object able to find and load the desired class\n@@ -205,1 +205,1 @@\n-    Class<?> loadApplicationClass(ClassLoader parent, String mainClassName) throws ClassNotFoundException, Fault {\n+    ClassLoader newClassLoaderFor(ClassLoader parent, String mainClassName) throws ClassNotFoundException, Fault {\n@@ -209,2 +209,1 @@\n-            var memoryClassLoader = new MemoryClassLoader(inMemoryClasses, parent, null, descriptor, this::compileJavaFileByName);\n-            return Class.forName(mainClassName, true, memoryClassLoader);\n+            return new MemoryClassLoader(inMemoryClasses, parent, null, descriptor, this::compileJavaFileByName);\n@@ -227,2 +226,2 @@\n-            var modulePathConfiguration = bootLayer.configuration().resolveAndBind(modulePathFinder, ModuleFinder.of(), Set.copyOf(modulePathModules));\n-            var modulePathLayer = ModuleLayer.defineModulesWithOneLoader(modulePathConfiguration, List.of(bootLayer), parent).layer();\n+            var modulePathConfiguration = bootLayer.configuration().resolveAndBind(ModuleFinder.of(), modulePathFinder, Set.copyOf(modulePathModules));\n+            var modulePathLayer = bootLayer.defineModulesWithOneLoader(modulePathConfiguration, parent);\n@@ -246,1 +245,1 @@\n-        return memoryLayer.findLoader(applicationModule.name()).loadClass(mainClassName);\n+        return memoryLayer.findLoader(applicationModule.name());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryContext.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -203,1 +203,2 @@\n-            firstClass = context.loadApplicationClass(parentLoader, firstClassName);\n+            ClassLoader loader = context.newClassLoaderFor(parentLoader, firstClassName);\n+            firstClass = Class.forName(firstClassName, false, loader);\n@@ -208,1 +209,1 @@\n-        Method mainMethod = null;\n+        Method mainMethod;\n@@ -212,1 +213,1 @@\n-            \/\/ 2. If the first class doesn't have a main method, look for a top-level public class\n+            \/\/ 2. If the first class doesn't have a main method, look for a class with a matching name\n@@ -215,21 +216,11 @@\n-            var expectedPublicName = compilationUnitName.substring(0, compilationUnitName.length() - 5);\n-            for (var name : topLevelClassNames) {\n-                Class<?> nextClass;\n-                try {\n-                    nextClass = Class.forName(name, true, firstClass.getClassLoader());\n-                }  catch (ClassNotFoundException ignore) {\n-                    throw new Fault(Errors.CantFindClass(name));\n-                }\n-                if (Modifier.isPublic(nextClass.getModifiers())) {\n-                    \/\/ 3. If there's a top-level public class and doesn't match the name - fail\n-                    if (!nextClass.getName().equals(expectedPublicName)) {\n-                        throw new Fault(Errors.CantFindClass(expectedPublicName));\n-                    }\n-                    \/\/ 4. If the top-level public class has a main method - invoke it\n-                    try {\n-                        mainMethod = MainMethodFinder.findMainMethod(nextClass);\n-                        break;\n-                    } catch (NoSuchMethodException ignore) {\n-                        \/\/ continue with next class\n-                    }\n-                }\n+            var expectedName = compilationUnitName.substring(0, compilationUnitName.length() - 5);\n+            var actualName = topLevelClassNames.stream()\n+                    .filter(name -> name.equals(expectedName))\n+                    .findFirst()\n+                    .orElseThrow(() -> new Fault(Errors.CantFindClass(expectedName)));\n+\n+            Class<?> actualClass;\n+            try {\n+                actualClass = Class.forName(actualName, false, firstClass.getClassLoader());\n+            }  catch (ClassNotFoundException ignore) {\n+                throw new Fault(Errors.CantFindClass(actualName));\n@@ -237,2 +228,4 @@\n-            if (mainMethod == null) {\n-                throw new Fault(Errors.CantFindMainMethod(firstClassName));\n+            try {\n+                mainMethod = MainMethodFinder.findMainMethod(actualClass);\n+            } catch (NoSuchMethodException ignore) {\n+                throw new Fault(Errors.CantFindMainMethod(actualName));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/SourceLauncher.java","additions":19,"deletions":26,"binary":false,"changes":45,"status":"modified"}]}