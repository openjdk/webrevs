{"files":[{"patch":"@@ -78,2 +78,2 @@\n-    ldrw(hdr, Address(hdr, Klass::access_flags_offset()));\n-    tstw(hdr, JVM_ACC_IS_VALUE_BASED_CLASS);\n+    ldrb(hdr, Address(hdr, Klass::misc_flags_offset()));\n+    tst(hdr, KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -786,2 +786,2 @@\n-        __ ldrw(t, Address(t, Klass::access_flags_offset()));\n-        __ tbnz(t, exact_log2(JVM_ACC_HAS_FINALIZER), register_finalizer);\n+        __ ldrb(t, Address(t, Klass::misc_flags_offset()));\n+        __ tbnz(t, exact_log2(KlassFlags::_misc_has_finalizer), register_finalizer);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-    ldrw(tmp, Address(tmp, Klass::access_flags_offset()));\n-    tstw(tmp, JVM_ACC_IS_VALUE_BASED_CLASS);\n+    ldrb(tmp, Address(tmp, Klass::misc_flags_offset()));\n+    tst(tmp, KlassFlags::_misc_is_value_based_class);\n@@ -246,2 +246,2 @@\n-    ldrw(t1, Address(t1, Klass::access_flags_offset()));\n-    tstw(t1, JVM_ACC_IS_VALUE_BASED_CLASS);\n+    ldrb(t1, Address(t1, Klass::misc_flags_offset()));\n+    tst(t1, KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -693,2 +693,2 @@\n-      ldrw(tmp, Address(tmp, Klass::access_flags_offset()));\n-      tstw(tmp, JVM_ACC_IS_VALUE_BASED_CLASS);\n+      ldrb(tmp, Address(tmp, Klass::misc_flags_offset()));\n+      tst(tmp, KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2194,1 +2194,1 @@\n-    __ ldrw(r3, Address(r3, Klass::access_flags_offset()));\n+    __ ldrb(r3, Address(r3, Klass::misc_flags_offset()));\n@@ -2196,1 +2196,1 @@\n-    __ tbz(r3, exact_log2(JVM_ACC_HAS_FINALIZER), skip_register_finalizer);\n+    __ tbz(r3, exact_log2(KlassFlags::_misc_has_finalizer), skip_register_finalizer);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -198,2 +198,2 @@\n-    ldr_u32(tmp2, Address(tmp2, Klass::access_flags_offset()));\n-    tst(tmp2, JVM_ACC_IS_VALUE_BASED_CLASS);\n+    ldrb(tmp2, Address(tmp2, Klass::misc_flags_offset()));\n+    tst(tmp2, KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/arm\/c1_MacroAssembler_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -507,1 +507,1 @@\n-        \/\/ Do not call runtime if JVM_ACC_HAS_FINALIZER flag is not set\n+        \/\/ Do not call runtime if has_finalizer flag is not set\n@@ -509,1 +509,1 @@\n-        __ ldr_u32(Rtemp, Address(Rtemp, Klass::access_flags_offset()));\n+        __ ldrb(Rtemp, Address(Rtemp, Klass::misc_flags_offset()));\n@@ -511,1 +511,1 @@\n-        __ tst(Rtemp, JVM_ACC_HAS_FINALIZER);\n+        __ tst(Rtemp, KlassFlags::_misc_has_finalizer);\n","filename":"src\/hotspot\/cpu\/arm\/c1_Runtime1_arm.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,2 +89,2 @@\n-    ldr_u32(Rscratch, Address(Rscratch, Klass::access_flags_offset()));\n-    tst(Rscratch, JVM_ACC_IS_VALUE_BASED_CLASS);\n+    ldrb(Rscratch, Address(Rscratch, Klass::misc_flags_offset()));\n+    tst(Rscratch, KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/arm\/c2_MacroAssembler_arm.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -912,2 +912,2 @@\n-      ldr_u32(R0, Address(R0, Klass::access_flags_offset()));\n-      tst(R0, JVM_ACC_IS_VALUE_BASED_CLASS);\n+      ldrb(R0, Address(R0, Klass::misc_flags_offset()));\n+      tst(R0, KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2497,2 +2497,2 @@\n-    __ ldr_u32(Rtemp, Address(Rtemp, Klass::access_flags_offset()));\n-    __ tbz(Rtemp, exact_log2(JVM_ACC_HAS_FINALIZER), skip_register_finalizer);\n+    __ ldrb(Rtemp, Address(Rtemp, Klass::misc_flags_offset()));\n+    __ tbz(Rtemp, exact_log2(KlassFlags::_misc_has_finalizer), skip_register_finalizer);\n","filename":"src\/hotspot\/cpu\/arm\/templateTable_arm.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -89,2 +89,2 @@\n-    lwz(Rscratch, in_bytes(Klass::access_flags_offset()), Rscratch);\n-    testbitdi(CCR0, R0, Rscratch, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n+    lbz(Rscratch, in_bytes(Klass::misc_flags_offset()), Rscratch);\n+    testbitdi(CCR0, R0, Rscratch, exact_log2(KlassFlags::_misc_is_value_based_class));\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -482,2 +482,2 @@\n-        __ lwz(t, in_bytes(Klass::access_flags_offset()), t);\n-        __ testbitdi(CCR0, R0, t, exact_log2(JVM_ACC_HAS_FINALIZER));\n+        __ lbz(t, in_bytes(Klass::misc_flags_offset()), t);\n+        __ testbitdi(CCR0, R0, t, exact_log2(KlassFlags::_misc_has_finalizer));\n","filename":"src\/hotspot\/cpu\/ppc\/c1_Runtime1_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -973,2 +973,2 @@\n-      lwz(tmp, in_bytes(Klass::access_flags_offset()), tmp);\n-      testbitdi(CCR0, R0, tmp, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n+      lbz(tmp, in_bytes(Klass::misc_flags_offset()), tmp);\n+      testbitdi(CCR0, R0, tmp, exact_log2(KlassFlags::_misc_is_value_based_class));\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2561,2 +2561,2 @@\n-    lwz(temp, in_bytes(Klass::access_flags_offset()), temp);\n-    testbitdi(flag, R0, temp, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n+    lbz(temp, in_bytes(Klass::misc_flags_offset()), temp);\n+    testbitdi(flag, R0, temp, exact_log2(KlassFlags::_misc_is_value_based_class));\n@@ -2752,2 +2752,2 @@\n-    lwz(tmp1, in_bytes(Klass::access_flags_offset()), tmp1);\n-    testbitdi(flag, R0, tmp1, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n+    lbz(tmp1, in_bytes(Klass::misc_flags_offset()), tmp1);\n+    testbitdi(flag, R0, tmp1, exact_log2(KlassFlags::_misc_is_value_based_class));\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2133,2 +2133,2 @@\n-    __ lwz(Rklass_flags, in_bytes(Klass::access_flags_offset()), Rklass);\n-    __ testbitdi(CCR0, R0, Rklass_flags, exact_log2(JVM_ACC_HAS_FINALIZER));\n+    __ lbz(Rklass_flags, in_bytes(Klass::misc_flags_offset()), Rklass);\n+    __ testbitdi(CCR0, R0, Rklass_flags, exact_log2(KlassFlags::_misc_has_finalizer));\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-    lwu(hdr, Address(hdr, Klass::access_flags_offset()));\n-    test_bit(temp, hdr, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n+    lbu(hdr, Address(hdr, Klass::misc_flags_offset()));\n+    test_bit(temp, hdr, exact_log2(KlassFlags::_misc_is_value_based_class));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -802,2 +802,2 @@\n-        __ lwu(t, Address(t, Klass::access_flags_offset()));\n-        __ test_bit(t0, t, exact_log2(JVM_ACC_HAS_FINALIZER));\n+        __ lbu(t, Address(t, Klass::misc_flags_offset()));\n+        __ test_bit(t0, t, exact_log2(KlassFlags::_misc_has_finalizer));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-    lwu(tmp, Address(tmp, Klass::access_flags_offset()));\n-    test_bit(tmp, tmp, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n+    lbu(tmp, Address(tmp, Klass::misc_flags_offset()));\n+    test_bit(tmp, tmp, exact_log2(KlassFlags::_misc_is_value_based_class));\n@@ -280,2 +280,2 @@\n-    lwu(tmp1, Address(tmp1, Klass::access_flags_offset()));\n-    test_bit(tmp1, tmp1, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n+    lbu(tmp1, Address(tmp1, Klass::misc_flags_offset()));\n+    test_bit(tmp1, tmp1, exact_log2(KlassFlags::_misc_is_value_based_class));\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -753,2 +753,2 @@\n-      lwu(tmp, Address(tmp, Klass::access_flags_offset()));\n-      test_bit(tmp, tmp, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n+      lbu(tmp, Address(tmp, Klass::misc_flags_offset()));\n+      test_bit(tmp, tmp, exact_log2(KlassFlags::_misc_is_value_based_class));\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2101,1 +2101,1 @@\n-    __ lwu(x13, Address(x13, Klass::access_flags_offset()));\n+    __ lbu(x13, Address(x13, Klass::misc_flags_offset()));\n@@ -2103,1 +2103,1 @@\n-    __ test_bit(t0, x13, exact_log2(JVM_ACC_HAS_FINALIZER));\n+    __ test_bit(t0, x13, exact_log2(KlassFlags::_misc_has_finalizer));\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    testbit(Address(tmp, Klass::access_flags_offset()), exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n+    z_tm(Address(tmp, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/s390\/c1_MacroAssembler_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -446,1 +446,1 @@\n-        __ testbit(Address(klass, Klass::access_flags_offset()), exact_log2(JVM_ACC_HAS_FINALIZER));\n+        __ z_tm(Address(klass, Klass::misc_flags_offset()), KlassFlags::_misc_has_finalizer);\n","filename":"src\/hotspot\/cpu\/s390\/c1_Runtime1_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1010,1 +1010,1 @@\n-    testbit(Address(tmp, Klass::access_flags_offset()), exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n+    z_tm(Address(tmp, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3510,3 +3510,1 @@\n-    z_l(temp, Address(temp, Klass::access_flags_offset()));\n-    assert((JVM_ACC_IS_VALUE_BASED_CLASS & 0xFFFF) == 0, \"or change following instruction\");\n-    z_nilh(temp, JVM_ACC_IS_VALUE_BASED_CLASS >> 16);\n+    z_tm(Address(temp, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n@@ -6157,3 +6155,1 @@\n-    z_l(tmp1, Address(tmp1, Klass::access_flags_offset()));\n-    assert((JVM_ACC_IS_VALUE_BASED_CLASS & 0xFFFF) == 0, \"or change following instruction\");\n-    z_nilh(tmp1, JVM_ACC_IS_VALUE_BASED_CLASS >> 16);\n+    z_tm(Address(tmp1, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2324,1 +2324,1 @@\n-    __ testbit(Address(Rklass, Klass::access_flags_offset()), exact_log2(JVM_ACC_HAS_FINALIZER));\n+    __ z_tm(Address(Rklass, Klass::misc_flags_offset()), KlassFlags::_misc_has_finalizer);\n","filename":"src\/hotspot\/cpu\/s390\/templateTable_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,2 +61,1 @@\n-    movl(hdr, Address(hdr, Klass::access_flags_offset()));\n-    testl(hdr, JVM_ACC_IS_VALUE_BASED_CLASS);\n+    testb(Address(hdr, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1169,2 +1169,1 @@\n-        __ movl(t, Address(t, Klass::access_flags_offset()));\n-        __ testl(t, JVM_ACC_HAS_FINALIZER);\n+        __ testb(Address(t, Klass::misc_flags_offset()), KlassFlags::_misc_has_finalizer);\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -280,2 +280,1 @@\n-    movl(tmpReg, Address(tmpReg, Klass::access_flags_offset()));\n-    testl(tmpReg, JVM_ACC_IS_VALUE_BASED_CLASS);\n+    testb(Address(tmpReg, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n@@ -600,2 +599,1 @@\n-    movl(rax_reg, Address(rax_reg, Klass::access_flags_offset()));\n-    testl(rax_reg, JVM_ACC_IS_VALUE_BASED_CLASS);\n+    testb(Address(rax_reg, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1178,2 +1178,1 @@\n-      movl(tmp_reg, Address(tmp_reg, Klass::access_flags_offset()));\n-      testl(tmp_reg, JVM_ACC_IS_VALUE_BASED_CLASS);\n+      testb(Address(tmp_reg, Klass::misc_flags_offset()), KlassFlags::_misc_is_value_based_class);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2582,2 +2582,1 @@\n-    __ movl(rdi, Address(rdi, Klass::access_flags_offset()));\n-    __ testl(rdi, JVM_ACC_HAS_FINALIZER);\n+    __ testb(Address(rdi, Klass::misc_flags_offset()), KlassFlags::_misc_has_finalizer);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-  _has_finalizer = access_flags.has_finalizer();\n+  _has_finalizer = ik->has_finalizer();\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -229,0 +229,9 @@\n+\/\/ ------------------------------------------------------------------\n+\/\/ ciKlass::misc_flags\n+klass_flags_t ciKlass::misc_flags() {\n+  assert(is_loaded(), \"not loaded\");\n+  GUARDED_VM_ENTRY(\n+    return get_Klass()->misc_flags();\n+  )\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciKlass.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,0 +124,3 @@\n+  \/\/ Fetch Klass::misc_flags.\n+  klass_flags_t          misc_flags();\n+\n","filename":"src\/hotspot\/share\/ci\/ciKlass.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5176,3 +5176,1 @@\n-  if (_is_hidden) {\n-    ik->set_is_hidden();\n-  }\n+  assert(!_is_hidden || ik->is_hidden(), \"must be set already\");\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -274,0 +274,1 @@\n+  nonstatic_field(Klass,                       _misc_flags._flags,                            u1)                                    \\\n@@ -482,4 +483,0 @@\n-  declare_constant(JVM_ACC_HAS_FINALIZER)                                 \\\n-  declare_constant(JVM_ACC_IS_CLONEABLE_FAST)                             \\\n-  declare_constant(JVM_ACC_IS_HIDDEN_CLASS)                               \\\n-  declare_constant(JVM_ACC_IS_VALUE_BASED_CLASS)                          \\\n@@ -733,0 +730,4 @@\n+  declare_constant(KlassFlags::_misc_is_hidden_class)                     \\\n+  declare_constant(KlassFlags::_misc_is_value_based_class)                \\\n+  declare_constant(KlassFlags::_misc_has_finalizer)                       \\\n+  declare_constant(KlassFlags::_misc_is_cloneable_fast)                   \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  return _access_flags.is_cloneable_fast() ||\n+  return _misc_flags.is_cloneable_fast() ||\n@@ -79,1 +79,1 @@\n-    _access_flags.set_is_cloneable_fast();\n+    _misc_flags.set_is_cloneable_fast(true);\n@@ -978,0 +978,1 @@\n+  st->print(BULLET\"flags: \"); _misc_flags.print_on(st); st->cr();\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"oops\/klassFlags.hpp\"\n@@ -168,0 +169,2 @@\n+                                \/\/ Some flags created by the JVM, not in the class file itself,\n+                                \/\/ are in _misc_flags below.\n@@ -197,0 +200,2 @@\n+  KlassFlags  _misc_flags;\n+\n@@ -431,0 +436,1 @@\n+  static ByteSize misc_flags_offset()            { return byte_offset_of(Klass, _misc_flags._flags); }\n@@ -695,6 +701,8 @@\n-  bool has_finalizer() const            { return _access_flags.has_finalizer(); }\n-  void set_has_finalizer()              { _access_flags.set_has_finalizer(); }\n-  bool is_hidden() const                { return access_flags().is_hidden_class(); }\n-  void set_is_hidden()                  { _access_flags.set_is_hidden_class(); }\n-  bool is_value_based()                 { return _access_flags.is_value_based_class(); }\n-  void set_is_value_based()             { _access_flags.set_is_value_based_class(); }\n+  bool has_finalizer() const            { return _misc_flags.has_finalizer(); }\n+  void set_has_finalizer()              { _misc_flags.set_has_finalizer(true); }\n+  bool is_hidden() const                { return _misc_flags.is_hidden_class(); }\n+  void set_is_hidden()                  { _misc_flags.set_is_hidden_class(true); }\n+  bool is_value_based() const           { return _misc_flags.is_value_based_class(); }\n+  void set_is_value_based()             { _misc_flags.set_is_value_based_class(true); }\n+\n+  klass_flags_t misc_flags() const      { return _misc_flags.value(); }\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,1 @@\n-  return access_flags().is_hidden_class() &&\n-         class_loader_data()->has_class_mirror_holder();\n+  return is_hidden() && class_loader_data()->has_class_mirror_holder();\n","filename":"src\/hotspot\/share\/oops\/klass.inline.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"oops\/klassFlags.hpp\"\n+#include \"utilities\/ostream.hpp\"\n+\n+void KlassFlags::print_on(outputStream* st) const {\n+#define KLASS_FLAGS_PRINT(name, ignore)          \\\n+  if (name()) st->print(#name \" \");\n+  KLASS_FLAGS_DO(KLASS_FLAGS_PRINT)\n+#undef KLASS_FLAGS_PRINT\n+}\n","filename":"src\/hotspot\/share\/oops\/klassFlags.cpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_OOPS_KLASSFLAGS_HPP\n+#define SHARE_OOPS_KLASSFLAGS_HPP\n+\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+class outputStream;\n+\n+\/\/ The Klass class contains only parse-time flags and are used by generated code, even though\n+\/\/ most apply to InstanceKlass, access is more straightforward through Klass pointers.\n+\/\/ These flags are JVM internal and not part of the AccessFlags classfile specification.\n+\n+using klass_flags_t = u1;\n+\n+class KlassFlags {\n+  friend class VMStructs;\n+  friend class JVMCIVMStructs;\n+\n+ public:\n+#define KLASS_FLAGS_DO(flag)  \\\n+    flag(is_hidden_class              , 1 << 0) \\\n+    flag(is_value_based_class         , 1 << 1) \\\n+    flag(has_finalizer                , 1 << 2) \\\n+    flag(is_cloneable_fast            , 1 << 3) \\\n+    \/* end of list *\/\n+\n+#define KLASS_FLAGS_ENUM_NAME(name, value)    _misc_##name = value,\n+  enum {\n+    KLASS_FLAGS_DO(KLASS_FLAGS_ENUM_NAME)\n+  };\n+#undef KLASS_FLAGS_ENUM_NAME\n+\n+  \/\/ These flags are write-once before the class is published and then read-only\n+  \/\/ so don't require atomic updates.\n+  klass_flags_t _flags;\n+\n+ public:\n+  KlassFlags() : _flags(0) {}\n+\n+  klass_flags_t value() const { return _flags; }\n+\n+  \/\/ Create getters and setters for the flag values.\n+#define KLASS_FLAGS_GET_SET(name, ignore)          \\\n+  bool name() const { return (_flags & _misc_##name) != 0; } \\\n+  void set_##name(bool b) {         \\\n+    assert(!name(), \"set once\");    \\\n+    if (b) _flags |= _misc_##name; \\\n+  }\n+  KLASS_FLAGS_DO(KLASS_FLAGS_GET_SET)\n+#undef KLASS_FLAGS_GET_SET\n+\n+  void print_on(outputStream* st) const;\n+};\n+\n+#endif \/\/ SHARE_OOPS_KLASSFLAGS_HPP\n","filename":"src\/hotspot\/share\/oops\/klassFlags.hpp","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -1704,0 +1704,2 @@\n+      if (flat->offset() == in_bytes(Klass::misc_flags_offset()))\n+        alias_type(idx)->set_rewritable(false);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3755,1 +3755,1 @@\n-\/\/ Use this for JVM_ACC_INTERFACE, JVM_ACC_IS_CLONEABLE_FAST, JVM_ACC_HAS_FINALIZER.\n+\/\/ Use this for JVM_ACC_INTERFACE.\n@@ -3757,1 +3757,1 @@\n-Node* LibraryCallKit::generate_access_flags_guard(Node* kls, int modifier_mask, int modifier_bits, RegionNode* region) {\n+Node* LibraryCallKit::generate_mods_flags_guard(Node* mods, int modifier_mask, int modifier_bits, RegionNode* region) {\n@@ -3760,2 +3760,0 @@\n-  Node* modp = basic_plus_adr(kls, in_bytes(Klass::access_flags_offset()));\n-  Node* mods = make_load(nullptr, modp, TypeInt::INT, T_INT, MemNode::unordered);\n@@ -3770,1 +3768,3 @@\n-  return generate_access_flags_guard(kls, JVM_ACC_INTERFACE, 0, region);\n+  Node* modp = basic_plus_adr(kls, in_bytes(Klass::access_flags_offset()));\n+  Node* mods = make_load(nullptr, modp, TypeInt::INT, T_INT, MemNode::unordered);\n+  return generate_mods_flags_guard(mods, JVM_ACC_INTERFACE, 0, region);\n@@ -3772,0 +3772,8 @@\n+\n+\/\/ Use this for testing if Klass is_hidden, has_finalizer, and is_cloneable_fast.\n+Node* LibraryCallKit::generate_misc_flags_guard(Node* kls, int modifier_mask, int modifier_bits, RegionNode* region) {\n+  Node* p = basic_plus_adr(kls, in_bytes(Klass::misc_flags_offset()));\n+  Node* mods = make_load(nullptr, p, TypeInt::UBYTE, T_BOOLEAN, MemNode::unordered);\n+  return generate_mods_flags_guard(mods, modifier_mask, modifier_bits, region);\n+}\n+\n@@ -3773,1 +3781,1 @@\n-  return generate_access_flags_guard(kls, JVM_ACC_IS_HIDDEN_CLASS, 0, region);\n+  return generate_misc_flags_guard(kls, KlassFlags::_misc_is_hidden_class, 0, region);\n@@ -5215,6 +5223,6 @@\n-      generate_access_flags_guard(obj_klass,\n-                                  \/\/ Test both conditions:\n-                                  JVM_ACC_IS_CLONEABLE_FAST | JVM_ACC_HAS_FINALIZER,\n-                                  \/\/ Must be cloneable but not finalizer:\n-                                  JVM_ACC_IS_CLONEABLE_FAST,\n-                                  slow_region);\n+      generate_misc_flags_guard(obj_klass,\n+                                \/\/ Test both conditions:\n+                                KlassFlags::_misc_is_cloneable_fast | KlassFlags::_misc_has_finalizer,\n+                                \/\/ Must be cloneable but not finalizer:\n+                                KlassFlags::_misc_is_cloneable_fast,\n+                                slow_region);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -159,3 +159,6 @@\n-  Node* generate_access_flags_guard(Node* kls,\n-                                    int modifier_mask, int modifier_bits,\n-                                    RegionNode* region);\n+  Node* generate_mods_flags_guard(Node* kls,\n+                                  int modifier_mask, int modifier_bits,\n+                                  RegionNode* region);\n+  Node* generate_misc_flags_guard(Node* kls,\n+                                  int modifier_mask, int modifier_bits,\n+                                  RegionNode* region);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1949,0 +1949,6 @@\n+  if (tkls->offset() == in_bytes(Klass::misc_flags_offset())) {\n+    \/\/ The field is Klass::_misc_flags.  Return its (constant) value.\n+    \/\/ (Folds up the 2nd indirection in Reflection.getClassAccessFlags(aClassConstant).)\n+    assert(this->Opcode() == Op_LoadUB, \"must load an unsigned byte from _misc_flags\");\n+    return TypeInt::make(klass->misc_flags());\n+  }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2126,2 +2126,2 @@\n-  Node* access_flags_addr = basic_plus_adr(klass, klass, in_bytes(Klass::access_flags_offset()));\n-  Node* access_flags = make_load(nullptr, access_flags_addr, TypeInt::INT, T_INT, MemNode::unordered);\n+  Node* access_flags_addr = basic_plus_adr(klass, klass, in_bytes(Klass::misc_flags_offset()));\n+  Node* access_flags = make_load(nullptr, access_flags_addr, TypeInt::UBYTE, T_BOOLEAN, MemNode::unordered);\n@@ -2129,1 +2129,1 @@\n-  Node* mask  = _gvn.transform(new AndINode(access_flags, intcon(JVM_ACC_HAS_FINALIZER)));\n+  Node* mask  = _gvn.transform(new AndINode(access_flags, intcon(KlassFlags::_misc_has_finalizer)));\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2018,2 +2018,0 @@\n-  declare_constant(JVM_ACC_HAS_FINALIZER)                                 \\\n-  declare_constant(JVM_ACC_IS_CLONEABLE_FAST)                             \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,3 +43,0 @@\n-  \/\/ HotSpot-specific access flags\n-  \/\/ These Klass flags should be migrated, to a field such as InstanceKlass::_misc_flags,\n-  \/\/ or to a similar flags field in Klass itself.\n@@ -47,4 +44,0 @@\n-  JVM_ACC_HAS_FINALIZER           = 0x40000000,     \/\/ True if klass has a non-empty finalize() method\n-  JVM_ACC_IS_CLONEABLE_FAST       = (int)0x80000000,\/\/ True if klass implements the Cloneable interface and can be optimized in generated code\n-  JVM_ACC_IS_HIDDEN_CLASS         = 0x04000000,     \/\/ True if klass is hidden\n-  JVM_ACC_IS_VALUE_BASED_CLASS    = 0x08000000,     \/\/ True if klass is marked as a ValueBased class\n@@ -80,6 +73,0 @@\n-  \/\/ Klass* flags\n-  bool has_finalizer           () const { return (_flags & JVM_ACC_HAS_FINALIZER          ) != 0; }\n-  bool is_cloneable_fast       () const { return (_flags & JVM_ACC_IS_CLONEABLE_FAST      ) != 0; }\n-  bool is_hidden_class         () const { return (_flags & JVM_ACC_IS_HIDDEN_CLASS        ) != 0; }\n-  bool is_value_based_class    () const { return (_flags & JVM_ACC_IS_VALUE_BASED_CLASS   ) != 0; }\n-\n@@ -105,7 +92,0 @@\n-  \/\/ Klass* flags\n-  \/\/ These are set at classfile parsing time so do not require atomic access.\n-  void set_has_finalizer()             { _flags |= JVM_ACC_HAS_FINALIZER; }\n-  void set_is_cloneable_fast()         { _flags |= JVM_ACC_IS_CLONEABLE_FAST; }\n-  void set_is_hidden_class()           { _flags |= JVM_ACC_IS_HIDDEN_CLASS; }\n-  void set_is_value_based_class()      { _flags |= JVM_ACC_IS_VALUE_BASED_CLASS; }\n-\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.hpp","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,4 +59,0 @@\n-  \/\/ Klass* flags\n-  public boolean hasFinalizer         () { return (flags & JVM_ACC_HAS_FINALIZER          ) != 0; }\n-  public boolean isCloneable          () { return (flags & JVM_ACC_IS_CLONEABLE           ) != 0; }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/AccessFlags.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,2 +233,0 @@\n-  public boolean hasFinalizer()             { return getAccessFlagsObj().hasFinalizer(); }\n-  public boolean isCloneable()              { return getAccessFlagsObj().isCloneable(); }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Klass.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,6 +106,0 @@\n-    \/\/ Klass* flags\n-    \/\/ True if klass has a non-empty finalize() method\n-    public static final long JVM_ACC_HAS_FINALIZER            = 0x40000000;\n-    \/\/ True if klass supports the Clonable interface\n-    public static final long JVM_ACC_IS_CLONEABLE             = 0x80000000;\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/ClassConstants.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -376,1 +376,2 @@\n-        return (getAccessFlags() & config().jvmAccHasFinalizer) != 0;\n+        int miscFlags = UNSAFE.getByte(getKlassPointer() + config().klassMiscFlagsOffset);\n+        return (miscFlags & config().jvmAccHasFinalizer) != 0;\n@@ -1113,1 +1114,2 @@\n-        return (getAccessFlags() & config().jvmAccIsCloneableFast) != 0;\n+        int miscFlags = UNSAFE.getByte(getKlassPointer() + config().klassMiscFlagsOffset);\n+        return (miscFlags & config().jvmAccIsCloneableFast) != 0;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedObjectTypeImpl.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+    final int klassMiscFlagsOffset = getFieldOffset(\"Klass::_misc_flags._flags\", Integer.class, \"u1\");\n@@ -116,1 +117,1 @@\n-    final int jvmAccHasFinalizer = getConstant(\"JVM_ACC_HAS_FINALIZER\", Integer.class);\n+    final int jvmAccHasFinalizer = getConstant(\"KlassFlags::_misc_has_finalizer\", Integer.class);\n@@ -119,1 +120,1 @@\n-    final int jvmAccIsCloneableFast = getConstant(\"JVM_ACC_IS_CLONEABLE_FAST\", Integer.class);\n+    final int jvmAccIsCloneableFast = getConstant(\"KlassFlags::_misc_is_cloneable_fast\", Integer.class);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}