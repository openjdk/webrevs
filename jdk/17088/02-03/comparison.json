{"files":[{"patch":"@@ -161,1 +161,1 @@\n-    @Test(expectedExceptions = {IOException.class})\n+    @Test\n@@ -167,0 +167,1 @@\n+            Assert.fail(\"jar tool unexpectedly completed successfully\");\n@@ -170,1 +171,0 @@\n-            throw e;\n@@ -180,1 +180,1 @@\n-    @Test(expectedExceptions = {IOException.class})\n+    @Test\n@@ -192,0 +192,1 @@\n+            Assert.fail(\"jar tool unexpectedly completed successfully\");\n@@ -197,1 +198,0 @@\n-            throw e;\n@@ -199,0 +199,33 @@\n+\n+    }\n+\n+    \/**\n+     * Create a jar file; then with @File as a part of jar command line, where the File is containing one or more\n+     * non-existent files or directories\n+     * The final jar should not be created and correct error message should be caught.\n+     * IOException is triggered as expected.\n+     *\/\n+    @Test\n+    public void testUpdateNonExistentFileInputClassList() throws IOException {\n+        touch(\"existingTestFileUpdate.txt\");\n+        touch(\"existingTestFileUpdate2.txt\");\n+        touch(\"classesUpdate.list\");\n+        Files.writeString(Path.of(\"classesUpdate.list\"), \"\"\"\n+                existingTestFileUpdate2.txt\n+                nonExistentTestFileUpdate.txt\n+                nonExistentDirectoryUpdate\n+                 \"\"\");\n+        onCompletion = () -> rm(\"existingTestFileUpdate.txt existingTestFileUpdate2.txt \" +\n+                \"classesUpdate.list testUpdate.jar\");\n+        try {\n+            jar(\"cf testUpdate.jar existingTestFileUpdate.txt\");\n+            Assert.assertTrue(Files.exists(Path.of(\"testUpdate.jar\")));\n+            jar(\"uf testUpdate.jar @classesUpdate.list\");\n+            Assert.fail(\"jar tool unexpectedly completed successfully\");\n+        } catch (IOException e) {\n+            String msg = e.getMessage().trim();\n+            Assert.assertFalse(msg.contains(\"existingTestFileUpdate.txt : no such file or directory\"));\n+            Assert.assertTrue(msg.contains(\"nonExistentTestFileUpdate.txt : no such file or directory\"));\n+            Assert.assertTrue(msg.trim().contains(\"nonExistentDirectoryUpdate : no such file or directory\"));\n+        }\n+\n","filename":"test\/jdk\/tools\/jar\/InputFilesTest.java","additions":37,"deletions":4,"binary":false,"changes":41,"status":"modified"}]}