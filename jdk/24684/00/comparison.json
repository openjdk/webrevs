{"files":[{"patch":"@@ -444,0 +444,1 @@\n+java\/awt\/ScrollPane\/ScrollPositionTest.java 8040070 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,215 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4073822\n+ * @summary ScrollPane repaints entire window when scrolling fast\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPaneFlicker\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.ScrollPane;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JComboBox;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollBar;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+\n+public class ScrollPaneFlicker {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                When scrolling a ScrollPane fast(i.e. holding the down\/up arrow\n+                down for a while), the ScrollPane would inexplicably refresh\n+                the entire window.\n+\n+                1. Select a type of ScrollPane content from the content menu.\n+                2. Scroll the content using the up\/down\/left\/right arrows on\n+                   the scroll bar. Try scrolling the entire content area using\n+                   the scroll arrows-- from top to bottom and left to right.\n+                3. Verify that the entire pane does not refresh when scrolling\n+                   - only the newly exposed areas should be repainting.\n+                4. Repeat for all content types.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollPaneFlicker::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        return new FlickerFrame();\n+    }\n+}\n+\n+class FlickerFrame extends Frame {\n+    ScrollPane pane;\n+\n+    public FlickerFrame() {\n+        super(\"ScrollPane Flicker Test\");\n+        TextPanel textPanel = new TextPanel();\n+        GradientPanel gradientPanel = new GradientPanel();\n+        ComponentPanel componentPanel = new ComponentPanel();\n+        SwingPanel swingPanel = new SwingPanel();\n+        MenuBar menubar = new MenuBar();\n+        Menu testMenu = new Menu(\"Test Options\");\n+\n+        pane = new ScrollPane();\n+        pane.getHAdjustable().setUnitIncrement(8);\n+        pane.getVAdjustable().setUnitIncrement(16);\n+        pane.add(textPanel);\n+        add(pane);\n+\n+        testMenu.add(makeContentItem(\"Text Lines\", textPanel));\n+        testMenu.add(makeContentItem(\"Gradient Fill\", gradientPanel));\n+        testMenu.add(makeContentItem(\"AWT Components\", componentPanel));\n+        testMenu.add(makeContentItem(\"Swing Components\", swingPanel));\n+        menubar.add(testMenu);\n+\n+        setMenuBar(menubar);\n+        setSize(400, 300);\n+    }\n+\n+    public MenuItem makeContentItem(String title, final Component content) {\n+        MenuItem menuItem = new MenuItem(title);\n+        menuItem.addActionListener(\n+                ev -> {\n+                    pane.add(content);\n+                    pane.validate();\n+                }\n+        );\n+        return menuItem;\n+    }\n+}\n+\n+class GradientPanel extends Canvas {\n+    public void paint(Graphics g) {\n+        \/\/ just paint something that'll take a while\n+        int x, y;\n+        int width = getSize().width;\n+        int height = getSize().height;\n+        int step = 8;\n+\n+        for (x = 0; x < width; x += step) {\n+            for (y = 0; y < height; y += step) {\n+                int red = (255 * y) \/ height;\n+                int green = (255 * x * y) \/ (width * height);\n+                int blue = (255 * x) \/ width;\n+                Rectangle bounds = g.getClipBounds();\n+                Rectangle fbounds = new Rectangle(x, y, x + step, y + step);\n+                if (bounds.intersects(fbounds)) {\n+                    Color color = new Color(red, green, blue);\n+                    g.setColor(color);\n+                    g.fillRect(x, y, x + step, y + step);\n+                }\n+            }\n+        }\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200, 1000);\n+    }\n+}\n+\n+class TextPanel extends Canvas {\n+    public void paint(Graphics g) {\n+        Font font = new Font(\"SanSerif\", Font.ITALIC, 12);\n+\n+        g.setFont(font);\n+        \/\/ just paint something that'll take a while\n+        int x, y;\n+        int width = getWidth();\n+        int height = getHeight();\n+        int step = 16;\n+\n+        for (x = y = 0; y < height; y += step) {\n+            Rectangle bounds = g.getClipBounds();\n+            Rectangle tbounds = new Rectangle(x, y - 16, x + width, y);\n+            if (bounds.intersects(tbounds)) {\n+                g.drawString(y + \" : The quick brown fox jumps over the lazy dog. \" +\n+                        \"The rain in Spain falls mainly on the plain.\", x, y);\n+            }\n+        }\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(640, 1000);\n+    }\n+}\n+\n+class ComponentPanel extends Panel {\n+    ComponentPanel() {\n+        add(new Label(\"Label\"));\n+        add(new Button(\"Button\"));\n+        add(new Checkbox(\"Checkbox\"));\n+        Choice c = new Choice();\n+        c.add(\"choice\");\n+        java.awt.List l = new java.awt.List();\n+        l.add(\"list\");\n+        add(new Scrollbar());\n+        add(new TextField(\"TextField\"));\n+        add(new TextArea(\"TextArea\"));\n+        add(new Panel());\n+        add(new Canvas());\n+    }\n+}\n+\n+class SwingPanel extends JPanel {\n+    SwingPanel() {\n+        add(new JLabel(\"JLabel\"));\n+        add(new JButton(\"JButton\"));\n+        add(new JCheckBox(\"JCheckBox\"));\n+        JComboBox c = new JComboBox();\n+        JList l = new JList();\n+        add(new JScrollBar());\n+        add(new JTextField(\"This is a JTextField with some text in it to make it longer.\"));\n+        add(new JTextArea(\"This is a JTextArea with some text in it to make it longer.\"));\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPaneFlicker.java","additions":215,"deletions":0,"binary":false,"changes":215,"status":"added"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * Licensed Materials - Property of IBM\n+ *\n+ * ScrollPanePaint.html\n+ *\n+ * (C) Copyright IBM Corporation 1998  All Rights Reserved.\n+ *\n+ * US Government Users Restricted Rights - Use, duplication or disclosure\n+ * restricted by GSA ADP Schedule Contract with IBM Corp.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4160721\n+ * @summary AWT ScrollPane painting problem\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollPanePaint\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.ScrollPane;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.util.List;\n+\n+public class ScrollPanePaint {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Press the button marked \"Toggle\" a few times.\n+                2. The contents of the frame should alternate between\n+                    a red panel and a scroll pane containing a green panel\n+                    If this does not happen (specifically, if the scroll\n+                    then the test has FAILED.\n+                \"\"\";\n+        ScrollPaintTest scrollPaintTest = new ScrollPaintTest();\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(scrollPaintTest::initialize)\n+                .positionTestUI(WindowLayouts::rightOneColumn)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static class ScrollPaintTest implements ActionListener {\n+        static Frame f;\n+        static boolean showScroll;\n+\n+        public List<Frame> initialize() {\n+            Frame frame = new Frame(\"Scrollpane paint test\");\n+            frame.setLayout(new BorderLayout());\n+            f = new Frame(\"Scrollpane paint test\");\n+            f.setLayout(new GridLayout(0, 1));\n+\n+            Button b = new Button(\"Toggle\");\n+            b.addActionListener(this);\n+\n+            frame.add(b, BorderLayout.CENTER);\n+            frame.pack();\n+\n+            showScroll = false;\n+            actionPerformed(null);\n+            return List.of(frame, f);\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            Container c;\n+            if (!showScroll) {\n+                c = (Container) new TestPanel(new Dimension(100, 100));\n+                c.setBackground(Color.red);\n+            } else {\n+                c = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n+                Panel p = new TestPanel(new Dimension(20, 20));\n+                p.setBackground(Color.green);\n+                c.add(p);\n+            }\n+\n+            f.removeAll();\n+            f.add(\"Center\", c);\n+            f.pack();\n+            showScroll = !showScroll;\n+        }\n+    }\n+\n+    private static class TestPanel extends Panel {\n+        Dimension dim;\n+\n+        TestPanel(Dimension d) {\n+            dim = d;\n+        }\n+\n+        public Dimension getMinimumSize() {\n+            return getPreferredSize();\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return dim;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPanePaint.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4008152\n+ * @summary ScrollPane position does not return correct values\n+ * @key headful\n+ * @run main ScrollPositionTest\n+ *\/\n+\n+import java.awt.Adjustable;\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.ScrollPane;\n+import java.awt.event.AdjustmentEvent;\n+import java.awt.event.AdjustmentListener;\n+\n+public class ScrollPositionTest {\n+    static Frame frame;\n+    public static Object lock = new Object();\n+    static int i = 0;\n+    static Point p;\n+    static ScrollPane sp;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Scroll Position Test\");\n+                frame.setLayout(new BorderLayout());\n+                frame.setSize(200, 200);\n+                sp = new ScrollPane(ScrollPane.SCROLLBARS_AS_NEEDED);\n+                Canvas canvas = new Canvas();\n+                canvas.setSize(300, 300);\n+                sp.add(canvas);\n+                frame.add(\"Center\", sp);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            EventQueue.invokeAndWait(() -> {\n+                Adjustable saH = sp.getHAdjustable();\n+                saH.addAdjustmentListener(new TestAdjustmentListener());\n+            });\n+            for (i = 0; i < 1000; i++) {\n+                EventQueue.invokeAndWait(() -> {\n+                    p = new Point(i % 100, i % 100);\n+                    sp.setScrollPosition(p);\n+                });\n+\n+                robot.waitForIdle();\n+                robot.delay(10);\n+                EventQueue.invokeAndWait(() -> {\n+                    if (!sp.getScrollPosition().equals(p)) {\n+                        throw new RuntimeException(\"Test failed. \" + i + \" : \" +\n+                                \"Expected \" + p + \", but Returned: \" + sp.getScrollPosition());\n+                    }\n+                });\n+            }\n+            System.out.println(\"Test Passed.\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static class TestAdjustmentListener implements AdjustmentListener {\n+        public void adjustmentValueChanged(AdjustmentEvent e) {\n+            System.out.println(\"AdjEvent caught:\" + e);\n+            synchronized (ScrollPositionTest.lock) {\n+                ScrollPositionTest.lock.notify();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollPositionTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4094248\n+ * @summary Test initial appearance of SCROLLBARS_AS_NEEDED policy\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ScrollbarsAsNeededTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.ScrollPane;\n+\n+public class ScrollbarsAsNeededTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. A Frame window with a ScrollPane that is\n+                   initially created with the SCROLLBARS_AS_NEEDED policy.\n+                2. If there are no scrollbars around the ScrollPane then\n+                    the test PASS. Otherwise the test FAILS.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ScrollbarsAsNeededTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static Frame initialize() {\n+        Frame frame = new Frame(\"Scrollbar as needed test\");\n+        ScrollPane scrollPane = new java.awt.ScrollPane() {\n+            @Override\n+            public void paint(Graphics g) {\n+                super.paint(g);\n+                g.drawString(\"ScrollPane\", 10, 50);\n+            }\n+        };\n+        scrollPane.setBackground(Color.WHITE);\n+        frame.setBackground(Color.GRAY);\n+        frame.setSize(200, 200);\n+        frame.setLayout(new FlowLayout());\n+        frame.add(scrollPane);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/ScrollPane\/ScrollbarsAsNeededTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}