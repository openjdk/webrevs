{"files":[{"patch":"@@ -613,6 +613,5 @@\n-     * (external) signal during deactivation. To reduce false-alarm\n-     * reactivations while doing so, we scan multiple times\n-     * (analogously to method quiescent()) before trying to\n-     * reactivate.  Because idle workers are often not yet blocked\n-     * (parked), we use a WorkQueue field to advertise that a waiter\n-     * actually needs unparking upon signal.\n+     * signal during deactivation. To reduce false-alarm reactivations\n+     * while doing so, we scan multiple times (analogously to method\n+     * quiescent()) before trying to reactivate.  Because idle workers\n+     * are often not yet blocked (parked), we use a WorkQueue field to\n+     * advertise that a waiter actually needs unparking upon signal.\n@@ -1999,1 +1998,1 @@\n-        w.stackPred = (int)pc;                \/\/ set ctl stack link\n+        int sp = w.stackPred = (int)pc;       \/\/ set ctl stack link\n@@ -2009,2 +2008,2 @@\n-        for (int k = Math.max(n + (n << 1), SPIN_WAITS << 1);;) {\n-            WorkQueue q; int cap; ForkJoinTask<?>[] a;\n+        for (int k = Math.max(n << 2, SPIN_WAITS << 1);;) {\n+            WorkQueue q; int cap; ForkJoinTask<?>[] a; long c;\n@@ -2015,4 +2014,3 @@\n-            if ((k & 1) != 0)\n-                Thread.onSpinWait();          \/\/ interleave spins and rechecks\n-            else if ((q = qs[k & (n - 1)]) != null &&\n-                     (a = q.array) != null && (cap = a.length) > 0 &&\n+            if ((q = qs[k & (n - 1)]) == null)\n+                Thread.onSpinWait();\n+            else if ((a = q.array) != null && (cap = a.length) > 0 &&\n@@ -2020,1 +2018,2 @@\n-                     ctl == qc && compareAndSetCtl(qc, pc))\n+                     (int)(c = ctl) == activePhase &&\n+                     compareAndSetCtl(c, (sp & LMASK) | ((c + RC_UNIT) & UMASK)))\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @library \/test\/lib\n+ * @bug 8345294\n+ * @run main\/othervm --enable-native-access=ALL-UNNAMED Starvation 100000\n+ *\/\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicReference;\n+import jdk.test.lib.thread.VThreadPinner;\n+\n+public class Starvation {\n+    public static void main(String[] args) throws Exception {\n+        int iterations = Integer.parseInt(args[0]);\n+\n+        for (int i = 0; i < iterations; i++) {\n+            var exRef = new AtomicReference<Exception>();\n+            Thread thread =  Thread.startVirtualThread(() -> {\n+                try {\n+                    runTest();\n+                } catch (Exception e) {\n+                    exRef.set(e);\n+                }\n+            });\n+            while (!thread.join(Duration.ofSeconds(1))) {\n+                System.out.format(\"%s iteration %d waiting for %s%n\", Instant.now(), i, thread);\n+            }\n+            Exception ex = exRef.get();\n+            if (ex != null) {\n+                throw ex;\n+            }\n+        }\n+    }\n+\n+    static void runTest() throws InterruptedException {\n+        int nprocs = Runtime.getRuntime().availableProcessors();\n+\n+        var threads = new ArrayList<Thread>();\n+        Object lock = new Object();\n+        synchronized (lock) {\n+            for (int i = 0; i < nprocs - 1; i++) {\n+                var started = new CountDownLatch(1);\n+                Thread thread = Thread.startVirtualThread(() -> {\n+                    started.countDown();\n+                    VThreadPinner.runPinned(() -> {\n+                        synchronized (lock) {\n+                        }\n+                    });\n+                });\n+                started.await();\n+                threads.add(thread);\n+            }\n+        }\n+\n+        for (Thread t : threads) {\n+            t.join();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/Starvation.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}