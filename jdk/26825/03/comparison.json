{"files":[{"patch":"@@ -580,0 +580,1 @@\n+*   This was only true for the old, ICU layout engine which inserted 0xffff glyphs for ligaturized characters!\n@@ -715,2 +716,0 @@\n-        int clusterExtraGlyphs = 0;\n-\n@@ -733,2 +732,1 @@\n-               (indices[gx] <= maxIndex) ||\n-               (maxIndex - minIndex > clusterExtraGlyphs))) {\n+               (indices[gx] <= maxIndex))) {\n@@ -736,1 +734,0 @@\n-            ++clusterExtraGlyphs; \/\/ have an extra glyph in this cluster\n@@ -739,2 +736,1 @@\n-                                   \" gx=\"+ gx+ \" i[gx]=\"+indices[gx] +\n-                                   \" clusterExtraGlyphs=\"+clusterExtraGlyphs);\n+                                   \" gx=\"+ gx+ \" i[gx]=\"+indices[gx]);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/ExtendedTextSourceLabel.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8152680\n+ * @bug 8152680 8361381\n@@ -43,0 +43,17 @@\n+\n+        \/\/ This is the encoding-independent Khmer string \"បានស្នើសុំនៅតែត្រូវបានបដិសេធ\"\n+        \/\/ We can't check for more details like e.g. correct line breaking because it is font and platform dependent,\n+        \/\/ but we can at least chack that the created GlyphVector has monotonically increasing character indices.\n+        \/\/ This is guaranteed by HarfBuzz's HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS cluster level which is used\n+        \/\/ in the OpenJDK layout implementation.\n+        String khmer = \"\\u1794\\u17b6\\u1793\\u179f\\u17d2\\u1793\\u17be\\u179f\\u17bb\\u17c6\\u1793\\u17c5\" +\n+                \"\\u178f\\u17c2\\u178f\\u17d2\\u179a\\u17bc\\u179c\\u1794\\u17b6\\u1793\\u1794\\u178a\\u17b7\\u179f\\u17c1\\u1792\";\n+        font = new Font(Font.DIALOG, Font.PLAIN, 12);\n+        gv = font.layoutGlyphVector(frc, khmer.toCharArray(), 0, khmer.length(), 0);\n+        int[] indices = gv.getGlyphCharIndices(0, gv.getNumGlyphs(), null);\n+        for (int i = 0; i < (indices.length - 1); i++) {\n+            if (indices[i] > indices[i + 1]) {\n+                throw new RuntimeException(\"Glyph character indices are supposed to be monotonically growing, but character index at position \" +\n+                        i + \" is bigger then the one at position \" + (i + 1) + \", i.e. \" + indices[i] + \" > \" + indices[i + 1] + \".\");\n+            }\n+        }\n","filename":"test\/jdk\/java\/awt\/font\/GlyphVector\/GetGlyphCharIndexTest.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8361381\n+ * @summary GlyphLayout behavior differs on JDK 11+ compared to JDK 8\n+ *\/\n+\n+import java.awt.*;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.LineBreakMeasurer;\n+import java.awt.font.TextAttribute;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+import java.text.BreakIterator;\n+import java.util.Locale;\n+\n+public class KhmerLineBreakTest {\n+    static String khmer = \"បានស្នើសុំនៅតែត្រូវបានបដិសេធ\";\n+    \/*\n+\n+    This is part of the output we get from `ExtendedTextSourceLabel::createCharinfo()`\n+    when running with `-Dsun.java2d.debugfonts=true`. It's a listing of the 28 code points\n+    of the `khmer` string defined above and displays their x-position during rendering as\n+    well as their advance. Code points with zero advance belong to the glyph cluster which\n+    is started by the first preceding code point with a non-zero advance. There should be no\n+    breaks at characters with zero advance, because this would break a glyph cluster.\n+\n+     0 ch: 1794 x: 0.0       xa: 68.115234\n+     1 ch: 17b6 x: 68.115234 xa: 0.0\n+     2 ch: 1793 x: 68.115234 xa: 45.410156\n+     3 ch: 179f x: 113.52539 xa: 90.82031\n+     4 ch: 17d2 x: 204.3457  xa: 0.0\n+     5 ch: 1793 x: 204.3457  xa: 0.0\n+     6 ch: 17be x: 204.3457  xa: 0.0\n+     7 ch: 179f x: 204.3457  xa: 68.115234\n+     8 ch: 17bb x: 272.46094 xa: 0.0\n+     9 ch: 17c6 x: 272.46094 xa: 0.0\n+    10 ch: 1793 x: 272.46094 xa: 90.82031\n+    11 ch: 17c5 x: 363.28125 xa: 0.0\n+    12 ch: 178f x: 363.28125 xa: 68.115234\n+    13 ch: 17c2 x: 431.39648 xa: 0.0\n+    14 ch: 178f x: 431.39648 xa: 68.115234\n+    15 ch: 17d2 x: 499.51172 xa: 0.0\n+    16 ch: 179a x: 499.51172 xa: 0.0\n+    17 ch: 17bc x: 499.51172 xa: 0.0\n+    18 ch: 179c x: 499.51172 xa: 22.705078\n+    19 ch: 1794 x: 522.2168  xa: 68.115234\n+    20 ch: 17b6 x: 590.33203 xa: 0.0\n+    21 ch: 1793 x: 590.33203 xa: 45.410156\n+    22 ch: 1794 x: 635.7422  xa: 45.410156\n+    23 ch: 178a x: 681.15234 xa: 45.410156\n+    24 ch: 17b7 x: 726.5625  xa: 0.0\n+    25 ch: 179f x: 726.5625  xa: 90.82031\n+    26 ch: 17c1 x: 817.3828  xa: 0.0\n+    27 ch: 1792 x: 817.3828  xa: 45.410156\n+\n+     *\/\n+    static boolean[] possibleBreak = new boolean[]\n+            { true, false, true, true, false, false, false, true, false, false,\n+              true, false, true, false, true, false, false, false, true, true,\n+              false, true, true, true, false, true, false, true, true \/* *\/ };\n+    static Locale locale = new Locale.Builder().setLanguage(\"km\").setRegion(\"KH\").build();\n+    static BreakIterator breakIterator = BreakIterator.getLineInstance(locale);\n+    static FontRenderContext frc = new FontRenderContext(null, true, true);\n+\n+    public static void main(String[] args) {\n+        Font[] allFonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();\n+        for (int i=0; i < allFonts.length; i++) {\n+            if (allFonts[i].canDisplayUpTo(khmer) == -1) {\n+                Font font = allFonts[i].deriveFont(Font.PLAIN, 60f);\n+                System.out.println(\"Trying font: \" + font.getFontName());\n+                AttributedString attrStr = new AttributedString(khmer);\n+                attrStr.addAttribute(TextAttribute.FONT, font);\n+                AttributedCharacterIterator it = attrStr.getIterator();\n+                for (int width = 200; width < 400; width += 10) {\n+                    LineBreakMeasurer measurer = new LineBreakMeasurer(it, breakIterator, frc);\n+                    System.out.print(width + \" : \");\n+                    while (measurer.getPosition() < it.getEndIndex()) {\n+                        int nextOffset = measurer.nextOffset(width);\n+                        System.out.print(nextOffset + \" \");\n+                        if (!possibleBreak[nextOffset]) {\n+                            System.out.println();\n+                            throw new RuntimeException(\"Invalid break at offset \" + nextOffset + \" (width = \" + width + \" font = \" + font.getFontName() + \")\");\n+                        }\n+                        measurer.setPosition(nextOffset);\n+                    }\n+                    System.out.println();\n+                }\n+                System.out.println(\"OK\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/LineBreakMeasurer\/KhmerLineBreakTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}