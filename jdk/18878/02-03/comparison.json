{"files":[{"patch":"@@ -5720,2 +5720,4 @@\n-  const Register top = temp1;\n-  const Register mark = temp2;\n+  const Register top           = temp1;\n+  const Register mark          = temp2;\n+  const int mark_offset        = oopDesc::mark_offset_in_bytes();\n+  const ByteSize ls_top_offset = JavaThread::lock_stack_top_offset();\n@@ -5725,1 +5727,1 @@\n-  z_lg(mark, Address(obj, oopDesc::mark_offset_in_bytes()));\n+  z_lg(mark, Address(obj, mark_offset));\n@@ -5729,1 +5731,1 @@\n-  z_lgf(top, Address(Z_thread, JavaThread::lock_stack_top_offset()));\n+  z_lgf(top, Address(Z_thread, ls_top_offset));\n@@ -5751,1 +5753,1 @@\n-    z_csg(mark, locked_obj, oopDesc::mark_offset_in_bytes(), obj);\n+    z_csg(mark, locked_obj, mark_offset, obj);\n@@ -5758,1 +5760,1 @@\n-  z_lgf(top, Address(Z_thread, JavaThread::lock_stack_top_offset()));\n+  z_lgf(top, Address(Z_thread, ls_top_offset));\n@@ -5760,1 +5762,1 @@\n-  z_alsi(in_bytes(JavaThread::lock_stack_top_offset()), Z_thread, oopSize);\n+  z_alsi(in_bytes(ls_top_offset), Z_thread, oopSize);\n@@ -5773,2 +5775,4 @@\n-  const Register mark = temp1;\n-  const Register top  = temp2;\n+  const Register mark          = temp1;\n+  const Register top           = temp2;\n+  const int mark_offset        = oopDesc::mark_offset_in_bytes();\n+  const ByteSize ls_top_offset = JavaThread::lock_stack_top_offset();\n@@ -5784,1 +5788,1 @@\n-    z_lgf(top, Address(Z_thread, JavaThread::lock_stack_top_offset()));\n+    z_lgf(top, Address(Z_thread, ls_top_offset));\n@@ -5792,1 +5796,1 @@\n-  z_lgf(top, Address(Z_thread, JavaThread::lock_stack_top_offset()));\n+  z_lgf(top, Address(Z_thread, ls_top_offset));\n@@ -5803,1 +5807,1 @@\n-  z_alsi(in_bytes(JavaThread::lock_stack_top_offset()), Z_thread, -oopSize);  \/\/ pop object\n+  z_alsi(in_bytes(ls_top_offset), Z_thread, -oopSize);  \/\/ pop object\n@@ -5814,1 +5818,1 @@\n-  z_lg(mark, Address(obj, oopDesc::mark_offset_in_bytes()));\n+  z_lg(mark, Address(obj, mark_offset));\n@@ -5831,1 +5835,1 @@\n-    z_csg(mark, unlocked_obj, oopDesc::mark_offset_in_bytes(), obj);\n+    z_csg(mark, unlocked_obj, mark_offset, obj);\n@@ -5838,1 +5842,1 @@\n-  z_lgf(top, Address(Z_thread, JavaThread::lock_stack_top_offset()));\n+  z_lgf(top, Address(Z_thread, ls_top_offset));\n@@ -5840,1 +5844,1 @@\n-  z_alsi(in_bytes(JavaThread::lock_stack_top_offset()), Z_thread, oopSize);\n+  z_alsi(in_bytes(ls_top_offset), Z_thread, oopSize);\n@@ -5866,1 +5870,3 @@\n-  const Register mark = tmp1;\n+  const Register mark          = tmp1;\n+  const int mark_offset        = oopDesc::mark_offset_in_bytes();\n+  const ByteSize ls_top_offset = JavaThread::lock_stack_top_offset();\n@@ -5877,2 +5883,2 @@\n-    z_lgf(top, Address(Z_thread, JavaThread::lock_stack_top_offset()));\n-    compareU32_and_branch(top, (unsigned)LockStack::end_offset()-1, bcondHigh, slow_path);\n+    z_lgf(top, Address(Z_thread, ls_top_offset));\n+    compareU32_and_branch(top, (unsigned) LockStack::end_offset() - 1, bcondHigh, slow_path);\n@@ -5889,1 +5895,1 @@\n-    z_lg(mark, Address(obj, oopDesc::mark_offset_in_bytes()));\n+    z_lg(mark, Address(obj, mark_offset));\n@@ -5895,9 +5901,10 @@\n-    \/\/ Try to lock. Transition lock bits 0b01 => 0b00\n-    assert(oopDesc::mark_offset_in_bytes() == 0, \"required to avoid a lea\");\n-    const Register locked_obj = top;\n-    z_oill(mark, markWord::unlocked_value);\n-    z_lgr(locked_obj, mark);\n-    \/\/ Clear lock-bits from locked_obj (locked state)\n-    z_xilf(locked_obj, markWord::unlocked_value);\n-    z_csg(mark, locked_obj, oopDesc::mark_offset_in_bytes(), obj);\n-    branch_optimized(Assembler::bcondNotEqual, slow_path);\n+    { \/\/ Try to lock. Transition lock bits 0b01 => 0b00\n+      assert(mark_offset == 0, \"required to avoid a lea\");\n+      const Register locked_obj = top;\n+      z_oill(mark, markWord::unlocked_value);\n+      z_lgr(locked_obj, mark);\n+      \/\/ Clear lock-bits from locked_obj (locked state)\n+      z_xilf(locked_obj, markWord::unlocked_value);\n+      z_csg(mark, locked_obj, mark_offset, obj);\n+      branch_optimized(Assembler::bcondNotEqual, slow_path);\n+    }\n@@ -5908,1 +5915,1 @@\n-    z_lgf(top, Address(Z_thread, JavaThread::lock_stack_top_offset()));\n+    z_lgf(top, Address(Z_thread, ls_top_offset));\n@@ -5910,1 +5917,1 @@\n-    z_alsi(in_bytes(JavaThread::lock_stack_top_offset()), Z_thread, oopSize);\n+    z_alsi(in_bytes(ls_top_offset), Z_thread, oopSize);\n@@ -5923,1 +5930,1 @@\n-    const Register zero = tmp2;\n+    const Register zero           = tmp2;\n@@ -5975,2 +5982,4 @@\n-  const Register mark = tmp1;\n-  const Register top  = tmp2;\n+  const Register mark          = tmp1;\n+  const Register top           = tmp2;\n+  const int mark_offset        = oopDesc::mark_offset_in_bytes();\n+  const ByteSize ls_top_offset = JavaThread::lock_stack_top_offset();\n@@ -5982,1 +5991,1 @@\n-    z_lgf(top, Address(Z_thread, JavaThread::lock_stack_top_offset()));\n+    z_lgf(top, Address(Z_thread, ls_top_offset));\n@@ -5994,1 +6003,1 @@\n-    z_alsi(in_bytes(JavaThread::lock_stack_top_offset()), Z_thread, -oopSize);  \/\/ pop object\n+    z_alsi(in_bytes(ls_top_offset), Z_thread, -oopSize);  \/\/ pop object\n@@ -6007,1 +6016,1 @@\n-    z_lg(mark, Address(obj, oopDesc::mark_offset_in_bytes()));\n+    z_lg(mark, Address(obj, mark_offset));\n@@ -6024,1 +6033,1 @@\n-      z_csg(mark, unlocked_obj, oopDesc::mark_offset_in_bytes(), obj);\n+      z_csg(mark, unlocked_obj, mark_offset, obj);\n@@ -6029,1 +6038,1 @@\n-    z_lgf(top, Address(Z_thread, JavaThread::lock_stack_top_offset()));\n+    z_lgf(top, Address(Z_thread, ls_top_offset));\n@@ -6031,1 +6040,1 @@\n-    z_alsi(in_bytes(JavaThread::lock_stack_top_offset()), Z_thread, oopSize);\n+    z_alsi(in_bytes(ls_top_offset), Z_thread, oopSize);\n@@ -6042,1 +6051,1 @@\n-    z_lg(mark, Address(obj, oopDesc::mark_offset_in_bytes()));\n+    z_lg(mark, Address(obj, mark_offset));\n@@ -6054,1 +6063,1 @@\n-    z_lgf(top, Address(Z_thread, JavaThread::lock_stack_top_offset()));\n+    z_lgf(top, Address(Z_thread, ls_top_offset));\n@@ -6096,1 +6105,1 @@\n-    \/\/ The owner may be anonymous and we removed the last obj entry in\n+    \/\/ The owner may be anonymous, and we removed the last obj entry in\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":52,"deletions":43,"binary":false,"changes":95,"status":"modified"}]}