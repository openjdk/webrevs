{"files":[{"patch":"@@ -1439,1 +1439,1 @@\n-size_t ShenandoahHeap::trash_humongous_region_at(ShenandoahHeapRegion* start) {\n+size_t ShenandoahHeap::trash_humongous_region_at(ShenandoahHeapRegion* start) const {\n@@ -1442,4 +1442,11 @@\n-  oop humongous_obj = cast_to_oop(start->bottom());\n-  size_t size = humongous_obj->size();\n-  size_t required_regions = ShenandoahHeapRegion::required_regions(size * HeapWordSize);\n-  size_t index = start->index() + required_regions - 1;\n+  \/\/ Cannot access humongous_obj->size() in case class has been unloaded\n+  size_t required_regions = 1;\n+  size_t region_count = num_regions();\n+  for (size_t index = start->index() + 1; index < region_count; index++) {\n+    ShenandoahHeapRegion* region = get_region(index);\n+    if (region->is_humongous_continuation()) {\n+      required_regions++;\n+    } else {\n+      break;\n+    }\n+  }\n@@ -1447,0 +1454,1 @@\n+  size_t index = start->index() + required_regions - 1;\n@@ -1448,1 +1456,2 @@\n-\n+  \/\/ Reclaim from tail. Otherwise, assertion fails when printing region to trace log,\n+  \/\/ as it expects that every region belongs to a humongous region starting with a humongous start region.\n@@ -1450,2 +1459,0 @@\n-    \/\/ Reclaim from tail. Otherwise, assertion fails when printing region to trace log,\n-    \/\/ as it expects that every region belongs to a humongous region starting with a humongous start region.\n@@ -1453,1 +1460,0 @@\n-\n@@ -1456,1 +1462,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -841,1 +841,1 @@\n-  size_t trash_humongous_region_at(ShenandoahHeapRegion *r);\n+  size_t trash_humongous_region_at(ShenandoahHeapRegion *r) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}