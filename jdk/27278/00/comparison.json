{"files":[{"patch":"@@ -415,1 +415,1 @@\n-  if (cand_idx > _last_old_collection_candidate) {\n+  if ((ShenandoahGenerationalHumongousReserve > 0) && (cand_idx > _last_old_collection_candidate)) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -538,0 +538,2 @@\n+  const size_t pip_used_threshold = (ShenandoahHeapRegion::region_size_bytes() * ShenandoahGenerationalMinPIPUsage) \/ 100;\n+\n@@ -560,4 +562,2 @@\n-      if ((r->garbage() < old_garbage_threshold)) {\n-        \/\/ This tenure-worthy region has too little garbage, so we do not want to expend the copying effort to\n-        \/\/ reclaim the garbage; instead this region may be eligible for promotion-in-place to the\n-        \/\/ old generation.\n+      if ((r->garbage() < old_garbage_threshold) && (r->used() > pip_used_threshold)) {\n+        \/\/ We prefer to promote this region in place because is has a small amount of garbage and a large usage.\n@@ -589,1 +589,1 @@\n-        \/\/  and get_top_before_promote() != tams\n+        \/\/  used > pip_used_threshold, and get_top_before_promote() != tams\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -149,1 +149,7 @@\n-      promote_humongous(r);\n+\n+      \/\/ We do not promote primitive arrays because there's no performance penalty keeping them in young.  When\/if they\n+      \/\/ become garbage, reclaiming the memory from young is much quicker and more efficient than reclaiming them from old.\n+      oop obj = cast_to_oop(r->bottom());\n+      if (!obj->is_typeArray()) {\n+        promote_humongous(r);\n+      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1439,1 +1439,1 @@\n-size_t ShenandoahHeap::trash_humongous_region_at(ShenandoahHeapRegion* start) const {\n+size_t ShenandoahHeap::trash_humongous_region_at(ShenandoahHeapRegion* start) {\n@@ -1441,0 +1441,6 @@\n+\n+  oop humongous_obj = cast_to_oop(start->bottom());\n+  size_t size = humongous_obj->size();\n+  size_t required_regions = ShenandoahHeapRegion::required_regions(size * HeapWordSize);\n+  size_t index = start->index() + required_regions - 1;\n+\n@@ -1443,6 +1449,6 @@\n-  \/\/ Do not try to get the size of this humongous object. STW collections will\n-  \/\/ have already unloaded classes, so an unmarked object may have a bad klass pointer.\n-  ShenandoahHeapRegion* region = start;\n-  size_t index = region->index();\n-  do {\n-    assert(region->is_humongous(), \"Expect correct humongous start or continuation\");\n+  for(size_t i = 0; i < required_regions; i++) {\n+    \/\/ Reclaim from tail. Otherwise, assertion fails when printing region to trace log,\n+    \/\/ as it expects that every region belongs to a humongous region starting with a humongous start region.\n+    ShenandoahHeapRegion* region = get_region(index --);\n+\n+    assert(region->is_humongous(), \"expect correct humongous start or continuation\");\n@@ -1450,3 +1456,0 @@\n-    region->make_trash_immediate();\n-    region = get_region(++index);\n-  } while (region != nullptr && region->is_humongous_continuation());\n@@ -1454,2 +1457,3 @@\n-  \/\/ Return number of regions trashed\n-  return index - start->index();\n+    region->make_trash_immediate();\n+  }\n+  return required_regions;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -841,1 +841,1 @@\n-  size_t trash_humongous_region_at(ShenandoahHeapRegion *r) const;\n+  size_t trash_humongous_region_at(ShenandoahHeapRegion *r);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,14 @@\n+  product(uintx, ShenandoahGenerationalMinPIPUsage, 30, EXPERIMENTAL,       \\\n+          \"(Generational mode only) What percent of a heap region \"         \\\n+          \"should be used before we consider promoting a region in \"        \\\n+          \"place?  Regions with less than this amount of used will \"        \\\n+          \"promoted by evacuation.  A benefit of promoting in place \"       \\\n+          \"is that less work is required by the GC at the time the \"        \\\n+          \"region is promoted.  A disadvantage of promoting in place \"      \\\n+          \"is that this introduces fragmentation of old-gen memory, \"       \\\n+          \"with old-gen regions scattered throughout the heap.  Regions \"   \\\n+          \"that have been promoted in place may need to be evacuated at \"   \\\n+          \"a later time in order to compact old-gen memory to enable \"      \\\n+          \"future humongous allocations.\")                                  \\\n+          range(0,100)                                                      \\\n+                                                                            \\\n@@ -168,1 +182,1 @@\n-  product(uintx, ShenandoahOldGarbageThreshold, 15, EXPERIMENTAL,           \\\n+  product(uintx, ShenandoahOldGarbageThreshold, 25, EXPERIMENTAL,           \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"}]}