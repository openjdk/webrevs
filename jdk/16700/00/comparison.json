{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -3547,1 +3548,1 @@\n-  if (RewriteBytecodes && !UseSharedSpaces && !DumpSharedSpaces) {\n+  if (RewriteBytecodes && !UseSharedSpaces && !CDSConfig::is_dumping_static_archive()) {\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n@@ -342,1 +342,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n@@ -370,1 +370,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n@@ -645,1 +645,1 @@\n-  if (DumpSharedSpaces && (src_info->msotype() == MetaspaceObj::SymbolType)) {\n+  if (CDSConfig::is_dumping_static_archive() && (src_info->msotype() == MetaspaceObj::SymbolType)) {\n@@ -828,1 +828,1 @@\n-  assert(DumpSharedSpaces, \"sanity\");\n+  assert(CDSConfig::is_dumping_heap(), \"sanity\");\n@@ -919,1 +919,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n@@ -1241,1 +1241,1 @@\n-    log_info(cds, map)(\"%s CDS archive map for %s\", DumpSharedSpaces ? \"Static\" : \"Dynamic\", mapinfo->full_path());\n+    log_info(cds, map)(\"%s CDS archive map for %s\", CDSConfig::is_dumping_static_archive() ? \"Static\" : \"Dynamic\", mapinfo->full_path());\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+bool CDSConfig::_is_dumping_static_archive = false;\n@@ -40,4 +41,0 @@\n-bool CDSConfig::is_dumping_static_archive() {\n-  return DumpSharedSpaces;\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+  static bool _is_dumping_static_archive;\n@@ -41,1 +42,2 @@\n-  static bool      is_dumping_static_archive()               NOT_CDS_RETURN_(false);\n+  static bool      is_dumping_static_archive()               { return CDS_ONLY(_is_dumping_static_archive) NOT_CDS(false); }\n+  static void  enable_dumping_static_archive()               { CDS_ONLY(_is_dumping_static_archive = true); }\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -185,3 +186,3 @@\n-  if (!DumpSharedSpaces) {\n-    \/\/ The archive heap is not supported for the dynamic archive.\n-    return;\n+  if (CDSConfig::is_dumping_heap()) {\n+    int cache_index = cp->cp_to_object_index(cp_index);\n+    ConstantPool::string_at_impl(cp, cp_index, cache_index, CHECK);\n@@ -189,3 +190,0 @@\n-\n-  int cache_index = cp->cp_to_object_index(cp_index);\n-  ConstantPool::string_at_impl(cp, cp_index, cache_index, CHECK);\n","filename":"src\/hotspot\/share\/cds\/classPrelinker.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-  assert(DumpSharedSpaces, \"must\");\n+  assert(CDSConfig::is_dumping_static_archive(), \"cpp tables are only dumped into static archive\");\n@@ -287,1 +287,1 @@\n-  assert(DumpSharedSpaces, \"dump-time only\");\n+  assert(CDSConfig::is_dumping_static_archive(), \"cpp tables are only dumped into static archive\");\n","filename":"src\/hotspot\/share\/cds\/cppVtables.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+\n@@ -29,0 +30,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -220,1 +222,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-      if (DumpSharedSpaces) {\n+      if (CDSConfig::is_dumping_static_archive()) {\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-  assert(DumpSharedSpaces, \"should be called for dump time only\");\n+  assert(CDSConfig::is_dumping_static_archive(), \"sanity\");\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  assert(DumpSharedSpaces, \"this function is only used with -Xshare:dump\");\n+  assert(CDSConfig::is_dumping_static_archive(), \"this function is only used with -Xshare:dump\");\n","filename":"src\/hotspot\/share\/cds\/unregisteredClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5522,1 +5522,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n@@ -5853,1 +5853,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1132,1 +1132,1 @@\n-    if (!DumpSharedSpaces) {\n+    if (!CDSConfig::is_dumping_static_archive()) {\n@@ -1493,2 +1493,1 @@\n-    assert(!DumpSharedSpaces, \"DumpSharedSpaces not supported with exploded module builds\");\n-    assert(!CDSConfig::is_dumping_dynamic_archive(), \"not supported with exploded module builds\");\n+    assert(!CDSConfig::is_dumping_archive(), \"not supported with exploded module builds\");\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  assert(DumpSharedSpaces, \"must be\");\n+  assert(CDSConfig::is_dumping_full_module_graph(), \"must be\");\n@@ -83,1 +83,1 @@\n-  assert(DumpSharedSpaces, \"must be\");\n+  assert(CDSConfig::is_dumping_full_module_graph(), \"must be\");\n@@ -96,1 +96,1 @@\n-  assert(DumpSharedSpaces, \"must be\");\n+  assert(CDSConfig::is_dumping_full_module_graph(), \"must be\");\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataShared.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -279,5 +279,5 @@\n-  if (DumpSharedSpaces && AllowArchivingWithJavaAgent && classloader_type == ClassLoader::BOOT_LOADER &&\n-      classpath_index < 0 && HeapShared::can_write() && redefined) {\n-    \/\/ During static dump, classes for the built-in loaders are always loaded from\n-    \/\/ known locations (jimage, classpath or modulepath), so classpath_index should\n-    \/\/ always be >= 0.\n+  if (CDSConfig::is_dumping_heap() && AllowArchivingWithJavaAgent && classloader_type == ClassLoader::BOOT_LOADER &&\n+      classpath_index < 0 && redefined) {\n+    \/\/ When dumping the heap (which happens only during static dump), classes for the built-in\n+    \/\/ loaders are always loaded from known locations (jimage, classpath or modulepath),\n+    \/\/ so classpath_index should always be >= 0.\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -805,3 +805,1 @@\n-  \/\/ Can't use vmSymbols::string_signature() as fd->signature() may have been relocated\n-  \/\/ during DumpSharedSpaces\n-  assert(fd->signature()->equals(\"Ljava\/lang\/String;\"), \"just checking\");\n+  assert(fd->signature() == vmSymbols::string_signature(), \"just checking\");\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -491,1 +492,1 @@\n-  assert(DumpSharedSpaces, \"static dump only\");\n+  assert(CDSConfig::is_dumping_full_module_graph(), \"sanity\");\n@@ -579,1 +580,1 @@\n-  assert(DumpSharedSpaces, \"dump time only\");\n+  assert(CDSConfig::is_dumping_full_module_graph(), \"sanity\");\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -489,1 +489,0 @@\n-  assert(DumpSharedSpaces, \"must be\");\n@@ -644,1 +643,1 @@\n-  if (DumpSharedSpaces && Universe::is_module_initialized() && CDSConfig::is_dumping_full_module_graph()) {\n+  if (CDSConfig::is_dumping_full_module_graph() && Universe::is_module_initialized()) {\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -158,2 +158,3 @@\n-    if (DumpSharedSpaces) {\n-      \/\/ no deallocation is needed\n+    if (CDSConfig::is_dumping_static_archive()) {\n+      \/\/ We have allocated with MetaspaceShared::symbol_space_alloc(). No deallocation is needed.\n+      \/\/ Unreferenced Symbols will not be copied into the archive.\n@@ -186,1 +187,1 @@\n-    if (DumpSharedSpaces) {\n+    if (CDSConfig::is_dumping_static_archive()) {\n@@ -495,1 +496,1 @@\n-                                             (is_permanent || DumpSharedSpaces) ? PERM_REFCOUNT : 1);\n+                                             (is_permanent || CDSConfig::is_dumping_static_archive()) ? PERM_REFCOUNT : 1);\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -417,1 +417,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n@@ -881,1 +881,1 @@\n-  if (!DumpSharedSpaces) {\n+  if (!CDSConfig::is_dumping_static_archive()) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -463,1 +463,1 @@\n-  assert(DumpSharedSpaces, \"only when static dumping\");\n+  assert(CDSConfig::is_dumping_static_archive(), \"only when static dumping\");\n@@ -726,1 +726,1 @@\n-  assert(DumpSharedSpaces, \"static dump only\");\n+  assert(CDSConfig::is_dumping_heap(), \"sanity\");\n@@ -844,1 +844,1 @@\n-  assert(!DumpSharedSpaces && UseSharedSpaces, \"called at run time with CDS enabled only\");\n+  assert(!CDSConfig::is_dumping_static_archive() && UseSharedSpaces, \"called at run time with CDS enabled only\");\n@@ -895,1 +895,1 @@\n-  assert(!DumpSharedSpaces && UseSharedSpaces, \"called at run time with CDS enabled only\");\n+  assert(!CDSConfig::is_dumping_static_archive() && UseSharedSpaces, \"called at run time with CDS enabled only\");\n@@ -1005,1 +1005,1 @@\n-  assert(!DumpSharedSpaces && UseSharedSpaces, \"called at run time with CDS enabled only\");\n+  assert(!CDSConfig::is_dumping_static_archive() && UseSharedSpaces, \"called at run time with CDS enabled only\");\n@@ -1346,1 +1346,1 @@\n-  assert(DumpSharedSpaces, \"supported only when dumping\");\n+  assert(CDSConfig::is_dumping_static_archive(), \"class ID is used only for static dump (from classlist)\");\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -201,1 +202,1 @@\n-    \/\/ If DumpSharedSpaces is set then don't fall back to the old verifier on\n+    \/\/ If dumping static archive then don't fall back to the old verifier on\n@@ -206,1 +207,1 @@\n-    bool can_failover = !DumpSharedSpaces &&\n+    bool can_failover = !CDSConfig::is_dumping_static_archive() &&\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -176,1 +177,1 @@\n-  \/\/ When dumping the CDS archive we want to reduce fragmentation by\n+  \/\/ When dumping the CDS heap we want to reduce fragmentation by\n@@ -179,1 +180,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_heap()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -153,1 +154,1 @@\n-  return allow_retransforms() && (DumpSharedSpaces || can_retransform());\n+  return allow_retransforms() && (CDSConfig::is_dumping_static_archive() || can_retransform());\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -728,1 +729,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -118,1 +119,1 @@\n-  out->print_cr(\"CDS: %s\", (UseSharedSpaces ? \"on\" : (DumpSharedSpaces ? \"dump\" : \"off\")));\n+  out->print_cr(\"CDS: %s\", (UseSharedSpaces ? \"on\" : (CDSConfig::is_dumping_static_archive() ? \"dump\" : \"off\")));\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceReporter.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-  assert(DumpSharedSpaces, \"dump-time only\");\n+  assert(CDSConfig::is_dumping_heap(), \"sanity\");\n@@ -487,1 +487,1 @@\n-    if (DumpSharedSpaces) {\n+    if (CDSConfig::is_dumping_heap()) {\n@@ -807,2 +807,0 @@\n-  \/\/ Create memory for metadata.  Must be after initializing heap for\n-  \/\/ DumpSharedSpaces.\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -44,0 +45,4 @@\n+ArrayKlass::ArrayKlass() {\n+  assert(CDSConfig::is_dumping_static_archive() || UseSharedSpaces, \"only for CDS\");\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  ArrayKlass() { assert(DumpSharedSpaces || UseSharedSpaces, \"only for cds\"); }\n+  ArrayKlass();\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,0 +107,4 @@\n+ConstantPool::ConstantPool() {\n+  assert(CDSConfig::is_dumping_static_archive() || UseSharedSpaces, \"only for CDS\");\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-  ConstantPool() { assert(DumpSharedSpaces || UseSharedSpaces, \"only for CDS\"); }\n+  ConstantPool();\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -773,1 +773,1 @@\n-  assert(DumpSharedSpaces, \"called only during runtime\");\n+  assert(CDSConfig::is_dumping_heap(), \"sanity\");\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"cds\/cdsConfig.hpp\"\n+#include \"oops\/instanceClassLoaderKlass.hpp\"\n+\n+InstanceClassLoaderKlass::InstanceClassLoaderKlass() {\n+  assert(CDSConfig::is_dumping_static_archive() || UseSharedSpaces, \"only for CDS\");\n+}\n","filename":"src\/hotspot\/share\/oops\/instanceClassLoaderKlass.cpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -49,1 +49,1 @@\n-  InstanceClassLoaderKlass() { assert(DumpSharedSpaces || UseSharedSpaces, \"only for CDS\"); }\n+  InstanceClassLoaderKlass();\n","filename":"src\/hotspot\/share\/oops\/instanceClassLoaderKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -504,0 +504,4 @@\n+InstanceKlass::InstanceKlass() {\n+  assert(CDSConfig::is_dumping_static_archive() || UseSharedSpaces, \"only for CDS\");\n+}\n+\n@@ -825,2 +829,2 @@\n-  if (DumpSharedSpaces && SystemDictionaryShared::has_class_failed_verification(this)) {\n-    \/\/ This is for CDS dumping phase only -- we use the in_error_state to indicate that\n+  if (CDSConfig::is_dumping_static_archive() && SystemDictionaryShared::has_class_failed_verification(this)) {\n+    \/\/ This is for CDS static dump only -- we use the in_error_state to indicate that\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-  InstanceKlass() { assert(DumpSharedSpaces || UseSharedSpaces, \"only for CDS\"); }\n+  InstanceKlass();\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -42,0 +43,4 @@\n+InstanceMirrorKlass::InstanceMirrorKlass() {\n+  assert(CDSConfig::is_dumping_static_archive() || UseSharedSpaces, \"only for CDS\");\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  InstanceMirrorKlass() { assert(DumpSharedSpaces || UseSharedSpaces, \"only for CDS\"); }\n+  InstanceMirrorKlass();\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -33,0 +34,4 @@\n+InstanceRefKlass::InstanceRefKlass() {\n+  assert(CDSConfig::is_dumping_static_archive() || UseSharedSpaces, \"only for CDS\");\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  InstanceRefKlass() { assert(DumpSharedSpaces || UseSharedSpaces, \"only for CDS\"); }\n+  InstanceRefKlass();\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -54,0 +55,4 @@\n+InstanceStackChunkKlass::InstanceStackChunkKlass() {\n+  assert(CDSConfig::is_dumping_static_archive() || UseSharedSpaces, \"only for CDS\");\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  InstanceStackChunkKlass() { assert(DumpSharedSpaces || UseSharedSpaces, \"only for CDS\"); }\n+  InstanceStackChunkKlass();\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -198,0 +198,4 @@\n+Klass::Klass() : _kind(UnknownKlassKind) {\n+  assert(CDSConfig::is_dumping_static_archive() || UseSharedSpaces, \"only for cds\");\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -196,1 +196,0 @@\n-  \/\/ Constructor\n@@ -198,1 +197,1 @@\n-  Klass() : _kind(UnknownKlassKind) { assert(DumpSharedSpaces || UseSharedSpaces, \"only for cds\"); }\n+  Klass();\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2948,1 +2948,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n@@ -3706,1 +3706,2 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n+    \/\/ We do this so that the default CDS archive can be deterministic.\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2618,1 +2618,1 @@\n-      DumpSharedSpaces = true;\n+      CDSConfig::enable_dumping_static_archive();\n@@ -3039,1 +3039,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n@@ -3086,1 +3086,1 @@\n-  if (UseSharedSpaces && !DumpSharedSpaces && check_unsupported_cds_runtime_properties()) {\n+  if (UseSharedSpaces && check_unsupported_cds_runtime_properties()) {\n@@ -3367,1 +3367,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n@@ -3378,1 +3378,1 @@\n-  if (DumpSharedSpaces || UseSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive() || UseSharedSpaces) {\n@@ -3448,1 +3448,1 @@\n-    if (DumpSharedSpaces) {\n+    if (CDSConfig::is_dumping_static_archive()) {\n@@ -3470,1 +3470,1 @@\n-    if (DumpSharedSpaces) {\n+    if (CDSConfig::is_dumping_static_archive()) {\n@@ -3935,1 +3935,1 @@\n-  if (DumpSharedSpaces || RequireSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive() || RequireSharedSpaces) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -633,1 +634,1 @@\n-    \/\/ No need to fill with 0 because DumpSharedSpaces doesn't use these\n+    \/\/ No need to fill with 0 because CDS static dumping doesn't use these\n@@ -664,1 +665,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -460,1 +461,1 @@\n-    \/\/ Ignore modules for DumpSharedSpaces because we do not have any package\n+    \/\/ Ignore modules for -Xshare:dump because we do not have any package\n@@ -462,1 +463,1 @@\n-    if (DumpSharedSpaces) {\n+    if (CDSConfig::is_dumping_static_archive()) {\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -817,1 +818,1 @@\n-  if (DumpSharedSpaces) {\n+  if (CDSConfig::is_dumping_static_archive()) {\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-bool DumpSharedSpaces;\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -556,1 +556,0 @@\n-extern bool DumpSharedSpaces;\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}