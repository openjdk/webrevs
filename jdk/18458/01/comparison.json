{"files":[{"patch":"@@ -0,0 +1,211 @@\n+\/*\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8023392 8259232\n+ * @key printer\n+ * @modules java.desktop\/sun.swing\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Swing text components printed with spaces between chars\n+ * @run main\/manual bug8023392\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.font.TextAttribute;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.text.AttributedCharacterIterator;\n+import java.text.AttributedString;\n+\n+import javax.swing.Box;\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.border.LineBorder;\n+\n+import sun.swing.SwingUtilities2;\n+\n+public class bug8023392 {\n+    private static final String INSTRUCTIONS =\n+            \"\"\"\n+             A Frame containing several pairs of labels (a) and (b) is displayed.\n+             Labels of each pair look the same and are left-aligned (with spaces\n+             between chars).\n+             1. Hit the print button.\n+             2. Select any available printer (printing to file is also fine).\n+             3. Look at the printing result (paper, PDF, PS, etc.):\n+                 The (a) and (b) labels should look almost the same and the (a)\n+                 labels shouldn't appear as if they are stretched along X axis.\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame\n+                .builder()\n+                .title(\"bug8023392 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testUI(bug8023392::init)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JFrame init() {\n+        JFrame frame = new JFrame(\"Test Window\");\n+        frame.setLayout(new BorderLayout());\n+        frame.add(new SimplePrint2(), BorderLayout.CENTER);\n+        frame.pack();\n+        return frame;\n+    }\n+\n+    public static class SimplePrint2 extends JPanel\n+            implements ActionListener, Printable {\n+        JLabel label1;\n+        JLabel label2;\n+        JButton printButton;\n+\n+        public SimplePrint2() {\n+            setLayout(new BorderLayout());\n+            label1 = new JLabel(\"2a) a b c d e\" +\n+                    \"                         \");\n+            label2 = new JLabel(\"2b) a b c d e\");\n+\n+            Box p1 = new Box(BoxLayout.Y_AXIS);\n+            p1.add(label1);\n+            p1.add(label2);\n+            p1.add(new JLabel(\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\") {\n+                String s = \"3a) a b c d e                                     \";\n+                @Override\n+                protected void paintComponent(Graphics g) {\n+                    SwingUtilities2.drawChars(this, g, s.toCharArray(),\n+                            0, s.length(), 0, 15);\n+                }\n+            });\n+            p1.add(new JLabel(\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\") {\n+                String s = \"3b) a b c d e\";\n+                @Override\n+                protected void paintComponent(Graphics g) {\n+                    SwingUtilities2.drawChars(this, g, s.toCharArray(),\n+                            0, s.length(), 0, 15);\n+                }\n+            });\n+            p1.add(new JLabel(\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\") {\n+                String s = \"4a) a b c d e                                     \";\n+                AttributedCharacterIterator it;\n+                {\n+                    AttributedString as = new AttributedString(s);\n+                    as.addAttribute(TextAttribute.FONT, getFont());\n+                    as.addAttribute(TextAttribute.FOREGROUND, Color.RED, 3, 8);\n+                    it = as.getIterator();\n+                }\n+                @Override\n+                protected void paintComponent(Graphics g) {\n+                    SwingUtilities2.drawString(this, g, it, 0, 15);\n+                }\n+            });\n+\n+            p1.add(new JLabel(\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\") {\n+                String s = \"4b) a b c d e\";\n+                AttributedCharacterIterator it;\n+                {\n+                    AttributedString as = new AttributedString(s);\n+                    as.addAttribute(TextAttribute.FONT, getFont());\n+                    as.addAttribute(TextAttribute.FOREGROUND, Color.RED, 3, 8);\n+                    it = as.getIterator();\n+                }\n+                @Override\n+                protected void paintComponent(Graphics g) {\n+                    SwingUtilities2.drawString(this, g, it, 0, 15);\n+                }\n+            });\n+\n+            JPanel p2 = new JPanel();\n+            printButton = new JButton(\"Print\");\n+            printButton.addActionListener(this);\n+            p2.add(printButton);\n+\n+            Container c = this;\n+            c.add(p1, BorderLayout.CENTER);\n+            c.add(p2, BorderLayout.SOUTH);\n+\n+            String[] data = {\n+                    \"1a) \\u30aa\\u30f3\\u30e9\\u30a4\\u30f3\\u6d88\\u8fbc\" +\n+                    \"                                              \",\n+                    \"1b) \\u30aa\\u30f3\\u30e9\\u30a4\\u30f3\\u6d88\\u8fbc\"\n+            };\n+            JList l0 = new JList(data);\n+            l0.setVisibleRowCount(l0.getModel().getSize());\n+            JScrollPane jsp = new JScrollPane(l0);\n+            l0.setBorder(new LineBorder(Color.GRAY));\n+            c.add(jsp, BorderLayout.NORTH);\n+\n+            for (Component comp : new Component[]{label1, label2, printButton}) {\n+                comp.setFont(new Font(\"Monospaced\", 0, 16));\n+            }\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            PrinterJob job = PrinterJob.getPrinterJob();\n+            job.setPrintable(this);\n+            if (job.printDialog()) {\n+                try {\n+                    job.print();\n+                } catch (PrinterException ex) {\n+                    ex.printStackTrace();\n+                    String msg = \"PrinterException: \" + ex.getMessage();\n+                    PassFailJFrame.forceFail(msg);\n+                }\n+            }\n+        }\n+\n+        public int print(Graphics graphics,\n+                         PageFormat pageFormat,\n+                         int pageIndex)\n+                throws PrinterException {\n+            if (pageIndex >= 1) {\n+                return Printable.NO_SUCH_PAGE;\n+            }\n+            double imgX = pageFormat.getImageableX();\n+            double imgY = pageFormat.getImageableY();\n+            ((Graphics2D)graphics).translate(imgX, imgY);\n+            this.paint(graphics);\n+            return Printable.PAGE_EXISTS;\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/print\/bug8023392.java","additions":211,"deletions":0,"binary":false,"changes":211,"status":"added"},{"patch":"@@ -1,44 +0,0 @@\n-<!--\n- Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n- This code is free software; you can redistribute it and\/or modify it\n- under the terms of the GNU General Public License version 2 only, as\n- published by the Free Software Foundation.\n-\n- This code is distributed in the hope that it will be useful, but WITHOUT\n- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- version 2 for more details (a copy is included in the LICENSE file that\n- accompanied this code).\n-\n- You should have received a copy of the GNU General Public License version\n- 2 along with this work; if not, write to the Free Software Foundation,\n- Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n- Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- or visit www.oracle.com if you need additional information or have any\n- questions.\n--->\n-\n-<html>\n-<!--\n-  @test\n-  @bug 8023392\n-  @summary Swing text components printed with spaces between chars\n-  @key printer\n-  @modules java.desktop\/sun.swing\n-  @run applet\/manual=yesno bug8023392.html\n-  -->\n-<head>\n-    <title> Bug 8023392 <\/title>\n-<\/head>\n-<body>\n-\n-<h1>Bug ID: 8023392<\/h1>\n-\n-<p> See the dialog box (usually in upper left corner) for instructions<\/p>\n-\n-<APPLET CODE=\"bug8023392.class\" WIDTH=400 HEIGHT=400><\/APPLET>\n-<\/body>\n-<\/html>\n","filename":"test\/jdk\/java\/awt\/print\/bug8023392\/bug8023392.html","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,287 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n-  test\n-  @bug 8023392 8259232\n-  @summary Swing text components printed with spaces between chars\n-  @key printer\n-  @run applet\/manual=yesno bug8023392.html\n-*\/\n-\n-import javax.swing.*;\n-import javax.swing.border.LineBorder;\n-import java.applet.Applet;\n-import java.awt.*;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n-import java.awt.font.TextAttribute;\n-import java.awt.print.PageFormat;\n-import java.awt.print.Printable;\n-import java.awt.print.PrinterException;\n-import java.awt.print.PrinterJob;\n-import java.text.AttributedCharacterIterator;\n-import java.text.AttributedString;\n-\n-\n-public class bug8023392 extends Applet {\n-    static final String[] instructions = {\n-        \"Please select the RadioButton for applet size labeled \\\"variable\\\" radiobutton in test harness window.\",\n-        \"A Frame containing several pairs of labels ((a) and (b)) is displayed.\",\n-        \"Labels of each pair look the same and are left-aligned (with spaces \",\n-        \"between chars).\",\n-        \"1. Hit the print button.\",\n-        \"2. Select any available printer (printing to file is also fine).\",\n-        \"3. Look at the printing result (paper, PDF, PS, etc.):\",\n-        \"   The (a) and (b) labels should look almost the same and the (a) labels\",\n-        \"   shouldn't appear as if they are stretched along X axis.\"};\n-\n-    public void init() {\n-        this.setLayout(new BorderLayout());\n-        add(new SimplePrint2(), BorderLayout.CENTER);\n-\n-        Sysout.createDialogWithInstructions(instructions);\n-\n-    }\n-\n-    public static class SimplePrint2 extends JPanel\n-            implements ActionListener, Printable {\n-        JLabel label1;\n-        JLabel label2;\n-        JButton printButton;\n-\n-\n-        public SimplePrint2() {\n-            setLayout(new BorderLayout());\n-            label1 = new JLabel(\"2a) a b c d e\" +\n-                    \"                         \");\n-            label2 = new JLabel(\"2b) a b c d e\");\n-\n-            Box p1 = new Box(BoxLayout.Y_AXIS);\n-            p1.add(label1);\n-            p1.add(label2);\n-            p1.add(new JLabel(\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\") {\n-                String s = \"3a) a b c d e                                     \";\n-                @Override\n-                protected void paintComponent(Graphics g) {\n-                    sun.swing.SwingUtilities2.drawChars(this, g, s.toCharArray(),\n-                            0, s.length(), 0, 15);\n-                }\n-            });\n-            p1.add(new JLabel(\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\") {\n-                String s = \"3b) a b c d e\";\n-                @Override\n-                protected void paintComponent(Graphics g) {\n-                    sun.swing.SwingUtilities2.drawChars(this, g, s.toCharArray(),\n-                            0, s.length(), 0, 15);\n-                }\n-            });\n-            p1.add(new JLabel(\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\") {\n-                String s = \"4a) a b c d e                                     \";\n-                AttributedCharacterIterator it;\n-                {\n-                    AttributedString as = new AttributedString(s);\n-                    as.addAttribute(TextAttribute.FONT, getFont());\n-                    as.addAttribute(TextAttribute.FOREGROUND, Color.RED, 3, 8);\n-                    it = as.getIterator();\n-                }\n-                @Override\n-                protected void paintComponent(Graphics g) {\n-                    sun.swing.SwingUtilities2.drawString(this, g, it, 0, 15);\n-                }\n-            });\n-\n-            p1.add(new JLabel(\"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\") {\n-                String s = \"4b) a b c d e\";\n-                AttributedCharacterIterator it;\n-                {\n-                    AttributedString as = new AttributedString(s);\n-                    as.addAttribute(TextAttribute.FONT, getFont());\n-                    as.addAttribute(TextAttribute.FOREGROUND, Color.RED, 3, 8);\n-                    it = as.getIterator();\n-                }\n-                @Override\n-                protected void paintComponent(Graphics g) {\n-                    sun.swing.SwingUtilities2.drawString(this, g, it, 0, 15);\n-                }\n-            });\n-\n-            JPanel p2 = new JPanel();\n-            printButton = new JButton(\"Print\");\n-            printButton.addActionListener(this);\n-            p2.add(printButton);\n-\n-            Container c = this;\n-            c.add(p1, BorderLayout.CENTER);\n-            c.add(p2, BorderLayout.SOUTH);\n-\n-            String[] data = {\n-                    \"1a) \\u30aa\\u30f3\\u30e9\\u30a4\\u30f3\\u6d88\\u8fbc\" +\n-                    \"                                              \",\n-                    \"1b) \\u30aa\\u30f3\\u30e9\\u30a4\\u30f3\\u6d88\\u8fbc\"\n-            };\n-            JList l0 = new JList(data);\n-            l0.setVisibleRowCount(l0.getModel().getSize());\n-            JScrollPane jsp = new JScrollPane(l0);\n-            l0.setBorder(new LineBorder(Color.GRAY));\n-            c.add(jsp, BorderLayout.NORTH);\n-\n-            for (Component comp : new Component[]{label1, label2, printButton}) {\n-                comp.setFont(new Font(\"Monospaced\", 0, 16));\n-            }\n-        }\n-\n-        public void actionPerformed(ActionEvent e) {\n-            PrinterJob job = PrinterJob.getPrinterJob();\n-            job.setPrintable(this);\n-            if (job.printDialog()) {\n-                try {\n-                    job.print();\n-                } catch (PrinterException ex) {\n-                    ex.printStackTrace();\n-                }\n-            }\n-        }\n-\n-        public int print(Graphics graphics,\n-                         PageFormat pageFormat,\n-                         int pageIndex)\n-                throws PrinterException {\n-            if (pageIndex >= 1) {\n-                return Printable.NO_SUCH_PAGE;\n-            }\n-            double imgX = pageFormat.getImageableX();\n-            double imgY = pageFormat.getImageableY();\n-            ((Graphics2D)graphics).translate(imgX, imgY);\n-            this.paint(graphics);\n-            return Printable.PAGE_EXISTS;\n-        }\n-    }\n-}\n-\n-\n-\/**\n- * *************************************************\n- * Standard Test Machinery\n- * DO NOT modify anything below -- it's a standard\n- * chunk of code whose purpose is to make user\n- * interaction uniform, and thereby make it simpler\n- * to read and understand someone else's test.\n- * **************************************************\n- *\/\n-class Sysout {\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions(String[] instructions) {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        dialog.printInstructions(instructions);\n-        dialog.show();\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-    public static void createDialog() {\n-        dialog = new TestDialog(new Frame(), \"Instructions\");\n-        String[] defInstr = {\"Instructions will appear here. \", \"\"};\n-        dialog.printInstructions(defInstr);\n-        dialog.show();\n-        println(\"Any messages for the tester will display here.\");\n-    }\n-\n-\n-    public static void printInstructions(String[] instructions) {\n-        dialog.printInstructions(instructions);\n-    }\n-\n-\n-    public static void println(String messageIn) {\n-        dialog.displayMessage(messageIn);\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\n-class TestDialog extends Dialog {\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog(Frame frame, String name) {\n-        super(frame, name);\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea(\"\", 15, maxStringLength, scrollBoth);\n-        add(\"North\", instructionsText);\n-\n-        messageText = new TextArea(\"\", 5, maxStringLength, scrollBoth);\n-        add(\"South\", messageText);\n-\n-        pack();\n-\n-        show();\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions(String[] instructions) {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText(\"\");\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for (int i = 0; i < instructions.length; i++) {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[i];\n-            while (remainingStr.length() > 0) {\n-                \/\/if longer than max then chop off first max chars to print\n-                if (remainingStr.length() >= maxStringLength) {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                            lastIndexOf(' ', maxStringLength - 1);\n-\n-                    if (posOfSpace <= 0) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring(0, posOfSpace + 1);\n-                    remainingStr = remainingStr.substring(posOfSpace + 1);\n-                }\n-                \/\/else just print\n-                else {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append(printStr + \"\\n\");\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage(String messageIn) {\n-        messageText.append(messageIn + \"\\n\");\n-    }\n-\n-}\/\/ TestDialog  class\n-\n","filename":"test\/jdk\/java\/awt\/print\/bug8023392\/bug8023392.java","additions":0,"deletions":287,"binary":false,"changes":287,"status":"deleted"}]}