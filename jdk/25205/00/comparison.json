{"files":[{"patch":"@@ -51,2 +51,5 @@\n-     * Returns the type for which to check.\n-     * @return the type\n+     * Returns the type for which to check, or {@code null} if this instanceof\n+     * uses a pattern other the {@link BindingPatternTree}.\n+     *\n+     * @return the type or {@code null} if this instanceof uses a pattern other than\n+     *         the {@linkplain BindingPatternTree}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/InstanceOfTree.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8348906\n+ * @summary Verify the InstanceOfTree model\n+ *\/\n+\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.InstanceOfTree;\n+import com.sun.source.util.JavacTask;\n+import com.sun.source.util.TreeScanner;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.ToolProvider;\n+\n+public class InstanceOfModelTest {\n+    private final JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+\n+    public static void main(String... args) throws Exception {\n+        new InstanceOfModelTest().run();\n+    }\n+\n+    private void run() throws Exception {\n+        JavaFileObject input =\n+                SimpleJavaFileObject.forSource(URI.create(\"mem:\/\/Test.java\"),\n+                                               \"\"\"\n+                                               public class Test {\n+                                                   void test(Object o) {\n+                                                       boolean _ = o instanceof R;\n+                                                       boolean _ = o instanceof R r;\n+                                                       boolean _ = o instanceof R(var v);\n+                                                   }\n+                                                   record R(int i) {}\n+                                               }\n+                                               \"\"\");\n+        JavacTask task =\n+                (JavacTask) compiler.getTask(null, null, null, null, null, List.of(input));\n+        CompilationUnitTree cut = task.parse().iterator().next();\n+\n+        task.analyze();\n+\n+        List<String> instanceOf = new ArrayList<>();\n+\n+        new TreeScanner<Void, Void>() {\n+            @Override\n+            public Void visitInstanceOf(InstanceOfTree node, Void p) {\n+                instanceOf.add(node.getPattern() + \":\" + node.getType());\n+                return super.visitInstanceOf(node, p);\n+            }\n+        }.scan(cut, null);\n+\n+        List<String> expectedInstanceOf = List.of(\n+            \"null:R\",\n+            \"R r:R\",\n+            \"R(int v):null\"\n+        );\n+\n+        if (!Objects.equals(expectedInstanceOf, instanceOf)) {\n+            throw new AssertionError(\"Expected: \" + expectedInstanceOf + \",\\n\" +\n+                                     \"got: \" + instanceOf);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/InstanceOfModelTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}