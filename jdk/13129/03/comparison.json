{"files":[{"patch":"@@ -212,1 +212,1 @@\n-  SystemDictionary::add_to_hierarchy(THREAD, result);\n+  result->add_to_hierarchy(THREAD);\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1071,1 +1071,1 @@\n-    \/\/ Prevent SystemDictionary::add_to_hierarchy from running\n+    \/\/ Prevent InstanceKlass::add_to_hierarchy from running\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-#include \"code\/codeCache.hpp\"\n@@ -73,1 +72,0 @@\n-#include \"runtime\/deoptimization.hpp\"\n@@ -834,1 +832,1 @@\n-  add_to_hierarchy(THREAD, k);\n+  k->add_to_hierarchy(THREAD);\n@@ -1421,1 +1419,1 @@\n-  add_to_hierarchy(THREAD, k);\n+  k->add_to_hierarchy(THREAD);\n@@ -1539,43 +1537,0 @@\n-\/\/ ----------------------------------------------------------------------------\n-\/\/ Update hierarchy. This is done before the new klass has been added to the SystemDictionary. The Compile_lock\n-\/\/ is grabbed, to ensure that the compiler is not using the class hierarchy.\n-\n-void SystemDictionary::add_to_hierarchy(JavaThread* current, InstanceKlass* k) {\n-  assert(k != nullptr, \"just checking\");\n-  assert(!SafepointSynchronize::is_at_safepoint(), \"must NOT be at safepoint\");\n-\n-  \/\/ In case we are not using CHA based vtables we need to make sure the loaded\n-  \/\/ deopt is completed before anyone links this class.\n-  \/\/ Linking is done with _init_monitor held, by loading and deopting with it\n-  \/\/ held we make sure the deopt is completed before linking.\n-  if (!UseVtableBasedCHA) {\n-    k->init_monitor()->lock();\n-  }\n-\n-  DeoptimizationScope deopt_scope;\n-  {\n-    MutexLocker ml(current, Compile_lock);\n-\n-    k->set_init_state(InstanceKlass::loaded);\n-    \/\/ make sure init_state store is already done.\n-    \/\/ The compiler reads the hierarchy outside of the Compile_lock.\n-    \/\/ Access ordering is used to add to hierarchy.\n-\n-    \/\/ Link into hierarchy.\n-    k->append_to_sibling_list();                    \/\/ add to superklass\/sibling list\n-    k->process_interfaces();                        \/\/ handle all \"implements\" declarations\n-\n-    \/\/ Now mark all code that depended on old class hierarchy.\n-    \/\/ Note: must be done *after* linking k into the hierarchy (was bug 12\/9\/97)\n-    if (Universe::is_fully_initialized()) {\n-      CodeCache::mark_dependents_on(&deopt_scope, k);\n-    }\n-  }\n-  \/\/ Perform the deopt handshake outside Compile_lock.\n-  deopt_scope.deoptimize_marked();\n-\n-  if (!UseVtableBasedCHA) {\n-    k->init_monitor()->unlock();\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":2,"deletions":47,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -363,2 +363,0 @@\n-  \/\/ Setup link to hierarchy and deoptimize\n-  static void add_to_hierarchy(JavaThread* current, InstanceKlass* k);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -855,1 +855,1 @@\n-  SystemDictionary::add_to_hierarchy(THREAD, loaded_lambda);\n+  loaded_lambda->add_to_hierarchy(THREAD);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-  SystemDictionary::add_to_hierarchy(THREAD, klass);\n+  klass->add_to_hierarchy(THREAD);\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2123,1 +2123,1 @@\n-    \/\/ Prevent SystemDictionary::add_to_hierarchy from running\n+    \/\/ Prevent InstanceKlass::add_to_hierarchy from running\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1208,0 +1208,40 @@\n+\/\/ Update hierarchy. This is done before the new klass has been added to the SystemDictionary. The Compile_lock\n+\/\/ is grabbed, to ensure that the compiler is not using the class hierarchy.\n+void InstanceKlass::add_to_hierarchy(JavaThread* current) {\n+  assert(!SafepointSynchronize::is_at_safepoint(), \"must NOT be at safepoint\");\n+\n+  \/\/ In case we are not using CHA based vtables we need to make sure the loaded\n+  \/\/ deopt is completed before anyone links this class.\n+  \/\/ Linking is done with _init_monitor held, by loading and deopting with it\n+  \/\/ held we make sure the deopt is completed before linking.\n+  if (!UseVtableBasedCHA) {\n+    init_monitor()->lock();\n+  }\n+\n+  DeoptimizationScope deopt_scope;\n+  {\n+    MutexLocker ml(current, Compile_lock);\n+\n+    set_init_state(InstanceKlass::loaded);\n+    \/\/ make sure init_state store is already done.\n+    \/\/ The compiler reads the hierarchy outside of the Compile_lock.\n+    \/\/ Access ordering is used to add to hierarchy.\n+\n+    \/\/ Link into hierarchy.\n+    append_to_sibling_list();                    \/\/ add to superklass\/sibling list\n+    process_interfaces();                        \/\/ handle all \"implements\" declarations\n+\n+    \/\/ Now mark all code that depended on old class hierarchy.\n+    \/\/ Note: must be done *after* linking k into the hierarchy (was bug 12\/9\/97)\n+    if (Universe::is_fully_initialized()) {\n+      CodeCache::mark_dependents_on(&deopt_scope, this);\n+    }\n+  }\n+  \/\/ Perform the deopt handshake outside Compile_lock.\n+  deopt_scope.deoptimize_marked();\n+\n+  if (!UseVtableBasedCHA) {\n+    init_monitor()->unlock();\n+  }\n+}\n+\n@@ -2515,1 +2555,1 @@\n-  \/\/ being added to class hierarchy (see SystemDictionary:::add_to_hierarchy()).\n+  \/\/ being added to class hierarchy (see InstanceKlass:::add_to_hierarchy()).\n@@ -2589,1 +2629,1 @@\n-  \/\/ SystemDictionary::add_to_hierarchy() sets the init_state to loaded\n+  \/\/ InstanceKlass::add_to_hierarchy() sets the init_state to loaded\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":42,"deletions":2,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -859,0 +859,2 @@\n+  \/\/ Setup link to hierarchy and deoptimize\n+  void add_to_hierarchy(JavaThread* current);\n@@ -895,0 +897,1 @@\n+ private:\n@@ -898,0 +901,1 @@\n+ public:\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}