{"files":[{"patch":"@@ -180,1 +180,1 @@\n-                    return true;\n+                    return false;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/ExecutionControlForwarder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -73,0 +74,2 @@\n+    private static final int SHUTDOWN_TIMEOUT = 1; \/\/1 second\n+\n@@ -270,0 +273,14 @@\n+\n+        Process remoteProcess;\n+\n+        synchronized (this) {\n+            remoteProcess = this.process;\n+        }\n+\n+        if (remoteProcess != null) {\n+            try {\n+                remoteProcess.waitFor(SHUTDOWN_TIMEOUT, TimeUnit.SECONDS);\n+            } catch (InterruptedException ex) {\n+                debug(ex, \"waitFor remote\");\n+            }\n+        }\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/JdiDefaultExecutionControl.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -31,0 +31,5 @@\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n@@ -38,0 +43,2 @@\n+import static org.testng.Assert.assertFalse;\n+import org.testng.annotations.BeforeMethod;\n@@ -39,1 +46,0 @@\n-@Test\n@@ -56,0 +62,1 @@\n+    @Test\n@@ -63,0 +70,1 @@\n+    @Test\n@@ -71,0 +79,1 @@\n+    @Test\n@@ -121,0 +130,45 @@\n+    @Test\n+    public void testRunShutdownHooks() throws IOException {\n+        Path temporary = Paths.get(\"temp\");\n+        Files.newOutputStream(temporary).close();\n+        assertEval(\"import java.io.*;\");\n+        assertEval(\"import java.nio.file.*;\");\n+        assertEval(\"\"\"\n+                        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+                            try {\n+                                Files.delete(Paths.get(\"$TEMPORARY\"));\n+                            } catch (IOException ex) {\n+                                \/\/ignored\n+                            }\n+                        }))\n+                        \"\"\".replace(\"$TEMPORARY\", temporary.toAbsolutePath()\n+                                                           .toString()\n+                                                           .replace(\"\\\\\", \"\\\\\\\\\")));\n+        getState().close();\n+        assertFalse(Files.exists(temporary));\n+    }\n+\n+    private Method currentTestMethod;\n+\n+    @BeforeMethod\n+    public void setUp(Method testMethod) {\n+        currentTestMethod = testMethod;\n+        super.setUp();\n+    }\n+\n+    @BeforeMethod\n+    public void setUp() {\n+    }\n+\n+    @Override\n+    public void setUp(Consumer<JShell.Builder> bc) {\n+        Consumer<JShell.Builder> augmentedBuilder = switch (currentTestMethod.getName()) {\n+            case \"testRunShutdownHooks\" -> builder -> {\n+                builder.executionEngine(Presets.TEST_STANDARD_EXECUTION);\n+                bc.accept(builder);\n+            };\n+            default -> bc;\n+        };\n+        super.setUp(augmentedBuilder);\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/ShutdownTest.java","additions":55,"deletions":1,"binary":false,"changes":56,"status":"modified"}]}