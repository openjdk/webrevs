{"files":[{"patch":"@@ -411,5 +411,0 @@\n-                \/\/ requires transitive java.base is illegal unless:\n-                \/\/ - the major version is 53 (JDK 9), or:\n-                \/\/ - the classfile is a preview classfile, or:\n-                \/\/ - the module is deemed to be participating in preview\n-                \/\/   (i.e. the module is a java.* module)\n@@ -419,10 +414,2 @@\n-                    && ((mods.contains(Requires.Modifier.TRANSITIVE)\n-                         && !isPreview\n-                         && !\"java.se\".equals(mn))\n-                        || mods.contains(Requires.Modifier.STATIC))) {\n-                    String flagName;\n-                    if (mods.contains(Requires.Modifier.STATIC)) {\n-                        flagName = \"ACC_STATIC_PHASE\";\n-                    } else {\n-                        flagName = \"ACC_TRANSITIVE\";\n-                    }\n+                    && mods.contains(Requires.Modifier.STATIC)) {\n+                    String flagName = \"ACC_STATIC_PHASE\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfo.java","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -156,3 +156,1 @@\n-                .anyMatch(ed -> ed.modules.contains(m)) ||\n-               \/\/the specification lists the java.se module as participating in preview:\n-               m.name == names.java_se;\n+                .anyMatch(ed -> ed.modules.contains(m));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1205,5 +1205,0 @@\n-                                if (flags.contains(RequiresFlag.TRANSITIVE) &&\n-                                    (majorVersion != Version.MAX().major || !previewClassFile) &&\n-                                    !preview.participatesInPreview(syms, msym)) {\n-                                    throw badClassFile(\"bad.requires.flag\", RequiresFlag.TRANSITIVE);\n-                                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -134,0 +134,1 @@\n+import javax.lang.model.SourceVersion;\n@@ -645,1 +646,4 @@\n-                initialStartup = Startup.unpack(packedStartup, preview, new InitMessageHandler());\n+                int sourceLevel = detectSourceLevel(options.valuesOf(argC)\n+                                                           .toArray(String[]::new));\n+                initialStartup = Startup.unpack(packedStartup, sourceLevel,\n+                                                preview, new InitMessageHandler());\n@@ -2311,1 +2315,2 @@\n-            startup = Startup.defaultStartup(preview, this);\n+            int sourceLevel = detectSourceLevel(options.compilerOptions());\n+            startup = Startup.defaultStartup(sourceLevel, preview, this);\n@@ -2329,1 +2334,2 @@\n-            Startup retainedStart = Startup.unpack(retained, preview, this);\n+            int sourceLevel = detectSourceLevel(options.compilerOptions());\n+            Startup retainedStart = Startup.unpack(retained, sourceLevel, preview, this);\n@@ -2346,0 +2352,13 @@\n+    private int detectSourceLevel(String[] compilerOptions) {\n+        for (int i = 0; i < compilerOptions.length; i++) {\n+            switch (compilerOptions[i]) {\n+                case \"-source\", \"--source\", \"--release\":\n+                    if (i + 1 < compilerOptions.length) {\n+                        return Integer.parseInt(compilerOptions[i + 1]);\n+                    }\n+            }\n+        }\n+\n+        return SourceVersion.latest().runtimeVersion().feature();\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/JShellTool.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -121,0 +121,1 @@\n+    private static final String DEFAULT_24_STARTUP_NAME = \"DEFAULT_24\";\n@@ -126,1 +127,2 @@\n-        null  \/\/preview  startup\n+        null, \/\/JDK 24 and older startup\n+        null  \/\/preview startup\n@@ -174,0 +176,1 @@\n+                                  sue.name.equals(DEFAULT_24_STARTUP_NAME) ||\n@@ -225,1 +228,1 @@\n-    static Startup unpack(String storedForm, boolean preview, MessageHandler mh) {\n+    static Startup unpack(String storedForm, int sourceLevel, boolean preview, MessageHandler mh) {\n@@ -246,5 +249,9 @@\n-                        if (isBuiltIn) {\n-                            \/\/ update to current definition, use stored if removed\/error\n-                            String resource = getResource(name);\n-                            if (resource != null) {\n-                                content = resource;\n+                        if (isBuiltIn && DEFAULT_STARTUP_NAME.equals(name)) {\n+                            e.addAll(defaultStartup(sourceLevel, preview, mh).entries);\n+                        } else {\n+                            if (isBuiltIn) {\n+                                \/\/ update to current definition, use stored if removed\/error\n+                                String resource = getResource(name);\n+                                if (resource != null) {\n+                                    content = resource;\n+                                }\n@@ -252,0 +259,1 @@\n+                            e.add(new StartupEntry(isBuiltIn, name, content, timeStamp));\n@@ -253,1 +261,0 @@\n-                        e.add(new StartupEntry(isBuiltIn, name, content, timeStamp));\n@@ -263,1 +270,1 @@\n-        return defaultStartup(preview, mh);\n+        return defaultStartup(sourceLevel, preview, mh);\n@@ -332,2 +339,3 @@\n-    static Startup defaultStartup(boolean preview, MessageHandler mh) {\n-        int idx = preview ? 1 : 0;\n+    static Startup defaultStartup(int sourceLevel, boolean preview, MessageHandler mh) {\n+        boolean startup24 = sourceLevel < 25;\n+        int idx = preview ? 2 : startup24 ? 1 : 0;\n@@ -339,1 +347,2 @@\n-                                      : DEFAULT_STARTUP_NAME;\n+                                      : startup24 ? DEFAULT_24_STARTUP_NAME\n+                                                  : DEFAULT_STARTUP_NAME;\n@@ -343,1 +352,1 @@\n-                    new StartupEntry(true, resourceName, content));\n+                    new StartupEntry(true, DEFAULT_STARTUP_NAME, content));\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/Startup.java","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -39,0 +39,7 @@\n+import javax.lang.model.element.ModuleElement;\n+import javax.lang.model.element.ModuleElement.ExportsDirective;\n+import javax.lang.model.element.ModuleElement.RequiresDirective;\n+import javax.lang.model.util.ElementFilter;\n+\n+import jdk.jshell.Snippet.SubKind;\n+import jdk.jshell.TaskFactory.AnalyzeTask;\n@@ -54,0 +61,1 @@\n+    private final Map<String, Set<String>> module2PackagesForImport = new HashMap<>();\n@@ -189,0 +197,7 @@\n+        Stream<String> mods = importSnippets()\n+                               .filter(isi -> isi.subKind() == SubKind.MODULE_IMPORT_SUBKIND)\n+                               .map(isi -> isi.fullname)\n+                               .flatMap(this::module2PackagesForImport);\n+        if (mods.anyMatch(pkg::equals)) {\n+            return full.substring(pkg.length() + 1);\n+        }\n@@ -201,0 +216,34 @@\n+\n+    private Stream<String> module2PackagesForImport(String module) {\n+        return module2PackagesForImport.computeIfAbsent(module, mod -> {\n+            return state.taskFactory\n+                        .analyze(new OuterWrap(Wrap.identityWrap(\" \")),\n+                                 at -> computeImports(at, mod));\n+        }).stream();\n+    }\n+\n+    private Set<String> computeImports(AnalyzeTask at, String mod) {\n+        List<ModuleElement> todo = new ArrayList<>();\n+        Set<ModuleElement> seenModules = new HashSet<>();\n+        Set<String> exportedPackages = new HashSet<>();\n+        todo.add(at.getElements().getModuleElement(mod));\n+        while (!todo.isEmpty()) {\n+            ModuleElement current = todo.remove(todo.size() - 1);\n+            if (current == null || !seenModules.add(current)) {\n+                continue;\n+            }\n+            for (ExportsDirective exp : ElementFilter.exportsIn(current.getDirectives())) {\n+                if (exp.getTargetModules() != null) {\n+                    continue;\n+                }\n+                exportedPackages.add(exp.getPackage().getQualifiedName().toString());\n+            }\n+            for (RequiresDirective req : ElementFilter.requiresIn(current.getDirectives())) {\n+                if (!req.isTransitive()) {\n+                    continue;\n+                }\n+                todo.add(req.getDependency());\n+            }\n+        }\n+        return exportedPackages;\n+    }\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SnippetMaps.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1,10 +1,1 @@\n-import java.io.*;\n-import java.math.*;\n-import java.net.*;\n-import java.nio.file.*;\n-import java.util.*;\n-import java.util.concurrent.*;\n-import java.util.function.*;\n-import java.util.prefs.*;\n-import java.util.regex.*;\n-import java.util.stream.*;\n+import module java.base;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/tool\/resources\/DEFAULT.jsh","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/tool\/resources\/DEFAULT_24.jsh","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/tool\/resources\/DEFAULT.jsh","status":"copied"},{"patch":"@@ -81,0 +81,1 @@\n+            result.add(new Object[]{ 44 + i, 0, Set.of(TRANSITIVE)});\n@@ -113,1 +114,0 @@\n-            result.add(new Object[]{i + 44, 0, Set.of(TRANSITIVE)});\n","filename":"test\/jdk\/java\/lang\/module\/ClassFileVersionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1526,1 +1526,0 @@\n-    @Test(expectedExceptions = InvalidModuleDescriptorException.class)\n@@ -1539,1 +1538,0 @@\n-    @Test(expectedExceptions = InvalidModuleDescriptorException.class)\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,13 +60,2 @@\n-    final static List<ImportInfo> START_UP_IMPORTS = Stream.of(\n-                    \"java.io.*\",\n-                    \"java.math.*\",\n-                    \"java.net.*\",\n-                    \"java.nio.file.*\",\n-                    \"java.util.*\",\n-                    \"java.util.concurrent.*\",\n-                    \"java.util.function.*\",\n-                    \"java.util.prefs.*\",\n-                    \"java.util.regex.*\",\n-                    \"java.util.stream.*\")\n-                    .map(s -> new ImportInfo(\"import \" + s + \";\", \"\", s))\n-                    .collect(toList());\n+    final static List<ImportInfo> START_UP_IMPORTS = List.of(\n+            new ImportInfo(\"import module java.base;\", \"\", \"java.base\"));\n","filename":"test\/langtools\/jdk\/jshell\/ReplToolTesting.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.util.Map;\n@@ -67,0 +68,1 @@\n+    private Map<String, String> testPersistence;\n@@ -76,1 +78,2 @@\n-                .persistence(new HashMap<>())\n+                .persistence(testPersistence != null ? testPersistence\n+                                                     : new HashMap<>())\n@@ -82,0 +85,6 @@\n+        cmdout.reset();\n+        cmderr.reset();\n+        console.reset();\n+        userout.reset();\n+        usererr.reset();\n+\n@@ -133,0 +142,11 @@\n+        check(cmderr, null, \"cmderr\");\n+        check(usererr, null, \"usererr\");\n+    }\n+\n+    protected void startCheckCommandUserOutput(Consumer<String> checkCommandOutput,\n+            Consumer<String> checkUserOutput,\n+            Consumer<String> checkCombinedCommandUserOutput,\n+            String... args) {\n+        runShell(args);\n+        check(cmdout, checkCommandOutput, \"cmdout\");\n+        check(userout, checkUserOutput, \"userout\");\n@@ -201,0 +221,4 @@\n+        return writeToFile(\"doit.repl\", stuff);\n+    }\n+\n+    protected String writeToFile(String fileName, String stuff) {\n@@ -202,1 +226,1 @@\n-        Path p = compiler.getPath(\"doit.repl\");\n+        Path p = compiler.getPath(fileName);\n@@ -368,1 +392,1 @@\n-    public void testPreviewEnabled() {\n+    public void testSourceLevel() {\n@@ -376,1 +400,1 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"prefix\\nsuffix\\n\"),\n+        startCheckUserOutput(s -> assertEquals(s, \"prefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\"),\n@@ -380,0 +404,11 @@\n+        String fn24 = writeToFile(\n+                \"\"\"\n+                System.out.println(\\\"test\\\");\n+                \/exit\n+                \"\"\");\n+        startCheckUserOutput(s -> assertEquals(s, \"test\\n\"),\n+                             \"-C--release\", \"-C24\", fn24);\n+        startCheckUserOutput(s -> assertEquals(s, \"test\\n\"),\n+                             \"-C--source\", \"-C24\", fn24);\n+        startCheckUserOutput(s -> assertEquals(s, \"test\\n\"),\n+                             \"-C-source\", \"-C24\", fn24);\n@@ -382,0 +417,7 @@\n+                \"\"\"\n+                System.out.println(\\\"test\\\");\n+                \/exit\n+                \"\"\");\n+        startCheckUserOutput(s -> assertEquals(s, \"test\\n\"),\n+                             fn2);\n+        String fn2Preview = writeToFile(\n@@ -388,2 +430,0 @@\n-        startCheckUserOutput(s -> assertEquals(s, \"prefix\\nsuffix\\n\"),\n-                             fn2);\n@@ -391,1 +431,66 @@\n-                             \"--enable-preview\", fn2);\n+                             \"--enable-preview\", fn2Preview);\n+\n+        testPersistence = new HashMap<>();\n+\n+        String newStartupScript = writeToFile(\"test-startup.repl\",\n+                \"\"\"\n+                System.out.println(\"Custom start script\");\n+                \"\"\");\n+        String setStartup = writeToFile(\n+                \"\"\"\n+                \/set start -retain {file}\n+                \/exit\n+                \"\"\".replace(\"{file}\", newStartupScript));\n+        startCheckUserOutput(s -> {}, setStartup);\n+        String exit = writeToFile(\n+                \"\"\"\n+                \/exit\n+                \"\"\");\n+        startCheckUserOutput(s -> assertEquals(s, \"Custom start script\\n\"),\n+                             exit);\n+        String clearStartup = writeToFile(\n+                \"\"\"\n+                \/set start -retain -default\n+                \/exit\n+                \"\"\");\n+        startCheckUserOutput(s -> {}, clearStartup);\n+        String retainTest = writeToFile(\n+                \"\"\"\n+                \/set start\n+                System.out.println(\\\"prefix\\\");\n+                System.out.println(MethodHandle.class.getName());\n+                System.out.println(\\\"suffix\\\");\n+                \/exit\n+                \"\"\");\n+        startCheckCommandUserOutput(s -> assertEquals(s, \"\/set start -retain -default\\n\"),\n+                                    s -> assertEquals(s, \"prefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\"),\n+                                    s -> assertEquals(s, \"\/set start -retain -default\\nprefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\"),\n+                                    retainTest);\n+        String retainTest24 = writeToFile(\n+                \"\"\"\n+                System.out.println(\\\"test\\\");\n+                \/exit\n+                \"\"\");\n+        startCheckUserOutput(s -> assertEquals(s, \"test\\n\"),\n+                             \"-C--release\", \"-C24\", retainTest24);\n+\n+        String set24DefaultTest = writeToFile(\n+                \"\"\"\n+                \/set start -default -retain\n+                \/exit\n+                \"\"\");\n+        startCheckUserOutput(s -> {},\n+                             \"-C--release\", \"-C24\", set24DefaultTest);\n+\n+        String checkDefaultAfterSet24Test = writeToFile(\n+                \"\"\"\n+                \/set start\n+                System.out.println(\\\"prefix\\\");\n+                System.out.println(MethodHandle.class.getName());\n+                System.out.println(\\\"suffix\\\");\n+                \/exit\n+                \"\"\");\n+        startCheckCommandUserOutput(s -> assertEquals(s, \"\/set start -retain -default\\n\"),\n+                                    s -> assertEquals(s, \"prefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\"),\n+                                    s -> assertEquals(s, \"\/set start -retain -default\\nprefix\\njava.lang.invoke.MethodHandle\\nsuffix\\n\"),\n+                                    checkDefaultAfterSet24Test);\n@@ -393,0 +498,1 @@\n+\n","filename":"test\/langtools\/jdk\/jshell\/StartOptionTest.java","additions":113,"deletions":7,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-                        \"\/set start DEFAULT PRINTING\", \"void println\", \"import java.util.*\"),\n+                        \"\/set start DEFAULT PRINTING\", \"void println\", \"import module java.base;\"),\n@@ -336,1 +336,1 @@\n-                        \"|  import java.io.*;\")\n+                        \"|  import module java.base;\")\n","filename":"test\/langtools\/jdk\/jshell\/ToolCommandOptionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,5 @@\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n@@ -73,2 +78,8 @@\n-    public void testCompilerTestFlagEnv() {\n-        test(new String[] {\"-C\", \"-XDforcePreview\"},\n+    public void testCompilerTestFlagEnv() throws IOException {\n+        Path startupFile = Paths.get(\"startup.repl\");\n+        try (Writer w = Files.newBufferedWriter(startupFile)) {\n+            w.write(\"\"\"\n+                    import java.util.function.*;\n+                    \"\"\");\n+        }\n+        test(new String[] {\"-C\", \"-XDforcePreview\", \"-startup\", startupFile.toString()},\n","filename":"test\/langtools\/jdk\/jshell\/ToolEnablePreviewTest.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -69,0 +69,10 @@\n+    @Override\n+    protected void startCheckCommandUserOutput(Consumer<String> checkCommandOutput,\n+            Consumer<String> checkUserOutput,\n+            Consumer<String> checkCombinedCommandUserOutput,\n+            String... args) {\n+        runShell(args);\n+        check(cmdout, checkCombinedCommandUserOutput, \"userout\");\n+        check(usererr, null, \"usererr\");\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/ToolProviderTest.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+ *          java.desktop\n@@ -569,3 +570,3 @@\n-                a -> assertCommandOutputStartsWith(a, \"\/list s3\",\n-                        \"s3 : import\"),\n-                a -> assertCommandCheckOutput(a, \"\/list 1-2 s3\",\n+                a -> assertCommandOutputStartsWith(a, \"\/list s1\",\n+                        \"s1 : import\"),\n+                a -> assertCommandCheckOutput(a, \"\/list 1-2 s1\",\n@@ -573,1 +574,1 @@\n-                            assertTrue(Pattern.matches(\".*aardvark.*\\\\R.*weevil.*\\\\R.*s3.*import.*\", s.trim()),\n+                            assertTrue(Pattern.matches(\".*aardvark.*\\\\R.*weevil.*\\\\R.*s1.*import.*\", s.trim()),\n@@ -980,0 +981,10 @@\n+\n+    @Test\n+    public void testModuleImportShortenedTypes() {\n+        test(\n+                (a) -> assertCommandOutputContains(a, \"import module java.desktop;\", \"\"),\n+                (a) -> assertCommandOutputContains(a, \"var r1 = new JButton()\", \"\"),\n+                (a) -> assertCommandOutputContains(a, \"\/vars r1\", \"|    JButton r1 =\")\n+        );\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/ToolSimpleTest.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -758,1 +758,1 @@\n-                                                          List.of(AccessFlag.TRANSITIVE),\n+                                                          List.of(AccessFlag.STATIC_PHASE),\n@@ -807,1 +807,1 @@\n-            \"- compiler.err.cant.access: m.module-info, (compiler.misc.bad.class.file.header: module-info.class, (compiler.misc.bad.requires.flag: ACC_TRANSITIVE (0x0020)))\",\n+            \"- compiler.err.cant.access: m.module-info, (compiler.misc.bad.class.file.header: module-info.class, (compiler.misc.bad.requires.flag: ACC_STATIC_PHASE (0x0040)))\",\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationsOnModules.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-        boolean expectOK;\n+        boolean expectOK = true;\n@@ -189,1 +189,0 @@\n-                expectOK = false;\n@@ -195,1 +194,0 @@\n-                expectOK = true;\n@@ -200,1 +198,0 @@\n-                expectOK = true;\n@@ -205,1 +202,0 @@\n-                expectOK = false;\n","filename":"test\/langtools\/tools\/javac\/modules\/JavaBaseTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}