{"files":[{"patch":"@@ -1087,1 +1087,2 @@\n-        K_RSA_EXPORT(\"RSA_EXPORT\", \"RSA_EXPORT\", \"RSA_EXPORT\", true, false, NAMED_GROUP_NONE),\n+        K_RSA_EXPORT(\"RSA_EXPORT\", \"RSA_EXPORT\", \"RSA_EXPORT\", true, false,\n+                     NAMED_GROUP_NONE),\n@@ -1091,1 +1092,2 @@\n-        K_DHE_DSS_EXPORT(\"DHE_DSS_EXPORT\", \"DHE\", \"DSS_EXPORT\", true, false, NAMED_GROUP_NONE),\n+        K_DHE_DSS_EXPORT(\"DHE_DSS_EXPORT\", \"DHE\", \"DSS_EXPORT\", true, false,\n+                         NAMED_GROUP_NONE),\n@@ -1093,1 +1095,2 @@\n-        K_DHE_RSA_EXPORT(\"DHE_RSA_EXPORT\", \"DHE\", \"RSA_EXPORT\", true, false, NAMED_GROUP_NONE),\n+        K_DHE_RSA_EXPORT(\"DHE_RSA_EXPORT\", \"DHE\", \"RSA_EXPORT\", true, false,\n+                         NAMED_GROUP_NONE),\n@@ -1095,1 +1098,2 @@\n-        K_DH_ANON_EXPORT(\"DH_anon_EXPORT\", \"DH_anon_EXPORT\", \"NULL\", true, true, NAMED_GROUP_NONE),\n+        K_DH_ANON_EXPORT(\"DH_anon_EXPORT\", \"DH_anon_EXPORT\", \"NULL\", true,\n+                         true, NAMED_GROUP_NONE),\n@@ -1115,1 +1119,1 @@\n-        final String kx; \/\/ Key Exchange algorithm\n+        final String kx;    \/\/ Key Exchange algorithm\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CipherSuite.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-        if (!algorithmConstraints.checkTLSCipherConstraint(algorithm)) {\n+        if (!algorithmConstraints.checkTLSCipherSuiteConstraint(algorithm)) {\n@@ -384,1 +384,1 @@\n-                        \"TLSCipherConstraint should not be linked with other \"\n+                        \"TLSCipherSuiteConstraint should not be linked with other \"\n@@ -389,2 +389,2 @@\n-                    \/\/ Do not link TLSCipherConstraint with other constraints.\n-                    if (lastConstraint instanceof TLSCipherConstraint) {\n+                    \/\/ Do not link TLSCipherSuiteConstraint with other constraints.\n+                    if (lastConstraint instanceof TLSCipherSuiteConstraint) {\n@@ -396,1 +396,1 @@\n-                    TLSCipherSegment segment;\n+                    TLSCipherSuiteSegment segment;\n@@ -450,1 +450,1 @@\n-                               (segment = TLSCipherSegment.nameOf(entry))\n+                               (segment = TLSCipherSuiteSegment.nameOf(entry))\n@@ -456,1 +456,2 @@\n-                            debug.println(\"Constraints set to TLSCipherConstraint: \"\n+                            debug.println(\n+                                \"Constraints set to TLSCipherSuiteSegment: \"\n@@ -459,1 +460,1 @@\n-                        c = new TLSCipherConstraint(algorithm, segment);\n+                        c = new TLSCipherSuiteConstraint(algorithm, segment);\n@@ -558,2 +559,2 @@\n-        \/\/ Special case of TLSCipherConstraint\n-        private boolean checkTLSCipherConstraint(String algorithm) {\n+        \/\/ Special case of TLSCipherSuiteConstraint\n+        private boolean checkTLSCipherSuiteConstraint(String algorithm) {\n@@ -562,1 +563,1 @@\n-            \/\/ Match TLSCipherConstraint constraint against any algorithm.\n+            \/\/ Match TLSCipherSuiteConstraint constraint against any algorithm.\n@@ -565,1 +566,1 @@\n-                    if (constraint instanceof TLSCipherConstraint) {\n+                    if (constraint instanceof TLSCipherSuiteConstraint) {\n@@ -1018,1 +1019,1 @@\n-    enum TLSCipherSegment {\n+    enum TLSCipherSuiteSegment {\n@@ -1023,1 +1024,1 @@\n-        private static final Map<String, TLSCipherSegment> tlsCipherSegmentNames;\n+        private static final Map<String, TLSCipherSuiteSegment> segmentNames;\n@@ -1026,4 +1027,5 @@\n-            Map<String, TLSCipherSegment> names = new HashMap<>();\n-            Arrays.stream(TLSCipherSegment.values())\n-                    .forEach(segment -> names.put(segment.name.toLowerCase(), segment));\n-            tlsCipherSegmentNames = Map.copyOf(names);\n+            Map<String, TLSCipherSuiteSegment> names = new HashMap<>();\n+            Arrays.stream(TLSCipherSuiteSegment.values())\n+                .forEach(segment ->\n+                             names.put(segment.name.toLowerCase(), segment));\n+            segmentNames = Map.copyOf(names);\n@@ -1032,1 +1034,1 @@\n-        TLSCipherSegment(String name) {\n+        TLSCipherSuiteSegment(String name) {\n@@ -1036,2 +1038,2 @@\n-        static TLSCipherSegment nameOf(String name) {\n-            return tlsCipherSegmentNames.get(name.toLowerCase());\n+        static TLSCipherSuiteSegment nameOf(String name) {\n+            return segmentNames.get(name.toLowerCase());\n@@ -1041,1 +1043,1 @@\n-    private class TLSCipherConstraint extends Constraint {\n+    private class TLSCipherSuiteConstraint extends Constraint {\n@@ -1043,1 +1045,1 @@\n-        private final TLSCipherSegment segment;\n+        private final TLSCipherSuiteSegment segment;\n@@ -1045,1 +1047,2 @@\n-        TLSCipherConstraint(String algorithm, TLSCipherSegment segment) {\n+        TLSCipherSuiteConstraint(String algorithm,\n+                                 TLSCipherSuiteSegment segment) {\n@@ -1060,1 +1063,1 @@\n-                if (TLSCipherSegment.KX.equals(segment)) {\n+                if (TLSCipherSuiteSegment.KX.equals(segment)) {\n@@ -1064,1 +1067,1 @@\n-                if (TLSCipherSegment.AUTHN.equals(segment)) {\n+                if (TLSCipherSuiteSegment.AUTHN.equals(segment)) {\n@@ -1078,1 +1081,1 @@\n-            \/\/ Do nothing here, TLSCipherConstraint doesn't apply to certificates.\n+            \/\/ Do nothing here, this constraint doesn't apply to certificates.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":30,"deletions":27,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -781,1 +781,1 @@\n-#   TLSCipherConstraint:\n+#   TLSCipherSuiteConstraint:\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8341964\n- * @summary Add mechanism to disable different parts of TLS cipher suite\n- * @run testng\/othervm TLSCipherConstraintChainedAfter\n- *\/\n-\n-import static org.testng.AssertJUnit.assertEquals;\n-import static org.testng.AssertJUnit.fail;\n-\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-\n-import java.security.Security;\n-\n-import javax.net.ssl.SSLContext;\n-\n-\/**\n- * SSLContext loads \"jdk.tls.disabledAlgorithms\" system property statically when\n- * it's being loaded into memory, so we can't call Security.setProperty(\"jdk.tls.disabledAlgorithms\")\n- * more than once per test class. Thus, we need a separate test class each time we need\n- * to modify \"jdk.tls.disabledAlgorithms\" config value for testing.\n- *\n- *\/\n-public class TLSCipherConstraintChainedAfter {\n-\n-    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n-    private static final String TEST_ALGORITHMS = \"Rsa Kx & keySize < 1024\";\n-\n-    @BeforeTest\n-    void setUp() throws Exception {\n-        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n-    }\n-\n-    @Test\n-    public void testChainedAfter() throws Exception {\n-        try {\n-            SSLContext.getInstance(\"TLS\");\n-        } catch (ExceptionInInitializerError e) {\n-            assertEquals(IllegalArgumentException.class, e.getCause().getClass());\n-            assertEquals(\"TLSCipherConstraint should not be linked with other constraints. Constraint: \" +\n-                    TEST_ALGORITHMS,\n-                    e.getCause().getMessage());\n-            return;\n-        }\n-        fail();\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherConstraintChainedAfter.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8341964\n- * @summary Add mechanism to disable different parts of TLS cipher suite\n- * @run testng\/othervm TLSCipherConstraintChainedBefore\n- *\/\n-\n-import static org.testng.AssertJUnit.assertEquals;\n-import static org.testng.AssertJUnit.fail;\n-\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-\n-import java.security.Security;\n-\n-import javax.net.ssl.SSLContext;\n-\n-\/**\n- * SSLContext loads \"jdk.tls.disabledAlgorithms\" system property statically when\n- * it's being loaded into memory, so we can't call Security.setProperty(\"jdk.tls.disabledAlgorithms\")\n- * more than once per test class. Thus, we need a separate test class each time we need\n- * to modify \"jdk.tls.disabledAlgorithms\" config value for testing.\n- *\n- *\/\n-public class TLSCipherConstraintChainedBefore {\n-\n-    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n-    private static final String TEST_ALGORITHMS = \"Rsa keySize < 1024 & Authn\";\n-\n-    @BeforeTest\n-    void setUp() throws Exception {\n-        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n-    }\n-\n-    @Test\n-    public void testChainedBefore() throws Exception {\n-        try {\n-            SSLContext.getInstance(\"TLS\");\n-        } catch (ExceptionInInitializerError e) {\n-            assertEquals(IllegalArgumentException.class, e.getCause().getClass());\n-            assertEquals(\"TLSCipherConstraint should not be linked with other constraints. Constraint: \" +\n-                            TEST_ALGORITHMS,\n-                    e.getCause().getMessage());\n-            return;\n-        }\n-        fail();\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherConstraintChainedBefore.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm TLSCipherConstrainDisablePartsOfCipherSuite\n+ * @run testng\/othervm TLSCipherSuiteConstrainDisablePartsOfCipherSuite\n@@ -39,1 +39,2 @@\n-public class TLSCipherConstrainDisablePartsOfCipherSuite extends NoDesRC4DesEdeCiphSuite {\n+public class TLSCipherSuiteConstrainDisablePartsOfCipherSuite extends\n+    NoDesRC4DesEdeCiphSuite {\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherSuiteConstrainDisablePartsOfCipherSuite.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherConstrainDisablePartsOfCipherSuite.java","status":"renamed"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm TLSCipherSuiteConstraintChainedAfter\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.fail;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+\n+import javax.net.ssl.SSLContext;\n+\n+\/**\n+ * SSLContext loads \"jdk.tls.disabledAlgorithms\" system property statically\n+ * when it's being loaded into memory, so we can't call\n+ * Security.setProperty(\"jdk.tls.disabledAlgorithms\") more than once per test\n+ * class. Thus, we need a separate test class each time we need to modify\n+ * \"jdk.tls.disabledAlgorithms\" config value for testing.\n+ *\/\n+public class TLSCipherSuiteConstraintChainedAfter {\n+\n+    private static final String SECURITY_PROPERTY =\n+        \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS = \"Rsa Kx & keySize < 1024\";\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testChainedAfter() throws Exception {\n+        try {\n+            SSLContext.getInstance(\"TLS\");\n+        } catch (ExceptionInInitializerError e) {\n+            assertEquals(IllegalArgumentException.class,\n+                         e.getCause().getClass());\n+            assertEquals(\"TLSCipherSuiteConstraint should not be linked with\" +\n+                         \" other constraints. Constraint: \" + TEST_ALGORITHMS,\n+                         e.getCause().getMessage());\n+            return;\n+        }\n+        fail(\"No IllegalArgumentException was thrown\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherSuiteConstraintChainedAfter.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm TLSCipherSuiteConstraintChainedBefore\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.fail;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+\n+import javax.net.ssl.SSLContext;\n+\n+\/**\n+ * SSLContext loads \"jdk.tls.disabledAlgorithms\" system property statically\n+ * when it's being loaded into memory, so we can't call\n+ * Security.setProperty(\"jdk.tls.disabledAlgorithms\") more than once per test\n+ * class. Thus, we need a separate test class each time we need to modify\n+ * \"jdk.tls.disabledAlgorithms\" config value for testing.\n+ *\/\n+public class TLSCipherSuiteConstraintChainedBefore {\n+\n+    private static final String SECURITY_PROPERTY =\n+        \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS = \"Rsa keySize < 1024 & Authn\";\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testChainedBefore() throws Exception {\n+        try {\n+            SSLContext.getInstance(\"TLS\");\n+        } catch (ExceptionInInitializerError e) {\n+            assertEquals(IllegalArgumentException.class,\n+                         e.getCause().getClass());\n+            assertEquals(\"TLSCipherSuiteConstraint should not be linked with\" +\n+                         \" other constraints. Constraint: \" + TEST_ALGORITHMS,\n+                         e.getCause().getMessage());\n+            return;\n+        }\n+        fail(\"No IllegalArgumentException was thrown\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherSuiteConstraintChainedBefore.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}