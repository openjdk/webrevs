{"files":[{"patch":"@@ -1085,11 +1085,11 @@\n-        K_NULL          (\"NULL\",           false, true,   NAMED_GROUP_NONE),\n-        K_RSA           (\"RSA\",            true,  false,  NAMED_GROUP_NONE),\n-        K_RSA_EXPORT    (\"RSA_EXPORT\",     true,  false,  NAMED_GROUP_NONE),\n-        K_DH_RSA        (\"DH_RSA\",         false, false,  NAMED_GROUP_NONE),\n-        K_DH_DSS        (\"DH_DSS\",         false, false,  NAMED_GROUP_NONE),\n-        K_DHE_DSS       (\"DHE_DSS\",        true,  false,  NAMED_GROUP_FFDHE),\n-        K_DHE_DSS_EXPORT(\"DHE_DSS_EXPORT\", true,  false,  NAMED_GROUP_NONE),\n-        K_DHE_RSA       (\"DHE_RSA\",        true,  false,  NAMED_GROUP_FFDHE),\n-        K_DHE_RSA_EXPORT(\"DHE_RSA_EXPORT\", true,  false,  NAMED_GROUP_NONE),\n-        K_DH_ANON       (\"DH_anon\",        true,  true,   NAMED_GROUP_FFDHE),\n-        K_DH_ANON_EXPORT(\"DH_anon_EXPORT\", true,  true,   NAMED_GROUP_NONE),\n+        K_NULL(\"NULL\", \"NULL\", \"NULL\", false, true, NAMED_GROUP_NONE),\n+        K_RSA(\"RSA\", \"RSA\", \"RSA\", true, false, NAMED_GROUP_NONE),\n+        K_RSA_EXPORT(\"RSA_EXPORT\", \"RSA_EXPORT\", \"RSA_EXPORT\", true, false, NAMED_GROUP_NONE),\n+        K_DH_RSA(\"DH_RSA\", \"DH\", \"RSA\", false, false, NAMED_GROUP_NONE),\n+        K_DH_DSS(\"DH_DSS\", \"DH\", \"DSS\", false, false, NAMED_GROUP_NONE),\n+        K_DHE_DSS(\"DHE_DSS\", \"DHE\", \"DSS\", true, false, NAMED_GROUP_FFDHE),\n+        K_DHE_DSS_EXPORT(\"DHE_DSS_EXPORT\", \"DHE\", \"DSS_EXPORT\", true, false, NAMED_GROUP_NONE),\n+        K_DHE_RSA(\"DHE_RSA\", \"DHE\", \"RSA\", true, false, NAMED_GROUP_FFDHE),\n+        K_DHE_RSA_EXPORT(\"DHE_RSA_EXPORT\", \"DHE\", \"RSA_EXPORT\", true, false, NAMED_GROUP_NONE),\n+        K_DH_ANON(\"DH_anon\", \"DH_anon\", \"NULL\", true, true, NAMED_GROUP_FFDHE),\n+        K_DH_ANON_EXPORT(\"DH_anon_EXPORT\", \"DH_anon_EXPORT\", \"NULL\", true, true, NAMED_GROUP_NONE),\n@@ -1099,1 +1099,1 @@\n-        K_ECDH_ECDSA    (\"ECDH_ECDSA\",     JsseJce.ALLOW_ECC,  false,\n+        K_ECDH_ECDSA(\"ECDH_ECDSA\", \"ECDH\", \"ECDSA\", JsseJce.ALLOW_ECC, false,\n@@ -1101,1 +1101,1 @@\n-        K_ECDH_RSA      (\"ECDH_RSA\",       JsseJce.ALLOW_ECC,  false,\n+        K_ECDH_RSA(\"ECDH_RSA\", \"ECDH\", \"RSA\", JsseJce.ALLOW_ECC, false,\n@@ -1103,1 +1103,1 @@\n-        K_ECDHE_ECDSA   (\"ECDHE_ECDSA\",    JsseJce.ALLOW_ECC,  false,\n+        K_ECDHE_ECDSA(\"ECDHE_ECDSA\", \"ECDHE\", \"ECDSA\", JsseJce.ALLOW_ECC, false,\n@@ -1105,1 +1105,1 @@\n-        K_ECDHE_RSA     (\"ECDHE_RSA\",      JsseJce.ALLOW_ECC,  false,\n+        K_ECDHE_RSA(\"ECDHE_RSA\", \"ECDHE\", \"RSA\", JsseJce.ALLOW_ECC, false,\n@@ -1107,1 +1107,1 @@\n-        K_ECDH_ANON     (\"ECDH_anon\",      JsseJce.ALLOW_ECC,  true,\n+        K_ECDH_ANON(\"ECDH_anon\", \"ECDH_anon\", \"NULL\", JsseJce.ALLOW_ECC, true,\n@@ -1111,1 +1111,1 @@\n-        K_SCSV          (\"SCSV\",           true,  true,   NAMED_GROUP_NONE);\n+        K_SCSV(\"SCSV\", \"NULL\", \"NULL\", true, true, NAMED_GROUP_NONE);\n@@ -1115,0 +1115,2 @@\n+        final String kx; \/\/ Key Exchange algorithm\n+        final String authn; \/\/ Authentication algorithm\n@@ -1120,1 +1122,1 @@\n-        KeyExchange(String name, boolean allowed,\n+        KeyExchange(String name, String kx, String authn, boolean allowed,\n@@ -1123,0 +1125,2 @@\n+            this.kx = kx;\n+            this.authn = authn;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CipherSuite.java","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -278,0 +278,19 @@\n+\n+    @Override\n+    public String[] decomposetKeyExchange(String algorithm) {\n+        if (algorithm.startsWith(\"SSL_\") || algorithm.startsWith(\"TLS_\")) {\n+            CipherSuite cipherSuite = CipherSuite.nameOf(algorithm);\n+\n+            if (cipherSuite != null) {\n+                \/\/ keyExchange is null for TLSv1.3 cipher suites,\n+                \/\/ it means ECDHE for both key exchange and authentication.\n+                if (cipherSuite.keyExchange == null) {\n+                    return new String[]{\"ECDHE\", \"ECDHE\"};\n+                } else {\n+                    return new String[]{cipherSuite.keyExchange.kx, cipherSuite.keyExchange.authn};\n+                }\n+            }\n+        }\n+\n+        return super.decomposetKeyExchange(algorithm);\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLAlgorithmDecomposer.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -119,0 +119,9 @@\n+    \/**\n+     * Get KeyExchange and Authentication algorithms used in cipher suite's key exchange part.\n+     *\n+     * @return KeyExchange and Authentication algorithms in that order.\n+     *\/\n+    public String[] decomposetKeyExchange(String algorithm) {\n+        return null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/AlgorithmDecomposer.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+package sun.security.util;\n+\n+import java.security.CryptoPrimitive;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+\/**\n+ * Crypto scope corresponds to one or more crypto primitives.\n+ *\/\n+enum CryptoScope {\n+\n+    KX(\"kx\", new HashSet<>(List.of(CryptoPrimitive.KEY_AGREEMENT))),      \/\/ Key Exchange\n+    AUTHN(\"authn\", new HashSet<>(List.of(CryptoPrimitive.SIGNATURE)));       \/\/ Authentication\n+\n+    private final Set<CryptoPrimitive> cryptoPrimitives;\n+    private final String name;\n+\n+    CryptoScope(String name, Set<CryptoPrimitive> cryptoPrimitives) {\n+        this.name = name;\n+        this.cryptoPrimitives = cryptoPrimitives;\n+    }\n+\n+    Set<CryptoPrimitive> getCryptoPrimitives() {\n+        return cryptoPrimitives;\n+    }\n+\n+    String getName() {\n+        return name;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/CryptoScope.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -45,1 +45,0 @@\n-import java.time.ZonedDateTime;\n@@ -47,0 +46,1 @@\n+import java.time.ZonedDateTime;\n@@ -49,0 +49,1 @@\n+import java.util.Collection;\n@@ -55,1 +56,0 @@\n-import java.util.Collection;\n@@ -58,1 +58,0 @@\n-import java.util.regex.Pattern;\n@@ -60,0 +59,1 @@\n+import java.util.regex.Pattern;\n@@ -152,4 +152,0 @@\n-    \/*\n-     * This only checks if the algorithm has been completely disabled.  If\n-     * there are keysize or other limit, this method allow the algorithm.\n-     *\/\n@@ -159,0 +155,1 @@\n+\n@@ -171,0 +168,4 @@\n+        if (!algorithmConstraints.checkCryptoScopeConstraints(algorithm, primitives)) {\n+            return false;\n+        }\n+\n@@ -325,1 +326,1 @@\n-    private static class Constraints {\n+    private class Constraints {\n@@ -377,2 +378,6 @@\n-                for (String entry : policy.split(\"&\")) {\n-                    entry = entry.trim();\n+                for (String rawEntry : policy.split(\"&\")) {\n+                    \/\/ Do not link CryptoScopeConstraint with other constraints.\n+                    if (lastConstraint instanceof CryptoScopeConstraint) {\n+                        throw new IllegalArgumentException(\"CryptoScope constraint\"\n+                                + \" should not be linked with other constraints.\");\n+                    }\n@@ -380,0 +385,1 @@\n+                    final String entry = rawEntry.trim();\n@@ -381,1 +387,18 @@\n-                    if (entry.startsWith(\"keySize\")) {\n+                    CryptoScope cryptoScope = Arrays.stream(CryptoScope.values())\n+                            .filter(v -> v.getName().equalsIgnoreCase(entry))\n+                            .findFirst()\n+                            .orElse(null);\n+\n+                    if (cryptoScope != null) {\n+                        if (debug != null) {\n+                            debug.println(\"Constraints set to CryptoScopeConstraint: \"\n+                                    + cryptoScope.name());\n+                        }\n+                        if (lastConstraint != null) {\n+                            throw new IllegalArgumentException(\"CryptoScope constraint\"\n+                                    + \" should not be linked with other constraints. \"\n+                                    + \"Constraint: \" + constraintEntry);\n+                        }\n+                        c = new CryptoScopeConstraint(algorithm, cryptoScope);\n+\n+                    } else if (entry.startsWith(\"keySize\")) {\n@@ -527,0 +550,29 @@\n+\n+        \/\/ Special case of CryptoScopeConstraints\n+        private boolean checkCryptoScopeConstraints(String algorithm,\n+                Set<CryptoPrimitive> primitives) {\n+            List<Constraint> constraintList = new ArrayList<>();\n+\n+            \/\/ Check if algorithm's name contains the constraint's key,\n+            \/\/ not an exact match like for other constraints.\n+            constraintsMap.forEach((key, list) -> {\n+                for (Constraint constraint : list) {\n+                    \/\/ Match \"NULL\" CryptoScope constraint against any algorithm,\n+                    \/\/ otherwise match any algorithm that contains the key.\n+                    if ((key.equalsIgnoreCase(\"NULL\") ||\n+                            algorithm.toUpperCase(Locale.ENGLISH).contains(key)) &&\n+                            constraint instanceof CryptoScopeConstraint) {\n+\n+                        constraintList.add(constraint);\n+                    }\n+                }\n+            });\n+\n+            for (Constraint constraint : constraintList) {\n+                if (!constraint.permits(algorithm, primitives)) {\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n+        }\n@@ -598,0 +650,10 @@\n+        \/**\n+         * Check if an algorithm constraint permits the given algorithm with primitives.\n+         *\n+         * @param primitives Set of primitives\n+         * @return 'true' if constraint is allowed, 'false' if disallowed.\n+         *\/\n+        public boolean permits(String algorithm, Set<CryptoPrimitive> primitives) {\n+            return true;\n+        }\n+\n@@ -956,0 +1018,50 @@\n+    private class CryptoScopeConstraint extends Constraint {\n+\n+        private final CryptoScope cryptoScope;\n+\n+        CryptoScopeConstraint(String algo, CryptoScope cryptoScope) {\n+            this.algorithm = algo;\n+            this.cryptoScope = cryptoScope;\n+        }\n+\n+        @Override\n+        public boolean permits(String algo, Set<CryptoPrimitive> primitives) {\n+            \/\/ First check if input is a cipher suite, in such case we disallow\n+            \/\/ cipher suite if it has a constrained algorithm used either for\n+            \/\/ key exchange or authentication.\n+            String[] parts = decomposer.decomposetKeyExchange(algo);\n+\n+            if (parts != null) {\n+                String inputAlgorithm = null;\n+\n+                if (CryptoScope.KX.equals(cryptoScope)) {\n+                    inputAlgorithm = parts[0];\n+                }\n+\n+                if (CryptoScope.AUTHN.equals(cryptoScope)) {\n+                    inputAlgorithm = parts[1];\n+                }\n+\n+                if (this.algorithm.equalsIgnoreCase(inputAlgorithm)) {\n+                    return false;\n+                }\n+            }\n+\n+            \/\/ Check Crypto Primitives if we have an exact algorithm match.\n+            if (this.algorithm.equalsIgnoreCase(algo)) {\n+                for (CryptoPrimitive p : cryptoScope.getCryptoPrimitives()) {\n+                    if (primitives.contains(p)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+\n+            return true;\n+        }\n+\n+        @Override\n+        public void permits(ConstraintsParameters cp) throws CertPathValidatorException {\n+            \/\/ Do nothing here, CryptoScopeConstraint doesn't apply to certificates.\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":123,"deletions":11,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm DisablePartsOfCipherSuiteTest\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertTrue;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+import java.util.List;\n+\n+public class DisablePartsOfCipherSuiteTest extends NoDesRC4DesEdeCiphSuite {\n+\n+    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS = \"ECDH kx, Rsa kx, ECDSA authn, DH_anoN KX, NuLL Authn\";\n+    private static final String[] CIPHER_SUITES = new String[] {\n+            \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n+            \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\"\n+    };\n+    static final List<Integer> CIPHER_SUITES_IDS = List.of(\n+            0x009D,\n+            0xC02E,\n+            0xC02C,\n+            0x0034,\n+            0xC018\n+    );\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testDefault() throws Exception {\n+        assertTrue(testDefaultCase(CIPHER_SUITES_IDS));\n+    }\n+\n+    @Test\n+    public void testAddDisabled() throws Exception {\n+        assertTrue(testEngAddDisabled(CIPHER_SUITES, CIPHER_SUITES_IDS));\n+    }\n+\n+    @Test\n+    public void testOnlyDisabled() throws Exception {\n+        assertTrue(testEngOnlyDisabled(CIPHER_SUITES));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/DisablePartsOfCipherSuiteTest.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -135,1 +135,1 @@\n-    private static boolean testDefaultCase(List<Integer> disabledSuiteIds)\n+    protected static boolean testDefaultCase(List<Integer> disabledSuiteIds)\n@@ -139,1 +139,1 @@\n-        if (DEBUG) {\n+        if (DEBUG) {Í\n@@ -170,1 +170,1 @@\n-    private static boolean testEngOnlyDisabled(String[] disabledSuiteNames)\n+    protected static boolean testEngOnlyDisabled(String[] disabledSuiteNames)\n@@ -207,1 +207,1 @@\n-    private static boolean testEngAddDisabled(String[] disabledNames,\n+    protected static boolean testEngAddDisabled(String[] disabledNames,\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/NoDesRC4DesEdeCiphSuite.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @modules java.base\/sun.security.util\n+ * @run testng\/othervm DisabledAlgorithmConstraintsTest\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertFalse;\n+import static org.testng.AssertJUnit.assertTrue;\n+\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+import sun.security.util.AlgorithmDecomposer;\n+import sun.security.util.DisabledAlgorithmConstraints;\n+\n+import java.security.CryptoPrimitive;\n+import java.security.Security;\n+import java.util.Set;\n+\n+\/**\n+ * Set of DisabledAlgorithmConstraints tests using base AlgorithmDecomposer\n+ *\/\n+public class DisabledAlgorithmConstraintsTest {\n+\n+    static final String SECURITY_PROPERTY = \"testProperty\";\n+    static final String TEST_ALGORITHMS = \"ECDH, Rsa kx, TESTALGO authn, All kx, All authn\";\n+\n+    private DisabledAlgorithmConstraints dac;\n+\n+    @BeforeSuite\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+        dac = new DisabledAlgorithmConstraints(SECURITY_PROPERTY, new AlgorithmDecomposer());\n+    }\n+\n+    @Test\n+    public void testDisabledAlgorithmConstraints_Algorithm() {\n+        assertFalse(dac.permits(Set.of(CryptoPrimitive.KEY_AGREEMENT), \"ECDH\", null));\n+    }\n+\n+    @Test\n+    public void testDisabledAlgorithmConstraints_KeyExchange() {\n+        assertFalse(dac.permits(Set.of(CryptoPrimitive.KEY_AGREEMENT), \"RSA\", null));\n+        assertTrue(dac.permits(Set.of(CryptoPrimitive.SIGNATURE), \"RSA\", null));\n+    }\n+\n+    @Test\n+    public void testDisabledAlgorithmConstraints_Authentication() {\n+        assertTrue(dac.permits(Set.of(CryptoPrimitive.KEY_AGREEMENT), \"TestAlgo\", null));\n+        assertFalse(dac.permits(Set.of(CryptoPrimitive.SIGNATURE), \"TestAlgo\", null));\n+    }\n+\n+    @Test\n+    public void testDisabledAlgorithmConstraints_KeyExchange_Authentication() {\n+        assertFalse(dac.permits(Set.of(CryptoPrimitive.KEY_AGREEMENT), \"ALL\", null));\n+        assertFalse(dac.permits(Set.of(CryptoPrimitive.SIGNATURE), \"ALL\", null));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/util\/AlgorithmConstraints\/DisabledAlgorithmConstraintsTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}