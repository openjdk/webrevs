{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1085,11 +1085,11 @@\n-        K_NULL          (\"NULL\",           false, true,   NAMED_GROUP_NONE),\n-        K_RSA           (\"RSA\",            true,  false,  NAMED_GROUP_NONE),\n-        K_RSA_EXPORT    (\"RSA_EXPORT\",     true,  false,  NAMED_GROUP_NONE),\n-        K_DH_RSA        (\"DH_RSA\",         false, false,  NAMED_GROUP_NONE),\n-        K_DH_DSS        (\"DH_DSS\",         false, false,  NAMED_GROUP_NONE),\n-        K_DHE_DSS       (\"DHE_DSS\",        true,  false,  NAMED_GROUP_FFDHE),\n-        K_DHE_DSS_EXPORT(\"DHE_DSS_EXPORT\", true,  false,  NAMED_GROUP_NONE),\n-        K_DHE_RSA       (\"DHE_RSA\",        true,  false,  NAMED_GROUP_FFDHE),\n-        K_DHE_RSA_EXPORT(\"DHE_RSA_EXPORT\", true,  false,  NAMED_GROUP_NONE),\n-        K_DH_ANON       (\"DH_anon\",        true,  true,   NAMED_GROUP_FFDHE),\n-        K_DH_ANON_EXPORT(\"DH_anon_EXPORT\", true,  true,   NAMED_GROUP_NONE),\n+        K_NULL(\"NULL\", \"NULL\", \"NULL\", false, true, NAMED_GROUP_NONE),\n+        K_RSA(\"RSA\", \"RSA\", \"RSA\", true, false, NAMED_GROUP_NONE),\n+        K_RSA_EXPORT(\"RSA_EXPORT\", \"RSA_EXPORT\", \"RSA_EXPORT\", true, false, NAMED_GROUP_NONE),\n+        K_DH_RSA(\"DH_RSA\", \"DH\", \"RSA\", false, false, NAMED_GROUP_NONE),\n+        K_DH_DSS(\"DH_DSS\", \"DH\", \"DSS\", false, false, NAMED_GROUP_NONE),\n+        K_DHE_DSS(\"DHE_DSS\", \"DHE\", \"DSS\", true, false, NAMED_GROUP_FFDHE),\n+        K_DHE_DSS_EXPORT(\"DHE_DSS_EXPORT\", \"DHE\", \"DSS_EXPORT\", true, false, NAMED_GROUP_NONE),\n+        K_DHE_RSA(\"DHE_RSA\", \"DHE\", \"RSA\", true, false, NAMED_GROUP_FFDHE),\n+        K_DHE_RSA_EXPORT(\"DHE_RSA_EXPORT\", \"DHE\", \"RSA_EXPORT\", true, false, NAMED_GROUP_NONE),\n+        K_DH_ANON(\"DH_anon\", \"DH_anon\", \"NULL\", true, true, NAMED_GROUP_FFDHE),\n+        K_DH_ANON_EXPORT(\"DH_anon_EXPORT\", \"DH_anon_EXPORT\", \"NULL\", true, true, NAMED_GROUP_NONE),\n@@ -1099,1 +1099,1 @@\n-        K_ECDH_ECDSA    (\"ECDH_ECDSA\",     JsseJce.ALLOW_ECC,  false,\n+        K_ECDH_ECDSA(\"ECDH_ECDSA\", \"ECDH\", \"ECDSA\", JsseJce.ALLOW_ECC, false,\n@@ -1101,1 +1101,1 @@\n-        K_ECDH_RSA      (\"ECDH_RSA\",       JsseJce.ALLOW_ECC,  false,\n+        K_ECDH_RSA(\"ECDH_RSA\", \"ECDH\", \"RSA\", JsseJce.ALLOW_ECC, false,\n@@ -1103,1 +1103,1 @@\n-        K_ECDHE_ECDSA   (\"ECDHE_ECDSA\",    JsseJce.ALLOW_ECC,  false,\n+        K_ECDHE_ECDSA(\"ECDHE_ECDSA\", \"ECDHE\", \"ECDSA\", JsseJce.ALLOW_ECC, false,\n@@ -1105,1 +1105,1 @@\n-        K_ECDHE_RSA     (\"ECDHE_RSA\",      JsseJce.ALLOW_ECC,  false,\n+        K_ECDHE_RSA(\"ECDHE_RSA\", \"ECDHE\", \"RSA\", JsseJce.ALLOW_ECC, false,\n@@ -1107,1 +1107,1 @@\n-        K_ECDH_ANON     (\"ECDH_anon\",      JsseJce.ALLOW_ECC,  true,\n+        K_ECDH_ANON(\"ECDH_anon\", \"ECDH_anon\", \"NULL\", JsseJce.ALLOW_ECC, true,\n@@ -1111,1 +1111,1 @@\n-        K_SCSV          (\"SCSV\",           true,  true,   NAMED_GROUP_NONE);\n+        K_SCSV(\"SCSV\", \"NULL\", \"NULL\", true, true, NAMED_GROUP_NONE);\n@@ -1115,0 +1115,2 @@\n+        final String kx; \/\/ Key Exchange algorithm\n+        final String authn; \/\/ Authentication algorithm\n@@ -1120,1 +1122,1 @@\n-        KeyExchange(String name, boolean allowed,\n+        KeyExchange(String name, String kx, String authn, boolean allowed,\n@@ -1123,0 +1125,2 @@\n+            this.kx = kx;\n+            this.authn = authn;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CipherSuite.java","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -278,0 +278,21 @@\n+\n+    @Override\n+    public String[] decomposeCipherSuiteKeyExchange(String algorithm) {\n+        if (algorithm.startsWith(\"SSL_\") || algorithm.startsWith(\"TLS_\")) {\n+            CipherSuite cipherSuite = CipherSuite.nameOf(algorithm);\n+\n+            if (cipherSuite != null) {\n+                \/\/ keyExchange is null for TLSv1.3 cipher suites, it means\n+                \/\/ undefined for both key exchange and authentication.\n+                if (cipherSuite.keyExchange == null) {\n+                    return new String[]{null, null};\n+                } else {\n+                    return new String[]{\n+                        cipherSuite.keyExchange.kx,\n+                        cipherSuite.keyExchange.authn};\n+                }\n+            }\n+        }\n+\n+        return super.decomposeCipherSuiteKeyExchange(algorithm);\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLAlgorithmDecomposer.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,0 +119,9 @@\n+    \/**\n+     * Get KeyExchange and Authentication algorithms used in cipher suite.\n+     *\n+     * @return KeyExchange and Authentication algorithms in that order.\n+     *\/\n+    public String[] decomposeCipherSuiteKeyExchange(String algorithm) {\n+        return null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/AlgorithmDecomposer.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import java.time.ZonedDateTime;\n@@ -47,0 +46,1 @@\n+import java.time.ZonedDateTime;\n@@ -49,0 +49,1 @@\n+import java.util.Collection;\n@@ -55,1 +56,0 @@\n-import java.util.Collection;\n@@ -58,1 +58,0 @@\n-import java.util.regex.Pattern;\n@@ -60,0 +59,1 @@\n+import java.util.regex.Pattern;\n@@ -153,2 +153,2 @@\n-     * This only checks if the algorithm has been completely disabled.  If\n-     * there are keysize or other limit, this method allow the algorithm.\n+     * This only checks if the algorithm of cipher suite has been completely\n+     * disabled.  If there is keysize or other limit, this method allow the algorithm.\n@@ -159,0 +159,1 @@\n+\n@@ -171,0 +172,4 @@\n+        if (!algorithmConstraints.checkTLSCipherConstraint(algorithm)) {\n+            return false;\n+        }\n+\n@@ -325,1 +330,1 @@\n-    private static class Constraints {\n+    private class Constraints {\n@@ -377,2 +382,6 @@\n-                for (String entry : policy.split(\"&\")) {\n-                    entry = entry.trim();\n+                final IllegalArgumentException tlsCipherSegmentLinkException =\n+                    new IllegalArgumentException(\n+                        \"TLSCipherConstraint should not be linked with other \"\n+                        + \"constraints. Constraint: \" + constraintEntry);\n+\n+                for (String rawEntry : policy.split(\"&\")) {\n@@ -380,0 +389,6 @@\n+                    \/\/ Do not link TLSCipherConstraint with other constraints.\n+                    if (lastConstraint instanceof TLSCipherConstraint) {\n+                        throw tlsCipherSegmentLinkException;\n+                    }\n+\n+                    final String entry = rawEntry.trim();\n@@ -381,0 +396,2 @@\n+                    TLSCipherSegment segment;\n+\n@@ -431,0 +448,13 @@\n+                    } else if (PROPERTY_TLS_DISABLED_ALGS\n+                                   .equalsIgnoreCase(propertyName) &&\n+                               (segment = TLSCipherSegment.nameOf(entry))\n+                               != null) {\n+                        if (lastConstraint != null) {\n+                            throw tlsCipherSegmentLinkException;\n+                        }\n+                        if (debug != null) {\n+                            debug.println(\"Constraints set to TLSCipherConstraint: \"\n+                                    + segment.name());\n+                        }\n+                        c = new TLSCipherConstraint(algorithm, segment);\n+\n@@ -527,0 +557,22 @@\n+\n+        \/\/ Special case of TLSCipherConstraint\n+        private boolean checkTLSCipherConstraint(String algorithm) {\n+            List<Constraint> constraintList = new ArrayList<>();\n+\n+            \/\/ Match TLSCipherConstraint constraint against any algorithm.\n+            constraintsMap.forEach((_, list) -> {\n+                for (Constraint constraint : list) {\n+                    if (constraint instanceof TLSCipherConstraint) {\n+                        constraintList.add(constraint);\n+                    }\n+                }\n+            });\n+\n+            for (Constraint constraint : constraintList) {\n+                if (!constraint.permits(algorithm)) {\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n+        }\n@@ -598,0 +650,10 @@\n+        \/**\n+         * Check if an algorithm constraint permits the given algorithm.\n+         *\n+         * @param algorithm Algorithm or Cipher Suite\n+         * @return 'true' if constraint is allowed, 'false' if disallowed.\n+         *\/\n+        public boolean permits(String algorithm) {\n+            return true;\n+        }\n+\n@@ -956,0 +1018,64 @@\n+    enum TLSCipherSegment {\n+        KX(\"kx\"),             \/\/ Key Exchange\n+        AUTHN(\"authn\");       \/\/ Authentication\n+\n+        private final String name;\n+        private static final Map<String, TLSCipherSegment> tlsCipherSegmentNames;\n+\n+        static {\n+            Map<String, TLSCipherSegment> names = new HashMap<>();\n+            Arrays.stream(TLSCipherSegment.values())\n+                    .forEach(segment -> names.put(segment.name.toLowerCase(), segment));\n+            tlsCipherSegmentNames = Map.copyOf(names);\n+        }\n+\n+        TLSCipherSegment(String name) {\n+            this.name = name;\n+        }\n+\n+        static TLSCipherSegment nameOf(String name) {\n+            return tlsCipherSegmentNames.get(name.toLowerCase());\n+        }\n+    }\n+\n+    private class TLSCipherConstraint extends Constraint {\n+\n+        private final TLSCipherSegment segment;\n+\n+        TLSCipherConstraint(String algorithm, TLSCipherSegment segment) {\n+            this.algorithm = algorithm;\n+            this.segment = segment;\n+        }\n+\n+        @Override\n+        public boolean permits(String algo) {\n+            \/\/ Check if input is a cipher suite, in such case we disallow\n+            \/\/ cipher suite if it has a constrained algorithm used either for\n+            \/\/ key exchange or authentication.\n+            String[] parts = decomposer.decomposeCipherSuiteKeyExchange(algo);\n+\n+            if (parts != null) {\n+                String inputAlgorithm = null;\n+\n+                if (TLSCipherSegment.KX.equals(segment)) {\n+                    inputAlgorithm = parts[0];\n+                }\n+\n+                if (TLSCipherSegment.AUTHN.equals(segment)) {\n+                    inputAlgorithm = parts[1];\n+                }\n+\n+                if (this.algorithm.equalsIgnoreCase(inputAlgorithm)) {\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n+        }\n+\n+        @Override\n+        public void permits(ConstraintsParameters cp) {\n+            \/\/ Do nothing here, TLSCipherConstraint doesn't apply to certificates.\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":134,"deletions":8,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -778,1 +778,15 @@\n-# syntax of the disabled algorithm string.\n+# syntax of the disabled algorithm string. Besides, one additional\n+# TLS-specific constraint can be used here:\n+#\n+#   TLSCipherConstraint:\n+#     kx | authn\n+#       This constraint restricts TLS cipher suite based on its algorithm usage:\n+#         - \"kx\" prohibits algorithm to be used for Key Exchange.\n+#         - \"authn\" prohibits algorithm to be used for Authentication.\n+#       This constraint can't be chained by '&' with other constraints.\n+#       Examples:\n+#         - \"RSA kx\" prohibits any cipher suite that uses RSA algorithm for\n+#            Key Exchange.\n+#         - \"DSS authn\" prohibits any cipher suite that uses DSS algorithm\n+#            for Authentication.\n+#         - \"NULL authn\" requires some algorithm to be used for Authentication.\n@@ -788,1 +802,1 @@\n-#       rsa_pkcs1_sha1, secp224r1\n+#       rsa_pkcs1_sha1, secp224r1, RSA kx\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,0 @@\n-    private static final boolean DEBUG = false;\n-\n@@ -103,0 +101,1 @@\n+        NoDesRC4DesEdeCiphSuite test = new NoDesRC4DesEdeCiphSuite();\n@@ -105,3 +104,3 @@\n-        allGood &= testDefaultCase(DES_CS_LIST);\n-        allGood &= testEngAddDisabled(DES_CS_LIST_NAMES, DES_CS_LIST);\n-        allGood &= testEngOnlyDisabled(DES_CS_LIST_NAMES);\n+        allGood &= test.testDefaultCase(DES_CS_LIST);\n+        allGood &= test.testEngAddDisabled(DES_CS_LIST_NAMES, DES_CS_LIST);\n+        allGood &= test.testEngOnlyDisabled(DES_CS_LIST_NAMES);\n@@ -110,3 +109,3 @@\n-        allGood &= testDefaultCase(RC4_CS_LIST);\n-        allGood &= testEngAddDisabled(RC4_CS_LIST_NAMES, RC4_CS_LIST);\n-        allGood &= testEngOnlyDisabled(RC4_CS_LIST_NAMES);\n+        allGood &= test.testDefaultCase(RC4_CS_LIST);\n+        allGood &= test.testEngAddDisabled(RC4_CS_LIST_NAMES, RC4_CS_LIST);\n+        allGood &= test.testEngOnlyDisabled(RC4_CS_LIST_NAMES);\n@@ -115,3 +114,3 @@\n-        allGood &= testDefaultCase(DESEDE_CS_LIST);\n-        allGood &= testEngAddDisabled(DESEDE_CS_LIST_NAMES, DESEDE_CS_LIST);\n-        allGood &= testEngOnlyDisabled(DESEDE_CS_LIST_NAMES);\n+        allGood &= test.testDefaultCase(DESEDE_CS_LIST);\n+        allGood &= test.testEngAddDisabled(DESEDE_CS_LIST_NAMES, DESEDE_CS_LIST);\n+        allGood &= test.testEngOnlyDisabled(DESEDE_CS_LIST_NAMES);\n@@ -135,1 +134,1 @@\n-    private static boolean testDefaultCase(List<Integer> disabledSuiteIds)\n+    protected boolean testDefaultCase(List<Integer> disabledSuiteIds)\n@@ -139,1 +138,1 @@\n-        if (DEBUG) {\n+        if (getDebug()) {\n@@ -145,1 +144,1 @@\n-        if (DEBUG) {\n+        if (getDebug()) {\n@@ -170,1 +169,1 @@\n-    private static boolean testEngOnlyDisabled(String[] disabledSuiteNames)\n+    protected boolean testEngOnlyDisabled(String[] disabledSuiteNames)\n@@ -177,1 +176,1 @@\n-            if (DEBUG) {\n+            if (getDebug()) {\n@@ -183,1 +182,1 @@\n-            if (DEBUG) {\n+            if (getDebug()) {\n@@ -200,1 +199,1 @@\n-     * @param disabledSuiteNames an array of cipher suite names that\n+     * @param disabledNames an array of cipher suite names that\n@@ -207,1 +206,1 @@\n-    private static boolean testEngAddDisabled(String[] disabledNames,\n+    protected boolean testEngAddDisabled(String[] disabledNames,\n@@ -220,1 +219,1 @@\n-        if (DEBUG) {\n+        if (getDebug()) {\n@@ -226,1 +225,1 @@\n-        if (DEBUG) {\n+        if (getDebug()) {\n@@ -240,2 +239,6 @@\n-    private static SSLEngine makeEngine() throws GeneralSecurityException {\n-        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n+    protected String getProtocol() {\n+        return \"TLSv1.2\";\n+    }\n+\n+    private SSLEngine makeEngine() throws GeneralSecurityException {\n+        SSLContext ctx = SSLContext.getInstance(getProtocol());\n@@ -279,1 +282,1 @@\n-    private static boolean areSuitesPresentCH(ByteBuffer clientHello,\n+    private boolean areSuitesPresentCH(ByteBuffer clientHello,\n@@ -358,2 +361,2 @@\n-    private static void log(String str) {\n-        if (DEBUG) {\n+    private void log(String str) {\n+        if (getDebug()) {\n@@ -363,0 +366,4 @@\n+\n+    protected boolean getDebug() {\n+        return false;\n+    }\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/NoDesRC4DesEdeCiphSuite.java","additions":34,"deletions":27,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm TLSCipherConstrainDisablePartsOfCipherSuite\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertTrue;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+import java.util.List;\n+\n+public class TLSCipherConstrainDisablePartsOfCipherSuite extends NoDesRC4DesEdeCiphSuite {\n+\n+    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS = \"ECDH kX, Rsa kx, ECDSA authn, DH_anoN KX, NuLL Authn\";\n+    private static final String[] CIPHER_SUITES = new String[] {\n+            \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n+            \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\"\n+    };\n+    static final List<Integer> CIPHER_SUITES_IDS = List.of(\n+            0x009D,\n+            0xC02E,\n+            0xC02C,\n+            0x0034,\n+            0xC018\n+    );\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testDefault() throws Exception {\n+        assertTrue(testDefaultCase(CIPHER_SUITES_IDS));\n+    }\n+\n+    @Test\n+    public void testAddDisabled() throws Exception {\n+        assertTrue(testEngAddDisabled(CIPHER_SUITES, CIPHER_SUITES_IDS));\n+    }\n+\n+    @Test\n+    public void testOnlyDisabled() throws Exception {\n+        assertTrue(testEngOnlyDisabled(CIPHER_SUITES));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherConstrainDisablePartsOfCipherSuite.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm TLSCipherConstraintChainedAfter\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.fail;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+\n+import javax.net.ssl.SSLContext;\n+\n+\/**\n+ * SSLContext loads \"jdk.tls.disabledAlgorithms\" system property statically when\n+ * it's being loaded into memory, so we can't call Security.setProperty(\"jdk.tls.disabledAlgorithms\")\n+ * more than once per test class. Thus, we need a separate test class each time we need\n+ * to modify \"jdk.tls.disabledAlgorithms\" config value for testing.\n+ *\n+ *\/\n+public class TLSCipherConstraintChainedAfter {\n+\n+    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS = \"Rsa Kx & keySize < 1024\";\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testChainedAfter() throws Exception {\n+        try {\n+            SSLContext.getInstance(\"TLS\");\n+        } catch (ExceptionInInitializerError e) {\n+            assertEquals(IllegalArgumentException.class, e.getCause().getClass());\n+            assertEquals(\"TLSCipherConstraint should not be linked with other constraints. Constraint: \" +\n+                    TEST_ALGORITHMS,\n+                    e.getCause().getMessage());\n+            return;\n+        }\n+        fail();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherConstraintChainedAfter.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm TLSCipherConstraintChainedBefore\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.fail;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+\n+import javax.net.ssl.SSLContext;\n+\n+\/**\n+ * SSLContext loads \"jdk.tls.disabledAlgorithms\" system property statically when\n+ * it's being loaded into memory, so we can't call Security.setProperty(\"jdk.tls.disabledAlgorithms\")\n+ * more than once per test class. Thus, we need a separate test class each time we need\n+ * to modify \"jdk.tls.disabledAlgorithms\" config value for testing.\n+ *\n+ *\/\n+public class TLSCipherConstraintChainedBefore {\n+\n+    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS = \"Rsa keySize < 1024 & Authn\";\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testChainedBefore() throws Exception {\n+        try {\n+            SSLContext.getInstance(\"TLS\");\n+        } catch (ExceptionInInitializerError e) {\n+            assertEquals(IllegalArgumentException.class, e.getCause().getClass());\n+            assertEquals(\"TLSCipherConstraint should not be linked with other constraints. Constraint: \" +\n+                            TEST_ALGORITHMS,\n+                    e.getCause().getMessage());\n+            return;\n+        }\n+        fail();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherConstraintChainedBefore.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}