{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CipherSuite.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -280,1 +280,1 @@\n-    public String[] decomposetKeyExchange(String algorithm) {\n+    public String[] decomposeCipherSuiteKeyExchange(String algorithm) {\n@@ -295,1 +295,1 @@\n-        return super.decomposetKeyExchange(algorithm);\n+        return super.decomposeCipherSuiteKeyExchange(algorithm);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLAlgorithmDecomposer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,1 @@\n-     * Get KeyExchange and Authentication algorithms used in cipher suite's key exchange part.\n+     * Get KeyExchange and Authentication algorithms used in cipher suite.\n@@ -124,1 +124,1 @@\n-    public String[] decomposetKeyExchange(String algorithm) {\n+    public String[] decomposeCipherSuiteKeyExchange(String algorithm) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/AlgorithmDecomposer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,31 +0,0 @@\n-package sun.security.util;\n-\n-import java.security.CryptoPrimitive;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-\/**\n- * Crypto scope corresponds to one or more crypto primitives.\n- *\/\n-enum CryptoScope {\n-\n-    KX(\"kx\", new HashSet<>(List.of(CryptoPrimitive.KEY_AGREEMENT))),      \/\/ Key Exchange\n-    AUTHN(\"authn\", new HashSet<>(List.of(CryptoPrimitive.SIGNATURE)));       \/\/ Authentication\n-\n-    private final Set<CryptoPrimitive> cryptoPrimitives;\n-    private final String name;\n-\n-    CryptoScope(String name, Set<CryptoPrimitive> cryptoPrimitives) {\n-        this.name = name;\n-        this.cryptoPrimitives = cryptoPrimitives;\n-    }\n-\n-    Set<CryptoPrimitive> getCryptoPrimitives() {\n-        return cryptoPrimitives;\n-    }\n-\n-    String getName() {\n-        return name;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/CryptoScope.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -152,0 +152,4 @@\n+    \/*\n+     * This only checks if the algorithm of cipher suite has been completely\n+     * disabled.  If there is keysize or other limit, this method allow the algorithm.\n+     *\/\n@@ -168,1 +172,1 @@\n-        if (!algorithmConstraints.checkCryptoScopeConstraints(algorithm, primitives)) {\n+        if (!algorithmConstraints.checkTLSCipherConstraint(algorithm)) {\n@@ -378,0 +382,5 @@\n+                final IllegalArgumentException tlsCipherSegmentLinkException =\n+                        new IllegalArgumentException(\"TLSCipherConstraint \"\n+                                + \"should not be linked with other constraints. \"\n+                                + \"Constraint: \" + constraintEntry);\n+\n@@ -379,4 +388,4 @@\n-                    \/\/ Do not link CryptoScopeConstraint with other constraints.\n-                    if (lastConstraint instanceof CryptoScopeConstraint) {\n-                        throw new IllegalArgumentException(\"CryptoScope constraint\"\n-                                + \" should not be linked with other constraints.\");\n+\n+                    \/\/ Do not link TLSCipherConstraint with other constraints.\n+                    if (lastConstraint instanceof TLSCipherConstraint) {\n+                        throw tlsCipherSegmentLinkException;\n@@ -387,4 +396,1 @@\n-                    CryptoScope cryptoScope = Arrays.stream(CryptoScope.values())\n-                            .filter(v -> v.getName().equalsIgnoreCase(entry))\n-                            .findFirst()\n-                            .orElse(null);\n+                    TLSCipherSegment segment;\n@@ -392,13 +398,1 @@\n-                    if (cryptoScope != null) {\n-                        if (debug != null) {\n-                            debug.println(\"Constraints set to CryptoScopeConstraint: \"\n-                                    + cryptoScope.name());\n-                        }\n-                        if (lastConstraint != null) {\n-                            throw new IllegalArgumentException(\"CryptoScope constraint\"\n-                                    + \" should not be linked with other constraints. \"\n-                                    + \"Constraint: \" + constraintEntry);\n-                        }\n-                        c = new CryptoScopeConstraint(algorithm, cryptoScope);\n-\n-                    } else if (entry.startsWith(\"keySize\")) {\n+                    if (entry.startsWith(\"keySize\")) {\n@@ -454,0 +448,11 @@\n+                    } else if (PROPERTY_TLS_DISABLED_ALGS.equalsIgnoreCase(propertyName) &&\n+                            (segment = TLSCipherSegment.nameOf(entry)) != null) {\n+                        if (lastConstraint != null) {\n+                            throw tlsCipherSegmentLinkException;\n+                        }\n+                        if (debug != null) {\n+                            debug.println(\"Constraints set to TLSCipherConstraint: \"\n+                                    + segment.name());\n+                        }\n+                        c = new TLSCipherConstraint(algorithm, segment);\n+\n@@ -551,3 +556,2 @@\n-        \/\/ Special case of CryptoScopeConstraints\n-        private boolean checkCryptoScopeConstraints(String algorithm,\n-                Set<CryptoPrimitive> primitives) {\n+        \/\/ Special case of TLSCipherConstraint\n+        private boolean checkTLSCipherConstraint(String algorithm) {\n@@ -556,3 +560,2 @@\n-            \/\/ Check if algorithm's name contains the constraint's key,\n-            \/\/ not an exact match like for other constraints.\n-            constraintsMap.forEach((key, list) -> {\n+            \/\/ Match TLSCipherConstraint constraint against any algorithm.\n+            constraintsMap.forEach((_, list) -> {\n@@ -560,6 +563,1 @@\n-                    \/\/ Match \"NULL\" CryptoScope constraint against any algorithm,\n-                    \/\/ otherwise match any algorithm that contains the key.\n-                    if ((key.equalsIgnoreCase(\"NULL\") ||\n-                            algorithm.toUpperCase(Locale.ENGLISH).contains(key)) &&\n-                            constraint instanceof CryptoScopeConstraint) {\n-\n+                    if (constraint instanceof TLSCipherConstraint) {\n@@ -572,1 +570,1 @@\n-                if (!constraint.permits(algorithm, primitives)) {\n+                if (!constraint.permits(algorithm)) {\n@@ -651,1 +649,1 @@\n-         * Check if an algorithm constraint permits the given algorithm with primitives.\n+         * Check if an algorithm constraint permits the given algorithm.\n@@ -653,1 +651,1 @@\n-         * @param primitives Set of primitives\n+         * @param algorithm Algorithm or Cipher Suite\n@@ -656,1 +654,1 @@\n-        public boolean permits(String algorithm, Set<CryptoPrimitive> primitives) {\n+        public boolean permits(String algorithm) {\n@@ -1018,1 +1016,3 @@\n-    private class CryptoScopeConstraint extends Constraint {\n+    enum TLSCipherSegment {\n+        KX(\"kx\"),             \/\/ Key Exchange\n+        AUTHN(\"authn\");       \/\/ Authentication\n@@ -1020,1 +1020,2 @@\n-        private final CryptoScope cryptoScope;\n+        private final String name;\n+        private static final Map<String, TLSCipherSegment> tlsCipherSegmentNames;\n@@ -1022,3 +1023,23 @@\n-        CryptoScopeConstraint(String algo, CryptoScope cryptoScope) {\n-            this.algorithm = algo;\n-            this.cryptoScope = cryptoScope;\n+        static {\n+            Map<String, TLSCipherSegment> names = new HashMap<>();\n+            Arrays.stream(TLSCipherSegment.values())\n+                    .forEach(segment -> names.put(segment.name.toLowerCase(), segment));\n+            tlsCipherSegmentNames = Map.copyOf(names);\n+        }\n+\n+        TLSCipherSegment(String name) {\n+            this.name = name;\n+        }\n+\n+        static TLSCipherSegment nameOf(String name) {\n+            return tlsCipherSegmentNames.get(name.toLowerCase());\n+        }\n+    }\n+\n+    private class TLSCipherConstraint extends Constraint {\n+\n+        private final TLSCipherSegment segment;\n+\n+        TLSCipherConstraint(String algorithm, TLSCipherSegment segment) {\n+            this.algorithm = algorithm;\n+            this.segment = segment;\n@@ -1028,2 +1049,2 @@\n-        public boolean permits(String algo, Set<CryptoPrimitive> primitives) {\n-            \/\/ First check if input is a cipher suite, in such case we disallow\n+        public boolean permits(String algo) {\n+            \/\/ Check if input is a cipher suite, in such case we disallow\n@@ -1032,1 +1053,1 @@\n-            String[] parts = decomposer.decomposetKeyExchange(algo);\n+            String[] parts = decomposer.decomposeCipherSuiteKeyExchange(algo);\n@@ -1037,1 +1058,1 @@\n-                if (CryptoScope.KX.equals(cryptoScope)) {\n+                if (TLSCipherSegment.KX.equals(segment)) {\n@@ -1041,1 +1062,1 @@\n-                if (CryptoScope.AUTHN.equals(cryptoScope)) {\n+                if (TLSCipherSegment.AUTHN.equals(segment)) {\n@@ -1050,9 +1071,0 @@\n-            \/\/ Check Crypto Primitives if we have an exact algorithm match.\n-            if (this.algorithm.equalsIgnoreCase(algo)) {\n-                for (CryptoPrimitive p : cryptoScope.getCryptoPrimitives()) {\n-                    if (primitives.contains(p)) {\n-                        return false;\n-                    }\n-                }\n-            }\n-\n@@ -1063,2 +1075,2 @@\n-        public void permits(ConstraintsParameters cp) throws CertPathValidatorException {\n-            \/\/ Do nothing here, CryptoScopeConstraint doesn't apply to certificates.\n+        public void permits(ConstraintsParameters cp) {\n+            \/\/ Do nothing here, TLSCipherConstraint doesn't apply to certificates.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":71,"deletions":59,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -778,1 +778,15 @@\n-# syntax of the disabled algorithm string.\n+# syntax of the disabled algorithm string. Besides, one additional\n+# TLS-specific constraint can be used here:\n+#\n+#   TLSCipherConstraint:\n+#     kx | authn\n+#       This constraint restricts TLS cipher suite based on its algorithm usage:\n+#         - \"kx\" prohibits algorithm to be used for Key Exchange.\n+#         - \"authn\" prohibits algorithm to be used for Authentication.\n+#       This constraint can't be chained by '&' with other constraints.\n+#       Examples:\n+#         - \"RSA kx\" prohibits any cipher suite that uses RSA algorithm for\n+#            Key Exchange.\n+#         - \"DSS authn\" prohibits any cipher suite that uses DSS algorithm\n+#            for Authentication.\n+#         - \"NULL authn\" requires some algorithm to be used for Authentication.\n@@ -788,1 +802,1 @@\n-#       rsa_pkcs1_sha1, secp224r1\n+#       rsa_pkcs1_sha1, secp224r1, RSA kx\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * @test\n- * @bug 8341964\n- * @summary Add mechanism to disable different parts of TLS cipher suite\n- * @run testng\/othervm DisablePartsOfCipherSuiteTest\n- *\/\n-\n-import static org.testng.AssertJUnit.assertTrue;\n-\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-\n-import java.security.Security;\n-import java.util.List;\n-\n-public class DisablePartsOfCipherSuiteTest extends NoDesRC4DesEdeCiphSuite {\n-\n-    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n-    private static final String TEST_ALGORITHMS = \"ECDH kx, Rsa kx, ECDSA authn, DH_anoN KX, NuLL Authn\";\n-    private static final String[] CIPHER_SUITES = new String[] {\n-            \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n-            \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n-            \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\"\n-    };\n-    static final List<Integer> CIPHER_SUITES_IDS = List.of(\n-            0x009D,\n-            0xC02E,\n-            0xC02C,\n-            0x0034,\n-            0xC018\n-    );\n-\n-    @BeforeTest\n-    void setUp() throws Exception {\n-        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n-    }\n-\n-    @Test\n-    public void testDefault() throws Exception {\n-        assertTrue(testDefaultCase(CIPHER_SUITES_IDS));\n-    }\n-\n-    @Test\n-    public void testAddDisabled() throws Exception {\n-        assertTrue(testEngAddDisabled(CIPHER_SUITES, CIPHER_SUITES_IDS));\n-    }\n-\n-    @Test\n-    public void testOnlyDisabled() throws Exception {\n-        assertTrue(testEngOnlyDisabled(CIPHER_SUITES));\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/DisablePartsOfCipherSuiteTest.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,0 @@\n-    private static final boolean DEBUG = false;\n-\n@@ -103,0 +101,1 @@\n+        NoDesRC4DesEdeCiphSuite test = new NoDesRC4DesEdeCiphSuite();\n@@ -105,3 +104,3 @@\n-        allGood &= testDefaultCase(DES_CS_LIST);\n-        allGood &= testEngAddDisabled(DES_CS_LIST_NAMES, DES_CS_LIST);\n-        allGood &= testEngOnlyDisabled(DES_CS_LIST_NAMES);\n+        allGood &= test.testDefaultCase(DES_CS_LIST);\n+        allGood &= test.testEngAddDisabled(DES_CS_LIST_NAMES, DES_CS_LIST);\n+        allGood &= test.testEngOnlyDisabled(DES_CS_LIST_NAMES);\n@@ -110,3 +109,3 @@\n-        allGood &= testDefaultCase(RC4_CS_LIST);\n-        allGood &= testEngAddDisabled(RC4_CS_LIST_NAMES, RC4_CS_LIST);\n-        allGood &= testEngOnlyDisabled(RC4_CS_LIST_NAMES);\n+        allGood &= test.testDefaultCase(RC4_CS_LIST);\n+        allGood &= test.testEngAddDisabled(RC4_CS_LIST_NAMES, RC4_CS_LIST);\n+        allGood &= test.testEngOnlyDisabled(RC4_CS_LIST_NAMES);\n@@ -115,3 +114,3 @@\n-        allGood &= testDefaultCase(DESEDE_CS_LIST);\n-        allGood &= testEngAddDisabled(DESEDE_CS_LIST_NAMES, DESEDE_CS_LIST);\n-        allGood &= testEngOnlyDisabled(DESEDE_CS_LIST_NAMES);\n+        allGood &= test.testDefaultCase(DESEDE_CS_LIST);\n+        allGood &= test.testEngAddDisabled(DESEDE_CS_LIST_NAMES, DESEDE_CS_LIST);\n+        allGood &= test.testEngOnlyDisabled(DESEDE_CS_LIST_NAMES);\n@@ -135,1 +134,1 @@\n-    protected static boolean testDefaultCase(List<Integer> disabledSuiteIds)\n+    protected boolean testDefaultCase(List<Integer> disabledSuiteIds)\n@@ -139,1 +138,1 @@\n-        if (DEBUG) {Í\n+        if (getDebug()) {\n@@ -145,1 +144,1 @@\n-        if (DEBUG) {\n+        if (getDebug()) {\n@@ -170,1 +169,1 @@\n-    protected static boolean testEngOnlyDisabled(String[] disabledSuiteNames)\n+    protected boolean testEngOnlyDisabled(String[] disabledSuiteNames)\n@@ -177,1 +176,1 @@\n-            if (DEBUG) {\n+            if (getDebug()) {\n@@ -183,1 +182,1 @@\n-            if (DEBUG) {\n+            if (getDebug()) {\n@@ -200,1 +199,1 @@\n-     * @param disabledSuiteNames an array of cipher suite names that\n+     * @param disabledNames an array of cipher suite names that\n@@ -207,1 +206,1 @@\n-    protected static boolean testEngAddDisabled(String[] disabledNames,\n+    protected boolean testEngAddDisabled(String[] disabledNames,\n@@ -220,1 +219,1 @@\n-        if (DEBUG) {\n+        if (getDebug()) {\n@@ -226,1 +225,1 @@\n-        if (DEBUG) {\n+        if (getDebug()) {\n@@ -240,2 +239,6 @@\n-    private static SSLEngine makeEngine() throws GeneralSecurityException {\n-        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n+    protected String getProtocol() {\n+        return \"TLSv1.2\";\n+    }\n+\n+    private SSLEngine makeEngine() throws GeneralSecurityException {\n+        SSLContext ctx = SSLContext.getInstance(getProtocol());\n@@ -279,1 +282,1 @@\n-    private static boolean areSuitesPresentCH(ByteBuffer clientHello,\n+    private boolean areSuitesPresentCH(ByteBuffer clientHello,\n@@ -358,2 +361,2 @@\n-    private static void log(String str) {\n-        if (DEBUG) {\n+    private void log(String str) {\n+        if (getDebug()) {\n@@ -363,0 +366,4 @@\n+\n+    protected boolean getDebug() {\n+        return false;\n+    }\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/NoDesRC4DesEdeCiphSuite.java","additions":34,"deletions":27,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm TLSCipherConstrainDisablePartsOfCipherSuite\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertTrue;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+import java.util.List;\n+\n+public class TLSCipherConstrainDisablePartsOfCipherSuite extends NoDesRC4DesEdeCiphSuite {\n+\n+    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS = \"ECDH kX, Rsa kx, ECDSA authn, DH_anoN KX, NuLL Authn\";\n+    private static final String[] CIPHER_SUITES = new String[] {\n+            \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n+            \"TLS_DH_anon_WITH_AES_128_CBC_SHA\",\n+            \"TLS_ECDH_anon_WITH_AES_128_CBC_SHA\"\n+    };\n+    static final List<Integer> CIPHER_SUITES_IDS = List.of(\n+            0x009D,\n+            0xC02E,\n+            0xC02C,\n+            0x0034,\n+            0xC018\n+    );\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testDefault() throws Exception {\n+        assertTrue(testDefaultCase(CIPHER_SUITES_IDS));\n+    }\n+\n+    @Test\n+    public void testAddDisabled() throws Exception {\n+        assertTrue(testEngAddDisabled(CIPHER_SUITES, CIPHER_SUITES_IDS));\n+    }\n+\n+    @Test\n+    public void testOnlyDisabled() throws Exception {\n+        assertTrue(testEngOnlyDisabled(CIPHER_SUITES));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherConstrainDisablePartsOfCipherSuite.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm TLSCipherConstrainDisablePartsOfCipherSuiteTLSv13\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertTrue;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+import java.util.List;\n+\n+public class TLSCipherConstrainDisablePartsOfCipherSuiteTLSv13 extends NoDesRC4DesEdeCiphSuite {\n+\n+    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS = \"ECDHE kx\";\n+    private static final String[] CIPHER_SUITES = new String[] {\n+        \"TLS_AES_256_GCM_SHA384\",\n+        \"TLS_AES_128_GCM_SHA256\",\n+        \"TLS_CHACHA20_POLY1305_SHA256\"\n+    };\n+    static final List<Integer> CIPHER_SUITES_IDS = List.of(\n+        0x1302,\n+        0x1301,\n+        0x1303\n+    );\n+\n+    @Override\n+    protected String getProtocol() {\n+        return \"TLSv1.3\";\n+    }\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testDefault() throws Exception {\n+        assertTrue(testDefaultCase(CIPHER_SUITES_IDS));\n+    }\n+\n+    @Test\n+    public void testAddDisabled() throws Exception {\n+        assertTrue(testEngAddDisabled(CIPHER_SUITES, CIPHER_SUITES_IDS));\n+    }\n+\n+    @Test\n+    public void testOnlyDisabled() throws Exception {\n+        assertTrue(testEngOnlyDisabled(CIPHER_SUITES));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherConstrainDisablePartsOfCipherSuiteTLSv13.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm TLSCipherConstraintChainedAfter\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.fail;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+\n+import javax.net.ssl.SSLContext;\n+\n+\/**\n+ * SSLContext loads \"jdk.tls.disabledAlgorithms\" system property statically when\n+ * it's being loaded into memory, so we can't call Security.setProperty(\"jdk.tls.disabledAlgorithms\")\n+ * more than once per test class. Thus, we need a separate test class each time we need\n+ * to modify \"jdk.tls.disabledAlgorithms\" config value for testing.\n+ *\n+ *\/\n+public class TLSCipherConstraintChainedAfter {\n+\n+    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS = \"Rsa Kx & keySize < 1024\";\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testChainedAfter() throws Exception {\n+        try {\n+            SSLContext.getInstance(\"TLS\");\n+        } catch (ExceptionInInitializerError e) {\n+            assertEquals(IllegalArgumentException.class, e.getCause().getClass());\n+            assertEquals(\"TLSCipherConstraint should not be linked with other constraints. Constraint: \" +\n+                    TEST_ALGORITHMS,\n+                    e.getCause().getMessage());\n+            return;\n+        }\n+        fail();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherConstraintChainedAfter.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8341964\n+ * @summary Add mechanism to disable different parts of TLS cipher suite\n+ * @run testng\/othervm TLSCipherConstraintChainedBefore\n+ *\/\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.fail;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.security.Security;\n+\n+import javax.net.ssl.SSLContext;\n+\n+\/**\n+ * SSLContext loads \"jdk.tls.disabledAlgorithms\" system property statically when\n+ * it's being loaded into memory, so we can't call Security.setProperty(\"jdk.tls.disabledAlgorithms\")\n+ * more than once per test class. Thus, we need a separate test class each time we need\n+ * to modify \"jdk.tls.disabledAlgorithms\" config value for testing.\n+ *\n+ *\/\n+public class TLSCipherConstraintChainedBefore {\n+\n+    private static final String SECURITY_PROPERTY = \"jdk.tls.disabledAlgorithms\";\n+    private static final String TEST_ALGORITHMS = \"Rsa keySize < 1024 & Authn\";\n+\n+    @BeforeTest\n+    void setUp() throws Exception {\n+        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n+    }\n+\n+    @Test\n+    public void testChainedBefore() throws Exception {\n+        try {\n+            SSLContext.getInstance(\"TLS\");\n+        } catch (ExceptionInInitializerError e) {\n+            assertEquals(IllegalArgumentException.class, e.getCause().getClass());\n+            assertEquals(\"TLSCipherConstraint should not be linked with other constraints. Constraint: \" +\n+                            TEST_ALGORITHMS,\n+                    e.getCause().getMessage());\n+            return;\n+        }\n+        fail();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/TLSCipherConstraintChainedBefore.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * @test\n- * @bug 8341964\n- * @summary Add mechanism to disable different parts of TLS cipher suite\n- * @modules java.base\/sun.security.util\n- * @run testng\/othervm DisabledAlgorithmConstraintsTest\n- *\/\n-\n-import static org.testng.AssertJUnit.assertFalse;\n-import static org.testng.AssertJUnit.assertTrue;\n-\n-import org.testng.annotations.BeforeSuite;\n-import org.testng.annotations.Test;\n-import sun.security.util.AlgorithmDecomposer;\n-import sun.security.util.DisabledAlgorithmConstraints;\n-\n-import java.security.CryptoPrimitive;\n-import java.security.Security;\n-import java.util.Set;\n-\n-\/**\n- * Set of DisabledAlgorithmConstraints tests using base AlgorithmDecomposer\n- *\/\n-public class DisabledAlgorithmConstraintsTest {\n-\n-    static final String SECURITY_PROPERTY = \"testProperty\";\n-    static final String TEST_ALGORITHMS = \"ECDH, Rsa kx, TESTALGO authn, All kx, All authn\";\n-\n-    private DisabledAlgorithmConstraints dac;\n-\n-    @BeforeSuite\n-    void setUp() throws Exception {\n-        Security.setProperty(SECURITY_PROPERTY, TEST_ALGORITHMS);\n-        dac = new DisabledAlgorithmConstraints(SECURITY_PROPERTY, new AlgorithmDecomposer());\n-    }\n-\n-    @Test\n-    public void testDisabledAlgorithmConstraints_Algorithm() {\n-        assertFalse(dac.permits(Set.of(CryptoPrimitive.KEY_AGREEMENT), \"ECDH\", null));\n-    }\n-\n-    @Test\n-    public void testDisabledAlgorithmConstraints_KeyExchange() {\n-        assertFalse(dac.permits(Set.of(CryptoPrimitive.KEY_AGREEMENT), \"RSA\", null));\n-        assertTrue(dac.permits(Set.of(CryptoPrimitive.SIGNATURE), \"RSA\", null));\n-    }\n-\n-    @Test\n-    public void testDisabledAlgorithmConstraints_Authentication() {\n-        assertTrue(dac.permits(Set.of(CryptoPrimitive.KEY_AGREEMENT), \"TestAlgo\", null));\n-        assertFalse(dac.permits(Set.of(CryptoPrimitive.SIGNATURE), \"TestAlgo\", null));\n-    }\n-\n-    @Test\n-    public void testDisabledAlgorithmConstraints_KeyExchange_Authentication() {\n-        assertFalse(dac.permits(Set.of(CryptoPrimitive.KEY_AGREEMENT), \"ALL\", null));\n-        assertFalse(dac.permits(Set.of(CryptoPrimitive.SIGNATURE), \"ALL\", null));\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/util\/AlgorithmConstraints\/DisabledAlgorithmConstraintsTest.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"}]}