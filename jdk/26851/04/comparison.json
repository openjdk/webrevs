{"files":[{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"phasetype.hpp\"\n+\n+const char* const CompilerPhaseTypeHelper::_phase_descriptions[] = {\n+#define array_of_labels(name, description) description,\n+       COMPILER_PHASES(array_of_labels)\n+#undef array_of_labels\n+};\n+\n+const char* const CompilerPhaseTypeHelper::_phase_names[] = {\n+#define array_of_labels(name, description) #name,\n+       COMPILER_PHASES(array_of_labels)\n+#undef array_of_labels\n+};\n+\n+CompilerPhaseType CompilerPhaseTypeHelper::find_phase(const char* str) {\n+  for (int i = 0; i < PHASE_NUM_TYPES; i++) {\n+    if (strcmp(CompilerPhaseTypeHelper::_phase_names[i], str) == 0) {\n+      return (CompilerPhaseType)i;\n+    }\n+  }\n+  return PHASE_NONE;\n+}\n","filename":"src\/hotspot\/share\/opto\/phasetype.cpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -141,12 +141,0 @@\n-static const char* phase_descriptions[] = {\n-#define array_of_labels(name, description) description,\n-       COMPILER_PHASES(array_of_labels)\n-#undef array_of_labels\n-};\n-\n-static const char* phase_names[] = {\n-#define array_of_labels(name, description) #name,\n-       COMPILER_PHASES(array_of_labels)\n-#undef array_of_labels\n-};\n-\n@@ -154,1 +142,5 @@\n-  public:\n+ private:\n+  static const char* const _phase_descriptions[];\n+  static const char* const _phase_names[];\n+\n+ public:\n@@ -156,1 +148,1 @@\n-    return phase_names[cpt];\n+    return _phase_names[cpt];\n@@ -159,1 +151,1 @@\n-    return phase_descriptions[cpt];\n+    return _phase_descriptions[cpt];\n@@ -161,1 +153,0 @@\n-};\n@@ -163,8 +154,2 @@\n-static CompilerPhaseType find_phase(const char* str) {\n-  for (int i = 0; i < PHASE_NUM_TYPES; i++) {\n-    if (strcmp(phase_names[i], str) == 0) {\n-      return (CompilerPhaseType)i;\n-    }\n-  }\n-  return PHASE_NONE;\n-}\n+  static CompilerPhaseType find_phase(const char* str);\n+};\n@@ -186,1 +171,1 @@\n-      CompilerPhaseType cpt = find_phase(*iter);\n+      CompilerPhaseType cpt = CompilerPhaseTypeHelper::find_phase(*iter);\n","filename":"src\/hotspot\/share\/opto\/phasetype.hpp","additions":10,"deletions":25,"binary":false,"changes":35,"status":"modified"}]}