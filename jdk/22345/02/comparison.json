{"files":[{"patch":"@@ -1297,1 +1297,4 @@\n-        print_oop_with_requested_addr_cr(&st, source_oop, false);\n+        \/\/ Don't print the requested addr again as we have just printed it at the beginning of the line.\n+        \/\/ Example:\n+        \/\/ 0x00000007ffd27938: @@ Object (0xfffa4f27) java.util.HashMap\n+        print_oop_info_cr(&st, source_oop, \/*print_requested_addr=*\/false);\n@@ -1301,0 +1304,2 @@\n+        \/\/ Example:\n+        \/\/ 0x00000007ffc3ffd8: @@ Object filler 40 bytes\n@@ -1318,1 +1323,1 @@\n-  \/\/ in _source_obj with their requested addresses using print_oop_with_requested_addr_cr().\n+  \/\/ in _source_obj with their requested addresses using print_oop_info_cr().\n@@ -1334,2 +1339,8 @@\n-        fd->print_on(_st); \/\/ print just the name and offset\n-        print_oop_with_requested_addr_cr(_st, _source_obj->obj_field(fd->offset()));\n+        {\n+          fd->print_on(_st); \/\/ print just the name and offset\n+          oop obj = _source_obj->obj_field(fd->offset());\n+          if (java_lang_Class::is_instance(obj)) {\n+            obj = HeapShared::scratch_java_mirror(obj);\n+          }\n+          print_oop_info_cr(_st, obj);\n+        }\n@@ -1391,1 +1402,5 @@\n-          print_oop_with_requested_addr_cr(&st, source_obj_array->obj_at(i));\n+          oop obj = source_obj_array->obj_at(i);\n+          if (java_lang_Class::is_instance(obj)) {\n+            obj = HeapShared::scratch_java_mirror(obj);\n+          }\n+          print_oop_info_cr(&st, obj);\n@@ -1397,0 +1412,34 @@\n+\n+        if (java_lang_Class::is_instance(source_oop)) {\n+          oop scratch_mirror = source_oop;\n+          st.print(\" - signature: \");\n+          print_class_signature_for_mirror(&st, scratch_mirror);\n+          st.cr();\n+\n+          Klass* src_klass = java_lang_Class::as_Klass(scratch_mirror);\n+          if (src_klass != nullptr && src_klass->is_instance_klass()) {\n+            oop rr = HeapShared::scratch_resolved_references(InstanceKlass::cast(src_klass)->constants());\n+            st.print(\" - archived_resolved_references: \");\n+            print_oop_info_cr(&st, rr);\n+\n+            \/\/ We need to print the fields in the scratch_mirror, not the original mirror.\n+            \/\/ (if a class is not aot-initialized, static fields in its scratch mirror will be cleared).\n+            assert(scratch_mirror == HeapShared::scratch_java_mirror(src_klass->java_mirror()), \"sanity\");\n+            st.print_cr(\"- ---- static fields (%d):\", java_lang_Class::static_oop_field_count(scratch_mirror));\n+            InstanceKlass::cast(src_klass)->do_local_static_fields(&print_field);\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  static void print_class_signature_for_mirror(outputStream* st, oop scratch_mirror) {\n+    assert(java_lang_Class::is_instance(scratch_mirror), \"sanity\");\n+    if (java_lang_Class::is_primitive(scratch_mirror)) {\n+      for (int i = T_BOOLEAN; i < T_VOID+1; i++) {\n+        BasicType bt = (BasicType)i;\n+        if (!is_reference_type(bt) && scratch_mirror == HeapShared::scratch_java_mirror(bt)) {\n+          oop orig_mirror = Universe::java_mirror(bt);\n+          java_lang_Class::print_signature(orig_mirror, st);\n+          return;\n+        }\n@@ -1398,0 +1447,1 @@\n+      ShouldNotReachHere();\n@@ -1399,0 +1449,1 @@\n+    java_lang_Class::print_signature(scratch_mirror, st);\n@@ -1406,1 +1457,1 @@\n-        print_oop_with_requested_addr_cr(&st, HeapShared::pending_roots()->at(i));\n+        print_oop_info_cr(&st, HeapShared::pending_roots()->at(i));\n@@ -1411,3 +1462,4 @@\n-  \/\/ The output looks like this. The first number is the requested address. The second number is\n-  \/\/ the narrowOop version of the requested address.\n-  \/\/     0x00000007ffc7e840 (0xfff8fd08) java.lang.Class\n+  \/\/ Example output:\n+  \/\/ - The first number is the requested address (if print_requested_addr == true)\n+  \/\/ - The second number is the narrowOop version of the requested address (if UseCompressedOops == true)\n+  \/\/     0x00000007ffc7e840 (0xfff8fd08) java.lang.Class Ljava\/util\/Array;\n@@ -1415,1 +1467,1 @@\n-  static void print_oop_with_requested_addr_cr(outputStream* st, oop source_oop, bool print_addr = true) {\n+  static void print_oop_info_cr(outputStream* st, oop source_oop, bool print_requested_addr = true) {\n@@ -1421,1 +1473,1 @@\n-      if (print_addr) {\n+      if (print_requested_addr) {\n@@ -1431,1 +1483,21 @@\n-        st->print_cr(\"%s\", source_oop->klass()->external_name());\n+        st->print(\"%s\", source_oop->klass()->external_name());\n+\n+        if (java_lang_String::is_instance(source_oop)) {\n+          st->print(\" \");\n+          java_lang_String::print(source_oop, st);\n+        } else if (java_lang_Class::is_instance(source_oop)) {\n+          oop scratch_mirror = source_oop;\n+\n+          st->print(\" \");\n+          print_class_signature_for_mirror(st, scratch_mirror);\n+\n+          Klass* src_klass = java_lang_Class::as_Klass(scratch_mirror);\n+          if (src_klass != nullptr && src_klass->is_instance_klass()) {\n+            InstanceKlass* buffered_klass =\n+              ArchiveBuilder::current()->get_buffered_addr(InstanceKlass::cast(src_klass));\n+            if (buffered_klass->has_aot_initialized_mirror()) {\n+              st->print(\" (aot-inited)\");\n+            }\n+          }\n+        }\n+        st->cr();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":84,"deletions":12,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-0x00000000ffe00000: @@ Object (0xffe00000) java.lang.String\n+0x00000000ffe00000: @@ Object (0xffe00000) java.lang.String \"\"\n@@ -152,1 +152,1 @@\n-    static Pattern objPattern1 = Pattern.compile(\"^0x([0-9a-f]+): @@ Object (.*)\");\n+    static Pattern objPattern1 = Pattern.compile(\"^0x([0-9a-f]+): @@ Object ([^ ]*)\");\n@@ -156,1 +156,1 @@\n-    static Pattern objPattern2 = Pattern.compile(\"^0x([0-9a-f]+): @@ Object [(]0x([0-9a-f]+)[)] (.*)\");\n+    static Pattern objPattern2 = Pattern.compile(\"^0x([0-9a-f]+): @@ Object [(]0x([0-9a-f]+)[)] ([^ ]*)\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/CDSMapReader.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}