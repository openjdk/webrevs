{"files":[{"patch":"@@ -1297,1 +1297,1 @@\n-        print_oop_with_requested_addr_cr(&st, source_oop, false);\n+        print_oop_with_requested_addr_cr(&st, source_oop, false, true);\n@@ -1334,2 +1334,8 @@\n-        fd->print_on(_st); \/\/ print just the name and offset\n-        print_oop_with_requested_addr_cr(_st, _source_obj->obj_field(fd->offset()));\n+        {\n+          fd->print_on(_st); \/\/ print just the name and offset\n+          oop obj = _source_obj->obj_field(fd->offset());\n+          if (java_lang_Class::is_instance(obj)) {\n+            obj = HeapShared::scratch_java_mirror(obj);\n+          }\n+          print_oop_with_requested_addr_cr(_st, obj);\n+        }\n@@ -1391,1 +1397,5 @@\n-          print_oop_with_requested_addr_cr(&st, source_obj_array->obj_at(i));\n+          oop obj = source_obj_array->obj_at(i);\n+          if (java_lang_Class::is_instance(obj)) {\n+            obj = HeapShared::scratch_java_mirror(obj);\n+          }\n+          print_oop_with_requested_addr_cr(&st, obj);\n@@ -1397,0 +1407,34 @@\n+\n+        if (java_lang_Class::is_instance(source_oop)) {\n+          oop scratch_mirror = source_oop;\n+          st.print(\" - signature: \");\n+          print_class_signature_for_mirror(&st, scratch_mirror);\n+          st.cr();\n+\n+          Klass* src_klass = java_lang_Class::as_Klass(scratch_mirror);\n+          if (src_klass != nullptr && src_klass->is_instance_klass()) {\n+            oop rr = HeapShared::scratch_resolved_references(InstanceKlass::cast(src_klass)->constants());\n+            st.print(\" - archived_resolved_references: \");\n+            print_oop_with_requested_addr_cr(&st, rr);\n+\n+            \/\/ We need to print the fields in the scratch_mirror, not the original mirror.\n+            \/\/ (if a class is not aot-initialized, static fields in its scratch mirror will be cleared).\n+            assert(scratch_mirror == HeapShared::scratch_java_mirror(src_klass->java_mirror()), \"sanity\");\n+            st.print_cr(\"- ---- static fields (%d):\", java_lang_Class::static_oop_field_count(scratch_mirror));\n+            InstanceKlass::cast(src_klass)->do_local_static_fields(&print_field);\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  static void print_class_signature_for_mirror(outputStream* st, oop scratch_mirror) {\n+    assert(java_lang_Class::is_instance(scratch_mirror), \"sanity\");\n+    if (java_lang_Class::is_primitive(scratch_mirror)) {\n+      for (int i = T_BOOLEAN; i < T_VOID+1; i++) {\n+        BasicType bt = (BasicType)i;\n+        if (!is_reference_type(bt) && scratch_mirror == HeapShared::scratch_java_mirror(bt)) {\n+          oop orig_mirror = Universe::java_mirror(bt);\n+          java_lang_Class::print_signature(orig_mirror, st);\n+          return;\n+        }\n@@ -1398,0 +1442,1 @@\n+      ShouldNotReachHere();\n@@ -1399,0 +1444,1 @@\n+    java_lang_Class::print_signature(scratch_mirror, st);\n@@ -1415,1 +1461,1 @@\n-  static void print_oop_with_requested_addr_cr(outputStream* st, oop source_oop, bool print_addr = true) {\n+  static void print_oop_with_requested_addr_cr(outputStream* st, oop source_oop, bool print_addr = true, bool print_aot_init = false) {\n@@ -1431,1 +1477,23 @@\n-        st->print_cr(\"%s\", source_oop->klass()->external_name());\n+        st->print(\"%s\", source_oop->klass()->external_name());\n+\n+        if (java_lang_String::is_instance(source_oop)) {\n+          st->print(\" \");\n+          java_lang_String::print(source_oop, st);\n+        } else if (java_lang_Class::is_instance(source_oop)) {\n+          oop scratch_mirror = source_oop;\n+\n+          st->print(\" \");\n+          print_class_signature_for_mirror(st, scratch_mirror);\n+\n+          if (print_aot_init) {\n+            Klass* src_klass = java_lang_Class::as_Klass(scratch_mirror);\n+            if (src_klass != nullptr && src_klass->is_instance_klass()) {\n+              InstanceKlass* buffered_klass =\n+                ArchiveBuilder::current()->get_buffered_addr(InstanceKlass::cast(src_klass));\n+              if (buffered_klass->has_aot_initialized_mirror()) {\n+                st->print(\" (aot-inited)\");\n+              }\n+            }\n+          }\n+        }\n+        st->cr();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":74,"deletions":6,"binary":false,"changes":80,"status":"modified"}]}