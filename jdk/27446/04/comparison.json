{"files":[{"patch":"@@ -44,0 +44,1 @@\n+  LOG_TAG(asan) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -505,1 +505,1 @@\n-          range(0, 17)                                                      \\\n+          range(0, 18)                                                      \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -698,0 +699,4 @@\n+#ifdef ADDRESS_SANITIZER\n+  Asan::initialize();\n+#endif\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifdef ADDRESS_SANITIZER\n+\n+#include \"logging\/log.hpp\"\n+#include \"sanitizers\/address.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/vmError.hpp\"\n+\n+#include <dlfcn.h>\n+#include <stdio.h>\n+\n+typedef void (*callback_setter_t) (void (*callback)(const char *));\n+static callback_setter_t g_callback_setter = nullptr;\n+static const char* g_report = nullptr;\n+\n+extern \"C\" void asan_error_callback(const char* report_text) {\n+  \/\/ Please keep things very short and simple here and use as little\n+  \/\/ as possible of any hotspot infrastructure. However shaky the JVM,\n+  \/\/ we should always at least get the ASAN report on stderr.\n+\n+  \/\/ Note: this is threadsafe since ASAN synchronizes error reports\n+  g_report = report_text;\n+\n+  \/\/ First, print off the bare error to stderr\n+  fprintf(stderr, \"JVM caught ASAN Error\\n\");\n+  fprintf(stderr, \"%s\\n\", report_text);\n+\n+  \/\/ Then, let normal JVM error handling run its due course.\n+  fatal(\"ASAN Error\");\n+}\n+\n+void Asan::initialize() {\n+\n+  \/\/ For documentation of __asan_set_error_report_callback() see asan_interface.h .\n+  g_callback_setter = (callback_setter_t) dlsym(RTLD_DEFAULT, \"__asan_set_error_report_callback\");\n+  if (g_callback_setter == nullptr) {\n+    log_warning(asan)(\"*** Failed to install JVM callback for ASAN. ASAN errors will not generate hs-err files. ***\");\n+    return;\n+  }\n+\n+  g_callback_setter(asan_error_callback);\n+  log_info(asan)(\"JVM callback for ASAN errors successfully installed\");\n+\n+  \/\/ Controlling core dump behavior:\n+  \/\/\n+  \/\/ In hotspot, CreateCoredumpOnCrash decides whether to create a core dump (on Posix, whether to\n+  \/\/ end the process with abort(3) or exit(3)).\n+  \/\/\n+  \/\/ Core generation in the default ASAN reporter is controlled by two options:\n+  \/\/ - \"abort_on_error=0\" (default) - end with exit(3), \"abort_on_error=1\" end with abort(3)\n+  \/\/ - \"disable_coredump=1\" (default) disables cores by imposing a near-zero core soft limit.\n+  \/\/ By default both options are set to prevent cores. That default makes sense since ASAN cores\n+  \/\/ can get very large (due to the shadow map) and very numerous (ASAN is typically ran for\n+  \/\/ large-scale integration tests, not targeted micro-tests).\n+  \/\/\n+  \/\/ In hotspot ASAN builds, we replace the default ASAN reporter. The soft limit imposed by\n+  \/\/ \"disable_coredump=1\" is still in effect. But \"abort_on_error\" is not honored. Since we'd\n+  \/\/ like to exhibit exactly the same behavior as the standard ASAN error reporter, we disable\n+  \/\/ core files if ASAN would inhibit them (we just switch off CreateCoredumpOnCrash).\n+  \/\/\n+  \/\/ Thus:\n+  \/\/     abort_on_error      disable_coredump       core file?\n+  \/\/         0                   0                  No  (enforced by ergo-setting CreateCoredumpOnCrash=0)\n+  \/\/ (*)     0                   1                  No  (enforced by ASAN-imposed soft limit)\n+  \/\/         1                   0                  Yes, unless -XX:-CreateCoredumpOnCrash set on command line\n+  \/\/         1                   1                  No  (enforced by ASAN-imposed soft limit)\n+  \/\/ (*) is the default if no ASAN options are specified.\n+\n+  const char* const asan_options = getenv(\"ASAN_OPTIONS\");\n+  const bool asan_inhibits_cores = (asan_options == nullptr) ||\n+                                   (::strstr(asan_options, \"abort_on_error=1\") == nullptr) ||\n+                                   (::strstr(asan_options, \"disable_coredump=0\") == nullptr);\n+  if (asan_inhibits_cores) {\n+    if (CreateCoredumpOnCrash) {\n+      log_info(asan)(\"CreateCoredumpOnCrash overruled by%s asan options. Core generation disabled.\",\n+                        asan_options != nullptr ? \"\" : \" default setting for\");\n+      log_info(asan)(\"Use 'ASAN_OPTIONS=abort_on_error=1:disable_coredump=0:unmap_shadow_on_exit=1' \"\n+                     \"to enable core generation.\");\n+    }\n+    FLAG_SET_ERGO(CreateCoredumpOnCrash, false);\n+  }\n+}\n+\n+bool Asan::had_error() {\n+  return g_report != nullptr;\n+}\n+\n+void Asan::report(outputStream* st) {\n+  if (had_error()) {\n+    \/\/ Use raw print here to avoid truncation.\n+    st->print_raw(g_report);\n+    st->cr();\n+    st->cr();\n+  }\n+}\n+\n+#endif \/\/ ADDRESS_SANITIZER\n","filename":"src\/hotspot\/share\/sanitizers\/address.cpp","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -29,0 +29,2 @@\n+#include \"memory\/allStatic.hpp\"\n+\n@@ -77,0 +79,10 @@\n+class outputStream;\n+\n+#ifdef ADDRESS_SANITIZER\n+struct Asan : public AllStatic {\n+  static void initialize();\n+  static bool had_error();\n+  static void report(outputStream* st);\n+};\n+#endif\n+\n","filename":"src\/hotspot\/share\/sanitizers\/address.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+#include \"sanitizers\/address.hpp\"\n@@ -913,1 +914,10 @@\n-  STEP_IF(\"printing thread\", _verbose)\n+#ifdef ADDRESS_SANITIZER\n+  STEP_IF(\"printing ASAN error information\", _verbose && Asan::had_error())\n+    st->cr();\n+    st->print_cr(\"------------------  A S A N ----------------\");\n+    st->cr();\n+    Asan::report(st);\n+    st->cr();\n+#endif \/\/ ADDRESS_SANITIZER\n+\n+    STEP_IF(\"printing thread\", _verbose)\n@@ -2189,0 +2199,8 @@\n+    case 18: {\n+      \/\/ Trigger an error that should cause ASAN to report a double free or use-after-free.\n+      \/\/ Please note that this is not 100% bullet-proof since it assumes that this block\n+      \/\/ is not immediately repurposed by some other thread after free.\n+      void* const p = os::malloc(4096, mtTest);\n+      os::free(p);\n+      os::free(p);\n+    }\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025, IBM Corporation. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test that we get ASAN-reports and hs-err files on ASAN error\n+ * @library \/test\/lib\n+ * @requires vm.asan\n+ * @requires vm.flagless\n+ * @requires vm.debug == true & os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver AsanReportTest\n+ *\/\n+\n+\/\/ Note: this test can only run on debug since it relies on VMError::controlled_crash() which\n+\/\/ only exists in debug builds.\n+import java.io.File;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class AsanReportTest {\n+\n+    private static void do_test() throws Exception {\n+\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+                \"-Xmx64M\", \"-XX:CompressedClassSpaceSize=64M\",\n+                \/\/ Default ASAN options should prevent core file generation, which should overrule +CreateCoredumpOnCrash.\n+                \/\/ We test below.\n+                \"-XX:+CreateCoredumpOnCrash\",\n+                \"-Xlog:asan\",\n+                \/\/ Switch off NMT since it can alter the error ASAN sees; we want the pure double free error\n+                \"-XX:NativeMemoryTracking=off\",\n+                \/\/ Causes double-free in controlled_crash\n+                \"-XX:ErrorHandlerTest=18\",\n+                \"-version\");\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+        output.shouldNotHaveExitValue(0);\n+\n+        \/\/ ASAN error should appear on stderr\n+        output.shouldContain(\"CreateCoredumpOnCrash overruled\");\n+        output.shouldContain(\"JVM caught ASAN Error\");\n+        output.shouldMatch(\"AddressSanitizer.*double-free\");\n+        output.shouldMatch(\"# +A fatal error has been detected by the Java Runtime Environment\");\n+        output.shouldMatch(\"# +fatal error: ASAN\");\n+        output.shouldNotContain(\"Aborted (core dumped)\");\n+\n+        File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output);\n+        Pattern[] pat = new Pattern[] {\n+                Pattern.compile(\".*A S A N.*\"),\n+                Pattern.compile(\".*AddressSanitizer.*double-free.*\"),\n+                Pattern.compile(\".*(crash_with_segfault|controlled_crash).*\")\n+        };\n+        HsErrFileUtils.checkHsErrFileContent(hs_err_file, pat, false);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        do_test();\n+    }\n+\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/AsanReportTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}