{"files":[{"patch":"@@ -2494,0 +2494,50 @@\n+    \/**\n+     * Returns the index within this string of the first occurrence of the\n+     * specified character, starting the search at {@code fromIndex} and\n+     * stopping before {@code toIndex}.\n+     *\n+     * <p>If a character with value {@code ch} occurs in the\n+     * character sequence represented by this {@code String}\n+     * object at an index no smaller than {@code fromIndex} but smaller than\n+     * {@code toIndex}, then\n+     * the index of the first such occurrence is returned. For values\n+     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n+     * this is the smallest value <i>k<\/i> such that:\n+     * <blockquote><pre>\n+     * (this.charAt(<i>k<\/i>) == ch) &amp;&amp; (fromIndex &lt;= <i>k<\/i> &lt; toIndex)\n+     * <\/pre><\/blockquote>\n+     * is true. For other values of {@code ch}, it is the\n+     * smallest value <i>k<\/i> such that:\n+     * <blockquote><pre>\n+     * (this.codePointAt(<i>k<\/i>) == ch) &amp;&amp; (fromIndex &lt;= <i>k<\/i> &lt; toIndex)\n+     * <\/pre><\/blockquote>\n+     * is true. In either case, if no such character occurs in this\n+     * string at or after position {@code fromIndex} and before position\n+     * {@code toIndex}, then {@code -1} is returned.\n+     *\n+     * <p>All indices are specified in {@code char} values\n+     * (Unicode code units).\n+     *\n+     * @param   ch          a character (Unicode code point).\n+     * @param   fromIndex   the index to start the search from (included).\n+     * @param   toIndex     the index to stop the search at (excluded).\n+     * @return  the index of the first occurrence of the character in the\n+     *          character sequence represented by this object that is greater\n+     *          than or equal to {@code fromIndex} and less than {@code toIndex},\n+     *          or {@code -1} if the character does not occur.\n+     * @throws  StringIndexOutOfBoundsException if {@code fromIndex}\n+     *          is negative, or {@code toIndex} is larger than the length of\n+     *          this {@code String} object, or {@code fromIndex} is larger than\n+     *          {@code toIndex}.\n+     * @since   21\n+     *\n+     * @apiNote An invocation of this method on a {@link String} {@code s}\n+     * is behaviorally equivalent to first checking {@code fromIndex} and\n+     * {@code toIndex} as specified in the {@code @throws} clause, and then,\n+     * absent an exception, invoking {@code s.indexOf(ch, fromIndex, toIndex)}.\n+     *\/\n+    public int checkedIndexOf(int ch, int fromIndex, int toIndex) {\n+        checkBoundsBeginEnd(fromIndex, toIndex, length());\n+        return indexOf(ch, fromIndex, toIndex);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import static org.testng.Assert.assertThrows;\n@@ -153,0 +154,5 @@\n+\n+                new Object[] { STRING_LDUPLICATE, 'A', 1, 0, -1},\n+                new Object[] { STRING_UDUPLICATE, 'A', 1, 0, -1},\n+                new Object[] { STRING_MDUPLICATE1, 'A', 1, 0, -1},\n+                new Object[] { STRING_MDUPLICATE2, 'A', 1, 0, -1},\n@@ -155,0 +161,1 @@\n+\n@@ -165,0 +172,15 @@\n+    @Test(dataProvider = \"provider\")\n+    public void testCheckedIndexOf(String str, int ch, int from, int to, int expected) {\n+        map.get(str).forEach(\n+                (source, data) -> {\n+                    if (0 <= from && from <= to && to <= data.length()) {\n+                        assertEquals(data.checkedIndexOf(ch, from, to), expected,\n+                                String.format(\"testing String(%s).checkedIndexOf(%d,%d,%d), source : %s, \",\n+                                        escapeNonASCIIs(data), ch, from, to, source));\n+                    } else {\n+                        assertThrows(StringIndexOutOfBoundsException.class,\n+                                () -> data.checkedIndexOf(ch, from, to));\n+                    }\n+                });\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/String\/CompactString\/IndexOfFromTo.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}