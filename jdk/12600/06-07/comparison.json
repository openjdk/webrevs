{"files":[{"patch":"@@ -1,203 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertThrows;\n-\n-\/*\n- * @test\n- * @bug 8302590\n- * @summary This one is for String.indexOf(int,int,int).\n- * @run testng\/othervm -XX:+CompactStrings IndexOfFromTo\n- * @run testng\/othervm -XX:-CompactStrings IndexOfFromTo\n- *\/\n-\n-public class IndexOfFromTo extends CompactString {\n-\n-    @DataProvider\n-    public Object[][] results() {\n-        return new Object[][] {\n-\n-                new Object[] { STRING_EMPTY, (int) 'Z', 0, 0, -1 },\n-\n-                new Object[] { STRING_L1, (int) 'A', 0, 1, 0 },\n-                new Object[] { STRING_L1, (int) 'A', 1, 1, -1 },\n-                new Object[] { STRING_L1, (int) 'Z', 0, 1, -1 },\n-\n-                new Object[] { STRING_L2, (int) 'A', 0, 2, 0 },\n-                new Object[] { STRING_L2, (int) 'A', 0, 1, 0 },\n-                new Object[] { STRING_L2, (int) 'A', 1, 1, -1 },\n-                new Object[] { STRING_L2, (int) 'A', 1, 2, -1 },\n-                new Object[] { STRING_L2, (int) 'B', 0, 2, 1 },\n-                new Object[] { STRING_L2, (int) 'B', 0, 1, -1 },\n-                new Object[] { STRING_L2, (int) 'B', 1, 1, -1 },\n-                new Object[] { STRING_L2, (int) 'B', 1, 2, 1 },\n-                new Object[] { STRING_L2, (int) 'B', 2, 2, -1 },\n-                new Object[] { STRING_L2, (int) 'Z', 0, 2, -1 },\n-\n-                new Object[] { STRING_L4, (int) 'A', 0, 4, 0 },\n-                new Object[] { STRING_L4, (int) 'A', 0, 1, 0 },\n-                new Object[] { STRING_L4, (int) 'A', 1, 4, -1 },\n-                new Object[] { STRING_L4, (int) 'D', 0, 4, 3 },\n-                new Object[] { STRING_L4, (int) 'D', 0, 3, -1 },\n-                new Object[] { STRING_L4, (int) 'D', 3, 4, 3 },\n-                new Object[] { STRING_L4, (int) 'D', 4, 4, -1 },\n-                new Object[] { STRING_L4, (int) 'Z', 0, 4, -1 },\n-\n-                new Object[] { STRING_LLONG, (int) 'A', 0, 8, 0 },\n-                new Object[] { STRING_LLONG, (int) 'A', 0, 1, 0 },\n-                new Object[] { STRING_LLONG, (int) 'A', 1, 1, -1 },\n-                new Object[] { STRING_LLONG, (int) 'A', 1, 8, -1 },\n-                new Object[] { STRING_LLONG, (int) 'H', 0, 8, 7 },\n-                new Object[] { STRING_LLONG, (int) 'H', 0, 7, -1 },\n-                new Object[] { STRING_LLONG, (int) 'H', 7, 8, 7 },\n-                new Object[] { STRING_LLONG, (int) 'H', 8, 8, -1 },\n-                new Object[] { STRING_LLONG, (int) 'Z', 0, 8, -1 },\n-\n-                new Object[] { STRING_U1, (int) '\\uFF21', 0, 1, 0 },\n-                new Object[] { STRING_U1, (int) '\\uFF21', 0, 0, -1 },\n-                new Object[] { STRING_U1, (int) '\\uFF21', 1, 1, -1 },\n-                new Object[] { STRING_U1, (int) 'A', 0, 1, -1 },\n-\n-                new Object[] { STRING_U2, (int) '\\uFF21', 0, 2, 0 },\n-                new Object[] { STRING_U2, (int) '\\uFF21', 0, 1, 0 },\n-                new Object[] { STRING_U2, (int) '\\uFF21', 1, 2, -1 },\n-                new Object[] { STRING_U2, (int) '\\uFF22', 0, 2, 1 },\n-                new Object[] { STRING_U2, (int) '\\uFF22', 0, 1, -1 },\n-                new Object[] { STRING_U2, (int) '\\uFF22', 1, 2, 1 },\n-                new Object[] { STRING_U2, (int) '\\uFF22', 2, 2, -1 },\n-                new Object[] { STRING_U2, (int) '\\uFF3A', 0, 2, -1 },\n-\n-                new Object[] { STRING_LDUPLICATE, (int) 'A', 0, 10, 0 },\n-                new Object[] { STRING_LDUPLICATE, (int) 'A', 1, 3, 2 },\n-                new Object[] { STRING_LDUPLICATE, (int) 'A', 3, 3, -1 },\n-                new Object[] { STRING_LDUPLICATE, (int) 'A', 3, 5, 4 },\n-                new Object[] { STRING_LDUPLICATE, (int) 'B', 0, 10, 1 },\n-                new Object[] { STRING_LDUPLICATE, (int) 'B', 2, 4, 3 },\n-                new Object[] { STRING_LDUPLICATE, (int) 'B', 4, 6, 5 },\n-\n-                new Object[] { STRING_M11, (int) 'A', 0, 2, 0 },\n-                new Object[] { STRING_M11, (int) 'A', 0, 1, 0 },\n-                new Object[] { STRING_M11, (int) 'A', 1, 2, -1 },\n-                new Object[] { STRING_M11, (int) 'A', 2, 2, -1 },\n-                new Object[] { STRING_M11, (int) '\\uFF21', 0, 2, 1 },\n-                new Object[] { STRING_M11, (int) '\\uFF21', 0, 1, -1 },\n-                new Object[] { STRING_M11, (int) '\\uFF21', 1, 2, 1 },\n-                new Object[] { STRING_M11, (int) '\\uFF21', 2, 2, -1 },\n-                new Object[] { STRING_M11, (int) '\\uFF3A', 0, 2, -1 },\n-\n-                new Object[] { STRING_M12, (int) '\\uFF21', 0, 2, 0 },\n-                new Object[] { STRING_M12, (int) '\\uFF21', 0, 1, 0 },\n-                new Object[] { STRING_M12, (int) '\\uFF21', 1, 2, -1 },\n-                new Object[] { STRING_M12, (int) '\\uFF21', 2, 2, -1 },\n-                new Object[] { STRING_M12, (int) 'A', 0, 2, 1 },\n-                new Object[] { STRING_M12, (int) 'A', 0, 1, -1 },\n-                new Object[] { STRING_M12, (int) 'A', 1, 2, 1 },\n-                new Object[] { STRING_M12, (int) 'A', 2, 2, -1 },\n-                new Object[] { STRING_M12, (int) '\\uFF3A', 0, 2, -1 },\n-\n-                new Object[] { STRING_UDUPLICATE, (int) '\\uFF21', 0, 10, 0 },\n-                new Object[] { STRING_UDUPLICATE, (int) '\\uFF21', 1, 3, 2 },\n-                new Object[] { STRING_UDUPLICATE, (int) '\\uFF21', 3, 3, -1 },\n-                new Object[] { STRING_UDUPLICATE, (int) '\\uFF21', 3, 5, 4 },\n-                new Object[] { STRING_UDUPLICATE, (int) '\\uFF22', 0, 10, 1 },\n-                new Object[] { STRING_UDUPLICATE, (int) '\\uFF22', 2, 4, 3 },\n-                new Object[] { STRING_UDUPLICATE, (int) '\\uFF22', 4, 6, 5 },\n-\n-                new Object[] { STRING_SUPPLEMENTARY, 'A', 0, 6, 5 },\n-                new Object[] { STRING_SUPPLEMENTARY, 'A', 2, 6, 5 },\n-                new Object[] { STRING_SUPPLEMENTARY, 'A', 2, 4, -1 },\n-                new Object[] { STRING_SUPPLEMENTARY, 'A', 4, 4, -1 },\n-                new Object[] { STRING_SUPPLEMENTARY, '\\uFF21', 0, 6, 4 },\n-                new Object[] { STRING_SUPPLEMENTARY, '\\uFF21', 2, 2, -1 },\n-                new Object[] { STRING_SUPPLEMENTARY, '\\uFF21', 2, 6, 4 },\n-                new Object[] { STRING_SUPPLEMENTARY, '\\uFF21', 2, 4, -1 },\n-                new Object[] { STRING_SUPPLEMENTARY,\n-                        Character.toCodePoint('\\uD801', '\\uDC00'), 0, 6, 0 },\n-                new Object[] { STRING_SUPPLEMENTARY,\n-                        Character.toCodePoint('\\uD801', '\\uDC00'), 0, 3, 0 },\n-                new Object[] { STRING_SUPPLEMENTARY,\n-                        Character.toCodePoint('\\uD801', '\\uDC00'), 0, 1, -1 },\n-                new Object[] { STRING_SUPPLEMENTARY,\n-                        Character.toCodePoint('\\uD801', '\\uDC00'), 1, 4, -1 },\n-                new Object[] { STRING_SUPPLEMENTARY,\n-                        Character.toCodePoint('\\uD801', '\\uDC01'), 0, 6, 2 },\n-                new Object[] { STRING_SUPPLEMENTARY,\n-                        Character.toCodePoint('\\uD801', '\\uDC01'), 2, 2, -1 },\n-                new Object[] { STRING_SUPPLEMENTARY,\n-                        Character.toCodePoint('\\uD801', '\\uDC01'), 2, 5, 2 },\n-                new Object[] { STRING_SUPPLEMENTARY,\n-                        Character.toCodePoint('\\uD801', '\\uDC01'), 2, 3, -1 },\n-                new Object[] { STRING_SUPPLEMENTARY,\n-                        Character.toCodePoint('\\uD801', '\\uDC01'), 3, 6, -1 },\n-        };\n-    }\n-\n-    @DataProvider\n-    public Object[][] exceptions() {\n-        return new Object[][]{\n-                new Object[]{STRING_LDUPLICATE, 'A', -1, 0},\n-                new Object[]{STRING_LDUPLICATE, 'A', 0, 100},\n-                new Object[]{STRING_LDUPLICATE, 'A', -1, 100},\n-                new Object[]{STRING_LDUPLICATE, 'A', 3, 1},\n-\n-                new Object[]{STRING_UDUPLICATE, 'A', -1, 0},\n-                new Object[]{STRING_UDUPLICATE, 'A', 0, 100},\n-                new Object[]{STRING_UDUPLICATE, 'A', -1, 100},\n-                new Object[]{STRING_UDUPLICATE, 'A', 3, 1},\n-\n-                new Object[]{STRING_MDUPLICATE1, 'A', -1, 0},\n-                new Object[]{STRING_MDUPLICATE1, 'A', 0, 100},\n-                new Object[]{STRING_MDUPLICATE1, 'A', -1, 100},\n-                new Object[]{STRING_MDUPLICATE1, 'A', 3, 1},\n-\n-                new Object[]{STRING_MDUPLICATE2, 'A', -1, 0},\n-                new Object[]{STRING_MDUPLICATE2, 'A', 0, 100},\n-                new Object[]{STRING_MDUPLICATE2, 'A', -1, 100},\n-                new Object[]{STRING_MDUPLICATE2, 'A', 3, 1},\n-        };\n-    }\n-\n-    @Test(dataProvider = \"results\")\n-    public void testIndexOf(String str, int ch, int from, int to, int expected) {\n-        map.get(str).forEach(\n-                (source, data) -> {\n-                    assertEquals(data.indexOf(ch, from, to), expected,\n-                            String.format(\"testing String(%s).indexOf(%d,%d,%d), source : %s, \",\n-                                    escapeNonASCIIs(data), ch, from, to, source));\n-                });\n-    }\n-\n-    @Test(dataProvider = \"exceptions\")\n-    public void testIndexOf(String str, int ch, int from, int to) {\n-        map.get(str).forEach(\n-                (source, data) -> {\n-                    assertThrows(StringIndexOutOfBoundsException.class,\n-                            () -> data.indexOf(ch, from, to));\n-                });\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/lang\/String\/CompactString\/IndexOfFromTo.java","additions":0,"deletions":203,"binary":false,"changes":203,"status":"deleted"},{"patch":"@@ -0,0 +1,223 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n+\n+\/*\n+ * @test\n+ * @bug 8302590\n+ * @summary This one is for String.indexOf(int,int,int).\n+ * @run testng IndexOfBeginEnd\n+ *\/\n+\n+public class IndexOfBeginEnd {\n+\n+    private static final String STRING_EMPTY = \"\";\n+    private static final String STRING_L1 = \"A\";\n+    private static final String STRING_L2 = \"AB\";\n+    private static final String STRING_L4 = \"ABCD\";\n+    private static final String STRING_LLONG = \"ABCDEFGH\";\n+    private static final String STRING_U1 = \"\\uFF21\";\n+    private static final String STRING_U2 = \"\\uFF21\\uFF22\";\n+    private static final String STRING_LDUPLICATE = \"ABABABABAB\";\n+    private static final String STRING_M11 = \"A\\uFF21\";\n+    private static final String STRING_M12 = \"\\uFF21A\";\n+    private static final String STRING_UDUPLICATE = \"\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\\uFF21\\uFF22\";\n+    private static final String STRING_SUPPLEMENTARY = \"\\uD801\\uDC00\\uD801\\uDC01\\uFF21A\";\n+    private static final String STRING_MDUPLICATE1 = \"\\uFF21A\\uFF21A\\uFF21A\\uFF21A\\uFF21A\";\n+    private static final String STRING_MDUPLICATE2 = \"A\\uFF21A\\uFF21A\\uFF21A\\uFF21A\\uFF21\";\n+\n+    @DataProvider\n+    public Object[][] results() {\n+        return new Object[][] {\n+\n+                new Object[] { STRING_EMPTY, (int) 'Z', 0, 0, -1 },\n+\n+                new Object[] { STRING_L1, (int) 'A', 0, 1, 0 },\n+                new Object[] { STRING_L1, (int) 'A', 1, 1, -1 },\n+                new Object[] { STRING_L1, (int) 'Z', 0, 1, -1 },\n+\n+                new Object[] { STRING_L2, (int) 'A', 0, 2, 0 },\n+                new Object[] { STRING_L2, (int) 'A', 0, 1, 0 },\n+                new Object[] { STRING_L2, (int) 'A', 1, 1, -1 },\n+                new Object[] { STRING_L2, (int) 'A', 1, 2, -1 },\n+                new Object[] { STRING_L2, (int) 'B', 0, 2, 1 },\n+                new Object[] { STRING_L2, (int) 'B', 0, 1, -1 },\n+                new Object[] { STRING_L2, (int) 'B', 1, 1, -1 },\n+                new Object[] { STRING_L2, (int) 'B', 1, 2, 1 },\n+                new Object[] { STRING_L2, (int) 'B', 2, 2, -1 },\n+                new Object[] { STRING_L2, (int) 'Z', 0, 2, -1 },\n+\n+                new Object[] { STRING_L4, (int) 'A', 0, 4, 0 },\n+                new Object[] { STRING_L4, (int) 'A', 0, 1, 0 },\n+                new Object[] { STRING_L4, (int) 'A', 1, 4, -1 },\n+                new Object[] { STRING_L4, (int) 'D', 0, 4, 3 },\n+                new Object[] { STRING_L4, (int) 'D', 0, 3, -1 },\n+                new Object[] { STRING_L4, (int) 'D', 3, 4, 3 },\n+                new Object[] { STRING_L4, (int) 'D', 4, 4, -1 },\n+                new Object[] { STRING_L4, (int) 'Z', 0, 4, -1 },\n+\n+                new Object[] { STRING_LLONG, (int) 'A', 0, 8, 0 },\n+                new Object[] { STRING_LLONG, (int) 'A', 0, 1, 0 },\n+                new Object[] { STRING_LLONG, (int) 'A', 1, 1, -1 },\n+                new Object[] { STRING_LLONG, (int) 'A', 1, 8, -1 },\n+                new Object[] { STRING_LLONG, (int) 'H', 0, 8, 7 },\n+                new Object[] { STRING_LLONG, (int) 'H', 0, 7, -1 },\n+                new Object[] { STRING_LLONG, (int) 'H', 7, 8, 7 },\n+                new Object[] { STRING_LLONG, (int) 'H', 8, 8, -1 },\n+                new Object[] { STRING_LLONG, (int) 'Z', 0, 8, -1 },\n+\n+                new Object[] { STRING_U1, (int) '\\uFF21', 0, 1, 0 },\n+                new Object[] { STRING_U1, (int) '\\uFF21', 0, 0, -1 },\n+                new Object[] { STRING_U1, (int) '\\uFF21', 1, 1, -1 },\n+                new Object[] { STRING_U1, (int) 'A', 0, 1, -1 },\n+\n+                new Object[] { STRING_U2, (int) '\\uFF21', 0, 2, 0 },\n+                new Object[] { STRING_U2, (int) '\\uFF21', 0, 1, 0 },\n+                new Object[] { STRING_U2, (int) '\\uFF21', 1, 2, -1 },\n+                new Object[] { STRING_U2, (int) '\\uFF22', 0, 2, 1 },\n+                new Object[] { STRING_U2, (int) '\\uFF22', 0, 1, -1 },\n+                new Object[] { STRING_U2, (int) '\\uFF22', 1, 2, 1 },\n+                new Object[] { STRING_U2, (int) '\\uFF22', 2, 2, -1 },\n+                new Object[] { STRING_U2, (int) '\\uFF3A', 0, 2, -1 },\n+\n+                new Object[] { STRING_LDUPLICATE, (int) 'A', 0, 10, 0 },\n+                new Object[] { STRING_LDUPLICATE, (int) 'A', 1, 3, 2 },\n+                new Object[] { STRING_LDUPLICATE, (int) 'A', 3, 3, -1 },\n+                new Object[] { STRING_LDUPLICATE, (int) 'A', 3, 5, 4 },\n+                new Object[] { STRING_LDUPLICATE, (int) 'B', 0, 10, 1 },\n+                new Object[] { STRING_LDUPLICATE, (int) 'B', 2, 4, 3 },\n+                new Object[] { STRING_LDUPLICATE, (int) 'B', 4, 6, 5 },\n+\n+                new Object[] { STRING_M11, (int) 'A', 0, 2, 0 },\n+                new Object[] { STRING_M11, (int) 'A', 0, 1, 0 },\n+                new Object[] { STRING_M11, (int) 'A', 1, 2, -1 },\n+                new Object[] { STRING_M11, (int) 'A', 2, 2, -1 },\n+                new Object[] { STRING_M11, (int) '\\uFF21', 0, 2, 1 },\n+                new Object[] { STRING_M11, (int) '\\uFF21', 0, 1, -1 },\n+                new Object[] { STRING_M11, (int) '\\uFF21', 1, 2, 1 },\n+                new Object[] { STRING_M11, (int) '\\uFF21', 2, 2, -1 },\n+                new Object[] { STRING_M11, (int) '\\uFF3A', 0, 2, -1 },\n+\n+                new Object[] { STRING_M12, (int) '\\uFF21', 0, 2, 0 },\n+                new Object[] { STRING_M12, (int) '\\uFF21', 0, 1, 0 },\n+                new Object[] { STRING_M12, (int) '\\uFF21', 1, 2, -1 },\n+                new Object[] { STRING_M12, (int) '\\uFF21', 2, 2, -1 },\n+                new Object[] { STRING_M12, (int) 'A', 0, 2, 1 },\n+                new Object[] { STRING_M12, (int) 'A', 0, 1, -1 },\n+                new Object[] { STRING_M12, (int) 'A', 1, 2, 1 },\n+                new Object[] { STRING_M12, (int) 'A', 2, 2, -1 },\n+                new Object[] { STRING_M12, (int) '\\uFF3A', 0, 2, -1 },\n+\n+                new Object[] { STRING_UDUPLICATE, (int) '\\uFF21', 0, 10, 0 },\n+                new Object[] { STRING_UDUPLICATE, (int) '\\uFF21', 1, 3, 2 },\n+                new Object[] { STRING_UDUPLICATE, (int) '\\uFF21', 3, 3, -1 },\n+                new Object[] { STRING_UDUPLICATE, (int) '\\uFF21', 3, 5, 4 },\n+                new Object[] { STRING_UDUPLICATE, (int) '\\uFF22', 0, 10, 1 },\n+                new Object[] { STRING_UDUPLICATE, (int) '\\uFF22', 2, 4, 3 },\n+                new Object[] { STRING_UDUPLICATE, (int) '\\uFF22', 4, 6, 5 },\n+\n+                new Object[] { STRING_SUPPLEMENTARY, 'A', 0, 6, 5 },\n+                new Object[] { STRING_SUPPLEMENTARY, 'A', 2, 6, 5 },\n+                new Object[] { STRING_SUPPLEMENTARY, 'A', 2, 4, -1 },\n+                new Object[] { STRING_SUPPLEMENTARY, 'A', 4, 4, -1 },\n+                new Object[] { STRING_SUPPLEMENTARY, '\\uFF21', 0, 6, 4 },\n+                new Object[] { STRING_SUPPLEMENTARY, '\\uFF21', 2, 2, -1 },\n+                new Object[] { STRING_SUPPLEMENTARY, '\\uFF21', 2, 6, 4 },\n+                new Object[] { STRING_SUPPLEMENTARY, '\\uFF21', 2, 4, -1 },\n+                new Object[] { STRING_SUPPLEMENTARY,\n+                        Character.toCodePoint('\\uD801', '\\uDC00'), 0, 6, 0 },\n+                new Object[] { STRING_SUPPLEMENTARY,\n+                        Character.toCodePoint('\\uD801', '\\uDC00'), 0, 3, 0 },\n+                new Object[] { STRING_SUPPLEMENTARY,\n+                        Character.toCodePoint('\\uD801', '\\uDC00'), 0, 1, -1 },\n+                new Object[] { STRING_SUPPLEMENTARY,\n+                        Character.toCodePoint('\\uD801', '\\uDC00'), 1, 4, -1 },\n+                new Object[] { STRING_SUPPLEMENTARY,\n+                        Character.toCodePoint('\\uD801', '\\uDC01'), 0, 6, 2 },\n+                new Object[] { STRING_SUPPLEMENTARY,\n+                        Character.toCodePoint('\\uD801', '\\uDC01'), 2, 2, -1 },\n+                new Object[] { STRING_SUPPLEMENTARY,\n+                        Character.toCodePoint('\\uD801', '\\uDC01'), 2, 5, 2 },\n+                new Object[] { STRING_SUPPLEMENTARY,\n+                        Character.toCodePoint('\\uD801', '\\uDC01'), 2, 3, -1 },\n+                new Object[] { STRING_SUPPLEMENTARY,\n+                        Character.toCodePoint('\\uD801', '\\uDC01'), 3, 6, -1 },\n+        };\n+    }\n+\n+    @DataProvider\n+    public Object[][] exceptions() {\n+        return new Object[][]{\n+                new Object[]{STRING_LDUPLICATE, 'A', -1, 0},\n+                new Object[]{STRING_LDUPLICATE, 'A', 0, 100},\n+                new Object[]{STRING_LDUPLICATE, 'A', -1, 100},\n+                new Object[]{STRING_LDUPLICATE, 'A', 3, 1},\n+\n+                new Object[]{STRING_UDUPLICATE, 'A', -1, 0},\n+                new Object[]{STRING_UDUPLICATE, 'A', 0, 100},\n+                new Object[]{STRING_UDUPLICATE, 'A', -1, 100},\n+                new Object[]{STRING_UDUPLICATE, 'A', 3, 1},\n+\n+                new Object[]{STRING_MDUPLICATE1, 'A', -1, 0},\n+                new Object[]{STRING_MDUPLICATE1, 'A', 0, 100},\n+                new Object[]{STRING_MDUPLICATE1, 'A', -1, 100},\n+                new Object[]{STRING_MDUPLICATE1, 'A', 3, 1},\n+\n+                new Object[]{STRING_MDUPLICATE2, 'A', -1, 0},\n+                new Object[]{STRING_MDUPLICATE2, 'A', 0, 100},\n+                new Object[]{STRING_MDUPLICATE2, 'A', -1, 100},\n+                new Object[]{STRING_MDUPLICATE2, 'A', 3, 1},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"results\")\n+    public void testIndexOf(String str, int ch, int from, int to, int expected) {\n+        assertEquals(str.indexOf(ch, from, to), expected,\n+                String.format(\"testing String(%s).indexOf(%d,%d,%d)\",\n+                        escapeNonASCIIs(str), ch, from, to));\n+    }\n+\n+    @Test(dataProvider = \"exceptions\")\n+    public void testIndexOf(String str, int ch, int from, int to) {\n+        assertThrows(StringIndexOutOfBoundsException.class,\n+                () -> str.indexOf(ch, from, to));\n+    }\n+\n+    private static String escapeNonASCIIs(String s) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < s.length(); ++i) {\n+            char c = s.charAt(i);\n+            if (c >= 0x100) {\n+                sb.append(\"\\\\u\").append(Integer.toHexString(c));\n+            } else {\n+                sb.append(c);\n+            }\n+        }\n+        return sb.toString();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/String\/IndexOfBeginEnd.java","additions":223,"deletions":0,"binary":false,"changes":223,"status":"added"}]}