{"files":[{"patch":"@@ -2389,4 +2389,0 @@\n-     *\n-     * @apiNote An invocation of this method on a {@link String} {@code s}\n-     * is behaviorally equivalent to the invocation\n-     * {@code s.indexOf(ch, 0, s.length())}.\n@@ -2395,1 +2391,1 @@\n-        return indexOf(ch, 0, length());\n+        return indexOf(ch, 0);\n@@ -2437,3 +2433,8 @@\n-     * @apiNote An invocation of this method on a {@link String} {@code s}\n-     * is behaviorally equivalent to the invocation\n-     * {@code s.indexOf(ch, fromIndex, s.length())}.\n+     * @apiNote\n+     * An invocation of this method returns -1 when {@code fromIndex} happens\n+     * to be too large. The result is thus indistinguishable from a genuine\n+     * absence of {@code ch} in the string.\n+     * If stricter behavior is needed, {@link #indexOf(int, int, int)}\n+     * should be considered instead. For example,\n+     * {@code this.indexOf(ch, fromIndex, this.length())} would throw if\n+     * {@code fromIndex} were negative or larger than the string length.\n@@ -2442,50 +2443,2 @@\n-        return indexOf(ch, fromIndex, length());\n-    }\n-\n-    \/**\n-     * Returns the index within this string of the first occurrence of the\n-     * specified character, starting the search at {@code fromIndex} and\n-     * stopping before {@code toIndex}.\n-     *\n-     * <p>If a character with value {@code ch} occurs in the\n-     * character sequence represented by this {@code String}\n-     * object at an index no smaller than {@code fromIndex} but smaller than\n-     * {@code toIndex}, then\n-     * the index of the first such occurrence is returned. For values\n-     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n-     * this is the smallest value <i>k<\/i> such that:\n-     * <blockquote><pre>\n-     * (this.charAt(<i>k<\/i>) == ch) &amp;&amp; (fromIndex &lt;= <i>k<\/i> &lt; toIndex)\n-     * <\/pre><\/blockquote>\n-     * is true. For other values of {@code ch}, it is the\n-     * smallest value <i>k<\/i> such that:\n-     * <blockquote><pre>\n-     * (this.codePointAt(<i>k<\/i>) == ch) &amp;&amp; (fromIndex &lt;= <i>k<\/i> &lt; toIndex)\n-     * <\/pre><\/blockquote>\n-     * is true. In either case, if no such character occurs in this\n-     * string at or after position {@code fromIndex} and before position\n-     * {@code toIndex}, then {@code -1} is returned.\n-     *\n-     * <p>There are no restrictions on the value of {@code fromIndex} and\n-     * {@code toIndex}. Negative values have the same effect as if they were zero.\n-     * Values greater than the length of this string have the same effect\n-     * as if they were equal to the length of this string.\n-     *\n-     * <p>As consequence of these rules, if {@code fromIndex} is greater than\n-     * or equal to {@code toIndex}, then {@code -1} is returned.\n-     *\n-     * <p>All indices are specified in {@code char} values\n-     * (Unicode code units).\n-     *\n-     * @param   ch          a character (Unicode code point).\n-     * @param   fromIndex   the index to start the search from (included).\n-     * @param   toIndex     the index to stop the search at (excluded).\n-     * @return  the index of the first occurrence of the character in the\n-     *          character sequence represented by this object that is greater\n-     *          than or equal to {@code fromIndex} and less than {@code toIndex},\n-     *          or {@code -1} if the character does not occur.\n-     * @since   21\n-     *\/\n-    public int indexOf(int ch, int fromIndex, int toIndex) {\n-        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex, toIndex)\n-                : StringUTF16.indexOf(value, ch, fromIndex, toIndex);\n+        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex, value.length)\n+                : StringUTF16.indexOf(value, ch, fromIndex, value.length >> 1);\n@@ -2533,5 +2486,0 @@\n-     *\n-     * @apiNote An invocation of this method on a {@link String} {@code s}\n-     * is behaviorally equivalent to first checking {@code fromIndex} and\n-     * {@code toIndex} as specified in the {@code @throws} clause, and then,\n-     * absent an exception, invoking {@code s.indexOf(ch, fromIndex, toIndex)}.\n@@ -2539,1 +2487,1 @@\n-    public int checkedIndexOf(int ch, int fromIndex, int toIndex) {\n+    public int indexOf(int ch, int fromIndex, int toIndex) {\n@@ -2541,1 +2489,2 @@\n-        return indexOf(ch, fromIndex, toIndex);\n+        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex, toIndex)\n+                : StringUTF16.indexOf(value, ch, fromIndex, toIndex);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":14,"deletions":65,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -199,4 +199,0 @@\n-    public static int indexOf(byte[] value, int ch, int fromIndex) {\n-        return indexOf(value, ch, fromIndex, value.length);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -422,4 +422,0 @@\n-    public static int indexOf(byte[] value, int ch, int fromIndex) {\n-        return indexOf(value, ch, fromIndex, value.length >> 1);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-    private static final int MIN = Integer.MIN_VALUE;\n-    private static final int MAX = Integer.MAX_VALUE;\n@@ -43,1 +41,1 @@\n-    public Object[][] provider() {\n+    public Object[][] results() {\n@@ -46,1 +44,1 @@\n-                new Object[] { STRING_EMPTY, (int) 'Z', MIN, MAX, -1 },\n+                new Object[] { STRING_EMPTY, (int) 'Z', 0, 0, -1 },\n@@ -48,4 +46,3 @@\n-                new Object[] { STRING_L1, (int) 'A', MIN, MAX, 0 },\n-                new Object[] { STRING_L1, (int) 'A', 1, MAX, -1 },\n-                new Object[] { STRING_L1, (int) 'A', MIN, 1, 0 },\n-                new Object[] { STRING_L1, (int) 'Z', MIN, MAX, -1 },\n+                new Object[] { STRING_L1, (int) 'A', 0, 1, 0 },\n+                new Object[] { STRING_L1, (int) 'A', 1, 1, -1 },\n+                new Object[] { STRING_L1, (int) 'Z', 0, 1, -1 },\n@@ -53,1 +50,1 @@\n-                new Object[] { STRING_L2, (int) 'A', MIN, MAX, 0 },\n+                new Object[] { STRING_L2, (int) 'A', 0, 2, 0 },\n@@ -55,0 +52,1 @@\n+                new Object[] { STRING_L2, (int) 'A', 1, 1, -1 },\n@@ -56,2 +54,1 @@\n-                new Object[] { STRING_L2, (int) 'A', 1, MAX, -1 },\n-                new Object[] { STRING_L2, (int) 'B', MIN, MAX, 1 },\n+                new Object[] { STRING_L2, (int) 'B', 0, 2, 1 },\n@@ -59,0 +56,1 @@\n+                new Object[] { STRING_L2, (int) 'B', 1, 1, -1 },\n@@ -60,2 +58,2 @@\n-                new Object[] { STRING_L2, (int) 'B', 2, MAX, -1 },\n-                new Object[] { STRING_L2, (int) 'Z', MIN, MAX, -1 },\n+                new Object[] { STRING_L2, (int) 'B', 2, 2, -1 },\n+                new Object[] { STRING_L2, (int) 'Z', 0, 2, -1 },\n@@ -63,1 +61,1 @@\n-                new Object[] { STRING_L4, (int) 'A', MIN, MAX, 0 },\n+                new Object[] { STRING_L4, (int) 'A', 0, 4, 0 },\n@@ -66,2 +64,1 @@\n-                new Object[] { STRING_L4, (int) 'A', 1, MAX, -1 },\n-                new Object[] { STRING_L4, (int) 'D', MIN, MAX, 3 },\n+                new Object[] { STRING_L4, (int) 'D', 0, 4, 3 },\n@@ -70,2 +67,2 @@\n-                new Object[] { STRING_L4, (int) 'D', 4, MAX, -1 },\n-                new Object[] { STRING_L4, (int) 'Z', MIN, MAX, -1 },\n+                new Object[] { STRING_L4, (int) 'D', 4, 4, -1 },\n+                new Object[] { STRING_L4, (int) 'Z', 0, 4, -1 },\n@@ -73,1 +70,1 @@\n-                new Object[] { STRING_LLONG, (int) 'A', MIN, MAX, 0 },\n+                new Object[] { STRING_LLONG, (int) 'A', 0, 8, 0 },\n@@ -75,0 +72,1 @@\n+                new Object[] { STRING_LLONG, (int) 'A', 1, 1, -1 },\n@@ -76,2 +74,1 @@\n-                new Object[] { STRING_LLONG, (int) 'A', 1, MAX, -1 },\n-                new Object[] { STRING_LLONG, (int) 'H', MIN, MAX, 7 },\n+                new Object[] { STRING_LLONG, (int) 'H', 0, 8, 7 },\n@@ -80,2 +77,2 @@\n-                new Object[] { STRING_LLONG, (int) 'H', 8, MAX, -1 },\n-                new Object[] { STRING_LLONG, (int) 'Z', MIN, MAX, -1 },\n+                new Object[] { STRING_LLONG, (int) 'H', 8, 8, -1 },\n+                new Object[] { STRING_LLONG, (int) 'Z', 0, 8, -1 },\n@@ -83,4 +80,4 @@\n-                new Object[] { STRING_U1, (int) '\\uFF21', MIN, MAX, 0 },\n-                new Object[] { STRING_U1, (int) '\\uFF21', 1, MAX, -1 },\n-                new Object[] { STRING_U1, (int) '\\uFF21', MIN, 1, 0 },\n-                new Object[] { STRING_U1, (int) 'A', MIN, MAX, -1 },\n+                new Object[] { STRING_U1, (int) '\\uFF21', 0, 1, 0 },\n+                new Object[] { STRING_U1, (int) '\\uFF21', 0, 0, -1 },\n+                new Object[] { STRING_U1, (int) '\\uFF21', 1, 1, -1 },\n+                new Object[] { STRING_U1, (int) 'A', 0, 1, -1 },\n@@ -88,1 +85,1 @@\n-                new Object[] { STRING_U2, (int) '\\uFF21', MIN, MAX, 0 },\n+                new Object[] { STRING_U2, (int) '\\uFF21', 0, 2, 0 },\n@@ -91,2 +88,1 @@\n-                new Object[] { STRING_U2, (int) '\\uFF21', 1, MAX, -1 },\n-                new Object[] { STRING_U2, (int) '\\uFF22', MIN, MAX, 1 },\n+                new Object[] { STRING_U2, (int) '\\uFF22', 0, 2, 1 },\n@@ -95,2 +91,2 @@\n-                new Object[] { STRING_U2, (int) '\\uFF22', 2, MAX, -1 },\n-                new Object[] { STRING_U2, (int) '\\uFF3A', MIN, MAX, -1 },\n+                new Object[] { STRING_U2, (int) '\\uFF22', 2, 2, -1 },\n+                new Object[] { STRING_U2, (int) '\\uFF3A', 0, 2, -1 },\n@@ -98,1 +94,1 @@\n-                new Object[] { STRING_LDUPLICATE, (int) 'A', MIN, MAX, 0 },\n+                new Object[] { STRING_LDUPLICATE, (int) 'A', 0, 10, 0 },\n@@ -100,0 +96,1 @@\n+                new Object[] { STRING_LDUPLICATE, (int) 'A', 3, 3, -1 },\n@@ -101,1 +98,1 @@\n-                new Object[] { STRING_LDUPLICATE, (int) 'B', MIN, MAX, 1 },\n+                new Object[] { STRING_LDUPLICATE, (int) 'B', 0, 10, 1 },\n@@ -105,1 +102,1 @@\n-                new Object[] { STRING_M11, (int) 'A', MIN, MAX, 0 },\n+                new Object[] { STRING_M11, (int) 'A', 0, 2, 0 },\n@@ -108,2 +105,2 @@\n-                new Object[] { STRING_M11, (int) 'A', 2, MAX, -1 },\n-                new Object[] { STRING_M11, (int) '\\uFF21', MIN, MAX, 1 },\n+                new Object[] { STRING_M11, (int) 'A', 2, 2, -1 },\n+                new Object[] { STRING_M11, (int) '\\uFF21', 0, 2, 1 },\n@@ -112,2 +109,2 @@\n-                new Object[] { STRING_M11, (int) '\\uFF21', 2, MAX, -1 },\n-                new Object[] { STRING_M11, (int) '\\uFF3A', MIN, MAX, -1 },\n+                new Object[] { STRING_M11, (int) '\\uFF21', 2, 2, -1 },\n+                new Object[] { STRING_M11, (int) '\\uFF3A', 0, 2, -1 },\n@@ -115,1 +112,1 @@\n-                new Object[] { STRING_M12, (int) '\\uFF21', MIN, MAX, 0 },\n+                new Object[] { STRING_M12, (int) '\\uFF21', 0, 2, 0 },\n@@ -118,2 +115,2 @@\n-                new Object[] { STRING_M12, (int) '\\uFF21', 2, MAX, -1 },\n-                new Object[] { STRING_M12, (int) 'A', MIN, MAX, 1 },\n+                new Object[] { STRING_M12, (int) '\\uFF21', 2, 2, -1 },\n+                new Object[] { STRING_M12, (int) 'A', 0, 2, 1 },\n@@ -122,2 +119,2 @@\n-                new Object[] { STRING_M12, (int) 'A', 2, MAX, -1 },\n-                new Object[] { STRING_M12, (int) '\\uFF3A', MIN, MAX, -1 },\n+                new Object[] { STRING_M12, (int) 'A', 2, 2, -1 },\n+                new Object[] { STRING_M12, (int) '\\uFF3A', 0, 2, -1 },\n@@ -125,1 +122,1 @@\n-                new Object[] { STRING_UDUPLICATE, (int) '\\uFF21', MIN, MAX, 0 },\n+                new Object[] { STRING_UDUPLICATE, (int) '\\uFF21', 0, 10, 0 },\n@@ -127,0 +124,1 @@\n+                new Object[] { STRING_UDUPLICATE, (int) '\\uFF21', 3, 3, -1 },\n@@ -128,1 +126,1 @@\n-                new Object[] { STRING_UDUPLICATE, (int) '\\uFF22', MIN, MAX, 1 },\n+                new Object[] { STRING_UDUPLICATE, (int) '\\uFF22', 0, 10, 1 },\n@@ -132,1 +130,1 @@\n-                new Object[] { STRING_SUPPLEMENTARY, 'A', MIN, MAX, 5 },\n+                new Object[] { STRING_SUPPLEMENTARY, 'A', 0, 6, 5 },\n@@ -135,1 +133,3 @@\n-                new Object[] { STRING_SUPPLEMENTARY, '\\uFF21', MIN, MAX, 4 },\n+                new Object[] { STRING_SUPPLEMENTARY, 'A', 4, 4, -1 },\n+                new Object[] { STRING_SUPPLEMENTARY, '\\uFF21', 0, 6, 4 },\n+                new Object[] { STRING_SUPPLEMENTARY, '\\uFF21', 2, 2, -1 },\n@@ -139,1 +139,1 @@\n-                        Character.toCodePoint('\\uD801', '\\uDC00'), MIN, MAX, 0 },\n+                        Character.toCodePoint('\\uD801', '\\uDC00'), 0, 6, 0 },\n@@ -147,1 +147,3 @@\n-                        Character.toCodePoint('\\uD801', '\\uDC01'), MIN, MAX, 2 },\n+                        Character.toCodePoint('\\uD801', '\\uDC01'), 0, 6, 2 },\n+                new Object[] { STRING_SUPPLEMENTARY,\n+                        Character.toCodePoint('\\uD801', '\\uDC01'), 2, 2, -1 },\n@@ -154,0 +156,2 @@\n+        };\n+    }\n@@ -155,4 +159,22 @@\n-                new Object[] { STRING_LDUPLICATE, 'A', 1, 0, -1},\n-                new Object[] { STRING_UDUPLICATE, 'A', 1, 0, -1},\n-                new Object[] { STRING_MDUPLICATE1, 'A', 1, 0, -1},\n-                new Object[] { STRING_MDUPLICATE2, 'A', 1, 0, -1},\n+    @DataProvider\n+    public Object[][] exceptions() {\n+        return new Object[][]{\n+                new Object[]{STRING_LDUPLICATE, 'A', -1, 0},\n+                new Object[]{STRING_LDUPLICATE, 'A', 0, 100},\n+                new Object[]{STRING_LDUPLICATE, 'A', -1, 100},\n+                new Object[]{STRING_LDUPLICATE, 'A', 3, 1},\n+\n+                new Object[]{STRING_UDUPLICATE, 'A', -1, 0},\n+                new Object[]{STRING_UDUPLICATE, 'A', 0, 100},\n+                new Object[]{STRING_UDUPLICATE, 'A', -1, 100},\n+                new Object[]{STRING_UDUPLICATE, 'A', 3, 1},\n+\n+                new Object[]{STRING_MDUPLICATE1, 'A', -1, 0},\n+                new Object[]{STRING_MDUPLICATE1, 'A', 0, 100},\n+                new Object[]{STRING_MDUPLICATE1, 'A', -1, 100},\n+                new Object[]{STRING_MDUPLICATE1, 'A', 3, 1},\n+\n+                new Object[]{STRING_MDUPLICATE2, 'A', -1, 0},\n+                new Object[]{STRING_MDUPLICATE2, 'A', 0, 100},\n+                new Object[]{STRING_MDUPLICATE2, 'A', -1, 100},\n+                new Object[]{STRING_MDUPLICATE2, 'A', 3, 1},\n@@ -162,1 +184,1 @@\n-    @Test(dataProvider = \"provider\")\n+    @Test(dataProvider = \"results\")\n@@ -166,3 +188,3 @@\n-                    assertEquals(data.indexOf(ch, from, to), expected, String.format(\n-                            \"testing String(%s).indexOf(%d,%d,%d), source : %s, \",\n-                            escapeNonASCIIs(data), ch, from, to, source));\n+                    assertEquals(data.indexOf(ch, from, to), expected,\n+                            String.format(\"testing String(%s).indexOf(%d,%d,%d), source : %s, \",\n+                                    escapeNonASCIIs(data), ch, from, to, source));\n@@ -172,2 +194,2 @@\n-    @Test(dataProvider = \"provider\")\n-    public void testCheckedIndexOf(String str, int ch, int from, int to, int expected) {\n+    @Test(dataProvider = \"exceptions\")\n+    public void testIndexOf(String str, int ch, int from, int to) {\n@@ -176,8 +198,2 @@\n-                    if (0 <= from && from <= to && to <= data.length()) {\n-                        assertEquals(data.checkedIndexOf(ch, from, to), expected,\n-                                String.format(\"testing String(%s).checkedIndexOf(%d,%d,%d), source : %s, \",\n-                                        escapeNonASCIIs(data), ch, from, to, source));\n-                    } else {\n-                        assertThrows(StringIndexOutOfBoundsException.class,\n-                                () -> data.checkedIndexOf(ch, from, to));\n-                    }\n+                    assertThrows(StringIndexOutOfBoundsException.class,\n+                            () -> data.indexOf(ch, from, to));\n","filename":"test\/jdk\/java\/lang\/String\/CompactString\/IndexOfFromTo.java","additions":84,"deletions":68,"binary":false,"changes":152,"status":"modified"}]}