{"files":[{"patch":"@@ -224,0 +224,3 @@\n+        if (bci < 0 || bci > codeLength)\n+            throw new IllegalArgumentException(String.format(\"Bytecode offset out of range; bci=%d, codeLength=%d\",\n+                                                             bci, codeLength));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8320360 8330684 8331320 8331655 8331940\n+ * @bug 8320360 8330684 8331320 8331655 8331940 8332486\n@@ -40,0 +40,2 @@\n+import java.lang.classfile.attribute.LocalVariableInfo;\n+import java.lang.classfile.attribute.LocalVariableTableAttribute;\n@@ -42,0 +44,1 @@\n+import java.lang.classfile.instruction.LocalVariable;\n@@ -178,0 +181,12 @@\n+\n+    @Test\n+    void testLocalVariableOutOfBounds() {\n+        assertThrows(IllegalArgumentException.class, () ->\n+                ClassFile.of().parse(ClassFile.of().build(ClassDesc.of(\"LocalVariableClass\"), cb -> cb.withMethodBody(\n+                \"localVariableMethod\", MethodTypeDesc.of(ConstantDescs.CD_void), 0, cob -> ((DirectCodeBuilder)cob\n+                        .return_())\n+                        .writeAttribute(LocalVariableTableAttribute.of(List.of(\n+                                new UnboundAttribute.UnboundLocalVariableInfo(0, 200,\n+                                        cob.constantPool().utf8Entry(\"a\"), cob.constantPool().utf8Entry(\"A\"), 0))))\n+                ))).methods().get(0).code().get().elementList());\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"}]}