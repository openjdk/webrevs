{"files":[{"patch":"@@ -801,2 +801,2 @@\n-            } catch (Throwable t) {\n-                resolvedHolder = null;\n+            } catch (Throwable cause) {\n+                return new UnresolvedJavaField(fieldHolder, lookupUtf8(getNameRefIndexAt(nameAndTypeIndex)), type, cause);\n@@ -805,1 +805,0 @@\n-                \/\/ There was an exception resolving the field or it returned null so return an unresolved field.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,6 @@\n-    public UnresolvedJavaField(JavaType holder, String name, JavaType type) {\n+    \/**\n+     * The reason field resolution failed. Can be null.\n+     *\/\n+    private final Throwable cause;\n+\n+    public UnresolvedJavaField(JavaType holder, String name, JavaType type, Throwable cause) {\n@@ -38,0 +43,12 @@\n+        this.cause = cause;\n+    }\n+\n+    public UnresolvedJavaField(JavaType holder, String name, JavaType type) {\n+        this(holder, name, type, null);\n+    }\n+\n+    \/**\n+     * Gets the exception, if any, representing the reason field resolution resulted in this object.\n+     *\/\n+    public Throwable getCause() {\n+        return cause;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/UnresolvedJavaField.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,6 @@\n-    public UnresolvedJavaMethod(String name, Signature signature, JavaType holder) {\n+    \/**\n+     * The reason method resolution failed. Can be null.\n+     *\/\n+    private final Throwable cause;\n+\n+    public UnresolvedJavaMethod(String name, Signature signature, JavaType holder, Throwable cause) {\n@@ -38,0 +43,12 @@\n+        this.cause = cause;\n+    }\n+\n+    public UnresolvedJavaMethod(String name, Signature signature, JavaType holder) {\n+        this(name, signature, holder, null);\n+    }\n+\n+    \/**\n+     * Gets the exception, if any, representing the reason method resolution resulted in this object.\n+     *\/\n+    public Throwable getCause() {\n+        return cause;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/UnresolvedJavaMethod.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,5 @@\n+    \/**\n+     * The reason type resolution failed. Can be null.\n+     *\/\n+    private final Throwable cause;\n+\n@@ -36,1 +41,1 @@\n-    private UnresolvedJavaType(String name) {\n+    private UnresolvedJavaType(String name, Throwable cause) {\n@@ -38,0 +43,1 @@\n+        this.cause = cause;\n@@ -45,1 +51,15 @@\n-        return new UnresolvedJavaType(name);\n+        return new UnresolvedJavaType(name, null);\n+    }\n+\n+    \/**\n+     * Creates an unresolved type for a valid {@link JavaType#getName() type name}.\n+     *\/\n+    public static UnresolvedJavaType create(String name, Throwable cause) {\n+        return new UnresolvedJavaType(name, cause);\n+    }\n+\n+    \/**\n+     * Gets the exception, if any, representing the reason type resolution resulted in this object.\n+     *\/\n+    public Throwable getCause() {\n+        return cause;\n@@ -51,1 +71,1 @@\n-            return new UnresolvedJavaType(getName().substring(1));\n+            return new UnresolvedJavaType(getName().substring(1), null);\n@@ -58,1 +78,1 @@\n-        return new UnresolvedJavaType('[' + getName());\n+        return new UnresolvedJavaType('[' + getName(), null);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/UnresolvedJavaType.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"}]}