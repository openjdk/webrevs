{"files":[{"patch":"@@ -846,1 +846,1 @@\n-            pendingLine = null;\n+            pendingLineCharacters = null;\n@@ -980,2 +980,2 @@\n-    private String pendingLine;\n-    private int pendingLinePointer;\n+    private char[] pendingLineCharacters;\n+    private int pendingLineCharactersPointer;\n@@ -988,1 +988,5 @@\n-            char userChar = readUserInputChar();\n+            int userCharInput = readUserInputChar();\n+            if (userCharInput == (-1)) {\n+                return -1;\n+            }\n+            char userChar = (char) userCharInput;\n@@ -994,3 +998,5 @@\n-                char lowSurrogate = readUserInputChar();\n-                if (Character.isLowSurrogate(lowSurrogate)) {\n-                    dataToConvert.append(lowSurrogate);\n+                int lowSurrogateInput = readUserInputChar();\n+                if (lowSurrogateInput == (-1)) {\n+                    \/\/end of input, ignore at this stage\n+                } else if (Character.isLowSurrogate((char) lowSurrogateInput)) {\n+                    dataToConvert.append((char) lowSurrogateInput);\n@@ -999,1 +1005,1 @@\n-                    pendingLinePointer--;\n+                    pendingLineCharactersPointer--;\n@@ -1009,4 +1015,13 @@\n-    public synchronized char readUserInputChar() throws IOException {\n-        while (pendingLine == null || pendingLine.length() <= pendingLinePointer) {\n-            pendingLine = doReadUserLine(\"\", null) + System.getProperty(\"line.separator\");\n-            pendingLinePointer = 0;\n+    public synchronized int readUserInputChar() throws IOException {\n+        if (pendingLineCharacters != null && pendingLineCharacters.length == 0) {\n+            return -1;\n+        }\n+        while (pendingLineCharacters == null || pendingLineCharacters.length <= pendingLineCharactersPointer) {\n+            String readLine = doReadUserLine(\"\", null);\n+            if (readLine == null) {\n+                pendingLineCharacters = new char[0];\n+                return -1;\n+            } else {\n+                pendingLineCharacters = (readLine + System.getProperty(\"line.separator\")).toCharArray();\n+            }\n+            pendingLineCharactersPointer = 0;\n@@ -1014,1 +1029,1 @@\n-        return pendingLine.charAt(pendingLinePointer++);\n+        return pendingLineCharacters[pendingLineCharactersPointer++];\n@@ -1020,2 +1035,6 @@\n-        if (pendingLine != null && pendingLine.length() > pendingLinePointer) {\n-            return pendingLine.substring(pendingLinePointer);\n+        if (pendingLineCharacters != null && pendingLineCharacters.length > pendingLineCharactersPointer) {\n+            String result = new String(pendingLineCharacters,\n+                                       pendingLineCharactersPointer,\n+                                       pendingLineCharacters.length - pendingLineCharactersPointer);\n+            pendingLineCharacters = null;\n+            return result;\n@@ -1044,0 +1063,2 @@\n+        } catch (EndOfFileException ex) {\n+            return null; \/\/ Signal that Ctrl+D or similar happened\n@@ -1054,1 +1075,5 @@\n-        return doReadUserLine(prompt, '\\0').toCharArray();\n+        String line = doReadUserLine(prompt, '\\0');\n+        if (line == null) {\n+            return null;\n+        }\n+        return line.toCharArray();\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/ConsoleIOContext.java","additions":41,"deletions":16,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.internal.org.jline.reader.UserInterruptException;\n@@ -62,2 +61,2 @@\n-    public char readUserInputChar() throws IOException {\n-        throw new UserInterruptException(\"\");\n+    public int readUserInputChar() throws IOException {\n+        return -1;\n@@ -69,1 +68,1 @@\n-        throw new UserInterruptException(\"\");\n+        return null;\n@@ -73,1 +72,1 @@\n-        throw new UserInterruptException(\"\");\n+        return null;\n@@ -83,1 +82,1 @@\n-        throw new UserInterruptException(\"\");\n+        return null;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/IOContext.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -4124,1 +4124,5 @@\n-                            cbuf[off] = input.readUserInputChar();\n+                            int r = input.readUserInputChar();\n+                            if (r == (-1)) {\n+                                return -1;\n+                            }\n+                            cbuf[off] = (char) r;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/JShellTool.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -185,0 +185,3 @@\n+                        if (len == 0) {\n+                            return 0;\n+                        }\n@@ -187,1 +190,7 @@\n-                            return readChars(cbuf, off, len);\n+                            int r = readInt();\n+                            if (r == (-1)) {\n+                                return -1;\n+                            } else {\n+                                cbuf[off] = (char) r;\n+                                return 1;\n+                            }\n@@ -377,7 +386,3 @@\n-                    if (bp >= 5) {\n-                        int len = readInt(1);\n-                        int c = console.reader().read();\n-                        \/\/XXX: EOF handling!\n-                        sendChars(sinkOutput, new char[] {(char) c}, 0, 1);\n-                        bp = 0;\n-                    }\n+                    int c = console.reader().read();\n+                    sendInt(sinkOutput, c);\n+                    bp = 0;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/impl\/ConsoleImpl.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8356165\n+ * @bug 8356165 8358552\n@@ -41,0 +41,1 @@\n+import java.util.Map;\n@@ -70,0 +71,17 @@\n+    public void testCloseInputSinkWhileReadingUserInputSimulatingCtrlD() throws Exception {\n+        var snippets = Map.of(\n+                \"System.in.read()\",                 \" ==> -1\",\n+                \"System.console().reader().read()\", \" ==> -1\",\n+                \"System.console().readLine()\",      \" ==> null\",\n+                \"System.console().readPassword()\",  \" ==> null\",\n+                \"IO.readln()\",                      \" ==> null\",\n+                \"System.in.readAllBytes()\",         \" ==> byte[0] {  }\"\n+            );\n+        for (var snippet : snippets.entrySet()) {\n+            doRunTest((inputSink, out) -> {\n+                inputSink.write(snippet.getKey() + \"\\n\");\n+                inputSink.close(); \/\/ Does not work: inputSink.write(\"\\u0004\"); \/\/ CTRL + D\n+                waitOutput(out, patternQuote(snippet.getValue()), patternQuote(\"EndOfFileException\"));\n+            }, false);\n+        }\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/InputUITest.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+            boolean closed = false;\n@@ -111,0 +112,1 @@\n+                if (closed) return; \/\/ prevents exception thrown due to closed writer\n@@ -114,0 +116,6 @@\n+\n+            @Override\n+            public void close() throws IOException {\n+                super.close();\n+                closed = true;\n+            }\n","filename":"test\/langtools\/jdk\/jshell\/UITesting.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}