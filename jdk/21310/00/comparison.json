{"files":[{"patch":"@@ -37,0 +37,2 @@\n+import java.util.function.IntPredicate;\n+import java.util.function.LongPredicate;\n@@ -94,2 +96,2 @@\n-                awaitPoolSizeGte(bean, parallelism);\n-                awaitMountedVirtualThreadCountGte(bean, parallelism);\n+                awaitPoolSize(bean, ps -> ps >= parallelism, \">= \" + parallelism);\n+                awaitMountedVirtualThreadCount(bean, c -> c >= parallelism, \">= \" + parallelism);\n@@ -104,2 +106,2 @@\n-                    awaitPoolSizeGte(bean, newParallelism);\n-                    awaitMountedVirtualThreadCountGte(bean, newParallelism);\n+                    awaitPoolSize(bean, ps -> ps >= newParallelism, \">= \" + newParallelism);\n+                    awaitMountedVirtualThreadCount(bean, c -> c >= newParallelism, \">= \" + newParallelism);\n@@ -143,4 +145,4 @@\n-                int newParallelism = parallelism + 4;\n-                bean.setParallelism(newParallelism);\n-                IntStream.range(0, newParallelism).forEach(_ -> executor.submit(busyTask));\n-                awaitMountedVirtualThreadCountGte(bean, newParallelism);\n+                int highParallelism = parallelism + 4;\n+                bean.setParallelism(highParallelism);\n+                IntStream.range(0, highParallelism).forEach(_ -> executor.submit(busyTask));\n+                awaitMountedVirtualThreadCount(bean, c -> c >= highParallelism, \">= \" + highParallelism);\n@@ -149,2 +151,2 @@\n-                newParallelism = Math.clamp(parallelism \/ 2, 1, parallelism);\n-                bean.setParallelism(newParallelism);\n+                int lowParallelism = Math.clamp(parallelism \/ 2, 1, parallelism);\n+                bean.setParallelism(lowParallelism);\n@@ -152,2 +154,4 @@\n-                \/\/ mounted virtual thread count should reduce\n-                awaitMountedVirtualThreadCountLte(bean, newParallelism);\n+                for (int i = 0; i < 5; i++) {\n+                    Thread.sleep(100);\n+                    awaitMountedVirtualThreadCount(bean, c -> c <= lowParallelism, \"<= \" + lowParallelism);\n+                }\n@@ -155,1 +159,3 @@\n-                \/\/ increase workload, the mounted virtual thread count should not increase\n+                \/\/ increase workload. The mounted virtual thread count should not exceed\n+                \/\/ lowParallelism. Use awaitMountedVirtualThreadCount as the count may\n+                \/\/ need to be sampled several times due to over estimation.\n@@ -159,1 +165,1 @@\n-                    assertTrue(bean.getMountedVirtualThreadCount() <= newParallelism);\n+                    awaitMountedVirtualThreadCount(bean, c -> c == lowParallelism, \"== \" + lowParallelism);\n@@ -216,1 +222,1 @@\n-                awaitMountedVirtualThreadCountGte(bean, parallelism);\n+                awaitMountedVirtualThreadCount(bean, c -> c >= parallelism, \">= \" + parallelism);\n@@ -230,11 +236,1 @@\n-     * Waits for pool size >= target to be true.\n-     *\/\n-    void awaitPoolSizeGte(VirtualThreadSchedulerMXBean bean, int target) throws InterruptedException {\n-        System.err.format(\"await pool size >= %d ...%n\", target);\n-        while (bean.getPoolSize() < target) {\n-            Thread.sleep(10);\n-        }\n-    }\n-\n-    \/**\n-     * Waits for the mounted virtual thread count >= target to be true.\n+     * Waits until evaluating the given predicte with the pool size is true.\n@@ -242,5 +238,11 @@\n-    void awaitMountedVirtualThreadCountGte(VirtualThreadSchedulerMXBean bean,\n-                                           int target) throws InterruptedException {\n-        System.err.format(\"await mounted virtual thread count >= %d ...%n\", target);\n-        while (bean.getMountedVirtualThreadCount() < target) {\n-            Thread.sleep(10);\n+    void awaitPoolSize(VirtualThreadSchedulerMXBean bean,\n+                       IntPredicate predicate,\n+                       String reason) throws InterruptedException {\n+        int poolSize = bean.getPoolSize();\n+        if (!predicate.test(poolSize)) {\n+            System.err.format(\"poolSize = %d, await %s ...%n\", poolSize, reason);\n+            while (!predicate.test(poolSize)) {\n+                Thread.sleep(10);\n+                poolSize = bean.getPoolSize();\n+            }\n+            System.err.format(\"poolSize = %d%n\", poolSize);\n@@ -251,1 +253,1 @@\n-     * Waits for the mounted virtual thread count <= target to be true.\n+     * Waits until evaluating the given predicte with the mounted thread count is true.\n@@ -253,5 +255,11 @@\n-    void awaitMountedVirtualThreadCountLte(VirtualThreadSchedulerMXBean bean,\n-                                           int target) throws InterruptedException {\n-        System.err.format(\"await mounted virtual thread count <= %d ...%n\", target);\n-        while (bean.getMountedVirtualThreadCount() > target) {\n-            Thread.sleep(10);\n+    void awaitMountedVirtualThreadCount(VirtualThreadSchedulerMXBean bean,\n+                                        LongPredicate predicate,\n+                                        String reason) throws InterruptedException {\n+        long count = bean.getMountedVirtualThreadCount();\n+        if (!predicate.test(count)) {\n+            System.err.format(\"mountedVirtualThreadCount = %d, await %s ...%n\", count, reason);\n+            while (!predicate.test(count)) {\n+                Thread.sleep(10);\n+                count = bean.getMountedVirtualThreadCount();\n+            }\n+            System.err.format(\"mountedVirtualThreadCount = %d%n\", count);\n","filename":"test\/jdk\/jdk\/management\/VirtualThreadSchedulerMXBean\/VirtualThreadSchedulerMXBeanTest.java","additions":45,"deletions":37,"binary":false,"changes":82,"status":"modified"}]}