{"files":[{"patch":"@@ -37,0 +37,2 @@\n+import java.util.function.IntPredicate;\n+import java.util.function.LongPredicate;\n@@ -143,4 +145,10 @@\n-                int newParallelism = parallelism + 4;\n-                bean.setParallelism(newParallelism);\n-                IntStream.range(0, newParallelism).forEach(_ -> executor.submit(busyTask));\n-                awaitMountedVirtualThreadCountGte(bean, newParallelism);\n+                int highParallelism = parallelism + 4;\n+                bean.setParallelism(highParallelism);\n+                IntStream.range(0, highParallelism).forEach(_ -> executor.submit(busyTask));\n+\n+                \/\/ mounted virtual thread count should increase to highParallelism.\n+                \/\/ Sample the count at highParallelism a few times.\n+                for (int i = 0; i < 5; i++) {\n+                    Thread.sleep(100);\n+                    awaitMountedVirtualThreadCountEq(bean, highParallelism);\n+                }\n@@ -149,2 +157,2 @@\n-                newParallelism = Math.clamp(parallelism \/ 2, 1, parallelism);\n-                bean.setParallelism(newParallelism);\n+                int lowParallelism = Math.clamp(parallelism \/ 2, 1, parallelism);\n+                bean.setParallelism(lowParallelism);\n@@ -152,2 +160,0 @@\n-                \/\/ mounted virtual thread count should reduce\n-                awaitMountedVirtualThreadCountLte(bean, newParallelism);\n@@ -155,1 +161,8 @@\n-                \/\/ increase workload, the mounted virtual thread count should not increase\n+                \/\/ mounted virtual thread count should reduce to lowParallelism or less.\n+                \/\/ Sample the count at lowParallelism or less a few times.\n+                for (int i = 0; i < 5; i++) {\n+                    Thread.sleep(100);\n+                    awaitMountedVirtualThreadCountLte(bean, lowParallelism);\n+                }\n+\n+                \/\/ increase workload\n@@ -157,0 +170,3 @@\n+\n+                \/\/ mounted virtual thread count should not exceed lowParallelism.\n+                \/\/ Sample the count at lowParallelism a few times.\n@@ -159,1 +175,1 @@\n-                    assertTrue(bean.getMountedVirtualThreadCount() <= newParallelism);\n+                    awaitMountedVirtualThreadCountEq(bean, lowParallelism);\n@@ -233,4 +249,1 @@\n-        System.err.format(\"await pool size >= %d ...%n\", target);\n-        while (bean.getPoolSize() < target) {\n-            Thread.sleep(10);\n-        }\n+        awaitPoolSize(bean, ps -> ps >= target, \">= \" + target);\n@@ -243,5 +256,2 @@\n-                                           int target) throws InterruptedException {\n-        System.err.format(\"await mounted virtual thread count >= %d ...%n\", target);\n-        while (bean.getMountedVirtualThreadCount() < target) {\n-            Thread.sleep(10);\n-        }\n+                                           long target) throws InterruptedException {\n+        awaitMountedVirtualThreadCount(bean, c -> c >= target, \">= \" + target);\n@@ -254,4 +264,43 @@\n-                                           int target) throws InterruptedException {\n-        System.err.format(\"await mounted virtual thread count <= %d ...%n\", target);\n-        while (bean.getMountedVirtualThreadCount() > target) {\n-            Thread.sleep(10);\n+                                           long target) throws InterruptedException {\n+        awaitMountedVirtualThreadCount(bean, c -> c <= target, \"<= \" + target);\n+    }\n+\n+    \/**\n+     * Waits for the mounted virtual thread count == target to be true.\n+     *\/\n+    void awaitMountedVirtualThreadCountEq(VirtualThreadSchedulerMXBean bean,\n+                                          long target) throws InterruptedException {\n+        awaitMountedVirtualThreadCount(bean, c -> c == target, \"== \" + target);\n+    }\n+\n+    \/**\n+     * Waits until evaluating the given predicte on the pool size is true.\n+     *\/\n+    void awaitPoolSize(VirtualThreadSchedulerMXBean bean,\n+                       IntPredicate predicate,\n+                       String reason) throws InterruptedException {\n+        int poolSize = bean.getPoolSize();\n+        if (!predicate.test(poolSize)) {\n+            System.err.format(\"poolSize = %d, await %s ...%n\", poolSize, reason);\n+            while (!predicate.test(poolSize)) {\n+                Thread.sleep(10);\n+                poolSize = bean.getPoolSize();\n+            }\n+            System.err.format(\"poolSize = %d%n\", poolSize);\n+        }\n+    }\n+\n+    \/**\n+     * Waits until evaluating the given predicte on the mounted thread count is true.\n+     *\/\n+    void awaitMountedVirtualThreadCount(VirtualThreadSchedulerMXBean bean,\n+                                        LongPredicate predicate,\n+                                        String reason) throws InterruptedException {\n+        long count = bean.getMountedVirtualThreadCount();\n+        if (!predicate.test(count)) {\n+            System.err.format(\"mountedVirtualThreadCount = %d, await %s ...%n\", count, reason);\n+            while (!predicate.test(count)) {\n+                Thread.sleep(10);\n+                count = bean.getMountedVirtualThreadCount();\n+            }\n+            System.err.format(\"mountedVirtualThreadCount = %d%n\", count);\n","filename":"test\/jdk\/jdk\/management\/VirtualThreadSchedulerMXBean\/VirtualThreadSchedulerMXBeanTest.java","additions":72,"deletions":23,"binary":false,"changes":95,"status":"modified"}]}