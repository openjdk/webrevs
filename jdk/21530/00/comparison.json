{"files":[{"patch":"@@ -69,1 +69,1 @@\n-  _allocated_heapregions_length(0),\n+  _next_highest_used_hrm_index(0),\n@@ -79,1 +79,1 @@\n-  _allocated_heapregions_length = 0;\n+  _next_highest_used_hrm_index = 0;\n@@ -172,1 +172,1 @@\n-      _allocated_heapregions_length = MAX2(_allocated_heapregions_length, i + 1);\n+      _next_highest_used_hrm_index = MAX2(_next_highest_used_hrm_index, i + 1);\n@@ -492,1 +492,1 @@\n-  for (uint i = r->hrm_index() + 1; i < _allocated_heapregions_length; i++) {\n+  for (uint i = r->hrm_index() + 1; i < _next_highest_used_hrm_index; i++) {\n@@ -586,2 +586,2 @@\n-  assert(length() <= _allocated_heapregions_length, \"invariant\");\n-  assert(_allocated_heapregions_length > 0, \"we should have at least one region committed\");\n+  assert(length() <= _next_highest_used_hrm_index, \"invariant\");\n+  assert(_next_highest_used_hrm_index > 0, \"we should have at least one region committed\");\n@@ -595,1 +595,1 @@\n-  uint cur = _allocated_heapregions_length;\n+  uint cur = _next_highest_used_hrm_index;\n@@ -627,1 +627,1 @@\n-  guarantee(start_idx <= _allocated_heapregions_length, \"checking\");\n+  guarantee(start_idx <= _next_highest_used_hrm_index, \"checking\");\n@@ -661,6 +661,6 @@\n-  guarantee(length() <= _allocated_heapregions_length,\n-            \"invariant: _length: %u _allocated_length: %u\",\n-            length(), _allocated_heapregions_length);\n-  guarantee(_allocated_heapregions_length <= reserved_length(),\n-            \"invariant: _allocated_length: %u _max_length: %u\",\n-            _allocated_heapregions_length, reserved_length());\n+  guarantee(length() <= _next_highest_used_hrm_index,\n+            \"invariant: _length: %u _next_highest_used_hrm_index: %u\",\n+            length(), _next_highest_used_hrm_index);\n+  guarantee(_next_highest_used_hrm_index <= reserved_length(),\n+            \"invariant: _next_highest_used_hrm_index: %u _max_length: %u\",\n+            _next_highest_used_hrm_index, reserved_length());\n@@ -674,1 +674,1 @@\n-  for (uint i = 0; i < _allocated_heapregions_length; i++) {\n+  for (uint i = 0; i < _next_highest_used_hrm_index; i++) {\n@@ -696,1 +696,1 @@\n-  for (uint i = _allocated_heapregions_length; i < reserved_length(); i++) {\n+  for (uint i = _next_highest_used_hrm_index; i < reserved_length(); i++) {\n@@ -711,1 +711,1 @@\n-    _n_workers(n_workers), _n_regions(G1CollectedHeap::heap()->_hrm._allocated_heapregions_length), _claims(nullptr) {\n+    _n_workers(n_workers), _n_regions(G1CollectedHeap::heap()->_hrm._next_highest_used_hrm_index), _claims(nullptr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-\/\/ * _allocated_heapregions_length (not exposed outside this class) is the\n-\/\/   number of regions+1 for which we have G1HeapRegions.\n+\/\/ * _next_highest_used_hrm_index (not exposed outside this class) is the\n+\/\/   highest heap region index +1 for which we have G1HeapRegions.\n@@ -84,2 +84,2 @@\n-  \/\/ Internal only. The highest heap region +1 we allocated a G1HeapRegion instance for.\n-  uint _allocated_heapregions_length;\n+  \/\/ Internal only. The highest heap region index +1 we allocated a G1HeapRegion instance for.\n+  uint _next_highest_used_hrm_index;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}