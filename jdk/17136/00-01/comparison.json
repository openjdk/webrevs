{"files":[{"patch":"@@ -0,0 +1,171 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Test virtual threads using Object.wait\/notifyAll\n+ * @modules java.base\/java.lang:+open\n+ * @library \/test\/lib\n+ * @run junit MonitorWaitNotify\n+ *\/\n+\n+import java.util.concurrent.Semaphore;\n+\n+import jdk.test.lib.thread.VThreadRunner;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class MonitorWaitNotify {\n+\n+    \/**\n+     * Test virtual thread waits, notified by platform thread.\n+     *\/\n+    @Test\n+    void testWaitNotify1() throws Exception {\n+        var lock = new Object();\n+        var ready = new Semaphore(0);\n+        var thread = Thread.ofVirtual().start(() -> {\n+            synchronized (lock) {\n+                ready.release();\n+                try {\n+                    lock.wait();\n+                } catch (InterruptedException e) { }\n+            }\n+        });\n+        \/\/ thread invokes notify\n+        ready.acquire();\n+        synchronized (lock) {\n+            lock.notifyAll();\n+        }\n+        thread.join();\n+    }\n+\n+    \/**\n+     * Test platform thread waits, notified by virtual thread.\n+     *\/\n+    @Test\n+    void testWaitNotify2() throws Exception {\n+        var lock = new Object();\n+        var ready = new Semaphore(0);\n+        var thread = Thread.ofVirtual().start(() -> {\n+            ready.acquireUninterruptibly();\n+            synchronized (lock) {\n+                lock.notifyAll();\n+            }\n+        });\n+        synchronized (lock) {\n+            ready.release();\n+            lock.wait();\n+        }\n+        thread.join();\n+    }\n+\n+    \/**\n+     * Test virtual thread waits, notified by another virtual thread.\n+     *\/\n+    @Test\n+    void testWaitNotify3() throws Exception {\n+        \/\/ need at least two carrier threads due to pinning\n+        int previousParallelism = VThreadRunner.ensureParallelism(2);\n+        try {\n+            var lock = new Object();\n+            var ready = new Semaphore(0);\n+            var thread1 = Thread.ofVirtual().start(() -> {\n+                synchronized (lock) {\n+                    ready.release();\n+                    try {\n+                        lock.wait();\n+                    } catch (InterruptedException e) { }\n+                }\n+            });\n+            var thread2 = Thread.ofVirtual().start(() -> {\n+                ready.acquireUninterruptibly();\n+                synchronized (lock) {\n+                    lock.notifyAll();\n+                }\n+            });\n+            thread1.join();\n+            thread2.join();\n+        } finally {\n+            \/\/ restore\n+            VThreadRunner.setParallelism(previousParallelism);\n+        }\n+    }\n+\n+    \/**\n+     * Test interrupt status set when calling Object.wait.\n+     *\/\n+    @Test\n+    void testWaitNotify4() throws Exception {\n+        VThreadRunner.run(() -> {\n+            Thread t = Thread.currentThread();\n+            t.interrupt();\n+            Object lock = new Object();\n+            synchronized (lock) {\n+                try {\n+                    lock.wait();\n+                    fail();\n+                } catch (InterruptedException e) {\n+                    \/\/ interrupt status should be cleared\n+                    assertFalse(t.isInterrupted());\n+                }\n+            }\n+        });\n+    }\n+\n+    \/**\n+     * Test interrupt when blocked in Object.wait.\n+     *\/\n+    @Test\n+    void testWaitNotify5() throws Exception {\n+        VThreadRunner.run(() -> {\n+            Thread t = Thread.currentThread();\n+            scheduleInterrupt(t, 1000);\n+            Object lock = new Object();\n+            synchronized (lock) {\n+                try {\n+                    lock.wait();\n+                    fail();\n+                } catch (InterruptedException e) {\n+                    \/\/ interrupt status should be cleared\n+                    assertFalse(t.isInterrupted());\n+                }\n+            }\n+        });\n+    }\n+\n+    \/**\n+     * Schedule a thread to be interrupted after a delay.\n+     *\/\n+    private static void scheduleInterrupt(Thread thread, long delay) {\n+        Runnable interruptTask = () -> {\n+            try {\n+                Thread.sleep(delay);\n+                thread.interrupt();\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        };\n+        new Thread(interruptTask).start();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/MonitorWaitNotify.java","additions":171,"deletions":0,"binary":false,"changes":171,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Test stack traces in exceptions and stack frames waslked by the StackWalker\n+ * @summary Test stack traces in exceptions and stack frames walked by the StackWalker\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/StackTraces.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1083,1 +1083,1 @@\n-     * Test Thread.yield releases thread when not pinned.\n+     * Test Thread.yield releases carrier thread.\n@@ -1111,1 +1111,1 @@\n-     * Test Thread.yield when thread is pinned.\n+     * Test Thread.yield when thread is pinned by native frame.\n@@ -1139,1 +1139,1 @@\n-     * Test that Thread.yield does not consume the thread's parking permit.\n+     * Test Thread.yield does not consume the thread's parking permit.\n@@ -1152,1 +1152,1 @@\n-     * Test that Thread.yield does not make available the thread's parking permit.\n+     * Test Thread.yield does not make available the thread's parking permit.\n@@ -2044,1 +2044,1 @@\n-     * Test Thread::getStackTrace on terminated thread.\n+     * Test Thread::getStackTrace on timed-parked thread.\n@@ -2048,0 +2048,66 @@\n+        var thread = Thread.ofVirtual().start(() -> {\n+            LockSupport.parkNanos(Long.MAX_VALUE);\n+        });\n+        await(thread, Thread.State.TIMED_WAITING);\n+        try {\n+            StackTraceElement[] stack = thread.getStackTrace();\n+            assertTrue(contains(stack, \"LockSupport.parkNanos\"));\n+        } finally {\n+            LockSupport.unpark(thread);\n+            thread.join();\n+        }\n+    }\n+\n+    \/**\n+     * Test Thread::getStackTrace on parked thread that is pinned.\n+     *\/\n+    @Test\n+    void testGetStackTrace7() throws Exception {\n+        AtomicBoolean done = new AtomicBoolean();\n+        var thread = Thread.ofVirtual().start(() -> {\n+            VThreadPinner.runPinned(() -> {\n+                while (!done.get()) {\n+                    LockSupport.park();\n+                }\n+            });\n+        });\n+        await(thread, Thread.State.WAITING);\n+        try {\n+            StackTraceElement[] stack = thread.getStackTrace();\n+            assertTrue(contains(stack, \"LockSupport.park\"));\n+        } finally {\n+            done.set(true);\n+            LockSupport.unpark(thread);\n+            thread.join();\n+        }\n+    }\n+\n+    \/**\n+     * Test Thread::getStackTrace on timed-parked thread that is pinned.\n+     *\/\n+    @Test\n+    void testGetStackTrace8() throws Exception {\n+        AtomicBoolean done = new AtomicBoolean();\n+        var thread = Thread.ofVirtual().start(() -> {\n+            VThreadPinner.runPinned(() -> {\n+                while (!done.get()) {\n+                    LockSupport.parkNanos(Long.MAX_VALUE);\n+                }\n+            });\n+        });\n+        await(thread, Thread.State.TIMED_WAITING);\n+        try {\n+            StackTraceElement[] stack = thread.getStackTrace();\n+            assertTrue(contains(stack, \"LockSupport.parkNanos\"));\n+        } finally {\n+            done.set(true);\n+            LockSupport.unpark(thread);\n+            thread.join();\n+        }\n+    }\n+\n+    \/**\n+     * Test Thread::getStackTrace on terminated thread.\n+     *\/\n+    @Test\n+    void testGetStackTrace9() throws Exception {\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ThreadAPI.java","additions":71,"deletions":5,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -1,163 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test virtual threads using Object.wait\/notifyAll\n- * @library \/test\/lib\n- * @run junit WaitNotify\n- *\/\n-\n-import java.util.concurrent.Semaphore;\n-\n-import jdk.test.lib.thread.VThreadRunner;\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-class WaitNotify {\n-\n-    \/**\n-     * Test virtual thread waits, notified by platform thread.\n-     *\/\n-    @Test\n-    void testWaitNotify1() throws Exception {\n-        var lock = new Object();\n-        var ready = new Semaphore(0);\n-        var thread = Thread.ofVirtual().start(() -> {\n-            synchronized (lock) {\n-                ready.release();\n-                try {\n-                    lock.wait();\n-                } catch (InterruptedException e) { }\n-            }\n-        });\n-        \/\/ thread invokes notify\n-        ready.acquire();\n-        synchronized (lock) {\n-            lock.notifyAll();\n-        }\n-        thread.join();\n-    }\n-\n-    \/**\n-     * Test platform thread waits, notified by virtual thread.\n-     *\/\n-    @Test\n-    void testWaitNotify2() throws Exception {\n-        var lock = new Object();\n-        var ready = new Semaphore(0);\n-        var thread = Thread.ofVirtual().start(() -> {\n-            ready.acquireUninterruptibly();\n-            synchronized (lock) {\n-                lock.notifyAll();\n-            }\n-        });\n-        synchronized (lock) {\n-            ready.release();\n-            lock.wait();\n-        }\n-        thread.join();\n-    }\n-\n-    \/**\n-     * Test virtual thread waits, notified by another virtual thread.\n-     *\/\n-    @Test\n-    void testWaitNotify3() throws Exception {\n-        var lock = new Object();\n-        var ready = new Semaphore(0);\n-        var thread1 = Thread.ofVirtual().start(() -> {\n-            synchronized (lock) {\n-                ready.release();\n-                try {\n-                    lock.wait();\n-                } catch (InterruptedException e) { }\n-            }\n-        });\n-        var thread2 = Thread.ofVirtual().start(() -> {\n-            ready.acquireUninterruptibly();\n-            synchronized (lock) {\n-                lock.notifyAll();\n-            }\n-        });\n-        thread1.join();\n-        thread2.join();\n-    }\n-\n-    \/**\n-     * Test interrupt status set when calling Object.wait.\n-     *\/\n-    @Test\n-    void testWaitNotify4() throws Exception {\n-        VThreadRunner.run(() -> {\n-            Thread t = Thread.currentThread();\n-            t.interrupt();\n-            Object lock = new Object();\n-            synchronized (lock) {\n-                try {\n-                    lock.wait();\n-                    fail();\n-                } catch (InterruptedException e) {\n-                    \/\/ interrupt status should be cleared\n-                    assertFalse(t.isInterrupted());\n-                }\n-            }\n-        });\n-    }\n-\n-    \/**\n-     * Test interrupt when blocked in Object.wait.\n-     *\/\n-    @Test\n-    void testWaitNotify5() throws Exception {\n-        VThreadRunner.run(() -> {\n-            Thread t = Thread.currentThread();\n-            scheduleInterrupt(t, 1000);\n-            Object lock = new Object();\n-            synchronized (lock) {\n-                try {\n-                    lock.wait();\n-                    fail();\n-                } catch (InterruptedException e) {\n-                    \/\/ interrupt status should be cleared\n-                    assertFalse(t.isInterrupted());\n-                }\n-            }\n-        });\n-    }\n-\n-    \/**\n-     * Schedule a thread to be interrupted after a delay.\n-     *\/\n-    private static void scheduleInterrupt(Thread thread, long delay) {\n-        Runnable interruptTask = () -> {\n-            try {\n-                Thread.sleep(delay);\n-                thread.interrupt();\n-            } catch (Exception e) {\n-                e.printStackTrace();\n-            }\n-        };\n-        new Thread(interruptTask).start();\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/WaitNotify.java","additions":0,"deletions":163,"binary":false,"changes":163,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -414,1 +414,0 @@\n-            long start = System.currentTimeMillis();\n@@ -416,1 +415,0 @@\n-            long duration = System.currentTimeMillis() - start;\n","filename":"test\/jdk\/java\/nio\/channels\/Selector\/SelectWithConsumer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}