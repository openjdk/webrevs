{"files":[{"patch":"@@ -354,0 +354,45 @@\n+    \/\/ *** Indexed methods ***\n+\n+    \/**\n+     * {@return the element at the specified position in this deque}\n+     *\n+     * @param index index of the element to return\n+     * @throws IndexOutOfBoundsException if the index is out of range\n+     *         ({@code index < 0 || index >= size()})\n+     * @since 25\n+     *\/\n+    public E get(int index) {\n+        return getset(index, null);\n+    }\n+\n+    \/**\n+     * Replaces the element at the specified position in this deque\n+     * with the specified element.\n+     *\n+     * @param index index of the element to replace\n+     * @param element element to be stored at the specified position\n+     * @return the element previously at the specified position\n+     * @throws ClassCastException if the class of the specified element\n+     *         prevents it from being added to this deque\n+     * @throws NullPointerException if the specified element is null\n+     * @throws IndexOutOfBoundsException if the index is out of range\n+     *         ({@code index < 0 || index >= size()})\n+     * @since 25\n+     *\/\n+    public E set(int index, E element) {\n+        if (element == null)\n+            throw new NullPointerException();\n+        return getset(index, element);\n+    }\n+\n+    private E getset(int index, E newValue) {\n+        Objects.checkIndex(index, size());\n+        index = inc(head, index, elements.length);\n+        E oldValue = elementAt(elements, index);\n+        if (newValue != null)\n+            elements[index] = newValue;\n+        return oldValue;\n+    }\n+\n+    \/\/ *** Deque methods ***\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ArrayDeque.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayDeque;\n+import java.util.Collections;\n+\n+\/**\n+ * @test\n+ * @bug 8143850\n+ * @summary Verify ArrayDeque indexed get() and set()\n+ * @run testng IndexedAccess\n+ *\/\n+\n+import static org.testng.Assert.*;\n+import org.testng.annotations.Test;\n+\n+public class IndexedAccess {\n+\n+    @Test\n+    public void testIndexedAccess() {\n+        ArrayDeque<String> a = new ArrayDeque<>();\n+        Collections.addAll(a, \"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\");\n+\n+        checkSize(a, 5);\n+        assertEquals(a.get(0), \"aaa\");\n+        assertEquals(a.get(1), \"bbb\");\n+        assertEquals(a.get(2), \"ccc\");\n+        assertEquals(a.get(3), \"ddd\");\n+        assertEquals(a.get(4), \"eee\");\n+\n+        a.removeFirst();\n+        checkSize(a, 4);\n+        assertEquals(a.get(0), \"bbb\");\n+        assertEquals(a.get(1), \"ccc\");\n+        assertEquals(a.get(2), \"ddd\");\n+        assertEquals(a.get(3), \"eee\");\n+\n+        assertEquals(a.set(2, \"xxx\"), \"ddd\");\n+        checkSize(a, 4);\n+        assertEquals(a.get(0), \"bbb\");\n+        assertEquals(a.get(1), \"ccc\");\n+        assertEquals(a.get(2), \"xxx\");\n+        assertEquals(a.get(3), \"eee\");\n+\n+        a.addFirst(\"yyy\");\n+        checkSize(a, 5);\n+        assertEquals(a.set(2, \"zzz\"), \"ccc\");\n+        assertEquals(a.get(0), \"yyy\");\n+        assertEquals(a.get(1), \"bbb\");\n+        assertEquals(a.get(2), \"zzz\");\n+        assertEquals(a.get(3), \"xxx\");\n+        assertEquals(a.get(4), \"eee\");\n+\n+        try {\n+            a.set(0, null);\n+        } catch (NullPointerException e) {\n+            \/\/ expected\n+        }\n+    }\n+\n+    private void checkSize(ArrayDeque<String> a, int size) {\n+        assertEquals(a.size(), size);\n+        for (int index = 0; index < size; index++) {\n+            a.set(index, a.get(index));\n+        }\n+        for (int index : new int[] { Integer.MIN_VALUE, -1, size, Integer.MAX_VALUE }) {\n+            try {\n+                a.get(index);\n+                throw new AssertionError();\n+            } catch (IndexOutOfBoundsException e) {\n+                \/\/ expected\n+            }\n+            try {\n+                a.set(index, \"sss\");\n+                throw new AssertionError();\n+            } catch (IndexOutOfBoundsException e) {\n+                \/\/ expected\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/ArrayDeque\/IndexedAccess.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}