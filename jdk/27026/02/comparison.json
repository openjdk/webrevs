{"files":[{"patch":"@@ -3806,4 +3806,4 @@\n-const InstanceKlass* ClassFileParser::parse_super_class(ConstantPool* const cp,\n-                                                        const int super_class_index,\n-                                                        const bool need_verify,\n-                                                        TRAPS) {\n+void ClassFileParser::check_super_class(ConstantPool* const cp,\n+                                        const int super_class_index,\n+                                        const bool need_verify,\n+                                        TRAPS) {\n@@ -3811,1 +3811,0 @@\n-  const InstanceKlass* super_klass = nullptr;\n@@ -3817,1 +3816,1 @@\n-                       CHECK_NULL);\n+                       CHECK);\n@@ -3822,1 +3821,2 @@\n-                       CHECK_NULL);\n+                       CHECK);\n+\n@@ -3825,8 +3825,0 @@\n-    bool is_array = false;\n-    if (cp->tag_at(super_class_index).is_klass()) {\n-      super_klass = InstanceKlass::cast(cp->resolved_klass_at(super_class_index));\n-      if (need_verify)\n-        is_array = super_klass->is_array_klass();\n-    } else if (need_verify) {\n-      is_array = (cp->klass_name_at(super_class_index)->char_at(0) == JVM_SIGNATURE_ARRAY);\n-    }\n@@ -3834,2 +3826,2 @@\n-      guarantee_property(!is_array,\n-                        \"Bad superclass name in class file %s\", CHECK_NULL);\n+      guarantee_property(cp->klass_name_at(super_class_index)->char_at(0) != JVM_SIGNATURE_ARRAY,\n+                        \"Bad superclass name in class file %s\", CHECK);\n@@ -3838,1 +3830,0 @@\n-  return super_klass;\n@@ -5670,4 +5661,4 @@\n-  _super_klass = parse_super_class(cp,\n-                                   _super_class_index,\n-                                   _need_verify,\n-                                   CHECK);\n+  check_super_class(cp,\n+                    _super_class_index,\n+                    _need_verify,\n+                    CHECK);\n@@ -5780,2 +5771,2 @@\n-  \/\/ We check super class after class file is parsed and format is checked\n-  if (_super_class_index > 0 && nullptr == _super_klass) {\n+  \/\/ Set _super_klass after class file is parsed and format is checked\n+  if (_super_class_index > 0) {\n@@ -5792,0 +5783,1 @@\n+      \/\/ fast path to avoid lookup\n@@ -5801,0 +5793,3 @@\n+  } else {\n+    assert(_class_name == vmSymbols::java_lang_Object(), \"already checked\");\n+    _super_klass = nullptr;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":19,"deletions":24,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -245,4 +245,4 @@\n-  const InstanceKlass* parse_super_class(ConstantPool* const cp,\n-                                         const int super_class_index,\n-                                         const bool need_verify,\n-                                         TRAPS);\n+  void check_super_class(ConstantPool* const cp,\n+                         const int super_class_index,\n+                         const bool need_verify,\n+                         TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}