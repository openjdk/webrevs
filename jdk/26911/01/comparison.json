{"files":[{"patch":"@@ -909,0 +909,25 @@\n+    \/**\n+     * Appends the two-digit string representation of the {@code int}\n+     * argument to this sequence.\n+     * <p>\n+     * The integer {@code i} is formatted as two decimal digits.\n+     * If the value is between 0 and 9, it is formatted with a leading zero\n+     * (e.g., 5 becomes \"05\"). If the value is outside the range 0-99,\n+     * the behavior is unspecified and may result in unexpected output.\n+     *\n+     * @param   i   an {@code int} (should be between 0 and 99 inclusive).\n+     * @throws  IndexOutOfBoundsException if {@code i} is outside the range 0-99.\n+     *\/\n+    void appendPair(int i) {\n+        byte coder = this.coder;\n+        int count = this.count;\n+        byte[] value = ensureCapacitySameCoder(this.value, coder, count + 2);\n+        if (isLatin1(coder)) {\n+            DecimalDigits.uncheckedPutPairLatin1(value, count, i);\n+        } else {\n+            DecimalDigits.uncheckedPutPairUTF16(value, count, i);\n+        }\n+        this.value = value;\n+        this.count = count + 2;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2152,0 +2152,4 @@\n+            public void appendPair(StringBuilder buf, int v) {\n+                buf.appendPair(v);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,0 +89,2 @@\n+import jdk.internal.util.DecimalDigits;\n+\n@@ -751,4 +753,6 @@\n-        return new StringBuilder(10).append(\"--\")\n-            .append(month < 10 ? \"0\" : \"\").append(month)\n-            .append(day < 10 ? \"-0\" : \"-\").append(day)\n-            .toString();\n+        StringBuilder buf = new StringBuilder(10);\n+        buf.append(\"--\");\n+        DecimalDigits.appendPair(buf, month);\n+        buf.append('-');\n+        DecimalDigits.appendPair(buf, day);\n+        return buf.toString();\n","filename":"src\/java.base\/share\/classes\/java\/time\/MonthDay.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -102,0 +102,2 @@\n+import jdk.internal.util.DecimalDigits;\n+\n@@ -1209,3 +1211,3 @@\n-        return buf.append(month < 10 ? \"-0\" : \"-\")\n-            .append(month)\n-            .toString();\n+        buf.append('-');\n+        DecimalDigits.appendPair(buf, month);\n+        return buf.toString();\n","filename":"src\/java.base\/share\/classes\/java\/time\/YearMonth.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -468,3 +469,4 @@\n-            buf.append(totalSeconds < 0 ? \"-\" : \"+\")\n-                .append(absHours < 10 ? \"0\" : \"\").append(absHours)\n-                .append(absMinutes < 10 ? \":0\" : \":\").append(absMinutes);\n+            buf.append(totalSeconds < 0 ? '-' : '+');\n+            DecimalDigits.appendPair(buf, absHours);\n+            buf.append(':');\n+            DecimalDigits.appendPair(buf, absMinutes);\n@@ -473,1 +475,2 @@\n-                buf.append(absSeconds < 10 ? \":0\" : \":\").append(absSeconds);\n+                buf.append(':');\n+                DecimalDigits.appendPair(buf, absSeconds);\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneOffset.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+import jdk.internal.util.DecimalDigits;\n+\n@@ -429,4 +431,6 @@\n-        \/\/ getLong() reduces chances of exceptions in toString()\n-        long yoe = getLong(YEAR_OF_ERA);\n-        long moy = getLong(MONTH_OF_YEAR);\n-        long dom = getLong(DAY_OF_MONTH);\n+        \/\/ Using get() instead of getLong() for performance reasons,\n+        \/\/ as the values of YEAR_OF_ERA, MONTH_OF_YEAR, and DAY_OF_MONTH\n+        \/\/ are guaranteed to be within the int range for all chronologies.\n+        int yoe = get(YEAR_OF_ERA);\n+        int moy = get(MONTH_OF_YEAR);\n+        int dom = get(DAY_OF_MONTH);\n@@ -439,2 +443,4 @@\n-                .append(moy < 10 ? \"-0\" : \"-\").append(moy)\n-                .append(dom < 10 ? \"-0\" : \"-\").append(dom);\n+                .append('-');\n+        DecimalDigits.appendPair(buf, moy);\n+        buf.append('-');\n+        DecimalDigits.appendPair(buf, dom);\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ChronoLocalDateImpl.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -389,0 +389,16 @@\n+    \/**\n+     * Appends the two-digit string representation of the {@code int}\n+     * argument to the given {@code StringBuilder}.\n+     * <p>\n+     * This method is intended for internal use by {@code DecimalDigits.appendPair}.\n+     * The integer {@code v} is formatted as two decimal digits.\n+     * If the value is between 0 and 9, it is formatted with a leading zero\n+     * (e.g., 5 becomes \"05\"). If the value is outside the range 0-99,\n+     * the behavior is unspecified.\n+     *\n+     * @param buf the {@code StringBuilder} to append to.\n+     * @param v the {@code int} value (should be between 0 and 99 inclusive).\n+     * @see jdk.internal.util.DecimalDigits#appendPair(StringBuilder, int)\n+     *\/\n+    void appendPair(StringBuilder buf, int v);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -52,4 +52,2 @@\n-        int year  = date.getYear(),\n-            month = date.getMonthValue(),\n-            day   = date.getDayOfMonth();\n-        int absYear = Math.abs(year);\n+        int year    = date.getYear(),\n+            absYear = Math.abs(year);\n@@ -60,2 +58,3 @@\n-            buf.repeat('0', absYear < 10 ? 3 : absYear < 100 ? 2 : 1);\n-            buf.append(absYear);\n+            int y01 = absYear \/ 100;\n+            DecimalDigits.appendPair(buf, y01);\n+            DecimalDigits.appendPair(buf, absYear - y01 * 100);\n@@ -68,2 +67,4 @@\n-        buf.append(month < 10 ? \"-0\" : \"-\").append(month)\n-           .append(day < 10 ? \"-0\" : \"-\").append(day);\n+        buf.append('-');\n+        DecimalDigits.appendPair(buf, date.getMonthValue());\n+        buf.append('-');\n+        DecimalDigits.appendPair(buf, date.getDayOfMonth());\n@@ -77,3 +78,4 @@\n-        int hour   = time.getHour(),\n-            minute = time.getMinute(),\n-            second = time.getSecond(),\n+        DecimalDigits.appendPair(buf, time.getHour());\n+        buf.append(':');\n+        DecimalDigits.appendPair(buf, time.getMinute());\n+        int second = time.getSecond(),\n@@ -81,2 +83,0 @@\n-        buf.append(hour < 10 ? \"0\" : \"\").append(hour)\n-           .append(minute < 10 ? \":0\" : \":\").append(minute);\n@@ -84,1 +84,2 @@\n-            buf.append(second < 10 ? \":0\" : \":\").append(second);\n+            buf.append(':');\n+            DecimalDigits.appendPair(buf, second);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DateTimeHelper.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -446,0 +447,18 @@\n+\n+    \/**\n+     * Appends the two-digit string representation of the {@code int}\n+     * argument to the given {@code StringBuilder}.\n+     * <p>\n+     * The integer {@code v} is formatted as two decimal digits.\n+     * If the value is between 0 and 9, it is formatted with a leading zero\n+     * (e.g., 5 becomes \"05\"). If the value is outside the range 0-99,\n+     * the behavior is unspecified.\n+     *\n+     * @param buf the {@code StringBuilder} to append to.\n+     * @param v the {@code int} value (should be between 0 and 99 inclusive).\n+     * @see jdk.internal.access.JavaLangAccess#appendPair(StringBuilder, int)\n+     *\/\n+    public static void appendPair(StringBuilder buf, int v) {\n+        SharedSecrets.getJavaLangAccess()\n+                     .appendPair(buf, v);\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DecimalDigits.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}