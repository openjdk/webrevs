{"files":[{"patch":"@@ -129,1 +129,0 @@\n-  log_trace(gc)(\"MarkStackSize: %uk  MarkStackSizeMax: %uk\", (uint)(MarkStackSize \/ K), (uint)(MarkStackSizeMax \/ K));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-bool G1CMMarkStack::initialize(size_t initial_capacity, size_t max_capacity) {\n+bool G1CMMarkStack::initialize() {\n@@ -109,0 +109,3 @@\n+  size_t initial_capacity = MarkStackSize;\n+  size_t max_capacity = MarkStackSizeMax;\n+\n@@ -115,0 +118,4 @@\n+  max_capacity = MAX2(initial_chunk_capacity, max_capacity);\n+\n+  FLAG_SET_ERGO(MarkStackSizeMax, (max_capacity * TaskEntryChunkSizeInVoidStar));\n+  FLAG_SET_ERGO(MarkStackSize, (initial_chunk_capacity * TaskEntryChunkSizeInVoidStar));\n@@ -116,3 +123,1 @@\n-  guarantee(initial_chunk_capacity <= max_capacity,\n-            \"Maximum chunk capacity \" SIZE_FORMAT \" smaller than initial capacity \" SIZE_FORMAT,\n-            max_capacity, initial_chunk_capacity);\n+  log_trace(gc)(\"MarkStackSize: %uk  MarkStackSizeMax: %uk\", (uint)(MarkStackSize \/ K), (uint)(MarkStackSizeMax \/ K));\n@@ -122,0 +127,1 @@\n+\n@@ -503,1 +509,1 @@\n-  if (!_global_mark_stack.initialize(MarkStackSize, MarkStackSizeMax)) {\n+  if (!_global_mark_stack.initialize()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -233,2 +233,2 @@\n-  \/\/ Allocate and initialize the mark stack with the given number of oops.\n-  bool initialize(size_t initial_capacity, size_t max_capacity);\n+  \/\/ Allocate and initialize the mark stack.\n+  bool initialize();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}