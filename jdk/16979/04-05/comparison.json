{"files":[{"patch":"@@ -155,3 +155,1 @@\n-      \/\/ Double capacity if possible\n-      size_t new_capacity = MIN2((bucket_size(bucket) * 2), _max_capacity);\n-      if (!reserve(new_capacity)) {\n+      if (!expand()) {\n@@ -201,1 +199,1 @@\n-void G1CMMarkStack::ChunkAllocator::expand() {\n+bool G1CMMarkStack::ChunkAllocator::expand() {\n@@ -204,1 +202,1 @@\n-    return;\n+    return false;\n@@ -207,1 +205,1 @@\n-  \/\/ Double capacity if possible\n+  \/\/ Double capacity if possible.\n@@ -213,0 +211,1 @@\n+    return true;\n@@ -214,0 +213,1 @@\n+  return false;\n@@ -244,1 +244,1 @@\n-    \/\/ Trim bucket size so that we do not exceed the _max_capacity\n+    \/\/ Trim bucket size so that we do not exceed the _max_capacity.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-    \/\/ need to copy existing items. The fundamental approach involves organizing the array into chunks,\n+    \/\/ need to copy existing items. The basic approach involves organizing the array into chunks,\n@@ -143,1 +143,1 @@\n-    \/\/ facilitate efficient indexing, the size of the first chunk is set to a power of 2. This choice\n+    \/\/ facilitate efficient indexing, the size of the first bucket is set to a power of 2. This choice\n@@ -145,1 +145,1 @@\n-    \/\/ within the bucket. Additionally, each new chunk added to the growable array doubles the capacity of\n+    \/\/ within the bucket. Additionally, each new bucket added to the growable array doubles the capacity of\n@@ -152,1 +152,0 @@\n-    \/\/        +----+        +----+----+\n@@ -154,1 +153,0 @@\n-    \/\/        |    |------->|    |    |\n@@ -156,2 +154,2 @@\n-    \/\/        |    |        +-----+-----+-----+-----+\n-    \/\/        |    |------->|     |     |     |     |\n+    \/\/        |    |------->|    |    |\n+    \/\/        |    |        +----+----+\n@@ -159,2 +157,2 @@\n-    \/\/        |    |        +-----+-----+-----+-----+-----+-----+-----+----+\n-    \/\/        |    |------->|     |     |     |     |     |     |     |    |\n+    \/\/        |    |------->|     |     |     |     |\n+    \/\/        |    |        +-----+-----+-----+-----+\n@@ -162,0 +160,3 @@\n+    \/\/        |    |------->|     |     |     |     |     |     |     |    |\n+    \/\/        |    |        +-----+-----+-----+-----+-----+-----+-----+----+\n+    \/\/        +----+\n@@ -179,1 +180,0 @@\n-    \/\/ Find highest 1, undefined if empty\/0\n@@ -219,1 +219,1 @@\n-    void expand();\n+    bool expand();\n@@ -233,4 +233,0 @@\n-  \/\/ Allocate a new chunk from the reserved memory, using the high water mark. Returns\n-  \/\/ null if out of memory.\n-  TaskQueueEntryChunk* allocate_new_chunk();\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"}]}