{"files":[{"patch":"@@ -148,1 +148,1 @@\n-    if (!_growable) {\n+    if (!_should_grow) {\n@@ -174,1 +174,1 @@\n-  _growable(false),\n+  _should_grow(false),\n@@ -214,3 +214,0 @@\n-  \/\/ We reset without regard for the outcome of the expansion attempt.\n-  \/\/ Expand is called in preparation for restart.\n-  reset();\n@@ -235,4 +232,1 @@\n-  if (new_capacity > _max_capacity) {\n-    log_debug(gc)(\"Cannot expand overflow mark stack beyond the max_capacity\" SIZE_FORMAT \" chunks.\", _max_capacity);\n-    return false;\n-  }\n+  assert(new_capacity <= _max_capacity, \"Cannot expand overflow mark stack beyond the max_capacity\" SIZE_FORMAT \" chunks.\", _max_capacity);\n@@ -1721,1 +1715,1 @@\n-    _global_mark_stack.grow_incrementally();\n+    _global_mark_stack.set_should_grow();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -140,0 +140,23 @@\n+    \/\/ The chunk allocator relies on a growable array data structure that allows resizing without the\n+    \/\/ need to copy existing items. The fundamental approach involves organizing the array into chunks,\n+    \/\/ essentially creating an \"array of arrays\"; referred to as buckets in this implementation. To\n+    \/\/ facilitate efficient indexing, the size of the first chunk is set to a power of 2. This choice\n+    \/\/ allows for quick conversion of an array index into a bucket index and the corresponding offset\n+    \/\/ within the bucket. Additionally, each new chunk added to the growable array doubles the capacity of\n+    \/\/ the growable array.\n+    \/\/\n+    \/\/ Illustration of the Growable Array data structure.\n+    \/\/\n+    \/\/        +----+        +----+----+\n+    \/\/        |    |------->|    |    |\n+    \/\/        +----+        +----+----+\n+    \/\/        |    |        +----+----+\n+    \/\/        |    |------->|    |    |\n+    \/\/        +----+        +----+----+\n+    \/\/        |    |        +-----+-----+-----+-----+\n+    \/\/        |    |------->|     |     |     |     |\n+    \/\/        +----+        +-----+-----+-----+-----+\n+    \/\/        |    |        +-----+-----+-----+-----+-----+-----+-----+----+\n+    \/\/        |    |------->|     |     |     |     |     |     |     |    |\n+    \/\/        +----+        +-----+-----+-----+-----+-----+-----+-----+----+\n+    \/\/\n@@ -144,1 +167,1 @@\n-    bool _growable;\n+    bool _should_grow;\n@@ -187,1 +210,1 @@\n-      _growable = false;\n+      _should_grow = false;\n@@ -190,2 +213,2 @@\n-    void grow_incrementally() {\n-      _growable = true;\n+    void set_should_grow() {\n+      _should_grow = true;\n@@ -254,2 +277,2 @@\n-  void grow_incrementally() {\n-    _chunk_allocator.grow_incrementally();\n+  void set_should_grow() {\n+    _chunk_allocator.set_should_grow();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":29,"deletions":6,"binary":false,"changes":35,"status":"modified"}]}