{"files":[{"patch":"@@ -36,2 +36,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -215,1 +213,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -217,13 +214,6 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                try {\n-                    String libDir = StaticProperty.javaHome() + File.separator + \"lib\";\n-                    try (DataInputStream dis = new DataInputStream(\n-                             new BufferedInputStream(new FileInputStream(\n-                                 new File(libDir, \"tzdb.dat\"))))) {\n-                        load(dis);\n-                    }\n-                } catch (Exception x) {\n-                    throw new Error(x);\n-                }\n-                return null;\n+        try {\n+            String libDir = StaticProperty.javaHome() + File.separator + \"lib\";\n+            try (DataInputStream dis = new DataInputStream(\n+                     new BufferedInputStream(new FileInputStream(\n+                         new File(libDir, \"tzdb.dat\"))))) {\n+                load(dis);\n@@ -231,1 +221,3 @@\n-        });\n+        } catch (Exception x) {\n+            throw new Error(x);\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/ZoneInfoFile.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -78,1 +74,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -80,13 +75,5 @@\n-        LocaleDataMetaInfo nbmi;\n-\n-        try {\n-            nbmi = AccessController.doPrivileged((PrivilegedExceptionAction<LocaleDataMetaInfo>) () -> {\n-                for (LocaleDataMetaInfo ldmi : ServiceLoader.loadInstalled(LocaleDataMetaInfo.class)) {\n-                    if (ldmi.getType() == Type.CLDR) {\n-                        return ldmi;\n-                    }\n-                }\n-                return null;\n-            });\n-        } catch (PrivilegedActionException pae) {\n-            throw new InternalError(pae.getCause());\n+        for (LocaleDataMetaInfo ldmi : ServiceLoader.loadInstalled(LocaleDataMetaInfo.class)) {\n+            if (ldmi.getType() == Type.CLDR) {\n+                nonBaseMetaInfo = ldmi;\n+                return;\n+            }\n@@ -94,2 +81,1 @@\n-\n-        nonBaseMetaInfo = nbmi;\n+        nonBaseMetaInfo = null;\n@@ -115,4 +101,1 @@\n-            @SuppressWarnings(\"removal\")\n-            CalendarDataProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<CalendarDataProvider>) () ->\n-                    new CLDRCalendarDataProviderImpl(\n+            CalendarDataProvider provider = new CLDRCalendarDataProviderImpl(\n@@ -120,1 +103,1 @@\n-                        getLanguageTagSet(\"CalendarData\")));\n+                        getLanguageTagSet(\"CalendarData\"));\n@@ -134,4 +117,1 @@\n-            @SuppressWarnings(\"removal\")\n-            CalendarNameProvider provider = AccessController.doPrivileged(\n-                    (PrivilegedAction<CalendarNameProvider>) ()\n-                    -> new CLDRCalendarNameProviderImpl(\n+            CalendarNameProvider provider = new CLDRCalendarNameProviderImpl(\n@@ -139,1 +119,1 @@\n-                            getLanguageTagSet(\"FormatData\")));\n+                            getLanguageTagSet(\"FormatData\"));\n@@ -158,4 +138,1 @@\n-            @SuppressWarnings(\"removal\")\n-            TimeZoneNameProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<TimeZoneNameProvider>) () ->\n-                    new CLDRTimeZoneNameProviderImpl(\n+            TimeZoneNameProvider provider = new CLDRTimeZoneNameProviderImpl(\n@@ -163,1 +140,1 @@\n-                        getLanguageTagSet(\"TimeZoneNames\")));\n+                        getLanguageTagSet(\"TimeZoneNames\"));\n","filename":"src\/java.base\/share\/classes\/sun\/util\/cldr\/CLDRLocaleProviderAdapter.java","additions":12,"deletions":35,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -189,3 +187,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final NullProvider NULL_PROVIDER = AccessController.doPrivileged(\n-        (PrivilegedAction<NullProvider>) () -> new NullProvider());\n+    private static final NullProvider NULL_PROVIDER = new NullProvider();\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/AuxLocaleProviderAdapter.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -88,4 +86,1 @@\n-            @SuppressWarnings(\"removal\")\n-            BreakIteratorProvider provider = AccessController.doPrivileged(\n-                    (PrivilegedAction<BreakIteratorProvider>) () ->\n-                            new BreakIteratorProviderImpl(\n+            BreakIteratorProvider provider = new BreakIteratorProviderImpl(\n@@ -93,1 +88,1 @@\n-                                    getLanguageTagSet(\"BreakIteratorRules\")));\n+                                    getLanguageTagSet(\"BreakIteratorRules\"));\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/FallbackLocaleProviderAdapter.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -142,6 +138,3 @@\n-            @SuppressWarnings(\"removal\")\n-            BreakIteratorProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<BreakIteratorProvider>) () ->\n-                    new BreakIteratorProviderImpl(\n-                        getAdapterType(),\n-                        getLanguageTagSet(\"FormatData\")));\n+            BreakIteratorProvider provider = new BreakIteratorProviderImpl(\n+                    getAdapterType(),\n+                    getLanguageTagSet(\"FormatData\"));\n@@ -161,6 +154,3 @@\n-            @SuppressWarnings(\"removal\")\n-            CollatorProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<CollatorProvider>) () ->\n-                    new CollatorProviderImpl(\n-                        getAdapterType(),\n-                        getLanguageTagSet(\"CollationData\")));\n+            CollatorProvider provider = new CollatorProviderImpl(\n+                    getAdapterType(),\n+                    getLanguageTagSet(\"CollationData\"));\n@@ -180,6 +170,3 @@\n-            @SuppressWarnings(\"removal\")\n-            DateFormatProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<DateFormatProvider>) () ->\n-                    new DateFormatProviderImpl(\n-                        getAdapterType(),\n-                        getLanguageTagSet(\"FormatData\")));\n+            DateFormatProvider provider = new DateFormatProviderImpl(\n+                    getAdapterType(),\n+                    getLanguageTagSet(\"FormatData\"));\n@@ -199,6 +186,3 @@\n-            @SuppressWarnings(\"removal\")\n-            DateFormatSymbolsProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<DateFormatSymbolsProvider>) () ->\n-                    new DateFormatSymbolsProviderImpl(\n-                        getAdapterType(),\n-                        getLanguageTagSet(\"FormatData\")));\n+            DateFormatSymbolsProvider provider = new DateFormatSymbolsProviderImpl(\n+                    getAdapterType(),\n+                    getLanguageTagSet(\"FormatData\"));\n@@ -218,6 +202,3 @@\n-            @SuppressWarnings(\"removal\")\n-            DecimalFormatSymbolsProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<DecimalFormatSymbolsProvider>) () ->\n-                    new DecimalFormatSymbolsProviderImpl(\n-                        getAdapterType(),\n-                        getLanguageTagSet(\"FormatData\")));\n+            DecimalFormatSymbolsProvider provider = new DecimalFormatSymbolsProviderImpl(\n+                    getAdapterType(),\n+                    getLanguageTagSet(\"FormatData\"));\n@@ -237,4 +218,1 @@\n-            @SuppressWarnings(\"removal\")\n-            NumberFormatProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<NumberFormatProvider>) () ->\n-                    new NumberFormatProviderImpl(\n+            NumberFormatProvider provider = new NumberFormatProviderImpl(\n@@ -242,1 +220,1 @@\n-                        getLanguageTagSet(\"FormatData\")));\n+                        getLanguageTagSet(\"FormatData\"));\n@@ -259,4 +237,1 @@\n-            @SuppressWarnings(\"removal\")\n-            CurrencyNameProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<CurrencyNameProvider>) () ->\n-                    new CurrencyNameProviderImpl(\n+            CurrencyNameProvider provider = new CurrencyNameProviderImpl(\n@@ -264,1 +239,1 @@\n-                        getLanguageTagSet(\"CurrencyNames\")));\n+                        getLanguageTagSet(\"CurrencyNames\"));\n@@ -278,4 +253,1 @@\n-            @SuppressWarnings(\"removal\")\n-            LocaleNameProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<LocaleNameProvider>) () ->\n-                    new LocaleNameProviderImpl(\n+            LocaleNameProvider provider = new LocaleNameProviderImpl(\n@@ -283,1 +255,1 @@\n-                        getLanguageTagSet(\"LocaleNames\")));\n+                        getLanguageTagSet(\"LocaleNames\"));\n@@ -297,4 +269,1 @@\n-            @SuppressWarnings(\"removal\")\n-            TimeZoneNameProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<TimeZoneNameProvider>) () ->\n-                    new TimeZoneNameProviderImpl(\n+            TimeZoneNameProvider provider = new TimeZoneNameProviderImpl(\n@@ -302,1 +271,1 @@\n-                        getLanguageTagSet(\"TimeZoneNames\")));\n+                        getLanguageTagSet(\"TimeZoneNames\"));\n@@ -316,4 +285,1 @@\n-            @SuppressWarnings(\"removal\")\n-            CalendarDataProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<CalendarDataProvider>) () ->\n-                    new CalendarDataProviderImpl(\n+            CalendarDataProvider provider = new CalendarDataProviderImpl(\n@@ -321,1 +287,1 @@\n-                        getLanguageTagSet(\"CalendarData\")));\n+                        getLanguageTagSet(\"CalendarData\"));\n@@ -335,4 +301,1 @@\n-            @SuppressWarnings(\"removal\")\n-            CalendarNameProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<CalendarNameProvider>) () ->\n-                    new CalendarNameProviderImpl(\n+            CalendarNameProvider provider = new CalendarNameProviderImpl(\n@@ -340,1 +303,1 @@\n-                        getLanguageTagSet(\"FormatData\")));\n+                        getLanguageTagSet(\"FormatData\"));\n@@ -357,4 +320,1 @@\n-            @SuppressWarnings(\"removal\")\n-            CalendarProvider provider = AccessController.doPrivileged(\n-                (PrivilegedAction<CalendarProvider>) () ->\n-                    new CalendarProviderImpl(\n+            CalendarProvider provider = new CalendarProviderImpl(\n@@ -362,1 +322,1 @@\n-                        getLanguageTagSet(\"CalendarData\")));\n+                        getLanguageTagSet(\"CalendarData\"));\n@@ -379,4 +339,1 @@\n-            @SuppressWarnings(\"removal\")\n-            JavaTimeDateTimePatternProvider provider = AccessController.doPrivileged(\n-                    (PrivilegedAction<JavaTimeDateTimePatternProvider>) ()\n-                    -> new JavaTimeDateTimePatternImpl(\n+            JavaTimeDateTimePatternProvider provider = new JavaTimeDateTimePatternImpl(\n@@ -384,1 +341,1 @@\n-                            getLanguageTagSet(\"FormatData\")));\n+                            getLanguageTagSet(\"FormatData\"));\n@@ -464,14 +421,8 @@\n-        try {\n-            @SuppressWarnings(\"removal\")\n-            String nonBaseTags = AccessController.doPrivileged((PrivilegedExceptionAction<String>) () -> {\n-                StringBuilder tags = new StringBuilder();\n-                for (LocaleDataMetaInfo ldmi :\n-                        ServiceLoader.loadInstalled(LocaleDataMetaInfo.class)) {\n-                    if (ldmi.getType() == LocaleProviderAdapter.Type.JRE) {\n-                        String t = ldmi.availableLanguageTags(category);\n-                        if (t != null) {\n-                            if (!tags.isEmpty()) {\n-                                tags.append(' ');\n-                            }\n-                            tags.append(t);\n-                        }\n+        StringBuilder tags = new StringBuilder();\n+        for (LocaleDataMetaInfo ldmi :\n+                ServiceLoader.loadInstalled(LocaleDataMetaInfo.class)) {\n+            if (ldmi.getType() == LocaleProviderAdapter.Type.JRE) {\n+                String t = ldmi.availableLanguageTags(category);\n+                if (t != null) {\n+                    if (!tags.isEmpty()) {\n+                        tags.append(' ');\n@@ -479,0 +430,1 @@\n+                    tags.append(t);\n@@ -480,5 +432,0 @@\n-                return tags.toString();\n-            });\n-\n-            if (nonBaseTags != null) {\n-                supportedLocaleString += \" \" + nonBaseTags;\n@@ -486,2 +433,5 @@\n-        } catch (PrivilegedActionException pae) {\n-            throw new InternalError(pae.getCause());\n+        }\n+        String nonBaseTags = tags.toString();\n+\n+        if (nonBaseTags != null) {\n+            supportedLocaleString += \" \" + nonBaseTags;\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/JRELocaleProviderAdapter.java","additions":45,"deletions":95,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -72,1 +69,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -74,0 +70,1 @@\n+    @SuppressWarnings(value={\"unchecked\", \"deprecation\"})\n@@ -75,28 +72,16 @@\n-        try {\n-            return AccessController.doPrivileged(new PrivilegedExceptionAction<>() {\n-                @Override\n-                @SuppressWarnings(value={\"unchecked\", \"deprecation\"})\n-                public P run() {\n-                    P delegate = null;\n-\n-                    for (LocaleServiceProvider provider :\n-                             ServiceLoader.load(c, ClassLoader.getSystemClassLoader())) {\n-                        if (delegate == null) {\n-                            try {\n-                                delegate =\n-                                    (P) Class.forName(SPILocaleProviderAdapter.class.getCanonicalName() +\n-                                              \"$\" +\n-                                              c.getSimpleName() +\n-                                              \"Delegate\")\n-                                              .newInstance();\n-                            }  catch (ClassNotFoundException |\n-                                      InstantiationException |\n-                                      IllegalAccessException e) {\n-                                throw new ServiceConfigurationError(\n-                                    \"SPI locale provider cannot be instantiated.\", e);\n-                            }\n-                        }\n-\n-                        ((Delegate)delegate).addImpl(provider);\n-                    }\n-                    return delegate;\n+        P delegate = null;\n+        for (LocaleServiceProvider provider :\n+                 ServiceLoader.load(c, ClassLoader.getSystemClassLoader())) {\n+            if (delegate == null) {\n+                try {\n+                    delegate =\n+                        (P) Class.forName(SPILocaleProviderAdapter.class.getCanonicalName() +\n+                                  \"$\" +\n+                                  c.getSimpleName() +\n+                                  \"Delegate\")\n+                                  .newInstance();\n+                }  catch (ClassNotFoundException |\n+                          InstantiationException |\n+                          IllegalAccessException e) {\n+                    throw new ServiceConfigurationError(\n+                        \"SPI locale provider cannot be instantiated.\", e);\n@@ -104,4 +89,3 @@\n-            });\n-        }  catch (PrivilegedActionException e) {\n-            throw new ServiceConfigurationError(\n-                \"SPI locale provider cannot be instantiated.\", e);\n+            }\n+\n+            ((Delegate)delegate).addImpl(provider);\n@@ -109,0 +93,1 @@\n+        return delegate;\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/SPILocaleProviderAdapter.java","additions":22,"deletions":37,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -75,1 +72,1 @@\n-        try (InputStream is = getResourceAsStream(path)) {\n+        try (InputStream is = getClass().getModule().getResourceAsStream(path)) {\n@@ -83,13 +80,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private InputStream getResourceAsStream(String path) throws Exception {\n-        PrivilegedExceptionAction<InputStream> pa;\n-        pa = () -> getClass().getModule().getResourceAsStream(path);\n-        InputStream is;\n-        try {\n-            is = AccessController.doPrivileged(pa);\n-        } catch (PrivilegedActionException e) {\n-            throw e.getException();\n-        }\n-        return is;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/BreakIteratorResourceBundle.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -258,1 +256,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -264,20 +261,14 @@\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<>() {\n-                    public ResourceBundle run() {\n-                        for (Iterator<ResourceBundleProvider> itr = providers.iterator(); itr.hasNext(); ) {\n-                            try {\n-                                ResourceBundleProvider provider = itr.next();\n-                                ResourceBundle bundle = provider.getBundle(baseName, locale);\n-                                if (bundle != null) {\n-                                    return bundle;\n-                                }\n-                            } catch (ServiceConfigurationError | SecurityException e) {\n-                                if (cacheKey != null) {\n-                                    cacheKey.setCause(e);\n-                                }\n-                            }\n-                        }\n-                        return null;\n-                    }\n-                });\n-\n+        for (Iterator<ResourceBundleProvider> itr = providers.iterator(); itr.hasNext(); ) {\n+            try {\n+                ResourceBundleProvider provider = itr.next();\n+                ResourceBundle bundle = provider.getBundle(baseName, locale);\n+                if (bundle != null) {\n+                    return bundle;\n+                }\n+            } catch (ServiceConfigurationError e) {\n+                if (cacheKey != null) {\n+                    cacheKey.setCause(e);\n+                }\n+            }\n+        }\n+        return null;\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/Bundles.java","additions":15,"deletions":24,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -180,1 +178,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -182,6 +179,1 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public ResourceBundle run() {\n-                return Bundles.of(baseName, locale, LocaleDataStrategy.INSTANCE);\n-            }\n-        });\n+        return Bundles.of(baseName, locale, LocaleDataStrategy.INSTANCE);\n@@ -190,1 +182,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -192,13 +183,8 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<>() {\n-           @Override\n-           public OpenListResourceBundle run() {\n-               OpenListResourceBundle rb = null;\n-               try {\n-                   rb = (OpenListResourceBundle) Bundles.of(baseName, locale,\n-                                                            SupplementaryStrategy.INSTANCE);\n-               } catch (MissingResourceException e) {\n-                   \/\/ return null if no supplementary is available\n-               }\n-               return rb;\n-           }\n-        });\n+       OpenListResourceBundle rb = null;\n+       try {\n+           rb = (OpenListResourceBundle) Bundles.of(baseName, locale,\n+                                                    SupplementaryStrategy.INSTANCE);\n+       } catch (MissingResourceException e) {\n+           \/\/ return null if no supplementary is available\n+       }\n+       return rb;\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/LocaleData.java","additions":10,"deletions":24,"binary":false,"changes":34,"status":"modified"}]}