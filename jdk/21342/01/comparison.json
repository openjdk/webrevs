{"files":[{"patch":"@@ -131,0 +131,1 @@\n+java\/awt\/dnd\/CustomDragCursorTest.java 8242805 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,289 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Cursor;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+\/*\n+ * @test\n+ * @bug 4451328\n+ * @summary tests that a custom drag cursor is not changed\n+           to the default drag cursor\n+ * @key headful\n+ * @run main CustomDragCursorTest\n+ *\/\n+\n+public class CustomDragCursorTest {\n+    private static Frame frame;\n+    private static final DragSourcePanel dragSourcePanel = new DragSourcePanel();\n+    private static final DropTargetPanel dropTargetPanel = new DropTargetPanel();\n+\n+    private static volatile Point srcPoint;\n+    private static volatile Point dstPoint;\n+    private static volatile boolean passed = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            EventQueue.invokeAndWait(CustomDragCursorTest::createAndShowUI);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                Point p = dragSourcePanel.getLocationOnScreen();\n+                Dimension d = dragSourcePanel.getSize();\n+                p.translate(d.width \/ 2, d.height \/ 2);\n+                srcPoint = p;\n+\n+                p = dropTargetPanel.getLocationOnScreen();\n+                d = dropTargetPanel.getSize();\n+                p.translate(d.width \/ 2, d.height \/ 2);\n+                dstPoint = p;\n+            });\n+\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (; !srcPoint.equals(dstPoint);\n+                 srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                                    sign(dstPoint.y - srcPoint.y))) {\n+                robot.mouseMove(srcPoint.x, srcPoint.y);\n+                robot.delay(10);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            if (!passed) {\n+                throw new RuntimeException(\"Custom drag cursor changed to default.\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frame = new Frame(\"CustomDragCursorTest\");\n+        frame.setLayout(new GridLayout(2, 1));\n+        frame.add(dragSourcePanel);\n+        frame.add(dropTargetPanel);\n+        frame.setLocationRelativeTo(null);\n+        frame.setSize(300, 400);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void failed() {\n+        passed = false;\n+    }\n+\n+    private static int sign(int n) {\n+        return Integer.compare(n, 0);\n+    }\n+\n+    private static class DragSourceButton extends Button implements Serializable,\n+                                                                    Transferable,\n+                                                                    DragGestureListener,\n+                                                                    DragSourceListener {\n+        private final DataFlavor dataflavor =\n+                new DataFlavor(Button.class, \"DragSourceButton\");\n+        private final Cursor dragCursor = new Cursor(Cursor.HAND_CURSOR);\n+\n+        public DragSourceButton() {\n+            this(\"DragSourceButton\");\n+        }\n+\n+        public DragSourceButton(String str) {\n+            super(str);\n+\n+            DragSource ds = DragSource.getDefaultDragSource();\n+            ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                                                  this);\n+        }\n+\n+        public void dragGestureRecognized(DragGestureEvent dge) {\n+            dge.startDrag(dragCursor, this, this);\n+        }\n+\n+        public void dragEnter(DragSourceDragEvent dsde) {\n+            if (!dragCursor.equals(dsde.getDragSourceContext().getCursor())) {\n+                CustomDragCursorTest.failed();\n+            }\n+        }\n+\n+        public void dragExit(DragSourceEvent dse) {\n+            if (!dragCursor.equals(dse.getDragSourceContext().getCursor())) {\n+                CustomDragCursorTest.failed();\n+            }\n+        }\n+\n+        public void dragOver(DragSourceDragEvent dsde) {\n+            if (!dragCursor.equals(dsde.getDragSourceContext().getCursor())) {\n+                CustomDragCursorTest.failed();\n+            }\n+        }\n+\n+        public void dragDropEnd(DragSourceDropEvent dsde) {\n+            if (!dragCursor.equals(dsde.getDragSourceContext().getCursor())) {\n+                CustomDragCursorTest.failed();\n+            }\n+        }\n+\n+        public void dropActionChanged(DragSourceDragEvent dsde) {\n+            if (!dragCursor.equals(dsde.getDragSourceContext().getCursor())) {\n+                CustomDragCursorTest.failed();\n+            }\n+        }\n+\n+        public Object getTransferData(DataFlavor flavor)\n+                throws UnsupportedFlavorException, IOException {\n+\n+            if (!isDataFlavorSupported(flavor)) {\n+                throw new UnsupportedFlavorException(flavor);\n+            }\n+\n+            Object retObj;\n+\n+            ByteArrayOutputStream baoStream = new ByteArrayOutputStream();\n+            ObjectOutputStream ooStream = new ObjectOutputStream(baoStream);\n+            ooStream.writeObject(this);\n+\n+            ByteArrayInputStream baiStream = new ByteArrayInputStream(baoStream.toByteArray());\n+            ObjectInputStream ois = new ObjectInputStream(baiStream);\n+            try {\n+                retObj = ois.readObject();\n+            } catch (ClassNotFoundException e) {\n+                e.printStackTrace();\n+                throw new RuntimeException(e.toString());\n+            }\n+\n+            return retObj;\n+        }\n+\n+        public DataFlavor[] getTransferDataFlavors() {\n+            return new DataFlavor[] { dataflavor };\n+        }\n+\n+        public boolean isDataFlavorSupported(DataFlavor dflavor) {\n+            return dataflavor.equals(dflavor);\n+        }\n+    }\n+\n+    private static class DragSourcePanel extends Panel {\n+\n+        final Dimension preferredDimension = new Dimension(200, 100);\n+\n+        public DragSourcePanel() {\n+            setLayout(new GridLayout(1, 1));\n+            add(new DragSourceButton());\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return preferredDimension;\n+        }\n+    }\n+\n+    private static class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+        final Dimension preferredDimension = new Dimension(200, 100);\n+\n+        public DropTargetPanel() {\n+            setDropTarget(new DropTarget(this, this));\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return preferredDimension;\n+        }\n+\n+        public void dragEnter(DropTargetDragEvent dtde) {}\n+\n+        public void dragExit(DropTargetEvent dte) {}\n+\n+        public void dragOver(DropTargetDragEvent dtde) {}\n+\n+        public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+        public void drop(DropTargetDropEvent dtde) {\n+            DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+            if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+                dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+            } else {\n+                dtde.rejectDrop();\n+            }\n+\n+            DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+            Component comp = null;\n+\n+            if(dfs != null && dfs.length >= 1) {\n+                Transferable transfer = dtde.getTransferable();\n+\n+                try {\n+                    comp = (Component)transfer.getTransferData(dfs[0]);\n+                } catch (Throwable e) {\n+                    e.printStackTrace();\n+                    dtc.dropComplete(false);\n+                }\n+            }\n+            dtc.dropComplete(true);\n+            add(comp);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/CustomDragCursorTest.java","additions":289,"deletions":0,"binary":false,"changes":289,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+\n+\/*\n+ * @test\n+ * @bug 4166541 4225247 4297663\n+ * @summary Tests Basic DnD functionality\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DnDAcceptanceTest\n+ *\/\n+\n+public class DnDAcceptanceTest {\n+     private static final String INSTRUCTIONS = \"\"\"\n+            When test runs a Frame which contains a yellow button labeled\n+            \"Drag ME!\" and a RED Panel will appear.\n+\n+            Click on the button and drag to the red panel.\n+            When the mouse enters the red panel\n+            during the drag the panel should turn yellow.\n+\n+            Release the mouse button, panel should turn red again and\n+            a yellow button labeled Drag ME! should appear inside the panel.\n+            You should be able to repeat this operation multiple times.\n+\n+            If above is true press PASS, else press FAIL.\n+            \"\"\";\n+\n+     public static void main(String[] args) throws Exception {\n+         PassFailJFrame.builder()\n+                       .title(\"Test Instructions\")\n+                       .instructions(INSTRUCTIONS)\n+                       .columns(38)\n+                       .testUI(DnDAcceptanceTest::createUI)\n+                       .build()\n+                       .awaitAndCheck();\n+     }\n+\n+     private static Frame createUI() {\n+         Frame frame = new Frame(\"DnDAcceptanceTest\");\n+         Panel mainPanel;\n+         Component dragSource, dropTarget;\n+\n+         frame.setSize(400, 400);\n+         frame.setLayout(new BorderLayout());\n+\n+         mainPanel = new Panel();\n+         mainPanel.setLayout(new BorderLayout());\n+\n+         mainPanel.setBackground(Color.BLACK);\n+\n+         dropTarget = new DnDTarget(Color.RED, Color.YELLOW);\n+         dragSource = new DnDSource(\"Drag ME!\");\n+\n+         mainPanel.add(dragSource, \"North\");\n+         mainPanel.add(dropTarget, \"Center\");\n+         frame.add(mainPanel, BorderLayout.CENTER);\n+         frame.setAlwaysOnTop(true);\n+         return frame;\n+     }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DnDAcceptanceTest\/DnDAcceptanceTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.MouseDragGestureRecognizer;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.InvalidDnDOperationException;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+class DnDSource extends Button implements Transferable,\n+                                          DragGestureListener,\n+                                          DragSourceListener {\n+    private DataFlavor df;\n+    private transient int dropAction;\n+\n+    DnDSource(String label) {\n+        super(label);\n+        Toolkit.getDefaultToolkit().createDragGestureRecognizer(MouseDragGestureRecognizer.class,\n+                                                                DragSource.getDefaultDragSource(),\n+                                                                this, DnDConstants.ACTION_COPY, this);\n+        setBackground(Color.yellow);\n+        setForeground(Color.blue);\n+        df = new DataFlavor(DnDSource.class, \"DnDSource\");\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        System.err.println(\"starting Drag\");\n+        try {\n+            dge.startDrag(null, this, this);\n+        } catch (InvalidDnDOperationException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {\n+        System.err.println(\"[Source] dragEnter\");\n+        dsde.getDragSourceContext().setCursor(DragSource.DefaultCopyDrop);\n+    }\n+\n+    public void dragOver(DragSourceDragEvent dsde) {\n+        System.err.println(\"[Source] dragOver\");\n+        dropAction = dsde.getDropAction();\n+        System.out.println(\"dropAction = \" + dropAction);\n+    }\n+\n+    public void dragGestureChanged(DragSourceDragEvent dsde) {\n+        System.err.println(\"[Source] dragGestureChanged\");\n+        dropAction = dsde.getDropAction();\n+        System.out.println(\"dropAction = \" + dropAction);\n+    }\n+\n+    public void dragExit(DragSourceEvent dsde) {\n+        System.err.println(\"[Source] dragExit\");\n+        dsde.getDragSourceContext().setCursor(null);\n+    }\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {\n+        System.err.println(\"[Source] dragDropEnd\");\n+    }\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {\n+        System.err.println(\"[Source] dropActionChanged\");\n+        dropAction = dsde.getDropAction();\n+        System.out.println(\"dropAction = \" + dropAction);\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] {df};\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor sdf) {\n+        return df.equals(sdf);\n+    }\n+\n+    public Object getTransferData(DataFlavor tdf) throws UnsupportedFlavorException, IOException {\n+\n+        Object copy = null;\n+\n+        if (!df.equals(tdf)) {\n+            throw new UnsupportedFlavorException(tdf);\n+        }\n+        Container parent = getParent();\n+        switch (dropAction) {\n+            case DnDConstants.ACTION_COPY:\n+                try {\n+                    copy = this.clone();\n+                } catch (CloneNotSupportedException e) {\n+                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                    ObjectOutputStream oos  = new ObjectOutputStream(baos);\n+\n+                    oos.writeObject(this);\n+                    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n+                    ObjectInputStream ois = new ObjectInputStream(bais);\n+                    try {\n+                        copy = ois.readObject();\n+                    } catch (ClassNotFoundException cnfe) {\n+                        \/\/ do nothing\n+                    }\n+                }\n+\n+                parent.add(this);\n+                return copy;\n+\n+            case DnDConstants.ACTION_MOVE:\n+                synchronized(this) {\n+                    if (parent != null) parent.remove(this);\n+                }\n+                return this;\n+\n+            case DnDConstants.ACTION_LINK:\n+                return this;\n+\n+            default:\n+                \/\/throw new IOException(\"bad operation\");\n+                return this; \/\/ workaround for: 4135456  getDropAction() always return 0\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DnDAcceptanceTest\/DnDSource.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Panel;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.io.IOException;\n+\n+class DnDTarget extends Panel implements DropTargetListener {\n+    Color bgColor;\n+    Color htColor;\n+\n+    DnDTarget(Color bgColor, Color htColor) {\n+        super();\n+        this.bgColor = bgColor;\n+        this.htColor = htColor;\n+        setBackground(bgColor);\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent e) {\n+        System.err.println(\"[Target] dragEnter\");\n+        e.acceptDrag(DnDConstants.ACTION_COPY);\n+        setBackground(htColor);\n+        repaint();\n+    }\n+\n+    public void dragOver(DropTargetDragEvent e) {\n+        System.err.println(\"[Target] dragOver\");\n+        e.acceptDrag(DnDConstants.ACTION_COPY);\n+    }\n+\n+    public void dragExit(DropTargetEvent e) {\n+        System.err.println(\"[Target] dragExit\");\n+        setBackground(bgColor);\n+        repaint();\n+    }\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        System.err.println(\"[Target] drop\");\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+            return;\n+        }\n+\n+        DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+        if (dfs != null && dfs.length >= 1) {\n+            Transferable transfer = dtde.getTransferable();\n+            Object obj;\n+            try {\n+                obj = transfer.getTransferData(dfs[0]);\n+            } catch (IOException | UnsupportedFlavorException ex) {\n+                System.err.println(ex.getMessage());\n+                dtc.dropComplete(false);\n+                return;\n+            }\n+\n+            if (obj != null) {\n+                Button button;\n+                try {\n+                    button = (Button) obj;\n+                } catch (Exception e) {\n+                    System.err.println(e.getMessage());\n+                    dtc.dropComplete(false);\n+                    return;\n+                }\n+                add(button);\n+                repaint();\n+            }\n+        }\n+        setBackground(bgColor);\n+        invalidate();\n+        validate();\n+        repaint();\n+        dtc.dropComplete(true);\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent e) {\n+    System.err.println(\"[Target] dropActionChanged\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DnDAcceptanceTest\/DnDTarget.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}