{"files":[{"patch":"@@ -564,16 +564,4 @@\n-            if (keySensitive) {\n-                return new P11RSAPrivateKeyInternal(session, keyID, algorithm,\n-                        keyLength, attrs);\n-            } else {\n-                CK_ATTRIBUTE[] rsaAttrs = new CK_ATTRIBUTE[] {\n-                        new CK_ATTRIBUTE(CKA_MODULUS),\n-                        new CK_ATTRIBUTE(CKA_PRIVATE_EXPONENT),\n-                        new CK_ATTRIBUTE(CKA_PUBLIC_EXPONENT),\n-                        new CK_ATTRIBUTE(CKA_PRIME_1),\n-                        new CK_ATTRIBUTE(CKA_PRIME_2),\n-                        new CK_ATTRIBUTE(CKA_EXPONENT_1),\n-                        new CK_ATTRIBUTE(CKA_EXPONENT_2),\n-                        new CK_ATTRIBUTE(CKA_COEFFICIENT),\n-                };\n-                boolean isCRT = true;\n-                Session tempSession = null;\n+            P11RSAPrivateKeyInternal p11Key = null;\n+            if (!keySensitive) {\n+                \/\/ Key is not sensitive: try to interpret as CRT or non-CRT.\n+                Session opSession = null;\n@@ -581,6 +569,6 @@\n-                    tempSession = session.token.getOpSession();\n-                    session.token.p11.C_GetAttributeValue(tempSession.id(),\n-                            keyID, rsaAttrs);\n-                    for (CK_ATTRIBUTE attr : rsaAttrs) {\n-                        isCRT &= (attr.pValue instanceof byte[]);\n-                        if (!isCRT) break;\n+                    opSession = session.token.getOpSession();\n+                    p11Key = asCRT(session, opSession, keyID, algorithm,\n+                            keyLength, attrs);\n+                    if (p11Key == null) {\n+                        p11Key = asNonCRT(session, opSession, keyID, algorithm,\n+                                keyLength, attrs);\n@@ -588,3 +576,2 @@\n-                } catch (PKCS11Exception e) {\n-                    \/\/ ignore, assume not available\n-                    isCRT = false;\n+                } catch (PKCS11Exception ignored) {\n+                    \/\/ Error getting an OpSession, unlikely.\n@@ -592,1 +579,1 @@\n-                    session.token.releaseSession(tempSession);\n+                    session.token.releaseSession(opSession);\n@@ -594,9 +581,30 @@\n-                BigInteger n = rsaAttrs[0].getBigInteger();\n-                BigInteger d = rsaAttrs[1].getBigInteger();\n-                if (isCRT) {\n-                    return new P11RSAPrivateKey(session, keyID, algorithm,\n-                           keyLength, attrs, n, d,\n-                           Arrays.copyOfRange(rsaAttrs, 2, rsaAttrs.length));\n-                } else {\n-                    return new P11RSAPrivateNonCRTKey(session, keyID,\n-                           algorithm, keyLength, attrs, n, d);\n+            }\n+            if (p11Key == null) {\n+                \/\/ Key is sensitive or there was a failure while querying its\n+                \/\/ attributes: handle as opaque.\n+                p11Key = new P11RSAPrivateKeyInternal(session, keyID, algorithm,\n+                        keyLength, attrs);\n+            }\n+            return p11Key;\n+        }\n+\n+        private static P11RSAPrivateKeyInternal asCRT(Session session,\n+                Session opSession, long keyID, String algorithm, int keyLength,\n+                CK_ATTRIBUTE[] attrs) {\n+            CK_ATTRIBUTE[] rsaCRTAttrs = new CK_ATTRIBUTE[] {\n+                    new CK_ATTRIBUTE(CKA_MODULUS),\n+                    new CK_ATTRIBUTE(CKA_PRIVATE_EXPONENT),\n+                    new CK_ATTRIBUTE(CKA_PUBLIC_EXPONENT),\n+                    new CK_ATTRIBUTE(CKA_PRIME_1),\n+                    new CK_ATTRIBUTE(CKA_PRIME_2),\n+                    new CK_ATTRIBUTE(CKA_EXPONENT_1),\n+                    new CK_ATTRIBUTE(CKA_EXPONENT_2),\n+                    new CK_ATTRIBUTE(CKA_COEFFICIENT),\n+            };\n+            try {\n+                session.token.p11.C_GetAttributeValue(opSession.id(),\n+                        keyID, rsaCRTAttrs);\n+                for (CK_ATTRIBUTE attr : rsaCRTAttrs) {\n+                    if (!(attr.pValue instanceof byte[])) {\n+                        return null;\n+                    }\n@@ -604,0 +612,25 @@\n+                return new P11RSAPrivateKey(session, keyID, algorithm,\n+                        keyLength, attrs, rsaCRTAttrs[0].getBigInteger(),\n+                        rsaCRTAttrs[1].getBigInteger(),\n+                        Arrays.copyOfRange(rsaCRTAttrs, 2, rsaCRTAttrs.length));\n+            } catch (PKCS11Exception ignored) {\n+                \/\/ ignore, assume not available\n+            }\n+            return null;\n+        }\n+\n+        private static P11RSAPrivateKeyInternal asNonCRT(Session session,\n+                Session opSession, long keyID, String algorithm, int keyLength,\n+                CK_ATTRIBUTE[] attrs) {\n+            CK_ATTRIBUTE[] rsaNonCRTAttrs = new CK_ATTRIBUTE[] {\n+                    new CK_ATTRIBUTE(CKA_MODULUS),\n+                    new CK_ATTRIBUTE(CKA_PRIVATE_EXPONENT),\n+            };\n+            try {\n+                session.token.p11.C_GetAttributeValue(opSession.id(), keyID,\n+                        rsaNonCRTAttrs);\n+                return new P11RSAPrivateNonCRTKey(session, keyID, algorithm,\n+                        keyLength, attrs, rsaNonCRTAttrs[0].getBigInteger(),\n+                        rsaNonCRTAttrs[1].getBigInteger());\n+            } catch (PKCS11Exception ignored) {\n+                \/\/ ignore, assume not available\n@@ -605,0 +638,1 @@\n+            return null;\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Key.java","additions":69,"deletions":35,"binary":false,"changes":104,"status":"modified"}]}