{"files":[{"patch":"@@ -567,13 +567,4 @@\n-                Session opSession = null;\n-                try {\n-                    opSession = session.token.getOpSession();\n-                    p11Key = asCRT(session, opSession, keyID, algorithm,\n-                            keyLength, attrs);\n-                    if (p11Key == null) {\n-                        p11Key = asNonCRT(session, opSession, keyID, algorithm,\n-                                keyLength, attrs);\n-                    }\n-                } catch (PKCS11Exception ignored) {\n-                    \/\/ Error getting an OpSession, unlikely.\n-                } finally {\n-                    session.token.releaseSession(opSession);\n+                p11Key = asCRT(session, keyID, algorithm, keyLength, attrs);\n+                if (p11Key == null) {\n+                    p11Key = asNonCRT(session, keyID, algorithm, keyLength,\n+                            attrs);\n@@ -591,13 +582,7 @@\n-        private static P11RSAPrivateKeyInternal asCRT(Session session,\n-                Session opSession, long keyID, String algorithm, int keyLength,\n-                CK_ATTRIBUTE[] attrs) {\n-            CK_ATTRIBUTE[] rsaCRTAttrs = new CK_ATTRIBUTE[] {\n-                    new CK_ATTRIBUTE(CKA_MODULUS),\n-                    new CK_ATTRIBUTE(CKA_PRIVATE_EXPONENT),\n-                    new CK_ATTRIBUTE(CKA_PUBLIC_EXPONENT),\n-                    new CK_ATTRIBUTE(CKA_PRIME_1),\n-                    new CK_ATTRIBUTE(CKA_PRIME_2),\n-                    new CK_ATTRIBUTE(CKA_EXPONENT_1),\n-                    new CK_ATTRIBUTE(CKA_EXPONENT_2),\n-                    new CK_ATTRIBUTE(CKA_COEFFICIENT),\n-            };\n+        private static CK_ATTRIBUTE[] tryFetchAttributes(Session session,\n+                long keyID, long... attrTypes) {\n+            int i = 0;\n+            CK_ATTRIBUTE[] attrs = new CK_ATTRIBUTE[attrTypes.length];\n+            for (long attrType : attrTypes) {\n+                attrs[i++] = new CK_ATTRIBUTE(attrType);\n+            }\n@@ -605,3 +590,3 @@\n-                session.token.p11.C_GetAttributeValue(opSession.id(),\n-                        keyID, rsaCRTAttrs);\n-                for (CK_ATTRIBUTE attr : rsaCRTAttrs) {\n+                session.token.p11.C_GetAttributeValue(session.id(), keyID,\n+                        attrs);\n+                for (CK_ATTRIBUTE attr : attrs) {\n@@ -612,4 +597,1 @@\n-                return new P11RSAPrivateKey(session, keyID, algorithm,\n-                        keyLength, attrs, rsaCRTAttrs[0].getBigInteger(),\n-                        rsaCRTAttrs[1].getBigInteger(),\n-                        Arrays.copyOfRange(rsaCRTAttrs, 2, rsaCRTAttrs.length));\n+                return attrs;\n@@ -618,0 +600,1 @@\n+                return null;\n@@ -619,1 +602,16 @@\n-            return null;\n+        }\n+\n+        private static P11RSAPrivateKeyInternal asCRT(Session session,\n+                long keyID, String algorithm, int keyLength,\n+                CK_ATTRIBUTE[] attrs) {\n+            CK_ATTRIBUTE[] rsaCRTAttrs = tryFetchAttributes(session, keyID,\n+                    CKA_MODULUS, CKA_PRIVATE_EXPONENT, CKA_PUBLIC_EXPONENT,\n+                    CKA_PRIME_1, CKA_PRIME_2, CKA_EXPONENT_1, CKA_EXPONENT_2,\n+                    CKA_COEFFICIENT);\n+            if (rsaCRTAttrs == null) {\n+                return null;\n+            }\n+            return new P11RSAPrivateKey(session, keyID, algorithm, keyLength,\n+                    attrs, rsaCRTAttrs[0].getBigInteger(),\n+                    rsaCRTAttrs[1].getBigInteger(),\n+                    Arrays.copyOfRange(rsaCRTAttrs, 2, rsaCRTAttrs.length));\n@@ -623,1 +621,1 @@\n-                Session opSession, long keyID, String algorithm, int keyLength,\n+                long keyID, String algorithm, int keyLength,\n@@ -625,12 +623,4 @@\n-            CK_ATTRIBUTE[] rsaNonCRTAttrs = new CK_ATTRIBUTE[] {\n-                    new CK_ATTRIBUTE(CKA_MODULUS),\n-                    new CK_ATTRIBUTE(CKA_PRIVATE_EXPONENT),\n-            };\n-            try {\n-                session.token.p11.C_GetAttributeValue(opSession.id(), keyID,\n-                        rsaNonCRTAttrs);\n-                return new P11RSAPrivateNonCRTKey(session, keyID, algorithm,\n-                        keyLength, attrs, rsaNonCRTAttrs[0].getBigInteger(),\n-                        rsaNonCRTAttrs[1].getBigInteger());\n-            } catch (PKCS11Exception ignored) {\n-                \/\/ ignore, assume not available\n+            CK_ATTRIBUTE[] rsaNonCRTAttrs = tryFetchAttributes(session, keyID,\n+                    CKA_MODULUS, CKA_PRIVATE_EXPONENT);\n+            if (rsaNonCRTAttrs == null) {\n+                return null;\n@@ -638,1 +628,3 @@\n-            return null;\n+            return new P11RSAPrivateNonCRTKey(session, keyID, algorithm,\n+                    keyLength, attrs, rsaNonCRTAttrs[0].getBigInteger(),\n+                    rsaNonCRTAttrs[1].getBigInteger());\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Key.java","additions":40,"deletions":48,"binary":false,"changes":88,"status":"modified"}]}