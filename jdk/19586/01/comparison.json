{"files":[{"patch":"@@ -560,2 +560,8 @@\n-        if (exitCode == STILL_ACTIVE)\n-            throw new IllegalThreadStateException(\"process has not exited\");\n+        if (exitCode == STILL_ACTIVE) {\n+            \/\/ STILL_ACTIVE (259) might be the real exit code\n+            if (isProcessAlive(handle)) {\n+                throw new IllegalThreadStateException(\"process has not exited\");\n+            }\n+            \/\/ call again, in case the process just exited\n+            return getExitCodeProcess(handle);\n+        }\n@@ -585,1 +591,1 @@\n-        if (getExitCodeProcess(handle) != STILL_ACTIVE) return true;\n+        if (!isProcessAlive(handle)) return true;\n@@ -604,1 +610,1 @@\n-            if (getExitCodeProcess(handle) != STILL_ACTIVE) {\n+            if (!isProcessAlive(handle)) {\n@@ -610,1 +616,1 @@\n-        return (getExitCodeProcess(handle) != STILL_ACTIVE);\n+        return !isProcessAlive(handle);\n","filename":"src\/java.base\/windows\/classes\/java\/lang\/ProcessImpl.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,2 +112,9 @@\n-    do {\n-        if (!GetExitCodeProcess(handle, &exitValue)) {\n+    if (!GetExitCodeProcess(handle, &exitValue)) {\n+        JNU_ThrowByNameWithLastError(env,\n+            \"java\/lang\/RuntimeException\", \"GetExitCodeProcess\");\n+    } else if (exitValue == STILL_ACTIVE) {\n+        if (WaitForSingleObject(handle, INFINITE) \/* Wait forever *\/\n+            == WAIT_FAILED) {\n+            JNU_ThrowByNameWithLastError(env,\n+                \"java\/lang\/RuntimeException\", \"WaitForSingleObjects\");\n+        } else if (!GetExitCodeProcess(handle, &exitValue)) {\n@@ -116,15 +123,0 @@\n-            break;\n-        }\n-        if (exitValue == STILL_ACTIVE) {\n-            HANDLE events[2];\n-            events[0] = handle;\n-            events[1] = JVM_GetThreadInterruptEvent();\n-\n-            if (WaitForMultipleObjects(sizeof(events)\/sizeof(events[0]), events,\n-                                       FALSE,    \/* Wait for ANY event *\/\n-                                       INFINITE) \/* Wait forever *\/\n-                == WAIT_FAILED) {\n-                JNU_ThrowByNameWithLastError(env,\n-                    \"java\/lang\/RuntimeException\", \"WaitForMultipleObjects\");\n-                break;\n-            }\n@@ -132,1 +124,1 @@\n-    } while (exitValue == STILL_ACTIVE);\n+    }\n","filename":"src\/java.base\/windows\/native\/libjava\/ProcessHandleImpl_win.c","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -470,3 +470,2 @@\n-    DWORD dwExitStatus;\n-    GetExitCodeProcess((HANDLE) handle, &dwExitStatus);\n-    return dwExitStatus == STILL_ACTIVE;\n+    return WaitForSingleObject((HANDLE) handle, 0) \/* don't wait *\/\n+                       == WAIT_TIMEOUT;\n","filename":"src\/java.base\/windows\/native\/libjava\/ProcessImpl_md.c","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import jdk.test.lib.Platform;\n@@ -43,0 +44,1 @@\n+ * @bug 8333742\n@@ -68,1 +70,1 @@\n-            int[] exitValues = {0, 1, 10};\n+            int[] exitValues = {0, 1, 10, 259};\n@@ -70,0 +72,2 @@\n+                \/\/ Linux & Mac don't support exit codes longer than 8 bits, skip\n+                if (value == 259 && !Platform.isWindows()) continue;\n@@ -84,1 +88,3 @@\n-                p.waitFor();\n+                Assert.assertEquals(p.waitFor(), value);\n+                Assert.assertTrue(p.waitFor(1, TimeUnit.MILLISECONDS),\n+                        \"waitFor should return true\");\n","filename":"test\/jdk\/java\/lang\/ProcessHandle\/OnExitTest.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}