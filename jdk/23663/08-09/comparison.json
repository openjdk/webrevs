{"files":[{"patch":"@@ -5692,0 +5692,1 @@\n+\n@@ -5694,0 +5695,1 @@\n+\n@@ -5697,7 +5699,13 @@\n-    vs_ld2_post(vs_front(vs1), __ T8H, ntta);\n-    vs_ld2_post(vs_back(vs1), __ T8H, nttb);\n-    vs_ld2_post(vs_front(vs4), __ T8H, ntta);\n-    vs_ld2_post(vs_back(vs4), __ T8H, nttb);\n-    \/\/ montmul the first and second pair of values loaded into vs1\n-    \/\/ in order and then with one pair reversed storing the  two\n-    \/\/ results in vs3\n+    vs_ld2_post(vs_front(vs1), __ T8H, ntta); \/\/ <a0, a1> x 8H\n+    vs_ld2_post(vs_back(vs1), __ T8H, nttb);  \/\/ <b0, b1> x 8H\n+    vs_ld2_post(vs_front(vs4), __ T8H, ntta); \/\/ <a2, a3> x 8H\n+    vs_ld2_post(vs_back(vs4), __ T8H, nttb);  \/\/ <b2, b3> x 8H\n+\n+    \/\/ compute 4 montmul cross-products for pairs (a0,a1) and (b0,b1)\n+    \/\/ i.e. montmul the first and second halves of vs1 in order and\n+    \/\/ then with one sequence reversed storing the two results in vs3\n+    \/\/\n+    \/\/ vs3[0] <- montmul(a0, b0)\n+    \/\/ vs3[1] <- montmul(a1, b1)\n+    \/\/ vs3[2] <- montmul(a0, b1)\n+    \/\/ vs3[3] <- montmul(a1, b0)\n@@ -5707,3 +5715,9 @@\n-    \/\/ montmul the first and second pair of values loaded into vs4\n-    \/\/ in order and then with one pair reversed storing the two\n-    \/\/ results in vs1\n+\n+    \/\/ compute 4 montmul cross-products for pairs (a2,a3) and (b2,b3)\n+    \/\/ i.e. montmul the first and second halves of vs4 in order and\n+    \/\/ then with one sequence reversed storing the two results in vs1\n+    \/\/\n+    \/\/ vs1[0] <- montmul(a2, b2)\n+    \/\/ vs1[1] <- montmul(a3, b3)\n+    \/\/ vs1[2] <- montmul(a2, b3)\n+    \/\/ vs1[3] <- montmul(a3, b2)\n@@ -5713,3 +5727,4 @@\n-    \/\/ for each pair of results pick the second value in the first\n-    \/\/ pair to create a sequence that we montmul by the zetas\n-    \/\/ i.e. we want sequence <vs3[1], vs1[1]>\n+\n+    \/\/ montmul result 2 of each cross-product i.e. (a1*b1, a3*b3) by a zeta.\n+    \/\/ We can schedule two montmuls at a time if we use a suitable vector\n+    \/\/ sequence <vs3[1], vs1[1]>.\n@@ -5718,0 +5733,3 @@\n+\n+    \/\/ vs3[1] <- montmul(montmul(a1, b1), z0)\n+    \/\/ vs1[1] <- montmul(montmul(a3, b3), z1)\n@@ -5719,0 +5737,1 @@\n+\n@@ -5720,0 +5739,2 @@\n+    \/\/ vs3[0] <- montmul(a0, b0) + montmul(montmul(a1, b1), z0);\n+    \/\/ vs3[1] <- montmul(a0, b1) + montmul(a1, b0);\n@@ -5721,0 +5742,3 @@\n+\n+    \/\/ vs3[2] <- montmul(a2, b2) + montmul(montmul(a3, b3), z1);\n+    \/\/ vs3[3] <- montmul(a2, b3) + montmul(a3, b2);\n@@ -5722,1 +5746,2 @@\n-    \/\/ montmul result by constant vc and store result in vs1\n+\n+    \/\/ vs1 <- montmul(vs3, montRSquareModQ)\n@@ -5724,2 +5749,4 @@\n-    \/\/ store the four results as two interleaved pairs of\n-    \/\/ quadwords\n+\n+    \/\/ store back the two pairs of result vectors de-interleaved as 8H elements\n+    \/\/ i.e. storing each pairs of shorts striped across a register pair adjacent\n+    \/\/ in memory\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":43,"deletions":16,"binary":false,"changes":59,"status":"modified"}]}