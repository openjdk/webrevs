{"files":[{"patch":"@@ -4446,4 +4446,2 @@\n-\n-      if (round%2 == 0) {\n-        __ ld(ws[round\/2], Address(buf, 0));\n-        __ addi(buf, buf, 8);\n+      if ((round % 2) == 0) {\n+        __ ld(ws[round\/2], Address(buf, round * 4));\n@@ -4460,1 +4458,6 @@\n-    if (round%2 == 0) {\n+    if (round == 16) {\n+      int64_t block_bytes = round * 4;\n+      __ addi(buf, buf, block_bytes);\n+    }\n+\n+    if ((round % 2) == 0) {\n@@ -4494,2 +4497,1 @@\n-    __ slli(cur_w, cur_w, 32);\n-    __ srli(cur_w, cur_w, 32);\n+    __ zero_extend(cur_w, cur_w, 32);\n@@ -4543,1 +4545,1 @@\n-                          Register cur_k, Register cur_w, Register tmp1, Register tmp2) {\n+                          Register cur_k, Register cur_w, Register tmp) {\n@@ -4545,1 +4547,1 @@\n-    assert_different_registers(a, b, c, d, e, cur_w, cur_k, tmp1, tmp2);\n+    assert_different_registers(a, b, c, d, e, cur_w, cur_k, tmp);\n@@ -4550,1 +4552,0 @@\n-      __ add(t, t, cur_w);\n@@ -4552,4 +4553,8 @@\n-      __ rolw_imm(tmp1, a, 5, tmp2);\n-      __ add(t, t, tmp1);\n-      sha1_f(round, tmp1, b, c, d, tmp2);\n-      __ add(tmp1, t, tmp1);\n+      __ add(t, t, cur_w);\n+      \/\/ cur_w will be recalculated at the beginning of another round,\n+      \/\/ so, we can reuse it as a temp register here.\n+      __ rolw_imm(tmp, a, 5, cur_w);\n+      __ add(t, t, tmp);\n+      \/\/ as pointed above, we can use cur_w as temporary register here.\n+      sha1_f(round, tmp, b, c, d, cur_w);\n+      __ add(tmp, t, tmp);\n@@ -4565,1 +4570,2 @@\n-    __ rolw_imm(c, b, 30, tmp2);\n+    \/\/ as pointed above, we can use cur_w as temporary register here.\n+    __ rolw_imm(c, b, 30, cur_w);\n@@ -4567,1 +4573,1 @@\n-    __ mv(a, tmp1);\n+    __ mv(a, tmp);\n@@ -4570,0 +4576,5 @@\n+  \/\/ H(i)0 = a + H(i-1)0\n+  \/\/ H(i)1 = b + H(i-1)1\n+  \/\/ H(i)2 = c + H(i-1)2\n+  \/\/ H(i)3 = d + H(i-1)3\n+  \/\/ H(i)4 = e + H(i-1)4\n@@ -4585,1 +4596,1 @@\n-  void sha1_reserve_prev_abcde(Register a, Register b, Register c, Register d, Register e,\n+  void sha1_preserve_prev_abcde(Register a, Register b, Register c, Register d, Register e,\n@@ -4587,3 +4598,2 @@\n-                               Register tmp1, Register tmp2) {\n-    assert_different_registers(a, b, c, d, e, prev_ab, prev_cd, prev_e, tmp1, tmp2);\n-    int64_t mask32 = 0xffffffff;\n+                               Register mask32, Register tmp) {\n+    assert_different_registers(a, b, c, d, e, prev_ab, prev_cd, prev_e, mask32, tmp);\n@@ -4591,3 +4601,3 @@\n-    __ slli(tmp1, b, 32);\n-    __ andi(prev_ab, a, mask32, tmp2);\n-    __ orr(prev_ab, prev_ab, tmp1);\n+    __ slli(tmp, b, 32);\n+    __ andr(prev_ab, a, mask32);\n+    __ orr(prev_ab, prev_ab, tmp);\n@@ -4595,3 +4605,3 @@\n-    __ slli(tmp1, d, 32);\n-    __ andi(prev_cd, c, mask32, tmp2);\n-    __ orr(prev_cd, prev_cd, tmp1);\n+    __ slli(tmp, d, 32);\n+    __ andr(prev_cd, c, mask32);\n+    __ orr(prev_cd, prev_cd, tmp);\n@@ -4661,1 +4671,3 @@\n-    const Register prev_ab = x26, prev_cd = x27, prev_e = t2;\n+    const Register prev_ab = x26, prev_cd = x27, prev_e = t1;\n+\n+    const Register mask32 = t2;\n@@ -4664,1 +4676,1 @@\n-    saved_regs += RegSet::of(t2);\n+    saved_regs += RegSet::of(tp);\n@@ -4667,0 +4679,2 @@\n+    __ mv(mask32, 0xffffffff);\n+\n@@ -4685,1 +4699,0 @@\n-\n@@ -4691,1 +4704,1 @@\n-    sha1_reserve_prev_abcde(a, b, c, d, e, prev_ab, prev_cd, prev_e, t0, t1);\n+    sha1_preserve_prev_abcde(a, b, c, d, e, prev_ab, prev_cd, prev_e, mask32, t0);\n@@ -4701,1 +4714,1 @@\n-      sha1_process_round(round, a, b, c, d, e, cur_k, cur_w, t0, t1);\n+      sha1_process_round(round, a, b, c, d, e, cur_k, cur_w, t0);\n@@ -4714,2 +4727,2 @@\n-    int64_t mask32 = 0xffffffff;\n-    __ andi(a, a, mask32, t0);\n+    \/\/ store back the state.\n+    __ andr(a, a, mask32);\n@@ -4719,1 +4732,1 @@\n-    __ andi(c, c, mask32, t0);\n+    __ andr(c, c, mask32);\n@@ -4725,1 +4738,0 @@\n-\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":47,"deletions":35,"binary":false,"changes":82,"status":"modified"}]}