{"files":[{"patch":"@@ -4442,1 +4442,2 @@\n-  void sha1_prepare_w(int round, Register cur_w, Register ws[], Register buf, Register tmp) {\n+  void sha1_prepare_w(int round, Register cur_w, Register ws[], Register buf,\n+                      Register tmp1, Register tmp2, Register tmp3) {\n@@ -4466,8 +4467,10 @@\n-      __ mv(cur_w, ws[(idx-3)\/2]);\n-      __ srli(tmp, ws[(idx-8)\/2], 32);\n-      __ xorr(cur_w, cur_w, tmp);\n-      __ srli(tmp, ws[(idx-14)\/2], 32);\n-      __ xorr(cur_w, cur_w, tmp);\n-      __ srli(tmp, ws[(idx-16)\/2], 32);\n-      __ xorr(cur_w, cur_w, tmp);\n-      __ rolw_imm(cur_w, cur_w, 1, tmp);\n+      __ mv(tmp1, ws[(idx-3)\/2]);\n+      __ srli(tmp2, ws[(idx-8)\/2], 32);\n+      __ xorr(tmp1, tmp1, tmp2);\n+\n+      __ srli(tmp3, ws[(idx-14)\/2], 32);\n+      __ srli(cur_w, ws[(idx-16)\/2], 32);\n+      __ xorr(cur_w, cur_w, tmp3);\n+\n+      __ xorr(cur_w, cur_w, tmp1);\n+      __ rolw_imm(cur_w, cur_w, 1, tmp1);\n@@ -4487,8 +4490,10 @@\n-    __ srli(cur_w, ws[(idx-3)\/2], 32);\n-    __ mv(tmp, ws[(idx-8)\/2]);\n-    __ xorr(cur_w, cur_w, tmp);\n-    __ mv(tmp, ws[(idx-14)\/2]);\n-    __ xorr(cur_w, cur_w, tmp);\n-    __ mv(tmp, ws[(idx-16)\/2]);\n-    __ xorr(cur_w, cur_w, tmp);\n-    __ rolw_imm(cur_w, cur_w, 1, tmp);\n+    __ srli(tmp1, ws[(idx-3)\/2], 32);\n+    __ mv(tmp2, ws[(idx-8)\/2]);\n+    __ xorr(tmp1, tmp1, tmp2);\n+\n+    __ mv(tmp3, ws[(idx-14)\/2]);\n+    __ mv(cur_w, ws[(idx-16)\/2]);\n+    __ xorr(cur_w, cur_w, tmp3);\n+\n+    __ xorr(cur_w, cur_w, tmp1);\n+    __ rolw_imm(cur_w, cur_w, 1, tmp1);\n@@ -4515,1 +4520,2 @@\n-  void sha1_f(int round, Register dst, Register x, Register y, Register z, Register tmp) {\n+  void sha1_f(int round, Register dst, Register x, Register y, Register z,\n+              Register tmp1, Register tmp2) {\n@@ -4517,1 +4523,1 @@\n-    assert_different_registers(dst, x, y, z, tmp);\n+    assert_different_registers(dst, x, y, z, tmp1, tmp2);\n@@ -4521,3 +4527,3 @@\n-      __ andr(dst, x, y);\n-      __ andn(tmp, z, x);\n-      __ xorr(dst, dst, tmp);\n+      __ andr(tmp1, x, y);\n+      __ andn(dst, z, x);\n+      __ xorr(dst, dst, tmp1);\n@@ -4526,5 +4532,5 @@\n-      __ andr(tmp, x, y);\n-      __ andr(dst, x, z);\n-      __ xorr(dst, dst, tmp);\n-      __ andr(tmp, y, z);\n-      __ xorr(dst, dst, tmp);\n+      __ andr(tmp1, x, y);\n+      __ andr(tmp2, x, z);\n+      __ andr(dst, y, z);\n+      __ xorr(dst, dst, tmp1);\n+      __ xorr(dst, dst, tmp2);\n@@ -4545,1 +4551,2 @@\n-                          Register cur_k, Register cur_w, Register tmp) {\n+                          Register cur_k, Register cur_w,\n+                          Register tmp1, Register tmp2, Register tmp3) {\n@@ -4547,1 +4554,1 @@\n-    assert_different_registers(a, b, c, d, e, cur_w, cur_k, tmp);\n+    assert_different_registers(a, b, c, d, e, cur_w, cur_k, tmp1, tmp2, tmp3);\n@@ -4551,0 +4558,1 @@\n+      \/\/ reuse e as a temporary register, as we will mv new value into it later\n@@ -4552,3 +4560,1 @@\n-      __ add(t, t, cur_k);\n-      __ add(t, t, cur_w);\n-      \/\/ cur_w will be recalculated at the beginning of another round,\n+      \/\/ cur_w will be recalculated at the beginning of each round,\n@@ -4556,2 +4562,3 @@\n-      __ rolw_imm(tmp, a, 5, cur_w);\n-      __ add(t, t, tmp);\n+      __ add(cur_w, cur_k, cur_w);\n+      __ add(t, t, cur_w);\n+      __ rolw_imm(tmp1, a, 5, tmp2);\n@@ -4559,2 +4566,3 @@\n-      sha1_f(round, tmp, b, c, d, cur_w);\n-      __ add(tmp, t, tmp);\n+      sha1_f(round, tmp3, b, c, d, cur_w, tmp2);\n+      __ add(tmp1, tmp1, tmp3);\n+      __ add(tmp1, tmp1, t);\n@@ -4573,1 +4581,1 @@\n-    __ mv(a, tmp);\n+    __ mv(a, tmp1);\n@@ -4597,3 +4605,3 @@\n-                               Register prev_ab, Register prev_cd, Register prev_e,\n-                               Register mask32, Register tmp) {\n-    assert_different_registers(a, b, c, d, e, prev_ab, prev_cd, prev_e, mask32, tmp);\n+                                Register prev_ab, Register prev_cd, Register prev_e,\n+                                Register tmp) {\n+    assert_different_registers(a, b, c, d, e, prev_ab, prev_cd, prev_e, tmp);\n@@ -4602,1 +4610,1 @@\n-    __ andr(prev_ab, a, mask32);\n+    __ zero_extend(prev_ab, a, 32);\n@@ -4606,1 +4614,1 @@\n-    __ andr(prev_cd, c, mask32);\n+    __ zero_extend(prev_cd, c, 32);\n@@ -4621,1 +4629,1 @@\n-  \/\/   - - - - - - below are for implCompressMultiBlock0 - - - - - -\n+  \/\/   - - - - - - below are only for implCompressMultiBlock0 - - - - - -\n@@ -4626,1 +4634,1 @@\n-  \/\/   - - - - - - below are for implCompressMultiBlock0 - - - - - -\n+  \/\/   - - - - - - below are only for implCompressMultiBlock0 - - - - - -\n@@ -4640,0 +4648,3 @@\n+    \/\/ use src to contain the original start point of the array,\n+    \/\/ reuse offset register here.\n+    Register src    = offset;\n@@ -4642,0 +4653,14 @@\n+    if (multi_block) {\n+      __ sub(limit, limit, offset);\n+      __ add(limit, limit, buf);\n+      __ sub(src, buf, offset);\n+    }\n+\n+    RegSet saved_regs = RegSet::range(x18, x27);\n+    if (multi_block) {\n+      \/\/ put original start point of the array) on stack,\n+      \/\/ as we run out of registers.\n+      saved_regs += RegSet::of(src);\n+    }\n+    __ push_reg(saved_regs, sp);\n+\n@@ -4671,9 +4696,2 @@\n-    const Register prev_ab = x26, prev_cd = x27, prev_e = t1;\n-\n-    const Register mask32 = t2;\n-\n-    RegSet saved_regs = RegSet::range(x18, x27);\n-    saved_regs += RegSet::of(tp);\n-    __ push_reg(saved_regs, sp);\n-\n-    __ mv(mask32, 0xffffffff);\n+    const Register prev_ab = x26, prev_cd = x27;\n+    const Register prev_e = offset; \/\/ reuse offset\/c_rarg2\n@@ -4704,1 +4722,1 @@\n-    sha1_preserve_prev_abcde(a, b, c, d, e, prev_ab, prev_cd, prev_e, mask32, t0);\n+    sha1_preserve_prev_abcde(a, b, c, d, e, prev_ab, prev_cd, prev_e, t0);\n@@ -4711,1 +4729,1 @@\n-      sha1_prepare_w(round, cur_w, ws, buf, t0);\n+      sha1_prepare_w(round, cur_w, ws, buf, t0, t1, t2);\n@@ -4714,1 +4732,1 @@\n-      sha1_process_round(round, a, b, c, d, e, cur_k, cur_w, t0);\n+      sha1_process_round(round, a, b, c, d, e, cur_k, cur_w, t0, t1, t2);\n@@ -4721,4 +4739,1 @@\n-      __ addi(offset, offset, 64);\n-      __ ble(offset, limit, L_sha1_loop, true);\n-      \/\/ return offset\n-      __ mv(c_rarg0, offset);\n+      __ bge(limit, buf, L_sha1_loop, true);\n@@ -4727,0 +4742,2 @@\n+    const Register mask32 = t2;\n+    __ mv(mask32, 0xffffffff);\n@@ -4740,0 +4757,5 @@\n+    \/\/ return offset\n+    if (multi_block) {\n+      __ sub(c_rarg0, buf, src);\n+    }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":82,"deletions":60,"binary":false,"changes":142,"status":"modified"}]}