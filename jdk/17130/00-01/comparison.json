{"files":[{"patch":"@@ -4667,1 +4667,12 @@\n-    \/\/ load 5 words state into a, b, c, d, e\n+    \/\/ load 5 words state into a, b, c, d, e.\n+    \/\/\n+    \/\/ To minimize the number of memory operations, we apply following\n+    \/\/ optimization: read the states (a\/b\/c\/d) of 4-byte values in pairs,\n+    \/\/ with a single ld, and split them into 2 registers.\n+    \/\/\n+    \/\/ And, as the core algorithm of SHA-1 works on 32-bits words, so\n+    \/\/ in the following code, it does not care about the content of\n+    \/\/ higher 32-bits in a\/b\/c\/d\/e. Based on this observation,\n+    \/\/ we can apply further optimization, which is to just ignore the\n+    \/\/ higher 32-bits in a\/c\/e, rather than set the higher\n+    \/\/ 32-bits of a\/c\/e to zero explicitly with extra instructions.\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"}]}