{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/HttpClient.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-                      connection.contextRestricted(request, client));\n+                      connection.contextRestricted(request));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Request.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -359,1 +359,1 @@\n-    BiPredicate<String,String> contextRestricted(HttpRequestImpl request, HttpClient client) {\n+    BiPredicate<String,String> contextRestricted(HttpRequestImpl request) {\n@@ -363,1 +363,1 @@\n-            return Utils.PROXY_TUNNEL_RESTRICTED(client);\n+            return Utils.PROXY_TUNNEL_RESTRICTED();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpConnection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -217,3 +217,2 @@\n-    private static final BiPredicate<String, String> HOST_RESTRICTED = (k,v) -> !\"host\".equalsIgnoreCase(k);\n-    public static final BiPredicate<String, String> PROXY_TUNNEL_RESTRICTED(HttpClient client)  {\n-        return HOST_RESTRICTED;\n+    public static final BiPredicate<String, String> PROXY_TUNNEL_RESTRICTED()  {\n+        return (k,v) -> !\"host\".equalsIgnoreCase(k);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,2 +28,14 @@\n- * @library \/test\/lib\n- * @run main\/othervm UserAuthWithAuthenticator\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.httpclient.test.lib.http2.Http2TestServer\n+ *        jdk.test.lib.net.IPSupport\n+ *\n+ * @modules java.net.http\/jdk.internal.net.http.common\n+ *          java.net.http\/jdk.internal.net.http.frame\n+ *          java.net.http\/jdk.internal.net.http.hpack\n+ *          java.logging\n+ *          java.base\/sun.net.www.http\n+ *          java.base\/sun.net.www\n+ *          java.base\/sun.net\n+ *\n+ * @run main\/othervm  -Djdk.httpclient.HttpClient.log=errors,requests,headers,ssl,trace,all UserAuthWithAuthenticator\n@@ -40,0 +52,1 @@\n+import javax.net.ssl.*;\n@@ -44,0 +57,9 @@\n+import jdk.test.lib.net.SimpleSSLContext;\n+import jdk.test.lib.net.URIBuilder;\n+import jdk.test.lib.net.IPSupport;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters.HttpTestHandler;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters.HttpTestExchange;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters.HttpTestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import com.sun.net.httpserver.BasicAuthenticator;\n@@ -51,0 +73,95 @@\n+    static class AuthTestHandler implements HttpTestHandler {\n+        volatile String authValue;\n+        final String response = \"Hello world\";\n+\n+        @Override\n+        public void handle(HttpTestExchange t) throws IOException {\n+            try (InputStream is = t.getRequestBody();\n+                 OutputStream os = t.getResponseBody()) {\n+                byte[] bytes = is.readAllBytes();\n+                authValue = t.getRequestHeaders().firstValue(\"Authorization\").orElse(\"\");\n+                t.sendResponseHeaders(200, response.length());\n+                os.write(response.getBytes(US_ASCII));\n+                t.close();\n+            }\n+        }\n+\n+        String authValue() {return authValue;}\n+    }\n+\n+    \/\/ if useHeader is true, we expect the Authenticator was not called\n+    \/\/ and the user set header used. If false, Authenticator must\n+    \/\/ be called and the user set header not used.\n+\n+    static void h2Test(final boolean useHeader) throws Exception {\n+        SSLContext ctx;\n+        HttpTestServer h2s = null;\n+        HttpClient client = null;\n+        ExecutorService ex=null;\n+        try {\n+            ctx = new SimpleSSLContext().get();\n+            ex = Executors.newCachedThreadPool();\n+            InetAddress addr = InetAddress.getLoopbackAddress();\n+\n+            h2s = HttpTestServer.of(new Http2TestServer(addr, \"::1\", true, 0, ex,\n+                    10, null, ctx, false));\n+            AuthTestHandler h = new AuthTestHandler();\n+            var context = h2s.addHandler(h, \"\/test1\");\n+            context.setAuthenticator(new BasicAuthenticator(\"realm\") {\n+                public boolean checkCredentials(String username, String password) {\n+                    if (useHeader) {\n+                        return username.equals(\"user\") && password.equals(\"pwd\");\n+                    } else {\n+                        return username.equals(\"serverUser\") && password.equals(\"serverPwd\");\n+                    }\n+                }\n+            });\n+            h2s.start();\n+\n+            int port = h2s.getAddress().getPort();\n+            ServerAuth sa = new ServerAuth();\n+            var plainCreds = \"user:pwd\";\n+            var encoded = java.util.Base64.getEncoder().encodeToString(plainCreds.getBytes(US_ASCII));\n+\n+            URI uri = URIBuilder.newBuilder()\n+                 .scheme(\"https\")\n+                 .host(addr.getHostAddress())\n+                 .port(port)\n+                 .path(\"\/test1\/foo.txt\")\n+                 .build();\n+\n+            HttpClient.Builder builder = HttpClient.newBuilder()\n+                    .sslContext(ctx)\n+                    .executor(ex);\n+\n+            \/\/if (!useHeader) {\n+                builder.authenticator(sa);\n+            \/\/}\n+            client = builder.build();\n+\n+            HttpRequest req = HttpRequest.newBuilder(uri)\n+                    .version(HttpClient.Version.HTTP_2)\n+                    .header(useHeader ? \"Authorization\" : \"X-Ignore\", encoded)\n+                    .GET()\n+                    .build();\n+\n+            HttpResponse<String> resp = client.send(req, HttpResponse.BodyHandlers.ofString());\n+            if (useHeader) {\n+                assertTrue(h.authValue() == null, \"Expected user set header to be set\");\n+                assertTrue(!sa.wasCalled(), \"Expected authenticator not to be called\");\n+                System.out.println(\"h2Test: using user set header OK\");\n+            } else {\n+                assertTrue(!h.authValue().equals(encoded), \"Expected user set header to not be set\");\n+                assertTrue(sa.wasCalled(), \"Expected authenticator to be called\");\n+                System.out.println(\"h2Test: using authenticator OK\");\n+            }\n+        } finally {\n+            if (h2s != null)\n+                h2s.stop();\n+            if (client != null)\n+                client.close();\n+            if (ex != null)\n+                ex.shutdown();\n+        }\n+    }\n+\n@@ -99,0 +216,2 @@\n+        h2Test(true);\n+        h2Test(false);\n@@ -138,0 +257,1 @@\n+        ProxyAuth p = new ProxyAuth();\n@@ -141,1 +261,1 @@\n-                .authenticator(new ProxyAuth())\n+                .authenticator(p)\n@@ -156,0 +276,1 @@\n+            assertTrue(!p.wasCalled(), \"Proxy Auth should not have been called\");\n@@ -330,0 +451,2 @@\n+        private volatile boolean called = false;\n+\n@@ -332,0 +455,1 @@\n+            called = true;\n@@ -338,0 +462,4 @@\n+\n+        boolean wasCalled() {\n+            return called;\n+        }\n","filename":"test\/jdk\/java\/net\/httpclient\/UserAuthWithAuthenticator.java","additions":131,"deletions":3,"binary":false,"changes":134,"status":"modified"}]}