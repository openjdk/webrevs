{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,1 @@\n-        log = new Log(System.out, verbose);\n+        log = new Log(System.out);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/jit\/escape\/LockElision\/MatMul\/MatMul.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-        \/\/log.enableVerbose(true);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/LaunchingConnector\/launchnosuspend\/launchnosuspend001.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,0 @@\n-        log.enableVerbose(true);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/IterateThroughHeap\/filter_tagged\/HeapFilter.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-        log.enableVerbose(true);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/MemoryPoolMBean\/isCollectionUsageThresholdExceeded\/isexceeded001.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-        log.enableVerbose(true); \/\/ show log output\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/MemoryPoolMBean\/isUsageThresholdExceeded\/isexceeded001.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-        Log log = new Log(System.out, true);\n+        Log log = new Log(System.out);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/stress\/lowmem\/lowmem001.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.Enumeration;\n@@ -39,1 +38,0 @@\n-import nsk.share.test.LazyFormatString;\n@@ -42,6 +40,1 @@\n- * This class helps to print test-execution trace messages\n- * and filter them when execution mode is not verbose.\n- * <p>\n- * Verbose mode if defined by providing <i>-verbose<\/i> command line\n- * option, handled by <code>ArgumentParser<\/code>. Use <code>verbose()<\/code>\n- * method to determine which mode is used.\n+ * This class helps to print test-execution trace messages.\n@@ -63,1 +56,0 @@\n- * @see #verbose()\n@@ -75,12 +67,0 @@\n-    \/**\n-     * Is log-mode verbose?\n-     * Always enabled.\n-     *\/\n-    private final boolean verbose = true;\n-\n-    \/**\n-     * Should log messages prefixed with timestamps?\n-     * Always enabled.\n-     *\/\n-    private final boolean timestamp = true;\n-\n@@ -191,10 +171,0 @@\n-     * either for verbose or for non-verbose mode accordingly to\n-     * the given <code>verbose<\/code> key.\n-     *\/\n-    public Log(PrintStream stream, boolean verbose) {\n-        this(stream);\n-    }\n-\n-    \/**\n-     * Incarnate new Log for the given <code>stream<\/code>; and\n-     * either for verbose or for non-verbose mode accordingly to\n@@ -204,1 +174,0 @@\n-        this(stream, argsParser.verbose());\n@@ -210,16 +179,0 @@\n-    \/**\n-     * Return <i>true<\/i> if log mode is verbose.\n-     *\/\n-    public boolean verbose() {\n-        return verbose;\n-    }\n-\n-    \/**\n-     * Enable or disable verbose mode for printing messages.\n-     *\/\n-    public void enableVerbose(boolean enable) {\n-        if (!enable) {\n-            throw new RuntimeException(\"The non-verbose logging is not supported.\");\n-        }\n-    }\n-\n@@ -269,3 +222,0 @@\n-        if (!verbose()) {\n-            keepLog(composeLine(message));\n-        }\n@@ -285,3 +235,0 @@\n-        if (!verbose()) {\n-            doPrint(message);\n-        }\n@@ -317,4 +264,1 @@\n-     * Print <code>message<\/code> to the assigned output stream,\n-     * if log mode is verbose. The <code>message<\/code> will be lost,\n-     * if execution mode is non-verbose, and there is no error messages\n-     * printed.\n+     * Print <code>message<\/code> to the assigned output stream.\n@@ -323,5 +267,1 @@\n-        if (verbose()) {\n-            doPrint(message.toString());\n-        } else {\n-            keepLog(composeLine(message.toString()));\n-        }\n+        doPrint(message.toString());\n@@ -336,9 +276,0 @@\n-        if (!verbose()) {\n-            PrintStream stream = findOutStream();\n-            stream.println(\"#>  \");\n-            stream.println(\"#>  WARNING: switching log to verbose mode,\");\n-            stream.println(\"#>      because error is complained\");\n-            stream.println(\"#>  \");\n-            stream.flush();\n-            enableVerbose(true);\n-        }\n@@ -409,4 +340,1 @@\n-     * Redirect log to the given <code>stream<\/code>, and switch\n-     * log mode to verbose.\n-     * Prints errors summary to current stream, cancel current stream\n-     * and switches to new stream. Turns on verbose mode for new stream.\n+     * Redirect log to the given <code>stream<\/code>.\n@@ -433,14 +361,0 @@\n-    \/**\n-     * Print all messages from log buffer which were hidden because\n-     * of non-verbose mode,\n-     *\/\n-    private synchronized void flushLogBuffer() {\n-        if (!logBuffer.isEmpty()) {\n-            PrintStream stream = findOutStream();\n-            for (int i = 0; i < logBuffer.size(); i++) {\n-                stream.println(logBuffer.elementAt(i));\n-            }\n-            stream.flush();\n-        }\n-    }\n-\n@@ -471,12 +385,9 @@\n-        if (timestamp) {\n-            long time = System.currentTimeMillis();\n-            long ms = time % 1000;\n-            time \/= 1000;\n-            long secs = time % 60;\n-            time \/= 60;\n-            long mins = time % 60;\n-            time \/= 60;\n-            long hours = time % 24;\n-            return \"[\" + hours + \":\" + mins + \":\" + secs + \".\" + ms + \"] \" + message;\n-        }\n-        return message;\n+        long time = System.currentTimeMillis();\n+        long ms = time % 1000;\n+        time \/= 1000;\n+        long secs = time % 60;\n+        time \/= 60;\n+        long mins = time % 60;\n+        time \/= 60;\n+        long hours = time % 24;\n+        return \"[\" + hours + \":\" + mins + \":\" + secs + \".\" + ms + \"] \" + message;\n@@ -516,7 +427,0 @@\n-    \/**\n-     * Keep the given log <code>message<\/code> into <code>logBuffer<\/code>.\n-     *\/\n-    private synchronized void keepLog(String message) {\n-        logBuffer.addElement(message);\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/Log.java","additions":13,"deletions":109,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-        log = new Log(System.out, true);\n+        log = new Log(System.out);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/aod\/AODTestRunner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -160,1 +160,1 @@\n-        log = new Log(System.out, true);\n+        log = new Log(System.out);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/aod\/AbstractJarAgent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    protected Log log = new Log(System.out, true);\n+    protected Log log = new Log(System.out);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/aod\/DummyTargetApplication.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-            log = new Log(System.out, true);\n+            log = new Log(System.out);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/aod\/TargetApplicationWaitingAgents.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-                new Log(System.out, true));\n+                new Log(System.out));\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jvmti\/JVMTITest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-        log = new Log(System.out, verbose);\n+        log = new Log(System.out);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/compiler\/coverage\/parentheses\/Parentheses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}