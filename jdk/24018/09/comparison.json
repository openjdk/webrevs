{"files":[{"patch":"@@ -47,1 +47,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"compiler\/compileTask.inline.hpp\"\n@@ -1697,1 +1698,0 @@\n-  methodHandle method(thread, task->method());\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n@@ -38,0 +38,1 @@\n+#include \"runtime\/unloadableMethodHandle.inline.hpp\"\n@@ -69,8 +70,2 @@\n-    if ((task->_method_holder != nullptr && JNIHandles::is_weak_global_handle(task->_method_holder)) ||\n-        (task->_hot_method_holder != nullptr && JNIHandles::is_weak_global_handle(task->_hot_method_holder))) {\n-      JNIHandles::destroy_weak_global(task->_method_holder);\n-      JNIHandles::destroy_weak_global(task->_hot_method_holder);\n-    } else {\n-      JNIHandles::destroy_global(task->_method_holder);\n-      JNIHandles::destroy_global(task->_hot_method_holder);\n-    }\n+    task->_method_handle.release();\n+    task->_hot_method_handle.release();\n@@ -99,1 +94,0 @@\n-  Thread* thread = Thread::current();\n@@ -101,2 +95,1 @@\n-  _method = method();\n-  _method_holder = JNIHandles::make_weak_global(Handle(thread, method->method_holder()->klass_holder()));\n+  _method_handle = UnloadableMethodHandle(method());\n@@ -115,2 +108,0 @@\n-  _hot_method = nullptr;\n-  _hot_method_holder = nullptr;\n@@ -131,8 +122,3 @@\n-    if (hot_method.not_null()) {\n-      if (hot_method == method) {\n-        _hot_method = _method;\n-      } else {\n-        _hot_method = hot_method();\n-        \/\/ only add loader or mirror if different from _method_holder\n-        _hot_method_holder = JNIHandles::make_weak_global(Handle(thread, hot_method->method_holder()->klass_holder()));\n-      }\n+    if (hot_method.not_null() && hot_method() != method()) {\n+      \/\/ Only do capture unload blocker if _hot_method is different from _method.\n+      _hot_method_handle = UnloadableMethodHandle(hot_method());\n@@ -152,1 +138,0 @@\n-\/\/ Replace weak handles by strong handles to avoid unloading during compilation.\n@@ -158,9 +143,5 @@\n-  Thread* thread = Thread::current();\n-  assert(_method->method_holder()->is_loader_alive(), \"should be alive\");\n-  Handle method_holder(thread, _method->method_holder()->klass_holder());\n-  JNIHandles::destroy_weak_global(_method_holder);\n-  JNIHandles::destroy_weak_global(_hot_method_holder);\n-  _method_holder = JNIHandles::make_global(method_holder);\n-  if (_hot_method != nullptr) {\n-    _hot_method_holder = JNIHandles::make_global(Handle(thread, _hot_method->method_holder()->klass_holder()));\n-  }\n+\n+  \/\/ Block unloading for currently held method handles.\n+  _method_handle.block_unloading();\n+  _hot_method_handle.block_unloading();\n+\n@@ -175,3 +156,3 @@\n-  _method->set_on_stack(true);\n-  if (_hot_method != nullptr) {\n-    _hot_method->set_on_stack(true);\n+  _method_handle.method()->set_on_stack(true);\n+  if (_hot_method_handle.method() != nullptr) {\n+    _hot_method_handle.method()->set_on_stack(true);\n@@ -182,1 +163,1 @@\n-  return _method_holder != nullptr && JNIHandles::is_weak_global_handle(_method_holder) && JNIHandles::is_weak_global_cleared(_method_holder);\n+  return _method_handle.is_unloaded();\n@@ -332,2 +313,2 @@\n-  if (_hot_method != nullptr && _hot_method != _method) {\n-    xtty->method(_hot_method);\n+  if (_hot_method_handle.method() != nullptr) {\n+    xtty->method(_hot_method_handle.method());\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":19,"deletions":38,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/unloadableMethodHandle.hpp\"\n@@ -86,2 +87,1 @@\n-  Method*              _method;\n-  jobject              _method_holder;\n+  UnloadableMethodHandle _method_handle;\n@@ -109,2 +109,1 @@\n-  Method*              _hot_method;   \/\/ which method actually triggered this task\n-  jobject              _hot_method_holder;\n+  UnloadableMethodHandle _hot_method_handle;  \/\/ which method actually triggered this task\n@@ -131,0 +130,3 @@\n+  inline Method* method() const;\n+  inline Method* hot_method() const;\n+\n@@ -132,2 +134,0 @@\n-  Method*      method() const                    { return _method; }\n-  Method*      hot_method() const                { return _hot_method; }\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_COMPILER_COMPILETASK_INLINE_HPP\n+#define SHARE_COMPILER_COMPILETASK_INLINE_HPP\n+\n+#include \"compiler\/compileTask.hpp\"\n+\n+#include \"runtime\/unloadableMethodHandle.inline.hpp\"\n+\n+inline Method* CompileTask::method() const {\n+  return _method_handle.method();\n+}\n+\n+inline Method* CompileTask::hot_method() const {\n+  return _hot_method_handle.method();\n+}\n+\n+#endif \/\/ SHARE_COMPILER_COMPILETASK_INLINE_HPP\n","filename":"src\/hotspot\/share\/compiler\/compileTask.inline.hpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_UNLOADABLE_METHOD_HANDLE_HPP\n+#define SHARE_RUNTIME_UNLOADABLE_METHOD_HANDLE_HPP\n+\n+#include \"oops\/oopHandle.hpp\"\n+#include \"oops\/weakHandle.hpp\"\n+\n+\/\/ Unloadable method handle.\n+\/\/\n+\/\/ This handle allows holding to Method* safely without delaying class unloading\n+\/\/ of its holder.\n+\/\/\n+\/\/ This handle can be in 4 states:\n+\/\/  1. Empty. There is no Method* inside. All methods are safe to call.\n+\/\/     This is a convenience state to allow easy initializations.\n+\/\/  2. Weak. Method* is present, but its holder is only weakly-reachable, and can\n+\/\/     be unloaded. Users need to check !is_unloaded() before calling method().\n+\/\/     method() is safe to call iff we have not crossed a safepoint since construction\n+\/\/     or last !is_unloaded() check. Calling block_unloading() after !is_unloaded() check\n+\/\/     moves handle to the strong state.\n+\/\/  3. Strong. Method* holder is strongly reachable, cannot be unloaded.\n+\/\/     Calling method() is always safe in this state.\n+\/\/  4. Released. Method* is in unknown state, and cannot be accessed.\n+\/\/     method() returns nullptr in this state.\n+\/\/\n+\/\/ The handle transitions are one-shot:\n+\/\/    weak   --(block_unloading) --> strong\n+\/\/    weak   ------(release) ------> released\n+\/\/    strong ------(release) ------> released\n+\/\/\n+\/\/ Additionally, when handle is empty, it stays empty:\n+\/\/    empty  --(block_unloading) --> empty\n+\/\/    empty  ------(release) ------> empty\n+\/\/\n+\/\/ Common usage pattern:\n+\/\/\n+\/\/   UnloadableMethodHandle mh;           \/\/ Initially empty.\n+\/\/   mh = UnloadableMethodHandle(method); \/\/ Now in weak state.\n+\/\/   mh.method()->print_on(tty);          \/\/ method() is good until the next safepoint.\n+\/\/   <safepoint>\n+\/\/   if (mh.is_unloaded()) {              \/\/ Can still use method()?\n+\/\/     mh.release();                      \/\/ No! Release the handle and exit.\n+\/\/     return;\n+\/\/   }\n+\/\/   mh.method()->print_on(tty);          \/\/ method() is good until the next safepoint.\n+\/\/   mh.block_unloading();                \/\/ Now in strong state.\n+\/\/   <safepoint>\n+\/\/   mh.method()->print_on(tty);          \/\/ method() is always good now.\n+\/\/   mh.release();                        \/\/ Release the handle.\n+\/\/\n+\n+class Method;\n+\n+class UnloadableMethodHandle {\n+  friend class VMStructs;\n+private:\n+  Method* _method;\n+  WeakHandle _weak_handle;\n+  OopHandle _strong_handle;\n+\n+  inline oop get_unload_blocker(Method* method);\n+\n+public:\n+  UnloadableMethodHandle() : _method(nullptr) {}\n+  UnloadableMethodHandle(Method* method);\n+  inline void release();\n+\n+  inline Method* method() const;\n+\n+  inline bool is_unloaded() const;\n+  void block_unloading();\n+};\n+\n+#endif \/\/ SHARE_RUNTIME_UNLOADABLE_METHOD_HANDLE_HPP\n","filename":"src\/hotspot\/share\/runtime\/unloadableMethodHandle.hpp","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_UNLOADABLE_METHOD_HANDLE_INLINE_HPP\n+#define SHARE_RUNTIME_UNLOADABLE_METHOD_HANDLE_INLINE_HPP\n+\n+#include \"runtime\/unloadableMethodHandle.hpp\"\n+\n+#include \"memory\/universe.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n+#include \"oops\/oopHandle.inline.hpp\"\n+#include \"oops\/weakHandle.inline.hpp\"\n+\n+inline UnloadableMethodHandle::UnloadableMethodHandle(Method* method) {\n+  assert(method != nullptr, \"Should be\");\n+  _method = method;\n+  oop obj = get_unload_blocker(method);\n+  if (obj != nullptr) {\n+    _weak_handle = WeakHandle(Universe::vm_weak(), obj);\n+  }\n+}\n+\n+oop UnloadableMethodHandle::get_unload_blocker(Method* method) {\n+  assert(method != nullptr, \"Should be\");\n+\n+  InstanceKlass* holder = method->method_holder();\n+  if (holder->class_loader_data()->is_permanent_class_loader_data()) {\n+    \/\/ Method holder class cannot be unloaded.\n+    return nullptr;\n+  }\n+\n+  \/\/ Return the holder that would block unloading.\n+  \/\/ This would be either classloader oop for non-hidden classes,\n+  \/\/ or Java mirror oop for hidden classes.\n+  oop klass_holder = holder->klass_holder();\n+  assert(klass_holder != nullptr, \"Should be\");\n+  return klass_holder;\n+}\n+\n+void UnloadableMethodHandle::release() {\n+  if (_method != nullptr) {\n+    _method = nullptr;\n+    _weak_handle.release(Universe::vm_weak());\n+    _strong_handle.release(Universe::vm_global());\n+  }\n+}\n+\n+bool UnloadableMethodHandle::is_unloaded() const {\n+  \/\/ Unloaded if weak handle was set, but now had been cleared by GC.\n+  return !_weak_handle.is_empty() && _weak_handle.peek() == nullptr;\n+}\n+\n+inline void UnloadableMethodHandle::block_unloading() {\n+  assert(!is_unloaded(), \"Pre-condition: should not be unloaded\");\n+\n+  if (!_weak_handle.is_empty()) {\n+    assert(_weak_handle.peek() != nullptr, \"Should not be cleared\");\n+    assert(_method->method_holder()->is_loader_alive(), \"Should be alive\");\n+    assert(_strong_handle.is_empty(), \"Should be empty\");\n+    oop obj = get_unload_blocker(_method);\n+    if (obj != nullptr) {\n+      _strong_handle = OopHandle(Universe::vm_global(), obj);\n+    }\n+    \/\/ Release the weak handle right away, so that is_unloaded() does not touch\n+    \/\/ peek() when thread is in the wrong state.\n+    _weak_handle.release(Universe::vm_weak());\n+  }\n+\n+  assert(!is_unloaded(), \"Post-condition: should not be unloaded\");\n+}\n+\n+inline Method* UnloadableMethodHandle::method() const {\n+  assert(!is_unloaded(), \"Should not be unloaded\");\n+  return _method;\n+}\n+\n+#endif \/\/ SHARE_RUNTIME_UNLOADABLE_METHOD_HANDLE_INLINE_HPP\n","filename":"src\/hotspot\/share\/runtime\/unloadableMethodHandle.inline.hpp","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -773,1 +773,1 @@\n-  nonstatic_field(CompileTask,                 _method,                                       Method*)                               \\\n+  nonstatic_field(CompileTask,                 _method_handle,                                UnloadableMethodHandle)                \\\n@@ -781,0 +781,2 @@\n+  nonstatic_field(UnloadableMethodHandle,      _method,                                       Method*)                               \\\n+                                                                                                                                     \\\n@@ -1264,0 +1266,1 @@\n+  declare_toplevel_type(UnloadableMethodHandle)                           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}