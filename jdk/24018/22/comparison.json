{"files":[{"patch":"@@ -47,1 +47,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"compiler\/compileTask.inline.hpp\"\n@@ -1710,1 +1711,2 @@\n-  methodHandle method(thread, task->method());\n+  methodHandle method(thread, task->is_unloaded() ? nullptr : task->method());\n+\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n@@ -35,0 +35,1 @@\n+#include \"oops\/unloadableMethodHandle.inline.hpp\"\n@@ -47,2 +48,2 @@\n-                         bool is_blocking) {\n-  Thread* thread = Thread::current();\n+                         bool is_blocking) :\n+  _method_handle(method()) {\n@@ -50,2 +51,0 @@\n-  _method = method();\n-  _method_holder = JNIHandles::make_weak_global(Handle(thread, method->method_holder()->klass_holder()));\n@@ -84,5 +83,0 @@\n-  if (_method_holder != nullptr && JNIHandles::is_weak_global_handle(_method_holder)) {\n-    JNIHandles::destroy_weak_global(_method_holder);\n-  } else {\n-    JNIHandles::destroy_global(_method_holder);\n-  }\n@@ -115,1 +109,0 @@\n-\/\/ Replace weak handles by strong handles to avoid unloading during compilation.\n@@ -117,3 +110,3 @@\n-  if (is_unloaded()) {\n-    \/\/ Guard against concurrent class unloading\n-    return nullptr;\n+  if (_method_handle.is_safe()) {\n+    _method_handle.make_always_safe();\n+    return this;\n@@ -121,14 +114,1 @@\n-  Thread* thread = Thread::current();\n-  assert(_method->method_holder()->is_loader_alive(), \"should be alive\");\n-  Handle method_holder(thread, _method->method_holder()->klass_holder());\n-  JNIHandles::destroy_weak_global(_method_holder);\n-  _method_holder = JNIHandles::make_global(method_holder);\n-  return this;\n-}\n-\n-void CompileTask::mark_on_stack() {\n-  if (is_unloaded()) {\n-    return;\n-  }\n-  \/\/ Mark these methods as something redefine classes cannot remove.\n-  _method->set_on_stack(true);\n+  return nullptr;\n@@ -138,1 +118,1 @@\n-  return _method_holder != nullptr && JNIHandles::is_weak_global_handle(_method_holder) && JNIHandles::is_weak_global_cleared(_method_holder);\n+  return !_method_handle.is_safe();\n@@ -141,0 +121,1 @@\n+\/\/ ------------------------------------------------------------------\n@@ -142,0 +123,10 @@\n+\n+void CompileTask::mark_on_stack() {\n+  \/\/ Mark these methods as something redefine classes cannot remove.\n+  \/\/ Redefinition runs in VM thread, which cannot ask about the method\n+  \/\/ safety. This is why we end up asking for method unsafely.\n+  assert_at_safepoint();\n+  assert(Thread::current()->is_VM_thread(), \"Sanity\");\n+  _method_handle.method_unsafe()->set_on_stack(true);\n+}\n+\n@@ -143,4 +134,5 @@\n-  if (is_unloaded()) {\n-    return;\n-  }\n-  f->do_metadata(method());\n+  \/\/ Redefinition runs in VM thread, which cannot ask about the method\n+  \/\/ safety. This is why we end up asking for method unsafely.\n+  assert_at_safepoint();\n+  assert(Thread::current()->is_VM_thread(), \"Sanity\");\n+  f->do_metadata(_method_handle.method_unsafe());\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":25,"deletions":33,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"oops\/unloadableMethodHandle.hpp\"\n@@ -87,2 +88,1 @@\n-  Method*              _method;\n-  jobject              _method_holder;\n+  UnloadableMethodHandle _method_handle;\n@@ -123,0 +123,2 @@\n+  inline Method* method() const;\n+\n@@ -124,1 +126,0 @@\n-  Method*      method() const                    { return _method; }\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_COMPILER_COMPILETASK_INLINE_HPP\n+#define SHARE_COMPILER_COMPILETASK_INLINE_HPP\n+\n+#include \"compiler\/compileTask.hpp\"\n+\n+#include \"oops\/unloadableMethodHandle.inline.hpp\"\n+\n+inline Method* CompileTask::method() const {\n+  return _method_handle.method();\n+}\n+\n+#endif \/\/ SHARE_COMPILER_COMPILETASK_INLINE_HPP\n","filename":"src\/hotspot\/share\/compiler\/compileTask.inline.hpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/trainingData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_HPP\n+#define SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_HPP\n+\n+#include \"memory\/padded.hpp\"\n+#include \"oops\/oopHandle.hpp\"\n+#include \"oops\/weakHandle.hpp\"\n+\n+\/\/ Unloadable method handle.\n+\/\/\n+\/\/ This handle allows holding to Method* safely without delaying class unloading\n+\/\/ of its holder.\n+\/\/\n+\/\/ This handle can be in 2 states:\n+\/\/  1. Unsafe (weak). Method* is present, but its holder is only weakly-reachable, and can\n+\/\/     be unloaded. Users need to check is_safe() before calling method().\n+\/\/     method() is safe to call iff we have not crossed a safepoint since construction\n+\/\/     or last is_safe() check. Calling make_always_safe() after is_safe() check\n+\/\/     moves handle to the strong state.\n+\/\/  2. Safe (strong). Method* holder is strongly reachable, cannot be unloaded.\n+\/\/     Calling method() is always safe in this state.\n+\/\/\n+\/\/ The handle transitions are one-shot:\n+\/\/    unsafe (weak) --(make_always_safe) --> safe (strong)\n+\/\/\n+\/\/ There are internal shortcuts that bypass this mechanics when handle knows\n+\/\/ the method holder is permanent and would not be unloaded. This is an implementation\n+\/\/ detail, it does not change any external contract. Using this handle for permanent\n+\/\/ method holders provides future safety.\n+\/\/\n+\/\/ Common usage pattern:\n+\/\/\n+\/\/   UnloadableMethodHandle mh(method);   \/\/ Now in unsafe (weak) state.\n+\/\/   mh.method()->print_on(tty);          \/\/ method() is good until the next safepoint.\n+\/\/   <safepoint>\n+\/\/   if (!mh.is_safe()) {                 \/\/ Safe to use method()?\n+\/\/     return;                            \/\/ Nope!\n+\/\/   }\n+\/\/   mh.method()->print_on(tty);          \/\/ method() is good until the next safepoint.\n+\/\/   mh.make_always_safe();               \/\/ Now in safe (strong) state.\n+\/\/   <safepoint>\n+\/\/   mh.method()->print_on(tty);          \/\/ method() is always safe now.\n+\/\/\n+\n+class Method;\n+\n+class UnloadableMethodHandle {\n+  friend class VMStructs;\n+private:\n+  enum class State {\n+    PERMANENT,\n+    WEAK,\n+    STRONG,\n+    RELEASED,\n+  };\n+\n+  State volatile _state;\n+\n+  Method* _method;\n+  WeakHandle _weak_handle;\n+  OopHandle _strong_handle;\n+\n+  inline State get_state() const;\n+  inline void set_state(State to);\n+  inline bool transit_state(State from, State to);\n+  inline oop get_unload_blocker(Method* method);\n+\n+public:\n+  UnloadableMethodHandle(Method* method);\n+  ~UnloadableMethodHandle();\n+\n+  inline Method* method() const;\n+  inline Method* method_unsafe() const;\n+\n+  inline bool is_safe() const;\n+  void make_always_safe();\n+};\n+\n+#endif \/\/ SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_HPP\n","filename":"src\/hotspot\/share\/oops\/unloadableMethodHandle.hpp","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_INLINE_HPP\n+#define SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_INLINE_HPP\n+\n+#include \"unloadableMethodHandle.hpp\"\n+\n+#include \"memory\/universe.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n+#include \"oops\/oopHandle.inline.hpp\"\n+#include \"oops\/weakHandle.inline.hpp\"\n+#include \"runtime\/javaThread.inline.hpp\"\n+\n+inline UnloadableMethodHandle::UnloadableMethodHandle(Method* method) :\n+  _method(method) {\n+  assert(method != nullptr, \"Should be\");\n+\n+  oop obj = get_unload_blocker(method);\n+  if (obj != nullptr) {\n+    _weak_handle = WeakHandle(Universe::vm_weak(), obj);\n+    set_state(State::WEAK);\n+  } else {\n+    set_state(State::PERMANENT);\n+  }\n+\n+  assert(is_safe(), \"Should be\");\n+}\n+\n+inline UnloadableMethodHandle::~UnloadableMethodHandle() {\n+  switch (get_state()) {\n+    case State::STRONG: {\n+      _strong_handle.release(Universe::vm_global());\n+    }\n+    case State::WEAK: {\n+      _weak_handle.release(Universe::vm_weak());\n+    }\n+    case State::PERMANENT: {\n+      _method = nullptr;\n+      set_state(State::RELEASED);\n+    }\n+    case State::RELEASED: {\n+      \/\/ Nothing to do.\n+      break;\n+    }\n+    default:\n+      assert(false, \"Should not be here\");\n+  }\n+\n+  assert(_method == nullptr, \"Should be\");\n+  assert(_weak_handle.is_empty(), \"Should be\");\n+  assert(_strong_handle.is_empty(), \"Should be\");\n+  assert(!is_safe(), \"Should not be\");\n+}\n+\n+inline UnloadableMethodHandle::State UnloadableMethodHandle::get_state() const {\n+  return Atomic::load_acquire(&_state);\n+}\n+\n+inline void UnloadableMethodHandle::set_state(State to) {\n+  Atomic::release_store(&_state, to);\n+}\n+\n+inline bool UnloadableMethodHandle::transit_state(State from, State to) {\n+  return Atomic::cmpxchg(&_state, from, to, memory_order_release) == from;\n+}\n+\n+oop UnloadableMethodHandle::get_unload_blocker(Method* method) {\n+  assert(method != nullptr, \"Should be\");\n+\n+  InstanceKlass* holder = method->method_holder();\n+  if (holder->class_loader_data()->is_permanent_class_loader_data()) {\n+    \/\/ Method holder class cannot be unloaded.\n+    return nullptr;\n+  }\n+\n+  \/\/ Return the holder that would block unloading.\n+  \/\/ This would be either classloader oop for non-hidden classes,\n+  \/\/ or Java mirror oop for hidden classes.\n+  oop klass_holder = holder->klass_holder();\n+  assert(klass_holder != nullptr, \"Should be\");\n+  return klass_holder;\n+}\n+\n+bool UnloadableMethodHandle::is_safe() const {\n+  switch (get_state()) {\n+    case State::PERMANENT:\n+    case State::STRONG: {\n+      \/\/ Definitely safe.\n+      return true;\n+    }\n+    case State::RELEASED: {\n+      \/\/ Definitely unsafe.\n+      return false;\n+    }\n+    case State::WEAK: {\n+      \/\/ Safety: Caller should be a Java thread in proper state.\n+      \/\/ Otherwise, unloading can happen without coordinating with this thread.\n+      \/\/ (Access API would assert this too, but do not rely on it.)\n+      Thread* t = Thread::current();\n+      if (!t->is_Java_thread() || JavaThread::cast(t)->thread_state() == _thread_in_native) {\n+        \/\/ Unable to figure out safety, give a pessimistic answer.\n+        assert(false, \"Cannot figure out safety, check the thread lifecycle, or use method_unsafe()\");\n+        return false;\n+      }\n+\n+      \/\/ Finally, see if the handle was cleared by GC.\n+      return _weak_handle.peek() != nullptr;\n+    }\n+    default:\n+      assert(false, \"Should not be here\");\n+      return false;\n+  }\n+}\n+\n+inline void UnloadableMethodHandle::make_always_safe() {\n+  assert(is_safe(), \"Should be\");\n+\n+  switch (get_state()) {\n+    case State::PERMANENT:\n+    case State::STRONG:\n+    case State::RELEASED: {\n+      \/\/ No action is needed.\n+      break;\n+    }\n+    case State::WEAK: {\n+      if (transit_state(State::WEAK, State::STRONG)) {\n+        \/\/ Do this only once, otherwise it leaks handles.\n+        oop obj = get_unload_blocker(_method);\n+        assert(obj != nullptr, \"Should have one\");\n+        _strong_handle = OopHandle(Universe::vm_global(), obj);\n+      }\n+      break;\n+    }\n+    default:\n+      assert(false, \"Should not be here\");\n+  }\n+\n+  assert(is_safe(), \"Should be\");\n+}\n+\n+inline Method* UnloadableMethodHandle::method() const {\n+  assert(is_safe(), \"Should be\");\n+  return _method;\n+}\n+\n+inline Method* UnloadableMethodHandle::method_unsafe() const {\n+  return _method;\n+}\n+\n+#endif \/\/ SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_INLINE_HPP\n","filename":"src\/hotspot\/share\/oops\/unloadableMethodHandle.inline.hpp","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -775,1 +775,1 @@\n-  nonstatic_field(CompileTask,                 _method,                                       Method*)                               \\\n+  nonstatic_field(CompileTask,                 _method_handle,                                UnloadableMethodHandle)                \\\n@@ -783,0 +783,2 @@\n+  nonstatic_field(UnloadableMethodHandle,      _method,                                       Method*)                               \\\n+                                                                                                                                     \\\n@@ -1269,0 +1271,1 @@\n+  declare_toplevel_type(UnloadableMethodHandle)                           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}