{"files":[{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/methodUnloadBlocker.inline.hpp\"\n@@ -69,4 +70,2 @@\n-    task->_method_unload_blocker_strong.release(Universe::vm_global());\n-    task->_method_unload_blocker_weak.release(Universe::vm_weak());\n-    task->_hot_method_unload_blocker_strong.release(Universe::vm_global());\n-    task->_hot_method_unload_blocker_weak.release(Universe::vm_weak());\n+    task->_method_unload_blocker.release();\n+    task->_hot_method_unload_blocker.release();\n@@ -85,31 +84,0 @@\n-oop CompileTask::get_unload_blocker(Method* method) {\n-  assert(method != nullptr, \"Should be\");\n-  InstanceKlass* ik = method->method_holder();\n-  oop klass_holder = ik->klass_holder();\n-  if (klass_holder != nullptr) {\n-    \/\/ Normal class, return the holder that would block unloading.\n-    \/\/ This would be either classloader oop for non-hidden classes,\n-    \/\/ or Java mirror oop for hidden classes.\n-    return klass_holder;\n-  }\n-\n-  \/\/ Null holder, the relevant class would not be unloaded.\n-  return nullptr;\n-}\n-\n-WeakHandle CompileTask::get_unload_blocker_weak(Method* method) {\n-  oop obj = get_unload_blocker(method);\n-  if (obj != nullptr) {\n-    return WeakHandle(Universe::vm_weak(), obj);\n-  }\n-  return WeakHandle();\n-}\n-\n-OopHandle CompileTask::get_unload_blocker_strong(Method* method) {\n-  oop obj = get_unload_blocker(method);\n-  if (obj != nullptr) {\n-    return OopHandle(Universe::vm_global(), obj);\n-  }\n-  return OopHandle();\n-}\n-\n@@ -128,1 +96,1 @@\n-  _method_unload_blocker_weak = get_unload_blocker_weak(_method);\n+  _method_unload_blocker = MethodUnloadBlocker(_method);\n@@ -162,1 +130,1 @@\n-        _hot_method_unload_blocker_weak = get_unload_blocker_weak(_hot_method);\n+        _hot_method_unload_blocker = MethodUnloadBlocker(_hot_method);\n@@ -183,19 +151,3 @@\n-  \/\/ Capture method holder by strong handle to avoid unloading during compilation.\n-  if (!_method_unload_blocker_weak.is_empty()) {\n-    assert(_method_unload_blocker_weak.peek() != nullptr, \"Should not be cleared\");\n-    assert(_method->method_holder()->is_loader_alive(), \"Should be alive\");\n-    assert(_method_unload_blocker_strong.is_empty(), \"Should be empty\");\n-    _method_unload_blocker_strong = get_unload_blocker_strong(_method);\n-  }\n-\n-  \/\/ See if hot method holder is still alive. If so, capture it by strong handle.\n-  \/\/ If not, reset it to nullptr, so downstream logging code does not crash.\n-  if (!_hot_method_unload_blocker_weak.is_empty()) {\n-    if (_hot_method_unload_blocker_weak.peek() != nullptr) {\n-      assert(_hot_method->method_holder()->is_loader_alive(), \"Should be alive\");\n-      assert(_hot_method_unload_blocker_strong.is_empty(), \"Should be empty\");\n-      _hot_method_unload_blocker_strong = get_unload_blocker_strong(_hot_method);\n-    } else {\n-      _hot_method = nullptr;\n-    }\n-  }\n+  \/\/ Block unloading for currently held method holders.\n+  _method_unload_blocker.block_unloading();\n+  _hot_method_unload_blocker.block_unloading();\n@@ -218,2 +170,1 @@\n-  \/\/ Unloaded if weakly referenced blocker was set, but now had been cleared by GC.\n-  return !_method_unload_blocker_weak.is_empty() && _method_unload_blocker_weak.peek() == nullptr;\n+  return _method_unload_blocker.is_unloaded();\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":9,"deletions":58,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/methodUnloadBlocker.hpp\"\n@@ -89,2 +90,1 @@\n-  WeakHandle           _method_unload_blocker_weak; \/\/ oop that can be used to block unloading method\n-  OopHandle            _method_unload_blocker_strong; \/\/ oop that *is* used to block unloading method\n+  MethodUnloadBlocker  _method_unload_blocker;\n@@ -113,2 +113,1 @@\n-  WeakHandle           _hot_method_unload_blocker_weak; \/\/ oop that can be used to block unloading hot method\n-  OopHandle            _hot_method_unload_blocker_strong; \/\/ oop that *is* used to block unloading hot method\n+  MethodUnloadBlocker  _hot_method_unload_blocker;\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_METHOD_UNLOAD_BLOCKER_HANDLE_HPP\n+#define SHARE_RUNTIME_METHOD_UNLOAD_BLOCKER_HANDLE_HPP\n+\n+#include \"oops\/klass.hpp\"\n+#include \"oops\/oopHandle.hpp\"\n+#include \"oops\/weakHandle.hpp\"\n+\n+\/\/ Method unload blocker.\n+\/\/\n+\/\/ Useful when one needs to hold to Method* without delaying class unloading.\n+\/\/ There is normally an associated Method* that is associated with this blocker.\n+\/\/\n+\/\/ This blocker can be in 3 states:\n+\/\/  1. Initial weak state. Relevant Method* is only weakly-reachable, can be cleared\n+\/\/     by class unloading.\n+\/\/  2. Accessible strong state. Relevant Method* is strongly reachable, cannot be\n+\/\/     cleared by class unloading.\n+\/\/  3. Final released state. Relevant Method* is in unknown state, and cannot be\n+\/\/     accessed.\n+\/\/\n+\/\/ Users should call block_unloading() to reach accessible state before accessing\n+\/\/ associated Method*.\n+\/\/\n+class MethodUnloadBlocker {\n+  Method* _method;\n+  WeakHandle _weak_handle;   \/\/ oop that can be used to block unloading\n+  OopHandle  _strong_handle; \/\/ oop that *is* used to block unloading\n+\n+  inline oop get_unload_blocker(Method* method);\n+\n+public:\n+  MethodUnloadBlocker() : _method(nullptr) {}; \/\/ initialization\n+  MethodUnloadBlocker(Method* method);\n+\n+  \/*\n+   * Release the handle.\n+   *\/\n+  inline void release();\n+\n+  \/*\n+   * Check if method holder is unloaded.\n+   *\/\n+  inline bool is_unloaded() const;\n+\n+  \/*\n+   * Return the method. Only safe when !is_unloaded().\n+   *\/\n+  inline Method* method() const;\n+\n+  \/*\n+   * Block unloading, allow method() calls.\n+   *\/\n+  void block_unloading();\n+};\n+\n+#endif \/\/ SHARE_RUNTIME_METHOD_UNLOAD_BLOCKER_HANDLE_HPP\n","filename":"src\/hotspot\/share\/runtime\/methodUnloadBlocker.hpp","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_METHOD_UNLOAD_BLOCKER_HANDLE_INLINE_HPP\n+#define SHARE_RUNTIME_METHOD_UNLOAD_BLOCKER_HANDLE_INLINE_HPP\n+\n+#include \"runtime\/methodUnloadBlocker.hpp\"\n+\n+#include \"memory\/universe.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n+#include \"oops\/oopHandle.inline.hpp\"\n+#include \"oops\/weakHandle.inline.hpp\"\n+\n+inline MethodUnloadBlocker::MethodUnloadBlocker(Method* method) {\n+  _method = method;\n+  oop obj = get_unload_blocker(method);\n+  if (obj != nullptr) {\n+    _weak_handle = WeakHandle(Universe::vm_weak(), obj);\n+  }\n+}\n+\n+oop MethodUnloadBlocker::get_unload_blocker(Method* method) {\n+  assert(method != nullptr, \"Should be\");\n+  InstanceKlass* ik = method->method_holder();\n+  oop klass_holder = ik->klass_holder();\n+  if (klass_holder != nullptr) {\n+    \/\/ Normal class, return the holder that would block unloading.\n+    \/\/ This would be either classloader oop for non-hidden classes,\n+    \/\/ or Java mirror oop for hidden classes.\n+    return klass_holder;\n+  }\n+\n+  \/\/ Null holder, the relevant class would not be unloaded.\n+  return nullptr;\n+}\n+\n+void MethodUnloadBlocker::release() {\n+  _method = nullptr;\n+  _weak_handle.release(Universe::vm_weak());\n+  _strong_handle.release(Universe::vm_global());\n+}\n+\n+bool MethodUnloadBlocker::is_unloaded() const {\n+  \/\/ Unloaded if weak handle was set, but now had been cleared by GC.\n+  return !_weak_handle.is_empty() && _weak_handle.peek() == nullptr;\n+}\n+\n+inline void MethodUnloadBlocker::block_unloading() {\n+  assert(!is_unloaded(), \"Pre-condition: should not be unloaded\");\n+\n+  if (!_weak_handle.is_empty()) {\n+    assert(_weak_handle.peek() != nullptr, \"Should not be cleared\");\n+    assert(_method->method_holder()->is_loader_alive(), \"Should be alive\");\n+    assert(_strong_handle.is_empty(), \"Should be empty\");\n+    oop obj = get_unload_blocker(_method);\n+    if (obj != nullptr) {\n+      _strong_handle = OopHandle(Universe::vm_global(), obj);\n+    }\n+    \/\/ Release the weak handle right away, so that is_unloaded() does not touch\n+    \/\/ peek() when thread is in the wrong state.\n+    _weak_handle.release(Universe::vm_weak());\n+  }\n+\n+  assert(!is_unloaded(), \"Post-condition: should not be unloaded\");\n+}\n+\n+inline Method* MethodUnloadBlocker::method() const {\n+  assert(!is_unloaded(), \"Should not be unloaded\");\n+  assert(_method != nullptr, \"Should be\");\n+  return _method;\n+}\n+\n+#endif \/\/ SHARE_RUNTIME_METHOD_UNLOAD_BLOCKER_HANDLE_INLINE_HPP\n","filename":"src\/hotspot\/share\/runtime\/methodUnloadBlocker.inline.hpp","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}