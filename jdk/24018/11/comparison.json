{"files":[{"patch":"@@ -47,1 +47,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilationMemoryStatistic.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"compiler\/compileTask.inline.hpp\"\n@@ -165,1 +166,1 @@\n-    if (task->is_unloaded()) {\n+    if (!task->is_safe()) {\n@@ -631,1 +632,1 @@\n-    if (task->is_unloaded()) {\n+    if (!task->is_safe()) {\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"compiler\/compileTask.inline.hpp\"\n@@ -220,1 +221,1 @@\n-  if (log != nullptr && !task->is_unloaded())  task->log_task_start(log);\n+  if (log != nullptr && task->is_safe())  task->log_task_start(log);\n@@ -227,1 +228,1 @@\n-  if (log != nullptr && !task->is_unloaded())  task->log_task_done(log);\n+  if (log != nullptr && task->is_safe())  task->log_task_done(log);\n@@ -1697,1 +1698,2 @@\n-  methodHandle method(thread, task->method());\n+  methodHandle method(thread, task->is_safe() ? task->method() : nullptr);\n+\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n@@ -35,0 +35,1 @@\n+#include \"oops\/unloadableMethodHandle.inline.hpp\"\n@@ -69,8 +70,2 @@\n-    if ((task->_method_holder != nullptr && JNIHandles::is_weak_global_handle(task->_method_holder)) ||\n-        (task->_hot_method_holder != nullptr && JNIHandles::is_weak_global_handle(task->_hot_method_holder))) {\n-      JNIHandles::destroy_weak_global(task->_method_holder);\n-      JNIHandles::destroy_weak_global(task->_hot_method_holder);\n-    } else {\n-      JNIHandles::destroy_global(task->_method_holder);\n-      JNIHandles::destroy_global(task->_hot_method_holder);\n-    }\n+    task->_method_handle.release();\n+    task->_hot_method_handle.release();\n@@ -99,1 +94,0 @@\n-  Thread* thread = Thread::current();\n@@ -101,2 +95,1 @@\n-  _method = method();\n-  _method_holder = JNIHandles::make_weak_global(Handle(thread, method->method_holder()->klass_holder()));\n+  _method_handle = UnloadableMethodHandle(method());\n@@ -115,2 +108,0 @@\n-  _hot_method = nullptr;\n-  _hot_method_holder = nullptr;\n@@ -130,10 +121,6 @@\n-  if (LogCompilation) {\n-    if (hot_method.not_null()) {\n-      if (hot_method == method) {\n-        _hot_method = _method;\n-      } else {\n-        _hot_method = hot_method();\n-        \/\/ only add loader or mirror if different from _method_holder\n-        _hot_method_holder = JNIHandles::make_weak_global(Handle(thread, hot_method->method_holder()->klass_holder()));\n-      }\n-    }\n+  \/\/ Only capture unload blocker if _hot_method is different from _method.\n+  \/\/ Otherwise, re-initialize it to empty handle to avoid keeping old hot method alive.\n+  if (hot_method.not_null() && hot_method() != method()) {\n+    _hot_method_handle = UnloadableMethodHandle(hot_method());\n+  } else {\n+    _hot_method_handle = UnloadableMethodHandle();\n@@ -152,1 +139,0 @@\n-\/\/ Replace weak handles by strong handles to avoid unloading during compilation.\n@@ -154,2 +140,1 @@\n-  if (is_unloaded()) {\n-    \/\/ Guard against concurrent class unloading\n+  if (!is_safe()) {\n@@ -158,9 +143,4 @@\n-  Thread* thread = Thread::current();\n-  assert(_method->method_holder()->is_loader_alive(), \"should be alive\");\n-  Handle method_holder(thread, _method->method_holder()->klass_holder());\n-  JNIHandles::destroy_weak_global(_method_holder);\n-  JNIHandles::destroy_weak_global(_hot_method_holder);\n-  _method_holder = JNIHandles::make_global(method_holder);\n-  if (_hot_method != nullptr) {\n-    _hot_method_holder = JNIHandles::make_global(Handle(thread, _hot_method->method_holder()->klass_holder()));\n-  }\n+\n+  _method_handle.make_always_safe();\n+  _hot_method_handle.make_always_safe();\n+\n@@ -171,1 +151,1 @@\n-  if (is_unloaded()) {\n+  if (!is_safe()) {\n@@ -175,3 +155,3 @@\n-  _method->set_on_stack(true);\n-  if (_hot_method != nullptr) {\n-    _hot_method->set_on_stack(true);\n+  _method_handle.method()->set_on_stack(true);\n+  if (_hot_method_handle.method() != nullptr) {\n+    _hot_method_handle.method()->set_on_stack(true);\n@@ -181,2 +161,2 @@\n-bool CompileTask::is_unloaded() const {\n-  return _method_holder != nullptr && JNIHandles::is_weak_global_handle(_method_holder) && JNIHandles::is_weak_global_cleared(_method_holder);\n+bool CompileTask::is_safe() const {\n+  return _method_handle.is_safe() && _hot_method_handle.is_safe();\n@@ -187,1 +167,1 @@\n-  if (is_unloaded()) {\n+  if (!is_safe()) {\n@@ -292,1 +272,1 @@\n-  print_impl(st, is_unloaded() ? nullptr : method(), compile_id(), comp_level(), is_osr_method, osr_bci(), is_blocking(), msg, short_form, cr, _time_queued, _time_started);\n+  print_impl(st, is_safe() ? method() : nullptr, compile_id(), comp_level(), is_osr_method, osr_bci(), is_blocking(), msg, short_form, cr, _time_queued, _time_started);\n@@ -332,2 +312,2 @@\n-  if (_hot_method != nullptr && _hot_method != _method) {\n-    xtty->method(_hot_method);\n+  if (_hot_method_handle.method() != nullptr) {\n+    xtty->method(_hot_method_handle.method());\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":26,"deletions":46,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"oops\/unloadableMethodHandle.hpp\"\n@@ -86,2 +87,1 @@\n-  Method*              _method;\n-  jobject              _method_holder;\n+  UnloadableMethodHandle _method_handle;\n@@ -109,2 +109,1 @@\n-  Method*              _hot_method;   \/\/ which method actually triggered this task\n-  jobject              _hot_method_holder;\n+  UnloadableMethodHandle _hot_method_handle;  \/\/ which method actually triggered this task\n@@ -131,0 +130,3 @@\n+  inline Method* method() const;\n+  inline Method* hot_method() const;\n+\n@@ -132,2 +134,0 @@\n-  Method*      method() const                    { return _method; }\n-  Method*      hot_method() const                { return _hot_method; }\n@@ -216,1 +216,1 @@\n-  bool         is_unloaded() const;\n+  bool         is_safe() const;\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_COMPILER_COMPILETASK_INLINE_HPP\n+#define SHARE_COMPILER_COMPILETASK_INLINE_HPP\n+\n+#include \"compiler\/compileTask.hpp\"\n+\n+#include \"oops\/unloadableMethodHandle.inline.hpp\"\n+\n+inline Method* CompileTask::method() const {\n+  return _method_handle.method();\n+}\n+\n+inline Method* CompileTask::hot_method() const {\n+  return _hot_method_handle.method();\n+}\n+\n+#endif \/\/ SHARE_COMPILER_COMPILETASK_INLINE_HPP\n","filename":"src\/hotspot\/share\/compiler\/compileTask.inline.hpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"compiler\/compileTask.hpp\"\n+#include \"compiler\/compileTask.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_HPP\n+#define SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_HPP\n+\n+#include \"oops\/oopHandle.hpp\"\n+#include \"oops\/weakHandle.hpp\"\n+\n+\/\/ Unloadable method handle.\n+\/\/\n+\/\/ This handle allows holding to Method* safely without delaying class unloading\n+\/\/ of its holder.\n+\/\/\n+\/\/ This handle can be in 4 states:\n+\/\/  1. Empty. There is no Method* inside. All methods are safe to call.\n+\/\/     This is a convenience state to allow easy initializations.\n+\/\/  2. Weak. Method* is present, but its holder is only weakly-reachable, and can\n+\/\/     be unloaded. Users need to check is_safe() before calling method().\n+\/\/     method() is safe to call iff we have not crossed a safepoint since construction\n+\/\/     or last is_safe() check. Calling make_always_safe() after is_safe() check\n+\/\/     moves handle to the strong state.\n+\/\/  3. Strong. Method* holder is strongly reachable, cannot be unloaded.\n+\/\/     Calling method() is always safe in this state.\n+\/\/  4. Released. Method* is in unknown state, and cannot be accessed.\n+\/\/     method() is unsafe to call in this state.\n+\/\/\n+\/\/ The handle transitions are one-shot:\n+\/\/    weak   --(make_always_safe) --> strong\n+\/\/    weak   ------(release) -------> released\n+\/\/    strong ------(release) -------> released\n+\/\/\n+\/\/ Additionally, when handle is empty, it stays empty:\n+\/\/    empty  --(make_always_safe) --> empty\n+\/\/    empty  ------(release) -------> empty\n+\/\/\n+\/\/ Common usage pattern:\n+\/\/\n+\/\/   UnloadableMethodHandle mh;           \/\/ Initially empty.\n+\/\/   mh = UnloadableMethodHandle(method); \/\/ Now in weak state.\n+\/\/   mh.method()->print_on(tty);          \/\/ method() is good until the next safepoint.\n+\/\/   <safepoint>\n+\/\/   if (!mh.is_safe()) {                 \/\/ Safe to use method()?\n+\/\/     mh.release();                      \/\/ No! Release the handle and exit.\n+\/\/     return;\n+\/\/   }\n+\/\/   mh.method()->print_on(tty);          \/\/ method() is good until the next safepoint.\n+\/\/   mh.make_always_safe();               \/\/ Now in safe state.\n+\/\/   <safepoint>\n+\/\/   mh.method()->print_on(tty);          \/\/ method() is always safe now.\n+\/\/   mh.release();                        \/\/ Release the handle.\n+\/\/\n+\n+class Method;\n+\n+class UnloadableMethodHandle {\n+  friend class VMStructs;\n+private:\n+  enum State {\n+    EMPTY,\n+    WEAK,\n+    STRONG,\n+    RELEASED,\n+  } volatile _state;\n+\n+  volatile int _spin_lock;\n+\n+  Method* _method;\n+  WeakHandle _weak_handle;\n+  OopHandle _strong_handle;\n+\n+  inline State get_state() const;\n+  inline void set_state(State s);\n+  inline oop get_unload_blocker(Method* method);\n+\n+public:\n+  UnloadableMethodHandle();\n+  UnloadableMethodHandle(Method* method);\n+  inline void release();\n+\n+  inline Method* method() const;\n+\n+  inline bool is_safe() const;\n+  void make_always_safe();\n+};\n+\n+#endif \/\/ SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_HPP\n","filename":"src\/hotspot\/share\/oops\/unloadableMethodHandle.hpp","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_INLINE_HPP\n+#define SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_INLINE_HPP\n+\n+#include \"unloadableMethodHandle.hpp\"\n+\n+#include \"memory\/universe.hpp\"\n+#include \"oops\/klass.inline.hpp\"\n+#include \"oops\/oopHandle.inline.hpp\"\n+#include \"oops\/weakHandle.inline.hpp\"\n+\n+inline UnloadableMethodHandle::UnloadableMethodHandle() : _spin_lock(0), _method(nullptr) {\n+  set_state(EMPTY);\n+}\n+\n+inline UnloadableMethodHandle::UnloadableMethodHandle(Method* method) : _spin_lock(0), _method(method) {\n+  assert(method != nullptr, \"Should be\");\n+  oop obj = get_unload_blocker(method);\n+  if (obj != nullptr) {\n+    _weak_handle = WeakHandle(Universe::vm_weak(), obj);\n+    set_state(WEAK);\n+  } else {\n+    set_state(STRONG);\n+  }\n+  assert(is_safe(), \"Should be\");\n+}\n+\n+inline UnloadableMethodHandle::State UnloadableMethodHandle::get_state() const {\n+  return Atomic::load_acquire(&_state);\n+}\n+\n+inline void UnloadableMethodHandle::set_state(State s) {\n+  Atomic::release_store_fence(&_state, s);\n+}\n+\n+oop UnloadableMethodHandle::get_unload_blocker(Method* method) {\n+  assert(method != nullptr, \"Should be\");\n+\n+  InstanceKlass* holder = method->method_holder();\n+  if (holder->class_loader_data()->is_permanent_class_loader_data()) {\n+    \/\/ Method holder class cannot be unloaded.\n+    return nullptr;\n+  }\n+\n+  \/\/ Return the holder that would block unloading.\n+  \/\/ This would be either classloader oop for non-hidden classes,\n+  \/\/ or Java mirror oop for hidden classes.\n+  oop klass_holder = holder->klass_holder();\n+  assert(klass_holder != nullptr, \"Should be\");\n+  return klass_holder;\n+}\n+\n+void UnloadableMethodHandle::release() {\n+  switch (get_state()) {\n+    case RELEASED: {\n+      \/\/ Nothing to do.\n+      break;\n+    }\n+    case STRONG:\n+    case WEAK: {\n+      _strong_handle.release(Universe::vm_global());\n+      _weak_handle.release(Universe::vm_weak());\n+      _method = nullptr;\n+      set_state(RELEASED);\n+      break;\n+    }\n+    case EMPTY: {\n+      set_state(RELEASED);\n+      break;\n+    }\n+    default:\n+      ShouldNotReachHere();\n+  }\n+\n+  assert(!is_safe(), \"Should not be\");\n+}\n+\n+bool UnloadableMethodHandle::is_safe() const {\n+  switch (get_state()) {\n+    case EMPTY:\n+    case STRONG: {\n+      \/\/ Definitely safe.\n+      return true;\n+    }\n+    case RELEASED: {\n+      \/\/ Definitely unsafe.\n+      return false;\n+    }\n+    case WEAK: {\n+      \/\/ Safe only if weak handle was not cleared by GC.\n+      \/\/ This is only trustworthy if caller is a Java thread in proper state.\n+      \/\/ Otherwise, unloading can happen without coordinating with this thread.\n+      \/\/ (Access API would assert this too, but do not rely on it.)\n+      Thread* t = Thread::current();\n+      if (t->is_Java_thread() &&\n+          (JavaThread::cast(t)->thread_state() != _thread_in_native) &&\n+          (_weak_handle.peek() != nullptr)) {\n+        return true;\n+      }\n+      return false;\n+    }\n+    default:\n+      ShouldNotReachHere();\n+      return false;\n+  }\n+}\n+\n+inline void UnloadableMethodHandle::make_always_safe() {\n+  assert(is_safe(), \"Should be\");\n+\n+  switch (get_state()) {\n+    case EMPTY:\n+    case STRONG: {\n+      \/\/ Already safe.\n+      break;\n+    }\n+    case RELEASED: {\n+      assert(false, \"Cannot be RELEASED: check lifecycle\");\n+      break;\n+    }\n+    case WEAK: {\n+      \/\/ Need to capture holder strongly. Under concurrent calls, we need to make\n+      \/\/ sure we create the strong handle only once, otherwise we can leak some.\n+      \/\/ This path is normally uncontended, so a simple spin lock would do.\n+      Thread::SpinAcquire(&_spin_lock);\n+      if (get_state() == WEAK) {\n+        oop obj = get_unload_blocker(_method);\n+        assert(obj != nullptr, \"Should have one\");\n+        _strong_handle = OopHandle(Universe::vm_global(), obj);\n+        set_state(STRONG);\n+      } else {\n+        assert(get_state() == STRONG, \"Should be otherwise\");\n+      }\n+      Thread::SpinRelease(&_spin_lock);\n+      break;\n+    }\n+    default:\n+      ShouldNotReachHere();\n+  }\n+\n+  assert(is_safe(), \"Should be\");\n+}\n+\n+inline Method* UnloadableMethodHandle::method() const {\n+  assert(is_safe(), \"Should be\");\n+  return _method;\n+}\n+\n+#endif \/\/ SHARE_OOPS_UNLOADABLE_METHOD_HANDLE_INLINE_HPP\n","filename":"src\/hotspot\/share\/oops\/unloadableMethodHandle.inline.hpp","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -773,1 +773,1 @@\n-  nonstatic_field(CompileTask,                 _method,                                       Method*)                               \\\n+  nonstatic_field(CompileTask,                 _method_handle,                                UnloadableMethodHandle)                \\\n@@ -781,0 +781,2 @@\n+  nonstatic_field(UnloadableMethodHandle,      _method,                                       Method*)                               \\\n+                                                                                                                                     \\\n@@ -1264,0 +1266,1 @@\n+  declare_toplevel_type(UnloadableMethodHandle)                           \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}