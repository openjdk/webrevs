{"files":[{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8330247\n+ * @summary Check that Reduce Allocation Merges doesn't try to reduce non-exact allocations.\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ * @requires vm.debug & vm.flagless & vm.compiler2.enabled & vm.opt.final.EliminateAllocations\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*TestReduceAllocationAndNonExactAllocate*::test\n+ *                   -XX:CompileCommand=compileonly,*::allocateInstance\n+ *                   -XX:CompileCommand=dontinline,*TestReduceAllocationAndNonExactAllocate*::*\n+ *                   -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+TraceReduceAllocationMerges\n+ *                   -XX:-TieredCompilation\n+ *                   -Xbatch\n+ *                   -Xcomp\n+ *                   -server\n+ *                   compiler.c2.TestReduceAllocationAndNonExactAllocate\n+ *\/\n+\n+package compiler.c2;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+public class TestReduceAllocationAndNonExactAllocate {\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    public static void main(String[] args) {\n+\t    try {\n+            if (test(20, Integer.class) != 2032) {\n+                throw new RuntimeException(\"Expected the value to be 2032.\");\n+            }\n+\t    }\n+\t    catch (InstantiationException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static int test(int val, Class<?> c) throws InstantiationException {\n+        Object p = null;\n+\n+        if (val == 20) {\n+            p = UNSAFE.allocateInstance(c);\n+        }\n+\n+        dummy();\n+        return p != null ? 2032 : 3242;\n+    }\n+\n+    static int dummy() { return 42; }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestReduceAllocationAndNonExactAllocate.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}