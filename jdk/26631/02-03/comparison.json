{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,0 +75,1 @@\n+    public static final int IO_REPARSE_TAG_MOUNT_POINT          = 0xA0000003;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsConstants.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -416,4 +416,1 @@\n-        if (isSymbolicLink())\n-            return false;\n-        return ((fileAttrs & FILE_ATTRIBUTE_DIRECTORY) != 0 &&\n-                (fileAttrs & FILE_ATTRIBUTE_REPARSE_POINT) != 0);\n+        return reparseTag == IO_REPARSE_TAG_MOUNT_POINT;\n@@ -433,3 +430,0 @@\n-        \/\/ ignore FILE_ATTRIBUTE_DIRECTORY attribute if file is a sym link\n-        if (isSymbolicLink())\n-            return false;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileAttributes.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -102,0 +102,2 @@\n+    BOOL error = FALSE;\n+\n@@ -110,1 +112,1 @@\n-        goto err;\n+        error = TRUE;\n@@ -113,13 +115,12 @@\n-    USHORT wlen = (USHORT)wcslen(target);\n-    USHORT blen = (USHORT)(wlen * sizeof(wchar_t));\n-\n-    void* lpInBuffer = calloc(MAX_REPARSE_BUFFER_SIZE, sizeof(char));\n-    if (lpInBuffer == NULL) {\n-        jclass oomeClass = (*env)->FindClass(env, \"java\/lang\/OutOfMemoryError\");\n-        (*env)->ThrowNew(env, oomeClass, NULL);\n-        goto err;\n-    }\n-\n-    if (CreateDirectoryW(junction, NULL) == 0) {\n-        throwIOExceptionWithLastError(env);\n-        goto err;\n+    USHORT wlen = (USHORT)0;\n+    USHORT blen = (USHORT)0;\n+    void* lpInBuffer = NULL;\n+    if (!error) {\n+        wlen = (USHORT)wcslen(target);\n+        blen = (USHORT)(wlen * sizeof(wchar_t));\n+        lpInBuffer = calloc(MAX_REPARSE_BUFFER_SIZE, sizeof(char));\n+        if (lpInBuffer == NULL) {\n+            jclass oomeClass = (*env)->FindClass(env, \"java\/lang\/OutOfMemoryError\");\n+            (*env)->ThrowNew(env, oomeClass, NULL);\n+            error = TRUE;\n+        }\n@@ -128,6 +129,5 @@\n-    hJunction = CreateFileW(junction, GENERIC_READ | GENERIC_WRITE,\n-        FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING,\n-        FILE_FLAG_OPEN_REPARSE_POINT | FILE_FLAG_BACKUP_SEMANTICS, NULL);\n-    if (hJunction == INVALID_HANDLE_VALUE) {\n-        throwIOExceptionWithLastError(env);\n-        goto err;\n+    if (!error) {\n+        if (CreateDirectoryW(junction, NULL) == 0) {\n+            throwIOExceptionWithLastError(env);\n+            error = TRUE;\n+        }\n@@ -136,34 +136,10 @@\n-    PREPARSE_DATA_BUFFER reparseBuffer = (PREPARSE_DATA_BUFFER)lpInBuffer;\n-    reparseBuffer->ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;\n-    reparseBuffer->Reserved = 0;\n-    WCHAR* prefix = L\"\\\\??\\\\\";\n-    USHORT prefixLength = (USHORT)(bpc * wcslen(prefix));\n-    reparseBuffer->MountPointReparseBuffer.SubstituteNameOffset = 0;\n-    reparseBuffer->MountPointReparseBuffer.SubstituteNameLength =\n-        prefixLength + blen;\n-    reparseBuffer->MountPointReparseBuffer.PrintNameOffset =\n-        prefixLength + blen + sizeof(WCHAR);\n-    reparseBuffer->MountPointReparseBuffer.PrintNameLength = blen;\n-    memcpy(&reparseBuffer->MountPointReparseBuffer.PathBuffer,\n-        prefix, prefixLength);\n-    memcpy(&reparseBuffer->MountPointReparseBuffer.PathBuffer[prefixLength\/bpc],\n-        target, blen);\n-    memcpy(&reparseBuffer->MountPointReparseBuffer.PathBuffer[prefixLength\/bpc + blen\/bpc + 1],\n-        target, blen);\n-    reparseBuffer->ReparseDataLength =\n-        (USHORT)(sizeof(reparseBuffer->MountPointReparseBuffer) +\n-        prefixLength + bpc*blen + bpc);\n-    DWORD nInBufferSize = FIELD_OFFSET(REPARSE_DATA_BUFFER,\n-        MountPointReparseBuffer) + reparseBuffer->ReparseDataLength;\n-    BOOL result = DeviceIoControl(hJunction, FSCTL_SET_REPARSE_POINT,\n-                                  lpInBuffer, nInBufferSize,\n-                                  NULL, 0, NULL, NULL);\n-\n-    (*env)->ReleaseStringChars(env, sjunction, junction);\n-    (*env)->ReleaseStringChars(env, starget, target);\n-    free(lpInBuffer);\n-    lpInBuffer = NULL;\n-\n-    if (result == 0) {\n-        throwIOExceptionWithLastError(env);\n-        goto err;\n+    if (!error) {\n+        hJunction = CreateFileW(junction, GENERIC_READ | GENERIC_WRITE,\n+                                FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,\n+                                OPEN_EXISTING,\n+                                FILE_FLAG_OPEN_REPARSE_POINT\n+                                | FILE_FLAG_BACKUP_SEMANTICS, NULL);\n+        if (hJunction == INVALID_HANDLE_VALUE) {\n+            throwIOExceptionWithLastError(env);\n+            error = TRUE;\n+        }\n@@ -172,3 +148,30 @@\n-    if (CloseHandle(hJunction) == 0) {\n-        throwIOExceptionWithLastError(env);\n-        goto err;\n+    if (!error) {\n+        PREPARSE_DATA_BUFFER reparseBuffer = (PREPARSE_DATA_BUFFER)lpInBuffer;\n+        reparseBuffer->ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;\n+        reparseBuffer->Reserved = 0;\n+        WCHAR* prefix = L\"\\\\??\\\\\";\n+        USHORT prefixLength = (USHORT)(bpc * wcslen(prefix));\n+        reparseBuffer->MountPointReparseBuffer.SubstituteNameOffset = 0;\n+        reparseBuffer->MountPointReparseBuffer.SubstituteNameLength =\n+            prefixLength + blen;\n+        reparseBuffer->MountPointReparseBuffer.PrintNameOffset =\n+            prefixLength + blen + sizeof(WCHAR);\n+        reparseBuffer->MountPointReparseBuffer.PrintNameLength = blen;\n+        memcpy(&reparseBuffer->MountPointReparseBuffer.PathBuffer,\n+               prefix, prefixLength);\n+        memcpy(&reparseBuffer->MountPointReparseBuffer.PathBuffer[prefixLength\/bpc],\n+               target, blen);\n+        memcpy(&reparseBuffer->MountPointReparseBuffer.PathBuffer[prefixLength\/bpc + blen\/bpc + 1],\n+               target, blen);\n+        reparseBuffer->ReparseDataLength =\n+            (USHORT)(sizeof(reparseBuffer->MountPointReparseBuffer) +\n+                     prefixLength + bpc*blen + bpc);\n+        DWORD nInBufferSize = FIELD_OFFSET(REPARSE_DATA_BUFFER,\n+            MountPointReparseBuffer) + reparseBuffer->ReparseDataLength;\n+        BOOL result = DeviceIoControl(hJunction, FSCTL_SET_REPARSE_POINT,\n+                                      lpInBuffer, nInBufferSize,\n+                                      NULL, 0, NULL, NULL);\n+        if (result == 0) {\n+            throwIOExceptionWithLastError(env);\n+            error = TRUE;\n+        }\n@@ -177,3 +180,0 @@\n-    return JNI_TRUE;\n-\n-err:\n@@ -193,1 +193,2 @@\n-    return JNI_FALSE;\n+\n+    return error ? JNI_FALSE : JNI_TRUE;\n","filename":"test\/lib\/jdk\/test\/lib\/util\/libFileUtils.c","additions":62,"deletions":61,"binary":false,"changes":123,"status":"modified"}]}