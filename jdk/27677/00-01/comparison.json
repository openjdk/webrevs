{"files":[{"patch":"@@ -173,1 +173,1 @@\n-            \/\/ Discard the record younger than the current epcoh if:\n+            \/\/ Discard the record younger than the current epoch if:\n@@ -1454,1 +1454,8 @@\n-                    return isReady;\n+                    return isReady\n+                            \/\/ NewSessionTicket message presence in the final flight\n+                            \/\/ should only be expected on the client side, and only\n+                            \/\/ if stateless resumption is enabled.\n+                            && (!tc.sslConfig.isClientMode\n+                            || !tc.handshakeContext.statelessResumption\n+                            || hasCompleted(\n+                            SSLHandshake.NEW_SESSION_TICKET.id));\n@@ -1604,2 +1611,1 @@\n-        \/\/ Looking for the ChangeCipherSpec, Finished and\n-        \/\/ NewSessionTicket messages.\n+        \/\/ Looking for the ChangeCipherSpec and Finished messages.\n@@ -1616,2 +1622,0 @@\n-            boolean hasNst = false;\n-\n@@ -1620,0 +1624,3 @@\n+                    if (hasFin) {\n+                        return true;\n+                    }\n@@ -1622,0 +1629,1 @@\n+                    \/\/ Finished is the first expected message of a new epoch.\n@@ -1623,1 +1631,3 @@\n-                        \/\/ Finished is the first expected ciphertext message.\n+                        if (hasCCS) {\n+                            return true;\n+                        }\n@@ -1625,3 +1635,0 @@\n-                    } else if (((HandshakeFragment) fragment).handshakeType\n-                                == SSLHandshake.NEW_SESSION_TICKET.id) {\n-                        hasNst = true;\n@@ -1632,7 +1639,1 @@\n-            return hasCCS && hasFin\n-                    \/\/ NewSessionTicket message presence in the final flight\n-                    \/\/ should only be expected on the client side, and only\n-                    \/\/ if stateless resumption is enabled.\n-                    && (!tc.sslConfig.isClientMode\n-                    || !tc.handshakeContext.statelessResumption\n-                    || hasNst);\n+            return false;\n@@ -1683,1 +1684,1 @@\n-            \/\/ present handshake message.  Need not to check it again.\n+            \/\/ present handshake message.  Need not check it again.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSInputRecord.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8367059\n+ * @summary DTLS: loss of NewSessionTicket message results in handshake failure\n+ * @modules java.base\/sun.security.util\n+ * @library \/test\/lib\n+ * @build DTLSOverDatagram\n+ *\n+ * @comment Make sure client doesn't expect NewSessionTicket in the final\n+ * flight if server doesn't send the \"session_ticket\" extension with\n+ * ServerHello handshake message.\n+ *\n+ * @run main\/othervm -Djdk.tls.client.enableSessionTicketExtension=false\n+ *                   DTLSNoNewSessionTicket\n+ * @run main\/othervm -Djdk.tls.server.enableSessionTicketExtension=false\n+ *                   DTLSNoNewSessionTicket\n+ *\/\n+\n+public class DTLSNoNewSessionTicket extends DTLSOverDatagram {\n+    public static void main(String[] args) throws Exception {\n+        var testCase = new DTLSNoNewSessionTicket();\n+        testCase.runTest(testCase);\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/DTLS\/DTLSNoNewSessionTicket.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -47,2 +47,0 @@\n- * @run main\/othervm -Djdk.tls.client.enableSessionTicketExtension=false PacketLossRetransmission server 4 new_session_ticket\n- * @run main\/othervm -Djdk.tls.server.enableSessionTicketExtension=false PacketLossRetransmission server 4 new_session_ticket\n","filename":"test\/jdk\/javax\/net\/ssl\/DTLS\/PacketLossRetransmission.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}