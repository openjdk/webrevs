{"files":[{"patch":"@@ -173,1 +173,1 @@\n-            \/\/ Discard the record younger than the current epcoh if:\n+            \/\/ Discard the record younger than the current epoch if:\n@@ -1447,2 +1447,9 @@\n-                    \/\/ Have the ChangeCipherSpec\/Finished flight been received?\n-                    boolean isReady = hasFinishedMessage(bufferedFragments);\n+                    \/\/ NewSessionTicket message presence in the final flight\n+                    \/\/ should only be expected on the client side, and only\n+                    \/\/ if stateless resumption is enabled.\n+                    boolean isReady = hasFinishedMessage(bufferedFragments)\n+                            && (!tc.sslConfig.isClientMode\n+                            || !tc.handshakeContext.statelessResumption\n+                            || hasCompleted(\n+                            SSLHandshake.NEW_SESSION_TICKET.id));\n+\n@@ -1450,2 +1457,2 @@\n-                        SSLLogger.fine(\n-                            \"Has the final flight been received? \" + isReady);\n+                        SSLLogger.fine(\"Has the final flight been received? \"\n+                                + isReady);\n@@ -1677,1 +1684,1 @@\n-            \/\/ present handshake message.  Need not to check it again.\n+            \/\/ present handshake message.  Need not check it again.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSInputRecord.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-            null,\n+            SessionTicketExtension.shOnLoadAbsence,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLExtension.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,0 +75,2 @@\n+    static final HandshakeAbsence shOnLoadAbsence =\n+            new T12SHSessionTicketOnLoadAbsence();\n@@ -532,0 +534,23 @@\n+\n+    \/**\n+     * The absence processing if a \"session_ticket\" extension is\n+     * not present in the ServerHello handshake message.\n+     *\/\n+    private static final class T12SHSessionTicketOnLoadAbsence\n+            implements HandshakeAbsence {\n+\n+        @Override\n+        public void absent(ConnectionContext context,\n+                HandshakeMessage message) {\n+            ClientHandshakeContext chc = (ClientHandshakeContext) context;\n+\n+            \/\/ Disable stateless resumption if server doesn't send the extension.\n+            if (chc.statelessResumption) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n+                    SSLLogger.info(\n+                            \"Server doesn't support stateless resumption\");\n+                }\n+                chc.statelessResumption = false;\n+            }\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SessionTicketExtension.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8367059\n+ * @summary DTLS: loss of NewSessionTicket message results in handshake failure\n+ * @modules java.base\/sun.security.util\n+ * @library \/test\/lib\n+ * @build DTLSOverDatagram\n+ *\n+ * @comment Make sure client doesn't expect NewSessionTicket in the final\n+ * flight if server doesn't send the \"session_ticket\" extension with\n+ * ServerHello handshake message.\n+ *\n+ * @run main\/othervm -Djdk.tls.client.enableSessionTicketExtension=false\n+ *                   DTLSNoNewSessionTicket\n+ * @run main\/othervm -Djdk.tls.server.enableSessionTicketExtension=false\n+ *                   DTLSNoNewSessionTicket\n+ *\/\n+\n+public class DTLSNoNewSessionTicket extends DTLSOverDatagram {\n+    public static void main(String[] args) throws Exception {\n+        var testCase = new DTLSNoNewSessionTicket();\n+        testCase.runTest(testCase);\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/DTLS\/DTLSNoNewSessionTicket.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n- * @bug 8161086\n+ * @bug 8161086 8367059\n@@ -46,0 +46,1 @@\n+ * @run main\/othervm PacketLossRetransmission server 4 new_session_ticket\n@@ -49,1 +50,0 @@\n-import java.util.ArrayList;\n","filename":"test\/jdk\/javax\/net\/ssl\/DTLS\/PacketLossRetransmission.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}