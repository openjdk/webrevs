{"files":[{"patch":"@@ -1604,1 +1604,2 @@\n-        \/\/ Looking for the ChangeCipherSpec and Finished messages.\n+        \/\/ Looking for the ChangeCipherSpec, Finished and\n+        \/\/ NewSessionTicket messages.\n@@ -1615,0 +1616,2 @@\n+            boolean hasNst = false;\n+\n@@ -1617,3 +1620,0 @@\n-                    if (hasFin) {\n-                        return true;\n-                    }\n@@ -1622,1 +1622,0 @@\n-                    \/\/ Finished is the first expected message of a new epoch.\n@@ -1624,3 +1623,1 @@\n-                        if (hasCCS) {\n-                            return true;\n-                        }\n+                        \/\/ Finished is the first expected ciphertext message.\n@@ -1628,0 +1625,3 @@\n+                    } else if (((HandshakeFragment) fragment).handshakeType\n+                                == SSLHandshake.NEW_SESSION_TICKET.id) {\n+                        hasNst = true;\n@@ -1632,1 +1632,7 @@\n-            return false;\n+            return hasCCS && hasFin\n+                    \/\/ NewSessionTicket message presence in the final flight\n+                    \/\/ should only be expected on the client side, and only\n+                    \/\/ if stateless resumption is enabled.\n+                    && (!tc.sslConfig.isClientMode\n+                    || !tc.handshakeContext.statelessResumption\n+                    || hasNst);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSInputRecord.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-            null,\n+            SessionTicketExtension.shOnLoadAbsence,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLExtension.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,0 +75,2 @@\n+    static final HandshakeAbsence shOnLoadAbsence =\n+            new T12SHSessionTicketOnLoadAbsence();\n@@ -532,0 +534,23 @@\n+\n+    \/**\n+     * The absence processing if a \"session_ticket\" extension is\n+     * not present in the ServerHello handshake message.\n+     *\/\n+    private static final class T12SHSessionTicketOnLoadAbsence\n+            implements HandshakeAbsence {\n+\n+        @Override\n+        public void absent(ConnectionContext context,\n+                HandshakeMessage message) throws IOException {\n+            ClientHandshakeContext chc = (ClientHandshakeContext) context;\n+\n+            \/\/ Disable stateless resumption if server doesn't send the extension.\n+            if (chc.statelessResumption) {\n+                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n+                    SSLLogger.info(\n+                            \"Server doesn't support stateless resumption\");\n+                }\n+                chc.statelessResumption = false;\n+            }\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SessionTicketExtension.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @bug 8161086\n+ * @bug 8161086 8367059\n@@ -46,0 +46,3 @@\n+ * @run main\/othervm PacketLossRetransmission server 4 new_session_ticket\n+ * @run main\/othervm -Djdk.tls.client.enableSessionTicketExtension=false PacketLossRetransmission server 4 new_session_ticket\n+ * @run main\/othervm -Djdk.tls.server.enableSessionTicketExtension=false PacketLossRetransmission server 4 new_session_ticket\n@@ -49,1 +52,0 @@\n-import java.util.ArrayList;\n","filename":"test\/jdk\/javax\/net\/ssl\/DTLS\/PacketLossRetransmission.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}