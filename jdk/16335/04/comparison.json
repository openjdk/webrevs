{"files":[{"patch":"@@ -676,1 +676,11 @@\n-static bool parseEnumValueAsUintx(enum CompileCommand option, const char* line, uintx& value, int& bytes_read, char* errorbuf, const int buf_size) {\n+\/\/ Parse an uintx-based option value. Also takes care of parsing enum values for options that are enums.\n+\/\/ Returns true if ok, false if the value could not be parsed.\n+static bool parseUintxValue(enum CompileCommand option, const char* line, uintx& value, int& bytes_read) {\n+\n+#define IF_ENUM_STRING(S, CMD)                \\\n+  if (strncasecmp(line, S, strlen(S)) == 0) { \\\n+    bytes_read += (int)strlen(S);             \\\n+    CMD                                       \\\n+    return true;                              \\\n+  }\n+\n@@ -678,9 +688,8 @@\n-    if (strncasecmp(line, \"collect\", 7) == 0) {\n-      value = (uintx)MemStatAction::collect;\n-    } else if (strncasecmp(line, \"print\", 5) == 0) {\n-      value = (uintx)MemStatAction::print;\n-      print_final_memstat_report = true;\n-    } else {\n-      jio_snprintf(errorbuf, buf_size, \"MemStat: invalid value expected 'collect' or 'print' (omitting value means 'collect')\");\n-    }\n-    return true; \/\/ handled\n+    IF_ENUM_STRING(\"collect\", {\n+        value = (uintx)MemStatAction::collect;\n+    });\n+    IF_ENUM_STRING(\"print\", {\n+        value = (uintx)MemStatAction::print;\n+        print_final_memstat_report = true;\n+    });\n+    return false;\n@@ -688,0 +697,7 @@\n+#undef IF_ENUM_STRING\n+\n+  \/\/ Option is not an enum. Parse as literal number.\n+  if ((sscanf(line, \"\" UINTX_FORMAT \"%n\", &value, &bytes_read) == 1)) {\n+    return true;\n+  }\n+\n@@ -689,1 +705,0 @@\n-#undef HANDLE_VALUE\n@@ -717,7 +732,1 @@\n-    \/\/ Is it a named enum?\n-    bool success = parseEnumValueAsUintx(option, line, value, bytes_read, errorbuf, buf_size);\n-    if (!success) {\n-      \/\/ Is it a raw number?\n-      success = (sscanf(line, \"\" UINTX_FORMAT \"%n\", &value, &bytes_read) == 1);\n-    }\n-    if (success) {\n+    if (parseUintxValue(option, line, value, bytes_read)) {\n@@ -727,1 +736,0 @@\n-      return;\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":27,"deletions":19,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8318671\n+ * @summary Tests various ways to call memstat\n+ * @library \/test\/lib \/\n+ *\n+ * @run driver compiler.compilercontrol.commands.MemStatTest\n+ *\/\n+\n+package compiler.compilercontrol.commands;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class MemStatTest {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ default => collect\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*\", \"-version\")\n+                .shouldHaveExitValue(0)\n+                .shouldNotContain(\"CompileCommand: An error occurred during parsing\")\n+                .shouldContain(\"CompileCommand: MemStat *.* uintx MemStat = 1\"); \/\/ should be registered\n+        \/\/ collect explicit\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*,collect\", \"-version\")\n+                .shouldHaveExitValue(0)\n+                .shouldNotContain(\"CompileCommand: An error occurred during parsing\")\n+                .shouldContain(\"CompileCommand: MemStat *.* uintx MemStat = 1\"); \/\/ should be registered\n+        \/\/ print explicit\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*,print\", \"-version\")\n+                .shouldHaveExitValue(0)\n+                .shouldNotContain(\"CompileCommand: An error occurred during parsing\")\n+                .shouldContain(\"CompileCommand: MemStat *.* uintx MemStat = 2\");\n+        \/\/ invalid suboption\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=MemStat,*.*,invalid\", \"-version\")\n+                .shouldNotHaveExitValue(0)\n+                .shouldContain(\"CompileCommand: An error occurred during parsing\")\n+                .shouldContain(\"Error: Value cannot be read for option 'MemStat'\")\n+                .shouldNotContain(\"CompileCommand: MemStat\"); \/\/ should *NOT* be registered\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/MemStatTest.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -42,12 +42,0 @@\n-\/*\n- * @test CompilerMemoryStatisticTest\n- * @summary Test Compiler.memory\n- * @requires vm.compiler1.enabled\n- * @requires vm.compiler2.enabled\n- *\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run main\/othervm -XX:CompileCommand=memstat,*.*,collect CompilerMemoryStatisticTest\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/CompilerMemoryStatisticTest.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"}]}