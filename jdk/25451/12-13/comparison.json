{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import java.util.function.UnaryOperator;\n@@ -2245,0 +2244,3 @@\n+     * @implNote this is typically used to compute the implicit qualifier in a\n+     * method\/field access expression.\n+     *\n@@ -2249,1 +2251,7 @@\n-        return asSuperClosure(t, sym, Type::getEnclosingType);\n+        Type t1 = t;\n+        while (!t1.hasTag(NONE)) {\n+            Type s = asSuper(t1, sym);\n+            if (s != null) return s;\n+            t1 = t1.getEnclosingType();\n+        }\n+        return null;\n@@ -2260,20 +2268,2 @@\n-     * @param t a type\n-     * @param sym a symbol\n-     *\/\n-    public Type asEnclosingSuper(Type t, Symbol sym) {\n-        return asSuperClosure(t, sym, type -> getOwnerEnclosingClassType(type));\n-    }\n-    \/\/ where\n-    private static Type getOwnerEnclosingClassType(Type type) {\n-        return (type.tsym.owner.enclClass() != null)\n-                ? type.tsym.owner.enclClass().type\n-                : Type.noType;\n-    }\n-\n-    \/**\n-     * Traverses a sequence of types starting with `t` and returns the first type\n-     * that can be seen as a supertype of one of those types. The sequence of types\n-     * starts with `t` and is left abstract.\n-     *\n-     * The next type in the sequence is obtained by passing the previous type in\n-     * the sequence to the unary operator `nextType`.\n+     * @implNote this is typically used to compute the implicit qualifier in\n+     * a type expression.\n@@ -2283,1 +2273,0 @@\n-     * @param nextType a unary operator that emits the next type to be examined\n@@ -2285,3 +2274,4 @@\n-    public Type asSuperClosure(Type t, Symbol sym, UnaryOperator<Type> nextType) {\n-        while (!t.hasTag(NONE)) {\n-            Type s = asSuper(t, sym);\n+    public Type asEnclosingSuper(Type t, Symbol sym) {\n+        Type t1 = t;\n+        while (!t1.hasTag(NONE)) {\n+            Type s = asSuper(t1, sym);\n@@ -2289,1 +2279,3 @@\n-            t = nextType.apply(t);\n+            t1 = (t1.tsym.owner.enclClass() != null)\n+                    ? t1.tsym.owner.enclClass().type\n+                    : noType;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":19,"deletions":27,"binary":false,"changes":46,"status":"modified"}]}