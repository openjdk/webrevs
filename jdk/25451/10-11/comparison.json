{"files":[{"patch":"@@ -2247,1 +2247,1 @@\n-        return asSuperUpward(t, sym, Type::getEnclosingType);\n+        return asSuperClosure(t, sym, Type::getEnclosingType);\n@@ -2260,1 +2260,1 @@\n-        return asSuperUpward(t, sym, type -> getOwnerEnclosingClassType(type));\n+        return asSuperClosure(t, sym, type -> getOwnerEnclosingClassType(type));\n@@ -2279,1 +2279,1 @@\n-    public Type asSuperUpward(Type t, Symbol sym, UnaryOperator<Type> nextType) {\n+    public Type asSuperClosure(Type t, Symbol sym, UnaryOperator<Type> nextType) {\n@@ -4510,1 +4510,1 @@\n-        List<Type> commonSupers = superClosure(to, erasure(from));\n+        List<Type> commonSupers = supertypeClosure(to, erasure(from));\n@@ -4568,1 +4568,1 @@\n-    private List<Type> superClosure(Type t, Type s) {\n+    private List<Type> supertypeClosure(Type t, Type s) {\n@@ -4574,1 +4574,1 @@\n-                cl = union(cl, superClosure(l.head, s));\n+                cl = union(cl, supertypeClosure(l.head, s));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+            M.B<?>[] mapping2 = new M.B[1];\n+            mapping2[0] = mapping;\n","filename":"test\/langtools\/tools\/javac\/T8357472.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,0 +113,53 @@\n+    @Test\n+    public void testCompilationArray(Path base) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                package test;\n+                public class Test {\n+                    static abstract class Getters<X> {\n+                      abstract class Getter {\n+                          abstract X get();\n+                      }\n+                    }\n+\n+                    static class Usage1<T, G extends Getters<T>> {\n+                      public T test(G.Getter[] getter) {\n+                          return getter[0].get();\n+                      }\n+                    }\n+\n+                    static class Usage2<T, U extends Getters<T>, G extends U> {\n+                      public T test(G.Getter[] getter) {\n+                          return getter[0].get();\n+                      }\n+                    }\n+\n+                    static class Usage3<T, U extends T, G extends Getters<T>> {\n+                      public T test(G.Getter[] getter) {\n+                          return getter[0].get();\n+                      }\n+                    }\n+\n+                    class G2<K> extends Getters<K> {}\n+                    static class Usage4<M, L extends G2<M>> {\n+                      M test(L.Getter[] getter) {\n+                          return getter[0].get();\n+                      }\n+                    }\n+                }\n+                \"\"\");\n+\n+        Files.createDirectories(classes);\n+\n+        {\n+            new JavacTask(tb)\n+                    .outdir(classes)\n+                    .files(tb.findJavaFiles(src))\n+                    .run(Task.Expect.SUCCESS)\n+                    .writeAll();\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/T8357653.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -43,0 +43,3 @@\n+\n+                B<?>[] b2 = new B[1];\n+                String s2 = b2[0].rett();\n","filename":"test\/langtools\/tools\/javac\/T8357653b.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}