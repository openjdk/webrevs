{"files":[{"patch":"@@ -2237,2 +2237,10 @@\n-     * Return the base type of t or any of its outer types that starts\n-     * with the given symbol.  If none exists, return null.\n+     * Return the base type of t or any of its strictly enclosing types that start\n+     * with the given symbol. If none exists, return null.\n+     *\n+     * This is typically used when there is an explicit qualification of a type.\n+     * The qualified part may either be a parameter or not.\n+     * Example: user writes {@code G.m()} and {@code <G extends A<String>}\n+     * ({@code m()} is an inherited member).\n+     *\n+     * Note, if there's an explicit qualifier, both {@code asEnclosingSuper} and\n+     * {@code asOuterSuper} are equivalent.\n@@ -2262,2 +2270,10 @@\n-     * Return the base type of t or any of its enclosing types that\n-     * starts with the given symbol.  If none exists, return null.\n+     * Return the base type of t or any of its enclosing types (traversing potential\n+     * enclosing classes along the path) that start with the given symbol. If none\n+     * exists, return null.\n+     *\n+     * This is typically used when there is an implicit qualification of a type.\n+     * Example: user writes {@code B<?>} and the real type is a qualified path\n+     * {@code A<String>.B<?>}.\n+     *\n+     * Note, if there's an explicit qualifier, both {@code asEnclosingSuper} and\n+     * {@code asOuterSuper} are equivalent.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"}]}