{"files":[{"patch":"@@ -336,1 +336,1 @@\n-            Type ownertype = types.asOuterSuper(site, owner);\n+            Type ownertype = types.getOuterSuper(site, owner);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2245,1 +2245,1 @@\n-    public Type asOuterSuper(Type t, Symbol sym) {\n+    public Type getOuterSuper(Type t, Symbol sym) {\n@@ -2254,2 +2254,0 @@\n-        case ARRAY:\n-            return isSubtype(t, sym.type) ? sym.type : null;\n@@ -2272,1 +2270,1 @@\n-    public Type asEnclosingSuper(Type t, Symbol sym) {\n+    public Type getOwnerSuper(Type t, Symbol sym) {\n@@ -2274,2 +2272,1 @@\n-        case CLASS:\n-            do {\n+            case CLASS: do {\n@@ -2279,2 +2276,2 @@\n-                  ? t.tsym.owner.enclClass().type\n-                  : Type.noType;\n+                        ? t.tsym.owner.enclClass().type\n+                        : Type.noType;\n@@ -2283,2 +2280,0 @@\n-        case ARRAY:\n-            return isSubtype(t, sym.type) ? sym.type : null;\n@@ -2324,1 +2319,1 @@\n-                    Type base = asOuterSuper(t, owner);\n+                    Type base = getOuterSuper(t, owner);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4679,2 +4679,2 @@\n-                    else if (ownOuter.hasTag(CLASS) && site != ownOuter) {\n-                        Type normOuter = types.asEnclosingSuper(site, ownOuter.tsym);\n+                    else if ((ownOuter.hasTag(CLASS) || ownOuter.hasTag(TYPEVAR)) && site != ownOuter) {\n+                        Type normOuter = types.getOwnerSuper(site, ownOuter.tsym);\n@@ -4707,1 +4707,1 @@\n-                    Type s = types.asOuterSuper(site, v.owner);\n+                    Type s = types.getOuterSuper(site, v.owner);\n@@ -4905,1 +4905,1 @@\n-            Type s = types.asOuterSuper(site, sym.owner);\n+            Type s = types.getOuterSuper(site, sym.owner);\n@@ -5066,2 +5066,2 @@\n-                        if (site.hasTag(CLASS))\n-                            site = types.asOuterSuper(site, clazzOuter.tsym);\n+                        if (site.hasTag(CLASS) || site.hasTag(TYPEVAR))\n+                            site = types.getOwnerSuper(site, clazzOuter.tsym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8357472\n+ * @summary NPE in Types.containsType for type variable used as a qualifier\n+ * @compile T8357472.java\n+ *\/\n+\n+class T8357472 {\n+    class A<T> {\n+        protected class B<V> {}\n+\n+        public static <T, M extends A<T>> void f(Object g) {\n+            @SuppressWarnings(\"unchecked\")\n+            M.B<?> mapping = (M.B<?>) g;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8357472.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8357653\n+ * @summary Inner classes of type parameters emitted as raw types in signatures\n+ * @compile T8357653b.java\n+ *\/\n+\n+class T8357653b {\n+    class A<T> {\n+        class B<W> {\n+            public T rett() { return null; }\n+        }\n+    }\n+\n+    class C extends A<String> {\n+        static class D {\n+            {\n+                B<?> b = null;\n+                String s = b.rett();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/generics\/rare\/T8357653b.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}