{"files":[{"patch":"@@ -46,1 +46,0 @@\n-import com.sun.tools.javac.code.Source.Feature;\n@@ -53,1 +52,0 @@\n-import com.sun.tools.javac.comp.LambdaToMethod;\n@@ -2240,3 +2238,4 @@\n-     * Return the base type of t or any of its outer types (by following the types enclosing type)\n-     * that start with the given symbol.\n-     * If none exists, return null.\n+     * Calls `asSuper(S, sym)` on a sequence of types until a match is found.\n+     * The sequence of types starts with `t` and the next type in the sequence\n+     * is obtained by calling `getEnclosingType()` on  the previous type in the\n+     * sequence.\n@@ -2248,1 +2247,1 @@\n-        return asOuter(t, sym, Type::getEnclosingType);\n+        return asSuperUpward(t, sym, Type::getEnclosingType);\n@@ -2252,3 +2251,4 @@\n-     * Return the base type of t or any of its outer types (by following owner's\n-     * enclosing class) that start with the given symbol.\n-     * If none exists, return null.\n+     * Calls `asSuper(S, sym)` on a sequence of types until a match is found.\n+     * The sequence of types starts with `t` and the next type in the sequence\n+     * is obtained by obtaining innermost lexically enclosing class type of the\n+     * previous type in the sequence.\n@@ -2260,1 +2260,1 @@\n-        return asOuter(t, sym, type -> getOwnerEnclosingClassType(type));\n+        return asSuperUpward(t, sym, type -> getOwnerEnclosingClassType(type));\n@@ -2262,1 +2262,1 @@\n-\n+    \/\/ where\n@@ -2270,5 +2270,4 @@\n-     * Return the (most specific) base type of t that starts with\n-     * the given symbol. If it exists, the base type is returned.\n-     * Otherwise, a traversal of outer types attempts to find such\n-     * a base type. The traversal of the next outwards type is left\n-     * abstract, via the parameter nextType. If none exists, return null.\n+     * Calls `asSuper(S, sym)` on a sequence of types until a match is found.\n+     * The sequence of types starts with `t` and the next type in the sequence\n+     * is obtained by passing the previous type in the sequence to the unary\n+     * operator `nextType`.\n@@ -2280,1 +2279,1 @@\n-    public Type asOuter(Type t, Symbol sym, UnaryOperator<Type> nextType) {\n+    public Type asSuperUpward(Type t, Symbol sym, UnaryOperator<Type> nextType) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"}]}