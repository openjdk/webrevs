{"files":[{"patch":"@@ -253,0 +253,2 @@\n+    DEBUG_ONLY(remove_wildcard_deathtests(&level, selections, ts));\n+\n@@ -719,0 +721,35 @@\n+\n+\n+#ifdef ASSERT\n+void LogConfiguration::remove_wildcard_deathtests(LogLevelType* level, const LogSelectionList& selections, LogTagSet* ts) {\n+  \/\/ Some UL tags (deathtest, deathtest2) are used for testing which results in the VM crashing.\n+  \/\/ We want to avoid any wildcard selections from crashing the VM.\n+  \/\/ We avoid this by explicitly ruling out wildcards for these 2 tags.\n+  bool contains_deathtest = ts->contains(LogTagType::_deathtest);\n+  bool contains_deathtest2 = ts->contains(LogTagType::_deathtest2);\n+  if (*level > LogLevelType::Off && *level != LogLevel::NotMentioned &&\n+      (contains_deathtest || contains_deathtest2)) {\n+    bool ok = false;\n+\n+    LogTagType taglist[5] = {LogTag::_deathtest, LogTag::__NO_TAG, LogTag::__NO_TAG,\n+                             LogTag::__NO_TAG, LogTag::__NO_TAG};\n+    assert(!(contains_deathtest && contains_deathtest2), \"Only one or the other, never both\");\n+    if (contains_deathtest2) {\n+      taglist[0] = LogTag::_deathtest2;\n+    }\n+\n+    const LogSelection* selarr = selections.selections();\n+    size_t n = selections.number_of_selections();\n+    for (size_t i = 0; i < n; i++) {\n+      if (selarr[i].consists_of(taglist)) {\n+        ok = true;\n+        break;\n+      }\n+    }\n+    if (!ok) {\n+      \/\/ Wildcard detected, lie to the rest of UL.\n+      *level = LogLevel::Off;\n+    }\n+  }\n+}\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,0 +136,2 @@\n+\n+  DEBUG_ONLY(static void remove_wildcard_deathtests(LogLevelType* level, const LogSelectionList& selections, LogTagSet* ts));\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+  const LogSelection* selections() const { return _selections; }\n+  size_t number_of_selections()  const { return _nselections; }\n+\n","filename":"src\/hotspot\/share\/logging\/logSelectionList.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,0 +53,7 @@\n+\n+        \/\/ For -Xlog:all=debug we expect neither deathtest nor deathtest2 to be logged as they should only be able to be selected explicitly.\n+        ProcessBuilder pb3 =\n+            ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:async\", \"-Xlog:all=debug\", \"--version\");\n+        OutputAnalyzer output3 = new OutputAnalyzer(pb3.start());\n+        output3.shouldHaveExitValue(0);\n+        output3.shouldNotContain(\"Induce a recursive log for testing\");\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/AsyncDeathTest.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}