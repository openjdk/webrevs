{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,18 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Paper;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+\/*\n@@ -26,5 +43,1 @@\n- * @bug 4197377\n- * @bug 4299145\n- * @bug 6358747\n- * @bug 6574633\n- * @summary Page setup dialog settings\n+ * @bug 4197377 4299145 6358747 6574633\n@@ -32,0 +45,3 @@\n+ * @summary Page setup dialog settings\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -34,5 +50,0 @@\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-\n@@ -40,42 +51,67 @@\n-\n-  PrinterJob myPrinterJob;\n-  PageFormat myPageFormat;\n-  Label pw, ph, pglm, pgiw, pgrm, pgtm, pgih, pgbm;\n-  Label myWidthLabel;\n-  Label myHeightLabel;\n-  Label myImageableXLabel;\n-  Label myImageableYLabel;\n-  Label myImageableRightLabel;\n-  Label myImageableBottomLabel;\n-  Label myImageableWidthLabel;\n-  Label myImageableHeightLabel;\n-  Label myOrientationLabel;\n-  Checkbox reverseCB;\n-  boolean alpha = false;\n-  boolean reverse = false;\n-\n-  protected void displayPageFormatAttributes() {\n-\n-    myWidthLabel.setText(\"Format Width = \" + (float)myPageFormat.getWidth());\n-    myHeightLabel.setText(\"Format Height = \" + (float)myPageFormat.getHeight());\n-    myImageableXLabel.setText\n-        (\"Format Left Margin = \" + (float)myPageFormat.getImageableX());\n-    myImageableRightLabel.setText\n-        (\"Format Right Margin = \" + (float)(myPageFormat.getWidth() -\n-        (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n-    myImageableWidthLabel.setText\n-        (\"Format ImageableWidth = \" + (float)myPageFormat.getImageableWidth());\n-    myImageableYLabel.setText\n-        (\"Format Top Margin = \" + (float)myPageFormat.getImageableY());\n-    myImageableBottomLabel.setText\n-        (\"Format Bottom Margin = \" + (float)(myPageFormat.getHeight() -\n-        (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n-    myImageableHeightLabel.setText\n-        (\"Format ImageableHeight = \" + (float)myPageFormat.getImageableHeight());\n-    int o = myPageFormat.getOrientation();\n-    if (o == PageFormat.LANDSCAPE && reverse) {\n-        o = PageFormat.REVERSE_LANDSCAPE;\n-        myPageFormat.setOrientation(PageFormat.REVERSE_LANDSCAPE);\n-    } else if (o == PageFormat.REVERSE_LANDSCAPE && !reverse) {\n-        o = PageFormat.LANDSCAPE;\n-        myPageFormat.setOrientation(PageFormat.LANDSCAPE);\n+    PrinterJob myPrinterJob;\n+    PageFormat myPageFormat;\n+    Label pw, ph, pglm, pgiw, pgrm, pgtm, pgih, pgbm;\n+    Label myWidthLabel;\n+    Label myHeightLabel;\n+    Label myImageableXLabel;\n+    Label myImageableYLabel;\n+    Label myImageableRightLabel;\n+    Label myImageableBottomLabel;\n+    Label myImageableWidthLabel;\n+    Label myImageableHeightLabel;\n+    Label myOrientationLabel;\n+    Checkbox reverseCB;\n+    boolean alpha = false;\n+    boolean reverse = false;\n+\n+    private static final String INSTRUCTIONS =\n+            \" This test is very flexible and requires much interaction.\\n\" +\n+            \" If the platform print dialog supports it, adjust orientation\\n\" +\n+            \" and margins and print pages and compare the results with the request.\";\n+\n+    protected void displayPageFormatAttributes() {\n+        myWidthLabel.setText(\"Format Width = \" + myPageFormat.getWidth());\n+        myHeightLabel.setText(\"Format Height = \" + myPageFormat.getHeight());\n+        myImageableXLabel.setText(\"Format Left Margin = \"\n+                + myPageFormat.getImageableX());\n+        myImageableRightLabel.setText(\"Format Right Margin = \"\n+                + (myPageFormat.getWidth()\n+                        - (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n+        myImageableWidthLabel.setText(\"Format ImageableWidth = \"\n+                + myPageFormat.getImageableWidth());\n+        myImageableYLabel.setText(\"Format Top Margin = \"\n+                + myPageFormat.getImageableY());\n+        myImageableBottomLabel.setText(\"Format Bottom Margin = \"\n+                + (myPageFormat.getHeight()\n+                        - (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n+        myImageableHeightLabel.setText(\"Format ImageableHeight = \"\n+                + myPageFormat.getImageableHeight());\n+        int o = myPageFormat.getOrientation();\n+        if (o == PageFormat.LANDSCAPE && reverse) {\n+            o = PageFormat.REVERSE_LANDSCAPE;\n+            myPageFormat.setOrientation(PageFormat.REVERSE_LANDSCAPE);\n+        } else if (o == PageFormat.REVERSE_LANDSCAPE && !reverse) {\n+            o = PageFormat.LANDSCAPE;\n+            myPageFormat.setOrientation(PageFormat.LANDSCAPE);\n+        }\n+        myOrientationLabel.setText\n+                (\"Format Orientation = \" +\n+                        (switch (o) {\n+                            case PageFormat.PORTRAIT -> \"PORTRAIT\";\n+                            case PageFormat.LANDSCAPE -> \"LANDSCAPE\";\n+                            case PageFormat.REVERSE_LANDSCAPE -> \"REVERSE_LANDSCAPE\";\n+                            default -> \"<invalid>\";\n+                        }));\n+        Paper p = myPageFormat.getPaper();\n+        pw.setText(\"Paper Width = \" + p.getWidth());\n+        ph.setText(\"Paper Height = \" + p.getHeight());\n+        pglm.setText(\"Paper Left Margin = \" + p.getImageableX());\n+        pgiw.setText(\"Paper Imageable Width = \" + p.getImageableWidth());\n+        pgrm.setText(\"Paper Right Margin = \"\n+                + (p.getWidth()\n+                        - (p.getImageableX() + p.getImageableWidth())));\n+        pgtm.setText(\"Paper Top Margin = \" + p.getImageableY());\n+        pgih.setText(\"Paper Imageable Height = \" + p.getImageableHeight());\n+        pgbm.setText(\"Paper Bottom Margin = \"\n+                + (p.getHeight()\n+                        - (p.getImageableY() + p.getImageableHeight())));\n@@ -83,18 +119,0 @@\n-    myOrientationLabel.setText\n-        (\"Format Orientation = \" +\n-                (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n-                 o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n-                 o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n-                 \"<invalid>\"));\n-    Paper p = myPageFormat.getPaper();\n-    pw.setText(\"Paper Width = \" + (float)p.getWidth());\n-    ph.setText(\"Paper Height = \" + (float)p.getHeight());\n-    pglm.setText(\"Paper Left Margin = \" + (float)p.getImageableX());\n-    pgiw.setText(\"Paper Imageable Width = \" + (float)p.getImageableWidth());\n-    pgrm.setText(\"Paper Right Margin = \" +\n-         (float)(p.getWidth() - (p.getImageableX()+p.getImageableWidth())));\n-    pgtm.setText(\"Paper Top Margin = \" + (float)p.getImageableY());\n-    pgih.setText(\"Paper Imageable Height = \" + (float)p.getImageableHeight());\n-    pgbm.setText(\"Paper Bottom Margin = \" +\n-       (float)(p.getHeight() - (p.getImageableY()+p.getImageableHeight())));\n-  }\n@@ -102,38 +120,37 @@\n-  public PageSetupDialog() {\n-    super (\"Page Dialog Test\");\n-    myPrinterJob = PrinterJob.getPrinterJob();\n-    myPageFormat = new PageFormat();\n-    Paper p = new Paper();\n-    double margin = 1.5*72;\n-    p.setImageableArea(margin, margin,\n-                       p.getWidth()-2*margin, p.getHeight()-2*margin);\n-    myPageFormat.setPaper(p);\n-    Panel c = new Panel();\n-    c.setLayout (new GridLayout (9, 2, 0, 0));\n-    c.add (reverseCB = new Checkbox(\"reverse if landscape\"));\n-    c.add (myOrientationLabel = new Label());\n-    c.add (myWidthLabel = new Label());\n-    c.add (pw = new Label());\n-    c.add (myImageableXLabel = new Label());\n-    c.add (pglm = new Label());\n-    c.add (myImageableRightLabel = new Label());\n-    c.add (pgrm = new Label());\n-    c.add (myImageableWidthLabel = new Label());\n-    c.add (pgiw = new Label());\n-    c.add (myHeightLabel = new Label());\n-    c.add (ph = new Label());\n-    c.add (myImageableYLabel = new Label());\n-    c.add (pgtm = new Label());\n-    c.add (myImageableHeightLabel = new Label());\n-    c.add (pgih = new Label());\n-    c.add (myImageableBottomLabel = new Label());\n-    c.add (pgbm = new Label());\n-\n-    reverseCB.addItemListener(new ItemListener() {\n-                public void itemStateChanged(ItemEvent e) {\n-                       reverse = e.getStateChange() == ItemEvent.SELECTED;\n-                       int o = myPageFormat.getOrientation();\n-                       if (o == PageFormat.LANDSCAPE ||\n-                           o == PageFormat.REVERSE_LANDSCAPE) {\n-                           displayPageFormatAttributes();\n-                       }\n+    public PageSetupDialog() {\n+        super(\"Page Dialog Test\");\n+        myPrinterJob = PrinterJob.getPrinterJob();\n+        myPageFormat = new PageFormat();\n+        Paper p = new Paper();\n+        double margin = 1.5 * 72;\n+        p.setImageableArea(margin, margin,\n+                p.getWidth() - 2 * margin, p.getHeight() - 2 * margin);\n+        myPageFormat.setPaper(p);\n+        Panel c = new Panel();\n+        c.setLayout(new GridLayout(9, 2, 0, 0));\n+        c.add(reverseCB = new Checkbox(\"reverse if landscape\"));\n+        c.add(myOrientationLabel = new Label());\n+        c.add(myWidthLabel = new Label());\n+        c.add(pw = new Label());\n+        c.add(myImageableXLabel = new Label());\n+        c.add(pglm = new Label());\n+        c.add(myImageableRightLabel = new Label());\n+        c.add(pgrm = new Label());\n+        c.add(myImageableWidthLabel = new Label());\n+        c.add(pgiw = new Label());\n+        c.add(myHeightLabel = new Label());\n+        c.add(ph = new Label());\n+        c.add(myImageableYLabel = new Label());\n+        c.add(pgtm = new Label());\n+        c.add(myImageableHeightLabel = new Label());\n+        c.add(pgih = new Label());\n+        c.add(myImageableBottomLabel = new Label());\n+        c.add(pgbm = new Label());\n+\n+        reverseCB.addItemListener(new ItemListener() {\n+            public void itemStateChanged(ItemEvent e) {\n+                reverse = e.getStateChange() == ItemEvent.SELECTED;\n+                int o = myPageFormat.getOrientation();\n+                if (o == PageFormat.LANDSCAPE ||\n+                        o == PageFormat.REVERSE_LANDSCAPE) {\n+                    displayPageFormatAttributes();\n@@ -141,10 +158,21 @@\n-    });\n-\n-    add(\"Center\", c);\n-    displayPageFormatAttributes();\n-    Panel panel = new Panel();\n-    Button pageButton = new Button (\"Page Setup...\");\n-    pageButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                        myPageFormat = myPrinterJob.pageDialog (myPageFormat);\n-                        displayPageFormatAttributes();\n+            }\n+        });\n+\n+        add(\"Center\", c);\n+        displayPageFormatAttributes();\n+        Panel panel = new Panel();\n+        Button pageButton = new Button(\"Page Setup...\");\n+        pageButton.addActionListener(e -> {\n+            myPageFormat = myPrinterJob.pageDialog(myPageFormat);\n+            displayPageFormatAttributes();\n+        });\n+        Button printButton = new Button(\"Print ...\");\n+        printButton.addActionListener(e -> {\n+            if (myPrinterJob.printDialog()) {\n+                myPrinterJob.setPrintable(PageSetupDialog.this, myPageFormat);\n+                alpha = false;\n+                try {\n+                    myPrinterJob.print();\n+                } catch (PrinterException pe) {\n+                    pe.printStackTrace();\n+                    PassFailJFrame.forceFail(\"Test failed because of PrinterException\");\n@@ -152,13 +180,12 @@\n-    });\n-    Button printButton = new Button (\"Print ...\");\n-    printButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                    try {\n-                         if (myPrinterJob.printDialog()) {\n-                             myPrinterJob.setPrintable(PageSetupDialog.this,\n-                                                       myPageFormat);\n-                             alpha = false;\n-                             myPrinterJob.print();\n-                    }\n-                    } catch (PrinterException pe ) {\n-                    }\n+            }\n+        });\n+        Button printAlphaButton = new Button(\"Print w\/Alpha...\");\n+        printAlphaButton.addActionListener(e -> {\n+            if (myPrinterJob.printDialog()) {\n+                myPrinterJob.setPrintable(PageSetupDialog.this, myPageFormat);\n+                alpha = true;\n+                try {\n+                    myPrinterJob.print();\n+                } catch (PrinterException pe) {\n+                    pe.printStackTrace();\n+                    PassFailJFrame.forceFail(\"Test failed because of PrinterException\");\n@@ -166,84 +193,7 @@\n-    });\n-    Button printAlphaButton = new Button (\"Print w\/Alpha...\");\n-    printAlphaButton.addActionListener(new ActionListener() {\n-           public void actionPerformed (ActionEvent e) {\n-                    try {\n-                         if (myPrinterJob.printDialog()) {\n-                             myPrinterJob.setPrintable(PageSetupDialog.this,\n-                                                       myPageFormat);\n-                             alpha = true;\n-                             myPrinterJob.print();\n-                    }\n-                    } catch (PrinterException pe ) {\n-                    }\n-           }\n-    });\n-    panel.add (pageButton);\n-    panel.add (printButton);\n-    panel.add (printAlphaButton);\n-    add(\"South\", panel);\n-    addWindowListener (new WindowAdapter() {\n-         public void windowClosing (WindowEvent e) {\n-            dispose();\n-            System.exit (0);\n-         }\n-\n-      });\n-      \/\/setSize (280, 550);\n-      pack();\n-      setVisible (true);\n-  }\n-\n-  public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n-\n-     if (pageIndex > 0) {\n-        return Printable.NO_SUCH_PAGE;\n-     }\n-\n-     Graphics2D g2d = (Graphics2D)graphics;\n-     g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n-     g2d.drawString(\"ORIGIN(\"+pageFormat.getImageableX()+\",\"+\n-                             pageFormat.getImageableY()+\")\", 20, 20);\n-     g2d.drawString(\"X THIS WAY\", 200, 50);\n-     g2d.drawString(\"Y THIS WAY\", 60 , 200);\n-     g2d.drawString(\"Graphics is \" + g2d.getClass().getName(), 100, 100);\n-     g2d.drawRect(0,0,(int)pageFormat.getImageableWidth(),\n-                      (int)pageFormat.getImageableHeight());\n-     if (alpha) {\n-       g2d.setColor(new Color(0,0,255,192));\n-     } else {\n-        g2d.setColor(Color.blue);\n-     }\n-     g2d.drawRect(1,1,(int)pageFormat.getImageableWidth()-2,\n-                      (int)pageFormat.getImageableHeight()-2);\n-\n-     return  Printable.PAGE_EXISTS;\n-  }\n-\n-  public static void main( String[] args) {\n-\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test is very flexible and requires much interaction.\",\n-         \"If the platform print dialog supports it, adjust orientation\",\n-         \"and margins and print pages and compare the results with the\",\n-         \"request.\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-     new PageSetupDialog();\n-  }\n-\n-}\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+            }\n+        });\n+        panel.add(pageButton);\n+        panel.add(printButton);\n+        panel.add(printAlphaButton);\n+        add(\"South\", panel);\n+        pack();\n@@ -252,7 +202,26 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    @Override\n+    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n+        if (pageIndex > 0) {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n+\n+        Graphics2D g2d = (Graphics2D) graphics;\n+        g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n+        g2d.drawString(\"ORIGIN(\" + pageFormat.getImageableX() + \",\" +\n+                pageFormat.getImageableY() + \")\", 20, 20);\n+        g2d.drawString(\"X THIS WAY\", 200, 50);\n+        g2d.drawString(\"Y THIS WAY\", 60, 200);\n+        g2d.drawString(\"Graphics is \" + g2d.getClass().getName(), 100, 100);\n+        g2d.drawRect(0, 0,\n+                (int) pageFormat.getImageableWidth(),\n+                (int) pageFormat.getImageableHeight());\n+        if (alpha) {\n+            g2d.setColor(new Color(0, 0, 255, 192));\n+        } else {\n+            g2d.setColor(Color.blue);\n+        }\n+        g2d.drawRect(1, 1,\n+                (int) pageFormat.getImageableWidth() - 2,\n+                (int) pageFormat.getImageableHeight() - 2);\n+\n+        return Printable.PAGE_EXISTS;\n@@ -261,4 +230,13 @@\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n+    public static void main(String[] args) throws Exception {\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new RuntimeException(\"Printer not configured or available.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(10)\n+                .testUI(PageSetupDialog::new)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n@@ -266,88 +244,1 @@\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PageFormat\/PageSetupDialog.java","additions":207,"deletions":316,"binary":false,"changes":523,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,10 @@\n-\/**\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterAbortException;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+\/*\n@@ -27,1 +36,0 @@\n- * @summary PrinterJob not cancelled when PrinterJob.cancel() is used\n@@ -29,0 +37,3 @@\n+ * @summary PrinterJob not cancelled when PrinterJob.cancel() is used\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -31,4 +42,0 @@\n-\n-import java.awt.* ;\n-import java.awt.print.* ;\n-\n@@ -36,55 +43,28 @@\n-\n-  PrinterJob pj ;\n-  boolean okayed;\n-\n-  public static void main ( String args[] ) {\n-\n-     String[] instructions =\n-        {\n-         \"Test that print job cancellation works.\",\n-         \"You must have a printer available to perform this test.\",\n-         \"This test silently starts a print job and while the job is\",\n-         \"still being printed, cancels the print job\",\n-         \"You should see a message on System.out that the job\",\n-         \"was properly cancelled.\",\n-         \"You will need to kill the application manually since regression\",\n-         \"tests apparently aren't supposed to call System.exit()\"\n-       };\n-\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-      PrinterJobCancel pjc = new PrinterJobCancel() ;\n-\n-      if (pjc.okayed) {\n-          pjc.start();\n-          try {\n-               Thread.sleep(5000);\n-               pjc.pj.cancel();\n-          } catch ( InterruptedException e ) {\n-          }\n-      }\n-  }\n-\n-  public PrinterJobCancel() {\n-\n-    pj = PrinterJob.getPrinterJob() ;\n-    pj.setPrintable(this);\n-    okayed = pj.printDialog();\n-  }\n-\n-  public void run() {\n-    boolean cancelWorked = false;\n-    try {\n-        pj.print() ;\n-    }\n-    catch ( PrinterAbortException paex ) {\n-      cancelWorked = true;\n-      System.out.println(\"Job was properly cancelled and we\");\n-      System.out.println(\"got the expected PrintAbortException\");\n-    }\n-    catch ( PrinterException prex ) {\n-      System.out.println(\"This is wrong .. we shouldn't be here\");\n-      System.out.println(\"Looks like a test failure\");\n-      prex.printStackTrace() ;\n-      \/\/throw prex;\n+    private final PrinterJob pj;\n+    private final boolean okayed;\n+    private static final String INSTRUCTIONS =\n+            \"Test that print job cancellation works.\\n\\n\" +\n+            \"This test starts after clicking OK \/ Print button.\\n\" +\n+            \"While the print job is in progress, the test automatically cancels it.\\n\" +\n+            \"The test will complete automatically.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new RuntimeException(\"Printer not configured or available.\");\n+        }\n+\n+        PassFailJFrame passFailJFrame = PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build();\n+\n+        PrinterJobCancel pjc = new PrinterJobCancel();\n+        if (pjc.okayed) {\n+            pjc.start();\n+            Thread.sleep(5000);\n+            pjc.pj.cancel();\n+        } else {\n+            PassFailJFrame.forceFail(\"User cancelled printing\");\n+        }\n+        passFailJFrame.awaitAndCheck();\n@@ -92,33 +72,0 @@\n-    finally {\n-       System.out.println(\"DONE PRINTING\");\n-       if (!cancelWorked) {\n-           System.out.println(\"Looks like the test failed - we didn't get\");\n-           System.out.println(\"the expected PrintAbortException \");\n-       }\n-    }\n-    \/\/System.exit(0);\n-  }\n-\n-  public int print(Graphics g, PageFormat pagef, int pidx) {\n-\n-     if (pidx > 5) {\n-        return( Printable.NO_SUCH_PAGE ) ;\n-     }\n-\n-     Graphics2D g2d = (Graphics2D)g;\n-     g2d.translate(pagef.getImageableX(), pagef.getImageableY());\n-     g2d.setColor(Color.black);\n-\n-     g2d.drawString((\"This is page\"+(pidx+1)), 60 , 80);\n-     \/\/ Need to slow things down a bit .. important not to try this\n-     \/\/ on the event dispathching thread of course.\n-     try {\n-          Thread.sleep(2000);\n-     } catch (InterruptedException e) {\n-     }\n-\n-     return ( Printable.PAGE_EXISTS );\n-  }\n-\n-}\n-\n@@ -126,9 +73,4 @@\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    public PrinterJobCancel() {\n+        pj = PrinterJob.getPrinterJob();\n+        pj.setPrintable(this);\n+        okayed = pj.printDialog();\n@@ -137,7 +79,18 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    public void run() {\n+        boolean cancelWorked = false;\n+        try {\n+            pj.print();\n+        } catch (PrinterAbortException paex) {\n+            cancelWorked = true;\n+            System.out.println(\"Job was properly cancelled and we\");\n+            System.out.println(\"got the expected PrintAbortException\");\n+            PassFailJFrame.forcePass();\n+        } catch (PrinterException prex) {\n+            prex.printStackTrace();\n+            PassFailJFrame.forceFail(\"Unexpected PrinterException caught:\" + prex.getMessage());\n+        } finally {\n+            System.out.println(\"DONE PRINTING\");\n+            if (!cancelWorked) {\n+                PassFailJFrame.forceFail(\"Didn't get the expected PrintAbortException\");\n+            }\n+        }\n@@ -146,4 +99,18 @@\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n+    @Override\n+    public int print(Graphics g, PageFormat pagef, int pidx) {\n+        if (pidx > 5) {\n+            return (Printable.NO_SUCH_PAGE);\n+        }\n+\n+        Graphics2D g2d = (Graphics2D) g;\n+        g2d.translate(pagef.getImageableX(), pagef.getImageableY());\n+        g2d.setColor(Color.black);\n+        g2d.drawString((\"This is page\" + (pidx + 1)), 60, 80);\n+        \/\/ Need to slow things down a bit .. important not to try this\n+        \/\/ on the event dispatching thread of course.\n+        try {\n+            Thread.sleep(2000);\n+        } catch (InterruptedException ignored) {\n+        }\n+\n+        return Printable.PAGE_EXISTS;\n@@ -151,88 +118,1 @@\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/Cancel\/PrinterJobCancel.java","additions":83,"deletions":203,"binary":false,"changes":286,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,10 @@\n-\/**\n- *\n- * test\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterJob;\n+\n+\/*\n+ * @test\n@@ -29,0 +36,2 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -32,5 +41,0 @@\n-\n-import java.awt.*;\n-import java.awt.print.*;\n-import java.awt.GraphicsEnvironment;\n-\n@@ -38,0 +42,2 @@\n+    private static final int LINE_HEIGHT = 18;\n+    private static final int FONT_SIZE = 14;\n@@ -39,6 +45,5 @@\n-    static Font[] allFonts;\n-    int fontNum = 0;\n-    int startNum = 0;\n-    int lineHeight = 18;\n-    boolean done = false;\n-    int thisPage = 0;\n+    private final Font[] allFonts =\n+            GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();\n+    private int fontNum = 0;\n+    private int startNum = 0;\n+    private int thisPage = 0;\n@@ -46,0 +51,5 @@\n+    private static final String INSTRUCTIONS =\n+            \"This bug is system dependent and is not always reproducible.\\n\" +\n+            \"Font names will be printed in two columns.\\n\" +\n+            \"First column non synthesised and second column with synthesised italic.\\n\" +\n+            \"A passing test will have all text printed with correct font style.\";\n@@ -48,0 +58,3 @@\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new RuntimeException(\"Printer not configured or available.\");\n+        }\n@@ -49,14 +62,6 @@\n-        String[] instructions =\n-        {\n-            \"You must have a printer available to perform this test and should use Win 98.\",\n-            \"This bug is system dependent and is not always reproducible.\",\n-            \" \",\n-            \"A passing test will have all text printed with correct font style.\",\n-        };\n-\n-        Sysout.createDialog( );\n-        Sysout.printInstructions( instructions );\n-\n-        GraphicsEnvironment ge =\n-            GraphicsEnvironment.getLocalGraphicsEnvironment();\n-        allFonts = ge.getAllFonts();\n+        PassFailJFrame passFailJFrame = PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(10)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build();\n@@ -67,1 +72,1 @@\n-           pj.print();\n+            pj.print();\n@@ -69,0 +74,1 @@\n+        passFailJFrame.awaitAndCheck();\n@@ -71,0 +77,1 @@\n+    @Override\n@@ -72,1 +79,0 @@\n-\n@@ -82,1 +88,0 @@\n-        g.setColor(Color.black);\n@@ -84,4 +89,3 @@\n-        int hgt = (int)pf.getImageableHeight();\n-        int fontsPerPage = hgt\/lineHeight;\n-        int x = (int)pf.getImageableX()+10;\n-        int y = (int)pf.getImageableY()+lineHeight;\n+        int fontsPerPage = (int) pf.getImageableHeight() \/ LINE_HEIGHT - 1;\n+        int x = (int) pf.getImageableX() + 10;\n+        int y = (int) pf.getImageableY() + LINE_HEIGHT;\n@@ -89,0 +93,1 @@\n+        g.setColor(Color.black);\n@@ -90,1 +95,2 @@\n-            Font f = allFonts[fontNum].deriveFont(Font.PLAIN, 16);\n+            Font f = allFonts[fontNum].deriveFont(Font.PLAIN, FONT_SIZE);\n+            Font fi = allFonts[fontNum].deriveFont(Font.ITALIC, FONT_SIZE);\n@@ -93,1 +99,3 @@\n-            y+= lineHeight;\n+            g.setFont(fi);\n+            g.drawString(f.getFontName(), (int) (x + pf.getImageableWidth() \/ 2), y);\n+            y += LINE_HEIGHT;\n@@ -102,114 +110,0 @@\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintAllFonts.java","additions":46,"deletions":152,"binary":false,"changes":198,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,19 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Paper;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import javax.swing.JOptionPane;\n+\n+\/*\n@@ -29,0 +47,2 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -31,5 +51,0 @@\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-\n@@ -37,282 +52,15 @@\n-\n-PrinterJob myPrinterJob;\n-PageFormat myPageFormat;\n-Label pw, ph, pglm, pgrm, pgiw, pgih, pgtm, pgbm;\n-TextField tpw, tph, tpglm, tpgtm, tpgiw, tpgih;\n-Label myWidthLabel;\n-Label myHeightLabel;\n-Label myImageableXLabel;\n-Label myImageableYLabel;\n-Label myImageableRightLabel;\n-Label myImageableBottomLabel;\n-Label myImageableWidthLabel;\n-Label myImageableHeightLabel;\n-Label myOrientationLabel;\n-\n-  protected void displayPageFormatAttributes() {\n-    myWidthLabel.setText (\"Format Width = \" + drnd(myPageFormat.getWidth()));\n-    myHeightLabel.setText (\"Format Height = \" + drnd(myPageFormat.getHeight()));\n-    myImageableXLabel.setText\n-        (\"Format Left Margin = \" + drnd(myPageFormat.getImageableX()));\n-    myImageableRightLabel.setText\n-        (\"Format Right Margin = \" + drnd(myPageFormat.getWidth() -\n-        (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n-    myImageableWidthLabel.setText\n-        (\"Format ImageableWidth = \" + drnd(myPageFormat.getImageableWidth()));\n-    myImageableYLabel.setText\n-        (\"Format Top Margin = \" + drnd(myPageFormat.getImageableY()));\n-    myImageableBottomLabel.setText\n-        (\"Format Bottom Margin = \" + drnd(myPageFormat.getHeight() -\n-        (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n-    myImageableHeightLabel.setText\n-        (\"Format ImageableHeight = \" + drnd(myPageFormat.getImageableHeight()));\n-    int o = myPageFormat.getOrientation();\n-    myOrientationLabel.setText\n-        (\"Format Orientation = \" +\n-                (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n-                 o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n-                 o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n-                 \"<invalid>\"));\n-    Paper p = myPageFormat.getPaper();\n-    pw.setText(\"Paper Width = \" + drnd(p.getWidth()));\n-    ph.setText(\"Paper Height = \" + drnd(p.getHeight()));\n-    pglm.setText(\"Paper Left Margin = \" + drnd(p.getImageableX()));\n-    pgiw.setText(\"Paper Imageable Width = \" + drnd(p.getImageableWidth()));\n-    pgih.setText(\"Paper Imageable Height = \" + drnd(p.getImageableHeight()));\n-\n-    pgrm.setText(\"Paper Right Margin = \" +\n-         drnd(p.getWidth() - (p.getImageableX()+p.getImageableWidth())));\n-    pgtm.setText(\"Paper Top Margin = \" + drnd(p.getImageableY()));\n-    pgbm.setText(\"Paper Bottom Margin = \" +\n-       drnd(p.getHeight() - (p.getImageableY()+p.getImageableHeight())));\n-  }\n-\n-  static String drnd(double d) {\n-      d = d * 10.0 + 0.5;\n-      d = Math.floor(d) \/10.0;\n-      String ds = Double.toString(d);\n-      int decimal_pos = ds.indexOf(\".\");\n-      int len = ds.length();\n-      if (len > decimal_pos+2) {\n-          return ds.substring(0, decimal_pos+2);\n-      } else {\n-          return ds;\n-      }\n-  }\n-\n-  public ValidatePage() {\n-    super (\"Validate Page Test\");\n-    myPrinterJob = PrinterJob.getPrinterJob();\n-    myPageFormat = new PageFormat();\n-    Paper p = new Paper();\n-    p.setSize(28*72, 21.5 * 72);\n-    myPageFormat.setPaper(p);\n-    setLayout(new FlowLayout());\n-    Panel pfp = new Panel();\n-    pfp.setLayout (new GridLayout (9, 1, 0, 0));\n-    pfp.add (myOrientationLabel = new Label());\n-    pfp.add (myWidthLabel = new Label());\n-    pfp.add (myImageableXLabel = new Label());\n-    pfp.add (myImageableRightLabel = new Label());\n-    pfp.add (myImageableWidthLabel = new Label());\n-    pfp.add (myHeightLabel = new Label());\n-    pfp.add (myImageableYLabel = new Label());\n-    pfp.add (myImageableBottomLabel = new Label());\n-    pfp.add (myImageableHeightLabel = new Label());\n-\n-    add(pfp);\n-\n-    Panel pp = new Panel();\n-    pp.setLayout (new GridLayout (8, 1, 0, 0));\n-    pp.add (pw = new Label());\n-    pp.add (pglm = new Label());\n-    pp.add (pgtm = new Label());\n-    pp.add (ph = new Label());\n-    pp.add (pgiw = new Label());\n-    pp.add (pgih = new Label());\n-    pp.add (pgrm = new Label());\n-    pp.add (pgbm = new Label());\n-\n-    add(pp);\n-\n-    Panel epp = new Panel();\n-    epp.setLayout (new GridLayout (6, 2, 0, 0));\n-\n-    epp.add(new Label(\"Page width:\"));\n-    epp.add (tpw = new TextField());\n-    epp.add(new Label(\"Page height:\"));\n-    epp.add (tph = new TextField());\n-    epp.add(new Label(\"Left Margin:\"));\n-    epp.add (tpglm = new TextField());\n-    epp.add(new Label(\"Top margin:\"));\n-    epp.add (tpgtm = new TextField());\n-    epp.add(new Label(\"Imageable Wid:\"));\n-    epp.add (tpgiw = new TextField());\n-    epp.add(new Label(\"Imageable Hgt:\"));\n-    epp.add (tpgih = new TextField());\n-\n-    add(epp);\n-       displayPageFormatAttributes();\n-\n-    Panel panel = new Panel();\n-    Button defButton = new Button (\"Default Page\");\n-    defButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                        myPageFormat = myPrinterJob.defaultPage();\n-                        displayPageFormatAttributes();\n-                }\n-    });\n-\n-    Button pageButton = new Button (\"Page Setup..\");\n-    pageButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                        myPageFormat = myPrinterJob.pageDialog (myPageFormat);\n-                        displayPageFormatAttributes();\n-                }\n-    });\n-    Button printButton = new Button (\"Print\");\n-    printButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                    try {\n-                         \/\/if (myPrinterJob.printDialog()) {\n-                             myPrinterJob.setPrintable(ValidatePage.this,\n-                                                       myPageFormat);\n-                             myPrinterJob.print();\n-                   \/\/ }\n-                    } catch (PrinterException pe ) {\n-                    }\n-                }\n-    });\n-\n-    Button chooseButton = new Button (\"Printer..\");\n-    chooseButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                            myPrinterJob.printDialog();\n-                }\n-    });\n-\n-    Button validateButton = new Button (\"Validate Page\");\n-    validateButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                        myPageFormat = myPrinterJob.validatePage(myPageFormat);\n-                        displayPageFormatAttributes();\n-                }\n-    });\n-    Button setButton = new Button (\"Set Paper\");\n-    setButton.addActionListener(new ActionListener() {\n-                public void actionPerformed (ActionEvent e) {\n-                  try {\n-                      Paper p = new Paper();\n-                      double pwid = Double.parseDouble(tpw.getText());\n-                      double phgt = Double.parseDouble(tph.getText());\n-                      double pimx = Double.parseDouble(tpglm.getText());\n-                      double pimy = Double.parseDouble(tpgtm.getText());\n-                      double pimwid = Double.parseDouble(tpgiw.getText());\n-                      double pimhgt = Double.parseDouble(tpgih.getText());\n-                      p.setSize(pwid, phgt);\n-                      p.setImageableArea(pimx, pimy, pimwid, pimhgt);\n-                      myPageFormat.setPaper(p);\n-                            displayPageFormatAttributes();\n-                  } catch (NumberFormatException nfe) {\n-                  }\n-                }\n-    });\n-    panel.add (setButton);\n-    panel.add (defButton);\n-    panel.add (pageButton);\n-    panel.add (chooseButton);\n-    panel.add (validateButton);\n-    panel.add (printButton);\n-    add(panel);\n-    TextArea ta = new TextArea(7, 60);\n-    String ls = System.getProperty(\"line.Separator\", \"\\n\");\n-    ta.setText(\n-        \"When validating a page, the process is 1st to find the closest matching \" + ls +\n-        \"paper size, next to make sure the requested imageable area fits within \" + ls +\n-        \"the printer's imageable area for that paper size. Finally the top and \" + ls +\n-        \"left margins will be shrunk if they are too great for the adjusted \" + ls +\n-        \"imageable area to fit at that position. They will shrink by the minimum\" + ls +\n-        \"needed to accomodate the imageable area.\"+ls+ls+\n-        \"To test 6229507, put the minimum margins (all 0s) in Page Setup dialog.\"+ls+\n-        \"Compare Imageable width, height, and margins of portrait against landscape.\");\n-    ta.setEditable(false);\n-    add(ta);\n-\n-    addWindowListener (new WindowAdapter() {\n-         public void windowClosing (WindowEvent e) {\n-            dispose();\n-            System.exit (0);\n-         }\n-\n-      });\n-      setSize (500, 630);\n-      setVisible (true);\n-  }\n-\n-  public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n-\n-     if (pageIndex > 0) {\n-        return Printable.NO_SUCH_PAGE;\n-     }\n-\n-     Graphics2D g2d = (Graphics2D)graphics;\n-\n-    int o = pageFormat.getOrientation();\n-\n-     System.out.println(\"Format Orientation = \" +\n-                (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n-                 o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n-                 o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n-                 \"<invalid>\"));\n-     System.out.println(g2d.getTransform());\n-     System.out.println(\"ix=\"+pageFormat.getImageableX()+\n-                       \" iy=\"+pageFormat.getImageableY());\n-     g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n-     g2d.drawString(\"ORIGIN\", 20, 20);\n-     g2d.drawString(\"X THIS WAY\", 200, 50);\n-     g2d.drawString(\"Y THIS WAY\", 60 , 200);\n-     g2d.drawRect(0,0,(int)pageFormat.getImageableWidth(),\n-                      (int)pageFormat.getImageableHeight());\n-     g2d.setColor(Color.blue);\n-     g2d.drawRect(1,1,(int)pageFormat.getImageableWidth()-2,\n-                      (int)pageFormat.getImageableHeight()-2);\n-\n-     return  Printable.PAGE_EXISTS;\n-  }\n-\n-  public static void main( String[] args) {\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test is very flexible and requires much interaction.\",\n-         \"There are several buttons.\",\n-         \"Set Paper: if all fields are valid numbers it sets the Paper object.\",\n-         \"This is used to create arbitrary nonsensical paper sizes to help\",\n-         \"test validatePage.\",\n-         \"Default Page: sets a default page. This should always be valid.\",\n-         \"Page Setup: brings up the page dialog. You must OK this dialog\",\n-         \"for it to have any effect. You can use this to set different size,\",\n-         \"orientation and margins - which of course affect imageable area.\",\n-         \"Printer: Used to set the current printer. Useful because current\",\n-         \"printer affects the choice of paper sizes available.\",\n-         \"You must OK this dialog for it to have any effect.\",\n-         \"Validate Page:\",\n-         \"The most important button in the test. By setting nonsensical\",\n-         \"or valid papers with varying margins etc, this should always find\",\n-         \"the closest\",\n-         \"match within the limits of what is possible on the current printer.\",\n-         \"Print: to the current printer. Not vital for this test.\",\n-         \"request.\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-     new ValidatePage();\n-  }\n-\n-}\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n+    PrinterJob myPrinterJob;\n+    PageFormat myPageFormat;\n+    Label pw, ph, pglm, pgrm, pgiw, pgih, pgtm, pgbm;\n+    TextField tpw, tph, tpglm, tpgtm, tpgiw, tpgih;\n+    Label myWidthLabel;\n+    Label myHeightLabel;\n+    Label myImageableXLabel;\n+    Label myImageableYLabel;\n+    Label myImageableRightLabel;\n+    Label myImageableBottomLabel;\n+    Label myImageableWidthLabel;\n+    Label myImageableHeightLabel;\n+    Label myOrientationLabel;\n+\n+    private static String GetOrientation(int o)\n@@ -320,4 +68,6 @@\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+        return switch (o) {\n+            case PageFormat.PORTRAIT -> \"PORTRAIT\";\n+            case PageFormat.LANDSCAPE -> \"LANDSCAPE\";\n+            case PageFormat.REVERSE_LANDSCAPE -> \"REVERSE_LANDSCAPE\";\n+            default -> \"<invalid>\";\n+        };\n@@ -326,7 +76,32 @@\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n+    private void displayPageFormatAttributes() {\n+        myWidthLabel.setText(\"Format Width = \" + drnd(myPageFormat.getWidth()));\n+        myHeightLabel.setText(\"Format Height = \" + drnd(myPageFormat.getHeight()));\n+        myImageableXLabel.setText(\"Format Left Margin = \" + drnd(myPageFormat.getImageableX()));\n+        myImageableRightLabel.setText(\"Format Right Margin = \"\n+                + drnd(myPageFormat.getWidth()\n+                        - (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n+        myImageableWidthLabel.setText(\"Format ImageableWidth = \"\n+                + drnd(myPageFormat.getImageableWidth()));\n+        myImageableYLabel.setText(\"Format Top Margin = \"\n+                + drnd(myPageFormat.getImageableY()));\n+        myImageableBottomLabel.setText(\"Format Bottom Margin = \"\n+                + drnd(myPageFormat.getHeight()\n+                        - (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n+        myImageableHeightLabel.setText(\"Format ImageableHeight = \"\n+                + drnd(myPageFormat.getImageableHeight()));\n+        myOrientationLabel.setText(\"Format Orientation = \"\n+                + GetOrientation(myPageFormat.getOrientation()));\n+        Paper p = myPageFormat.getPaper();\n+        pw.setText(\"Paper Width = \" + drnd(p.getWidth()));\n+        ph.setText(\"Paper Height = \" + drnd(p.getHeight()));\n+        pglm.setText(\"Paper Left Margin = \" + drnd(p.getImageableX()));\n+        pgiw.setText(\"Paper Imageable Width = \" + drnd(p.getImageableWidth()));\n+        pgih.setText(\"Paper Imageable Height = \" + drnd(p.getImageableHeight()));\n+\n+        pgrm.setText(\"Paper Right Margin = \"\n+                + drnd(p.getWidth()\n+                        - (p.getImageableX() + p.getImageableWidth())));\n+        pgtm.setText(\"Paper Top Margin = \" + drnd(p.getImageableY()));\n+        pgbm.setText(\"Paper Bottom Margin = \"\n+                + drnd(p.getHeight()\n+                        - (p.getImageableY() + p.getImageableHeight())));\n@@ -335,4 +110,2 @@\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n+    static String drnd(double d) {\n+        return String.format(\"%.2f\", d);\n@@ -341,4 +114,126 @@\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n+    public ValidatePage() {\n+        super(\"Validate Page Test\");\n+        myPrinterJob = PrinterJob.getPrinterJob();\n+        myPageFormat = new PageFormat();\n+        Paper p = new Paper();\n+        p.setSize(28 * 72, 21.5 * 72);\n+        myPageFormat.setPaper(p);\n+        setLayout(new FlowLayout());\n+        Panel pfp = new Panel();\n+        pfp.setLayout(new GridLayout(9, 1, 0, 0));\n+        pfp.add(myOrientationLabel = new Label());\n+        pfp.add(myWidthLabel = new Label());\n+        pfp.add(myImageableXLabel = new Label());\n+        pfp.add(myImageableRightLabel = new Label());\n+        pfp.add(myImageableWidthLabel = new Label());\n+        pfp.add(myHeightLabel = new Label());\n+        pfp.add(myImageableYLabel = new Label());\n+        pfp.add(myImageableBottomLabel = new Label());\n+        pfp.add(myImageableHeightLabel = new Label());\n+\n+        add(pfp);\n+\n+        Panel pp = new Panel();\n+        pp.setLayout(new GridLayout(8, 1, 0, 0));\n+        pp.add(pw = new Label());\n+        pp.add(pglm = new Label());\n+        pp.add(pgtm = new Label());\n+        pp.add(ph = new Label());\n+        pp.add(pgiw = new Label());\n+        pp.add(pgih = new Label());\n+        pp.add(pgrm = new Label());\n+        pp.add(pgbm = new Label());\n+\n+        add(pp);\n+\n+        Panel epp = new Panel();\n+        epp.setLayout(new GridLayout(6, 2, 0, 0));\n+\n+        epp.add(new Label(\"Page width:\"));\n+        epp.add(tpw = new TextField());\n+        epp.add(new Label(\"Page height:\"));\n+        epp.add(tph = new TextField());\n+        epp.add(new Label(\"Left Margin:\"));\n+        epp.add(tpglm = new TextField());\n+        epp.add(new Label(\"Top margin:\"));\n+        epp.add(tpgtm = new TextField());\n+        epp.add(new Label(\"Imageable Wid:\"));\n+        epp.add(tpgiw = new TextField());\n+        epp.add(new Label(\"Imageable Hgt:\"));\n+        epp.add(tpgih = new TextField());\n+\n+        add(epp);\n+        displayPageFormatAttributes();\n+\n+        Panel panel = new Panel();\n+        Button defButton = new Button(\"Default Page\");\n+        defButton.addActionListener(e -> {\n+            myPageFormat = myPrinterJob.defaultPage();\n+            displayPageFormatAttributes();\n+        });\n+\n+        Button pageButton = new Button(\"Page Setup...\");\n+        pageButton.addActionListener(e -> {\n+            myPageFormat = myPrinterJob.pageDialog(myPageFormat);\n+            displayPageFormatAttributes();\n+        });\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(e -> {\n+            try {\n+                myPrinterJob.setPrintable(ValidatePage.this, myPageFormat);\n+                myPrinterJob.print();\n+            } catch (PrinterException pe) {\n+                pe.printStackTrace();\n+                PassFailJFrame.forceFail(\"Test failed because of PrinterException\");\n+            }\n+        });\n+\n+        Button chooseButton = new Button(\"Printer...\");\n+        chooseButton.addActionListener(e -> myPrinterJob.printDialog());\n+\n+        Button validateButton = new Button(\"Validate Page\");\n+        validateButton.addActionListener(e -> {\n+            myPageFormat = myPrinterJob.validatePage(myPageFormat);\n+            displayPageFormatAttributes();\n+        });\n+        Button setButton = new Button(\"Set Paper\");\n+        setButton.addActionListener(e -> {\n+            try {\n+                Paper p1 = new Paper();\n+                double pwid = Double.parseDouble(tpw.getText());\n+                double phgt = Double.parseDouble(tph.getText());\n+                double pimx = Double.parseDouble(tpglm.getText());\n+                double pimy = Double.parseDouble(tpgtm.getText());\n+                double pimwid = Double.parseDouble(tpgiw.getText());\n+                double pimhgt = Double.parseDouble(tpgih.getText());\n+                p1.setSize(pwid, phgt);\n+                p1.setImageableArea(pimx, pimy, pimwid, pimhgt);\n+                myPageFormat.setPaper(p1);\n+                displayPageFormatAttributes();\n+            } catch (NumberFormatException nfe) {\n+                JOptionPane.showMessageDialog(ValidatePage.this,\n+                        \"NumberFormatException occurred\", \"Error\",\n+                        JOptionPane.ERROR_MESSAGE);\n+            }\n+        });\n+        panel.add(setButton);\n+        panel.add(defButton);\n+        panel.add(pageButton);\n+        panel.add(chooseButton);\n+        panel.add(validateButton);\n+        panel.add(printButton);\n+        add(panel);\n+        TextArea ta = new TextArea(10, 45);\n+        ta.setText(\n+                \"When validating a page, the process is 1st to find the closest matching \\n\" +\n+                \"paper size, next to make sure the requested imageable area fits within \\n\" +\n+                \"the printer's imageable area for that paper size. Finally the top and \\n\" +\n+                \"left margins will be shrunk if they are too great for the adjusted \\n\" +\n+                \"imageable area to fit at that position. They will shrink by the minimum\\n\" +\n+                \"needed to accommodate the imageable area.\\n \\n \\n\" +\n+                \"To test 6229507, put the minimum margins (all 0s) in Page Setup dialog.\\n\" +\n+                \"Compare Imageable width, height, and margins of portrait against landscape.\");\n+\n+        ta.setEditable(false);\n+        add(ta);\n+        setSize(700, 500);\n@@ -347,78 +242,27 @@\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n+    @Override\n+    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n+        if (pageIndex > 0) {\n+            return Printable.NO_SUCH_PAGE;\n+        }\n+\n+        System.out.println(\"Format Orientation = \"\n+                + GetOrientation(pageFormat.getOrientation()));\n+\n+        Graphics2D g2d = (Graphics2D) graphics;\n+\n+        System.out.println(g2d.getTransform());\n+        System.out.println(\"ix=\" + pageFormat.getImageableX() +\n+                           \" iy=\" + pageFormat.getImageableY());\n+        g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());\n+        g2d.drawString(\"ORIGIN\", 20, 20);\n+        g2d.drawString(\"X THIS WAY\", 200, 50);\n+        g2d.drawString(\"Y THIS WAY\", 60, 200);\n+        g2d.drawRect(0, 0,\n+                    (int) pageFormat.getImageableWidth(),\n+                    (int) pageFormat.getImageableHeight());\n+        g2d.setColor(Color.blue);\n+        g2d.drawRect(1, 1,\n+                    (int) pageFormat.getImageableWidth() - 2,\n+                    (int) pageFormat.getImageableHeight() - 2);\n+\n+        return Printable.PAGE_EXISTS;\n@@ -427,1 +271,34 @@\n- }\/\/ TestDialog  class\n+    private static final String INSTRUCTIONS =\n+            \"This test is very flexible and requires much interaction.\\n\" +\n+            \"There are several buttons.\\n\\n\" +\n+            \"Set Paper: if all fields are valid numbers it sets the Paper object.\\n\" +\n+            \"This is used to create arbitrary nonsensical paper sizes to help\\n\" +\n+            \"test validatePage.\\n\\n\" +\n+            \"Default Page: sets a default page. This should always be valid.\\n\\n\" +\n+            \"Page Setup: brings up the page dialog. You must OK this dialog\\n\" +\n+            \"for it to have any effect. You can use this to set different size,\\n\" +\n+            \"orientation and margins - which of course affect imageable area.\\n\\n\" +\n+            \"Printer: Used to set the current printer. Useful because current\\n\" +\n+            \"printer affects the choice of paper sizes available.\\n\" +\n+            \"You must OK this dialog for it to have any effect.\\n\\n\" +\n+            \"Validate Page:The most important button in the test.\\n\" +\n+            \"By setting nonsensical or valid papers with varying margins etc,\\n\" +\n+            \"this should always find the closest match within the limits of\\n\" +\n+            \"what is possible on the current printer.\\n\\n\" +\n+            \"Print: to the current printer. Not vital for this test request.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new RuntimeException(\"Printer not configured or available.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(10)\n+                .testUI(ValidatePage::new)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ValidatePage\/ValidatePage.java","additions":264,"deletions":387,"binary":false,"changes":651,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,17 @@\n-\/**\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.GradientPaint;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.image.BufferedImage;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+\/*\n@@ -29,0 +45,2 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -31,8 +49,0 @@\n-import java.awt.*;\n-import java.awt.geom.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import java.awt.Toolkit;\n-import java.awt.image.BufferedImage;\n-\n-\n@@ -40,0 +50,23 @@\n+    private final RasterCanvas c;\n+    private static final String INSTRUCTIONS =\n+            \"This test uses rendering operations which force the implementation\\n\" +\n+            \"to print the page as a raster\\n\" +\n+            \"You should see two square images, the 1st containing overlapping\\n\" +\n+            \"composited squares, the lower image shows a gradient paint.\\n\" +\n+            \"The printed output should match the on-screen display, although\\n\" +\n+            \"only colour printers will be able to accurately reproduce the\\n\" +\n+            \"subtle color changes.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (PrinterJob.lookupPrintServices().length == 0) {\n+            throw new RuntimeException(\"Printer not configured or available.\");\n+        }\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testUI(RasterTest::new)\n+                .rows((int) INSTRUCTIONS.lines().count() + 1)\n+                .columns(45)\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -41,22 +74,1 @@\n- private RasterCanvas c;\n-\n- public static void main(String args[]) {\n-  String[] instructions =\n-        {\n-         \"You must have a printer available to perform this test\",\n-         \"This test uses rendering operations which force the implementation\",\n-         \"to print the page as a raster\",\n-         \"You should see two square images, the 1st containing overlapping\",\n-         \"composited squares, the lower image shows a gradient paint.\",\n-         \"The printed output should match the on-screen display, although\",\n-         \"only colour printers will be able to accurately reproduce the\",\n-         \"subtle color changes.\"\n-       };\n-      Sysout.createDialog( );\n-      Sysout.printInstructions( instructions );\n-\n-    RasterTest f = new RasterTest();\n-    f.show();\n- }\n-\n- public RasterTest() {\n+    public RasterTest() {\n@@ -65,14 +77,2 @@\n-    c = new RasterCanvas();\n-    add(\"Center\", c);\n-\n-    Button printButton = new Button(\"Print\");\n-    printButton.addActionListener(this);\n-    add(\"South\", printButton);\n-\n-    addWindowListener(new WindowAdapter() {\n-       public void windowClosing(WindowEvent e) {\n-             System.exit(0);\n-            }\n-    });\n-\n-    pack();\n+        c = new RasterCanvas();\n+        add(\"Center\", c);\n@@ -80,0 +80,4 @@\n+        Button printButton = new Button(\"Print\");\n+        printButton.addActionListener(this);\n+        add(\"South\", printButton);\n+        pack();\n@@ -81,30 +85,0 @@\n-\n- }\n-\n- public void actionPerformed(ActionEvent e) {\n-\n-   PrinterJob pj = PrinterJob.getPrinterJob();\n-\n-   if (pj != null && pj.printDialog()) {\n-       pj.setPrintable(c);\n-       try {\n-            pj.print();\n-      } catch (PrinterException pe) {\n-      } finally {\n-         System.err.println(\"PRINT RETURNED\");\n-      }\n-   }\n-}\n-\n-\n- class RasterCanvas extends Canvas implements Printable {\n-\n-\n-    public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n-      if (pgIndex > 0)\n-         return Printable.NO_SUCH_PAGE;\n-\n-         Graphics2D g2d= (Graphics2D)g;\n-         g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n-         doPaint(g2d);\n-      return Printable.PAGE_EXISTS;\n@@ -113,3 +87,2 @@\n-    public void paint(Graphics g) {\n-       doPaint(g);\n-    }\n+    public void actionPerformed(ActionEvent e) {\n+        PrinterJob pj = PrinterJob.getPrinterJob();\n@@ -117,2 +90,9 @@\n-    public void paintComponent(Graphics g) {\n-       doPaint(g);\n+        if (pj.printDialog()) {\n+            pj.setPrintable(c);\n+            try {\n+                pj.print();\n+            } catch (PrinterException pe) {\n+                pe.printStackTrace();\n+                PassFailJFrame.forceFail(\"Test failed because of PrinterException\");\n+            }\n+        }\n@@ -121,25 +101,6 @@\n-    public void doPaint(Graphics g) {\n-        Graphics2D g2 = (Graphics2D)g;\n-\n-        g2.setColor(Color.black);\n-\n-        BufferedImage bimg = new BufferedImage(200, 200,\n-                                                 BufferedImage.TYPE_INT_ARGB);\n-        Graphics ig = bimg.getGraphics();\n-        Color alphared = new Color(255, 0, 0, 128);\n-        Color alphagreen = new Color(0, 255, 0, 128);\n-        Color alphablue = new Color(0, 0, 255, 128);\n-        ig.setColor(alphared);\n-        ig.fillRect(0,0,200,200);\n-        ig.setColor(alphagreen);\n-        ig.fillRect(25,25,150,150);\n-        ig.setColor(alphablue);\n-        ig.fillRect(75,75,125,125);\n-        g.drawImage(bimg, 10, 25, this);\n-\n-        GradientPaint gp =\n-         new GradientPaint(10.0f, 10.0f, alphablue, 210.0f, 210.0f, alphared, true);\n-        g2.setPaint(gp);\n-        g2.fillRect(10, 240, 200, 200);\n-\n-     }\n+    private static class RasterCanvas extends Canvas implements Printable {\n+        @Override\n+        public int print(Graphics g, PageFormat pgFmt, int pgIndex) {\n+            if (pgIndex > 0) {\n+                return Printable.NO_SUCH_PAGE;\n+            }\n@@ -147,2 +108,40 @@\n-    public Dimension getPreferredSize() {\n-        return new Dimension(500, 500);\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.translate(pgFmt.getImageableX(), pgFmt.getImageableY());\n+            doPaint(g2d);\n+\n+            return Printable.PAGE_EXISTS;\n+        }\n+\n+        @Override\n+        public void paint(Graphics g) {\n+            doPaint(g);\n+        }\n+\n+        private void doPaint(Graphics g) {\n+            BufferedImage bimg = new BufferedImage(200, 200,\n+                    BufferedImage.TYPE_INT_ARGB);\n+            Graphics ig = bimg.getGraphics();\n+            Color alphared = new Color(255, 0, 0, 128);\n+            Color alphagreen = new Color(0, 255, 0, 128);\n+            Color alphablue = new Color(0, 0, 255, 128);\n+            ig.setColor(alphared);\n+            ig.fillRect(0, 0, 200, 200);\n+            ig.setColor(alphagreen);\n+            ig.fillRect(25, 25, 150, 150);\n+            ig.setColor(alphablue);\n+            ig.fillRect(75, 75, 125, 125);\n+            g.drawImage(bimg, 10, 25, this);\n+            ig.dispose();\n+\n+            GradientPaint gp =\n+                    new GradientPaint(10.0f, 10.0f, alphablue, 210.0f, 210.0f, alphared, true);\n+\n+            Graphics2D g2 = (Graphics2D) g;\n+            g2.setPaint(gp);\n+            g2.fillRect(10, 240, 200, 200);\n+        }\n+\n+        @Override\n+        public Dimension getPreferredSize() {\n+            return new Dimension(500, 500);\n+        }\n@@ -150,3 +149,0 @@\n-\n- }\n-\n@@ -154,115 +150,0 @@\n-\n-\n-class Sysout {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"Center\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-         \/\/chop up each into pieces maxSringLength long\n-         remainingStr = instructions[ i ];\n-         while( remainingStr.length() > 0 )\n-          {\n-            \/\/if longer than max then chop off first max chars to print\n-            if( remainingStr.length() >= maxStringLength )\n-             {\n-               \/\/Try to chop on a word boundary\n-               int posOfSpace = remainingStr.\n-                  lastIndexOf( ' ', maxStringLength - 1 );\n-\n-               if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-               printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-               remainingStr = remainingStr.substring( posOfSpace + 1 );\n-             }\n-            \/\/else just print\n-            else\n-             {\n-               printStr = remainingStr;\n-               remainingStr = \"\";\n-             }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-          }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n- }\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/raster\/RasterTest.java","additions":107,"deletions":226,"binary":false,"changes":333,"status":"modified"}]}