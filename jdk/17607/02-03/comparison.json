{"files":[{"patch":"@@ -41,2 +41,0 @@\n-import jtreg.SkippedException;\n-\n@@ -49,1 +47,1 @@\n- * @build PassFailJFrame jtreg.SkippedException\n+ * @build PassFailJFrame\n@@ -78,17 +76,14 @@\n-\n-        myWidthLabel.setText(\"Format Width = \" + (float) myPageFormat.getWidth());\n-        myHeightLabel.setText(\"Format Height = \" + (float) myPageFormat.getHeight());\n-        myImageableXLabel.setText\n-                (\"Format Left Margin = \" + (float) myPageFormat.getImageableX());\n-        myImageableRightLabel.setText\n-                (\"Format Right Margin = \" + (float) (myPageFormat.getWidth() -\n-                (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n-        myImageableWidthLabel.setText\n-                (\"Format ImageableWidth = \" + (float) myPageFormat.getImageableWidth());\n-        myImageableYLabel.setText\n-                (\"Format Top Margin = \" + (float) myPageFormat.getImageableY());\n-        myImageableBottomLabel.setText\n-                (\"Format Bottom Margin = \" + (float) (myPageFormat.getHeight() -\n-                (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n-        myImageableHeightLabel.setText\n-                (\"Format ImageableHeight = \" + (float) myPageFormat.getImageableHeight());\n+        myWidthLabel.setText(\"Format Width = \" + myPageFormat.getWidth());\n+        myHeightLabel.setText(\"Format Height = \" + myPageFormat.getHeight());\n+        myImageableXLabel.setText(\"Format Left Margin = \"\n+                + myPageFormat.getImageableX());\n+        myImageableRightLabel.setText(\"Format Right Margin = \" + (myPageFormat.getWidth()\n+                - (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n+        myImageableWidthLabel.setText(\"Format ImageableWidth = \"\n+                + myPageFormat.getImageableWidth());\n+        myImageableYLabel.setText(\"Format Top Margin = \"\n+                + myPageFormat.getImageableY());\n+        myImageableBottomLabel.setText(\"Format Bottom Margin = \" + (myPageFormat.getHeight()\n+                - (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n+        myImageableHeightLabel.setText(\"Format ImageableHeight = \"\n+                + myPageFormat.getImageableHeight());\n@@ -105,4 +100,6 @@\n-                        (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n-                                o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n-                                        o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n-                                                \"<invalid>\"));\n+                        (switch (o) {\n+                            case PageFormat.PORTRAIT -> \"PORTRAIT\";\n+                            case PageFormat.LANDSCAPE -> \"LANDSCAPE\";\n+                            case PageFormat.REVERSE_LANDSCAPE -> \"REVERSE_LANDSCAPE\";\n+                            default -> \"<invalid>\";\n+                        }));\n@@ -110,10 +107,10 @@\n-        pw.setText(\"Paper Width = \" + (float) p.getWidth());\n-        ph.setText(\"Paper Height = \" + (float) p.getHeight());\n-        pglm.setText(\"Paper Left Margin = \" + (float) p.getImageableX());\n-        pgiw.setText(\"Paper Imageable Width = \" + (float) p.getImageableWidth());\n-        pgrm.setText(\"Paper Right Margin = \" +\n-                (float) (p.getWidth() - (p.getImageableX() + p.getImageableWidth())));\n-        pgtm.setText(\"Paper Top Margin = \" + (float) p.getImageableY());\n-        pgih.setText(\"Paper Imageable Height = \" + (float) p.getImageableHeight());\n-        pgbm.setText(\"Paper Bottom Margin = \" +\n-                (float) (p.getHeight() - (p.getImageableY() + p.getImageableHeight())));\n+        pw.setText(\"Paper Width = \" + p.getWidth());\n+        ph.setText(\"Paper Height = \" + p.getHeight());\n+        pglm.setText(\"Paper Left Margin = \" + p.getImageableX());\n+        pgiw.setText(\"Paper Imageable Width = \" + p.getImageableWidth());\n+        pgrm.setText(\"Paper Right Margin = \" + (p.getWidth()\n+                - (p.getImageableX() + p.getImageableWidth())));\n+        pgtm.setText(\"Paper Top Margin = \" + p.getImageableY());\n+        pgih.setText(\"Paper Imageable Height = \" + p.getImageableHeight());\n+        pgbm.setText(\"Paper Bottom Margin = \" + (p.getHeight()\n+                - (p.getImageableY() + p.getImageableHeight())));\n@@ -179,0 +176,1 @@\n+                    PassFailJFrame.forceFail( \"Test Failed\");\n@@ -191,0 +189,1 @@\n+                    PassFailJFrame.forceFail( \"Test Failed\");\n@@ -215,1 +214,2 @@\n-        g2d.drawRect(0, 0, (int) pageFormat.getImageableWidth(),\n+        g2d.drawRect(0, 0,\n+                (int) pageFormat.getImageableWidth(),\n@@ -222,1 +222,2 @@\n-        g2d.drawRect(1, 1, (int) pageFormat.getImageableWidth() - 2,\n+        g2d.drawRect(1, 1,\n+                (int) pageFormat.getImageableWidth() - 2,\n@@ -225,1 +226,0 @@\n-        g2d.dispose();\n@@ -232,2 +232,1 @@\n-            throw new SkippedException(\"Printer not configured or available.\"\n-                    + \" Test cannot continue.\");\n+            throw new RuntimeException(\"Printer not configured or available.\");\n@@ -237,1 +236,0 @@\n-                .title(\"PageSetupDialog Test Instructions\")\n","filename":"test\/jdk\/java\/awt\/print\/PageFormat\/PageSetupDialog.java","additions":38,"deletions":40,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import jtreg.SkippedException;\n-\n@@ -41,1 +39,1 @@\n- * @build PassFailJFrame jtreg.SkippedException\n+ * @build PassFailJFrame\n@@ -46,2 +44,2 @@\n-    PrinterJob pj;\n-    boolean okayed;\n+    private final PrinterJob pj;\n+    private final boolean okayed;\n@@ -50,8 +48,8 @@\n-             \"Test that print job cancellation works.\\n\" +\n-             \"You must have a printer available to perform this test.\\n\" +\n-             \"This test silently starts a print job and while the job is\\n\" +\n-             \"still being printed, cancels the print job\\n\" +\n-             \"You should see a message on System.out that the job\\n\" +\n-             \"was properly cancelled.\\n\" +\n-             \"You will need to kill the application manually since regression\\n\" +\n-             \"tests apparently aren't supposed to call System.exit()\";\n+            \"Test that print job cancellation works.\\n\" +\n+            \"You must have a printer available to perform this test.\\n\" +\n+            \"This test silently starts a print job and while the job is\\n\" +\n+            \"still being printed, cancels the print job\\n\" +\n+            \"You should see a message on System.out that the job\\n\" +\n+            \"was properly cancelled.\\n\" +\n+            \"You will need to kill the application manually since regression\\n\" +\n+            \"tests apparently aren't supposed to call System.exit()\";\n@@ -62,2 +60,1 @@\n-            throw new SkippedException(\"Printer not configured or available.\"\n-                    + \" Test cannot continue.\");\n+            throw new RuntimeException(\"Printer not configured or available.\");\n@@ -66,1 +63,1 @@\n-        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+        PassFailJFrame passFailJFrame = PassFailJFrame.builder()\n@@ -75,5 +72,2 @@\n-            try {\n-                Thread.sleep(5000);\n-                pjc.pj.cancel();\n-            } catch (InterruptedException e) {\n-            }\n+            Thread.sleep(5000);\n+            pjc.pj.cancel();\n@@ -86,1 +80,0 @@\n-\n@@ -100,0 +93,1 @@\n+            PassFailJFrame.forcePass();\n@@ -101,2 +95,2 @@\n-            System.out.println(\"This is wrong .. we shouldn't be here\");\n-            System.out.println(\"Looks like a test failure\");\n+            PassFailJFrame.forceFail(\"This is wrong .. we shouldn't be here, \" +\n+                                     \"Looks like a test failure\");\n@@ -104,1 +98,0 @@\n-            \/\/throw prex;\n@@ -108,2 +101,2 @@\n-                System.out.println(\"Looks like the test failed - we didn't get\");\n-                System.out.println(\"the expected PrintAbortException \");\n+                PassFailJFrame.forceFail(\"Looks like the test failed - we didn't get \" +\n+                                         \"the expected PrintAbortException \");\n@@ -125,1 +118,0 @@\n-        g2d.dispose();\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/Cancel\/PrinterJobCancel.java","additions":20,"deletions":28,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import jtreg.SkippedException;\n-\n@@ -39,1 +37,1 @@\n- * @build PassFailJFrame jtreg.SkippedException\n+ * @build PassFailJFrame\n@@ -45,5 +43,5 @@\n-    static Font[] allFonts;\n-    int fontNum = 0;\n-    int startNum = 0;\n-    int lineHeight = 18;\n-    int thisPage = 0;\n+    private static Font[] allFonts;\n+    private int lineHeight = 18;\n+    private int fontNum = 0;\n+    private int startNum = 0;\n+    private int thisPage = 0;\n@@ -52,4 +50,4 @@\n-             \"You must have a printer available to perform this test.\\n\" +\n-             \"\\n\" +\n-             \"This bug is system dependent and is not always reproducible.\\n\" +\n-             \"A passing test will have all text printed with correct font style.\";\n+            \"You must have a printer available to perform this test.\\n\" +\n+            \"\\n\" +\n+            \"This bug is system dependent and is not always reproducible.\\n\" +\n+            \"A passing test will have all text printed with correct font style.\";\n@@ -60,2 +58,1 @@\n-            throw new SkippedException(\"Printer not configured or available.\"\n-                    + \" Test cannot continue.\");\n+            throw new RuntimeException(\"Printer not configured or available.\");\n@@ -65,1 +62,0 @@\n-                .title(\"PrintAllFonts Test Instructions\")\n@@ -94,1 +90,0 @@\n-        g.setColor(Color.black);\n@@ -96,4 +91,3 @@\n-        int hgt = (int)pf.getImageableHeight();\n-        int fontsPerPage = hgt\/lineHeight;\n-        int x = (int)pf.getImageableX()+10;\n-        int y = (int)pf.getImageableY()+lineHeight;\n+        int fontsPerPage = (int) pf.getImageableHeight() \/ lineHeight;\n+        int x = (int) pf.getImageableX() + 10;\n+        int y = (int) pf.getImageableY() + lineHeight;\n@@ -101,0 +95,1 @@\n+        g.setColor(Color.black);\n@@ -102,1 +97,2 @@\n-            Font f = allFonts[fontNum].deriveFont(Font.PLAIN, 16);\n+            Font f = allFonts[fontNum].deriveFont(Font.PLAIN, 14);\n+            Font fi = allFonts[fontNum].deriveFont(Font.ITALIC, 14);\n@@ -105,1 +101,3 @@\n-            y+= lineHeight;\n+            g.setFont(fi);\n+            g.drawString(f.getFontName(), (int) (x + pf.getImageableWidth() \/ 2), y);\n+            y += lineHeight;\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintAllFonts.java","additions":20,"deletions":22,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n-import jtreg.SkippedException;\n-\n@@ -49,1 +47,1 @@\n- * @build PassFailJFrame jtreg.SkippedException\n+ * @build PassFailJFrame\n@@ -71,14 +69,11 @@\n-        myImageableXLabel.setText\n-                (\"Format Left Margin = \" + drnd(myPageFormat.getImageableX()));\n-        myImageableRightLabel.setText\n-                (\"Format Right Margin = \" + drnd(myPageFormat.getWidth() -\n-                (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n-        myImageableWidthLabel.setText\n-                (\"Format ImageableWidth = \" + drnd(myPageFormat.getImageableWidth()));\n-        myImageableYLabel.setText\n-                (\"Format Top Margin = \" + drnd(myPageFormat.getImageableY()));\n-        myImageableBottomLabel.setText\n-                (\"Format Bottom Margin = \" + drnd(myPageFormat.getHeight() -\n-                (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n-        myImageableHeightLabel.setText\n-                (\"Format ImageableHeight = \" + drnd(myPageFormat.getImageableHeight()));\n+        myImageableXLabel.setText(\"Format Left Margin = \" + drnd(myPageFormat.getImageableX()));\n+        myImageableRightLabel.setText(\"Format Right Margin = \" + drnd(myPageFormat.getWidth()\n+                - (myPageFormat.getImageableX() + myPageFormat.getImageableWidth())));\n+        myImageableWidthLabel.setText(\"Format ImageableWidth = \"\n+                + drnd(myPageFormat.getImageableWidth()));\n+        myImageableYLabel.setText(\"Format Top Margin = \"\n+                + drnd(myPageFormat.getImageableY()));\n+        myImageableBottomLabel.setText(\"Format Bottom Margin = \" + drnd(myPageFormat.getHeight()\n+                - (myPageFormat.getImageableY() + myPageFormat.getImageableHeight())));\n+        myImageableHeightLabel.setText(\"Format ImageableHeight = \"\n+                + drnd(myPageFormat.getImageableHeight()));\n@@ -88,4 +83,6 @@\n-                        (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n-                                o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n-                                        o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n-                                                \"<invalid>\"));\n+                        (switch (o) {\n+                            case PageFormat.PORTRAIT -> \"PORTRAIT\";\n+                            case PageFormat.LANDSCAPE -> \"LANDSCAPE\";\n+                            case PageFormat.REVERSE_LANDSCAPE -> \"REVERSE_LANDSCAPE\";\n+                            default -> \"<invalid>\";\n+                        }));\n@@ -99,2 +96,2 @@\n-        pgrm.setText(\"Paper Right Margin = \" +\n-                drnd(p.getWidth() - (p.getImageableX() + p.getImageableWidth())));\n+        pgrm.setText(\"Paper Right Margin = \" + drnd(p.getWidth()\n+                - (p.getImageableX() + p.getImageableWidth())));\n@@ -102,2 +99,2 @@\n-        pgbm.setText(\"Paper Bottom Margin = \" +\n-                drnd(p.getHeight() - (p.getImageableY() + p.getImageableHeight())));\n+        pgbm.setText(\"Paper Bottom Margin = \" + drnd(p.getHeight()\n+                - (p.getImageableY() + p.getImageableHeight())));\n@@ -191,0 +188,1 @@\n+                PassFailJFrame.forceFail( \"Test Failed\");\n@@ -218,0 +216,1 @@\n+                PassFailJFrame.forceFail( \"Test Failed\");\n@@ -251,1 +250,7 @@\n-        Graphics2D g2d = (Graphics2D) graphics;\n+        System.out.println(\"Format Orientation = \" +\n+                (switch (pageFormat.getOrientation()) {\n+                    case PageFormat.PORTRAIT -> \"PORTRAIT\";\n+                    case PageFormat.LANDSCAPE -> \"LANDSCAPE\";\n+                    case PageFormat.REVERSE_LANDSCAPE -> \"REVERSE_LANDSCAPE\";\n+                    default -> \"<invalid>\";\n+                }));\n@@ -253,1 +258,1 @@\n-        int o = pageFormat.getOrientation();\n+        Graphics2D g2d = (Graphics2D) graphics;\n@@ -255,5 +260,0 @@\n-        System.out.println(\"Format Orientation = \" +\n-                (o == PageFormat.PORTRAIT ? \"PORTRAIT\" :\n-                        o == PageFormat.LANDSCAPE ? \"LANDSCAPE\" :\n-                                o == PageFormat.REVERSE_LANDSCAPE ? \"REVERSE_LANDSCAPE\" :\n-                                        \"<invalid>\"));\n@@ -262,1 +262,1 @@\n-                \" iy=\" + pageFormat.getImageableY());\n+                           \" iy=\" + pageFormat.getImageableY());\n@@ -267,2 +267,3 @@\n-        g2d.drawRect(0, 0, (int) pageFormat.getImageableWidth(),\n-                (int) pageFormat.getImageableHeight());\n+        g2d.drawRect(0, 0,\n+                    (int) pageFormat.getImageableWidth(),\n+                    (int) pageFormat.getImageableHeight());\n@@ -270,2 +271,3 @@\n-        g2d.drawRect(1, 1, (int) pageFormat.getImageableWidth() - 2,\n-                (int) pageFormat.getImageableHeight() - 2);\n+        g2d.drawRect(1, 1,\n+                    (int) pageFormat.getImageableWidth() - 2,\n+                    (int) pageFormat.getImageableHeight() - 2);\n@@ -273,1 +275,0 @@\n-        g2d.dispose();\n@@ -296,2 +297,1 @@\n-            \"Print: to the current printer. Not vital for this test.\\n\" +\n-            \"request.\";\n+            \"Print: to the current printer. Not vital for this test request.\";\n@@ -302,2 +302,1 @@\n-            throw new SkippedException(\"Printer not configured or available.\"\n-                    + \" Test cannot continue.\");\n+            throw new RuntimeException(\"Printer not configured or available.\");\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ValidatePage\/ValidatePage.java","additions":41,"deletions":42,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -40,2 +40,0 @@\n-import jtreg.SkippedException;\n-\n@@ -48,1 +46,1 @@\n- * @build PassFailJFrame jtreg.SkippedException\n+ * @build PassFailJFrame\n@@ -53,2 +51,0 @@\n-    private final RasterCanvas c;\n-\n@@ -68,2 +64,1 @@\n-            throw new SkippedException(\"Printer not configured or available.\"\n-                    + \" Test cannot continue.\");\n+            throw new RuntimeException(\"Printer not configured or available.\");\n@@ -84,1 +79,1 @@\n-        c = new RasterCanvas();\n+        RasterCanvas c = new RasterCanvas();\n@@ -90,1 +85,0 @@\n-\n@@ -92,1 +86,0 @@\n-\n@@ -97,1 +90,0 @@\n-\n@@ -105,0 +97,1 @@\n+                PassFailJFrame.forceFail( \"Test Failed\");\n@@ -106,2 +99,0 @@\n-            } finally {\n-                System.out.println(\"PRINT RETURNED\");\n@@ -121,1 +112,1 @@\n-            g2d.dispose();\n+\n@@ -134,4 +125,0 @@\n-            Graphics2D g2 = (Graphics2D) g;\n-\n-            g2.setColor(Color.black);\n-\n@@ -154,0 +141,2 @@\n+\n+            Graphics2D g2 = (Graphics2D) g;\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/raster\/RasterTest.java","additions":7,"deletions":18,"binary":false,"changes":25,"status":"modified"}]}