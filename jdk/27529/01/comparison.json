{"files":[{"patch":"@@ -235,1 +235,2 @@\n-            if (message.remaining() != 1 || message.get() != 1) {\n+            if (message.remaining() != 1 || message.get() != 1\n+                    || tc.isNegotiated) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ChangeCipherSpec.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static jdk.test.lib.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertTrue;\n+import static jdk.test.lib.Utils.runAndCheckException;\n+\n+import java.nio.ByteBuffer;\n+import javax.net.ssl.SSLEngineResult.HandshakeStatus;\n+import javax.net.ssl.SSLProtocolException;\n+\n+\/*\n+ * @test\n+ * @bug 8366244\n+ * @summary TLS1.3 ChangeCipherSpec message received after the client's\n+ *          Finished message should trigger a connection abort with\n+ *          \"unexpected message\"\n+ * @library \/javax\/net\/ssl\/templates\n+ *          \/test\/lib\n+ * @run main\/othervm TLS13ChangeCipherSpecAfterFinished false\n+ * @run main\/othervm TLS13ChangeCipherSpecAfterFinished true\n+ *\/\n+\n+public class TLS13ChangeCipherSpecAfterFinished extends SSLEngineTemplate {\n+\n+    private static final ContextParameters testContextParams =\n+            new ContextParameters(\"TLSv1.3\", \"PKIX\", \"SunX509\");\n+\n+    private final String exMsg;\n+\n+    protected TLS13ChangeCipherSpecAfterFinished(String exMsg)\n+            throws Exception {\n+        super();\n+        this.exMsg = exMsg;\n+    }\n+\n+    @Override\n+    protected ContextParameters getServerContextParameters() {\n+        return testContextParams;\n+    }\n+\n+    @Override\n+    protected ContextParameters getClientContextParameters() {\n+        return testContextParams;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"Wrong number of arguments\");\n+        }\n+\n+        boolean useCompatibilityMode = Boolean.parseBoolean(args[0]);\n+\n+        if (useCompatibilityMode) {\n+            \/\/ Test existing unexpected message detection mechanism\n+            \/\/ with client's Middlebox Compatibility Mode on\n+            \/\/ (which is the default).\n+            new TLS13ChangeCipherSpecAfterFinished(\n+                    \"(unexpected_message) Unexpected content: 20\").run();\n+        } else {\n+            \/\/ Switch off client Middlebox Compatibility Mode: do not send CCS\n+            \/\/ immediately before the second flight. This is needed to reproduce\n+            \/\/ the conditions for the issue to manifest itself.\n+            System.setProperty(\"jdk.tls.client.useCompatibilityMode\", \"false\");\n+\n+            \/\/ Test the fix.\n+            new TLS13ChangeCipherSpecAfterFinished(\"(unexpected_message) \"\n+                    + \"Malformed or unexpected ChangeCipherSpec \"\n+                    + \"message\").run();\n+        }\n+    }\n+\n+    protected void run() throws Exception {\n+\n+        \/\/ Complete handshake.\n+        do {\n+            clientEngine.wrap(clientOut, cTOs);\n+            runDelegatedTasks(clientEngine);\n+\n+            serverEngine.wrap(serverOut, sTOc);\n+            runDelegatedTasks(serverEngine);\n+\n+            cTOs.flip();\n+            sTOc.flip();\n+\n+            clientEngine.unwrap(sTOc, clientIn);\n+            runDelegatedTasks(clientEngine);\n+\n+            serverEngine.unwrap(cTOs, serverIn);\n+            runDelegatedTasks(serverEngine);\n+\n+            cTOs.compact();\n+            sTOc.compact();\n+        } while (serverEngine.getHandshakeStatus()\n+                != HandshakeStatus.NOT_HANDSHAKING);\n+\n+        \/\/ Send a valid CCS message after Finished.\n+        ByteBuffer changeCipher = ByteBuffer.allocate(6);\n+        \/\/ ContentType type: change_cipher_spec(20)\n+        \/\/ ProtocolVersion:  0x0303\n+        \/\/ uint16 length:    0x0001\n+        \/\/ opaque fragment:  0x01\n+        changeCipher.put(new byte[]{20, 3, 3, 0, 1, 1});\n+        changeCipher.flip();\n+\n+        runAndCheckException(\n+                () -> serverEngine.unwrap(changeCipher, serverIn),\n+                ex -> {\n+                    assertTrue(ex instanceof SSLProtocolException);\n+                    assertEquals(exMsg, ex.getMessage());\n+                });\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/TLS13ChangeCipherSpecAfterFinished.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}