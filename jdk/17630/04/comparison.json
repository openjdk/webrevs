{"files":[{"patch":"@@ -90,0 +90,5 @@\n+        <\/dependency>\n+        <dependency>\n+            <groupId>org.netbeans.api<\/groupId>\n+            <artifactId>org-openide-modules<\/artifactId>\n+            <version>${netbeans.version}<\/version>\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/pom.xml","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,5 @@\n-import com.sun.hotspot.igv.data.ChangedListener;\n-import com.sun.hotspot.igv.data.GraphDocument;\n-import com.sun.hotspot.igv.data.InputGraph;\n+import com.sun.hotspot.igv.data.*;\n+import com.sun.hotspot.igv.data.serialization.ParseMonitor;\n+import com.sun.hotspot.igv.data.serialization.Parser;\n+import com.sun.hotspot.igv.data.serialization.Printer;\n+import com.sun.hotspot.igv.data.services.GraphViewer;\n@@ -33,0 +35,1 @@\n+import com.sun.hotspot.igv.settings.Settings;\n@@ -34,0 +37,1 @@\n+import com.sun.hotspot.igv.view.DiagramViewModel;\n@@ -37,6 +41,8 @@\n-import java.io.IOException;\n-import java.io.ObjectInput;\n-import java.io.ObjectOutput;\n-import java.util.HashSet;\n-import java.util.Set;\n-import javax.swing.UIManager;\n+import java.awt.event.ActionEvent;\n+import java.io.*;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.*;\n+import javax.swing.*;\n@@ -44,0 +50,2 @@\n+import org.netbeans.api.progress.ProgressHandle;\n+import org.netbeans.api.progress.ProgressHandleFactory;\n@@ -51,0 +59,1 @@\n+import org.openide.modules.Places;\n@@ -52,2 +61,2 @@\n-import org.openide.util.Exceptions;\n-import org.openide.util.NbBundle;\n+import org.openide.util.*;\n+import org.openide.windows.Mode;\n@@ -56,0 +65,1 @@\n+import javax.swing.JButton;\n@@ -66,1 +76,1 @@\n-    private final GraphDocument document;\n+    private static final GraphDocument document = new GraphDocument();\n@@ -70,0 +80,1 @@\n+    private JButton changeWorkspaceButton;\n@@ -72,0 +83,3 @@\n+    private static final int WORKUNITS = 10000;\n+    private static final int STATE_FORMAT_VERSION = 1;\n+    private static final RequestProcessor RP = new RequestProcessor(\"OutlineTopComponent\", 1);\n@@ -79,1 +93,0 @@\n-        document = new GraphDocument();\n@@ -83,0 +96,4 @@\n+\n+        String userDirectory = Places.getUserDirectory().getAbsolutePath();\n+        setWorkspacePath(userDirectory);\n+        loadWorkspace();\n@@ -102,1 +119,0 @@\n-        toolbar.add(SaveAsAction.get(SaveAsAction.class).createContextAwareInstance(this.getLookup()));\n@@ -108,0 +124,1 @@\n+        toolbar.add(SaveAsAction.get(SaveAsAction.class).createContextAwareInstance(this.getLookup()));\n@@ -114,2 +131,0 @@\n-        toolbar.add(GarbageCollectAction.get(GarbageCollectAction.class).getToolbarPresenter());\n-\n@@ -117,0 +132,3 @@\n+            if (tb.getName().equals(\"GlobalToolbar\")) {\n+                continue;\n+            }\n@@ -120,0 +138,13 @@\n+        JToolBar globalToolbar = ToolbarPool.getDefault().findToolbar(\"GlobalToolbar\");\n+        if (globalToolbar != null) {\n+            Icon folderIcon = UIManager.getIcon(\"FileView.hardDriveIcon\");\n+            changeWorkspaceButton = new JButton(\"Select a workspace...\", folderIcon);\n+            changeWorkspaceButton.setToolTipText(\"Select a workspace...\");\n+            changeWorkspaceButton.addActionListener(this::onChangeWorkspaceClicked);\n+            globalToolbar.add(changeWorkspaceButton);\n+            globalToolbar.add(Box.createHorizontalGlue());\n+            globalToolbar.add(GarbageCollectAction.get(GarbageCollectAction.class).getToolbarPresenter());\n+            globalToolbar.revalidate();\n+            globalToolbar.repaint();\n+        }\n+\n@@ -123,0 +154,17 @@\n+    private void onChangeWorkspaceClicked(ActionEvent event) {\n+        JFileChooser fileChooser = new JFileChooser();\n+        fileChooser.setDialogTitle(\"Select Workspace Folder\");\n+        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n+        fileChooser.setAcceptAllFileFilterUsed(false);\n+\n+        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {\n+            File newWorkspace = fileChooser.getSelectedFile();\n+            String workspacePath = newWorkspace.getAbsolutePath();\n+            if (!workspacePath.isEmpty()) {\n+                saveWorkspace();\n+                setWorkspacePath(workspacePath);\n+                loadWorkspace();\n+            }\n+        }\n+    }\n+\n@@ -130,1 +178,0 @@\n-\n@@ -153,1 +200,1 @@\n-    public GraphDocument getDocument() {\n+    public static GraphDocument getDocument() {\n@@ -273,0 +320,18 @@\n+    private void loadWorkspace() {\n+        clear();\n+        ((BeanTreeView) this.treeView).setRootVisible(false);\n+\n+        try {\n+            loadGraphDocument(getWorkspaceGraphsPath());\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+            return;\n+        }\n+\n+        try {\n+            loadStates(getWorkspaceStatesPath());\n+        } catch (IOException ex) {\n+            Exceptions.printStackTrace(ex);\n+        }\n+    }\n+\n@@ -275,1 +340,0 @@\n-        \/\/ Not called when user starts application for the first time\n@@ -277,1 +341,27 @@\n-        ((BeanTreeView) this.treeView).setRootVisible(false);\n+    }\n+\n+    private String workspacePath;\n+\n+    private void setWorkspacePath(String path) {\n+        changeWorkspaceButton.setText(path);\n+        workspacePath = path;\n+    }\n+\n+    static public String WORKSPACE_XML_FILE = \"graphs.xml\";\n+    static public String WORKSPACE_STATE_FILE = \"state.igv\";\n+\n+    private String getWorkspaceGraphsPath() {\n+        return workspacePath + \"\/\" + WORKSPACE_XML_FILE;\n+    }\n+\n+    private String getWorkspaceStatesPath() {\n+        return workspacePath + \"\/\" + WORKSPACE_STATE_FILE;\n+    }\n+\n+    public void saveWorkspace() {\n+        try {\n+            saveGraphDocument(getDocument(), getWorkspaceGraphsPath());\n+            saveStates(getWorkspaceStatesPath());\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -283,0 +373,209 @@\n+        saveWorkspace();\n+    }\n+\n+    private static File chooseFile() {\n+        JFileChooser fc = new JFileChooser();\n+        fc.setFileFilter(ImportAction.getFileFilter());\n+        fc.setCurrentDirectory(new File(Settings.get().get(Settings.DIRECTORY, Settings.DIRECTORY_DEFAULT)));\n+\n+        if (fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {\n+            File file = fc.getSelectedFile();\n+            if (!file.getName().contains(\".\")) {\n+                file = new File(file.getAbsolutePath() + \".xml\");\n+            }\n+\n+            File dir = file;\n+            if (!dir.isDirectory()) {\n+                dir = dir.getParentFile();\n+            }\n+            Settings.get().put(Settings.DIRECTORY, dir.getAbsolutePath());\n+            return file;\n+        }\n+        return null;\n+    }\n+\n+    private void loadStates(String path) throws IOException {\n+        RP.post(() -> {\n+            try {\n+                if (Files.notExists(Path.of(path))) {\n+                    return;\n+                }\n+                FileInputStream fis = new FileInputStream(path);\n+                ObjectInputStream in = new ObjectInputStream(fis);\n+\n+                int formatVersion = in.readInt();\n+                assert formatVersion <= STATE_FORMAT_VERSION;\n+\n+                final GraphViewer viewer = Lookup.getDefault().lookup(GraphViewer.class);\n+                assert viewer != null;\n+                int tabCount = in.readInt();\n+                for (int i = 0; i < tabCount; i++) {\n+                    final boolean isDiffGraph = in.readBoolean();\n+                    int firstGroupIdx = in.readInt();\n+                    int firstGraphIdx = in.readInt();\n+                    String firstGraphTag = in.readUTF();\n+                    final InputGraph firstGraph = findGraph(firstGroupIdx, firstGraphIdx);\n+                    if (firstGraph == null || firstGraph.getGroup() == null ||\n+                            !firstGraphTag.equals(firstGraph.getGroup().getName() + \"#\" + firstGraph.getName())) {\n+                        break;\n+                    }\n+                    final InputGraph secondGraph;\n+                    if (isDiffGraph) {\n+                        int secondGroupIdx = in.readInt();\n+                        int secondGraphIdx = in.readInt();\n+                        String secondGraphTag = in.readUTF();\n+                        secondGraph = findGraph(secondGroupIdx, secondGraphIdx);\n+                        if (secondGraph == null || secondGraph.getGroup() == null ||\n+                                !secondGraphTag.equals(secondGraph.getGroup().getName() + \"#\" + secondGraph.getName())) {\n+                            break;\n+                        }\n+                    } else {\n+                        secondGraph = null;\n+                    }\n+                    final Set<Integer> hiddenNodes = new HashSet<>();\n+                    int hiddenNodeCount = in.readInt();\n+                    for (int j = 0; j < hiddenNodeCount; j++) {\n+                        int hiddenNodeID = in.readInt();\n+                        hiddenNodes.add(hiddenNodeID);\n+                    }\n+\n+                    SwingUtilities.invokeLater(() -> {\n+                        InputGraph openedGraph;\n+                        if (isDiffGraph) {\n+                            openedGraph = viewer.viewDifference(firstGraph, secondGraph);\n+                        } else {\n+                            openedGraph = viewer.view(firstGraph, true);\n+                        }\n+                        if (openedGraph != null) {\n+                            EditorTopComponent etc = EditorTopComponent.findEditorForGraph(openedGraph);\n+                            if (etc != null) {\n+                                etc.getModel().setHiddenNodes(hiddenNodes);\n+                            }\n+                        }\n+                    });\n+                }\n+                in.close();\n+            } catch (IOException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+        });\n+    }\n+\n+    private void saveStates(String path) throws IOException {\n+        FileOutputStream fos = new FileOutputStream(path);\n+        ObjectOutputStream out = new ObjectOutputStream(fos);\n+\n+        List<EditorTopComponent> editorTabs = new ArrayList<>();\n+        WindowManager manager = WindowManager.getDefault();\n+        for (Mode mode : manager.getModes()) {\n+            List<TopComponent> compList = new ArrayList<>(Arrays.asList(manager.getOpenedTopComponents(mode)));\n+            for (TopComponent comp : compList) {\n+                if (comp instanceof EditorTopComponent) {\n+                    editorTabs.add((EditorTopComponent) comp);\n+                }\n+            }\n+        }\n+\n+        out.writeInt(STATE_FORMAT_VERSION);\n+\n+        int tabCount = editorTabs.size();\n+        out.writeInt(tabCount);\n+        for (EditorTopComponent etc : editorTabs) {\n+            DiagramViewModel model = etc.getModel();\n+            boolean isDiffGraph = model.getGraph().isDiffGraph();\n+            out.writeBoolean(isDiffGraph);\n+            if (isDiffGraph) {\n+                InputGraph firstGraph = model.getFirstGraph();\n+                InputGraph secondGraph = model.getSecondGraph();\n+                out.writeInt(firstGraph.getGroup().getIndex());\n+                out.writeInt(firstGraph.getIndex());\n+                out.writeUTF(firstGraph.getGroup().getName() + \"#\" + firstGraph.getName());\n+                out.writeInt(secondGraph.getGroup().getIndex());\n+                out.writeInt(secondGraph.getIndex());\n+                out.writeUTF(secondGraph.getGroup().getName() + \"#\" + secondGraph.getName());\n+            } else {\n+                InputGraph graph = model.getGraph();\n+                out.writeInt(graph.getGroup().getIndex());\n+                out.writeInt(graph.getIndex());\n+                out.writeUTF(graph.getGroup().getName() + \"#\" + graph.getName());\n+            }\n+            int hiddenNodeCount = model.getHiddenNodes().size();\n+            out.writeInt(hiddenNodeCount);\n+            for (int hiddenNodeID : model.getHiddenNodes()) {\n+                out.writeInt(hiddenNodeID);\n+            }\n+        }\n+        out.close();\n+    }\n+\n+    public void loadGraphDocument(String path) throws IOException {\n+        RP.post(() -> {\n+            if (Files.notExists(Path.of(path))) {\n+                return;\n+            }\n+            File file = new File(path);\n+            final FileChannel channel;\n+            final long start;\n+            try {\n+                channel = FileChannel.open(file.toPath(), StandardOpenOption.READ);\n+                start = channel.size();\n+            } catch (Exception ex) {\n+                Exceptions.printStackTrace(ex);\n+                return;\n+            }\n+\n+            final ProgressHandle handle = ProgressHandleFactory.createHandle(\"Opening file \" + file.getName());\n+            handle.start(WORKUNITS);\n+\n+            ParseMonitor monitor = new ParseMonitor() {\n+                @Override\n+                public void updateProgress() {\n+                    try {\n+                        int prog = (int) (WORKUNITS * (double) channel.position() \/ (double) start);\n+                        handle.progress(prog);\n+                    } catch (IOException ignored) {}\n+                }\n+                @Override\n+                public void setState(String state) {\n+                    updateProgress();\n+                    handle.progress(state);\n+                }\n+            };\n+            try {\n+                if (file.getName().endsWith(\".xml\")) {\n+                    final Parser parser = new Parser(channel, monitor, null);\n+                    parser.setInvokeLater(false);\n+                    final GraphDocument parsedDoc = parser.parse();\n+                    getDocument().addGraphDocument(parsedDoc);\n+                    SwingUtilities.invokeLater(this::requestActive);\n+                }\n+            } catch (IOException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+            handle.finish();\n+        });\n+    }\n+\n+    public static void saveGraphDocument(GraphDocument doc, String path) throws IOException {\n+        final File graphFile;\n+        if (path == null || path.isEmpty()) {\n+            graphFile = OutlineTopComponent.chooseFile();\n+        } else {\n+            graphFile = new File(path);\n+        }\n+        if (graphFile == null) {\n+            return;\n+        }\n+        try (Writer writer = new OutputStreamWriter(Files.newOutputStream(graphFile.toPath()))) {\n+            Printer printer = new Printer();\n+            printer.export(writer, doc);\n+        }\n+    }\n+\n+    private InputGraph findGraph(int groupIdx, int graphIdx) {\n+        FolderElement folderElement = document.getElements().get(groupIdx);\n+        if (folderElement instanceof Group) {\n+            Group group = (Group) folderElement;\n+            return group.getGraphs().get(graphIdx);\n+        }\n+        return null;\n@@ -295,2 +594,2 @@\n-        setLayout(new java.awt.BorderLayout());\n-        add(treeView, java.awt.BorderLayout.CENTER);\n+        setLayout(new BorderLayout());\n+        add(treeView, BorderLayout.CENTER);\n@@ -300,1 +599,1 @@\n-    private javax.swing.JScrollPane treeView;\n+    private JScrollPane treeView;\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/OutlineTopComponent.java","additions":323,"deletions":24,"binary":false,"changes":347,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import com.sun.hotspot.igv.data.GraphDocument;\n-import com.sun.hotspot.igv.data.serialization.GraphParser;\n-import com.sun.hotspot.igv.data.serialization.ParseMonitor;\n-import com.sun.hotspot.igv.data.serialization.Parser;\n@@ -35,4 +31,0 @@\n-import java.nio.channels.FileChannel;\n-import java.nio.file.StandardOpenOption;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n@@ -41,1 +33,0 @@\n-import javax.swing.SwingUtilities;\n@@ -43,2 +34,0 @@\n-import org.netbeans.api.progress.ProgressHandle;\n-import org.netbeans.api.progress.ProgressHandleFactory;\n@@ -54,1 +43,0 @@\n-    private static final int WORKUNITS = 10000;\n@@ -87,20 +75,0 @@\n-                    final FileChannel channel = FileChannel.open(file.toPath(), StandardOpenOption.READ);\n-                    final ProgressHandle handle = ProgressHandleFactory.createHandle(\"Opening file \" + file.getName());\n-                    handle.start(WORKUNITS);\n-                    final long startTime = System.currentTimeMillis();\n-                    final long start = channel.size();\n-                    ParseMonitor monitor = new ParseMonitor() {\n-                            @Override\n-                            public void updateProgress() {\n-                                try {\n-                                    int prog = (int) (WORKUNITS * (double) channel.position() \/ (double) start);\n-                                    handle.progress(prog);\n-                                } catch (IOException ignored) {}\n-                            }\n-                            @Override\n-                            public void setState(String state) {\n-                                updateProgress();\n-                                handle.progress(state);\n-                            }\n-                        };\n-                    final GraphParser parser;\n@@ -108,24 +76,1 @@\n-                    if (file.getName().endsWith(\".xml\")) {\n-                        parser = new Parser(channel, monitor, null);\n-                    } else {\n-                        parser = null;\n-                    }\n-                    RequestProcessor.getDefault().post(new Runnable() {\n-                            @Override\n-                            public void run() {\n-                                try {\n-                                    final GraphDocument document = parser.parse();\n-                                    if (document != null) {\n-                                        SwingUtilities.invokeLater(() -> {\n-                                            component.requestActive();\n-                                            component.getDocument().addGraphDocument(document);\n-                                        });\n-                                    }\n-                                } catch (IOException ex) {\n-                                    Exceptions.printStackTrace(ex);\n-                                }\n-                                handle.finish();\n-                                long stop = System.currentTimeMillis();\n-                                Logger.getLogger(getClass().getName()).log(Level.INFO, \"Loaded in \" + file + \" in \" + ((stop - startTime) \/ 1000.0) + \" seconds\");\n-                            }\n-                        });\n+                    component.loadGraphDocument(file.getAbsolutePath());\n@@ -145,1 +90,1 @@\n-        putValue(Action.SHORT_DESCRIPTION, \"Open\");\n+        putValue(Action.SHORT_DESCRIPTION, \"Import from XML...\");\n@@ -148,0 +93,1 @@\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/actions\/ImportAction.java","additions":4,"deletions":58,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openide.util.ImageUtilities;\n@@ -52,0 +53,1 @@\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/actions\/RemoveAction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openide.util.ImageUtilities;\n@@ -46,0 +47,1 @@\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/actions\/RemoveAllAction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.IOException;\n@@ -29,3 +30,1 @@\n-import org.openide.util.HelpCtx;\n-import org.openide.util.NbBundle;\n-import org.openide.util.Utilities;\n+import org.openide.util.*;\n@@ -43,2 +42,2 @@\n-        final OutlineTopComponent component = OutlineTopComponent.findInstance();\n-        SaveAsAction.save(component.getDocument());\n+        OutlineTopComponent component = OutlineTopComponent.findInstance();\n+        component.saveWorkspace();\n@@ -53,1 +52,1 @@\n-        putValue(Action.SHORT_DESCRIPTION, \"Save all groups to XML file...\");\n+        putValue(Action.SHORT_DESCRIPTION, \"Save workspace...\");\n@@ -56,0 +55,1 @@\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n@@ -60,1 +60,1 @@\n-        return \"com\/sun\/hotspot\/igv\/coordinator\/images\/saveall.gif\";\n+        return \"com\/sun\/hotspot\/igv\/coordinator\/images\/save.png\";\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/actions\/SaveAllAction.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import com.sun.hotspot.igv.coordinator.OutlineTopComponent;\n@@ -31,2 +32,0 @@\n-import com.sun.hotspot.igv.data.serialization.Printer;\n-import com.sun.hotspot.igv.settings.Settings;\n@@ -35,3 +34,0 @@\n-import java.io.OutputStreamWriter;\n-import java.io.Writer;\n-import java.nio.file.Files;\n@@ -39,1 +35,0 @@\n-import javax.swing.JFileChooser;\n@@ -42,0 +37,1 @@\n+import org.openide.util.ImageUtilities;\n@@ -53,0 +49,1 @@\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n@@ -68,13 +65,0 @@\n-        save(doc);\n-    }\n-\n-    public static void save(GraphDocument doc) {\n-        JFileChooser fc = new JFileChooser();\n-        fc.setFileFilter(ImportAction.getFileFilter());\n-        fc.setCurrentDirectory(new File(Settings.get().get(Settings.DIRECTORY, Settings.DIRECTORY_DEFAULT)));\n-\n-        if (fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {\n-            File file = fc.getSelectedFile();\n-            if (!file.getName().contains(\".\")) {\n-                file = new File(file.getAbsolutePath() + \".xml\");\n-            }\n@@ -82,13 +66,4 @@\n-            File dir = file;\n-            if (!dir.isDirectory()) {\n-                dir = dir.getParentFile();\n-            }\n-            Settings.get().put(Settings.DIRECTORY, dir.getAbsolutePath());\n-            try {\n-                try (Writer writer = new OutputStreamWriter(Files.newOutputStream(file.toPath()))) {\n-                    Printer p = new Printer();\n-                    p.export(writer, doc);\n-                }\n-            } catch (IOException e) {\n-                e.printStackTrace();\n-            }\n+        try {\n+            OutlineTopComponent.saveGraphDocument(doc, null);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n@@ -105,1 +80,1 @@\n-        return \"com\/sun\/hotspot\/igv\/coordinator\/images\/save.png\";\n+        return \"com\/sun\/hotspot\/igv\/coordinator\/images\/saveall.gif\";\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/java\/com\/sun\/hotspot\/igv\/coordinator\/actions\/SaveAsAction.java","additions":9,"deletions":34,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-CTL_OutlineTopComponent=Outline\n+CTL_OutlineTopComponent=Workspace\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/resources\/com\/sun\/hotspot\/igv\/coordinator\/Bundle.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-CTL_OutlineAction=Outline\n+CTL_OutlineAction=Workspace\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/resources\/com\/sun\/hotspot\/igv\/coordinator\/actions\/Bundle.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/resources\/com\/sun\/hotspot\/igv\/coordinator\/images\/saveas.png","binary":true,"status":"added"},{"patch":"@@ -4,0 +4,5 @@\n+    <folder name=\"Toolbars\">\n+        <folder name=\"GlobalToolbar\">\n+            <attr name=\"position\" intvalue=\"0\"\/>\n+        <\/folder>\n+    <\/folder>\n","filename":"src\/utils\/IdealGraphVisualizer\/Coordinator\/src\/main\/resources\/com\/sun\/hotspot\/igv\/coordinator\/layer.xml","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-            for (FolderElement e : document.elements) {\n+            for (FolderElement e : document.getElements()) {\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/GraphDocument.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,1 +129,1 @@\n-        String displayName = (getParent() == null ? \"\" : getParent().getElements().indexOf(this) + 1 + \" - \") + getName();\n+        String displayName = (getParent() == null ? \"\" : getIndex() + 1 + \" - \") + getName();\n@@ -136,0 +136,9 @@\n+    public int getIndex() {\n+        Folder parent = getParent();\n+        if (parent != null) {\n+            return parent.getElements().indexOf(this);\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/Group.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-    void view(InputGraph graph, boolean newTab);\n+    InputGraph view(InputGraph graph, boolean newTab);\n@@ -36,1 +36,1 @@\n-    void viewDifference(InputGraph firstGraph, InputGraph secondGraph);\n+    InputGraph viewDifference(InputGraph firstGraph, InputGraph secondGraph);\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/services\/GraphViewer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openide.util.ImageUtilities;\n@@ -54,1 +55,1 @@\n-\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/FilterWindow\/src\/main\/java\/com\/sun\/hotspot\/igv\/filterwindow\/actions\/MoveFilterDownAction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openide.util.ImageUtilities;\n@@ -54,0 +55,1 @@\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/FilterWindow\/src\/main\/java\/com\/sun\/hotspot\/igv\/filterwindow\/actions\/MoveFilterUpAction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openide.util.ImageUtilities;\n@@ -40,0 +41,1 @@\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/FilterWindow\/src\/main\/java\/com\/sun\/hotspot\/igv\/filterwindow\/actions\/NewFilterAction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import org.openide.util.ImageUtilities;\n@@ -76,0 +77,1 @@\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/FilterWindow\/src\/main\/java\/com\/sun\/hotspot\/igv\/filterwindow\/actions\/RemoveFilterAction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openide.util.ImageUtilities;\n@@ -50,0 +51,1 @@\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/FilterWindow\/src\/main\/java\/com\/sun\/hotspot\/igv\/filterwindow\/actions\/RemoveFilterSettingsAction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openide.util.ImageUtilities;\n@@ -50,0 +51,1 @@\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/FilterWindow\/src\/main\/java\/com\/sun\/hotspot\/igv\/filterwindow\/actions\/SaveFilterSettingsAction.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -329,5 +329,7 @@\n-        Group group = getModel().getGroup();\n-        if (!group.getParent().getElements().contains(group) ||\n-            group.getGraphs().isEmpty()) {\n-            close();\n-        }\n+        SwingUtilities.invokeLater(() -> {\n+            Group group = getModel().getGroup();\n+            if (!group.getParent().getElements().contains(group) ||\n+                    group.getGraphs().isEmpty()) {\n+                close();\n+            }\n+        });\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/EditorTopComponent.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import com.sun.hotspot.igv.graph.Diagram;\n-import com.sun.hotspot.igv.settings.Settings;\n@@ -41,1 +39,1 @@\n-    public void viewDifference(InputGraph firstGraph, InputGraph secondGraph) {\n+    public InputGraph viewDifference(InputGraph firstGraph, InputGraph secondGraph) {\n@@ -44,1 +42,1 @@\n-            view(diffGraph, true);\n+            return view(diffGraph, true);\n@@ -46,5 +44,7 @@\n-            view(firstGraph, true);\n-            EditorTopComponent etc = EditorTopComponent.findEditorForGraph(firstGraph);\n-            if (etc != null) {\n-                etc.getModel().selectDiffGraph(secondGraph);\n-                etc.requestActive();\n+            if (view(firstGraph, true) != null) {\n+                EditorTopComponent etc = EditorTopComponent.findEditorForGraph(firstGraph);\n+                if (etc != null) {\n+                    etc.getModel().selectDiffGraph(secondGraph);\n+                    etc.requestActive();\n+                    return etc.getModel().getGraph();\n+                }\n@@ -52,0 +52,1 @@\n+            return null;\n@@ -56,1 +57,1 @@\n-    public void view(InputGraph graph, boolean newTab) {\n+    public InputGraph view(InputGraph graph, boolean newTab) {\n@@ -62,1 +63,1 @@\n-                return;\n+                return etc.getModel().getGraph();\n@@ -69,0 +70,1 @@\n+        return etc.getModel().getGraph();\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/GraphViewerImplementation.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        putValue(Action.SMALL_ICON , ImageUtilities.loadImageIcon(iconResource(), true));\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ExportAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-        putValue(Action.SMALL_ICON , ImageUtilities.loadImageIcon(iconResource(), true));\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ModelAwareAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        putValue(Action.SMALL_ICON , ImageUtilities.loadImageIcon(iconResource(), true));\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomInAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        putValue(Action.SMALL_ICON , ImageUtilities.loadImageIcon(iconResource(), true));\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomOutAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        putValue(Action.SMALL_ICON , ImageUtilities.loadImageIcon(iconResource(), true));\n+        putValue(Action.SMALL_ICON, ImageUtilities.loadImageIcon(iconResource(), true));\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/actions\/ZoomResetAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,10 @@\n-mvn --batch-mode -f application\/pom.xml nbm:run-platform >.igv.log 2>&1\n+DEFAULT_WORKSPACE=\"$(pwd)\/workspace\"\n+DEFAULT_WORKSPACE=${IGV_WORKSPACE:-$DEFAULT_WORKSPACE}\n+WORKSPACE=${1:-$DEFAULT_WORKSPACE}\n+echo \"The IGV workspace in which the imported graphs are saved can be set as follows:\"\n+echo \"  1) export IGV_WORKSPACE=path\/to\/workspace\"\n+echo \"  2) .\/igv.sh path\/to\/workspace\"\n+echo \"  3) default is .\/workspace\"\n+echo\n+echo \"IGV workspace : $WORKSPACE\";\n+mvn --batch-mode -f application\/pom.xml --define netbeans.userdir=$WORKSPACE nbm:run-platform >.igv.log 2>&1\n","filename":"src\/utils\/IdealGraphVisualizer\/igv.sh","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}