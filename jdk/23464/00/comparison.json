{"files":[{"patch":"@@ -370,1 +370,1 @@\n-        lock.lock();\n+        lock.lockInterruptibly();\n@@ -387,1 +387,1 @@\n-        lock.lock();\n+        lock.lockInterruptibly();\n@@ -482,1 +482,1 @@\n-        lock.lock();\n+        lock.lockInterruptibly();\n@@ -495,1 +495,1 @@\n-        lock.lock();\n+        lock.lockInterruptibly();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/LinkedBlockingDeque.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.concurrent.ExecutionException;\n@@ -48,0 +49,1 @@\n+import java.util.concurrent.Future;\n@@ -79,3 +81,3 @@\n-                            new Unbounded().testSuite(),\n-                            new Bounded().testSuite(),\n-                            CollectionTest.testSuite(new Implementation()));\n+                new Unbounded().testSuite(),\n+                new Bounded().testSuite(),\n+                CollectionTest.testSuite(new Implementation()));\n@@ -201,1 +203,1 @@\n-                       !q.peekFirst().equals(i));\n+                    !q.peekFirst().equals(i));\n@@ -215,1 +217,1 @@\n-                       !q.peek().equals(i));\n+                    !q.peek().equals(i));\n@@ -229,1 +231,1 @@\n-                       !q.peekLast().equals(i));\n+                    !q.peekLast().equals(i));\n@@ -1392,1 +1394,1 @@\n-                                 q.pollLast(LONG_DELAY_MS, MILLISECONDS));\n+                            q.pollLast(LONG_DELAY_MS, MILLISECONDS));\n@@ -1646,1 +1648,1 @@\n-        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext(); ) {\n@@ -1660,1 +1662,1 @@\n-        for (Iterator<? extends Item> it = q.iterator(); it.hasNext();) {\n+        for (Iterator<? extends Item> it = q.iterator(); it.hasNext(); ) {\n@@ -1697,1 +1699,1 @@\n-            for (Iterator<? extends Item> it = q.descendingIterator(); it.hasNext();) {\n+            for (Iterator<? extends Item> it = q.descendingIterator(); it.hasNext(); ) {\n@@ -1877,2 +1879,2 @@\n-            new LinkedBlockingDeque<>(),\n-            populatedDeque(2),\n+                new LinkedBlockingDeque<>(),\n+                populatedDeque(2),\n@@ -1889,0 +1891,56 @@\n+    public void testInterruptedExceptionThrownInBlockingMethods() throws InterruptedException {\n+        \/\/ Ensure that putFirst(), putLast(), takeFirst(), and takeLast()\n+        \/\/ immediately throw an InterruptedException if the thread is\n+        \/\/ interrupted, to be consistent with other blocking queues such as\n+        \/\/ ArrayBlockingQueue and LinkedBlockingQueue\n+        try (var pool = Executors.newSingleThreadExecutor()) {\n+            Future<Void> success = pool.submit(() -> {\n+                var queue = new LinkedBlockingDeque<>();\n+                Thread.currentThread().interrupt();\n+                try {\n+                    queue.putFirst(42);\n+                    fail(\"Expected InterruptedException in putFirst()\");\n+                } catch (InterruptedException expected) {\n+                    \/\/ good that's what we want\n+                }\n+\n+                Thread.currentThread().interrupt();\n+                try {\n+                    queue.putLast(42);\n+                    fail(\"Expected InterruptedException in putLast()\");\n+                } catch (InterruptedException expected) {\n+                    \/\/ good that's what we want\n+                }\n+\n+                queue.add(42);\n+                Thread.currentThread().interrupt();\n+                try {\n+                    queue.takeFirst();\n+                    fail(\"Expected InterruptedException in takeFirst()\");\n+                } catch (InterruptedException expected) {\n+                    \/\/ good that's what we want\n+                }\n+\n+                queue.add(42);\n+                Thread.currentThread().interrupt();\n+                try {\n+                    queue.takeLast();\n+                    fail(\"Expected InterruptedException in takeLast()\");\n+                } catch (InterruptedException expected) {\n+                    \/\/ good that's what we want\n+                }\n+                return null;\n+            });\n+            try {\n+                success.get();\n+            } catch (ExecutionException e) {\n+                try {\n+                    throw e.getCause();\n+                } catch (Error | RuntimeException unchecked) {\n+                    throw unchecked;\n+                } catch (Throwable cause) {\n+                    throw new AssertionError(cause);\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/LinkedBlockingDequeTest.java","additions":70,"deletions":12,"binary":false,"changes":82,"status":"modified"}]}