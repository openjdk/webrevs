{"files":[{"patch":"@@ -2873,4 +2873,5 @@\n-void OuterStripMinedLoopNode::fix_sunk_stores(CountedLoopEndNode* inner_cle, LoopNode* inner_cl, PhaseIterGVN* igvn,\n-                                              PhaseIdealLoop* iloop) {\n-  Node* cle_out = inner_cle->proj_out(false);\n-  Node* cle_tail = inner_cle->proj_out(true);\n+void OuterStripMinedLoopNode::fix_sunk_stores_when_back_to_counted_loop(PhaseIterGVN* igvn,\n+                                                                        PhaseIdealLoop* iloop) const {\n+  CountedLoopNode* inner_cl = inner_counted_loop();\n+  Node* cle_out = inner_loop_exit();\n+\n@@ -2991,0 +2992,62 @@\n+\/\/ Sunk stores should be referenced from an outer loop memory Phi\n+void OuterStripMinedLoopNode::handle_sunk_stores_at_expansion(PhaseIterGVN* igvn) {\n+  Node* cle_exit_proj = inner_loop_exit();\n+\n+  \/\/ Sunk stores are pinned on the loop exit projection of the inner loop\n+#ifdef ASSERT\n+  int stores_in_outer_loop_cnt = 0;\n+  for (DUIterator_Fast imax, i = cle_exit_proj->fast_outs(imax); i < imax; i++) {\n+    Node* u = cle_exit_proj->fast_out(i);\n+    if (u->is_Store()) {\n+      stores_in_outer_loop_cnt++;\n+    }\n+  }\n+#endif\n+\n+  \/\/ Sunk stores are reachable from the memory state of the outer loop safepoint\n+  Node* safepoint = outer_safepoint();\n+  Node* safepoint_mem = safepoint->in(TypeFunc::Memory);\n+  if (safepoint_mem->is_MergeMem()) {\n+    MergeMemNode* mm = safepoint_mem->as_MergeMem();\n+    DEBUG_ONLY(int stores_in_outer_loop_cnt2 = 0);\n+    for (MergeMemStream mms(mm); mms.next_non_empty(); ) {\n+      Node* mem = mms.memory();\n+      Node* last = mem;\n+      Node* first = nullptr;\n+      while (mem->is_Store() && mem->in(0) == cle_exit_proj) {\n+        DEBUG_ONLY(stores_in_outer_loop_cnt2++);\n+        first = mem;\n+        mem = mem->in(MemNode::Memory);\n+      }\n+      if (first != nullptr) {\n+        \/\/ Found a chain of Stores that were sunk\n+        \/\/ Do we already have a memory Phi for that slice on the outer loop? If that is the case, that Phi was created\n+        \/\/ by cloning an inner loop Phi. The inner loop Phi should have mem, the memory state of the first Store out of\n+        \/\/ the inner loop as input on the backedge. So does the outer loop Phi given it's a clone.\n+        Node* phi = nullptr;\n+        for (DUIterator_Fast imax, i = mem->fast_outs(imax); i < imax; i++) {\n+          Node* u = mem->fast_out(i);\n+          if (u->is_Phi() && u->in(0) == this && u->in(LoopBackControl) == mem) {\n+            assert(phi == nullptr, \"there should be only one\");\n+            phi = u;\n+            PRODUCT_ONLY(break);\n+          }\n+        }\n+        if (phi == nullptr) {\n+          \/\/ No outer loop Phi? create one\n+          phi = PhiNode::make(this, last);\n+          phi->set_req(EntryControl, mem);\n+          phi = igvn->transform(phi);\n+          igvn->replace_input_of(first, MemNode::Memory, phi);\n+        } else {\n+          \/\/ Fix memory state along the backedge: it should be the last sunk Stores of the chain\n+          igvn->replace_input_of(phi, LoopBackControl, last);\n+        }\n+      }\n+    }\n+    assert(stores_in_outer_loop_cnt == stores_in_outer_loop_cnt2, \"inconsistent\");\n+  } else {\n+    assert(stores_in_outer_loop_cnt == 0, \"inconsistent\");\n+  }\n+}\n+\n@@ -2995,1 +3058,1 @@\n-  CountedLoopNode* inner_cl = unique_ctrl_out()->as_CountedLoop();\n+  CountedLoopNode* inner_cl = inner_counted_loop();\n@@ -3013,1 +3076,1 @@\n-  CountedLoopEndNode* inner_cle = inner_cl->loopexit();\n+  CountedLoopEndNode* inner_cle = inner_counted_loop_end();\n@@ -3114,0 +3177,2 @@\n+  handle_sunk_stores_at_expansion(igvn);\n+\n@@ -3169,1 +3234,1 @@\n-  fix_sunk_stores(inner_cle, inner_cl, igvn, iloop);\n+  fix_sunk_stores_when_back_to_counted_loop(igvn, iloop);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":72,"deletions":7,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -576,1 +576,2 @@\n-  static void fix_sunk_stores(CountedLoopEndNode* inner_cle, LoopNode* inner_cl, PhaseIterGVN* igvn, PhaseIdealLoop* iloop);\n+  void fix_sunk_stores_when_back_to_counted_loop(PhaseIterGVN* igvn, PhaseIdealLoop* iloop) const;\n+  void handle_sunk_stores_at_expansion(PhaseIterGVN* igvn);\n@@ -592,0 +593,4 @@\n+  CountedLoopNode* inner_counted_loop() const { return unique_ctrl_out()->as_CountedLoop(); }\n+  CountedLoopEndNode* inner_counted_loop_end() const { return  inner_counted_loop()->loopexit(); }\n+  IfFalseNode* inner_loop_exit() const { return inner_counted_loop_end()->proj_out(false)->as_IfFalse(); }\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8356708\n+ * @summary C2: loop strip mining expansion doesn't take sunk stores into account\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:LoopMaxUnroll=0\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM -XX:StressSeed=26601954 TestStoresSunkInOuterStripMinedLoop\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -XX:LoopMaxUnroll=0\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM TestStoresSunkInOuterStripMinedLoop\n+ * @run main TestStoresSunkInOuterStripMinedLoop\n+ *\n+ *\/\n+\n+public class TestStoresSunkInOuterStripMinedLoop {\n+    private static int field;\n+    private static volatile int volatileField;\n+\n+    public static void main(String[] args) {\n+        A a1 = new A();\n+        A a2 = new A();\n+        for (int i = 0; i < 20_000; i++) {\n+            field = 0;\n+            test1();\n+            if (field != 1500) {\n+                throw new RuntimeException(field + \" != 1500\");\n+            }\n+            a1.field = 0;\n+            test2(a1, a2);\n+            if (a1.field != 1500) {\n+                throw new RuntimeException(a1.field + \" != 1500\");\n+            }\n+            a1.field = 0;\n+            test3(a1, a2);\n+            if (a1.field != 1500) {\n+                throw new RuntimeException(a1.field + \" != 1500\");\n+            }\n+        }\n+    }\n+\n+    \/\/ Single store sunk in outer loop, no store in inner loop\n+    private static float test1() {\n+        int v = field;\n+        float f = 1;\n+        for (int i = 0; i < 1500; i++) {\n+            f *= 2;\n+            v++;\n+            field = v;\n+        }\n+        return f;\n+    }\n+\n+    \/\/ Couple stores sunk in outer loop, no store in inner loop\n+    private static float test2(A a1, A a2) {\n+        field = a1.field + a2.field;\n+        volatileField = 42;\n+        int v = a1.field;\n+        float f = 1;\n+        for (int i = 0; i < 1500; i++) {\n+            f *= 2;\n+            v++;\n+            a1.field = v;\n+            a2.field = v;\n+        }\n+        return f;\n+    }\n+\n+    \/\/ Store sunk in outer loop, store in inner loop\n+    private static float test3(A a1, A a2) {\n+        field = a1.field + a2.field;\n+        volatileField = 42;\n+        int v = a1.field;\n+        float f = 1;\n+        A a = a2;\n+        for (int i = 0; i < 1500; i++) {\n+            f *= 2;\n+            v++;\n+            a.field = v;\n+            a = a1;\n+            a2.field = v;\n+        }\n+        return f;\n+    }\n+\n+    static class A {\n+        int field;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestStoresSunkInOuterStripMinedLoop.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}