{"files":[{"patch":"@@ -335,0 +335,2 @@\n+\/\/ Not adding Phis to the outer loop head from the beginning, and only adding them after loop optimizations\n+\/\/ does not conform to C2's IR rules: any variable or memory slice that is mutated in a loop should have a Phi.\n@@ -3020,5 +3022,8 @@\n-\/\/ the outer loop was created. Sunk Stores cause an extra challenge as, if all Stores in the inner loop were sunk for\n-\/\/ a particular memory slice, there's no Phi left for that memory slice in the inner loop. So an extra Phi must be added\n-\/\/ for each chain of sunk Stores for a particular memory slice. If some Stores were sunk and some left in the inner loop,\n-\/\/ a Phi was already created in the outer loop but its backedge input wasn't wired correctly to the last Store of the\n-\/\/ chain.\n+\/\/ the outer loop was just now created. However, Sunk Stores cause an extra challenge:\n+\/\/ 1) If all Stores in the inner loop were sunk for a particular memory slice, there's no Phi left for that memory\n+\/\/    slice in the inner loop any more, and hence we did not yet add a Phi for the outer loop. So an extra Phi\n+\/\/    must now be added for each chain of sunk Stores for a particular memory slice.\n+\/\/ 2) If some Stores were sunk and some left in the inner loop, a Phi was already created in the outer loop but\n+\/\/    its backedge input wasn't wired correctly to the last Store of the chain. We had wired the memory state at\n+\/\/    the inner loop exit to the Phi backedge, but we should have taken the last Store of the chain instead. We\n+\/\/    will now have to fix that too.\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}