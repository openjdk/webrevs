{"files":[{"patch":"@@ -301,13 +301,39 @@\n-\/\/ Create a skeleton strip mined outer loop: a Loop head before the\n-\/\/ inner strip mined loop, a safepoint and an exit condition guarded\n-\/\/ by an opaque node after the inner strip mined loop with a backedge\n-\/\/ to the loop head. The inner strip mined loop is left as it is. Only\n-\/\/ once loop optimizations are over, do we adjust the inner loop exit\n-\/\/ condition to limit its number of iterations, set the outer loop\n-\/\/ exit condition and add Phis to the outer loop head. Some loop\n-\/\/ optimizations that operate on the inner strip mined loop need to be\n-\/\/ aware of the outer strip mined loop: loop unswitching needs to\n-\/\/ clone the outer loop as well as the inner, unrolling needs to only\n-\/\/ clone the inner loop etc. No optimizations need to change the outer\n-\/\/ strip mined loop as it is only a skeleton.\n-IdealLoopTree* PhaseIdealLoop::create_outer_strip_mined_loop(BoolNode *test, Node *cmp, Node *init_control,\n+\/\/ Create a skeleton strip mined outer loop: an OuterStripMinedLoop head before the inner strip mined CountedLoop, a\n+\/\/ SafePoint on exit of the inner CountedLoopEnd and an OuterStripMinedLoopEnd test that can't constant fold until loop\n+\/\/ optimizations are over. The inner strip mined loop is left as it is. Only once loop optimizations are over, do we\n+\/\/ adjust the inner loop exit condition to limit its number of iterations, set the outer loop exit condition and add\n+\/\/ Phis to the outer loop head. Some loop optimizations that operate on the inner strip mined loop need to be aware of\n+\/\/ the outer strip mined loop: loop unswitching needs to clone the outer loop as well as the inner, unrolling needs to\n+\/\/ only clone the inner loop etc. No optimizations need to change the outer strip mined loop as it is only a skeleton.\n+\/\/\n+\/\/ Schematically:\n+\/\/\n+\/\/ OuterStripMinedLoop -------|\n+\/\/       |                    |\n+\/\/ CountedLoop ----------- |  |\n+\/\/     \\- Phi (iv) -|      |  |\n+\/\/       \/  \\       |      |  |\n+\/\/     CmpI  AddI --|      |  |\n+\/\/       \\                 |  |\n+\/\/        Bool             |  |\n+\/\/         \\               |  |\n+\/\/ CountedLoopEnd          |  |\n+\/\/       \/  \\              |  |\n+\/\/ IfFalse   IfTrue--------|  |\n+\/\/      |                     |\n+\/\/ SafePoint                  |\n+\/\/      |                     |\n+\/\/ OuterStripMinedLoopEnd     |\n+\/\/       \/   \\                |\n+\/\/ IfFalse   IfTrue-----------|\n+\/\/      |\n+\/\/\n+\/\/\n+\/\/ As loop optimizations transform the inner loop, the outer strip mined loop stays mostly unchanged. The only exception\n+\/\/ is nodes referenced from the SafePoint and sunk from the inner loop: they end up in the outer strip mined loop.\n+\/\/\n+\/\/ The main motivation for such a design that doesn't conform to C2's IR rules is to allow existing loop optimizations\n+\/\/ to be mostly unaffected by the outer strip mined loop: the only extra step needed in most cases is to step over the\n+\/\/ OuterStripMinedLoop. The main drawback is that once loop optimizations are over, an extra step is needed to finish\n+\/\/ constructing the outer loop. This is handled by OuterStripMinedLoopNode::adjust_strip_mined_loop().\n+IdealLoopTree* PhaseIdealLoop::create_outer_strip_mined_loop(Node* init_control,\n@@ -2258,3 +2284,2 @@\n-    outer_ilt = create_outer_strip_mined_loop(test, cmp, init_control, loop,\n-                                              cl_prob, le->_fcnt, entry_control,\n-                                              iffalse);\n+    outer_ilt = create_outer_strip_mined_loop(init_control, loop, cl_prob, le->_fcnt,\n+                                              entry_control, iffalse);\n@@ -2992,2 +3017,9 @@\n-\/\/ Sunk stores should be referenced from an outer loop memory Phi\n-void OuterStripMinedLoopNode::handle_sunk_stores_at_expansion(PhaseIterGVN* igvn) {\n+\/\/ The outer strip mined loop is initially only partially constructed. In particular Phis are omitted.\n+\/\/ See comment above: PhaseIdealLoop::create_outer_strip_mined_loop()\n+\/\/ We're now in the process of finishing the construction of the outer loop. For each Phi in the inner loop, a Phi in\n+\/\/ the outer loop was created. Sunk Stores cause an extra challenge as, if all Stores in the inner loop were sunk for\n+\/\/ a particular memory slice, there's no Phi left for that memory slice in the inner loop. So an extra Phi must be added\n+\/\/ for each chain of sunk Stores for a particular memory slice. If some Stores were sunk and some left in the inner loop,\n+\/\/ a Phi was already created in the outer loop but its backedge input wasn't wired correctly to the last Store of the\n+\/\/ chain.\n+void OuterStripMinedLoopNode::handle_sunk_stores_when_finishing_construction(PhaseIterGVN* igvn) {\n@@ -2996,1 +3028,4 @@\n-  \/\/ Sunk stores are pinned on the loop exit projection of the inner loop\n+  \/\/ Find Sunk stores: Sunk stores are pinned on the loop exit projection of the inner loop. Indeed, because Sunk Stores\n+  \/\/ modify the memory state captured by the SafePoint in the outer strip mined loop, they must be above it. The\n+  \/\/ SafePoint's control input is the loop exit projection. It's also the only control out of the inner loop above the\n+  \/\/ SafePoint.\n@@ -3009,1 +3044,1 @@\n-  MergeMemNode* mm = safepoint->in(TypeFunc::Memory)->isa_MergeMem;\n+  MergeMemNode* mm = safepoint->in(TypeFunc::Memory)->isa_MergeMem();\n@@ -3058,0 +3093,1 @@\n+  verify_strip_mined(1);\n@@ -3180,1 +3216,1 @@\n-  handle_sunk_stores_at_expansion(igvn);\n+  handle_sunk_stores_when_finishing_construction(igvn);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":57,"deletions":21,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -577,1 +577,1 @@\n-  void handle_sunk_stores_at_expansion(PhaseIterGVN* igvn);\n+  void handle_sunk_stores_when_finishing_construction(PhaseIterGVN* igvn);\n@@ -1301,1 +1301,1 @@\n-  IdealLoopTree* create_outer_strip_mined_loop(BoolNode *test, Node *cmp, Node *init_control,\n+  IdealLoopTree* create_outer_strip_mined_loop(Node* init_control,\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}