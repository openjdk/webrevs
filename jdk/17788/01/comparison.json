{"files":[{"patch":"@@ -64,0 +64,1 @@\n+  _marking_stats_cache = nullptr;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -114,1 +114,29 @@\n- public:\n+  \/\/ To collect per-region live-words in a worker local cache in order to\n+  \/\/ reduce threads contention.\n+  class MarkingStatsCache : public CHeapObj<mtGC> {\n+    constexpr static size_t num_entries = 1024;\n+    static_assert(is_power_of_2(num_entries), \"inv\");\n+    static_assert(num_entries > 0, \"inv\");\n+\n+    constexpr static size_t entry_mask = num_entries - 1;\n+\n+    struct CacheEntry {\n+      size_t region_id;\n+      size_t live_words;\n+    };\n+\n+    CacheEntry entries[num_entries] = {};\n+\n+    inline void push(size_t region_id, size_t live_words);\n+\n+  public:\n+    inline void push(oop obj, size_t live_words);\n+\n+    inline void evict(size_t index);\n+\n+    inline void evict_all();\n+  };\n+\n+  MarkingStatsCache* _marking_stats_cache;\n+\n+public:\n@@ -201,0 +229,4 @@\n+  inline void create_marking_stats_cache();\n+\n+  inline void flush_and_destroy_marking_stats_cache();\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.hpp","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -110,0 +110,2 @@\n+      assert(_marking_stats_cache != nullptr, \"inv\");\n+      _marking_stats_cache->push(obj, obj->size());\n@@ -177,0 +179,69 @@\n+inline void ParCompactionManager::MarkingStatsCache::push(size_t region_id, size_t live_words) {\n+  size_t index = (region_id & entry_mask);\n+  if (entries[index].region_id == region_id) {\n+    \/\/ Hit\n+    entries[index].live_words += live_words;\n+    return;\n+  }\n+  \/\/ Miss\n+  if (entries[index].live_words != 0) {\n+    evict(index);\n+  }\n+  entries[index].region_id = region_id;\n+  entries[index].live_words = live_words;\n+}\n+\n+inline void ParCompactionManager::MarkingStatsCache::push(oop obj, size_t live_words) {\n+  ParallelCompactData& data = PSParallelCompact::summary_data();\n+  const size_t region_size = ParallelCompactData::RegionSize;\n+\n+  HeapWord* addr = cast_from_oop<HeapWord*>(obj);\n+  const size_t start_region_id = data.addr_to_region_idx(addr);\n+  const size_t end_region_id = data.addr_to_region_idx(addr + live_words - 1);\n+  if (start_region_id == end_region_id) {\n+    \/\/ Completely inside this region\n+    push(start_region_id, live_words);\n+    return;\n+  }\n+\n+  \/\/ First region\n+  push(start_region_id, region_size - data.region_offset(addr));\n+\n+  \/\/ Middle regions; bypass cache\n+  for (size_t i = start_region_id + 1; i < end_region_id; ++i) {\n+    data.region(i)->set_partial_obj_size(region_size);\n+    data.region(i)->set_partial_obj_addr(addr);\n+  }\n+\n+  \/\/ Last region; bypass cache\n+  const size_t end_offset = data.region_offset(addr + live_words - 1);\n+  data.region(end_region_id)->set_partial_obj_size(end_offset + 1);\n+  data.region(end_region_id)->set_partial_obj_addr(addr);\n+}\n+\n+inline void ParCompactionManager::MarkingStatsCache::evict(size_t index) {\n+  ParallelCompactData& data = PSParallelCompact::summary_data();\n+  \/\/ flush to global data\n+  data.region(entries[index].region_id)->add_live_obj(entries[index].live_words);\n+}\n+\n+inline void ParCompactionManager::MarkingStatsCache::evict_all() {\n+  for (size_t i = 0; i < num_entries; ++i) {\n+    if (entries[i].live_words != 0) {\n+      evict(i);\n+      entries[i].live_words = 0;\n+    }\n+  }\n+}\n+\n+inline void ParCompactionManager::create_marking_stats_cache() {\n+  assert(_marking_stats_cache == nullptr, \"precondition\");\n+  _marking_stats_cache = new MarkingStatsCache();\n+}\n+\n+inline void ParCompactionManager::flush_and_destroy_marking_stats_cache() {\n+  _marking_stats_cache->evict_all();\n+  delete _marking_stats_cache;\n+  _marking_stats_cache = nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.inline.hpp","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1972,0 +1972,1 @@\n+    cm->create_marking_stats_cache();\n@@ -2048,0 +2049,12 @@\n+  {\n+    GCTraceTime(Debug, gc, phases) tm(\"Flush Marking Stats\", &_gc_timer);\n+\n+    struct FlushMarkingStatsCache : public WorkerTask {\n+      FlushMarkingStatsCache() : WorkerTask(\"FlushMarkingStatsCache\") {}\n+      void work(uint worker_id) override {\n+        ParCompactionManager* cm = ParCompactionManager::gc_thread_compaction_manager(worker_id);\n+        cm->flush_and_destroy_marking_stats_cache();\n+      }\n+    } task;\n+    ParallelScavengeHeap::heap()->workers().run_task(&task);\n+  }\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -103,1 +103,0 @@\n-    _summary_data.add_obj(obj, obj_size);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}