{"files":[{"patch":"@@ -128,8 +128,4 @@\n-    if (thread != nullptr) {\n-      _outer = thread->is_in_internal_oome_mark();\n-      thread->set_is_in_internal_oome_mark(true);\n-      _thread = thread;\n-    } else {\n-      _outer = false;\n-      _thread = nullptr;\n-    }\n+    assert(thread != nullptr, \"nullptr is not supported\");\n+    _outer = thread->is_in_internal_oome_mark();\n+    thread->set_is_in_internal_oome_mark(true);\n+    _thread = thread;\n@@ -139,6 +135,4 @@\n-    if (_thread != nullptr) {\n-      \/\/ Check that only InternalOOMEMark sets\n-      \/\/ JavaThread::_is_in_internal_oome_mark\n-      assert(_thread->is_in_internal_oome_mark(), \"must be\");\n-      _thread->set_is_in_internal_oome_mark(_outer);\n-    }\n+    \/\/ Check that only InternalOOMEMark sets\n+    \/\/ JavaThread::_is_in_internal_oome_mark\n+    assert(_thread->is_in_internal_oome_mark(), \"must be\");\n+    _thread->set_is_in_internal_oome_mark(_outer);\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.hpp","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -131,0 +131,1 @@\n+      current->set_vm_result(nullptr);\n@@ -204,0 +205,1 @@\n+    current->set_vm_result(nullptr);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -509,3 +509,3 @@\n-  \/\/ When allocation fails, these stubs return null and have no pending exception. Compiled code\n-  \/\/ can use these stubs if a failed allocation will be retried (e.g., by deoptimizing and\n-  \/\/ re-executing in the interpreter).\n+  \/\/ When allocation fails, these stubs return null and have no pending OutOfMemoryError exception. \n+  \/\/ Compiled code can use these stubs if a failed allocation will be retried (e.g., by deoptimizing \n+  \/\/ and re-executing in the interpreter).\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}