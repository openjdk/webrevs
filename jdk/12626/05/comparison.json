{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -229,1 +229,2 @@\n-            for (WatchEvent.Modifier modifier : modifiers) {\n+            if (modifiers.length > 0) {\n+                WatchEvent.Modifier modifier = modifiers[0];\n@@ -232,5 +233,1 @@\n-                if (!ExtendedOptions.SENSITIVITY_HIGH.matches(modifier) &&\n-                        !ExtendedOptions.SENSITIVITY_MEDIUM.matches(modifier) &&\n-                        !ExtendedOptions.SENSITIVITY_LOW.matches(modifier)) {\n-                    return new UnsupportedOperationException(\"Modifier not supported\");\n-                }\n+                return new UnsupportedOperationException(\"Modifier not supported\");\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxWatchService.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,6 +50,0 @@\n-    public static final FileSystemOption<Integer> SENSITIVITY_HIGH =\n-        new FileSystemOption<>(ExtendedOptions.SENSITIVITY_HIGH);\n-    public static final FileSystemOption<Integer> SENSITIVITY_MEDIUM =\n-        new FileSystemOption<>(ExtendedOptions.SENSITIVITY_MEDIUM);\n-    public static final FileSystemOption<Integer> SENSITIVITY_LOW =\n-        new FileSystemOption<>(ExtendedOptions.SENSITIVITY_LOW);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/FileSystemOption.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,4 +141,0 @@\n-\n-    public static final InternalOption<Integer> SENSITIVITY_HIGH = new InternalOption<>();\n-    public static final InternalOption<Integer> SENSITIVITY_MEDIUM = new InternalOption<>();\n-    public static final InternalOption<Integer> SENSITIVITY_LOW = new InternalOption<>();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/ExtendedOptions.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,2 +65,2 @@\n-    \/\/ default polling interval in seconds\n-    private static final int DEFAULT_POLLING_INTERVAL = 2;\n+    \/\/ polling interval in seconds\n+    private static final int POLLING_INTERVAL = 2;\n@@ -121,3 +121,3 @@\n-        \/\/ Extended modifiers may be used to specify the sensitivity level\n-        int sensitivity = DEFAULT_POLLING_INTERVAL;\n-        for (WatchEvent.Modifier modifier : modifiers) {\n+        \/\/ no modifiers supported at this time\n+        if (modifiers.length > 0) {\n+            WatchEvent.Modifier modifier = modifiers[0];\n@@ -126,10 +126,1 @@\n-\n-            if (ExtendedOptions.SENSITIVITY_HIGH.matches(modifier)) {\n-                sensitivity = ExtendedOptions.SENSITIVITY_HIGH.parameter();\n-            } else if (ExtendedOptions.SENSITIVITY_MEDIUM.matches(modifier)) {\n-                sensitivity = ExtendedOptions.SENSITIVITY_MEDIUM.parameter();\n-            } else if (ExtendedOptions.SENSITIVITY_LOW.matches(modifier)) {\n-                sensitivity = ExtendedOptions.SENSITIVITY_LOW.parameter();\n-            } else {\n-                throw new UnsupportedOperationException(\"Modifier not supported\");\n-            }\n+            throw new UnsupportedOperationException(\"Modifier not supported\");\n@@ -145,1 +136,0 @@\n-            int value = sensitivity;\n@@ -150,1 +140,2 @@\n-                        return doPrivilegedRegister(path, eventSet, value);\n+                        return doPrivilegedRegister(path, eventSet,\n+                                                    POLLING_INTERVAL);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/fs\/PollingWatchService.java","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -349,5 +349,1 @@\n-                    if (!ExtendedOptions.SENSITIVITY_HIGH.matches(modifier) &&\n-                            !ExtendedOptions.SENSITIVITY_MEDIUM.matches(modifier) &&\n-                            !ExtendedOptions.SENSITIVITY_LOW.matches(modifier)) {\n-                        return new UnsupportedOperationException(\"Modifier not supported\");\n-                    }\n+                    return new UnsupportedOperationException(\"Modifier not supported\");\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsWatchService.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.nio.file;\n-\n-import java.nio.file.WatchEvent.Modifier;\n-import jdk.internal.misc.FileSystemOption;\n-\n-\/**\n- * Defines the <em>sensitivity levels<\/em> when registering objects with a\n- * watch service implementation that polls the file system.\n- *\n- * @since 1.7\n- *\/\n-\n-public enum SensitivityWatchEventModifier implements Modifier {\n-    \/**\n-     * High sensitivity.\n-     *\/\n-    HIGH(FileSystemOption.SENSITIVITY_HIGH, 2),\n-    \/**\n-     * Medium sensitivity.\n-     *\/\n-    MEDIUM(FileSystemOption.SENSITIVITY_MEDIUM, 10),\n-    \/**\n-     * Low sensitivity.\n-     *\/\n-    LOW(FileSystemOption.SENSITIVITY_LOW, 30);\n-\n-    \/**\n-     * Returns the sensitivity in seconds.\n-     *\/\n-    public int sensitivityValueInSeconds() {\n-        return sensitivity;\n-    }\n-\n-    private final int sensitivity;\n-    private SensitivityWatchEventModifier(FileSystemOption<Integer> option,\n-                                          int sensitivity) {\n-        this.sensitivity = sensitivity;\n-        option.register(this, sensitivity);\n-    }\n-}\n","filename":"src\/jdk.unsupported\/share\/classes\/com\/sun\/nio\/file\/SensitivityWatchEventModifier.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,152 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 4313887\n- * @summary Sanity test for JDK-specific sensitivity level watch event modifier\n- * @modules jdk.unsupported\n- * @library .. \/test\/lib\n- * @build jdk.test.lib.Platform\n- * @build jdk.test.lib.RandomFactory\n- * @run main\/timeout=240 SensitivityModifier\n- * @key randomness\n- *\/\n-\n-import java.nio.file.Files;\n-import java.nio.file.FileSystem;\n-import java.nio.file.Path;\n-import java.nio.file.WatchEvent;\n-import java.nio.file.WatchKey;\n-import java.nio.file.WatchService;\n-import static java.nio.file.StandardWatchEventKinds.*;\n-import java.io.OutputStream;\n-import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Random;\n-import java.util.concurrent.TimeUnit;\n-import com.sun.nio.file.SensitivityWatchEventModifier;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.RandomFactory;\n-\n-public class SensitivityModifier {\n-    \/\/ on macOS and other platforms, watch services might be based on polling\n-    \/\/ requiring a longer timeout to detect events before returning\n-    static final long POLL_TIMEOUT_SECONDS =\n-        Platform.isLinux() || Platform.isWindows() ? 1 : 2;\n-\n-    static final Random RAND = RandomFactory.getRandom();\n-\n-    static final Map<Path,Integer> pathToTime = new HashMap<>();\n-\n-    static void register(Path[] dirs, WatchService watcher) throws IOException {\n-        pathToTime.clear();\n-        SensitivityWatchEventModifier[] sensitivities =\n-            SensitivityWatchEventModifier.values();\n-        for (int i=0; i<dirs.length; i++) {\n-            SensitivityWatchEventModifier sensitivity =\n-                sensitivities[RAND.nextInt(sensitivities.length)];\n-            Path dir = dirs[i];\n-            dir.register(watcher, new WatchEvent.Kind<?>[]{ ENTRY_MODIFY },\n-                sensitivity);\n-            pathToTime.put(dir, sensitivity.sensitivityValueInSeconds());\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    static void doTest(Path top) throws Exception {\n-        FileSystem fs = top.getFileSystem();\n-        try (WatchService watcher = fs.newWatchService()) {\n-\n-            \/\/ create directories and files\n-            int nDirs = 5 + RAND.nextInt(20);\n-            int nFiles = 50 + RAND.nextInt(50);\n-            Path[] dirs = new Path[nDirs];\n-            Path[] files = new Path[nFiles];\n-            for (int i=0; i<nDirs; i++) {\n-                dirs[i] = Files.createDirectory(top.resolve(\"dir\" + i));\n-            }\n-            for (int i=0; i<nFiles; i++) {\n-                Path dir = dirs[RAND.nextInt(nDirs)];\n-                files[i] = Files.createFile(dir.resolve(\"file\" + i));\n-            }\n-\n-            \/\/ register the directories (random sensitivity)\n-            register(dirs, watcher);\n-\n-            \/\/ sleep a bit here to ensure that modification to the first file\n-            \/\/ can be detected by polling implementations (ie: last modified time\n-            \/\/ may not change otherwise).\n-            try { Thread.sleep(1000); } catch (InterruptedException e) { }\n-\n-            \/\/ modify files and check that events are received\n-            for (int i=0; i<10; i++) {\n-                Path file = files[RAND.nextInt(nFiles)];\n-                System.out.println(\"Modify: \" + file);\n-                try (OutputStream out = Files.newOutputStream(file)) {\n-                    out.write(new byte[100]);\n-                }\n-\n-                System.out.println(\"Waiting for event(s)...\");\n-                boolean eventReceived = false;\n-                WatchKey key = watcher.take();\n-                do {\n-                    for (WatchEvent<?> event: key.pollEvents()) {\n-                        if (event.kind() != ENTRY_MODIFY)\n-                            throw new RuntimeException(\"Unexpected event: \" + event);\n-                        Path name = ((WatchEvent<Path>)event).context();\n-                        if (name.equals(file.getFileName())) {\n-                            eventReceived = true;\n-                            break;\n-                        }\n-                    }\n-                    key.reset();\n-                    key = watcher.poll(POLL_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n-                } while (key != null);\n-\n-                \/\/ we should have received at least one ENTRY_MODIFY event\n-                if (eventReceived) {\n-                    System.out.println(\"Event OK\");\n-                } else {\n-                    Path parent = file.getParent();\n-                    String msg = String.format(\"No ENTRY_MODIFY event received for %s (dir: %s, sensitivity: %d)\",\n-                            file, parent, pathToTime.get(parent));\n-                    throw new RuntimeException(msg);\n-                }\n-\n-                \/\/ re-register the directories to force changing their sensitivity\n-                \/\/ level\n-                register(dirs, watcher);\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        Path dir = TestUtil.createTemporaryDirectory();\n-        try {\n-            doTest(dir);\n-        } finally {\n-            TestUtil.removeAll(dir);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/file\/WatchService\/SensitivityModifier.java","additions":0,"deletions":152,"binary":false,"changes":152,"status":"deleted"}]}