{"files":[{"patch":"@@ -186,1 +186,2 @@\n- *   extensions apart from language identification.<\/dd>\n+ *   extensions apart from language identification. Keys must not be repeated, unless\n+ *   used as values for the key 'x'.<\/dd>\n@@ -249,1 +250,2 @@\n- * form as a locale type subtag).\n+ * form as a locale type subtag). When duplicate keys or attributes occur, they\n+ * are considered ill-formed.\n@@ -564,0 +566,2 @@\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc6067\n+ *      RFC 6067: BCP 47 Extension U\n@@ -1877,1 +1881,1 @@\n-        bldr.setLanguageTag(tag);\n+        bldr.setLanguageTag(tag, true);\n@@ -2715,1 +2719,1 @@\n-         * must be well-formed (see {@link Locale}) or an exception is\n+         * must be {@linkplain Locale##def_language well-formed} or an exception is\n@@ -2734,1 +2738,1 @@\n-                localeBuilder.setLanguageTag(tag);\n+                localeBuilder.setLanguageTag(tag, false);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.IllformedLocaleException;\n@@ -211,1 +212,1 @@\n-                setUnicodeLocaleExtension(val);\n+                setUnicodeLocaleExtension(val, false);\n@@ -305,1 +306,1 @@\n-        return setExtensions(extensions, privateuse);\n+        return setExtensions(extensions, privateuse, true);\n@@ -311,0 +312,1 @@\n+     * Lenient determines duplicate U extension behavior\n@@ -312,1 +314,1 @@\n-    private InternalLocaleBuilder setExtensions(List<String> bcpExtensions, String privateuse) {\n+    private InternalLocaleBuilder setExtensions(List<String> bcpExtensions, String privateuse, boolean lenient) {\n@@ -323,1 +325,1 @@\n-                        setUnicodeLocaleExtension(bcpExt.substring(2));\n+                        setUnicodeLocaleExtension(bcpExt.substring(2), lenient);\n@@ -347,0 +349,1 @@\n+     * Lenient determines duplicate U Extension behavior\n@@ -348,1 +351,1 @@\n-    public InternalLocaleBuilder setLanguageTag(LanguageTag langtag) {\n+    public InternalLocaleBuilder setLanguageTag(LanguageTag langtag, boolean lenient) {\n@@ -371,1 +374,1 @@\n-        setExtensions(langtag.extensions(), langtag.privateuse());\n+        setExtensions(langtag.extensions(), langtag.privateuse(), lenient);\n@@ -587,1 +590,1 @@\n-     * Duplicated attributes\/keywords will be ignored.\n+     * Duplicated attributes\/keywords will be ignored if lenient, otherwise failure.\n@@ -590,1 +593,1 @@\n-    private void setUnicodeLocaleExtension(String subtags) {\n+    private void setUnicodeLocaleExtension(String subtags, boolean lenient) {\n@@ -609,1 +612,4 @@\n-            uattributes.add(new CaseInsensitiveString(itr.current()));\n+            if (!uattributes.add(new CaseInsensitiveString(itr.current())) && !lenient) {\n+                throw new IllformedLocaleException(\n+                        \"Duplicate U-extension attribute: \\\"%s\\\"\".formatted(itr.current()));\n+            }\n@@ -631,1 +637,10 @@\n-                    key = ukeywords.containsKey(tmpKey) ? null : tmpKey;\n+                    if (ukeywords.containsKey(tmpKey)) {\n+                        if (lenient) {\n+                            key = null;\n+                        } else {\n+                            throw new IllformedLocaleException(\n+                                    \"Duplicate U-extension key: \\\"%s\\\"\".formatted(itr.current()));\n+                        }\n+                    } else {\n+                        key = tmpKey;\n+                    }\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/InternalLocaleBuilder.java","additions":25,"deletions":10,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-            extensions = parseExtensions(itr, pp, errorMsg);\n+            extensions = parseExtensions(itr, pp, errorMsg, lenient);\n@@ -251,1 +251,1 @@\n-                                    StringBuilder err) {\n+                                    StringBuilder err, boolean lenient) {\n@@ -256,1 +256,1 @@\n-\n+        boolean[] seen = new boolean[26];\n@@ -261,0 +261,9 @@\n+                int ext = LocaleUtils.toLowerString(s).charAt(0) - 'a';\n+                if (seen[ext] && !lenient) {\n+                    pp.setErrorIndex(start);\n+                    err.append(\"Duplicate extension '\").append(s).append(\"'\");\n+                    break;\n+                } else {\n+                    seen[ext] = true;\n+                }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/LanguageTag.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -35,2 +36,0 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n@@ -50,0 +49,5 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -52,1 +56,1 @@\n-\/**\n+\/*\n@@ -56,0 +60,1 @@\n+ *      8369590 8369739\n@@ -58,1 +63,0 @@\n- * @compile LocaleEnhanceTest.java\n@@ -63,7 +67,0 @@\n-    public LocaleEnhanceTest() {\n-    }\n-\n-    \/\/\/\n-    \/\/\/ Generic sanity tests\n-    \/\/\/\n-\n@@ -82,0 +79,4 @@\n+    \/\/\/\n+    \/\/\/ Generic sanity tests\n+    \/\/\/\n+\n@@ -127,6 +128,6 @@\n-                assertEquals(msg + \"language\", idl, l.getLanguage());\n-                assertEquals(msg + \"script\", ids, l.getScript());\n-                assertEquals(msg + \"country\", idc, l.getCountry());\n-                assertEquals(msg + \"variant\", idv, l.getVariant());\n-                assertEquals(msg + \"tag\", tag, l.toLanguageTag());\n-                assertEquals(msg + \"id\", id, l.toString());\n+                assertEquals(idl, l.getLanguage(), msg + \"language\");\n+                assertEquals(ids, l.getScript(), msg + \"script\");\n+                assertEquals(idc, l.getCountry(), msg + \"country\");\n+                assertEquals(idv, l.getVariant(), msg + \"variant\");\n+                assertEquals(tag, l.toLanguageTag(), msg + \"tag\");\n+                assertEquals(id, l.toString(), msg + \"id\");\n@@ -184,4 +185,4 @@\n-                assertEquals(msg + \" language\", idl, l.getLanguage());\n-                assertEquals(msg + \" script\", ids, l.getScript());\n-                assertEquals(msg + \" country\", idc, l.getCountry());\n-                assertEquals(msg + \" variant\", idv, l.getVariant());\n+                assertEquals(idl, l.getLanguage(), msg + \" language\");\n+                assertEquals(ids, l.getScript(), msg + \" script\");\n+                assertEquals(idc, l.getCountry(), msg + \" country\");\n+                assertEquals(idv, l.getVariant(), msg + \" variant\");\n@@ -189,2 +190,2 @@\n-                assertEquals(msg + \"tag\", tag, l.toLanguageTag());\n-                assertEquals(msg + \"id\", id, l.toString());\n+                assertEquals(tag, l.toLanguageTag(), msg + \"tag\");\n+                assertEquals(id, l.toString(), msg + \"id\");\n@@ -238,1 +239,1 @@\n-            assertEquals(id, \"und\", l.toLanguageTag());\n+            assertEquals(\"und\", l.toLanguageTag(), id);\n@@ -258,1 +259,1 @@\n-                assertEquals(\"tagResult\", target, tagResult);\n+                assertEquals(target, tagResult, \"tagResult\");\n@@ -265,1 +266,1 @@\n-                assertEquals(\"builderResult\", target, builderResult);\n+                assertEquals(target, builderResult, \"builderResult\");\n@@ -278,1 +279,1 @@\n-                \"UTF-8\"));\n+                    StandardCharsets.UTF_8));\n@@ -282,1 +283,1 @@\n-            assertEquals(\"ulocale\", id, result.toLanguageTag());\n+            assertEquals(id, result.toLanguageTag(), \"ulocale\");\n@@ -294,20 +295,20 @@\n-            \/\/ language to lower case, region to upper, variant unchanged\n-            \/\/ short\n-            { \"X\", \"y\", \"z\", \"x\", \"Y\" },\n-            \/\/ long\n-            { \"xXxXxXxXxXxX\", \"yYyYyYyYyYyYyYyY\", \"zZzZzZzZzZzZzZzZ\",\n-              \"xxxxxxxxxxxx\", \"YYYYYYYYYYYYYYYY\" },\n-            \/\/ mapped language ids\n-            { \"he\", \"IL\", \"\", \"he\" },\n-            { \"iw\", \"IL\", \"\", \"he\" },\n-            { \"yi\", \"DE\", \"\", \"yi\" },\n-            { \"ji\", \"DE\", \"\", \"yi\" },\n-            { \"id\", \"ID\", \"\", \"id\" },\n-            { \"in\", \"ID\", \"\", \"id\" },\n-            \/\/ special variants\n-            { \"ja\", \"JP\", \"JP\" },\n-            { \"th\", \"TH\", \"TH\" },\n-            { \"no\", \"NO\", \"NY\" },\n-            { \"no\", \"NO\", \"NY\" },\n-            \/\/ no canonicalization of 3-letter language codes\n-            { \"eng\", \"US\", \"\" }\n+                \/\/ language to lower case, region to upper, variant unchanged\n+                \/\/ short\n+                {\"X\", \"y\", \"z\", \"x\", \"Y\"},\n+                \/\/ long\n+                {\"xXxXxXxXxXxX\", \"yYyYyYyYyYyYyYyY\", \"zZzZzZzZzZzZzZzZ\",\n+                        \"xxxxxxxxxxxx\", \"YYYYYYYYYYYYYYYY\"},\n+                \/\/ mapped language ids\n+                {\"he\", \"IL\", \"\", \"he\"},\n+                {\"iw\", \"IL\", \"\", \"he\"},\n+                {\"yi\", \"DE\", \"\", \"yi\"},\n+                {\"ji\", \"DE\", \"\", \"yi\"},\n+                {\"id\", \"ID\", \"\", \"id\"},\n+                {\"in\", \"ID\", \"\", \"id\"},\n+                \/\/ special variants\n+                {\"ja\", \"JP\", \"JP\"},\n+                {\"th\", \"TH\", \"TH\"},\n+                {\"no\", \"NO\", \"NY\"},\n+                {\"no\", \"NO\", \"NY\"},\n+                \/\/ no canonicalization of 3-letter language codes\n+                {\"eng\", \"US\", \"\"}\n@@ -315,1 +316,1 @@\n-        for (int i = 0; i < tests.length; ++ i) {\n+        for (int i = 0; i < tests.length; ++i) {\n@@ -319,3 +320,3 @@\n-            assertEquals(id + \" lang\", test.length > 3 ? test[3] : test[0], locale.getLanguage());\n-            assertEquals(id + \" region\", test.length > 4 ? test[4] : test[1], locale.getCountry());\n-            assertEquals(id + \" variant\", test.length > 5 ? test[5] : test[2], locale.getVariant());\n+            assertEquals(test.length > 3 ? test[3] : test[0], locale.getLanguage(), id + \" lang\");\n+            assertEquals(test.length > 4 ? test[4] : test[1], locale.getCountry(), id + \" region\");\n+            assertEquals(test.length > 5 ? test[5] : test[2], locale.getVariant(), id + \" variant\");\n@@ -326,1 +327,1 @@\n-    \/\/\/ Locale API tests.\n+    \/\/\/ Locale API Tests\n@@ -333,1 +334,1 @@\n-        assertEquals(\"forLanguageTag\", \"Latn\", locale.getScript());\n+        assertEquals(\"Latn\", locale.getScript(), \"forLanguageTag\");\n@@ -337,1 +338,1 @@\n-        assertEquals(\"builder\", \"Latn\", locale.getScript());\n+        assertEquals(\"Latn\", locale.getScript(), \"builder\");\n@@ -341,1 +342,1 @@\n-        assertEquals(\"script is empty string\", \"\", locale.getScript());\n+        assertEquals(\"\", locale.getScript(), \"script is empty string\");\n@@ -348,1 +349,1 @@\n-        assertEquals(\"some_ex-tension\", null, locale.getExtension('a'));\n+        assertNull(locale.getExtension('a'), \"some_ex-tension\");\n@@ -352,1 +353,1 @@\n-        assertEquals(\"builder\", \"some-ex-tension\", locale.getExtension('a'));\n+        assertEquals(\"some-ex-tension\", locale.getExtension('a'), \"builder\");\n@@ -355,1 +356,1 @@\n-        assertEquals(\"empty b\", null, locale.getExtension('b'));\n+        assertNull(locale.getExtension('b'), \"empty b\");\n@@ -358,1 +359,1 @@\n-        new ExpectIAE() { public void call() { Locale.forLanguageTag(\"\").getExtension('\\uD800'); }};\n+        assertThrows(IllegalArgumentException.class, () -> Locale.forLanguageTag(\"\").getExtension('\\uD800'));\n@@ -362,1 +363,1 @@\n-        assertEquals(\"x\", \"y-z-blork\", locale.getExtension('x'));\n+        assertEquals(\"y-z-blork\", locale.getExtension('x'), \"x\");\n@@ -369,2 +370,2 @@\n-        assertEquals(\"result size\", 2, result.size());\n-        assertTrue(\"'a','b'\", result.contains('a') && result.contains('b'));\n+        assertEquals(2, result.size(), \"result size\");\n+        assertTrue(result.contains('a') && result.contains('b'), \"'a','b'\");\n@@ -373,7 +374,1 @@\n-        try {\n-            result.add('x');\n-            fail(\"expected exception on add to extension key set\");\n-        }\n-        catch (UnsupportedOperationException e) {\n-            \/\/ ok\n-        }\n+        assertThrows(UnsupportedOperationException.class, () -> result.add('x'));\n@@ -383,1 +378,1 @@\n-        assertTrue(\"empty result\", locale.getExtensionKeys().isEmpty());\n+        assertTrue(locale.getExtensionKeys().isEmpty(), \"empty result\");\n@@ -390,3 +385,3 @@\n-        assertEquals(\"number of attributes\", 2, attributes.size());\n-        assertTrue(\"attribute abc\", attributes.contains(\"abc\"));\n-        assertTrue(\"attribute def\", attributes.contains(\"def\"));\n+        assertEquals(2, attributes.size(), \"number of attributes\");\n+        assertTrue(attributes.contains(\"abc\"), \"attribute abc\");\n+        assertTrue(attributes.contains(\"def\"), \"attribute def\");\n@@ -396,1 +391,1 @@\n-        assertTrue(\"empty attributes\", attributes.isEmpty());\n+        assertTrue(attributes.isEmpty(), \"empty attributes\");\n@@ -402,2 +397,2 @@\n-        assertEquals(\"collation\", \"japanese\", locale.getUnicodeLocaleType(\"co\"));\n-        assertEquals(\"numbers\", \"thai\", locale.getUnicodeLocaleType(\"nu\"));\n+        assertEquals(\"japanese\", locale.getUnicodeLocaleType(\"co\"), \"collation\");\n+        assertEquals(\"thai\", locale.getUnicodeLocaleType(\"nu\"), \"numbers\");\n@@ -406,1 +401,1 @@\n-        assertEquals(\"key case\", \"japanese\", locale.getUnicodeLocaleType(\"Co\"));\n+        assertEquals(\"japanese\", locale.getUnicodeLocaleType(\"Co\"), \"key case\");\n@@ -409,1 +404,1 @@\n-        assertEquals(\"locale keyword not present\", null, locale.getUnicodeLocaleType(\"xx\"));\n+        assertNull(locale.getUnicodeLocaleType(\"xx\"), \"locale keyword not present\");\n@@ -413,1 +408,1 @@\n-        assertEquals(\"locale extension not present\", null, locale.getUnicodeLocaleType(\"co\"));\n+        assertNull(locale.getUnicodeLocaleType(\"co\"), \"locale extension not present\");\n@@ -417,1 +412,1 @@\n-        assertEquals(\"typeless keyword\", \"\", locale.getUnicodeLocaleType(\"kn\"));\n+        assertEquals(\"\", locale.getUnicodeLocaleType(\"kn\"), \"typeless keyword\");\n@@ -420,2 +415,2 @@\n-        new ExpectIAE() { public void call() { Locale.forLanguageTag(\"\").getUnicodeLocaleType(\"q\"); }};\n-        new ExpectIAE() { public void call() { Locale.forLanguageTag(\"\").getUnicodeLocaleType(\"abcdefghi\"); }};\n+        assertThrows(IllegalArgumentException.class, () -> Locale.forLanguageTag(\"\").getUnicodeLocaleType(\"q\"));\n+        assertThrows(IllegalArgumentException.class, () -> Locale.forLanguageTag(\"\").getUnicodeLocaleType(\"abcdefghi\"));\n@@ -424,1 +419,1 @@\n-        new ExpectNPE() { public void call() { Locale.forLanguageTag(\"\").getUnicodeLocaleType(null); }};\n+        assertThrows(NullPointerException.class, () -> Locale.forLanguageTag(\"\").getUnicodeLocaleType(null));\n@@ -431,2 +426,2 @@\n-        assertEquals(\"two keys\", 2, result.size());\n-        assertTrue(\"co and nu\", result.contains(\"co\") && result.contains(\"nu\"));\n+        assertEquals(2, result.size(), \"two keys\");\n+        assertTrue(result.contains(\"co\") && result.contains(\"nu\"), \"co and nu\");\n@@ -435,7 +430,1 @@\n-        try {\n-            result.add(\"frobozz\");\n-            fail(\"expected exception when add to locale key set\");\n-        }\n-        catch (UnsupportedOperationException e) {\n-            \/\/ ok\n-        }\n+        assertThrows(UnsupportedOperationException.class, () -> result.add(\"frobozz\"));\n@@ -447,1 +436,1 @@\n-        assertEquals(\"blork\", \"y-x-blork\", locale.getExtension(Locale.PRIVATE_USE_EXTENSION));\n+        assertEquals(\"y-x-blork\", locale.getExtension(Locale.PRIVATE_USE_EXTENSION), \"blork\");\n@@ -450,1 +439,1 @@\n-        assertEquals(\"no privateuse\", null, locale.getExtension(Locale.PRIVATE_USE_EXTENSION));\n+        assertNull(locale.getExtension(Locale.PRIVATE_USE_EXTENSION), \"no privateuse\");\n@@ -458,36 +447,36 @@\n-            \/\/ empty locale canonicalizes to 'und'\n-            { \"\", \"\", \"\", \"und\" },\n-            \/\/ variant alone is not a valid Locale, but has a valid language tag\n-            { \"\", \"\", \"NewYork\", \"und-NewYork\" },\n-            \/\/ standard valid locales\n-            { \"\", \"Us\", \"\", \"und-US\" },\n-            { \"\", \"US\", \"NewYork\", \"und-US-NewYork\" },\n-            { \"EN\", \"\", \"\", \"en\" },\n-            { \"EN\", \"\", \"NewYork\", \"en-NewYork\" },\n-            { \"EN\", \"US\", \"\", \"en-US\" },\n-            { \"EN\", \"US\", \"NewYork\", \"en-US-NewYork\" },\n-            \/\/ underscore in variant will be emitted as multiple variant subtags\n-            { \"en\", \"US\", \"Newer_Yorker\", \"en-US-Newer-Yorker\" },\n-            \/\/ invalid variant subtags are appended as private use\n-            { \"en\", \"US\", \"new_yorker\", \"en-US-x-lvariant-new-yorker\" },\n-            \/\/ the first invalid variant subtags and following variant subtags are appended as private use\n-            { \"en\", \"US\", \"Windows_XP_Home\", \"en-US-Windows-x-lvariant-XP-Home\" },\n-            \/\/ too long variant and following variant subtags disappear\n-            { \"en\", \"US\", \"WindowsVista_SP2\", \"en-US\" },\n-            \/\/ invalid region subtag disappears\n-            { \"en\", \"USA\", \"\", \"en\" },\n-            \/\/ invalid language tag disappears\n-            { \"e\", \"US\", \"\", \"und-US\" },\n-            \/\/ three-letter language tags are not canonicalized\n-            { \"Eng\", \"\", \"\", \"eng\" },\n-            \/\/ legacy languages canonicalize to modern equivalents\n-            { \"he\", \"IL\", \"\", \"he-IL\" },\n-            { \"iw\", \"IL\", \"\", \"he-IL\" },\n-            { \"yi\", \"DE\", \"\", \"yi-DE\" },\n-            { \"ji\", \"DE\", \"\", \"yi-DE\" },\n-            { \"id\", \"ID\", \"\", \"id-ID\" },\n-            { \"in\", \"ID\", \"\", \"id-ID\" },\n-            \/\/ special values are converted on output\n-            { \"ja\", \"JP\", \"JP\", \"ja-JP-u-ca-japanese-x-lvariant-JP\" },\n-            { \"th\", \"TH\", \"TH\", \"th-TH-u-nu-thai-x-lvariant-TH\" },\n-            { \"no\", \"NO\", \"NY\", \"nn-NO\" }\n+                \/\/ empty locale canonicalizes to 'und'\n+                {\"\", \"\", \"\", \"und\"},\n+                \/\/ variant alone is not a valid Locale, but has a valid language tag\n+                {\"\", \"\", \"NewYork\", \"und-NewYork\"},\n+                \/\/ standard valid locales\n+                {\"\", \"Us\", \"\", \"und-US\"},\n+                {\"\", \"US\", \"NewYork\", \"und-US-NewYork\"},\n+                {\"EN\", \"\", \"\", \"en\"},\n+                {\"EN\", \"\", \"NewYork\", \"en-NewYork\"},\n+                {\"EN\", \"US\", \"\", \"en-US\"},\n+                {\"EN\", \"US\", \"NewYork\", \"en-US-NewYork\"},\n+                \/\/ underscore in variant will be emitted as multiple variant subtags\n+                {\"en\", \"US\", \"Newer_Yorker\", \"en-US-Newer-Yorker\"},\n+                \/\/ invalid variant subtags are appended as private use\n+                {\"en\", \"US\", \"new_yorker\", \"en-US-x-lvariant-new-yorker\"},\n+                \/\/ the first invalid variant subtags and following variant subtags are appended as private use\n+                {\"en\", \"US\", \"Windows_XP_Home\", \"en-US-Windows-x-lvariant-XP-Home\"},\n+                \/\/ too long variant and following variant subtags disappear\n+                {\"en\", \"US\", \"WindowsVista_SP2\", \"en-US\"},\n+                \/\/ invalid region subtag disappears\n+                {\"en\", \"USA\", \"\", \"en\"},\n+                \/\/ invalid language tag disappears\n+                {\"e\", \"US\", \"\", \"und-US\"},\n+                \/\/ three-letter language tags are not canonicalized\n+                {\"Eng\", \"\", \"\", \"eng\"},\n+                \/\/ legacy languages canonicalize to modern equivalents\n+                {\"he\", \"IL\", \"\", \"he-IL\"},\n+                {\"iw\", \"IL\", \"\", \"he-IL\"},\n+                {\"yi\", \"DE\", \"\", \"yi-DE\"},\n+                {\"ji\", \"DE\", \"\", \"yi-DE\"},\n+                {\"id\", \"ID\", \"\", \"id-ID\"},\n+                {\"in\", \"ID\", \"\", \"id-ID\"},\n+                \/\/ special values are converted on output\n+                {\"ja\", \"JP\", \"JP\", \"ja-JP-u-ca-japanese-x-lvariant-JP\"},\n+                {\"th\", \"TH\", \"TH\", \"th-TH-u-nu-thai-x-lvariant-TH\"},\n+                {\"no\", \"NO\", \"NY\", \"nn-NO\"}\n@@ -498,1 +487,1 @@\n-            assertEquals(\"case \" + i, test[3], locale.toLanguageTag());\n+            assertEquals(test[3], locale.toLanguageTag(), \"case \" + i);\n@@ -503,8 +492,8 @@\n-            \/\/ case is normalized during the round trip\n-            { \"EN-us\", \"en-US\" },\n-            { \"en-Latn-US\", \"en-Latn-US\" },\n-            \/\/ reordering Unicode locale extensions\n-            { \"de-u-co-phonebk-ca-gregory\", \"de-u-ca-gregory-co-phonebk\" },\n-            \/\/ private use only language tag is preserved (no extra \"und\")\n-            { \"x-elmer\", \"x-elmer\" },\n-            { \"x-lvariant-JP\", \"x-lvariant-JP\" },\n+                \/\/ case is normalized during the round trip\n+                {\"EN-us\", \"en-US\"},\n+                {\"en-Latn-US\", \"en-Latn-US\"},\n+                \/\/ reordering Unicode locale extensions\n+                {\"de-u-co-phonebk-ca-gregory\", \"de-u-ca-gregory-co-phonebk\"},\n+                \/\/ private use only language tag is preserved (no extra \"und\")\n+                {\"x-elmer\", \"x-elmer\"},\n+                {\"x-lvariant-JP\", \"x-lvariant-JP\"},\n@@ -514,1 +503,1 @@\n-            assertEquals(\"case \" + test[0], test[1], locale.toLanguageTag());\n+            assertEquals(test[1], locale.toLanguageTag(), \"case \" + test[0]);\n@@ -527,35 +516,35 @@\n-            \/\/ private use tags only\n-            { \"x-abc\", \"x-abc\" },\n-            { \"x-a-b-c\", \"x-a-b-c\" },\n-            { \"x-a-12345678\", \"x-a-12345678\" },\n-\n-            \/\/ legacy language tags with preferred mappings\n-            { \"i-ami\", \"ami\" },\n-            { \"i-bnn\", \"bnn\" },\n-            { \"i-hak\", \"hak\" },\n-            { \"i-klingon\", \"tlh\" },\n-            { \"i-lux\", \"lb\" }, \/\/ two-letter tag\n-            { \"i-navajo\", \"nv\" }, \/\/ two-letter tag\n-            { \"i-pwn\", \"pwn\" },\n-            { \"i-tao\", \"tao\" },\n-            { \"i-tay\", \"tay\" },\n-            { \"i-tsu\", \"tsu\" },\n-            { \"art-lojban\", \"jbo\" },\n-            { \"no-bok\", \"nb\" },\n-            { \"no-nyn\", \"nn\" },\n-            { \"sgn-BE-FR\", \"sfb\" },\n-            { \"sgn-BE-NL\", \"vgt\" },\n-            { \"sgn-CH-DE\", \"sgg\" },\n-            { \"zh-guoyu\", \"cmn\" },\n-            { \"zh-hakka\", \"hak\" },\n-            { \"zh-min-nan\", \"nan\" },\n-            { \"zh-xiang\", \"hsn\" },\n-\n-            \/\/ irregular legacy language tags, no preferred mappings, drop illegal fields\n-            \/\/ from end.  If no subtag is mappable, fallback to 'und'\n-            { \"i-default\", \"en-x-i-default\" },\n-            { \"i-enochian\", \"x-i-enochian\" },\n-            { \"i-mingo\", \"see-x-i-mingo\" },\n-            { \"en-GB-oed\", \"en-GB-x-oed\" },\n-            { \"zh-min\", \"nan-x-zh-min\" },\n-            { \"cel-gaulish\", \"xtg-x-cel-gaulish\" },\n+                \/\/ private use tags only\n+                {\"x-abc\", \"x-abc\"},\n+                {\"x-a-b-c\", \"x-a-b-c\"},\n+                {\"x-a-12345678\", \"x-a-12345678\"},\n+\n+                \/\/ legacy language tags with preferred mappings\n+                {\"i-ami\", \"ami\"},\n+                {\"i-bnn\", \"bnn\"},\n+                {\"i-hak\", \"hak\"},\n+                {\"i-klingon\", \"tlh\"},\n+                {\"i-lux\", \"lb\"}, \/\/ two-letter tag\n+                {\"i-navajo\", \"nv\"}, \/\/ two-letter tag\n+                {\"i-pwn\", \"pwn\"},\n+                {\"i-tao\", \"tao\"},\n+                {\"i-tay\", \"tay\"},\n+                {\"i-tsu\", \"tsu\"},\n+                {\"art-lojban\", \"jbo\"},\n+                {\"no-bok\", \"nb\"},\n+                {\"no-nyn\", \"nn\"},\n+                {\"sgn-BE-FR\", \"sfb\"},\n+                {\"sgn-BE-NL\", \"vgt\"},\n+                {\"sgn-CH-DE\", \"sgg\"},\n+                {\"zh-guoyu\", \"cmn\"},\n+                {\"zh-hakka\", \"hak\"},\n+                {\"zh-min-nan\", \"nan\"},\n+                {\"zh-xiang\", \"hsn\"},\n+\n+                \/\/ irregular legacy language tags, no preferred mappings, drop illegal fields\n+                \/\/ from end.  If no subtag is mappable, fallback to 'und'\n+                {\"i-default\", \"en-x-i-default\"},\n+                {\"i-enochian\", \"x-i-enochian\"},\n+                {\"i-mingo\", \"see-x-i-mingo\"},\n+                {\"en-GB-oed\", \"en-GB-x-oed\"},\n+                {\"zh-min\", \"nan-x-zh-min\"},\n+                {\"cel-gaulish\", \"xtg-x-cel-gaulish\"},\n@@ -566,1 +555,1 @@\n-            assertEquals(\"legacy language tag case \" + i, test[1], locale.toLanguageTag());\n+            assertEquals(test[1], locale.toLanguageTag(), \"legacy language tag case \" + i);\n@@ -571,27 +560,27 @@\n-        tests = new String[][] {\n-            { \"valid\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y-12345678-z\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y-12345678-z\" },\n-            { \"segment of private use tag too long\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y-123456789-z\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y\" },\n-            { \"segment of private use tag is empty\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y--12345678-z\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y\" },\n-            { \"first segment of private use tag is empty\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x--y-12345678-z\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def\" },\n-            { \"illegal extension tag\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-\\uD800-y-12345678-z\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def\" },\n-            { \"locale subtag with no value\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-x-y-12345678-z\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-x-y-12345678-z\" },\n-            { \"locale key subtag invalid\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-123456789-def-x-y-12345678-z\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc\" },\n-            \/\/ locale key subtag invalid in earlier position, all following subtags\n-            \/\/ dropped (and so the locale extension dropped as well)\n-            { \"locale key subtag invalid in earlier position\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd-u-123456789-abc-bb-def-x-y-12345678-z\",\n-              \"en-US-Newer-Yorker-a-bb-cc-dd\" },\n+        tests = new String[][]{\n+                {\"valid\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y-12345678-z\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y-12345678-z\"},\n+                {\"segment of private use tag too long\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y-123456789-z\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y\"},\n+                {\"segment of private use tag is empty\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y--12345678-z\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x-y\"},\n+                {\"first segment of private use tag is empty\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-x--y-12345678-z\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def\"},\n+                {\"illegal extension tag\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def-\\uD800-y-12345678-z\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-def\"},\n+                {\"locale subtag with no value\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-x-y-12345678-z\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-bb-x-y-12345678-z\"},\n+                {\"locale key subtag invalid\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc-123456789-def-x-y-12345678-z\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-aa-abc\"},\n+                \/\/ locale key subtag invalid in earlier position, all following subtags\n+                \/\/ dropped (and so the locale extension dropped as well)\n+                {\"locale key subtag invalid in earlier position\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd-u-123456789-abc-bb-def-x-y-12345678-z\",\n+                        \"en-US-Newer-Yorker-a-bb-cc-dd\"},\n@@ -604,3 +593,2 @@\n-                assertEquals(msg, test[2], locale.toLanguageTag());\n-            }\n-            catch (IllegalArgumentException e) {\n+                assertEquals(test[2], locale.toLanguageTag(), msg);\n+            } catch (IllegalArgumentException e) {\n@@ -613,2 +601,2 @@\n-        assertEquals(\"extension\", \"aa-00-bb-01\", locale.getExtension('d'));\n-        assertEquals(\"extension c\", \"1234\", locale.getExtension('c'));\n+        assertEquals(\"aa-00-bb-01\", locale.getExtension('d'), \"extension\");\n+        assertEquals(\"1234\", locale.getExtension('c'), \"extension c\");\n@@ -617,1 +605,1 @@\n-        assertEquals(\"Unicode extension\", \"ca-gregory\", locale.getExtension(Locale.UNICODE_LOCALE_EXTENSION));\n+        assertEquals(\"ca-gregory\", locale.getExtension(Locale.UNICODE_LOCALE_EXTENSION), \"Unicode extension\");\n@@ -621,2 +609,2 @@\n-        assertEquals(\"Unicode keywords\", \"aa-000-bb-001-cc-003\", locale.getExtension(Locale.UNICODE_LOCALE_EXTENSION));\n-        assertEquals(\"Duplicated Unicode locake key followed by an extension\", \"1234\", locale.getExtension('c'));\n+        assertEquals(\"aa-000-bb-001-cc-003\", locale.getExtension(Locale.UNICODE_LOCALE_EXTENSION), \"Unicode keywords\");\n+        assertEquals(\"1234\", locale.getExtension('c'), \"Duplicated Unicode locake key followed by an extension\");\n@@ -633,2 +621,2 @@\n-        assertEquals(\"latn US\", \"Latin\", latnLocale.getDisplayScript());\n-        assertEquals(\"hans US\", \"Simplified\", hansLocale.getDisplayScript());\n+        assertEquals(\"Latin\", latnLocale.getDisplayScript(), \"latn US\");\n+        assertEquals(\"Simplified\", hansLocale.getDisplayScript(), \"hans US\");\n@@ -637,2 +625,2 @@\n-        assertEquals(\"latn DE\", \"Lateinisch\", latnLocale.getDisplayScript());\n-        assertEquals(\"hans DE\", \"Vereinfacht\", hansLocale.getDisplayScript());\n+        assertEquals(\"Lateinisch\", latnLocale.getDisplayScript(), \"latn DE\");\n+        assertEquals(\"Vereinfacht\", hansLocale.getDisplayScript(), \"hans DE\");\n@@ -648,2 +636,2 @@\n-        assertEquals(\"latn US\", \"Latin\", latnLocale.getDisplayScript(Locale.US));\n-        assertEquals(\"hans US\", \"Simplified\", hansLocale.getDisplayScript(Locale.US));\n+        assertEquals(\"Latin\", latnLocale.getDisplayScript(Locale.US), \"latn US\");\n+        assertEquals(\"Simplified\", hansLocale.getDisplayScript(Locale.US), \"hans US\");\n@@ -651,2 +639,2 @@\n-        assertEquals(\"latn DE\", \"Lateinisch\", latnLocale.getDisplayScript(Locale.GERMANY));\n-        assertEquals(\"hans DE\", \"Vereinfacht\", hansLocale.getDisplayScript(Locale.GERMANY));\n+        assertEquals(\"Lateinisch\", latnLocale.getDisplayScript(Locale.GERMANY), \"latn DE\");\n+        assertEquals(\"Vereinfacht\", hansLocale.getDisplayScript(Locale.GERMANY), \"hans DE\");\n@@ -698,4 +686,4 @@\n-            assertEquals(\"English display name for \" + loc.toLanguageTag(),\n-                    displayNameEnglish[i], loc.getDisplayName(Locale.ENGLISH));\n-            assertEquals(\"Simplified Chinese display name for \" + loc.toLanguageTag(),\n-                    displayNameSimplifiedChinese[i], loc.getDisplayName(Locale.CHINA));\n+            assertEquals(displayNameEnglish[i], loc.getDisplayName(Locale.ENGLISH),\n+                    \"English display name for \" + loc.toLanguageTag());\n+            assertEquals(displayNameSimplifiedChinese[i], loc.getDisplayName(Locale.CHINA),\n+                    \"Simplified Chinese display name for \" + loc.toLanguageTag());\n@@ -719,4 +707,4 @@\n-            .setLocale(locale)\n-            .build();\n-        assertEquals(\"long tag\", target, result.toLanguageTag());\n-        assertEquals(\"long tag\", locale, result);\n+                .setLocale(locale)\n+                .build();\n+        assertEquals(target, result.toLanguageTag(), \"long tag\");\n+        assertEquals(locale, result, \"long tag\");\n@@ -725,3 +713,2 @@\n-        new BuilderNPE(\"locale\") {\n-            public void call() { b.setLocale(null); }\n-        };\n+        assertThrows(NullPointerException.class, () -> builder.setLocale(null),\n+                \"Setting null locale should throw NPE\");\n@@ -732,2 +719,2 @@\n-        assertEquals(\"ja_JP_JP languagetag\", \"ja-JP-u-ca-japanese\", locale.toLanguageTag());\n-        assertEquals(\"ja_JP_JP variant\", \"\", locale.getVariant());\n+        assertEquals(\"ja-JP-u-ca-japanese\", locale.toLanguageTag(), \"ja_JP_JP languagetag\");\n+        assertEquals(\"\", locale.getVariant(), \"ja_JP_JP variant\");\n@@ -736,2 +723,2 @@\n-        assertEquals(\"th_TH_TH languagetag\", \"th-TH-u-nu-thai\", locale.toLanguageTag());\n-        assertEquals(\"th_TH_TH variant\", \"\", locale.getVariant());\n+        assertEquals(\"th-TH-u-nu-thai\", locale.toLanguageTag(), \"th_TH_TH languagetag\");\n+        assertEquals(\"\", locale.getVariant(), \"th_TH_TH variant\");\n@@ -740,3 +727,3 @@\n-        assertEquals(\"no_NO_NY languagetag\", \"nn-NO\", locale.toLanguageTag());\n-        assertEquals(\"no_NO_NY language\", \"nn\", locale.getLanguage());\n-        assertEquals(\"no_NO_NY variant\", \"\", locale.getVariant());\n+        assertEquals(\"nn-NO\", locale.toLanguageTag(), \"no_NO_NY languagetag\");\n+        assertEquals(\"nn\", locale.getLanguage(), \"no_NO_NY language\");\n+        assertEquals(\"\", locale.getVariant(), \"no_NO_NY variant\");\n@@ -745,5 +732,2 @@\n-        new BuilderILE(\"123_4567_89\") {\n-            public void call() {\n-                b.setLocale(Locale.of(\"123\", \"4567\", \"89\"));\n-            }\n-        };\n+        assertThrows(IllformedLocaleException.class,\n+                () -> new Builder().setLocale(Locale.of(\"123\", \"4567\", \"89\")), \"123_4567_89\");\n@@ -758,4 +742,4 @@\n-            .setLanguageTag(source)\n-            .build()\n-            .toLanguageTag();\n-        assertEquals(\"language\", target, result);\n+                .setLanguageTag(source)\n+                .build()\n+                .toLanguageTag();\n+        assertEquals(target, result, \"language\");\n@@ -764,4 +748,14 @@\n-        new BuilderILE() { public void call() { b.setLanguageTag(\"und-a-xx-yy-b-ww-A-00-11-c-vv\"); }};\n-\n-        \/\/ redundant Unicode locale extension keys within an Unicode locale extension cause a failure\n-        new BuilderILE() { public void call() { b.setLanguageTag(\"und-u-nu-thai-NU-chinese-xx-1234\"); }};\n+        assertEquals(\"Duplicate extension 'A' [at index 17]\",\n+                assertThrows(IllformedLocaleException.class,\n+                () -> new Builder().setLanguageTag(\"und-a-xx-yy-b-ww-A-00-11-c-vv\"))\n+                .getMessage());\n+        \/\/ redundant Unicode locale extension keys cause a failure\n+        assertEquals(\"Duplicate U-extension key: \\\"NU\\\"\",\n+                assertThrows(IllformedLocaleException.class,\n+                () -> new Builder().setLanguageTag(\"und-u-nu-thai-cu-usd-NU-chinese-xx-1234\"))\n+                .getMessage());\n+        \/\/ redundant Unicode locale extension attributes cause a failure\n+        assertEquals(\"Duplicate U-extension attribute: \\\"FOO\\\"\",\n+                assertThrows(IllformedLocaleException.class,\n+                () -> new Builder().setLanguageTag(\"und-u-foo-bar-FOO\"))\n+                .getMessage());\n@@ -779,3 +773,3 @@\n-        assertEquals(\"Setting a %s language tag did not clear the builder\"\n-                .formatted(tag == null ? \"null\" : \"empty\"),\n-                empty.build(), bldr.build());\n+        assertEquals(empty.build(), bldr.build(),\n+                \"Setting a %s language tag did not clear the builder\"\n+                .formatted(tag == null ? \"null\" : \"empty\"));\n@@ -792,4 +786,4 @@\n-            .setLanguage(source)\n-            .build()\n-            .getLanguage();\n-        assertEquals(\"en\", target, result);\n+                .setLanguage(source)\n+                .build()\n+                .getLanguage();\n+        assertEquals(target, result, \"en\");\n@@ -799,5 +793,5 @@\n-            .setLanguage(target)\n-            .setLanguage(\"\")\n-            .build()\n-            .getLanguage();\n-        assertEquals(\"empty\", defaulted, result);\n+                .setLanguage(target)\n+                .setLanguage(\"\")\n+                .build()\n+                .getLanguage();\n+        assertEquals(defaulted, result, \"empty\");\n@@ -811,1 +805,1 @@\n-        assertEquals(\"null\", defaulted, result);\n+        assertEquals(defaulted, result, \"null\");\n@@ -816,1 +810,3 @@\n-        new BuilderILE(\"q\", \"abcdefghi\", \"13\") { public void call() { b.setLanguage(arg); }};\n+        for (String arg : List.of(\"q\", \"abcdefghi\", \"13\")) {\n+            assertThrows(IllformedLocaleException.class, () -> new Builder().setLanguage(arg));\n+        }\n@@ -819,2 +815,2 @@\n-        assertNotNull(\"2alpha\", builder.setLanguage(\"zz\").build());\n-        assertNotNull(\"8alpha\", builder.setLanguage(\"abcdefgh\").build());\n+        assertNotNull(builder.setLanguage(\"zz\").build(), \"2alpha\");\n+        assertNotNull(builder.setLanguage(\"abcdefgh\").build(), \"8alpha\");\n@@ -824,4 +820,4 @@\n-            .setLanguage(\"eng\")\n-            .build()\n-            .getLanguage();\n-        assertEquals(\"eng\", \"eng\", result);\n+                .setLanguage(\"eng\")\n+                .build()\n+                .getLanguage();\n+        assertEquals(\"eng\", result, \"eng\");\n@@ -838,4 +834,4 @@\n-            .setScript(source)\n-            .build()\n-            .getScript();\n-        assertEquals(\"script\", target, result);\n+                .setScript(source)\n+                .build()\n+                .getScript();\n+        assertEquals(target, result, \"script\");\n@@ -845,5 +841,5 @@\n-            .setScript(target)\n-            .setScript(\"\")\n-            .build()\n-            .getScript();\n-        assertEquals(\"empty\", defaulted, result);\n+                .setScript(target)\n+                .setScript(\"\")\n+                .build()\n+                .getScript();\n+        assertEquals(defaulted, result, \"empty\");\n@@ -857,1 +853,1 @@\n-        assertEquals(\"null\", defaulted, result);\n+        assertEquals(defaulted, result, \"null\");\n@@ -861,1 +857,4 @@\n-        new BuilderILE(\"abc\", \"abcde\", \"l3tn\") { public void call() { b.setScript(arg); }};\n+        for (String arg : List.of(\"abc\", \"abcde\", \"l3tn\")) {\n+            assertThrows(IllformedLocaleException.class, () -> new Builder().setScript(arg));\n+        }\n+\n@@ -864,1 +863,1 @@\n-        assertEquals(\"4alpha\", \"Wxyz\", builder.setScript(\"wxyz\").build().getScript());\n+        assertEquals(\"Wxyz\", builder.setScript(\"wxyz\").build().getScript(), \"4alpha\");\n@@ -875,4 +874,4 @@\n-            .setRegion(source)\n-            .build()\n-            .getCountry();\n-        assertEquals(\"us\", target, result);\n+                .setRegion(source)\n+                .build()\n+                .getCountry();\n+        assertEquals(target, result, \"us\");\n@@ -882,5 +881,5 @@\n-            .setRegion(target)\n-            .setRegion(\"\")\n-            .build()\n-            .getCountry();\n-        assertEquals(\"empty\", defaulted, result);\n+                .setRegion(target)\n+                .setRegion(\"\")\n+                .build()\n+                .getCountry();\n+        assertEquals(defaulted, result, \"empty\");\n@@ -894,1 +893,1 @@\n-        assertEquals(\"null\", defaulted, result);\n+        assertEquals(defaulted, result, \"null\");\n@@ -898,1 +897,3 @@\n-        new BuilderILE(\"q\", \"abc\", \"12\", \"1234\", \"a3\", \"12a\") { public void call() { b.setRegion(arg); }};\n+        for (String arg : List.of(\"q\", \"abc\", \"12\", \"1234\", \"a3\", \"12a\")) {\n+            assertThrows(IllformedLocaleException.class, () -> new Builder().setRegion(arg));\n+        }\n@@ -901,2 +902,2 @@\n-        assertEquals(\"2alpha\", \"ZZ\", builder.setRegion(\"ZZ\").build().getCountry());\n-        assertEquals(\"3digit\", \"000\", builder.setRegion(\"000\").build().getCountry());\n+        assertEquals(\"ZZ\", builder.setRegion(\"ZZ\").build().getCountry(), \"2alpha\");\n+        assertEquals(\"000\", builder.setRegion(\"000\").build().getCountry(), \"3digit\");\n@@ -913,4 +914,4 @@\n-            .setVariant(source)\n-            .build()\n-            .getVariant();\n-        assertEquals(\"NewYork\", target, result);\n+                .setVariant(source)\n+                .build()\n+                .getVariant();\n+        assertEquals(target, result, \"NewYork\");\n@@ -919,4 +920,4 @@\n-            .setVariant(\"NeWeR_YoRkEr\")\n-            .build()\n-            .toLanguageTag();\n-        assertEquals(\"newer yorker\", \"und-NeWeR-YoRkEr\", result);\n+                .setVariant(\"NeWeR_YoRkEr\")\n+                .build()\n+                .toLanguageTag();\n+        assertEquals(\"und-NeWeR-YoRkEr\", result, \"newer yorker\");\n@@ -926,4 +927,4 @@\n-            .setVariant(\"zzzzz_yyyyy_xxxxx\")\n-            .build()\n-            .getVariant();\n-        assertEquals(\"zyx\", \"zzzzz_yyyyy_xxxxx\", result);\n+                .setVariant(\"zzzzz_yyyyy_xxxxx\")\n+                .build()\n+                .getVariant();\n+        assertEquals(\"zzzzz_yyyyy_xxxxx\", result, \"zyx\");\n@@ -933,5 +934,5 @@\n-            .setVariant(target)\n-            .setVariant(\"\")\n-            .build()\n-            .getVariant();\n-        assertEquals(\"empty\", defaulted, result);\n+                .setVariant(target)\n+                .setVariant(\"\")\n+                .build()\n+                .getVariant();\n+        assertEquals(defaulted, result, \"empty\");\n@@ -945,1 +946,1 @@\n-        assertEquals(\"null\", defaulted, result);\n+        assertEquals(defaulted, result, \"null\");\n@@ -949,1 +950,4 @@\n-        new BuilderILE(\"abcd\", \"abcdefghi\", \"1ab\", \"1abcdefgh\") { public void call() { b.setVariant(arg); }};\n+        for (String arg : List.of(\"abcd\", \"abcdefghi\", \"1ab\", \"1abcdefgh\")) {\n+            assertThrows(IllformedLocaleException.class, () -> new Builder().setVariant(arg));\n+        }\n+\n@@ -952,1 +956,1 @@\n-        assertEquals(\"digit+3alpha\", \"1abc\", builder.setVariant(\"1abc\").build().getVariant());\n+        assertEquals(\"1abc\", builder.setVariant(\"1abc\").build().getVariant(), \"digit+3alpha\");\n@@ -955,1 +959,2 @@\n-        new BuilderILE(\"abcde-fg\") { public void call() { b.setVariant(arg); }};\n+        assertThrows(IllformedLocaleException.class, () -> new Builder().setVariant(\"abcde-fg\"));\n+\n@@ -966,4 +971,4 @@\n-            .setExtension(sourceKey, sourceValue)\n-            .build()\n-            .getExtension(sourceKey);\n-        assertEquals(\"extension\", target, result);\n+                .setExtension(sourceKey, sourceValue)\n+                .build()\n+                .getExtension(sourceKey);\n+        assertEquals(target, result, \"extension\");\n@@ -973,5 +978,5 @@\n-            .setExtension(sourceKey, sourceValue)\n-            .setExtension(sourceKey, \"\")\n-            .build()\n-            .getExtension(sourceKey);\n-        assertEquals(\"empty\", null, result);\n+                .setExtension(sourceKey, sourceValue)\n+                .setExtension(sourceKey, \"\")\n+                .build()\n+                .getExtension(sourceKey);\n+        assertNull(result, \"empty\");\n@@ -985,1 +990,1 @@\n-        assertEquals(\"null\", null, result);\n+        assertNull(result, \"null\");\n@@ -989,1 +994,3 @@\n-        new BuilderILE(\"$\") { public void call() { b.setExtension('$', sourceValue); }};\n+        assertThrows(IllformedLocaleException.class,\n+                () -> new Builder().setExtension('$', sourceValue));\n+\n@@ -992,1 +999,3 @@\n-        new BuilderILE(\"ab-cd-123456789\") { public void call() { b.setExtension(sourceKey, arg); }};\n+        assertThrows(IllformedLocaleException.class,\n+                () -> new Builder().setExtension(sourceKey, \"ab-cd-123456789\"));\n+\n@@ -995,1 +1004,3 @@\n-        new BuilderILE(\"ab--cd\") { public void call() { b.setExtension(sourceKey, arg); }};\n+        assertThrows(IllformedLocaleException.class,\n+                () -> new Builder().setExtension(sourceKey, \"ab--cd\"));\n+\n@@ -999,3 +1010,3 @@\n-            .setExtension('u', \"co-japanese\")\n-            .build();\n-        assertEquals(\"locale extension\", \"japanese\", locale.getUnicodeLocaleType(\"co\"));\n+                .setExtension('u', \"co-japanese\")\n+                .build();\n+        assertEquals(\"japanese\", locale.getUnicodeLocaleType(\"co\"), \"locale extension\");\n@@ -1005,3 +1016,3 @@\n-            .setUnicodeLocaleKeyword(\"co\", \"japanese\")\n-            .build();\n-        assertEquals(\"locales with extension\", locale, locale2);\n+                .setUnicodeLocaleKeyword(\"co\", \"japanese\")\n+                .build();\n+        assertEquals(locale, locale2, \"locales with extension\");\n@@ -1011,5 +1022,5 @@\n-            .setExtension('u', \"xxx-nu-thai\")\n-            .build();\n-        assertEquals(\"remove co\", null, locale3.getUnicodeLocaleType(\"co\"));\n-        assertEquals(\"override thai\", \"thai\", locale3.getUnicodeLocaleType(\"nu\"));\n-        assertEquals(\"override attribute\", 1, locale3.getUnicodeLocaleAttributes().size());\n+                .setExtension('u', \"xxx-nu-thai\")\n+                .build();\n+        assertNull(locale3.getUnicodeLocaleType(\"co\"), \"remove co\");\n+        assertEquals(\"thai\", locale3.getUnicodeLocaleType(\"nu\"), \"override thai\");\n+        assertEquals(1, locale3.getUnicodeLocaleAttributes().size(), \"override attribute\");\n@@ -1019,4 +1030,4 @@\n-            .setUnicodeLocaleKeyword(\"co\", \"japanese\")\n-            .build();\n-        assertEquals(\"extend\", \"japanese\", locale4.getUnicodeLocaleType(\"co\"));\n-        assertEquals(\"extend\", \"thai\", locale4.getUnicodeLocaleType(\"nu\"));\n+                .setUnicodeLocaleKeyword(\"co\", \"japanese\")\n+                .build();\n+        assertEquals(\"japanese\", locale4.getUnicodeLocaleType(\"co\"), \"extend\");\n+        assertEquals(\"thai\", locale4.getUnicodeLocaleType(\"nu\"), \"extend\");\n@@ -1026,5 +1037,5 @@\n-            .clear()\n-            .setExtension('u', \"456-123-zz-123-yy-456-xx-789\")\n-            .build()\n-            .toLanguageTag();\n-        assertEquals(\"reorder\", \"und-u-123-456-xx-789-yy-456-zz-123\", result);\n+                .clear()\n+                .setExtension('u', \"456-123-zz-123-yy-456-xx-789\")\n+                .build()\n+                .toLanguageTag();\n+        assertEquals(\"und-u-123-456-xx-789-yy-456-zz-123\", result, \"reorder\");\n@@ -1034,13 +1045,21 @@\n-            .clear()\n-            .setExtension('u', \"nu-thai-foobar\")\n-            .build()\n-            .getUnicodeLocaleType(\"nu\");\n-        assertEquals(\"multiple types\", \"thai-foobar\", result);\n-\n-        \/\/ redundant locale extensions are ignored\n-        result = builder\n-            .clear()\n-            .setExtension('u', \"nu-thai-NU-chinese-xx-1234\")\n-            .build()\n-            .toLanguageTag();\n-        assertEquals(\"duplicate keys\", \"und-u-nu-thai-xx-1234\", result);\n+                .clear()\n+                .setExtension('u', \"nu-thai-foobar\")\n+                .build()\n+                .getUnicodeLocaleType(\"nu\");\n+        assertEquals(\"thai-foobar\", result, \"multiple types\");\n+\n+        \/\/ redundant locale extensions should fail\n+        assertEquals(\"Duplicate U-extension key: \\\"NU\\\"\",\n+                assertThrows(IllformedLocaleException.class, () ->\n+                builder\n+                .clear()\n+                .setExtension('u', \"nu-thai-NU-chinese-xx-1234\")\n+                .build()).getMessage());\n+\n+        \/\/ redundant locale attributes should fail\n+        assertEquals(\"Duplicate U-extension attribute: \\\"bar\\\"\",\n+                assertThrows(IllformedLocaleException.class, () ->\n+                builder\n+                .clear()\n+                .setExtension('u', \"bar-foo-bar\")\n+                .build()).getMessage());\n@@ -1053,3 +1072,3 @@\n-            .addUnicodeLocaleAttribute(\"def\")\n-            .addUnicodeLocaleAttribute(\"abc\")\n-            .build();\n+                .addUnicodeLocaleAttribute(\"def\")\n+                .addUnicodeLocaleAttribute(\"abc\")\n+                .build();\n@@ -1058,3 +1077,3 @@\n-        assertEquals(\"number of attributes\", 2, uattrs.size());\n-        assertTrue(\"attribute abc\", uattrs.contains(\"abc\"));\n-        assertTrue(\"attribute def\", uattrs.contains(\"def\"));\n+        assertEquals(2, uattrs.size(), \"number of attributes\");\n+        assertTrue(uattrs.contains(\"abc\"), \"attribute abc\");\n+        assertTrue(uattrs.contains(\"def\"), \"attribute def\");\n@@ -1064,1 +1083,1 @@\n-            .build();\n+                .build();\n@@ -1066,1 +1085,2 @@\n-        assertEquals(\"remove bogus\", 2, uattrs.size());\n+        uattrs = locale.getUnicodeLocaleAttributes();\n+        assertEquals(2, uattrs.size(), \"remove bogus\");\n@@ -1070,2 +1090,3 @@\n-            .build();\n-        assertEquals(\"add duplicate\", 2, uattrs.size());\n+                .build();\n+        uattrs = locale.getUnicodeLocaleAttributes();\n+        assertEquals(2, uattrs.size(), \"add duplicate\");\n@@ -1074,2 +1095,5 @@\n-        new BuilderNPE(\"null attribute\") { public void call() { b.addUnicodeLocaleAttribute(null); }};\n-        new BuilderNPE(\"null attribute removal\") { public void call() { b.removeUnicodeLocaleAttribute(null); }};\n+        assertThrows(NullPointerException.class,\n+                () -> new Builder().addUnicodeLocaleAttribute(null), \"null attribute\");\n+\n+        assertThrows(NullPointerException.class,\n+                () -> new Builder().removeUnicodeLocaleAttribute(null), \"null attribute removal\");\n@@ -1078,1 +1102,2 @@\n-        new BuilderILE(\"invalid attribute\") { public void call() { b.addUnicodeLocaleAttribute(\"ca\"); }};\n+        assertThrows(IllformedLocaleException.class,\n+                     () -> new Builder().addUnicodeLocaleAttribute(\"ca\"), \"invalid attribute\");\n@@ -1086,6 +1111,6 @@\n-            .setUnicodeLocaleKeyword(\"co\", \"japanese\")\n-            .setUnicodeLocaleKeyword(\"nu\", \"thai\")\n-            .build();\n-        assertEquals(\"co\", \"japanese\", locale.getUnicodeLocaleType(\"co\"));\n-        assertEquals(\"nu\", \"thai\", locale.getUnicodeLocaleType(\"nu\"));\n-        assertEquals(\"keys\", 2, locale.getUnicodeLocaleKeys().size());\n+                .setUnicodeLocaleKeyword(\"co\", \"japanese\")\n+                .setUnicodeLocaleKeyword(\"nu\", \"thai\")\n+                .build();\n+        assertEquals(\"japanese\", locale.getUnicodeLocaleType(\"co\"), \"co\");\n+        assertEquals(\"thai\", locale.getUnicodeLocaleType(\"nu\"), \"nu\");\n+        assertEquals(2, locale.getUnicodeLocaleKeys().size(), \"keys\");\n@@ -1095,4 +1120,4 @@\n-            .setUnicodeLocaleKeyword(\"co\", null)\n-            .build()\n-            .toLanguageTag();\n-        assertEquals(\"empty co\", \"und-u-nu-thai\", result);\n+                .setUnicodeLocaleKeyword(\"co\", null)\n+                .build()\n+                .toLanguageTag();\n+        assertEquals(\"und-u-nu-thai\", result, \"empty co\");\n@@ -1102,4 +1127,4 @@\n-            .setUnicodeLocaleKeyword(\"nu\", null)\n-            .build()\n-            .toLanguageTag();\n-        assertEquals(\"empty nu\", \"und\", result);\n+                .setUnicodeLocaleKeyword(\"nu\", null)\n+                .build()\n+                .toLanguageTag();\n+        assertEquals(\"und\", result, \"empty nu\");\n@@ -1109,5 +1134,5 @@\n-            .setUnicodeLocaleKeyword(\"zz\", \"012\")\n-            .setUnicodeLocaleKeyword(\"aa\", \"345\")\n-            .build()\n-            .toLanguageTag();\n-        assertEquals(\"reordered\", \"und-u-aa-345-zz-012\", result);\n+                .setUnicodeLocaleKeyword(\"zz\", \"012\")\n+                .setUnicodeLocaleKeyword(\"aa\", \"345\")\n+                .build()\n+                .toLanguageTag();\n+        assertEquals(\"und-u-aa-345-zz-012\", result, \"reordered\");\n@@ -1116,1 +1141,3 @@\n-        new BuilderNPE(\"keyword\") { public void call() { b.setUnicodeLocaleKeyword(null, \"thai\"); }};\n+        assertThrows(NullPointerException.class,\n+                () -> new Builder().setUnicodeLocaleKeyword(null, \"thai\"), \"keyword\");\n+\n@@ -1119,1 +1146,4 @@\n-        new BuilderILE(\"a\", \"abc\") { public void call() { b.setUnicodeLocaleKeyword(arg, \"value\"); }};\n+        for (String arg : List.of(\"a\", \"abc\")) {\n+            assertThrows(IllformedLocaleException.class,\n+                    () -> new Builder().setUnicodeLocaleKeyword(arg, \"value\"));\n+        }\n@@ -1122,1 +1152,4 @@\n-        new BuilderILE(\"ab\", \"abcdefghi\") { public void call() { b.setUnicodeLocaleKeyword(\"ab\", arg); }};\n+        for (String arg : List.of(\"ab\", \"abcdefghi\")) {\n+            assertThrows(IllformedLocaleException.class,\n+                    () -> new Builder().setUnicodeLocaleKeyword(\"ab\", arg));\n+        }\n@@ -1132,4 +1165,4 @@\n-            .setExtension(Locale.PRIVATE_USE_EXTENSION, source)\n-            .build()\n-            .getExtension(Locale.PRIVATE_USE_EXTENSION);\n-        assertEquals(\"abc\", target, result);\n+                .setExtension(Locale.PRIVATE_USE_EXTENSION, source)\n+                .build()\n+                .getExtension(Locale.PRIVATE_USE_EXTENSION);\n+        assertEquals(target, result, \"abc\");\n@@ -1138,1 +1171,3 @@\n-        new BuilderILE(\"a--b\") { public void call() { b.setExtension(Locale.PRIVATE_USE_EXTENSION, arg); }};\n+        assertThrows(IllformedLocaleException.class,\n+                () -> new Builder().setExtension(Locale.PRIVATE_USE_EXTENSION, \"a--b\"),\n+                \"multiple-hyphens should throw IAE\");\n@@ -1147,5 +1182,5 @@\n-            .setLocale(locale)\n-            .clear()\n-            .build()\n-            .toLanguageTag();\n-        assertEquals(\"clear\", \"und\", result);\n+                .setLocale(locale)\n+                .clear()\n+                .build()\n+                .toLanguageTag();\n+        assertEquals(\"und\", result, \"clear\");\n@@ -1167,27 +1202,27 @@\n-            Locale.ROOT,\n-            Locale.ENGLISH,\n-            Locale.US,\n-            Locale.of(\"en\", \"US\", \"Win\"),\n-            Locale.of(\"en\", \"US\", \"Win_XP\"),\n-            Locale.JAPAN,\n-            Locale.of(\"ja\", \"JP\", \"JP\"),\n-            Locale.of(\"th\", \"TH\"),\n-            Locale.of(\"th\", \"TH\", \"TH\"),\n-            Locale.of(\"no\", \"NO\"),\n-            Locale.of(\"nb\", \"NO\"),\n-            Locale.of(\"nn\", \"NO\"),\n-            Locale.of(\"no\", \"NO\", \"NY\"),\n-            Locale.of(\"nn\", \"NO\", \"NY\"),\n-            Locale.of(\"he\", \"IL\"),\n-            Locale.of(\"he\", \"IL\", \"var\"),\n-            Locale.of(\"Language\", \"Country\", \"Variant\"),\n-            Locale.of(\"\", \"US\"),\n-            Locale.of(\"\", \"\", \"Java\"),\n-            Locale.forLanguageTag(\"en-Latn-US\"),\n-            Locale.forLanguageTag(\"zh-Hans\"),\n-            Locale.forLanguageTag(\"zh-Hant-TW\"),\n-            Locale.forLanguageTag(\"ja-JP-u-ca-japanese\"),\n-            Locale.forLanguageTag(\"und-Hant\"),\n-            Locale.forLanguageTag(\"und-a-123-456\"),\n-            Locale.forLanguageTag(\"en-x-java\"),\n-            Locale.forLanguageTag(\"th-TH-u-ca-buddist-nu-thai-x-lvariant-TH\"),\n+                Locale.ROOT,\n+                Locale.ENGLISH,\n+                Locale.US,\n+                Locale.of(\"en\", \"US\", \"Win\"),\n+                Locale.of(\"en\", \"US\", \"Win_XP\"),\n+                Locale.JAPAN,\n+                Locale.of(\"ja\", \"JP\", \"JP\"),\n+                Locale.of(\"th\", \"TH\"),\n+                Locale.of(\"th\", \"TH\", \"TH\"),\n+                Locale.of(\"no\", \"NO\"),\n+                Locale.of(\"nb\", \"NO\"),\n+                Locale.of(\"nn\", \"NO\"),\n+                Locale.of(\"no\", \"NO\", \"NY\"),\n+                Locale.of(\"nn\", \"NO\", \"NY\"),\n+                Locale.of(\"he\", \"IL\"),\n+                Locale.of(\"he\", \"IL\", \"var\"),\n+                Locale.of(\"Language\", \"Country\", \"Variant\"),\n+                Locale.of(\"\", \"US\"),\n+                Locale.of(\"\", \"\", \"Java\"),\n+                Locale.forLanguageTag(\"en-Latn-US\"),\n+                Locale.forLanguageTag(\"zh-Hans\"),\n+                Locale.forLanguageTag(\"zh-Hant-TW\"),\n+                Locale.forLanguageTag(\"ja-JP-u-ca-japanese\"),\n+                Locale.forLanguageTag(\"und-Hant\"),\n+                Locale.forLanguageTag(\"und-a-123-456\"),\n+                Locale.forLanguageTag(\"en-x-java\"),\n+                Locale.forLanguageTag(\"th-TH-u-ca-buddist-nu-thai-x-lvariant-TH\"),\n@@ -1208,1 +1243,1 @@\n-                assertEquals(\"roundtrip \" + locale, locale, o);\n+                assertEquals(locale, o, \"roundtrip \" + locale);\n@@ -1234,2 +1269,1 @@\n-            fail(\"'dataDir' is null. serialized.data.dir Property value is \"+dataDirName);\n-            return;\n+            fail(\"'dataDir' is null. serialized.data.dir Property value is \" + dataDirName);\n@@ -1237,2 +1271,1 @@\n-            fail(\"'dataDir' is not a directory. dataDir: \"+dataDir.toString());\n-            return;\n+            fail(\"'dataDir' is not a directory. dataDir: \" + dataDir.toString());\n@@ -1264,2 +1297,1 @@\n-                 ObjectInputStream ois = new ObjectInputStream(fis))\n-            {\n+                 ObjectInputStream ois = new ObjectInputStream(fis)) {\n@@ -1267,1 +1299,1 @@\n-                assertEquals(\"Deserialize Java 6 Locale \" + locale, o, locale);\n+                assertEquals(o, locale, \"Deserialize Java 6 Locale \" + locale);\n@@ -1287,9 +1319,9 @@\n-            {\"ja-JP-x-lvariant-JP\", \"ja-JP-u-ca-japanese-x-lvariant-JP\"},   \/\/ special case 1\n-            {\"ja-JP-x-lvariant-JP-XXX\"},\n-            {\"ja-JP-u-ca-japanese-x-lvariant-JP\"},\n-            {\"ja-JP-u-ca-gregory-x-lvariant-JP\"},\n-            {\"ja-JP-u-cu-jpy-x-lvariant-JP\"},\n-            {\"ja-x-lvariant-JP\"},\n-            {\"th-TH-x-lvariant-TH\", \"th-TH-u-nu-thai-x-lvariant-TH\"},   \/\/ special case 2\n-            {\"th-TH-u-nu-thai-x-lvariant-TH\"},\n-            {\"en-US-x-lvariant-JP\"},\n+                {\"ja-JP-x-lvariant-JP\", \"ja-JP-u-ca-japanese-x-lvariant-JP\"},   \/\/ special case 1\n+                {\"ja-JP-x-lvariant-JP-XXX\"},\n+                {\"ja-JP-u-ca-japanese-x-lvariant-JP\"},\n+                {\"ja-JP-u-ca-gregory-x-lvariant-JP\"},\n+                {\"ja-JP-u-cu-jpy-x-lvariant-JP\"},\n+                {\"ja-x-lvariant-JP\"},\n+                {\"th-TH-x-lvariant-TH\", \"th-TH-u-nu-thai-x-lvariant-TH\"},   \/\/ special case 2\n+                {\"th-TH-u-nu-thai-x-lvariant-TH\"},\n+                {\"en-US-x-lvariant-JP\"},\n@@ -1307,1 +1339,1 @@\n-            assertEquals(\"Language tag roundtrip by forLanguageTag with input: \" + in, expected, out);\n+            assertEquals(expected, out, \"Language tag roundtrip by forLanguageTag with input: \" + in);\n@@ -1314,1 +1346,1 @@\n-            assertEquals(\"Language tag roundtrip by Builder.setLanguageTag with input: \" + in, expected, out);\n+            assertEquals(expected, out, \"Language tag roundtrip by Builder.setLanguageTag with input: \" + in);\n@@ -1321,2 +1353,2 @@\n-            {\"en-Latn\", \"en__#Latn\"},\n-            {\"en-u-ca-japanese\", \"en__#u-ca-japanese\"},\n+                {\"en-Latn\", \"en__#Latn\"},\n+                {\"en-u-ca-japanese\", \"en__#u-ca-japanese\"},\n@@ -1331,1 +1363,1 @@\n-            assertEquals(\"Empty country field with non-empty script\/extension with input: \" + in, expected, out);\n+            assertEquals(expected, out, \"Empty country field with non-empty script\/extension with input: \" + in);\n@@ -1345,1 +1377,1 @@\n-                      \"java.util.JapaneseImperialCalendar\");\n+                \"java.util.JapaneseImperialCalendar\");\n@@ -1356,1 +1388,1 @@\n-        assertEquals(\"Wrong calendar\", expected, cal.getClass().getName());\n+        assertEquals(expected, cal.getClass().getName(), \"Wrong calendar\");\n@@ -1362,140 +1394,1 @@\n-        assertEquals(\"Wrong digit zero char\", expected, zero);\n-    }\n-\n-    \/\/\/\n-    \/\/\/ utility asserts\n-    \/\/\/\n-\n-    private void assertTrue(String msg, boolean v) {\n-        if (!v) {\n-            fail(msg + \": expected true\");\n-        }\n-    }\n-\n-    private void assertFalse(String msg, boolean v) {\n-        if (v) {\n-            fail(msg + \": expected false\");\n-        }\n-    }\n-\n-    private void assertEquals(String msg, Object e, Object v) {\n-        if (e == null ? v != null : !e.equals(v)) {\n-            if (e != null) {\n-                e = \"'\" + e + \"'\";\n-            }\n-            if (v != null) {\n-                v = \"'\" + v + \"'\";\n-            }\n-            fail(msg + \": expected \" + e + \" but got \" + v);\n-        }\n-    }\n-\n-    private void assertNotEquals(String msg, Object e, Object v) {\n-        if (e == null ? v == null : e.equals(v)) {\n-            if (e != null) {\n-                e = \"'\" + e + \"'\";\n-            }\n-            fail(msg + \": expected not equal \" + e);\n-        }\n-    }\n-\n-    private void assertNull(String msg, Object o) {\n-        if (o != null) {\n-            fail(msg + \": expected null but got '\" + o + \"'\");\n-        }\n-    }\n-\n-    private void assertNotNull(String msg, Object o) {\n-        if (o == null) {\n-            fail(msg + \": expected non null\");\n-        }\n-    }\n-\n-    \/\/ not currently used, might get rid of exceptions from the API\n-    private abstract class ExceptionTest {\n-        private final Class<? extends Exception> exceptionClass;\n-\n-        ExceptionTest(Class<? extends Exception> exceptionClass) {\n-            this.exceptionClass = exceptionClass;\n-        }\n-\n-        public void run() {\n-            String failMsg = null;\n-            try {\n-                call();\n-                failMsg = \"expected \" + exceptionClass.getName() + \"  but no exception thrown.\";\n-            }\n-            catch (Exception e) {\n-                if (!exceptionClass.isAssignableFrom(e.getClass())) {\n-                    failMsg = \"expected \" + exceptionClass.getName() + \" but caught \" + e;\n-                }\n-            }\n-            if (failMsg != null) {\n-                String msg = message();\n-                msg = msg == null ? \"\" : msg + \" \";\n-                fail(msg + failMsg);\n-            }\n-        }\n-\n-        public String message() {\n-            return null;\n-        }\n-\n-        public abstract void call();\n-    }\n-\n-    private abstract class ExpectNPE extends ExceptionTest {\n-        ExpectNPE() {\n-            super(NullPointerException.class);\n-            run();\n-        }\n-    }\n-\n-    private abstract class BuilderNPE extends ExceptionTest {\n-        protected final String msg;\n-        protected final Builder b = new Builder();\n-\n-        BuilderNPE(String msg) {\n-            super(NullPointerException.class);\n-\n-            this.msg = msg;\n-\n-            run();\n-        }\n-\n-        public String message() {\n-            return msg;\n-        }\n-    }\n-\n-    private abstract class ExpectIAE extends ExceptionTest {\n-        ExpectIAE() {\n-            super(IllegalArgumentException.class);\n-            run();\n-        }\n-    }\n-\n-    private abstract class BuilderILE extends ExceptionTest {\n-        protected final String[] args;\n-        protected final Builder b = new Builder();\n-\n-        protected String arg; \/\/ mutates during call\n-\n-        BuilderILE(String... args) {\n-            super(IllformedLocaleException.class);\n-\n-            this.args = args;\n-\n-            run();\n-        }\n-\n-        public void run() {\n-            for (String arg : args) {\n-                this.arg = arg;\n-                super.run();\n-            }\n-        }\n-\n-        public String message() {\n-            return \"arg: '\" + arg + \"'\";\n-        }\n+        assertEquals(expected, zero, \"Wrong digit zero char\");\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleEnhanceTest.java","additions":492,"deletions":599,"binary":false,"changes":1091,"status":"modified"}]}