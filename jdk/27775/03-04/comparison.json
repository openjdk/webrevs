{"files":[{"patch":"@@ -186,2 +186,1 @@\n- *   extensions apart from language identification. Keys must not be repeated, unless\n- *   used as values for the key 'x'.<\/dd>\n+ *   extensions apart from language identification.<\/dd>\n@@ -250,2 +249,1 @@\n- * form as a locale type subtag). When duplicate keys or attributes occur, they\n- * are considered ill-formed.\n+ * form as a locale type subtag).\n@@ -566,2 +564,0 @@\n- * @spec https:\/\/www.rfc-editor.org\/info\/rfc6067\n- *      RFC 6067: BCP 47 Extension U\n@@ -1881,1 +1877,1 @@\n-        bldr.setLanguageTag(tag, true);\n+        bldr.setLanguageTag(tag);\n@@ -2719,1 +2715,1 @@\n-         * must be {@linkplain Locale##def_language well-formed} or an exception is\n+         * must be well-formed (see {@link Locale}) or an exception is\n@@ -2738,1 +2734,1 @@\n-                localeBuilder.setLanguageTag(tag, false);\n+                localeBuilder.setLanguageTag(tag);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.IllformedLocaleException;\n@@ -212,1 +211,1 @@\n-                setUnicodeLocaleExtension(val, false);\n+                setUnicodeLocaleExtension(val);\n@@ -306,1 +305,1 @@\n-        return setExtensions(extensions, privateuse, true);\n+        return setExtensions(extensions, privateuse);\n@@ -312,1 +311,0 @@\n-     * Lenient determines duplicate U extension behavior\n@@ -314,1 +312,1 @@\n-    private InternalLocaleBuilder setExtensions(List<String> bcpExtensions, String privateuse, boolean lenient) {\n+    private InternalLocaleBuilder setExtensions(List<String> bcpExtensions, String privateuse) {\n@@ -325,1 +323,1 @@\n-                        setUnicodeLocaleExtension(bcpExt.substring(2), lenient);\n+                        setUnicodeLocaleExtension(bcpExt.substring(2));\n@@ -349,1 +347,0 @@\n-     * Lenient determines duplicate U Extension behavior\n@@ -351,1 +348,1 @@\n-    public InternalLocaleBuilder setLanguageTag(LanguageTag langtag, boolean lenient) {\n+    public InternalLocaleBuilder setLanguageTag(LanguageTag langtag) {\n@@ -374,1 +371,1 @@\n-        setExtensions(langtag.extensions(), langtag.privateuse(), lenient);\n+        setExtensions(langtag.extensions(), langtag.privateuse());\n@@ -590,1 +587,1 @@\n-     * Duplicated attributes\/keywords will be ignored if lenient, otherwise failure.\n+     * Duplicated attributes\/keywords will be ignored.\n@@ -593,1 +590,1 @@\n-    private void setUnicodeLocaleExtension(String subtags, boolean lenient) {\n+    private void setUnicodeLocaleExtension(String subtags) {\n@@ -612,4 +609,1 @@\n-            if (!uattributes.add(new CaseInsensitiveString(itr.current())) && !lenient) {\n-                throw new IllformedLocaleException(\n-                        \"Duplicate U-extension attribute: \\\"%s\\\"\".formatted(itr.current()));\n-            }\n+            uattributes.add(new CaseInsensitiveString(itr.current()));\n@@ -637,10 +631,1 @@\n-                    if (ukeywords.containsKey(tmpKey)) {\n-                        if (lenient) {\n-                            key = null;\n-                        } else {\n-                            throw new IllformedLocaleException(\n-                                    \"Duplicate U-extension key: \\\"%s\\\"\".formatted(itr.current()));\n-                        }\n-                    } else {\n-                        key = tmpKey;\n-                    }\n+                    key = ukeywords.containsKey(tmpKey) ? null : tmpKey;\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/InternalLocaleBuilder.java","additions":10,"deletions":25,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-            extensions = parseExtensions(itr, pp, errorMsg, lenient);\n+            extensions = parseExtensions(itr, pp, errorMsg);\n@@ -251,1 +251,1 @@\n-                                    StringBuilder err, boolean lenient) {\n+                                    StringBuilder err) {\n@@ -256,1 +256,1 @@\n-        boolean[] seen = new boolean[26];\n+\n@@ -261,9 +261,0 @@\n-                int ext = LocaleUtils.toLowerString(s).charAt(0) - 'a';\n-                if (seen[ext] && !lenient) {\n-                    pp.setErrorIndex(start);\n-                    err.append(\"Duplicate extension '\").append(s).append(\"'\");\n-                    break;\n-                } else {\n-                    seen[ext] = true;\n-                }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/LanguageTag.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n- *      8369590 8369739\n+ *      8369590\n@@ -747,15 +747,9 @@\n-        \/\/ redundant extensions cause a failure\n-        assertEquals(\"Duplicate extension 'A' [at index 17]\",\n-                assertThrows(IllformedLocaleException.class,\n-                () -> new Builder().setLanguageTag(\"und-a-xx-yy-b-ww-A-00-11-c-vv\"))\n-                .getMessage());\n-        \/\/ redundant Unicode locale extension keys cause a failure\n-        assertEquals(\"Duplicate U-extension key: \\\"NU\\\"\",\n-                assertThrows(IllformedLocaleException.class,\n-                () -> new Builder().setLanguageTag(\"und-u-nu-thai-cu-usd-NU-chinese-xx-1234\"))\n-                .getMessage());\n-        \/\/ redundant Unicode locale extension attributes cause a failure\n-        assertEquals(\"Duplicate U-extension attribute: \\\"FOO\\\"\",\n-                assertThrows(IllformedLocaleException.class,\n-                () -> new Builder().setLanguageTag(\"und-u-foo-bar-FOO\"))\n-                .getMessage());\n+        \/\/ redundant extensions are ignored\n+        assertEquals(\"und-a-xx-yy-b-ww-c-vv\",\n+                new Builder().setLanguageTag(\"und-a-xx-yy-b-ww-A-00-11-c-vv\").build().toLanguageTag());\n+        \/\/ redundant Unicode locale extension keys are ignored\n+        assertEquals(\"und-u-cu-usd-nu-thai-xx-1234\",\n+                new Builder().setLanguageTag(\"und-u-nu-thai-cu-usd-NU-chinese-xx-1234\").build().toLanguageTag());\n+        \/\/ redundant Unicode locale extension attributes are ignored\n+        assertEquals(\"und-u-bar-foo\",\n+                new Builder().setLanguageTag(\"und-u-foo-bar-FOO\").build().toLanguageTag());\n@@ -1051,4 +1045,2 @@\n-        \/\/ redundant locale extensions should fail\n-        assertEquals(\"Duplicate U-extension key: \\\"NU\\\"\",\n-                assertThrows(IllformedLocaleException.class, () ->\n-                builder\n+        \/\/ redundant locale extensions are ignored\n+        result = builder\n@@ -1057,1 +1049,3 @@\n-                .build()).getMessage());\n+                .build()\n+                .toLanguageTag();\n+        assertEquals(\"und-u-nu-thai-xx-1234\", result, \"duplicate keys\");\n@@ -1059,4 +1053,2 @@\n-        \/\/ redundant locale attributes should fail\n-        assertEquals(\"Duplicate U-extension attribute: \\\"bar\\\"\",\n-                assertThrows(IllformedLocaleException.class, () ->\n-                builder\n+        \/\/ redundant locale attributes are ignored\n+        result = builder\n@@ -1064,2 +1056,4 @@\n-                .setExtension('u', \"bar-foo-bar\")\n-                .build()).getMessage());\n+                .setExtension('u', \"posix-posix\")\n+                .build()\n+                .toLanguageTag();\n+        assertEquals(\"und-u-posix\", result, \"duplicate attributes\");\n@@ -1096,1 +1090,1 @@\n-                () -> new Builder().addUnicodeLocaleAttribute(null), \"null attribute\");\n+                () ->  new Builder().addUnicodeLocaleAttribute(null), \"null attribute\");\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleEnhanceTest.java","additions":22,"deletions":28,"binary":false,"changes":50,"status":"modified"}]}