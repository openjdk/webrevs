{"files":[{"patch":"@@ -580,1 +580,1 @@\n-  if (JvmtiExport::can_post_on_exceptions()) {\n+  if (JvmtiExport::can_post_on_exceptions() || JvmtiExport::can_post_frame_pop()) {\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3087,0 +3087,30 @@\n+        <error id=\"JVMTI_ERROR_DUPLICATE\">\n+          There is already frame pop event request at the specified depth.\n+        <\/error>\n+      <\/errors>\n+    <\/function>\n+\n+    <function id=\"ClearAllFramePops\" num=\"67\" since=\"25\">\n+      <synopsis>Clear Frame Pop<\/synopsis>\n+      <description>\n+        Clear all frame pop requests so that a <eventlink id=\"FramePop\"><\/eventlink>\n+        event will not be generated for any frames.\n+        See the <eventlink id=\"FramePop\"><\/eventlink> event for details.\n+        <p\/>\n+      <\/description>\n+      <origin>new<\/origin>\n+      <capabilities>\n+        <required id=\"can_generate_frame_pop_events\"><\/required>\n+      <\/capabilities>\n+      <parameters>\n+        <param id=\"thread\">\n+          <jthread null=\"current\" impl=\"noconvert\"\/>\n+          <description>\n+            The thread for which all the frame pop events will be cleared.\n+          <\/description>\n+        <\/param>\n+      <\/parameters>\n+      <errors>\n+        <error id=\"JVMTI_ERROR_THREAD_NOT_SUSPENDED\">\n+          Thread was not suspended and was not the current thread.\n+        <\/error>\n@@ -15481,0 +15511,3 @@\n+  <change date=\"10 January 2025\" version=\"25.0.0\">\n+      Add new function ClearAllFramePops. Needed to speedup debugger single stepping.\n+  <\/change>\n","filename":"src\/hotspot\/share\/prims\/jvmti.xml","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1807,1 +1807,1 @@\n-  SetFramePopClosure op(this, state, depth);\n+  SetOrClearFramePopClosure op(this, state, true \/* set *\/, depth);\n@@ -1813,0 +1813,27 @@\n+\/\/ Threads_lock NOT held, java_thread not protected by lock\n+jvmtiError\n+JvmtiEnv::ClearAllFramePops(jthread thread) {\n+  ResourceMark rm;\n+  JvmtiVTMSTransitionDisabler disabler(thread);\n+  JavaThread* current = JavaThread::current();\n+  ThreadsListHandle tlh(current);\n+\n+  JavaThread* java_thread = nullptr;\n+  oop thread_obj = nullptr;\n+  jvmtiError err = get_threadOop_and_JavaThread(tlh.list(), thread, current, &java_thread, &thread_obj);\n+  if (err != JVMTI_ERROR_NONE) {\n+    return err;\n+  }\n+\n+  HandleMark hm(current);\n+  Handle thread_handle(current, thread_obj);\n+  JvmtiThreadState *state = JvmtiThreadState::state_for(java_thread, thread_handle);\n+  if (state == nullptr) {\n+    return JVMTI_ERROR_THREAD_NOT_ALIVE;\n+  }\n+\n+  SetOrClearFramePopClosure op(this, state, false \/* clear all frame pops*\/);\n+  MutexLocker mu(current, JvmtiThreadState_lock);\n+  JvmtiHandshake::execute(&op, &tlh, java_thread, thread_handle);\n+  return op.result();\n+} \/* end ClearAllFramePops *\/\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1362,1 +1362,12 @@\n-  state->env_thread_state((JvmtiEnvBase*)this)->set_frame_pop(frame_number);\n+  JvmtiEnvThreadState* ets = state->env_thread_state(this);\n+  if (ets->is_frame_pop(frame_number)) {\n+    return JVMTI_ERROR_DUPLICATE;\n+  }\n+  ets->set_frame_pop(frame_number);\n+  return JVMTI_ERROR_NONE;\n+}\n+\n+jvmtiError\n+JvmtiEnvBase::clear_all_frame_pops(JvmtiThreadState* state) {\n+  JvmtiEnvThreadState* ets = state->env_thread_state(this);\n+  ets->clear_all_frame_pops();\n@@ -2481,1 +2492,1 @@\n-SetFramePopClosure::do_thread(Thread *target) {\n+SetOrClearFramePopClosure::do_thread(Thread *target) {\n@@ -2494,0 +2505,4 @@\n+  if (!_set) { \/\/ ClearAllFramePops\n+    _result = _env->clear_all_frame_pops(_state);\n+    return;\n+  }\n@@ -2505,1 +2520,1 @@\n-  _result = ((JvmtiEnvBase*)_env)->set_frame_pop(_state, jvf, _depth);\n+  _result = _env->set_frame_pop(_state, jvf, _depth);\n@@ -2509,1 +2524,1 @@\n-SetFramePopClosure::do_vthread(Handle target_h) {\n+SetOrClearFramePopClosure::do_vthread(Handle target_h) {\n@@ -2517,0 +2532,4 @@\n+  if (!_set) { \/\/ ClearAllFramePops\n+    _result = _env->clear_all_frame_pops(_state);\n+    return;\n+  }\n@@ -2518,1 +2537,1 @@\n-  _result = ((JvmtiEnvBase*)_env)->set_frame_pop(_state, jvf, _depth);\n+  _result = _env->set_frame_pop(_state, jvf, _depth);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -413,0 +413,1 @@\n+  jvmtiError clear_all_frame_pops(JvmtiThreadState* state);\n@@ -537,1 +538,1 @@\n-class SetFramePopClosure : public JvmtiUnitedHandshakeClosure {\n+class SetOrClearFramePopClosure : public JvmtiUnitedHandshakeClosure {\n@@ -539,1 +540,1 @@\n-  JvmtiEnv *_env;\n+  JvmtiEnvBase *_env;\n@@ -541,1 +542,2 @@\n-  jint _depth;\n+  bool _set;\n+  jint _depth; \/\/ used for NotiftyFramePop only\n@@ -544,3 +546,3 @@\n-  SetFramePopClosure(JvmtiEnv *env, JvmtiThreadState* state, jint depth)\n-    : JvmtiUnitedHandshakeClosure(\"SetFramePopClosure\"),\n-      _env(env),\n+  SetOrClearFramePopClosure(JvmtiEnv *env, JvmtiThreadState* state, bool set, jint depth = 0)\n+    : JvmtiUnitedHandshakeClosure(\"SetOrClearFramePopClosure\"),\n+      _env((JvmtiEnvBase*)env),\n@@ -548,0 +550,1 @@\n+      _set(set),\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -74,0 +74,7 @@\n+void\n+JvmtiFramePops::clear_all() {\n+  for (int idx = _pops->length() - 1; idx >= 0; idx--) {\n+    _pops->remove_at(idx);\n+  }\n+  assert(_pops->length() == 0, \"sanity check\");\n+}\n@@ -253,0 +260,8 @@\n+void JvmtiEnvThreadState::clear_all_frame_pops() {\n+#ifdef ASSERT\n+  Thread *current = Thread::current();\n+#endif\n+  assert(get_thread() == nullptr || get_thread()->is_handshake_safe_for(current),\n+         \"frame pop data only accessible from same or detached thread or direct handshake\");\n+  JvmtiEventController::clear_all_frame_pops(this);\n+}\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+  void clear_all();\n@@ -187,0 +188,1 @@\n+  void clear_all_frame_pops();\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -315,0 +315,1 @@\n+  static void clear_all_frame_pops(JvmtiEnvThreadState *env_thread);\n@@ -949,0 +950,9 @@\n+void\n+JvmtiEventControllerPrivate::clear_all_frame_pops(JvmtiEnvThreadState *ets) {\n+  EC_TRACE((\"[%s] # clear all frame pops\",\n+            JvmtiTrace::safe_get_thread_name(ets->get_thread_or_saved())\n+          ));\n+\n+  ets->get_frame_pops()->clear_all();\n+  recompute_thread_enabled(ets->jvmti_thread_state());\n+}\n@@ -1128,0 +1138,6 @@\n+void\n+JvmtiEventController::clear_all_frame_pops(JvmtiEnvThreadState *ets) {\n+  assert(JvmtiThreadState_lock->is_locked(), \"Must be locked.\");\n+  JvmtiEventControllerPrivate::clear_all_frame_pops(ets);\n+}\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -234,0 +234,1 @@\n+  static void clear_all_frame_pops(JvmtiEnvThreadState *env_thread);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1972,1 +1972,4 @@\n-          ets->clear_frame_pop(cur_frame_number);\n+          \/\/ Need to recheck the condition as the JVMTI ClearAllFramePops can do its work at a safepoint.\n+          if (ets->is_frame_pop(cur_frame_number)) {\n+            ets->clear_frame_pop(cur_frame_number);\n+          }\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -503,3 +503,0 @@\n-  err = jvmti->NotifyFramePop(thread, 0);\n-  check_jvmti_status(jni, err, \"VirtualThreadUnmount: error in JVMTI NotifyFramePop\");\n-\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/MethodExitTest\/libMethodExitTest.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}