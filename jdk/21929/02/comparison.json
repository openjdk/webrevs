{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,3 @@\n-            return method.getName().equals(name) &&\n+            \/\/ check for matching param types length, then name, then param type equality\n+            return method.getParameterCount() == ptypes.length &&\n+                   method.getName().equals(name) &&\n","filename":"src\/java.base\/share\/classes\/java\/lang\/PublicMethods.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,232 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.lang.reflect.Method;\n+\n+import org.junit.Assert;\n+import org.junit.jupiter.api.Test;\n+\n+public class ParameterCounts {\n+    public static class ConcreteClass extends SuperClass implements TestIntf {\n+        @Override\n+        public void a_noiseMethod(byte[] bytes) {\n+        }\n+\n+        public void a_noiseMethod(String s) {\n+        }\n+\n+        @Override\n+        public void b_noiseMethod(byte[] bytes) {\n+        }\n+\n+        public void b_noiseMethod(String s) {\n+        }\n+\n+        public void c_noiseMethod(String s) {\n+        }\n+\n+        public void d_noiseMethod(String s) {\n+        }\n+\n+        public void fiveArgs(Object one, Object two, Object three, Object four, Object five) {\n+        }\n+\n+        public void fiveArgs(Integer one, Integer two, Integer three, Integer four, Integer five) {\n+        }\n+\n+        public void noArgs() {\n+        }\n+\n+        public void x_noiseMethod(String s) {\n+        }\n+\n+        public void y_noiseMethod(String s) {\n+        }\n+\n+        public void z_noiseMethod(String s) {\n+        }\n+\n+    }\n+\n+    public static class SuperClass {\n+        public void a_superNoiseMethod(String s) {\n+        }\n+\n+        public void b_superNoiseMethod(String s) {\n+        }\n+\n+        public void c_superNoiseMethod(String s) {\n+        }\n+\n+        public void d_superNoiseMethod(String s) {\n+        }\n+\n+        public void superFiveArgs(Object one, Object two, Object three, Object four, Object five) {\n+        }\n+\n+        public void superFiveArgs(Integer one, Integer two, Integer three, Integer four, Integer five) {\n+        }\n+\n+        public void superNoArgs() {\n+        }\n+\n+        public void x_superNoiseMethod(String s) {\n+        }\n+\n+        public void y_superNoiseMethod(String s) {\n+        }\n+\n+        public void z_superNoiseMethod(String s) {\n+        }\n+\n+    }\n+\n+    public interface TestIntf {\n+        public void a_noiseMethod(byte[] bytes);\n+\n+        public void b_noiseMethod(byte[] bytes);\n+\n+        default void defaultIntfFiveArgs(Object a, Object b, Object c, Object d, Object e) {\n+        }\n+\n+        default void defaultIntfFiveArgs(Integer a, Integer b, Integer c, Integer d, Integer e) {\n+        }\n+\n+        default void defaultIntfNoArgs() {\n+        }\n+\n+        default void y_noiseMethod(byte[] bytes) {\n+        }\n+\n+        default void z_noiseMethod(byte[] bytes) {\n+        }\n+    }\n+\n+    private static final Class<?>[] FIVE_ARG_CLASSES = new Class<?>[] { Object.class, Object.class, Object.class,\n+            Object.class, Object.class };\n+\n+    \/**\n+     * Verifies correct lookup of a declared method with 5 params.\n+     *\n+     * @throws NoSuchMethodException\n+     * @throws SecurityException\n+     *\/\n+    @Test\n+    public void getConcreteFiveArg() throws NoSuchMethodException, SecurityException {\n+        Method method = ConcreteClass.class.getMethod(\"fiveArgs\", FIVE_ARG_CLASSES);\n+        Assert.assertNotNull(method);\n+        Assert.assertEquals(\"fiveArgs\", method.getName());\n+        Assert.assertEquals(5, method.getParameterCount());\n+        Assert.assertEquals(ConcreteClass.class, method.getDeclaringClass());\n+    }\n+\n+    \/**\n+     * Verifies correct lookup of a declared method with 0 params.\n+     *\n+     * @throws NoSuchMethodException\n+     * @throws SecurityException\n+     *\/\n+    @Test\n+    public void getConcreteNoArg() throws NoSuchMethodException, SecurityException {\n+        Method method = ConcreteClass.class.getMethod(\"noArgs\");\n+        Assert.assertNotNull(method);\n+        Assert.assertEquals(\"noArgs\", method.getName());\n+        Assert.assertEquals(0, method.getParameterCount());\n+        Assert.assertEquals(ConcreteClass.class, method.getDeclaringClass());\n+    }\n+\n+    \/**\n+     * Verifies correct lookup of an interface method with 5 params.\n+     *\n+     * @throws NoSuchMethodException\n+     * @throws SecurityException\n+     *\/\n+    @Test\n+    public void getIntfFiveArg() throws NoSuchMethodException, SecurityException {\n+        Method method = ConcreteClass.class.getMethod(\"defaultIntfFiveArgs\", FIVE_ARG_CLASSES);\n+        Assert.assertNotNull(method);\n+        Assert.assertEquals(\"defaultIntfFiveArgs\", method.getName());\n+        Assert.assertEquals(5, method.getParameterCount());\n+        Assert.assertEquals(TestIntf.class, method.getDeclaringClass());\n+    }\n+\n+    \/**\n+     * Verifies correct lookup of an interface method with 0 params.\n+     *\n+     * @throws NoSuchMethodException\n+     * @throws SecurityException\n+     *\/\n+    @Test\n+    public void getIntfNoArg() throws NoSuchMethodException, SecurityException {\n+        Method method = ConcreteClass.class.getMethod(\"defaultIntfNoArgs\");\n+        Assert.assertNotNull(method);\n+        Assert.assertEquals(\"defaultIntfNoArgs\", method.getName());\n+        Assert.assertEquals(0, method.getParameterCount());\n+        Assert.assertEquals(TestIntf.class, method.getDeclaringClass());\n+    }\n+\n+    \/**\n+     * Verifies correct lookup of a nonexistent method.\n+     *\n+     * @throws NoSuchMethodException\n+     * @throws SecurityException\n+     *\/\n+    @Test\n+    public void getNoSuchMethod() throws NoSuchMethodException, SecurityException {\n+        try {\n+            ConcreteClass.class.getMethod(\"noSuchMethod\");\n+            Assert.fail(\"Should've thrown an exception\");\n+        } catch (NoSuchMethodException nsme) {\n+        }\n+    }\n+\n+    \/**\n+     * Verifies correct lookup of a superclass method with 5 params.\n+     *\n+     * @throws NoSuchMethodException\n+     * @throws SecurityException\n+     *\/\n+    @Test\n+    public void getSuperFiveArg() throws NoSuchMethodException, SecurityException {\n+        Method method = ConcreteClass.class.getMethod(\"superFiveArgs\", FIVE_ARG_CLASSES);\n+        Assert.assertNotNull(method);\n+        Assert.assertEquals(\"superFiveArgs\", method.getName());\n+        Assert.assertEquals(5, method.getParameterCount());\n+        Assert.assertEquals(SuperClass.class, method.getDeclaringClass());\n+    }\n+\n+    \/**\n+     * Verifies correct lookup of a superclass method with 0 params.\n+     *\n+     * @throws NoSuchMethodException\n+     * @throws SecurityException\n+     *\/\n+    @Test\n+    public void getSuperNoArg() throws NoSuchMethodException, SecurityException {\n+        Method method = ConcreteClass.class.getMethod(\"superNoArgs\");\n+        Assert.assertNotNull(method);\n+        Assert.assertEquals(\"superNoArgs\", method.getName());\n+        Assert.assertEquals(0, method.getParameterCount());\n+        Assert.assertEquals(SuperClass.class, method.getDeclaringClass());\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/Class\/getMethod\/ParameterCounts.java","additions":232,"deletions":0,"binary":false,"changes":232,"status":"added"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.lang.reflect.Method;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(2)\n+@Warmup(iterations = 2, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+public class ClassGetMethod {\n+    public static class ConcreteClass extends SuperClass implements TestIntf {\n+        @Override\n+        public void a_noiseMethod(byte[] bytes) {\n+        }\n+\n+        public void a_noiseMethod(String s) {\n+        }\n+\n+        @Override\n+        public void b_noiseMethod(byte[] bytes) {\n+        }\n+\n+        public void b_noiseMethod(String s) {\n+        }\n+\n+        public void c_noiseMethod(String s) {\n+        }\n+\n+        public void d_noiseMethod(String s) {\n+        }\n+\n+        public void fiveArgs(Object one, Object two, Object three, Object four, Object five) {\n+        }\n+\n+        public void fiveArgs(Integer one, Integer two, Integer three, Integer four, Integer five) {\n+        }\n+\n+        public void noArgs() {\n+        }\n+\n+        public void x_noiseMethod(String s) {\n+        }\n+\n+        public void y_noiseMethod(String s) {\n+        }\n+\n+        public void z_noiseMethod(String s) {\n+        }\n+\n+    }\n+\n+    public static class SuperClass {\n+        public void a_superNoiseMethod(String s) {\n+        }\n+\n+        public void b_superNoiseMethod(String s) {\n+        }\n+\n+        public void c_superNoiseMethod(String s) {\n+        }\n+\n+        public void d_superNoiseMethod(String s) {\n+        }\n+\n+        public void superFiveArgs(Object one, Object two, Object three, Object four, Object five) {\n+        }\n+\n+        public void superFiveArgs(Integer one, Integer two, Integer three, Integer four, Integer five) {\n+        }\n+\n+        public void superNoArgs() {\n+        }\n+\n+        public void x_superNoiseMethod(String s) {\n+        }\n+\n+        public void y_superNoiseMethod(String s) {\n+        }\n+\n+        public void z_superNoiseMethod(String s) {\n+        }\n+\n+    }\n+\n+    public interface TestIntf {\n+        public void a_noiseMethod(byte[] bytes);\n+\n+        public void b_noiseMethod(byte[] bytes);\n+\n+        default void defaultIntfFiveArgs(Object a, Object b, Object c, Object d, Object e) {\n+        }\n+\n+        default void defaultIntfFiveArgs(Integer a, Integer b, Integer c, Integer d, Integer e) {\n+        }\n+\n+        default void defaultIntfNoArgs() {\n+        }\n+\n+        default void y_noiseMethod(byte[] bytes) {\n+        }\n+\n+        default void z_noiseMethod(byte[] bytes) {\n+        }\n+    }\n+\n+    private static final Class<?>[] FIVE_ARG_CLASSES = new Class<?>[] { Object.class, Object.class, Object.class,\n+            Object.class, Object.class };\n+\n+    @Benchmark\n+    @Warmup(iterations = 3, time = 2, timeUnit = TimeUnit.SECONDS)\n+    @Measurement(iterations = 3, time = 2, timeUnit = TimeUnit.SECONDS)\n+    public Method getConcreteFiveArg() throws NoSuchMethodException, SecurityException {\n+        return ConcreteClass.class.getMethod(\"fiveArgs\", FIVE_ARG_CLASSES);\n+    }\n+\n+    @Benchmark\n+    public Method getConcreteNoArg() throws NoSuchMethodException, SecurityException {\n+        return ConcreteClass.class.getMethod(\"noArgs\");\n+    }\n+\n+    @Benchmark\n+    public Method getIntfFiveArg() throws NoSuchMethodException, SecurityException {\n+        return ConcreteClass.class.getMethod(\"defaultIntfFiveArgs\", FIVE_ARG_CLASSES);\n+    }\n+\n+    @Benchmark\n+    public Method getIntfNoArg() throws NoSuchMethodException, SecurityException {\n+        return ConcreteClass.class.getMethod(\"defaultIntfNoArgs\");\n+    }\n+\n+    @Benchmark\n+    @Measurement(iterations = 5, time = 3, timeUnit = TimeUnit.SECONDS)\n+    public Method getNoSuchMethod() throws NoSuchMethodException, SecurityException {\n+        try {\n+            return ConcreteClass.class.getMethod(\"noSuchMethod\");\n+        } catch (NoSuchMethodException nsme) {\n+            return null;\n+        }\n+    }\n+\n+    @Benchmark\n+    public Method getSuperFiveArg() throws NoSuchMethodException, SecurityException {\n+        return ConcreteClass.class.getMethod(\"superFiveArgs\", FIVE_ARG_CLASSES);\n+    }\n+\n+    @Benchmark\n+    public Method getSuperNoArg() throws NoSuchMethodException, SecurityException {\n+        return ConcreteClass.class.getMethod(\"superNoArgs\");\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ClassGetMethod.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"}]}