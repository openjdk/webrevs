{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1579,1 +1579,1 @@\n-            ncomps+=1;\n+            ncomps+=options.trim().split(\" \").length;\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/PSPrinterJob.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -823,1 +823,0 @@\n-        int OPTIONS = 0x2;\n@@ -827,0 +826,1 @@\n+        String[] optionArgs = null;\n@@ -838,2 +838,2 @@\n-            pFlags |= OPTIONS;\n-            ncomps+=1;\n+            optionArgs = options.trim().split(\" \");\n+            ncomps+=optionArgs.length;\n@@ -873,2 +873,4 @@\n-        if ((pFlags & OPTIONS) != 0) {\n-            execCmd[n++] = \"-o\" + options;\n+        if (optionArgs != null) {\n+            for (String option : optionArgs) {\n+                execCmd[n++] = \"-o \" + option;\n+            }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/UnixPrintJob.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.print.PrintService;\n+import javax.print.PrintServiceLookup;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.standard.Media;\n+import javax.print.attribute.standard.MediaTray;\n+import javax.print.attribute.standard.OutputBin;\n+import java.awt.Graphics;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+\n+\/*\n+ * @test\n+ * @bug 8349350\n+ * @key printer\n+ * @summary no ArrayIndexOutOfBoundsException with multiple print options\n+ * @run main PrintExecCmdOptionTest\n+ *\/\n+\n+public class PrintExecCmdOptionTest {\n+\n+    public static void main(String[] args) throws PrinterException {\n+        PrintService[] printServices = PrintServiceLookup.lookupPrintServices(null, null);\n+        if (printServices.length == 0) {\n+            System.out.println(\"No print service found\");\n+            return;\n+        }\n+\n+        PrintService testPrintService = null;\n+        OutputBin outputBin = null;\n+        MediaTray mediaTray = null;\n+        for (PrintService ps : printServices) {\n+            mediaTray = null;\n+            Media[] medias = (Media[]) ps.\n+                    getSupportedAttributeValues(Media.class, null, null);\n+            if (medias != null) {\n+                for (Media m : medias) {\n+                    if (m instanceof MediaTray) {\n+                        mediaTray = (MediaTray) m;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (mediaTray == null) {\n+                continue;\n+            }\n+            OutputBin[] outputBins = (OutputBin[]) ps.\n+                    getSupportedAttributeValues(OutputBin.class, null, null);\n+            if (outputBins != null && outputBins.length > 0) {\n+                outputBin = outputBins[0];\n+                testPrintService = ps;\n+                break;\n+            }\n+        }\n+        if (testPrintService == null) {\n+            System.out.println(\"Test print service not found\");\n+            return;\n+        }\n+\n+        PrinterJob printerJob = PrinterJob.getPrinterJob();\n+        printerJob.setPrintService(testPrintService);\n+\n+        PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();\n+        attributeSet.add(outputBin);\n+        attributeSet.add(mediaTray);\n+\n+        printerJob.setPrintable(new Printable() {\n+            @Override\n+            public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n+                return NO_SUCH_PAGE;\n+            }\n+        });\n+        printerJob.print(attributeSet);\n+    }\n+}\n","filename":"test\/jdk\/javax\/print\/PrintExecCmdOptionTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.print.PrintException;\n+import javax.print.attribute.HashDocAttributeSet;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttribute;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.standard.NumberUp;\n+import javax.print.attribute.standard.OrientationRequested;\n+import javax.print.attribute.standard.Sides;\n+import javax.print.DocFlavor;\n+import javax.print.SimpleDoc;\n+import javax.print.PrintServiceLookup;\n+import javax.print.PrintService;\n+import javax.print.DocPrintJob;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+\/*\n+ * @test\n+ * @bug 8349350\n+ * @key printer\n+ * @summary lpr command syntax for options. lpr [ -o option[=value] ]\n+ * @run main\/othervm -Dsun.print.ippdebug=true UnixPrintJobOptionsTest\n+ *\/\n+\n+public class UnixPrintJobOptionsTest {\n+\n+    static final DocFlavor docFlavor = DocFlavor.STRING.TEXT_PLAIN;\n+    static final List<Class<? extends PrintRequestAttribute>> requiredAttributes = new ArrayList<>();\n+    static {\n+        requiredAttributes.add(NumberUp.class);\n+        requiredAttributes.add(OrientationRequested.class);\n+        requiredAttributes.add(Sides.class);\n+    }\n+    static Map<PrintService,Class<? extends PrintRequestAttribute>[]> printerSupportedAttrs = new HashMap<>();\n+\n+    public static void main(String[] args) {\n+        initializeTestPrintServices();\n+        if (printerSupportedAttrs.isEmpty()) {\n+            System.out.println(\"Print services not found\");\n+            return;\n+        }\n+\n+        PrintStream origPrintStream = System.out;\n+\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        PrintStream printStream = new PrintStream(os);\n+        System.setOut(printStream);\n+\n+        boolean success = false;\n+\n+        for (PrintService testPrintService : printerSupportedAttrs.keySet()) {\n+            String patternStr = \"\/usr\/bin\/lpr\\\\s+.*\";\n+            PrintRequestAttributeSet attributeSet = new HashPrintRequestAttributeSet();\n+            for (Class<? extends PrintRequestAttribute> attrClass : printerSupportedAttrs.get(testPrintService)) {\n+                Object supportedValues = testPrintService.getSupportedAttributeValues(attrClass, docFlavor, attributeSet);\n+                if (supportedValues == null || ((Object[]) supportedValues).length == 0) {\n+                    continue;\n+                }\n+                if (attrClass == NumberUp.class) {\n+                    NumberUp numberUp = ((NumberUp[]) supportedValues)[0];\n+                    patternStr = patternStr + \"\\\\s-o number-up=\" + numberUp.getValue();\n+                    attributeSet.add(numberUp);\n+                } else if (attrClass == OrientationRequested.class) {\n+                    for (OrientationRequested orientationRequested : ((OrientationRequested[]) supportedValues)) {\n+                        if (orientationRequested != OrientationRequested.PORTRAIT) {\n+                            patternStr = patternStr + \"\\\\s-o orientation-requested=\" + orientationRequested.getValue();\n+                            attributeSet.add(orientationRequested);\n+                            break;\n+                        }\n+                    }\n+                } else if (attrClass == Sides.class) {\n+                    Sides s = ((Sides[]) supportedValues)[0];\n+                    patternStr = patternStr + \"\\\\s-o sides=\" + s.toString();\n+                    attributeSet.add(s);\n+                }\n+            }\n+\n+            if (attributeSet.size() < 2) {\n+                continue;\n+            }\n+            System.out.println(\"Debug pattern: \" + patternStr);\n+            DocPrintJob docPrintJob = testPrintService.createPrintJob();\n+            try {\n+                docPrintJob.print(new SimpleDoc(\"UnixPrintJob options test\",\n+                        docFlavor, new HashDocAttributeSet()), attributeSet);\n+            } catch (PrintException ex) {\n+                throw new RuntimeException(ex);\n+            } finally {\n+                System.setOut(origPrintStream);\n+\n+            }\n+            String debug = os.toString();\n+            System.out.print(debug);\n+            Pattern pattern = Pattern.compile(patternStr);\n+            if (!pattern.matcher(debug).find()) {\n+                throw new RuntimeException(\"Output does not contain necessary options\");\n+            } else {\n+                success = true;\n+                break;\n+            }\n+        }\n+        if (!success) {\n+            System.setOut(origPrintStream);\n+            System.out.println(\"Acceptable print service not found\");\n+        }\n+    }\n+\n+    private static void initializeTestPrintServices() {\n+        PrintService[] printServices = PrintServiceLookup.lookupPrintServices(docFlavor, null);\n+        if (printServices == null || printServices.length == 0) {\n+            return;\n+        }\n+\n+        List<Class<? extends PrintRequestAttribute>> printerAttrs;\n+        for (PrintService ps : printServices) {\n+            printerAttrs = new ArrayList<>();\n+            for (Class<? extends PrintRequestAttribute> attr : requiredAttributes) {\n+                if (ps.isAttributeCategorySupported(attr)) {\n+                    printerAttrs.add(attr);\n+                }\n+            }\n+            if (printerAttrs.size() > 1) {\n+                printerSupportedAttrs.put(ps, printerAttrs.toArray(new Class[0]));\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/print\/UnixPrintJobOptionsTest.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"}]}