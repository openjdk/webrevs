{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,0 +105,15 @@\n+\/* Return a handle to the module containing this method, either a DLL in case\n+ * of a dynamic library build, or the .EXE in case of a static build.\n+ *\/\n+HMODULE GetAwtModuleHandle() {\n+    HMODULE hModule = NULL;\n+    GetModuleHandleEx(\n+        GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,\n+        (LPCTSTR) &GetAwtModuleHandle,\n+        &hModule\n+    );\n+    return hModule;\n+}\n+\n+extern \"C\" {\n+\n@@ -110,0 +125,2 @@\n+    AwtToolkit::GetInstance().SetModuleHandle(GetAwtModuleHandle());\n+\n@@ -116,0 +133,2 @@\n+}\n+\n@@ -249,26 +268,0 @@\n-\/************************************************************************\n- * Exported functions\n- *\/\n-\n-extern \"C\" BOOL APIENTRY DllMain(HANDLE hInstance, DWORD ul_reason_for_call,\n-                                 LPVOID)\n-{\n-    \/\/ Don't use the TRY and CATCH_BAD_ALLOC_RET macros if we're detaching\n-    \/\/ the library. Doing so causes awt.dll to call back into the VM during\n-    \/\/ shutdown. This crashes the HotSpot VM.\n-    switch (ul_reason_for_call) {\n-    case DLL_PROCESS_ATTACH:\n-        TRY;\n-        AwtToolkit::GetInstance().SetModuleHandle((HMODULE)hInstance);\n-        CATCH_BAD_ALLOC_RET(FALSE);\n-        break;\n-    case DLL_PROCESS_DETACH:\n-#ifdef DEBUG\n-        DTrace_DisableMutex();\n-        DMem_DisableMutex();\n-#endif \/\/ DEBUG\n-        break;\n-    }\n-    return TRUE;\n-}\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Toolkit.cpp","additions":20,"deletions":27,"binary":false,"changes":47,"status":"modified"}]}