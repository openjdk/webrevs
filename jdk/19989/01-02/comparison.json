{"files":[{"patch":"@@ -16251,4 +16251,4 @@\n-    __ lookup_secondary_supers_table($sub$$Register, $super$$Register,\n-                                     $tempR1$$Register, $tempR2$$Register, $tempR3$$Register,\n-                                     $vtemp$$FloatRegister,\n-                                     $result$$Register, \/*L_success*\/nullptr);\n+    __ lookup_secondary_supers_table_var($sub$$Register, $super$$Register,\n+                                         $tempR1$$Register, $tempR2$$Register, $tempR3$$Register,\n+                                         $vtemp$$FloatRegister,\n+                                         $result$$Register, \/*L_success*\/nullptr);\n@@ -16275,5 +16275,6 @@\n-      success = __ lookup_secondary_supers_table($sub$$Register, $super_reg$$Register,\n-                                                 $tempR1$$Register, $tempR2$$Register, $tempR3$$Register,\n-                                                 $vtemp$$FloatRegister,\n-                                                 $result$$Register,\n-                                                 super_klass_slot);\n+      success =\n+        __ lookup_secondary_supers_table_const($sub$$Register, $super_reg$$Register,\n+                                               $tempR1$$Register, $tempR2$$Register, $tempR3$$Register,\n+                                               $vtemp$$FloatRegister,\n+                                               $result$$Register,\n+                                               super_klass_slot);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1390,7 +1390,4 @@\n-                                        RegisterOrConstant super_check_offset) {\n-  assert_different_registers(sub_klass, super_klass, temp_reg);\n-  bool must_load_sco = (super_check_offset.constant_or_zero() == -1);\n-  if (super_check_offset.is_register()) {\n-    assert_different_registers(sub_klass, super_klass,\n-                               super_check_offset.as_register());\n-  } else if (must_load_sco) {\n+                                                   Register super_check_offset) {\n+  assert_different_registers(sub_klass, super_klass, temp_reg, super_check_offset);\n+  bool must_load_sco = ! super_check_offset->is_valid();\n+  if (must_load_sco) {\n@@ -1407,1 +1404,0 @@\n-  int sc_offset = in_bytes(Klass::secondary_super_cache_offset());\n@@ -1429,8 +1425,1 @@\n-    super_check_offset = RegisterOrConstant(temp_reg);\n-  }\n-\n-  \/\/ Don't check secondary_super_cache\n-  if (super_check_offset.is_register()\n-      && !UseSecondarySupersCache) {\n-    subs(zr, super_check_offset.as_register(), sc_offset);\n-    br(Assembler::EQ, *L_slow_path);\n+    super_check_offset = temp_reg;\n@@ -1442,0 +1431,1 @@\n+  br(Assembler::EQ, *L_success);\n@@ -1454,17 +1444,3 @@\n-  if (super_check_offset.is_register()) {\n-    br(Assembler::EQ, *L_success);\n-    subs(zr, super_check_offset.as_register(), sc_offset);\n-    if (L_failure == &L_fallthrough) {\n-      br(Assembler::EQ, *L_slow_path);\n-    } else {\n-      br(Assembler::NE, *L_failure);\n-      final_jmp(*L_slow_path);\n-    }\n-  } else if (super_check_offset.as_constant() == sc_offset) {\n-    \/\/ Need a slow path; fast failure is impossible.\n-    if (L_slow_path == &L_fallthrough) {\n-      br(Assembler::EQ, *L_success);\n-    } else {\n-      br(Assembler::NE, *L_slow_path);\n-      final_jmp(*L_success);\n-    }\n+  sub(rscratch1, super_check_offset, in_bytes(Klass::secondary_super_cache_offset()));\n+  if (L_failure == &L_fallthrough) {\n+    cbz(rscratch1, *L_slow_path);\n@@ -1472,7 +1448,2 @@\n-    \/\/ No slow path; it's a fast decision.\n-    if (L_failure == &L_fallthrough) {\n-      br(Assembler::EQ, *L_success);\n-    } else {\n-      br(Assembler::NE, *L_failure);\n-      final_jmp(*L_success);\n-    }\n+    cbnz(rscratch1, *L_failure);\n+    final_jmp(*L_slow_path);\n@@ -1664,4 +1635,4 @@\n-  lookup_secondary_supers_table(sub_klass,\n-                                super_klass,\n-                                temp_reg, temp2_reg, temp3_reg, vtemp, result_reg,\n-                                nullptr);\n+  lookup_secondary_supers_table_var(sub_klass,\n+                                    super_klass,\n+                                    temp_reg, temp2_reg, temp3_reg, vtemp, result_reg,\n+                                    nullptr);\n@@ -1717,9 +1688,9 @@\n-bool MacroAssembler::lookup_secondary_supers_table(Register r_sub_klass,\n-                                                   Register r_super_klass,\n-                                                   Register temp1,\n-                                                   Register temp2,\n-                                                   Register temp3,\n-                                                   FloatRegister vtemp,\n-                                                   Register result,\n-                                                   u1 super_klass_slot,\n-                                                   bool stub_is_near) {\n+bool MacroAssembler::lookup_secondary_supers_table_const(Register r_sub_klass,\n+                                                         Register r_super_klass,\n+                                                         Register temp1,\n+                                                         Register temp2,\n+                                                         Register temp3,\n+                                                         FloatRegister vtemp,\n+                                                         Register result,\n+                                                         u1 super_klass_slot,\n+                                                         bool stub_is_near) {\n@@ -1819,8 +1790,8 @@\n-void MacroAssembler::lookup_secondary_supers_table(Register r_sub_klass,\n-                                                   Register r_super_klass,\n-                                                   Register temp1,\n-                                                   Register temp2,\n-                                                   Register temp3,\n-                                                   FloatRegister vtemp,\n-                                                   Register result,\n-                                                   Label *L_success) {\n+void MacroAssembler::lookup_secondary_supers_table_var(Register r_sub_klass,\n+                                                       Register r_super_klass,\n+                                                       Register temp1,\n+                                                       Register temp2,\n+                                                       Register temp3,\n+                                                       FloatRegister vtemp,\n+                                                       Register result,\n+                                                       Label *L_success) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":32,"deletions":61,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -998,1 +998,1 @@\n-                RegisterOrConstant super_check_offset = RegisterOrConstant(-1));\n+                                     Register super_check_offset = noreg);\n@@ -1040,8 +1040,8 @@\n-  void lookup_secondary_supers_table(Register sub_klass,\n-                                     Register r_super_klass,\n-                                     Register temp1,\n-                                     Register temp2,\n-                                     Register temp3,\n-                                     FloatRegister vtemp,\n-                                     Register result,\n-                                     Label *L_success);\n+  void lookup_secondary_supers_table_var(Register sub_klass,\n+                                         Register r_super_klass,\n+                                         Register temp1,\n+                                         Register temp2,\n+                                         Register temp3,\n+                                         FloatRegister vtemp,\n+                                         Register result,\n+                                         Label *L_success);\n@@ -1052,9 +1052,9 @@\n-  bool lookup_secondary_supers_table(Register r_sub_klass,\n-                                     Register r_super_klass,\n-                                     Register temp1,\n-                                     Register temp2,\n-                                     Register temp3,\n-                                     FloatRegister vtemp,\n-                                     Register result,\n-                                     u1 super_klass_slot,\n-                                     bool stub_is_near = false);\n+  bool lookup_secondary_supers_table_const(Register r_sub_klass,\n+                                           Register r_super_klass,\n+                                           Register temp1,\n+                                           Register temp2,\n+                                           Register temp3,\n+                                           FloatRegister vtemp,\n+                                           Register result,\n+                                           u1 super_klass_slot,\n+                                           bool stub_is_near = false);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1834,0 +1834,3 @@\n+                           Register temp1,\n+                           Register temp2,\n+                           Register result,\n@@ -1843,1 +1846,1 @@\n-    __ check_klass_subtype_slow_path(sub_klass, super_klass, noreg, noreg, &L_success, nullptr);\n+    __ check_klass_subtype_slow_path(sub_klass, super_klass, temp1, temp2, &L_success, nullptr);\n@@ -1978,27 +1981,11 @@\n-    {\n-      __ load_klass(r19_klass, copied_oop);\/\/ query the object klass\n-\n-      BLOCK_COMMENT(\"type_check:\");\n-      if (UseSecondarySupersTable) {\n-        Label L_miss;\n-        __ check_klass_subtype_fast_path(\/*sub_klass*\/r19_klass, \/*super_klass*\/ckval, noreg,\n-                                         &L_store_element, &L_miss, nullptr,\n-                                         \/*super_check_offset*\/ckoff);\n-        __ BIND(L_miss);\n-\n-        \/\/ We will consult the secondary-super array.\n-        __ lookup_secondary_supers_table(\/*r_sub_klass*\/r19_klass,\n-                                         \/*r_super_klass*\/ckval,\n-                                         \/*r_array_base*\/gct1,\n-                                         \/*temp2*\/gct2,\n-                                         \/*temp3*\/gct3,\n-                                         \/*vtemp*\/v0,\n-                                         \/*result*\/r10, &L_store_element);\n-\n-        \/\/ Fall through on failure!\n-      } else {\n-        generate_type_check(\/*sub_klass*\/r19_klass,\n-                            \/*super_check_offset*\/ckoff,\n-                            \/*super_klass*\/ckval, L_store_element);\n-      }\n-    }\n+    __ load_klass(r19_klass, copied_oop);\/\/ query the object klass\n+\n+    BLOCK_COMMENT(\"type_check:\");\n+    generate_type_check(\/*sub_klass*\/r19_klass,\n+                        \/*super_check_offset*\/ckoff,\n+                        \/*super_klass*\/ckval,\n+                        \/*r_array_base*\/gct1,\n+                        \/*temp2*\/gct2,\n+                        \/*result*\/r10, L_store_element);\n+\n+    \/\/ Fall through on failure!\n@@ -2381,1 +2368,2 @@\n-      generate_type_check(scratch_src_klass, sco_temp, dst_klass, L_plain_copy);\n+      generate_type_check(scratch_src_klass, sco_temp, dst_klass, \/*temps*\/ noreg, noreg, noreg,\n+                          L_plain_copy);\n@@ -6814,4 +6802,4 @@\n-    __ lookup_secondary_supers_table(r_sub_klass, r_super_klass,\n-                                     r_array_base, r_array_length, r_array_index,\n-                                     vtemp, result, super_klass_index,\n-                                     \/*stub_is_near*\/true);\n+    __ lookup_secondary_supers_table_const(r_sub_klass, r_super_klass,\n+                                           r_array_base, r_array_length, r_array_index,\n+                                           vtemp, result, super_klass_index,\n+                                           \/*stub_is_near*\/true);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":21,"deletions":33,"binary":false,"changes":54,"status":"modified"}]}