{"files":[{"patch":"@@ -5215,2 +5215,2 @@\n-  cmpq(r_bitmap, (int32_t)-1); \/\/ sign-extends immediate to 64-bit value\n-  jcc(Assembler::equal, L_huge);\n+  cmpl(r_array_length, (int32_t)SECONDARY_SUPERS_TABLE_SIZE - 2);\n+  jcc(Assembler::greater, L_huge);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -650,1 +650,1 @@\n-  set_secondary_supers(nullptr);\n+  set_secondary_supers(nullptr, SECONDARY_SUPERS_BITMAP_EMPTY);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,2 +116,2 @@\n-      int codes[3] = { 0, SECONDARY_SUPERS_TABLE_SIZE \/ 2, SECONDARY_SUPERS_TABLE_SIZE - 1};\n-      hash_code = codes[hash_code % 3];\n+      hash_code = hash_code % 3;\n+      hash_code = hash_code * (SECONDARY_SUPERS_TABLE_SIZE \/ 3);\n@@ -184,4 +184,1 @@\n-  \/\/ For performance reasons we don't use a hashed lookup unless there\n-  \/\/ are at least two empty slots in the table. If there were only one\n-  \/\/ empty slot resulting search would be slower than linear probing.\n-  if (secondary_supers()->length() > SECONDARY_SUPERS_TABLE_SIZE - 2) {\n+  if (rotated_bitmap == SECONDARY_SUPERS_BITMAP_FULL) {\n@@ -325,5 +322,0 @@\n-void Klass::set_secondary_supers(Array<Klass*>* secondaries) {\n-  assert(!UseSecondarySupersTable || secondaries == nullptr, \"\");\n-  set_secondary_supers(secondaries, SECONDARY_SUPERS_BITMAP_EMPTY);\n-}\n-\n@@ -335,0 +327,5 @@\n+    if (bitmap != SECONDARY_SUPERS_BITMAP_FULL) {\n+      assert(((uint)secondaries->length() == population_count(bitmap)), \"required\");\n+    }\n+  } else {\n+    assert(bitmap == SECONDARY_SUPERS_BITMAP_EMPTY, \"\");\n@@ -373,6 +370,5 @@\n-  \/\/ Invariant: _secondary_supers.length >= population_count(_secondary_supers_bitmap)\n-\n-  \/\/ Don't attempt to hash a table that's completely full, because in\n-  \/\/ the case of an absent interface linear probing would not\n-  \/\/ terminate.\n-  if (length >= SECONDARY_SUPERS_TABLE_SIZE) {\n+  \/\/ For performance reasons we don't use a hashed table unless there\n+  \/\/ are at least two empty slots in it. If there were only one empty\n+  \/\/ slot it'd take a long time to create the table and the resulting\n+  \/\/ search would be no faster than linear probing.\n+  if (length > SECONDARY_SUPERS_TABLE_SIZE - 2) {\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -239,1 +239,0 @@\n-  void set_secondary_supers(Array<Klass*>* k);\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}