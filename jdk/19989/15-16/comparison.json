{"files":[{"patch":"@@ -192,2 +192,2 @@\n-  \/\/ The check in search_secondary_supers guarantees there are 0s in\n-  \/\/ the bitmap, so this loop eventually terminates.\n+  \/\/ The check at the start of this function guarantees there are 0s\n+  \/\/ in the bitmap, so this loop eventually terminates.\n@@ -369,5 +369,3 @@\n-  \/\/ For performance reasons we don't use a hashed table unless there\n-  \/\/ are at least two empty slots in it. If there were only one empty\n-  \/\/ slot it'd take a long time to create the table and the resulting\n-  \/\/ search would be no faster than linear probing.\n-  if (length > SECONDARY_SUPERS_TABLE_SIZE - 2) {\n+  \/\/ Degenerate case: use linear search when we have too many classes\n+  \/\/ to fit in an intx-sized bitmap.\n+  if (length >= SECONDARY_SUPERS_TABLE_SIZE) {\n@@ -409,0 +407,1 @@\n+    postcond((int)population_count(bitmap) <= secondaries->length());\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -101,0 +101,2 @@\n+  precond((int)population_count(bitmap) <= secondary_supers()->length());\n+\n@@ -104,1 +106,1 @@\n-  if ((shifted_bitmap >> highest_bit_number) == 0) {\n+  if (((shifted_bitmap >> highest_bit_number) & 1) == 0) {\n","filename":"src\/hotspot\/share\/oops\/klass.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}