{"files":[{"patch":"@@ -5061,4 +5061,0 @@\n-#ifdef DEBUG\n-  call_VM_leaf_base((address)&poo, \/*number_of_arguments*\/0);\n-#endif\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1720,1 +1720,3 @@\n-    __ check_klass_subtype_slow_path(Resi, Reax, Recx, Redi,\n+    \/\/ NB: Callers may assume that, when $result is a valid register,\n+    \/\/ check_klass_subtype_slow_path Sets it to a nonzero value.\n+     __ check_klass_subtype_slow_path(Resi, Reax, Recx, Redi,\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -12178,0 +12178,3 @@\n+    \/\/ NB: Callers may assume that, when $result is a valid register,\n+    \/\/ check_klass_subtype_slow_path_linear sets it to a nonzero\n+    \/\/ value.\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -214,1 +214,0 @@\n-  _use_secondary_supers_table = UseSecondarySupersTable;\n@@ -278,1 +277,0 @@\n-  st->print_cr(\"- use_secondary_supers_table:     %d\", _use_secondary_supers_table);\n@@ -2449,5 +2447,0 @@\n-  if (! _use_secondary_supers_table && UseSecondarySupersTable) {\n-    log_warning(cds)(\"The shared archive was created without UseSecondarySupersTable.\");\n-    return false;\n-  }\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -194,1 +194,0 @@\n-  bool    _use_secondary_supers_table;            \/\/ save the flag UseSecondarySupersTable\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -442,4 +442,2 @@\n-    {\n-      Universe::_the_array_interfaces_bitmap = Klass::compute_secondary_supers_bitmap(_the_array_interfaces_array);\n-      Universe::_the_empty_klass_bitmap      = Klass::compute_secondary_supers_bitmap(_the_empty_klass_array);\n-    }\n+    _the_array_interfaces_bitmap = Klass::compute_secondary_supers_bitmap(_the_array_interfaces_array);\n+    _the_empty_klass_bitmap      = Klass::compute_secondary_supers_bitmap(_the_empty_klass_array);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+#include \"klass.inline.hpp\"\n@@ -1409,9 +1410,6 @@\n-  } else if (num_extra_slots == 0) {\n-    if (num_extra_slots == 0 && interfaces->length() <= 1) {\n-      \/\/ We will reuse the transitive interfaces list if we're certain\n-      \/\/ it's in hash order.\n-      uintx bitmap = compute_secondary_supers_bitmap(interfaces);\n-      set_secondary_supers(interfaces, bitmap);\n-      return nullptr;\n-    }\n-    \/\/ ... fall through if that didn't work.\n+  } else if (num_extra_slots == 0 && interfaces->length() <= 1) {\n+    \/\/ We will reuse the transitive interfaces list if we're certain\n+    \/\/ it's in hash order.\n+    uintx bitmap = compute_secondary_supers_bitmap(interfaces);\n+    set_secondary_supers(interfaces, bitmap);\n+    return nullptr;\n@@ -3524,4 +3522,4 @@\n-  {\n-    st->print(BULLET\"hash_slot:         %d\", hash_slot()); st->cr();\n-    st->print(BULLET\"bitmap:            \" UINTX_FORMAT_X_0, _bitmap); st->cr();\n-  }\n+\n+  st->print(BULLET\"hash_slot:         %d\", hash_slot()); st->cr();\n+  st->print(BULLET\"bitmap:            \" UINTX_FORMAT_X_0, _bitmap); st->cr();\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -284,1 +284,1 @@\n-                               _bitmap(SECONDARY_SUPERS_BITMAP_FULL),\n+                               _bitmap(SECONDARY_SUPERS_BITMAP_EMPTY),\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+\n@@ -538,1 +539,2 @@\n-    juint    off = k->super_check_offset();\n+    guarantee(secondary_supers() != nullptr, \"must be\");\n+    const juint off = k->super_check_offset();\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+\/\/ Hashed search for secondary super k.\n","filename":"src\/hotspot\/share\/oops\/klass.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}