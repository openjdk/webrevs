{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,0 +103,1 @@\n+    Preview preview;\n@@ -138,1 +139,1 @@\n-        Preview preview = Preview.instance(context);\n+        preview = Preview.instance(context);\n@@ -1483,0 +1484,1 @@\n+     *  @param pos       The position to use for error reporting.\n@@ -1486,1 +1488,1 @@\n-    Symbol findVar(Env<AttrContext> env, Name name) {\n+    Symbol findVar(DiagnosticPosition pos, Env<AttrContext> env, Name name) {\n@@ -1511,1 +1513,1 @@\n-                    if (env1.info.ctorPrologue && !isAllowedEarlyReference(env1, (VarSymbol)sym))\n+                    if (env1.info.ctorPrologue && !isAllowedEarlyReference(pos, env1, (VarSymbol)sym))\n@@ -2424,1 +2426,1 @@\n-        return checkNonExistentType(checkRestrictedType(pos, findIdentInternal(env, name, kind), name));\n+        return checkNonExistentType(checkRestrictedType(pos, findIdentInternal(pos, env, name, kind), name));\n@@ -2427,1 +2429,1 @@\n-    Symbol findIdentInternal(Env<AttrContext> env, Name name, KindSelector kind) {\n+    Symbol findIdentInternal(DiagnosticPosition pos, Env<AttrContext> env, Name name, KindSelector kind) {\n@@ -2432,1 +2434,1 @@\n-            sym = findVar(env, name);\n+            sym = findVar(pos, env, name);\n@@ -3779,1 +3781,1 @@\n-                    else if (env1.info.ctorPrologue && !isAllowedEarlyReference(env1, (VarSymbol)sym))\n+                    else if (env1.info.ctorPrologue && !isAllowedEarlyReference(pos, env1, (VarSymbol)sym))\n@@ -3848,1 +3850,1 @@\n-    private boolean isAllowedEarlyReference(Env<AttrContext> env, VarSymbol v) {\n+    private boolean isAllowedEarlyReference(DiagnosticPosition pos, Env<AttrContext> env, VarSymbol v) {\n@@ -3854,0 +3856,3 @@\n+        \/\/ The flexible constructors feature must be enabled\n+        preview.checkSourceLevel(pos, Feature.FLEXIBLE_CONSTRUCTORS);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,21 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8334258\n+ * @summary Disallow early assignment if FLEXIBLE_CONSTRUCTORS preview feature is not enabled\n+ * @compile\/fail\/ref=EarlyAssignmentNoPreview1.out -XDrawDiagnostics EarlyAssignmentNoPreview1.java\n+ *\/\n+public class EarlyAssignmentNoPreview1 {\n+\n+    Runnable r;\n+\n+    public EarlyAssignmentNoPreview1() {\n+        this(r = () -> System.out.println(\"hello\"));\n+    }\n+\n+    public EarlyAssignmentNoPreview1(Runnable r) {\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyAssignmentNoPreview1();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview1.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+EarlyAssignmentNoPreview1.java:12:14: compiler.err.preview.feature.disabled: (compiler.misc.feature.flexible.constructors)\n+1 error\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview1.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,21 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8334258\n+ * @summary Disallow early assignment if FLEXIBLE_CONSTRUCTORS preview feature is not enabled\n+ * @compile\/fail\/ref=EarlyAssignmentNoPreview2.out -XDrawDiagnostics EarlyAssignmentNoPreview2.java\n+ *\/\n+public class EarlyAssignmentNoPreview2 {\n+\n+    Runnable r;\n+\n+    public EarlyAssignmentNoPreview2() {\n+        this(this.r = () -> System.out.println(\"hello\"));\n+    }\n+\n+    public EarlyAssignmentNoPreview2(Runnable r) {\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyAssignmentNoPreview2();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview2.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+EarlyAssignmentNoPreview2.java:12:14: compiler.err.preview.feature.disabled: (compiler.misc.feature.flexible.constructors)\n+1 error\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview2.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,21 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8334258\n+ * @summary Disallow early assignment if FLEXIBLE_CONSTRUCTORS preview feature is not enabled\n+ * @compile\/fail\/ref=EarlyAssignmentNoPreview3.out -XDrawDiagnostics EarlyAssignmentNoPreview3.java\n+ *\/\n+public class EarlyAssignmentNoPreview3 {\n+\n+    Runnable r;\n+\n+    public EarlyAssignmentNoPreview3() {\n+        this(EarlyAssignmentNoPreview3.this.r = () -> System.out.println(\"hello\"));\n+    }\n+\n+    public EarlyAssignmentNoPreview3(Runnable r) {\n+    }\n+\n+    public static void main(String[] args) {\n+        new EarlyAssignmentNoPreview3();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview3.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+EarlyAssignmentNoPreview3.java:12:14: compiler.err.preview.feature.disabled: (compiler.misc.feature.flexible.constructors)\n+1 error\n","filename":"test\/langtools\/tools\/javac\/SuperInit\/EarlyAssignmentNoPreview3.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}