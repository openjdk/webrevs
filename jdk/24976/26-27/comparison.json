{"files":[{"patch":"@@ -150,1 +150,1 @@\n-    SecretKey engineGenerateKey0(boolean tls12) {\n+    protected SecretKey engineGenerateKey0(boolean tls12) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/TlsPrfGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-     * The {@code label} {@code String} will be converted to bytes using\n+     * {@code label} will be converted to bytes using\n@@ -206,0 +206,3 @@\n+     * @throws IllegalStateException if this session does not have the\n+     *         necessary key generation material (for example, a session\n+     *         under construction during handshaking)\n@@ -228,1 +231,1 @@\n-     * The {@code label} {@code String} will be converted to bytes using\n+     * {@code label} will be converted to bytes using\n@@ -257,0 +260,3 @@\n+     * @throws IllegalStateException if this session does not have the\n+     *         necessary key generation material (for example, a session\n+     *         under construction during handshaking)\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/ExtendedSSLSession.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -84,2 +84,1 @@\n-     * @param keyAlg the algorithm name that the generated SecretKey should\n-     *               have, or null if the default should be used\n+     * @param keyAlg the algorithm name for the generated {@code SecretKey}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/internal\/spec\/TlsPrfParameterSpec.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1493,1 +1493,1 @@\n-                throw new RuntimeException(\n+                throw new IllegalStateException(\n@@ -1608,1 +1608,1 @@\n-                throw new RuntimeException(\"Random nonces not captured\");\n+                throw new IllegalStateException(\"Random nonces not captured\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSessionImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -471,0 +471,8 @@\n+            \/\/ Do a null\/byte[0] comparison.  Exporters should be the same.\n+            clientBytes = clientSession.exportKeyingMaterialData(\"hello\",\n+                    null, 128);\n+            serverBytes = serverSession.exportKeyingMaterialData(\"hello\",\n+                    new byte[0], 128);\n+            assertEqualsByteArray(clientBytes, serverBytes,\n+                    \"Data: null vs. empty context should be the same\");\n+\n@@ -488,0 +496,10 @@\n+            \/\/ Do a null\/byte[0] comparison.  Should NOT be the same.\n+            clientBytes = clientSession.exportKeyingMaterialData(\n+                    \"hello\", null, 128);\n+            serverBytes = serverSession.exportKeyingMaterialData(\n+                    \"hello\", new byte[0], 128);\n+            assertNotEqualsByteArray(clientBytes, serverBytes,\n+                    \"empty vs. null context but exporters same\");\n+            log(\"Data: empty vs. null context, \" +\n+                    \"different exporters test passed\");\n+\n","filename":"test\/jdk\/javax\/net\/ssl\/ExtendedSSLSession\/ExportKeyingMaterialTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}