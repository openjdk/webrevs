{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import java.util.stream.Stream;\n@@ -435,3 +436,4 @@\n-     * Gets the set of available currencies.  The returned set of currencies\n-     * contains all of the available currencies, which may include currencies\n-     * that represent obsolete ISO 4217 codes.  The set can be modified\n+     * {@return a set of available currencies} The returned set of currencies\n+     * contains all the available currencies, which may include currencies\n+     * that represent obsolete ISO 4217 codes. If there is no currency available\n+     * in the runtime, the returned set is empty. The set can be modified\n@@ -440,2 +442,3 @@\n-     * @return the set of available currencies.  If there is no currency\n-     *    available in the runtime, the returned set is empty.\n+     * @apiNote Consider using {@link #availableCurrencies()} which returns\n+     * a stream of the available currencies.\n+     * @see #availableCurrencies()\n@@ -445,34 +448,54 @@\n-        synchronized(Currency.class) {\n-            if (available == null) {\n-                available = new HashSet<>(256);\n-\n-                \/\/ Add simple currencies first\n-                for (char c1 = 'A'; c1 <= 'Z'; c1 ++) {\n-                    for (char c2 = 'A'; c2 <= 'Z'; c2 ++) {\n-                        int tableEntry = getMainTableEntry(c1, c2);\n-                        if ((tableEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK\n-                             && tableEntry != INVALID_COUNTRY_ENTRY) {\n-                            char finalChar = (char) ((tableEntry & SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK) + 'A');\n-                            int defaultFractionDigits = (tableEntry & SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK) >> SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT;\n-                            int numericCode = (tableEntry & NUMERIC_CODE_MASK) >> NUMERIC_CODE_SHIFT;\n-                            StringBuilder sb = new StringBuilder();\n-                            sb.append(c1);\n-                            sb.append(c2);\n-                            sb.append(finalChar);\n-                            available.add(getInstance(sb.toString(), defaultFractionDigits, numericCode));\n-                        } else if ((tableEntry & COUNTRY_TYPE_MASK) == SPECIAL_CASE_COUNTRY_MASK\n-                                && tableEntry != INVALID_COUNTRY_ENTRY\n-                                && tableEntry != COUNTRY_WITHOUT_CURRENCY_ENTRY) {\n-                            int index = SpecialCaseEntry.toIndex(tableEntry);\n-                            SpecialCaseEntry scEntry = specialCasesList.get(index);\n-\n-                            if (scEntry.cutOverTime == Long.MAX_VALUE\n-                                    || System.currentTimeMillis() < scEntry.cutOverTime) {\n-                                available.add(getInstance(scEntry.oldCurrency,\n-                                        scEntry.oldCurrencyFraction,\n-                                        scEntry.oldCurrencyNumericCode));\n-                            } else {\n-                                available.add(getInstance(scEntry.newCurrency,\n-                                        scEntry.newCurrencyFraction,\n-                                        scEntry.newCurrencyNumericCode));\n-                            }\n+        initAvailableCurrencies();\n+        return new HashSet<>(available);\n+    }\n+\n+    \/**\n+     * {@return a stream of available currencies} The returned stream of currencies\n+     * contains all the available currencies, which may include currencies\n+     * that represent obsolete ISO 4217 codes. If there is no currency\n+     * available in the runtime, the returned stream is empty.\n+     *\n+     * @implNote Unlike {@link #getAvailableCurrencies()}, this method does\n+     * not create a defensive copy of the {@code Currency} set.\n+     * @see #getAvailableCurrencies()\n+     * @since 25\n+     *\/\n+    public static Stream<Currency> availableCurrencies() {\n+        initAvailableCurrencies();\n+        return available.stream();\n+    }\n+\n+    \/\/ Initialize the set of available currencies if needed\n+    private static synchronized void initAvailableCurrencies() {\n+        if (available == null) {\n+            available = HashSet.newHashSet(256);\n+\n+            \/\/ Add simple currencies first\n+            for (char c1 = 'A'; c1 <= 'Z'; c1 ++) {\n+                for (char c2 = 'A'; c2 <= 'Z'; c2 ++) {\n+                    int tableEntry = getMainTableEntry(c1, c2);\n+                    if ((tableEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK\n+                            && tableEntry != INVALID_COUNTRY_ENTRY) {\n+                        char finalChar = (char) ((tableEntry & SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK) + 'A');\n+                        int defaultFractionDigits = (tableEntry & SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK) >> SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT;\n+                        int numericCode = (tableEntry & NUMERIC_CODE_MASK) >> NUMERIC_CODE_SHIFT;\n+                        StringBuilder sb = new StringBuilder();\n+                        sb.append(c1);\n+                        sb.append(c2);\n+                        sb.append(finalChar);\n+                        available.add(getInstance(sb.toString(), defaultFractionDigits, numericCode));\n+                    } else if ((tableEntry & COUNTRY_TYPE_MASK) == SPECIAL_CASE_COUNTRY_MASK\n+                            && tableEntry != INVALID_COUNTRY_ENTRY\n+                            && tableEntry != COUNTRY_WITHOUT_CURRENCY_ENTRY) {\n+                        int index = SpecialCaseEntry.toIndex(tableEntry);\n+                        SpecialCaseEntry scEntry = specialCasesList.get(index);\n+\n+                        if (scEntry.cutOverTime == Long.MAX_VALUE\n+                                || System.currentTimeMillis() < scEntry.cutOverTime) {\n+                            available.add(getInstance(scEntry.oldCurrency,\n+                                    scEntry.oldCurrencyFraction,\n+                                    scEntry.oldCurrencyNumericCode));\n+                        } else {\n+                            available.add(getInstance(scEntry.newCurrency,\n+                                    scEntry.newCurrencyFraction,\n+                                    scEntry.newCurrencyNumericCode));\n@@ -482,0 +505,1 @@\n+            }\n@@ -483,4 +507,3 @@\n-                \/\/ Now add other currencies\n-                for (OtherCurrencyEntry entry : otherCurrenciesList) {\n-                    available.add(getInstance(entry.currencyCode));\n-                }\n+            \/\/ Now add other currencies\n+            for (OtherCurrencyEntry entry : otherCurrenciesList) {\n+                available.add(getInstance(entry.currencyCode));\n@@ -489,1 +512,0 @@\n-        return new HashSet<>(available);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Currency.java","additions":67,"deletions":45,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8347949\n+ * @summary Ensure underlying element equality of available currency methods\n+ * @run junit AvailableCurrenciesTest\n+ *\/\n+\n+import java.util.Currency;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class AvailableCurrenciesTest {\n+\n+    \/\/ Validate the equality of the set and stream of available currencies\n+    @Test\n+    public void streamEqualsSetTest() {\n+        var currencies = Currency.getAvailableCurrencies();\n+        assertEquals(currencies, Currency.availableCurrencies().collect(Collectors.toSet()));\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Currency\/AvailableCurrenciesTest.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}