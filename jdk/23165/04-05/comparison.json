{"files":[{"patch":"@@ -142,1 +142,1 @@\n-    private static HashSet<Currency> available;\n+    private static volatile HashSet<Currency> available;\n@@ -448,2 +448,1 @@\n-        initAvailableCurrencies();\n-        return new HashSet<>(available);\n+        return new HashSet<>(getCurrencies());\n@@ -464,2 +463,1 @@\n-        initAvailableCurrencies();\n-        return available.stream();\n+        return getCurrencies().stream();\n@@ -468,34 +466,41 @@\n-    \/\/ Initialize the set of available currencies if needed\n-    private static synchronized void initAvailableCurrencies() {\n-        if (available == null) {\n-            available = HashSet.newHashSet(256);\n-\n-            \/\/ Add simple currencies first\n-            for (char c1 = 'A'; c1 <= 'Z'; c1 ++) {\n-                for (char c2 = 'A'; c2 <= 'Z'; c2 ++) {\n-                    int tableEntry = getMainTableEntry(c1, c2);\n-                    if ((tableEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK\n-                            && tableEntry != INVALID_COUNTRY_ENTRY) {\n-                        char finalChar = (char) ((tableEntry & SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK) + 'A');\n-                        int defaultFractionDigits = (tableEntry & SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK) >> SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT;\n-                        int numericCode = (tableEntry & NUMERIC_CODE_MASK) >> NUMERIC_CODE_SHIFT;\n-                        StringBuilder sb = new StringBuilder();\n-                        sb.append(c1);\n-                        sb.append(c2);\n-                        sb.append(finalChar);\n-                        available.add(getInstance(sb.toString(), defaultFractionDigits, numericCode));\n-                    } else if ((tableEntry & COUNTRY_TYPE_MASK) == SPECIAL_CASE_COUNTRY_MASK\n-                            && tableEntry != INVALID_COUNTRY_ENTRY\n-                            && tableEntry != COUNTRY_WITHOUT_CURRENCY_ENTRY) {\n-                        int index = SpecialCaseEntry.toIndex(tableEntry);\n-                        SpecialCaseEntry scEntry = specialCasesList.get(index);\n-\n-                        if (scEntry.cutOverTime == Long.MAX_VALUE\n-                                || System.currentTimeMillis() < scEntry.cutOverTime) {\n-                            available.add(getInstance(scEntry.oldCurrency,\n-                                    scEntry.oldCurrencyFraction,\n-                                    scEntry.oldCurrencyNumericCode));\n-                        } else {\n-                            available.add(getInstance(scEntry.newCurrency,\n-                                    scEntry.newCurrencyFraction,\n-                                    scEntry.newCurrencyNumericCode));\n+    \/\/ Returns the set of available Currencies which are lazily initialized\n+    private static HashSet<Currency> getCurrencies() {\n+        HashSet<Currency> result = available;\n+        if (result != null) {\n+            return result;\n+        }\n+\n+        synchronized (Currency.class) {\n+            if (available == null) {\n+                available = HashSet.newHashSet(256);\n+\n+                \/\/ Add simple currencies first\n+                for (char c1 = 'A'; c1 <= 'Z'; c1 ++) {\n+                    for (char c2 = 'A'; c2 <= 'Z'; c2 ++) {\n+                        int tableEntry = getMainTableEntry(c1, c2);\n+                        if ((tableEntry & COUNTRY_TYPE_MASK) == SIMPLE_CASE_COUNTRY_MASK\n+                                && tableEntry != INVALID_COUNTRY_ENTRY) {\n+                            char finalChar = (char) ((tableEntry & SIMPLE_CASE_COUNTRY_FINAL_CHAR_MASK) + 'A');\n+                            int defaultFractionDigits = (tableEntry & SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_MASK) >> SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT;\n+                            int numericCode = (tableEntry & NUMERIC_CODE_MASK) >> NUMERIC_CODE_SHIFT;\n+                            StringBuilder sb = new StringBuilder();\n+                            sb.append(c1);\n+                            sb.append(c2);\n+                            sb.append(finalChar);\n+                            available.add(getInstance(sb.toString(), defaultFractionDigits, numericCode));\n+                        } else if ((tableEntry & COUNTRY_TYPE_MASK) == SPECIAL_CASE_COUNTRY_MASK\n+                                && tableEntry != INVALID_COUNTRY_ENTRY\n+                                && tableEntry != COUNTRY_WITHOUT_CURRENCY_ENTRY) {\n+                            int index = SpecialCaseEntry.toIndex(tableEntry);\n+                            SpecialCaseEntry scEntry = specialCasesList.get(index);\n+\n+                            if (scEntry.cutOverTime == Long.MAX_VALUE\n+                                    || System.currentTimeMillis() < scEntry.cutOverTime) {\n+                                available.add(getInstance(scEntry.oldCurrency,\n+                                        scEntry.oldCurrencyFraction,\n+                                        scEntry.oldCurrencyNumericCode));\n+                            } else {\n+                                available.add(getInstance(scEntry.newCurrency,\n+                                        scEntry.newCurrencyFraction,\n+                                        scEntry.newCurrencyNumericCode));\n+                            }\n@@ -505,1 +510,0 @@\n-            }\n@@ -507,3 +511,4 @@\n-            \/\/ Now add other currencies\n-            for (OtherCurrencyEntry entry : otherCurrenciesList) {\n-                available.add(getInstance(entry.currencyCode));\n+                \/\/ Now add other currencies\n+                for (OtherCurrencyEntry entry : otherCurrenciesList) {\n+                    available.add(getInstance(entry.currencyCode));\n+                }\n@@ -511,0 +516,1 @@\n+            return available;\n","filename":"src\/java.base\/share\/classes\/java\/util\/Currency.java","additions":49,"deletions":43,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -47,0 +47,8 @@\n+\n+    \/\/ Ensure there are no duplicates in the available currencies\n+    @Test\n+    public void noDuplicatesTest() {\n+        assertEquals(Currency.getAvailableCurrencies().size(),\n+                Currency.availableCurrencies().distinct().count(),\n+                \"Duplicate currencies returned by availableCurrencies()\");\n+    }\n","filename":"test\/jdk\/java\/util\/Currency\/AvailableCurrenciesTest.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}