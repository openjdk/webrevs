{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import java.util.stream.Stream;\n@@ -141,1 +142,1 @@\n-    private static HashSet<Currency> available;\n+    private static volatile HashSet<Currency> available;\n@@ -435,3 +436,4 @@\n-     * Gets the set of available currencies.  The returned set of currencies\n-     * contains all of the available currencies, which may include currencies\n-     * that represent obsolete ISO 4217 codes.  The set can be modified\n+     * {@return a set of available currencies} The returned set of currencies\n+     * contains all the available currencies, which may include currencies\n+     * that represent obsolete ISO 4217 codes. If there is no currency available\n+     * in the runtime, the returned set is empty. The set can be modified\n@@ -440,2 +442,3 @@\n-     * @return the set of available currencies.  If there is no currency\n-     *    available in the runtime, the returned set is empty.\n+     * @apiNote Consider using {@link #availableCurrencies()} which returns\n+     * a stream of the available currencies.\n+     * @see #availableCurrencies()\n@@ -445,1 +448,26 @@\n-        synchronized(Currency.class) {\n+        return new HashSet<>(getCurrencies());\n+    }\n+\n+    \/**\n+     * {@return a stream of available currencies} The returned stream of currencies\n+     * contains all the available currencies, which may include currencies\n+     * that represent obsolete ISO 4217 codes. If there is no currency\n+     * available in the runtime, the returned stream is empty.\n+     *\n+     * @implNote Unlike {@link #getAvailableCurrencies()}, this method does\n+     * not create a defensive copy of the {@code Currency} set.\n+     * @see #getAvailableCurrencies()\n+     * @since 25\n+     *\/\n+    public static Stream<Currency> availableCurrencies() {\n+        return getCurrencies().stream();\n+    }\n+\n+    \/\/ Returns the set of available Currencies which are lazily initialized\n+    private static HashSet<Currency> getCurrencies() {\n+        HashSet<Currency> result = available;\n+        if (result != null) {\n+            return result;\n+        }\n+\n+        synchronized (Currency.class) {\n@@ -447,1 +475,1 @@\n-                available = new HashSet<>(256);\n+                available = HashSet.newHashSet(256);\n@@ -454,1 +482,1 @@\n-                             && tableEntry != INVALID_COUNTRY_ENTRY) {\n+                                && tableEntry != INVALID_COUNTRY_ENTRY) {\n@@ -488,0 +516,1 @@\n+            return available;\n@@ -489,1 +518,0 @@\n-        return new HashSet<>(available);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Currency.java","additions":39,"deletions":11,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8347949\n+ * @summary Ensure underlying element equality of available currency methods\n+ * @run junit AvailableCurrenciesTest\n+ *\/\n+\n+import java.util.Currency;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class AvailableCurrenciesTest {\n+\n+    \/\/ Validate the equality of the set and stream of available currencies\n+    @Test\n+    public void streamEqualsSetTest() {\n+        var currencies = Currency.getAvailableCurrencies();\n+        assertEquals(currencies, Currency.availableCurrencies().collect(Collectors.toSet()),\n+                \"availableCurrencies() and getAvailableCurrencies() do not have the same elements\");\n+    }\n+\n+    \/\/ Ensure there are no duplicates in the available currencies\n+    @Test\n+    public void noDuplicatesTest() {\n+        assertEquals(Currency.getAvailableCurrencies().size(),\n+                Currency.availableCurrencies().distinct().count(),\n+                \"Duplicate currencies returned by availableCurrencies()\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Currency\/AvailableCurrenciesTest.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}