{"files":[{"patch":"@@ -50,0 +50,6 @@\n+  check_aot_annotations(ik);\n+\n+  if (ik->force_aot_initialization()) {\n+    assert(ik->is_initialized(), \"must have been initialized before this check\");\n+  }\n+\n@@ -217,0 +223,3 @@\n+    if (ik->force_aot_initialization()) {\n+      return true;\n+    }\n@@ -247,0 +256,56 @@\n+template <typename FUNCTION>\n+void require_annotation_for_super_types(InstanceKlass* ik, const char* annotation, FUNCTION func) {\n+  if (log_is_enabled(Info, aot, init)) {\n+    ResourceMark rm;\n+    log_info(aot, init)(\"Found %s class %s\", annotation, ik->external_name());\n+  }\n+\n+  \/\/ Since ik has this annotation, we require that\n+  \/\/   - all super classes must have this annotation\n+  \/\/   - all super interfaces that are interface_needs_clinit_execution_as_super()\n+  \/\/     must have this annotation\n+  \/\/ This avoid the situation where in the production run, we run the <clinit>\n+  \/\/ of a supertype but not the <clinit> of ik\n+\n+  InstanceKlass* super = ik->java_super();\n+  if (super != nullptr && !func(super)) {\n+    ResourceMark rm;\n+    log_error(aot, init)(\"Missing %s in superclass %s for class %s\",\n+                         annotation, super->external_name(), ik->external_name());\n+    AOTMetaspace::unrecoverable_writing_error();\n+  }\n+\n+  int len = ik->local_interfaces()->length();\n+  for (int i = 0; i < len; i++) {\n+    InstanceKlass* intf = ik->local_interfaces()->at(i);\n+    if (intf->interface_needs_clinit_execution_as_super() && !func(intf)) {\n+      ResourceMark rm;\n+      log_error(aot, init)(\"Missing %s in superinterface %s for class %s\",\n+                           annotation, intf->external_name(), ik->external_name());\n+      AOTMetaspace::unrecoverable_writing_error();\n+    }\n+  }\n+}\n+\n+void AOTClassInitializer::check_aot_annotations(InstanceKlass* ik) {\n+  if (ik->has_aot_safe_initializer()) {\n+    require_annotation_for_super_types(ik, \"@AOTSafeClassInitializer\", [&] (const InstanceKlass* supertype) {\n+      return supertype->has_aot_safe_initializer();\n+    });\n+  } else {\n+    \/\/ @AOTRuntimeSetup only meaningful in @AOTClassInitializer\n+    if (ik->is_runtime_setup_required()) {\n+      ResourceMark rm;\n+      log_error(aot, init)(\"@AOTRuntimeSetup meaningless in non-@AOTSafeClassInitializer class %s\",\n+                           ik->external_name());\n+    }\n+  }\n+\n+  if (ik->force_aot_initialization()) {\n+    require_annotation_for_super_types(ik, \"@AOTInitialize\", [&] (const InstanceKlass* supertype) {\n+      return supertype->force_aot_initialization();\n+    });\n+  }\n+}\n+\n+\n","filename":"src\/hotspot\/share\/cds\/aotClassInitializer.cpp","additions":65,"deletions":0,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -34,0 +34,3 @@\n+\n+  static void check_aot_annotations(InstanceKlass* ik);\n+\n","filename":"src\/hotspot\/share\/cds\/aotClassInitializer.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -806,0 +806,16 @@\n+  if (CDSConfig::is_dumping_final_static_archive()) {\n+    \/\/ - Load and link all classes used in the training run. Of these\n+    \/\/   classes, eagerly initialize the ones marked with @AOTInitialize.\n+    \/\/ - Perform per-class optimization such as AOT-resolution of\n+    \/\/   constant pool entries that were resolved during the training run.\n+    FinalImageRecipes::apply_recipes(CHECK);\n+\n+    \/\/ Because the AOT assembly phase does not run the exact code as in the\n+    \/\/ training run (e.g., we use different lambda form invoker classes;\n+    \/\/ generated lambda form classes are not recorded in FinalImageRecipes),\n+    \/\/ the recipes do not cover all classes that have been loaded so far. As\n+    \/\/ a result, we might have some unlinked classes at this point. Since we\n+    \/\/ require cached classes to be linked, all such classes will be linked\n+    \/\/ by the following step.\n+  }\n+\n@@ -819,4 +835,0 @@\n-\n-  if (CDSConfig::is_dumping_final_static_archive()) {\n-    FinalImageRecipes::apply_recipes(CHECK);\n-  }\n@@ -1224,0 +1236,2 @@\n+  bool made_progress = false;\n+\n@@ -1249,3 +1263,1 @@\n-    return true;\n-  } else {\n-    return false;\n+    made_progress = true;\n@@ -1253,0 +1265,14 @@\n+\n+  if (CDSConfig::is_initing_classes_at_dump_time() && ik->force_aot_initialization() && !ik->is_initialized()) {\n+    ik->initialize(THREAD);\n+    if (HAS_PENDING_EXCEPTION) {\n+      ResourceMark rm;\n+      log_error(aot, init)(\"class %s has @AOTForceInitialize but failed to initialize\",\n+                           ik->external_name());\n+      AOTMetaspace::unrecoverable_writing_error(\"Unexpected failure.\");\n+    }\n+    \/\/ May cause more classes to be loaded.\n+    made_progress = true;\n+  }\n+\n+  return made_progress;\n","filename":"src\/hotspot\/share\/cds\/aotMetaspace.cpp","additions":33,"deletions":7,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -944,0 +944,1 @@\n+    _jdk_internal_vm_annotation_AOTInitialize,\n@@ -1903,5 +1904,0 @@\n-    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_AOTSafeClassInitializer_signature): {\n-      if (_location != _in_class)   break;  \/\/ only allow for classes\n-      if (!privileged)              break;  \/\/ only allow in privileged code\n-      return _jdk_internal_vm_annotation_AOTSafeClassInitializer;\n-    }\n@@ -1913,0 +1909,10 @@\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_AOTInitialize_signature): {\n+      if (_location != _in_class)   break;  \/\/ only allow for classes\n+      if (!privileged)              break;  \/\/ only allow in privileged code\n+      return _jdk_internal_vm_annotation_AOTInitialize;\n+    }\n+    case VM_SYMBOL_ENUM_NAME(jdk_internal_vm_annotation_AOTSafeClassInitializer_signature): {\n+      if (_location != _in_class)   break;  \/\/ only allow for classes\n+      if (!privileged)              break;  \/\/ only allow in privileged code\n+      return _jdk_internal_vm_annotation_AOTSafeClassInitializer;\n+    }\n@@ -1992,0 +1998,3 @@\n+  if (has_annotation(_jdk_internal_vm_annotation_AOTInitialize)) {\n+    ik->set_force_aot_initialization();\n+  }\n@@ -5145,40 +5154,0 @@\n-  \/\/ AOT-related checks.\n-  \/\/ Note we cannot check this in general due to instrumentation or module patching\n-  if (CDSConfig::is_initing_classes_at_dump_time()) {\n-    \/\/ Check the aot initialization safe status.\n-    \/\/ @AOTSafeClassInitializer is used only to support ahead-of-time initialization of classes\n-    \/\/ in the AOT assembly phase.\n-    if (ik->has_aot_safe_initializer()) {\n-      \/\/ If a type is included in the tables inside can_archive_initialized_mirror(), we require that\n-      \/\/   - all super classes must be included\n-      \/\/   - all super interfaces that have <clinit> must be included.\n-      \/\/ This ensures that in the production run, we don't run the <clinit> of a supertype but skips\n-      \/\/ ik's <clinit>.\n-      if (_super_klass != nullptr) {\n-        guarantee_property(_super_klass->has_aot_safe_initializer(),\n-                           \"Missing @AOTSafeClassInitializer in superclass %s for class %s\",\n-                           _super_klass->external_name(),\n-                           CHECK);\n-      }\n-\n-      int len = _local_interfaces->length();\n-      for (int i = 0; i < len; i++) {\n-        InstanceKlass* intf = _local_interfaces->at(i);\n-        guarantee_property(intf->class_initializer() == nullptr || intf->has_aot_safe_initializer(),\n-                           \"Missing @AOTSafeClassInitializer in superinterface %s for class %s\",\n-                           intf->external_name(),\n-                           CHECK);\n-      }\n-\n-      if (log_is_enabled(Info, aot, init)) {\n-        ResourceMark rm;\n-        log_info(aot, init)(\"Found @AOTSafeClassInitializer class %s\", ik->external_name());\n-      }\n-    } else {\n-      \/\/ @AOTRuntimeSetup only meaningful in @AOTClassInitializer\n-      guarantee_property(!ik->is_runtime_setup_required(),\n-                         \"@AOTRuntimeSetup meaningless in non-@AOTSafeClassInitializer class %s\",\n-                         CHECK);\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":14,"deletions":45,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -735,0 +735,1 @@\n+  template(jdk_internal_vm_annotation_AOTInitialize_signature, \"Ljdk\/internal\/vm\/annotation\/AOTInitialize;\")\\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -191,0 +191,1 @@\n+    _force_aot_initialization              = 1 << 9, \/\/ has @AOTInitialize annotation\n@@ -401,0 +402,9 @@\n+  \/\/ Indicates presence of @AOTInitialize\n+  void set_force_aot_initialization() {\n+    CDS_ONLY(_aot_class_flags |= _force_aot_initialization;)\n+  }\n+  bool force_aot_initialization() const {\n+    CDS_ONLY(return (_aot_class_flags & _force_aot_initialization) != 0;)\n+    NOT_CDS(return false;)\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import jdk.internal.vm.annotation.AOTInitialize;\n@@ -40,0 +41,1 @@\n+@AOTInitialize \/\/ for hierarchy checks\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Object.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.vm.annotation.AOTInitialize;\n@@ -35,0 +36,1 @@\n+@AOTInitialize\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/MathUtils.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.vm.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\/\/\/ This annotation is a stronger form of [AOTSafeClassInitializer].\n+\/\/\/ It indicates that the annotated class _X_ should be stored in\n+\/\/\/ the AOT cache in the initialized state.\n+\/\/\/\n+\/\/\/ This annotation takes effect only if _X_ is included in\n+\/\/\/ an AOT cache (e.g., if _X_ was used during an AOT training run).\n+\/\/\/\n+\/\/\/ During the AOT assembly phase, after _X_ is loaded, it will be\n+\/\/\/ proactively initialized by the JVM. Afterwards, _X_ will be\n+\/\/\/ treated as if it had the [AOTSafeClassInitializer] annotation.\n+\/\/\/ Please see [AOTSafeClassInitializer] for details.\n+\/\/\/\n+\/\/\/ The only difference between [AOTInitialize] and [AOTSafeClassInitializer]\n+\/\/\/ is the former will proactively initialize the annotated class during\n+\/\/\/ the AOT assembly phase, whereas the latter will not.\n+\/\/\/\n+\/\/\/ Before adding this annotation to a class _X_, the author must determine\n+\/\/\/ that it's safe to execute the static analyzer of _X_ during the AOT\n+\/\/\/ assembly phase. In addition, all supertypes of _X_ must also have this\n+\/\/\/ annotation.\n+\/\/\/\n+\/\/\/ This annotation is only recognized on privileged code and is ignored elsewhere.\n+\/\/\/\n+\/\/\/ @since 26\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface AOTInitialize {\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/annotation\/AOTInitialize.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -5,0 +5,4 @@\n+# The following tests use very small -Xmx and will not be able to\n+# use the AOT cache generated by \"make test JTREG=AOT_JDK=onestep ...\"\n+gc\/arguments\/TestG1HeapSizeFlags.java                 0000000 generic-all\n+gc\/arguments\/TestParallelHeapSizeFlags.java           0000000 generic-all\n@@ -6,0 +10,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/ProblemList-AotJdk.txt","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test\n+ * @summary Tests the effect of jdk.internal.vm.annotation.AOTXXX annotations\n+ *          in the core Java library.\n+ * @bug 8317269\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @build AOTAnnotationsTest\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar AOTAnnotationsTestApp\n+ * @run driver AOTAnnotationsTest\n+ *\/\n+\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class AOTAnnotationsTest {\n+    static final String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n+    static final String mainClass = AOTAnnotationsTestApp.class.getName();\n+\n+    public static void main(String[] args) throws Exception {\n+        Tester tester = new Tester();\n+        tester.run(new String[] {\"AOT\", \"--two-step-training\"} );\n+    }\n+\n+    static class Tester extends CDSAppTester {\n+        public Tester() {\n+            super(mainClass);\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return appJar;\n+        }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            return new String[] {\n+                \"-Xlog:aot+class=debug\",\n+            };\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] { mainClass};\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) {\n+            if (runMode == RunMode.ASSEMBLY) {\n+                out.shouldMatch(\"jdk.internal.math.MathUtils .*inited\");\n+            }\n+        }\n+    }\n+}\n+\n+class AOTAnnotationsTestApp {\n+    public static void main(String args[]) {\n+        double d = 12.34567;\n+\n+        \/\/ Double.toString() uses jdk.internal.math.MathUtils.\n+        \/\/ Because MathUtils has @AOTInitialize, it will be cached in aot-inited state.\n+        System.out.println(Double.toString(d));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotAnnotations\/AOTAnnotationsTest.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}