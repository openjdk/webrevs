{"files":[{"patch":"@@ -94,1 +94,0 @@\n-import java.net.URI;\n@@ -103,0 +102,1 @@\n+import java.nio.file.ProviderNotFoundException;\n@@ -2000,6 +2000,16 @@\n-            Collection<Path> paths = new ArrayList<>();\n-            MemoryFileManager fm = proc.taskFactory.fileManager();\n-\n-            appendPaths(fm, StandardLocation.PLATFORM_CLASS_PATH, paths);\n-            appendPaths(fm, StandardLocation.CLASS_PATH, paths);\n-            appendPaths(fm, StandardLocation.SOURCE_PATH, paths);\n+            Collection<Path> paths = proc.taskFactory.parse(\"\", task -> {\n+                MemoryFileManager fm = proc.taskFactory.fileManager();\n+                Collection<Path> _paths = new ArrayList<>();\n+                try {\n+                    appendPaths(fm, StandardLocation.PLATFORM_CLASS_PATH, _paths);\n+                    appendPaths(fm, StandardLocation.CLASS_PATH, _paths);\n+                    appendPaths(fm, StandardLocation.SOURCE_PATH, _paths);\n+                    appendModulePaths(fm, StandardLocation.SYSTEM_MODULES, _paths);\n+                    appendModulePaths(fm, StandardLocation.UPGRADE_MODULE_PATH, _paths);\n+                    appendModulePaths(fm, StandardLocation.MODULE_PATH, _paths);\n+                    return _paths;\n+                } catch (Exception ex) {\n+                    proc.debug(ex, \"SourceCodeAnalysisImpl.refreshIndexes(\" + version + \")\");\n+                    return List.of();\n+                }\n+            });\n@@ -2058,0 +2068,14 @@\n+    private void appendModulePaths(MemoryFileManager fm, Location loc, Collection<Path> paths) throws IOException {\n+        for (Set<Location> moduleLocations : fm.listLocationsForModules(loc)) {\n+            for (Location moduleLocation : moduleLocations) {\n+                Iterable<? extends Path> modulePaths = fm.getLocationAsPaths(moduleLocation);\n+\n+                if (modulePaths == null) {\n+                    continue;\n+                }\n+\n+                modulePaths.forEach(paths::add);\n+            }\n+        }\n+    }\n+\n@@ -2061,18 +2085,1 @@\n-        if (isJRTMarkerFile(path)) {\n-            FileSystem jrtfs = FileSystems.getFileSystem(URI.create(\"jrt:\/\"));\n-            Path modules = jrtfs.getPath(\"modules\");\n-            return PATH_TO_INDEX.compute(path, (p, index) -> {\n-                try {\n-                    long lastModified = Files.getLastModifiedTime(modules).toMillis();\n-                    if (index == null || index.timestamp != lastModified) {\n-                        try (DirectoryStream<Path> stream = Files.newDirectoryStream(modules)) {\n-                            index = doIndex(lastModified, path, stream);\n-                        }\n-                    }\n-                    return index;\n-                } catch (IOException ex) {\n-                    proc.debug(ex, \"SourceCodeAnalysisImpl.indexesForPath(\" + path.toString() + \")\");\n-                    return new ClassIndex(-1, path, Collections.emptySet(), Collections.emptyMap());\n-                }\n-            });\n-        } else if (!Files.isDirectory(path)) {\n+        if (!Files.isDirectory(path)) {\n@@ -2091,1 +2098,1 @@\n-                    } catch (IOException ex) {\n+                    } catch (IOException | ProviderNotFoundException ex) {\n@@ -2110,4 +2117,0 @@\n-    static boolean isJRTMarkerFile(Path path) {\n-        return path.equals(Paths.get(System.getProperty(\"java.home\"), \"lib\", \"modules\"));\n-    }\n-\n@@ -2198,1 +2201,1 @@\n-            INDEXER.submit(() -> {}).get();\n+            waitCurrentBackgroundTasksFinished();\n@@ -2205,0 +2208,4 @@\n+    public static void waitCurrentBackgroundTasksFinished() throws Exception {\n+        INDEXER.submit(() -> {}).get();\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SourceCodeAnalysisImpl.java","additions":38,"deletions":31,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -75,0 +75,7 @@\n+        Path classDirPath = getClassDir();\n+        Path baseDir = classDirPath.resolve(directory);\n+        Path jarPath = baseDir.resolve(jarName);\n+        jar(directory, jarPath, files);\n+    }\n+\n+    public void jar(Path directory, Path jarPath, String...files) {\n@@ -79,1 +86,0 @@\n-        Path jarPath = baseDir.resolve(jarName);\n","filename":"test\/langtools\/jdk\/jshell\/Compiler.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -837,0 +837,16 @@\n+\n+    public void testCustomClassPathIndexing() {\n+        Path p1 = outDir.resolve(\"dir1\");\n+        compiler.compile(p1,\n+                \"package p1.p2;\\n\" +\n+                \"public class Test {\\n\" +\n+                \"}\",\n+                \"package p1.p3;\\n\" +\n+                \"public class Test {\\n\" +\n+                \"}\");\n+        String jarName = \"test.jar\";\n+        compiler.jar(p1, jarName, \"p1\/p2\/Test.class\", \"p1\/p3\/Test.class\");\n+        addToClasspath(compiler.getPath(p1.resolve(jarName)));\n+\n+        assertCompletion(\"p1.|\", \"p2.\", \"p3.\");\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/CompletionSuggestionTest.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.reflect.Method;\n@@ -569,0 +570,30 @@\n+    public void assertCompletions(boolean after, String input, String expectedCompletionsPattern) {\n+        if (!after) {\n+            try {\n+                Class<?> sourceCodeAnalysisImpl = Class.forName(\"jdk.jshell.SourceCodeAnalysisImpl\");\n+                Method waitBackgroundTaskFinished = sourceCodeAnalysisImpl.getDeclaredMethod(\"waitCurrentBackgroundTasksFinished\");\n+\n+                waitBackgroundTaskFinished.setAccessible(true);\n+                waitBackgroundTaskFinished.invoke(null);\n+            } catch (ReflectiveOperationException ex) {\n+                throw new AssertionError(ex.getMessage(), ex);\n+            }\n+\n+            setCommandInput(input + \"\\t\");\n+        } else {\n+            assertOutput(getCommandOutput().trim(), \"\", \"command output: \" + input);\n+            assertOutput(getCommandErrorOutput(), \"\", \"command error: \" + input);\n+            assertOutput(getUserOutput(), \"\", \"user output: \" + input);\n+            assertOutput(getUserErrorOutput(), \"\", \"user error: \" + input);\n+            String actualOutput = getTerminalOutput();\n+            Pattern compiledPattern =\n+                    Pattern.compile(expectedCompletionsPattern, Pattern.DOTALL);\n+            if (!compiledPattern.asMatchPredicate().test(actualOutput)) {\n+                throw new AssertionError(\"Actual output:\\n\" +\n+                                         actualOutput + \"\\n\" +\n+                                         \"does not match expected pattern: \" +\n+                                         expectedCompletionsPattern);\n+            }\n+        }\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/ReplToolTesting.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,257 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8177650\n+ * @summary Verify JShell tool code completion\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.javap\n+ *          jdk.jshell\/jdk.jshell:+open\n+ *          jdk.jshell\/jdk.internal.jshell.tool\n+ *          java.desktop\n+ * @build toolbox.ToolBox toolbox.JarTask toolbox.JavacTask\n+ * @build ReplToolTesting TestingInputStream Compiler\n+ * @run testng ToolCompletionTest\n+ *\/\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.testng.annotations.Test;\n+\n+public class ToolCompletionTest extends ReplToolTesting {\n+\n+    private final Compiler compiler = new Compiler();\n+    private final Path outDir = Paths.get(\"tool_completion_test\");\n+\n+    @Test\n+    public void testClassPathOnCmdLineIndexing() {\n+        Path p1 = outDir.resolve(\"dir1\");\n+        compiler.compile(p1,\n+                \"\"\"\n+                package p1.p2;\n+                public class Test {\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p1.p3;\n+                public class Test {\n+                }\n+                \"\"\");\n+        String jarName = \"test.jar\";\n+        compiler.jar(p1, jarName, \"p1\/p2\/Test.class\", \"p1\/p3\/Test.class\");\n+\n+        test(false, new String[]{\"--no-startup\", \"--class-path\", compiler.getPath(p1.resolve(jarName)).toString()},\n+                (a) -> assertCompletions(a, \"p1.\", \".*p2\\\\..*p3\\\\..*\"),\n+                 \/\/cancel the input, so that JShell can be finished:\n+                (a) -> assertCommand(a, \"\\003\", null)\n+                );\n+    }\n+\n+    @Test\n+    public void testClassPathViaEnvIndexing() {\n+        Path p1 = outDir.resolve(\"dir1\");\n+        compiler.compile(p1,\n+                \"\"\"\n+                package p1.p2;\n+                public class Test {\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p1.p3;\n+                public class Test {\n+                }\n+                \"\"\");\n+        String jarName = \"test.jar\";\n+        compiler.jar(p1, jarName, \"p1\/p2\/Test.class\", \"p1\/p3\/Test.class\");\n+\n+        test(false, new String[]{\"--no-startup\"},\n+                (a) -> assertCommand(a, \"\/env --class-path \" + compiler.getPath(p1.resolve(jarName)).toString(), null),\n+                (a) -> assertCompletions(a, \"p1.\", \".*p2\\\\..*p3\\\\..*\"),\n+                 \/\/cancel the input, so that JShell can be finished:\n+                (a) -> assertCommand(a, \"\\003\", null)\n+                );\n+    }\n+\n+    @Test\n+    public void testClassPathChangeIndexing() {\n+        \/\/verify that changing the classpath has effect:\n+        Path dir1 = outDir.resolve(\"dir1\");\n+        compiler.compile(dir1,\n+                \"\"\"\n+                package p1.p2;\n+                public class Test {\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p1.p3;\n+                public class Test {\n+                }\n+                \"\"\");\n+        String jarName1 = \"test1.jar\";\n+        compiler.jar(dir1, jarName1, \"p1\/p2\/Test.class\", \"p1\/p3\/Test.class\");\n+\n+        Path dir2 = outDir.resolve(\"dir2\");\n+        compiler.compile(dir2,\n+                \"\"\"\n+                package p1.p5;\n+                public class Test {\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p1.p6;\n+                public class Test {\n+                }\n+                \"\"\");\n+        String jarName2 = \"test2.jar\";\n+        compiler.jar(dir2, jarName2, \"p1\/p5\/Test.class\", \"p1\/p6\/Test.class\");\n+\n+        test(false, new String[]{\"--no-startup\", \"--class-path\", compiler.getPath(dir1.resolve(jarName1)).toString()},\n+                (a) -> assertCommand(a, \"1\", null),\n+                (a) -> assertCommand(a, \"\/env --class-path \" + compiler.getPath(dir2.resolve(jarName2)).toString(), null),\n+                (a) -> assertCompletions(a, \"p1.\", \".*p5\\\\..*p6\\\\..*\"),\n+                 \/\/cancel the input, so that JShell can be finished:\n+                (a) -> assertCommand(a, \"\\003\", null)\n+                );\n+    }\n+\n+    @Test\n+    public void testModulePathOnCmdLineIndexing() {\n+        Path p1 = outDir.resolve(\"dir1\");\n+        compiler.compile(p1,\n+                \"\"\"\n+                module m {\n+                    exports p1.p2;\n+                    exports p1.p3;\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p1.p2;\n+                public class Test {\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p1.p3;\n+                public class Test {\n+                }\n+                \"\"\");\n+        String jarName = \"test.jar\";\n+        compiler.jar(p1, jarName, \"p1\/p2\/Test.class\", \"p1\/p3\/Test.class\");\n+\n+        test(false, new String[]{\"--no-startup\", \"--module-path\", compiler.getPath(p1.resolve(jarName)).toString()},\n+                (a) -> assertCompletions(a, \"p1.\", \".*p2\\\\..*p3\\\\..*\"),\n+                 \/\/cancel the input, so that JShell can be finished:\n+                (a) -> assertCommand(a, \"\\003\", null)\n+                );\n+    }\n+\n+    @Test\n+    public void testModulePathOnCmdLineIndexing2() throws IOException {\n+        Path p1 = outDir.resolve(\"dir1\");\n+        compiler.compile(p1,\n+                \"\"\"\n+                module m {\n+                    exports p1.p2;\n+                    exports p1.p3;\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p1.p2;\n+                public class Test {\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p1.p3;\n+                public class Test {\n+                }\n+                \"\"\");\n+        String jarName = \"test.jar\";\n+        Path lib = outDir.resolve(\"lib\");\n+        Files.createDirectories(lib);\n+        compiler.jar(p1, lib.resolve(jarName), \"p1\/p2\/Test.class\", \"p1\/p3\/Test.class\");\n+\n+        test(false, new String[]{\"--no-startup\", \"--module-path\", lib.toString()},\n+                (a) -> assertCompletions(a, \"p1.\", \".*p2\\\\..*p3\\\\..*\"),\n+                 \/\/cancel the input, so that JShell can be finished:\n+                (a) -> assertCommand(a, \"\\003\", null)\n+                );\n+    }\n+\n+    @Test\n+    public void testUpgradeModulePathIndexing() {\n+        Path p1 = outDir.resolve(\"dir1\");\n+        compiler.compile(p1,\n+                \"\"\"\n+                module m {\n+                    exports p1.p2;\n+                    exports p1.p3;\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p1.p2;\n+                public class Test {\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p1.p3;\n+                public class Test {\n+                }\n+                \"\"\");\n+        String jarName = \"test.jar\";\n+        compiler.jar(p1, jarName, \"p1\/p2\/Test.class\", \"p1\/p3\/Test.class\");\n+\n+        test(false, new String[]{\"--no-startup\", \"-C--upgrade-module-path\", \"-C\" + compiler.getPath(p1.resolve(jarName)).toString()},\n+                (a) -> assertCompletions(a, \"p1.\", \".*p2\\\\..*p3\\\\..*\"),\n+                 \/\/cancel the input, so that JShell can be finished:\n+                (a) -> assertCommand(a, \"\\003\", null)\n+                );\n+    }\n+\n+    @Test\n+    public void testBootClassPathPrepend() {\n+        Path p1 = outDir.resolve(\"dir1\");\n+        compiler.compile(p1,\n+                \"\"\"\n+                package p1.p2;\n+                public class Test {\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p1.p3;\n+                public class Test {\n+                }\n+                \"\"\");\n+        String jarName = \"test.jar\";\n+        compiler.jar(p1, jarName, \"p1\/p2\/Test.class\", \"p1\/p3\/Test.class\");\n+\n+        test(false, new String[]{\"--no-startup\", \"-C-Xbootclasspath\/p:\" + compiler.getPath(p1.resolve(jarName)).toString(), \"-C--source=8\"},\n+                (a) -> assertCompletions(a, \"p1.\", \".*p2\\\\..*p3\\\\..*\"),\n+                 \/\/cancel the input, so that JShell can be finished:\n+                (a) -> assertCommand(a, \"\\003\", null)\n+                );\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/ToolCompletionTest.java","additions":257,"deletions":0,"binary":false,"changes":257,"status":"added"}]}