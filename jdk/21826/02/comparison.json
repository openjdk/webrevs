{"files":[{"patch":"@@ -471,1 +471,1 @@\n-      void* p = mmap(NULL, 64*K, PROT_READ | PROT_WRITE, MAP_ANON_64K | MAP_ANONYMOUS | MAP_SHARED, -1, 0);\n+      void* p = mmap(nullptr, 64*K, PROT_READ | PROT_WRITE, MAP_ANON_64K | MAP_ANONYMOUS | MAP_SHARED, -1, 0);\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,1 +170,1 @@\n-  while ((token = strsep(&mo_ptr, \",\")) != NULL) {\n+  while ((token = strsep(&mo_ptr, \",\")) != nullptr) {\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -819,1 +819,1 @@\n-    \/\/ It is possible that we found a NULL symbol, hence no error.\n+    \/\/ It is possible that we found a null symbol, hence no error.\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4154,1 +4154,1 @@\n-  if (RegQueryValueExA(hKey, valueName, NULL, NULL, (LPBYTE)buffer, &valueLength) != ERROR_SUCCESS) {\n+  if (RegQueryValueExA(hKey, valueName, nullptr, nullptr, (LPBYTE)buffer, &valueLength) != ERROR_SUCCESS) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1245,1 +1245,1 @@\n-    return (char) strtol(hex, NULL, 16);\n+    return (char) strtol(hex, nullptr, 16);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  char*   _mapped_base;       \/\/ Actually mapped address (NULL if this region is not mapped).\n+  char*   _mapped_base;       \/\/ Actually mapped address (null if this region is not mapped).\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -422,1 +422,1 @@\n- * Find a class from a boot class loader. Returns NULL if class not found.\n+ * Find a class from a boot class loader. Returns null if class not found.\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-    \/\/ has cleared the resolved_klasses()->at(...) pointer to NULL. Thus, we\n+    \/\/ has cleared the resolved_klasses()->at(...) pointer to null. Thus, we\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -647,1 +647,1 @@\n-\/\/ against the NULL constant, otherwise it will be against the constant input of\n+\/\/ against the null constant, otherwise it will be against the constant input of\n@@ -675,1 +675,1 @@\n-\/\/ against NULL.\n+\/\/ against null.\n@@ -809,1 +809,1 @@\n-\/\/ juse use a CmpP\/N against the NULL constant.\n+\/\/ juse use a CmpP\/N against the null constant.\n@@ -812,1 +812,1 @@\n-\/\/ splitted cast was not nullable (or if it was the NULL constant) then we don't\n+\/\/ splitted cast was not nullable (or if it was the null constant) then we don't\n@@ -840,1 +840,1 @@\n-\/\/                         Call  NULL\n+\/\/                         Call  Null\n@@ -876,1 +876,1 @@\n-  \/\/  - nullptr:    Meaning that the base is actually the NULL constant and therefore\n+  \/\/  - nullptr:    Meaning that the base is actually the null constant and therefore\n@@ -893,1 +893,1 @@\n-        \/\/ Nothing todo as bases_for_loads[i] is already nullptr\n+        \/\/ Nothing todo as bases_for_loads[i] is already null\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -7753,1 +7753,1 @@\n-  assert(a_start, \"a array is NULL\");\n+  assert(a_start, \"a array is null\");\n@@ -7755,1 +7755,1 @@\n-  assert(b_start, \"b array is NULL\");\n+  assert(b_start, \"b array is null\");\n@@ -7757,1 +7757,1 @@\n-  assert(r_start, \"r array is NULL\");\n+  assert(r_start, \"r array is null\");\n@@ -7782,1 +7782,1 @@\n-  assert(a_start, \"a array is NULL\");\n+  assert(a_start, \"a array is null\");\n@@ -7784,1 +7784,1 @@\n-  assert(b_start, \"b array is NULL\");\n+  assert(b_start, \"b array is null\");\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -427,1 +427,1 @@\n-  while (token != NULL) {\n+  while (token != nullptr) {\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  char *class_name = NULL;\n+  char *class_name = nullptr;\n@@ -44,1 +44,1 @@\n-    if (_jvmti->GetClassSignature(method_class, &class_name, NULL) == JVMTI_ERROR_NONE) {\n+    if (_jvmti->GetClassSignature(method_class, &class_name, nullptr) == JVMTI_ERROR_NONE) {\n@@ -52,1 +52,1 @@\n-  _jvm->AttachCurrentThreadAsDaemon((void **)&env, NULL);\n+  _jvm->AttachCurrentThreadAsDaemon((void **)&env, nullptr);\n@@ -59,1 +59,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -69,2 +69,2 @@\n-  char *class_name = NULL;\n-  if (jvmti_env->GetClassSignature(klass, &class_name, NULL) != JVMTI_ERROR_NONE) {\n+  char *class_name = nullptr;\n+  if (jvmti_env->GetClassSignature(klass, &class_name, nullptr) != JVMTI_ERROR_NONE) {\n@@ -82,1 +82,1 @@\n-    pthread_create(&tid, NULL, read_ringbuffer, NULL);\n+    pthread_create(&tid, nullptr, read_ringbuffer, nullptr);\n@@ -122,1 +122,1 @@\n-  error = _jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_PREPARE, NULL);\n+  error = _jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_PREPARE, nullptr);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/GetMethodDeclaringClass\/libTestUnloadedClass.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-  if (clazz == NULL) {\n+  if (clazz == nullptr) {\n@@ -127,1 +127,1 @@\n-  if (mid == NULL) {\n+  if (mid == nullptr) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/VThreadEventTest\/libVThreadEventTest.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}