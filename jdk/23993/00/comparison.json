{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-    String DEFAULT_PROVIDER_MODULE_NAME = \"jdk.internal.le\";\n+    String DEFAULT_PROVIDER_MODULE_NAME = \"java.base\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8331681\n+ * @bug 8331681 8351435\n@@ -29,2 +29,0 @@\n- * @run main\/othervm --limit-modules java.base ConsolePromptTest\n- * @run main\/othervm -Djdk.console=java.base ConsolePromptTest\n@@ -34,1 +32,4 @@\n-import java.util.Objects;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -41,0 +42,5 @@\n+    private static final List<List<String>> VARIANTS = List.of(\n+        List.of(\"--limit-modules\", \"java.base\"),\n+        List.of(\"-Djdk.console=java.base\")\n+    );\n+\n@@ -44,1 +50,3 @@\n-                m.invoke(new ConsolePromptTest());\n+                for (List<String> variant : VARIANTS) {\n+                    m.invoke(new ConsolePromptTest(variant));\n+                }\n@@ -49,0 +57,6 @@\n+    private final List<String> extraParams;\n+\n+    public ConsolePromptTest(List<String> extraParams) {\n+        this.extraParams = extraParams;\n+    }\n+\n@@ -60,11 +74,5 @@\n-        ProcessBuilder builder =\n-                ProcessTools.createTestJavaProcessBuilder(ConsoleTest.class.getName(),\n-                                                          testName);\n-        OutputAnalyzer output = ProcessTools.executeProcess(builder, input);\n-\n-        output.waitFor();\n-\n-        if (output.getExitValue() != 0) {\n-            throw new AssertionError(\"Unexpected return value: \" + output.getExitValue() +\n-                                     \", actualOut: \" + output.getStdout() +\n-                                     \", actualErr: \" + output.getStderr());\n+        \/\/ check \"expect\" command availability\n+        var expect = Paths.get(\"\/usr\/bin\/expect\");\n+        if (!Files.exists(expect) || !Files.isExecutable(expect)) {\n+            System.out.println(\"'expect' command not found. Test ignored.\");\n+            return;\n@@ -73,15 +81,22 @@\n-        String actualOut = output.getStdout();\n-\n-        if (!Objects.equals(expectedOut, actualOut)) {\n-            throw new AssertionError(\"Unexpected stdout content. \" +\n-                                     \"Expected: '\" + expectedOut + \"'\" +\n-                                     \", got: '\" + actualOut + \"'\");\n-        }\n-\n-        String expectedErr = \"\";\n-        String actualErr = output.getStderr();\n-\n-        if (!Objects.equals(expectedErr, actualErr)) {\n-            throw new AssertionError(\"Unexpected stderr content. \" +\n-                                     \"Expected: '\" + expectedErr + \"'\" +\n-                                     \", got: '\" + actualErr + \"'\");\n+        \/\/ invoking \"expect\" command\n+        var testSrc = System.getProperty(\"test.src\", \".\");\n+        var jdkDir = System.getProperty(\"test.jdk\");\n+\n+        List<String> command = new ArrayList<>();\n+\n+        command.add(\"expect\");\n+        command.add(\"-n\");\n+        command.add(testSrc + \"\/consolePrompt.exp\");\n+        command.add(expectedOut);\n+        command.add(jdkDir + \"\/bin\/java\");\n+        command.addAll(extraParams);\n+        command.add(\"-cp\");\n+        command.add(System.getProperty(\"java.class.path\"));\n+        command.add(ConsoleTest.class.getName());\n+        command.add(testName);\n+\n+        OutputAnalyzer output = ProcessTools.executeProcess(command.toArray(String[]::new));\n+        output.reportDiagnosticSummary();\n+        var eval = output.getExitValue();\n+        if (eval != 0) {\n+            throw new RuntimeException(\"Test failed. Exit value from 'expect' command: \" + eval);\n","filename":"test\/jdk\/java\/io\/Console\/ConsolePromptTest.java","additions":47,"deletions":32,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @bug 8341975\n+ * @bug 8341975 8351435\n@@ -33,5 +33,5 @@\n- * @run junit\/othervm -Dstdout.encoding=UTF-8 DefaultCharsetTest\n- * @run junit\/othervm -Dstdout.encoding=ISO-8859-1 DefaultCharsetTest\n- * @run junit\/othervm -Dstdout.encoding=US-ASCII DefaultCharsetTest\n- * @run junit\/othervm -Dstdout.encoding=foo DefaultCharsetTest\n- * @run junit\/othervm DefaultCharsetTest\n+ * @run junit\/othervm -Djdk.console=jdk.internal.le -Dstdout.encoding=UTF-8 DefaultCharsetTest\n+ * @run junit\/othervm -Djdk.console=jdk.internal.le -Dstdout.encoding=ISO-8859-1 DefaultCharsetTest\n+ * @run junit\/othervm -Djdk.console=jdk.internal.le -Dstdout.encoding=US-ASCII DefaultCharsetTest\n+ * @run junit\/othervm -Djdk.console=jdk.internal.le -Dstdout.encoding=foo DefaultCharsetTest\n+ * @run junit\/othervm -Djdk.console=jdk.internal.le DefaultCharsetTest\n","filename":"test\/jdk\/java\/io\/Console\/DefaultCharsetTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @bug 8330276\n+ * @bug 8330276 8351435\n@@ -60,0 +60,1 @@\n+                    \"-Djdk.console=jdk.internal.le\",\n","filename":"test\/jdk\/java\/io\/Console\/LocaleTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8295803 8299689\n+ * @bug 8295803 8299689 8351435\n@@ -30,1 +30,1 @@\n- * @run main\/othervm ModuleSelectionTest jdk.internal.le\n+ * @run main\/othervm ModuleSelectionTest java.base\n","filename":"test\/jdk\/java\/io\/Console\/ModuleSelectionTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+#\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+set java [lrange $argv 1 end]\n+set expected [lindex $argv 0]\n+\n+eval spawn $java\n+expect -- \"$expected\"\n+send -- \"\\n\"\n+expect eof\n","filename":"test\/jdk\/java\/io\/Console\/consolePrompt.exp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n- * @bug 8305457 8342936\n+ * @bug 8305457 8342936 8351435\n@@ -56,0 +56,1 @@\n+ * @modules jdk.internal.le\n@@ -155,1 +156,1 @@\n-            return Stream.of(null, \"gibberish\").flatMap(console -> Stream.of(null, \"?\", \"%s\", PROMPT_NONE)\n+            return Stream.of(\"jdk.internal.le\", \"gibberish\").flatMap(console -> Stream.of(null, \"?\", \"%s\", PROMPT_NONE)\n@@ -165,1 +166,1 @@\n-        var pb = ProcessTools.createTestJavaProcessBuilder(\"--enable-preview\", file, mode);\n+        var pb = ProcessTools.createTestJavaProcessBuilder(\"-Djdk.console=jdk.internal.le\", \"--enable-preview\", file, mode);\n@@ -198,1 +199,1 @@\n-        var pb = ProcessTools.createTestJavaProcessBuilder(\"--enable-preview\", file.toString());\n+        var pb = ProcessTools.createTestJavaProcessBuilder(\"-Djdk.console=jdk.internal.le\", \"--enable-preview\", file.toString());\n","filename":"test\/jdk\/java\/io\/IO\/IO.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8331535\n+ * @bug 8331535 8351435\n@@ -61,1 +61,1 @@\n-                ProcessTools.createTestJavaProcessBuilder(ConsoleTest.class.getName(),\n+                ProcessTools.createTestJavaProcessBuilder(\"-Djdk.console=jdk.internal.le\", ConsoleTest.class.getName(),\n","filename":"test\/jdk\/jdk\/internal\/jline\/JLineConsoleProviderTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8330998\n+ * @bug 8330998 8351435\n@@ -64,1 +64,1 @@\n-                ProcessTools.createTestJavaProcessBuilder(ConsoleTest.class.getName());\n+                ProcessTools.createTestJavaProcessBuilder(\"-Djdk.console=jdk.internal.le\", ConsoleTest.class.getName());\n@@ -156,1 +156,1 @@\n-            ProcessTools.createTestJavaProcessBuilder(ConsoleTest.class.getName());\n+            ProcessTools.createTestJavaProcessBuilder(\"-Djdk.console=jdk.internal.le\", ConsoleTest.class.getName());\n","filename":"test\/jdk\/jdk\/internal\/jline\/RedirectedStdOut.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}