{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+    private int ver = VERSION_1;        \/\/ updated in ctor depending on detectVersion result\n@@ -110,8 +111,12 @@\n-        \/\/ Check that we can connect to the process\n-        \/\/ - this ensures we throw the permission denied error now rather than\n-        \/\/ later when we attempt to enqueue a command.\n-        int s = socket();\n-        try {\n-            connect(s, socket_path);\n-        } finally {\n-            close(s);\n+        if (isAPIv2Enabled()) {\n+            ver = detectVersion();\n+        } else {\n+            \/\/ Check that we can connect to the process\n+            \/\/ - this ensures we throw the permission denied error now rather than\n+            \/\/ later when we attempt to enqueue a command.\n+            int s = socket();\n+            try {\n+                connect(s, socket_path);\n+            } finally {\n+                close(s);\n+            }\n@@ -132,3 +137,0 @@\n-    \/\/ protocol version\n-    private static final String PROTOCOL_VERSION = \"1\";\n-\n@@ -139,1 +141,0 @@\n-        assert args.length <= 3;                \/\/ includes null\n@@ -165,10 +166,2 @@\n-            writeString(s, PROTOCOL_VERSION);\n-            writeString(s, cmd);\n-\n-            for (int i = 0; i < 3; i++) {\n-                if (i < args.length && args[i] != null) {\n-                    writeString(s, (String)args[i]);\n-                } else {\n-                    writeString(s, \"\");\n-                }\n-            }\n+            SocketOutputStream writer = new SocketOutputStream(s);\n+            writeCommand(writer, ver, cmd, args);\n@@ -190,0 +183,10 @@\n+    private static class SocketOutputStream implements AttachOutputStream {\n+        private int fd;\n+        public SocketOutputStream(int fd) {\n+            this.fd = fd;\n+        }\n+        @Override\n+        public void write(byte[] buffer, int offset, int length) throws IOException {\n+            VirtualMachineImpl.write(fd, buffer, offset, length);\n+        }\n+    }\n@@ -209,14 +212,0 @@\n-    \/*\n-     * Write\/sends the given to the target VM. String is transmitted in\n-     * UTF-8 encoding.\n-     *\/\n-    private void writeString(int fd, String s) throws IOException {\n-        if (s.length() > 0) {\n-            byte[] b = s.getBytes(UTF_8);\n-            VirtualMachineImpl.write(fd, b, 0, b.length);\n-        }\n-        byte b[] = new byte[1];\n-        b[0] = 0;\n-        write(fd, b, 0, 1);\n-    }\n-\n","filename":"src\/jdk.attach\/macosx\/classes\/sun\/tools\/attach\/VirtualMachineImpl.java","additions":26,"deletions":37,"binary":false,"changes":63,"status":"modified"}]}