{"files":[{"patch":"@@ -430,2 +430,6 @@\n-bool MemNode::all_controls_dominate(Node* dom, Node* sub) {\n-  if (dom == nullptr || dom->is_top() || sub == nullptr || sub->is_top())\n+bool MemNode::all_controls_dominate(Node* dom, Node* sub, bool *dead_code) {\n+  bool dummy_flag, &dead_code_flag = dead_code != nullptr ? *dead_code : dummy_flag;\n+  dead_code_flag = false;\n+\n+  if (dom == nullptr || dom->is_top() || sub == nullptr || sub->is_top()) {\n+    dead_code_flag = true;\n@@ -433,0 +437,1 @@\n+  }\n@@ -436,1 +441,2 @@\n-  if (dom == nullptr || dom->is_top())\n+  if (dom == nullptr || dom->is_top()) {\n+    dead_code_flag = true;\n@@ -438,0 +444,1 @@\n+  }\n@@ -460,1 +467,2 @@\n-  if (sub == nullptr || sub->is_top())\n+  if (sub == nullptr || sub->is_top()) {\n+    dead_code_flag = true;\n@@ -462,0 +470,1 @@\n+  }\n@@ -475,1 +484,1 @@\n-    Node_Stack nstack(0);\n+    Node_List nlist;\n@@ -488,1 +497,2 @@\n-        if (n == nullptr || n->is_top())\n+        if (n == nullptr || n->is_top()) {\n+          dead_code_flag = true;\n@@ -490,0 +500,1 @@\n+        }\n@@ -495,1 +506,2 @@\n-        if (n->dominates(sub, nstack))\n+        bool dead_code;\n+        if (n->dominates(sub, nlist, dead_code)) {\n@@ -497,1 +509,2 @@\n-        else\n+        } else {\n+          if (dead_code) dead_code_flag = true;\n@@ -499,0 +512,1 @@\n+        }\n@@ -503,1 +517,2 @@\n-          if (m->is_top())\n+          if (m->is_top()) {\n+            dead_code_flag = true;\n@@ -505,0 +520,1 @@\n+          }\n@@ -1661,0 +1677,2 @@\n+  bool dead_code, can_not_split = false;\n+  PhaseIterGVN* igvn = phase->is_IterGVN();\n@@ -1665,2 +1683,2 @@\n-    if (!MemNode::all_controls_dominate(address, region))\n-      return nullptr;\n+    if (!MemNode::all_controls_dominate(address, region, &dead_code))\n+      can_not_split = true;\n@@ -1671,2 +1689,2 @@\n-    if (!MemNode::all_controls_dominate(mem, region))\n-      return nullptr;\n+    if (!MemNode::all_controls_dominate(mem, region, &dead_code))\n+      can_not_split = true;\n@@ -1677,1 +1695,1 @@\n-    } else if (MemNode::all_controls_dominate(address, mem->in(0))) {\n+    } else if (MemNode::all_controls_dominate(address, mem->in(0), &dead_code)) {\n@@ -1680,1 +1698,1 @@\n-      return nullptr; \/\/ complex graph\n+      can_not_split = true; \/\/ complex graph\n@@ -1686,0 +1704,5 @@\n+  if (can_not_split) {\n+    \/\/ Wait for the dead code to be removed.\n+    if (dead_code) igvn->_worklist.push(this);\n+    return nullptr;\n+  }\n@@ -1689,1 +1712,0 @@\n-  PhaseIterGVN* igvn = phase->is_IterGVN();\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":38,"deletions":16,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  static bool all_controls_dominate(Node* dom, Node* sub);\n+  static bool all_controls_dominate(Node* dom, Node* sub, bool *dead_code = nullptr);\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1252,1 +1252,1 @@\n-bool Node::dominates(Node* sub, Node_Stack &nstack) {\n+bool Node::dominates(Node* sub, Node_List &nlist, bool &dead_code) {\n@@ -1262,1 +1262,2 @@\n-  nstack.clear();\n+  dead_code      = false;\n+  nlist.clear();\n@@ -1273,17 +1274,2 @@\n-      \/\/ We reached a dead code, try another path of the last multi-input Region we met.\n-      bool found = false;\n-      for (uint i = nstack.size(); i > 0; i--) {\n-        Node* n = nstack.node_at(i - 1);\n-        for (uint index = nstack.index_at(i - 1); index < n->req(); index++) {\n-          Node* in = n->in(index);\n-          if (in != nullptr && !in->is_top()) {\n-            found = true;\n-            sub = n->find_exact_control(in);\n-            nstack.set_index_at(i - 1, index + 1);\n-            break;\n-          }\n-        }\n-        if (found) break;\n-      }\n-      if (found) continue;\n-      \/\/ Give a conservative answer if we have no other choices.\n+      \/\/ Conservative answer for dead code.\n+      dead_code = true;\n@@ -1292,1 +1278,0 @@\n-\n@@ -1294,1 +1279,1 @@\n-      if (nstack.is_empty()) {\n+      if (nlist.size() == 0) {\n@@ -1305,1 +1290,1 @@\n-      }\n+     }\n@@ -1313,1 +1298,0 @@\n-\n@@ -1325,1 +1309,3 @@\n-      \/\/ Try all paths for Regions with multiple input paths (it may be a loop head).\n+      \/\/ Try both paths for Regions with 2 input paths (it may be a loop head).\n+      \/\/ It could give conservative 'false' answer without information\n+      \/\/ which region's input is the entry path.\n@@ -1334,2 +1320,4 @@\n-      for (uint i = nstack.size(); i > 0; i--) {\n-        Node* visited = nstack.node_at(i - 1);\n+      for (int j = nlist.size() - 1; j >= 0; j--) {\n+        intptr_t ni = (intptr_t)nlist.at(j);\n+        Node* visited = (Node*)(ni & ~1);\n+        bool  visited_twice_already = ((ni & 1) != 0);\n@@ -1337,12 +1325,2 @@\n-          \/\/ The Region node was visited before, just visit the next input.\n-          for (uint index = nstack.index_at(i - 1); index < sub->req(); index++) {\n-            Node* in = sub->in(index);\n-            if (in != nullptr && !in->is_top() && in != sub) {\n-              region_was_visited_before = true;\n-              up = in;\n-              nstack.set_index_at(i - 1, index + 1);\n-              break;\n-            }\n-          }\n-          if (!region_was_visited_before) {\n-            \/\/ Visited all paths, but still stuck in loop body. Give up.\n+          if (visited_twice_already) {\n+            \/\/ Visited 2 paths, but still stuck in loop body.  Give up.\n@@ -1351,0 +1329,5 @@\n+          \/\/ The Region node was visited before only once.\n+          \/\/ (We will repush with the low bit set, below.)\n+          nlist.remove(j);\n+          \/\/ We will find a new edge and re-insert.\n+          region_was_visited_before = true;\n@@ -1355,5 +1338,7 @@\n-      \/\/ Record this Region if it's not visited before, and visit its first input.\n-      if (!region_was_visited_before) {\n-        for (uint i = 1; i < sub->req(); i++) {\n-          Node* in = sub->in(i);\n-          if (in != nullptr && !in->is_top() && in != sub) {\n+      \/\/ Find an incoming edge which has not been seen yet; walk through it.\n+      assert(up == sub, \"\");\n+      uint skip = region_was_visited_before ? 1 : 0;\n+      for (uint i = 1; i < sub->req(); i++) {\n+        Node* in = sub->in(i);\n+        if (in != nullptr && !in->is_top() && in != sub) {\n+          if (skip == 0) {\n@@ -1361,1 +1346,0 @@\n-            nstack.push(sub, i + 1);\n@@ -1364,0 +1348,1 @@\n+          --skip;               \/\/ skip this nontrivial input\n@@ -1366,0 +1351,3 @@\n+\n+      \/\/ Set 0 bit to indicate that both paths were taken.\n+      nlist.push((Node*)((intptr_t)sub + (region_was_visited_before ? 1 : 0)));\n@@ -1378,2 +1366,1 @@\n-    \/\/ Skip simple pass-through control nodes in chain.\n-    sub = sub->find_exact_control(up);\n+    sub = up;\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":33,"deletions":46,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -1112,1 +1112,1 @@\n-  bool dominates(Node* sub, Node_Stack &nstack);\n+  bool dominates(Node* sub, Node_List &nlist, bool &dead_code);\n@@ -1898,4 +1898,0 @@\n-  void set_index_at(uint i, uint index) {\n-    assert(_inodes + i <= _inode_top, \"in range\");\n-    _inodes[i].indx = index;\n-  }\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}