{"files":[{"patch":"@@ -431,2 +431,7 @@\n-Node::DomResult MemNode::all_controls_dominate(Node* dom, Node* sub) {\n-  if (dom == nullptr || dom->is_top() || sub == nullptr || sub->is_top())\n+\/\/ Returns 'DomResult::Dominate' if all control inputs of 'dom'\n+\/\/ dominate 'sub', 'DomResult::NotDominate' if not,\n+\/\/ and 'DomResult::EncounteredDeadCode' if we can't decide due to\n+\/\/ dead code, but at the end of IGVN, we know the definite result\n+\/\/ once the dead code is cleaned up.\n+Node::DomResult MemNode::maybe_all_controls_dominate(Node* dom, Node* sub) {\n+  if (dom == nullptr || dom->is_top() || sub == nullptr || sub->is_top()) {\n@@ -434,0 +439,1 @@\n+  }\n@@ -437,1 +443,1 @@\n-  if (dom == nullptr || dom->is_top())\n+  if (dom == nullptr || dom->is_top()) {\n@@ -439,0 +445,1 @@\n+  }\n@@ -446,1 +453,1 @@\n-  if (dom->is_Con() || dom->is_Start() || dom->is_Root() || dom == sub)\n+  if (dom->is_Con() || dom->is_Start() || dom->is_Root() || dom == sub) {\n@@ -448,0 +455,1 @@\n+  }\n@@ -461,1 +469,1 @@\n-  if (sub == nullptr || sub->is_top())\n+  if (sub == nullptr || sub->is_top()) {\n@@ -463,0 +471,1 @@\n+  }\n@@ -466,1 +475,1 @@\n-  if (sub == dom)\n+  if (sub == dom) {\n@@ -468,0 +477,1 @@\n+  }\n@@ -469,1 +479,1 @@\n-  if (sub->is_Start() || sub->is_Root())\n+  if (sub->is_Start() || sub->is_Root()) {\n@@ -471,0 +481,1 @@\n+  }\n@@ -484,1 +495,1 @@\n-      if (n == orig_sub)\n+      if (n == orig_sub) {\n@@ -486,0 +497,1 @@\n+      }\n@@ -489,1 +501,1 @@\n-        if (n == nullptr || n->is_top())\n+        if (n == nullptr || n->is_top()) {\n@@ -491,0 +503,1 @@\n+        }\n@@ -497,1 +510,1 @@\n-        if (dom_result == DomResult::Dominate)\n+        if (dom_result == DomResult::Dominate) {\n@@ -499,1 +512,1 @@\n-        else\n+        } else {\n@@ -501,0 +514,1 @@\n+        }\n@@ -505,1 +519,1 @@\n-          if (m->is_top())\n+          if (m->is_top()) {\n@@ -507,0 +521,1 @@\n+          }\n@@ -513,1 +528,1 @@\n-          if (m == nullptr || m->is_top())\n+          if (m == nullptr || m->is_top()) {\n@@ -515,0 +530,1 @@\n+          }\n@@ -541,1 +557,1 @@\n-    return all_controls_dominate(p2, a1) == DomResult::Dominate;\n+    return all_controls_dominate(p2, a1);\n@@ -543,1 +559,1 @@\n-    return all_controls_dominate(p1, a2) == DomResult::Dominate;\n+    return all_controls_dominate(p1, a2);\n@@ -731,1 +747,1 @@\n-      if (st_alloc == nullptr)\n+      if (st_alloc == nullptr) {\n@@ -733,0 +749,1 @@\n+      }\n@@ -735,1 +752,1 @@\n-      if (alloc == st_alloc)\n+      if (alloc == st_alloc) {\n@@ -737,1 +754,1 @@\n-      else if (alloc != nullptr)\n+      } else if (alloc != nullptr) {\n@@ -739,1 +756,1 @@\n-      else if (all_controls_dominate(this, st_alloc) == DomResult::Dominate)\n+      } else if (all_controls_dominate(this, st_alloc)) {\n@@ -741,0 +758,1 @@\n+      }\n@@ -1571,1 +1589,1 @@\n-    if (MemNode::all_controls_dominate(mem, base->in(0)) != DomResult::Dominate)\n+    if (!MemNode::all_controls_dominate(mem, base->in(0))) {\n@@ -1573,0 +1591,1 @@\n+    }\n@@ -1574,1 +1593,1 @@\n-    if (MemNode::all_controls_dominate(mem, base->in(0)) != DomResult::Dominate) {\n+    if (!MemNode::all_controls_dominate(mem, base->in(0))) {\n@@ -1664,1 +1683,0 @@\n-  PhaseIterGVN* igvn = phase->is_IterGVN();\n@@ -1670,1 +1688,1 @@\n-    dom_result = MemNode::all_controls_dominate(address, region);\n+    dom_result = MemNode::maybe_all_controls_dominate(address, region);\n@@ -1676,1 +1694,1 @@\n-    dom_result = MemNode::all_controls_dominate(mem, region);\n+    dom_result = MemNode::maybe_all_controls_dominate(mem, region);\n@@ -1679,1 +1697,1 @@\n-    dom_result = MemNode::all_controls_dominate(mem, base->in(0));\n+    dom_result = MemNode::maybe_all_controls_dominate(mem, base->in(0));\n@@ -1683,1 +1701,1 @@\n-      dom_result = MemNode::all_controls_dominate(address, mem->in(0));\n+      dom_result = MemNode::maybe_all_controls_dominate(address, mem->in(0));\n@@ -1687,1 +1705,1 @@\n-      \/\/ Otherwise we encounter a complex graph.\n+      \/\/ Otherwise we encountered a complex graph.\n@@ -1693,0 +1711,2 @@\n+\n+  PhaseIterGVN* igvn = phase->is_IterGVN();\n@@ -1696,0 +1716,2 @@\n+      \/\/ The dead code will eventually be removed in IGVN,\n+      \/\/ so we have an unambiguous result whether it's dominated or not.\n@@ -1848,1 +1870,1 @@\n-        && all_controls_dominate(base, phase->C->start()) == DomResult::Dominate) {\n+        && all_controls_dominate(base, phase->C->start())) {\n@@ -4582,1 +4604,1 @@\n-      if (MemNode::all_controls_dominate(n, this) != DomResult::Dominate)\n+      if (!MemNode::all_controls_dominate(n, this)) {\n@@ -4584,0 +4606,1 @@\n+      }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":52,"deletions":29,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -109,2 +109,6 @@\n-  \/\/ This one should probably be a phase-specific function:\n-  static DomResult all_controls_dominate(Node* dom, Node* sub);\n+  \/\/ The following two should probably be phase-specific functions:\n+  static DomResult maybe_all_controls_dominate(Node* dom, Node* sub);\n+  static bool all_controls_dominate(Node* dom, Node* sub) {\n+    DomResult dom_result = maybe_all_controls_dominate(dom, sub);\n+    return dom_result == DomResult::Dominate;\n+  }\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1113,1 +1113,1 @@\n-    EncounteredDeadCode, \/\/ Result is undefined due to encountering dead code.\n+    EncounteredDeadCode  \/\/ Result is undefined due to encountering dead code.\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    @IR(applyIf = { \"UseG1GC\", \"true\" }, phase = { CompilePhase.ITER_GVN_AFTER_ELIMINATION }, counts = { IRNode.ALLOC, \"1\" })\n+    @IR(phase = { CompilePhase.ITER_GVN_AFTER_ELIMINATION }, counts = { IRNode.ALLOC, \"1\" })\n@@ -110,1 +110,1 @@\n-        for (;;) {\n+        while (true) {\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/scalarReplacement\/ScalarReplacementWithGCBarrierTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}