{"files":[{"patch":"@@ -430,2 +430,6 @@\n-bool MemNode::all_controls_dominate(Node* dom, Node* sub) {\n-  if (dom == nullptr || dom->is_top() || sub == nullptr || sub->is_top())\n+bool MemNode::all_controls_dominate(Node* dom, Node* sub, bool *dead_code) {\n+  bool dummy_flag, &dead_code_flag = dead_code != nullptr ? *dead_code : dummy_flag;\n+  dead_code_flag = false;\n+\n+  if (dom == nullptr || dom->is_top() || sub == nullptr || sub->is_top()) {\n+    dead_code_flag = true;\n@@ -433,0 +437,1 @@\n+  }\n@@ -436,1 +441,2 @@\n-  if (dom == nullptr || dom->is_top())\n+  if (dom == nullptr || dom->is_top()) {\n+    dead_code_flag = true;\n@@ -438,0 +444,1 @@\n+  }\n@@ -460,1 +467,2 @@\n-  if (sub == nullptr || sub->is_top())\n+  if (sub == nullptr || sub->is_top()) {\n+    dead_code_flag = true;\n@@ -462,0 +470,1 @@\n+  }\n@@ -488,1 +497,2 @@\n-        if (n == nullptr || n->is_top())\n+        if (n == nullptr || n->is_top()) {\n+          dead_code_flag = true;\n@@ -490,0 +500,1 @@\n+        }\n@@ -495,1 +506,2 @@\n-        if (n->dominates(sub, nlist))\n+        bool dead_code;\n+        if (n->dominates(sub, nlist, dead_code)) {\n@@ -497,1 +509,2 @@\n-        else\n+        } else {\n+          if (dead_code) dead_code_flag = true;\n@@ -499,0 +512,1 @@\n+        }\n@@ -503,1 +517,2 @@\n-          if (m->is_top())\n+          if (m->is_top()) {\n+            dead_code_flag = true;\n@@ -505,0 +520,1 @@\n+          }\n@@ -1661,0 +1677,2 @@\n+  bool dead_code, can_not_split = false;\n+  PhaseIterGVN* igvn = phase->is_IterGVN();\n@@ -1665,2 +1683,2 @@\n-    if (!MemNode::all_controls_dominate(address, region))\n-      return nullptr;\n+    if (!MemNode::all_controls_dominate(address, region, &dead_code))\n+      can_not_split = true;\n@@ -1671,2 +1689,2 @@\n-    if (!MemNode::all_controls_dominate(mem, region))\n-      return nullptr;\n+    if (!MemNode::all_controls_dominate(mem, region, &dead_code))\n+      can_not_split = true;\n@@ -1677,1 +1695,1 @@\n-    } else if (MemNode::all_controls_dominate(address, mem->in(0))) {\n+    } else if (MemNode::all_controls_dominate(address, mem->in(0), &dead_code)) {\n@@ -1680,1 +1698,1 @@\n-      return nullptr; \/\/ complex graph\n+      can_not_split = true; \/\/ complex graph\n@@ -1686,0 +1704,5 @@\n+  if (can_not_split) {\n+    \/\/ Wait for the dead code to be removed.\n+    if (dead_code) igvn->_worklist.push(this);\n+    return nullptr;\n+  }\n@@ -1689,1 +1712,0 @@\n-  PhaseIterGVN* igvn = phase->is_IterGVN();\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":37,"deletions":15,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  static bool all_controls_dominate(Node* dom, Node* sub);\n+  static bool all_controls_dominate(Node* dom, Node* sub, bool *dead_code = nullptr);\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1252,1 +1252,1 @@\n-bool Node::dominates(Node* sub, Node_List &nlist) {\n+bool Node::dominates(Node* sub, Node_List &nlist, bool &dead_code) {\n@@ -1262,0 +1262,1 @@\n+  dead_code      = false;\n@@ -1272,1 +1273,5 @@\n-    if (sub->is_top())  break; \/\/ Conservative answer for dead code.\n+    if (sub->is_top()) {\n+      \/\/ Conservative answer for dead code.\n+      dead_code = true;\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1112,1 +1112,1 @@\n-  bool dominates(Node* sub, Node_List &nlist);\n+  bool dominates(Node* sub, Node_List &nlist, bool &dead_code);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests.scalarReplacement;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8333334\n+ * @summary Tests that dead barrier control flows do not affect the scalar replacement.\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.c2.irTests.scalarReplacement.ScalarReplacementWithGCBarrierTests\n+ *\/\n+public class ScalarReplacementWithGCBarrierTests {\n+    static class List {\n+        public Node head;\n+\n+        public void push(int value) {\n+            Node n = new Node();\n+            n.value = value;\n+            n.next = head;\n+            head = n;\n+        }\n+\n+        public Iter iter() {\n+            Iter iter = new Iter();\n+            iter.list = this;\n+            iter.n = head;\n+            iter.sum = 0;\n+            return iter;\n+        }\n+    }\n+\n+    static class Node {\n+        public int value;\n+        public Node next;\n+    }\n+\n+    static class Iter {\n+        public List list;\n+        public Node n;\n+        public Integer sum;\n+\n+        public boolean next() {\n+            int lastSum = sum;\n+            while (sum - lastSum < 1000) {\n+                while (n != null && n.value < 30) n = n.next;\n+                if (n == null) return false;\n+                sum += n.value;\n+                n = n.next;\n+            }\n+            return true;\n+        }\n+    }\n+\n+    private static final int SIZE = 1000;\n+\n+    public static void main(String[] args) {\n+        \/\/ Must use G1 GC to ensure there is a pre-barrier\n+        \/\/ before the first field write.\n+        TestFramework.runWithFlags(\"-XX:+UseG1GC\");\n+    }\n+\n+    @Run(test = \"testScalarReplacementWithGCBarrier\")\n+    private void runner() {\n+        List list = new List();\n+        for (int i = 0; i < SIZE; i++) {\n+            list.push(i);\n+        }\n+        testScalarReplacementWithGCBarrier(list);\n+    }\n+\n+    \/\/ Allocation of `Iter iter` should be eliminated by scalar replacement, and\n+    \/\/ the allocation of `Integer sum` can not be eliminated, so there should be\n+    \/\/ 1 allocation after allocations and locks elimination.\n+    \/\/\n+    \/\/ Before the patch of JDK-8333334, both allocations of `Iter` and `Integer`\n+    \/\/ could not be eliminated.\n+    @Test\n+    @IR(phase = { CompilePhase.AFTER_PARSING }, counts = { IRNode.ALLOC, \"1\" })\n+    @IR(phase = { CompilePhase.INCREMENTAL_BOXING_INLINE }, counts = { IRNode.ALLOC, \"2\" })\n+    @IR(applyIf = { \"UseG1GC\", \"true\" }, phase = { CompilePhase.ITER_GVN_AFTER_ELIMINATION }, counts = { IRNode.ALLOC, \"1\" })\n+    private int testScalarReplacementWithGCBarrier(List list) {\n+        Iter iter = list.iter();\n+        for (;;) {\n+            while (iter.next()) {}\n+            if (list.head == null) break;\n+            list.head = list.head.next;\n+            iter.n = list.head;\n+        }\n+        return iter.sum;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/scalarReplacement\/ScalarReplacementWithGCBarrierTests.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.util.Enumeration;\n@@ -130,0 +131,15 @@\n+    @Benchmark\n+    public int testConcurrentHashMapIterators() {\n+        ConcurrentHashMap<Integer, Integer> map = (ConcurrentHashMap<Integer, Integer>) staticMap;\n+        int sum = 0;\n+        Enumeration it = map.elements();\n+        while (it.hasMoreElements()) {\n+            sum += (int) it.nextElement();\n+        }\n+        it = map.keys();\n+        while (it.hasMoreElements()) {\n+            sum += (int) it.nextElement();\n+        }\n+        return sum;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/Maps.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}