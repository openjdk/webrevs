{"files":[{"patch":"@@ -430,2 +430,6 @@\n-bool MemNode::all_controls_dominate(Node* dom, Node* sub) {\n-  if (dom == nullptr || dom->is_top() || sub == nullptr || sub->is_top())\n+bool MemNode::all_controls_dominate(Node* dom, Node* sub, bool *dead_code) {\n+  bool dummy_flag, &dead_code_flag = dead_code != nullptr ? *dead_code : dummy_flag;\n+  dead_code_flag = false;\n+\n+  if (dom == nullptr || dom->is_top() || sub == nullptr || sub->is_top()) {\n+    dead_code_flag = true;\n@@ -433,0 +437,1 @@\n+  }\n@@ -436,1 +441,2 @@\n-  if (dom == nullptr || dom->is_top())\n+  if (dom == nullptr || dom->is_top()) {\n+    dead_code_flag = true;\n@@ -438,0 +444,1 @@\n+  }\n@@ -460,1 +467,2 @@\n-  if (sub == nullptr || sub->is_top())\n+  if (sub == nullptr || sub->is_top()) {\n+    dead_code_flag = true;\n@@ -462,0 +470,1 @@\n+  }\n@@ -488,1 +497,2 @@\n-        if (n == nullptr || n->is_top())\n+        if (n == nullptr || n->is_top()) {\n+          dead_code_flag = true;\n@@ -490,0 +500,1 @@\n+        }\n@@ -495,1 +506,2 @@\n-        if (n->dominates(sub, nlist))\n+        bool dead_code;\n+        if (n->dominates(sub, nlist, dead_code)) {\n@@ -497,1 +509,2 @@\n-        else\n+        } else {\n+          if (dead_code) dead_code_flag = true;\n@@ -499,0 +512,1 @@\n+        }\n@@ -503,1 +517,2 @@\n-          if (m->is_top())\n+          if (m->is_top()) {\n+            dead_code_flag = true;\n@@ -505,0 +520,1 @@\n+          }\n@@ -1661,0 +1677,2 @@\n+  bool dead_code, can_not_split = false;\n+  PhaseIterGVN* igvn = phase->is_IterGVN();\n@@ -1665,2 +1683,2 @@\n-    if (!MemNode::all_controls_dominate(address, region))\n-      return nullptr;\n+    if (!MemNode::all_controls_dominate(address, region, &dead_code))\n+      can_not_split = true;\n@@ -1671,2 +1689,2 @@\n-    if (!MemNode::all_controls_dominate(mem, region))\n-      return nullptr;\n+    if (!MemNode::all_controls_dominate(mem, region, &dead_code))\n+      can_not_split = true;\n@@ -1677,1 +1695,1 @@\n-    } else if (MemNode::all_controls_dominate(address, mem->in(0))) {\n+    } else if (MemNode::all_controls_dominate(address, mem->in(0), &dead_code)) {\n@@ -1680,1 +1698,1 @@\n-      return nullptr; \/\/ complex graph\n+      can_not_split = true; \/\/ complex graph\n@@ -1686,0 +1704,5 @@\n+  if (can_not_split) {\n+    \/\/ Wait for the dead code to be removed.\n+    if (dead_code) igvn->_worklist.push(this);\n+    return nullptr;\n+  }\n@@ -1689,1 +1712,0 @@\n-  PhaseIterGVN* igvn = phase->is_IterGVN();\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":37,"deletions":15,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-  static bool all_controls_dominate(Node* dom, Node* sub);\n+  static bool all_controls_dominate(Node* dom, Node* sub, bool *dead_code = nullptr);\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1252,1 +1252,1 @@\n-bool Node::dominates(Node* sub, Node_List &nlist) {\n+bool Node::dominates(Node* sub, Node_List &nlist, bool &dead_code) {\n@@ -1262,0 +1262,1 @@\n+  dead_code      = false;\n@@ -1272,1 +1273,5 @@\n-    if (sub->is_top())  break; \/\/ Conservative answer for dead code.\n+    if (sub->is_top()) {\n+      \/\/ Conservative answer for dead code.\n+      dead_code = true;\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1112,1 +1112,1 @@\n-  bool dominates(Node* sub, Node_List &nlist);\n+  bool dominates(Node* sub, Node_List &nlist, bool &dead_code);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Enumeration;\n@@ -130,0 +131,15 @@\n+    @Benchmark\n+    public int testConcurrentHashMapIterators() {\n+        ConcurrentHashMap<Integer, Integer> map = (ConcurrentHashMap<Integer, Integer>) staticMap;\n+        int sum = 0;\n+        Enumeration it = map.elements();\n+        while (it.hasMoreElements()) {\n+            sum += (int) it.nextElement();\n+        }\n+        it = map.keys();\n+        while (it.hasMoreElements()) {\n+            sum += (int) it.nextElement();\n+        }\n+        return sum;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/concurrent\/Maps.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}