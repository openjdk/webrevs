{"files":[{"patch":"@@ -290,1 +290,5 @@\n-  assert(n->in(0) == nullptr, \"divisions with zero check should already have bailed out earlier in split-if\");\n+  if (n->in(0) != nullptr) {\n+    \/\/ Cannot split through phi if Div or Mod node has a control dependency to a zero check.\n+    return true;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,210 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=normal\n+ * @bug 8323101\n+ * @summary Test split_thru_phi with pinned divisions\/modulo that have phi as inputs.\n+ * @run main\/othervm -Xbatch\n+ *                   -XX:CompileCommand=compileonly,compiler.splitif.TestSplitDivThroughPhiWithControl::*\n+ *                   compiler.splitif.TestSplitDivThroughPhiWithControl\n+ *\/\n+\n+\/*\n+ * @test id=fuzzer\n+ * @bug 8323101\n+ * @summary Test split_thru_phi with pinned divisions\/modulo that have phi as inputs.\n+ * @run main\/othervm -Xbatch -XX:PerMethodTrapLimit=0\n+ *                   -XX:CompileCommand=compileonly,compiler.splitif.TestSplitDivThroughPhiWithControl::*\n+ *                   compiler.splitif.TestSplitDivThroughPhiWithControl\n+ *\/\n+\n+package compiler.splitif;\n+\n+public class TestSplitDivThroughPhiWithControl {\n+    static int divisorInt = 34;\n+    static int iFld;\n+    static int x;\n+    static int y;\n+    static long divisorLong = 34L;\n+    static long lFld;\n+    static long lFld2;\n+    static long lFld3;\n+    static boolean flag;\n+\n+    static int[] iArr = new int[400];\n+\n+    public static void main(String[] strArr) {\n+        iArr[0] = 52329;\n+        for (int i = 0; i < 10000; i++) {\n+            flag = i % 3 == 0;                 \/\/ Avoid unstable if trap\n+            divisorInt = i % 2 == 0 ? 0 : 23;  \/\/ Avoid div by zero trap\n+            divisorLong = divisorInt;          \/\/ Avoid div by zero trap\n+            try {\n+                testIntDiv();\n+            } catch (ArithmeticException e) {\n+                \/\/ Expected.\n+            }\n+\n+            try {\n+                testIntMod();\n+            } catch (ArithmeticException e) {\n+                \/\/ Expected.\n+            }\n+\n+            try {\n+                testLongDiv(); \/\/ Currently does not trigger due to JDK-8323652\n+            } catch (ArithmeticException e) {\n+                \/\/ Expected.\n+            }\n+\n+            try {\n+                testLongMod(); \/\/ Currently does not trigger due to JDK-8323652\n+            } catch (ArithmeticException e) {\n+                \/\/ Expected.\n+            }\n+\n+            testFuzzer();\n+        }\n+    }\n+\n+    static void testIntDiv() {\n+        int a;\n+\n+        for (int j = 0; j < 100; j++) {\n+            y += 5;\n+            int sub = j - 3; \/\/ AddI\n+            int div = (sub \/ divisorInt); \/\/ DivI with AddI input\n+\n+            if (flag) {\n+                a = y;\n+            } else {\n+                a = 2;\n+            }\n+            \/\/ Region\n+\n+            \/\/ Use StoreI with AddI input. Store needs to be split through Region in Split-If which is done together\n+            \/\/ with AddI.\n+            iFld = sub;\n+\n+            if (a < 3) { \/\/ If that's split in Split-If\n+                \/\/ Use of DivI -> after Split-If, DivI gets a Phi input that merges the split AddI nodes.\n+                \/\/ -> triggers assert that we should not find pinned div nodes in cannot_split_division().\n+                x = div;\n+            }\n+        }\n+    }\n+\n+    \/\/ Same as testIntDiv() but with ModI\n+    static void testIntMod() {\n+        int a;\n+\n+        for (int j = 0; j < 100; j++) {\n+            y += 5;\n+            int sub = j - 3;\n+            int mod = (sub % divisorInt);\n+\n+            if (flag) {\n+                a = y;\n+            } else {\n+                a = 2;\n+            }\n+\n+            iFld = sub;\n+\n+            if (a < 3) {\n+                x = mod; \/\/ Only StoreI visited first but not mod since it's an input\n+            }\n+        }\n+    }\n+\n+    \/\/ Same as testIntDiv() but with DivL\n+    static void testLongDiv() {\n+        long a;\n+\n+        for (int j = 0; j < 100; j++) {\n+            y += 5;\n+            long sub = j - 3;\n+            long div = (sub \/ divisorLong);\n+\n+            if (flag) {\n+                a = lFld2;\n+            } else {\n+                a = 2;\n+            }\n+\n+            lFld = sub;\n+\n+            if (a < 3) {\n+                lFld3 = div;\n+            }\n+        }\n+    }\n+\n+\n+    \/\/ Same as testIntDiv() but with ModL\n+    static void testLongMod() {\n+        long a;\n+\n+        for (long j = 0; j < 100; j++) {\n+            lFld2 += 5;\n+            long sub = j - 3;\n+            long mod = (sub % divisorLong);\n+\n+            if (flag) {\n+                a = lFld2;\n+            } else {\n+                a = 2;\n+            }\n+\n+            lFld = sub;\n+\n+            if (a < 3) {\n+                lFld3 = mod; \/\/ Only StoreI visited first but not mod since it's an input\n+            }\n+        }\n+    }\n+\n+    \/\/ Original fuzzer crash\n+    static void testFuzzer() {\n+        int i19, i21 = 4928, i23 = 14;\n+        for (int i = 5; i < 100; i++) {\n+            i19 = i23;\n+            int j = 1;\n+            while (true) {\n+                try {\n+                    i21 = (iArr[0] \/ 34);\n+                    i23 = (j % i21);\n+                } catch (ArithmeticException a_e) {\n+                }\n+                iArr = iArr;\n+                iFld = i21;\n+                iArr[1] += 5;\n+                if (j == 1000) {\n+                    break;\n+                }\n+                j++;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/splitif\/TestSplitDivThroughPhiWithControl.java","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"}]}