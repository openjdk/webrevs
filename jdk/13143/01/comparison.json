{"files":[{"patch":"@@ -1596,1 +1596,1 @@\n-      MutexLocker ml2(is_concurrent ? Module_lock : nullptr);\n+      MutexLocker ml2(is_concurrent ? Module_lock.get() : nullptr);\n@@ -1599,1 +1599,1 @@\n-      MutexLocker ml1(is_concurrent ? SystemDictionary_lock : nullptr);\n+      MutexLocker ml1(is_concurrent ? SystemDictionary_lock.get() : nullptr);\n@@ -1622,1 +1622,1 @@\n-    MutexLocker ml(is_concurrent ? ClassInitError_lock : nullptr);\n+    MutexLocker ml(is_concurrent ? ClassInitError_lock.get() : nullptr);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock.get(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1342,1 +1342,1 @@\n-    MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+    MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock.get(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2797,4 +2797,4 @@\n-  Mutex*   global_lock_1   = allFun ? (should_take_Compile_lock   ? Compile_lock   : nullptr) : nullptr;\n-  Monitor* global_lock_2   = allFun ? (should_take_CodeCache_lock ? CodeCache_lock : nullptr) : nullptr;\n-  Mutex*   function_lock_1 = allFun ? nullptr : (should_take_Compile_lock   ? Compile_lock    : nullptr);\n-  Monitor* function_lock_2 = allFun ? nullptr : (should_take_CodeCache_lock ? CodeCache_lock  : nullptr);\n+  Mutex*   global_lock_1   = allFun ? (should_take_Compile_lock   ? Compile_lock.get()   : nullptr) : nullptr;\n+  Monitor* global_lock_2   = allFun ? (should_take_CodeCache_lock ? CodeCache_lock.get() : nullptr) : nullptr;\n+  Mutex*   function_lock_1 = allFun ? nullptr : (should_take_Compile_lock   ? Compile_lock.get()    : nullptr);\n+  Monitor* function_lock_2 = allFun ? nullptr : (should_take_CodeCache_lock ? CodeCache_lock.get()  : nullptr);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3297,1 +3297,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock\n+  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock.get()\n@@ -3339,1 +3339,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n+  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock.get(),\n@@ -3355,1 +3355,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n+  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock.get(),\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1164,1 +1164,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock.get(), Mutex::_no_safepoint_check_flag);\n@@ -1175,1 +1175,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock.get(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n+  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock.get(),\n@@ -140,1 +140,1 @@\n-  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n+  MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock.get(),\n@@ -171,1 +171,1 @@\n-      MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n+      MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock.get(),\n@@ -199,1 +199,1 @@\n-        MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock,\n+        MutexLocker ml(CompiledMethod_lock->owned_by_self() ? nullptr : CompiledMethod_lock.get(),\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,24 +38,18 @@\n-\/\/\n-\/\/ Note that the following pointers are effectively final -- after having been\n-\/\/ set at JVM startup-time, they should never be subsequently mutated.\n-\/\/ Instead of using pointers to malloc()ed monitors and mutexes we should consider\n-\/\/ eliminating the indirection and using instances instead.\n-\/\/ Consider using GCC's __read_mostly.\n-\n-Mutex*   Patching_lock                = nullptr;\n-Mutex*   CompiledMethod_lock          = nullptr;\n-Monitor* SystemDictionary_lock        = nullptr;\n-Mutex*   InvokeMethodTable_lock       = nullptr;\n-Mutex*   SharedDictionary_lock        = nullptr;\n-Monitor* ClassInitError_lock          = nullptr;\n-Mutex*   Module_lock                  = nullptr;\n-Mutex*   CompiledIC_lock              = nullptr;\n-Mutex*   InlineCacheBuffer_lock       = nullptr;\n-Mutex*   VMStatistic_lock             = nullptr;\n-Mutex*   JmethodIdCreation_lock       = nullptr;\n-Mutex*   JfieldIdCreation_lock        = nullptr;\n-Monitor* JNICritical_lock             = nullptr;\n-Mutex*   JvmtiThreadState_lock        = nullptr;\n-Monitor* EscapeBarrier_lock           = nullptr;\n-Monitor* JvmtiVTMSTransition_lock     = nullptr;\n-Monitor* Heap_lock                    = nullptr;\n+\n+StaticLock<PaddedMutex>   Patching_lock;\n+StaticLock<PaddedMutex>   CompiledMethod_lock;\n+StaticLock<PaddedMonitor> SystemDictionary_lock;\n+StaticLock<PaddedMutex>   InvokeMethodTable_lock;\n+StaticLock<PaddedMutex>   SharedDictionary_lock;\n+StaticLock<PaddedMonitor> ClassInitError_lock;\n+StaticLock<PaddedMutex>   Module_lock;\n+StaticLock<PaddedMutex>   CompiledIC_lock;\n+StaticLock<PaddedMutex>   InlineCacheBuffer_lock;\n+StaticLock<PaddedMutex>   VMStatistic_lock;\n+StaticLock<PaddedMutex>   JmethodIdCreation_lock;\n+StaticLock<PaddedMutex>   JfieldIdCreation_lock;\n+StaticLock<PaddedMonitor> JNICritical_lock;\n+StaticLock<PaddedMutex>   JvmtiThreadState_lock;\n+StaticLock<PaddedMonitor> EscapeBarrier_lock;\n+StaticLock<PaddedMonitor> JvmtiVTMSTransition_lock;\n+StaticLock<PaddedMonitor> Heap_lock;\n@@ -63,1 +57,1 @@\n-Mutex*   PSOldGenExpand_lock      = nullptr;\n+StaticLock<PaddedMutex>   PSOldGenExpand_lock;\n@@ -65,35 +59,35 @@\n-Mutex*   AdapterHandlerLibrary_lock   = nullptr;\n-Mutex*   SignatureHandlerLibrary_lock = nullptr;\n-Mutex*   VtableStubs_lock             = nullptr;\n-Mutex*   SymbolArena_lock             = nullptr;\n-Monitor* StringDedup_lock             = nullptr;\n-Mutex*   StringDedupIntern_lock       = nullptr;\n-Monitor* CodeCache_lock               = nullptr;\n-Mutex*   TouchedMethodLog_lock        = nullptr;\n-Mutex*   RetData_lock                 = nullptr;\n-Monitor* VMOperation_lock             = nullptr;\n-Monitor* Threads_lock                 = nullptr;\n-Mutex*   NonJavaThreadsList_lock      = nullptr;\n-Mutex*   NonJavaThreadsListSync_lock  = nullptr;\n-Monitor* CGC_lock                     = nullptr;\n-Monitor* STS_lock                     = nullptr;\n-Monitor* G1OldGCCount_lock            = nullptr;\n-Mutex*   G1RareEvent_lock             = nullptr;\n-Mutex*   G1DetachedRefinementStats_lock = nullptr;\n-Mutex*   MarkStackFreeList_lock       = nullptr;\n-Mutex*   MarkStackChunkList_lock      = nullptr;\n-Mutex*   MonitoringSupport_lock       = nullptr;\n-Monitor* ConcurrentGCBreakpoints_lock = nullptr;\n-Mutex*   Compile_lock                 = nullptr;\n-Monitor* MethodCompileQueue_lock      = nullptr;\n-Monitor* CompileThread_lock           = nullptr;\n-Monitor* Compilation_lock             = nullptr;\n-Mutex*   CompileTaskAlloc_lock        = nullptr;\n-Mutex*   CompileStatistics_lock       = nullptr;\n-Mutex*   DirectivesStack_lock         = nullptr;\n-Mutex*   MultiArray_lock              = nullptr;\n-Monitor* Terminator_lock              = nullptr;\n-Monitor* InitCompleted_lock           = nullptr;\n-Monitor* BeforeExit_lock              = nullptr;\n-Monitor* Notify_lock                  = nullptr;\n-Mutex*   ExceptionCache_lock          = nullptr;\n+StaticLock<PaddedMutex>   AdapterHandlerLibrary_lock;\n+StaticLock<PaddedMutex>   SignatureHandlerLibrary_lock;\n+StaticLock<PaddedMutex>   VtableStubs_lock;\n+StaticLock<PaddedMutex>   SymbolArena_lock;\n+StaticLock<PaddedMonitor> StringDedup_lock;\n+StaticLock<PaddedMutex>   StringDedupIntern_lock;\n+StaticLock<PaddedMonitor> CodeCache_lock;\n+StaticLock<PaddedMutex>   TouchedMethodLog_lock;\n+StaticLock<PaddedMutex>   RetData_lock;\n+StaticLock<PaddedMonitor> VMOperation_lock;\n+StaticLock<PaddedMonitor> Threads_lock;\n+StaticLock<PaddedMutex>   NonJavaThreadsList_lock;\n+StaticLock<PaddedMutex>   NonJavaThreadsListSync_lock;\n+StaticLock<PaddedMonitor> CGC_lock;\n+StaticLock<PaddedMonitor> STS_lock;\n+StaticLock<PaddedMonitor> G1OldGCCount_lock;\n+StaticLock<PaddedMutex>   G1RareEvent_lock;\n+StaticLock<PaddedMutex>   G1DetachedRefinementStats_lock;\n+StaticLock<PaddedMutex>   MarkStackFreeList_lock;\n+StaticLock<PaddedMutex>   MarkStackChunkList_lock;\n+StaticLock<PaddedMutex>   MonitoringSupport_lock;\n+StaticLock<PaddedMonitor> ConcurrentGCBreakpoints_lock;\n+StaticLock<PaddedMutex>   Compile_lock;\n+StaticLock<PaddedMonitor> MethodCompileQueue_lock;\n+StaticLock<PaddedMonitor> CompileThread_lock;\n+StaticLock<PaddedMonitor> Compilation_lock;\n+StaticLock<PaddedMutex>   CompileTaskAlloc_lock;\n+StaticLock<PaddedMutex>   CompileStatistics_lock;\n+StaticLock<PaddedMutex>   DirectivesStack_lock;\n+StaticLock<PaddedMutex>   MultiArray_lock;\n+StaticLock<PaddedMonitor> Terminator_lock;\n+StaticLock<PaddedMonitor> InitCompleted_lock;\n+StaticLock<PaddedMonitor> BeforeExit_lock;\n+StaticLock<PaddedMonitor> Notify_lock;\n+StaticLock<PaddedMutex>   ExceptionCache_lock;\n@@ -101,1 +95,1 @@\n-Mutex*   FullGCALot_lock              = nullptr;\n+StaticLock<PaddedMutex>   FullGCALot_lock;\n@@ -104,1 +98,1 @@\n-Mutex*   tty_lock                     = nullptr;\n+StaticLock<PaddedMutex>   tty_lock;\n@@ -106,4 +100,4 @@\n-Mutex*   RawMonitor_lock              = nullptr;\n-Mutex*   PerfDataMemAlloc_lock        = nullptr;\n-Mutex*   PerfDataManager_lock         = nullptr;\n-Mutex*   OopMapCacheAlloc_lock        = nullptr;\n+StaticLock<PaddedMutex>   RawMonitor_lock;\n+StaticLock<PaddedMutex>   PerfDataMemAlloc_lock;\n+StaticLock<PaddedMutex>   PerfDataManager_lock;\n+StaticLock<PaddedMutex>   OopMapCacheAlloc_lock;\n@@ -111,4 +105,4 @@\n-Mutex*   FreeList_lock                = nullptr;\n-Mutex*   OldSets_lock                 = nullptr;\n-Mutex*   Uncommit_lock                = nullptr;\n-Monitor* RootRegionScan_lock          = nullptr;\n+StaticLock<PaddedMutex>   FreeList_lock;\n+StaticLock<PaddedMutex>   OldSets_lock;\n+StaticLock<PaddedMutex>   Uncommit_lock;\n+StaticLock<PaddedMonitor> RootRegionScan_lock;\n@@ -116,8 +110,8 @@\n-Mutex*   Management_lock              = nullptr;\n-Monitor* MonitorDeflation_lock        = nullptr;\n-Monitor* Service_lock                 = nullptr;\n-Monitor* Notification_lock            = nullptr;\n-Monitor* PeriodicTask_lock            = nullptr;\n-Monitor* RedefineClasses_lock         = nullptr;\n-Mutex*   Verify_lock                  = nullptr;\n-Monitor* Zip_lock                     = nullptr;\n+StaticLock<PaddedMutex>   Management_lock;\n+StaticLock<PaddedMonitor> MonitorDeflation_lock;\n+StaticLock<PaddedMonitor> Service_lock;\n+StaticLock<PaddedMonitor> Notification_lock;\n+StaticLock<PaddedMonitor> PeriodicTask_lock;\n+StaticLock<PaddedMonitor> RedefineClasses_lock;\n+StaticLock<PaddedMutex>   Verify_lock;\n+StaticLock<PaddedMonitor> Zip_lock;\n@@ -126,4 +120,4 @@\n-Mutex*   JfrStacktrace_lock           = nullptr;\n-Monitor* JfrMsg_lock                  = nullptr;\n-Mutex*   JfrBuffer_lock               = nullptr;\n-Monitor* JfrThreadSampler_lock        = nullptr;\n+StaticLock<PaddedMutex>   JfrStacktrace_lock;\n+StaticLock<PaddedMonitor> JfrMsg_lock;\n+StaticLock<PaddedMutex>   JfrBuffer_lock;\n+StaticLock<PaddedMonitor> JfrThreadSampler_lock;\n@@ -133,1 +127,1 @@\n-Mutex*   UnsafeJlong_lock             = nullptr;\n+StaticLock<PaddedMutex>   UnsafeJlong_lock;\n@@ -135,1 +129,1 @@\n-Mutex*   CodeHeapStateAnalytics_lock  = nullptr;\n+StaticLock<PaddedMutex>   CodeHeapStateAnalytics_lock;\n@@ -137,1 +131,1 @@\n-Monitor* ContinuationRelativize_lock  = nullptr;\n+StaticLock<PaddedMonitor> ContinuationRelativize_lock;\n@@ -139,8 +133,8 @@\n-Mutex*   Metaspace_lock               = nullptr;\n-Monitor* MetaspaceCritical_lock       = nullptr;\n-Mutex*   ClassLoaderDataGraph_lock    = nullptr;\n-Monitor* ThreadsSMRDelete_lock        = nullptr;\n-Mutex*   ThreadIdTableCreate_lock     = nullptr;\n-Mutex*   SharedDecoder_lock           = nullptr;\n-Mutex*   DCmdFactory_lock             = nullptr;\n-Mutex*   NMTQuery_lock                = nullptr;\n+StaticLock<PaddedMutex>   Metaspace_lock;\n+StaticLock<PaddedMonitor> MetaspaceCritical_lock;\n+StaticLock<PaddedMutex>   ClassLoaderDataGraph_lock;\n+StaticLock<PaddedMonitor> ThreadsSMRDelete_lock;\n+StaticLock<PaddedMutex>   ThreadIdTableCreate_lock;\n+StaticLock<PaddedMutex>   SharedDecoder_lock;\n+StaticLock<PaddedMutex>   DCmdFactory_lock;\n+StaticLock<PaddedMutex>   NMTQuery_lock;\n@@ -150,1 +144,1 @@\n-Mutex*   CDSClassFileStream_lock      = nullptr;\n+StaticLock<PaddedMutex>   CDSClassFileStream_lock;\n@@ -152,7 +146,7 @@\n-Mutex*   DumpTimeTable_lock           = nullptr;\n-Mutex*   CDSLambda_lock               = nullptr;\n-Mutex*   DumpRegion_lock              = nullptr;\n-Mutex*   ClassListFile_lock           = nullptr;\n-Mutex*   UnregisteredClassesTable_lock= nullptr;\n-Mutex*   LambdaFormInvokers_lock      = nullptr;\n-Mutex*   ScratchObjects_lock          = nullptr;\n+StaticLock<PaddedMutex>   DumpTimeTable_lock;\n+StaticLock<PaddedMutex>   CDSLambda_lock;\n+StaticLock<PaddedMutex>   DumpRegion_lock;\n+StaticLock<PaddedMutex>   ClassListFile_lock;\n+StaticLock<PaddedMutex>   UnregisteredClassesTable_lock;\n+StaticLock<PaddedMutex>   LambdaFormInvokers_lock;\n+StaticLock<PaddedMutex>   ScratchObjects_lock;\n@@ -160,1 +154,1 @@\n-Mutex*   Bootclasspath_lock           = nullptr;\n+StaticLock<PaddedMutex>   Bootclasspath_lock;\n@@ -163,2 +157,2 @@\n-Monitor* JVMCI_lock                   = nullptr;\n-Monitor* JVMCIRuntime_lock            = nullptr;\n+StaticLock<PaddedMonitor> JVMCI_lock;\n+StaticLock<PaddedMonitor> JVMCIRuntime_lock;\n@@ -204,3 +198,3 @@\n-#define def(var, type, pri, ...) {            \\\n-  var = new type(Mutex::pri, #var, ##__VA_ARGS__); \\\n-  add_mutex(var);                             \\\n+#define def(var, pri, ...) {                 \\\n+  var.init(Mutex::pri, #var, ##__VA_ARGS__); \\\n+  add_mutex(var.get());                      \\\n@@ -211,3 +205,3 @@\n-#define defl(var, type, held_lock, ...) {         \\\n-  var = new type(held_lock->rank()-1, #var, ##__VA_ARGS__); \\\n-  add_mutex(var);                                      \\\n+#define defl(var, held_lock, ...) {                   \\\n+  var.init(held_lock->rank()-1, #var, ##__VA_ARGS__); \\\n+  add_mutex(var.get());                               \\\n@@ -216,3 +210,3 @@\n-#define defl(var, type, held_lock, ...) {         \\\n-  var = new type(Mutex::safepoint, #var, ##__VA_ARGS__); \\\n-  add_mutex(var);                                      \\\n+#define defl(var, held_lock, ...) {                \\\n+  var.init(Mutex::safepoint, #var, ##__VA_ARGS__); \\\n+  add_mutex(var.get());                            \\\n@@ -224,1 +218,1 @@\n-  def(tty_lock                     , PaddedMutex  , tty);      \/\/ allow to lock in VM\n+  def(tty_lock                     , tty);      \/\/ allow to lock in VM\n@@ -226,1 +220,1 @@\n-  def(STS_lock                     , PaddedMonitor, nosafepoint);\n+  def(STS_lock                     , nosafepoint);\n@@ -229,1 +223,1 @@\n-    def(CGC_lock                   , PaddedMonitor, nosafepoint);\n+    def(CGC_lock                   , nosafepoint);\n@@ -231,1 +225,1 @@\n-    def(G1DetachedRefinementStats_lock, PaddedMutex, nosafepoint-2);\n+    def(G1DetachedRefinementStats_lock, nosafepoint-2);\n@@ -233,4 +227,4 @@\n-    def(FreeList_lock              , PaddedMutex  , service-1);\n-    def(OldSets_lock               , PaddedMutex  , nosafepoint);\n-    def(Uncommit_lock              , PaddedMutex  , service-2);\n-    def(RootRegionScan_lock        , PaddedMonitor, nosafepoint-1);\n+    def(FreeList_lock              , service-1);\n+    def(OldSets_lock               , nosafepoint);\n+    def(Uncommit_lock              , service-2);\n+    def(RootRegionScan_lock        , nosafepoint-1);\n@@ -238,2 +232,2 @@\n-    def(MarkStackFreeList_lock     , PaddedMutex  , nosafepoint);\n-    def(MarkStackChunkList_lock    , PaddedMutex  , nosafepoint);\n+    def(MarkStackFreeList_lock     , nosafepoint);\n+    def(MarkStackChunkList_lock    , nosafepoint);\n@@ -241,1 +235,1 @@\n-    def(MonitoringSupport_lock     , PaddedMutex  , service-1);      \/\/ used for serviceability monitoring support\n+    def(MonitoringSupport_lock     , service-1);      \/\/ used for serviceability monitoring support\n@@ -243,24 +237,20 @@\n-  def(StringDedup_lock             , PaddedMonitor, nosafepoint);\n-  def(StringDedupIntern_lock       , PaddedMutex  , nosafepoint);\n-  def(RawMonitor_lock              , PaddedMutex  , nosafepoint-1);\n-\n-  def(Metaspace_lock               , PaddedMutex  , nosafepoint-3);\n-  def(MetaspaceCritical_lock       , PaddedMonitor, nosafepoint-1);\n-\n-  def(Patching_lock                , PaddedMutex  , nosafepoint);      \/\/ used for safepointing and code patching.\n-  def(MonitorDeflation_lock        , PaddedMonitor, nosafepoint);      \/\/ used for monitor deflation thread operations\n-  def(Service_lock                 , PaddedMonitor, service);      \/\/ used for service thread operations\n-\n-  if (UseNotificationThread) {\n-    def(Notification_lock          , PaddedMonitor, service);  \/\/ used for notification thread operations\n-  } else {\n-    Notification_lock = Service_lock;\n-  }\n-\n-  def(JmethodIdCreation_lock       , PaddedMutex  , nosafepoint-2); \/\/ used for creating jmethodIDs.\n-  def(InvokeMethodTable_lock       , PaddedMutex  , safepoint);\n-  def(SharedDictionary_lock        , PaddedMutex  , safepoint);\n-  def(VMStatistic_lock             , PaddedMutex  , safepoint);\n-  def(SignatureHandlerLibrary_lock , PaddedMutex  , safepoint);\n-  def(SymbolArena_lock             , PaddedMutex  , nosafepoint);\n-  def(ExceptionCache_lock          , PaddedMutex  , safepoint);\n+  def(StringDedup_lock             , nosafepoint);\n+  def(StringDedupIntern_lock       , nosafepoint);\n+  def(RawMonitor_lock              , nosafepoint-1);\n+\n+  def(Metaspace_lock               , nosafepoint-3);\n+  def(MetaspaceCritical_lock       , nosafepoint-1);\n+\n+  def(Patching_lock                , nosafepoint);      \/\/ used for safepointing and code patching.\n+  def(MonitorDeflation_lock        , nosafepoint);      \/\/ used for monitor deflation thread operations\n+  def(Service_lock                 , service);      \/\/ used for service thread operations\n+\n+  def(Notification_lock            , service);  \/\/ used for notification thread operations\n+\n+  def(JmethodIdCreation_lock       , nosafepoint-2); \/\/ used for creating jmethodIDs.\n+  def(InvokeMethodTable_lock       , safepoint);\n+  def(SharedDictionary_lock        , safepoint);\n+  def(VMStatistic_lock             , safepoint);\n+  def(SignatureHandlerLibrary_lock , safepoint);\n+  def(SymbolArena_lock             , nosafepoint);\n+  def(ExceptionCache_lock          , safepoint);\n@@ -268,1 +258,1 @@\n-  def(FullGCALot_lock              , PaddedMutex  , safepoint); \/\/ a lock to make FullGCALot MT safe\n+  def(FullGCALot_lock              , safepoint); \/\/ a lock to make FullGCALot MT safe\n@@ -270,1 +260,1 @@\n-  def(BeforeExit_lock              , PaddedMonitor, safepoint);\n+  def(BeforeExit_lock              , safepoint);\n@@ -272,2 +262,2 @@\n-  def(NonJavaThreadsList_lock      , PaddedMutex,   nosafepoint-1);\n-  def(NonJavaThreadsListSync_lock  , PaddedMutex,   nosafepoint);\n+  def(NonJavaThreadsList_lock      ,   nosafepoint-1);\n+  def(NonJavaThreadsListSync_lock  ,   nosafepoint);\n@@ -275,4 +265,4 @@\n-  def(RetData_lock                 , PaddedMutex  , safepoint);\n-  def(Terminator_lock              , PaddedMonitor, safepoint, true);\n-  def(InitCompleted_lock           , PaddedMonitor, nosafepoint);\n-  def(Notify_lock                  , PaddedMonitor, safepoint, true);\n+  def(RetData_lock                 , safepoint);\n+  def(Terminator_lock              , safepoint, true);\n+  def(InitCompleted_lock           , nosafepoint);\n+  def(Notify_lock                  , safepoint, true);\n@@ -280,2 +270,1 @@\n-  def(Heap_lock                    , PaddedMonitor, safepoint); \/\/ Doesn't safepoint check during termination.\n-  def(JfieldIdCreation_lock        , PaddedMutex  , safepoint);\n+  def(JfieldIdCreation_lock        , safepoint);\n@@ -283,5 +272,5 @@\n-  def(CompiledIC_lock              , PaddedMutex  , nosafepoint);  \/\/ locks VtableStubs_lock, InlineCacheBuffer_lock\n-  def(MethodCompileQueue_lock      , PaddedMonitor, safepoint);\n-  def(CompileStatistics_lock       , PaddedMutex  , safepoint);\n-  def(DirectivesStack_lock         , PaddedMutex  , nosafepoint);\n-  def(MultiArray_lock              , PaddedMutex  , safepoint);\n+  def(CompiledIC_lock              , nosafepoint);  \/\/ locks VtableStubs_lock, InlineCacheBuffer_lock\n+  def(MethodCompileQueue_lock      , safepoint);\n+  def(CompileStatistics_lock       , safepoint);\n+  def(DirectivesStack_lock         , nosafepoint);\n+  def(MultiArray_lock              , safepoint);\n@@ -289,4 +278,4 @@\n-  def(JvmtiThreadState_lock        , PaddedMutex  , safepoint);   \/\/ Used by JvmtiThreadState\/JvmtiEventController\n-  def(EscapeBarrier_lock           , PaddedMonitor, nosafepoint); \/\/ Used to synchronize object reallocation\/relocking triggered by JVMTI\n-  def(JvmtiVTMSTransition_lock     , PaddedMonitor, safepoint);   \/\/ used for Virtual Thread Mount State transition management\n-  def(Management_lock              , PaddedMutex  , safepoint);   \/\/ used for JVM management\n+  def(JvmtiThreadState_lock        , safepoint);   \/\/ Used by JvmtiThreadState\/JvmtiEventController\n+  def(EscapeBarrier_lock           , nosafepoint); \/\/ Used to synchronize object reallocation\/relocking triggered by JVMTI\n+  def(JvmtiVTMSTransition_lock     , safepoint);   \/\/ used for Virtual Thread Mount State transition management\n+  def(Management_lock              , safepoint);   \/\/ used for JVM management\n@@ -294,2 +283,2 @@\n-  def(ConcurrentGCBreakpoints_lock , PaddedMonitor, safepoint, true);\n-  def(TouchedMethodLog_lock        , PaddedMutex  , safepoint);\n+  def(ConcurrentGCBreakpoints_lock , safepoint, true);\n+  def(TouchedMethodLog_lock        , safepoint);\n@@ -297,4 +286,4 @@\n-  def(CompileThread_lock           , PaddedMonitor, safepoint);\n-  def(PeriodicTask_lock            , PaddedMonitor, safepoint, true);\n-  def(RedefineClasses_lock         , PaddedMonitor, safepoint);\n-  def(Verify_lock                  , PaddedMutex,   safepoint);\n+  def(CompileThread_lock           , safepoint);\n+  def(PeriodicTask_lock            , safepoint, true);\n+  def(RedefineClasses_lock         , safepoint);\n+  def(Verify_lock                  ,   safepoint);\n@@ -303,1 +292,1 @@\n-    def(Compilation_lock           , PaddedMonitor, nosafepoint);\n+    def(Compilation_lock           , nosafepoint);\n@@ -307,4 +296,4 @@\n-  def(JfrBuffer_lock               , PaddedMutex  , nosafepoint);\n-  def(JfrMsg_lock                  , PaddedMonitor, nosafepoint-3);\n-  def(JfrStacktrace_lock           , PaddedMutex  , stackwatermark-1);\n-  def(JfrThreadSampler_lock        , PaddedMonitor, nosafepoint);\n+  def(JfrBuffer_lock               , nosafepoint);\n+  def(JfrMsg_lock                  , nosafepoint-3);\n+  def(JfrStacktrace_lock           , stackwatermark-1);\n+  def(JfrThreadSampler_lock        , nosafepoint);\n@@ -314,1 +303,1 @@\n-  def(UnsafeJlong_lock             , PaddedMutex  , nosafepoint);\n+  def(UnsafeJlong_lock             , nosafepoint);\n@@ -317,7 +306,7 @@\n-  def(ContinuationRelativize_lock  , PaddedMonitor, nosafepoint-3);\n-  def(CodeHeapStateAnalytics_lock  , PaddedMutex  , safepoint);\n-  def(ThreadsSMRDelete_lock        , PaddedMonitor, nosafepoint-3); \/\/ Holds ConcurrentHashTableResize_lock\n-  def(ThreadIdTableCreate_lock     , PaddedMutex  , safepoint);\n-  def(SharedDecoder_lock           , PaddedMutex  , tty-1);\n-  def(DCmdFactory_lock             , PaddedMutex  , nosafepoint);\n-  def(NMTQuery_lock                , PaddedMutex  , safepoint);\n+  def(ContinuationRelativize_lock  , nosafepoint-3);\n+  def(CodeHeapStateAnalytics_lock  , safepoint);\n+  def(ThreadsSMRDelete_lock        , nosafepoint-3); \/\/ Holds ConcurrentHashTableResize_lock\n+  def(ThreadIdTableCreate_lock     , safepoint);\n+  def(SharedDecoder_lock           , tty-1);\n+  def(DCmdFactory_lock             , nosafepoint);\n+  def(NMTQuery_lock                , safepoint);\n@@ -326,1 +315,1 @@\n-  def(CDSClassFileStream_lock      , PaddedMutex  , safepoint);\n+  def(CDSClassFileStream_lock      , safepoint);\n@@ -328,6 +317,7 @@\n-  def(DumpTimeTable_lock           , PaddedMutex  , nosafepoint);\n-  def(CDSLambda_lock               , PaddedMutex  , nosafepoint);\n-  def(DumpRegion_lock              , PaddedMutex  , nosafepoint);\n-  def(ClassListFile_lock           , PaddedMutex  , nosafepoint);\n-  def(LambdaFormInvokers_lock      , PaddedMutex  , safepoint);\n-  def(ScratchObjects_lock          , PaddedMutex  , nosafepoint-1); \/\/ Holds DumpTimeTable_lock\n+  def(DumpTimeTable_lock           , nosafepoint);\n+  def(CDSLambda_lock               , nosafepoint);\n+  def(DumpRegion_lock              , nosafepoint);\n+  def(ClassListFile_lock           , nosafepoint);\n+  def(UnregisteredClassesTable_lock, nosafepoint);\n+  def(LambdaFormInvokers_lock      , safepoint);\n+  def(ScratchObjects_lock          , nosafepoint-1); \/\/ Holds DumpTimeTable_lock\n@@ -335,2 +325,2 @@\n-  def(Bootclasspath_lock           , PaddedMutex  , nosafepoint);\n-  def(Zip_lock                     , PaddedMonitor, nosafepoint-1); \/\/ Holds DumpTimeTable_lock\n+  def(Bootclasspath_lock           , nosafepoint);\n+  def(Zip_lock                     , nosafepoint-1); \/\/ Holds DumpTimeTable_lock\n@@ -340,1 +330,1 @@\n-  def(JVMCIRuntime_lock            , PaddedMonitor, safepoint, true);\n+  def(JVMCIRuntime_lock            , safepoint, true);\n@@ -344,15 +334,15 @@\n-  defl(InlineCacheBuffer_lock      , PaddedMutex  , CompiledIC_lock);\n-  defl(VtableStubs_lock            , PaddedMutex  , CompiledIC_lock);  \/\/ Also holds DumpTimeTable_lock\n-  defl(CodeCache_lock              , PaddedMonitor, VtableStubs_lock);\n-  defl(CompiledMethod_lock         , PaddedMutex  , CodeCache_lock);\n-\n-  defl(Threads_lock                , PaddedMonitor, CompileThread_lock, true);\n-  defl(Compile_lock                , PaddedMutex  , MethodCompileQueue_lock);\n-  defl(AdapterHandlerLibrary_lock  , PaddedMutex  , InvokeMethodTable_lock);\n-  defl(Heap_lock                   , PaddedMonitor, AdapterHandlerLibrary_lock);\n-\n-  defl(PerfDataMemAlloc_lock       , PaddedMutex  , Heap_lock);\n-  defl(PerfDataManager_lock        , PaddedMutex  , Heap_lock);\n-  defl(ClassLoaderDataGraph_lock   , PaddedMutex  , MultiArray_lock);\n-  defl(VMOperation_lock            , PaddedMonitor, Heap_lock, true);\n-  defl(ClassInitError_lock         , PaddedMonitor, Threads_lock);\n+  defl(InlineCacheBuffer_lock      , CompiledIC_lock);\n+  defl(VtableStubs_lock            , CompiledIC_lock);  \/\/ Also holds DumpTimeTable_lock\n+  defl(CodeCache_lock              , VtableStubs_lock);\n+  defl(CompiledMethod_lock         , CodeCache_lock);\n+\n+  defl(Threads_lock                , CompileThread_lock, true);\n+  defl(Compile_lock                , MethodCompileQueue_lock);\n+  defl(AdapterHandlerLibrary_lock  , InvokeMethodTable_lock);\n+  defl(Heap_lock                   , AdapterHandlerLibrary_lock);\n+\n+  defl(PerfDataMemAlloc_lock       , Heap_lock);\n+  defl(PerfDataManager_lock        , Heap_lock);\n+  defl(ClassLoaderDataGraph_lock   , MultiArray_lock);\n+  defl(VMOperation_lock            , Heap_lock, true);\n+  defl(ClassInitError_lock         , Threads_lock);\n@@ -361,2 +351,2 @@\n-    defl(G1OldGCCount_lock         , PaddedMonitor, Threads_lock, true);\n-    defl(G1RareEvent_lock          , PaddedMutex  , Threads_lock, true);\n+    defl(G1OldGCCount_lock         , Threads_lock, true);\n+    defl(G1RareEvent_lock          , Threads_lock, true);\n@@ -365,1 +355,1 @@\n-  defl(CompileTaskAlloc_lock       , PaddedMutex ,  MethodCompileQueue_lock);\n+  defl(CompileTaskAlloc_lock       ,  MethodCompileQueue_lock);\n@@ -368,1 +358,1 @@\n-    defl(PSOldGenExpand_lock   , PaddedMutex , Heap_lock, true);\n+    defl(PSOldGenExpand_lock   , Heap_lock, true);\n@@ -371,4 +361,4 @@\n-  defl(OopMapCacheAlloc_lock       , PaddedMutex ,  Threads_lock, true);\n-  defl(Module_lock                 , PaddedMutex ,  ClassLoaderDataGraph_lock);\n-  defl(SystemDictionary_lock       , PaddedMonitor, Module_lock);\n-  defl(JNICritical_lock            , PaddedMonitor, AdapterHandlerLibrary_lock); \/\/ used for JNI critical regions\n+  defl(OopMapCacheAlloc_lock       ,  Threads_lock, true);\n+  defl(Module_lock                 ,  ClassLoaderDataGraph_lock);\n+  defl(SystemDictionary_lock       , Module_lock);\n+  defl(JNICritical_lock            , AdapterHandlerLibrary_lock); \/\/ used for JNI critical regions\n@@ -377,1 +367,1 @@\n-  defl(JVMCI_lock                  , PaddedMonitor, JVMCIRuntime_lock);\n+  defl(JVMCI_lock                  , JVMCIRuntime_lock);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":210,"deletions":220,"binary":false,"changes":430,"status":"modified"},{"patch":"@@ -31,0 +31,58 @@\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+#include <type_traits>\n+\n+void mutex_init();\n+\n+template <typename T>\n+class StaticLock {\n+ private:\n+  friend void mutex_init();\n+\n+  alignas(T) uint8_t _storage[sizeof(T)];\n+  DEBUG_ONLY(bool _inited = false;)\n+\n+  \/\/ Called by mutex_init() to actually construct the underlying T.\n+  template <typename... Args>\n+  void init(Args&&... args) {\n+    assert(!_inited, \"Mutex\/Monitor initialized twice\");\n+    ::new (static_cast<void*>(&_storage[0])) T(forward<Args>(args)...);\n+    DEBUG_ONLY(_inited = true;)\n+  }\n+\n+  NONCOPYABLE(StaticLock);\n+\n+ public:\n+  static_assert(std::is_base_of<Mutex, T>::value,\n+                \"StaticLock is only meant to be used with Mutex or its derived classes\");\n+\n+  constexpr StaticLock() = default;\n+\n+  T* get() {\n+    assert(_inited, \"Mutex\/Monitor not initialized\");\n+    return reinterpret_cast<T*>(&_storage[0]);\n+  }\n+\n+  const T* get() const {\n+    assert(_inited, \"Mutex\/Monitor not initialized\");\n+    return reinterpret_cast<const T*>(&_storage[0]);\n+  }\n+\n+  T* operator->() {\n+    return get();\n+  }\n+\n+  const T* operator->() const {\n+    return get();\n+  }\n+\n+  \/\/ For compatibility, without doing lots of refactoring, this is implicitly convertible to T*.\n+  \/\/ Eventually it would be nice to make these explicit.\n+  operator T*() {\n+    return get();\n+  }\n+  operator const T*() const {\n+    return get();\n+  }\n+};\n@@ -34,17 +92,17 @@\n-extern Mutex*   Patching_lock;                   \/\/ a lock used to guard code patching of compiled code\n-extern Mutex*   CompiledMethod_lock;             \/\/ a lock used to guard a compiled method and OSR queues\n-extern Monitor* SystemDictionary_lock;           \/\/ a lock on the system dictionary\n-extern Mutex*   InvokeMethodTable_lock;\n-extern Mutex*   SharedDictionary_lock;           \/\/ a lock on the CDS shared dictionary\n-extern Monitor* ClassInitError_lock;             \/\/ a lock on the class initialization error table\n-extern Mutex*   Module_lock;                     \/\/ a lock on module and package related data structures\n-extern Mutex*   CompiledIC_lock;                 \/\/ a lock used to guard compiled IC patching and access\n-extern Mutex*   InlineCacheBuffer_lock;          \/\/ a lock used to guard the InlineCacheBuffer\n-extern Mutex*   VMStatistic_lock;                \/\/ a lock used to guard statistics count increment\n-extern Mutex*   JmethodIdCreation_lock;          \/\/ a lock on creating JNI method identifiers\n-extern Mutex*   JfieldIdCreation_lock;           \/\/ a lock on creating JNI static field identifiers\n-extern Monitor* JNICritical_lock;                \/\/ a lock used while entering and exiting JNI critical regions, allows GC to sometimes get in\n-extern Mutex*   JvmtiThreadState_lock;           \/\/ a lock on modification of JVMTI thread data\n-extern Monitor* EscapeBarrier_lock;              \/\/ a lock to sync reallocating and relocking objects because of JVMTI access\n-extern Monitor* JvmtiVTMSTransition_lock;        \/\/ a lock for Virtual Thread Mount State transition (VTMS transition) management\n-extern Monitor* Heap_lock;                       \/\/ a lock on the heap\n+extern StaticLock<PaddedMutex>   Patching_lock;                   \/\/ a lock used to guard code patching of compiled code\n+extern StaticLock<PaddedMutex>   CompiledMethod_lock;             \/\/ a lock used to guard a compiled method and OSR queues\n+extern StaticLock<PaddedMonitor> SystemDictionary_lock;           \/\/ a lock on the system dictionary\n+extern StaticLock<PaddedMutex>   InvokeMethodTable_lock;\n+extern StaticLock<PaddedMutex>   SharedDictionary_lock;           \/\/ a lock on the CDS shared dictionary\n+extern StaticLock<PaddedMonitor> ClassInitError_lock;             \/\/ a lock on the class initialization error table\n+extern StaticLock<PaddedMutex>   Module_lock;                     \/\/ a lock on module and package related data structures\n+extern StaticLock<PaddedMutex>   CompiledIC_lock;                 \/\/ a lock used to guard compiled IC patching and access\n+extern StaticLock<PaddedMutex>   InlineCacheBuffer_lock;          \/\/ a lock used to guard the InlineCacheBuffer\n+extern StaticLock<PaddedMutex>   VMStatistic_lock;                \/\/ a lock used to guard statistics count increment\n+extern StaticLock<PaddedMutex>   JmethodIdCreation_lock;          \/\/ a lock on creating JNI method identifiers\n+extern StaticLock<PaddedMutex>   JfieldIdCreation_lock;           \/\/ a lock on creating JNI static field identifiers\n+extern StaticLock<PaddedMonitor> JNICritical_lock;                \/\/ a lock used while entering and exiting JNI critical regions, allows GC to sometimes get in\n+extern StaticLock<PaddedMutex>   JvmtiThreadState_lock;           \/\/ a lock on modification of JVMTI thread data\n+extern StaticLock<PaddedMonitor> EscapeBarrier_lock;              \/\/ a lock to sync reallocating and relocking objects because of JVMTI access\n+extern StaticLock<PaddedMonitor> JvmtiVTMSTransition_lock;        \/\/ a lock for Virtual Thread Mount State transition (VTMS transition) management\n+extern StaticLock<PaddedMonitor> Heap_lock;                       \/\/ a lock on the heap\n@@ -52,1 +110,1 @@\n-extern Mutex*   PSOldGenExpand_lock;         \/\/ a lock on expanding the heap\n+extern StaticLock<PaddedMutex>   PSOldGenExpand_lock;         \/\/ a lock on expanding the heap\n@@ -54,11 +112,11 @@\n-extern Mutex*   AdapterHandlerLibrary_lock;      \/\/ a lock on the AdapterHandlerLibrary\n-extern Mutex*   SignatureHandlerLibrary_lock;    \/\/ a lock on the SignatureHandlerLibrary\n-extern Mutex*   VtableStubs_lock;                \/\/ a lock on the VtableStubs\n-extern Mutex*   SymbolArena_lock;                \/\/ a lock on the symbol table arena\n-extern Monitor* StringDedup_lock;                \/\/ a lock on the string deduplication facility\n-extern Mutex*   StringDedupIntern_lock;          \/\/ a lock on StringTable notification of StringDedup\n-extern Monitor* CodeCache_lock;                  \/\/ a lock on the CodeCache\n-extern Mutex*   TouchedMethodLog_lock;           \/\/ a lock on allocation of LogExecutedMethods info\n-extern Mutex*   RetData_lock;                    \/\/ a lock on installation of RetData inside method data\n-extern Monitor* VMOperation_lock;                \/\/ a lock on queue of vm_operations waiting to execute\n-extern Monitor* Threads_lock;                    \/\/ a lock on the Threads table of active Java threads\n+extern StaticLock<PaddedMutex>   AdapterHandlerLibrary_lock;      \/\/ a lock on the AdapterHandlerLibrary\n+extern StaticLock<PaddedMutex>   SignatureHandlerLibrary_lock;    \/\/ a lock on the SignatureHandlerLibrary\n+extern StaticLock<PaddedMutex>   VtableStubs_lock;                \/\/ a lock on the VtableStubs\n+extern StaticLock<PaddedMutex>   SymbolArena_lock;                \/\/ a lock on the symbol table arena\n+extern StaticLock<PaddedMonitor> StringDedup_lock;                \/\/ a lock on the string deduplication facility\n+extern StaticLock<PaddedMutex>   StringDedupIntern_lock;          \/\/ a lock on StringTable notification of StringDedup\n+extern StaticLock<PaddedMonitor> CodeCache_lock;                  \/\/ a lock on the CodeCache\n+extern StaticLock<PaddedMutex>   TouchedMethodLog_lock;           \/\/ a lock on allocation of LogExecutedMethods info\n+extern StaticLock<PaddedMutex>   RetData_lock;                    \/\/ a lock on installation of RetData inside method data\n+extern StaticLock<PaddedMonitor> VMOperation_lock;                \/\/ a lock on queue of vm_operations waiting to execute\n+extern StaticLock<PaddedMonitor> Threads_lock;                    \/\/ a lock on the Threads table of active Java threads\n@@ -66,3 +124,3 @@\n-extern Mutex*   NonJavaThreadsList_lock;         \/\/ a lock on the NonJavaThreads list\n-extern Mutex*   NonJavaThreadsListSync_lock;     \/\/ a lock for NonJavaThreads list synchronization\n-extern Monitor* CGC_lock;                        \/\/ used for coordination between\n+extern StaticLock<PaddedMutex>   NonJavaThreadsList_lock;         \/\/ a lock on the NonJavaThreads list\n+extern StaticLock<PaddedMutex>   NonJavaThreadsListSync_lock;     \/\/ a lock for NonJavaThreads list synchronization\n+extern StaticLock<PaddedMonitor> CGC_lock;                        \/\/ used for coordination between\n@@ -70,21 +128,21 @@\n-extern Monitor* STS_lock;                        \/\/ used for joining\/leaving SuspendibleThreadSet.\n-extern Monitor* G1OldGCCount_lock;               \/\/ in support of \"concurrent\" full gc\n-extern Mutex*   G1RareEvent_lock;                \/\/ Synchronizes (rare) parallel GC operations.\n-extern Mutex*   G1DetachedRefinementStats_lock;  \/\/ Lock protecting detached refinement stats\n-extern Mutex*   MarkStackFreeList_lock;          \/\/ Protects access to the global mark stack free list.\n-extern Mutex*   MarkStackChunkList_lock;         \/\/ Protects access to the global mark stack chunk list.\n-extern Mutex*   MonitoringSupport_lock;          \/\/ Protects updates to the serviceability memory pools.\n-extern Monitor* ConcurrentGCBreakpoints_lock;    \/\/ Protects concurrent GC breakpoint management\n-extern Mutex*   Compile_lock;                    \/\/ a lock held when Compilation is updating code (used to block CodeCache traversal, CHA updates, etc)\n-extern Monitor* MethodCompileQueue_lock;         \/\/ a lock held when method compilations are enqueued, dequeued\n-extern Monitor* CompileThread_lock;              \/\/ a lock held by compile threads during compilation system initialization\n-extern Monitor* Compilation_lock;                \/\/ a lock used to pause compilation\n-extern Mutex*   CompileTaskAlloc_lock;           \/\/ a lock held when CompileTasks are allocated\n-extern Mutex*   CompileStatistics_lock;          \/\/ a lock held when updating compilation statistics\n-extern Mutex*   DirectivesStack_lock;            \/\/ a lock held when mutating the dirstack and ref counting directives\n-extern Mutex*   MultiArray_lock;                 \/\/ a lock used to guard allocation of multi-dim arrays\n-extern Monitor* Terminator_lock;                 \/\/ a lock used to guard termination of the vm\n-extern Monitor* InitCompleted_lock;              \/\/ a lock used to signal threads waiting on init completed\n-extern Monitor* BeforeExit_lock;                 \/\/ a lock used to guard cleanups and shutdown hooks\n-extern Monitor* Notify_lock;                     \/\/ a lock used to synchronize the start-up of the vm\n-extern Mutex*   ExceptionCache_lock;             \/\/ a lock used to synchronize exception cache updates\n+extern StaticLock<PaddedMonitor> STS_lock;                        \/\/ used for joining\/leaving SuspendibleThreadSet.\n+extern StaticLock<PaddedMonitor> G1OldGCCount_lock;               \/\/ in support of \"concurrent\" full gc\n+extern StaticLock<PaddedMutex>   G1RareEvent_lock;                \/\/ Synchronizes (rare) parallel GC operations.\n+extern StaticLock<PaddedMutex>   G1DetachedRefinementStats_lock;  \/\/ Lock protecting detached refinement stats\n+extern StaticLock<PaddedMutex>   MarkStackFreeList_lock;          \/\/ Protects access to the global mark stack free list.\n+extern StaticLock<PaddedMutex>   MarkStackChunkList_lock;         \/\/ Protects access to the global mark stack chunk list.\n+extern StaticLock<PaddedMutex>   MonitoringSupport_lock;          \/\/ Protects updates to the serviceability memory pools.\n+extern StaticLock<PaddedMonitor> ConcurrentGCBreakpoints_lock;    \/\/ Protects concurrent GC breakpoint management\n+extern StaticLock<PaddedMutex>   Compile_lock;                    \/\/ a lock held when Compilation is updating code (used to block CodeCache traversal, CHA updates, etc)\n+extern StaticLock<PaddedMonitor> MethodCompileQueue_lock;         \/\/ a lock held when method compilations are enqueued, dequeued\n+extern StaticLock<PaddedMonitor> CompileThread_lock;              \/\/ a lock held by compile threads during compilation system initialization\n+extern StaticLock<PaddedMonitor> Compilation_lock;                \/\/ a lock used to pause compilation\n+extern StaticLock<PaddedMutex>   CompileTaskAlloc_lock;           \/\/ a lock held when CompileTasks are allocated\n+extern StaticLock<PaddedMutex>   CompileStatistics_lock;          \/\/ a lock held when updating compilation statistics\n+extern StaticLock<PaddedMutex>   DirectivesStack_lock;            \/\/ a lock held when mutating the dirstack and ref counting directives\n+extern StaticLock<PaddedMutex>   MultiArray_lock;                 \/\/ a lock used to guard allocation of multi-dim arrays\n+extern StaticLock<PaddedMonitor> Terminator_lock;                 \/\/ a lock used to guard termination of the vm\n+extern StaticLock<PaddedMonitor> InitCompleted_lock;              \/\/ a lock used to signal threads waiting on init completed\n+extern StaticLock<PaddedMonitor> BeforeExit_lock;                 \/\/ a lock used to guard cleanups and shutdown hooks\n+extern StaticLock<PaddedMonitor> Notify_lock;                     \/\/ a lock used to synchronize the start-up of the vm\n+extern StaticLock<PaddedMutex>   ExceptionCache_lock;             \/\/ a lock used to synchronize exception cache updates\n@@ -93,1 +151,1 @@\n-extern Mutex*   FullGCALot_lock;                 \/\/ a lock to make FullGCALot MT safe\n+extern StaticLock<PaddedMutex>   FullGCALot_lock;                 \/\/ a lock to make FullGCALot MT safe\n@@ -96,23 +154,23 @@\n-extern Mutex*   RawMonitor_lock;\n-extern Mutex*   PerfDataMemAlloc_lock;           \/\/ a lock on the allocator for PerfData memory for performance data\n-extern Mutex*   PerfDataManager_lock;            \/\/ a long on access to PerfDataManager resources\n-extern Mutex*   OopMapCacheAlloc_lock;           \/\/ protects allocation of oop_map caches\n-\n-extern Mutex*   FreeList_lock;                   \/\/ protects the free region list during safepoints\n-extern Mutex*   OldSets_lock;                    \/\/ protects the old region sets\n-extern Mutex*   Uncommit_lock;                   \/\/ protects the uncommit list when not at safepoints\n-extern Monitor* RootRegionScan_lock;             \/\/ used to notify that the CM threads have finished scanning the IM snapshot regions\n-\n-extern Mutex*   Management_lock;                 \/\/ a lock used to serialize JVM management\n-extern Monitor* MonitorDeflation_lock;           \/\/ a lock used for monitor deflation thread operation\n-extern Monitor* Service_lock;                    \/\/ a lock used for service thread operation\n-extern Monitor* Notification_lock;               \/\/ a lock used for notification thread operation\n-extern Monitor* PeriodicTask_lock;               \/\/ protects the periodic task structure\n-extern Monitor* RedefineClasses_lock;            \/\/ locks classes from parallel redefinition\n-extern Mutex*   Verify_lock;                     \/\/ synchronize initialization of verify library\n-extern Monitor* Zip_lock;                        \/\/ synchronize initialization of zip library\n-extern Monitor* ThreadsSMRDelete_lock;           \/\/ Used by ThreadsSMRSupport to take pressure off the Threads_lock\n-extern Mutex*   ThreadIdTableCreate_lock;        \/\/ Used by ThreadIdTable to lazily create the thread id table\n-extern Mutex*   SharedDecoder_lock;              \/\/ serializes access to the decoder during normal (not error reporting) use\n-extern Mutex*   DCmdFactory_lock;                \/\/ serialize access to DCmdFactory information\n-extern Mutex*   NMTQuery_lock;                   \/\/ serialize NMT Dcmd queries\n+extern StaticLock<PaddedMutex>   RawMonitor_lock;\n+extern StaticLock<PaddedMutex>   PerfDataMemAlloc_lock;           \/\/ a lock on the allocator for PerfData memory for performance data\n+extern StaticLock<PaddedMutex>   PerfDataManager_lock;            \/\/ a long on access to PerfDataManager resources\n+extern StaticLock<PaddedMutex>   OopMapCacheAlloc_lock;           \/\/ protects allocation of oop_map caches\n+\n+extern StaticLock<PaddedMutex>   FreeList_lock;                   \/\/ protects the free region list during safepoints\n+extern StaticLock<PaddedMutex>   OldSets_lock;                    \/\/ protects the old region sets\n+extern StaticLock<PaddedMutex>   Uncommit_lock;                   \/\/ protects the uncommit list when not at safepoints\n+extern StaticLock<PaddedMonitor> RootRegionScan_lock;             \/\/ used to notify that the CM threads have finished scanning the IM snapshot regions\n+\n+extern StaticLock<PaddedMutex>   Management_lock;                 \/\/ a lock used to serialize JVM management\n+extern StaticLock<PaddedMonitor> MonitorDeflation_lock;           \/\/ a lock used for monitor deflation thread operation\n+extern StaticLock<PaddedMonitor> Service_lock;                    \/\/ a lock used for service thread operation\n+extern StaticLock<PaddedMonitor> Notification_lock;               \/\/ a lock used for notification thread operation\n+extern StaticLock<PaddedMonitor> PeriodicTask_lock;               \/\/ protects the periodic task structure\n+extern StaticLock<PaddedMonitor> RedefineClasses_lock;            \/\/ locks classes from parallel redefinition\n+extern StaticLock<PaddedMutex>   Verify_lock;                     \/\/ synchronize initialization of verify library\n+extern StaticLock<PaddedMonitor> Zip_lock;                        \/\/ synchronize initialization of zip library\n+extern StaticLock<PaddedMonitor> ThreadsSMRDelete_lock;           \/\/ Used by ThreadsSMRSupport to take pressure off the Threads_lock\n+extern StaticLock<PaddedMutex>   ThreadIdTableCreate_lock;        \/\/ Used by ThreadIdTable to lazily create the thread id table\n+extern StaticLock<PaddedMutex>   SharedDecoder_lock;              \/\/ serializes access to the decoder during normal (not error reporting) use\n+extern StaticLock<PaddedMutex>   DCmdFactory_lock;                \/\/ serialize access to DCmdFactory information\n+extern StaticLock<PaddedMutex>   NMTQuery_lock;                   \/\/ serialize NMT Dcmd queries\n@@ -121,1 +179,1 @@\n-extern Mutex*   CDSClassFileStream_lock;         \/\/ FileMapInfo::open_stream_for_jvmti\n+extern StaticLock<PaddedMutex>   CDSClassFileStream_lock;         \/\/ FileMapInfo::open_stream_for_jvmti\n@@ -123,7 +181,7 @@\n-extern Mutex*   DumpTimeTable_lock;              \/\/ SystemDictionaryShared::_dumptime_table\n-extern Mutex*   CDSLambda_lock;                  \/\/ SystemDictionaryShared::get_shared_lambda_proxy_class\n-extern Mutex*   DumpRegion_lock;                 \/\/ Symbol::operator new(size_t sz, int len)\n-extern Mutex*   ClassListFile_lock;              \/\/ ClassListWriter()\n-extern Mutex*   UnregisteredClassesTable_lock;   \/\/ UnregisteredClassesTableTable\n-extern Mutex*   LambdaFormInvokers_lock;         \/\/ Protecting LambdaFormInvokers::_lambdaform_lines\n-extern Mutex*   ScratchObjects_lock;             \/\/ Protecting _scratch_xxx_table in heapShared.cpp\n+extern StaticLock<PaddedMutex>   DumpTimeTable_lock;              \/\/ SystemDictionaryShared::_dumptime_table\n+extern StaticLock<PaddedMutex>   CDSLambda_lock;                  \/\/ SystemDictionaryShared::get_shared_lambda_proxy_class\n+extern StaticLock<PaddedMutex>   DumpRegion_lock;                 \/\/ Symbol::operator new(size_t sz, int len)\n+extern StaticLock<PaddedMutex>   ClassListFile_lock;              \/\/ ClassListWriter()\n+extern StaticLock<PaddedMutex>   UnregisteredClassesTable_lock;   \/\/ UnregisteredClassesTableTable\n+extern StaticLock<PaddedMutex>   LambdaFormInvokers_lock;         \/\/ Protecting LambdaFormInvokers::_lambdaform_lines\n+extern StaticLock<PaddedMutex>   ScratchObjects_lock;             \/\/ Protecting _scratch_xxx_table in heapShared.cpp\n@@ -132,4 +190,4 @@\n-extern Mutex*   JfrStacktrace_lock;              \/\/ used to guard access to the JFR stacktrace table\n-extern Monitor* JfrMsg_lock;                     \/\/ protects JFR messaging\n-extern Mutex*   JfrBuffer_lock;                  \/\/ protects JFR buffer operations\n-extern Monitor* JfrThreadSampler_lock;           \/\/ used to suspend\/resume JFR thread sampler\n+extern StaticLock<PaddedMutex>   JfrStacktrace_lock;              \/\/ used to guard access to the JFR stacktrace table\n+extern StaticLock<PaddedMonitor> JfrMsg_lock;                     \/\/ protects JFR messaging\n+extern StaticLock<PaddedMutex>   JfrBuffer_lock;                  \/\/ protects JFR buffer operations\n+extern StaticLock<PaddedMonitor> JfrThreadSampler_lock;           \/\/ used to suspend\/resume JFR thread sampler\n@@ -139,1 +197,1 @@\n-extern Mutex*   UnsafeJlong_lock;                \/\/ provides Unsafe atomic updates to jlongs on platforms that don't support cx8\n+extern StaticLock<PaddedMutex>   UnsafeJlong_lock;                \/\/ provides Unsafe atomic updates to jlongs on platforms that don't support cx8\n@@ -142,3 +200,3 @@\n-extern Mutex*   Metaspace_lock;                  \/\/ protects Metaspace virtualspace and chunk expansions\n-extern Monitor* MetaspaceCritical_lock;          \/\/ synchronizes failed metaspace allocations that risk throwing metaspace OOM\n-extern Mutex*   ClassLoaderDataGraph_lock;       \/\/ protects CLDG list, needed for concurrent unloading\n+extern StaticLock<PaddedMutex>   Metaspace_lock;                  \/\/ protects Metaspace virtualspace and chunk expansions\n+extern StaticLock<PaddedMonitor> MetaspaceCritical_lock;          \/\/ synchronizes failed metaspace allocations that risk throwing metaspace OOM\n+extern StaticLock<PaddedMutex>   ClassLoaderDataGraph_lock;       \/\/ protects CLDG list, needed for concurrent unloading\n@@ -147,1 +205,1 @@\n-extern Mutex*   CodeHeapStateAnalytics_lock;     \/\/ lock print functions against concurrent analyze functions.\n+extern StaticLock<PaddedMutex>   CodeHeapStateAnalytics_lock;     \/\/ lock print functions against concurrent analyze functions.\n@@ -150,1 +208,1 @@\n-extern Monitor* ContinuationRelativize_lock;\n+extern StaticLock<PaddedMonitor> ContinuationRelativize_lock;\n@@ -153,2 +211,2 @@\n-extern Monitor* JVMCI_lock;                      \/\/ protects global JVMCI critical sections\n-extern Monitor* JVMCIRuntime_lock;               \/\/ protects critical sections for a specific JVMCIRuntime object\n+extern StaticLock<PaddedMonitor> JVMCI_lock;                      \/\/ protects global JVMCI critical sections\n+extern StaticLock<PaddedMonitor> JVMCIRuntime_lock;               \/\/ protects critical sections for a specific JVMCIRuntime object\n@@ -157,1 +215,1 @@\n-extern Mutex*   Bootclasspath_lock;\n+extern StaticLock<PaddedMutex>   Bootclasspath_lock;\n@@ -159,1 +217,1 @@\n-extern Mutex* tty_lock;                          \/\/ lock to synchronize output.\n+extern StaticLock<PaddedMutex> tty_lock;                          \/\/ lock to synchronize output.\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":157,"deletions":99,"binary":false,"changes":256,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  MutexLocker ml(PeriodicTask_lock->owned_by_self() ? nullptr : PeriodicTask_lock);\n+  MutexLocker ml(PeriodicTask_lock->owned_by_self() ? nullptr : PeriodicTask_lock.get());\n@@ -111,1 +111,1 @@\n-  MutexLocker ml(PeriodicTask_lock->owned_by_self() ? nullptr : PeriodicTask_lock);\n+  MutexLocker ml(PeriodicTask_lock->owned_by_self() ? nullptr : PeriodicTask_lock.get());\n","filename":"src\/hotspot\/share\/runtime\/task.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  MutexLocker ml(Threads_lock->owned_by_self() ? nullptr : Threads_lock);\n+  MutexLocker ml(Threads_lock->owned_by_self() ? nullptr : Threads_lock.get());\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1352,0 +1352,10 @@\n+template <typename T>\n+constexpr T&& forward(std::remove_reference_t<T>& x) noexcept {\n+  return static_cast<T&&>(x);\n+}\n+\n+template <typename T>\n+constexpr T&& forward(std::remove_reference_t<T>&& x) noexcept {\n+  return static_cast<T&&>(x);\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -436,1 +437,0 @@\n-extern Mutex* tty_lock;\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}