{"files":[{"patch":"@@ -2464,36 +2464,0 @@\n-\/\/ reverse bytes in halfword in lower 16 bits and zero-extend\n-\/\/ Rd[15:0] = Rs[7:0] Rs[15:8] (zero-extend to 64 bits)\n-void MacroAssembler::revb_h_h_u(Register Rd, Register Rs, Register tmp) {\n-  if (UseZbb) {\n-    rev8(Rd, Rs);\n-    srli(Rd, Rd, 48);\n-    return;\n-  }\n-  assert_different_registers(Rs, tmp);\n-  assert_different_registers(Rd, tmp);\n-  srli(tmp, Rs, 8);\n-  andi(tmp, tmp, 0xFF);\n-  andi(Rd, Rs, 0xFF);\n-  slli(Rd, Rd, 8);\n-  orr(Rd, Rd, tmp);\n-}\n-\n-\/\/ reverse bytes in halfwords in lower 32 bits and zero-extend\n-\/\/ Rd[31:0] = Rs[23:16] Rs[31:24] Rs[7:0] Rs[15:8] (zero-extend to 64 bits)\n-void MacroAssembler::revb_h_w_u(Register Rd, Register Rs, Register tmp1, Register tmp2) {\n-  if (UseZbb) {\n-    rev8(Rd, Rs);\n-    rori(Rd, Rd, 32);\n-    roriw(Rd, Rd, 16);\n-    zero_extend(Rd, Rd, 32);\n-    return;\n-  }\n-  assert_different_registers(Rs, tmp1, tmp2);\n-  assert_different_registers(Rd, tmp1, tmp2);\n-  srli(tmp2, Rs, 16);\n-  revb_h_h_u(tmp2, tmp2, tmp1);\n-  revb_h_h_u(Rd, Rs, tmp1);\n-  slli(tmp2, tmp2, 16);\n-  orr(Rd, Rd, tmp2);\n-}\n-\n@@ -2502,1 +2466,1 @@\n-void MacroAssembler::revb_w(Register Rd, Register Rs, Register tmp1, Register tmp2) {\n+void MacroAssembler::revbw(Register Rd, Register Rs, Register tmp1, Register tmp2) {\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":1,"deletions":37,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -915,5 +915,3 @@\n-  \/\/ revb\n-  void revb_h_h_u(Register Rd, Register Rs, Register tmp = t0);                         \/\/ reverse bytes in halfword in lower 16 bits, zero-extend\n-  void revb_h_w_u(Register Rd, Register Rs, Register tmp1 = t0, Register tmp2 = t1);    \/\/ reverse bytes in halfwords in lower 32 bits, zero-extend\n-  void revb_w(Register Rd, Register Rs, Register tmp1 = t0, Register tmp2= t1);         \/\/ reverse bytes in lower word, sign-extend\n-  void revb(Register Rd, Register Rs, Register tmp1 = t0, Register tmp2 = t1);          \/\/ reverse bytes in doubleword\n+  \/\/ reverse bytes\n+  void revbw(Register Rd, Register Rs, Register tmp1 = t0, Register tmp2= t1);  \/\/ reverse bytes in lower word, sign-extend\n+  void revb(Register Rd, Register Rs, Register tmp1 = t0, Register tmp2 = t1);  \/\/ reverse bytes in doubleword\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -661,2 +661,6 @@\n-  __ lhu(reg, at_bcp(2));\n-  __ revb_h_h_u(reg, reg); \/\/ reverse bytes in half-word and zero-extend\n+  assert_different_registers(reg, t1);\n+  \/\/ Convert the 16-bit value into native byte-ordering and zero-extend\n+  __ lbu(reg, at_bcp(2));\n+  __ lbu(t1, at_bcp(3));\n+  __ slli(reg, reg, 8);\n+  __ orr(reg, reg, t1);\n@@ -674,2 +678,6 @@\n-  __ lhu(x11, at_bcp(2));\n-  __ revb_h_h_u(x11, x11); \/\/ reverse bytes in half-word and zero-extend\n+  \/\/ Convert the 16-bit value into native byte-ordering and zero-extend\n+  __ lbu(x11, at_bcp(2));\n+  __ lbu(t1, at_bcp(3));\n+  __ slli(x11, x11, 8);\n+  __ orr(x11, x11, t1);\n+\n@@ -689,2 +697,6 @@\n-  __ lhu(x11, at_bcp(2));\n-  __ revb_h_h_u(x11, x11); \/\/ reverse bytes in half-word and zero-extend\n+  \/\/ Convert the 16-bit value into native byte-ordering and zero-extend\n+  __ lbu(x11, at_bcp(2));\n+  __ lbu(t1, at_bcp(3));\n+  __ slli(x11, x11, 8);\n+  __ orr(x11, x11, t1);\n+\n@@ -1474,6 +1486,8 @@\n-  __ lwu(x11, at_bcp(2)); \/\/ get constant and index\n-  __ revb_h_w_u(x11, x11); \/\/ reverse bytes in half-word (32bit) and zero-extend\n-  __ zero_extend(x12, x11, 16);\n-  __ neg(x12, x12);\n-  __ slli(x11, x11, 32);\n-  __ srai(x11, x11, 48);\n+  \/\/ get constant\n+  \/\/ Convert the 16-bit value into native byte-ordering and sign-extend\n+  __ lb(x11, at_bcp(4));\n+  __ lbu(t1, at_bcp(5));\n+  __ slli(x11, x11, 8);\n+  __ orr(x11, x11, t1);\n+\n+  locals_index_wide(x12);\n@@ -1628,1 +1642,1 @@\n-    __ add(x12, x12, t1);\n+    __ orr(x12, x12, t1);\n@@ -1631,1 +1645,1 @@\n-    __ revb_w(x12, x12);\n+    __ revbw(x12, x12);\n@@ -1896,2 +1910,2 @@\n-  __ revb_w(x12, x12);\n-  __ revb_w(x13, x13);\n+  __ revbw(x12, x12);\n+  __ revbw(x13, x13);\n@@ -1908,1 +1922,1 @@\n-  __ revb_w(x13, x13);\n+  __ revbw(x13, x13);\n@@ -1928,1 +1942,1 @@\n-  __ revb_w(x10, x10);\n+  __ revbw(x10, x10);\n@@ -1939,1 +1953,1 @@\n-  __ revb_w(x11, x11);\n+  __ revbw(x11, x11);\n@@ -1960,1 +1974,1 @@\n-  __ revb_w(x13, x13);\n+  __ revbw(x13, x13);\n@@ -2015,1 +2029,1 @@\n-  __ revb_w(j, j);\n+  __ revbw(j, j);\n@@ -2033,1 +2047,1 @@\n-    __ revb_w(temp, temp);\n+    __ revbw(temp, temp);\n@@ -2056,1 +2070,1 @@\n-  __ revb_w(temp, temp);\n+  __ revbw(temp, temp);\n@@ -2063,1 +2077,1 @@\n-  __ revb_w(j, j);\n+  __ revbw(j, j);\n@@ -2076,1 +2090,1 @@\n-  __ revb_w(j, j);\n+  __ revbw(j, j);\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":39,"deletions":25,"binary":false,"changes":64,"status":"modified"}]}