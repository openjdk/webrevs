{"files":[{"patch":"@@ -85,1 +85,1 @@\n-void MemPointerDecomposedFormParser::parse_sub_expression(const MemPointerSummand summand) {\n+void MemPointerDecomposedFormParser::parse_sub_expression(const MemPointerSummand& summand) {\n@@ -191,1 +191,1 @@\n-bool MemPointerDecomposedFormParser::is_safe_to_decompose_op(const int opc, const NoOverflowInt scale) const {\n+bool MemPointerDecomposedFormParser::is_safe_to_decompose_op(const int opc, const NoOverflowInt& scale) const {\n","filename":"src\/hotspot\/share\/opto\/mempointer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -390,2 +390,0 @@\n-  MemPointerAliasing() : MemPointerAliasing(Unknown, 0) {}\n-\n@@ -393,1 +391,1 @@\n-    return MemPointerAliasing();\n+    return MemPointerAliasing(Unknown, 0);\n@@ -430,1 +428,1 @@\n-  MemPointerSummand(Node* variable, const NoOverflowInt scale) :\n+  MemPointerSummand(Node* variable, const NoOverflowInt& scale) :\n@@ -479,2 +477,4 @@\n-  \/\/ We limit the number of summands to 10. Usually, a pointer contains a base pointer\n-  \/\/ (e.g. array pointer or null for native memory) and a few variables.\n+  \/\/ We limit the number of summands to 10. This is just a best guess, and not at this\n+  \/\/ point supported by evidence. But I think it is reasonable: usually, a pointer\n+  \/\/ contains a base pointer (e.g. array pointer or null for native memory) and a few\n+  \/\/ variables. It should be rare that we have more than 9 variables.\n@@ -498,1 +498,1 @@\n-  MemPointerDecomposedForm(Node* pointer, const GrowableArray<MemPointerSummand>& summands, const NoOverflowInt con)\n+  MemPointerDecomposedForm(Node* pointer, const GrowableArray<MemPointerSummand>& summands, const NoOverflowInt& con)\n@@ -511,1 +511,1 @@\n-  static MemPointerDecomposedForm make(Node* pointer, const GrowableArray<MemPointerSummand>& summands, const NoOverflowInt con) {\n+  static MemPointerDecomposedForm make(Node* pointer, const GrowableArray<MemPointerSummand>& summands, const NoOverflowInt& con) {\n@@ -570,1 +570,1 @@\n-  void parse_sub_expression(const MemPointerSummand summand);\n+  void parse_sub_expression(const MemPointerSummand& summand);\n@@ -572,1 +572,1 @@\n-  bool is_safe_to_decompose_op(const int opc, const NoOverflowInt scale) const;\n+  bool is_safe_to_decompose_op(const int opc, const NoOverflowInt& scale) const;\n","filename":"src\/hotspot\/share\/opto\/mempointer.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  friend NoOverflowInt operator+(const NoOverflowInt a, const NoOverflowInt b) {\n+  friend NoOverflowInt operator+(const NoOverflowInt& a, const NoOverflowInt& b) {\n@@ -62,1 +62,1 @@\n-  friend NoOverflowInt operator-(const NoOverflowInt a, const NoOverflowInt b) {\n+  friend NoOverflowInt operator-(const NoOverflowInt& a, const NoOverflowInt& b) {\n@@ -68,1 +68,1 @@\n-  friend NoOverflowInt operator*(const NoOverflowInt a, const NoOverflowInt b) {\n+  friend NoOverflowInt operator*(const NoOverflowInt& a, const NoOverflowInt& b) {\n@@ -74,1 +74,1 @@\n-  friend NoOverflowInt operator<<(const NoOverflowInt a, const NoOverflowInt b) {\n+  friend NoOverflowInt operator<<(const NoOverflowInt& a, const NoOverflowInt& b) {\n@@ -82,1 +82,1 @@\n-  friend bool operator==(const NoOverflowInt a, const NoOverflowInt b) {\n+  friend bool operator==(const NoOverflowInt& a, const NoOverflowInt& b) {\n@@ -89,1 +89,1 @@\n-    if (is_NaN()) { return make_NaN(); }\n+    if (is_NaN()) { return *this; }\n","filename":"src\/hotspot\/share\/opto\/noOverflowInt.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}