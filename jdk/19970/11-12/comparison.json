{"files":[{"patch":"@@ -44,0 +44,1 @@\n+    \/\/ Bail out if the graph is too complex.\n@@ -51,2 +52,3 @@\n-  \/\/ Sort summands by variable->_idx\n-  _summands.sort(MemPointerSummand::cmp_for_sort);\n+  \/\/ Sorting by variable idx means that all summands with the same variable are consecutive.\n+  \/\/ This simplifies the combining of summands with the same variable below.\n+  _summands.sort(MemPointerSummand::cmp_by_variable_idx);\n","filename":"src\/hotspot\/share\/opto\/mempointer.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -225,9 +225,14 @@\n-\/\/  Definition: Safe decomposition (from some mp_i to mp_{i+1})\n-\/\/    We decompose summand in:\n-\/\/      mp_i     = con + summand                     + SUM(other_summands)\n-\/\/    Resulting in:      +-------------------------+\n-\/\/      mp_{i+1} = con + dec_con + SUM(dec_summands) + SUM(other_summands)\n-\/\/               = new_con + SUM(new_summands)\n-\/\/\n-\/\/    We call a decomposition safe if either:\n-\/\/      SAFE1) No matter the values of the summand variables:\n+\/\/ Definition: Safe decomposition\n+\/\/   Trivial decomposition:\n+\/\/     (SAFE0) The trivial decomposition from p to mp_0 = 0 + 1 * p is always safe.\n+\/\/\n+\/\/   Non-trivial decomposition:\n+\/\/     We decompose summand in:\n+\/\/       mp_i     = con + summand                     + SUM(other_summands)\n+\/\/     Resulting in:      +-------------------------+\n+\/\/       mp_{i+1} = con + dec_con + SUM(dec_summands) + SUM(other_summands)\n+\/\/                = new_con + SUM(new_summands)\n+\/\/   where mp_i means that the original pointer p was decomposed i times.\n+\/\/\n+\/\/   We call a non-trivial decomposition safe if either:\n+\/\/     (SAFE1) No matter the values of the summand variables:\n@@ -236,1 +241,1 @@\n-\/\/      SAFE2) The pointer is on an array with a known array_element_size_in_bytes,\n+\/\/     (SAFE2) The pointer is on an array with a known array_element_size_in_bytes,\n@@ -244,5 +249,1 @@\n-\/\/    Note: MemPointerDecomposedFormParser::is_safe_to_decompose_op checks that all\n-\/\/          decompositions we apply are safe.\n-\/\/\n-\/\/\n-\/\/  MemPointer Lemma:\n+\/\/ MemPointer Lemma:\n@@ -251,3 +252,5 @@\n-\/\/      S1) Both p1 and p2 are within the bounds of the same memory object.\n-\/\/      S2) The constants do not differ too much: abs(mp1.con - mp2.con) < 2^31\n-\/\/      S3) All summands of mp1 and mp2 are identical.\n+\/\/      (S0) mp1 and mp2 are constructed only with safe decompositions (SAFE0, SAFE1, SAFE2)\n+\/\/           from p1 and p2, respectively.\n+\/\/      (S1) Both p1 and p2 are within the bounds of the same memory object.\n+\/\/      (S2) The constants do not differ too much: abs(mp1.con - mp2.con) < 2^31.\n+\/\/      (S3) All summands of mp1 and mp2 are identical (i.e. only the constants are possibly different).\n@@ -263,0 +266,4 @@\n+\/\/    Note: MemPointerDecomposedFormParser::is_safe_to_decompose_op checks that all\n+\/\/          decompositions we apply are safe.\n+\/\/\n+\/\/\n@@ -264,1 +271,6 @@\n-\/\/    Case 0: no decompositions were used:\n+\/\/    Assume (S0-S3) and show that\n+\/\/      p1 - p2 = mp1 - mp2\n+\/\/\n+\/\/    We make a case distinction over the types of decompositions used in the construction of mp1 and mp2.\n+\/\/\n+\/\/    Trivial Case: Only trivial (SAFE0) decompositions were used:\n@@ -270,1 +282,4 @@\n-\/\/    Case 1: only decompositions of type (SAFE1) were used:\n+\/\/    Unsafe Case: We apply at least one unsafe decomposition:\n+\/\/      This is a contradiction to (S0) and we are done.\n+\/\/\n+\/\/    Case 1: Only decomposition of type (SAFE0) and (SAFE1) are used:\n@@ -272,1 +287,1 @@\n-\/\/      the trivial decomposition:\n+\/\/      the trivial decomposition (SAFE0):\n@@ -274,1 +289,1 @@\n-\/\/      and then for the i'th decomposition, we know that\n+\/\/      Then for the i-th non-trivial decomposition (SAFE1) we know that\n@@ -276,1 +291,1 @@\n-\/\/      and hence, if mp1 was decomposed with n decompositions from p1:\n+\/\/      and hence, after the n-th non-trivial decomposition from p1:\n@@ -278,1 +293,1 @@\n-\/\/      The analogue can be proven for p2 and mp2:\n+\/\/      Analogously, we can prove:\n@@ -286,8 +301,7 @@\n-\/\/    Case 2: decompositions of type (SAFE2) were used, and possibly also decompositions of\n-\/\/            type (SAFE1).\n-\/\/       Given we have (SAFE2) decompositions, we know that we are operating on an array of\n-\/\/       known array_element_size_in_bytes. We can weaken the guarantees from (SAFE1)\n-\/\/       decompositions to the same guarantee as (SAFE2) decompositions, hence all applied\n-\/\/       decompositions satisfy:\n-\/\/         mp1_i = mp1_{i+1} + x1_i * array_element_size_in_bytes * 2^32\n-\/\/       where x_i = 0 for (SAFE1) decompositions.\n+\/\/    Case 2: At least one decomposition of type (SAFE2) and no unsafe decomposition is used.\n+\/\/      Given we have (SAFE2) decompositions, we know that we are operating on an array of\n+\/\/      known array_element_size_in_bytes. We can weaken the guarantees from (SAFE1)\n+\/\/      decompositions to the same guarantee as (SAFE2) decompositions. Hence all applied\n+\/\/      non-trivial decompositions satisfy:\n+\/\/        mp1_i = mp1_{i+1} + x1_i * array_element_size_in_bytes * 2^32\n+\/\/      where x1_i = 0 for (SAFE1) decompositions.\n@@ -296,1 +310,1 @@\n-\/\/      the trivial decompoisition:\n+\/\/      the trivial decomposition (SAFE0):\n@@ -298,1 +312,1 @@\n-\/\/      and then for the i'th decomposition, we know that\n+\/\/      Then for the i-th non-trivial decomposition (SAFE1) or (SAFE2), we know that\n@@ -300,1 +314,1 @@\n-\/\/      and hence, if mp1 was decomposed with n decompositions from p1:\n+\/\/      and hence, if mp1 was decomposed with n non-trivial decompositions (SAFE1) or (SAFE2) from p1:\n@@ -302,2 +316,3 @@\n-\/\/      where x1 = sum(x1_i).\n-\/\/      The analogue can be proven for p2 and mp2:\n+\/\/      where\n+\/\/        x1 = SUM(x1_i)\n+\/\/      Analogously, we can prove:\n@@ -306,1 +321,1 @@\n-\/\/      And hence, there must be an x, such that:\n+\/\/      And hence, with x = x1 - x2 we have:\n@@ -308,2 +323,0 @@\n-\/\/      where\n-\/\/        x = x1 - x2\n@@ -319,1 +332,3 @@\n-\/\/                                                               -- apply S2 and S3 --\n+\/\/                                                                    -- apply (S3)  --\n+\/\/                     =  array_element_size_in_bytes * 2^32          - abs(mp1.con - mp2.con)\n+\/\/                                                                        -- apply (S2)  --\n@@ -326,5 +341,3 @@\n-\/\/        Thus we get a contradiction: p1 and p2 have a distance greater than the array\n-\/\/        size, and hence at least one of the two must be out of bounds. But condition S1\n-\/\/        of the MemPointer Lemma requires that both p1 and p2 are both in bounds of the\n-\/\/        same memory object.\n-\n+\/\/        This shows that p1 and p2 have a distance greater than the array size, and hence at least one of the two\n+\/\/        pointers must be out of bounds. This contradicts our assumption (S1) and we are done.\n+\/\/\n@@ -427,1 +440,1 @@\n-  static int cmp_for_sort(MemPointerSummand* p1, MemPointerSummand* p2) {\n+  static int cmp_by_variable_idx(MemPointerSummand* p1, MemPointerSummand* p2) {\n","filename":"src\/hotspot\/share\/opto\/mempointer.hpp","additions":60,"deletions":47,"binary":false,"changes":107,"status":"modified"}]}