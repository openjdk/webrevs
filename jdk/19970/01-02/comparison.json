{"files":[{"patch":"@@ -44,3 +44,3 @@\n-@Warmup(iterations = 3, time = 3)\n-@Measurement(iterations = 3, time = 3)\n-@Fork(value = 3, jvmArgsAppend = {\n+@Warmup(iterations = 2, time = 1)\n+@Measurement(iterations = 3, time = 1)\n+@Fork(value = 1, jvmArgsAppend = {\n@@ -49,1 +49,1 @@\n-@State(Scope.Benchmark)\n+@State(Scope.Thread)\n@@ -69,0 +69,1 @@\n+    public static long native_adr = UNSAFE.allocateMemory(RANGE * 8);\n@@ -694,0 +695,55 @@\n+\n+    @Benchmark\n+    public void store_unsafe_B8_L_offs_noalloc_direct() {\n+        UNSAFE.putByte(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 0, (byte)(vL >> 0 ));\n+        UNSAFE.putByte(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 1, (byte)(vL >> 8 ));\n+        UNSAFE.putByte(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 2, (byte)(vL >> 16));\n+        UNSAFE.putByte(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 3, (byte)(vL >> 24));\n+        UNSAFE.putByte(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 4, (byte)(vL >> 32));\n+        UNSAFE.putByte(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 5, (byte)(vL >> 40));\n+        UNSAFE.putByte(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 6, (byte)(vL >> 48));\n+        UNSAFE.putByte(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 7, (byte)(vL >> 56));\n+    }\n+\n+    @Benchmark\n+    public void store_unsafe_B8_L_offs_noalloc_unsafe() {\n+        UNSAFE.putLongUnaligned(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 0, vL);\n+    }\n+\n+    @Benchmark\n+    public void store_unsafe_C4_L_offs_noalloc_direct() {\n+        UNSAFE.putChar(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 0, (char)(vL >> 0 ));\n+        UNSAFE.putChar(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 2, (char)(vL >> 16));\n+        UNSAFE.putChar(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 4, (char)(vL >> 32));\n+        UNSAFE.putChar(aB, Unsafe.ARRAY_BYTE_BASE_OFFSET + offset + 6, (char)(vL >> 48));\n+    }\n+\n+    @Benchmark\n+    public void store_unsafe_native_B8_L_offs_noalloc_direct() {\n+        UNSAFE.putByte(null, native_adr + offset + 0, (byte)(vL >> 0 ));\n+        UNSAFE.putByte(null, native_adr + offset + 1, (byte)(vL >> 8 ));\n+        UNSAFE.putByte(null, native_adr + offset + 2, (byte)(vL >> 16));\n+        UNSAFE.putByte(null, native_adr + offset + 3, (byte)(vL >> 24));\n+        UNSAFE.putByte(null, native_adr + offset + 4, (byte)(vL >> 32));\n+        UNSAFE.putByte(null, native_adr + offset + 5, (byte)(vL >> 40));\n+        UNSAFE.putByte(null, native_adr + offset + 6, (byte)(vL >> 48));\n+        UNSAFE.putByte(null, native_adr + offset + 7, (byte)(vL >> 56));\n+    }\n+\n+    @Benchmark\n+    public void store_unsafe_native_C4_L_offs_noalloc_direct() {\n+        UNSAFE.putChar(null, native_adr + offset + 0, (char)(vL >> 0 ));\n+        UNSAFE.putChar(null, native_adr + offset + 2, (char)(vL >> 16));\n+        UNSAFE.putChar(null, native_adr + offset + 4, (char)(vL >> 32));\n+        UNSAFE.putChar(null, native_adr + offset + 6, (char)(vL >> 48));\n+    }\n+\n+    @Benchmark\n+    public void store_unsafe_native_B8_L_offs_noalloc_unsafe() {\n+        UNSAFE.putLongUnaligned(null, native_adr + offset + 0, vL);\n+    }\n+\n+    @Fork(value = 1, jvmArgsPrepend = {\n+        \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:-MergeStores\"\n+    })\n+    public static class MergeStoresDisabled extends MergeStores {}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MergeStores.java","additions":60,"deletions":4,"binary":false,"changes":64,"status":"modified"}]}