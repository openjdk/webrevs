{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,5 +61,6 @@\n-        TRANSTYPES(6),\n-        TRANSPATTERNS(7),\n-        LOWER(8),\n-        UNLAMBDA(9),\n-        GENERATE(10);\n+        WARN(6),\n+        TRANSTYPES(7),\n+        TRANSPATTERNS(8),\n+        LOWER(9),\n+        UNLAMBDA(10),\n+        GENERATE(11);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/CompileStates.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -232,1 +232,0 @@\n-        new ThisEscapeAnalyzer(names, syms, types, rs, log, lint).analyzeTree(env);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,1 @@\n+import com.sun.tools.javac.util.Context;\n@@ -143,0 +144,5 @@\n+ *\n+ * <p><b>This is NOT part of any supported API.\n+ * If you write code that depends on this, you do so at your own risk.\n+ * This code and its internal interfaces are subject to change or\n+ * deletion without notice.<\/b>\n@@ -144,1 +150,5 @@\n-class ThisEscapeAnalyzer extends TreeScanner {\n+public class ThisEscapeAnalyzer extends TreeScanner {\n+\n+    protected static final Context.Key<ThisEscapeAnalyzer> contextKey = new Context.Key<>();\n+\n+\/\/ Other singletons we utilize\n@@ -214,1 +224,1 @@\n-\/\/ Constructor\n+\/\/ Access\n@@ -216,7 +226,16 @@\n-    ThisEscapeAnalyzer(Names names, Symtab syms, Types types, Resolve rs, Log log, Lint lint) {\n-        this.names = names;\n-        this.syms = syms;\n-        this.types = types;\n-        this.rs = rs;\n-        this.log = log;\n-        this.lint = lint;\n+    public static ThisEscapeAnalyzer instance(Context context) {\n+        ThisEscapeAnalyzer instance = context.get(contextKey);\n+        if (instance == null)\n+            instance = new ThisEscapeAnalyzer(context);\n+        return instance;\n+    }\n+\n+    @SuppressWarnings(\"this-escape\")\n+    protected ThisEscapeAnalyzer(Context context) {\n+        context.put(contextKey, this);\n+        names = Names.instance(context);\n+        log = Log.instance(context);\n+        syms = Symtab.instance(context);\n+        types = Types.instance(context);\n+        rs = Resolve.instance(context);\n+        lint = Lint.instance(context);\n@@ -230,0 +249,18 @@\n+        try {\n+            doAnalyzeTree(env);\n+        } finally {\n+            attrEnv = null;\n+            methodMap.clear();\n+            nonPublicOuters.clear();\n+            targetClass = null;\n+            warningList.clear();\n+            methodClass = null;\n+            callStack.clear();\n+            invocations.clear();\n+            pendingWarning = null;\n+            depth = -1;\n+            refs = null;\n+        }\n+    }\n+\n+    private void doAnalyzeTree(Env<AttrContext> env) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ThisEscapeAnalyzer.java","additions":47,"deletions":10,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1171,1 +1171,1 @@\n-            \"The current compile state [%s] of class %s is previous to FLOW\";\n+            \"The current compile state [%s] of class %s is previous to WARN\";\n@@ -1192,1 +1192,1 @@\n-         *  2) has a compile state which is previous to Flow state.\n+         *  2) has a compile state which is previous to WARN state.\n@@ -1200,1 +1200,1 @@\n-                CompileState.FLOW.isAfter(compileStates.get(myEnv))) {\n+                CompileState.WARN.isAfter(compileStates.get(myEnv))) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.tools.javac.comp;\n+\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Log;\n+\n+\/** This pass checks for various things to warn about.\n+ *  It runs after attribution and flow analysis.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class WarningAnalyzer {\n+\n+    protected static final Context.Key<WarningAnalyzer> contextKey = new Context.Key<>();\n+\n+    private final Log log;\n+    private final ThisEscapeAnalyzer thisEscapeAnalyzer;\n+\n+    public static WarningAnalyzer instance(Context context) {\n+        WarningAnalyzer instance = context.get(contextKey);\n+        if (instance == null)\n+            instance = new WarningAnalyzer(context);\n+        return instance;\n+    }\n+\n+    @SuppressWarnings(\"this-escape\")\n+    protected WarningAnalyzer(Context context) {\n+        context.put(contextKey, this);\n+        log = Log.instance(context);\n+        thisEscapeAnalyzer = ThisEscapeAnalyzer.instance(context);\n+    }\n+\n+    public void analyzeTree(Env<AttrContext> env) {\n+        thisEscapeAnalyzer.analyzeTree(env);\n+    }\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/WarningAnalyzer.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -309,0 +309,4 @@\n+    \/** The warning analyzer.\n+     *\/\n+    protected WarningAnalyzer warningAnalyzer;\n+\n@@ -422,0 +426,1 @@\n+        warningAnalyzer = WarningAnalyzer.instance(context);\n@@ -965,1 +970,1 @@\n-                    generate(desugar(flow(attribute(todo))));\n+                    generate(desugar(warn(flow(attribute(todo)))));\n@@ -971,1 +976,1 @@\n-                            generate(desugar(flow(attribute(q.remove()))));\n+                            generate(desugar(warn(flow(attribute(q.remove())))));\n@@ -978,1 +983,1 @@\n-                        generate(desugar(flow(attribute(todo.remove()))));\n+                        generate(desugar(warn(flow(attribute(todo.remove())))));\n@@ -1438,0 +1443,50 @@\n+    \/**\n+     * Check for various things to warn about.\n+     *\n+     * @return the list of attributed parse trees\n+     *\/\n+    public Queue<Env<AttrContext>> warn(Queue<Env<AttrContext>> envs) {\n+        ListBuffer<Env<AttrContext>> results = new ListBuffer<>();\n+        for (Env<AttrContext> env: envs) {\n+            warn(env, results);\n+        }\n+        return stopIfError(CompileState.WARN, results);\n+    }\n+\n+    \/**\n+     * Check for various things to warn about in an attributed parse tree.\n+     *\/\n+    public Queue<Env<AttrContext>> warn(Env<AttrContext> env) {\n+        ListBuffer<Env<AttrContext>> results = new ListBuffer<>();\n+        warn(env, results);\n+        return stopIfError(CompileState.WARN, results);\n+    }\n+\n+    \/**\n+     * Check for various things to warn about in an attributed parse tree.\n+     *\/\n+    protected void warn(Env<AttrContext> env, Queue<Env<AttrContext>> results) {\n+        if (compileStates.isDone(env, CompileState.WARN)) {\n+            results.add(env);\n+            return;\n+        }\n+\n+        if (shouldStop(CompileState.WARN))\n+            return;\n+\n+        if (verboseCompilePolicy)\n+            printNote(\"[warn \" + env.enclClass.sym + \"]\");\n+        JavaFileObject prev = log.useSource(\n+                                            env.enclClass.sym.sourcefile != null ?\n+                                            env.enclClass.sym.sourcefile :\n+                                            env.toplevel.sourcefile);\n+        try {\n+            warningAnalyzer.analyzeTree(env);\n+            compileStates.put(env, CompileState.WARN);\n+            results.add(env);\n+        }\n+        finally {\n+            log.useSource(prev);\n+        }\n+    }\n+\n@@ -1496,0 +1551,4 @@\n+        \/\/ Ensure the file has reached the WARN state\n+        if (!compileStates.isDone(env, CompileState.WARN))\n+            warn(env);\n+\n@@ -1579,2 +1638,2 @@\n-        if (!compileStates.isDone(dep, CompileState.FLOW))\n-            desugaredEnvs.put(dep, desugar(flow(attribute(dep))));\n+        if (!compileStates.isDone(dep, CompileState.WARN))\n+            desugaredEnvs.put(dep, desugar(warn(flow(attribute(dep)))));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":65,"deletions":6,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+[warn Y]\n@@ -5,0 +6,1 @@\n+[warn W]\n@@ -7,0 +9,1 @@\n+[warn Z]\n","filename":"test\/langtools\/tools\/javac\/6734819\/T6734819a.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+[warn A]\n@@ -5,0 +6,1 @@\n+[warn B]\n","filename":"test\/langtools\/tools\/javac\/6734819\/T6734819b.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+[warn Y]\n@@ -5,0 +6,1 @@\n+[warn W]\n","filename":"test\/langtools\/tools\/javac\/6734819\/T6734819c.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+[warn Explicit]\n","filename":"test\/langtools\/tools\/javac\/implicitCompile\/SkipAttrFlowGenForImplicits.out","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -7,0 +7,3 @@\n+[warn A]\n+[warn A1]\n+[warn A2]\n","filename":"test\/langtools\/tools\/javac\/policy\/test1\/byfile.ABD.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -7,0 +7,3 @@\n+[warn A]\n+[warn A1]\n+[warn A2]\n","filename":"test\/langtools\/tools\/javac\/policy\/test1\/byfile.ACD.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+[warn A]\n@@ -7,0 +8,1 @@\n+[warn A1]\n@@ -11,0 +13,1 @@\n+[warn A2]\n@@ -15,0 +18,1 @@\n+[warn B]\n","filename":"test\/langtools\/tools\/javac\/policy\/test1\/bytodo.ABD.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+[warn A]\n@@ -7,0 +8,1 @@\n+[warn A1]\n@@ -11,0 +13,1 @@\n+[warn A2]\n@@ -15,0 +18,1 @@\n+[warn C]\n","filename":"test\/langtools\/tools\/javac\/policy\/test1\/bytodo.ACD.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+[warn A]\n@@ -5,0 +6,1 @@\n+[warn B]\n","filename":"test\/langtools\/tools\/javac\/policy\/test2\/byfile.AB.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+[warn B]\n@@ -8,0 +9,1 @@\n+[warn A]\n","filename":"test\/langtools\/tools\/javac\/policy\/test2\/byfile.BA.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+[warn A]\n@@ -5,0 +6,1 @@\n+[warn B]\n","filename":"test\/langtools\/tools\/javac\/policy\/test2\/bytodo.AB.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+[warn B]\n@@ -8,0 +9,1 @@\n+[warn A]\n","filename":"test\/langtools\/tools\/javac\/policy\/test2\/bytodo.BA.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,1 +118,1 @@\n-                         \"-XDshould-stop.at=FLOW\", \"-Xlint:this-escape\")\n+                         \"-XDshould-stop.at=WARN\", \"-Xlint:this-escape\")\n","filename":"test\/langtools\/tools\/javac\/recovery\/AttrRecovery.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}