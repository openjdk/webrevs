[{"commit":{"message":"Merge master"},"files":[{"filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp"}],"sha":"865de5ba5139d63702a8d304eb6efb7a8eabe58f"},{"commit":{"message":"s390x Port"},"files":[{"filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp"},{"filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp"},{"filename":"src\/hotspot\/cpu\/s390\/c1_MacroAssembler_s390.cpp"},{"filename":"src\/hotspot\/cpu\/s390\/c1_MacroAssembler_s390.hpp"},{"filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp"}],"sha":"d462e56b221decbe4a853f046312b335fdbfce5b"},{"commit":{"message":"Update src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp\n\nCo-authored-by: Dean Long <17332032+dean-long@users.noreply.github.com>"},"files":[],"sha":"c3b7fa478e88a92795cb0f3a1d01fc718cff28ee"},{"commit":{"message":"Fix assert to only have a single !"},"files":[],"sha":"a35cdd846aa620eec0ac4058129881369c25ad4a"},{"commit":{"message":"Assert type is not interface"},"files":[],"sha":"306db7459b1316251e36d0eccc3035d11db44889"},{"commit":{"message":"Remove whitespace"},"files":[],"sha":"9376e9ec1fb7e27088cedf3cf70233e00ff1d009"},{"commit":{"message":"Expanded testing in TestNullArrayClone\n\n* Added byte[] and long[] tests.\n* Verified that the cloned array has the same contents.\n* Increase number of iterations reach tier 3 threshold."},"files":[],"sha":"f1f6edd03d11eac00bbc604cfcca1c74594d69be"},{"commit":{"message":"Update src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp\n\nCo-authored-by: Boris <42576543+bulasevich@users.noreply.github.com>"},"files":[],"sha":"595d1e99ff51bb611957ca8d715743d0d779e608"},{"commit":{"message":"Added test summary"},"files":[],"sha":"a05bf0f783783af00dd965a747140faa3b453e83"},{"commit":{"message":"Use vmIntrinsics instead of vmIntrinsicID"},"files":[],"sha":"2d8854d07a7d2dc2c7757da645fe42db5ad36805"},{"commit":{"message":"Fix formatting"},"files":[],"sha":"44757debc1604b50e6dbd8a0c2ba8661a1e79163"},{"commit":{"message":"Fix style and throw RuntimeException instead of System.exit"},"files":[],"sha":"ad6c51bfce2b3e2c52ed4647238bc67c45e16a67"},{"commit":{"message":"Peek receiver without pop\/push"},"files":[],"sha":"3af9cd9e2c8e01eb2b8664b6a14959b6d3108a80"},{"commit":{"message":"require receiver_klass to be loaded for now"},"files":[],"sha":"d9dd8587a19f321ea10ed3f422f55c8db5a130ff"},{"commit":{"message":"missing check for unloaded"},"files":[],"sha":"09f9adf42bbe7e9a40580348a99b5bfe08bcbf4b"},{"commit":{"message":"suggested cleanup"},"files":[],"sha":"36d624becb35b57070690d4ac67bf3f904a7db68"},{"commit":{"message":"Merge branch 'master' into topic.0131.c1-array-clone"},"files":[],"sha":"b7ff1e6c06d585cb7a8e444dfe7d819baa0cb9af"},{"commit":{"message":"Merge branch 'master' into topic.0131.c1-array-clone"},"files":[],"sha":"f72857991c94d7b80fa757ec78843708d5095fa0"},{"commit":{"message":"Reserve necessary frame map space for clone use cases"},"files":[],"sha":"163462055e84f04d7419d8256eb204bfc05fd6af"},{"commit":{"message":"8302850: C1 primitive array clone intrinsic in graph\n\n* Combine array length, new type array and arraycopy for clone in c1 graph.\n* Add OmitCheckFlags to skip arraycopy checks.\n* Instantiate ArrayCopyStub only if necessary.\n* Avoid zeroing newly created arrays for clone.\n* Add array null after c1 clone compilation test.\n* Pass force reexecute to intrinsic via value stack.\nThis is needed to be able to deoptimize correctly this intrinsic.\n* When new type array or array copy are used for the clone intrinsic,\ntheir state needs to be based on the state before for deoptimization\nto work as expected."},"files":[{"filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp"}],"sha":"b4db57cf1aa41eac64a65b3d3ecd82d156e157d6"},{"commit":{"message":"Revert \"8302850: Primitive array copy C1 intrinsic for aarch64 and x86\"\n\nThis reverts commit fe5d916724614391a685bbef58ea939c84197d07."},"files":[{"filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp"}],"sha":"b2ab675b0ca0daa58cfef90c6488c668b02c12ef"},{"commit":{"message":"8302850: Link code emit infos for null check and alloc array"},"files":[],"sha":"c9215e7dbf9a6982531be5a46549c47943fb39b4"},{"commit":{"message":"8302850: Null check array before getting its length\n\n* Added a jtreg test to verify the null check works.\nWithout the fix this test fails with a SEGV crash."},"files":[],"sha":"2fa8602f32265b711c5275c7b8a1bff791ef3046"},{"commit":{"message":"8302850: Force reexecuting clone in case of a deoptimization\n\n* Copy state including locals for clone\nso that reexecution works as expected."},"files":[],"sha":"47dd3a7384ff3c32b9d0b2777f081a0fe686ead7"},{"commit":{"message":"8302850: Avoid instantiating array copy stub for clone use cases"},"files":[{"filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp"}],"sha":"36185c4bcce67f977e83543abd901a8a0c6bd165"},{"commit":{"message":"8302850: Primitive array copy C1 intrinsic for aarch64 and x86\n\n* Clone calls that involve Phi nodes are not supported.\n* Add unimplemented stubs for other platforms."},"files":[{"filename":"src\/hotspot\/cpu\/s390\/c1_LIRGenerator_s390.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp"}],"sha":"fe5d916724614391a685bbef58ea939c84197d07"}]