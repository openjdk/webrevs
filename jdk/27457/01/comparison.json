{"files":[{"patch":"@@ -1164,0 +1164,2 @@\n+    \/\/ thread that owns park blocker object when park blocker is AbstractOwnableSynchronizer\n+    OopHandle _owner;\n@@ -1165,2 +1167,2 @@\n-    Blocker(Type type, OopHandle obj): _type(type), _obj(obj) {}\n-    Blocker(): _type(NOTHING), _obj(nullptr) {}\n+    Blocker(Type type, OopHandle obj): _type(type), _obj(obj), _owner() {}\n+    Blocker(): _type(NOTHING), _obj(), _owner() {}\n@@ -1201,0 +1203,1 @@\n+    _blocker._owner.release(oop_storage());\n@@ -1303,0 +1306,7 @@\n+      if (park_blocker->is_a(vmClasses::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass())) {\n+        \/\/ could be stale (unlikely in practice), but it's good enough to see deadlocks\n+        oop ownerObj = java_util_concurrent_locks_AbstractOwnableSynchronizer::get_owner_threadObj(park_blocker);\n+        if (ownerObj != nullptr) {\n+          _blocker._owner = OopHandle(oop_storage(), ownerObj);\n+        }\n+      }\n@@ -1384,0 +1394,1 @@\n+  static int _parkBlockerOwner_offset;\n@@ -1393,0 +1404,1 @@\n+    JavaClasses::compute_offset(_parkBlockerOwner_offset, klass, \"parkBlockerOwner\", vmSymbols::thread_signature(), false);\n@@ -1423,1 +1435,1 @@\n-  static void set_blocker(oop snapshot, int type_ordinal, oop lock) {\n+  static void set_blocker(oop snapshot, int type_ordinal, oop lock, oop owner) {\n@@ -1426,0 +1438,1 @@\n+    snapshot->obj_field_put(_parkBlockerOwner_offset, owner);\n@@ -1437,0 +1450,1 @@\n+int jdk_internal_vm_ThreadSnapshot::_parkBlockerOwner_offset;\n@@ -1562,1 +1576,2 @@\n-    jdk_internal_vm_ThreadSnapshot::set_blocker(snapshot(), cl._blocker._type, cl._blocker._obj.resolve());\n+    jdk_internal_vm_ThreadSnapshot::set_blocker(snapshot(),\n+        cl._blocker._type, cl._blocker._obj.resolve(), cl._blocker._owner.resolve());\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -208,1 +208,4 @@\n-                    writer.println(\"    - parking to wait for \" + decorateObject(parkBlocker));\n+                    String suffix = (snapshot.parkBlockerOwner() instanceof Thread owner)\n+                            ? \", owner #\"  + owner.threadId()\n+                            : \"\";\n+                    writer.println(\"    - parking to wait for \" + decorateObject(parkBlocker) + suffix);\n@@ -338,0 +341,3 @@\n+            if (snapshot.parkBlockerOwner() instanceof Thread owner) {\n+                jsonWriter.writeProperty(\"owner\", owner.threadId());\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ThreadDumper.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+    \/\/ the owner of the blockerObject when the object is park blocker and is AQS\n+    private Thread parkBlockerOwner;\n@@ -73,1 +75,3 @@\n-            snapshot.blocker = new ThreadBlocker(snapshot.blockerTypeOrdinal, snapshot.blockerObject);\n+            snapshot.blocker = new ThreadBlocker(snapshot.blockerTypeOrdinal,\n+                                                 snapshot.blockerObject,\n+                                                 snapshot.parkBlockerOwner);\n@@ -75,0 +79,1 @@\n+            snapshot.parkBlockerOwner = null;\n@@ -107,0 +112,7 @@\n+    \/**\n+     * Returns the owner of the parkBlocker if the parkBlocker is an AbstractOwnableSynchronizer.\n+     *\/\n+    Thread parkBlockerOwner() {\n+        return (blocker != null && blocker.type == BlockerLockType.PARK_BLOCKER) ? blocker.owner : null;\n+    }\n+\n@@ -214,1 +226,1 @@\n-    private record ThreadBlocker(BlockerLockType type, Object obj) {\n+    private record ThreadBlocker(BlockerLockType type, Object obj, Thread owner) {\n@@ -217,2 +229,2 @@\n-        ThreadBlocker(int typeOrdinal, Object obj) {\n-            this(lockTypeValues[typeOrdinal], obj);\n+        ThreadBlocker(int typeOrdinal, Object obj, Thread owner) {\n+            this(lockTypeValues[typeOrdinal], obj, owner);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ThreadSnapshot.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -81,0 +81,4 @@\n+                          \"owner\": {\n+                            \"type\": \"string\",\n+                            \"description\": \"The thread identifier of the owner when the parkBlocker is an AbstractOwnableSynchronizer.\"\n+                          }\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/doc-files\/threadDump.schema.json","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -428,1 +428,3 @@\n-            assertTrue(contains(lines, \"- parking to wait for <java.util.concurrent.locks.ReentrantLock\"));\n+            String line = find(lines, \"- parking to wait for <java.util.concurrent.locks.ReentrantLock\");\n+            assertNotNull(line, \"parking to wait line not found\");\n+            assertTrue(line.endsWith(\" owner #\" + Thread.currentThread().threadId()));\n@@ -443,0 +445,6 @@\n+\n+            \/\/ the owner of the parkBlocker should be the current thread\n+            long ownerTid = ti.parkBlockerOwner().orElse(-1L);\n+            assertNotEquals(-1L, ownerTid, \"parkBlockerOwner not found\");\n+            assertEquals(Thread.currentThread().threadId(), ownerTid);\n+\n@@ -680,1 +688,1 @@\n-     * Returns true if lines of a plain text thread dump contain the given text.\n+     * Returns true if lines of a plain text thread dump containing the given text.\n@@ -687,0 +695,10 @@\n+    \/**\n+     * Finds the line of plain text thread dump containing the given text.\n+     *\/\n+    private String find(List<String> lines, String text) {\n+        return lines.stream().map(String::trim)\n+                .filter(l -> l.contains(text))\n+                .findAny()\n+                .orElse(null);\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/management\/HotSpotDiagnosticMXBean\/DumpThreads.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -299,0 +299,10 @@\n+        \/**\n+         * Returns the owner of the parkBlocker if the parkBlocker is an AQS.\n+         *\/\n+        public OptionalLong parkBlockerOwner() {\n+            String owner = getStringProperty(\"parkBlocker\", \"owner\");\n+            return (owner != null)\n+                    ? OptionalLong.of(Long.parseLong(owner))\n+                    : OptionalLong.empty();\n+        }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/threaddump\/ThreadDump.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}