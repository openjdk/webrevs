{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+\n@@ -33,0 +34,1 @@\n+import jdk.internal.io.JdkConsoleImpl;\n@@ -36,1 +38,0 @@\n- *\n@@ -56,1 +57,0 @@\n-            Console con;\n@@ -59,2 +59,2 @@\n-                    ((con = System.console()) != null)) {\n-                consoleEntered = con.readPassword();\n+                    ConsoleHolder.consoleIsAvailable()) {\n+                consoleEntered = ConsoleHolder.readPassword();\n@@ -66,1 +66,1 @@\n-                consoleBytes = convertToBytes(consoleEntered);\n+                consoleBytes = ConsoleHolder.convertToBytes(consoleEntered);\n@@ -134,15 +134,19 @@\n-    \/**\n-     * Change a password read from Console.readPassword() into\n-     * its original bytes.\n-     *\n-     * @param pass a char[]\n-     * @return its byte[] format, similar to new String(pass).getBytes()\n-     *\/\n-    private static byte[] convertToBytes(char[] pass) {\n-        if (enc == null) {\n-            synchronized (Password.class) {\n-                enc = System.console()\n-                        .charset()\n-                        .newEncoder()\n-                        .onMalformedInput(CodingErrorAction.REPLACE)\n-                        .onUnmappableCharacter(CodingErrorAction.REPLACE);\n+    \/\/ Everything on Console or JdkConsoleImpl is inside this class.\n+    private static class ConsoleHolder {\n+\n+        \/\/ primary console; may be null\n+        private static final Console c1;\n+        \/\/ secondary console (when stdout is redirected); may be null\n+        private static final JdkConsoleImpl c2;\n+        \/\/ encoder for c1 or c2\n+        private static final CharsetEncoder enc;\n+\n+        static {\n+            c1 = System.console();\n+            Charset charset;\n+            if (c1 != null) {\n+                c2 = null;\n+                charset = c1.charset();\n+            } else {\n+                c2 = JdkConsoleImpl.passwordConsole().orElse(null);\n+                charset = (c2 != null) ? c2.charset() : null;\n@@ -150,0 +154,3 @@\n+            enc = charset == null ? null : charset.newEncoder()\n+                    .onMalformedInput(CodingErrorAction.REPLACE)\n+                    .onUnmappableCharacter(CodingErrorAction.REPLACE);\n@@ -151,4 +158,3 @@\n-        byte[] ba = new byte[(int)(enc.maxBytesPerChar() * pass.length)];\n-        ByteBuffer bb = ByteBuffer.wrap(ba);\n-        synchronized (enc) {\n-            enc.reset().encode(CharBuffer.wrap(pass), bb, true);\n+\n+        public static boolean consoleIsAvailable() {\n+            return c1 != null || c2 != null;\n@@ -156,2 +162,32 @@\n-        if (bb.position() < ba.length) {\n-            ba[bb.position()] = '\\n';\n+\n+        public static char[] readPassword() {\n+            assert consoleIsAvailable();\n+            if (c1 != null) {\n+                return c1.readPassword();\n+            } else {\n+                try {\n+                    return c2.readPasswordNoNewLine();\n+                } finally {\n+                    System.err.println();\n+                }\n+            }\n+        }\n+\n+        \/**\n+         * Convert a password read from console into its original bytes.\n+         *\n+         * @param pass a char[]\n+         * @return its byte[] format, equivalent to new String(pass).getBytes()\n+         *      but String is immutable and cannot be cleaned up.\n+         *\/\n+        public static byte[] convertToBytes(char[] pass) {\n+            assert consoleIsAvailable();\n+            byte[] ba = new byte[(int) (enc.maxBytesPerChar() * pass.length)];\n+            ByteBuffer bb = ByteBuffer.wrap(ba);\n+            synchronized (enc) {\n+                enc.reset().encode(CharBuffer.wrap(pass), bb, true);\n+            }\n+            if (bb.remaining() > 0) {\n+                bb.put((byte)'\\n'); \/\/ will be recognized as a stop sign\n+            }\n+            return ba;\n@@ -159,1 +195,0 @@\n-        return ba;\n@@ -161,1 +196,0 @@\n-    private static volatile CharsetEncoder enc;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Password.java","additions":63,"deletions":29,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8354469\n+ * @summary keytool password prompt shows warning when cannot suppress echo\n+ * @library \/java\/awt\/regtesthelpers\n+ * @modules java.base\/jdk.internal.util\n+ * @build PassFailJFrame\n+ * @run main\/manual\/othervm EchoPassword\n+ *\/\n+\n+import jdk.internal.util.OperatingSystem;\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JLabel;\n+import javax.swing.event.HyperlinkEvent;\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.StringSelection;\n+import java.io.File;\n+import java.nio.file.Path;\n+\n+public class EchoPassword {\n+\n+    static JLabel label;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        var ks1 = Path.of(\"8354469.ks1\").toAbsolutePath();\n+        var ks2 = Path.of(\"8354469.ks2\").toAbsolutePath();\n+        var ks3 = Path.of(\"8354469.ks3\").toAbsolutePath();\n+\n+        final String keytool = \"\\\"\" + System.getProperty(\"java.home\")\n+                + File.separator + \"bin\" + File.separator + \"keytool\\\"\";\n+        final String nonASCII = \"äöäöäöäö\";\n+\n+        final String[][] commands = {\n+                \/\/ Input password from real Console\n+                {\"First command\", keytool + \" -keystore \" + ks1\n+                        + \" -genkeypair -keyalg ec -dname cn=a -alias first\"},\n+                \/\/ Input password from limited Console (when stdout is redirected)\n+                {\"Second command\", keytool + \" -keystore \" + ks2\n+                        + \" -genkeypair -keyalg ec -dname cn=b -alias second | sort\"},\n+                \/\/ Input password from System.in stream\n+                {\"Third command\", \"echo changeit| \" + keytool + \" -keystore \" + ks1\n+                        + \" -genkeypair -keyalg ec -dname cn=c -alias third\"},\n+                \/\/ Ensure limited Console does not write a newline to System.out\n+                {\"Fourth command\", keytool + \" -keystore \" + ks1\n+                        + \" -exportcert -alias first | \"\n+                        + keytool + \" -printcert -rfc\"},\n+                \/\/ Non-ASCII password from System.in\n+                {\"Fifth command\", \"(\"\n+                        \/\/ Solution 2 of https:\/\/stackoverflow.com\/a\/29747723\n+                        + (OperatingSystem.isWindows()\n+                        ? (\"echo \" + nonASCII + \"^&echo \" + nonASCII + \"^&rem.\")\n+                        : (\"echo \" + nonASCII + \"; echo \" + nonASCII))\n+                        + \") | \" + keytool + \" -keystore \" + ks3\n+                                + \" -genkeypair -alias a -keyalg ec -dname cn=a\"},\n+                \/\/ Non-ASCII password from Console\n+                {\"Sixth command\", keytool + \" -keystore \" + ks3\n+                        + \" -exportcert -alias a -rfc\"},\n+                {\"The password\", nonASCII}\n+        };\n+\n+        final String message = String.format(\"\"\"\n+                <html>Open a terminal or Windows Command Prompt window, perform\n+                the following steps, and record the final result. Each time you\n+                click a link to copy something, make sure the status line at the\n+                bottom shows the link has been successfully clicked.\n+                <h3>Part I: Password Echoing Tests<\/h3>\n+                <ol>\n+                <li>Click <a href='c0'>Copy First Command<\/a> to copy the\n+                following command into the system clipboard. Paste it into the\n+                terminal window and execute the command.\n+                <p><code>\n+                %s\n+                <\/code><p>\n+                When prompted, enter \"changeit\" and press Enter. When prompted\n+                again, enter \"changeit\" again and press Enter. Verify that the\n+                two password prompts show up on different lines, both\n+                passwords are hidden, and a key pair is generated successfully.\n+\n+                <li>Click <a href='c1'>Copy Second Command<\/a> to copy the\n+                following command into the system clipboard. Paste it into the\n+                terminal window and execute the command.\n+                <p><code>\n+                %s\n+                <\/code><p>\n+                When prompted, enter \"changeit\" and press Enter. When prompted\n+                again, enter \"changeit\" again and press Enter. Verify that the\n+                two password prompts show up on different lines, both\n+                passwords are hidden, and a key pair is generated successfully.\n+\n+                <li>Click <a href='c2'>Copy Third Command<\/a> to copy the\n+                following command into the system clipboard. Paste it into the\n+                terminal window and execute the command.\n+                <p><code>\n+                %s\n+                <\/code><p>\n+                You will see a prompt but you don't need to enter anything.\n+                Verify that the password \"changeit\" is not shown in the command\n+                output and a key pair is generated successfully.\n+\n+                <li>Click <a href='c3'>Copy Fourth Command<\/a> to copy the\n+                following command into the system clipboard. Paste it into the\n+                terminal window and execute the command.\n+                <p><code>\n+                %s\n+                <\/code><p>\n+                When prompted, enter \"changeit\" and press Enter. Verify that the\n+                password is hidden and a PEM certificate is correctly shown.\n+                <\/ol>\n+                <h3>Part II: Interoperability on Non-ASCII Passwords<\/h3>\n+                <ol>\n+                <li>Click <a href='c4'>Copy Fifth Command<\/a> to copy the\n+                following command into the system clipboard. Paste it into the\n+                terminal window and execute the command.\n+                <p><code>\n+                %s\n+                <\/code><p>\n+                Verify that a key pair is generated successfully.\n+\n+                <li>Click <a href='c5'>Copy Sixth Command<\/a> to copy the\n+                following command into the system clipboard. Paste it into the\n+                terminal window and execute the command.\n+                <p><code>\n+                %s\n+                <\/code><p>\n+                When prompted, click <a href='c6'>Copy Password<\/a> to copy the\n+                password. Paste it into the terminal window and press Enter.\n+                Verify that the password is hidden and a PEM certificate is\n+                correctly shown.\n+                <\/ol>\n+                Press \"pass\" if the behavior matches expectations;\n+                otherwise, press \"fail\".\n+                \"\"\", commands[0][1], commands[1][1], commands[2][1], commands[3][1],\n+                commands[4][1], commands[5][1], commands[6][1]);\n+\n+        PassFailJFrame.builder()\n+                .instructions(message)\n+                .rows(40).columns(100)\n+                .hyperlinkListener(e -> {\n+                    if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {\n+                        int pos = Integer.parseInt(e.getDescription().substring(1));\n+                        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(\n+                                new StringSelection(commands[pos][1]), null);\n+                        label.setText(commands[pos][0] + \" copied\");\n+                        if (e.getSource() instanceof JEditorPane ep) {\n+                            ep.getCaret().setVisible(false);\n+                        }\n+                    }\n+                })\n+                .splitUIBottom(() -> {\n+                    label = new JLabel(\"Status\");\n+                    return label;\n+                })\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/EchoPassword.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"}]}