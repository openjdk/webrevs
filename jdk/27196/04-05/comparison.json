{"files":[{"patch":"@@ -57,8 +57,21 @@\n-            if (!isEchoOn &&\n-                    in == SharedSecrets.getJavaLangAccess().initialSystemIn() &&\n-                    ConsoleHolder.consoleIsAvailable()) {\n-                consoleEntered = ConsoleHolder.readPassword();\n-                \/\/ readPassword returns \"\" if you just press ENTER with the built-in Console,\n-                \/\/ to be compatible with old Password class, change to null\n-                if (consoleEntered == null || consoleEntered.length == 0) {\n-                    return null;\n+            if (!isEchoOn) {\n+                if (in == SharedSecrets.getJavaLangAccess().initialSystemIn()\n+                        && ConsoleHolder.consoleIsAvailable()) {\n+                    consoleEntered = ConsoleHolder.readPassword();\n+                    \/\/ readPassword returns \"\" if you just press ENTER with the built-in Console,\n+                    \/\/ to be compatible with old Password class, change to null\n+                    if (consoleEntered == null || consoleEntered.length == 0) {\n+                        return null;\n+                    }\n+                    consoleBytes = ConsoleHolder.convertToBytes(consoleEntered);\n+                    in = new ByteArrayInputStream(consoleBytes);\n+                } else if (System.in.available() == 0) {\n+                    \/\/ This may be running in an IDE Run Window or in JShell,\n+                    \/\/ which acts like an interactive console and echoes the\n+                    \/\/ entered password. In this case, print a warning that\n+                    \/\/ the password might be echoed. If available() is not zero,\n+                    \/\/ it's more likely the input comes from a pipe, such as\n+                    \/\/ \"echo password |\" or \"cat password_file |\" where input\n+                    \/\/ will be silently consumed without echoing to the screen.\n+                    System.err.print(\"[Warning: Console not available.\" +\n+                            \" The entered password might be echoed.] \");\n@@ -66,2 +79,0 @@\n-                consoleBytes = ConsoleHolder.convertToBytes(consoleEntered);\n-                in = new ByteArrayInputStream(consoleBytes);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Password.java","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8354469\n+ * @summary ensure password can be read from user's System.in\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.tools.keytool\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+\n+import java.io.ByteArrayInputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+public class SetInPassword {\n+    public static void main(String[] args) throws Exception {\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit -genkeypair -alias a -dname CN=A -keyalg EC\")\n+                .shouldHaveExitValue(0);\n+        System.setIn(new ByteArrayInputStream(\"changeit\".getBytes(StandardCharsets.UTF_8)));\n+        sun.security.tools.keytool.Main.main(\"-keystore ks -alias a -certreq\".split(\" \"));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/SetInPassword.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"}]}