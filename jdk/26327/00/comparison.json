{"files":[{"patch":"@@ -1137,2 +1137,8 @@\n-        for (int i = 0; i < n; i++) {\n-            fs[i] = new File(ss[i], this);\n+        if (path.isEmpty()) {\n+            for (int i = 0; i < n; i++) {\n+                fs[i] = new File(ss[i]);\n+            }\n+        } else {\n+            for (int i = 0; i < n; i++) {\n+                fs[i] = new File(ss[i], this);\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 4842706 8024695\n+ * @bug 4842706 8024695 8361587\n@@ -39,0 +39,1 @@\n+import java.util.List;\n@@ -40,0 +41,1 @@\n+import java.util.stream.Collectors;\n@@ -45,1 +47,0 @@\n-import org.junit.jupiter.api.condition.EnabledOnOs;\n@@ -108,0 +109,5 @@\n+    @Test\n+    public void getAbsoluteFile() {\n+        assertEquals(p.toAbsolutePath().toFile(), f.getAbsoluteFile());\n+    }\n+\n@@ -115,0 +121,10 @@\n+    @Test\n+    public void getCanonicalFile() throws IOException {\n+        assertEquals(p.toRealPath().toFile(), f.getCanonicalFile());\n+    }\n+\n+    @Test\n+    public void getCanonicalPath() throws IOException {\n+        assertEquals(p.toRealPath().toString(), f.getCanonicalPath());\n+    }\n+\n@@ -139,0 +155,5 @@\n+    @Test\n+    public void getParentFile() {\n+        assertNull(f.getParentFile());\n+    }\n+\n@@ -201,0 +222,34 @@\n+    @Test\n+    public void listFiles() throws IOException {\n+        File child = new File(f.getAbsoluteFile(), \"child\");\n+        assertTrue(child.createNewFile());\n+        child.deleteOnExit();\n+\n+        File[] files = f.listFiles();\n+        for (File file : files)\n+            assertEquals(-1, f.toString().indexOf(File.separatorChar));\n+\n+        Set<String> ioSet = Arrays.stream(files)\n+            .map(File::getName)\n+            .collect(Collectors.toSet());\n+\n+        assertTrue(ioSet.contains(child.getName()));\n+\n+        Set<String> nioSet = Files.list(p)\n+            .map(Path::getFileName)\n+            .map(Path::toString)\n+            .collect(Collectors.toSet());\n+        assertEquals(nioSet, ioSet);\n+    }\n+\n+    @Test\n+    public void listRoots() {\n+        Set<String> expected = Arrays.stream(f.getAbsoluteFile().listRoots())\n+            .map(File::toString)\n+            .collect(Collectors.toSet());\n+        Set<String> actual = Arrays.stream(f.listRoots())\n+            .map(File::toString)\n+            .collect(Collectors.toSet());\n+        assertEquals(expected, actual);\n+    }\n+\n@@ -206,0 +261,12 @@\n+    @Test\n+    public void mkdirs() {\n+        assertFalse(f.mkdirs());\n+    }\n+\n+    @Test\n+    public void renameTo() throws IOException {\n+        File tmp = File.createTempFile(\"foo\", \"bar\", f.getAbsoluteFile());\n+        assertTrue(tmp.exists());\n+        assertFalse(f.renameTo(tmp));\n+    }\n+\n@@ -274,0 +341,6 @@\n+    @Test\n+    public String toString() {\n+        assertEquals(EMPTY_STRING, f.toString());\n+        return EMPTY_STRING;\n+    }\n+\n","filename":"test\/jdk\/java\/io\/File\/EmptyPath.java","additions":75,"deletions":2,"binary":false,"changes":77,"status":"modified"}]}