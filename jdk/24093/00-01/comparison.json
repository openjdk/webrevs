{"files":[{"patch":"@@ -718,0 +718,7 @@\n+  st->print(\" \");\n+  if (tf() != nullptr) {\n+    tf()->dump_on(st);\n+  }\n+  if (_cnt != COUNT_UNKNOWN) {\n+    st->print(\" C=%f\", _cnt);\n+  }\n@@ -719,3 +726,10 @@\n-  if (klass_node != nullptr && klass_node->is_ConP()) {\n-    st->print(\" \");\n-    klass_node->as_ConP()->type()->dump_on(st);\n+  if (klass_node != nullptr) {\n+    const TypeKlassPtr* const klass_ptr = klass_node->bottom_type()->isa_klassptr();\n+\n+    if (klass_ptr != nullptr && klass_ptr->klass_is_exact()) {\n+      st->print(\" allocationKlass:\");\n+      klass_ptr->exact_klass()->print_name_on(st);\n+    }\n+  }\n+  if (jvms() != nullptr) {\n+    jvms()->dump_spec(st);\n@@ -723,1 +737,0 @@\n-  CallNode::dump_spec(st);\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -73,3 +73,1 @@\n-  ConPNode(const TypePtr *t) : ConNode(t) {\n-    init_class_id(Class_ConP);\n-  }\n+  ConPNode(const TypePtr* t) : ConNode(t) {}\n","filename":"src\/hotspot\/share\/opto\/connode.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-class ConPNode;\n@@ -750,1 +749,0 @@\n-          DEFINE_CLASS_ID(ConP, Con, 1)\n@@ -917,1 +915,0 @@\n-  DEFINE_CLASS_QUERY(ConP)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -351,1 +351,1 @@\n-        String regex = START + \"Allocate\\\\b\" + MID + \"precise .*\\\\b\" + IS_REPLACED + \":.*\" + END;\n+        String regex = START + \"Allocate\\\\b\" + MID + \"allocationKlass:.*\\\\b\" + IS_REPLACED + \"\\\\b.*\" + END;\n@@ -363,1 +363,16 @@\n-        String regex = START + \"AllocateArray\\\\b\" + MID + \"precise \\\\[.*\\\\b\" + IS_REPLACED + \":.*\" + END;\n+        \/\/ Assuming we are looking for an array of \"some\/package\/MyClass\". The printout is\n+        \/\/ [Lsome\/package\/MyClass;\n+\n+        \/\/ Case where the search string is a not fully qualified name (but maybe partially qualified):\n+        \/\/ package\/MyClass or MyClass\n+        \/\/ The \".*\\\\b\" will eat the \"some\/\"\n+        String partial_name_prefix = \".+\\\\b\";\n+\n+        \/\/ A sequence of:\n+        \/\/ - a non-empty sequence of \"[\"\n+        \/\/ - a single character (\"L\" in our example),\n+        \/\/ - maybe a non-empty sequence of characters ending on a word boundary\n+        \/\/ - the name we are looking for\n+        \/\/ - the final \";\".\n+        String name_part = \"\\\\[+.(\" + partial_name_prefix + \")?\" + IS_REPLACED + \";\";\n+        String regex = START + \"AllocateArray\\\\b\" + MID + \"allocationKlass:\" + name_part + \".*\" + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -116,0 +116,11 @@\n+        runCheck(BadFailOnConstraint.create(AllocInstance.class, \"allocInstance()\", 1),\n+                BadFailOnConstraint.create(AllocInstance.class, \"allocInstance()\", 2),\n+                GoodFailOnConstraint.create(AllocInstance.class, \"allocInstance()\", 3),\n+                GoodFailOnConstraint.create(AllocInstance.class, \"allocInstance()\", 4),\n+                GoodFailOnConstraint.create(AllocInstance.class, \"allocInstance()\", 5),\n+                BadFailOnConstraint.create(AllocInstance.class, \"allocInstance()\", 6),\n+                BadFailOnConstraint.create(AllocInstance.class, \"allocInstance()\", 7),\n+                GoodFailOnConstraint.create(AllocInstance.class, \"allocInstance()\", 8),\n+                GoodFailOnConstraint.create(AllocInstance.class, \"allocInstance()\", 9)\n+        );\n+\n@@ -127,0 +138,11 @@\n+        runCheck(BadFailOnConstraint.create(AllocArray.class, \"allocMultiArray()\", 1),\n+                 BadFailOnConstraint.create(AllocArray.class, \"allocMultiArray()\", 2),\n+                 GoodFailOnConstraint.create(AllocArray.class, \"allocMultiArray()\", 3),\n+                 GoodFailOnConstraint.create(AllocArray.class, \"allocMultiArray()\", 4),\n+                 GoodFailOnConstraint.create(AllocArray.class, \"allocMultiArray()\", 5),\n+                 BadFailOnConstraint.create(AllocArray.class, \"allocMultiArray()\", 6),\n+                 BadFailOnConstraint.create(AllocArray.class, \"allocMultiArray()\", 7),\n+                 GoodFailOnConstraint.create(AllocArray.class, \"allocMultiArray()\", 8),\n+                 GoodFailOnConstraint.create(AllocArray.class, \"allocMultiArray()\", 9)\n+        );\n+\n@@ -924,0 +946,18 @@\n+class AllocInstance {\n+    MyClass myClass;\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC})\n+    @IR(failOn = {IRNode.ALLOC_OF, \"MyClass\"})\n+    @IR(failOn = {IRNode.ALLOC_OF, \"Class\"}) \/\/ Does not fail\n+    @IR(failOn = {IRNode.ALLOC_OF, \"MyClasss\"}) \/\/ Does not fail\n+    @IR(failOn = {IRNode.ALLOC_OF, \"ir_framework\/tests\/MySubClass\"}) \/\/ Does not fail\n+    @IR(failOn = {IRNode.ALLOC_OF, \"ir_framework\/tests\/MyClass\"})\n+    @IR(failOn = {IRNode.ALLOC_OF, \"tests\/MyClass\"})\n+    @IR(failOn = {IRNode.ALLOC_OF, \"ests\/MyClass\"}) \/\/ Does not fail\n+    @IR(failOn = {IRNode.ALLOC_OF, \"Atests\/MyClass\"}) \/\/ Does not fail\n+    public void allocInstance() {\n+        myClass = new MyClass();\n+    }\n+}\n+\n@@ -926,0 +966,1 @@\n+    MyClass[][] myClassMultiArray;\n@@ -940,0 +981,14 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.ALLOC_ARRAY})\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"MyClass\"})\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"Class\"}) \/\/ Does not fail\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"MyClasss\"}) \/\/ Does not fail\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"ir_framework\/tests\/MySubClass\"}) \/\/ Does not fail\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"ir_framework\/tests\/MyClass\"})\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"tests\/MyClass\"})\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"ests\/MyClass\"}) \/\/ Does not fail\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"Atests\/MyClass\"}) \/\/ Does not fail\n+    public void allocMultiArray() {\n+        myClassMultiArray = new MyClass[2][3];\n+    }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"modified"}]}