{"files":[{"patch":"@@ -716,0 +716,9 @@\n+\n+void AllocateNode::dump_spec(outputStream* st) const {\n+  const Node* const klass_node = in(KlassNode);\n+  if (klass_node != nullptr && klass_node->is_ConP()) {\n+    st->print(\" \");\n+    klass_node->as_ConP()->type()->dump_on(st);\n+  }\n+  CallNode::dump_spec(st);\n+}\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1065,0 +1065,4 @@\n+\n+#ifndef PRODUCT\n+  virtual void dump_spec(outputStream* st) const;\n+#endif\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,3 @@\n-  ConPNode(const TypePtr *t) : ConNode(t) {}\n+  ConPNode(const TypePtr *t) : ConNode(t) {\n+    init_class_id(Class_ConP);\n+  }\n","filename":"src\/hotspot\/share\/opto\/connode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+class ConPNode;\n@@ -749,0 +750,1 @@\n+          DEFINE_CLASS_ID(ConP, Con, 1)\n@@ -915,0 +917,1 @@\n+  DEFINE_CLASS_QUERY(ConP)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -345,2 +345,2 @@\n-        String optoRegex = \"(.*precise .*\\\\R((.*(?i:mov|mv|xorl|nop|spill).*|\\\\s*)\\\\R)*.*(?i:call,static).*wrapper for: C2 Runtime new_instance\" + END;\n-        allocNodes(ALLOC, \"Allocate\", optoRegex);\n+        String regex = START + \"Allocate\\\\b\" + MID + END;\n+        macroNodes(ALLOC, regex);\n@@ -351,2 +351,2 @@\n-        String regex = \"(.*precise .*\" + IS_REPLACED + \":.*\\\\R((.*(?i:mov|mv|xorl|nop|spill).*|\\\\s*)\\\\R)*.*(?i:call,static).*wrapper for: C2 Runtime new_instance\" + END;\n-        optoOnly(ALLOC_OF, regex);\n+        String regex = START + \"Allocate\\\\b\" + MID + \"precise .*\\\\b\" + IS_REPLACED + \":.*\" + END;\n+        macroNodes(ALLOC_OF, regex);\n@@ -357,2 +357,2 @@\n-        String optoRegex = \"(.*precise \\\\[.*\\\\R((.*(?i:mov|mv|xor|nop|spill).*|\\\\s*|.*(LGHI|LI).*)\\\\R)*.*(?i:call,static).*wrapper for: C2 Runtime new_array\" + END;\n-        allocNodes(ALLOC_ARRAY, \"AllocateArray\", optoRegex);\n+        String regex = START + \"AllocateArray\\\\b\" + MID + END;\n+        macroNodes(ALLOC_ARRAY,  regex);\n@@ -363,2 +363,2 @@\n-        String regex = \"(.*precise \\\\[.*\" + IS_REPLACED + \":.*\\\\R((.*(?i:mov|mv|xorl|nop|spill).*|\\\\s*|.*(LGHI|LI).*)\\\\R)*.*(?i:call,static).*wrapper for: C2 Runtime new_array\" + END;\n-        optoOnly(ALLOC_ARRAY_OF, regex);\n+        String regex = START + \"AllocateArray\\\\b\" + MID + \"precise \\\\[.*\\\\b\" + IS_REPLACED + \":.*\" + END;\n+        macroNodes(ALLOC_ARRAY_OF, regex);\n@@ -2561,1 +2561,2 @@\n-        macroNodes(MOD_F, \"ModF\");\n+        String regex = START + \"ModF\" + MID + END;\n+        macroNodes(MOD_F, regex);\n@@ -2566,1 +2567,2 @@\n-        macroNodes(MOD_D, \"ModD\");\n+        String regex = START + \"ModD\" + MID + END;\n+        macroNodes(MOD_D, regex);\n@@ -2604,10 +2606,0 @@\n-    private static void allocNodes(String irNode, String irNodeName, String optoRegex) {\n-        String idealIndependentRegex = START + irNodeName + \"\\\\b\" + MID + END;\n-        Map<PhaseInterval, String> intervalToRegexMap = new HashMap<>();\n-        intervalToRegexMap.put(new PhaseInterval(CompilePhase.BEFORE_REMOVEUSELESS, CompilePhase.PHASEIDEALLOOP_ITERATIONS),\n-                               idealIndependentRegex);\n-        intervalToRegexMap.put(new PhaseInterval(CompilePhase.PRINT_OPTO_ASSEMBLY), optoRegex);\n-        MultiPhaseRangeEntry entry = new MultiPhaseRangeEntry(CompilePhase.PRINT_OPTO_ASSEMBLY, intervalToRegexMap);\n-        IR_NODE_MAPPINGS.put(irNode, entry);\n-    }\n-\n@@ -2617,2 +2609,1 @@\n-    private static void macroNodes(String irNodePlaceholder, String irNodeRegex) {\n-        String regex = START + irNodeRegex + MID + END;\n+    private static void macroNodes(String irNodePlaceholder, String regex) {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -78,1 +78,0 @@\n-        String[] allocMatches = { \"MyClass\", \"wrapper for: C2 Runtime new_instance\" };\n@@ -91,1 +90,1 @@\n-                 BadFailOnConstraint.create(MultipleFailOnBad.class, \"fail6()\", 1,  2, allocMatches),\n+                 BadFailOnConstraint.create(MultipleFailOnBad.class, \"fail6()\", 1,  2, \"MyClass\"),\n@@ -94,1 +93,1 @@\n-                 BadFailOnConstraint.create(MultipleFailOnBad.class, \"fail7()\", 1,  2, allocMatches),\n+                 BadFailOnConstraint.create(MultipleFailOnBad.class, \"fail7()\", 1,  2, \"MyClass\"),\n@@ -96,1 +95,1 @@\n-                 BadFailOnConstraint.create(MultipleFailOnBad.class, \"fail8()\", 1,  2, allocMatches),\n+                 BadFailOnConstraint.create(MultipleFailOnBad.class, \"fail8()\", 1,  2, \"MyClass\"),\n@@ -117,3 +116,2 @@\n-        String[] allocArrayMatches = { \"MyClass\", \"wrapper for: C2 Runtime new_array\"};\n-        runCheck(BadFailOnConstraint.create(AllocArray.class, \"allocArray()\", 1, allocArrayMatches),\n-                 BadFailOnConstraint.create(AllocArray.class, \"allocArray()\", 2,  allocArrayMatches),\n+        runCheck(BadFailOnConstraint.create(AllocArray.class, \"allocArray()\", 1),\n+                 BadFailOnConstraint.create(AllocArray.class, \"allocArray()\", 2),\n@@ -122,1 +120,5 @@\n-                 BadFailOnConstraint.create(AllocArray.class, \"allocArray()\", 5,  allocArrayMatches)\n+                 GoodFailOnConstraint.create(AllocArray.class, \"allocArray()\", 5),\n+                 BadFailOnConstraint.create(AllocArray.class, \"allocArray()\", 6),\n+                 BadFailOnConstraint.create(AllocArray.class, \"allocArray()\", 7),\n+                 GoodFailOnConstraint.create(AllocArray.class, \"allocArray()\", 8),\n+                 GoodFailOnConstraint.create(AllocArray.class, \"allocArray()\", 9)\n@@ -269,2 +271,3 @@\n-                pattern = Pattern.compile(compilationPrefix() + \".*opto\\\\d.*\\\\R> Phase \\\"PrintOptoAssembly\\\":(?:(?!\"\n-                                          + compilationPrefix()  + \")[\\\\S\\\\s])+\");\n+                pattern = Pattern.compile(compilationPrefix() + \".*macro\\\\d.*\\\\R> Phase \\\"\"\n+                        + CompilePhase.BEFORE_MACRO_EXPANSION.getName()\n+                        + \"\\\":(?:(?!\" + compilationPrefix() + \")[\\\\S\\\\s])+\");\n@@ -281,1 +284,1 @@\n-                    failures.append(\"- Could not find all opto() methods, expected 7 but found \").append(count).append(System.lineSeparator());\n+                    failures.append(\"- Could not find all macro() methods, expected 7 but found \").append(count).append(System.lineSeparator());\n@@ -927,0 +930,1 @@\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"Class\"}) \/\/ Does not fail\n@@ -930,0 +934,3 @@\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"tests\/MyClass\"})\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"ests\/MyClass\"}) \/\/ Does not fail\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"Atests\/MyClass\"}) \/\/ Does not fail\n@@ -1395,1 +1402,1 @@\n-    public void opto1() {\n+    public void macro1() {\n@@ -1402,1 +1409,1 @@\n-    public void opto2() {\n+    public void macro2() {\n@@ -1409,1 +1416,1 @@\n-    public void opto3() {\n+    public void macro3() {\n@@ -1417,1 +1424,1 @@\n-    public void opto4() {\n+    public void macro4() {\n@@ -1424,1 +1431,1 @@\n-    public void opto5() {\n+    public void macro5() {\n@@ -1431,1 +1438,1 @@\n-    public void opto6() {\n+    public void macro6() {\n@@ -1438,1 +1445,1 @@\n-    public void opto7() {\n+    public void macro7() {\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":25,"deletions":18,"binary":false,"changes":43,"status":"modified"}]}