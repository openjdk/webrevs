{"files":[{"patch":"@@ -34,2 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -86,6 +84,1 @@\n-    protected HttpServerProvider() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkPermission(new RuntimePermission(\"httpServerProvider\"));\n-    }\n+    protected HttpServerProvider() {}\n@@ -110,2 +103,1 @@\n-                 InstantiationException |\n-                 SecurityException x) {\n+                 InstantiationException x) {\n@@ -121,14 +113,4 @@\n-        for (;;) {\n-            try {\n-                if (!i.hasNext())\n-                    return false;\n-                provider = i.next();\n-                return true;\n-            } catch (ServiceConfigurationError sce) {\n-                if (sce.getCause() instanceof SecurityException) {\n-                    \/\/ Ignore the security exception, try the next provider\n-                    continue;\n-                }\n-                throw sce;\n-            }\n-        }\n+        if (!i.hasNext())\n+            return false;\n+        provider = i.next();\n+        return true;\n@@ -173,1 +155,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -178,11 +159,6 @@\n-            return (HttpServerProvider)AccessController\n-                .doPrivileged(new PrivilegedAction<Object>() {\n-                        public Object run() {\n-                            if (loadProviderFromProperty())\n-                                return provider;\n-                            if (loadProviderAsService())\n-                                return provider;\n-                            provider = new sun.net.httpserver.DefaultHttpServerProvider();\n-                            return provider;\n-                        }\n-                    });\n+            if (loadProviderFromProperty())\n+                return provider;\n+            if (loadProviderAsService())\n+                return provider;\n+            provider = new sun.net.httpserver.DefaultHttpServerProvider();\n+            return provider;\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/spi\/HttpServerProvider.java","additions":12,"deletions":36,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,6 +30,0 @@\n-import java.nio.*;\n-import java.nio.channels.*;\n-import java.util.*;\n-import javax.security.auth.*;\n-import javax.security.auth.callback.*;\n-import javax.security.auth.login.*;\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/AuthFilter.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,0 @@\n-import java.nio.*;\n-import java.security.*;\n-import java.nio.channels.*;\n-import java.util.*;\n@@ -35,1 +31,1 @@\n-import javax.net.ssl.*;\n+\n@@ -37,1 +33,0 @@\n-import com.sun.net.httpserver.spi.*;\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/HttpServerImpl.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,0 @@\n-import java.nio.*;\n-import java.security.*;\n-import java.nio.channels.*;\n-import java.util.*;\n@@ -35,1 +31,1 @@\n-import javax.net.ssl.*;\n+\n@@ -37,1 +33,0 @@\n-import com.sun.net.httpserver.spi.*;\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/HttpsServerImpl.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.security.PrivilegedAction;\n@@ -36,2 +35,0 @@\n-\n-@SuppressWarnings(\"removal\")\n@@ -58,1 +55,1 @@\n-    private static long drainAmount;\n+    private static final long drainAmount;\n@@ -62,2 +59,2 @@\n-    private static int maxConnections;\n-    private static int maxIdleConnections;\n+    private static final int maxConnections;\n+    private static final int maxIdleConnections;\n@@ -70,2 +67,2 @@\n-    private static long maxReqTime;\n-    private static long maxRspTime;\n+    private static final long maxReqTime;\n+    private static final long maxRspTime;\n@@ -73,1 +70,1 @@\n-    private static boolean debug;\n+    private static final boolean debug;\n@@ -76,1 +73,1 @@\n-    private static boolean noDelay;\n+    private static final boolean noDelay;\n@@ -79,64 +76,44 @@\n-        java.security.AccessController.doPrivileged(\n-            new PrivilegedAction<Void>() {\n-                @Override\n-                public Void run () {\n-                    idleIntervalMillis = Long.getLong(\"sun.net.httpserver.idleInterval\",\n-                            DEFAULT_IDLE_INTERVAL_IN_SECS) * 1000;\n-                    if (idleIntervalMillis <= 0) {\n-                        idleIntervalMillis = DEFAULT_IDLE_INTERVAL_IN_SECS * 1000;\n-                    }\n-\n-                    idleTimerScheduleMillis = Long.getLong(\"sun.net.httpserver.clockTick\",\n-                            DEFAULT_IDLE_TIMER_SCHEDULE_MILLIS);\n-                    if (idleTimerScheduleMillis <= 0) {\n-                        \/\/ ignore zero or negative value and use the default schedule\n-                        idleTimerScheduleMillis = DEFAULT_IDLE_TIMER_SCHEDULE_MILLIS;\n-                    }\n-\n-                    maxConnections = Integer.getInteger(\n-                            \"jdk.httpserver.maxConnections\",\n-                            DEFAULT_MAX_CONNECTIONS);\n-\n-                    maxIdleConnections = Integer.getInteger(\n-                            \"sun.net.httpserver.maxIdleConnections\",\n-                            DEFAULT_MAX_IDLE_CONNECTIONS);\n-\n-                    drainAmount = Long.getLong(\"sun.net.httpserver.drainAmount\",\n-                            DEFAULT_DRAIN_AMOUNT);\n-\n-                    maxReqHeaders = Integer.getInteger(\n-                            \"sun.net.httpserver.maxReqHeaders\",\n-                            DEFAULT_MAX_REQ_HEADERS);\n-                    if (maxReqHeaders <= 0) {\n-                        maxReqHeaders = DEFAULT_MAX_REQ_HEADERS;\n-                    }\n-\n-                    \/\/ a value <= 0 means unlimited\n-                    maxReqHeadersSize = Integer.getInteger(\n-                            \"sun.net.httpserver.maxReqHeaderSize\",\n-                            DEFAULT_MAX_REQ_HEADER_SIZE);\n-                    if (maxReqHeadersSize <= 0) {\n-                        maxReqHeadersSize = 0;\n-                    }\n-\n-                    maxReqTime = Long.getLong(\"sun.net.httpserver.maxReqTime\",\n-                            DEFAULT_MAX_REQ_TIME);\n-\n-                    maxRspTime = Long.getLong(\"sun.net.httpserver.maxRspTime\",\n-                            DEFAULT_MAX_RSP_TIME);\n-\n-                    reqRspTimerScheduleMillis = Long.getLong(\"sun.net.httpserver.timerMillis\",\n-                            DEFAULT_REQ_RSP_TIMER_TASK_SCHEDULE_MILLIS);\n-                    if (reqRspTimerScheduleMillis <= 0) {\n-                        \/\/ ignore any negative or zero value for this configuration and reset\n-                        \/\/ to default schedule\n-                        reqRspTimerScheduleMillis = DEFAULT_REQ_RSP_TIMER_TASK_SCHEDULE_MILLIS;\n-                    }\n-\n-                    debug = Boolean.getBoolean(\"sun.net.httpserver.debug\");\n-\n-                    noDelay = Boolean.getBoolean(\"sun.net.httpserver.nodelay\");\n-\n-                    return null;\n-                }\n-            });\n+\n+        idleIntervalMillis = Long.getLong(\"sun.net.httpserver.idleInterval\", DEFAULT_IDLE_INTERVAL_IN_SECS) * 1000;\n+        if (idleIntervalMillis <= 0) {\n+            idleIntervalMillis = DEFAULT_IDLE_INTERVAL_IN_SECS * 1000;\n+        }\n+\n+        idleTimerScheduleMillis = Long.getLong(\"sun.net.httpserver.clockTick\", DEFAULT_IDLE_TIMER_SCHEDULE_MILLIS);\n+        if (idleTimerScheduleMillis <= 0) {\n+            \/\/ ignore zero or negative value and use the default schedule\n+            idleTimerScheduleMillis = DEFAULT_IDLE_TIMER_SCHEDULE_MILLIS;\n+        }\n+\n+        maxConnections = Integer.getInteger(\"jdk.httpserver.maxConnections\", DEFAULT_MAX_CONNECTIONS);\n+\n+        maxIdleConnections = Integer.getInteger(\"sun.net.httpserver.maxIdleConnections\", DEFAULT_MAX_IDLE_CONNECTIONS);\n+\n+        drainAmount = Long.getLong(\"sun.net.httpserver.drainAmount\", DEFAULT_DRAIN_AMOUNT);\n+\n+        maxReqHeaders = Integer.getInteger(\"sun.net.httpserver.maxReqHeaders\", DEFAULT_MAX_REQ_HEADERS);\n+        if (maxReqHeaders <= 0) {\n+            maxReqHeaders = DEFAULT_MAX_REQ_HEADERS;\n+        }\n+\n+        \/\/ a value <= 0 means unlimited\n+        maxReqHeadersSize = Integer.getInteger(\"sun.net.httpserver.maxReqHeaderSize\", DEFAULT_MAX_REQ_HEADER_SIZE);\n+        if (maxReqHeadersSize <= 0) {\n+            maxReqHeadersSize = 0;\n+        }\n+\n+        maxReqTime = Long.getLong(\"sun.net.httpserver.maxReqTime\", DEFAULT_MAX_REQ_TIME);\n+\n+        maxRspTime = Long.getLong(\"sun.net.httpserver.maxRspTime\", DEFAULT_MAX_RSP_TIME);\n+\n+        reqRspTimerScheduleMillis = Long.getLong(\n+                \"sun.net.httpserver.timerMillis\",\n+                DEFAULT_REQ_RSP_TIMER_TASK_SCHEDULE_MILLIS);\n+        if (reqRspTimerScheduleMillis <= 0) {\n+            \/\/ ignore any negative or zero value for this configuration and reset to default schedule\n+            reqRspTimerScheduleMillis = DEFAULT_REQ_RSP_TIMER_TASK_SCHEDULE_MILLIS;\n+        }\n+\n+        debug = Boolean.getBoolean(\"sun.net.httpserver.debug\");\n+\n+        noDelay = Boolean.getBoolean(\"sun.net.httpserver.nodelay\");\n@@ -151,33 +128,16 @@\n-        java.security.AccessController.doPrivileged(\n-            new PrivilegedAction<Void>() {\n-                public Void run () {\n-                    if (System.getProperty(\"sun.net.httpserver.readTimeout\")\n-                                                !=null)\n-                    {\n-                        logger.log (Level.WARNING,\n-                            \"sun.net.httpserver.readTimeout \"+\n-                            \"property is no longer used. \"+\n-                            \"Use sun.net.httpserver.maxReqTime instead.\"\n-                        );\n-                    }\n-                    if (System.getProperty(\"sun.net.httpserver.writeTimeout\")\n-                                                !=null)\n-                    {\n-                        logger.log (Level.WARNING,\n-                            \"sun.net.httpserver.writeTimeout \"+\n-                            \"property is no longer used. Use \"+\n-                            \"sun.net.httpserver.maxRspTime instead.\"\n-                        );\n-                    }\n-                    if (System.getProperty(\"sun.net.httpserver.selCacheTimeout\")\n-                                                !=null)\n-                    {\n-                        logger.log (Level.WARNING,\n-                            \"sun.net.httpserver.selCacheTimeout \"+\n-                            \"property is no longer used.\"\n-                        );\n-                    }\n-                    return null;\n-                }\n-            }\n-        );\n+        if (System.getProperty(\"sun.net.httpserver.readTimeout\") != null) {\n+            logger.log(\n+                    Level.WARNING,\n+                    \"sun.net.httpserver.readTimeout property is no longer used. \" +\n+                            \"Use sun.net.httpserver.maxReqTime instead.\");\n+        }\n+        if (System.getProperty(\"sun.net.httpserver.writeTimeout\") != null) {\n+            logger.log(\n+                    Level.WARNING,\n+                    \"sun.net.httpserver.writeTimeout property is no longer used. \" +\n+                            \"Use sun.net.httpserver.maxRspTime instead.\");\n+        }\n+        if (System.getProperty(\"sun.net.httpserver.selCacheTimeout\") != null) {\n+            logger.log(Level.WARNING, \"sun.net.httpserver.selCacheTimeout property is no longer used.\");\n+        }\n+\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ServerConfig.java","additions":67,"deletions":107,"binary":false,"changes":174,"status":"modified"},{"patch":"@@ -56,2 +56,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -307,1 +305,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -309,8 +306,1 @@\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<InetSocketAddress>() {\n-                    public InetSocketAddress run() {\n-                        return\n-                            (InetSocketAddress)schan.socket()\n-                                .getLocalSocketAddress();\n-                    }\n-                });\n+        return (InetSocketAddress) schan.socket().getLocalSocketAddress();\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ServerImpl.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -70,6 +69,0 @@\n-\n-        @SuppressWarnings(\"removal\")\n-        var securityManager = System.getSecurityManager();\n-        if (securityManager != null)\n-            securityManager.checkRead(pathForSecurityCheck(root.toString()));\n-\n@@ -89,5 +82,0 @@\n-    private static String pathForSecurityCheck(String path) {\n-        var separator = String.valueOf(File.separatorChar);\n-        return path.endsWith(separator) ? (path + \"-\") : (path + separator + \"-\");\n-    }\n-\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/FileServerHandler.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -87,1 +85,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -89,5 +86,1 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (System.getProperty(SYS_PROP_MAX_CONNECTIONS) != null) {\n-                \/\/ an explicit value has already been set, so we don't override it\n-                return null;\n-            }\n+        if (System.getProperty(SYS_PROP_MAX_CONNECTIONS) == null) {\n@@ -95,2 +88,1 @@\n-            return null;\n-        });\n+        }\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/JWebServer.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,0 @@\n-import java.util.*;\n-import java.util.concurrent.*;\n-import java.util.logging.*;\n@@ -29,2 +26,1 @@\n-import java.security.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/FileServerHandler.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.security.AccessController;\n@@ -36,1 +35,0 @@\n-import java.security.PrivilegedExceptionAction;\n@@ -362,15 +360,9 @@\n-        return AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<KeyStore>() {\n-                    @Override\n-                    public KeyStore run() throws Exception {\n-                        final String testKeys = System.getProperty(\"test.src\")\n-                                + \"\/\"\n-                                + \"..\/..\/..\/..\/..\/..\/test\/lib\/jdk\/test\/lib\/net\/testkeys\";\n-                        try (final FileInputStream fis = new FileInputStream(testKeys)) {\n-                            final char[] passphrase = \"passphrase\".toCharArray();\n-                            final KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n-                            ks.load(fis, passphrase);\n-                            return ks;\n-                        }\n-                    }\n-                });\n+        final String testKeys = System.getProperty(\"test.src\")\n+                + \"\/\"\n+                + \"..\/..\/..\/..\/..\/..\/test\/lib\/jdk\/test\/lib\/net\/testkeys\";\n+        try (final FileInputStream fis = new FileInputStream(testKeys)) {\n+            final char[] passphrase = \"passphrase\".toCharArray();\n+            final KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n+            ks.load(fis, passphrase);\n+            return ks;\n+        }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/HttpsParametersClientAuthTest.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import java.net.*;\n@@ -28,3 +27,1 @@\n-import java.nio.*;\n-import java.nio.channels.*;\n-import java.util.*;\n+\n@@ -32,3 +29,0 @@\n-import javax.security.auth.*;\n-import javax.security.auth.callback.*;\n-import javax.security.auth.login.*;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/LogFilter.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.util.*;\n@@ -43,2 +42,0 @@\n-import java.security.*;\n-import java.security.cert.*;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/SelCacheTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import java.util.*;\n@@ -29,2 +28,1 @@\n-import java.security.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/SimpleFileServer.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -39,3 +38,1 @@\n-import java.security.*;\n-import javax.security.auth.callback.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test14.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -39,3 +38,1 @@\n-import java.security.*;\n-import javax.security.auth.callback.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test2.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -38,1 +37,0 @@\n-import java.util.regex.Pattern.*;\n@@ -41,2 +39,0 @@\n-import java.security.*;\n-import javax.net.ssl.*;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test3.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -40,2 +39,0 @@\n-import java.security.*;\n-import javax.net.ssl.*;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test4.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -40,2 +39,0 @@\n-import java.security.*;\n-import javax.net.ssl.*;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test5.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -39,3 +38,1 @@\n-import java.security.*;\n-import javax.security.auth.callback.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test6.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -39,3 +38,1 @@\n-import java.security.*;\n-import javax.security.auth.callback.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test7.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -39,3 +38,1 @@\n-import java.security.*;\n-import javax.security.auth.callback.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/Test8.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -40,3 +39,1 @@\n-import java.security.*;\n-import java.security.cert.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/TestLogging.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -39,3 +38,1 @@\n-import java.security.*;\n-import java.security.cert.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/B6339483.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -39,3 +38,1 @@\n-import java.security.*;\n-import java.security.cert.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/B6341616.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -39,3 +38,1 @@\n-import java.security.*;\n-import java.security.cert.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/B6526158.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import java.util.*;\n@@ -40,3 +39,1 @@\n-import java.security.*;\n-import java.security.cert.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/B6526913.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.util.*;\n@@ -38,3 +37,0 @@\n-import java.security.*;\n-import java.security.cert.*;\n-import javax.net.ssl.*;\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/B6529200.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.*;\n@@ -39,3 +38,1 @@\n-import java.security.*;\n-import java.security.cert.*;\n-import javax.net.ssl.*;\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/B6744329.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Tests for FileServerHandler with SecurityManager\n+ * @summary Tests file permission checks during the creation of a `FileServerHandler`\n@@ -248,1 +248,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/RootDirPermissionsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}