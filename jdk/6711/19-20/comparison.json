{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.nio.ByteBuffer;\n@@ -35,0 +36,1 @@\n+import java.util.function.BiFunction;\n@@ -37,0 +39,1 @@\n+import java.util.function.ToLongBiFunction;\n@@ -187,0 +190,62 @@\n+    \/*\n+     * Special test for stream-to-file \/ file-to-stream transfer of more than 2 GB.\n+     *\/\n+    static void testMoreThanTwoGB(String direction, BiFunction<Path, Path, InputStream> inputStreamProvider,\n+            BiFunction<Path, Path, OutputStream> outputStreamProvider,\n+            ToLongBiFunction<InputStream, OutputStream> transfer) throws IOException {\n+        \/\/ prepare two temporary files to be compared at the end of the test\n+        \/\/ set the source file name\n+        String sourceName = String.format(\"test3GBSource_transfer%s%s.tmp\", direction,\n+            RND.nextInt(Integer.MAX_VALUE));\n+        Path sourceFile = CWD.resolve(sourceName);\n+\n+        try {\n+            \/\/ set the target file name\n+            String targetName = String.format(\"test3GBTarget_transfer%s%s.tmp\", direction,\n+                RND.nextInt(Integer.MAX_VALUE));\n+            Path targetFile = CWD.resolve(targetName);\n+\n+            try {\n+                \/\/ calculate initial position to be just short of 2GB\n+                final long initPos = 2047*BYTES_PER_WRITE;\n+\n+                \/\/ create the source file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND)) {\n+                    \/\/ set initial position to avoid writing nearly 2GB\n+                    fc.position(initPos);\n+\n+                    \/\/ Add random bytes to the remainder of the file\n+                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n+                    for (int i = 0; i < nw; i++) {\n+                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n+                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n+                        fc.write(src);\n+                    }\n+                }\n+\n+                \/\/ create the target file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE)) {\n+                }\n+\n+                \/\/ performing actual transfer, effectively by multiple invocations of\n+                \/\/ FileChannel.transferFrom(ReadableByteChannel) \/ FileChannel.transferTo(WritableByteChannel)\n+                try (InputStream inputStream = inputStreamProvider.apply(sourceFile, targetFile);\n+                     OutputStream outputStream = outputStreamProvider.apply(sourceFile, targetFile)) {\n+                    long count = transfer.applyAsLong(inputStream, outputStream);\n+\n+                    \/\/ compare reported transferred bytes, must be 3 GB\n+                    \/\/ less the value of the initial position\n+                    assertEquals(count, BYTES_WRITTEN - initPos);\n+                }\n+\n+                \/\/ compare content of both files, failing if different\n+                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n+\n+            } finally {\n+                 Files.delete(targetFile);\n+            }\n+        } finally {\n+            Files.delete(sourceFile);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferToBase.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import java.io.InputStream;\n@@ -27,2 +26,1 @@\n-import java.io.OutputStream;\n-import java.nio.ByteBuffer;\n+import java.io.UncheckedIOException;\n@@ -32,1 +30,0 @@\n-import java.nio.file.Path;\n@@ -34,3 +31,0 @@\n-import org.testng.annotations.Test;\n-\n-import static java.lang.String.format;\n@@ -39,1 +33,1 @@\n-import static org.testng.Assert.assertEquals;\n+import org.testng.annotations.Test;\n@@ -62,27 +56,21 @@\n-        \/\/ prepare two temporary files to be compared at the end of the test\n-        \/\/ set the source file name\n-        String sourceName = String.format(\"test3GBSource_transferFrom%s.tmp\",\n-            RND.nextInt(Integer.MAX_VALUE));\n-        Path sourceFile = CWD.resolve(sourceName);\n-\n-        try {\n-            \/\/ set the target file name\n-            String targetName = String.format(\"test3GBTarget_transferFrom%s.tmp\",\n-                RND.nextInt(Integer.MAX_VALUE));\n-            Path targetFile = CWD.resolve(targetName);\n-\n-            try {\n-                \/\/ calculate initial position to be just short of 2GB\n-                final long initPos = 2047*BYTES_PER_WRITE;\n-\n-                \/\/ create the source file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND)) {\n-                    \/\/ set initial position to avoid writing nearly 2GB\n-                    fc.position(initPos);\n-\n-                    \/\/ Add random bytes to the remainder of the file\n-                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n-                    for (int i = 0; i < nw; i++) {\n-                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n-                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n-                        fc.write(src);\n+        testMoreThanTwoGB(\"From\",\n+                (sourceFile, targetFile) -> {\n+                    try {\n+                        return Channels.newInputStream(\n+                            Channels.newChannel(new BufferedInputStream(Files.newInputStream(sourceFile))));\n+                    } catch (IOException e) {\n+                        throw new UncheckedIOException(e);\n+                    }\n+                },\n+                (sourceFile, targetFile) -> {\n+                    try {\n+                        return Channels.newOutputStream(FileChannel.open(targetFile, WRITE));\n+                    } catch (IOException e) {\n+                        throw new UncheckedIOException(e);\n+                    }\n+                },\n+                (inputStream, outputStream) -> {\n+                    try {\n+                        return inputStream.transferTo(outputStream);\n+                    } catch (IOException e) {\n+                        throw new UncheckedIOException(e);\n@@ -91,26 +79,1 @@\n-\n-                \/\/ create the target file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE)) {\n-                }\n-\n-                \/\/ performing actual transfer, effectively by multiple invocations of\n-                \/\/ FileChannel.transferFrom(ReadableByteChannel)\n-                try (InputStream inputStream = Channels.newInputStream(Channels.newChannel(\n-                        new BufferedInputStream(Files.newInputStream(sourceFile))));\n-                     OutputStream outputStream = Channels.newOutputStream(FileChannel.open(targetFile, WRITE))) {\n-                    long count = inputStream.transferTo(outputStream);\n-\n-                    \/\/ compare reported transferred bytes, must be 3 GB\n-                    \/\/ less the value of the initial position\n-                    assertEquals(count, BYTES_WRITTEN - initPos);\n-                }\n-\n-                \/\/ compare content of both files, failing if different\n-                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n-\n-            } finally {\n-                 Files.delete(targetFile);\n-            }\n-        } finally {\n-            Files.delete(sourceFile);\n-        }\n+        );\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo_2GB_transferFrom.java","additions":24,"deletions":61,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-import java.io.InputStream;\n@@ -26,2 +25,1 @@\n-import java.io.OutputStream;\n-import java.nio.ByteBuffer;\n+import java.io.UncheckedIOException;\n@@ -31,1 +29,0 @@\n-import java.nio.file.Path;\n@@ -33,3 +30,0 @@\n-import org.testng.annotations.Test;\n-\n-import static java.lang.String.format;\n@@ -38,1 +32,1 @@\n-import static org.testng.Assert.assertEquals;\n+import org.testng.annotations.Test;\n@@ -61,28 +55,6 @@\n-        \/\/ prepare two temporary files to be compared at the end of the test\n-        \/\/ set the source file name\n-        String sourceName = String.format(\"test3GBSource_transferTo%s.tmp\",\n-            RND.nextInt(Integer.MAX_VALUE));\n-        Path sourceFile = CWD.resolve(sourceName);\n-\n-        try {\n-            \/\/ set the target file name\n-            String targetName = String.format(\"test3GBTarget_transferTo%s.tmp\",\n-                RND.nextInt(Integer.MAX_VALUE));\n-            Path targetFile = CWD.resolve(targetName);\n-\n-            try {\n-                \/\/ calculate initial position to be just short of 2GB\n-                final long initPos = 2047*BYTES_PER_WRITE;\n-\n-                \/\/ create the source file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND)) {\n-                    \/\/ set initial position to avoid writing nearly 2GB\n-                    fc.position(initPos);\n-\n-                    \/\/ Add random bytes to the remainder of the file\n-                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n-                    for (int i = 0; i < nw; i++) {\n-                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n-                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n-                        fc.write(src);\n-                    }\n+        testMoreThanTwoGB(\"To\",\n+            (sourceFile, targetFile) -> {\n+                try {\n+                    return Channels.newInputStream(FileChannel.open(sourceFile));\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n@@ -90,3 +62,6 @@\n-\n-                \/\/ create the target file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE)) {\n+            },\n+            (sourceFile, targetFile) -> {\n+                try {\n+                    return Channels.newOutputStream(FileChannel.open(targetFile, WRITE));\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n@@ -94,10 +69,6 @@\n-\n-                \/\/ perform actual transfer, effectively by multiple invocations\n-                \/\/ of FileChannel.transferTo(WritableByteChannel)\n-                try (InputStream inputStream = Channels.newInputStream(FileChannel.open(sourceFile));\n-                     OutputStream outputStream = Channels.newOutputStream(FileChannel.open(targetFile, WRITE))) {\n-                    long count = inputStream.transferTo(outputStream);\n-\n-                    \/\/ compare reported transferred bytes, must be 3 GB\n-                    \/\/ less the value of the initial position\n-                    assertEquals(count, BYTES_WRITTEN - initPos);\n+            },\n+            (inputStream, outputStream) -> {\n+                try {\n+                    return inputStream.transferTo(outputStream);\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n@@ -105,6 +76,0 @@\n-\n-                \/\/ compare content of both files, failing if different\n-                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n-\n-            } finally {\n-                 Files.delete(targetFile);\n@@ -112,3 +77,1 @@\n-        } finally {\n-            Files.delete(sourceFile);\n-        }\n+        );\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo_2GB_transferTo.java","additions":21,"deletions":58,"binary":false,"changes":79,"status":"modified"}]}