{"files":[{"patch":"@@ -221,0 +221,6 @@\n+    \/** Whether to force suppression of deprecation and preview warnings.\n+     *  This happens when attributing import statements for JDK 9+.\n+     *  @see Feature#DEPRECATION_ON_IMPORT\n+     *\/\n+    private boolean importSuppression;\n+\n@@ -231,0 +237,6 @@\n+    boolean setImportSuppression(boolean newImportSuppression) {\n+        boolean prev = importSuppression;\n+        importSuppression = newImportSuppression;\n+        return prev;\n+    }\n+\n@@ -264,1 +276,1 @@\n-        if (!lint.isSuppressed(LintCategory.PREVIEW))\n+        if (!importSuppression && !lint.isSuppressed(LintCategory.PREVIEW))\n@@ -268,9 +280,0 @@\n-    \/** Log a preview warning.\n-     *  @param pos        Position to be used for error reporting.\n-     *  @param msg        A Warning describing the problem.\n-     *\/\n-    public void warnDeclaredUsingPreview(DiagnosticPosition pos, Symbol sym) {\n-        if (!lint.isSuppressed(LintCategory.PREVIEW))\n-            preview.reportPreviewWarning(pos, LintWarnings.DeclaredUsingPreview(kindName(sym), sym));\n-    }\n-\n@@ -3776,2 +3779,2 @@\n-        if ( (s.isDeprecatedForRemoval()\n-                || s.isDeprecated() && !other.isDeprecated())\n+        if (!importSuppression\n+                && (s.isDeprecatedForRemoval() || s.isDeprecated() && !other.isDeprecated())\n@@ -3826,1 +3829,1 @@\n-                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, LintWarnings.IsPreview(s)));\n+                    warnPreviewAPI(pos, LintWarnings.IsPreview(s));\n@@ -3829,1 +3832,1 @@\n-                    deferredLintHandler.report(_l -> warnPreviewAPI(pos, LintWarnings.IsPreviewReflective(s)));\n+                warnPreviewAPI(pos, LintWarnings.IsPreviewReflective(s));\n@@ -3838,1 +3841,1 @@\n-                deferredLintHandler.report(_l -> warnDeclaredUsingPreview(pos, s));\n+                warnPreviewAPI(pos, LintWarnings.DeclaredUsingPreview(kindName(s), s));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":18,"deletions":15,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -530,2 +530,1 @@\n-            Lint prevLint = chk.setLint(allowDeprecationOnImport ?\n-                    lint : lint.suppress(LintCategory.DEPRECATION, LintCategory.REMOVAL, LintCategory.PREVIEW));\n+            boolean prevImportSuppression = chk.setImportSuppression(!allowDeprecationOnImport);\n@@ -539,1 +538,1 @@\n-                chk.setLint(prevLint);\n+                chk.setImportSuppression(prevImportSuppression);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -193,2 +193,2 @@\n-                List.of(\"Use.java:5:13: compiler.warn.is.preview: preview.api.Outer\",\n-                        \"Use.java:7:35: compiler.warn.is.preview: preview.api.Outer\",\n+                List.of(\"Use.java:7:35: compiler.warn.is.preview: preview.api.Outer\",\n+                        \"Use.java:5:13: compiler.warn.is.preview: preview.api.Outer\",\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewAutoSuppress.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}