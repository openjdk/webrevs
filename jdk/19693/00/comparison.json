{"files":[{"patch":"@@ -35,1 +35,1 @@\n-                               : JavaThread(&CompilerThread::thread_entry) {\n+                               : JavaThread(&CompilerThread::thread_entry, 0, mtCompiler) {\n@@ -46,3 +46,0 @@\n-  \/\/ Compiler uses resource area for compilation, let's bias it to mtCompiler\n-  resource_area()->bias_to(mtCompiler);\n-\n","filename":"src\/hotspot\/share\/compiler\/compilerThread.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -212,1 +212,6 @@\n-Arena::Arena(MEMFLAGS flag, Tag tag, size_t init_size) : _flags(flag), _tag(tag), _size_in_bytes(0)  {\n+Arena::Arena(MEMFLAGS flag, Tag tag, size_t init_size) :\n+  _flags(flag), _tag(tag),\n+  _size_in_bytes(0),\n+  _first(nullptr), _chunk(nullptr),\n+  _hwm(nullptr), _max(nullptr)\n+{\n@@ -222,9 +227,0 @@\n-Arena::Arena(MEMFLAGS flag, Tag tag) : _flags(flag), _tag(tag), _size_in_bytes(0) {\n-  _chunk = ChunkPool::allocate_chunk(Chunk::init_size, AllocFailStrategy::EXIT_OOM);\n-  _first = _chunk;\n-  _hwm = _chunk->bottom();      \/\/ Save the cached hwm, max\n-  _max = _chunk->top();\n-  MemTracker::record_new_arena(flag);\n-  set_size_in_bytes(Chunk::init_size);\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -97,0 +97,6 @@\n+private:\n+\n+  const MEMFLAGS _flags;        \/\/ Memory tracking flags\n+  const Tag _tag;\n+  size_t _size_in_bytes;        \/\/ Size of arena (used for native memory tracking)\n+\n@@ -102,3 +108,0 @@\n-  MEMFLAGS    _flags;           \/\/ Memory tracking flags\n-  const Tag _tag;\n-  uint32_t _init_size;\n@@ -109,0 +112,1 @@\n+\n@@ -111,1 +115,0 @@\n-  size_t _size_in_bytes;        \/\/ Size of arena (used for native memory tracking)\n@@ -127,2 +130,1 @@\n-  Arena(MEMFLAGS memflag, Tag tag = Tag::tag_other);\n-  Arena(MEMFLAGS memflag, Tag tag, size_t init_size);\n+  Arena(MEMFLAGS memflag, Tag tag = Tag::tag_other, size_t init_size = Chunk::init_size);\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,11 +33,0 @@\n-void ResourceArea::bias_to(MEMFLAGS new_flags) {\n-  if (new_flags != _flags) {\n-    size_t size = size_in_bytes();\n-    MemTracker::record_arena_size_change(-ssize_t(size), _flags);\n-    MemTracker::record_arena_free(_flags);\n-    MemTracker::record_new_arena(new_flags);\n-    MemTracker::record_arena_size_change(ssize_t(size), new_flags);\n-    _flags = new_flags;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/resourceArea.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -63,4 +63,0 @@\n-  \/\/ Bias this resource area to specific memory type\n-  \/\/ (by default, ResourceArea is tagged as mtThread, per-thread general purpose storage)\n-  void bias_to(MEMFLAGS flags);\n-\n@@ -84,1 +80,1 @@\n-      _size_in_bytes(area->_size_in_bytes)\n+      _size_in_bytes(area->size_in_bytes())\n","filename":"src\/hotspot\/share\/memory\/resourceArea.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3778,1 +3778,2 @@\n-  JavaThread* thread = new JavaThread(true);\n+  JavaThread* thread = new JavaThread();\n+  thread->set_is_attaching_via_jni();\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-  HandleArea(HandleArea* prev) : Arena(mtThread, Tag::tag_ha, Chunk::tiny_size) {\n+  HandleArea(MEMFLAGS flags, HandleArea* prev) : Arena(flags, Tag::tag_ha, Chunk::tiny_size) {\n","filename":"src\/hotspot\/share\/runtime\/handles.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -412,1 +412,2 @@\n-JavaThread::JavaThread() :\n+JavaThread::JavaThread(MEMFLAGS flags) :\n+  Thread(flags),\n@@ -414,1 +415,0 @@\n-\n@@ -528,7 +528,0 @@\n-JavaThread::JavaThread(bool is_attaching_via_jni) : JavaThread() {\n-  if (is_attaching_via_jni) {\n-    _jni_attach_state = _attaching_via_jni;\n-  }\n-}\n-\n-\n@@ -637,2 +630,1 @@\n-JavaThread::JavaThread(ThreadFunction entry_point, size_t stack_sz) : JavaThread() {\n-  _jni_attach_state = _not_attaching_via_jni;\n+JavaThread::JavaThread(ThreadFunction entry_point, size_t stack_sz, MEMFLAGS flags) : JavaThread(flags) {\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -481,3 +481,2 @@\n-  JavaThread();                            \/\/ delegating constructor\n-  JavaThread(bool is_attaching_via_jni);   \/\/ for main thread and JNI attached threads\n-  JavaThread(ThreadFunction entry_point, size_t stack_size = 0);\n+  JavaThread(MEMFLAGS flags = mtThread);   \/\/ delegating constructor\n+  JavaThread(ThreadFunction entry_point, size_t stack_size = 0, MEMFLAGS flags = mtThread);\n@@ -1139,0 +1138,1 @@\n+  inline void set_is_attaching_via_jni();\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -199,0 +199,5 @@\n+inline void JavaThread::set_is_attaching_via_jni() {\n+  _jni_attach_state = _attaching_via_jni;\n+  OrderAccess::fence();\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-Thread::Thread() {\n+Thread::Thread(MEMFLAGS flags) {\n@@ -81,1 +81,1 @@\n-  set_resource_area(new (mtThread)ResourceArea());\n+  set_resource_area(new (flags) ResourceArea(flags));\n@@ -83,1 +83,1 @@\n-  set_handle_area(new (mtThread) HandleArea(nullptr));\n+  set_handle_area(new (flags) HandleArea(flags, nullptr));\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-  Thread();\n+  Thread(MEMFLAGS flag = mtThread);\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}