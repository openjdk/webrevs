{"files":[{"patch":"@@ -143,14 +143,10 @@\n-  \/\/ The counters are only active if the logging is enabled, but\n-  \/\/ we print to the passed in outputStream as requested.\n-  if (log_is_enabled(Info, perf, class, link)) {\n-    st->print_cr(\"ClassLoader:\");\n-    st->print_cr(\"  clinit:               \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", ClassLoader::class_init_time_ms(), ClassLoader::class_init_count());\n-    st->print_cr(\"  link methods:         \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_ik_link_methods_time->get_value())   , _perf_ik_link_methods_count->get_value());\n-    st->print_cr(\"  method adapters:      \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_method_adapters_time->get_value())   , _perf_method_adapters_count->get_value());\n-    st->print_cr(\"  resolve...\");\n-    st->print_cr(\"    invokedynamic:   \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_resolve_indy_time->get_value())         , _perf_resolve_indy_count->get_value());\n-    st->print_cr(\"    invokehandle:    \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_resolve_invokehandle_time->get_value()) , _perf_resolve_invokehandle_count->get_value());\n-    st->print_cr(\"    CP_MethodHandle: \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_resolve_mh_time->get_value())           , _perf_resolve_mh_count->get_value());\n-    st->print_cr(\"    CP_MethodType:   \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_resolve_mt_time->get_value())           , _perf_resolve_mt_count->get_value());\n-    st->cr();\n-  }\n+  st->print_cr(\"ClassLoader:\");\n+  st->print_cr(\"  clinit:               \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", ClassLoader::class_init_time_ms(), ClassLoader::class_init_count());\n+  st->print_cr(\"  link methods:         \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_ik_link_methods_time->get_value())   , _perf_ik_link_methods_count->get_value());\n+  st->print_cr(\"  method adapters:      \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_method_adapters_time->get_value())   , _perf_method_adapters_count->get_value());\n+  st->print_cr(\"  resolve...\");\n+  st->print_cr(\"    invokedynamic:   \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_resolve_indy_time->get_value())         , _perf_resolve_indy_count->get_value());\n+  st->print_cr(\"    invokehandle:    \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_resolve_invokehandle_time->get_value()) , _perf_resolve_invokehandle_count->get_value());\n+  st->print_cr(\"    CP_MethodHandle: \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_resolve_mh_time->get_value())           , _perf_resolve_mh_count->get_value());\n+  st->print_cr(\"    CP_MethodType:   \" JLONG_FORMAT \"ms \/ \" JLONG_FORMAT \" events\", Management::ticks_to_ms(_perf_resolve_mt_time->get_value())           , _perf_resolve_mt_count->get_value());\n+  st->cr();\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -362,1 +362,5 @@\n-  ClassLoader::print_counters(tty);\n+  if (log_is_enabled(Info, perf, class, link)) {\n+    LogStreamHandle(Info, perf, class, link) log;\n+    log.print_cr(\"At VM exit:\");\n+    ClassLoader::print_counters(&log);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 8144874\n+ * @bug 8144874 8343633\n@@ -39,0 +39,4 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n@@ -60,0 +64,9 @@\n+    public static void checkOutput(String file, String decorators) throws Exception {\n+        List<String> allLines = Files.readAllLines(Path.of(file));\n+        for (String line : allLines) {\n+            if (!line.contains(decorators)) {\n+                throw new RuntimeException(\"Logging should contain decorators \" + decorators);\n+            }\n+        }\n+    }\n+\n@@ -77,0 +90,9 @@\n+\n+        \/\/ (3) Test perf+class+link writes to a file, not tty.\n+        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:perf+class+link:output.log\",\n+                                                              ClassResolutionTestMain.class.getName());\n+        o = new OutputAnalyzer(pb.start());\n+        o.shouldHaveExitValue(0);\n+        o.shouldNotContain(\"[perf,class,link]\");\n+\n+        checkOutput(\"output.log\", \"[perf,class,link]\");\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ClassResolutionTest.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"}]}