{"files":[{"patch":"@@ -3818,0 +3818,14 @@\n+static void thp_pagesize_fallback() {\n+    \/\/ Older kernels won't publish the THP page size. Fall back to default static huge page size,\n+    \/\/ since that is likely to be the THP page size as well. Don't do it if the page size is considered\n+    \/\/ too large to avoid large alignment waste. If static huge page size is unknown, use educated guess.\n+    log_info(pagesize) (\"Cannot determine THP page size (kernel < 4.10 ?)\");\n+    if (HugePages::supports_static_hugepages()) {\n+        log_info(pagesize) (\"Assuming THP page size to be same as default static hugepage size (limit 16M)\");\n+        _large_page_size = MIN2(HugePages::default_static_hugepage_size(), 16 * M);\n+        return;\n+    }\n+    log_info(pagesize) (\"Assuming THP page size to be 2M\");\n+    _large_page_size = 2 * M;\n+}\n+\n@@ -3877,1 +3891,0 @@\n-    assert(HugePages::thp_pagesize() > 0, \"Missing OS info\");\n@@ -3879,0 +3892,3 @@\n+    if (_large_page_size == 0) {\n+        thp_pagesize_fallback();\n+    }\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -128,1 +128,10 @@\n-            String thpPageSizeString = buildSizeString(configuration.getThpPageSize());\n+            long thpPageSize = configuration.getThpPageSize();\n+            if (thpPageSize == 0) {\n+                thpPageSize = configuration.getStaticDefaultHugePageSize();\n+                if (thpPageSize != 0) {\n+                    thpPageSize = Math.min(thpPageSize, 16 * 1024 * 1024);\n+                } else {\n+                    thpPageSize = 2 * 1024 * 1024;\n+                }\n+            }\n+            String thpPageSizeString = buildSizeString(thpPageSize);\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestHugePageDecisionsAtVMStartup.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}