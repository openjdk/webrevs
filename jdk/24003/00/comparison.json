{"files":[{"patch":"@@ -564,1 +564,1 @@\n-  return is_dumping_static_archive();\n+  return is_dumping_classic_static_archive() || is_dumping_final_static_archive();\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -826,0 +826,3 @@\n+      \/\/ We are in the JVM that runs the training run. Continue execution,\n+      \/\/ so that it can finish all clean-up and return the correct exit\n+      \/\/ code to the OS.\n@@ -827,1 +830,0 @@\n-      vm_exit(0);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary -XX:AOTMode=record should not interfere with app execution: (1) thread creation; (2) exit code\n+ * @bug 8351327\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @build TrainingRun\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar MyTestApp\n+ * @run driver TrainingRun AOT\n+ *\/\n+\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TrainingRun {\n+    static final String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n+    static final String mainClass = \"MyTestApp\";\n+\n+    public static void main(String[] args) throws Exception {\n+        (new Tester()).run(args);\n+    }\n+\n+    static class Tester extends CDSAppTester {\n+        public Tester() {\n+            super(mainClass);\n+\n+            \/\/ CDSAppTester usually wants the app to return exit value 0, but this test\n+            \/\/ checks whether the training run can return 2.\n+            setCheckExitValue(false);\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return appJar;\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {\n+                mainClass,\n+            };\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) {\n+            if (runMode.isApplicationExecuted()) {\n+                out.shouldHaveExitValue(2);\n+                out.shouldContain(\"Hello: x is 1\");\n+            }\n+        }\n+    }\n+}\n+\n+class MyTestApp {\n+    volatile static int x = 0;\n+\n+    public static void main(String args[]) throws Exception {\n+        Thread t = new Thread(() -> {\n+                x = 1;\n+        });\n+        t.start();\n+        t.join();\n+\n+        if (x != 1) {\n+            throw new RuntimeException(\"x should be 1 but is \" + x);\n+        }\n+        System.out.println(\"Hello: x is \" + x);\n+        System.out.println(\"I am calling System.exit(2)\");\n+        System.exit(2);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/TrainingRun.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -59,1 +59,0 @@\n-        \/\/ Old workflow\n@@ -92,1 +91,1 @@\n-        ASSEMBLY,       \/\/ JEP 483\n+        ASSEMBLY,       \/\/ JEP 483 (assembly phase, app logic not executed)\n@@ -101,0 +100,18 @@\n+\n+        \/\/ When <code>CDSAppTester::checkExecution(out, runMode)<\/code> is called, has the application been\n+        \/\/ executed? If so, <code>out<\/code> should contain logs printed by the application's own logic.\n+        public boolean isApplicationExecuted() {\n+            return (this != ASSEMBLY) && (this != DUMP_STATIC);\n+        }\n+    }\n+\n+    public boolean isDumping(RunMode runMode) {\n+        if (isStaticWorkflow()) {\n+            return runMode == RunMode.DUMP_STATIC;\n+        } else if (isDynamicWorkflow()) {\n+            return runMode == RunMode.DUMP_DYNAMIC;\n+        } else if (isAOTWorkflow()) {\n+            return runMode == RunMode.TRAINING || runMode == RunMode.ASSEMBLY;\n+        } else {\n+            return false;\n+        }\n@@ -187,1 +204,3 @@\n-                                                             \"class+load=debug\"));\n+                                                             \"class+load=debug\",\n+                                                             \"cds=debug\",\n+                                                             \"cds+class=debug\"));\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"}]}