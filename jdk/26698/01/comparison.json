{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import java.net.URI;\n-import java.net.CookieStore;\n-import java.net.HttpCookie;\n-import java.net.URISyntaxException;\n@@ -75,0 +71,1 @@\n+    @Override\n@@ -112,0 +109,1 @@\n+    @Override\n@@ -130,1 +128,1 @@\n-        return cookies;\n+        return Collections.unmodifiableList(cookies);\n@@ -136,0 +134,1 @@\n+    @Override\n@@ -159,0 +158,1 @@\n+    @Override\n@@ -168,1 +168,1 @@\n-                if (cookies == null || cookies.size() == 0) {\n+                if (cookies == null || cookies.isEmpty()) {\n@@ -179,1 +179,1 @@\n-        return uris;\n+        return Collections.unmodifiableList(uris);\n@@ -186,0 +186,1 @@\n+    @Override\n@@ -207,0 +208,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/net\/InMemoryCookieStore.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.net.CookieManager;\n+import java.net.CookieStore;\n+import java.net.HttpCookie;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+\/*\n+ * @test\n+ * @bug 8365086\n+ * @summary verify that the implementation of java.net.CookieStore works\n+ *          as expected\n+ * @run junit CookieStoreTest\n+ *\/\n+class CookieStoreTest {\n+\n+    \/\/ neither the scheme, host nor the port matters in this test\n+    private static final URI COOKIE_TEST_URI = URI.create(\"https:\/\/127.0.0.1:12345\");\n+\n+    static List<Arguments> cookieStores() {\n+        final List<Arguments> params = new ArrayList<>();\n+        \/\/ empty CookieStore\n+        params.add(Arguments.of(new CookieManager().getCookieStore(), true));\n+\n+        final CookieStore cookieStore = new CookieManager().getCookieStore();\n+        cookieStore.add(COOKIE_TEST_URI, new HttpCookie(\"foo\", \"bar\"));\n+        \/\/ non-empty CookieStore\n+        params.add(Arguments.of(cookieStore, false));\n+\n+        return params;\n+    }\n+\n+    \/*\n+     * Verify that the List returned by CookieStore.getURIs() is immutable.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"cookieStores\")\n+    void testImmutableGetURIs(final CookieStore cookieStore, final boolean expectEmpty) {\n+        final List<URI> uris = cookieStore.getURIs();\n+        assertNotNull(uris, \"CookieStore.getURIs() returned null\");\n+        assertEquals(expectEmpty, uris.isEmpty(), \"CookieStore.getURIs() returned: \" + uris);\n+        assertImmutableList(uris, COOKIE_TEST_URI);\n+    }\n+\n+    \/*\n+     * Verify that the List returned by CookieStore.getCookies() is immutable.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"cookieStores\")\n+    void testImmutableGetCookies(final CookieStore cookieStore, final boolean expectEmpty) {\n+        final List<HttpCookie> cookies = cookieStore.getCookies();\n+        assertNotNull(cookies, \"CookieStore.getCookies() returned null\");\n+        assertEquals(expectEmpty, cookies.isEmpty(), \"CookieStore.getCookies() returned: \" + cookies);\n+        assertImmutableList(cookies, new HttpCookie(\"hello\", \"world\"));\n+    }\n+\n+    \/*\n+     * Verify that the List returned by CookieStore.get(URI) is immutable.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"cookieStores\")\n+    void testImmutableGetCookiesForURI(final CookieStore cookieStore, final boolean expectEmpty) {\n+        final List<HttpCookie> cookies = cookieStore.get(COOKIE_TEST_URI);\n+        assertNotNull(cookies, \"CookieStore.get(URI) returned null\");\n+        assertEquals(expectEmpty, cookies.isEmpty(), \"CookieStore.get(URI) returned: \" + cookies);\n+        assertImmutableList(cookies, new HttpCookie(\"hello\", \"world\"));\n+    }\n+\n+    \/*\n+     * Verifies that the attempt to add or remove the element to\/from the list will fail\n+     * due to the list being immutable.\n+     *\/\n+    private static <T> void assertImmutableList(final List<T> list, T elementToAddOrRemove) {\n+        \/\/ the list is expected to be immutable, so the attempt to add or remove\n+        \/\/ an element must fail\n+        assertThrows(UnsupportedOperationException.class, () -> list.add(elementToAddOrRemove));\n+        assertThrows(UnsupportedOperationException.class, () -> list.remove(elementToAddOrRemove));\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/CookieStoreTest.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}