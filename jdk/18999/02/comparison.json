{"files":[{"patch":"@@ -2153,0 +2153,31 @@\n+\/\/ Binary src (Replicate scalar\/immediate)\n+static bool is_vector_scalar_bitwise_pattern(Node* n, Node* m) {\n+  if (n == nullptr || m == nullptr) {\n+    return false;\n+  }\n+\n+  if (m->Opcode() != Op_Replicate) {\n+    return false;\n+  }\n+\n+  switch (n->Opcode()) {\n+    case Op_AndV:\n+    case Op_OrV:\n+    case Op_XorV: {\n+      return true;\n+    }\n+    default:\n+      return false;\n+  }\n+}\n+\n+\/\/ (XorV src (Replicate m1))\n+\/\/ (XorVMask src (MaskAll m1))\n+static bool is_vector_bitwise_not_pattern(Node* n, Node* m) {\n+  if (n != nullptr && m != nullptr) {\n+    return (n->Opcode() == Op_XorV || n->Opcode() == Op_XorVMask) &&\n+           VectorNode::is_all_ones_vector(m);\n+  }\n+  return false;\n+}\n+\n@@ -2156,2 +2187,4 @@\n-  if (is_vshift_con_pattern(n, m)) { \/\/ ShiftV src (ShiftCntV con)\n-    mstack.push(m, Visit);           \/\/ m = ShiftCntV\n+  if (is_vshift_con_pattern(n, m) || \/\/ ShiftV src (ShiftCntV con)\n+      is_vector_bitwise_not_pattern(n, m) ||\n+      is_vector_scalar_bitwise_pattern(n, m)) {\n+    mstack.push(m, Visit);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":35,"deletions":2,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -486,0 +486,124 @@\n+\/\/ vector-immediate and (unpredicated)\n+\n+instruct vand_immI(vReg dst_src, immI5 con) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (AndV dst_src (Replicate con)));\n+  format %{ \"vand_immI $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vand_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_immL(vReg dst_src, immL5 con) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (AndV dst_src (Replicate con)));\n+  format %{ \"vand_immL $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vand_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-scalar and (unpredicated)\n+\n+instruct vand_regI(vReg dst_src, iRegIorL2I src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (AndV dst_src (Replicate src)));\n+  format %{ \"vand_regI $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vand_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_regL(vReg dst_src, iRegL src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (AndV dst_src (Replicate src)));\n+  format %{ \"vand_regL $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vand_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-immediate and (predicated)\n+\n+instruct vand_immI_masked(vReg dst_src, immI5 con, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (AndV (Binary dst_src (Replicate con)) v0));\n+  format %{ \"vand_immI_masked $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vand_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_immL_masked(vReg dst_src, immL5 con, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (AndV (Binary dst_src (Replicate con)) v0));\n+  format %{ \"vand_immL_masked $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vand_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-scalar and (predicated)\n+\n+instruct vand_regI_masked(vReg dst_src, iRegIorL2I src, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (AndV (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vand_regI_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vand_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_regL_masked(vReg dst_src, iRegL src, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (AndV (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vand_regL_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vand_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -518,0 +642,124 @@\n+\/\/ vector-immediate or (unpredicated)\n+\n+instruct vor_immI(vReg dst_src, immI5 con) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (OrV dst_src (Replicate con)));\n+  format %{ \"vor_immI $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vor_vi(as_VectorRegister($dst_src$$reg),\n+              as_VectorRegister($dst_src$$reg),\n+              $con$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vor_immL(vReg dst_src, immL5 con) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (OrV dst_src (Replicate con)));\n+  format %{ \"vor_immL $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vor_vi(as_VectorRegister($dst_src$$reg),\n+              as_VectorRegister($dst_src$$reg),\n+              $con$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-scalar or (unpredicated)\n+\n+instruct vor_regI(vReg dst_src, iRegIorL2I src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (OrV dst_src (Replicate src)));\n+  format %{ \"vor_regI $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vor_vx(as_VectorRegister($dst_src$$reg),\n+              as_VectorRegister($dst_src$$reg),\n+              as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vor_regL(vReg dst_src, iRegL src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (OrV dst_src (Replicate src)));\n+  format %{ \"vor_regL $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vor_vx(as_VectorRegister($dst_src$$reg),\n+              as_VectorRegister($dst_src$$reg),\n+              as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-immediate or (predicated)\n+\n+instruct vor_immI_masked(vReg dst_src, immI5 con, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (OrV (Binary dst_src (Replicate con)) v0));\n+  format %{ \"vor_immI_masked $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vor_vi(as_VectorRegister($dst_src$$reg),\n+              as_VectorRegister($dst_src$$reg),\n+              $con$$constant, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vor_immL_masked(vReg dst_src, immL5 con, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (OrV (Binary dst_src (Replicate con)) v0));\n+  format %{ \"vor_immL_masked $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vor_vi(as_VectorRegister($dst_src$$reg),\n+              as_VectorRegister($dst_src$$reg),\n+              $con$$constant, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-scalar or (predicated)\n+\n+instruct vor_regI_masked(vReg dst_src, iRegIorL2I src, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (OrV (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vor_regI_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vor_vx(as_VectorRegister($dst_src$$reg),\n+              as_VectorRegister($dst_src$$reg),\n+              as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vor_regL_masked(vReg dst_src, iRegL src, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (OrV (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vor_regL_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vor_vx(as_VectorRegister($dst_src$$reg),\n+              as_VectorRegister($dst_src$$reg),\n+              as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -550,0 +798,188 @@\n+\/\/ vector-immediate xor (unpredicated)\n+\n+instruct vxor_immI(vReg dst_src, immI5 con) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (XorV dst_src (Replicate con)));\n+  format %{ \"vxor_immI $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vxor_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vxor_immL(vReg dst_src, immL5 con) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (XorV dst_src (Replicate con)));\n+  format %{ \"vxor_immL $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vxor_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-scalar xor (unpredicated)\n+\n+instruct vxor_regI(vReg dst_src, iRegIorL2I src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (XorV dst_src (Replicate src)));\n+  format %{ \"vxor_regI $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vxor_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vxor_regL(vReg dst_src, iRegL src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (XorV dst_src (Replicate src)));\n+  format %{ \"vxor_regL $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vxor_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-immediate xor (predicated)\n+\n+instruct vxor_immI_masked(vReg dst_src, immI5 con, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (XorV (Binary dst_src (Replicate con)) v0));\n+  format %{ \"vxor_immI_masked $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vxor_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vxor_immL_masked(vReg dst_src, immL5 con, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (XorV (Binary dst_src (Replicate con)) v0));\n+  format %{ \"vxor_immL_masked $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vxor_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               $con$$constant, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector-scalar xor (predicated)\n+\n+instruct vxor_regI_masked(vReg dst_src, iRegIorL2I src, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (XorV (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vxor_regI_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vxor_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vxor_regL_masked(vReg dst_src, iRegL src, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (XorV (Binary dst_src (Replicate src)) v0));\n+  format %{ \"vxor_regL_masked $dst_src, $dst_src, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vxor_vx(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               as_Register($src$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ ------------------------------ Vector not -----------------------------------\n+\n+\/\/ vector not\n+\n+instruct vnotI(vReg dst, vReg src, immI_M1 m1) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (XorV src (Replicate m1)));\n+  format %{ \"vnotI $dst, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vxor_vi(as_VectorRegister($dst$$reg),\n+               as_VectorRegister($src$$reg),\n+               -1);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vnotL(vReg dst, vReg src, immL_M1 m1) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (XorV src (Replicate m1)));\n+  format %{ \"vnotL $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vxor_vi(as_VectorRegister($dst$$reg),\n+               as_VectorRegister($src$$reg),\n+               -1);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector not - predicated\n+\n+instruct vnotI_masked(vReg dst_src, immI_M1 m1, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (XorV (Binary dst_src (Replicate m1)) v0));\n+  format %{ \"vnotI_masked $dst_src, $dst_src, $v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vxor_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               -1, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vnotL_masked(vReg dst_src, immI_M1 m1, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (XorV (Binary dst_src (Replicate m1)) v0));\n+  format %{ \"vnotL_masked $dst_src, $dst_src, $v0\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vxor_vi(as_VectorRegister($dst_src$$reg),\n+               as_VectorRegister($dst_src$$reg),\n+               -1, Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":436,"deletions":0,"binary":false,"changes":436,"status":"modified"}]}