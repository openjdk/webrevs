{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,6 +25,8 @@\n-  @test\n-  @bug 5045936 5055171\n-  @summary Tests that there is no ClassCastException thrown in printing\n-   checkbox and scrollbar with XAWT\n-  @key printer\n-  @run applet\/manual=yesno PrintCheckboxManualTest.html\n+ * @test\n+ * @bug 5045936 5055171\n+ * @summary Tests that there is no ClassCastException thrown in printing\n+ *          checkbox and scrollbar with XAWT\n+ * @key printer\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PrintCheckboxManualTest\n@@ -33,37 +35,29 @@\n-\/\/ Note there is no @ in front of test above.  This is so that the\n-\/\/  harness will not mistake this file as a test file.  It should\n-\/\/  only see the html file as a test file. (the harness runs all\n-\/\/  valid test files, so it would run this test twice if this file\n-\/\/  were valid as well as the html file.)\n-\/\/ Also, note the area= after Your Name in the author tag.  Here, you\n-\/\/  should put which functional area the test falls in.  See the\n-\/\/  AWT-core home page -> test areas and\/or -> AWT team  for a list of\n-\/\/  areas.\n-\n-\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-\n-\n-\/\/Manual tests should run as applet tests if possible because they\n-\/\/ get their environments cleaned up, including AWT threads, any\n-\/\/ test created threads, and any system resources used by the test\n-\/\/ such as file descriptors.  (This is normally not a problem as\n-\/\/ main tests usually run in a separate VM, however on some platforms\n-\/\/ such as the Mac, separate VMs are not possible and non-applet\n-\/\/ tests will cause problems).  Also, you don't have to worry about\n-\/\/ synchronisation stuff in Applet tests the way you do in main\n-\/\/ tests...\n-\n-\n-public class PrintCheckboxManualTest extends Panel\n-{\n-    \/\/Declare things used in the test, like buttons and labels here\n-    Frame f;\n-\n-    public static void main(String[] args) {\n-        PrintCheckboxManualTest a = new PrintCheckboxManualTest();\n-\n-        a.init();\n-        a.start();\n+import java.awt.Button;\n+import java.awt.Checkbox;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.PrintJob;\n+import java.awt.Scrollbar;\n+import java.awt.Toolkit;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class PrintCheckboxManualTest extends Panel {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1. Click the 'Print' button on the frame\n+            2. Select a printer in the print dialog and proceed\n+            3. If the frame with checkbox and button on it is printed successfully test PASSED else FAILED.\n+        \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testUI(PrintCheckboxManualTest::createTestUI)\n+                .build()\n+                .awaitAndCheck();\n@@ -72,24 +66,1 @@\n-    public void init()\n-    {\n-        \/\/Create instructions for the user here, as well as set up\n-        \/\/ the environment -- set the layout manager, add buttons,\n-        \/\/ etc.\n-        this.setLayout (new BorderLayout ());\n-\n-        String[] instructions =\n-        {\n-            \"Linux or Solaris with XToolkit ONLY!\",\n-            \"1. Click the 'Print' button on the frame\",\n-            \"2. Select a printer in the print dialog and proceed\",\n-            \"3. If the frame with checkbox and button on it is printed successfully test PASSED else FAILED\"\n-        };\n-        Sysout.createDialogWithInstructions( instructions );\n-\n-    }\/\/End  init()\n-\n-    public void start ()\n-    {\n-        \/\/Get things going.  Request focus, set size, et cetera\n-        setSize (200,200);\n-        setVisible(true);\n-        validate();\n+    private static Frame createTestUI() {\n@@ -97,6 +68,1 @@\n-        \/\/What would normally go into main() will probably go here.\n-        \/\/Use System.out.println for diagnostic messages that you want\n-        \/\/ to read after the test is done.\n-        \/\/Use Sysout.println for messages you want the tester to read.\n-\n-        f = new Frame(\"Print checkbox\");\n+        Frame f = new Frame(\"Print checkbox\");\n@@ -114,4 +80,2 @@\n-        b.addActionListener(new ActionListener()\n-        {\n-        public void actionPerformed(ActionEvent ev)\n-        {\n+        b.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent ev) {\n@@ -119,20 +83,11 @@\n-                if (pj != null)\n-                {\n-                        try\n-                        {\n-                                Graphics g = pj.getGraphics();\n-                                f.printAll(g);\n-                                g.dispose();\n-                                pj.end();\n-                                Sysout.println(\"Test PASSED\");\n-                        }\n-                        catch (ClassCastException cce)\n-                        {\n-                                Sysout.println(\"Test FAILED: ClassCastException\");\n-\/\/                              throw new RuntimeException(\"Test FAILED: ClassCastException\", cce);\n-                        }\n-                        catch (Exception e)\n-                        {\n-                                Sysout.println(\"Test FAILED: unknown Exception\");\n-\/\/                              throw new Error(\"Test FAILED: unknown exception\", e);\n-                        }\n+                if (pj != null) {\n+                    try {\n+                        Graphics g = pj.getGraphics();\n+                        f.printAll(g);\n+                        g.dispose();\n+                        pj.end();\n+                    } catch (ClassCastException cce) {\n+                        throw new RuntimeException(\"Test FAILED: ClassCastException\", cce);\n+                    } catch (Exception e) {\n+                        throw new Error(\"Test FAILED: unknown exception\", e);\n+                    }\n@@ -140,1 +95,1 @@\n-        }\n+            }\n@@ -143,62 +98,1 @@\n-\n-        f.setVisible(true);\n-    }\/\/ start()\n-\n-    \/\/The rest of this class is the actions which perform the test...\n-\n-    \/\/Use Sysout.println to communicate with the user NOT System.out!!\n-    \/\/Sysout.println (\"Something Happened!\");\n-\n-}\n-\n-\/* Place other classes related to the test after this line *\/\n-\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n+        return f;\n@@ -206,90 +100,1 @@\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ TestDialog  class\n+}\n","filename":"test\/jdk\/java\/awt\/PrintJob\/PrintCheckboxTest\/PrintCheckboxManualTest.java","additions":56,"deletions":251,"binary":false,"changes":307,"status":"modified"}]}