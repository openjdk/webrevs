{"files":[{"patch":"@@ -643,4 +643,0 @@\n-\n-  if (heap->mode()->is_generational()) {\n-    heap->old_generation()->card_scan()->mark_read_table_as_clean();\n-  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -139,9 +139,5 @@\n-      if (heap->mode()->is_generational()) {\n-        \/\/ Clean the read table before swapping it. The end goal here is to have a clean\n-        \/\/ write table, and to have the read table updated with the previous write table.\n-        heap->old_generation()->card_scan()->mark_read_table_as_clean();\n-\n-        if (_generation->is_young()) {\n-          \/\/ Swap remembered sets for young\n-          _generation->swap_card_tables();\n-        }\n+      op_reset();\n+\n+      if (heap->mode()->is_generational() && _generation->is_young()) {\n+        \/\/ Swap remembered sets for young\n+        _generation->swap_card_tables();\n@@ -185,2 +181,0 @@\n-      op_reset();\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -249,0 +249,5 @@\n+\n+  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+  if (heap->mode()->is_generational()) {\n+    heap->old_generation()->card_scan()->mark_read_table_as_clean();\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}