{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.io.IOException;\n@@ -129,0 +130,34 @@\n+    \/*\n+     * Special case: Assert subsequent input stream is read when preceding stream already was MAX_VALUE long.\n+     * Note: Not testing actual content as it requires multiple GBs of memory and long time.\n+     *\/\n+    @Test\n+    public void testHugeStream() throws Exception {\n+        InputStream is1 = repeat(0, Integer.MAX_VALUE);\n+        InputStream is2 = repeat(0, 1);\n+        assertEquals(is1.available(), Integer.MAX_VALUE);\n+        assertEquals(is2.available(), 1);\n+        SequenceInputStream sis = new SequenceInputStream(is1, is2);\n+        OutputStream nos = OutputStream.nullOutputStream();\n+        sis.transferTo(nos);\n+        assertEquals(is1.available(), 0);\n+        assertEquals(is2.available(), 0);\n+    }\n+\n+    private static InputStream repeat(int b, long count) {\n+        return new InputStream() {\n+            private int pos;\n+            @Override\n+            public int available() throws IOException {\n+                return (int) Math.min(count - pos, Integer.MAX_VALUE);\n+            }\n+            @Override\n+            public int read() throws IOException {\n+                if (pos >= count)\n+                    return -1;\n+                pos++;\n+                return b;\n+            }\n+        };\n+    }\n+\n","filename":"test\/jdk\/java\/io\/SequenceInputStream\/TransferTo.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"}]}