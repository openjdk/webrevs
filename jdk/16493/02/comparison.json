{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import jdk.internal.event.ThrowableTracer;\n+\n@@ -56,0 +58,3 @@\n+        if (Throwable.jfrTracing) {\n+            ThrowableTracer.traceError(getClass(), null);\n+        }\n@@ -68,0 +73,3 @@\n+        if (Throwable.jfrTracing) {\n+            ThrowableTracer.traceError(getClass(), message);\n+        }\n@@ -86,0 +94,3 @@\n+        if (Throwable.jfrTracing) {\n+            ThrowableTracer.traceError(getClass(), message);\n+        }\n@@ -103,0 +114,3 @@\n+        if (Throwable.jfrTracing) {\n+            ThrowableTracer.traceError(getClass(), null);\n+        }\n@@ -124,0 +138,3 @@\n+        if (Throwable.jfrTracing) {\n+            ThrowableTracer.traceError(getClass(), message);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Error.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jdk.internal.event.ThrowableTracer;\n@@ -121,0 +122,5 @@\n+    \/**\n+     * Flag that determines if exceptions should be traced by JFR\n+     *\/\n+    static volatile boolean jfrTracing;\n+\n@@ -259,0 +265,3 @@\n+        if (jfrTracing) {\n+            ThrowableTracer.traceThrowable(getClass(), null);\n+        }\n@@ -275,0 +284,3 @@\n+        if (jfrTracing) {\n+            ThrowableTracer.traceThrowable(getClass(), message);\n+        }\n@@ -298,0 +310,3 @@\n+        if (jfrTracing) {\n+            ThrowableTracer.traceThrowable(getClass(), message);\n+        }\n@@ -321,0 +336,3 @@\n+        if (jfrTracing) {\n+            ThrowableTracer.traceThrowable(getClass(), null);\n+        }\n@@ -373,1 +391,1 @@\n-        if (!enableSuppression)\n+        if (!enableSuppression) {\n@@ -375,0 +393,4 @@\n+        }\n+        if (jfrTracing) {\n+            ThrowableTracer.traceThrowable(getClass(), message);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Throwable.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.event;\n+\n+\/**\n+ * Event recording error exceptions.\n+ *\/\n+public final class ErrorThrownEvent extends Event {\n+    public String message;\n+    public Class<?> thrownClass;\n+\n+    public static void commit(long start, String message, Class<?> thrownClass) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/ErrorThrownEvent.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.event;\n+\n+\/**\n+ * Event recording number of exceptions that has been created.\n+ *\/\n+public class ExceptionStatisticsEvent extends Event {\n+\n+    public long throwables;\n+\n+    public static void commit(long timestamp, long throwables) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/ExceptionStatisticsEvent.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.event;\n+\n+\/**\n+ * Event recording all exception.\n+ *\/\n+public final class ExceptionThrownEvent extends Event {\n+    public String message;\n+    public Class<?> thrownClass;\n+\n+    public static void commit(long start, String message, Class<?> thrownClass) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/ExceptionThrownEvent.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.event;\n+\n+import java.lang.reflect.Field;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+\/**\n+ * Helper class for exception events.\n+ *\/\n+public final class ThrowableTracer {\n+\n+    private static final AtomicLong numThrowables = new AtomicLong();\n+\n+    public static void enable() throws NoSuchFieldException, IllegalAccessException {\n+        Field field = Throwable.class.getDeclaredField(\"jfrTracing\");\n+        field.setAccessible(true);\n+        field.setBoolean(null, true);\n+    }\n+\n+    public static void traceError(Class<?> clazz, String message) {\n+        if (OutOfMemoryError.class.isAssignableFrom(clazz)) {\n+            return;\n+        }\n+\n+        if (ErrorThrownEvent.enabled()) {\n+            long timestamp = ErrorThrownEvent.timestamp();\n+            ErrorThrownEvent.commit(timestamp, message, clazz);\n+        }\n+        if (ExceptionThrownEvent.enabled()) {\n+            long timestamp = ExceptionThrownEvent.timestamp();\n+            ExceptionThrownEvent.commit(timestamp, message, clazz);\n+        }\n+        numThrowables.incrementAndGet();\n+    }\n+\n+    public static void traceThrowable(Class<?> clazz, String message) {\n+        if (ExceptionThrownEvent.enabled()) {\n+            long timestamp = ExceptionThrownEvent.timestamp();\n+            ExceptionThrownEvent.commit(timestamp, message, clazz);\n+        }\n+        numThrowables.incrementAndGet();\n+    }\n+\n+    public static void emitStatistics() {\n+        long timestamp = ExceptionStatisticsEvent.timestamp();\n+        ExceptionStatisticsEvent.commit(timestamp, numThrowables.get());\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/ThrowableTracer.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.jfr.internal.MirrorEvent;\n@@ -38,0 +39,1 @@\n+@MirrorEvent(className = \"jdk.internal.event.ErrorThrownEvent\")\n@@ -41,3 +43,0 @@\n-    \/\/ The order of these fields must be the same as the parameters in\n-    \/\/ commit(..., String, Class)\n-\n@@ -48,6 +47,1 @@\n-    public Class<?> thrownClass;\n-\n-    public static void commit(long start, String message, Class<? extends Error> thrownClass) {\n-        \/\/ Generated\n-    }\n-}\n+    public Class<?> thrownClass;}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ErrorThrownEvent.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-    public static final EventConfiguration ERROR_THROWN = JVMSupport.getConfiguration(ErrorThrownEvent.class);\n-    public static final EventConfiguration EXCEPTION_THROWN = JVMSupport.getConfiguration(ExceptionThrownEvent.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/EventConfigurations.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.jfr.internal.MirrorEvent;\n@@ -39,0 +40,1 @@\n+@MirrorEvent(className = \"jdk.internal.event.ExceptionStatisticsEvent\")\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ExceptionStatisticsEvent.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.jfr.internal.MirrorEvent;\n@@ -39,0 +40,1 @@\n+@MirrorEvent(className = \"jdk.internal.event.ExceptionThrownEvent\")\n@@ -42,3 +44,0 @@\n-    \/\/ The order of these fields must be the same as the parameters in\n-    \/\/ commit(..., String, Class)\n-\n@@ -50,4 +49,0 @@\n-\n-    public static void commit(long start, String message, Class<? extends Throwable> thrownClass) {\n-        \/\/ Generated\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ExceptionThrownEvent.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,0 +32,3 @@\n+import jdk.jfr.events.ErrorThrownEvent;\n+import jdk.jfr.events.ExceptionStatisticsEvent;\n+import jdk.jfr.events.ExceptionThrownEvent;\n@@ -61,1 +64,4 @@\n-        X509ValidationEvent.class\n+        X509ValidationEvent.class,\n+        ErrorThrownEvent.class,\n+        ExceptionStatisticsEvent.class,\n+        ExceptionThrownEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MirrorEvents.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,87 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.internal.instrument;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-\n-final class ConstructorTracerWriter extends ClassVisitor {\n-\n-    private final ConstructorWriter useInputParameter;\n-    private final ConstructorWriter noUseInputParameter;\n-\n-    static byte[] generateBytes(Class<?> clz, byte[] oldBytes) throws IOException {\n-        InputStream in = new ByteArrayInputStream(oldBytes);\n-        ClassReader cr = new ClassReader(in);\n-        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n-        ConstructorTracerWriter ctw = new ConstructorTracerWriter(cw, clz);\n-        cr.accept(ctw, 0);\n-        return cw.toByteArray();\n-    }\n-\n-    private ConstructorTracerWriter(ClassVisitor cv, Class<?> classToChange) {\n-        super(Opcodes.ASM7, cv);\n-        useInputParameter = new ConstructorWriter(classToChange, true);\n-        noUseInputParameter = new ConstructorWriter(classToChange, false);\n-    }\n-\n-    private boolean isConstructor(String name) {\n-        return name.equals(\"<init>\");\n-    }\n-\n-    private boolean takesStringParameter(String desc) {\n-        Type[] types = Type.getArgumentTypes(desc);\n-        if (types.length > 0 && types[0].getClassName().equals(String.class.getName())) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    @Override\n-    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n-\n-        MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);\n-\n-        \/\/ Get a hold of the constructors that takes a String as a parameter\n-        if (isConstructor(name)) {\n-            if (takesStringParameter(desc)) {\n-                useInputParameter.setMethodVisitor(mv);\n-                return useInputParameter;\n-            }\n-            noUseInputParameter.setMethodVisitor(mv);\n-            return noUseInputParameter;\n-        }\n-        return mv;\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/ConstructorTracerWriter.java","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.internal.instrument;\n-\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACONST_NULL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-\n-final class ConstructorWriter extends MethodVisitor {\n-\n-    private final boolean useInputParameter;\n-    private final String shortClassName;\n-    private final String fullClassName;\n-\n-    ConstructorWriter(Class<?> classToChange, boolean useInputParameter) {\n-        super(Opcodes.ASM7);\n-        this.useInputParameter = useInputParameter;\n-        shortClassName = classToChange.getSimpleName();\n-        fullClassName = classToChange.getName().replace('.', '\/');\n-    }\n-\n-    @Override\n-    public void visitInsn(int opcode)\n-    {\n-        if (opcode == RETURN) {\n-            if (useInputParameter) {\n-                useInput();\n-            } else {\n-                noInput();\n-            }\n-        }\n-        mv.visitInsn(opcode);\n-    }\n-    @SuppressWarnings(\"deprecation\")\n-    private void useInput()\n-    {\n-        \/\/Load 'this' from local variable 0\n-        \/\/Load first input parameter\n-        \/\/Invoke ThrowableTracer.traceCLASS(this, parameter) for current class\n-        mv.visitVarInsn(ALOAD, 0);\n-        mv.visitVarInsn(ALOAD, 1);\n-        mv.visitMethodInsn(INVOKESTATIC, \"jdk\/jfr\/internal\/instrument\/ThrowableTracer\",\n-                \"trace\" + shortClassName, \"(L\" + fullClassName +\n-                \";Ljava\/lang\/String;)V\");\n-    }\n-\n-    @SuppressWarnings(\"deprecation\")\n-    private void noInput()\n-    {\n-        \/\/Load 'this' from local variable 0\n-        \/\/Load \"\"\n-        \/\/Invoke ThrowableTracer.traceCLASS(this, \"\") for current class\n-        mv.visitVarInsn(ALOAD, 0);\n-        mv.visitInsn(ACONST_NULL);\n-        mv.visitMethodInsn(INVOKESTATIC, \"jdk\/jfr\/internal\/instrument\/ThrowableTracer\",\n-                \"trace\" + shortClassName, \"(L\" + fullClassName +\n-                \";Ljava\/lang\/String;)V\");\n-    }\n-\n-    public void setMethodVisitor(MethodVisitor mv) {\n-        this.mv = mv;\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/ConstructorWriter.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.internal.event.ThrowableTracer;\n@@ -42,3 +43,0 @@\n-import jdk.jfr.events.ErrorThrownEvent;\n-import jdk.jfr.events.ExceptionStatisticsEvent;\n-import jdk.jfr.events.ExceptionThrownEvent;\n@@ -69,3 +67,0 @@\n-        ExceptionThrownEvent.class,\n-        ExceptionStatisticsEvent.class,\n-        ErrorThrownEvent.class,\n@@ -77,0 +72,3 @@\n+        jdk.internal.event.ErrorThrownEvent.class,\n+        jdk.internal.event.ExceptionStatisticsEvent.class,\n+        jdk.internal.event.ExceptionThrownEvent.class,\n@@ -121,1 +119,1 @@\n-                PeriodicEvents.addJDKEvent(ExceptionStatisticsEvent.class, emitExceptionStatistics);\n+                PeriodicEvents.addJDKEvent(jdk.internal.event.ExceptionStatisticsEvent.class, emitExceptionStatistics);\n@@ -126,0 +124,1 @@\n+                ThrowableTracer.enable();\n@@ -142,2 +141,0 @@\n-            list.add(java.lang.Throwable.class);\n-            list.add(java.lang.Error.class);\n@@ -177,3 +174,1 @@\n-        ExceptionStatisticsEvent t = new ExceptionStatisticsEvent();\n-        t.throwables = ThrowableTracer.numThrowables();\n-        t.commit();\n+        ThrowableTracer.emitStatistics();\n@@ -242,10 +237,0 @@\n-        if (java.lang.Throwable.class == klass) {\n-            Logger.log(LogTag.JFR_SYSTEM, LogLevel.TRACE, \"Instrumenting java.lang.Throwable\");\n-            return ConstructorTracerWriter.generateBytes(java.lang.Throwable.class, oldBytes);\n-        }\n-\n-        if (java.lang.Error.class == klass) {\n-            Logger.log(LogTag.JFR_SYSTEM, LogLevel.TRACE, \"Instrumenting java.lang.Error\");\n-            return ConstructorTracerWriter.generateBytes(java.lang.Error.class, oldBytes);\n-        }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":7,"deletions":22,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.internal.instrument;\n-\n-import java.util.concurrent.atomic.AtomicLong;\n-\n-import jdk.jfr.events.EventConfigurations;\n-import jdk.jfr.events.ErrorThrownEvent;\n-import jdk.jfr.events.ExceptionThrownEvent;\n-import jdk.jfr.internal.event.EventConfiguration;\n-\n-public final class ThrowableTracer {\n-\n-    private static final AtomicLong numThrowables = new AtomicLong();\n-\n-    public static void traceError(Error e, String message) {\n-        if (e instanceof OutOfMemoryError) {\n-            return;\n-        }\n-        long timestamp = EventConfiguration.timestamp();\n-\n-        EventConfiguration eventConfiguration1 = EventConfigurations.ERROR_THROWN;\n-        if (eventConfiguration1.isEnabled()) {\n-            ErrorThrownEvent.commit(timestamp, message, e.getClass());\n-        }\n-        EventConfiguration eventConfiguration2 = EventConfigurations.EXCEPTION_THROWN;\n-        if (eventConfiguration2.isEnabled()) {\n-            ExceptionThrownEvent.commit(timestamp, message, e.getClass());\n-        }\n-        numThrowables.incrementAndGet();\n-    }\n-\n-    public static void traceThrowable(Throwable t, String message) {\n-        EventConfiguration eventConfiguration = EventConfigurations.EXCEPTION_THROWN;\n-        if (eventConfiguration.isEnabled()) {\n-            long timestamp = EventConfiguration.timestamp();\n-            ExceptionThrownEvent.commit(timestamp, message, t.getClass());\n-        }\n-        numThrowables.incrementAndGet();\n-    }\n-\n-    public static long numThrowables() {\n-        return numThrowables.get();\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/ThrowableTracer.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.jfr.Event;\n+import jdk.internal.event.Event;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/JDKEventTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.jfr.Event;\n+import jdk.internal.event.Event;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/JavaEventTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.jfr.Event;\n+import jdk.internal.event.Event;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/PeriodicEvents.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.jfr.Event;\n+import jdk.internal.event.Event;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/UserEventTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}