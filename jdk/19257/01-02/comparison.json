{"files":[{"patch":"@@ -1101,1 +1101,1 @@\n-            If <code>size<\/code> is zero, <code>nullptr<\/code> is returned.\n+            If <code>size<\/code> is zero, <code>null<\/code> pointer is returned.\n@@ -1517,1 +1517,1 @@\n-        The function may return <code>nullptr<\/code> in the start phase if the\n+        The function may return <code>null<\/code> pointer in the start phase if the\n@@ -1523,1 +1523,1 @@\n-        as an argument will accept <code>nullptr<\/code> to mean\n+        as an argument will accept <code>null<\/code> pointer to mean\n@@ -1533,1 +1533,1 @@\n-             On return, points to the current thread, or <code>nullptr<\/code>.\n+             On return, points to the current thread, or <code>null<\/code>.\n@@ -1682,1 +1682,1 @@\n-          Both <paramlink id=\"except_list\"><\/paramlink> was <code>nullptr<\/code>\n+          Both <paramlink id=\"except_list\"><\/paramlink> was <code>null<\/code> pointer\n@@ -1779,1 +1779,1 @@\n-          Both <paramlink id=\"except_list\"><\/paramlink> was <code>nullptr<\/code>\n+          Both <paramlink id=\"except_list\"><\/paramlink> was <code>null<\/code> pointer\n@@ -1901,1 +1901,1 @@\n-          Both <paramlink id=\"except_list\"><\/paramlink> was <code>nullptr<\/code>\n+          Both <paramlink id=\"except_list\"><\/paramlink> was <code>null<\/code> pointer\n@@ -1996,1 +1996,1 @@\n-            <code>nullptr<\/code> if the thread has terminated.\n+            <code>null<\/code> pointer if the thread has terminated.\n@@ -2142,1 +2142,1 @@\n-              nullptr if there is none.\n+              <code>null<\/code> pointer if there is none.\n@@ -2262,1 +2262,1 @@\n-            <nullok><code>nullptr<\/code> is passed to the start function<\/nullok>\n+            <nullok><code>null<\/code> pointer is passed to the start function<\/nullok>\n@@ -2295,1 +2295,1 @@\n-        This value is <code>nullptr<\/code> unless set with this function.\n+        This value is <code>null<\/code> pointer unless set with this function.\n@@ -2319,1 +2319,1 @@\n-            <nullok>value is set to <code>nullptr<\/code><\/nullok>\n+            <nullok>value is set to <code>null<\/code> pointer<\/nullok>\n@@ -2353,1 +2353,1 @@\n-            pointer is <code>nullptr<\/code>.\n+            pointer is <code>null<\/code>.\n@@ -2592,1 +2592,1 @@\n-                       &amp;methodName, nullptr, nullptr);\n+                       &amp;methodName, NULL, NULL);\n@@ -3149,1 +3149,1 @@\n-            An object or <code>nullptr<\/code>.\n+            An object or <code>null<\/code> pointer.\n@@ -4277,1 +4277,1 @@\n-            Otherwise <code>nullptr<\/code>.\n+            Otherwise <code>null<\/code> pointer.\n@@ -4322,1 +4322,1 @@\n-            <code>nullptr<\/code> if the referrer in not an object (that is,\n+            <code>null<\/code> pointer if the referrer in not an object (that is,\n@@ -4624,1 +4624,1 @@\n-        Whether a callback is provided or is <code>nullptr<\/code> only determines\n+        Whether a callback is provided or is <code>null<\/code> pointer only determines\n@@ -4769,1 +4769,1 @@\n-            <nullok><code>nullptr<\/code> is passed as the user supplied data<\/nullok>\n+            <nullok><code>null<\/code> pointer is passed as the user supplied data<\/nullok>\n@@ -4815,1 +4815,1 @@\n-        Whether a callback is provided or is <code>nullptr<\/code> only determines\n+        Whether a callback is provided or is <code>null<\/code> pointer only determines\n@@ -4945,1 +4945,1 @@\n-            <nullok><code>nullptr<\/code> is passed as the user supplied data<\/nullok>\n+            <nullok><code>null<\/code> pointer is passed as the user supplied data<\/nullok>\n@@ -5593,1 +5593,1 @@\n-            <nullok><code>nullptr<\/code> is passed as the user supplied data<\/nullok>\n+            <nullok><code>null<\/code> pointer is passed as the user supplied data<\/nullok>\n@@ -5637,1 +5637,1 @@\n-        specified as <code>nullptr<\/code> then this function returns after\n+        specified as <code>null<\/code> pointer then this function returns after\n@@ -5691,1 +5691,1 @@\n-            <nullok><code>nullptr<\/code> is passed as the user supplied data<\/nullok>\n+            <nullok><code>null<\/code> pointer is passed as the user supplied data<\/nullok>\n@@ -5750,1 +5750,1 @@\n-            <nullok><code>nullptr<\/code> is passed as the user supplied data<\/nullok>\n+            <nullok><code>null<\/code> pointer is passed as the user supplied data<\/nullok>\n@@ -5818,1 +5818,1 @@\n-            <nullok><code>nullptr<\/code> is passed as the user supplied data<\/nullok>\n+            <nullok><code>null<\/code> pointeris passed as the user supplied data<\/nullok>\n@@ -6770,1 +6770,1 @@\n-        otherwise <code>nullptr<\/code> is returned.\n+        otherwise <code>null<\/code> pointer is returned.\n@@ -6784,1 +6784,1 @@\n-            If the <code>class_loader<\/code> is not <code>nullptr<\/code>\n+            If the <code>class_loader<\/code> is not <code>null<\/code> pointer\n@@ -6803,1 +6803,1 @@\n-            or points to <code>nullptr<\/code>.\n+            or points to <code>null<\/code>.\n@@ -6809,1 +6809,1 @@\n-          If class loader is not <code>nullptr<\/code> and is not a class loader object.\n+          If class loader is not <code>null<\/code> pointer and is not a class loader object.\n@@ -7264,1 +7264,1 @@\n-            on return, points to <code>nullptr<\/code>.\n+            on return, points to <code>null<\/code>.\n@@ -7794,1 +7794,1 @@\n-              points to <code>nullptr<\/code>.\n+              points to <code>null<\/code>.\n@@ -8117,1 +8117,1 @@\n-          One of <code>class_bytes<\/code> is <code>nullptr<\/code>.\n+          One of <code>class_bytes<\/code> is <code>null<\/code> pointer.\n@@ -8252,1 +8252,1 @@\n-              The thread owning this monitor, or <code>nullptr<\/code> if unused\n+              The thread owning this monitor, or <code>null<\/code> pointer if unused\n@@ -8414,1 +8414,1 @@\n-            on return, points to <code>nullptr<\/code>.\n+            on return, points to <code>null<\/code>.\n@@ -8607,1 +8607,1 @@\n-            on return, points to <code>nullptr<\/code>.\n+            on return, points to <code>null<\/code>.\n@@ -8905,1 +8905,1 @@\n-            The value of this field will be <code>nullptr<\/code> for any local\n+            The value of this field will be <code>null<\/code> pointer for any local\n@@ -9243,1 +9243,1 @@\n-         <code>nullptr<\/code> is the same as calling this function with\n+         <code>null<\/code> pointer is the same as calling this function with\n@@ -9663,1 +9663,1 @@\n-        When an entry is <code>nullptr<\/code> or when the event is beyond\n+        When an entry is <code>null<\/code> pointer or when the event is beyond\n@@ -9711,1 +9711,1 @@\n-        If <code>event_thread<\/code> is <code>nullptr<\/code>,\n+        If <code>event_thread<\/code> is <code>null<\/code> pointer,\n@@ -9776,1 +9776,1 @@\n-          <paramlink id=\"event_thread\"\/> is non-<code>nullptr<\/code> and is not a valid thread.\n+          <paramlink id=\"event_thread\"\/> is non-<code>null<\/code> pointer and is not a valid thread.\n@@ -9779,1 +9779,1 @@\n-          <paramlink id=\"event_thread\"\/> is non-<code>nullptr<\/code> and is not alive\n+          <paramlink id=\"event_thread\"\/> is non-<code>null<\/code> pointer and is not alive\n@@ -10000,1 +10000,1 @@\n-              Is a <code>nullptr<\/code> argument permitted? Applies only to pointer and object types.\n+              Is a <code>null<\/code> pointer argument permitted? Applies only to pointer and object types.\n@@ -10228,1 +10228,1 @@\n-          enables the event. Or, if the callback is <code>nullptr<\/code>, disables\n+          enables the event. Or, if the callback is <code>null<\/code> pointer, disables\n@@ -10252,1 +10252,1 @@\n-              If <code>callback<\/code> is non-<code>nullptr<\/code>,\n+              If <code>callback<\/code> is non-<code>null<\/code> pointer,\n@@ -11046,1 +11046,1 @@\n-  GetThreadCpuTime(env, nullptr, nanos_ptr)\n+  GetThreadCpuTime(env, NULL, nanos_ptr)\n@@ -11639,1 +11639,1 @@\n-        This value is <code>nullptr<\/code> unless set with this function.\n+        This value is <code>null<\/code> pointer unless set with this function.\n@@ -11657,1 +11657,1 @@\n-            <nullok>value is set to <code>nullptr<\/code><\/nullok>\n+            <nullok>value is set to <code>null<\/code><\/nullok>\n@@ -11685,1 +11685,1 @@\n-            pointer is <code>nullptr<\/code>.\n+            pointer is <code>null<\/code>.\n@@ -11951,1 +11951,1 @@\n-      Pointer is unexpectedly <code>nullptr<\/code>.\n+      Pointer is unexpectedly <code>null<\/code>.\n@@ -12458,1 +12458,1 @@\n-            instance field; <code>nullptr<\/code> otherwise\n+            instance field; <code>null<\/code> pointer otherwise\n@@ -12528,1 +12528,1 @@\n-            instance field; <code>nullptr<\/code> otherwise\n+            instance field; <code>null<\/code> pointer otherwise\n@@ -12762,1 +12762,1 @@\n-            Will be <code>nullptr<\/code> if sent during the primordial\n+            Will be <code>null<\/code> pointer if sent during the primordial\n@@ -12879,1 +12879,1 @@\n-            Class that will catch the exception, or <code>nullptr<\/code> if no known catch\n+            Class that will catch the exception, or <code>null<\/code> pointer if no known catch\n@@ -12885,1 +12885,1 @@\n-            Method that will catch the exception, or <code>nullptr<\/code> if no known catch\n+            Method that will catch the exception, or <code>null<\/code> pointer if no known catch\n@@ -12917,1 +12917,1 @@\n-      to <code>nullptr<\/code>.\n+      to <code>null<\/code> pointer.\n@@ -13350,1 +13350,1 @@\n-    <code>class_being_redefined<\/code> is non <code>nullptr<\/code> and so\n+    <code>class_being_redefined<\/code> is non-<code>null<\/code> pointer and so\n@@ -13397,1 +13397,1 @@\n-          <code>nullptr<\/code> if sent by class load.\n+          <code>null<\/code> pointer if sent by class load.\n@@ -13404,1 +13404,1 @@\n-            <code>nullptr<\/code> if the bootstrap class loader.\n+            <code>null<\/code> pointer if the bootstrap class loader.\n@@ -13413,2 +13413,2 @@\n-            Note: if the class is defined with a <code>nullptr<\/code> name or\n-            without a name specified, <code>name<\/code> will be <code>nullptr<\/code>.\n+            Note: if the class is defined with a <code>null<\/code> pointer name or\n+            without a name specified, <code>name<\/code> will be <code>null<\/code> pointer.\n@@ -13632,1 +13632,1 @@\n-          <code>nullptr<\/code> if mapping information cannot be supplied.\n+          <code>null<\/code> pointer if mapping information cannot be supplied.\n@@ -14695,1 +14695,1 @@\n-    Allow nullptr as RunAgentThread arg.\n+    Allow null pointer as RunAgentThread arg.\n@@ -14705,1 +14705,1 @@\n-    Change GetFieldName to allow nullptr like GetMethodName.\n+    Change GetFieldName to allow null pointer like GetMethodName.\n@@ -14814,1 +14814,1 @@\n-      <code>GetClassLoader<\/code> return nullptr for the bootstrap class loader.\n+      <code>GetClassLoader<\/code> return null pointer for the bootstrap class loader.\n@@ -14824,1 +14824,1 @@\n-      Zero length allocations return nullptr.\n+      Zero length allocations return null pointer.\n@@ -14846,1 +14846,1 @@\n-      nullptr thread parameter on most functions is current\n+      null pointer thread parameter on most functions is current\n@@ -14883,1 +14883,1 @@\n-      to be set to nullptr.\n+      to be set to null pointer.\n@@ -14923,1 +14923,1 @@\n-      Allow thread and environment local storage to be set to nullptr.\n+      Allow thread and environment local storage to be set to null pointer.\n@@ -14955,1 +14955,1 @@\n-      Allow nullptr (means bootstrap loader) for GetClassloaderClasses.\n+      Allow null pointer (means bootstrap loader) for GetClassloaderClasses.\n@@ -15054,1 +15054,1 @@\n-      Allow nullptr user_data in heap iterators.\n+      Allow null pointer user_data in heap iterators.\n@@ -15202,1 +15202,1 @@\n-      Clarify that name in CFLH can be nullptr.\n+      Clarify that name in CFLH can be null pointer.\n@@ -15215,1 +15215,1 @@\n-      disallow nullptr for this parameter.\n+      disallow null pointer for this parameter.\n@@ -15410,1 +15410,1 @@\n-      The function may return nullptr in the start phase if the\n+      The function may return null pointer in the start phase if the\n","filename":"src\/hotspot\/share\/prims\/jvmti.xml","additions":74,"deletions":74,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -424,1 +424,1 @@\n-        <xsl:value-of select=\"@const\"\/>, nullptr)<\/code>\n+        <xsl:value-of select=\"@const\"\/>, NULL)<\/code>\n@@ -1589,1 +1589,1 @@\n-  <code>nullptr<\/code>\n+  <code>null<\/code> pointer\n","filename":"src\/hotspot\/share\/prims\/jvmti.xsl","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-\/\/ method - pre-checked for validity, but may be nullptr meaning obsolete method<\/xsl:text>\n+\/\/ method - pre-checked for validity, but may be null pointer meaning obsolete method<\/xsl:text>\n@@ -169,1 +169,1 @@\n-      <xsl:text> - pre-checked for nullptr<\/xsl:text>\n+      <xsl:text> - pre-checked for null pointer<\/xsl:text>\n@@ -175,1 +175,1 @@\n-      <xsl:text> - nullptr is a valid value, must be checked<\/xsl:text>\n+      <xsl:text> - null pointer is a valid value, must be checked<\/xsl:text>\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.xsl","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-  <code>nullptr<\/code>, <xsl:apply-templates\/>.\n+  <code>null<\/code> pointer, <xsl:apply-templates\/>.\n@@ -381,1 +381,1 @@\n-    <code>nullptr<\/code>, the current thread is used.\n+    <code>null<\/code> pointer, the current thread is used.\n","filename":"src\/hotspot\/share\/prims\/jvmtiLib.xsl","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}