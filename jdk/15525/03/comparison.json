{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,0 +183,84 @@\n+    static String collapseDots(WindowsPath absolute) throws IOException {\n+        String path = absolute.toString();\n+\n+        \/\/ Return the absolute path string directly if there are no \".\"s.\n+        if (path.indexOf('.') < 0)\n+            return path;\n+\n+        \/\/ The Windows function GetFullPathName() does not access the\n+        \/\/ file system, hence is susceptible to removing symbolic links\n+        \/\/ which are followed by the special name \"..\" whether or not\n+        \/\/ links are being followed. Examine the path element-by-element\n+        \/\/ to determine whether this would occur, and if so use the\n+        \/\/ full path manually derived in the process.\n+        String fullpath = null;\n+        if (path.contains(\"..\")) {\n+            WindowsPath p = absolute.getRoot();\n+            WindowsPath res = p;\n+            boolean parentIsLink = false;\n+            boolean parentIsDots = false;\n+            boolean wouldCollapseLink = false;\n+\n+            for (int i = 0; i < absolute.getNameCount(); i++) {\n+                WindowsPath element = absolute.getName(i);\n+                String s = element.toString();\n+                if (s.equals(\".\"))\n+                    continue;\n+\n+                if (s.equals(\"..\")) {\n+                    res = res.getParent();\n+                    if (res == null)\n+                        res = absolute.getRoot();\n+\n+                    if (parentIsLink)\n+                        wouldCollapseLink = true;\n+\n+                    if (!parentIsLink && !parentIsDots) {\n+                        p = p.getParent();\n+                        if (p == null) {\n+                            p = absolute.getRoot();\n+                        }\n+                    } else {\n+                        p = p.resolve(element);\n+                        parentIsDots = true;\n+                        parentIsLink = false;\n+                    }\n+                    continue;\n+                } else {\n+                    parentIsDots = false;\n+                }\n+\n+                res = res.resolve(element);\n+                WindowsFileAttributes attrs = null;\n+                try {\n+                    attrs = WindowsFileAttributes.get(res, false);\n+                } catch (WindowsException x) {\n+                    x.rethrowAsIOException(res);\n+                }\n+\n+                if (attrs.isSymbolicLink()) {\n+                    parentIsLink = true;\n+                    res = resolveAllLinks(res);\n+                } else {\n+                    parentIsLink = false;\n+                }\n+\n+                p = p.resolve(element);\n+            }\n+\n+            if (wouldCollapseLink)\n+                fullpath = p.toString();\n+        }\n+\n+        \/\/ Use GetFullPathName() if it would not collapse links\n+        if (fullpath == null) {\n+            try {\n+                fullpath = GetFullPathName(path);\n+            } catch (WindowsException x) {\n+                x.rethrowAsIOException(path);\n+            }\n+        }\n+\n+        return fullpath;\n+    }\n+\n@@ -193,1 +277,1 @@\n-        String path = null;\n+        WindowsPath absolute = null;\n@@ -195,1 +279,1 @@\n-            path = input.toAbsolutePath().toString();\n+            absolute = input.toAbsolutePath();\n@@ -201,7 +285,1 @@\n-        if (path.indexOf('.') >= 0) {\n-            try {\n-                path = GetFullPathName(path);\n-            } catch (WindowsException x) {\n-                x.rethrowAsIOException(input);\n-            }\n-        }\n+        String path = collapseDots(absolute);\n@@ -218,1 +296,1 @@\n-            \/\/ Driver specifier\n+            \/\/ Drive specifier\n@@ -255,23 +333,34 @@\n-        \/\/ iterate through each component to get its actual name in the\n-        \/\/ directory\n-        int curr = start;\n-        while (curr < path.length()) {\n-            int next = path.indexOf('\\\\', curr);\n-            int end = (next == -1) ? path.length() : next;\n-            String search = sb.toString() + path.substring(curr, end);\n-            try {\n-                FirstFile fileData = FindFirstFile(WindowsPath.addPrefixIfNeeded(search));\n-                FindClose(fileData.handle());\n-\n-                \/\/ if a reparse point is encountered then we must return the\n-                \/\/ final path.\n-                if (resolveLinks &&\n-                    WindowsFileAttributes.isReparsePoint(fileData.attributes()))\n-                {\n-                    String result = getFinalPath(input);\n-                    if (result == null) {\n-                        \/\/ Fallback to slow path, usually because there is a sym\n-                        \/\/ link to a file system that doesn't support sym links.\n-                        WindowsPath resolved = resolveAllLinks(\n-                            WindowsPath.createFromNormalizedPath(fs, path));\n-                        result = getRealPath(resolved, false);\n+        \/\/ FindFirstFile() and getFinalPath() do not work if there are\n+        \/\/ any uncollapsed occurrences of \"..\" in the path\n+        if (!path.contains(\"..\")) {\n+            \/\/ iterate through each component to get its actual name in the\n+            \/\/ directory\n+            int curr = start;\n+            while (curr < path.length()) {\n+                int next = path.indexOf('\\\\', curr);\n+                int end = (next == -1) ? path.length() : next;\n+                String search = sb.toString() + path.substring(curr, end);\n+                try {\n+                    FirstFile fileData = FindFirstFile(WindowsPath.addPrefixIfNeeded(search));\n+                    FindClose(fileData.handle());\n+\n+                    \/\/ if a reparse point is encountered then we must return the\n+                    \/\/ final path.\n+                    if (resolveLinks &&\n+                        WindowsFileAttributes.isReparsePoint(fileData.attributes()))\n+                        {\n+                            String result = getFinalPath(input);\n+                            if (result == null) {\n+                                \/\/ Fallback to slow path, usually because there is a sym\n+                                \/\/ link to a file system that doesn't support sym links.\n+                                WindowsPath resolved = resolveAllLinks(\n+                                    WindowsPath.createFromNormalizedPath(fs, path));\n+                                result = getRealPath(resolved, false);\n+                            }\n+                            return result;\n+                        }\n+\n+                    \/\/ add the name to the result\n+                    sb.append(fileData.name());\n+                    if (next != -1) {\n+                        sb.append('\\\\');\n@@ -279,1 +368,2 @@\n-                    return result;\n+                } catch (WindowsException e) {\n+                    e.rethrowAsIOException(path);\n@@ -281,0 +371,2 @@\n+                curr = end + 1;\n+            }\n@@ -282,5 +374,10 @@\n-                \/\/ add the name to the result\n-                sb.append(fileData.name());\n-                if (next != -1) {\n-                    sb.append('\\\\');\n-                }\n+            return sb.toString();\n+        }\n+\n+        \/\/ path contains \"..\"\n+        \/\/ if resolving links then do so, otherwise we are done\n+        if (resolveLinks) {\n+            WindowsPath wp = WindowsPath.createFromNormalizedPath(fs, path);\n+            WindowsPath resolved = resolveAllLinks(wp);\n+            try {\n+                path = GetFullPathName(resolved.toString());\n@@ -290,1 +387,1 @@\n-            curr = end + 1;\n+            return getRealPath(resolved, false);\n@@ -292,2 +389,1 @@\n-\n-        return sb.toString();\n+        return path;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsLinkSupport.java","additions":139,"deletions":43,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -572,2 +572,0 @@\n-java\/nio\/file\/Path\/ToRealPath.java                              8315273 windows-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 8295753 8306882\n+ * @bug 8295753 8306882 8315273\n","filename":"test\/jdk\/java\/nio\/file\/Path\/ToRealPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}