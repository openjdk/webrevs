{"files":[{"patch":"@@ -951,0 +951,8 @@\n+ZRemembered* ZGenerationYoung::remembered() {\n+  return  &_remembered;\n+}\n+\n+void ZGenerationYoung::remap_current_remset(ZRemsetTableIterator* iter) {\n+  _remembered.remap_current(iter);\n+}\n+\n@@ -1438,1 +1446,1 @@\n-  ZGenerationPagesParallelIterator _old_pages_parallel_iterator;\n+  ZRemsetTableIterator             _remset_table_iterator;\n@@ -1452,1 +1460,1 @@\n-      _old_pages_parallel_iterator(page_table, ZGenerationId::old, page_allocator),\n+      _remset_table_iterator(ZGeneration::young()->remembered(), false \/* previous *\/),\n@@ -1475,5 +1483,2 @@\n-      _old_pages_parallel_iterator.do_pages([&](ZPage* page) {\n-        \/\/ Visit all object fields that potentially pointing into young generation\n-        page->oops_do_current_remembered(ZBarrier::load_barrier_on_oop_field);\n-        return true;\n-      });\n+      \/\/ Visit all object fields that potentially pointing into young generation\n+      ZGeneration::young()->remap_current_remset(&_remset_table_iterator);\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -194,0 +194,1 @@\n+  friend class ZRemapYoungRootsTask;\n@@ -222,0 +223,2 @@\n+  ZRemembered* remembered();\n+\n@@ -255,0 +258,3 @@\n+  \/\/ Remap the oops of the current remembered set\n+  void remap_current_remset(ZRemsetTableIterator* iter);\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -395,13 +395,8 @@\n-class ZRemsetTableIterator {\n-private:\n-  ZRemembered* const            _remembered;\n-  ZPageTable* const             _page_table;\n-  const ZForwardingTable* const _old_forwarding_table;\n-  volatile BitMap::idx_t        _claimed;\n-\n-public:\n-  ZRemsetTableIterator(ZRemembered* remembered)\n-    : _remembered(remembered),\n-      _page_table(remembered->_page_table),\n-      _old_forwarding_table(remembered->_old_forwarding_table),\n-      _claimed(0) {}\n+ZRemsetTableIterator::ZRemsetTableIterator(ZRemembered* remembered, bool previous)\n+  : _remembered(remembered),\n+    _bm(previous\n+        ? _remembered->_found_old.previous_bitmap()\n+        : _remembered->_found_old.current_bitmap()),\n+    _page_table(remembered->_page_table),\n+    _old_forwarding_table(remembered->_old_forwarding_table),\n+    _claimed(0) {}\n@@ -410,2 +405,2 @@\n-  bool next(ZRemsetTableEntry* entry_addr)  {\n-    BitMap* const bm = _remembered->_found_old.previous_bitmap();\n+bool ZRemsetTableIterator::next(ZRemsetTableEntry* entry_addr)  {\n+  BitMap::idx_t prev = Atomic::load(&_claimed);\n@@ -413,1 +408,4 @@\n-    BitMap::idx_t prev = Atomic::load(&_claimed);\n+  for (;;) {\n+    if (prev == _bm->size()) {\n+      return false;\n+    }\n@@ -415,4 +413,5 @@\n-    for (;;) {\n-      if (prev == bm->size()) {\n-        return false;\n-      }\n+    const BitMap::idx_t page_index = _bm->find_first_set_bit(_claimed);\n+    if (page_index == _bm->size()) {\n+      Atomic::cmpxchg(&_claimed, prev, page_index, memory_order_relaxed);\n+      return false;\n+    }\n@@ -420,5 +419,6 @@\n-      const BitMap::idx_t page_index = bm->find_first_set_bit(_claimed);\n-      if (page_index == bm->size()) {\n-        Atomic::cmpxchg(&_claimed, prev, page_index, memory_order_relaxed);\n-        return false;\n-      }\n+    const BitMap::idx_t res = Atomic::cmpxchg(&_claimed, prev, page_index + 1, memory_order_relaxed);\n+    if (res != prev) {\n+      \/\/ Someone else claimed\n+      prev = res;\n+      continue;\n+    }\n@@ -426,6 +426,1 @@\n-      const BitMap::idx_t res = Atomic::cmpxchg(&_claimed, prev, page_index + 1, memory_order_relaxed);\n-      if (res != prev) {\n-        \/\/ Someone else claimed\n-        prev = res;\n-        continue;\n-      }\n+    \/\/ Found bit - look around for page or forwarding to scan\n@@ -433,1 +428,4 @@\n-      \/\/ Found bit - look around for page or forwarding to scan\n+    ZForwarding* forwarding = nullptr;\n+    if (ZGeneration::old()->is_phase_relocate()) {\n+      forwarding = _old_forwarding_table->at(page_index);\n+    }\n@@ -435,4 +433,4 @@\n-      ZForwarding* forwarding = nullptr;\n-      if (ZGeneration::old()->is_phase_relocate()) {\n-        forwarding = _old_forwarding_table->at(page_index);\n-      }\n+    ZPage* page = _page_table->at(page_index);\n+    if (page != nullptr && !page->is_old()) {\n+      page = nullptr;\n+    }\n@@ -440,4 +438,4 @@\n-      ZPage* page = _page_table->at(page_index);\n-      if (page != nullptr && !page->is_old()) {\n-        page = nullptr;\n-      }\n+    if (page == nullptr && forwarding == nullptr) {\n+      \/\/ Nothing to scan\n+      continue;\n+    }\n@@ -445,4 +443,3 @@\n-      if (page == nullptr && forwarding == nullptr) {\n-        \/\/ Nothing to scan\n-        continue;\n-      }\n+    \/\/ Found old page or old forwarding\n+    entry_addr->_forwarding = forwarding;\n+    entry_addr->_page = page;\n@@ -450,3 +447,3 @@\n-      \/\/ Found old page or old forwarding\n-      entry_addr->_forwarding = forwarding;\n-      entry_addr->_page = page;\n+    return true;\n+  }\n+}\n@@ -454,2 +451,7 @@\n-      return true;\n-    }\n+void ZRemembered::remap_current(ZRemsetTableIterator* iter) {\n+  for (ZRemsetTableEntry entry; iter->next(&entry);) {\n+    assert(entry._forwarding == nullptr, \"Shouldn't be looking for forwardings\");\n+    assert(entry._page != nullptr, \"Must have found a page\");\n+    assert(entry._page->is_old(), \"Should only have found old pages\");\n+\n+    entry._page->oops_do_current_remembered(ZBarrier::load_barrier_on_oop_field);\n@@ -457,1 +459,1 @@\n-};\n+}\n@@ -473,1 +475,1 @@\n-      _remset_table_iterator(remembered)  {\n+      _remset_table_iterator(remembered, true \/* previous *\/)  {\n","filename":"src\/hotspot\/share\/gc\/z\/zRemembered.cpp","additions":53,"deletions":51,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+class ZRemsetTableIterator;\n@@ -39,0 +40,1 @@\n+struct ZRemsetTableEntry;\n@@ -102,0 +104,20 @@\n+\n+  \/\/ Remap the current remembered set\n+  void remap_current(ZRemsetTableIterator* iter);\n+};\n+\n+\/\/ This iterator uses the \"found old\" optimization to skip having to iterate\n+\/\/ over the entire page table. Make sure to check where and how the FoundOld\n+\/\/ data is cycled before using this iterator.\n+class ZRemsetTableIterator {\n+private:\n+  ZRemembered* const            _remembered;\n+  BitMap* const                 _bm;\n+  ZPageTable* const             _page_table;\n+  const ZForwardingTable* const _old_forwarding_table;\n+  volatile BitMap::idx_t        _claimed;\n+\n+public:\n+  ZRemsetTableIterator(ZRemembered* remembered, bool previous);\n+\n+  bool next(ZRemsetTableEntry* entry_addr);\n","filename":"src\/hotspot\/share\/gc\/z\/zRemembered.hpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}